/* REXX *************************************************************/
/* Main Routine to generate/process FTP JCL generation requests     */
/*                                                                  */
/* Author:  written with undubious precision by Larry Zuckett       */
/* Date:    11/25/2011                                              */
/*                                                                  */
/* ******************************************************************/
trace off     /* trace off or trace a */
m = msg("off")
/********************************************************************/
/* Create table to hold FTP DS Sets on first run of this routine    */
/********************************************************************/
/* Define tables with suffix to avoid enqueue issue with everyone   */
/* using the same name.                                             */
/********************************************************************/
Select
   when
      length(sysvar(sysuid)) = 6 then
      tab_suffix = substr(sysvar(sysuid),4,3)
   Otherwise
      tab_suffix = substr(sysvar(sysuid),5,3)
End   /* select */
main_tab = "FTPDS"||tab_suffix
"ispexec tbopen "main_tab" write"
/********************************************************************/
/* Seed table with room for 25 entries                              */
/********************************************************************/
if rc ¬= 0 then
 do
  call Create_table main_tab 'a' 'pn' 'dp' 'syp' 'smp'
  a =   '_'
  pn =  '__________________'
  dp =  '___________________________________________'
  syp = '___________________________________________'
  smp = '___________________________________________'
  do i= 1 to 25
    "ispexec tbadd "main_tab
  end
 end

"ispexec tbskip "main_tab" number(1)" /* point to first record in table */
DO WHILE (resp ¬= END)                /* process actions requested      */
  replace_flag = 'NO'  /* only seed with underscores on delete          */
  /*******************************************************************/
  /* Use tbdispl with panel option to initially display table        */
  /* and then use tbdispl without panel option to position to the    */
  /* next selected row in the table. Hence the reason for two        */
  /* "select" areas in this routine                                  */
  /*******************************************************************/
  "ispexec tbdispl "main_tab" panel(ftpg0001) autosel(yes) position(cr)"
  /* say "cr>"cr"<" */
  savedcr = cr
  wcr = strip(cr,l,"0")
  /* say "wcr>"wcr"<" */
  /* say 'ztdsels>'ztdsels'<' */
  processed_rows_to_go = ztdsels /* contains number of rows altered */
  /* say 'system prefix>'syp'<' */
  /* say 'SMS    prefix>'smp'<' */
  Select
    when a = 'B' then call Build_jcl_routine
    when a = 'C' then call Create_profile_routine
    when a = 'D' then call Delete_profile_routine
    when a = 'E' then call Edit_profile_routine
    when a = 'R' then call Replace_profile_routine
    Otherwise
  End   /* select */
  /* say 'processed rows to go>'processed_rows_to_go */
  processed_rows_to_go = processed_rows_to_go - 1
  DO WHILE (processed_rows_to_go > 0)
    "ispexec tbdispl "main_tab" position(cr)" /* position to next altered row */
  /* say "action>"a"<" */
  /* say "cr>"cr"<" */
    wcr = strip(cr,l,"0")
    Select
      when a = 'B' then call Build_jcl_routine
      when a = 'C' then call Create_profile_routine
      when a = 'D' then call Delete_profile_routine
      when a = 'E' then call Edit_profile_routine
      when a = 'R' then call Replace_profile_routine
      Otherwise
    End   /* select */
    processed_rows_to_go = processed_rows_to_go - 1
  END /* DO WHILE */
END /* DO WHILE */
"ispexec tbclose "main_tab
exit
/*********************************************/
/* Create_table subroutine                   */
/*********************************************/
Create_table:
parse arg table_name p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 the_rest
"ispexec tbcreate "table_name" names("p1" "p2" "p3" "p4" "p5" "p6,
                                   " "p7" "p8" "p9" "p10" "p11" "p12") write"
if rc ¬= 0 then
  do
   crc = 8
   'ispexec setmsg msg(FTPGM006)'
  end
else
  crc = 0
return
/*********************************************/
/* Build jcl routine                         */
/*********************************************/
Build_jcl_routine:
if syp = '' then
  syp = smp
"ispexec control display save"
"ispexec addpop poploc(s)"
sdsn = '____________________________________________'
Display_systems:
"ispexec display panel(ftpg0005)" /* display panel to select facilities */
if resp = 'END' then
  do
   resp = 'ENTER'
   "ispexec control display restore"
   return
  end
if sysdsn(sdsn) ¬= 'OK' then
  do
    'ispexec setmsg msg(FTPGM009)' /* invalid dataset entered, display err */
    signal Display_systems         /* and redisplay screen                 */
  end
if c1 = '/' then                   /* User requesting to clear all         */
  do /* facilities previous selected         */
    c1  = ''
    s1  = ''
    s2  = ''
    "ispexec vput s2 profile"
    s3  = ''
    "ispexec vput s3 profile"
    s4  = ''
    "ispexec vput s4 profile"
    s5  = ''
    "ispexec vput s5 profile"
    s6  = ''
    "ispexec vput s6 profile"
    s7  = ''
    "ispexec vput s7 profile"
    s8  = ''
    "ispexec vput s8 profile"
    s9  = ''
    "ispexec vput s9 profile"
    s10 = ''
    "ispexec vput s10 profile"
    s11 = ''
    "ispexec vput s11 profile"
    s12 = ''
    "ispexec vput s12 profile"
    s13 = ''
    "ispexec vput s13 profile"
    s14 = ''
    "ispexec vput s14 profile"
    s15 = ''
    "ispexec vput s15 profile"
    s16 = ''
    "ispexec vput s16 profile"
    s17 = ''
    "ispexec vput s17 profile"
    'ispexec setmsg msg(FTPGM101)'
    signal Display_systems         /* redisplay screen                     */
  end
if s1 = '/' then                   /* User selected all facilities         */
  do                               /* put a "/" next to all systems        */
    s1  = ''
    s2  = '/'
    "ispexec vput s2 profile"
    s3  = '/'
    "ispexec vput s3 profile"
    s4  = '/'
    "ispexec vput s4 profile"
    s5  = '/'
    "ispexec vput s5 profile"
    s6  = '/'
    "ispexec vput s6 profile"
    s7  = '/'
    "ispexec vput s7 profile"
    s8  = '/'
    "ispexec vput s8 profile"
    s9  = '/'
    "ispexec vput s9 profile"
    s10 = '/'
    "ispexec vput s10 profile"
    s11 = '/'
    "ispexec vput s11 profile"
    s12 = '/'
    "ispexec vput s12 profile"
    s13 = '/'
    "ispexec vput s13 profile"
    s14 = '/'
    "ispexec vput s14 profile"
    s15 = '/'
    "ispexec vput s15 profile"
    s16 = '/'
    "ispexec vput s16 profile"
    s17 = '/'
    "ispexec vput s17 profile"
    'ispexec setmsg msg(FTPGM102)'
    signal Display_systems         /* redisplay screen                     */
  end
if s1 = '' & s2 = '' & s3 = '' & s4 = '' & s5 = '' & s6 = '' &,
   s7 = '' & s8 = '' & s9 = '' & s10 = '' & s11 = '' & s12 = '' &,
   s13 = '' & s14 = '' & s15 = '' & s16 = '' & s17 = '' then
  do
    'ispexec setmsg msg(FTPGM107)'
    signal Display_systems         /* redisplay screen                     */
  end
"ispexec vput s2 profile"
"ispexec vput s3 profile"
"ispexec vput s4 profile"
"ispexec vput s5 profile"
"ispexec vput s6 profile"
"ispexec vput s7 profile"
"ispexec vput s8 profile"
"ispexec vput s9 profile"
"ispexec vput s10 profile"
"ispexec vput s11 profile"
"ispexec vput s12 profile"
"ispexec vput s13 profile"
"ispexec vput s14 profile"
"ispexec vput s15 profile"
"ispexec vput s16 profile"
"ispexec vput s17 profile"
if s13 = '/' then              /* P2 was selected, prompt for volume   */
  do                           /* for master catalog datasets          */
   "ispexec addpop poploc(s16)"     /* as P2 has not SYPPLX volume     */
   "ispexec display panel(ftpg0006)"
  "ispexec rempop"
   if resp = 'END' then
     signal Display_systems       /* redisplay screen                   */
  end
"FREE  FI(ISPFILE)"
"ALLOC FI(ISPFILE) DA("sdsn") SHR"  /* allocate dataset specified to save */
"ispexec ftopen"                    /* skeleton JCL                       */
Select
  when tj = 'M' then
DO  /* begin of multiple job select */
 /**************************************************************************/
 /* Build JCL member for each facility selected                            */
 /*                                                                        */
 /*                                     Define                             */
 /*                     JCL    Main     Jobcard                            */
 /*                    Member Jobcard   JES2/JES3                          */
 /*                    Prefix Skeleton  Skeleton   PLXVol   Master Catalog */
 /*                     ||       ||        ||        ||           ||       */
 /*                     \/       \/        \/        \/           \/       */
 /**************************************************************************/
 if s2 = '/' then
  call Skeleton_routine 'A' 'FTPGJCLA' 'FTPGJES3' 'SYAPLX' 'CATALOG.A3MASTER'
 if s3 = '/' then
  call Skeleton_routine 'B' 'FTPGJCLB' 'FTPGJES3' 'SYBPLX' 'CATALOG.B7MASTER'
 if s4 = '/' then
  call Skeleton_routine 'C' 'FTPGJCLC' 'FTPGJES3' 'SYCPLX' 'CATALOG.C3MASTER'
 if s5 = '/' then
  call Skeleton_routine 'D1' 'FTPJCLD1' 'FTPGJES2' 'SY1PLX'
 if s6 = '/' then
  call Skeleton_routine 'D9' 'FTPJCLD9' 'FTPGJES2' 'SY9PLX'
 if s7 = '/' then
  call Skeleton_routine 'E' 'FTPGJCLE' 'FTPGJES3' 'SYEPLX'
 if s8 = '/' then
  call Skeleton_routine 'G' 'FTPGJCLG' 'FTPGJES3' 'SYGPLX'
 if s9 = '/' then
  call Skeleton_routine 'H' 'FTPGJCLH' 'FTPGJES3' 'SYHPLX'
 if s10 = '/' then
  call Skeleton_routine 'N1' 'FTPJCLN1' 'FTPGJES3' 'SYNPLX'
 if s11 = '/' then
  call Skeleton_routine 'N2' 'FTPJCLN2' 'FTPGJES3' 'SYNPLX'
 if s12 = '/' then
  call Skeleton_routine 'P1' 'FTPJCLP1' 'FTPGJES2' 'SYPPLX'
 if s13 = '/' then
  call Skeleton_routine 'P2' 'FTPJCLP2' 'FTPGJES2' sdvol
 if s14 = '/' then
  call Skeleton_routine 'Q'  'FTPGJCLQ' 'FTPGJEWA' 'SYQPLX' 'SYS2.SYQ2.MSTRCTLG'
 if s15 = '/' then
  call Skeleton_routine 'T'  'FTPGJCLT' 'FTPGJES3' 'SYTPLX' 'CATALOG.T2MASTER'
 if s16 = '/' then
  call Skeleton_routine 'U'  'FTPGJCLU' 'FTPGJEWA' 'SYUPLX' 'SYS2.SYU2.MSTRCTLG'
 if s17 = '/' then
  call Skeleton_routine 'Z'  'FTPGJCLZ' 'FTPGJES2' 'SYZPLX'
END /* end    f multiple job select */
  when tj = 'S' then
DO
  delim_index = 0
  ftp_delim_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  "ispexec tbopen "tab_suffix"PP"wcr
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  flag_sys3 = 'NO'
  tskiprc = 0
  DO WHILE(tskiprc = 0)                /* check to see if any SYS3 selected */
    if s = 'S' then                    /* flag it if so. Used to deterine   */
       if (POS('SYS3.',ndsn) > 0) then /* if define master catalog job is   */
        do                             /* included                          */
         flag_sys3 = 'YES'
         leave
        end
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  tskiprc = rc
  END
  "ispexec tbclose "tab_suffix"PP"wcr
 "ispexec ftincl ftpgjobc"          /* Include jobcard             */
 /**************************************************************************/
 /* Build single job with multiple FTP steps for each facility selected    */
 /*                                                                        */
 /*                                 Define                                 */
 /*                        Main     Jobcard                                */
 /*                      Jobstep    JES2/JES3  PLXVol                      */
 /*                      Skeleton   Skeleton   PLXVol   Master Catalog     */
 /*                         ||         ||        ||        ||              */
 /*                         \/         \/        \/        \/              */
 /**************************************************************************/
 if s2 = '/' then
  call Skel_single_job 'A' 'FTPGSTPA' 'FTPGJES3' 'SYAPLX' 'CATALOG.A3MASTER'
 if s3 = '/' then
  call Skel_single_job 'B' 'FTPGSTPB' 'FTPGJES3' 'SYBPLX' 'CATALOG.B7MASTER'
 if s4 = '/' then
  call Skel_single_job 'C' 'FTPGSTPC' 'FTPGJES3' 'SYCPLX' 'CATALOG.C3MASTER'
 if s5 = '/' then
  call Skel_single_job 'D1' 'FTPSTPD1' 'FTPGJES2' 'SY1PLX'
 if s6 = '/' then
  call Skel_single_job 'D9' 'FTPSTPD9' 'FTPGJES2' 'SY9PLX'
 if s7 = '/' then
  call Skel_single_job 'E' 'FTPGSTPE' 'FTPGJES3' 'SYEPLX'
 if s8 = '/' then
  call Skel_single_job 'G' 'FTPGSTPG' 'FTPGJES3' 'SYGPLX'
 if s9 = '/' then
  call Skel_single_job 'H' 'FTPGSTPH' 'FTPGJES3' 'SYHPLX'
 if s10 = '/' then
  call Skel_single_job 'N1' 'FTPSTPN1' 'FTPGJES3' 'SYNPLX'
 if s11 = '/' then
  call Skel_single_job 'N2' 'FTPSTPN2' 'FTPGJES3' 'SYNPLX'
 if s12 = '/' then
  call Skel_single_job 'P1' 'FTPSTPP1' 'FTPGJES2' 'SYPPLX'
 if s13 = '/' then
  call Skel_single_job 'P2' 'FTPSTPP2' 'FTPGJES2' sdvol
 if s14 = '/' then
  call Skel_single_job 'Q' 'FTPGSTPQ' 'FTPGJEWA' 'SYQPLX' 'SYS2.SYQ2.MSTRCTLG'
 if s15 = '/' then
  call Skel_single_job 'T' 'FTPGSTPT' 'FTPGJES3' 'SYTPLX' 'CATALOG.T2MASTER'
 if s16 = '/' then
  call Skel_single_job 'U' 'FTPGSTPU' 'FTPGJEWA' 'SYUPLX' 'SYS2.SYU2.MSTRCTLG'
 if s17 = '/' then
  call Skel_single_job 'Z' 'FTPGSTPZ' 'FTPGJES2' 'SYZPLX'
END
 otherwise
END
"ispexec ftclose name($FTPJOB)"
if tj = 'M' then
 'ispexec setmsg msg(FTPGM103)'
else
 'ispexec setmsg msg(FTPGM106)'
if select_flag = 'NO' then
 'ispexec setmsg msg(FTPGM113)'
if eopt  = 'Y' then
  "ispexec edit dataset("sdsn")"
"ispexec control display restore"
return
/*********************************************/
/* Create profile routine                    */
/*********************************************/
Create_profile_routine:
"ispexec control display save"
a = '_'                        /* put underscore back after being selected */
s = '_'                        /* set selection field to blank in table    */
pn = strip(pn,b,"_")           /* strip all underscores from data          */
pn = strip(pn,b," ")           /* strip all underscores from data          */
dp = strip(dp,b,"_")
dp = strip(dp,b," ")
dp_copy = dp                   /* make copy of this var as              */
                               /* Check_dsname_single_routine may alter */
                               /* this var is used to process SYS1 dsn  */
                               /* if specified on create                */
smp= strip(smp,b,"_")
smp= strip(smp,b," ")
syp= strip(syp,b,"_")
syp= strip(syp,b," ")
if  dp = '' | smp = '' then
 do
  "ispexec control display restore"
  "ispexec setmsg msg(FTPGM112)"
  return
 end
"ispexec tbput "main_tab       /* save fields entered for profile          */
if syp = '' then
  syp = smp
/***************************************************************************/
/* Create table to hold datasets selected for processing.  This table      */
/* will contain all the datasets for a prefix entered and their attributes */
/* The processing routine will identify datasets that are known to be      */
/* allocated as a master catalog datasets i.e. SYS3 for example by looking */
/* for certain words within their name such as "LINK" or "LPA". The user   */
/* has the ability to select any of these datasets for FTPing by placing   */
/* a "S" next to the source dataset.  The user has the ability to change   */
/* the allocation parameters if desired.  The routine will change any      */
/* master catalog datasets to have a primary allocation and no secondary   */
/* as these datasets may be added into the LINKLIST                        */
/***************************************************************************/
/* Table Field names                                                       */
/* s    - selection field, "S" - select for FTP processing                 */
/*                         "D" - Delete this dataset from list             */
/*                         "I" - Insert a new dataset                      */
/* dsn  - origination dataset that FTP will copy from Facility A           */
/* ndsn - destination dataset that FTP will copy to destination Facility   */
/* lrecl- logical record length                                            */
/* blk  - block size                                                       */
/* rf   - record format                                                    */
/* su   - alllocation type - CY - cylinders TR - tracks - BL -blocks       */
/* pri  - primary allocation                                               */
/* sec  - second allocation                                                */
/* pdst - PDS type - PDSE or PDS                                           */
/* dir  - if standard PDS, no# of directory blocks                         */
/***************************************************************************/
call Create_table tab_suffix'PP'wcr 's' 'dsn' 'ndsn' 'lrecl' 'blk' 'rf' 'su',
             'pri' 'sec' 'pdst' 'dir'
/* say crc */
if crc ¬= 0 then return
period_cnt = 0    /* prim counter for subroutine */
call Check_dsname_single_routine /* check if prefix is single qualifier */
x = OUTTRAP('listdsns.')         /* i.e. SYS1.SFMN                      */
                                 /* if so, set dataset prefix to first  */
                                 /* qualifier                           */
                                 /* make sure datasets does get listed  */
if dp = 'SYS1' | dp = 'SYS3' then  /* twice if in master catalog          */
  address tso "LISTC LVL('"dp"') CAT('CATALOG.A1MASTER')"
else
  address tso "LISTC LVL('"dp"')"
if rc ¬= 0 then                    /* If not valid return with error      */
 do
   "ispexec tbclose "tab_suffix"PP"wcr
   "ispexec tberase "tab_suffix"PP"wcr
   'ispexec setmsg msg(FTPGM105)'
   return
 end
x = OUTTRAP('OFF')
do i=1 to listdsns.0
  parse var listdsns.i p1 p2 p3 the_rest
  if (POS(dp_copy,p3) > 0) then         /* Select only datasets with */
    do                                  /* dataset prefix. This was  */
     if p1 = 'NONVSAM' then             /* to process SYS1 datasets  */
       do
         adsn = p3
         do while(POS('.',adsn) > 0)
          parse var adsn . '.' adsn
         end
         dsn     = p3
         ndsn    = p3
         call Listdsi_routine dsn       /* get attributes of datasets    */
         call Build_dest_dsn_name       /* build destination name i.e.   */
         if rc > 0 then interate        /* SYS3.prod.R.. SDPROD.prod.R.. */
         "ispexec tbadd "tab_suffix"PP"wcr
       end
    end
end
"ispexec tbclose "tab_suffix"PP"wcr     /* close table and redisplay  */
'ispexec setmsg msg(FTPGM001)'          /* main panel                 */
"ispexec control display restore"
return
/*********************************************/
/* Delete profile routine                    */
/*********************************************/
Delete_profile_routine:
"ispexec tberase "tab_suffix"PP"wcr  /* delete table from table library */
if replace_flag ¬= 'YES' then
 do
   a = '_'                           /* reinitialize this profile       */
   pn ='_____________________'
   dp ='________________________________________'
   syp ='________________________________________'
   smp ='________________________________________'
   "ispexec tbput "main_tab
   'ispexec setmsg msg(FTPGM002)'
 end
return
/*********************************************/
/* Replace profile routine                   */
/*********************************************/
Replace_profile_routine: /* this routine will update the row in place */
if  dp = '' | smp = '' then
 do
  "ispexec setmsg msg(FTPGM112)"
  return
 end
/* if syp = '' then
    syp = smp */
replace_flag = 'YES'          /* and build new table with replaced values  */
call Delete_profile_routine
call Create_profile_routine
'ispexec setmsg msg(FTPGM104)'
return
/*********************************************/
/* Edit profile routine                      */
/*********************************************/
Edit_profile_routine:
/****************************************************************************/
/* This routine gives the user the ability to select which datasets will be */
/* FTPed to the destination system. The user can select a dataset for FTP   */
/* transmission by placing a "S" in the action field.  The user can also    */
/* cleanup the dataset list, getting rid of DLIBs for example, by placing   */
/* a "D" next to the dataset to delete it from the table. The user also     */
/* has the ability to alter any of the attributes of the dataset allocation.*/
/* Any information updated will be saved between sessions. The user also    */
/* has the ability to add a dataset to the list as well. All actions will be*/
/* saved.                                                                   */
/****************************************************************************/
"ispexec control display save"
"ispexec tbopen "tab_suffix"PP"wcr" write"
if rc > 0 then                            /* table hasn't been created yet  */
 do
  'ispexec setmsg msg(FTPGM005)'
  return
 end
"ispexec tbskip "tab_suffix"PP"wcr" number(1)" /* position to first record  */
pfkey = 'PF07'
resp  = 'ENTER'
DO WHILE (pfkey = 'PF07' | pfkey = 'PF08' | resp ¬= 'END')
"ispexec tbdispl "tab_suffix"PP"wcr "panel(ftpg0002) autosel(yes) position(ecr)"
/* say 'ECR>'ecr'<' */
/* say 'PFKEY>'pfkey'<' */
eprocessed_rows_to_go = ztdsels
/* say 'eprocessed_rows_to_go>'eprocessed_rows_to_go'<' */
DO WHILE (eprocessed_rows_to_go > 0)
/* say 'ECR>'ecr'<' */
  select
   when s = 'D' then "ispexec tbdelete "tab_suffix"PP"wcr /* delete dsn    */
   when s = 'I' then                     /* add a new dataset to table     */
    do                                   /* query the user for the DSN     */
     s = '_'
     dsn    = '____________________________________________'
     "ispexec addpop poploc(s)"
     "ispexec display panel(ftpg0003)"
     if resp = 'ENTER' then
      DO
    /* say 'dsn>'dsn */
       if POS("'",dsn) = 0 then
        dsn = sysvar(sysuid).||dsn
       else
        dsn = strip(dsn,b,"'")
       if sysdsn("'"dsn"'") = 'OK' then      /* dataset entered not ok?   */
        do
         call Listdsi_routine dsn
         ndsn   = dsn
         call Build_dest_dsn_name
         "ispexec display panel(ftpg0004)" /* display attr and dest nam e */
         if resp = 'ENTER' then            /* and change if needed        */
          do
           "ispexec tbadd "tab_suffix"PP"wcr
           "ispexec rempop all"
          end
         else
          do
           "ispexec rempop all"
           'ispexec setmsg msg(ftpgm111)' /* insert request cancelled       */
           resp = 'ENTER'
          end
        end
       else
        do
         'ispexec setmsg msg(ftpgm008)' /* redisplay with error msg        */
         "ispexec rempop all"
         resp = 'ENTER'
        end
      END
     else
      do
       "ispexec rempop all"
       'ispexec setmsg msg(ftpgm111)' /* insert request cancelled      */
       resp = 'ENTER'
      end
    end
   when s = 'S' then
    do
     if POS(" ",ndsn) > 0 then
      do
       'ispexec setmsg msg(FTPGM009)' /* invalid dataset entered, display err */
       resp = 'ENTER'
      end
     else
      "ispexec tbput "tab_suffix"PP"wcr
    end
   when if s = ' ' | s = '' then
    do
     s = '_'
     "ispexec tbput "tab_suffix"PP"wcr
    end
   otherwise
  end /* end select */
  eprocessed_rows_to_go = eprocessed_rows_to_go - 1
/* say 'edit processed rows to go>'eprocessed_rows_to_go'<' */
if eprocessed_rows_to_go ¬= 0 then
  "ispexec tbdispl "tab_suffix"PP"wcr" position(ecr)"
END /* DO WHILE */
END /* DO WHILE */
"ispexec tbclose "tab_suffix"PP"wcr    /* close table, ready for build JCL */
resp ='ENTER'
"ispexec control display restore"
return
/*********************************************/
/* Build destination dataset routine         */
/*********************************************/
Build_dest_dsn_name:
/* say 'new dsn start of build>'ndsn'<' */
ndsnl = length(ndsn)
dpl   = length(dp)   /* get the last period loc upto the length of */
                     /* the install prefix                         */
/* say 'dpl>'dpl+1 */
do j = 1 to dpl+1
  char = substr(ndsn,j,1)
  if char = '.' then
    period_location = j
end
substrl = ndsnl - period_location
ndsn = substr(ndsn,period_location,substrl+1)
/* say 'ndsn>'ndsn'<' */
/*************************************************************/
/* Check for one of the following in dataset name. If exists */
/* assign master catalog prefix to destination dataset.      */
/*************************************************************/
if  (POS('LINK',dsn,1) > 0) |  (POS('LPA',dsn,1) > 0) |,
    (POS('LOD',dsn,1) > 0) |  (POS('AUTHLIB',dsn,1) > 0) |,
    (POS('UAUTHLIB',dsn,1) > 0) |  (POS('CONLIB',dsn,1) > 0) |,
    (POS('LOAD',dsn,1) > 0) |  (POS('CAILIB',dsn,1) > 0) |,
    (POS('MOD',dsn,1) > 0) then
  do                       /* also convert to cylinders with no secondary */
   ndsn = syp||ndsn        /* as dataset may be added to LINKLIST         */
   if su = 'CY' then
    do
     pri = pri * 1.3                            /* provide buffer   */
     pri = pri + .5                             /* round off alloc  */
     pri = TRUNC(pri)
     sec = 0
    end
   if su = 'TR' then
    do
     pri = (pri / systrkscyl) * 1.3             /* give no# of cyls */
     pri = pri + .5                             /* provide buffer   */
     pri = TRUNC(pri)                           /* round off alloc  */
     if pri = 0 then
       pri = 1                                  /* make at least 1 cyl */
     su = 'CY'
     sec = 0
    end
   if su ='BL' then
    do
     pri = (((pri * blk) / 56664) / systrkscyl) /* give no# of cyls */
     pri = pri * 1.3                            /* provide buffer   */
     pri = pri + .5                             /* round off alloc  */
     pri = TRUNC(pri)
     if pri = 0 then
       pri = 1                                  /* make at least 1 cyl */
     su = 'CY'
     sec = 0
    end
  end
else
  ndsn = smp||ndsn
/* if dataset is pds or pds/e and contains no member then overwrite */
/* new dataset name with error message                              */
if substr(dsntype,1,3) = PDS & memcnt = 0 then
  ndsn = 'Library contains no members - FTP will fail'
return
/*********************************************/
/* LISTDSI routine                           */
/*                                           */
/* This routine invokes the Rexx function    */
/* LISTDSI to obtain the attributes of each  */
/* dataset.                                  */
/*********************************************/
Listdsi_routine:
parse arg y the_rest
y = "'"||y||"'"
y = y||' DIRECTORY RECALL'
x       = LISTDSI(y)
if rc   ¬= 0 then exit 8
dsntype = sysdssms
memcnt  = sysmembers
lrecl   = syslrecl
blk     = sysblksize
rf      = sysrecfm
su      = sysunits
if su   = 'CYLINDER' then
  su    = 'CY'
if su   = 'TRACK'    then
  su    = 'TR'
if su   = 'BLOCK'    then
  su    = 'BL'
dir     = sysadirblk
pri     = sysprimary
sec     = sysseconds
used    = sysused
if (pri <= used) & (sysadirblk ¬= 'NO_LIM') then /* make primary what is used */
  pri = used                                     /* if used is bigger         */
if sysadirblk = 'NO_LIM'  then                   /* make primary what is used */
  do
  if su = 'CY' then
   do
    pri = (((sysusedpages * 4096) / 56664) / systrkscyl)
    if pri < 1 then pri = 1
   end
  if su = 'TR' then
   do
    pri = ((sysusedpages * 4096) / 56664)
    if pri < 1 then pri = 1
   end
  if su = 'BL' then
   do
    pri = ((sysusedpages * 4096) / blk)
    if pri < 1 then pri = 1
   end
  pri = pri + .5   /* round off allocation */
  pri = trunc(pri)
  end
if sysdsorg = 'PO' & sysadirblk = 'NO_LIM' then
  do
   pdst = 'PDSE'
   dir  = sysudirblk
  end
if sysdsorg = 'PO' & sysadirblk ¬= 'NO_LIM' then
  do
   pdst = 'PDS'
   dir  = sysadirblk
  end
if sysdsorg = 'PS' then
  do
   pdst = 'SEQ'
  end
return
/*********************************************/
/* Skeleton routine                          */
/*********************************************/
Skeleton_routine:
parse arg ska skb skc skd ske the_rest
"ispexec ftincl "skb               /* Include jobcard             */
call Check_for_sys3                /* check if sys3 dsns selected */
/****************************************************************/
/* If facility being processed is a multi-lpar facility then we */
/* need to catalog the dataset on the other LPAR                */
/****************************************************************/
if (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */
    ska = 'C' | ska = 'T' |,       /* flag indicates SYS3 DSNs    */
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
  do
  "ispexec ftincl ftpgdd01"          /* Include DD01 DD card        */
  jobn = sysvar(sysuid)              /* used on Q and U skeleton    */
  "ispexec ftincl "skc               /* Include define jobcard      */
  end
"ispexec tbopen "tab_suffix"PP"wcr
catalog = ske
plxvol = skd
tskiprc = 0
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
DO WHILE(tskiprc = 0)
  if s = 'S' then                    /* Only add defines for        */
   if ska = 'A' | ska = 'B' |,       /* A,B,C,T,Q, and U            */
      ska = 'C' | ska = 'T' |,
      ska = 'Q' | ska = 'U' then
     /****************************************************************/
     /* Add Define Nonvsam IDCAMS definition for dataset             */
     /****************************************************************/
     if (POS('SYS3.',ndsn) > 0) then
       'ispexec ftincl ftpgnvsm'     /* Add define nonvsam          */
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  tskiprc = rc
END
if (ska = 'A' | ska = 'B' |,       /* Only do for A,B,C,T,Q, and U     */
    ska = 'C' | ska = 'T' |,
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
  "ispexec ftincl ftpgdlim"            /* Include FTP Delimiter       */
"ispexec ftincl ftpgindd"              /* Include FTP INPUT DD        */
"ispexec tbclose "tab_suffix"PP"wcr
"ispexec tbopen "tab_suffix"PP"wcr
tskiprc = 0
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
DO WHILE(tskiprc = 0)
  if s = 'S' then                    /* only include select DSNs    */
   do
    call Check_for_plex_routine
    ndsnl = LENGTH(ndsn)
    do j = 1 to ndsnl
      char = substr(ndsn,j,1)
      if char = '.' then
        do
         first_period = j
         leave
        end
    end
    /* For P1 and P2, change any destination "SYS3" datasets to "SYS2" */
    /* and "SYS6" respectively.                                        */
    if ska = 'P1' & pndsn = 'SYS3' then
      do
       pndsn ='SYS2'
       ndsn = 'SYS2.'||substr(ndsn,first_period+1,ndsnl-first_period)
      end
    if ska = 'P2' & pndsn = 'SYS3' then
      do
       pndsn ='SYS6'
       ndsn = 'SYS6.'||substr(ndsn,first_period+1,ndsnl-first_period)
      end
    if tnam = 'Y' then
     do
      sndsn = ndsn
      ndsn = ndsn||'.T'
     end
    Select
      when pdst = 'PDS' then "ispexec ftincl ftpgprm1"
      when pdst = 'PDSE' then "ispexec ftincl ftpgprm2"
      Otherwise
       "ispexec ftincl ftpgprm3"
    End   /* select */
    if tnam = 'Y' then
      "ispexec ftincl ftpgrenm"
   end   /* if s = 'S' */
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  tskiprc = rc
END
if (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */
    ska = 'C' | ska = 'T' |,
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
  "ispexec ftincl ftpgendc"
else
  "ispexec ftincl ftpgendd"
"ispexec tbclose "tab_suffix"PP"wcr
"ispexec ftclose name($FTP"ska")"
return
/*********************************************/
/* Check dsname for single qualifier         */
/*                                           */
/* This will handle datasets SYS1 datasets   */
/* or other single level qualifiers          */
/*********************************************/
Check_dsname_single_routine:
dpl  = length(dp)
do j = 1 to dpl
  char = substr(dp,j,1)
  if char = '.' then
    do
     period_cnt = period_cnt + 1
     period_location = j
    end
end
if period_cnt = 1 then
  dp  = substr(dp,1,period_location-1)
return
/*********************************************/
/* Skeleton routine to generate single job   */
/* with multiple steps                       */
/*********************************************/
Skel_single_job:
parse arg ska skb skc skd ske the_rest
"ispexec ftincl "skb               /* Include FTP step            */
call Check_for_sys3                /* check if sys3 dsns selected */
/****************************************************************/
/* If facility being processed is a multi-lpar facility then we */
/* need to catalog the dataset on the other LPAR                */
/****************************************************************/
if (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U    */
    ska = 'C' | ska = 'T' |,       /* flag indicates SYS3 DSNs    */
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
  do
  delim_index = delim_index + 1
  fdlim  = substr(ftp_delim_string,delim_index,1)
  "ispexec ftincl ftpgddsg"          /* Include DD01 DD card        */
  jobn = sysvar(sysuid)              /* used on Q and U skeleton    */
  "ispexec ftincl "skc               /* Include define jobcard      */
  end
"ispexec tbopen "tab_suffix"PP"wcr
catalog = ske
plxvol = skd
tskiprc = 0
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
DO WHILE(tskiprc = 0)
  if s = 'S' then                    /* Only add defines for        */
   if ska = 'A' | ska = 'B' |,       /* B,C,T,Q, and U              */
      ska = 'C' | ska = 'T' |,
      ska = 'Q' | ska = 'U' then
     /****************************************************************/
     /* Add Define Nonvsam IDCAMS definition for dataset             */
     /****************************************************************/
     if (POS('SYS3.',ndsn) > 0) then
       'ispexec ftincl ftpgnvsm'     /* Add define nonvsam          */
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  tskiprc = rc
END
if (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */
    ska = 'C' | ska = 'T' |,
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
    "ispexec ftincl ftpsglim"            /* Include FTP Delimiter       */
"ispexec ftincl ftpgindd"                /* Include FTP INPUT DD        */
"ispexec tbclose "tab_suffix"PP"wcr
"ispexec tbopen "tab_suffix"PP"wcr
tskiprc = 0
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
DO WHILE(tskiprc = 0)
  if s = 'S' then                    /* only include select DSNs    */
   do
    call Check_for_plex_routine
    ndsnl = LENGTH(ndsn)
    do j = 1 to ndsnl
      char = substr(ndsn,j,1)
      if char = '.' then
        do
         first_period = j
         leave
        end
    end
    /* For P1 and P2, change any destination "SYS3" datasets to "SYS2" */
    /* and "SYS6" respectively.                                        */
    if ska = 'P1' & pndsn = 'SYS3' then
      do
       pndsn ='SYS2'
       ndsn = 'SYS2.'||substr(ndsn,first_period+1,ndsnl-first_period)
      end
    if ska = 'P2' & pndsn = 'SYS3' then
      do
       pndsn ='SYS6'
       ndsn = 'SYS6.'||substr(ndsn,first_period+1,ndsnl-first_period)
      end
    if tnam = 'Y' then
     do
      sndsn = ndsn
      ndsn = ndsn||'.T'
     end
    Select
      when pdst = 'PDS' then "ispexec ftincl ftpgprm1"
      when pdst = 'PDSE' then "ispexec ftincl ftpgprm2"
      Otherwise
       "ispexec ftincl ftpgprm3"
    End   /* select */
    if tnam = 'Y' then
      "ispexec ftincl ftpgrenm"
   end   /* if s = 'S' */
  "ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
  tskiprc = rc
END
if (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */
    ska = 'C' | ska = 'T' |,
    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then
   "ispexec ftincl ftpgendc"
else
  "ispexec ftincl ftpgendd"
"ispexec tbclose "tab_suffix"PP"wcr
return
/*********************************************/
/* Check for SYS3 datasets selected for FTP  */
/* transfer routine                          */
/*********************************************/
Check_for_sys3:
"ispexec tbopen "tab_suffix"PP"wcr
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
flag_sys3 = 'NO'
select_flag ='NO'
tskiprc = 0
DO WHILE(tskiprc = 0)                /* check to see if any SYS3 selected */
  if s = 'S' then                    /* flag it if so. Used to deterine   */
   do
     select_flag ='YES'
     if (POS('SYS3.',ndsn) > 0) then /* if define master catalog job is   */
      do                             /* included                          */
       flag_sys3 = 'YES'
       leave
      end
   end
"ispexec tbskip "tab_suffix"PP"wcr" number(1) rowid(bcr)"
tskiprc = rc
END
"ispexec tbclose "tab_suffix"PP"wcr
return
/*********************************************/
/* Check for if allocation should be done    */
/* on SYxPLX volume for master catalog DSNs  */
/*********************************************/
Check_for_plex_routine:
  /*  say 'syp>'syp'<'
      say 'ndsn>'ndsn'<' */
  pndsn = substr(ndsn,1,(POS('.',ndsn)-1))
  if pos('.',syp) > 0 & LENGTH(syp) ¬= 0 then
    psyp  = substr(syp,1,(POS('.',syp)-1))
  if  (pndsn = 'SYS2' | pndsn = 'SYS3' | pndsn = 'SYS6') then
      plxvol = skd
  else
      plxvol = ''
return
