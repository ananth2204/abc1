/* rexx */
/**********************************************************/
/* Display SVCTABLE on System                             */
/*                                                        */
/* Author:  Larry Zuckett                                 */
/* Date  :  08/27/2003                                    */
/*       :  06/08/2012 fully documented code              */
/*                     changed logic for checking if SVC  */
/*                     is in use.                         */
/*       :  06/13/2012 added help, startsvc endsvc option */
/*       :  06/25/2012 correct minor display issue        */
/*       :  08/01/2012 change max line length to 80       */
/*                                                        */
/* PSA+x'10'-->CVT                                        */
/*       +x'C8'cvtabend-->SCVT                            */
/*                  +x'84'scvtsvct                        */
/*                         |                              */
/*                     ____|                              */
/*                    |                                   */
/*                   \/                                   */
/*                    SVCTABLE                            */
/*  8 bytes per entry 255 entries                         */
/*    svc 0           +x'0' entry point                   */
/*                    +x'4' flag bytes                    */
/*    svc 1           +x'0' entry point                   */
/*                    +x'4' flag bytes                    */
/*    ... x           ....                                */
/*    ... x           ....                                */
/*    svc 255         +x'0' entry point                   */
/*                    +x'4' flag bytes                    */
/*                                                        */
/*   Command Syntax:  From ISPF OPTION 6 enter:           */
/*                                                        */
/*                    SVCLIST                             */
/*                                                        */
/*                      or                                */
/*                                                        */
/*                    SVCLIST  start-svc                  */
/*                                                        */
/*                      or                                */
/*                                                        */
/*                    SVCLIST  start-svc end-svc          */
/*                                                        */
/*  where start-svc   >= 200 and <= 255                   */
/*  where end-svc     >= startsvc and <= 255              */
/**********************************************************/
/* trace c */
parse arg startsvc endsvc
if startsvc = '?' then
do
say' Command Syntax:  From ISPF OPTION 6 enter:            '
say'                                                       '
say'                  SVCLIST                              '
say'                                                       '
say'                    or                                 '
say'                                                       '
say'                  SVCLIST  start-svc                   '
say'                                                       '
say'                    or                                 '
say'                                                       '
say'                  SVCLIST  start-svc end-svc           '
say'                                                       '
say'where start-svc   >= 200 and <= 255                    '
say'where end-svc     >= startsvc and <= 255               '
say'                                                       '
exit 0
end
if startsvc ¬= '' then
 do
  if datatype(startsvc,num) ¬= 1 then
    do
     say 'invalid svc number  - "startsvc" must be a numeric',
         'value between 200 and 255'
     say 'Enter "SVCLIST ?" for syntax '
     exit 8
    end
 end
if endsvc ¬= '' then
 do
  if datatype(endsvc,num) ¬= 1 then
    do
     say 'invalid svc number  - "endsvc" must be a numeric',
         'value between 200 and 255'
     say 'Enter "SVCLIST ?" for syntax '
     exit 8
    end
 end
if startsvc ¬= '' & endsvc = '' then
   endsvc = startsvc
else
   if endsvc = '' then
     endsvc = 255
if startsvc = '' then
  startsvc = 200
if startsvc < 200 | endsvc > 255 then
  do
   say 'invalid svc numbers - startsvc must be >= 200'
   say '                      endsvc   must be <= 255'
   say '                      and > then startsvc'
   say 'Enter "SVCLIST ?" for syntax '
   exit 8
  end
if endsvc < startsvc then
  do
   say 'invalid svc numbers - the endsvc must be >= startsvc'
   say 'Enter "SVCLIST ?" for syntax '
   exit 8
  end
address tso clrscrn
say '**********************************************************'
say '* SVC REPORT GENERATED FOR 'mvsvar(syssmfid)'                          *'
say '*' date(n)'   'time(c)'                                   *'
say '**********************************************************'
push  "END"
push  "l 10.?+c8?+84"
/**************************************************************/
/* The list command will generate the following 2 lines       */
/*                                                            */
/*  00FD7984.  0146BE10  00000000                             */
/*  TEST                                                      */
/*                                                            */
/*  stem Variable addrsvc.0  = line count from test command   */
/*  stem Variable addrsvc.1  = (1) address of scvtsvct        */
/*                             (2) contents of scvtsvct which */
/*                                 is beginning of SVCTABLE   */
/*                                                            */
/**************************************************************/
x = OUTTRAP(addrsvc.)
address tso "test 'sys1.linklib(iefbr14)'"
y = OUTTRAP('OFF')
svctabst   = addrsvc.1
parse var addrsvc.1 svc1 svc2 svc3
say 'svctable is located at ' svc2
/**************************************************************/
/* Skip the system defined svcs and start at the user defined */
/* svcs                                                       */
/* startsvc >= 200 and endsvc must be <= 255                  */
/**************************************************************/
DO number = startsvc to endsvc
trace off
    dsvc2 = x2d(svc2)                  /* convert address to decimal number   */
    addrusvc = dsvc2+(number*8)        /* skip the first 200 system defined   */
                                       /* entries i.e. SVC0 - SVC199          */
                                       /* 8 bytes per entry so start of       */
                                       /* user table = starting address +     */
                                       /* (200 * 8)                           */
    addrusst = addrusvc+4              /* get address of flag bytes for svc   */
    addrxsvc = d2x(addrusvc)           /* get entry point, convert to hex     */
    addrusst = d2x(addrusst)           /* convert flag bytes address to hex   */
    push  "END"
    push  'l' addrxsvc'.? C LENGTH(64)'/* get the first 64 bytes of entry     */
                                       /* for the display                     */
    /**************************************************************************/
    /*  These commands will generate the following 2 lines:                   */
    /*                                                                        */
    /*   00FD4C00.  .F.0A...VTDA......+..DFSVC200+12   00000000               */
    /*   00FD4C20.  10+20101004+12.50 5635-A03 COPYR                          */
    /*                                                                        */
    /*  stem Variable svcno.0  = line count from test command                 */
    /*  stem Variable svcno.1  = (1) address, 1st 32 bytes, nulls             */
    /*  stem Variable svcno.2  = (2) address, next 32 bytes                   */
    /**************************************************************************/
    x = OUTTRAP(svcno.)
    address tso "test 'sys1.linklib(iefbr14)'"
    y = OUTTRAP('OFF')
    parse var svcno.1 svcent1 svcent2
    /***************************************************/
    /* get the 1st 32 bytes of the svc to be displayed */
    /***************************************************/
    /* say 'svcent2>'svcent2'<' */
       svcent2 = substr(svcent2,1,33)
       svcent2 = strip(svcent2,'L') /* strip leading blank on first line */
    parse var svcno.2 svcent3 svcent4
    /***************************************************/
    /* get the next 32 bytes of the svc to be displayed*/
    /***************************************************/
    /* say 'svcent4>'svcent4'<' */
       svcent4 = substr(svcent4,1,33)
       svcent4 = strip(svcent4,'L') /* strip leading blank on second line */
    /**************************************************************************/
    /*  These commands will generate the following 4 lines:                   */
    /*                                                                        */
    /*   00FD4C00.  18C647F0 C1140000 E5E3C4C1 00000000          00000000     */
    /*              00FD4EA0 1CC4C6E2 E5C3F2F0 F04EF1F2                       */
    /*   00FD4C20.  F1F04EF2 F0F1F0F1 F0F0F44E F1F24BF5                       */
    /*              F040F5F6 F3F560C1 F0F340C3 D6D7E8D9                       */
    /*                                                                        */
    /*  stem Variable svcvalid.0 = line count from test command               */
    /*  stem Variable svcvalid.1 = 1st 16 bytes of SVC code in hex            */
    /*  stem Variable svcvalid.2 = 2nd 16 bytes of SVC code in hex            */
    /*  stem Variable svcvalid.3 = 3rd 16 bytes of SVC code in hex            */
    /*  stem Variable svcvalid.4 = 4th 16 bytes of SVC code in hex            */
    /*                                                                        */
    /*  Use this output to check the first 4 bytes                            */
    /*                                                                        */
    /**************************************************************************/
    push  "END"
    push  'l' addrxsvc'.? X  LENGTH(64)' /* get the first 64 bytes of entry   */
                                         /* for the display                   */
    x = OUTTRAP(svcvalid.)
    address tso "test 'sys1.linklib(iefbr14)'"
    y = OUTTRAP('OFF')
    /* say svcvalid.1 */
    parse var svcvalid.1 p1 p2 p3      /* use 'p2' to check for unused SVC    */
                                       /* code.  Check for x'1F22BF27':       */
                                       /*           SR  R2,R2                 */
                                       /*           ICM R2,B'0111',29(R5)     */
                                       /* to determine if SVC entry is in use */
    /**************************************************************************/
    /*  These commands will generate the following 2 lines:                   */
    /*                                                                        */
    /*   0146C49C.  80000000                                     00000000     */
    /*                                                                        */
    /*  stem Variable attrib.0 = line count from test command                 */
    /*  stem Variable attrib.1 = (1) address, 1st 32 bytes, nulls             */
    /*  stem Variable attrib.2 = (2) address, next 32 bytes                   */
    /**************************************************************************/
    push  "END"
    push  'l' addrusst'.'
    x = OUTTRAP(attrib.)
    address tso "test 'sys1.linklib(iefbr14)'"
    y = OUTTRAP('OFF')
    parse var attrib.1 stat1 stat2 stat3
    svctype = SUBSTR(stat2,1,1)
    if svctype = '0' then
     type = '1  '
    else
    if svctype = '8' then
     type = '2  '
    else
    if svctype = 'C' then
     type = '3/4'
    else
    if svctype = '2' then
     type = '6  '
    else
     type = 'xxx'
/******************************************************************************/
/* Do not change the format of these say commands as these are designed for   */
/* a mod-5 3270 screen (27 x 132) and to be printed on a 132 column page      */
/*                                                                            */
/******************************************************************************/
    if p2 = '1F22BF27' then
    say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1,
        'IS NOT IN USE'
/*  say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1, */
/*  'IS NOT IN USE FIRST 4 BYTES' p2                                */
   ELSE
    say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1,
        'FIRST 64 BYTES' svcent2||svcent4
  END
exit
