{"INMR01": {"INMLRECL": 80, "INMFNODE": "NJ001", "INMFUID": "SDTS003", "INMTNODE": "NJ001", "INMTUID": "SDTS003", "INMFTIME": "20181114181214000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 154419, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SDTS003.ISPFT.EXEC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 154419, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 154419, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SDTS003.ISPFT.EXEC": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\n\\x08H\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\n\\x08H\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\n\\x08H\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"FTPGEN": {"ttr": 17, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x008\\x01\\x110\\x7f\\x01\\x181\\x8f\\x12\\x02\\x003\\x00@\\x00\\x00\\xe2\\xc4\\xe3\\xe2\\xf0\\xf0\\xf3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2011-11-03T00:00:00", "modifydate": "2018-11-14T12:02:38", "lines": 51, "newlines": 64, "modlines": 0, "user": "SDTS003"}, "text": "PROC 0\n/**********************************************************************/\n/* DYNAMIC ALLOCATION OF FTP GENERATE DIALOG UTILITY                  */\n/**********************************************************************/\n   CONTROL NOFLUSH NOMSG NOLIST\n   FREE FI(FTPEXEC)\n   FREE FI(FTPMLIB)\n   FREE FI(FTPPLIB)\n   FREE FI(FTPSLIB)\n   FREE FI(FTPTLIB)\n   ALLOC FI(FTPEXEC) +\n      DA('prefix.ISPFT.EXEC') SHR\n   ALLOC FI(FTPMLIB) +\n      DA('prefix.ISPFT.MSGS') SHR\n   ALLOC FI(FTPPLIB) +\n      DA('prefix.ISPFT.PANELS') SHR\n   ALLOC FI(FTPSLIB) +\n      DA('prefix.ISPFT.SKELS') SHR\n   ALLOC FI(FTPTLIB) +\n      DA('prefix.ISPFT.TABLES') SHR\n   ALTLIB ACT APPLICATION(EXEC) FILE(FTPEXEC) UNCOND\n   ISPEXEC LIBDEF ISPMLIB +\n     LIBRARY ID(FTPMLIB) STACK\n   ISPEXEC LIBDEF ISPPLIB +\n     LIBRARY ID(FTPPLIB) STACK\n   ISPEXEC LIBDEF ISPSLIB +\n     LIBRARY ID(FTPSLIB) STACK\n   ISPEXEC LIBDEF ISPTLIB +\n     LIBRARY ID(FTPTLIB) STACK\n/**********************************************************************/\n/* PASS PARAMETERS TO FAEXEC TO SET OPTIONS AND EXECUTE FILE-AID      */\n/*  (THE NEWAPPL WITH PASSLIB IS REQUIRED ON THIS SELECT TO ACTIVATE  */\n/*   THE NEW ISPTLIB AND PASS IT TO THE APPLICATION)                  */\n/**********************************************************************/\nCALLEXEC: ISPEXEC -\n    SELECT CMD(FTPG0001)\n/**********************************************************************/\n/* DYNAMIC DEALLOCATION OF FILE-AID LIBRARIES                         */\n/**********************************************************************/\n   ISPEXEC LIBDEF ISPMLIB\n   ISPEXEC LIBDEF ISPPLIB\n   ISPEXEC LIBDEF ISPSLIB\n   ISPEXEC LIBDEF ISPTLIB\n   CONTROL NOFLUSH\n   ALTLIB DEACTIVATE APPLICATION(EXEC)\n   FREE FI(FTPEXEC)\n   FREE FI(FTPMLIB)\n   FREE FI(FTPPLIB)\n   FREE FI(FTPSLIB)\n   FREE FI(FTPTLIB)\nEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FTPG0001": {"ttr": 13, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x01\\x14\\x01o\\x01\\x181\\x8f\\x11Y\\x03\\xd4\\x03\\xd9\\x00\\x00\\xe2\\xc4\\xe3\\xe2\\xf0\\xf0\\xf3@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2014-01-16T00:00:00", "modifydate": "2018-11-14T11:59:00", "lines": 980, "newlines": 985, "modlines": 0, "user": "SDTS003"}, "text": "/* REXX *************************************************************/\n/* Main Routine to generate/process FTP JCL generation requests     */\n/*                                                                  */\n/* Author:  written with undubious precision by Larry Zuckett       */\n/* Date:    11/25/2011                                              */\n/*                                                                  */\n/* ******************************************************************/\ntrace off     /* trace off or trace a */\nm = msg(\"off\")\n/********************************************************************/\n/* Create table to hold FTP DS Sets on first run of this routine    */\n/********************************************************************/\n/* Define tables with suffix to avoid enqueue issue with everyone   */\n/* using the same name.                                             */\n/********************************************************************/\nSelect\n   when\n      length(sysvar(sysuid)) = 6 then\n      tab_suffix = substr(sysvar(sysuid),4,3)\n   Otherwise\n      tab_suffix = substr(sysvar(sysuid),5,3)\nEnd   /* select */\nmain_tab = \"FTPDS\"||tab_suffix\n\"ispexec tbopen \"main_tab\" write\"\n/********************************************************************/\n/* Seed table with room for 25 entries                              */\n/********************************************************************/\nif rc \u00ac= 0 then\n do\n  call Create_table main_tab 'a' 'pn' 'dp' 'syp' 'smp'\n  a =   '_'\n  pn =  '__________________'\n  dp =  '___________________________________________'\n  syp = '___________________________________________'\n  smp = '___________________________________________'\n  do i= 1 to 25\n    \"ispexec tbadd \"main_tab\n  end\n end\n\n\"ispexec tbskip \"main_tab\" number(1)\" /* point to first record in table */\nDO WHILE (resp \u00ac= END)                /* process actions requested      */\n  replace_flag = 'NO'  /* only seed with underscores on delete          */\n  /*******************************************************************/\n  /* Use tbdispl with panel option to initially display table        */\n  /* and then use tbdispl without panel option to position to the    */\n  /* next selected row in the table. Hence the reason for two        */\n  /* \"select\" areas in this routine                                  */\n  /*******************************************************************/\n  \"ispexec tbdispl \"main_tab\" panel(ftpg0001) autosel(yes) position(cr)\"\n  /* say \"cr>\"cr\"<\" */\n  savedcr = cr\n  wcr = strip(cr,l,\"0\")\n  /* say \"wcr>\"wcr\"<\" */\n  /* say 'ztdsels>'ztdsels'<' */\n  processed_rows_to_go = ztdsels /* contains number of rows altered */\n  /* say 'system prefix>'syp'<' */\n  /* say 'SMS    prefix>'smp'<' */\n  Select\n    when a = 'B' then call Build_jcl_routine\n    when a = 'C' then call Create_profile_routine\n    when a = 'D' then call Delete_profile_routine\n    when a = 'E' then call Edit_profile_routine\n    when a = 'R' then call Replace_profile_routine\n    Otherwise\n  End   /* select */\n  /* say 'processed rows to go>'processed_rows_to_go */\n  processed_rows_to_go = processed_rows_to_go - 1\n  DO WHILE (processed_rows_to_go > 0)\n    \"ispexec tbdispl \"main_tab\" position(cr)\" /* position to next altered row */\n  /* say \"action>\"a\"<\" */\n  /* say \"cr>\"cr\"<\" */\n    wcr = strip(cr,l,\"0\")\n    Select\n      when a = 'B' then call Build_jcl_routine\n      when a = 'C' then call Create_profile_routine\n      when a = 'D' then call Delete_profile_routine\n      when a = 'E' then call Edit_profile_routine\n      when a = 'R' then call Replace_profile_routine\n      Otherwise\n    End   /* select */\n    processed_rows_to_go = processed_rows_to_go - 1\n  END /* DO WHILE */\nEND /* DO WHILE */\n\"ispexec tbclose \"main_tab\nexit\n/*********************************************/\n/* Create_table subroutine                   */\n/*********************************************/\nCreate_table:\nparse arg table_name p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 the_rest\n\"ispexec tbcreate \"table_name\" names(\"p1\" \"p2\" \"p3\" \"p4\" \"p5\" \"p6,\n                                   \" \"p7\" \"p8\" \"p9\" \"p10\" \"p11\" \"p12\") write\"\nif rc \u00ac= 0 then\n  do\n   crc = 8\n   'ispexec setmsg msg(FTPGM006)'\n  end\nelse\n  crc = 0\nreturn\n/*********************************************/\n/* Build jcl routine                         */\n/*********************************************/\nBuild_jcl_routine:\nif syp = '' then\n  syp = smp\n\"ispexec control display save\"\n\"ispexec addpop poploc(s)\"\nsdsn = '____________________________________________'\nDisplay_systems:\n\"ispexec display panel(ftpg0005)\" /* display panel to select facilities */\nif resp = 'END' then\n  do\n   resp = 'ENTER'\n   \"ispexec control display restore\"\n   return\n  end\nif sysdsn(sdsn) \u00ac= 'OK' then\n  do\n    'ispexec setmsg msg(FTPGM009)' /* invalid dataset entered, display err */\n    signal Display_systems         /* and redisplay screen                 */\n  end\nif c1 = '/' then                   /* User requesting to clear all         */\n  do /* facilities previous selected         */\n    c1  = ''\n    s1  = ''\n    s2  = ''\n    \"ispexec vput s2 profile\"\n    s3  = ''\n    \"ispexec vput s3 profile\"\n    s4  = ''\n    \"ispexec vput s4 profile\"\n    s5  = ''\n    \"ispexec vput s5 profile\"\n    s6  = ''\n    \"ispexec vput s6 profile\"\n    s7  = ''\n    \"ispexec vput s7 profile\"\n    s8  = ''\n    \"ispexec vput s8 profile\"\n    s9  = ''\n    \"ispexec vput s9 profile\"\n    s10 = ''\n    \"ispexec vput s10 profile\"\n    s11 = ''\n    \"ispexec vput s11 profile\"\n    s12 = ''\n    \"ispexec vput s12 profile\"\n    s13 = ''\n    \"ispexec vput s13 profile\"\n    s14 = ''\n    \"ispexec vput s14 profile\"\n    s15 = ''\n    \"ispexec vput s15 profile\"\n    s16 = ''\n    \"ispexec vput s16 profile\"\n    s17 = ''\n    \"ispexec vput s17 profile\"\n    'ispexec setmsg msg(FTPGM101)'\n    signal Display_systems         /* redisplay screen                     */\n  end\nif s1 = '/' then                   /* User selected all facilities         */\n  do                               /* put a \"/\" next to all systems        */\n    s1  = ''\n    s2  = '/'\n    \"ispexec vput s2 profile\"\n    s3  = '/'\n    \"ispexec vput s3 profile\"\n    s4  = '/'\n    \"ispexec vput s4 profile\"\n    s5  = '/'\n    \"ispexec vput s5 profile\"\n    s6  = '/'\n    \"ispexec vput s6 profile\"\n    s7  = '/'\n    \"ispexec vput s7 profile\"\n    s8  = '/'\n    \"ispexec vput s8 profile\"\n    s9  = '/'\n    \"ispexec vput s9 profile\"\n    s10 = '/'\n    \"ispexec vput s10 profile\"\n    s11 = '/'\n    \"ispexec vput s11 profile\"\n    s12 = '/'\n    \"ispexec vput s12 profile\"\n    s13 = '/'\n    \"ispexec vput s13 profile\"\n    s14 = '/'\n    \"ispexec vput s14 profile\"\n    s15 = '/'\n    \"ispexec vput s15 profile\"\n    s16 = '/'\n    \"ispexec vput s16 profile\"\n    s17 = '/'\n    \"ispexec vput s17 profile\"\n    'ispexec setmsg msg(FTPGM102)'\n    signal Display_systems         /* redisplay screen                     */\n  end\nif s1 = '' & s2 = '' & s3 = '' & s4 = '' & s5 = '' & s6 = '' &,\n   s7 = '' & s8 = '' & s9 = '' & s10 = '' & s11 = '' & s12 = '' &,\n   s13 = '' & s14 = '' & s15 = '' & s16 = '' & s17 = '' then\n  do\n    'ispexec setmsg msg(FTPGM107)'\n    signal Display_systems         /* redisplay screen                     */\n  end\n\"ispexec vput s2 profile\"\n\"ispexec vput s3 profile\"\n\"ispexec vput s4 profile\"\n\"ispexec vput s5 profile\"\n\"ispexec vput s6 profile\"\n\"ispexec vput s7 profile\"\n\"ispexec vput s8 profile\"\n\"ispexec vput s9 profile\"\n\"ispexec vput s10 profile\"\n\"ispexec vput s11 profile\"\n\"ispexec vput s12 profile\"\n\"ispexec vput s13 profile\"\n\"ispexec vput s14 profile\"\n\"ispexec vput s15 profile\"\n\"ispexec vput s16 profile\"\n\"ispexec vput s17 profile\"\nif s13 = '/' then              /* P2 was selected, prompt for volume   */\n  do                           /* for master catalog datasets          */\n   \"ispexec addpop poploc(s16)\"     /* as P2 has not SYPPLX volume     */\n   \"ispexec display panel(ftpg0006)\"\n  \"ispexec rempop\"\n   if resp = 'END' then\n     signal Display_systems       /* redisplay screen                   */\n  end\n\"FREE  FI(ISPFILE)\"\n\"ALLOC FI(ISPFILE) DA(\"sdsn\") SHR\"  /* allocate dataset specified to save */\n\"ispexec ftopen\"                    /* skeleton JCL                       */\nSelect\n  when tj = 'M' then\nDO  /* begin of multiple job select */\n /**************************************************************************/\n /* Build JCL member for each facility selected                            */\n /*                                                                        */\n /*                                     Define                             */\n /*                     JCL    Main     Jobcard                            */\n /*                    Member Jobcard   JES2/JES3                          */\n /*                    Prefix Skeleton  Skeleton   PLXVol   Master Catalog */\n /*                     ||       ||        ||        ||           ||       */\n /*                     \\/       \\/        \\/        \\/           \\/       */\n /**************************************************************************/\n if s2 = '/' then\n  call Skeleton_routine 'A' 'FTPGJCLA' 'FTPGJES3' 'SYAPLX' 'CATALOG.A3MASTER'\n if s3 = '/' then\n  call Skeleton_routine 'B' 'FTPGJCLB' 'FTPGJES3' 'SYBPLX' 'CATALOG.B7MASTER'\n if s4 = '/' then\n  call Skeleton_routine 'C' 'FTPGJCLC' 'FTPGJES3' 'SYCPLX' 'CATALOG.C3MASTER'\n if s5 = '/' then\n  call Skeleton_routine 'D1' 'FTPJCLD1' 'FTPGJES2' 'SY1PLX'\n if s6 = '/' then\n  call Skeleton_routine 'D9' 'FTPJCLD9' 'FTPGJES2' 'SY9PLX'\n if s7 = '/' then\n  call Skeleton_routine 'E' 'FTPGJCLE' 'FTPGJES3' 'SYEPLX'\n if s8 = '/' then\n  call Skeleton_routine 'G' 'FTPGJCLG' 'FTPGJES3' 'SYGPLX'\n if s9 = '/' then\n  call Skeleton_routine 'H' 'FTPGJCLH' 'FTPGJES3' 'SYHPLX'\n if s10 = '/' then\n  call Skeleton_routine 'N1' 'FTPJCLN1' 'FTPGJES3' 'SYNPLX'\n if s11 = '/' then\n  call Skeleton_routine 'N2' 'FTPJCLN2' 'FTPGJES3' 'SYNPLX'\n if s12 = '/' then\n  call Skeleton_routine 'P1' 'FTPJCLP1' 'FTPGJES2' 'SYPPLX'\n if s13 = '/' then\n  call Skeleton_routine 'P2' 'FTPJCLP2' 'FTPGJES2' sdvol\n if s14 = '/' then\n  call Skeleton_routine 'Q'  'FTPGJCLQ' 'FTPGJEWA' 'SYQPLX' 'SYS2.SYQ2.MSTRCTLG'\n if s15 = '/' then\n  call Skeleton_routine 'T'  'FTPGJCLT' 'FTPGJES3' 'SYTPLX' 'CATALOG.T2MASTER'\n if s16 = '/' then\n  call Skeleton_routine 'U'  'FTPGJCLU' 'FTPGJEWA' 'SYUPLX' 'SYS2.SYU2.MSTRCTLG'\n if s17 = '/' then\n  call Skeleton_routine 'Z'  'FTPGJCLZ' 'FTPGJES2' 'SYZPLX'\nEND /* end    f multiple job select */\n  when tj = 'S' then\nDO\n  delim_index = 0\n  ftp_delim_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  \"ispexec tbopen \"tab_suffix\"PP\"wcr\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  flag_sys3 = 'NO'\n  tskiprc = 0\n  DO WHILE(tskiprc = 0)                /* check to see if any SYS3 selected */\n    if s = 'S' then                    /* flag it if so. Used to deterine   */\n       if (POS('SYS3.',ndsn) > 0) then /* if define master catalog job is   */\n        do                             /* included                          */\n         flag_sys3 = 'YES'\n         leave\n        end\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  tskiprc = rc\n  END\n  \"ispexec tbclose \"tab_suffix\"PP\"wcr\n \"ispexec ftincl ftpgjobc\"          /* Include jobcard             */\n /**************************************************************************/\n /* Build single job with multiple FTP steps for each facility selected    */\n /*                                                                        */\n /*                                 Define                                 */\n /*                        Main     Jobcard                                */\n /*                      Jobstep    JES2/JES3  PLXVol                      */\n /*                      Skeleton   Skeleton   PLXVol   Master Catalog     */\n /*                         ||         ||        ||        ||              */\n /*                         \\/         \\/        \\/        \\/              */\n /**************************************************************************/\n if s2 = '/' then\n  call Skel_single_job 'A' 'FTPGSTPA' 'FTPGJES3' 'SYAPLX' 'CATALOG.A3MASTER'\n if s3 = '/' then\n  call Skel_single_job 'B' 'FTPGSTPB' 'FTPGJES3' 'SYBPLX' 'CATALOG.B7MASTER'\n if s4 = '/' then\n  call Skel_single_job 'C' 'FTPGSTPC' 'FTPGJES3' 'SYCPLX' 'CATALOG.C3MASTER'\n if s5 = '/' then\n  call Skel_single_job 'D1' 'FTPSTPD1' 'FTPGJES2' 'SY1PLX'\n if s6 = '/' then\n  call Skel_single_job 'D9' 'FTPSTPD9' 'FTPGJES2' 'SY9PLX'\n if s7 = '/' then\n  call Skel_single_job 'E' 'FTPGSTPE' 'FTPGJES3' 'SYEPLX'\n if s8 = '/' then\n  call Skel_single_job 'G' 'FTPGSTPG' 'FTPGJES3' 'SYGPLX'\n if s9 = '/' then\n  call Skel_single_job 'H' 'FTPGSTPH' 'FTPGJES3' 'SYHPLX'\n if s10 = '/' then\n  call Skel_single_job 'N1' 'FTPSTPN1' 'FTPGJES3' 'SYNPLX'\n if s11 = '/' then\n  call Skel_single_job 'N2' 'FTPSTPN2' 'FTPGJES3' 'SYNPLX'\n if s12 = '/' then\n  call Skel_single_job 'P1' 'FTPSTPP1' 'FTPGJES2' 'SYPPLX'\n if s13 = '/' then\n  call Skel_single_job 'P2' 'FTPSTPP2' 'FTPGJES2' sdvol\n if s14 = '/' then\n  call Skel_single_job 'Q' 'FTPGSTPQ' 'FTPGJEWA' 'SYQPLX' 'SYS2.SYQ2.MSTRCTLG'\n if s15 = '/' then\n  call Skel_single_job 'T' 'FTPGSTPT' 'FTPGJES3' 'SYTPLX' 'CATALOG.T2MASTER'\n if s16 = '/' then\n  call Skel_single_job 'U' 'FTPGSTPU' 'FTPGJEWA' 'SYUPLX' 'SYS2.SYU2.MSTRCTLG'\n if s17 = '/' then\n  call Skel_single_job 'Z' 'FTPGSTPZ' 'FTPGJES2' 'SYZPLX'\nEND\n otherwise\nEND\n\"ispexec ftclose name($FTPJOB)\"\nif tj = 'M' then\n 'ispexec setmsg msg(FTPGM103)'\nelse\n 'ispexec setmsg msg(FTPGM106)'\nif select_flag = 'NO' then\n 'ispexec setmsg msg(FTPGM113)'\nif eopt  = 'Y' then\n  \"ispexec edit dataset(\"sdsn\")\"\n\"ispexec control display restore\"\nreturn\n/*********************************************/\n/* Create profile routine                    */\n/*********************************************/\nCreate_profile_routine:\n\"ispexec control display save\"\na = '_'                        /* put underscore back after being selected */\ns = '_'                        /* set selection field to blank in table    */\npn = strip(pn,b,\"_\")           /* strip all underscores from data          */\npn = strip(pn,b,\" \")           /* strip all underscores from data          */\ndp = strip(dp,b,\"_\")\ndp = strip(dp,b,\" \")\ndp_copy = dp                   /* make copy of this var as              */\n                               /* Check_dsname_single_routine may alter */\n                               /* this var is used to process SYS1 dsn  */\n                               /* if specified on create                */\nsmp= strip(smp,b,\"_\")\nsmp= strip(smp,b,\" \")\nsyp= strip(syp,b,\"_\")\nsyp= strip(syp,b,\" \")\nif  dp = '' | smp = '' then\n do\n  \"ispexec control display restore\"\n  \"ispexec setmsg msg(FTPGM112)\"\n  return\n end\n\"ispexec tbput \"main_tab       /* save fields entered for profile          */\nif syp = '' then\n  syp = smp\n/***************************************************************************/\n/* Create table to hold datasets selected for processing.  This table      */\n/* will contain all the datasets for a prefix entered and their attributes */\n/* The processing routine will identify datasets that are known to be      */\n/* allocated as a master catalog datasets i.e. SYS3 for example by looking */\n/* for certain words within their name such as \"LINK\" or \"LPA\". The user   */\n/* has the ability to select any of these datasets for FTPing by placing   */\n/* a \"S\" next to the source dataset.  The user has the ability to change   */\n/* the allocation parameters if desired.  The routine will change any      */\n/* master catalog datasets to have a primary allocation and no secondary   */\n/* as these datasets may be added into the LINKLIST                        */\n/***************************************************************************/\n/* Table Field names                                                       */\n/* s    - selection field, \"S\" - select for FTP processing                 */\n/*                         \"D\" - Delete this dataset from list             */\n/*                         \"I\" - Insert a new dataset                      */\n/* dsn  - origination dataset that FTP will copy from Facility A           */\n/* ndsn - destination dataset that FTP will copy to destination Facility   */\n/* lrecl- logical record length                                            */\n/* blk  - block size                                                       */\n/* rf   - record format                                                    */\n/* su   - alllocation type - CY - cylinders TR - tracks - BL -blocks       */\n/* pri  - primary allocation                                               */\n/* sec  - second allocation                                                */\n/* pdst - PDS type - PDSE or PDS                                           */\n/* dir  - if standard PDS, no# of directory blocks                         */\n/***************************************************************************/\ncall Create_table tab_suffix'PP'wcr 's' 'dsn' 'ndsn' 'lrecl' 'blk' 'rf' 'su',\n             'pri' 'sec' 'pdst' 'dir'\n/* say crc */\nif crc \u00ac= 0 then return\nperiod_cnt = 0    /* prim counter for subroutine */\ncall Check_dsname_single_routine /* check if prefix is single qualifier */\nx = OUTTRAP('listdsns.')         /* i.e. SYS1.SFMN                      */\n                                 /* if so, set dataset prefix to first  */\n                                 /* qualifier                           */\n                                 /* make sure datasets does get listed  */\nif dp = 'SYS1' | dp = 'SYS3' then  /* twice if in master catalog          */\n  address tso \"LISTC LVL('\"dp\"') CAT('CATALOG.A1MASTER')\"\nelse\n  address tso \"LISTC LVL('\"dp\"')\"\nif rc \u00ac= 0 then                    /* If not valid return with error      */\n do\n   \"ispexec tbclose \"tab_suffix\"PP\"wcr\n   \"ispexec tberase \"tab_suffix\"PP\"wcr\n   'ispexec setmsg msg(FTPGM105)'\n   return\n end\nx = OUTTRAP('OFF')\ndo i=1 to listdsns.0\n  parse var listdsns.i p1 p2 p3 the_rest\n  if (POS(dp_copy,p3) > 0) then         /* Select only datasets with */\n    do                                  /* dataset prefix. This was  */\n     if p1 = 'NONVSAM' then             /* to process SYS1 datasets  */\n       do\n         adsn = p3\n         do while(POS('.',adsn) > 0)\n          parse var adsn . '.' adsn\n         end\n         dsn     = p3\n         ndsn    = p3\n         call Listdsi_routine dsn       /* get attributes of datasets    */\n         call Build_dest_dsn_name       /* build destination name i.e.   */\n         if rc > 0 then interate        /* SYS3.prod.R.. SDPROD.prod.R.. */\n         \"ispexec tbadd \"tab_suffix\"PP\"wcr\n       end\n    end\nend\n\"ispexec tbclose \"tab_suffix\"PP\"wcr     /* close table and redisplay  */\n'ispexec setmsg msg(FTPGM001)'          /* main panel                 */\n\"ispexec control display restore\"\nreturn\n/*********************************************/\n/* Delete profile routine                    */\n/*********************************************/\nDelete_profile_routine:\n\"ispexec tberase \"tab_suffix\"PP\"wcr  /* delete table from table library */\nif replace_flag \u00ac= 'YES' then\n do\n   a = '_'                           /* reinitialize this profile       */\n   pn ='_____________________'\n   dp ='________________________________________'\n   syp ='________________________________________'\n   smp ='________________________________________'\n   \"ispexec tbput \"main_tab\n   'ispexec setmsg msg(FTPGM002)'\n end\nreturn\n/*********************************************/\n/* Replace profile routine                   */\n/*********************************************/\nReplace_profile_routine: /* this routine will update the row in place */\nif  dp = '' | smp = '' then\n do\n  \"ispexec setmsg msg(FTPGM112)\"\n  return\n end\n/* if syp = '' then\n    syp = smp */\nreplace_flag = 'YES'          /* and build new table with replaced values  */\ncall Delete_profile_routine\ncall Create_profile_routine\n'ispexec setmsg msg(FTPGM104)'\nreturn\n/*********************************************/\n/* Edit profile routine                      */\n/*********************************************/\nEdit_profile_routine:\n/****************************************************************************/\n/* This routine gives the user the ability to select which datasets will be */\n/* FTPed to the destination system. The user can select a dataset for FTP   */\n/* transmission by placing a \"S\" in the action field.  The user can also    */\n/* cleanup the dataset list, getting rid of DLIBs for example, by placing   */\n/* a \"D\" next to the dataset to delete it from the table. The user also     */\n/* has the ability to alter any of the attributes of the dataset allocation.*/\n/* Any information updated will be saved between sessions. The user also    */\n/* has the ability to add a dataset to the list as well. All actions will be*/\n/* saved.                                                                   */\n/****************************************************************************/\n\"ispexec control display save\"\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\" write\"\nif rc > 0 then                            /* table hasn't been created yet  */\n do\n  'ispexec setmsg msg(FTPGM005)'\n  return\n end\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1)\" /* position to first record  */\npfkey = 'PF07'\nresp  = 'ENTER'\nDO WHILE (pfkey = 'PF07' | pfkey = 'PF08' | resp \u00ac= 'END')\n\"ispexec tbdispl \"tab_suffix\"PP\"wcr \"panel(ftpg0002) autosel(yes) position(ecr)\"\n/* say 'ECR>'ecr'<' */\n/* say 'PFKEY>'pfkey'<' */\neprocessed_rows_to_go = ztdsels\n/* say 'eprocessed_rows_to_go>'eprocessed_rows_to_go'<' */\nDO WHILE (eprocessed_rows_to_go > 0)\n/* say 'ECR>'ecr'<' */\n  select\n   when s = 'D' then \"ispexec tbdelete \"tab_suffix\"PP\"wcr /* delete dsn    */\n   when s = 'I' then                     /* add a new dataset to table     */\n    do                                   /* query the user for the DSN     */\n     s = '_'\n     dsn    = '____________________________________________'\n     \"ispexec addpop poploc(s)\"\n     \"ispexec display panel(ftpg0003)\"\n     if resp = 'ENTER' then\n      DO\n    /* say 'dsn>'dsn */\n       if POS(\"'\",dsn) = 0 then\n        dsn = sysvar(sysuid).||dsn\n       else\n        dsn = strip(dsn,b,\"'\")\n       if sysdsn(\"'\"dsn\"'\") = 'OK' then      /* dataset entered not ok?   */\n        do\n         call Listdsi_routine dsn\n         ndsn   = dsn\n         call Build_dest_dsn_name\n         \"ispexec display panel(ftpg0004)\" /* display attr and dest nam e */\n         if resp = 'ENTER' then            /* and change if needed        */\n          do\n           \"ispexec tbadd \"tab_suffix\"PP\"wcr\n           \"ispexec rempop all\"\n          end\n         else\n          do\n           \"ispexec rempop all\"\n           'ispexec setmsg msg(ftpgm111)' /* insert request cancelled       */\n           resp = 'ENTER'\n          end\n        end\n       else\n        do\n         'ispexec setmsg msg(ftpgm008)' /* redisplay with error msg        */\n         \"ispexec rempop all\"\n         resp = 'ENTER'\n        end\n      END\n     else\n      do\n       \"ispexec rempop all\"\n       'ispexec setmsg msg(ftpgm111)' /* insert request cancelled      */\n       resp = 'ENTER'\n      end\n    end\n   when s = 'S' then\n    do\n     if POS(\" \",ndsn) > 0 then\n      do\n       'ispexec setmsg msg(FTPGM009)' /* invalid dataset entered, display err */\n       resp = 'ENTER'\n      end\n     else\n      \"ispexec tbput \"tab_suffix\"PP\"wcr\n    end\n   when if s = ' ' | s = '' then\n    do\n     s = '_'\n     \"ispexec tbput \"tab_suffix\"PP\"wcr\n    end\n   otherwise\n  end /* end select */\n  eprocessed_rows_to_go = eprocessed_rows_to_go - 1\n/* say 'edit processed rows to go>'eprocessed_rows_to_go'<' */\nif eprocessed_rows_to_go \u00ac= 0 then\n  \"ispexec tbdispl \"tab_suffix\"PP\"wcr\" position(ecr)\"\nEND /* DO WHILE */\nEND /* DO WHILE */\n\"ispexec tbclose \"tab_suffix\"PP\"wcr    /* close table, ready for build JCL */\nresp ='ENTER'\n\"ispexec control display restore\"\nreturn\n/*********************************************/\n/* Build destination dataset routine         */\n/*********************************************/\nBuild_dest_dsn_name:\n/* say 'new dsn start of build>'ndsn'<' */\nndsnl = length(ndsn)\ndpl   = length(dp)   /* get the last period loc upto the length of */\n                     /* the install prefix                         */\n/* say 'dpl>'dpl+1 */\ndo j = 1 to dpl+1\n  char = substr(ndsn,j,1)\n  if char = '.' then\n    period_location = j\nend\nsubstrl = ndsnl - period_location\nndsn = substr(ndsn,period_location,substrl+1)\n/* say 'ndsn>'ndsn'<' */\n/*************************************************************/\n/* Check for one of the following in dataset name. If exists */\n/* assign master catalog prefix to destination dataset.      */\n/*************************************************************/\nif  (POS('LINK',dsn,1) > 0) |  (POS('LPA',dsn,1) > 0) |,\n    (POS('LOD',dsn,1) > 0) |  (POS('AUTHLIB',dsn,1) > 0) |,\n    (POS('UAUTHLIB',dsn,1) > 0) |  (POS('CONLIB',dsn,1) > 0) |,\n    (POS('LOAD',dsn,1) > 0) |  (POS('CAILIB',dsn,1) > 0) |,\n    (POS('MOD',dsn,1) > 0) then\n  do                       /* also convert to cylinders with no secondary */\n   ndsn = syp||ndsn        /* as dataset may be added to LINKLIST         */\n   if su = 'CY' then\n    do\n     pri = pri * 1.3                            /* provide buffer   */\n     pri = pri + .5                             /* round off alloc  */\n     pri = TRUNC(pri)\n     sec = 0\n    end\n   if su = 'TR' then\n    do\n     pri = (pri / systrkscyl) * 1.3             /* give no# of cyls */\n     pri = pri + .5                             /* provide buffer   */\n     pri = TRUNC(pri)                           /* round off alloc  */\n     if pri = 0 then\n       pri = 1                                  /* make at least 1 cyl */\n     su = 'CY'\n     sec = 0\n    end\n   if su ='BL' then\n    do\n     pri = (((pri * blk) / 56664) / systrkscyl) /* give no# of cyls */\n     pri = pri * 1.3                            /* provide buffer   */\n     pri = pri + .5                             /* round off alloc  */\n     pri = TRUNC(pri)\n     if pri = 0 then\n       pri = 1                                  /* make at least 1 cyl */\n     su = 'CY'\n     sec = 0\n    end\n  end\nelse\n  ndsn = smp||ndsn\n/* if dataset is pds or pds/e and contains no member then overwrite */\n/* new dataset name with error message                              */\nif substr(dsntype,1,3) = PDS & memcnt = 0 then\n  ndsn = 'Library contains no members - FTP will fail'\nreturn\n/*********************************************/\n/* LISTDSI routine                           */\n/*                                           */\n/* This routine invokes the Rexx function    */\n/* LISTDSI to obtain the attributes of each  */\n/* dataset.                                  */\n/*********************************************/\nListdsi_routine:\nparse arg y the_rest\ny = \"'\"||y||\"'\"\ny = y||' DIRECTORY RECALL'\nx       = LISTDSI(y)\nif rc   \u00ac= 0 then exit 8\ndsntype = sysdssms\nmemcnt  = sysmembers\nlrecl   = syslrecl\nblk     = sysblksize\nrf      = sysrecfm\nsu      = sysunits\nif su   = 'CYLINDER' then\n  su    = 'CY'\nif su   = 'TRACK'    then\n  su    = 'TR'\nif su   = 'BLOCK'    then\n  su    = 'BL'\ndir     = sysadirblk\npri     = sysprimary\nsec     = sysseconds\nused    = sysused\nif (pri <= used) & (sysadirblk \u00ac= 'NO_LIM') then /* make primary what is used */\n  pri = used                                     /* if used is bigger         */\nif sysadirblk = 'NO_LIM'  then                   /* make primary what is used */\n  do\n  if su = 'CY' then\n   do\n    pri = (((sysusedpages * 4096) / 56664) / systrkscyl)\n    if pri < 1 then pri = 1\n   end\n  if su = 'TR' then\n   do\n    pri = ((sysusedpages * 4096) / 56664)\n    if pri < 1 then pri = 1\n   end\n  if su = 'BL' then\n   do\n    pri = ((sysusedpages * 4096) / blk)\n    if pri < 1 then pri = 1\n   end\n  pri = pri + .5   /* round off allocation */\n  pri = trunc(pri)\n  end\nif sysdsorg = 'PO' & sysadirblk = 'NO_LIM' then\n  do\n   pdst = 'PDSE'\n   dir  = sysudirblk\n  end\nif sysdsorg = 'PO' & sysadirblk \u00ac= 'NO_LIM' then\n  do\n   pdst = 'PDS'\n   dir  = sysadirblk\n  end\nif sysdsorg = 'PS' then\n  do\n   pdst = 'SEQ'\n  end\nreturn\n/*********************************************/\n/* Skeleton routine                          */\n/*********************************************/\nSkeleton_routine:\nparse arg ska skb skc skd ske the_rest\n\"ispexec ftincl \"skb               /* Include jobcard             */\ncall Check_for_sys3                /* check if sys3 dsns selected */\n/****************************************************************/\n/* If facility being processed is a multi-lpar facility then we */\n/* need to catalog the dataset on the other LPAR                */\n/****************************************************************/\nif (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */\n    ska = 'C' | ska = 'T' |,       /* flag indicates SYS3 DSNs    */\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n  do\n  \"ispexec ftincl ftpgdd01\"          /* Include DD01 DD card        */\n  jobn = sysvar(sysuid)              /* used on Q and U skeleton    */\n  \"ispexec ftincl \"skc               /* Include define jobcard      */\n  end\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\ncatalog = ske\nplxvol = skd\ntskiprc = 0\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\nDO WHILE(tskiprc = 0)\n  if s = 'S' then                    /* Only add defines for        */\n   if ska = 'A' | ska = 'B' |,       /* A,B,C,T,Q, and U            */\n      ska = 'C' | ska = 'T' |,\n      ska = 'Q' | ska = 'U' then\n     /****************************************************************/\n     /* Add Define Nonvsam IDCAMS definition for dataset             */\n     /****************************************************************/\n     if (POS('SYS3.',ndsn) > 0) then\n       'ispexec ftincl ftpgnvsm'     /* Add define nonvsam          */\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  tskiprc = rc\nEND\nif (ska = 'A' | ska = 'B' |,       /* Only do for A,B,C,T,Q, and U     */\n    ska = 'C' | ska = 'T' |,\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n  \"ispexec ftincl ftpgdlim\"            /* Include FTP Delimiter       */\n\"ispexec ftincl ftpgindd\"              /* Include FTP INPUT DD        */\n\"ispexec tbclose \"tab_suffix\"PP\"wcr\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\ntskiprc = 0\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\nDO WHILE(tskiprc = 0)\n  if s = 'S' then                    /* only include select DSNs    */\n   do\n    call Check_for_plex_routine\n    ndsnl = LENGTH(ndsn)\n    do j = 1 to ndsnl\n      char = substr(ndsn,j,1)\n      if char = '.' then\n        do\n         first_period = j\n         leave\n        end\n    end\n    /* For P1 and P2, change any destination \"SYS3\" datasets to \"SYS2\" */\n    /* and \"SYS6\" respectively.                                        */\n    if ska = 'P1' & pndsn = 'SYS3' then\n      do\n       pndsn ='SYS2'\n       ndsn = 'SYS2.'||substr(ndsn,first_period+1,ndsnl-first_period)\n      end\n    if ska = 'P2' & pndsn = 'SYS3' then\n      do\n       pndsn ='SYS6'\n       ndsn = 'SYS6.'||substr(ndsn,first_period+1,ndsnl-first_period)\n      end\n    if tnam = 'Y' then\n     do\n      sndsn = ndsn\n      ndsn = ndsn||'.T'\n     end\n    Select\n      when pdst = 'PDS' then \"ispexec ftincl ftpgprm1\"\n      when pdst = 'PDSE' then \"ispexec ftincl ftpgprm2\"\n      Otherwise\n       \"ispexec ftincl ftpgprm3\"\n    End   /* select */\n    if tnam = 'Y' then\n      \"ispexec ftincl ftpgrenm\"\n   end   /* if s = 'S' */\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  tskiprc = rc\nEND\nif (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */\n    ska = 'C' | ska = 'T' |,\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n  \"ispexec ftincl ftpgendc\"\nelse\n  \"ispexec ftincl ftpgendd\"\n\"ispexec tbclose \"tab_suffix\"PP\"wcr\n\"ispexec ftclose name($FTP\"ska\")\"\nreturn\n/*********************************************/\n/* Check dsname for single qualifier         */\n/*                                           */\n/* This will handle datasets SYS1 datasets   */\n/* or other single level qualifiers          */\n/*********************************************/\nCheck_dsname_single_routine:\ndpl  = length(dp)\ndo j = 1 to dpl\n  char = substr(dp,j,1)\n  if char = '.' then\n    do\n     period_cnt = period_cnt + 1\n     period_location = j\n    end\nend\nif period_cnt = 1 then\n  dp  = substr(dp,1,period_location-1)\nreturn\n/*********************************************/\n/* Skeleton routine to generate single job   */\n/* with multiple steps                       */\n/*********************************************/\nSkel_single_job:\nparse arg ska skb skc skd ske the_rest\n\"ispexec ftincl \"skb               /* Include FTP step            */\ncall Check_for_sys3                /* check if sys3 dsns selected */\n/****************************************************************/\n/* If facility being processed is a multi-lpar facility then we */\n/* need to catalog the dataset on the other LPAR                */\n/****************************************************************/\nif (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U    */\n    ska = 'C' | ska = 'T' |,       /* flag indicates SYS3 DSNs    */\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n  do\n  delim_index = delim_index + 1\n  fdlim  = substr(ftp_delim_string,delim_index,1)\n  \"ispexec ftincl ftpgddsg\"          /* Include DD01 DD card        */\n  jobn = sysvar(sysuid)              /* used on Q and U skeleton    */\n  \"ispexec ftincl \"skc               /* Include define jobcard      */\n  end\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\ncatalog = ske\nplxvol = skd\ntskiprc = 0\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\nDO WHILE(tskiprc = 0)\n  if s = 'S' then                    /* Only add defines for        */\n   if ska = 'A' | ska = 'B' |,       /* B,C,T,Q, and U              */\n      ska = 'C' | ska = 'T' |,\n      ska = 'Q' | ska = 'U' then\n     /****************************************************************/\n     /* Add Define Nonvsam IDCAMS definition for dataset             */\n     /****************************************************************/\n     if (POS('SYS3.',ndsn) > 0) then\n       'ispexec ftincl ftpgnvsm'     /* Add define nonvsam          */\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  tskiprc = rc\nEND\nif (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */\n    ska = 'C' | ska = 'T' |,\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n    \"ispexec ftincl ftpsglim\"            /* Include FTP Delimiter       */\n\"ispexec ftincl ftpgindd\"                /* Include FTP INPUT DD        */\n\"ispexec tbclose \"tab_suffix\"PP\"wcr\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\ntskiprc = 0\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\nDO WHILE(tskiprc = 0)\n  if s = 'S' then                    /* only include select DSNs    */\n   do\n    call Check_for_plex_routine\n    ndsnl = LENGTH(ndsn)\n    do j = 1 to ndsnl\n      char = substr(ndsn,j,1)\n      if char = '.' then\n        do\n         first_period = j\n         leave\n        end\n    end\n    /* For P1 and P2, change any destination \"SYS3\" datasets to \"SYS2\" */\n    /* and \"SYS6\" respectively.                                        */\n    if ska = 'P1' & pndsn = 'SYS3' then\n      do\n       pndsn ='SYS2'\n       ndsn = 'SYS2.'||substr(ndsn,first_period+1,ndsnl-first_period)\n      end\n    if ska = 'P2' & pndsn = 'SYS3' then\n      do\n       pndsn ='SYS6'\n       ndsn = 'SYS6.'||substr(ndsn,first_period+1,ndsnl-first_period)\n      end\n    if tnam = 'Y' then\n     do\n      sndsn = ndsn\n      ndsn = ndsn||'.T'\n     end\n    Select\n      when pdst = 'PDS' then \"ispexec ftincl ftpgprm1\"\n      when pdst = 'PDSE' then \"ispexec ftincl ftpgprm2\"\n      Otherwise\n       \"ispexec ftincl ftpgprm3\"\n    End   /* select */\n    if tnam = 'Y' then\n      \"ispexec ftincl ftpgrenm\"\n   end   /* if s = 'S' */\n  \"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\n  tskiprc = rc\nEND\nif (ska = 'A' | ska = 'B' |,       /* Only do A,B,C,T,Q, and U      */\n    ska = 'C' | ska = 'T' |,\n    ska = 'Q' | ska = 'U' ) & (flag_sys3 = 'YES') then\n   \"ispexec ftincl ftpgendc\"\nelse\n  \"ispexec ftincl ftpgendd\"\n\"ispexec tbclose \"tab_suffix\"PP\"wcr\nreturn\n/*********************************************/\n/* Check for SYS3 datasets selected for FTP  */\n/* transfer routine                          */\n/*********************************************/\nCheck_for_sys3:\n\"ispexec tbopen \"tab_suffix\"PP\"wcr\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\nflag_sys3 = 'NO'\nselect_flag ='NO'\ntskiprc = 0\nDO WHILE(tskiprc = 0)                /* check to see if any SYS3 selected */\n  if s = 'S' then                    /* flag it if so. Used to deterine   */\n   do\n     select_flag ='YES'\n     if (POS('SYS3.',ndsn) > 0) then /* if define master catalog job is   */\n      do                             /* included                          */\n       flag_sys3 = 'YES'\n       leave\n      end\n   end\n\"ispexec tbskip \"tab_suffix\"PP\"wcr\" number(1) rowid(bcr)\"\ntskiprc = rc\nEND\n\"ispexec tbclose \"tab_suffix\"PP\"wcr\nreturn\n/*********************************************/\n/* Check for if allocation should be done    */\n/* on SYxPLX volume for master catalog DSNs  */\n/*********************************************/\nCheck_for_plex_routine:\n  /*  say 'syp>'syp'<'\n      say 'ndsn>'ndsn'<' */\n  pndsn = substr(ndsn,1,(POS('.',ndsn)-1))\n  if pos('.',syp) > 0 & LENGTH(syp) \u00ac= 0 then\n    psyp  = substr(syp,1,(POS('.',syp)-1))\n  if  (pndsn = 'SYS2' | pndsn = 'SYS3' | pndsn = 'SYS6') then\n      plxvol = skd\n  else\n      plxvol = ''\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTPG0002": {"ttr": 11, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00'\\x01\\x110/\\x01\\x110_ Y\\x00\\x14\\x00\\xff\\x00\\x00\\xe2\\xc4\\xe3\\xe2\\xf0\\xf0\\xf3@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2011-10-29T00:00:00", "modifydate": "2011-11-01T20:59:27", "lines": 20, "newlines": 255, "modlines": 0, "user": "SDTS003"}, "text": "/* REXX *************************************************************/\n/* Routine to strip underscores on panel entry for dataset          */\n/* called by panel FTPG0003                                         */\n/* Author:  written with undubious precision by Larry Zuckett       */\n/* Date:    11/25/2011                                              */\n/*                                                                  */\n/* ******************************************************************/\ntrace off     /* trace off or trace a */\ndsn    = strip(dsn,b,'_')\nndsn   = strip(ndsn,b,'_')\nsdsn   = strip(sdsn,b,'_')\nlrecl  = strip(lrecl,b,'_')\nblk    = strip(blk,b,'_')\nrf     = strip(rf,b,'_')\nsu     = strip(su,b,'_')\npri    = strip(pri,b,'_')\nsec    = strip(sec,b,'_')\npdst   = strip(pdst,b,'_')\ndir    = strip(dir,b,'_')\nreturn\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT981/CBT.V500.FILE981.PDS/FTPGENEX.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT981/CBT.V500.FILE981.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}