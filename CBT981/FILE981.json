{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013651000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE981.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE981.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x02'", "DS1TRBAL": "b'\\xd2\\xe8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\nL\\x00\\x04\\nL\\x00\\x0b\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00X\\x01\\x19\\x11\\x8f\\x01\\x19\\x11\\x8f\\x145\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-28T00:00:00", "modifydate": "2019-04-28T14:35:58", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  981\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE981\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,942 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/28/19    14:35:58    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE981": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00P\\x01\\x19\\x11\\x8f\\x01\\x19\\x11\\x8f\\x145\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-04-28T00:00:00", "modifydate": "2019-04-28T14:35:50", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 981 is from Larry Zuckett and contains some utilities     *   FILE 981\n//*           of his, written in REXX.                              *   FILE 981\n//*                                                                 *   FILE 981\n//*           email:  lzuckett@ford.com                             *   FILE 981\n//*                                                                 *   FILE 981\n//*      Members of this pds:                                       *   FILE 981\n//*                                                                 *   FILE 981\n//*      DISUBSYS  01.00  2018/11/14 21:33:51    55    DISSUBS      *   FILE 981\n//*      FTPGENEX  01.00  2018/11/14 21:21:58  1088    FTPGEN       *   FILE 981\n//*      FTPGENMS  01.00  2018/11/14 21:21:58    89    FTPGEN       *   FILE 981\n//*      FTPGENPN  01.00  2018/11/14 21:21:58   482    FTPGEN       *   FILE 981\n//*      FTPGENSK  01.00  2018/11/14 21:21:58   445    FTPGEN       *   FILE 981\n//*      RACFRORG  01.01  2018/11/15 16:56:00   490    RACFRRG      *   FILE 981\n//*      REORGJ01  01.00  2018/11/14 21:30:03    12    RACFRRG      *   FILE 981\n//*      REORGJ02  01.00  2018/11/14 21:30:03    12    RACFRRG      *   FILE 981\n//*      SVCLIST   01.00  2018/11/14 21:46:00   252    SVCLIST      *   FILE 981\n//*                                                                 *   FILE 981\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DISUBSYS": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x181\\x8f\\x01\\x181\\x8f!3\\x007\\x007\\x00\\x00\\xc4\\xc9\\xe2\\xe2\\xe4\\xc2\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:33:51", "lines": 55, "newlines": 55, "modlines": 0, "user": "DISSUBS"}, "text": "/* rexx */\n/*******************************************/\n/* Display Active Subsystems               */\n/*                                         */\n/* Author:  Larry Zuckett                  */\n/* Date  :  08/14/2006                     */\n/*                                         */\n/* PSA+10x --->CVT+128x                    */\n/*             CVTJESCT-->JESCT+18x        */\n/*                        JESSSCT          */\n/*                         |               */\n/*                     ____|               */\n/*                    |                    */\n/*                   \\/                    */\n/*                    SSCVT                */\n/*                    +4 ptr to next SSCVT */\n/*                    +8 subsystem name    */\n/*******************************************/\n/* trace all */\nparse arg ind\npush  \"end\"\npush  \"l 10.?+128?+18?+4 LENGTH(4)\"\nx = OUTTRAP(output.)\naddress tso \"test 'sys1.linklib(iefbr14)'\"\ny = OUTTRAP('OFF')\nparse var output.1 ssctscta.1 ssctscta.2 ssctscta.3\nssctaddr = ssctscta.2\nssctscta.2 = strip(ssctscta.2,L,'0')\npush  \"end\"\npush  \"l 10.?+128?+18?+8 C LENGTH(4)\"\nx = OUTTRAP(output.)\naddress tso \"test 'sys1.linklib(iefbr14)'\"\ny = OUTTRAP('OFF')\nparse var output.1 ssctsnam.1 ssctsnam.2 ssctsnam.3\nsay 'Subsystem Name==>'ssctaddr'.' ssctsnam.2\nforward_pointer = X2D(ssctscta.2)\nDO WHILE(forward_pointer  \u00ac= 0)   /* Loop while not end of SSNT    */\npush  \"end\"\npush  'l 'ssctscta.2'.+8 C LENGTH(4)'\nx = OUTTRAP(output.)\naddress tso \"test 'sys1.linklib(iefbr14)'\"\ny = OUTTRAP('OFF')\nparse var output.1 ssctsnam.1 ssctsnam.2 ssctsnam.3\nsay 'Subsystem Name==>'ssctsnam.1 ssctsnam.2\npush  \"end\"\npush  'l' ssctscta.2'.+4 LENGTH(4)'\nx = OUTTRAP(output.)\naddress tso \"test 'sys1.linklib(iefbr14)'\"\ny = OUTTRAP('OFF')\nparse var output.1 ssctscta.1 ssctscta.2 ssctscta.3\nssctaddr = ssctscta.2\nssctscta.2 = strip(ssctscta.2,l,'0')\nforward_pointer = X2D(ssctscta.2)\nEND\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTPGENEX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x181\\x8f\\x01\\x181\\x8f!!\\x04@\\x04@\\x00\\x00\\xc6\\xe3\\xd7\\xc7\\xc5\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:21:58", "lines": 1088, "newlines": 1088, "modlines": 0, "user": "FTPGEN"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "FTPGENMS": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x181\\x8f\\x01\\x181\\x8f!!\\x00Y\\x00Y\\x00\\x00\\xc6\\xe3\\xd7\\xc7\\xc5\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:21:58", "lines": 89, "newlines": 89, "modlines": 0, "user": "FTPGEN"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "FTPGENPN": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x181\\x8f\\x01\\x181\\x8f!!\\x01\\xe2\\x01\\xe2\\x00\\x00\\xc6\\xe3\\xd7\\xc7\\xc5\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:21:58", "lines": 482, "newlines": 482, "modlines": 0, "user": "FTPGEN"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "FTPGENSK": {"ttr": 1282, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x181\\x8f\\x01\\x181\\x8f!!\\x01\\xbd\\x01\\xbd\\x00\\x00\\xc6\\xe3\\xd7\\xc7\\xc5\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:21:58", "lines": 445, "newlines": 445, "modlines": 0, "user": "FTPGEN"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RACFRORG": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x181\\x9f\\x01\\x181\\x9f\\x16V\\x01\\xea\\x01\\xd2\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd9\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-11-15T00:00:00", "modifydate": "2018-11-15T16:56:00", "lines": 490, "newlines": 466, "modlines": 0, "user": "RACFRRG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "REORGJ01": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x181\\x8f\\x01\\x181\\x8f!0\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd9\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:30:03", "lines": 12, "newlines": 12, "modlines": 0, "user": "RACFRRG"}, "text": "//SDREORG1 JOB (1,18651,FMCC1288),SOFTWARE,NOTIFY=&SYSUID,\n//         MSGCLASS=9,REGION=7M\n//*MAIN  CLASS=SDFLASH\n//*******************************************************************\n//*   THIS JOB REORGS THE BACKUP RACF DATA SET                      *\n//********************************************************************\n//*\n//STEP1    EXEC PGM=IRRUT400,PARM='NOLOCKINPUT,FREESPACE(25),ALIGN'\n//INDD1    DD  DSN=SYS1.SYA.RACF.PRIMARY,DISP=SHR\n//OUTDD1   DD  DSN=SYS1.SYA.RACF.BACKUP,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REORGJ02": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x181\\x8f\\x01\\x181\\x8f!0\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd9\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:30:03", "lines": 12, "newlines": 12, "modlines": 0, "user": "RACFRRG"}, "text": "//SDREORG2 JOB (1,18651,FMCC1288),SOFTWARE,NOTIFY=&SYSUID,\n//         MSGCLASS=9,REGION=7M\n//*MAIN  CLASS=SDFLASH\n//********************************************************************\n//**   THIS JOB REORGS THE PRIMARY AFTER THE BACKUP IS REORGED   *****\n//********************************************************************\n//*\n//STEP1    EXEC PGM=IRRUT400,PARM='NOLOCKINPUT,FREESPACE(25),ALIGN'\n//INDD1    DD  DSN=SYS1.SYA.RACF.BACKUP,DISP=SHR\n//OUTDD1   DD  DSN=SYS1.SYA.RACF.PRIMARY,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCLIST": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x181\\x8f\\x01\\x181\\x8f!F\\x00\\xfc\\x00\\xfc\\x00\\x00\\xe2\\xe5\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-11-14T00:00:00", "modifydate": "2018-11-14T21:46:00", "lines": 252, "newlines": 252, "modlines": 0, "user": "SVCLIST"}, "text": "/* rexx */\n/**********************************************************/\n/* Display SVCTABLE on System                             */\n/*                                                        */\n/* Author:  Larry Zuckett                                 */\n/* Date  :  08/27/2003                                    */\n/*       :  06/08/2012 fully documented code              */\n/*                     changed logic for checking if SVC  */\n/*                     is in use.                         */\n/*       :  06/13/2012 added help, startsvc endsvc option */\n/*       :  06/25/2012 correct minor display issue        */\n/*       :  08/01/2012 change max line length to 80       */\n/*                                                        */\n/* PSA+x'10'-->CVT                                        */\n/*       +x'C8'cvtabend-->SCVT                            */\n/*                  +x'84'scvtsvct                        */\n/*                         |                              */\n/*                     ____|                              */\n/*                    |                                   */\n/*                   \\/                                   */\n/*                    SVCTABLE                            */\n/*  8 bytes per entry 255 entries                         */\n/*    svc 0           +x'0' entry point                   */\n/*                    +x'4' flag bytes                    */\n/*    svc 1           +x'0' entry point                   */\n/*                    +x'4' flag bytes                    */\n/*    ... x           ....                                */\n/*    ... x           ....                                */\n/*    svc 255         +x'0' entry point                   */\n/*                    +x'4' flag bytes                    */\n/*                                                        */\n/*   Command Syntax:  From ISPF OPTION 6 enter:           */\n/*                                                        */\n/*                    SVCLIST                             */\n/*                                                        */\n/*                      or                                */\n/*                                                        */\n/*                    SVCLIST  start-svc                  */\n/*                                                        */\n/*                      or                                */\n/*                                                        */\n/*                    SVCLIST  start-svc end-svc          */\n/*                                                        */\n/*  where start-svc   >= 200 and <= 255                   */\n/*  where end-svc     >= startsvc and <= 255              */\n/**********************************************************/\n/* trace c */\nparse arg startsvc endsvc\nif startsvc = '?' then\ndo\nsay' Command Syntax:  From ISPF OPTION 6 enter:            '\nsay'                                                       '\nsay'                  SVCLIST                              '\nsay'                                                       '\nsay'                    or                                 '\nsay'                                                       '\nsay'                  SVCLIST  start-svc                   '\nsay'                                                       '\nsay'                    or                                 '\nsay'                                                       '\nsay'                  SVCLIST  start-svc end-svc           '\nsay'                                                       '\nsay'where start-svc   >= 200 and <= 255                    '\nsay'where end-svc     >= startsvc and <= 255               '\nsay'                                                       '\nexit 0\nend\nif startsvc \u00ac= '' then\n do\n  if datatype(startsvc,num) \u00ac= 1 then\n    do\n     say 'invalid svc number  - \"startsvc\" must be a numeric',\n         'value between 200 and 255'\n     say 'Enter \"SVCLIST ?\" for syntax '\n     exit 8\n    end\n end\nif endsvc \u00ac= '' then\n do\n  if datatype(endsvc,num) \u00ac= 1 then\n    do\n     say 'invalid svc number  - \"endsvc\" must be a numeric',\n         'value between 200 and 255'\n     say 'Enter \"SVCLIST ?\" for syntax '\n     exit 8\n    end\n end\nif startsvc \u00ac= '' & endsvc = '' then\n   endsvc = startsvc\nelse\n   if endsvc = '' then\n     endsvc = 255\nif startsvc = '' then\n  startsvc = 200\nif startsvc < 200 | endsvc > 255 then\n  do\n   say 'invalid svc numbers - startsvc must be >= 200'\n   say '                      endsvc   must be <= 255'\n   say '                      and > then startsvc'\n   say 'Enter \"SVCLIST ?\" for syntax '\n   exit 8\n  end\nif endsvc < startsvc then\n  do\n   say 'invalid svc numbers - the endsvc must be >= startsvc'\n   say 'Enter \"SVCLIST ?\" for syntax '\n   exit 8\n  end\naddress tso clrscrn\nsay '**********************************************************'\nsay '* SVC REPORT GENERATED FOR 'mvsvar(syssmfid)'                          *'\nsay '*' date(n)'   'time(c)'                                   *'\nsay '**********************************************************'\npush  \"END\"\npush  \"l 10.?+c8?+84\"\n/**************************************************************/\n/* The list command will generate the following 2 lines       */\n/*                                                            */\n/*  00FD7984.  0146BE10  00000000                             */\n/*  TEST                                                      */\n/*                                                            */\n/*  stem Variable addrsvc.0  = line count from test command   */\n/*  stem Variable addrsvc.1  = (1) address of scvtsvct        */\n/*                             (2) contents of scvtsvct which */\n/*                                 is beginning of SVCTABLE   */\n/*                                                            */\n/**************************************************************/\nx = OUTTRAP(addrsvc.)\naddress tso \"test 'sys1.linklib(iefbr14)'\"\ny = OUTTRAP('OFF')\nsvctabst   = addrsvc.1\nparse var addrsvc.1 svc1 svc2 svc3\nsay 'svctable is located at ' svc2\n/**************************************************************/\n/* Skip the system defined svcs and start at the user defined */\n/* svcs                                                       */\n/* startsvc >= 200 and endsvc must be <= 255                  */\n/**************************************************************/\nDO number = startsvc to endsvc\ntrace off\n    dsvc2 = x2d(svc2)                  /* convert address to decimal number   */\n    addrusvc = dsvc2+(number*8)        /* skip the first 200 system defined   */\n                                       /* entries i.e. SVC0 - SVC199          */\n                                       /* 8 bytes per entry so start of       */\n                                       /* user table = starting address +     */\n                                       /* (200 * 8)                           */\n    addrusst = addrusvc+4              /* get address of flag bytes for svc   */\n    addrxsvc = d2x(addrusvc)           /* get entry point, convert to hex     */\n    addrusst = d2x(addrusst)           /* convert flag bytes address to hex   */\n    push  \"END\"\n    push  'l' addrxsvc'.? C LENGTH(64)'/* get the first 64 bytes of entry     */\n                                       /* for the display                     */\n    /**************************************************************************/\n    /*  These commands will generate the following 2 lines:                   */\n    /*                                                                        */\n    /*   00FD4C00.  .F.0A...VTDA......+..DFSVC200+12   00000000               */\n    /*   00FD4C20.  10+20101004+12.50 5635-A03 COPYR                          */\n    /*                                                                        */\n    /*  stem Variable svcno.0  = line count from test command                 */\n    /*  stem Variable svcno.1  = (1) address, 1st 32 bytes, nulls             */\n    /*  stem Variable svcno.2  = (2) address, next 32 bytes                   */\n    /**************************************************************************/\n    x = OUTTRAP(svcno.)\n    address tso \"test 'sys1.linklib(iefbr14)'\"\n    y = OUTTRAP('OFF')\n    parse var svcno.1 svcent1 svcent2\n    /***************************************************/\n    /* get the 1st 32 bytes of the svc to be displayed */\n    /***************************************************/\n    /* say 'svcent2>'svcent2'<' */\n       svcent2 = substr(svcent2,1,33)\n       svcent2 = strip(svcent2,'L') /* strip leading blank on first line */\n    parse var svcno.2 svcent3 svcent4\n    /***************************************************/\n    /* get the next 32 bytes of the svc to be displayed*/\n    /***************************************************/\n    /* say 'svcent4>'svcent4'<' */\n       svcent4 = substr(svcent4,1,33)\n       svcent4 = strip(svcent4,'L') /* strip leading blank on second line */\n    /**************************************************************************/\n    /*  These commands will generate the following 4 lines:                   */\n    /*                                                                        */\n    /*   00FD4C00.  18C647F0 C1140000 E5E3C4C1 00000000          00000000     */\n    /*              00FD4EA0 1CC4C6E2 E5C3F2F0 F04EF1F2                       */\n    /*   00FD4C20.  F1F04EF2 F0F1F0F1 F0F0F44E F1F24BF5                       */\n    /*              F040F5F6 F3F560C1 F0F340C3 D6D7E8D9                       */\n    /*                                                                        */\n    /*  stem Variable svcvalid.0 = line count from test command               */\n    /*  stem Variable svcvalid.1 = 1st 16 bytes of SVC code in hex            */\n    /*  stem Variable svcvalid.2 = 2nd 16 bytes of SVC code in hex            */\n    /*  stem Variable svcvalid.3 = 3rd 16 bytes of SVC code in hex            */\n    /*  stem Variable svcvalid.4 = 4th 16 bytes of SVC code in hex            */\n    /*                                                                        */\n    /*  Use this output to check the first 4 bytes                            */\n    /*                                                                        */\n    /**************************************************************************/\n    push  \"END\"\n    push  'l' addrxsvc'.? X  LENGTH(64)' /* get the first 64 bytes of entry   */\n                                         /* for the display                   */\n    x = OUTTRAP(svcvalid.)\n    address tso \"test 'sys1.linklib(iefbr14)'\"\n    y = OUTTRAP('OFF')\n    /* say svcvalid.1 */\n    parse var svcvalid.1 p1 p2 p3      /* use 'p2' to check for unused SVC    */\n                                       /* code.  Check for x'1F22BF27':       */\n                                       /*           SR  R2,R2                 */\n                                       /*           ICM R2,B'0111',29(R5)     */\n                                       /* to determine if SVC entry is in use */\n    /**************************************************************************/\n    /*  These commands will generate the following 2 lines:                   */\n    /*                                                                        */\n    /*   0146C49C.  80000000                                     00000000     */\n    /*                                                                        */\n    /*  stem Variable attrib.0 = line count from test command                 */\n    /*  stem Variable attrib.1 = (1) address, 1st 32 bytes, nulls             */\n    /*  stem Variable attrib.2 = (2) address, next 32 bytes                   */\n    /**************************************************************************/\n    push  \"END\"\n    push  'l' addrusst'.'\n    x = OUTTRAP(attrib.)\n    address tso \"test 'sys1.linklib(iefbr14)'\"\n    y = OUTTRAP('OFF')\n    parse var attrib.1 stat1 stat2 stat3\n    svctype = SUBSTR(stat2,1,1)\n    if svctype = '0' then\n     type = '1  '\n    else\n    if svctype = '8' then\n     type = '2  '\n    else\n    if svctype = 'C' then\n     type = '3/4'\n    else\n    if svctype = '2' then\n     type = '6  '\n    else\n     type = 'xxx'\n/******************************************************************************/\n/* Do not change the format of these say commands as these are designed for   */\n/* a mod-5 3270 screen (27 x 132) and to be printed on a 132 column page      */\n/*                                                                            */\n/******************************************************************************/\n    if p2 = '1F22BF27' then\n    say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1,\n        'IS NOT IN USE'\n/*  say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1, */\n/*  'IS NOT IN USE FIRST 4 BYTES' p2                                */\n   ELSE\n    say 'SVC NO#'number addrxsvc 'TYPE' type 'ENTRY POINT' svcent1,\n        'FIRST 64 BYTES' svcent2||svcent4\n  END\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT981/FILE981.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT981", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}