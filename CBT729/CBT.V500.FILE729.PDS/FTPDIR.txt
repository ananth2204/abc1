/* rexx */
/**********************************************************************/
/* Function: FTP List DIR entries.                                    */
/* parms: server dir                                                  */
/* Returns:  FTP return code                                          */
/*           Count of files found in dir                              */
/*           File msg lines - each begins with 'EZA2284I'             */
/*                                                                    */
/* RBW 5/99                                                           */
/**********************************************************************/
/*    *    *    *    Establish Error Traps    *    *    *    *    *   */
call on error name errproc
signal on syntax name errproc
signal on novalue name errproc
/*    *    *    *    *    *    *    *    *    *    *    *    *    *   */

server = arg(1)
dir = arg(2)
upper server                      /* Upcase server name */



address tso
ok=0;"PROFILE MSGID"                   /* Set MSGIDs on */
/* Alloc FTP command and msg datasets */
ok='0 4';"ALLOC  FI(INPUT) NEW DELETE REUSE" ,
         "LRECL(80) RECFM(F B) UNIT(VIO)"
ok='0 4';"ALLOC  FI(OUTPUT) NEW DELETE REUSE" ,
         "LRECL(137) RECFM(V B) UNIT(VIO)"

 /* Queue up the FTP commands */
ok=0;"NEWSTACK"                       /* Get a clean stack */
 queue 'LIST' dir
 queue 'QUIT'
 queue ''
ok=0;"EXECIO * DISKW INPUT (FINIS"     /* Write FTP commands to file */
ok=0;"DELSTACK"                        /* Delete the stack */

/**********************************************************************/
/* Invoke FTP                                                         */
/**********************************************************************/
ok='*';"FTP" server '(EXIT'              /* Invoke FTP */
ftprc = rc                        /* Save off return code */
"FREE FI(INPUT)"                  /* Free the command file */

/* Read the input messages into stem */
ok=0;"EXECIO * DISKR OUTPUT (STEM FTPMSG. FINIS"
ok=0;"FREE FI(OUTPUT)"            /* Free the output file */

/**********************************************************************/
/* If non-zero return from FTP, ecit now with RC                      */
/**********************************************************************/
if wordpos(ftprc,'0 14550') = 0   /* If error from FTP, */
  then return ftprc '0'    /* Return error code and count */
if ftprc = 14550       /* If file not found, */
  then return '0 0'    /* Return rc=0 and count=0 */

/**********************************************************************/
/* Zero RC from FTP. Process the msg file                             */
/**********************************************************************/
/* Put all the messages into one var for parse */
bigmsg =''
do i = 1 to ftpmsg.0
  bigmsg = bigmsg strip(ftpmsg.i,'B')
end

/* Get segment of msgs we're interested in */
start_msg = '150 Opening ASCII mode data connection for /bin/ls.'
end_msg = '226 Transfer complete.'
parse var bigmsg (start_msg) filemsgs (end_msg) .
/* Count the EZA2284I messages */
filecount = 0; idx = 1; str = 'EZA2284I'
do while wordpos(str,filemsgs,idx) > 0
   filecount = filecount + 1
   idx = wordpos(str,filemsgs,idx) + 1
end


/** Return return code, count if files found, and msg line for each
    file */
return ftprc filecount filemsgs



/*********************************************************************/
/**   Cleanup after error                                           **/
/*********************************************************************/
cleanup_after_error:
address tso free fi(INPUT)
address tso free fi(OUTPUT)
exit
/*********************************************************************/
/**   standard error handling routine                               **/
/*********************************************************************/
errproc:
if condition('c') = 'ERROR' & symbol('OK') = 'VAR'
  then if wordpos(rc,ok) > 0 | ok = '*' then return;   /* Not an error*/
/* Cancel error traps to prevent recursion */
signal off syntax
signal off novalue
call off error
/* error presentation code */
error_type = condition('c')
say error_type 'at line' sigl ':' condition('d')
if error_type = 'SYNTAX'
  then say errortext(rc)
if error_type = 'ERROR' & symbol('zerrlm') = 'VAR'
  then say zerrlm
if error_type = 'ERROR'
  then say 'Return code = ' rc
call cleanup_after_error
