/*  REXX ICH                                                          */
/**********************************************************************/
/*                                                                    */
/*              III   CCCC H   H                                      */
/*               I   C     H   H                                      */
/*  MODULE  =    I   C     HHHHH                                      */
/*               I   C     H   H                                      */
/*              III   CCCC H   H                                      */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE 01/11/2010                         */
/*  #¢# LAST UPDATE        TKMILLE 01/21/2010                         */
/*                                                                    */
/*  PURPOSE:                                                          */
/*       This program was written to provide the capability to        */
/*       dynamically update, delete, and remove RACF Exits            */
/*       without having to IPL.                                       */
/*                                                                    */
/*       This exec can perform any of four functions.                 */
/*       It can UPDATE or DELETE a module from dynamic LPA (just      */
/*       as the SETPROG LPA,ADD/DELETE MVS command does) or it        */
/*       can REMOVE an exit from RACF use until the next IPL          */
/*       or it can REPOINT an exit to put it back into RACF service.  */
/*       These four functions are documented below.                   */
/*                                                                    */
/*       In order for RACF (Security Server) to recognize the change  */
/*       in the exit module's status, the RCVT (RACF COMMUNICATION    */
/*       VECTOR TABLE) pointer must be repointed to the new Entry     */
/*       point address (for an Update function) or it must be         */
/*       zeroed to remove and exit from RACF use.                     */
/*                                                                    */
/*       This exec may be called in TEST/SIMULATE mode to simulate    */
/*       an update to an exit.                                        */
/*                                                                    */
/*       This exec calls APF-Authorized program ICHLOADR to perform   */
/*       these functions.                                             */
/*                                                                    */
/*  MAINTENANCE:                                                      */
/*                                                                    */
/*       This exec contains a table of the RACF exits which exist     */
/*       today (many of them anyway) and their respective RCVT        */
/*       offset values (see the RCVT comments below) coded in         */
/*       their hexadecimal values.                                    */
/*                                                                    */
/*       If the author overlooked any RACF Exits or tables, those     */
/*       omitted exits can be added to the table with their           */
/*       RCVT offset values (in Hexadecimal format).                  */
/*                                                                    */
/*  FUNCTIONS:                                                        */
/*                                                                    */
/*       There are four functions for this exec.                      */
/*                                                                    */
/*       1) UPDATE - This function loads a new version of a RACF      */
/*          exit into dynamic LPA (CSA memory) (same as the           */
/*          SETPROG LPA,ADD command).  It also repoints RACF to       */
/*          use the updated module (updates the exits RCVT pointer).  */
/*          The user must specify the load library to fetch the exit  */
/*          from to load into dynamic LPA (CSA).  This exec will      */
/*          default to load library SYS1.LPALIB unless specified      */
/*          otherwise when the exec is invoked.                       */
/*          (Does the same function as the SETPROG LPA,ADD MVS command*/
/*          except that it also updates the RACF RCVT pointer which   */
/*          points to the updated version of the exit in LPA (CSA)    */
/*          storage.)                                                 */
/*                                                                    */
/*          If none of these four function values are passed as       */
/*          parameters to this exec, it will default to use the       */
/*          UPDATE function if the user confirms the default.         */
/*                                                                    */
/*       2) DELETE - This function deletes a RACF exit from dynamic   */
/*          LPA (same as SETPROG LPA,DELETE command) and then also    */
/*          loads zeros into the RACF RCVT pointer to indicate to     */
/*          RACF that the exit is not being used (until the next      */
/*          IPL or next dynamic update).                              */
/*          (Does the same function as the SETPROG LPA,DELETE         */
/*          MVS command except that it also unpoints (zeros) the      */
/*          RACF RCVT pointer which points to it in LPA storage.)     */
/*                                                                    */
/*       3) REMOVE - This function only unpoints the RACF exit        */
/*          (loads zeros into the RACF RCVT pointer for that Exit)    */
/*          to take the exit out of RACF service (until the next      */
/*          IPL or next dynamic update). This function does not       */
/*          actually affect the exit module itself.  It only          */
/*          updates the RACF RCVT pointer which points to it.         */
/*                                                                    */
/*       4) REPOINT - This function obtains the most current EP       */
/*          address for the exit from LPA storage and then repoints   */
/*          RACF to the exit to put the exit back into service for    */
/*          RACF to use.  This would normally be done after a         */
/*          previous REMOVE function has taken the exit out of        */
/*          service for RACF to put the exit back into service.       */
/*          This function does not actually affect the exit           */
/*          module in LPA storage.  It only updates the RACF          */
/*          RCVT pointer which points to it.                          */
/*                                                                    */
/*                                                                    */
/*  INVOCATION SYNTAX:                                                */
/*                                                                    */
/*     ICH ?                                                          */
/*     ICH membername [ UPDATE | REMOVE | DELETE | REPOINT ]          */
/*                    [ DA(dsname)               ]                    */
/*                    [ TEST | SIMULATE          ]                    */
/*                    [ DEBUG                    ]                    */
/*                                                                    */
/*     Where membername is one of the following RACF User Exits:      */
/*                                                                    */
/*      ICHAUTAB                                                      */
/*      ICHCNX00                                                      */
/*      ICHDEX01                                                      */
/*      ICHDEX11                                                      */
/*      ICHNCV00                                                      */
/*      ICHPWX01                                                      */
/*      ICHPWX11                                                      */
/*      ICHRCX01                                                      */
/*      ICHRCX02                                                      */
/*      ICHRDX01                                                      */
/*      ICHRDX02                                                      */
/*      ICHRFX01                                                      */
/*      ICHRFX02                                                      */
/*      ICHRFX03                                                      */
/*      ICHRFX04                                                      */
/*      ICHRIN03                                                      */
/*      ICHRIX01                                                      */
/*      ICHRIX02                                                      */
/*      ICHRLX01                                                      */
/*      ICHRLX02                                                      */
/*                                                                    */
/*  PARAMETERS:                                                       */
/*                                                                    */
/*   MEMBERNAME - Specifies the RACF Exit member name for which to    */
/*                obtain the absolute storage address.                */
/*                This must be the first positional parameter passed  */
/*                to ICH (unless a "?" is passed for help query).     */
/*                                                                    */
/*   DA(dsname) - Specifies the load library dataset name to be used  */
/*                to fetch the RACF Module from to stow in CSA for    */
/*                the LLA update. If this parameter is omitted, the   */
/*                RACF exit module will be fetched from default       */
/*                load library 'SYS1.LPALIB'.                         */
/*                                                                    */
/*   DSN(dsname)- Same as DA(dsname).  See above.                     */
/*                                                                    */
/*   The following three parameters are processed as the FUNCTION     */
/*   literals to be passed to program ICHLOADR.                       */
/*   If none of these three function values are entered, the          */
/*   default function is "UPDATE" if the user confirms the default.   */
/*                                                                    */
/*   UPDATE     - Specifies that the module passed should be updated  */
/*                in CSA (LLA Update) to replace the existing         */
/*                module in LLA and repoint the RACF RCVT pointer     */
/*                to that version of the exit.                        */
/*                This is the DEFAULT FUNCTION if no function         */
/*                parameters are entered when the 'ICH' exec is       */
/*                invoked if the user confirms the default.           */
/*                                                                    */
/*   DELETE     - Specifies that the current version of the RACF Exit */
/*                should be deleted from dynamic LPA (CSA) storage.   */
/*                Also, the RACF RCVT pointer to the exit is zerod    */
/*                (unpointed) to remove it from RACF service (until   */
/*                the next IPL or next dynamic LPA update).           */
/*                                                                    */
/*   REMOVE     - Specifies that the module passed should be removed  */
/*                from RACF service (until the next IPL or until the  */
/*                next dynamic update). The RACF RCVT pointer to the  */
/*                the RACF exit is zerod (unpointed).                 */
/*                The RACF exit is not affected in LPA storage.       */
/*                It only resets the RACF RCVT pointer to Zero.       */
/*                                                                    */
/*   REPOINT    - Specifies that the module passed should be repointed*/
/*                with the current version of the exit found in LPA   */
/*                (CSA) storage.  The RACF RCVT point to the exit is  */
/*                updated to point to the current version of the exit */
/*                in LPA storage.  The module itself is not affected  */
/*                in LPA storage.  It only updates the RACF RCVT      */
/*                pointer which points to it in LPA storage.          */
/*                                                                    */
/*                                                                    */
/*   The following two parameters are processed as the TESTPARM       */
/*   literals to be passed to program ICHLOADR as execution-time      */
/*   linkage parameters to make a 'test' pass without updating        */
/*   any pointers.                                                    */
/*                                                                    */
/*   TEST       - Specifies that a TEST execution should be performed */
/*                without any update action.                          */
/*                Performs the same action as the SIMULATE            */
/*                parameter.                                          */
/*                                                                    */
/*   SIMULATE   - Specifies that a TEST execution should be performed */
/*                without any update action.                          */
/*                Performs the same action as the TEST parameter.     */
/*                                                                    */
/*  CUSTOMIZATION:                                                    */
/*                                                                    */
/*     Program ICHLOADR must reside in an APF-authorized Load         */
/*     Library (either PDS or PDSE).  This load library can           */
/*     be in the LinkList or otherwise.  The user has to option       */
/*     in this exec to call program ICHLOADR via a search through     */
/*     the LinkList or via an explicit call to a Load Library.        */
/*                                                                    */
/*     If ICHLOADR is called explicitly from a load library, you      */
/*     must comment out the call thru the Linklist and uncomment      */
/*     the call from a specific library. Do a FIND on the             */
/*     You must change the loadlib name whic contains the ICHLOADR    */
/*     eyecather text "<= CHANGE LOADLIB" to modify the specific      */
/*     load library.                                                  */
/*                                                                    */
/*     Program ICHLOADR must reside in the 'Authorized Programs'      */
/*     section of the IKJTSOxx MVS parmlib member.                    */
/*                                                                    */
/*     It is also recommended that ICHLOADR 'program access           */
/*     control' protected in RACF to restrict its use to only those   */
/*     users who have a legimate need to use it.                      */
/*                                                                    */
/*     The Load Library containing the RACF Exit to fetch for the     */
/*     LPA Update must also be in the APF List.  Normally, this       */
/*     Loadlib would be SYS1.LPALIB (this is the default load         */
/*     library if not specified when the ICH REXX exec is invoked),   */
/*     but it can be overridden with the DA(dsname) parm when ICH     */
/*     is invoked.                                                    */
/*                                                                    */
/*  Documentation for Return Codes and Reason Codes returned from     */
/*  the CSVQUERY and CSVDYLPA macros in program ICHLOADR:             */
/*                                                                    */
/*    CSVQUERY Documentation:                                         */
/*    See IBM Manual "MVS Programming Assembler Services Reference    */
/*    ABEND-HSPSERV SA22-7606-xx" "Contents Supervisor Query Service" */
/*    for documentation on the CSVQUERY macro:                        */
/*                                                                    */
/*     Z/oS 1.9 Link to GA22-7606-08:                                 */
/*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp? */
/*       topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm                   */
/*                                                                    */
/*    CSVDYLPA Documentation:                                         */
/*    See IBM Manual "MVS Authorized Assembler Services Reference     */
/*    ALE-DYN SA22-7609-xx" "CSVDYLPA - Provide Dynamic LPA Services" */
/*    for documentation on the CSVDYLPA macro.                        */
/*                                                                    */
/*     Z/oS 1.9 Link to GA22-7606-08:                                 */
/*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp? */
/*       topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm                */
/*                                                                    */
/*  RCVT DATA AREA:                                                   */
/*                                                                    */
/*  See RCVT dsect macro 'SYS1.MACLIB(ICHPRCVT)'                      */
/*                                                                    */
/*  See IBM Manual "Security Server RACF Data Areas GA22-7680-xx"     */
/*  for the RCVT (RACF Communication Vector Table) offsets:           */
/*                                                                    */
/*    Z/oS 1.9 Link to GA22-7680-09:                                  */
/*      http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  */
/*      topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm                 */
/*                                                                    */
/*                                                                    */
/*    Z/oS 1.11 Link to GA22-7680-11:                                 */
/*      http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp? */
/*      topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm                */
/*                                                                    */
/*                                                                    */
/*  SAMPLE INVOCATIONS OF EXEC ICH:                                   */
/*                                                                    */
/*     ICH ?                                                          */
/*     ICH membername                    (Prompts for Function)       */
/*     ICH membername UPDATE                                          */
/*     ICH membername DA(dsname)                                      */
/*     ICH membername DA(dsname) UPDATE                               */
/*     ICH membername UPDATE DA(dsname)                               */
/*     ICH membername UPDATE TEST                                     */
/*     ICH membername UPDATE SIMULATE                                 */
/*     ICH membername UPDATE DA(dsname) TEST                          */
/*     ICH membername UPDATE DA(dsname) SIMULATE (same as previous)   */
/*     ICH membername DELETE                                          */
/*     ICH membername DELETE TEST                                     */
/*     ICH membername DELETE SIMULATE                                 */
/*     ICH membername REMOVE                                          */
/*     ICH membername REMOVE TEST                                     */
/*     ICH membername REMOVE SIMULATE                                 */
/*     ICH membername REPOINT                                         */
/*     ICH membername REPOINT TEST                                    */
/*     ICH membername REPOINT SIMULATE                                */
/*                                                                    */
/*   RETURN CODES:                                                    */
/*                                                                    */
/*       0  - Successful Call to ICHLOADR                             */
/*       8  - Program ICHLOADR is not APF-Authorized                  */
/*       9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call  */
/*      10  - CSVQUERY for Exit Module failed after CSVDYLPA call     */
/*      11  - Entry Point Address did not change after CSVDYLPA call  */
/*      12  - Miscellaneous Errors                                    */
/*                                                                    */
/**********************************************************************/
Trace "O"
version_level = "V01.01.01"
Arg parms
rtcd         = 0
msg_status   = MSG("OFF")
userid       = Userid()
PARSE source . How_Called .
envirnmt     = SYSVAR("sysenv")
nesting      = SYSVAR("sysnest")
sysicmd      = SYSVAR("sysicmd")
syspcmd      = SYSVAR("syspcmd")
sysscmd      = SYSVAR("sysscmd")
dateg        = Substr(date(u),1,6)||Substr(date(s),1,4)

sysid        = MVSVAR("sysname")

member       = ""
bad_member   = ""
dsname       = "SYS1.LPALIB"       /* Default RACF Exit Load Library */
function     = ""
function_was = ""
testparm     = ""
nbr_words    = WORDS(parms)
residue      = ""
curr_parm    = ""
dsn_parm     = ""
debug        = ""

member       = WORD(parms,1)
If member    = ""  Then member = "?"

If LENGTH(member) = 8 & SUBSTR(member,1,3) = "ICH"   Then Nop
Else member = "?"

Do i = 1 to nbr_words    /* Parse through the execution parameters */
  curr_parm = WORD(parms,i)
  PARSE var curr_parm  "DA("  parse_value1 ")"
  PARSE var curr_parm  "DSN(" parse_value2 ")"

  SELECT
     WHEN ABBREV("DEBUG",curr_parm,3) = 1                     Then Do
          debug = "DEBUG"
          Iterate
        End
     WHEN parse_value1 <> "" &  dsn_parm = ""                 Then Do
          dsn_parm = "Y"
          dsname  = parse_value1
          dsname  = STRIP(dsname,both,"'") /* remove enclosed tics   */
          dsname  = STRIP(dsname,both,'"') /* remove enclosed quotes */
          Iterate
        End
     WHEN parse_value2 <> "" &  dsn_parm = ""                 Then Do
          dsn_parm = "Y"
          dsname  = parse_value2
          dsname  = STRIP(dsname,both,"'") /* remove enclosed tics   */
          dsname  = STRIP(dsname,both,'"') /* remove enclosed quotes */
          Iterate
        End
     WHEN (curr_parm = "UPDATE" | curr_parm = "DELETE" | ,
           curr_parm = "REMOVE" | curr_parm = "REPOINT") & ,
           function = ""                                      Then Do
              function     = curr_parm
              Iterate
        End
     WHEN (curr_parm = "TEST" | curr_parm = "SIMULATE") & ,
           testparm = ""                                      Then Do
              testparm     = curr_parm
              Iterate
        End
     OTHERWISE  Do  /* Pick up any residue (mispelled parms)  */
        If residue = "" & LENGTH(curr_parm) <> 8 & ,
           SUBSTR(curr_parm,1,3) <> "ICH"        & ,
           SUBSTR(curr_parm,1,3) <> "IRR"                     Then Do
           residue = curr_parm
           Iterate
        End
     End
  End
End

If debug = "DEBUG"  Then Do
   Trace "I"
End

/*********************************************************/
/* Assume that any misspelled parm is the function code  */
/*********************************************************/

function_was = function
If function  = "" & residue <> ""  Then function = residue

Call Get_RCVT_Offset

Check_Member_Name:

If member = "?" | bad_member= "Y"  Then Do
   Clear
   Say "ICH exec invoked on" dateg "at" time() "on System" sysid
   Say "                                                            "
   Say "     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          "
   Say "      I   C     H   H      E      X X  E     C              "
   Say "      I   C     HHHHH      EEEE    X   EEEE  C              "
   Say "      I   C     H   H      E      X X  E     C              "
   Say "     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          "
   Say "                                                            "
   Say ;
   Say "RACF Exit Member Name Entered =>" member
   Say ;
   Say "RACF Exit Member Name Was Omitted or was Invalid ...        "
   Say ;
   Say "ICH   membername     "
   Say ;
   Say "ICH   ?              "
   Say "ICH   ICHAUTAB       "
   Say "ICH   ICHCNX00       "
   Say "ICH   ICHDEX01       "
   Say "ICH   ICHDEX11       "
   Say "ICH   ICHNCV00       "
   Say "ICH   ICHPWX01       "
   Say "ICH   ICHPWX11       "
   Say "ICH   ICHRCX01       "
   Say "ICH   ICHRCX02       "
   Say "ICH   ICHRDX01       "
   Say "ICH   ICHRDX02       "
   Say "ICH   ICHRFX01       "
   Say "ICH   ICHRFX02       "
   Say "ICH   ICHRFX03       "
   Say "ICH   ICHRFX04       "
   Say "ICH   ICHRIN03       "
   Say "ICH   ICHRIX01       "
   Say "ICH   ICHRIX02       "
   Say "ICH   ICHRLX01       "
   Say "ICH   ICHRLX02       "
   Say ;
   Say "Enter RACF Exit Member Name"
   Say ;
   member = ""
   Pull member
   Say ;
   Select
      When member = ""                       Then Signal End_Up
      When ABBREV("QUIT",member,4) = 1       Then Signal End_Up
      When ABBREV("EXIT",member,4) = 1       Then Signal End_Up
      When ABBREV("END",member,3) = 1        Then Signal End_Up
      Otherwise Nop
   End
   Call Get_RCVT_Offset
   If bad_member= "Y"      Then Signal Check_Member_Name
   parms = member" "parms
End

Signal Check_Function

Get_RCVT_Offset:   /* Member Edit Subroutine and RCVT Offset Load   */

rcvt_offset = "????"
If member = "ICHAUTAB" Then rcvt_offset = "000000E8"X /*10?+3E0?+E8 */
If member = "ICHCNX00" Then rcvt_offset = "000000B4"X /*10?+3E0?+B4 */
If member = "ICHDEX01" Then rcvt_offset = "000001A0"X /*10?+3E0?+1A0*/
If member = "ICHDEX11" Then rcvt_offset = "000002DC"X /*10?+3E0?+2DC*/
If member = "ICHNCV00" Then rcvt_offset = "000001A4"X /*10?+3E0?+1A4*/
If member = "ICHPWX01" Then rcvt_offset = "000000EC"X /*10?+3E0?+EC */
If member = "ICHPWX11" Then rcvt_offset = "000001DC"X /*10?+3E0?+1DC*/
If member = "ICHRCX01" Then rcvt_offset = "0000001C"X /*10?+3E0?+1C */
If member = "ICHRCX02" Then rcvt_offset = "000000A4"X /*10?+3E0?+A4 */
If member = "ICHRDX01" Then rcvt_offset = "00000020"X /*10?+3E0?+20 */
If member = "ICHRDX02" Then rcvt_offset = "0000017C"X /*10?+3E0?+17C*/
If member = "ICHRFX01" Then rcvt_offset = "000000C8"X /*10?+3E0?+C8 */
If member = "ICHRFX02" Then rcvt_offset = "000001AC"X /*10?+3E0?+1AC*/
If member = "ICHRFX03" Then rcvt_offset = "0000014C"X /*10?+3E0?+14C*/
If member = "ICHRFX04" Then rcvt_offset = "000002D8"X /*10?+3E0?+2D8*/
If member = "ICHRIN03" Then rcvt_offset = "0000019C"X /*10?+3E0?+19C*/
If member = "ICHRIX01" Then rcvt_offset = "00000018"X /*10?+3E0?+18 */
If member = "ICHRIX02" Then rcvt_offset = "000000A0"X /*10?+3E0?+A0 */
If member = "ICHRLX01" Then rcvt_offset = "000000CC"X /*10?+3E0?+CC */
If member = "ICHRLX02" Then rcvt_offset = "000000D0"X /*10?+3E0?+D0 */

bad_member     = ""
If rcvt_offset = "????"  Then Do
   bad_member  = "Y"
End

Return

Check_Function:

If function  = "" | ,
   (function <> "UPDATE" & function <> "DELETE" & ,
    function <> "REMOVE" & function <> "REPOINT")    Then Do
   Clear
   Say "ICH exec invoked on" dateg "at" time() "on System" sysid
   Say "                                                            "
   Say "     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          "
   Say "      I   C     H   H      E      X X  E     C              "
   Say "      I   C     HHHHH      EEEE    X   EEEE  C              "
   Say "      I   C     H   H      E      X X  E     C              "
   Say "     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          "
   Say "                                                            "
   Say "FUNCTION Value Entered =>" function
   Say ;
   Say "FUNCTION Parameter Was Omitted or was Invalid ...           "
   Say ;
   Say "Enter function (UPDATE | DELETE | REMOVE | REPOINT)    OR   "
   Say ;
   Say "Enter a NULL ENTRY to DEFAULT to FUNCTION=UPDATE       OR   "
   Say ;
   Say "Enter ""QUIT"" OR ""END"" To Terminate this exec.           "
   Say ;
   function = ""
   Pull function
   Say ;
   Select
      When SUBSTR(function,1,4) = "    "    Then function = "UPDATE"
      When function = ""                    Then function = "UPDATE"
      When ABBREV("QUIT",function,4) = 1    Then Signal End_Up
      When ABBREV("EXIT",function,4) = 1    Then Signal End_Up
      When ABBREV("END",function,3) = 1     Then Signal End_Up
      When function = "UPDATE"              Then Nop
      When function = "DELETE"              Then Nop
      When function = "REMOVE"              Then Nop
      When function = "REPOINT"             Then Nop
      Otherwise                             Signal Check_Function
   End
   If function_was = "" Then parms = parms" "function
End

If envirnmt = "BACK" Then Do                 /* Background Call ?     */
   "ALLOC FI(TEMP1)    DA(*) REUSE"
   "ALLOC FI(SYSPRINT) DA(*) REUSE"
   Signal Alloc_Sysin_File
End

If SYSVAR("sysispf") <> "ACTIVE"  Then Do
 /* Make a recursive call to this exec to invoke the ISPF environment */
   "ISPF CMD(%ICH" parms ")"
   Return 0
End

"ALLOC FI(SYSPRINT) NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS",
       "RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)"
alloc1_rc = rc

If alloc1_rc <> 0         Then Do
   Say "ICH error allocating SYSPRINT file in exec 'ICH'"
   rtcd = 12
   Signal End_Up
End

"ALLOC FI(TEMP1)    NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS",
       "RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)"
alloc2_rc = rc

If alloc2_rc <> 0         Then Do
   Say "ICH error allocating TEMP1 file in exec 'ICH'"
   rtcd = 12
   Signal End_Up
End

"ALLOC FI(TEMP2)    NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS",
       "RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)"
alloc3_rc = rc

If alloc3_rc <> 0         Then Do
   Say "ICH error allocating TEMP2 file in exec 'ICH'"
   rtcd = 12
   Signal End_Up
End

"ALLOC FI(BROWSER)  NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS",
       "RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)"
alloc4_rc = rc

If alloc4_rc <> 0         Then Do
   Say "ICH error allocating BROWSER file in exec 'ICH'"
   rtcd = 12
   Signal End_Up
End

Alloc_Sysin_File:

"ALLOC FI(SYSIN) NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS",
       "RECFM(F B) LRECL(100) BLKSIZE(0) DSORG(PS)"
alloc_sysin_rc = rc
If alloc_sysin_rc <> 0                    Then Do
   Say "ICH error allocating SYSIN file in exec 'ICH'"
   rtcd = 12
   Signal End_Up
End

Signal Get_System_Information

Get_System_Information:

rcvt_offset_dec = C2D(rcvt_offset,8)
rcvt_offset_hex = D2X(rcvt_offset_dec,8)

@cvt         = STORAGE(00000010,4)                   /* Address X'10' */
@cvtd        = C2D(STORAGE(00000010,4))              /* 16 in decimal */

weekday      = DATE(W)
year         = SUBSTR(DATE(S),1,4)
month        = DATE(M)
day          = SUBSTR(DATE(S),7,2)
juldate      = LEFT(year||"."SUBSTR(DATE(J),3,3),8," ")
time         = LEFT(TIME(),8," ")

smca_ptr     = C2D(STORAGE(D2X(@cvtd + 197),3))
smca_sysid   = STORAGE(D2X(C2D(STORAGE(D2X(@cvtd + 197),3))+16),4)
grs_sysid    = STORAGE(D2X(@cvtd + 340),8)

@sysn  = STORAGE(D2X(@cvtd+340),8)      /* Get system name           */
@ucba  = STORAGE(D2X(@cvtd+48),4)       /* Get SYSRES ucb address    */
@ucbs  = STORAGE(C2X(@ucba),40)         /* Get UCB                   */
@sysa  = C2X(SUBSTR(@ucbs,5,2))         /* Get SYSRES unit address   */
@sysv  = SUBSTR(@ucbs,29,6)             /* Get SYSRES volser         */
@ecvt  = STORAGE(D2X(@cvtd+140),4)      /* Get ECVT address          */
@lprm  = STORAGE(D2X(C2D(@ecvt)+160),8) /* Get IPL LOADPARM          */
@smca  = STORAGE(D2X(@cvtd+197),3)      /* Get SMCA address          */
@ipld  = STORAGE(D2X(C2D(@smca)+340),4) /* Get IPL date X'0cyydddF'  */
@ipld  = SUBSTR(c2x(@ipld),3,5)         /* yyddd                     */

@ipldg = DATE(S,@ipld,J)     /* Get Stardard date format yyyymmdd */
@ipldg = SUBSTR(@ipldg,5,2)"/"SUBSTR(@ipldg,7,2)"/"||,
          SUBSTR(@ipldg,1,4)"."SUBSTR(@ipld,3,3)
@ipldw = DATE(W,@ipld,J)          /* Get weekday in English          */
@ipldm = DATE(M,@ipld,J)          /* Get month in English            */

@iplt  = STORAGE(D2X(C2D(@smca)+336),4) /* Get IPL time              */
@iplt  = C2D(@iplt)
@iplh  = RIGHT(trunc(@iplt / (60*60*100)),2,'0')
@iplt  = @iplt - (@iplh * 60*60*100)
@iplm  = RIGHT(TRUNC(@iplt / (60*100)),2,'0')
@iplt  = @iplt - (@iplm * 60*100)
@ipls  = RIGHT(TRUNC(@iplt / 100),2,'0')
@iplt  = RIGHT(TRUNC(@iplt - (@ipls * 100)),2,'0')

lit1         = "     "||weekday
lit2         = "   "||month day", "year
lit3         = "      "||sysid
lit4         = "   "||LEFT(smca_sysid"/"grs_sysid,13," ")
lit5         = "IPL Date:"
lit6         = @ipldg
lit7         = LEFT(member,8," ")

member       = LEFT(member,8," ")
dsname       = LEFT(dsname,44," ")
function     = LEFT(function,8," ")
If testparm  <> "" Then testparm = LEFT(testparm,8," ")

/*********************************************************************/
/*  SYSIN Record Format (One Record Input Lrecl 100 FB):             */
/*  Input to program ICHLOADR.                                       */
/*     Bytes  1-8   RACF Module to be updated or removed             */
/*     Byte     12  Blank                                            */
/*     Bytes 10-53  Dataset Name to obtain Module (44 CHAR)          */
/*     Byte     54  Blank                                            */
/*     Bytes 55-58  Rcvt Offset (Fullword Binary)                    */
/*     Byte     59  Blank                                            */
/*     Bytes 60-67  Function    (8 bytes CHAR)                       */
/*     Bytes 68-100 Blank (Reserved for future) (33 chars)           */
/*********************************************************************/

sysin.1   = COPIES(" ",100)
sysin.1   = OVERLAY(member,sysin.1,1,8)
sysin.1   = OVERLAY(dsname,sysin.1,10,44)
sysin.1   = OVERLAY(rcvt_offset,sysin.1,55,4)
sysin.1   = OVERLAY(function,sysin.1,60,8)

"EXECIO 1 DISKW SYSIN    (STEM sysin. FINIS " /* Close SYSIN File */

"DELSTACK"
"NEWSTACK"

Queue " "
Queue "  "juldate"         III   CCCC H   H     DYNAMIC RACF    " lit1
Queue "  "time"          I   C     H   H     EXIT UPDATE     " lit2
Queue "                    I   C     HHHHH     ASSISTANCE FOR    " lit3
Queue "  "lit5"         I   C     H   H      MODULE           " lit4
Queue " "lit6"    III   CCCC H   H     "lit7"        "
Queue " "
Queue " ICH      - Module      =" member
Queue " ICH      - Dsname      =" STRIP(dsname)
Queue " ICH      - Function    =" function
Queue " ICH      - RCVT Offset =" rcvt_offset_hex
If testparm <> "" Then Do
  Queue " ICH      - Test Parm   =" testparm
End
Queue ""

"EXECIO * DISKW TEMP1    (FINIS "   /* Write to and Close TEMP1 File */
"DELSTACK"

token          = juldate

/*********************************************************************/
/*  Construct Linkage Parameter for program ICHLOADR.                */
/*********************************************************************/

ichloadr_parms = token" "testparm

/********************************************************************/
/*  Uncomment this CALL statement if an explicit call to a          */
/*     load library is used.                                        */
/********************************************************************/
/*
"CALL 'MY.APF.LOADLIB(ICHLOADR)'",             /* <= CHANGE LOADLIB */
      "'"ichloadr_parms"'"
*/

/*********************************************************************/
/*  Issue a Call to ICHLOADR from the LinkList search.               */
/*********************************************************************/

"CALL *(ICHLOADR)",                            /* <= LINKLIST CALL  */
      "'"ichloadr_parms"'"

ichloadr_rc  = rc

If ichloadr_rc = -1  Then Do
   Say   " "
   Say   " ICH      - Program ICHLOADR abended for some reason "
   Say   " ICH      - See the SYSLOG for more information      "
   Say   " "
End

"NEWSTACK"

Queue " ICHLOADR - RETURN CODE =" ichloadr_rc
Queue " "
Queue ""

"EXECIO * DISKW TEMP2    (FINIS "   /* Write to and Close TEMP2 File */
"DELSTACK"
"NEWSTACK"

/*
"EXECIO 0 DISKR SYSPRINT (OPEN  "
"EXECIO 0 DISKR TEMP1    (OPEN  "
"EXECIO 0 DISKR TEMP2    (OPEN  "
*/

"EXECIO * DISKR TEMP1    (FINIS "  /* Read TEMP1 File and queue lines */
"EXECIO * DISKR SYSPRINT (FINIS "  /* Read SYSPRINT   and queue lines */
"EXECIO * DISKR TEMP2    (FINIS "  /* Read TEMP2 File and queue lines */
Queue ""
"EXECIO * DISKW BROWSER  (FINIS "  /* Write all lines to BROWSER FIle */
"DELSTACK"

If envirnmt = "BACK" Then Signal End_Up      /* Background Call ?  */

/*********************************************************************/
/*  Browse all of the message lines in ISPF Browse mode.             */
/*********************************************************************/

Address ISPEXEC "LMINIT DATAID(DID) DDNAME(BROWSER)"
Address ISPEXEC "ISPEXEC BROWSE DATAID("did")"         /* ISPF Browse */
Address ISPEXEC "LMFREE DATAID("did")"

End_Up:
"FREE FI(TEMP1 TEMP2 SYSPRINT BROWSER SYSIN)"
Return rtcd
