* ------------------------------------------------------------------- *
*                                                                     *
*  III   CCCC H   H L     OOOOO   A   DDDD  RRRR                      *
*   I   C     H   H L     O   O  A A  D   D R   R                     *
*   I   C     HHHHH L     O   O A   A D   D RRRR                      *
*   I   C     H   H L     O   O AAAAA D   D R  R                      *
*  III   CCCC H   H LLLLL OOOOO A   A DDDD  R   R                     *
*                                                                     *
*      AUTHOR: TKMILLE                                                *
*  CREATED ON: 01/07/2010                                             *
*  UPDATED ON: 01/21/2010                                             *
*                                                                     *
*   PURPOSE:                                                          *
*                                                                     *
*      This program was written to provide the capability to          *
*      dynamically update, delete, and remove RACF Exits              *
*      without having to IPL.                                         *
*                                                                     *
*      The caller provides the Exitname, the dataset to fetch         *
*      the module from, and the offset in the RCVT for the            *
*      exit to update the RCVT pointer to the exit.                   *
*                                                                     *
*      This program is used in conjunction with Rexx Exec             *
*      "ICH" which obtains and passes the RCVT offset as well         *
*      as the exit name and the name of the library that it is        *
*      to be fetched from to load into CSA storage.                   *
*                                                                     *
*      This program will perform any of these four functions.         *
*                                                                     *
*        1) UPDATE - This function loads a new version of a RACF      *
*           exit into dynamic LPA (CSA memory) (same as the           *
*           SETPROG LPA,ADD command).  It also repoints RACF to       *
*           use the updated module (updates the exit's RCVT pointer). *
*           The user must specify the load library to fetch the exit  *
*           from to load into dynamic LPA (CSA).  The 'ICH' exec      *
*           will default to load library SYS1.LPALIB unless           *
*           specified otherwise when the exec is invoked.             *
*           (Does the same function as the SETPROG LPA,ADD MVS command*
*           except that it also updates the RACF RCVT pointer which   *
*           points to the updated version of the exit in LPA (CSA)    *
*           storage.)                                                 *
*                                                                     *
*           If none of these three function values are passed as      *
*           parameters to the 'ICH' exec, the exec will default       *
*           to pass function 'UPDATE' to this program.                *
*                                                                     *
*        2) DELETE - This function deletes a RACF exit from dynamic   *
*           LPA (same as SETPROG LPA,DELETE command) and then also    *
*           loads zeros into the RACF RCVT pointer to indicate to     *
*           RACF that the exit is not being used (until the next      *
*           IPL or next dynamic update).                              *
*           (Does the same function as the SETPROG LPA,DELETE         *
*           MVS command except that it also unpoints (zeros) the      *
*           RACF RCVT pointer which points to it in LPA storage.)     *
*                                                                     *
*        3) REMOVE - This function only loads zeros into the          *
*           RACF RCVT pointer for the RACF Exit to indicate to        *
*           RACF that the exit is not being used (until the next      *
*           IPL or next dynamic update). It does not affect the       *
*           module itself in LPA storage. It only unpoints (zeros)    *
*           the RACF RCVT pointer.                                    *
*                                                                     *
*        4) REPOINT - Specifies that the module passed should be      *
*           repointed with the current version of the exit found in   *
*           LPA (CSA) storage.  The RACF RCVT point to the exit is    *
*           updated to point to the current version of the exit       *
*           in LPA storage.  It does not affect the module itself     *
*           in LPA storage.  It only updates the RCVT pointer to      *
*           point to it.  This function is the opposite of the        *
*           REMOVE function and can be used subsequent to issuing     *
*           the REMOVE function to put the exit back into service.    *
*                                                                     *
*      R1 on entry points to the linkage parm address.                *
*      The linkage parm address points to a 11 byte (9 w/o ll) or a   *
*      19 byte linkage parm (17 bytes w/o including ll).              *
*                                                                     *
*      EXECUTION PARMS:                                               *
*         Linkage Parm Format:                                        *
*          Bytes  1-2  Length of the execution parm (ll) (hw)         *
*          Bytes  3-10 Call Token Passed from ICH (8 characters)      *
*          Byte  11    Blank                                          *
*          Bytes 12-19 Optional TESTPARM (8 characters) Not required. *
*                Test Parm Values:                                    *
*                   TEST - Only run a test pass - no update.          *
*                   SIMULATE - same as TEST     - no update.          *
*                                                                     *
*      SYSIN (INPUT) PARMS (Lrecl 100):                               *
*                                                                     *
*        RACF Exit Module Name to be processed -  8 bytes CHAR        *
*         (Must be padded with trailing spaces)                       *
*        Dataset name Containing module update - 44 bytes CHAR        *
*         (Must be padded with trailing spaces)                       *
*         (This parameter is only needed for the UPDATE function.)    *
*        RCVT Offset Value for Module          -  Fullword binary     *
*        Function Values (Default is UPDATE):  -  8 bytes CHAR        *
*             UPDATE - Update the Exit in dynamic LPA                 *
*             REMOVE - Zero the RCVT Pointer. Removes exit from       *
*                      RACF service w/o deleting the LPA module       *
*                      from dynamic LPA storage.                      *
*             DELETE - Delete the Exmit Module and Zero the RCVT      *
*                      Pointer.                                       *
*                                                                     *
*        SYSIN Record Format (One Record Input Lrecl 100 FB):         *
*           Bytes  1-8   RACF Module to be updated or removed         *
*           Byte     12  Blank                                        *
*           Bytes 10-53  Dataset Name to obtain Module (44 CHAR)      *
*           Byte     54  Blank                                        *
*           Bytes 55-58  Rcvt Offset (Fullword BInary)                *
*           Byte     59  Blank                                        *
*           Bytes 60-67  Function    (8 bytes CHAR)                   *
*           Bytes 68-100 Blank (Reserved for future) (33 chars)       *
*                                                                     *
*      REGISTER USAGE:                                                *
*        R0   RETURNS THE CSVDYLPA REASON CODE TO CALLER              *
*        R1   WORK REGISTER - HAS PARMLIST ADDRESS ON ENTRY           *
*        R2   WORK REGISTER                                           *
*        R3   MAPS CVT                                                *
*        R4   MAPS RCVT                                               *
*        R5   MAPS LPMEA                                              *
*        R6   SAVES CSVDYLPA RETURN CODE                              *
*        R7   SAVES CSVDYLPA REASON CODE                              *
*        R8   WORK REGISTER                                           *
*        R9   NOT USED                                                *
*        R10  NOT USED                                                *
*        R11  SECOND PROGRAM BASE REGISTER                            *
*        R12  PROGRAM BASE REGISTER                                   *
*        R13  SAVE AREA                                               *
*        R14  RETURN ADDRESS                                          *
*        R15  RETURNS THE CSVDYLPA RETURN CODE                        *
*                                                                     *
*   RETURN CODES:                                                     *
*                                                                     *
*        0  - Successful Call to ICHLOADR                             *
*        8  - Program ICHLOADR is not APF-Authorized                  *
*        9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call  *
*       10  - CSVQUERY for Exit Module failed after CSVDYLPA call     *
*       11  - Entry Point Address did not change after CSVDYLPA call  *
*       12  - Miscellaneous Errors (all other errors)                 *
*                                                                     *
*   Reg 15 has the return code from the CSVDYLPA macro call           *
*   Reg  0 has the reason code from the CSVDYLPA macro call           *
*                                                                     *
*   OUTPUT FILES:                                                     *
*                                                                     *
*      SYSPRINT - Lrecl 80 FB (Report File)                           *
*                                                                     *
*   MACROS USED:                                                      *
*                                                                     *
*   STORAGE  (Obtains virtual storage for reentrant programs)         *
*   TESTAUTH (Checks APF Authorization)                               *
*   CSVQUERY (Returns information about a load module)                *
*   CSVDYLPA (Updates a module in LPA - same as SETPROG LPA,ADD )     *
*            (Deletes a module in LPA - same as SETPROG LPA,DELETE )  *
*   MODESET  (Changes program key mode)                               *
*                                                                     *
*   TABLES/DSECTS/PARAMETER LISTS USED:                               *
*                                                                     *
*   CSVLPRET  - Parameter List for the CSVDYLPA macro                 *
*   CVT       - Communications Vector Table                           *
*   ICHPRCVT  - RCVT (RACXF Communication Vector Table) Dsect         *
*   IEZWPL    - WTO parameter list                                    *
*                                                                     *
*                                                                     *
*   AUTHORIZATIONS:                                                   *
*                                                                     *
*   Program ICHLOADR must reside in an APF-Authorized libary          *
*   and be linked as an authorized module.                            *
*                                                                     *
*   The Load Library containing the RACF Exit to fetch for the        *
*   LPA Update must also be in the APF List.  Normally, this          *
*   Loadlib would be SYS1.LPALIB (this is the default load            *
*   library if not specified when the ICH REXX exec is invoked),      *
*   but it can be overridden with the DA(dsname) parm when ICH        *
*   is invoked.                                                       *
*                                                                     *
*   Program ICHLOADR must reside in the IKJTSOxx 'Authorized          *
*   program names' table.                                             *
*                                                                     *
*   Program ICHLOADR SHOULD be program control protected to prevent   *
*   unauthorized user access to this program:                         *
*                                                                     *
*   RDEFINE PROGRAM  ICHLOADR                                       + *
*           UACC(NONE)                                              + *
*           DATA('RACF PROFILE FOR RACF UTILITY PROGRAM ICHLOADR')  + *
*           ADDMEM ('SYS1.MYAPF.LOAD.LIBRARY'//PADCHK)              + *
*           OWNER(OWNERID)          /* <= CHANGE THIS OWNERID */      *
*                                                                     *
*   SETROPTS WHEN(PROGRAM) REFRESH                                    *
*                                                                     *
*   PERMIT ICHLOADR  CLASS(PROGRAM)  ACCESS(READ)                   + *
*          ID(USERID1,USERID2,USERID3)    /* <= CHANGE USERIDS */     *
*                                                                     *
*   SETROPTS WHEN(PROGRAM) REFRESH                                    *
*                                                                     *
*   Documentation Helps:                                              *
*                                                                     *
*   CSVQUERY Documentation:                                           *
*   See IBM Manual "MVS Programming Assembler Services Reference      *
*   ABEND-HSPSERV SA22-7606-xx" "Contents Supervisor Query Service"   *
*   for documentation on the CSVQUERY macro:                          *
*                                                                     *
*     Z/oS 1.9 Link to GA22-7606-08:                                  *
*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *
*       topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm                    *
*                                                                     *
*   CSVDYLPA Documentation:                                           *
*   See IBM Manual "MVS Authorized Assembler Services Reference       *
*   ALE-DYN SA22-7609-xx" "CSVDYLPA - Provide Dynamic LPA Services"   *
*   for documentation on the CSVDYLPA macro.                          *
*                                                                     *
*     Z/oS 1.9 Link to GA22-7606-08:                                  *
*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *
*       topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm                 *
*                                                                     *
*   Interesting Note from IBM about Z/oS V1R11:                       *
*                                                                     *
*   "z/OS V1R11 Communications Server Scalability, performance,       *
*   constraint relief, and accelerator"                               *
*                                                                     *
*   http://publib.boulder.ibm.com/infocenter/ieduasst/stgv1r0/topic/  *
*   com.ibm.iea.commserv_v1/commserv/1.11z/hardware/perf.pdf          *
*                                                                     *
*   "z/OS V1R11 Communications Server now uses the z/OS MVS           *
*   CSVDYLPA service to load its IPL load modules.                    *
*   Using CSVDYLPA gives the z/OS MVS Contents Supervisor             *
*   awareness of the location and attributes of z/OS Communications   *
*   Server load modules and entry points.                             *
*   Vendor utility functions intended to map z/OS Communications      *
*   Server code can now use z/OS MVS services CSVQUERY or CSVINFO     *
*   to obtain the location of z/OS Communications Server load         *
*   modules and entry points.                                         *
*   The primary reason for such mapping is to perform detailed        *
*   performance analysis."                                            *
*                                                                     *
*   RCVT DATA AREA (ICHPRCVT Dsect):                                  *
*                                                                     *
*   See IBM Manual "Security Server RACF Data Areas GA22-7680-xx"     *
*   for the RCVT (RACF Communication Vector Table) offsets:           *
*                                                                     *
*     Z/oS 1.9 Link to GA22-7680-09:                                  *
*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *
*       topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm                 *
*                                                                     *
*     Z/oS 1.11 Link to GA22-7680-11:                                 *
*       http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp? *
*       topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm                *
*                                                                     *
* ------------------------------------------------------------------- *
ICHLOADR CSECT
ICHLOADR AMODE 31
ICHLOADR RMODE 24
         SAVE  (14,12),,ICHLOADR_ASSEMBLED_ON_&SYSDATE._&SYSTIME
         LR    R12,R15             Load entry address
         LA    R11,2048(,R12)      Chain R11 to R12 Program Base
         LA    R11,2048(,R11)
         USING ICHLOADR,R12,R11    Declare Program Base Registers
         LR    R8,R1               Preserve passed parmlist address
         XR    R7,R7               clear register
         BSM   R7,0                obtain caller's AMODE bit
         LR    R6,R13              Store SAVEAREA Backward link
         L     R3,=A(STORSIZE)     Size of storage to get and clear
         STORAGE OBTAIN,LENGTH=(R3),LOC=(BELOW)
         ST    R1,8(,R13)          Set SAVEAREA forward link
         LR    R13,R1              Address of obtained area
         USING STORAREA,R13        Addressability to obtained area
         LR    R0,R13              Address of target of move (OBTND)
         L     R1,=A(STORSIZE)     Length of the target of move
         XR    R14,R14             From address (irrelevant with len=0)
         XR    R15,R15             pad/length to propagate in odd reg
         MVCL  R0,R14          Propagate binary zeros in obtained area
         ST    R6,4(,R13)          Set SAVEAREA backward link
         XR    R6,R6               Zero Return Code
         XR    R7,R7               Zero Reason Code
         ST    R8,PARMADDR         Save parmlist address
         B     HOUSKEEP
***********************************************************************
MOD_LEVEL  DC  CL9'V01.01.01'      PROGRAM VERSION RELEASE MOD. LEVEL
***********************************************************************
HOUSKEEP DS    0H
         MVC   HEADING1(HEADING1L),BLANKLIN     Initialize
         MVC   H1LIT1,=CL11'ICHLOADR - '        Initialize
         MVC   H1VERS,MOD_LEVEL          Maintenance Level Vers.Rel.Mod
         TIME  DEC ,                     Get Current Date and Time
         STM   R0,R1,CURRTIME            Store Current Time and Juldate
         MVI   CURRDATE+0,X'20'
         UNPK  JULIANDT(7),CURRDATE(4)   Store the Julian Date
         OI    JULIANDT+6,X'F0'          Fix the Sign
         MVC   H1DATE(4),JULIANDT
         MVI   H1DATE+4,C'.'
         MVC   H1DATE+5(3),JULIANDT+4
         MVC   DATEXXXX(7),JULIANDT
         MVC   STORTIME,CURRTIME
         MVI   STORTMSG,X'0F'
         UNPK  TIME9(9),STORTIME(5)      Unpack the time
         MVC   DISPTMHH(2),TIME9
         MVI   DISPTMC1,C':'
         MVC   DISPTMMM(2),TIME9+2
         MVI   DISPTMC2,C':'
         MVC   DISPTMSS(2),TIME9+4
         MVC   H1TIME(8),DISPTIME
         MVI   MSGCC,C' '                    Blank Leading Char of Msg
         MVC   WKOPENCL(OPENIL),OPENI        Relocate OPEN Parmlist
         MVC   SYSIN(SYSINIL),SYSINI         Relocate SYSIN    DCB
         MVC   SYSPRINT(SYSPRINL),SYSPRINI   Relocate SYSPRINT DCB
         LA    R3,SYSPRINT                   DCB to open
         LA    R4,WKOPENCL                   Open/Close work area
         OPEN  ((R3),OUTPUT),MODE=31,MF=(E,(R4))   Open SYSPRINT DCB
         LTR   R15,R15                       Good Open ?
         BZ    DHEADING                         Yes
         WTO   'ICHLOADR - Could not open SYSPRINT file',ROUTCDE=(11)
         LA    R6,12
         B     RETURN                        Return
DHEADING DS    0H
         MVI   SYSPRTOP,C'Y'                 Indicate File is Open
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA,HEADING1              Format Heading Line
         PUT   SYSPRINT,MSGLINE              Output Heading Line
**********************************************************************
*   Pick up the linkage parameters
**********************************************************************
         STM   R15,R1,SAVE3        Save 3 registers and test if APF
         XR    R15,R15                  authorized.
**********************************************************************
*   Is this program being called from an authorized Library?
**********************************************************************
         TESTAUTH FCTN=1              Are we APF authorized?
         LTR   R15,R15                Test the return code.
         BE    GETPARMS                 Yes authorized - Continue on
         PUT   SYSPRINT,BLANKLIN      Output a Blank Line
         MVC   MSGAREA,NOTAUTHD       Format Not-Authorized Msg
         PUT   SYSPRINT,MSGLINE       Output Msg
         LA    R6,8                   Set Not-Authorized Return Code
         B     RETURN                 Return
GETPARMS DS    0H
         LM    R15,R1,SAVE3        Restore registers used by TESTAUTH.
         L     R1,PARMADDR         Point to parmlist address
         L     R1,0(,R1)           Point to the Linkage parm address
         MVC   LL,0(R1)                    Save the Linkage Parm Length
         CLC   LL,=H'8'                    Linkage Parm < 8 bytes?
         BL    LINKERR                       No - Bad Linkage Parm
         MVC   TOKEN(L'TOKEN),2(R1)        Get the ICH Call Token
         CLC   LL,=H'13'                   Linkage Parm < 13 bytes?
         BL    CHKTOKEN                      No - Bad Linkage Parm
         MVC   TESTPARM,BLANKLIN           Initialize Testparm
         MVC   TESTPARM(L'TESTMODE),11(R1) Get More Execution Parm
         CLC   TESTMODE,TESTPARM           Have Test Parm ?
         BE    TESTSIML                       Yes - In Test Mode
         CLC   LL,=H'17'                   Linkage Parm < 17 bytes?
         BL    LINKERR                       No - Bad Linkage Parm
         MVC   TESTPARM(L'TESTPARM),11(R1) Get More Ewecution Parm
         CLC   TESTPARM,SIMUMODE           Have Simulate Parm ?
         BNE   LINKERR                        No  - Error
         MVC   TESTPARM,BLANKLIN           Initialize Testparm
         MVC   TESTPARM(L'TESTMODE),TESTMODE  Yes - Set Test Mode
         B     TESTSIML                       Yes - In Test Mode
LINKERR  DS    0H
         PUT   SYSPRINT,BLANKLIN           Output a Blank Line
         MVC   MSGAREA,INVLINKM            Format Invalid Link Msg
         PUT   SYSPRINT,MSGLINE            Output Msg
         LA    R6,12
         B     RETURN
TESTSIML DS    0H
         PUT   SYSPRINT,BLANKLIN           Output a Blank Line
         MVC   MSGAREA,TSTSIMSG            Format Test/Simulate Msg
         PUT   SYSPRINT,MSGLINE            Output Msg
CHKTOKEN DS    0H
**********************************************************************
*   Make sure that Exec 'ICH' is calling this program by checking
*   the exection-time parm token.  Can't be too careful you know.
**********************************************************************
         CLC   H1DATE,TOKEN               Was I called by Exec ICH ?
         BE    GETSYSIN                       Yes - Continue
         PUT   SYSPRINT,BLANKLIN          Output a Blank Line
         MVC   MSGAREA,INVCALLM           Format Invalid-Call Msg
         PUT   SYSPRINT,MSGLINE           Output Msg
         LA    R6,12
         B     RETURN
GETSYSIN DS    0H
**********************************************************************
*   Input the SYSIN record Input parameters.
**********************************************************************
         LA    R3,SYSIN                    DCB to open
         LA    R4,WKOPENCL                 Open/Close work area
         OPEN  ((R3),INPUT),MODE=31,MF=(E,(R4))   Open SYSIN DCB
         LTR   R15,R15                     Good Open ?
         BNZ   BADSYSIN                       No
         MVI   SYSINOP,C'Y'                Indicate File is Open
         GET   SYSIN,SYSINREC              Input 1 record
ENDSYSIN DS    0H
         CLC   MODNAME,=D'0'               Have good SYSIN Record ?
         BE    BADSYSIN                       No  - Error
         CLC   LMODDSN,BLANKLIN            Have good SYSIN Record ?
         BE    BADSYSIN                       No  - Error
         CLC   RCVTOFF,=F'0'               Have good SYSIN Record ?
         BE    BADSYSIN                       No  - Error
         CLC   FUNCTION,FNUPDATE           Have good Function ?
         BE    DISPPRMS                       Yes - Continue
         CLC   FUNCTION,FNREMOVE           Have good Functino ?
         BE    DISPPRMS                       Yes - Continue
         CLC   FUNCTION,FNDELETE           Have good Function ?
         BE    DISPPRMS                       Yes - Continue
         CLC   FUNCTION,FNREPOIN           Have good Function ?
         BE    DISPPRMS                       Yes - Continue
BADSYSIN DS    0H
         PUT   SYSPRINT,BLANKLIN           Output a Blank Line
         MVC   MSGAREA,INVSYSIN            Format Invalid SYSIN Msg
         PUT   SYSPRINT,MSGLINE            Output Msg
         PUT   SYSPRINT,BLANKLIN           Output a Blank Line
         MVC   MSGAREA(CSVDY14L),CSVDY14    Load Sysin Display Msg
         MVC   MSGAREA+7(REMAINS-SYSINREC),SYSINREC  Format SYSIN rec
         PUT   SYSPRINT,MSGLINE             Output Msg
         LA    R6,12
         B     RETURN
DISPPRMS DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY11L),CSVDY11    Load Message
         MVC   MSGAREA+11(L'FUNCTION),FUNCTION  Format FUNCTION Msg
         PUT   SYSPRINT,MSGLINE             Output Msg
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY12L),CSVDY12    Load Message
         MVC   MSGAREA+31(L'MODNAME),MODNAME  Format MODULE Msg
         PUT   SYSPRINT,MSGLINE             Output Msg
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BE    QUERY1                          Yes - Skip Dsname Msg
         CLC   FUNCTION,FNREMOVE            REMOVE  function ?
         BE    QUERY1                          Yes - Skip Dsname Msg
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BE    QUERY1                          Yes - Skip Dsname Msg
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY13L),CSVDY13    Load Message
         MVC   MSGAREA+30(L'LMODDSN),LMODDSN  Format Dataset Name Msg
         PUT   SYSPRINT,MSGLINE             Output Msg
QUERY1   DS    0H
**********************************************************************
*   Obtain the EP Address of the current module in storage.
**********************************************************************
         XC    CSVNAME,CSVNAME
         XC    EPADDRO,EPADDRO       Zero the 'Before' EPA Addrss
         XC    LOADPTO,LOADPTO       Zero the 'Before' Load Pt Address
         CSVQUERY INEPNAME=MODNAME,  (Search by EP NAME)               +
               SEARCH=LPA,         - Search LPA                        +
               OUTEPNM=CSVNAME,    - Module name                       +
               OUTLENGTH=CSVMSIZE, - Module size                       +
               OUTEPA=CSVEPA,      - Entry point (Get the 'before' EP) +
               OUTLOADPT=CSVLOADP, - Module base                       +
               OUTATTR1=CSVATTR1,  - Module attributes                 +
               OUTATTR2=CSVATTR2,  - Module attributes                 +
               OUTATTR3=CSVATTR3,  - Module attributes                 +
               OUTVALID=CSVVALID,  - Output valid bitstring            +
               MF=(E,MYCSVLST)
         LR    R6,R15              - Save Return Code from CSVQUERY
         LTR   R6,R6                 Was the caller's module found ?
         BZ    CHKNAME1                Yes - Continue
         CH    R6,=H'8'              Return Code = 8? Module Not Found?
         BNE   QUERY1ER                No  - Error
**********************************************************************
*   The exit module does not pre-exist in Dynamic LPA Storage.
**********************************************************************
         XC    CSVEPA,CSVEPA         Zero the 'Before' EPA Addrss
         XC    CSVLOADP,CSVLOADP     Zero the 'Before' Load Pt Address
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA(CSVDY24L),CSVDY24     Load Exit-Not-Preexist Msg
         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE              Output Msg
**********************************************************************
*   This is an acceptable situation when FUNCTION=UPDATE
**********************************************************************
         CLC   FUNCTION,FNUPDATE     UPDATE function ?
         BNE   QUERY1ER                No  - Error
         XR    R6,R6                 Reset the Return Code to Zero
         B     SAVEEPA1
QUERY1ER DS    0H
**********************************************************************
*   The exit module does not pre-exist in Dynamic LPA Storage.
*   This is a error situation.
**********************************************************************
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL1      Format CSVQUERY Failed Msg 1
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,9                  Set Query1 Fail Rc
         B     RETURN
CHKNAME1 DS    0H
         CLC   CSVNAME(L'MODNAME),MODNAME   Was EP Name returned ?
         BE    CHKEPA1                           Yes
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL1B     Format CSVQUERY Failed Msg 1B
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,9                  Set Query1 Fail Rc
         B     RETURN
CHKEPA1  DS    0H
         TM    CSVVALID,CSVVOEPA     Was EP Address returned ?
         BO    CHKRMOD1                 Yes
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL1C     Format CSVQUERY Failed Msg 1C
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,9                  Set Query1 Fail Rc
         B     RETURN
CHKRMOD1 DS    0H                    Where is the Module loacated ?
         TM    CSVATTR3,CSV3R16M   - Module Resident Above the Line ?
         BNO   SAVEEPA1                 No
         OI    CSVEPA,X'80'             Yes - Set High Order Bit on
SAVEEPA1 DS    0H
         MVC   EPADDRO,CSVEPA        Save the 'Before' EPA Addrss
         MVC   LOADPTO,CSVLOADP      Save the 'Before' Load Pt Address
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BE    DISPEPAS                        Yes - Skip dynamic updt
         CLC   TESTMODE,TESTPARM            In TEST Mode ?
         BE    UPDTRCVT                        Yes - Skip dynamic updt
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BE    DYNLPADL                        Yes - Do dynamic delete
         CLC   FUNCTION,FNREMOVE            REMOVE  function ?
         BE    UPDTRCVT                        Yes - Skip dynamic updt
DYNLPAUP DS    0H
**********************************************************************
*   Fetch/Update the LPA Module and place into dynamic LPA storage
*   (CSA).
**********************************************************************
         LA    R5,ADDINFO
         USING LPMEA,R5
         XC    ADDINFO(LPMEA_LEN),ADDINFO
         XC    LRETCODE,LRETCODE
         XC    LRSNCODE,LRSNCODE
         MVC   LPMEANAME(L'MODNAME),MODNAME
         MODESET MODE=SUP                  Go into Supervisor State
         CSVDYLPA REQUEST=ADD,           - Update Module in CSA        +
               MODINFOTYPE=MEMBERLIST,   - Point to List of Modules    +
               MODINFO=(R5),             - Point to the I/O area       +
               NUMMOD=LMODNBR,           - Number of Modules to Update +
               DSNAME=LMODDSN,           - Dsname to fetch Module from +
               REQUESTOR=LMODREQ,        - Requestor Literal           +
               RETCODE=LRETCODE,         - Return Code copied here     +
               RSNCODE=LRSNCODE,         - Reason Code copied here     +
               MF=(E,DYLPAL)
         MODESET MODE=PROB                 Go Back Into Problem State
         L     R6,LRETCODE
         L     R7,LRSNCODE
         CLC   LRETCODE,=F'0'             LPA module update successful?
         BE    QUERY2                       Yes - Continue on
*
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY01L),CSVDY01    Load LPA Update Failed Msg
         MVC   MSGAREA+40(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
*
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY02L),CSVDY02    Load Message
         MVC   WORK5,LRETCODE
         BAS   R14,TRANSLT1                 Translate To Hexadecimal
         MVC   MSGAREA+32(8),WORK9          Load CSVDYLPA Return Code
         MVC   WORK5,LRSNCODE
         BAS   R14,TRANSLT1                 Translate To Hexadecimal
         MVC   MSGAREA+46(8),WORK9          Load CSVDYLPA Reason Code
         PUT   SYSPRINT,MSGLINE             Output Msg
*
         CLC   LRETCODE,=F'4'               Return Code = 4 ?
         BNE   CHKRETN8                        No
         CLC   LRSNCODE,=X'00000401'        Output Flags = X'0401' ?
         BNE   RETURN                          No
**********************************************************************
*   Unable to load module - Module not found in input Loadlib
**********************************************************************
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA(CSVDY23L),CSVDY23     Load Can't-Find-Module Msg
         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE              Output Msg
         B     RETURN
*
CHKRETN8 DS    0H
         CLC   LRETCODE,=F'8'               Return Code = 8 ?
         BNE   RETURN                          No
         CLC   LRSNCODE,=X'17080829'        Output Flags = X'0829' ?
         BNE   CHKAUTH2                        No
**********************************************************************
*   Unable to dynamically allocate the Fetch Dataset (DSNAME=LMODDSN)
**********************************************************************
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA(CSVDY21L),CSVDY21     Load Can't-Allocate Msg
         MVC   MSGAREA+35(L'LMODDSN),LMODDSN Load CSVDYLPA Dataset Name
         PUT   SYSPRINT,MSGLINE              Output Msg
         B     RETURN
CHKAUTH2 DS    0H
         CLC   LRSNCODE,=X'0000082D'        Output Flags = X'082D' ?
         BNE   RETURN
AUTHERR2 DS    0H                           Dynamic LPA Deletion
**********************************************************************
*   DDNAME or DCB Must be APF Authorized.
**********************************************************************
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA(CSVDY22L),CSVDY22     Load Loadlib not APF Msg
         MVC   MSGAREA+33(L'LMODDSN),LMODDSN Load CSVDYLPA Dataset Name
         PUT   SYSPRINT,MSGLINE              Output Msg
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA,NOTAUTH2              Load Loadlib not APF Msg2
         PUT   SYSPRINT,MSGLINE              Output Msg
         B     RETURN
DYNLPADL DS    0H                           Dynamic LPA Deletion
**********************************************************************
*   Delete the LPA Module from dynamic LPA storage (CSA).
**********************************************************************
         DROP  R5
         LA    R5,DELINFO
         USING LPMED,R5
         XC    DELINFO(LPMED_LEN),DELINFO
         XC    LRETCODE,LRETCODE
         XC    LRSNCODE,LRSNCODE
         MVC   LPMEDNAME(L'MODNAME),MODNAME
         MODESET MODE=SUP                  Go into Supervisor State
         CSVDYLPA REQUEST=DELETE,        - Delete Module in CSA        +
               MODINFO=(R5),             - Point to the I/O area       +
               NUMMOD=LMODNBR,           - Number of Modules to Delete +
               TYPE=CURRENT,             - Which version to delete     +
               RETCODE=LRETCODE,         - Return Code copied here     +
               RSNCODE=LRSNCODE,         - Reason Code copied here     +
               MF=(E,DYLPAL)
         MODESET MODE=PROB                 Go Back Into Problem State
         L     R6,LRETCODE
         L     R7,LRSNCODE
         CLC   LRETCODE,=F'0'             LPA module delete successful?
         BE    QUERY2                       Yes - Continue on
*
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY19L),CSVDY19    Load LPA Delete Failed Msg
         MVC   MSGAREA+40(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
*
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY02L),CSVDY02    Load Message
         MVC   WORK5,LRETCODE
         BAS   R14,TRANSLT1                 Translate To Hexadecimal
         MVC   MSGAREA+32(8),WORK9          Load CSVDYLPA Return Code
         MVC   WORK5,LRSNCODE
         BAS   R14,TRANSLT1                 Translate To Hexadecimal
         MVC   MSGAREA+46(8),WORK9          Load CSVDYLPA Reason Code
         PUT   SYSPRINT,MSGLINE             Output Msg
*
         CLC   LRETCODE,=F'4'               Return Code = 4 ?
         BNE   RETURN                          No
         CLC   LRSNCODE,=X'00000401'        Output Flags = X'0401' ?
         BNE   RETURN                          No
**********************************************************************
*   There is no module in dynamic LPA to delete.
**********************************************************************
         PUT   SYSPRINT,BLANKLIN             Output a Blank Line
         MVC   MSGAREA(CSVDY20L),CSVDY20     Load Not-Dynamic-LPA Msg
         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE              Output Msg
         B     RETURN
         DROP  R5
TRANSLT1 DS    0H
**********************************************************************
*   Make the Hex Data Readable in EBCDIC
**********************************************************************
         UNPK  WORK9(9),WORK5(5)              Unpack 5 Bytes
         MVZ   WORK9(8),=X'0000000000000000'  Convert Zone Nibbles
         TR    WORK9(8),=C'0123456789ABCDEF'  Translate to Hex
         BR    R14                            Return To Caller
QUERY2   DS    0H
**********************************************************************
*   Obtain the EP Address of the reloaded module in storage.
**********************************************************************
         XC    CSVNAME,CSVNAME
         XC    EPADDRN,EPADDRN       Zero the 'After' EPA Addrss
         XC    LOADPTN,LOADPTN       Zero the 'After' Load Pt Address
         CSVQUERY INEPNAME=MODNAME,  (Search by EP NAME)               +
               SEARCH=LPA,         - Search LPA                        +
               OUTEPNM=CSVNAME,    - Module name                       +
               OUTLENGTH=CSVMSIZE, - Module size                       +
               OUTEPA=CSVEPA,      - Entry point (Get the 'after' EP)  +
               OUTLOADPT=CSVLOADP, - Module base                       +
               OUTATTR1=CSVATTR1,  - Module attributes                 +
               OUTATTR2=CSVATTR2,  - Module attributes                 +
               OUTATTR3=CSVATTR3,  - Module attributes                 +
               OUTVALID=CSVVALID,  - Output valid bitstring            +
               MF=(E,MYCSVLST)
         LR    R6,R15              - Save Return Code from CSVQUERY
         LTR   R6,R6                 Was the caller's module found ?
         BZ    CHKNAME2                Yes - Continue
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL2      Format CSVQUERY Failed Msg 2
         PUT   SYSPRINT,MSGLINE      Output Msg
         B     RETURN
CHKNAME2 DS    0H
         CLC   CSVNAME(L'MODNAME),MODNAME   Was EP Name returned ?
         BE    CHKEPA2                           Yes
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL2B     Format CSVQUERY Failed Msg 2B
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,10                 Set Query2 Fail Rc
         B     RETURN
CHKEPA2  DS    0H
         TM    CSVVALID,CSVVOEPA     Was EP Address returned ?
         BO    CHKRMOD2                Yes
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,QRYFAIL2C     Format CSVQUERY Failed Msg 2C
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,10                 Set Query2 Fail Rc
         B     RETURN
CHKRMOD2 DS    0H                    Where is the Module loacated ?
         TM    CSVATTR3,CSV3R16M   - Module Resident Above the Line ?
         BNO   COMPREPA                 No
         OI    CSVEPA,X'80'             Yes - Set High Order Bit on
COMPREPA DS    0H
         MVC   EPADDRN,CSVEPA        Save the 'After' EPA Addrss
         MVC   LOADPTN,CSVLOADP      Save the 'After' Load Pt Address
         CLC   EPADDRN,EPADDRO       Before/After Addresses the same?
         BNE   DISPEPAS
         PUT   SYSPRINT,BLANKLIN     Output a Blank Line
         MVC   MSGAREA,NOEPACHG      Format CSVQUERY Failed Msg 2B
         PUT   SYSPRINT,MSGLINE      Output Msg
         LA    R6,10                 Set Query2 Fail Rc
DISPEPAS DS    0H
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BNE   DISPEPA2                        No  - Don't Copy EP Adr
         MVC   EPADDRN,EPADDRO              Load Current EP Address
         MVC   LOADPTN,LOADPTO              Load Current Load Pt Addr
DISPEPA2 DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY03L),CSVDY03    Load Success-LPA-Update Msg
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BNE   DISPEPA3                        No
         MVC   MSGAREA(CSVDY25L),CSVDY25    Load Success-LPA-Delete Msg
DISPEPA3 DS    0H
         MVC   MSGAREA+44(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
*
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY04L),CSVDY04    Load Message
         MVC   WORK5,EPADDRO                Convert Old Address
         BAS   R14,TRANSLT1                 Translate To Hex Display
         MVC   MSGAREA+27(8),WORK9          Load Old EP Address
         MVC   WORK5,EPADDRN                Convert New Address
         BAS   R14,TRANSLT1                 Translate To Hex Display
         MVC   MSGAREA+53(8),WORK9          Load New EP Address
         PUT   SYSPRINT,MSGLINE             Output Msg
         LTR   R6,R6                        All good so far ?
         BNZ   RETURN                           No  - Return
UPDTRCVT DS    0H
         L     R3,16                        Map CVT
         USING CVT,R3
         L     R4,CVTRAC                    Point to RCVT
         USING RCVT,R4                      Map RCVT
         L     R1,RCVTOFF                 Load the RCVT offset for exit
         LA    R2,0(R1,R4)                  Point to exit ptr address
         ST    R2,PTRADDR                   Save exit ptr address
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY05L),CSVDY05    Load Message
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         MVC   WORK5,PTRADDR                Convert Exit PTR Address
         BAS   R14,TRANSLT1                 Translate To Hex Display
         MVC   MSGAREA+47(8),WORK9          Load Exit PTR Address
         PUT   SYSPRINT,MSGLINE             Output Msg
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY06L),CSVDY06    Load Message
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         MVC   WORK5,RCVTOFF                Convert Exit PTR Address
         BAS   R14,TRANSLT1                 Translate To Hex Display
         MVC   MSGAREA+47(8),WORK9          Load Exit PTR Address
         PUT   SYSPRINT,MSGLINE
*
         CLC   TESTMODE,TESTPARM            In Test Mode ?
         BE    TSTMODE                         Yes - In Test Mode
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BE    REPTRCVT                        Yes - Repoint RCVT
         CLC   0(4,R2),=F'0'                RCVT Pointer = 0 ?
         BNE   REPTRCVT                        No
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BE    NOTZEROD                        Yes - RCVT already 0
         CLC   FUNCTION,FNREMOVE            REMOVE  function ?
         BE    NOTZEROD                        Yes - RCVT already 0
REPTRCVT DS    0H
**********************************************************************
*    If the function is either DELETE or REMOVE, the EPADDRN field   *
*    will have the value 0 for the RCVT pointer update for the exit. *
**********************************************************************
         MODESET KEY=ZERO
         MVC   0(4,R2),EPADDRN            Update RCVT pointer for Exit
         MODESET KEY=NZERO
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BE    EXITDELT                        Yes - Remove Successful
         CLC   FUNCTION,FNREMOVE            REMOVE  function ?
         BE    EXITREMV                        Yes - Remove Successful
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BE    EXITREPT                        Yes - Repoint Successful
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY07L),CSVDY07    Load RCVT update Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
EXITDELT DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY15L),CSVDY15    Load Exit-Deleted Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
EXITREMV DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY16L),CSVDY16    Load Exit-Removed Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
EXITREPT DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY17L),CSVDY17    Load Exit-Repointed Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
NOTZEROD DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY18L),CSVDY18    Load Already-Zero Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
TSTMODE  DS    0H                           We are in TEST/SIM Mode
         CLC   FUNCTION,FNDELETE            DELETE  function ?
         BE    SKIPDELT                        Yes - Test Delete
         CLC   FUNCTION,FNREMOVE            REMOVE  function ?
         BE    SKIPREMV                        Yes - Test Remove
         CLC   FUNCTION,FNREPOIN            REPOINT function ?
         BE    SKIPREPT                        Yes - Test Remove
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY08L),CSVDY08    Load Message
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Update Msg
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
SKIPDELT DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Delete Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Delete Msg
         MVC   MSGAREA+41(9),=CL9'DELETED  ' Load Deleted Literal
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
SKIPREMV DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Remove Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Remove Msg
         MVC   MSGAREA+41(9),=CL9'REMOVED  ' Load Removed Literal
         PUT   SYSPRINT,MSGLINE             Output Msg
         B     RETURN
SKIPREPT DS    0H
         PUT   SYSPRINT,BLANKLIN            Output a Blank Line
         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Repoint Msg
         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Repoint Msg
         MVC   MSGAREA+41(9),=CL9'REPOINTED' Load Repointed Literal
         PUT   SYSPRINT,MSGLINE             Output Msg
RETURN   DS    0H
         DROP  R3,R4
         PUT   SYSPRINT,BLANKLIN    Output a Blank Line
         CLI   SYSINOP,C'Y'         Is this File Open?
         BNE   CLOSSYSP                No - Skip Close
         LA    R3,SYSIN             DCB to close
         LA    R4,WKOPENCL          Open/Close work area
         CLOSE ((R3)),MODE=31,MF=(E,(R4))  Close SYSIN DCB
CLOSSYSP DS    0H
         CLI   SYSPRTOP,C'Y'        Is this File Open?
         BNE   RLSESTOR                No - Skip Close
         LA    R3,SYSPRINT          DCB to close
         CLOSE ((R3)),MODE=31,MF=(E,(R4))  Close SYSPRINT DCB
RLSESTOR DS    0H
         LR    R2,R13               Pointer to storage area
         L     R3,=A(STORSIZE)      Work area size
         L     R13,4(,R13)          Restore Caller's SAVEAREA address
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
         L     R14,12(,R13)         Restore R14
         LR    R15,R6               Load CSVDYLPA Return Code
         LR    R0,R7                Load CSVDYLPA Reason Code
         LM    R1,R12,24(R13)       Restore caller's registers
         BSM   0,R14                Return to caller
*
**********************************************************************
*    STATIC STORAGE FOLLOWS
**********************************************************************
            DS    0F
TESTMODE    DC    CL4'TEST'              TEST MODE Literal
SIMUMODE    DC    CL8'SIMULATE'          SIMULATE MODE Literal
FNUPDATE    DC    CL8'UPDATE'            UPDATE  Function Literal
FNDELETE    DC    CL8'DELETE'            DELETE  Function Literal
FNREMOVE    DC    CL8'REMOVE'            REMOVE  Function Literal
FNREPOIN    DC    CL8'REPOINT'           REPOINT Function Literal
*
LMODNBR     DC    F'1'                   Number of Modules to update
LMODREQ     DC    CL16'ICHLOADR UPDATE'  Requestor id for CSVDYLPA Updt
*
BLANKLIN  DC   CL080' '
*
NOTAUTHD  DC   CL079'ICHLOADR - PROGRAM ICHLOADR IS NOT APF AUTHORIZED!+
               '
*
NOTAUTH2  DC   CL079'ICHLOADR - LOADLIB CONTAINING RACF EXIT FOR UPDATE+
                MUST BE APF AUTHORIZED'
*
INVLINKM  DC   CL079'ICHLOADR - INVALID LINKAGE PARM PASSED TO ICHLOADR+
               !'
*
INVCALLM  DC   CL079'ICHLOADR - UNAUTHORIZED CALL TO PROGRAM ICHLOADR!'
*
TSTSIMSG  DC   CL079'ICHLOADR - TEST/SIMULATE MODE WAS SPECIFIED.  NO U+
               PDATES WILL TAKE PLACE.'
*
INVSYSIN  DC   CL079'ICHLOADR - SYSIN INPUT RECORD IS MISSING OR IS INV+
               ALID.'
*
QRYFAIL1  DC   CL079'ICHLOADR - CSVQUERY MACRO FAILED - QUERY1.'
*
QRYFAIL1B DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP NAME - QUE+
               RY1.'
*
QRYFAIL1C DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP ADDRESS - +
               QUERY1.'
*
QRYFAIL2  DC   CL079'ICHLOADR - CSVQUERY MACRO FAILED - QUERY2.'
*
QRYFAIL2B DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP NAME - QUE+
               RY2.'
*
QRYFAIL2C DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP ADDRESS = +
               QUERY2.'
*
NOEPACHG  DC   CL079'ICHLOADR - EPA ADDRESS FOR THE MODULE DID NOT CHAN+
               GE.'
*
CSVDY01   DC   CL079'ICHLOADR - LPA UPDATE FAILED FOR MODULE ???????? '
CSVDY01L  EQU  *-CSVDY01
*
CSVDY02   DC   CL079'ICHLOADR - CSVDYLPA RETURN CODE=????????  RSN=????+
               ???? '
CSVDY02L  EQU  *-CSVDY02
*
CSVDY03   DC   CL079'ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ??????+
               ?? '
CSVDY03L  EQU  *-CSVDY03
*
CSVDY04   DC   CL079'ICHLOADR - OLD EP ADDRESS: ????????  NEW EP ADDRES+
               S: ???????? '
CSVDY04L  EQU  *-CSVDY04
*
CSVDY05   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER ADDRESS: ???+
               ????? '
CSVDY05L  EQU  *-CSVDY05
*
CSVDY06   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER OFFSET:  ???+
               ????? '
CSVDY06L  EQU  *-CSVDY06
*
CSVDY07   DC   CL079'ICHLOADR - EXIT ???????? WAS UPDATED AND REPOINTED+
                SUCCESSFULLY. '
CSVDY07L  EQU   *-CSVDY07
*
CSVDY08   DC   CL079'ICHLOADR - EXIT ???????? WOULD HAVE BEEN UPDATED. +
               RUNNING IN TEST MODE.'
CSVDY08L  EQU   *-CSVDY08
*
CSVDY09   DC   CL079'ICHLOADR - EXIT ???????? WOULD HAVE BEEN ?????????+
                - RUNNING IN TEST MODE.'
CSVDY09L  EQU   *-CSVDY09
*
CSVDY11   DC   CL079'ICHLOADR - ???????? FUNCTION IS BEING PROCESSED.'
CSVDY11L  EQU   *-CSVDY11
*
CSVDY12   DC   CL079'ICHLOADR - RACF EXIT MODULE IS ????????          '
CSVDY12L  EQU   *-CSVDY12
*
CSVDY13   DC   CL079'ICHLOADR - LOADLIB DATASET IS ????????????????????+
               ????????????????????????'
CSVDY13L  EQU   *-CSVDY13
*
CSVDY14   DC   CL079'SYSIN:                                            +
                                            '
CSVDY14L  EQU   *-CSVDY14
*
CSVDY15   DC   CL079'ICHLOADR - EXIT ???????? WAS DELETED AND UNPOINTED+
                SUCCESSFULLY.'
CSVDY15L  EQU   *-CSVDY15
*
CSVDY16   DC   CL079'ICHLOADR - EXIT ???????? WAS REMOVED (UNPOINTED) S+
               UCCESSFULLY.'
CSVDY16L  EQU   *-CSVDY16
*
CSVDY17   DC   CL079'ICHLOADR - EXIT ???????? WAS REPOINTED (RCVT UPDAT+
               ED) SUCCESSFULLY.'
CSVDY17L  EQU   *-CSVDY16
*
CSVDY18   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER WAS ALREADY +
               ZEROED. NOT UPDATED.'
CSVDY18L  EQU   *-CSVDY18
*
CSVDY19   DC   CL079'ICHLOADR - LPA DELETE FAILED FOR MODULE ???????? '
CSVDY19L  EQU  *-CSVDY19
*
CSVDY20   DC   CL079'ICHLOADR - MODULE ???????? IS NOT PART OF DYNAMIC +
               LPA.'
CSVDY20L  EQU   *-CSVDY20
*
CSVDY21   DC   CL079'ICHLOADR - CANNOT ALLOCATE DATASET ???????????????+
               ?????????????????????????????'
CSVDY21L  EQU   *-CSVDY21
*
CSVDY22   DC   CL079'ICHLOADR - NOT APF AUTHORIZED => ?????????????????+
               ???????????????????????????'
CSVDY22L  EQU   *-CSVDY22
*
CSVDY23   DC   CL079'ICHLOADR - MODULE ???????? COULD NOT BE FOUND IN S+
               PECIFIED LOADLIB.'
CSVDY23L  EQU   *-CSVDY23
*
CSVDY24   DC   CL079'ICHLOADR - MODULE ???????? DID NOT PREVIOUSLY EXIS+
               T IN LPA STORAGE.'
CSVDY24L  EQU   *-CSVDY24
*
CSVDY25   DC   CL079'ICHLOADR - LPA DELETE SUCCESSFUL FOR MODULE ??????+
               ?? '
CSVDY25L  EQU  *-CSVDY25
*
*-------------------------------------------------------------*
* WTO INITIALIZE AREA                                         *
*-------------------------------------------------------------*
WTOINIT  WTO   '                                                       +
                                                                       +
                              ',MF=L,ROUTCDE=(11)
WTOINITL EQU   *-WTOINIT
*
OPENI    DS    0F
         OPEN  (*,OUTPUT),MODE=31,MF=L
OPENIL   EQU   *-OPENI
*
*---------------------------------------------------------------------*
* DCBs                                                                *
*---------------------------------------------------------------------*
SYSINI   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,EODAD=ENDSYSIN,        +
               LRECL=100,RECFM=FB
SYSINIL  EQU  *-SYSINI
*
SYSPRINI DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +
               LRECL=080,RECFM=FB
SYSPRINL EQU  *-SYSPRINI
*
            LTORG
*
**********************************************************************
*    DYNAMIC STORAGE FOLLOWS
**********************************************************************
STORAREA    DSECT ,                Reentrant storage
SAVEAREA    DS    20F
SAVE3       DS    3F
WORK5       DS    Xl5
WORK9       DS    Xl9
SYSPRTOP    DS    CL1                File is open indicator
SYSINOP     DS    CL1                File is open indicator
*
*---------------------------------------------------------------------*
* BASE SYSTEM RETURNED DATE AND TIME
*---------------------------------------------------------------------*
            DS    0F
CURRTIME    DS    F               CURRENT TIME OF DAY HHMMSSHH (BINARY)
CURRDATE    DS    PL4                   CURRENT JULIAN DATE
*
DISPTIME    DS    0F                    CURRENT TIME IN DISPLAY FORMAT
DISPTMHH    DS    CL2                   HOURS
DISPTMC1    DS    CL1                   COLON
DISPTMMM    DS    CL2                   MINUTES
DISPTMC2    DS    CL1                   COLON
DISPTMSS    DS    CL2                   SECONDS
DISPTIML    EQU   *-DISPTIME            LENGTH OF DISPTIME
*
TIMEXXXX    DS    CL8                   CURRENT TIME HH:MM:SS
*
STORTIME    DS    F                   USED TO CONVERT TO PACKED DECIMAL
STORTMSG    DS    XL1                   SIGN FOR PACKED DECIMAL
TIME9       DS    CL9                   STORE PACKED-TO-ZONE CONVERSION
*
JULIANDT    DS    0F                    7 DIGIT JULIAN DATE
JULCENTY    DS    CL2                   JULIAN DATE'S CENTURY
JULIANYR    DS    CL2                   JULIAN DATE'S YEAR
JULDAYS     DS    CL3                   JULIAN DATE'S DAYS
JULDATEL    EQU   *-JULIANDT            LENGTH OF JULIANDT
*
DATEXXXX    DS    CL7                   JULIAN DATE YYYYDDDD
*
PARMADDR    DS    F                Save Linkage Parm Address
*-------------------------------------------------------------*
*        Linkage Parameter.                                   *
*-------------------------------------------------------------*
LL          DS    H                Store Linkage Parm Length (ll)
TOKEN       DS    CL8              ICH call token
TESTPARM    DS    CL8              Test (Simulate Only) Parm
*-------------------------------------------------------------*
*        SYSIN Input Record Parameters.                       *
*-------------------------------------------------------------*
SYSINREC    DS    0CL100           SYSIN Record
MODNAME     DS    CL8              EP Address before LPA Update
            DS    CL1
LMODDSN     DS    CL44             Dataset name to fetch module
            DS    CL1
RCVTOFF     DS    F                RCVT offset for module
            DS    CL1
FUNCTION    DS    CL8              Function
REMAINS     DS    CL33             Reserved for Growth
SYSINRLN    EQU   *-SYSINREC
            ORG   SYSINREC+SYSINRLN

*-------------------------------------------------------------*
*        CSVQUERY Parameter List.                             *
*-------------------------------------------------------------*
         CSVQUERY MF=(L,MYCSVLST)  CSVQUERY Parameter List
*-------------------------------------------------------------*
*        Parameters returned from CSVQUERY macro              *
*-------------------------------------------------------------*
CSVNAME     DS    CL8                 Caller's Module name
CSVMSIZE    DS    F                   Module size
CSVEPA      DS    F                   EP Address
CSVLOADP    DS    F                   Module Base Addr
*-------------------------------------------------------------*
*        Module attributes byte one.                          *
*-------------------------------------------------------------*
CSVATTR1    DS    XL1                 Attributes byte one
CSV1LGLB    EQU   X'40'               Loaded to global
CSV1RENT    EQU   X'20'               Reentrant module
CSV1REUS    EQU   X'10'               Serially reusable
CSV1OVLY    EQU   X'04'               Overlay
CSV1ALIA    EQU   X'02'               Alias
*-------------------------------------------------------------*
*        Module attributes byte two.                          *
*-------------------------------------------------------------*
CSVATTR2    DS    XL1                 Attributes byte two
CSV2AULB    EQU   X'80'               Authorized library
CSV2AUPG    EQU   X'40'               Authorized program
CSV2AMAN    EQU   X'20'               AMODE=ANY
CSV2AM31    EQU   X'10'               AMODE=31
CSV2RTLS    EQU   X'08'               RTLS
CSV2DLPA    EQU   X'04'               Dynamic LPA module
CSV2PGPT    EQU   X'02'               Page Protected
*-------------------------------------------------------------*
*        Module attributes byte three.                        *
*-------------------------------------------------------------*
CSVATTR3    DS    XL1                 Attributes byte three
CSV3R16M    EQU   X'80'               Resident above 16 megabytes
CSV3JPA     EQU   X'40'               Job Pack Area resident
CSV3PLPA    EQU   X'20'               PLPA resident
CSV3MLPA    EQU   X'10'               MLPA resident
CSV3FLPA    EQU   X'08'               FLPA resident
CSV3CSA     EQU   X'04'               CSA resident
*-------------------------------------------------------------*
*  CSVQUERY results returned fields bitstrings to inspect     *
*-------------------------------------------------------------*
CSVVALID    DS    0F                  Output Valid Fields Bitstring
*
CSVVL1      DS    XL1                 Valid Byte 1
CSVVOLEN    EQU   X'80'               Module Length was returned
CSVVOEPA    EQU   X'40'               Module EPA was returned
CSVVOEPM    EQU   X'20'               Module Entry Point was returned
CSVVOMAJ    EQU   X'10'               Module Major Name was returned
CSVVOSP     EQU   X'08'               Module Subpool was returned
CSVVOAT1    EQU   X'04'               Module Attr 1 was returned
CSVVOAT2    EQU   X'02'               Module Attr 2 was returned
CSVVOAT3    EQU   X'01'               Module Attr 3 was returned
*
CSVVL2      DS    XL1                 Valid Byte 2
CSVVOLPT    EQU   X'80'               Module Load Addr was returned
*
CSVVL3      DS    XL1                 Not Referenced in this pgm
CSVVL4      DS    XL1                 Not Referenced in this pgm
CSVOUTLN    EQU   *-CSVNAME
*-------------------------------------------------------------*
*
EPADDRO     DS    F                EP Address before LPA Update
EPADDRN     DS    F                EP Address after  LPA Update
LOADPTO     DS    F                Load Pt Address before LPA Update
LOADPTN     DS    F                Load Pt Address after  LPA Update
PTRADDR     DS    F                Exit PTR Address
*
ADDINFO     DS    0D
            ORG   ADDINFO+LPMEA_LEN
*
DELINFO     DS    0D
            ORG   DELINFO+LPMEA_LEN
*
LRETCODE    DS    F                  CSVDYLPA Return Code
LRSNCODE    DS    F                  CSVDYLPA Reason Code
*
            DS    0D
            CSVDYLPA MF=(L,DYLPAL)
*
WKOPENCL    DS    0F,CL(OPENIL)      OPEN/CLOSE MACRO RELOCATE AREA
SYSPRINT    DS    0F,CL(SYSPRINL)    SYSPRINT DCB RELOCATED
SYSIN       DS    0F,CL(SYSINIL)     SYSIN    DCB RELOCATED
*
EXECWTO     DS    CL(WTOINITL)       WTO Message Area
EXECWTOL    EQU   *-EXECWTO
*
MSGLINE     DS    0CL80
MSGCC       DS    CL1
            ORG   MSGLINE+L'MSGCC
MSGAREA     DS    CL79               Format Msgs in this area
*
HEADING1    DS    0CL79              Program ICHLOADR Heading Line
H1LIT1      DS    CL11
H1VERS      DS    CL9                Maintenance Level VerS.Rel.Mod
            DS    CL1
H1DATE      DS    CL8                Current Julian Date
            DS    CL1
H1TIME      DS    CL8                Current time
            DS    41CL1
HEADING1L   EQU *-HEADING1
*
STORSIZE    EQU   *-STORAREA
*
            YREGS ,                  Register Equates
            CSVLPRET ,               Dynamic LPA Return Information
            CVT DSECT=YES,LIST=YES , Map Communications Vector Table
            PRINT ON,GEN
            ICHPRCVT ,               Map RCVT
            PRINT NOGEN
            IEZWPL ,                 Map WTO Parameter List
            END
