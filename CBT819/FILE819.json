{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012854000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE819.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE819.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x05'", "DS1TRBAL": "b'\\x87\\xde'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x9a\\x00\\t\\x05\\x9b\\x00\\x02\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x00\\x02\\x01\\x11\\x04\\x7f\\x01\\x11\\x04\\x7f\\x00\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-16T00:00:00", "modifydate": "2011-02-16T00:07:02", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-481"}, "text": "REGULAR CBT TAPE - VERSION 481    FILE:  819\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT481.FILE819\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,748 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/16/11    00:07:02    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01M\\x00\\x07\\x01\\x04'_\\x01\\x10\\x02\\x1f\\x13\\x11\\x01#\\x00\\xa5\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@\"", "ispf": {"version": "01.77", "flags": 0, "createdate": "2004-10-01T00:00:00", "modifydate": "2010-01-21T13:11:07", "lines": 291, "newlines": 165, "modlines": 0, "user": "TKMILLE"}, "text": " LAST UPDATE: 01/21/2010  Version 01.01.01\n                          Terry Miller\n                          ConocoPhillips\n                          tkmille@ConocoPhillips.com\n\n MODIFICATION LEVEL: V01.01.01\n\n This PDS contains the Rexx code for the 'ICH' RACF exit update\n facility.  It is used to update a RACF exit without having\n to perform an IPL.  It is, in essence, a RACF Exit\n UPDATE/DELETE/REMOVE/REPOINT 'ICH' facility.\n\n This program was written to provide the capability to\n dynamically UPDATE, DELETE, REMOVE and REPOINT RACF Exits\n without having to IPL a system.  It also updates the RCVT\n pointer (RACF Communication Vector Table) for the exit to\n point RACF (Communications Server) to use the updated exit in\n dynamic LPA (CSA) storage.\n\n It has four Functions: UPDATE, DELETE, REMOVE, and REPOINT.\n\n Exec 'ICH' calls program ICHLOADR to UPDATE the module in dynamic\n LPA (CSA) storage and to repoint the RCVT to the new exit entry\n point.\n This is the same function as the SETPROG LPA,ADD MVS command\n except that it also updates the RACF RCVT pointer to point\n to the update version of the module.\n\n It can also be used to DELETE a dynamically loaded RACF Exit\n from CSA storage and uppoint (zero) the RCVT pointer to it to\n indicate to RACF that the current dynamically-installed exit is\n not in service anymore.\n (This is the same function as the SETPROG LPA,DELETE MVS command\n except that it also unpoints (zeros) the RACF RCVT pointer.)\n Therefore, since the RCVT pointer is zeroed, it must repointed\n by issuing a subsequent UPDATE function to put it back into\n service.\n\n It can also be used to REMOVE (unpoint) a RACF exit to take the\n exit out of RACF service without touching the exit in LPA\n storage. The exit will remain out of RACF service until the\n next IPL or until the next dynamic update, or until the next\n REPOINT function is issued.\n\n It can also be used to REPOINT a RACF exit to put the exit back\n into RACF service without affecting the exit in LPA storage.\n storage.  This function is the opposite of the REMOVE function\n and can be used subsequent to issuing the REMOVE function\n to put an exit back into service.\n\n\n ASSUMPTIONS:\n ------------\n\n This exec only provides the RACF RCVT pointer address for the\n following RACF exits:\n\n ICHAUTAB\n ICHCNX00\n ICHDEX01\n ICHDEX11\n ICHNCV00\n ICHPWX01\n ICHPWX11\n ICHRCX01\n ICHRCX02\n ICHRDX01\n ICHRDX02\n ICHRFX01\n ICHRFX02\n ICHRFX03\n ICHRFX04\n ICHRIN03\n ICHRIX01\n ICHRIX02\n ICHRLX01\n ICHRLX02\n\n\n Please report any bugs to Terry Miller at tkmille@ConocoPhillips.com\n\n DESCRIPTION OF PDS MEMBERS:\n ---------------------------\n\n   $CHANGES - Change Log of the 'ICH' facility                 ADR'\n   $$DOC    - 'ICH' facility 'README' file\n   $INSTALL - Installation steps to install the 'ICH' facility\n   ICH      - Rexx exec to invoke the 'ICH' facility\n              (this exec calls program 'ICHLOADR')\n   ICHLOADR - Program to update a RACF module in LPA.\n   ASSEM    - JCL to assemble program 'ICHLOADR'.\n   HELPICH  - Help documentation for exec 'ICH'\n              (this is the SYSHELP member for the 'ICH' exec)\n   $OBJECT  - Object deck of program 'ICHLOADR'\n   LINKEDIT - JCL to link-edit program 'ICHLOADR' from the\n              object deck (member $OBJECT).\n   COPYHELP - Help member install jcl to copy to SYSHELP file.\n   PROGCNTL - JCL to program-control security-protect\n              program 'ICHLOADR'.\n   HELPICH  - Help documentation member for exec 'ICH'\n   SAMPDISP - Sample displays from the 'ICH' exec.\n\n\n DISCLAIMER OF LIABILITY:\n ------------------------\n\n                     DISCLAIMER\n\n Terry Miller and ConocoPhillips neither expresses nor implies\n any warranty as to the fitness of this ICH facility.\n The use of this facility and the results therefrom is entirely\n at the risk of the user.  Consequently, the user may modify\n these programs in any way he/she thinks fit.\n\n All disclaimers that apply to CBT programs as described in\n the \"Disclaimer Section\" of File 001 of the CBT Tape Doc\n and on www.cbttape.org also apply to this package.\n (SBG - 01/2010)\n\n INSTALLATION TAILORING/CUSTOMIZATION:\n -------------------------------------\n\n Installation change to Rexx exec 'ICH':\n\n You must change the loadlib name which contains the ICHLOADR\n program in the CALL command.  Edit exec 'ICH' and then\n issue a FIND for the eyecatcher text \"<= CHANGE LOADLIB\".\n\n\n AUTHORIZATION:\n --------------\n\n Program ICHLOADR must reside in an APF-Authorized libary\n and must be linked as an authorized module.\n\n The Load Library containing the RACF Exit to fetch for the\n LPA Update must also be in the APF List.  Normally, this\n Loadlib would be SYS1.LPALIB (this is the default load\n library if not specified when the ICH REXX exec is invoked),\n but it can be overridden with the DA(dsname) parm when ICH\n is invoked.\n\n Program ICHLOADR must reside in the IKJTSOxx 'Authorized\n program names' table.\n\n Program ICHLOADR should only be called by Rexx Exec 'ICH'\n to guarantee that an accurate RCVT offset value is being\n processed.  Therefore, a token is passed from Exec 'ICH'\n as a parameter to prevent and unauthorzied call to program\n ICHLOADR.\n\n It is therefore incumbent upon users to carefully guard and\n security-protect the 'ICH' exec which has the RCVT table\n offsets hard-coded within it.\n\n It is HIGHLY recommended that program ICHLOADR be\n program-control protectsd to prevent unauthorized users\n from executing it.  This might be helpful for auditors\n checking this program as well.\n\n Program 'ICHLOADR' was named with the 'ICH' prefix to show\n that it is related to RACF activity.\n The author realizes that someday IBM may release a version\n of RACF (or SECURITY SERVER product) which contains a\n program called 'ICHLOADR', but I will cross that\n maintenance bridge when it happens.\n\n CERTIFICATION\n -------------\n\n Program ICHLOADR is certified for Z/oS 1.1 and higher.\n\n PROBLEM REPORTING\n -----------------\n\n Please report any bugs or suggestions for improvement to:\n        Terry Miller at email: Tkmille@ConocoPhillips.com\n\n\n ICH EXEC SYNTAX\n ---------------\n\n    INVOCATION SYNTAX:\n\n       ICH ?\n       ICH membername [ UPDATE | DELETE | REMOVE | REPOINT ]\n                      [ DA(dsname)               ]\n                      [ TEST | SIMULATE          ]\n                      [ DEBUG                    ]\n\n       Where membername is one of the following RACF User Exits:\n\n        ICHAUTAB\n        ICHCNX00\n        ICHDEX01\n        ICHDEX11\n        ICHNCV00\n        ICHPWX01\n        ICHPWX11\n        ICHRCX01\n        ICHRCX02\n        ICHRDX01\n        ICHRDX02\n        ICHRFX01\n        ICHRFX02\n        ICHRFX03\n        ICHRFX04\n        ICHRIN03\n        ICHRIX01\n        ICHRIX02\n        ICHRLX01\n        ICHRLX02\n\n\n SAMPLE INVOCATIONS OF EXEC ICH:\n -------------------------------\n\n       ICH ?\n       ICH membername                    (Prompts for Function)\n       ICH membername UPDATE\n       ICH membername DA(dsname)\n       ICH membername DA(dsname) UPDATE\n       ICH membername UPDATE DA(dsname)\n       ICH membername UPDATE TEST\n       ICH membername UPDATE SIMULATE\n       ICH membername UPDATE DA(dsname) TEST\n       ICH membername UPDATE DA(dsname) SIMULATE (same as previous)\n       ICH membername DELETE\n       ICH membername DELETE TEST\n       ICH membername DELETE SIMULATE\n       ICH membername REMOVE\n       ICH membername REMOVE TEST\n       ICH membername REMOVE SIMULATE\n       ICH membername REPOINT\n       ICH membername REPOINT TEST\n       ICH membername REPOINT SIMULATE\n\n RETURN CODES:\n -------------\n\n         0  - Successful Call to ICHLOADR\n         8  - Program ICHLOADR is not APF-Authorized\n         9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call\n        10  - CSVQUERY for Exit Module failed after CSVDYLPA call\n        11  - Entry Point Address did not change after CSVDYLPA call\n        12  - Miscellaneous Errors\n\n\n EXAMPLE INVOCATION DISPLAY FROM EXEC 'ICH'\n ------------------------------------------\n\n %ICH  ICHRCX02 UPDATE\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:00          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n ICH      - Test Parm   =\n\n ICHLOADR - V01.01.01 2010.015 14:40:00\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: BA4DE000\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x10\\x01_\\x01\\x10\\x01\\x8f\\x14\\x05\\x00$\\x00%\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-01-15T00:00:00", "modifydate": "2010-01-18T14:05:35", "lines": 36, "newlines": 37, "modlines": 0, "user": "TKMILLE"}, "text": "Subject:   Re: New Version CBT File819 - ICH Racf Exit Facility\nFrom:      <Tkmille@ConocoPhillips.Com>\nDate:      15 Jan 2010 11:43:04 -0600\nTo:        <SbGolob@cbttape.org>\n\n Re: New Version of ICH Exit Update/Delete Facility File819 ...\n\n Sam,\n\n Please find new-and-improved version (V01.01.01) of the\n of the ICH Facility for posting on CBT.\n\n Changes:\n\n 01/18/2010 - V01.01.01\n\n   - Corrected typos in the \"SAMPDISP\" member (Sample Displays)\n   - Changed/corrected display for sysid to be 8 characters\n   - Corrected an error when a Racf exit does not pre-exist in\n     LPA Storage to display msg:\n     ICHLOADR - MODULE ICHRCX02 DID NOT PREVIOUSLY EXIST IN LPA STORAGE.\n   - Corrected Spelling on the word MODULE\n\n See XMIT attachment for the ICH Facility.\n\n Regards,\n\n  Terry Miller\n  ConocoPhillips\n  620-03 Information Center\n  511 S. Keeler Ave.\n  Bartlesville, Oklahoma 74004\n  Phone:    918-661-0327\n  Fax:      918-661-3636\n  Email:    Tkmille@ConocoPhillips.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CHANGES": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00\"\\x01\\x054\\x7f\\x01\\x10\\x02\\x1f\\x13\\x13\\x00F\\x00\\x01\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2005-12-13T00:00:00", "modifydate": "2010-01-21T13:13:22", "lines": 70, "newlines": 1, "modlines": 0, "user": "TKMILLE"}, "text": "                    ICH Exec Version Change History\n\n 01/21/2010 - V01.01.01\n\n   - Changed all References to RACF to uppercase\n   - Corrected a few typos in the Help Screen Member HELPICH\n\n 01/19/2010 - V01.01.01\n\n   - Modified some msgs in the ICHLOADR program\n   - Updated SAMPDISP example displays with modified msgs\n   - Corrected typos in HELPICH, @FILE819, and $$DOC members\n   - Suppressed the TESTPARM display when a TEST/SIMULATE parm\n       was not passed to the ICH exec (avoids confusion)\n   - Modified the 'Module does not pre-exist' msg.\n\n 01/18/2010 - V01.01.01\n\n   - Corrected typos in the \"SAMPDISP\" member (Sample Displays)\n   - Changed/corrected display for sysid to be 8 characters\n   - Corrected an error when a RACF exit does not pre-exist in\n     LPA Storage to display msg:\n     ICHLOADR - MODULE ICHRCX02 DID NOT PREVIOUSLY EXIST IN LPA STORAGE.\n   - Corrected Spelling on the word MODULE\n\n 01/15/2010 - V01.01.01\n\n   - Added exception msg when module not found in input Loadlib\n     in 'ICHLOADR' program.\n   - Added confirmation prompt to user to confirm defaulting to\n     use UPDATE for the processing function if the function was\n     omitted when the 'ICH' REXX exec was invoked.\n   - Rearranged the Edit routine for the RACF Exit Membername\n     in 'ICH' REXX exec.\n\n 01/14/2010 - V01.01.01\n\n   - Included an CHANGES  Member called $CHANGES\n   - Included an INSTALL  Member called $INSTALL\n   - Included a  LINKEDIT Member and $OBJECT member\n     for those who do not have the High Level Assembler\n   - Added error msg indicating that the loadlib which\n     contains the RACF exit to be loaded into LPA\n     storage must be APF authorized\n\n\n 01/13/2010 - V01.01.01\n\n   - Added the REPOINT function\n   - Removed Modules ICHRRNG and ICHNRT00 - Not User Exits\n\n 01/12/2010 - V01.01.00\n\n   - Added exits 'ICHRLX01' and 'ICHRLX02'\n\n 01/11/2010 - V01.01.00\n\n   - Added program 'ICHLOADR' to update the RCVT pointer\n        and dynamically load/delete LPA modules\n   - Added DELETE and REMOVE functions\n   - Added ISPF browse function for the report display\n   - Added interface between ICH exec and program ICHLOADR\n   - Added PROGCNTL (RACF Program Protection member to\n        protect program access to ICHLOADR\n\n 01/05/2010 - V01.01.00\n\n   - New REXX exec 'ICH'\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x16\\x01\\x10\\x01O\\x01\\x10\\x02\\x1f\\x13\\t\\x00b\\x00\\x04\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2010-01-14T00:00:00", "modifydate": "2010-01-21T13:09:16", "lines": 98, "newlines": 4, "modlines": 0, "user": "TKMILLE"}, "text": "         Installation Steps for the \"ICH\" Facility\n\n 1) Choose an APF-Authorized Load Library to link program\n    \"ICHLOADR\" into.  It must be an APF-Authorized\n    Load Library.\n\n 2) Edit member \"ASSEM\" (assembles/links program \"ICHLOADR\")\n    and meke tailoring changes (Change the Source location\n    and the Load Library etc).\n    The load library that \"ICHLOADR\" resides in must be\n    APF-Authorized and program \"ICHLOADR\" must be Link\n    Editted with AC=1.\n\n    Submit member \"ASSEM\" to assemble/link program\n    \"ICHLOADR\" into the Load Library chosen in step\n    step 1) above.\n\n    Alternately, member \"LINKEDIT\" is included if you only\n    want to run the LINKEDIT (BINDER) step.  You must\n    tailor this member per the comments before submitting\n    it.\n\n 3) If program \"ICHLOADR\" was placed into a LinkListed\n    Load Library (in step 2) above), no changes are\n    necessary for REXX exec \"ICH\" (member \"ICH\") and\n    you can procede to step 4).\n\n    If exec \"ICH\" will NOT be placed into a LinkListed Load\n    Library, EDIT member 'ICH' and do a FIND for the word\n    \"Uncomment\". Find the  occurance of the word which\n    contains the \"CALL\" statement with the explicit CALL\n    to program \"ICHLOADR\".\n\n    Uncommnent the explicit call statement and change the\n    Load Library in the CALL statement to the dataset name\n    chosen in step 1) above.\n\n    COMMENT out (nullify) the LinkListed Call statement\n    just below it. (/* CALL *(ICHPROGR) */)\n\n 4) Copy REXX exec member \"ICH\" into a PDS or PDSE which\n    resides in an exec allocation (SYSPROC SYSEXEC etc.) to\n    allow it to be invoked as a REXX exec.  The PDS or PDSE\n    dataset that you choose should be RACF protected so that\n    only authorized users have UPDATE access to it.\n\n 5) Add program \"ICHLOADR\" to the IKJTSOxx MVS Parmlib\n    member in the Authorized Programs Table section so it\n    can be executed as an authorized program.\n    (Or whatever Authorization equivalent you have).\n\n 6) Issue the following TSO command to Syntax check the\n    IKJTSOxx member that you have changed.\n\n       PARMLIB CHECK(xx)\n\n 7) If the Syntax is acceptable, isse the following TSO\n    command to implement the IKJTSOxx member that you\n    changed.\n\n       PARMLIB UPDATE(xx)\n\n    (Or you can use the MVS Command:  SET  IKJTSO=xx\n\n       SET IKJTSO=xx\n\n     if your OS is at Z/oS V1.R3 or above)\n\n 8) Add Load Library 'SYS1.LPALIB' (or whatever Load Library\n    you put your RACF exit into when you run REXX exec 'ICH')\n    to the APF LIST if it is not presently in the APF List.\n\n 9) Tailor and Submit member \"PROGCNTL\" to Add RACF\n    program-control protection for program \"ICHLOADR\" to\n    allow only authorized users from executing this program.\n    It updates the RCVT pointer addresses, so access to it\n    should be restricted to only authorized users.\n\n10) Tailor and SUBMIT member \"COPYHELP\" to copy the HELP\n    member for REXX exec \"ICH\".\n    Choose a PDS or PDSE library which is concatenated to\n    the SYSHELP ddname allocation list.\n    The HELP member will be RENAMED on the copy from\n    \"HELPICH\" to \"ICH\".\n\n11) Test the HELP panel by issuing TSO command HELP ICH.\n    Read the HELP Screen to learn how to use the \"ICH\" exec\n    facility.  This is your MVS README file.\n\n12) Now you are an expert.  Test this on a test system first\n    before implementing on a production platform.\n\n13) Browse member \"@FILE819\" and READ my \"DISCLAIMER OF\n    LIABILITY\".  In other words, USE AT YOUR OWN RISK\n    or \"Implementer caveo\" - (Implementer Beware).\n\n14) Happy RACF User Exit updating and loading.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$OBJECT": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x02/\\x01\\x10\\x02/\\x14\\x11\\x00\\x86\\x00\\x86\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-01-22T00:00:00", "modifydate": "2010-01-22T14:11:00", "lines": 134, "newlines": 134, "modlines": 0, "user": "TKMILLE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "@FILE819": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x00T\\x01\\x11\\x04\\x7f\\x01\\x11\\x04\\x7f\\x00\\x06\\x00\\xf3\\x00\\xf3\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-16T00:00:00", "modifydate": "2011-02-16T00:06:54", "lines": 243, "newlines": 243, "modlines": 0, "user": "CBT-481"}, "text": "//***FILE 819 is from Terry Miller, and contains the REXX code      *   FILE 819\n//*         for the \"ICH\" RACF exit update facility.  The package   *   FILE 819\n//*         is used to update a RACF exit without having to         *   FILE 819\n//*         perform an IPL.  Authorized functions are performed     *   FILE 819\n//*         by the authorized Assembler program called ICHLOADR     *   FILE 819\n//*         which has to be in your IKJEFTE8 (authpgm) table.       *   FILE 819\n//*                                                                 *   FILE 819\n//*         It is, in essence, a RACF exit UPDATE/DELETE/REMOVE/    *   FILE 819\n//*         REPOINT Facility.                                       *   FILE 819\n//*                                                                 *   FILE 819\n//*           email:  tkmille@conocophillips.com                    *   FILE 819\n//*                                                                 *   FILE 819\n//*  LAST UPDATE: 01/21/2010  Version 01.01.01                      *   FILE 819\n//*                           Terry Miller                          *   FILE 819\n//*                           ConocoPhillips                        *   FILE 819\n//*                           tkmille@ConocoPhillips.com            *   FILE 819\n//*                                                                 *   FILE 819\n//*  MODIFICATION LEVEL: V01.01.01                                  *   FILE 819\n//*                                                                 *   FILE 819\n//*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  *   FILE 819\n//*                                                                 *   FILE 819\n//*  This program was written to provide the capability to          *   FILE 819\n//*  dynamically UPDATE, DELETE, REMOVE, and REPOINT RACF Exits     *   FILE 819\n//*  without having to IPL.  It also updates the RCVT pointer (RACF *   FILE 819\n//*  Communication Vector Table) for the exit to repoint RACF       *   FILE 819\n//*  (Security Server) to use the updated exit in dynamic           *   FILE 819\n//*  LPA (CSA) storage.                                             *   FILE 819\n//*                                                                 *   FILE 819\n//*  It has four Functions: UPDATE, DELETE, REMOVE, and REPOINT.    *   FILE 819\n//*                                                                 *   FILE 819\n//*  Exec 'ICH' calls program ICHLOADR to UPDATE the module in      *   FILE 819\n//*  dynamic LPA (CSA) storage and to repoint the RCVT to the new   *   FILE 819\n//*  exit entry point.                                              *   FILE 819\n//*  (Does the same function as the SETPROG LPA,ADD MVS command     *   FILE 819\n//*  except that it also updates the RACF RCVT pointer which        *   FILE 819\n//*  points to the updated version of the exit in LPA (CSA)         *   FILE 819\n//*  storage.)                                                      *   FILE 819\n//*                                                                 *   FILE 819\n//*  It can also be used to DELETE a dynamically loaded RACF Exit   *   FILE 819\n//*  from dynamic LPA (CSA) storage and to unpoint (zero) the       *   FILE 819\n//*  RACF RCVT pointer to it to indicate to RACF that the current   *   FILE 819\n//*  exit is no longer in RACF service.                             *   FILE 819\n//*  (Does the same function as the SETPROG LPA,DELETE MVS command  *   FILE 819\n//*  except that it also unpoints the exit from RACF.)              *   FILE 819\n//*  Therefore, since the RCVT pointer is zeroed, it must be        *   FILE 819\n//*  repointed by issuing a subsequent UPDATE or REPOINT function   *   FILE 819\n//*  to put it back into service.)                                  *   FILE 819\n//*                                                                 *   FILE 819\n//*  It can also be used to REMOVE (unpoint) a RACF exit to take    *   FILE 819\n//*  the exit out of RACF service without affecting the exit in     *   FILE 819\n//*  LPA storage.  The exit will remain out of service for RACF     *   FILE 819\n//*  until the next IPL or until the next dynamic update or         *   FILE 819\n//*  until the next REPOINT function is issued.                     *   FILE 819\n//*                                                                 *   FILE 819\n//*  It can also be used to REPOINT a RACF exit to put the latest   *   FILE 819\n//*  version of a RACF Exit back into RACF service without          *   FILE 819\n//*  affecting the exit in LPA storage.                             *   FILE 819\n//*  This function is the opposite of the REMOVE function and       *   FILE 819\n//*  can be used subsequent to issuing the REMOVE function to       *   FILE 819\n//*  put an exit back into service.                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*  ASSUMPTIONS:                                                   *   FILE 819\n//*  ------------                                                   *   FILE 819\n//*                                                                 *   FILE 819\n//*  This exec only provides the RCVT pointer address for the       *   FILE 819\n//*  following RACF exits:                                          *   FILE 819\n//*                                                                 *   FILE 819\n//*  ICHAUTAB                                                       *   FILE 819\n//*  ICHCNX00                                                       *   FILE 819\n//*  ICHDEX01                                                       *   FILE 819\n//*  ICHDEX11                                                       *   FILE 819\n//*  ICHNCV00                                                       *   FILE 819\n//*  ICHPWX01                                                       *   FILE 819\n//*  ICHPWX11                                                       *   FILE 819\n//*  ICHRCX01                                                       *   FILE 819\n//*  ICHRCX02                                                       *   FILE 819\n//*  ICHRDX01                                                       *   FILE 819\n//*  ICHRDX02                                                       *   FILE 819\n//*  ICHRFX01                                                       *   FILE 819\n//*  ICHRFX02                                                       *   FILE 819\n//*  ICHRFX03                                                       *   FILE 819\n//*  ICHRFX04                                                       *   FILE 819\n//*  ICHRIN03                                                       *   FILE 819\n//*  ICHRIX01                                                       *   FILE 819\n//*  ICHRIX02                                                       *   FILE 819\n//*  ICHRLX01                                                       *   FILE 819\n//*  ICHRLX02                                                       *   FILE 819\n//*                                                                 *   FILE 819\n//*  Please report any bugs to Terry Miller at ConocoPhillips.      *   FILE 819\n//*  Email: tkmille@ConocoPhillips.com                              *   FILE 819\n//*                                                                 *   FILE 819\n//*  DESCRIPTION OF PDS MEMBERS:                                    *   FILE 819\n//*  ---------------------------                                    *   FILE 819\n//*                                                                 *   FILE 819\n//*    $CHANGES - Change Log of the 'ICH' facility                  *   FILE 819\n//*    $$DOC    - 'ICH' facility 'README' file                      *   FILE 819\n//*    $INSTALL - Installation steps to install the 'ICH' facility  *   FILE 819\n//*    ICH      - Rexx exec to invoke the 'ICH' facility            *   FILE 819\n//*               (this exec calls program 'ICHLOADR')              *   FILE 819\n//*    ICHLOADR - Program to update a RACF module in LPA.           *   FILE 819\n//*    ASSEM    - JCL to assemble program 'ICHLOADR'.               *   FILE 819\n//*    HELPICH  - Help documentation for exec 'ICH'                 *   FILE 819\n//*               (this is the SYSHELP member for the 'ICH' exec)   *   FILE 819\n//*    $OBJECT  - Object deck of program 'ICHLOADR'                 *   FILE 819\n//*    LINKEDIT - JCL to link-edit program 'ICHLOADR' from the      *   FILE 819\n//*               object deck (member $OBJECT).                     *   FILE 819\n//*    COPYHELP - Help member install jcl to copy to SYSHELP file.  *   FILE 819\n//*    PROGCNTL - JCL to program-control security-protect           *   FILE 819\n//*               program 'ICHLOADR'.                               *   FILE 819\n//*    HELPICH  - Help documentation member for exec 'ICH'          *   FILE 819\n//*    SAMPDISP - Sample displays from the 'ICH' exec.              *   FILE 819\n//*                                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*  DISCLAIMER OF LIABILITY:                                       *   FILE 819\n//*  ------------------------                                       *   FILE 819\n//*                                                                 *   FILE 819\n//*                      DISCLAIMER                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*  Terry Miller and ConocoPhillips neither expresses nor implies  *   FILE 819\n//*  any warranty as to the fitness of this ICH facility.           *   FILE 819\n//*  The use of this facility and the results therefrom is entirely *   FILE 819\n//*  at the risk of the user.  Consequently, the user may modify    *   FILE 819\n//*  these programs in any way he/she thinks fit.                   *   FILE 819\n//*                                                                 *   FILE 819\n//*  All disclaimers that apply to CBT programs as described in     *   FILE 819\n//*  the \"Disclaimer Section\" of File 001 of the CBT Tape Doc       *   FILE 819\n//*  and on www.cbttape.org also apply to this package.             *   FILE 819\n//*  (SBG - 01/2010)                                                *   FILE 819\n//*                                                                 *   FILE 819\n//*  INSTALLATION TAILORING/CUSTOMIZATION:                          *   FILE 819\n//*  -------------------------------------                          *   FILE 819\n//*                                                                 *   FILE 819\n//*  Installation change to REXX exec 'ICH':                        *   FILE 819\n//*                                                                 *   FILE 819\n//*  You must change the loadlib name which contains the ICHLOADR   *   FILE 819\n//*  program in the CALL command.  Edit exec 'ICH' and then         *   FILE 819\n//*  issue a FIND for the eyecatcher text \"<= CHANGE LOADLIB\".      *   FILE 819\n//*                                                                 *   FILE 819\n//*  AUTHORIZATION:                                                 *   FILE 819\n//*  --------------                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*  Program ICHLOADR must reside in an APF-Authorized libary       *   FILE 819\n//*  and be linked as an authorized module.                         *   FILE 819\n//*                                                                 *   FILE 819\n//*  The Load Library containing the RACF Exit to fetch for the     *   FILE 819\n//*  LPA Update must also be in the APF List.  Normally, this       *   FILE 819\n//*  Loadlib would be SYS1.LPALIB (this is the default load         *   FILE 819\n//*  library if not specified when the ICH REXX exec is invoked),   *   FILE 819\n//*  but it can be overridden with the DA(dsname) parm when ICH     *   FILE 819\n//*  is invoked.                                                    *   FILE 819\n//*                                                                 *   FILE 819\n//*  Program ICHLOADR must reside in the IKJTSOxx 'Authorized       *   FILE 819\n//*  program names' table.                                          *   FILE 819\n//*                                                                 *   FILE 819\n//*  Program ICHLOADR should only be called by REXX Exec 'ICH'      *   FILE 819\n//*  to guarantee that an accurate RCVT offset value is being       *   FILE 819\n//*  processed.  Therefore, a token is passed from Exec 'ICH'       *   FILE 819\n//*  as a parameter to prevent an unauthorzied call to program      *   FILE 819\n//*  ICHLOADR.                                                      *   FILE 819\n//*                                                                 *   FILE 819\n//*  It is therefore incumbent upon users to carefully maintain     *   FILE 819\n//*  and security-protect the RCVT offset table which is            *   FILE 819\n//*  hard-coded in Exec 'ICH'.                                      *   FILE 819\n//*                                                                 *   FILE 819\n//*  It is HIGHLY recommended that program ICHLOADR be              *   FILE 819\n//*  program-control protectsd to prevent unauthorized users        *   FILE 819\n//*  from executing it.  This might be helpful for auditors         *   FILE 819\n//*  checking this program as well.                                 *   FILE 819\n//*                                                                 *   FILE 819\n//*  Program 'ICHLOADR' was named with the 'ICH' prefix to show     *   FILE 819\n//*  that it is related to RACF activity.                           *   FILE 819\n//*  The author realizes that someday IBM may release a version     *   FILE 819\n//*  of RACF (or SECURITY SERVER product) which contains a          *   FILE 819\n//*  program called 'ICHLOADR', but I will cross that               *   FILE 819\n//*  maintenance bridge when it happens.                            *   FILE 819\n//*                                                                 *   FILE 819\n//*  CERTIFICATION                                                  *   FILE 819\n//*  -------------                                                  *   FILE 819\n//*                                                                 *   FILE 819\n//*  Program ICHLOADR is certified for Z/OS 1.1 and higher.         *   FILE 819\n//*                                                                 *   FILE 819\n//*  PROBLEM REPORTING                                              *   FILE 819\n//*  -----------------                                              *   FILE 819\n//*                                                                 *   FILE 819\n//*  Please report any bugs or suggestions for improvement to:      *   FILE 819\n//*         Terry Miller at email: Tkmille@ConocoPhillips.com       *   FILE 819\n//*                                                                 *   FILE 819\n//* ICH EXEC SYNTAX                                                 *   FILE 819\n//* ---------------                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//* INVOCATION SYNTAX:                                              *   FILE 819\n//*                                                                 *   FILE 819\n//*    ICH ?                                                        *   FILE 819\n//*    ICH membername \u00dd UPDATE | DELETE | REMOVE | REPOINT \u00a8        *   FILE 819\n//*                   \u00dd DA(dsname)               \u00a8                  *   FILE 819\n//*                   \u00dd TEST | SIMULATE          \u00a8                  *   FILE 819\n//*                   \u00dd DEBUG                    \u00a8                  *   FILE 819\n//*                                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//* EXAMPLE INVOCATION DISPLAY FROM EXEC 'ICH'                      *   FILE 819\n//* ------------------------------------------                      *   FILE 819\n//*                                                                 *   FILE 819\n//* %ICH  ICHRCX02 UPDATE                                           *   FILE 819\n//*                                                                 *   FILE 819\n//* ************************* Top of Data ************************* *   FILE 819\n//*                                                                 *   FILE 819\n//* 2010.015         III   CCCC H   H     DYNAMIC RACF      Friday  *   FILE 819\n//* 14:40:00          I   C     H   H     EXIT UPDATE    January 15 *   FILE 819\n//*                   I   C     HHHHH     ASSISTANCE FOR      SYT   *   FILE 819\n//* IPL Date:         I   C     H   H      MODULE          AD81/SYT *   FILE 819\n//* 01/15/2010.015   III   CCCC H   H     ICHRCX02                  *   FILE 819\n//*                                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//* ICH      - Module      = ICHRCX02                               *   FILE 819\n//* ICH      - Dsname      = SYS1.LPALIB                            *   FILE 819\n//* ICH      - Function    = UPDATE                                 *   FILE 819\n//* ICH      - RCVT Offset = 000000A4                               *   FILE 819\n//* ICH      - Test Parm   =                                        *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - V01.01.01 2010.015 14:40:00                          *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.                *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - RACF EXIT MODULE IS ICHRCX02                         *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB                       *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02            *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: BA4DE000   *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C         *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4         *   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.*   FILE 819\n//*                                                                 *   FILE 819\n//* ICHLOADR - RETURN CODE = 0                                      *   FILE 819\n//*                                                                 *   FILE 819\n//*                                                                 *   FILE 819\n//* **************************** Bottom of Data ******************* *   FILE 819\n//*                                                                 *   FILE 819\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASSEM": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x000\\x00\\x96\\x19?\\x01\\x10\\x01O\\x13P\\x00#\\x00 \\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1996-07-11T00:00:00", "modifydate": "2010-01-14T13:50:30", "lines": 35, "newlines": 32, "modlines": 0, "user": "TKMILLE"}, "text": "//*\n//* JOBCARD GOES HERE ...\n//*\n//* ASSEMBLE AND LINK PROGRAM 'ICHLOADR'.\n//*\n//* CHANGE THE SYSIN PDS DATASET NAME TO THE RECEIVED PDS NAME\n//* FOR THE 'ICHLOADR' SOURCE CODE.\n//*\n//* CHANGE THE TARGET SYSLMOD LOAD LIBRARY BELOW TO YOUR APF-\n//* AUTHORIZED LOAD LIBRARY.\n//*\n//ASSEMBLE EXEC PGM=ASMA90,\n//         PARM='DECK,NOOBJECT,LINECOUNT(55)'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(23476,(150,50),RLSE)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSPUNCH DD DSN=&&LOADSET,\n//         DISP=(NEW,PASS,DELETE),UNIT=SYSDA,\n//         SPACE=(3200,(400,050),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//SYSIN    DD DISP=SHR,DSN=FILE819.ICH(ICHLOADR)     <= CHANGE THIS\n//*\n//LINKEDIT EXEC PGM=IEWL,COND=(5,LT,ASSEMBLE),\n//         PARM='LIST,LET,MAP,XREF,RENT,REUS'\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=(OLD,DELETE),DSN=&&LOADSET\n//         DD DDNAME=SYSIN\n//SYSLMOD  DD DISP=SHR,DSN=MY.APFAUTHD.LOADLIB       <= CHANGE THIS\n//SYSUT1   DD UNIT=SYSDA,SPACE=(23476,(150,50),RLSE)\n//SYSIN    DD *\n ENTRY ICHLOADR\n SETCODE AC(1)\n NAME  ICHLOADR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYHELP": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x008\\x01\\x10\\x01O\\x01\\x10\\x01O\\x13T\\x00\\x16\\x00\\x1e\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2010-01-14T00:00:00", "modifydate": "2010-01-14T13:54:38", "lines": 22, "newlines": 30, "modlines": 0, "user": "TKMILLE"}, "text": "//*\n//* JOBCARD GOES HERE ...\n//*\n//* COPY AND RENAME THE SYSHELP MEMBER INTO ONE OF YOUR \"SYSHELP\"\n//* ALLOCATION CONCATENATION LIBRARIES. RENAMES MEMBER 'HELPICH'\n//*\n//* IT RENAMES MEMBER 'HELPICH' TO NEWNAME MEMBER 'ICH' FOR ONE\n//* OF YOUR 'SYSHELP' ALLOCATED LIBRARIES.\n//*\n//* CHANGE THE 'INPUT'  PDS LIBRARY BELOW TO THE RECEIVED PDS NAME.\n//* CHANGE THE 'OUTPUT' PDS TO ONE OF YOUR 'SYSHELP' LIBRARIES.\n//*\n//COPYHELP    EXEC PGM=IEBCOPY\n//SYSPRINT    DD SYSOUT=*\n//INPUT       DD DISP=SHR,DSN=SMPE.ICH                 <= CHANGE THIS\n//OUTPUT      DD DISP=SHR,DSN=MY.SYSHELP.LIBRARY       <= CHANGE THIS\n//SYSUT1      DD UNIT=SYSDA,SPACE=(TRK,(001,001))\n//SYSUT2      DD UNIT=SYSDA,SPACE=(TRK,(001,001))\n//SYSIN       DD *\n         COPY    OUTDD=OUTPUT,INDD=((INPUT,R))\n         SELECT  MEMBER=((HELPICH,ICH,R))\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELPICH": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01;\\x00F\\x01\\x04%\\x9f\\x01\\x10\\x02\\x1f\\x13\\t\\x01F\\x00@\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.59", "flags": 0, "createdate": "2004-09-15T00:00:00", "modifydate": "2010-01-21T13:09:46", "lines": 326, "newlines": 64, "modlines": 0, "user": "TKMILLE"}, "text": ")F FUNCTION - ICH Rexx Exec Facility to Update RACF Exits   01/21/2010\n\n\n    PURPOSE:\n\n         This exec will allow a user to update/delete/remove a\n         RACF Security Server Exit dynamically without requiring\n         an IPL outage.\n\n         This exec can perform any of four functions.\n\n         It can UPDATE or DELETE a module from dynamic LPA (just\n         as the SETPROG ADD/DELETE LPA MVS command does) or it\n         can REMOVE (unpoint) a RACF exit or REPOINT a RACF Exit.\n         REMOVE takes the exit out of RACF service and REPOINT\n         puts the exit back into service.\n\n         These four functions are documented below.\n\n         In order for RACF (Security Server) to recognize the change\n         in the exit module's status, the RCVT (RACF COMMUNICATION\n         VECTOR TABLE) pointer must be repointed to the new Entry\n         point address (for an Update function) or it must be\n         zeroed to remove and exit from RACF use.\n\n         This exec may be called in TEST/SIMULATE mode to simulate\n         an update to an exit.\n\n         This exec calls APF-Authorized program ICHLOADR to perform\n         these functions.\n\n         The Load Library containing the RACF Exit to fetch for the\n         LPA Update must also be in the APF List.  Normally, this\n         Loadlib would be SYS1.LPALIB (this is the default load\n         library if not specified when the ICH REXX exec is invoked),\n         but it can be overridden with the DA(dsname) parm when ICH\n         is invoked.\n\n    FUNCTIONS:\n\n         There are four functions for this exec.\n\n         1) UPDATE - This function loads a new version of a RACF\n            exit into dynamic LPA (CSA memory) (same as the\n            SETPROG LPA,ADD command).  It also repoints RACF to\n            use the updated module (updates the exits RCVT pointer).\n            The user must specify the load library to fetch the exit\n            from to load into dynamic LPA (CSA).  This exec will\n            default to load library SYS1.LPALIB unless specified\n            otherwise when the exec is invoked.\n            (Does the same function as the SETPROG LPA,ADD MVS\n            command except that it also updates the RACF RCVT\n            pointer which points to the updated version of the\n            exit in LPA (CSA) storage.)\n\n            If none of these four function values are passed as\n            parameters to this exec, it will default to use the\n            UPDATE function.\n\n         2) DELETE - This function deletes a RACF exit from dynamic\n            LPA (same as SETPROG LPA,DELETE command) and then also\n            loads zeros into the RACF RCVT pointer to indicate to\n            RACF that the exit is not being used (until the next\n            IPL or next dynamic update).\n            (Does the same function as the SETPROG LPA,DELETE\n            MVS command except that it also unpoints (zeros) the\n            RACF RCVT pointer which points to it in LPA storage.)\n\n         3) REMOVE - This function only unpoints the RACF exit\n            (loads zeros into the RACF RCVT point for that Exit)\n            to take the exit out of RACF service (until the next\n            IPL or next dynamic update). This function does not\n            actually affect the exit module itself.  It only\n            updates the RACF RCVT pointer which points to it.\n\n         4) REPOINT - This function obtains the most current EP\n            address for the exit from LPA storage and then repoints\n            RACF to the exit to put the exit back into service for\n            RACF to use.  This would normally be done after a\n            previous REMOVE function has taken the exit out of\n            service for RACF to put the exit back into service.\n            This function does not actually affect the exit\n            module in LPA storage.  It only updates the RACF\n            RCVT pointer which points to it.\n            This function is the opposite of the REMOVE function\n            and can be used subsequent to issuing REMOVE funtion\n            to put the exit back into service.\n\n\n)X SYNTAX   - ICH Rexx Exec Facility to Update RACF Exits\n\n    INVOCATION SYNTAX:\n\n       ICH ?\n       ICH membername [ UPDATE | DELETE | REMOVE | REPOINT ]\n                      [ DA(dsname)               ]\n                      [ TEST | SIMULATE          ]\n                      [ DEBUG                    ]\n\n       Where membername is one of the following RACF User Exits:\n\n        ICHAUTAB\n        ICHCNX00\n        ICHDEX01\n        ICHDEX11\n        ICHNCV00\n        ICHPWX01\n        ICHPWX11\n        ICHRCX01\n        ICHRCX02\n        ICHRDX01\n        ICHRDX02\n        ICHRFX01\n        ICHRFX02\n        ICHRFX03\n        ICHRFX04\n        ICHRIN03\n        ICHRIX01\n        ICHRIX02\n        ICHRLX01\n        ICHRLX02\n\n\n)O OPERANDS - ICH Rexx Exec Facility to Update RACF Exits\n\n    OPERANDS:\n\n     MEMBERNAME - Specifies the RACF Exit member name for which to\n                  obtain the absolute storage address.\n                  THis must be the first positional parameter passed\n                  to ICH (unless a \"?\" is passed for help query).\n\n     DA(dsname) - Specifies the load library dataset name to be used\n                  to fetch the RACF Module from to stow in CSA for\n                  the LLA update. If this parameter is omitted, the\n                  RACF exit module will be fetched from default\n                  load library 'SYS1.LPALIB'.\n\n     DSN(dsname)- Same as DA(dsname).  See above.\n\n     The following four parameters are processed as the FUNCTION\n     literals to be passed to program ICHLOADR.\n     If none of these four function values are entered, the\n     default function is \"UPDATE\".\n\n     UPDATE     - Specifies that the module passed should be updated\n                  in CSA (LLA Update) to replace the existing\n                  module in LLA and repoint the RACF RCVT pointer\n                  to that version of the exit.\n                  This is the DEFAULT FUNCTION if no function\n                  parameters are entered when the 'ICH' exec is\n                  invoked.\n\n     DELETE     - Specifies that the current version of the RACF Exit\n                  should be deleted from dynamic LPA (CSA) storage.\n                  Also, the RACF RCVT pointer to the exit is zerod\n                  (unpointed) to remove it from RACF service (until\n                  the next IPL or next dynamic LPA update).\n\n     REMOVE     - Specifies that the module passed should be removed\n                  from RACF service (until the next IPL or until the\n                  next dynamic update). The RACF RCVT pointer to the\n                  the exit is zerod (unpointed).\n                  The exit is not touched or updated in LPA (CSA)\n                  storage.  Only the pointer is reset to Zero.\n\n     REPOINT    - Specifies that the module passed should be repointed\n                  with the current version of the exit found in LPA\n                  (CSA) storage.  The RACF RCVT point to the exit is\n                  updated to point to the current version of the exit\n                  in LPA storage.  The module itself is not touched\n                  or updated in LPA storage.\n\n     The following two parameters are processed as the TESTPARM\n     literals to be passed to program ICHLOADR as execution-time\n     linkage parameters to make a 'test' pass without updating\n     any pointers.\n\n     TEST       - Specifies that a TEST execution should be performed\n                  without any update action.\n                  Performs the same action as the SIMULATE\n                  parameter.\n\n     SIMULATE   - Specifies that a TEST execution should be performed\n                  without any update action.\n                  Performs the same action as the TEST parameter.\n\n    CUSTOMIZATION:\n\n       Program ICHLOADR must reside in an APF-authorized Load\n       Library (either PDS or PDSE).  This load library can\n       be in the LinkList or otherwise.  The user has to option\n       in this exec to call program ICHLOADR via a search through\n       the LinkList or via an explicit call to a Load Library.\n\n       If ICHLOADR is called explicitly from a load library, you\n       must comment out the call thru the Linklist and uncomment\n       the call from a specific library. Do a FIND on the\n       You must change the loadlib name whic contains the ICHLOADR\n       eyecather text \"<= CHANGE LOADLIB\" to modify the specific\n       load library.\n\n       Program ICHLOADR must reside in the 'Authorized Programs'\n       section of the IKJTSOxx MVS parmlib member.\n\n       It is also recommended that ICHLOADR 'program access\n       control' protected in RACF to restrict its use to only those\n       users who have a legimate need to use it.\n\n\n    Documentation for Return Codes and Reason Codes returned from\n    the CSVQUERY and CSVDYLPA macros in program ICHLOADR:\n\n       CSVQUERY Documentation:\n       See IBM Manual \"MVS Programming Assembler Services Reference\n       ABEND-HSPSERV SA22-7606-xx\" \"Contents Supervisor Query Service\"\n       for documentation on the CSVQUERY macro:\n\n         Z/oS 1.9 Link to GA22-7606-08:\n           http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n           topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm\n\n       CSVDYLPA Documentation:\n       See IBM Manual \"MVS Authorized Assembler Services Reference\n       ALE-DYN SA22-7609-xx\" \"CSVDYLPA - Provide Dynamic LPA Services\"\n       for documentation on the CSVDYLPA macro.\n\n         Z/oS 1.9 Link to GA22-7606-08:\n           http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n           topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm\n\n\n    RACF RCVT DATA AREA:\n\n    See RCVT dsect macro 'SYS1.MACLIB(ICHPRCVT)'\n\n    See IBM Manual \"Security Server RACF Data Areas GA22-7680-xx\"\n    for the RCVT (RACF Communication Vector Table) offsets:\n\n      Z/oS 1.9 Link to GA22-7680-09:\n        http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n        topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm\n\n\n      Z/oS 1.11 Link to GA22-7680-11:\n        http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp?\n        topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm\n\n\n    SAMPLE INVOCATIONS OF EXEC ICH:\n\n       ICH ?\n       ICH membername                    (Prompts for Function)\n       ICH membername UPDATE\n       ICH membername DA(dsname)\n       ICH membername DA(dsname) UPDATE\n       ICH membername UPDATE DA(dsname)\n       ICH membername UPDATE TEST\n       ICH membername UPDATE SIMULATE\n       ICH membername UPDATE DA(dsname) TEST\n       ICH membername UPDATE DA(dsname) SIMULATE (same as previous)\n       ICH membername DELETE\n       ICH membername DELETE TEST\n       ICH membername DELETE SIMULATE\n       ICH membername REMOVE\n       ICH membername REMOVE TEST\n       ICH membername REMOVE SIMULATE\n       ICH membername REPOINT\n       ICH membername REPOINT TEST\n       ICH membername REPOINT SIMULATE\n\n    RETURN CODES:\n\n         0  - Successful Call to ICHLOADR\n         8  - Program ICHLOADR is not APF-Authorized\n         9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call\n        10  - CSVQUERY for Exit Module failed after CSVDYLPA call\n        11  - Entry Point Address did not change after CSVDYLPA call\n        12  - Miscellaneous Errors\n\n\n EXAMPLE INVOCATION DISPLAY FROM EXEC 'ICH'\n ------------------------------------------\n\n %ICH  ICHRCX02 UPDATE\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:00          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:00\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: BA4DE000\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n\n))END OF HELP\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICH": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x02\\x01\\x10\\x01_\\x01\\x10\\x02\\x1f\\x141\\x02\\xee\\x02\\xee\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2010-01-15T00:00:00", "modifydate": "2010-01-21T14:31:02", "lines": 750, "newlines": 750, "modlines": 0, "user": "TKMILLE"}, "text": "/*  REXX ICH                                                          */\n/**********************************************************************/\n/*                                                                    */\n/*              III   CCCC H   H                                      */\n/*               I   C     H   H                                      */\n/*  MODULE  =    I   C     HHHHH                                      */\n/*               I   C     H   H                                      */\n/*              III   CCCC H   H                                      */\n/*                                                                    */\n/*  #\u00a2# AUTHOR             TKMILLE 01/11/2010                         */\n/*  #\u00a2# LAST UPDATE        TKMILLE 01/21/2010                         */\n/*                                                                    */\n/*  PURPOSE:                                                          */\n/*       This program was written to provide the capability to        */\n/*       dynamically update, delete, and remove RACF Exits            */\n/*       without having to IPL.                                       */\n/*                                                                    */\n/*       This exec can perform any of four functions.                 */\n/*       It can UPDATE or DELETE a module from dynamic LPA (just      */\n/*       as the SETPROG LPA,ADD/DELETE MVS command does) or it        */\n/*       can REMOVE an exit from RACF use until the next IPL          */\n/*       or it can REPOINT an exit to put it back into RACF service.  */\n/*       These four functions are documented below.                   */\n/*                                                                    */\n/*       In order for RACF (Security Server) to recognize the change  */\n/*       in the exit module's status, the RCVT (RACF COMMUNICATION    */\n/*       VECTOR TABLE) pointer must be repointed to the new Entry     */\n/*       point address (for an Update function) or it must be         */\n/*       zeroed to remove and exit from RACF use.                     */\n/*                                                                    */\n/*       This exec may be called in TEST/SIMULATE mode to simulate    */\n/*       an update to an exit.                                        */\n/*                                                                    */\n/*       This exec calls APF-Authorized program ICHLOADR to perform   */\n/*       these functions.                                             */\n/*                                                                    */\n/*  MAINTENANCE:                                                      */\n/*                                                                    */\n/*       This exec contains a table of the RACF exits which exist     */\n/*       today (many of them anyway) and their respective RCVT        */\n/*       offset values (see the RCVT comments below) coded in         */\n/*       their hexadecimal values.                                    */\n/*                                                                    */\n/*       If the author overlooked any RACF Exits or tables, those     */\n/*       omitted exits can be added to the table with their           */\n/*       RCVT offset values (in Hexadecimal format).                  */\n/*                                                                    */\n/*  FUNCTIONS:                                                        */\n/*                                                                    */\n/*       There are four functions for this exec.                      */\n/*                                                                    */\n/*       1) UPDATE - This function loads a new version of a RACF      */\n/*          exit into dynamic LPA (CSA memory) (same as the           */\n/*          SETPROG LPA,ADD command).  It also repoints RACF to       */\n/*          use the updated module (updates the exits RCVT pointer).  */\n/*          The user must specify the load library to fetch the exit  */\n/*          from to load into dynamic LPA (CSA).  This exec will      */\n/*          default to load library SYS1.LPALIB unless specified      */\n/*          otherwise when the exec is invoked.                       */\n/*          (Does the same function as the SETPROG LPA,ADD MVS command*/\n/*          except that it also updates the RACF RCVT pointer which   */\n/*          points to the updated version of the exit in LPA (CSA)    */\n/*          storage.)                                                 */\n/*                                                                    */\n/*          If none of these four function values are passed as       */\n/*          parameters to this exec, it will default to use the       */\n/*          UPDATE function if the user confirms the default.         */\n/*                                                                    */\n/*       2) DELETE - This function deletes a RACF exit from dynamic   */\n/*          LPA (same as SETPROG LPA,DELETE command) and then also    */\n/*          loads zeros into the RACF RCVT pointer to indicate to     */\n/*          RACF that the exit is not being used (until the next      */\n/*          IPL or next dynamic update).                              */\n/*          (Does the same function as the SETPROG LPA,DELETE         */\n/*          MVS command except that it also unpoints (zeros) the      */\n/*          RACF RCVT pointer which points to it in LPA storage.)     */\n/*                                                                    */\n/*       3) REMOVE - This function only unpoints the RACF exit        */\n/*          (loads zeros into the RACF RCVT pointer for that Exit)    */\n/*          to take the exit out of RACF service (until the next      */\n/*          IPL or next dynamic update). This function does not       */\n/*          actually affect the exit module itself.  It only          */\n/*          updates the RACF RCVT pointer which points to it.         */\n/*                                                                    */\n/*       4) REPOINT - This function obtains the most current EP       */\n/*          address for the exit from LPA storage and then repoints   */\n/*          RACF to the exit to put the exit back into service for    */\n/*          RACF to use.  This would normally be done after a         */\n/*          previous REMOVE function has taken the exit out of        */\n/*          service for RACF to put the exit back into service.       */\n/*          This function does not actually affect the exit           */\n/*          module in LPA storage.  It only updates the RACF          */\n/*          RCVT pointer which points to it.                          */\n/*                                                                    */\n/*                                                                    */\n/*  INVOCATION SYNTAX:                                                */\n/*                                                                    */\n/*     ICH ?                                                          */\n/*     ICH membername [ UPDATE | REMOVE | DELETE | REPOINT ]          */\n/*                    [ DA(dsname)               ]                    */\n/*                    [ TEST | SIMULATE          ]                    */\n/*                    [ DEBUG                    ]                    */\n/*                                                                    */\n/*     Where membername is one of the following RACF User Exits:      */\n/*                                                                    */\n/*      ICHAUTAB                                                      */\n/*      ICHCNX00                                                      */\n/*      ICHDEX01                                                      */\n/*      ICHDEX11                                                      */\n/*      ICHNCV00                                                      */\n/*      ICHPWX01                                                      */\n/*      ICHPWX11                                                      */\n/*      ICHRCX01                                                      */\n/*      ICHRCX02                                                      */\n/*      ICHRDX01                                                      */\n/*      ICHRDX02                                                      */\n/*      ICHRFX01                                                      */\n/*      ICHRFX02                                                      */\n/*      ICHRFX03                                                      */\n/*      ICHRFX04                                                      */\n/*      ICHRIN03                                                      */\n/*      ICHRIX01                                                      */\n/*      ICHRIX02                                                      */\n/*      ICHRLX01                                                      */\n/*      ICHRLX02                                                      */\n/*                                                                    */\n/*  PARAMETERS:                                                       */\n/*                                                                    */\n/*   MEMBERNAME - Specifies the RACF Exit member name for which to    */\n/*                obtain the absolute storage address.                */\n/*                This must be the first positional parameter passed  */\n/*                to ICH (unless a \"?\" is passed for help query).     */\n/*                                                                    */\n/*   DA(dsname) - Specifies the load library dataset name to be used  */\n/*                to fetch the RACF Module from to stow in CSA for    */\n/*                the LLA update. If this parameter is omitted, the   */\n/*                RACF exit module will be fetched from default       */\n/*                load library 'SYS1.LPALIB'.                         */\n/*                                                                    */\n/*   DSN(dsname)- Same as DA(dsname).  See above.                     */\n/*                                                                    */\n/*   The following three parameters are processed as the FUNCTION     */\n/*   literals to be passed to program ICHLOADR.                       */\n/*   If none of these three function values are entered, the          */\n/*   default function is \"UPDATE\" if the user confirms the default.   */\n/*                                                                    */\n/*   UPDATE     - Specifies that the module passed should be updated  */\n/*                in CSA (LLA Update) to replace the existing         */\n/*                module in LLA and repoint the RACF RCVT pointer     */\n/*                to that version of the exit.                        */\n/*                This is the DEFAULT FUNCTION if no function         */\n/*                parameters are entered when the 'ICH' exec is       */\n/*                invoked if the user confirms the default.           */\n/*                                                                    */\n/*   DELETE     - Specifies that the current version of the RACF Exit */\n/*                should be deleted from dynamic LPA (CSA) storage.   */\n/*                Also, the RACF RCVT pointer to the exit is zerod    */\n/*                (unpointed) to remove it from RACF service (until   */\n/*                the next IPL or next dynamic LPA update).           */\n/*                                                                    */\n/*   REMOVE     - Specifies that the module passed should be removed  */\n/*                from RACF service (until the next IPL or until the  */\n/*                next dynamic update). The RACF RCVT pointer to the  */\n/*                the RACF exit is zerod (unpointed).                 */\n/*                The RACF exit is not affected in LPA storage.       */\n/*                It only resets the RACF RCVT pointer to Zero.       */\n/*                                                                    */\n/*   REPOINT    - Specifies that the module passed should be repointed*/\n/*                with the current version of the exit found in LPA   */\n/*                (CSA) storage.  The RACF RCVT point to the exit is  */\n/*                updated to point to the current version of the exit */\n/*                in LPA storage.  The module itself is not affected  */\n/*                in LPA storage.  It only updates the RACF RCVT      */\n/*                pointer which points to it in LPA storage.          */\n/*                                                                    */\n/*                                                                    */\n/*   The following two parameters are processed as the TESTPARM       */\n/*   literals to be passed to program ICHLOADR as execution-time      */\n/*   linkage parameters to make a 'test' pass without updating        */\n/*   any pointers.                                                    */\n/*                                                                    */\n/*   TEST       - Specifies that a TEST execution should be performed */\n/*                without any update action.                          */\n/*                Performs the same action as the SIMULATE            */\n/*                parameter.                                          */\n/*                                                                    */\n/*   SIMULATE   - Specifies that a TEST execution should be performed */\n/*                without any update action.                          */\n/*                Performs the same action as the TEST parameter.     */\n/*                                                                    */\n/*  CUSTOMIZATION:                                                    */\n/*                                                                    */\n/*     Program ICHLOADR must reside in an APF-authorized Load         */\n/*     Library (either PDS or PDSE).  This load library can           */\n/*     be in the LinkList or otherwise.  The user has to option       */\n/*     in this exec to call program ICHLOADR via a search through     */\n/*     the LinkList or via an explicit call to a Load Library.        */\n/*                                                                    */\n/*     If ICHLOADR is called explicitly from a load library, you      */\n/*     must comment out the call thru the Linklist and uncomment      */\n/*     the call from a specific library. Do a FIND on the             */\n/*     You must change the loadlib name whic contains the ICHLOADR    */\n/*     eyecather text \"<= CHANGE LOADLIB\" to modify the specific      */\n/*     load library.                                                  */\n/*                                                                    */\n/*     Program ICHLOADR must reside in the 'Authorized Programs'      */\n/*     section of the IKJTSOxx MVS parmlib member.                    */\n/*                                                                    */\n/*     It is also recommended that ICHLOADR 'program access           */\n/*     control' protected in RACF to restrict its use to only those   */\n/*     users who have a legimate need to use it.                      */\n/*                                                                    */\n/*     The Load Library containing the RACF Exit to fetch for the     */\n/*     LPA Update must also be in the APF List.  Normally, this       */\n/*     Loadlib would be SYS1.LPALIB (this is the default load         */\n/*     library if not specified when the ICH REXX exec is invoked),   */\n/*     but it can be overridden with the DA(dsname) parm when ICH     */\n/*     is invoked.                                                    */\n/*                                                                    */\n/*  Documentation for Return Codes and Reason Codes returned from     */\n/*  the CSVQUERY and CSVDYLPA macros in program ICHLOADR:             */\n/*                                                                    */\n/*    CSVQUERY Documentation:                                         */\n/*    See IBM Manual \"MVS Programming Assembler Services Reference    */\n/*    ABEND-HSPSERV SA22-7606-xx\" \"Contents Supervisor Query Service\" */\n/*    for documentation on the CSVQUERY macro:                        */\n/*                                                                    */\n/*     Z/oS 1.9 Link to GA22-7606-08:                                 */\n/*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp? */\n/*       topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm                   */\n/*                                                                    */\n/*    CSVDYLPA Documentation:                                         */\n/*    See IBM Manual \"MVS Authorized Assembler Services Reference     */\n/*    ALE-DYN SA22-7609-xx\" \"CSVDYLPA - Provide Dynamic LPA Services\" */\n/*    for documentation on the CSVDYLPA macro.                        */\n/*                                                                    */\n/*     Z/oS 1.9 Link to GA22-7606-08:                                 */\n/*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp? */\n/*       topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm                */\n/*                                                                    */\n/*  RCVT DATA AREA:                                                   */\n/*                                                                    */\n/*  See RCVT dsect macro 'SYS1.MACLIB(ICHPRCVT)'                      */\n/*                                                                    */\n/*  See IBM Manual \"Security Server RACF Data Areas GA22-7680-xx\"     */\n/*  for the RCVT (RACF Communication Vector Table) offsets:           */\n/*                                                                    */\n/*    Z/oS 1.9 Link to GA22-7680-09:                                  */\n/*      http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  */\n/*      topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm                 */\n/*                                                                    */\n/*                                                                    */\n/*    Z/oS 1.11 Link to GA22-7680-11:                                 */\n/*      http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp? */\n/*      topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm                */\n/*                                                                    */\n/*                                                                    */\n/*  SAMPLE INVOCATIONS OF EXEC ICH:                                   */\n/*                                                                    */\n/*     ICH ?                                                          */\n/*     ICH membername                    (Prompts for Function)       */\n/*     ICH membername UPDATE                                          */\n/*     ICH membername DA(dsname)                                      */\n/*     ICH membername DA(dsname) UPDATE                               */\n/*     ICH membername UPDATE DA(dsname)                               */\n/*     ICH membername UPDATE TEST                                     */\n/*     ICH membername UPDATE SIMULATE                                 */\n/*     ICH membername UPDATE DA(dsname) TEST                          */\n/*     ICH membername UPDATE DA(dsname) SIMULATE (same as previous)   */\n/*     ICH membername DELETE                                          */\n/*     ICH membername DELETE TEST                                     */\n/*     ICH membername DELETE SIMULATE                                 */\n/*     ICH membername REMOVE                                          */\n/*     ICH membername REMOVE TEST                                     */\n/*     ICH membername REMOVE SIMULATE                                 */\n/*     ICH membername REPOINT                                         */\n/*     ICH membername REPOINT TEST                                    */\n/*     ICH membername REPOINT SIMULATE                                */\n/*                                                                    */\n/*   RETURN CODES:                                                    */\n/*                                                                    */\n/*       0  - Successful Call to ICHLOADR                             */\n/*       8  - Program ICHLOADR is not APF-Authorized                  */\n/*       9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call  */\n/*      10  - CSVQUERY for Exit Module failed after CSVDYLPA call     */\n/*      11  - Entry Point Address did not change after CSVDYLPA call  */\n/*      12  - Miscellaneous Errors                                    */\n/*                                                                    */\n/**********************************************************************/\nTrace \"O\"\nversion_level = \"V01.01.01\"\nArg parms\nrtcd         = 0\nmsg_status   = MSG(\"OFF\")\nuserid       = Userid()\nPARSE source . How_Called .\nenvirnmt     = SYSVAR(\"sysenv\")\nnesting      = SYSVAR(\"sysnest\")\nsysicmd      = SYSVAR(\"sysicmd\")\nsyspcmd      = SYSVAR(\"syspcmd\")\nsysscmd      = SYSVAR(\"sysscmd\")\ndateg        = Substr(date(u),1,6)||Substr(date(s),1,4)\n\nsysid        = MVSVAR(\"sysname\")\n\nmember       = \"\"\nbad_member   = \"\"\ndsname       = \"SYS1.LPALIB\"       /* Default RACF Exit Load Library */\nfunction     = \"\"\nfunction_was = \"\"\ntestparm     = \"\"\nnbr_words    = WORDS(parms)\nresidue      = \"\"\ncurr_parm    = \"\"\ndsn_parm     = \"\"\ndebug        = \"\"\n\nmember       = WORD(parms,1)\nIf member    = \"\"  Then member = \"?\"\n\nIf LENGTH(member) = 8 & SUBSTR(member,1,3) = \"ICH\"   Then Nop\nElse member = \"?\"\n\nDo i = 1 to nbr_words    /* Parse through the execution parameters */\n  curr_parm = WORD(parms,i)\n  PARSE var curr_parm  \"DA(\"  parse_value1 \")\"\n  PARSE var curr_parm  \"DSN(\" parse_value2 \")\"\n\n  SELECT\n     WHEN ABBREV(\"DEBUG\",curr_parm,3) = 1                     Then Do\n          debug = \"DEBUG\"\n          Iterate\n        End\n     WHEN parse_value1 <> \"\" &  dsn_parm = \"\"                 Then Do\n          dsn_parm = \"Y\"\n          dsname  = parse_value1\n          dsname  = STRIP(dsname,both,\"'\") /* remove enclosed tics   */\n          dsname  = STRIP(dsname,both,'\"') /* remove enclosed quotes */\n          Iterate\n        End\n     WHEN parse_value2 <> \"\" &  dsn_parm = \"\"                 Then Do\n          dsn_parm = \"Y\"\n          dsname  = parse_value2\n          dsname  = STRIP(dsname,both,\"'\") /* remove enclosed tics   */\n          dsname  = STRIP(dsname,both,'\"') /* remove enclosed quotes */\n          Iterate\n        End\n     WHEN (curr_parm = \"UPDATE\" | curr_parm = \"DELETE\" | ,\n           curr_parm = \"REMOVE\" | curr_parm = \"REPOINT\") & ,\n           function = \"\"                                      Then Do\n              function     = curr_parm\n              Iterate\n        End\n     WHEN (curr_parm = \"TEST\" | curr_parm = \"SIMULATE\") & ,\n           testparm = \"\"                                      Then Do\n              testparm     = curr_parm\n              Iterate\n        End\n     OTHERWISE  Do  /* Pick up any residue (mispelled parms)  */\n        If residue = \"\" & LENGTH(curr_parm) <> 8 & ,\n           SUBSTR(curr_parm,1,3) <> \"ICH\"        & ,\n           SUBSTR(curr_parm,1,3) <> \"IRR\"                     Then Do\n           residue = curr_parm\n           Iterate\n        End\n     End\n  End\nEnd\n\nIf debug = \"DEBUG\"  Then Do\n   Trace \"I\"\nEnd\n\n/*********************************************************/\n/* Assume that any misspelled parm is the function code  */\n/*********************************************************/\n\nfunction_was = function\nIf function  = \"\" & residue <> \"\"  Then function = residue\n\nCall Get_RCVT_Offset\n\nCheck_Member_Name:\n\nIf member = \"?\" | bad_member= \"Y\"  Then Do\n   Clear\n   Say \"ICH exec invoked on\" dateg \"at\" time() \"on System\" sysid\n   Say \"                                                            \"\n   Say \"     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          \"\n   Say \"      I   C     H   H      E      X X  E     C              \"\n   Say \"      I   C     HHHHH      EEEE    X   EEEE  C              \"\n   Say \"      I   C     H   H      E      X X  E     C              \"\n   Say \"     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          \"\n   Say \"                                                            \"\n   Say ;\n   Say \"RACF Exit Member Name Entered =>\" member\n   Say ;\n   Say \"RACF Exit Member Name Was Omitted or was Invalid ...        \"\n   Say ;\n   Say \"ICH   membername     \"\n   Say ;\n   Say \"ICH   ?              \"\n   Say \"ICH   ICHAUTAB       \"\n   Say \"ICH   ICHCNX00       \"\n   Say \"ICH   ICHDEX01       \"\n   Say \"ICH   ICHDEX11       \"\n   Say \"ICH   ICHNCV00       \"\n   Say \"ICH   ICHPWX01       \"\n   Say \"ICH   ICHPWX11       \"\n   Say \"ICH   ICHRCX01       \"\n   Say \"ICH   ICHRCX02       \"\n   Say \"ICH   ICHRDX01       \"\n   Say \"ICH   ICHRDX02       \"\n   Say \"ICH   ICHRFX01       \"\n   Say \"ICH   ICHRFX02       \"\n   Say \"ICH   ICHRFX03       \"\n   Say \"ICH   ICHRFX04       \"\n   Say \"ICH   ICHRIN03       \"\n   Say \"ICH   ICHRIX01       \"\n   Say \"ICH   ICHRIX02       \"\n   Say \"ICH   ICHRLX01       \"\n   Say \"ICH   ICHRLX02       \"\n   Say ;\n   Say \"Enter RACF Exit Member Name\"\n   Say ;\n   member = \"\"\n   Pull member\n   Say ;\n   Select\n      When member = \"\"                       Then Signal End_Up\n      When ABBREV(\"QUIT\",member,4) = 1       Then Signal End_Up\n      When ABBREV(\"EXIT\",member,4) = 1       Then Signal End_Up\n      When ABBREV(\"END\",member,3) = 1        Then Signal End_Up\n      Otherwise Nop\n   End\n   Call Get_RCVT_Offset\n   If bad_member= \"Y\"      Then Signal Check_Member_Name\n   parms = member\" \"parms\nEnd\n\nSignal Check_Function\n\nGet_RCVT_Offset:   /* Member Edit Subroutine and RCVT Offset Load   */\n\nrcvt_offset = \"????\"\nIf member = \"ICHAUTAB\" Then rcvt_offset = \"000000E8\"X /*10?+3E0?+E8 */\nIf member = \"ICHCNX00\" Then rcvt_offset = \"000000B4\"X /*10?+3E0?+B4 */\nIf member = \"ICHDEX01\" Then rcvt_offset = \"000001A0\"X /*10?+3E0?+1A0*/\nIf member = \"ICHDEX11\" Then rcvt_offset = \"000002DC\"X /*10?+3E0?+2DC*/\nIf member = \"ICHNCV00\" Then rcvt_offset = \"000001A4\"X /*10?+3E0?+1A4*/\nIf member = \"ICHPWX01\" Then rcvt_offset = \"000000EC\"X /*10?+3E0?+EC */\nIf member = \"ICHPWX11\" Then rcvt_offset = \"000001DC\"X /*10?+3E0?+1DC*/\nIf member = \"ICHRCX01\" Then rcvt_offset = \"0000001C\"X /*10?+3E0?+1C */\nIf member = \"ICHRCX02\" Then rcvt_offset = \"000000A4\"X /*10?+3E0?+A4 */\nIf member = \"ICHRDX01\" Then rcvt_offset = \"00000020\"X /*10?+3E0?+20 */\nIf member = \"ICHRDX02\" Then rcvt_offset = \"0000017C\"X /*10?+3E0?+17C*/\nIf member = \"ICHRFX01\" Then rcvt_offset = \"000000C8\"X /*10?+3E0?+C8 */\nIf member = \"ICHRFX02\" Then rcvt_offset = \"000001AC\"X /*10?+3E0?+1AC*/\nIf member = \"ICHRFX03\" Then rcvt_offset = \"0000014C\"X /*10?+3E0?+14C*/\nIf member = \"ICHRFX04\" Then rcvt_offset = \"000002D8\"X /*10?+3E0?+2D8*/\nIf member = \"ICHRIN03\" Then rcvt_offset = \"0000019C\"X /*10?+3E0?+19C*/\nIf member = \"ICHRIX01\" Then rcvt_offset = \"00000018\"X /*10?+3E0?+18 */\nIf member = \"ICHRIX02\" Then rcvt_offset = \"000000A0\"X /*10?+3E0?+A0 */\nIf member = \"ICHRLX01\" Then rcvt_offset = \"000000CC\"X /*10?+3E0?+CC */\nIf member = \"ICHRLX02\" Then rcvt_offset = \"000000D0\"X /*10?+3E0?+D0 */\n\nbad_member     = \"\"\nIf rcvt_offset = \"????\"  Then Do\n   bad_member  = \"Y\"\nEnd\n\nReturn\n\nCheck_Function:\n\nIf function  = \"\" | ,\n   (function <> \"UPDATE\" & function <> \"DELETE\" & ,\n    function <> \"REMOVE\" & function <> \"REPOINT\")    Then Do\n   Clear\n   Say \"ICH exec invoked on\" dateg \"at\" time() \"on System\" sysid\n   Say \"                                                            \"\n   Say \"     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          \"\n   Say \"      I   C     H   H      E      X X  E     C              \"\n   Say \"      I   C     HHHHH      EEEE    X   EEEE  C              \"\n   Say \"      I   C     H   H      E      X X  E     C              \"\n   Say \"     III   CCCC H   H      EEEEE X   X EEEEE  CCCC          \"\n   Say \"                                                            \"\n   Say \"FUNCTION Value Entered =>\" function\n   Say ;\n   Say \"FUNCTION Parameter Was Omitted or was Invalid ...           \"\n   Say ;\n   Say \"Enter function (UPDATE | DELETE | REMOVE | REPOINT)    OR   \"\n   Say ;\n   Say \"Enter a NULL ENTRY to DEFAULT to FUNCTION=UPDATE       OR   \"\n   Say ;\n   Say \"Enter \"\"QUIT\"\" OR \"\"END\"\" To Terminate this exec.           \"\n   Say ;\n   function = \"\"\n   Pull function\n   Say ;\n   Select\n      When SUBSTR(function,1,4) = \"    \"    Then function = \"UPDATE\"\n      When function = \"\"                    Then function = \"UPDATE\"\n      When ABBREV(\"QUIT\",function,4) = 1    Then Signal End_Up\n      When ABBREV(\"EXIT\",function,4) = 1    Then Signal End_Up\n      When ABBREV(\"END\",function,3) = 1     Then Signal End_Up\n      When function = \"UPDATE\"              Then Nop\n      When function = \"DELETE\"              Then Nop\n      When function = \"REMOVE\"              Then Nop\n      When function = \"REPOINT\"             Then Nop\n      Otherwise                             Signal Check_Function\n   End\n   If function_was = \"\" Then parms = parms\" \"function\nEnd\n\nIf envirnmt = \"BACK\" Then Do                 /* Background Call ?     */\n   \"ALLOC FI(TEMP1)    DA(*) REUSE\"\n   \"ALLOC FI(SYSPRINT) DA(*) REUSE\"\n   Signal Alloc_Sysin_File\nEnd\n\nIf SYSVAR(\"sysispf\") <> \"ACTIVE\"  Then Do\n /* Make a recursive call to this exec to invoke the ISPF environment */\n   \"ISPF CMD(%ICH\" parms \")\"\n   Return 0\nEnd\n\n\"ALLOC FI(SYSPRINT) NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS\",\n       \"RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)\"\nalloc1_rc = rc\n\nIf alloc1_rc <> 0         Then Do\n   Say \"ICH error allocating SYSPRINT file in exec 'ICH'\"\n   rtcd = 12\n   Signal End_Up\nEnd\n\n\"ALLOC FI(TEMP1)    NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS\",\n       \"RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)\"\nalloc2_rc = rc\n\nIf alloc2_rc <> 0         Then Do\n   Say \"ICH error allocating TEMP1 file in exec 'ICH'\"\n   rtcd = 12\n   Signal End_Up\nEnd\n\n\"ALLOC FI(TEMP2)    NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS\",\n       \"RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)\"\nalloc3_rc = rc\n\nIf alloc3_rc <> 0         Then Do\n   Say \"ICH error allocating TEMP2 file in exec 'ICH'\"\n   rtcd = 12\n   Signal End_Up\nEnd\n\n\"ALLOC FI(BROWSER)  NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS\",\n       \"RECFM(F B) LRECL(080) BLKSIZE(0) DSORG(PS)\"\nalloc4_rc = rc\n\nIf alloc4_rc <> 0         Then Do\n   Say \"ICH error allocating BROWSER file in exec 'ICH'\"\n   rtcd = 12\n   Signal End_Up\nEnd\n\nAlloc_Sysin_File:\n\n\"ALLOC FI(SYSIN) NEW REUSE UNIT(SYSDA) SP(01,01) TRACKS\",\n       \"RECFM(F B) LRECL(100) BLKSIZE(0) DSORG(PS)\"\nalloc_sysin_rc = rc\nIf alloc_sysin_rc <> 0                    Then Do\n   Say \"ICH error allocating SYSIN file in exec 'ICH'\"\n   rtcd = 12\n   Signal End_Up\nEnd\n\nSignal Get_System_Information\n\nGet_System_Information:\n\nrcvt_offset_dec = C2D(rcvt_offset,8)\nrcvt_offset_hex = D2X(rcvt_offset_dec,8)\n\n@cvt         = STORAGE(00000010,4)                   /* Address X'10' */\n@cvtd        = C2D(STORAGE(00000010,4))              /* 16 in decimal */\n\nweekday      = DATE(W)\nyear         = SUBSTR(DATE(S),1,4)\nmonth        = DATE(M)\nday          = SUBSTR(DATE(S),7,2)\njuldate      = LEFT(year||\".\"SUBSTR(DATE(J),3,3),8,\" \")\ntime         = LEFT(TIME(),8,\" \")\n\nsmca_ptr     = C2D(STORAGE(D2X(@cvtd + 197),3))\nsmca_sysid   = STORAGE(D2X(C2D(STORAGE(D2X(@cvtd + 197),3))+16),4)\ngrs_sysid    = STORAGE(D2X(@cvtd + 340),8)\n\n@sysn  = STORAGE(D2X(@cvtd+340),8)      /* Get system name           */\n@ucba  = STORAGE(D2X(@cvtd+48),4)       /* Get SYSRES ucb address    */\n@ucbs  = STORAGE(C2X(@ucba),40)         /* Get UCB                   */\n@sysa  = C2X(SUBSTR(@ucbs,5,2))         /* Get SYSRES unit address   */\n@sysv  = SUBSTR(@ucbs,29,6)             /* Get SYSRES volser         */\n@ecvt  = STORAGE(D2X(@cvtd+140),4)      /* Get ECVT address          */\n@lprm  = STORAGE(D2X(C2D(@ecvt)+160),8) /* Get IPL LOADPARM          */\n@smca  = STORAGE(D2X(@cvtd+197),3)      /* Get SMCA address          */\n@ipld  = STORAGE(D2X(C2D(@smca)+340),4) /* Get IPL date X'0cyydddF'  */\n@ipld  = SUBSTR(c2x(@ipld),3,5)         /* yyddd                     */\n\n@ipldg = DATE(S,@ipld,J)     /* Get Stardard date format yyyymmdd */\n@ipldg = SUBSTR(@ipldg,5,2)\"/\"SUBSTR(@ipldg,7,2)\"/\"||,\n          SUBSTR(@ipldg,1,4)\".\"SUBSTR(@ipld,3,3)\n@ipldw = DATE(W,@ipld,J)          /* Get weekday in English          */\n@ipldm = DATE(M,@ipld,J)          /* Get month in English            */\n\n@iplt  = STORAGE(D2X(C2D(@smca)+336),4) /* Get IPL time              */\n@iplt  = C2D(@iplt)\n@iplh  = RIGHT(trunc(@iplt / (60*60*100)),2,'0')\n@iplt  = @iplt - (@iplh * 60*60*100)\n@iplm  = RIGHT(TRUNC(@iplt / (60*100)),2,'0')\n@iplt  = @iplt - (@iplm * 60*100)\n@ipls  = RIGHT(TRUNC(@iplt / 100),2,'0')\n@iplt  = RIGHT(TRUNC(@iplt - (@ipls * 100)),2,'0')\n\nlit1         = \"     \"||weekday\nlit2         = \"   \"||month day\", \"year\nlit3         = \"      \"||sysid\nlit4         = \"   \"||LEFT(smca_sysid\"/\"grs_sysid,13,\" \")\nlit5         = \"IPL Date:\"\nlit6         = @ipldg\nlit7         = LEFT(member,8,\" \")\n\nmember       = LEFT(member,8,\" \")\ndsname       = LEFT(dsname,44,\" \")\nfunction     = LEFT(function,8,\" \")\nIf testparm  <> \"\" Then testparm = LEFT(testparm,8,\" \")\n\n/*********************************************************************/\n/*  SYSIN Record Format (One Record Input Lrecl 100 FB):             */\n/*  Input to program ICHLOADR.                                       */\n/*     Bytes  1-8   RACF Module to be updated or removed             */\n/*     Byte     12  Blank                                            */\n/*     Bytes 10-53  Dataset Name to obtain Module (44 CHAR)          */\n/*     Byte     54  Blank                                            */\n/*     Bytes 55-58  Rcvt Offset (Fullword Binary)                    */\n/*     Byte     59  Blank                                            */\n/*     Bytes 60-67  Function    (8 bytes CHAR)                       */\n/*     Bytes 68-100 Blank (Reserved for future) (33 chars)           */\n/*********************************************************************/\n\nsysin.1   = COPIES(\" \",100)\nsysin.1   = OVERLAY(member,sysin.1,1,8)\nsysin.1   = OVERLAY(dsname,sysin.1,10,44)\nsysin.1   = OVERLAY(rcvt_offset,sysin.1,55,4)\nsysin.1   = OVERLAY(function,sysin.1,60,8)\n\n\"EXECIO 1 DISKW SYSIN    (STEM sysin. FINIS \" /* Close SYSIN File */\n\n\"DELSTACK\"\n\"NEWSTACK\"\n\nQueue \" \"\nQueue \"  \"juldate\"         III   CCCC H   H     DYNAMIC RACF    \" lit1\nQueue \"  \"time\"          I   C     H   H     EXIT UPDATE     \" lit2\nQueue \"                    I   C     HHHHH     ASSISTANCE FOR    \" lit3\nQueue \"  \"lit5\"         I   C     H   H      MODULE           \" lit4\nQueue \" \"lit6\"    III   CCCC H   H     \"lit7\"        \"\nQueue \" \"\nQueue \" ICH      - Module      =\" member\nQueue \" ICH      - Dsname      =\" STRIP(dsname)\nQueue \" ICH      - Function    =\" function\nQueue \" ICH      - RCVT Offset =\" rcvt_offset_hex\nIf testparm <> \"\" Then Do\n  Queue \" ICH      - Test Parm   =\" testparm\nEnd\nQueue \"\"\n\n\"EXECIO * DISKW TEMP1    (FINIS \"   /* Write to and Close TEMP1 File */\n\"DELSTACK\"\n\ntoken          = juldate\n\n/*********************************************************************/\n/*  Construct Linkage Parameter for program ICHLOADR.                */\n/*********************************************************************/\n\nichloadr_parms = token\" \"testparm\n\n/********************************************************************/\n/*  Uncomment this CALL statement if an explicit call to a          */\n/*     load library is used.                                        */\n/********************************************************************/\n/*\n\"CALL 'MY.APF.LOADLIB(ICHLOADR)'\",             /* <= CHANGE LOADLIB */\n      \"'\"ichloadr_parms\"'\"\n*/\n\n/*********************************************************************/\n/*  Issue a Call to ICHLOADR from the LinkList search.               */\n/*********************************************************************/\n\n\"CALL *(ICHLOADR)\",                            /* <= LINKLIST CALL  */\n      \"'\"ichloadr_parms\"'\"\n\nichloadr_rc  = rc\n\nIf ichloadr_rc = -1  Then Do\n   Say   \" \"\n   Say   \" ICH      - Program ICHLOADR abended for some reason \"\n   Say   \" ICH      - See the SYSLOG for more information      \"\n   Say   \" \"\nEnd\n\n\"NEWSTACK\"\n\nQueue \" ICHLOADR - RETURN CODE =\" ichloadr_rc\nQueue \" \"\nQueue \"\"\n\n\"EXECIO * DISKW TEMP2    (FINIS \"   /* Write to and Close TEMP2 File */\n\"DELSTACK\"\n\"NEWSTACK\"\n\n/*\n\"EXECIO 0 DISKR SYSPRINT (OPEN  \"\n\"EXECIO 0 DISKR TEMP1    (OPEN  \"\n\"EXECIO 0 DISKR TEMP2    (OPEN  \"\n*/\n\n\"EXECIO * DISKR TEMP1    (FINIS \"  /* Read TEMP1 File and queue lines */\n\"EXECIO * DISKR SYSPRINT (FINIS \"  /* Read SYSPRINT   and queue lines */\n\"EXECIO * DISKR TEMP2    (FINIS \"  /* Read TEMP2 File and queue lines */\nQueue \"\"\n\"EXECIO * DISKW BROWSER  (FINIS \"  /* Write all lines to BROWSER FIle */\n\"DELSTACK\"\n\nIf envirnmt = \"BACK\" Then Signal End_Up      /* Background Call ?  */\n\n/*********************************************************************/\n/*  Browse all of the message lines in ISPF Browse mode.             */\n/*********************************************************************/\n\nAddress ISPEXEC \"LMINIT DATAID(DID) DDNAME(BROWSER)\"\nAddress ISPEXEC \"ISPEXEC BROWSE DATAID(\"did\")\"         /* ISPF Browse */\nAddress ISPEXEC \"LMFREE DATAID(\"did\")\"\n\nEnd_Up:\n\"FREE FI(TEMP1 TEMP2 SYSPRINT BROWSER SYSIN)\"\nReturn rtcd\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICHLOADR": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00P\\x01\\x10\\x00\\x7f\\x01\\x10\\x02\\x1f\\x13\\x10\\x04\\xbd\\x01\\x9e\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2010-01-07T00:00:00", "modifydate": "2010-01-21T13:10:50", "lines": 1213, "newlines": 414, "modlines": 0, "user": "TKMILLE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  III   CCCC H   H L     OOOOO   A   DDDD  RRRR                      *\n*   I   C     H   H L     O   O  A A  D   D R   R                     *\n*   I   C     HHHHH L     O   O A   A D   D RRRR                      *\n*   I   C     H   H L     O   O AAAAA D   D R  R                      *\n*  III   CCCC H   H LLLLL OOOOO A   A DDDD  R   R                     *\n*                                                                     *\n*      AUTHOR: TKMILLE                                                *\n*  CREATED ON: 01/07/2010                                             *\n*  UPDATED ON: 01/21/2010                                             *\n*                                                                     *\n*   PURPOSE:                                                          *\n*                                                                     *\n*      This program was written to provide the capability to          *\n*      dynamically update, delete, and remove RACF Exits              *\n*      without having to IPL.                                         *\n*                                                                     *\n*      The caller provides the Exitname, the dataset to fetch         *\n*      the module from, and the offset in the RCVT for the            *\n*      exit to update the RCVT pointer to the exit.                   *\n*                                                                     *\n*      This program is used in conjunction with Rexx Exec             *\n*      \"ICH\" which obtains and passes the RCVT offset as well         *\n*      as the exit name and the name of the library that it is        *\n*      to be fetched from to load into CSA storage.                   *\n*                                                                     *\n*      This program will perform any of these four functions.         *\n*                                                                     *\n*        1) UPDATE - This function loads a new version of a RACF      *\n*           exit into dynamic LPA (CSA memory) (same as the           *\n*           SETPROG LPA,ADD command).  It also repoints RACF to       *\n*           use the updated module (updates the exit's RCVT pointer). *\n*           The user must specify the load library to fetch the exit  *\n*           from to load into dynamic LPA (CSA).  The 'ICH' exec      *\n*           will default to load library SYS1.LPALIB unless           *\n*           specified otherwise when the exec is invoked.             *\n*           (Does the same function as the SETPROG LPA,ADD MVS command*\n*           except that it also updates the RACF RCVT pointer which   *\n*           points to the updated version of the exit in LPA (CSA)    *\n*           storage.)                                                 *\n*                                                                     *\n*           If none of these three function values are passed as      *\n*           parameters to the 'ICH' exec, the exec will default       *\n*           to pass function 'UPDATE' to this program.                *\n*                                                                     *\n*        2) DELETE - This function deletes a RACF exit from dynamic   *\n*           LPA (same as SETPROG LPA,DELETE command) and then also    *\n*           loads zeros into the RACF RCVT pointer to indicate to     *\n*           RACF that the exit is not being used (until the next      *\n*           IPL or next dynamic update).                              *\n*           (Does the same function as the SETPROG LPA,DELETE         *\n*           MVS command except that it also unpoints (zeros) the      *\n*           RACF RCVT pointer which points to it in LPA storage.)     *\n*                                                                     *\n*        3) REMOVE - This function only loads zeros into the          *\n*           RACF RCVT pointer for the RACF Exit to indicate to        *\n*           RACF that the exit is not being used (until the next      *\n*           IPL or next dynamic update). It does not affect the       *\n*           module itself in LPA storage. It only unpoints (zeros)    *\n*           the RACF RCVT pointer.                                    *\n*                                                                     *\n*        4) REPOINT - Specifies that the module passed should be      *\n*           repointed with the current version of the exit found in   *\n*           LPA (CSA) storage.  The RACF RCVT point to the exit is    *\n*           updated to point to the current version of the exit       *\n*           in LPA storage.  It does not affect the module itself     *\n*           in LPA storage.  It only updates the RCVT pointer to      *\n*           point to it.  This function is the opposite of the        *\n*           REMOVE function and can be used subsequent to issuing     *\n*           the REMOVE function to put the exit back into service.    *\n*                                                                     *\n*      R1 on entry points to the linkage parm address.                *\n*      The linkage parm address points to a 11 byte (9 w/o ll) or a   *\n*      19 byte linkage parm (17 bytes w/o including ll).              *\n*                                                                     *\n*      EXECUTION PARMS:                                               *\n*         Linkage Parm Format:                                        *\n*          Bytes  1-2  Length of the execution parm (ll) (hw)         *\n*          Bytes  3-10 Call Token Passed from ICH (8 characters)      *\n*          Byte  11    Blank                                          *\n*          Bytes 12-19 Optional TESTPARM (8 characters) Not required. *\n*                Test Parm Values:                                    *\n*                   TEST - Only run a test pass - no update.          *\n*                   SIMULATE - same as TEST     - no update.          *\n*                                                                     *\n*      SYSIN (INPUT) PARMS (Lrecl 100):                               *\n*                                                                     *\n*        RACF Exit Module Name to be processed -  8 bytes CHAR        *\n*         (Must be padded with trailing spaces)                       *\n*        Dataset name Containing module update - 44 bytes CHAR        *\n*         (Must be padded with trailing spaces)                       *\n*         (This parameter is only needed for the UPDATE function.)    *\n*        RCVT Offset Value for Module          -  Fullword binary     *\n*        Function Values (Default is UPDATE):  -  8 bytes CHAR        *\n*             UPDATE - Update the Exit in dynamic LPA                 *\n*             REMOVE - Zero the RCVT Pointer. Removes exit from       *\n*                      RACF service w/o deleting the LPA module       *\n*                      from dynamic LPA storage.                      *\n*             DELETE - Delete the Exmit Module and Zero the RCVT      *\n*                      Pointer.                                       *\n*                                                                     *\n*        SYSIN Record Format (One Record Input Lrecl 100 FB):         *\n*           Bytes  1-8   RACF Module to be updated or removed         *\n*           Byte     12  Blank                                        *\n*           Bytes 10-53  Dataset Name to obtain Module (44 CHAR)      *\n*           Byte     54  Blank                                        *\n*           Bytes 55-58  Rcvt Offset (Fullword BInary)                *\n*           Byte     59  Blank                                        *\n*           Bytes 60-67  Function    (8 bytes CHAR)                   *\n*           Bytes 68-100 Blank (Reserved for future) (33 chars)       *\n*                                                                     *\n*      REGISTER USAGE:                                                *\n*        R0   RETURNS THE CSVDYLPA REASON CODE TO CALLER              *\n*        R1   WORK REGISTER - HAS PARMLIST ADDRESS ON ENTRY           *\n*        R2   WORK REGISTER                                           *\n*        R3   MAPS CVT                                                *\n*        R4   MAPS RCVT                                               *\n*        R5   MAPS LPMEA                                              *\n*        R6   SAVES CSVDYLPA RETURN CODE                              *\n*        R7   SAVES CSVDYLPA REASON CODE                              *\n*        R8   WORK REGISTER                                           *\n*        R9   NOT USED                                                *\n*        R10  NOT USED                                                *\n*        R11  SECOND PROGRAM BASE REGISTER                            *\n*        R12  PROGRAM BASE REGISTER                                   *\n*        R13  SAVE AREA                                               *\n*        R14  RETURN ADDRESS                                          *\n*        R15  RETURNS THE CSVDYLPA RETURN CODE                        *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        0  - Successful Call to ICHLOADR                             *\n*        8  - Program ICHLOADR is not APF-Authorized                  *\n*        9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call  *\n*       10  - CSVQUERY for Exit Module failed after CSVDYLPA call     *\n*       11  - Entry Point Address did not change after CSVDYLPA call  *\n*       12  - Miscellaneous Errors (all other errors)                 *\n*                                                                     *\n*   Reg 15 has the return code from the CSVDYLPA macro call           *\n*   Reg  0 has the reason code from the CSVDYLPA macro call           *\n*                                                                     *\n*   OUTPUT FILES:                                                     *\n*                                                                     *\n*      SYSPRINT - Lrecl 80 FB (Report File)                           *\n*                                                                     *\n*   MACROS USED:                                                      *\n*                                                                     *\n*   STORAGE  (Obtains virtual storage for reentrant programs)         *\n*   TESTAUTH (Checks APF Authorization)                               *\n*   CSVQUERY (Returns information about a load module)                *\n*   CSVDYLPA (Updates a module in LPA - same as SETPROG LPA,ADD )     *\n*            (Deletes a module in LPA - same as SETPROG LPA,DELETE )  *\n*   MODESET  (Changes program key mode)                               *\n*                                                                     *\n*   TABLES/DSECTS/PARAMETER LISTS USED:                               *\n*                                                                     *\n*   CSVLPRET  - Parameter List for the CSVDYLPA macro                 *\n*   CVT       - Communications Vector Table                           *\n*   ICHPRCVT  - RCVT (RACXF Communication Vector Table) Dsect         *\n*   IEZWPL    - WTO parameter list                                    *\n*                                                                     *\n*                                                                     *\n*   AUTHORIZATIONS:                                                   *\n*                                                                     *\n*   Program ICHLOADR must reside in an APF-Authorized libary          *\n*   and be linked as an authorized module.                            *\n*                                                                     *\n*   The Load Library containing the RACF Exit to fetch for the        *\n*   LPA Update must also be in the APF List.  Normally, this          *\n*   Loadlib would be SYS1.LPALIB (this is the default load            *\n*   library if not specified when the ICH REXX exec is invoked),      *\n*   but it can be overridden with the DA(dsname) parm when ICH        *\n*   is invoked.                                                       *\n*                                                                     *\n*   Program ICHLOADR must reside in the IKJTSOxx 'Authorized          *\n*   program names' table.                                             *\n*                                                                     *\n*   Program ICHLOADR SHOULD be program control protected to prevent   *\n*   unauthorized user access to this program:                         *\n*                                                                     *\n*   RDEFINE PROGRAM  ICHLOADR                                       + *\n*           UACC(NONE)                                              + *\n*           DATA('RACF PROFILE FOR RACF UTILITY PROGRAM ICHLOADR')  + *\n*           ADDMEM ('SYS1.MYAPF.LOAD.LIBRARY'//PADCHK)              + *\n*           OWNER(OWNERID)          /* <= CHANGE THIS OWNERID */      *\n*                                                                     *\n*   SETROPTS WHEN(PROGRAM) REFRESH                                    *\n*                                                                     *\n*   PERMIT ICHLOADR  CLASS(PROGRAM)  ACCESS(READ)                   + *\n*          ID(USERID1,USERID2,USERID3)    /* <= CHANGE USERIDS */     *\n*                                                                     *\n*   SETROPTS WHEN(PROGRAM) REFRESH                                    *\n*                                                                     *\n*   Documentation Helps:                                              *\n*                                                                     *\n*   CSVQUERY Documentation:                                           *\n*   See IBM Manual \"MVS Programming Assembler Services Reference      *\n*   ABEND-HSPSERV SA22-7606-xx\" \"Contents Supervisor Query Service\"   *\n*   for documentation on the CSVQUERY macro:                          *\n*                                                                     *\n*     Z/oS 1.9 Link to GA22-7606-08:                                  *\n*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *\n*       topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm                    *\n*                                                                     *\n*   CSVDYLPA Documentation:                                           *\n*   See IBM Manual \"MVS Authorized Assembler Services Reference       *\n*   ALE-DYN SA22-7609-xx\" \"CSVDYLPA - Provide Dynamic LPA Services\"   *\n*   for documentation on the CSVDYLPA macro.                          *\n*                                                                     *\n*     Z/oS 1.9 Link to GA22-7606-08:                                  *\n*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *\n*       topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm                 *\n*                                                                     *\n*   Interesting Note from IBM about Z/oS V1R11:                       *\n*                                                                     *\n*   \"z/OS V1R11 Communications Server Scalability, performance,       *\n*   constraint relief, and accelerator\"                               *\n*                                                                     *\n*   http://publib.boulder.ibm.com/infocenter/ieduasst/stgv1r0/topic/  *\n*   com.ibm.iea.commserv_v1/commserv/1.11z/hardware/perf.pdf          *\n*                                                                     *\n*   \"z/OS V1R11 Communications Server now uses the z/OS MVS           *\n*   CSVDYLPA service to load its IPL load modules.                    *\n*   Using CSVDYLPA gives the z/OS MVS Contents Supervisor             *\n*   awareness of the location and attributes of z/OS Communications   *\n*   Server load modules and entry points.                             *\n*   Vendor utility functions intended to map z/OS Communications      *\n*   Server code can now use z/OS MVS services CSVQUERY or CSVINFO     *\n*   to obtain the location of z/OS Communications Server load         *\n*   modules and entry points.                                         *\n*   The primary reason for such mapping is to perform detailed        *\n*   performance analysis.\"                                            *\n*                                                                     *\n*   RCVT DATA AREA (ICHPRCVT Dsect):                                  *\n*                                                                     *\n*   See IBM Manual \"Security Server RACF Data Areas GA22-7680-xx\"     *\n*   for the RCVT (RACF Communication Vector Table) offsets:           *\n*                                                                     *\n*     Z/oS 1.9 Link to GA22-7680-09:                                  *\n*       http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?  *\n*       topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm                 *\n*                                                                     *\n*     Z/oS 1.11 Link to GA22-7680-11:                                 *\n*       http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp? *\n*       topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nICHLOADR CSECT\nICHLOADR AMODE 31\nICHLOADR RMODE 24\n         SAVE  (14,12),,ICHLOADR_ASSEMBLED_ON_&SYSDATE._&SYSTIME\n         LR    R12,R15             Load entry address\n         LA    R11,2048(,R12)      Chain R11 to R12 Program Base\n         LA    R11,2048(,R11)\n         USING ICHLOADR,R12,R11    Declare Program Base Registers\n         LR    R8,R1               Preserve passed parmlist address\n         XR    R7,R7               clear register\n         BSM   R7,0                obtain caller's AMODE bit\n         LR    R6,R13              Store SAVEAREA Backward link\n         L     R3,=A(STORSIZE)     Size of storage to get and clear\n         STORAGE OBTAIN,LENGTH=(R3),LOC=(BELOW)\n         ST    R1,8(,R13)          Set SAVEAREA forward link\n         LR    R13,R1              Address of obtained area\n         USING STORAREA,R13        Addressability to obtained area\n         LR    R0,R13              Address of target of move (OBTND)\n         L     R1,=A(STORSIZE)     Length of the target of move\n         XR    R14,R14             From address (irrelevant with len=0)\n         XR    R15,R15             pad/length to propagate in odd reg\n         MVCL  R0,R14          Propagate binary zeros in obtained area\n         ST    R6,4(,R13)          Set SAVEAREA backward link\n         XR    R6,R6               Zero Return Code\n         XR    R7,R7               Zero Reason Code\n         ST    R8,PARMADDR         Save parmlist address\n         B     HOUSKEEP\n***********************************************************************\nMOD_LEVEL  DC  CL9'V01.01.01'      PROGRAM VERSION RELEASE MOD. LEVEL\n***********************************************************************\nHOUSKEEP DS    0H\n         MVC   HEADING1(HEADING1L),BLANKLIN     Initialize\n         MVC   H1LIT1,=CL11'ICHLOADR - '        Initialize\n         MVC   H1VERS,MOD_LEVEL          Maintenance Level Vers.Rel.Mod\n         TIME  DEC ,                     Get Current Date and Time\n         STM   R0,R1,CURRTIME            Store Current Time and Juldate\n         MVI   CURRDATE+0,X'20'\n         UNPK  JULIANDT(7),CURRDATE(4)   Store the Julian Date\n         OI    JULIANDT+6,X'F0'          Fix the Sign\n         MVC   H1DATE(4),JULIANDT\n         MVI   H1DATE+4,C'.'\n         MVC   H1DATE+5(3),JULIANDT+4\n         MVC   DATEXXXX(7),JULIANDT\n         MVC   STORTIME,CURRTIME\n         MVI   STORTMSG,X'0F'\n         UNPK  TIME9(9),STORTIME(5)      Unpack the time\n         MVC   DISPTMHH(2),TIME9\n         MVI   DISPTMC1,C':'\n         MVC   DISPTMMM(2),TIME9+2\n         MVI   DISPTMC2,C':'\n         MVC   DISPTMSS(2),TIME9+4\n         MVC   H1TIME(8),DISPTIME\n         MVI   MSGCC,C' '                    Blank Leading Char of Msg\n         MVC   WKOPENCL(OPENIL),OPENI        Relocate OPEN Parmlist\n         MVC   SYSIN(SYSINIL),SYSINI         Relocate SYSIN    DCB\n         MVC   SYSPRINT(SYSPRINL),SYSPRINI   Relocate SYSPRINT DCB\n         LA    R3,SYSPRINT                   DCB to open\n         LA    R4,WKOPENCL                   Open/Close work area\n         OPEN  ((R3),OUTPUT),MODE=31,MF=(E,(R4))   Open SYSPRINT DCB\n         LTR   R15,R15                       Good Open ?\n         BZ    DHEADING                         Yes\n         WTO   'ICHLOADR - Could not open SYSPRINT file',ROUTCDE=(11)\n         LA    R6,12\n         B     RETURN                        Return\nDHEADING DS    0H\n         MVI   SYSPRTOP,C'Y'                 Indicate File is Open\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA,HEADING1              Format Heading Line\n         PUT   SYSPRINT,MSGLINE              Output Heading Line\n**********************************************************************\n*   Pick up the linkage parameters\n**********************************************************************\n         STM   R15,R1,SAVE3        Save 3 registers and test if APF\n         XR    R15,R15                  authorized.\n**********************************************************************\n*   Is this program being called from an authorized Library?\n**********************************************************************\n         TESTAUTH FCTN=1              Are we APF authorized?\n         LTR   R15,R15                Test the return code.\n         BE    GETPARMS                 Yes authorized - Continue on\n         PUT   SYSPRINT,BLANKLIN      Output a Blank Line\n         MVC   MSGAREA,NOTAUTHD       Format Not-Authorized Msg\n         PUT   SYSPRINT,MSGLINE       Output Msg\n         LA    R6,8                   Set Not-Authorized Return Code\n         B     RETURN                 Return\nGETPARMS DS    0H\n         LM    R15,R1,SAVE3        Restore registers used by TESTAUTH.\n         L     R1,PARMADDR         Point to parmlist address\n         L     R1,0(,R1)           Point to the Linkage parm address\n         MVC   LL,0(R1)                    Save the Linkage Parm Length\n         CLC   LL,=H'8'                    Linkage Parm < 8 bytes?\n         BL    LINKERR                       No - Bad Linkage Parm\n         MVC   TOKEN(L'TOKEN),2(R1)        Get the ICH Call Token\n         CLC   LL,=H'13'                   Linkage Parm < 13 bytes?\n         BL    CHKTOKEN                      No - Bad Linkage Parm\n         MVC   TESTPARM,BLANKLIN           Initialize Testparm\n         MVC   TESTPARM(L'TESTMODE),11(R1) Get More Execution Parm\n         CLC   TESTMODE,TESTPARM           Have Test Parm ?\n         BE    TESTSIML                       Yes - In Test Mode\n         CLC   LL,=H'17'                   Linkage Parm < 17 bytes?\n         BL    LINKERR                       No - Bad Linkage Parm\n         MVC   TESTPARM(L'TESTPARM),11(R1) Get More Ewecution Parm\n         CLC   TESTPARM,SIMUMODE           Have Simulate Parm ?\n         BNE   LINKERR                        No  - Error\n         MVC   TESTPARM,BLANKLIN           Initialize Testparm\n         MVC   TESTPARM(L'TESTMODE),TESTMODE  Yes - Set Test Mode\n         B     TESTSIML                       Yes - In Test Mode\nLINKERR  DS    0H\n         PUT   SYSPRINT,BLANKLIN           Output a Blank Line\n         MVC   MSGAREA,INVLINKM            Format Invalid Link Msg\n         PUT   SYSPRINT,MSGLINE            Output Msg\n         LA    R6,12\n         B     RETURN\nTESTSIML DS    0H\n         PUT   SYSPRINT,BLANKLIN           Output a Blank Line\n         MVC   MSGAREA,TSTSIMSG            Format Test/Simulate Msg\n         PUT   SYSPRINT,MSGLINE            Output Msg\nCHKTOKEN DS    0H\n**********************************************************************\n*   Make sure that Exec 'ICH' is calling this program by checking\n*   the exection-time parm token.  Can't be too careful you know.\n**********************************************************************\n         CLC   H1DATE,TOKEN               Was I called by Exec ICH ?\n         BE    GETSYSIN                       Yes - Continue\n         PUT   SYSPRINT,BLANKLIN          Output a Blank Line\n         MVC   MSGAREA,INVCALLM           Format Invalid-Call Msg\n         PUT   SYSPRINT,MSGLINE           Output Msg\n         LA    R6,12\n         B     RETURN\nGETSYSIN DS    0H\n**********************************************************************\n*   Input the SYSIN record Input parameters.\n**********************************************************************\n         LA    R3,SYSIN                    DCB to open\n         LA    R4,WKOPENCL                 Open/Close work area\n         OPEN  ((R3),INPUT),MODE=31,MF=(E,(R4))   Open SYSIN DCB\n         LTR   R15,R15                     Good Open ?\n         BNZ   BADSYSIN                       No\n         MVI   SYSINOP,C'Y'                Indicate File is Open\n         GET   SYSIN,SYSINREC              Input 1 record\nENDSYSIN DS    0H\n         CLC   MODNAME,=D'0'               Have good SYSIN Record ?\n         BE    BADSYSIN                       No  - Error\n         CLC   LMODDSN,BLANKLIN            Have good SYSIN Record ?\n         BE    BADSYSIN                       No  - Error\n         CLC   RCVTOFF,=F'0'               Have good SYSIN Record ?\n         BE    BADSYSIN                       No  - Error\n         CLC   FUNCTION,FNUPDATE           Have good Function ?\n         BE    DISPPRMS                       Yes - Continue\n         CLC   FUNCTION,FNREMOVE           Have good Functino ?\n         BE    DISPPRMS                       Yes - Continue\n         CLC   FUNCTION,FNDELETE           Have good Function ?\n         BE    DISPPRMS                       Yes - Continue\n         CLC   FUNCTION,FNREPOIN           Have good Function ?\n         BE    DISPPRMS                       Yes - Continue\nBADSYSIN DS    0H\n         PUT   SYSPRINT,BLANKLIN           Output a Blank Line\n         MVC   MSGAREA,INVSYSIN            Format Invalid SYSIN Msg\n         PUT   SYSPRINT,MSGLINE            Output Msg\n         PUT   SYSPRINT,BLANKLIN           Output a Blank Line\n         MVC   MSGAREA(CSVDY14L),CSVDY14    Load Sysin Display Msg\n         MVC   MSGAREA+7(REMAINS-SYSINREC),SYSINREC  Format SYSIN rec\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         LA    R6,12\n         B     RETURN\nDISPPRMS DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY11L),CSVDY11    Load Message\n         MVC   MSGAREA+11(L'FUNCTION),FUNCTION  Format FUNCTION Msg\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY12L),CSVDY12    Load Message\n         MVC   MSGAREA+31(L'MODNAME),MODNAME  Format MODULE Msg\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BE    QUERY1                          Yes - Skip Dsname Msg\n         CLC   FUNCTION,FNREMOVE            REMOVE  function ?\n         BE    QUERY1                          Yes - Skip Dsname Msg\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BE    QUERY1                          Yes - Skip Dsname Msg\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY13L),CSVDY13    Load Message\n         MVC   MSGAREA+30(L'LMODDSN),LMODDSN  Format Dataset Name Msg\n         PUT   SYSPRINT,MSGLINE             Output Msg\nQUERY1   DS    0H\n**********************************************************************\n*   Obtain the EP Address of the current module in storage.\n**********************************************************************\n         XC    CSVNAME,CSVNAME\n         XC    EPADDRO,EPADDRO       Zero the 'Before' EPA Addrss\n         XC    LOADPTO,LOADPTO       Zero the 'Before' Load Pt Address\n         CSVQUERY INEPNAME=MODNAME,  (Search by EP NAME)               +\n               SEARCH=LPA,         - Search LPA                        +\n               OUTEPNM=CSVNAME,    - Module name                       +\n               OUTLENGTH=CSVMSIZE, - Module size                       +\n               OUTEPA=CSVEPA,      - Entry point (Get the 'before' EP) +\n               OUTLOADPT=CSVLOADP, - Module base                       +\n               OUTATTR1=CSVATTR1,  - Module attributes                 +\n               OUTATTR2=CSVATTR2,  - Module attributes                 +\n               OUTATTR3=CSVATTR3,  - Module attributes                 +\n               OUTVALID=CSVVALID,  - Output valid bitstring            +\n               MF=(E,MYCSVLST)\n         LR    R6,R15              - Save Return Code from CSVQUERY\n         LTR   R6,R6                 Was the caller's module found ?\n         BZ    CHKNAME1                Yes - Continue\n         CH    R6,=H'8'              Return Code = 8? Module Not Found?\n         BNE   QUERY1ER                No  - Error\n**********************************************************************\n*   The exit module does not pre-exist in Dynamic LPA Storage.\n**********************************************************************\n         XC    CSVEPA,CSVEPA         Zero the 'Before' EPA Addrss\n         XC    CSVLOADP,CSVLOADP     Zero the 'Before' Load Pt Address\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA(CSVDY24L),CSVDY24     Load Exit-Not-Preexist Msg\n         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE              Output Msg\n**********************************************************************\n*   This is an acceptable situation when FUNCTION=UPDATE\n**********************************************************************\n         CLC   FUNCTION,FNUPDATE     UPDATE function ?\n         BNE   QUERY1ER                No  - Error\n         XR    R6,R6                 Reset the Return Code to Zero\n         B     SAVEEPA1\nQUERY1ER DS    0H\n**********************************************************************\n*   The exit module does not pre-exist in Dynamic LPA Storage.\n*   This is a error situation.\n**********************************************************************\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL1      Format CSVQUERY Failed Msg 1\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,9                  Set Query1 Fail Rc\n         B     RETURN\nCHKNAME1 DS    0H\n         CLC   CSVNAME(L'MODNAME),MODNAME   Was EP Name returned ?\n         BE    CHKEPA1                           Yes\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL1B     Format CSVQUERY Failed Msg 1B\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,9                  Set Query1 Fail Rc\n         B     RETURN\nCHKEPA1  DS    0H\n         TM    CSVVALID,CSVVOEPA     Was EP Address returned ?\n         BO    CHKRMOD1                 Yes\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL1C     Format CSVQUERY Failed Msg 1C\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,9                  Set Query1 Fail Rc\n         B     RETURN\nCHKRMOD1 DS    0H                    Where is the Module loacated ?\n         TM    CSVATTR3,CSV3R16M   - Module Resident Above the Line ?\n         BNO   SAVEEPA1                 No\n         OI    CSVEPA,X'80'             Yes - Set High Order Bit on\nSAVEEPA1 DS    0H\n         MVC   EPADDRO,CSVEPA        Save the 'Before' EPA Addrss\n         MVC   LOADPTO,CSVLOADP      Save the 'Before' Load Pt Address\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BE    DISPEPAS                        Yes - Skip dynamic updt\n         CLC   TESTMODE,TESTPARM            In TEST Mode ?\n         BE    UPDTRCVT                        Yes - Skip dynamic updt\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BE    DYNLPADL                        Yes - Do dynamic delete\n         CLC   FUNCTION,FNREMOVE            REMOVE  function ?\n         BE    UPDTRCVT                        Yes - Skip dynamic updt\nDYNLPAUP DS    0H\n**********************************************************************\n*   Fetch/Update the LPA Module and place into dynamic LPA storage\n*   (CSA).\n**********************************************************************\n         LA    R5,ADDINFO\n         USING LPMEA,R5\n         XC    ADDINFO(LPMEA_LEN),ADDINFO\n         XC    LRETCODE,LRETCODE\n         XC    LRSNCODE,LRSNCODE\n         MVC   LPMEANAME(L'MODNAME),MODNAME\n         MODESET MODE=SUP                  Go into Supervisor State\n         CSVDYLPA REQUEST=ADD,           - Update Module in CSA        +\n               MODINFOTYPE=MEMBERLIST,   - Point to List of Modules    +\n               MODINFO=(R5),             - Point to the I/O area       +\n               NUMMOD=LMODNBR,           - Number of Modules to Update +\n               DSNAME=LMODDSN,           - Dsname to fetch Module from +\n               REQUESTOR=LMODREQ,        - Requestor Literal           +\n               RETCODE=LRETCODE,         - Return Code copied here     +\n               RSNCODE=LRSNCODE,         - Reason Code copied here     +\n               MF=(E,DYLPAL)\n         MODESET MODE=PROB                 Go Back Into Problem State\n         L     R6,LRETCODE\n         L     R7,LRSNCODE\n         CLC   LRETCODE,=F'0'             LPA module update successful?\n         BE    QUERY2                       Yes - Continue on\n*\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY01L),CSVDY01    Load LPA Update Failed Msg\n         MVC   MSGAREA+40(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n*\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY02L),CSVDY02    Load Message\n         MVC   WORK5,LRETCODE\n         BAS   R14,TRANSLT1                 Translate To Hexadecimal\n         MVC   MSGAREA+32(8),WORK9          Load CSVDYLPA Return Code\n         MVC   WORK5,LRSNCODE\n         BAS   R14,TRANSLT1                 Translate To Hexadecimal\n         MVC   MSGAREA+46(8),WORK9          Load CSVDYLPA Reason Code\n         PUT   SYSPRINT,MSGLINE             Output Msg\n*\n         CLC   LRETCODE,=F'4'               Return Code = 4 ?\n         BNE   CHKRETN8                        No\n         CLC   LRSNCODE,=X'00000401'        Output Flags = X'0401' ?\n         BNE   RETURN                          No\n**********************************************************************\n*   Unable to load module - Module not found in input Loadlib\n**********************************************************************\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA(CSVDY23L),CSVDY23     Load Can't-Find-Module Msg\n         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE              Output Msg\n         B     RETURN\n*\nCHKRETN8 DS    0H\n         CLC   LRETCODE,=F'8'               Return Code = 8 ?\n         BNE   RETURN                          No\n         CLC   LRSNCODE,=X'17080829'        Output Flags = X'0829' ?\n         BNE   CHKAUTH2                        No\n**********************************************************************\n*   Unable to dynamically allocate the Fetch Dataset (DSNAME=LMODDSN)\n**********************************************************************\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA(CSVDY21L),CSVDY21     Load Can't-Allocate Msg\n         MVC   MSGAREA+35(L'LMODDSN),LMODDSN Load CSVDYLPA Dataset Name\n         PUT   SYSPRINT,MSGLINE              Output Msg\n         B     RETURN\nCHKAUTH2 DS    0H\n         CLC   LRSNCODE,=X'0000082D'        Output Flags = X'082D' ?\n         BNE   RETURN\nAUTHERR2 DS    0H                           Dynamic LPA Deletion\n**********************************************************************\n*   DDNAME or DCB Must be APF Authorized.\n**********************************************************************\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA(CSVDY22L),CSVDY22     Load Loadlib not APF Msg\n         MVC   MSGAREA+33(L'LMODDSN),LMODDSN Load CSVDYLPA Dataset Name\n         PUT   SYSPRINT,MSGLINE              Output Msg\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA,NOTAUTH2              Load Loadlib not APF Msg2\n         PUT   SYSPRINT,MSGLINE              Output Msg\n         B     RETURN\nDYNLPADL DS    0H                           Dynamic LPA Deletion\n**********************************************************************\n*   Delete the LPA Module from dynamic LPA storage (CSA).\n**********************************************************************\n         DROP  R5\n         LA    R5,DELINFO\n         USING LPMED,R5\n         XC    DELINFO(LPMED_LEN),DELINFO\n         XC    LRETCODE,LRETCODE\n         XC    LRSNCODE,LRSNCODE\n         MVC   LPMEDNAME(L'MODNAME),MODNAME\n         MODESET MODE=SUP                  Go into Supervisor State\n         CSVDYLPA REQUEST=DELETE,        - Delete Module in CSA        +\n               MODINFO=(R5),             - Point to the I/O area       +\n               NUMMOD=LMODNBR,           - Number of Modules to Delete +\n               TYPE=CURRENT,             - Which version to delete     +\n               RETCODE=LRETCODE,         - Return Code copied here     +\n               RSNCODE=LRSNCODE,         - Reason Code copied here     +\n               MF=(E,DYLPAL)\n         MODESET MODE=PROB                 Go Back Into Problem State\n         L     R6,LRETCODE\n         L     R7,LRSNCODE\n         CLC   LRETCODE,=F'0'             LPA module delete successful?\n         BE    QUERY2                       Yes - Continue on\n*\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY19L),CSVDY19    Load LPA Delete Failed Msg\n         MVC   MSGAREA+40(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n*\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY02L),CSVDY02    Load Message\n         MVC   WORK5,LRETCODE\n         BAS   R14,TRANSLT1                 Translate To Hexadecimal\n         MVC   MSGAREA+32(8),WORK9          Load CSVDYLPA Return Code\n         MVC   WORK5,LRSNCODE\n         BAS   R14,TRANSLT1                 Translate To Hexadecimal\n         MVC   MSGAREA+46(8),WORK9          Load CSVDYLPA Reason Code\n         PUT   SYSPRINT,MSGLINE             Output Msg\n*\n         CLC   LRETCODE,=F'4'               Return Code = 4 ?\n         BNE   RETURN                          No\n         CLC   LRSNCODE,=X'00000401'        Output Flags = X'0401' ?\n         BNE   RETURN                          No\n**********************************************************************\n*   There is no module in dynamic LPA to delete.\n**********************************************************************\n         PUT   SYSPRINT,BLANKLIN             Output a Blank Line\n         MVC   MSGAREA(CSVDY20L),CSVDY20     Load Not-Dynamic-LPA Msg\n         MVC   MSGAREA+18(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE              Output Msg\n         B     RETURN\n         DROP  R5\nTRANSLT1 DS    0H\n**********************************************************************\n*   Make the Hex Data Readable in EBCDIC\n**********************************************************************\n         UNPK  WORK9(9),WORK5(5)              Unpack 5 Bytes\n         MVZ   WORK9(8),=X'0000000000000000'  Convert Zone Nibbles\n         TR    WORK9(8),=C'0123456789ABCDEF'  Translate to Hex\n         BR    R14                            Return To Caller\nQUERY2   DS    0H\n**********************************************************************\n*   Obtain the EP Address of the reloaded module in storage.\n**********************************************************************\n         XC    CSVNAME,CSVNAME\n         XC    EPADDRN,EPADDRN       Zero the 'After' EPA Addrss\n         XC    LOADPTN,LOADPTN       Zero the 'After' Load Pt Address\n         CSVQUERY INEPNAME=MODNAME,  (Search by EP NAME)               +\n               SEARCH=LPA,         - Search LPA                        +\n               OUTEPNM=CSVNAME,    - Module name                       +\n               OUTLENGTH=CSVMSIZE, - Module size                       +\n               OUTEPA=CSVEPA,      - Entry point (Get the 'after' EP)  +\n               OUTLOADPT=CSVLOADP, - Module base                       +\n               OUTATTR1=CSVATTR1,  - Module attributes                 +\n               OUTATTR2=CSVATTR2,  - Module attributes                 +\n               OUTATTR3=CSVATTR3,  - Module attributes                 +\n               OUTVALID=CSVVALID,  - Output valid bitstring            +\n               MF=(E,MYCSVLST)\n         LR    R6,R15              - Save Return Code from CSVQUERY\n         LTR   R6,R6                 Was the caller's module found ?\n         BZ    CHKNAME2                Yes - Continue\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL2      Format CSVQUERY Failed Msg 2\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         B     RETURN\nCHKNAME2 DS    0H\n         CLC   CSVNAME(L'MODNAME),MODNAME   Was EP Name returned ?\n         BE    CHKEPA2                           Yes\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL2B     Format CSVQUERY Failed Msg 2B\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,10                 Set Query2 Fail Rc\n         B     RETURN\nCHKEPA2  DS    0H\n         TM    CSVVALID,CSVVOEPA     Was EP Address returned ?\n         BO    CHKRMOD2                Yes\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,QRYFAIL2C     Format CSVQUERY Failed Msg 2C\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,10                 Set Query2 Fail Rc\n         B     RETURN\nCHKRMOD2 DS    0H                    Where is the Module loacated ?\n         TM    CSVATTR3,CSV3R16M   - Module Resident Above the Line ?\n         BNO   COMPREPA                 No\n         OI    CSVEPA,X'80'             Yes - Set High Order Bit on\nCOMPREPA DS    0H\n         MVC   EPADDRN,CSVEPA        Save the 'After' EPA Addrss\n         MVC   LOADPTN,CSVLOADP      Save the 'After' Load Pt Address\n         CLC   EPADDRN,EPADDRO       Before/After Addresses the same?\n         BNE   DISPEPAS\n         PUT   SYSPRINT,BLANKLIN     Output a Blank Line\n         MVC   MSGAREA,NOEPACHG      Format CSVQUERY Failed Msg 2B\n         PUT   SYSPRINT,MSGLINE      Output Msg\n         LA    R6,10                 Set Query2 Fail Rc\nDISPEPAS DS    0H\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BNE   DISPEPA2                        No  - Don't Copy EP Adr\n         MVC   EPADDRN,EPADDRO              Load Current EP Address\n         MVC   LOADPTN,LOADPTO              Load Current Load Pt Addr\nDISPEPA2 DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY03L),CSVDY03    Load Success-LPA-Update Msg\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BNE   DISPEPA3                        No\n         MVC   MSGAREA(CSVDY25L),CSVDY25    Load Success-LPA-Delete Msg\nDISPEPA3 DS    0H\n         MVC   MSGAREA+44(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n*\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY04L),CSVDY04    Load Message\n         MVC   WORK5,EPADDRO                Convert Old Address\n         BAS   R14,TRANSLT1                 Translate To Hex Display\n         MVC   MSGAREA+27(8),WORK9          Load Old EP Address\n         MVC   WORK5,EPADDRN                Convert New Address\n         BAS   R14,TRANSLT1                 Translate To Hex Display\n         MVC   MSGAREA+53(8),WORK9          Load New EP Address\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         LTR   R6,R6                        All good so far ?\n         BNZ   RETURN                           No  - Return\nUPDTRCVT DS    0H\n         L     R3,16                        Map CVT\n         USING CVT,R3\n         L     R4,CVTRAC                    Point to RCVT\n         USING RCVT,R4                      Map RCVT\n         L     R1,RCVTOFF                 Load the RCVT offset for exit\n         LA    R2,0(R1,R4)                  Point to exit ptr address\n         ST    R2,PTRADDR                   Save exit ptr address\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY05L),CSVDY05    Load Message\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         MVC   WORK5,PTRADDR                Convert Exit PTR Address\n         BAS   R14,TRANSLT1                 Translate To Hex Display\n         MVC   MSGAREA+47(8),WORK9          Load Exit PTR Address\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY06L),CSVDY06    Load Message\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         MVC   WORK5,RCVTOFF                Convert Exit PTR Address\n         BAS   R14,TRANSLT1                 Translate To Hex Display\n         MVC   MSGAREA+47(8),WORK9          Load Exit PTR Address\n         PUT   SYSPRINT,MSGLINE\n*\n         CLC   TESTMODE,TESTPARM            In Test Mode ?\n         BE    TSTMODE                         Yes - In Test Mode\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BE    REPTRCVT                        Yes - Repoint RCVT\n         CLC   0(4,R2),=F'0'                RCVT Pointer = 0 ?\n         BNE   REPTRCVT                        No\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BE    NOTZEROD                        Yes - RCVT already 0\n         CLC   FUNCTION,FNREMOVE            REMOVE  function ?\n         BE    NOTZEROD                        Yes - RCVT already 0\nREPTRCVT DS    0H\n**********************************************************************\n*    If the function is either DELETE or REMOVE, the EPADDRN field   *\n*    will have the value 0 for the RCVT pointer update for the exit. *\n**********************************************************************\n         MODESET KEY=ZERO\n         MVC   0(4,R2),EPADDRN            Update RCVT pointer for Exit\n         MODESET KEY=NZERO\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BE    EXITDELT                        Yes - Remove Successful\n         CLC   FUNCTION,FNREMOVE            REMOVE  function ?\n         BE    EXITREMV                        Yes - Remove Successful\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BE    EXITREPT                        Yes - Repoint Successful\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY07L),CSVDY07    Load RCVT update Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nEXITDELT DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY15L),CSVDY15    Load Exit-Deleted Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nEXITREMV DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY16L),CSVDY16    Load Exit-Removed Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nEXITREPT DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY17L),CSVDY17    Load Exit-Repointed Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nNOTZEROD DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY18L),CSVDY18    Load Already-Zero Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load CSVDYLPA Module Name\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nTSTMODE  DS    0H                           We are in TEST/SIM Mode\n         CLC   FUNCTION,FNDELETE            DELETE  function ?\n         BE    SKIPDELT                        Yes - Test Delete\n         CLC   FUNCTION,FNREMOVE            REMOVE  function ?\n         BE    SKIPREMV                        Yes - Test Remove\n         CLC   FUNCTION,FNREPOIN            REPOINT function ?\n         BE    SKIPREPT                        Yes - Test Remove\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY08L),CSVDY08    Load Message\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Update Msg\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nSKIPDELT DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Delete Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Delete Msg\n         MVC   MSGAREA+41(9),=CL9'DELETED  ' Load Deleted Literal\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nSKIPREMV DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Remove Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Remove Msg\n         MVC   MSGAREA+41(9),=CL9'REMOVED  ' Load Removed Literal\n         PUT   SYSPRINT,MSGLINE             Output Msg\n         B     RETURN\nSKIPREPT DS    0H\n         PUT   SYSPRINT,BLANKLIN            Output a Blank Line\n         MVC   MSGAREA(CSVDY09L),CSVDY09    Load Skip-Repoint Msg\n         MVC   MSGAREA+16(L'MODNAME),MODNAME Load Test-Repoint Msg\n         MVC   MSGAREA+41(9),=CL9'REPOINTED' Load Repointed Literal\n         PUT   SYSPRINT,MSGLINE             Output Msg\nRETURN   DS    0H\n         DROP  R3,R4\n         PUT   SYSPRINT,BLANKLIN    Output a Blank Line\n         CLI   SYSINOP,C'Y'         Is this File Open?\n         BNE   CLOSSYSP                No - Skip Close\n         LA    R3,SYSIN             DCB to close\n         LA    R4,WKOPENCL          Open/Close work area\n         CLOSE ((R3)),MODE=31,MF=(E,(R4))  Close SYSIN DCB\nCLOSSYSP DS    0H\n         CLI   SYSPRTOP,C'Y'        Is this File Open?\n         BNE   RLSESTOR                No - Skip Close\n         LA    R3,SYSPRINT          DCB to close\n         CLOSE ((R3)),MODE=31,MF=(E,(R4))  Close SYSPRINT DCB\nRLSESTOR DS    0H\n         LR    R2,R13               Pointer to storage area\n         L     R3,=A(STORSIZE)      Work area size\n         L     R13,4(,R13)          Restore Caller's SAVEAREA address\n         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)\n         L     R14,12(,R13)         Restore R14\n         LR    R15,R6               Load CSVDYLPA Return Code\n         LR    R0,R7                Load CSVDYLPA Reason Code\n         LM    R1,R12,24(R13)       Restore caller's registers\n         BSM   0,R14                Return to caller\n*\n**********************************************************************\n*    STATIC STORAGE FOLLOWS\n**********************************************************************\n            DS    0F\nTESTMODE    DC    CL4'TEST'              TEST MODE Literal\nSIMUMODE    DC    CL8'SIMULATE'          SIMULATE MODE Literal\nFNUPDATE    DC    CL8'UPDATE'            UPDATE  Function Literal\nFNDELETE    DC    CL8'DELETE'            DELETE  Function Literal\nFNREMOVE    DC    CL8'REMOVE'            REMOVE  Function Literal\nFNREPOIN    DC    CL8'REPOINT'           REPOINT Function Literal\n*\nLMODNBR     DC    F'1'                   Number of Modules to update\nLMODREQ     DC    CL16'ICHLOADR UPDATE'  Requestor id for CSVDYLPA Updt\n*\nBLANKLIN  DC   CL080' '\n*\nNOTAUTHD  DC   CL079'ICHLOADR - PROGRAM ICHLOADR IS NOT APF AUTHORIZED!+\n               '\n*\nNOTAUTH2  DC   CL079'ICHLOADR - LOADLIB CONTAINING RACF EXIT FOR UPDATE+\n                MUST BE APF AUTHORIZED'\n*\nINVLINKM  DC   CL079'ICHLOADR - INVALID LINKAGE PARM PASSED TO ICHLOADR+\n               !'\n*\nINVCALLM  DC   CL079'ICHLOADR - UNAUTHORIZED CALL TO PROGRAM ICHLOADR!'\n*\nTSTSIMSG  DC   CL079'ICHLOADR - TEST/SIMULATE MODE WAS SPECIFIED.  NO U+\n               PDATES WILL TAKE PLACE.'\n*\nINVSYSIN  DC   CL079'ICHLOADR - SYSIN INPUT RECORD IS MISSING OR IS INV+\n               ALID.'\n*\nQRYFAIL1  DC   CL079'ICHLOADR - CSVQUERY MACRO FAILED - QUERY1.'\n*\nQRYFAIL1B DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP NAME - QUE+\n               RY1.'\n*\nQRYFAIL1C DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP ADDRESS - +\n               QUERY1.'\n*\nQRYFAIL2  DC   CL079'ICHLOADR - CSVQUERY MACRO FAILED - QUERY2.'\n*\nQRYFAIL2B DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP NAME - QUE+\n               RY2.'\n*\nQRYFAIL2C DC   CL079'ICHLOADR - CSVQUERY FAILED TO RETURN EP ADDRESS = +\n               QUERY2.'\n*\nNOEPACHG  DC   CL079'ICHLOADR - EPA ADDRESS FOR THE MODULE DID NOT CHAN+\n               GE.'\n*\nCSVDY01   DC   CL079'ICHLOADR - LPA UPDATE FAILED FOR MODULE ???????? '\nCSVDY01L  EQU  *-CSVDY01\n*\nCSVDY02   DC   CL079'ICHLOADR - CSVDYLPA RETURN CODE=????????  RSN=????+\n               ???? '\nCSVDY02L  EQU  *-CSVDY02\n*\nCSVDY03   DC   CL079'ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ??????+\n               ?? '\nCSVDY03L  EQU  *-CSVDY03\n*\nCSVDY04   DC   CL079'ICHLOADR - OLD EP ADDRESS: ????????  NEW EP ADDRES+\n               S: ???????? '\nCSVDY04L  EQU  *-CSVDY04\n*\nCSVDY05   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER ADDRESS: ???+\n               ????? '\nCSVDY05L  EQU  *-CSVDY05\n*\nCSVDY06   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER OFFSET:  ???+\n               ????? '\nCSVDY06L  EQU  *-CSVDY06\n*\nCSVDY07   DC   CL079'ICHLOADR - EXIT ???????? WAS UPDATED AND REPOINTED+\n                SUCCESSFULLY. '\nCSVDY07L  EQU   *-CSVDY07\n*\nCSVDY08   DC   CL079'ICHLOADR - EXIT ???????? WOULD HAVE BEEN UPDATED. +\n               RUNNING IN TEST MODE.'\nCSVDY08L  EQU   *-CSVDY08\n*\nCSVDY09   DC   CL079'ICHLOADR - EXIT ???????? WOULD HAVE BEEN ?????????+\n                - RUNNING IN TEST MODE.'\nCSVDY09L  EQU   *-CSVDY09\n*\nCSVDY11   DC   CL079'ICHLOADR - ???????? FUNCTION IS BEING PROCESSED.'\nCSVDY11L  EQU   *-CSVDY11\n*\nCSVDY12   DC   CL079'ICHLOADR - RACF EXIT MODULE IS ????????          '\nCSVDY12L  EQU   *-CSVDY12\n*\nCSVDY13   DC   CL079'ICHLOADR - LOADLIB DATASET IS ????????????????????+\n               ????????????????????????'\nCSVDY13L  EQU   *-CSVDY13\n*\nCSVDY14   DC   CL079'SYSIN:                                            +\n                                            '\nCSVDY14L  EQU   *-CSVDY14\n*\nCSVDY15   DC   CL079'ICHLOADR - EXIT ???????? WAS DELETED AND UNPOINTED+\n                SUCCESSFULLY.'\nCSVDY15L  EQU   *-CSVDY15\n*\nCSVDY16   DC   CL079'ICHLOADR - EXIT ???????? WAS REMOVED (UNPOINTED) S+\n               UCCESSFULLY.'\nCSVDY16L  EQU   *-CSVDY16\n*\nCSVDY17   DC   CL079'ICHLOADR - EXIT ???????? WAS REPOINTED (RCVT UPDAT+\n               ED) SUCCESSFULLY.'\nCSVDY17L  EQU   *-CSVDY16\n*\nCSVDY18   DC   CL079'ICHLOADR - EXIT ???????? RCVT POINTER WAS ALREADY +\n               ZEROED. NOT UPDATED.'\nCSVDY18L  EQU   *-CSVDY18\n*\nCSVDY19   DC   CL079'ICHLOADR - LPA DELETE FAILED FOR MODULE ???????? '\nCSVDY19L  EQU  *-CSVDY19\n*\nCSVDY20   DC   CL079'ICHLOADR - MODULE ???????? IS NOT PART OF DYNAMIC +\n               LPA.'\nCSVDY20L  EQU   *-CSVDY20\n*\nCSVDY21   DC   CL079'ICHLOADR - CANNOT ALLOCATE DATASET ???????????????+\n               ?????????????????????????????'\nCSVDY21L  EQU   *-CSVDY21\n*\nCSVDY22   DC   CL079'ICHLOADR - NOT APF AUTHORIZED => ?????????????????+\n               ???????????????????????????'\nCSVDY22L  EQU   *-CSVDY22\n*\nCSVDY23   DC   CL079'ICHLOADR - MODULE ???????? COULD NOT BE FOUND IN S+\n               PECIFIED LOADLIB.'\nCSVDY23L  EQU   *-CSVDY23\n*\nCSVDY24   DC   CL079'ICHLOADR - MODULE ???????? DID NOT PREVIOUSLY EXIS+\n               T IN LPA STORAGE.'\nCSVDY24L  EQU   *-CSVDY24\n*\nCSVDY25   DC   CL079'ICHLOADR - LPA DELETE SUCCESSFUL FOR MODULE ??????+\n               ?? '\nCSVDY25L  EQU  *-CSVDY25\n*\n*-------------------------------------------------------------*\n* WTO INITIALIZE AREA                                         *\n*-------------------------------------------------------------*\nWTOINIT  WTO   '                                                       +\n                                                                       +\n                              ',MF=L,ROUTCDE=(11)\nWTOINITL EQU   *-WTOINIT\n*\nOPENI    DS    0F\n         OPEN  (*,OUTPUT),MODE=31,MF=L\nOPENIL   EQU   *-OPENI\n*\n*---------------------------------------------------------------------*\n* DCBs                                                                *\n*---------------------------------------------------------------------*\nSYSINI   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,EODAD=ENDSYSIN,        +\n               LRECL=100,RECFM=FB\nSYSINIL  EQU  *-SYSINI\n*\nSYSPRINI DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +\n               LRECL=080,RECFM=FB\nSYSPRINL EQU  *-SYSPRINI\n*\n            LTORG\n*\n**********************************************************************\n*    DYNAMIC STORAGE FOLLOWS\n**********************************************************************\nSTORAREA    DSECT ,                Reentrant storage\nSAVEAREA    DS    20F\nSAVE3       DS    3F\nWORK5       DS    Xl5\nWORK9       DS    Xl9\nSYSPRTOP    DS    CL1                File is open indicator\nSYSINOP     DS    CL1                File is open indicator\n*\n*---------------------------------------------------------------------*\n* BASE SYSTEM RETURNED DATE AND TIME\n*---------------------------------------------------------------------*\n            DS    0F\nCURRTIME    DS    F               CURRENT TIME OF DAY HHMMSSHH (BINARY)\nCURRDATE    DS    PL4                   CURRENT JULIAN DATE\n*\nDISPTIME    DS    0F                    CURRENT TIME IN DISPLAY FORMAT\nDISPTMHH    DS    CL2                   HOURS\nDISPTMC1    DS    CL1                   COLON\nDISPTMMM    DS    CL2                   MINUTES\nDISPTMC2    DS    CL1                   COLON\nDISPTMSS    DS    CL2                   SECONDS\nDISPTIML    EQU   *-DISPTIME            LENGTH OF DISPTIME\n*\nTIMEXXXX    DS    CL8                   CURRENT TIME HH:MM:SS\n*\nSTORTIME    DS    F                   USED TO CONVERT TO PACKED DECIMAL\nSTORTMSG    DS    XL1                   SIGN FOR PACKED DECIMAL\nTIME9       DS    CL9                   STORE PACKED-TO-ZONE CONVERSION\n*\nJULIANDT    DS    0F                    7 DIGIT JULIAN DATE\nJULCENTY    DS    CL2                   JULIAN DATE'S CENTURY\nJULIANYR    DS    CL2                   JULIAN DATE'S YEAR\nJULDAYS     DS    CL3                   JULIAN DATE'S DAYS\nJULDATEL    EQU   *-JULIANDT            LENGTH OF JULIANDT\n*\nDATEXXXX    DS    CL7                   JULIAN DATE YYYYDDDD\n*\nPARMADDR    DS    F                Save Linkage Parm Address\n*-------------------------------------------------------------*\n*        Linkage Parameter.                                   *\n*-------------------------------------------------------------*\nLL          DS    H                Store Linkage Parm Length (ll)\nTOKEN       DS    CL8              ICH call token\nTESTPARM    DS    CL8              Test (Simulate Only) Parm\n*-------------------------------------------------------------*\n*        SYSIN Input Record Parameters.                       *\n*-------------------------------------------------------------*\nSYSINREC    DS    0CL100           SYSIN Record\nMODNAME     DS    CL8              EP Address before LPA Update\n            DS    CL1\nLMODDSN     DS    CL44             Dataset name to fetch module\n            DS    CL1\nRCVTOFF     DS    F                RCVT offset for module\n            DS    CL1\nFUNCTION    DS    CL8              Function\nREMAINS     DS    CL33             Reserved for Growth\nSYSINRLN    EQU   *-SYSINREC\n            ORG   SYSINREC+SYSINRLN\n\n*-------------------------------------------------------------*\n*        CSVQUERY Parameter List.                             *\n*-------------------------------------------------------------*\n         CSVQUERY MF=(L,MYCSVLST)  CSVQUERY Parameter List\n*-------------------------------------------------------------*\n*        Parameters returned from CSVQUERY macro              *\n*-------------------------------------------------------------*\nCSVNAME     DS    CL8                 Caller's Module name\nCSVMSIZE    DS    F                   Module size\nCSVEPA      DS    F                   EP Address\nCSVLOADP    DS    F                   Module Base Addr\n*-------------------------------------------------------------*\n*        Module attributes byte one.                          *\n*-------------------------------------------------------------*\nCSVATTR1    DS    XL1                 Attributes byte one\nCSV1LGLB    EQU   X'40'               Loaded to global\nCSV1RENT    EQU   X'20'               Reentrant module\nCSV1REUS    EQU   X'10'               Serially reusable\nCSV1OVLY    EQU   X'04'               Overlay\nCSV1ALIA    EQU   X'02'               Alias\n*-------------------------------------------------------------*\n*        Module attributes byte two.                          *\n*-------------------------------------------------------------*\nCSVATTR2    DS    XL1                 Attributes byte two\nCSV2AULB    EQU   X'80'               Authorized library\nCSV2AUPG    EQU   X'40'               Authorized program\nCSV2AMAN    EQU   X'20'               AMODE=ANY\nCSV2AM31    EQU   X'10'               AMODE=31\nCSV2RTLS    EQU   X'08'               RTLS\nCSV2DLPA    EQU   X'04'               Dynamic LPA module\nCSV2PGPT    EQU   X'02'               Page Protected\n*-------------------------------------------------------------*\n*        Module attributes byte three.                        *\n*-------------------------------------------------------------*\nCSVATTR3    DS    XL1                 Attributes byte three\nCSV3R16M    EQU   X'80'               Resident above 16 megabytes\nCSV3JPA     EQU   X'40'               Job Pack Area resident\nCSV3PLPA    EQU   X'20'               PLPA resident\nCSV3MLPA    EQU   X'10'               MLPA resident\nCSV3FLPA    EQU   X'08'               FLPA resident\nCSV3CSA     EQU   X'04'               CSA resident\n*-------------------------------------------------------------*\n*  CSVQUERY results returned fields bitstrings to inspect     *\n*-------------------------------------------------------------*\nCSVVALID    DS    0F                  Output Valid Fields Bitstring\n*\nCSVVL1      DS    XL1                 Valid Byte 1\nCSVVOLEN    EQU   X'80'               Module Length was returned\nCSVVOEPA    EQU   X'40'               Module EPA was returned\nCSVVOEPM    EQU   X'20'               Module Entry Point was returned\nCSVVOMAJ    EQU   X'10'               Module Major Name was returned\nCSVVOSP     EQU   X'08'               Module Subpool was returned\nCSVVOAT1    EQU   X'04'               Module Attr 1 was returned\nCSVVOAT2    EQU   X'02'               Module Attr 2 was returned\nCSVVOAT3    EQU   X'01'               Module Attr 3 was returned\n*\nCSVVL2      DS    XL1                 Valid Byte 2\nCSVVOLPT    EQU   X'80'               Module Load Addr was returned\n*\nCSVVL3      DS    XL1                 Not Referenced in this pgm\nCSVVL4      DS    XL1                 Not Referenced in this pgm\nCSVOUTLN    EQU   *-CSVNAME\n*-------------------------------------------------------------*\n*\nEPADDRO     DS    F                EP Address before LPA Update\nEPADDRN     DS    F                EP Address after  LPA Update\nLOADPTO     DS    F                Load Pt Address before LPA Update\nLOADPTN     DS    F                Load Pt Address after  LPA Update\nPTRADDR     DS    F                Exit PTR Address\n*\nADDINFO     DS    0D\n            ORG   ADDINFO+LPMEA_LEN\n*\nDELINFO     DS    0D\n            ORG   DELINFO+LPMEA_LEN\n*\nLRETCODE    DS    F                  CSVDYLPA Return Code\nLRSNCODE    DS    F                  CSVDYLPA Reason Code\n*\n            DS    0D\n            CSVDYLPA MF=(L,DYLPAL)\n*\nWKOPENCL    DS    0F,CL(OPENIL)      OPEN/CLOSE MACRO RELOCATE AREA\nSYSPRINT    DS    0F,CL(SYSPRINL)    SYSPRINT DCB RELOCATED\nSYSIN       DS    0F,CL(SYSINIL)     SYSIN    DCB RELOCATED\n*\nEXECWTO     DS    CL(WTOINITL)       WTO Message Area\nEXECWTOL    EQU   *-EXECWTO\n*\nMSGLINE     DS    0CL80\nMSGCC       DS    CL1\n            ORG   MSGLINE+L'MSGCC\nMSGAREA     DS    CL79               Format Msgs in this area\n*\nHEADING1    DS    0CL79              Program ICHLOADR Heading Line\nH1LIT1      DS    CL11\nH1VERS      DS    CL9                Maintenance Level VerS.Rel.Mod\n            DS    CL1\nH1DATE      DS    CL8                Current Julian Date\n            DS    CL1\nH1TIME      DS    CL8                Current time\n            DS    41CL1\nHEADING1L   EQU *-HEADING1\n*\nSTORSIZE    EQU   *-STORAREA\n*\n            YREGS ,                  Register Equates\n            CSVLPRET ,               Dynamic LPA Return Information\n            CVT DSECT=YES,LIST=YES , Map Communications Vector Table\n            PRINT ON,GEN\n            ICHPRCVT ,               Map RCVT\n            PRINT NOGEN\n            IEZWPL ,                 Map WTO Parameter List\n            END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LINKEDIT": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x03\\x01\\x10\\x01O\\x01\\x10\\x01O\\x13R\\x00\\x17\\x00\\x1e\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-01-14T00:00:00", "modifydate": "2010-01-14T13:52:03", "lines": 23, "newlines": 30, "modlines": 0, "user": "TKMILLE"}, "text": "//*\n//* JOBCARD GOES HERE ...\n//*\n//* LINK EDIT PROGRAM 'ICHLOADR'.\n//*\n//* CHANGE THE SYSLIN PDS DATASET NAME TO THE RECEIVED PDS NAME.\n//* DO NOT CHANGE THE MEMBER NAME FROM '$OBJECT'.\n//*\n//* CHANGE THE TARGET SYSLMOD LOAD LIBRARY BELOW TO YOUR APF-\n//* AUTHORIZED LOAD LIBRARY.\n//*\n//LINKEDIT EXEC PGM=IEWL,COND=(0,NE),\n//         PARM='LIST,LET,MAP,XREF,RENT,REUS'\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SMPE.ICH($OBJECT)         <= CHANGE THIS\n//         DD DDNAME=SYSIN\n//SYSLMOD  DD DISP=SHR,DSN=MY.APFAUTHD.LOADLIB       <= CHANGE THIS\n//SYSUT1   DD UNIT=SYSDA,SPACE=(23476,(150,50),RLSE)\n//SYSIN    DD *\n ENTRY ICHLOADR\n SETCODE AC(1)\n NAME  ICHLOADR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROGCNTL": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00&\\x01\\x10\\x01\\x1f\\x01\\x10\\x01/\\x11W\\x00\"\\x00\\x14\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2010-01-11T00:00:00", "modifydate": "2010-01-12T11:57:26", "lines": 34, "newlines": 20, "modlines": 0, "user": "TKMILLE"}, "text": "//*\n//* JOBCARD GOES HERE ...\n//*\n//* CHANGE THE OWNERID AND PERMITTED USERIDS BELOW.\n//*\n//*****************************************************************\n//* SET UP RACF PROGRAM CONTROL FOR PROGRAM 'ICHLOADR' TO RESTRICT\n//* ITS USE TO ONLY SYSTEM PROGRAMMERS.\n//*****************************************************************\n//* CHANGE THE OWNER USERID ON THE OWNER PARM BELOW.\n//*\n//* CHANGE THE LOAD LIBRARY IN WHICH MODULE 'ICHLOADR' RESIDES IN\n//* TO YOUR INSTALLATION LOAD LIBRARY (MUST BE APF AUTHORIZED) ON\n//* THE ADDMEM PARM BELOW.\n//*\n//* CHANGE THE PERMIT USERIDS IN THE ID LIST BELOW.\n//*****************************************************************\n//PROGCNTL   EXEC PGM=IKJEFT01,DYNAMNBR=30\n//SYSTSPRT   DD SYSOUT=*\n//SYSUDUMP   DD SYSOUT=*\n//SYSTSIN    DD *\n  RDEFINE PROGRAM  ICHLOADR                                          +\n          UACC(NONE)                                                 +\n          DATA('RACF PROFILE FOR RACF UTILITY PROGRAM ICHLOADR')     +\n          ADDMEM ('SYS1.MYAPF.LOAD.LIBRARY'//PADCHK)                 +\n          OWNER(OWNERID)                /* <= CHANGE THIS OWNERID */\n\n  SETROPTS WHEN(PROGRAM) REFRESH\n\n  PERMIT ICHLOADR  CLASS(PROGRAM)  ACCESS(READ)                      +\n         ID(USERID1,USERID2,USERID3)    /* <= CHANGE USERIDS */\n\n  SETROPTS WHEN(PROGRAM) REFRESH\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPDISP": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00B\\x01\\x040\\x0f\\x01\\x10\\x01\\x9f\\x10)\\x01\\xcd\\x00!\\x00\\x00\\xe3\\xd2\\xd4\\xc9\\xd3\\xd3\\xc5@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2004-10-26T00:00:00", "modifydate": "2010-01-19T10:29:42", "lines": 461, "newlines": 33, "modlines": 0, "user": "TKMILLE"}, "text": "\n EXAMPLE INVOCATION DISPLAYS FROM EXEC 'ICH'    01/19/2009\n -------------------------------------------\n\n %ICH  ICHRCX02 UPDATE\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:00          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:00\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: BA4DE000\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 UPDATE     (ICHRCX02 did not pre-exist in LPA storage)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:00          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:00\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - MODULE ICHRCX02 DID NOT PREVIOUSLY EXIST IN LPA STORAGE.\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 00000000  NEW EP ADDRESS: BA4DE000\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 UPDATE         (Staging loadlib is not cataloged)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:40          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIBS\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 15:00:40\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIBS\n\n ICHLOADR - LPA UPDATE FAILED FOR MODULE ICHRCX02\n\n ICHLOADR - CSVDYLPA RETURN CODE=00000008  RSN=17080829\n\n ICHLOADR - CANNOT ALLOCATE DATASET SYS1.LPALIBS\n\n ICHLOADR - RETURN CODE = 8\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 UPDATE DA(SYS1.TEST.LOADLIB)   (Module not found in dsn)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:41:10          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.TEST.LOADLIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:41:10\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.TEST.LOADLIB\n\n ICHLOADR - LPA UPDATE FAILED FOR MODULE ICHRCX02\n\n ICHLOADR - CSVDYLPA RETURN CODE=00000004  RSN=00000401\n\n ICHLOADR - MODULE ICHRCX02 COULD NOT BE FOUND IN SPECIFIED LOADLIB.\n\n ICHLOADR - RETURN CODE = 4\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 UPDATE  TEST          (Test parm used)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:41:20          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n ICH      - Test Parm   = TEST\n\n ICHLOADR - V01.01.01 2010.015 14:41:20\n\n ICHLOADR - TEST/SIMULATE MODE WAS SPECIFIED.  NO UPDATES WILL TAKE PLACE.\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WOULD HAVE BEEN UPDATED. RUNNING IN TEST MODE.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 UPDATE  SIMULATE          (Simulate parm used)\n                                           (Does same thing as TEST)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:41:30          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n ICH      - Test Parm   = SIMULATE\n\n ICHLOADR - V01.01.01 2010.015 14:41:30\n\n ICHLOADR - TEST/SIMULATE MODE WAS SPECIFIED.  NO UPDATES WILL TAKE PLACE.\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WOULD HAVE BEEN UPDATED. RUNNING IN TEST MODE.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 DELETE              (Delete and Unpoint a module)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:10          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = DELETE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:10\n\n ICHLOADR - DELETE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LPA DELETE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: BA4DE000  NEW EP ADDRESS: 8589C8B8\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS DELETED AND UPPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 DELETE         (Delete - Module not in dynamic LPA)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:50          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = DELETE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:50\n\n ICHLOADR - DELETE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LPA DELETE FAILED FOR MODULE ICHRCX02\n\n ICHLOADR - CSVDYLPA RETURN CODE=00000004  RSN=00000401\n\n ICHLOADR - MODULE ICHRCX02 IS NOT PART OF DYNAMIC LPA.\n\n ICHLOADR - RETURN CODE = 4\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 REMOVE\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:20          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = REMOVE\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:20\n\n ICHLOADR - REMOVE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS REMOVED (UNPOINTED) SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRLX01 REMOVE          (Remove a module that does not exist)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:30          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRLX01\n\n ICH      - Module      = ICHRLX01\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = REMOVE\n ICH      - RCVT Offset = 000000CC\n\n ICHLOADR - V01.01.01 2010.019 09:49:16\n\n ICHLOADR - REMOVE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRLX01\n\n ICHLOADR - MODULE ICHRLX01 DID NOT PREVIOUSLY EXIST IN LPA STORAGE.\n\n ICHLOADR - CSVQUERY MACRO FAILED - QUERY1.\n\n ICHLOADR - RETURN CODE = 9\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRLX01 REMOVE       (Remove a module which is already removed)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:30          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRLX01\n\n ICH      - Module      = ICHRLX01\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = REMOVE\n ICH      - RCVT Offset = 000000CC\n\n ICHLOADR - V01.01.01 2010.019 10:29:02\n\n ICHLOADR - REMOVE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FC5434\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER WAS ALREADY ZEROED. NOT UPDATED.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRCX02 REPOINT\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:30          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = REPOINT\n ICH      - RCVT Offset = 000000A4\n\n ICHLOADR - V01.01.01 2010.015 14:40:30\n\n ICHLOADR - REPOINT  FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: 8589C8B8\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS REPOINTED (RCVT UPDATED) SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n %ICH  ICHRLX01 REPOINT        (Repoint a Module that does not exist)\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:50          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRLX01\n\n ICH      - Module      = ICHRLX01\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = REPOINT\n ICH      - RCVT Offset = 000000CC\n\n ICHLOADR - V01.01.01 2010.019 09:37:46\n\n ICHLOADR - REPOINT  FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRLX01\n\n ICHLOADR - MODULE ICHRLX01 DID NOT PREVIOUSLY EXIST IN LPA STORAGE.\n\n ICHLOADR - CSVQUERY MACRO FAILED - QUERY1.\n\n ICHLOADR - RETURN CODE = 9\n\n\n **************************** Bottom of Data ***************************\n\n\n\n END OF INVOCATION DISPLAYS FROM EXEC 'ICH'\n -------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT819/FILE819.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT819", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}