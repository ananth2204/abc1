{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012035000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE441.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE441.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x07'", "DS1TRBAL": "b'\\x7f\\x80'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03-\\x00\\x0e\\x03.\\x00\\x03\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"@FILE441": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x04?\\x01\\x00\\x05/\\x19\\x12\\x00i\\x00h\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-12T00:00:00", "modifydate": "2000-02-21T19:12:00", "lines": 105, "newlines": 104, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 441 is from Brian Vogt of EDS, and contains 2 programs    *   FILE 441\n//*           for RACF:                                             *   FILE 441\n//*                                                                 *   FILE 441\n//*           (1) RESUME - to recover from a situation in which all *   FILE 441\n//*               userids with SPECIAL or OPERATIONS attributes     *   FILE 441\n//*               have been revoked.  The program runs as a         *   FILE 441\n//*               started task, and mimics the effect of a          *   FILE 441\n//*               \"TSO ALU userid RESUME\" command.                  *   FILE 441\n//*           (2) RA#NAMES - list all userids & user's names to a   *   FILE 441\n//*               data set, and all group ids & installation-data   *   FILE 441\n//*               to another data set - (all one-line entries).     *   FILE 441\n//*                                                                 *   FILE 441\n//*           email: \"Vogt, Brian A\" <brian.vogt@eds.com>           *   FILE 441\n//*                                                                 *   FILE 441\n//*     RESUME                                                      *   FILE 441\n//*     ======                                                      *   FILE 441\n//*       DATE   - November 1987.    MVS/SP 2.1.7 with RACF 1.7.0.  *   FILE 441\n//*        SMF logging and updating of last access added July       *   FILE 441\n//*        1988.  Tested ok on MVS 5.2.2 with RACF 2.2 and          *   FILE 441\n//*        also on OS/390 2.6 (Jan 2000).                           *   FILE 441\n//*                                                                 *   FILE 441\n//*       FUNCTION -                                                *   FILE 441\n//*        Use ICHEINTY to modify the following in a RACF USER      *   FILE 441\n//*        profile :                                                *   FILE 441\n//*         (1) unset FLAG4 (REVOKE attribute).                     *   FILE 441\n//*         (2) zero out REVOKECT (revoke count).                   *   FILE 441\n//*         (3) set LJTIME & LJDATE to the current time & date.     *   FILE 441\n//*         (4) For the benefit of the RACF Auditor, write a type   *   FILE 441\n//*             80 SMF record (pretending to be ALTUSER with the    *   FILE 441\n//*             RESUME parameter).                                  *   FILE 441\n//*                                                                 *   FILE 441\n//*        The most likely practical applications are :             *   FILE 441\n//*         (a) A hacker revokes all of the privileged userids in   *   FILE 441\n//*             the system, by submitting many batch jobs with      *   FILE 441\n//*             incorrect passwords.  (Never trust an Operator to   *   FILE 441\n//*             reply correctly to message ICH302D).  This program  *   FILE 441\n//*             cannot be thwarted, as it does not run under a      *   FILE 441\n//*             RACF userid.                                        *   FILE 441\n//*                                                                 *   FILE 441\n//*         (b) The userid of a production batch job becomes        *   FILE 441\n//*             revoked overnight.  The MVS Operator can overcome   *   FILE 441\n//*             this, with a bit of information from the on-call    *   FILE 441\n//*             Security Admin.                                     *   FILE 441\n//*                                                                 *   FILE 441\n//*       SETUP DOCUMENTATION -                                     *   FILE 441\n//*       -------------------                                       *   FILE 441\n//*        (1) This program must be invoked from a started task.    *   FILE 441\n//*              //RESUME   PROC U=,PW=                             *   FILE 441\n//*              //RESUME   EXEC PGM=RESUME,PARM='&USER,&PW'        *   FILE 441\n//*        (2) The started task name must be RESUME.                *   FILE 441\n//*        (3) Do NOT put the started task name into the RACF       *   FILE 441\n//*            Started Procedures Table (ICHRIN03) or create a      *   FILE 441\n//*            STARTED profile for it.  The task doesn't need a     *   FILE 441\n//*            userid, and is better off without one.               *   FILE 441\n//*                                                                 *   FILE 441\n//*       USER DOCUMENTATION -                                      *   FILE 441\n//*       ------------------                                        *   FILE 441\n//*        (1) The function is invoked via this MVS command:        *   FILE 441\n//*              S RESUME,U=userid,PW=password                      *   FILE 441\n//*        (2) The userid (U keyword) must be specified.            *   FILE 441\n//*        (3) The password (PW keyword) must match the RVARY       *   FILE 441\n//*            SWITCH password.  If there is no RVARY SWITCH        *   FILE 441\n//*            password (RCVTSWPW is binary zeroes), this parameter *   FILE 441\n//*            is ignored, and may be entirely omitted from the     *   FILE 441\n//*            START command.                                       *   FILE 441\n//*        (4) The RVARY SWITCH password should be changed by the   *   FILE 441\n//*            RACF Security Administrator as soon as practicable   *   FILE 441\n//*            after use.                                           *   FILE 441\n//*                                                                 *   FILE 441\n//*     RA#NAMES                                                    *   FILE 441\n//*     ========                                                    *   FILE 441\n//*       DATE - October 1990.                                      *   FILE 441\n//*              Jan 1991 - Automatic REVOKE feature added.         *   FILE 441\n//*              Feb 2000 - Fixed minor Y2K bug in report header    *   FILE 441\n//*                         and major Y2K bug in automatic REVOKE   *   FILE 441\n//*                         feature.  Added \"revoke trace\"          *   FILE 441\n//*                         sub-feature.                            *   FILE 441\n//*       FUNCTIONS -                                               *   FILE 441\n//*       1. Write a list of all userids and their respective NAME  *   FILE 441\n//*          fields.  The output DDname is UIDS.                    *   FILE 441\n//*       2. In the case of userids which have not been used yet,   *   FILE 441\n//*          if a number of days have elapsed since creation, set   *   FILE 441\n//*          the revoke indicator (FLAG4).  This \"number of days\"   *   FILE 441\n//*          is specified as a the parameter when invoking this     *   FILE 441\n//*          program.                                               *   FILE 441\n//*       3. Write a list of all group names and their respective   *   FILE 441\n//*          installation-defined data fields.                      *   FILE 441\n//*          The output DDname is GRPS.                             *   FILE 441\n//*                                                                 *   FILE 441\n//*       USER DOCUMENTATION -                                      *   FILE 441\n//*          //RA#NAMES EXEC PGM=RA#NAMES,PARM='31'                 *   FILE 441\n//*          //UIDS     DD   DSN=SYS3.RACFADM.USERIDS,DISP=SHR      *   FILE 441\n//*          //GRPS     DD   DSN=SYS3.RACFADM.GROUPS,DISP=SHR       *   FILE 441\n//*          (Supply any sequential data sets; this program has     *   FILE 441\n//*           the DCB attributes hard-coded).                       *   FILE 441\n//*       1. The PARM value is the number of days before an unused  *   FILE 441\n//*          (new) userid will be automatically REVOKEd by this     *   FILE 441\n//*          program.  Maximum value is 3 decimal digits.           *   FILE 441\n//*       2. If there is no parameter, or a value of zero is        *   FILE 441\n//*          specified, no REVOKE is performed.                     *   FILE 441\n//*       3. If the value is preceded by a minus sign, e.g.         *   FILE 441\n//*          PARM='-31' the REVOKE is not actually performed, but   *   FILE 441\n//*          trace WTOs indicate what would have happened if the    *   FILE 441\n//*          minus sign had been omitted.                           *   FILE 441\n//*                                                                 *   FILE 441\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RA#NAMES": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x04?\\x01\\x00\\x04?\\x01\\x02\\x03\\x04\\x03\\x04\\x00\\x00\\xe5\\xd6\\xc7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-12T00:00:00", "modifydate": "2000-02-12T01:02:00", "lines": 772, "newlines": 772, "modlines": 0, "user": "VOGT"}, "text": "//RA#NAMES JOB  ACCOUNT,'Brian Vogt',\n//* ===> RA#NAMES <===\n//            CLASS=G,MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//*\n//*\n//ASM      EXEC PGM=ASMA90,PARM='OBJ,NODECK,NOXREF'\n//SYSIN    DD   *,DLM=@@\n         TITLE 'RA#NAMES -  List the names of all RACF USER and GROUP p#\n               rofiles'\n         PRINT GEN\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n*                                                                     *\n* Author :                                                            *\n*    Brian A. Vogt, October 1990.                                     *\n*                                                                     *\n* Functions :                                                         *\n*    1. Write a list of all userids and their respective NAME         *\n*       fields.  The output DDname is UIDS.                           *\n*    2. In the case of userids which have not been used yet,          *\n*       if a number of days have elapsed since creation, set the      *\n*       revoke indicator (FLAG4).  This \"number of days\" is           *\n*       specified as a the parameter when invoking this program.      *\n*    3. Write a list of all group names and their respective          *\n*       installation-defined data fields.                             *\n*       The output DDname is GRPS.                                    *\n*                                                                     *\n* User Documentation :                                                *\n*    //STEP01  EXEC PGM=RA#NAMES,PARM='31'                            *\n*    1. The PARM value is the number of days before an unused (new)   *\n*       userid will be automatically REVOKEd by this program.         *\n*       Maximum value is 3 decimal digits.                            *\n*    2. If there is no parameter, or a value of zero is specified,    *\n*       no REVOKE is performed.                                       *\n*    3. If the value is preceded by a minus sign, e.g. PARM='-31'     *\n*       the REVOKE is not actually performed, but trace WTOs indicate *\n*       what would have happened if the minus sign had been omitted.  *\n*                                                                     *\n* DDnames used :                                                      *\n*    UIDS -  USER profile info.  DCB=(DSORG=PS,RECFM=FB,LRECL=48)     *\n*    GRPS -  GROUP profile info. DCB=(DSORG=PS,RECFM=VB,LRECL=270)    *\n*                                                                     *\n* Attributes :                                                        *\n*    APF authorized.                                                  *\n*                                                                     *\n* Operating System developed for :                                    *\n*    MVS/SP 3.1.0    RACF 1.8.1                                       *\n*    Tested on MVS 5.2.2 with RACF 2.2                                *\n*                                                                     *\n* Modifications :                                                     *\n*    BAV - Jan 1991 - Automatic REVOKE feature added.                 *\n*    BAV - Feb 2000 - Fixed minor Y2K bug in report header and        *\n*                     major Y2K bug in automatic REVOKE feature.      *\n*                     Added \"revoke trace\" sub-feature.               *\n*                                                                     *\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\nRA#NAMES CSECT\nRA#NAMES AMODE 24\nRA#NAMES RMODE 24\n         USING RA#NAMES,R15            Temporary base addressing\n         B     GO                      Branch around notice\n         DC    C'RA#NAMES  Assembled &SYSDATE &SYSTIME'\nGO       DS    0H\n         DROP  R15\n         SAVE  (14,12)                 Save registers\n         LR    R11,R15                 Load base register\n         LA    R12,2048(R11)\n         LA    R12,2048(R12)           Second base register\n         USING RA#NAMES,R11,R12        Base addressing\n         LA    R9,SAVE                 R9 -> LSA\n         ST    R13,4(R9)               HSA in LSA\n         ST    R9,8(R13)               LSA in HSA\n         LR    R13,R9                  R13 -> LSA\n         SPACE 2\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Fetch the parameter value, and check that it is not too long.    *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n         L     R4,0(R1)                   R4 -> length & parameter\n         LH    R3,0(R4)                   R3 = length of parameter\n         LTR   R3,R3                      Is it zero ?\n         BZ    OPEN                       Yes - parameter not specified\n         LA    R4,2(R4)                   Point to parameter digits\n*\n*    Parameter specified.  Determine whether it's negative.\n         CLI   0(R4),C'-'                 Is first digit a minus sign?\n         BNE   GETPARM                    No - simple integer\n         MVI   TRACE,C'Y'                 Set the trace flag on\n         LA    R4,1(R4)                   Advance past the minus sign\n         BCTR  R3,0                       Decrement param length\nGETPARM  DS    0H\n         CH    R3,=H'3'                   Is it longer than 3 digits ?\n         BH    ERROR00                    Yes - nick off\n         BCTR  R3,0                       Decrement for EX instruction\n         EX    R3,PAK                     Convert chars to packed dec\n         CVB   R4,PACKED                  Convert packed dec to binary\n         ST    R4,PARAM                   Save it for later\n*\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Open the UIDS and GRPS files for output.                         *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\nOPEN     DS    0H\n         OPEN  (UIDS,(OUTPUT))\n         LA    R1,UIDS                    R1 -> UIDS DCB\n         TM    DCBOFLGS-IHADCB(R1),X'10'  Is UIDS file open?\n         BZ    ERROR01                    No - nick off\n*\n         OPEN  (GRPS,(OUTPUT))\n         LA    R1,GRPS                    R1 -> GRPS DCB\n         TM    DCBOFLGS-IHADCB(R1),X'10'  Is GRPS file open?\n         BZ    ERROR02                    No - nick off\n         SPACE 2\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Get a few work areas before we start.                            *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*\n*\n*    Write the heading records to the UIDS file\n*\n         LA    R1,0\n         ST    R1,DATEP+4              Set 4th word to 0 beforehand\n         TIME  DEC,TIMEP,LINKAGE=SYSTEM,DATETYPE=DDMMYYYY\n         UNPK  TIMEZ(7),TIMEP(4)       Convert to printable chars\n         UNPK  DATEZ(9),DATEP(5)       Convert to printable chars\n*\n         MVC   UHDA(2),DATEZ           Day number\n         MVC   UHMO(2),DATEZ+2         Month number\n         MVC   UHYEAR(4),DATEZ+4       Year number\n         MVC   UHHH(2),TIMEZ           Hours\n         MVC   UHMM(2),TIMEZ+2         Minutes\n         MVC   UHSS(2),TIMEZ+4         Seconds\n         PUT   UIDS,UHREC1             Write the 1st heading record\n         PUT   UIDS,UHREC2             Write the 2nd heading record\n         PUT   UIDS,UHREC3             Write the 3rd heading record\n         PUT   UIDS,UHREC4             Write the 4th heading record\n*\n*    Get the Julian date into DATEP, for processing USER profiles\n         L     R1,PARAM                Get user parameter\n         LTR   R1,R1\n         BZ    UPNEXT                  Don't need the date\n         TIME  DEC,TIMEP,LINKAGE=SYSTEM,DATETYPE=YYYYDDD\n*\n*    Convert current year to binary\n         L     R1,DATEP\n         SRL   R1,12                   Eliminate days\n         SLL   R1,16                   Eliminate leading zeros\n         ST    R1,YEAR$P\n         SRL   R1,12                   Make room for X'C' in sign field\n         LA    R1,X'C'(R1)             Insert X'C' in sign field\n         ST    R1,PACKED+4\n         CVB   R1,PACKED               Convert current year to binary\n         ST    R1,YEAR$B\n*\n*    Figure out the number of days last year.\n         LA    R0,0                    Register used for Divide instr\n         BCTR  R1,0                    R1 = last year\n         D     R0,=F'4'                Divide year by 4.  If no\n*                                        remainder in R0, then last\n*                                        year was a leap year.\n         LTR   R0,R0                   Is there a remainder in reg 0 ?\n         BZ    LEAP                    No - it was a leap year\n         LA    R5,365                  Number of days in normal year\n         B     XDAYS\nLEAP     DS    0H\n         LA    R5,366                  Number of days in leap year\nXDAYS    DS    0H\n         ST    R5,DLY                  Number of days last year\n*\n*    Convert ddd part of current date to binary.\n         L     R1,DATEP\n         SLL   R1,20                   Eliminate year\n         SRL   R1,16                  Leave room for X'C' in sign field\n         LA    R1,X'C'(R1)             Insert X'C' in sign field\n         ST    R1,PACKED+4\n         CVB   R1,PACKED               Convert current year to binary\n         ST    R1,DAY$B\n*\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Retrieve all USER profiles, and write a record for each one.     *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\nUPNEXT   DS    0H                      Top of loop\n         LA    R7,IWKAUL               R7 = ICHEINTY work area length\n         ST    R7,IWKAU                Store length of work area in\n*                                       its header\n         MVI   IWKAU+4,X'00'           }  Zero out the rest of the\n         MVC   IWKAU+5(27),IWKAU+4     }   ICHEINTY work area header\n*\n         MVI   PGMRNU,C' '             Blank out the user name field\n         MVC   PGMRNU+1(19),PGMRNU\n*                                      Fetch the next USER profile\n         ICHEINTY ENTRY=IUID,RELEASE=1.8,WKAREA=IWKAU,MF=(E,INTYU)\n         LA    R1,12                   Code for \"no subsequent entries\"\n         CR    R1,R15                  Did we get it ?\n         BZ    GPROFS                  Yes - get out of the loop\n         LTR   R15,R15                 Did it otherwise succeed ?\n         BNZ   ERROR03                 No - issue message, then skip\n*                                       the remaining profiles, and\n*                                       terminate the program.\n*                                      Else R15 = 0\n*\n*    This userid may be shorter than the previous one, in which case\n*    some residual characters remain.\n*    Blank out the trailing characters, so that we can treat\n*    this userid as being an 8 character, blank-filled userid.\n*                                      R15 = 0 still\n         IC    R15,IUID                R15 = length of userid\n         LA    R7,THISUID              R7 -> start of userid\n         AR    R15,R7                  R15 -> end+1 of userid\n         MVC   0(8,R15),BLANX          Blank out residual characters\n         MVC   USERID(8),THISUID       Copy the userid\n         MVC   NAME(20),PGMRNU         Copy the user name\n         MVC   OWNER(8),AUTHU          Copy the owner's id\n         UNPK  CODED(7),AUTHDATE(4)    Unpack date into zoned field\n         MVC   CRE8YY,CODED            Store year number\n         MVC   CRE8DDD,CODED+2         Store day number\n         PUT   UIDS,UIDSREC            Write the record\n*\n*    Special treatment for unused userids :\n*\n         L     R3,PARAM                Get parameter value\n         LTR   R3,R3                   Is it zero ?\n         BZ    UPNEXT                  Yes - don't REVOKE anything\n*\n         CLC   LJDATE,THREEFF          Has it ever been used ?\n         BNE   UPNEXT                  Yes - get next USER profile\n*\n*    Current year (4 digits) is in packed format, starting at YEAR$P.\n*    Profile creation date (2 digit yr), packed, starts at AUTHDATE.\n         LA    R1,0                    In case we jump\n         CLC   YEAR$P+1(1),AUTHDATE    Was it created this year ?\n         BE    GOTYR                   Yes - simply compare days\n*\n         LA    R3,0\n         ST    R3,PACKED\n         IC    R3,AUTHDATE             Creation year (2 digits)\n         SLL   R3,4                    Make room for X'C' in sign field\n         LA    R3,X'C'(R3)             Insert X'C' in sign field\n         ST    R3,PACKED+4\n         CVB   R3,PACKED               Convert creation year to binary\n*\n*   Use \"fixed window\" technique to convert it to \"4 digit\" year.\n         LA    R4,70\n         CR    R3,R4                   Is year > 70 ?\n         BH    YR$1900                 Yes - add 1900 to it\n         LA    R4,2000\n         AR    R3,R4                   Add 2000 to it\n         B     YR$OK\nYR$1900  LA    R4,1900\n         AR    R3,R4                   Add 1900 to it\nYR$OK    DS    0H                      R3 = 4-digit creation year\n*\n*    Calculate the difference between the years\n         LA    R0,0\n         L     R1,YEAR$B               This year\n         SR    R1,R3                   Difference between years\n         L     R5,DLY\n         MR    R0,R5                   Multipy difference by 365 or 366\n*                                       (result in R1; R0 will be 0)\nGOTYR    DS    0H\n         LA    R3,0\n         LH    R3,AUTHDATE+1           Creation day (1 thru 366)\n         ST    R3,PACKED+4\n         CVB   R3,PACKED               Convert creation day to binary\n*\n         L     R4,DAY$B                \"ddd\" part of current date\n         AR    R4,R1                   Add extra days from year diff.\n         SR    R4,R3                   Net difference between dates\n         L     R3,PARAM                Get parameter value\n         CR    R4,R3                   Is difference > parameter ?\n         BNH   UPNEXT                  No - don't REVOKE this userid\n*\n*    This userid is eligible to be revoked.\n*    Before revoking, check whether it's already revoked.\n*\n         TM    FLAG4,X'80'             Is the revoke flag on ?\n         BNO   REVOKE                  No - go and do it\n         LA    R1,IMSG10\n         MVC   I10UID,THISUID          Copy profile name into message\n         MVC   I10CRE8(6),EDMASK       Move in the EDIT mask\n         ED    I10CRE8(6),AUTHDATE     Convert creation date to zoned\n         LA    R9,UPNEXT               After WTO, get next USER profile\n         B     WTO\n*\nREVOKE   DS    0H\n         CLI   TRACE,C'Y'              Is \"revoke trace\" option set?\n         BE    REV$TRA\n         ICHEINTY ENTRY=IUID,RELEASE=1.8,MF=(E,INTYA)\n         LTR   R15,R15                 Did ICHEINTY fail ?\n         BNZ   ERROR05                 Yes - issue error message\n*                                      Else issue success message\n         LA    R1,IMSG11\n         MVC   I11UID,THISUID          Copy profile name into message\n         MVC   I11CRE8(6),EDMASK       Move in the EDIT mask\n         ED    I11CRE8(6),AUTHDATE     Convert creation date to zoned\n         LA    R9,UPNEXT               After WTO, get next USER profile\n         B     WTO\n*\nREV$TRA  DS    0H\n         LA    R1,IMSG12\n         MVC   I12UID,THISUID          Copy profile name into message\n         MVC   I12CRE8(6),EDMASK       Move in the EDIT mask\n         ED    I12CRE8(6),AUTHDATE     Convert creation date to zoned\n         LA    R9,UPNEXT               After WTO, get next USER profile\n         B     WTO\n*\nGPROFS   DS    0H\n*\n*    Write the heading record to the GRPS file\n*\n         LA    R1,0\n         ST    R1,DATEP+4              Set 4th word to 0 beforehand\n         TIME  DEC,TIMEP,LINKAGE=SYSTEM,DATETYPE=DDMMYYYY\n         UNPK  TIMEZ(7),TIMEP(4)       Convert to printable chars\n         UNPK  DATEZ(9),DATEP(5)       Convert to printable chars\n*\n         MVC   GHDA(2),DATEZ           Day number\n         MVC   GHMO(2),DATEZ+2         Month number\n         MVC   GHYEAR(4),DATEZ+4       Year number\n         MVC   GHHH(2),TIMEZ           Hours\n         MVC   GHMM(2),TIMEZ+2         Minutes\n         MVC   GHSS(2),TIMEZ+4         Seconds\n         PUT   GRPS,GHREC              Write the heading record\n         SPACE 2\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Retrieve all GROUP profiles, and write a record for each one.    *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\nGPNEXT   DS    0H                      Top of loop\n         LA    R7,IWKAGL               R7 = ICHEINTY work area length\n         ST    R7,IWKAG                Store length of work area in\n*                                       its header\n         MVI   IWKAG+4,X'00'           }  Zero out the rest of the\n         MVC   IWKAG+5(27),IWKAG+4     }   ICHEINTY work area header\n*\n*                                      Fetch the next GROUP profile\n         ICHEINTY ENTRY=IGRP,RELEASE=1.8,WKAREA=IWKAG,MF=(E,INTYG)\n         LA    R1,12                   Code for \"no subsequent entries\"\n         CR    R1,R15                  Did we get it ?\n         BZ    RETURN0                 Yes - get out of the loop\n         LTR   R15,R15                 Did it otherwise succeed ?\n         BNZ   ERROR04                 No - issue message, then skip\n*                                       the remaining profiles, and\n*                                       terminate the program.\n*                                      Else R15 = 0\n*    This group name may be shorter than the previous one, in which\n*    case some residual characters remain.\n*    Blank out the trailing characters, so that we can treat\n*    this group name as being an 8 character, blank-filled userid.\n*                                      R15 = 0 still\n         IC    R15,IGRP                R15 = length of group name\n         LA    R7,THISGRP              R7 -> start of group name\n         AR    R15,R7                  R15 -> end+1 of group name\n         MVC   0(8,R15),BLANX          Blank out residual characters\n         MVC   GRPID(8),THISGRP        Copy the group name\n         L     R15,INSDGL              R8 = length of Instl. Data\n         LA    R0,15                   Minimum length of record\n         AR    R0,R15                  Add length of instl data\n         STH   R0,RECL                 Store record length into RDW\n         LA    R8,INSDG                R8 -> instl data for this group\n         LTR   R15,R15                 Is length = 0 ?\n         BZ    PUTG                    No - don't bother moving data\n         BCTR  R15,R0                  Decrement by 1 for EX instructn.\n         EX    R15,MVCI                Insert the Instl. Data\nPUTG     DS    0H\n         PUT   GRPS,GRPSREC            Write the record\n         B     GPNEXT                  Get next GROUP profile\n         EJECT\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Terminate the program.  Firstly, clean up the place by           *\n*    releasing all allocated resources.                               *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\nRETURN0  DS    0H\n         LA    R15,0\n         B     RETURN\nRETURN8  DS    0H\n         LA    R15,8\nRETURN   DS    0H\n         ST    R15,RETCODE             Save the return code\n         CLOSE UIDS\n         CLOSE GRPS\n         L     R15,RETCODE             Fetch the return code\n         L     R13,4(R13)              R13 -> HSA\n         RETURN (14,12),RC=(15)        Return\n         SPACE 3\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Error routines                                                   *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n         SPACE 1\nERROR00  DS    0H\n         LA    R1,ERRMSG00\n         LA    R9,RETURN8\n         B     WTO\n*\nERROR01  DS    0H\n         LA    R1,ERRMSG01\n         LA    R9,RETURN8\n         B     WTO\n*\nERROR02  DS    0H\n         LA    R1,ERRMSG02\n         LA    R9,RETURN8\n         B     WTO\n*\nERROR03  DS    0H\n         MVC   E03UID,THISUID          Copy profile name into message\n         ST    R15,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E03R15(3),CODED+5       Store numbers into message\n         ST    R0,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E03R00(3),CODED+5       Store numbers into message\n         LA    R1,ERRMSG03\n         LA    R9,E03A                 Make it to come back here\n         B     WTO\nE03A     DS    0H\n         LA    R1,ERRMSH03             R1 -> 2nd line of message\n         LA    R9,RETURN8\n         B     WTO\n*\nERROR04  DS    0H\n         MVC   E04GRP,THISGRP          Copy profile name into message\n         ST    R15,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E04R15(3),CODED+5       Store numbers into message\n         ST    R0,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E04R00(3),CODED+5       Store numbers into message\n         LA    R1,ERRMSG04\n         LA    R9,E04A                 Make it to come back here\n         B     WTO\nE04A     DS    0H\n         LA    R1,ERRMSH04             R1 -> 2nd line of message\n         LA    R9,RETURN8\n         B     WTO\n*\nERROR05  DS    0H\n         MVC   E05UID,THISUID          Copy profile name into message\n         ST    R15,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E05R15(3),CODED+5       Store numbers into message\n         ST    R0,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   E05R00(3),CODED+5       Store numbers into message\n         LA    R1,ERRMSG05\n         LA    R9,E05A                 Make it to come back here\n         B     WTO\nE05A     DS    0H\n         LA    R1,ERRMSH05             R1 -> 2nd line of message\n         LA    R9,RETURN8\n         B     WTO\n*\n*\nWTO      DS    0H\n         MVC   WTOL+4(80),0(R1)        Copy the message into WTO area\n         WTO   MF=(E,WTOL)\n         BR    R9                      Return to caller\n         TITLE 'Constants and Work Areas'\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n*                                                                     *\n*    Constants and Work Areas                                         *\n*                                                                     *\n*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\n         SPACE 2\nTHREEFF  DC    XL3'FFFFFF'             LJDATE of unused userid\nTRACE    DC    CL1'N'                  \"Revoke trace\" flag\nBLANX    DC    CL8'        '\nBINARY   DS    F\n         DC    XL1'00'\nCODED    DS    CL8\n         DS    1C\n         SPACE 1\nTABLE    DC    C'0123456789ABCDEF'     Digit translation table\nRETCODE  DS    F'0'\nTIMEP    DS    2F                      Packed decimal format\nDATEP    DS    2F                      Packed decimal format\nTIMEZ    DS    2F                      Zoned format (for printing)\nDATEZ    DS    3F                      Zoned format (for printing)\nYEAR$P   DS    F                       Year in packed decimal\nYEAR$B   DS    F                       Year in binary\nDAY$B    DS    F                       Day in binary\nDLY      DS    F                       No. of days last year\n         SPACE 1\nPACKED   DS    D                       Packed decimal format\nPAK      PACK  PACKED(8),0(1,R4)\nPARAM    DC    F'0'                    Parameter value (binary)\n         SPACE 1\nEDMASK   DC    XL6'21204B202020'       Format for a julian date\n         SPACE 2\n*------------------------------------------------------*\n*    Register Save Area                                *\n*------------------------------------------------------*\nSAVE     DC    18F'0'\n         SPACE 2\n*------------------------------------------------------*\n*    Executed Instructions                             *\n*------------------------------------------------------*\nMVCI     MVC   INSTDATA(1),0(R8)\n         SPACE 2\n*------------------------------------------------------*\n*    Data Control Blocks (DCBs) and record areas       *\n*------------------------------------------------------*\nUIDS     DCB   DDNAME=UIDS,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=48\nGRPS     DCB   DDNAME=GRPS,DSORG=PS,MACRF=PM,RECFM=VB,LRECL=270\n*\n         DS    0F\nUHREC1   DS    0CL48                   Heading record 1 for UIDS file\n         DC    CL24'  List of all userids   '\nUHDA     DS    CL2                     Date (day)\n         DC    CL1'/'\nUHMO     DS    CL2                     Date (month)\n         DC    CL1'/'\nUHYEAR   DS    CL4                     Date (year)\n         DC    CL3' '\nUHHH     DS    CL2                     Time (hours)\n         DC    CL1':'\nUHMM     DS    CL2                     Time (minutes)\n         DC    CL1':'\nUHSS     DS    CL2                     Time (seconds)\n         DC    CL3' '\n*\n         DS    0F\nUHREC2   DC    CL48' '                 Heading record 2 for UIDS file\n*\n         DS    0F\nUHREC3   DS    0CL48                   Heading record 3 for UIDS file\n         DC    CL8' Userid '\n         DC    CL1' '\n         DC    CL20'  Name              '\n         DC    CL3'   '\n         DC    CL8' Owner  '\n         DC    CL8' Created'\n*\n         DS    0F\nUHREC4   DS    0CL48                   Heading record 4 for UIDS file\n         DC    CL8' ====== '\n         DC    CL1' '\n         DC    CL20'  ====              '\n         DC    CL3'   '\n         DC    CL8' =====  '\n         DC    CL8' ======='\n*\n         DS    0F\nUIDSREC  DS    0CL48                   Record area for UIDS file\nUSERID   DS    CL8                     Userid\n         DC    CL1' '\nNAME     DS    CL20                    User's name\n         DC    CL3'   '\nOWNER    DS    CL8                     Owner id\n         DC    CL2'  '\nCRE8YY   DS    CL2                     Creation year\n         DC    CL1'.'\nCRE8DDD  DS    CL3                     Creation day\n*\n         DS    0F\nGHREC    DS    0CL49                   Heading record for GRPS file\n         DC    AL2(49)                 Record length (halfword)\n         DC    AL2(0)\n         DC    CL24'  List of all groups    '\nGHDA     DS    CL2                     Date (day)\n         DC    CL1'/'\nGHMO     DS    CL2                     Date (month)\n         DC    CL1'/'\nGHYEAR   DS    CL4                     Date (year)\n         DC    CL3' '\nGHHH     DS    CL2                     Time (hours)\n         DC    CL1':'\nGHMM     DS    CL2                     Time (minutes)\n         DC    CL1':'\nGHSS     DS    CL2                     Time (seconds)\n*\n         DS    0F\nGRPSREC  DS    0CL270                  Record area for GRPS file\nRECL     DS    AL2                     Record length (halfword)\n         DC    AL2(0)                  Must be zero\nGRPID    DS    CL8                     Group name\n         DC    CL3'   '\nINSTDATA DS    CL255                   Installation-defined data\n*\n         SPACE 2\n*----------------------------------------------------------------*\n*    Informational Messages and Error Messages issued via WTO    *\n*----------------------------------------------------------------*\nIMSG10   DC    CL17'RA#09910I Userid '\nI10UID   DC    CL8'        ',CL17' unused; created '\nI10CRE8  DC    CL38'00.000 -  was already revoked.'\n*\nIMSG11   DC    CL17'RA#09911I Userid '\nI11UID   DC    CL8'        ',CL17' unused; created '\nI11CRE8  DC    CL38'00.000 -  now revoked.'\n*\nIMSG12   DC    CL17'RA#09912I Userid '\nI12UID   DC    CL8'        ',CL17' unused; created '\nI12CRE8  DC    CL38'00.000 -  not revoked - trace option.'\n*\nERRMSG00 DC    CL80'RA#09900E Parameter is longer than 3 characters.   @\n               Program terminated.'\n*\nERRMSG01 DC    CL80'RA#09901E DDname UIDS not allocated.   Program term@\n               inated.'\n*\nERRMSG02 DC    CL80'RA#09902E DDname GRPS not allocated.   Program term@\n               inated.'\n*\nERRMSG03 DC    CL49'RA#09903E ICHEINTY NEXTC failed for USER profile '\nE03UID   DC    CL8' ',CL7'.  R15='\nE03R15   DC    CL9'000.  R0='\nE03R00   DC    CL7'000.'\nERRMSH03 DC    CL80'RA#09903E Contact System Programmer.'\n*\nERRMSG04 DC    CL50'RA#09904E ICHEINTY NEXTC failed for GROUP profile '\nE04GRP   DC    CL8' ',CL7'.  R15='\nE04R15   DC    CL9'000.  R0='\nE04R00   DC    CL6'000.'\nERRMSH04 DC    CL80'RA#09904E Contact System Programmer.'\n*\nERRMSG05 DC    CL49'RA#09905E ICHEINTY ALTER failed for USER profile '\nE05UID   DC    CL8' ',CL7'.  R15='\nE05R15   DC    CL9'000.  R0='\nE05R00   DC    CL7'000.'\nERRMSH05 DC    CL80'RA#09905E Contact System Programmer.'\n         SPACE 2\n*------------------------------------------------------*\n*    Error Messages issued via PUT to SYSPRINT file    *\n*------------------------------------------------------*\n*\nWTOL     WTO   '                                                       @\n                                        ',ROUTCDE=(11),MF=L\n         TITLE 'RACF Macros etc.'\n*------------------------------------------------------*\n*    RACF Macros and related pointers                  *\n*------------------------------------------------------*\nINTYU    ICHEINTY NEXTC,TYPE='USR',RELEASE=1.8,DATAMAP=NEW,            @\n               ACTIONS=(ACTNU1,ACTNU2,ACTNU3,ACTNU4,ACTNU5,ACTNU6),    @\n               MF=L\n*\nINTYA    ICHEINTY ALTER,ENTRY=IUID,TYPE='USR',RELEASE=1.8,DATAMAP=NEW, @\n               ACTIONS=(ACTNA1),                                       @\n               MF=L\n*\nIUID     DC    AL1(8)                  Length of ICHEINTY user id (8)\nTHISUID  DC    CL44' '                 Name of last profile retrieved\n*\nINTYG    ICHEINTY NEXTC,TYPE='GRP',RELEASE=1.8,DATAMAP=NEW,            @\n               ACTIONS=(ACTNG1),                                       @\n               MF=L\n*\nIGRP     DC    AL1(8)                  Length of ICHEINTY grp name (8)\nTHISGRP  DC    CL44' '                 Name of last profile retrieved\n*\nACTNU1   ICHEACTN FIELD=PGMRNAME,RELEASE=1.8  User name\nACTNU2   ICHEACTN FIELD=AUTHOR,RELEASE=1.8    Owner\nACTNU3   ICHEACTN FIELD=AUTHDATE,RELEASE=1.8  Creation date\nACTNU4   ICHEACTN FIELD=LJTIME,RELEASE=1.8    Last access time\nACTNU5   ICHEACTN FIELD=LJDATE,RELEASE=1.8    Last access date\nACTNU6   ICHEACTN FIELD=FLAG4,RELEASE=1.8     Revoke flag\n*\nACTNA1   ICHEACTN FIELD=FLAG4,FLDATA=(1,NEWFLAG4),RELEASE=1.8\nNEWFLAG4 DC    XL1'80'                        Revoke flag\n*\nACTNG1   ICHEACTN FIELD=INSTDATA,RELEASE=1.8  Installation-defined data\n*\n         SPACE 2\n*------------------------------------------------------*\n*    Work area used by ICHEINTY to return              *\n*    fields from USER profiles.                        *\n*------------------------------------------------------*\nIWKAU    DS    0F\n         DS    AL4                     Length of entire user area\n         DS    XL6                     RBA return area\n         DS    XL1                     Flags\n         DS    XL1                     Reserved\n         DS    XL4                     Duplicate data set name count\n         DS    XL8                     Reserved\nDATALU   DS    XL4                     Length of data returned here\n*\n         DS    XL4                     Length of PGMRNAME (returned)\nPGMRNU   DS    CL20                    PGMRNAME (returned)\n         DS    XL4                     Length of AUTHOR (returned)\nAUTHU    DS    CL8                     AUTHOR (returned)\n         DS    XL4                     Length of AUTHDATE (returned)\nAUTHDATE DS    CL3                     AUTHDATE (returned)\n         DS    XL4                     Length of LJTIME (returned)\nLJTIME   DS    CL4                     LJTIME (returned)\n         DS    XL4                     Length of LJDATE (returned)\nLJDATE   DS    CL3                     LJDATE (returned)\n         DS    XL4                     Length of FLAG4 (returned)\nFLAG4    DS    XL1                     FLAG4 (returned)\nIWKAUL   EQU   *-IWKAU\n         SPACE 2\n*------------------------------------------------------*\n*    Work area used by ICHEINTY to return              *\n*    fields from GROUP profiles.                       *\n*------------------------------------------------------*\nIWKAG    DS    0F\n         DS    AL4                     Length of entire user area\n         DS    XL6                     RBA return area\n         DS    XL1                     Flags\n         DS    XL1                     Reserved\n         DS    XL4                     Duplicate data set name count\n         DS    XL8                     Reserved\nDATALG   DS    XL4                     Length of data returned here\n*\nINSDGL   DS    XL4                     Length of INSTDATA (returned)\nINSDG    DS    CL255                   INSTDATA (returned)\nIWKAGL   EQU   *-IWKAG\n         SPACE 2\n*------------------------------------------------------*\n*    DCB DSECT                                         *\n*------------------------------------------------------*\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n*------------------------------------------------------*\n*    Register Equates                                  *\n*------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END\n@@\n//SYSLIB   DD   DSN=SYS1.RACF.MODGEN,DISP=SHR      <-- your RACF maclib\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   SPACE=(CYL,(2,1)),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DSN=&&OBJ(RA#NAMES),\n//           UNIT=SYSDA,SPACE=(CYL,(1,1,1)),DISP=(NEW,PASS),\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)\n//*\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET',COND=(4,LT,ASM)\n//SYSLMOD  DD   DSN=SYS3A.LINKLIB,DISP=SHR         <-- your APF linklib\n//SYSUT1   DD   UNIT=VIO,SPACE=(CYL,(2,1))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIB   DD   DSN=&&OBJ,DISP=(OLD,PASS)\n//SYSLIN   DD   *\n INCLUDE SYSLIB(RA#NAMES)\n SETCODE AC(1)\n ENTRY RA#NAMES\n NAME RA#NAMES(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESUME": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x996O\\x00\\x996O\\x127\\x01\\xbd\\x01\\xbd\\x00\\x00\\xe5\\xd6\\xc7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-30T00:00:00", "modifydate": "1999-12-30T12:37:00", "lines": 445, "newlines": 445, "modlines": 0, "user": "VOGT"}, "text": "//RESUME00 JOB  ACCOUNT,'Brian Vogt',\n//* ===> RESUME <===\n//            CLASS=G,MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//*\n//ASM      EXEC PGM=ASMA90,PARM='OBJ,NODECK,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.RACF.MODGEN,DISP=SHR      <-- your RACF maclib\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD   SPACE=(TRK,(2,2)),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DSN=&&OBJ(RESUME),\n//           UNIT=SYSDA,SPACE=(CYL,(1,1,1)),DISP=(NEW,PASS),\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)\n//SYSIN    DD   *,DLM=$$\n TITLE 'RESUME - Unset the \"REVOKE\" flag in a RACF USER profile'\n PRINT GEN\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n*\n* AUTHOR - Brian Vogt        e-mail:  brian.vogt@eds.com\n*\n* DATE   - November 1987.    MVS/SP 2.1.7 with RACF 1.7.0.\n*          SMF logging and updating of last access added July 1988.\n*          Tested ok on MVS 5.2.2 with RACF 2.2 and also on OS/390 2.6\n*\n* FUNCTION -\n*          Use ICHEINTY to modify the following in a RACF USER profile\n*           (1) unset FLAG4 (REVOKE attribute).\n*           (2) zero out REVOKECT (revoke count).\n*           (3) set LJTIME & LJDATE to the current time & date.\n*           (4) For the benefit of the RACF Auditor, write a type 80\n*               SMF record (pretending to be ALTUSER with the RESUME\n*               parameter).\n*\n*          The most likely practical applications are :\n*           (a) A hacker revokes all of the privileged userids in the\n*               system, by submitting many batch jobs with incorrect\n*               passwords.  (Never trust an Operator to reply correctly\n*               to message ICH302D).  This program cannot be thwarted,\n*               as it does not run under a RACF userid.\n*           (b) The userid of a production batch job becomes revoked\n*               overnight.  The MVS Operator can overcome this, with a\n*               bit of information from the on-call Security Admin.\n*\n* SETUP DOCUMENTATION -\n*          (1) This program must be invoked from a started task.\n*                //RESUME   PROC U=,PW=\n*                //RESUME   EXEC PGM=RESUME,PARM='&USER,&PW'\n*          (2) The started task name must be RESUME.\n*          (3) Do NOT put the started task name into the RACF Started\n*              Procedures Table (ICHRIN03) or create a STARTED profile\n*              for it.  The task doesn't need a userid, and is better\n*              off without one.\n*\n* USER DOCUMENTATION -\n*          (1) The function is invoked via this MVS command:\n*                S RESUME,U=userid,PW=password\n*          (2) The userid (U keyword) must be specified.\n*          (3) The password (PW keyword) must match the RVARY SWITCH\n*              password.  If there is no RVARY SWITCH password\n*              (RCVTSWPW is binary zeroes), this parameter is ignored,\n*              and may be entirely omitted from the START command.\n*          (4) The RVARY SWITCH password should be changed by the RACF\n*              Security Administrator as soon as practicable after use.\n*\n* APF -    This code needs to be APF authorized for the following\n*          functions :  RACROUTE (encrypt), ICHEINTY, SMFWTM\n*\n* AMODE -  31 because at least one system table (OUCB) resides above\n*          the 16M line in MVS/XA.\n*\n* REFERENCE PUBLICATIONS -\n*          SC28-1913 Security Server (RACF) System Programmer's Guide\n*          SC28-1914 Security Server (RACF) Macros and Interfaces\n*          GC28-1922 Security Server External Security Interface\n*                    (RACROUTE) Macro Reference\n*          SY28-1164 to 1168 MVS Data Areas\n*          GC28-1783 MVS System Management facilities\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\nRESUME   CSECT\nRESUME   AMODE 31\nRESUME   RMODE 24\n         SAVE  (14,12),,*              save registers\n         LR    R12,R15                 R12 -> RESUME csect\n         USING RESUME,R12              base addressing\n         LA    R9,SAVE                 R9 -> LSA\n         ST    R13,4(R9)               HSA in LSA\n         ST    R9,8(R13)               LSA in HSA\n         LR    R13,R9                  R13 -> LSA\n         B     START\n         DC    C'DATE &SYSDATE      TIME &SYSTIME'  an eye-catcher\n         CNOP  0,4\n*\nSTART    EQU   *\n         USING PSA,R0                  R0 -> PSA\n         L     R2,PSAAOLD              R2 -> ASCB\n         DROP  R0\n         USING ASCB,R2\n         L     R3,ASCBJBNI             R3 -> batch job name\n         LTR   R3,R3                   does it exist ?\n         BNZ   BADUSER                 yes -- nick off pal\n         L     R3,ASCBOUCB             R3 -> OUCB\n         USING OUCB,R3\n         TM    OUCBYFL,OUCBSTT         started task ?\n         BNO   BADUSER                 no -- nick off pal\n         DROP  R3\n         L     R3,ASCBJBNS             R3 -> started task job name\n         CLC   0(8,R3),=C'RESUME  '    correct task name ?\n         BNE   BADUSER                 no -- nick off pal\n         DROP  R2\n*\n*   This is a good guy.\n*   Get the parameter text string, and separate\n*   it into the 2 pieces (userid and password).\n*                                      R1 -> parameter address vector\n*                                      (Only the first word is used).\n         L     R1,0(R1)                R1 -> parameter address\n         LH    R2,0(R1)                R2 = length of parameter string\n         LA    R1,2(R1)                R1 -> parameter text string\n         LA    R3,USERID+1             R3 -> first destination for move\n         XR    R4,R4                   initialize character count\nPARMLOOP EQU   *\n         LTR   R2,R2                   any parameter characters left ?\n         BNH   CHECKPW                 no -- go check the password\n         CLI   0(R1),C','              is next character a comma ?\n         BE    COMMA                   yes -- switch move destinations\n         MVC   0(1,R3),0(R1)           copy 1 character to destination\n         BCTR  R2,0                    decrement counter by 1\n         LA    R1,1(R1)                increment source address by 1\n         LA    R3,1(R3)                increment destn. address by 1\n         LA    R4,1(R4)                increment counter by 1\n         B     PARMLOOP\n*\nCOMMA    EQU   *\n         MVC   SMFRUID(8),USERID+1     copy userid into SMF record\n         STC   R4,USERID               store length of userid\n         XR    R4,R4                   re-initialize character count\n         LA    R3,PASSWORD+1           R3 -> new destination for move\n         BCTR  R2,0                    decrement counter by 1\n         LA    R1,1(R1)                increment source address by 1\n         B     PARMLOOP\n*\n*   The parameter string has been cracked into its 2 pieces.\n*   Now check that the correct password has been specified.\n*\nCHECKPW  EQU   *\n         STC   R4,PASSWORD             store length of password\n         LTR   R4,R4                   any password specified ?\n         BZ    ENCRPTOK                no -- nothing to encrypt\n         LA    R2,PASSWORD             R2 -> string to be encrypted\n         LA    R3,PASSWORD+1           R3 -> encryption key\n*\n*   Use RACROUTE instead of RACXTRT, because we are in AMODE 31.\n         GETMAIN R,LV=512,SP=230\n         LR    R10,R1                  keep address of work area\nRACXTRT  CNOP  0,4\n         RACROUTE REQUEST=EXTRACT,WORKA=(R10),TYPE=ENCRYPT,            #\n               ENCRYPT=((2),DES),ENTITY=(3)\n         FREEMAIN R,A=(10),LV=512,SP=230\n*\n         ST    R15,CONDCODE            save condition code\n         LTR   R15,R15                 did RACROUTE fail ?\n         BZ    ENCRPTOK                no -- continue\n*                                      else issue error message\n         MVC   BINARY(4),RACXTRT+4     R15 from RACXTRT function\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   R15MSG1(3),CODED+5      store numbers into message\n         MVC   BINARY(4),RACXTRT+8     R0 from RACXTRT function\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   R00MSG1(3),CODED+5      store numbers into message\n         WTO   MF=(E,WTO1)             issue failure message\n         B     RETURN\nENCRPTOK EQU   *                       encryption worked ok.\n*                                      Now check if the passwords match\n         USING PSA,R0                  R0 -> PSA\n         L     R2,FLCCVT               R2 -> CVT\n         DROP  R0\n         USING CVT,R2\n         L     R3,CVTRAC               R3 -> RCVT\n         USING RCVT,R3\n         MVC   SMF80VER(1),RCVTVERS    copy RACF version into SMF rec\n         L     R2,CVTSMCA              R2 -> SMCA\n         USING SMCABASE,R2\n         MVC   SMF80SID,SMCASID        copy system-id into SMF record\n         DROP  R2\n*\n         CLC   RCVTSWPW,ZEROBITS       does the Switch password exist ?\n         BE    PWOK                    no -- nothing to check against\n*                                      else the correct pw is required\n         XR    R2,R2                   start with all zero bits\n         IC    R2,PASSWORD             R2 = length of supplied password\n         LTR   R2,R2                   is it zero ?\n         BZ    PWBAD                   yes -- issue message and return\n*                                      else test the supplied password\n         BCTR  R2,0                    decrement length by 1 for EX\n         EX    R2,EXCLC                is encrypted password the same\n         DROP  R3                                 as that in the RCVT ?\n         BE    PWOK                    yes -- continue\nPWBAD    EQU   *                       supplied password was correct\n         WTO   MF=(E,WTO2)             else issue error message\n         LA    R2,8\n         ST    R2,CONDCODE             set condition code to 8\n         MVI   SMF80EVQ,1              Event Qual. - insuffic. auth.\n         OI    SMFKFI3,B'10000000'     RESUME ignored\n         BAL   R5,WRITESMF\n         B     RETURN\nPWOK     EQU   *                       supplied password was correct\n         TIME  DEC\n         ST    R0,C$TIME\n         ST    R1,C$DATE\n         PRINT NOGEN\n         ICHEINTY ALTER,TYPE='USR',ENTRY=USERID,                       #\n               ACTIONS=(ACTN1,ACTN2,ACTN3,ACTN4)\n         PRINT GEN\n         ST    R15,CONDCODE            save condition code\n         LTR   R15,R15                 did ICHEINTY fail ?\n         BZ    MODSOK                  no -- continue\n*                                      else issue error message\n         ST    R15,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   R15MSG3(3),CODED+5      store numbers into message\n         ST    R0,BINARY\n         UNPK  CODED(9),BINARY(5)\n         TR    CODED(8),TABLE-X'F0'\n         MVC   R00MSG3(3),CODED+5      store numbers into message\n         WTO   MF=(E,WTO3)             issue failure message\n         B     RETURN\nMODSOK   EQU   *                       ICHEINTY worked ok.\n         BAL   R5,WRITESMF\n         WTO   MF=(E,WTO0)             issue success message\n*\nRETURN   EQU   *\n         L     R13,4(R13)              R13 -> HSA\n         L     R15,CONDCODE            set condition code\n         RETURN (14,12),RC=(15)        return\n*\n*   Write out a type 80 SMF record.  (Pretend that we are ALTUSER).\n*\nWRITESMF EQU   *\n         TIME  BIN                     get time and date\n         ST    R0,SMF80TME             store into smf record\n         ST    R1,SMF80DTE             store into smf record\n         USING PSA,R0                  R0 -> PSA\n         L     R2,PSATOLD              R2 -> TCB\n         DROP  R0\n         USING TCB,R2\n         L     R2,TCBTCT               R2 -> TCT\n         USING SMFTCT,R2\n         L     R2,TCTJMR               R2 -> JMR\n         USING JMR,R2\n         MVC   SMF80JBN(8),JMRJOB\n         MVC   SMF80RST(4),JMRENTRY\n         MVC   SMF80RSD(4),JMREDATE\n         MVC   SMF80UID(8),JMRUSEID\n         DROP  R2\n         SMFWTM SMFRCD80               write the SMF record\n         BR    R5\n*\n*\n*   The program was not called from a started task named RESUME.\n*   A TSO/E user may be trying to execute a Clist named RESUME.\n*\nBADUSER  EQU   *\n         ABEND X'806',,,SYSTEM\n         EJECT\n*---------------------------------------------------------------*\n*        Constants and Workarea                                 *\n*---------------------------------------------------------------*\n         SPACE 3\nSAVE     DC    18F'0'\n*\nCONDCODE DC    F'0'                    condition code for termination\n*\nZEROBITS DC    XL8'00'\n*\nC$TIME   DS    F                       current time\nC$DATE   DS    F                       current date\n*\nUSERID   DC    XL1'00',CL44' '\nPASSWORD DC    XL1'00',CL60' '\n*\n         USING RCVT,R3\nEXCLC    CLC   RCVTSWPW(1),PASSWORD+1  executed instruction\n         DROP  R3\n*\n         PRINT NOGEN\nWTO0     WTO   'EDS09750I RESUME function completed ok.',              #\n               ROUTCDE=(9,11),MF=L\n*\nWTO1     WTO   'EDS09751E RESUME - Error in RACXTRT.   R15=000, R0=000.#\n                 Task failed.',ROUTCDE=(9,11),MF=L\nR15MSG1  EQU   WTO1+47\nR00MSG1  EQU   WTO1+55\n*\nWTO2     WTO   'EDS09752E RESUME - Incorrect password specified.  Permi#\n               ssion denied.',ROUTCDE=(9,11),MF=L\n*\nWTO3     WTO   'EDS09753E RESUME - Error in ICHEINTY.  R15=000, R0=000.#\n                 Task failed.',ROUTCDE=(9,11),MF=L\nR15MSG3  EQU   WTO3+47\nR00MSG3  EQU   WTO3+55\n         PRINT GEN\n*\nBINARY   DS    F\n         DC    XL1'00'\nCODED    DS    CL8\n         DS    1C\n         SPACE 1\nTABLE    DC    C'0123456789ABCDEF'     digit encoding table\n*\n*\n*  SMF RECORD FORMAT\n*\n*    STANDARD SMF RECORD HEADER\nSMFRCD80 DS    0F\nSMF80LEN DC    AL2(SMFRLEN)            record length\nSMF80SEG DC    H'0'                    record not spanned\nSMF80FLG DC    AL1(0)                  system indicator (added by SMF)\nSMF80RTY DC    AL1(80)                 record type 80\nSMF80TME DS    CL4                     time\nSMF80DTE DS    CL4                     date\nSMF80SID DS    CL4                     system identification\n*    USER-DEFINED SECTION\nSMF80DES DC    BL2'00100000'           descriptor flags\nSMF80EVT DC    AL1(13)                 event code 13 (ALTUSER)\nSMF80EVQ DC    AL1(0)                  event code qualifier\nSMF80USR DC    CL8'RESUME'             userid (jobname)\nSMF80GRP DC    CL8'RESUME'             group (stepname)\nSMF80REL DC    AL2(OFFSET)             offset to first relocate section\nSMF80CNT DC    AL2(2)                  number of relocate sections\nSMF80ATH DC    BL1'01110000'           authorities used\nSMF80REA DC    BL1'01110100'           reason for logging\nSMF80TLV DC    AL1(0)                  terminal level number\nSMF80ERR DC    XL1'0'                  command processing error flag\nSMF80TRM DC    CL8'CONSOLE'            terminal id\nSMF80JBN DC    CL8'RESUME'             job name\nSMF80RST DC    AL4(0)                  reader time of job\nSMF80RSD DC    AL4(0)                  reader date of job\nSMF80UID DC    CL8'RESUME'             user identification\nSMF80VER DC    AL1(0)                  RACF version number\nSMFRELOC EQU   *                       relocate section\nSMF80DTP DC    AL1(6)                  data type\nSMF80DLN DC    AL1(DATALEN1)           length of data\nSMF80DTA EQU   *\nSMFKF0   DC    BL1'00000000'           keyword flag byte 0\nSMFKF1   DC    BL1'00000000'           keyword flag byte 1\nSMFKF2   DC    BL1'00000000'           keyword flag byte 2\nSMFKF3   DC    BL1'10000000'           keyword flag byte 3\nSMFKFI0  DC    BL1'00000000'           keyword ignored flag byte 0\nSMFKFI1  DC    BL1'00000000'           keyword ignored flag byte 1\nSMFKFI2  DC    BL1'00000000'           keyword ignored flag byte 2\nSMFKFI3  DC    BL1'00000000'           keyword ignored flag byte 3\n         DC    AL4(0)                  more keyword ignored flags\n         DC    XL1'0'                  other violation flags\nSMFRUID  DC    CL8'        '           userid\n         DC    XL8'0000000000000000'   DFLTGRP keyword\n         DC    XL8'0000000000000000'   GROUP keyword\n         DC    BL1'00000000'           flags for AUTHORITY keyword\n         DC    BL1'00000000'           flags for UACC keyword\n         DC    XL8'0000000000000000'   OWNER keyword\n         DC    XL2'0000'               flags for CLAUTH keyword\n         DC    XL2'0000'               flags for CLAUTHs ignored\n         DC    XL2'0000'               flags for additional keywords\n         DC    XL2'0000'               flags for additional keywords\n         DC    XL2'0000'               flags for CLAUTHs ignored\n         DC    XL3'000000'             Logon time\n         DC    XL3'000000'             Logoff time\n         DC    BL1'00000001'           Logon day\n         DC    XL4'00000000'           REVOKE date\n         DC    XL4'00000000'           RESUME date\n         DC    XL44'00'                SECLEVEL name specified\nDATALEN1 EQU   *-SMF80DTA\nTMF80DTP DC    AL1(38)                 data type\nTMF80DLN DC    AL1(DATALEN2)           length of data\nTMF80DTA EQU   *\n         DC    CL8'        '           profile owner\nDATALEN2 EQU   *-TMF80DTA\nOFFSET   EQU   SMFRELOC-SMFRCD80-4\nSMFRLEN  EQU   *-SMFRCD80\n*\n         PRINT NOGEN\nACTN1    ICHEACTN FIELD=FLAG4,FLDATA=(1,NEWFLAG4)\nACTN2    ICHEACTN FIELD=REVOKECT,FLDATA=(1,NEWREVCT)\nACTN3    ICHEACTN FIELD=LJTIME,FLDATA=(4,C$TIME)\nACTN4    ICHEACTN FIELD=LJDATE,FLDATA=(3,C$DATE+1)\n         PRINT GEN\n*\nNEWFLAG4 DC    AL1(0)                  new revoke flag\nNEWREVCT DC    AL1(0)                  new revoke count\n*\n*\n*-----------------------------------------------------------------*\n*                WORKAREA DSECT                                   *\n*-----------------------------------------------------------------*\n         PRINT NOGEN\n         IHAPSA\n         IHAASCB\n         IRAOUCB\n         CVT   DSECT=YES\n         ICHPRCVT\n         IEESMCA\n         IKJTCB\n         IEFTCT\n         IEFJMR\n*        IFASMFR9 80       Can't use it.\n*                          This program contains pre-made data\n         PRINT GEN\n*\n*\n*-----------------------------------------------------------------*\n*                REGISTER EQUATES                                 *\n*-----------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END RESUME\n$$\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET',COND=(4,LT,ASM)\n//SYSLMOD  DD   DSN=SYS3A.LINKLIB,DISP=SHR         <-- your APF linklib\n//SYSUT1   DD   SPACE=(TRK,(2,2)),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSLIB   DD   DSN=&&OBJ,DISP=SHR\n//SYSLIN   DD   *\n INCLUDE SYSLIB(RESUME)\n SETCODE AC(1)\n NAME RESUME(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESUME$": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x996O\\x01\\x00$?\\x18\\x17\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-12-30T00:00:00", "modifydate": "2000-08-30T18:17:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "WSBG"}, "text": "Subj:   Submission for \"CBT Tape\"\nDate:   12/30/1999 3:11:12 PM !!!First Boot!!!\nFrom:   brian.vogt@eds.com (Vogt, Brian A)\nTo:     sbgolob@aol.com ('Sam Golob <sbgolob@aol.com>'),\n        sbgolob@attglobal.net ('Sam Golob <sbgolob@attglobal.net>')\n\nFile:  resume.dat (36960 bytes)\nDL Time (TCP/IP): < 1 minute\n\nSomeone on the RACF-L discussion list has persuaded me to submit\nthis program.  Its name is RESUME, and it performs the same function\nin a RACF system as the ALTUSER command with the RESUME parameter -\nbut it runs as a started task.  This would be useful when all of the\nSPECIAL users have been revoked.\n\nFull documentation is in the preliminary comments in the source code.\nThe attached file is a binary download of an XMIT file, as you request.\n\n <<resume.dat>>\n\nBrian Vogt.   EDS.   (currently in Deutschland).\n\nPS\nI would like to have supplied a postal address and phone number, but\nI'll be returning to Australia around April, and they haven't yet\ncreated a vacancy for me.  The e-mail address will remain the same.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT441/FILE441.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT441", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}