{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011632000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 823004, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE274.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE274.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0e\\x08'", "DS1TRBAL": "b'a\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xec\\x00\\x06\\x01\\xed\\x00\\x05\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"##V4R1M1": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00.\\x00.\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "DOCUMNT"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#CPYRITE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00,\\x00,\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "DOCUMNT"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#DISTRIB": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00F\\x00F\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "DOCUMNT"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#FEATURE": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00P\\x00P\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "DOCUMNT"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#INSTALL": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\xfb\\x00\\xfb\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 251, "newlines": 251, "modlines": 0, "user": "DOCUMNT"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#USERGDE": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00A\\x00A\\x00\\x00\\xc4\\xd6\\xc3\\xe4\\xd4\\xd5\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "DOCUMNT"}, "text": "\u00bb\n\u008d                         MVS Dynamic PROCLIB                  #USERGDE\n\u008d                            Version 4.1.1\n\u008d                            November, 1991\n\u008d                             User's Guide\n\u008f\n\u008dThe MVS Dynamic PROCLIB Facility provides a User of MVS to specify the\n\u008dlibraries  that are to be search for JCL Procedures without them being\n\u008dknown in advance to the Job Entry SubSystem.\n\n\u008dDynamic PROCLIBs are specified by the User as part of his or her Job's\n\u008dJCL via the use of one  or  more  JOBPROC  DD  Statements,  much  like\n\u008dJOBLIBs  and JOBCATs are specified.  The JOBPROC DD Statements and any\n\u008dconcatenations (following standard JCL rules for  concatenation)  must\n\u008dbe  specified  before  the  first EXEC Statement.   The JOBPROC DDname\n\u008dbecomes a restricted DDname which can only be used  for  this  purpose\n\u008dand  any other use of a DDname of JOBPROC within a Job will be consid-\n\u008dered a JCL Error.\n\n\u008dThe JOBPROC DD Statements must specify, as a  minimum,  the  Data  Set\n\u008dName  of the JCL Procedure Library.  The JCL Procedure Library must be\n\u008da Fixed Blocked Partitioned Data  Set  (PDS)  with  a  Logical  Record\n\u008dLength  (LRECL)  of 80.   The JOBPROC specified Data Set must be cata-\n\u008dlogued in a System Catalog (Master or User) using a defined high level\n\u008dindex (alias).  JOBPROC specified Data Sets CANNOT be  located  via  a\n\u008dJOBCAT specification.  No other JCL Parameters are necessary.\n\n\u008dThe  only  other  JCL  Parameters  on the JOBPROC DD Statement that is\n\u008dexamined is the SYSPROC Parameter.   The SYSPROC  Parameter  has  been\n\u008dadded  to JCL specifically for use on the JOBPROC DD Statement.  It is\n\u008dvalid ONLY on the initial JOBPROC DD Statement  (not  on  any  concat-\n\u008denation)   and   specifies   either   SYSPROC=YES,  SYSPROC=FIRST,  or\n\u008dSYSPROC=NO.    The  default  depends  on   an   installation   option.\n\u008dSYSPROC=YES  means that the System default Procedure Libraries will be\n\u008dautomatically  concatenated  AFTER  the  JOBPROC  specified  Procedure\n\u008dLibraries.    SYSPROC=FIRST  means  that  the System default Procedure\n\u008dLibraries will be automatically concatenated BEFORE the JOBPROC speci-\n\u008dfied Procedure Libraries.  SYSPROC=NO means that  the  System  default\n\u008dProcedure  Libraries will NOT be concatenated after the JOBPROC speci-\n\u008dfied Procedure Libraries and that only the  User  specified  Libraries\n\u008dwill be searched for any required procedures.\n\n\u008dThe  maximum  number  of  Procedure Libraries that can be specified in\n\u008dJOBPROC DD Statements is 16.  This number is reduced  by  the  use  of\n\u008dSYSPROC=YES  or  SYSPROC=FIRST.    If  SYSPROC=YES or SYSPROC=FIRST is\n\u008dspecified (or defaulted),  the  number  of  User  specified  Procedure\n\u008dLibraries  is  decreased  by  the  number  of System default Procedure\n\u008dLibraries.\n\n\u008dUser specified JOBPROC Data Sets must reside on mounted Direct  Access\n\u008dVolumes.    If the specified Data Set does not exist on Direct Access,\n\u008dexists on a Volume that is not mounted, or is not a  Partitioned  Data\n\u008dSet,  the  Job will be failed with a JCL Error.  There is no provision\n\u008dto allow the Operator to mount the Volume before JCL Conversion.\n\n\u008dThe installation also has the ability to restrict which Data Sets  can\n\u00bb\n\u008d                         MVS Dynamic PROCLIB                  #USERGDE\n\u008d                            Version 4.1.1\n\u008d                            November, 1991\n\u008d                             User's Guide\n\u008f\n\u008dor  cannot  be used as a Dynamic PROCLIB Data Set.  Specification of a\n\u008dData Set that is ineligible for Dynamic PROCLIB usage will result in a\n\u008dJCL Error.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#YSP411": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x006\\x006\\x00\\x00\\xd4\\xd6\\xc4\\xc9\\xd5\\xe3\\xd9@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "MODINTR"}, "text": "++ USERMOD (#YSP411)  REWORK (9110270) .\n++ VER   (Z038)  FMID (HBB4420)\n                 PRE (UY68832)\n                                                                  /*\n         DYNAMIC PROCLIB TOLERATION MODIFICATION\n\n         THE DYNAMIC PROCLIB MODIFICATION IS NOT NEEDED IN\n         MVS/SP VERSION 4.  HOWEVER, A SINCE A JOB CONTAINING\n         A \"JOBPROC\" DD STATEMENT CAN BE CONVERTED ON A\n         PRE-MVS/SP VERSION 4 SYSTEM AND SELECTED FOR EXECUTION\n         ON AN MVS/SP VERSION 4 SYSTEM (VIA SHARED SPOOL),\n         THE INTERPRETER MUST STILL HAVE LOGIC TO DELETE THE\n         JOBPROC DD STATEMENT.\n\n         ONCE ALL SYSTEMS ARE TOTALLY CONVERTED TO MVS/SP VERSION 4\n         AND THE JCLLIB STATEMENT IS IN USE, THIS MODIFICATION\n         CAN BE REMOVED.\n\n         IEFVDA IS THE INTERPRETER DD STATEMENT PROCESSOR.  THE\n         ZAP CHANGES IEFVDA TO CHECK FOR A \"DD DYNAM\" BEFORE\n         THE FIRST EXEC STATEMENT AND CAUSE IT TO BE BYPASSED.\n         IEFVPP FLAGS JOBPROC DD STATEMENTS AS IF THEY WERE DD\n         DYNAM STATEMENTS.  IF THIS IS NOT DONE, ANY JOB WITH A\n         JOBPROC DD STATEMENT WILL RECEIVE A \"MISPLACED DD\n         STATEMENT\" JCL ERROR.\n\n                                                                  */ .\n++ ZAP   (IEFVDA)  DISTLIB (AOSB3) .\n         NAME  IEFVDA\n*\n         VER   0000 05B0                   BALR R11,0 (BASE=0002)\n*                                               R7    (BASE=1002)\n*                                               R6    (BASE=2002)\n*\n         VER   0692 9120,C22A              TM   SWD,FEXRCV\n         VER   0696 4710,B736              BO   DDP02\n*\n         VER   06A4 D506,3000,BA0E         CLC  0(DD7,R3),DDP20 SYSCHK\n         VER   06AA 4780,6150              BE   CLEAN156\n*\n         VER   2152 9180,A1F8    CLEAN156  TM   JFCUCSOP,JFCBEXTP\n*\n         VER   2700 0000,0000              START OF NEEDED PATCH AREA\n         VER   270E 0000,0000              END OF NEEDED PATCH AREA\n*\n         REP   0696 45E0,66FE              BAL  R14,PATCH\n*\n         REP   2700 4710,B736              BO   DDP02 (OVERLAID INST)\n         REP   2704 5810,C02C              L    R1,TEXTBUFP\n         REP   2708 9108,1003              TM   STRDINDC,DTXDYNAM\n         REP   270C 078E                   BZR  R14\n         REP   270E 47F0,6150              B    CLEAN156\n*\n         IDRDATA #YSP411\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#YTEMP1": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x1e\\x00\\x1e\\x00\\x00\\xd4\\xd6\\xc4\\xe3\\xc5\\xd4\\xd7@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "MODTEMP"}, "text": "++ USERMOD (#YTEMP1)  REWORK (9110270) .\n++ VER   (Z038)  FMID (HBB4420)\n                                                                 /*\n         THIS LOCAL MOD IS STRICTLY TEMPORARY AND IS SIMPLY\n         APPLIED AND RESTORED IN ORDER TO CHANGES THE NECESSARY\n         EXTERNAL REFERENCES IN THE CONVERTER FOR DYNAMIC PROCLIB.\n\n         THIS MODIFICATION IS NOT INTENDED TO BE PERMANENTLY\n         INSTALLED.  INSTEAD, IT SHOULD BE RECEIVED, APPLIED,\n         AND RESTORED AFTER APPLYING THE DYNAMIC PROCLIB MODIFICATION.\n         THIS WILL CAUSE THE LINKAGE EDITOR TO PROPERLY INSERT\n         THE NECESSARY CHANGE STATEMENTS IN THE CONVERTER TO ALLOW\n         THE DYNAMIC PROCLIB INTERCEPTS TO RECEIVE CONTROL.\n\n                                                                 */ .\n++ ZAP   (IEFCNJRT) DISTLIB (AOSB3) .\n         NAME  IEFCNJRT\n         VER   0000 47F0\n         REP   0000 47F0\n         IDRDATA #YTEMP1\n++ ZAP   (IEFCNEXP) DISTLIB (AOSB3) .\n         NAME  IEFCNEXP\n         VER   0000 47F0\n         REP   0000 47F0\n         IDRDATA #YTEMP1\n++ ZAP   (IEFCNINC) DISTLIB (AOSB3) .\n         NAME  IEFCNINC\n         VER   0000 47F0\n         REP   0000 47F0\n         IDRDATA #YTEMP1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#YVP001": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd4\\xd6\\xc4\\xe2\\xc1\\xd4\\xd7@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "MODSAMP"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#YVP002": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x13\\x00\\x13\\x00\\x00\\xd4\\xd6\\xc4\\xe2\\xc1\\xd4\\xd7@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "MODSAMP"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IEFCNDSN": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00,\\x00,\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEFCNDSN &LIST\n.*\n         LCLA  &NLIST,&CNT,&OFFSET\n.*\n&NLIST   SETA  N'&SYSLIST\n.*\n         AIF   (&NLIST EQ 0).ERROR1\n         AIF   (&NLIST EQ 1).EXIT\n         AIF   (K'&SYSLIST(2) EQ 0).EXIT\n.*\n&OFFSET  SETA  0\n         AIF   ('&SYSLIST(1)' EQ 'JOBEXCL').SETOFF\n&OFFSET  SETA  2\n         AIF   ('&SYSLIST(1)' EQ 'JOBINCL').SETOFF\n.*\n&OFFSET  SETA  4\n         AIF   ('&SYSLIST(1)' EQ 'TSUEXCL').SETOFF\n&OFFSET  SETA  6\n         AIF   ('&SYSLIST(1)' EQ 'TSUINCL').SETOFF\n.*\n&OFFSET  SETA  8\n         AIF   ('&SYSLIST(1)' EQ 'STCEXCL').SETOFF\n&OFFSET  SETA  10\n         AIF   ('&SYSLIST(1)' EQ 'STCINCL').SETOFF\n.*\n.ERROR1  MNOTE 12,'INVALID INCLUDE/EXCLUDE LIST TYPE'\n         MEXIT\n.*\n.SETOFF  ORG   &SYSECT.+&OFFSET\n         DC    Y(&NAME-&SYSECT)    OFFSET TO DATA SET LIST\n         ORG   ,\n*\n&NAME    DC    0F'0'               START OF DATA SET LIST\n&CNT     SETA  2\n.DSNLOOP AIF   (K'&SYSLIST(&CNT) EQ 0).DONE\n         DC    CL44'&SYSLIST(&CNT)'\n&CNT     SETA  &CNT+1\n         AIF   (&CNT LE &NLIST).DSNLOOP\n.*\n.DONE    DC    C' '                END OF DATA SET LIST\n.*\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNFSA": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\"\\x00\"\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEFCNFSA\n         TITLE 'CONVERTER SUBTASK FIRST SAVE AREA MAPPING'\n***********************************************************************\n*                                                                     *\n*        THIS IS A MAPPING OF THE FIRST SAVE AREA OF THE              *\n*        CONVERTER SUBTASK (POINTED TO BY TCBFSA).                    *\n*                                                                     *\n***********************************************************************\n*\nFSADSECT DSECT\nFSAWORD1 DS    F                   FIRST WORD OF SAVE AREA\nFSABACKP DS    A                   BACKWARD SAVE AREA POINTER\nFSAFORWP DS    A                   FORWARD SAVE AREA POINTER\nFSAREG14 DS    A                   SAVE AREA FOR REGISTER 14\nFSAREG15 DS    A                   SAVE AREA FOR REGISTER 15\nFSAREG0  DS    A                   SAVE AREA FOR REGISTER 0\nFSAREG1  DS    A                   SAVE AREA FOR REGISTER 1\nFSAREG2  DS    0A                  SAVE AREA FOR REGISTER 2\nFSAPPEYE DS    CL4                 DYNAMIC PROCLIB EYECATCHER\nFSAPPEID EQU   C'JPRC'             DYNAMIC PROCLIB EYECATCHER VALUE\nFSAREG3  DS    0A                  SAVE AREA FOR REGISTER 3\nFSAPPWAD DS    A                   ADDRESS OF DYNAMIC PROCLIB WORK AREA\nFSAREG4  DS    A                   SAVE AREA FOR REGISTER 4\nFSAREG5  DS    A                   SAVE AREA FOR REGISTER 5\nFSAREG6  DS    A                   SAVE AREA FOR REGISTER 6\nFSAREG7  DS    A                   SAVE AREA FOR REGISTER 7\nFSAREG8  DS    A                   SAVE AREA FOR REGISTER 8\nFSAREG9  DS    A                   SAVE AREA FOR REGISTER 9\nFSAREG10 DS    A                   SAVE AREA FOR REGISTER 10\nFSAREG11 DS    A                   SAVE AREA FOR REGISTER 11\nFSAREG12 DS    A                   SAVE AREA FOR REGISTER 12\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNMSG": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x88\\x00\\x88\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 136, "newlines": 136, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEFCNMSG &MN,&TEXT,&TEXT2,                                    X\n               &OFFSET=,&VARDATA=NO,                                   X\n               &DSECT=NO,&ERR=YES,&WTO=NO,&TRACE=NO\n.*\n         LCLA  &LTH1,&LTH2,&VARO\n         LCLC  &STR1,&STR2,&FLAG1,&FLAG2\n.*\n         AIF   ('&DSECT' EQ 'NO').GENIT\n.*\n         TITLE 'IEFCNVPP - MESSAGE TABLE MAPPING DSECT'\nMSGDSECT DSECT\nMSGNEXT  DS    Y                   OFFSET OF NEXT MESSAGE TABLE ENTRY\nMSGMSGNO DS    H                   MESSAGE NUMBER\nMSGMSGLN DS    H                   MESSAGE TEXT LENGTH\nMSGVAROF DS    H                   OFFSET TO VARIABLE DATA\n*\nMSGFLAG1 DS    X                   MESSAGE FLAGS\nMSG1ERR  EQU   X'80'               MESSAGE INDICATES JOB FAILURE\nMSG1WTO  EQU   X'40'               MESSAGE IS A WTO ONLY MESSAGE\nMSG1TRCE EQU   X'20'               MESSAGE IS A TRACING MESSAGE ONLY\nMSG1VAR  EQU   X'10'               MESSAGE CONTAINS VARIABLE DATA\nMSG1INLN EQU   X'08'               VARIABLE DATA IS INLINE\n*\nMSGFLAG2 DS    X                   MORE MESSAGE FLAGS\nMSG2JBPR EQU   X'80'               VARIABLE DATA IS JOBPROC DDNAME\nMSG2SYSP EQU   X'40'               VARIABLE DATA IS SYSPROC KEYWORD\nMSG2DSN  EQU   X'20'               VARIABLE DATA IS DATA SET NAME\nMSG2SWAK EQU   X'10'               VARIABLE DATA IS SWA KEYWORD\n*\nMSGPREFL EQU   *-MSGDSECT          MESSAGE TABLE PREFIX\n*\nMSGMSGTX DS    0C                  START OF MESSAGE TEXT\n*\n         MEXIT\n.*\n.GENIT   ANOP\n&LTH1    SETA  0\n&STR1    SETC  ''\n&LTH2    SETA  0\n&STR2    SETC  ''\n&VARO    SETA  0\n.*\n&FLAG1   SETC  '0'\n&FLAG2   SETC  '0'\n.*\n         AIF   (T'&TEXT EQ 'O' AND T'&TEXT2 EQ 'O').VGMER01\n         AIF   (T'&MN EQ 'O').VGMER02\n.*\n         AIF   (T'&TEXT EQ 'O').NOTEXT1\n&LTH1    SETA  K'&TEXT-2           GET LENGTH OF MESSAGE TEXT\n&STR1    SETC  '&TEXT'(2,&LTH1)    EXTRACT MESSAGE TEXT\n.NOTEXT1 ANOP\n.*\n         AIF   (T'&TEXT2 EQ 'O').NOTEXT2\n&LTH2    SETA  K'&TEXT2-2          GET LENGTH OF MESSAGE TEXT\n&STR2    SETC  '&TEXT2'(2,&LTH2)   EXTRACT MESSAGE TEXT\n.NOTEXT2 ANOP\n.*\n         AIF   ('&OFFSET' EQ '').SETOFF\n&VARO    SETA  &OFFSET\n         AGO   .NOOFF\n.*\n.SETOFF  AIF   ('&VARDATA' EQ 'NO').NOOFF\n&VARO    SETA  &LTH1\n.*\n.NOOFF   ANOP\n&LTH1    SETA  &LTH1+&LTH2\n.*\n         AIF   ('&ERR' NE 'YES').NOERR\n&FLAG1   SETC  '&FLAG1.+MSG1ERR'\n.NOERR   ANOP\n.*\n         AIF   ('&WTO' NE 'YES').NOWTO\n&FLAG1   SETC  '&FLAG1.+MSG1WTO'\n.NOWTO   ANOP\n.*\n         AIF   ('&TRACE' NE 'YES').NOTRCE\n&FLAG1   SETC  '&FLAG1.+MSG1TRCE'\n.NOTRCE  ANOP\n.*\n         AIF   ('&VARDATA' EQ 'NO').NOVARD\n&FLAG1   SETC  '&FLAG1.+MSG1VAR'\n.NOVARD  ANOP\n.*\n         AIF   ('&VARDATA' NE 'INLINE').NOINLNE\n&FLAG1   SETC  '&FLAG1.+MSG1INLN'\n.NOINLNE ANOP\n.*\n         AIF   ('&VARDATA' NE 'JOBPROC').NOJBPRC\n&FLAG2   SETC  '&FLAG2.+MSG2JBPR'\n.NOJBPRC ANOP\n.*\n         AIF   ('&VARDATA' NE 'SYSPROC').NOSYSPR\n&FLAG2   SETC  '&FLAG2.+MSG2SYSP'\n.NOSYSPR ANOP\n.*\n         AIF   ('&VARDATA' NE 'DSNAME').NODSNME\n&FLAG2   SETC  '&FLAG2.+MSG2DSN'\n.NODSNME ANOP\n.*\n         AIF   ('&VARDATA' NE 'SWA').NOSWA\n&FLAG2   SETC  '&FLAG2.+MSG2SWAK'\n.NOSWA   ANOP\n.*\nMSGNO&MN EQU   &MN                 EQUATE FOR MESSAGE NUMBER\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    EQU   MSGNO&MN            ALTERNATE NAME FOR MESSAGE\n.*\n.NONAME  ANOP\n         DC    Y(MSGND&MN-*)       OFFSET OF NEXT MESSAGE TABLE\n         DC    Y(MSGNO&MN)         MESSAGE NUMBER\n         DC    H'&LTH1'            LENGTH OF MESSAGE TEXT\n         DC    Y(&VARO)            VARIABLE TEXT OFFSET\n         DC    AL1(&FLAG1)         MESSAGE FLAGS\n         DC    AL1(&FLAG2)         MESSAGE FLAGS\n*\n         AIF   (&LTH1 EQ &LTH2).NOSTR1\n         DC    C'&STR1'            FIRST PART OF MESSAGE TEXT\n.NOSTR1  AIF   (&LTH2 EQ 0).NOSTR2\n         DC    C'&STR2'            SECOND PART OF MESSAGE TEXT\n.NOSTR2  ANOP\nMSGND&MN DC    0H'0'               LABEL FOR NEXT MESSAGE TABLE\n         AIF   ('&MN' EQ '000').ISLAST\n         MEXIT ,\n.*\n.ISLAST  ANOP\n         DC    Y(0)                END OF TABLE\n         MEXIT ,\n.*\n.VGMER01 MNOTE 12,'*** MESSAGE TEXT REQUIRED BUT NOT SPECIFIED ***'\n         MEXIT ,\n.*\n.VGMER02 MNOTE 12,'*** MESSAGE NUMBER REQUIRED BUT NOT SPECIFIED ***'\n         MEND\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNOPT": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\xf9\\x00\\xf9\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 249, "newlines": 249, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEFCNOPT &DSECT=NO,                                           X\n               &DDNAME=JOBPROC,                                        X\n               &STCPARM=JCLLIB,                                        X\n               &SWAPARM=SWA,                                           X\n               &SWADDS=(SWAABOVE,SWABELOW),                            X\n               &SYSPROC=SYSPROC,                                       X\n               &SYSPJOB=YES,                                           X\n               &SYSPSTC=NO,                                            X\n               &SYSPTSU=NO,                                            X\n               &MSGPRFX=CCC,                                           X\n               &DSNLIST=IEFCNVLS,                                      X\n               &DEBUG=NO,                                              X\n               &MSGSUPP=YES,                                           X\n               &JESLVL=YES\n.*\n         LCLC  &P\n.*\n         AIF   ('&DSECT' EQ 'YES').DSECT\n.*\n&P       SETC  'VOP'\n***********************************************************************\n*                                                                     *\n*        IEFCNVOP                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS SECTION CONTAINS ALL OF THE OPTIONS THAT ARE VARIABLE   *\n*        IN THIS PROGRAM.  THESE ARE USED BY OTHER PARTS OF THIS      *\n*        PROGRAM.  HENCE, ONLY THIS SECTION NEED BE ALTERED TO        *\n*        CHANGE ANY OF THEM.                                          *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVOP CSECT\nIEFCNVOP AMODE 31\nIEFCNVOP RMODE ANY\n*\n         EJECT\n         AGO   .GEN\n.*\n.DSECT   ANOP\n&P       SETC  'OPT'\n         TITLE 'MAPPING OF PROGRAM OPTIONS'\n***********************************************************************\n*                                                                     *\n*        THIS DSECT MAPS ALL OF THE OPTIONS THAT ARE VARIABLE         *\n*        IN THIS PROGRAM.  THESE ARE USED BY OTHER PARTS OF THIS      *\n*        PROGRAM.  HENCE, ONLY THIS SECTION NEED BE ALTERED TO        *\n*        CHANGE ANY OF THEM.                                          *\n*                                                                     *\n***********************************************************************\n*\nOPTDSECT DSECT\n*\n         AGO   .GEN\n.*\n.GEN     ANOP\n         AIF   ('&DSECT' EQ 'YES').NJPRC1\n***********************************************************************\n*                                                                     *\n*        JOBPROC DD NAME                                              *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE DDNAME THAT IS DESIRED   *\n*        TO BE USED FOR THE DYNAMIC PROCLIB DD STATEMENT.  THIS DD    *\n*        NAME SHOULD NOT BE USED FOR ANY OTHER PURPOSE IN JCL AND     *\n*        MAY CAUSE A JCL ERROR (MISPLACED DD STATEMENT) IF IT IS.     *\n*                                                                     *\n***********************************************************************\n*\n.NJPRC1  ANOP\n&P.JBPRC DC    CL8'&DDNAME. '      JOBPROC DD NAME\n*\n         AIF   ('&DSECT' EQ 'YES').NSTCP1\n***********************************************************************\n*                                                                     *\n*        START COMMAND KEYWORD PARAMETER FOR STC DYNAMIC PROCLIB      *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE PARAMETER THAT IS        *\n*        TO BE USED TO SPECIFY THE DYNAMIC PROCLIB DATA SET FOR       *\n*        A STARTED TASK.  THIS KEYWORD MUST NOT BE EQUAL TO ANY       *\n*        EXISTING JCL KEYWORDS AND CANNOT BE USED AS A SYMBOLIC       *\n*        PARAMETER ON STARTED TASKS.                                  *\n*                                                                     *\n***********************************************************************\n*\n.NSTCP1  ANOP\n&P.STCKW DC    CL8'&STCPARM. '     STARTED TASK PROCLIB KEYWORD PARM\n*\n         AIF   ('&DSECT' EQ 'YES').NSWAP1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SWA KEYWORD PARAMETER ON THE JOB STATEMENT                   *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE PARAMETER THAT IS        *\n*        TO BE USED TO SPECIFY THE LOCATION OF THE SCHEDULAR WORK     *\n*        AREA FOR A JOB.  THIS KEYWORD MUST NOT BE EQUAL TO ANY       *\n*        EXISTING JOB KEYWORDS.                                       *\n*                                                                     *\n***********************************************************************\n*\n.NSWAP1  ANOP\n&P.SWAKW DC    CL8'&SWAPARM. '     SWA JOB CARD KEYWORD PARAMETER\n*\n         AIF   ('&DSECT' EQ 'YES').NSWAD1\n***********************************************************************\n*                                                                     *\n*        SWA DD STATEMENT DDNAMES                                     *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE TWO SPECIAL DDNAMES      *\n*        THAT INDICATE THAT THE DEFAULT SWA LOCATION SHOULD BE        *\n*        ALTERED.                                                     *\n*                                                                     *\n***********************************************************************\n*\n.NSWAD1  ANOP\n&P.DDSWA DC    CL8'&SWADDS(1). '   SWA ABOVE DDNAME\n*\n&P.DDSWB DC    CL8'&SWADDS(2). '   SWA BELOW DDNAME\n*\n         AIF   ('&DSECT' EQ 'YES').NSYSP1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SYSPROC KEYWORD VALUE                                        *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE VALUE THAT IS BEING      *\n*        USED FOR THE SYSPROC KEYWORD.                                *\n*                                                                     *\n***********************************************************************\n*\n.NSYSP1  ANOP\n&P.SYSPR DC    CL8'&SYSPROC. '     SYSPROC KEYWORD\n*\n         AIF   ('&DSECT' EQ 'YES').NSYSPJ1\n***********************************************************************\n*                                                                     *\n*        SYSPROC = YES|NO|FIRST DEFAULT FOR BATCH JOBS                *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO 'YES' TO MAKE SYSPROC=YES    *\n*        THE DEFAULT OR 'NO' TO MAKE SYSPROC=NO THE DEFAULT.          *\n*                                                                     *\n***********************************************************************\n*\n.NSYSPJ1 ANOP\n&P.SPRJB DC    CL8'&SYSPJOB. '     SYSPROC=YES|NO|FIRST\n*\n         AIF   ('&DSECT' EQ 'YES').NSYSPJ2\n***********************************************************************\n*                                                                     *\n*        SYSPROC = YES|NO|FIRST DEFAULT FOR STARTED TASKS             *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO 'YES' TO MAKE SYSPROC=YES    *\n*        THE DEFAULT OR 'NO' TO MAKE SYSPROC=NO THE DEFAULT.          *\n*                                                                     *\n***********************************************************************\n*\n.NSYSPJ2 ANOP\n&P.SPRST DC    CL8'&SYSPSTC. '     SYSPROC=YES|NO|FIRST\n*\n         AIF   ('&DSECT' EQ 'YES').NSYSPJ3\n***********************************************************************\n*                                                                     *\n*        SYSPROC = YES|NO|FIRST DEFAULT FOR TSO USERS                 *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO 'YES' TO MAKE SYSPROC=YES    *\n*        THE DEFAULT OR 'NO' TO MAKE SYSPROC=NO THE DEFAULT.          *\n*                                                                     *\n***********************************************************************\n*\n.NSYSPJ3 ANOP\n&P.SPRTS DC    CL8'&SYSPTSU. '     SYSPROC=YES|NO|FIRST\n*\n         AIF   ('&DSECT' EQ 'YES').NMSG1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MESSAGE PREFIX                                               *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE PREFIX WHICH             *\n*        IS DESIRED ON ALL MESSAGES ISSUED BY THIS PROGRAM.           *\n*                                                                     *\n*        THE MESSAGE NUMBERS WILL BE XXX800I THROUGH XXX899I,         *\n*        WHERE XXX IS THE SELECTED PREFIX.                            *\n*                                                                     *\n***********************************************************************\n*\n.NMSG1   ANOP\n&P.MSGPF DC    CL8'&MSGPRFX. '     MESSAGE PREFIX\n*\n         AIF   ('&DSECT' EQ 'YES').NMSGS1\n***********************************************************************\n*                                                                     *\n*        MESSAGE SUPPRESSION OPTION                                   *\n*                                                                     *\n*        THIS PARAMETER CAUSES THE MSGLEVEL OF THE ADDRESS SPACE      *\n*        RUNNING THE CONVERTER TO BE SET TO ZERO, SUPPRESSING THE     *\n*        PROCLIB ALLOCATION/DEALLOCATION MESSAGES (IEF237I/IEF285I)   *\n*        ISSUED AS AN IEF196I MESSAGE.                                *\n*                                                                     *\n***********************************************************************\n*\n.NMSGS1  ANOP\n&P.MSGSP DC    CL8'&MSGSUPP. '     MESSAGE SUPPRESSION\n*\n         AIF   ('&DSECT' EQ 'YES').NDSNL1\n***********************************************************************\n*                                                                     *\n*        DATA SET INCLUSION/EXCLUSION MODULE NAME                     *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO THE NAME OF THE LOAD         *\n*        MODULE THAT CONTAINS THE LIST OF DATA SETS THAT ARE          *\n*        ELIGIBLE AND/OR NOT ELIGIBLE FOR DYNAMIC PROCLIB             *\n*        PROCESSING.                                                  *\n*                                                                     *\n***********************************************************************\n*\n.NDSNL1  ANOP\n&P.DSNLS DC    CL8'&DSNLIST. '     INCLUSION/EXCLUSION MODULE NAME\n*\n         AIF   ('&DSECT' EQ 'YES').NDEBUG1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DEBUGGING OPTION                                             *\n*                                                                     *\n*        THIS PARAMETER SHOULD BE SET TO EITHER YES OR NO TO ENABLE   *\n*        OR DISABLE THE DEBUGGING TRACE CODE IN THIS MODULE.          *\n*                                                                     *\n***********************************************************************\n*\n.NDEBUG1 ANOP\n&P.DEBUG DC    CL8'&DEBUG. '       DEBUGGING CODE\n*\n         AIF   ('&DSECT' EQ 'YES').NJES1\n***********************************************************************\n*                                                                     *\n*        JES LEVEL OPTION                                             *\n*                                                                     *\n*        THIS PARAMETER CAUSES THE CONVERTER JES LEVEL FIELD TO       *\n*        BE ALTERED, SO THAT THE CONVERTER THINKS IT IS RUNNING       *\n*        UNDER A VERSION 4 LEVEL OF JES.                              *\n*                                                                     *\n***********************************************************************\n*\n.NJES1   ANOP\n&P.JESLV DC    CL8'&JESLVL. '      ALTER THE JES LEVEL\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNPPW": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x01\\xac\\x01\\xac\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 428, "newlines": 428, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEFCNPPW\n         TITLE 'DYNAMIC PROCLIB WORK AREA'\n***********************************************************************\n*                                                                     *\n*        PPWDSECT                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE FOLLOWING IS THE DYNAMIC PROCEDURE LIBRARY WORK AREA.    *\n*                                                                     *\n*        ANY ADDITIONS OR DELETIONS MUST BE DONE AT THE END OF        *\n*        THIS AREA, AS AN OBJECT CODE ONLY MODULE REFERS TO MANY      *\n*        FIELDS WITHIN THIS AREA.                                     *\n*                                                                     *\n***********************************************************************\n*\nPPWDSECT DSECT                     USER PROCLIB WORK AREA\n*\nPPWPPWID DS    0CL4                CONTROL BLOCK ID\nPPWIDPPW EQU   C'PPW '             EQUATE FOR EYECATCHER\nPPWVPPSA DS    9D                  SAVE AREA FOR MAIN LEVEL\nPPWVPPDB DS    0D                  DEBUGGING STUFF\nPPWVPPCN DS    F                   COUNT OF TIMES ENTERED\nPPWVPPRT DS    A                   RETRY ADDRESS\n*\nPPWVSTID DS    0CL4                SAVE AREA ID\nPPWIDVST EQU   C'VST '             EQUATE FOR EYECATCHER\nPPWVSTSA DS    9D                  SAVE AREA FOR IEFCNVST LEVEL\nPPWVSTDB DS    0D                  DEBUGGING STUFF\nPPWVSTCN DS    F                   COUNT OF TIMES ENTERED\nPPWVSTRT DS    A                   RETRY ADDRESS\n*\nPPWVGSID DS    0CL4                SAVE AREA ID\nPPWIDVGS EQU   C'VGS '             EQUATE FOR EYECATCHER\nPPWVGSSA DS    9D                  SAVE AREA FOR IEFCNVGS LEVEL\nPPWVGSDB DS    0D                  DEBUGGING STUFF\nPPWVGSCN DS    F                   COUNT OF TIMES ENTERED\nPPWVGSRT DS    A                   RETRY ADDRESS\n*\nPPWVXTID DS    0CL4                SAVE AREA ID\nPPWIDVXT EQU   C'VXT '             EQUATE FOR EYECATCHER\nPPWVXTSA DS    9D                  SAVE AREA FOR IEFCNVXT LEVEL\nPPWVXTDB DS    0D                  DEBUGGING STUFF\nPPWVXTCN DS    F                   COUNT OF TIMES ENTERED\nPPWVXTRT DS    A                   RETRY ADDRESS\n*\nPPWVJPID DS    0CL4                SAVE AREA ID\nPPWIDVJP EQU   C'VJP '             EQUATE FOR EYECATCHER\nPPWVJPSA DS    9D                  SAVE AREA FOR IEFCNVJP LEVEL\nPPWVJPDB DS    0D                  DEBUGGING STUFF\nPPWVJPCN DS    F                   COUNT OF TIMES ENTERED\nPPWVJPRT DS    A                   RETRY ADDRESS\n*\nPPWVEXID DS    0CL4                SAVE AREA ID\nPPWIDVEX EQU   C'VEX '             EQUATE FOR EYECATCHER\nPPWVEXSA DS    9D                  SAVE AREA FOR IEFCNVEX LEVEL\nPPWVEXDB DS    0D                  DEBUGGING STUFF\nPPWVEXCN DS    F                   COUNT OF TIMES ENTERED\nPPWVEXRT DS    A                   RETRY ADDRESS\n*\nPPWVKWID DS    0CL4                SAVE AREA ID\nPPWIDVKW EQU   C'VKW '             EQUATE FOR EYECATCHER\nPPWVKWSA DS    9D                  SAVE AREA FOR IEFCNVKW LEVEL\nPPWVKWDB DS    0D                  DEBUGGING STUFF\nPPWVKWCN DS    F                   COUNT OF TIMES ENTERED\nPPWVKWRT DS    A                   RETRY ADDRESS\n*\nPPWVPDID DS    0CL4                SAVE AREA ID\nPPWIDVPD EQU   C'VPD '             EQUATE FOR EYECATCHER\nPPWVPDSA DS    9D                  SAVE AREA FOR IEFCNVPD LEVEL\nPPWVPDDB DS    0D                  DEBUGGING STUFF\nPPWVPDCN DS    F                   COUNT OF TIMES ENTERED\nPPWVPDRT DS    A                   RETRY ADDRESS\n*\nPPWVPSID DS    0CL4                SAVE AREA ID\nPPWIDVPS EQU   C'VPS '             EQUATE FOR EYECATCHER\nPPWVPSSA DS    9D                  SAVE AREA FOR POST SCAN EXIT LEVEL\nPPWVPSDB DS    0D                  DEBUGGING STUFF\nPPWVPSCN DS    F                   COUNT OF TIMES ENTERED\nPPWVPSRT DS    A                   RETRY ADDRESS\n*\nPPWVCLID DS    0CL4                SAVE AREA ID\nPPWIDVCL EQU   C'VCL '             EQUATE FOR EYECATCHER\nPPWVCLSA DS    9D                  SAVE AREA FOR IEFCNVCL LEVEL\nPPWVCLDB DS    0D                  DEBUGGING STUFF\nPPWVCLCN DS    F                   COUNT OF TIMES ENTERED\nPPWVCLRT DS    A                   RETRY ADDRESS\n*\nPPWVMSID DS    0CL4                SAVE AREA ID\nPPWIDVMS EQU   C'VMS '             EQUATE FOR EYECATCHER\nPPWVMSSA DS    9D                  SAVE AREA FOR IEFCNVMS LEVEL\nPPWVMSDB DS    0D                  DEBUGGING STUFF\nPPWVMSCN DS    F                   COUNT OF TIMES ENTERED\nPPWVMSRT DS    A                   RETRY ADDRESS\n*\nPPWVDEID DS    0CL4                SAVE AREA ID\nPPWIDVDE EQU   C'VDE '             EQUATE FOR EYECATCHER\nPPWVDESA DS    9D                  SAVE AREA FOR IEFCNVDE LEVEL\nPPWVDEDB DS    0D                  DEBUGGING STUFF\nPPWVDECN DS    F                   COUNT OF TIMES ENTERED\nPPWVDERT DS    A                   RETRY ADDRESS\n*\nPPWDOUBL DS    D                   DOUBLE WORD WORK AREA\n*\nPPWWORKA DS    A                   ADDRESS OF THIS WORK AREA\nPPWWORKL DS    F                   LENGTH OF THIS WORK AREA\n*\nPPWTCBAD DS    A                   CONVERTER TCB ADDRESS\nPPWTIOTA DS    A                   ADDRESS OF TIOT\n*\nPPWFSAAD DS    A                   FIRST SAVE AREA ADDRESS\nPPWFSAR2 DS    F                   SAVED CONTENTS OF FSA REG 2\nPPWFSAR3 DS    F                   SAVED CONTENTS OF FSA REG 3\n*\nPPWINTR1 DS    A                   ORIGINAL CONVERTER PARM LIST\nPPWINTRC DS    F                   CONVERTER RETURN CODE\n*\nPPWGSTR1 DS    A                   REGISTER 1 AT ENTRY TO IEFCNGST\nPPWGSTRC DS    F                   RETURN CODE FROM IEFCNGST\nPPWGSTCN DS    F                   COUNT OF CALLS TO IEFCNGST\n*\nPPWIMMCN DS    F                   COUNT OF CALLS TO IEFCNIMM\n*\nPPWPARMS DS    0A                  CONVERTER PARAMETER LIST\nPPWPARM1 DS    0A                  FIRST CONVERTER PARAMETER\nPPWCNVWA DS    A                   ADDRESS OF THE CONVERTER WORK AREA\nPPWPARM2 DS    A                   SECOND CONVERTER PARAMETER\nPPWPARM3 DS    A                   THIRD CONVERTER PARAMETER\nPPWPARM4 DS    A                   FOURTH CONVERTER PARAMETER\nPPWPARM5 DS    A                   FIFTH CONVERTER PARAMETER\nPPWPARM6 DS    A                   SIXTH CONVERTER PARAMETER\n*\nPPWCNVRC DS    A                   UNUSED\nPPWJSDCB DS    A                   ADDRESS OF DCB ADDR IN CNV WORK AREA\nPPWCNNUM DS    A                   ADDRESS OF STATEMENT NUMBER IN CWA\n*\nPPWPSER1 DS    A                   REGISTER 1 FROM POST SCAN EXIT\n*\nPPWPSEPM DS    0A                  POST SCAN EXIT PARM LIST\nPPWPSETX DS    A                   ADDRESS OF INTERNAL TEXT RECORD\nPPWPSECM DS    A                   COPY OF CNMB ANCHOR WORD\nPPWPSEWK DS    A                   ADDRESS OF INTERNAL TEXT WORK AREA\nPPWPSEPL EQU   *-PPWPSEPM          LENGTH OF POST SCAN EXIT\n*\nPPWCNDCB DS    A                   ORIGINAL CONVERTER DCB ADDRESS\nPPWPPDCB DS    A                   ADDRESS OF OUR PROCLIB DCB\nPPWPMDCB DS    A                   ADDRESS OF DCB IN CONVERTER PARMLIST\n*\nPPWCNTXT DS    A                   ORIGINAL CONVERTER TXT EXIT\nPPWPPTXT DS    A                   ADDRESS OF OUR CONVERTER TXT EXIT\nPPWPMTXT DS    A                   ADDRESS OF TXT EXIT IN CNV PARM LIST\n*\nPPWEXLST DS    XL(CNPREXLN)        COPY OF ORIGINAL EXIT LIST\nPPWPPLST DS    XL(CNPREXLN)        OUR REBUILT EXIT LIST\n*\nPPWJMR   DS    A                   ADDRESS OF THE JMR\n*\nPPWCNVDE DS    A                   ADDRESS OF DYNALLOC ERROR ROUTINE\nPPWCNVKW DS    A                   ADDRESS OF KEYWORD SCAN ROUTINE\nPPWCNVPD DS    A                   ADDRESS OF PARAMETER DELETE ROUTINE\nPPWCNVMS DS    A                   ADDRESS OF MESSAGE ROUTINE\nPPWCNVXT DS    A                   ADDRESS OF DATA EXTRACT/UPDATE RTN\nPPWCNVOP DS    A                   ADDRESS OF OPTIONS DATA\n*\nPPWDBGST DS    0F                  START OF DEBUGGING SAVED DATA\n*\nPPWENVIR DS    X'00'               ENVIRONMENTAL FLAGS\nPPWEJOB  EQU   X'80'               BATCH JOB\nPPWETSU  EQU   X'40'               TIME SHARING USER\nPPWESTC  EQU   X'20'               STARTED TASK\nPPWEMSTR EQU   X'02'               THIS IS THE MASTER SCHEDULAR\nPPWEESA4 EQU   X'01'               ESA V4 BCP IN USE\n*\nPPWOPTN1 DS    X'00'               OPTION FLAGS 1\nPPWO1STC EQU   X'80'               STC JCLLIB KEYWORD AVAILABLE\nPPWO1JPR EQU   X'40'               JOBPROC DDNAME AVAILABLE\nPPWO1DBG EQU   X'20'               DEBUGGING CODE IN EFFECT\nPPWO1JLV EQU   X'10'               ALTER THE JES LEVEL IF NECESSARY\nPPWO1SWA EQU   X'08'               SUPPORT THE SWA KEYWORD ON JOB CARD\nPPWO1SDD EQU   X'04'               SUPPORT THE SWAABOVE/BELOW DDNAMES\nPPWO1MSP EQU   X'02'               MESSAGE SUPPRESSION WANTED\n*\nPPWSPRDF DS    X'00'               SYSPROC DEFAULTS\nPPWSPRJY EQU   X'80'               BATCH JOB SYSPROC=YES\nPPWSPRJF EQU   X'40'               BATCH JOB SYSPROC=FIRST\nPPWSPRTY EQU   X'20'               TSO USER SYSPROC=YES\nPPWSPRTF EQU   X'10'               TSO USER SYSPROC=FIRST\nPPWSPRSY EQU   X'08'               STARTED TASK SYSPROC=YES\nPPWSPRSF EQU   X'04'               STARTED TASK SYSPROC=FIRST\n*\nPPWVPPFL DS    X'00'               STATUS FLAGS FOR IEFCNVPP\nPPWVPPEX EQU   X'80'               IEFCNVPP IS EXECUTING\n*\nPPWVGSFL DS    X'00'               STATUS FLAGS FOR IEFCNVGS\nPPWVGSEX EQU   X'80'               IEFCNVGS IS EXECUTING\n*\nPPWVXTFL DS    X'00'               STATUS FLAGS FOR IEFCNVXT\nPPWVXTEX EQU   X'80'               IEFCNVXT IS EXECUTING\nPPWVXTGW EQU   X'40'               GWA EXTRACT IN PROGRESS\nPPWVXTST EQU   X'20'               STM EXTRACT IN PROGRESS\nPPWVXTSU EQU   X'10'               STM UPDATE IN PROGRESS\nPPWVXTMS EQU   X'08'               ISSUE CONVERTER MESSAGE\n*\nPPWVJPFL DS    X'00'               STATUS FLAGS FOR IEFCNVJP\nPPWVJPEX EQU   X'80'               IEFCNVJP IS EXECUTING\nPPWVJPAL EQU   X'40'               PERFORMING DYNAMIC ALLOCATION\n*\nPPWVEXFL DS    X'00'               STATUS FLAGS FOR IEFCNVEX\nPPWVEXEX EQU   X'80'               IEFCNVEX IS EXECUTING\nPPWVEXAL EQU   X'40'               PERFORMING DYNAMIC ALLOCATION\nPPWVEXCO EQU   X'20'               PERFORMING DYNAMIC CONCATENATION\nPPWVEXOP EQU   X'10'               OUR PROCLIB OPEN IN PROGRESS\n*\nPPWVKWFL DS    X'00'               STATUS FLAGS FOR IEFCNVKW\nPPWVKWEX EQU   X'80'               IEFCNVKW IS EXECUTING\n*\nPPWVPDFL DS    X'00'               STATUS FLAGS FOR IEFCNVPD\nPPWVPDEX EQU   X'80'               IEFCNVPD IS EXECUTING\n*\nPPWVCLFL DS    X'00'               STATUS FLAGS FOR IEFCNVCL\nPPWVCLEX EQU   X'80'               IEFCNVCL IS EXECUTING\nPPWVCLCL EQU   X'40'               PROCLIB IS BEING CLOSED\nPPWVCLDC EQU   X'20'               PROCLIB IS DECONCATENATING\nPPWVCLDA EQU   X'10'               PROCLIB IS DEALLOCATING\n*\nPPWVDEFL DS    X'00'               STATUS FLAGS FOR IEFCNVDE\nPPWVDEEX EQU   X'80'               IEFCNVDE IS EXECUTING\nPPWVDEDF EQU   X'40'               DAIRFAIL HAS BEEN CALLED\n*\nPPWVPSFL DS    X'00'               STATUS FLAGS FOR IEFCNVPS\nPPWVPSEX EQU   X'80'               IEFCNVPS IS EXECUTING\nPPWVPSAD EQU   X'40'               PASSED TO POST SCAN EXIT VIA ADDRESS\nPPWVPSLK EQU   X'20'               PASSED TO POST SCAN EXIT VIA LINK\n*\nPPWVMSFL DS    X'00'               STATUS FLAGS FOR IEFCNVMS\nPPWVMSEX EQU   X'80'               IEFCNVMS IS EXECUTING\nPPWVMSMB EQU   X'40'               BUILDING A MESSAGE\nPPWVMSIM EQU   X'20'               CALL TO IEFCNIMM BEING MADE\nPPWVMSWT EQU   X'10'               WTO IN PROGRESS\n*\nPPWVSTFL DS    X'00'               STATUS FLAGS FOR IEFCNVST\nPPWVSTEX EQU   X'80'               IEFCNVST IS EXECUTING\nPPWVSTRC EQU   X'40'               RECURSIVE ABEND FLAG\nPPWVSTDM EQU   X'20'               SVC DUMP IN PROGRESS\nPPWVSTRE EQU   X'10'               RETRY REQUESTED FOR RECOVERY\n*\nPPWCFLG1 DS    X'00'               STATUS FLAGS FOR CONVERTER EXECUTION\nPPWC1INT EQU   X'80'               CONTROL PASSED TO IEFCNINT\nPPWC1GST EQU   X'40'               CONTROL PASSED TO IEFCNGST\nPPWC1IMM EQU   X'20'               CONTROL PASSED TO IEFCNIMM\n*\nPPWFLAG1 DS    X'00'               STATUS FLAGS 1\nPPW1JPER EQU   X'80'               ERROR NOTED IN JOBPROC STATEMENT\nPPW1HVJP EQU   X'40'               JOBPROC DD CARD IS PRESENT\nPPW1CNJP EQU   X'20'               JOBPROC IS A CONCATENATION\nPPW1OPEN EQU   X'10'               USER PROCLIB DCB IS OPEN\nPPW1JPCN EQU   X'08'               JOBPROC IS NOW CONCATENATED\nPPW1NULL EQU   X'04'               NULL STATEMENT DETECTED\n*\nPPWFLAG2 DS    X'00'               STATUS FLAGS 2\nPPW2JCLB EQU   X'80'               JCLLIB STATEMENT ENCOUNTERED\nPPW2JBPR EQU   X'40'               JOBPROC DD DETECTED FROM IEFCNGST\nPPW2JBPC EQU   X'20'               JOBPROC CONCAT DETECTED FROM GST\nPPW2NJBP EQU   X'10'               NO LONGER NEED TO SCAN IN GST\nPPW2CMPL EQU   X'08'               FIRST EXEC PROCESSING COMPLETE\nPPW2TRCE EQU   X'04'               TRACING IS IN EFFECT\nPPW2MSGL EQU   X'02'               MSGLEVEL ALTERED\nPPW2PSEI EQU   X'01'               POST SCAN EXIT INTERCEPT\n*\nPPWFLAG3 DS    X'00'               STATUS FLAGS 3\nPPW3DSNL EQU   X'80'               DSN INCL/EXCL LIST MODULE LOADED\nPPW3ESTA EQU   X'40'               ESTAE HAS BEEN ISSUED\nPPW3NOSY EQU   X'20'               SYSPROC UNAVAILABLE\nPPW3SPV4 EQU   X'10'               SP V4 FORMAT CONVERTER PARMS\nPPW3CNMB EQU   X'04'               CNMB ADDRESS AVAILABLE\nPPW3DALC EQU   X'02'               CONTROL PASSED TO SVC 99\nPPW3INIT EQU   X'01'               INITIALIZATION IS COMPLETE\n*\nPPWFLAG4 DS    X'00'               STATUS FLAGS 4\nPPW4SYSP EQU   X'80'               SYSPROC=YES SPECIFIED OR DEFAULTED\nPPW4SYSF EQU   X'40'               SYSPROC=FIRST SPECIFIED OR DEFAULTED\nPPW4SWAA EQU   X'20'               SWA=ABOVE SPECIFIED ON JOB CARD\nPPW4SWAB EQU   X'10'               SWA=BELOW SPECIFIED ON JOB CARD\n*\nPPWSTMT1 DS    X'00'               JOBPROC DD STATEMENT FLAGS\nPPWS1DSN EQU   X'80'               DSNAME PROVIDED\nPPWS1SPR EQU   X'40'               SYSPROC PROVIDED\n*\nPPWMSGLV DS    X                   SAVED MESSAGE LEVEL FROM JCT\n*\nPPWJPCNT DS    H                   NO. OF JOBPROC DD STATEMENTS\nPPWJPSYS DS    H                   NO. OF SYSTEM PROCLIBS\nPPWJPMAX DS    H                   MAXIMUM USER PROCLIBS ALLOWED\n*\nPPWDBGND DS    0F                  END OF DEBUGGING SAVED DATA\nPPWDBGLN EQU   PPWDBGND-PPWDBGST   LENGTH OF DEBUGGING AREA\n*\nPPWSYSDS DS    16A                 ADDRESS OF SYSPROC JFCBS\n*\nPPWDDBSE DS    CL8                 BASE DDNAME FOR ALL ALLOCATIONS\n*\nPPWDDSUF DS    CL16                DDNAME SUFFIX CHARACTERS\nPPWHEXTR EQU   PPWDDSUF-240        CONVENIENT HEX TRANSLATE TABLE\n*\nPPWSWRPL DS    2A                  SWAREQ PARAMETER POINTERS\nPPWSWREA DS    A                   SWAREQ PARAMETER LIST\nPPWSWREP DS    CL(L'SWAEPAX)       SWAREQ EPA\n*\nPPWSYSDD DS    CL8                 NAME OF SYSTEM PROCLIB DD\n*\n         PUSH  PRINT\n         PRINT NOGEN\nPPWDCB   DCB   DDNAME=PTTTTTT0,DSORG=PO,MACRF=(R)\n         POP   PRINT\nPPWDCBL  EQU   *-PPWDCB            LENGTH OF DCB AREA\n*\nPPWDARGL DS    A                   DYN ALLOC ARG LIST\nPPWDARB  DS    0XL20'0',5F'0'      DYN ALLOC REQUEST BLOCK\nPPWDARC  DS    F                   DYN ALLOC RETURN CODE\n*\nPPWDATXT DS    10A                 DYN ALLOC TEXT POINTERS\n*\nPPWDDNMK DS    H                   DDNAME KEY FOR DYN ALLOC/DE-ALLOC\nPPWDDNM# DS    H                         NO. OF LENGTH-PARM ITEMS:\nPPWDDNML DS    H                         DDNAME LENGTH\nPPWDDNME DS    CL8                       USER PROCLIB DDNAME\n*\nPPWRTDSK DS    H                   RETURN DSORG KEY FOR DYN ALLOC\nPPWRTDS# DS    H                         NO. OF LENGTH-PARM ITEMS:\nPPWRTDSL DS    H                         DSORG LENGTH\nPPWRTDSE DS    XL2                       DSORG RETURNED\n*\nPPWDSNMK DS    H                   DSNAME KEY FOR DYN ALLOC\nPPWDSNM# DS    H                         NO. OF LENGTH-PARM ITEMS:\nPPWDSNML DS    H                         DSNAME LENGTH\nPPWDSNME DS    CL44                      USER PROCLIB DSNAME\n*\nPPWDISPK DS    H                   STATUS DISPOSITION KEY\nPPWDISP# DS    H                         NO. OF LENGTH-PARM ITEMS\nPPWDISPL DS    H                         DISPOSITION CODE LENGTH\nPPWDISP  DS    X                         DISP CODE\n*\nPPWCLOSK DS    H                   FREE=CLOSE KEY FOR DYN DEALLOC\nPPWCLOS# DS    H                         NO. OF LENGTH-PARM ITEMS:\n*\nPPWCONCK DS    H                   DDNAME KEY FOR CONCATENATIONS\nPPWCONC# DS    H                         NUMBER OF LENGTH-PARM ITEMS:\nPPWCONCM EQU   16                        MAX NUMBER OF CONCATENATIONS\nPPWCONCD DS    (PPWCONCM)XL10            DDNAME LENGTH AND TEXT\n         DS    CL(L'PPWCONCD)      PADDING FOR SHIFTING\n*\nPPWDFPRM DS    5F                  DAIRFAIL PARM LIST\nPPWDFRCD DS    F                   DAIRFAIL RETURN CODE\nPPWDFIDN DS    H                   DAIRFAIL CALLER IDENT.\n*\nPPWSTMLL DS    H                   STATEMENT LABEL LENGTH\nPPWSTMLA DS    CL8                 STATEMENT LABEL/NAME\n*\nPPWSTMVC DS    H                   STATEMENT VERB CODE\nPPWSTMVL DS    H                   STATEMENT VERB LENGTH\nPPWSTMVR DS    CL8                 STATEMENT VERB\n*\nPPWSTMTX DS    A                   ADDRESS OF STATEMENT TEXT\nPPWSTMTL DS    H                   LENGTH OF STATEMENT TEXT\n*\nPPWKYWDL DS    H                   LENGTH OF KEYWORD\nPPWKYWDT DS    CL8                 KEYWORD VALUE\n*\nPPWJBPRL DS    H                   LENGTH OF JOBPROC DDNAME\nPPWJBPRC DS    CL8                 JOBPROC DDNAME\n*\nPPWSTCKL DS    H                   LENGTH OF STC JCLLIB KEYWORD\nPPWSTCKW DS    CL8                 STC JCLLIB KEYWORD\n*\nPPWSWAKL DS    H                   LENGTH OF SWA KEYWORD\nPPWSWAKW DS    CL8                 SWA KEYWORD\n*\nPPWSWAAL DS    H                   LENGTH OF SWAABOVE DDNAME\nPPWSWAAD DS    CL8                 SWAABOVE DDNAME\nPPWSWABL DS    H                   LENGTH OF SWABELOW DDNAME\nPPWSWABD DS    CL8                 SWABELOW DDNAME\n*\nPPWSYSPL DS    H                   LENGTH OF SYSPROC KEYWORD\nPPWSYSPR DS    CL8                 SYSPROC KEYWORD\n*\nPPWMSGPL DS    H                   MESSAGE NUMBER PREFIX LENGTH\nPPWMSGPF DS    CL8                 MESSAGE NUMBER PREFIX\n*\nPPWDSNLL DS    H                   LENGTH OF MODULE NAME (FOR MESSAGE)\nPPWDSNLS DS    CL8                 DATA SET INCLUSION/EXCLUSION MODULE\nPPWDSNAD DS    A                   ADDRESS OF DATA SET INCL/EXCL LISTS\n*\n         PUSH  PRINT\n         PRINT NOGEN\nPPWESTAE ESTAE *-*,TERM=YES,MF=L\n         POP   PRINT\nPPWESTAL EQU   *-PPWESTAE          AREA LENGTH\n*\nPPWOCLST OPEN  (PPWDCB,(INPUT)),MF=L\n*\nPPWCNMB  DS    A                   CHAIN OF CNMBS\n*\nPPWVMTAD DS    A                   ADDRESS OF MESSAGE TABLE ENTRY\n*\nPPWWTOMD WTO   '',ROUTCDE=1,DESC=6,MF=L MODEL WTO PARM LIST\nPPWWTOML EQU   *-PPWWTOMD\n*\n         DS    0F\nPPWTOWRK DS    CL144               WTO MESSAGE AREA\n*\nPPWMSGLN DS    H                   MESSAGE TEXT LENGTH (AFTER BUILDING)\nPPWMSGTX DS    CL144               MESSAGE TEXT BUILD AREA\n*\nPPWMSGWL DS    H                   MESSAGE TEXT WORK LENGTH\nPPWMSGWK DS    CL80                MESSAGE TEXT WORK AREA\n*\nPPWKEYWL DS    H                   KEYWORD DATA LENGTH\nPPWKEYWD DS    CL80                KEYWORD DATA AREA\n*\n         DS    0D\nPPWGENWK DS    XL256               GENERAL WORK AREA\n*\n         DS    0D                  ALIGN TO A DOUBLE WORD\nPPWORKLN EQU   *-PPWDSECT          WORK AREA LENGTH\n*\nPPABEND  EQU   X'BAD'              INTERNAL ABEND CODE\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNTRC": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x0f\\x00\\x0f\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         IEFCNTRC &TRACEID\n.*\n         LCLA  &IDLEN\n&IDLEN   SETA  K'&TRACEID\n.*\n         LA    R0,MSGNO851         LOAD TRACE MESSAGE ID\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             BRANCH TO MESSAGE ROUTINE\n         DC    H'&IDLEN'           LENGTH OF TRACE ID\n.*\n&IDLEN   SETA  (&IDLEN+1)/2*2      ROUND UP TO EVEN NUMBER\n         DC    CL&IDLEN.'&TRACEID' TRACE POINT\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVJI": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc9\\xd5\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "INCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS ELIGIBLE FOR BATCH DYNAMIC PROCLIBS        *\n*                                                                     *\n***********************************************************************\n*\nVLSJOBIN IEFCNDSN JOBINCL,                                             X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVJX": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc5\\xe7\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EXCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS NOT ELIGIBLE FOR BATCH DYNAMIC PROCLIBS    *\n*                                                                     *\n***********************************************************************\n*\nVLSJOBEX IEFCNDSN JOBEXCL,                                             X\n               SYS1.AMDAPROC,                                          X\n               SYS1.TESTPROC,                                          X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVLS": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00+\\x00+\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SOURCE"}, "text": "CNVLS    TITLE 'DYNAMIC PROCLIB DATA SET INCLUSION/EXCLUSION LIST'\n***********************************************************************\n*                                                                     *\n*        THIS MODULE DEFINES THE LIST(S) OF DATA SETS THAT ARE        *\n*        EITHER ALLOWED OR NOT ALLOWED TO BE USED WITH THE            *\n*        DYNAMIC PROCLIB FACILITY.                                    *\n*                                                                     *\n*        FOR EACH CATEGORY OF JOB (BATCH JOB, TSO USER, OR            *\n*        STARTED TASK), THERE ARE TWO TABLES.                         *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVLS CSECT\nIEFCNVLS AMODE 31\nIEFCNVLS RMODE ANY\n*\n         DC    6Y(0)               DATA SET LIST POINTERS\n*\n***********************************************************************\n*                                                                     *\n*        BATCH JOB DATA SET EXCLUSION TABLE                           *\n*                                                                     *\n***********************************************************************\n*\n         COPY  IEFCNVJX            COPY IN JOB EXCLUSION LIST\n*\n***********************************************************************\n*                                                                     *\n*        BATCH JOB DATA SET INCLUSION TABLE                           *\n*                                                                     *\n***********************************************************************\n*\n         COPY  IEFCNVJI            COPY IN JOB INCLUSION LIST\n*\n         COPY  IEFCNVTX            COPY IN TSU EXCLUSION LIST\n*\n         COPY  IEFCNVTI            COPY IN TSU INCLUSION LIST\n*\n         COPY  IEFCNVSX            COPY IN STC EXCLUSION LIST\n*\n         COPY  IEFCNVSI            COPY IN STC INCLUSION LIST\n*\n         END   IEFCNVLS,(IEFCNVLS,0411,91308)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVOP": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SOURCE"}, "text": "CNVOP    TITLE 'DYNAMIC PROCLIB OPTIONS MODULE'\n         IEFCNOPT                                                      X\n               DDNAME=JOBPROC,                                         X\n               STCPARM=JCLLIB,                                         X\n               SWAPARM=SWA,                                            X\n               SYSPROC=SYSPROC,                                        X\n               SYSPJOB=YES,                                            X\n               SYSPSTC=NO,                                             X\n               SYSPTSU=NO,                                             X\n               MSGPRFX=CCC,                                            X\n               DSNLIST=IEFCNVLS,                                       X\n               DEBUG=NO,                                               X\n               MSGSUPP=YES,                                            X\n               JESLVL=YES\n*\n         END   ,(IEFCNVOP,0411,91308)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVPP": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x15\\x01\\x15\\x01\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 5377, "newlines": 5377, "modlines": 0, "user": "SOURCE"}, "text": "CNVPP    TITLE 'IEFCNVPP - AMDAHL MVS DYNAMIC PROCLIB SUPPORT'\n***********************************************************************\n*                                                                     *\n*        IEFCNVPP                                                     *\n*        ********                                                     *\n*                                                                     *\n*        VERSION 4, RELEASE 1, MODIFICATION 1                         *\n*        ******* ** ******* ** ************ *                         *\n*                                                                     *\n*        THIS CSECT CONTAINS THE DYNAMIC PROCEDURE LIBRARY            *\n*        SUPPORT ROUTINES.                                            *\n*                                                                     *\n*        THIS PROGRAM IS A REWRITE OF THE DYNAMIC PROCLIB             *\n*        SUPPORT PROGRAM, IEFVPP, WHICH HAS BEEN IN USE AND           *\n*        HAS BEEN DISTRIBUTED BY AMDAHL CORPORATION SINCE 1977.       *\n*                                                                     *\n*        THIS CODE HAS BEEN SUBSTANTIALLY REWRITTEN TO SUPPORT THE    *\n*        MVS/ESA (TM) VERSION 4 CONVERTER UNTIL SUCH TIME AS          *\n*        AN INSTALLATION CAN CONVERT IT'S JCL TO USE THE JCLLIB       *\n*        JCL STATEMENT.                                               *\n*                                                                     *\n*        MAJOR FEATURES OF THIS VERSION:                              *\n*                                                                     *\n*        FULL SUPPORT FOR A \"JOBPROC\" DD STATEMENT AND                *\n*        CONCATENATIONS BEFORE THE FIRST EXEC STATEMENT.              *\n*                                                                     *\n*        ENABLING THE USE OF THE JCLLIB, IF, AND INCLUDE              *\n*        STATEMENTS WITHOUT RUNNING A VERSION 4 JES.                  *\n*                                                                     *\n*        \"JCLLIB\" KEYWORD PARAMETER ON THE START COMMAND TO           *\n*        SUPPLY DYNAMIC PROCLIB FOR STARTED TASKS.                    *\n*                                                                     *\n*        ABILITY TO HAVE THE SYSTEM PROCEDURE LIBRARIES SEARCHED      *\n*        FIRST, LAST, OR NOT AT ALL.                                  *\n*                                                                     *\n*        JOBPROC DD DATA SETS MUST BE CATALOGUED.                     *\n*                                                                     *\n*        ABILITY TO LIMIT WHICH DATA SETS CAN OR CANNOT BE USED       *\n*        AS DYNAMIC PROCLIB DATA SETS.                                *\n*                                                                     *\n*        FACILITY TO SPECIFY THE LOCATION OF THE SCHEDULER WORK       *\n*        AREA, OVERRIDING THE DEFAULT FOR THE JOB.                    *\n*                                                                     *\n***********************************************************************\n         TITLE 'SUMMARY OF CHANGES'\n***********************************************************************\n*                                                                     *\n*        VERSION 4, RELEASE 1, MODIFICATION 1                         *\n*                                                                     *\n*        ADDITION OF PATCH AREAS TO EACH MAJOR SECTION OF IEFCNVPP.   *\n*                                                                     *\n*        SUPPORT FOR CONVERTER PTFS WHICH MOVED FIELDS IN THE         *\n*        CONVERTER WORK AREA.                                         *\n*                                                                     *\n*        JOBPROC DATA SET(S) WERE BEING PREMATURELY DEALLOCATED       *\n*        AT THE END OF THE FIRST EXPANDED PROCEDURE.                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        VERSION 4, RELEASE 1, MODIFICATION 0                         *\n*                                                                     *\n*        INITIAL RELEASE OF DYANMIC PROCLIB SUPPORT FOR               *\n*        MVS/ESA SP VERSION 4.                                        *\n*                                                                     *\n***********************************************************************\n         TITLE 'DYNAMIC PROCLIB LINKAGE REQUIREMENTS'\n***********************************************************************\n*                                                                     *\n*        ATTRIBUTES:                                                  *\n*        REENTRANT, REFRESHABLE.                                      *\n*        RMODE ANY, AMODE 31.                                         *\n*                                                                     *\n*        ENTRY POINT:                                                 *\n*              IEFCNVPP (FROM JES2/JES3) FIRST INITIALIZATION         *\n*                  PROCESSING AND TERMINATION CLEANUP                 *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              IEFCNINT - NORMAL CONVERTER ENTRY POINT                *\n*                                                                     *\n*        EXITS:                                                       *\n*              TO CALLER (JES2/JES3)                                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        ENTRY POINT:                                                 *\n*              IEFCNVGS (FROM IEFCNJRT) FRONT END AND BACK END        *\n*                  TO CONVERTER JCL STATEMENT BUILD                   *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              IEFCNGST - CONVERTER JCL STATEMENT BUILD               *\n*                                                                     *\n*        EXITS:                                                       *\n*              RETURNS TO CALLER (IEFCNJRT) WHEN STATEMENT IS         *\n*              NOT A JOBPROC STATEMENT                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        ENTRY POINT:                                                 *\n*              IEFCNVPS (FROM IEFCNWRT) FRONT END TO CONVERTER        *\n*                  POST SCAN EXIT                                     *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              POST SCAN EXIT PASSED FROM JES2/JES3                   *\n*                                                                     *\n*        EXITS:                                                       *\n*              RETURNS TO CALLER (IEFCNWRT) AFTER CALLING             *\n*              POST SCAN EXIT                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ADDITIONAL EXTERNAL REFERENCES (CONVERTER):                  *\n*              IEFCNIMM - CONVERTER MESSAGE ROUTINE                   *\n*                                                                     *\n*        ADDITIONAL EXTERNAL REFERENCES (LOCAL):                      *\n*              IEFCNVOP - DYNAMIC PROCLIB OPTIONS TABLE               *\n*              IEFCNVXT - OCO PROCESSING MODULE                       *\n*                                                                     *\n*        ADDITIONAL LOAD MODULE REFERENCES (LOCAL):                   *\n*              IEFCNVLS - DATA SET EXCLUSION TABLE                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SEE COMMENTS AT EACH INDIVIDUAL ENTRY POINT FOR MORE         *\n*        INFORMATION.                                                 *\n*                                                                     *\n***********************************************************************\n         TITLE 'DYNAMIC PROCLIB COPYRIGHT AND STATEMENT OF SUPPORT'\n***********************************************************************\n*                                                                     *\n*        COPYRIGHT                                                    *\n*        *********                                                    *\n*                                                                     *\n*        AMDAHL CORPORATION, 1991.                                    *\n*                                                                     *\n*        THIS COPYRIGHT IS NOT INTENDED TO LIMIT THE USE OF THIS      *\n*        CODE BY THE RECEIVING INSTALLATION, BUT TO PREVENT ITS       *\n*        REDISTRIBUTION FOR PROFIT.                                   *\n*                                                                     *\n*        SINCE THE DYNAMIC PROCLIB PROCESSING REQUIRED ACCESS TO      *\n*        SEVERAL CONVERTER INTERNAL CONTROL BLOCKS, A SMALL PORTION   *\n*        OF THIS MODIFICATION IS BEING DISTRIBUTED AS OBJECT CODE     *\n*        ONLY.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        STATEMENT OF SUPPORT                                         *\n*        ********* ** *******                                         *\n*                                                                     *\n*        THIS PROGRAM IS RUN IN THE CORPORATE COMPUTER CENTER         *\n*        OF THE AMDAHL CORPORATION AND IT'S USERS ARE TOTALLY         *\n*        DEPENDENT UPON IT.  HOWEVER, THAT DOES NOT IMPLY THAT        *\n*        THE AMDAHL CORPORATION FORMALLY SUPPORTS THIS CODE           *\n*        AND MAINTAINS RESPONSIBILITY FOR IT.  AS WITH ALL            *\n*        MODIFICATIONS, THE USING INSTALLATION MUST DECIDE            *\n*        WHETHER OR NOT TO INSTALL IT BASED ON THEIR ABILITY TO       *\n*        MAINTAIN IT IN THE FUTURE.  NOTE THAT SUPPORT IS PRI-        *\n*        MARILY A MATTER OF TIMING (I.E., WE MAY NOT BE RUNNING A     *\n*        NEW VERSION AS SOON AS OTHER INSTALLATIONS).                 *\n*                                                                     *\n*        BECAUSE THIS MODIFICATION IS SUPPLIED WITH A SMALL           *\n*        PART OF ITS FUNCTION DELIVERED IN AN OBJECT CODE ONLY        *\n*        MODULE (BECAUSE OF USAGE OF INTERNAL CONVERTER DATA          *\n*        AREA), THE AUTHOR PERSONALLY, NOT AMDAHL CORPORATION,        *\n*        WILL MAKE EVERY EFFORT TO PROVIDE NECESSARY CHANGES TO       *\n*        THIS MODIFICATION IN AS TIMELY MANNER AS POSSIBLE.           *\n*                                                                     *\n*        THIS VERSION OF DYNAMIC PROCLIB IS CONSIDERED TEMPORARY.     *\n*        IT IS INTENDED TO BE USED AS A COMPATIBILITY TOOL FOR        *\n*        INSTALLATIONS THAT HAVE BEEN USING PREVIOUS VERSION OF       *\n*        THE DYNAMIC PROCLIB MODIFICATION AND WISH TO ALLOW THEIR     *\n*        USERS SOME TIME TO CONVERT TO THE JCLLIB STATEMENT           *\n*        INCLUDED AS PART OF MVS/ESA VERSION 4.                       *\n*                                                                     *\n*        THE SUPPORT FOR THE JCLLIB KEYWORD ON THE START COMMAND      *\n*        AND THE SWA LOCATION PARAMETERS AND DDNAMES ARE              *\n*        CONSIDERED PERMANENT.  OTHER FEATURES CAN BE DISABLED        *\n*        AND LEAVE IT INTACT.                                         *\n*                                                                     *\n***********************************************************************\n         TITLE 'AUTHOR'\n***********************************************************************\n*                                                                     *\n*        ADDITIONAL INFORMATION CONCERNING THESE MODIFICATIONS        *\n*        CAN BE OBTAINED BY CONTACTING:                               *\n*                                                                     *\n*        KEITH E. MOE                                                 *\n*        AMDAHL CORPORATION                                           *\n*        CORPORATE COMPUTER CENTER                                    *\n*        MAIL STOP 201                                                *\n*        POST OFFICE BOX 3470                                         *\n*        1250 EAST ARQUES AVENUE                                      *\n*        SUNNYVALE, CALIFORNIA  94088-3470                            *\n*        (408) 746-6386                                               *\n*                                                                     *\n***********************************************************************\n         TITLE 'CONVERTER/INTERPRETER MODIFICATIONS'\n***********************************************************************\n*                                                                     *\n*        CONVERTER/INTERPRETER MODIFICATIONS                          *\n*        ********************* *************                          *\n*                                                                     *\n*        THIS VERSION OF DYNAMIC PROCLIB IS TOTALLY CONTAINED         *\n*        WITHIN MODULES IEFCNVPP, IEFCNVOP, AND IEFCNVXT AND DOES     *\n*        NOT REQUIRE ANY ACTUAL MODIFICATION TO IBM CODE (I.E.,       *\n*        SUPERZAPS).  IT IS, HOWEVER, LINK EDITED INTO THE            *\n*        CONVERTER LOAD MODULE (IEFVH1) FRONT-ENDING SEVERAL          *\n*        CONVERTER MODULE ENTRY POINTS.  WHILE THE NECESSARY          *\n*        SMP/E JCLIN IS SUPPLIED, THE FIRST TIME IT IS INSTALLED,     *\n*        A MANUAL LINK EDIT OF THE CONVERTER LOAD MODULE IS           *\n*        NECESSARY ORDER IN ORDER TO ALTER THE APPROPRIATE            *\n*        EXTERNAL REFERENCES.                                         *\n*                                                                     *\n*        THE THREE NEW MODULES, IEFCNVPP, IEFCNVOP, AND IEFCNVXT,     *\n*        ARE LINK EDITTED AS PART OF IEFVH1, THE JCL CONVERTER.       *\n*        THE LINK EDIT CHANGE STATEMENTS CAUSES IEFCNVPP TO BE        *\n*        INVOKED AS THE NEW ENTRY POINT OF IEFVH1 AND                 *\n*        TO FRONT END THE STATEMENT SCAN CSECT (IEFCNGST).            *\n*                                                                     *\n*        A SEPARATE LOAD MODULE, IEFCNVLS, CONTAINS DATA SET          *\n*        INCLUSION AND EXCLUSION LISTS AND CAN BE USED TO LIMIT       *\n*        THE DATA SETS THAT CAN BE USED AS DYNAMIC PROCLIB            *\n*        DATA SETS.  IEFCNVLS IS TOTALLY OPTIONAL.                    *\n*                                                                     *\n*        PREVIOUS VERSIONS OF THIS MODIFICATION REQUIRED A            *\n*        SUPERZAP IS TO MODULE IEFVDA IN LOAD MODULE IEFNB903.        *\n*        THE ZAP TO IEFVDA (IN THE INTERPRETER) WAS INSTALLED TO      *\n*        PREVENT A JOBPROC STATEMENT FROM CAUSING A MISPLACED DD      *\n*        STATEMENT JCL ERROR IN THE INTERPRETER.  THIS SUPERZAP       *\n*        IS NOT NECESSARY FOR THIS CODE, AS THE JOBPROC STATEMENTS    *\n*        NEVER MAKE IT OUT OF THE CONVERTER.  HOWEVER, IF THE         *\n*        INSTALLATION IS SHARING THE JES2 SPOOL WITH A VERSION 3      *\n*        MVS/ESA SYSTEM (OR LOWER), IT IS POSSIBLE FOR A JOB TO       *\n*        BE CONVERTED ON VERSION 3 AND ATTEMPT TO RUN ON VERSION 4,   *\n*        SO THAT THE SUPERZAP WOULD BE NECESSARY IN THAT CASE.        *\n*        ONCE ALL SYSTEMS HAVE BEEN CONVERTED TO VERSION 4,           *\n*        THE ZAP TO IEFVDA CAN BE REMOVED.                            *\n*                                                                     *\n*        NO SUPERZAP IS NECESSARY TO SUPPLY THE \"SYSPROC\"             *\n*        PARAMETER, AS THE CONVERTER DOES NOT ATTEMPT TO PROCESS      *\n*        THE JOBPROC DD STATEMENT INTO INTERNAL TEXT.                 *\n*                                                                     *\n*        WITH THE SETTING OF THE APPROPRIATE OPTION, THE MVS/ESA      *\n*        VERSION 4 JCLLIB STATEMENT CAN BE ENABLED WITHOUT THE        *\n*        USE OF A VERSION 4 JES.                                      *\n*                                                                     *\n***********************************************************************\n         TITLE 'DYNAMIC PROCLIB USER EXTERNALS'\n***********************************************************************\n*                                                                     *\n*        THE USER WISHING TO SUPPLY A DYNAMIC PROCLIB NEED ONLY       *\n*        CODE ONE OR MORE DD STATEMENTS (FOLLOWING THE NORMAL         *\n*        RULES OF CONCATENATION) WITH THE DD NAME OF \"JOBPROC\".       *\n*        THE JOBPROC DD MUST APPEAR BEFORE THE FIRST EXEC, IF,        *\n*        OR INCLUDE STATEMENT OF A JOB.  THE ONLY JCL PARAMETERS      *\n*        SUPPORTED ARE DSNAME AND SYSPROC.  USE OF OTHER JCL          *\n*        PARAMETERS IS IGNORED, BUT COULD CAUSE UNPREDICTABLE         *\n*        RESULTS IF CODED.  DSNAME IS MANDATORY.  SYSPROC IS          *\n*        OPTIONAL AND INDICATES THE CONCATENATION AFTER THE USER      *\n*        PROCLIBS (SYSPROC=YES), CONCATENATION BEFORE THE USER        *\n*        PROCLIBS (SYSPROC=FIRST), OR NON-CONCATENATION               *\n*        (SYSPROC=NO) OF THE SYSTEM PROCEDURE LIBRARIES WITH THE      *\n*        USER SPECIFIED PROCEDURE LIBRARIES.                          *\n*                                                                     *\n*        SUPPORT FOR UNCATALOGUED JOBPROC DATA SETS HAS BEEN          *\n*        ELIMINATED.                                                  *\n*                                                                     *\n***********************************************************************\n         TITLE 'CONTROL BLOCK MAPPINGS'\nIEFCNVPP CSECT ,                   CONTROL SECTION NAME\nIEFCNVPP AMODE 31\nIEFCNVPP RMODE ANY\n*\n         SPLEVEL SET=4             MVS/ESA VERSION 4 ONLY\n*\n         PUSH  PRINT\n         PRINT NOGEN\n*\n         CVT   DSECT=YES\n*\n         IEFCNPRM                  MAP THE NEW CONVERTER PARM LIST\n*\nCNPREXLN EQU   CNPRXEND-CNPREXIT   LENGTH OF COMPLETE EXIT AREA\nCNPRXELN EQU   CNPRXEND-CNPRXENT   LENGTH OF EXIT SUBSECTION\n*\nCNPRM    DSECT                     BACK TO THE ORIGINAL DSECT\n         ORG   CNPRM               MAP THE OLD CONVERTER PARM LIST\n         IEFNEL SUBCOM=C           OVER THE NEW PARM LIST (NEAT, HUH)\n*\n         IEFCNMB                   CONVERTER MESSAGE BUFFER\n*\n         IEFJMR                    JOB MANAGEMENT RECORD\n*\n         IEFZB4D0  ,               DYNAMIC ALLOCATION PARM LIST\nS99RBXLN EQU   *-S99RBX\n         AIF   (T'S99MSGL0 NE 'U').ZB4D0A\nS99MSGL0 EQU   0                   NULL SUPPRES MESSAGE FLAG IF NOT\n.ZB4D0A  ANOP\n*\n         IEFZB4D2  ,               DYNAMIC ALLOCATION TEXT KEYS\n*\n         IKJEFFDF  DFDSECT=YES     DAIRFAIL PARAMETER LIST\n*\n         DCBD  DSORG=PO,DEVD=DA\n*\n         IHASDWA DSECT=YES\n*\n         IHAPSA\n*\n         IHAASCB\n*\n         IKJTCB\n*\n         IEZJSCB\n*\nJCTDSECT DSECT\n         IEFAJCTB ,                MVS (NOT JES) JOB CONTROL TABLE\n*\nTIODSECT DSECT\n         IEFTIOT1 ,                TASK I/O TABLE\n*\nJFCBDSCT DSECT\n         IEFJFCBN ,                JOB FILE CONTROL BLOCK\n*\nUCBDSECT DSECT\n         IEFUCBOB ,                UNIT CONTROL BLOCK\n*\n         IEFJESCT                  JES CONTROL TABLE\n*\n         IEFZB505 LOCEPAX=YES      SWAREQ PARAMETER LIST\n*\n         IEFVKEYS                  INTERNAL TEXT KEYS\n*\n         IEFTXTFT                  INTERNAL TEXT HEADER\n*\n         POP  PRINT\n*\n         IEFCNFSA ,                CONVERTER SUBTASK FIRST SAVE AREA\n*\n         IEFCNOPT DSECT=YES        PROGRAM OPTIONS\n*\n         IEFCNPPW ,                DYNAMIC PROCLIB WORK AREA\n*\n         IEFCNMSG DSECT=YES        MESSAGE TABLE\n*\n         TITLE 'DYNAMIC PROCLIB REGISTER USAGE'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4                   NOT USED\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7                   NOT USED\nR8       EQU   8                   NOT USED\nR9       EQU   9                   NOT USED\nR10      EQU   10                  NOT USED\nR11      EQU   11                  NOT USED\nR12      EQU   12                  BASE REGISTER\nR13      EQU   13                  PRIMARY WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         TITLE 'IEFCNVPP - DYNAMIC PROCLIB INITIALIZATION'\n***********************************************************************\n*                                                                     *\n*        IEFCNVPP                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE IS USED AS A FRONT END TO THE CONVERTER,        *\n*        BECOMING THE NEW ENTRY POINT FOR THE CONVERTER.  IT          *\n*        ESTABLISHES THE DYNAMIC PROCLIB BASE ENVIRONMENT AND         *\n*        PASSES CONTROL THE TO ORIGINAL ENTRY POINT OF THE CONVERTER, *\n*        IEFCNINT.                                                    *\n*                                                                     *\n*        THIS ROUTINE OBTAINS THE DYNAMIC PROCLIB WORK AREA AND       *\n*        ANCHORS IT IN THE FIRST SAVE AREA OF THE TASK (POINTED TO    *\n*        TCBFSA).  SINCE MOST OF THIS SAVE AREA IS NOT USED FOR       *\n*        ANYTHING, IT IS A CONVENIENT PLACE TO PROVIDE AN ANCHOR      *\n*        THAT SUBSEQUENT ENTRIES TO DYNAMIC PROCLIB PROCESSING        *\n*        CAN LOCATE IT AND STILL REMAIN RE-ENTRANT.                   *\n*                                                                     *\n*        INPUT (FROM JES2/3):                                         *\n*              CONVERTER PARAMETER LIST (EITHER FORM) IN R1           *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              DYNAMIC PROCLIB WORK AREA (PPWDSECT) ANCHORED IN       *\n*              THE TASK'S FIRST SAVE AREA.                            *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              IEFCNINT (ORIGINAL CONVERTER ENTRY POINT)              *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER (JES2/3)                              *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFCNVPP CSECT ,                   CONTROL SECTION NAME\n         USING *,R15               TEMPORARY BASE\n         B     VPPSTM              BRANCH AROUND ID\n*\n         DC    AL1(VPPIDL)         LTH OF IDENTIFICATION PREFIX\nVPPID    DC    CL8'IEFCNVPP'       USER PROCLIB SUPPORT MODULE ID\nVPPVERSN DC    CL8'V4.1.1 '        CURRENT AMDAHL RELEASE NO.\nVPPSDATE DC    CL8'&SYSDATE'       LAST ASSEMBLY DATE\nVPPSTIME DC    CL8' &SYSTIME'      TIME OF LAST ASSEMBLY\nVPPCPYRT DC    C'COPYRIGHT 1991 BY AMDAHL CORP.'\nVPPIDL   EQU   *-VPPID             LENGTH OF IDENTIFICATION HEADER\n*\nVPPSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVPP,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R2,R1               SAVE THE ENTRY PARM ADDRESS\n*\n         LA    R0,PPWORKLN         LENGTH OF PROCLIB WORK AREA\n         GETMAIN RU,LV=(0),LOC=(BELOW,ANY),                            X\n               BNDRY=PAGE          GET THE PROCLIB WORK AREA\n         LR    R3,R1               SAVE IT FOR THE MOMENT\n*\n         LR    R0,R1               SET FOR MVCL\n         LA    R1,PPWORKLN         LENGTH OF MVCL\n         SLR   R15,R15             ZERO FROM LENGTH\n         MVCL  R0,R14              CLEAR THE WORK AREA\n*\n         ST    R3,8(,R13)          STORE FORWARD POINTER\n         ST    R13,4(,R3)          STORE BACKWARD POINTER\n         LR    R13,R3              SET NEW SAVE AREA ADDRESS\n         USING PPWDSECT,R13\n*\n         MVC   PPWPPWID,=A(PPWIDPPW)    SET EYECATCHER\n*\n         OI    PPWVPPFL,PPWVPPEX   INDICATE IEFCNVPP IS EXECUTING\n*\n         L     R15,PPWVPPCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVPPCN        STORE IT BACK\n*\n         ST    R13,PPWWORKA        SAVE THE ADDRESS OF THIS AREA\n         LA    R0,PPWORKLN         LOAD THE LENGTH\n         ST    R0,PPWWORKL         SAVE THE LENGTH\n*\n         ST    R2,PPWINTR1         STORE THE CONVERTER PARMS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET THE TCB ADDRESS AND THE FIRST SAVE AREA ADDRESS AND      *\n*        ANCHOR OUR WORK AREA IN IT FOR FUTURE REFERENCE.             *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,PSATOLD-PSA     LOAD TCB ADDRESS\n         ST    R15,PPWTCBAD        SAVE THE TCB ADDRESS\n         USING TCB,R15\n*\n         ICM   R1,15,TCBTIO        LOAD TIOT ADDRESS\n         ST    R1,PPWTIOTA         SAVE THE ADDRESS\n         BZ    VPPISMST            ASSUME MASTER IF NULL\n*\n         USING TIODSECT,R1\n         CLC   TIOCNJOB(6),=C'MSTJCL'   TEST IF MASTER'S TIOT\n         BE    VPPISMST            BRANCH IF SO\n         DROP  R1                  DONE WITH THE TIOT\n*\n         L     R1,PSAAOLD-PSA      LOAD ASCB ADDRESS\n         USING ASCB,R1\n         LH    R1,ASCBASID         LOAD THE ASID\n         CH    R1,=H'1'            CHECK FOR THE MASTER ADDRESS SPACE\n         BNE   VPPNOMST            BRANCH IF NOT\n         DROP  R1                  DONE WITH THE ASCB\n*\nVPPISMST OI    PPWENVIR,PPWEMSTR   INDICATE THIS IS THE MASTER\n*\nVPPNOMST DS    0H\n         L     R15,TCBFSA          POINT AT FIRST SAVE AREA\n         ST    R15,PPWFSAAD        SAVE THIS ADDRESS\n         USING FSADSECT,R15\n*\n         MVC   PPWFSAR2,FSAPPEYE   SAVE THE ORIGINAL CONTENTS\n         MVC   PPWFSAR3,FSAPPWAD   SAME HERE\n*\n         MVC   FSAPPEYE,=A(FSAPPEID)    SET THE EYECATCHER\n         ST    R13,FSAPPWAD        STORE THE WORK AREA ADDRESS\n         DROP  R15\n*\n         L     R15,CVTPTR          LOAD THE CVT ADDRESS\n         USING CVT,R15\n         TM    CVTOSLV0,CVTH4410   ARE WE RUNNING A VERSION 4 SYSTEM\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWENVIR,PPWEESA4   INDICATE WE ARE ON AN SP V4 SYSTEM\n         DROP  R15\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE FREQUENTLY USED ADDRESS REFERENCES            *\n*                                                                     *\n***********************************************************************\n*\n         L     R0,=A(IEFCNVDE)     LOAD OUR DYNALLOC ERROR ROUTINE ADDR\n         ST    R0,PPWCNVDE         STORE IN OUR WORK AREA\n*\n         L     R0,=A(IEFCNVKW)     LOAD OUR KEYWORD SCAN ROUTINE ADDR\n         ST    R0,PPWCNVKW         STORE IN OUR WORK AREA\n*\n         L     R0,=A(IEFCNVPD)     LOAD OUR PARM DELETE ROUTINE ADDR\n         ST    R0,PPWCNVPD         STORE IN OUR WORK AREA\n*\n         L     R0,=A(IEFCNVMS)     LOAD OUR MESSAGE ROUTINE ADDR\n         ST    R0,PPWCNVMS         STORE IN OUR WORK AREA\n*\n         L     R0,=V(IEFCNVXT)     LOAD OUR DATA EXTRACT ROUTINE ADDR\n         ST    R0,PPWCNVXT         STORE IN OUR WORK AREA\n*\n***********************************************************************\n*                                                                     *\n*        FLAG ALL THE SAVE AREAS FOR QUICK SPOTTING IN A DUMP         *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWVGSID,=A(PPWIDVGS)    SET EYECATCHER FOR IEFCNVGS\n*\n         MVC   PPWVXTID,=A(PPWIDVXT)    SET EYECATCHER FOR IEFCNVXT\n*\n         MVC   PPWVJPID,=A(PPWIDVJP)    SET EYECATCHER FOR IEFCNVJP\n*\n         MVC   PPWVEXID,=A(PPWIDVEX)    SET EYECATCHER FOR IEFCNVEX\n*\n         MVC   PPWVKWID,=A(PPWIDVKW)    SET EYECATCHER FOR IEFCNVKW\n*\n         MVC   PPWVPDID,=A(PPWIDVPD)    SET EYECATCHER FOR IEFCNVPD\n*\n         MVC   PPWVPSID,=A(PPWIDVPS)    SET EYECATCHER FOR IEFCNVPS\n*\n         MVC   PPWVCLID,=A(PPWIDVCL)    SET EYECATCHER FOR IEFCNVCL\n*\n         MVC   PPWVDEID,=A(PPWIDVDE)    SET EYECATCHER FOR IEFCNVDE\n*\n         MVC   PPWVMSID,=A(PPWIDVMS)    SET EYECATCHER FOR IEFCNVMS\n*\n         MVC   PPWVSTID,=A(PPWIDVST)    SET EYECATCHER FOR IEFCNVST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXTRACT KEY ADDRESSES FROM THE CONVERTER PARM LIST           *\n*                                                                     *\n***********************************************************************\n*\n         USING CNPRM,R2            CONVERTER PARAMETERS STILL HERE\n*\n         TM    CNPROPTS,CNPRNEW    TEST FOR NEW FORMAT PARM LIST\n         BZ    VPPOLDPM            BRANCH IF OLD FORMAT (NEL)\n*\n         LA    R1,CNPRPROC         GET ADDRESS OF CONVERT DCB ADDRESS\n         ST    R1,PPWPMDCB         SAVE THE PARM LIST ADDRESS\n         MVC   PPWCNDCB,CNPRPROC   SAVE THE ACTUAL ADDRESS\n*\n         LA    R1,CNPRXLST         GET ADDRESS OF CNV EXIT LIST ADDR\n         ST    R1,PPWPMTXT         SAVE THE PARM LIST ADDRESS\n         MVC   PPWCNTXT,CNPRXLST   SAVE THE ACTUAL ADDRESS\n*\n         MVC   PPWJMR,CNPRJMR      SAVE THE JMR ADDRESS\n*\n         B     VPPPRMDN            AND BRANCH AROUND \"OLD\" CODE\n*\nVPPOLDPM DS    0H\n         LA    R1,NELPROCB         GET ADDRESS OF CONVERT DCB ADDRESS\n         ST    R1,PPWPMDCB         SAVE THE PARM LIST ADDRESS\n         MVC   PPWCNDCB,NELPROCB   SAVE THE ACTUAL ADDRESS\n*\n         LA    R1,NELEXLST         GET ADDRESS OF CNV EXIT LIST ADDR\n         ST    R1,PPWPMTXT         SAVE THE PARM LIST ADDRESS\n         MVC   PPWCNTXT,NELEXLST   SAVE THE ACTUAL ADDRESS\n*\n         MVC   PPWJMR,NELJMR       SAVE THE JMR ADDRESS\n*\n         DROP  R2\n*\nVPPPRMDN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE ASSEMBLED OPTIONS                             *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,=V(IEFCNVOP)    LOAD OPTIONS ADDRESS\n         ST    R15,PPWCNVOP        STORE THIS FOR GOOD MEASURE\n         USING OPTDSECT,R15\n*\n         XC    PPWGENWK(256),PPWGENWK   CLEAR FOR TRT TABLE\n         MVI   PPWGENWK+C' ',X'FF' FLAG THE BLANK A-ROONEY\n*\n***********************************************************************\n*                                                                     *\n*        JOBPROC DD NAME                                              *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWJBPRC,OPTJBPRC   COPY JOBPROC DDNAME\n         LA    R1,L'PPWJBPRC       MAXIMUM LENGTH OF JOBPROC DDNAME\n         TRT   PPWJBPRC,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWJBPRC         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWJBPRL         STORE DDNAME LENGTH\n*\n         LTR   R1,R1               TEST IF JOBPROC DDNAME IS NULL\n         BZ    *+8                 BRANCH IF NULL\n         OI    PPWOPTN1,PPWO1JPR   INDICATE WE PROCESS JOBPROC\n*\n***********************************************************************\n*                                                                     *\n*        SYSPROC KEYWORD ON JOBPROC DD STATEMENT                      *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWSYSPR,OPTSYSPR   COPY SYSPROC KEYWORD\n         LA    R1,L'PPWSYSPR       MAXIMUM LENGTH OF SYSPROC KEYWORD\n         TRT   PPWSYSPR,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWSYSPR         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWSYSPL         STORE KEYWORD LENGTH\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STARTED TASK JCLLIB KEYWORD PARAMETER                        *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWSTCKW,OPTSTCKW   COPY STARTED TASK JCLLIB KEYWORD\n         LA    R1,L'PPWSTCKW       MAXIMUM LENGTH OF STC JCLLIB KEYWD\n         TRT   PPWSTCKW,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWSTCKW         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWSTCKL         STORE KEYWORD LENGTH\n*\n         LTR   R1,R1               TEST IF STC JCLLIB IS NULL\n         BZ    *+8                 BRANCH IF NULL\n         OI    PPWOPTN1,PPWO1STC   INDICATE WE HANDLE STC JCLLIBS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SWA PARAMETER ON THE JOB STATEMENT                           *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWSWAKW,OPTSWAKW   COPY SWA KEYWORD PARAMETER\n         LA    R1,L'PPWSWAKW       MAXIMUM LENGTH OF SWA KEYWORD\n         TRT   PPWSWAKW,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWSWAKW         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWSWAKL         STORE KEYWORD LENGTH\n*\n         LTR   R1,R1               TEST IF SWA KEYWORD IS NULL\n         BZ    *+8                 BRANCH IF NULL\n         OI    PPWOPTN1,PPWO1SWA   INDICATE WE HANDLE SWA PARAMETER\n*\n***********************************************************************\n*                                                                     *\n*        SWA DDNAMES                                                  *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWSWAAD,OPTDDSWA   COPY SWAABOVE DDNAME\n         LA    R1,L'PPWSWAAD       MAXIMUM LENGTH OF SWA DDNAME\n         TRT   PPWSWAAD,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWSWAAD         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWSWAAL         STORE DDNAME LENGTH\n*\n         MVC   PPWSWABD,OPTDDSWB   COPY SWABELOW DDNAME\n         LA    R1,L'PPWSWABD       MAXIMUM LENGTH OF SWA DDNAME\n         TRT   PPWSWABD,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWSWAAD         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWSWABL         STORE DDNAME LENGTH\n*\n         LTR   R1,R1               TEST IF SWABELOW DDNAME IS NULL\n         BZ    *+16                BRANCH IF NULL\n         ICM   R1,3,PPWSWAAL       LOAD SWAABOVE DDNAME LENGTH\n         BZ    *+8                 BRANCH IF NULL\n         OI    PPWOPTN1,PPWO1SDD   INDICATE WE HANDLE SWA DDNAMES\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MESSAGE NUMBER PREFIX                                        *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWMSGPF,OPTMSGPF   COPY MESSAGE NUMBER PREFIX\n         LA    R1,L'PPWMSGPF       MAXIMUM LENGTH OF MESSAGE ID PREFIX\n         TRT   PPWMSGPF,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWMSGPF         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWMSGPL         STORE MESSAGE PREFIX LENGTH\n*\n***********************************************************************\n*                                                                     *\n*        INCLUSION/EXCLUSION MODULE NAME                              *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWDSNLS,OPTDSNLS   DATA SET INCL/EXCL MODULE NAME\n         LA    R1,L'PPWDSNLS       MAXIMUM LENGTH OF MODULE NAME\n         TRT   PPWDSNLS,PPWGENWK   SCAN FOR A BLANK\n         BZ    *+10                BRANCH IF FULL LENGTH\n         LA    R2,PPWDSNLS         POINT AT FIRST CHARACTER\n         SR    R1,R2               CALCULATE LENGTH\n*\n         STH   R1,PPWDSNLL         STORE MODULE NAME LENGTH\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET THE MESSAGE SUPPRESSION OPTION                           *\n*                                                                     *\n***********************************************************************\n*\n         CLI   OPTMSGSP,C'Y'       DO WE WANT TO ALTER THE MESSAGE SUPP\n         BNE   *+8                 BRANCH IF NOT\n         OI    PPWOPTN1,PPWO1MSP   SUPPRESS THE MESSAGES\n*\n***********************************************************************\n*                                                                     *\n*        SET THE JES LEVEL CHANGE OPTION                              *\n*                                                                     *\n***********************************************************************\n*\n         CLI   OPTJESLV,C'Y'       DO WE WANT TO ALTER THE JES LEVEL\n         BNE   *+8                 BRANCH IF NOT\n         OI    PPWOPTN1,PPWO1JLV   ALTER THE JES LEVEL WHEN POSSIBLE\n*\n***********************************************************************\n*                                                                     *\n*        SET THE DEBUGGING OPTION                                     *\n*                                                                     *\n***********************************************************************\n*\n         CLI   OPTDEBUG,C'N'       CHECK FOR DEBUG=NO\n         BE    *+8                 BRANCH IF SO\n         OI    PPWOPTN1,PPWO1DBG   THIS IS HOW DEBUGGING IS TURNED ON\n*\n         TM    PPWENVIR,PPWEESA4   ARE WE RUNNING UNDER SP V4 BCP\n         BO    *+8                 BRANCH IF SO\n         OI    PPWOPTN1,PPWO1DBG   TURN ON DEBUGGING IF NOT\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET THE BATCH JOB SYSPROC DEFAULT                            *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,OPTSPRJB         POINT AT BATCH JOB SYSPROC DEFAULT\n         BAL   R14,VPPSYSDF        GO CHECK DEFAULT\n         B     VPPSYSJY            RETURN 0(R14) SYSPROC=YES\n         B     VPPSYSJN            RETURN 4(R14) SYSPROC=NO\n         B     VPPSYSJF            RETURN 8(R14) SYSPROC=FIRST\n*\nVPPSYSJY OI    PPWSPRDF,PPWSPRJY   SET BATCH DEFAULT SYSPROC=YES\n         B     VPPSYSJD\n*\nVPPSYSJN NI    PPWSPRDF,255-PPWSPRJY-PPWSPRJF BATCH DEFAULT SYSPROC=NO\n         B     VPPSYSJD\n*\nVPPSYSJF OI    PPWSPRDF,PPWSPRJY   SET BATCH DEFAULT SYSPROC=YES\n         OI    PPWSPRDF,PPWSPRJF   SET BATCH DEFAULT SYSPROC=FIRST\n         B     VPPSYSJD\n*\nVPPSYSJD DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET THE TIME SHARING USER SYSPROC DEFAULT                    *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,OPTSPRTS         POINT AT TSO USER SYSPROC DEFAULT\n         BAL   R14,VPPSYSDF        GO CHECK DEFAULT\n         B     VPPSYSTY            RETURN 0(R14) SYSPROC=YES\n         B     VPPSYSTN            RETURN 4(R14) SYSPROC=NO\n         B     VPPSYSTF            RETURN 8(R14) SYSPROC=FIRST\n*\nVPPSYSTY OI    PPWSPRDF,PPWSPRTY   SET TSO DEFAULT SYSPROC=YES\n         B     VPPSYSTD\n*\nVPPSYSTN NI    PPWSPRDF,255-PPWSPRTY-PPWSPRTF TSO DEFAULT SYSPROC=NO\n         B     VPPSYSTD\n*\nVPPSYSTF OI    PPWSPRDF,PPWSPRTY   SET TSO DEFAULT SYSPROC=YES\n         OI    PPWSPRDF,PPWSPRTF   SET TSO DEFAULT SYSPROC=FIRST\n         B     VPPSYSTD\n*\nVPPSYSTD DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET THE STARTED TASK SYSPROC DEFAULT                         *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,OPTSPRST         POINT AT STC SYSPROC DEFAULT\n         BAL   R14,VPPSYSDF        GO CHECK DEFAULT\n         B     VPPSYSSY            RETURN 0(R14) SYSPROC=YES\n         B     VPPSYSSN            RETURN 4(R14) SYSPROC=NO\n         B     VPPSYSSF            RETURN 8(R14) SYSPROC=FIRST\n*\nVPPSYSSY OI    PPWSPRDF,PPWSPRSY   SET STC DEFAULT SYSPROC=YES\n         B     VPPSYSSD\n*\nVPPSYSSN NI    PPWSPRDF,255-PPWSPRSY-PPWSPRSF STC DEFAULT SYSPROC=NO\n         B     VPPSYSSD\n*\nVPPSYSSF OI    PPWSPRDF,PPWSPRSY   SET STC DEFAULT SYSPROC=YES\n         OI    PPWSPRDF,PPWSPRSF   SET STC DEFAULT SYSPROC=FIRST\n         B     VPPSYSSD\n*\nVPPSYSSD DS    0H\n*\n         DROP  R15\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NOW SET THE ACTUAL DEFAULT BASED ON THE ENVIRONMENT          *\n*                                                                     *\n***********************************************************************\n*\n         ICM   R1,15,PPWJMR        LOAD THE JMR ADDRESS\n         BZ    VPPSYSSS            ASSUME STARTED TASK IF NONE\n         USING JMR,R1\n*\n         CLI   JMRCLASS,X'D0'      CHECK FOR STARTED TASK\n         BE    VPPSYSSS            BRANCH IF SO\n         CLI   JMRCLASS,X'E0'      CHECK FOR TSO USER\n         BE    VPPSYSTS            BRANCH IF SO\n*\n         DROP  R1\n*\nVPPSYSJS DS    0H\n         OI    PPWENVIR,PPWEJOB    SET BATCH JOB\n*\n         TM    PPWSPRDF,PPWSPRJY   TEST FOR SYSPROC=YES\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSP   INDICATE SYSPROC=YES\n*\n         TM    PPWSPRDF,PPWSPRJF   TEST FOR SYSPROC=FIRST\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSF   INDICATE SYSPROC=FIRST\n*\n         B     VPPSYSDN            AND WE ARE DONE WITH SYSPROC OPTIONS\n*\nVPPSYSTS DS    0H\n         OI    PPWENVIR,PPWETSU    SET TSO USER\n*\n         TM    PPWSPRDF,PPWSPRTY   TEST FOR SYSPROC=YES\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSP   INDICATE SYSPROC=YES\n*\n         TM    PPWSPRDF,PPWSPRTF   TEST FOR SYSPROC=FIRST\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSF   INDICATE SYSPROC=FIRST\n*\n         B     VPPSYSDN            AND WE ARE DONE WITH SYSPROC OPTIONS\n*\nVPPSYSSS DS    0H\n         OI    PPWENVIR,PPWESTC    SET STARTED TASK\n*\n         TM    PPWSPRDF,PPWSPRSY   TEST FOR SYSPROC=YES\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSP   INDICATE SYSPROC=YES\n*\n         TM    PPWSPRDF,PPWSPRSF   TEST FOR SYSPROC=FIRST\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG4,PPW4SYSF   INDICATE SYSPROC=FIRST\n*\n         B     VPPSYSDN            AND WE ARE DONE WITH SYSPROC OPTIONS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DECODE THE DEFAULT SYSPROC OPTION (SUBROUTINE)               *\n*                                                                     *\n***********************************************************************\n*\nVPPSYSDF DS    0H\n         CLI   0(R1),C'Y'          CHECK FOR SYSPROC=YES\n         BE    0(,R14)             BRANCH IF YES\n*\n         CLI   0(R1),C'L'          CHECK FOR SYSPROC=LAST\n         BE    0(,R14)             BRANCH IF LAST\n*\n         CLI   0(R1),C'A'          CHECK FOR SYSPROC=AFTER\n         BE    0(,R14)             BRANCH IF AFTER\n*\n         CLI   0(R1),C'F'          CHECK FOR SYSPROC=FIRST\n         BE    8(,R14)             BRANCH IF FIRST\n*\n         CLI   0(R1),C'B'          CHECK FOR SYSPROC=BEFORE\n         BE    8(,R14)             BRANCH IF BEFORE\n*\n         CLI   0(R1),C'N'          CHECK FOR SYSPROC=NO\n         BE    4(,R14)             BRANCH IF NO\n*\n         B     0(,R14)             ASSUME SYSPROC=YES IF NOT VALID\n*\nVPPSYSDN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIX THE MESSAGE LEVEL IF NOT IN DEBUGGING MODE               *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWWTOMD(PPWWTOML),VPPWTOM1 INIT THE TRACING WTO LIST\n*\n         TM    PPWOPTN1,PPWO1DBG   TEST FOR DEBUGGING\n         BO    VPPMSGLV            BRANCH IF SO\n*\n         MVC   PPWWTOMD(PPWWTOML),VPPWTOMD INIT THE NORMAL WTO LIST\n*\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VPPMSGLV            LEAVE ALONE IF SO\n*\n         TM    PPWOPTN1,PPWO1MSP   DO WE WANT TO SUPPRESS THE MESSAGES\n         BZ    VPPMSGLV            LEAVE ALONE IF NOT\n*\n         L     R2,PPWTCBAD         LOAD THE TCB ADDRESS\n         USING TCB,R2\n         ICM   R2,15,TCBJSTCB      LOAD THE JOB STEP TCB ADDRESS\n         BZ    VPPMSGLV            SKIP THIS IF CONTROL BLOCK MISSING\n         ICM   R2,15,TCBJSCB\n         BZ    VPPMSGLV            SKIP THIS IF CONTROL BLOCK MISSING\n         USING IEZJSCB,R2\n         ICM   R2,15,JSCBJCT       LOAD THE JCT ADDRESS\n         BZ    VPPMSGLV            SKIP THIS IF CONTROL BLOCK MISSING\n         LA    R2,16(,R2)          INCREMENT PAST HEADER\n         USING INJMJCT,R2\n*\n         MODESET KEY=ZERO\n*\n         MVC   PPWMSGLV,JCTJMGLV   SAVE THE CURRENT MESSAGE LEVEL\n         OI    PPWFLAG2,PPW2MSGL   INDICATE WE CHANGED THE MSGLEVEL\n         NI    JCTJMGLV,X'0F'      FORCE MSGCLASS=(0,0)\n*\n         MODESET KEY=NZERO\n*\n         DROP  R2\n*\nVPPMSGLV DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOAD THE INCLUSION/EXCLUSION MODULE                          *\n*                                                                     *\n***********************************************************************\n*\n         CLI   PPWDSNLS,C' '       DO WE HAVE AN EXCLUSION MODULE\n         BE    VPPNODSL            BRANCH IF NOT\n*\n         LOAD  EPLOC=PPWDSNLS,ERRET=VPPERDSL LOAD THE ERROR MODULE\n*\n         ST    R0,PPWDSNAD         STORE THE LOADED ADDRESS\n         OI    PPWFLAG3,PPW3DSNL   INDICATE IT'S BEEN LOADED\n         B     VPPNODSL            AND PUSH ON\n*\nVPPERDSL LA    R0,MSGNO848         POINT AT ERROR MESSAGE NUMBER\n         LA    R1,PPWDSNLL         POINT AT LENGTH\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             ISSUE MESSAGE\n*\nVPPNODSL DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT OUR DCB AND EXTRACT THE DATA SET NAMES FROM        *\n*        THE DCB PASSED TO THE CONVERTER.                             *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWDCB(VPPDCBML),VPPDCBMD INIT DCB AREA\n         LA    R1,PPWDCB           POINT AT OUR DCB\n         ST    R1,PPWPPDCB         SAVE IT'S ADDRESS\n*\n         MVC   PPWDDSUF,VPPDDPAT   SET THE DDNAME SUFFIXES\n*\n         UNPK  PPWGENWK(9),PPWTCBAD(5)  UNPACK THE TCB ADDRESS\n         TR    PPWGENWK(8),PPWHEXTR     CONVERT TO PRINTABLE HEX\n*\n         MVI   PPWDDBSE,C'P'       SET DDNAME PREFIX CHARACTER\n         MVC   PPWDDBSE+1(6),PPWGENWK+2 MOVE THE TCB ADDRESS\n         MVI   PPWDDBSE+7,C' '     BLANK THE LAST CHARACTER\n*\n***********************************************************************\n*                                                                     *\n*        ALTER THE BLOCKSIZE IN THE PASSED DCB TO THE MAXIMUM         *\n*        POSSIBLE, SO THAT THE CONVERTER WILL OBTAIN A LARGE          *\n*        BUFFER.  THIS MEANS WE DON'T HAVE TO WORRY ABOUT THE         *\n*        BLOCKSIZE OF ANY USER SPECIFIED PROCLIB DATA SET.            *\n*                                                                     *\n***********************************************************************\n*\n         ICM   R1,15,PPWCNDCB      LOAD THE CONVERTER'S DCB ADDRESS\n         BZ    VPPSYMSG            SKIP A LOT OF STUFF IF NULL\n*\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VPPSYMSG            SKIP A LOT OF STUFF IF SO\n*\n         USING IHADCB,R1\n         MVC   DCBBLKSI,PPWDCB+DCBBLKSI-IHADCB\n         DROP  R1\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIND THE TIOT ENTRY FOR THE SYSTEM PROCLIB AND EXTRACT       *\n*        THE ADDRESSES OF THE JFCBS FOR EACH SYSTEM PROCLIB DATA SET. *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWSWRPL(8),VPPSWARQ     INITIALIZE SWAREQ PARM LIST\n         LA    R1,PPWSWREA         POINT AT EPA POINTER\n         ST    R1,PPWSWRPL         STORE IN PARAMETER LIST\n         XC    PPWSWREP,PPWSWREP   CLEAR THE SWA EPA\n         LA    R1,PPWSWREP         POINT AT SWA EPA\n         ST    R1,PPWSWREA         STORE IN POINTER\n*\n         SLR   R15,R15             ZERO FOR INSERTS\n         SLR   R2,R2               ZERO FOR COUNTING\n*\n         L     R1,PPWCNDCB         LOAD CURRENT PROCLIB DCB ADDRESS\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN   IS THIS DCB OPEN\n         BZ    VPPSYSMS            IF NOT, SKIP COUNTING DATA SETS\n*\n         SLR   R3,R3               CLEAR FOR INSERT\n         ICM   R3,3,DCBTIOT        LOAD THE DCB TIOT OFFSET\n         DROP  R1\n*\n         A     R3,PPWTIOTA         ADD THE TIOT ADDRESS\n         USING TIOENTRY,R3\n*\n         MVC   PPWSYSDD,TIOEDDNM   SAVE THIS DDNAME FOR POSTERITY\n*\nVPPSYCNT DS    0H\n         TM    TIOEJFCB+2,X'01'    IS THE JFCB ADDRESS REALLY A TOKEN\n         BO    VPPSYS31            BRANCH IF SO\n         SLR   R1,R1               CLEAR FOR THE INSERT\n         ICM   R1,7,TIOEJFCB       LOAD THE ADDRESS\n         LA    R1,16(,R1)          POINT AT THE ACTUAL JFCB\n         B     VPPSYSTO            AND GO STORE THIS ADDRESS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE JFCB IS ABOVE THE LINE, SO USE SWAREQ TO OBTAIN          *\n*        THE ACTUAL ADDRESS.                                          *\n*                                                                     *\n***********************************************************************\n*\nVPPSYS31 DS    0H\n         STCM  R1,7,SWVA-ZB505+PPWSWREP STORE THE SVA\n         SWAREQ MF=(E,PPWSWRPL),UNAUTH=YES\n         LTR   R15,R15             TEST IF SUCCESSFUL\n         BNZ   VPPSYMSG            BRANCH IF NOT GOOD\n*\n         L     R1,SWBLKPTR-ZB505+PPWSWREP LOAD THE ACTUAL SWA BLK ADDR\n*\nVPPSYSTO DS    0H\n         LR    R14,R2              GET PROCLIB COUNT (-1)\n         SLL   R14,2               MULTIPLY BY 4\n         ST    R1,PPWSYSDS(R14)    STORE THE JFCB ADDRESS\n*\n         LA    R2,1(,R2)           BUMP SYSTEM PROCLIB COUNT\n         IC    R15,TIOELNGH        LOAD THE LENGTH\n         AR    R3,R15              INCREMENT THE ADDRESS\n         CLI   TIOELNGH,0          CHECK FOR LAST ENTRY\n         BE    *+12                SKIP CONCATENATION LOOP IF SO\n         CLI   TIOEDDNM,C' '       CHECK FOR CONCATENATION\n         BE    VPPSYCNT            LOOP IF IT IS\n*\n         DROP  R3                  DONE WITH TIOT ENTRY\n*\n         LA    R0,PPWCONCM         SET MAXIMUM PROCLIBS\n         SR    R0,R2               DEDUCT FOR SYSTEM PROCLIBS\n         STH   R2,PPWJPSYS         SET THE SYSTEM PROCLIB COUNT\n         STH   R0,PPWJPMAX         SET THE MAX USER PROCLIB COUNT\n         B     VPPSYSOK            AND FINISH INITIALIZATION\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE SYSTEM PROCLIB WAS NOT AVAILABLE.  IGNORE IF IT IS       *\n*        THE MASTER ADDRESS SPACE.  ISSUE A MESSAGE OTHERWISE.        *\n*                                                                     *\n***********************************************************************\n*\nVPPSYMSG DS    0H\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VPPSYSMS            IF SO, DON'T ISSUE MESSAGE\n*\n         LA    R0,MSGNO850         LOAD THE MESSAGE NUMBER\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             GO ISSUE MESSAGE\n*\nVPPSYSMS DS    0H\n         OI    PPWFLAG3,PPW3NOSY   INDICATE SYSPROC UNAVAILABLE\n         LA    R0,PPWCONCM         SET MAXIMUM PROCLIBS\n         STH   R0,PPWJPMAX         STASH THE MAX\n*\nVPPSYSOK DS    0H\n         SR    R0,R0               CLEAR R0\n         STH   R0,PPWJPCNT         INITIALIZE CONCATENATION COUNT\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE DYNAMIC ALLOCATION PARAMETERS                 *\n*                                                                     *\n***********************************************************************\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET ADDRESSABILITY TO DARB\n*\n         ST    R15,PPWDARGL        SET PTR TO DARB IN PARM LIST->\n         OI    PPWDARGL,S99RBPND   SET END OF PARM LIST INDICATOR\n*\n         XC    PPWDARB(L'PPWDARB),PPWDARB CLEAR ALLOC REQUEST BLOCK\n         MVI   S99RBLN,L'PPWDARB   SET LENGTH OF REQUEST BLOCK\n*\n         MVI   S99FLG11,S99ONCNV+S99NOCNV+S99NOMNT SET FLAGS 1\n*              NO CONVERTIBLE, NO EXISTING ALLOC, NO VOLUME MOUNT\n         TM    PPWOPTN1,PPWO1MSP   TEST IF MESSAGE SUPPRESSION WANTED\n         BZ    *+8                 BRANCH IF NOT\n         OI    S99FLG11,S99MSGL0   SET SUPPRESS MESSAGE FLAGS\n*\n         MVI   S99FLG21,S99NORES   SET NO DATA SET ENQUEUE FLAGS 2\n*\n         LA    R0,PPWDATXT         -> DYNAMIC ALLOCATION TEXT\n         ST    R0,S99TXTPP         SET TEXT LIST PTR IN DARB\n*\n         DROP  R15\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE DYNAMIC ALLOCATION TEXT UNITS                 *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,1                GET A NICE CONSTANT\n*\n         LA    R0,DALDDNAM         GET DDNAME KEY\n         STH   R0,PPWDDNMK         SET DDNAME KEY\n         STH   R1,PPWDDNM#         SET NUMBER OF OPERANDS\n         LA    R0,8                GET MAX DDNAME LENGTH\n         STH   R0,PPWDDNML         SET DDNAME LENGTH\n*\n         LA    R0,DALRTORG         GET RETURN DSORG KEY\n         STH   R0,PPWRTDSK         SET RETURN DSORG KEY\n         STH   R1,PPWRTDS#         SET NUMBER OF OPERANDS\n         LA    R0,2                GET DSORG LENGTH\n         STH   R0,PPWRTDSL         SET DSORG LENGTH\n*\n         LA    R0,DALDSNAM         GET DSNAME TEXT KEY\n         STH   R0,PPWDSNMK         SET DSNAME TEXT KEY\n         STH   R1,PPWDSNM#         SET NUMBER OF OPERANDS\n*\n         LA    R0,DALSTATS         GET STATUS DISP KEY\n         STH   R0,PPWDISPK         SET STATUS DISP KEY\n         STH   R1,PPWDISP#         SET NUMBER OF OPERANDS\n         STH   R1,PPWDISPL         SET LENGTH OF DISP CODE\n         MVI   PPWDISP,X'08'       SET DISP TO \"SHR\"\n*\n         LA    R0,DALCLOSE         GET FREE=CLOSE KEY\n         STH   R0,PPWCLOSK         SET FREE=CLOSE KEY\n         XC    PPWCLOS#,PPWCLOS#   SET NUMBER OF OPERANDS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE DYNAMIC CONCATENTAION PARAMETERS              *\n*                                                                     *\n***********************************************************************\n*\n         LA    R0,DCCDDNAM         GET CONCATENATE DDNAME KEY\n         STH   R0,PPWCONCK         SET CONCATENATE DDNAME KEY\n*\n         LA    R15,PPWCONCD        POINT AT FIRST CONCAT DDNAME\n         LA    R14,PPWCONCM        GET MAXIMUM NUMBER OF DDNAMES\n         LA    R0,8                GET THE DDNAME LENGTH\n*\nVPPCONCL STH   R0,0(,R15)          STORE THE LENGTH\n         LA    R15,L'PPWCONCD(,R15)     INCREMENT TO NEXT DDNAME\n         BCT   R14,VPPCONCL        LOOP THROUGH THE CONCATENATION LIST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE DAIRFAIL PARAMETER LIST                            *\n*                                                                     *\n***********************************************************************\n*\n         LA    R15,PPWDFPRM        -> DAIRFAIL PARM LIST\n         USING DFDSECTD,R15        MAKE IT ADDRESSABLE\n*\n         LA    R1,PPWDARB          -> DYNAMIC ALLOCATE RB\n         ST    R1,DFS99RBP         SET IN DFPL\n*\n         LA    R1,PPWDFRCD         -> RETURN CODE HOLDING AREA\n         ST    R1,DFRCP            SET IN DFPL\n*\n         L     R1,CVTPTR           LOAD THE CVT ADDRESS\n         USING CVT,R1\n         LA    R1,CVTEFF02         GET ADDRESS OF IKJEFF02 ADDRESS\n         ST    R1,DFJEFF02         SET THIS ADDRESS IN PARM LIST\n         DROP  R1\n*\n         LA    R1,PPWDFIDN         -> DAIRFAIL IDENTIFICATION NO.\n         ST    R1,DFIDP            SET IN DFPL\n         OI    DFIDP,X'80'         FLAG END OF PARM LIST\n*\n         XC    DFCPPLP,DFCPPLP     CLEAR CPPL POINTER\n*\n         LA    R1,50               INDICATE SVC 99 ERROR\n         STH   R1,PPWDFIDN          IN DAIRFAIL PARM LIST\n*\n         OI    PPWDFIDN,DFWTP      INDICATE WTP REQUEST\n*\n         DROP  R15\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLEAN UP AFTER A PREVIOUS CONVERTER FAILURE                  *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VPPCLNDN            IF SO, DON'T ATTEMPT CLEANUP\n*\n         L     R1,PPWTIOTA         GET THE TIOT ADDRESS\n         USING TIODSECT,R1         SET UP ADDRESSIBILITY\n*\n         SLR   R15,R15             ZERO FOR INSERTS\n*\nVPPCLNL1 CLI   TIOELNGH,0          CHECK FOR END OF TIOT\n         BE    VPPCLNDN            BRANCH IF NAME NOT FOUND\n         CLC   TIOEDDNM(7),PPWDDBSE     CHECK FOR LEFT OVER DDNAME\n         BE    VPPCLNUP            IF FOUND, WE HAVE TO CLEAN UP\n*\n         IC    R15,TIOELNGH        LOAD THE LENGTH\n         AR    R1,R15              INCREMENT ADDRESS\n         B     VPPCLNL1            CONTINUE TIOT SCAN\n*\nVPPCLNUP DS    0H                  NEED TO CLEAN UP LEFTOVERS\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET DARB ADDRESSABILITY\n         MVI   S99VERB,S99VRBDC    INDICATE DE-CONCAT REQUEST\n         LA    R15,PPWDATXT        -> TEXT UNIT PTR SLOTS\n*\n         USING S99TUPL,R15         GET TEXT PTR ADDRESSABILITY\n         USING S99TUNIT,R14        GET TEXT UNIT ADDRESSABILITY\n*\n         LA    R14,PPWCONCK        -> DE-CONCATENATE TEXT UNIT\n         LA    R0,DDCDDNAM         GET DE-CONCATENATE KEY\n         STH   R0,S99TUKEY         SET DE-CONCATENATE KEY\n         LA    R0,1                GET THE NUMBER OF DDNAMES\n         STH   R0,S99TUNUM         SET NO. OF DDNAMES\n         MVC   S99TUPAR(8),TIOEDDNM     SET THE FOUND DDNAME\n         ST    R14,S99TUPTR        SET PTR TO DE-CONC TEXT UNIT\n         OI    S99TUPTR,S99TUPLN   FLAG END OF TEXT UNIT PTR'S\n*\n         DROP  R1,R14,R15\n*\n         LA    R1,PPWDARGL         -> DYNAMIC ALLOC PARM PTR\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                DE-CONCATENATE PROCLIB'S\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         EJECT\n         LA    R0,DCCDDNAM         GET CONCATENATE DDNAME KEY\n         STH   R0,PPWCONCK         REPAIR CONCATENATE DDNAME KEY\n*\n         LA    R2,PPWDDSUF         POINT AT DDNAME SUFFIX STRING\n         LA    R3,PPWCONCM         GET MAXIMUM CONCATENATIONS\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET DARB ADDRESSABILITY\n         MVI   S99VERB,S99VRBUN    INDICATE UNALLOC REQUEST\n         LA    R15,PPWDATXT        -> TEXT UNIT PTR SLOTS\n*\n         USING S99TUPL,R15         GET TEXT PTR ADDRESSABILITY\n         USING S99TUNIT,R14        GET TEXT UNIT ADDRESSABILITY\n*\n         LA    R14,PPWDDNMK        -> DDNAME TEXT UNIT\n         LA    R0,DUNDDNAM         SET DDNAME TEXT KEY\n         STH   R0,PPWDDNMK         SET DDNAME TEXT KEY\n*\n         ST    R14,S99TUPTR        SET PTR TO DDNAME TEXT UNIT\n         OI    S99TUPTR,S99TUPLN   FLAG END OF TEXT UNIT PTR'S\n*\n         MVC   S99TUPAR(8),PPWDDBSE     MOVE THE DDNAME BASE\n*\n         DROP  R15\n*\nVPPCLNDL DS    0H\n         MVC   S99TUPAR+7(1),0(R2) MOVE THE DDNAME SUFFIX\n         DROP  R14\n*\n         LA    R1,PPWDARGL         -> DYNAMIC ALLOC PARM PTR\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                FREE A PROCLIB DATA SET\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LA    R2,1(,R2)           INCREMENT THE SUFFIX POINTER\n         BCT   R3,VPPCLNDL         LOOP THROUGH DEALLOCATION\n*\n         LA    R0,DALDDNAM         GET DDNAME KEY\n         STH   R0,PPWDDNMK         REPAIR DDNAME KEY\n*\nVPPCLNDN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RECONSTRUCT THE INTERNAL TEXT EXIT LIST                      *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VPPNPOST            DON'T CHANGE ANYTHING IF SO\n*\n         ICM   R1,15,PPWCNTXT      LOAD ADDRESS OF PASSED TXT EXIT LIST\n         BZ    VPPNPOST            IF NONE, THERE IS NO INTERCEPT\n         USING CNPREXIT,R1\n*\n         MVC   PPWEXLST,CNPREXIT   SAVE A COPY OF THIS LIST\n*\n         MVC   PPWPPLST,CNPREXIT   MAKE A COPY TO MODIFY\n         LA    R1,PPWPPLST         POINT AT OUR COPY\n         ST    R1,PPWPPTXT         SAVE OUR ADDRESS\n*\n         L     R0,=A(IEFCNVPS+X'80000000') LOAD OUR POST SCAN EXIT ADDR\n         ST    R0,CNPREXAD         STORE OUR ADDRESS\n         MVI   CNPRLKID,CNPRXADD   INDICATE A 31-BIT ADDRESS\n*\n         L     R15,PPWPMTXT        POINT AT PARAMETER LIST\n         ST    R1,0(,R15)          MODIFY THE PARAMETER LIST\n*\n         OI    PPWFLAG2,PPW2PSEI   INDICATE INTERCEPT IS IN PLACE\n*\n         DROP  R1\n*\nVPPNPOST DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PASS CONTROL TO THE ORIGINAL CONVERTER ENTRY POINT           *\n*                                                                     *\n***********************************************************************\n*\n         OI    PPWFLAG3,PPW3INIT   INDICATE CNVPP HAS FINISHED INIT\n*\n         NI    PPWVPPFL,255-PPWVPPEX    TURN OFF IEFCNVPP EXECUTING\n         OI    PPWCFLG1,PPWC1INT   INDICATE WE ARE GOING TO IEFCNINT\n*\n         L     R1,PPWINTR1         COPY THE ORIGINAL PARM ADDRESS\n         L     R15,=V(IEFCNINT)    LOAD ADDRESS OF CONVERTER ENTRY PT\n         BALR  R14,R15             AND GO THE THE REAL CONVERTER\n*\n         ST    R15,PPWINTRC        SAVE THE CONVERTER RETURN CODE\n*\n         OI    PPWVPPFL,PPWVPPEX   INDICATE WE ARE BACK\n         NI    PPWCFLG1,255-PPWC1INT    INDICATE WE'RE BACK FROM CNINT\n*\n***********************************************************************\n*                                                                     *\n*        CLEAN UP IN CASE IF WE DID ANYTHING                          *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,=A(IEFCNVCL)    POINT AT CLEAN UP SUBROUTINE\n         BALR  R14,R15             GO CLEAN UP IF NECESSARY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FREE ANY CNMBS THAT HAVEN'T BEEN PASSED TO THE CONVERTER     *\n*                                                                     *\n***********************************************************************\n*\n         L     R2,PPWCNMB          LOAD FIRST CNMB ADDRESS\n         USING CNMB,R2\n*\nVPPCNMBL LTR   R1,R2               COPY THE ADDRESS FOR FREEING\n         BZ    VPPCNMBN            BRANCH IF NONE LEFT\n*\n         LH    R0,CNMBLEN          LOAD THE CNMB'S LENGTH\n         SLR   R14,R14             CLEAR FOR INSERT\n         ICM   R14,1,CNMBSUBP      LOAD THE CNMB'S SUBPOOL\n         L     R2,CNMBNPTR         CHAIN TO THE NEXT CNMB\n*\n         FREEMAIN RU,A=(1),LV=(0),SP=(R14) FREE THE CNMB\n*\n         B     VPPCNMBL            AND GO FREE NEXT ONE\n         DROP  R2                  DONE WITH CNMBS\n*\nVPPCNMBN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN TO THE CALLER (JES2/3)         *\n*                                                                     *\n***********************************************************************\n*\n         L     R1,PPWFSAAD         LOAD THE FIRST SAVE AREA ADDRESS\n         USING FSADSECT,R1\n*\n         MVC   FSAPPEYE,PPWFSAR2   RESTORE THE ORIGINAL R2\n         MVC   FSAPPWAD,PPWFSAR3   RESTORE THE ORIGINAL R3\n         DROP  R1\n*\n         SLR   R2,R2               INITIALIZE RETURN CODE\n         TM    PPWFLAG1,PPW1JPER   DID WE ENCOUNTER ANY ERRORS\n         BZ    *+8                 BRANCH IF NOT\n         LA    R2,4                SET ERROR RETURN CODE\n*\n         CL    R2,PPWINTRC         CHECK OUR RETURN CODE AGAINST CNV'S\n         BNL   *+8                 BRANCH IF OUR'S HIGHER\n         L     R2,PPWINTRC         LOAD THE CONVERTER'S RETURN CODE\n*\n         LR    R1,R13              COPY THE WORK AREA ADDRESS\n         L     R0,PPWWORKL         LOAD THE GOTTEN AREA LENGTH\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n*\n         FREEMAIN RU,LV=(0),A=(1)  FREE THE GOTTEN AREA\n*\n         L     R14,12(,R13)        RELOAD RETURN ADDRESS\n         LR    R15,R2              COPY THE CONVERTER RETURN CODE\n         LM    R0,R12,20(R13)      RELOAD REGS 0 - 12\n         BSM   R0,R14              RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVPP                    *\n*                                                                     *\n***********************************************************************\n*\nVPPDCBMD DCB   DDNAME=********,    PATTERN DCB                         X\n               DSORG=PO,                                               X\n               MACRF=(R),                                              X\n               BUFNO=0,                                                X\n               BUFCB=0,                                                X\n               BLKSIZE=32767/80*80,                                    X\n               RECFM=FB,                                               X\n               LRECL=80\nVPPDCBML EQU   *-VPPDCBMD          PATTERN DCB LENGTH\n*\nVPPSWARQ SWAREQ FCODE=LA,EPA=*-*,UNAUTH=YES,MF=L\n*\nVPPWTOMD WTO   '',                 NORMAL WTO PARAMETER LIST           X\n               ROUTCDE=11,DESC=6,MF=L\n*\nVPPWTOM1 WTO   '',                 DEBUGGING WTO PARAMETER LIST        X\n               ROUTCDE=1,DESC=6,MF=L\n*\nVPPDDPAT DC    C'0123456789ABCDEF' CHARACTER STRING FOR HEX TRANSLATE\n*\nVPPPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVPP PATCH'\n         DC    16F'0'\n*\nVPPLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVGS - INTERCEPT INITIAL JCL STATEMENT PARSE'\n***********************************************************************\n*                                                                     *\n*        IEFCNVGS                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE RECEIVES CONTROL FROM THE CONVERTER WHEN A JCL  *\n*        STATEMENT IS BEING CONSTRUCTED AND INITIALLY PARSED FROM     *\n*        THE JCL CARD IMAGES.                                         *\n*                                                                     *\n*        THIS ROUTINE PASSES CONTROL TO THE STANDARD CONVERTER        *\n*        ROUTINE (IEFCNGST).  UPON RETURN, IT DETERMINES IF THE       *\n*        STATEMENT JUST BUILT IS A DYNAMIC PROCLIB DD STATEMENT       *\n*        OR CONCATENATION.                                            *\n*                                                                     *\n*        INPUT:                                                       *\n*              PARAMETER LIST FROM CALLER                             *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              NONE                                                   *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              IEFCNGST (ORIGINAL ROUTINE CONVERTER WAS CALLING)      *\n*              IEFCNVXT (SPECIAL PROCESSING ROUTINE)                  *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER                                       *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVGS DS    0D\n         ENTRY IEFCNVGS            NEED ENTRY POINT FOR LINK EDIT\n         USING *,R15               TEMPORARY BASE\n         B     VGSSTM              BRANCH AROUND ID\n*\n         DC    AL1(VGSIDL)         LTH OF IDENTIFICATION PREFIX\nVGSID    DC    CL8'IEFCNVGS'       USER PROCLIB SUPPORT MODULE ID\nVGSIDL   EQU   *-VGSID             LENGTH OF IDENTIFICATION HEADER\n*\nVGSSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVGS,R12        ESTABLISH PERMANENT BASE\n*\n         L     R15,PSATOLD-PSA     LOAD THE TCB ADDRESS\n         USING TCB,R15\n         L     R15,TCBFSA          LOAD THE FIRST SAVE AREA ADDRESS\n         USING FSADSECT,R15\n*\n         CLC   FSAPPEYE,=A(FSAPPEID)    IS THIS THE RIGHT SAVE AREA\n         BE    VGSCONT             IF SO, CONTINUE ON\n*\n         L     R14,12(,R13)        THIS IS NOT SO GOOD, SO GET OUT\n         L     R15,=V(IEFCNGST)    THIS IS WHERE WE GIVE UP\n         LM    R0,R12,20(R13)      RESTORE THE REST OF THE REGISTERS\n         BR    R15                 AND PASS ON TO IEFCNGST W/O RETURN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTABLISH THE SAVE AREA AND WORK AREA ADDRESS FROM           *\n*        THE ANCHORED WORK AREA.                                      *\n*                                                                     *\n***********************************************************************\n*\nVGSCONT  DS    0H\n         L     R15,FSAPPWAD        LOAD THE WORK AREA ADDRESS\n         USING PPWDSECT,R15\n         LA    R15,PPWVGSSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVGSSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVGSCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVGSCN        STORE IT BACK\n*\n         NI    PPWCFLG1,255-PPWC1INT    INDICATE WE AREN'T IN KANSAS\n*\n         OI    PPWVGSFL,PPWVGSEX   INDICATE WE ARE HERE\n*\n         ST    R1,PPWGSTR1         SAVE THE REGISTER 1 AT OUR ENTRY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK FOR THIS BEING THE FIRST TIME HERE                     *\n*                                                                     *\n***********************************************************************\n*\n         LA    R0,1                LOAD A 1\n         CL    R0,PPWVGSCN         CHECK IF THIS IS THE VERY FIRST TIME\n         BNE   VGSNFRST            BRANCH IF NOT\n*\n         TM    PPWENVIR,PPWEMSTR   ARE WE MASTERING IT\n         BO    VGSNFRST            IF SO, SKIP THIS STUFF\n*\n***********************************************************************\n*                                                                     *\n*        ESTABLISH AN ESTAE, SO THAT ANY CONVERTER ABENDS WILL        *\n*        FUNNEL THROUGH US FOR CLEANUP.                               *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWESTAE(PPWESTAL),VGSESTAE COPY ESTAE PARM LIST\n*\n         L     R15,PPWWORKA        LOAD BASE WORK AREA ADDRESS\n         ESTAE PARAM=(R15),        CREATE THE ESTAE ENVIRONMENT        X\n               MF=(E,PPWESTAE)\n*\n         OI    PPWFLAG3,PPW3ESTA   INDICATE ESTAE IN FORCE\n*\n***********************************************************************\n*                                                                     *\n*        CALL THE ROUTINE TO EXTRACT SENSITIVE CONVERTER ADDRESSES    *\n*                                                                     *\n***********************************************************************\n*\n         SLR   R0,R0               SET CODE FOR DATA EXTRACT\n         L     R15,PPWCNVXT        LOAD THE EXTRACT SUBROUTINE ADDRESS\n         BALR  R14,R15             CALL THE EXTRACT SUBROUTINE\n*\nVGSNFRST DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PASS CONTROL TO THE IEFCNGST FOR NORMAL CONVERTER PROCESSING *\n*                                                                     *\n***********************************************************************\n*\nVGSLOOP  DS    0H\n         L     R15,PPWGSTCN        COUNT THE CALLS TO IEFCNGST\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWGSTCN        STORE IT BACK\n*\n         IEFCNTRC CALLGST\n*\n         LA    R0,8                INDICATE DATA UPDATE\n         SLR   R1,R1               INDICATE TOTAL UPDATE\n         L     R15,PPWCNVXT        LOAD UPDATE ROUTINE ADDRESS\n         BALR  R14,R15             GO DO THE UPDATE\n*\n         NI    PPWVGSFL,255-PPWVGSEX    TURN OFF IEFCNVGS EXECUTING\n         OI    PPWCFLG1,PPWC1GST   INDICATE WE ARE GOING TO IEFCNGST\n*\n         L     R1,PPWGSTR1         LOAD THE REGISTER 1 AT OUR ENTRY\n         L     R15,=V(IEFCNGST)    LOAD ADDRESS OF IEFCNGST ENTRY PT\n         BALR  R14,R15             AND GO THE THE REAL CONVERTER\n*\n         ST    R15,PPWGSTRC        SAVE THE IEFCNGST RETURN CODE\n*\n         OI    PPWVGSFL,PPWVGSEX   INDICATE WE ARE BACK\n         NI    PPWCFLG1,255-PPWC1GST    INDICATE WE'RE BACK FROM CNGST\n*\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VGSEXIT             IF SO, LEAVE QUICKLY\n*\n         LA    R0,4                INDICATE STATEMENT EXTRACT\n         L     R15,PPWCNVXT        LOAD UPDATE ROUTINE ADDRESS\n         BALR  R14,R15             GO EXTRACT DATA\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE IF THIS IS A JCL STATEMENT THAT WE ARE INTERESTED  *\n*        IN.                                                          *\n*                                                                     *\n***********************************************************************\n*\n         ICM   R15,15,PPWGSTRC     LOAD GST RETURN CODE\n         BNZ   VGSEXIT             SKIP STATEMENT IF INVALID\n*\n         CLC   PPWSTMVR,=CL8'DD'   CHECK FOR DD\n         BNE   VGSNOTDD\n*\n         TM    PPWFLAG2,PPW2NJBP   ARE WE THROUGH NEEDING TO ANALYZE\n         BO    VGSISDD             IF SO, WE NEED TO CHECK FOR DUPS\n*\n         CLI   PPWSTMLL+1,0        CHECK FOR NO LENGTH (CONCAT)\n         BNE   VGSNOTCN            BRANCH IF NOT\n*\n         TM    PPWFLAG2,PPW2JBPR   ARE WE PROCESSING A JOBPROC\n         BZ    VGSISDD             BRANCH IF NOT\n*\n         TM    PPWOPTN1,PPWO1JPR   IS JOBPROC DD ENABLED\n         BZ    VGSNOTDD            DON'T CHECK IF NOT\n*\n         OI    PPWFLAG2,PPW2JBPC   INDICATE A CONCATENTAION\n*\n         B     VGSJPROC            AND PROCESS THIS STATEMENT\n*\nVGSNOTCN DS    0H\n         CLC   PPWJBPRC,PPWSTMLA   MATCH THE NAMES\n         BNE   VGSISDD             BRANCH IF NOT JOBPROC DD\n*\n         TM    PPWOPTN1,PPWO1JPR   IS JOBPROC DD ENABLED\n         BZ    VGSNOTDD            DON'T CHECK IF NOT\n*\n         TM    PPWFLAG2,PPW2JBPR   ARE WE ALREADY PROCESSING ONE\n         BO    VGSER836            IF SO, WE BE BAD\n*\n         OI    PPWFLAG2,PPW2JBPR   INDICATE WE ARE JOBPROCING\n*\n         TM    PPWFLAG2,PPW2JCLB   HAVE WE HAD A JCLLIB\n         BO    VGSER837            IF SO, TREAT AS AN ERROR\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE JOBPROC DD STATEMENT                             *\n*                                                                     *\n***********************************************************************\n*\nVGSJPROC DS    0H\n         L     R15,=A(IEFCNVJP)    LOAD JOBPROC ROUTINE ADDRESS\n         BALR  R14,R15             GO ANALYZE/ALLOCATE JOBPROC DATASET\n*\n         LTR   R15,R15             WAS THERE AN ERROR\n         BZ    VGSLOOP             BRANCH IF NOT - MAKE STATEMENT GONE\n*\n         LA    R0,8                INDICATE STATEMENT UPDATE\n         LH    R1,=H'-1'           INDICATE ERROR UPDATE\n         L     R15,PPWCNVXT        LOAD UPDATE ROUTINE ADDRESS\n         BALR  R14,R15             GO UPDATE THE STATEMENT\n*\n         B     VGSEXIT             AND LET THE CONVERTER BARF\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK FOR OTHER DD STATEMENTS WE ARE INTERESTED IN           *\n*                                                                     *\n***********************************************************************\n*\nVGSISDD  DS    0H\n         CLC   PPWJBPRC,PPWSTMLA   MATCH THE NAMES\n         BE    VGSER836            MISPLACED JOBPROC IF MATCHED\n*\n         TM    PPWOPTN1,PPWO1SDD   DO WE SUPPORT THE SWA DDNAMES\n         BZ    VGSDDNSW            BRANCH IF NOT\n*\n         CLC   PPWSTMTL,=H'5'      IS THE DATA EXACTLY 5 LONG\n         BNE   VGSDDNSW            IF NOT, CAN'T BE SPECIAL DD\n*\n         L     R15,PPWSTMTX        LOAD THE DATA ADDRESS\n         CLC   0(5,R15),=C'DUMMY'  IS THIS A DD DUMMY\n         BNE   VGSDDNSW            IF NOT, CAN'T BE SPECIAL DD\n*\n         CLC   PPWSTMLA,PPWSWAAD   IS THIS SWAABOVE\n         BE    VGSDDSWA            BRANCH IF SO\n         CLC   PPWSTMLA,PPWSWABD   IS THIS SWABELOW\n         BNE   VGSDDNSW            BRANCH IF NOT\n*\n         OI    PPWFLAG4,PPW4SWAB   TURN ON SWA BELOW THE LINE\n         NI    PPWFLAG4,255-PPW4SWAA    MAKE SURE SWA ABOVE IS OFF\n         LA    R1,VGSBELOL         POINT AT BELOW MESSAGE\n         B     VGSDDSWM            AND GO ISSUE MESSAGE\n*\nVGSDDSWA OI    PPWFLAG4,PPW4SWAA   TURN ON SWA ABOVE THE LINE\n         NI    PPWFLAG4,255-PPW4SWAB    MAKE SURE SWA BELOW IS OFF\n         LA    R1,VGSABOVL         POINT AT ABOVE MESSAGE\n*\nVGSDDSWM DS    0H\n         LA    R0,MSGNO832         POINT AT INFORMATION MESSAGE\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE\n         BALR  R14,R15             ISSUE MESSAGE\n*\n         B     VGSLOOP             AND MAKE DD STATEMENT DISAPPEAR\n*\nVGSDDNSW DS    0H\n         B     VGSEXIT             WE AREN'T INTERESTED IN THIS ONE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ANALYZE JCL STATEMENT THAT IS NOT A DD STATEMENT             *\n*                                                                     *\n***********************************************************************\n*\nVGSNOTDD DS    0H\n         CLC   PPWSTMVR,=CL8'IF'   CHECK FOR IF\n         BE    VGS1EXEC\n*\nVGSNOTIF DS    0H\n         CLC   PPWSTMVR,=CL8'EXEC' CHECK FOR EXEC\n         BNE   VGSNOTEX            BRANCH IF NOT\n         TM    PPWENVIR,PPWESTC    IS THIS A STARTED TASK\n         BZ    VGS1EXEC            BRANCH IF NOT\n         B     VGSSTCEX            AND BRANCH IF IT IS\n*\nVGSNOTEX DS    0H\n         CLC   PPWSTMVR,=CL8'JCLLIB'    CHECK FOR INCLUDE\n         BNE   VGSNOTJC\n*\n         TM    PPWFLAG2,PPW2JBPR   DO WE HAVE A JOBPROC DD\n         BO    VGSER838            IF SO, THIS IS AN ERROR\n*\n         OI    PPWFLAG2,PPW2JCLB   INDICATE WE HAVE A JCLLIB STATEMENT\n         B     VGSEXIT\n*\nVGSNOTJC DS    0H\n         CLC   PPWSTMVR,=CL8'INCLUDE'   CHECK FOR INCLUDE\n         BE    VGS1EXEC\n*\nVGSNOTIN DS    0H\n         CLC   PPWSTMVR,=CL8'JOB'  CHECK FOR A JOB CARD\n         BE    VGSJOBCD            BRANCH IF SO\n*\n         B     VGSNOTJP\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS IS A JOB STATEMENT - WE MAY NEED TO SCAN FOR SWA        *\n*                                                                     *\n***********************************************************************\n*\nVGSJOBCD DS    0H\n         TM    PPWOPTN1,PPWO1SWA   IS THE SWA KEYWORD OPTION AVAILABLE\n         BZ    VGSEXIT             IF NOT, WE ARE DONE\n*\n         LA    R1,PPWSWAKL         POINT AT SWA KEYWORD LENGTH\n         L     R15,PPWCNVKW        LOAD KEYWORD SCAN ROUTINE ADDRESS\n         BALR  R14,R15             GO SCAN FOR THE SWA KEYWORD\n*\n         B     *+4(R15)            DETERMINE WHAT THE RESULTS ARE\n         B     VGSJBSWA          0 BRANCH IF SWA KEYWORD FOUND\n         B     VGSEXIT           4 SYNTAX ERROR - LET CONVERTER JCL ERR\n         B     VGSEXIT           8 NOT FOUND - DO NOTHING\n*\n***********************************************************************\n*                                                                     *\n*        WE HAVE FOUND THE SWA KEYWORD ON THE JOB STATEMENT           *\n*                                                                     *\n***********************************************************************\n*\nVGSJBSWA DS    0H\n         LH    R15,PPWSWAKL        LOAD THE SWA KEYWORD LENGTH\n         LA    R15,1(R15,R1)       POINT AT START OF SWA DATA\n*\n         LR    R14,R1              COPY THE STARTING ADDRESS\n         AR    R14,R0              POINT AT END\n         SR    R14,R15             GET LENGTH OF SWA KEYWORD DATA\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        VALIDATE THE SWA PARAMETER VALUE                             *\n*                                                                     *\n***********************************************************************\n*\nVGSSWAKW DS    0H\n         CH    R14,VGSABOVL        CHECK FOR VALID LENGTH\n         BNE   VGSNTABV            BRANCH IF NOT ABOVE\n*\n         CLC   VGSABOVE,0(R15)     CHECK FOR SWA=ABOVE\n         BNE   VGSNTABV            IF NOT, MAYBE IT'S BELOW\n*\n         OI    PPWFLAG4,PPW4SWAA   INDICATE SWA ABOVE THE LINE\n         NI    PPWFLAG4,255-PPW4SWAB    TURN OFF POSSIBLE SWA BELOW\n         B     VGSWADEL            AND GO DELETE THE KEYWORD\n*\nVGSNTABV DS    0H\n         CH    R14,VGSBELOL        CHECK FOR VALID LENGTH\n         BNE   VGSER831            BRANCH IF NOT BELOW\n*\n         CLC   VGSBELOW,0(R15)     CHECK FOR SWA=BELOW\n         BNE   VGSER831            IF NOT, ERROR\n*\n         OI    PPWFLAG4,PPW4SWAB   INDICATE SWA BELOW THE LINE\n         NI    PPWFLAG4,255-PPW4SWAA    TURN OFF POSSIBLE SWA ABOVE\n         B     VGSWADEL            AND GO DELETE THE KEYWORD\n*\n***********************************************************************\n*                                                                     *\n*        CALL SUBROUTINE TO DELETE THE SWA KEYWORD STRING             *\n*                                                                     *\n***********************************************************************\n*\nVGSWADEL DS    0H\n         L     R15,PPWCNVPD        LOAD PARM DELETE ROUTINE ADDRESS\n         BALR  R14,R15             GO EDLETE THE PARAMETER\n*\n         LA    R1,VGSABOVL         POINT AT ABOVE MESSAGE\n         TM    PPWFLAG4,PPW4SWAA   ARE WE ABOVING IT\n         BO    *+8                 BRANCH IF SO\n         LA    R1,VGSBELOL         POINT AT BELOW MESSAGE\n*\n         LA    R0,MSGNO832         POINT AT INFORMATION MESSAGE\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE\n         BALR  R14,R15             ISSUE MESSAGE\n         B     VGSEXIT             AND CONTINUE ON AS IF NOTHING\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ENCOUNTERED AN EXEC STATEMENT ASSOCIATED WITH A STARTED TASK *\n*                                                                     *\n***********************************************************************\n*\nVGSSTCEX DS    0H\n         TM    PPWOPTN1,PPWO1STC   IS THE STC JCLLIB OPTION AVAILABLE\n         BZ    VGS1EXEC            IF NOT, GO TO FIRST EXEC\n*\n         TM    PPWFLAG2,PPW2NJBP   HAVE WE GOTTEN TO THE FIRST EXEC\n         BO    VGSEXIT             IF SO, WE BE DONE\n*\n         LA    R1,PPWSTCKL         POINT AT STC JCLLIB KEYWORD LENGTH\n         L     R15,PPWCNVKW        LOAD KEYWORD SCAN ROUTINE ADDRESS\n         BALR  R14,R15             GO SCAN FOR THE SWA KEYWORD\n*\n         B     *+4(R15)            DETERMINE WHAT THE RESULTS ARE\n         B     VGSEXJCL          0 BRANCH IF JCLLIB KEYWORD FOUND\n         B     VGS1EXEC          4 SYNTAX ERROR - LET CONVERTER JCL ERR\n         B     VGS1EXEC          8 NOT FOUND - DO NOTHING\n*\n***********************************************************************\n*                                                                     *\n*        WE HAVE FOUND THE STC JCLLIB KEYWORD ON THE EXEC STATEMENT   *\n*                                                                     *\n***********************************************************************\n*\nVGSEXJCL DS    0H\n         LH    R15,PPWSTCKL        LOAD THE JCLLIB KEYWORD LENGTH\n         LA    R15,1(R15,R1)       POINT AT START OF JCLLIB DATA\n*\n         LR    R14,R1              COPY THE STARTING ADDRESS\n         AR    R14,R0              POINT AT END\n         SR    R14,R15             GET LENGTH OF JCLLIB KEYWORD DATA\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT A DSN=.... STRING FOR LATER SCANNING               *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWKEYWD(4),=C'DSN='     SET DATA SET NAME KEYWORD\n         LTR   R14,R14             IS DATA SET NAME NULL\n         BZ    VGSEXNUL            BRANCH IF SO\n*\n         BCTR  R14,0               DECREMENT FOR MOVE INSTRUCTION\n         EX    R14,VGSMVDSN        MOVE THE DATA SET NAME\n         LA    R14,1(,R14)         INCREMENT LENGTH BACK\n*\nVGSEXNUL DS    0H\n         LA    R14,4(,R14)         ADD THE DSN KEYWORD LENGTH\n         STH   R14,PPWKEYWL        SAVE THIS LENGTH\n*\n***********************************************************************\n*                                                                     *\n*        DELETE THE JCLLIB PARAMETER FROM THE TEXT                    *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,PPWCNVPD        LOAD PARM DELETE ROUTINE ADDRESS\n         BALR  R14,R15             GO DELETE THE PARAMETER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE EXTRACTED DATA SET NAME                          *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,PPWKEYWD         POINT AT DSN KEYWORD\n         ST    R1,PPWSTMTX         SET THE NEW TEXT POINTER\n         LH    R1,PPWKEYWL         LOAD THE DSN KEYWORD LENGTH\n         STH   R1,PPWSTMTL         STORE THE NEW LENGTH\n*\n         LA    R0,MSGNO857         POINT AT EXTRACTED TEXT\n         LA    R1,PPWKEYWL         POINT AT TEXT LENGTH\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             DISPLAY EXTRACTED TEXT\n*\n         MVC   PPWSTMLL,PPWSTCKL   SET JCLLIB KEYWORD LENGTH\n         MVC   PPWSTMLA,PPWSTCKW   SET JCLLIB KEYWORD VALUE\n*\n         L     R15,=A(IEFCNVJP)    LOAD JOBPROC PROCESSOR ADDRESS\n         BALR  R14,R15             GO PROCESS THE KEYWORD\n*\n         B     VGS1EXEC            AND PROCESS THE FIRST EXEC STATEMENT\n*\nVGSMVDSN MVC   PPWKEYWD+4(*-*),0(R15)   *** EXECUTE ONLY ***\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIRST STATEMENT AFTER A JOBPROC DD OR FIRST \"EXEC\" STATEMENT *\n*        ENCOUNTERED.                                                 *\n*                                                                     *\n***********************************************************************\n*\nVGSNOTJP DS    0H\n         TM    PPWFLAG2,PPW2JBPR   ARE WE IN JOBPROC PROCESSING\n         BZ    VGSEXIT             IF NOT, WE AREN'T INTERESTED\n*\nVGS1EXEC OI    PPWFLAG2,PPW2NJBP   INDICATE STATEMENT AFTER JOBPROC\n*\n         TM    PPWFLAG2,PPW2CMPL   ARE WE COMPLETE HERE\n         BO    VGSEXIT             IF SO, LEAVE NOW\n*\n         L     R15,=A(IEFCNVEX)    LOAD FIRST EXEC ROUTINE ADDRESS\n         BALR  R14,R15             GO COMPLETE JOBPROC SETUP\n*\n         NI    PPWFLAG2,255-PPW2JBPR-PPW2JBPC TURN OFF JOBPROC FLAGS\n         B     VGSEXIT             AND EXIT\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERRORS ENCOUNTERED HERE                                      *\n*                                                                     *\n***********************************************************************\n*\nVGSER831 DS    0H\n         LA    R0,MSGNO831         INVALID SWA PARAMETER\n         B     VGSERRNS\n*\nVGSER836 DS    0H\n         LA    R0,MSGNO836         MISPLACED OR DUPLICATE JOBPROC\n         B     VGSERRNS\n*\nVGSER837 DS    0H\n         LA    R0,MSGNO837         JOBPROC NOT ALLOWED WHEN JCLLIB USED\n         B     VGSERRNS            GO PRODUCE ERROR MESSAGE\n*\nVGSER838 DS    0H\n         LA    R0,MSGNO838         JCLLIB NOT ALLOWED WHEN JOBPROC USED\n         B     VGSERRNS            GO PRODUCE ERROR MESSAGE\n*\nVGSERRNS DS    0H\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             PRODUCE ERROR MESSAGE\n*\n         B     VGSEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER (IEFCNJRT)                                  *\n*                                                                     *\n***********************************************************************\n*\nVGSEXIT  DS    0H\n         TM    PPWENVIR,PPWEESA4   TEST FOR A VERSION 4 BCP\n         BO    VGSEXIT1            IF SO, LET THE CONVERTER CONTINUE\n*\n         TM    PPWFLAG1,PPW1NULL  HAS THE NULL STATEMENT BEEN RECEIVED\n         BZ    VGSLOOP            RETRY WITH NEXT STATEMENT IF NOT\n*\nVGSEXIT1 DS    0H\n         NI    PPWVGSFL,255-PPWVGSEX    TURN OFF IEFCNVGS EXECUTING\n*\n         OI    PPWCFLG1,PPWC1INT   INDICATE RETURN TO CONVERTER\n*\n         L     R15,PPWGSTRC        LOAD THE RETURN CODE\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         L     R14,12(,R13)        RELOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RELOAD REGS 0 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVGS                    *\n*                                                                     *\n***********************************************************************\n*\nVGSABOVL DC    Y(L'VGSABOVE)       LENGTH OF ABOVE\nVGSABOVE DC    C'ABOVE'            ABOVE THE LINE\n*\nVGSBELOL DC    Y(L'VGSBELOW)       LENGTH OF BELOW\nVGSBELOW DC    C'BELOW'            BELOW THE LINE\n*\nVGSESTAE ESTAE IEFCNVST,CT,        MODEL                               X\n               TERM=YES,            ERROR                              X\n               PARAM=*-*,            RECOVERY                          X\n               MF=L                   ENVIRONMMENT\n*\nVGSPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVGS PATCH'\n         DC    16F'0'\n*\nVGSLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVJP - SCAN AND ALLOCATE JOBPROC DATA SETS'\n***********************************************************************\n*                                                                     *\n*        IEFCNVJP                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE ROUTINE RECEIVES CONTROL FROM IEFCNVGS TO PROCESS        *\n*        A JOBPROC DD (OR CONCATENATION).                             *\n*                                                                     *\n*        INPUT:                                                       *\n*              DATA IN THE WORK AREA                                  *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              ALLOCATED DYNAMIC PROCLIB DATA SET                     *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER (R15 IS RETURN CODE)                  *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVJP DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VJPSTM              BRANCH AROUND ID\n*\n         DC    AL1(VJPIDL)         LTH OF IDENTIFICATION PREFIX\nVJPID    DC    CL8'IEFCNVJP'       USER PROCLIB SUPPORT MODULE ID\nVJPIDL   EQU   *-VJPID             LENGTH OF IDENTIFICATION HEADER\n*\nVJPSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVJP,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVJPSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVJPSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVJPCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVJPCN        STORE IT BACK\n*\n         LA    R15,VJPEXIT         POINT AT RECOVERY ADDRESS\n         ST    R15,PPWVJPRT        STORE IN RETRY ADDRESS\n*\n         OI    PPWVJPFL,PPWVJPEX   INDICATE WE ARE HERE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET UP FOR THE PARAMETER SCAN                                *\n*                                                                     *\n***********************************************************************\n*\n         OI    PPWFLAG1,PPW1HVJP   INDICATE WE HAVE A JOBPROC\n*\n         CLC   PPWSTMLL,=H'0'      MISSING DDNAME = CONCATENATION\n         BNE   *+8                 BRANCH IF NOT\n         OI    PPWFLAG1,PPW1CNJP   SHOW CONCATENATED USER FILES\n*\n         XC    PPWDSNML,PPWDSNML   CLEAR DSNAME LENGTH TO ZEROS\n         MVI   PPWDSNME,C' '       CLEAR DSNAME AREA\n         MVC   PPWDSNME+1(43),PPWDSNME    TO BLANKS\n*\n         TM    PPWFLAG1,PPW1JPER   PREVIOUS ERROR NOTED ?\n         BO    VJPEXIT             YES, JUST EXIT\n*\n         MVI   PPWSTMT1,0          CLEAR STATEMENT STATUS FLAGS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF THE SYSPROC PARAMETER WAS CODED                       *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,PPWSYSPL         POINT AT SYSPROC KEYWORD LENGTH\n         L     R15,PPWCNVKW        LOAD THE SCAN ROUTINE ADDRESS\n         BALR  R14,R15             GO SCAN FOR KEYWORD\n*\n         B     *+4(R15)            DETERMINE RESULTS\n         B     VJPSYSPR          0 BRANCH IF FOUND\n         B     VJPER800          4 SYNTAX ERROR IN STATEMENT\n         B     VJPNSYSP          8 SYSPROC NOT FOUND\n*\n***********************************************************************\n*                                                                     *\n*        ANALYZE THE SYSPROC KEYWORD PARAMETER                        *\n*                                                                     *\n***********************************************************************\n*\nVJPSYSPR DS    0H\n         TM    PPWFLAG1,PPW1CNJP   PRIMARY JOBPROC STATEMENT ?\n         BO    VJPER801            NO -> ERROR, SYSPROC NOT VALID\n*\n         AH    R1,PPWSYSPL         ADD THE KEYWORD LENGTH\n         LR    R15,R0              COPY LENGTH\n         SH    R15,PPWSYSPL        SUBTRACT KEYWORD LENGTH\n         BCT   R15,*+8             REDUCE BY ONE MORE\n         B     VJPER843            INVALID IF NULL\n*\n         CH    R15,=Y(VJPSYSP#)    CHECK MAXIMUM LENGTH\n         BH    VJPER843            ERROR IF TOO LONG\n*\n         BCTR  R15,0               SUBTRACT ONE FROM THE LENGTH\n         LA    R14,0(R15,R15)      DOUBLE THE LENGTH-1\n         LH    R14,VJPSYSPI(R14)   LOAD OFFSET TO VALUE TABLE\n         LA    R14,VJPSYSPT(R14)   GET ADDRESS OF VALUE TABLE\n*\nVJPSYSPL DS    0H\n         EX    R15,VJPSYSPC        COMPARE THE VALUES\n         BE    VJPSYSPM            BRANCH IF MATCHED\n*\n         LA    R14,2(R15,R14)      INCREMENT TO NEXT ENTRY\n         CLI   1(R14),C'*'         CHECK FOR END OF TABLE\n         BNE   VJPSYSPL            LOOP IF NOT AT END\n*\nVJPSYSPM DS    0H\n         IC    R15,0(,R14)         INSERT INDEX BYTE\n         B     *+4(R15)            BRANCH TO SET VALUE\n         B     VJPSYSPY            SYSPROC=YES\n         B     VJPSYSPN            SYSPROC=NO\n         B     VJPSYSPF            SYSPROC=FIRST\n         B     VJPER843            SYSPROC=INVALID\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET SYSPROC VALUE                                            *\n*                                                                     *\n***********************************************************************\n*\nVJPSYSPY OI    PPWFLAG4,PPW4SYSP   SET SYSTEM PROCLIBS WANTED\n         NI    PPWFLAG4,255-PPW4SYSF    TURN OFF SYS PROCS FIRST\n         B     VJPNSYSP            AND WE ARE DONE HERE\n*\nVJPSYSPN NI    PPWFLAG4,255-PPW4SYSP-PPW4SYSF NO SYSTEM PROC WANTED\n         LA    R0,PPWCONCM         SET MAXIMUM NUMBER OF PROCLIBS\n         STH   R0,PPWJPMAX         SET IT FOR LATER USE\n         B     VJPNSYSP            AND WE ARE DONE WITH SYSPROC\n*\nVJPSYSPF OI    PPWFLAG4,PPW4SYSP   SET SYSTEM PROCLIBS WANTED\n         OI    PPWFLAG4,PPW4SYSF   SET SYSTEM PROCLIBS WANTED FIRST\n         B     VJPNSYSP            AND WE ARE FINISHED WITH SYSPROC\n*\nVJPSYSPC CLC   1(*-*,R14),1(R1)    *** EXECUTE ONLY ***\n*\n***********************************************************************\n*                                                                     *\n*        SYSPROC KEYWORD ERROR MESSAGES                               *\n*                                                                     *\n***********************************************************************\n*\nVJPER801 DS    0H\n         LA    R0,MSGNO801         ILLEGAL USE OF \"SYSPROC\" KEY\n         B     VJPSYSPE            GO PRODUCE ERROR MESSAGE\n*\nVJPER843 DS    0H\n         LA    R0,MSGNO843         UNIDENTIFIED PARAMETER IN SYSPROC\n*\nVJPSYSPE DS    0H\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             PRODUCE ERROR MESSAGE\n         B     VJPNSYSP            AND CONTINUE ON FOR NOW\n*\nVJPNSYSP DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN FOR BOTH DSNAME KEYWORDS                                *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,VJPDSNK1         POINT AT DSN KEYWORD\n         L     R15,PPWCNVKW        LOAD THE SCAN ROUTINE ADDRESS\n         BALR  R14,R15             GO SCAN FOR DSN\n*\n         B     *+4(R15)            ANALYZE THE RETURN CODE\n         B     VJPDSNAS          0 GOT A DATA SET NAME\n         B     VJPER800          4 SYNTAX ERROR\n         B     *+4               8 DSN NOT FOUND\n*\n         LA    R1,VJPDSNK2         POINT AT DSNAME KEYWORD\n         L     R15,PPWCNVKW        LOAD THE SCAN ROUTINE ADDRESS\n         BALR  R14,R15             GO SCAN FOR DSN\n*\n         B     *+4(R15)            ANALYZE THE RETURN CODE\n         B     VJPDSNAL          0 GOT A DATA SET NAME\n         B     VJPER800          4 SYNTAX ERROR\n         B     VJPER802          8 DSNAME NOT FOUND\n*\n***********************************************************************\n*                                                                     *\n*        DSN OR DSNAME FOUND                                          *\n*                                                                     *\n***********************************************************************\n*\nVJPDSNAL LA    R15,3               SET THE ADDITIONAL LENGTH OF DSNAME\n*\nVJPDSNAS LA    R15,4(,R15)         ADD IN LENGTH OF DSN=\n*\n         SR    R0,R15              CALCULATE DATA SET NAME LENGTH\n         BNH   VJPER844            IF NOT POSITIVE, BAD NAME\n*\n         AR    R1,R15              POINT TO START OF DATA SET NAME\n         CLI   0(R1),C''''         DOES IT START WITH AN APOSTROPHE\n         BNE   VJPDSNNA            BRANCH IF NOT\n*\n         LR    R14,R1              COPY STARTING ADDRESS\n         AR    R14,R0              INCREMENT TO END\n         BCTR  R14,0               AND BACK UP ONE\n*\n         CLI   0(R14),C''''        CHECK FOR ENDING APOSTROPHE\n         BNE   VJPER844            SYNTAX ERROR IS NOT\n*\n         LA    R1,1(,R1)           BUMP STARTING ADDRESS\n         BCTR  R0,0                SUBTRACT NOT ONE,\n         BCTR  R0,0                 BUT TWO, TWO, TWO MINTS IN ONE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXTRACT AND VALIDITY CHECK DATA SET NAME                     *\n*                                                                     *\n***********************************************************************\n*\nVJPDSNNA DS    0H\n         CH    R0,=Y(L'PPWDSNME)   TEST STRING LENGTH FOR MAX\n         BH    VJPER842            \"EXCESSIVE PARAMETER LENGTH\"\n*\n         STH   R0,PPWDSNML         SAVE STRING LENGTH\n*\n         LR    R15,R0              COPY LENGTH FOR EXECUTE\n         BCTR  R15,0               GET LENGTH FOR MOVE\n         EX    R15,VJPDSNMV        SET STRING ACCORDING TO MOVE\n*\n         EX    R15,VJPDSNTT        VALIDITY CHECK THE DSNAME\n         BNZ   VJPER844            INVALID SYNTAX IF BAD\n         CLI   PPWDSNME,C'0'       CHECK FIRST CHARACTER\n         BNL   VJPER844            ERROR IF NOT ALPHA\n         CLI   PPWDSNME,C'.'       ERROR IF STARTS WITH PERIOD\n*\n         CLC   PPWJPCNT,PPWJPMAX   ARE WE ALREADY AT THE MAXIMUM ?\n         BNL   VJPER804            YES, GIVE UP\n*\n         B     VJPDSNDN            AND WE ARE DONE\n*\nVJPDSNMV MVC   PPWDSNME(*-*),0(R1) *** EXECUTE ONLY ***\n*\nVJPDSNTT TRT   PPWDSNME(*-*),VJPDSNTR   *** EXECUTE ONLY ***\n*\nVJPDSNDN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOCATE THE APPROPRIATE INCLUSION/ EXCLUSION LIST             *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG3,PPW3DSNL   DO WE HAVE A DATA SET NAME LIST\n         BZ    VJPNDSNL            IF NO LIST, SKIP IT\n*\n         ICM   R15,15,PPWDSNAD     DO WE REALLY HAVE IT\n         BZ    VJPNDSNL            BRANCH IF NOT\n         LA    R15,0(,R15)         CLEAN UP HIGH ORDER BIT\n*\n         SLR   R14,R14             ASSUME BATCH JOB\n         TM    PPWENVIR,PPWEJOB    TEST FOR BATCH JOB\n         BO    VJPDSNLO            BRANCH IF SO\n*\n         LA    R14,4               ASSUME TSO USER\n         TM    PPWENVIR,PPWETSU    TEST FOR TSO USER\n         BO    VJPDSNLO            BRANCH IF SO\n*\n         LA    R14,8               ASSUME STARTED TASK\n         TM    PPWENVIR,PPWESTC    IS THIS AN STC\n         BO    VJPDSNLO            BRANCH IF SO\n*\n         LA    R14,8               ASSUME STARTED TASK IF UNKNOWN\n*\nVJPDSNLO DS    0H\n         LH    R1,2(R14,R15)       LOAD THE INCLUSION LIST ADDRESS\n         LTR   R1,R1               DO WE HAVE ONE\n         BZ    VJPNDSLI            BRANCH IF NOT\n*\n         AR    R1,R15              GET ADDRESS OF INCLUSION LIST\n         CLI   0(R1),C' '          IS THERE ANYTHING IN THE LIST\n         BE    VJPNDSLI            SKIP THE SEARCH IF SO\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEARCH THE INCLUSION LIST                                    *\n*                                                                     *\n***********************************************************************\n*\nVJPDSLIL CLI   0(R1),C' '          CHECK FOR END OF TABLE\n         BNH   VJPER803            END OF TABLE - NOT FOUND - ERROR\n*\n         CLC   PPWDSNME,0(R1)      MATCH THE DATA SET NAMES\n         BE    VJPNDSNL            IF MATCHED, THIS IS GOOD\n*\n         LA    R1,44(,R1)          INCREMENT TO NEXT ENTRY\n         B     VJPDSLIL            AND LOOK AT NEXT INCLUDE NAME\n*\n***********************************************************************\n*                                                                     *\n*        INCLUSION LIST IS NULL - FIND THE EXCLUSION LIST             *\n*                                                                     *\n***********************************************************************\n*\nVJPNDSLI DS    0H\n         LH    R1,0(R14,R15)       LOAD THE EXCLUSION LIST ADDRESS\n         LTR   R1,R1               DO WE HAVE ONE\n         BZ    VJPNDSNL            BRANCH IF NOT\n*\n         AR    R1,R15              GET ADDRESS OF EXCLUSION LIST\n*\n***********************************************************************\n*                                                                     *\n*        SEARCH THE EXCLUSION LIST                                    *\n*                                                                     *\n***********************************************************************\n*\nVJPDSLXL CLI   0(R1),C' '          CHECK FOR END OF TABLE\n         BNH   VJPNDSNL            END OF TABLE - NOT FOUND - GOOD\n*\n         CLC   PPWDSNME,0(R1)      MATCH THE DATA SET NAMES\n         BE    VJPER803            IF MATCHED, THIS IS BAD\n*\n         LA    R1,44(,R1)          INCREMENT TO NEXT ENTRY\n         B     VJPDSLXL            AND LOOK AT NEXT EXCLUDE NAME\n*\nVJPNDSNL DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ALLOCATE THE USER'S PROCLIB                                  *\n*                                                                     *\n***********************************************************************\n*\nVJPGOALC DS    0H\n         OI    PPWVJPFL,PPWVJPAL   INDICATE PERFORMING DYNAMIC ALLOC\n*\n         IEFCNTRC JPROCALC\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET ADDRESSABILITY TO DARB\n         MVI   S99VERB,S99VRBAL    INDICATE \"ALLOC DSNAME\" REQUEST\n         LA    R15,PPWDATXT        -> ALLOCATION TEXT POINTERS\n*\n         USING S99TUPL,R15         MAKE TEXT PTRS ADDRESSABLE\n         USING S99TUNIT,R14        MAKE TEXT UNITS ADDRESSABLE\n*\n         LH    R2,PPWJPCNT         GET CURRENT CONCATENATION NO.\n         LA    R2,1(,R2)           BUMP BY ONE\n*\n         LA    R14,PPWDDNMK        -> DDNAME RETURN TEXT UNIT SLOT\n         MVC   S99TUPAR(8),PPWDDBSE     SET THE BASE DDNAME\n         LA    R1,PPWDDSUF-1(R2)   POINT AT SUFFIX CHARACTER\n         MVC   S99TUPAR+7(1),0(R1) MOVE THE SUFFIX CHARACTER\n         ST    R14,S99TUPTR        SET PTR TO RETURN DDNAME TEXT UNIT\n*\n         LA    R14,PPWRTDSK        -> DSORG RETURN TEXT UNIT SLOT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT UNIT PTR\n         XC    S99TUPAR(2),S99TUPAR     CLEAR THE DSORG\n         ST    R14,S99TUPTR        SET PTR TO RETURN DSORG TEXT UNIT\n*\n         LA    R14,PPWDSNMK        -> DSNAME TEXT UNIT SLOT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT UNIT PTR\n         ST    R14,S99TUPTR        SET PTR TO \"DSNAME\" TEXT UNIT\n*\n         LA    R14,PPWDISPK        -> STATUS DISPOSITION TEXT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT PTR SLOT\n         ST    R14,S99TUPTR        SET PTR TO \"STATUS\" DISP TEXT\n*\n         LA    R14,PPWCLOSK        -> FREE=CLOSE TEXT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT PTR SLOT\n         ST    R14,S99TUPTR        SET PTR TO \"STATUS\" DISP TEXT\n*\n         OI    S99TUPTR,S99TUPLN   SET END OF TEXT UNITS INDICATOR\n         LA    R1,PPWDARGL         R1 -> DYNAMIC ALLOC PARM LIST\n*\n         DROP  R14,R15             DONE WITH DYNAMIC ALLOC PARMS\n*\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                ALLOCATE TO USER PROCLIB\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LTR   R15,R15             ALLOCATION SUCCESSFUL ?\n         BZ    VJPDYNOK            BRANCH IF YES\n*\n         ST    R15,PPWDARC         STORE THE RETURN CODE\n         L     R15,PPWCNVDE        LOAD DYN ALLOC ERROR RTN ADDR\n         BALR  R14,R15             DO ERROR ANALYSIS\n*\n         NI    PPWVJPFL,255-PPWVJPAL    TURN OFF IN DYNAMIC ALLOC RTN\n*\n         B     VJPEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        VALIDATE THE DATA SET MAKING SURE THAT IT IS A               *\n*        PARTITIONED DATA SET ON DASD.                                *\n*                                                                     *\n***********************************************************************\n*\nVJPDYNOK DS    0H\n         NI    PPWVJPFL,255-PPWVJPAL    TURN OFF IN DYNAMIC ALLOC RTN\n*\n         STH   R2,PPWJPCNT         UPDATE CONCATENATION NO.\n         BCTR  R2,0                SUBTRACT ONE\n         MH    R2,=Y(L'PPWCONCD)   MULTIPLE BY 10\n         LA    R2,PPWCONCD(R2)     CALCULATE DDNAME POSITION\n         MVC   2(8,R2),PPWDDNME    COPY THE ALLOCATED DDNAME\n*\n         TM    PPWRTDSE,X'02'      TEST FOR DSORG=PO\n         BZ    VJPER803            DATA SET NOT VALID IF WRONG DSORG\n*\n         L     R1,PPWTIOTA         LOAD THE TIOT ADDRESS\n         USING TIODSECT,R1         SET UP ADDRESSIBILITY\n         SLR   R15,R15             ZERO FOR INSERTS\n*\nVJPTIOLP CLI   TIOELNGH,0          CHECK FOR END OF TIOT\n         BE    VJPER811            BRANCH IF NAME NOT FOUND (ERROR)\n*\n         CLC   TIOEDDNM,PPWDDNME   CHECK FOR THE ALLOCATED DD ENTRY\n         BE    VJPTIOTF            BRANCH IF FOUND\n*\n         IC    R15,TIOELNGH        LOAD THE LENGTH\n         AR    R1,R15              INCREMENT ADDRESS\n         B     VJPTIOLP            CONTINUE TIOT SCAN\n*\nVJPTIOTF ICM   R1,7,TIOEFSRT       LOAD THE UCB ADDRESS\n         BZ    VJPER811            IF NONE, THIS IS VERY BAD\n         USING UCBDSECT,R1         TELL THE ASSEMBLER ABOUT THE UCB\n*\n         TM    UCBTBYT3,UCB3DACC   TEST FOR DIRECT ACCESS\n         BZ    VJPER811            IF NOT, THIS CANNOT BE ALLOWED\n*\n         DROP  R1\n*\n         LA    R0,MSGNO821         FIRST PROCLIB MESSAGE\n         TM    PPWFLAG1,PPW1CNJP   IS THIS A CONCATENATION\n         BZ    *+8                 BRANCH IF NOT\n         LA    R0,MSGNO822         CONCATENATION PROCLIB MESSAGE\n*\n         L     R15,PPWCNVMS        POINT AT MESSAGE ROUTINE\n         BALR  R14,R15             ISSUE PROCLIB MESSAGE\n*\n         B     VJPEXIT             RETURN TO CONVERTER\n*\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        DATA SET NAME ERROR MESSAGES                                 *\n*                                                                     *\n***********************************************************************\n*\nVJPER800 DS    0H\n         LA    R0,MSGNO800         SYNTAX ERROR IN JOBPROC STATEMENT\n         B     VJPDSNER            GO PRODUCE ERROR MESSAGE\n*\nVJPER802 DS    0H\n         LA    R0,MSGNO802         JOBPROC DSNAME MISSING\n         B     VJPDSNER\n*\nVJPER803 DS    0H\n         LA    R0,MSGNO803         DATA SET NOT VALID FOR JOBPROC\n         B     VJPDSNER\n*\nVJPER804 DS    0H\n         LA    R0,MSGNO804         CONCATENATION LIMIT EXCEEDED\n         B     VJPDSNER\n*\nVJPER811 DS    0H\n         LA    R0,MSGNO811         JOBPROC VOLUME NOT ALLOWED\n         B     VJPDSNER\n*\nVJPER842 DS    0H\n         LA    R0,MSGNO842         EXCESSIVE PARAMETER LENGTH (DSNAME)\n         B     VJPDSNER\n*\nVJPER844 DS    0H\n         LA    R0,MSGNO844         INVALID SYNTAX IN DSNAME\n         B     VJPDSNER\n*\nVJPDSNER DS    0H\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             PRODUCE ERROR MESSAGE\n*\n         B     VJPEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVJPEXIT  DS    0H\n         SLR   R15,R15             ASSUME NO ERROR\n         TM    PPWFLAG1,PPW1JPER   ERROR NOTED IN JOBPROC ?\n         BZ    *+8                 BRANCH IF GOOD\n         LA    R15,4               INDICATE ERROR\n*\n         NI    PPWVJPFL,255-PPWVJPEX    TURN OFF WE ARE HERE\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         L     R14,12(,R13)        RELOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RELOAD REGS 0 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVJP                    *\n*                                                                     *\n***********************************************************************\n*\nVJPDSNK2 DC    H'6',C'DSNAME'      DATA SET NAME KEYWORD\nVJPDSNK1 DC    H'3',C'DSN'         ABBREVIATED DATA SET NAME KEYWORD\n*\nVJPERIOD DC    256X'00'            PERIOD TRANSLATE AND TEST TABLE\n         ORG   VJPERIOD+C'.'\n         DC    X'FF'\n         ORG   ,\n*\nVJPDSNTR DC    256X'FF'            DATA SET NAME TRANSLATE TABLE\n         ORG   VJPDSNTR+C'.'\n         DC    X'00'               IS GOOD\n         ORG   VJPDSNTR+C'@'\n         DC    X'00'               IS GOOD\n         ORG   VJPDSNTR+C'#'\n         DC    X'00'               IS GOOD\n         ORG   VJPDSNTR+C'$'\n         DC    X'00'               IS GOOD\n         ORG   VJPDSNTR+C'A'\n         DC    9X'00'              IS GOOD\n         ORG   VJPDSNTR+C'J'\n         DC    9X'00'              IS GOOD\n         ORG   VJPDSNTR+C'S'\n         DC    8X'00'              IS GOOD\n         ORG   VJPDSNTR+C'0'\n         DC    10X'00'             IS GOOD\n         ORG   ,\n*\nVJPSYSPI DS    0H                  SYSPROC VALUE LOOKUP OFFSETS\n         DC    Y(VJPSYSP1-VJPSYSPT)     LENGTH 1 VALUES\n         DC    Y(VJPSYSP2-VJPSYSPT)     LENGTH 2 VALUES\n         DC    Y(VJPSYSP3-VJPSYSPT)     LENGTH 3 VALUES\n         DC    Y(VJPSYSP4-VJPSYSPT)     LENGTH 4 VALUES\n         DC    Y(VJPSYSP5-VJPSYSPT)     LENGTH 5 VALUES\n         DC    Y(VJPSYSP6-VJPSYSPT)     LENGTH 6 VALUES\nVJPSYSP# EQU   (*-VJPSYSPI)/2      MAXIMUM LENGTH OF SYSPROC PARMS\n*\nVJPSYSPT DS    0H                  SYSPROC VALUE TABLES\nVJPSYSP1 DS    0H                  SYSPROC VALUES OF LENGTH ONE\n         DC    AL1(0),C'Y'         SYSPROC=Y(ES)\n         DC    AL1(0),C'L'         SYSPROC=L(AST)\n         DC    AL1(0),C'A'         SYSPROC=A(FTER)\n         DC    AL1(4),C'N'         SYSPROC=N(O)\n         DC    AL1(8),C'F'         SYSPROC=F(IRST)\n         DC    AL1(8),C'B'         SYSPROC=B(EFORE)\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPSYSP2 DS    0H                  SYSPROC VALUES OF LENGTH TWO\n         DC    AL1(4),C'NO'        SYSPROC=NO\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPSYSP3 DS    0H                  SYSPROC VALUES OF LENGTH THREE\n         DC    AL1(0),C'YES'       SYSPROC=YES\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPSYSP4 DS    0H                  SYSPROC VALUES OF LENGTH FOUR\n         DC    AL1(0),C'LAST'      SYSPROC=LAST\n         DC    AL1(4),C'NONE'      SYSPROC=NONE\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPSYSP5 DS    0H                  SYSPROC VALUES OF LENGTH FIVE\n         DC    AL1(0),C'AFTER'     SYSPROC=AFTER\n         DC    AL1(8),C'FIRST'     SYSPROC=FIRST\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPSYSP6 DS    0H                  SYSPROC VALUES OF LENGTH SIX\n         DC    AL1(8),C'BEFORE'    SYSPROC=BEFORE\n         DC    AL1(12),C'*'        SYSPROC=INVALID\n*\nVJPPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVJP PATCH'\n         DC    16F'0'\n*\nVJPLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVEX - COMPLETE JOBPROC ALLOCATION AND OPEN'\n***********************************************************************\n*                                                                     *\n*        IEFCNVEX                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE ROUTINE RECEIVES CONTROL FROM IEFCNVGS WHEN THE          *\n*        FIRST STATEMENT FOLLOWING A JOBPROC DD OR CONCATENATION      *\n*        IS DETECTED.                                                 *\n*                                                                     *\n*        INPUT:                                                       *\n*              NONE                                                   *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              CONCATENATED (IF NECESSARY) AND OPEN DYNAMIC PROCLIB   *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER                                       *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVEX DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VEXSTM              BRANCH AROUND ID\n*\n         DC    AL1(VEXIDL)         LTH OF IDENTIFICATION PREFIX\nVEXID    DC    CL8'IEFCNVEX'       USER PROCLIB SUPPORT MODULE ID\nVEXIDL   EQU   *-VEXID             LENGTH OF IDENTIFICATION HEADER\n*\nVEXSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVEX,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVEXSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVEXSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVEXCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVEXCN        STORE IT BACK\n*\n         LA    R15,VEXEXIT         POINT AT DEFAULT RECOVERY ADDRESS\n         ST    R15,PPWVEXRT        STORE IN RETRY ADDRESS\n*\n         OI    PPWVEXFL,PPWVEXEX   INDICATE WE ARE HERE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK IF WE HAVE ANYTHING TO DO                              *\n*                                                                     *\n***********************************************************************\n*\n         IEFCNTRC 1STEXEC\n*\n         OI    PPWFLAG2,PPW2CMPL   INDICATE FIRST EXEC\n*\n         TM    PPWFLAG1,PPW1HVJP   HAVE JOBPROC TO PROCESS ?\n         BZ    VEXEXIT             NO, RETURN\n*\n         TM    PPWFLAG1,PPW1JPER   ERROR NOTED IN JOBPROC ?\n         BO    VEXEXIT             SO JUST RETURN\n*\n         LH    R0,PPWJPCNT         LOAD DD CARD COUNT\n         LTR   R0,R0               TEST IF ANY\n         BZ    VEXEXIT             FORGET THE WHOLE THING\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ALLOCATE THE SYSTEM PROCLIB DATA SETS IF NECESSARY           *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG4,PPW4SYSP   TEST IF SYSTEM PROCLIB(S) WANTED\n         BZ    VEXANSYS            NO, SKIP\n         TM    PPWFLAG3,PPW3NOSY   TEST IF SYSPROC UNAVAILABLE\n         BO    VEXANSYS            YES, SKIP CONCATENATION\n         ICM   R3,3,PPWJPSYS       GET COUNT OF SYSTEM PROCLIBS\n         BZ    VEXANSYS            BRANCH IF NOT\n*\n         OI    PPWVEXFL,PPWVEXAL   INDICATE WE ARE ALLOCATING\n*\n         OI    PPWFLAG1,PPW1CNJP   INDICATE CONCATENATION REQUIRED\n         LA    R3,1                START SYSTEM PROCLIB COUNT AT 1\n*\n         IEFCNTRC SPROCALC\n*\nVEXASYSL LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET ADDRESSABILITY TO DARB\n         MVI   S99VERB,S99VRBAL    INDICATE \"ALLOC DSNAME\" REQUEST\n         LA    R15,PPWDATXT        -> ALLOCATION TEXT POINTERS\n*\n         USING S99TUPL,R15         MAKE TEXT PTRS ADDRESSABLE\n         USING S99TUNIT,R14        MAKE TEXT UNITS ADDRESSABLE\n*\n         LH    R2,PPWJPCNT         GET CURRENT CONCATENATION NO.\n         LA    R2,1(,R2)           BUMP BY ONE\n*\n         LA    R14,PPWDDNMK        -> DDNAME RETURN TEXT UNIT SLOT\n         MVC   S99TUPAR(8),PPWDDBSE     SET THE BASE DDNAME\n         LA    R1,PPWDDSUF-1(R2)   GET THE DDNAME SUFFIX\n         MVC   S99TUPAR+7(1),0(R1) SET THE DDNAME SUFFIX\n         ST    R14,S99TUPTR        SET PTR TO RETURN DDNAME TEXT UNIT\n*\n         LR    R1,R3               GET SYSTEM PROCLIB NUMBER\n         BCTR  R1,0                SUBTRACT ONE\n         SLL   R1,2                MULTIPLY BY 4\n         L     R1,PPWSYSDS(R1)     LOAD PROCLIB JFCB ADDRESS\n         USING JFCBDSCT,R1\n*\n         LA    R14,PPWDSNMK        -> DSNAME TEXT UNIT SLOT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT UNIT PTR\n         MVC   S99TULNG,=Y(L'JFCBDSNM)  SET DATA SET NAME LENGTH\n         MVC   S99TUPAR(44),JFCBDSNM    MOVE THE DATA SET NAME\n         ST    R14,S99TUPTR        SET PTR TO \"DSNAME\" TEXT UNIT\n*\n         DROP  R1\n*\n         LA    R14,PPWDISPK        -> STATUS DISPOSITION TEXT\n         LA    R15,L'S99TUPTR(,R15)     -> NEXT TEXT PTR SLOT\n         ST    R14,S99TUPTR        SET PTR TO \"STATUS\" DISP TEXT\n*\n         OI    S99TUPTR,S99TUPLN   SET END OF TEXT UNITS INDICATOR\n*\n         DROP  R14,R15             DONE WITH DYNAMIC ALLOCATION PARMS\n*\n         LA    R1,PPWDARGL         R1 -> DYNAMIC ALLOC PARM LIST\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                ALLOCATE TO USER PROCLIB\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LTR   R15,R15             ALLOCATION SUCCESSFUL ?\n         BZ    VEXSYSOK            BRANCH IF YES\n*\n         ST    R15,PPWDARC         SAVE THE RETURN CODE\n         L     R15,PPWCNVDE        LOAD THE ANALYZE ROUTINE ADDR\n         BALR  R14,R15             DO ERROR ANALYSIS\n*\n         NI    PPWVEXFL,255-PPWVEXAL    DONE WITH ALLOCATIONS FOR NOW\n*\n         B     VEXEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ALLOCATION OK - UPDATE COUNT AND DDNAME LIST                 *\n*                                                                     *\n***********************************************************************\n*\nVEXSYSOK STH   R2,PPWJPCNT         UPDATE CONCATENATION NO.\n*\n         BCTR  R2,0                SUBTRACT ONE\n         MH    R2,=Y(L'PPWCONCD)   MULTIPLE BY 10\n         LA    R2,PPWCONCD(R2)     CALCULATE DDNAME POSITION\n         MVC   2(8,R2),PPWDDNME    COPY THE ALLOCATED DDNAME\n*\n         LA    R3,1(,R3)           INCREMENT SYSTEM PROCLIB COUNT\n         CH    R3,PPWJPSYS         ARE WE DONE?\n         BNH   VEXASYSL            LOOP IF WE AREN'T\n*\n         NI    PPWVEXFL,255-PPWVEXAL    DONE WITH ALLOCATIONS FOR NOW\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INFORM THE USER OF THE TYPE OF SYSTEM PROCLIB SEARCH         *\n*                                                                     *\n***********************************************************************\n*\n         LA    R0,MSGNO823         SYSTEM CONCATENATION MESSAGE\n         LA    R1,VEXAFTER         ASSUME AFTER USER DATA SETS\n         TM    PPWFLAG4,PPW4SYSF   TEST FOR WANTING THEM FIRST\n         BZ    *+8                 BRANCH IF NOT\n         LA    R1,VEXBEFOR         POINT TO BEFORE TEXT\n*\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             INFORM USER\n*\n         B     VEXSYSAL            AND THE SYSTEM DATA SETS ARE ALLOCED\n*\nVEXANSYS DS    0H\n         LA    R0,MSGNO824         NO SYSTEM CONCATENATION MESSAGE\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             INFORM USER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONCATENATE ALL USER AND SYSTEM PROCLIB DATA SETS TOGETHER   *\n*                                                                     *\n***********************************************************************\n*\nVEXSYSAL DS    0H\n         TM    PPWFLAG1,PPW1CNJP   REQUIRE CONCATENATION ?\n         BO    VEXCONCT            YES, PERFORM CONCATENATION\n         TM    PPWFLAG4,PPW4SYSP   TEST IF SYSTEM PROCLIB(S) WANTED\n         BZ    VEXOPEN             NO, SKIP\n         TM    PPWFLAG3,PPW3NOSY   TEST IF SYSPROC UNAVAILABLE\n         BO    VEXOPEN             YES, SKIP CONCATENATION\n*\nVEXCONCT DS    0H\n         OI    PPWVEXFL,PPWVEXCO   INDICATE CONCATENATING\n*\n         IEFCNTRC JPROCCON\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET DARB ADDRESSABILITY\n         MVI   S99VERB,S99VRBCC    INDICATE CONCATENATION REQUEST\n         LA    R15,PPWDATXT        -> ALLOCATION TEXT PTR SLOTS\n*\n         USING S99TUPL,R15         GET TEXT LIST ADDRESSABILITY\n         USING S99TUNIT,R14        MAKE TEXT UNITS ADDRESSABLE\n*\n         LA    R14,PPWCONCK        -> CONCATENATION TXT UNIT SLOT\n         ST    R14,S99TUPTR        SET PTR TO CONCATENATE TEXT\n*\n         LH    R1,PPWJPCNT         LOAD COUNT OF DDNAMES\n         STH   R1,S99TUNUM         SET NO. OF DDNAMES TO CONC.\n*\n         OI    S99TUPTR,S99TUPLN   FLAG END OF TEXT UNIT PTR'S\n*\n         DROP  R14,R15             DONE WITH DYNAMIC ALLOCATION PARMS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK FOR SYSPROC=FIRST AND REARRANGE THE DDNAMES IF SO      *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG4,PPW4SYSF   DO WE WANT THE SYSTEM STUFF FIRST\n         BZ    VEXDOCON            IF NOT, WE ARE SATISFIED\n*\n         LH    R15,PPWJPSYS        LOAD THE SYSTEM COUNT\n         LTR   R15,R15             DO WE HAVE ANY\n         BZ    VEXDOCON            BRANCH IF NOT\n         TM    PPWFLAG3,PPW3NOSY   ARE THEY AVAILABLE\n         BO    VEXDOCON            BRANCH IF NOT\n*\n         LNR   R15,R15             MAKE SYSTEM COUNT NEGATIVE\n         AR    R15,R1              CALCULATE HOW MANY USER DATA SETS\n*\n         MH    R1,=Y(L'PPWCONCD)   CALCULATE LENGTH TO SHIFT\n         LA    R14,PPWCONCD(R1)    CALCULATE PLACE FOR NEW NAME\n         BCTR  R1,0                SUBTRACT THE TRADITIONAL ONE\n*\nVEXSYS1S DS    0H\n         MVC   0(L'PPWCONCD,R14),PPWCONCD SHIFT THE FIRST NAME\n         EX    R1,VEXMVCDD         RIPPLE DOWN THE DDNAME LIST\n         BCT   R15,VEXSYS1S        LOOP THROUGH THE LIST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PERFORM THE CONCATENATION                                    *\n*                                                                     *\n***********************************************************************\n*\nVEXDOCON DS    0H\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n*\n         LA    R1,PPWDARGL         -> ALLOC REQUEST PARM PTR\n         DYNALLOC ,                CONCATENATE THE PROCLIB'S\n*\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LTR   R15,R15             WAS CONCATENATION OK ?\n         BZ    VEXSETCI            BRANCH IF YES\n*\n         ST    R15,PPWDARC         SAVE THE RETURN CODE\n         L     R15,PPWCNVDE        LOAD THE ANALYZE ROUTINE ADDR\n         BALR  R14,R15             DO ERROR ANALYSIS\n*\n         NI    PPWVEXFL,255-PPWVEXCO    TURN OFF CONCATENATING\n*\n         B     VEXEXIT             RETURN TO CALLER\n*\nVEXMVCDD MVC   PPWCONCD(*-*),PPWCONCD+L'PPWCONCD *** EXECUTE ONLY ***\n*\nVEXSETCI OI    PPWFLAG1,PPW1JPCN   SHOW FILES CONCATENATED\n*\n         NI    PPWVEXFL,255-PPWVEXCO    TURN OFF CONCATENATING\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OPEN THE USER PROCLIB(S)                                     *\n*                                                                     *\n***********************************************************************\n*\nVEXOPEN  DS    0H\n*\n         L     R2,PPWPPDCB         NOW POINT AT OUR DCB\n         USING IHADCB,R2\n*\n         MVC   DCBDDNAM,PPWCONCD+2 COPY OUR FIRST DCB NAME\n*\n         LA    R15,VEXTOPEN        POINT TO OPEN RECOVERY ADDRESS\n         ST    R15,PPWVEXRT        STORE IN RETRY ADDRESS\n*\n         OI    PPWVEXFL,PPWVEXOP   SET \"OPEN\" TRACE EVENT\n         ST    R2,PPWOCLST         STORE OUR DCB ADDRESS\n         OI    PPWOCLST,X'80'      SET LISTEND\n*\n         OPEN  MF=(E,PPWOCLST)     REOPEN THE SYSTEM PROCLIB\n*\nVEXTOPEN DS    0H\n         NI    PPWVEXFL,255-PPWVEXOP    RESET \"OPEN\" EVENT\n*\n         LA    R15,VEXEXIT         POINT AT DEFAULT RECOVERY ADDRESS\n         ST    R15,PPWVEXRT        STORE IN RETRY ADDRESS\n*\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    VEXER812            NO, SKIP\n         OI    PPWFLAG1,PPW1OPEN   ELSE SAVE STATUS\n*\n         L     R1,PPWJSDCB         LOAD ADDRESS OF CONVERTER'S DCB ADDR\n         ST    R2,0(,R1)           STORE THE NEW DCB ADDRESS\n         DROP  R2\n*\n         IEFCNTRC JPROCOPN\n*\n         B     VEXEXIT             RETURN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n***********************************************************************\n*\nVEXER812 DS    0H\n         LA    R0,MSGNO812         USER PROCLIB OPEN FAILED\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             GIVE USER HIS ERROR\n*\n         B     VEXEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVEXEXIT  DS    0H\n         SLR   R15,R15             ASSUME NO ERROR\n         TM    PPWFLAG1,PPW1JPER   ERROR NOTED IN JOBPROC ?\n         BZ    *+8                 BRANCH IF GOOD\n         LA    R15,4               INDICATE ERROR\n*\n         NI    PPWVEXFL,255-PPWVEXEX    TURN OFF WE ARE HERE\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         L     R14,12(,R13)        RELOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RELOAD REGS 0 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVEX                    *\n*                                                                     *\n***********************************************************************\n*\nVEXBEFOR DC    H'6',C'BEFORE'      BEFORE CONSTANT FOR MESSAGE\nVEXAFTER DC    H'5',C'AFTER'       AFTER CONSTANT FOR MESSAGE\n*\nVEXPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVEX PATCH'\n         DC    16F'0'\n*\nVEXLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVKW - KEYWORD SCAN'\n***********************************************************************\n*                                                                     *\n*        IEFCNVKW                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE ROUTINE IS CALLED TO SCAN A TEXT STRING FOR A            *\n*        SPECIFIC KEYWORD.                                            *\n*                                                                     *\n*        INPUT:                                                       *\n*              R1 POINTS TO 2 BYTE KEYWORD LENGTH FOLLOWED BY KEYWORD *\n*              PPWSTMTX -> TEXT STRING TO SCAN                        *\n*              PPWSTMTL = LENGTH OF TEXT STRING                       *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              R15 = 0 IF KEYWORD FOUND                               *\n*              R1  = ADDRESS OF KEYWORD START                         *\n*              R0  = LENGTH OF KEYWORD AND DATA STRING                *\n*              R15 = 4 IF BAD STATEMENT SYNTAX (R1/R0 UNPREDICTABLE)  *\n*              R15 = 8 IF KEYWORD NOT FOUND (R1/R0 UNPREDICTABLE)     *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER                                       *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVKW DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VKWSTM              BRANCH AROUND ID\n*\n         DC    AL1(VKWIDL)         LTH OF IDENTIFICATION PREFIX\nVKWID    DC    CL8'IEFCNVKW'       USER PROCLIB SUPPORT MODULE ID\nVKWIDL   EQU   *-VKWID             LENGTH OF IDENTIFICATION HEADER\n*\nVKWSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVKW,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVKWSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVKWSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVKWCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVKWCN        STORE IT BACK\n*\n         LA    R15,VKWEXIT         POINT AT RECOVERY ADDRESS\n         ST    R15,PPWVKWRT        STORE IN RETRY ADDRESS\n*\n         OI    PPWVKWFL,PPWVKWEX   INDICATE WE ARE HERE\n*\n         MVC   PPWKYWDL,0(R1)      COPY THE KEYWORD LENGTH\n         MVC   PPWKYWDT,2(R1)      COPY THE ACTUAL WORD (PLUS RESIDUAL)\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE TEXT STRING LOOKING FOR OUR PARAMETERS              *\n*                                                                     *\n***********************************************************************\n*\n         LH    R5,PPWSTMTL         LOAD THE LENGTH OF THE TEXT\n         L     R6,PPWSTMTX         LOAD THE TEXT ADDRESS\n*\nVKWSCAN  DS    0H\n         LTR   R5,R5               LOAD SCAN LENGTH\n         BNH   VKWNTFND            IF AT THE END, STOP SCAN\n*\n         LA    R15,VKWCOMMA        LET'S LOOK FOR FIRST COMMA\n         BAL   R14,VKWTRTXX        GO SCAN FOR A COMMA\n         LR    R2,R15              SAVE IT'S ADDRESS\n*\n         LA    R15,VKWEQUAL        LET'S LOOK FOR FIRST EQUAL SIGN\n         BAL   R14,VKWTRTXX        GO SCAN FOR A COMMA\n         LR    R3,R15              SAVE IT'S ADDRESS\n*\n         CR    R2,R3               IS THE COMMA BEFORE THE FIRST EQUAL\n         BH    VKWFIRST            IF NOT, BRANCH\n         BE    VKWNTFND            IF EQUAL, NEITHER WAS FOUND\n*\n***********************************************************************\n*                                                                     *\n*        SINCE COMMA IS BEFORE EQUAL SIGN, SKIP THE POSITIONAL        *\n*        PARAMETER.                                                   *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,1(,R2)           INCREMENT PAST COMMA\n         SR    R1,R6               CALCULATE LENGTH TO SKIP\n         SR    R5,R1               DECREMENT THE REMAINING LENGTH\n         LA    R6,0(R6,R1)         INCREMENT PAST THE POSITIONAL PARM\n*\n         B     VKWSCAN             AND TRY AGAIN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MATCH THE KEYWORD PARAMETER WITH WHAT WE ARE LOOKING FOR     *\n*                                                                     *\n***********************************************************************\n*\nVKWFIRST DS    0H\n         LR    R15,R3              COPY ADDRESS OF EQUAL SIGN\n         SR    R15,R6              CALCULATE KEYWORD LENGTH\n         SR    R5,R15              DECREMENT REMAINING LENGTH\n*\n         CH    R15,PPWKYWDL        IS IT THE SAME AS WHAT WE WANT\n         BNE   VKWNEXT1            IF NOT, GET NEXT PARAMETER\n         BCTR  R15,0               DECREMENT KEYWORD LENGTH\n         EX    R15,VKWCLCKW        MATCH THE KEYWORDS\n         BE    VKWGOTKW            BRANCH IF THIS IS WHAT WE WANT\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        KEYWORD IS NOT THE ONE WE WANT, SO GO FIND NEXT ONE          *\n*                                                                     *\n***********************************************************************\n*\nVKWNEXT1 DS    0H\n         LA    R6,1(,R3)           BUMP PAST CURRENT EQUAL SIGN\n         BCT   R5,*+8              AND CONTINUE SCAN\n         B     VKWSYNTX            IF NOTHING LEFT, ERROR\n*\n         SLR   R2,R2               SET UP PARENTHESIS COUNTER\n*\nVKWNEXTL CLI   0(R6),C','          LOOK FOR A COMMA\n         BNE   VKWNEXTC            BRANCH IF NOT\n*\n         LTR   R2,R2               ARE WE WITHIN PARENTHESES\n         BNZ   VKWNEXTC            IF SO, THIS ISN'T THE ONE\n*\n         LA    R6,1(,R6)           INCREMENT PAST THIS COMMA\n         BCT   R5,VKWSCAN          AND START THE SCAN\n         B     VKWSYNTX            ERROR IF COMMA AT THE END\n*\nVKWNEXTC DS    0H\n         CLI   0(R6),C'('          CHECK FOR LEFT PARENTHESIS\n         BNE   *+8                 BRANCH IF NOT\n         LA    R2,1(,R2)           INCREMENT COUNT\n*\n         CLI   0(R6),C')'          CHECK FOR RIGHT PARENTHESIS\n         BNE   *+12                BRANCH IF NOT\n         BCTR  R2,0                DECREMENT COUNT\n         LTR   R2,R2               HAS IT GONE NEGATIVE\n         BL    VKWSYNTX            IF SO, WE ARE IN TROUBLE\n*\n         LA    R6,1(,R6)           INCREMENT TO NEXT CHARACTER\n         BCT   R5,VKWNEXTL         LOOP LOOKING FOR COMMAS\n*\n         B     VKWNTFND            AT THE END WE ARE THROUGH\n*\nVKWCLCKW CLC   0(*-*,R6),PPWKYWDT  *** EXECUTE ONLY ***\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        KEYWORD IS THE ONE WE WANT.                                  *\n*                                                                     *\n***********************************************************************\n*\nVKWGOTKW DS    0H\n         SR    R2,R6               GET LENGTH OF KEYWORD DATA\n*\n         LR    R0,R2               COPY TOTAL STRING LENGTH\n         LR    R1,R6               COPY STRING START\n         SLR   R15,R15             INDICATE SUCCESS\n         B     VKWEXIT             AND LEAVE\n*\n***********************************************************************\n*                                                                     *\n*        KEYWORD WAS NOT FOUND.                                       *\n*                                                                     *\n***********************************************************************\n*\nVKWNTFND DS    0H\n         LA    R15,8               INDICATE NOT HERE\n         B     VKWEXIT             AND LEAVE\n*\n***********************************************************************\n*                                                                     *\n*        TEXT STRING HAS A SYNTAX ERROR.                              *\n*                                                                     *\n***********************************************************************\n*\nVKWSYNTX DS    0H\n         LA    R15,4               INDICATE SCAN WAS BAD\n         B     VKWEXIT             AND LEAVE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE TEXT STRING USING TRT TABLE IN R15.                 *\n*                                                                     *\n*        R15 ON RETURN IS ADDRESS OF CHARACTER OR END OF STRING ADDR. *\n*                                                                     *\n***********************************************************************\n*\nVKWTRTXX DS    0H\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R3,R6               SAVE THE STARTING ADDRESS FOR LATER\n*\nVKWTRTLP DS    0H\n         LR    R1,R5               LOAD REMAINING SCAN LENGTH\n         CH    R1,=H'256'          CHECK FOR MAX LENGTH\n         BNH   *+8                 BRANCH IF NOT BIG\n         LA    R1,256              SET MAXIMUM SCAN LENGTH\n*\n         BCTR  R1,0                DECREMENT FOR INSTRUCTION\n         EX    R1,VKWTRTSC         SCAN FOR CHARACTER IN QUESTION\n         BNZ   VKWTRTFN            BRANCH IF CHARACTER FOUND\n*\n         LA    R6,256(,R6)         ASSUME MAXIMUM LENGTH TRT\n         SH    R5,=H'256'          AND THE SAME HERE\n         BH    VKWTRTLP            AND LOOP IF SOME STRING LEFT\n*\n         LA    R1,1(R1,R3)         POINT PAST STRING IF NOT THERE\n*\nVKWTRTFN DS    0H\n         LR    R15,R1              SET ADDRESS OF WHERE FOUND\n         LM    R0,R12,20(R13)      RESTORE MOST REGISTERS\n         BR    R14                 RETURN\n*\nVKWTRTSC TRT   0(*-*,R6),0(R15)    *** EXECUTE ONLY ***\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVKWEXIT  DS    0H\n         NI    PPWVKWFL,255-PPWVKWEX    TURN OFF WE ARE HERE\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         L     R14,12(,R13)        RELOAD RETURN ADDRESS\n         LM    R2,R12,28(R13)      RELOAD REGS 2 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVKW                    *\n*                                                                     *\n***********************************************************************\n*\nVKWCOMMA DC    256X'00'            COMMA TRANSLATE AND TEST TABLE\n         ORG   VKWCOMMA+C','\n         DC    X'FF'\n         ORG   ,\n*\nVKWEQUAL DC    256X'00'            EQUAL TRANSLATE AND TEST TABLE\n         ORG   VKWEQUAL+C'='\n         DC    X'FF'\n         ORG   ,\n*\nVKWPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVKW PATCH'\n         DC    16F'0'\n*\nVKWLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVPD - PARAMETER DELETE SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*        IEFCNVPD                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE ROUTINE IS CALLED TO DELETE A PARAMETER STRING FROM      *\n*        THE TEXT STRING ORIGINALLY PASSED FROM THE CONVERTER.        *\n*                                                                     *\n*        INPUT:                                                       *\n*              R1 = STARTING ADDRESS OF TEXT STRING                   *\n*              R0 = TOTAL LENGTH OF STRING TO BE DELETED              *\n*              PPWSTMTX -> START OF FULL TEXT STRING                  *\n*              PPWSTMTL = LENGTH OF FULL TEXT STRING                  *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              UPDATED TEXT STRING AND LENGTH                         *\n*              UPDATED STATEMENT TEXT BLOCK (VIA IEFCNVXT)            *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER                                       *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVPD DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VPDSTM              BRANCH AROUND ID\n*\n         DC    AL1(VPDIDL)         LTH OF IDENTIFICATION PREFIX\nVPDID    DC    CL8'IEFCNVPD'       USER PROCLIB SUPPORT MODULE ID\nVPDIDL   EQU   *-VPDID             LENGTH OF IDENTIFICATION HEADER\n*\nVPDSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVPD,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVPDSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVPDSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVPDCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVPDCN        STORE IT BACK\n*\n         OI    PPWVPDFL,PPWVPDEX   INDICATE WE ARE HERE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE WHERE THE STRING IS                                *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,PPWSTMTX        LOAD TEXT STARTING ADDRESS\n         AH    R15,PPWSTMTL        POINT PAST THE END\n*\n         LR    R14,R1              COPY THE STRING ADDRESS\n         AR    R14,R0              GET ADDRESS FOLLOWING STRING\n*\n         CR    R15,R14             ARE THEY EQUAL (AT END OF TEXT)\n         BNE   VPDSHIFT            IF NOT WE NEED TO DO SOME SHIFTING\n*\n         BCTR  R1,0                BACK TEXT START TO THE COMMA\n         SR    R15,R1              CALCULATE LENGTH TO ELIMINATE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETER STRING IS AT THE END OF THE TEXT                   *\n*                                                                     *\n***********************************************************************\n*\n         BCTR  R15,0               DECREMENT FOR CLEARING\n         EX    R15,VPDXCJCL        ZERO OUT THE REMOVED PARAMETER\n*\n         LA    R1,1(,R15)          PASS THE AMOUNT TO THE UPDATE RTN\n         B     VPDUPDTE            AND GO UPDATE TEXT LENGTH\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETER STRING IS NOT AT THE END OF THE TEXT STRING        *\n*                                                                     *\n***********************************************************************\n*\nVPDSHIFT DS    0H\n         LA    R14,1(,R14)         POINT PAST COMMA FOLLOWING STRING\n         LR    R0,R14              COPY THIS ADDRESS\n         SR    R0,R1               CALCULATE AMOUNT WE ARE ELIMINATING\n         SR    R15,R14             CALCULATE THE AMOUNT THAT WE SHIFT\n*\nVPDSHFTL DS    0H\n         LR    R2,R15              COPY LENGTH TO SHIFT\n         CH    R2,=H'256'          CHECK MAXIMUM SHIFT\n         BNH   *+8                 BRANCH IF NOT TOO BIG\n         LA    R2,256              SET MAXIMUM SHIFT\n*\n         BCTR  R2,0                DECREMENT FOR MVC\n         EX    R2,VPDMVJCL         SHIFT THE JCL\n*\n         LA    R1,1(R1,R2)         INCREMENT WHERE TO SHIFT TO\n         LA    R14,1(R14,R2)       INCREMENT WHERE TO SHIFT FROM\n*\n         SR    R15,R2              DECREMENT MOVE LENGTH (-1)\n         BCT   R15,VPDSHFTL        BRANCH IF ANY RESIDUAL LENGTH\n*\n         LR    R15,R0              COPY LENGTH TO ELIMINATE\n         BCTR  R15,0               DECREMENT IT\n         EX    R15,VPDXCJCL        ZERO OUT THIS LENGTH OF JCL\n*\n         LR    R1,R0               PASS THE AMOUNT TO THE UPDATE RTN\n         B     VPDUPDTE            AND GO UPDATE THE LENGTH\n*\nVPDMVJCL MVC   0(*-*,R1),0(R14)    *** EXECUTE ONLY ***\n*\nVPDXCJCL XC    0(*-*,R1),0(R1)     *** EXECUTE ONLY ***\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE TEXT LENGTH - ADJUSTMENT AMOUNT ALREADY IN R1         *\n*                                                                     *\n***********************************************************************\n*\nVPDUPDTE DS    0H\n         LA    R0,8                INDICATE DATA UPDATE\n         L     R15,PPWCNVXT        LOAD UPDATE ROUTINE ADDRESS\n         BALR  R14,R15             GO DO THE UPDATE\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVPDEXIT  DS    0H\n         NI    PPWVPDFL,255-PPWVPDEX    TURN OFF WE ARE HERE\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         LM    R14,R12,12(R13)     RELOAD REGS 14 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVPD                    *\n*                                                                     *\n***********************************************************************\n*\nVPDPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVPD PATCH'\n         DC    8F'0'\n*\nVPDLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVPS - INTERCEPT CONVERTER POST SCAN EXIT'\n***********************************************************************\n*                                                                     *\n*        IEFCNVPS                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THE ROUTINE RECEIVES CONTROL FROM IEFCNWRT WHENEVER A        *\n*        CALL IS BEING MADE TO THE CONVERTER POST SCAN EXIT.          *\n*                                                                     *\n*        THIS ROUTINE WILL EXTRACT THE CNMB ANCHOR ADDRESS AND        *\n*        PASS ANY QUEUED MESSAGES TO THE CONVERTER.  IT THEN          *\n*        WILL INVOKE THE ORIGINAL POST SCAN EXIT AND THEN RETURNS     *\n*        TO THE CONVERTER.                                            *\n*                                                                     *\n*        WHEN THE INTERNAL TEXT FOR THE JOB CARD IS PASSED, THE       *\n*        SWA LOCATION FLAG IS SET IF EITHER THE SWA KEYWORD ON THE    *\n*        JOB CARD OR THE SWAABOVE/SWABELOW DD STATEMENT HAVE BEEN     *\n*        SPECIFIED.                                                   *\n*                                                                     *\n*        INPUT:                                                       *\n*              CONVERTER POST SCAN PARAMETER LIST                     *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              ANY ACCUMULATED CNMBS QUEUED TO THE CONVERTER          *\n*                                                                     *\n*        EXTERNAL REFERENCES:                                         *\n*              CALLS THE ORIGINAL POST SCAN EXIT                      *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER (IEFCNWRT)                            *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVPS DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VPSSTM              BRANCH AROUND ID\n*\n         DC    AL1(VPSIDL)         LTH OF IDENTIFICATION PREFIX\nVPSID    DC    CL8'IEFCNVPS'       USER PROCLIB SUPPORT MODULE ID\nVPSIDL   EQU   *-VPSID             LENGTH OF IDENTIFICATION HEADER\n*\nVPSSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVPS,R12        ESTABLISH PERMANENT BASE\n*\n         L     R15,PSATOLD-PSA     LOAD THE TCB ADDRESS\n         USING TCB,R15\n         L     R15,TCBFSA          LOAD THE FIRST SAVE AREA ADDRESS\n         USING FSADSECT,R15\n*\n         CLC   FSAPPEYE,=A(FSAPPEID)    IS THIS THE RIGHT SAVE AREA\n         BE    VPSCONT             IF SO, CONTINUE ON\n*\n         LM    R14,R12,12(R13)     RELOAD REGS 14 - 12\n         BR    R14                 RETURN AND HOPE FOR THE BEST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTABLISH THE SAVE AREA AND WORK AREA ADDRESS FROM           *\n*        THE ANCHORED WORK AREA.                                      *\n*                                                                     *\n***********************************************************************\n*\nVPSCONT  DS    0H\n         L     R15,FSAPPWAD        LOAD THE WORK AREA ADDRESS\n         USING PPWDSECT,R15\n         LA    R15,PPWVPSSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVPSSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVPSCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVPSCN        STORE IT BACK\n*\n         OI    PPWVPSFL,PPWVPSEX   INDICATE WE ARE HERE\n*\n         ST    R1,PPWPSER1         SAVE THE REGISTER 1 AT OUR ENTRY\n         MVC   PPWPSEPM(PPWPSEPL),0(R1) COPY THE PASSED PARAMETER LIST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PASS ANY ACCUMULATED CNMBS TO THE CONVERTER                  *\n*                                                                     *\n***********************************************************************\n*\n         ICM   R2,15,PPWCNMB       DO WE HAVE ANY CNMBS\n         BZ    VPSNCNMB            BRANCH IF NOT\n         XC    PPWCNMB,PPWCNMB     CLEAR THE ACCUMULATED CNMBS\n*\n         L     R1,PPWPSER1         LOAD THE PARAMETER LIST ADDRESS\n         LA    R1,4(,R1)           NOW POINT AT ANCHOR WORD\n*\n         ICM   R15,15,0(R1)        DO WE HAVE ANY ALREADY THERE\n         USING CNMB,R15\n         BNZ   VPSLCNMB            IF NOT RUN THE CHAIN\n*\n         ST    R2,0(,R1)           STICK OURS ON\n         B     VPSNCNMB            AND WE ARE DONE\n*\nVPSLCNMB ICM   R14,15,CNMBNPTR     RUN THE CHAIN\n         BZ    VPSCCNMB            BRANCH IF AT END\n         LR    R15,R14             COPY THE CNMB ADDRESS\n         B     VPSLCNMB            AND TRY AGAIN\n*\nVPSCCNMB DS    0H\n         ST    R2,CNMBNPTR         CHAIN OURS ON THE END OF THEIRS\n         DROP  R15\n*\nVPSNCNMB DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET THE SWA LOCATION FLAG IN THE JOB CARD TEXT HEADER        *\n*                                                                     *\n***********************************************************************\n*\n         L     R1,PPWPSER1         LOAD THE PARM LIST ADDRESS\n         L     R1,0(,R1)           LOAD THE INTERNAL TEXT ADDRESS\n         USING TEXT,R1\n*\n         TM    STRINDCS,JOBSTR     CHECK FOR A JOB STATEMENT\n         BZ    VPSNJOB             BRANCH IF NOT\n*\n         TM    PPWFLAG4,PPW4SWAA   DID USER REQUEST SWA=ABOVE\n         BO    VPSWABOV            BRANCH IF SO\n         TM    PPWFLAG4,PPW4SWAB   DID USER REQUEST SWA=BELOW\n         BZ    VPSNOSWA            BRANCH IF NOT\n*\n         NI    STRJIND2,255-JBXA   TURN OFF SWA ABOVE THE LINE FLAG\n         B     VPSNOSWA\n*\nVPSWABOV OI    STRJIND2,JBXA       TRUN ON SWA ABOVE THE LINE FLAG\n*\nVPSNOSWA DS    0H\n         B     VPSPOSTX            DONE WITH THE JOB STATEMENT\n*\nVPSNJOB  DS    0H\n         AGO   .BYPASS1\n         TM    STRINDCS,EXECSTR    IS THIS AN EXEC STATEMENT\n         BZ    VPSPOSTX            BRANCH IF WE AREN'T INTERESTED\n*\n         LA    R2,STREKEY\n         CLI   0(R2),EXECK         IS THIS REALLY AN EXEC\n         BNE   VPSEXECN\n         CLI   1(R2),2             ARE THERE TWO PARAMETERS\n         BE    VPSEXEC2            BRANCH IF SO\n*\n         SLR   R15,R15             CLEAR FOR INSERT\n         IC    R15,2(,R2)          INSERT LABEL LENGTH\n         LA    R2,3(R2,R15)        INCREMENT TO NEXT TEXT UNIT\n*\n         CLI   0(R2),PROCEK        IS THIS A PROC=\n         BNE   VPSEXECN            BRANCH IF NOT\n         CLI   1(R2),1             IS THERE ONLY ONE PARAMETER\n         BNE   VPSEXECN            BRANCH IF NOT\n         CLI   2(R2),8             IS IT THE RIGHT LENGTH\n         BNE   VPSEXECN            BRANCH IF NOT\n*\n         CLC   3(8,R2),=C'TESTPROC'     TEST FOR PHONEY NAME\n         BNE   VPSEXECN            BRANCH IF NOT\n         MVC   3(8,R2),=C'PROCTEST'     SUBSTITUTE ALTERNATE NAME\n*\n         B     VPSEXECN            BRANCH IF NOT\n*\nVPSEXEC2 SLR   R15,R15             CLEAR FOR INSERT\n         IC    R15,2(,R2)          INSERT LABEL LENGTH\n         LA    R2,3(R2,R15)        INCREMENT TO NEXT TEXT UNIT\n*\n         CLI   0(R2),8             IS IT THE RIGHT LENGTH\n         BNE   VPSEXECN            BRANCH IF NOT\n*\n         CLC   1(8,R2),=C'TESTPROC'     TEST FOR PHONEY NAME\n         BNE   VPSEXECN            BRANCH IF NOT\n         MVC   1(8,R2),=C'PROCTEST'     SUBSTITUTE ALTERNATE NAME\n*\n         B     VPSEXECN            BRANCH IF NOT\n*\nVPSEXECN DS    0H\n*\n.BYPASS1 ANOP\n         DROP  R1\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PASS CONTROL TO THE ORIGINAL POST SCAN EXIT                  *\n*                                                                     *\n***********************************************************************\n*\nVPSPOSTX DS    0H\n*\n         LA    R3,PPWEXLST         POINT AT ORIGINAL EXIT LIST\n         USING CNPREXIT,R3\n*\n         LA    R3,CNPRXENT         POINT AT OUR EXIT SECTION\n         USING CNPRXENT,R3\n*\n         CLI   CNPRLKID,CNPRXNAM   DO WE HAVE AN NAME\n         BNE   VPSADDR             BRANCH IF NOT\n*\n***********************************************************************\n*                                                                     *\n*        POST SCAN EXIT LIST CONTAINS A NAME FIELD                    *\n*                                                                     *\n***********************************************************************\n*\nVPSNAME  DS    0H\n         MVC   PPWGENWK(6),CNPREXEP     COPY FIRST 6 CHARACTERS OF NAME\n         MVI   PPWGENWK+6,C' '     BLANK THE 7TH CHARACTER\n         MVI   PPWGENWK+7,C' '     BLANK THE 8TH CHARACTER\n*\n         MVC   PPWGENWK+8(VPSLINKL),VPSLINKM COPY MODEL LINK PARM LIST\n*\n         OI    PPWVPSFL,PPWVPSLK   INDICATE WE ARE GOING TO POST SCAN\n*\n         L     R1,PPWPSER1         POINT AT POST SCAN EXIT PARM LIST\n         LINK  EPLOC=PPWGENWK,SF=(E,PPWGENWK+8)\n*\n         NI    PPWVPSFL,255-PPWVPSLK    INDICATE WE ARE BACK\n*\n         B     VPSNPST\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        POST SCAN EXIT LIST CONTAINS AN ADDRESS                      *\n*                                                                     *\n***********************************************************************\n*\nVPSADDR  DS    0H\n         TM    CNPRLKID,CNPRXADD+NELEXADD TEST FOR 3 OR 4 BYTE ADDR\n         BZ    VPSEXIT             IF NO EXIT, DO NOTHING\n*\n         L     R15,CNPREXAD        LOAD THE ACTUAL EXIT ADDRESS\n*\n         TM    CNPRLKID,CNPRXADD   TEST FOR 4 BYTE ADDRESS\n         BO    *+8                 BRANCH IF SO\n         N     R15,=X'00FFFFFF'    PURIFY HIGH ORDER BYTE\n*\n         L     R14,CVTPTR          LOAD THE CVT ADDRESS\n         USING CVT,R14\n         LA    R14,CVTBSM2         POINT AT BSM RETURN\n         DROP  R14\n*\n         OI    PPWVPSFL,PPWVPSAD   INDICATE WE ARE GOING TO POST SCAN\n*\n         L     R1,PPWPSER1         POINT AT POST SCAN EXIT PARM LIST\n         BASSM R2,R15              CALL THE POST SCAN EXIT\n*\n         NI    PPWVPSFL,255-PPWVPSAD    INDICATE WE ARE BACK\n*\n         EJECT\nVPSNPST  DS    0H\n*\n         DROP  R3\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER (IEFCNWRT)                                  *\n*                                                                     *\n***********************************************************************\n*\nVPSEXIT  DS    0H\n         NI    PPWVPSFL,255-PPWVPSEX    TURN OFF IEFCNVPS EXECUTING\n*\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         LM    R14,R12,12(R13)     RELOAD REGS 14 - 12\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,                   KILL ALL ADDRESSIBILITY\n*\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND DATA AREAS USED BY IEFCNVPS                    *\n*                                                                     *\n***********************************************************************\n*\nVPSLINKM LINK  EPLOC=*-*,SF=L      MODEL LINK PARM LIST\nVPSLINKL EQU   *-VPSLINKM\n*\nVPSPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVPS PATCH'\n         DC    16F'0'\n*\nVPSLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVCL - CLEANUP ROUTINE'\n***********************************************************************\n*                                                                     *\n*        IEFCNVCL                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE WILL PERFORM ANY CLEANUP IT CAN DETERMINE       *\n*        NEEDS TO BE DONE.  IT IS CALLED MAY TIMES IN AN ATTEMPT      *\n*        TO MAKE SURE THAT NOTHING RESIDUAL IS LEFT BEHIND FROM       *\n*        ONE INVOCATION OF THE CONVERTER TO ANOTHER.                  *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVCL DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VCLSTM              BRANCH AROUND ID\n*\n         DC    AL1(VCLIDL)         LTH OF IDENTIFICATION PREFIX\nVCLID    DC    CL8'IEFCNVCL'       USER PROCLIB SUPPORT MODULE ID\nVCLIDL   EQU   *-VCLID             LENGTH OF IDENTIFICATION HEADER\n*\nVCLSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVCL,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVCLSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVCLSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVCLCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVCLCN        STORE IT BACK\n*\n         LA    R15,VCLEXIT         SET RECOVERY ADDRESS\n         ST    R15,PPWVCLRT        SET THIS RETRY ADDRESS\n*\n         OI    PPWVCLFL,PPWVCLEX   INDICATE WE ARE HERE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLOSE THE DYNAMIC PROCLIB DATA SET AND RESTORE THE DCB       *\n*        ADDRESS IN THE CONVERTER WORK AREA BACK TO WHAT IT WAS.      *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG1,PPW1OPEN   WAS DYNAMIC PROCLIB DCB OPENED ?\n         BZ    VCLNOPEN            NO, SKIP\n*\n         LA    R15,VCLTCLOS        POINT AT RETRY FOR CLOSE ABEND\n         ST    R15,PPWVCLRT        SET THIS RETRY ADDRESS\n*\n         OI    PPWVCLFL,PPWVCLCL   INDICATE WE ARE CLOSING DOWN\n*\n         CLOSE MF=(E,PPWOCLST)     CLOSE SYSTEM PROCLIB\n*\nVCLTCLOS NI    PPWVCLFL,255-PPWVCLCL    TURN OFF CLOSE IN PROGRESS\n*\n         LA    R15,VCLEXIT         SET RECOVERY ADDRESS BACK TO NORMAL\n         ST    R15,PPWVCLRT        SET THIS RETRY ADDRESS\n*\n         TM    PPWVPPFL,PPWVPPEX   WERE WE CALLED FROM VPP\n         BO    VCLNODCB            IF SO, WE CAN'T UPDATE THE DCB ADDR\n*\n         L     R15,PPWCNDCB        NOW POINT AT ORIGINAL DCB\n         L     R1,PPWJSDCB         LOAD ADDRESS OF CONVERTER'S DCB ADDR\n         ST    R15,0(,R1)          STORE THE OLD DCB ADDRESS\n*\nVCLNODCB DS    0H\n         NI    PPWFLAG1,255-PPW1OPEN    CLEAR OPEN STATUS\n*\nVCLNOPEN DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DE-CONCATENATE THE PROCLIB DATA SETS IF MORE THAN ONE        *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG1,PPW1JPCN   ANY CONCATENATIONS DONE ?\n         BZ    VCLNDCON            NO, SKIP\n*\n         OI    PPWVCLFL,PPWVCLDC   INDICATE DECONCATENATING\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET DARB ADDRESSABILITY\n         MVI   S99VERB,S99VRBDC    INDICATE DE-CONCAT REQUEST\n         LA    R15,PPWDATXT        -> TEXT UNIT PTR SLOTS\n*\n         USING S99TUPL,R15         GET TEXT PTR ADDRESSABILITY\n         USING S99TUNIT,R14        GET TEXT UNIT ADDRESSABILITY\n*\n         LA    R14,PPWCONCK        -> DE-CONCATENATE TEXT UNIT\n         LA    R0,DDCDDNAM         GET DE-CONCATENATE KEY\n         STH   R0,S99TUKEY         SET DE-CONCATENATE KEY\n         LA    R1,1                GET THE NUMBER OF DDNAMES\n         STH   R1,S99TUNUM         SET NO. OF DDNAMES\n         ST    R14,S99TUPTR        SET PTR TO DE-CONC TEXT UNIT\n         OI    S99TUPTR,S99TUPLN   FLAG END OF TEXT UNIT PTR'S\n*\n         DROP  R14,R15\n*\n         LA    R1,PPWDARGL         -> DYNAMIC ALLOC PARM PTR\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                DE-CONCATENATE PROCLIB'S\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LTR   R15,R15             WAS DE-CONCATENATION OK ?\n         BZ    VCLDCONS            RETURN IF YES\n*\n         ST    R15,PPWDARC         STORE THE RETURN CODE\n         L     R15,PPWCNVDE        LOAD THE ALLOC ANALYZE ROUTINE ADDR\n         BALR  R14,R15             DO ERROR ANALYSIS\n*\nVCLDCONS NI    PPWFLAG1,255-PPW1JPCN    CLEAR CONCATENATION STATUS\n         NI    PPWVCLFL,255-PPWVCLDC    DONE WITH DECONCATENATING\n*\nVCLNDCON DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DE-ALLOCATE THE USER AND SYSTEM PROCLIB DATA SETS            *\n*                                                                     *\n***********************************************************************\n*\n         LH    R2,PPWJPCNT         GET COUNT OF CONCATENATIONS\n         LTR   R2,R2               DO WE HAVE ANYTHING TO FREE ?\n         BZ    VCLNDALC            NO, GO RESET STATUS FLAGS\n*\n         OI    PPWVCLFL,PPWVCLDA   INDICATE DEALLOCATING\n*\n         LA    R15,PPWDARB         -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R15           GET DARB ADDRESSABILITY\n         MVI   S99VERB,S99VRBUN    INDICATE UNALLOC REQUEST\n         LA    R15,PPWDATXT        -> TEXT UNIT PTR SLOTS\n*\n         USING S99TUPL,R15         GET TEXT PTR ADDRESSABILITY\n         USING S99TUNIT,R3         GET TEXT UNIT ADDRESSABILITY\n*\n         LA    R3,PPWDDNMK         -> DDNAME TEXT UNIT\n         LA    R0,DUNDDNAM         SET DDNAME TEXT KEY\n         STH   R0,PPWDDNMK         SET DDNAME TEXT KEY\n*\n         ST    R3,S99TUPTR         SET PTR TO DDNAME TEXT UNIT\n         OI    S99TUPTR,S99TUPLN   FLAG END OF TEXT UNIT PTR'S\n*\n         DROP  R15\n*\nVCLDEDDN DS    0H\n         LR    R15,R2              GET THE CURRENT COUNTER\n         BCTR  R15,0               SUBTRACT ONE\n         MH    R15,=Y(L'PPWCONCD)  GET OFFSET IN DDNAME LIST\n         LA    R15,PPWCONCD(R15)   POINT TO ACTUAL NAME\n         MVC   S99TUPAR(8),2(R15)  MOVE THE DDNAME\n*\n         DROP  R3\n*\n         LA    R1,PPWDARGL         -> DYNAMIC ALLOC PARM PTR\n         OI    PPWFLAG3,PPW3DALC   INDICATE WE ARE IN ALLOC. CODE\n         DYNALLOC ,                FREE A PROCLIB DATA SET\n         NI    PPWFLAG3,255-PPW3DALC    INDICATE WE ARE BACK\n*\n         LTR   R15,R15             DID DE-ALLOCATE GO OK ?\n         BZ    VCLDENXT            YES, CONTINUE ON\n*\n         ST    R15,PPWDARC         STORE THE RETURN CODE\n         L     R15,PPWCNVDE        LOAD THE ALLOC ERROR ROUTINE ADDR\n         BALR  R14,R15             DO ERROR ANALYSIS\n*\nVCLDENXT BCT   R2,VCLDEDDN         DE-ALLOCATE ALL PROCLIB'S\n*\n         STH   R2,PPWJPCNT         RESET CONCATENATION COUNTER\n         NI    PPWVCLFL,255-PPWVCLDA    RESET DEALLOCATING\n*\nVCLNDALC DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RESTORE THE POST SCAN EXIT PARAMETER IN THE PARAMETER LIST   *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVPPFL,PPWVPPEX   ARE WE CALLED FROM IEFCNVPP\n         BZ    VCLNPOST            BRANCH IF NOT\n*\n         TM    PPWFLAG2,PPW2PSEI   IS THE POST SCAN INTERCEPT ACTIVE\n         BZ    VCLNPOST            BRANCH IF NOT\n*\n         L     R1,PPWCNTXT         LOAD ADDRESS OF PASSED TXT EXIT LIST\n         L     R15,PPWPMTXT        POINT AT PARAMETER LIST\n         ST    R1,0(,R15)          RESTORE THE PARAMETER LIST\n*\n         NI    PPWFLAG2,255-PPW2PSEI    INDICATE INTERCEPT IS NOW GONE\n*\nVCLNPOST DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DELETE THE DATA SET INCLUSION/EXCLUSION MODULE               *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG3,PPW3DSNL   DID WE LOAD THE DATA SET NAME MODULE\n         BZ    VCLNODSL            BRANCH IF NOT\n*\n         DELETE EPLOC=PPWDSNLS     DELETE THE MODULE\n*\n         NI    PPWFLAG3,255-PPW3DSNL    TURN OFF MODULE LOADED FLAG\n*\nVCLNODSL DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        CANCEL THE ESTAE AS WE ARE ESSENTIALLY DONE.                 *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWFLAG3,PPW3ESTA   DO WE HAVE OUR ESTAE ACTIVE\n         BZ    VCLNESTA            BRANCH IF NOT\n*\n         ESTAE 0\n*\n         NI    PPWFLAG3,255-PPW3ESTA    TURN OFF ESTAE STATUS FLAG\n*\nVCLNESTA DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO THE CALLER                                         *\n*                                                                     *\n***********************************************************************\n*\nVCLEXIT  DS    0H\n         NI    PPWVCLFL,255-PPWVCLEX    REMOVE BEING HERE\n*\n         L     R13,4(,R13)         UNCHAIN SAVE AREAS\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 AND RETURN TO CALLER\n*\n         DROP  ,\n*\n***********************************************************************\n*                                                                     *\n*        DATA NEEDED FOR CLEANUP                                      *\n*                                                                     *\n***********************************************************************\n*\nVCLPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVCL PATCH'\n         DC    16F'0'\n*\nVCLLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'DYNAMIC ALLOCATION ERROR ANALYSIS'\n***********************************************************************\n*                                                                     *\n*        IEFCNVDE                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE ANALYZES ERRORS DETECTED BY THE OS/VS DYNAMIC   *\n*        ALLOCATION ROUTINES. COMMON ERRORS WILL CAUSE A SPECIFIC     *\n*        ERROR MESSAGE TO BE PRODUCED WHILE ALL OTHERS WILL CAUSE     *\n*        A WTP MESSAGE GIVING A LESS PRECISE ERROR DESCRIPTION.       *\n*        IN THIS LATTER CASE THE USER WILL ALSO RECEIVE MESSAGE       *\n*        XXX808I INFORMING HIM THAT HE SHOULD EXAMINE THE WTP         *\n*        MESSAGE FOR ERROR DIAGNOSIS.                                 *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER VIA R14.                              *\n*              ABEND THE CONVERTER BECAUSE OF UNRECOVERABLE ERROR.    *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVDE DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VDESTM              BRANCH AROUND ID\n*\n         DC    AL1(VDEIDL)         LTH OF IDENTIFICATION PREFIX\nVDEID    DC    CL8'IEFCNVDE'       USER PROCLIB SUPPORT MODULE ID\nVDEIDL   EQU   *-VDEID             LENGTH OF IDENTIFICATION HEADER\n*\nVDESTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVDE,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVDESA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVDESA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVDECN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVDECN        STORE IT BACK\n*\n         LA    R15,VDEEXIT         POINT AT RECOVERY ADDRESS\n         ST    R15,PPWVDERT        AND STORE IN RETRY FIELD\n*\n         OI    PPWVDEFL,PPWVDEEX   INDICATE WE ARE HERE\n*\n         IEFCNTRC ENTERVDE\n*\n         LA    R2,PPWDARB          -> DYNAMIC ALLOC REQUEST BLOCK\n         USING S99RB,R2            MAKE DARB ADDRESSABLE\n*\n         MVC   PPWDFRCD,PPWDARC    SET RETURN CODE FOR DAIRFAIL\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ANALYZE ALLOCATION TIME ERRORS                               *\n*                                                                     *\n***********************************************************************\n*\n         CLI   S99VERB,S99VRBAL    IS THIS AN ALLOCATION FAILURE\n         BNE   VDEAERRC            NO, TRY CONCATENATION\n*\n         CLI   S99ERROR,DALOCATE   IS THIS A CATALOG LOCATE ERROR\n         BE    VDEER805            GO GIVE ERROR MESSAGE\n         CLI   S99ERROR,DALOBTAN   IS THIS AN OBTAIN ERROR ?\n         BE    VDEER807            GO GIVE ERROR MESSAGE\n         CLI   S99ERROR,DALRNOTA   IS THIS A \"RESOURCE\" ERROR ?\n         BNE   VDEER808            NO, GIVE ERROR CODE IN MESSAGE\n*\n         CLI   S99ERROR+1,DALDSNEX EXCLUSIVE \"DSN\" REQUEST ?\n         BE    VDEER813            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALDSNNA DATA SET CURRENTLY \"IN USE\" ?\n         BE    VDEER813            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALUNITE UNIT NOT AVAILABLE ?\n         BE    VDEER814            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALUNITI INVALID UNIT NAME ?\n         BE    VDEER814            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALVOLNM VOLUME NOT MOUNTED ?\n         BE    VDEER806            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALVOLNA VOLUME NOT AVAILABLE ?\n         BE    VDEER806            YES, GIVE ERROR MESSAGE\n         CLI   S99ERROR+1,DALCVOLE CVOL NOT MOUNTED ?\n         BE    VDEER815            YES, GIVE ERROR MESSAGE\n*\n         B     VDEER808            GIVE GENERAL FAILURE MESSAGE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ANALYZE CONCATENATION ERRORS                                 *\n*                                                                     *\n***********************************************************************\n*\nVDEAERRC CLI   S99VERB,S99VRBCC    CONCATENATION FAILURE ?\n         BE    VDEER809            GIVE ERROR MESSAGE\n*\n***********************************************************************\n*                                                                     *\n*        ANALYZE DE-CONCATENATION ERRORS                              *\n*                                                                     *\n***********************************************************************\n*\nVDEAERRD CLI   S99VERB,S99VRBDC    DE-CONCATENATION FAILURE ?\n         BNE   VDEAERRR            NO, TRY DE-ALLOCATION\n*\n         CLC   S99ERROR,=X'0438'   DDNAME NOT FOUND ?\n         BNE   VDEER808            NO, GIVE MESSAGE AND ABEND\n*\n         B     VDEEXIT             RETURN -> IGNORE ERROR\n*\n***********************************************************************\n*                                                                     *\n*        ANALYZE DE-ALLOCATION ERRORS                                 *\n*                                                                     *\n***********************************************************************\n*\nVDEAERRR CLI   S99VERB,S99VRBUN    DE-ALLOCATION FAILURE ?\n         BNE   VDEEXIT             IMPOSSIBLE ERROR -> RETURN\n*\n         CLC   S99ERROR,=X'0438'   DDNAME NOT FOUND ?\n         BNE   VDEER808            NO, GIVE MESSAGE AND ABEND\n*\n         B     VDEEXIT             RETURN TO CALLER\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - CATALOG SEARCH ERROR                    *\n*                                                                     *\n***********************************************************************\n*\nVDEER805 DS    0H\n         LA    R0,MSGNO805\n         B     VDEAERRM\n*\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - VOLUME NOT MOUNTED                      *\n*                                                                     *\n***********************************************************************\n*\nVDEER806 DS    0H\n         LA    R0,MSGNO806\n         B     VDEAERRM\n*\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - DATA SET NOT ON VOLUME                  *\n*                                                                     *\n***********************************************************************\n*\nVDEER807 DS    0H\n         LA    R0,MSGNO807\n         B     VDEAERRM\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GENERAL DEALLOCATION ERROR - USE DAIRFAIL                    *\n*                                                                     *\n***********************************************************************\n*\nVDEER808 DS    0H\n         LA    R1,PPWDFPRM         -> DAIRFAIL PARM LIST\n*\n         OI    PPWVDEFL,PPWVDEDF   INDICATE WE ARE DAIRFAILING\n         LINK  SF=(E,VDEDFAIL)     ISSUE WTP FOR FAILURE\n         NI    PPWVDEFL,255-PPWVDEDF    WE ARE NOW BACK FROM DAIRFAIL\n*\n         CLI   S99VERB,S99VRBDC    FAILURE DURING DE-CONCAT. ?\n         BE    VDEER816            YES, ABEND THE CONVERTER\n         CLI   S99VERB,S99VRBUN    FAILURE DURING DE-ALLOCATION ?\n         BE    VDEER817            YES, ABEND THE CONVERTER\n*\n         LA    R0,MSGNO808         PROCLIB ALLOCATION FAILED\n         B     VDEAERRM            ISSUE ERROR MESSAGE\n*\n***********************************************************************\n*                                                                     *\n*        GENERAL CONCATENATION ERROR - USE DAIRFAIL                   *\n*                                                                     *\n***********************************************************************\n*\nVDEER809 DS    0H\n         LA    R1,PPWDFPRM         -> DAIRFAIL PARM LIST\n*\n         OI    PPWVDEFL,PPWVDEDF   INDICATE WE ARE DAIRFAILING\n         LINK  SF=(E,VDEDFAIL)     ISSUE WTP FOR FAILURE\n         NI    PPWVDEFL,255-PPWVDEDF    WE ARE NOW BACK FROM DAIRFAIL\n*\n         LA    R0,MSGNO809         USER PROCLIB CONCATENATION ERR\n         B     VDEAERRM\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - DATA SET IN USE                         *\n*                                                                     *\n***********************************************************************\n*\nVDEER813 DS    0H\n         LA    R0,MSGNO813\n         B     VDEAERRM\n*\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - UNIT NOT AVAILABLE (INVALID)            *\n*                                                                     *\n***********************************************************************\n*\nVDEER814 DS    0H\n         LA    R0,MSGNO814\n         B     VDEAERRM\n*\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION - CATALOG NOT AVAILABLE                   *\n*                                                                     *\n***********************************************************************\n*\nVDEER815 DS    0H\n         LA    R0,MSGNO815\n         B     VDEAERRM\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DECONCATENTAION FAILURE                                      *\n*                                                                     *\n***********************************************************************\n*\nVDEER816 DS    0H\n         LA    R0,MSGNO816         GIVE USER ERROR MESSAGE TOO\n*\n         B     VDEABEND            AND ABEND THE CONVERTER\n*\n***********************************************************************\n*                                                                     *\n*        DEALLOCATION FAILURE                                         *\n*                                                                     *\n***********************************************************************\n*\nVDEER817 DS    0H\n         LA    R0,MSGNO817         LOAD THE MESSAGE NUMBER\n*\nVDEABEND DS    0H\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE ADDRESS\n         BALR  R14,R15             GO ISSUE MESSAGE\n*\n***********************************************************************\n*                                                                     *\n*        ABEND THE CONVERTER                                          *\n*                                                                     *\n***********************************************************************\n*\n         ABEND PPABEND,DUMP,,SYSTEM LET JES CLEANUP CONVERTER\n*\n***********************************************************************\n*                                                                     *\n*        DISPLAY ERROR MESSAGE                                        *\n*                                                                     *\n***********************************************************************\n*\nVDEAERRM DS    0H\n         L     R15,PPWCNVMS        GIVE USER ERROR MESSAGE\n         BALR  R14,R15\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVDEEXIT  DS    0H\n         NI    PPWVDEFL,255-PPWVDEEX    INDICATE WE ARE LEAVING\n*\n         L     R13,4(,R13)         UNCHAIN SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS\n         BR    R14                 RETURN TO CALLER\n*\n         DROP  ,\n*\n***********************************************************************\n*                                                                     *\n*        DATA AREA FOR DYNAMIC ALLOCATION ERROR MESSAGE ROUTINE       *\n*                                                                     *\n***********************************************************************\n*\nVDEDFAIL LINK EP=IKJEFF18,SF=L     DAIRFAIL LINK PARM LIST\n*\nDALOCATE EQU   X'17'               CATALOG LOCATE FAILED\nDALOBTAN EQU   X'67'               DSCB OBTAIN FAILED\nDALRNOTA EQU   X'02'               RESOURCE NOT AVAILABLE\nDALDSNEX EQU   X'0C'                  UNABLE TO GET DATA SET EXCLUSIVE\nDALDSNNA EQU   X'10'                  DATA SET IN USE\nDALUNITE EQU   X'14'                  UNAVAILABLE UNIT SPECIFIED\nDALVOLNM EQU   X'18'                  REQUIRED VOLUME NOT MOUNTED\nDALUNITI EQU   X'1C'                  INVALID UNIT SPECIFIED\nDALVOLNA EQU   X'20'                  VOLUME NOT AVAILABLE\nDALCVOLE EQU   X'3C'                  CVOL NOT MOUNTED\n*\nVDEPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVDE PATCH'\n         DC    8F'0'\n*\nVDELITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVMS - ISSUE MESSAGE ROUTINE'\n***********************************************************************\n*                                                                     *\n*        IEFCNVMS                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE WILL ISSUE A MESSAGE.  THE MESSAGE WILL EITHER  *\n*        BE ISSUED AS A WTO, STORED IN A CNMB FOR LATER PASSING TO    *\n*        THE CONVERTER, OR PASSED TO THE CONVERTER INTERNAL MESSAGE   *\n*        ROUTINE.                                                     *\n*                                                                     *\n*        SOME MESSAGE WILL RESULT IN THE JCL ERROR FLAG BEING SET.    *\n*                                                                     *\n*        INPUT:                                                       *\n*              REGISTER 0 CONTAINS THE MESSAGE NUMBER                 *\n*              IT WILL BE NEGATIVE IF A WTO IS TO BE ISSUED           *\n*              (NO JCL ERROR IN THIS CASE).                           *\n*              REGISTER 1 CONTAINS THE ADDRESS OF VARIABLE TEXT       *\n*              (IF ANY) - A HALF WORD LENGTH FOLLOWED BY THE TEXT     *\n*              REGISTER 14 IS THE RETURN ADDRESS UNLESS THE BYTE      *\n*              IT POINTS TO IS ZERO.  IN THIS CASE, THE VARIABLE      *\n*              DATA IS INLINE AND RETURN IS TO 2 BYTES PLUS THE       *\n*              LENGTH OF THE INLINE DATA (PLUS ONE IF ODD) BEYOND     *\n*              THE ADDRESS IN REGISTER 14.                            *\n*                                                                     *\n*        EXIT:                                                        *\n*              RETURN TO CALLER OF THIS ROUTINE.                      *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVMS DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VMSSTM              BRANCH AROUND ID\n*\n         DC    AL1(VMSIDL)         LTH OF IDENTIFICATION PREFIX\nVMSID    DC    CL8'IEFCNVMS'       USER PROCLIB SUPPORT MODULE ID\nVMSIDL   EQU   *-VMSID             LENGTH OF IDENTIFICATION HEADER\n*\nVMSSTM   STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVMS,R12        ESTABLISH PERMANENT BASE\n*\n         LR    R15,R13             COPY THE CURRENT SAVE AREA ADDRESS\n         N     R15,=X'FFFFF000'    ROUND BACK TO A PAGE BOUNDARY\n         USING PPWDSECT,R15\n         LA    R15,PPWVMSSA        POINT AT NEW SAVE AREA\n*\n         ST    R13,4(,R15)         STORE BACK POINTER\n         ST    R15,8(,R13)         STORE FORWARD POINTER\n         LR    R13,R15             SET NEW SAVE AREA POINTER\n*\n         DROP  R15                 DROP AREA ADDRESSABILITY\n         USING PPWVMSSA,R13        AND START IT AT THE SAVE AREA\n*\n         L     R15,PPWVMSCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVMSCN        STORE IT BACK\n*\n         LA    R15,VMSEXIT         POINT AT RECOVERY ADDRESS\n         ST    R15,PPWVMSRT        STORE IN RETRY FIELD\n*\n         OI    PPWVMSFL,PPWVMSEX   INIDCATE WE ARE EXECUTING\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GO FORMAT THE MESSAGE TEXT                                   *\n*                                                                     *\n***********************************************************************\n*\n         CLI   0(R14),X'00'        CHECK FOR INLINE VARIABLE DATA\n         BNE   *+6                 BRANCH IF NOT INLINE\n         LR    R1,R14              COPY DATA ADDRESS\n*\n         BAL   R14,VMSLOCMS        GO BUILD THE MESSAGE\n*\n         L     R2,PPWVMTAD         LOAD THE MESSAGE TABLE ADDRESS\n         USING MSGDSECT,R2\n*\n         TM    MSGFLAG1,MSG1TRCE   IS THIS A TRACING MESSAGE\n         BZ    VMSNTRCE            BRANCH IF NOT\n         TM    PPWOPTN1,PPWO1DBG   ARE WE IN TRACE MODE\n         BZ    VMSEXIT             RETURN WITH NO MESSAGE IF NOT\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VMSEXIT             NO TRACING MESSAGE IF MASTER\n*\nVMSNTRCE DS    0H\n         TM    MSGFLAG1,MSG1ERR    TEST FOR FATAL ERROR MESSAGE\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWFLAG1,PPW1JPER   BYPASS ALL FURTHER PROCESSING\n*\n         LTR   R0,R0               TEST IF NEGATIVE\n         BM    VMSDOWTO            IF SO, MESSAGE IS A WTO\n*\n         TM    MSGFLAG1,MSG1WTO    IS THIS A WTO ONLY MESSAGE\n         BO    VMSDOWTO            BRANCH IF SO\n*\n         ICM   R0,15,PPWCNVWA      DO WE HAVE AN ADDRESS HERE\n         BNZ   VMSIMMED            IF SO, USE IMMEDIATE MSG ROUTINE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD A CNMB FOR LATER PASSING TO THE CONVERTER              *\n*                                                                     *\n***********************************************************************\n*\n         LA    R14,(CNMBSIZE+CNMBMAXL+7)/8*8 CALCULATE SIZE OF CNMB\n*\n         GETMAIN RU,LV=(R14),                                          X\n               SP=230,LOC=(BELOW,ANY) GET A CNMB\n*\n         USING CNMB,R1\n         XC    CNMB((CNMBSIZE+CNMBMAXL+7)/8*8),CNMB CLEAR THE CNMB\n*\n         MVC   CNMBID,=A(CNMBCID)  SET THE BLOCK ID\n         MVI   CNMBVER,CNMBCVER    SET THE VERSION\n         MVI   CNMBSUBP,230        SET THE SUBPOOL\n         STH   R14,CNMBLEN         STORE THE LENGTH\n*\n         TM    MSGFLAG1,MSG1ERR    TEST FOR FATAL ERROR MESSAGE\n         BZ    *+8                 BRANCH IF NOT\n         OI    CNMBOPTS,CNMBFJOB   INDICATE THE JOB SHOULD BE FAILED\n*\n         LH    R15,PPWMSGLN        LOAD THE MESSAGE LENGTH\n         CH    R15,=Y(CNMBMAXL)    CHECK MAXIMUM LENGTH MESSAGE\n         BNH   *+8                 BRANCH IF OK\n         LA    R15,CNMBMAXL        SET THIS AS THE MAXIMUM\n*\n         STC   R15,CNMBMLEN        STORE THE MESSAGE LENGTH\n         BCTR  R15,0               SUBTRACT THE OBIGATORY ONE\n         EX    R15,VMSMSGMV        MOVE THE TEXT\n*\n         DROP  R1\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHAIN THE NEW CNMB ONTO ANY PREVIOUS ONES                    *\n*                                                                     *\n***********************************************************************\n*\n         LA    R15,PPWCNMB-(CNMBNPTR-CNMB) FAKE THE CNMB POINTER\n         USING CNMB,R15            FAKE A USING\n*\nVMSCNMBL ICM   R14,15,CNMBNPTR     LOAD POINTER TO NEXT CNMB\n         BZ    VMSCNMBA            BRANCH IF AT THE END\n         LR    R15,R14             SHIFT THIS ADDRESS\n         B     VMSCNMBL            AND TRY AGAIN\n*\nVMSCNMBA ST    R1,CNMBNPTR         CHAIN ON THIS CNMB\n*\n         TM    PPWOPTN1,PPWO1DBG   ARE WE IN TRACING MODE\n         BO    VMSDOWTO            IF SO, ALSO ISSUE WTO\n         B     VMSEXIT             IF NOT, WE ARE DONE\n*\n         DROP  R15\n*\n         USING CNMB,R1\nVMSMSGMV MVC   CNMBMSG(*-*),PPWMSGTX MOVE MESSAGE TEXT - EXECUTE ONLY\n         DROP  R1\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ISSUE MESSAGE USING CONVERTER IMMEDIATE MESSAGE ROUTINE      *\n*                                                                     *\n***********************************************************************\n*\nVMSIMMED DS    0H\n         OI    PPWVMSFL,PPWVMSIM   INDICATE WE ARE IN THE IMM ROUTINE\n*\n         LA    R0,12               INDICATE WE NEED TO ISSUE A MESSAGE\n         LR    R1,R2               PASS THE MESSAGE TABLE ADDRESS\n         L     R15,PPWCNVXT        LOAD THE ROUTINE ADDRESS\n         BALR  R14,R15             GO CALL THE SUBROUTINE\n*\n         NI    PPWVMSFL,255-PPWVMSIM    INDICATE WE ARE BACK\n*\n         TM    PPWOPTN1,PPWO1DBG   ARE WE IN TRACING MODE\n         BO    VMSDOWTO            IF SO, ALSO ISSUE WTO\n         B     VMSEXIT             IF NOT, WE ARE DONE\n*\n         DROP  R2                  DONE WITH MESSAGE TABLE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MESSAGE IS AN OPERATOR WTO                                   *\n*                                                                     *\n***********************************************************************\n*\nVMSDOWTO DS    0H\n         MVC   PPWTOWRK(4),PPWWTOMD     MOVE THE WTO PREFIX\n         LA    R15,PPWTOWRK+4\n*\n         LH    R1,PPWMSGLN         LOAD THE MESSAGE LENGTH\n         BCTR  R1,0                SUBTRACT THE OBIGATORY ONE\n         EX    R1,VMSWTOMV         MOVE THE TEXT\n*\n         LA    R15,1(R15,R1)       CALCULATE PAST THE TEXT\n         MVC   0(4,R15),PPWWTOMD+4 MOVE THE ROUTE/DESC CODES\n*\n         LH    R1,PPWMSGLN         LOAD THE MESSAGE LENGTH\n         AH    R1,PPWTOWRK         ADD IN MODEL LENGTH\n         STH   R1,PPWTOWRK         STORE THE NEW LENGTH\n*\n         OI    PPWVMSFL,PPWVMSWT   INDICATE WE ARE WTOING\n*\n         WTO   MF=(E,PPWTOWRK)     ISSUE THE WTO\n*\n         NI    PPWVMSFL,255-PPWVMSWT    INDICATE WE ARE BACK\n*\n         B     VMSEXIT             AND RETURN\n*\nVMSWTOMV MVC   0(*-*,R15),PPWMSGTX MOVE THE TEXT - EXECUTE ONLY\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n*\nVMSEXIT  DS    0H\n         NI    PPWVMSFL,255-PPWVMSEX    INIDCATE WE ARE RETURNING\n*\n         L     R13,4(,R13)         UNCHAIN SAVE AREAS\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         CLI   0(R14),0            CHECK FOR INLINE DATA\n         BNE   VMSEXITO            BRANCH IF NOT INLINE\n*\n         LH    R15,0(,R14)         LOAD THE TRACE ID LENGTH\n         TM    1(R14),X'01'        TEST FOR ODD NUMBER\n         BZ    *+8                 BRANCH IF NOT ODD\n         LA    R15,1(,R15)         INCREMENT SIZE\n*\n         LA    R14,2(R14,R15)      INCREMENT PAST THE INLINE DATA\n*\nVMSEXITO DS    0H\n         LM    R15,R12,16(R13)     RELOAD SAVED REGISTERS\n         BR    R14                 RETURN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOCATE THE MESSAGE TEXT ENTRY AND BUILD THE MESSAGE          *\n*                                                                     *\n*        R0 CONTAINS THE MESSAGE NUMBER (MAY BE NEGATIVE)             *\n*        R1 CONTAINS THE VARIABLE TEXT POINTER                        *\n*                                                                     *\n*        ON EXIT, PPWVMTAD WILL CONTAIN MESSAGE TABLE ADDRESS         *\n*                 PPWMSGTX WILL CONTAIN CONSTRUCTED MESSAGE TEXT      *\n*                 PPWMSGLN WILL CONTAIN CONSTRUCTED MESSAGE LENGTH    *\n*                                                                     *\n***********************************************************************\n*\nVMSLOCMS DS    0H\n         STM   R14,R12,12(R13)     SAVE ALL REGISTERS\n         OI    PPWVMSFL,PPWVMSMB   INDICATE WE ARE BUILDING MESSAGE\n*\n         L     R2,=A(IEFCNMSG)     LOAD MESSAGE TABLE ADDRESS\n         USING MSGDSECT,R2\n*\n         LPR   R0,R0               MAKE SURE NUMBER IS POSITIVE\n*\nVMSLOCLP CLC   MSGMSGNO,=H'0'      ARE WE AT THE END\n         BE    VMSLOCFN            IF SO, RETURN NULL MESSAGE\n         CLM   R0,3,MSGMSGNO       MATCH MESSAGE NUMBERS\n         BE    VMSLOCFN            RETURN IF FOUND\n*\n         AH    R2,MSGNEXT          GET THE NEXT MESSAGE ADDRESS\n         B     VMSLOCLP            AND TRY AGAIN\n*\nVMSLOCFN DS    0H\n         ST    R2,PPWVMTAD         SAVE ADDRESS OF TABLE\n*\n         TM    MSGFLAG1,MSG1TRCE   IS THIS A TRACING MESSAGE\n         BZ    VMSLOCNT            BRANCH IF NOT\n         TM    PPWOPTN1,PPWO1DBG   ARE WE IN TRACE MODE\n         BZ    VMSLOCEX            RETURN WITH NO MESSAGE IF NOT\n         TM    PPWENVIR,PPWEMSTR   IS THIS THE MASTER\n         BO    VMSLOCEX            NO TRACING MESSAGE IF MASTER\n*\nVMSLOCNT DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BEGIN CONSTRUCTING THE MESSAGE                               *\n*                                                                     *\n***********************************************************************\n*\n         MVC   PPWMSGTX(8),PPWMSGPF     COPY THE MESSAGE PREFIX\n         LA    R15,PPWMSGTX\n         AH    R15,PPWMSGPL        ADD THE MESSAGE PREFIX LENGTH\n*\n         CVD   R0,PPWDOUBL         CONVERT TO DECIMAL\n         OI    PPWDOUBL+7,X'0F'    FIX THE SIGN\n         UNPK  0(3,R15),PPWDOUBL+6(2)   PUT NUMBER IN MESSAGE\n         MVC   3(2,R15),=C'I '     SET THE SUFFIX AND SPACE\n         LA    R15,5(,R15)         INCREMENT TO WHERE TEXT STARTS\n*\n         TM    MSGFLAG1,MSG1VAR    DO WE HAVE ANY VARIABLE DATA\n         BO    VMSLOCVR            BRANCH IF SO\n*\n         LH    R14,MSGMSGLN        LOAD THE MESSAGE LENGTH\n         BCTR  R14,0               SUBTRACT THE OBIGATORY ONE\n         EX    R14,VMSLOCMV        MOVE THE TEXT\n         LA    R15,1(R15,R14)      INCREMENT PAST THE TEXT\n         B     VMSLOCRT            AND RETURN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MESSAGE IS TO CONTAIN VARIABLE DATA                          *\n*                                                                     *\n***********************************************************************\n*\nVMSLOCVR DS    0H\n         LH    R14,MSGVAROF        LOAD THE VARIABLE OFFSET\n         LTR   R14,R14\n         BZ    VMSLOCVA            BRANCH IF 0 - OFFSET AT START\n*\n         BCTR  R14,0               SUBTRACT THE ONE\n         EX    R14,VMSLOCMV        MOVE THE FIRST PART OF TEXT\n         LA    R15,1(R15,R14)      INCREMENT PAST THE TEXT\n*\n***********************************************************************\n*                                                                     *\n*        DETERMINE IF VARIABLE DATA IS ONE OF THE \"CANNED\" TYPES      *\n*                                                                     *\n***********************************************************************\n*\nVMSLOCVA DS    0H\n         TM    MSGFLAG2,MSG2JBPR   IS THIS A JOBPROC VARIABLE DATA\n         BZ    *+8                 BRANCH IF NOT\n         LA    R1,PPWJBPRL         IS SO, POINT AT JOBPROC DD LENGTH\n*\n         TM    MSGFLAG2,MSG2SYSP   IS THIS A SYSPROC VARIABLE DATA\n         BZ    *+8                 BRANCH IF NOT\n         LA    R1,PPWSYSPL         IS SO, POINT AT SYSPROC KEYWORD LEN\n*\n         TM    MSGFLAG2,MSG2DSN    IS THIS A DSNAME VARIABLE REQUEST\n         BZ    *+8                 BRANCH IF NOT\n         LA    R1,PPWDSNML         IS SO, POINT AT DSNAME LENGTH\n*\n         TM    MSGFLAG2,MSG2SWAK   IS THIS A SWA VARIABLE DATA\n         BZ    *+8                 BRANCH IF NOT\n         LA    R1,PPWSWAKL         IS SO, POINT AT KEYWORD LENGTH\n*\n         LH    R14,0(,R1)          LOAD THE VARIABLE LENGTH\n         LTR   R14,R14             TEST FOR A NULL LENGTH\n         BNZ   *+12                BRANCH IF LENGTH OK\n         LA    R1,VMSLOCUK         POINT AT UNKNOWN VARIABLE DATA\n         LH    R14,0(,R1)          LOAD THE UNKNOWN LENGTH\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE THE VARIABLE DATA                                       *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,2(,R1)           BUMP PAST THE LENGTH PREFIX\n         BCTR  R14,0               DECREMENT THE TRADITIONAL 1\n         EX    R14,VMSLOCVM        MOVE THE VARIABLE DATA\n         LA    R15,1(R15,R14)      INCREMENT PAST THE TEXT\n*\n         LH    R14,MSGMSGLN        LOAD THE MESSAGE LENGTH\n         LH    R0,MSGVAROF         LOAD THE VARIABLE OFFSET\n         SR    R14,R0              GET THE RESIDUAL LENGTH\n         BZ    VMSLOCRT            IF NONE, VARIABLE DATA WAS AT END\n*\n***********************************************************************\n*                                                                     *\n*        MOVE THE SECOND PART OF THE MESSAGE                          *\n*                                                                     *\n***********************************************************************\n*\n         LA    R1,MSGMSGTX         POINT AT START OF TEXT\n         AR    R1,R0               POINT TO SECOND HALF OF MESSAGE\n         BCTR  R14,0               SUBTRACT THE ONE\n         EX    R14,VMSLOCVM        MOVE THE VARIABLE DATA\n         LA    R15,1(R15,R14)      INCREMENT PAST THE TEXT\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALCULATE THE LENGTH OF THE MESSAGE TEXT                     *\n*                                                                     *\n***********************************************************************\n*\nVMSLOCRT DS    0H                  COPY MESSAGE ADDRESS\n         LA    R14,PPWMSGTX        POINT AT TEXT START\n         SR    R15,R14             CALCULATE THE LENGTH\n         STH   R15,PPWMSGLN        STORE THE MESSAGE LENGTH\n*\nVMSLOCEX DS    0H                  COPY MESSAGE ADDRESS\n         NI    PPWVMSFL,255-PPWVMSMB    INIDCATE MESSAGE BUILD DONE\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14\n*\nVMSLOCMV MVC   0(*-*,R15),MSGMSGTX MOVE MESSAGE TEXT - EXECUTE ONLY\nVMSLOCVM MVC   0(*-*,R15),0(R1)    MOVE MESSAGE TEXT - EXECUTE ONLY\n*\n         DROP  ,\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MESSAGE SUBROUTINE DATA AREAS                                *\n*                                                                     *\n***********************************************************************\n*\nVMSLOCUK DC    H'7',C'UNKNOWN'     BAD VARIABLE DATA SUBSTITUTE\n*\nVMSPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVMS PATCH'\n         DC    16F'0'\n*\nVMSLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNVST - SYSTEM ERROR RECOVERY EXIT (ESTAE)'\n***********************************************************************\n*                                                                     *\n*        IEFCNVST                                                     *\n*        ********                                                     *\n*                                                                     *\n*        THIS ROUTINE SETS THE JOB ERROR FLAG FOR THE CONVERTER       *\n*        AND PRINTS AN ERROR MESSAGE FOR THE USER.                    *\n*                                                                     *\n*        INPUT: R1 -> SYSTEM DIAGNOSTIC WORK AREA (SDWA).             *\n*                                                                     *\n*        OUTPUT:                                                      *\n*              UPDATED SDWA FOR THE APPROPRIATE ERROR RECOVERY        *\n*              ROUTINE.                                               *\n*                                                                     *\n*        EXIT:                                                        *\n*              NORMAL:  RETURN TO R/TM2 VIA SETRP MACRO.              *\n*              NO SDWA: RETURN TO R/TM2 WITH R15 = 0.                 *\n*                                                                     *\n*        IT IS HOPED THAT SDWAPARM CONTAINS A PTR TO THE              *\n*        DYNAMIC PROCLIB WORK AREA.                                   *\n*                                                                     *\n***********************************************************************\n*\nIEFCNVST DS    0D\n         USING *,R15               TEMPORARY BASE\n         B     VSTSTM              BRANCH AROUND ID\n*\n         DC    AL1(VSTIDL)         LTH OF IDENTIFICATION PREFIX\nVSTID    DC    CL8'IEFCNVST'       USER PROCLIB SUPPORT MODULE ID\nVSTIDL   EQU   *-VSTID             LENGTH OF IDENTIFICATION HEADER\n*\nVSTSTM   DS    0H\n         C     R0,=F'12'           CHECK FOR NO SDWA\n         BE    VSTSTAEZ            GIVE UP IF NONE\n         LTR   R1,R1               CHECK FOR NO SDWA\n         BE    VSTSTAEZ            GIVE UP IF NONE\n*\n         STM   R14,R12,12(R13)     SAVE CALLERS REGS\n         LR    R12,R15             COPY BASE REGISTER\n         DROP  R15                 DROP TEMPORARY BASE\n         USING IEFCNVST,R12        ESTABLISH PERMANENT BASE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PREPARE THE SDWA AND CHECK FOR UNRECOVERABLE ABENDS          *\n*                                                                     *\n***********************************************************************\n*\n         LR    R3,R1               SET PTR TO SDWA\n         USING SDWA,R3             ESTABLISH SDWA ADDRESSABILITY\n*\n         L     R15,SDWAPARM        GET THE WORK AREA ADDRESS\n         USING PPWDSECT,R15\n*\n         LA    R15,PPWVSTSA        ESTABLISH NEW SAVE AREA\n         USING PPWVSTSA,R15        ESTABLISH SPECIAL ADDRESSABILITY\n*\n         ST    R13,4(,R15)         SAVE THE CURRENT SAVE AREA\n         ST    R15,8(,R13)         CHAIN THIS TOO\n*\n         LR    R13,R15             ESTABLISH NEW SAVE AREA\n         DROP  R15\n         USING PPWVSTSA,R13        ESTABLISH NEW ADDRESSABILITY\n*\n         L     R15,PPWVSTCN        LOAD THE DEBUG FIELD\n         LA    R15,1(,R15)         INCREMENT\n         ST    R15,PPWVSTCN        STORE IT BACK\n*\n         CLI   PPWCFLG1,0          CHECK WHERE WE ARE - HERE OR CNV\n         BNE   VSTSDUMP            IF IN CONVERTER, PERCOLATE\n*\n         TM    PPWVSTFL,PPWVSTEX   WERE WE HERE BEFORE\n         BZ    *+8                 BRANCH IF NOT\n         OI    PPWVSTFL,PPWVSTRC   INDICATE RECURSIVE ERROR\n*\n         OI    PPWVSTFL,PPWVSTEX   INDICATE ESTAE EXIT EXECUTING\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FILL IN SDWA DATA FIELDS                                     *\n*                                                                     *\n***********************************************************************\n*\n         MVC   SDWAMODN,VSTSMODN   SET THE MODULE NAME\n         MVC   SDWACSCT,VSTSCSCT   SET THE \"CSECT NAME\" BASE\n         MVC   SDWAREXN,VSTID      SET THE RECOVERY ROUTINE NAME\n*\n         MVC   SDWANAME,SDWAMODN   SET THE MODULE NAME\n         MVC   SDWAEPA,=A(IEFCNVPP)     SET THE ENTRY POINT\n*\n         MVI   SDWADPVA,SDWAHEX    DUMP USER DATA IN HEX\n         MVI   SDWAURAL,PPWDBGLN   MOVE IN LENGTH OF USER DATA\n         MVC   SDWAVRA(PPWDBGLN),PPWDBGST TRACE INFO FOR LOGREC\n*\n         ICM   R15,15,SDWAXPAD     LOAD POINTER POINTER\n         BZ    VSTNEXTN            BRANCH IF NO POINTERS\n*\n         USING SDWAPTRS,R15\n         ICM   R15,15,SDWASRVP     LOAD SERVICE DATA POINTER\n         BZ    VSTNEXTN            BRANCH IF NONE\n*\n         USING SDWARC1,R15\n         MVC   SDWACIDB,=C'DYNA'   COMPONENT PREFIX\n         MVC   SDWACID,=C'PRCLB'   COMPONENT SUFFIX\n         MVC   SDWASC,VSTSVCHD+1   COPY PART OF THE DUMP HEADER\n         MVC   SDWARRL,VSTID       SET THE RECOVERY ROUTINE NAME\n*\n         L     R14,=A(IEFCNVPP)    LOAD MODULE ENTRY POINT\n         USING IEFCNVPP,R14\n*\n         MVC   SDWAMDAT,VPPSDATE   SET THE MDOULE DATE\n         MVC   SDWAMVRS,VPPVERSN   SET THE MODULE VERSION\n*\n         DROP  R14,R15\n*\nVSTNEXTN DS    0H\n         OI    PPWFLAG1,PPW1JPER   ALSO FLAG ERROR FOR US\n*\n         TM    PPWVMSFL,PPWVMSEX   WERE WE IN THE MESSAGE ROUTINE\n         BO    VSTNMSG             BRANCH IF SO - DON'T ISSUE MESSAGE\n*\n         LA    R0,MSGNO849         ABEND MESSAGE NUMBER\n         L     R15,PPWCNVMS        LOAD MESSAGE ROUTINE\n         BALR  R14,R15             ISSUE ERROR MESSAGE\n*\nVSTNMSG  DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE LOCATION OF THE ERROR                          *\n*                                                                     *\n***********************************************************************\n*\n         OI    SDWAACF2,SDWARCRD   INDICATE LOGREC RECORD REQ'D\n*\n         SR    R1,R1               CLEAR R1\n         ICM   R1,3,SDWACMPC       R1 = ABEND CODE (XXX0)\n         SRL   R1,4                DROP INSIGNIFICANT BITS\n         CLM   R1,3,=Y(PPABEND)    IS THIS A SELF INFLICTED ABEND\n         BE    VSTSDUMP            BRANCH IF YES\n*\n         TM    PPWVSTFL,PPWVSTRC   IS THIS A RECURSIVE ABEND ?\n         BO    VSTSDUMP            BRANCH IF SO\n*\n***********************************************************************\n*                                                                     *\n*        IEFCNVXT                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVXTFL,PPWVXTEX   FAILURE IN DATA EXTRACT/UPDATE\n         BZ    VSTSNVXT            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'XT'     INDICATE IEFCNVXT FAILED\n*\n         TM    PPWVXTFL,PPWVXTMS   TEST FOR BEING IN NON VXT\n         BO    VSTSDUMP            NO RECOVERY IF SO\n*\n         L     R2,PPWVXTRT         GRACEFUL EXIT OF EXTRACT ROUTINE\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVXT DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        IEFCNVMS                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVMSFL,PPWVMSEX   FAILURE IN MESSAGE ROUTINE\n         BZ    VSTSNVMS            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'MS'     INDICATE IEFCNVMS FAILED\n*\n         TM    PPWVMSFL,PPWVMSWT+PPWVMSIM TEST FOR BEING IN NON VMS\n         BNZ   VSTSDUMP            NO RECOVERY IF EITHER\n*\n         L     R2,PPWVMSRT         GRACEFUL EXIT OF MESSAGE ROUTINE\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVMS DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        IEFCNVDE                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVDEFL,PPWVDEEX   FAILURE IN DYN ALLOC ERROR ROUTINE\n         BZ    VSTSNVDE            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'DE'     INDICATE IEFCNVDE FAILED\n*\n         TM    PPWVDEFL,PPWVDEDF   ARE WE IN DAIRFAIL\n         BO    VSTSDUMP            NO RECOVERY IF SO\n*\n         L     R2,PPWVDERT         GRACEFUL EXIT OF DYN ALLOC ERR RTN\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVDE DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        IEFCNVKW                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVKWFL,PPWVKWEX   FAILURE IN DYN ALLOC ERROR ROUTINE\n         BZ    VSTSNVKW            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'KW'     INDICATE IEFCNVKW FAILED\n*\n         L     R2,PPWVKWRT         GRACEFUL EXIT\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVKW DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        IEFCNVJP                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVJPFL,PPWVJPEX   FAILURE IN JOBPROC PROCESSOR\n         BZ    VSTSNVJP            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'JP'     INDICATE IEFCNVJP FAILED\n*\n         L     R2,PPWVJPRT         GRACEFUL EXIT\n*\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVJP DS    0H\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        IEFCNVEX                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVEXFL,PPWVEXEX   FAILURE IN 1ST EXEC PROCESSOR\n         BZ    VSTSNVEX            BRANCH IF NOT\n         MVC   SDWACSCT+6(2),=C'EX'     INDICATE IEFCNVEX FAILED\n*\n         L     R2,PPWVEXRT         LOAD THE RETRY ADDRESS\n*\n         TM    PPWVEXFL,PPWVEXOP   IS PROCLIB OPEN IN PROGRESS?\n         BZ    VSTSRTRY            RETURN TO R/TM IF NOT\n*\n         NI    SDWAACF2,255-SDWARCRD    NO RECORDING FOR USER ERR\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNVEX DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        IEFCNVCL                                                     *\n*                                                                     *\n***********************************************************************\n*\n         TM    PPWVCLFL,PPWVCLEX   FAILURE IN CLEANUP PROCESSING?\n         BZ    VSTSNVCL            NO -> THINGS ARE IN BAD SHAPE\n         MVC   SDWACSCT+6(2),=C'CL'     INDICATE IEFCNVCL FAILED\n*\n         L     R2,PPWVCLRT         LOAD THE RECOVERY ADDRESS\n*\n         TM    PPWVCLFL,PPWVCLCL   IS PROCLIB CLOSE IN PROGRESS?\n         BZ    VSTSNCLC            BRANCH IF NOT\n*\n         NI    SDWAACF2,255-SDWARCRD    NO RECORDING FOR THIS ERROR\n         B     VSTSRTRY            RETURN TO R/TM\n*\nVSTSNCLC DS    0H\n         B     VSTSDUMP            DO NOT RECOVER FROM OTHER VCL ERROR\n*\nVSTSNVCL DS    0H\n*\n***********************************************************************\n*                                                                     *\n*        ALL OTHER CASES                                              *\n*                                                                     *\n***********************************************************************\n*\n         B     VSTSDUMP            DO NOT RECOVER FROM ANY OTHER ERRORS\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TAKE AN SVC DUMP OF THE ERROR                                *\n*                                                                     *\n***********************************************************************\n*\nVSTSRTRY DS    0H\n         OI    PPWVSTFL,PPWVSTRE   INDICATE WE WANT TO RECOVER\n*\nVSTSDUMP DS    0H\n         OI    PPWVSTFL,PPWVSTDM   INDICATE A DUMP IS IN PROGRESS\n         SDUMP MF=(E,VSTSVCDM)     INVOKE AN SVC DUMP\n         NI    PPWVSTFL,255-PPWVSTDM    DUMP IS DONE\n*\n         NI    PPWVSTFL,255-PPWVSTEX    TURN OFF WE ARE HERE\n*\n         TM    PPWVSTFL,PPWVSTRE   ARE WE RETRYING\n         BZ    VSTSNREC            IF NOT, DON'T RECOVER\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO RTM WITH RECOVERY                                  *\n*                                                                     *\n***********************************************************************\n*\n         NI    PPWVSTFL,255-PPWVSTRE    TURN OFF RETRY FOR RECURSION\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n*\n         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,WKAREA=(R3),              X\n               REGS=(14,12)        RETURN TO R/TM\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO RTM WITH NO RECOVERY                               *\n*                                                                     *\n***********************************************************************\n*\nVSTSNREC DS    0H\n         L     R13,4(,R13)         UNCHAIN THE SAVE AREA\n         SETRP REGS=(14,12),RC=0,RECORD=YES, * CONTINUE ABEND *        X\n               WKAREA=(R3)\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO RTM WITH NO RECOVERY (AND NO SDWA)                 *\n*                                                                     *\n***********************************************************************\n*\nVSTSTAEZ DS    0H                  NO SDWA ADDRESS PROVIDED\n         SLR   R15,R15             INDICATE NO RETRY\n         BR    R14                  AND RETURN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE EXIT DATA AREAS                                        *\n*                                                                     *\n***********************************************************************\n*\nVSTSMODN DC    CL8'IEFVH1'         LOAD MODULE NAME\nVSTSCSCT DC    CL8'IEFCNVXX'       ERROR ROUTINE\n*\nVSTSVCDM SDUMP HDRAD=VSTSVCHD,     SVC DUMP PARAMETER LIST             X\n               SDATA=(LSQA,PSA,RGN,TRT),                               X\n               MF=L\n*\nVSTSVCHD DC    AL1(40),CL40'AMDAHL DYNAMIC PROCLIB ESTAE DUMP'\n*\nVSTPATCH DS    0D                  PATCH AREA\n         DC    CL16'IEFCNVST PATCH'\n         DC    16F'0'\n*\nVSTLITRL LTORG ,                   FLUSH LITERALS\n*\n         TITLE 'IEFCNMST - ALL USER AND OPERATOR MESSAGE TEXT'\nIEFCNMSG DS    0D\n         IEFCNMSG 800,                                                 X\n               'SYNTAX ERROR IN ',                                     X\n               ' DD STATEMENT',                                        X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 801,                                                 X\n               'ILLEGAL USE OF \"',                                     X\n               '\" OPTION',                                             X\n               VARDATA=SYSPROC\n*\n         IEFCNMSG 802,                                                 X\n               ,' DATA SET NAME NOT SPECIFIED',                        X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 803,                                                 X\n               'DATA SET ',                                            X\n               ' NOT ELIGIBLE FOR DYNAMIC PROCLIB USAGE',              X\n               VARDATA=DSNAME\n*\n         IEFCNMSG 804,                                                 X\n               ,' CONCATENATION LIMIT EXCEEDED',                       X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 805,                                                 X\n               ,' DATA SET NOT FOUND IN CATALOG',                      X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 806,                                                 X\n               'VOLUME CONTAINING ',                                   X\n               ' DATA SET NOT MOUNTED',                                X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 807,                                                 X\n               ,' DATA SET NOT ON VOLUME',                             X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 808,                                                 X\n               ,' ALLOCATION FAILED',                                  X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 809,                                                 X\n               ,' CONCATENATION FAILED',                               X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 811,                                                 X\n               'VOLUME OR DEVICE TYPE NOT ALLOWED FOR ',               X\n               ' USAGE',                                               X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 812,                                                 X\n               ,' OPEN FAILED',                                        X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 813,                                                 X\n               ,' DATA SET NOT AVAILABLE UNDER REQUESTED DISPOSITION', X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 814,                                                 X\n               ,' DATA SET HAS INCORRECT UNIT SPECIFICATION',          X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 815,                                                 X\n               'CATALOG VOLUME REQUIRED FOR ',                         X\n               ' PROCESSING IS NOT MOUNTED',                           X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 816,                                                 X\n               ,' DE-CONCATENATION FAILED',                            X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 817,                                                 X\n               ,' DE-ALLOCATION FAILED',                               X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 821,                                                 X\n               'DATA SET ',                                            X\n               ' ALLOCATED FOR USER PROCLIB PROCESSING',               X\n               VARDATA=DSNAME,ERR=NO\n*\n         IEFCNMSG 822,                                                 X\n               'DATA SET ',                                            X\n               ' ALLOCATED FOR USER PROCLIB CONCATENATION',            X\n               VARDATA=DSNAME,ERR=NO\n*\n         IEFCNMSG 823,                                                 X\n               'SYSTEM PROCEDURE LIBRARIES WILL BE SEARCHED ',         X\n               ' USER PROCLIB(S)',                                     X\n               VARDATA=YES,ERR=NO\n*\n         IEFCNMSG 824,                                                 X\n               'SYSTEM PROCEDURE LIBRARIES WILL NOT BE SEARCHED',      X\n               ERR=NO\n*\n         IEFCNMSG 831,                                                 X\n               'UNIDENTIFIED VALUE SPECIFIED IN THE ',                 X\n               ' PARAMETER',                                           X\n               VARDATA=SWA\n*\n         IEFCNMSG 832,                                                 X\n               'SCHEDULER WORK AREA REQUESTED TO BE ',                 X\n               ' THE 16 MEG LINE',                                     X\n               VARDATA=YES,ERR=NO\n*\n         IEFCNMSG 836,                                                 X\n               'MISPLACED ',                                           X\n               ' STATEMENT',                                           X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 837,                                                 X\n               ,' NOT ALLOWED WHEN JCLLIB STATEMENT SPECIFIED',        X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 838,                                                 X\n               'JCLLIB NOT ALLOWED WHEN ',                             X\n               ' DD STATEMENT SPECIFIED',                              X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 842,                                                 X\n               'EXCESSIVE PARAMETER LENGTH IN THE DSNAME FIELD'\n*\n         IEFCNMSG 843,                                                 X\n               'UNIDENTIFIED PARAMETER IN THE ',                       X\n               ' FIELD',                                               X\n               VARDATA=SYSPROC\n*\n         IEFCNMSG 844,                                                 X\n               'INVALID SYNTAX IN THE DSNAME FIELD ON THE ',           X\n               ' STATEMENT',                                           X\n               VARDATA=JOBPROC\n*\n         IEFCNMSG 848,                                                 X\n               'DYNAMIC PROCLIB LIMITING MODULE ',                     X\n               ' NOT FOUND',                                           X\n               VARDATA=YES,ERR=NO,WTO=YES\n*\n         IEFCNMSG 849,                                                 X\n               'DYNAMIC PROCLIB PROCESSING ABENDED'\n*\n         IEFCNMSG 850,                                                 X\n               ,' LIBRARIES UNAVAILABLE',                              X\n               ERR=NO,WTO=YES,                                         X\n               VARDATA=SYSPROC\n*\n         IEFCNMSG 851,                                                 X\n               'TRACE POINT ',                                         X\n               ' ENCOUNTERED',                                         X\n               VARDATA=INLINE,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 853,                                                 X\n               'GST RC  ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 854,                                                 X\n               'GST STM ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 855,                                                 X\n               'GST TXT ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 856,                                                 X\n               'MOD TXT ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 857,                                                 X\n               'EXT TXT ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 858,                                                 X\n               'OFFSETS ',                                             X\n               VARDATA=YES,ERR=NO,WTO=YES,TRACE=YES\n*\n         IEFCNMSG 000,                                                 X\n               'UNKNOWN MESSAGE NUMBER'\n*\n         END   IEFCNVPP,(IEFCNVPP,0411,91308)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFCNVSI": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc9\\xd5\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "INCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS ELIGIBLE FOR STC DYNAMIC PROCLIBS          *\n*                                                                     *\n***********************************************************************\n*\nVLSSTCIN IEFCNDSN STCINCL,                                             X\n               SYS1.STARTAPP,                                          X\n               AMDA.STARTLIB,                                          X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVSX": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc5\\xe7\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EXCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS NOT ELIGIBLE FOR STC DYNAMIC PROCLIBS      *\n*                                                                     *\n***********************************************************************\n*\nVLSSTCEX IEFCNDSN STCEXCL,                                             X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVTI": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc9\\xd5\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "INCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS ELIGIBLE FOR TSO DYNAMIC PROCLIBS          *\n*                                                                     *\n***********************************************************************\n*\nVLSTSUIN IEFCNDSN TSUINCL,                                             X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFCNVTX": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x00(\\x00(\\x00\\x00\\xc5\\xe7\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EXCLIST"}, "text": "***********************************************************************\n*                                                                     *\n*        LIST OF DATA SETS NOT ELIGIBLE FOR TSO DYNAMIC PROCLIBS      *\n*                                                                     *\n***********************************************************************\n*\nVLSTSUEX IEFCNDSN TSUEXCL,                                             X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n               ,                                                       X\n\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VPP4411": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b')\\x00\\x00\\x00\\x00\\x910\\x9f\\x00\\x910\\x9f\\x189\\x012\\x012\\x00\\x00\\xd4\\xd6\\xc4\\xc2\\xc1\\xe2\\xc5@@@'", "ispf": {"version": "41.00", "flags": 0, "createdate": "1991-11-05T00:00:00", "modifydate": "1991-11-05T18:39:00", "lines": 306, "newlines": 306, "modlines": 0, "user": "MODBASE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT274/FILE274.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT274", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}