{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011423000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1528436, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 25, "INMDSNAM": "CBT.V500.FILE179.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE179.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\x0b'", "DS1TRBAL": "b'\\x82\\xf4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01@\\x00\\x05\\x01B\\x00\\x01\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$ASM": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x121\\x00A\\x00A\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:31:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         $$ASM &M=(JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC)\n.*.\n.*$MACRO=$$ASM      DATE=10/07/79       SOURCE=LDW\n.*\n.*  THIS MACRO IS AN INNER MACRO FOR THE 'ID' MACRO.\n.*       IT SETS GBLC'S FOR VARIOUS DATE AND TIME FORMATS:\n.*\n.*       &$$DATE1    DDMMMYY (EX: 29NOV79)\n.*       &$$DATE2    MM/DD/YY\n.*       &$$ASM      ASSEMBLER: 'F'=FX, 'G', 'H', 'S'=SPASM\n.*       &$$MM       MM OF CURRENT MONTH (NUMERIC)\n.*       &$$DD       DD OF CURRENT DAY (NUMERIC)\n.*       &$$YY       YY OF CURRENT DAY (LAST 2 DIGITS)\n.*       &$$MONTH    MMM - 3 CHAR MONTH ABBREV.\n.*       &$$DAY      (NOT CURRENTLY SET)\n.*       &$$YEAR     4 DIGIT YEAR\n.*.\n         GBLC  &$$DATE1,&$$DATE2,&$$ASM\n         GBLC  &$$MM,&$$DD,&$$YY\n         GBLC  &$$MONTH,&$$DAY,&$$YEAR\n         LCLC  &D\n         LCLA  &I\n&D       SETC  '&SYSDATE'\n         AIF   ('&D'(3,1) EQ '/').D1\n.*  ASMG:  10JUL79\n&$$ASM   SETC  'G'\n&$$YY    SETC  '&D'(1,2)                GET YEAR YY\n&$$MONTH SETC  '&D'(3,3)                GET MONTH MMM\n         AIF   (K'&D EQ 6).D2\n&$$DD    SETC  '&D'(6,2)                GET DAY DD\n         AGO   .D3\n.D2      ANOP\n&$$DD    SETC  '0'.'&D'(6,1)            GET DAY 0D\n.D3      ANOP\n&$$DATE1 SETC  '&$$DD&$$MONTH&$$YY'     SET DDMMMYY\n.D3A     ANOP\n&I       SETA  &I+1\n         AIF   ('&$$MONTH' NE '&M(&I)').D3A    FIND MONTH NAME\n&$$MM    SETC  '&I'\n         AIF   (&I GT 9).D4\n&$$MM    SETC  '0&I'\n.D4      ANOP\n&$$DATE2 SETC  '&$$MM/&$$DD/&$$YY'      SET MM/DD/YY\n         AGO   .COMMON\n.D1      ANOP\n&$$DATE2 SETC  '&D'                     SET MM/DD/YY\n&$$MM    SETC  '&D'(1,2)                GET MM\n&$$DD    SETC  '&D'(4,2)                GET DD\n&$$YY    SETC  '&D'(7,2)                GET YY\n&$$MONTH SETC  '&M(&$$MM)'              GET MONTH MMM\n&$$DATE1 SETC  '&$$DD&$$MONTH&$$YY'\n.*  NOW: ASMF(X) OR ASMH OR SPASM?\n&D       SETC  'ABCDEFGHI'\n         AIF   (K'&D EQ 8).D5           ASMF OR SPASM\n&$$ASM   SETC  'H'\n         AGO   .COMMON\n.D5      AIF   (K'&SYSTIME GT 5).D6\n&$$ASM   SETC  'F'\n         MEXIT\n.D6      ANOP\n&$$ASM   SETC  'S'\n.COMMON  ANOP\n&$$YEAR  SETC  '19&$$YY'                GET 19YY\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MF": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x05o\\x00\\x80\\x05o\\x14V\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-25T00:00:00", "modifydate": "1980-02-25T14:56:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         $MF   &MAP,&REG,&MF,&FAKE1,&SP=\n.*.\n.*$MACRO=$MF        DATE=04/00/79       SOURCE=UCLA\n.*  THIS MACRO IS USED TO ESTABLISH ADDRESSABILITY TO A DSECT\n.*  &MAP IS THE NAME OF THE DSECT\n.*  &REG IS THE REGISTER TO BE LOADED\n.*  &MF=(L|B|E,AREA)\n.*.\n         GBLB  &OMITTED,&DROP\n         LCLC  &AREA\n&OMITTED SETB  0\n&DROP    SETB  0                        DO NOT DROP REGISTER\n         AIF   ('&MF' NE '').MFYES\n&OMITTED SETB  1                        PARAMETER WAS OMMITTED\n.MFYES   ANOP\n&AREA    SETC  'DAPBAREA'\n         AIF   ('&MF(2)' EQ '').USEAREA\n&AREA    SETC  '&MF(2)'\n.USEAREA AIF   ('&MF(1)' EQ 'E' OR '&MF(1)' EQ '').MF1OK\n         AIF   ('&MF(1)' EQ 'B').MF1OK\n         AIF   ('&MF(1)' EQ 'L').MF1OK\n         MNOTE 4,'MF=&MF(1) IS AN INVALID TYPE, MF=E ASSUMED'\n.MF1OK   $RXR   ,&AREA,&REG             MF=(L|B|E,AREA)\n         USING  &MAP,&REG               ADDRESSIBILITY\n&DROP    SETB  1                        DROP REGISTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MVCX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00>\\x00>\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- $MVCX -- INTERNAL MACRO FOR MVCP AND MVCS\n         $MVCX &M,&O1\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         GBLC  &$MVCXA,&$MVCXR\n         LCLA  &I,&I1,&I2\n&$MVCXA  SETC  '0'\n&$MVCXR  SETC  '0'\n.* LOCATE D1 (DELIMITED BY '(' OR EOS)\n&I       SETA  1\n&I1      SETA  &I\n.LD1     AIF   (&I GT K'&O1).D1\n         AIF   ('&O1'(&I,1) EQ '(').D1\n&I       SETA  &I+1\n         AGO   .LD1\n.D1      ANOP\n&I2      SETA  &I-&I1\n         AIF   (&I2 LT 1).ER3\n&$MVCXA  SETC  '&O1'(&I1,&I2)\n         AIF   (&I GT K'&O1).O2\n.* LOCATE R1 (DELIMITED BY ',' OR ')')\n&I       SETA  &I+1\n&I1      SETA  &I\n.LR1     AIF   (&I GT K'&O1).ER4\n         AIF   ('&O1'(&I,1) EQ ')').R1\n         AIF   ('&O1'(&I,1) EQ ',').R1B\n&I       SETA  &I+1\n         AGO   .LR1\n.R1      AIF   (&I EQ &I1).ERX\n.R1B     ANOP\n&I2      SETA  &I-&I1\n         AIF   (&I2 LT 1).NR1\n&$MVCXR  SETC  '&O1'(&I1,&I2)\n.NR1     ANOP\n         AIF   ('&O1'(&I,1) EQ ')').NB1\n.* LOCATE B1 (OPTIONAL) IN FIRST OPERAND (DELIMITED BY ')')\n&I       SETA  &I+1\n&I1      SETA  &I\n.LB1     AIF   (&I GT K'&O1).ER5\n         AIF   ('&O1'(&I,1) EQ ')').B1\n&I       SETA  &I+1\n         AGO   .LB1\n.B1      ANOP\n&I2      SETA  &I-&I1\n         AIF   (&I2 LT 1).ER7\n&$MVCXA  SETC  '&$MVCXA.('.'&O1'(&I1,&I2).')'\n.NB1     ANOP\n         AIF   (&I LT K'&O1).ER8\n.O2      ANOP\n         MEXIT\n.ER3     MNOTE 8,'&M: NO D1 SPECIFIED'\n         AGO   .ERF\n.ER4     MNOTE 8,'&M: COULD NOT LOCATE DELIMITER AFTER R1'\n         AGO   .ERF\n.ERX     MNOTE 8,'&M: EXPRESSION INCOMPLETE -- R1 MISSING'\n         AGO   .ERF\n.ER5     MNOTE 8,'&M: COULD NOT LOCATE PAREN AFTER B1'\n         AGO   .ERF\n.ER7     MNOTE 8,'&M: EXPRESSION INCOMPLETE -- B1 MISSING'\n         AGO   .ERF\n.ER8     MNOTE 8,'&M: EXCESS DATA AFTER (R1,B1)'\n.ERF     MNOTE *,'INSTRUCTION FORMAT -- D1(R1,B1),D1(B2),R3'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RXQ": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x05o\\x00\\x80\\x05o\\x14V\\x00\\x17\\x00\\x17\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-25T00:00:00", "modifydate": "1980-02-25T14:56:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         $RXQ  &TARGET,&SEND,&LEN\n.*.\n.*$MACRO=$RXQ       DATE=04/00/79       SOURCE=UCLA\n.*  THIS MACRO WILL MOVE A CHARACTER STRING TO &TARGET.  IF &SEND IS\n.*  QUOTED, A LITERAL WILL BE USED, OTHERWISE &SEND IS THE NAME OF THE\n.*  SOURCE FIELD.  &LEN IS THE LENGTH OF &TARGET.\n.*.\n         GBLB  &OMITTED\n&OMITTED SETB  0\n         AIF   ('&SEND' EQ '' ).NOSEND\n         AIF   ('&SEND'(1,1) EQ '(').REGSEND\n         AIF   ('&SEND'(1,1) EQ '''').QSEND\n         MVC   &TARGET,&SEND\n         AGO   .END\n.REGSEND MVC   &TARGET,0&SEND\n         AGO   .END\n.QSEND   MVC   &TARGET,=CL&LEN&SEND\n         AGO   .END\n.NOSEND  MVC   &TARGET,=CL&LEN' '       NOT SPECIFIED\n&OMITTED SETB  1                        OPERAND WAS OMMITTED\n.END     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RXR": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x00\\x80\\x02?\\x00\\x80\\x03/\\x18F\\x00&\\x00 \\x00\\x07\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-01-23T00:00:00", "modifydate": "1980-02-01T18:46:00", "lines": 38, "newlines": 32, "modlines": 7, "user": "LDW"}, "text": "         MACRO\n&NFS     $RXR  &TARGET,&SEND,&REG,&H,&A=A\n.*.\n.*$MACRO=$RXR       DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO IS USED AS AN INNER MACRO.  IT WILL GET AN ADDRESS INTO\n.*  A REGISTER, STORE IT, DOING \"L\", \"LA\", \"LR\" AS APPROPRIATE FOR THE\n.*  SOURCE (&SEND), AND \"ST\" OR \"STH\" FOR &TARGET.\n.*\n.*  IF &TARGET IS NOT SPECIFIED THE VALUE WILL BE IN &REG\n.*  IF \"A=\" IS CODED (NULL OPERAND), A LOAD FROM A FULLWORD WILL BE\n.*             DONE INSTEAD OF A LOAD ADDRESS\n.*  IF \"H\" IS CODED, A \"STH\" WILL BE DONE INSTEAD OF \"ST\"\n.*\n.*  GBLC &$NFS WILL BE SET TO NULL IF ANY INSTRUCTION IS EXPANDED.\n.*.\n         GBLB  &OMITTED\n         GBLC  &$NFS\n&OMITTED SETB  0\n         AIF   ('&SEND' EQ '' ).NOSEND  NO SOURCE FIELD\n         AIF   ('&SEND'(1,1) EQ '(').REGSEND   SOURCE IS A REGISTER\n&NFS     L&A   &REG,&SEND\n&$NFS    SETC  ''\n         AIF   ('&TARGET' EQ '').END    LEAVE IN REGISTER\n         ST&H  &REG,&TARGET\n         AGO   .END\n.REGSEND AIF   ('&TARGET' NE '').RSTORE\n         AIF   ('&SEND(1)' EQ '&REG').END\n&NFS     LR    &REG,&SEND(1)\n&$NFS    SETC  ''\n         AGO   .END\n.RSTORE  ANOP\n&NFS     ST&H  &SEND(1),&TARGET\n&$NFS    SETC  ''\n         AGO   .END\n.NOSEND  ANOP\n&OMITTED SETB  1                        OPERAND WAS OMITTED\n.END     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$STP": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x03o\\x00\\x80\\x03o\"X\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-05T00:00:00", "modifydate": "1980-02-05T22:58:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&LBL     $STP  &A,&B\n.*.\n.*$MACRO=$STP       DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO IS USED AS AN INNER MACRO.  IT WILL STORE A PARAMETER\n.*  INTO A PARAMETER LIST.\n.*  THE FIRST OPERAND MAY BE A CONSTANT, LITERAL, OR ADDRESS VALUE\n.*  THE SECOND PARAMETER SHOULD BE AN ADDRESS VALUD\n.*\n.*  GBLC &$NFS WILL BE SET TO NULL IF ANY INSTRUCTION IS EXPANDED.\n.*.\n         GBLB  &OMITTED\n         GBLC  &$NFS\n&OMITTED SETB  0\n&$NFS    SETC  ''                       SOMETHING IS *ALWAYS* GENERATED\n         AIF   (2 EQ N'&A).L2\n         AIF   ('&A'(1,1) NE '(').L1\n&LBL     ST    &A(1),&B\n         MEXIT\n.L1      ANOP\n&LBL     LA    0,&A\n         AGO   .L3\n.L2      ANOP\n&LBL     L     0,&A(1)\n.L3      ST    0,&B\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$3270": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00y$\\x7f\\x00y%\\x0f\\x19\\x18\\x00+\\x00\\x19\\x00\\x1c\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1979-09-04T00:00:00", "modifydate": "1979-09-07T19:18:00", "lines": 43, "newlines": 25, "modlines": 28, "user": "MCGINTY"}, "text": "         MACRO\n         $3270 &C1,&C2\n         GBLC  &$3270\n         LCLA  &I,&N,&Z\n         LCLB  &TWICE\n         LCLC  &C\n.* $3270 - 09/06/79 SDM\n.*\n.*   RELATED MACROS:\n.*      F3270 - $3270 IS AN INTERNAL REFERENCE IN F3270.\n.*\n.*   GLOBAL SET SYMBOLS:\n.*      &$3270 - COMMUNICATION WITH THE EXTERNAL MACRO\n.*\n.*   THIS MACRO RECEIVES ANY SELF DEFINING VALUE AS THE FIRST\n.*   ARGUMENT AND RETURNS TWO HEXADECIMAL DIGITS REPRESENTING\n.*   A VALID 3270 (EBCDIC) CHARACTER IN THE GLOBAL CHARACTER\n.*   SETC SYMBOL '&$3270'.  THE LOW ORDER SIX BITS ARE FROM\n.*   THE INPUT ARGUMENT, AND THE HIGH ORDER TWO BITS ARE SET\n.*   TO MAKE IT VALID.\n.*\n.* 09/06/79 SDM - ADD SECOND CHARACTER CAPABILITY\n.* 09/04/79 SDM - NEW MACRO\n.*\n&$3270   SETC  ''\n&I       SETA  &C1\n.LOOP    ANOP\n&I       SETA  &I-&I/64*64\n&Z       SETA  &I/16\n&N       SETA  &I-&Z*16\n         AIF   (&N GT 9).SPEC\n&C       SETC  '1120'(&Z+1,1)\n         AIF   (&N LT &C).SPEC   YES, THIS IS VALID MIXED MODE.\n&$3270   SETC  '&$3270'.'CDEF'(&Z+1,1).'0123456789ABCDEF'(&N+1,1)\n         AGO   .OKCHAR\n.SPEC    ANOP\n&$3270   SETC  '&$3270'.'4567'(&Z+1,1).'0123456789ABCDEF'(&N+1,1)\n.OKCHAR  AIF   (T'&C2 EQ 'O').LCHAR\n         AIF   (&TWICE).LCHAR\n&TWICE   SETB  1\n&I       SETA  &C2\n         AGO   .LOOP\n.LCHAR   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#MATCH": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Received: (from <IBM-MAIN@RICEVM1.BITNET> via BSMTP at RICEVM1.RICE.EDU)\nReceived: (from MAILER@RICEVM1 for MAILER@USCMVSA via NJE)\n (UCLA/Mail V1.426 M-RSCS0062-0062-460); Tue, 27 Oct 92 11:36:39 PST\nX-RSCS-Info:  FileName=IBM-MAIN  FileType=MAIL      DistCode=RICEVM1\nReceived: by RICEVM1 (Mailer R2.08 R208004) id 8491;\n          Tue, 27 Oct 92 13:38:32 CST\nReceived: from RICEVM1.BITNET by RICEVM1.RICE.EDU (LISTSERV release 1.7d) with\n          NJE id 2341 for IBM-MAIN@RICEVM1.RICE.EDU; Tue,\n          27 Oct 1992 13:37:36 -0600\nReceived: from RICEVM1 by RICEVM1.RICE.EDU (Mailer R2.08 R208004) with BSMTP id\n          8267; Tue, 27 Oct 92 13:35:59 CST\nReceived: from gray.csi.cam.ac.uk by ricevm1.rice.edu (IBM VM SMTP V2R2) with\n          TCP; Tue, 27 Oct 92 13:35:54 CST\nReceived: from phx.cam.ac.uk by ppsw1.cam.ac.uk with NIFTP (PP-6.0) Cambridge\n          as ppsw.cam.ac.uk id <29943-0@ppsw1.cam.ac.uk>; Tue,\n          27 Oct 1992 19:33:46 +0000\nMessage-ID:   <A681828A35B96690@UK.AC.CAMBRIDGE.PHOENIX>\nNewsgroups:   bit.listserv.ibm-main\nDate:         Tue, 27 Oct 1992 19:33:38 GMT\nReply-To:     IBM Mainframe Discussion list <IBM-MAIN@RICEVM1.BITNET>\nSender:       IBM Mainframe Discussion list <IBM-MAIN@RICEVM1.BITNET>\nFrom:         A Grant <AG129@PHX.CAM.AC.UK>\nSubject:      Re: File wildcarding macro\nComments: To: ibm-main@ricevm1.rice.edu\nTo:           Local BBoard - Postmaster <#IBMMAIN@MVSA.USC.EDU>\n\nSteve Bacher writes:\n> Yes!  Please post it if you're so inclined...\n\nOk, here it is. You may need to do it twice (FN and FT for CMS, DSN and\nmember name for MVS). Using OPT=MVS gives wildcards that are upwards\ncompatible from RACF generic profiles and some recent IBM utilities, i.e.\nusing '.**' to match either nothing, or some arbitrary string of chars\nstarting with '.' - the sequence '*.**' therefore matches any string,\npossibly null. Obviously you also need code to retrieve file info from CMS\nADTs (never used it with SFS), MVS catalogs, VTOCs, CVAF, PDS directories,\nHSM etc. (Anyone want a VTOC scanner that chains format-3s in one pass?)\nThe matching routine appears to produce identical results to CMS FILELIST,\nthough with entirely different code. Note the use of a stack to let you\nwrite commands that do things like:\n\n  rename MYFILE.*.X%%%.**.V* as FRED.*.**.Y%%%.VERSION.#*\n\n(er, the code to expand the new name is not here, either...) This macro is\nthe core of a wildcard support module (containing the aforementioned\ncatalog/PDS scanning routines) that is in constant use by many file\nmanagement commands on our production timesharing system.\n\np.s. going back to string searching, another useful command on our system is\n\n  search *.FRED.*(*Z*) /anystring\n\nbut this uses a custom I/O package. If only IBM would provide an access\nmethod that didn't make assembler users worry about unlike concatenations,\nspanned records, machine-cc-to-ANSI conversion etc.!\n\n--- cut here ---\n         MACRO\n&LABEL   #MATCH &ARG,&PAT,                                             *\n               &YES=,&NO=,                                             *\n               &STACK=,&SINGLES=,                                      *\n               &SPARE=,&OPT=,                                          *\n               &WILD='*',&PLACE='%',&FLDWILD=,&FIELD='.'\n.*************************************************************\n.*                                                           *\n.*  MATCH: Compare two strings, with wildcards.              *\n.*                                                           *\n.*  Can be used for CMS and MVS dataset wildcard matching.   *\n.*                                                           *\n.*  The argument ARG is matched to the pattern PAT.          *\n.*  Each string can be specified as                          *\n.*    ((reg),(reg))                                          *\n.*    ((reg),length)                                         *\n.*    ((reg),TO,(reg))                                       *\n.*    (address,(reg))                                        *\n.*    (address,length)                                       *\n.*    (address,TO,(reg))                                     *\n.*                                                           *\n.*  Internally they are represented as (start,end) register  *\n.*  pairs (AO,AL) and (WO,WL).                               *\n.*                                                           *\n.*  If successful, branch to YES, else branch to NO.         *\n.*  (YES and NO are labels or bracketed registers.)          *\n.*                                                           *\n.*  Options:                                                 *\n.*    ASTRIP - strip trailing spaces from argument           *\n.*    WSTRIP - strip trailing spaces from pattern            *\n.*    MVS    - MVS generic dataset names                     *\n.*                                                           *\n.*  All registers are specified as parameters.               *\n.*                                                           *\n.*  WL (i.e. the length or end register of the wildcard      *\n.*  string) can be R0, but none of the others can.           *\n.*  SPARE specifies a list of spare registers. No registers  *\n.*  will be used unless passed as parameters or in SPARE.    *\n.*                                                           *\n.*  A stack is used, based on STACK. Frames are 20 bytes:    *\n.*                                                           *\n.*    AO, WO, REGN, SING, STAR.                              *\n.*                                                           *\n.*  On successful exit, the stack pointer points to the top  *\n.*  of the stack; the substrings matched to '*' wildcards    *\n.*  can be found as a (start,end) pair at offset 16 in each  *\n.*  stack frame. Single characters matched to '%' are placed *\n.*  in a buffer specified by the SINGLES keyword. If this    *\n.*  buffer is specified by a register, on a successful match *\n.*  this register points after the last character put in the *\n.*  buffer.                                                  *\n.*                                                           *\n.*  Alasdair Grant, University of London Computer Centre     *\n.*  April 1987 / December 1990                               *\n.*                                                           *\n.*  Support for MVS generic dataset names                    *\n.*  A. Grant, Cambridge University, May 1991                 *\n.*                                                           *\n.*************************************************************\n         LCLA  &SNEXT,&FRAME,&N\n         LCLB  &UST,&ASTRIP,&WSTRIP,&MVS\n         LCLC  &AO,&AL,&WO,&WL,&O\n         LCLC  &ASTART,&ALEN,&WSTART,&WLEN\n         LCLC  &REGN,&RN,&JUMPN,&RY,&JUMPY,&JSING,&REGST,&LAB,&REGSN\n         LCLC  &FCHAR\n&LAB     SETC  '&LABEL'\n.*\n         AIF   (K'&OPT EQ 0).OPTE\n&N       SETA  1\n&O       SETC  '&OPT'\n         AIF   ('&OPT'(1,1) NE '(').OPTB\n         AGO   .OPTA\n.OPTD    ANOP\n&N       SETA  &N+1\n.OPTA    AIF   (&N GT N'&OPT).OPTE\n&O       SETC  '&OPT(&N)'\n.OPTB    AIF   ('&O' NE 'ASTRIP').OPT1\n&ASTRIP  SETB  1\n         AGO   .OPTD\n.OPT1    AIF   ('&O' NE 'WSTRIP').OPT2\n&WSTRIP  SETB  1\n         AGO   .OPTD\n.OPT2    AIF   ('&O' NE 'MVS').OPT3\n&MVS     SETB  1\n&FCHAR   SETC  '''*'''\n         AGO   .OPTD\n.OPT3    AIF   ('&O' NE 'SAVE').OPT4\n&UST     SETB  1\n         AGO   .OPTD\n.OPT4    MNOTE 4,'Bad option: &O'\n.OPTE    ANOP\n.*\n&ASTART  SETC  '&ARG(1)'\n&WSTART  SETC  '&PAT(1)'\n.*\n         AIF   ('&ASTART'(1,1) NE '(').R1J1\n&AO      SETC  '&ASTART'(2,K'&ASTART-2)\n         AGO   .R1J3\n.R1J1    AIF   (&SNEXT EQ N'&SPARE).R1J2\n&SNEXT   SETA  &SNEXT+1\n&AO      SETC  '&SPARE(&SNEXT)'\n         AGO   .R1J4\n.R1J2    MNOTE 12,'Not enough spare registers'\n&AO      SETC  '0'\n.R1J4    ANOP\n&LAB     LA    &AO,&ASTART         Point to argument\n&LAB     SETC  ''\n.R1J3    ANOP\n.*\n         AIF   ('&WSTART'(1,1) NE '(').R2J1\n&WO      SETC  '&WSTART'(2,K'&WSTART-2)\n         AGO   .R2J3\n.R2J1    AIF   (&SNEXT EQ N'&SPARE).R2J2\n&SNEXT   SETA  &SNEXT+1\n&WO      SETC  '&SPARE(&SNEXT)'\n         AGO   .R2J4\n.R2J2    MNOTE 12,'Not enough spare registers'\n&WO      SETC  '0'\n.R2J4    ANOP\n&LAB     LA    &WO,&WSTART         Point to pattern\n&LAB     SETC  ''\n.R2J3    ANOP\n.*\n         AIF   (N'&ARG EQ 3 AND '&ARG(2)' EQ 'TO').ARG3\n         AIF   (N'&ARG NE 2).BADARG\n&ALEN    SETC  '&ARG(2)'\n         AIF   ('&ALEN'(1,1) NE '(').R3J1\n&AL      SETC  '&ALEN'(2,K'&ALEN-2)\n&LAB     AR    &AL,&AO             Point to end of argument\n         AGO   .R3J3\n.R3J1    AIF   (&SNEXT EQ N'&SPARE).R3J2\n&SNEXT   SETA  &SNEXT+1\n&AL      SETC  '&SPARE(&SNEXT)'\n         AGO   .R3J4\n.R3J2    MNOTE 12,'Not enough spare registers'\n&AL      SETC  '0'\n.R3J4    ANOP\n&LAB     LA    &AL,&ALEN.(,&AO)    Point to end of argument\n.R3J3    ANOP\n&LAB     SETC  ''\n         AGO   .AENDSET\n.ARG3    ANOP\n&AL      SETC  '&ARG(3,1)'\n.AENDSET ANOP\n.*\n         AIF   (N'&PAT EQ 3 AND '&PAT(2)' EQ 'TO').PAT3\n         AIF   (N'&PAT NE 2).BADARG\n&WLEN    SETC  '&PAT(2)'\n         AIF   ('&WLEN'(1,1) NE '(').R4J1\n&WL      SETC  '&WLEN'(2,K'&WLEN-2)\n&LAB     AR    &WL,&WO             Point to end of pattern\n         AGO   .R4J3\n.R4J1    AIF   (&SNEXT EQ N'&SPARE).R4J2\n&SNEXT   SETA  &SNEXT+1\n&WL      SETC  '&SPARE(&SNEXT)'\n         AGO   .R4J4\n.R4J2    MNOTE 12,'Not enough spare registers'\n&WL      SETC  '0'\n.R4J4    ANOP\n&LAB     LA    &WL,&WLEN.(,&WO)    Point to end of pattern\n.R4J3    ANOP\n&LAB     SETC  ''\n         AGO   .WENDSET\n.PAT3    ANOP\n&WL      SETC  '&PAT(3,1)'\n.WENDSET ANOP\n.*\n.*  Deal with success jump. Can be specified as register or\n.*  address. If omitted, jump to the end of the code.\n.*\n&RY      SETC  ''\n&JUMPY   SETC  'Y&SYSNDX'\n         AIF   (K'&YES EQ 0).YJ1\n&JUMPY   SETC  '&YES'\n         AIF   ('&YES'(1,1) NE '(').YJ1\n&RY      SETC  'R'\n&JUMPY   SETC  '&YES'(2,K'&YES-2)\n.YJ1     ANOP\n.*\n.*  Deal with failure jump. Can be specified as register or\n.*  address. If omitted, jump to the end of the code. We still\n.*  need a register for it though.\n.*\n&RN      SETC  ''\n&JUMPN   SETC  'Z&SYSNDX'\n         AIF   (K'&NO EQ 0).NJ1\n&JUMPN   SETC  '&NO'\n         AIF   ('&NO'(1,1) NE '(').NJ1\n&RN      SETC  'R'\n&REGN    SETC  '&NO'(2,K'&NO-2)\n         AGO   .NJ2\n.NJ1     AIF   (&SNEXT EQ N'&SPARE).NJ8\n&SNEXT   SETA  &SNEXT+1\n&REGN    SETC  '&SPARE(&SNEXT)'\n         AGO   .NJ2\n.NJ8     MNOTE 12,'Not enough spare registers'\n&REGN    SETC  '0'\n.NJ2     ANOP\n.*\n&FRAME   SETA  20\n         AIF   ('&STACK'(1,1) NE '(').STJ1\n&REGST   SETC  '&STACK'(2,K'&STACK-2)\n&UST     SETB  1\n         AGO   .STJ2\n.STJ1    AIF   (&SNEXT EQ N'&SPARE).STJ3\n&SNEXT   SETA  &SNEXT+1\n&REGST   SETC  '&SPARE(&SNEXT)'\n         AGO   .STJ4\n.STJ3    MNOTE 12,'Not enough spare registers'\n&REGST   SETC  '0'\n.STJ4    LA    &REGST,&STACK       Initial stack pointer\n         AIF   (&UST).STJ2\n&FRAME   SETA  12\n         AIF   (K'&SINGLES EQ 0).STJ2\n&FRAME   SETA  16\n.STJ2    ANOP\n.*\n         AIF   (K'&SINGLES EQ 0).SNJ1\n         AIF   ('&SINGLES'(1,1) NE '(').SNJ2\n&REGSN   SETC  '&SINGLES(1)'\n         AGO   .SNJ1\n.SNJ2    AIF   (&SNEXT EQ N'&SPARE).SNJ3\n&SNEXT   SETA  &SNEXT+1\n&REGSN   SETC  '&SPARE(&SNEXT)'\n         AGO   .SNJ4\n.SNJ3    MNOTE 12,'Not enough spare registers'\n&REGSN   SETC  '0'\n.SNJ4    LA    &REGSN,&SINGLES     Initial singles pointer\n.SNJ1    ANOP\n.*\n         AIF   ('&RN' EQ 'R').NJ3\n&LAB     LA    &REGN,&JUMPN        Initial failure address\n&LAB     SETC  ''\n.NJ3     ANOP\n.*\n         AIF   ('&LAB' EQ '').NOLAB\n&LAB     DS    0H\n.NOLAB   ANOP\n.*\n.*  Strip trailing spaces from either string\n.*\n         AIF   (NOT &ASTRIP).NASTR\nS&SYSNDX CLR   &AO,&AL             Strip string\n         BER   &REGN               Fail on empty string\n         BCTR  &AL,0\n         CLI   0(&AL),C' '\n         BE    S&SYSNDX            Lose space and try again\n         LA    &AL,1(,&AL)         Get the char back\n.NASTR   ANOP\n.*\n         AIF   (NOT &WSTRIP).NWSTR\nU&SYSNDX CLR   &WO,&WL             Strip pattern\n         BER   &REGN               Fail on empty pattern\n         BCTR  &WL,0\n         CLI   0(&WL),C' '\n         BE    U&SYSNDX            Lose space and try again\n         LA    &WL,1(,&WL)         Get the char back\n.NWSTR   ANOP\n.*\n.*  R: recursive entry point. E is for when only AO has been\n.*  changed since the last call.\n.*\nR&SYSNDX ST    &WO,4(,&REGST)      Save pattern pointer\n         ST    &REGN,8(,&REGST)    Save failure address\n         AIF   (K'&SINGLES EQ 0).SJ1\n         ST    &REGSN,12(,&REGST)  Save '?' pointer\n.SJ1     ANOP\nE&SYSNDX ST    &AO,0(,&REGST)      Save string pointer\n.*\n.*  WO=WL: succeed if AO=AL, otherwise fail\n.*  WO~=WL, AO=AL: check for '*' wildcard, otherwise fail\n.*  WO~=WL, AO~=AL: check for '*', then compare characters\n.*\nI&SYSNDX CLR   &WO,&WL             Any more wildcards?\n         BE    O&SYSNDX             no: try for null string\n         AIF   (&MVS).MVS1\n         CLI   0(&WO),C&WILD       Arbitrary string?\n         BE    W&SYSNDX             yes: go do recursion\n         AIF   ('&FCHAR' EQ '').NOFLD\n         CLI   0(&WO),C&FCHAR      Arbitrary field?\n         BE    F&SYSNDX\n.NOFLD   AGO   .MVS1E\n.MVS1    CLI   0(&WO),C&FCHAR      Arbitrary field?\n         BE    F&SYSNDX\n         CLC   0(3,&WO),=C'.**'    Arbitrary string?\n         BE    W&SYSNDX\n.MVS1E   ANOP\n         CLR   &AO,&AL             At end of string?\n         BE    N&SYSNDX             yes: must fail\n         CLC   0(1,&WO),0(&AO)     Same character?\n         BE    G&SYSNDX\n         CLI   0(&WO),C&PLACE      '?' matches any character\n         BNE   N&SYSNDX             no: don't match\n         CLI   0(&AO),C&FIELD      '?' doesn't match dot\n         BE    N&SYSNDX\n         AIF   (K'&SINGLES EQ 0).SJ2\nT&SYSNDX MVC   0(1,&REGSN),0(&AO)  Save for user\n         LA    &REGSN,1(,&REGSN)\n.SJ2     ANOP\nG&SYSNDX LA    &AO,1(,&AO)         Next char of string\n         LA    &WO,1(,&WO)         Next char of pattern\n         B     I&SYSNDX            Iterate\n*\n.* At end of wildcard pattern\n.*\nO&SYSNDX CLR   &AO,&AL             Only null can match null\n         BE&RY &JUMPY              Null: succeed\n.*\n.*  Fail. Restore registers.\n.*\nN&SYSNDX L     &AO,0(,&REGST)      Restore string pointer\n         L     &WO,4(,&REGST)      Restore pattern pointer\n         AIF   (K'&SINGLES EQ 0).SJ3\n         L     &REGSN,12(,&REGST)  Restore '?' pointer\n.SJ3     ANOP\n         BR    &REGN               ... and fail\n*\n.*\n.*  WO is pointing to a '*'. Call ourselves (E&SYSNDX) as a\n.*  subroutine. We must match some string (even if null)\n.*  against this wildcard, so store AO in the stack now.\n.*\n         AIF   (&MVS).MVS2\nW&SYSNDX LA    &WO,1(,&WO)         Skip past wildcard\n         AGO   .MVS2E\n.MVS2    ANOP\nW&SYSNDX LA    &WO,3(,&WO)         Skip past '.**'\n.MVS2E   ANOP\n         AIF   (NOT &UST).UJ1\n         ST    &AO,16(,&REGST)     Let user get the substring\n         AIF   (NOT &MVS).MVS4E\n         OI    16(&REGST),X'80'\n.MVS4E   ANOP\n.UJ1     ANOP\n         LA    &REGST,&FRAME.(,&REGST)\n         AIF   (NOT &MVS).MVS3E\n         CLR   &WO,&WL\n         BNE   A&SYSNDX\n         CLR   &AO,&AL\n         BE    B&SYSNDX\n         CLI   0(&AO),C'.'\n         BNE   A&SYSNDX\nB&SYSNDX ST    &AL,0(,&REGST)\n         BE&RY &JUMPY\n*\nA&SYSNDX BAS   &REGN,R&SYSNDX\n         CLI   0(&AO),C'.'\n         BNE   L&SYSNDX\n         LA    &AO,1(,&AO)\n.MVS3E   ANOP\n         BAS   &REGN,R&SYSNDX\nJ&SYSNDX LA    &AO,1(,&AO)\n         CLR   &AO,&AL\n         BNH   E&SYSNDX            Will return to right place\nL&SYSNDX SH    &REGST,=Y(&FRAME)   Unwind stack\n         L     &REGN,8(,&REGST)    Only restored here\n         B     N&SYSNDX            No match\n*\n         AIF   ('&FCHAR' EQ '').NOFLD2\n.*\n.*  Match characters within a field\n.*\nF&SYSNDX LA    &WO,1(,&WO)         Skip past wildcard\n         AIF   (NOT &UST).UJ2\n         ST    &AO,16(,&REGST)     Let user get the substring\n.UJ2     ANOP\n         LA    &REGST,&FRAME.(,&REGST)\n         BAS   &REGN,R&SYSNDX\n         AIF   (&MVS).MVS5\n         CLI   0(&AO),C&FIELD      End of field?\n         BE    L&SYSNDX            Yes, stop scanning\n         B     J&SYSNDX\n         AGO   .MVS5E\n.MVS5    ANOP\n         CLR   &AO,&AL\n         BE    L&SYSNDX\n         CLI   0(&AO),C&FIELD      End of field?\n         BE    L&SYSNDX            Yes, stop scanning\n         LA    &AO,1(,&AO)\n         B     E&SYSNDX\n.MVS5E   ANOP\n*\n.NOFLD2  ANOP\n.*\n.*  Define continuation exits\n.*\n         AIF   ('&JUMPN' NE 'Z&SYSNDX').NJ5\n         AIF   ('&JUMPY' EQ 'Y&SYSNDX').NJ6\nZ&SYSNDX DS    0H                  Failure point\n         AGO   .YJ2\n.NJ6     ANOP\nZ&SYSNDX LTR   &AO,&AO             Condition code NE\n.NJ5     AIF   ('&JUMPY' NE 'Y&SYSNDX').YJ2\nY&SYSNDX DS    0H                  Success point\n.YJ2     ANOP\n         MEXIT\n.*\n.BADARG  MNOTE 12,'Invalid arguments'\n&LAB     DS    0H      ** DEFINED TO AVOID ERROR PROPAGATION **\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@GLOBAL@": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x00\\x00\\x843/\\x00\\x97\\x18\\x1f\\x15W\\x00\\x89\\x007\\x00a\\xc7\\xc7[\\xd3\\xc4\\xe6@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "1984-11-27T00:00:00", "modifydate": "1997-06-30T15:57:00", "lines": 137, "newlines": 55, "modlines": 97, "user": "GG$LDW"}, "text": "         GBLB  &@@@@@@@                 SWITCH FOR GLOBALS SET\n         AIF   (&@@@@@@@).@SKIP         SKIP IF ALREADY SET\n***********************************************************************\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***  Installation local parameters                                  ***\n***                                                                 ***\n***  This member contains data that is unique to a particular       ***\n***  installation.  The variables defined here are referenced       ***\n***  via conditional assembly.  All locally unique code should      ***\n***  be driven off of these variables.                              ***\n***                                                                 ***\n***  Updates:                                                       ***\n***    30Jun97  LDW - Add &@@DFSMS                                  ***\n***             LDW - Set current releases of SMS, ISPF, RACF,      ***\n***                      SPLVL, TSOE                                ***\n***    14Apr94  LDW - Customize for Stanford                        ***\n***    11Jan02  LDW - Update &@@U01 from 490 to 500                 ***\n***    05Aug91  LDW - Update release levels in &@@ACF2, &@@DFP,     ***\n***                      &@@ISPF, &@@SPLVL                          ***\n***    04Jul91  LDW - Add variables to replace ones from QGLOBALS:  ***\n***                      &@@QALTC, &@@QCKNC, &@@QDOC, &@@QJOWN,     ***\n***                      &@@QPRNT, &@@QSTDF, &@@QXKEY, &@@TMPSV     ***\n***                      and temporarily &@@QNJE, &@@QSFXC,&@@QSFXS ***\n***    16Mar91  LDW - Add &@@U01 for UCC-ONE (TMS)                  ***\n***    09Dec90  LDW - Update release of ASM2                        ***\n***    25Sep90  LDW - Add &@@DFP                                    ***\n***    12Dec89  LDW - Change &@@OACFS to name of OACFSORT loadmod   ***\n***    23Nov89  LDW - Add &@@OACFS to indicate whether OACFSORT is  ***\n***                      installed                                  ***\n***                 - Update releases of ACF2, ASM2, TSO/E          ***\n***    02Aug89  LDW - Change &@@SPLVL from 220 to 310               ***\n***    06Jun89  LDW - Add &@@LKSVC                                  ***\n***                 - Change &@@RACF from 180 to 000                ***\n***    22Sep88  LDW - Change &@@ISPF from 220 to 230                ***\n***                 - Change &@@TSOE from 130 to 140                ***\n***    27May88  LDW - Set &@@ACF2 (finally)                         ***\n***                 - Update &@@RACF to 1.8.0 from 1.7.0            ***\n***                 - Change &@@NAME to lower case                  ***\n***    24Apr88  LDW - Remove variables for LISTVO since that data   ***\n***                      is now in @GLOBALC                         ***\n***    05Feb88  LDW - Change &@@SPLVL from 217 to 220               ***\n***    09Oct87  LDW - Change &@@TSOE from 20 to 130; now includes   ***\n***                      Version                                    ***\n***    18Aug87  LDW - Change &@@SPLVL from 135 to 217               ***\n***    11Aug87  LDW - Add variables for LISTVO                      ***\n***    16May87  LDW - Add &@@ASM2 (puke!!)                          ***\n***    11NOV86  LDW - ADD &@@RACF (PUKE!!)                          ***\n***    11JUL86  LDW - USC TAILORING                                 ***\n***    22JUN86  LDW - SET &@@ACF2 TO 410                            ***\n***    01/13/86 LDW - SET &@@ATSVC AND &@@SCSVC TO 0 (SIMILAR       ***\n***                      FUNCTION NOW PROVIDED BY TSO/E REL 2)      ***\n***                 - &@@SPLVL CHANGED TO 135                       ***\n***    11/04/85 LDW - CHANGE &@@ACF2 TO GBLA CONTAINING RELEASE NBR ***\n***                 - CHANGE &@@SPFV2 TO GBLA WITH VER/REL/MOD  NBR ***\n***    07/16/85 LDW - CHANGE &@@TSOE TO GBLA CONTAINING RELEASE NBR ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n***********************************************************************\n         SPACE 3\n.@SKIP   ANOP\n         GBLA  &@@ACF2                  ACF2 RELEASE NUMBER\n         GBLA  &@@ASM2                  ASM2 RELEASE NUMBER\n         GBLA  &@@ATSVC                 EXXON SPFMAGIC ATTACH SVC NUMB\n         GBLA  &@@DFP                   DFP VERSION RELEASE MOD\n         GBLC  &@@DMOD                  DSN FOR 'DMOD' AUTHORITY CHECK\n         GBLC  &@@ID                    INSTALLATION SHORT ID\n         GBLA  &@@ISPF                  ISPF VER, REL, MOD (3 DIGITS!!)\n         GBLA  &@@LKSVC                 SUPR, KEY 0, LINK SVC NUMBER\n         GBLC  &@@NAME                  INSTALLATION LONG NAME\n         GBLC  &@@OACFS                 name of OACFSORT load module\n         GBLC  &@@QALTC                 name of $SVT field for altcomch\n         GBLC  &@@QCKNC                 number of DECBs for CKPT\n         GBLC  &@@QDOC                  print opt for JES2 & MVS dsects\n         GBLC  &@@QJOWN                 name of job owner field in JQE\n         GBLB  &@@QNJE                  set to 1 only for non-SP NJE\n         GBLC  &@@QPRNT                 print opt for executable code\n         GBLC  &@@QSFXC                 suffix for SYS1.HASPCKPT\n         GBLC  &@@QSFXS                 suffix for SYS1.HASPACE\n         GBLC  &@@QSTDF                 name of standard form\n         GBLC  &@@QXKEY                 execution key (0-7)\n         GBLA  &@@RACF                  RACF RELEASE LEVEL (PUKE!!)\n         GBLA  &@@SCSVC                 SPFCOPY APFSERV SVC NUMBER\n         GBLA  &@@SPLVL                 MVS/SP RLSE LEVEL (3 DIGITS!!!)\n*  THE FOLLOWING VARIABLE WILL SOMEDAY BE REPLACED BY A MACRO\n         GBLC  &@@STAFF                 DATA CENTER 'STAFF' CHECK\n*  THE FOLLOWING VARIABLE WILL SOMEDAY BE REPLACED BY A MACRO\n         GBLC  &@@SYSP                  DATA CENTER 'SYSPGMR' CHECK\n         GBLB  &@@TMPSV                 TMPSRV is installed\n         GBLA  &@@TSOE                  INSTALLED TSO/E RELEASE NUMBER\n         GBLA  &@@U01                   release of UCC-ONE (TMS)\n         SPACE 3\n         AIF   (&@@@@@@@).@DONE         SKIP IF ALREADY SET\n&@@@@@@@ SETB  1                        VARIABLES NOW SET\n&@@ACF2  SETA  000                      RELEASE 5.2.0\n&@@ASM2  SETA  000                      RELEASE 3.1.0\n&@@ATSVC SETA  0     237                SET TO 0 IF NONE\n&@@DFP   SETA  330                      Version 3 Release 3.0\n&@@DMOD  SETC  'SYS3.DMOD'\n&@@DFSMS SETA  130                      Version 1 Release 3.0\n&@@ID    SETC  'Stanford'               Stanford University\n&@@ISPF  SETA  420                      V4R2M0\n&@@LKSVC SETA  0                        set to 0 if none\n&@@NAME  SETC  'Stanford University'\n&@@OACFS SETC  'OACFSORT'               set to '' if OACFSORT unavail\n&@@QALTC SETC  ''    '$SVALTCC'         name of alt comchr field in SVT\n&@@QCKNC SETC  '12'                     a 3390 track worth\n&@@QDOC  SETC  'NOGEN'                  suppress dsect expansions\n&@@QJOWN SETC  ''    'JQESLID'          name of job owner field in JQE\n&@@QNJE  SETB  0                        JES2/SP INCLUDES NJE\n&@@QPRNT SETC  'GEN'                    show all code\n&@@QSFXC SETC  '.HASPCKPT'              suffix for SYS1.HASPCKPT\n&@@QSFXS SETC  '.HASPACE'               suffix for SYS1.HASPACE\n&@@QSTDF SETC  'STD'                    name of standard form\n&@@QXKEY SETC  'KEY4'                   execution key -- MODESET EXTKEY\n&@@RACF  SETA  220                      2.2.0\n&@@SCSVC SETA  0     243                SET TO 0 IF NONE\n&@@SPLVL SETA  602                      OS/390 R2\n&@@STAFF SETC  'PSCBATR1,PSCBCTRL'      OPERATOR AUTHORITY\n&@@SYSP  SETC  'PSCBATR1,PSCBACCT'      ACCOUNT AUTHORITY\n&@@TMPSV SETB  1                        TMPSRV is installed\n&@@TSOE  SETA  250                      Version 2 Release 4.0\n&@@U01   SETA  000                      TMS not installed\n         SPACE 3\n***********************************************************************\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***  END OF INSTALLATION GLOBALS                                    ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n***********************************************************************\n.@DONE   ANOP\n         SPACE 2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@GLOBALC": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x87%\\x0f\\x00\\x99%\\x9f\\x166\\x00\\xf6\\x00\\x1a\\x00\\xe0|\\xd3\\xc4\\xe6\\xf1@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1987-09-07T00:00:00", "modifydate": "1999-09-16T16:36:00", "lines": 246, "newlines": 26, "modlines": 224, "user": "@LDW1"}, "text": "         MACRO\n&NFS     @GLOBALC  &MODULE,&ID\n.*********************************************************************.\n.*********************************************************************.\n.*********************************************************************.\n.***                                                               ***.\n.***  Installation local code                                      ***.\n.***                                                               ***.\n.***  This member contains data that is unique to a particular     ***.\n.***  installation.  The code generated here is that which is not  ***.\n.***  feasible to put in @GLOBALS.                                 ***.\n.***                                                               ***.\n.***  Updates:                                                     ***.\n.***    04Jul91      LDW - Add QUEUE section                       ***.\n.***    12Sep89      LDW - Fix bug in MNOTE                        ***.\n.***    29Nov87      LDW - Add USC data for CONS and LISTVO        ***.\n.***    09Sep87      LDW - Created for LISTVO                      ***.\n.***                                                               ***.\n.*********************************************************************.\n.*********************************************************************.\n.*********************************************************************.\n         PUSH  PRINT                                           @GLOBALC\n         PRINT OFF\n         COPY  @GLOBALS\n         POP   PRINT                                           @GLOBALC\n         AIF   ('&MODULE' EQ 'CONS'    ).CONS\n         AIF   ('&MODULE' EQ 'LISTVO'  ).LISTVO\n         AIF   ('&MODULE' EQ 'QUEUE'   ).QUEUE\n.ERR1    MNOTE 8,'Module &MODULE not supported by @GLOBALC'\n         MEXIT\n.CONS    ANOP\n         AIF   ('&ID' EQ 'LOCTABLE').CONS1\n         AIF   ('&ID' EQ 'MENULIST').CONS2\n         AGO   .ERR2\n.CONS1   ANOP\n         DC    C'5E0',CL(LNML)'SYSA Master    '\n         DC    C'5E8',CL(LNML)'Sal            '\n         DC    C'5E9',CL(LNML)'Susan          '\n         DC    C'5EA',CL(LNML)'LDW            '\n         DC    C'5EC',CL(LNML)'was Rich       '\n         DC    C'8E0',CL(LNML)'Master         '\n         DC    C'8E1',CL(LNML)'Tape           '\n         DC    C'8E2',CL(LNML)'Print          '\n         DC    C'8E3',CL(LNML)'TAMM           '\n         DC    C'8E4',CL(LNML)' unused        '\n         DC    C'8E5',CL(LNML)'Meighan        '\n         DC    C'8E6',CL(LNML)'was Lincoln    '\n         DC    C'8E7',CL(LNML)'Jose           '\n         DC    C'8E8',CL(LNML)'Sal            '\n         DC    C'8E9',CL(LNML)'Susan          '\n         DC    C'8EA',CL(LNML)'LDW            '\n         DC    C'8EB',CL(LNML)'Parker         '\n         DC    C'8EC',CL(LNML)'Mark           '\n         DC    C'JES',CL(LNML)'Subsys (TSSO)  '\n         AGO   .MEND\n.CONS2   ANOP\n         DC    CL39'                                       '    2\n         DC    CL39'                                       '\n         DC    CL39'/V ___,ONLINE                          '    3\n         DC    CL39'/M ___,VOL=(SL,______),USE=PRIVATE     '\n         DC    CL39'/V ___,OFFLINE                         '    4\n         DC    CL39'                                       '\n         DC    CL39'                                       '    5\n         DC    CL39'                                       '\n         DC    CL39'                                       '    6\n         DC    CL39'                                       '\n         DC    CL39'/D NET,ID=___                          '    7\n         DC    CL39'/V NET,ACT,ID=___                      '\n         DC    CL39'/D NET,CLSTRS                          '    8\n         DC    CL39'/V NET,INACT,ID=___                    '\n         DC    CL39'/D NET,LINES                           '    9\n         DC    CL39'/F TSO,USERMAX=0                       '\n         DC    CL39'/D NET,APPLS                           '   10\n         DC    CL39'                                       '\n         DC    CL39'/D NET,BFRUSE                          '   11\n         DC    CL39'                                       '\n         DC    CL39'/D NET,MAJNODES                        '   12\n         DC    CL39'                                       '\n         DC    CL39'                                       '   13\n         DC    CL39'                                       '\n         DC    CL39'                                       '   14\n         DC    CL39'                                       '\n         DC    CL39'                                       '   15\n         DC    CL39'                                       '\n         DC    CL39'                                       '   16\n         DC    CL39'                                       '\n         DC    CL39'                                       '   17\n         DC    CL39'                                       '\n         DC    CL79'.VS,''V ___,CONSOLE'',''V NET,INACT,I,ID=___'''\n         DC    CL79'/V ___,CONSOLE,ROUT=(1,2,3,4,5,6,7,8,9,10,12,13,14,$\n               15)                          '                  19\n         DC    CL79'                                       '   20\n         AGO   .MEND\n.LISTVO  ANOP\n         AIF   ('&ID' EQ 'NAMELIST').LISTVO1\n         AGO   .ERR2\n.LISTVO1 ANOP\n* Every volume prefix list MUST be the same length.\n         DC    CL8'SYS'                 List name\n         DC    CL6'MVS'                   1 Volume name prefix\n         DC    CL6'SP'                    2 Volume name prefix\n         DC    CL6'CIC'                   3 Volume name prefix\n         DC    CL6'IMS'                   4 Volume name prefix\n         DC    C' '                     End of vol prefix list\nUNITNLEN EQU   *-NAMELIST           Length of each vol prefix list\n         DC    CL8'SYSTOR'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'STOR'                List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'STOR80'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'TSOUDA'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'PRODDA'              List name\n         DC    CL6'PRD0'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSMVSA'             List name\n         DC    CL6'MVSA0'                 1 Volume name prefix\n         DC    CL6'MVSA1'                 1 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSDA'               List name\n         DC    CL6'SCRA0'                 1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSTEMP'             List name\n         DC    CL6'SCRA0'                 1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'DATA'                List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'DATL'                List name\n         DC    CL6'DATL'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         AGO   .MEND\n.QUEUE   ANOP\n         AIF   ('&ID' EQ 'JESTABLE').QJES\n         AIF   ('&ID' EQ 'LCLEQ'   ).QLCL\n         AIF   ('&ID' EQ 'PFKDFLT' ).QPFK\n         AIF   ('&ID' EQ 'SMFTABLE').QSID\n         AGO   .ERR2\n.QJES    ANOP\n*\n*  One entry is needed for each sysres/jes2 pair.  If volser is blank,\n*  DAIR will search the catalog.\n*\n         QSYSTBL  CKPTSFX=.HASPCKPT,SPCSFX=.HASPACE,TYPE=SET  defaults\n*                 SYSRES,SMF ,JES ,CKPT ,DSN\n         QSYSTBL  MVS000,,JES2,SYS000,SYS1            MVSUNO own\n.******* entries below are not used at XBS; they're here because\n.******* we only have one system and this member needs to illustrate\n.******* how to define multiple systems.\n.*       QSYSTBL  MVSUNO,,JES2,MVSUNO,SYS2.SYSX       MVSUNO own\n.*       QSYSTBL    ,SYSA,JES2,JESAC1,SYS1            SYSA own\n.*       QSYSTBL    ,SYSA,JES2,JESAC1,SYS1.JES2.R12   SYSA own\n.*       QSYSTBL    ,SYSD,JES2,JESDC1,SYS2.SYSD.NEW   SYSD own\n.*       QSYSTBL    ,SYSB,JES2,SYSB01,SYS1,           SYSB own         $\n               CKPTSFX=.JESCKPT\n.*       QSYSTBL    ,SYSE,JES2,MVSD5X,SYS2.OS390      SYSE own\n***  Fake entries which can be used via JES(xxx) keyword to select\n***  a non-default spool by symbolic name.\n.*       QSYSTBL        ,,SYSA,JESAC1,SYS1            SYSA spool\n.*       QSYSTBL        ,,SYSD,JESDC1,SYS2.SYSD.NEW   SYSD spool\n.*       QSYSTBL        ,,SYSH,SYSH02,SYS2.SYSH       SYSH spool\n.*       QSYSTBL        ,,SYSX,MVSUNO,SYS2.SYSX       MVSUNO spool\n.*       QSYSTBL        ,,SYSB,SYSB01,SYS1,           SYSB spool       $\n               CKPTSFX=.JESCKPT\n.*       QSYSTBL        ,,SYSE,MVSD5X,SYS2.OS390      SYSE own\n.*       QSYSTBL        ,,JESB,JESAC1,SYS1            SYSA own R3.1.3\n.*       QSYSTBL        ,,JESN,JESDC1,SYS2.SYSD       R3,1.3 SYSD\n.*       QSYSTBL        ,,JESZ,SYSA11,SYS3.JESZ       R1.2 test\n         AGO   .MEND\n.QLCL    ANOP\n*  Output destinations with the following names are considered to be\n*  'LOCAL' for purposes of DO/AO subcommands\n*        DC    CL8'LASER'\n*        DC    CL8'LASER1'\n*        DC    CL8'LASER3'\n         AGO   .MEND\n.QPFK    ANOP\n         DC    CL64'H'                  PF 1\n         DC    CL64'ST'                 PF 2\n         DC    CL64'E'                  PF 3\n         DC    CL64'PR'                 PF 4\n         DC    CL64'F'                  PF 5\n         DC    CL64'NS *'               PF 6\n         DC    CL64'U'                  PF 7\n         DC    CL64'D'                  PF 8\n         DC    CL64'AO'                 PF 9\n         DC    CL64'LE'                 PF 10\n         DC    CL64'RI'                 PF 11\n         DC    CL64'RC'                 PF 12\n         SPACE 1\n         DC    CL64'H'                  PF 13\n         DC    CL64'ST'                 PF 14\n         DC    CL64'E'                  PF 15\n         DC    CL64'PR'                 PF 16\n         DC    CL64'F'                  PF 17\n         DC    CL64'NS *'               PF 18\n         DC    CL64'U'                  PF 19\n         DC    CL64'D'                  PF 20\n         DC    CL64'AO'                 PF 21\n         DC    CL64'LE'                 PF 22\n         DC    CL64'RI'                 PF 23\n         DC    CL64'RC'                 PF 24\n         AGO   .MEND\n.QSID    ANOP\n*  One entry is needed for each SMFid to be displayed as something else\n*        DC    CL4'SCG2',CL4'A084'\n*        DC    CL4'SCG3',CL4'3090'\n*        DC    CL4'SCG4',CL4'B084'\n*        DC    CL4'SCG5',CL4'4381'\n         AGO   .MEND\n.ERR2    MNOTE 8,'Code point &ID for module not supported by @GLOBALC'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@GLOBALS": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x00\\x00\\x843/\\x00\\x99%\\x8f\\x17I\\x00\\x89\\x007\\x00a|\\xd3\\xc4\\xe6\\xf1@@@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "1984-11-27T00:00:00", "modifydate": "1999-09-15T17:49:00", "lines": 137, "newlines": 55, "modlines": 97, "user": "@LDW1"}, "text": "         GBLB  &@@@@@@@                 SWITCH FOR GLOBALS SET\n         AIF   (&@@@@@@@).@SKIP         SKIP IF ALREADY SET\n***********************************************************************\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***  Installation local parameters                                  ***\n***                                                                 ***\n***  This member contains data that is unique to a particular       ***\n***  installation.  The variables defined here are referenced       ***\n***  via conditional assembly.  All locally unique code should      ***\n***  be driven off of these variables.                              ***\n***                                                                 ***\n***  Updates:                                                       ***\n***    30Jun97  LDW - Add &@@DFSMS                                  ***\n***             LDW - Set current releases of SMS, ISPF, RACF,      ***\n***                      SPLVL, TSOE                                ***\n***    14Apr94  LDW - Customize for Stanford                        ***\n***    11Jan02  LDW - Update &@@U01 from 490 to 500                 ***\n***    05Aug91  LDW - Update release levels in &@@ACF2, &@@DFP,     ***\n***                      &@@ISPF, &@@SPLVL                          ***\n***    04Jul91  LDW - Add variables to replace ones from QGLOBALS:  ***\n***                      &@@QALTC, &@@QCKNC, &@@QDOC, &@@QJOWN,     ***\n***                      &@@QPRNT, &@@QSTDF, &@@QXKEY, &@@TMPSV     ***\n***                      and temporarily &@@QNJE, &@@QSFXC,&@@QSFXS ***\n***    16Mar91  LDW - Add &@@U01 for UCC-ONE (TMS)                  ***\n***    09Dec90  LDW - Update release of ASM2                        ***\n***    25Sep90  LDW - Add &@@DFP                                    ***\n***    12Dec89  LDW - Change &@@OACFS to name of OACFSORT loadmod   ***\n***    23Nov89  LDW - Add &@@OACFS to indicate whether OACFSORT is  ***\n***                      installed                                  ***\n***                 - Update releases of ACF2, ASM2, TSO/E          ***\n***    02Aug89  LDW - Change &@@SPLVL from 220 to 310               ***\n***    06Jun89  LDW - Add &@@LKSVC                                  ***\n***                 - Change &@@RACF from 180 to 000                ***\n***    22Sep88  LDW - Change &@@ISPF from 220 to 230                ***\n***                 - Change &@@TSOE from 130 to 140                ***\n***    27May88  LDW - Set &@@ACF2 (finally)                         ***\n***                 - Update &@@RACF to 1.8.0 from 1.7.0            ***\n***                 - Change &@@NAME to lower case                  ***\n***    24Apr88  LDW - Remove variables for LISTVO since that data   ***\n***                      is now in @GLOBALC                         ***\n***    05Feb88  LDW - Change &@@SPLVL from 217 to 220               ***\n***    09Oct87  LDW - Change &@@TSOE from 20 to 130; now includes   ***\n***                      Version                                    ***\n***    18Aug87  LDW - Change &@@SPLVL from 135 to 217               ***\n***    11Aug87  LDW - Add variables for LISTVO                      ***\n***    16May87  LDW - Add &@@ASM2 (puke!!)                          ***\n***    11NOV86  LDW - ADD &@@RACF (PUKE!!)                          ***\n***    11JUL86  LDW - USC TAILORING                                 ***\n***    22JUN86  LDW - SET &@@ACF2 TO 410                            ***\n***    01/13/86 LDW - SET &@@ATSVC AND &@@SCSVC TO 0 (SIMILAR       ***\n***                      FUNCTION NOW PROVIDED BY TSO/E REL 2)      ***\n***                 - &@@SPLVL CHANGED TO 135                       ***\n***    11/04/85 LDW - CHANGE &@@ACF2 TO GBLA CONTAINING RELEASE NBR ***\n***                 - CHANGE &@@SPFV2 TO GBLA WITH VER/REL/MOD  NBR ***\n***    07/16/85 LDW - CHANGE &@@TSOE TO GBLA CONTAINING RELEASE NBR ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n***********************************************************************\n         SPACE 3\n.@SKIP   ANOP\n         GBLA  &@@ACF2                  ACF2 RELEASE NUMBER\n         GBLA  &@@ASM2                  ASM2 RELEASE NUMBER\n         GBLA  &@@ATSVC                 EXXON SPFMAGIC ATTACH SVC NUMB\n         GBLA  &@@DFP                   DFP VERSION RELEASE MOD\n         GBLC  &@@DMOD                  DSN FOR 'DMOD' AUTHORITY CHECK\n         GBLC  &@@ID                    INSTALLATION SHORT ID\n         GBLA  &@@ISPF                  ISPF VER, REL, MOD (3 DIGITS!!)\n         GBLA  &@@LKSVC                 SUPR, KEY 0, LINK SVC NUMBER\n         GBLC  &@@NAME                  INSTALLATION LONG NAME\n         GBLC  &@@OACFS                 name of OACFSORT load module\n         GBLC  &@@QALTC                 name of $SVT field for altcomch\n         GBLC  &@@QCKNC                 number of DECBs for CKPT\n         GBLC  &@@QDOC                  print opt for JES2 & MVS dsects\n         GBLC  &@@QJOWN                 name of job owner field in JQE\n         GBLB  &@@QNJE                  set to 1 only for non-SP NJE\n         GBLC  &@@QPRNT                 print opt for executable code\n         GBLC  &@@QSFXC                 suffix for SYS1.HASPCKPT\n         GBLC  &@@QSFXS                 suffix for SYS1.HASPACE\n         GBLC  &@@QSTDF                 name of standard form\n         GBLC  &@@QXKEY                 execution key (0-7)\n         GBLA  &@@RACF                  RACF RELEASE LEVEL (PUKE!!)\n         GBLA  &@@SCSVC                 SPFCOPY APFSERV SVC NUMBER\n         GBLA  &@@SPLVL                 MVS/SP RLSE LEVEL (3 DIGITS!!!)\n*  THE FOLLOWING VARIABLE WILL SOMEDAY BE REPLACED BY A MACRO\n         GBLC  &@@STAFF                 DATA CENTER 'STAFF' CHECK\n*  THE FOLLOWING VARIABLE WILL SOMEDAY BE REPLACED BY A MACRO\n         GBLC  &@@SYSP                  DATA CENTER 'SYSPGMR' CHECK\n         GBLB  &@@TMPSV                 TMPSRV is installed\n         GBLA  &@@TSOE                  INSTALLED TSO/E RELEASE NUMBER\n         GBLA  &@@U01                   release of UCC-ONE (TMS)\n         SPACE 3\n         AIF   (&@@@@@@@).@DONE         SKIP IF ALREADY SET\n&@@@@@@@ SETB  1                        VARIABLES NOW SET\n&@@ACF2  SETA  000                      RELEASE 5.2.0\n&@@ASM2  SETA  000                      RELEASE 3.1.0\n&@@ATSVC SETA  0     237                SET TO 0 IF NONE\n&@@DFP   SETA  330                      Version 3 Release 3.0\n&@@DMOD  SETC  'SYS3.DMOD'\n&@@DFSMS SETA  130                      Version 1 Release 3.0\n&@@ID    SETC  'XBS'                    Xbridge Systems\n&@@ISPF  SETA  420                      V4R2M0\n&@@LKSVC SETA  0                        set to 0 if none\n&@@NAME  SETC  'Xbridge Systems'\n&@@OACFS SETC  'OACFSORT'               set to '' if OACFSORT unavail\n&@@QALTC SETC  ''    '$SVALTCC'         name of alt comchr field in SVT\n&@@QCKNC SETC  '12'                     a 3390 track worth\n&@@QDOC  SETC  'NOGEN'                  suppress dsect expansions\n&@@QJOWN SETC  ''    'JQESLID'          name of job owner field in JQE\n&@@QNJE  SETB  0                        JES2/SP INCLUDES NJE\n&@@QPRNT SETC  'GEN'                    show all code\n&@@QSFXC SETC  '.HASPCKPT'              suffix for SYS1.HASPCKPT\n&@@QSFXS SETC  '.HASPACE'               suffix for SYS1.HASPACE\n&@@QSTDF SETC  'STD'                    name of standard form\n&@@QXKEY SETC  'KEY4'                   execution key -- MODESET EXTKEY\n&@@RACF  SETA  220                      2.2.0\n&@@SCSVC SETA  0     243                SET TO 0 IF NONE\n&@@SPLVL SETA  605                      OS/390 R5\n&@@STAFF SETC  'PSCBATR1,PSCBCTRL'      OPERATOR AUTHORITY\n&@@SYSP  SETC  'PSCBATR1,PSCBACCT'      ACCOUNT AUTHORITY\n&@@TMPSV SETB  1                        TMPSRV is installed\n&@@TSOE  SETA  250                      Version 2 Release 4.0\n&@@U01   SETA  000                      TMS not installed\n         SPACE 3\n***********************************************************************\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***  END OF INSTALLATION GLOBALS                                    ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n***********************************************************************\n.@DONE   ANOP\n         SPACE 2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@GLOBLC@": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x87%\\x0f\\x00\\x99\\x04o#6\\x00\\xf2\\x00\\x1a\\x00\\xdc\\xc7\\xc7[\\xd3\\xc4\\xe6@@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1987-09-07T00:00:00", "modifydate": "1999-02-15T23:36:00", "lines": 242, "newlines": 26, "modlines": 220, "user": "GG$LDW"}, "text": "         MACRO\n&NFS     @GLOBALC  &MODULE,&ID\n.*********************************************************************.\n.*********************************************************************.\n.*********************************************************************.\n.***                                                               ***.\n.***  Installation local code                                      ***.\n.***                                                               ***.\n.***  This member contains data that is unique to a particular     ***.\n.***  installation.  The code generated here is that which is not  ***.\n.***  feasible to put in @GLOBALS.                                 ***.\n.***                                                               ***.\n.***  Updates:                                                     ***.\n.***    04Jul91      LDW - Add QUEUE section                       ***.\n.***    12Sep89      LDW - Fix bug in MNOTE                        ***.\n.***    29Nov87      LDW - Add USC data for CONS and LISTVO        ***.\n.***    09Sep87      LDW - Created for LISTVO                      ***.\n.***                                                               ***.\n.*********************************************************************.\n.*********************************************************************.\n.*********************************************************************.\n         PUSH  PRINT                                           @GLOBALC\n         PRINT OFF\n         COPY  @GLOBALS\n         POP   PRINT                                           @GLOBALC\n         AIF   ('&MODULE' EQ 'CONS'    ).CONS\n         AIF   ('&MODULE' EQ 'LISTVO'  ).LISTVO\n         AIF   ('&MODULE' EQ 'QUEUE'   ).QUEUE\n.ERR1    MNOTE 8,'Module &MODULE not supported by @GLOBALC'\n         MEXIT\n.CONS    ANOP\n         AIF   ('&ID' EQ 'LOCTABLE').CONS1\n         AIF   ('&ID' EQ 'MENULIST').CONS2\n         AGO   .ERR2\n.CONS1   ANOP\n         DC    C'5E0',CL(LNML)'SYSA Master    '\n         DC    C'5E8',CL(LNML)'Sal            '\n         DC    C'5E9',CL(LNML)'Susan          '\n         DC    C'5EA',CL(LNML)'LDW            '\n         DC    C'5EC',CL(LNML)'was Rich       '\n         DC    C'8E0',CL(LNML)'Master         '\n         DC    C'8E1',CL(LNML)'Tape           '\n         DC    C'8E2',CL(LNML)'Print          '\n         DC    C'8E3',CL(LNML)'TAMM           '\n         DC    C'8E4',CL(LNML)' unused        '\n         DC    C'8E5',CL(LNML)'Meighan        '\n         DC    C'8E6',CL(LNML)'was Lincoln    '\n         DC    C'8E7',CL(LNML)'Jose           '\n         DC    C'8E8',CL(LNML)'Sal            '\n         DC    C'8E9',CL(LNML)'Susan          '\n         DC    C'8EA',CL(LNML)'LDW            '\n         DC    C'8EB',CL(LNML)'Parker         '\n         DC    C'8EC',CL(LNML)'Mark           '\n         DC    C'JES',CL(LNML)'Subsys (TSSO)  '\n         AGO   .MEND\n.CONS2   ANOP\n         DC    CL39'                                       '    2\n         DC    CL39'                                       '\n         DC    CL39'/V ___,ONLINE                          '    3\n         DC    CL39'/M ___,VOL=(SL,______),USE=PRIVATE     '\n         DC    CL39'/V ___,OFFLINE                         '    4\n         DC    CL39'                                       '\n         DC    CL39'                                       '    5\n         DC    CL39'                                       '\n         DC    CL39'                                       '    6\n         DC    CL39'                                       '\n         DC    CL39'/D NET,ID=___                          '    7\n         DC    CL39'/V NET,ACT,ID=___                      '\n         DC    CL39'/D NET,CLSTRS                          '    8\n         DC    CL39'/V NET,INACT,ID=___                    '\n         DC    CL39'/D NET,LINES                           '    9\n         DC    CL39'/F TSO,USERMAX=0                       '\n         DC    CL39'/D NET,APPLS                           '   10\n         DC    CL39'                                       '\n         DC    CL39'/D NET,BFRUSE                          '   11\n         DC    CL39'                                       '\n         DC    CL39'/D NET,MAJNODES                        '   12\n         DC    CL39'                                       '\n         DC    CL39'                                       '   13\n         DC    CL39'                                       '\n         DC    CL39'                                       '   14\n         DC    CL39'                                       '\n         DC    CL39'                                       '   15\n         DC    CL39'                                       '\n         DC    CL39'                                       '   16\n         DC    CL39'                                       '\n         DC    CL39'                                       '   17\n         DC    CL39'                                       '\n         DC    CL79'.VS,''V ___,CONSOLE'',''V NET,INACT,I,ID=___'''\n         DC    CL79'/V ___,CONSOLE,ROUT=(1,2,3,4,5,6,7,8,9,10,12,13,14,$\n               15)                          '                  19\n         DC    CL79'                                       '   20\n         AGO   .MEND\n.LISTVO  ANOP\n         AIF   ('&ID' EQ 'NAMELIST').LISTVO1\n         AGO   .ERR2\n.LISTVO1 ANOP\n* Every volume prefix list MUST be the same length.\n         DC    CL8'SYS'                 List name\n         DC    CL6'MVS'                   1 Volume name prefix\n         DC    CL6'SP'                    2 Volume name prefix\n         DC    CL6'CIC'                   3 Volume name prefix\n         DC    CL6'IMS'                   4 Volume name prefix\n         DC    C' '                     End of vol prefix list\nUNITNLEN EQU   *-NAMELIST           Length of each vol prefix list\n         DC    CL8'SYSTOR'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'STOR'                List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'STOR80'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'TSOUDA'              List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'PRODDA'              List name\n         DC    CL6'PRD0'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSMVSA'             List name\n         DC    CL6'MVSA0'                 1 Volume name prefix\n         DC    CL6'MVSA1'                 1 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSDA'               List name\n         DC    CL6'SCRA0'                 1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'SYSTEMP'             List name\n         DC    CL6'SCRA0'                 1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'DATA'                List name\n         DC    CL6'DATA'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         DC    CL8'DATL'                List name\n         DC    CL6'DATL'                  1 Volume name prefix\n         DC    CL6' '                     2 Volume name prefix\n         DC    CL6' '                     3 Volume name prefix\n         DC    CL6' '                     4 Volume name prefix\n         DC    C' '                     End of vol prefix list\n         AGO   .MEND\n.QUEUE   ANOP\n         AIF   ('&ID' EQ 'JESTABLE').QJES\n         AIF   ('&ID' EQ 'LCLEQ'   ).QLCL\n         AIF   ('&ID' EQ 'PFKDFLT' ).QPFK\n         AIF   ('&ID' EQ 'SMFTABLE').QSID\n         AGO   .ERR2\n.QJES    ANOP\n*\n*  One entry is needed for each sysres/jes2 pair.  If volser is blank,\n*  DAIR will search the catalog.\n*\n         QSYSTBL  CKPTSFX=.HASPCKPT,SPCSFX=.HASPACE,TYPE=SET  defaults\n*                 SYSRES,SMF ,JES ,CKPT ,DSN\n         QSYSTBL  MVSUNO,,JES2,MVSUNO,SYS2.SYSX       MVSUNO own\n.*       QSYSTBL    ,SYSA,JES2,JESAC1,SYS1            SYSA own\n         QSYSTBL    ,SYSA,JES2,JESAC1,SYS1.JES2.R12   SYSA own\n         QSYSTBL    ,SYSD,JES2,JESDC1,SYS2.SYSD.NEW   SYSD own\n         QSYSTBL    ,SYSB,JES2,SYSB01,SYS1,           SYSB own         $\n               CKPTSFX=.JESCKPT\n         QSYSTBL    ,SYSE,JES2,MVSD5X,SYS2.OS390      SYSE own\n***  Fake entries which can be used via JES(xxx) keyword to select\n***  a non-default spool by symbolic name.\n         QSYSTBL        ,,SYSA,JESAC1,SYS1            SYSA spool\n         QSYSTBL        ,,SYSD,JESDC1,SYS2.SYSD.NEW   SYSD spool\n         QSYSTBL        ,,SYSH,SYSH02,SYS2.SYSH       SYSH spool\n         QSYSTBL        ,,SYSX,MVSUNO,SYS2.SYSX       MVSUNO spool\n         QSYSTBL        ,,SYSB,SYSB01,SYS1,           SYSB spool       $\n               CKPTSFX=.JESCKPT\n         QSYSTBL        ,,SYSE,MVSD5X,SYS2.OS390      SYSE own\n         QSYSTBL        ,,JESB,JESAC1,SYS1            SYSA own R3.1.3\n         QSYSTBL        ,,JESN,JESDC1,SYS2.SYSD       R3,1.3 SYSD\n         QSYSTBL        ,,JESZ,SYSA11,SYS3.JESZ       R1.2 test\n         AGO   .MEND\n.QLCL    ANOP\n*  Output destinations with the following names are considered to be\n*  'LOCAL' for purposes of DO/AO subcommands\n*        DC    CL8'LASER'\n*        DC    CL8'LASER1'\n*        DC    CL8'LASER3'\n         AGO   .MEND\n.QPFK    ANOP\n         DC    CL64'H'                  PF 1\n         DC    CL64'ST'                 PF 2\n         DC    CL64'E'                  PF 3\n         DC    CL64'PR'                 PF 4\n         DC    CL64'F'                  PF 5\n         DC    CL64'NS *'               PF 6\n         DC    CL64'U'                  PF 7\n         DC    CL64'D'                  PF 8\n         DC    CL64'AO'                 PF 9\n         DC    CL64'LE'                 PF 10\n         DC    CL64'RI'                 PF 11\n         DC    CL64'RC'                 PF 12\n         SPACE 1\n         DC    CL64'H'                  PF 13\n         DC    CL64'ST'                 PF 14\n         DC    CL64'E'                  PF 15\n         DC    CL64'PR'                 PF 16\n         DC    CL64'F'                  PF 17\n         DC    CL64'NS *'               PF 18\n         DC    CL64'U'                  PF 19\n         DC    CL64'D'                  PF 20\n         DC    CL64'AO'                 PF 21\n         DC    CL64'LE'                 PF 22\n         DC    CL64'RI'                 PF 23\n         DC    CL64'RC'                 PF 24\n         AGO   .MEND\n.QSID    ANOP\n*  One entry is needed for each SMFid to be displayed as something else\n*        DC    CL4'SCG2',CL4'A084'\n*        DC    CL4'SCG3',CL4'3090'\n*        DC    CL4'SCG4',CL4'B084'\n*        DC    CL4'SCG5',CL4'4381'\n         AGO   .MEND\n.ERR2    MNOTE 8,'Code point &ID for module not supported by @GLOBALC'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACCTPFX": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x89\\x02O\\x00\\x89\\x04_\\x13X\\x00\\x13\\x00\\x12\\x00\\x02\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-01-24T00:00:00", "modifydate": "1989-02-14T13:58:00", "lines": 19, "newlines": 18, "modlines": 2, "user": "LDW"}, "text": "         MACRO\n         ACCTPFX  &P=ATP,&DSECT=YES\n*=====================================================================*\n*                                                                     *\n*  This dsect maps the header for the in-storage valid-account        *\n*  numbers table, pointed to by UVTACCTS.                             *\n*                                                                     *\n*=====================================================================*\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n&P.      DSECT\n.NODSECT ANOP\n&P.ID    DS    CL8'USCACCTS'            eyecatcher\n&P.SP    DS    F                        subpool\n&P.TBLLN DS    F                        table length\n&P.ENTLN DS    F                        entry length\n&P.ENTNO DS    F                        number of entries\n         DS    XL(32-(*-&P))            make prefix 32 bytes\n&P.PLEN  EQU   *-&P                     length of prefix\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACCTTBL": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x89\\x04_\\x00\\x90\\x19?\\x17R\\x00\\x17\\x00\\x10\\x00\\x06\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-02-14T00:00:00", "modifydate": "1990-07-12T17:52:00", "lines": 23, "newlines": 16, "modlines": 6, "user": "LDW"}, "text": "         MACRO\n         ACCTTBL  &P=ATBL,&DSECT=YES\n*=====================================================================*\n*                                                                     *\n*  This dsect maps an entry in in-storage valid-account numbers       *\n*  table, pointed to by UVTACCTS.                                     *\n*                                                                     *\n*=====================================================================*\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n&P.      DSECT\n.NODSECT ANOP\n&P.ACCT  DS    CL5                      account number (xxxnn)\n&P.STAT  DS    C                        account status flag\n*              C'0'                     inhouse      (allow use)\n*              C'1'                     balance > 0  (allow use)\n*              C'2'                     balance <= 0 (disallow use)\n*              C'3'                     inactive     (disallow use)\n*              C'V'                     VM-only      (disallow use)\n&P.PCT   DS    H                        percent used (binary)\n&P.USED  DS    F                        YTD usage (binary)\n&P.BAL   DS    F                        account balance (binary)\n&P.ELEN  EQU   *-&P                     length of an entry\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALLOC": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x121\\x00\\xda\\x00\\xda\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:31:00", "lines": 218, "newlines": 218, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&LABEL   ALLOC &DDNAME=,&DSN=,&MEMBER=,                                $\n               &FILE=,&DATASET=,&PASSWD=,                              $\n               &PREFIX=NO,&DUMMY=NO,&PERM=YES,                         $\n               &SYSOUT=,&FORM=,&PROG=,&ATRNAME=,                       $\n               &UNIT=,&VOL=,                                           $\n               &SPACE=,&DISP=,                                         $\n               &MF=,&SYNAD=\n.*.\n.*$MACRO=ALLOC      DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO IS USED TO FILL IN A DAIR PARAMETER LIST AND CALL DAIR\n.*       TO ALLOCATE A DATASET.\n.*.\n         GBLB  &OMITTED,&DROP\n         LCLC  &PER,&PRE,&DUM,&REL,&TYP\n         LCLC  &SER,&SRE,&SUM,&SEL,&SYP\n.* PER=PERMANENT, PRE=PREFIX, DUM=DUMMY, REL=RELEASE,\n.* TYP=                                 ALLOC BY TRK|CYL|AVE BLK LEN\n&LABEL   DS    0H\n         AIF   (T'&SYSOUT NE 'O').SYSOUT\n         AIF   ('&DSN' EQ '*' OR '&DATASET' EQ '*').TERMAL\n         $MF   DAPB08,15,&MF\n         XC    DAPB08(DAPB08L),DAPB08   INITIALIZE DAIR BLOCK TO ZERO\n         MVI   DA08CD+1,X'08'           DAIR ENTRY CODE FOR ALLOCATE\n         $RXR  DA08PDSN,&DSN&DATASET,0  POINTER TO DATASET BUFFER\n         $RXQ  DA08DDN,&DDNAME&FILE,8   DDNAME\n         $RXQ  DA08UNIT,&UNIT,8         UNIT\n         $RXQ  DA08SER,&VOL,8           VOLUME NAME\n         AIF   (&OMITTED).MEMBER\n         MVC   DA08SER+6(2),=CL2' '     CLEAR LAST 2 BYTES OF VOLUME\n.MEMBER  $RXQ  DA08MNM,&MEMBER,8        MEMBER NAME\n         $RXQ  DA08PSWD,&PASSWD,8       PASSWORD\n         AIF   ('&DISP(1)' EQ 'OLD' AND '&SPACE(1)' NE '').SPACMSG\n         AIF   ('&DISP(1)' EQ 'SHR' AND '&SPACE(1)' NE '').SPACMSG\n         AIF   ('&SPACE' EQ '' ).NOSPACE\n         AIF   ( '&SPACE(1)' EQ '' ).SPACE2\n         AIF   ('&SPACE(1)' EQ 'TRK').TRK\n         AIF   ('&SPACE(1)' EQ 'CYL').CYL\n         $RXR  DA08BLK,&SPACE(1),0      AVERAGE BLOCK LENGTH\n&TYP     SETC  'DA08ABKL'\n&SYP     SETC  '+'\n**       ALLOCATION BY AVERAGE BLOCK LENGTH\n         AGO   .SPACE2\n.TRK     ANOP\n&TYP     SETC  'DA08TRKS'\n&SYP     SETC  '+'\n**       ALLOCATION IN TRACKS\n         AGO   .SPACE2\n.CYL     ANOP\n&TYP     SETC  'DA08CYLS'\n&SYP     SETC  '+'\n**       ALLOCATION IN CYLINDERS\n         AGO   .SPACE2\n.NOSPACE ANOP\n         AGO   .DISP\n.SPACE2  ANOP\n         $RXR  DA08PQTY,&SPACE(2),0     PRIMARY SPACE ALLOCATION\n         $RXR  DA08SQTY,&SPACE(3),0     SECONDARY QUANTITY\n         $RXR  DA08DQTY,&SPACE(4),0     DIRECTORY QUANTITY\n         AGO   .SKIP\n.SPACMSG MNOTE *,'DISP=&DISP(1) SPECIFIED, SPACE PARAMETERS IGNORED'\n.SKIP    AIF   ('&SPACE(5)' NE 'RLSE').DISP\n&REL     SETC  'DA08RLSE'\n**       RELEASE REQUESTED\n&SEL     SETC  '+'\n.DISP    AIF   ('&PREFIX' NE  'YES').NOPREF\n&PRE     SETC  'DA08UID'\n**       PREFIX WITH CHARGENO.USERID. REQUESTED\n&SRE     SETC  '+'\n.NOPREF  AIF   ('&PERM' NE 'YES').NOTPERM\n&PER     SETC  'DA08PERM'\n**       DATASET MUST BE SPECIFICALLY FREED\n&SER     SETC  '+'\n.NOTPERM AIF   ('&DUMMY' NE 'YES').NODUMMY\n&DUM     SETC  'DA08DMMY'\n**       THIS IS A DUMMY DATASET\n&SUM     SETC  '+'\n.NODUMMY ANOP\n         AIF   ('&PRE' EQ ''  AND '&PER' EQ ''  AND '&REL' EQ ''       X\n               AND '&DUM' EQ '' AND '&TYP' EQ '').NOCTL\n         OI    DA08CTL,0&SYP&TYP&SER&PER&SEL&REL&SUM&DUM&SRE&PRE\n.NOCTL   AIF   (T'&DISP EQ 'O').NODISP\n         AIF   (T'&DISP(1) EQ 'O').NODISP1\n         AIF   ('&DISP(1)' NE 'NEW').OLD1\n         MVI   DA08DSP1,DA08NEW         DISP=NEW\n         AGO   .DISP2\n.OLD1    AIF   ('&DISP(1)' NE 'OLD').SHR1\n         MVI   DA08DSP1,DA08OLD         DISP=OLD\n         AGO   .DISP2\n.SHR1    AIF   ('&DISP(1)' NE 'SHR').MOD1\n         MVI   DA08DSP1,DA08SHR         DISP=SHR\n         AGO   .DISP2\n.MOD1    AIF   ('&DISP(1)' NE 'MOD').DISPBAD\n         MVI   DA08DSP1,DA08MOD         DISP=MOD\n         AGO   .DISP2\n.NODISP1 ANOP\n**       DEFAULT INITIAL DISPOSTION IS DISP=NEW\n.DISP2   AIF   (T'&DISP(2) EQ 'O').NODISP2\n         AIF   ('&DISP(2)' NE 'KEEP').DELETE2\n         MVI   DA08DPS2,DA08KEEP        DISP=(,KEEP)\n         AGO   .DISP3\n.DELETE2 AIF   ('&DISP(2)' NE 'DELETE').CATLG2\n         MVI   DA08DPS2,DA08DEL         DISP=(,DELETE)\n         AGO   .DISP3\n.CATLG2  AIF   ('&DISP(2)' NE 'CATLG').UNCAT2\n         MVI   DA08DPS2,DA08CAT         DISP=(,CATLG)\n         AGO   .DISP3\n.UNCAT2  AIF   ('&DISP(2)' NE 'UNCATLG').DISPBAD\n         MVI   DA08DPS2,DA08UCAT        DISP=(,UNCATLG)\n         AGO   .DISP3\n.NODISP2 ANOP\n**       DEFAULT FINAL DISPOSITION IS DISP=(,KEEP)\n         AGO   .DISP3\n.DISP3   AIF   (T'&DISP(3) EQ 'O').MF\n         AIF   ('&DISP(3)' NE 'KEEP').DELETE3\n         MVI   DA08DPS3,DA08KEP         DISP=(,,KEEP)\n         AGO   .MF\n.DELETE3 AIF   ('&DISP(3)' NE 'DELETE').CATLG3\n         MVI   DA08DPS3,DA08DELE        DISP=(,,DELETE)\n         AGO   .MF\n.CATLG3  AIF   ('&DISP(3)' NE 'CATLG').UNCAT3\n         MVI   DA08DPS3,DA08CATL        DISP=(,,CATLG)\n         AGO   .MF\n.UNCAT3  AIF   ('&DISP(3)' NE 'UNCATLG').DISPBAD\n         MVI   DA08DPS3,DA08UNCT        DISP=(,,UNCATLG)\n         AGO   .MF\n.NODISP  ANOP\n**       DEFAULT DISPOSITION IS DISP=(NEW,KEEP)\n         AGO   .MF\n.DISPBAD ANOP\n         MNOTE  *,'*****************************************'\n         MNOTE  12,'INVALID DISPOSITON, EXPANSION TERMINATED'\n         MNOTE  *,'*****************************************'\n         MEXIT\n.MF      $RXQ  DA08ALN,&ATRNAME,8       ATTRIBUTE LIST NAME\n         AIF   (&OMITTED).LBE\n         OI    DA08CTL,DA08ATRL         ATTRIBUTE LIST SUPPLIED\n         AGO   .LBE\n.SYSOUT  $MF   DAPB30,15,&MF\n         XC    DAPB30(DAPB30L),DAPB30   INITIALIZE DAIR BLOCK TO ZERO\n         MVI   DA30CD+1,X'30'           DAIR ENTRY CODE SYSOUT ALLOCATE\n         $RXR  DA30PDSN,&DSN&DATASET,0  POINTER TO DATASET NAME\n         $RXQ  DA30DDN,&DDNAME&FILE,8   DDNAME\n         $RXQ  DA30UNIT,&UNIT,8         UNITNAME\n         $RXQ  DA30SER,&VOL,8           VOLUME NAME\n         AIF   (&OMITTED).PROG\n         MVC   DA30SER+6(2),=CL2' '     CLEAR LAST 2 BYTES OF VOLUME\n.PROG    $RXQ  DA30PGNM,&PROG,8         PROGRAM NAME\n         AIF   (T'&SPACE EQ 'O').DISPS\n         AIF   ('&SPACE(1)' EQ 'TRK').TRKS\n         AIF   ('&SPACE(1)' EQ 'CYL').CYLS\n         $RXR  DA30BLK,&SPACE(1),0      AVERAGE BLOCK LENGTH\n&TYP     SETC  'DA30ABKL'\n&SYP     SETC  '+'\n**       ALLOCATION BY AVERAGE BLOCK LENGTH\n         AGO   .SPACE2S\n.TRKS    ANOP\n&TYP     SETC  'DA30TRKS'\n&SYP     SETC  '+'\n**       ALLOCATION IN TRACKS\n         AGO   .SPACE2S\n.CYLS    ANOP\n&TYP     SETC  'DA08CYLS'\n&SYP     SETC  '+'\n**       ALLOCATION IN CYLINDERS\n.SPACE2S $RXR  DA30PQTY,&SPACE(2),0     PRIMARY ALLOCATION QUANTITY\n         $RXR  DA30SQTY,&SPACE(3),0     SECONDARY QUANTITY\n         AIF   (T'&SPACE(4) EQ 'O').SPACE5S\n        MNOTE *,'SPACE=, DIRECTORY QUANTITY INVALID FOR SYSOUT DATASET'\n.SPACE5S AIF   ('&SPACE(5)' NE 'RLSE').DISPS\n&REL     SETC  'DA30RLSE'\n**       RELEASE REQUESTED\n&SEL     SETC  '+'\n.DISPS   AIF   ('&PREFIX' NE  'YES').NOPREFS\n&PRE     SETC  'DA30UID'\n**       PREFIX WITH CHARGENO.USERID. REQUESTED\n&SRE     SETC  '+'\n.NOPREFS AIF   ('&PERM' NE 'YES').NOTPERS\n&PER     SETC  'DA30PERM'\n**       DATASET MUST BE SPECIFICALLY FREED\n&SER     SETC  '+'\n.NOTPERS AIF   ('&DUMMY' NE 'YES').NODUMMS\n&DUM     SETC  'DA30DMMY'\n**       THIS IS A DUMMY DATASET\n&SUM     SETC  '+'\n.NODUMMS AIF   ('&PRE' EQ ''  AND '&PER' EQ ''  AND '&REL' EQ ''       X\n               AND '&DUM' EQ '' AND '&TYP' EQ '').NOCTLS\n         OI DA30CTL,&TYP&SER&PER&SEL&REL&SUM&DUM&SRE&PRE\n.NOCTLS  $RXQ  DA30FORM,&FORM,4         FORM NUMBER\n         $RXQ  DA30OCLS,&SYSOUT,2       SYSOUT CLASS\n         AIF   (&OMITTED).CONT2\n         MVI   DA30OCLS+1,C' '          CLEAR SECOND BYTE\n         AGO   .CONT2\n.TERMAL  $MF   DAPB1C,15,&MF\n         XC    DAPB1C(DAPB1CL),DAPB1C   INITIALIZE DAIR BLOCK TO ZERO\n         MVI   DA1CCD+1,X'1C'  DAIR ENTRY CODE FOR TERMINAL ALLOCATION\n         AIF   ('&PERM' NE 'YES').NOPERMT\n         OI    DA1CCTL,DA1CPERM PERMANENTYLY ALLOCATED BIT\n.NOPERMT $RXQ  DA1CDDN,&DDNAME&FILE,8   DDNAME\n         $RXQ  DA1CALN,&ATRNAME,8       ATTRIBUTE LIST NAME\n         AIF   (&OMITTED).LBE\n         OI    DA1CCTL,DA1CATRL         ATTRIBUTE LIST SUPPLIED\n         AGO   .LBE\n.CONT2   $RXQ  DA30ALN,&ATRNAME,8       ATTRIBUTE LIST NAME\n         AIF   (&OMITTED).LBE\n         OI    DA30CTL,DA30ATRL         ATTRIBUTE LIST SUPPLIED\n.LBE     AIF   ('&MF(1)' EQ 'B').ENDB\n         AIF   ('&MF(1)' EQ 'L').ENDS\n.* OTHERWISE 'E' OR '' OR INVALID IS 'E'\n         TSDAIR DAPB=(15),SYNAD=&SYNAD\n         AGO   .ENDS\n.ENDB    ST    15,DAPLDAPB\n         LA    1,DAPL\n.ENDS    AIF   (NOT &DROP).END2S\n         DROP  15                 DROP ADDRESSIBILITY TO DAIR BLOCK\n.END2S   SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMODE": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x03\\x1f\\x00\\x84\\x03\\x1f\\x15\\x12\\x00\\t\\x00\\t\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-01-31T00:00:00", "modifydate": "1984-01-31T15:12:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     AMODE &X\n.*.\n.*$MACRO=AMODE      DATE=01/31/84       SOURCE=LDW\n.*\n.*  THIS IS A DUMMY MACRO UNTIL WE GET ASMH V2.\n.*.\n         MNOTE 0,'AMODE NOT SUPPORTED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMODE24": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92$\\x9f\\x00\\x92$\\x9f\"\\x01\\x00\\x06\\x00\\x06\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-05T00:00:00", "modifydate": "1992-09-05T22:01:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     AMODE24\n&NFS     LA    R14,*+6                  -> BSM target\n         BSM   0,R14                    switch to AMODE 24\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMODE31": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92$\\x9f\\x00\\x92$\\x9f!V\\x00\\x07\\x00\\x07\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-05T00:00:00", "modifydate": "1992-09-05T21:56:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     AMODE31\n&NFS     LA    R14,*+10                 -> BSM target\n         O     R14,=X'80000000'         make it AMODE 31\n         BSM   0,R14                    switch to AMODE 31\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APFSET": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84$\\x0f\\x00\\x85\\x00_ 1\\x00\\x10\\x00\\x0f\\x00\\x02\\xc5\\xd4\\xe2@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-08-27T00:00:00", "modifydate": "1985-01-05T20:31:00", "lines": 16, "newlines": 15, "modlines": 2, "user": "EMS"}, "text": "         MACRO\n&NFS     APFSET   &MODE\n         GBLA  &@@SCSVC                 SPF SERVICE SVC\n         AIF   ('&MODE' EQ 'ON').SET\n         AIF   ('&MODE' EQ 'OFF').RESET\n         MNOTE 12,'&MODE IS AN INVALID VALUE FOR &&MODE'\n         MNOTE 12,'VALID OPERANDS ARE  ON, OFF'\n         MEXIT\n.SET     ANOP  ,                       REQ APF AUTH\n&NFS     LA    R0,1                    REQ APF AUTH\n         AGO   .SVC                    INVOKE SERVICE\n.RESET   ANOP  ,\n&NFS     XR    R0,R0                   RESET APF AUTH\n.SVC     ANOP  ,\n         SVC   &@@SCSVC                REQ FUNCTION\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ATSVPARM": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x896_\\x00\\x896_ S\\x00\\x18\\x00\\n\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-31T00:00:00", "modifydate": "1989-12-31T20:53:00", "lines": 24, "newlines": 10, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     ATSVPARM  &DSECT=YES\n*\n*  Parmlist for special key attach SVC\n*\n*  Created December 31, 1989            Leonard D. Woren\n*\n*\n         AIF   ('&DSECT' NE 'YES').NODSECT\nATSVPARM DSECT ,                        parmlist to ATTCHSVC\n         AGO   .CONT\n.NODSECT ANOP\nATSVPARM DS    0D                       parmlist to ATTCHSVC\n.CONT    ANOP\nATSVID   DS    C'ATSV'                  parmlist id for double check\nATSVPLEN DS    H                        length of this parmlist\nATSVKEY  DS    X                        bits 0-3:  key for subtask TCB\n         DS    X                        unused\nATSVR0   DS    A                        R0 for attached program\nATSVR1   DS    A                        R1 for attached program\nATSVECBP DS    A                        -> subtask termination ECB\nATSVLEN  EQU   *-ATSVPARM               length of parmlist\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AXEXT#": {"ttr": 1295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x11\\x00\\x11\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- AXEXT -- EXTRACT AUTHORIZATION INDEX\n&LABEL   AXEXT\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n&LABEL   STM   14,12,12(13)          .SAVE CALLER'S REGS\n         EPAR  0\n         SLR   1,1                   .PARM REG 1 MUST BE ZERO\n         ESAR  2\n         ST    2,16(,13)             .SAVE SASID IN REG 15 SLOT\n         L     2,16                  .GET ADDR OF CVT\n         L     2,772(,2)             .GET ADDR OF SYSTEM FUNCTION TABLE\n         L     2,32(,2)              .GET LX/EX FOR AXEXT\n         PC    0(2)\n         L     2,16(,13)             .EXTRACT SAVED SASID\n         SSAR  2\n         LM    2,12,28(13)           .RESTORE REGS 2-14\n         L     14,12(,13)            .RESTORE REG 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AXSET#": {"ttr": 1297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x19\\x00\\x19\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- AXSET -- SET AUTHORIZATION INDEX\n&LABEL   AXSET &AX=\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n&LABEL   STM   14,12,12(13)          .SAVE CALLER'S REGS\n         AIF   ('&AX'(1,1) EQ '(').REG\n         SLR   0,0                   .ASSURE UPPER HALFWD IS ZERO\n         ICM   0,B'0011',&AX         .SET REG 0 TO AX VALUE\n         AGO     .NOMOVE\n.REG     AIF   ('&AX' EQ '(0)').NOMOVE\n         AIF   (N'&AX EQ 1).OK1\n         LR    0,&AX                 .SET REG 0TO AX VALUE\n         AGO     .NOMOVE\n.OK1     LR    0,&AX(1)              .SET REG 0TO AX VALUE\n.NOMOVE  SLR   1,1                   .PARM REG 1 MUST BE ZERO\n         ESAR  2\n         ST    2,16(,13)             .SAVE SASID IN REG 15 SLOT\n         L     2,16                  .GET ADDR OF CVT\n         L     2,772(,2)             .GET ADDR OF SYSTEM FUNCTION TABLE\n         L     2,36(,2)              .GET LX/EX FOR AXSET\n         PC    0(2)\n         L     2,16(,13)             .EXTRACT SAVED SASID\n         SSAR  2\n         LM    2,12,28(13)           .RESTORE REGS 2-14\n         L     14,12(,13)            .RESTORE REG 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHARTAB": {"ttr": 1299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x08\\x8f\\x00\\x82\\x19?!\\x18\\x00F\\x00$\\x00(\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-03-28T00:00:00", "modifydate": "1982-07-12T21:18:00", "lines": 70, "newlines": 36, "modlines": 40, "user": "LDW"}, "text": "         MACRO\n&NAME    CHARTAB &FILL=' ',&LC=YES,&TYPE=STANDARD\n.*.\n.*$MACRO=CHARTAB    DATE=08/23/79       SOURCE=LDW\n.*  UPDATES:\n.*    07/12/82  LDW  SUPPORT TYPE=FROM-ASCII AND LC=FOLD\n.*\n.*  THIS MACRO GENERATES A TRANSLATE TABLE TO TRANSLATE UNPRINTABLES\n.*  TO A FILL CHARACTER.\n.*.\n&NAME    DC    256C&FILL\n         AIF   ('&TYPE' EQ 'STANDARD').STD\n         AIF   ('&TYPE' EQ 'FROM-ASCII').FASCII\n         MNOTE 8,'TYPE=&TYPE UNKNOWN, TYPE=STANDARD ASSUMED'\n.STD     AIF   ('&LC'(1,1) EQ 'N').NOLC1\n         AIF   ('&LC'(1,1) EQ 'F').FOLD1\n         ORG   &NAME+C'A'-X'40'\n         DC    X'818283848586878889'\n         ORG   &NAME+C'J'-X'40'\n         DC    X'919293949596979899'\n         ORG   &NAME+C'S'-X'40'\n         DC    X'A2A3A4A5A6A7A8A9'\n         AGO   .NOLC1\n.FOLD1   ORG   &NAME+C'A'-X'40'\n         DC    C'ABCDEFGHI'\n         ORG   &NAME+C'J'-X'40'\n         DC    C'JKLMNOPQR'\n         ORG   &NAME+C'S'-X'40'\n         DC    C'STUVWXYZ'\n.NOLC1   ORG   &NAME+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   &NAME+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   &NAME+C'S'\n         DC    C'STUVWXYZ'\n         ORG   &NAME+C'0'\n         DC    C'0123456789'\n         ORG   &NAME+C' '\n         DC    C' '\n         ORG   &NAME+C'.'\n         DC    C'.<(+|&&'\n         ORG   &NAME+C'$'\n         DC    C'$*);\u00ac-/'\n         ORG   &NAME+C','\n         DC    C',%_>?'\n         ORG   &NAME+C':'\n         DC    C':#@''=\"'\n         ORG   &NAME+256\n         MEXIT\n.FASCII  ORG   &NAME+X'20'\n         DC    C' !\"#$%&&''()*+,-./'\n         DC    C'0123456789:;<=>?'\n         DC    C'@ABCDEFGHIJKLMNO'\n         DC    C'PQRSTUVWXYZ'\n         ORG   &NAME+X'5C'\n         DC    C'/'\n         ORG   &NAME+X'5F'\n         DC    C'_`'\n         AIF   ('&LC'(1,1) EQ 'N').NOLC2\n         AIF   ('&LC'(1,1) EQ 'F').FOLD2\n         DC    X'818283848586878889'\n         DC    X'919293949596979899'\n         DC    X'A2A3A4A5A6A7A8A9'\n         AGO   .NOLC2\n.FOLD2   DC    C'ABCDEFGHI'\n         DC    C'JKLMNOPQR'\n         DC    C'STUVWXYZ'\n.NOLC2   DC    C'{\u00a6}~'\n         ORG   &NAME+256\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COLHDR": {"ttr": 1301, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x84\\x05O\\x00\\x84\\x07O\\t(\\x00\\x14\\x00\\x13\\x00\\x06\\xe3\\xe3\\xf1\\xf8\\xf2\\xf4\\xf1@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-02-23T00:00:00", "modifydate": "1984-03-14T09:28:00", "lines": 20, "newlines": 19, "modlines": 6, "user": "TT18241"}, "text": "         MACRO\n&MODULE  COLHDR  &NAME\n.**********************************************************************\n.* THIS MACRO IS USED IN CONJUCTION WITH THE COLVAR MACRO TO          *\n.* GENERATE LISTS OF CONSTANTS FOR THE COLUP PROGRAMS. THIS           *\n.* MACRO GENERATES THE 'HEADER' FOR THE COLUP ASSEMBLIES.             *\n.**********************************************************************\n         GBLC  &COLSECT\n&COLSECT SETC  '&MODULE'                SAVE NAME OF DESCRIPTOR CSECT\n&MODULE  CSECT\n         DC    F'03'                    VERSION NUMBER\n         DC    A(VARLIST)               ADDRESS OF ISPF VARIABLE LIST\n         DC    A(VSAMAREA)              ADDRESS OF VSAM RECORD\n         DC    A(MINRECD-VSAMAREA)      LENGTH OF VSAM RECORD\n         DC    A(MAXRECD-VSAMAREA)      LENGTH OF VSAM RECORD\n         DC    C'&MODULE  &SYSDATE &SYSTIME'\nVSAMAREA EQU   *      '                 SET ASIDE A FULL BUFFER\nVARLIST  CSECT\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COLVAR": {"ttr": 1303, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x84\\x05O\\x00\\x84\\x07O\\t(\\x00#\\x00\\x1e\\x00\\x0b\\xe3\\xe3\\xf1\\xf8\\xf2\\xf4\\xf1@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1984-02-23T00:00:00", "modifydate": "1984-03-14T09:28:00", "lines": 35, "newlines": 30, "modlines": 11, "user": "TT18241"}, "text": "         MACRO\n&NFS     COLVAR  &VAR,&LEN,&NAME\n.********************************************************************\n.* THIS MACRO IS USED WITH THE COLUP PROGRAMS TO GENERATE TWO LISTS *\n.* OF CONSTANTS. ONE LIST IS USED AS LAYOUT OF THE VSAM RECORDS     *\n.* (THIS IS VSAMAREA IN COLSAMP). THE 2ND LIST IS USED TO INIT'LIZE *\n.* THE ISPF VARIABLE NAMES FOR TRANSFER OF DATA BETWEEN THE PANELS  *\n.* AND THE PROGRAM (THIS IS THE VARLIST CSECT).                     *\n.********************************************************************\n         GBLA  &VEOFF\n         GBLC  &COLSECT\n         LCLC  &COMMENT\n&COMMENT SETC  '                 OFFSET = &VEOFF'\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    CSECT\n         AGO   .NAMEOK\n.NONAME  ANOP\n&COLSECT CSECT\n.NAMEOK  ANOP\n         AIF   ('&VAR' EQ '*MIN').END1\n         AIF   ('&VAR' EQ '*MAX').END2\nP&VAR    DC    CL(&LEN)' '&COMMENT\n&VEOFF   SETA  &VEOFF+&LEN\nVARLIST  CSECT\n&NFS     DC    F'&LEN',A(P&VAR),CL10'(&VAR)',CL2' '\n         MEXIT\n.END1    ANOP\nMINRECD  EQU   *&COMMENT\nVARLIST  CSECT\n         MEXIT\n.END2    ANOP\nMAXRECD  EQU   *&COMMENT\nVARLIST  CSECT\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAIRPB04": {"ttr": 1305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'c\\x00\\x00\\x00\\x00\\x84\\t?\\x00\\x84\\t?\\x14G\\x00\\x1b\\x00\\x1b\\x00\\x00ooooooo@@@'", "ispf": {"version": "99.00", "flags": 0, "createdate": "1984-04-02T00:00:00", "modifydate": "1984-04-02T14:47:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "???????"}, "text": "         MACRO\n         DAIRPB04 &DSECT=YES,&COMM=YES\n         AIF   ('&DSECT' EQ 'YES').YES\nDAPB04   EQU   *\n         AGO   .GOON\n.YES     ANOP\nDAPB04   DSECT\n.GOON    AIF   ('&COMM' EQ 'NO').NOCOMM\n***********************************************************************\n* THIS OPERATION CODE CAUSES A SEARCH OF THE DSE TO BE MADE FOR THE   *\n* SPECIFIED DSNAME. IF IT IS NOT FOUND IN THE DSE THE SYSTEM CATALOG  *\n* IS ALSO SEARCHED                                                    *\n***********************************************************************\n.NOCOMM  ANOP\nDA04CD   DS    CL2      DAIR ENTRY CODE\nDA04CAT  EQU   X'04'    DSNAME FOUND IN  CATLG\nDA04FLG  DS    X        FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\nDA04DSE  EQU   X'02'    DSNAME FOUND IN  DSE\n         DS    X\n         DS    CL2      RESERVED\nDA04CTRC DS    H                  CATALOG RETURN CODE AREA\nDA04PDSN DS    A        POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA04CTL  DS    X        CONTROL FLGS FOR SPECIAL PROCESSING\nDA04UID  EQU   X'20'    USER ID IS TO BE PREFIXED TO DSNAME\n         DS    CL2      RESERVED\nDA04DSO  DS    CL1      INDICATES DSORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAIRPB08": {"ttr": 1307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'c\\x00\\x00\\x00\\x00\\x84\\t?\\x00\\x84\\t?\\x14G\\x009\\x009\\x00\\x00ooooooo@@@'", "ispf": {"version": "99.00", "flags": 0, "createdate": "1984-04-02T00:00:00", "modifydate": "1984-04-02T14:47:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "???????"}, "text": "         MACRO\n         DAIRPB08 &DSECT=YES,&COMM=YES\n         AIF   ('&DSECT' EQ 'YES').YES\nDAPB08   EQU   *\n         AGO   .GOON\n.YES     ANOP\nDAPB08   DSECT\n.GOON    AIF   ('&COMM' EQ 'NO').NOCOMM\n***********************************************************************\n* THIS OPERATION CODE CAUSES ALLOCATION OF A DATA SET. IT CAN ALLOC.  *\n* EITHER A NEW OR OLD SET.                                            *\n***********************************************************************\n.NOCOMM  ANOP\nDA08CD   DS    CL2      DAIR ENTRY CODE\nDA08FLG  DS    X        FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\nDA08FPE  EQU   X'80'    FUNCT PERFORMED BUT ERROR INDICATED BY RETCD\n         DS    X\nDA08DARC DS    H        DYN ALLOC RETURN CODE\nDA08CTRC DS    H        CATALOG RETURN CODE\nDA08PDSN DS    A        POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA08DDN  DS    CL8      DDNAME TO BE SEARCHED IN DSE\nDA08UNIT DS    CL8      UNITNAME REQUESTED\nDA08SER  DS    CL8      VOLUME SERIAL NUMBER-PADDED W/BLANKS\nDA08BLK  DS    CL4      DATA SET  AVERAGE RECORD LENGTH\nDA08PQTY DS    CL4      PRIMARY SPACE QUANTITY\nDA08SQTY DS    CL4      SECONDARY SPACE QUANTITY\nDA08DQTY DS    CL4      DIRECTORY BLOCK QUANTITY\nDA08MNM  DS    CL8      MEMBER NAME\nDA08PSWD DS    CL8      PASSWORD\nDA08DSP1 DS    X        DATA SET STATUS FLGS(IF=0 OLD ASSUMED)\nDA08SHR  EQU   X'08'    DATA SET IS SHR\nDA08NEW  EQU   X'04'    DATA SET IS NEW\nDA08MOD  EQU   X'02'    DATA SET IS MOD\nDA08OLD  EQU   X'01'    DATA SET IS OLD\nDA08DPS2 DS    X        DATA SET DISPOSITION(IF=0 KEEP ASSUMED)\nDA08KEEP EQU   X'08'    DS DISP IS KEEP\nDA08DEL  EQU   X'04'    DS DISP IS DELETE\nDA08CAT  EQU   X'02'    DS DISP IS CATLG\nDA08UCAT EQU   X'01'    DS DISP IS UNCATALOG\nDA08DPS3 DS    X        DATA SET CONDITIONAL DISPOSITION\nDA08KEP  EQU   X'08'\nDA08DELE EQU   X'04'\nDA08CATL EQU   X'02'    DS DISP OF CATLG DESIRED\nDA08UNCT EQU   X'01'    DS DISP OF UNCATLG DESIRED\nDA08CTL  DS    X        FLAGS TO CONTROL ACTIONS TAKEN BY DAIR\nDA08TRKS EQU   X'80'    UNITS ARE TRKS\nDA08ABKL EQU   X'40'\nDA08CYLS EQU   X'C0'    UNITS ARE CYLS\nDA08UID  EQU   X'20'    USER ID IS TO BE PREFIXED\nDA08RLSE EQU   X'10'    RELEASE (RLSE) REQUESTED\nDA08PERM EQU   X'08'    DATA SET MUST BE SPECIFICALLY UNALLOCATED\nDA08DMMY EQU   X'04'\nDA08ATRL EQU   X'02'    ATTRIBUTE LIST SUPPLIED                  C99236\n         DS    CL3      RESERVED\nDA08DSO  DS    CL1      DSORG\nDA08ALN  DS    CL8      ATTR-LIST-NAME                           C99236\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAIRPB1C": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'c\\x00\\x00\\x00\\x00\\x84\\t?\\x00\\x84\\t?\\x14G\\x00\\x17\\x00\\x17\\x00\\x00ooooooo@@@'", "ispf": {"version": "99.00", "flags": 0, "createdate": "1984-04-02T00:00:00", "modifydate": "1984-04-02T14:47:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "???????"}, "text": "         MACRO\n         DAIRPB1C &DSECT=YES,&COMM=YES\n         AIF   ('&DSECT' EQ 'YES').YES\nDAPB1C   EQU   *\n         AGO   .GOON\n.YES     ANOP\nDAPB1C   DSECT\n.GOON    AIF   ('&COMM' EQ 'NO').NOCOMM\n***********************************************************************\n* THIS OPERATION CODE REQUESTS ALLOCATION TO THE TERMINAL.            *\n***********************************************************************\n.NOCOMM  ANOP\nDA1CCD   DS    CL2      DAIR ENTRY CODE\nDA1CFLG  DS    X        FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\n         DS    X\nDA1CDARC DS    H        DYN ALLOC RETURN CODE\n         DS    CL1      RESERVED\nDA1CCTL  DS    CL1      CONTROL FIELD\nDA1CPERM EQU   X'08'    PERMANENTLY ALLOCATE BIT\nDA1CATRL EQU   X'02'    ATTRIBUTE LIST SUPPLIED                  C99236\nDA1CDDN  DS    CL8      DDNAME TO BE SEARCHED IN DSE\nDA1CALN  DS    CL8      ATTR-LIST-NAME                           C99236\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAIRPB18": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'c\\x00\\x00\\x00\\x00\\x84\\t?\\x00\\x84\\t?\\x14G\\x00$\\x00$\\x00\\x00ooooooo@@@'", "ispf": {"version": "99.00", "flags": 0, "createdate": "1984-04-02T00:00:00", "modifydate": "1984-04-02T14:47:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "???????"}, "text": "         MACRO\n         DAIRPB18 &DSECT=YES,&COMM=YES\n         AIF   ('&DSECT' EQ 'YES').YES\nDAPB18   EQU   *\n         AGO   .GOON\n.YES     ANOP\nDAPB18   DSECT\n.GOON    AIF   ('&COMM' EQ 'NO').NOCOMM\n***********************************************************************\n* THIS OPERATION CAUSES THE REQUESTED DATA SET OR DDNAME TO BE        *\n* UNALLOCATED. DISPOSITION CAN BE SPECIFIED TO OVERRIDE ANY PREVIOUS  *\n* DISPOSITION. LIKENISE SYSOUT CLASS MAY BE SPECIFIED TO OVERRIDE ANY *\n* PREVIOUS CLASS.                                                     *\n***********************************************************************\n.NOCOMM  ANOP\nDA18CD   DS    CL2      DAIR ENTRY CODE\nDA18FLG  DS    X        FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0\nDA18FPE  EQU   X'80'    FUNCT PERFORMED BUT ERROR INDICATED BY RETCD\n         DS    X\nDA18DARC DS    H                       DYNAMIC ALLOCATION RETURN CODE\nDA18CTRC DS    H                  CATALOG RETURN CODE AREA\nDA18PDSN DS    A        POINTER TO DSNAME TO BE SEARCHED IN DSE\nDA18DDN  DS    CL8      DDNAME TO BE SEARCHED IN DSE\nDA18MNM  DS    CL8      MEMBER NAME\nDA18SCLS DS    CL2      SYSOUT CLASS DESIRED WHEN UNALLOCATING  A\n*                       SYSOUT DATA SET\nDA18DPS2 DS    X        DATA SET DISPOSITION\nDA18KEEP EQU   X'08'    CHANGE DISP TO KEEP\nDA18DEL  EQU   X'04'    CHANGE DISP TO DELETE\nDA18CAT  EQU   X'02'    CHANGE DISP TO CATALOG\nDA18UCAT EQU   X'01'    CHANGE DISP TO UNCATLOG\nDA18CTL  DS    X        FLAGS FOR SPECIAL DAIR PROCESSING\nDA18UID  EQU   X'20'    USER ID IS TO BE PREFIXED TO DSNAME\nDA18PERM EQU  X'10'    UNALLOCATE PERM. ALLOCATED DSE'S       M0765\nDA18JBNM DS    CL8\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAYS": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x121\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:31:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     DAYS  &TYPE,&LEN=9\n.*.\n.*$MACRO=DAYS       DATE=04/19/77       SOURCE=LDW\n.*\n.*  THIS MACRO WILL GENERATE A TABLE OF THE NAMES OF THE DAYS OF THE\n.*       WEEK.  THIS TABLE IS USED BY THE 'TODAY' MACRO.\n.*.\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCBEXIT": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x01o\\x00\\x84\\x04o\\x17\\x03\\x00#\\x00\\x1e\\x00\\x07\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1984-02-15T17:03:00", "lines": 35, "newlines": 30, "modlines": 7, "user": "LDW"}, "text": "         MACRO\n&NFS     DCBEXIT  &BLKSIZE=,&BUFNO=\n.*.\n.*$MACRO=DCBEXIT    DATE=04/20/78       SOURCE=LDW\n.*\n.*  THIS MACRO WILL GENERATE A DCB EXIT TO SUPPLY CERTAIN OMITTED DCB\n.*       VALUES\n.*\n.*  UPDATED:  02/15/84 LDW  FIX FOR UNALIGNED MACRO CALL\n.*\n.*.\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&NAME' NE '').NAMEOK\n&NAME    SETC  'IHB&SYSNDX'\n.NAMEOK  PUSH  USING\n         DROP\n         USING &NAME,R15\n         AIF   ('&BLKSIZE' EQ '').B1\n&NAME    CLC   62(2,R1),=F'0'           BLKSIZE GIVEN?\n&NAME    SETC  ''\n         AIF   ('&BUFNO' EQ '').A1\n         BNE   *+10                     YES - USE IT\n         AGO   .A2\n.A1      BNER  R14                      YES - USE IT\n.A2      MVC   62(2,R1),=Y(&BLKSIZE)    SET DEFAULT\n.B1      AIF   ('&BUFNO' EQ '').C1\n&NAME    CLI   20(R1),0                 BUFNO GIVEN?\n         BNER  R14                      YES - USE IT\n         MVI   20(R1),&BUFNO            SET DEFAULT\n.C1      BR    R14                      RETURN TO OPEN\n         SPACE 2\n         POP   USING\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMS#DCC": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81\\x05o\\x00\\x81\\x05o\\x11\\x06\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-02-25T00:00:00", "modifydate": "1981-02-25T11:06:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "MCGINTY"}, "text": "         MACRO\n&NAME    DCMS#DCC  &I\n.*.\n.*$MACRO=ZB         DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*$MACRO=DCMS#DCC   DATE=02/25/81       SOURCE=DCMS\n.*\n.*   DECLARE CENTERED CONSTANT - CENTER A CONSTANT IN A 79 BYTE FIELD\n.*\n.*.\n         LCLA  &LL\n         LCLA  &HJ\n         LCLA  &HR\n         LCLA  &HL\n         AIF   ('&NAME' EQ '').NONAM\n&NAME    DS    0CL79\n.NONAM   AIF   (K'&I GT 79).TOLONG\n&LL      SETA  K'&I\n&HJ      SETA  81-&LL\n&HL      SETA  &HJ/2\n&HR      SETA  &HJ-&HL\n         DC    &HL.C' '\n         DC    C&I\n         DC    &HR.C' '\n         SPACE\n         MEXIT\n.TOLONG  MNOTE 9,'CONSTANT ITEM MUST BE 79 CHARACTERS OR LESS'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMS#FR": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x81\\x05_\\x00\\x81\\x05_\\x16X\\x00-\\x00-\\x00\\x00\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1981-02-24T00:00:00", "modifydate": "1981-02-24T16:58:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "MCGINTY"}, "text": "         MACRO\n&NAME    DCMS#FR &DIR,&N,&IMAGE\n.*.\n.*$MACRO=DCMS#FR    DATE=03/31/80       SOURCE=LDW\n.*$MACRO=#FRAME     DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*\n.*  THIS MACRO IS PART OF DCMS.\n.*\n.* UPDATES:\n.*    02/24/81 SDM  - MAJOR CHANGE:  FIX FOR STACK SIZE NOT\n.*                    MULTIPLE OF FRAME SIZE\n.*                  - IMPLEMENT 'TEST' OPERAND\n.*.\n&NAME    DS    0H\n         AIF   ('&DIR' EQ 'FORWARD').FOR\n         AIF   ('&DIR' EQ 'F').FOR\n         AIF   ('&DIR' EQ 'BACKWARD').BAK\n         AIF   ('&DIR' EQ 'B').BAK\n         MNOTE 9,'DIRECTION SPECIFICATION MISSING OR INVALID'\n         MEXIT\n.FOR     AIF   ('&IMAGE' EQ 'TEST').TSTFOR\n         L     R0,#NOW&N                CURRENT FRAME (SOURCE)\n         L     R1,#END&N                END OF STACK\n         SR    R1,R0                    REMAINING STACK LENGTH\n         C     R1,#SCR&N                MORE THAN FRAME LENGTH?\n         BNH   *+8                      NO, USE FOR SOURCE LENGTH\n         L     R1,#SCR&N                YES, USE ONE FRAME\n         LA    R14,&IMAGE               TRMIO IMAGE ADDRESS (DEST)\n         L     R15,#SCR&N               DEST LENGTH\n         MVCL  R14,R0                   MOVE (FILL WITH NULLS)\n         L     R1,#NOW&N                POINT TO\n         A     R1,#SCR&N                           NEXT FRAME\n         C     R1,#END&N                FREEZE\n         BNH   *+8                              IF\n         L     R1,#END&N                            NECESSARY\n         ST    R1,#NOW&N                SAVE NEXT FRAME ADDRESS\n         MEXIT\n.TSTFOR  SR    R15,R15                  INITIALIZE RETURN CODE\n         L     R14,#NOW&N               CURRENT FRAME\n         C     R14,#STK&N               ANY MORE DATA?\n         BL    *+8                      YES, LEAVE RC=0\n         LA    R15,4                    INDICATE NO MORE FRAMES\n         MEXIT\n.BAK     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMS#HFR": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x81\\x05_\\x00\\x81\\x05_\\x16X\\x00+\\x00+\\x00\\x00\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1981-02-24T00:00:00", "modifydate": "1981-02-24T16:58:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "MCGINTY"}, "text": "         MACRO\n&NAME    DCMS#HFR &DIR,&N,&IMAGE\n.*.\n.*$MACRO=DCMS#HFR   DATE=03/31/80       SOURCE=LDW\n.*$MACRO=#HFRAME    DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*\n.*  THIS MACRO IS PART OF DCMS.\n.*\n.* UPDATES:\n.*    02/24/81 SDM  - MAJOR CHANGE:  FIX FOR STACK SIZE NOT\n.*                    MULTIPLE OF FRAME SIZE\n.*.\n         LCLC  &IHBNX                                              LDW1\n&IHBNX   SETC  'IHB&SYSNDX'                                        LDW1\n&NAME    DS    0H\n         AIF   ('&DIR' EQ 'FORWARD').FOR\n         AIF   ('&DIR' EQ 'F').FOR\n         AIF   ('&DIR' EQ 'BACKWARD').BAK\n         AIF   ('&DIR' EQ 'B').BAK\n         MNOTE 9,'DIRECTION SPECIFICATION MISSING OR INVALID'\n         MEXIT\n.FOR     L     R15,#NOW&N               CURRENT FRAME (SOURCE)\n         LA    R14,&IMAGE               TRMIO IMAGE ADDRESS (DEST)\n         L     R1,#MVC&N                NUMBER OF BYTES PER ENTRY\n         BCTR  R1,0                     -1 FOR EX INSTR\n         L     R2,#LPF&N                NUMBER OF LINES TO MOVE\n         B     &IHBNX.L\n&IHBNX.M MVC   0(0,R14),0(R15)          << EXECUTED >>\n&IHBNX.L C     R15,#END&N               EXCEEDED STACK?\n         BNL   &IHBNX.X                 YES, GET OUT NOW\n         EX    R1,&IHBNX.M              MOVE CURRENT LINE\n         LA    R14,79(,R14)             NEXT LINE\n         LA    R15,79(,R15)                NEXT LINE\n         BCT   R2,&IHBNX.L\n&IHBNX.X L     R1,#NOW&N                POINT TO\n         A     R1,#SCR&N                           NEXT FRAME\n         C     R1,#END&N                FREEZE\n         BNH   *+8                              IF\n         L     R1,#END&N                            NECESSARY\n         ST    R1,#NOW&N                SAVE NEXT FRAME ADDRESS\n         MEXIT\n.BAK     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMS#PUT": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x81\\x05_\\x00\\x81\\x05_\\x16X\\x00\\x18\\x00\\x18\\x00\\x00\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1981-02-24T00:00:00", "modifydate": "1981-02-24T16:58:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "MCGINTY"}, "text": "         MACRO\n&L       DCMS#PUT &N,&LINE\n.*.\n.*$MACRO=DCMS#PUT   DATE=03/31/80       SOURCE=LDW\n.*$MACRO=#PUT       DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*\n.* UPDATES:\n.*    02/24/81 SDM  - MAJOR CHANGES - STOP WRAPPING STACK\n.*\n.*.\n         LCLC  &IHBNX\n&IHBNX   SETC  'IHB&SYSNDX'\n&L       LA    R0,&LINE                 SOURCE DATA\n         L     R1,#MVC&N                SOURCE DATA LENGTH\n         L     R14,#STK&N               CURRENT STACK ENTRY (DEST)\n         LA    R15,79                   STACK ENTRY LENGTH\n         C     R14,#END&N               ANY ROOM IN STACK?\n         BNL   &IHBNX.X                 NO, DON'T CAUSE TROUBLE\n         MVCL  R14,R0                   MOVE DATA (FILL WITH NULLS)\n         L     R1,#STK&N                UPDATE\n         LA    R1,79(,R1)                     CURRENT\n         ST    R1,#STK&N                             STACK POINTER\n&IHBNX.X DC    0H'0'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMS#STK": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x80\\t\\x1f\\x00\\x80\\t\\x1f\\x12E\\x00I\\x00I\\x00\\x01\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1980-03-31T00:00:00", "modifydate": "1980-03-31T12:45:00", "lines": 73, "newlines": 73, "modlines": 1, "user": "LDW"}, "text": "         MACRO\n&N       DCMS#STK &A,&SIZE=100,&LINE=79,&ENTRY=79,&R=11,&FRAME=20,     X\n               &AREA=,&CLEAR=YES\n.*.\n.*$MACRO=DCMS#STK   DATE=03/31/80       SOURCE=LDW\n.*$MACRO=#STAK      DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*\n.*\n.*.\n         AIF  (K'&N LT 5).GEN\n         MNOTE 9,'STACK NAME MUST BE FOUR BYTES OR LESS'\n         MEXIT\n.MSG2    MNOTE 9,'AREA ADDRESS SPECIFICATION MISSING OR INVALID'\n         MEXIT\n.GEN     AIF   ('&A' EQ 'RESET').RESET\n         AIF   ('&A' EQ 'BUILD').GETT\n         AIF   ('&A' EQ 'GET').GET1\n         AIF   ('&A' EQ 'INIT').INIT\n         MEXIT\n.GET1    CNOP  0,4                      DO AN EXPLICIT GETMAIN\n         BAL   1,*+8                       TO\n         DC    A(&SIZE*79)                    AVOID\n         L     0,0(0,1)                           MACRO\n         SVC   10                                      CONFUSION\n         ST    R1,#TOP&N                TOP OF STACK\n         SPACE 2\n         AGO   .INIT2\n.GETT    CNOP  0,4                      DO AN EXPLICIT GETMAIN\n         BAL   1,*+8                       TO\n         DC    A(&SIZE*79+64)                AVOID\n         L     0,0(0,1)                           MACRO\n         SVC   10                                      CONFUSION\n         LR    &R.,1\n         USING &N.,&R\n         LA    R1,#SSS&N\n         ST    R1,#TOP&N                TOP OF STACK\n         SPACE 2\n         AGO   .INIT2\n.INIT    AIF   ('&AREA' EQ '').MSG2\n         LA    R1,&AREA                 TOP OF STACK\n         ST    R1,#TOP&N\n.INIT2   L     R1,=A(&SIZE*79)\n         ST    R1,#LEN&N                SIZE OF STACK\n         LA    R1,&ENTRY\n         ST    R1,#MVC&N                INPUT ENTRY SIZE\n         LA    R1,&SIZE\n         ST    R1,#SIZ&N                NUMBER OF LINES\n         LA    R1,&FRAME                LINES PER FRAME\n         ST    R1,#LPF&N\n         L     R1,=A(&FRAME*79)\n         ST    R1,#SCR&N                SIZE OF FRAME\n         L     R1,#TOP&N                SET TOP OF STAK IN:\n         ST    R1,#STK&N                - CURRENT LINE\n         ST    R1,#NOW&N                - CURRENT FRAME\n         A     R1,#LEN&N                AND\n         ST    R1,#END&N                - BOTTOM OF STACK\n         SPACE 2\n.CLEAR   AIF   ('&CLEAR' EQ 'NO').FINISH\n         L     R14,#TOP&N               CLEAR\n         L     R15,#LEN&N                    THE\n         LR    R0,R14                           ENTIRE\n         SR    R1,R1                                  STACK\n         ICM   R1,8,BLANKS                                 TO\n         MVCL  R14,R0                                        BLANKS\n.FINISH  SPACE 1\n         MEXIT\n.RESET   ANOP\n*                                       RESET:\n         L     R1,#TOP&N                TOP OF STAK IN:\n         ST    R1,#STK&N                - CURRENT LINE\n         ST    R1,#NOW&N                - CURRENT FRAME\n         AGO   .CLEAR\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSERV": {"ttr": 1556, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x00\\x80\\x03_\\x00\\x836/\\x12G\\x00?\\x00?\\x00\\x08\\xe2\\xc4\\xd4@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1983-12-28T12:47:00", "lines": 63, "newlines": 63, "modlines": 8, "user": "SDM"}, "text": "         MACRO\n         DCMSERV &FORCE=NO\n.*.\n.*$MACRO=DCMSERV    DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT GENERATES THE DCMS SERVICE\n.*  SUBROUTINES.\n.*\n.*  UPDATES:\n.*     12/21/83 SDM  FIX MESSED UP CODE IN @HEX\n.*\n.*.\n         COPY  DCMSGBLS\n         AIF   ('&FORCE' NE 'YES').NOSETS\n&DCMSCLR SETB  1\n&DCMSHEX SETB  1\n&DCMSDEC SETB  1\n&DCMSWRK SETB  1\n&DCMSCST SETB  1\n.NOSETS  ANOP\n*                                                                     *\n*                                                                     *\n*        D C M S    S E R V I C E    S U B R O U T I N E S            *\n*                                                                     *\n*                                                                     *\n         SPACE 3\n         AIF   (&DCMSCLR).CLR\n         AGO   .CLROUT\n.CLR     ANOP\n&DCMSWRK SETB  1\n&DCMSCST SETB  1\n         SPACE 2\n@CLEAR   STM   R2,R5,@CLEARSA\n         LR    R2,R1\n         LR    R3,R0\n         LH    R3,0(,R3)\n         SR    R4,R4\n         SR    R5,R5\n         ICM   R5,B'1000',BLANKS\n         MVCL  R2,R4\n         LM    R2,R5,@CLEARSA\n         BR    R14\n.CLROUT  AIF   (NOT &DCMSDEC).DECOUT\n&DCMSWRK SETB  1\n&DCMSCST SETB  1\n         SPACE 2\n@DECIMAL L     R2,DECWORK1\n@DECIML2 CVD   R2,DECWORK3\n         MVC   DECWORK4(4),EDITMASK\n         ED    DECWORK4(4),DECWORK3+6\n         XC    DECWORK1(4),DECWORK1\n         BR    R14\n         SPACE 1\n.DECOUT  AIF   (NOT &DCMSHEX).HEXOUT\n&DCMSWRK SETB  1\n&DCMSCST SETB  1\n         SPACE 2\n@HEX     UNPK  HEXWORK2(9),HEXWORK1(5)\n         MVI   HEXWORK2+8,C' '\n         TR    HEXWORK2,TRTBL\n         BR    R14\n         SPACE 2\n.HEXOUT  MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSFEND": {"ttr": 1558, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x03_\\x00\\x80\\x04o\\x12\\x02\\x00\\x18\\x00\\x18\\x00\\x03\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-02-15T12:02:00", "lines": 24, "newlines": 24, "modlines": 3, "user": "LDW"}, "text": "         MACRO\n         DCMSFEND\n.*.\n.*$MACRO=DCMSFEND   DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO TERMINATE A SCREEN\n.*  DEFINITION.  (RENAMED FROM \"SFEND\")\n.*.\n         GBLA  &SFLEN,&SFCNT\n         GBLA  &SFLTBL(200),&SFSTRT(20),&SFEND(20),&SFFCT,&SFNCT\n         GBLB  &SFNUM(200),&SFFLAG,&SFCUR\n         GBLC  &SFFNAM(200),&SFNAM(20)\n         GBLC  &SFENAM\n         LCLA  &T\n         AIF   (&SFFLAG).INITOK\n         MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.INITOK  ANOP\n&SFFLAG  SETB  0\n&SFEND(&SFNCT) SETA &SFFCT\nL&SFENAM EQU   &SFLEN             TOTAL STORAGE REQUIRED FOR IMAGE\n&T       SETA  8*&SFCNT+6\n&SFENAM  EQU   &T                 TOTAL LENGTH OF FORMAT TABLE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DCMSFLD": {"ttr": 1560, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x00\\x80\\x03_\\x00\\x80 o\\x168\\x00\\x87\\x00\\x86\\x00\\x02\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-07-24T16:38:00", "lines": 135, "newlines": 134, "modlines": 2, "user": "LDW"}, "text": "         MACRO\n&NAME    DCMSFLD &LEN,&TYPE,&INTEN=,&MDT=OFF,&CURSOR=NO,&ROW=,&COLUMN=\n.*.\n.*$MACRO=DCMSFLD    DATE=02/04/79       SOURCE=LDW\n.* MACRO=FIELD      DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO DEFINE A FIELD IN THE\n.*  THE DISPLAY SCREEN.\n.*  (NOTE: THIS WAS THE \"FIELD\" MACRO)\n.*.\n         GBLA  &SFCOL,&SFROW,&SFLEN,&SFCNT\n         GBLA  &SFLTBL(200),&SFSTRT(20),&SFEND(20),&SFFCT,&SFNCT\n         GBLB  &SFNUM(200),&SFFLAG,&SFCUR\n         GBLC  &SFFNAM(200),&SFNAM(20)\n         LCLA  &I,&J,&K\n         AIF   (&SFFLAG).INITOK\n         MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.INITOK  ANOP\n.*LDW    AIF   (T'&LEN NE 'N').E1\n         AIF   (&LEN LT 1 OR &LEN GT 1900).E1\n         AIF   ('&CURSOR' EQ 'NO' OR '&CURSOR' EQ 'YES' OR '&CURSOR' EQX\n                'AFTER').CUROK\n         MNOTE 4,'CURSOR=&CURSOR ASSUMED TO MEAN CURSOR=YES'\n.CUROK   AIF   ('&CURSOR' EQ 'NO').NOCUR\n         AIF   (NOT &SFCUR).FIRSTC\n         MNOTE 4,' ONLY ONE FIELD MAY HAVE A CURSOR IN IT'\n         AGO   .NOCUR\n.FIRSTC  ANOP\n&SFCUR   SETB  1\n         AIF   ('&CURSOR' EQ 'AFTER').CURAFT\n         DC    X'80'              FLAGS (CURSOR IN FIELD)\n         AGO   .ENDCUR\n.CURAFT  DC    X'C0'              FLAGS (CURSOR AFTER DATA IN FIELD)\n         AGO   .ENDCUR\n.NOCUR   DC    X'00'              FLAGS\n.ENDCUR  ANOP\n         AIF   (T'&TYPE EQ 'O' OR '&TYPE' EQ 'DISPLAY').DISP\n         AIF   ('&TYPE' EQ 'ALPHA').ALPHA\n         AIF   ('&TYPE' EQ 'NUMERIC').NUM\n         MNOTE 8,' INVALID SECOND ARGUMENT (&TYPE) IGNORED'\n         AGO   .DISP\n.NUM     ANOP\n&I       SETA  16\n.ALPHA   AIF   (T'&INTEN NE 'O').CKINT\n&I       SETA  &I+4\n         AGO   .EINT\n.DISP    ANOP\n&I       SETA  48\n         AIF   (T'&INTEN NE 'O').CKINT\n&I       SETA  56\n         AGO   .EINT\n.CKINT   AIF   ('&INTEN' NE 'OFF').INT1\n&I       SETA  &I+12\n         AGO   .EINT\n.INT1    AIF   ('&INTEN' NE 'LO').INT2\n&I       SETA  &I+4\n         AGO   .EINT\n.INT2    AIF   ('&INTEN' EQ 'HI').INT3\n         MNOTE 4,' INTEN=&INTEN ASSUMED TO MEAN INTEN=HI'\n.INT3    ANOP\n&I       SETA  &I+8\n.EINT    ANOP\n         AIF   ('&MDT' EQ 'OFF' OR '&MDT' EQ 'ON').MDTOK\n         MNOTE 4,' MDT=&MDT ASSUMED TO MEAN MDT=ON'\n.MDTOK   AIF   ('&MDT' EQ 'OFF').EMDT\n&I       SETA  &I+1\n.EMDT    ANOP\n&J       SETA  &I-(&I/16)*16\n&I       SETA  &I+64\n         AIF   (&J GT 9 OR &J EQ 0 OR &I EQ 97).SPEC\n&I       SETA  &I+128\n.SPEC    DC    AL1(&I)            ATTRIBUTE BYTE\n.*\n.*       NOW WE MUST FIND THE COLUMN AND ROW THAT THE DATA START IN.\n.*       NOTE THAT THE BYTE IN FRONT OF THERE MUST BE FREE FOR THE\n.*             ATTRIBUTE BYTE.\n.*\n&I       SETA  &SFROW\n         AIF   (T'&ROW EQ 'O').NOROW\n         AIF   (T'&ROW EQ 'N').ROWOK\n.BADROW  MNOTE 8,' INVALID ROW=&ROW IGNORED'\n&I       SETA  &SFROW\n         AGO   .NOROW\n.ROWOK   ANOP\n         AIF   (&I LT 1 OR &I GT 24).BADROW\n&I       SETA  &ROW\n         AIF   (&I EQ &SFROW).NOROW\n         AIF   (&I GT &SFROW).NEWROW\n         MNOTE 8,' ROW=&ROW SPECIFIES ROW ABOVE CURRENT ROW (&SFROW)'\n&I       SETA  &SFROW\n         AGO   .NOROW\n.NEWROW  ANOP\n&SFCOL   SETA  1\n.NOROW   ANOP\n&J       SETA  &SFCOL\n         AIF   (T'&COLUMN EQ 'O').NOCOL\n         AIF   (T'&COLUMN EQ 'N').COLOK\n.BADCOL  MNOTE 8,' INVALID COLUMN=&COLUMN IGNORED'\n&J       SETA  &SFCOL\n         AGO   .NOCOL\n.COLOK   ANOP\n&J       SETA  &COLUMN\n         AIF   (&J LT 1 OR &J GT 80).BADCOL\n         AIF   (&J GE &SFCOL).NOCOL\n         AIF   (T'&ROW EQ 'O').BUMPROW\n         MNOTE 8,' COLUMN=&COLUMN CAUSES FIELD OVERLAP'\n&J       SETA  &SFCOL\n         AGO   .NOCOL\n.BUMPROW ANOP\n&I       SETA  &I+1\n.NOCOL   ANOP\n         MNOTE *,' &LEN BYTE FIELD IN ROW &I COLUMN &J'\n&K       SETA  (&I-1)*80+&J-1\n         DC    Y(&K,&SFLEN,&LEN)  BUFF ADDR, IMAGE OFFSET, LENGTH\n&SFROW   SETA  &I\n&SFCOL   SETA  &J+&LEN+1\n.RCTST   AIF   (&SFCOL LE 80).RCUPD\n&SFROW   SETA  &SFROW+1\n&SFCOL   SETA  &SFCOL-80\n         AGO   .RCTST\n.RCUPD   ANOP\n&SFLEN   SETA  &SFLEN+&LEN\n&SFCNT   SETA  &SFCNT+1\n&SFFCT   SETA  &SFFCT+1\n         AIF   (&SFFCT GT 200).ERR\n&SFLTBL(&SFFCT) SETA &LEN\n&SFNUM(&SFFCT) SETB ('&TYPE' EQ 'NUMERIC')\n&SFFNAM(&SFFCT) SETC '&NAME'\n         SPACE 1\n         MEXIT\n.E1      MNOTE 8,'INVALID LENGTH SPECIFIED'\n         MEXIT\n.ERR     MNOTE 12,'*** TOO MANY FIELDS TOTAL IN ALL FORMATS ***'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DCMSFMT": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x03_\\x00\\x80\\x04o\\x12\\x03\\x000\\x00/\\x00\\x03\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-02-15T12:03:00", "lines": 48, "newlines": 47, "modlines": 3, "user": "LDW"}, "text": "         MACRO\n&NAME    DCMSFMT  &BEEP=NO,&RESTORE=YES,&RESET=YES\n.*.\n.*$MACRO=DCMSFMT    DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS STARTS A SCREEN DEFINITION.\n.*  (RENAMED FROM SFMT)\n.*.\n         GBLA  &SFCOL,&SFROW,&SFLEN,&SFCNT\n         GBLA  &SFLTBL(200),&SFSTRT(20),&SFEND(20),&SFFCT,&SFNCT\n         GBLB  &SFNUM(200),&SFFLAG,&SFCUR\n         GBLC  &SFFNAM(200),&SFNAM(20)\n         GBLC  &SFENAM\n         LCLB  &BP,&RR,&RS\n         AIF   (&SFFLAG).E1\n         AIF   (T'&NAME EQ 'O').E2\n&SFFLAG  SETB  1\n&SFNCT   SETA  &SFNCT+1\n         AIF   (&SFNCT GT 20).ERR\n&SFNAM(&SFNCT) SETC '&NAME'\n&SFSTRT(&SFNCT) SETA &SFFCT+1\n         AIF   ('&BEEP' EQ 'NO' OR '&BEEP' EQ 'YES').BEEPOK\n         MNOTE 4,' BEEP=&BEEP ASSUMED TO MEAN BEEP=YES'\n.BEEPOK  ANOP\n&BP      SETB  ('&BEEP' NE 'NO')\n         AIF   ('&RESTORE' EQ 'NO' OR '&RESTORE' EQ 'YES').RSTROK\n         MNOTE 4,' RESTORE=&RESTORE ASSUMED TO MEAN RESTORE=NO'\n.RSTROK  ANOP\n&RR      SETB  ('&RESTORE' EQ 'YES')\n         AIF   ('&RESET' EQ 'NO' OR '&RESET' EQ 'YES').RSTOK\n         MNOTE 4,' RESET=&RESET ASSUMED TO MEAN RESET=NO'\n.RSTOK   ANOP\n&RS      SETB  ('&RESET' EQ 'YES')\n&SFENAM  SETC  'SF&SYSNDX'\n&NAME    DC    Y(L&SFENAM,&SFENAM)          LENGTHS\n         DC    BL2'00000&BP&RR&RS.00000000' FLAGS\n&SFCUR   SETB  0\n&SFCNT   SETA  0\n&SFLEN   SETA  0\n&SFROW   SETA  1                  TOP OF SCREEN\n&SFCOL   SETA  2                  POSITION 1 IS AN ATTRIBUTE BYTE\n         MEXIT\n.E1      MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.E2      MNOTE 8,'FORMAT NAME REQUIRED'\n         MEXIT\n.ERR     MNOTE 12,'*** TOO MANY DIFFERENT FORMATS ***'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSGBLS": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x03_\\x00\\x80\\x03_\\x13!\\x00/\\x00/\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-02-04T13:21:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "LDW"}, "text": ".*.\n.*$MACRO=DCMSGBLS   DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS IS COPY CODE FOR DCMS MACROS.  IT DEFINES THE DCMS GLOBAL SET\n.*  SYMBOLS.\n.*.\n.*                                                                    *\n.*       G B L A    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLA  &DP(33) .\n         GBLA  &GCT .\n         GBLA  &GCOUNT .\n         GBLA  &REG .\n.*                                                                    *\n.*       G B L B    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLB  &DBLE .\n         GBLB  &LIST .\n         GBLB  &DBUG .\n         GBLB  &EQU .\n         GBLB  &WDSW .\n         GBLB  &RENT .\n         GBLB  &PLG .\n         GBLB  &ONETM .\n         GBLB  &DASHS .\n         GBLB  &PWRK .\n         GBLB  &RCD .\n         GBLB  &DCMSCLR .\n         GBLB  &DCMSHEX .\n         GBLB  &DCMSDEC .\n         GBLB  &DCMSWRK .\n         GBLB  &DCMSCRN .\n         GBLB  &DCMSCST .\n.*                                                                    *\n.*       G B L C    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLC  &WD(33) .\n         GBLC  &NAM .\n         GBLC  &LVNUM .\n         GBLC  &DNAM .\n         GBLC  &ONAM .\n         GBLC  &INAM .\n         GBLC  &RNAM .\n         GBLC  &NDX .\n         GBLC  &CSECT .\n         GBLC  &DSECT .\n         GBLC  &DCMSHLP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSNULL": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00y)\\x8f\\x00y)\\x8f\\x11\\x04\\x00\\x19\\x00\\x19\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1979-10-25T00:00:00", "modifydate": "1979-10-25T11:04:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NAME    DCMSNULL &IMAGE=,&FORMAT=,&BLOCK=\n.*$MACRO=DCMSNULL   DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n         COPY  DCMSGBLS\n         AIF   ('&BLOCK' EQ '').IFA\n         AIF   ('&BLOCK' EQ 'IOCB').IOCB\n         AIF   ('&BLOCK' EQ 'TDCB').TDCB\n         MNOTE 9,'BLOCK= OPERAND MUST BE IOCB OR TDCB'\n         MEXIT\n.TDCB    ANOP\n         MNOTE 9,'TCDB GENERATION NO WORKY'\n         MEXIT\n.IOCB    ANOP\n&NAME    LM    R0,R1,IOCB\n         AGO   .INVOK\n.IFA     ANOP\n&NAME    LA    R0,&FORMAT\n         LA    R1,&IMAGE\n.INVOK   ANOP\n         BAL   R14,@CLEAR\n*\n**\n*\n&DCMSCLR SETB  1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSREGS": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x03_\\x00\\x80\\x14O\\x14\\x17\\x00+\\x00H\\x00\\x12\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-05-23T14:17:00", "lines": 43, "newlines": 72, "modlines": 18, "user": "LDW"}, "text": "         MACRO\n         DCMSREGS &R\n.*.\n.*$MACRO=DCMSREGS   DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT GENERATES EQUATES FOR SYMBOLIC\n.*  REGISTERS.\n.*.\n         COPY  DCMSGBLS\n         AIF   (&EQU).END\n&EQU     SETB  1\n         AIF   (NOT &LIST).LISTX\n         SPACE 1\n.END     MEXIT\n.LISTX   SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        G E N E R A L   R E G I S T E R   E Q U A T E S              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\nR0       EQU   0      ==========>       PARAMETER REGISTER\nR1       EQU   1      ==========>       PARAMETER LIST REGISTER\nR2       EQU   2      ==========>       SUBROUTINE LINKAGE REGISTER\nR3       EQU   3      ==========>       WORK REGISTER\nR4       EQU   4      ==========>       WORK REGISTER\nR5       EQU   5      ==========>       WORK REGISTER\nR6       EQU   6      ==========>       WORK REGISTER\nR7       EQU   7      ==========>       WORK REGISTER\nR8       EQU   8      ==========>       WORK REGISTER\nR9       EQU   9      ==========>       WORK REGISTER\nR10      EQU   10     ==========>       IOCB/DSECT REGISTER\nR11      EQU   11     ==========>       PARM/WORK  REGISTER\nR12      EQU   12     ==========>       BASE REGISTER\nR13      EQU   13     ==========>       SAVE AREA REGISTER\nR14      EQU   14     ==========>       RETURN LINKAGE REGISTER\nR15      EQU   15     ==========>       ENTRY POINT LINKAGE REGISTER\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSTART": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x00\\x00\\x80\\x03_\\x00\\x97\\x18\\x1f\\x152\\x00\\xe2\\x00\\xd0\\x00$\\xc7\\xc7[\\xd3\\xc4\\xe6@@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1997-06-30T15:32:00", "lines": 226, "newlines": 208, "modlines": 36, "user": "GG$LDW"}, "text": "         MACRO\n&NAME    DCMSTART &A,&LV=80,&SA=SAVEAREA,&REGS=,                       X\n               &BASE=12,&IOCB=YES,&IREG=,&CB=NO,                       X\n               &BASE2=,                                                $\n               &KEEP=PARMADDR,&TEMP=2,                                 X\n               &STAE=NO,&XCMD=YES,                                     X\n               &PARM=5,&WORK=DCMSWORK\n.*.\n.*$MACRO=DCMSTART   DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO DO THE OS HOUSEKEEPING\n.*  AND DCMS INITIALIZATION NEEDED AT ENTRANCE TO ANY ROUTINE.\n.*\n.*  Updates:\n.*    30Jun97  LDW - Move \"DROP 15\" to keep HLA 1.2 happy\n.*    06-25-80 LDW - LOAD \"TERMIO\" AND SAVE ADDRESS IN \"IOCBATIO\"\n.*.\n         COPY  DCMSGBLS\n         LCLA  &RNM\n         LCLA  &RCT\n         LCLA  &RLST\n         LCLC  &CNM\n         LCLA  &RDSP\n&RCT     SETA  0\n&RDSP    SETA  0\n         AIF   (&LIST).LIST\n         AGO   .LISTX\n.LIST    ANOP\n*                                                                     *\n*                                                                     *\n*        D C M S T A R T    M A C R O                                 *\n*                                                                     *\n*                                                                     *\n         SPACE 4\n*                                                                     *\n*        FUNCTION:                                                    *\n*                   CREATES INITIAL CODING (CSECT) FOR AN             *\n*                   ASSEMBLY LANGUAGE MODULE:                         *\n*                        1.   CSECT STATEMENT                         *\n*                        2.   REGISTER SAVING                         *\n*                        3.   ADDRESSABILITY                          *\n*                        4.   NEW SAVE AREA  (GETMAIN)                *\n*                                                                     *\n*        FORMAT:                                                      *\n*                                                                     *\n*              NAME  DCMSTART  TYPE,LV=NN\n*         OR                                                          *\n*              NAME  DCMSTART  TYPE,REGS=X,PARM=Y\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                  -  WHERE  -                                        *\n*                                                                     *\n*                        NAME  IS THE CSECT NAME                      *\n*                                                                     *\n*                        TYPE  IS  R                                  *\n*                                  RENT                               *\n*                                  REENTRANT                          *\n*                              FOR REENTERABLE CODE                   *\n*                                                                     *\n*                              OR  S                                  *\n*                                  STD                                *\n*                                  REUS                               *\n*                                  BLANK                              *\n*                              FOR REUSABLE CODE                      *\n*                                                                     *\n*                        LV    IS  NUMBER OF BYTES IN GETMAIN         *\n*                                  GENERATED FOR REENTRANT            *\n*                                  MODULES                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                        REGS  IS  THE NUMBER OF REGISTERS TO BE      *\n*                                  USED FOR ADDRESSABILITY IN         *\n*                                  RE-ENTRANT MODULES.                *\n*                                                                     *\n*                        PARM  IS  THE REGISTER TO BE USED            *\n*                                  TO SAVE R1 IN - RE-ENTRANT         *\n*                                  MODULE CODE.                       *\n*                                                                     *\n*                                                                     *\n*              NOTE THAT THIS MACRO MUST BE USED WITH THE             *\n*              - DCMSTOP-  MACRO                                      *\n*                                                                     *\n         MEXIT\n.LISTX   ANOP\n&LVNUM   SETC  '&LV'\n&RENT    SETB  0\n&CSECT   SETC  '&NAME'\n         AIF   ('&NAME' EQ '').MG1\n&NAME    CSECT\n         AIF   (&PLG).MG4\n&PLG     SETB  1\n         SPACE 8\n         DCMSREGS\n         EJECT\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*     D C M S    S T A N D A R D    E N T R Y    L I N K A G E        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&A' EQ '').NORENT\n         AIF   ('&A' EQ 'R').RENT\n         AIF   ('&A' EQ 'S').NORENT\n         AIF   ('&A' EQ 'RENT').RENT\n         AIF   ('&A' EQ 'REUS').NORENT\n         AIF   ('&A' EQ 'STD').NORENT\n         AIF   ('&A' EQ 'REENTRANT').RENT\n         AGO   .MG3\n.NORENT  ANOP\n         AGO   .END\n.RENT    ANOP\n&RENT    SETB  1\n         AIF   ('&WORK' EQ '').MG1\n&DSECT   SETC  '&WORK'\n         SPACE 2\n****         ****\n*   REENTRANT   *\n****         ****\n         SPACE 4\n&NAME    CSECT\n         USING *,R15\n         B     DCMSECT$\n         DC    AL1(27)\nDCMS$NAM DC    CL9'&NAME.'\n         DC    CL9'&SYSDATE.'\n         DC    CL9'&SYSTIME.'\nDCMSECT$ STM   14,12,12(13)             SAVE ENTRY REGISTERS\n         LR    &BASE,R15\n         DROP  15\n         AIF   (T'&BASE2 EQ 'O').BASE1\n         LA    &BASE2,2048(,&BASE)\n         LA    &BASE2,2048(&BASE2)\n         USING &NAME,&BASE,&BASE2\n         AGO   .BASECOM\n.BASE1   ANOP  ,\n         USING &NAME,&BASE\n.BASECOM ANOP  ,\n         LR    &PARM.,R1                PROTECT PARM LIST\n&RNM     SETA  &BASE\n&CNM     SETC  '&NAME.'\n.*30JUN97  DROP  15\n*        GETMAIN R,LV=&LV\n         CNOP  0,4\n         BAL   1,*+8                    BRANCH AROUND LENGTH\n         DC    A(&LV.)                  DEFINE SAVE/WORK AREA LENGTH\n         L     0,0(,1)                  LOAD LENGTH\n         SVC   10                       GETMAIN SAVE/WORK AREA\n         ST    13,4(,1)                 FORWARD CHAIN SAVEAREAS\n         ST    1,8(,13)                 BACKWARD CHAIN SAVE AREAS\n         LR    13,1\n         USING &WORK.,R13\n         L     &TEMP,4(,13)\n         LM    15,1,16(&TEMP.)\n         ST    &PARM.,&KEEP\n         AGO   .END\n.END     ANOP\n         AIF   ('&REGS' EQ '').DFRG\n&RCT     SETA  &REGS\n.DFRG    ANOP\n         AIF   (&RCT LT 1).EXRG\n         AIF   (&RCT LT 9).RGEN\n         MNOTE 9,'MAXIMUM OF 8 BASE REGISTERS  EXCEEDED'\n         MEXIT\n.RGEN    ANOP\n.*       GENERATION OF ADDITIONAL BASE REGISTERS                     *.\n         AIF   (&RCT EQ 0).EXRG\n&RLST    SETA  &RNM\n&RNM     SETA  &RNM-1\n&RCT     SETA  &RCT-1\n&RDSP    SETA  &RDSP+4096\n         LR    &RNM.,&RLST\n         LA    &RNM.,2048(&RNM.)\n         LA    &RNM.,2048(&RNM.)\n         USING &CNM.+&RDSP.,&RNM\n         AGO   .RGEN\n.EXRG    ANOP\n         AIF   ('&STAE' NE 'YES').X1\n         L     &TEMP.,=V(XCMDSTAE)\n         ESTAE (&TEMP.),CT              SET ESTAE ENVIRONMENT\n.X1      ANOP\n         AIF ('&IREG' EQ '').NOIRG\n         USING IOCB,&IREG               DEFAULT IOCB USING\n         LA    &IREG.,IOCB              SPECIFIED REGISTER\n*\n*\n.NOIRG   ANOP\n         AIF ('&IOCB' EQ 'NO').NOIOCB\n         MVC   IOCBNAME(8),DCMS$NAM\n*        LOAD  EPLOC==CL8'TERMIO'\n         LOAD  EPLOC==CL8'TERMIO'\n*\n         ST    R0,IOCBATIO\n.NOIOCB  ANOP\n         AIF  ('&CB' EQ '').NOCBS\n         AIF  ('&CB' EQ 'NO').NOCBS\n         AIF  ('&CB' EQ 'YES').YESCBS\n         MNOTE 9,'INVALID -CB- OPERAND SPECIFICATION'\n         MEXIT\n.YESCBS  ANOP\n.NOCBS   ANOP\nDCMSOVER L     R1,&KEEP                 RECOVER PARM LIST\n.*LDW*** EJECT\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n         MEXIT\n.MG1     ANOP\n         MNOTE 9,'NAME FIELD MISSING'\n         MEXIT\n.MG2     ANOP\n         MNOTE 9,'NAME ENTRY MUST BE SEVEN CHARACTERS OR LESS'\n         MEXIT\n.MG3     ANOP\n         MNOTE 9,'INVALID MODE PARAMETER SPECIFIED'\n         MEXIT\n.MG4     ANOP\n         MNOTE 9,'A DCMSTOP MACRO MUST APPEAR BETWEEN TWO SUCCESSIVE'\n         MNOTE 9,'DCMSTART MACRO CALLS'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DCMSTKCB": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\\t\\x1f\\x00\\x80\\t\\x1f\\x12Q\\x00,\\x00,\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-03-31T00:00:00", "modifydate": "1980-03-31T12:51:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&N       DCMSTKCB &DSECT=NO\n.*.\n.*$MACRO=DCMSTKCB   DATE=03/31/80       SOURCE=LDW\n.*$MACRO=#STAKCB    DATE=10/23/79       SOURCE=DCMS (DLH@SDC)\n.*\n.*\n.*.\n         AIF (K'&N LT 5).GEN\n.MSG1 MNOTE 9,'STACK NAME INVALID OR TOO LONG - 4 BYTES OR LESS REQD'\n         MEXIT\n.GEN     EJECT\n*                                                                     *\n*                                                                     *\n*        S T A C K   C O N T R O L   B L O C K                        *\n*                                                                     *\n*                                                                     *\n         AIF   ('&DSECT' EQ 'YES').DSG\n         AIF   ('&DSECT' EQ 'NO').NODSG\n         MNOTE 9,'INVALID DSECT SPECIFICATION - MUST BE YES OR NO'\n         MEXIT\n.DSG     ANOP\n&N       DSECT\n         AGO   .GENN\n.NODSG   ANOP\n&N       DS    0F\n.GENN    ANOP\n         SPACE\n#STK&N   DS    F                        PTR TO CURRENT LINE IN STACK\n#TOP&N   DS    F                        POINTER TO TOP OF STACK\n#END&N   DS    F                        POINTER TO END OF STACK\n#NOW&N   DS    F                        PTR TO CURRENT FRAME OF STACK\n#MVC&N   DS    F                        INPUT LINESIZE FOR PUT\n#SIZ&N   DS    F                        NUMBER OF ENTRIES IN STACK\n#SCR&N   DS    F                        SCREEN FRAME SIZE IN BYTES\n#LPF&N   DS    F                        NUMBER OF LINES IN A FRAME\n#LEN&N   DS    F                        LENGTH OF STACK SPACE IN BYTES\n#SNR&N   DS    F                        SIGNAL TO NOISE RATIO\n#SSS&N   DS    0F                       START OF STACK\n*SSE&N   DS    CL79                     END OF STACK\n*\n*      E N D   O F   S T A C K   C O N T R O L   B L O C K\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSTOP": {"ttr": 1810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x00\\x80\\x03_\\x00\\x822\\x8f\\x18\\x04\\x00\\x83\\x00\\x83\\x00!\\xe3\\xe3\\xf7\\xf0\\xf7\\xf1\\xf0@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1982-11-24T18:04:00", "lines": 131, "newlines": 131, "modlines": 33, "user": "TT70710"}, "text": "         MACRO\n&NAME    DCMSTOP &RC=,&WORK=YES,&SCREEN=NO,&LIT=YES,&IOCB=,&SERV=YES\n.*.\n.*$MACRO=DCMSTOP    DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO DO OS AND DCMS HOUSE-\n.*  KEEPING AT ROUTINE TERMINATION.\n.*\n.*  UPDATES:\n.*    11-24-82 LDW  CHANGE ALL R11 TO R1\n.*    06-25-80 LDW  DELETE (UN-LOAD) \"TERMIO\"\n.*.\n         COPY  DCMSGBLS\n         AIF   (NOT &LIST).LISTX\n         EJECT\n         SPACE 4\n*                                                                     *\n*                                                                     *\n*        D C M S T O P  M A C R O                                     *\n*                                                                     *\n*                                                                     *\n         SPACE 4\n*                                                                     *\n*        FUNCTION:                                                    *\n*                   CREATES TERMINAL CODING (EXIT) FOR AN             *\n*                   ASSEMBLY LANGUAGE MODULE:                         *\n*                        1.   DELETE SAVE AREA (FREEMAIN)             *\n*                        2.   REGISTER RESTORATION                    *\n*                        3.   RETURN TO CALLER                        *\n*                                                                     *\n*        FORMAT:                                                      *\n*                                                                     *\n*              NAME  EPILOG                                           *\n*                                                                     *\n*              NOTE THAT THIS MACRO MUST BE USED WITH THE             *\n*              - PROLOG -  MACRO                                      *\n*                                                                     *\n*                                                                     *\n         MEXIT\n.LISTX   AIF   (&PLG).CONT\n         MNOTE 9,'PROLOG MACRO MUST PRECEED EPILOG MACRO'\n         MEXIT\n.CONT    ANOP\n&NAME    DELETE  EPLOC==CL8'TERMIO'\n&PLG     SETB  0\n         AIF   ('&RC' EQ '').STOFF\n&RCD     SETB  1\n         AGO   .RCDX\n.STOFF   ANOP\n&RCD     SETB  0\n.*MSRCD  L     11,4(13)                 GET OLD SA\nDCMSRCD  L     1,4(,13)                 GET OLD SA\n.*       XC    16(4,11),16(11)          SET RC = 0\n         XC    16(4,1),16(1)            SET RC = 0\n         AGO   .GENX\n.*\n.*\n.RCDX    ANOP\n.RTS1    SR    R15,R15\n         AIF   (&RCD).GEN\n         AGO   .GENX\n.GEN     AIF   ('&RC' EQ 'ALL').GNALL\n         AIF   ('&RC' EQ '(15)').GN15\n         AIF   ('&RC' EQ '15').GN15\n         AIF   ('&RC'(1,1) EQ '(').GNLMR\n         AGO   .GENX\n.GNLMR   ANOP\n.*MSRCD  L     11,4(13)                 GET OLD SA\nDCMSRCD  L     1,4(,13)                 GET OLD SA\n.*       ST    &RC.,16(11)              STORE RC\n         ST    &RC.,16(,1)              STORE RC\n         AGO   .GENX\n.GN15    ANOP\n.*MSRCD  L     11,4(13)                 GET OLD SA\nDCMSRCD  L     1,4(,13)                 GET OLD SA\n.*       ST    15,16(11)                STORE RC\n         ST    15,16(,1)                STORE RC\n         AGO   .GENX\n.GNALL   ANOP\n.*MSRCD  L     11,4(13)                 GET OLD SA\nDCMSRCD  L     1,4(,13)                 GET OLD SA\n.*       STM   15,1,16(11)              STORE R0,R1,R15\n         STM   15,1,16(,1)              STORE R0,R1,R15\n.GENX    CLI   IOCBTERM+1,X'7F'         WAS STFSMODE DONE?         LDW1\n         BNE   IHB&SYSNDX.X             NO - SKIP                  LDW1\n*        STFSMODE OFF                   YES - TURN IT OFF          LDW1\n         STFSMODE OFF                   YES - TURN IT OFF          LDW1\n         MVI   IOCBTERM+1,0             RESET FLAG                 LDW1\nIHB&SYSNDX.X DS 0H                                                 LDW1\n         AIF   (&RENT).RENT\n         AGO   .NORENT\n.RENT    LR    1,13\n         L     13,4(,13)\n         FREEMAIN R,LV=&LVNUM,A=(1)\n         RETURN (14,12),T\n         SPACE 4\n****         ****\n*   REENTRANT   *\n****         ****\n         SPACE 2\n         AGO   .END\n.NORENT  L     13,4(,13)\n         RETURN (14,12),T\n         LTORG\n         SPACE 4\n.END     ANOP\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*     D C M S    S T A N D A R D    E X I T    L I N K A G E          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         AIF   ('&SERV' NE 'YES').NOSERV\n&DCMSCLR SETB  1\n&DCMSDEC SETB  1\n&DCMSHEX SETB  1\n         DCMSERV\n         EJECT\n.NOSERV  AIF   ('&LIT' NE 'YES').NOLIT\n         LTORG\n         EJECT\n.NOLIT   ANOP\n&DCMSCRN SETB   0\n         AIF  ('&SCREEN' NE 'YES').NOSCR\n&DCMSCRN SETB  1\n.NOSCR   ANOP\n         AIF  ('&WORK' NE 'YES').NOWRK\n&DCMSWRK SETB  1\n         DCMSWORK IOCB=&IOCB\n.NOWRK   EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DCMSUPT": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81%O\\x00\\x81%O\\x177\\x00Q\\x00Q\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-09-11T00:00:00", "modifydate": "1981-09-11T17:37:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&ANAME   DCMSUPT\n.*.\n.*$MACRO=DCMSUPT    DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT GENERATES THE DUPT CONTROL BLOCK\n.*.\n.*LDW    EJECT\n*                                                                     *\n*                                                                     *\n*        D C M S    U S E R   P R O F I L E   T A B L E               *\n*                                                                     *\n*                                                                     *\n         SPACE 1\nDUPT     DSECT\n&ANAME   DS    0H\nDUPTDUPT DS    F                        ACRONYM\n         SPACE 1\n*        DCDA/DUPT COMMON SECTION: S T A R T\nDUPTCOM$ EQU   *\nDUPTFLAG DS    0F                       USER PROFILE FLAGS\n         SPACE 1\nDUPTFLGA DS    X                             FLAG BYTE 1\nDUPTAX80 EQU   X'80'\nDUPTAX40 EQU   X'40'\nDUPTAX20 EQU   X'20'\nDUPTAX10 EQU   X'10'\nDUPTAX08 EQU   X'08'\nDUPTAX04 EQU   X'04'\nDUPTAX02 EQU   X'02'\nDUPTAX01 EQU   X'01'\n         SPACE 1\nDUPTFLGB DS    X                             FLAG BYTE 2\nDUPTBX80 EQU   X'80'\nDUPTBX40 EQU   X'40'\nDUPTBX20 EQU   X'20'\nDUPTBX10 EQU   X'10'\nDUPTBX08 EQU   X'08'\nDUPTBX04 EQU   X'04'\nDUPTBX02 EQU   X'02'\nDUPTBX01 EQU   X'01'\n         SPACE 1\nDUPTFLGC DS    X                             FLAG BYTE 3\nDUPTCX80 EQU   X'80'\nDUPTCX40 EQU   X'40'\nDUPTCX20 EQU   X'20'\nDUPTCX10 EQU   X'10'\nDUPTCX08 EQU   X'08'\nDUPTCX04 EQU   X'04'\nDUPTCX02 EQU   X'02'\nDUPTCX01 EQU   X'01'\n         SPACE 1\nDUPTFLGD DS    X                             FLAG BYTE 4\nDUPTDX80 EQU   X'80'\nDUPTDX40 EQU   X'40'\nDUPTDX20 EQU   X'20'\nDUPTDX10 EQU   X'10'\nDUPTDX08 EQU   X'08'\nDUPTDX04 EQU   X'04'\nDUPTDX02 EQU   X'02'\nDUPTDX01 EQU   X'01'\n         SPACE 1\nDUPTINTV DS    F                        DEFAULT DISPLAY INTERVAL\nDUPTSAMP DS    F                        DEFAULT SAMPLE TIME\nDUPTSTAT DS    F                        POINTER TO STATISTICS SCREEN\nDUPTLOGO DS    F                        POINTER TO LOGO SCREEN\nDUPTSLOG DS    F                        POINTER TO LOG CONTROL AREA\nDUPTCOML EQU   *-DUPTCOM$\n         SPACE 1\n*        DCDA/DUPT COMMON SECTION: S T O P\nDUPTSNUM DS    F                        # OF ENTRIES IN COMMAND STACK\nDUPTSTOP DS    F                        POINTER TO COMMAND STACK:  TOP\nDUPTSBOT DS    F                        PTR TO COMMAND STACK:  BOTTOM\nDUPTSNOW DS    F                        PTR TO COMMAND STACK:  CURRENT\nDUPTSCMD DS    0F                       TOP OF COMMAND STACK\n         DS    0D\n         SPACE 1\nDUPTLEN  EQU   *-DUPT\nDUPTSTNM EQU   16\nDUPTSTSZ EQU   (DUPTSTNM*8)+8\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSWORK": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x00\\x80\\x03_\\x00\\x836/\\x12I\\x00c\\x00]\\x00\\x10\\xe2\\xc4\\xd4@@@@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1983-12-28T12:49:00", "lines": 99, "newlines": 93, "modlines": 16, "user": "SDM"}, "text": "         MACRO\n&ANAME   DCMSWORK &SAVE=DCMSAVE,&PARM=PARMADDR,&IOCB=\n.*.\n.*$MACRO=DCMSWORK   DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT GENERATES VARIOUS CONSTANTS AND\n.*  WORK AREAS.\n.*\n.*  UPDATES:\n.*     12/21/83 SDM  FIX HEXWORK FIELDS FOR UPDATE @HEX (DCMSERV)\n.*     11/24/82 LDW  USE EQU INSTEAD OF DEAD SPACE IN TRTBL\n.*     12/02/81 LDW  ADD EJECT BEFORE IOCB MACRO\n.*.\n         COPY  DCMSGBLS\n         AIF   (NOT &DCMSCST).DDSECT\n*                                                                     *\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*                                                                     *\n         SPACE\nEDITMASK DC    XL4'40202120'\nBLANKS   DC    CL79' '\n         AIF   (&PWRK).PWRK\nEDWD     DC    XL17'4020202020202020202020202020212060'\nEDWD0    DC    XL21'402020206B2020206B2020206B2020206B20212060'\nEDWD1    DC    XL22'4020206B2020206B2020206B2020206B2021204B2060'\nEDWD2    DC    XL22'40206B2020206B2020206B2020206B2021204B202060'\n&PWRK    SETB  1\n.PWRK    ANOP\nTRTBL    EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         AIF   (NOT &DCMSCRN).NOFMT\nFORMAT   DCMSFMT\nSCREEN   DCMSFLD  79\nL2       DCMSFLD  79\nL3       DCMSFLD  79\nL4       DCMSFLD  79\nL5       DCMSFLD  79\nL6       DCMSFLD  79\nL7       DCMSFLD  79\nL8       DCMSFLD  79\nL9       DCMSFLD  79\nL10      DCMSFLD  79\nL11      DCMSFLD  79\nL12      DCMSFLD  79\nL13      DCMSFLD  79\nL14      DCMSFLD  79\nL15      DCMSFLD  79\nL16      DCMSFLD  79\nL17      DCMSFLD  79\nL18      DCMSFLD  79\nL19      DCMSFLD  79\nL20      DCMSFLD  79\nL21      DCMSFLD  79\nL22      DCMSFLD  79\nINPLINE  DCMSFLD  79,ALPHA,CURSOR=YES\n         DCMSFEND\n.NOFMT   ANOP\n.*\n.*\n.*\n.*\n.*\n.*\n.DDSECT  AIF   (NOT &DCMSWRK).NOWRK\n*                                                                     *\n*                                                                     *\n*        W O R K   A R E A                                            *\n*                                                                     *\n*                                                                     *\n         SPACE 1\nDCMSWORK DSECT\n         AIF   ('&ANAME' EQ '').NOANAME\n&ANAME   DS    0H\n.NOANAME ANOP\n&SAVE    DS    18F\n&PARM    DS    F\nDECWORK1 DS    XL2\nDECWORK2 DS    XL2\nDECWORK3 DS    D\nDECWORK4 DS    CL4\nTDCBADDR DS    F\nDOUBLE   DS    D\n@CLEARSA DS    6F\nHEXWORK1 DS    XL4                      (UNPK WORKS RIGHT TO LEFT)\nHEXWORK2 DS    CL8\n         DS    C                        OVERFLOW FIELD FOR HEXWORK2\nPWORK    DC    CL22' '\n         EJECT\n         AIF   ('&IOCB' EQ 'NO').NOIOCB\nIOCB     IOCB\n.NOIOCB  AIF   (NOT &DCMSCRN).NOSCRN\n         SPACE 1\n         DSGEN FORMAT\n         SPACE 1\n.NOSCRN  ANOP\n.NOWRK   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DROPX": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x01\\x00\\x00\\x00\\x84\\x10\\x7f\\x00\\x84)/\\x168\\x00;\\x009\\x00\\x03\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "03.01", "flags": 0, "createdate": "1984-04-16T00:00:00", "modifydate": "1984-10-18T16:38:00", "lines": 59, "newlines": 57, "modlines": 3, "user": "LDW"}, "text": "         MACRO\n         DROPX &PARMS\n.*.\n.*$MACRO=DROPX      DATE=05/10/80       SOURCE=UCLA(JCJ)\n.*  THIS IS AN COPY OF OACDROP, UNDER A DIFFERENT NAME\n.*  UPDATES:\n.*    10/18/84 LDW  CHANGE COMMENT COLUMN\n.*\n.*  THIS MACRO REMOVES AN ENTRY FROM THE USING TABLE BUILT BY 'USNGX'\n.*       (DISPLAYED BY 'INUSE').  IT THEN DOES A REGULAR 'DROP'.\n.*.\n         GBLC  &USELAB(16)        SAVED PROGRAM LABELS\n         GBLC  &USEREG(16)        SAVED REGISTER TABLE\n         LCLA  &UNDX,&II          USE INDICES,TEMP USAGE\n         LCLA  &PNDX,&DNDX        INPUT PARM,DROP STRING INDICES\n         LCLB  &GOTREG,&DROPALL   HAVE REGS TO DROP,DROP ALL TO DO\n         LCLC  &R(4),&B(4)        REGS TO DROP,PREVIOUS BASES FOR REGS\n         LCLC  &BLANKS            BLANKS TO PAD DROP LINE TO COMMENTS\n&DROPALL SETB  ((N'&SYSLIST EQ 0) OR ('&PARMS' EQ '')) SET DROPALL FLAG\n.LP#SYS  AIF   (&DROPALL).LP#SAV  BIF DROP ALL IN PROGRESS\n         AIF   (&PNDX GE N'&SYSLIST).CK#DROP LOOP TIL DONE WITH REGS\n&PNDX    SETA  &PNDX+1            UP THE COMMA/REG INDEX\n&UNDX    SETA  0                  RE-INITIALIZE USE ARRAY INDEX\n.LP#SAV  ANOP                     VALID DROP REG CHECK LOOP\n&UNDX    SETA  &UNDX+1            UP THE USE ARRAY COUNT\n         AIF   (&DROPALL).CK#ALL  BIF DROP ALL IN PROGRESS\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').DROP#R BIF MATCH\n         AIF   (&UNDX LT 16).LP#SAV LOOP FOR ALL ENTRIES IF NEEDED\n         MNOTE 4,'REGISTER &SYSLIST(&PNDX) WAS NOT A USNGX OPERAND'\n         AGO   .LP#SYS            CONTINUE\n.CK#ALL  AIF   (&UNDX GT 16).CK#DROP BIF END OF SAVE TABLE/CHECK DROPS\n         AIF   ('&USEREG(&UNDX)'  EQ '').LP#SAV BIF EMPTY SLOT\n.DROP#R  AIF   (&DNDX EQ 0).DROP$R BIF NO PREVIOUS REGISTER/BASE\n&R(&DNDX) SETC '&R(&DNDX)'.','    APPEND COMMA AFTER PREVIOUS REG\n&B(&DNDX) SETC '&B(&DNDX)'.','    APPEND COMMA AFTER PREVIOUS BASE\n.DROP$R  ANOP\n&DNDX    SETA  &DNDX+1            UP THE DROP STRING INDEX\n&R(&DNDX) SETC '&USEREG(&UNDX)'   GET PREVIOUS REGISTER\n&B(&DNDX) SETC '&USELAB(&UNDX)'   GET PREVIOUS BASE\n&USEREG(&UNDX) SETC ''            BLANK THE SAVE TABLE REG FIELD\n&USELAB(&UNDX) SETC ''            BLANK THE SAVE TABLE BASE FIELD\n         AIF   (&DNDX GE 4).DO#DR BIF DROP LINE FULL\n&GOTREG  SETB  1                  SAY HAVE SOMETHING TO DROP\n         AGO   .LP#SYS            GO CHECK FOR &SYSLIST/TABLE END\n.CK#DROP AIF   (NOT &GOTREG).EXIT SKIP THE DROP IF NOTHING TO DO\n.* NOTE THAT THIS MACRO ASSUMES OPERAND/COMMENT COLUMNS 16 AND 35.\n.DO#DR   ANOP\n&BLANKS  SETC  ' '                SET ONE BLANK IN CASE TOO LONG\n&II      SETA  (41-16)-K'&R(1)-K'&R(2)-K'&R(3)-K'&R(4) BLANK COUNT\n         AIF   (&II LE 1).DO$DR   BIF ONE BLANK CORRECT\n&BLANKS  SETC  '                  '(1,&II) ELSE SET CORRECT NUMBER\n.DO$DR   DROP  &R(1)&R(2)&R(3)&R(4)&BLANKS&B(1)&B(2)&B(3)&B(4)\n&GOTREG  SETB  0                  NOTHING TO DROP\n.DROP#CL AIF   (&DNDX EQ 0).LP#SYS BIF CLEARING DONE\n&R(&DNDX) SETC ''                 BLANK REG FIELD\n&B(&DNDX) SETC ''                 BLANK BASE FIELD\n&DNDX    SETA  &DNDX-1            DECREMENT INDEX\n         AGO   .DROP#CL           CONTINUE\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSGEN": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x04_\\x00\\x80\\x10_\\x10\\x12\\x00\"\\x00 \\x00\\x04\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-02-14T00:00:00", "modifydate": "1980-04-14T10:12:00", "lines": 34, "newlines": 32, "modlines": 4, "user": "LDW"}, "text": "         MACRO\n         DSGEN &FMT\n.*.\n.*$MACRO=DSGEN      DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.\n.*.\n         GBLA  &SFLTBL(200),&SFSTRT(20),&SFEND(20),&SFFCT,&SFNCT\n         GBLB  &SFNUM(200),&SFFLAG,&SFCUR\n         GBLC  &SFFNAM(200),&SFNAM(20)\n         LCLA  &I,&J\n         LCLC  &N\n         AIF   (NOT &SFFLAG).INITOK\n         MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.INITOK  ANOP\n.NLOOP   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &SFNCT).E1\n         AIF   ('&SFNAM(&I)' NE '&FMT').NLOOP\n&J       SETA  &SFEND(&I)\n&I       SETA  &SFSTRT(&I)\n.FLOOP   AIF   (&I GT &J).END\n&N       SETC  '&SFFNAM(&I)'            PICK UP NAME FIELD\n         AIF   (&SFNUM(&I)).NUM\n&N       DS    CL&SFLTBL(&I)\n         AGO   .NXTF\n.NUM     ANOP\n&N       DS    ZL&SFLTBL(&I)\n.NXTF    ANOP\n&I       SETA  &I+1\n         AGO   .FLOOP\n.E1      MNOTE 8,' UNKNOWN FORMAT LIST SPECIFIED'\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPAR#": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x08\\x00\\x08\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- EPAR - EXTRACT PRIMARY ADDRESS SPACE NUMBER\n&LABEL   EPAR  &R1\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         AIF   (N'&SYSLIST NE 1).ER1\n&LABEL   DC    0H'0',X'B22600',AL1(&R1*16) EPAR\n         MEXIT\n.ER1     MNOTE 12,'EPAR TAKES EXACTLY ONE OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESAR#": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x08\\x00\\x08\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- ESAR - EXTRACT SECONDARY ADDRESS SPACE NUMBER\n&LABEL   ESAR  &R1\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         AIF   (N'&SYSLIST NE 1).ER1\n&LABEL   DC    0H'0',X'B22700',AL1(&R1*16) ESAR\n         MEXIT\n.ER1     MNOTE 12,'ESAR TAKES EXACTLY ONE OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBGEN": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00y \\x9f\\x00\\x81\"o\\x16Q\\x01\\xb2\\x01\\x0c\\x01a\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1979-07-28T00:00:00", "modifydate": "1981-08-14T16:51:00", "lines": 434, "newlines": 268, "modlines": 353, "user": "MCGINTY"}, "text": "         MACRO\n&LABEL   FCBGEN &LPINCH=,&IMGLEN=,&INDEX=,&OFFSET=,                    $\n               &OPSYS=,&DEFAULT=,&VERMSG=,                             $\n               &LINE=,&CHAN=\n.*.\n.* FCBGEN - 08/14/81 GIBRALTAR SAVINGS\n.*\n.*   (BE SURE THAT THE ABOVE COMMENT MATCHES THE COMMENT AFTER .F01)\n.*\n.* VALID EXAMPLES:\n.*\n.*    (OS/VS)\n.*\n.*    FCB2SP01 FCBGEN LPINCH=8,IMGLEN=68,INDEX=(R,10),OPSYS=OS,       $\n.*                  DEFAULT=YES\n.*             FCBGEN LINE=1,CHAN=1\n.*             FCBGEN LINE=60,CHAN=12\n.*             FCBGEN LINE=64,CHAN=9\n.*             FCBGEN\n.*             END\n.*\n.*    (DOS/VS)\n.*\n.*    FCB2SP02 FCBGEN LPINCH=6,IMGLEN=66,OPSYS=DOS,                   $\n.*                  VERMSG='FCB2SP02 -  6 LPI, 11 INCHES LONG'\n.*             FCBGEN LINE=1,CHAN=1\n.*             FCBGEN LINE=60,CHAN=12\n.*             FCBGEN LINE=64,CHAN=9\n.*             FCBGEN\n.*             END\n.*\n.*\n.* FORMS OF THE MACRO:\n.*\n.**********************************************************************\n.*\n.*IMGNAME  FCBGEN  LPINCH=,IMGLEN=,INDEX=,OFFSET=,\n.*             OPSYS=,DEFAULT=,VERMSG=\n.*\n.*   FUNCTION:  START THE IMAGE DEFINITION AND SET SOME IMPORTANT\n.*              CHARACTERISTICS OF THE IMAGE.\n.*\n.*   REQUIRED:    IMGNAME\n.*    (DOS ONLY): VERMSG=\n.*\n.*   DEFAULTS:   IMGLEN=66\n.*               LPINCH=6\n.*               OFFSET=0\n.*               OPSYS=OS\n.*               INDEX= (NONE)\n.*    (OS ONLY): DEFAULT=NO\n.*\n.*   ACCEPTABLE VALUES:  IMGLEN - 2 TO 180\n.*                       LPINCH - 6 OR 8\n.*                       OFFSET - 0 TO IMGLEN\n.*                       OPSYS - OS OR DOS\n.*                       IMGNAME - 5 OR MORE CHAR BEGINNING 'FCB2'\n.*                       INDEX - (R,1) TO (R,31) OR (L,1) TO (L,31)\n.*            (OS ONLY): DEFAULT - YES OR NO\n.*                       VERMSG MAY NOT BE SPECIFIED\n.*           (DOS ONLY): DEFAULT MAY NOT BE SPECIFIED\n.*                       VERMSG - UP TO 80 CHARACTERS (PLUS QUOTES)\n.*\n.*   NOTES:  1. PRINT POSITION INDEXING IS A 3211 FEATURE ONLY - IT\n.*              WILL BE IGNORED IF ATTEMPTED ON OTHER FCB PRINTERS.\n.*           2. ONLY A 3211 WILL ALLOW A CHANNEL SPECIFICATION IN THE\n.*              LAST POSITION OF THE FCB IMAGE.  OTHER PRINTERS WILL\n.*              RETURN ERROR STATUS IF SUCH AN FCB IS LOADED.\n.*\n.*   OPERANDS:\n.*      DEFAULT - (OS ONLY) INDICATE WHETHER JES2 SHOULD USE THIS\n.*                FCB IMAGE TO PRINT OUTPUT THAT DOESN'T SPECIFY\n.*                ANY PARTICULAR FCB.\n.*      IMGLEN  - THE LENGTH OF THE FCB IMAGE IN LINES (USUALLY THE\n.*                LENGTH OF ONE PAGE).\n.*      LPINCH  - THE NUMBER OF LINES THAT WILL BE PRINTED PER INCH.\n.*      OFFSET  - A NUMBER THAT WILL BE SUBTRACTED FROM EVERY 'LINE'\n.*                SPECIFICATION BELOW.  THIS MAKES IT EASIER TO COPY\n.*                A CARRIAGE TAPE OR ANOTHER FCB AND MOVE CHANNEL\n.*                ONE TO LINE ONE TO SATISFY THE JES2 RESTRICTION.\n.*      OPSYS   - SPECIFY THE TYPE OF OPERATING SYSTEM WHICH WILL USE\n.*                THIS FCB IMAGE.\n.*      IMGNAME - THE NAME BY WHICH THE FCB IMAGE LOAD MODULE WILL BE\n.*                KNOWN.\n.*      INDEX   - THE 3211 HARDWARE PRINT LINE INDEXING SPECIFICATION.\n.*                'R' - (RIGHT SHIFT) SPECIFY THE PRINTER POSITION IN\n.*                      WHICH THE FIRST CHARACTER OF DATA WILL BE\n.*                      PRINTED.\n.*                'L' - (LEFT SHIFT) SPECIFY THE CHARACTER POSITION\n.*                      (RELATIVE TO ONE) OF THE DATA THAT WILL BE\n.*                      PRINTED IN PRINTER POSITION ONE.\n.*      VERMSG  - (DOS ONLY) THE MESSAGE TO BE PRINTED WHEN THIS FCB\n.*                IMAGE IS LOADED TO THE PRINTER.\n.*\n.**********************************************************************\n.*\n.*       FCBGEN LINE=,CHAN=\n.*\n.*   FUNCTION:  SPECIFY ONE CHANNEL INDICATION IN THE FCB IMAGE.\n.*   REQUIRED:  LINE\n.*              CHAN\n.*   DEFAULTS:  (NONE)\n.*   ACCEPTABLE VALUES:  LINE - 1 (OR OFFSET+1) TO IMGLEN\n.*                       CHAN - 1 TO 12\n.*\n.*   NOTE:  LINE=1,CHAN=1 MUST BE SPECIFIED FOR THE IMAGE TO\n.*          COMPATIBLE WITH JES2.\n.*\n.*   OPERANDS:\n.*      LINE - THE POSITION IN THE FCB AT WHICH A SKIP TO THE\n.*             CORRESPONDING CHANNEL WILL STOP.  THIS VALUE WILL\n.*             BE INTERNALLY ADJUSTED BY THE 'OFFSET' SPECIFICATION\n.*             (IF ANY) ABOVE.\n.*      CHAN - THE CHANNEL NUMBER THAT STOPS AT THIS 'LINE'.\n.*\n.**********************************************************************\n.*\n.*           FCBGEN\n.*\n.*       FUNCTION:  END THE IMAGE DEFINITION AND GENERATE THE ACTUAL\n.*                  FCB IMAGE.\n.*       REQUIRED:  (NONE)\n.*       DEFAULTS:  (N/A)\n.*       ACCEPTABLE VALUES:  (N/A)\n.*\n.**********************************************************************\n.*.\n.*   UPDATES:\n.*      08/14/81 SDM   DON'T GENERATE CHANNEL IN LAST LINE OF IMAGE\n.*      08/07/81 SDM   CHANGE 'INVALID JES2 IMAGE' MESSAGE SEVERITY\n.*                        FROM 4 TO 8\n.*                     ALLOW CHANNEL SPECIFICATION BEFORE 'OFFSET' LINE\n.*                     DISALLOW LINE SPEC AT END OF IMAGE\n.*      04/13/81 LDW   ADD OFFSET= OPERAND TO ADJUST LINE=\n.*      01/12/81 SDM   ADD DOS/VS SUPPORT (OPSYS=DOS,VERMSG=)\n.*                     REMOVE SUPPORT FOR TAKING IMAGE NAME FROM CSECT\n.*                     CHANGE FCBLEN= TO IMGLEN=\n.*                     ADD PRINT POSITION INDEX SUPPORT (INDEX=)\n.*      09/10/80 SDM   ENSURE THAT EVERY CHANNEL APPEARS IN THE IMAGE\n.*      09/06/79 SDM   ALLOW A CHAN TO BE PUNCHED IN MULTIPLE LINES\n.*      07/28/79 SDM   NEW MACRO\n.*\n         GBLA  &GALINE(180),&GAIMGL,&GANAMEL,&GANDXA,&GAOFFS\n         GBLB  &GBDEFLT,&GBDOS,&GBINIT,&GBFINAL,&GBNOGEN,&GBCHAN(12)\n         GBLC  &GCNAME,&GCLPI,&GCVER(11),&GCNDXD\n         LCLA  &I,&J,&K\n         LCLB  &LBLINE\n         LCLC  &LCNAME\n.*\n.* SELECT ENTRY TYPE\n.*\n         AIF   (NOT &GBFINAL).S01\n         MNOTE 12,'THE FINAL ''FCBGEN'' HAS ALREADY BEEN SUPPLIED'\n.S01     AIF   (NOT &GBINIT).I01\n         AIF   ('&LABEL&LPINCH&IMGLEN&INDEX&OFFSET&OPSYS&DEFAULT&VERMSG$\n               ' EQ '').S02\n         MNOTE 12,'IMAGE NAME, LPINCH=, IMGLEN=, OFFSET=, OPSYS=, DEFAU$\n               LT=, AND VERMSG= MAY ONLY OCCUR ON THE FIRST ''FCBGEN'''\n&GBNOGEN SETB  1\n.S02     AIF   ('&LINE&CHAN' NE '').P01\n         AIF   ('&LPINCH&IMGLEN&INDEX&OFFSET&OPSYS&DEFAULT&VERMSG'     $\n               EQ '').F01\n         MEXIT\n.*\n.* EDIT INITIAL SPECIFICATION\n.*\n.I01     ANOP\n&GBINIT  SETB  1\n&GBDOS   SETB  0                        USE OPSYS DEFAULT OF OS\n         AIF   ('&LINE&CHAN' EQ '').I02\n         MNOTE 12,'LINE= AND CHAN= MAY NOT BE SPECIFIED ON FIRST THE FI$\n               RST ''FCBGEN'''\n&GBNOGEN SETB  1\n.I02     ANOP\n&GCNAME  SETC  '&LABEL'\n&GANAMEL SETA  K'&LABEL\n&GCLPI   SETC  '6'\n         AIF   (T'&LPINCH EQ 'O').I04\n         AIF   (('&LPINCH' EQ '6') OR ('&LPINCH' EQ '8')).I03\n         MNOTE 12,'LPINCH MUST BE 6 OR 8 (DEFAULT IS 6)'\n&GBNOGEN SETB  1\n         AGO   .I04\n.I03     ANOP\n&GCLPI   SETC  '&LPINCH'\n.I04     AIF   (T'&IMGLEN NE 'O').I05\n&GAIMGL  SETA  66\n         AGO   .I07\n.I05     AIF   (T'&IMGLEN NE 'N').I06\n&GAIMGL  SETA  &IMGLEN\n         AIF   ((&GAIMGL GE 2) AND (&GAIMGL LE 180)).I07\n         MNOTE 12,'IMGLEN IS NOT BETWEEN 2 AND 180'\n&GBNOGEN SETB  1\n         AGO   .I07\n.I06     MNOTE 12,'IMGLEN IS NOT NUMERIC (BETWEEN 2 AND 180)'\n&GBNOGEN SETB  1\n.I07     AIF   (T'&INDEX EQ 'O').I10\n         AIF   (N'&INDEX EQ 2).I08\n         MNOTE 12,'INDEX REQUIRES TWO OPERANDS - DIRECTION AND POSITION$\n               '\n&GBNOGEN SETB  1\n         AGO   .I10\n.I08     AIF   ('&INDEX(1)' EQ 'L').I09\n         AIF   ('&INDEX(1)' EQ 'LEFT').I09\n         AIF   ('&INDEX(1)' EQ 'R').I09\n         AIF   ('&INDEX(1)' EQ 'RIGHT').I09\n         MNOTE 12,'INDEX FIRST ARGUMENT MUST BE L (LEFT), OR R (RIGHT)'\n&GBNOGEN SETB  1\n.I09     ANOP\n&GCNDXD  SETC  '&INDEX(1)'(1,1)\n&GANDXA  SETA  &INDEX(2)\n         AIF   (&GANDXA GE 1 AND &GANDXA LE 31).I10\n         MNOTE 12,'INDEX SECOND ARGUMENT MUST BE BETWEEN 1 AND 31 (INCL$\n               USIVE)'\n&GBNOGEN SETB  1\n.I10     AIF   (T'&OFFSET EQ 'O').I12\n         AIF   (T'&OFFSET NE 'N').I11\n&GAOFFS  SETA  &OFFSET\n         AGO   .I12\n.I11     MNOTE 12,'OFFSET IS NOT NUMERIC (BETWEEN 0 AND FCBLEN)'\n&GBNOGEN SETB  1\n.I12     AIF   (T'&OPSYS EQ 'O').I15\n         AIF   ('&OPSYS' NE 'OS').I13\n&GBDOS   SETB  0\n         AGO   .I15\n.I13     AIF   ('&OPSYS' NE 'DOS').I14\n&GBDOS   SETB  1\n         AGO   .I15\n.I14     MNOTE 12,'OPSYS MUST BE DOS OR OS'\n&GBNOGEN SETB  1\n.I15     AIF   (&GBDOS).ID01\n.*\n.* EDIT OS DEPENDENT INITIAL SPECIFICATIONS\n.*\n         AIF   (&GANAMEL LT 5).IO01\n         AIF   ('&LABEL'(1,4) EQ 'FCB2').IO02\n.IO01    MNOTE 12,'THE IMAGE NAME MUST BE 5 OR MORE CHAR STARTING WITH $\n               ''FCB2'''\n&GBNOGEN SETB  1\n.IO02    ANOP\n         AIF   (T'&DEFAULT EQ 'O').IO03\n         AIF   ('&DEFAULT' EQ 'NO').IO03\n&GBDEFLT SETB  1\n         AIF   ('&DEFAULT' EQ 'YES').IO03\n         MNOTE 12,'DEFAULT IS NOT YES OR NO (DEFAULT DEFAULT IS NO)'\n&GBNOGEN SETB  1\n         AGO   .IO04\n.IO03    AIF   (T'&VERMSG EQ 'O').IO04\n         MNOTE 4,'VERMSG IS NOT APPLICABLE TO OS - IGNORED'\n.IO04    MEXIT\n.*\n.* EDIT DOS DEPENDENT INITIAL SPECIFICATIONS\n.*\n.ID01    AIF   (&GANAMEL LT 5).ID02\n         AIF   ('&LABEL'(1,4) EQ 'FCB2').ID03\n.ID02    MNOTE 4,'THE IMAGE NAME SHOULD BE 5 OR MORE CHAR STARTING WITH$\n                ''FCB2'''\n.ID03    AIF   (T'&DEFAULT EQ 'O').ID04\n         MNOTE 4,'DEFAULT IS NOT APPLICABLE TO DOS - IGNORED'\n.ID04    AIF   (T'&VERMSG NE 'O').ID05\n         MNOTE 12,'A VERIFICATION MESSAGE (VERMSG=) OF UP TO 80 CHARACT$\n               ERS IS REQUIRED FOR DOS'\n         AGO   .ID06\n.ID05    AIF   ('&VERMSG'(1,1) EQ '''').ID07\n.ID06    MNOTE 12,'THE VERIFICATION MESSAGE MUST BE SPECIFIED WITHIN QU$\n               OTES'\n&GBNOGEN SETB  1\n         AGO   .ID11\n.ID07    AIF   (K'&VERMSG LE 82).ID08\n         MNOTE 12,'THE VERIFICATION MESSAGE EXCEEDS 80 CHARACTERS IN LE$\n               NGTH'\n&GBNOGEN SETB  1\n         AGO   .ID11\n.ID08    ANOP\n&I       SETA  1\n&J       SETA  1\n.ID09    ANOP\n&K       SETA  K'&VERMSG-&J+1\n         AIF   (&K LT 1).ID11\n         AIF   (&K LE 8).ID10\n&K       SETA  8\n.ID10    ANOP\n&GCVER(&I) SETC '&VERMSG'(&J,&K)\n&I       SETA  &I+1\n&J       SETA  &J+&K\n         AGO   .ID09\n.ID11    MEXIT\n.*\n.* EDIT LINE PUNCH SPECIFICATION\n.*\n.P01     AIF   (T'&LINE EQ 'O').P04\n         AIF   (T'&LINE NE 'N').P05\n         AIF   (&LINE LT 1).P06\n         AIF   (&LINE GT &GAIMGL).P06\n&LBLINE  SETB  1\n&I       SETA  &LINE-&GAOFFS\n         AIF   (&I GE 1).P02\n&I       SETA  &GAIMGL+&I\n.P02     AIF   (&GALINE(&I) NE 0).P07\n         AIF   (&I LT &GAIMGL).P08\n         MNOTE 8,'LINE=&LINE RESOLVES TO THE LAST LINE OF THE IMAGE -- $\n               NOT VALID FOR 3203 PRINTER.'\n         AGO   .P08\n.P04     MNOTE 12,'LINE MUST BE SPECIFIED (BETWEEN 1 AND IMGLEN)'\n&GBNOGEN SETB  1\n         AGO   .P08\n.P05     MNOTE 12,'LINE IS NOT NUMERIC (BETWEEN 1 AND IMGLEN)'\n&GBNOGEN SETB  1\n         AGO   .P08\n.P06     MNOTE 12,'LINE IS NOT BETWEEN 1 AND IMGLEN'\n&GBNOGEN SETB  1\n         AGO   .P08\n.P07     MNOTE 12,'LINE=&LINE HAS BEEN SPECIFIED MULTIPLE TIMES'\n&GBNOGEN SETB  1\n.P08     AIF   (T'&CHAN EQ 'O').P10\n.P09     AIF   (T'&CHAN NE 'N').P11\n         AIF   (&CHAN LT 1).P12\n         AIF   (&CHAN GT 12).P12\n         AIF   (NOT &LBLINE).P13\n&GALINE(&I) SETA &CHAN\n&GBCHAN(&CHAN) SETB 1\n         AGO   .P13\n.P10     MNOTE 12,'CHAN MUST BE SPECIFIED (BETWEEN 1 AND 12)'\n&GBNOGEN SETB  1\n         AGO   .P13\n.P11     MNOTE 12,'CHAN IS NOT NUMERIC (BETWEEN 1 AND 12)'\n&GBNOGEN SETB  1\n         AGO   .P13\n.P12     MNOTE 12,'CHAN IS NOT BETWEEN 1 AND 12'\n&GBNOGEN SETB  1\n.P13     MEXIT\n.*\n.* EDIT FINAL SPECIFICATION\n.*\n.F01     ANOP\n* FCBGEN - 08/14/81 GIBRALTAR SAVINGS\n&GBFINAL SETB  1\n         AIF   (&GBCHAN(1)).F02\n         MNOTE 12,'NO CHANNEL 1 WAS SPECIFIED.  FCB IMAGE IS INVALID.'\n&GBNOGEN SETB  1\n.F02     AIF   (NOT &GBNOGEN).F03\n         MNOTE 12,'IMAGE SPECIFICATION ERROR DETECTED.  GENERATION TERM$\n               INATED'\n         MEXIT\n.F03     AIF   (&GBDOS).F04\n         AIF   (&GALINE(1) EQ 1).F04\n&I       SETA  &GAOFFS+1\n         MNOTE 8,'''LINE=&I,CHAN=1'' WAS NOT SPECIFIED.  NOT A VALID JE$\n               S2 IMAGE.'\n.F04     MNOTE *,'THE NAME OF THIS FCB IMAGE IS &GCNAME'\n         AIF   (NOT &GBDOS).F05\n         PUNCH '   PHASE &GCNAME,+0'\n.F05     ANOP\n&GCNAME  CSECT\n.F06     AIF   (&GBDOS).F08\n&I       SETA  &GANAMEL-4\n&LCNAME  SETC  '&GCNAME'(5,&I)\n         AIF   (&GBDEFLT).F07\n         MNOTE *,'ONLY ''FCB=&LCNAME'' OUTPUT WILL BE PRINTED'\n         DC    X'00'                    OS/VS FLAGS\n         AGO   .F08\n.F07   MNOTE *,'DEFAULT FCB AND ''FCB=&LCNAME'' OUTPUT WILL BE PRINTED'\n         DC    X'80'                    OS/VS FLAGS\n.F08     MNOTE *,'THE FCB IMAGE IS &GAIMGL LINES LONG'\n         AIF   (&GBDOS).F10\n&I       SETA  &GAIMGL\n         AIF   ('&GCNDXD' EQ '').F09\n&I       SETA  &I+1\n.F09     DC    AL1(&I)                  FCB IMAGE DATA LENGTH\n.F10     AIF   ('&GCNDXD' EQ '').F13\n&I       SETA  &GANDXA\n&J       SETA  &I-1\n         MNOTE *,'PRINT POSITION INDEXING (A 3211 FEATURE) HAS BEEN SPE$\n               CIFIED.'\n         AIF   ('&GCNDXD' EQ 'L').F11\n         MNOTE *,'   POSITION 1 OF THE PRINT DATA WILL BE AT COLUMN &I'\n&I       SETA  &I+X'80'\n         AIF   (&J LT 1).F12\n         MNOTE *,'   (PRECEEDED BY &J BLANK(S))'\n         AGO   .F12\n.F11     MNOTE *,'   POSITION &I OF THE PRINT DATA WILL BE AT COLUMN 1'\n&I       SETA  &I+X'40'\n         AIF   (&J LT 1).F12\n         MNOTE *,'   (&J CHARACTER(S) OF DATA WILL BE IGNORED)'\n.F12     DC    AL1(&I)                  INDEX CONTROL BYTE\n.F13     MNOTE *,'OUTPUT WILL PRINT AT &GCLPI LINES PER INCH'\n         AIF   ('&GCLPI' EQ '6').F14\n&GALINE(1) SETA &GALINE(1)+X'10'\n.F14     ANOP\n&GALINE(&GAIMGL) SETA &GALINE(&GAIMGL)+X'10'\n&I       SETA  1\n&J       SETA  0\n.F15     AIF   (&I GT &GAIMGL).F25\n         AIF   (&GALINE(&I) EQ 0).F24\n&J       SETA  &I-&J-1\n         AIF   (&J LT 1).F16\n         DC    &J.AL1(0)\n.F16     ANOP\n&J       SETA  (&GALINE(&I))\n         AIF   (&J LT X'10').F17\n         AIF   (&J EQ X'10').F23\n&J       SETA  &J-X'10'\n.F17     MNOTE *,'CHANNEL &J STOPS AT LINE &I'\n         AIF   (&J NE 1).F23\n.*\n.* GENERATE SPECIFICATION FOR EVERY UNUSED CHANNEL IN THE IMAGE, EXCEPT\n.*    CHANNELS 9 AND 12, WHICH CAUSE I/O CHAIN INTERRUPTIONS.\n&J       SETA  &I+1\n&K       SETA  2\n.F18     AIF   (&J GE &GAIMGL).F23      DON'T USE LAST LINE OF IMAGE\n.F19     AIF   (&K GT 11).F23           DON'T GENERATE CHANNEL 12\n         AIF   (&GBCHAN(&K)).F22\n         AIF   (&K EQ 9).F22            DON'T GENERATE CHANNEL 9\n         AIF   (&GALINE(&J) NE 0).F21\n&GALINE(&J) SETA &K                     PUT CHANNEL INTO MATRIX\n&K       SETA  &K+1\n.F21     ANOP\n&J       SETA  &J+1\n         AGO   .F18\n.F22     ANOP\n&K       SETA  &K+1\n         AGO   .F19\n.*\n.F23     DC    AL1(&GALINE(&I))\n&J       SETA  &I\n.F24     ANOP\n&I       SETA  &I+1\n         AGO   .F15\n.F25     AIF   (NOT &GBDOS).F27\n&I       SETA  255-&J\n         AIF   (&I LT 1).F26\n         DC    &I.X'00'\n.F26     DC    CL80&GCVER(1)&GCVER(2)&GCVER(3)&GCVER(4)&GCVER(5)&GCVER($\n               6)&GCVER(7)&GCVER(8)&GCVER(9)&GCVER(10)&GCVER(11)\n.F27     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FL1": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x01o\\x00\\x92\\x18?\\x18(\\x00\"\\x00\\x1e\\x00\\x05\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1992-07-01T18:28:00", "lines": 34, "newlines": 30, "modlines": 5, "user": "LDW"}, "text": "         MACRO\n&NFS     FL1   &DSECT=YES\n.*.\n.*$MACRO=FL1        DATE=00/00/76       SOURCE=LDW\n.*\n.*  THIS MACRO GENERATES A DSECT FOR THE TAPE LABELS HDR1/EOF1/EOV1.\n.*  See IBM macro IECDSECT.\n.*\n.*  01Jul92 LDW - Added &P.BLKHI\n.*.\n         LCLC  &P\n&P       SETC  'FL1'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'1'                     CONSTANT\n&P.ID    DC    CL17' '                  DATASET NAME\n&P.FILSR DC    CL6' '                   FIRST VOL NAME\n&P.VOLSQ DC    CL4' '                   VOL # OF DS\n&P.FILSQ DC    CL4' '                   DS SEQ #\n&P.GNO   DC    CL4' '                   GENERATION NUMBER\n&P.VNG   DC    CL2' '                   VERSION NUMBER\n&P.CREDT DC    CL6' YYDDD'              CREATION DATE\n&P.EXPDT DC    CL6' YYDDD'              EXPIRATION DATE\n&P.FSEC  DC    C' '                     0=NO PW, 1=PW, 3=NOPWREAD\n&P.BLKCT DC    CL6' '                   # OF BLOCKS\n&P.SYSCD DC    CL13' '\n         DC    CL3' '\n&P.BLKHI DC    CL4' '                   block count high order\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FL2": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x01o\\x00\\x92\\x18?\\x185\\x00(\\x00 \\x00\\t\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1992-07-01T18:35:00", "lines": 40, "newlines": 32, "modlines": 9, "user": "LDW"}, "text": "         MACRO\n&NFS     FL2   &DSECT=YES\n.*.\n.*$MACRO=FL2        DATE=00/00/76       SOURCE=LDW\n.*\n.*  THIS MACRO GENERATES A DSECT FOR THE TAPE LABELS HDR2/EOF2/EOV2.\n.*  See IBM macro IECDSECT.\n.*  01Jul92 LDW - For completeness, add &P.DRID, &P.ID, &P.DSIND\n.*.\n         LCLC  &P\n&P       SETC  'FL2'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n.***************\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'2'                     CONSTANT\n&P.RECFM DC    C' '                     F/V/U/D\n&P.BLKL  DC    CL5' '                   BLKSIZE\n&P.LRECL DC    CL5' '                   RECORD LEN (X=99999)\n&P.DEN   DC    C' '                     DENSITY (C'0' TO C'3')\n&P.FILP  DC    C' '                     1=VOL SW OCCURRED, 0=NOT\n&P.JOBD  DC    CL8' '                   JOBNAME OF CREATOR\n&P.JSSP  DC    C'/'                     SLASH\n&P.STEPD DC    CL8' '                   STEPNAME OF CREATOR\n&P.TRTCH DC    CL2' '\n&P.CNTRL DC    C' '                     A/M/<BLANK>\n         DC    C' '\n&P.BLKA  DC    C' '                     B/S/R/<BLANK>\n         DC    C' '\n&P.DRID  DC    0CL7' '                  tape drive id\n         DC    CL2' '\n&P.ID    DC    CL5' '                   id of creating drive\n&P.DSIND DC    C' '                     data set indicator field\n&P.CKDS  EQU   C'C'                          checkpoint data set\n         DC    CL32' '\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FREE": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x00C\\x00C\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&LABEL   FREE  &DDNAME=,&DSN=,&MEMBER=,&PREFIX=NO,                     $\n               &FILE=,&DATASET=,                                       $\n               &SYSOUT=,                                               $\n               &JOBNAME=,                                              $\n               &DISP=,&PERM=YES,                                       $\n               &MF=,&SYNAD=\n.*.\n.*$MACRO=FREE       DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO WILL FILL IN THE DAIR PARAMETER LIST AND CALL DAIR TO\n.*       FREE A DATASET.\n.*.\n         GBLB  &OMITTED,&DROP\n         LCLA  &PERMBIT\n&PERMBIT SETA  0                        PERM = X'10'\n         AIF   ('&PERM' NE 'YES').NOTPERM\n&PERMBIT SETA  16                       =X'10'\n.NOTPERM ANOP\n&LABEL   DS    0H\n         $MF   DAPB18,15,&MF\n         XC    DAPB18(DAPB18L),DAPB18   INITIALIZE DAIR BLOCK TO ZERO\n         MVI   DA18CD+1,X'18'           DAIR ENTRY CODE FOR FREE\n         $RXR  DA18PDSN,&DSN&DATASET,0  POINTER TO DSNAME\n         $RXQ  DA18DDN,&DDNAME&FILE,8   DDNAME\n         $RXQ  DA18JBNM,&JOBNAME,8      JOBNAME\n         $RXQ  DA18SCLS,&SYSOUT,2       SYSOUT CLASS\n         AIF   (&OMITTED).MEM\n         MVI   DA18SCLS+1,C' '          BLANK 2ND BYTE OF OUTPUT CLASS\n.MEM     $RXQ  DA18MNM,&MEMBER,8        MEMBER NAME\n         AIF   ('&PREFIX' NE  'YES').NOPREF\n         OI    DA18CTL,DA18UID+&PERMBIT PREFIX CHARGENO.USERID TO DSN\n         AGO   .DISPOS\n.NOPREF  AIF   ('&PERM' NE 'YES').DISPOS FREE PERM DATASET ?\n         OI    DA18CTL,&PERMBIT         FREE PERMANENTLY ALLOCATED DS\n.DISPOS  AIF   (T'&DISP    EQ 'O').NODISP2\n         AIF   ('&DISP'    NE 'KEEP').DELETE2\n         MVI   DA18DPS2,DA18KEEP        DISP=(,KEEP)\n         AGO   .DISP3\n.DELETE2 AIF   ('&DISP'    NE 'DELETE').CATLG2\n         MVI   DA18DPS2,DA18DEL         DISP=(,DELETE)\n         AGO   .DISP3\n.CATLG2  AIF   ('&DISP'    NE 'CATLG').UNCAT2\n         MVI   DA18DPS2,DA18CAT         DISP=(,CATLG)\n         AGO   .DISP3\n.UNCAT2  AIF   ('&DISP'    NE 'UNCATLG').DISPBAD\n         MVI   DA18DPS2,DA18UCAT        DISP=(,UNCATLG)\n         AGO   .DISP3\n.NODISP2 ANOP\n*        DISPOSITION SPECIFIED WHEN ALLOCATED WILL BE USED\n         AGO   .DISP3\n.DISPBAD ANOP\n         MNOTE *,'*****************************************'\n         MNOTE  12,'INVALID DISPOSITON, DISP= &DISP  '\n         MNOTE  *,'*****************************************'\n         AGO   .END\n.DISP3   AIF   ('&MF(1)' EQ 'B').ENDB\n         AIF   ('&MF(1)' EQ 'L').END\n.* OTHERWISE MF='E' OR '' OR INVALID IS 'E'\n         TSDAIR DAPB=(15),SYNAD=&SYNAD\n         AGO   .END\n.ENDB    ST    15,DAPLDAPB\n         LA    R1,DAPL\n.END     AIF    (NOT &DROP).END1\n         DROP  15               DROP ADDRESSIBLITY TO DAIR BLOCK\n.END1    SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F3270": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x07\\x00\\x00\\x00y$\\x8f\\x00\\x85\\x07\\x8f\\x10)\\x017\\x00\\xe9\\x00\\xab\\xe2\\xc4\\xd4@@@@@@@'", "ispf": {"version": "02.07", "flags": 0, "createdate": "1979-09-05T00:00:00", "modifydate": "1985-03-19T10:29:00", "lines": 311, "newlines": 233, "modlines": 171, "user": "SDM"}, "text": "         MACRO\n&NFS     F3270 &COL=,&LINE=,&ROW=,&POS=,&INITIAL=,&LENGTH=,&ATTR=,     $\n               &RA=,&MODEL=,                                           $\n               &$C$=(BLUE,F1,RED,F2,PINK,F3,GREEN,F4,TURQUOIS,F5,      $\n               YELLOW,F6,WHITE,F7,NEUTRAL,F7,DEFCOLOR,00),             $\n               &$H$=(BLINK,F1,REVERSE,F2,UNDER,F4,DEFHI,00),           $\n               &$S$=(12,40,480,24,80,1920,32,80,2560,43,80,3440,       $\n               27,132,3564)\n.*\n.*   INTERNAL MACRO REFERENCES:\n.*      $3270 - GENERATE VALID 3270 CONTROL FIELD BIT CONFIG.\n.*\n.*   GLOBAL SET SYMBOL REFERENCES:\n.*      &$3270 - COMMUNICATION WITH $3270 INNER MACRO\n.*      &F3270M - THE MODEL OF 3270 WE'RE GENNING FOR\n.*      &F3270E - HAVE WE REGALED HIM WITH THE ERROR MESSAGE\n.*\n.*   GENERATE A 3270 FIELD DEFINITION WITH THE FOLLOWING FEATURES:\n.*   1. A SET BUFFER ADDRESS (SBA) SEQUENCE, OR A REPEAT TO ADDRESS\n.*      (RA) SEQUENCE.  THE APPROPRIATE KEYWORDS ARE:\n.*         ROW= (OR LINE=) AND COL= OF THE BUFFER ADDRESS, OR\n.*         POS= ABSOLUTE 3270 BUFFER ADDRESS, OR\n.*         POS=(ROW,COL) OF THE BUFFER ADDRESS, AND\n.*         RA= CHARACTER TO BE REPEATED (TWO DIGITS OF HEX, OR\n.*             C'CHAR'); AND\n.*   2. ATTRIBUTE (SF,SFE,SA,MF) SEQUENCE(S):\n.*         ATTR=(ORDER,ATTRIBUTES,ORDER,ATTRIBUTES,...) WITH MNEMONIC\n.*         NAMES; AND\n.*   3. A FIELD OF DATA WITH AN INITIAL VALUE OF SPACES:\n.*         LENGTH= DESIRED NUMBER OF SPACES; OR\n.*      A FIELD WITH A SPACIFIED INITIAL VALUE:\n.*         INITIAL= DESIRED CHARACTER STRING, AND\n.*         LENGTH= (OPTIONAL) LENGTH ON DC STATEMENT.\n.*\n.*   NOTE: IF A LABEL IS SPECIFIED THEN THE DATA FIELD (IF IT IS\n.*         GENERATED) WILL BE LABELLED 'LABEL'.\n.*\n.* 14MAR85 SDM - ADD MODEL=5, CHANGE SA AND MF APPROACH AND ADD SFE.\n.*               ELIMINATE TROUBLESOME NUMERIC TESTS.\n.* 09MAR81 LDW - ADD DEFCOLOR AND DEFHI EXTENDED ATTRIBUTES.\n.* 29JAN81 LDW - ADD SA= AND MA= FOR 3279 HIGHLIGHT AND COLOR.\n.* 06SEP79 SDM - CHANGE TO TWO CHAR INTERFACE TO $3270.\n.* 05SEP79 SDM - ADD POS=(ROW,COL) OPTION.\n.*               ADD ADDRESS RANGE TESTS.\n.* 04SEP79 SDM - REWRITTEN TO USE $3270 AND ELIMINATE SBA3270.\n.* 26JUL79 LDW - NEW MACRO.\n.*\n         GBLA  &F3270M\n         GBLB  &F3270E\n         GBLC  &$3270\n         LCLA  &A,&B,&I,&J,&CA,&HA\n         LCLB  &B1,&B2,&B3,&B4,&B5,&B6,&B7,&FA,&FAP\n         LCLC  &L,&O,&OX\n*************************************************F3270**14MAR85**SDM***\n         AIF   ('&MODEL' EQ '').MOD3\n         AIF   ('&MODEL' LT '1').MOD1\n         AIF   ('&MODEL' LE '5').MOD2\n.MOD1    MNOTE 8,'MODEL= IS NOT BETWEEN 1 AND 5.  IGNORED.'\n         AGO   .MOD3\n.MOD2    ANOP\n&F3270M  SETA  (&MODEL-1)*3+1\n         AGO   .MOD4\n.MOD3    AIF   (&F3270M NE 0).MOD4\n         MNOTE 0,'MODEL=2 IS ASSUMED'\n&F3270M  SETA  (2-1)*3+1\n.MOD4    AIF   ('&LINE&ROW&COL&POS' EQ '').NOPOS1\n         AIF   ('&POS' NE '').POS1\n         AIF   ('&ROW' EQ '').ROW1\n&A       SETA  &ROW\n         AIF   ('&LINE' EQ '').ROW3\n         MNOTE 8,'LINE AND ROW ARE SYNONYMS - ROW WILL BE USED'\n         AGO   .ROW3\n.ROW1    AIF   ('&LINE' EQ '').ROW2\n&A       SETA  &LINE\n         AGO   .ROW3\n.ROW2    MNOTE 8,'LINE OR ROW INVALID - ROW=1 ASSUMED'\n&A       SETA  1\n.ROW3    AIF   ('&COL' NE '').COL1\n         MNOTE 8,'COL INVALID - COL=1 ASSUMED'\n&B       SETA  1\n         AGO   .RNG1\n.COL1    ANOP\n&B       SETA  &COL\n         AGO   .RNG1\n.POS1    AIF   ('&LINE&ROW&COL' EQ '').POS2\n         MNOTE 8,'LINE, ROW, OR COL MAY NOT OCCUR WITH POS - POS VALUE X\n               USED'\n.POS2    AIF   ('&POS'(1,1) NE '(').POS7\n         AIF   ('&POS(1)' NE '').POS3\n         MNOTE 8,'POS= ROW INVALID - 1 ASSUMED'\n&A       SETA  1\n         AGO   .POS4\n.POS3    ANOP\n&A       SETA  &POS(1)\n.POS4    AIF   ('&POS(2)' NE '').POS5\n         MNOTE 8,'POS= COLUMN INVALID - 1 ASSUMED'\n&B       SETA  1\n         AGO   .POS6\n.POS5    ANOP\n&B       SETA  &POS(2)\n.POS6    AIF   (N'&POS LE 2).RNG1\n         MNOTE 8,'MORE THAN 2 VALUES TO POS= - EXCESS IGNORED'\n.RNG1    AIF   (&A GE 1).RNG2\n&A       SETA  1\n         AGO   .RNG3\n.RNG2    AIF   (&A LE &$S$(&F3270M)).RNG4\n&A       SETA  &$S$(&F3270M)\n.RNG3    MNOTE 8,'SPECIFIED ROW OUT OF RANGE - &A ASSUMED'\n.RNG4    AIF   (&B GE 1).RNG5\n&B       SETA  1\n         AGO   .RNG6\n.RNG5    AIF   (&B LE &$S$(&F3270M+1)).RNG7\n&B       SETA  &$S$(&F3270M+1)\n.RNG6    MNOTE 8,'SPECIFIED COL OUT OF RANGE - &B ASSUMED'\n.RNG7    ANOP\n&A       SETA  (&A-1)*&$S$(&F3270M+1)+&B-1\n         AGO   .ADDR\n.POS7    ANOP\n&A       SETA  &POS\n         AIF   (&A LT &$S$(&F3270M+2)).ADDR\n&A       SETA  &$S$(&F3270M+2)-1\n         MNOTE 8,'SPECIFIED POS OUT OF RANGE - &A ASSUMED'\n.ADDR    ANOP\n&B       SETA  &A/64\n&A       SETA  &A-&B*64\n         $3270 &B,&A\n         AIF   ('&RA' NE '').RA1\n         DC    X'11&$3270'              SBA\n         AGO   .ATTR1\n.RA1     AIF   ('&RA'(1,2) EQ 'C''').RA2\n         DC    X'3C&$3270',X'&RA'       RA\n         AGO   .ATTR1\n.RA2     DC    X'3C&$3270',&RA          RA\n         AGO   .ATTR1\n.NOPOS1  AIF   ('&RA' EQ '').ATTR1\n         MNOTE 8,'RA= INVALID WITHOUT POSITIONING OPERANDS - IGNORED'\n.ATTR1   AIF   ('&ATTR' EQ '').ATTR6\n&I       SETA  0\n.ATTRO1  ANOP\n&A       SETA  0\n&CA      SETA  0\n&FA      SETB  0\n&FAP     SETB  0\n&HA      SETA  0\n.ATTR2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&ATTR).OKATTR\n         AIF   ('&ATTR(&I)' EQ 'SF').ATTRO2\n         AIF   ('&ATTR(&I)' EQ 'SFE').ATTRO2\n         AIF   ('&ATTR(&I)' EQ 'SA').ATTRO2\n         AIF   ('&ATTR(&I)' EQ 'MF').ATTRO2\n         AIF   (&I GT 1).ATTRA\n         MNOTE 4,'ATTR= WITHOUT VALID ORDER TYPE - SF ASSUMED'\n.ATTRA   AIF   (NOT &FAP).ATTRFN\n&FA      SETB  1                        FIELD ATTRIBUTE SPECIFIED\n.ATTRFN  ANOP\n&FAP     SETB  1                        PROCESSING FIELD ATTRIBUTES\n         AIF   ('&ATTR(&I)' EQ 'ASKIP' ).ATTR30\n         AIF   ('&ATTR(&I)' EQ 'PROT'  ).ATTR20\n         AIF   ('&ATTR(&I)' EQ 'NUM'   ).ATTR10\n         AIF   ('&ATTR(&I)' EQ 'UNPROT').ATTR30X\n         AIF   ('&ATTR(&I)' EQ 'DARK'  ).ATTR0C\n         AIF   ('&ATTR(&I)' EQ 'NDISP' ).ATTR0C\n         AIF   ('&ATTR(&I)' EQ 'BRT'   ).ATTR08\n         AIF   ('&ATTR(&I)' EQ 'BRIGHT').ATTR08\n         AIF   ('&ATTR(&I)' EQ 'SPD'   ).ATTR04\n         AIF   ('&ATTR(&I)' EQ 'DET'   ).ATTR04\n         AIF   ('&ATTR(&I)' EQ 'NORM'  ).ATTR0CX\n         AIF   ('&ATTR(&I)' EQ 'MDT'   ).ATTR01\n         AIF   ('&ATTR(&I)' EQ 'MOD'   ).ATTR01\n&FAP     SETB  0                        THIS WASN'T A FIELD ATTRIBUTE\n&J       SETA  1\n.ATTRC1  AIF   (&J GT N'&$C$).ATTRCX\n         AIF   ('&ATTR(&I)' EQ '&$C$(&J)').ATTRC2\n&J       SETA  &J+2\n         AGO   .ATTRC1\n.ATTRC2  AIF   (&CA EQ 0).ATTRC3\n         MNOTE 8,'MULTIPLE COLOR ATTRIBUTES - &$C$(&CA) IGNORED'\n.ATTRC3  ANOP\n&CA      SETA  &J\n         AGO   .ATTR2\n.ATTRCX  ANOP\n&J       SETA  1\n.ATTRH1  AIF   (&J GT N'&$H$).ATTRHX\n         AIF   ('&ATTR(&I)' EQ '&$H$(&J)').ATTRH2\n&J       SETA  &J+2\n         AGO   .ATTRH1\n.ATTRH2  AIF   (&HA EQ 0).ATTRH3\n         MNOTE 8,'MULTIPLE HIGHLIGHT ATTRIBUTES - &$H$(&HA) IGNORED'\n.ATTRH3  ANOP\n&HA      SETA  &J\n         AGO   .ATTR2\n.ATTRHX  ANOP\n         MNOTE 8,'INVALID ATTR - &ATTR(&I) IGNORED'\n         AGO   .ATTR4\n.***  ASKIP\n.ATTR30  AIF   (&B7 OR &B2).ATTR3       ASKIP OR NUMERIC\n&B7      SETB  1                        ASKIP HAS BEEN HERE\n         AIF   (&B1).ATTR10X            ALREADY PROT, SET NUM\n&A       SETA  &A+X'30'\n         AGO   .ATTR2\n.***  PROT\n.ATTR20  AIF   (&B1).ATTR3              PROT\n&B1      SETB  1                        PROT HAS BEEN SPECIFIED\n         AIF   (&B7).ATTR2              ALREADY ASKIP\n&A       SETA  &A+X'20'\n         AGO   .ATTR2\n.***  NUM\n.ATTR10  AIF   (&B2 OR &B7).ATTR3       NUMERIC OR ASKIP\n&B2      SETB  1                        DON'T ALLOW NUMERIC AGAIN\n.ATTR10X ANOP\n&A       SETA  &A+X'10'\n         AGO   .ATTR2\n.***  UNPROT\n.ATTR30X AIF   (&B1 OR &B7).ATTR3       PROT OR ASKIP\n&B1      SETB  1                        DON'T ALLOW PROT\n&B7      SETB  1                        DON'T ALLOW ASKIP\n         AGO   .ATTR2\n.***  DARK/NDISP\n.ATTR0C  AIF   (&B3 OR &B4).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n&B4      SETB  1                        DON'T ALLOW DET\n&A       SETA  &A+X'0C'                 X'08'+X'04'\n         AGO   .ATTR2\n.***  BRT/BRIGHT\n.ATTR08  AIF   (&B3).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n         AIF   (NOT &B5).ATTR08A\n&A       SETA  &A-X'04'                 TAKE BACK THE DET ATTR\n.ATTR08A ANOP\n&A       SETA  &A+X'08'\n&B5      SETB  1                        DET HAS BEEN SET\n         AGO   .ATTR2\n.***  SPD/DET\n.ATTR04  AIF   (&B4).ATTR3\n&B4      SETB  1                        DON'T ALLOW DET\n         AIF   (&B5).ATTR2              BRIGHT HAS BEEN HERE\n&B5      SETB  1                        DET HAS BEEN SET\n&A       SETA  &A+X'04'\n         AGO   .ATTR2\n.***  NORM\n.ATTR0CX AIF   (&B3).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n         AGO   .ATTR2\n.***  MDT/MOD\n.ATTR01  AIF   (&B6).ATTR3\n&B6      SETB  1\n&A       SETA  &A+X'01'\n         AGO   .ATTR2\n.ATTR3   MNOTE 8,'DUPLICATE OR CONFLICTING ATTR - &ATTR(&I) IGNORED'\n.ATTR4   AIF   (&F3270E).ATTR2\n&F3270E  SETB  1\n         MNOTE *,'TRY THESE ATTRIBUTE NAMES:'\n         MNOTE *,'  (FIELD) UNPROT, PROT, ASKIP, NUM, NORM, BRT,'\n         MNOTE *,'    BRIGHT, DARK, NDISP, DET, SPD, MDT, MOD;'\n         MNOTE *,'  (COLOR) BLUE, RED, PINK, GREEN, TURQUOIS, YELLOW,'\n         MNOTE *,'    WHITE, NEUTRAL, DEFCOLOR;'\n         MNOTE *,'  (HIGHLIGHT) BLINK, REVERSE, UNDER,'\n         MNOTE *,'    NORMHI, DEFHI.'\n         AGO   .ATTR2\n.*\n.ATTRO2  AIF   (&I LE 1).ATTR5\n.OKATTR  AIF   ('&O' NE 'SA').ATTRSA4\n         AIF   (NOT &FA).ATTRSA1\n         MNOTE 8,'FIELD ATTRIBUTES IGNORED FOR ATTR=SA'\n.ATTRSA1 AIF   ((&CA EQ 0) AND (&HA EQ 0)).ATTRSA3\n         AIF   (&HA EQ 0).ATTRSA2\n         DC    X'2841&$H$(&HA+1)'       SA (HIGHLIGHT)\n.ATTRSA2 AIF   (&CA EQ 0).ATTR5\n         DC    X'2842&$C$(&CA+1)'       SA (COLOR)\n         AGO   .ATTR5\n.ATTRSA3 DC    X'280000'                SA (RESET)\n         AGO   .ATTR5\n.ATTRSA4 AIF   (('&O' NE 'SFE') AND ('&O' NE 'MF')).ATTRMF5\n&OX      SETC  ''\n         AIF   (NOT &FA).ATTRMF1\n         $3270 &A\n&OX      SETC  'C0&$3270'\n.ATTRMF1 AIF   (&HA EQ 0).ATTRMF2\n&OX      SETC  '&OX.41&$H$(&HA+1)'\n.ATTRMF2 AIF   (&CA EQ 0).ATTRMF3\n&OX      SETC  '&OX.42&$C$(&CA+1)'\n.ATTRMF3 ANOP\n&A       SETA  K'&OX/4\n         AIF   ('&O' NE 'SFE').ATTRMF4\n         DC    X'290&A&OX'              SFE\n         AGO   .ATTR5\n.ATTRMF4 DC    X'2C0&A&OX'              MF\n         AGO   .ATTR5\n.ATTRMF5 $3270 &A\n         DC    X'1D&$3270'              SF\n         AIF   ((&CA EQ 0) AND (&HA EQ 0)).ATTR5\n         MNOTE 8,'COLOR OR HIGHLIGHT ATTRIBUTES IGNORED FOR ATTR=SF'\n.ATTR5   AIF   (&I GT N'&ATTR).ATTR6\n&O       SETC  '&ATTR(&I)'\n         AGO   .ATTRO1\n.ATTR6   ANOP\n.INIT1   AIF   ('&INITIAL&LENGTH' EQ '').EXIT\n         AIF   ('&INITIAL' EQ '').JUSTL\n         AIF   ('&LENGTH' EQ '').JUSTI\n&NFS     DC    CL&LENGTH&INITIAL        DATA\n         AGO   .EXIT\n.JUSTL   ANOP\n&NFS     DC    CL&LENGTH' '             DATA AREA\n         AGO   .EXIT\n.JUSTI   ANOP\n&NFS     DC    C&INITIAL                DATA\n.EXIT    ANOP\n***********************************************************************\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F3270@": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x00\\x00y$\\x8f\\x00\\x81\\x06\\x8f!\\x03\\x01\\x06\\x00\\xe9\\x004\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "1979-09-05T00:00:00", "modifydate": "1981-03-09T21:03:00", "lines": 262, "newlines": 233, "modlines": 52, "user": "LDW"}, "text": "         MACRO\n&NFS     F3270 &COL=,&LINE=,&ROW=,&POS=,&INITIAL=,&LENGTH=,&ATTR=,     $\n               &RA=,&SA=,&MA=,&MODEL=,                                 $\n               &$$VAL$1=(12,24,36,43,40,80,80,80,480,1920,2880,3440),  $\n               &$$VAL$2=(BLUE,42F1,RED,42F2,PINK,42F3,GREEN,42F4,      $\n               TURQOUIS,42F5,YELLOW,42F6,WHITE,42F7,DEFCOLOR,4200,     $\n               BLINK,41F1,REVERSE,41F2,UNDER,41F4,DEFHI,4100)\n.*\n.* F3270 - 03/09/81 LDW\n.*\n.*   INTERNAL MACRO REFERENCES:\n.*      $3270 - GENERATE VALID 3270 CONTROL FIELD BIT CONFIG.\n.*\n.*   GLOBAL SET SYMBOL REFERENCES:\n.*      &$3270 - COMMUNICATION WITH $3270 INNER MACRO\n.*      &F3270M - THE MODEL OF 3270 WE'RE GENNING FOR\n.*      &F3270E - HAVE WE REGALED HIM WITH THE ERROR MESSAGE\n.*\n.*   GENERATE A 3270 FIELD DEFINITION WITH THE FOLLOWING FEATURES:\n.*   1. A SET BUFFER ADDRESS (SBA) SEQUENCE, OR A REPEAT TO ADDRESS\n.*      (RA) SEQUENCE.  THE APPROPRIATE KEYWORDS ARE:\n.*         ROW= (OR LINE=) AND COL= OF THE BUFFER ADDRESS, OR\n.*         POS= ABSOLUTE 3270 BUFFER ADDRESS, OR\n.*         POS=(ROW,COL) OF THE BUFFER ADDRESS, AND\n.*         RA= CHARACTER TO BE REPEATED (TWO DIGITS OF HEX, OR\n.*             C'CHAR'); AND\n.*   2. A START FIELD (SF) SEQUENCE WITH THE DESIRED ATTRIBUTES:\n.*         ATTR=(ATTRIBUTES) WITH MNEMONIC NAMES; AND\n.*   3. A FIELD OF DATA WITH AN INITIAL VALUE OF SPACES:\n.*         LENGTH= DESIRED NUMBER OF SPACES; OR\n.*      A FIELD WITH A SPACIFIED INITIAL VALUE:\n.*         INITIAL= DESIRED CHARACTER STRING, AND\n.*         LENGTH= (OPTIONAL) LENGTH ON DC STATEMENT.\n.*\n.*   NOTE: IF A LABEL IS SPECIFIED THEN THE SF SEQUENCE ATTRIBUTE\n.*      BYTE (IF IT IS GENERATED) WILL BE LABELLED 'LABEL'A AND THE\n.*      DATA FIELD (IF IT IS GENERATED) WILL BE LABELLED 'LABEL'.\n.*\n.* 03/09/81 LDW - ADD DEFCOLOR AND DEFHI EXTENDED ATTRIBUTES\n.* 01/29/81 LDW - ADD SA= AND MA= FOR 3279 HIGHLIGHTING AND COLOR\n.* 09/06/79 SDM - CHANGE TO TWO CHAR INTERFACE TO $3270\n.* 09/05/79 SDM - ADD POS=(ROW,COL) OPTION\n.*                ADD ADDRESS RANGE TESTS\n.* 09/04/79 SDM - REWRITTEN TO USE $3270 AND ELIMINATE SBA3270\n.* 07/26/79 LDW - NEW MACRO\n.*\n         GBLA  &F3270M\n         GBLB  &F3270E\n         GBLC  &$3270\n         LCLA  &L,&A,&B,&I\n         LCLB  &B1,&B2,&B3,&B4,&B5,&B6\n         LCLC  &C\n************************************************F3270**03/09/81**LDW***\n         AIF   (T'&MODEL EQ 'O').MOD3\n         AIF   ('&MODEL' LT '1').MOD1\n         AIF   ('&MODEL' LE '4').MOD2\n.MOD1    MNOTE 4,'MODEL= IS NOT BETWEEN 1 AND 4.  IGNORED.'\n         AGO   .MOD3\n.MOD2    ANOP\n&F3270M  SETA  &MODEL\n         AGO   .MOD4\n.MOD3    AIF   (&F3270M NE 0).MOD4\n         MNOTE 0,'MODEL=2 IS ASSUMED'\n&F3270M  SETA  2\n.MOD4    AIF   ('&LINE&ROW&COL&POS' EQ '').NOPOS1\n         AIF   (T'&POS NE 'O').POS1\n         AIF   (T'&ROW EQ 'O').ROW1\n         AIF   (T'&ROW NE 'N').ROW2\n&A       SETA  &ROW\n         AIF   (T'&LINE EQ 'O').ROW3\n         MNOTE 4,'LINE AND ROW ARE SYNONYMS - ROW WILL BE USED'\n         AGO   .ROW3\n.ROW1    AIF   (T'&LINE NE 'N').ROW2\n&A       SETA  &LINE\n         AGO   .ROW3\n.ROW2    MNOTE 4,'LINE OR ROW INVALID - ROW=1 ASSUMED'\n&A       SETA  1\n.ROW3    AIF   (T'&COL EQ 'N').COL1\n         MNOTE 4,'COL INVALID - COL=1 ASSUMED'\n&B       SETA  1\n         AGO   .COL2\n.COL1    ANOP\n&B       SETA  &COL\n.COL2    ANOP\n         AGO   .RNG1\n.POS1    AIF   ('&LINE&ROW&COL' EQ '').POS2\n         MNOTE 4,'LINE, ROW, OR COL MAY NOT OCCUR WITH POS - POS VALUE X\n               USED'\n.POS2    AIF   (N'&POS LT 2).POS6\n         AIF   (T'&POS(1) EQ 'N').POS3\n         MNOTE 4,'POS ROW INVALID - 1 ASSUMED'\n&A       SETA  1\n         AGO   .POS4\n.POS3    ANOP\n&A       SETA  &POS(1)\n.POS4    AIF   (T'&POS(2) EQ 'N').POS5\n         MNOTE 4,'POS COLUMN INVALID - 1 ASSUMED'\n&B       SETA  1\n         AGO   .RNG1\n.POS5    ANOP\n&B       SETA  &POS(2)\n.RNG1    AIF   (&A GE 1).RNG2\n&A       SETA  1\n         AGO   .RNG3\n.RNG2    AIF   (&A LE &$$VAL$1(&F3270M)).RNG4\n&A       SETA  &$$VAL$1(&F3270M)\n.RNG3    MNOTE 4,'SPECIFIED ROW OUT OF RANGE - &A ASSUMED'\n.RNG4    AIF   (&B GE 1).RNG5\n&B       SETA  1\n         AGO   .RNG6\n.RNG5    AIF   (&B LE &$$VAL$1(&F3270M+4)).RNG7\n&B       SETA  &$$VAL$1(&F3270M+4)\n.RNG6    MNOTE 4,'SPECIFIED COL OUT OF RANGE - &B ASSUMED'\n.RNG7    ANOP\n&A       SETA  (&A-1)*80+&B-1\n         AGO   .ADDR\n.POS6    AIF   (T'&POS EQ 'N').POS7\n&A       SETA  0\n         AGO   .POS8\n.POS7    ANOP\n&A       SETA  &POS\n         AIF   (&A LT &$$VAL$1(&F3270M+8)).ADDR\n&A       SETA  &$$VAL$1(&F3270M+8)-1\n.POS8    MNOTE 4,'SPECIFIED POS OUT OF RANGE - &A ASSUMED'\n.ADDR    ANOP\n&B       SETA  &A/64\n&A       SETA  &A-&B*64\n         $3270 &B,&A\n         AIF   (T'&RA NE 'O').RA1\n         DC    X'11&$3270'\n         AGO   .ATTR1\n.RA1     AIF   ('&RA'(1,2) EQ 'C''').RA2\n         DC    X'3C&$3270',X'&RA'\n         AGO   .ATTR1\n.RA2     DC    X'3C&$3270',&RA\n         AGO   .ATTR1\n.NOPOS1  AIF   (T'&RA EQ 'O').ATTR1\n         MNOTE 4,'RA= INVALID WITHOUT POSITIONING OPERANDS - IGNORED'\n.ATTR1   AIF   (T'&ATTR EQ 'O').SA1\n&A       SETA  0\n.ATTR2   AIF   (&I EQ N'&ATTR).OKATTR\n&I       SETA  &I+1\n         AIF   ('&ATTR(&I)' EQ 'ASKIP' ).ATTR30\n         AIF   ('&ATTR(&I)' EQ 'PROT'  ).ATTR20\n         AIF   ('&ATTR(&I)' EQ 'NUM'   ).ATTR10\n         AIF   ('&ATTR(&I)' EQ 'UNPROT').ATTR30X\n         AIF   ('&ATTR(&I)' EQ 'DARK'  ).ATTR0C\n         AIF   ('&ATTR(&I)' EQ 'NDISP' ).ATTR0C\n         AIF   ('&ATTR(&I)' EQ 'BRT'   ).ATTR08\n         AIF   ('&ATTR(&I)' EQ 'BRIGHT').ATTR08\n         AIF   ('&ATTR(&I)' EQ 'SPD'   ).ATTR04\n         AIF   ('&ATTR(&I)' EQ 'DET'   ).ATTR04\n         AIF   ('&ATTR(&I)' EQ 'NORM'  ).ATTR0CX\n         AIF   ('&ATTR(&I)' EQ 'MDT'   ).ATTR01\n         AIF   ('&ATTR(&I)' EQ 'MOD'   ).ATTR01\n         MNOTE 4,'INVALID ATTR - &ATTR(&I) IGNORED'\n         AGO   .ATTR4\n.***  ASKIP\n.ATTR30  AIF   (&B1 OR &B2).ATTR3\n&B1      SETB  1\n&B2      SETB  1\n&A       SETA  &A+X'30'                 X'20'+X'10'\n         AGO   .ATTR2\n.***  PROT\n.ATTR20  AIF   (&B1).ATTR3\n&B1      SETB  1\n&A       SETA  &A+X'20'\n         AGO   .ATTR2\n.***  NUM\n.ATTR10  AIF   (&B2).ATTR3\n&B2      SETB  1\n&A       SETA  &A+X'10'\n         AGO   .ATTR2\n.***  UNPROT\n.ATTR30X AIF   (&B1).ATTR3\n&B1      SETB  1\n         AGO   .ATTR2\n.***  DARK/NDISP\n.ATTR0C  AIF   (&B3 OR &B4).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n&B4      SETB  1                        DON'T ALLOW DET\n&A       SETA  &A+X'0C'                 X'08'+X'04'\n         AGO   .ATTR2\n.***  BRT/BRIGHT\n.ATTR08  AIF   (&B3).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n         AIF   (NOT &B5).ATTR08A\n&A       SETA  &A-X'04'                 TAKE BACK THE DET ATTR\n.ATTR08A ANOP\n&A       SETA  &A+X'08'\n&B5      SETB  1                        DET HAS BEEN SET\n         AGO   .ATTR2\n.***  SPD/DET\n.ATTR04  AIF   (&B4).ATTR3\n&B4      SETB  1                        DON'T ALLOW DET\n         AIF   (&B5).ATTR2              BRIGHT HAS BEEN HERE\n&B5      SETB  1                        DET HAS BEEN SET\n&A       SETA  &A+X'04'\n         AGO   .ATTR2\n.***  NORM\n.ATTR0CX AIF   (&B3).ATTR3\n&B3      SETB  1                        INTENSITY HAS BEEN SET\n         AGO   .ATTR2\n.***  MDT/MOD\n.ATTR01  AIF   (&B6).ATTR3\n&B6      SETB  1\n&A       SETA  &A+X'01'\n         AGO   .ATTR2\n.ATTR3   MNOTE 4,'DUPLICATE OR CONFLICTING ATTR - &ATTR(&I) IGNORED'\n.ATTR4   AIF   (&F3270E).ATTR2\n&F3270E  SETB  1\n         MNOTE *,'TRY ONE OF THESE:  UNPROT, PROT, ASKIP, NUM,'\n         MNOTE *,'                   NORM, BRT, BRIGHT, DARK, NDISP,'\n         MNOTE *,'                   DET, SPD, MDT, MOD.'\n         AGO   .ATTR2\n.*\n.OKATTR  ANOP\n         $3270 &A\n         DC    X'1D&$3270'              START FIELD + ATTR BYTE\n         AIF   ('&NFS' EQ '').SA1\n&NFS.A   EQU   *-1                      ATTRIBUTE BYTE LABEL\n.***\n.SA1     AIF   (T'&SA EQ 'O').MA1\n&I       SETA  1\n&C       SETC  ''\n.SA2     ANOP\n&A       SETA  1\n.SA3     AIF   ('&SA(&I)' EQ '&$$VAL$2(&A)').SA4\n&A       SETA  &A+2\n         AIF   (&A LT N'&$$VAL$2).SA3\n         MNOTE 4,'INVALID COLOR OR HIGHLIGHTING - &SA(&I) IGNORED'\n         AGO   .SA5\n.SA4     ANOP\n&C       SETC  '&C.28&$$VAL$2(&A+1)'\n.SA5     ANOP\n&I       SETA  &I+1\n         AIF   (&I LE N'&SA).SA2\n         DC    X'&C'                    SET COLOR AND/OR HIGHLIGHTING\n.***\n.MA1     AIF   (T'&MA EQ 'O').INIT1\n&A       SETA  1\n.MA3     AIF   ('&MA' EQ '&$$VAL$2(&A)').MA4\n&A       SETA  &A+2\n         AIF   (&A LT N'&$$VAL$2).MA3\n         MNOTE 4,'INVALID COLOR OR HIGHLIGHTING - &MA IGNORED'\n         AGO   .INIT1\n.MA4     DC    X'2C&$$VAL$2(&A+1)'      MODIFY COLOR OR HIGHLIGHTING\n.***\n.INIT1   AIF   ('&INITIAL&LENGTH' EQ '').EXIT\n         AIF   ('&INITIAL' EQ '').JUSTL\n         AIF   ('&LENGTH' EQ '').JUSTI\n&NFS     DC    CL&LENGTH&INITIAL        DATA\n         AGO   .EXIT\n.JUSTL   ANOP\n&NFS     DC    CL&LENGTH' '             DATA AREA\n         AGO   .EXIT\n.JUSTI   ANOP\n&NFS     DC    C&INITIAL                DATA\n.EXIT    ANOP\n***********************************************************************\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEX": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x00A\\x00A\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=\n.*.\n.*$MACRO=HEX        DATE=12/18/76       SOURCE=LDW\n.*\n.*  THIS MACRO WILL CONVERT A BINARY FIELD TO PRINTABLE HEX\n.*.\n.*      REWRITTEN FROM SCRATCH -- 01/29/79  FIXED  02-16-79  03-03-79\n.*      UPDATED  04-21-79\n         GBLC  &HEXTAB#\n         LCLA  &LT                      UNPK \"TO\" LENGTH\n         LCLA  &LF                      UNPK \"FROM\" LENGTH\n         LCLA  &LTR                     TR \"TO\" LENGTH\n         LCLA  &LL                      &LEN ONE WAY OR ANOTHER\n         LCLC  &F1,&F2,&T1,&T2,&LX\n&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER\n&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER\n&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER\n&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER\n&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD\n         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4\n&LL      SETA  &LX                      GET IT\n         AGO   .OKLEN\n.DEFLEN  ANOP\n&LL      SETA  4                        SET THE DEFAULT LENGTH\n.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1\n&HEXTAB# SETC  '&HEXTAB'\n.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2\n&HEXTAB# SETC  'HEXTAB'\n.OKHEX2  ANOP\n&LT      SETA  &LL*2\n         AIF   ('&DIGITS' EQ '').OKDIGIT\n&LT      SETA  &DIGITS\n.OKDIGIT AIF   (N'&TO NE 2).TO1\n         AIF   (N'&FROM NE 2).T2F1\n.*  N'&TO = 2     N'&FROM = 2\n&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.T2F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 2     N'&FROM = 1\n&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.TO1     AIF   (N'&TO NE 1).ERRT\n         AIF   (N'&FROM NE 2).T1F1\n.*  N'&TO = 1     N'&FROM = 2\n&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.T1F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 1     N'&FROM = 1\n&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.ERRF    MNOTE 8,'ERROR IN \"FROM\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.ERRT    MNOTE 8,'ERROR IN \"TO\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.DONE    SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HEXTAB": {"ttr": 2572, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     HEXTAB  &DUAL=NO\n.*.\n.*$MACRO=HEXTAB     DATE=00/00/76       SOURCE=LDW\n.*.\n.*  HEXTAB  LDW  UPDATED 02-21-79\n.*  UPDATED 03-17-79\n         GBLC  &HEXTAB#\n         LCLC  &N\n&N       SETC  '&NFS'                   ASSUME GIVEN\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&N       SETC  '&HEXTAB#'               ASSUME GLOBAL PRESENT\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&HEXTAB# SETC  'HEXTAB'                 ELSE, SET IT\n&N       SETC  'HEXTAB'                 HERE TOO\n.OK      AIF   ('&DUAL' EQ 'YES').DUAL\n&N       EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         MEXIT\n.DUAL    ANOP\n&N       EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   &N+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ID": {"ttr": 2574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x00*\\x00*\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     ID    &ID,&OPT,&DATE=,&TIME=\n.*.\n.*$MACRO=ID         DATE=06/15/77       SOURCE=LDW\n.*  THIS MACRO WILL GENERATE A VARIABLE LENGTH ID FIELD WITH THE CSECT\n.*       NAME, ASSEMBLY DATE, AND ASSEMBLY TIME.  IT IS USED AS AN\n.*       INNER MACRO BY 'ENTR'.\n.*.\n.*  UPDATED 11-29-79 LDW    USE $$ASM MACRO FOR DATE\n.*  UPDATED 03-17-79 LDW\n.*  UPDATED 02-21-79 LDW\n.*  UPDATED 01-03-79 LDW\n         GBLC  &$$DATE1\n         LCLC  &XDATE,&XTIME\n         LCLA  &L\n&L       SETA  K'&ID\n         AIF   ('&OPT' EQ 'ASIS').ASIS\n         AIF   ('&OPT' NE 'NODATE').DATE\n.ASIS    ANOP\n&NFS     DC    AL1(&L),C'&ID'\n         MEXIT\n.DATE    $$ASM\n&XDATE   SETC  '&$$DATE1'\n         AIF   ('&DATE' EQ '').OKDATE\n&XDATE   SETC  '&DATE'                  USE WHAT HE WANTS\n.OKDATE  ANOP\n&L       SETA  &L+K'&XDATE+2\n         AIF   ('&OPT' NE 'NOTIME').TIME\n&NFS     DC    AL1(&L),C'&ID  &XDATE'\n         MEXIT\n.TIME    ANOP\n&XTIME   SETC  '&SYSTIME'               DEFAULT TO CURRENT TIME\n         AIF   ('&TIME' EQ '').OKTIME   HE DIDN'T SPECIFY, USE CURRENT\n&XTIME   SETC  '&TIME'                  USE WHAT HE WANTS\n.OKTIME  ANOP\n&L       SETA &L+K'&XTIME+1             =1+8\n         AIF   ('&OPT' NE '').BADOPT\n&NFS     DC    AL1(&L),C'&ID  &XDATE &XTIME'\n         MEXIT\n.BADOPT  MNOTE 0,'*** (ID MACRO) OPT=&OPT IS INVALID, IGNORED.'\n         MNOTE *,'(MUST BE NULL, \"NOTIME\", \"NODATE\", OR \"ASIS\")'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IECDLCH@": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81#\\x1f\\x00\\x81#\\x1f\\x12H\\x00L\\x00L\\x00\\x00\\xd4\\xe5\\xe2\\xf3K\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-08-19T00:00:00", "modifydate": "1981-08-19T12:48:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "MVS3.8"}, "text": "* %      GOTO  LCHPLS;             /* GO TO THE PL/S VERSION   */\n*\n         MACRO\n         IECDLCH\nLCH      DSECT\n         SPACE 1\n*****************************************************************\n*                                                               *\n*   THIS MACRO DSECT DESCRIBES THE LOGICAL CHANNEL QUEUE TABLE. *\n*                                                               *\n*****************************************************************\n         SPACE 1\nLCHENTRY DS    0D                  DOUBLEWORD ALIGNMENT\nLCHFST   DS    F                   FIRST IOQ ON LCH\nLCHLST   DS    F                   LAST IOQ ON LCH\nLCHLOCK  DS    F                   LOCKWORD ASSOCIATED WITH LCH YM3157P\nLCHRSV01 DS    F                   RESERVED                     YM3157P\nLCHTCH   DS    F                   TCH CHANNEL LIST\nLCHCHCNT DS    FL1                 NUMBER OF CHANNELS ON LCH\nLCHFLA   DS    XL1                 FLAG BYTE\n         SPACE 1\nLCHLKHLD EQU   X'80'               LCHLOCK HELD ON ENTRY\n*        EQU   X'7F'               RESERVED\n         SPACE 1\nLCHRSV02 DS    H                   RESERVED                     YM3157P\nLCHTOTAL DS    H                   TOTAL REQUESTS STARTED OR\n*                                  QUEUED\nLCHRSV03 DS    H                   RESERVED                     YM3157P\nLCHLGBSY DS    H                   NUMBER REQUESTS QUEUED\n*                                  BECAUSE LOGICALLY BUSY\nLCHPYBSY DS    H                   NUMBER REQUESTS QUEUED\n*                                  BECAUSE PHYSICALLY BUSY\nLCHEL    EQU   *-LCHENTRY          ENTRY LENGTH\nLCHELP2  EQU   5                   LENGTH OF LCH IN POWERS OF TWO\n         MEND\n*%LCHPLS: ;\n*\n* /*************************************************************/\n* /*                                                           */\n* /* THIS STRUCTURE DESCRIBES THE LOGICAL CHANNEL QUEUE TABLE. */\n* /* CALLERS OF THIS MACRO SHOULD RESPECIFY THE LCH BASED  ON  */\n* /* THE ADDRESS GOTTEN FROM THE CVT.                          */\n* /*                                                           */\n* /*************************************************************/\n* /*                                                           */\n* /*     09/05/73     LEVEL=00                                 */\n* /*                                                           */\n* /*************************************************************/\n*\n*   DCL  1 LCH  BDY(DWORD)  BASED(LCHPTR),\n*        2  LCHENTRY  PTR(31),     /* LABEL IDENTIFICATION     */\n*          3  LCHFST  PTR(31),     /* FIRST IOQ  ON LCH        */\n*        2  LCHLST    PTR(31),     /* LAST IOQ  ON LCH         */\n*        2  LCHLOCK   CHAR(4),     /* LOCKWORD FOR LCH YM3157P */\n*        2  LCHRSV01  CHAR(4),     /* RESVERVED        YM3157P */\n*        2  LCHTCH    PTR(31),     /* TCH CHANNEL LIST         */\n*        2  LCHCHCNT  FIXED(8),    /* NUMBER OF CHANNELS IN\n*                                     LIST                     */\n*        2  LCHFLA    CHAR(1),     /* FLAG BYTE                */\n*          3  LCHLKHLD  BIT(1),    /* LOCK HELD ON ENTRY       */\n*          3  *         BIT(7),    /* RESERVED                 */\n*\n*        2  LCHRSV02    CHAR(2),   /* RESERVED         YM3157P */\n*        2  LCHTOTAL  FIXED(15),   /* TOTAL REQUESTS STARTED\n*                                     OR QUEUED                */\n*        2  LCHRSV03  CHAR(2),     /* RESERVED         YM3157P */\n*        2  LCHLGBSY  FIXED(15),   /* NUMBER OF RQSTS QUEUED\n*                                     BECAUSE LOGICALLY BUSY   */\n*        2  LCHPYBSY  FIXED(15),   /* NUMBER RQSTS QUEUED\n*                                     BECAUSE PHYSICALLY BUSY  */\n*        2  LCHEND    CHAR(0);     /* END OF LCH               */\n*   DCL LCHELP2 BIT(8) CONSTANT('05'X);  /*\n*                                     LCH ELEM LNGTH POWER OF 2*/\n*\n*%DCL  LCHEL  CHAR;                /* LENGTH OF TABLE          */\n*%LCHEL='ADDR(LCHEND)-ADDR(LCHENTRY)';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEEMBRDS": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x85\\x00\\x7f\\x00\\x85\\x00\\x7f \\x11\\x00#\\x00 \\x00\\x03\\xc5\\xd4\\xe2@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-01-07T00:00:00", "modifydate": "1985-01-07T20:11:00", "lines": 35, "newlines": 32, "modlines": 3, "user": "EMS"}, "text": "         MACRO\n         IEEMBRDS ,\nIEEMBRDS DSECT ,\nRDSID    DS    CL4                 CONTROL BLOCK ID\nRDSNEXT  DS    F                   FORWARD CHAIN POINTER\nRDSPREV  DS    F                   BACKWARD CHAIN POINTER\n*\nRDSFLG1  DS    X\nRDSFREE  EQU   X'10'               1 - NEED TO FREE DATASET\nRDSDUMP  EQU   X'08'               1 - OPER HAS BEEN TOLD TO\n*                                      DUMP DS\nRDSREADY EQU   X'04'               1 - DS IS OPEN AND READY\nRDSCLOSE EQU   X'02'               1 - DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'               1 - DS NEEDS TO BE OPENED\n*\nRDSFLG2  DS    X\nRDSLOST  EQU   X'80'               DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'               1 - PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'               1 - LOGICAL I/O ERROR\n*\nRDSFLG3  DS    X                   RESERVED\nRDSFLG4  DS    X                   RESERVED\nRDSNAME  DS    CL10                DATASET NAME\nRDSVOLID DS    CL6                 VOLUME SERIAL\nRDSDDN   DS    CL8                 DDNAME RETND BY DYNALLOC\nRDSCAPTY DS    F                   CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F                   NUMBER OF NEXT AVAIL BLOCK\nRDSBQE   DS    F                   ADDR OF BQE BEING WRITTEN\nRDSAVSPC DS    F                   AVAIL SPACE FROM SHOWCB\nRDSENRBA DS    F                   ENDRBA FROM SHOWCB\nRDSCINV  DS    F                   CONTROL INTERVAL SIZE\nRDSDOMID DS    F                   MSG # OF DUMP MSG\nRDSRPL   DS    CL76                VSAM RPL\nRDSACB   DS    CL76                VSAM ACB\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEERDCM@": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x80\\x15\\x0f\\x00\\x80\\x15\\x0f\\x15G\\x00b\\x00b\\x00\\x00\\xd4\\xe5\\xe2\\xf3K\\xf8@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-05-29T00:00:00", "modifydate": "1980-05-29T15:47:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "MVS3.8"}, "text": "         MACRO\n         IEERDCM\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*     01/15/73          LEVEL=05                              MB Y02958\nDCMTSRT  DSECT DCMTSPTR\nDCMADTRN DS    A                   POINTER TO PAGABLE DCM\n         DS    CL1                 RESERVED\nDCMRFLGS DS    BL1                 FLAGS\nDCMDOM   EQU   X'10'               DOM MUST BE TRIED\nDCMNIPP  EQU   X'08'               DCM WAS USED BY NIP\nDCMLEN   DS    H                   LENGTH OF PAGABLE DCM\nDCMADKP  DS    A                   ADDRESS OF ROUTED K COMMAND\n*                                   PARAMETER LIST\nDCMTOPAR DS    CL1                 TOP DISPLAY AREA DEFINED\nDCMTOPDS DS    CL1                 TOP DISPLAY ON SCREEN\n         DS    BL1                 RESERVED\nDCMDEVTY DS    BL1                 DEVICE TYPE FLAGS\nDCMTY60  EQU   X'80'               USABLE FOR SD\nDCMTY50  EQU   X'40'               NOT USABLE FOR SD\nDCMADSDS DS    A                   POINTER TO FIRST SDS SUPPORT AREA\nDCMRMS   DS    CL1                 NUMBER OF CCWS TO WRITE\nDCMADRMS DS    AL3                 POINTER TO RMS CCWS\nDCMWLAST DS    A                   PT CON Q ENTRY LAST OUT (O-O-L)\nDCMRMSAL DS    H                   NUMBER LINES IN MSG AREA\nDCMDOMKY DS    H                   CONSOLE DOM ELEMENT        MC XM5812\nDCMSUBAD DS    A                   POINTER TO SUB CONTROL BLOCK\nDCMADPFK DS    A                   POINTER TO RESIDENT PFK AREA\nDCMINTVL DS    H                   INTERVAL FOR THIS DCM\nDCMTMCTR DS    H                   TIME COUNTER FOR THIS DCM\nDCMR2FLG DS    BL1                 TIMER FLAGS\nDCMRXSFL EQU   X'80'               FULL SCREEN FLAG\nDCMRXUNV EQU   X'40'               UNVIEWABLE MESSAGE DISPLAYED\nDCMRXTMR EQU   X'20'               TIMER FLAG\nDCMRXRLL EQU   X'10'               READY TO ROLL\nDCMRXDEL EQU   X'08'               PENDING DELETE REQUEST\nDCMRXTIM EQU   X'02'               TIMER ELAPSED FOR THIS DISPLAY\nDCMR3FLG DS    BL1                 MISC FLAGS\nDCMSTSWT EQU   X'80'               CHANGING STATUS OF OUTPUT ONLY CON\nDCMKVIP  EQU   X'40'               ENTRY FOR K VARY COMMAND\nDCMCLPR  EQU   X'20'               CLOSE IN PROCESS\nDCMRXSCN EQU   X'10'               ASY ERROR MESSAGE ON SCREEN\nDCMR3PKA EQU   X'08'               DA I/O COMPLETE\nDCMRXHMT EQU   X'04'               FULL SCREEN SIMULATED      MC YM4102\n         DS    H                   RESERVED\nDCMRQDEL DS    A                   DELETE REQUEST BUFFER\n         DS    A                   DELETE REQUEST BUFFER\nDCMMSGSV DS    A                   POINTER TO SAVED NIP MESSAGES\nDCMPACB  EQU   *                   SACB PREFIX\nDCMPLN   DS    FL2                 SYSGEN LENGTH OF AREA\nDCMPLNPR DS    H                   LENGTH OF SACB PREFIX-IN BYTES\nDCMPRSZ  EQU   *-DCMPACB           SIZE OF PREFIX\nDCMACB   EQU   *                   SACB\nDCMACBNX DS    A                   POINTER TO NEXT SACB\nDCMAID   DS    CL1                 AREA ID\nDCMASACB DS    BL1                 SACB FLAGS\nDCMAUSE  EQU   X'80'               AREA PRESENTLY DEFINED     MB Y02958\n*    IF DCMAUSE IS OFF, A SYSGEND AREA HAS BEEN FREED E.G. K A,NONE\nDCMAGM   EQU   X'40'               GETMAINED SACB\nDCMALN   DS    FL2                 LENGTH OF AREA\nDCMATOP  DS    FL1                 TOP ROW OF AREA\nDCMACLR  EQU   *                   REINITIALIZED PORTION      MB Y02958\nDCMAROW  DS    FL1                 ROW TO BE WRITTEN NEXT\nDCMAFR   DS    H                   FRAME ON SCREEN\nDCMAMJWQ DS    A                   POINTER TO CON Q ENTRY FOR MAJOR\nDCMAMIN  DS    A                   POINTER TO MINOR WQE\nDCMATIME DS    F                   TIME CONTROL LINE WAS WRITTEN\nDCMAMT   DS    XL2                 RESERVED                   MB Y02958\nDCMAFLG1 DS    XL1                 AREA FLAGS1\nDCMADISP EQU   X'40'               DISPLAY IN AREA\nDCMADEND EQU   X'20'               END OF DISPLAY ON SCREEN\nDCMAFRPR EQU   X'10'               FRAMING IN PROGRESS\nDCMAFULL EQU   X'08'               FRAME FULL\nDCMABL   EQU   X'04'               BLANKING TO BE DONE\nDCMAFLG2 DS    XL1                 AREA FLAGS 2\nDCMALMIN EQU   X'80'               SAVED POINTER TO LAST MINOR OUTPUT\nDCMAWCON EQU   X'40'               WRITE CONTROL LINE\nDCMARCON EQU   X'20'               REWRITE CONTROL LINE\nDCMAMJFR EQU   X'10'               MAJOR WQE HAS BEEN FOUND\nDCMADFLG DS    XL1                 DYNAMIC DISPLAY FLAGS      MB Y02958\nDCMADD   EQU   X'80'               TRACK IN AREA              MB Y02958\nDCMAHOLD EQU   X'40'               TRACK IN HOLD MODE         MB Y02958\nDCMACSIB EQU   X'20'               TRACK WITH CONTINUATION LINE IN     *\n                                   SCREEN IMAGE BUFFER        MB Y02958\nDCMATRCK DS    X                   TRACK REQUEST INDICATORS   MB Y02958\nDCMATJOB EQU   X'80'               TRACK JOBS                 MB Y02958\nDCMATJBL EQU   X'40'               TRACK JOBS,LIST            MB Y02958\nDCMATTS  EQU   X'08'               TRACK TS                   MB Y02958\nDCMATTSL EQU   X'04'               TRACK TS,LIST              MB Y02958\nDCMATA   EQU   X'88'               TRACK A                    MB Y02958\nDCMATAL  EQU   X'44'               TRACK A,LIST               MB Y02958\nDCMAUTME DS    XL2                 UTME=NNN VALUE             MB Y02958\nDCMATECB DS    F                   TRACK CANCEL ECB ADDRESS   MB Y02958\nDCMAPAD  DS    F                   RESERVED                   MB Y02958\nDCMACBND EQU   *                   SACB END\nDCMCLRLN EQU   *-DCMACLR           LENGTH FOR REINITIALIZING  MB Y02958\nDCMACBSZ EQU   *-DCMACB            SACB SIZE\nDCMREND  DS    0C                  END OF DCM\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEETDCM": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*       %GOTO DCMPROLG;            /*                        @G811PSS\n        MACRO\n        IEETDCM\n        SPACE 1                                              @G811PSS*/\n*%DCMPROLG:;                       /*                        @G811PSS*/\n*/********************************************************************/\n*/*                                                          @G811PSS*/\n*/*                      IEETDCM                             @G811PSS*/\n*/*                                                          @G811PSS*/\n*/*        PAGEABLE DISPLAY CONTROL MODULE MAPPING MACRO     @G811PSS*/\n*/*                                                          @G811PSS*/\n*/* COPYRIGHT  -                                                 @L3C*/\n*/*                   5740-XC6 RESTRICTED MATERIALS OF IBM           */\n*/*                   (C) COPYRIGHT IBM CORP. 1980, 1986             */\n*/*                   LICENSED MATERIALS - PROPERTY OF IBM           */\n*/*                   REFER TO COPYRIGHT INSTRUCTIONS                */\n*/*                   FORM NUMBER G120-2083                          */\n*/*                                                                  */\n*/* STATUS     - OS/VS2 JBB2220                                  @L3C*/\n*/*                                                          @G811PSS*/\n*/* INVOCATION - SPECIFY FOR BAL: IEETDCM                    @G811PSS*/\n*/*                      FOR PLS: %INCLUDE SYSLIB(IEETDCM)   @G811PSS*/\n*/*                                                          @G811PSS*/\n*/* FUNCTION   - THIS MACRO MAPS THE PAGEABLE DISPLAY        @G811PSS*/\n*/*              CONTROL MODULE (TDCM).                      @G811PSS*/\n*/*                                                          @G811PSS*/\n*/* CREATED-BY    = IEECVFTU                                     @L3C*/\n*/*                                                              @L2A*/\n*/* POINTED-TO-BY = DCMADTRN IN RDCM                             @L2A*/\n*/*                                                              @L2A*/\n*/* SERIALIZATION = LOCAL AND CMS LOCKS                          @L2A*/\n*/*                                                              @L2A*/\n*/* LOCATION      =                                              @L2A*/\n*/*           MAIN STORAGE = SUBPOOL 229 KEY 0 IN COMM TASK ASID @L2A*/\n*/*           AUXILIARY STORAGE = N/A                            @L2A*/\n*/*                                                              @L2A*/\n*/* CHANGE                                                   @G811PSS*/\n*/*   ACTIVITY - G811PSS,ZA44483                             @G811PSS*/\n*/* $L1=CONCOLOR, JBB1326,  801205,  PDSS: BASE COLOR SUPPORT        */\n*/*              G860P2G - ADD BACKWARD POINTER TO RDCM,     @G860P2G*/\n*/*                        DROP 3066 SUPPORT                 @G860P2G*/\n*/*              G860PSS - EXTENDED COLOR SUPPORT            @G860PSS*/\n*/* $L2=OCCF,     JBB2110,  820531,  PDSJ: ROUTABLE K S              */\n*/* $D1=DCR43,    JBB2125,  821225,  PDSS: 3290 SUPPORT              */\n*/*              ZA66980                                             */\n*/* $L3=COEXDIDO, JBB2220,  840229,  PDE8: JES3/MCS COEXISTENCE      */\n*/* $L4=COEXPFK,  JBB2220,  850101,  PDFB: JES3/MCS COEXISTENCE      */\n*/* $L5=COEXKS,   JBB2220,  850130,  PDS7: JES3/MCS COEXISTENCE      */\n*/* $P1=PA20369,  JBB2220,  850815,  PDFI: REMOVE THE GARBAGE FROM   */\n*/*                                        THE SIB                   */\n*/*                                                          @G811PSS*/\n*/********************************************************************/\n*        %GOTO DCMPBSL;                                              /*\n.*                                                             @G860P2G\n.* D (DCMIRCTR,DCMMSGDM,DCMMSGIR,DCMMSGWR,DCMDSINR)                @L1A\n.* A (DCMMSGR1,DCMMSGR2,DCMMSGUA,DCMMSGEA)                         @L1A\n.* A (DCMTVERN, DCMTSP21, DCMTRDCM)                            @G860P2G\n.* A (DCMNXTOR,DCMCROW,DCMCCOL,DCMORDER,DCMAEORD,DCMSCRW)      @G860PSS\n.* A (DCMMSGOR)  DEFINE WTOR BIT                               @ZA66980\n.* A (DCMDELFC,DCMSEGFC,DCMCONFC,DCMRNUMF,DCMRTMEF,DCMMFRMF)       @L2A\n.* A (DCMDELMS,DCMSEGMS,DCMCONMS,DCMRNUMM,DCMRTMEM,DCMMFRMM)       @L2A\n.* D (DCMMODAD)                                                    @D1A\n.* C (DCMTLEN)                                                     @D1A\n.* A (DCMISRPQ,DCMRDRPQ,DCMRETIO,DCMSWAPT,DCMQAPTR,DCMQULEN)       @D1A\n.* A (DCMLENTY)                                                    @D1A\n.* D (DCMELGN,DCMRPCUR)                                            @D1A\n.* A (DCMSAO)                                                      @D1A\n.* C (DCMORDER) CHANGED IN PL/S TO BE BASED                        @L3A\n.* C (DCMSCTA,DCMSCTC) SCT TO 4 BYTES, SSCT TO 2 BYTES             @L3A\n.* A (DCMSCTA ) DSECT TO MAP SCT ENTRY                             @L3A\n.* A (DCMSCTC ) DSECT TO MAP SSCT ENTRY                            @L3A\n.* A (DCMDOMEN) DSECT TO MAP DOM INFORMATION                       @L3A\n.* A (DCMSSCTL) LENGTH OF AN SSCT                                  @L3A\n.* A (DCMBUFER) WORK AREA TO BE USED ON A MODULE-BY-MODULE BASIS   @L3A\n.*              ONLY                                               @L3A\n.* D (DCMPFKWR)                                                    @L4A\n.* A (DCMNPFKT , DCMTABND , DCMKRPIP)                              @L4A\n.* A (DCMMFRMF, DCMMFRMM) K S,MFORM=(M,T,J,S) SUPPORT              @L5A\n.*                                                             @G860P2G\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WORK AND SAVE AREAS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSTRT  DSECT DCMSTPTR\nDCMOACRO DS    CL4                 CNTL BLK ACRONYM 'TDCM'         @D1C\n         SPACE 1                                               @G811PSS\nDCMFLG1  DS    BL1                 TDCM AREA INDICATORS\nDCMOUTPT EQU   X'02'               TDCM UPDATED FOR OUTPUT ONLY\n         SPACE 1                                               @G811PSS\nDCMATI   DS    XL1                 SAVED UCB ATTN INDEX        @G811PSS\n         DS    AL2                 RESERVED                    @G811PSS\n         SPACE 1                                               @G811PSS\nDCMWTINT DS    A                   DCMWTINT INITIAL VALUE\nDCMLNCNT DS    H                   NUMBER OF LINES TO BLANK  MC SA53462\nDCMLNNUM DS    XL1                 FIRST LINE TO BLANK         @G811PSS\n         DS    XL1                 RESERVED                    @G811PSS\nDCMPACK  DS    F                   AREA TO PLACE NUMBER FOR PACKING\nDCMCVBIN DS    F                   AREA FOR CONVERSION TO BINARY\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        TIMER COMMUNICATION FIELD                             @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMTIMES DS    BL1                 TIME RTNS INDICATOR BYTE\nDCMTIMER EQU   X'80'               TIME ELAPSED FOR THIS DISPLAY\nDCMOPTTI EQU   X'40'               OPTIONS TO TI RTN\nDCMOTTMM EQU   X'10'               OPTIONS OR TI RTNS TO MSG MODULE\nDCMTASYN EQU   X'04'               TIMER SET FOR ASYNC ERROR MSG\nDCMOCTTI EQU   X'02'               OPEN-CLOSE TO TI RTN\nDCMRMTTI EQU   X'01'               ROLL MODE TO TIMER ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONTROL BLOCK VERSION IDENTIFICATION                  @G860P2G\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G860P2G\nDCMTVERN DS    AL1                 CONTROL BLOCK VERSION       @G860P2G\nDCMTSP21 EQU   1                   OS/VS2 HBB2102 LEVEL        @G860PSS\nDCMTS212 EQU   2                   OS/VS2 JBB2125 LEVEL            @D1A\nDCMTS220 EQU   3                   OS/VS2 JBB2220 LEVEL            @L3A\n         SPACE 1                                               @G811PSS\n         DS    H                   RESERVED                        @D1C\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        ADDRESS TABLE                                         @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\n         DS    A                   RESERVED                        @L3C\nDCMDOMPK DS    A                   ADDRESS OF FIRST DOM NUMBER\nDCMAMTAB DS    A                   ADDRESS OF FIRST SCT ENTRY\nDCMADSEC DS    A                   ADDRESS OF FIRST SSCT ENTRY\nDCMADDRL DS    A                   ADDRESS OF LAST SCT ENTRY\nDCMASCRN DS    A                   POINTER TO SCREEN IMAGE BUFFER\nDCMLSCRN DS    A                   POINTER TO LAST BUFFER LINE\nDCMWTBUF DS    A                   SCREEN LENGTH POINTER\nDCMAINS  DS    A                   POINTER TO INSTRUCTION LINE\nDCMAENTR DS    A                   POINTER TO ENTRY AREA\nDCMAWARN DS    A                   POINTER TO WARNING LINE\nDCMADCHP DS    A                   ADDRESS OF CHANNEL PROGRAM AREA\nDCMPFKLN DS    A                   POINTER TO PFK LINE\n         SPACE 1                                               @G811PSS\nDCMCXSVE DS    F                   CXSA SAVE AREA\nDCMADOPN DS    A                   ADDRESS OF COMMAND OPERAND\n         SPACE 1                                               @G811PSS\nDCMDSAV  DS    5F                  SAVE AND WORK AREA\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35                   *\n*        FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER        *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMWQEXP DS    0F                  ENSURE FULL WORD BOUNDARY\nDCMINLGN DS    H                   FIELD FOR INPUT LENGTH\nDCMMCSFL DS    H                   MCS FLAGS FIELD\nDCMINPUT DS    CL128               INPUT MESSAGE TEXT              @L4C\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        GENERAL LENGTH VALUES                                 @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMLGNTH DS    H                   LENGTH OF A LINE\nDCMBAINC DS    H                   ADDRESS TO INSERT CURSOR\nDCMSSCTL DS    H                   LENGTH OF ONE SSCT ENTRY        @L3C\nDCMBADLN DS    H                   BUFFER ADDR TO BEGIN MSG WRITE\nDCMBYTCT DS    H                   NUMBER OF BYTES TO WRITE\nDCMADNUM DS    H                   NEXT LINE NUMBER\nDCMAXLGN DS    H                   MAXIMUM LINE LENGTH\nDCMMSGAL DS    H                   NUMBER OF LINES IN MESSAGE AREA\nDCMRMINC DS    H                   INCREMENT INTO RMI\nDCMSCTCN DS    H                   LENGTH OF ONE SCT ENTRY\nDCMCORLN DS    H                   LENGTH OF TDCM LINE IN CORE\n         DS    H                   TIME COUNTER\nDCMPFKNM DS    XL1                 NUMBER OF KEY BEING PROCESSED\nDCMPFKKN DS    XL1                 LIST KEY NUMBER\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        VALUES FOR OPTIONS                                    @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMDEL   DS    CL2                 DEL VALUE\nDCMCON   DS    CL1                 CON VALUE\nDCMSEG   DS    FL1                 SEG VALUE\nDCMDL    DS    FL1                 DISPLAY AREA OPTION\nDCMRNUM  DS    FL1                 ROLL NUMBER VALUE\nDCMRTME  DS    H                   ROLL TIME VALUE\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        DEFAULT VALUES FOR OPTIONS                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSEGDF DS    FL1                 SEG DEFAULT\nDCMRNUMD DS    FL1                 RNUM DEFAULT\nDCMRTMED DS    H                   RTME DEFAULT\n         SPACE 1                                               @G811PSS\n         DS    XL5                 RESERVED                    @G811PSS\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        COMMUNICATIONS AREAS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMOPTST DS    BL1                 STATUS OF SCREEN CONTROL OPTIONS\nDCMOPTVR EQU   X'80'               DELETE VERIFICATION  CON=(Y=1,N=0)\nDCMOPTAD EQU   X'40'               AUTOMATIC DELETION   DEL=(Y=1,N=0)\nDCMOPTSG EQU   X'20'               DEFAULT SEGMENT SPECIFIED  SEG=(0=0)\nDCMOPRLL EQU   X'10'               ROLL MODE  (Y=1,N=0)\n         SPACE 1                                               @G811PSS\nDCMCS    DS    BL1                 OPEN/CLOSE REQUEST\nDCMCSC   EQU   X'80'               CLOSE REQUEST\nDCMCSO   EQU   X'40'               OPEN REQUEST\nDCMISRPQ EQU   X'20'               ISSUE READ PARTITION QUERY      @D1A\nDCMRDRPQ EQU   X'10'               READ RESULT OF READ PARTITION QUERY X\n                                                                   @D1A\nDCMRETIO EQU   X'08'               RETURN TO I/O ROUTINE           @D1A\nDCMSWAPT EQU   X'04'               TDCM SWAP IS NEEDED             @D1A\n         SPACE 1                                               @G811PSS\nDCMUTILT DS    BL1                 INTERNAL FLAGS              @G811PSS\nDCMUTILA EQU   X'80'               THESE BITS ARE\nDCMUTILB EQU   X'40'                 INITIALIZED AND USED\nDCMUTILC EQU   X'20'                 SOLELY WITHIN\nDCMUTILD EQU   X'10'                 EACH MODULE\nDCMUTILE EQU   X'08'               THEY ARE NEVER\nDCMUTILF EQU   X'04'               USED FOR INTERFACE\nDCMTEST1 EQU   X'02'               FOR TESTING\nDCMTEST2 EQU   X'01'               FOR TESTING\n         SPACE 1                                               @G811PSS\nDCMDSTAT DS    BL1                 CURRENT DISPLAY STATUS\nDCMDSTNM EQU   X'20'               MESSAGES ARE NUMBERED\nDCMDSTNH EQU   X'10'               MSGS NUMBERED - HOLD OPTION\n.* X'08' WAS DCMDSINR - INTERVENTION REQ'D DELETION TRIED          @L1A\nDCMDSAUT EQU   X'04'               AUTOMATIC DELETION TRIED\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        MCS INTERFACE FIELD                                   @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMMCSST DS    BL1                 MCS INTERFACE BYTE\nDCMDUSE  EQU   X'80'               DIDOCS IN CONTROL           @G811PSS\nDCMOOMSS EQU   X'04'               MESSAGE STREAM ENTRY\nDCMOOSDS EQU   X'01'               STATUS DISPLAY ENTRY\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        UNIQUE INTERFACE FIELD                                @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMIOUNQ DS    BL1                 UNIQUE IO BYTE\n.* DCMIO226 EQU   X'80' RMI PERFORMED - DELETED FOR -------------> @L3C\n.* DCMRPCUR EQU   X'40' ADVANCE CURSOR TO BLANKS - DELETED FOR --> @D1C\nDCMFRSCN EQU   X'20'               PUT OUTPUT IN HOLD MODE\nDCMRDARM EQU   X'10'               PERFORM READ AFTER RMI\nDCMW2250 EQU   X'08'               DEVICE HAS LIGHT PEN        @G811PSS\nDCMINNOR EQU   X'04'               NORMAL INSTRUCTION LINE\nDCMINERR EQU   X'02'               ERROR INSTRUCTION LINE\nDCMEWASP EQU   X'01'               ERASE/WRITE ALTERNATE COMMAND       X\n                                   SUPPORTED                   @G811PSS\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        I/O COMMUNICATION FIELDS                              @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMIOCM1 DS    BL1                 IO COMMUNICATIONS BYTE 1\nDCMDORMI EQU   X'80'               ISSUE RMI\nDCMSOUND EQU   X'40'               SOUND ALARM\nDCMWRWRN EQU   X'20'               WRITE WARNING LINE\nDCMWRMSG EQU   X'10'               WRITE FULL MESSAGE AREA\nDCMWRPAR EQU   X'08'               WRITE PARTIAL MESSAGE AREA\nDCMWRINS EQU   X'04'               WRITE INSTRUCTION LINE\nDCMWRENT EQU   X'02'               WRITE ENTRY AREA\nDCMINSC  EQU   X'01'               INSERT CURSOR\n         SPACE 1                                               @G811PSS\nDCMIOCM2 DS    BL1                 IO COMMUNICATIONS BYTE 2\nDCMBLENT EQU   X'80'               BLANK ENTRY AREA\nDCMBLWRL EQU   X'40'               BLANK LEFT HALF WARNING LINE\nDCMBLWRR EQU   X'20'               BLANK RIGHT HALF WARNING LINE\nDCMINSSH EQU   X'10'               INIT AND SHIFT INSTRUCTION LINE\nDCMWINFD EQU   X'08'               WRITE INFORMATIONAL DISPLAY\nDCMERASE EQU   X'04'               PERFORM ERASE\nDCMIOCRD EQU   X'02'               PERFORM READ                    @L3C\nDCMWRASY EQU   X'01'               WRITE ASYNC ERROR MSG TO MID-SCREEN\n         SPACE 1                                               @G811PSS\nDCMIOCM3 DS    BL1                 IO COMMUNICATIONS BYTE 3\nDCMOPRMI EQU   X'80'               RMI AFTER OPEN TO UNLOCK KEYBOARD\nDCMSSRG  EQU   X'40'               SUPPRESS START REGENERATION\nDCMEWAND EQU   X'20'               ERASE/WRITE ALTERNATE COMMAND       X\n                                   NEEDED                      @G811PSS\nDCMWRPFK EQU   X'10'               TDCM WRITE PFK AREA\nDCMPFKAT EQU   X'08'               PFK ATTENTION\nDCMRDPFK EQU   X'04'               PFK AREA READ\n*        EQU   X'02'               RESERVED WAS DCMACPFK           @L3C\n*        EQU   X'01'               RESERVED WAS DCMLTPFK           @L3C\n         SPACE 1                                               @G811PSS\nDCMLINEN DS    XL1                 LINE NUMBER TO BEGIN WRITE\nDCMCULNO DS    XL1                 LINE IN ENTRY AREA TO INSERT CURSOR\nDCMPOSCU DS    XL1                 POSITION TO INSERT CURSOR\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        ASYNCHRONOUS ERROR COMMUNICATIONS FIELD               @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMASYNC DS    BL1                 ASYN ERROR COMMUNICATIONS/RETRY BYTE\nDCMASDA  EQU   X'40'               DATA CHECK RETRY BIT        @G811PSS\nDCMASIN  EQU   X'20'               INVALID BUFFER ADDR CHECK RETRY BIT X\n                                                               @G811PSS\nDCMASBA  EQU   X'10'               BUFFER ADDR PARITY CHECK RETRY BIT  X\n                                                               @G811PSS\nDCMASEWA EQU   X'08'               PERMANENT ERROR ON EWA DEVICE       X\n                                   RETRIED                     @G811PSS\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        COMMUNICATION FIELDS                                  @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMCOM1  DS    BL1                 COMMUNICATIONS BYTE\nDCMLPENT EQU   X'80'               ENTER BY LP OR CURSOR\nDCMIOPRD EQU   X'40'               READ PERFORMED\nDCMCOMRM EQU   X'20'               RMI PERFORMED\nDCMCOMAU EQU   X'10'               PERFORM AUTO DELETE\nDCMCOMRD EQU   X'08'               PERFORM REGULAR DELETE\nDCMCOMNM EQU   X'04'               NUMBER MESSAGES\nDCMCLEAR EQU   X'02'               CLEAR KEY WAS PRESSED       @G811PSS\nDCMCANCL EQU   X'01'               INDICATE CANCEL TO COMMAND ROUTINE\n         SPACE 1                                               @G811PSS\nDCMCOM2  DS    BL1                 COMMUNICATIONS BYTE\nDCMCM2I  EQU   X'80'               INPUT TO BE PROCESSED\nDCMSPLIT EQU   X'40'               MSG TO BE SPLIT\nDCMCOMAR EQU   X'20'               ACCEPTED REPLY\nDCMREPLC EQU   X'10'               REPEAT LAST COMMAND KEY (PA1)       X\n                                   PRESSED                     @G811PSS\nDCMERPF  EQU   X'08'               ERASE PERF-PROC CAN NOW CLOSE DEVICE\nDCMCMIN5 EQU   X'04'               RETURN TO INTER. 5 FOR BLNK\nDCMCBLNK EQU   X'02'               BLANKING REQUIRED\nDCMAE    EQU   X'01'               CLEANUP FOR ASY ERROR\n         SPACE 1                                               @G811PSS\nDCMCOM3  DS    BL1                 COMMUNICATIONS BYTE\nDCMCDSP3 EQU   X'80'               DISPLAY 3 COMPLETED WORK\nDCMRTPFK EQU   X'40'               RETURN TO PFK ROUTINE\nDCMVLPFK EQU   X'20'               VERIFYING LAST COMMAND\nDCMXINT1 EQU   X'10'               ENTRY FOR INTERFACE 1 ROUTINE\nDCMOLUNV EQU   X'08'               O-O-L MSG CAUSED UNVIEW. MSG.\nDCMOLHLD EQU   X'02'               OUT OF LINE MESSAGES HELD  MB Y02958\nDCMCMIN7 EQU   X'01'               RETURN TO INTER. 7 FOR BLANKING\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        MESSAGE MODULES COMMUNICATION FIELDS                  @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMCMSG1 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 1\nDCMMSGWT EQU   X'80'               MOVE IN MESSAGE WAITING\nDCMUNMSG EQU   X'40'               MOVE IN UNVIEWABLE MESSAGE\nDCMSTEX  EQU   X'20'               MOVE IN STATUS EXISTS\nDCMCHOPT EQU   X'10'               MOVE IN CHANGE OPTIONS\nDCMELONG EQU   X'08'               MOVE IN ENTRY TOO LONG\nDCMWRCDL EQU   X'04'               MOVE IN CON=N,DEL=Y\nDCMDELNT EQU   X'02'               MOVE IN DEL UNCHANGED, NO TIMER\n         SPACE 1                                               @G811PSS\nDCMCMSG2 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 2\nDCMDLREQ EQU   X'80'               MOVE IN DELETION REQUESTED\nDCMRQINC EQU   X'40'               MOVE IN REQUEST INCONSISTENT\nDCMMSGCR EQU   X'20'               MOVE IN INVALID CURSOR OPERATION\nDCMINVOP EQU   X'10'               MOVE IN INVALID OPERAND\nDCMCILLP EQU   X'08'               MOVE IN ILLEGAL LP OPERATION\nDCMDELRI EQU   X'04'               MOVE IN DELETE REQUEST INCONSISTENT\nDCMASYRT EQU   X'02'               MOVE IN ASYN ERROR RETRYABLE\nDCMASYCD EQU   X'01'               MOVE IN ASYN ERROR MAYBE RETRYABLE\n         SPACE 1                                               @G811PSS\nDCMCMSG3 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 3\nDCMCMRLL EQU   X'80'               MOVE IN ROLL MODE MESSAGE\nDCMCDLR1 EQU   X'40'               NO DELETABLE MESSAGES\nDCMCDLR2 EQU   X'20'               INVALID RANGE\nDCMCDLR3 EQU   X'10'               SEG EQU TO ZERO\nDCMCDLR4 EQU   X'08'               DISPLAY NOT ON SCREEN\nDCMCDLR5 EQU   X'04'               INVALID OPERAND\nDCMDTBSY EQU   X'01'               COMMAND REJECTED - TASK BUSY\n         SPACE 1                                               @G811PSS\nDCMCMSG4 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 4\nDCMPFKNA EQU   X'80'               MOVE IN PFK NOT ALLOCATED FOR\nDCMPFKND EQU   X'40'               MOVE IN PFK NOT DEFINED\nDCMPFKNO EQU   X'20'               MOVE IN NO PFK ALLOCATION\nDCMPFKIP EQU   X'10'               MOVE IN PFK IN PROCESS\nDCMNPFKT EQU   X'08'               MOVE IN NO PFK TABLES           @L4A\nDCMTABND EQU   X'04'               MOVE IN PFK TABLE NOT DEFINED   @L4A\nDCMKRPIP EQU   X'02'               MOVE IN K REQUEST INCONSISTENT -PFK X\n                                   IN USE                          @L4A\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        SVC 34 COMMUNICATIONS FIELD                           @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSVC34 DS    BL1                 SVC 34 COMMUNICATION BYTE\nDCMMYCMD EQU   X'80'               COMMAND TO BE HANDLED BY THIS CONS\nDCMINVLD EQU   X'40'               INVALID K COMMAND\nDCMTYPE1 EQU   X'20'               K COMMAND IS NOT ROUTABLE\n         SPACE 1                                               @G811PSS\nDCMCOM4  DS    BL1                 COMMUNICATION BYTE 4        @ZA44483\nDCMCNTRL EQU   X'80'               CONTROL LINE INDICATOR      @ZA44483\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        INDEX FOR I/O ROUTINE                                 @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMIONDX DS    XL1                 INDEX FOR SELECTING THE    MB Y02958\n*                                  APPROPRIATE I/O ROUTINE    MB Y02958\n*                                  X'04' - RESERVED            @G860P2G\n*                                  X'08' - RESERVED                @L3C\n*                                  X'0C' - RESERVED                @D1C\n*                                  X'10' - 3270 TYPE DEVICE -      @D1C\n*                                               IEECVETU       @G811PSS\n         SPACE 1                                               @G811PSS\nDCMTEST  DS    H                   RESERVED FOR TESTING       MB Y02958\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MODULE ADDRESSES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                              MB Y02958\nDCMADMOD DS    0CL(30*4)           STRUCTURE OF MODULE ADDRESSES. 30   X\n                                   IS NUMBER OF MODULE ADDRESSES AND 4 X\n                                   IS LENGTH OF EACH FIELD         @D1A\nDCMIORTN DS    F                   APPROPRIATE I/O ROUTINE    MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\n*                 IEECVETU    EU   3270 TYPE DEVICE IO ROUTINE     @D1C\n         SPACE 1                                              MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\nDCMNMODS EQU   *                   MODULE ADDRESSES                @L4A\n         DS    F                   RESERVED                        @L4C\nDCMNPROC DS    F  IEECVET1    E1   PROCESSOR ROUTINE LOAD ONE MB Y02958\nDCMNDSP1 DS    F  IEECVET2    E2   DISPLAY ROUTINE 1          MB Y02958\nDCMNDSP2 DS    F  IEECVET3    E3   DISPLAY ROUTINE 2          MB Y02958\nDCMNDSP3 DS    F  IEECVFT2    F2   DISPLAY ROUTINE 3          MB Y02958\nDCMNCMD1 DS    F  IEECVET4    E4   COMMAND ROUTINE 1          MB Y02958\nDCMNDEL1 DS    F  IEECVET6    E6   DELETE ROUTINE 1           MB Y02958\nDCMNDEL2 DS    F  IEECVET7    E7   DELETE ROUTINE 2           MB Y02958\nDCMNDEL3 DS    F  IEECVET8    E8   DELETE ROUTINE 3           MB Y02958\nDCMNDEL4 DS    F  IEECVET9    E9   DELETE ROUTINE 4           MB Y02958\nDCMNOPT1 DS    F  IEECVETA    EA   OPTIONS ROUTINE 1          MB Y02958\nDCMNPFK1 DS    F  IEECVFTA    FA   PFK ROUTINE 1              MB Y02958\nDCMNPFK2 DS    F  IEECVFTB    FB   PFK ROUTINE 2              MB Y02958\nDCMNERRO DS    F  IEECVETC    EC   ASYNCHRONOUS ERROR ROUTINE MB Y02958\nDCMNMSG1 DS    F  IEECVETD    ED   MESSAGE ROUTINE 1          MB Y02958\nDCMNMSG2 DS    F  IEECVETE    EE   MESSAGE ROUTINE 2          MB Y02958\nDCMNMSG3 DS    F  IEECVFTD    FD   MESSAGE ROUTINE 3          MB Y02958\nDCMNLPCR DS    F  IEECVETF    EF   LIGHT PEN/CURSOR SERVICE   MB Y02958\nDCMNOPCL DS    F  IEECVETG    EG   OPEN-CLOSE ROUTINE         MB Y02958\nDCMNCLN  DS    F  IEECVFTG    FG   CLEANUP MODULE             MB Y02958\nDCMNROLL DS    F  IEECVETJ    EJ   ROLL MODE ROUTINE          MB Y02958\nDCMNTIMR DS    F  IEECVETK    EK   TIMER INTERPRETER ROUTINE  MB Y02958\nDCMNINT1 DS    F  IEECVFTL    FL   INTERFACE 1 ROUTINE        MB Y02958\nDCMNINT2 DS    F  IEECVFTM    FM   INTERFACE 2 ROUTINE        MB Y02958\nDCMNINT3 DS    F  IEECVFTN    FN   INTERFACE 3 ROUTINE        MB Y02958\nDCMNINT4 DS    F  IEECVFTO    FO   INTERFACE 4 ROUTINE        MB Y02958\nDCMNINT5 DS    F  IEECVFTP    FP   INTERFACE 5 ROUTINE        MB Y02958\nDCMNINT6 DS    F  IEECVFTQ    FQ   INTERFACE 6 ROUTINE        MB Y02958\nDCMNINT7 DS    F  IEECVFTT    FT   INTERFACE 7 ROUTINE        MB Y02958\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        DIDOCS MODULE TRACE AREA                              @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMTRACE DS    CL30                DIDOCS MODULE TRACE AREA   MB Y02958\nDCMTRAC2 EQU   DCMTRACE+2          TRACE MOVE FROM-ADDRESS    MB Y02958\nDCMTRLEN EQU   *-DCMTRACE          LENGTH FOR TRACE MOVE      MB Y02958\nDCMTREN1 DS    C                   1ST BYTE OF TRACE ENTRY    MB Y02958\nDCMTREN2 DS    C                   2ND BYTE OF TRACE ENTRY    MB Y02958\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        FOLLOWING GROUP OF BYTES ARE DEVICE DEPENDENT         @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMASKEN DS    XL1                 ENTER MASK\nDCMASKCN DS    XL1                 CANCEL MASK\nDCMASKCR DS    XL1                 CURSOR MASK\nDCMASKLP DS    XL1                 LIGHT PEN MASK\nDCMSKPF1 DS    XL1                 1ST PFK TYPE MASK           @G811PSS\nDCMSKPF2 DS    XL1                 2ND PFK TYPE MASK           @G811PSS\nDCMSKPF3 DS    XL1                 3RD PFK TYPE MASK           @G811PSS\nDCMSKPF4 DS    XL1                 4TH PFK TYPE MASK           @G811PSS\nDCMASKCL DS    XL1                 CLEAR KEY MASK              @G811PSS\nDCMSKPA1 DS    XL1                 PA1 KEY MASK                @G811PSS\nDCMSKPA3 DS    XL1                 PA3 KEY MASK                @G811PSS\n         DS    5XL1                RESERVED                    @G811PSS\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER WHEN IN @G811PSS\n*        FULL CAPABILITY MODE                                  @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSADCN EQU   *                  FIRST ADCON IN LIST          @G811PSS\nDCMFLLA  DS    A                  LAST LINE IN MSG AREA        @G811PSS\nDCMFLL1A DS    A                  LAST LINE IN MSG AREA + 1    @G811PSS\nDCMFLSCT DS    A                  SCT FOR LAST LINE IN MSG             X\n                                  AREA                         @G811PSS\nDCMFSCT1 DS    A                  SCT FOR LAST LINE IN MSG AREA + 1    X\n                                                               @G811PSS\nDCMFSSCT DS    A                  SSCT FOR LAST LINE IN MSG AREA + 1   X\n                                                               @G811PSS\nDCMFENT2 DS    A                  2ND LINE OF ENTRY AREA       @G811PSS\n         DS    6A                 RESERVED                     @G811PSS\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER WHEN IN @G811PSS\n*        MESSAGE STREAM MODE                                   @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMMLLA  DS    A                  LAST LINE MSG AREA           @G811PSS\nDCMMLL1A DS    A                  LAST LINE IN MSG AREA + 1    @G811PSS\nDCMMLSCT DS    A                  SCT FOR LAST LINE IN MSG             X\n                                  AREA                         @G811PSS\nDCMMSCT1 DS    A                  SCT FOR LAST LINE IN MSG AREA + 1    X\n                                                               @G811PSS\nDCMMSSCT DS    A                  SSCT FOR LAST LINE IN MSG AREA + 1   X\n                                                               @G811PSS\n         DS    2A                 RESERVED                     @G811PSS\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER WHEN IN @G811PSS\n*        STATUS DISPLAY MODE                                   @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMDLLA  DS    A                  LAST LINE IN MSG AREA        @G811PSS\nDCMDLL1A DS    A                  LAST LINE IN MSG AREA + 1    @G811PSS\nDCMDLSCT DS    A                  SCT FOR LAST LINE IN MSG             X\n                                  AREA                         @G811PSS\nDCMDSCT1 DS    A                  SCT FOR LAST LINE IN MSG AREA + 1    X\n                                                               @G811PSS\nDCMDSSCT DS    A                  SSCT FOR LAST LINE IN MSG AREA + 1   X\n                                                               @G811PSS\n         DS    2A                 RESERVED                         @L1A\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        ADDRESSES TO BE RESOLVED DURING OPEN                      @L1A\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMLSSCT DS    A                  ADDRESS OF THE LAST SSCT         @L1A\nDCMAEORD DS    A                  ADDR OF ADJUNCT EXTENDED ORDERS      X\n                                                               @G860PSS\nDCMQAPTR DS    A                  ADDR OF DATA OBTAINED FROM READ      X\n                                  PARTITION QUERY                  @D1A\n         DS    6A                 RESERVED                         @D1A\nDCMLADCN EQU   *                  LAST ADCON IN LIST               @L1A\n         DS    A                  RESERVED                         @L1A\n         EJECT                                                 @G811PSS\n***********************************************************************\n*                                                                     *\n*        NUMBER OF LINES IN MESSAGE AREA AND ENTRY AREA VALUES @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMFNLMA DS    FL1                 MAX NUMBER LINES IN MSG AREA WHEN   X\n                                   IN FULL CAPABILITY MODE     @G811PSS\nDCMMNLMA DS    FL1                 MAX NUMBER LINES IN MSG AREA WHEN   X\n                                   IN MESSAGE STREAM MODE      @G811PSS\nDCMDNLMA DS    FL1                 MAX NUMBER LINES IN MSG AREA WHEN   X\n                                   IN STATUS DISPLAY MODE      @G811PSS\nDCMENTL1 DS    FL1                 LINE NUMBER -1 OF 1ST LINE IN ENTRY X\n                                   AREA                        @G811PSS\nDCMENTL2 DS    FL1                 LINE NUMBER -1 OF 2ND LINE IN ENTRY X\n                                   AREA                        @G811PSS\nDCMINLNM DS    FL1                 LINE NUMBER-1 OF INSTR LINE @G860PSS\n         DS    FL2                 RESERVED                    @G860PSS\nDCMFENRC DS    XL2                 ADDR OF 2ND LINE IN ENTRY AREA IN   X\n                                   ROW-COLUMN FORMAT           @G811PSS\nDCMENTPO DS    H                   OFFSET OF 1ST CHAR IN ENTRY AREA    X\n                                                               @G811PSS\nDCMSCRW  DS    H                   WIDTH OF SCREEN             @G860PSS\nDCMLENTY DS    H                   LENGTH OF ENTRY AREA            @D1C\n         DS    1F                  RESERVED                    @G860PSS\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        COMMAND BUFFER AREA FOR THE LAST COMMAND ENTERED      @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMCBUFA DS    CL128               COMMAND BUFFER AREA FOR LAST COMMANDX\n                                   ENTERED                     @G811PSS\n         EJECT ,                                                   @L2M\n***********************************************************************\n*                                                                     *\n*        SAVE AREAS                                            @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMTLEN  DS    H                   TDCM LENGTH                     @D1A\n         DS    H                   PADDING FOR LENGTH              @D1M\nDCMAIDSV DS    XL6                 SAVE AREA FOR AID FROM RMI  @G811PSS\n         DS    H                   RESERVED                    @G811PSS\nDCMTRDCM DS    A                   POINTER TO RDCM             @G860P2G\nDCMNXTOR DS    A                   ADDR OF NEXT ADJUNCT EXTENDED ORDER X\n                                                               @G860PSS\nDCMCROW  DS    XL1                 CURRENT ROW NUMBER - 1      @G860PSS\nDCMCCOL  DS    XL1                 CURRENT COL NUMBER - 1      @G860PSS\nDCMMFRMF DS    XL1                 FULL CAPABILITY MFORM VALUE     @L5C\nDCMMFRFT EQU   X'80'               DISPLAY TIME STAMP              @L5A\nDCMMFRFJ EQU   X'40'               DISPLAY JOB NAME                @L5A\nDCMMFRFS EQU   X'20'               DISPLAY SYSTME NAME             @L5A\nDCMDELFC DS    CL2                 FULL CAPABILITY DEL VALUE       @L2A\nDCMCONFC DS    CL1                 FULL CAPABILITY CON VALUE       @L2A\nDCMSEGFC DS    FL1                 FULL CAPABILITY SEG VALUE       @L2A\nDCMRNUMF DS    FL1                 FULL CAPABILITY RNUM VALUE      @L2A\nDCMRTMEF DS    H                   FULL CAPABILITY RTME VALUE      @L2A\nDCMMFRMM DS    XL1                 MESSAGE STREAM MFORM VALUE      @L5C\nDCMMFRMT EQU   X'80'               DISPLAY TIME STAMP              @L5A\nDCMMFRMJ EQU   X'40'               DISPLAY JOB NAME                @L5A\nDCMMFRMS EQU   X'20'               DISPLAY SYSTME NAME             @L5A\nDCMDELMS DS    CL2                 MESSAGE STREAM DEL VALUE        @L2A\nDCMCONMS DS    CL1                 MESSAGE STREAM CON VALUE        @L2A\nDCMSEGMS DS    FL1                 MESSAGE STREAM SEG VALUE        @L2A\nDCMRNUMM DS    FL1                 MESSAGE STREAM RNUM VALUE       @L2A\nDCMRTMEM DS    H                   MESSAGE STREAM RTME VALUE       @L2A\nDCMQALEN DS    H                   LENGTH OF AREA TO HOLD READ         X\n                                   PARTITION QUERY                 @D1A\n         DS    3F                  RESERVED                        @L2A\n         SPACE 1                                                   @L3A\n***********************************************************************\n*                                                                     *\n* THE DCMBUFER WORK AREA IS TO BE USED ON A MODULE-BY-MODULE BASIS    *\n* ONLY.  THIS AREA MUST NOT BE USED AS A COMMUNICATION MEDIUM. DOING  *\n* SO WOULD DEFEAT THE PURPOSE OF GIVING THE DIDOCS MODULES A SAFE     *\n* WORK AREA .                                                      @L3A\n*                                                                     *\n***********************************************************************\nDCMBUFER DS    CL168               MODULE WORK AREA                @L3A\n         SPACE 1                                               @G811PSS\nDCMEND   DS    0C                  END OF TDCM                     @L3M\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MAPPING OF A SCREEN CONTROL TABLE (SCT) ENTRY         @G811PSS\n*                                                                     *\n*        FIRST BYTE OF AN SCT                                  @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSCTA  DSECT                     SCT ENTRY                       @L3A\nDCMSCTA1 DS    B                   FIRST BYTE OF AN SCT            @L3A\nDCMMSGOR EQU   X'80'               WTOR MESSAGE DISPLAYED      @ZA66980\nDCMMSGIN EQU   X'40'               MESSAGE DISPLAYED IN LINE\nDCMMSGCN EQU   X'20'               MESSAGE CONTINUED ON NEXT LINE\nDCMMSGJK EQU   X'10'               TO WRITE OUT-OF-LINE DISPLAY FROM\n*                                  MAY CONTAIN JUNK (SDS INTERFACE 2)\nDCMMSGAD EQU   X'08'               MESSAGE CAN BE DELETED AUTOMATICALLY\nDCMMSGRD EQU   X'04'               REQUEST HAS SPECIFIED MSG BE REMOVED\nDCMMSGIF EQU   X'02'               INFORMATIONAL MESSAGE IN LINE\nDCMMSGST EQU   X'01'               END OF TABLE INDICATOR\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        SECOND BYTE OF AN SCT                                 @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSCTA2 DS    B                   SECOND BYTE OF AN SCT           @L3A\nDCMMSGAC EQU   X'80'               ACTION MESSAGE\nDCMMSGC7 EQU   X'40'               DESCRIPTOR CODE 7 MESSAGE\nDCMMSGR2 EQU   X'20'               RESERVED - WAS DCMMSGDM         @L1A\nDCMMSGUA EQU   X'10'               URGENT ATTENTION MESSAGE DISPLAYED  X\n                                   IN LINE                         @L1A\n.* BIT DCMMSGAR DELETED BY SUPPORT G811PSS                     @G811PSS\nDCMMSGEA EQU   X'08'               EVENTUAL ACTION MESSAGE DISPLAYED   X\n                                   IN LINE - WAS DCMMSGIR          @L1A\nDCMMSGCT EQU   X'04'               THIS IS A CONTINUED LINE        @L3C\nDCMMSGPP EQU   X'02'               ISSUED BY PROBLEM PROGRAM\nDCMMSGCL EQU   X'01'               CONTROL LINE OF IN LINE MLWTO\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        THIRD BYTE OF AN SCT                                      @L3A\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSCTA3 DS    B                   THIRD BYTE OF AN SCT            @L3A\nDCMEJNUM EQU   X'80'               NUMBER IS IN THE LINE. THIS IS A    X\n                                   COMMUNICATION BETWEEN IEECVETJ AND  X\n                                   IEECVFT2. (IEECVETJ WILL LET        X\n                                   IEECVFT2 KNOW THAT FIRST 2 POSITION X\n                                   IN THE LINE CONTAINS THE            X\n                                   NUMBER)                         @P1A\n         SPACE 1                                               @G811PSS\n***********************************************************************\n*                                                                     *\n*        FOURTH BYTE OF AN SCT                                     @L3A\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSCTA4 DS    B                   FOURTH BYTE OF AN SCT           @L3A\nDCMSCTLN EQU   *-DCMSCTA           LENGTH OF ONE SCT ENTRY         @L3A\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*    MAPPING OF A SECONDARY SCREEN CONTROL TABLE (SSCT) ENTRY  @G811PSS\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @G811PSS\nDCMSCTC  DSECT                     SCT ENTRY                       @L3A\nDCMSCTC1 DS    B                   FIRST BYTE OF AN SCT            @L3A\nDCMSECCL EQU   X'80'               CONTROL LINE OF OUT OF LINE DISPLAY\nDCMSECLL EQU   X'40'               LABEL LINE OF OUT OF LINE DISPLAY\nDCMSECDL EQU   X'20'               DATA LINE OF OUT OF LINE DISPLAY\nDCMSECBL EQU   X'10'               THIS LINE IS BLANKED\nDCMSECDD EQU   X'02'               LINE RESERVED FOR DYNAMIC DISPLAY\nDCMSECST EQU   X'01'               END OF TABLE INDICATOR\n         SPACE 1                                                   @L3A\n***********************************************************************\n*                                                                     *\n*        SECOND BYTE OF AN SSCT                                    @L3A\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                   @L3A\nDCMSCTC2 DS    B                   SECOND BYTE OF AN SSCT          @L3A\nDCMSECLN EQU   *-DCMSCTC           LENGTH OF ONE SSCT ENTRY        @L3A\n         EJECT                                                 @G860PSS\n***************************************************************@G860PSS\n*                                                              @G860PSS\n*        MAP OF THE EXTENDED START EXTENDED FIELD ORDERS FOR 3270  @D1A\n*        DEVICES                                                   @D1A\n*                                                              @G860PSS\n***************************************************************@G860PSS\n         SPACE 1                                               @G860PSS\nDCMORDER DSECT                                                 @G860PSS\nDCMSBAO  DS    0XL3               SET BUFFER ADDRESS FIELD     @G860PSS\nDCMSBA   DS    XL1                SET BUFFER ADDRESS ORDER     @G860PSS\nDCMSBAA1 DS    XL1                SET BUFFER ADDRESS ROW ADDR  @G860PSS\nDCMSBAA2 DS    XL1                SET BUFFER ADDRESS COL ADDR  @G860PSS\n         SPACE 1                                               @G860PSS\nDCMSFEO  DS    0XL8               START FIELD EXTENDED FIELD   @G860PSS\nDCMSFE   DS    XL1                START FIELD EXTENDED ORDER   @G860PSS\nDCMSFEN  DS    XL1                NUMBER OF TYPE/VALUE PAIRS WHICH     X\n                                  FOLLOW                       @G860PSS\nDCMSFEFT DS    XL1                FIELD ATTRIBUTE TYPE         @G860PSS\nDCMSFEFA DS    XL1                FIELD ATTRIBUTE VALUE        @G860PSS\nDCMSFECT DS    XL1                COLOR ATTRIBUTE TYPE         @G860PSS\nDCMSFECA DS    XL1                COLOR ATTRIBUTE VALUE        @G860PSS\nDCMSFEHT DS    XL1                HIGHLIGHTING ATTRIBUTE TYPE  @G860PSS\nDCMSFEHA DS    XL1                HIGHLIGHTING ATTRIBUTE VALUE @G860PSS\n         SPACE 1                                               @G860PSS\nDCMORDLN EQU   *-DCMORDER         LENGTH OF EXTENDED ORDER FIELDS      X\n                                                               @G860PSS\n***********************************************************************\n*                                                                     *\n*     MAP OF THE EXTENDED SET ATTRIBUTE ORDERS FOR 3270 DEVICES    @D1A\n*                                                                     *\n***********************************************************************\n         ORG      DCMSFEO                                          @D1A\nDCMSAO   DS       0XL7             SET ATTRIBUTE FIELD             @D1A\nDCMSA1   DS       XL1              SET ATTRIBUTE ORDER             @D1A\nDCMSAHT  DS       XL1              HIGHLIGHTING ATTRIBUTE TYPE     @D1A\nDCMSAHA  DS       XL1              HIGHLIGHTING ATTRIBUTE VALUE    @D1A\nDCMSADAT DS       CL1              DATA TO HIGHLIGHT               @D1A\nDCMSA2   DS       XL1              SET ATTRIBUTE ORDER             @D1A\nDCMSARST DS       XL2              CHARACTER ATTRIBUTE RESET       @D1A\nDCMSAOLN EQU      *-DCMORDER       LENGTH OF EXTENDED SA ORDER     @D1A\n         ORG      ,                                                @D1A\n         EJECT                                                     @L3A\n***********************************************************************\n*                                                                     *\n* MAP OF THE DOM INFORMATION.                                      @L3A\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                   @L3A\n         DSECT                                                     @L3A\nDCMDOMEN DS    0CL18               MAP OF A DOM ENTRY              @L3A\nDCMDTCB  DS    A                   JOBSTEP TCB ADDRESS             @L3A\nDCMDOMID DS    0CL4                FOUR BYTE DOM ID                @L3A\nDCMDSYID DS    FL1                 SYSTEM ID                       @L3A\nDCMDMID  DS    FL3                 DOM ID                          @L3A\nDCMDTKAS DS    0CL6                TOKEN AND ASID                  @L3A\nDCMDTOKN DS    FL4                 DOM TOKEN                       @L3A\nDCMDASID DS    H                   ASID                            @L3A\nDCMDRSVD DS    CL4                 RESERVED                        @L3A\nDCMDOMLN EQU   *-DCMDOMEN          LENGTH OF A DCM DOM ENTRY       @L3A\n         MEND  , */\n*%DCMPBSL  :  ;\n*@EJECT;\n*/********************************************************************/\n*/*                                                                  */\n*/*           WORK AND SAVE AREAS                                    */\n*/*                                                                  */\n*/********************************************************************/\n*DECLARE\n*  1 DCMSTRT  BASED(DCMSTPTR),\n*   2 DCMOACRO  CHAR(4),                 /* CNTL BLK ACRONYM 'TDCM'\n*                                                                @D1C*/\n*   2 DCMFLG1     CHAR(1),               /* TDCM AREA INDICATORS     */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMOUTPT BIT(1),                  /* TDCM UPDATED FOR OUTPUT\n*                                           ONLY                     */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*   2 DCMATI      CHAR(1),               /* SAVED UCB ATTN INDEX     */\n*   2 *           CHAR(2),               /* RESERVED                 */\n*   2 DCMWTINT    PTR(31),               /* DCMWTINT INITIAL VALUE   */\n*   2 DCMLNCNT    FIXED(15),             /* NUMBER OF LINES TO BLANK */\n*   2 DCMLNNUM    CHAR(1),               /* FIRST LINE TO BLANK      */\n*   2 *           CHAR(1),               /* RESERVED                 */\n*   2 DCMPACK     FIXED(31),             /* AREA TO PLACE NUMBER FOR\n*                                           PACKING                  */\n*   2 DCMCVBIN    FIXED(31),             /* AREA FOR CONVERSION TO\n*                                           BINARY                   */\n*@SPACE(1);\n*/********************************************************************/\n*/*                                                                  */\n*/*           TIMER COMMUNICATION FIELD                      @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMTIMES    CHAR(1),               /* TIME RTNS INDICATOR BYTE */\n*    3 DCMTIMER BIT(1),                  /* TIME ELAPSED FOR THIS\n*                                           DISPLAY                  */\n*    3 DCMOPTTI BIT(1),                  /* OPTIONS TO TI RTN        */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMOTTMM BIT(1),                  /* OPTIONS OR TI RTNS TO\n*                                           MSG MODULE               */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMTASYN BIT(1),                  /* TIMER SET FOR ASYNC\n*                                           ERROR MSG                */\n*    3 DCMOCTTI BIT(1),                  /* OPEN-CLOSE TO TI RTN     */\n*    3 DCMRMTTI BIT(1),                  /* ROLL MODE TO TIMER\n*                                           ROUTINE                  */\n*@EJECT;\n*/********************************************************************/\n*/*                                                                  */\n*/*           CONTROL BLOCK VERSION IDENTIFICATION           @G860P2G*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMTVERN    FIXED(8),              /* CONTROL BLOCK VERSION\n*                                                            @G860P2G*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 *           FIXED(15),             /* RESERVED             @D1C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           ADDRESS TABLE                                  @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 *           PTR(31),               /* RESERVED             @L3C*/\n*   2 DCMDOMPK    PTR(31),               /* ADDRESS OF FIRST DOM\n*                                           NUMBER                   */\n*   2 DCMAMTAB    PTR(31),               /* ADDRESS OF FIRST SCT\n*                                           ENTRY                    */\n*   2 DCMADSEC    PTR(31),               /* ADDRESS OF FIRST SSCT\n*                                           ENTRY                    */\n*   2 DCMADDRL    PTR(31),               /* ADDRESS OF LAST SCT\n*                                           ENTRY                    */\n*   2 DCMASCRN    PTR(31),               /* POINTER TO SCREEN IMAGE\n*                                           BUFFER                   */\n*   2 DCMLSCRN    PTR(31),               /* POINTER TO LAST BUFFER\n*                                           LINE                     */\n*   2 DCMWTBUF    PTR(31),               /* SCREEN LENGTH POINTER    */\n*   2 DCMAINS     PTR(31),               /* POINTER TO INSTRUCTION\n*                                           LINE                     */\n*   2 DCMAENTR    PTR(31),               /* POINTER TO ENTRY AREA    */\n*   2 DCMAWARN    PTR(31),               /* POINTER TO WARNING LINE  */\n*   2 DCMADCHP    PTR(31),               /* ADDRESS OF CHANNEL\n*                                           PROGRAM AREA             */\n*   2 DCMPFKLN    PTR(31),               /* POINTER TO PFK LINE      */\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 DCMCXSVE    FIXED(31),             /* CXSA SAVE AREA           */\n*   2 DCMADOPN    PTR(31),               /* ADDRESS OF COMMAND\n*                                           OPERAND                  */\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 DCMDSAV  (5) FIXED(31),            /* SAVE AND WORK AREA       */\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35             */\n*/*           FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER  */\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMWQEXP    FIXED(31),             /* ENSURE FULL WORD\n*                                           BOUNDARY                 */\n*    3 DCMINLGN    FIXED(15),            /* FIELD FOR INPUT LENGTH   */\n*    3 DCMMCSFL    FIXED(15),            /* MCS FLAGS FIELD          */\n*   2 DCMINPUT     CHAR(128),            /* INPUT MESSAGE TEXT   @L4C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           GENERAL LENGTH VALUES                          @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMLGNTH    FIXED(15),             /* LENGTH OF A LINE         */\n*   2 DCMBAINC    FIXED(15),             /* ADDRESS TO INSERT CURSOR */\n*   2 DCMSSCTL    FIXED(15),             /* LENGTH OF ONE SSCT ENTRY\n*                                                                @L3A*/\n*   2 DCMBADLN    FIXED(15),             /* BUFFER ADDR TO BEGIN MSG\n*                                           WRITE                    */\n*   2 DCMBYTCT    FIXED(15),             /* NUMBER OF BYTES TO WRITE */\n*   2 DCMADNUM    FIXED(15),             /* NEXT LINE NUMBER         */\n*   2 DCMAXLGN    FIXED(15),             /* MAXIMUM LINE LENGTH      */\n*   2 DCMMSGAL    FIXED(15),             /* NUMBER OF LINES IN\n*                                           MESSAGE AREA             */\n*   2 DCMRMINC    FIXED(15),             /* INCREMENT INTO RMI       */\n*   2 DCMSCTCN    FIXED(15),             /* LENGTH OF ONE SCT ENTRY  */\n*   2 DCMCORLN    FIXED(15),             /* LENGTH OF TDCM LINE IN\n*                                           CORE                     */\n*   2 *           FIXED(15),             /* TIME COUNTER             */\n*   2 DCMPFKNM    CHAR(1),               /* NUMBER OF KEY BEING\n*                                           PROCESSED                */\n*   2 DCMPFKKN    CHAR(1),               /* LIST KEY NUMBER          */\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           VALUES FOR OPTIONS                             @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMDEL      CHAR(2),               /* DEL VALUE                */\n*   2 DCMCON      CHAR(1),               /* CON VALUE                */\n*   2 DCMSEG      PTR(8),                /* SEG VALUE                */\n*   2 DCMDL       PTR(8),                /* DISPLAY AREA OPTION      */\n*   2 DCMRNUM     PTR(8),                /* ROLL NUMBER VALUE        */\n*   2 DCMRTME     FIXED(15),             /* ROLL TIME VALUE          */\n* @EJECT;                                /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           DEFAULT VALUES FOR OPTIONS                             */\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSEGDF    PTR(8),                /* SEG DEFAULT              */\n*   2 DCMRNUMD    PTR(8),                /* RNUM DEFAULT             */\n*   2 DCMRTMED    FIXED(15),             /* RTME DEFAULT             */\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 *           CHAR(5),               /* RESERVED         @G811PSS*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           COMMUNICATIONS AREAS                                   */\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMOPTST    CHAR(1),               /* STATUS OF SCREEN CONTROL\n*                                           OPTIONS                  */\n*    3 DCMOPTVR BIT(1),                  /* DELETE VERIFICATION\n*                                           CON=(Y=1,N=0)            */\n*    3 DCMOPTAD BIT(1),                  /* AUTOMATIC DELETION\n*                                           DEL=(Y=1,N=0)            */\n*    3 DCMOPTSG BIT(1),                  /* DEFAULT SEGMENT\n*                                           SPECIFIED  SEG=(0=0)     */\n*    3 DCMOPRLL BIT(1),                  /* ROLL MODE (Y=1,N=0)      */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*   2 DCMCS       CHAR(1),               /* OPEN/CLOSE REQUEST       */\n*    3 DCMCSC   BIT(1),                  /* CLOSE REQUEST            */\n*    3 DCMCSO   BIT(1),                  /* OPEN REQUEST             */\n*    3 DCMISRPQ BIT(1),                  /* ISSUE READ PARTITION QUERY\n*                                                                @D1A*/\n*    3 DCMRDRPQ BIT(1),                  /* READ RESULT OF READ\n*                                           PARTITION QUERY      @D1A*/\n*    3 DCMRETIO BIT(1),                  /* RETURN TO I/O ROUTINE\n*                                                                @D1A*/\n*    3 DCMSWAPT BIT(1),                  /* TDCM SWAP IS NEEDED  @D1A*/\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*   2 DCMUTILT    CHAR(1),               /* INTERNAL FLAGS   @G811PSS*/\n*    3 DCMUTILA BIT(1),                  /* THESE BITS ARE           */\n*    3 DCMUTILB BIT(1),                  /* INITIALIZED AND USED     */\n*    3 DCMUTILC BIT(1),                  /* SOLELY WITHIN            */\n*    3 DCMUTILD BIT(1),                  /* EACH MODULE              */\n*    3 DCMUTILE BIT(1),                  /* THEY ARE NEVER           */\n*    3 DCMUTILF BIT(1),                  /* USED FOR INTERFACE       */\n*    3 DCMTEST1 BIT(1),                  /* FOR TESTING              */\n*    3 DCMTEST2 BIT(1),                  /* FOR TESTING              */\n*   2 DCMDSTAT    CHAR(1),               /* CURRENT DISPLAY STATUS   */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMDSTNM BIT(1),                  /* MESSAGES ARE NUMBERED    */\n*    3 DCMDSTNH BIT(1),                  /* MSGS NUMBERED - HOLD\n*                                           OPTION                   */\n*    3 *        BIT(1),                  /* RESERVED - WAS DCMDSINR\n*                                                                @L1A*/\n*    3 DCMDSAUT BIT(1),                  /* AUTOMATIC DELETION TRIED */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           MCS INTERFACE FIELD                            @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMMCSST    CHAR(1),               /* MCS INTERFACE BYTE       */\n*    3 DCMDUSE  BIT(1),                 /* DIDOCS IN CONTROL @G811PSS*/\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMOOMSS BIT(1),                  /* MESSAGE STREAM ENTRY     */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMOOSDS BIT(1),                  /* STATUS DISPLAY ENTRY     */\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           UNIQUE INTERFACE FIELD                         @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMIOUNQ    CHAR(1),               /* UNIQUE IO BYTE           */\n*    3 *        BIT(1),                  /* RESERVED WAS DCMIO226\n*                                                                @L3C*/\n*    3 *        BIT(1),                  /* RESERVED             @D1C*/\n*    3 DCMFRSCN BIT(1),                  /* PUT OUTPUT IN HOLD MODE  */\n*    3 DCMRDARM BIT(1),                  /* PERFORM READ AFTER RMI   */\n*    3 DCMW2250 BIT(1),                  /* DEVICE HAS LIGHT PEN\n*                                                            @G811PSS*/\n*    3 DCMINNOR BIT(1),                  /* NORMAL INSTRUCTION LINE  */\n*    3 DCMINERR BIT(1),                  /* ERROR INSTRUCTION LINE   */\n*    3 DCMEWASP BIT(1),                  /* ERASE/WRITE ALTERNATE\n*                                           COMMAND SUPPORTED\n*                                                            @G811PSS*/\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           I/O COMMUNICATION FIELDS                       @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMIOCM1    CHAR(1),               /* IO COMMUNICATIONS BYTE 1 */\n*    3 DCMDORMI BIT(1),                  /* ISSUE RMI                */\n*    3 DCMSOUND BIT(1),                  /* SOUND ALARM              */\n*    3 DCMWRWRN BIT(1),                  /* WRITE WARNING LINE       */\n*    3 DCMWRMSG BIT(1),                  /* WRITE FULL MESSAGE AREA  */\n*    3 DCMWRPAR BIT(1),                  /* WRITE PARTIAL MESSAGE\n*                                           AREA                     */\n*    3 DCMWRINS BIT(1),                  /* WRITE INSTRUCTION LINE   */\n*    3 DCMWRENT BIT(1),                  /* WRITE ENTRY AREA         */\n*    3 DCMINSC  BIT(1),                  /* INSERT CURSOR            */\n*   2 DCMIOCM2    CHAR(1),               /* IO COMMUNICATIONS BYTE 2 */\n*    3 DCMBLENT BIT(1),                  /* BLANK ENTRY AREA         */\n*    3 DCMBLWRL BIT(1),                  /* BLANK LEFT HALF WARNING\n*                                           LINE                     */\n*    3 DCMBLWRR BIT(1),                  /* BLANK RIGHT HALF WARNING\n*                                           LINE                     */\n*    3 DCMINSSH BIT(1),                  /* INIT AND SHIFT\n*                                           INSTRUCTION LINE         */\n*    3 DCMWINFD BIT(1),                  /* WRITE INFORMATIONAL\n*                                           DISPLAY                  */\n*    3 DCMERASE BIT(1),                  /* PERFORM ERASE            */\n*    3 DCMIOCRD BIT(1),                  /* PERFORM READ\n*                                                                @L3C*/\n*    3 DCMWRASY BIT(1),                  /* WRITE ASYNC ERROR MSG TO\n*                                           MID-SCREEN               */\n*   2 DCMIOCM3    CHAR(1),               /* IO COMMUNICATIONS BYTE 3 */\n*    3 DCMOPRMI BIT(1),                  /* RMI AFTER OPEN TO UNLOCK\n*                                           KEYBOARD                 */\n*    3 DCMSSRG  BIT(1),                  /* SUPPRESS START\n*                                           REGENERATION             */\n*    3 DCMEWAND BIT(1),                  /* ERASE/WRITE ALTERNATE\n*                                           COMMAND NEEDED   @G811PSS*/\n*    3 DCMWRPFK BIT(1),                  /* TDCM WRITE PFK AREA      */\n*    3 DCMPFKAT BIT(1),                  /* PFK ATTENTION            */\n*    3 DCMRDPFK BIT(1),                  /* PFK AREA READ            */\n*    3 *        BIT(1),                  /* RESERVED WAS DCMACPFK\n*                                                                @L3C*/\n*    3 *        BIT(1),                  /* RESERVED WAS DCMLTPFK\n*                                                                @L3C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 DCMLINEN    CHAR(1),               /* LINE NUMBER TO BEGIN\n*                                           WRITE                    */\n*   2 DCMCULNO    CHAR(1),               /* LINE IN ENTRY AREA TO\n*                                           INSERT CURSOR            */\n*   2 DCMPOSCU    CHAR(1),               /* POSITION TO INSERT\n*                                           CURSOR                   */\n* @EJECT;                                /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           ASYNCHRONOUS ERROR COMMUNICATIONS FIELD        @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMASYNC    CHAR(1),               /* ASYN ERROR\n*                                           COMMUNICATIONS/RETRY\n*                                           BYTE                     */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMASDA  BIT(1),                  /* DATA CHECK RETRY BIT\n*                                                            @G811PSS*/\n*    3 DCMASIN  BIT(1),                  /* INVALID BUFFER ADDR CHECK\n*                                           RETRY BIT        @G811PSS*/\n*    3 DCMASBA  BIT(1),                  /* BUFFER ADDR PARITY CHECK\n*                                           RETRY BIT        @G811PSS*/\n*    3 DCMASEWA BIT(1),                  /* PERMANENT ERROR ON EWA\n*                                           DEVICE RETRIED   @G811PSS*/\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*/********************************************************************/\n*/*                                                                  */\n*/*           COMMUNICATION FIELDS                           @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMCOM1     CHAR(1),               /* COMMUNICATIONS BYTE      */\n*    3 DCMLPENT BIT(1),                  /* ENTER BY LP OR CURSOR    */\n*    3 DCMIOPRD BIT(1),                  /* READ PERFORMED           */\n*    3 DCMCOMRM BIT(1),                  /* RMI PERFORMED            */\n*    3 DCMCOMAU BIT(1),                  /* PERFORM AUTO DELETE      */\n*    3 DCMCOMRD BIT(1),                  /* PERFORM REGULAR DELETE   */\n*    3 DCMCOMNM BIT(1),                  /* NUMBER MESSAGES          */\n*    3 DCMCLEAR BIT(1),                  /* CLEAR KEY WAS PRESSED\n*                                                            @G811PSS*/\n*    3 DCMCANCL BIT(1),                  /* INDICATE CANCEL TO\n*                                           COMMAND ROUTINE          */\n*   2 DCMCOM2     CHAR(1),               /* COMMUNICATIONS BYTE      */\n*    3 DCMCM2I  BIT(1),                  /* INPUT TO BE PROCESSED    */\n*    3 DCMSPLIT BIT(1),                  /* MSG TO BE SPLIT          */\n*    3 DCMCOMAR BIT(1),                  /* ACCEPTED REPLY           */\n*    3 DCMREPLC BIT(1),                  /* REPEAT LAST COMMAND KEY\n*                                           (PA1) PRESSED    @G811PSS*/\n*    3 DCMERPF  BIT(1),                  /* ERASE PERF-PROC CAN NOW\n*                                           CLOSE DEVICE             */\n*    3 DCMCMIN5 BIT(1),                  /* RETURN TO INTER. 5 FOR\n*                                           BLNK                     */\n*    3 DCMCBLNK BIT(1),                  /* BLANKING REQUIRED        */\n*    3 DCMAE    BIT(1),                  /* CLEANUP FOR ASY ERROR    */\n*   2 DCMCOM3     CHAR(1),               /* COMMUNICATIONS BYTE      */\n*    3 DCMCDSP3 BIT(1),                  /* DISPLAY 3 COMPLETED WORK */\n*    3 DCMRTPFK BIT(1),                  /* RETURN TO PFK ROUTINE    */\n*    3 DCMVLPFK BIT(1),                  /* VERIFYING LAST COMMAND   */\n*    3 DCMXINT1 BIT(1),                  /* ENTRY FOR INTERFACE 1\n*                                           ROUTINE                  */\n*    3 DCMOLUNV BIT(1),                  /* O-O-L MSG CAUSED UNVIEW.\n*                                           MSG.                     */\n*    3 *        BIT(1),                  /* RESERVED             @L4C*/\n*    3 DCMOLHLD BIT(1),                  /* OUT OF LINE MESSAGES HELD*/\n*    3 DCMCMIN7 BIT(1),                  /* RETURN TO INTER. 7 FOR\n*                                           BLANKING                 */\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           MESSAGE MODULES COMMUNICATION FIELDS           @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMCMSG1    CHAR(1),               /* MSG MODULE\n*                                           COMMUNICATIONS BYTE 1    */\n*    3 DCMMSGWT BIT(1),                  /* MOVE IN MESSAGE WAITING  */\n*    3 DCMUNMSG BIT(1),                  /* MOVE IN UNVIEWABLE\n*                                           MESSAGE                  */\n*    3 DCMSTEX  BIT(1),                  /* MOVE IN STATUS EXISTS    */\n*    3 DCMCHOPT BIT(1),                  /* MOVE IN CHANGE OPTIONS   */\n*    3 DCMELONG BIT(1),                  /* MOVE IN ENTRY TOO LONG   */\n*    3 DCMWRCDL BIT(1),                  /* MOVE IN CON=N,DEL=Y      */\n*    3 DCMDELNT BIT(1),                  /* MOVE IN DEL UNCHANGED,\n*                                           NO TIMER                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*   2 DCMCMSG2    CHAR(1),               /* MSG MODULE\n*                                           COMMUNICATIONS BYTE 2    */\n*    3 DCMDLREQ BIT(1),                  /* MOVE IN DELETION\n*                                           REQUESTED                */\n*    3 DCMRQINC BIT(1),                  /* MOVE IN REQUEST\n*                                           INCONSISTENT             */\n*    3 DCMMSGCR BIT(1),                  /* MOVE IN INVALID CURSOR\n*                                           OPERATION                */\n*    3 DCMINVOP BIT(1),                  /* MOVE IN INVALID OPERAND  */\n*    3 DCMCILLP BIT(1),                  /* MOVE IN ILLEGAL LP\n*                                           OPERATION                */\n*    3 DCMDELRI BIT(1),                  /* MOVE IN DELETE REQUEST\n*                                           INCONSISTENT             */\n*    3 DCMASYRT BIT(1),                  /* MOVE IN ASYN ERROR\n*                                           RETRYABLE                */\n*    3 DCMASYCD BIT(1),                  /* MOVE IN ASYN ERROR MAYBE\n*                                           RETRYABLE                */\n*   2 DCMCMSG3    CHAR(1),               /* MSG MODULE\n*                                           COMMUNICATIONS BYTE 3    */\n*    3 DCMCMRLL BIT(1),                  /* MOVE IN ROLL MODE\n*                                           MESSAGE                  */\n*    3 DCMCDLR1 BIT(1),                  /* NO DELETABLE MESSAGES    */\n*    3 DCMCDLR2 BIT(1),                  /* INVALID RANGE            */\n*    3 DCMCDLR3 BIT(1),                  /* SEG EQU TO ZERO          */\n*    3 DCMCDLR4 BIT(1),                  /* DISPLAY NOT ON SCREEN    */\n*    3 DCMCDLR5 BIT(1),                  /* INVALID OPERAND          */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 DCMDTBSY BIT(1),                  /* COMMAND REJECTED - TASK\n*                                           BUSY                     */\n*   2 DCMCMSG4    CHAR(1),               /* MSG MODULE\n*                                           COMMUNICATIONS BYTE 4    */\n*    3 DCMPFKNA BIT(1),                  /* MOVE IN PFK NOT\n*                                           ALLOCATED FOR            */\n*    3 DCMPFKND BIT(1),                  /* MOVE IN PFK NOT DEFINED  */\n*    3 DCMPFKNO BIT(1),                  /* MOVE IN NO PFK\n*                                           ALLOCATION               */\n*    3 DCMPFKIP BIT(1),                  /* MOVE IN PFK IN PROCESS   */\n*    3 DCMNPFKT BIT(1),                  /* MOVE IN NO PFK TABLES\n*                                                                @L4C*/\n*    3 DCMTABND BIT(1),                  /* MOVE IN PFK TABLE NOT\n*                                           DEFINED              @L4C*/\n*    3 DCMKRPIP BIT(1),                  /* MOVE IN K REQUEST\n*                                           INCONSISTENT - PFK IN\n*                                           USE                  @L4C*/\n*    3 *        BIT(1),                  /* RESERVED                 */\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           SVC 34 COMMUNICATIONS FIELD                    @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSVC34    CHAR(1),               /* SVC 34 COMMUNICATION\n*                                           BYTE                     */\n*    3 DCMMYCMD BIT(1),                  /* COMMAND TO BE HANDLED BY\n*                                           THIS CONS                */\n*    3 DCMINVLD BIT(1),                  /* INVALID K COMMAND        */\n*    3 DCMTYPE1 BIT(1),                  /* K COMMAND IS NOT\n*                                           ROUTABLE                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n*    3 *        BIT(1),                  /* RESERVED                 */\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 DCMCOM4     CHAR(1),               /* COMMUNICATION BYTE       */\n*    3 DCMCNTRL   BIT(1),         /* CONTROL LINE INDICATOR  @ZA44483*/\n*    3 *          BIT(7),                /* RESERVED         @ZA44483*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           INDEX FOR I/O ROUTINE                          @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMIONDX    CHAR(1),               /* INDEX FOR SELECTING THE\n*                                           APPROPRIATE IO ROUTINE\n*                                           X'04'=RESERVED\n*                                           X'08'=RESERVED\n*                                           X'0C'=RESERVED\n*                                           X'10'=3270-TYPE-DEVICE,\n*                                                   IEECVETU     @L3C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*   2 DCMTEST     FIXED(15),             /* RESERVED FOR TESTING     */\n*@EJECT;\n*/********************************************************************/\n*/*                                                                  */\n*/*           MODULE ADDRESSES                                       */\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMADMOD,               /* STRUCTURE OF MODULE ADDRESSES\n*                                                                @D1A*/\n*     3 DCMIORTN  PTR(31),    /* IEECVETU - APPROPRIATE I/O ROUTINE\n*                                                                @L3C*/\n*     3 DCMNMODS  CHAR(116) BDY(WORD),  /* MODULE ADDRESS        @L4A*/\n*      4 *         PTR(31),   /*            RESERVED             @L4C*/\n*      4 DCMNPROC  PTR(31),   /* IEECVET1 - PROCESSOR ROUTINE LOAD\n*                                           ONE                  @D1C*/\n*      4 DCMNDSP1  PTR(31),   /* IEECVET2 - DISPLAY ROUTINE 1    @D1C*/\n*      4 DCMNDSP2  PTR(31),   /* IEECVET3 - DISPLAY ROUTINE 2    @D1C*/\n*      4 DCMNDSP3  PTR(31),   /* IEECVFT2 - DISPLAY ROUTINE 3    @D1C*/\n*      4 DCMNCMD1  PTR(31),   /* IEECVET4 - COMMAND ROUTINE 1    @D1C*/\n*      4 DCMNDEL1  PTR(31),   /* IEECVET6 - DELETE ROUTINE 1     @D1C*/\n*      4 DCMNDEL2  PTR(31),   /* IEECVET7 - DELETE ROUTINE 2     @D1C*/\n*      4 DCMNDEL3  PTR(31),   /* IEECVET8 - DELETE ROUTINE 3     @D1C*/\n*      4 DCMNDEL4  PTR(31),   /* IEECVET9 - DELETE ROUTINE 4     @D1C*/\n*      4 DCMNOPT1  PTR(31),   /* IEECVETA - OPTIONS ROUTINE 1    @D1C*/\n*      4 DCMNPFK1  PTR(31),   /* IEECVFTA - PFK ROUTINE 1        @D1C*/\n*      4 DCMNPFK2  PTR(31),   /* IEECVFTB - PFK ROUTINE 2        @D1C*/\n*      4 DCMNERRO  PTR(31),   /* IEECVETC - ASYNCHRONOUS ERROR\n*                                           ROUTINE              @D1C*/\n*      4 DCMNMSG1  PTR(31),   /* IEECVETD - MESSAGE ROUTINE 1    @D1C*/\n*      4 DCMNMSG2  PTR(31),   /* IEECVETE - MESSAGE ROUTINE 2    @D1C*/\n*      4 DCMNMSG3  PTR(31),   /* IEECVFTD - MESSAGE ROUTINE 3    @D1C*/\n*      4 DCMNLPCR  PTR(31),   /* IEECVETF - LIGHT PEN/CURSOR SERVICE\n*                                           ROUTINE              @D1C*/\n*      4 DCMNOPCL  PTR(31),   /* IEECVETG - OPEN/CLOSE ROUTINE   @D1C*/\n*      4 DCMNCLN   PTR(31),   /* IEECVFTG - CLEANUP MODULE       @D1C*/\n*      4 DCMNROLL  PTR(31),   /* IEECVETJ - ROLL MODE ROUTINE    @D1C*/\n*      4 DCMNTIMR  PTR(31),   /* IEECVETK - TIMER INTERPRETER\n*                                           ROUTINE              @D1A*/\n*      4 DCMNINT1  PTR(31),   /* IEECVFTL - INTERFACE 1 ROUTINE  @D1C*/\n*      4 DCMNINT2  PTR(31),   /* IEECVFTM - INTERFACE 2 ROUTINE  @D1C*/\n*      4 DCMNINT3  PTR(31),   /* IEECVFTN - INTERFACE 3 ROUTINE  @D1C*/\n*      4 DCMNINT4  PTR(31),   /* IEECVFTO - INTERFACE 4 ROUTINE  @D1C*/\n*      4 DCMNINT5  PTR(31),   /* IEECVFTP - INTERFACE 5 ROUTINE  @D1C*/\n*      4 DCMNINT6  PTR(31),   /* IEECVFTQ - INTERFACE 6 ROUTINE  @D1C*/\n*      4 DCMNINT7  PTR(31),   /* IEECVFTT - INTERFACE 7 ROUTINE  @D1C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           DIDOCS MODULE TRACE AREA                       @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*%DCL DCMTRLEN CHAR;                     /* TRACE MOVE LENGTH        */\n*%DCMTRLEN='30';                         /* 2 LESS THAN WHOLE AREA   */\n*   2 DCMTRACE CHAR(DCMTRLEN+2),         /* TO-AREA FOR TRACE MOVE\n*                                                            @G811PSS*/\n*    3 *        CHAR(2),                 /* OLDEST TRACE ENTRY       */\n*    3 DCMTRAC2 CHAR(DCMTRLEN),          /* FROM-AREA FOR TRACE MOVE */\n*      4 *      CHAR(DCMTRLEN-2),        /*                      @D1A*/\n*      4 DCMTREN CHAR(2),                /* CURRENT TRACE ENTRY  @D1C*/\n*        5 DCMTREN1 CHAR(1),             /* 1ST BYTE OF NEW ENTRY\n*                                                                @D1A*/\n*        5 DCMTREN2 CHAR(1),             /* 2ND BYTE OF NEW ENTRY\n*                                                                @D1A*/\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           FOLLOWING GROUP OF BYTES ARE DEVICE DEPENDENT  @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMASKEN    CHAR(1),               /* ENTER MASK               */\n*   2 DCMASKCN    CHAR(1),               /* CANCEL MASK              */\n*   2 DCMASKCR    CHAR(1),               /* CURSOR MASK              */\n*   2 DCMASKLP    CHAR(1),               /* LIGHT PEN MASK           */\n*   2 DCMSKPF1    CHAR(1),              /* 1ST PFK TYPE MASK @G811PSS*/\n*   2 DCMSKPF2    CHAR(1),              /* 2ND PFK TYPE MASK @G811PSS*/\n*   2 DCMSKPF3    CHAR(1),              /* 3RD PFK TYPE MASK @G811PSS*/\n*   2 DCMSKPF4    CHAR(1),              /* 4TH PFK TYPE MASK @G811PSS*/\n*   2 DCMASKCL    CHAR(1),               /* CLEAR KEY MASK   @G811PSS*/\n*   2 DCMSKPA1    CHAR(1),               /* PA1 KEY MASK     @G811PSS*/\n*   2 DCMSKPA3    CHAR(1),               /* PA3 KEY MASK     @G811PSS*/\n*   2 *           CHAR(5),               /* RESERVED         @G811PSS*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER  @G811PSS*/\n*/*           WHEN IN FULL CAPABILITY MODE                   @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSADCN PTR(31),             /* FIRST ADCON IN LIST   @G811PSS*/\n*    3 DCMFLLA   PTR(31),           /* LAST LINE IN MSG AREA @G811PSS*/\n*   2 DCMFLL1A  PTR(31),            /* LAST LINE IN MSG AREA + 1\n*                                                            @G811PSS*/\n*   2 DCMFLSCT PTR(31),             /* SCT FOR LAST LINE IN MSG AREA\n*                                                            @G811PSS*/\n*   2 DCMFSCT1  PTR(31),            /* SCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 DCMFSSCT  PTR(31),            /* SSCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 DCMFENT2  PTR(31),            /* 2ND LINE OF ENTRY AREA\n*                                                            @G811PSS*/\n*   2 *(6)      PTR(31),            /* RESERVED              @G811PSS*/\n* @EJECT;\n*/********************************************************************/\n*/*                                                                  */\n*/*           ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER  @G811PSS*/\n*/*           WHEN IN MESSAGE STREAM MODE                    @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMMLLA   PTR(31),            /* LAST LINE IN MSG AREA @G811PSS*/\n*   2 DCMMLL1A  PTR(31),            /* LAST LINE IN MSG AREA + 1\n*                                                            @G811PSS*/\n*   2 DCMMLSCT  PTR(31),            /* SCT FOR LAST LINE IN MSG AREA\n*                                                            @G811PSS*/\n*   2 DCMMSCT1  PTR(31),            /* SCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 DCMMSSCT  PTR(31),            /* SSCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 *(2)      PTR(31),            /* RESERVED              @G811PSS*/\n* @SPACE(1);\n*/********************************************************************/\n*/*                                                                  */\n*/*           ADDRESSES OF PARTS OF THE SCREEN IMAGE BUFFER  @G811PSS*/\n*/*           WHEN IN STATUS DISPLAY MODE                    @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMDLLA   PTR(31),            /* LAST LINE IN MSG AREA @G811PSS*/\n*   2 DCMDLL1A  PTR(31),            /* LAST LINE IN MSG AREA + 1\n*                                                            @G811PSS*/\n*   2 DCMDLSCT  PTR(31),            /* SCT FOR LAST LINE IN MSG AREA\n*                                                            @G811PSS*/\n*   2 DCMDSCT1  PTR(31),            /* SCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 DCMDSSCT  PTR(31),            /* SSCT FOR LAST LINE IN MSG AREA\n*                                      + 1                   @G811PSS*/\n*   2 *(2)      PTR(31),            /* RESERVED                  @L1A*/\n* @SPACE(1);\n*/********************************************************************/\n*/*                                                                  */\n*/*           ADDRESSES TO BE RESOLVED DURING OPEN               @L1A*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMLSSCT  PTR(31),            /* ADDRESS OF LAST SSCT      @L1A*/\n*   2 DCMAEORD  PTR(31),            /* ADDR OF ADJUNCT EXTENDED ORDERS\n*                                                            @G860PSS*/\n*   2 DCMQAPTR  PTR(31),            /* ADDR OF DATA OBTAINED FROM READ\n                                       PARTITION QUERY           @D1A*/\n*   2 *(6)      PTR(31),            /* RESERVED                  @D1A*/\n*   2 *         PTR(31),            /* RESERVED                  @L1A*/\n*    3 DCMLADCN PTR(31),            /* LAST ADCON IN LIST        @L1A*/\n* @EJECT;\n*/********************************************************************/\n*/*                                                                  */\n*/*           NUMBER OF LINES IN MESSAGE AREA AND ENTRY      @G811PSS*/\n*/*           AREA VALUES                                    @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMFNLMA  FIXED(8),           /* MAX NUMBER LINES IN MSG AREA\n*                                      WHEN IN FULL CAPABILITY MODE\n*                                                            @G811PSS*/\n*   2 DCMMNLMA  FIXED(8),           /* MAX NUMBER LINES IN MSG AREA\n*                                      WHEN IN MESSAGE STREAM MODE\n*                                                            @G811PSS*/\n*   2 DCMDNLMA  FIXED(8),           /* MAX NUMBER LINES IN MSG AREA\n*                                      WHEN IN STATUS DISPLAY MODE\n*                                                            @G811PSS*/\n*   2 DCMENTL1  FIXED(8),           /* LINE NUMBER -1 OF 1ST LINE\n*                                      IN ENTRY AREA         @G811PSS*/\n*   2 DCMENTL2  FIXED(8),           /* LINE NUMBER -1 OF 2ND LINE\n*                                      IN ENTRY AREA         @G811PSS*/\n*   2 DCMINLNM  FIXED(8),           /* LINE NUMBER -1 OF INSTRUCTION\n*                                      LINE                  @G860PSS*/\n*   2 *         FIXED(15),          /* RESERVED              @G860PSS*/\n*   2 DCMFENRC  FIXED(15),          /* ADDR OF 2ND LINE IN ENTRY AREA\n*                                      IN ROW-COLUMN FORMAT  @G811PSS*/\n*   2 DCMENTPO  FIXED(15),          /* OFFSET OF 1ST CHAR IN ENTRY AREA\n*                                                            @G811PSS*/\n*   2 DCMSCRW   FIXED(15),          /* WIDTH OF SCREEN       @G860PSS*/\n*   2 DCMLENTY  FIXED(15),          /* LENGTH OF ENTRY AREA      @D1C*/\n*   2 *         FIXED(31),          /* RESERVED              @G860PSS*/\n* @EJECT;                           /*                       @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           COMMAND BUFFER AREA FOR THE LAST COMMAND       @G811PSS*/\n*/*           ENTERED                                        @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMCBUFA  CHAR(128),          /* COMMAND BUFFER AREA FOR LAST\n*                                      COMMAND ENTERED       @G811PSS*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           SAVE AREAS                                     @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMTLEN   FIXED(15),          /* TDCM LENGTH               @D1A*/\n*   2 *         FIXED(15),          /* PADDING FOR LENGTH        @D1A*/\n*   2 DCMAIDSV  CHAR(6),            /* SAVE AREA FOR AID FROM RMI\n*                                                            @G811PSS*/\n*   2 *         FIXED(15),          /* RESERVED              @G811PSS*/\n*   2 DCMTRDCM  PTR(31),            /* POINTER TO RDCM       @G860P2G*/\n*   2 DCMNXTOR  PTR(31),            /* ADDR OF NEXT ADJUNCT EXTENDED\n*                                      ORDER                 @G860PSS*/\n*   2 DCMCROW   FIXED(8),           /* CURRENT ROW NUMBER -1 @G860PSS*/\n*   2 DCMCCOL   FIXED(8),           /* CURRENT COL NUMBER -1 @G860PSS*/\n*   2 DCMMFRMF  BIT(8),             /* FULL CAPABILITY MFORM SAVEAREA\n*                                                                @L5C*/\n*     3 DCMMFRFT BIT(1),            /* DISPLAY TIME STAMP        @L5A*/\n*     3 DCMMFRFJ BIT(1),            /* DISPLAY JOB NAME          @L5A*/\n*     3 DCMMFRFS BIT(1),            /* DISPLAY SYSTEM NAME       @L5A*/\n*     3 *        BIT(5),            /* RESERVED                  @L5A*/\n*   2 DCMDELFC  CHAR(2),            /* FULL CAPABILITY DEL SAVE  @L2A*/\n*   2 DCMCONFC  CHAR(1),            /* FULL CAPABILITY CON SAVE  @L2A*/\n*   2 DCMSEGFC  FIXED(8),           /* FULL CAPABILITY SEG SAVE  @L2A*/\n*   2 DCMRNUMF  FIXED(8),           /* FULL CAPABILITY RNUM SAVE @L2A*/\n*   2 DCMRTMEF  FIXED(16),          /* FULL CAPABILITY RTME SAVE @L2A*/\n*   2 DCMMFRMM  BIT(8),             /* MESSAGE STREAM MFORM SAVEAREA\n*                                                                @L5C*/\n*     3 DCMMFRMT BIT(1),            /* DISPLAY TIME STAMP        @L5A*/\n*     3 DCMMFRMJ BIT(1),            /* DISPLAY JOB NAME          @L5A*/\n*     3 DCMMFRMS BIT(1),            /* DISPLAY SYSTEM NAME       @L5A*/\n*     3 *        BIT(5),            /* RESERVED                  @L5A*/\n*   2 DCMDELMS  CHAR(2),            /* MESSAGE STREAM DEL SAVE   @L2A*/\n*   2 DCMCONMS  CHAR(1),            /* MESSAGE STREAM CON SAVE   @L2A*/\n*   2 DCMSEGMS  FIXED(8),           /* MESSAGE STREAM SEG SAVE   @L2A*/\n*   2 DCMRNUMM  FIXED(8),           /* MESSAGE STREAM RNUM SAVE  @L2A*/\n*   2 DCMRTMEM  FIXED(16),          /* MESSAGE STREAM RTME SAVE  @L2A*/\n*   2 DCMQALEN  FIXED(15),          /* LENGTH OF AREA TO HOLD READ\n*                                      PARTITION QUERY           @D1A*/\n*   2 *(3)      FIXED(31),          /* RESERVED                  @L3C*/\n* @SPACE(1);                        /*                           @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/* THE DCMBUFER WORK AREA IS TO BE USED ON A MODULE-BY-MODULE BASIS */\n*/* ONLY.  THIS AREA MUST NOT BE USED AS A COMMUNICATION MEDIUM.     */\n*/* DOING SO WOULD DEFEAT THE PURPOSE OF GIVING THE DIDOCS           */\n*/* MODULES A SAFE WORK AREA.                                    @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMBUFER CHAR(168);           /* MODULE WORK AREA          @L3A*/\n*@EJECT;\n*/********************************************************************/\n*/*   CONTROL BLOCK VERSIONS - POSSIBLE VALUES OF DCMTVERN   @G860P2G*/\n*/********************************************************************/\n* DECLARE\n*   DCMTSP21    FIXED(8) CONSTANT(1), /* OS/VS2 HBB2102 LEVEL\n*                                                            @G860PSS*/\n*   DCMTS212    FIXED(8) CONSTANT(2), /* OS/VS2 JBB2125 LEVEL    @D1A*/\n*   DCMTS220    FIXED(8) CONSTANT(3); /* OS/VS2 JBB2220 LEVEL    @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           MAPPING OF A SCREEN CONTROL TABLE (SCT) ENTRY  @G811PSS*/\n*/*                                                                  */\n*/*           FIRST BYTE OF AN SCT                           @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*DECLARE\n*  1 DCMSCTA CHAR(4) BASED(DCMSCTB),                      /*     @L3C*/\n*   2 DCMSCTA1 BIT(8),             /* FIRST BYTE OF AN SCT       @L3A*/\n*    3 DCMMSGOR BIT(1),            /* WTOR MESSAGE DISPLAYED     @L3C*/\n*    3 DCMMSGIN BIT(1),            /* MESSAGE DISPLAYED IN LINE  @L3C*/\n*    3 DCMMSGCN BIT(1),            /* MESSAGE CONTINUED ON NEXT\n*                                     NEXT LINE                  @L3C*/\n*    3 DCMMSGJK BIT(1),            /* TO WRITE O-O-L DISPLAY FROM.\n*                                     MAY CONTAIN JUNK (SDS INTERFACE\n*                                     2)                         @L3C*/\n*    3 DCMMSGAD BIT(1),            /* MESSAGE CAN BE AUTO\n*                                     DELETED                    @L3C*/\n*    3 DCMMSGRD BIT(1),            /* REQUEST HAS SPECIFIED\n*                                     MESSAGE BE REMOVED         @L3C*/\n*    3 DCMMSGIF BIT(1),            /* INFORMATIONAL MESSAGE\n*                                     IN LINE                    @L3C*/\n*    3 DCMMSGST BIT(1),            /* END OF TABLE INDICATOR     @L3C*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           SECOND BYTE OF AN SCT                          @G811PSS*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSCTA2 BIT(8),             /* SECOND BYTE OF AN SCT      @L3A*/\n*    3 DCMMSGAC BIT(1),            /* ACTION MESSAGE             @L3C*/\n*    3 DCMMSGC7 BIT(1),            /* DESCRIPTOR CODE 7 MESSAGE  @L3C*/\n*    3 DCMMSGR2 BIT(1),            /* RESERVED - WAS DCMMSGDM\n*                                                                @L3C*/\n*    3 DCMMSGUA BIT(1),            /* URGENT ATTENTION MESSAGE\n*                                     DISPLAYED IN LINE          @L3C*/\n*    3 DCMMSGEA BIT(1),            /* EVENTUAL ACTION MESSAGE\n*                                     DISPLAYED IN LINE - WAS\n*                                     DCMMSGIR                   @L3C*/\n*    3 DCMMSGCT BIT(1),            /* THIS IS A CONTINUED LINE   @L3C*/\n*    3 DCMMSGPP BIT(1),            /* ISSUED BY PROBLEM PROGRAM  @L3C*/\n*    3 DCMMSGCL BIT(1),            /* CONTROL LINE OF AN\n*                                     IN-LINE MLWTO              @L3C*/\n* @SPACE(1);                             /*                      @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           THIRD BYTE OF AN SCT                               @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSCTA3 BIT(8),             /* THIRD BYTE OF AN SCT       @L3A*/\n*     3 DCMEJNUM BIT(1),           /* NUMBER IS IN THE LINE. THIS IS\n*                                     A COMMUNICATION BETWEEN\n*                                     IEECVETJ AND IEECVFT2.\n*                                     (IEECVETJ WILL LET IEECVFT2 KNOW\n*                                     FIRST TWO POSITIONS IN THE LINE\n*                                     CONTAIN THE NUMBER)        @P1A*/\n* @SPACE(1);                             /*                      @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/*           FOURTH BYTE OF AN SCT                              @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSCTA4 BIT(8);             /* FOURTH BYTE OF AN SCT      @L3A*/\n* @SPACE(1);                       /*                            @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/* MAPPING OF A SECONDARY SCREEN CONTROL TABLE (SSCT) ENTRY @G811PSS*/\n*/* FIRST BYTE OF AN SSCT                                        @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n*DECLARE\n*  1 DCMSCTC CHAR(2) BASED(DCMSCTD),\n*   2 DCMSCTC1 BIT(8),             /* FIRST BYTE OF AN SSCT      @L3A*/\n*    3 DCMSECCL BIT(1),            /* CONTROL LINE OF O-O-L\n*                                     DISPLAY                    @L3C*/\n*    3 DCMSECLL BIT(1),            /* LABEL LINE OF O-O-L\n*                                     DISPLAY                    @L3C*/\n*    3 DCMSECDL BIT(1),            /* DATA LINE OF O-O-L DISPLAY @L3C*/\n*    3 DCMSECBL BIT(1),            /* THIS LINE IS BLANKED       @L3C*/\n*    3 *        BIT(1),            /* RESERVED - WAS DCMSECXX\n*                                                                @L3C*/\n*    3 *        BIT(1),            /* RESERVED - WAS DCMSECYY\n*                                                                @L3C*/\n*    3 DCMSECDD BIT(1),            /* LINE RESERVED FOR DYNAMIC DISPLAY\n*                                                                @L3C*/\n*    3 DCMSECST BIT(1),            /* END OF TABLE INDICATOR         */\n* @SPACE (1);                            /*                      @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/* SECOND BYTE OF AN SSCT ENTRY                                 @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n*   2 DCMSCTC2 BIT(8);             /* SECOND BYTE OF AN SSCT     @L3A*/\n* @EJECT;                           /*                           @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/* MAP OF THE EXTENDED START EXTENDED FIELD ORDERS FOR 3270     @D1A*/\n*/* DEVICES                                                      @D1A*/\n*/*                                                                  */\n*/********************************************************************/\n*DECLARE\n*  1 DCMORDER BASED(DCMORDPT),    /* EXTENDED ORDERS           @L4C*/\n*    2 DCMSBAO  CHAR(3),            /* SET BUFFER ADDRESS FIELD\n*                                                            @G860PSS*/\n*      3 DCMSBA   FIXED(8),         /* SET BUFFER ADDRESS ORDER\n*                                                            @G860PSS*/\n*      3 DCMSBAA1 FIXED(8),         /* SET BUFFER ADDRESS ROW ADDR\n*                                                            @G860PSS*/\n*      3 DCMSBAA2 FIXED(8),         /* SET BUFFER ADDRESS COL ADDR\n*                                                            @G860PSS*/\n*    2 DCMSFEO  CHAR(8),            /* START FIELD EXTENDED FIELD\n*                                                            @G860PSS*/\n*      3 DCMSFE   FIXED(8),         /* START FIELD EXTENDED ORDER\n*                                                            @G860PSS*/\n*      3 DCMSFEN  FIXED(8),         /* NUMBER OF TYPE/VALUE PAIRS WHICH\n*                                      FOLLOW                @G860PSS*/\n*      3 DCMSFEFT FIXED(8),         /* FIELD ATTRIBUTE TYPE  @G860PSS*/\n*      3 DCMSFEFA FIXED(8),         /* FIELD ATTRIBUTE VALUE @G860PSS*/\n*      3 DCMSFECT FIXED(8),         /* COLOR ATTRIBUTE TYPE  @G860PSS*/\n*      3 DCMSFECA FIXED(8),         /* COLOR ATTRIBUTE VALUE @G860PSS*/\n*      3 DCMSFEHT FIXED(8),         /* HIGHLIGHTING ATTRIBUTE TYPE\n*                                                            @G860PSS*/\n*      3 DCMSFEHA FIXED(8);         /* HIGHLIGHTING ATTRIBUTE VALUE\n*                                                            @G860PSS*/\n* @EJECT;                                /*                      @D1C*/\n*/********************************************************************/\n*/*                                                                  */\n*/* MAP OF THE EXTENDED SET ATTRIBUTE ORDERS FOR 3270 DEVICES    @D1A*/\n*/*                                                                  */\n*/********************************************************************/\n* DCL 1 DCMSAO DEF(DCMSFEO),        /* SET ATTRIBUTE FIELD       @D1A*/\n*       2 DCMSA1  FIXED(8),         /* SET ATTRIBUTE ORDER       @D1A*/\n*       2 DCMSAHT FIXED(8),         /* HIGHLIGHTING ATTRIBUTE TYPE\n*                                                                @D1A*/\n*       2 DCMSAHA FIXED(8),         /* HIGHLIGHTING ATTRIBUTE VALUE\n*                                                                @D1A*/\n*       2 DCMSADAT CHAR(1),         /* DATA TO HIGHLIGHT         @D1A*/\n*       2 DCMSA2  FIXED(8),         /* SET ATTRIBUTE ORDER       @D1A*/\n*       2 DCMSARST FIXED(16) BDY(BYTE); /* CHARACTER\n*                                                ATTRIBUTE RESET @D1A*/\n* @SPACE(1);                             /*                      @L3A*/\n*/********************************************************************/\n*/*                                                                  */\n*/* MAP OF THE DOM INFORMATION                                   @L3A*/\n*/*                                                                  */\n*/********************************************************************/\n* DCL 1 DCMDOMEN BASED,             /* MAP OF A DOM ENTRY        @L3A*/\n*       2 DCMDTCB  PTR(31),         /* JOBSTEP TCB ADDRESS       @L3A*/\n*       2 DCMDOMID,                 /* FOUR BYTE DOM ID          @L3A*/\n*         3 DCMDSYID FIXED(8),      /* SYSTEM ID                 @L3A*/\n*         3 DCMDMID  CHAR(3),       /* DOM ID                    @L3A*/\n*       2 DCMDTKAS,                 /* TOKEN AND ASID            @L3A*/\n*         3 DCMDTOKN CHAR(4),       /* DOM TOKEN                 @L3A*/\n*         3 DCMDASID FIXED(16),     /* ASID                      @L3A*/\n*       2 DCMDRSVD CHAR(4);         /* RESERVED                  @L3A*/\n* @SPACE(1);                             /*                  @G811PSS*/\n*DECLARE DCMEND  (*) CHAR(1)   BASED\n*  (ADDR(DCMSTRT )+LENGTH(DCMSTRT ));\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEETDCM@": {"ttr": 3587, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IEETDCM\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 28MAY80 LDW.  PL/S DELETED.\n*     12/15/72          LEVEL=04\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                         WORK AND SAVE AREAS                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDCMSTRT  DSECT DCMSTPTR\n         DS    0F                  FULL WORD ALIGNMENT\n         DS    H                   DCM LENGTH\n         DS    H                   PADDING\n         SPACE 4\nDCMFLG1  DS    BL1                 DCM AREA INDICATORS\n         SPACE 2\nDCMOUTPT EQU   X'02'               DCM UPDATED FOR OUTPUT ONLY\n         SPACE 4\nDCMATI   DC    X'00'               SAVED UCB ATTN INDEX      MC SA55058\n         DC    AL2(0)              RESERVED                  MC SA55058\n         SPACE 2\nDCMWTINT DS    A                   DCMWTINT INITIAL VALUE\nDCMLNCNT DS    H                   NUMBER OF LINES TO BLANK  MC SA53462\nDCMLNNUM DC    X'00'               FIRST LINE TO BLANK       MC SA53462\n         DC    X'00'               RESERVED                  MC SA53462\nDCMPACK  DS    F                   AREA TO PLACE NUMBER FOR PACKING\nDCMCVBIN DS    F                   AREA FOR CONVERSION TO BINARY\n         SPACE 2\nDCMTIMES DS    BL1                 TIME RTNS INDICATOR BYTE\n         SPACE 2\nDCMTIMER EQU   X'80'               TIME ELAPSED FOR THIS DISPLAY\nDCMOPTTI EQU   X'40'               OPTIONS TO TI RTN\nDCMOTTMM EQU   X'10'               OPTIONS OR TI RTNS TO MSG MODULE\nDCMTASYN EQU   X'04'               TIMER SET FOR ASYNC ERROR MSG\nDCMOCTTI EQU   X'02'               OPEN-CLOSE TO TI RTN\nDCMRMTTI EQU   X'01'               ROLL MODE TO TIMER ROUTINE\n         EJECT\n         DS    XL1                 UNUSED\n         SPACE 2\nDCMELGN  DS    H                   ENTRY AREA LAST CHARACTER POINTER\n         SPACE 2\nDCMBUFAD DS    A                   POINTER TO BUFFER ADDRESS TABLE\nDCMDOMPK DS    A                   ADDRESS OF FIRST DOM NUMBER\nDCMAMTAB DS    A                   ADDRESS OF FIRST SCT ENTRY\nDCMADSEC DS    A                   ADDRESS OF FIRST SSCT ENTRY\nDCMADDRL DS    A                   ADDRESS OF LAST SCT ENTRY\nDCMASCRN DS    A                   POINTER TO SCREEN IMAGE BUFFER\nDCMLSCRN DS    A                   POINTER TO LAST BUFFER LINE\nDCMWTBUF DS    A                   SCREEN LENGTH POINTER\nDCMAINS  DS    A                   POINTER TO INSTRUCTION LINE\nDCMAENTR DS    A                   POINTER TO ENTRY AREA\nDCMAWARN DS    A                   POINTER TO WARNING LINE\nDCMADCHP DS    A                   ADDRESS OF CHANNEL PROGRAM AREA\nDCMPFKLN DS    A                   POINTER TO PFK LINE\nDCMCXSVE DS    F                   CXSA SAVE AREA\nDCMADOPN DS    A                   ADDRESS OF COMMAND OPERAND\nDCMDSAV  DS    5F                  SAVE AND WORK AREA\n         SPACE 2\n*           INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35                *\n*           FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER     *\nDCMWQEXP DS    0F                  ENSURE FULL WORD BOUNDARY\nDCMINLGN DS    H                   FIELD FOR INPUT LENGTH\nDCMMCSFL DS    H                   MCS FLAGS FIELD\nDCMINPUT DS    32F                 INPUT MESSAGE TEXT\n         SPACE 2\nDCMLGNTH DS    H                   LENGTH OF A LINE\nDCMBAINC DS    H                   ADDRESS TO INSERT CURSOR\nDCMIRCTR DS    H                   INTERVENTION REQ'D MSG COUNTER\nDCMBADLN DS    H                   BUFFER ADDR TO BEGIN MSG WRITE\nDCMBYTCT DS    H                   NUMBER OF BYTES TO WRITE\nDCMADNUM DS    H                   NEXT LINE NUMBER\nDCMAXLGN DS    H                   MAXIMUM LINE LENGTH\nDCMMSGAL DS    H                   NUMBER OF LINES IN MESSAGE AREA\nDCMRMINC DS    H                   INCREMENT INTO RMI\nDCMSCTCN DS    H                   LENGTH OF ONE SCT ENTRY\nDCMCORLN DS    H                   LENGTH OF DCM LINE IN CORE\n         DS    H                   TIME COUNTER\nDCMPFKNM DS    XL1                 NUMBER OF KEY BEING PROCESSED\nDCMPFKKN DS    XL1                 LIST KEY NUMBER\n         EJECT\nDCMDEL   DS    CL2                 DEL VALUE\nDCMCON   DS    CL1                 CON VALUE\nDCMSEG   DS    FL1                 SEG VALUE\nDCMDL    DS    FL1                 DISPLAY AREA OPTION\nDCMRNUM  DS    FL1                 ROLL NUMBER VALUE\nDCMRTME  DS    H                   ROLL TIME VALUE\n         SPACE 2\n*  DEFAULT VALUES FOR OPTIONS\nDCMSEGDF DS    FL1                 SEG DEFAULT\nDCMRNUMD DS    FL1                 RNUM DEFAULT\nDCMRTMED DS    H                   RTME DEFAULT\n         SPACE 2\nDCMASKEN DS    XL1                 ENTER MASK\nDCMASKCN DS    XL1                 CANCEL MASK\nDCMASKCR DS    XL1                 CURSOR MASK\nDCMASKLP DS    XL1                 LIGHT PEN MASK\nDCMASKPF DS    XL1                 PFK MASK\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                         COMMUNICATIONS AREA                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nDCMOPTST DS    BL1                 STATUS OF SCREEN CONTROL OPTIONS\n         SPACE 2\nDCMOPTVR EQU   X'80'               DELETE VERIFICATION  CON=(Y=1,N=0)\nDCMOPTAD EQU   X'40'               AUTOMATIC DELETION   DEL=(Y=1,N=0)\nDCMOPTSG EQU   X'20'               DEFAULT SEGMENT SPECIFIED  SEG=(0=0)\nDCMOPRLL EQU   X'10'               ROLL MODE  (Y=1,N=0)\n         SPACE 4\nDCMCS    DS    BL1                 OPEN/CLOSE REQUEST\n         SPACE 2\nDCMCSC   EQU   X'80'               CLOSE REQUEST\nDCMCSO   EQU   X'40'               OPEN REQUEST\n         SPACE 4\nDCMUTILT DS    BL1                 RESERVED\n         SPACE 2\nDCMUTILA EQU   X'80'               THESE BITS ARE\nDCMUTILB EQU   X'40'                 INITIALIZED AND USED\nDCMUTILC EQU   X'20'                 SOLELY WITHIN\nDCMUTILD EQU   X'10'                 EACH MODULE\nDCMUTILE EQU   X'08'               THEY ARE NEVER\nDCMUTILF EQU   X'04'               USED FOR INTERFACE\nDCMTEST1 EQU   X'02'               FOR TESTING\nDCMTEST2 EQU   X'01'               FOR TESTING\n         SPACE 4\nDCMDSTAT DS    BL1                 CURRENT DISPLAY STATUS\n         SPACE 2\nDCMDSTNM EQU   X'20'               MESSAGES ARE NUMBERED\nDCMDSTNH EQU   X'10'               MSGS NUMBERED - HOLD OPTION\nDCMDSINR EQU   X'08'               INTERVENTION REQ'D DELETION TRIED\nDCMDSAUT EQU   X'04'               AUTOMATIC DELETION TRIED\n         SPACE 4\nDCMMCSST DS    BL1                 MCS INTERFACE BYTE\n         SPACE 2\nDCMDUSE  EQU   X'80'               OUR SUPPORT IN CONTROL\nDCMOOMSS EQU   X'04'               MESSAGE STREAM ENTRY\nDCMOOSDS EQU   X'01'               STATUS DISPLAY ENTRY\n         SPACE 4\nDCMIOUNQ DS    BL1                 UNIQUE IO BYTE\n         SPACE 2\n*  UNIQUE INTERFACE BITS FOR 2260\nDCMIO226 EQU   X'80'               RMI PERFORMED\nDCMRPCUR EQU   X'40'               ADVANCE CURSOR TO BLANKS\nDCMFRSCN EQU   X'20'               PUT OUTPUT IN HOLD MODE\n*  UNIQUE INTERFACE BITS FOR 2250\nDCMRDARM EQU   X'10'               PERFORM READ AFTER RMI\nDCMW2250 EQU   X'08'               DEVICE IS 2250\nDCMINNOR EQU   X'04'               NORMAL INSTRUCTION LINE\nDCMINERR EQU   X'02'               ERROR INSTRUCTION LINE\n         SPACE 4\nDCMIOCM1 DS    BL1                 IO COMMUNICATIONS BYTE 1\n         SPACE 2\nDCMDORMI EQU   X'80'               ISSUE RMI\nDCMSOUND EQU   X'40'               SOUND ALARM\nDCMWRWRN EQU   X'20'               WRITE WARNING LINE\nDCMWRMSG EQU   X'10'               WRITE FULL MESSAGE AREA\nDCMWRPAR EQU   X'08'               WRITE PARTIAL MESSAGE AREA\nDCMWRINS EQU   X'04'               WRITE INSTRUCTION LINE\nDCMWRENT EQU   X'02'               WRITE ENTRY AREA\nDCMINSC  EQU   X'01'               INSERT CURSOR\n         EJECT\nDCMIOCM2 DS    BL1                 IO COMMUNICATIONS BYTE 2\n         SPACE 2\nDCMBLENT EQU   X'80'               BLANK ENTRY AREA\nDCMBLWRL EQU   X'40'               BLANK LEFT HALF WARNING LINE\nDCMBLWRR EQU   X'20'               BLANK RIGHT HALF WARNING LINE\nDCMINSSH EQU   X'10'               INIT AND SHIFT INSTRUCTION LINE\nDCMWINFD EQU   X'08'               WRITE INFORMATIONAL DISPLAY\nDCMERASE EQU   X'04'               PERFORM ERASE\nDCMIOCRD EQU   X'02'               PERFORM READ (2250,22DOC)\nDCMWRASY EQU   X'01'               WRITE ASYNC ERROR MSG TO MID-SCREEN\n         SPACE 4\nDCMIOCM3 DS    BL1                 IO COMMUNICATIONS BYTE 3\n         SPACE 2\nDCMOPRMI EQU   X'80'               RMI AFTER OPEN TO UNLOCK KEYBOARD\nDCMSSRG  EQU   X'40'               SUPPRESS START REGENERATION\nDCMWRPFK EQU   X'10'               DCM WRITE PFK AREA\nDCMPFKAT EQU   X'08'               PFK ATTENTION\nDCMRDPFK EQU   X'04'               PFK AREA READ\nDCMACPFK EQU   X'02'               TURN ACTIVE PFK LIGHTS ON\nDCMLTPFK EQU   X'01'               TURN ALL PFK LIGHTS ON\n         SPACE 4\nDCMLINEN DS    XL1                 LINE NUMBER TO BEGIN WRITE\n         SPACE 2\nDCMCULNO DS    XL1                 LINE IN ENTRY AREA TO INSERT CURSOR\n         SPACE 2\nDCMPOSCU DS    XL1                 POSITION TO INSERT CURSOR\n         SPACE 4\nDCMASYNC DS    BL1                 ASYN ERROR COMMUNICATIONS/RETRY BYTE\n         SPACE 2\nDCMASDA  EQU   X'40'               RETRY BIT\nDCMASIN  EQU   X'20'               RETRY BIT\nDCMASBA  EQU   X'10'               RETRY BIT\nDCMASLOG EQU   X'08'               LOG ASYNCHRONOUS ERROR\n         EJECT\nDCMCOM1  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMLPENT EQU   X'80'               ENTER BY LP OR CURSOR\nDCMIOPRD EQU   X'40'               READ PERFORMED\nDCMCOMRM EQU   X'20'               RMI PERFORMED\nDCMCOMAU EQU   X'10'               PERFORM AUTO DELETE\nDCMCOMRD EQU   X'08'               PERFORM REGULAR DELETE\nDCMCOMNM EQU   X'04'               NUMBER MESSAGES\nDCMCANCL EQU   X'01'               INDICATE CANCEL TO COMMAND ROUTINE\n         SPACE 3\nDCMCOM2  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMCM2I  EQU   X'80'               INPUT TO BE PROCESSED\nDCMSPLIT EQU   X'40'               MSG TO BE SPLIT\nDCMCOMAR EQU   X'20'               ACCEPTED REPLY\nDCMERPF  EQU   X'08'               ERASE PERF-PROC CAN NOW CLOSE DEVICE\nDCMCMIN5 EQU   X'04'               RETURN TO INTER. 5 FOR BLNK\nDCMCBLNK EQU   X'02'               BLANKING REQUIRED\nDCMAE    EQU   X'01'               CLEANUP FOR ASY ERROR\n         SPACE 3\nDCMCOM3  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMCDSP3 EQU   X'80'               DISPLAY 3 COMPLETED WORK\nDCMRTPFK EQU   X'40'               RETURN TO PFK ROUTINE\nDCMVLPFK EQU   X'20'               VERIFYING LAST COMMAND\nDCMXINT1 EQU   X'10'               ENTRY FOR INTERFACE 1 ROUTINE\nDCMOLUNV EQU   X'08'               O-O-L MSG CAUSED UNVIEW. MSG.\nDCMPFKWR EQU   X'04'               WRITE PFK UPDATES TO LIB\nDCMOLHLD EQU   X'02'               OUT OF LINE MESSAGES HELD  MB Y02958\nDCMCMIN7 EQU   X'01'               RETURN TO INTER. 7 FOR BLANKING\n         SPACE 3\nDCMCMSG1 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 1\n         SPACE 2\nDCMMSGWT EQU   X'80'               MOVE IN MESSAGE WAITING\nDCMUNMSG EQU   X'40'               MOVE IN UNVIEWABLE MESSAGE\nDCMSTEX  EQU   X'20'               MOVE IN STATUS EXISTS\nDCMCHOPT EQU   X'10'               MOVE IN CHANGE OPTIONS\nDCMELONG EQU   X'08'               MOVE IN ENTRY TOO LONG\nDCMWRCDL EQU   X'04'               MOVE IN CON=N,DEL=Y\nDCMDELNT EQU   X'02'               MOVE IN DEL UNCHANGED, NO TIMER\n         EJECT\nDCMCMSG2 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 2\n         SPACE 2\nDCMDLREQ EQU   X'80'               MOVE IN DELETION REQUESTED\nDCMRQINC EQU   X'40'               MOVE IN REQUEST INCONSISTENT\nDCMMSGCR EQU   X'20'               MOVE IN INVALID CURSOR OPERATION\nDCMINVOP EQU   X'10'               MOVE IN INVALID OPERAND\nDCMCILLP EQU   X'08'               MOVE IN ILLEGAL LP OPERATION\nDCMDELRI EQU   X'04'               MOVE IN DELETE REQUEST INCONSISTANT\nDCMASYRT EQU   X'02'               MOVE IN ASYN ERROR RETRYABLE\nDCMASYCD EQU   X'01'               MOVE IN ASYN ERROR MAYBE RETRYABLE\n         SPACE 4\nDCMCMSG3 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 3\n         SPACE 2\nDCMCMRLL EQU   X'80'               MOVE IN ROLL MODE MESSAGE\nDCMCDLR1 EQU   X'40'               NO DELETABLE MESSAGES\nDCMCDLR2 EQU   X'20'               INVALID RANGE\nDCMCDLR3 EQU   X'10'               SEG EQU TO ZERO\nDCMCDLR4 EQU   X'08'               DISPLAY NOT ON SCREEN\nDCMCDLR5 EQU   X'04'               INVALID OPERAND\nDCMDTBSY EQU   X'01'               COMMAND REJECTED - TASK BUSY\n         SPACE 4\nDCMCMSG4 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 4\n         SPACE 2\nDCMPFKNA EQU   X'80'               MOVE IN PFK NOT ALLOCATED FOR\nDCMPFKND EQU   X'40'               MOVE IN PFK NOT DEFINED\nDCMPFKNO EQU   X'20'               MOVE IN NO PFK ALLOCATION\nDCMPFKIP EQU   X'10'               MOVE IN PFK IN PROCESS\n         SPACE 4\nDCMSVC34 DS    BL1                 SVC 34 COMMUNICATION BYTE\n         SPACE 2\nDCMMYCMD EQU   X'80'               COMMAND TO BE HANDLED BY THIS CONS\nDCMINVLD EQU   X'40'               INVALID K COMMAND\nDCMTYPE1 EQU   X'20'               K COMMAND IS NOT ROUTABLE\n         SPACE 2\nDCMPAD   DS    X                   RESERVED COMMUNICATION BYTE   Y02958\nDCMIONDX DS    X                   INDEX FOR SELECTING THE    MB Y02958\n*                                  APPROPRIATE I/O ROUTINE    MB Y02958\n*                                  X'04' - M/165 CONSOLE      MB Y02958\n*                                  X'08' - 2250               MB Y02958\n*                                  X'0C' - 2260               MB Y02958\n*                                  X'10' - 3277               MB Y02958\nDCMTEST  DS    H                   RESERVED FOR TESTING       MB Y02958\n         EJECT\n**                                                                   **\n*                        MODULE ADDRESSES                             *\n**                                                                   **\n         SPACE 1                                              MB Y02958\nDCMIORTN DS    F                   APPROIATE I/O ROUTINE      MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\n*                 IEECVETH    EH   3066(M/165) IO ROUTINE     MB Y02958\n*                 IEECVETP    EP   2250 IO ROUTINE            MB Y02958\n*                 IEECVETR    ER   2260 IO ROUTINE            MB Y02958\n*                 IEECVETU    EU   3277 IO ROUTINE            MB Y02958\n         SPACE 1                                              MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\nDCMNPRZ  DS    F  IEECVFT1    F1   PROCESSOR 0 LOAD ONE       MB Y02958\nDCMNPROC DS    F  IEECVET1    E1   PROCESSOR ROUTINE LOAD ONE MB Y02958\nDCMNDSP1 DS    F  IEECVET2    E2   DISPLAY ROUTINE 1          MB Y02958\nDCMNDSP2 DS    F  IEECVET3    E3   DISPLAY ROUTINE 2          MB Y02958\nDCMNDSP3 DS    F  IEECVFT2    F2   DISPLAY ROUTINE 3          MB Y02958\nDCMNCMD1 DS    F  IEECVET4    E4   COMMAND ROUTINE 1          MB Y02958\nDCMNDEL1 DS    F  IEECVET6    E6   DELETE ROUTINE 1           MB Y02958\nDCMNDEL2 DS    F  IEECVET7    E7   DELETE ROUTINE 2           MB Y02958\nDCMNDEL3 DS    F  IEECVET8    E8   DELETE ROUTINE 3           MB Y02958\nDCMNDEL4 DS    F  IEECVET9    E9   DELETE ROUTINE 4           MB Y02958\nDCMNOPT1 DS    F  IEECVETA    EA   OPTIONS ROUTINE 1          MB Y02958\nDCMNPFK1 DS    F  IEECVFTA    FA   PFK ROUTINE 1              MB Y02958\nDCMNPFK2 DS    F  IEECVFTB    FB   PFK ROUTINE 2              MB Y02958\nDCMNERRO DS    F  IEECVETC    EC   ASYNCHRONOUS ERROR ROUTINE MB Y02958\nDCMNMSG1 DS    F  IEECVETD    ED   MESSAGE ROUTINE 1          MB Y02958\nDCMNMSG2 DS    F  IEECVETE    EE   MESSAGE ROUTINE 2          MB Y02958\nDCMNMSG3 DS    F  IEECVFTD    FD   MESSAGE ROUTINE 3          MB Y02958\nDCMNLPCR DS    F  IEECVETF    EF   LIGHT PEN/CURSOR SERVICE   MB Y02958\nDCMNOPCL DS    F  IEECVETG    EG   OPEN-CLOSE ROUTINE         MB Y02958\nDCMNCLN  DS    F  IEECVFTG    FG   CLEANUP MODULE             MB Y02958\nDCMNROLL DS    F  IEECVETJ    EJ   ROLL MODE ROUTINE          MB Y02958\nDCMNTIMR DS    F  IEECVETK    EK   TIMER INTERPRETER ROUTINE  MB Y02958\nDCMNINT1 DS    F  IEECVFTL    FL   INTERFACE 1 ROUTINE        MB Y02958\nDCMNINT2 DS    F  IEECVFTM    FM   INTERFACE 2 ROUTINE        MB Y02958\nDCMNINT3 DS    F  IEECVFTN    FN   INTERFACE 3 ROUTINE        MB Y02958\nDCMNINT4 DS    F  IEECVFTO    FO   INTERFACE 4 ROUTINE        MB Y02958\nDCMNINT5 DS    F  IEECVFTP    FP   INTERFACE 5 ROUTINE        MB Y02958\nDCMNINT6 DS    F  IEECVFTQ    FQ   INTERFACE 6 ROUTINE        MB Y02958\nDCMNINT7 DS    F  IEECVFTT    FT   INTERFACE 7 ROUTINE        MB Y02958\n         SPACE 2\nDCMTRACE DS    CL30                DIDOCS MODULE TRACE AREA   MB Y02958\nDCMTRAC2 EQU   DCMTRACE+2          TRACE MOVE FROM-ADDRESS    MB Y02958\nDCMTRLEN EQU   *-DCMTRACE          LENGTH FOR TRACE MOVE      MB Y02958\nDCMTREN1 DS    C                   1ST BYTE OF TRACE ENTRY    MB Y02958\nDCMTREN2 DS    C                   2ND BYTE OF TRACE ENTRY    MB Y02958\n         EJECT\n*  FIRST BYTE OF SCT ENTRIES\nDCMMSGWR EQU   X'80'               WTOR MESSAGE DISPLAYED IN LINE\nDCMMSGIN EQU   X'40'               MESSAGE DISPLAYED IN LINE\nDCMMSGCN EQU   X'20'               MESSAGE CONTINUED ON NEXT LINE\nDCMMSGJK EQU   X'10'               TO WRITE OUT-OF-LINE DISPLAY FROM\n*                                  MAY CONTAIN JUNK (SDS INTERFACE 2)\nDCMMSGAD EQU   X'08'               MESSAGE CAN BE DELETED AUTOMATICALLY\nDCMMSGRD EQU   X'04'               REQUEST HAS SPECIFIED MSG BE REMOVED\nDCMMSGIF EQU   X'02'               INFORMATIONAL MESSAGE IN LINE\nDCMMSGST EQU   X'01'               END OF TABLE INDICATOR\n         SPACE 2\n*  SECOND BYTE OF SCT ENTRIES\nDCMMSGAC EQU   X'80'               ACTION MESSAGE\nDCMMSGC7 EQU   X'40'               DESCRIPTOR CODE 7 MESSAGE\nDCMMSGDM EQU   X'20'               MESSAGE HAS BEEN DOMMED\nDCMMSGAR EQU   X'10'               MESSAGE IS AN ACCEPTED REPLY\nDCMMSGIR EQU   X'08'               INTERVENTION REQUIRED MESSAGE\nDCMMSGCT EQU   X'04'               CONTINUATION LINE\nDCMMSGPP EQU   X'02'               ISSUED BY PROBLEM PROGRAM\nDCMMSGCL EQU   X'01'               CONTROL LINE OF IN LINE MLWTO\n         SPACE 2\n*  SECONDARY SCT ENTRIES\nDCMSECCL EQU   X'80'               CONTROL LINE OF OUT OF LINE DISPLAY\nDCMSECLL EQU   X'40'               LABEL LINE OF OUT OF LINE DISPLAY\nDCMSECDL EQU   X'20'               DATA LINE OF OUT OF LINE DISPLAY\nDCMSECBL EQU   X'10'               THIS LINE IS BLANKED\nDCMSECDD EQU   X'02'               LINE RESERVED FOR DYNAMIC DISPLAY\nDCMSECST EQU   X'01'               END OF TABLE INDICATOR\nDCMEND   DS    0C                  END OF DCM\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJCVT": {"ttr": 3594, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* I COULDN'T FIND THIS DSECT IN ANY OF THE AVAILABLE MACLIBS, SO\n* I'M FAKING IT...   SDM 14JUN79\n         MACRO\n&LABEL   IKJCVT\n         LCLC  &NAME\n* GIS.MACLIB(IKJCVT) - GIBRALTAR INFO SERVICES - 14JUN79\n*    OS/VS2 RELEASE 3.7 COMMUNICATION VECTOR TABLE\n*    (SUBSET DEFINITION FOR TSO SERVICES)\n&NAME    SETC  'CVT'\n         AIF   (T'&LABEL EQ 'O').NAMEOK\n&NAME    SETC  '&LABEL'\n.NAMEOK  ANOP\nCVTPTR   EQU   16\n&NAME    DSECT\nCVTMAP   EQU   *\n         ORG   CVTMAP+X'1E0'\nCVTSCAN  DS    A              COMMAND SCAN\n         ORG   CVTMAP+X'20C'\nCVTPARS  DS    A              PARSE ROUTINE\n         ORG   CVTMAP+X'2DC'\nCVTDAIR  DS    A              DYNAMIC ALLOCATION INTERFACE ROUTINE\n         ORG   CVTMAP+X'2E0'\nCVTEHDEF DS    A              DEFAULT ROUTINE\n         ORG   CVTMAP+X'2E4'\nCVTEHCIR DS    A              CATALOG INFORMATION ROUTINE\n         ORG   CVTMAP+X'3D0'\nCVTEFF02 DS    A              TSO MESSAGE ISSUER ROUTINE\n         ORG\n* END OF IKJCVT DEFINITION\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEBEST": {"ttr": 3596, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJEBEST &CSECT=IBM\n         LCLA  &A,&B,&C,&D,&E\n         LCLA  &F                                                A42956\n         LCLC  &CNAME,&SCNAME,&ABBR,&LDMOD,&LABEL,&LABEL1,&LABEL2,&NMBR\n.*A035000,185000,230600-239000,255000                            A42956\n         AIF   ('&CSECT' NE 'IBM').CONT0\n&CNAME   SETC  'IKJEBMA8'     DEFINE CSECT NAME FOR IBM TABLE.\nIKJEBMA8 CSECT\n         ENTRY MA8IP002\n         ENTRY MA8LI002\n         AGO   .CONT1\n.CONT0   ANOP\n         AIF   ('&CSECT' NE 'USER').ERROR2\n&CNAME   SETC  'IKJEBMA9'     DEFINE CSECT NAME FOR USER TABLE.\nIKJEBMA9 CSECT\n.CONT1   ANOP\n&A       SETA  N'&SYSLIST\n         AIF   (&A EQ 0).END\n&B       SETA  1\n&F       SETA  1                                                 A42956\n.CONT2   ANOP\n&C       SETA  N'&SYSLIST(&B)\n         AIF   (&C LT 2 OR &C GT 3).ERROR1\n&E       SETA  K'&SYSLIST(&B,&C)\n&D       SETA  &E-1\n.*  THE FOLLOWING FLAGED INSTRUCTIONS WERE ADDED TO PROVIDE      A42956\n.*  UNIQUE LABELS, EVEN IF MODULES HAVE IDENTICAL LAST TWO       A42956\n.*  CHARACTERS IN ENTRY POINT NAMES.  THE LABELS FOR MODULES     A42956\n.*  IKJEBELI AND IKJEBEIP ARE UNCHANGED, SINCE THEY ARE          A42956\n.*  REFERENCED WITHIN IKJEBEMA.                                  A42956\n         AIF   ('&CSECT' NE 'IBM').CONT10                        A42956\n         AIF   ('&SYSLIST(&B,&C)'(&D,&E) EQ 'LI' OR                    X\n                '&SYSLIST(&B,&C)'(&D,&E) EQ 'IP' ).CONT11        A42956\n.CONT10  ANOP                                                    A42956\n&LABEL1  SETC  '&CNAME'(6,8).'@'.'&F'                            A42956\n&F       SETA  &F+1                                              A42956\n&LABEL2  SETC  '&CNAME'(6,8).'@'.'&F'                            A42956\n&F       SETA  &F+1                                              A42956\n         AGO   .CONT12                                           A42956\n.CONT11  ANOP                                                    A42956\n&LABEL1  SETC  '&CNAME'(6,8).'&SYSLIST(&B,&C)'(&D,&E).'001'\n&LABEL2  SETC  '&CNAME'(6,8).'&SYSLIST(&B,&C)'(&D,&E).'002'\n.CONT12  ANOP                                                    A42956\n&SCNAME  SETC  '&SYSLIST(&B,1)'\n         SPACE 2\n         DC    AL1(&LABEL1-*-1) LENGTH OF SUBCOMMAND NAME.\n         DC    C'&SCNAME' SUBCOMMAND NAME.\n&LABEL1  EQU   *\n         DC    AL1(&LABEL2-*-1) LENGTH OF ABBREVIATION.\n         AIF   (K'&SYSLIST(&B,2) EQ 0).CONT5\n&ABBR    SETC '&SYSLIST(&B,2)'\n         DC    C'&ABBR' ABBREVIATION FOR SUBCOMMAND.\n.CONT5   ANOP\n&LABEL2  EQU   *\n&LDMOD   SETC  '&SYSLIST(&B,&C)'\n         DC    CL8'&LDMOD' LOAD MODULE NAME.\n         AIF   (&B EQ &A).END\n&B       SETA  &B+1\n         AGO   .CONT2\n.END     ANOP\n         SPACE 2\n         DC    AL1(255)       END OF TABLE MARKER.\n         MEXIT\n.ERROR1  MNOTE 12,'INVALID TABLE ENTRY'\n         MEXIT\n.ERROR2  MNOTE 12,'INVALID KEYWORD VALUE'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT301": {"ttr": 3598, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT302": {"ttr": 3841, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJZT302  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT303": {"ttr": 3843, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJZT303   &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT304": {"ttr": 3845, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT305": {"ttr": 3847, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IKJZT305     &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INUSE": {"ttr": 3849, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".*.\n.*$MACRO=INUSE      DATE=05/10/80       SOURCE=UCLA(JCJ)\n.*  THIS IS AN COPY OF OACINUSE, UNDER A DIFFERENT NAME, AND WITH THE\n.*       OACGBLS AND OACPRTPM REMOVED/INTEGRATED\n.*\n.*  THIS MACRO WILL LIST OUT THE USING TABLE WHICH IS MAINTAINED BY\n.*       'USNGX' AND 'DROPX'.\n.*.\n         MACRO\n         INUSE &DUMMY,&PRINT=\n         GBLC  &USELAB(16),&USEREG(16)  PGM LABELS,REGISTERS USED\n         LCLA  &UCNT                    USE INDEX\n         LCLB  &GOTREG                  WHETHER WE FOUND REGS IN USE\n         AIF   (T'&PRINT EQ 'O').GO#USE SKIP PUSH IF NOT NEEDED\n         PUSH  PRINT\n         PRINT &PRINT\n.GO#USE  SPACE 1\n         MNOTE *,'THE FOLLOWING REGISTER(S) ARE IN USE:'\n         SPACE 1\n.USELOOP ANOP                           USED REGS LOOP\n&UCNT    SETA  &UCNT+1                  UP THE USE INDEX\n         AIF   ('&USEREG(&UCNT)' EQ '').CHKEND THIS ENTRY IN USE?\n         MNOTE *,'       &USELAB(&UCNT),&USEREG(&UCNT)'\n&GOTREG  SETB  1                        SAY WE FOUND SOMETHING\n.CHKEND  AIF   (&UCNT LT 16).USELOOP    CHECK FOR END OF ARRAY\n         AIF   (&GOTREG).FINI           LEAVE IF WE HAD REGS IN USE\n         MNOTE *,'       *** NONE ****'\n.FINI    SPACE 2\n         AIF   (T'&PRINT EQ 'O').EXIT   SKIP POP IF NOT NEEDED\n         POP   PRINT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOBD": {"ttr": 3851, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NFS     IOBD\n.*.\n.*$MACRO=IOBD       DATE=05/15/77       SOURCE=LDW\n.*\n.*  THIS MACRO DEFINES THE MAJOR FIELDS IN AN IOB.\n.*.\n         LCLC  &P\n&P       SETC  'IOB'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  ANOP\n&P.D     DSECT\n&P.FLAG1 DS    F\n&P.ECBA  DS    A\n&P.CSW   DS    2F\n&P.CCWA  DS    A\n&P.DCBA  DS    A\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOCB": {"ttr": 3853, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    IOCB\n.*.\n.*$MACRO=IOCB       DATE=09/00/79       SOURCE=SDC\n.*\n.*  UPDATES:\n.*    11/10/81  LDW  REMOVE EJECT AT FRONT\n.*    09/11/81  LDW  ADD IOCBTVAM FLAG   - VAM USER INDICATOR\n.*    06/25/80  LDW  ADD IOCBATIO FIELD  - ADDR OF LOADED TERMIO MODULE\n.*    02/11/80  LDW  ADD IOCBCATR BIT\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT DEFINES THE I/O CONTROL BLOCK USED\n.*  TO INTERFACE TO THE DCMS TERMINAL I/O SUBROUTINES.\n.*.\n         SPACE 1\n&NAME    DS    0D                       ------------- <=========I O C B\nIOCBFMT  DS    A                        | I O C B   |\nIOCBIMG  DS    A                        | I M A G E |\nIOCBDECB DS    A                        -------------\nIOCBCUR  DS    H                        CURSOR OFFSET FROM IMAGE START\n         SPACE 2\n*                                                                    *\n*        I O C B   C O N T R O L   F L A G S                         *\n*                                                                    *\nIOCBFLGS DS    X                        FLAG-S (SERVICE)\nIOCBFNWR EQU   X'80'                       NO WRITE\nIOCBFNRD EQU   X'40'                       NO READ\nIOCBFW8  EQU   X'C0'                       WAIT (CHECK) ONLY\nIOCBFNWT EQU   X'20'                       NO WAIT\nIOCBFCUR EQU   X'10'                       CURSOR ADDRESS SPECIFIED\nIOCBFNBP EQU   X'04'                       BEEP NOT OVERRIDDEN\nIOCBFNRR EQU   X'02'                       RESTORE NOT OVERRIDDEN\nIOCBFNRS EQU   X'01'                       RESET NOT OVERRIDDEN\n         SPACE 2\nIOCBFLGT DS    X                        FLAG-T (TYPE)\nIOCBTTSO EQU   X'80'                       TERMINAL RUNNING UNDER TSO\nIOCBTBSC EQU   X'40'                       TERMINAL RUNNING UNDER BTAM\nIOCBTDSP EQU   X'20'                       DISPLAY TERMINAL\nIOCBTHCY EQU   X'10'                       HARDCOPY TERMINAL\nIOCBTCMD EQU   X'08'                       TERMINAL IS OPERATOR CONSOLE\nIOCBTVAM EQU   X'04'                       TERMINAL RUNNING UNDER VAM\nIOCBTF02 EQU   X'02'\nIOCBTBAL EQU   X'01'                       IOCBLOAD SERVICE SUPPORTED\n*  NOTE:  IF IOCBTVAM IS SET, IOCBTTSO WILL ALSO BE SET (IN TERMIO1)\n         SPACE 2\nIOCBFLGL DS    X                        FLAG-L (LOG)\nIOCBLALL EQU   X'80'                       LOG ALL SCREENS\nIOCBLNOW EQU   X'40'                       LOG CURRENT SCREEN\nIOCBLBAD EQU   X'20'                       LOG FACILITY BROKEN\nIOCBLHEX EQU   X'10'                       LOG SCREEN IN HEX\nIOCBLDEC EQU   X'08'                       LOG SCREEN IN DECIMAL\nIOCBLF04 EQU   X'04'                       RESERVED\nIOCBLF02 EQU   X'02'                          ..\nIOCBLF01 EQU   X'01'                       RESERVED\n         EJECT\n*                                                                    *\n*        I O C B   C O N T R O L   F L A G S                         *\n*                                                                    *\n         SPACE 2\nIOCBFLGC DS    X                        FLAG-C  (CONTROL)\nIOCBCCLR EQU   X'80'                       CLEAR SCREEN ON ENTRY\nIOCBCDLS EQU   X'40'                       DISPLAY LOGO SCREEN\nIOCBCTIM EQU   X'20'                       DO NOT DISPLAY TIME STAMP\nIOCBCINT EQU   X'10'                       DO NOT DISPLAY INTERVAL\nIOCBCRAO EQU   X'08'                       RETURN AID ONLY ON PFK\nIOCBCFRA EQU   X'04'                       RETURN AID ONLY (FORCE ALL)\nIOCBCATR EQU   X'02'                       REFRESH ALL ATTRIBUTE BYTES\nIOCBCF01 EQU   X'01'                       RESERVED\n         SPACE 2\nIOCBFLGD DS    X                        FLAG-D  (DELAY)\nIOCBDYON EQU   X'80'                       IOCBWAIT DELAY TO BE USED\nIOCBDFRC EQU   X'40'                       FORCE DELAY IF TSO\nIOCBDASK EQU   X'20'                       PROMPT FOR INTERVAL UPDATE\nIOCBDPK2 EQU   X'10'                       PASS PFK2 OUT TO PROGRAM\nIOCBDLAY EQU   X'08'                       FORCE USE IOCBWAIT CURRENT\nIOCBDF04 EQU   X'04'                          ..\nIOCBDF02 EQU   X'02'                          ..\nIOCBDF01 EQU   X'01'                       RESERVED\n         SPACE 2\nIOCBFLGM DS    X                        FLAG-M (MISCELLANEOUS)\nIOCBMF80 EQU   X'80'                       RESERVED\nIOCBMF40 EQU   X'40'                       RESERVED\nIOCBMF20 EQU   X'20'                       RESERVED\nIOCBMF10 EQU   X'10'                       RESERVED\nIOCBMF08 EQU   X'08'                       RESERVED\nIOCBMF04 EQU   X'04'                       RESERVED\nIOCBMF02 EQU   X'02'                       RESERVED\nIOCBMF01 EQU   X'01'                       RESERVED\n         EJECT\n*                                                                    *\n*        A I D    A N D    S Y M B O L I C    V A L U E S            *\n*                                                                    *\n         SPACE 2\nIOCBAID  DS    X                        AID RETURNED AFTER READ\nAIDENT   EQU   X'7D'                    ENTER KEY\nAIDPF1   EQU   X'F1'                    PF KEY 01\nAIDPF2   EQU   X'F2'                    PF KEY 02\nAIDPF3   EQU   X'F3'                    PF KEY 03\nAIDPF4   EQU   X'F4'                    PF KEY 04\nAIDPF5   EQU   X'F5'                    PF KEY 05\nAIDPF6   EQU   X'F6'                    PF KEY 06\nAIDPF7   EQU   X'F7'                    PF KEY 07\nAIDPF8   EQU   X'F8'                    PF KEY 08\nAIDPF9   EQU   X'F9'                    PF KEY 09\nAIDPF10  EQU   X'7A'                    PF KEY 10\nAIDPF11  EQU   X'7B'                    PF KEY 11\nAIDPF12  EQU   X'7C'                    PF KEY 12\nAIDPA1   EQU   X'6C'                    ATTENTION\nAIDPA2   EQU   X'6E'                    RESHOW\nAIDCAN   EQU   AIDPA2                   CANCEL\nAIDPA3   EQU   X'6B'                    PA3\nAIDCLR   EQU   X'6D'                    CLEAR\nAIDNULL  EQU   X'00'                    NULL INPUT SIGNAL AID\n         SPACE 2\nIOCBWCC  DS    X                        WRITE CONTROL CHARACTER\nIOCBWBP  EQU   X'04'                    BEEP\nIOCBWRR  EQU   X'02'                    WCC RESTORE\nIOCBWRS  EQU   X'01'                    WCC RESET MDT\nIOCBRSV1 DS    XL2                      RESERVED FOR FUTURE USE\nIOCBISWK DS    0CL8\nIOCBFWDW DS    F                        TIMESTAMP WORK AREA\nIOCBPSGN DS    X                           .. ..  ..\nIOCBRSV2 DS    XL3\n         EJECT\nIOCBTDCB DS    F                        TDCB POINTER\nIOCBLOG  DS    F                        LOG WORK AREA POINTER\nIOCBWAIT DS    F                        DELAY SERVICE COUNTER\nIOCBTERM DS    0CL12                    TERMINAL TYPE WORK AREA\nIOCBROWS DS    F                        ROWS IN DISPLAY\nIOCBCOLS DS    F                        COLS IN DISPLAY (LINESIZE)\nIOCBXBUF DS    F                        TGET EXTRA BUFFER\nIOCBCTRL DS    XL4                         .. ..  ..\nIOCBTIME DS    CL24                     TIMESTAMP WORK AREA\nIOCBNAME DS    CL8                      NAME OF CURRENT MONITOR\nIOCBSHOW DS    CL11                     INTERVAL DISPLAY AREA\nIOCBITVL DS    CL12\nIOCBSSTH DS    CL5                      INTERVAL WORK AREA\nIOCBEND  DS    CL8                      DYNAMIC INPUT SCRATCH AREA\nIOCBLOAD DS    F                        SERVICE ROUTINE ADDRESS\nIOCBTEST DS    F                        CONTROL ROUTINE ADDRESS\nIOCBATIO DS    A                        ADDRESS OF LOADED TERMIO MODULE\n         DS    0D\nSTAMPLEN EQU   IOCBEND-IOCBCTRL\n         SPACE 3\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRACCT@": {"ttr": 3857, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IRACCT &DSECT=YES\n*\n* THIS IS A COPY IF THE BASE SYSTEM MACRO, KLUDGED UP FOR SP1.1\n* IF WE EVER GET THE PVTMACS FOR SP, DELETE THIS MACRO\n* (COMMENTS AND PL/S DELETED)\n*/*      DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER CPU             */\n*/*                         MANAGEMENT CONTROL TABLE                 */\n         AIF   ('&DSECT' EQ 'YES').CCT001\nCCT      DS    0D -                CPU MANAGEMENT CONTROL TABLE\n         AGO   .CCT002\n.CCT001  ANOP\nCCT      DSECT , -                 CPU MANAGEMENT CONTROL TABLE\n.CCT002  ANOP\nCCTCCT   DC    CL4'CCT' -          ACRONYM IN EBCDIC -CCT-\n*\n*        CPU CONTROL CONSTANTS\n*\n* TIME INTERVAL CONSTANTS - 1000 UNITS = APPROXIMATELY 1 SECOND\nCCCAPMET DC    F'200' -            MINIMUM USER EXECUTION INTERVAL FOR\n*                                  MEAN TIME TO WAIT COMPUTATION\nCCCR00   DC    F'0'                RESERVED\nCCCMNSIN DC    F'5000' -           MINIMUM INTERVAL FOR COMPUTING\n* APG DISPATCHING PRIORITY COMPUTATION CONSTANTS\nCCCR000  DC    H'0'                RESERVED\nCCCAPGHI DC    H'0'                APG HIGH VALUE\nCCCAPLDP DC    H'1' -              DP FOR UNDISPATCHED APG USERS\nCCCAPGLO DC    H'0'                APG LOW  VALUE\nCCCAPLEN DC    H'0'                LENGTH OF MTW GROUPS 1\nCCCR01   DC    H'0'                RESERVED\nCCCR02   DC    H'0'                RESERVED\n* CPU LOAD BALANCING RECOMMENDATION VALUE COMPUTATION CONSTANTS\nCCCUTHIT DC    H'100' -            HIGH UTILIZATION IMBALANCE\n*                                  THRESHOLD\nCCCUTLOT DC    H'80' -             LOW UTILIZATION IMBALANCE\n*                                  THRESHOLD\nCCCHISCF DC    H'6400' -           HIGH THRESHOLD SCALING FACTOR\nCCCLOSCF DC    H'1' -              LOW THRESHOLD SCALING FACTOR\nCCCMAXRV DC    H'128' -            MAXIMUM CPL REC VALUE\nCCCMINRV DC    H'-128' -           MINIMUM CPL REC VALUE\nCCCR03   DC    H'0'                RESERVED\nCCCR04   DC    H'0'                RESERVED\nCCCSCFC1 DC    H'10' -             SYSTEM WAIT % AVERAGING FACTOR\nCCCSCFC2 DC    H'11' -             CCCSCFC1+1\n* CPU DEPENDENT DEMAND PAGING RATE THRESHOLDS (IN PAGES PER SECOND)\nCCCPRLOT DC    FL4'0'                   LOW THRESHOLD PAGING RATES\nCCCPRHIT DC    FL4'0'                   HIGH THRESHOLD PAGING RATES\nCCCPRDFL DC    FL4'0'                   DEFAULT LOW PAGING RATES\nCCCPRDFH DC    FL4'0'                   DEFAULT HIGH PAGING RATES\nCCCPRMPF DC    H'0'                     MP MULTIPLIER...\nCCCSCFAC DC    F'0'                     REC VALUE SCALING FACTOR\n*\n*        CPU CONTROL VARIABLES\n*\nCCVRBSWT DC    F'0' -              RECENT BASE SYSTEM WAIT TIME\nCCCSCRND DC    F'0' -              REC VALUE ROUNDING FACTOR\nCCVRBSTD DC    F'0' -              RECENT BASE TIME OF DAY\nCCVRVSWF DC    F'0' -              SYSTEM WAIT FACTOR FOR CPL\nCCVPGCPF DC    F'0' -              PAGE CP SERVICE FACTOR FOR CPL\nCCVEJST  DC    F'0' -              LOW PRIORITY USER JOB STEP TIME\nCCVIMBBT DC    F'0' -               TIME OF LAST CPU IMBALANCE\nCCVUTILS DC    H'50' -             SAVE AREA FOR CCVUTILP\nCCVUTILP DC    H'50' -             SYSTEM CPU UTILIZATION\nCCVLGUTL DC    AL2(50*256) -       LONG TERM UTILIZATION * 256\nCCVLGFMC DC    H'10' -             AVERAGE AVAILABLE FRAME COUNT\nCCVENQCT DC    H'0' -              NO. OF USERS NON SWAPPABLE FOR\nCCVCPUCT DC    H'0' -              NUMBER OF ONLINE CPUS\nCCCMNSWP DC    F'0' -              MIN INTERVAL TO PRESERVE REC VAL TO\n*                                       CORRECT IMBALANCE\n*\n*        CPU CONTROL FLAGS\n*\nCCTFLG1  DC    B'0' -\nCCTALL   EQU   BIT0 -              LOW PRIORITY USER NOT DISPATCHED\nCCTCPUOT EQU   BIT1 -              CPU OUT OF BALANCE\nCCTTSUP  EQU   BIT2 -              TS GROUP CHAPPED UP\nCCTROT   EQU   BIT3 -              ACTIVE ROTATE DP FOUND\nCCTFLG2  DC    3B'0' -             RESERVED\n* ASCBCHAP PARAMETER LISTS\nCCTCHPRT DC    0F'0'\nCCTCRRSV DC    X'00'\nCCTCRFCN DC    X'00'\nCCTCRENT DC    H'0'\nCCTCRPTR DC    F'0'\nCCTCRPRT DC    XL16'00'\nCCTCDRV0 DC    X'00'\nCCTCDFCN DC    X'00'\nCCTCDRV1 DC    X'00'\nCCTCDTSG DC    X'00'\nCCTCDPTR DC    F'0'\nCCTCHPUP DC    XL8'00'\nCCTCURV0 DC    X'00'\nCCTCUFCN DC    X'00'\nCCTCURV1 DC    X'00'\nCCTCUTSG DC    X'00'\nCCTCUPTR DC    F'0'\nCCCAPDIV DC    F'0'\nCCCSIGUR DC    F'0'\nCCTRSVA  DC    A(0)\nCCTRSVB  DC    A(0)\nCCCEND   EQU   *  -                END OF CCT CONSTANTS\nCCVEND   EQU   *  -                END OF CCT\n         MEND  , -                                                   */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRADMDT@": {"ttr": 3860, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*        %GOTO DMDTPLS1; /*\n         MACRO\n         IRADMDT  &DSECT=YES                                        */\n*%DMDTPLS1:  ;\n*/* MACCOMP Z-4 SC1CX/PKD16                                          */\n*/* MACSTAT Z-4 75007/Z40BPSS                                        */\n*/********************************************************************/\n*/* MACRO NAME - IRADMDT                                             */\n*/*                                                                  */\n*/* DESCRIPTIVE NAME - DOMAIN TABLE DESCRIPTION                      */\n*/*                                                                  */\n*/* COPYRIGHT - NONE                                                 */\n*/*                                                                  */\n*/* STATUS - OS/VS2 RELEASE 4, 07/30/75                              */\n*/*                                                                  */\n*/* FUNCTION - THE DMDT SPECIFIES THE DOMAINS INTO WHICH             */\n*/*            USER TRANSACTIONS ARE DIVIDED, AND FOR EACH           */\n*/*            DOMAIN, THE CONSTRAINTS ON ITS PARTICIPATION          */\n*/*            IN THE CHANGING OF THE MULTI-PROGRAMMING              */\n*/*            LEVEL AND CURRENT DOMAIN CONTROL STATUS.              */\n*/*                                                                  */\n*/*            THE DOMAIN TO BE USED FOR A TRANSACTION IS            */\n*/*            INDICATED BY THE -WPGPDMN- FIELD OF THE               */\n*/*            CURRENT PERIOD WITHIN THE APPLICABLE PERFORMANCE      */\n*/*            GROUP DESCRIPTION.                                    */\n*/*                                                                  */\n*/* METHOD-OF-ACCESS - THE ADDRESS OF THE DOMAIN TABLE ENTRY FOR A   */\n*/*                    PARTICULAR SYSTEM USER IS OBTAINED BY ADDING  */\n*/*                    THE OFFSET IN THE -OUCBDMO- FIELD OF THE      */\n*/*                    SYSTEM RESOURCES MANAGER USER CONTROL BLOCK   */\n*/*                    TO THE ADDRESS IN THE -WMSTDMDT- FIELD OF THE */\n*/*                    WORKLOAD MANAGER SPECIFICATION TABLE.         */\n*/********************************************************************/\n*        %GOTO DMDTPLS2; /*\n         AGO   .DMDTAL1                                              */\n*/********************************************************************/\n*/*                                                                  */\n*/* INVOCATION PARAMETERS AND/OR KEYWORDS =                          */\n*/*                                                                  */\n*/*   BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.                 */\n*/*                                                                  */\n*/*     USING ON DMDT GIVES ADDRESSABILITY TO ALL SYMBOLS            */\n*/*                                                                  */\n*/*   PLS - %DMDTLEVL='USERLEVL' IF THE DMDT MAPPING IS TO BE        */\n*/*         CONCATENATED WITH A PREVIOUS DECLARATION,WITH THE        */\n*/*         DMDT BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.       */\n*/*       - %DMDT9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED      */\n*/*                                                                  */\n*/*         TO ACCESS AS A STANDALONE STRUCTURE DCL DMDTPTR PTR.     */\n*/*                                                                  */\n*/*  CHANGE ACTIVITY =@Z40BFEM                                       */\n*/*                                                                  */\n*/*                                                                  */\n*/*                                                                  */\n*/********************************************************************/\n*/*                                                                  */\n.DMDTAL1 ANOP\n         SPACE 1\n         AIF  ('&DSECT' EQ 'NO').DMDTAL2\nDMDT     DSECT\n         AGO  .DMDTAL3\n.DMDTAL2 ANOP\n         DS   0F\nDMDT     EQU  *\n.DMDTAL3 ANOP\n         SPACE 1\nDMDTNO   DS   AL1                  DOMAIN NUMBER\nDMDTLO   DS   AL1                  MIN MPL LEVEL\nDMDTHI   DS   AL1                  MAX MPL LEVEL\nDMDTWT   DS   AL1                  WEIGHTING FACTOR\nDMDTMPLT DS   H                    CURRENT MPL TARGET\nDMDTRUA  DS   H                    AVE # OF READY USERS\nDMDTGOOU DS   H                    CURRENT # OF USERS GOING OUT\nDMDTCMPL DS   H                    CURRENT MPL\nDMDTOUTU DS   H                    CURRENT # USERS ON OUT Q\nDMDTINCU DS   H                    CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS   F                    ACCUMULATOR FOR READY USER COUNT\nDMDTEND  DS   0F                   END OF DMDT\nDMDTLEN  EQU  DMDTEND-DMDT         LENGTH OF DMDT\n         MEND\n*                                                                    */\n*%DMDTPLS2:  ;\n*        %IF DMDT9999 \u00ac= ','       /* DOES STRUCTURE CONTINUE        */\n*            %THEN %DMDT9999 = ';';/* NO, END DECLARE STATEMENT      */\n*        %IF DMDTLEVL \u00ac= ''        /* IS STRUCTURE CONCATENATED      */\n*            %THEN %GOTO DMDTPLS3; /* YES, OMIT DECLARE STATEMENT    */\n*   DCL\n*     1 DMDT BASED(DMDTPTR) BDY(WORD),\n*        %GOTO DMDTPLS4;           /* SKIP USER GIVEN LEVEL          */\n*%DMDTPLS3:  DMDTDUM = DMDTLEVL||' DMDT';  /* PICK UP GIVEN LEVEL    */\n*     DMDTDUM BDY(WORD),\n*%DMDTPLS4:   ;\n*        10 DMDTNO FIXED(8),       /* DOMAIN NUMBER                  */\n*        10 DMDTLO FIXED(8),       /* MIN MPL LEVEL                  */\n*        10 DMDTHI FIXED(8),       /* MAX MPL LEVEL                  */\n*        10 DMDTWT FIXED(8),       /* WEIGHTING FACTOR               */\n*        10 DMDTMPLT FIXED(15),    /* CURRENT MPL TARGET             */\n*        10 DMDTRUA FIXED(15),     /* AVE # OF READY USERS           */\n*        10 DMDTGOOU FIXED(15),    /* CURRENT # OF USERS GOING OUT   */\n*        10 DMDTCMPL FIXED(15),    /* CURRENT MPL                    */\n*        10 DMDTOUTU FIXED(15),    /* CURRENT # USERS ON OUT Q       */\n*        10 DMDTINCU FIXED(15),    /* CURRENT # SWAPPABLE INCORE     */\n*/*                                   USERS                          */\n*        10 DMDTRUC FIXED(31),     /* ACCUMULATOR FOR READY USER     */\n*/*                                   AVERAGE                        */\n*        10 DMDTEND CHAR(0) BDY(WORD)  /* END OF DMDT                */\n*     DMDT9999\n*     %DMDTLEN = 'LENGTH(DMDT)';   /* SYMBOLIC FOR DMDT LENGTH       */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRAICT@": {"ttr": 4098, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*        %GOTO ICTPLS1;            /*\n         MACRO\n         IRAICT &DSECT=YES\n*                                                                    */\n*%ICTPLS1 : ;\n*/*                                                                  */\n*/* MACCOMP Z-4 SC1CX/PKD16                                          */\n*/* MACSTAT Z-4 75007/Z40BPSS                                        */\n*/********************************************************************/\n*/*                                                                  */\n*/*      MACRO NAME - IRAICT                                         */\n*/*                                                                  */\n*/*      DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER I/O             */\n*/*                         MANAGEMENT CONTROL TABLE                 */\n*/*                                                                  */\n*/*      STATUS - OS/VS2 RELEASE 4, 09/17/75, LEVEL=1                */\n*/*                                                                  */\n*/*      METHOD OF ACCESS                                            */\n*/*        BAL - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.     */\n*/*              USING ON ICT GIVES ADDRESSIBILITY FOR ALL SYMBOLS.  */\n*/*        PLS - TO ACCESS AS STAND ALONE STRUCTURE DCL ICTPTR PTR.  */\n*/*              TO CONCATENATE WITH PREVIOUSLY DEFINED STRUCTURE    */\n*/*                SET %ICTLEVEL TO DESIRED STRUCTURE LEVEL.         */\n*/*              TO PREVENT STRUCTURE FROM BEING CLOSED,             */\n*/*                SET %ICT9999=','.                                 */\n*/*                                                                  */\n*/********************************************************************/\n*/*                                                                  */\n*        %GOTO ICTPLS2;            /*\n         AIF   ('&DSECT' EQ 'YES').ICT001\nICT      DS    0D -                I/O MANAGEMENT CONTROL TABLE\n         AGO   .ICT002\n.ICT001  ANOP\nICT      DSECT , -                 I/O MANAGEMENT CONTROL TABLE\n.ICT002  ANOP\nICTICT   DC    CL4'ICT' -          ACRONYM IN EBCDIC -ICT-\n*\n*        I/O CONTROL CONSTANTS\n*\nICCMRSV1 DC    F'0' -               RESERVED                   @ZM43085\nICCMXICT DC    F'60000' -          MAX TIME HEAVY I/O USER REMAIN\n*                                  IN MAIN STORAGE WITHOUT BEING\n*                                  MONITORED FOR I/O USAGE\nICCMNUIN DC    F'10000' -          MIN INT FOR USER I/O MONITORING\nICCMNSWP DC    F'30000' -          MINIMUM SWAP OUT TIME FOR I/O\n*                                  IMBALANCE CORRECTION\nICCLCLST DC    A(0)                POINTER TO LAST LCH TABLE ENTRY\nICCLCHN  DC    H'0' -              LOGICAL CHANNEL COUNT\nICCMNIOR DC    H'5' -              MIN I/O RATE FOR USER I/O MONITORING\nICCRVSCF DC    H'1' -              IOL REC VALUE SCALING FACTOR\nICCMAXRV DC    H'128' -            MAXIMUM IOL RECOMMENDATION VALUE\nICCMINRV DC    H'-128' -           MINIMUM IOL RECOMMENDATION VALUE\nICCDASF1 DC    H'10' -             AVERAGING FACTOR FOR LCH UTILIZATION\n*                                  COMPUTATION\nICCDASF2 DC    H'11' -             ICCDASF1+1\n* LCH UTILIZATION IMBALANCE THRESHOLDS (EXPRESSED AS PERCENTAGES)\nICCHIUTH DC    H'0' -              HIGH IMBALANCE THRESHOLD\nICCLOUTH DC    H'0' -              LOW IMBALANCE THRESHOLD\nICCDAUTH DC    H'0' -              THRESHOLD FOR DEVICE ALLOCATION *256\n* LCH UTILIZATION IMBALANCE THRESHOLD INITIALIZATION VALUES FOR UNI\n* OR MULTIPROCESSOR CASES\nICCINHIT DS    0HL4 -              HIGH THRESHOLD INITIALIZATION VALUES\nICCINHI1 DC    H'70' -               UNIPROCESSOR CASE\nICCINHI2 DC    H'80' -               MULTIPROCESSOR CASE\nICCINLOT DS    0HL4 -              LOW THRESHOLD INITIAIZATION VALUES\nICCINLO1 DC    H'30' -               UNIPROCESSOR CASE\nICCINLO2 DC    H'40' -               MULTIPROCESSOR CASE\nICCINDAT DS    0HL4 -              DEV ALLOCATION INTIIAL VALUES\nICCINDA1 DC    AL2(70*256) -         UNIPROCESSOR CASE\nICCINDA2 DC    AL2(80*256) -         MULTIPROCESSOR CASE\nICCSIGUP DC    H'5' -              SIGNIFICANT USER LCH USAGE\n*                                  PERCENTAGE\nICCSRSV2 DC    H'0' -              RESERVED                 @ZM43085\nICCEDSUT DC    AL2(05*256) -       EST DATASET UTILIZ IMPACT   @Z30WIAW\nICCRSV01 DC    HL2'0' -            RESERVED                    @Z40BPCH\nICCEND   DS    0F -                END OF ICT CONSTANTS\n*\n*        I/O CONTROL VARIABLES\n*\nICVLUTBT DC    F'0' -              LCH UTILIZATION COMPUTATION BASE\n*                                  TIME\nICVLCBPT DC    BL4'0' -            LCH IMBALANCE BIT PATTERN\nICVOLCBT DC    BL4'0' -            OVERUTILIZED LCH BIT PATTERN\nICVULCBT DC    BL4'0' -            UNDERUTILIZED LCH BIT PATTERN\nICVIRSV3 DC   F'0' -               RESERVED                  @ZM43085\n*\n*        I/O CONTROL FLAGS\n*\nICTFLAGS DC    B'0' -              I/O CONTROL FLAGS\nICTDRSV4 EQU   BIT0 -               RESERVED                  @ZM43085\nICTIOL   EQU   BIT1                 I/O LOAD BALANCING ACTIVE FLAG\nICTIOOT  EQU   BIT3                SOME LOGICAL CHANNELS OUT OF BALANCE\n*                                                              @Z40BPCH\nICTRSVB1 DC    B'0' -               RESERVED\nICTRSVB2 DC    B'0' -               RESERVED                   @Z40BPCH\nICTRSVB3 DC    B'0' -               RESERVED                   @Z40BPCH\nICTEND   DS    0D -                END OF ICT\nICTLEN   EQU   ICTEND-ICT -        LENGTH OF ICT\n         MEND  , -                                                   */\n*%ICTPLS2 : ;\n*    %IF ICT9999\u00ac=','              /* IF THIS IS LAST BLOCK          */\n*      %THEN ICT9999=';';          /* THEN CLOSE DECLARE STATEMENT   */\n*    %IF ICTLEVEL\u00ac=''              /* IF MINOR LEVEL IS SPECIFIED,   */\n*      %THEN %GOTO ICTPLS3;        /* SKIP MAJOR DECLARE             */\n*DECLARE                           /*                                */\n*  1 ICT BASED(ICTPTR)             /*     I/O CONTROL TABLE          */\n*    %GOTO ICTPLS4;                /* MAJOR STRUCTURE                */\n*%ICTPLS3: ICTDUM=ICTLEVEL||' ICT'; /* CONCATENATE AS MINOR STRUCTURE*/\n*  ICTDUM                          /*     I/O CONTROL TABLE          */\n*%ICTPLS4:;\n*          BDY(DWORD),\n*      5 ICTICT CHAR(4),           /* ACRONYM IN EBCDIC -ICT-        */\n*/*                                                                  */\n*/*      I/O CONTROL CONSTANTS                                       */\n*/*                                                                  */\n*      5 ICCMRSV1 FIXED(31),       /* RESERVED              @ZM43085*/\n*      5 ICCMXICT FIXED(31),       /* MAX TIME HEAVY I/O USER CAN\n*                                     REMAIN IN MAIN STORAGE WITHOUT\n*                                     BEING MONITORED FOR I/O USAGE  */\n*      5 ICCMNUIN FIXED(31),       /* MIN INT FOR USER I/O MONITORING*/\n*      5 ICCMNSWP FIXED(31),       /* MINIMUM SWAP OUT TIME FOR I/O\n*                                    IMBALANCE CORRECTION            */\n*      5 ICCLCLST PTR(31),         /* POINTER TO LAST RLCT TABLE\n*                                     ENTRY                          */\n*      5 ICCLCHN FIXED(15),        /* LOGICAL CHANNEL COUNT          */\n*      5 ICCMNIOR FIXED(15),       /* MIN I/O RATE FOR USER I/O\n*                                     MONITORING                     */\n*      5 ICCRVSCF FIXED(15),       /* IOL REC VALUE SCALING FACTOR   */\n*      5 ICCMAXRV FIXED(15),       /* MAXIMUM IOL RECOMMENDATION VAL */\n*      5 ICCMINRV FIXED(15),       /* MINIMUM IOL RECOMMENDATION VAL */\n*      5 ICCDASF1 FIXED(15),       /* AVERAGING FACTOR FOR LCH\n*                                     UTILIZATION COMPUTATION        */\n*      5 ICCDASF2 FIXED(15),       /* ICCDASF1+1                     */\n*/* LCH UTILIZATION IMBALANCE THRESHOLDS                             */\n*      5 ICCHIUTH FIXED(15),       /* HIGH IMBALANCE THRESHOLD       */\n*      5 ICCLOUTH FIXED(15),       /* LOW IMBLAANCE THRESHOLD        */\n*      5 ICCDAUTH FIXED(15),       /* THRESHOLD FOR DEVICE ALLOCATION\n*                                     SYSEVENT * 256                 */\n*/* LCH UTILIZATION THRESHOLD INITIALIZATION VALUES FOR UNI OR MULTI\n*    PROCESSOR CASES                                                 */\n*      5 ICCINHIT (2) FIXED(15),   /* HIGH THRESHOLD INIT VALUES     */\n*      5 ICCINLOT (2) FIXED(15),   /* LOW THRESHOLD INIT VALUE S     */\n*      5 ICCINDAT (2) FIXED(15),   /* DEV ALLOC THRESHOLD INIT VALUES*/\n*      5 ICCSIGUP FIXED(15),       /* SIGNIFICANT USER LCH USAGE\n*                                     PERCENTAGE                     */\n*      5 ICCSRSV2 FIXED(15),       /* RESERVED               @ZM43085*/\n*      5 ICCEDSUT FIXED(15),        /* EST DD UTILIZ IMPACT  @Z30WIAW*/\n*      5 ICCRSV01 CHAR(2) BDY(HWORD), /* RESERVED            @Z40BPCH*/\n*      5 ICCEND CHAR(0) BDY(WORD), /* END OF ICT CONSTANTS           */\n*/*                                                                  */\n*/*      I/O CONTROL VARIABLES                                       */\n*/*                                                                  */\n*      5 ICVLUTBT FIXED(31),       /* LCH UTILIZATION COMPUTATION\n*                                     BASE TIME                      */\n*      5 ICVLCBPT BIT(32),         /* LCH IMBALANCE BIT PATTERN      */\n*      5 ICVOLCBT BIT(32),         /* OVERUTILIZED LCH BIT PATTERN   */\n*      5 ICVULCBT BIT(32),         /* UNDERUTILIZED LCH BIT PATTERN  */\n*     5 ICVIRSV3 FIXED(31),        /* RESERVED               @ZM43085*/\n*/*                                                                  */\n*/*      I/O CONTROL FLAGS                                           */\n*/*                                                                  */\n*      5 ICTFLAGS BIT(8),          /* I/O CONTROL FLAGS              */\n*        10 ICTDRSV4 BIT(1),       /* RESERVED               @ZM43085*/\n*        10 ICTIOL BIT(1),          /* I/O LOAD BALANCING ACTIVE FLAG*/\n*        10 ICTIOOT BIT(1),         /* SOME LOGICAL CHANNELS OUT OF\n*                                      BALANCE               @Z40BPCH*/\n*        10 ICT003 BIT(5),          /* RESERVED              @Z40BPCH*/\n*      5 ICTRSVB1 BIT(8),           /* RESERVED                      */\n*      5 ICTRSVB2 BIT(8),           /* RESERVED              @Z40BPCH*/\n*      5 ICTRSVB3 BIT(8),           /* RESERVED              @Z40BPCH*/\n*      5 ICTEND CHAR(0)            /* END OF ICT                     */\n*          BDY(DWORD) ICT9999\n*%ICTLEN='LENGTH(ICT)';            /* OBTAIN LENGTH OF ICT           */\n*      @EJECT;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRARMCT@": {"ttr": 4102, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*        %GOTO RMCTPLS1; /*\n         MACRO\n         IRARMCT &DSECT=YES\n         IEZBITS                                                     */\n*%RMCTPLS1:  ;\n* /*                                                                 */\n* /* MACCOMP Z-4 SC1CX/PKD16                                         */\n* /* MACSTAT Z-4 75007/Z40BPSS                                       */\n* /* *************************************************************** */\n* /*                                                                 */\n* /*   MACRO NAME - IRARMCT                                          */\n* /*                                                                 */\n* /*   DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER CONTROL TABLE     */\n* /*                                                                 */\n* /*   COPYRIGHT - NONE                                              */\n* /*                                                                 */\n* /*   STATUS - OS/VS2 RELEASE 4, 10/28/75, LEVEL=1                  */\n* /*                                                                 */\n* /*   FUNCTION - THE RMCT SERVES AS THE ORIGIN TO LOCATE SYSTEM     */\n* /*         RESOURCES MANAGER TABLES AND ENTRY POINTS.  THE RMCT    */\n* /*         LOCATES THE SCHEDULING / ROUTING INFORMATION USED TO    */\n* /*         INVOKE THE REQUIRED PROCESSING FOR THE VARIOUS SYSTEM   */\n* /*         RESOURCES MANAGER FUNCTIONS.                            */\n* /*                                                                 */\n* /*   METHOD OF ACCESS - THE ADDRESS OF THE RMCT IS CONTAINED IN    */\n* /*         THE -CVTOPCTP- FIELD OF THE CVT.                        */\n* /*                                                                 */\n* /*         BY CONVENTION WITHIN THE SYSTEM RESOURCES MANAGER       */\n* /*         ROUTINES, REGISTER 2 IS ALWAYS RESERVED TO CONTAIN      */\n* /*         THE ADDRESS OF THE RMCT.                                */\n* /*                                                                 */\n* /* *************************************************************** */\n*        %GOTO RMCTPLS2; /*\n         AGO   .RMCTAL1                                              */\n* /* *************************************************************** */\n* /*                                                                 */\n* /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */\n* /*                                                                 */\n* /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */\n* /*                                                                 */\n* /*           NOTE - THE BAL FORM OF THE MACRO IS CODED WITH        */\n* /*           'DC' INSTRUCTIONS, SO THAT THE MACRO MAY BE USED      */\n* /*           TO ASSEMBLE THE INITIAL FIELD VALUES FOR THE          */\n* /*           IRARMCNS MODULE, WHICH CONTAINS THE RMCT.             */\n* /*                                                                 */\n* /*         USING ON RMCT GIVES ADDRESSABILITY TO ALL SYMBOLS.      */\n* /*                                                                 */\n* /*     PLS - %RMCTLEVL='USERLEVL' IF THE RMCT MAPPING IS TO BE     */\n* /*           CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE    */\n* /*           RMCT BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.    */\n* /*         - %RMCT9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */\n* /*                                                                 */\n* /*           NOTE - INASMUCH AS THE RMCT TABLE APPEARS AT THE      */\n* /*           VERY BEGINNING OF THE -IRARMCNS- MODULE, ONLY A       */\n* /*           STRUCTURE LEVEL OF '1' (ONE) SHOULD BE USED FOR       */\n* /*           THE RMCT.                                             */\n* /*                                                                 */\n* /*         TO ACCESS THE RMCT AS A DECLARED STRUCTURE,             */\n* /*         DCL RMCTPTR PTR.                                        */\n* /*                                                                 */\n* /*   CHANGE ACTIVITY = @ZM43085                                    */\n* /*                     @ZA10831                                    */\n* /*                                                                 */\n* /*   A000000-999999                                          Y02133*/\n* /*                                                                 */\n* /* *************************************************************** */\n* /*\n.RMCTAL1 ANOP\n         SPACE 1\n         AIF   ('&DSECT' EQ 'NO').RMCTAL2\nRMCT     DSECT\n         AGO   .RMCTAL3\n.RMCTAL2 ANOP\n         DS    0D\nRMCT     EQU   *\n.RMCTAL3 ANOP\n         SPACE 1\nRMCTNAME DC    C'RMCT' -           BLOCK IDENTIFICATION\nRMCTCCT  DC    A(CCT) -            CPU MANAGEMENT CONTROL TABLE\nRMCTICT  DC    A(ICT) -            I/O MANAGEMENT CONTROL TABLE\nRMCTMCT  DC    A(MCT) -            STORAGE MANAGEMENT CONTROL TABLE\nRMCTRMPT DC    A(RMPT) -           CTL ALGORITHM PARAMETER TABLE\nRMCTRMCA DC    A(RMCA) -           CTL ALGORITHM CONTROL AREA\nRMCTWMST DC    A(0) -              ADDR OF WLM SPECIFICATION TABLE\nRMCTRLCT DC    A(0) -              ADDR OF LOGICAL CHANNEL MGMT TABLE\nRMCTRMSA DC    A(0) -              ADDR OF RESOURCES MANAGER SAVE AREA\nRMCTRMPD DC    A(0) -              ADDR OF RESOURCES MANAGER PERF DATA\nRMCTRMEX DC    A(RMEX) -           ROUTINE EXITING VECTOR TABLE\nRMCTRMSB DC    A(RMSB) -           SUBROUTINE CALLING VECTOR TABLE\nRMCTEPPA DC    A(IRAEPPA) -        PRTL ANALYSIS ENTRY TABLE\nRMCTEPDT DC    A(EPDTSCN) -        USER ACTION ENTRY TABLE\nRMCTEPAT DC    A(EPATSCN) -        ALGORITHM ENTRY TABLE\nRMCTEPBG DC    A(EPAT) -           ADDR OF ALG ENTRY PT TABLE  @ZA10831\nRMCTADJC DC    F'0' -              ADJUSTMENT FACTOR FOR CPU RATE\nRMCTITT  DC    V(IRASECHT) -       INTFC EVENT CHARACTERISTICS TABLE\nRMCTEPET DC    V(IRAPRCSR) -       EVENT ROUTING VECTOR TABLE\nRMCTFLTM DC    A(IRAFLTM) -        TIME OF DAY ADJUST VECTOR TABLE\nRMCTEPPR DC    A(IRAEPPR) -        PROCESS RATE DEPENDENT ENTRY TABLE\nRMCTWAST DC    A(0) -              ADDR OF WAR SPECIFICATION TABLE\nRMCTWAMT DC    A(0) -              ADDR OF WAR MEASUREMENT TABLE\nRMCTTMQE DC    A(IRACTMQE) -       SCHEDULED RTNE QUEUE HEADER ADDR\nRMCTAQCT DC    F'0' -              ACTION QUEUE MEMBER COUNT\nRMCTAQHD DC    A(IRAOUCB) -        ACTION QUEUE FORWARD POINTER\nRMCTWTQE DC    A(IRAWTQE) -        WAIT - QUEUE HEADER BLOCK ADDRESS\nRMCTOTQE DC    A(IRAOTQE) -        OUT - QUEUE HEADER BLOCK ADDRESS\nRMCTINQE DC    A(IRAINQE) -        IN - QUEUE HEADER BLOCK ADDRESS\nRMCTR10  DC    F'0' -              RESERVED                    @Z40BPCH\nRMCTTBS  DC    F'0' -              STARTING TIME BASE FOR TIME OF DAY\nRMCTTOD  DC    F'0' -              TIME OF DAY - SYST RSRC MGR INVOKE\nRMCTTOC  DC    D'0' -              TIME OF CENTURY - 64BIT BINARY NMB\nRMCTALA  DC    4B'00000000' -      ALGORITHM REQUEST ACCUMULATOR FIELD\nRMCTALR  DC    4B'00000000' -      IMMEDIATE ALGORITHM REQUEST FIELD\nRMCTRQSV DC    A(RQSV) -           ADDR OF REQ SRV DATA AREA   @Z40BPCH\nRMCTFLGS DC    1B'00000000' -      PROCESSING CONTROL FLAGS\nRMCTMFA  EQU   BIT0 -              MEASUREMENT FACILITY ACTIVE\nRMCTCPS1 EQU   BIT1                CAP SWITCH                  @Z40BPSS\nRMCTINIT EQU   BIT3 -              SRM INITIALIZATION WAS PERFORMED\nRMCTRSV1 EQU   BIT4 -              RESERVED                   @ZM43085\nRMCTSTW  EQU   BIT5 -              SET HAS STOPPED WAR COLLECTION\nRMCTRSV2 EQU   BIT6 -              RESERVED                   @ZM43085\n         DC    1B'00000000' -      OVERRIDE CONDITION FLAGS\nRMCTMFS  EQU   BIT1 -              MF1 ACTIVE,SET IPS RCVD    @Z40BPCH\n         DC    2B'00000000' -      RESERVED\nRMCTTELM DC    V(IEATSELM) -       RESOURCES MANAGER TIMING ELEMENT\nRMCTCPID DC    C'RM1',X'03' -      RESOURCES MANAGER CELL POOL ID\nRMCTTOCI DC    D'0' -              CLOCK READ AREA - 64BIT BINARY NMB\nRMCTOUCB DC    A(IRAOUCB) -        PREASSEMBLED MODEL OUCB\nRMCTOUXB DC    A(IRAOUXB) -        INTERPOSED DUMMY OUXB\nRMCTSRBT DC    A(IRASRBT) -        RESOURCES MANAGER SRB TABLE\nRMCTDMDT DC    A(0) -              ADDR OF DOMAIN TABLE        @Z40BPCH\nRMCTDMDE DC    A(0) -              ADDR OF LAST DMN TAB ENTRY  @Z40BPCH\nRMCTDMNC DC    H'0' -              NUMBER OF DOMAINS           @Z40BPCH\nRMCTR50  DC    H'0' -              RESERVED                    @Z40BPCH\nRMCTEND  DS    0D -                END OF RMCT\nRMCTLEN  EQU   RMCTEND-RMCT -      LENGTH OF RMCT\n         MEND\n*                                                                    */\n*%RMCTPLS2:  ;\n*        %IF RMCT9999 \u00ac= ','        /* DOES STRUCTURE CONTINUE       */\n*            %THEN %RMCT9999 = ';'; /* NO, END DECLARE STATEMENT     */\n*        %IF RMCTLEVL \u00ac= ''         /* IS STRUCTURE CONCATENATED     */\n*            %THEN %GOTO RMCTPLS3;  /* YES, OMIT DECLARE STATEMENT   */\n*   DCL\n*     1 RMCT BASED(RMCTPTR) BDY(DWORD),\n*            %GOTO RMCTPLS4;        /* SKIP USER-GIVEN LEVEL         */\n*%RMCTPLS3:  RMCTDUM = RMCTLEVL||' RMCT';  /* PICK UP GIVEN LEVEL    */\n*     RMCTDUM BDY(DWORD),\n*%RMCTPLS4:  ;\n*       10 RMCTNAME CHAR(4),        /* BLOCK IDENTIFICATION - 'RMCT' */\n*       10 RMCTCCT  PTR(31),        /* CPU MGMT CONTROL TABLE        */\n*       10 RMCTICT  PTR(31),        /* I/O MGMT CONTROL TABLE        */\n*       10 RMCTMCT  PTR(31),        /* STORAGE MGMT CONTROL TABLE    */\n*       10 RMCTRMPT PTR(31),        /* CTL ALGORITHM PARAMETER TBL   */\n*       10 RMCTRMCA PTR(31),        /* CTL ALGORITHM CONTROL AREA    */\n*       10 RMCTWMST PTR(31),        /* WLM SPECIFICATION TABLE       */\n*       10 RMCTRLCT PTR(31),        /* LOGICAL CHANNEL MGMT TABLE    */\n*       10 RMCTRMSA PTR(31),        /* RESOURCES MANAGER SAVE AREA   */\n*       10 RMCTRMPD PTR(31),        /* RESOURCES MANAGER PERF DATA   */\n*       10 RMCTRMEX PTR(31),        /* ROUTINE EXITING VECTOR TABLE  */\n*       10 RMCTRMSB PTR(31),        /* SUBRTNE CALLING VECTOR TABLE  */\n*       10 RMCTEPPA PTR(31),        /* PRTL ANALYSIS ENTRY TABLE     */\n*       10 RMCTEPDT PTR(31),        /* USER ACTION ENTRY TABLE       */\n*       10 RMCTEPAT PTR(31),        /* ALGORITHM ENTRY TABLE         */\n*       10 RMCTEPBG PTR(31),    /* BEGIN ALG ENTRY PT TABLE  @ZA10831*/\n*       10 RMCTADJC FIXED,          /* CPU RATE ADJUSTMENT           */\n*       10 RMCTITT  PTR(31),        /* EVENT CHARACTERISTICS TABLE   */\n*       10 RMCTEPET PTR(31),        /* EVENT ROUTING VECTOR TABLE    */\n*       10 RMCTFLTM PTR(31),        /* TIME OF DAY DEPENDENT TABLE   */\n*       10 RMCTEPPR PTR(31),        /* PROCESS RATE DEPENDENT TABLE  */\n*       10 RMCTWAST PTR(31),        /* WAR SPECIFICATION TABLE       */\n*       10 RMCTWAMT PTR(31),        /* WAR MEASUREMENT TABLE         */\n*       10 RMCTTMQE PTR(31),        /* SCHED RTNE QUEUE HEAD ADDR    */\n*       10 RMCTAQCT FIXED BDY(DWORD), /* ACTION QUEUE MEMBER COUNT   */\n*       10 RMCTAQHD PTR(31),        /* ACTION QUEUE FORWARD POINTER  */\n*       10 RMCTWTQE PTR(31),        /* WAIT - QUEUE HEADER ADDRESS   */\n*       10 RMCTOTQE PTR(31),        /* OUT - QUEUE HEADER ADDRESS    */\n*       10 RMCTINQE PTR(31),        /* IN - QUEUE HEADER ADDRESS     */\n*       10 RMCTR10 FIXED,           /* RESERVED              @Z40BPCH*/\n*       10 RMCTTBS  FIXED(32) UNSIGNED, /* SRM TIME OF DAY BASE      */\n*       10 RMCTTOD  FIXED(32) UNSIGNED, /* CURRENT TIME OF DAY       */\n*       10 RMCTTOC  BIT(64) BDY(DWORD), /* CURR TIME OF CENTURY      */\n*       10 RMCTALA  BIT(32) BDY(WORD), /* ALG REQUEST ACCUMULATOR    */\n*       10 RMCTALR  BIT(32) BDY(WORD), /* IMMED ALG REQUEST ACCUMUL  */\n*       10 RMCTRQSV PTR(31),        /* REQ SERVICE WORK AREA @Z40BPCH*/\n*       10 RMCTFLGS BIT(32) BDY(WORD), /* PROCESSING CONTROL FLAGS   */\n*         12 RMCTMFA  BIT(1),       /* MEASUREMENT FACILITY ACTIVE   */\n*         12 RMCTCPS1 BIT(1),       /* CAP SWITCH            @Z40BPSS*/\n*         12 RMCTF03  BIT(1),       /* RESERVED              @Z40BPSS*/\n*         12 RMCTINIT BIT(1),       /* SRM INITIALIZATION DONE       */\n*         12 RMCTRSV1 BIT(1),       /* RESERVED              @ZM43085*/\n*         12 RMCTSTW  BIT(1),       /* SET STOPPED WAR COLLECTION    */\n*         12 RMCTRSV2 BIT(1),       /* RESERVED              @ZM43085*/\n*         12 RMCTF06  BIT(1),       /* RESERVED              @Z40BPCH*/\n*         12 RMCTF07  BIT(1),       /* RESERVED              @Z40BPCH*/\n*         12 RMCTMFS  BIT(1),       /* MF1 ACT.,SET IPS RCVD @Z40BPCH*/\n*         12 RMCTF09  BIT(22),      /* RESERVED              @Z40BPCH*/\n*       10 RMCTTELM PTR(31),        /* RSRC MANAGER TIMING ELEMENT   */\n*       10 RMCTCPID CHAR(4) BDY(WORD), /* RSRC MANAGER CELL POOL ID  */\n*       10 RMCTTOCI BIT(64) BDY(DWORD), /* TOD CLOCK READ AREA       */\n*       10 RMCTOUCB PTR(31),        /* PREASSEMBLED MODEL OUCB       */\n*       10 RMCTOUXB PTR(31),        /* INTERPOSED DUMMY OUXB         */\n*       10 RMCTSRBT PTR(31),        /* PREBUILT SRB TABLE            */\n*       10 RMCTDMDT PTR(31),        /* ADDR OF DOMAIN TABLE  @Z40BPCH*/\n*       10 RMCTDMDE PTR(31),        /* ADDR OF LAST DMDT ENT @Z40BPCH*/\n*       10 RMCTDMNC FIXED(15),      /* NUMBER OF DOMAINS     @Z40BPCH*/\n*       10 RMCTR50 FIXED(15),       /* RESERVED              @Z40BPCH*/\n*       10 RMCTEND  CHAR(0) BDY(DWORD)   /* END OF RMCT              */\n*   RMCT9999\n*   %RMCTLEN = 'LENGTH(RMCT)';      /* SYMBOLIC FOR LENGTH OF RMCT   */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRAWMST@": {"ttr": 4106, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*        %GOTO WMSTPLS1; /*\n         MACRO\n         IRAWMST &DSECT=YES                                          */\n*%WMSTPLS1:  ;\n* /*                                                                 */\n* /* MACCOMP Z-4 SC1CX/PKD16                                         */\n* /* MACSTAT Z-4 75007/Z40BPSS                                       */\n* /* *************************************************************** */\n* /*                                                                 */\n* /*   MACRO NAME - IRAWMST                                          */\n* /*                                                                 */\n* /*   DESCRIPTIVE NAME - WORKLOAD MANAGER SPECIFICATION TABLE       */\n* /*                                                                 */\n* /*   COPYRIGHT - NONE                                              */\n* /*                                                                 */\n* /*   STATUS - OS/VS2 RELEASE 4, 09/17/75, LEVEL=1                  */\n* /*                                                                 */\n* /*   FUNCTION - THE WMST COMBINES IN A SINGLE TABLE THE INFORMA-   */\n* /*         TION REQUIRED BY THE VARIOUS ROUTINES WHICH REFERENCE   */\n* /*         THE INSTALLATION PERFORMANCE SPECIFICATION.  THE WMST   */\n* /*         RESIDES IN SQA, AND IS DYNAMICALLY CONSTRUCTED DURING   */\n* /*         SYSTEM INITIALIZATION, AND DURING SET IPS PROCESSING.   */\n* /*         THE IPS USED BY THE  SYSTEM RESOURCES MANAGER  MAY BE   */\n* /*         CHANGED BY SIMPLY SUBSTITUTING THE ADDRESS OF THE NEW   */\n* /*         WMST INTO -RMCTWMST-.                                   */\n* /*                                                                 */\n* /*   METHOD OF ACCESS - THE ADDRESS OF THE WMST IS CONTAINED IN    */\n* /*         THE -RMCTWMST- FIELD OF THE SYSTEM RESOURCES MANAGER    */\n* /*         CONTROL TABLE.                                          */\n* /*                                                                 */\n* /* *************************************************************** */\n*        %GOTO WMSTPLS2; /*\n         AGO   .WMSTAL1                                              */\n* /* *************************************************************** */\n* /*                                                                 */\n* /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */\n* /*                                                                 */\n* /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */\n* /*                                                                 */\n* /*         USING ON WMST GIVES ADDRESSABILITY TO ALL SYMBOLS.      */\n* /*                                                                 */\n* /*     PLS - %WMSTLEVL='USERLEVL' IF THE WMST MAPPING IS TO BE     */\n* /*           CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE    */\n* /*           WMST BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.    */\n* /*         - %WMST9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */\n* /*                                                                 */\n* /*         TO ACCESS AS A STANDALONE STRUCTURE DCL WMSTPTR PTR.    */\n* /*                                                                 */\n* /*   CHANGE ACTIVITY =@ZM43084                                     */\n* /*                                                                 */\n* /*   A000000-999999                                          Y02133*/\n* /*                                                                 */\n* /* *************************************************************** */\n* /*\n.WMSTAL1 ANOP\n         SPACE 1\n         AIF   ('&DSECT' EQ 'NO').WMSTAL2\nWMST     DSECT\n         AGO   .WMSTAL3\n.WMSTAL2 ANOP\n         DS    0D\nWMST     EQU   *\n.WMSTAL3 ANOP\n         SPACE 1\nWMSTNAME DS    C'WMST' -           TABLE IDENTIFICATION\nWMSTID   DS    CL2 -               PERF. SPECIFICATION IDENTIFIER\nWMSTWLLO DS    H -                 LOWEST WORKLOAD LEVEL SPECIFIED\nWMSTPGVT DS    A -                 PERF GROUP VECTOR TABLE ADDRESS\nWMSTPGVS DS    F -                 PERF GROUP VECTOR TABLE SIZE\nWMSTPGDT DS    A -                 FIRST PERF GROUP DESCRIPTOR ADDRESS\nWMSTPGDS DS    F -                 TOTAL PERF GROUP DESCRIPTOR SIZE\nWMSTPOVT DS    A -                 PERF OBJECTIVE VECTOR TABLE ADDRESS\nWMSTPOVS DS    F -                 PERF OBJECTIVE VECTOR TABLE SIZE\nWMSTPODT DS    A -                 1ST PERF OBJECTIVE DESCRIPT ADDRESS\nWMSTPODS DS    F -                 TOT PERF OBJECTIVE DESCRIPT SIZE\nWMSTDMDT DS    A -                 FIRST DOMAIN DESCRIPTR ADDR @Z40BPCH\nWMSTDMDS DS    F -                 TOT DOMAIN DESCRIPTOR SIZE  @Z40BPCH\nWMSTDMVT DS    A -                 DOMAIN VECTOR TABLE ADDR    @Z40BPCH\nWMSTDMVS DS    F -                 DOMAIN VECTOR TABLE SIZE    @Z40BPCH\nWMSTDMDE DS    A -                 DMN TABLE LAST ENTRY ADDR   @Z40BPCH\nWMSTWLHI DS    H -                 HIGHEST WORKLOAD LEVEL SPEC @Z40BPCH\nWMSTPGHI DS    H -                 HIGHEST PERF GROUP NUMBER\nWMSTPGPC DS    H -                 TOTAL COUNT OF PERF GROUP PERIODS\nWMSTDMNC DS    H -                 TOTAL DOMAIN COUNT          @Z40BPCH\nWMSTCPU  DS    F -                 CPU SERVICE COEFFICIENT\nWMSTIOC  DS    F -                 IOC SERVICE COEFFICIENT\nWMSTMSO  DS    F -                 MSO SERVICE COEFFICIENT\nWMSTREAL DS    CL1                 REAL TIME INDICATOR        @ZM43084\nWMSTRSVD DS    CL3                 RESERVED                   @ZM43084\nWMSTSET  DS    A -                 SET IPS PROCESSOR ROUTINE ADDRESS\nWMSTSTCB DS    A -                 SET IPS PROCESSOR TASK ADDRESS\nWMSTNWST DS    A -                 SET IPS PROCESSOR NXT WMST ADDRESS\nWMSTSECB DS    F -                 ECB FOR SET IPS PROCESSOR\nWMSTIPC  DS    CL4 -               CPU SERVICE COEFICIENT      @Z40BPCH\nWMSTIPI  DS    CL4 -               I/O SERVICE COEFFICIENT     @Z40BPCH\nWMSTIPM  DS    CL4 -               MSO SERVICE COEFFICIENT     @Z40BPCH\nWMSTEND  DS    0D -                END OF WMST\nWMSTLEN  EQU   WMSTEND-WMST -      LENGTH OF WMST\n         MEND\n*                                                                    */\n*%WMSTPLS2:  ;\n*        %IF WMST9999 \u00ac= ','        /* DOES STRUCTURE CONTINUE       */\n*            %THEN %WMST9999 = ';'; /* NO, END DECLARE STATEMENT     */\n*        %IF WMSTLEVL \u00ac= ''         /* IS STRUCTURE CONCATENATED     */\n*            %THEN %GOTO WMSTPLS3;  /* YES, OMIT DECLARE STATEMENT   */\n*   DCL\n*     1 WMST BASED(WMSTPTR) BDY(DWORD),\n*            %GOTO WMSTPLS4;        /* SKIP USER-GIVEN LEVEL         */\n*%WMSTPLS3:  WMSTDUM = WMSTLEVL||' WMST';  /* PICK UP GIVEN LEVEL    */\n*     WMSTDUM BDY(DWORD),\n*%WMSTPLS4:  ;\n*       10 WMSTNAME CHAR(4),        /* TABLE IDENTIFICATION - 'WMST' */\n*       10 WMSTID   CHAR(2) BDY(WORD), /* PERF SPECIFICATION ID      */\n*       10 WMSTWLLO FIXED(15),      /* LOWEST WORKLOAD LEVEL SPEC'D  */\n*       10 WMSTPGVT PTR(31),        /* PERF GRP VECTOR TABLE ADDR    */\n*       10 WMSTPGVS FIXED,          /* PERF GRP VECTOR TABLE SIZE    */\n*       10 WMSTPGDT PTR(31),        /* 1ST PERF GRP DESCRIPTOR ADDR  */\n*       10 WMSTPGDS FIXED,          /* TOT PERF GRP DESCRIPTOR SIZE  */\n*       10 WMSTPOVT PTR(31),        /* PERF OBJ VECTOR TABLE ADDR    */\n*       10 WMSTPOVS FIXED,          /* PERF OBJ VECTOR TABLE SIZE    */\n*       10 WMSTPODT PTR(31),        /* 1ST PERF OBJ DESCRIPTOR ADDR  */\n*       10 WMSTPODS FIXED,          /* TOT PERF OBJ DESCRIPTOR SIZE  */\n*       10 WMSTDMDT PTR(31),        /* FIRST DMN DESC ADDR   @Z40BPCH*/\n*       10 WMSTDMDS FIXED(31),      /* TOT DOMAIN DESC SIZE  @Z40BPCH*/\n*       10 WMSTDMVT PTR(31),        /* DMN VECTOR TABLE ADDR @Z40BPCH*/\n*       10 WMSTDMVS FIXED(31),      /* DMN VECTOR TABLE SIZE @Z40BPCH*/\n*       10 WMSTDMDE PTR(31),        /* DMN TAB LAST NTRY ADR @Z40BPCH*/\n*       10 WMSTWLHI FIXED(15),      /* HIGHEST WORKLD LEV SP @Z40BPCH*/\n*       10 WMSTPGHI FIXED(15),      /* HIGH PERF GROUP NUMBER        */\n*       10 WMSTPGPC FIXED(15),      /* TOTL PERF GROUP PERIOD COUNT  */\n*       10 WMSTDMNC FIXED(15),      /* TOT DOMAIN COUNT      @Z40BPCH*/\n*       10 WMSTCPU  FIXED,          /* CPU SERVICE COEFFICIENT       */\n*       10 WMSTIOC  FIXED,          /* IOC SERVICE COEFFICIENT       */\n*       10 WMSTMSO  FIXED,          /* MSO SERVICE COEFFICIENT       */\n*       10 WMSTREAL FIXED(8),       /* REAL TIME INDICATOR   @ZM43084*/\n*       10 WMSTRSVD FIXED(24),      /* RESERVED              @ZM43084*/\n*       10 WMSTSET  PTR(31),        /* SET PROCS ROUTINE ADDR        */\n*       10 WMSTSTCB PTR(31),        /* SET PROCS TASK ADDRESS        */\n*       10 WMSTNWST PTR(31),        /* SET PROCS NXT WMST ADR        */\n*       10 WMSTSECB CHAR(4) BDY(WORD), /* SET PROCS ECB              */\n*       10 WMSTIPC CHAR(4) BDY(WORD), /* CPU SERVICE COEF.   @Z40BPCH*/\n*       10 WMSTIPI CHAR(4) BDY(WORD), /* I/O SERVICE COEF.   @Z40BPCH*/\n*       10 WMSTIPM CHAR(4) BDY(WORD), /* MSO SERVICE COEF.   @Z40BPCH*/\n*       10 WMSTEND  CHAR(0) BDY(DWORD)   /* END OF WMST              */\n*   WMST9999\n*   %WMSTLEN = 'LENGTH(WMST)';      /* SYMBOLIC FOR LENGTH OF WMST   */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LC": {"ttr": 4110, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NFS     LC    &STRING,&IMAGE,&L=\n.*.\n.*  THIS MACRO WILL DO A DC FOR A LOWER CASE STRING.\n.*  THE FIRST OPERAND (POSITIONAL) IS THE STRING (IN UPPER CASE),\n.*      ENCLOSED IN SINGLE QUOTES.\n.*  UPPERCASE CHARACTERS ARE PRECEDED BY A SLASH (/).\n.*      A SLASH IS OUTPUT BY INSERTING 2 SLASHES.\n.*  THE SECOND OPERAND (OPTIONAL, POSITIONAL) IS COMPOSED BY COPYING\n.*      THE FIRST STRING, AND CHANGING ALL CHARACTERS WHICH ARE TO BE\n.*      LOWER CASE TO BLANKS.  CHARACTERS WHICH ARE TO BE UPPER CASE\n.*      (OR SLASH) CAN BE ANY NON-BLANK CHARACTER (EXCEPT AMPERSAND\n.*      AND APOSTROPHE).  NOTE THAT THE DOUBLE AMPERSAND AND DOUBLE\n.*      APOSTROPHE WILL BE CORRECTLY ACCOUNTED FOR, SO THAT TWO SPACES\n.*      SHOULD BE ALLOWED FOR THEM IN THE IMAGE.\n.*\n.*\n.*  AUTHOR:        LEONARD D. WOREN\n.*  DATE:          08-26-81\n.*  INSTALLATION:  TITLE INSURANCE AND TRUST\n.*  UPDATED:       10-28-82   FIX MNOTE\n.*  UPDATED:       09-15-81   ADD &IMAGE FEATURE\n.*\n.*\n.*  EXAMPLES:\n.*\n.*    LC  'ABC'         WILL GENERATE A LOWER CASE 'ABC' (LENGTH 3)\n.*\n.*    LC  '/ABC'        'A' WILL BECOME UPPER CASE\n.*\n.*    LC  '/A/B/CDEF'   'ABC' IN UPPER CASE, 'DEF' IN LOWER CASE (CL6)\n.*\n.*    LC  '3//4'        CL3'3/4'\n.*\n.*    LC  '3/4'         ERROR\n.*\n.*    LC  'ABC','X'     SAME AS SECOND EXAMPLE\n.*\n.*    LC  'ABC','/ /'   'A' AND 'C' WILL BE UPPER CASE\n.*\n.*    LC  '&&'''        WILL GENERATE CL2 AMPERSAND-APOSTROPHE\n.*\n.*    LC  '/HELLO',L=80  --> CL80'HELLO', WITH THE 'H' UPPER CASE\n.*\n.*    LC  'HELLO','*',L=80   SAME AS ABOVE\n.*\n.*.\n         LCLC  &S                       INPUT STRING MINUS QUOTES\n         LCLC  &C1                      CURRENT CHARACTER\n         LCLC  &C2                      CURRENT AND NEXT CHARACTER\n         LCLC  &OUT                     OUTPUT STRING\n         LCLC  &ALPHA                   THE ALPHABET\n         LCLC  &LOWER                   THE SAME, BUT IN LOWER CASE\n         LCLA  &PS                      POSITION IN &STRING\n         LCLA  &PI                      POSITION IN &IMAGE\n         LCLA  &LS                      LENGTH OF &STRING\n         LCLA  &I                       INDEX WORK VARIABLE\n         LCLB  &SLASH                   PREVIOUS CHARACTER WAS SLASH\n         LCLB  &UPPER                   THIS CHAR IS TO BE UPPER CASE\n.*\n.*  SET MY CONTROL VARIABLES (FOR A SLIGHT SAVINGS IN CPU TIME DURING\n.*  MACRO EXPANSION, THE FOLLOWING STRINGS ARE SORT OF IN FREQUENCY\n.*  ORDER...\n.*\n.*ALPHA  SETC  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n.*LOWER  SETC  'abcdefghijklmnopqrstuvwxyz'  <=== ** LOWER CASE **\n&ALPHA   SETC  'ETAONRISHBCDFGPULMKYJQVWXZ'\n&LOWER   SETC  'etaonrishbcdfgpulmkyjqvwxz'  <=== ** LOWER CASE **\n.*\n.*  BEGIN PROCESSING\n.*\n&OUT     SETC  ''                       INITIALIZE OUTPUT STRING\n&LS      SETA  K'&STRING-2              GET LENGTH OF STRING\n&S       SETC  '&STRING'(2,&LS)         STRIP OFF THE QUOTES\n&PI      SETA  1                        SKIP THE APOSTROPHE AT START\n.*\n.*  MAIN LOOP\n.*\n.LOOP    ANOP\n&PS      SETA  &PS+1                    -> NEXT POS IN INPUT STRING\n&PI      SETA  &PI+1                    -> NEXT POS IN IMAGE STRING\n&C1      SETC  '&S'(&PS,1)              GET A CHARACTER\n&C2      SETC  '&S '(&PS,2)             GET 2 CHARACTERS\n         AIF   (&PI GE K'&IMAGE).LOWER1  &IMAGE IS OMITTED OR SHORT\n         AIF   ('&IMAGE'(&PI,1) EQ ' ').LOWER1\n&UPPER   SETB  1\n.LOWER1  AIF   ('&C1' EQ '/').SLASH\n         AIF   ('&C1' EQ '''').QUOTE\n         AIF   ('&C2' EQ '&&').AND\n&I       SETA  1\n.*\n.*  QUICKIE CHECK FOR ALPHABETIC CHARACTER (TO SAVE CPU TIME)\n.*\n         AIF   ('&C1' LT 'A' OR '&C1' GT 'Z').NOTALPH   NOPE\n.*\n.*  DETERMINE ORDINAL NUMBER OF THIS LETTER\n.*\n.CHARLP  AIF   ('&C1' EQ '&ALPHA'(&I,1)).GOTCHAR\n&I       SETA  &I+1\n         AIF   (&I LE 26).CHARLP\n.*\n.*  CHARACTER IS NOT A LETTER, JUST PUT IT ON THE OUTPUT.\n.*\n.NOTALPH AIF   (NOT &SLASH).OK1\n         MNOTE 4,'SLASH PRECEDING NON-ALPHA IGNORED'\n         AGO   .KILLUP                  RESET UPPER CASE\n.OK1     AIF   (NOT &UPPER).COPY        COPY CHARACTER TO OUTPUT\n         MNOTE 4,'UPPERCASE REQUEST FOR \"&C1\" IGNORED (NON-ALPHA)'\n.KILLUP  ANOP\n&SLASH   SETB  0\n&UPPER   SETB  0\n.COPY    ANOP\n&OUT     SETC  '&OUT'.'&C1'\n         AGO   .NXTCHAR\n.*\n.*  CURRENT CHARACTER IS ALPHABETIC\n.*\n.GOTCHAR AIF   (&UPPER OR &SLASH).CAP$IT  CHARACTER IS TO BE UPPER CASE\n.*\n.*  PUT OUT THE LETTER AS LOWER CASE\n.*\n&OUT     SETC  '&OUT'.'&LOWER'(&I,1)\n         AGO   .NXTCHAR\n.*\n.*  PUT OUT THE LETTER AS IS (UPPER CASE)\n.*\n.CAP$IT  ANOP\n&OUT     SETC  '&OUT'.'&ALPHA'(&I,1)\n&SLASH   SETB  0\n&UPPER   SETB  0\n         AGO   .NXTCHAR\n.*\n.*  CURRENT CHARACTER IS A DOUBLED APOSTROPHE\n.*\n.QUOTE   ANOP\n&OUT     SETC  '&OUT'.''''''\n&PI      SETA  &PI+1                    SLURP UP AN EXTRA IMAGE CHAR\n         AGO   .SKPNEXT\n.*\n.*  CURRENT CHARACTER IS A DOUBLED AMPERSAND\n.*\n.AND     ANOP\n&OUT     SETC  '&OUT'.'&&'\n&PI      SETA  &PI+1                    SLURP UP AN EXTRA IMAGE CHAR\n         AGO   .SKPNEXT\n.*\n.*  CURRENT CHARACTER IS A SLASH\n.*\n.SLASH   AIF   (&UPPER OR &SLASH).SLASH2\n&SLASH   SETB  1\n         AGO   .NXTCHAR\n.*\n.*  DOUBLE SLASH OR UPPERCASE SLASH - PUT A SLASH TO OUTPUT STRING\n.*\n.SLASH2  ANOP\n&OUT     SETC  '&OUT'.'/'\n&SLASH   SETB  0\n&UPPER   SETB  0\n         AGO   .NXTCHAR\n.*\n.*  NEXT POSITION IN INPUT STRING MUST BE SKIPPED BECAUSE IT IS THE\n.*  SECOND HALF OF A DOUBLED CHARACTER.\n.*\n.SKPNEXT ANOP\n&PS      SETA  &PS+1                    SKIP DOUBLED CHARACTER (/ ' &)\n.*&PI    SETA  &PI+1                    ACCOUNT FOR IT IN &IMAGE\n.*\n.*  BOTTOM OF MAIN LOOP - SEE IF AT END OF INPUT STRING\n.*\n.NXTCHAR AIF   (&PS LT &LS).LOOP\n.*\n.*  INPUT STRING IS EXHAUSTED\n.*\n         AIF   (NOT &SLASH).CHECKL\n         MNOTE 4,'TRAILING SINGLE SLASH IGNORED'\n.CHECKL  AIF   ('&L' EQ '').NO$LEN\n&NFS     DC    CL(&L)'&OUT'\n         MEXIT\n.NO$LEN  ANOP\n&NFS     DC   C'&OUT'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MONTHS": {"ttr": 4356, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NFS     MONTHS  &DUMMY,&LC=YES\n.*.\n.*$MACRO=MONTHS     DATE=04/19/77       SOURCE=LDW\n.*\n.*  THIS MACRO GENERATES A TABLE OF THE NUMBER OF DAYS IN EACH MONTH,\n.*       (ASSUMING NOT LEAP YEAR), AND THE 3 CHAR MONTH NAMES.\n.*.\n.*  Updates:\n.*    29Nov86 LDW - Support LC=YES and make it the default\n.*\n         AIF   ('&LC' EQ 'YES').LC\n         AIF   ('&LC' EQ 'NO' ).UC\n         MNOTE 4,'LC=&LC invalid, LC=NO assumed'\n.UC      ANOP\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEXIT\n.LC      ANOP\n&NFS     DC    H'31',C'Jan '            Thirty days\n         DC    H'28',C'Feb '            Hath September,\n         DC    H'31',C'Mar '            April, June,\n         DC    H'30',C'Apr '            and November.\n         DC    H'31',C'May '            All the rest\n         DC    H'30',C'Jun '            Have thirty one,\n         DC    H'31',C'Jul '            except February,\n         DC    H'31',C'Aug '            Which has only 28.\n         DC    H'30',C'Sep '\n         DC    H'31',C'Oct '\n         DC    H'30',C'Nov '\n         DC    H'31',C'Dec '\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MVCP#": {"ttr": 4358, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO -- MVCP -- MOVE TO PRIMARY ADDRESS SPACE\n&LABEL   MVCP  &O1,&A2,&R3\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         GBLC  &$MVCXA,&$MVCXR\n         AIF   (N'&SYSLIST NE 3).ER1\n         $MVCX MVCP,&O1\n&LABEL   DC    0H'0',X'DA',AL.4(&$MVCXR,&R3),S(&$MVCXA),S(&A2) MVCP\n         MEXIT\n.ER1     MNOTE 12,'MVCP TAKES EXACTLY THREE OPERANDS'\n         MNOTE *,'INSTRUCTION FORMAT -- D1(R1,B1),D1(B2),R3'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVCS#": {"ttr": 4360, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO -- MVCS -- MOVE TO SECONDARY ADDRESS SPACE\n&LABEL   MVCS  &O1,&A2,&R3\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         GBLC  &$MVCXA,&$MVCXR\n         AIF   (N'&SYSLIST NE 3).ER1\n         $MVCX MVCS,&O1\n&LABEL   DC    0H'0',X'DB',AL.4(&$MVCXR,&R3),S(&$MVCXA),S(&A2) MVCS\n         MEXIT\n.ER1     MNOTE 12,'MVCS TAKES EXACTLY THREE OPERANDS'\n         MNOTE *,'INSTRUCTION FORMAT -- D1(R1,B1),D1(B2),R3'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NOWPARM": {"ttr": 4362, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         NOWPARM\n.*.\n.*$MACRO=NOWPARM    DATE=??/??/79       SOURCE=LDW\n.*\n.*  THIS DSECT MAPS THE ANSWER AREA FROM THE 'DATETIME' MODULE\n.*.\n.*  THIS DSECT STOLEN FROM CSOUT IN TSO ZAP\nNOWPARM  DSECT                          NOWSVC (SSVC0) PARMLIST\n         SPACE 2\nTIME24   DS    0CL12                    TIME 24-HR....HH:MM:SS PST\nTIME24HR DS    CL2,C                    HH:\nTIME24MN DS    CL2,C                    MM:\nTIME24SC DS    CL2                      SS\n         DS    C                        BLANK\nTIME24TZ DS    CL3                      PST OR PDT\n         DS    2C                       BLANKS\n         SPACE 1\nNUMDATE  DS    0CL8                     THE DATE: (M)M/(D)D/YY\nMO       DS    CL2,C                    (M)M/\nDAY      DS    CL2,C                    (D)D/\nYEAR     DS    CL2                      YY\n         DS    2C                       BLANKS\n         SPACE 1\nWEEKDAY  DS    CL9                      THE WEEKDAY\n         DS    C                        BLANK\n         SPACE 1\nCHARDATE DS    CL13                     DATE: MMM(M) (D)D, 19YY\n         DS    2C                       BLANKS\n         SPACE 1\nTIME12   DS    0CL15                    TIME 12-HR...HH:MM:SS AM PST\nTIME12HR DS    CL2,C                    HH:\nTIME12MN DS    CL2,C                    MM:\nTIME12SC DS    CL2,C                    SS + BLANK\nAMPM     DS    CL2                      AM OR PM\n         DS    C                        BLANK\nTIME12TZ DS    CL3                      PDT OR PST\n         DS    2C                       BLANKS\n         SPACE 1\nJULDATE  DS    0CL6                     THE DATE:  YY.DDD\nJULYEAR  DS    CL2,C                    YY.\nJULDAY   DS    CL3                      DDD\n         SPACE 2\nNOWPARML EQU   *-NOWPARM                LEN OF PARMLIST (72)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACDROP": {"ttr": 4364, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         OACDROP &PARMS\n         GBLC  &USELAB(16)        SAVED PROGRAM LABELS\n         GBLC  &USEREG(16)        SAVED REGISTER TABLE\n         LCLA  &UNDX,&II          USE INDICES,TEMP USAGE\n         LCLA  &PNDX,&DNDX        INPUT PARM,DROP STRING INDICES\n         LCLB  &GOTREG,&DROPALL   HAVE REGS TO DROP,DROP ALL TO DO\n         LCLC  &R(4),&B(4)        REGS TO DROP,PREVIOUS BASES FOR REGS\n         LCLC  &BLANKS            BLANKS TO PAD DROP LINE TO COMMENTS\n&DROPALL SETB  ((N'&SYSLIST EQ 0) OR ('&PARMS' EQ '')) SET DROPALL FLAG\n.LP#SYS  AIF   (&DROPALL).LP#SAV  BIF DROP ALL IN PROGRESS\n         AIF   (&PNDX GE N'&SYSLIST).CK#DROP LOOP TIL DONE WITH REGS\n&PNDX    SETA  &PNDX+1            UP THE COMMA/REG INDEX\n&UNDX    SETA  0                  RE-INITIALIZE USE ARRAY INDEX\n.LP#SAV  ANOP                     VALID DROP REG CHECK LOOP\n&UNDX    SETA  &UNDX+1            UP THE USE ARRAY COUNT\n         AIF   (&DROPALL).CK#ALL  BIF DROP ALL IN PROGRESS\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').DROP#R BIF MATCH\n         AIF   (&UNDX LT 16).LP#SAV LOOP FOR ALL ENTRIES IF NEEDED\n         MNOTE 4,'REGISTER &SYSLIST(&PNDX) WAS NOT A USNGX OPERAND'\n         AGO   .LP#SYS            CONTINUE\n.CK#ALL  AIF   (&UNDX GT 16).CK#DROP BIF END OF SAVE TABLE/CHECK DROPS\n         AIF   ('&USEREG(&UNDX)'  EQ '').LP#SAV BIF EMPTY SLOT\n.DROP#R  AIF   (&DNDX EQ 0).DROP$R BIF NO PREVIOUS REGISTER/BASE\n&R(&DNDX) SETC '&R(&DNDX)'.','    APPEND COMMA AFTER PREVIOUS REG\n&B(&DNDX) SETC '&B(&DNDX)'.','    APPEND COMMA AFTER PREVIOUS BASE\n.DROP$R  ANOP\n&DNDX    SETA  &DNDX+1            UP THE DROP STRING INDEX\n&R(&DNDX) SETC '&USEREG(&UNDX)'   GET PREVIOUS REGISTER\n&B(&DNDX) SETC '&USELAB(&UNDX)'   GET PREVIOUS BASE\n&USEREG(&UNDX) SETC ''            BLANK THE SAVE TABLE REG FIELD\n&USELAB(&UNDX) SETC ''            BLANK THE SAVE TABLE BASE FIELD\n         AIF   (&DNDX GE 4).DO#DR BIF DROP LINE FULL\n&GOTREG  SETB  1                  SAY HAVE SOMETHING TO DROP\n         AGO   .LP#SYS            GO CHECK FOR &SYSLIST/TABLE END\n.CK#DROP AIF   (NOT &GOTREG).EXIT SKIP THE DROP IF NOTHING TO DO\n.* NOTE THAT THIS MACRO ASSUMES OPERAND/COMMENT COLUMNS 16 AND 35.\n.DO#DR   ANOP\n&BLANKS  SETC  ' '                SET ONE BLANK IN CASE TOO LONG\n&II      SETA  (35-16)-K'&R(1)-K'&R(2)-K'&R(3)-K'&R(4) BLANK COUNT\n         AIF   (&II LE 1).DO$DR   BIF ONE BLANK CORRECT\n&BLANKS  SETC  '                  '(1,&II) ELSE SET CORRECT NUMBER\n.DO$DR   DROP  &R(1)&R(2)&R(3)&R(4)&BLANKS&B(1)&B(2)&B(3)&B(4)\n&GOTREG  SETB  0                  NOTHING TO DROP\n.DROP#CL AIF   (&DNDX EQ 0).LP#SYS BIF CLEARING DONE\n&R(&DNDX) SETC ''                 BLANK REG FIELD\n&B(&DNDX) SETC ''                 BLANK BASE FIELD\n&DNDX    SETA  &DNDX-1            DECREMENT INDEX\n         AGO   .DROP#CL           CONTINUE\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACFSORT": {"ttr": 4366, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   OACFSORT &DSECT=YES,&PREFIX=FS#\n.* OAC FIXED RECORD SORT ROUTINE PARAMETER LIST (INCORE SORT)\n.*\n.*  NOTE THAT THE WORK AREA MUST BE LONG ENOUGH TO INCLUDE\n.*       ONE RECORD PLUS SORT WORKING STORAGE. (STACK)\n.*\n.*---------------------------------------------------------------------\n.*\n.*  FSORT - FIXED LENGTH RECORD SORT (IN STORAGE)\n.*\n.* ENTRY: R1 = @ P# LIST\n.*\n.* EXIT: R15 = RETURN CODE (CC SET)\n.*              0 - RECORDS SORTED (INPLACE)\n.*              4 - WORK AREA TOO SMALL\n.*\n.* THE WORK AREA LENGTH IS:\n.*  W#L + LENGTH OF ONE RECORD + STACK SPACE\n.*\n.*    COMPARE ROUTINE CALLED WITH:  R15 - ENTRY POINT\n.*                                  R14 - RETURN ADDRESS\n.*                                  R13 - @ 72 BYTE SAVE AREA\n.*                                  R1  - @ ELEMENT\n.*                                  R2  - @ ELEMENT\n.*                                  R3  - COMPARE ROUTINE PARM\n.*\n.* CONDITION CODE RETURNED FROM COMPARE ROUTINE DETERMINES ORDER,\n.*   IF HIGH THEN ELEMENT (R1) WILL APPEAR AFTER (R2),\n.*   IF LOW  THEN ELEMENT (R1) WILL APPEAR BEFORE (R2),\n.*   ELSE ORDER OF RECORDS IS UNDEFINED.\n.*\n.*  THE COMPARE ROUTINE MUST RESTORE *ALL* THE REGISTERS R0-R15.\n.*\n.*---------------------------------------------------------------------\n         LCLC  &LAB,&P\n&P       SETC  '&PREFIX'(1,3)     SET MAX PREFIX\n&LAB     SETC  '&P'               SET DEFAULT LABEL\n         AIF   ('&LABEL' EQ '').CK#DS BIF NO USER LABEL\n&LAB     SETC  '&LABEL'           SET USER'S LABEL\n.CK#DS   AIF   ('&DSECT' EQ 'YES').DSECT BIF DSECT GENERATION\n&LAB     DC    0D'0'              OACFSORT PARAMETER LIST\n         AGO   .GEN               BIF TO GENERATE DATA\n.DSECT   ANOP                     GENERATE DSECT HERE\n&LAB     DSECT ,                  OACFSORT PARAMETER LIST\n.GEN     ANOP\n&P.RECPT DC    A(0)               @ OF RECORDS\n&P.RECLN DC    F'0'               LENGTH OF EACH RECORD  (> 0)\n&P.RECNM DC    F'0'               NUMBER OF RECORDS      (>= 0)\n&P.CMPEP DC    A(0)               @ OF COMPARE ROUTINE\n&P.CMPPM DC    A(0)               PARM FOR COMPARE ROUTINE\n&P.WRKPT DC    A(0)               @ OF WORK AREA\n&P.WRKLN DC    F'0'               LENGTH OF WORK AREA    (>= 256)\n&P.L     EQU   *-&LAB             LENGTH OF PARAMETER LIST\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACGBLS": {"ttr": 4368, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         GBLA  &OACPRTS\n         GBLB  &OACPRTF\n         GBLC  &OACPRT,&OACPRTG,&OACSTMX,&OACSTER\n         GBLC  &OACNAME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACPRTPM": {"ttr": 4370, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         OACPRTPM &DUMMY,&PRINT=\n.*\n.*       SETS  VALUES OF &OACPRT AND &OACPRTS DEPENDING ON\n.*       VALUES OF &OACPRTG, &OACPRTF, AND &PRINT\n.*\n.*       DOES  A PUSH PRINT AND A PRINT ON,GEN OR A\n.*       PRINT OFF,NOGEN DEPENDING ON THE CALCULATED VALUE\n.*       OF &OACPRT\n.*\n         COPY  OACGBLS\n&OACPRT  SETC  '&OACPRTG'\n         AIF   (&OACPRTF).L4\n         AIF   ('&PRINT' EQ '').L1DEF\n         AIF   ('&PRINT' NE 'ALL' ).L1\n&OACPRT  SETC  'ALL'\n         AGO   .L4\n.L1      AIF   ('&PRINT' NE 'SHORT').L2\n.L1DEF   ANOP                     DEFAULT PRINT VALUE\n&OACPRT  SETC  'SHORT'\n         AGO   .L4\n.L2      AIF   ('&PRINT' EQ 'NONE').L3\n         MNOTE 4,'UNRECOGNIZABLE PRINT VALUE ''NONE'' USED'\n.L3      ANOP\n&OACPRT  SETC  'NONE'\n.L4      ANOP\n         PUSH  PRINT\n         AIF   ('&OACPRT' NE 'ALL').L5\n&OACPRTS SETA  99\n         AGO   .L8\n.L5      AIF   ('&OACPRT' NE 'SHORT').L6\n&OACPRTS SETA  1\n         AGO   .L8\n.L6      AIF   ('&OACPRT' EQ 'NONE').L7\n         MNOTE 4,'UNRECOGNIZABLE VALUE OF &OACPRTG ''NONE'' SET'\n&OACPRTG SETC  'NONE'\n&OACPRT  SETC  '&OACPRTG'\n.L7      ANOP\n         PRINT OFF,GEN\n&OACPRTS SETA  1\n.L8      MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACREGS": {"ttr": 4372, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         OACREGS &DUMMY,&PRINT=\n         COPY  OACGBLS\n         OACPRTPM PRINT=&PRINT\n         AIF   ('&OACPRT' NE 'SHORT').L1\n         PRINT OFF,GEN\n.L1      ANOP\n         SPACE &OACPRTS\n******************************************\nR0       EQU   0                   <-----|\nR1       EQU   1                   <-----|\nR2       EQU   2                   <-----|\nR3       EQU   3                   <-----|\nR4       EQU   4                   <-----|\nR5       EQU   5                   <-----|      =============\nR6       EQU   6                   <-----|      =  GENERAL  =\nR7       EQU   7                   <-----|      =  PURPOSE  =\nR8       EQU   8                   <-----|      = REGISTERS =\nR9       EQU   9                   <-----|      =============\nR10      EQU   10                  <-----|\nR11      EQU   11                  <-----|\nR12      EQU   12                  <-----|\nR13      EQU   13                  <-----|\nR14      EQU   14                  <-----|\nR15      EQU   15                  <-----|\n         SPACE\nF0       EQU   0                   <-----|    ==================\nF2       EQU   2                   <-----|    = FLOATING POINT =\nF4       EQU   4                   <-----|    =   REGISTERS    =\nF6       EQU   6                   <-----|    ==================\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OACUSING": {"ttr": 4374, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00\\x00\\x00 \\x00\\x80\\x13\\x1f\\x00\\x80\\x13\\x1f\\x19R\\x00>\\x00>\\x00\\x00\\xc3\\xe2\\xe8\\xe2\\xd1\\xc3\\xd1@@@'", "ispf": {"version": "00.00", "flags": 0, "createdate": "1980-05-10T00:00:00", "modifydate": "1980-05-10T19:52:20", "lines": 62, "newlines": 62, "modlines": 0, "user": "CSYSJCJ"}, "text": "         MACRO\n         OACUSING &PARMS\n         GBLC  &USELAB(16),&USEREG(16)  PGM LABELS,USE REGISTERS\n         LCLA  &RCNT,&PNDX,&UNDX        # OF OPERANDS,PARM/USE INDICES\n         LCLA  &TP1,&HOLE               TEMP WORK,1ST UNUSED SAVE ENTRY\n         LCLB  &GOTREG                  WHETHER TO DO USING OR NOT\n         LCLC  &CHR1,&CHR2,&C(16)       TEMPORARY WORK CHARS,COMMAS\n         LCLC  &R(16),&S                REGS\n         LCLC  &U,&V,&W                 R(15),C(16),R(16)\n&PNDX    SETA  1                        SET UP PARM STRING INDEX\n&RCNT    SETA  N'&SYSLIST               GET NUMBER OF OPERANDS\n         AIF   (&RCNT LE 1).ERR01       TOO FEW INPUT PARAMETERS\n         AIF   (&RCNT LE 17).SYS1#CK    CONTINUE IF LOW ENOUGH\n         MNOTE 4,'TOO MANY INPUT PARAMETERS. ONLY 17 PROCESSED'\n&RCNT    SETA  17                       SET MAX ALLOWABLE\n.SYS1#CK ANOP\n&S       SETC  '&SYSLIST(1)'            SET FOR SHORTER STRING BELOW\n.COMLOOP ANOP\n&PNDX    SETA  &PNDX+1                  INCREMENT INPUT STRING INDEX\n&UNDX    SETA  0                        INITIALIZE USE INDEX\n&HOLE    SETA  0                        INITIALIZE UNUSED ENTRY INDEX\n.USELOOP AIF   ('&SYSLIST(&PNDX)' EQ '').CHK#END BR IF NULL STRING\n&UNDX    SETA  &UNDX+1                  UP THE USE INDEX\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').DO#USE PREVUSE?\n         AIF   ((&HOLE NE 0) OR ('&USEREG(&UNDX)' NE '')).CHKEND\n.* WE BRANCH TO CHKEND IF WE ALREADY HAVE A HOLE OR NO HOLE EXISTS HERE\n&HOLE    SETA  &UNDX                    KEEP THE SAVE TABLE FREE INDEX\n.CHKEND  AIF   (&UNDX LT 16).USELOOP    LOOP FOR ALL ENTRIES\n&UNDX    SETA  &HOLE                    GET FREE ENTRY INDEX IN CASE\n         AIF   (&HOLE NE 0).DO#USE1     BRANCH IF SPACE FOR ENTRY\n         MNOTE 4,'OACUSING SAVE TABLE FULL. OPERAND TRUNCATED'\n         AGO   .USINGGO                 GO DO JUST WHAT WE CAN\n.DO#USE  ANOP\n&CHR1    SETC  '********'(1,K'&SYSLIST(&PNDX)) STARS FOR THE REG\n&CHR2    SETC  '****************'(1,K'&USELAB(&UNDX)) MAX 16 CHAR LABEL\n         MNOTE *,'*********&CHR1*********************&CHR2'\n         MNOTE *,'REGISTER &SYSLIST(&PNDX) PREVIOUSLY BASED ON &USELAB(@\n               &UNDX)'\n         MNOTE *,'*********&CHR1*********************&CHR2'\n.DO#USE1 ANOP                           LOG THE REG USE HERE\n&CHR1    SETC  '&SYSLIST(1)'            GET A DEFAULT LABEL\n         AIF   (&PNDX EQ 2).SETLAB      IF FIRST REG, NO +NNNN TO ADD\n&TP1     SETA  (&PNDX-2)*4096           ELSE GET ADDED AMOUNT\n&CHR1    SETC  '&CHR1'.'+'.'&TP1'       APPEND THE +NN FOR EXTRA REGS\n.SETLAB  ANOP                           MOVE IN THE SAVE LABELS HERE\n&USELAB(&UNDX) SETC '&CHR1'             SET SAVE TABLE DATA\n&USEREG(&UNDX) SETC '&SYSLIST(&PNDX)'   GET THE REG VALUE IN SAVEAREA\n&R(&PNDX-1) SETC '&SYSLIST(&PNDX)'      GET THE REG VALUE FOR USING\n&C(&PNDX-1) SETC ','                    AND A LEADING COMMA ALSO\n&GOTREG  SETB  1                        SAY WE CAN DO USING\n.CHK#END AIF   (&PNDX LT &RCNT).COMLOOP LOOP FOR ALL ENTRIES\n.USINGGO AIF   (NOT &GOTREG).EXIT       NOW TELL ASSEMBLER IF WE CAN\n&U       SETC  '&R(15)'                 SO WE HAVE A SHORTER STRING\n&V       SETC  '&C(16)'                 SO WE HAVE A SHORTER STRING\n&W       SETC  '&R(16)'                 SO WE HAVE A SHORTER STRING\n         USING &S&C(1)&R(1)&C(2)&R(2)&C(3)&R(3)&C(4)&R(4)&C(5)&R(5)&C(6@\n               )&R(6)&C(7)&R(7)&C(8)&R(8)&C(9)&R(9)&C(10)&R(10)&C(11)&R@\n               (11)&C(12)&R(12)&C(13)&R(13)&C(14)&R(14)&C(15)&U&V&W\n         MEXIT\n.ERR01   MNOTE 4,'MISSING INPUT PARAMETERS'\n         MEXIT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OSENTER": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00 \\x00\\x803\\x9f\\x00\\x96(/\\x14P\\x04\\xbb\\x04\\x17\\x00\\xe7\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1980-12-04T00:00:00", "modifydate": "1996-10-08T14:50:20", "lines": 1211, "newlines": 1047, "modlines": 231, "user": "LDW"}, "text": "         MACRO\n&NFS     OSENTER  &BASE=12,&BASE2=,&BASE3=,&BASE4=,                    $\n               &SAVE=*,&REGS=(YES,R),&F=,                              $\n               &USING=,&SECTYPE=CSECT,&GETMAIN=,&PARMREG=,&LPARM=,     $\n               &SP=1,&ID=*,&EXIT=,&ADDRREG=,&LENREG=,&ENV=CALL,        $\n               &RC=,&RCLOC=,&T=T,&PL=,&LOAD=,&SYMREG=,&DSECT=,         $\n               &TSFAKE=,&PARSE=,&MACRO=,&PRINT=,&DATE=,&TIME=,         $\n               &IKJRLSA=,&DELETE=*,&MODE=,&AMODE=,&RMODE=,&GETMLOC=\n         AGO   .SKIPCMT                 SKIP AROUND COMMENTS FOR MLOGIC\n.*.\n.*********************************************************************.\n.*                                                                   *.\n.*  OSENTER -- 29May88 -- LDW                                        *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  THIS MACRO WILL GENERATE THE HOUSEKEEPING CODE NEEDED FOR        *.\n.*  STANDARD OS LINKAGE CONVENTIONS (FOR ENTRY AND EXIT)             *.\n.*  THE GENERATED CODE WILL OPTIONALLY BE RE-ENTRANT                 *.\n.*                                                                   *.\n.*  Updates:                                                         *.\n.*    10Oct96   LDW  Support PARMREG=(Rx,dsect) and LPARM=(Rx,dsect) *.\n.*                      to automatically do USNGX                    *.\n.*    29May88   LDW  Fix bug:  don't MNOTE for ENV=(CALL,SIM) with   *.\n.*                      no GETMAIN=                                  *.\n.*                   Add GETMLOC= for LOC= operand of GETMAIN=       *.\n.*    26May88   LDW  Fix bug in ZERO code                            *.\n.*    15May88   LDW  Fix bug in ENV= consistency check               *.\n.*    12MAY88   LDW  ADD 'ZERO' AS THIRD OPERAND OF GETMAIN=         *.\n.*    21FEB88   LDW  CHANGE GETMAIN/FREEMAIN FROM R TO RU FOR MVS/XA *.\n.*                   ADD AMODE= AND RMODE= KEYWORDS                  *.\n.*    01-07-85  EMS  FIX DELETE=* DEFAULT FOR LOAD=                  *.\n.*    01-02-85  EMS  ADD DELETE=,MODE= KEYWORDS                      *.\n.*    09-06-84  EMS  FIX BUG WHEN CODING 'PL=,LOAD=DATETIME'         *.\n.*    06-24-84  LDW  FIX BUG WHEN CODING 'SAVE=,EXIT=LEAVE'          *.\n.*    11-09-83  LDW  MAKE REGS=(NO,R) WORK CORRECTLY                 *.\n.*    04-30-82  LDW  FIX PREVIOUS FIX                                *.\n.*    04-25-82  LDW  FIX FOR \"SAVE=\" NULL OPERAND -> NO SAVEAREA     *.\n.*    10-19-81  EMS  FIX FOR ASMH \"L'\" PROBLEM                       *.\n.*    12-04-80  LDW  CHANGE NAME FROM \"ENTR\" TO \"OSENTER\"            *.\n.*    11-13-80  LDW  FIX 10-23-80 FIX; FIX NON-RENT TEST             *.\n.*    10-23-80  LDW  FIX 10-08-80 FIX                                *.\n.*    10-08-80  LDW  FIX FOR ENV=(CP,SIMULATE) WITH NO PL=           *.\n.*    07-07-80  LDW  MOVE USINGS TO CORRECT PROBLEMS IN EXIT CODE    *.\n.*    05-14-80  LDW  REPLACE TSFAKE=YES WITH ENV=SIMULATE            *.\n.*    05-13-80  LDW  ADD IKJRLSA KEYWORD; FIX BUGS IN ENV=CP CODE    *.\n.*    09-27-79  LDW  FIX BUG IN TSO-CP SIMULATION CODE               *.\n.*    02-21-79  LDW  ADD DATE= AND TIME= OPERANDS                    *.\n.*    01-12-79  LDW  FIX BUG; ADD MVS CODE FOR LOAD=                 *.\n.*    12-29-78  LDW  ADD BASE4=; FIX LENGTH OF GETMAIN IF MACRO=YES; *.\n.*                   CHECK FOR RC=(R1) AND DYNAMIC AREA (GETMAIN=);  *.\n.*                   ADD PRINT=; FIX FOR BATCH CALL OF ENV=CP PGMCK  *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  OPERANDS AVAILABLE ARE:                                          *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE=    -- DEFAULT:  BASE=12                                    *.\n.*              THE BASE REGISTER TO BE USED                         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE2=   -- DEFAULT:  (NONE)                                     *.\n.*              A SECOND BASE REGISTER                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE3=   -- DEFAULT:  (NONE)                                     *.\n.*              A THIRD BASE REGISTER (ONLY VALID IF BASE2= IS CODED)*.\n.*                                                                   *.\n.*  BASE4=   -- DEFAULT:  (NONE)                                     *.\n.*              A FOURTH BASE REGISTER (MUST HAVE BASE2= AND BASE3=) *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SAVE=    -- DEFAULT:  SAVE=*                                     *.\n.*              NAME OF A SAVE AREA TO BE USED.                      *.\n.*              IF SAVE=* IS CODED, AN INLINE SAVE AREA WILL BE      *.\n.*              GENERATED, WITH A UNIQUE NAME.  SAVE=* IS IGNORED    *.\n.*              IF GETMAIN= IS CODED.  ANY OTHER VALUE OF SAVE=      *.\n.*              WILL CAUSE AN ERROR IF GETMAIN= IS ALSO USED.        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  GETMAIN= -- Default:  (none)                                     *.\n.*              GETMAIN=length, or                                   *.\n.*              GETMAIN=(length,dsectname).                          *.\n.*              GETMAIN=(length,dsectname,ZERO).                     *.\n.*              This operand causes a GETMAIN for \"length\" bytes to  *.\n.*              be generated.  The first 18 words will be reserved   *.\n.*              for the save area.  The address of the area obtained *.\n.*              is placed in R13, and if \"dsectname\" is coded, a     *.\n.*              USING is done.  If the word \"ZERO\" is coded as the   *.\n.*              third operand, then the work area will be zeroed     *.\n.*              before it is used.                                   *.\n.*              If MACRO=YES is coded, the default for GETMAIN= is   *.\n.*              GETMAIN=(TSDSECTL,TSDSECT) and the EQU for TSDSECTL  *.\n.*              will be generated by OSENTER.                        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  GETMLOC= -- Default:  (none)                                     *.\n.*              GETMLOC=(ANY,ANY), etc                               *.\n.*              This operand becomes the LOC= operand of GETMAIN.    *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SP=      -- DEFAULT:  SP=1                                       *.\n.*              THE SUBPOOL FOR THE WORKAREA OBTAINED BY GETMAIN=    *.\n.*                                                                   *.\n.*                                                                   *.\n.*  REGS=    -- DEFAULT:  REGS=(YES,R)                               *.\n.*              THE FIRST OPERAND (YES/NO) INDICATES WHETHER THE     *.\n.*              REGEQU MACRO WILL BE USED TO GENERATE EQU'S FOR      *.\n.*              SYMBOLIC REGISTERS.  THE SECOND OPERAND IS THE       *.\n.*              PREFIX TO BE USED.                                   *.\n.*              NOTE:  REGS=(YES,Q) IS THE SAME AS REGS=(,Q)         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  F=       -- DEFAULT:  (NONE)                                     *.\n.*              THE PREFIX TO BE USED FOR SYMBOLIC FLOATING POINT    *.\n.*              REGISTER NAMES.                                      *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SECTYPE= -- DEFAULT:  SECTYPE=CSECT                              *.\n.*              THE SECTION TYPE TO BE GENERATED.                    *.\n.*              POSSIBLE VALUES:  CSECT/DSECT/ENTRY/NONE             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  USING=   -- DEFAULT:  (NONE)                                     *.\n.*              A USING WILL BE DONE FOR EACH PAIR OF OPERANDS.      *.\n.*              CODED AS FOLLOWS:                                    *.\n.*              USING=(DSECT1,REG1,DSECT2,REG2,...)                  *.\n.*                                                                   *.\n.*                                                                   *.\n.*  EXIT=    -- DEFAULT:  (NONE)                                     *.\n.*              THE NAME OF AN EXIT ROUTINE TO BE BRANCHED TO THAT   *.\n.*              WILL FREE THE WORKAREA (IF ONE WAS OBTAINED BY       *.\n.*              GETMAIN=), DECHAIN SAVE AREAS, SET THE RETURN CODE,  *.\n.*              AND RETURN TO CALLER.                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RC=      -- DEFAULT:  RC=(15)                                    *.\n.*              THE RETURN CODE TO BE PASSED BACK TO THE CALLER.     *.\n.*              THIS OPERAND IS IGNORED IF EXIT= IS NOT CODED.       *.\n.*              RC= CAN BE CODED AS RC=(REG) OR RC=EXPRESSION.       *.\n.*              THIS OPERAND IS MUTUALLY EXCLUSIVE WITH THE RCLOC=   *.\n.*              OPERAND.                                             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RCLOC=   -- DEFAULT:  (NONE)                                     *.\n.*              THE STORAGE LOCATION FROM WHICH THE RETURN CODE WILL *.\n.*              BE OBTAINED.  MUST HAVE FULLWORD OR HALFWORD TYPE    *.\n.*              ATTRIBUTE.  THIS OPERAND IS MUTUALLY EXCLUSIVE       *.\n.*              WITH THE RC= OPERNAND.                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  T=       -- DEFAULT:  T=T                                        *.\n.*              IGNORED IF EXIT= NOT CODED.  SPECIFIES THAT THE OLD  *.\n.*              SAVE AREA WILL BE FLAGGED BY A X'FF' AT OFFSET 12    *.\n.*              TO INDICATE THAT IT IS INACTIVE.  NOTE:  \"T=\" SHOULD *.\n.*              NOT BE CODED FOR EXIT ROUTINES, SUCH AS STAE ROUTINES*.\n.*                                                                   *.\n.*                                                                   *.\n.*  ID=      -- DEFAULT:  ID=CSECT NAME                              *.\n.*              AN ID TO PUT IN CHARACTER FORM NEAR THE BEGINNING    *.\n.*              OF THE CSECT, TO AID IN DUMP READING.                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ENV=     -- DEFAULT:  ENV=CALL                                   *.\n.*              THE ENVIRONMENT THAT THE PROGRAM WILL OR SHOULD BE   *.\n.*              RUNNING UNDER.  VALID OPERANDS (MORE THAN ONE CAN    *.\n.*              BE CODED, IN PARENS):                                *.\n.*              CALL -- BATCH EXEC PGM=, OR TSO CALL, OR LINK MACRO  *.\n.*              CP -- TSO COMMAND PROCESSOR                          *.\n.*              TSOCP -- ALIAS FOR CP                                *.\n.*              TSO -- MAY BE RUN ON TSO                             *.\n.*              SIMULATE -- PROGRAM CAN BE INVOKED VIA CALL OR AS A  *.\n.*                     COMMAND PROCESSOR (CP) (SEE BELOW)            *.\n.*              SIM -- ALIAS FOR SIMULATE                            *.\n.*              MVT -- PROGRAM WILL BE RUN UNDER MVT.                *.\n.*              MVS -- PROGRAM WILL BE RUN UNDER MVS.  (OS/VS2 R3)   *.\n.*              PLI -- PROGRAM WILL BE CALLED BY A PLIX PROGRAM.     *.\n.*              PLIX -- ALIAS FOR PLI                                *.\n.*                                                                   *.\n.*              NOTE:  CALL IS MUTUALLY EXCLUSIVE WITH CP/TSOCP.  IF *.\n.*              THE PROGRAM MAY BE RUN EITHER THRU CALL OR AS A CP,  *.\n.*              SPECIFY ENV=TSO OR ENV=CP (ENV=CP IMPLIES ENV=TSO)   *.\n.*                                                                   *.\n.*              IF ENV=SIMULATE IS CODED, AND THE PROGRAM IS CALLED  *.\n.*              VIA \"CALL\", THEN A FAKE CPPL, PSCB, CBUF, UPT, AND   *.\n.*              ECT WILL BE BUILT, BASED ON THE INFO IN THE PARM     *.\n.*              FIELD.  IF ENV=CALL IS CODED (OR DEFAULTED), A FAKE  *.\n.*              PARM PTR WORD AND LENGTH WILL BE BUILT BASED ON THE  *.\n.*              INFO IN THE CBUF.  THE NECESSARY AREA WILL BE        *.\n.*              GENERATED AND NAMED EITHER IN THE WORK AREA (IF      *.\n.*              ANY), OR INLINE.                                     *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARMREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO SAVE THE PARM POINTER PASSED IN R1   *.\n.*              (\"LR  PARMREG,R1\")                                   *.\n.*              PARMREG=(Rx,dsect) then generates:                   *.\n.*              USNGX dsect,Rx                                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LPARM=   -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER INTO WHICH THE PARM ADDR WILL BE LOADED *.\n.*              ( \"L  LPARM,0(,R1)\" )                                *.\n.*              LPARM=(Rx,dsect) then generates:                     *.\n.*              USNGX dsect,Rx                                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ADDRREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE ADDRESS OF THE ACTUAL    *.\n.*              TEXT OF THE PARM.                                    *.\n.*              NOTE:  ADDRREG= AND LENREG= ARE AN OPERAND PAIR --   *.\n.*              IF ONE IS CODED, THE OTHER MUST ALSO BE CODED.       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LENREG=  -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE LENGTH OF THE PARM TEXT. *.\n.*              SEE NOTE FOR ADDRREG=                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LOAD=    -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF MODULES TO BE LOADED.  THE ADDRESS OF      *.\n.*              EACH MODULE WILL BE SAVED IN A WORD WITH THE NAME    *.\n.*              OF THE MODULE.                                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  DELETE=  -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF MODULES TO BE DELETED.  DELETE=* WILL      *.\n.*              DELETE ALL MODULES LOADED VIA LOAD=.  INCLUDING      *.\n.*              AN * IN THE LIST OF MODULES TO BE DELETED WILL       *.\n.*              DELETE ALL LOADED MODULES IN ADDITION TO ENTRIES     *.\n.*              SPECIFIED.                                           *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PL=      -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF PARAMETER LISTS TO BE GENERATED AND        *.\n.*              INITIALIZED.  THE FOLLOWING PARM LISTS ARE           *.\n.*              SUPPORTED:  CSCAN, PARSE, DAIR, IO, MESSAGE.         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  MACRO=   -- DEFAULT:  MACRO=NO                                   *.\n.*              IF 'YES' IS CODED, A 'TSWORK' MACRO WILL BE ISSUED   *.\n.*              TO DEFINE MORE STORAGE IN THE WORK AREA.  (TSWORK    *.\n.*              MACRO IS DEFINED BY THE USER.)                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARSE=   -- DEFAULT:  (NONE)                                     *.\n.*              FORMAT:  PARSE=PCLNAME OR PARSE=(PCLNAME,ERRADDR)    *.\n.*              WILL USE THE TSPARSE MACRO TO PARSE THE COMMAND LINE *.\n.*              (POINTED TO BY CPPLCBUF).  PCLNAME IS THE NAME OF    *.\n.*              THE PCL CSECT.  IF ERRADDR IS GIVEN, GENERATES ERROR *.\n.*              ANALYSIS ROUTINE ROUTINE WITH TSPARERR MACRO.        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  IKJRLSA= -- DEFAULT:  IKJRLSA=YES IF PARSE= CODED, =NO OTHERWISE *.\n.*              IKJRLSA=YES SPECIFIES THAT THE EXIT CODE SHOULD DO   *.\n.*              AN IKJRLSA TO RELEASE PARSE'S WORK AREA.  THIS       *.\n.*              OPERAND IS IGNORED IF EXIT= IS NOT CODED.            *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PRINT=   -- DEFAULT:  (NONE)                                     *.\n.*              PRINT=NOGEN SPECIFIES THAT THE DSECTS SHOULD NOT BE  *.\n.*              PRINTED                                              *.\n.*                                                                   *.\n.*                                                                   *.\n.*  DATE=    -- DEFAULT:  (DATE OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*              COMPARING AGAINST AN OLD LOAD MODULE)                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  TIME=    -- DEFAULT:  (TIME OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*              COMPARING AGAINST AN OLD LOAD MODULE)                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  MODE=    -- DEFAULT:  (NONE)                                     *.\n.*              SPECIFIES WHAT MODE COMMAND WAS INVOKED WITH.        *.\n.*              CONTAINS 2 TO 4 OPERANDS :                           *.\n.*                  1)   FLAG BYTE                                   *.\n.*                  2)   BATCH MODE EQUATE                           *.\n.*                  3)   TSO CALL MODE EQUATE                        *.\n.*                  4)   TSO CP MODE EQUATE                          *.\n.*              BYTE IS SET VIA AN MVI INDICATING APPROPRIATE MODE.  *.\n.*                                                                   *.\n.*                                                                   *.\n.*********************************************************************.\n.*.\n.*\n.*\n.*  IHB&SYSNDX LETTERS USED:  ABC EF    KL   PQ STUV X Z\n.*                   UNUSED:     D  GHIJ  MNO  R    W Y 0123456789$#@\n.*\n.SKIPCMT ANOP\n         GBLB  &GDAIRM,&GPARSEM         TO AVOID DUPLICATES\n         GBLB  &GDAIR,&GPARSE           DAIR OR PARSE LOADED\n         LCLC  &ZBASE,&ZSAVE,&Q,&NAME,&RCRC,&LR,&AR,&LQ\n         LCLC  &GET1,&GET2,&PARNAME\n         LCLC  &IHBNX,&BLANK1,&BLANK2\n         LCLC  &R0,&R1,&R2,&R3,&R12,&R13,&R14,&R15\n         LCLA  &L,&X,&Y\n         LCLB  &ENVTSO,&ENVCALL,&ENVCP,&ENVPLI,&ENVMVT,&ENVMVS,&ENVSIM\n         LCLB  &FKCALL,&FKCP,&MVSCVT,&ASMERR\n         LCLB  &CSPL,&PARS,&DAIR,&IO,&MSG\n         LCLB  &MODEBIT\n&IHBNX   SETC  'IHB&SYSNDX'\n&BLANK1  SETC  '        '\n&BLANK2  SETC  '        '\n&PARNAME SETC  ''\n&LQ      SETC  'L'''                    STUPID ASSEMBLER\n         AIF   ('&PRINT' NE 'NOGEN').PRINTOK\n         AIF   ('&PRINT' NE '').PRINTOK\n         MNOTE 4,'WHAT DOES PRINT=&PRINT MEAN???'\n.*\n.*\n.*\n.PRINTOK AIF   ('&SYMREG' EQ '').NOSYMRG\n         MNOTE 0,'SYMREG= IS UNSUPPORTED -- USE REGS='\n.NOSYMRG AIF   ('&DSECT' EQ '').NOD$ECT\n         MNOTE 4,'DSECT= IS UNSUPPORTED'\n.NOD$ECT ANOP\n.*-----------------------------------*.\n.*  ENVIRONMENT                      *.\n.*-----------------------------------*.\n&X       SETA  0\n.ENVLOOP AIF   (N'&ENV EQ &X).ENVDONE\n&X       SETA  &X+1\n         AIF   ('&ENV(&X)' EQ 'TSO'     ).ENVTSO\n         AIF   ('&ENV(&X)' EQ 'CALL'    ).ENVCALL\n         AIF   ('&ENV(&X)' EQ 'CP'      ).ENVCP\n         AIF   ('&ENV(&X)' EQ 'TSOCP'   ).ENVCP\n         AIF   ('&ENV(&X)' EQ 'SIM'     ).ENVSIM\n         AIF   ('&ENV(&X)' EQ 'SIMULATE').ENVSIM\n         AIF   ('&ENV(&X)' EQ 'MVS'     ).ENVMVS\n         AIF   ('&ENV(&X)' EQ 'MVT'     ).ENVMVT\n.**      AIF   ('&ENV(&X)' EQ 'PLI'     ).ENVPLI\n.**      AIF   ('&ENV(&X)' EQ 'PLIX'    ).ENVPLI\n         MNOTE 4,'ENV=&ENV(&X) IS INVALID -- IGNORED'\n         AGO   .ENVLOOP\n.ENVTSO  ANOP\n&ENVTSO  SETB  1\n         AGO   .ENVLOOP\n.ENVCALL ANOP\n&ENVCALL SETB  1\n         AGO   .ENVLOOP\n.ENVCP   ANOP\n&ENVCP   SETB  1\n&ENVTSO  SETB  1                        ENV=CP IMPLIES ENV=TSO\n         AGO   .ENVLOOP\n.ENVSIM  ANOP\n&ENVSIM  SETB  1\n         AGO   .ENVLOOP\n.ENVMVS  ANOP\n&ENVMVS  SETB  1\n         AGO   .ENVLOOP\n.ENVMVT  ANOP\n&ENVMVT  SETB  1\n         AGO   .ENVLOOP\n.ENVPLI  ANOP\n&ENVPLI  SETB  1\n         AIF   ('&BASE' NE '12' AND '&BASE' NE 'R12').ENVLOOP\n         MNOTE 4,'WARNING:  BASE=&BASE IS NOT COMPATIBLE WITH ENV=PLIX'\n         AGO   .ENVLOOP\n.ENVDONE AIF   (NOT &ENVCALL OR NOT &ENVCP).ENVOK1\n        MNOTE 4,'ENV=(CALL,CP) MAY NOT BOTH BE GIVEN.  \"CALL\" IGNORED.'\n&ENVCALL SETB  0                        IGNORE IT\n.ENVOK1  AIF   (NOT &ENVMVT OR NOT &ENVMVS).ENVOK2\n         MNOTE 4,'MAKE UP YOUR MIND:  ENV=MVT OR ENV=MVS, BUT NOT BOTH.$\n                 MVT ASSUMED.'\n&ENVMVS  SETB  0                        IGNORE IT\n.*NVOK2  AIF   (NOT &ENVCP).ENVOK5\n.ENVOK2  AIF   (NOT &ENVCP).ENVOK3\n         AIF   (&ENVCP AND '&PARMREG' NE '').ENVOK3\n         MNOTE 4,'PARMREG= REQUIRED FOR ENV=CP'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK3  AIF   ('&TSFAKE' EQ '').ENVOK4\n         MNOTE 4,'TSFAKE= DISCONTINUED.  ENV=SIMULATE USED INSTEAD.  CH$\n               ANGE YOUR SOURCE'\n&ENVSIM  SETB  1                        SET IT\n.ENVOK4  AIF   (N'&GETMAIN EQ 2).ENVOK99\n         AIF   (N'&GETMAIN EQ 3).ENVOK99\n         AIF   ('&MACRO' EQ 'YES').ENVOK99\n         AIF   (NOT &ENVSIM).ENVOK5\n         AIF   (NOT &ENVCP ).ENVOK5\n         MNOTE 4,'ENV=SIM(ULATE) WITH ENV=CP REQUIRES GETMAIN=(LENGTH,D$\n               SECT) (OR MACRO=YES)'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK5  AIF   ('&PL' EQ '').ENVOK99\n         MNOTE 4,'PL=&PL WITH ENV=CP REQUIRES GETMAIN=(LENGTH,DSECT) (O$\n               R MACRO=YES)'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK99 AIF   (NOT &ASMERR).ENVOK      SKIP IF NO ASSEMBLY ERRORS\n         MNOTE 0,'<<< ASSEMBLY ERRORS WILL RESULT >>>'\n.*-----------------------------------*.\n.*  ENV=SIMULATE                     *.\n.*-----------------------------------*.\n.ENVOK   AIF   (NOT &ENVSIM).NOFAKE\n.FAKENO  AIF   ('&PARMREG' NE '').OKFAKE0\n         MNOTE 4,'*** PARMREG= MUST BE GIVEN IF ENV=SIMULATE IS GIVEN. $\n                ENV=SIMULATE IGNORED.'\n         AGO   .NOFAKE\n.OKFAKE0 AIF   (NOT &ENVCALL).NOFKCAL\n&FKCALL  SETB  1\n         AGO   .NOFAKE\n.NOFKCAL AIF   (NOT &ENVCP).NOFKCP\n&FKCP    SETB  1\n         AGO   .NOFAKE\n.NOFKCP  MNOTE 2,'WHAT TO SIMULATE?????'\n.NOFAKE  ANOP\n         AIF   (T'&MODE EQ 'O').NOMODE\n         AIF   ((N'&MODE GE 2) OR (N'&MODE LE 4)).MODEOK\n         MNOTE 0,'INVALID SPECIFICATION OF &&MODE OPERAND'\n         AGO   .NOMODE\n.MODEOK  ANOP  ,\n&MODEBIT SETB  1                        MODE IS OK\n.NOMODE  ANOP  ,\n.*-----------------------------------*.\n.*  SAVE/GETMAIN                     *.\n.*-----------------------------------*.\n&ZSAVE   SETC  '&SAVE'                  INIT DEFAULT\n&GET1    SETC  '&GETMAIN(1)'\n&GET2    SETC  '&GETMAIN(2)'\n         AIF   ('&MACRO' NE 'YES').OKGET2\n         AIF   ('&GET1' NE '').OKGET1\n&GET1    SETC  'TSDSECTL'               SET DEFAULT\n.OKGET1  AIF   ('&GET2' NE '').OKGET2\n&GET2    SETC  'TSDSECT'                SET DEFAULT\n.OKGET2  AIF   ('&MACRO' EQ 'YES' OR '&GET1' NE '').GMOK1\n         AIF   ('&GETMAIN' EQ '').KEEPSAV\n         MNOTE 8,'GETMAIN= CODED INCORRECTLY.  MACRO TERMINATED'\n         MEXIT\n.KEEPSAV AIF   ('&ZSAVE' EQ '').CHKBASE SAVE AREA NOT USED\n         MNOTE *,'<<< GENERATED CODE WILL NOT BE RE-ENTRANT >>>'\n         AGO   .CHKBASE\n.GMOK1   ANOP\n&ZSAVE   SETC  ''                       NO SAVE AREA\n.*-----------------------------------*.\n.*  BASES                            *.\n.*-----------------------------------*.\n.CHKBASE AIF   ('&BASE4' EQ '').NOBASE4\n         AIF   ('&BASE3' NE '').BASE3\n         MNOTE 8,'*** BASE4 IGNORED, INVALID WITHOUT BASE3= ***'\n.NOBASE4 AIF   ('&BASE3' EQ '').OKBASES\n.BASE3   AIF   ('&BASE2' NE '').OKBASES\n         MNOTE 8,'*** BASE3 IGNORED, INVALID WITHOUT BASE2= ***'\n.OKBASES AIF   (('&GETMAIN' EQ '') AND ('&MACRO' NE 'YES')).OK1\n         AIF   ('&SAVE'   EQ '*').OK1\n         AIF   ('&SAVE'    EQ '').OK1\n         MNOTE 12,'*** SAVE= MUTUALLY EXCLUSIVE WITH GETMAIN= AND/OR MA$\n               CRO=YES.  MACRO TERMINATED ***'\n         MEXIT\n.OK1     AIF   ('&NFS' NE '').GOTNAME\n         MNOTE 12,'*** CSECT NAME OMITTED ***'\n.*-----------------------------------*.\n.*  SECTYPE=                         *.\n.*-----------------------------------*.\n.GOTNAME AIF   ('&SECTYPE' NE 'CSECT').NOCSECT\n.DOCSECT ANOP\n&NFS     CSECT                          OSENTER -- 29May88 -- LDW\n         AGO   .SECDONE\n.NOCSECT AIF   ('&SECTYPE' NE 'DSECT').NODSECT\n&NFS     DSECT                          OSENTER -- 29May88 -- LDW\n         AGO   .SECDONE\n.NODSECT AIF   ('&SECTYPE' EQ 'NONE').SECNONE\n         AIF   ('&SECTYPE' EQ 'ENTRY').ENTRY\n       MNOTE 8,'*** SECTYPE=&SECTYPE IS INVALID, SECTYPE=CSECT ASSUMED'\n         AGO   .DOCSECT\n.ENTRY   ENTRY &NFS\n.SECNONE ANOP\n*  DEFINE NAME\n&NFS     DC    0D'0'                    OSENTER -- 29May88 -- LDW\n.*-----------------------------------*.\n.*  AMODE=/RMODE=                    *.\n.*-----------------------------------*.\n.SECDONE AIF   ('&AMODE' EQ '').NOAMODE\n&NFS     AMODE &AMODE\n.NOAMODE AIF   ('&RMODE' EQ '').NORMODE\n&NFS     RMODE &RMODE\n.NORMODE ANOP\n.*-----------------------------------*.\n.*  REGS=                            *.\n.*-----------------------------------*.\n&Q       SETC  '&REGS(2)'\n         AIF   ('&REGS(1)' EQ '' AND '&REGS(2)' NE '').DOREGS\n         AIF   ('&REGS(1)' EQ 'NO').NOREGS\n         AIF   ('&REGS(2)' NE '').DOREGS\n&Q       SETC  'R'\n.DOREGS  ANOP\n*=====================================================================*\n*        REGISTER EQUATES                                             *\n         REGEQU  PREFIX=&Q,FR=&F\n         SPACE 1\n.NOREGS  ANOP\n&L       SETA  K'&Q\n&R0      SETC  '&Q'.'0'\n&R1      SETC  '&Q'.'1'\n&R2      SETC  '&Q'.'2'\n&R3      SETC  '&Q'.'3'\n&R12     SETC  '&Q'.'12'\n&R13     SETC  '&Q'.'13'\n&R14     SETC  '&Q'.'14'\n&R15     SETC  '&Q'.'15'\n&L       SETA  K'&REGS(2)\n.*-----------------------------------*.\n.*  MISC WORKAREA GOODIES            *.\n.*-----------------------------------*.\n.*%%%%%% AIF   (&ENVCP AND '&PL' NE '').NOGM2   WILL BE GENERATED LATER\n         AIF   (&ENVCP).NOGM2           WILL BE GENERATED LATER\n         AIF   ('&GET2' EQ '').NOGM2    DSECT NAME OMITTED\n&GET2    DSECT\n         DS    18F                      SAVE AREA\n.* IF ENV=SIMULATE AND ENV=CP THEN GENERATE THE SIMULATION AREA HERE.\n         AIF   (NOT (&ENVSIM AND &ENVCP)).NOSIM1\n&IHBNX.F DS    A,2H,CL100               AREA FOR FAKE PARM FIELD\n.NOSIM1  AIF   (NOT &ENVCP).NO$CPPL\n         AIF   ('&PL' EQ '').NOTSECB\nTSECB    DS    F\n.NOTSECB SPACE 1\n*        TSCPPL\n         TSCPPL\n.*-----------------------------------*.\n.*  LOAD=                            *.\n.*-----------------------------------*.\n.NO$CPPL AIF   ('&LOAD' EQ '').NOLOAD1\n&X       SETA  0\n.LOADLP1 ANOP\n&X       SETA  &X+1\n&LOAD(&X) DS   A\n         AIF   (&X LT N'&LOAD).LOADLP1\n.*-----------------------------------*.\n.*  BASE=                            *.\n.*-----------------------------------*.\n.NOLOAD1 SPACE 3\n&NFS     CSECT                          RESUME\n.NOGM2   ANOP\n&ZBASE   SETC  '&BASE'\n         AIF   (&L EQ 0).BASEOK\n         AIF   ('&BASE'(1,&L) EQ '&Q').BASEOK\n         AIF   (T'&BASE NE 'N').BASEOK\n&ZBASE   SETC  '&Q&BASE'\n.BASEOK  USING *,&R15                   TEMPORARY BASE\n         B     &IHBNX.B                 AROUND GORF\n         DROP  &R15                     DROP TEMP BASE\n.*-----------------------------------*.\n.* SET UP BASE REGISTERS FOR EXIT    *.\n.*-----------------------------------*.\n         USNGX &NFS,&ZBASE\n         AIF   ('&BASE2' EQ '').BASEFIX\n         USNGX &NFS+4096,&BASE2\n         AIF   ('&BASE3' EQ '').BASEFIX\n         USNGX &NFS+8192,&BASE3\n         AIF   ('&BASE4' EQ '').BASEFIX\n         USNGX &NFS+12288,&BASE4\n.BASEFIX ANOP\n.*-----------------------------------*.\n.* GENERATE USINGS, IF GIVEN         *.\n.*-----------------------------------*.\n         AIF   (N'&USING LT 1).NOUSING\n&X       SETA  1\n.USINGLP USNGX &USING(&X),&USING(&X+1)\n&X       SETA  &X+2\n         AIF   (&X LT N'&USING).USINGLP\n.NOUSING ANOP\n.*-----------------------------------*.\n.*  ID                               *.\n.*-----------------------------------*.\n         AIF   ('&ID(1)' EQ '*').IDSTAR\n         AIF   ('&ID(1)' EQ '' ).IDSTAR\n         AIF   ('&ID' EQ '*NONE*').DONEID\n         ID    &ID(1),&ID(2),DATE=&DATE,TIME=&TIME\n         AGO   .DONEID\n.IDSTAR  ID    &NFS,&ID(2),DATE=&DATE,TIME=&TIME\n.*-----------------------------------*.\n.*  BASE2, BASE3, BASE4              *.\n.*-----------------------------------*.\n.DONEID  AIF   ('&BASE2' EQ '').NOBASE2\n&IHBNX.A DC    A(&NFS+4096)             SECOND BASE REGISTER\n         AIF   ('&BASE3' EQ '').NOBASE2\n&IHBNX.Z DC    A(&NFS+8192)             LET'S NOT GET CARRIED AWAY...\n         AIF   ('&BASE4' EQ '').NOBASE2\n&IHBNX.Q DC    A(&NFS+12288)            BUT THIS IS GETTING RIDICULOUS\n.NOBASE2 AIF   (('&ZSAVE' NE '*') OR ('&GET1' NE '')).NOSVSTR NO INL SA\n.*OBASE2 AIF   ('&ZSAVE' NE '*').NOSVSTR NO INLINE SAVE AREA\n&IHBNX.S DC    18F'0'                   SAVE AREA\n&ZSAVE   SETC  '&IHBNX.S'\n.NOSVSTR AIF   (NOT &ENVSIM OR &ENVCP OR '&GET2' NE '').NOFKY2\n&IHBNX.F DC    A(0),2H'0',CL100' '      AREA FOR PHONY PARM FIELD\n.*-----------------------------------*.\n.*  GETMAIN=                         *.\n.*-----------------------------------*.\n.NOFKY2  AIF   ('&GET1&GET2' EQ '').NOSPLEN  NO SP & LENGTH\n         AIF   ('&BASE2' NE '').BASE2L\n.*       DC    0A(0)                    ALIGNMENT\n.BASE2L  ANOP                           DON'T NEED ALIGNMENT\n.*HBNX.L DC    AL1(&SP),AL3(&GET1)      GETMAIN SP AND LENGTH\n&IHBNX.L DC    A(&GET1)                 GETMAIN LENGTH\n.NOSPLEN AIF   ('&EXIT' EQ '').NOEXIT\n.*-----------------------------------*.\n.*  EXIT= AND RC=                    *.\n.*-----------------------------------*.\n         SPACE 2\n*=====================================================================*\n&RCRC    SETC  '&RC(1)'\n         AIF   ('&RC' NE '').OKRC1\n&RCRC    SETC  '&R15'\n.OKRC1   AIF   ('&RCLOC' EQ '').OKRC3\n         AIF   ('&RC'    EQ '').OKRC2\n         MNOTE 0,'*** RC= AND RCLOC= MUTUALLY EXCLUSIVE -- RC= IGNORED'\n.OKRC2   ANOP\n&RCRC    SETC  '&RCLOC'\n.OKRC3   ANOP\n&X       SETA  8-K'&RCRC                NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKRCL\n&BLANK1  SETC  ''\n         AGO   .CHAR8RC\n.OKRCL   ANOP\n&BLANK1  SETC  '&BLANK1'(1,&X)\n.CHAR8RC ANOP\n&X       SETA  8-K'&EXIT(1)             NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKEXITL\n&BLANK2  SETC  ''\n         AGO   .CHAR8EX\n.OKEXITL ANOP\n&BLANK2  SETC  '&BLANK2'(1,&X)\n.CHAR8EX AIF   ('&RC' EQ '').MREGRC\n         AIF   ('&RC'(1,1) EQ '(').MREGRC\n         MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE=&RCRC  X\n                 &BLANK1   &BLANK2    *'\n         AGO   .MRCCONT\n.MREGRC  MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE IN &RCR$\n               C &BLANK1   &BLANK2    *'\n.MRCCONT ANOP\n*=====================================================================*\n&NAME    SETC  '&EXIT'\n         AIF   ('&GET2' EQ '').NOXITUS  SKIP IF NO DSECT NAME SUPPLIED\n         USING &GET2,&R13\n.NOXITUS AIF   ('&IKJRLSA' EQ 'NO').NO$RLSA    SKIP IF HE SAID NO\n         AIF   ('&PARSE' EQ '').RLSA$2  CHECK FOR USER SPECIFIED AREA\n         AIF   ('&IKJRLSA' EQ ''   ).RLSA$1  CONTINUE IF NAME OK\n         AIF   ('&IKJRLSA' EQ 'YES').RLSA$1  CONTINUE IF NAME OK\n         MNOTE 8,'IKJRLSA=&IKJRLSA CANNOT BE SPECIFIED WITH PARSE=&PARS$\n               E (CODE IKJRLSA=YES/NO OR OMIT IKJRLSA=)'\n.RLSA$1  ANOP\n*        IKJRLSA  TSPARANS              FREE PARSE'S WORK AREAS\n&NAME    IKJRLSA  TSPARANS\n         AGO   .RLSA$3                  CONTINUE\n.RLSA$2  AIF   ('&IKJRLSA' EQ '').NO$RLSA\n*        IKJRLSA  &IKJRLSA              FREE PARSE'S WORK AREAS\n&NAME    IKJRLSA  &IKJRLSA\n.RLSA$3  SPACE 2\n&NAME    SETC  ''\n.NO$RLSA ANOP  ,\n         AIF   ('&DELETE' EQ '').NODEL    SKIP DELETE SECTION\n&X       SETA  1                        INIT TO FIRST ENTRY\n.DEL$LP  AIF   ('&DELETE(&X)' EQ '').NODEL  DONE HERE\n         AIF   ('&DELETE(&X)' EQ '*').NODELLD   REGULAR\n         AIF   (NOT &ENVMVS).YESDEL1\n&NAME    OSENT01  &DELETE(&X),IKJPTGT,464,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJPUTL,444,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJGETL,348,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJPARS,524,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJDAIR,732,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJSTCK,472,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJSCAN,480,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEHCIR,740,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEHDEF,736,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEFF02,976,DELETE\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESDEL1    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n         AGO   .YESDEL3\n.YESDEL1 ANOP  ,\n&NAME    OC    &DELETE(&X),&DELETE(&X)  IS IT HERE?\n&NAME    SETC  ''\n         BZ    *+10                     NO, SKIP DELETE\n.YESDEL3 ANOP  ,\n&MVSCVT  SETB  0                        RESET FOR LOAD SECTION\n         MNOTE *,'       DELETE  EPLOC==CL8''&DELETE(&X)'''\n         DELETE  EPLOC==CL8'&DELETE(&X)'\n         AGO   .DEL$END                 LOOP AGAIN\n.NODELLD ANOP\n&Y       SETA  1                        INIT FOR FIRST ENTRY\n.DEL$LLP AIF   ('&LOAD(&Y)' EQ '').DEL$END   DONE HERE\n         AIF   (NOT &ENVMVS).YESDEL2\n&NAME    OSENT01  &LOAD(&X),IKJPTGT,464,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJPUTL,444,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJGETL,348,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJPARS,524,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJDAIR,732,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJSTCK,472,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJSCAN,480,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEFF02,976,DELETE\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESDEL2    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n         AGO   .YESDEL4\n.YESDEL2 ANOP  ,\n&NAME    OC    &LOAD(&Y),&LOAD(&Y)      IS IT HERE?\n&NAME    SETC  ''\n         BZ    *+10                     NO, SKIP DELETE\n.YESDEL4 ANOP  ,\n&MVSCVT  SETB  0                        RESET FOR LOAD SECTION\n         MNOTE *,'       DELETE  EPLOC==CL8''&LOAD(&Y)'''\n         DELETE  EPLOC==CL8'&LOAD(&Y)'\n&Y       SETA  &Y+1                     INCR IT\n         AGO   .DEL$LLP                 LOOP IT AGAIN\n.DEL$END ANOP  ,\n&X       SETA  &X+1                     NEXT DELETE\n         AGO   .DEL$LP                  LOOP AGAIN\n.NODEL   ANOP  ,\n         AIF   ('&RCRC' NE '0').RCNOT0\n&NAME    XR    &R15,&R15                SET RETURN CODE ZERO\n&NAME    SETC  ''\n         AGO   .HAVERC\n.RCNOT0  AIF   ('&RCLOC' EQ '').NORCLOC RCLOC NOT GIVEN\n         AIF   (T'&RCLOC EQ 'F').RCLOCF\n         AIF   (T'&RCLOC EQ 'H').RCLOCH\n         MNOTE 0,'*** UNKNOWN TYPE FOR RCLOC=&RCLOC -- \"F\" ASSUMED'\n.RCLOCF  ANOP\n&NAME    L     &R15,&RCLOC              LOAD RETURN CODE\n         AGO   .RCCOM                   GO TO COMMON\n.RCLOCH  ANOP\n&NAME    LH    &R15,&RCLOC              LOAD RETURN CODE\n         AGO   .RCCOM                   GO TO COMMON\n.NORCLOC AIF   ('&RC' EQ '').HAVERC     RC IS IN A REG\n         AIF   ('&RC'(1,1) EQ '(').HAVERC   DITTO\n&NAME    LA    &R15,&RCRC               LOAD RETURN CODE\n.RCCOM   ANOP                           COMMON POINT\n&NAME    SETC  ''\n.HAVERC  AIF   ('&GET1' EQ '').NOWORK1  NO DSA TO FREE\n&NAME    LR    &R1,&R13                 COPY DSA PTR\n&NAME    SETC  ''\n.NOWORK1 AIF   ('&GET2' EQ '').NOWORK2\n         DROP  &R13\n.NOWORK2 AIF   ('&SAVE' EQ '').NODECHN  SKIP IF NO SAVE AREA TO DECHAIN\n&NAME    L     &R13,4(,&R13)            DECHAIN SAVE AREAS\n&NAME    SETC  ''\n.NODECHN AIF   ('&RC' EQ '').WORKE\n         AIF   ('&RC'(1,1) NE '(').NOWORKE\n.WORKE   AIF   ('&RCLOC' NE '').NOWORKE STORE R15\n         AIF   ('&GET1' EQ '').RCNOT1   RC=(1) IS OK IF NO DYNAMIC AREA\n         AIF   (('&RCRC' NE '&R1') AND ('&RCRC' NE '1')).RCNOT1\n         MNOTE 4,'YOU TURKEY.  RC=(R1) DOESN''T WORK RIGHT IF YOU HAVE $\n               A DYNAMIC AREA'\n         MNOTE 0,'... I HOPE YOU INSTALLED ZAP...'\n.RCNOT1  ANOP\n&NAME    ST    &RCRC,16(,&R13)          SET RETURN CODE\n&NAME    SETC  ''\n         AGO   .WASRGRC\n.NOWORKE ANOP\n&NAME    ST    &R15,16(,&R13)           SET RETURN CODE\n&NAME    SETC  ''\n.WASRGRC ANOP  ,\n         AIF   ('&GET1' EQ '').NOWRKE2  NO DSA TO FREE\n         L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN\n        MNOTE '         FREEMAIN  RU,A=(1),LV=(0),SP=&SP  FREE THE DSA'\n         FREEMAIN  RU,A=(1),LV=(0),SP=&SP\n.NOWRKE2 LM    &R14,&R12,12(&R13)       RESTORE CALLERS REGS\n         AIF   ('&T' NE 'T').BR14\n         MVI   12(&R13),X'FF'           FLAG SAVEAREA AS INACTIVE\n.BR14    BR    &R14                     RETURN TO CALLER\n.NOEXIT  SPACE 3\n*=====================================================================*\n*    ENTRY CODE                                                       *\n*=====================================================================*\n&IHBNX.B STM   &R14,&R12,12(&R13)       SAVE CALLER'S REGS\n.*-----------------------------------*.\n.* SET UP BASE REGISTERS             *.\n.*-----------------------------------*.\n         LR    &ZBASE,&R15              LOAD BASE REGISTER\n         AIF   ('&BASE2' EQ '').BASEFIN\n         L     &BASE2,&IHBNX.A          LOAD SECOND BASE REGISTER\n.*       USNGX &NFS+4096,&BASE2\n         AIF   ('&BASE3' EQ '').BASEFIN\n         L     &BASE3,&IHBNX.Z          LOAD BASE3 FOR MLE,BMD,VIC\n.*       USNGX &NFS+8192,&BASE3\n         AIF   ('&BASE4' EQ '').BASEFIN\n         L     &BASE4,&IHBNX.Q          WHAT'S GOING ON HERE???\n.*       USNGX &NFS+12288,&BASE4\n.BASEFIN ANOP\n.*-----------------------------------*.\n.* FUTZ WITH THE PARM                *.\n.*-----------------------------------*.\n&AR      SETC  '&R14'                   SET DEFAULT FOR LENREG=\n&LR      SETC  '&R15'                   SET DEFAULT FOR ADDRREG=\n         AIF   (('&ADDRREG' EQ '') AND ('&LENREG' EQ '')).NO$AR\n         AIF   (('&ADDRREG' NE '') AND ('&LENREG' NE '')).ARLR\n         MNOTE 8,'ADDRREG= AND LENREG= MUST BOTH BE GIVEN'\n.ARLR    ANOP\n&AR      SETC  '&ADDRREG'\n&LR      SETC  '&LENREG'\n.NO$AR   AIF   ('&PARMREG' EQ '').NOPARMR\n         LR    &PARMREG(1),&R1          SAVE PARM POINTER\n         AIF   (N'&PARMREG LT 2).NOPARMR\n         USNGX &PARMREG(2),&PARMREG(1)\n.NOPARMR AIF   ('&LPARM' EQ '').NOLPARM\n&NAME    L     &LPARM(1),0(,&R1)        PICK UP PARM POINTER\n&NAME    SETC  ''\n         AIF   (N'&LPARM LT 2).NOLPRM2\n         USNGX &LPARM(2),&LPARM(1)\n.NOLPRM2 AIF   (&ENVTSO).NOLPARM\n         AIF   ('&ADDRREG' EQ '').NOLPARM\n         LH    &LR,0(,&LPARM(1))        GET PARM LENGTH\n         LA    &AR,2(,&LPARM(1))        POINT PAST LENGTH\n.*-----------------------------------*.\n.* GET A SAVE AREA,                  *.\n.* EITHER STATIC OR DYNAMIC          *.\n.*-----------------------------------*.\n.NOLPARM AIF   ('&GET1' EQ '').STATIC\n&NAME    L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN\n&NAME    SETC  ''\n         AIF   ('&GETMLOC' NE '').USELOC\n         MNOTE '         GETMAIN  RU,LV=(0),SP=&SP'\n         GETMAIN  RU,LV=(0),SP=&SP\n         AGO   .NOLOC\n.USELOC  MNOTE '         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GE$\n               TMLOC(2))'\n         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GETMLOC(2))\n*\n.NOLOC   AIF   ('&GETMAIN(3)' NE 'ZERO').USE1\n         XC    0(18*4,R1),0(R1)         clear save area in dyn area\n.USE1    ST    &R1,8(,&R13)             FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R1)             BACK CHAIN SAVE AREAS\n         LR    &R13,&R1                 GET NEW SAVE AREA ADDR\n         AIF   ('&GETMAIN(3)' NE 'ZERO').NOZERO2\n         LA    R14,18*4(,R1)            -> start of area to zero\n         L     R15,&IHBNX.L             get length of dynamic area\n         LA    R1,18*4                  amount already zeroed\n         SR    R15,R1                   remaining length to clear\n         BNP   *+8    >=====+           skip if nothing left\n         SR    R1,R1        |           set source length = 0\n         MVCL  R14,R0       V           clear dynamic area\n.NOZERO2 AIF   ('&GET2' EQ '').CONT3\n         USNGX &GET2,&R13\n         AGO   .CONT3\n.*-----------------------------------*.\n.* CHAIN SAVE AREAS                  *.\n.*-----------------------------------*.\n.STATIC  AIF   ('&SAVE' EQ '').CONT3    NO SAVE AREA TO BE USED AT ALL\n         AIF   ('&PARMREG(1)' NE '&R15').NOT15\n&NAME    LA    &R1,&ZSAVE               GET SAVE AREA ADDR\n&NAME    SETC  ''\n         AGO   .USE1\n.NOT15   LA    &R15,&ZSAVE              GET SAVE AREA ADDR\n         ST    &R15,8(,&R13)            FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R15)            BACK CHAIN SAVE AREAS\n         LR    &R13,&R15                GET NEW SAVE AREA ADDR\n.CONT3   AIF   ('&RCLOC' EQ '').CONT3B\n         XC    &RCLOC,&RCLOC            INIT RCLOC TO ZERO\n.CONT3B  SPACE 3\n         AIF   (NOT &ENVCP).NMVCPPL\n         MVC   CPPL(CPPLL),0(&PARMREG(1)) COPY CPPL TO SAFE PLACE\n.NMVCPPL AIF   (&FKCALL OR &FKCP).FAKE$A\n         AIF   ('&ADDRREG' EQ '').LOAD\n         AIF   (&ENVTSO).FAKE$A\n         L     &AR,0(,&PARMREG(1))      POINT TO PARM (LENGTH)\n         LH    &LR,0(,&AR)              GET PARM LENGTH\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AGO   .INUSE\n.FAKE$A  SPACE 2\n*  DETERMINE WHETHER WE HAVE BEEN CALLED AS A TSO CP OR THRU CALL\n         SPACE 1\n         AIF   (NOT &MODEBIT).NOMOD01\n         MVI   &MODE(1),0               CLEAR FLAG\n.NOMOD01 ANOP  ,\n         L     &R1,16                   -> CVT\n         L     &R1,0(,&R1)              -> DISPATCH\n         L     &R1,4(,&R1)              -> TCB\n         L     &R1,180(,&R1)            -> JSCB\n         L     &R1,264(,&R1)            -> PSCB\n         LA    &R0,0(,&R1)              CLEAR HIGH BYTE\n         LTR   &R0,&R0                  ANY PSCB?\n         BZ    &IHBNX.E                 NO - JUMP AROUND NEXT CHECK\n         L     &R1,8(,&PARMREG(1))      POSSIBLE PSCB PTR\n         LA    &R1,0(,&R1)              CLEAR HIGH BYTE\n         TM    0(&PARMREG(1)),X'80'     ONLY 1 PARM?\n         BO    &IHBNX.E                 YES - // EXEC OR TSO CALL\n         AIF   (NOT &MODEBIT).NOMOD02\n         AIF   (N'&MODE NE 4).NOMOD02   IF NOT FOR CP, IGNORE\n         MVI   &MODE(1),&MODE(4)        ASSUME CP\n.NOMOD02 ANOP  ,\n         CR    &R0,&R1                  THIRD PARM -> PSCB?\n         AIF   (('&ADDRREG' NE '') OR (&FKCALL)).SETCPR\n         BE    &IHBNX.C                 YES - WERE CALLED AS A TSO CP\n         AGO   .CONT5                   SKIP AROUND\n.SETCPR  BNE   &IHBNX.E                 NO - NOT TSO CP\n         SPACE 2\n*  HAVE BEEN CALLED AS A CP\n         SPACE 1\n         AIF   ('&ADDRREG' EQ '').NO$AR2\n         L     &R1,0(,&PARMREG(1))      CBUF PTR\n         LH    &LR,0(,&R1)              LENGTH OF CBUF\n         LH    &AR,2(,&R1)              OFFSET TO FIRST NON-BLANK\n         LA    &LR,0(&LR,&R1)           POINT PAST CBUF\n         LA    &AR,4(&AR,&R1)           POINT TO FIRST NON-BLANK\n         SR    &LR,&AR                  LENGTH OF PARMS\n.NO$AR2  AIF   (&FKCALL).CONT4\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.*\n.CONT4   AIF   (NOT &FKCALL).NOFAKE1\n.*-----------------------------------*.\n.*  FAKE A CALL                      *.\n.*-----------------------------------*.\n         STH   &LR,&IHBNX.F+4           SET FAKED LENGTH OF PARM\n         LTR   &R1,&LR                  COPY LENGTH\n         CH    &R1,=H'100'              PARM TOO BIG?\n         BNH   *+8                      NO - OK\n         LA    &R1,=H'100'              TOO BIG - USE TRUNCATE AT MAX\n         LTR   &R1,&R1                  TEST PARM LENGTH\n         BNP   *+16                     SKIP IF NO PARM       >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         EX    &R1,*+4                  MOVE THE PARM TO WORKAREA   |\n         MVC   &IHBNX.F+6(0),0(&AR)     << EXECUTED >>              |\n         LA    &R1,&IHBNX.F+4           GET FAKE PARM ADDR    <=====+\n         ST    &R1,&IHBNX.F             STORE IT\n         LA    &PARMREG(1),&IHBNX.F     GET ADDR OF FAKED PARM\n         MVI   &IHBNX.F,X'80'           SET END OF LIST BIT\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.NOFAKE1 AIF   (NOT &FKCP).LOAD\n.CONT5   SPACE 2\n*  HAVE BEEN CALLED FROM BATCH, OR TSO CALL\n         SPACE 1\n&IHBNX.E L     &AR,0(,&PARMREG(1))      POINT TO PARM LENGTH\n         LH    &LR,0(,&AR)              GET LENGTH OF PARM\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AIF   (NOT &FKCP).NOFAKE2\n*  CPPL=ADDR(CBUF,UPT,PSCB,ECT)\n         LA    &R1,&IHBNX.F             GET ADDR OF FAKE CBUF\n         ST    &R1,CPPLCBUF             SET INTO CPPL\n         AIF   (NOT &MODEBIT).NOMOD03\n         AIF   (N'&MODE LT 3).NOMOD03   IF NOT FOR CP, IGNORE\n         MVI   &MODE(1),&MODE(3)        ASSUME TSO CALL\n.NOMOD03 ANOP  ,\n         LTR   &R1,&R0                  COPY PSCB ADDR\n         BNZ   &IHBNX.T                 CONTINUE IF IT EXISTS\n         SPACE 2\n*  THE ENVIRONMENT AT THIS POINT IS BATCH (NOT TMP IN BACKGROUND)\n         AIF   (NOT &MODEBIT).NOMOD04\n         MVI   &MODE(1),&MODE(2)        MUST BE BATCH\n.NOMOD04 ANOP  ,\n         XC    &IHBNX.F(256),&IHBNX.F   CLEAR FIRST PART OF PHONY AREA\n         XC    &IHBNX.F+256(&IHBNX.K-256),&IHBNX.F+256   AND THE REST\n         LA    &R0,&IHBNX.P             -> PHONY PSCB\n         ST    &R0,CPPLPSCB             SET INTO FAKE CPPL\n         LA    &R0,&IHBNX.U             -> PHONY UPT\n         ST    &R0,&IHBNX.P+52          SET INTO FAKE PSCB\n.*10-81  MVI   &IHBNX.P+57,L'&IHBNX.U   SET LEN OF UPT IN PSCB\n         MVI   &IHBNX.P+57,&LQ&IHBNX.U  SET LEN OF UPT IN PSCB\n         OI    &IHBNX.U+12,X'40'        SET FLAG: NO PROMPTING\n         LA    &R1,&IHBNX.V             -> PHONY ECT\n         B     &IHBNX.X\n         SPACE 2\n&IHBNX.T ST    &R0,CPPLPSCB             SET INTO FAKE CPPL\n         MVC   CPPLUPT(4),52(&R1)       MOVE UPT ADDR INTO CPPL\n         L     &R1,48(,&R1)             PSCB.RLGB\n         L     &R1,256(,&R1)            RLGB.ECT\n&IHBNX.X ST    &R1,CPPLECT              SET ECT ADDR IN CPPL\n         SPACE 1\n*  CBUF=Y(CBUF_LEN,OFFSET_TO_NONBLANK),C'CMDNAME',C' ',C'OPERANDS'\n         MVC   &IHBNX.F+4(8),12(&R1)    MOVE CMD NAME TO CBUF\n         MVI   &IHBNX.F+4+8,C' '        PUT IN DELIMETER\n         NI    28(&R1),X'7F'            TURN OFF \"NO OPERANDS\" BIT\n         LTR   &LR,&LR                  ANY OPERANDS?\n         BP    *+8                      YES - SKIP\n         OI    28(&R1),X'80'            SET \"NO OPERANDS\" BIT IN ECT\n         SPACE 1\n         LA    &R1,8+1                  OFFSET TO FIRST NON-BLANK\n         STH   &R1,&IHBNX.F+2           SET IN FAKE CBUF\n         LA    &R0,8+1+4(,&LR)          GET LENGTH OF CBUF\n         STH   &R0,&IHBNX.F             SET INTO FAKE CBUF\n         LTR   &R1,&LR                  ANY OPERANDS?\n         BNP   *+16                     NO - SKIP             >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         MVC   &IHBNX.F+4+8+1(0),0(&AR) << EXECUTED >>              |\n         EX    &R1,*-6                  MOVE THE PARM TO FAKE CBUF  |\n         LA    &PARMREG(1),CPPL         POINT TO CPPL         <=====+\n.NOFAKE2 SPACE 2\n&NAME    SETC  '&IHBNX.C'\n.*-----------------------------------*.\n.*  LOAD=                            *.\n.*-----------------------------------*.\n.LOAD    AIF   ('&LOAD' EQ '').NOLOAD\n&X       SETA  1\n.LOAD$LP AIF   ('&LOAD(&X)' EQ '').NOLOAD\n         AIF   (NOT &ENVMVS).YESLOAD\n&NAME    OSENT01  &LOAD(&X),IKJPTGT,464\n&NAME    OSENT01  &LOAD(&X),IKJPUTL,444\n&NAME    OSENT01  &LOAD(&X),IKJGETL,348\n&NAME    OSENT01  &LOAD(&X),IKJPARS,524\n&NAME    OSENT01  &LOAD(&X),IKJDAIR,732\n&NAME    OSENT01  &LOAD(&X),IKJSTCK,472\n&NAME    OSENT01  &LOAD(&X),IKJSCAN,480\n&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740\n&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736\n&NAME    OSENT01  &LOAD(&X),IKJEFF02,976                            SDM\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESLOAD    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n.YESLOAD MNOTE *,'       LOAD  EPLOC==CL8''&LOAD(&X)'''\n&NAME    LOAD  EPLOC==CL8'&LOAD(&X)'\n&NAME    SETC  ''\n.ADDRSAV ST    &R0,&LOAD(&X)\n.SKIPASV SPACE 1\n         AIF   ('&LOAD(&X)' NE 'IKJDAIR').NO$DAIR\n&GDAIR   SETB  1                        DAIR LOADED\n         AGO   .LOADNXT\n.NO$DAIR AIF   ('&LOAD(&X)' NE 'IKJPARS').NO$PARS\n&GPARSE  SETB  1                        PARSE WAS LOADED\n&PARNAME SETC  'IKJPARS'\n.NO$PARS ANOP\n.LOADNXT ANOP\n&X       SETA  &X+1\n         AGO   .LOAD$LP\n.*-----------------------------------*.\n.*  PL=                              *.\n.*-----------------------------------*.\n.NOLOAD  AIF   ('&PL' EQ '').NO$PL$1\n&X       SETA  1\n.PLLOOP  AIF   ('&PL(&X)' NE 'CSCAN').PL2\n&CSPL    SETB  1\n         AGO   .PLNEXT\n.PL2     AIF   ('&PL(&X)' NE 'PARSE').PL3\n&PARS    SETB  1\n         AGO   .PLNEXT\n.PL3     AIF   ('&PL(&X)' NE 'DAIR').PL4\n&DAIR    SETB  1\n         AGO   .PLNEXT\n.PL4     AIF   ('&PL(&X)' NE 'IO').PL5\n&IO      SETB  1\n         AGO   .PLNEXT\n.PL5     AIF   ('&PL(&X)' NE 'MESSAGE').PL6\n&MSG     SETB  1\n         AGO   .PLNEXT\n.PL6     MNOTE 4,'PL=&PL(&X) UNKNOWN -- IGNORED'\n.PLNEXT  ANOP\n&X       SETA  &X+1\n         AIF   (&X LE N'&PL).PLLOOP\n.*\n.*\n.NO$PL$1 AIF   ('&PARSE(2)' EQ '').PLNOTM\n&MSG     SETB  1\n.PLNOTM  AIF   (NOT (&CSPL OR &PARS OR &DAIR OR &IO OR &MSG)).NOSETPL\n&NAME    L     &R1,CPPLUPT              GET UPT PTR\n&NAME    SETC  ''\n         L     &R2,CPPLECT              GET ECT PTR\n         LA    &R3,TSECB                GET ECB PTR\n         SR    &R0,&R0                  GET A 0\n         ST    &R0,TSECB                CLEAR ECB\n.*\n         AIF   (NOT &CSPL).NOSETC\n         SPACE 1\n         STM   &R1,&R3,CSPL             INITIALIZE CSPL (UPT, ECT, ECB)\n         ST    &R0,CSFLG                ZERO CSFLG\n         LA    &R0,CSFLG\n         ST    &R0,CSPLFLG\n         LA    &R0,CSOA\n         ST    &R0,CSPLOA\n.*\n.NOSETC  AIF   (NOT &PARS).NOSETP\n         STM   &R1,&R3,PPL              INITIALIZE PPL (UPT, ECT, ECB)\n         LA    &R0,TSPARANS             PTR TO PARSE ANSWER PLACE\n         ST    &R0,PPLANS\n         ST    &R13,PPLUWA              PARSE USER WORK AREA PTR\n         XC    TSPARANS(4),TSPARANS     AVOID DUPLICATE IKJRLSA\n.*\n.NOSETP  AIF   (NOT &DAIR).NOSETD\n         STM   &R1,&R3,DAPL             INITIALIZE DMPL (UPT, ECT, ECB)\n         MVC   DAPLPSCB(4),CPPLPSCB\n.*\n.NOSETD  AIF   (NOT &IO).NOSETI\n         STM   &R1,&R3,IOPL             INITIALIZE IOPL (UPT, ECT, ECB)\n.*\n.NOSETI  AIF   (NOT &MSG).NOSETM\n         ST    &R3,MPLECB               INIT MPL ECB PTR\n         LA    &R0,CPPL\n         ST    &R0,MPLCPPL\n         LA    &R0,MPLCSECT             PTR TO MSG CSECT\n         ST    &R0,MPLCSECP\n         XC    MPLSW(MPLZL),MPLSW       INITIALIZE REMAINING MPL TO 0\n.NOSETM  ANOP\n.NOSETPL AIF   ('&PARSE(1)' EQ '').NOPARSE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  PARSE THE COMMAND LINE                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MNOTE *,'       TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I$\n               ),'\n         MNOTE *,'               SYNAD=&PARSE(2),ENTRY=&PARNAME'\n         TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I),             $\n               SYNAD=&PARSE(2),ENTRY=&PARNAME\n&NAME    SETC  ''\n         SPACE 5\n         AIF   ('&PARSE(2)' EQ '').NOPARSE   NO ERROR ANALYSIS ROUTINE\n&NAME    SETC  '&IHBNX.P'\n         SPACE 2\n         B     &NAME                    SKIP AROUND PARSE ERR ANALYSIS\n         SPACE 6\n***********************************************************************\n*                                                                     *\n*  PARSE ERROR ANALYSIS SUBROUTINE                                    *\n*                                                                     *\n***********************************************************************\n         TSPARERR\n         SPACE 6\n.NOPARSE AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n.INUSE   INUSE\n         SPACE 2\n         AIF   ('&PL' EQ '' AND NOT &ENVCP).MEND\n         AIF   ('&GET2' NE '' OR '&MACRO' EQ 'YES').PLOK1\n         MNOTE 8,'*** PL= INVALID WITHOUT SECOND OPERAND OF GETMAIN='\n         MEXIT\n.PLOK1   EJECT\n&GET2    DSECT\n         DS    18F                      SAVE AREA\n         AIF   ('&PL' EQ '').NO$PL$2\nTSECB    DS    F                        ECB FOR TSO SERVICES\n.NO$PL$2 SPACE 2\n*        TSCPPL\n         TSCPPL\n         AIF   (NOT &ENVSIM).NOFAKED\n&IHBNX.F DS    2H,CL256                 AREA FOR FAKE CBUF\n&IHBNX.P DS    XL72                     AREA FOR PHONY PSCB\n&IHBNX.V DS    XL40                     AREA FOR PHONY ECT\n&IHBNX.U DS    XL24                     AREA FOR PHONY UPT\n&IHBNX.K EQU   *-&IHBNX.F               LENGTH OF PHONY BLOCKS TO CLEAR\n.NOFAKED AIF   ('&PL' EQ '').NO$PL$3\n         AIF   ('&PRINT' NE 'NOGEN').YESGEN1\n         PRINT NOGEN                    SUPPRESS THE DSECTS\n.YESGEN1 AIF   (NOT &CSPL).NOTCSPL\n         SPACE 2\n         MNOTE *,'       TSCSPL'\n         TSCSPL\n.NOTCSPL AIF   (NOT &PARS).NOTPARS\n         SPACE 2\n         MNOTE *,'       TSPPL'\n         TSPPL\n.NOTPARS AIF   (NOT &DAIR).NOTDAIR\n         SPACE 2\n         MNOTE *,'       TSDAPL'\n         TSDAPL\nDAPBAREA DS    22F                      AREA FOR DAIR PARAMETER BLOCK\n         SPACE 2\n         MNOTE *,'       TSDMPL'\n         TSDMPL\n.NOTDAIR AIF   (NOT &IO).NOTIO\n         SPACE 2\n         MNOTE *,'       TSIOPL'\n         TSIOPL\n.NOTIO   AIF   (NOT &MSG).NOTMSG\n         SPACE 2\n         MNOTE *,'       TSMPL'\n         TSMPL\n.NOTMSG  AIF   ('&PRINT' NE 'NOGEN').NOTMSGX\n         PRINT GEN\n.NO$PL$3 ANOP  ,\n.NOTMSGX AIF   ('&LOAD' EQ '').NOLOAD2\n         SPACE 2\n&X       SETA  1\n.NXTLOAD AIF   (&X GT N'&LOAD).NOLOAD2\n&LOAD(&X) DS   A\n&X       SETA  &X+1\n         AGO   .NXTLOAD\n.NOLOAD2 SPACE 2\n         AIF   ('&MACRO' NE 'YES').NOMACRO\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TSWORK\n         SPACE 2\n&GET1    EQU   *-&GET2                  LNTH OF DYNAMIC AREA TO GETMAIN\n         SPACE 2\n.NOMACRO AIF   (NOT &DAIR).NODAPBS\n         AIF   (&GDAIRM).NODAPBS\n&GDAIRM  SETB  1\n         AIF   ('&PRINT' NE 'NOGEN').GEN4\n         PRINT NOGEN                    SAVE SOME PAPER\n.GEN4    EJECT\n         MNOTE *,'       IKJDAP08'\n         IKJDAP08\nDAPB08L  EQU   *-DAPB08\n         SPACE 5\n         MNOTE *,'       IKJDAP18'\n         IKJDAP18\nDAPB18L  EQU   *-DAPB18\n         SPACE 5\n         MNOTE *,'       IKJDAP1C'\n         IKJDAP1C\nDAPB1CL  EQU   *-DAPB1C\n         SPACE 5\n         MNOTE *,'       IKJDAP30'\n         IKJDAP30\nDAPB30L  EQU   *-DAPB30\n         AIF   ('&PRINT' NE 'NOGEN').NODAPBS\n         PRINT GEN                      RESTORE\n         SPACE 10\n.NODAPBS ANOP\n&NFS     CSECT\n         SPACE 3\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSENTER@": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00 \\x00\\x803\\x9f\\x00\\x88\\x15\\x0f! \\x04\\xb1\\x04\\x17\\x00\\xd0\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1980-12-04T00:00:00", "modifydate": "1988-05-29T21:20:20", "lines": 1201, "newlines": 1047, "modlines": 208, "user": "LDW"}, "text": "         MACRO\n&NFS     OSENTER  &BASE=12,&BASE2=,&BASE3=,&BASE4=,                    $\n               &SAVE=*,&REGS=(YES,R),&F=,                              $\n               &USING=,&SECTYPE=CSECT,&GETMAIN=,&PARMREG=,&LPARM=,     $\n               &SP=1,&ID=*,&EXIT=,&ADDRREG=,&LENREG=,&ENV=CALL,        $\n               &RC=,&RCLOC=,&T=T,&PL=,&LOAD=,&SYMREG=,&DSECT=,         $\n               &TSFAKE=,&PARSE=,&MACRO=,&PRINT=,&DATE=,&TIME=,         $\n               &IKJRLSA=,&DELETE=*,&MODE=,&AMODE=,&RMODE=,&GETMLOC=\n         AGO   .SKIPCMT                 SKIP AROUND COMMENTS FOR MLOGIC\n.*.\n.*********************************************************************.\n.*                                                                   *.\n.*  OSENTER -- 29May88 -- LDW                                        *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  THIS MACRO WILL GENERATE THE HOUSEKEEPING CODE NEEDED FOR        *.\n.*  STANDARD OS LINKAGE CONVENTIONS (FOR ENTRY AND EXIT)             *.\n.*  THE GENERATED CODE WILL OPTIONALLY BE RE-ENTRANT                 *.\n.*                                                                   *.\n.*  Updates:                                                         *.\n.*    29May88   LDW  Fix bug:  don't MNOTE for ENV=(CALL,SIM) with   *.\n.*                      no GETMAIN=                                  *.\n.*                   Add GETMLOC= for LOC= operand of GETMAIN=       *.\n.*    26May88   LDW  Fix bug in ZERO code                            *.\n.*    15May88   LDW  Fix bug in ENV= consistency check               *.\n.*    12MAY88   LDW  ADD 'ZERO' AS THIRD OPERAND OF GETMAIN=         *.\n.*    21FEB88   LDW  CHANGE GETMAIN/FREEMAIN FROM R TO RU FOR MVS/XA *.\n.*                   ADD AMODE= AND RMODE= KEYWORDS                  *.\n.*    01-07-85  EMS  FIX DELETE=* DEFAULT FOR LOAD=                  *.\n.*    01-02-85  EMS  ADD DELETE=,MODE= KEYWORDS                      *.\n.*    09-06-84  EMS  FIX BUG WHEN CODING 'PL=,LOAD=DATETIME'         *.\n.*    06-24-84  LDW  FIX BUG WHEN CODING 'SAVE=,EXIT=LEAVE'          *.\n.*    11-09-83  LDW  MAKE REGS=(NO,R) WORK CORRECTLY                 *.\n.*    04-30-82  LDW  FIX PREVIOUS FIX                                *.\n.*    04-25-82  LDW  FIX FOR \"SAVE=\" NULL OPERAND -> NO SAVEAREA     *.\n.*    10-19-81  EMS  FIX FOR ASMH \"L'\" PROBLEM                       *.\n.*    12-04-80  LDW  CHANGE NAME FROM \"ENTR\" TO \"OSENTER\"            *.\n.*    11-13-80  LDW  FIX 10-23-80 FIX; FIX NON-RENT TEST             *.\n.*    10-23-80  LDW  FIX 10-08-80 FIX                                *.\n.*    10-08-80  LDW  FIX FOR ENV=(CP,SIMULATE) WITH NO PL=           *.\n.*    07-07-80  LDW  MOVE USINGS TO CORRECT PROBLEMS IN EXIT CODE    *.\n.*    05-14-80  LDW  REPLACE TSFAKE=YES WITH ENV=SIMULATE            *.\n.*    05-13-80  LDW  ADD IKJRLSA KEYWORD; FIX BUGS IN ENV=CP CODE    *.\n.*    09-27-79  LDW  FIX BUG IN TSO-CP SIMULATION CODE               *.\n.*    02-21-79  LDW  ADD DATE= AND TIME= OPERANDS                    *.\n.*    01-12-79  LDW  FIX BUG; ADD MVS CODE FOR LOAD=                 *.\n.*    12-29-78  LDW  ADD BASE4=; FIX LENGTH OF GETMAIN IF MACRO=YES; *.\n.*                   CHECK FOR RC=(R1) AND DYNAMIC AREA (GETMAIN=);  *.\n.*                   ADD PRINT=; FIX FOR BATCH CALL OF ENV=CP PGMCK  *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  OPERANDS AVAILABLE ARE:                                          *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE=    -- DEFAULT:  BASE=12                                    *.\n.*              THE BASE REGISTER TO BE USED                         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE2=   -- DEFAULT:  (NONE)                                     *.\n.*              A SECOND BASE REGISTER                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE3=   -- DEFAULT:  (NONE)                                     *.\n.*              A THIRD BASE REGISTER (ONLY VALID IF BASE2= IS CODED)*.\n.*                                                                   *.\n.*  BASE4=   -- DEFAULT:  (NONE)                                     *.\n.*              A FOURTH BASE REGISTER (MUST HAVE BASE2= AND BASE3=) *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SAVE=    -- DEFAULT:  SAVE=*                                     *.\n.*              NAME OF A SAVE AREA TO BE USED.                      *.\n.*              IF SAVE=* IS CODED, AN INLINE SAVE AREA WILL BE      *.\n.*              GENERATED, WITH A UNIQUE NAME.  SAVE=* IS IGNORED    *.\n.*              IF GETMAIN= IS CODED.  ANY OTHER VALUE OF SAVE=      *.\n.*              WILL CAUSE AN ERROR IF GETMAIN= IS ALSO USED.        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  GETMAIN= -- Default:  (none)                                     *.\n.*              GETMAIN=length, or                                   *.\n.*              GETMAIN=(length,dsectname).                          *.\n.*              GETMAIN=(length,dsectname,ZERO).                     *.\n.*              This operand causes a GETMAIN for \"length\" bytes to  *.\n.*              be generated.  The first 18 words will be reserved   *.\n.*              for the save area.  The address of the area obtained *.\n.*              is placed in R13, and if \"dsectname\" is coded, a     *.\n.*              USING is done.  If the word \"ZERO\" is coded as the   *.\n.*              third operand, then the work area will be zeroed     *.\n.*              before it is used.                                   *.\n.*              If MACRO=YES is coded, the default for GETMAIN= is   *.\n.*              GETMAIN=(TSDSECTL,TSDSECT) and the EQU for TSDSECTL  *.\n.*              will be generated by OSENTER.                        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  GETMLOC= -- Default:  (none)                                     *.\n.*              GETMLOC=(ANY,ANY), etc                               *.\n.*              This operand becomes the LOC= operand of GETMAIN.    *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SP=      -- DEFAULT:  SP=1                                       *.\n.*              THE SUBPOOL FOR THE WORKAREA OBTAINED BY GETMAIN=    *.\n.*                                                                   *.\n.*                                                                   *.\n.*  REGS=    -- DEFAULT:  REGS=(YES,R)                               *.\n.*              THE FIRST OPERAND (YES/NO) INDICATES WHETHER THE     *.\n.*              REGEQU MACRO WILL BE USED TO GENERATE EQU'S FOR      *.\n.*              SYMBOLIC REGISTERS.  THE SECOND OPERAND IS THE       *.\n.*              PREFIX TO BE USED.                                   *.\n.*              NOTE:  REGS=(YES,Q) IS THE SAME AS REGS=(,Q)         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  F=       -- DEFAULT:  (NONE)                                     *.\n.*              THE PREFIX TO BE USED FOR SYMBOLIC FLOATING POINT    *.\n.*              REGISTER NAMES.                                      *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SECTYPE= -- DEFAULT:  SECTYPE=CSECT                              *.\n.*              THE SECTION TYPE TO BE GENERATED.                    *.\n.*              POSSIBLE VALUES:  CSECT/DSECT/ENTRY/NONE             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  USING=   -- DEFAULT:  (NONE)                                     *.\n.*              A USING WILL BE DONE FOR EACH PAIR OF OPERANDS.      *.\n.*              CODED AS FOLLOWS:                                    *.\n.*              USING=(DSECT1,REG1,DSECT2,REG2,...)                  *.\n.*                                                                   *.\n.*                                                                   *.\n.*  EXIT=    -- DEFAULT:  (NONE)                                     *.\n.*              THE NAME OF AN EXIT ROUTINE TO BE BRANCHED TO THAT   *.\n.*              WILL FREE THE WORKAREA (IF ONE WAS OBTAINED BY       *.\n.*              GETMAIN=), DECHAIN SAVE AREAS, SET THE RETURN CODE,  *.\n.*              AND RETURN TO CALLER.                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RC=      -- DEFAULT:  RC=(15)                                    *.\n.*              THE RETURN CODE TO BE PASSED BACK TO THE CALLER.     *.\n.*              THIS OPERAND IS IGNORED IF EXIT= IS NOT CODED.       *.\n.*              RC= CAN BE CODED AS RC=(REG) OR RC=EXPRESSION.       *.\n.*              THIS OPERAND IS MUTUALLY EXCLUSIVE WITH THE RCLOC=   *.\n.*              OPERAND.                                             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RCLOC=   -- DEFAULT:  (NONE)                                     *.\n.*              THE STORAGE LOCATION FROM WHICH THE RETURN CODE WILL *.\n.*              BE OBTAINED.  MUST HAVE FULLWORD OR HALFWORD TYPE    *.\n.*              ATTRIBUTE.  THIS OPERAND IS MUTUALLY EXCLUSIVE       *.\n.*              WITH THE RC= OPERNAND.                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  T=       -- DEFAULT:  T=T                                        *.\n.*              IGNORED IF EXIT= NOT CODED.  SPECIFIES THAT THE OLD  *.\n.*              SAVE AREA WILL BE FLAGGED BY A X'FF' AT OFFSET 12    *.\n.*              TO INDICATE THAT IT IS INACTIVE.  NOTE:  \"T=\" SHOULD *.\n.*              NOT BE CODED FOR EXIT ROUTINES, SUCH AS STAE ROUTINES*.\n.*                                                                   *.\n.*                                                                   *.\n.*  ID=      -- DEFAULT:  ID=CSECT NAME                              *.\n.*              AN ID TO PUT IN CHARACTER FORM NEAR THE BEGINNING    *.\n.*              OF THE CSECT, TO AID IN DUMP READING.                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ENV=     -- DEFAULT:  ENV=CALL                                   *.\n.*              THE ENVIRONMENT THAT THE PROGRAM WILL OR SHOULD BE   *.\n.*              RUNNING UNDER.  VALID OPERANDS (MORE THAN ONE CAN    *.\n.*              BE CODED, IN PARENS):                                *.\n.*              CALL -- BATCH EXEC PGM=, OR TSO CALL, OR LINK MACRO  *.\n.*              CP -- TSO COMMAND PROCESSOR                          *.\n.*              TSOCP -- ALIAS FOR CP                                *.\n.*              TSO -- MAY BE RUN ON TSO                             *.\n.*              SIMULATE -- PROGRAM CAN BE INVOKED VIA CALL OR AS A  *.\n.*                     COMMAND PROCESSOR (CP) (SEE BELOW)            *.\n.*              SIM -- ALIAS FOR SIMULATE                            *.\n.*              MVT -- PROGRAM WILL BE RUN UNDER MVT.                *.\n.*              MVS -- PROGRAM WILL BE RUN UNDER MVS.  (OS/VS2 R3)   *.\n.*              PLI -- PROGRAM WILL BE CALLED BY A PLIX PROGRAM.     *.\n.*              PLIX -- ALIAS FOR PLI                                *.\n.*                                                                   *.\n.*              NOTE:  CALL IS MUTUALLY EXCLUSIVE WITH CP/TSOCP.  IF *.\n.*              THE PROGRAM MAY BE RUN EITHER THRU CALL OR AS A CP,  *.\n.*              SPECIFY ENV=TSO OR ENV=CP (ENV=CP IMPLIES ENV=TSO)   *.\n.*                                                                   *.\n.*              IF ENV=SIMULATE IS CODED, AND THE PROGRAM IS CALLED  *.\n.*              VIA \"CALL\", THEN A FAKE CPPL, PSCB, CBUF, UPT, AND   *.\n.*              ECT WILL BE BUILT, BASED ON THE INFO IN THE PARM     *.\n.*              FIELD.  IF ENV=CALL IS CODED (OR DEFAULTED), A FAKE  *.\n.*              PARM PTR WORD AND LENGTH WILL BE BUILT BASED ON THE  *.\n.*              INFO IN THE CBUF.  THE NECESSARY AREA WILL BE        *.\n.*              GENERATED AND NAMED EITHER IN THE WORK AREA (IF      *.\n.*              ANY), OR INLINE.                                     *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARMREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO SAVE THE PARM POINTER PASSED IN R1   *.\n.*              (\"LR  PARMREG,R1\")                                   *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LPARM=   -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER INTO WHICH THE PARM ADDR WILL BE LOADED *.\n.*              ( \"L  LPARM,0(,R1)\" )                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ADDRREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE ADDRESS OF THE ACTUAL    *.\n.*              TEXT OF THE PARM.                                    *.\n.*              NOTE:  ADDRREG= AND LENREG= ARE AN OPERAND PAIR --   *.\n.*              IF ONE IS CODED, THE OTHER MUST ALSO BE CODED.       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LENREG=  -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE LENGTH OF THE PARM TEXT. *.\n.*              SEE NOTE FOR ADDRREG=                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LOAD=    -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF MODULES TO BE LOADED.  THE ADDRESS OF      *.\n.*              EACH MODULE WILL BE SAVED IN A WORD WITH THE NAME    *.\n.*              OF THE MODULE.                                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  DELETE=  -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF MODULES TO BE DELETED.  DELETE=* WILL      *.\n.*              DELETE ALL MODULES LOADED VIA LOAD=.  INCLUDING      *.\n.*              AN * IN THE LIST OF MODULES TO BE DELETED WILL       *.\n.*              DELETE ALL LOADED MODULES IN ADDITION TO ENTRIES     *.\n.*              SPECIFIED.                                           *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PL=      -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF PARAMETER LISTS TO BE GENERATED AND        *.\n.*              INITIALIZED.  THE FOLLOWING PARM LISTS ARE           *.\n.*              SUPPORTED:  CSCAN, PARSE, DAIR, IO, MESSAGE.         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  MACRO=   -- DEFAULT:  MACRO=NO                                   *.\n.*              IF 'YES' IS CODED, A 'TSWORK' MACRO WILL BE ISSUED   *.\n.*              TO DEFINE MORE STORAGE IN THE WORK AREA.  (TSWORK    *.\n.*              MACRO IS DEFINED BY THE USER.)                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARSE=   -- DEFAULT:  (NONE)                                     *.\n.*              FORMAT:  PARSE=PCLNAME OR PARSE=(PCLNAME,ERRADDR)    *.\n.*              WILL USE THE TSPARSE MACRO TO PARSE THE COMMAND LINE *.\n.*              (POINTED TO BY CPPLCBUF).  PCLNAME IS THE NAME OF    *.\n.*              THE PCL CSECT.  IF ERRADDR IS GIVEN, GENERATES ERROR *.\n.*              ANALYSIS ROUTINE ROUTINE WITH TSPARERR MACRO.        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  IKJRLSA= -- DEFAULT:  IKJRLSA=YES IF PARSE= CODED, =NO OTHERWISE *.\n.*              IKJRLSA=YES SPECIFIES THAT THE EXIT CODE SHOULD DO   *.\n.*              AN IKJRLSA TO RELEASE PARSE'S WORK AREA.  THIS       *.\n.*              OPERAND IS IGNORED IF EXIT= IS NOT CODED.            *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PRINT=   -- DEFAULT:  (NONE)                                     *.\n.*              PRINT=NOGEN SPECIFIES THAT THE DSECTS SHOULD NOT BE  *.\n.*              PRINTED                                              *.\n.*                                                                   *.\n.*                                                                   *.\n.*  DATE=    -- DEFAULT:  (DATE OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*              COMPARING AGAINST AN OLD LOAD MODULE)                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  TIME=    -- DEFAULT:  (TIME OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*              COMPARING AGAINST AN OLD LOAD MODULE)                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  MODE=    -- DEFAULT:  (NONE)                                     *.\n.*              SPECIFIES WHAT MODE COMMAND WAS INVOKED WITH.        *.\n.*              CONTAINS 2 TO 4 OPERANDS :                           *.\n.*                  1)   FLAG BYTE                                   *.\n.*                  2)   BATCH MODE EQUATE                           *.\n.*                  3)   TSO CALL MODE EQUATE                        *.\n.*                  4)   TSO CP MODE EQUATE                          *.\n.*              BYTE IS SET VIA AN MVI INDICATING APPROPRIATE MODE.  *.\n.*                                                                   *.\n.*                                                                   *.\n.*********************************************************************.\n.*.\n.*\n.*\n.*  IHB&SYSNDX LETTERS USED:  ABC EF    KL   PQ STUV X Z\n.*                   UNUSED:     D  GHIJ  MNO  R    W Y 0123456789$#@\n.*\n.SKIPCMT ANOP\n         GBLB  &GDAIRM,&GPARSEM         TO AVOID DUPLICATES\n         GBLB  &GDAIR,&GPARSE           DAIR OR PARSE LOADED\n         LCLC  &ZBASE,&ZSAVE,&Q,&NAME,&RCRC,&LR,&AR,&LQ\n         LCLC  &GET1,&GET2,&PARNAME\n         LCLC  &IHBNX,&BLANK1,&BLANK2\n         LCLC  &R0,&R1,&R2,&R3,&R12,&R13,&R14,&R15\n         LCLA  &L,&X,&Y\n         LCLB  &ENVTSO,&ENVCALL,&ENVCP,&ENVPLI,&ENVMVT,&ENVMVS,&ENVSIM\n         LCLB  &FKCALL,&FKCP,&MVSCVT,&ASMERR\n         LCLB  &CSPL,&PARS,&DAIR,&IO,&MSG\n         LCLB  &MODEBIT\n&IHBNX   SETC  'IHB&SYSNDX'\n&BLANK1  SETC  '        '\n&BLANK2  SETC  '        '\n&PARNAME SETC  ''\n&LQ      SETC  'L'''                    STUPID ASSEMBLER\n         AIF   ('&PRINT' NE 'NOGEN').PRINTOK\n         AIF   ('&PRINT' NE '').PRINTOK\n         MNOTE 4,'WHAT DOES PRINT=&PRINT MEAN???'\n.*\n.*\n.*\n.PRINTOK AIF   ('&SYMREG' EQ '').NOSYMRG\n         MNOTE 0,'SYMREG= IS UNSUPPORTED -- USE REGS='\n.NOSYMRG AIF   ('&DSECT' EQ '').NOD$ECT\n         MNOTE 4,'DSECT= IS UNSUPPORTED'\n.NOD$ECT ANOP\n.*-----------------------------------*.\n.*  ENVIRONMENT                      *.\n.*-----------------------------------*.\n&X       SETA  0\n.ENVLOOP AIF   (N'&ENV EQ &X).ENVDONE\n&X       SETA  &X+1\n         AIF   ('&ENV(&X)' EQ 'TSO'     ).ENVTSO\n         AIF   ('&ENV(&X)' EQ 'CALL'    ).ENVCALL\n         AIF   ('&ENV(&X)' EQ 'CP'      ).ENVCP\n         AIF   ('&ENV(&X)' EQ 'TSOCP'   ).ENVCP\n         AIF   ('&ENV(&X)' EQ 'SIM'     ).ENVSIM\n         AIF   ('&ENV(&X)' EQ 'SIMULATE').ENVSIM\n         AIF   ('&ENV(&X)' EQ 'MVS'     ).ENVMVS\n         AIF   ('&ENV(&X)' EQ 'MVT'     ).ENVMVT\n.**      AIF   ('&ENV(&X)' EQ 'PLI'     ).ENVPLI\n.**      AIF   ('&ENV(&X)' EQ 'PLIX'    ).ENVPLI\n         MNOTE 4,'ENV=&ENV(&X) IS INVALID -- IGNORED'\n         AGO   .ENVLOOP\n.ENVTSO  ANOP\n&ENVTSO  SETB  1\n         AGO   .ENVLOOP\n.ENVCALL ANOP\n&ENVCALL SETB  1\n         AGO   .ENVLOOP\n.ENVCP   ANOP\n&ENVCP   SETB  1\n&ENVTSO  SETB  1                        ENV=CP IMPLIES ENV=TSO\n         AGO   .ENVLOOP\n.ENVSIM  ANOP\n&ENVSIM  SETB  1\n         AGO   .ENVLOOP\n.ENVMVS  ANOP\n&ENVMVS  SETB  1\n         AGO   .ENVLOOP\n.ENVMVT  ANOP\n&ENVMVT  SETB  1\n         AGO   .ENVLOOP\n.ENVPLI  ANOP\n&ENVPLI  SETB  1\n         AIF   ('&BASE' NE '12' AND '&BASE' NE 'R12').ENVLOOP\n         MNOTE 4,'WARNING:  BASE=&BASE IS NOT COMPATIBLE WITH ENV=PLIX'\n         AGO   .ENVLOOP\n.ENVDONE AIF   (NOT &ENVCALL OR NOT &ENVCP).ENVOK1\n        MNOTE 4,'ENV=(CALL,CP) MAY NOT BOTH BE GIVEN.  \"CALL\" IGNORED.'\n&ENVCALL SETB  0                        IGNORE IT\n.ENVOK1  AIF   (NOT &ENVMVT OR NOT &ENVMVS).ENVOK2\n         MNOTE 4,'MAKE UP YOUR MIND:  ENV=MVT OR ENV=MVS, BUT NOT BOTH.$\n                 MVT ASSUMED.'\n&ENVMVS  SETB  0                        IGNORE IT\n.*NVOK2  AIF   (NOT &ENVCP).ENVOK5\n.ENVOK2  AIF   (NOT &ENVCP).ENVOK3\n         AIF   (&ENVCP AND '&PARMREG' NE '').ENVOK3\n         MNOTE 4,'PARMREG= REQUIRED FOR ENV=CP'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK3  AIF   ('&TSFAKE' EQ '').ENVOK4\n         MNOTE 4,'TSFAKE= DISCONTINUED.  ENV=SIMULATE USED INSTEAD.  CH$\n               ANGE YOUR SOURCE'\n&ENVSIM  SETB  1                        SET IT\n.ENVOK4  AIF   (N'&GETMAIN EQ 2).ENVOK99\n         AIF   (N'&GETMAIN EQ 3).ENVOK99\n         AIF   ('&MACRO' EQ 'YES').ENVOK99\n         AIF   (NOT &ENVSIM).ENVOK5\n         AIF   (NOT &ENVCP ).ENVOK5\n         MNOTE 4,'ENV=SIM(ULATE) WITH ENV=CP REQUIRES GETMAIN=(LENGTH,D$\n               SECT) (OR MACRO=YES)'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK5  AIF   ('&PL' EQ '').ENVOK99\n         MNOTE 4,'PL=&PL WITH ENV=CP REQUIRES GETMAIN=(LENGTH,DSECT) (O$\n               R MACRO=YES)'\n&ASMERR  SETB  1                        ASSEMBLY ERRORS WILL RESULT\n.ENVOK99 AIF   (NOT &ASMERR).ENVOK      SKIP IF NO ASSEMBLY ERRORS\n         MNOTE 0,'<<< ASSEMBLY ERRORS WILL RESULT >>>'\n.*-----------------------------------*.\n.*  ENV=SIMULATE                     *.\n.*-----------------------------------*.\n.ENVOK   AIF   (NOT &ENVSIM).NOFAKE\n.FAKENO  AIF   ('&PARMREG' NE '').OKFAKE0\n         MNOTE 4,'*** PARMREG= MUST BE GIVEN IF ENV=SIMULATE IS GIVEN. $\n                ENV=SIMULATE IGNORED.'\n         AGO   .NOFAKE\n.OKFAKE0 AIF   (NOT &ENVCALL).NOFKCAL\n&FKCALL  SETB  1\n         AGO   .NOFAKE\n.NOFKCAL AIF   (NOT &ENVCP).NOFKCP\n&FKCP    SETB  1\n         AGO   .NOFAKE\n.NOFKCP  MNOTE 2,'WHAT TO SIMULATE?????'\n.NOFAKE  ANOP\n         AIF   (T'&MODE EQ 'O').NOMODE\n         AIF   ((N'&MODE GE 2) OR (N'&MODE LE 4)).MODEOK\n         MNOTE 0,'INVALID SPECIFICATION OF &&MODE OPERAND'\n         AGO   .NOMODE\n.MODEOK  ANOP  ,\n&MODEBIT SETB  1                        MODE IS OK\n.NOMODE  ANOP  ,\n.*-----------------------------------*.\n.*  SAVE/GETMAIN                     *.\n.*-----------------------------------*.\n&ZSAVE   SETC  '&SAVE'                  INIT DEFAULT\n&GET1    SETC  '&GETMAIN(1)'\n&GET2    SETC  '&GETMAIN(2)'\n         AIF   ('&MACRO' NE 'YES').OKGET2\n         AIF   ('&GET1' NE '').OKGET1\n&GET1    SETC  'TSDSECTL'               SET DEFAULT\n.OKGET1  AIF   ('&GET2' NE '').OKGET2\n&GET2    SETC  'TSDSECT'                SET DEFAULT\n.OKGET2  AIF   ('&MACRO' EQ 'YES' OR '&GET1' NE '').GMOK1\n         AIF   ('&GETMAIN' EQ '').KEEPSAV\n         MNOTE 8,'GETMAIN= CODED INCORRECTLY.  MACRO TERMINATED'\n         MEXIT\n.KEEPSAV AIF   ('&ZSAVE' EQ '').CHKBASE SAVE AREA NOT USED\n         MNOTE *,'<<< GENERATED CODE WILL NOT BE RE-ENTRANT >>>'\n         AGO   .CHKBASE\n.GMOK1   ANOP\n&ZSAVE   SETC  ''                       NO SAVE AREA\n.*-----------------------------------*.\n.*  BASES                            *.\n.*-----------------------------------*.\n.CHKBASE AIF   ('&BASE4' EQ '').NOBASE4\n         AIF   ('&BASE3' NE '').BASE3\n         MNOTE 8,'*** BASE4 IGNORED, INVALID WITHOUT BASE3= ***'\n.NOBASE4 AIF   ('&BASE3' EQ '').OKBASES\n.BASE3   AIF   ('&BASE2' NE '').OKBASES\n         MNOTE 8,'*** BASE3 IGNORED, INVALID WITHOUT BASE2= ***'\n.OKBASES AIF   (('&GETMAIN' EQ '') AND ('&MACRO' NE 'YES')).OK1\n         AIF   ('&SAVE'   EQ '*').OK1\n         AIF   ('&SAVE'    EQ '').OK1\n         MNOTE 12,'*** SAVE= MUTUALLY EXCLUSIVE WITH GETMAIN= AND/OR MA$\n               CRO=YES.  MACRO TERMINATED ***'\n         MEXIT\n.OK1     AIF   ('&NFS' NE '').GOTNAME\n         MNOTE 12,'*** CSECT NAME OMITTED ***'\n.*-----------------------------------*.\n.*  SECTYPE=                         *.\n.*-----------------------------------*.\n.GOTNAME AIF   ('&SECTYPE' NE 'CSECT').NOCSECT\n.DOCSECT ANOP\n&NFS     CSECT                          OSENTER -- 29May88 -- LDW\n         AGO   .SECDONE\n.NOCSECT AIF   ('&SECTYPE' NE 'DSECT').NODSECT\n&NFS     DSECT                          OSENTER -- 29May88 -- LDW\n         AGO   .SECDONE\n.NODSECT AIF   ('&SECTYPE' EQ 'NONE').SECNONE\n         AIF   ('&SECTYPE' EQ 'ENTRY').ENTRY\n       MNOTE 8,'*** SECTYPE=&SECTYPE IS INVALID, SECTYPE=CSECT ASSUMED'\n         AGO   .DOCSECT\n.ENTRY   ENTRY &NFS\n.SECNONE ANOP\n*  DEFINE NAME\n&NFS     DC    0D'0'                    OSENTER -- 29May88 -- LDW\n.*-----------------------------------*.\n.*  AMODE=/RMODE=                    *.\n.*-----------------------------------*.\n.SECDONE AIF   ('&AMODE' EQ '').NOAMODE\n&NFS     AMODE &AMODE\n.NOAMODE AIF   ('&RMODE' EQ '').NORMODE\n&NFS     RMODE &RMODE\n.NORMODE ANOP\n.*-----------------------------------*.\n.*  REGS=                            *.\n.*-----------------------------------*.\n&Q       SETC  '&REGS(2)'\n         AIF   ('&REGS(1)' EQ '' AND '&REGS(2)' NE '').DOREGS\n         AIF   ('&REGS(1)' EQ 'NO').NOREGS\n         AIF   ('&REGS(2)' NE '').DOREGS\n&Q       SETC  'R'\n.DOREGS  ANOP\n*=====================================================================*\n*        REGISTER EQUATES                                             *\n         REGEQU  PREFIX=&Q,FR=&F\n         SPACE 1\n.NOREGS  ANOP\n&L       SETA  K'&Q\n&R0      SETC  '&Q'.'0'\n&R1      SETC  '&Q'.'1'\n&R2      SETC  '&Q'.'2'\n&R3      SETC  '&Q'.'3'\n&R12     SETC  '&Q'.'12'\n&R13     SETC  '&Q'.'13'\n&R14     SETC  '&Q'.'14'\n&R15     SETC  '&Q'.'15'\n&L       SETA  K'&REGS(2)\n.*-----------------------------------*.\n.*  MISC WORKAREA GOODIES            *.\n.*-----------------------------------*.\n.*%%%%%% AIF   (&ENVCP AND '&PL' NE '').NOGM2   WILL BE GENERATED LATER\n         AIF   (&ENVCP).NOGM2           WILL BE GENERATED LATER\n         AIF   ('&GET2' EQ '').NOGM2    DSECT NAME OMITTED\n&GET2    DSECT\n         DS    18F                      SAVE AREA\n.* IF ENV=SIMULATE AND ENV=CP THEN GENERATE THE SIMULATION AREA HERE.\n         AIF   (NOT (&ENVSIM AND &ENVCP)).NOSIM1\n&IHBNX.F DS    A,2H,CL100               AREA FOR FAKE PARM FIELD\n.NOSIM1  AIF   (NOT &ENVCP).NO$CPPL\n         AIF   ('&PL' EQ '').NOTSECB\nTSECB    DS    F\n.NOTSECB SPACE 1\n*        TSCPPL\n         TSCPPL\n.*-----------------------------------*.\n.*  LOAD=                            *.\n.*-----------------------------------*.\n.NO$CPPL AIF   ('&LOAD' EQ '').NOLOAD1\n&X       SETA  0\n.LOADLP1 ANOP\n&X       SETA  &X+1\n&LOAD(&X) DS   A\n         AIF   (&X LT N'&LOAD).LOADLP1\n.*-----------------------------------*.\n.*  BASE=                            *.\n.*-----------------------------------*.\n.NOLOAD1 SPACE 3\n&NFS     CSECT                          RESUME\n.NOGM2   ANOP\n&ZBASE   SETC  '&BASE'\n         AIF   (&L EQ 0).BASEOK\n         AIF   ('&BASE'(1,&L) EQ '&Q').BASEOK\n         AIF   (T'&BASE NE 'N').BASEOK\n&ZBASE   SETC  '&Q&BASE'\n.BASEOK  USING *,&R15                   TEMPORARY BASE\n         B     &IHBNX.B                 AROUND GORF\n         DROP  &R15                     DROP TEMP BASE\n.*-----------------------------------*.\n.* SET UP BASE REGISTERS FOR EXIT    *.\n.*-----------------------------------*.\n         USNGX &NFS,&ZBASE\n         AIF   ('&BASE2' EQ '').BASEFIX\n         USNGX &NFS+4096,&BASE2\n         AIF   ('&BASE3' EQ '').BASEFIX\n         USNGX &NFS+8192,&BASE3\n         AIF   ('&BASE4' EQ '').BASEFIX\n         USNGX &NFS+12288,&BASE4\n.BASEFIX ANOP\n.*-----------------------------------*.\n.* GENERATE USINGS, IF GIVEN         *.\n.*-----------------------------------*.\n         AIF   (N'&USING LT 1).NOUSING\n&X       SETA  1\n.USINGLP USNGX &USING(&X),&USING(&X+1)\n&X       SETA  &X+2\n         AIF   (&X LT N'&USING).USINGLP\n.NOUSING ANOP\n.*-----------------------------------*.\n.*  ID                               *.\n.*-----------------------------------*.\n         AIF   ('&ID(1)' EQ '*').IDSTAR\n         AIF   ('&ID(1)' EQ '' ).IDSTAR\n         AIF   ('&ID' EQ '*NONE*').DONEID\n         ID    &ID(1),&ID(2),DATE=&DATE,TIME=&TIME\n         AGO   .DONEID\n.IDSTAR  ID    &NFS,&ID(2),DATE=&DATE,TIME=&TIME\n.*-----------------------------------*.\n.*  BASE2, BASE3, BASE4              *.\n.*-----------------------------------*.\n.DONEID  AIF   ('&BASE2' EQ '').NOBASE2\n&IHBNX.A DC    A(&NFS+4096)             SECOND BASE REGISTER\n         AIF   ('&BASE3' EQ '').NOBASE2\n&IHBNX.Z DC    A(&NFS+8192)             LET'S NOT GET CARRIED AWAY...\n         AIF   ('&BASE4' EQ '').NOBASE2\n&IHBNX.Q DC    A(&NFS+12288)            BUT THIS IS GETTING RIDICULOUS\n.NOBASE2 AIF   (('&ZSAVE' NE '*') OR ('&GET1' NE '')).NOSVSTR NO INL SA\n.*OBASE2 AIF   ('&ZSAVE' NE '*').NOSVSTR NO INLINE SAVE AREA\n&IHBNX.S DC    18F'0'                   SAVE AREA\n&ZSAVE   SETC  '&IHBNX.S'\n.NOSVSTR AIF   (NOT &ENVSIM OR &ENVCP OR '&GET2' NE '').NOFKY2\n&IHBNX.F DC    A(0),2H'0',CL100' '      AREA FOR PHONY PARM FIELD\n.*-----------------------------------*.\n.*  GETMAIN=                         *.\n.*-----------------------------------*.\n.NOFKY2  AIF   ('&GET1&GET2' EQ '').NOSPLEN  NO SP & LENGTH\n         AIF   ('&BASE2' NE '').BASE2L\n.*       DC    0A(0)                    ALIGNMENT\n.BASE2L  ANOP                           DON'T NEED ALIGNMENT\n.*HBNX.L DC    AL1(&SP),AL3(&GET1)      GETMAIN SP AND LENGTH\n&IHBNX.L DC    A(&GET1)                 GETMAIN LENGTH\n.NOSPLEN AIF   ('&EXIT' EQ '').NOEXIT\n.*-----------------------------------*.\n.*  EXIT= AND RC=                    *.\n.*-----------------------------------*.\n         SPACE 2\n*=====================================================================*\n&RCRC    SETC  '&RC(1)'\n         AIF   ('&RC' NE '').OKRC1\n&RCRC    SETC  '&R15'\n.OKRC1   AIF   ('&RCLOC' EQ '').OKRC3\n         AIF   ('&RC'    EQ '').OKRC2\n         MNOTE 0,'*** RC= AND RCLOC= MUTUALLY EXCLUSIVE -- RC= IGNORED'\n.OKRC2   ANOP\n&RCRC    SETC  '&RCLOC'\n.OKRC3   ANOP\n&X       SETA  8-K'&RCRC                NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKRCL\n&BLANK1  SETC  ''\n         AGO   .CHAR8RC\n.OKRCL   ANOP\n&BLANK1  SETC  '&BLANK1'(1,&X)\n.CHAR8RC ANOP\n&X       SETA  8-K'&EXIT(1)             NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKEXITL\n&BLANK2  SETC  ''\n         AGO   .CHAR8EX\n.OKEXITL ANOP\n&BLANK2  SETC  '&BLANK2'(1,&X)\n.CHAR8EX AIF   ('&RC' EQ '').MREGRC\n         AIF   ('&RC'(1,1) EQ '(').MREGRC\n         MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE=&RCRC  X\n                 &BLANK1   &BLANK2    *'\n         AGO   .MRCCONT\n.MREGRC  MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE IN &RCR$\n               C &BLANK1   &BLANK2    *'\n.MRCCONT ANOP\n*=====================================================================*\n&NAME    SETC  '&EXIT'\n         AIF   ('&GET2' EQ '').NOXITUS  SKIP IF NO DSECT NAME SUPPLIED\n         USING &GET2,&R13\n.NOXITUS AIF   ('&IKJRLSA' EQ 'NO').NO$RLSA    SKIP IF HE SAID NO\n         AIF   ('&PARSE' EQ '').RLSA$2  CHECK FOR USER SPECIFIED AREA\n         AIF   ('&IKJRLSA' EQ ''   ).RLSA$1  CONTINUE IF NAME OK\n         AIF   ('&IKJRLSA' EQ 'YES').RLSA$1  CONTINUE IF NAME OK\n         MNOTE 8,'IKJRLSA=&IKJRLSA CANNOT BE SPECIFIED WITH PARSE=&PARS$\n               E (CODE IKJRLSA=YES/NO OR OMIT IKJRLSA=)'\n.RLSA$1  ANOP\n*        IKJRLSA  TSPARANS              FREE PARSE'S WORK AREAS\n&NAME    IKJRLSA  TSPARANS\n         AGO   .RLSA$3                  CONTINUE\n.RLSA$2  AIF   ('&IKJRLSA' EQ '').NO$RLSA\n*        IKJRLSA  &IKJRLSA              FREE PARSE'S WORK AREAS\n&NAME    IKJRLSA  &IKJRLSA\n.RLSA$3  SPACE 2\n&NAME    SETC  ''\n.NO$RLSA ANOP  ,\n         AIF   ('&DELETE' EQ '').NODEL    SKIP DELETE SECTION\n&X       SETA  1                        INIT TO FIRST ENTRY\n.DEL$LP  AIF   ('&DELETE(&X)' EQ '').NODEL  DONE HERE\n         AIF   ('&DELETE(&X)' EQ '*').NODELLD   REGULAR\n         AIF   (NOT &ENVMVS).YESDEL1\n&NAME    OSENT01  &DELETE(&X),IKJPTGT,464,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJPUTL,444,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJGETL,348,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJPARS,524,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJDAIR,732,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJSTCK,472,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJSCAN,480,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEHCIR,740,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEHDEF,736,DELETE\n&NAME    OSENT01  &DELETE(&X),IKJEFF02,976,DELETE\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESDEL1    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n         AGO   .YESDEL3\n.YESDEL1 ANOP  ,\n&NAME    OC    &DELETE(&X),&DELETE(&X)  IS IT HERE?\n&NAME    SETC  ''\n         BZ    *+10                     NO, SKIP DELETE\n.YESDEL3 ANOP  ,\n&MVSCVT  SETB  0                        RESET FOR LOAD SECTION\n         MNOTE *,'       DELETE  EPLOC==CL8''&DELETE(&X)'''\n         DELETE  EPLOC==CL8'&DELETE(&X)'\n         AGO   .DEL$END                 LOOP AGAIN\n.NODELLD ANOP\n&Y       SETA  1                        INIT FOR FIRST ENTRY\n.DEL$LLP AIF   ('&LOAD(&Y)' EQ '').DEL$END   DONE HERE\n         AIF   (NOT &ENVMVS).YESDEL2\n&NAME    OSENT01  &LOAD(&X),IKJPTGT,464,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJPUTL,444,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJGETL,348,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJPARS,524,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJDAIR,732,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJSTCK,472,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJSCAN,480,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736,DELETE\n&NAME    OSENT01  &LOAD(&X),IKJEFF02,976,DELETE\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESDEL2    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n         AGO   .YESDEL4\n.YESDEL2 ANOP  ,\n&NAME    OC    &LOAD(&Y),&LOAD(&Y)      IS IT HERE?\n&NAME    SETC  ''\n         BZ    *+10                     NO, SKIP DELETE\n.YESDEL4 ANOP  ,\n&MVSCVT  SETB  0                        RESET FOR LOAD SECTION\n         MNOTE *,'       DELETE  EPLOC==CL8''&LOAD(&Y)'''\n         DELETE  EPLOC==CL8'&LOAD(&Y)'\n&Y       SETA  &Y+1                     INCR IT\n         AGO   .DEL$LLP                 LOOP IT AGAIN\n.DEL$END ANOP  ,\n&X       SETA  &X+1                     NEXT DELETE\n         AGO   .DEL$LP                  LOOP AGAIN\n.NODEL   ANOP  ,\n         AIF   ('&RCRC' NE '0').RCNOT0\n&NAME    XR    &R15,&R15                SET RETURN CODE ZERO\n&NAME    SETC  ''\n         AGO   .HAVERC\n.RCNOT0  AIF   ('&RCLOC' EQ '').NORCLOC RCLOC NOT GIVEN\n         AIF   (T'&RCLOC EQ 'F').RCLOCF\n         AIF   (T'&RCLOC EQ 'H').RCLOCH\n         MNOTE 0,'*** UNKNOWN TYPE FOR RCLOC=&RCLOC -- \"F\" ASSUMED'\n.RCLOCF  ANOP\n&NAME    L     &R15,&RCLOC              LOAD RETURN CODE\n         AGO   .RCCOM                   GO TO COMMON\n.RCLOCH  ANOP\n&NAME    LH    &R15,&RCLOC              LOAD RETURN CODE\n         AGO   .RCCOM                   GO TO COMMON\n.NORCLOC AIF   ('&RC' EQ '').HAVERC     RC IS IN A REG\n         AIF   ('&RC'(1,1) EQ '(').HAVERC   DITTO\n&NAME    LA    &R15,&RCRC               LOAD RETURN CODE\n.RCCOM   ANOP                           COMMON POINT\n&NAME    SETC  ''\n.HAVERC  AIF   ('&GET1' EQ '').NOWORK1  NO DSA TO FREE\n&NAME    LR    &R1,&R13                 COPY DSA PTR\n&NAME    SETC  ''\n.NOWORK1 AIF   ('&GET2' EQ '').NOWORK2\n         DROP  &R13\n.NOWORK2 AIF   ('&SAVE' EQ '').NODECHN  SKIP IF NO SAVE AREA TO DECHAIN\n&NAME    L     &R13,4(,&R13)            DECHAIN SAVE AREAS\n&NAME    SETC  ''\n.NODECHN AIF   ('&RC' EQ '').WORKE\n         AIF   ('&RC'(1,1) NE '(').NOWORKE\n.WORKE   AIF   ('&RCLOC' NE '').NOWORKE STORE R15\n         AIF   ('&GET1' EQ '').RCNOT1   RC=(1) IS OK IF NO DYNAMIC AREA\n         AIF   (('&RCRC' NE '&R1') AND ('&RCRC' NE '1')).RCNOT1\n         MNOTE 4,'YOU TURKEY.  RC=(R1) DOESN''T WORK RIGHT IF YOU HAVE $\n               A DYNAMIC AREA'\n         MNOTE 0,'... I HOPE YOU INSTALLED ZAP...'\n.RCNOT1  ANOP\n&NAME    ST    &RCRC,16(,&R13)          SET RETURN CODE\n&NAME    SETC  ''\n         AGO   .WASRGRC\n.NOWORKE ANOP\n&NAME    ST    &R15,16(,&R13)           SET RETURN CODE\n&NAME    SETC  ''\n.WASRGRC ANOP  ,\n         AIF   ('&GET1' EQ '').NOWRKE2  NO DSA TO FREE\n         L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN\n        MNOTE '         FREEMAIN  RU,A=(1),LV=(0),SP=&SP  FREE THE DSA'\n         FREEMAIN  RU,A=(1),LV=(0),SP=&SP\n.NOWRKE2 LM    &R14,&R12,12(&R13)       RESTORE CALLERS REGS\n         AIF   ('&T' NE 'T').BR14\n         MVI   12(&R13),X'FF'           FLAG SAVEAREA AS INACTIVE\n.BR14    BR    &R14                     RETURN TO CALLER\n.NOEXIT  SPACE 3\n*=====================================================================*\n*    ENTRY CODE                                                       *\n*=====================================================================*\n&IHBNX.B STM   &R14,&R12,12(&R13)       SAVE CALLER'S REGS\n.*-----------------------------------*.\n.* SET UP BASE REGISTERS             *.\n.*-----------------------------------*.\n         LR    &ZBASE,&R15              LOAD BASE REGISTER\n         AIF   ('&BASE2' EQ '').BASEFIN\n         L     &BASE2,&IHBNX.A          LOAD SECOND BASE REGISTER\n.*       USNGX &NFS+4096,&BASE2\n         AIF   ('&BASE3' EQ '').BASEFIN\n         L     &BASE3,&IHBNX.Z          LOAD BASE3 FOR MLE,BMD,VIC\n.*       USNGX &NFS+8192,&BASE3\n         AIF   ('&BASE4' EQ '').BASEFIN\n         L     &BASE4,&IHBNX.Q          WHAT'S GOING ON HERE???\n.*       USNGX &NFS+12288,&BASE4\n.BASEFIN ANOP\n.*-----------------------------------*.\n.* FUTZ WITH THE PARM                *.\n.*-----------------------------------*.\n&AR      SETC  '&R14'                   SET DEFAULT FOR LENREG=\n&LR      SETC  '&R15'                   SET DEFAULT FOR ADDRREG=\n         AIF   (('&ADDRREG' EQ '') AND ('&LENREG' EQ '')).NO$AR\n         AIF   (('&ADDRREG' NE '') AND ('&LENREG' NE '')).ARLR\n         MNOTE 8,'ADDRREG= AND LENREG= MUST BOTH BE GIVEN'\n.ARLR    ANOP\n&AR      SETC  '&ADDRREG'\n&LR      SETC  '&LENREG'\n.NO$AR   AIF   ('&PARMREG' EQ '').NOPARMR\n         LR    &PARMREG,&R1             SAVE PARM POINTER\n.NOPARMR AIF   ('&LPARM' EQ '').NOLPARM\n&NAME    L     &LPARM,0(,&R1)           PICK UP PARM POINTER\n&NAME    SETC  ''\n         AIF   (&ENVTSO).NOLPARM\n         AIF   ('&ADDRREG' EQ '').NOLPARM\n         LH    &LR,0(,&LPARM)           GET PARM LENGTH\n         LA    &AR,2(,&LPARM)           POINT PAST LENGTH\n.*-----------------------------------*.\n.* GET A SAVE AREA,                  *.\n.* EITHER STATIC OR DYNAMIC          *.\n.*-----------------------------------*.\n.NOLPARM AIF   ('&GET1' EQ '').STATIC\n&NAME    L     R0,&IHBNX.L              GET LENGTH TO FREEMAIN\n&NAME    SETC  ''\n         AIF   ('&GETMLOC' NE '').USELOC\n         MNOTE '         GETMAIN  RU,LV=(0),SP=&SP'\n         GETMAIN  RU,LV=(0),SP=&SP\n         AGO   .NOLOC\n.USELOC  MNOTE '         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GE$\n               TMLOC(2))'\n         GETMAIN  RU,LV=(0),SP=&SP,LOC=(&GETMLOC(1),&GETMLOC(2))\n*\n.NOLOC   AIF   ('&GETMAIN(3)' NE 'ZERO').USE1\n         XC    0(18*4,R1),0(R1)         clear save area in dyn area\n.USE1    ST    &R1,8(,&R13)             FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R1)             BACK CHAIN SAVE AREAS\n         LR    &R13,&R1                 GET NEW SAVE AREA ADDR\n         AIF   ('&GETMAIN(3)' NE 'ZERO').NOZERO2\n         LA    R14,18*4(,R1)            -> start of area to zero\n         L     R15,&IHBNX.L             get length of dynamic area\n         LA    R1,18*4                  amount already zeroed\n         SR    R15,R1                   remaining length to clear\n         BNP   *+8    >=====+           skip if nothing left\n         SR    R1,R1        |           set source length = 0\n         MVCL  R14,R0       V           clear dynamic area\n.NOZERO2 AIF   ('&GET2' EQ '').CONT3\n         USNGX &GET2,&R13\n         AGO   .CONT3\n.*-----------------------------------*.\n.* CHAIN SAVE AREAS                  *.\n.*-----------------------------------*.\n.STATIC  AIF   ('&SAVE' EQ '').CONT3    NO SAVE AREA TO BE USED AT ALL\n         AIF   ('&PARMREG' NE '&R15').NOT15\n&NAME    LA    &R1,&ZSAVE               GET SAVE AREA ADDR\n&NAME    SETC  ''\n         AGO   .USE1\n.NOT15   LA    &R15,&ZSAVE              GET SAVE AREA ADDR\n         ST    &R15,8(,&R13)            FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R15)            BACK CHAIN SAVE AREAS\n         LR    &R13,&R15                GET NEW SAVE AREA ADDR\n.CONT3   AIF   ('&RCLOC' EQ '').CONT3B\n         XC    &RCLOC,&RCLOC            INIT RCLOC TO ZERO\n.CONT3B  SPACE 3\n         AIF   (NOT &ENVCP).NMVCPPL\n         MVC   CPPL(CPPLL),0(&PARMREG)  COPY CPPL TO SAFE PLACE\n.NMVCPPL AIF   (&FKCALL OR &FKCP).FAKE$A\n         AIF   ('&ADDRREG' EQ '').LOAD\n         AIF   (&ENVTSO).FAKE$A\n         L     &AR,0(,&PARMREG)         POINT TO PARM (LENGTH)\n         LH    &LR,0(,&AR)              GET PARM LENGTH\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AGO   .INUSE\n.FAKE$A  SPACE 2\n*  DETERMINE WHETHER WE HAVE BEEN CALLED AS A TSO CP OR THRU CALL\n         SPACE 1\n         AIF   (NOT &MODEBIT).NOMOD01\n         MVI   &MODE(1),0               CLEAR FLAG\n.NOMOD01 ANOP  ,\n         L     &R1,16                   -> CVT\n         L     &R1,0(,&R1)              -> DISPATCH\n         L     &R1,4(,&R1)              -> TCB\n         L     &R1,180(,&R1)            -> JSCB\n         L     &R1,264(,&R1)            -> PSCB\n         LA    &R0,0(,&R1)              CLEAR HIGH BYTE\n         LTR   &R0,&R0                  ANY PSCB?\n         BZ    &IHBNX.E                 NO - JUMP AROUND NEXT CHECK\n         L     &R1,8(,&PARMREG)         POSSIBLE PSCB PTR\n         LA    &R1,0(,&R1)              CLEAR HIGH BYTE\n         TM    0(&PARMREG),X'80'        ONLY 1 PARM?\n         BO    &IHBNX.E                 YES - // EXEC OR TSO CALL\n         AIF   (NOT &MODEBIT).NOMOD02\n         AIF   (N'&MODE NE 4).NOMOD02   IF NOT FOR CP, IGNORE\n         MVI   &MODE(1),&MODE(4)        ASSUME CP\n.NOMOD02 ANOP  ,\n         CR    &R0,&R1                  THIRD PARM -> PSCB?\n         AIF   (('&ADDRREG' NE '') OR (&FKCALL)).SETCPR\n         BE    &IHBNX.C                 YES - WERE CALLED AS A TSO CP\n         AGO   .CONT5                   SKIP AROUND\n.SETCPR  BNE   &IHBNX.E                 NO - NOT TSO CP\n         SPACE 2\n*  HAVE BEEN CALLED AS A CP\n         SPACE 1\n         AIF   ('&ADDRREG' EQ '').NO$AR2\n         L     &R1,0(,&PARMREG)         CBUF PTR\n         LH    &LR,0(,&R1)              LENGTH OF CBUF\n         LH    &AR,2(,&R1)              OFFSET TO FIRST NON-BLANK\n         LA    &LR,0(&LR,&R1)           POINT PAST CBUF\n         LA    &AR,4(&AR,&R1)           POINT TO FIRST NON-BLANK\n         SR    &LR,&AR                  LENGTH OF PARMS\n.NO$AR2  AIF   (&FKCALL).CONT4\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.*\n.CONT4   AIF   (NOT &FKCALL).NOFAKE1\n.*-----------------------------------*.\n.*  FAKE A CALL                      *.\n.*-----------------------------------*.\n         STH   &LR,&IHBNX.F+4           SET FAKED LENGTH OF PARM\n         LTR   &R1,&LR                  COPY LENGTH\n         CH    &R1,=H'100'              PARM TOO BIG?\n         BNH   *+8                      NO - OK\n         LA    &R1,=H'100'              TOO BIG - USE TRUNCATE AT MAX\n         LTR   &R1,&R1                  TEST PARM LENGTH\n         BNP   *+16                     SKIP IF NO PARM       >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         EX    &R1,*+4                  MOVE THE PARM TO WORKAREA   |\n         MVC   &IHBNX.F+6(0),0(&AR)     << EXECUTED >>              |\n         LA    &R1,&IHBNX.F+4           GET FAKE PARM ADDR    <=====+\n         ST    &R1,&IHBNX.F             STORE IT\n         LA    &PARMREG,&IHBNX.F        GET ADDR OF FAKED PARM\n         MVI   &IHBNX.F,X'80'           SET END OF LIST BIT\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.NOFAKE1 AIF   (NOT &FKCP).LOAD\n.CONT5   SPACE 2\n*  HAVE BEEN CALLED FROM BATCH, OR TSO CALL\n         SPACE 1\n&IHBNX.E L     &AR,0(,&PARMREG)         POINT TO PARM LENGTH\n         LH    &LR,0(,&AR)              GET LENGTH OF PARM\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AIF   (NOT &FKCP).NOFAKE2\n*  CPPL=ADDR(CBUF,UPT,PSCB,ECT)\n         LA    &R1,&IHBNX.F             GET ADDR OF FAKE CBUF\n         ST    &R1,CPPLCBUF             SET INTO CPPL\n         AIF   (NOT &MODEBIT).NOMOD03\n         AIF   (N'&MODE LT 3).NOMOD03   IF NOT FOR CP, IGNORE\n         MVI   &MODE(1),&MODE(3)        ASSUME TSO CALL\n.NOMOD03 ANOP  ,\n         LTR   &R1,&R0                  COPY PSCB ADDR\n         BNZ   &IHBNX.T                 CONTINUE IF IT EXISTS\n         SPACE 2\n*  THE ENVIRONMENT AT THIS POINT IS BATCH (NOT TMP IN BACKGROUND)\n         AIF   (NOT &MODEBIT).NOMOD04\n         MVI   &MODE(1),&MODE(2)        MUST BE BATCH\n.NOMOD04 ANOP  ,\n         XC    &IHBNX.F(256),&IHBNX.F   CLEAR FIRST PART OF PHONY AREA\n         XC    &IHBNX.F+256(&IHBNX.K-256),&IHBNX.F+256   AND THE REST\n         LA    &R0,&IHBNX.P             -> PHONY PSCB\n         ST    &R0,CPPLPSCB             SET INTO FAKE CPPL\n         LA    &R0,&IHBNX.U             -> PHONY UPT\n         ST    &R0,&IHBNX.P+52          SET INTO FAKE PSCB\n.*10-81  MVI   &IHBNX.P+57,L'&IHBNX.U   SET LEN OF UPT IN PSCB\n         MVI   &IHBNX.P+57,&LQ&IHBNX.U  SET LEN OF UPT IN PSCB\n         OI    &IHBNX.U+12,X'40'        SET FLAG: NO PROMPTING\n         LA    &R1,&IHBNX.V             -> PHONY ECT\n         B     &IHBNX.X\n         SPACE 2\n&IHBNX.T ST    &R0,CPPLPSCB             SET INTO FAKE CPPL\n         MVC   CPPLUPT(4),52(&R1)       MOVE UPT ADDR INTO CPPL\n         L     &R1,48(,&R1)             PSCB.RLGB\n         L     &R1,256(,&R1)            RLGB.ECT\n&IHBNX.X ST    &R1,CPPLECT              SET ECT ADDR IN CPPL\n         SPACE 1\n*  CBUF=Y(CBUF_LEN,OFFSET_TO_NONBLANK),C'CMDNAME',C' ',C'OPERANDS'\n         MVC   &IHBNX.F+4(8),12(&R1)    MOVE CMD NAME TO CBUF\n         MVI   &IHBNX.F+4+8,C' '        PUT IN DELIMETER\n         NI    28(&R1),X'7F'            TURN OFF \"NO OPERANDS\" BIT\n         LTR   &LR,&LR                  ANY OPERANDS?\n         BP    *+8                      YES - SKIP\n         OI    28(&R1),X'80'            SET \"NO OPERANDS\" BIT IN ECT\n         SPACE 1\n         LA    &R1,8+1                  OFFSET TO FIRST NON-BLANK\n         STH   &R1,&IHBNX.F+2           SET IN FAKE CBUF\n         LA    &R0,8+1+4(,&LR)          GET LENGTH OF CBUF\n         STH   &R0,&IHBNX.F             SET INTO FAKE CBUF\n         LTR   &R1,&LR                  ANY OPERANDS?\n         BNP   *+16                     NO - SKIP             >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         MVC   &IHBNX.F+4+8+1(0),0(&AR) << EXECUTED >>              |\n         EX    &R1,*-6                  MOVE THE PARM TO FAKE CBUF  |\n         LA    &PARMREG,CPPL            POINT TO CPPL         <=====+\n.NOFAKE2 SPACE 2\n&NAME    SETC  '&IHBNX.C'\n.*-----------------------------------*.\n.*  LOAD=                            *.\n.*-----------------------------------*.\n.LOAD    AIF   ('&LOAD' EQ '').NOLOAD\n&X       SETA  1\n.LOAD$LP AIF   ('&LOAD(&X)' EQ '').NOLOAD\n         AIF   (NOT &ENVMVS).YESLOAD\n&NAME    OSENT01  &LOAD(&X),IKJPTGT,464\n&NAME    OSENT01  &LOAD(&X),IKJPUTL,444\n&NAME    OSENT01  &LOAD(&X),IKJGETL,348\n&NAME    OSENT01  &LOAD(&X),IKJPARS,524\n&NAME    OSENT01  &LOAD(&X),IKJDAIR,732\n&NAME    OSENT01  &LOAD(&X),IKJSTCK,472\n&NAME    OSENT01  &LOAD(&X),IKJSCAN,480\n&NAME    OSENT01  &LOAD(&X),IKJEHCIR,740\n&NAME    OSENT01  &LOAD(&X),IKJEHDEF,736\n&NAME    OSENT01  &LOAD(&X),IKJEFF02,976                            SDM\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESLOAD    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n.YESLOAD MNOTE *,'       LOAD  EPLOC==CL8''&LOAD(&X)'''\n&NAME    LOAD  EPLOC==CL8'&LOAD(&X)'\n&NAME    SETC  ''\n.ADDRSAV ST    &R0,&LOAD(&X)\n.SKIPASV SPACE 1\n         AIF   ('&LOAD(&X)' NE 'IKJDAIR').NO$DAIR\n&GDAIR   SETB  1                        DAIR LOADED\n         AGO   .LOADNXT\n.NO$DAIR AIF   ('&LOAD(&X)' NE 'IKJPARS').NO$PARS\n&GPARSE  SETB  1                        PARSE WAS LOADED\n&PARNAME SETC  'IKJPARS'\n.NO$PARS ANOP\n.LOADNXT ANOP\n&X       SETA  &X+1\n         AGO   .LOAD$LP\n.*-----------------------------------*.\n.*  PL=                              *.\n.*-----------------------------------*.\n.NOLOAD  AIF   ('&PL' EQ '').NO$PL$1\n&X       SETA  1\n.PLLOOP  AIF   ('&PL(&X)' NE 'CSCAN').PL2\n&CSPL    SETB  1\n         AGO   .PLNEXT\n.PL2     AIF   ('&PL(&X)' NE 'PARSE').PL3\n&PARS    SETB  1\n         AGO   .PLNEXT\n.PL3     AIF   ('&PL(&X)' NE 'DAIR').PL4\n&DAIR    SETB  1\n         AGO   .PLNEXT\n.PL4     AIF   ('&PL(&X)' NE 'IO').PL5\n&IO      SETB  1\n         AGO   .PLNEXT\n.PL5     AIF   ('&PL(&X)' NE 'MESSAGE').PL6\n&MSG     SETB  1\n         AGO   .PLNEXT\n.PL6     MNOTE 4,'PL=&PL(&X) UNKNOWN -- IGNORED'\n.PLNEXT  ANOP\n&X       SETA  &X+1\n         AIF   (&X LE N'&PL).PLLOOP\n.*\n.*\n.NO$PL$1 AIF   ('&PARSE(2)' EQ '').PLNOTM\n&MSG     SETB  1\n.PLNOTM  AIF   (NOT (&CSPL OR &PARS OR &DAIR OR &IO OR &MSG)).NOSETPL\n&NAME    L     &R1,CPPLUPT              GET UPT PTR\n&NAME    SETC  ''\n         L     &R2,CPPLECT              GET ECT PTR\n         LA    &R3,TSECB                GET ECB PTR\n         SR    &R0,&R0                  GET A 0\n         ST    &R0,TSECB                CLEAR ECB\n.*\n         AIF   (NOT &CSPL).NOSETC\n         SPACE 1\n         STM   &R1,&R3,CSPL             INITIALIZE CSPL (UPT, ECT, ECB)\n         ST    &R0,CSFLG                ZERO CSFLG\n         LA    &R0,CSFLG\n         ST    &R0,CSPLFLG\n         LA    &R0,CSOA\n         ST    &R0,CSPLOA\n.*\n.NOSETC  AIF   (NOT &PARS).NOSETP\n         STM   &R1,&R3,PPL              INITIALIZE PPL (UPT, ECT, ECB)\n         LA    &R0,TSPARANS             PTR TO PARSE ANSWER PLACE\n         ST    &R0,PPLANS\n         ST    &R13,PPLUWA              PARSE USER WORK AREA PTR\n         XC    TSPARANS(4),TSPARANS     AVOID DUPLICATE IKJRLSA\n.*\n.NOSETP  AIF   (NOT &DAIR).NOSETD\n         STM   &R1,&R3,DAPL             INITIALIZE DMPL (UPT, ECT, ECB)\n         MVC   DAPLPSCB(4),CPPLPSCB\n.*\n.NOSETD  AIF   (NOT &IO).NOSETI\n         STM   &R1,&R3,IOPL             INITIALIZE IOPL (UPT, ECT, ECB)\n.*\n.NOSETI  AIF   (NOT &MSG).NOSETM\n         ST    &R3,MPLECB               INIT MPL ECB PTR\n         LA    &R0,CPPL\n         ST    &R0,MPLCPPL\n         LA    &R0,MPLCSECT             PTR TO MSG CSECT\n         ST    &R0,MPLCSECP\n         XC    MPLSW(MPLZL),MPLSW       INITIALIZE REMAINING MPL TO 0\n.NOSETM  ANOP\n.NOSETPL AIF   ('&PARSE(1)' EQ '').NOPARSE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  PARSE THE COMMAND LINE                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MNOTE *,'       TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I$\n               ),'\n         MNOTE *,'               SYNAD=&PARSE(2),ENTRY=&PARNAME'\n         TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I),             $\n               SYNAD=&PARSE(2),ENTRY=&PARNAME\n&NAME    SETC  ''\n         SPACE 5\n         AIF   ('&PARSE(2)' EQ '').NOPARSE   NO ERROR ANALYSIS ROUTINE\n&NAME    SETC  '&IHBNX.P'\n         SPACE 2\n         B     &NAME                    SKIP AROUND PARSE ERR ANALYSIS\n         SPACE 6\n***********************************************************************\n*                                                                     *\n*  PARSE ERROR ANALYSIS SUBROUTINE                                    *\n*                                                                     *\n***********************************************************************\n         TSPARERR\n         SPACE 6\n.NOPARSE AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n.INUSE   INUSE\n         SPACE 2\n         AIF   ('&PL' EQ '' AND NOT &ENVCP).MEND\n         AIF   ('&GET2' NE '' OR '&MACRO' EQ 'YES').PLOK1\n         MNOTE 8,'*** PL= INVALID WITHOUT SECOND OPERAND OF GETMAIN='\n         MEXIT\n.PLOK1   EJECT\n&GET2    DSECT\n         DS    18F                      SAVE AREA\n         AIF   ('&PL' EQ '').NO$PL$2\nTSECB    DS    F                        ECB FOR TSO SERVICES\n.NO$PL$2 SPACE 2\n*        TSCPPL\n         TSCPPL\n         AIF   (NOT &ENVSIM).NOFAKED\n&IHBNX.F DS    2H,CL256                 AREA FOR FAKE CBUF\n&IHBNX.P DS    XL72                     AREA FOR PHONY PSCB\n&IHBNX.V DS    XL40                     AREA FOR PHONY ECT\n&IHBNX.U DS    XL24                     AREA FOR PHONY UPT\n&IHBNX.K EQU   *-&IHBNX.F               LENGTH OF PHONY BLOCKS TO CLEAR\n.NOFAKED AIF   ('&PL' EQ '').NO$PL$3\n         AIF   ('&PRINT' NE 'NOGEN').YESGEN1\n         PRINT NOGEN                    SUPPRESS THE DSECTS\n.YESGEN1 AIF   (NOT &CSPL).NOTCSPL\n         SPACE 2\n         MNOTE *,'       TSCSPL'\n         TSCSPL\n.NOTCSPL AIF   (NOT &PARS).NOTPARS\n         SPACE 2\n         MNOTE *,'       TSPPL'\n         TSPPL\n.NOTPARS AIF   (NOT &DAIR).NOTDAIR\n         SPACE 2\n         MNOTE *,'       TSDAPL'\n         TSDAPL\nDAPBAREA DS    22F                      AREA FOR DAIR PARAMETER BLOCK\n         SPACE 2\n         MNOTE *,'       TSDMPL'\n         TSDMPL\n.NOTDAIR AIF   (NOT &IO).NOTIO\n         SPACE 2\n         MNOTE *,'       TSIOPL'\n         TSIOPL\n.NOTIO   AIF   (NOT &MSG).NOTMSG\n         SPACE 2\n         MNOTE *,'       TSMPL'\n         TSMPL\n.NOTMSG  AIF   ('&PRINT' NE 'NOGEN').NOTMSGX\n         PRINT GEN\n.NO$PL$3 ANOP  ,\n.NOTMSGX AIF   ('&LOAD' EQ '').NOLOAD2\n         SPACE 2\n&X       SETA  1\n.NXTLOAD AIF   (&X GT N'&LOAD).NOLOAD2\n&LOAD(&X) DS   A\n&X       SETA  &X+1\n         AGO   .NXTLOAD\n.NOLOAD2 SPACE 2\n         AIF   ('&MACRO' NE 'YES').NOMACRO\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TSWORK\n         SPACE 2\n&GET1    EQU   *-&GET2                  LNTH OF DYNAMIC AREA TO GETMAIN\n         SPACE 2\n.NOMACRO AIF   (NOT &DAIR).NODAPBS\n         AIF   (&GDAIRM).NODAPBS\n&GDAIRM  SETB  1\n         AIF   ('&PRINT' NE 'NOGEN').GEN4\n         PRINT NOGEN                    SAVE SOME PAPER\n.GEN4    EJECT\n         MNOTE *,'       IKJDAP08'\n         IKJDAP08\nDAPB08L  EQU   *-DAPB08\n         SPACE 5\n         MNOTE *,'       IKJDAP18'\n         IKJDAP18\nDAPB18L  EQU   *-DAPB18\n         SPACE 5\n         MNOTE *,'       IKJDAP1C'\n         IKJDAP1C\nDAPB1CL  EQU   *-DAPB1C\n         SPACE 5\n         MNOTE *,'       IKJDAP30'\n         IKJDAP30\nDAPB30L  EQU   *-DAPB30\n         AIF   ('&PRINT' NE 'NOGEN').NODAPBS\n         PRINT GEN                      RESTORE\n         SPACE 10\n.NODAPBS ANOP\n&NFS     CSECT\n         SPACE 3\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSENT01": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00\\x803\\x9f\\x00\\x85\\x00\\x7f\\x17Y\\x00\\x1a\\x00\\x11\\x00\\x0b\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1980-12-04T00:00:00", "modifydate": "1985-01-07T17:59:20", "lines": 26, "newlines": 17, "modlines": 11, "user": "LDW"}, "text": "         MACRO\n&NFS     OSENT01  &A,&B,&LOC,&FUNC\n.*.\n.*$MACRO=OSENT01  DATE=01/12/79         SOURCE=LDW\n.*  THIS IS AN INNER MACRO FOR 'OSENTER'\n.*  RENAMED FROM ENTR1I ON 12/04/80\n.*.\n         GBLB  &MVSCVT\n         AIF   ('&A' NE '&B').MEND\n         AIF   ('&FUNC' EQ 'DELETE').DEL\n         AIF   (&MVSCVT).OK\n&NFS     L     14,16                    -> CVT\n&MVSCVT  SETB  1                        SET TO IND WE GOT IT\n         AGO   .OK                      CONTINUE\n.DEL     ANOP  ,\n&MVSCVT  SETB  1                        SET TO IND WE GOT IT\n&NFS     OC    &A,&A                    IS MODULE LOADED?\n         BZ    *+20                     NO, SKIP DELETE\n         AGO   .CONT\n.OK      ANOP\n         L     0,&LOC.(,14)             -> ROUTINE\n         CNOP  0,4                      FORCE ALIGNMENT FOR LOAD MAC\n.CONT    ANOP  ,\n         TM    &LOC.(14),X'80'          LOADED?\n         BO    *+12                     YES - SKIP \"LOAD\" MACRO/SVC\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PC#": {"ttr": 5389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x08\\x00\\x08\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:20", "lines": 8, "newlines": 8, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- PC - EXTRACT PRIMARY ADDRESS SPACE NUMBER\n&LABEL   PC    &A1\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         AIF   (N'&SYSLIST NE 1).ER1\n&LABEL   DC    0H'0',X'B218',S(&A1)     PC\n         MEXIT\n.ER1     MNOTE 12,'PC TAKES EXACTLY ONE OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDE": {"ttr": 5634, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00\\x88\"\\x1f\\x00\\x88\"\\x1f\\x167\\x00\\x12\\x00\\x10\\x00\\x01\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-08-08T00:00:00", "modifydate": "1988-08-08T16:37:20", "lines": 18, "newlines": 16, "modlines": 1, "user": "LDW"}, "text": "         MACRO\n         PDE   ,\nPDE      DSECT ,                        PARSE DESCRIPTOR ELEMENT\nPDEPTR   DS    A                        TEXT PTR\nPDELEN   DS    H                        LEN\nPDEFLAG  DS    X                        FLAGS\nPDEFPRES EQU   X'80'                    PARM PRESENT\n         DS    X                        RESERVED\nPDEPTR2  DS    A\nPDELEN2  DS    H\nPDEFLAG2 DS    X\n         DS    X\nPDEPTR3  DS    A\nPDELEN3  DS    H\nPDEFLAG3 DS    X\n         DS    X\nPDEL     EQU   *-PDE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFKEY": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00 \\x00\\x80\\x03_\\x00\\x86\\x05\\x9f\\x12\\x07\\x00v\\x00\\x82\\x00b\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1986-02-28T12:07:20", "lines": 118, "newlines": 130, "modlines": 98, "user": "LDW"}, "text": "         MACRO\n&NAME    PFKEY &TYPE=IOCB,&KEYGEN=NO,                                  X\n               &CLEAR=,&ENTER=,&ATTN=,&CNCL=,&DEF=,&RESHOW=,           X\n               &K1=,&K2=,&K3=,&K4=,&K5=,&K6=,                          X\n               &K7=,&K8=,&K9=,&K10=,&K11=,&K12=\n.*.\n.*$MACRO=PFKEY      DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO SELECT A PROCESSING\n.*  ROUTINE BASED ON THE AID.\n.*\n.*  UPDATES:\n.*\n.*    02/28/86 LDW - ADD RESHOW= KEYWORD FOR SAME USE AS CNCL=\n.*    11/10/81 LDW - MOVE CHECK FOR ENTER TO IN FRONT OF PFKEY TESTS\n.*.\n         COPY  DCMSGBLS\n         LCLC  &N\n&N       SETC  '&NAME'\n         SPACE\n*                                                                     *\n*        I N P U T    A N A L Y S I S                                **\n*                                                                   ***\n*                                            AID / PF KEY SELECTOR ****\n*                                                                   ***\n*                                                                    **\n*                                                                     *\n         SPACE\n         AIF   ('&KEYGEN' NE '').KK0\n.KDFLT   ANOP\n*\n*        DEFAULT PFK KEYNAMES / FUNCTIONS USED\n*\n         SPACE\n         MEXIT\n.KK0     AIF   ('&ENTER' EQ '').KK1\n&N       CLI   &TYPE.AID,AIDENT\n&N       SETC  ''\n         BE    &ENTER                            <=====   E N T E R\n.KK1     AIF   ('&K1' EQ '').KK2\n&N       CLI   &TYPE.AID,AIDPF1\n&N       SETC  ''\n         BE    &K1                               <=====   P F K 1\n.KK2     AIF   ('&K2' EQ '').KK3\n&N       CLI   &TYPE.AID,AIDPF2\n&N       SETC  ''\n         BE    &K2                               <=====   P F K 2\n.KK3     AIF   ('&K3' EQ '').KK4\n&N       CLI   &TYPE.AID,AIDPF3\n&N       SETC  ''\n         BE    &K3                               <=====   P F K 3\n.KK4     AIF   ('&K4' EQ '').KK5\n&N       CLI   &TYPE.AID,AIDPF4\n&N       SETC  ''\n         BE    &K4                               <=====   P F K 4\n.KK5     AIF   ('&K5' EQ '').KK6\n&N       CLI   &TYPE.AID,AIDPF5\n&N       SETC  ''\n         BE    &K5                               <=====   P F K 5\n.KK6     AIF   ('&K6' EQ '').KK7\n&N       CLI   &TYPE.AID,AIDPF6\n&N       SETC  ''\n         BE    &K6                               <=====   P F K 6\n.KK7     AIF   ('&K7' EQ '').KK8\n&N       CLI   &TYPE.AID,AIDPF7\n&N       SETC  ''\n         BE    &K7                               <=====   P F K 7\n.KK8     AIF   ('&K8' EQ '').KK9\n&N       CLI   &TYPE.AID,AIDPF8\n&N       SETC  ''\n         BE    &K8                               <=====   P F K 8\n.KK9     AIF   ('&K9' EQ '').KK10\n&N       CLI   &TYPE.AID,AIDPF9\n&N       SETC  ''\n         BE    &K9                               <=====   P F K 9\n.KK10    AIF   ('&K10' EQ '').KK11\n&N       CLI   &TYPE.AID,AIDPF10\n&N       SETC  ''\n         BE    &K10                              <=====   P F K 1 0\n.KK11    AIF   ('&K11' EQ '').KK12\n&N       CLI   &TYPE.AID,AIDPF11\n&N       SETC  ''\n         BE    &K11                              <=====   P F K 1 1\n.KK12    AIF   ('&K12' EQ '').KEND\n&N       CLI   &TYPE.AID,AIDPF12\n&N       SETC  ''\n         BE    &K12                              <=====   P F K 1 2\n.KEND    SPACE\n         AIF   ('&CLEAR' EQ '').CNCLR\n&N       CLI   &TYPE.AID,AIDCLR\n&N       SETC  ''\n         BE    &CLEAR                            <=====   C L E A R\n.CNCLR   AIF   ('&CNCL&RESHOW' EQ '').ATN\n&N       CLI   &TYPE.AID,AIDCAN\n&N       SETC  ''\n         AIF   ('&CNCL' EQ '').NOCNCL\n         BE    &CNCL                             <=====   C A N C L\n.NOCNCL  AIF   ('&RESHOW' EQ '').ATN\n         BE    &RESHOW                           <=====   R E S H O W\n.ATN     AIF   ('&ATTN' EQ '').DEF\n&N       CLI   &TYPE.AID,AIDPA1\n&N       SETC  ''\n         BE    &ATTN                             <=====   A T T N\n.DEF     AIF   ('&DEF' EQ '').OUT\n         AIF   ('&DEF' EQ 'NO' OR '&DEF' EQ 'YES' OR '&DEF' EQ 'ENTER')$\n               .ERROR\n         B     &DEF                              <=====   ALL OTHERS\n         AGO   .OUT\n.ERROR   MNOTE 8,'DEF=&DEF NO LONGER SUPPORTED'\n         DC    X'00000000'              ZAPPABLE\n.OUT     SPACE 1\n*                                       *=============================*\n**                                      *                             *\n***                                     *  END OF PFK SELECTION CODE  *\n**                                      *                             *\n*                                       *=============================*\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGPB": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x80\\x07\\x0f\\x00\\x80\\x07\\x0f\\x13U\\x00\\x16\\x00\\x16\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-03-10T00:00:00", "modifydate": "1980-03-10T13:55:20", "lines": 22, "newlines": 22, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         PGPB  &J,&DSECT=YES\n.*.\n.*$MACRO=PGPB       DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO GENERETES A DSECT FOR A PUTGET PARAMETER BLOCK.\n.*.\n         AIF   ('&DSECT' NE 'YES').L1\nPGPB     DSECT\n         AGO   .L2\n.L1      ANOP\nPGPB     DS    0F\n.L2      ANOP\n***********************************************************************\n*    THE PUTGET PARAMETER BLOCK (PGPB) IS POINTED TO BY THE LIST      *\n*    PASSED TO PUTGET.  PUTGET USES IT FOR CONTROL AS WELL AS         *\n*    RETURNING INFORMATION.                                           *\n***********************************************************************\n         DS    CL12                     INTERNAL TO GETLINE/PUTLINE\nPGPBIBUF DS    A                        PTR TO OBTAINED INPUT LINE\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGEQU": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x01o\\x00\\x82(\\x1f\\x19Q\\x00K\\x00I\\x00\\n\\xe3\\xc5\\xd4\\xe2\\xf6\\xf2\\xf5@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1982-10-08T19:51:20", "lines": 75, "newlines": 73, "modlines": 10, "user": "TEMS625"}, "text": "         MACRO\n         REGEQU  &F=,&FR=,&PREFIX=R,&STARS=YES,&DUPMSG=YES\n.*.\n.*$MACRO=REGEQU     DATE=11/26/78       SOURCE=LDW\n.*\n.*  THIS MACRO WILL GENERATE EQU'S FOR SYMBOLIC REGISTERS IF THEY HAVE\n.*       NOT BEEN PREVIOUSLY GENERATED BY THIS MACRO.\n.*\n.* PREFIX=R  SPECIFIES PREFIX FOR GENERAL REGISTER EQUATES.\n.* F= (FR=)  SPECIFIES PREFIX FOR FLOATING POINT REG EQUATES.\n.*            (DEFAULT IS NO EQUATES FOR F.P. REGS)\n.* STARS=YES GENERATE LINE OF ASTERISKS BEFORE AND AFTER EQUATES.\n.*\n.* MULTIPLE REGEQU'S WITH THE SAME PREFIX WILL BE IGNORED.\n.*.\n         GBLC  &$REGS$(15),&R,&FF\n         LCLA  &X\n&R       SETC  '&PREFIX'\n.RLOOP   ANOP\n&X       SETA  &X+1\n         AIF   (&X GT 15).GEN\n         AIF   ('&$REGS$(&X)' EQ '').GEN\n         AIF   ('&R' EQ '&$REGS$(&X)').NOGEN\n         AGO   .RLOOP\n.GEN     ANOP\n&$REGS$(&X) SETC '&R'\n         AIF   ('&STARS' NE 'YES').NOSTAR1\n*=====================================================================*\n.*\n.NOSTAR1 ANOP\n&R.0     EQU   0\n&R.1     EQU   1\n&R.2     EQU   2\n&R.3     EQU   3\n&R.4     EQU   4\n&R.5     EQU   5                        +===========+\n&R.6     EQU   6                        |  DEFINE   |\n&R.7     EQU   7                        | SYMBOLIC  |\n&R.8     EQU   8                        | REGISTERS |\n&R.9     EQU   9                        +===========+\n&R.10    EQU   10\n&R.11    EQU   11\n&R.12    EQU   12\n&R.13    EQU   13\n&R.14    EQU   14\n&R.15    EQU   15\n.*\n         AGO   .CONT11\n.NOGEN   ANOP\n         AIF   ('&DUPMSG' NE 'YES').CONT11\n******** REGEQU ALREADY CODED FOR THIS PREFIX, IGNORED ****************\n.CONT11  AIF   ('&F&FR' EQ '').NOF\n&X       SETA  0                        RE-INIT\n&FF      SETC  '&F&FR'\n.FLOOP   ANOP\n&X       SETA  &X+1\n         AIF   (&X GT 15).FGEN\n         AIF   ('&$REGS$(&X)' EQ '').FGEN\n         AIF   ('&FF' EQ '&$REGS$(&X)').NOGENF\n         AGO   .FLOOP\n.FGEN    ANOP\n&$REGS$(&X) SETC '&FF'\n         SPACE 1\n&FF.0    EQU   0\n&FF.2    EQU   2\n&FF.4    EQU   4\n&FF.6    EQU   6\n.NOF     AIF   ('&STARS' NE 'YES').NOSTAR2\n*=====================================================================*\n.NOSTAR2 SPACE\n         AGO   .MEND\n.NOGENF  ANOP\n         AIF   ('&DUPMSG' NE 'YES').MEND\n******** REGEQU F= ALREADY CODED FOR THIS PREFIX, IGNORED *************\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLCT": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00\\x81#\\x1f\\x00\\x82\\x19\\x0f\\x17H\\x00\\'\\x00\"\\x00\\x07\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-08-19T00:00:00", "modifydate": "1982-07-09T17:48:20", "lines": 39, "newlines": 34, "modlines": 7, "user": "LDW"}, "text": "         MACRO\n         RLCT\n*.\n*        SYSTEMS RESOURCE MANAGERS LOGICAL CHANNEL TABLE\n*\n*        POINTED TO BY RMCT IN RMCTRLCT\n*\n*        ONE FOR EACH LOGICAL CHANNEL IN THE SYSTEM\n*\n*        THIS VERSION SORT OF UPDATED FOR SP1.1\n*        (SEE MODULE IRARMIOM IN OPTIONAL MATERIAL)\n*.\nRLCT     DSECT\nRLCTBIT  DS    F                   ENTRY ID BIT\nRLCTUSR1 DS    A                   POINTER TO HEAVY CHANNEL USER\nRLCTUSR2 DS    A                   POINTER TO HEAVY CHANNEL USER\nRLCTUMWA DS    F                   WORK AREA USED BY SRM\nRLCTPDCT DS    F                   BASE LCH PATH DELEY COUNT\nRLCTURT1 DS    H                   LCH EXCP RATE FOR USER 1\nRLCTURT2 DS    H                   LCH EXCP RATE FOR USER2\n         DS    H                        NOW UNUSED\nRLCTDDCT DS    H                   BASE LOGICAL DEVICE DELAY COUNT\nRLCTUTIL DS    H                   RECENT LCH UTILIZATION FOR IOL\nRLCTUTDA DS    H                   RECENT LCH UTILIZATION FOR\n*                                  DEVICE ALLOCATION\nRLCTRQRT DS    H                   LCH REQUEST RATE\nRLCTRVUF DS    H                   LCH UTILIZATION FACTOR FOR\n*                                  COMPUTING RECCOMENDATION VALUSE\nRLCTUTLB DS    H\nRLCTFLGS DS    H                   RLCT FLAGS\nRLCTOVER EQU   X'80'               LCH IS OVERUTILIZED\nRLCTUNDR EQU   X'40'               LCH IS UNDERUTILIZED\nRLCTDAIM EQU   X'20'               LCH UTILIZATION OVER DEVICE\n*                                  ALLOCATION THRESHOLD\nRLCTPAGE EQU   X'10'               PAGING DATA SPACE ON LCH\n*RLCTRSRF EQU  ?\nRLCTEND  EQU   *                   END OF RLCT\nRLCTSIZE EQU   RLCTEND-RLCT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLCT@": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x81#\\x1f\\x00\\x81#\\x1f\\x12H\\x00\"\\x00\"\\x00\\x00\\xd4\\xe5\\xe2\\xf3K\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-08-19T00:00:00", "modifydate": "1981-08-19T12:48:20", "lines": 34, "newlines": 34, "modlines": 0, "user": "MVS3.8"}, "text": "         MACRO\n         RLCT\n*.\n*        SYSTEMS RESOURCE MANAGERS LOGICAL CHANNEL TABLE\n*\n*        POINTED TO BY RMCT IN RMCTRLCT\n*\n*        ONE FOR EACH LOGICAL CHANNEL IN THE SYSTEM\n*.\nRLCT     DSECT\nRLCTBIT  DS    F                   ENTRY ID BIT\nRLCTUSR1 DS    A                   POINTER TO HEAVY CHANNEL USER\nRLCTUSR2 DS    A                   POINTER TO HEAVY CHANNEL USER\nRLCTUMWA DS    F                   WORK AREA USED BY SRM\nRLCTURT1 DS    H                   LCH EXCP RATE FOR USER 1\nRLCTURT2 DS    H                   LCH EXCP RATE FOR USER2\nRLCTRQCT DS    H                   BASE LCH REQUEST COUNT\nRLCTPDCT DS    H                   BASE LCH PATH DELAY COUNT\nRLCTDDCT DS    H                   BASE LOGICAL DEVICE DELAY COUNT\nRLCTUTIL DS    H                   RECENT LCH UTILIZATION FOR IOL\nRLCTUTDA DS    H                   RECENT LCH UTILIZATION FOR\n*                                  DEVICE ALLOCATION\nRLCTRQRT DS    H                   LCH REQUEST RATE\nRLCTRVUF DS    H                   LCH UTILIZATION FACTOR FOR\n*                                  COMPUTING RECCOMENDATION VALUSE\nRLCTFLGS DS    H                   RLCT FLAGS\nRLCTOVER EQU   X'80'               LCH IS OVERUTILIZED\nRLCTUNDR EQU   X'40'               LCH IS UNDERUTILIZED\nRLCTDAIM EQU   X'20'               LCH UTILIZATION OVER DEVICE\n*                                  ALLOCATION THRESHOLD\nRLCTPAGE EQU   X'10'               PAGING DATA SPACE ON LCH\nRLCTEND  EQU   *                   END OF RLCT\nRLCTSIZE EQU   RLCTEND-RLCT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RMCNS": {"ttr": 5648, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x81(\\x1f\\x00\\x81(\\x1f\\x13\\x00\\x00\\x92\\x00\\x92\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-10-08T00:00:00", "modifydate": "1981-10-08T13:00:20", "lines": 146, "newlines": 146, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NAME    RMCNS\n* A-000000-999999                                               @Y02133\n*/** START OF SPECIFICATION **************************************** */\n*/*                                                                  */\n*/*  MODULE NAME - IRARMCNS  (COMPONENT - 5742-SC1CX)                */\n*/*                                                                  */\n*/*  DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER CONSTANTS MODULE    */\n*/*                                                                  */\n*/*  COPYRIGHT - NONE                                                */\n*/*                                                                  */\n*/*  STATUS - OS/VS2 RELEASE 4, 10/30/75, LEVEL=1                    */\n*/*                                                                  */\n*/*  FUNCTION - PROVIDES THE PRE-ASSEMBLED TABLES USED WITHIN THE    */\n*/*        SYSTEM RESOURCES MANAGER FOR DYNAMIC (NON-REFRESHABLE)    */\n*/*        DATA.  CATEGORIZES THE ROUTINES INTERNAL TO THE SYSTEM    */\n*/*        RESOURCES MANAGER COMPONENT.                              */\n*/*                                                                  */\n*/*  NOTES - THE RESOURCES MANAGER CONTROL TABLE IS FIRST IN THE     */\n*/*        MODULE.  THE CPU MANAGEMENT, I/O MANAGEMENT, STORAGE      */\n*/*        MANAGEMENT, AND CONTROL ALGORITHM TABLES, AND THEN THE    */\n*/*        RESOURCES MANAGER (SUB)ROUTINE ENTRY POINT DESCRIPTOR     */\n*/*        TABLES ARE NEXT, IN THAT ORDER, SO THAT THEY MAY ALL      */\n*/*        BE ADDRESSED WITH ONE REGISTER.                           */\n*/*                                                                  */\n*/*    DEPENDENCIES - SYSTEM RESOURCES MANAGER INITIALIZATION TO     */\n*/*          PROVIDE ADDRESSES OF DYNAMICALLY CREATED TABLES.        */\n*/*                                                                  */\n*/*    RESTRICTIONS - NONE                                           */\n*/*                                                                  */\n*/*    REGISTER CONVENTIONS - REG 2 (RMCTPTR) IS USED TO ADDRESS     */\n*/*          ALL THE TABLES, UP TO AND INCLUDING THE EPST, THAT      */\n*/*          FOLLOW THE RMCT WITHIN THE IRARMCNS MODULE.             */\n*/*                                                                  */\n*/*  MODULE TYPE - TABLE                                             */\n*/*                                                                  */\n*/*    PROCESSOR - ASSEMBLER XF                                      */\n*/*                                                                  */\n*/*    MODULE SIZE - 2K BYTES                                        */\n*/*                                                                  */\n*/*    ATTRIBUTES - NUCLEUS RESIDENT                                 */\n*/*                 NON-EXECUTABLE                                   */\n*/*                                                                  */\n*/*  ENTRY POINT - N/A                                               */\n*/*                                                                  */\n*/*  INPUT - N/A                                                     */\n*/*                                                                  */\n*/*  OUTPUT - N/A                                                    */\n*/*                                                                  */\n*/*  EXIT - N/A                                                      */\n*/*                                                                  */\n*/*  EXTERNAL REFERENCES - SEE EXTERNAL SYBOL DICTIONARY FOR         */\n*/*        ROUTINE NAMES OF THE FORM IRARMXXX.                       */\n*/*                                                                  */\n*/*  TABLES - LOCATES IRARLCT                                        */\n*/*                   IRAWMST                                        */\n*/*                   IRAWAMT                                        */\n*/*                                                                  */\n*/*  MACROS - IRARMCT                                                */\n*/*           IRACCT                                                 */\n*/*           IRAICT                                                 */\n*/*           IRAMCT                                                 */\n*/*           IRARMPT                                                */\n*/*           IRARMCA                                                */\n*/*           IRARMEX                                                */\n*/*           IRARMSB                                                */\n*/*           IRAEPDT                                                */\n*/*           IRAEPAT                                                */\n*/*           IRARMQH                                                */\n*/*           IRAOUCB                                                */\n*/*           IRAOUXB                                                */\n*/*           IRARQSRV                                       @Z40BPCH*/\n*/*                                                                  */\n*/*  CHANGE ACTIVITY =@ZM43084                                       */\n*/*                                                                  */\n*/*  A000000-999999                                            Y02133*/\n*/*                                                                  */\n*/** END OF SPECIFICATION ****************************************** */\n         AIF ('&NAME' EQ '').NONAM\n&NAME    DSECT\n         AGO  .GEN\n.NONAM   ANOP\nIRARMCNS DSECT\n.GEN     ANOP\n         SPACE 3\n         IEZBITS\n         EJECT\n         IRARMCT   DSECT=NO\n         EJECT\n         IRACCT    DSECT=NO\n         EJECT\n         IRAICT    DSECT=NO\n         EJECT\n         IRAMCT    DSECT=NO\n         EJECT\n         IRARCT    DSECT=NO                                    @Z40BPCH\n         EJECT                                                 @Z40BPCH\n         IRARMPT   DSECT=NO\n         EJECT\n         IRARMCA   DSECT=NO\n         EJECT\n         IRARMEX   DSECT=NO\n         EJECT\n         IRARMSB   DSECT=NO\n         EJECT\n         IRAEPAT   DSECT=NO\n         EJECT\n         IRAEPDT   DSECT=NO\n         EJECT\n         IRAEPST   DSECT=NO\n         EJECT\n*\n*        SYSTEM RESOURCES MANAGER TIMER-DRIVEN ENTRY POINT\n*              SCHEDULING QUEUE HEADER\n*\n         DS    0D\nIRACTMQE EQU   *\n         DS    0CL32 -             QUEUE HEADER BLOCK\n         DC    A(0) A(IRARMNOP) -  DUMMY ROUTINE ENTRY ADDRESS\n         DC    A(0) A(IRARMNOP) -  DUMMY ROUTINE RETRY ADDRESS\n         DC    X'00000000' -       DUMMY ROUTINE INVOCATION ID\n         DC    C'TMQE' -           QUEUE IDENTIFICATION\n         DC    A(0) A(IRACTMQE) -  QUEUE FORWARD POINTER\n         DC    A(0) A(EPATSCH) -   QUEUE BCKWARD POINTER\n         DC    X'FFFFFFFF' -       QUEUE ENTRY ORDERING VALUE\n         DC    F'0' -              DUMMY INVOCATION INTERVAL\n         EJECT\n         IRARMQH   DSECT=NO,QUE=WTQE\n         IRARMQH   DSECT=NO,QUE=OTQE\n         IRARMQH   DSECT=NO,QUE=INQE\n         IRAOUCB   DSECT=NO,LABEL=IRAOUCB\n         EJECT\n         IHAOUXB   DSECT=NO,LABEL=IRAOUXB\n         EJECT\n*\n*        REQUEST SERVICE SYSEVENT(38) DATA AREA                @Z40BPCH\n*\n         IRARQSRV DSECT=NO                                     @Z40BPCH\n         EJECT\n*\n*        FIELDS ADJUSTED WHENEVER TIME OF DAY INCREMENT IS CHANGED\n*\nIRAFLTM  DC    A(0) A(FLTMSYS)\n         DC    A(0) A(FLTMUSR)\n         DC    A(0) A(FLTMSAV)                               @Z30WIMG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RMODE": {"ttr": 5652, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x84\\x03\\x1f\\x00\\x84\\x03\\x1f\\x15\\x12\\x00\\t\\x00\\t\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-01-31T00:00:00", "modifydate": "1984-01-31T15:12:20", "lines": 9, "newlines": 9, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     RMODE &X\n.*.\n.*$MACRO=RMODE      DATE=01/31/84       SOURCE=LDW\n.*\n.*  THIS IS A DUMMY MACRO UNTIL WE GET ASMH V2.\n.*.\n         MNOTE 0,'RMODE NOT SUPPORTED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SDV": {"ttr": 5654, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x83\\x16O\\x00\\x83\\x16O\\x16W\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-06-13T00:00:00", "modifydate": "1983-06-13T16:57:20", "lines": 14, "newlines": 14, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         SDV\n.*.\n.*$MACRO=SDV        DATE=06/13/83       SOURCE=LDW\n.*\n.*  THIS MACRO DESCRIBES THE STRING DOPE VECTOR USED BY PL1(F) AND\n.*       THE LOGON PRE-PROMPT EXIT (IKJEFLD).\n.*\n.*.\nSDV      DSECT                          PL1 STRING DOPE VECTOR\nSDVADDR  DS    A                        ADDRESS OF STRING\nSDVMAXL  DS    H                        MAXIMUM LENGTH OF STRING\nSDVCURL  DS    H                        CURRENT LENGTH OF STRING\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMF132": {"ttr": 5656, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x84\\x14?\\x00\\x84\\x14?\\x12G\\x00\\x18\\x00\\x18\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-05-22T00:00:00", "modifydate": "1984-05-22T12:47:20", "lines": 24, "newlines": 24, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         SMF132  &DSECT=YES\n*  THIS RECORD IS WRITTEN BY THE 'NONSWAP' PROGRAM\n         AIF   ('&DSECT' NE 'YES').NODSECT\nSMFNSREC DSECT\n         AGO   .CONT\n.NODSECT ANOP\nSMFNSREC DS    0F                       ALIGN TO FULL WORD BOUNDARY\n.CONT    ANOP\nSMFNSLEN DS    BL2'0'                   RECORD LENGTH\nSMFNSSEG DS    BL2'0'                   SEGMENT DESCRIPTOR\nSMFNSFLG DC    BL1'0'                   HEADER FLAG BYTE\nSMFNSRTY DC    BL1'0'                   RECORD TYPE 132\nSMFNSTME DC    BL4'0'                   TOD, FROM 'TIME BIN' MACRO\nSMFNSDTE DC    PL4'0000'                PACKED DECIMAL DATE: 00YYDDDF\nSMFNSSID DC    CL4' '                   SYSTEM IDENTIFICATION\nSMFNSJBN DC    CL8' '                   JOB NAME\nSMFNSRST DC    BL4'0'                   RESERVED FOR TIME JOB WAS READ\nSMFNSRSD DC    PL4'0000'                RESERVED FOR DATE JOB WAS READ\nSMFNSUID DC    CL8' '                   RESERVED FOR USER IDENT\nSMFNSPGM DC    CL8' '                   PROGRAM NAME\nSMFNSOPT DC    CL1' '                   OPTION (A, L, X)\nSMFNSEND EQU   *                        END OF RECORD TYPE 132\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSAR#": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x83\\x04_\\x00\\x83\\x04_\\x181\\x00\\x08\\x00\\x08\\x00\\x00\\\\\\\\\\\\\\\\\\xe2\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1983-02-14T00:00:00", "modifydate": "1983-02-14T18:31:20", "lines": 8, "newlines": 8, "modlines": 0, "user": "****SDM"}, "text": "         MACRO -- SSAR - SET SECONDARY ADDRESS SPACE NUMBER\n&LABEL   SSAR  &R1\n.* 5JAN83 WRITTEN BY STEVEN D. MCGINTY\n         AIF   (N'&SYSLIST NE 1).ER1\n&LABEL   DC    0H'0',X'B22500',AL1(&R1*16) SSAR\n         MEXIT\n.ER1     MNOTE 12,'SSAR TAKES EXACTLY ONE OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TDCB": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00 \\x00\\x80\\x03\\x9f\\x00\\x80\\x03\\x9f!1\\x007\\x007\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-08T00:00:00", "modifydate": "1980-02-08T21:31:20", "lines": 55, "newlines": 55, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         TDCB\n.*.\n.*$MACRO=TDCB       DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS\n.*.\nTDCB     DSECT\n***********************************************************************\n*                                                                     *\n* TERMINAL DCB                                                        *\n*                                                                     *\n***********************************************************************\nTDCBFWDP DS    A                       LINE FWD POINTER\nTDCBBKP  DS    A                       LINE BACK POINTER\nTDCBPECB DS    A                       POLL DECB ADDRESS\nTDCBWECB DS    A                       RD/WRT DECB ADDRESS\nTDCBLECB DS    F                       LINE I/O ECB ADDR\nTDCBSLID DS    XL4                     SELECT I/O CHAR\nTDCBPLID DS    XL4                     POLL I/O CHAR\nTDCBTYPE DS    CL4                DEVICE TYPE CODE\nTDCBMSGL DS    H                  BLKSIZE MINUS STX/ETX OF OUTBND MSGS\nTDCBAID  DS    X                  LAST AID RECEIVED FROM TERMINAL\nTDCBXSW  DS    X                  TDCB EXIT SWITCH\nTDCBLOAD DS    F                  SERVICE ROUTINE ADDRESS\n*\n*\n         DS    8X                FILLER\nTDCBRDWR DS    A                       READ/WRITE SUBROUTINE\nTDCBCHK  DS    A                       CHECK SUBROUTINE\nTDCBSYN  DS    A                       SYNAD SUBROUTINE\nTDCBABND DS    F                       ABEND CODE\nTDCBSEQ  DS    H                       TDCB SERIAL NUMBER\nTDCBCFLG DS    H                       CONTROL TASK FLAGS\n*        FIRST BYTE OF FLAGS\nTDCBNTR  EQU   X'80'                   NEW TASK REQUIRED\nTDCBRET  EQU   X'40'                   RETRY WANTED\nTDCBLOG  EQU   X'20'                   USER LOGGED ON\nTDCBRETP EQU   X'10'                   RETRY PENDING\nTDCBIACT EQU   X'08'                   TDCB INACTIVE (OFF CHAIN)\nTDCBRETA EQU   X'04'                   RETRY ATTACH IN PROGRESS\nTDCBLIST DS    F                       TESTREQ TDCB CHAIN\nTDCBVECT DS    F                       ADDR OF ADDRESS VECTOR\nTDCBEMSG DS    A                       ADDR OF ERROR MSG STRING\nTDCBACCT DS    A                       ADDRESS OF ACCOUNTING DATA\nTDCBIOCB DS    A                       CURRENT IOCB POINTER\nTDCBDCDA DS    A                       ADDRESS OF DCDA\nTDCBDUPT DS    F                       ADDRESS OF DUPT\n         DS    0D                      ROUND OFF TO DOUBLE WORD BNDRY\nTDCBLEN  EQU   *-TDCB\n* THE FOLLOWING EQUATES ARE TEMPORARY.\nTDCBSECB EQU   TDCBEMSG                STAI ECB\nTDCBSTWA EQU   TDCBABND                STAI WORK AREA PTR\nTDCBPEND EQU   TDCBLIST                PEND TDCB POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TLD": {"ttr": 5893, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x84!?\\x00\\x84!?!Y\\x00b\\x00b\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-31T00:00:00", "modifydate": "1984-07-31T21:59:20", "lines": 98, "newlines": 98, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         TLD\nTLD      DSECT                          SPF 1.0 LOGICAL DISPLAY TABLE\nTLDTBLID DS    CL3                      TLD TABLE ID = C'TLD'\nTLDID    DS    C                        TLD ID ('0','1',...)\n         ORG   TLD+X'14'\nTLDTLDP  DS    A                        THIS TLD PTR\n         ORG   TLD+X'34'\nTLDTSCP  DS    F                        SPF SUBS POINTER\n         ORG   TLD+X'60'\nTLDTLSP  DS    F                        ADDRESS OF LOGICAL SCREEN\n         ORG   TLD+X'90'\nTLDFUNC  DS    0BL8\nTLDFUNC1 DS    X                        TLDFUNC BYTE 1\nTLDFUNC2 DS    X                        TLDFUNC BYTE 2\nTLDHLPK  EQU   X'10'                    HELP KEY INDICATOR\nTLDRETK  EQU   X'08'                    RETURN KEY INDICATOR\nTLDFUNC3 DS    X                        TLDFUNC BYTE 3\nTLDENDK  EQU   X'80'                    END KEY INDICATOR\nTLDFUNC4 DS    X                        TLDFUNC BYTE 4\nTLDSCRK  EQU   X'F0'                    SCROLL KEYS\nTLDSCRUK EQU   X'80'                    SCROLL UP\nTLDSCRDK EQU   X'40'                    SCROLL DOWN\nTLDSCRLK EQU   X'20'                    SCROLL LEFT\nTLDSCRRK EQU   X'10'                    SCROLL RIGHT\nTLDFNDK  EQU   X'08'                    REPEAT FIND\nTLDCHGK  EQU   X'04'                    REPEAT CHANGE\nTLDFUNC5 DS    X                        TLDFUNC BYTE 5\nTLDFUNC6 DS    X                        TLDFUNC BYTE 6\nTLDFUNC7 DS    X                        TLDFUNC BYTE 7\nTLDFUNC8 DS    X                        TLDFUNC BYTE 8\nTLDENBL  DS    0XL8                     ENABLE FUNCTIONS BITS\nTLDENBL1 DS    X                        TLDENBL BYTE 1\nTLDENBL2 DS    X                        TLDENBL BYTE 1\nTLDCMDE  EQU   X'40'                    PRIMARY COMMAND\nTLDHLPE  EQU   X'10'                    HELP\nTLDRETE  EQU   X'08'                    RETURN\nTLDENBL3 DS    X                        TLDENBL BYTE 2\nTLDENDE  EQU   X'80'                    END\nTLDENTE  EQU   X'40'                    ENTER\nTLDENBL4 DS    X                        TLDENBL BYTE 3\nTLDSCRUE EQU   X'80'                    SCROLL UP\nTLDSCRDE EQU   X'40'                    SCROLL DOWN\nTLDSCRLE EQU   X'20'                    SCROLL LEFT\nTLDSCRRE EQU   X'10'                    SCROLL RIGHT\nTLDFNDE  EQU   X'08'                    REPEAT FIND\nTLDCHGE  EQU   X'04'                    REPEAT CHANGE\nTLDENBL5 DS    X                        TLDENBL BYTE 4\nTLDENBL6 DS    X                        TLDENBL BYTE 5\nTLDENBL7 DS    X                        TLDENBL BYTE 6\nTLDENBL8 DS    X                        TLDENBL BYTE 8\n         DS    F                        ?\nTLDCSR   DS    F                        RELATIVE CURSOR POSITION\nTLDMDTCT DS    F                        MODIFIED DATA TAG COUNT\n         DS    F                        ?\nTLDTLSSZ DS    F                        MAX LOGICAL SCREEN SIZE (BYTES)\nTLDTLSLN DS    F                        MAXIMUM SCREEN LINES\nTLDTLSWD DS    F                        MAXIMUM SCREEN LINE WIDTH\nTLDCLSLN DS    F                        CURRENT SCREEN LINES\nTLDCLSWD DS    F                        CURRENT SCREEN LINE WIDTH\nTLDCPSLN DS    F                        TLS IN TPS LINES (CUR # OF LNS)\nTLDCPSWD DS    F                        TLS IN TPS LINE WIDTH\nTLDMPSLN DS    F                        MAX LINES\nTLDMPSWD DS    F                        MAX LINE WIDTH\n         ORG   TLD+X'0F4'\nTLDPIFBP DS    A                        PRIM INPUT FIELD ATTR BYTE ADDR\nTLDPIFSZ DS    F                        SIZE OF PRIMARY INPUT FIELD\nTLDSC    DS    0CL56                    SCROLL INTERFACE AREA\nTLDSCBP  DS    A                        PTR TO SCROLL AMOUNT ATTR BYTE\nTLDSCKEY DS    CL8                      TKV SCROLL KEYWORD FOR SAVING\nTLDSCMLN DS    F                        TOP MARGIN LENGTH\nTLDSCMWD DS    F                        LEFT MARGIN WIDTH\nTLDSCLPU DS    F                        LINES PER SCROLL UNIT\nTLDSCREQ DS    X                        REQUEST BITS\nTLDSCTLS EQU   X'80'                    PROCESS TLS FIELDS\nTLDSCPPP EQU   X'40'                    PRE & POST PROCESS\nTLDSCRAN EQU   X'20'                    REANALYZE SCROLL\n         DS    XL3                      ?\nTLDSCTYP DS    B                        SCROLL TYPE FLAGS\nTLDSCMAX EQU   X'80'                    MAX REQUEST\nTLDSCPAG EQU   X'40'                    PAGE REQUEST\nTLDSCDAT EQU   X'20'                    DATA REQUEST\nTLDSCHAF EQU   X'10'                    HALF REQUEST\nTLDSCCSR EQU   X'08'                    CSR REQUEST\nTLDSCNUM EQU   X'04'                    NUMBER REQUEST\nTLDSCST  DS    B                        STATUS FLAGS\nTLDSCERR EQU   X'80'                    SCROLL AMOUNT ERROR\n         DS    XL6                      ?\nTLDSCWD  DS    F                        WIDTH OF PG (IN UNITS)\nTLDSCAMT DS    F                        SCROLL AMOUNT (IN UNITS)\n         ORG   TLD+X'168'\nTLDHELP  DS    CL8                      HELP MENU NAME\n         SPACE 5\nTSC      DSECT                          SPF 1.0 COMMON SUBROUTINE ARRAY\n         ORG   TSC+X'088'\nTSCCDIP  DS    A                        CMN DSPLY ROUTINE ADDR (CDISPL)\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TLS": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x84!?\\x00\\x84!?!&\\x00\\x0f\\x00\\x0f\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-31T00:00:00", "modifydate": "1984-07-31T21:26:20", "lines": 15, "newlines": 15, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         TLS\n*  SPF/ISPF SCREEN ATTRIBUTE BYTE EQU'S\nTLSON    EQU   X'04'           1DE4     OUTPUT NON-DISPLAY\n.*                             1DE4 S/B OUTPUT DETECTABLE\nTLSOL    EQU   X'05'           1D60     OUTPUT LOW INTENSITY\nTLSOH    EQU   X'07'           1DE8     OUTPUT HIGH INTENSITY\nTLSIAN   EQU   X'10'           1D4C     INPUT ASIS NON-DISPLAY\nTLSIAL   EQU   X'11'           1D40     INPUT ASIS LOW INTENSITY\nTLSIAH   EQU   X'13'           1DC8     INPUT ASIS HIGH INTENSITY\nTLSIBN   EQU   X'1C'           1D4C     INPUT CAPS NON-DISPLAY    BLANK\nTLSIBL   EQU   X'1D'           1D40     INPUT CAPS LOW INTENSITY   PAD\nTLSIBH   EQU   X'1F'           1DC8     INPUT CAPS HIGH INTENSITY  ...\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMPMAC": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00 \\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x01\\x02\\x01\\x02\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:20", "lines": 258, "newlines": 258, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&LBL     TMPMAC &CMD=(0,0),&CBUF=,&PGM=,&PARM=,                        X\n               &DCB=0,&TASKLIB=0,&CMDLIB=YES,                          X\n               &EXEC=YES,&STACK=YES,&SCMD=NO,&STAX=YES,&CMDFAIL=MSG,   X\n               &MF=I\n.*.\n.*$MACRO=TMPMAC     DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO GENERATES A PARAMETER LIST FOR THE TMPSRV MODULE, AND\n.*       LINKS TO TMPSRV.\n.*.\n         LCLA  &F,&F1,&A\n         LCLC  &C\n         LCLB  &CBF,&CBR,&CS,&CR1,&CR2,&PGF,&PGS,&PGR\n         LCLB  &PRF,&PRS,&PRR,&HF,&HS,&HR\n         LCLB  &DCBR,&DCB0,&TSKR\n         LCLB  &STRS\n         LCLB  &MFL,&MFI,&MFB,&MFE\n         AIF   (('&LBL' EQ '') OR ('&MF' EQ 'L') ).L\n&LBL     DS    0H\n.L       AIF   ('&CBUF' EQ '').L1\n&CBF     SETB  1\n&F       SETA  X'80'\n&C       SETC  '&CBUF'(1,1)\n         AIF   ('&C' NE '(').L8\n&CBR     SETB  1\n         AGO   .L8\n.L1      ANOP\n&C       SETC  '&CMD(1)'(1,1)\n         AIF   ('&C' NE '''').L2\n&CS      SETB  1\n&STRS    SETB  1\n         AGO   .L4\n.L2      AIF   ('&C' NE '(').L3\n&CR1     SETB  1\n.L3      ANOP\n&C       SETC  '&CMD(2)'(1,1)\n         AIF   ('&C' NE '(').L4\n&CR2     SETB  1\n.L4      AIF   ('&PGM' EQ '').L7A\n&PGF     SETB  1\n&F1      SETA  X'80'\n&C       SETC  '&PGM'(1,1)\n         AIF   ('&C' NE '''').L5\n&PGS     SETB  1\n&STRS    SETB  1\n         AGO   .L6\n.L5      AIF   ('&C' NE '(').L6\n&PGR     SETB  1\n.L6      AIF   ('&PARM' EQ '').L8\n&PRF     SETB  1\n&C       SETC  '&PARM'(1,1)\n         AIF   ('&C' NE '''').L7\n&PRS     SETB  1\n&STRS    SETB  1\n         AGO   .L8\n.L7      AIF   ('&C' NE '(').L8\n&PRR     SETB  1\n         AGO   .L8\n.L7A     AIF   ('&CMD(1)' NE '0').L8\n         AIF   ('&MF(1)' EQ 'L').L8\n         MNOTE 8,'CMD, CBUF, OR PGM MUST BE SPECIFIED'\n         MEXIT\n.L8      AIF   ('&DCB' NE 'ENV').L8A\n&F       SETA  &F+X'40'\n&DCB0    SETB  1\n         AGO   .L9\n.L8A     AIF   ('&DCB' NE '0').L8B\n&DCB0    SETB  1\n         AGO   .L9\n.L8B     ANOP\n&C       SETC  '&DCB'(1,1)\n         AIF   ('&C' NE '(').L9\n&DCBR    SETB  1\n.L9      ANOP\n&C       SETC  '&TASKLIB'(1,1)\n         AIF   ('&C' NE '(').L10\n&TSKR    SETB  1\n.L10     AIF   ('&CMDLIB' NE 'NO').L11\n&F       SETA  &F+X'20'\n.L11     AIF   ('&EXEC'  NE 'NO').L12\n&F       SETA  &F+X'10'\n.L12     AIF   ('&STACK' NE 'NO').L13\n&F       SETA  &F+X'02'\n.L13     AIF   ('&SCMD' EQ 'NO').L14\n&F       SETA  &F+X'08'\n.L14     AIF   ('&STAX' NE 'NO').L15\n&F       SETA  &F+X'04'\n         AGO   .L17\n.L15     AIF   ('&STAX' EQ 'YES').L17\n&HF      SETB  1\n&C       SETC  '&STAX'(1,1)\n         AIF   ('&C' NE '''').L16\n&HS      SETB  1\n&STRS    SETB  1\n         AGO   .L17\n.L16     AIF   ('&C' NE '(').L17\n&HR      SETB  1\n.L17     AIF   ('&CMDFAIL' NE 'NOMSG').L18\n&F       SETA  &F+X'01'\n.L18     AIF   ('&MF' NE 'L').L19\n&MFL     SETB  1\n         AGO   .L23\n.L19     AIF   ('&MF' NE 'I').L20\n&MFI     SETB  1\n         AGO   .L23\n.L20     ANOP\n&C       SETC  '&MF(1)'\n         AIF   ('&C' NE 'B').L21\n&MFB     SETB  1\n         AGO   .L23\n.L21     AIF   ('&C' NE 'E').L22\n&MFE     SETB  1\n         AGO   .L23\n.L22     MNOTE 8,'UNRECOGNIZABE MF'\n         MEXIT\n.L23     AIF   (NOT &MFL).L37\n         AIF   (NOT (&CBR OR &CR1 OR &CR2 OR &PGR OR &PRR OR &DCBR OR  X\n               &TSKR)).L24\n         MNOTE 8,'R FORM NOT ALOWED WITH MF=L'\n         MEXIT\n.L24     ANOP\n&LBL     DS    0F                       FULLWORD ALIGNMENT\n         DC    AL1(&F)                  FLAGS\n         AIF   (NOT &DCB0).L25\n         DC    AL3(0)                   DCB ADDR\n         AGO   .L26\n.L25     DC    AL3(&DCB)                DCB ADDR\n.L26     AIF   (&PGF).L29\n         AIF   (&CBF).L28\n         AIF   (&CS).L27\n         DC    AL1(&CMD(2))             CMD LNTH\n         DC    AL3(&CMD(1))             CMD ADDR\n         AGO   .L31\n.L27     DC    AL1(L'TMPC&SYSNDX)       CMD LNTH\n         DC    AL3(TMPC&SYSNDX)         CMD ADDR\n         AGO   .L31\n.L28     DC    AL4(&CBUF)               PTR TO CBUF\n         AGO   .L31\n.L29     AIF   (&PGS).L30\n         DC    AL4(&PGM)                PGM NAME ADDR\n         AGO   .L31\n.L30     DC    AL4(TMPG&SYSNDX)         PGM NAME ADDR\n.L31     DC    AL1(&F1)                 FLAGS\n         DC    AL3(&TASKLIB)            TASKLIB\n         AIF   (&PRF).L32\n         DC    AL4(0)                   RETURN/COMPLETION CODE\n         AGO   .L34\n.L32     AIF   (&PRS).L33\n         DC    AL4(&PARM)               PARM PTR/RETURN-COMPLETION CODE\n         AGO   .L34\n.L33     DC    AL4(TMPR&SYSNDX)         PARM PTR/RETURN-COMPLETION CODE\n.L34     AIF   (&HF).L35\n         DC    AL4(0)                   UNUSED HERALD FIELD\n         AGO   .L38\n.L35     AIF   (&HS).L36\n         DC    AL4(&STAX)               HERALD/REPLY\n         AGO   .L38\n.L36     DC    AL4(TMPH&SYSNDX)         HERALD/REPLY\n.L37     AIF   (NOT (&STRS OR &MFI)).L38\n         B     TMPL&SYSNDX\n.L38     AIF   (NOT &CS).L39\nTMPC&SYSNDX DC C&CMD\n.L39     AIF   (NOT &PGS).L40\nTMPG&SYSNDX DC CL8&PGM                  PGM NAME\n.L40     AIF   (NOT &PRS).L41\n&A       SETA  K'&PARM\n&A       SETA  &A-2\nTMPR&SYSNDX DC 0F'0',XL1'80',AL3(TMPR&SYSNDX+6)\n         DC    F'&A'\n         DC    C&PARM\n.L41     AIF   (NOT &HS).L42\n&A       SETA  K'&STAX\n&A       SETA  &A-2\nTMPH&SYSNDX DC H'&A',C&STAX\n.L42     AIF   (NOT &MFL).L43\n         MEXIT\n.L43     AIF   (NOT &MFI).L44\nTMPT&SYSNDX DC 5F'0'                    CMD BLK FOR TMPSRV\nTMPL&SYSNDX LA 1,TMPT&SYSNDX GET TBL ADDR\n         AGO   .L45A\n.L44     AIF   (NOT &STRS).L45\nTMPL&SYSNDX DS 0H\n.L45     AIF   ('&MF(2)' EQ '(1)').L45A\n         LA    1,&MF(2)                 GET TBL ADDR\n.L45A    ANOP\n         XC    0(20,1),0(1)             CLEAR TBL\n.L46     AIF   (&DCBR).L47\n         AIF   (&DCB0).L48\n         LA    0,&DCB                   GET DCB ADDR\n         ST    0,0(1)                   STORE IN TBL\n         AGO   .L48\n.L47     ST    &DCB(1),0(1)             STORE DCB ADDR\n.L48     AIF   ('&F' EQ '0').L49\n         MVI   0(1),&F                  MOVE IN FLAGS\n.L49     AIF   (&PGF).L54\n         AIF   (&CBF).L53A\n         AIF   (&CS).L53\n         AIF   (&CR1).L50\n         LA    0,&CMD(1)                GET CMD ADDR\n         ST    0,4(1)                   STORE IN LST\n         AGO   .L51\n.L50     ST    &CMD(1),4(1)\n.L51     AIF   (&CR2).L52\n         MVI   4(1),&CMD(2)             MOVE IN LNTH\n         AGO   .L57\n.L52     STC   &CMD(2),4(1)             STORE CMD LNTH\n         AGO   .L57\n.L53     LA    0,TMPC&SYSNDX            GET CMD ADDR\n         ST    0,4(1)                   STORE IN TBL\n         MVI   4(1),L'TMPC&SYSNDX       MOVE IN LNTH\n         AGO   .L57\n.L53A    AIF   (&CBR).L53B\n         LA    0,&CBUF                  GET CBUF ADDR\n         ST    0,4(1)                   STORE IN TBL\n         AGO   .L57\n.L53B    ST    &CBUF(1),4(1)            STORE CBUF ADDR\n         AGO   .L57\n.L54     AIF   (&PGS).L56\n         AIF   (&PGR).L55\n         LA    0,&PGM                   GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n         AGO   .L57\n.L55     ST    &PGM(1),4(1)             STORE PGM NAME ADDR\n         AGO   .L57\n.L56     LA    0,TMPG&SYSNDX            GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n.L57     AIF   ('&TASKLIB' EQ '0').L59\n         AIF   (&TSKR).L58\n         LA    0,&TASKLIB               GET ADDR OF TSK DCB\n         ST    0,8(1)                   STORE IN TAB\n         AGO   .L59\n.L58     ST    &TASKLIB(1),8(1)         STORE TSK DCB ADDR\n.L59     AIF   ('&F1' EQ '0').L60\n         MVI   8(1),&F1                 MOVE IN FLGS\n.L60     AIF   (NOT &PRF).L63\n         AIF   (&PRS).L62\n         AIF   (&PRR).L61\n         L     0,&PARM                  GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n         AGO   .L63\n.L61     ST    &PARM(1),12(1)           ST PRM ADDR IN TABLE\n         AGO   .L63\n.L62     LA    0,TMPR&SYSNDX            GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n.L63     AIF   (NOT &HF).L67\n         AIF   (&HS).L65\n         AIF   (&HR).L64\n         LA    0,&STAX                  GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TABLE\n         AGO   .L67\n.L64     ST    &STAX(1),16(1)           STORE HERALD ADDR\n         AGO   .L67\n.L65     LA    0,TMPH&SYSNDX            GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TBL\n.L67     AIF   (&MFB).L68\n         LINK  EP=TMPSRV\n.L68     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TODAY": {"ttr": 5903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00 \\x00\\x80\\x01o\\x01\\x00\\x00O\\x141\\x00Y\\x00v\\x003\\xe2\\xc4\\xd4@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "2000-01-04T14:31:20", "lines": 89, "newlines": 118, "modlines": 51, "user": "SDM"}, "text": "         MACRO\n&NFS     TODAY &LOC,&MONTHS=MONTHS,&DAYS=DAYS,&WORK=DWD,               $\n               &PUNCT=YES,&WEEKDAY=,&TIME=\n.*.\n.*$MACRO=TODAY      DATE=06/23/78       SOURCE=LDW\n.*\n.* HISTORY:\n.*    04Jan00 SDM  Change assumed century digits to 20yy (was 19yy).\n.*\n.*  THIS MACRO WILL FORMAT THE DATE AND TIME, INCLUDING COMPUTING THE\n.*       DAY OF THE WEEK.\n.*.\n         LCLC  &LQ,&IHBNX\n&LQ      SETC  'L'''\n&LQ      SETC  '&LQ&DAYS'\n&IHBNX   SETC  'IHB&SYSNDX'\n&NFS     L     R1,16                    -> CVT\n         MVI   &WORK+7,X'0F'            Ensure valid packed sign\n         MVO   &WORK,57(1,R1)           Format YYF in work area\n         CVB   R0,&WORK                 Convert YY to binary\n         MVC   &LOC+8(2),=C'20'         Format date century\n         UNPK  &LOC+10(2),&WORK         Format YY to date\n         ZAP   &WORK,58(2,R1)           COPY DDDF\n         OI    &WORK+7,X'0F'            Prepare sign for UNPK\n         CVB   R1,&WORK                 Convert DDD to binary\n         MVC   &LOC+15(2),&LOC+10       Move YY to julian date\n         UNPK  &LOC+18(3),&WORK         Format DDD to julian date\n         AIF   ('&PUNCT' NE 'YES').NOP1\n         MVI   &LOC+14,C'('\n         MVI   &LOC+17,C'.'\n         MVI   &LOC+21,C')'\n.NOP1    MVI   &MONTHS+7,28             Assume Feb has 28 days\n         STC   R0,&WORK                 Binary YY\n         TM    &WORK,X'03'              Is it divisible by 4?\n         BNZ   &IHBNX.B                 No, common year\n         MVI   &MONTHS+7,29             FEB HAS 29 DAYS THIS YEAR\n         SPACE 1\n&IHBNX.B LA    R15,&MONTHS              POINT TO TABLE\n         LR    R14,R1                   Get DDD for loop\n         SPACE 1\n&IHBNX.C SH    R14,0(,R15)              SUB NUMBER OF DAYS THIS MONTH\n         BNP   &IHBNX.D                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     &IHBNX.C                 KEEP LOOKING\n         SPACE 1\n&IHBNX.D MVC   &LOC.(3),2(R15)          MOVE NAME OF MONTH\n         AH    R14,0(,R15)              GET BACK CORRECT RESIDUAL\n         CVD   R14,&WORK\n         UNPK  &LOC+4(2),&WORK          DAY OF MONTH\n         OI    &LOC+5,C'0'              FIX SIGN\n         AIF   ('&PUNCT' NE 'YES').NOP2\n         MVI   &LOC+6,C','\n.NOP2    AIF   ('&WEEKDAY' EQ '').NODAY\n.*\n.* First day of the century (January 1, 2000):\n.*    I=6 (Saturday)\n.* Number of previous leap years:\n.*    J=(YY+3)/4     (integer divide)\n.*    00=0, 01,02,03,04=1, 05,06,07,08=2, 09,10,11,12=3, etc.\n.* Number of previous years -- weekday slide, one day per year\n.*    YY\n.* Z=MOD(I+J+YY+DDD-1,7)\n.* Where Z=day of week, 0=Sunday,... 6=Saturday\n.*\n         SPACE 2\n.* J\n         LR    R15,R0                   Get YY for divide\n         LA    R15,3(,R15)              YY+3\n         XR    R14,R14                  Clear for divide\n         D     R14,=F'4'                J=(YY+3)/4\n         AR    R15,R0                   J+YY\n.* DDD\n         LA    R15,6-1(R1,R15)          I+J+YY+DDD-1\n.* Z\n         XR    R14,R14                  Clear for divide\n         D     R14,=F'7'                Z=MOD(I+J+YY+DDD-1,7)\n         MH    R14,=Y(&LQ)              OFFSET INTO TABLE\n         LA    R14,&DAYS.(R14)          POINT TO DAY IN TABLE\n         MVC   &WEEKDAY.(&LQ),0(R14)    DAY TO OUTPUT LOCATION\n.NODAY   AIF   ('&TIME' EQ '').NOTIME\n         SPACE 2\n*        TIME  DEC                      GET TIME\n         TIME  DEC                      GET TIME\n         ST    R0,&WORK                 PUT TIME INTO WORK AREA\n         OI    &WORK+3,X'0F'            FIX THE SIGN\n         MVC   &TIME.(9),=X'4021207A20207A2020'      ' DD:DD:DD'\n         ED    &TIME.(9),&WORK\n.NOTIME  SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TODAY@": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00 \\x00\\x80\\x01o\\x00\\x80\\x01o\\x122\\x00v\\x00v\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-01-16T12:32:20", "lines": 118, "newlines": 118, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&NFS     TODAY &LOC,&MONTHS=MONTHS,&DAYS=DAYS,&WORK=DWD,               $\n               &PUNCT=YES,&WEEKDAY=,&TIME=,                            $\n               &F15==F'15',&F6==F'6',&H2==H'2',&H12==H'12',            $\n               &H10==H'10',&H13==H'13',&F5==F'5',&H34==H'34',          $\n               &F7==F'7'\n.*.\n.*$MACRO=TODAY      DATE=06/23/78       SOURCE=LDW\n.*\n.*  THIS MACRO WILL FORMAT THE DATE AND TIME, INCLUDING COMPUTING THE\n.*       DAY OF THE WEEK.\n.*.\n         LCLC  &LQ,&IHBNX\n&LQ      SETC  'L'''\n&LQ      SETC  '&LQ&DAYS'\n&IHBNX   SETC  'IHB&SYSNDX'\n&NFS     L     R1,16                    -> CVT\n         UNPK  &LOC+16(5),57(3,R1)      UNPK THE DATE\n         OI    &LOC+20,C'0'             FIX THE SIGN\n         MVC   &LOC+15(2),&LOC+16       MOVE THE YEAR OVER\n         MVI   &LOC+17,C'.'             PUT IN THE DOT\n         AIF   ('&PUNCT' NE 'YES').NOP1\n         MVI   &LOC+14,C'('\n         MVI   &LOC+21,C')'\n.NOP1    TM    57(R1),X'01'             LEAP YEAR?\n         BO    &IHBNX.N                 NO (ODD YEAR) - NOT LEAP\n         TM    57(R1),X'12'             DIVISIBLE BY 4?\n         BM    &IHBNX.N                 NO - NOT LEAP YEAR\n         MVI   &MONTHS+7,29             FEB HAS 29 DAYS THIS YEAR\n         SPACE 1\n&IHBNX.N MVC   &WORK+6(2),58(R1)        COPY DDDF\n         XC    &WORK.(6),&WORK          CLEAR BEGINNING\n         CVB   R0,&WORK                 GET DAY OF YEAR IN BINARY\n         LA    R15,&MONTHS              POINT TO TABLE\n         SPACE 1\n&IHBNX.L SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   &IHBNX.H                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     &IHBNX.L                 KEEP LOOKING\n         SPACE 1\n&IHBNX.H MVC   &LOC.(3),2(R15)          MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,&WORK\n         UNPK  &LOC+4(2),&WORK+6(2)     DAY OF MONTH\n         OI    &LOC+5,C'0'              FIX SIGN\n         MVC   &LOC+10(2),&LOC+15       MOVE IN YEAR\n         AIF   ('&PUNCT' NE 'YES').NOP2\n         MVC   &LOC+6(4),=C', 19'\n.NOP2    AIF   ('&WEEKDAY' EQ '').NODAY\n         ST    R0,&WORK                 SAVE DAY OF MONTH\n.*\n.* MONTH=MOD(MONTH+9,12)+1\n.* IF (MONTH=11 | MONTH=12) YEAR=YEAR-1  ==> IF MONTH > 10 YEAR=YEAR-1\n.* A=(13*MONTH-1)/5\n.* B=YEAR/4\n.* C=CENTURY/4\n.* D=A+B+C+DAY+YEAR-2*CENTURY\n.* Z=MOD(D,7)+1\n.* WHERE Z=DAY OF WEEK, 1=SUNDAY,... 7=SATURDAY\n.*\n.* THIS MACRO ASSUMES 1900-1999... IE, CENTURY=19\n         SPACE 2\n         LA    R14,&MONTHS-6\n         SR    R15,R14                  GET MONTH # * 6\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F6                  GET MONTH #\n* MONTH=MOD(MONTH+9,12)+1\n         SH    R15,&H2\n         BP    *+8\n         AH    R15,&H12\n.***     XR    R14,R14                  CLEAR FOR DIVIDE\n.***     LA    R15,9(,R15)              MONTH+9\n.***     D     R14,=F'12'               DIVIDE BY 12\n.***     LA    R14,1(,R14)\n         SPACE 1\n         IC    R0,57(,R1)               GET YEAR\n         SRL   R0,4\n         N     R0,&F15\n         MH    R0,&H10\n         IC    R1,57(,R1)\n         N     R1,&F15\n         AR    R1,R0                    = YEAR IN BINARY\n         SPACE 1\n         CH    R15,&H10                 MONTH = 11 OR 12 ?\n         BNH   *+6                      NO - SKIP\n         BCTR  R1,0                     -1 FROM YEAR\n* A=(13*MONTH-1)/5\n         MH    R15,&H13                 MONTH * 13\n         BCTR  R15,0                    -1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F5                  ALL OVER 5 (R5=A)\n* B=YEAR/4\n         LR    R0,R1                    COPY YEAR\n         SRL   R0,2                     YEAR/4\n         AR    R15,R0                   D=A+B SO FAR\n* C=CENTURY/4 = 19/4 = 4                CENTURY*2 = 19*2 = 38\n* +C-2*CENTURY = -34\n         SH    R15,&H34                 D=A+B+C-2*CENT NOW\n* D=A+B+C+DAY+YEAR-2*CENTURY\n         A     R15,&WORK                ADD DAY\n         AR    R15,R1                   ADD YEAR\n* Z=MOD(D,7)+1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F7                  GET MOD(D,7) IN R4=Z\n         MH    R14,=Y(&LQ)              OFFSET INTO TABLE\n         LA    R14,&DAYS.(R14)          POINT TO DAY IN TABLE\n         MVC   &WEEKDAY.(&LQ),0(R14)    DAY TO OUTPUT LOCATION\n*  SEEMS LIKE A LOT, BUT BETTER THAN AN SVC CALL, AND TRANSPORTABLE!!\n.NODAY   AIF   ('&TIME' EQ '').NOTIME\n         SPACE 2\n*        TIME  DEC                      GET TIME\n         TIME  DEC                      GET TIME\n         ST    R0,&WORK                 PUT TIME INTO WORK AREA\n         OI    &WORK+3,X'0F'            FIX THE SIGN\n         MVC   &TIME.(9),=X'4021207A20207A2020'      ' DD:DD:DD'\n         ED    &TIME.(9),&WORK\n.NOTIME  SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TPUTX": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x01o\\x00\\x80\\x03/\\x19\\x05\\x00u\\x00v\\x00\\x17\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1980-02-01T19:05:20", "lines": 117, "newlines": 118, "modlines": 23, "user": "LDW"}, "text": "         MACRO\n&NAME    TPUTX &BFF,&SIZE,&EDIT,&WAIT,&HOLD,&BRKI,&PRTY,&TJID=,        *\n               &TJIDLOC=,&MF=I\n.*.\n.*$MACRO=TPUTX      DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO IS A REPLACEMENT FOR THE IBM 'TPUT' MACRO.  'TPUTX'\n.*       GENERATE BETTER CODE, AND ALLOWS OPERANDS VALID FOR 'LA'\n.*       INSTRUCTION, NOT JUST OPERANDS VALID FOR 'DC A(_)'.\n.*.\n         GBLA  &GETLENL\n         GBLC  &$NFS\n         LCLA  &K,&I,&BITS\n         LCLA  &N,&MAXLEN\n         LCLB  &ED,&WA,&HO,&BR,&PR\n&$NFS    SETC  '&NAME'\n&K       SETA  3                        NORMAL PLACE TO START SCAN\n         AIF   ('&BFF' NE '').HAVEBFF\n         MNOTE 8,'*** MESSAGE OR MESSAGE ADDR OMITTED.'\n         MEXIT\n.HAVEBFF AIF   ('&BFF'(1,1) NE '''').NOTQ\n&K       SETA  K'&BFF-2                 LENGTH OF CHAR STRING\n&N       SETA  2                        START AT FIRST TEXT CHAR\n&MAXLEN  SETA  &K                       SET LENGTH OF CHAR STRING\n.QLOOP   AIF   ('&BFF'(&N,2) NE '''''' AND '&BFF'(&N,2) NE '&&').QCONT\n&K       SETA  &K-1                     ACCOUNT FOR DBLE CHAR\n&N       SETA  &N+1                     FUDGE PAST\n.QCONT   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE &MAXLEN).QLOOP\n&$NFS    LA    0,&K                     GET STRING LENGTH\n&$NFS    SETC  ''                       NAME FIELD SYMBOL DONE\n         LA    1,=C&BFF\n&K       SETA  2                        ONLY ONE OPERAND FOR STRING\n         AGO   .GOTPTRS\n.NOTQ    ANOP\n.*&NFS   ICTINNRA &BFF,&SIZE            LOAD BUFFER PTR AND LENGTH\n&$NFS    $RXR  ,&BFF,1                  LOAD BUFFER PTR\n         $RXR  ,&SIZE,0                 LOAD BUFFER LENGTH\n.GOTPTRS AIF   ('&TJID' EQ '' AND '&TJIDLOC' EQ '').NOTJID\n         AIF   ('&TJID' EQ '').LOADTJ\n.*       ICTINNRA ,,&TJID               GET TJID\n&$NFS    $RXR  ,&TJID,14                GET TJID\n         AGO   .ORTJ\n.*LOADTJ ICTINNRA ,,&TJIDLOC            INDIRECT TJID\n.LOADTJ  ANOP\n&$NFS    $RXR  ,&TJIDLOC,15             INDIRECT TJID\n         LH    15,0(,15)                LOAD TJID\n.ORTJ    SLL   15,16                    TJID INTO TOP HALF\n         OR    0,15                     ADD TO PARM REG 0\n.NOTJID  ANOP\n&I       SETA  &K                       FIRST OPERAND TO CHECK\n.LOOP    AIF   (&I GT N'&SYSLIST).SETOP IF ALL ARE PROCESSED, JUMP OUT\n         AIF   ('&SYSLIST(&I)' EQ 'EDIT').EDIT\n         AIF   ('&SYSLIST(&I)' EQ 'ASIS').ASIS\n         AIF   ('&SYSLIST(&I)' EQ 'CONTROL').CONTROL\n         AIF   ('&SYSLIST(&I)' EQ 'FULLSCR').FULLS\n         AIF   ('&SYSLIST(&I)' EQ 'WAIT').WAIT\n         AIF   ('&SYSLIST(&I)' EQ 'NOWAIT').NOWAIT\n         AIF   ('&SYSLIST(&I)' EQ 'NOHOLD').NOHOLD\n         AIF   ('&SYSLIST(&I)' EQ 'HOLD').HOLD\n         AIF   ('&SYSLIST(&I)' EQ 'NOBREAK').NOBREAK\n         AIF   ('&SYSLIST(&I)' EQ 'BREAKIN').BREAKIN\n         AIF   ('&SYSLIST(&I)' EQ 'HIGHP').HIGHP\n         AIF   ('&SYSLIST(&I)' EQ 'LOWP').LOWP\n         AIF   ('&SYSLIST(&I)' EQ 'R').NEXTI\n         AIF   ('&SYSLIST(&I)'(1,4) EQ 'TJID').SETOP\n         MNOTE 8,'INVALID OPTION &SYSLIST(&I) - IGNORED'\n.NEXTI   ANOP\n&I       SETA  &I+1                     INCREMENT COUNTER\n         AGO   .LOOP                    GET NEXT OPTION IF ANY\n.MUTEX   MNOTE 8,'MUTUALLY EXCLUSIVE KEYWORDS'\n         AGO   .NEXTI\n.FULLS   ANOP\n&BITS    SETA  &BITS+3                  SET ASIS+CONTROL FOR FULL SCRN\n         AGO   .EDIT                    MAKE IT MUTUALLY EXCLUSIVE\n.ASIS    ANOP\n&BITS    SETA  &BITS+1                  SET ASIS OPTION\n         AGO   .EDIT                    MAKE IT MUTUALLY EXCLUSIVE\n.CONTROL ANOP\n&BITS    SETA  &BITS+2                  SET CONTROL OPTION\n.EDIT    AIF   (&ED).MUTEX\n&ED      SETB  1                        EDIT,ASIS OR CONTROL SET\n         AGO   .NEXTI\n.NOWAIT  ANOP\n&BITS    SETA  &BITS+16                 SET NOWAIT OPTION\n.WAIT    AIF   (&WA).MUTEX\n&WA      SETB  1                        WAIT OR NOWAIT SET\n         AGO   .NEXTI\n.HOLD    ANOP\n&BITS    SETA  &BITS+8                  SET HOLD OPTION\n.NOHOLD  AIF   (&HO).MUTEX\n&HO      SETB  1                        HOLD OR NOHOLD SET\n         AGO   .NEXTI\n.BREAKIN ANOP\n&BITS    SETA  &BITS+4                  SET BREAKIN OPTION\n.NOBREAK AIF   (&BR).MUTEX\n&BR      SETB  1                        BREAKIN OR NOBREAK SET\n         AGO   .NEXTI\n.LOWP    ANOP\n&BITS    SETA  &BITS+X'20'              FORCE LOW PRTY (EVEN IF KEY0)\n.HIGHP   AIF   (&PR).MUTEX\n&PR      SETB  1                        HIGHP OR LOWP SET\n         AGO   .NEXTI\n.SETOP   AIF   ('&BFF'(1,1) NE '(').NOTREG I MUST HAVE DONE LA\n&$NFS    LA    1,0(,1)                  MAKE HIGH BYTE 0\n.NOTREG  AIF   (&BITS EQ 0).CALL\n         LA    15,&BITS                 GET OPTIONS\n         SLL   15,24                    SHIFT TO TOP BYTE\n         OR    1,15                     OR IN OPTIONS\n.CALL    AIF   ('&MF' EQ 'I' OR '&MF' EQ 'B').CHK2\n         MNOTE 4,'*** INVALID MF OPTION'\n         MEXIT\n.CHK2    AIF   ('&MF' EQ 'I').CALLIT\n         MEXIT\n.CALLIT  SVC   93                       ISSUE TPUT SVC\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TRMIO": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x03_\\x00\\x80 \\x7f\\x11P\\x00^\\x00Z\\x00\\x19\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-02-04T00:00:00", "modifydate": "1980-07-25T11:50:20", "lines": 94, "newlines": 90, "modlines": 25, "user": "LDW"}, "text": "         MACRO\n&NAME    TRMIO &BLOCK,&TYPE,&FORMAT=,&IMAGE=,&RESTORE=,&RESET=,&BEEP=, X\n               &CURSOR=,&WAIT=YES\n.*.\n.*$MACRO=0          DATE=09/00/79       SOURCE=SDC\n.*\n.*  THIS MACRO IS PART OF DCMS.  IT IS USED TO CALL THE DCMS TERMINAL\n.*  I/O ROUTINES.\n.*\n.*  UPDATES:\n.*    07-25-80 LDW  HANDLE FORMAT=(REG) AND IMAGE=(REG)\n.*    06-25-80 LDW  PICK UP ADDRESS IN IOCBATIO INSTEAD OF =V(TERMIO)\n.*.\n         LCLB  &M(8),&A(8)\n         LCLC  &R\n         AIF   (T'&BLOCK NE 'O').INITOK\n         MNOTE 8,' FIRST OPERAND MISSING'\n         MEXIT\n.INITOK  ANOP\n&NAME    IHBINNRA &BLOCK\n         AIF   (T'&FORMAT EQ 'O').NOF\n         AIF   ('&FORMAT'(1,1) EQ '(').REGFORM\n         LA    0,&FORMAT\n         ST    0,0(,1)                  SET NEW FORMAT\n         AGO   .NOF\n.REGFORM ST    &FORMAT(1),0(,1)         SET NEW FORMAT\n.NOF     AIF   (T'&IMAGE EQ 'O').NOI\n         AIF   ('&IMAGE'(1,1) EQ '(').REGIMG\n         LA    0,&IMAGE\n         ST    0,4(,1)                  SET NEW IMAGE AREA\n         AGO   .NOI\n.REGIMG  ST    &IMAGE(1),4(,1)          SET NEW IMAGE AREA\n.NOI     AIF   (T'&TYPE EQ 'O' OR '&TYPE' EQ 'CONV').ETYP\n         AIF   ('&TYPE' NE 'READ').TY1\n&M(1)    SETB  1\n         AGO   .ETYP\n.TY1     AIF   ('&TYPE' NE 'WRITE').TY2\n&M(2)    SETB  1\n         AGO   .ETYP\n.TY2     AIF   ('&TYPE' NE 'WAIT').TY3\n&M(1)    SETB  1\n&M(2)    SETB  1\n         AGO   .ETYP\n.TY3     AIF   ('&TYPE' NE 'NEWFMT').TY4\n&M(1)    SETB  1\n&M(2)    SETB  1\n&M(3)    SETB  1\n         AGO   .ETYP\n.TY4     MNOTE 8,' SECOND ARGUMENT (&TYPE) INVALID, CONV ASSUMED'\n.ETYP    AIF   ('&WAIT' EQ 'YES').EWT\n         AIF   (&M(1) AND &M(2)).WAITER\n&M(3)    SETB  1\n         AIF   ('&WAIT' EQ 'NO').EWT\n         MNOTE 4,' WAIT=&WAIT ASSUMED TO MEAN WAIT=NO'\n         AGO   .EWT\n.WAITER  MNOTE 4,'WAIT=&WAIT SHOULD NOT BE CODED WITH THIS TYPE CALL'\n.EWT     AIF   (T'&CURSOR EQ 'O').ECUR\n&M(4)    SETB  1\n         AIF   ('&CURSOR'(1,1) EQ '(').REGCUR\n         LH    0,&CURSOR\n         STH   0,12(,1)                 SET NEW CURSOR POSITION\n         AGO   .ECUR\n.REGCUR  STH   &CURSOR(1),12(,1)        SET NEW CURSOR POSITION\n.ECUR    AIF   (T'&BEEP NE 'O').YBEEP\n&M(6)    SETB  1\n         AGO   .EBEEP\n.YBEEP   AIF   ('&BEEP' EQ 'NO').EBEEP\n         AIF   ('&BEEP' EQ 'YES').DOBEEP\n         MNOTE 4,' BEEP=&BEEP ASSUMED TO MEAN BEEP=YES'\n.DOBEEP  ANOP\n&A(6)    SETB  1\n.EBEEP   AIF   (T'&RESTORE NE 'O').YRST\n&M(7)    SETB  1\n         AGO   .ERST\n.YRST    AIF   ('&RESTORE' EQ 'NO').ERST\n         AIF   ('&RESTORE' NE 'YES').BRST\n&A(7)    SETB  1\n         AGO   .ERST\n.BRST    MNOTE 4,' RESTORE=&RESTORE ASSUMED TO MEAN RESTORE=NO'\n.ERST    AIF   (T'&RESET NE 'O').YRES\n&M(8)    SETB  1\n         AGO   .ERES\n.YRES    AIF   ('&RESET' EQ 'NO').ERES\n         AIF   ('&RESET' EQ 'YES').DORES\n         MNOTE 4,' RESET=&RESET ASSUMED TO MEAN RESET=NO'\n         AGO   .ERES\n.DORES   ANOP\n&A(8)    SETB  1\n.ERES    MVI   14(1),B'&M(1)&M(2)&M(3)&M(4)&M(5)&M(6)&M(7)&M(8)'  MASK\n         AIF   (&M(6) AND &M(7) AND &M(8)).CALLIO\n         MVI   15(1),B'00000&A(6)&A(7)&A(8)'       WCC\n.CALLIO  L     15,IOCBATIO\n         BALR  14,15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSCPPL": {"ttr": 6154, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x02?\\x00\\x81\\x19\\x7f\\tS\\x00\\x1a\\x00\\x14\\x00\\x08\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-01-23T00:00:00", "modifydate": "1981-07-16T09:53:20", "lines": 26, "newlines": 20, "modlines": 8, "user": "LDW"}, "text": "         MACRO\n         TSCPPL &DSECT=NO\n.*.\n.*$MACRO=TSCPPL     DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THE TSCPPL MACRO GENERATES THE SYMBOLIC NAMES FOR THE CPPL,\n.*  WITH NO DSECT CARD PRECEDING\n.*.\n         SPACE 1\n***********************************************************************\n*    THE COMMAND PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF         *\n*    ADDRESSES PASSED FROM THE TMP TO THE CP VIA REGISTER 1           *\n***********************************************************************\n         AIF   ('&DSECT' EQ 'YES').DSECT\nCPPL     DS    0A\n         AGO   .CONT\n.DSECT   ANOP\nCPPL     DSECT\n.CONT    ANOP\nCPPLCBUF DS    A                        PTR TO COMMAND BUFFER\nCPPLUPT  DS    A                        PTR TO UPT\nCPPLPSCB DS    A                        PTR TO PSCB\nCPPLECT  DS    A                        PTR TO ECT\nCPPLL    EQU   *-CPPL\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSCSPL": {"ttr": 6156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x03\\x1f\\x00\\x82)O\\x14&\\x005\\x00*\\x00\\x0c\\xe3\\xe3\\xf7\\xf0\\xf7\\xf1\\xf0@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-01-31T00:00:00", "modifydate": "1982-10-21T14:26:20", "lines": 53, "newlines": 42, "modlines": 12, "user": "TT70710"}, "text": "         MACRO\n         TSCSPL  &DSECT=NO\n.*.\n.*$MACRO=TSCSPL     DATE=04/00/79       SOURCE=UCLA\n.*\n.*  UPDATES:\n.*    10/21/82 LDW - ADD CSOAEXEC FLAG\n.*\n.*  THE TSCSPL MACRO GENERATES THE SYMBOLIC NAMES FOR THE CSPL,\n.*  WITH NO DSECT CARD PRECEDING\n.*.\n         SPACE 1\n***********************************************************************\n*    THE COMMAND SCAN PARAMETER LIST (CSPL) IS A LIST OF ADDRESSES    *\n*    PASSED FROM THE INVOKER TO COMMAND SCAN VIA REGISTER 1           *\n***********************************************************************\n         AIF   ('&DSECT' EQ 'YES').DSECT\nCSPL     DS    0A\n         AGO   .CONT\n.DSECT   ANOP\nCSPL     DSECT\n.CONT    ANOP\nCSPLUPT  DS    A                        PTR TO UPT\nCSPLECT  DS    A                        PTR TO ECB\nCSPLECB  DS    A                        PTR TO CP'S ECB\nCSPLFLG  DS    A                        PTR TO FLAG WORD CSFLG\n*                                       BIT 0 SET TO 0= SYNTAX\n*                                       CHECKING OF COMMAND NAME.\nCSPLOA   DS    A                        PTR TO OUTPUT AREA (CSOA DSECT)\nCSPLCBUF DS    A                        PTR TO COMMAND BUFFER\nCSPLL    EQU   *-CSPL\nCSFLG    DS    F\n         SPACE 2\n***********************************************************************\n*    THE COMMAND SCAN OUTPUT AREA (CSOA) IS AN AREA POINTED TO        *\n*    BY THE CSPL.  IT IS USED BY COMMAND SCAN TO INDICATE ITS         *\n*    FINDINGS.  IT IS OBTAINED AND FREED BY THE INVOKER               *\n***********************************************************************\nCSOA     DS    0A\nCSOACNM  DS    A                        PTR TO COMMAND NAME\n*                                       (IF 0, INVALID COMMAND NAME)\nCSOALNM  DS    H                        LENGTH OF CMD NAME\nCSOAFLG  DS    X                        FLAGS\nCSOAVWP  EQU   X'80'                    VALID WITH PARAMETERS\nCSOAVNP  EQU   X'40'                    VALID NO   PARAMS\nCSOAQM   EQU   X'20'                    QUESTION MARK\nCSOANOC  EQU   X'10'                    NO COMMAND\nCSOABAD  EQU   X'08'                    BAD CMD NAME\nCSOAEXEC EQU   X'04'                    IMPLICIT EXEC COMMAND NAME\n         DS    CL1                      RESERVED\nCSOAL    EQU   *-CSOA\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSDAIR": {"ttr": 6158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00 \\x00\\x80\\x05o\\x00\\x80\\x05o\\x14V\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1980-02-25T00:00:00", "modifydate": "1980-02-25T14:56:20", "lines": 26, "newlines": 26, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n&LBL     TSDAIR &Z,&DAPB=,&SYNAD=,&ENTRY=\n.*.\n.*$MACRO=TSDAIR     DATE=04/00/79       SOURCE=UCLA\n.*  THIS MACRO IS USED TO INVOKE IKJDAIR.\n.*.\n         GBLB   &TSDAIRE                WAS TSDAIRER ROUTINE GENERATED\n&LBL     $STP  &DAPB,DAPLDAPB\n         LA    1,DAPL\n         AIF   ('&ENTRY' EQ '').NOENT\n         $RXR  ,&ENTRY,15,A=            FROM REGISTER OR FULLWORD\n         BALR  14,15\n         AGO   .NOLINK\n.NOENT   LINK  EP=IKJDAIR\n.NOLINK  AIF   ('&SYNAD' EQ '').L1\n         LTR   15,15\n         BZ    TSD&SYSNDX+4\n         LA    0,&SYNAD\n         L     14,TSD&SYSNDX\n         BR    14\n         AIF   ('&SYNAD' EQ '').L0\n         AIF   (&TSDAIRE).L0\n         TSDAIRER\n.L0      ANOP\nTSD&SYSNDX DC  A(TSDAIRER)\n.L1      MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSDAIRER": {"ttr": 6160, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00y\\x10\\x1f\\x00y\\'\\x0f\\x19X\\x00#\\x00\"\\x00\"\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1979-04-11T00:00:00", "modifydate": "1979-09-27T19:58:20", "lines": 35, "newlines": 34, "modlines": 34, "user": "LDW"}, "text": "**UCLA** APRIL 1979\n         MACRO\n         TSDAIRER &Z\n         GBLB  &TSDAIRE                 GENERATE ONLY ONCE FLAG\n         AIF   (&TSDAIRE).NOGEN\n&TSDAIRE SETB  1\n         SPACE 2\n***********************************************************************\n*              DAIR ERROR ANALYSIS SUBROUTINE                         *\n***********************************************************************\n         SPACE 2\n         USING TSDAIRER,14\nTSDAIRER STM   15,1,DMPLSAVE            RC, RTN ADRS AND DAPL ADRS\n         LTR   15,15                    RETURN CODE FROM DAIR\n         BZ    TSD&SYSNDX               ON ZERO RETURN CODE\n         ST    1,DMPLDAPL               PTR TO DAPL\n         LA    1,DMPLCODE               ADDRESS OF RETURN CODE\n         ST    1,DMPLRC                 PTR TO RETURN CODE\n         LA    1,TSM&SYSNDX             ADDRESS OF LOADED IKJEFT02 IS 0\n         ST    1,DMPLMSG                PTR TO A F'0'\n         LA    1,TSC&SYSNDX             ADDRESS OF CALLER NUMBER\n         ST    1,DMPLCALL               PTR TO CALLER NUMBER\n         LA    1,DMPL                   ADRS OF DAIR MSG PARM LIST\n         LINK  EP=IKJEFF18\n         LM    15,1,DMPLSAVE            RESTORE REGISTERS\nTSD&SYSNDX LR  14,0                     RETURN ADDRESS TO USABLE REG.\n         BR    14                       RETURN TO CALLER\n         SPACE\nTSC&SYSNDX DC  H'1'                     GENERAL CALLER NUMBER\nTSM&SYSNDX DC  F'0'                     IKJEFT02 NOT LOADED\n         DROP  14                       DROP ADDRESSIBLITY\n         AGO   .END\n.NOGEN   MNOTE *,'DUPLICATE TSDAIRER MACRO, NOT GENERATED.'\n.END     SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSDAPL": {"ttr": 6162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00 \\x00\\x80\\x03\\x1f\\x00\\x81\\x19\\x7f\\tR\\x00\\x17\\x00\\x16\\x00\\x01\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-31T00:00:00", "modifydate": "1981-07-16T09:52:20", "lines": 23, "newlines": 22, "modlines": 1, "user": "LDW"}, "text": "         MACRO\n         TSDAPL\n.*.\n.*$MACRO=TSDAPL     DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THE TSDAPL MACRO GENERATES THE SYMBOLIC NAMES FOR THE DAPL,\n.*  WITH NO DSECT CARD PRECEDING\n.*.\n         SPACE 1\n***********************************************************************\n*    THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST   *\n*    (DAPL) IS A LIST OF ADDRESSES PASSED FROM THE INVOKER TO DAIR    *\n*    VIA REGISTER 1\n***********************************************************************\nDAPL     DS    0F\nDAPLUPT  DS    A        PTR TO UPT\nDAPLECT  DS    A        PTR TO ECT\nDAPLECB  DS    A        PTR TO CP'S ECB\nDAPLPSCB DS    A        PTR TO PSCB\nDAPLDAPB DS    A        PTR TO DAIR PARAMETER BLOCK\nDAPLL    EQU   *-DAPL\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSDMPL": {"ttr": 6164, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00 \\x00\\x80\\x05o\\x00\\x81\\x19\\x7f\\tR\\x00\\x1a\\x00\\x19\\x00\\x01\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-02-25T00:00:00", "modifydate": "1981-07-16T09:52:20", "lines": 26, "newlines": 25, "modlines": 1, "user": "LDW"}, "text": "         MACRO\n         TSDMPL\n.*.\n.*$MACRO=TSDMPL     DATE=04/00/79       SOURCE=UCLA\n.*  THIS MACRO MAPS THE DAIR MESSAGE PARAMETER LIST (FOR IKJEFF18)\n.*.\n         SPACE 1\n***********************************************************************\n*                                                                     *\n* (DMPL)       DAIR MESSAGE PARAMETER LIST                            *\n*                                                                     *\n* FUNCTION     THE ADDRESS OF THIS PARAMETER LIST IS PASSED IN        *\n*              REGISTER 1 BY THE INVOKER OF IKJEFF18 TO DIAGNOSE DAIR *\n*              ERRORS AND PRINT APPROPRIATE MESSAGES.                 *\n*                                                                     *\n***********************************************************************\nDMPL     DS    0F                       DAIR MESSAGE PARAMETER LIST\nDMPLDAPL DS    A                        PTR TO THE DAPL ADDRESS\nDMPLRC   DS    A                        PTR TO THE DAIR RETURN CODE\nDMPLMSG  DS    A                        PTR TO A(IKJEFT02) IF LOADED\nDMPLCALL DS    A                        PTR TO THE CALLER NUMBER\nDMPLCODE DS    0F                       R15 SAVE IS DAIR RETURN CODE\nDMPLSAVE DS    3F                       REGISTER SAVEAREA FOR 15-1\nDMPLL    EQU   *-DMPL                   LENGTH OF THE DMPL\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSIOPL": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00 \\x00\\x80\\x03\\x1f\\x00\\x81\\t\\x0f\\x14&\\x00\\x1c\\x00\\x15\\x00\\x08\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-31T00:00:00", "modifydate": "1981-03-31T14:26:20", "lines": 28, "newlines": 21, "modlines": 8, "user": "LDW"}, "text": "         MACRO\n         TSIOPL  &DSECT=NO\n.*.\n.*$MACRO=TSIOPL     DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THE TSIOPL MACRO GENERATES THE SYMBOLIC NAMES FOR THE IOPL,\n.*  WITH NO DSECT CARD PRECEDING\n.*.\n         SPACE 1\n***********************************************************************\n*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *\n*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *\n*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *\n***********************************************************************\n         SPACE 2\n         AIF   ('&DSECT' EQ 'YES').DSECT\nIOPL     DS    0A\n         AGO   .CONT\n.DSECT   ANOP\nIOPL     DSECT\n.CONT    ANOP\nIOPLUPT  DS    A                        PTR TO UPT\nIOPLECT  DS    A                        PTR TO ECT\nIOPLECB  DS    A                        PTR TO USER'S ECB\nIOPLIOPB DS    A                        PTR TO THE I/O SRV RTN PARM BLK\nIOPLL    EQU   *-IOPL\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSMPL": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00y\\x10\\x1f\\x00y\\'\\x0f \\x00\\x00$\\x00#\\x00\"\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1979-04-11T00:00:00", "modifydate": "1979-09-27T20:00:20", "lines": 36, "newlines": 35, "modlines": 34, "user": "LDW"}, "text": "**UCLA** APRIL 1979\n         MACRO\n         TSMPL &DSECT=\n         SPACE 2\n***********************************************************************\n*        THE MESSAGE PARAMETER LIST (MPL) IS A PARAMETER LIST WHOSE   *\n*        ADDRESS IS PASSED BY THE INVOKER OF THE MESSAGE PROCESSING   *\n*        ROUTINE (IKJEFF02) VIA REGISTER 1.                           *\n***********************************************************************\n         SPACE 2\n         AIF   ('&DSECT' EQ '').NODSECT\n&DSECT   DSECT\n.NODSECT ANOP\nMPL      DS    0A .                     MESSAGE PARAMETER LIST\nMPLCSECP DS    A .                      PTR TO ADRS OF MESSAGE CSECT\nMPLCPPL  DS    A .                      PTR TO CPPL\nMPLECB   DS    A .                      PTR TO USER'S ECB (TSECB)\nMPLCSECT DS    A .                      ADDRESS OF MESSAGE CSECT\nMPLSW    DS    X .                      MESSAGE OPTION FLAGS\nMPLINFO  EQU   X'80' .                  BIT 0, NO MESSAGE IDENTIFIER\nMPLREV   EQU   X'40' .                  BIT 1, MESSAGE REVERSAL\nMPLWTO   EQU   X'20' .                  BIT 2, INDICATES WRITE TO OPR\nMPLHEX   EQU   X'10' .                  BIT 3, CONVERT NO'S TO HEX\nMPLREPLY DS    AL3 .                    ADDRESS OF REPLY MESSAGE\nMPLMSGID DS    CL4 .                    4 CHARACTER MESSAGE ID\nMPLLEN1  DS    X .                      LENGTH OF VAR TEXT INSERT 1\nMPLVAR1  DS    AL3 .                    ADRS OF VARIABLE TEXT INSERT 1\nMPLLEN2  DS    X .                      LENGTH OF VAR TEXT INSERT 2\nMPLVAR2  DS    AL3 .                    ADRS OF VARIABLE TEXT INSERT 2\nMPLLEN3  DS    X .                      LENGTH OF VAR TEXT INSERT 3\nMPLVAR3  DS    AL3 .                    ADRS OF VARIABLE TEXT INSERT 3\nMPLLEN4  DS    X .                      LENGTH OF VAR TEXT INSERT 4\nMPLVAR4  DS    AL3 .                    ADRS OF VARIABLE TEXT INSERT 4\nMPLL     EQU   *-MPL .                  LENGTH OF MPL\nMPLZL    EQU   *-MPLSW\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSMSG": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x00y\\x10\\x1f\\x00y\\'\\x8f\"R\\x00N\\x00M\\x00M\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1979-04-11T00:00:00", "modifydate": "1979-10-05T22:52:20", "lines": 78, "newlines": 77, "modlines": 77, "user": "LDW"}, "text": "**UCLA** APRIL 1979                     ALSO MVSUSER JUNE 1977\n         MACRO\n&LABEL   TSMSG &ID,&TYPE=,&CSECT=,&MF=E,&TABLE=\n         LCLA  &I\n         LCLB  &INFO,&HEX,&WTO,&REV\n&LABEL   DS    0H\n         AIF   (T'&ID EQ 'O').L5        IF ID PARAMETER OMMITTED  .L5\n         AIF   ('&ID'(1,1) EQ '(').IDREG ID IN REGISTER NOTATION .IDREG\n         AIF   ('&ID'(1,1) EQ '''').IDQUOTE  QUOTED STRING ?\n         MVC   MPLMSGID(4),=CL4'&ID'    SET 4 BYTE MESSAGE ID\n         AGO   .L5\n.IDREG   ANOP                           ID WAS IN REGISTER NOTATION\n         MVC   MPLMSGID(4),0&ID         SET 4 BYTE MESSAGE ID\n         AGO   .L5\n.IDQUOTE ANOP\n         MVC   MPLMSGID(4),=CL4&ID      SET 4 BYTE MESSAGE ID\n.L5      ANOP\n         AIF   (T'&TYPE EQ 'O').NOTYPE    IF NO TYPE  PARM THEN .NOTYPE\n&I       SETA  0                        INITIALIZE I TO 0\n&INFO    SETB  0                        DEFAULT TO NOINFO (=PROMPT)\n&HEX     SETB  0                        DEFAULT TO NOHEX\n&WTO     SETB  0                        DEFAULT TO NOWTO\n&REV     SETB  0                        DEFAULT TO NOREV\n.NEXTYPE ANOP\n&I       SETA  &I+1                     INCREMENT I\n         AIF   ('&TYPE(&I)' EQ '').TYPEND  ANY MORE TYPES?\n         AIF   ('&TYPE(&I)' EQ 'INFO').INFO\n         AIF   ('&TYPE(&I)' EQ 'HEX' ).HEX\n         AIF   ('&TYPE(&I)' EQ 'WTO' ).WTO\n         AIF   ('&TYPE(&I)' EQ 'REV' ).REV\n         AIF   ('&TYPE(&I)' EQ 'PROMPT').NEXTYPE  DO NOTHING FOR NOTYPE\n         AIF   ('&TYPE(&I)' EQ 'NOINFO').NEXTYPE  DO NOTHING FOR NOTYPE\n         AIF   ('&TYPE(&I)' EQ 'NOHEX' ).NEXTYPE  DO NOTHING FOR NOTYPE\n         AIF   ('&TYPE(&I)' EQ 'NOWTO' ).NEXTYPE  DO NOTHING FOR NOTYPE\n         AIF   ('&TYPE(&I)' EQ 'NOREV' ).NEXTYPE  DO NOTHING FOR NOTYPE\n         MNOTE 4,'UNKNOWN TYPE = &TYPE(&I) IGNORED'\n         AGO   .NEXTYPE                 LOOK AT NEXT TYPE PARAMETER\n.INFO    ANOP\n&INFO    SETB  1                        INFORMATION MESSAGE BIT ON\n         AGO   .NEXTYPE\n.HEX     ANOP\n&HEX     SETB  1                        HEX CONVERSION BIT ON\n         AGO   .NEXTYPE\n.WTO     ANOP\n&WTO     SETB  1                        WRITE TO OPERATOR BIT ON\n         AGO   .NEXTYPE\n.REV     ANOP\n&REV     SETB  1                        MESSAGE REVERSAL BIT ON\n         AGO   .NEXTYPE\n.TYPEND  ANOP\n&I       SETA  128*&INFO+64*&REV+32*&WTO+16*&HEX SET FLAG VALUE\n         MVI   MPLSW,&I                 SET MESSAGE OPTIONS BITS\n.NOTYPE  ANOP\n         AIF   (T'&CSECT EQ 'O').NOCSECT IF NO CSECT PARM THEN .NOCSECT\n         AIF   (T'&TABLE EQ 'O').NOTBOTH BOTH CANNOT BE SPECIFIED\n   MNOTE 4,'CSECT AND TABLE ARE MUTUALLY EXCLUSIVE.  CSECT IS ASSUMED.'\n.NOTBOTH AIF   ('&CSECT'(1,1) EQ '(').CSREG  CSECT IN REGISTER NOTATION\n         MVC   MPLCSECT(4),=V(&CSECT)   SET ADRS OF MESSAGE CSECT\n         AGO   .L8\n.CSREG   ST    &CSECT,MPLCSECT          SET ADRS OF MESSAGE CSECT\n         AGO   .L8\n.NOCSECT ANOP\n         AIF   (T'&TABLE EQ 'O').NOTABLE IF NO TABLE PARM THEN .NOTABLE\n         AIF   ('&TABLE'(1,1) EQ '(').TAREG  TABLE IN REGISTER NOTATION\n         MVC   MPLCSECT(4),=A(&TABLE)   SET ADRS OF MESSAGE CSECT\n         AGO   .L8\n.TAREG   ST    &TABLE,MPLCSECT          SET ADRS OF MESSAGE CSECT\n         AGO   .L8\n.NOTABLE ANOP\n.L8      ANOP\n         AIF   ('&MF' EQ 'L').END       &MF=L MEANS LIST\n         LA    1,MPL                    ADRS OF MESSAGE PARAMETER LIST\n         LINK  EP=IKJEFF02              LOAD MESSAGE PROCESSING ROUTINE\n         SPACE\n* RETURN       IN REGISTER 15 IS FROM PUTLINE OR PUTGET OR\n* CODES        0 IF WTO WAS REQUESTED.\n         SPACE\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSMSGD": {"ttr": 6408, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x00y\\x10\\x1f\\x00y\\'\\x8f\"S\\x00\\x05\\x00\\x04\\x00\\x04\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1979-04-11T00:00:00", "modifydate": "1979-10-05T22:53:20", "lines": 5, "newlines": 4, "modlines": 4, "user": "LDW"}, "text": "**UCLA** APRIL 1979                     ALSO MVSUSER JUNE 1977\n         MACRO\n&LBL     TSMSGD &A,&B,&C\n&LBL     IKJTSMSG &A,&B,&C\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSPARERR": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00 \\x00y\\x10\\x1f\\x00y'\\x0f \\x00\\x00$\\x00#\\x00#\\xd3\\xc4\\xe6@@@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1979-04-11T00:00:00", "modifydate": "1979-09-27T20:00:20", "lines": 36, "newlines": 35, "modlines": 35, "user": "LDW"}, "text": "**UCLA** APRIL 1979\n         MACRO\n         TSPARERR &Z,&NOGEN=NO,&REGEN=NO\n         AIF   ('&NOGEN' NE 'YES').G1\n         PRINT NOGEN\n.G1      ANOP\n         USING TSPARERR,14\nTSPARERR STM   15,0,MPLLEN3             STORE RETURN ADD & RETURN CODE\n         CH    15,TSPARER8              CHECK FOR ATTN INTERUPT\n         BE    TSPARERE\n         LA    15,TSPARERT-4(15)\n         MVC   MPLMSGID(4),0(15)\n         TSMSG TYPE=HEX,TABLE=TSPARERC\nTSPARERE LM    15,0,MPLLEN3             GET RETURN ADD AND RETURN CODE\n         LA    1,PPL                    RESTORE REGISTER 1\n         LR    14,0                     MOVE RETURN ADD TO USABLE REG\n         BR    14                       RETURN TO CALLER\n         AIF   ('&NOGEN' NE 'PART').G2\n         PRINT NOGEN\n.G2      ANOP\nTSPARER8 DC    H'8'\nTSPARERT DC    C'TS1     TS2 TS3 TS4 '\nTSPARERC TSMSGD ' PARSE ERROR+',TS1,Q1\n         TSMSGD ' THE PPL CONTAINS INVALID INFORMATION',Q1\n         TSMSGD ' PARSE ERROR+',TS2,Q2\n         TSMSGD ' PARAMETERS INCOMPLETE AND COULD NOT PROMPT',Q2\n         TSMSGD ' PARSE ERROR+',TS3,Q3\n         TSMSGD ' NO SPACE AVAILABLE IN REGION',Q3\n         TSMSGD ' PARSE ERROR+',TS4,Q4\n         TSMSGD ' A VALIDITY CHECKING ROUTINE REQUESTED TERMINATION',Q4\n         TSMSGD\n         AIF   ('&REGEN' NE 'YES').G3\n         PRINT GEN\n.G3      ANOP\n         DROP  14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSPARSE": {"ttr": 6412, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00 \\x00\\x80\\x03o\\x00\\x82\\x06_#3\\x00-\\x00\\x17\\x00!\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "1980-02-05T00:00:00", "modifydate": "1982-03-06T23:33:20", "lines": 45, "newlines": 23, "modlines": 33, "user": "LDW"}, "text": "         MACRO\n&LBL     TSPARSE &Z,&PCL=,&CBUF=,&USER=,&SYNAD=,&ENTRY=,&MF=I\n.*.\n.*$MACRO=TSPARSE    DATE=02/07/80       SOURCE=LDW\n.*\n.*  THE TSPARSE MACRO IS USED TO INVOKE IKJPARS\n.*\n.*  UPDATES:\n.*    03/06/82 LDW  USE CALLTSSR INSTEAD OF LINK\n.*.\n         GBLC  &$NFS\n         LCLC  &IHBNX\n&IHBNX   SETC  'IHB&SYSNDX'\n&$NFS    SETC  '&LBL'\n         AIF  (('&MF' NE 'I') AND ('&MF' NE 'E') AND ('&MF' NE 'L')).E1\n        AIF (('&MF' EQ 'I') AND (('&PCL' EQ '') OR ('&CBUF' EQ ''))).E2\n&$NFS    $STP  &PCL,PPLPCL\n&$NFS    $STP  &CBUF,PPLCBUF\n         AIF   ('&USER' EQ '').NO$UWA\n&$NFS    $STP  &USER,PPLUWA\n.NO$UWA  AIF   ('&MF' EQ 'L').DONE\n&$NFS    LA    1,PPL\n&$NFS    SETC  ''\n         AIF   ('&ENTRY' EQ '').NOENT\n         $RXR  ,&ENTRY,15,A=            FROM REGISTER OR FULLWORD\n         BALR  14,15\n         AGO   .NOLINK\n.*  FOLLOWING CHANGE MADE 03/06/82 BY LDW\n.*NOENT  LINK  EP=IKJPARS\n.NOENT   CALLTSSR  EP=IKJPARS\n.NOLINK  AIF   ('&SYNAD' EQ '').DONE\n         LTR   15,15\n         BZ    &IHBNX+4\n         LA    0,&SYNAD\n         L     14,&IHBNX\n         BR    14\n&IHBNX   DC    A(TSPARERR)\n.DONE    AIF   ('&$NFS' EQ '').MEND\n&$NFS    DS    0H                       DEFINE NAME\n.MEND    MEXIT\n.E1      MNOTE 12,'MF=&MF IS INVALID'\n         AGO   .DONE\n.E2      MNOTE 12,'PCL= AND CBUF= REQUIRED WITH MF=I'\n         AGO   .DONE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSPPL": {"ttr": 6414, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00 \\x00\\x80\\x03o\\x00\\x88 /\\x15S\\x00!\\x00\\x18\\x00\\n\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1980-02-05T00:00:00", "modifydate": "1988-07-20T15:53:20", "lines": 33, "newlines": 24, "modlines": 10, "user": "LDW"}, "text": "         MACRO\n         TSPPL &DSECT=NO\n.*.\n.*$MACRO=TSPPL      DATE=04/00/79       SOURCE=UCLA\n.*\n.*  THIS MACRO DEFINES THE PARSE PARAMETER LIST, WITH NO DSECT CARD.\n.*.\n         SPACE 1\n***********************************************************************\n*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     *\n*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         *\n***********************************************************************\n         SPACE 2\n         AIF   ('&DSECT' EQ 'YES').DSECT\nPPL      DS    0A\n         AGO   .CONT\n.DSECT   ANOP\nPPL      DSECT\n.CONT    ANOP\nPPLUPT   DS    A                        PTR TO UPT\nPPLECT   DS    A                        PTR TO ECT\nPPLECB   DS    A                        PTR TO CP'S ECB\nPPLPCL   DS    A                        PTR TO PCL\nPPLANS   DS    A                        PTR TO ANS PLACE\nPPLCBUF  DS    A                        PTR TO CMD BUFFER\nPPLUWA   DS    A                        PTR TO USER WORK AREA\n*                                       (FOR VALIDITY CHECK ROUTINES)\nPPLVEWA  DS    A                        PTR TO USER WORK AREA FOR\n*                                            VERIFY EXITS)\nPPLL     EQU   *-PPL\nTSPARANS DS    F                        PARSE RETURNS PTR TO PDL HERE\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSUSRCHK": {"ttr": 6416, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x81\\x11\\x8f\\x00\\x81\\x11\\x8f\\x17\\x07\\x00\\x86\\x00\\x86\\x00\\x00\\xd4\\xc3\\xc7\\xc9\\xd5\\xe3\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-04-28T00:00:00", "modifydate": "1981-04-28T17:07:20", "lines": 134, "newlines": 134, "modlines": 0, "user": "MCGINTY"}, "text": "         MACRO\n&LABEL   TSUSRCHK  &PSCB=\n.* FUNCTION:\n.*    TEST THE USER TYPE FIELD IN THE PSCB\n.* REFERENCES:\n.*    MVS PROTECTED STEP CONTROL BLOCK - BIT PSCBACCT\n.* FORMAT:\n.*    TSUSRCHK  (VALUE,TEST,BRANCH),...,PSCB=\n.*    VALUE, TEST, AND BRANCH MAY BE SPECIFIED MULTIPLE TIMES\n.*    FOR COMPLEX TESTS.\n.* NOTES:\n.*    - RELIANCE ON THE CONTENTS OF R0 AND R1 AFTER THIS MACRO\n.*      IS ILLEGAL BECAUSE OF COMPATABILITY WITH OTHER VERSIONS.\n.*    - THIS VERSION OF THE MACRO SUPPORTS ONLY USER TYPES 'SYSPGMR'\n.*      AND 'USER'.  ALL OTHER TESTS WILL TAKE THE 'NO' PATH.\n.* OPERANDS:\n.*    VALUE -- TYPE OF USER TO BE TESTED\n.*       SYSPGMR  -- SYSTEMS PROGRAMMER\n.*       PLAYER   -- USER HAS UNRESTRICTED GAMES PRIVILEGES\n.*       NOPLAYER -- USER HAS NO GAMES PRIVILEGES\n.*       USER     -- NORMAL USER\n.*    TEST -- CONDITION ON WHICH THE BRANCH IS TAKEN\n.*       NO  -- CURRENT USER IS NOT THE SAME AS VALUE\n.*       YES -- CURRENT USER IS THE SAME AS VALUE\n.*    BRANCH -- LOCATION TO BRANCH TO -- RX ADDR OR (REG)\n.*    PSCB= -- LOCATION OF PSCB (OPTIONAL) -- RX ADDR OR (REG) --\n.*             IF NOT SPECIFIED, R1 WILL BE USED TO LOCATE IT\n.*\n.* UPDATES:\n.*    04/28/81 SDM - CREATE HARTFIELD-ZODY'S VERSION\n.*\n         LCLA  &A1,&TC\n         LCLC  &C1,&C2\n* TSUSRCHK -- 04/28/81 SDM\n         AIF   ('&LABEL' EQ '').NOLAB\n&LABEL   DC    0H'0'\n.NOLAB   ANOP\n.*\n.* ADDRESS THE PSCB\n&C1      SETC  '16(1)'\n         AIF   (T'&PSCB EQ 'O').P4\n         AIF   ('&PSCB'(1,1) EQ '(').P1\n&C1      SETC  '&PSCB+16'\n         AGO   .PX\n.P1      ANOP\n&C1      SETC  '16(&PSCB(1))'\n         AIF   ('&C1' EQ '0').P2\n         AIF   ('&C1' EQ 'R0').P2\n         AIF   (N'&PSCB EQ 1).PX\n.P2      MNOTE 8,'TSUSRCHK - PSCB OPERAND INCORRECTLY SPECIFIED'\n         AGO   .PX\n.P4      ANOP\n         L     1,540                    -> CURRENT TCB\n         L     1,180(,1)                -> JSCB\n         ICM   1,B'1111',264(1)         -> PSCB\n         BZ    *+8                      BRANCH IF BATCH\n.PX      ANOP\n.*\n.* SET THE CONDITION CODE FROM THE PSCBACCT BIT\n         TM    &C1,X'40'                PSCBACCT - ACCOUNT PRIVILEGE\n.*\n.* GENERATE BRANCH INSTRUCTIONS\n&TC      SETA  N'&SYSLIST\n         AIF   (&TC GE 1).C1\n         MNOTE 8,'TSUSRCHK - NO CONDITION TESTS SPECIFIED'\n         NOP   0                        PATCH SPACE\n         MEXIT\n.C1      ANOP\n.*\n.* LOOP TO GENERATE ACTUAL CONDITION TESTS\n&A1      SETA  1\n.COND    AIF   (&A1 GT N'&SYSLIST).CONDX\n.*\n.* CREATE CORRECT BASIC BRANCH OP-CODE AND SAVE IT\n         AIF   (N'&SYSLIST(&A1) LT 1).C03\n&C1      SETC  '&SYSLIST(&A1,1)'\n         AIF   (N'&SYSLIST(&A1) LT 2).C01\n&C2      SETC  '&SYSLIST(&A1,2)'\n         AIF   ('&C2' EQ 'YES').C02\n         AIF   ('&C2' EQ 'NO').C02\n.C01     MNOTE 8,'TSUSRCHK - TEST FIELD &A1 IS INCORRECTLY SPECIFIED'\n&C1      SETC  'NOP'\n         AGO   .C08\n.C02     AIF   ('&C1' EQ 'SYSPGMR').C06\n         AIF   ('&C1' EQ 'PLAYER').C05\n         AIF   ('&C1' EQ 'NOPLAYER').C05\n         AIF   ('&C1' EQ 'USER').C04\n.C03     MNOTE 8,'TSUSRCHK - USER TYPE FIELD &A1 IS INCORRECTLY SPECIFI+\n               ED'\n&C1      SETC  'NOP'                    SET NO-OP OP CODE\n         AGO   .C08\n.* NORMAL USER\n.C04     AIF   ('&C2' EQ 'YES').C07Z\n         AGO   .C07O\n.* FORCE THE 'NO' PATH\n.C05     AIF   ('&C2' EQ 'YES').C05N\n&C1      SETC  'B'                      SET 'BRANCH' OP CODE\n         AGO   .C08\n.C05N    ANOP\n&C1      SETC  'NOP'                    SET NO-OP OP CODE\n         AGO   .C08\n.* SYSTEM PROGRAMMER\n.C06     AIF   ('&C2' EQ 'YES').C07O\n.* SET 'BRANCH ON ZERO' CONDITION\n.C07Z    ANOP\n&C1      SETC  'BZ'\n         AGO   .C08\n.* SET 'BRANCH ON ONE' CONDITION\n.C07O    ANOP\n&C1      SETC  'BO'\n.*\n.* CREATE CORRECT BRANCH LABEL.  ALSO, MODIFY BRANCH OP-CODE IF\n.* REGISTER BRANCH REQUIRED.\n.C08     AIF   (N'&SYSLIST(&A1) LT 3).C09\n&C2      SETC  '&SYSLIST(&A1,3)'\n         AIF   ('&C2'(1,1) NE '(').C10\n&C2      SETC  '&C2'(2,K'&C2-2)\n         AIF   ('&C2' EQ '0').C09\n         AIF   ('&C2' EQ 'R0').C09\n         AIF   ('&C2' EQ '1').C09\n         AIF   ('&C2' EQ 'R1').C09\n&C1      SETC  '&C1.R'\n         AGO   .C10\n.C09     MNOTE 8,'TSUSRCHK - BRANCH FIELD &A1 IS INCORRECTLY SPECIFIED'\n&C2      SETC  '0'\n.*\n.* ASSEMBLE ACTUAL BRANCH INSTRUCTION\n.C10     &C1   &C2\n         AIF   (N'&SYSLIST(&A1) LE 3).CONDI\n         MNOTE 8,'TSUSRCHK - MORE THAN 3 OPERANDS IN CONDITION &A1'\n.CONDI   ANOP\n&A1      SETA  &A1+1\n         AGO   .COND\n.CONDX   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USCPTBL": {"ttr": 6419, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00 \\x00\\x88\\x03_\\x00\\x90#?\\x15\\x02\\x00Z\\x00A\\x00\\x19\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1988-02-04T00:00:00", "modifydate": "1990-08-21T15:02:20", "lines": 90, "newlines": 65, "modlines": 25, "user": "LDW"}, "text": "         MACRO\n         USCPTBL  &ACCT=ACCT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  University of Southern California - System Control Table           *\n*                                                                     *\n*  This dsect describes the system control table header.              *\n*  The system ctl table is pointed to by \"UVTSYSTB\" in the USCUVT.    *\n*                                                                     *\n*  Created:    Feb 04, 1988                                           *\n*                                                                     *\n*  Updates:                                                           *\n*    02Feb04 LDW - Rename from HSYSTBL; customize for USC             *\n*                                                                     *\n***********************************************************************\n         LCLC  &AC\n&AC      SETC  '&ACCT'\n         SPACE 1\nUSCPTBL  DSECT\nUSCPTBID DC    CL8'SYSPTBL '            ID (NAME OF THIS LOAD MODULE)\nUSCPSPLN DS    0F                       SUBPOOL AND LENGTH\nUSCPSP   DC    AL1(241)                 SUBPOOL (CSA, USER KEY, PAGE-\n*                                          ABLE, NOT FETCH PROTECTED,\n*                                          EXPLICITLY ASSIGNED & FREED)\nUSCPLEN  DS    AL3                      LENGTH OF WHOLE MODULE\nUSCPFIXL DS    H                        LENGTH OF FIXED SECTION\nUSCPSEGS DS    H                        OFFSET TO SEGMENT DESCRIPTIONS\n         DS    F                        SPARE\nUSCPDONE DS    F                        # OF USERS FINISHED WITH TABLE\n*  DATE AND TIME TABLE WAS LOADED, IN \"TIME DEC\" MACRO FORM\nUSCPDATE DS    F                        DATE THIS TABLE LOADED\nUSCPTIME DS    F                        TIME THIS TABLE LOADED\n         DS    8A                       SPARE\nUSCPNSEG DS    A                        NUMBER OF SEGMENTS\nUSCPFEND EQU   *                        END OF FIXED SECTION\n         SPACE 2\n*---  SEGMENT OFFSETS GO HERE\nSEGDESC  EQU   *                        FIRST SEGMENT DESCRIPTOR\nSEGCLAS  DS    A                        OFFSET TO INPUT CLASSES SEGMENT\nSEGTERM  DS    A                        OFFSET TO TERMTAB SEGMENT\nSEGACCT  DS    A                        OFFSET TO ACCT FACTORS SEGMENT\nSEGFORM  DS    A                        OFFSET TO XEROX FORMS SEGMENT\n         SPACE 3\n*  FORMAT OF GENERAL SEGMENT HEADER\nSEGMENT  DSECT\nSEGOFF   DS    A                        OFFSET TO LAST ENTRY\nSEGLEN   DS    Y                        LENGTH OF EACH ENTRY\nSEGNUM   DS    Y                        NUMBER OF ENTRIES\nSEGENT1  EQU   *                        FIRST ENTRY\n         SPACE 3\n*  FORMAT OF INPUT CLASSES SEGMENT ENTRIES\nCLASS    DSECT\nCLSTIME  DS    F                        TIME LIMIT, IN .01 SEC\nCLSNAME  DS    C                        CLASS\nCLSFLAGS DS    B                        MISC FLAGS\nCLS@SYS   EQU   X'80'                    RESTRICTED TO SYSTEMS\nCLS@OPER  EQU   X'40'                    RESTRICTED TO OPERATIONS\nCLS@DEFR  EQU   X'20'                    DEFERRED BILLING CLASS\nCLS@AUTO  EQU   X'10'                    J2XCLS MAY ALTER CLASS\nCLS@LONG  EQU   X'08'                    this job is large CPU usage\nCLS@SETU  EQU   X'04'                    THIS IS A SETUP CLASS\n         DS    3B                       space for more flags\nCLSPRTY  DS    AL1                      prty for JCTPRIO\nCLSRGN   DS    H                        max region in Meg\n         SPACE 3\n*  FORMAT OF ACCOUNTING FACTORS SEGMENT\n&AC.FACT DSECT\n&AC.STCA DS    CL5                      DUMMY ACCT FOR STARTED TASKS\n&AC.OVER DS    CL5                      OVERRIDE ACCT\n         DS    XL2                      currently wasted\n&AC.CPPS DS    F                        cost*100 per printed sheet\n         SPACE 3\n*  FORMAT OF XEROX FORMS SEGMENT ENTRIES\nFORMENT  DSECT\nFE@NAME  DS    CL8                      form name\nFE@OFF   DS    Y                        offset of additional text\nFE@FLAGS DS    AL1                      flags\nFE@1SPCL  EQU   X'80'                    special stock (must be cls S)\nFE@1DPLX  EQU   X'40'                    duplex - use SIDE=NUFRONT\nFE@1HOLE  EQU   X'20'                    use drilled paper\nFE@1LINE  EQU   X'10'                    line (impact) printer form\nFE@LPPS  DS    AL1                      logical pages / physical sheet\nFE@CPS   DS    H                        cost*100 per sheet\n         DS    H                        currently wasted\nFE@COUNT DS    F                        use count\nFE@JDE   DS    CL8                      JDE name\nFE@JDL   DS    CL8                      JDL name\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USCUVT": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00 \\x00\\x88\\x03_\\x00\\x89\\x01\\x0f\\x14#\\x00V\\x00R\\x00\\x08\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1988-02-04T00:00:00", "modifydate": "1989-01-10T14:23:20", "lines": 86, "newlines": 82, "modlines": 8, "user": "LDW"}, "text": "         MACRO\n&LABEL   USCUVT  &DSECT=YES,&PREFIX=UVT\n         LCLC  &LAB,&P\n&LAB     SETC  'UVT     '               SET DEFAULT LABEL\n&P       SETC  '&PREFIX'(1,3)           SET MAX PREFIX\n         AIF   (T'&LABEL EQ 'O').CK#DS  BIF NO USER LABEL\n&LAB     SETC  '&LABEL'                 SET USER'S LABEL\n.CK#DS   AIF   ('&DSECT' EQ 'YES').DSECT BIF DSECT GENERATION\n&LAB     DC    0D'0'                    USC USER VECTOR TABLE\n         AGO   .GEN                     BIF TO GENERATE DATA\n.DSECT   ANOP                           GENERATE DSECT HERE\n&LAB     DSECT ,                        USC USER VECTOR TABLE\n.GEN     ANOP\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  U n i v e r s i t y   O f   S o u t h e r n   C a l i f o r n i a  *\n*                                                                     *\n*      U n i v e r s i t y   C o m p u t i n g   S e r v i c e s      *\n*                                                                     *\n*                       User Vector Table (UVT)                       *\n*                                                                     *\n*                                                                     *\n*  This control block is built by UVTINIT, running either as a        *\n*  started task, or preferably, as a subsystem initialization exit.   *\n*  It resides in SQA, (subpool 245), and is key zero, not fetch       *\n*  protected, page fixed.                                             *\n*                                                                     *\n*  Created:    Feb 04, 1988                                           *\n*                                                                     *\n*  Updates:                                                           *\n*    10Jan89  LDW - Add UVTACCTS                                      *\n*    21May88  LDW - Add UVTEFLA1                                      *\n*                 - Change UVTEFLD to UVTLGN                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n&P.ID    DC    CL8'UVT USC '\n&P.SIZE  DC    A(UVTLEN)                length of this control block\n&P.VERS  DC    F'1'                     first version of USCUVT\n*\n*  the following fields *must* be together and doubleword aligned\n         DC    0D'0'                    insure alignment\n&P.SYSTB DC    A(0)                     -> system parm table\n&P.SYSTN DC    F'0'                     use count for above\n*\n&P.MSG   DC    A(0)                     -> logon messages (see USCLGN)\n&P.RV001 DC    A(0)                     reserved\n&P.VTACT DC    A(0)                     -> vtam accounting table\n&P.ACCTS DC    A(0)                     account number table\n&P.LGN   DC    A(0)                     -> USCLGN\n&P.EFLA1 DC    A(0)                     -> IBM's IKJEFLA1\n&P.RV003 DC    4A(0)                    reserved\n*\n*  system status and control flags\n*\n&P.FLAGS DC    0F'0'                    handle for the whole bunch\n*\n&P.FLAG1 DC    AL1(0)                   first flag byte\n&P.1TSCL  EQU   X'80'                   tso is CLOSED - only operators\n*                                                       may log on\n&P.1TSST  EQU   X'40'                   SYStem TESTing in progress -\n*                                              only syspgmrs may log on\n&P.1NSUB  EQU   X'08'                   SUBMIT not allowed\n*\n&P.FLAG2 DC    AL1(0)                   second flag byte\n&P.2R2D2  EQU   X'80'                   r2d2 is to be active\n*\n&P.FLAG3 DC    AL1(0)                   third flag byte\n*\n&P.FLAG4 DC    AL1(0)                   fourth flag byte\n&P.4DBUG  EQU   X'80'                   debug flag for logon exit\n*\n         DC    3F'0'                    more flags if needed\n&P.WORD  DC    XL8'00'                  special word for USCEFLD\n&P.RV004 DC    2A(0)                    reserved\n&P.RV005 DC    2A(0)                    reserved\n*\n&P.RV006 DC    6A(0)                    reserved\n*\n&P.LEN   EQU   8*((*+7-&P.ID)/8)\n***********************************************************************\n*                          end of USCUVT                              *\n***********************************************************************\n         SPACE 3\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USNGX": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x00\\x00 \\x00\\x84\\x10\\x7f\\x00\\x84\\x10\\x7f\\x18B\\x00F\\x00F\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "03.00", "flags": 0, "createdate": "1984-04-16T00:00:00", "modifydate": "1984-04-16T18:42:20", "lines": 70, "newlines": 70, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         USNGX &PARMS\n.*.\n.*$MACRO=USNGX      DATE=05/10/80       SOURCE=UCLA(JCJ)\n.*  THIS IS AN COPY OF OACUSING, UNDER A DIFFERENT NAME\n.*\n.*  THIS MACRO IS USED TO DO A 'USING' AND ADD THE INFORMATION TO A\n.*       TABLE WHICH IS PRINTED OUT BY THE 'INUSE' MACRO.  THE 'DROPX'\n.*       MACRO MUST BE USED TO REMOVE ENTRIES FROM THIS TABLE.\n.*.\n         GBLC  &USELAB(16),&USEREG(16)  PGM LABELS,USE REGISTERS\n         LCLA  &RCNT,&PNDX,&UNDX        # OF OPERANDS,PARM/USE INDICES\n         LCLA  &TP1,&HOLE               TEMP WORK,1ST UNUSED SAVE ENTRY\n         LCLB  &GOTREG                  WHETHER TO DO USING OR NOT\n         LCLC  &CHR1,&CHR2,&C(16)       TEMPORARY WORK CHARS,COMMAS\n         LCLC  &R(16),&S                REGS\n         LCLC  &U,&V,&W                 R(15),C(16),R(16)\n&PNDX    SETA  1                        SET UP PARM STRING INDEX\n&RCNT    SETA  N'&SYSLIST               GET NUMBER OF OPERANDS\n         AIF   (&RCNT LE 1).ERR01       TOO FEW INPUT PARAMETERS\n         AIF   (&RCNT LE 17).SYS1#CK    CONTINUE IF LOW ENOUGH\n         MNOTE 4,'TOO MANY INPUT PARAMETERS. ONLY 17 PROCESSED'\n&RCNT    SETA  17                       SET MAX ALLOWABLE\n.SYS1#CK ANOP\n&S       SETC  '&SYSLIST(1)'            SET FOR SHORTER STRING BELOW\n.COMLOOP ANOP\n&PNDX    SETA  &PNDX+1                  INCREMENT INPUT STRING INDEX\n&UNDX    SETA  0                        INITIALIZE USE INDEX\n&HOLE    SETA  0                        INITIALIZE UNUSED ENTRY INDEX\n.USELOOP AIF   ('&SYSLIST(&PNDX)' EQ '').CHK#END BR IF NULL STRING\n&UNDX    SETA  &UNDX+1                  UP THE USE INDEX\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').DO#USE PREVUSE?\n         AIF   ((&HOLE NE 0) OR ('&USEREG(&UNDX)' NE '')).CHKEND\n.* WE BRANCH TO CHKEND IF WE ALREADY HAVE A HOLE OR NO HOLE EXISTS HERE\n&HOLE    SETA  &UNDX                    KEEP THE SAVE TABLE FREE INDEX\n.CHKEND  AIF   (&UNDX LT 16).USELOOP    LOOP FOR ALL ENTRIES\n&UNDX    SETA  &HOLE                    GET FREE ENTRY INDEX IN CASE\n         AIF   (&HOLE NE 0).DO#USE1     BRANCH IF SPACE FOR ENTRY\n         MNOTE 4,'USNGX SAVE TABLE FULL. OPERAND TRUNCATED'\n         AGO   .USINGGO                 GO DO JUST WHAT WE CAN\n.DO#USE  ANOP\n&CHR1    SETC  '********'(1,K'&SYSLIST(&PNDX)) STARS FOR THE REG\n&CHR2    SETC  '****************'(1,K'&USELAB(&UNDX)) MAX 16 CHAR LABEL\n         MNOTE *,'*********&CHR1*********************&CHR2'\n         MNOTE *,'REGISTER &SYSLIST(&PNDX) PREVIOUSLY BASED ON &USELAB(@\n               &UNDX)'\n         MNOTE *,'*********&CHR1*********************&CHR2'\n.DO#USE1 ANOP                           LOG THE REG USE HERE\n&CHR1    SETC  '&SYSLIST(1)'            GET A DEFAULT LABEL\n         AIF   (&PNDX EQ 2).SETLAB      IF FIRST REG, NO +NNNN TO ADD\n&TP1     SETA  (&PNDX-2)*4096           ELSE GET ADDED AMOUNT\n&CHR1    SETC  '&CHR1'.'+'.'&TP1'       APPEND THE +NN FOR EXTRA REGS\n.SETLAB  ANOP                           MOVE IN THE SAVE LABELS HERE\n&USELAB(&UNDX) SETC '&CHR1'             SET SAVE TABLE DATA\n&USEREG(&UNDX) SETC '&SYSLIST(&PNDX)'   GET THE REG VALUE IN SAVEAREA\n&R(&PNDX-1) SETC '&SYSLIST(&PNDX)'      GET THE REG VALUE FOR USING\n&C(&PNDX-1) SETC ','                    AND A LEADING COMMA ALSO\n&GOTREG  SETB  1                        SAY WE CAN DO USING\n.CHK#END AIF   (&PNDX LT &RCNT).COMLOOP LOOP FOR ALL ENTRIES\n.USINGGO AIF   (NOT &GOTREG).EXIT       NOW TELL ASSEMBLER IF WE CAN\n&U       SETC  '&R(15)'                 SO WE HAVE A SHORTER STRING\n&V       SETC  '&C(16)'                 SO WE HAVE A SHORTER STRING\n&W       SETC  '&R(16)'                 SO WE HAVE A SHORTER STRING\n         USING &S&C(1)&R(1)&C(2)&R(2)&C(3)&R(3)&C(4)&R(4)&C(5)&R(5)&C(6@\n               )&R(6)&C(7)&R(7)&C(8)&R(8)&C(9)&R(9)&C(10)&R(10)&C(11)&R@\n               (11)&C(12)&R(12)&C(13)&R(13)&C(14)&R(14)&C(15)&U&V&W\n         MEXIT\n.ERR01   MNOTE 4,'MISSING INPUT PARAMETERS'\n         MEXIT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOL": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00 \\x00\\x80\\x01o\\x00\\x92\\x18?\\x18&\\x00\\x1d\\x00\\x17\\x00\\x08\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-01-16T00:00:00", "modifydate": "1992-07-01T18:26:20", "lines": 29, "newlines": 23, "modlines": 8, "user": "LDW"}, "text": "         MACRO\n&NFS     VOL   &DSECT=YES\n.*.\n.*$MACRO=VOL        DATE=00/00/76       SOURCE=LDW\n.*\n.*  THIS MACRO GENERATES A DSECT FOR THE TAPE VOLUME LABEL 'VOL1'.\n.*  See IBM macro IECDSECT.\n.*\n.*  01Jul92 LDW - Added &P.TRTCH field\n.*              - Added label &P.SEC for completeness\n.*.\n         LCLC  &P\n&P       SETC  'VOL'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'VOL'                   CONSTANT\n&P.NO    DC    C'1'                     CONSTANT\n&P.SERNO DC    CL6'VOLSER'              VOLUME NAME\n&P.SEC   DC    C'0'\n         DC    CL28' '\n&P.TRTCH DC    CL2' '                   Tape Recording TeCHnique\n&P.CMPAC EQU   C'P'                          compaction recording mode\n&P.OWNER DC    CL10' '                  OWNER ID\n         DC    CL29' '\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XSELNAME": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x93\\x06?\\x00\\x93\\x06?\\x159\\x00\\x17\\x00\\x17\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-04T00:00:00", "modifydate": "1993-03-04T15:39:20", "lines": 23, "newlines": 23, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         SELNAME        &INDEX,&NL\n.*\n.* MACRO SELNAME             DATE=2/24/88             SOURCE=JHC\n.*\n.*  USED TO SELECT ONLY CERTAIN NAMES BEGINING WITH A SPECIFIED\n.* INDEX. ONLY THOSE NAMES MATCHING WILL BE PRINTED.\n.*\n* NEW CODE ADDED, STARTING HERE...\n         LCLC  &BR\n&BR      SETC  'SELEND'\n         SR    R5,R5                    SET REG5 TO ZERO\n         L     R1,INDLEN                LOAD INDEX LENGTH INTO REG1\n         SR    R1,R5                    SUBRACT 0 FROM INDEX LENGTH\n         BZ    &BR&NL                   IF LENGTH 0, END\n         MVC   INDTEMP(44),&INDEX       LOAD FULL INDEX INTO DUMMY\n         MVC   INDSTR(44),INPSTR        LOAD SEARCH INDEX INTO DUMMY\n         S     R1,NUMONE                SUBTRACT 1 FROM REG1\n         EX    R1,COMPARE               EX COMPARE WITH LENGTH=REG1\n         BNE   LOOP                     NO MATCH, GO GET NEXT RECORD\n* END OF ADDED CODE.\n&BR&NL   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X2D": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x00\\x90\\x07?\\x00\\x90\\x07?\\x00\\x16\\x00\\t\\x00\\t\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-14T00:00:00", "modifydate": "1990-03-14T00:16:20", "lines": 9, "newlines": 9, "modlines": 0, "user": "LDW"}, "text": "         MACRO\n         X2D   &A\n         LCLC  &X\n         LCLA  &D\n&X       SETC  'X''&A'''\n&D       SETA  &X\nX&SYSNDX DC    &X\nD&SYSNDX DC    F'&D'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT179/FILE179.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT179", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}