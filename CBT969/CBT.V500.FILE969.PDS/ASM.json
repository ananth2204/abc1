{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20201214121920000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 197017, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.PDSEGEN.ASM", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 197017, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 197017, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.PDSEGEN.ASM": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x0fxH\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x0fxH\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x0fxH\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"PDSEGDEL": {"ttr": 43, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00\\x05\\x01\\x16!\\x8f\\x01\\x18\\x03\\x0f\\x10\\x02\\x014\\x01\\x1a\\x00\\x00\\xd7\\xc4\\xe2\\xc5@@@@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "2016-08-05T00:00:00", "modifydate": "2018-01-30T10:02:05", "lines": 308, "newlines": 282, "modlines": 0, "user": "PDSE"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n* Name:        PDSEGDEL                                               *\n*                                                                     *\n* Function:    REXX function to delete a pdse member and/or member    *\n*              generation.                                            *\n*                                                                     *\n* Syntax:      X=PDSEGDEL(MEMBER,GEN,DDNAME,MGFLAG)                   *\n*                                                                     *\n*              Where:                                                 *\n*                                                                     *\n*              MEMBER is the member to be deleted                     *\n*                                                                     *\n*              GEN is the absolute generation to be deleted           *\n*                                                                     *\n*              DDNAME is the ddname where the member resides          *\n*                                                                     *\n*              MGFlag is a flag indicating if the PDSE has            *\n*              member generations (D for plain delete                 *\n*              or DG for delete generation)                           *\n*                                                                     *\n*              Defaults:                                              *\n*                                                                     *\n*              MEMBER:   none                                         *\n*              GEN:      none                                         *\n*              DDNAME:   none                                         *\n*              MGFLAG:   DG                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n* Link Edit information:  Rent, Reus                                  *\n*---------------------------------------------------------------------*\n* Return Codes:                                                       *\n*                                                                     *\n*         0    processing has completed successfully                  *\n*         4    delete failed                                          *\n*         8    invalid parm                                           *\n*        20    no parm provided                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n* Author:      Lionel B. Dyck                                         *\n*---------------------------------------------------------------------*\n* HISTORY:                                                            *\n*                                                                     *\n*        01/25/18  -  Correct move of ddname                          *\n*        01/24/18  -  Correct test for MGFLAG D (JK)                  *\n*                  -  Other corrections for non-member gen pds/pdse   *\n*        11/20/17  -  Add MGFLAG and test                             *\n*                     - if D then use STOW D (no generations)         *\n*                     if DG then use STOW DG (member generations)     *\n*        06/19/17  -  Always use STOW DG                              *\n*        04/25/17  -  Use STOW D if Gen 0                             *\n*        01/09/17  -  Change to AMODD 24                              *\n*        01/06/17  -  Remove comments about relative generation       *\n*        08/05/16  -  Moved workdcb to workarea so code is reentrant  *\n*                     Thanks to Bill Fleury                           *\n*        08/04/16  -  finally got it working                          *\n*        08/02/16  -  creation from ddlist                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nPDSEGDEL CSECT\nPDSEGDEL AMODE 24\n*----------------------------------------------------------*\n*        Housekeeping occurs here                          *\n*----------------------------------------------------------*\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING PDSEGDEL,R12        INFORM ASSEMBLER\n         B     STARTIT\n         DC    CL8'PDSEGDEL'\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\nSTARTIT  DS    0H\n         SPACE 2\n         LA    R0,72+4000          get savearea plus workarea\n         GETMAIN R,LV=(0)\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R2,R1               SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R2              SET SAVEAREA POINTER\n         USING WORK,R13            USING ON WORKAREA VIA R13\n         EJECT\n*---------------------------------------------------------------------*\n*        PROCESS THE INPUT PARAMETER LIST                             *\n*---------------------------------------------------------------------*\n         LR    R5,R0               -> ENVIRONMENT BLOCK\n         ST    R5,ENVBADDR         Save Environment Block Address\n         USING ENVBLOCK,R5\n         L     R5,ENVBLOCK_IRXEXTE -> EXTERNAL VECTOR TABLE\n         DROP  R5\n         USING IRXEXTE,R5\n         L     R5,IRXEXCOM         LOAD IRXEXCOM EPA\n         ST    R5,EXCOM            SAVE IRXEXCOM EPA\n         DROP  R5\n         LR    R4,R1               -> EFPL\n         USING EFPL,R4             ESTABLISH ADDRESSABILITY TO EFPL\n         L     R5,EFPLEVAL         -> EVAL BLOCK ADDRESS POINTER\n         L     R5,0(0,R5)          -> EVAL BLOCK\n         ST    R5,EVALADDR         SAVE IT'S ADDRESS\n         L     R4,EFPLARG          -> ARGUMENT LIST\n         DROP  R4\n*\n         LTR   R4,R4               ANY ARGUMENT LIST ?\n         BZ    EXIT20              YES\n*\n         MVC   SPMEM,BLANKS        INITIALIZE THE MEMBER VALUE\n         MVC   DDNAME,BLANKS       INITIALIZE THE DDNAME VALUE\n*\n         USING ARGTABLE_ENTRY,R4   ESTABLISH ADDRESSABILITY TO ARG\n         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY REAL ARGUMENTS\n         BE    EXIT20              NO - SO EXIT\n         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT\n         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH\n         BCTR  R3,R0               LESS 1 FOR MVC\n         EX    R3,MOVEMEM          MOVE THE MEMBER\n         LA    R4,ARGTABLE_NEXT\n*\n         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY Generation?\n         BE    EXIT8               NO - SO EXIT\n         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT\n         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH\n         BCTR  R3,R0               LESS 1 FOR MVC\n         LTR   R3,R3\n         BM    EXIT8               NO Generation\n*\n         PACK  DWK(8),0(*-*,R2)    <<Executed>>\n         EX    R3,*-6             << Executes Pack >>\n         CVB   R1,DWK\n         ST    R1,SPGEN\n*\n         LA    R4,ARGTABLE_NEXT\n         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY DDname ?\n         BE    EXIT8               NO - SO EXIT\n         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT\n         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH\n         BCTR  R3,R0               LESS 1 FOR MVC\n         LTR   R3,R3\n         BM    EXIT8               NO DDName\n         EX    R3,MOVEDDN          MOVE DDName\n*\n         MVC   MGFLAG(2),=C'DG'    Default to Delete Generation\n         LA    R4,ARGTABLE_NEXT\n         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY MGFLAG ?\n         BE    NOMGF               NO - SO EXIT\n         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT\n         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH\n*$$$     BCTR  R3,R0               LESS 1 FOR MVC\n         EX    R3,MOVEMGF          MOVE MGFlag\nNOMGF    EQU   *\n         EJECT\n*---------------------------------------------------------------------*\n*        INITIALIZE ALL WORK AREAS FROM OUR CONSTANTS                 *\n*---------------------------------------------------------------------*\nSTART    DS    0H\n*\n         MVC   WORKDCB,XDCB                                        *BF*\n         MVC   WORKDDN(8),DDNAME   SET UP DDNAME\n         LA    R1,WORKDCB\n         ST    R1,SPDCBA\n         LA    R1,20\n         STH   R1,SPLEN\n*\n         EJECT\n         MVC   WORKOPEN,XOPEN     OPEN PARAMETER LIST              *BF*\n         OPEN  (WORKDCB,OUTPUT),MODE=31,MF=(E,WORKOPEN)            *BF*\n         CLC   MGFLAG(2),=C'DG'           * Delete non-Gen\n         BNE   STOWD                      * No - use stow D\n         STOW  WORKDCB,SPLIST,DG\n         B     STOWOK\nSTOWD    DS    0H\n         LA    R1,16\n         STH   R1,SPLEN\n         STOW  WORKDCB,SPMEM,D\nSTOWOK   DS    0H\n         LR    R5,R15   * Save RC\n         MVC   WORKCLOS,XCLOSE    CLOSE PARAMETER LIST             *BF*\n         CLOSE WORKDCB,MODE=31,MF=(E,WORKCLOS)                     *BF*\n         LTR   R5,R5\n         BNZ   EXIT4\n         B     EXIT0\n         EJECT\n*---------------------------------------------------------------------*\n*        ALL OF THE EXIT ROUTINES FOLLOW                              *\n*---------------------------------------------------------------------*\nSETRC    DS    0H\n         L     R11,EVALADDR\n         USING EVALBLOCK,R11\n         MVC   EVALBLOCK_EVLEN(4),=A(2)\n         MVC   EVALBLOCK_EVDATA(2),RC\n         DROP  R11\n         SPACE 2\n         LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         LA    R15,0                                        $1/95$\n         BR    R14\n*---------------------------------------------------------------------*\nEXIT0    DS    0H\n         MVC   RC,=C'00'           SET RC TO ZERO\n         B     SETRC\nEXIT4    DS    0H\n         MVC   RC,=C'04'           SET RC\n         B     SETRC\nEXIT8    DS    0H\n         MVC   RC,=C'08'           SET RC\n         B     SETRC\nEXIT20   DS    0H\n         MVC   RC,=C'20'           SET RC\n         B     SETRC\n         EJECT\n*---------------------------------------------------------------------*\n*        EXECUTED INSTRUCTIONS                                        *\n*---------------------------------------------------------------------*\nMOVEDDN  MVC   DDNAME(0),0(R2)     ** EXECUTED\nMOVEMEM  MVC   SPMEM(0),0(R2)      ** EXECUTED\nMOVEMGF  MVC   MGFLAG(0),0(R2)     ** EXECUTED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        CONSTANTS                                                    *\n*---------------------------------------------------------------------*\nBLANKS   DC    CL80' '\n         EJECT\nXDCB     DCB   DSORG=PO,DDNAME=WORKDDN,MACRF=(R,W)                 *BF*\nXDCBLEN  EQU   *-XDCB                                              *BF*\nXOPEN    OPEN  0,MODE=31,MF=L      OPEN PARAMETER LIST             *BF*\nXOPENL   EQU   *-XOPEN                                             *BF*\nXCLOSE   CLOSE 0,MODE=31,MF=L      CLOSE PARAMETER LIST            *BF*\nXCLOSEL  EQU   *-XCLOSE                                            *BF*\n         EJECT\n*---------------------------------------------------------------------*\n*        WORK AREA DSECTS                                             *\n*---------------------------------------------------------------------*\nWORK     DSECT\nSAVE     DS    18F\nDWK      DS    D\n*\nWORKDCB  DS    CL(XDCBLEN)                                         *BF*\nWORKDDN  EQU   WORKDCB+40,8                                        *BF*\n         DS    0F\nWORKOPEN DS    CL(XOPENL)                                          *BF*\nWORKCLOS DS    CL(XCLOSEL)                                         *BF*\n*\nSPLIST   DS    CL20\n         ORG   SPLIST\nSPLEN    DS    CL2\nSPFUNC   DS    C\n         DS    C\nSPDCBA   DS    F\nSPMEM    DS    CL8\nSPGEN    DS    F\nMGFLAG   DS    CL4\n*\nEVALADDR DS    F\nEXCOM    DS    A                   ADDRESS OF IRXEXCOM LOAD MODULE\nENVBADDR DS    A                   Environment Block Address\nDDNAME   DS    CL8                 PASSED DDNAME\nMEMBER   DS    CL8                 PASSED MEMBER NAME\nRC       DS    XL2                 RETURN CODE\n         EJECT\n         IRXEFPL DSECT=YES\n         EJECT\n         IRXARGTB\n         EJECT\n         IRXSHVB\n         EJECT\n         IRXEVALB\n         EJECT\n         IRXEXTE\n         EJECT\n         IRXENVB\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSEGENI": {"ttr": 47, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00W\\x01\\x16\\x18\\x7f\\x01 1\\x7f\\x11\"\\x03\\xd1\\x03\\xb9\\x00\\x00\\xd7\\xc4\\xe2\\xc5@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2016-07-05T00:00:00", "modifydate": "2020-11-12T11:22:57", "lines": 977, "newlines": 953, "modlines": 0, "user": "PDSE"}, "text": "         TITLE 'ROUTINE TO EXTRACT PDSE DIRECTORY INFORMATION'\n*-------------------------------------------------------------------*\n* NAME:         PDSEGENI                                            *\n* AUTHOR:       REM PERRETTA                                        *\n* LANGUAGE:     IBM ASM/370                                         *\n* REMARKS:      THIS ROUTINE WILL EXTRACT PDS AND PDSE DIRECTORY    *\n*               INFORMATION, USING THE GET_ALL FUNCTION OF THE      *\n*               DESERV MACRO.                                       *\n*                                                                   *\n* INVOCATION:   FROM A REXX EXEC AS FOLLOWS:                        *\n*                                                                   *\n*               DDNAME= 'PDSEFILE'                                  *\n*               X= PDSEGENI(DDNAME)                                 *\n*                                                                   *\n*               WHERE DDNAME MUST CONTAIN THE NAME OF THE ALLOCATED *\n*               PDS OR PDSE.                                        *\n*                                                                   *\n* RETURN CODES: THE FOLLOWING VALUES ARE RETURNED IN THE RESULT     *\n*               FIELD OF THE REXX EVALUATION BLOCK:                 *\n*                                                                   *\n*               RETURN CODE              DESCRIPTION                *\n*                                                                   *\n*                    0                   SUCCESSFUL INVOCATION      *\n*                   -1                   NO ARGUMENTS FOUND         *\n*                   -2                   DDNAME LENGTH ERROR        *\n*                   -3                   DDNAME IS ALL SPACES       *\n*                   -4                   DDNAME IS NOT ALLOCATED    *\n*                   -5                   OPEN ERROR                 *\n*                   -6                   IKJCT441 INVOCATION ERROR  *\n*                   -7                   DESERV INVOCATION ERROR    *\n*                   -8                   NO SMDE ENTRIES            *\n*                   -9                   LIBRARY TYPE IS NOT A PDS  *\n*                                        OR PDSE                    *\n*                   -10                  PDS OR PDSE IS NOT A       *\n*                                        PROGRAM TYPE               *\n*                   -11                  IKJCT441 INVOCATION ERROR  *\n*                   -12                  IKJCT441 INVOCATION ERROR  *\n*                                                                   *\n* INVOCATION:   INFORMATION FOR EACH PDS OR PDSE MEMBER IS RETURNED *\n*               IN THE FOLLOWING REXX STEM VARIABLES:               *\n*                                                                   *\n*                   MEMBER.0            NUMBER OF ENTRIES           *\n*                   MEMBER.N            PDS OR PDSE DIRECTORY       *\n*                                       INFORMATION                 *\n*                                                                   *\n*              REFER TO THE ASSEMBLER VARIABLE PDS_MEMBER_VARIABLE, *\n*              FOR A DESCRIPTION OF THE DIRECTORY INFORMATION THAT  *\n*              IS RETURNED IN REXX VARIABLE MEMBER.N.               *\n*                                                                   *\n* AUTHOR:       R F PERRETTA                                        *\n*               SYSTEMS CONSULTANT                                  *\n*               MILLENIUM COMPUTER CONSULTANCY (UK)                 *\n*                                                                   *\n*-------------------------------------------------------------------*\n*                                                                   *\n* UPDATED BY GP@P6 IN JUNE 2016                                     *\n* IN AN EFFORT TO ADD SUPPORT FOR MEMBER GENERATIONS.               *\n*                                                                   *\n* UPDATED BY *LBD* IN JUNE 2016 BY LIONEL DYCK                      *\n* FOR USE IN THE PDSEGEN APPLICATION. NOW ONLY SUPPORTS             *\n* PDSE V2 GENERATION DATASETS.                                      *\n*                                                                   *\n* UPDATE BY *LBD* JAN 2018 CHANGE DESERV BUFFER FROM 1024 TO 10240  *\n* TO SUPPORT LARGER PDSE MEMBER COUNTS - UP TO 22000 MEMBERS +/-    *\n*                                                                   *\n* UPDATE BY *LBD* MAY 2020 TO ADD DCBE WITH EADSCB=OK TO SUPPORT    *\n* EAV VOLUME LOCATIONS OF A PDS/PDSE.                               *\n*                                                                   *\n* UPDATE BY GAP JUNE 2020 TO RELOCATE THE DCBE POINTER TO RESOLVE   *\n* AND ISSUE IF THIS LMOD IS IN LINKLIST.                            *\n*                                                                   *\n* UPDATE BY *LBD* OCT 2020 CHANGE DESERV BUFFER FROM 10240 TO 32K   *\n* TO SUPPORT LARGER PDSE MEMBER COUNTS - UP TO ??? MEMBERS +/-      *\n*                                                                   *\n* THE MEMBER. VARIABLE LAYOUT:                                      *\n*                                                                   *\n*    FIELD    START LENGTH                                          *\n*    HEADER   1     4  PDSE                                         *\n*    MEMBER   5     8                                               *\n*    ABSGEN   14    6                                               *\n*    VRM      22    6                                               *\n*    CDATE    35    7   YYYYDDD                                     *\n*    ALIASF   43    1   Y OR N FOR ALIAS                            *\n*    MDATE    49    7   YYYYDDD                                     *\n*    MTIME    56    7   0HHMMSS                                     *\n*    USERID   63    8                                               *\n*    MMOD     72    2   HEX MOD RECORDS                             *\n*    CUR SIZE 75    5                                               *\n*    INIT SIZE 79   4                                               *\n*                                                                   *\n*-------------------------------------------------------------------*\n         TITLE 'EQUATES'\nR0       EQU   0                       REGISTER 0\nR1       EQU   1                       REGISTER 1\nR2       EQU   2                       REGISTER 2\nR3       EQU   3                       REGISTER 3\nR4       EQU   4                       REGISTER 4\nR5       EQU   5                       REGISTER 5\nR6       EQU   6                       REGISTER 6\nR7       EQU   7                       REGISTER 7\nR8       EQU   8                       REGISTER 8\nR9       EQU   9                       REGISTER 9\nR10      EQU   10                      REGISTER 10\nR11      EQU   11                      REGISTER 11\nR12      EQU   12                      REGISTER 12\nR13      EQU   13                      REGISTER 13\nR14      EQU   14                      REGISTER 14\nR15      EQU   15                      REGISTER 15\nZERO     EQU   X'00'                   ZERO\nSPACE    EQU   C' '                    SPACE\nSIGNF    EQU   X'F0'                   POSITIVE SIGN\nMAIN_AMODE24   EQU   X'00'             MAIN  AMODE 24  IN PMAR\nMAIN_AMODE31   EQU   X'02'             MAIN  AMODE 31  IN PMAR\nMAIN_AMODEANY  EQU   X'03'             MAIN  AMODE ANY IN PMAR\nALIAS_AMODE24  EQU   X'00'             ALIAS AMODE IN 24 IN PMAR\nALIAS_AMODE31  EQU   X'08'             ALIAS AMODE 31  IN PMAR\nALIAS_AMODEANY EQU   X'0C'             ALIAS AMODE ANY IN PMAR\nPDSEGENI RSECT\nPDSEGENI AMODE 31\nPDSEGENI RMODE ANY\n         BAKR  R14,0                   SAVE CALLERS ARS + GPRS\n*                                      IN THE LINKAGE STACK\n         USING PDSEGENI,R12            INFORM THE ASSEMBLER\n         LAE   R12,0(R15,0)            SETUP PROGRAM BASE REGISTER\n         LR    R3,R1                   SAVE PARMS\n         USING EFPL,R3                 ADDR REXX FUNC PARMS\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE OBTAIN,                                               X\n               LENGTH=(R9),                                            X\n               ADDR=(R10),                                             X\n               SP=0,                                                   X\n               KEY=8,                                                  X\n               LOC=BELOW,                                              X\n               COND=NO,                                                X\n               RELATED=(FREEWORK,'FREE WORK AREA')\n         LAE   R13,0(R10,0)            @ THE WORKAREA\n         USING SAVEAREA,R13            INFORM THE ASSEMBLER\n         LA    R0,SAVEAREA              @ THE WORKAREA\n         ICM   R1,B'1111',=AL4(WORKALEN) LENGTH\n         SR    R14,R14                 ZEROFILL\n         SR    R15,R15                 PROBAGATE\n         MVCL  R0,R14                  CLEAR THE AREA\n         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA\n*                                      TO INDICATE STATUS SAVED ON\n*                                      THE LINKAGE STACK.\n         TITLE 'MAIN PROGRAM CONTROL'\nCONTROL  EQU   *\n         BAS   R2,INIT                 PERFORM INITIALIZATION\n         BAS   R2,GETARGS              GET THE PDS/PDSE DDNAME\n         LTR   R15,R15                 DDNAME OBTAINED?\n         BNZ   RETURN                  NO\n         BAS   R2,OPEN                 OPEN THE PDSE\n         LTR   R15,R15                 LIBRARY OPENED?\n         BNZ   RETURN                  NO\n         BAS   R2,DESERV               ISSUE THE DESERV\n         LTR   R15,R15                 DE OBTAINED?\n         BNZ   CLOSE_PDSE              NO\n         BAS   R2,PROCESS_SMDE         PROCESS THE SMDE ENTRIES\nCLOSE_PDSE EQU *\n         BAS   R2,CLOSE                CLOSE THE PDSE\nRETURN   EQU   *\n         LAE   R1,0(R13,0)             ADDRESS TO FREE\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE RELEASE,                                              X\n               ADDR=(R1),                                              X\n               LENGTH=(R9),                                            X\n               SP=0,                                                   X\n               KEY=8,                                                  X\n               COND=NO,                                                X\n               RELATED=(GETWORK,'OBTAIN WORK AREA')\nEXIT     EQU   *\n         XR    R15,R15                 SWITCH THE RETURN CODE\n         PR                            RESTORE CALLER'S ARS\n*                                      GPR'S 2-14 AND RETURN\n*                                      TO CALLER\n         TITLE 'LETS DO SOME INITIALIZATION'\nINIT     EQU   *\n*...................................................................\n*                                                                  .\n*  LET'S ADDRESS THE CVT AND BITS.                                 .\n*...................................................................\n         USING PSA,0                   INFORM THE ASSEMBLER\n         L     R8,FLCCVT               @ OF THE CVT\n         USING CVT,R8                  INFORM THE ASSEMBLER\n         MVC   PDSEDCB,PDSECB          SETUP PDSE DCB AREA\n         MVC   OPENARA,OPENLST         SETUP OPEN MACRO AREA\n         MVC   CLOSEARA,CLOSELST       SETUP CLOSE MACRO AREA\n         MVC   DSABAREA,DSABLST        SETUP GETDSAB MACRO AREA\n         LA    R9,PDSEDCB              @ PDSE DCB\n         USING IHADCB,R9               INFORM THE ASSEMBLER\n         ZAP   STEMNO,=P'0'            SET TO ZERO\n         BR    R2                      RETURN TO CALLER\n         TITLE 'GET THE REXX ARGUMENT'\n*...................................................................\n*                                                                  .\n* GET THE PDS OR PDSE ALLOCATED DDNAME.                            .\n*...................................................................\nGETARGS  EQU   *\n         XR    R15,R15                 ZEROIZE\n         L     R4,EFPLEVAL             ADDR OF ADDR\n         L     R4,0(,R4)               REXX EVAL BLOCK ADDR\n         USING EVALBLOCK,R4            ADDRESS IT\n         L     R5,EFPLARG              REXX ARG LIST\n         USING ARGTABLE_ENTRY,R5       ADDRESS ARG TABLE\n         CLC   0(4,R5),=XL4'FFFFFFFF'  ANY ARGS?\n         BNE   PROCARGS                YES - SOMETHING IS THERE\n         MVC   EVALBLOCK_EVLEN(4),=F'2'   SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-1' MOVE IN RESULT DATA\n         LA    R15,4(0,0)              SET RC = 4\n         BR    R2                      RETURN TO CALLER\n*------------------------------------------------------------------ *\n* PROCESS THE FIRST ARG PASSED IN THE REXX COMMAND. THIS MUST BE    *\n* THE DDNAME OF THE ALLOCATED PDS OR PDSE.                          *\n*------------------------------------------------------------------ *\nPROCARGS EQU   *\n         L     R6,ARGTABLE_ARGSTRING_PTR     R6 POINTS TO ARG\n         L     R7,ARGTABLE_ARGSTRING_LENGTH  R7 POINTS TO LENGTH\n         C     R7,=F'8'                LENGTH > 8?\n         BH    LENERR                  YES - ERROR\n         BCTR  R7,0                    -1 FOR MVC\n         EX    R7,DDNSPACE             ALL SPACES?\n         BE    ALLSPACE                YES\n         MVI   DDNAME,C' '             CLEAR THEDDNAME\n         MVC   DDNAME+1(L'DDNAME-1),DDNAME FIELD TO BLANKS\n         EX    R7,DDNMOVE              MOVE THE PDS/PDSE DDN\n         GETDSAB DDNAME=DDNAME,        POINT TO THE DDNAME             X\n               DSABPTR=DSABPTR,        DSAB POINTER                    X\n               MF=(E,DSABAREA)         GETDSAB MACRO AREA\n         LTR   R15,R15                 DSAB FOUND?\n         BNZ   DDNALLOC                NO\n         XR    R15,R15                 ALL OK\n         MVC   EVALBLOCK_EVLEN(4),=F'1'    SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'0'   MOVE IN RESULT DATA\n         BR    R2                      RETURN TO CALLER\nLENERR   EQU   *\n         MVC   EVALBLOCK_EVLEN(4),=F'2'    SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-2'  MOVE IN RESULT DATA\n         LA    R15,4(0,0)                  SET RC = 4\n         BR    R2                      RETURN TO CALLER\nALLSPACE EQU   *\n         MVC   EVALBLOCK_EVLEN(4),=F'2'    SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-3'  MOVE IN RESULT DATA\n         LA    R15,4(0,0)                  SET RC = 4\n         BR    R2                      RETURN TO CALLER\nDDNALLOC EQU   *\n         MVC   EVALBLOCK_EVLEN(4),=F'2'    SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-4'  MOVE IN RESULT DATA\n         LA    R15,4(0,0)                  SET RC = 4\n         BR    R2                      RETURN TO CALLER\nDDNMOVE  MVC   DDNAME(*-*),0(R6)       MOVE THE PDS/PDSE DDN\nDDNSPACE CLC   0(*-*,R6),=8X'40'       ALL SPACES\n         TITLE 'OPEN THE PDS OR PDSE'\nOPEN     EQU   *\n*...................................................................\n*                                                                  .\n* OPEN THE PDS/PDSE.                                               .\n*                                                                  .\n*...................................................................\n         XR    R15,R15                 ZEROIZE\n         MVC   DCBDDNAM,DDNAME         PDS/PDSE DDNAME\n         LA    R1,IHADCB+(DCBE-PDSECB) RELOCATED DCBE ADDRESS  *GAP*\n         ST    R1,DCBDCBE              STORE POINTER IN DCB    *GAP*\n         LA    R1,OPENARA              @ THE OPEN AREA CB\n         OPEN  ((R9),INPUT),MODE=31,MF=(E,(R1)) OPEN THE PDSE\n         TM    DCBOFLGS,DCBOFOPN       OPEN SUCCESSFUL?\n         BZ    OPENERR                 NO - LET'S ABEND\n         MVC   ISITAREA,ISITLST        PRIME PARAMETER LIST\n         USING ISM,ISITAREA\n         ISITMGD DCB=(R9),DATATYPE=YES,MF=(E,ISITAREA)\n         LAM   R0,R0,ZEROS             CLEAR AR0\n         BR    R2                      RETURN TO CALLER\nOPENERR  EQU   *\n         MVC   EVALBLOCK_EVLEN(4),=F'2'   SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-5' MOVE IN RESULT DATA\n         LA    R15,4(0,0)              SET RC = 4\n         BR    R2                      RETURN TO CALLER\n         TITLE 'CLOSE THE PDS OR PDSE'\nCLOSE    EQU   *\n*...................................................................\n*                                                                  .\n* CLOSE THE PDS/PDSE.                                              .\n*                                                                  .\n*...................................................................\n         LA    R1,CLOSEARA                @ THE CLOSE AREA CB\n         CLOSE ((R9)),MODE=31,MF=(E,(R1)) CLOSE TAPE DATASET\n         BR    R2                      RETURN TO CALLER\n         TITLE 'ISSUE THE DESERV MACRO'\n*...................................................................\n*                                                                  .\n* DESERV INVOCATION                                                .\n*                                                                  .\n*...................................................................\nDESERV   EQU   *\n         STCM  R2,B'1111',DESERV_ENTRY STORE THE RETURN ADDRESS\n         MVC   DESERVA,DESERVL         MOVE THE DESERV PARAMETER AREA\n         TM    ISMOFLG2,ISMMGENS       GENERATIONS ENABLED?\n         BO    DSRVGEN                 YES\n         DESERV FUNC=GET_ALL,          GET ALL                         X\n               AREAPTR=DESERV_BUFFER@, BUFFER ADDRESS                  X\n               CONCAT=0,               FIRST PDSE IN CONCATENATION     X\n               CONN_INTENT=NONE,       NO CONNECTION                   X\n               DCB=(R9),               DCB ADDRESS                     X\n               ENTRY_GAP=0,            NO RESERVED SPACE               X\n               RETCODE=DESERV_RETCODE, RETURN CODE                     X\n               RSNCODE=DESERV_RSNCODE, REASON CODE                     X\n               MF=(E,DESERVA)          RE-ENTRANT AREA\n         B     DSRVOVER\nDSRVGEN  L     R0,DESERV_BFL           GET ARBITRARY BUFFER SIZE\n         GETMAIN RU,LV=(0),LOC=(31,64) GET A BUFFER FOR DESERV\n         ST    R1,DESERV_BUFFER@       SAVE THE STORAGE ADDRESS\n         LR    R2,R1                   POINT TO THE NEW STORAGE\n         L     R0,DESERV_BFL           IN CASE SVC CHANGED GPR0\n         DESERV FUNC=GET_ALL_G,        GET ALL GENERATIONS             X\n               AREA=((R2),(R0)),       BUFFER ADDRESS AND LENGTH       X\n               DCB=(R9),               DCB ADDRESS                     X\n               RETCODE=DESERV_RETCODE, RETURN CODE                     X\n               RSNCODE=DESERV_RSNCODE, REASON CODE                     X\n               MF=(E,DESERVA)          RE-ENTRANT AREA\nDSRVOVER LMH   R15,R1,ZEROS            CLEAR REGISTER HIGH HALVES\n         LTR   R15,R15                 DESERV OK?\n         BZ    DESERV_EXIT             YES\n         MVC   ECODE,=AL4(TSVEUPDT)    UPDATE OR CREATE A VARIABLE\n         LA    R15,DESERV_RC           DESERV RC VAR NAME\n         STCM  R15,B'1111',PVARPTR     STORE IN PARAMETER LIST\n         LA    R15,L'DESERV_RC(0,0)    VARIABLE NAME LENGTH\n         STCM  R15,B'1111',PVARLEN     STORE IN PARAMETER LIST\n         LA    R15,DESERV_RETCODE      @ OF VARIABLE VALUE\n         STCM  R15,B'1111',PVARVAL@    STORE IN PARAMETER LIST\n         LA    R15,L'DESERV_RETCODE(0,0) LENGTH OF VARIABLE AREA\n         STCM  R15,B'1111',PVARVALL    LENGTH OF VARIABLE VALUE\n         BAS   R2,IKJCT441             CALL IKJCT441\n         LTR   R15,R15                 ALL OK?\n         BNZ   DESERV_EXIT             NO - LET'S QUIT\n         MVC   ECODE,=AL4(TSVEUPDT)    UPDATE OR CREATE A VARIABLE\n         LA    R15,DESERV_RSN          DESERV RC VAR NAME\n         STCM  R15,B'1111',PVARPTR     STORE IN PARAMETER LIST\n         LA    R15,L'DESERV_RSN(0,0)   VARIABLE NAME LENGTH\n         STCM  R15,B'1111',PVARLEN     STORE IN PARAMETER LIST\n         LA    R15,DESERV_RSNCODE      @ OF VARIABLE VALUE\n         STCM  R15,B'1111',PVARVAL@    STORE IN PARAMETER LIST\n         LA    R15,L'DESERV_RSNCODE(0,0) LENGTH OF VARIABLE AREA\n         STCM  R15,B'1111',PVARVALL    LENGTH OF VARIABLE VALUE\n         BAS   R2,IKJCT441             CALL IKJCT441\n         LTR   R15,R15                 ALL OK?\n         BNZ   DESERV_EXIT             NO - LET'S QUIT\n         MVC   EVALBLOCK_EVLEN(4),=F'2'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-7' MOVE IN RESULT DATA\n         B     DESERV_EXIT             LET'S QUIT\nDESERV_EXIT EQU *\n         ICM   R2,B'1111',DESERV_ENTRY RETURN ADDRESS\n         BR    R2                      RETURN TO CALLER\n         TITLE 'PROCESS THE SMDE ENTRIES'\n*...................................................................\n*                                                                  .\n* PROCESS THE SMDE ENTRIES                                         .\n*                                                                  .\n*...................................................................\nPROCESS_SMDE  EQU *\n         STCM  R2,B'1111',PROCESS_SMDE_ENTRY STORE THE RETURN ADDRESS\n         XR    R15,R15                 INIT\n         ICM   R3,B'1111',DESERV_BUFFER@ DESERV BUFFER ADDRESS\nPROCESS_DESB  EQU *\n         USING DESB,R3                 INFORM THE ASSEMBLER\n         ICM   R5,B'1111',DESB_COUNT   ANY SMDE ENTRIES?\n         BNZ   ADDRESS_SMDE_ENTRIES    YES\n         MVC   EVALBLOCK_EVLEN(4),=F'2'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-8' MOVE IN RESULT DATA\n         B     FREE_DE_STORAGE         LET'S FREE THE STORAGE\nADDRESS_SMDE_ENTRIES EQU *\n         LA    R6,L'DESB_FIXED(,R3)    POSITION ONTO FIRST SMDE\n         USING SMDE,R6                 INFORM THE ASSEMBLER\n         CLI   SMDE_LIBTYPE,SMDE_LIBTYPE_PDSE  PDSE?\n         BE    CHK_FOR_LMOD            YES\n         CLI   SMDE_LIBTYPE,SMDE_LIBTYPE_PDS   PDS?\n         BE    CHK_FOR_LMOD            YES\n         MVC   EVALBLOCK_EVLEN(4),=F'2'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-9' MOVE IN RESULT DATA\n         B     FREE_DE_STORAGE         LET'S FREE THE STORAGE\nCHK_FOR_LMOD EQU *\n         MVI   P_MEMBER,C' '           CLEAR REXX MEMBER VARIABLE\n         MVC   P_MEMBER+1(PDS_MEMBER_LENGTH-1),P_MEMBER\n         MVI   P_MTYPE,C'P'             FLAG MEMBER IS PROGRAM\n         TM    SMDE_FLAG,SMDE_FLAG_LMOD LMOD?\n         BO    BUILD_DE_VARS            YES\n         MVI   P_MTYPE,C'N'             FLAG MEMBER HAS NO USERDATA\n**       MVC   EVALBLOCK_EVLEN(4),=F'3' SET LENGTH OF RESULT\n**       MVC   EVALBLOCK_EVDATA(3),=C'-10' MOVE IN RESULT DATA\n**       B     FREE_DE_STORAGE         LET'S FREE THE STORAGE\nBUILD_DE_VARS EQU *\n         XC    R15_SAVE,R15_SAVE       RESET\n         MVC   P_TYPE,=CL4'PDSE'       DEFAULT\n         TM    SMDE_LIBTYPE,SMDE_LIBTYPE_PDSE PDSE?\n         BO    SMDE_ALIAS              YES\n         MVC   P_TYPE,=CL4'PDS '       SET TO PDS\nSMDE_ALIAS  EQU *\n         MVC   P_TTR,SMDE_MLT          MLT OF MEMBER\n         MVI   P_ALIAS,C'Y'            DEFAULT              *LBD*\n         TM    SMDE_FLAG,SMDE_FLAG_ALIAS ALIAS?\n         BO    SMDE_DE_PRIMARY_NAME    YES, CANNOT BE A GENERATION\n         MVI   P_ALIAS,C'N'            MAIN PROGRAM\n         B     SMDE_MEMBER_NAME        GET THE MEMBER NAME\nSMDE_DE_PRIMARY_NAME EQU *\n         XR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',SMDE_PNAME_OFF PRIMARY NAME\n         BZ    SMDE_MEMBER_NAME        NO THERE. GET THE MEMBER NAME\n         LA    R7,0(R7,R6)             POSITION ONTO SMDE_NAME\n         USING SMDE_PNAME,R7           INFORM THE ASSEMBLER\n         XR    R14,R14                 ZEROIZE\n         ICM   R14,B'0011',SMDE_PNAME_LEN MEMBER NAME OFFSET\n         BCTR  R14,0                   -1 FOR MVC\n         EX    R14,MEMBER_PNAME_MOVE   MOVE THE MEMBER NAME\nSMDE_MEMBER_NAME EQU *\n         XR    R7,R7                   ZEROIZE\n         TM    ISMOFLG2,ISMMGENS       GENERATIONS ENABLED?\n         BZ    SMDE_DE_NOT_GEN_NAME    NO\n         ICM   R7,B'0011',SMDE_GENE_OFF GENERATION SECTION\n         BZ    SMDE_DE_NOT_GEN_NAME    NO THERE. GET THE MEMBER NAME\n         LA    R7,0(R7,R6)             POSITION ONTO SMDE_GENE\n         USING SMDE_GENE,R7            INFORM THE ASSEMBLER\n         MVC   P_MEMBER,SMDE_GENE_NAME LOAD MEMBER NAME\n* ADDED TO TEST FOR A DUMMY GENERATION AND FLAG IT\n         MVI   P_FLAG,C' '\n         TM    SMDE_GENE_FLGS1,SMDE_IS_DUMMY   DUMMY?\n         BZ    NOT_DUMMY\n         MVI   P_FLAG,C'D'\nNOT_DUMMY DS 0H\n         ICM   R0,15,SMDE_GENE_NUMBER  ABSOLUTE GENERATION NUMBER\n         CVD   R0,DBL\n         MVC   P_GEN#,ED7\n         ED    P_GEN#,DBL+4\n         MVC   DW,SMDE_GENE_TIMESTAMP  COPY STCK VALUE\n         MVC   P_USER,SMDE_GENE_USERID\n         LM    R14,R15,DW              LOAD STCK VALUE\n         L     R1,FLCCVT               CVT\n         L     R1,CVTEXT2-CVT(,R1)     OS/VS2 COMMON EXTENSION\n         USING CVTXTNT2,R1\n         AL    R15,CVTLDTOR            ADD CVTLDTO RIGHT WORD\n         BC    12,GENFMTL2             CVTLDTO = LOCAL DATE/TIME OFFSET\n         ALR   R14,R0                  CARRY ONE FROM OVERFLOW\nGENFMTL2 AL    R14,CVTLDTOL            ADD CVTLDTO LEFT WORD\n         SL    R15,CVTLSOL             SUBTRACT CVTLSO LOW WORD\n         BC    3,GENFMTL3              CVTLSO = LEAP SECOND OFFSET\n         SR    R14,R0                  BORROW ONE FROM OVERFLOW\nGENFMTL3 SL    R14,CVTLSOH             SUBTRACT CVTLSO HIGH WORD\n         STM   R14,R15,DW              SAVE THE LOCALIZED STCK VALUE\n         DROP  R1                      CVTXTNT2\n         STCKCONV STCKVAL=DW,          POINT TO INPUT STCK VALUE       +\n               CONVVAL=QW,             POINT TO OUTPUT FOUR WORDS      +\n               TIMETYPE=DEC,           GET TIME DECIMAL DIGITS         +\n               DATETYPE=YYYYDDD,       SPECIFY DATE FORMAT             +\n               MF=(E,STCKCNVL)         SPECIFY PARAMETER LIST\n         L     R0,QW+8                 GET 0YYYYDDD\n         SLL   R0,4                    GET YYYYDDD0\n         OILL  R0,X'F'                 GET YYYYDDDF\n         ST    R0,DW\n         UNPK  P_DATE,DW(4)            LOAD THE DATE\n         L     R0,QW                   GET HHMMSSTH\n         SRL   R0,4                    GET 0HHMMSST\n         OILL  R0,X'F'                 GET 0HHMMSSF\n         ST    R0,DW\n         UNPK  P_TIME,DW(4)            LOAD THE TIME\n         XR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',SMDE_USRD_OFF GET USERDATA OFFSET\n         BZ    BUILD_REXX_VAR          THAT'S ALL FOR THIS MEMBER\n         LA    R7,0(R7,R6)             POSITION ONTO USERDATA\n         TM    ISMOFLG3,ISMDTPGM       PROGRAM LIBRARY?\n         BO    SMDE_IS_PGMLIB          YES\n         TM    DCBRECFM,DCBRECU        RECFM=U?\n         BNO   SMDE_LOOKAT_USERDATA    NO, NOT A PROGRAM LIBRARY\n         CLI   0(R7),30                REALLY PMAR+1?\n         BNO   SMDE_LOOKAT_USERDATA    NO, NOT A PROGRAM LIBRARY\nSMDE_IS_PGMLIB EQU *\n         BCTR  R7,0                    YES, BACK UP ONE\n         MVI   P_MTYPE,C'P'            FLAG MEMBER IS PROGRAM\n         B     SMDE_LOOKAT_PMAR        GO LOOK AT PROGRAM ATTRIBUTES\nSMDE_DE_NOT_GEN_NAME EQU *\n         ICM   R7,B'0011',SMDE_NAME_OFF MEMBER NAME OFFSET\n         BZ    BUILD_REXX_VAR          THIS SHOULD NOT HAPPEN\n         LA    R7,0(R7,R6)             POSITION ONTO SMDE_NAME\n         USING SMDE_NAME,R7            INFORM THE ASSEMBLER\n         XR    R14,R14                 ZEROIZE\n         ICM   R14,B'0011',SMDE_NAME_LEN MEMBER NAME OFFSET\n         BCTR  R14,0                   -1 FOR MVC\n         EX    R14,MEMBER_NAME_MOVE    MOVE THE MEMBER NAME\n         XR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',SMDE_PMAR_OFF PROGRAM MANAGEMENT\n*                                      ATTRIBUTE RECORD OFFSET\n**LBD*   BZ    PROCESS_NEXT_SMDE       THIS SHOULD NOT HAPPEN\n         BZ    BUILD_REXX_VAR  *LBD*   THIS SHOULD NOT HAPPEN\n         LA    R7,0(R7,R6)             POSITION ONTO THE PMAR\n         CLI   P_MTYPE,C'P'            IS MEMBER A PROGRAM?\n         BE    SMDE_LOOKAT_PMAR        YES, THE USERDATA IS THE PMAR\nSMDE_LOOKAT_USERDATA EQU *\n         SR    R0,R0                   NO PMAR BUT HAVE USERDATA\n         ICM   R0,3,SMDE_USRD_LEN      GET THE USERDATA LENGTH\n         CHI   R0,4                    SSI?\n         BNE   SMDE_ISPF_STATS         NO, GO CHECK FOR ISPF STATS\n         MVC   P_SSI,0(R7)             LOAD MEMBER SSI\n         B     BUILD_REXX_VAR          THAT'S ALL FOR THIS MEMBER\nSMDE_ISPF_STATS EQU *\n         USING SPFSTATS,R7             INFORM THE ASSEMBLER\n         CHI   R0,30                   CLASSIC ISPF USERDATA LENGTH?\n         BNE   SMDE_XTND_STATS         NO\n         TM    SPFFLAGS,SPFXSTAT       EXTENDED STATISTICS?\n         BO    BUILD_REXX_VAR          YES, SO NOT ISPF STATS\n         B     SMDE_TEST_STATS         NO, AS EXPECTED\nSMDE_XTND_STATS EQU *\n         CHI   R0,40                   EXTENDED ISPF USERDATA LENGTH?\n         BNE   BUILD_REXX_VAR          NO, NOT ISPF STATISTICS\n         TM    SPFFLAGS,SPFXSTAT       EXTENDED STATISTICS?\n         BNO   BUILD_REXX_VAR          NO, SO NOT ISPF STATS\nSMDE_TEST_STATS EQU *\n         CLI   SPFVM,0                 VALID VERSION?\n         BE    BUILD_REXX_VAR          NO\n         CLI   SPFVM,99                VALID VERSION?\n         BH    BUILD_REXX_VAR          NO\n         CLI   SPFVM+1,99              VALID LEVEL?\n         BH    BUILD_REXX_VAR          NO\n         TM    SPFCREDT+3,X'0F'        EXPECTED DATE FORMAT?\n         BNO   BUILD_REXX_VAR          NO\n         TM    SPFCHGDT+3,X'0F'        EXPECTED DATE FORMAT?\n         BNO   BUILD_REXX_VAR          NO\n         TP    SPFCREDT                EXPECTED DATE FORMAT?\n         BNZ   BUILD_REXX_VAR          NO\n         TP    SPFCHGDT                EXPECTED DATE FORMAT?\n         BNZ   BUILD_REXX_VAR          NO\n         MVC   P_SSI(2),SPFMOD         MOVE MODIFIED COUNT *LBD*\n         MVI   P_MTYPE,C'I'            FLAG ISPF STATISTICS LOADED\n         SR    R0,R0\n         IC    R0,SPFVM\n         CVD   R0,DW\n         OI    DW+7,X'0F'\n         UNPK  P_VVMM(2),DW            LOAD MEMBER VERSION LEVEL\n         MVI   P_VVMM+2,C'.'           SUPPLY PERIOD\n         IC    R0,SPFVM+1\n         CVD   R0,DW\n         OI    DW+7,X'0F'\n         UNPK  P_VVMM+3(2),DW          LOAD MEMBER MODIFICATION LEVEL\n         ICM   R0,12,SPFHHMM           GET HHMM????\n         ICM   R0,2,SPFSECS            GET HHMMSS??\n         SRL   R0,4                    GET 0HHMMSS?\n         OILL  R0,X'F'                 GET 0HHMMSSF\n         ST    R0,DW\n         UNPK  P_TIME,DW(4)            LOAD THE LAST CHANGE TIME\n         AP    SPFCHGDT,=P'1900000'\n         OI    SPFCHGDT+3,X'0F'        RESTORE EXPECTED SIGN CODE\n         UNPK  P_DATE,SPFCHGDT         LOAD THE LAST CHANGE DATE\n         AP    SPFCREDT,=P'1900000'\n         OI    SPFCREDT+3,X'0F'        RESTORE EXPECTED SIGN CODE\n         UNPK  P_IDATE,SPFCREDT        LOAD THE CREATION DATE\n         MVC   P_USER,SPFUSER          LOAD THE USER ID\n         XC    P_VSTOR,P_VSTOR         PREPARE FOR HALFWORD\n         MVC   P_VSTOR+2(2),SPFCCNT     AND ISPF CURRENT SIZE\n         XC    P_EPA,P_EPA             PREPARE FOR HALFWORD\n         MVC   P_EPA+2(2),SPFICNT       AND ISPF INITIAL SIZE\n         TM    SPFFLAGS,SPFXSTAT       EXTENDED STATISTICS?\n         BNO   BUILD_REXX_VAR          NO, THAT'S ALL FOR THIS MEMBER\n         MVC   P_VSTOR,SPFXCCNT        YES, GET ISPF CURRENT SIZE\n         MVC   P_EPA,SPFXICNT               AND ISPF INITIAL SIZE\n         B     BUILD_REXX_VAR          THAT'S ALL FOR THIS MEMBER\nSMDE_LOOKAT_PMAR EQU *\n         USING PMAR,R7                 INFORM THE ASSEMBLER\n         IC    R0,P_APFCDE+L'P_APFCDE  APF CODE\n         UNPK  P_APFCDE(L'P_APFCDE+1),PMAR_AC(L'PMAR_AC+1)\n         TR    P_APFCDE,HEX-C'0'\n         STC   R0,P_APFCDE+L'P_APFCDE\n         MVC   P_VSTOR,PMAR_STOR       VIRTUAL STORAGE REQUIRED\n         MVC   P_EPA,PMAR_EPA          ENTRY POINT ADDRESS\n         TM    PMAR_ATR3,PMAR_XSSI     SSI PRESENT?\n         BNO   TEST_RMODE              NO\n         MVC   P_SSI,PMAR_SSI          SSI\nTEST_RMODE EQU *\n         MVC   P_RMODE,=CL3'ANY'       DEFAULT\n         TM    PMAR_ATR4,PMAR_RMOD     RMODE = ANY?\n         BO    TEST_AMODE              YES\n         MVC   P_RMODE,=CL3' 24'       DEFAULT\nTEST_AMODE EQU *\n         MVC   P_AMODE,=CL3'ANY'       AMODE ANY\n         TM    PMAR_ATR4,MAIN_AMODEANY AMODE ANY?\n         BO    TEST_ALIAS_AMODE        YES\n         MVC   P_AMODE,=CL3' 31'       DEFAULT\n         TM    PMAR_ATR4,MAIN_AMODE31  AMODE31?\n         BO    TEST_ALIAS_AMODE        YES\n         MVC   P_AMODE,=CL3' 24'       MUST BE AMODE 24\nTEST_ALIAS_AMODE EQU *\n*                                                           *LBD*\n*        MVC   P_AAMODE,=CL3'ANY'      AMODE ANY            *LBD*\n         TM    PMAR_ATR4,ALIAS_AMODEANY AMODE ANY?\n         BO    CHECK_FOR_RENT          YES\n*        MVC   P_AAMODE,=CL3' 31'      DEFAULT              *LBD*\n         TM    PMAR_ATR4,ALIAS_AMODE31 AMODE31?\n*        BO    CHECK_FOR_RENT          YES                  *LBD*\n         MVC   P_AAMODE,=CL3' 24'      MUST BE AMODE 24\nCHECK_FOR_RENT EQU *\n         MVI   P_RENT,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_RENT     REENTERABLE?\n         BO    CHECK_FOR_REUS          YES\n         MVI   P_RENT,C'N'             NO\nCHECK_FOR_REUS EQU *\n         MVI   P_REUS,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_REUS     REUSABLE?\n         BO    CHECK_FOR_OVLY          YES\n         MVI   P_REUS,C'N'             NO\nCHECK_FOR_OVLY EQU *\n         MVI   P_OVLY,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_OVLY     OVERLAY STRUCTURE?\n         BO    CHECK_FOR_TSO_TEST      YES\n         MVI   P_OVLY,C'N'             NO\nCHECK_FOR_TSO_TEST EQU *\n         MVI   P_TEST,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_TEST     TSO/E TEST?UCTURE?\n         BO    CHECK_FOR_LOAD          YES\n         MVI   P_TEST,C'N'             NO\nCHECK_FOR_LOAD EQU *\n         MVI   P_LOAD,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_LOAD     ONLY LOADABLE?\n         BO    CHECK_FOR_EXEC          YES\n         MVI   P_LOAD,C'N'             NO\nCHECK_FOR_EXEC EQU *\n         MVI   P_EXEC,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_EXEC     EXECUTABLE?\n         BO    CHECK_FOR_SCTR          YES\n         MVI   P_EXEC,C'N'             NO\nCHECK_FOR_SCTR EQU *\n         MVI   P_SCTR,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_SCTR     EXECUTABLE?\n         BO    CHECK_FOR_1BLK          YES\n         MVI   P_SCTR,C'N'             NO\nCHECK_FOR_1BLK EQU *\n         MVI   P_1BLK,C'Y'             DEFAULT\n         TM    PMAR_ATR1,PMAR_1BLK     LOAD MODULE CONTAINS ONLY\n*                                      ONE BLOCK OF TEXT DATA AND\n*                                      HAS NO RLD RECORDS\n         BO    CHECK_FOR_TSTN          YES\n         MVI   P_1BLK,C'N'             NO\nCHECK_FOR_TSTN EQU *\n         MVI   P_TSTN,C'Y'             DEFAULT\n         TM    PMAR_ATR2,PMAR_TSTN     MODULE CONTAINS TSO/E TEST\n*                                      SYMBOL CARDS\n         BO    CHECK_FOR_REFR          YES\n         MVI   P_TSTN,C'N'             NO\nCHECK_FOR_REFR EQU *\n         MVI   P_REFR,C'Y'             DEFAULT\n         TM    PMAR_ATR2,PMAR_REFR     REFRESHABLE?\n         BO    CHECK_FOR_PAGE_ALIGNMENT YES\n         MVI   P_REFR,C'N'             NO\nCHECK_FOR_PAGE_ALIGNMENT EQU *\n         MVI   P_PAGA,C'Y'             DEFAULT\n         TM    PMAR_ATR3,PMAR_PAGA     PAGE ALIGNMENT?\n         BO    CHECK_FOR_BIG           YES\n         MVI   P_PAGA,C'N'             NO\nCHECK_FOR_BIG  EQU *\n         MVI   P_BIG,C'Y'              DEFAULT\n         TM    PMAR_ATR3,PMAR_BIG      PROGRAM REQUIRES => 16M?\n         BO    PMARL_SECTION\n         MVI   P_BIG,C'N'              NO\nPMARL_SECTION  EQU *\n         TM    PMAR_ATR3,PMAR_LFMT     PMARL FOLLOWS PMAR?\n         BNO   BUILD_REXX_VAR          YES\n         LA    R7,L'PMAR_ENTRY(,R7)    POSITION ONTO THE PMARL\n         USING PMARL,R7                INFORM THE ASSEMBLER\n         CLC   PMARL_SLEN,=X'0052'     AUDIT TRACE DATA PRESENT?\n         BL    BUILD_REXX_VAR          NO\n         UNPK  P_DATE,PMARL_DATE       DATE SAVED\n         OI    P_DATE+L'P_DATE-1,X'F0' FORCE SIGN TO F\n         UNPK  P_TIME,PMARL_TIME       TIME SAVED\n         OI    P_TIME+L'P_TIME-1,X'F0' FORCE SIGN TO F\n         MVC   P_USER,PMARL_USER       USER OR JOB IDENTIFICATION\nBUILD_REXX_VAR EQU *\n         AP    STEMNO,=P'1'            NEXT STEM NO\n         XR    R15,R15                 ZEROIZE\n         MVC   P_MEMBER_STEM,=C'MEMBER.'  MEMBER STEM PREFIX\n         UNPK  STEMWORK,STEMNO         CONVERT STEMO NO TO CHARACTER\n         OI    STEMWORK+L'STEMWORK-1,X'F0' FORCE SIGN TO F\n         LA    R14,STEMWORK            @ STEM\n         LA    R15,L'STEMWORK(0,0)     MAX LENGTH OF STEM\n         BAS   R2,STEMCHK              CALCULATE FIRST NON-ZERO STEMNO\n         XC    P_MEMBER_STEM_NO,P_MEMBER_STEM_NO NICE AND TIDY\n         BCTR  R15,0                   -1 FOR MVC\n         EX    R15,P_MEMBER_STEM_MOVE  MOVE THE STEM NO\n         LA    R15,1(,R15)             + 1 FOR EX\n         LA    R15,L'P_MEMBER_STEM(,R15) FULL LENGTH\n         LR    R14,R15                 LET'S SWITCH\n         MVC   ECODE,=AL4(TSVEUPDT)    UPDATE OR CREATE A VARIABLE\n         LA    R15,P_MEMBER_VARNAME    @ OF VARIABLE NAME\n         STCM  R15,B'1111',PVARPTR     STORE IN PARAMETER LIST\n         STCM  R14,B'1111',PVARLEN     STORE IN PARAMETER LIST\n         LA    R15,PDS_MEMBER_VARIABLE @ OF VARIABLE VALUE\n         STCM  R15,B'1111',PVARVAL@    STORE IN PARAMETER LIST\n         XR    R15,R15                 CLEAR\n         ICM   R15,B'1111',=AL4(PDS_MEMBER_LENGTH) LENGTH OF VAR\n         STCM  R15,B'1111',PVARVALL    LENGTH OF VARIABLE VALUE\n         BAS   R2,IKJCT441             CALL IKJCT441\n         LTR   R15,R15                 ALL OK?\n         BNZ   CREATE_STEM_ERROR       YES\nPROCESS_NEXT_SMDE  EQU *\n         ICM   R14,B'1111',SMDE_LEN    SMDE CONTROL BLOCK LENGTH\n         LA    R6,0(R14,R6)            NEXT ENTRY\n         BCT   R5,CHK_FOR_LMOD         DO WHILE R5 > 0?\n         ICM   R3,B'1111',DESB_NEXT    NEXT BUFFER IN CHAIN?\n         BNZ   PROCESS_DESB            PROCESS NEXT DESB\n         B     CREATE_STEM0            NO - ALL DONE\nCREATE_STEM_ERROR EQU *\n         MVC   EVALBLOCK_EVLEN(4),=F'3'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(3),=C'-11' MOVE IN RESULT DATA\n         STCM  R15,B'1111',R15_SAVE    SAVE R15 FOR A WHILE\n         B     FREE_DE_STORAGE         LET'S FREE THE STORAGE\nCREATE_STEM0   EQU *\n         MVC   ECODE,=AL4(TSVEUPDT)    UPDATE OR CREATE A VARIABLE\n         LA    R15,P_MEMBER_STEM0      VARIABLE NAME STEM.0\n         STCM  R15,B'1111',PVARPTR     STORE IN PARAMETER LIST\n         LA    R15,L'P_MEMBER_STEM0(0,0) VARIABLE NAME LENGTH\n         STCM  R15,B'1111',PVARLEN     STORE IN PARAMETER LIST\n         UNPK  STEMWORK,STEMNO         CONVERT STEMO NO TO CHARACTER\n         OI    STEMWORK+L'STEMWORK-1,X'F0' FORCE SIGN TO F\n         LA    R14,STEMWORK            @ STEM\n         LA    R15,L'STEMWORK(0,0)     MAX LENGTH OF STEM\n         BAS   R2,STEMCHK              CALCULATE FIRST NON-ZERO CHAR\n         STCM  R14,B'1111',PVARVAL@    STORE IN PARAMETER LIST\n         STCM  R15,B'1111',PVARVALL    LENGTH OF VARIABLE VALUE\n         BAS   R2,IKJCT441             CALL IKJCT441\n         LTR   R15,R15                 ALL OK?\n         BZ    FREE_DE_STORAGE         LET'S FREE THE STORAGE\n         MVC   EVALBLOCK_EVLEN(4),=F'3'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(3),=C'-12' MOVE IN RESULT DATA\n         STCM  R15,B'1111',R15_SAVE    SAVE R15 FOR A WHILE\n         B     FREE_DE_STORAGE         LET'S FREE THE STORAGE\nFREE_DE_STORAGE     EQU *\n         ICM   R3,B'1111',DESERV_BUFFER@ DESERV BUFFER ADDRESS\nINVOKE_FREE_ROUTINE EQU *\n         ICM   R0,B'1111',DESB_LEN     LENGTH\n         ICM   R7,B'1111',DESB_NEXT    NEXT BLOCK IN CHAIN\n         BAS   R2,DESB_FREEMAIN        FREE THE DESB/SMDE BLOCKS\n         LR    R3,R7                   RELOAD\n         LTR   R3,R3                   NEXT BUFFER?\n         BNZ   INVOKE_FREE_ROUTINE     FREE IT\n         ICM   R15,B'1111',R15_SAVE    RESTORE R15\n         B     PROCESS_SMDE_EXIT       ALL DONE\nPROCESS_SMDE_EXIT   EQU *\n         ICM   R2,B'1111',PROCESS_SMDE_ENTRY RETURN ADDRESDS\n         BR    R2                      RETURN TO CALLER\n         USING SMDE_NAME,R7            INFORM THE ASSEMBLER\nMEMBER_NAME_MOVE     MVC P_MEMBER(*-*),SMDE_NAME_VAL\n         USING SMDE_PNAME,R7           INFORM THE ASSEMBLER\nMEMBER_PNAME_MOVE    MVC P_PNAME(*-*),SMDE_PNAME_VAL\nP_MEMBER_STEM_MOVE   MVC P_MEMBER_STEM_NO(*-*),0(R14)\n         TITLE 'FREE DE STORAGE'\n*...................................................................\n*                                                                  .\n* FREE THE DESB/SMDE ETC                                           .\n*                                                                  .\n*...................................................................\nDESB_FREEMAIN  EQU *\n         STORAGE RELEASE,                                              X\n               ADDR=(R3),                                              X\n               LENGTH=(R0),                                            X\n               SP=0,                                                   X\n               KEY=8,                                                  X\n               COND=NO,                                                X\n               RELATED=(GETSTOR,'DESERV INVOCATION')\n         BR    R2                      RETURN TO CALLER\n         TITLE 'CREATE THE REXX VARIABLES'\n*...................................................................\n*                                                                  .\n* INVOKE THE TSO FACILITY IKJCT441                                 .\n*                                                                  .\n*...................................................................\nIKJCT441 EQU   *\n         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL\n         XC    RCODE441,RCODE441       RETURN CODE\n         L     R15,CVTTVT              TSCT @\n         USING TSVT,R15                INFORM THE ASSEMBLER\n         L     R15,TSVTVACC            IKJCT441 @\n         LTR   R15,R15                 ENTRY POINT FOUND?\n         BNZ   CALL441                 YES - DO A CALL\nLINK441  EQU   *\n         MVC   LINKAREA,LINKL          LINK SL=L\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,           ENTRY CODE                      X\n               PVARPTR,                POINTER TO PANEL VAR NAME       X\n               PVARLEN,                LENGTH  OF PANEL VAR NAME       X\n               PVARVAL@,               POINTER TO PAN VAR VALUE        X\n               PVARVALL,               LENGTH  OF PAN VAR VALUE        X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL=1,                   EOL                             X\n               MF=(E,CALLAREA),        CALL AREA                       X\n               SF=(E,LINKAREA)         LINK AREA\n         B     IKJCT441_CHECK          CHECK THE RETURN CODE\nCALL441  EQU   *\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         CALL  (15),                                                   X\n               (ECODE,                 ENTRY CODE                      X\n               PVARPTR,                POINTER TO PANEL VAR NAME       X\n               PVARLEN,                LENGTH  OF PANEL VAR NAME       X\n               PVARVAL@,               POINTER TO PAN VAR VALUE        X\n               PVARVALL,               LENGTH  OF PAN VAR VALUE        X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL,                     EOL                             X\n               MF=(E,CALLAREA)\n         B     IKJCT441_CHECK          CHECK THE RETURN CODE\nIKJCT441_CHECK EQU *\n         LTR   R15,R15                 ALL OK?\n         BZR   R2                      YES - RETURN TO CALLER\n         MVC   EVALBLOCK_EVLEN(4),=F'2'  SET LENGTH OF RESULT\n         MVC   EVALBLOCK_EVDATA(2),=C'-6' MOVE IN RESULT DATA\n         BR    R2                      RETURN TO CALLER\n*...................................................................\n*                                                                  .\n* STEM CHECK ROUTINE                                               .\n*                                                                  .\n*...................................................................\nSTEMCHK  EQU   *\n*****************************************************************\n* R14 = ADDRESS OF STEM NUMBER\n* R15 = LENGTH  OF STEM NUMBER\n*****************************************************************\nSTEMSCAN_FORNONZERO EQU *\n         CLI   0(R14),X'F0'            NON-ZERO CHARACTER?\n         BNER  R2                      YES\n         LA    R14,1(,R14)             NEXT CHARACTER\n         BCT   R15,STEMSCAN_FORNONZERO DO WHILE R15 > 0?\n         BCTR  R14,0                   RE-POSITION TO LAST CHAR\n         LA    R15,1(0,0)              SET TO 1\n         BR    R2                      RETURN TO CALLER\n         TITLE 'LITERALS'\n         LTORG\n         TITLE 'STORAGE ITEMS'\nDESERV_BFL DC   A(512*32760)  *LBD*    DESERV FUNC=GET_ALL_G BUFFER LEN\nDESERV_RC  DC   CL8'DESERVRC'          DESERV RC VAR NAME\nDESERV_RSN DC   CL8'DESERVRS'          DESERV RS VAR NAME\nP_MEMBER_STEM0 DC CL8'MEMBER.0'        MEMBER STEM 0\nECTPARM    DC   X'FFFFFFFF'            ECT\nHEX        DC   CL16'0123456789ABCDEF'\nED7        DC   XL8'4020202020202120'\nZEROS      DC   3F'0'\n         TITLE 'MACRO LIST AREA'\nDESERVL  DESERV MF=L\nDSERVLEN EQU   *-DESERVL               LENGTH\n         TITLE 'DATA MANAGEMENT ITEMS'\nPDSECB   DCB   DDNAME=REMSDCB,DSORG=PO,MACRF=EXCP,DCBE=DCBE *LBD*\nDCBE     DCBE  EADSCB=OK                             *LBD*\n*DSECB   DCB   DDNAME=REMSDCB,DSORG=PS,MACRF=GM      *LBD*\nPDCBLEN  EQU *-PDSECB                  PDSE DCB MACRO LENGTH\nOPENLST  OPEN  (,),MF=L,MODE=31\nOPENLEN  EQU *-OPENLST                 OPEN MACRO LENGTH\nCLOSELST CLOSE (,),MF=L,MODE=31\nCLOSELEN EQU *-CLOSELST                CLOSE MACRO LENGTH\nDSABEXP  GETDSAB MF=(L,DSABLST)\nDSABLLEN EQU *-DSABLST                 GETDSAB MACRO LENGTH\nISITLST  ISITMGD DCB=0,DATATYPE=YES,MF=L\nISITLEN  EQU   *-ISITLST\nLINKL    LINK SF=L\nLINKLEN  EQU  *-LINKL                  LINK LENGTH\nCALLL    CALL ,(,,,,),MF=L\nCALLLEN  EQU  *-CALLL                  CALL LENGTH\n         DC   0D\n         TITLE 'WORKAREA DSECT'\nWORKAREA DSECT\nSAVEAREA DS    XL72                    SAVEAREA\nDBL      DS    D                       WORK AREA\nPREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA\nSTEMNO   DS    PL3                     STEM NO IN PACKED FORMAT\nSTEMWORK DS    CL5                     STEM NO IN CHARACTER FORMAT\nP_MEMBER_VARNAME DS   CL12             ENTRY POINT ADDRESS\nP_MEMBER_STEM     EQU P_MEMBER_VARNAME,7   VARIABLE NAME\nP_MEMBER_STEM_NO  EQU P_MEMBER_VARNAME+7,5 VARIABLE STEM NO\nDW       DS    D                       WORK AREA\nQW       DS    4F                      WORK AREA\nDESERV_ENTRY   DS F                    DESERV RETURN ADDRESS\nPROCESS_SMDE_ENTRY  DS F               SMDE SECTION RETURN ADDRESS\nR15_SAVE DS    F                       R15 SAVE AREA\nDDNAME   DS    CL8                     PDS/PDSE DDNAME\nSTCKCNVL STCKCONV MF=L                 PARAMETER LIST FOR STCKCONV\nPDS_MEMBER_VARIABLE DS 0XL1\nP_TYPE   DS    CL4                     PDS/PDSE\nP_MEMBER DS    CL8                     MEMBER NAME\nP_PNAME  DS    CL8                     PRIMARY NAME\nP_GEN#   EQU   P_PNAME                 GENERATION NUMBER\nP_MTYPE  DS    C                       MEMBER TYPE P=PGM/I=ISPF/N=NULL\nP_VVMM   DS    0CL5                    ISPF STATISTICS VV.MM\nP_RENT   DS    C                       RENT\nP_REUS   DS    C                       REUS\nP_REFR   DS    C                       REFR\nP_OVLY   DS    C                       OVERLAY\nP_TEST   DS    C                       TEST\nP_TSTN   DS    C                       TESTN\nP_LOAD   DS    C                       ONLY LOADABLE\nP_EXEC   DS    C                       EXECUTABLE\nP_SCTR   DS    C                       SCATTER\nP_1BLK   DS    C                       NO RLD RECORDS, 1 TEXT RECORD\nP_BIG    DS    C                       PROGRAM REQUIRES 16M OR >\nP_PAGA   DS    C                       PAGE ALIGNMENT REQUIRED\n*   P_IDATE WAS 0CL7   *LBD*\nP_IDATE  DS    0CL8                    INITIAL OR CREATION DATE\nP_RMODE  DS    CL3                     RMODE\nP_AMODE  DS    CL3                     MAIN AMODE\nP_AAMODE DS    CL3                     ALIAS AMODE\nP_ALIAS  DS    C                       ALIAS\nP_APFCDE DS    CL2                     APF CODE\nP_TTR    DS    XL3                     TTR\nP_DATE   DS    CL7                     DATE\nP_TIME   DS    CL7                     TIME\nP_USER   DS    CL8                     USER/JOBNAME\nP_SSI    DS    XL4                     SSI\nP_VSTOR  DS    XL4                     VIRTUAL STORAGE REQUIRED\nP_EPA    DS    XL4                     ENTRY POINT ADDRESS\nP_INIT   DS    XL4                     ENTRY POINT ADDRESS\nP_FLAG   DS    CL1                     FLAG - DUMMY GENERATION\nPDS_MEMBER_LENGTH EQU *-PDS_MEMBER_VARIABLE LENGTH\nECODE    DC    AL4(TSVNOIMP)           CREATE CODE\nPARMLIST DS    0F\nPVARPTR  DS    F                       VAR PTR\nPVARLEN  DS    F                       VAR LEN\nPVARVAL@ DS    F                       VAR VALUE @\nPVARVALL DS    F                       VAR VAL LENGTH\nIKJTOKEN DS    F                       TOKEN\nRCODE441 DS    F                       RETURN CODE\n         DS    0F\nDESERVA  DS    CL(DSERVLEN)            DESERV AREA\nLINKAREA DS    CL(LINKLEN)             LINK AREA\nCALLAREA DS    CL(CALLLEN)             PARM LIST AREA\nPDSEDCB  DS    CL(PDCBLEN)             PDSE DCB AREA\nOPENARA  DS    CL(OPENLEN)             OPEN AREA\nCLOSEARA DS    CL(CLOSELEN)            CLOSE AREA\nISITAREA DS    CL(ISITLEN)             ISITMGD AREA\nDSABAREA DS    CL(DSABLLEN)            GETDSAB AREA\nDSABPTR  DS    A                       DSAB @\nDESERV_BUFFER@ DS A                    DESERV BUFFER ADDRESS\nDESERV_RETCODE DS A                    DESERV RETURN CODE\nDESERV_RSNCODE DS A                    DESERV REASON CODE\nWORKALEN EQU   *-WORKAREA              WORK AREA LENGTH\n\n\nSPFSTATS DSECT\nSPFVM    DS    XL2                     VERSION, LEVEL\nSPFFLAGS DS    X                       FLAGS\nSPFSCLM  EQU   X'80'                   SCLM-MANAGED\nSPFXSTAT EQU   X'20'                   EXTENDED STATISTICS\nSPFSECS  DS    X                       TIME LAST UPDATED (SS)\nSPFCREDT DS    PL4                     DATE CREATED\nSPFCHGDT DS    PL4                     DATE LAST UPDATED\nSPFHHMM  DS    XL2                     TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                       CURRENT SIZE\nSPFICNT  DS    H                       INITIAL SIZE\nSPFMOD   DS    H                       MODS\nSPFUSER  DS    CL7                     USERID\nSPFBLANK DS    CL3                     1 OR 3 BLANKS TILL Z/OS 2.4\n         ORG   SPFBLANK+1\nSPFXCCNT DS    F                       CURRENT SIZE\nSPFXICNT DS    F                       INITIAL SIZE\nSPFXMOD  DS    F                       MODS\n         TITLE 'REXX MAPPINGS'\n         IRXEFPL                       REXX MAPPING MACROS\n         IRXEVALB                      REXX EVALUATION BLOCK\n         IRXARGTB DECLARE=YES          REXX ARG TABLE\n         TITLE 'PSA DSECT'\n         IHAPSA DSECT=YES,LIST=NO\n         TITLE 'CVT'\n         CVT DSECT=YES,LIST=NO,PREFIX=NO\n         TITLE 'JESCT'\n         IEFJESCT\n         TITLE 'TSVT'\n         IKJTSVT\n         TITLE 'IHADSAB'\n         IHADSAB\n         TITLE 'SYSTEM MANAGED DIRECTORY ENTRY'\n         IGWSMDE\n         TITLE 'ISITMGD PARAMETER LIST'\n         IGWCISM DSECT=YES\n         TITLE 'DCB DSECT'\n         DCBD  DSORG=(PS),DEVD=DA\n         END   PDSEGENI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSEGMAT": {"ttr": 45, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x07 \"\\x01\\x17\\x19?\\x01\\x171\\x7f\\x122\\x00\\xb3\\x00\\xaa\\x00\\xb3\\xd7\\xc4\\xe2\\xc5@@@@\\x00\\x00\\x00\\xb3\\x00\\x00\\x00\\xaa\\x00\\x00\\x00\\xb3'", "ispf": {"version": "01.07", "flags": 32, "createdate": "2017-07-12T00:00:00", "modifydate": "2017-11-13T12:32:22", "lines": 179, "newlines": 170, "modlines": 179, "user": "PDSE"}, "text": "PDSEGMAT TITLE 'MATCH Wildcard source/pattern Rexx Function'\n* ------------------------------------------------- *\n* Routine wirtten and provided by Salvador Carrasco *\n* under the name IRXFMAT2 and renamed to PDSEGMAT   *\n* for use with PDSEGEN. No other changes were made. *\n*                                                   *\n* Recommendation: Place this into LPA for better    *\n*                 performance.                      *\n*                                                   *\n* Linkedit with RENT, REUS                          *\n*                                                   *\n* Updated 11/13/2017 by Salvador to enhance checking*\n* ------------------------------------------------- *\nPDSEGMAT RSECT\nPDSEGMAT AMODE 31\nPDSEGMAT RMODE ANY\n         YREGS\n*----------------------------------------------------------------------\n* HOUSEKEEPING\n*        R15 - Work\n*        R14 - Rexx EvalBlock\n*        R13 - Saver chain\n*        R12 - Base\n*        R11 - Rexx EFPL\n*        R10 - Rexx EFPLARG\n*        R9  - Work\n*        R8  - Work\n*        R7  - MP\n*        R6  - CP\n*        R5  - Pattern\n*        R4  - Pattern length\n*        R3  - Source\n*        R2  - Source Length\n*        R1  - n/a\n*        R0  - n/a\n*----------------------------------------------------------------------\n         SAVE  (14,12),,'PDSEGMAT MATCH SOURCE/PATTERN'\n         LR    R12,R15\n         USING PDSEGMAT,R12\n         LR    R11,R1\n         USING EFPL,R11\n         L     R10,EFPLARG\n         USING ARGTABLE_ENTRY,R10\n         L     R14,EFPLEVAL\n         L     R14,0(R14)\n         USING EVALBLOCK,R14\n*----------------------------------------------------------------------\n* arg(1) Source\n*----------------------------------------------------------------------\n         L     R3,ARGTABLE_ARGSTRING_PTR           Source Pointer\n         LTR   R3,R3\n         JM    EXITBAD\n         L     R2,ARGTABLE_ARGSTRING_LENGTH        Source length\n*----------------------------------------------------------------------\n* arg(2) Pattern\n*----------------------------------------------------------------------\n         LA    R10,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR           Pattern Pointer\n         LTR   R5,R5\n         JM    EXITBAD\n         L     R4,ARGTABLE_ARGSTRING_LENGTH        Pattern length\n*-Pseudocode-----------------------------------------------------------\n* ARG STRING,PATTERN\n* WILD = 1\n* STR = 1\n* CP = 1\n* MP = 1\n*----------------------------------------------------------------------\n         LR    R6,R3               CP\n         LR    R7,R5               MP\n         LR    R8,R3\n         AR    R8,R2               END OF STRING\n         LR    R9,R5\n         AR    R9,R4               END OF PATTERN\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(STR <= LENGTH(STRING) & SUBSTR(PATTERN,WILD,1) *= '*')\n*    IF SUBSTR(PATTERN,WILD,1) *= SUBSTR(STRING,STR,1) &,\n*       SUBSTR(PATTERN,WILD,1) *= '%' THEN RETURN -1\n*    WILD = WILD + 1\n*    STR = STR + 1\n*    END\n*----------------------------------------------------------------------\nLOOP1    CR    R3,R8\n         JNL   LOOP2\n         CLI   0(R5),C'*'\n         JE    LOOP2\n         CLC   0(1,R5),0(R3)\n         JE    LOOP1C\n         CLI   0(R5),C'%'\n         JNE   FALSE\nLOOP1C   LA    R5,1(R5)\n         LA    R3,1(R3)\n         CR    R5,R9\n         JL    LOOP1\n         CR    R3,R8\n         JNL   TRUE\n         J     FALSE\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(STR <= LENGTH(STRING))\n*----------------------------------------------------------------------\nLOOP2    CR    R3,R8\n         JNL   LOOP3\n*-Pseudocode-----------------------------------------------------------\n*   IF SUBSTR(PATTERN,WILD,1) = '*' THEN DO\n*      WILD = WILD+1\n*      IF WILD > LENGTH(PATTERN) THEN RETURN 1\n*      MP = WILD\n*      CP = STR\n*      END\n*----------------------------------------------------------------------\n         CR    R5,R9\n         JNL   LOOP22\n         CLI   0(R5),C'*'\n         JNE   LOOP21\n         LA    R5,1(R5)\n         CR    R5,R9\n         JNL   TRUE\n         LR    R7,R5\n         LR    R6,R3\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n*   ELSE IF SUBSTR(PATTERN,WILD,1)=SUBSTR(STRING,STR,1) |,\n*           SUBSTR(PATTERN,WILD,1)='%' THEN DO\n*        WILD = WILD + 1\n*        STR = STR + 1\n*        END\n*----------------------------------------------------------------------\nLOOP21   CLC   0(1,R5),0(R3)\n         JE    LOOP211\n         CLI   0(R5),C'%'\n         JNE   LOOP22\nLOOP211  LA    R5,1(R5)\n         LA    R3,1(R3)\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n*   ELSE DO\n*      WILD = MP\n*      CP = CP+1\n*      STR = CP\n*      END\n*   END\n*----------------------------------------------------------------------\nLOOP22   LR    R5,R7\n         LA    R6,1(R6)\n         LR    R3,R6\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(SUBSTR(PATTERN,WILD,1)='*')\n*    WILD = WILD + 1\n*    END\n*----------------------------------------------------------------------\nLOOP3    CLI   0(R5),C'*'\n         JNE   END\n         LA    R5,1(R5)\n         J     LOOP3\n*-Pseudocode-----------------------------------------------------------\n* IF WILD > LENGTH(PATTERN) THEN RETURN 1\n* ELSE RETURN -1\n*----------------------------------------------------------------------\nEND      CR    R5,R9\n         JNL   TRUE\nFALSE    MVI   EVALBLOCK_EVDATA,C'0'\n         J     RETURN\nTRUE     MVI   EVALBLOCK_EVDATA,C'1'\nRETURN   MVC   EVALBLOCK_EVLEN,=F'1'\n         SR    R15,R15\nRETURN2  ST    R15,16(R13)\n         LM    R14,R12,12(R13)\n         BSM   0,R14\nEXITBAD  LA    R15,16\n         J     RETURN2\n*----------------------------------------------------------------------\n* Used Maps\n*----------------------------------------------------------------------\nDUMMY    DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   PDSEGMAT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT969/CBT.V500.FILE969.PDS/ASM.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT969/CBT.V500.FILE969.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}