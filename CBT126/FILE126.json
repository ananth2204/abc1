{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011300000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE126.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE126.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x12\\n'", "DS1TRBAL": "b'@\\xf2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xca\\x00\\x0e\\x00\\xcc\\x00\\x02\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$420": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x933\\x7f\\x00\\x933\\x7f\\x05S\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-03T00:00:00", "modifydate": "1993-12-03T05:53:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GIBSON"}, "text": "\n  This library is the SP420 version of the L.L. Bean Mods and Exits.\n\n      Contributed by:  Jamie A. Gibson\n                       L.L. Bean\n                       Technical Services\n                       LL Building\n                       LL Street\n                       Freeport, ME 04033\n                       (207) 865-4761\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x930_\\x00\\x933\\x7f\\x05R\\x00\\x88\\x00~\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-12-03T05:52:00", "lines": 136, "newlines": 126, "modlines": 0, "user": "GIBSON"}, "text": "1\n  This library contains exits and modifications for SP420 that allow\n  1) Auto reply to WTOR and auto issue of commands for WTO or WTOR\n     by exit IAEVMXIT\n     Jobname  Member   Desc\n              Used\n     @SMVMXIT IEAVMXIT WTO EXIT INCLUDES R2D2 AND PSWD SUPPORT\n     @SMC3PO  IEEC3PO  SETS TABLE FOR IEAVMXIT\n     @SMC3PO  KEYSCAN  KEYWORD PARSING ROUTINE\n     @SMC3PO  C3POTABL DSECT FOR C3PO TABLE IN CSA\n     @SMC3PO  MSGENT   DSECT FOR ENTRY IN TABLE\n  2) Putting password's in JCL for non-RACF shops\n     Jobname  Member   Desc\n              Used\n     @SM0025B IGC0025B PASSWORD MOD SVC\n     @SMEXIT8 @SMEXIT8 PASSWORD MOD HASPSSSM UPDATE\n     @SMEXIT8 @SMEXIT8 PASSWORD MOD $HASPEQU UPDATE\n     @SMEXIT8 HASPSJ08 PASSWORD MOD JES2 JCT READ/WRITE EXIT (SSSM)\n     @SMEXIT4 HASPXJ04 PASSWORD MOD JES2 CONTROL CARD EXIT\n     @SMEXIT7 HASPXJ07 PASSWORD MOD JES2 JCT READ/WRITE EXIT (JES2)\n     @ZAPRDPS @ZAPRDPS PASSWORD MOD READPSWD ZAP\n      WTOR    WTOR     A PROGRAM THAT PUTS OUT REQUESTED WTO'S OR WTOR'S\n                       FOR TESTING OF IEAVMXIT.\n1\n Installation consists of submitting jobs in members starting with\n an @, updating JES2PARMS and adding an SVC.\n The JCL in the jobs will have to be updated. The name of the source\n library needs to be changed to the name of this library and the\n object library will either have to be changed to a temp or\n an object lib will have to be set up.\n *WARNING* These jobs are set up to go against system libraries\n           You may want to set them up to go against test copies.\n Member JES2PARM contains JES2 parms to be added to your JES2 parms\n Member IEASVC00 contains the entry for IEASVC00 for the SVC.\n If you want to change the SVC number make sure to change the\n SVC 252 line in IEAVMXIT.\n\n1\n\n\n  Input to IEEC3PO\n\n  IEEC3PO builds a table in CSA that IEAVMXIT uses to do replies.\n\n  The input consists of the characters /* in columns 1 and\n  2, the word PASSWORD in columns 3-10, a password beginning in column\n  12 followed by at least one blank and an optional keyword parameter\n  DSN.\n  Columns 72-80 are ignored.\n\n     _______________________________________________________________\n   /           _                 _  _             _  _          _\n   |ID=(msgid)|,CMD=('cmd')       ||,ROUTCDE=(rcde)||,DESC=(dcde)|\n              |     ('R XX,reply')||              _  _          _\n+              _                 _  _\n\n  ID=(msgid)\n      msgid is id of message to be acted on.\n\n  CMD=('cmd')\n     cmd must be in quotes. It is the command to be issued if message\n     msgid is issued\n  CMD=('R XX,reply')\n     R XX,reply must be in quotes\n     The R XX, shows this to be a reply to a WTOR instead of a command\n     reply is the the reply to be issued\n  ROUTCDE=(rcde)\n     rcde is the route codes this message is to be set to\n  DESC=(dcde)\n     dcde is the descriptor codes this message is to be set to\n\n  Examples.\n\n  ID=(IKT005I),CMD=('S CNM04'),CMD=('S RSCSLINK')\n  ID=(IKT012D),CMD=('R XX,U')\n  ID=(DFH0606),ROUTCDE=(1),DESC=(11)         /* MAKE IT NON-DELETABLE */\n1\n\n\n  The PASSWORD Statement\n\n\n  Control Statement\n\n          The PASSWORD statement permits you to specify passwords\n          for VSAM and NON-VSAM datasets.\n\n\n  The PASSWORD statement consists of the characters /* in columns 1 and\n  2, the word PASSWORD in columns 3-10, a password beginning in column\n  12 followed by at least one blank and an optional keyword parameter\n  DSN.\n  Columns 72-80 are ignored.\n\n     __________________________________________\n   /                     _       _\n   |/*PASSWORD password |parameter|\n+                        _       _\n\n  The following parameter may be coded.\n   _               _\n  |DSN=data set name|\n+  _               _\n\n\n  password\n    the password (1 to 8 characters) for specified dataset\n\n  DSN=data set name\n    The data set name (1 to 44 characters) for which password is to be\n    used.\n\n  Rules for coding\n    * If DSN= keyword parameter is not specified on a PASSWORD statement\n      the password on that statement will be used as the default\n      password\n    * If more than one PASSWORD statement has the same data set name\n      (or no data set name) the last PASSWORD statement specifying the\n      data set name is used.\n    * Place the PASSWORD statement after the job statement.\n\n\n  Example of the PASSWORD statement\n    /*PASSWORD WTFGASAW DSN=MY.DSN\n   The password WTFGASAW will be used for the data set MY.DSN\n\n\n     My address is:  Jamie A. Gibson\n                     L.L. Bean\n                     Technical Services\n                     LL Building\n                     LL Street\n                     Freeport, ME 04033\n                     (207) 865-4761\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$MODS220": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x933\\x7f\\x00\\x933\\x7f\\x05Q\\x12\\x93\\x12\\x87\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-12-03T00:00:00", "modifydate": "1993-12-03T05:51:00", "lines": 4755, "newlines": 4743, "modlines": 0, "user": "GIBSON"}, "text": "./ ADD NAME=$$$220   0100-88137-88153-1445-00011-00003-00000-GIBSON\n\n  This library is the SP220 version of the L.L. Bean Mods and Exits.\n\n      Contributed by:  Jamie A. Gibson\n                       L.L. Bean\n                       Technical Services\n                       LL Building\n                       LL Street\n                       Freeport, ME 04033\n                       (207) 865-4761\n\n./ ADD NAME=$$DOC    0100-88137-88153-1445-00136-00136-00000-GIBSON\n1\n  This library contains exits and modifications for SP220 that allow\n  1) Auto reply to WTOR and auto issue of commands for WTO or WTOR\n     by exit IAEVMXIT\n     Jobname  Member   Desc\n              Used\n     @SMVMXIT IEAVMXIT WTO EXIT INCLUDES R2D2 AND PSWD SUPPORT\n     @SMC3PO  IEEC3PO  SETS TABLE FOR IEAVMXIT\n     @SMC3PO  KEYSCAN  KEYWORD PARSING ROUTINE\n     @SMC3PO  C3POTABL DSECT FOR C3PO TABLE IN CSA\n     @SMC3PO  MSGENT   DSECT FOR ENTRY IN TABLE\n  2) Putting password's in JCL for non-RACF shops\n     Jobname  Member   Desc\n              Used\n     @SM0025B IGC0025B PASSWORD MOD SVC\n     @SMEXIT8 @SMEXIT8 PASSWORD MOD HASPSSSM UPDATE\n     @SMEXIT8 @SMEXIT8 PASSWORD MOD $HASPEQU UPDATE\n     @SMEXIT8 HASPSJ08 PASSWORD MOD JES2 JCT READ/WRITE EXIT (SSSM)\n     @SMEXIT4 HASPXJ04 PASSWORD MOD JES2 CONTROL CARD EXIT\n     @SMEXIT7 HASPXJ07 PASSWORD MOD JES2 JCT READ/WRITE EXIT (JES2)\n     @ZAPRDPS @ZAPRDPS PASSWORD MOD READPSWD ZAP\n      WTOR    WTOR     A PROGRAM THAT PUTS OUT REQUESTED WTO'S OR WTOR'S\n                       FOR TESTING OF IEAVMXIT.\n1\n Installation consists of submitting jobs in members starting with\n an @, updating JES2PARMS and adding an SVC.\n The JCL in the jobs will have to be updated. The name of the source\n library needs to be changed to the name of this library and the\n object library will either have to be changed to a temp or\n an object lib will have to be set up.\n *WARNING* These jobs are set up to go against system libraries\n           You may want to set them up to go against test copies.\n Member JES2PARM contains JES2 parms to be added to your JES2 parms\n Member IEASVC00 contains the entry for IEASVC00 for the SVC.\n If you want to change the SVC number make sure to change the\n SVC 252 line in IEAVMXIT.\n\n1\n\n\n  Input to IEEC3PO\n\n  IEEC3PO builds a table in CSA that IEAVMXIT uses to do replies.\n\n  The input consists of the characters /* in columns 1 and\n  2, the word PASSWORD in columns 3-10, a password beginning in column\n  12 followed by at least one blank and an optional keyword parameter\n  DSN.\n  Columns 72-80 are ignored.\n\n     _______________________________________________________________\n   /           _                 _  _             _  _          _\n   |ID=(msgid)|,CMD=('cmd')       ||,ROUTCDE=(rcde)||,DESC=(dcde)|\n              |     ('R XX,reply')||              _  _          _\n+              _                 _  _\n\n  ID=(msgid)\n      msgid is id of message to be acted on.\n\n  CMD=('cmd')\n     cmd must be in quotes. It is the command to be issued if message\n     msgid is issued\n  CMD=('R XX,reply')\n     R XX,reply must be in quotes\n     The R XX, shows this to be a reply to a WTOR instead of a command\n     reply is the the reply to be issued\n  ROUTCDE=(rcde)\n     rcde is the route codes this message is to be set to\n  DESC=(dcde)\n     dcde is the descriptor codes this message is to be set to\n\n  Examples.\n\n  ID=(IKT005I),CMD=('S CNM04'),CMD=('S RSCSLINK')\n  ID=(IKT012D),CMD=('R XX,U')\n  ID=(DFH0606),ROUTCDE=(1),DESC=(11)         /* MAKE IT NON-DELETABLE */\n1\n\n\n  The PASSWORD Statement\n\n\n  Control Statement\n\n          The PASSWORD statement permits you to specify passwords\n          for VSAM and NON-VSAM datasets.\n\n\n  The PASSWORD statement consists of the characters /* in columns 1 and\n  2, the word PASSWORD in columns 3-10, a password beginning in column\n  12 followed by at least one blank and an optional keyword parameter\n  DSN.\n  Columns 72-80 are ignored.\n\n     __________________________________________\n   /                     _       _\n   |/*PASSWORD password |parameter|\n+                        _       _\n\n  The following parameter may be coded.\n   _               _\n  |DSN=data set name|\n+  _               _\n\n\n  password\n    the password (1 to 8 characters) for specified dataset\n\n  DSN=data set name\n    The data set name (1 to 44 characters) for which password is to be\n    used.\n\n  Rules for coding\n    * If DSN= keyword parameter is not specified on a PASSWORD statement\n      the password on that statement will be used as the default\n      password\n    * If more than one PASSWORD statement has the same data set name\n      (or no data set name) the last PASSWORD statement specifying the\n      data set name is used.\n    * Place the PASSWORD statement after the job statement.\n\n\n  Example of the PASSWORD statement\n    /*PASSWORD WTFGASAW DSN=MY.DSN\n   The password WTFGASAW will be used for the data set MY.DSN\n\n\n     My address is:  Jamie A. Gibson\n                     L.L. Bean\n                     Technical Services\n                     LL Building\n                     LL Street\n                     Freeport, ME 04033\n                     (207) 865-4761\n\n\n./ ADD NAME=$USERCBS 0100-88137-88153-1457-00034-00034-00000-GIBSON\n         MACRO -- $USERCBS -- USER CONTROL BLOCKS\n         $USERCBS\n***********************************************************************\n*                                                                     *\n*        EQUATES USED IN EXITS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        THE FOLLOWING FLIELDS ARE USED IN THE JCT DSECT              *\n*        JCTUSER0 - THE FIRST BYTE IS USED FOR FLAGS (SEE BELOW)      *\n*        JCTUSER1 - IN STORAGE BUFFER ADDRESS OF THE \"PCT\"            *\n*        JCTUSER2 - \"PCT\" TRACK ADDRESS                               *\n*        THE FOLLOWING FLAGS ARE DEFINED FOR JCTUSER0                 *\n***********************************************************************\nJCTPW    EQU   B'10000000'     PASSWORD FLAG\nJCTPWDEF EQU   B'01000000'     DEFAULT PASSWORD SUPPLIED\n         EJECT ,\n         TITLE 'HASP PASSWORD CONTROL TABLE (PCT) DSECT'\n         SPACE 5\nPCT      DSECT                     HASP PASSWORD CONTROL TABLE DSECT\n         DS    (BUFSTART-BFPDSECT)X     BUFFER CONTROL INFORMATION\nPCTSTART EQU   *                   START OF DATA WRITTEN TO SPOOL\nPCTID    DS    CL4'PCT'            PCT IDENTIFIER\nPCTLENG  DS    AL2(*-*)            LENGTH OF PCT INCLUDING PREFIX\nPCTPWCNT DS    H\nPCTJBKEY DS    XL4                 JOB IDENTIFIER KEY\nPCTTRACK DS    XL4                 TRACK ADDRESS OF THIS PCT\nPCTPCTTR DS    XL4                 TRACK ADDRESS OF NEXT PCT\nPCTPCT   DS    A                   STORAGE ADDRESS OF NEXT PCT\nPCTENTOF DS    F                   OFFSET BEYOND LAST ENT IN OCT\n         DS    XL4                 RESERVED FOR FUTURE USE\nPCTTABL  DS    0H\n         MEND\n./ ADD NAME=@SMC3PO  0100-88137-88153-1457-00036-00036-00000-GIBSON\n//IEEC3PO  JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IEEC3PO  EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEEC3PO),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEEC3PO),DISP=SHR\n//*\n//KEYSCAN  EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(KEYSCAN),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(KEYSCAN),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(IEEC3PO)\n INCLUDE JESOBJ(KEYSCAN)\n SETCODE AC(1)\n NAME IEEC3PO(R)\n/*\n./ ADD NAME=@SMEXIT4 0100-88137-88153-1457-00022-00022-00000-GIBSON\n//@SMEXIT4 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//JESEXIT4 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ04),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ04),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(HASPXJ04)\n NAME HASPXJ04(R)\n/*\n./ ADD NAME=@SMEXIT7 0100-88137-88153-1457-00023-00023-00000-GIBSON\n//@SMEXIT7 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//JESEXIT7 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ07),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ07),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(HASPXJ07)\n NAME HASPXJ07(R)\n/*\n//*\n./ ADD NAME=@SMEXIT8 0100-88137-88153-1457-00049-00049-00000-GIBSON\n//@SMEXIT8 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//HEQUUPDT EXEC PGM=IEBUPDTE\n//SYSPRINT DD   SYSOUT=*\n//SYSUT1   DD   DSN=SYS1.HASPSRC,DISP=SHR\n//SYSUT2   DD   DSN=SYS1.HASPSRC,DISP=OLD\n//SYSIN    DD   *\n./ CHANGE NAME=$HASPEQU\n$VERPCT  EQU   $VERSWBI+1          TYPE-CODE FOR PCT        @LLB0014\n//SSSMUPDT EXEC PGM=IEBUPDTE\n//SYSPRINT DD   SYSOUT=*\n//SYSUT1   DD   DSN=SYS1.HASPSRC,DISP=SHR\n//SYSUT2   DD   DSN=SYS1.HASPSRC,DISP=OLD\n//SYSIN    DD   *\n./       CHANGE NAME=HASPSSSM\n               $USERCBS,           GENERATE USER TABLES     @LLB0014   C\n         SPACE 1                                            @LLB0014\n         ENTRY HCBGM                                        @LLB0014\n         SPACE 1                                            @LLB0014\n         ENTRY HCBFM                                        @LLB0014\n         SPACE 1                                            @LLB0014\n         ENTRY HCBRD                                        @LLB0014\n*        CHK, IOT, JCT, OCT, SWBIT AND PCT                  @LLB0014  *\n        $VERTAB TYPE=$VERPCT,ID=PCT,IDOFF=PCTID-PCT,        @LLB0014   C\n               KEYOFF=PCTJBKEY-PCT,KEYLEN=PCTJBKEY          @LLB0014\n//JESEXIT8 EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXS08),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXS08),DISP=SHR\n//*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR\n//AOSH3    DD   DSN=SYS1.AOSH3,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(HASPSSSM)\n INCLUDE AOSH3(HASPAM)\n INCLUDE JESOBJ(HASPXS08)\n ORDER HASPSSSM\n NAME HASPSSSM(R)\n/*\n./ ADD NAME=@SMVMXIT 0100-88137-88153-1457-00023-00023-00000-GIBSON\n//IEAVMXIT JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IEAVMXIT EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEAVMXIT),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEAVMXIT),DISP=SHR\n/*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(IEAVMXIT)\n SETCODE AC(1)\n NAME IEAVMXIT(R)\n//*\n./ ADD NAME=@SM0025B 0100-88137-88153-1457-00021-00021-00000-GIBSON\n//@SM0025B JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IGC0025B EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IGC0025B),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IGC0025B),DISP=SHR\n//*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(IGC0025B)\n NAME IGC0025B(R)\n./ ADD NAME=@ZAPRDPS 0100-88137-88153-1457-00045-00045-00000-GIBSON\n//@ZAPRDPS JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y\n//*\n//* DESCRIPTION:\n//*              PASSWORD MOD\n//*              CHANGE READPSWD SO MSG IEC301A (ASK OPER FOR PASSWORD)\n//*              INCLUDES DSNAME\n//*\n//STEP2    EXEC PGM=AMASPZAP\n//SYSPRINT DD   SYSOUT=*\n//SYSLIB   DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN    DD   *\n    NAME READPSWD\n    VER 004A 9502D088         .         CLI   MYCODE,K2\n    VER 004E 478030CA         .         BE    OSQ41500\n    VER 0052 9503D088         .         CLI   MYCODE,K3\n    VER 0056 478030CA         .         BE    OSQ41500\n    VER 005A 5810D2B4         .         L     R1,MYTCB\n    VER 005E 5810100C         .         L     R1,TCBIO-TCB(,R1)\n    VER 0062 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)\n    VER 0068 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K\n    VER 006E D207D0C81008     .         MVC   MYMSTEPN,\n*                             .                TIOCSTEP-TIOT(R1)\n    VER 0074 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K\n    VER 00CC D206D0B632B5     .         MVC   MYMDSN(MYMDSNN-MYMDSN),\n*                             .                OSQ4855K\n    VER 00D2 D22BD0BDD104     .         MVC   MYMDSNN(L'MYDSN),MYDSN\n    VER 00D8 4110D0E8         .         LA    R1,MYMDSNN+L'MYDSN-1\n    VER 02A6 6BC4C4D5C1D4C540 .OSQ4840K DC    C',DDNAME '\n*****                         .\n    REP 004A 5810D2B4         .         L     R1,MYTCB\n    REP 004E 5810100C         .         L     R1,TCBIO-TCB(,R1)\n    REP 0052 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)\n    REP 0058 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K\n    REP 005E D207D0C81008     .         MVC   MYMSTEPN,\n*                             .                TIOCSTEP-TIOT(R1)\n    REP 0064 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K\n    REP 006A 9502D088         .         CLI   MYCODE,K2\n    REP 006E 47F030CA         .         B     OSQ41500\n    REP 0072 9503D088         .         CLI   MYCODE,K3\n    REP 0076 478030CA         .         BE    OSQ41500\n    REP 00CC 47000000         .         NOP   0\n    REP 00D0 0700             .         NOPR  0\n    REP 00D2 D22BD0D8D104     .         MVC   MYMDDNMN(L'MYDSN),MYDSN\n    REP 00D8 4110D103         .         LA    R1,MYMDDNMN+L'MYDSN-1\n    REP 02A6 6BC4E2D5C1D4C540 .OSQ4840K DC    CL8',DSNAME '\n./ ADD NAME=C3POTBL  0100-88137-88153-1457-00018-00018-00000-GIBSON\n         MACRO\n         C3POTABL\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CSA TABLE DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nC3POTABL DSECT\nC3POID   DS    CL8\nC3PONXT  DS    A\nC3PO1ST  DS    A\nC3POEND  DS    A\nC3POLEN  DS    A\nC3PORSV  DS    A\nC3POHDRL EQU   *-C3POTABL\nC3POENT  EQU   *\n         MEND\n./ ADD NAME=HASPXJ04 0100-88137-88153-1457-00312-00312-00000-GIBSON\n         TITLE 'JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: HASPXJ04                                               *\n*                                                                     *\n* DESCRIPTION: SCAN JES2 CONTROL STAEMENTS FOR /*PASSWORD CARDS AND   *\n*              IF FOUND PROCESS THEM                                  *\n*                                                                     *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      HASPXJ04                                                       *\n*         CALLED FROM HASPRDR                                         *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO PROCESS /*PASSWORD JES2 CONTROL STAEMENTS                   *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = CODE INDICATING WHETHER A JES2 CONTROL STATEMENT OR JCL  *\n*            IS BEING PROCESSED.                                      *\n*                0 INDICATES JES2 CONTROL STATEMENT                   *\n*                4 INDICATES JCL STATEMENT                            *\n*      R1  = POINTER TO A 3 WORD PARAMETER LIST WITH FORMAT           *\n*            WORD 1 - ADDRESS OF THE CONTROL STATEMENT/JCL IMAGE BUFF *\n*            WORD 2 - ADDRESS OF THE EXIT FLAG BYTE, RDWFLAGX, IN PCE *\n*            WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT         *\n*      R10 = ADDRESS OF THE JCT                                       *\n*      R11 = ADDRESS OF THE HCT                                       *\n*      R13 = ADDRESS OF TE PCE                                        *\n*      R14 = RETURN ADDRESS                                           *\n*      R15 = ENTRY ADDRESS                                            *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      R0-R14 SAME AS ENTRY                                           *\n*      R15   RETURN CODE                                              *\n*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *\n*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*\n*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*\n*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*\n*            ATED WITH THIS EXIT, PERFORM STANDARD HASPRDR PROCESSING.*\n*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *\n*            THIS EXIT AND TO PERFORM STANDARD HASPRDR PROCESSING.    *\n*        8 - FOR JES2 CONTROL STATEMENTS, TELLS JES2 NOT TO PERFORM   *\n*            STANDARD HASPRCCS PROCESSING: INSTEAD, IMMEDIATELY       *\n*            CONVERT THE STATEMENT TO A COMMENT (//*) WITH THE NULL-ON*\n*            -INPUT FLAG SET TO ONE AND WRITE THE STATEMENT TO THE JCL*\n*            IMAGES DATA SET. FOR JCL STATEMENTS, TELLS JES2 TO       *\n*            PERFORM STANDARD HASPRDR PROCESSING.                     *\n*       12 - TELLS JES2 TO CANCEL THE JOB BECAUSE AN ILLEGAL CONTROL  *\n*            STATEMENT HAS BEEN DETECTED;                             *\n*            OUTPUT (THE INCOMPLETE JCL IMAGE) IS PRODUCED.           *\n*       16 - TELLS JES2 TO PURGE THE JOB BECAUSE AN ILLEGAL CONTROL   *\n*            STATEMENT HAS BEEN DETECTED; NO OUTPUT IS PRODUCED.      *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         PRINT ON,NOGEN\n         COPY  $HASPGBL\n         EJECT ,\nHASPXJ04 $MODULE NOTICE=NONE,                                          C\n               TITLE='JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN', C\n               RPL,                GENERATE MVS  RPL    DSECT          C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $JCT,                                                   C\n               $JQE,                                                   C\n               $PCE,                                                   C\n               $CAT,                                                   C\n               $HCT,                                                   C\n               $MIT,                                                   C\n               $MITETBL,                                               C\n               $MODMAP,                                                C\n               $RDRWORK,                                               C\n               $USERCBS,                                               C\n               $XECB,              GENERATE HASP XECB DSECT            C\n               $XIT                GENERATE HASP XIT DSECT\n         PRINT ON,GEN,NODATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR /*PASSWORD CONTROL CARD                            *\n*                                                                     *\n***********************************************************************\nUEXIT4  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT\n        $SAVE\n         USING JCT,R10\n         LR    R12,R15         LOAD BASE REGISTER\n         LTR   R0,R0           IS IT FOR JES2 CONTROL CARD ?\n         BNZ   RET0            NO, RETURN CODE 0\n         LM    R2,R4,0(R1)     LOAD POINTERS TO PARAMS\n         LTR   R4,R4           IS THERE A JCT ?\n         BZ    RET0            NO, RETURN CODE 0\n         CLC   0(10,R2),=CL10'/*PASSWORD'  IS IT A PSW CONTROL CARD ?\n         BNE   RET0            NO, RETURN CODE 0\n         MVC   JCTXWRK,=CL52' ' INITIAL TEMP PCT ENTRY TO BLANKS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK FORMAT                                                 *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG1      POINT TO ERROR MSG 1\n         CLI   10(R2),C' '     IS COL 11 A BLANK ?\n         BNE   RET12           NO, RETURN CODE 12 WITH MSG1\n         CLI   11(R2),C' '     IS COL 12 A BLANK ?\n         BE    RET12           YES, RETURN CODE 12 WITH MSG1\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        MOVE DSN TO WORK AREA AND BLANK OUT IN CONTROL CARD          *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG2      POINT TO ERROR MSG 2\n         LA    R5,11(,R2)      LOAD FOR START OF SCAN FOR BLANK\n         LA    R6,1            LOAD INCREMENT FOR BXLE\n         LA    R7,19(,R2)      LOAD FOR END OF SCAN\n         LA    R8,JCTXWRK      LOAD ADDRESS TO MOVE PW\nSCNLP1   CLI   0(R5),C' '      FOUND A BLANK ?\n         BE    SCNLP1E         YES, EXIT LOOP\n         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF PW\n         MVI   0(R5),C' '      BLANK OUT PASSWORD IN CARD\n         LA    R8,1(,R8)       BUMP POINTER\n         BXLE  R5,R6,SCNLP1    LOOP\n         B     RET12           RETURN CODE 12 WITH MSG 2\nSCNLP1E  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FIND FIRST NON-BLANK AFTER PASSWORD                          *\n*                                                                     *\n***********************************************************************\n         LA    R7,68(,R2)      LOAD FOR END OF SCAN\nSCNLP2   CLI   0(R5),C' '      FOUND NON-BLANK ?\n         BNE   SCNLP2E         YES, EXIT LOOP\n         BXLE  R5,R6,SCNLP2    NO, LOOP\n         B     SETDEF          BRANCH TO SET DEFAULT PASSWORD\nSCNLP2E  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR DSN= KEYWORD                                       *\n*                                                                     *\n***********************************************************************\n         CLC   0(4,R5),=CL4'DSN=' FOUND DSN= KW ?\n         BNE   SETDEF          NO, BRANCH TO SET DEFAULT PASSWORD\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR DSN AFTER DSN= KEYWORD                             *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG6      POINT TO ERROR MSG 6\n         LA    R7,71(,R2)      POINT TO COL 72\n         LA    R5,4(,R5)       POINT PAST KEYWORD\n         CR    R5,R7           AT END OF CARD ?\n         BNL   RET12           YES, RETURN CODE 12 WITH MSG 6\n         CLI   0(R5),C' '      IS THERE A DSN ?\n         BE    RET12           NO, RETURN CODE 12 WITH MSG 6\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        MOVE DSN TO WORK AREA                                        *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG3      POINT TO ERROR MSG 3\n         LA    R7,71(,R2)      LOAD FOR END OF SCAN\n         LA    R8,JCTXWRK+7    LOAD ADDRESS TO MOVE DSN - 1\n         LA    R9,JCTXWRK+52   LOAD END OF TABLE ENTRY\nSCNLP4   CLI   0(R5),C' '      FOUND A BLANK ?\n         BE    SCNLP4E         YES, EXIT LOOP\n         LA    R8,1(,R8)       BUMP POINTER\n         CR    R8,R9           MOVED 44 CHARS ALREADY ?\n         BE    RET12           YES, RETURN CODE 12 WITH MSG 3\n         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF DSN\n         BXLE  R5,R6,SCNLP4    LOOP\nSCNLP4E  DS    0H\n         B     SETENT1         BRANCH TO SET ENTRY IN PCT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SET DEFAULT PASSWORD SUPPLIED FLAG                           *\n*                                                                     *\n***********************************************************************\nSETDEF   DS    0H\n         OI    JCTUSER0,JCTPWDEF  SET PW DEFAULT FLAG\n         B     SETENT1         BRANCH TO SET ENTRY IN PCT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        INTIALIZE PCT                                                *\n*                                                                     *\n***********************************************************************\nSETENT1  DS    0H\n         TM    JCTUSER0,JCTPW  ALREADY BEEN HERE ONCE ?\n         BO    SETENT2         YES, SKIP GETBUF\n         OI    JCTUSER0,JCTPW  SET PW FLAG\n        $GETBUF WAIT=YES       GET BUFFER\n         LR    R2,R1           SAVE ADDRESS IN R2\n         USING PCT,R2          ADDRESS PCT\n         XC    PCTSTART(PCTTABL-PCTSTART),PCTSTART CLEAR PCT HEADER\n         MVC   PCTID,=CL4'PCT' SET PCT ID\n         LH    R0,$BUFLENG     SET BLOCK ...\n         STH   R0,PCTLENG      ... LENGTH\n         MVC   PCTJBKEY,JCTJBKEY   SET JOB KEY\n         LA    R9,PCTTABL-PCT       SET INITIAL ...\n         ST    R9,PCTENTOF         ... OFFSET\n         ST    R2,JCTUSER2     SAVE BUFFER ADDRESS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SCAN TABLE FOR DUPLICATE DSN                                 *\n*                                                                     *\n***********************************************************************\nSETENT2  DS    0H\n         L     R2,JCTUSER2     LOAD ADDRESS OF PCT\n         XC    JCTXWRK,=52X'FF' SCRAMBLE\n         LA    R5,PCTTABL      GET POINTER TO START OF TABLE\n         L     R7,PCTENTOF     GET OFFSET TO NEXT AVAILABLE ENTRY\n         LA    R7,PCT(R7)      POINT TO LAST ENTRY\n         CR    R7,R5           DOES TABLE HAVE ANY ENTRIES ?\n         BNH   SETENT3         NO, THEN SKIP SEARCH\n         LA    R6,52           GET TABLE ENTRY LENGTH\n         SR    R7,R6           POINT TO LAST ENTRY\n         SR    R5,R6           BACK UP ONE ENTRY LENGTH FOR BXH\nSETENT2A DS    0H\n         BXH   R5,R6,SETENT3\n         CLC   8(44,R5),JCTXWRK+8 DATA SET NAMES COMPARE ?\n         BNE   SETENT2A        NO, LOOP\n         MVC   0(52,R5),JCTXWRK   MOVE IN TABLE ENTRY\n         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK FOR AVAILABLE SPACE IN PCT AND MOVE IN ENTRY           *\n*                                                                     *\n***********************************************************************\nSETENT3  DS    0H\n         LA    R1,ERRMSG5      POINT TO ERROR MSG 5\n         LH    R9,PCTPWCNT     GET COUNT\n         CH    R9,=H'15'        ALREADY HAVE 15 PW ENTRYS\n         BE    RET12            YES, RETURN CODE 12 WTIH MESSAGE\n         LA    R9,1(,R9)        BUMP COUNT BY ONE\n         STH   R9,PCTPWCNT      AND STORE BACK\n         SPACE 1\n         LA    R1,ERRMSG7       POINT TO ERROR MSG 7\n         L     R5,PCTENTOF      GET CURRENT OFFSET\n         LA    R0,52(,R5)       ADD 52 FOR OFFSET FOR NEXT ENTRY\n         CH    R0,PCTLENG       OVER MAXIMUM LENGTH ?\n         BH    RET12            YES, RETURN CODE 12 WITH MESSAGE\n         ST    R0,PCTENTOF      SET NEW OFFSET\n         SPACE 1\n*        MOVE IN PCT ENTRY\n         SPACE 1\nSETENT3A DS    0H\n         LA    R5,PCT(R5)       POINT TO  ENTRY\n         MVC   0(52,R5),JCTXWRK MOVE IN TABLE ENTRY\n         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS\n         DROP  R2\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R15,0           LOAD RETURN CODE 0\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRET8     DS    0H\n         LA    R15,8           LOAD RETURN CODE OF 8\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRET12    DS    0H\n         MVC   JCTXWRK(80),0(R1) MOVE IN ERROR MESSAG\n         OI    RDWFLAGX,RDWXXSEM FLAG ERROR MESSAGE SUPPLIED\n         L     R1,JCTUSER2     GET ADDRESS OF BUFFER\n         LTR   R1,R1           IS THERE ONE ?\n         BZ    RET12A          NO, SKIP FREEBUF\n         XC    JCTUSER2,JCTUSER2 CLEAR PCT ADDRESS\n        $FREEBUF (R1)          FREE BUFFER\nRET12A   DS    0H\n         LA    R15,12          LOAD RETURN CODE OF 12\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRETURN   DS    0H\n        $RETURN RC=(R15)       RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        ERROR MESSAGES                                               *\n*                                                                     *\n***********************************************************************\nERRMSG1  DC    CL80'INVALID PASSWORD CONTROL CARD, INVALID FORMAT'\nERRMSG2  DC    CL80'INVALID PASSWORD CONTROL CARD, PASSWORD IS LONGER TX\n               HAN 8 CHARACTERS'\nERRMSG3  DC    CL80'INVALID PASSWORD CONTROL CARD, DATA SET NAME IS LONX\n               GER THAN 44 CHARACTERS'\nERRMSG4  DC    CL80'INVALID PASSWORD CONTROL CARD, MULTIPLE DEFAULT PASX\n               SWORDS SUPPLIED'\nERRMSG5  DC    CL80'INVALID PASSWORD CONTROL CARD, MORE THAN 15 PASSWORX\n               D CONTROL CARDS SUPPLIED'\nERRMSG6  DC    CL80'INVALID PASSWORD CONTROL CARD, NO DATA SET NAME FOLX\n               LOWING DSN KEYWORD'\nERRMSG7  DC    CL80'PCT EXCEEDS BUFFER SIZE. NOTIFY SYSTEMS PROGRAMMER'\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n        $MODEND\n         END\n./ ADD NAME=HASPXJ07 0100-88137-88153-1457-00189-00189-00000-GIBSON\n         TITLE 'JESEXIT7 - MAIN TASK JCT READ/WRITE EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: HASPXJ07                                               *\n*                                                                     *\n* DESCRIPTION: MAIN TASK JCT READ/WRITE EXIT                          *\n*              IF FOUND PROCESS THEM                                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      HASPXJ07                                                       *\n*         CALLED FROM HASPNUC                                         *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO READ/WRITE PCT (PASSWORD CONTROL TABLE) WHEN JCT IO OCCURS  *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = CODE INDICATING WHETHER A JCT IS BEING READ OR WRITTEN   *\n*                0 INDICATES JCT HAS BEEN READ FROM SPOOL             *\n*                4 INDICATES JCT WILL BE WRITTEN TO SPOOL             *\n*      R1  = ADDRESS OF THE JCT                                       *\n*      R11 = ADDRESS OF THE HCT                                       *\n*      R13 = ADDRESS OF TE PCE                                        *\n*      R14 = RETURN ADDRESS                                           *\n*      R15 = ENTRY ADDRESS                                            *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      R0-R14 SAME AS ENTRY                                           *\n*      R15   RETURN CODE                                              *\n*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *\n*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*\n*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*\n*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*\n*            ATED WITH THIS EXIT, CONTINUE NORMAL PROCESSING.         *\n*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *\n*            THIS EXIT AND TO CONTINUE NORMAL PROCESSING.             *\n*                                                                     *\n*  NOTES:                                                             *\n*      IF A MACRO SUCH AS $TRACK IS ISSUED THAT WILL RELINQUISH       *\n*      CONTROL SO THAT ANOTHER TASK GET USE THE PCE OR THE CONTENTS   *\n*      ARE ALTERED IT IS IMPERATIVE THAT THE FOLLOWING FIELDS BE      *\n*      RESOTRED BEFORE RETURN                                         *\n*        PCEIOEWF WITH POINTER TO PCE (R13)                           *\n*        PCEBUFAD WITH POINTER TO JCT (R10)                           *\n*        PCESEEK  WITH DASD TRACK ADDRESS (JCTTRACK)                  *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         PRINT ON,NOGEN\n         COPY  $HASPGBL\n         EJECT ,\nHASPXJ07 $MODULE NOTICE=NONE,                                          C\n               TITLE='JESEXIT7 - MAIN TASK JCT READ/WRITE EXIT',       C\n               RPL,                GENERATE MVS  RPL    DSECT          C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $JCT,                                                   C\n               $JQE,                                                   C\n               $PCE,                                                   C\n               $CAT,                                                   C\n               $HCT,                                                   C\n               $IOT,                                                   C\n               $MIT,                                                   C\n               $MITETBL,                                               C\n               $MODMAP,                                                C\n               $RDRWORK,                                               C\n               $TAB,                                                   C\n               $USERCBS,                                               C\n               $XECB,              GENERATE HASP XECB DSECT            C\n               $XIT                GENERATE HASP XIT DSECT\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ENTRY AND INITIAL CHECKING                                   *\n*                                                                     *\n***********************************************************************\nUEXIT7  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT\n        $SAVE\n         LR    R12,R15         LOAD BASE REGISTER\n         LR    R10,R1          LOAD JCT ADDRESS\n         USING JCT,R10\n         CLC   JCTID,=CL4'JCT'\n         BE    JCTOK\n        $MID   999\n         WTO   '&MID. EXIT7: R1 DOES NOT POINT TO JCT ON ENTRY',       X\n               ROUTCDE=2,DESC=4\n         B     RET0\nJCTOK    DS    0H\n         C     R10,PCEBUFAD\n         BE    PCEOK1\n        $MID   998\n         WTO   '&MID. EXIT7: PCEBUFAD DOES NOT POINT TO JCT AT ENTRY', X\n               ROUTCDE=2,DESC=4\n         B     RET0\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK ENTRY CODE AND BRANCH TO PROPER ROUTINE                *\n*                                                                     *\n***********************************************************************\nPCEOK1   DS    0H\n         LR    R2,R0           LOAD ENTRY CODE\n         LA    R2,BRTBL(R2)    GET OFFSET INTO BRANCH TABLE\n         BR    R2              BRANCH INTO BRANCH TABLE\n         SPACE 3\nBRTBL    DS    0H\n         B     JCTREAD         BRANCH TO JCT READ\n         B     JCTWRITE        BRANCH TO JCT WRITE\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        JCT READ ROUTINE (NULL ROUNTINE)                             *\n*                                                                     *\n***********************************************************************\nJCTREAD  DS    0H\n         B     RET0            NO PROCESSING FOR JCT READ IN MAIN TASK\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        JCT WRITE ROUTINE (DO INITIAL CHECKING)                      *\n*                                                                     *\n***********************************************************************\nJCTWRITE DS    0H\n         L     R1,$JOBQPTR\n         AL    R1,JCTJQE\n         TM    JQETYPE-JQE(R1),$INPUT\n         BNO   RET0\n         TM    JCTUSER0,JCTPW  PASSWORDS SUPPLIED IN JCL ?\n         BNO   RET0            NO, RETURN CODE 0\n         CLC   JCTUSER1,=A(0)  ALREADY GOT TRACK SPACE ?\n         BNE   RET0            YES, RETURN CODE 0\n         CLC   JCTUSER2,=A(0)  IS THERE A PCT ?\n         BE    RET0            NO, RETURN CODE 0\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        GET SPOOL SPACE FOR PCT                                      *\n*                                                                     *\n***********************************************************************\n         L     R1,RDWIOT\n         LA    R1,IOTMSTAB-IOT(,R1)\n        $TRACK (R1),JQE=PCEJQE\n         ST    R1,JCTUSER1\n***********************************************************************\n*                                                                     *\n*        WRITE OUT PCT                                                *\n*                                                                     *\n***********************************************************************\n         ST    R13,PCEIOEWF\n         ST    R1,PCESEEK\n         MVC   PCEBUFAD(4),JCTUSER2\n         LA    R1,PCEDADCT\n        $EXCP  (R1),WAIT=YES\n***********************************************************************\n*                                                                     *\n*        FREE BUFFER FOR INCORE PCT                                   *\n*                                                                     *\n***********************************************************************\n         L     R1,JCTUSER2\n         XC    JCTUSER2,JCTUSER2\n        $FREEBUF (R1)\n***********************************************************************\n*                                                                     *\n*        SET PCE BACK THE WAY IT WAS                                  *\n*                                                                     *\n***********************************************************************\n         ST    R13,PCEIOEWF\n         ST    R10,PCEBUFAD\n         MVC   PCESEEK(4),JCTTRAK\n         B     RET0\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R15,0           LOAD RETURN CODE 0\n        $RETURN RC=(R15)       RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n        $MODEND\n         END\n./ ADD NAME=HASPXS08 0100-88137-88153-1457-00234-00234-00000-GIBSON\n         TITLE 'JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: HASPXS08                                               *\n*                                                                     *\n* DESCRIPTION: MAIN TASK JCT READ/WRITE EXIT                          *\n*              IF FOUND PROCESS THEM                                  *\n*                                                                     *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      HASPXS08                                                       *\n*         CALLED FROM HASPNUC                                         *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO READ/WRITE PCT (PASSWORD CONTROL TABLE) WHEN JCT IO OCCURS  *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = CODE INDICATING WHETHER A JCT IS BEING READ OR WRITTEN   *\n*                0 INDICATES JCT HAS BEEN READ FROM SPOOL             *\n*                4 INDICATES JCT WILL BE WRITTEN TO SPOOL             *\n*                8 INDICATES JCT IS ALREADY IN MAIN STORAGE           *\n*      R1  = ADDRESS OF THE JCT                                       *\n*      R11 = ADDRESS OF THE HCT                                       *\n*      R13 = ADDRESS OF TE PCE                                        *\n*      R14 = RETURN ADDRESS                                           *\n*      R15 = ENTRY ADDRESS                                            *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      R0-R14 SAME AS ENTRY                                           *\n*      R15   RETURN CODE                                              *\n*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *\n*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*\n*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*\n*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*\n*            ATED WITH THIS EXIT, CONTINUE NORMAL PROCESSING.         *\n*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *\n*            THIS EXIT AND TO CONTINUE NORMAL PROCESSING.             *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         COPY  $HASPGBL            COPY HASP GLOBALS\nHASPXS08 $MODULE NOTICE=NONE,ENVIRON=USER,                             C\n               TITLE='JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT',       C\n               ASCB,               GENERATE MVS ASCB DSECT             C\n               DEB,                GENERATE MVS DEB DSECT              C\n               PSA,                GENERATE MVS PSA DSECT              C\n               RPL,                GENERATE MVS RGP DSECT              C\n               SDWA,               GENERATE MVS SDWA DSECT             C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $CAT,               GENERATE HASP CAT DSECT             C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $HCT,               GENERATE HASP HCT DSECT             C\n               $IOT,               GENERATE HASP IOT DSECT             C\n               $JCT,               GENERATE HASP JCT DSECT             C\n               $JQE,               GENERATE HASP JQE DSECT             C\n               $MIT,               GENERATE HASP MIT DSECT             C\n               $MITETBL,           GENERATE HASP MITETBL DSECT         C\n               $PCE,               GENERATE HASP PCE DSECT             C\n               $PDDB,              GENERATE HASP PDDB DSECT            C\n               $SCAT,              GENERATE HASP SCAT DSECT            C\n               $SJB,               GENERATE HASP SJB DSECT             C\n               $SVT,               GENERATE HASP SSVT DSECT            C\n               $TAB,               GENERATE HASP TAB DSECT             C\n               $TQE,               GENERATE HASP TQE DSECT             C\n               $USERCBS,           GENERATE USER CONTROL BLOCKS        C\n               $XECB               GENERATE HASP XECB DSECT\n         PRINT ON,GEN,NODATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ENTRY FOR JCT READ/WRITE                                     *\n*                                                                     *\n***********************************************************************\nUEXIT8  $ENTRY CSECT=YES,BASE=R12  EXIT ROUTINE ENTRY POINT\n         USING JCT,R10             ADDRESS JCT\n         USING SSVT,R11            ADDRESS SSVT\n         USING USAVE,R13           ADDRESS CALLER SAVE AREA\n         STM   R14,R12,USAVER      SAVE CALLING REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R3,R0               SAVE ENTRY CODE\n         LR    R10,R1              SAVE JCT POINTER\n         LA    R0,ULEN             GET DATA AREA LENGTH\n         GETMAIN  RC,LV=(0),SP=230 GET STORAGE FOR WORKAREA\n         LTR   R15,R15             TEST RETURN FROM GETMAIN\n         BNZ   RET0                QUIT HERE IF NO STORAGE\n         LR    R8,R1               SAVE WORKAREA ADDRESS\n         ST    R8,UOURSAV          POINT CALLER SAVE TO OURS\n         DROP  R13                 DROP OLD SAVEAREA ADDRESS\n         USING USAVE,R8            ADDRESS OUR WORKAREA\n         ST    R13,UCALLER\n         IPK   0(0)            SAVE CURRENT ...\n         STC   R2,USAVEKEY     ... PROTECTION KEY\n         LA    R3,BRTBL(R3)    GET OFFSET INTO BRANCH TABLE\n         BR    R3              BRANCH INTO BRANCH TABLE\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        BRANCH TABLE                                                 *\n*                                                                     *\n***********************************************************************\nBRTBL    DS    0H\n         B     JCTREAD         BRANCH TO JCT READ\n         B     JCTWRITE        BRANCH TO JCT WRITE\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        TEST FOR PASSWORD CONTROL TABLE                              *\n*                                                                     *\n***********************************************************************\nJCTREAD  DS    0H\n         TM    JCTUSER0,JCTPW      PASSWORDS SUPPLIED IN JCL ?\n         BNO   RET0C               NO, RETURN\n         CLC   JCTUSER1,=A(0)      IS THERE A PCT ?\n         BE    RET0C               NO, RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        FIND SJB                                                     *\n*                                                                     *\n***********************************************************************\n         USING PSA,R0\n         L     R1,PSAAOLD          CURRENT ASCB\n         LH    R1,ASCBASID-ASCB(,R1) GET ASID\n         LR    R0,R1               COPY ASID\n         BCTR  R0,0                REDUCE BY ONE\n         LTR   R0,R0               INSURE ASID GREATER THAN ONE\n         BNP   RET0C               EXIT TO IGNORE ROUTINE\n         CLC   PSAAOLD,SVTPOSTE+4  CHECK FOR HASP ASCB\n         BNE   SFNDSJBA            DO NORMAL PICK UP IF NOT\n         ICM   R0,15,SVTHASP       HASP STILL UP\n         BNE   RET0C               EXIT TO IGNORE IF NOT\nSFNDSJBA SLL   R1,2                GET ASID * 4 ( WORD/ASID )\n         AL    R1,SVTHAVT          POINT TO VECTOR TABLE ENTRY\n         L     R0,0(0,R1)          POINT TO SJB\nSFNDSJBB LTR   R1,R0               COPY POINTER\n         BZ    RET0C               RETURN TO IGNORE IF NO SJB\n         L     R0,SJBSJB-SJB(,R1) POINT TO NEXT LOWER\n         LTR   R0,R0               TEST FOR END\n         BNZ   SFNDSJBB            LOOP IF NOT\n         LR    R13,R1               POINT TO SJB\n         USING SJB,R13\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        GET BUFFER TO READ PCT INTO                                  *\n*                                                                     *\n***********************************************************************\n        $AMODE 24\n         MVC   USAVESJB(18*4),SJBSAVE  COPY SJB SAVE AREA\n         MODESET EXTKEY=ZERO,SAVEKEY=USAVEKEY,WORKREG=2\n         CALL  HCBGM\n         BNZ   RET0B\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        READ IN PASSWORD CONTROL TABLE                               *\n*                                                                     *\n***********************************************************************\n         ST    R1,JCTUSER2       SAVE POINTER TO PASSWORD CONTROL TABLE\n         L     R0,JCTUSER1       LOAD DISK ADDRESS OF PCT\n         CALL  HCBRD             BRANCH TO READ PCT\n         BNZ   FREEBUF           BRANCH TO FREE BUFFERS IF NOGO\n         B     RET0B             BRANCH TO RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        FREE JES BUFFER                                              *\n*                                                                     *\n***********************************************************************\nFREEBUF  DS    0H\n         L     R1,JCTUSER2 LOAD ADDRESS OF BUFFER\n         XC    JCTUSER2,JCTUSER2 CLEAR BUFFER ADDRESS\n         NI    JCTUSER0,255-JCTPW CLEAR PASSWORD FLAG\n         CALL  HCBFM             FREE BUFFER\n         B     RET0B             BRANCH TO RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        JCT WRITE ROUTINE (NULL ROUTINE)                             *\n*                                                                     *\n***********************************************************************\nJCTWRITE DS    0H\n         B     RET0C           NO PROCESSING FOR JCT WRITE\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0B    DS    0H\n         MVC   SJBSAVE(18*4),USAVESJB  RESTORE SJB SAVE AREA\n         DROP  R13\n         MODESET KEYADDR=USAVEKEY,WORKREG=2\n        $AMODE 31\n         SPACE ,\nRET0C    DS    0H\n         L     R13,UCALLER         RESTORE CALLER'S SAVEAREA\n         DROP  R8                  DROP OUR SAVE AREA\n         USING USAVE,R13           USE  CALLER'S SAVE AREA\n         LR    R1,R8               POINT TO AREA\n         LA    R0,ULEN             GET LENGTH OF DATA AREA\n         ICM   R0,B'1000',=AL1(230) SET SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE ,\nRET0     DS    0H\n         LA    R15,0           LOAD RETURN CODE 0\n         L     R14,USAVER      RETURN\n         LM    R0,R12,USAVER+8\n         BR    R14\n         DROP  R13\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CONSTANTS, EQUATES AND LITERALS                              *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n        $MODEND\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        USER SAVE AREA DSECT                                         *\n*                                                                     *\n***********************************************************************\nUSAVE    DSECT\n         DS    F\nUCALLER  DS    F                   CALLER'S CALLER SAVE\nUOURSAV  DS    F                   OUR SAVE\nUSAVER   DS    15F                 REGISTERS 14,15,0-12\nUSAVESJB DS    18F                 SJB REGISTERS\nUSAVEKEY DS    X                   SAVE STORAGE KEY IN PSW\nULEN     EQU   *-USAVE             LENGTH OF EXTENDED AREA\n         SPACE 3\n         END\n./ ADD NAME=IEASVC00 0100-88137-88153-1457-00002-00002-00000-GIBSON\nSVCPARM 252,REPLACE,TYPE(3),           /* READPSWD SVC  JAG 05/17/83 */\n            APF(NO),NPRMPT(NO)\n./ ADD NAME=IEAVMXIT 0100-88137-88153-1457-00868-00868-00000-GIBSON\n         TITLE 'IEAVMXIT  '\n         PRINT  GEN\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:  THIS PROGRAM IS A COMMUNICATIONS TASK EXIT.       *\n*              IT CAN MANIPULATE CONSOLE MESSAGES OR TRIGGER AN       *\n*              EVENT BASED ON A CONSOLE MESSAGE BEING ISSUED.         *\n*                                                                     *\n*        ENTRY:  IEAVMXIT                                             *\n*                                                                     *\n*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *\n*                                                                     *\n*        INPUT:  REGISTER 1 POINTS TO CTXT                            *\n*                                                                     *\n*                                                                     *\n*  NOTES ON MACRO IEEMSG                                              *\n*                                                                     *\n* IEEMSG - BUILD AN ENTRY FOR WTO MSG TABLE                           *\n*                                                                     *\n*         THE IEEMSG MACRO INSTRUCTION IS USED TO BUILD AN ENTRY      *\n*         FOR THE WTO MSG TABLE USED TO MODIFY ROUTING AND DESC       *\n*         CODES FOR WTO MESSAGES, ISSUE COMMANDS AND RESOND TO        *\n*         WTOR'S.                                                     *\n*                                                                     *\n*         THE IEEMSG IS WRITTEN AS FOLLOWS:                           *\n*                                                                     *\n*          ____________________________________________________       *\n*         |                                                    |      *\n*         | SYMBOL | IEEMSG   | ID=\"WTOMSGID\"                  |      *\n*         |        |          | /ROUTCDE=(\"ROUTE CODES\")/      |      *\n*         |        |          | /DESC=(\"DESCRIPTOR CODES\")/    |      *\n*         |        |          | /CMD1=\"CMD\"/                   |      *\n*         |        |          | /CMD2=\"CMD\"/                   |      *\n*         |        |          | /CMD3=\"CMD\"/                   |      *\n*         |        |          | /CMD4=\"CMD\"/                   |      *\n*         |        |          | /CMD5=\"CMD\"/                   |      *\n*         |        |          | /CMD6=\"CMD\"/                   |      *\n*         |        |          | /CMD7=\"CMD\"/                   |      *\n*         |        |          | /CMD8=\"CMD\"/                   |      *\n*         |        |          | /CMD9=\"CMD\"/                   |      *\n*         |        |          | /CMD10=\"CMD\"/                  |      *\n*         |        |          | /JOBNAME=\"JOBNAME\"/            |      *\n*          ____________________________________________________       *\n*                                                                     *\n*         SYMBOLS:                                                    *\n*           SLASHES (/) ARE USED TO ENCLOSE OPTIONAL ELEMENTS         *\n*           DOUBLE QUOTES (\") ARE USED TO ENCLOSE ELEMENTS FOR WHICH  *\n*           YOU CODE VALUES THAT YOU CHOSE                            *\n*           OR SIGN (|) IS USED TO SEPARATE ALTERNATIVE ELEMENTS.     *\n*                                                                     *\n*         THE FOLLOWING DESCRIBES THE IEEMSG OPERANDS                 *\n*           ID=\"WTOMSGID\"                                             *\n*             THE ID OPERAND SPECFIES THE WTO OR WTOR MESSAGES TO BE  *\n*             ACTED UPON. THE LENGTH MUST BE GREATER THAN 2 AND LESS  *\n*             THAN 125. THIS IS COMPARED TO THE BEGINNING OF EACH     *\n*             WTO OR WTOR MESSAGE.                                    *\n*                                                                     *\n*           ROUTCDE=(\"ROUTE CODES\")                                   *\n*             THE ROUTCDE OPERAND SPECIFIES THE ROUTING CODES TO BE   *\n*             ASSIGNED TO THE MESSAGE.                                *\n*                                                                     *\n*           DESC=(\"DESCRIPTOR CODES\")                                 *\n*             THE DESC OPERAND SPECIFIES THE DESCRIPTOR CODES TO BE   *\n*             ASSIGNED TO THE MESSAGE.                                *\n*                                                                     *\n*           CMD1=\"CMD\"                                                *\n*           CMD2=\"CMD\"                                                *\n*           CMD3=\"CMD\"                                                *\n*           CMD4=\"CMD\"                                                *\n*           CMD5=\"CMD\"                                                *\n*           CMD6=\"CMD\"                                                *\n*           CMD7=\"CMD\"                                                *\n*           CMD8=\"CMD\"                                                *\n*           CMD9=\"CMD\"                                                *\n*           CMD10=\"CMD\"                                               *\n*             THE CMD OPERAND SPECIFIES THE COMMANDS TO BE ISSUED.    *\n*             THE LENGTH MUST BE LESS THAN 120 .                      *\n*             10 SEPARATE COMMANDS CAN BE SPECIFIED.                  *\n*                                                                     *\n*           JOBNAME=\"JOBNAME\"                                         *\n*             THE JOBNAME OPERAND SPECIFIES THE NAME OF THE JOB THAT  *\n*             MUST BE ISSUEING THE WTO/WTOR FOR THIS ENTRY.           *\n*             THE LENGTH MUST BE 8 CHARATCTERS OR LESS.               *\n*                                                                     *\n*                                                                     *\n*         EXAMPLE 1                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES TO 0 SO MESSAGE WILL    *\n*           NOT APPEAR ON THE CONSOLE ONLY IN THE LOG.                *\n*                                                                     *\n*           IEEMSG ID=NDP00005,ROUTCDE=0                              *\n*                                                                     *\n*         EXAMPLE 2                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES TO 2 AND THE DESC CODE  *\n*           TO 4 SO THAT A NON-DEL MESSAGE WILL ROLL .                *\n*                                                                     *\n*           IEEMSG ID=IEE362A,ROUTCDE=(2),DESC=(4)                    *\n*                                                                     *\n*         EXAMPLE 3                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES SO MESSAGE WILL APPEAR  *\n*           ON ALL CONSOLES.                                          *\n*                                                                     *\n*           IEEMSG ID=IEE362A,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13, *\n*                 14,15,16)                                           *\n*                                                                     *\n*         EXAMPLE 4                                                   *\n*           OPERATION: ISSUE COMMANDS 'S TSO' AND '$SLGN1' FOR        *\n*                      MESSAGE IST020I.                               *\n*                                                                     *\n*           IEEMSG ID=IST020I,CMD1='S TSO',CMD2=$SLGN1                *\n*                                                                     *\n*         EXAMPLE 5                                                   *\n*           OPERATION: ISSUE REPLY 'U' FOR MESSAGE IKT012D.           *\n*                                                                     *\n*           IEEMSG ID=IKT012D,CMD1='R XX,U'                           *\n*                                                                     *\n*                                                                     *\n*        FILES:  NONE.                                                *\n*                                                                     *\n*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS A              *\n*           COMMUNICATIONS TASK EXIT.                                 *\n*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *\n*                                                                     *\n*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *\n*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE           *\n*              ORIGINALLY REQUESTED.                                  *\n*                                                                     *\n*            . CHANGING DESCRIPTOR CODES ON MESSAGES IN ORDER TO      *\n*              KEEP MESSAGES FROM ROLLING OFF THE SCREEN.             *\n*                                                                     *\n*            . KEEPING MESSAGES OFF THE CONSOLE COMPLETELY BY         *\n*              CHANGING THE ROUTING CODE TO ZERO                      *\n*                                                                     *\n*            . TRIGGERING AN ACTIVITY (I.E. START A TASK) IF A        *\n*              SPECIFIC MESSAGE IS ISSUED.                            *\n*                                                                     *\n*            . REPLY TO 'WTORS' AUTOMATICALLY                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*    MACRO DEFINITIONS                                                *\n*---------------------------------------------------------------------*\n         MACRO\n&LABEL   IEEMSG   &ID=,&ROUTCDE=,&DESC=,&JOBNAME=,                     X\n               &CMD1=,                                                 X\n               &CMD2=,                                                 X\n               &CMD3=,                                                 X\n               &CMD4=,                                                 X\n               &CMD5=,                                                 X\n               &CMD6=,                                                 X\n               &CMD7=,                                                 X\n               &CMD8=,                                                 X\n               &CMD9=,                                                 X\n               &CMD10=\n         LCLC  &DCODE,&RCODE,&FLG,&MSGID,&JBNM,&CRD\n         LCLC  &CRDM(10)\n         LCLA  &LCRDM(10)\n         LCLA  &NUMCMD\n         LCLA  &I,&N,&LID,&RCFLG,&DCFLG,&CMFLG,&RSFLG,&LCRD\n         LCLA  &JBFLG\n         LCLB  &CMDFLG\n&DCODE   SETC  '0000000000000000'\n&RCODE   SETC  '0000000000000000'\n&FLG     SETC  '00000000'\n&JBNM    SETC  '        '\n&DCFLG   SETA  0\n&RCFLG   SETA  1\n&CMFLG   SETA  2\n&JBFLG   SETA  4\n&CMDFLG  SETB  0\n.*\n.* CHECK PARAMETERS\n.*\n.IDCHK1  AIF   (T'&ID NE 'O').IDCHK1A\n         MNOTE 8,'* * * ERROR * * * ID NOT SPECIFIED'\n         MEXIT\n.IDCHK1A AIF   (K'&ID GE 3).IDCHK1B\n         MNOTE 8,'* * * ERROR * * * ID LESS THAN 3 CHARACTERS'\n         MEXIT\n.IDCHK1B AIF   (K'&ID LE 125).IDCHK1C\n         MNOTE 8,'* * * ERROR * * * ID GREATER THAN 125 CHARACTERS'\n         MEXIT\n.IDCHK1C ANOP\n         AIF   (T'&CMD1 EQ 'O').IDCHK1E\n&CMDFLG  SETB  1\n&CRDM(1) SETC  '&CMD1'\n         AIF   ('&CMD1'(1,1) NE '''' OR                                X\n               '&CMD1'(K'&CMD1,1) NE '''').IDCK1D1\n&CRDM(1) SETC  '&CMD1'(2,K'&CMD1-2)\n.IDCK1D1 AIF   (K'&CRDM(1) LE 120).IDCHK1E\n         MNOTE 8,'* * * ERROR * * * CMD1 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1E AIF   (T'&CMD2 EQ 'O').IDCHK1F\n&CMDFLG  SETB  1\n&CRDM(2) SETC  '&CMD2'\n         AIF   ('&CMD2'(1,1) NE '''' OR                                X\n               '&CMD2'(K'&CMD2,1) NE '''').IDCK1E1\n&CRDM(2) SETC  '&CMD2'(2,K'&CMD2-2)\n.IDCK1E1 AIF   (K'&CRDM(2) LE 120).IDCHK1F\n         MNOTE 8,'* * * ERROR * * * CMD2 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1F AIF   (T'&CMD3 EQ 'O').IDCHK1G\n&CMDFLG  SETB  1\n&CRDM(3) SETC  '&CMD3'\n         AIF   ('&CMD3'(1,1) NE '''' OR                                X\n               '&CMD3'(K'&CMD3,1) NE '''').IDCK1F1\n&CRDM(3) SETC  '&CMD3'(2,K'&CMD3-2)\n.IDCK1F1 AIF   (K'&CRDM(3) LE 120).IDCHK1G\n         MNOTE 8,'* * * ERROR * * * CMD3 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1G AIF   (T'&CMD4 EQ 'O').IDCHK1H\n&CMDFLG  SETB  1\n&CRDM(4) SETC  '&CMD4'\n         AIF   ('&CMD4'(1,1) NE '''' OR                                X\n               '&CMD4'(K'&CMD4,1) NE '''').IDCK1G1\n&CRDM(4) SETC  '&CMD4'(2,K'&CMD4-2)\n.IDCK1G1 AIF   (K'&CRDM(4) LE 120).IDCHK1H\n         MNOTE 8,'* * * ERROR * * * CMD4 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1H AIF   (T'&CMD5 EQ 'O').IDCHK1I\n&CMDFLG  SETB  1\n&CRDM(5) SETC  '&CMD5'\n         AIF   ('&CMD5'(1,1) NE '''' OR                                X\n               '&CMD5'(K'&CMD5,1) NE '''').IDCK1H1\n&CRDM(5) SETC  '&CMD5'(2,K'&CMD5-2)\n.IDCK1H1 AIF   (K'&CRDM(5) LE 120).IDCHK1I\n         MNOTE 8,'* * * ERROR * * * CMD5 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1I AIF   (T'&CMD6 EQ 'O').IDCHK1J\n&CMDFLG  SETB  1\n&CRDM(6) SETC  '&CMD6'\n         AIF   ('&CMD6'(1,1) NE '''' OR                                X\n               '&CMD6'(K'&CMD6,1) NE '''').IDCK1I1\n&CRDM(6) SETC  '&CMD6'(2,K'&CMD6-2)\n.IDCK1I1 AIF   (K'&CRDM(6) LE 120).IDCHK1J\n         MNOTE 8,'* * * ERROR * * * CMD6 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1J AIF   (T'&CMD7 EQ 'O').IDCHK1K\n&CMDFLG  SETB  1\n&CRDM(7) SETC  '&CMD7'\n         AIF   ('&CMD7'(1,1) NE '''' OR                                X\n               '&CMD7'(K'&CMD7,1) NE '''').IDCK1J1\n&CRDM(7) SETC  '&CMD7'(2,K'&CMD7-2)\n.IDCK1J1 AIF   (K'&CRDM(7) LE 120).IDCHK1K\n         MNOTE 8,'* * * ERROR * * * CMD7 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1K AIF   (T'&CMD8 EQ 'O').IDCHK1L\n&CMDFLG  SETB  1\n&CRDM(8) SETC  '&CMD8'\n         AIF   ('&CMD8'(1,1) NE '''' OR                                X\n               '&CMD8'(K'&CMD8,1) NE '''').IDCK1K1\n&CRDM(8) SETC  '&CMD8'(2,K'&CMD8-2)\n.IDCK1K1 AIF   (K'&CRDM(8) LE 120).IDCHK1L\n         MNOTE 8,'* * * ERROR * * * CMD8 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1L AIF   (T'&CMD9 EQ 'O').IDCHK1M\n&CMDFLG  SETB  1\n&CRDM(9) SETC  '&CMD9'\n         AIF   ('&CMD9'(1,1) NE '''' OR                                X\n               '&CMD9'(K'&CMD9,1) NE '''').IDCK1L1\n&CRDM(9) SETC  '&CMD9'(2,K'&CMD9-2)\n.IDCK1L1 AIF   (K'&CRDM(9) LE 120).IDCHK1M\n         MNOTE 8,'* * * ERROR * * * CMD9 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1M AIF   (T'&CMD10 EQ 'O').IDCHK2\n&CMDFLG  SETB  1\n&CRDM(10) SETC '&CMD10'\n         AIF   ('&CMD10'(1,1) NE '''' OR                               X\n               '&CMD10'(K'&CMD10,1) NE '''').IDCK1M1\n&CRDM(10) SETC '&CMD10'(2,K'&CMD10-2)\n.IDCK1M1 AIF   (K'&CRDM(10) LE 120).IDCHK2\n         MNOTE 8,'* * * ERROR * * * CMD10 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK2  ANOP\n         AIF   (K'&JOBNAME LE 8).IDCHK99\n         MNOTE 8,'* * * ERROR * * * JOBNAME GREATER THAN 8 CHARACTERS'\n         MEXIT\n.IDCHK99 ANOP\n.*\n.* DESCRIPTOR CODES\n.*\n.DCHK    AIF   (T'&DESC EQ 'O').RCHK\n         AIF   (N'&DESC EQ 1 AND &DESC(1) EQ 0).DFLG\n&I       SETA  1\n.DLOOP   ANOP\n&N       SETA  &DESC(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGND\n         MNOTE 8,'&N IS INVALID DESCRIPTOR - IGNORED'\n         AGO   .NXTD\n.ASSIGND ANOP\n&DCODE   SETC  '&DCODE'(1,&N-1).'1'.'&DCODE'(&N+1,16-&N)\n.NXTD    AIF  (&I LE N'&DESC).DLOOP\n.DFLG    ANOP\n&FLG     SETC  '&FLG'(1,&DCFLG).'1'.'&FLG'(&DCFLG+2,8-&DCFLG+1)\n.*\n.* ROUTE CODES\n.*\n.RCHK    AIF   (T'&ROUTCDE EQ 'O').IDCHK\n         AIF   (N'&ROUTCDE EQ 1 AND &ROUTCDE(1) EQ 0).RFLG\n&I       SETA  1\n.RLOOP   ANOP\n&N       SETA  &ROUTCDE(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGNR\n         MNOTE 8,'&N IS INVALID ROUTE - IGNORED'\n         AGO   .NXTR\n.ASSIGNR ANOP\n&RCODE   SETC  '&RCODE'(1,&N-1).'1'.'&RCODE'(&N+1,16-&N)\n.NXTR    AIF   (&I LE N'&ROUTCDE).RLOOP\n.RFLG    ANOP\n&FLG     SETC  '&FLG'(1,&RCFLG).'1'.'&FLG'(&RCFLG+2,8-&RCFLG+1)\n.*\n.* MESSAGE ID\n.*\n.IDCHK   ANOP\n&MSGID   SETC  '&ID'\n         AIF   ('&MSGID'(1,1) NE '''' OR '&MSGID'(K'&ID,1) NE '''').ID2\n&MSGID   SETC  '&MSGID'(2,K'&MSGID-2)\n.ID2     ANOP\n&LID     SETA  K'&MSGID\n.*\n.* COMMAND\n.*\n.CMCHK   AIF   (NOT &CMDFLG).JBNMCHK\n&NUMCMD  SETA  0\n&I       SETA  0\n.CMLP    ANOP\n&I       SETA  &I+1\n&LCRDM(&I) SETA  0\n         AIF   (K'&CRDM(&I) EQ 0).CMLPB\n&LCRDM(&I) SETA  K'&CRDM(&I)\n&NUMCMD  SETA  &NUMCMD+1\n.CMLPB   AIF  (&I LT 10).CMLP\n&FLG     SETC  '&FLG'(1,&CMFLG).'1'.'&FLG'(&CMFLG+2,8-&CMFLG+1)\n.*\n.* JOBNAME\n.*\n.JBNMCHK AIF   (T'&JOBNAME EQ 'O').ASSIGNC\n&JBNM    SETC  '&JOBNAME'\n&FLG     SETC  '&FLG'(1,&JBFLG).'1'.'&FLG'(&JBFLG+2,8-&JBFLG+1)\n.*\n.*\n.*\n.ASSIGNC ANOP\n&LABEL   DS   0H\nS&SYSNDX EQU  *\n         DC   AL2(E&SYSNDX-S&SYSNDX)\n         DC   BL2'&DCODE'\n         DC   BL2'&RCODE'\n         DC   BL1'&FLG'\n         DC   BL1'00000000'\n         DC   CL8'&JBNM'\n         DC   AL1(&LID)\n         DC   C'&MSGID'\n         AIF  (NOT &CMDFLG).END\n         DC   AL1(&NUMCMD)\n&I       SETA  0\n.BLP     ANOP\n&I       SETA  &I+1\n         AIF   (K'&CRDM(&I) EQ 0).BLPB\n         DC   AL1(&LCRDM(&I))\n         DC   C'&CRDM(&I)'\n.BLPB    AIF  (&I LT 10).BLP\n.END     ANOP\nE&SYSNDX DS   0H\n         MEND\n         EJECT ,\n*---------------------------------------------------------------------*\n*        START THE PROGRAM                                            *\n*---------------------------------------------------------------------*\n         SPACE ,\n         TITLE 'IEAVMXIT  WTO/WTOR EXIT'\nIEAVMXIT CSECT\nIEAVMXIT AMODE 31\nIEAVMXIT RMODE ANY\n         SAVE  (14,12),,'IEAVMXIT,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING IEAVMXIT,R12,R11        REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         L     R2,0(,R1)               SET ADDR TO CTXT DSECT\n         USING CTXT,R2                 EST. ADDR TO CTXT DSECT\n         L     R3,CTXTTXPJ             SET ADDR TO TEXT OF MAJOR LINE\n         USING CTXTATTR,R3             EST. ADDRESSABILITY\n         SPACE ,\n         GETMAIN RU,LV=WKAREAL,SP=230,LOC=BELOW\n         LR    R10,R1                  SAVE THE ADDRESS\n         USING WKAREA,R10              GET ADDRESSABILITY\n         ST    R13,SAVE+4              CHAIN ...\n         LA    R1,SAVE                    ...\n         ST    R1,8(,R13)              ...  SAVEAREAS\n         LR    R13,R1                  PUT SAVE AREA ADDRESS INTO R13\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        TEST FOR COMTASK ASID AND IF SO EXIT                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         USING PSA,0                   ADDRESS LOW CORE\n         L     R4,CVTPTR               POINT TO CVT\n         L     R1,CVTTCBP-CVT(,R4)     GET TCB POINTERS\n         L     R1,12(,R1)              GET ASCB POINTER\n         L     R4,CVTCUCB-CVT(,R4)     GET UCM ADDRESS\n         LH    R4,UCMCTID-UCM(,R4)     GET COMTASK ASID\n         LTR   R4,R4                   IS THERE ONE ?\n         BNP   RETURN                  NO, RETURN\n         CH    R4,ASCBASID-ASCB(,R1)   ARE WE COMING FROM COMTASK ?\n         BE    RETURN                  YES, RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        TURN OFF ROUTE 14 REGARDLESS                                 *\n*                                                                     *\n*        THIS CODE IS USED SO ROUTE CODE 14 WILL APPEAR ONLY IN THE   *\n*        LOG.                                                         *\n*---------------------------------------------------------------------*\n         SPACE ,\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         TM    CTXTR002,CTXTR14        IS ROUTE CODE 14 ON ?\n         BNO   ROUTE13                 NO, BRANCH\n         NI    CTXTR002,X'FF'-CTXTR14  YES, TURN IT OFF\n         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG\n         EJECT ,\n*---------------------------------------------------------------------*\n*        DONT LOG ROUTE 13 REGARDLESS                                 *\n*                                                                     *\n*        THIS CODE IS USED SO ROUTE CODE 13 WILL NOT APPEAR  IN THE   *\n*        LOG.                                                         *\n*---------------------------------------------------------------------*\n         SPACE ,\nROUTE13  DS    0H\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         CLI   CTXTR002,CTXTR13        IS ONLY ROUTE 13 ON (2ND HALF)?\n         BNE   SCANTBL                 NO, BRANCH\n         CLI   CTXTR001,X'00'          IS ONLY ROUTE 13 ON (1ST HALF)?\n         BNE   SCANTBL                 NO, BRANCH\n         OI    CTXTRFB2,CTXTRNHC       YES, SET NO HARDCOPY FLAG\n         DROP  R1\n         EJECT ,\n*---------------------------------------------------------------------*\n*        SCAN TABLE                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nSCANTBL  DS    0H\n         L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTTCBP-CVT(,R1)     GET POINTER TO ...\n         L     R1,12(,R1)              ... ASCB\n         USING ASCB,R1\n         L     R7,ASCBJBNI             LOAD POINTER TO INIT JOBNAME\n         LTR   R7,R7                   IS THERE AN INIT JOBNAME PTR ?\n         BNZ   SCANTBL1                YES, USE IT\n         L     R7,ASCBJBNS             LOAD STC JOBNAME POINTER\n         LTR   R7,R7                   IS THERE AN STC JOBNAME PTR ?\n         BNZ   SCANTBL1                YES, SKIP LOAD OF BLANK PTR\n         LA    R7,=CL8' '              POINT TO BLANKS\nSCANTBL1 DS    0H\n         SLR   R4,R4                   CLEAR FOR ICM\n         ICM   R4,B'0011',ASCBASID     LOAD ASID\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         ST    R5,CURASID              SAVE\n         OC    CURASID,=X'F0F0F0F0'    CONVERT TO ZONED\n         TR    CURASID,TRHEXTBL        TR 0-9,A-F\n         MVC   CURJBNM(8),0(R7)        SAVE JOBNAME\n         DROP  R1\n         SPACE 2\n         LA    R4,8                    MAX LJOBNAME LENGTH\n         LA    R5,CURJBNM              POINT TO JOBNAME\nSCANTBL2 DS    0H\n         CLI   0(R5),C' '              FOUND THE END OF THE JOBNAME ?\n         BE    SCANTBL3                YES, BRANCH TO STORE LENGTH\n         LA    R5,1(,R5)               BUMP POINTER\n         BCT   R4,SCANTBL2             LOOP TO FIND LENGTH\nSCANTBL3 DS    0H\n         LA    R5,8                    MAX LENGTH\n         SR    R5,R4                   CALCULATE LENGTH\n         STH   R5,CURJBNLN             SAVE JOBNAME LENGTH\n         SPACE 2\n         L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         LA    R5,CVTUSER-CVT(,R1)     LOAD ADDRESS OF CVTUSER\n         USING C3POTABL,R5\n         SPACE ,\n         LM    R8,R9,TABLPRMS          POINT TO START & END OF TABLE\n         USING MSGENT,R8               ADDRESS IT\nSCANLP   DS    0H\n         CR    R8,R9                   REACHED END OF TABLE ?\n         BNL   SCANEND                 YES, EXIT LOOP\n         TM    ENTFLAG,JBNMFLG         WAS JOBNAME SPECIFIED ?\n         BNO   SCANIT                  NO, SKIP COMPARE OF JOBNAMES\n         CLC   CURJBNM,ENTJBNM         COMPARE JOBNAMES\n         BNE   SCANSKP                 SKIP ENTRY IF NOT EQUAL\nSCANIT   DS    0H\n         SLR   R1,R1                   CLEAR FOR IC\n         ICM   R1,B'0001',ENTLID       GET LENGTH OF MESSAGE ID\n         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)\n         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE\n         EX    R1,ENTCLC               COMPARE ID'S\n         BE    GOTENT                  BRANCH IF MATCH\nSCANSKP  DS    0H\n         ICM   R1,B'0011',ENTLEN       GET LENGTH OF ENTRY\n         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)\n         LA    R8,0(R1,R8)             POINT TO NEXT ENTRY\n         B     SCANLP                  LOOP\nSCANEND  DS    0H\n         SPACE ,\n         L     R5,0(,R5)               POINT TO NEXT R2D2 TABLE\n         LTR   R5,R5                   IS THERE ONE ?\n         BZ    CHKPSWD                 NO, SO CHECK FOR PASSWORD\n         CLC   C3POID,=CL8'C3POTABL'   DOES ID CHECK ?\n         BNE   CHKPSWD                 NO, SO CHECK FOR PASSWORD\n         LM    R8,R9,C3PO1ST           POINT TO START AND END OF TABLE\n         LA    R5,C3PONXT              GET POINTER TO NEXT SEG.\n         B     SCANLP                  LOOP TO SCAN TABLE\n         SPACE ,\nENTCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CHECK FOR PASSWORD MESSAGE                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nCHKPSWD  DS    0H\n         LA    R8,PSWDMSG              POINT TO PASSWORD MSG ENTRY\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,ENTLID               GET LENGTH OF MESSAGE ID\n         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE\n         EX    R1,PSWCLC               COMPARE ID'S\n         BE    DOPSWD                  BRANCH IF MATCH\n         B     RETURN                  NOT FOUND\n         SPACE ,\nPSWCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PROCESS   PASSWORD MESSAGE                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nDOPSWD   DS    0H\n         LA    R0,CTXTTMSG+128-51      POINT TO END OF SCAN\n         LA    R7,CTXTTMSG+10          POINT TO POSSIBLE DSN FIELD\n         LA    R9,61                   LENGTH OF MESSAGE\nDOPSWDLP DS    0H\n         CLC   0(6,R7),=CL6'DSNAME'    LOOK FOR DSNAME IN MESSAGE\n         BE    GOTDSN                  FOUND IT\n         LA    R7,1(,R7)               BUMP POINTER\n         LA    R9,1(,R9)               BUMP POINTER\n         CR    R7,R0                   REACHED END OF SCAN ?\n         BL    DOPSWDLP                NO, LOOP\n         B     RETURN                  RETURN\n         SPACE ,\nGOTDSN   DS    0H\n         MVC   DSN(44),7(R7)           MOVE DSN\n         LA    R0,PSWDRPLY             POINT TO FIELD FOR PASSWORD\n         LA    R1,DSN                  POINT TO DSN FIELD\n         SVC   252                     ASK FOR PASSWORD\n         LTR   R15,R15                 DID I GET ONE\n         BNZ   RETURN                  NO, RETURN\n         MVC   PSWDENT(PSWDMSGL),MSGENT MOVE ENTRY\n         LA    R8,PSWDENT              POINT R8 TO NEW ENTRY\n         STC   R9,ENTLID               SAVE MESSAGE LENGTH\n         BCTR  R9,0                    LESS ONE FOR EX MVC\n         EX    R9,MVCPWENT             MOVE MESSAGE\n         LA    R9,1(,R9)               GET BACK LENGTH\n         LA    R7,ENTID(R9)            POINT TO REPLY AREA\n         MVI   0(R7),1                 MOVE IN NUMER OF \"COMMANDS\"\n         MVI   1(R7),13                MOVE IN REPLY LENGTH\n         MVC   2(L'REPLYKW,R7),REPLYKW MOVE IN REPLY KEY WORD\n         MVC   7(8,R7),PSWDRPLY        MOVE IN PASSWORD\n         B     GOTENT                  PROCESS AS REGULAR ENTRY\n         SPACE ,\nMVCPWENT MVC   ENTID(*-*),CTXTTMSG\n         EJECT ,\n*---------------------------------------------------------------------*\n*        GOT TABLE ENTRY NOW PROCESS IT                               *\n*---------------------------------------------------------------------*\n         SPACE ,\nGOTENT   DS    0H\n         SPACE ,\nCHKDESC  DS    0H\n         TM    ENTFLAG,DESCFLG         DO WE WANT TO SET DESC. CODE\n         BNO   CHKROUT                 NO, BRANCH TO CHECK NEXT FLAG\n         L     R1,CTXTDCP              POINT TO DESC CODE BLOCK\n         USING CTXTDESC,R1\n         MVC   CTXTDESC-CTXTDESC(2,R1),ENTDESC     MOVE IN DESC\n         OI    CTXTRFB1,CTXTRCDC       AND TURN ON DC CHANGED FLAG\n         DROP  R1\n         SPACE ,\nCHKROUT  DS    0H\n         TM    ENTFLAG,ROUTFLG         DO WE WANT TO SET ROUT. CODE\n         BNO   CHKCMD                  NO, BRANCH TO CHECK NEXT FLAG\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         MVC   CTXTROUT-CTXTROUT(2,R1),ENTROUT     MOVE IN ROUT\n         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG\n         DROP  R1\n         SPACE ,\nCHKCMD   DS    0H\n         TM    ENTFLAG,CMMDFLG         ARE WE DOING A COMMAND ?\n         BO    COMMAND                 YES, BRANCH TO DO COMMAND\n         B     RETURN                  RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        SET UP TO ISSUE COMMAND                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nCOMMAND  EQU  *\n         SLR   R5,R5                   CLEAR FOR IC\n         IC    R5,ENTLID               GET LENGTH OF MESSAGE\n         LA    R5,ENTID(R5)            POINT TO COMMANDS\n         SLR   R4,R4                   CLEAR FOR IC\n         ICM   R4,B'0001',0(R5)        GET NUMBER OF COMMANDS\n         BZ    RETURN                  EXIT IF NONE\n         LA    R5,1(,R5)               BUMP UP PAST NUMBER OF CMDS\nCMDLOOP  DS    0H\n         LA    R9,WTOAREA              POINT TO WTO AREA\n         USING CMDDSECT,R9             USE IT\n         MVI   WTOAREA,C' '            CLEAR ...\n         MVC   WTOAREA+1(L'WTOAREA-1),WTOAREA ... WTOAREA\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,0(,R5)               GET LENGTH\n         LTR   R1,R1                   ZERO LENGTH ?\n         BZ    RETURN                  YES, LEAVE\n         CH    R1,=AL2(L'WTOAREA-CWTOLEN)  TOO LARGE TO MOVE ?\n         BH    RETURN                  YES, LEAVE\n         SPACE ,\n         BCTR  R1,0                    LESS ONE FOR EX\n         EX    R1,$MVCCMD              MOVE CMD\n         B     CMDEXSKP                SKIP OVER EXECUTED CODE\n         SPACE\n$MVCCMD  MVC   WTOAREA+4(*-*),1(R5)    EXECUTED\n         SPACE\nCMDEXSKP DS    0H\n         LA    R1,1(,R1)               GET BACK REAL LENGTH\n         SPACE ,\n         LR    R0,R1                   AND SAVE IN R0\n         MVC   CMDDSECT(CMDHDRLN),CMDWTO MOVE FIRST PART OF WTO COMMAND\n         AH    R0,CMDWTO               ADD LEN OF WTO TO LEN OF CMD\n         STH   R0,CMDLEN               STORE LENGTH OF COMMAND WTO\n         LA    R1,CMDCMD(R1)           POINT PAST CMD\n         MVC   0(CWTOLEN-CMDHDRLN,R1),CMDWTO+CMDHDRLN MOVE REST OF WTO\n         SPACE\n         CLC   CMDCMD(5),REPLYKW       REPLY REQUESTED ?\n         BNE   CMDJBNSC                NO, BRANCH TO SCAN FOR JOBNAME\n         TM    CTXTTFB1,CTXTTFWR       IS IT A WTOR ?\n         BNO   RETERR1                 NO, BR TO ISSUE ERR MSG AND RET\n         OI    CTXTRFB2,CTXTRHCO       SET TO HARDCOPY ONLY\n         MVC   CMDRPNUM(L'CTXTRPID),CTXTRPID  MOVE IN REPLY NUM\n         SPACE\nCMDJBNSC DS    0H\n         SLR   R7,R7                   CLEAR R7 FOR IC\n         IC    R7,0(,R5)               GET LENGTH OF CMD\n         S     R7,=A(L'JOBNKW-1)       GET LENGTH OF SEARCH\n         BNP   CMDISSUE                SKIP SRCH IF NOT LONG ENOUGH\n         LA    R1,CMDCMD               POINT TO CMD IN WTO\n         SPACE ,\n         DROP  R9\n         SPACE ,\nCMDSCNLP DS    0H\n         CLC   0(8,R1),JOBNKW          SEARCH FOR JOB NAME KEYWORD\n         BE    CMDMVJBN                MOVE IN JOBNAME\n         LA    R1,1(,R1)               BUMP POINTER\n         BCT   R7,CMDSCNLP             LOOP\n         B     CMDISSUE                BR TO ISSUE CMD\n         EJECT ,\n*---------------------------------------------------------------------*\n*        MOVE JOBNAME INTO COMMAND IF REQUESTED                       *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDMVJBN DS    0H\n         MVC   0(8,R1),CURJBNM         MOVE IN JOBNAME\n         LA    R9,8(,R1)               POINT TO DISPLACE PLACE\n         AH    R1,CURJBNLN             ADD LENGTH OF JOBNAME\n         LA    R8,8                    MAX JOBNAME LENGTH\n         SH    R8,CURJBNLN             AMOUNT TO DISPLACE REST OF WTO\n         BNP   CMDMVJB2                SKIP IF NOTHING TO DISPLACE\n         LA    R7,0(R8,R7)             GET AMOUNT TO MOVE\n         LTR   R7,R7                   IS THERE ANY?\n         BNP   CMDMVJB1                NO, SKIP MOVE\n         BCTR  R7,0                    LESS ONE FOR EX\n         EX    R7,$CMDMVC1             MOVE RIGHT\n         B     CMDMVJB1\n         SPACE\n$CMDMVC1 MVC   0(*-*,R1),0(R9)         EXECUTED\n         SPACE\nCMDMVJB1 DS    0H\n         LA    R9,WTOAREA              POINT TO WTO AREA\n         USING CMDDSECT,R9             USE IT\n         LH    R1,CMDLEN               LOAD LENGTH OF WTO\n         SR    R1,R8                   LESS AMOUNT MOVED\n         STH   R1,CMDLEN               STORE NEW LENGTH\nCMDMVJB2 DS    0H\n         B     CMDISSUE\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*        ISSUE COMMAND                                                *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDISSUE DS    0H\n         LA    R1,WTOAREA              POINT R1 TO COMMAND WTO\n         SR    R0,R0                   SHOW COMMAND\n         SVC   34                      ISSUE COMMAND\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,0(,R5)               GET LENGTH\n         LA    R5,1(R1,R5)             POINT TO NEXT CMD\n         BCT   R4,CMDLOOP              LOOP THROUGH COMMANDS\n         SPACE ,\n         B     RETURN                  BRANCH TO EXIT\n         EJECT ,\nCMDWTO   WTO   ' ',ROUTCDE=(1),DESC=(5),MF=L\nCWTOLEN  EQU   *-CMDWTO\n         EJECT ,\n*---------------------------------------------------------------------*\n*        ISSUE ERROR MESSAGE WTO                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETERR1  DS    0H\n         WTO   'R2D20001 REPLY REQUESTED AND MESSAGE IS NOT A WTOR'\n         B     RETURN                  BRANCH TO RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO DO FREEMAIN       *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETURN   DS    0H\n         LR    R1,R10                  GET AREA ADDRESS\n         L     R13,SAVE+4              RELOAD SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WKAREAL,SP=230\n         LM    R14,R12,12(R13)         RELOAD REGISTERS\n         SLR   R15,R15                 SET RETURN CODE\n         BR    R14                     RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*        TABLE OF MESSAGE ID'S TO BE ACTED ON                         *\n*---------------------------------------------------------------------*\n         SPACE ,\nTABLPRMS DC     A(MSGTABS),A(MSGTABE),A(0),A(0)\nMSGTABS  DS     0H\n         IEEMSG ID=IEE362A,ROUTCDE=2,DESC=4  LET IT ROLL\n         IEEMSG ID=IST020I,CMD1='S TSO',CMD2='$SLGN1;DQ'\nMSGTABE  EQU    *\n         DC     512X'0'\nTABLEND  EQU    *\n         EJECT ,\n*---------------------------------------------------------------------*\n*        \"DUMMY\" TABLE FOR PASSWORD MESSAGES                          *\n*---------------------------------------------------------------------*\n         SPACE ,\nPSWDMSG  IEEMSG ID=IEC301A,CMD1='R XX,        '\nPSWDMSGL EQU   *-PSWDMSG\n         EJECT ,\n*---------------------------------------------------------------------*\n*                CONSTANTS                                            *\n*---------------------------------------------------------------------*\n         SPACE ,\nREPLYKW  DC    CL5'R XX,'\nJOBNKW   DC    CL8'&&JOBNAME'\nASIDKW   DC    CL8'&&ASID'\nTRHEXTBL EQU   *-X'F0'\n         DC    C'01234567'\n         DC    C'89ABCDEF'\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*---------------------------------------------------------------------*\n*                EQUATES                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        COMMAND DSECT                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDDSECT DSECT\nCMDLEN   DS    AL2                     LENGTH OF COMMAND WTO\nCMDMCS   DC    B'0000000000000000'     MCS FLAGS\nCMDHDRLN EQU   *-CMDDSECT\nCMDCMD   EQU   *                       COMMAND GOES HERE\nCMDRPNUM EQU   *+2                     REPLYNUM GOES HERE\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CSA TABLE DSECT                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\n         C3POTABL\n         EJECT ,\n*---------------------------------------------------------------------*\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*---------------------------------------------------------------------*\n         SPACE ,\n         MSGENT\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYSTEM DSECTS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         PRINT OFF\n         CVT   DSECT=YES\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IKJTCB\n         IHAASVT\n         IHAASCB\n         IHARB\n         IKJTSB\n         IEECUCM FORMAT=NEW,DSECT=YES\n         IEZJSCB\n         IEFJSSIB\n         IHAORE\n         IHAWQE\n         IEZVX100\n         PRINT ON\n         EJECT ,\n*---------------------------------------------------------------------*\n*        WORK AREA DSECT                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\nWKAREA   DSECT\nSAVE     DS    18F                     SAVE AREA\nDSN      DS    CL44                    DSN FOR PASSWORD\nCURJBNM  DS    CL8                     JOBNAME\nCURJBNLN DS    H                       JOBNAME LENGTH\nCURASID  DS    F                       ASID\nPSWDENT  DS    CL(PSWDMSGL)\n         DS    CL88                    ROOM TO EXPAND ENTRY\nPSWDRPLY DS    CL8                     PASSWORD REPLY\nWTOAREA  DS    CL128                   AREA FOR SVC 34\nWKAREAL  EQU   *-WKAREA\n         END\n./ ADD NAME=IEBCOPY  0100-88137-88153-1457-00011-00011-00000-GIBSON\n//IEBCOPY JOB   TS,GIBSON,MSGCLASS=X,CLASS=Y,TYPRUN=HOLD\n//STEP1  EXEC   PGM=IEBCOPY\n//SYSPRINT DD SYSOUT=*\n//INDD     DD  DSN=GIBSON.JES2.EXITLIB,DISP=SHR\n//OUTDD    DD  DSN=GIBSON.JES2.EXITLIB,UNIT=TAPE,VOL=SER=LLBCBT,\n//         DISP=(NEW,KEEP),LABEL=(1,SL,EXPDT=98000)\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSIN    DD  *\n COPY INDD=INDD,OUTDD=OUTDD\n/*\n./ ADD NAME=IEEC3PO  0100-88137-88153-1457-01141-01141-00000-GIBSON\n         TITLE 'BUILD R2D2 TABLE  -    IEEC3PO  '\n         PRINT  GEN\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:  THIS PROGRAM BUILDS A TABLE IN CSA  FOR THE WTO   *\n*              EXIT IEAVMXIT, WHICH INCLUDES IEECR2D2. IT RESPOND TO  *\n*              A WTOR OR ISSUE COMMANDS KEYED OFF A WTO.              *\n*                                                                     *\n*        ENTRY:  IEEC3PO                                              *\n*                                                                     *\n*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *\n*                                                                     *\n*        INPUT:  NONE                                                 *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*    MACRO DEFINITIONS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&LABEL   ERRMSG   &RC=,&TXT1=,&TXT2=,&TXT3=,&MSGNUM=\n         LCLA  &LTXT1,&LTXT2,&LTXT3\n.*\n.* CHECK PARAMETERS\n.*\n.RCCHK1  AIF   (T'&RC NE 'O').RCCHK9\n         MNOTE 8,'* * * ERROR * * * RC NOT SPECIFIED'\n         MEXIT\n.RCCHK9  ANOP\n.NMCHK1  AIF   (T'&MSGNUM NE 'O').NMCHK2\n         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT SPECIFIED'\n         MEXIT\n.NMCHK2  AIF   (K'&MSGNUM EQ 4).NMCHK9\n         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT 5 CHARACTERS'\n         MEXIT\n.NMCHK9  ANOP\n.TX1CHK1 AIF   (T'&TXT1 NE 'O').TX1CHK9\n         MNOTE 8,'* * * ERROR * * * TXT1 NOT SPECIFIED'\n         MEXIT\n.TX1CHK9 ANOP\n.TX2CHK1 AIF   (T'&TXT2 NE 'O').TX2CHK9\n         AIF   (T'&TXT3 EQ 'O').TX2CHK9\n         MNOTE 8,'* * * ERROR * * * TXT3 WAS SPECIFIED BUT NOT TXT2'\n         MEXIT\n.TX2CHK9 ANOP\n.*\n.* SET LENGTHS\n.*\n&LTXT1   SETA  K'&TXT1-2\n&LTXT2   SETA  K'&TXT2-2\n&LTXT3   SETA  K'&TXT3-2\n.*\n.* COMMAND\n.*\n&LABEL   DC   F'&RC'\n         DC   CL5'&MSGNUM'\n         DC   AL1(&LTXT1)\n         DC   C&TXT1\n         AIF   (T'&TXT2 EQ 'O').OUT\n         DC   AL1(&LTXT2)\n         DC   C&TXT2\n         AIF   (T'&TXT3 EQ 'O').OUT\n         DC   AL1(&LTXT3)\n         DC   C&TXT3\n.OUT     ANOP\n         DC   AL1(0)\n         MEND\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        START THE PROGRAM                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nIEEC3PO  CSECT\n         SAVE  (14,12),,'IEEC3PO,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING IEEC3PO,R12,R11         REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         GETMAIN R,LV=WKAREAL,SP=250   GET CORE FROM SP=250\n         ST    R13,SAVE+4-WKAREA(,R1)  CHAIN ...\n         ST    R1,8(,R13)              ...  SAVEAREAS\n         LR    R10,R1                  PUT SAVE AREA ADDRESS INTO R13\n         L     R1,24(,R13)             RELOAD PARM REG.\n         USING WKAREA,R10              GET ADDRESSABILITY\n         LA    R13,SAVE                LOAD SAVE AREA ADDRESS INTO R13\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS PARM                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R1,0(,R1)               POINT TO PARM\n         CLC   0(2,R1),=H'0'           NO PARM SPECIFIED ?\n         BE    DODCBS                  GO DO DCB S\n         CLC   0(2,R1),=H'6'           6 CHARS ?\n         BNE   DODCBS                  NO, GO DO DCB S\n         CLC   =CL6'VERIFY',2(R1)      IS IT VERIFY ?\n         BNE   DODCBS                  NO, BR TO DO DCBS\n         OI    FLAGS3,TSTFLG           SET TEST FLAG\n         B     DODCBS                  B DO DCB S\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET UP DCB'S                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDODCBS   DS    0H\n         MVC   INPUT(INPUTL),INPUTC        SET UP SYSIN DCB\n         MVC   OUTPUT(OUTPUTL),OUTPUTC     SET UP SYSOUT DCB\n         MVC   OPENIN(OPENINL),OPENINC     SET UP OPEN FOR SYSIN\n         MVC   OPENOUT(OPENOUTL),OPENOUTC  SET UP OPEN FOR SYSOUT\n         MVC   CLOSIN(CLOSINL),CLOSINC     SET UP CLOSE FOR SYSIN\n         MVC   CLOSOUT(CLOSOUTL),CLOSOUTC  SET UP CLOSE FOR SYSOUT\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        GET INPUT                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCMDGETIN DS    0H\n         LA    R2,OUTPUT           POINT TO OUTPUT DCB\n         OPEN  ((2)),MF=(E,OPENOUT) OPEN OUTPUT\n         TM    OUTPUT+48,X'10'     DID OUTPUT OPEN\n         BZ    OUTERR              NO - BRANCH TO PUT OUT ERROR MSG\n         LA    R2,INPUT            POINT TO INPUT DCB\n         OPEN  ((2)),MF=(E,OPENIN) OPEN INPUT\n         TM    INPUT+48,X'10'      DID IT OPEN\n         BZ    INERR               NO, BRANCH TO PUT OUT ERROR MSG\n         ZAP   CMDCOUNT,=P'0'      CLEAR COUTER\n         SPACE ,\nCMDGET   DS    0H\n         XC    COLCOUNT,COLCOUNT   CLEAR COL COUNT FOR CONTINUATIONS\n         SPACE ,\nCMDGET1  DS    0H\n         CLI   EOD,X'FF'           REACHED END OF INPUT ?\n         BE    MOVTAB              YES, BRANCH TO MOV TABLE TO CSA\n         GET   INPUT               READ RECORD FROM SYSIN\n         SPACE ,\nCMDOUT   DS    0H\n         MVI   OUTBUF,C' '         CLEAR OUTPUT...\n         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ... BUFFER\n         MVC   OUTCMD(80),0(R1)    MOVE CMD TO OUTPUT\n         LR    R4,R1 SAVE INPUT RECORD POINTER\n         PUT   OUTPUT,OUTBUF       PUT MSG TO OUTPUT FILE\n         NI    FLAGS2,255-CONT     ASSUME NOT CONT AND CLEAR CONT FLAG\n         CLI   71(R4),C' '         CONTINUATION ?\n         BE    SKPSET              NO, SKIP SETTING CONT FLAG\n         OI    FLAGS2,CONT         YES, SET CONT FLAG\n         SPACE ,\nSKPSET   DS    0H\n         LH    R2,COLCOUNT         LOAD COL COUNT\n         LA    R3,CMDTXT(R2)       POINT R3 INTO CMDTXT TO MOVE INPUT\n         LA    R2,71(,R2)          LOAD NEW COLCOUNT INTO R2\n         STH   R2,COLCOUNT         STORE NEW COL COUNT\n         MVC   0(71,R3),0(R4)      MOVE INPUT INTO BUFFER\n         C     R2,=F'1729'         OVER MAX ?\n         BL    CONTOK1             NO, SKIP PUTTING OUT ERR MSG\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,CONTERR1         ... OUT ...\n         ST    R1,ERRPRM3          ...... ERROR ...\n         LA    R1,ERRPRM1          ......... MESSAGE ...\n         BAL   R14,ERRPUT\n         SPACE ,\nCONTOK1  DS    0H\n         TM    FLAGS2,CONT         THIS A CONT ?\n         BO    CMDGET1             YES, GET NEXT RECORD\n         B     CALLSCAN            NO, BRANCH TO CALL SCAN ROUTINE\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CALL SCAN ROUTINE                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCALLSCAN DS    0H\n         LA    R4,CLRSTRT          CLEAR\n         LA    R5,CLRLEN           STORAGE\n         LA    R6,CLRSTRT-1        ...\n         SLR   R7,R7               ...\n         MVCL  R4,R6               ...\n         SPACE ,\n         AP    CMDCOUNT,=P'1'      ADD ONE TO CMD COUNT\n         LA    R0,CMDBUF           GET ADDR OF CHAR STRING\n         LA    R1,KEYTBL           KEYWORD TABLE ADDRESS\n         CALL  KEYSCAN             SCAN\n         STM   R0,R1,ERRPRM1       SAVE FOR POSSIBLE ERROR\n         B     SCANERR(R15)        SET ERROR MSG\n         SPACE 1\nSCANERR  DS    0H\n         B     CHKMSGID            NO ERRS BR TO CHK MSG ID SPECIFIED\n         B     SCANER4             VALUE MISSING FOR KEYWORD\n         B     SCANER8             INVALID KEYWORD\n         B     SCANER12            TOO MANY/FEW VALUES FOR KEYWORD\n         B     CMDGET              NULL INPUT\n         B     SCANER20            INVALID VALUE FOR KEYWORD\n         B     SCANER24            VALUE TOO LONG FOR KEYWORD\n         B     SCANER28            KEYWORD SPECIFIED TWICE\n         B     SCANER32            NUMERIC VALUE TOO HIGH\n         B     SCANER36            KEYWORD SPECIFIED MUTUALLY EXC\n         B     SCANER40            KEYWORD SPECIFIED TOO MANY TIMES\n         B     SCANER44            VALUE SPECIFIED TWICE FOR KEYWORD\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET AND PUT ERROR MSG                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nSCANER4  DS    0H\n         LA    R1,ERRSCN4\n         B     SCANER99\n         SPACE 1\nSCANER8  DS    0H\n         LA    R1,ERRSCN8\n         B     SCANER99\n         SPACE 1\nSCANER12 DS    0H\n         LA    R1,ERRSCN12\n         B     SCANER99\n         SPACE 1\nSCANER16 DS    0H\n         LA    R1,ERRSCN16\n         B     SCANER99\n         SPACE 1\nSCANER20 DS    0H\n         LA    R1,ERRSCN20\n         B     SCANER99\n         SPACE 1\nSCANER24 DS    0H\n         LA    R1,ERRSCN24\n         B     SCANER99\n         SPACE 1\nSCANER28 DS    0H\n         LA    R1,ERRSCN28\n         B     SCANER99\n         SPACE 1\nSCANER32 DS    0H\n         LA    R1,ERRSCN32\n         B     SCANER99\n         SPACE 1\nSCANER36 DS    0H\n         LA    R1,ERRSCN36\n         B     SCANER99\n         SPACE 1\nSCANER40 DS    0H\n         LA    R1,ERRSCN40\n         B     SCANER99\n         SPACE 1\nSCANER44 DS    0H\n         LA    R1,ERRSCN44\n         B     SCANER99\n         SPACE 1\nSCANER99 DS    0H\n         ST    R1,ERRPRM3\n         LA    R1,ERRPRM1\n         BAL   R14,ERRPUT\n         B     CMDGET\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MAKE SURE MSG ID OR DELETE SPECIFIED                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCHKMSGID DS    0H\n         TM    FLAGS1,DELFLG       DELETE SPECIFIED ?\n         BO    GOTID               YES, BR, ITS OK\n         TM    FLAGS2,IDFLG        MESSAGE ID SPECIFIED ?\n         BO    GOTID               YES, BR, ITS OK\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,ERRID            ERR ...\n         ST    R1,ERRPRM3          MSG ...\n         LA    R1,ERRPRM1          ...\n         BAL   R14,ERRPUT          ...\n         B     CMDGET              ...\n         SPACE ,\nGOTID    DS    0H\n         CLC   RETCODE,=F'4'       IS RETCODE GREATER THAN 4 ?\n         BH    CMDGET              YES, GET NEXT, DONT SET TABLE\n         B     MOVEENT             BR TO MOVE ENT INTO CMDBLK\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET UP CMD BLOCK                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMOVEENT  DS    0H\n         LA    R2,ENTHDRLN         ADD HDR LEN TO TOTAL ENT LEN\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,MSGID+1          GET LEN OF MSGID\n         LA    R2,1(R3,R2)         ADD TO TOTAL ENT LEN\n         TM    FLAGS1,CMMDFLG      CMD SPECIFIED ?\n         BZ    NOCMD               NO, SKIP ADDING CMD LEN\n         L     R3,CMDLEN           LOAD CMD LEN\n         LA    R2,1(R3,R2)         ADD TO TOTAL LEN\n         L     R1,=A(CMBLKLEN-(CMBLK1ST-CMBLK)) GET MAX LEN\n         CR    R2,R1               TOO HIGH ?\n         BNH   NOCMD               NO, SKIP\n         EX    R0,*                YES, ABEND\n         SPACE ,\nNOCMD    DS    0H\n         L     R9,BLKPTRL          POINT TO LAST CMDBLK\n         LTR   R9,R9               IS THERE ONE ?\n         BZ    GETCMBLK            NO, GO GET ONE\n         USING CMBLK,R9            SET ADDRESSABILITY\n         L     R4,CMBLKNXT         POINT TO NXT BLK ENTRY\n         LA    R4,0(R2,R4)         ADD ENTRY LEN\n         C     R4,CMBLKEND         PAST END ?\n         BL    SKIPGET             NO, SKIP GETTING NEW BLK\n         SPACE ,\nGETCMBLK DS    0H\n         GETMAIN R,LV=CMBLKLEN,SP=250   GET CORE FROM SP=250\n         LTR   R9,R9               IS THIS FORST BLK ?\n         BNZ   NOTFIRST            NO, SKIP\n         LR    R9,R1               LOAD POINTER TO NEW BLK\n         ST    R9,BLKPTRF          STORE ADD IN FIRST BLK PTR\n         XC    CMBLKFWD,CMBLKFWD   CLEAR FWD POINTER\n         XC    CMBLKBCK,CMBLKBCK   CLEAR BACKWD POINTER\n         B     SKPCHAIN            AND SKIP CHAINING\n         SPACE ,\nNOTFIRST DS    0H\n         ST    R1,CMBLKFWD         CHAIN FWD\n         ST    R9,CMBLKBCK-CMBLK(,R1) CHAIN BACK\n         LR    R9,R1               POINT TO NEW BLK\n         SPACE ,\nSKPCHAIN DS    0H\n         ST    R9,BLKPTRL          SAVE PTR TO LAST BLK\n         L     R1,=A(CMBLKLEN)     GET LENGTH OF BLK\n         LA    R1,0(R1,R9)         ADD TO START\n         ST    R1,CMBLKEND         STORE END OF BLK\n         LA    R4,CMBLK1ST         GET POINTER TO FISRT ENT\n         ST    R4,CMBLKNXT         SAVE AS NEXT AVAILABLE ENT\n         LA    R4,0(R2,R4)\n         SPACE ,\nSKIPGET  DS    0H\n         L     R8,CMBLKNXT         GET POINTER TO NEXT AVAIL ENT\n         ST    R4,CMBLKNXT         SAVE NEW PTR\n         USING MSGENT,R8\n         STH   R2,ENTLEN           STORE ENT LEN\n         MVC   ENTDESC,DESCFLGS    MOVE DESC FLAGS\n         MVC   ENTROUT,ROUTFLGS    MOVE ROUT FLAGS\n         MVC   ENTFLAG,FLAGS1      MOVE FLAGS\n         MVC   ENTJBNM,=CL8' '     CLEAR JOB NAME\n         TM    FLAGS1,JBNMFLG      WAS JOBNAME SPECIFIED ?\n         BNO   NOJBNM              NO, SKIP SETTING JOB NAME\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,JOBNAME+1        GET LENGTH OF JOBNAME\n         BCTR  R3,0                LESS ONE FOR EX\n         EX    R3,JOBNMMVC         MOVE JOBNAME\n         SPACE ,\nNOJBNM   DS    0H\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,MSGID+1          GET MSG ID LEN\n         EX    R3,MSGIDMVC         MOV MSGID PLUS LEN\n         TM    FLAGS1,CMMDFLG      WAS CMD SPECIFIED ?\n         BZ    NOCMDMOV            NO, SKIP CMD MOV\n         LA    R4,ENTLID+1(R3)     POINT TO AREA TO MOVE CMD\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,CMDNM            GET NUMBER OF CMDS\n         STC   R3,0(,R4)           STORE\n         LA    R4,1(,R4)           BUMP PTR UP ONE\n         L     R5,CMDLEN           GET CMD LEN\n         LA    R6,CMD1             POINT TO CMDS\n         LR    R7,R5               SET LENGTH OF TARGET AREA\n         MVCL  R4,R6               MOVE CMDS\n         SPACE ,\nNOCMDMOV DS    0H\n         B     CMDGET\n         SPACE ,\nJOBNMMVC MVC   ENTJBNM(*-*),JOBNAME+2\nMSGIDMVC MVC   ENTLID(*-*),MSGID+1\n         DROP  R8\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        END OF DATA ROUTINE                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDEOD   DS    0H\n         MVI   EOD,X'FF'           SET EOD FLAG\n         LA    R2,INPUT            POINT TO INPUT DCB\n         CLOSE ((2)),MF=(E,CLOSIN) CLOSE INPUT\n         TM    FLAGS2,CONT         CONTINUATION ON LAST CARD ?\n         BNO   CMDEOD1             NO, SKIP\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,CONTERR2         ERR ...\n         ST    R1,ERRPRM3          MSG ...\n         LA    R1,ERRPRM1          ...\n         BAL   R14,ERRPUT          ...\n         B     CALLSCAN            ...\n         SPACE ,\nCMDEOD1  DS    0H\n         B     MOVTAB              BR, TO MOVE TABLE TO CSA\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MOVE TABLE INTO CSA                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMOVTAB   DS    0H\n         TM    FLAGS3,TSTFLG       TEST FLAG ON\n         BO    RETURN              YES, BRANCH TO RETURN\n         CLC   RETCODE,=F'4'       RET CODE GREATER THAN 4 ?\n         BH    RETURN              YES, ALL DONE\n         TM    FLAGS1,DELFLG       DELETE REQUESTED ?\n         BO    DELETE              YES, GO DO DELETE\n         SLR   R0,R0               CLEAR R0 FOR TOTAL COUNT\n         USING CMBLK,R4\n         L     R4,BLKPTRF          POINT TO FIRST CMDBLK\n         SPACE ,\nCNTLP    DS    0H\n         L     R5,CMBLKNXT         POINT R5 TO NEXT CMDBLK\n         LA    R6,CMBLK1ST         POINT R6 TO FIRST ENTRY\n         SR    R5,R6               GET LENGTH OF BLK\n         AR    R0,R5               ADD TO TOTAL LEN\n         L     R4,CMBLKFWD         POINT TO NEXT BLK\n         LTR   R4,R4               IS THERE ONE ?\n         BNZ   CNTLP               YES, LOOP\n         DROP  R4\n         LA    R6,C3POHDRL         GET LEN OF C3PO CSA TABLE HEADER\n         AR    R0,R6               ADD TO TOTAL LEN\n         LR    R2,R0               SAVE IN R2\n         LR    R3,R0               AND R3\n         GETMAIN R,LV=(2),SP=241 SP=241 GET CSA\n         LR    R8,R1               PUT ADDR INTO R8\n         USING C3POTABL,R8\n         MVC   C3POID,=CL8'C3POTABL' SET C3PO ID\n         L     R5,CVTPTR           POINT R5 TO CVT\n         L     R5,CVTUSER-CVT(,R5) LOAD R5 FROM CVTUSER\n         ST    R5,C3PONXT          CHAIN NEW TABLE IN FRONT OF OLD\n         LA    R5,C3POENT          LOAD POINTER TO FISRT ENT\n         ST    R5,C3PO1ST          ST POINTER TO FISRT ENT\n         LA    R5,C3POTABL         LOAD PTR TO TABLE\n         AR    R5,R3               ADD LEN OF TABLE\n         ST    R5,C3POEND          STO PTR TO END OF TABLE\n         ST    R3,C3POLEN          ST LEN OF TABLE\n         XC    C3PORSV,C3PORSV     CLEAR RESV\n         LA    R6,C3POENT          POINT TO FIRST ENT\n         USING CMBLK,R3\n         L     R3,BLKPTRF          LOAD ADDR OF FISRT CMD BLK\n         SPACE ,\nMOVLOOP  DS    0H\n         LA    R4,CMBLK1ST         LOAD ADDR OF FIRST ENT IN CMD BLK\n         L     R5,CMBLKNXT         LOAD POINTER TO NEXT AVAIL ENT\n         SR    R5,R4               GET LEN OF CMD BLK ENTRIES\n         LR    R7,R5               AND SET AS TARGET LEN\n         MVCL  R6,R4               MOVE CMD ENTER INTO CSA\n         L     R3,CMBLKFWD         POINT TO NEXT CMDBLK\n         LTR   R3,R3               IS THERE ONE ?\n         BNZ   MOVLOOP             YES, LOOP\n         L     R4,CVTPTR               LOAD ADDRESS OF CVT\n         USING CVT,R4\n         L     R2,CVTUSER              LOAD OLD CONTENTS OF CVTUSER\n         MODESET KEY=ZERO\n         ST    R8,CVTUSER              SET PTR TO NEW C3PO TABLE\n         DROP  R4\n         MODESET KEY=NZERO\n         B     RETURN                  RETURN\n         DROP  R8\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FREEMAIN OLD R2D2 TABLE                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDELETE   DS    0H\n         L     R4,CVTPTR           GET POINTER TO ...\n         L     R2,CVTUSER-CVT(,R4) ... C3PO TABLE\n         USING C3POTABL,R2\n         LR    R3,R2               SAVE POINTER\n         SPACE ,\nDELLOOP  DS    0H\n         LTR   R2,R3               DOES TABLE EXIST ?\n         BZ    DELLPEND            NO, ALL DONE\n         L     R3,C3PONXT          YES, LOAD POINTER TO NEXT TABLE\n         CLC   C3POID,=CL8'C3POTABL' IS IT AN R2D2 TABLE ?\n         BNE   DELXIT              NO, EXIT SOMETHING NOT RIGHT\n         LR    R1,R2               LOAD FREEMAIN ADDRESS\n         L     R2,C3POLEN          LOAD FREEMAIN LENGTH\n         DROP  R2\n         LTR   R2,R2               IS LENGTH ZERO ?\n         BZ    DELXIT              YES, DON'T FREE IT\n         FREEMAIN R,A=(1),LV=(2),SP=241 DO FREEMAIN\n         B     DELLOOP             LOOP TO FREE NEXT TABLE\n         SPACE ,\nDELLPEND DS    0H\n         MODESET KEY=ZERO\n         XC    CVTUSER-CVT(4,R4),CVTUSER-CVT(R4) CLEAR PTR IN CVT\n         MODESET KEY=NZERO\n         SPACE ,\nDELXIT   DS    0H\n         B     RETURN              RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *\n*        OUR GOTTEN CORE FROM SP=250                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETURN   DS    0H\n         LA    R2,OUTPUT           POINT TO OUTPUT DCB\n         CLOSE ((2)),MF=(E,CLOSOUT) CLOSE OUTPUT\n         L     R9,BLKPTRF          GET POINTER TO FIRST CMD BLK\n         SPACE ,\nFREELP   DS    0H\n         LTR   R9,R9               IS THER ONE ?\n         BZ    SKIPFREE            NO, THEN DONT FREE IT\n         USING CMBLK,R9\n         LR    R1,R9               LOAD POINTER TO CMD BLK\n         L     R9,CMBLKFWD         LOAD POINTER TO NEXT CMD BLK\n         FREEMAIN R,A=(1),LV=CMBLKLEN,SP=250 DO FREEMAIN\n         B     FREELP              LOOP\n         SPACE 2\nSKIPFREE DS    0H\n         L     R2,RETCODE          LOAD RETURN CODE\n         LR    R1,R13              GET AREA ADDRESS\n         L     R13,SAVE+4          RELOAD SAVE AREA ADDRESS\n         FREEMAIN R,A=(1),LV=WKAREAL,SP=250 DO FREEMAIN\n         LR    R15,R2              LOAD RETCODE INTO R15\n         RETURN (14,12),RC=(15)    RETURN\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DISASTEROUS ERRORS                                           *\n*        WTO ERROR MSG AND RETURN WITH CODE 12                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nOUTERR   DS    0H\n         WTO   'C3PO0901D ERROR OPENING OUTPUT FILE, EXECUTION ENDS',  X\n               ROUTCDE=(12)\n         MVC   RETCODE,=F'12'      SET ERROR CODE\n         B     RETURN\n         SPACE ,\nINERR    DS    0H\n         WTO   'C3PO0902D ERROR OPENING INPUT FILE, EXECUTION ENDS',   X\n               ROUTCDE=(12)\n         MVC   RETCODE,=F'12'      SET ERROR CODE\n         B     RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR MESSAGE SUBROUTINE                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nERRPUT   DS    0H\n         STM   R14,R12,SAVAREA2    SAVE REGISTERS\n         L     R2,8(,R1)           LOAD POINTER TO ERR MSG BLK\n         L     R3,0(,R2)           LOAD RETURN CODE\n         LA    R4,4(,R2)           POINT TO MSG NUM\n         LA    R2,9(,R2)           POINT TO FIRST ERR MSG TXT\n         C     R3,RETCODE          IS RETCODE GREATER THAN CURNT ?\n         BNH   ERRSKP              NO, SKIP RET CODE SET\n         ST    R3,RETCODE          ST NEW RETCODE\n         SPACE ,\nERRSKP   DS    0H\n         MVI   OUTBUF,C' '         CLEAR OUTPUT BUFFER ...\n         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ...\n         MVC   OUTMSG(4),=C'C3PO'  SET MSG HDR\n         MVC   OUTMSG+4(4),0(R4)   SET MSG NUM\n         MVI   OUTMSG+8,C'I'       SET MSG TYPE AS INFORMATIONAL\n         C     R3,=F'4'            IS RETCODE < 4 ?\n         BL    ERRSKP1             YES, SKIP\n         MVI   OUTMSG+8,C'W'       SET MSG TYPE AS WARNING\n         C     R3,=F'8'            IS RETCODE < 8 ?\n         BL    ERRSKP1             YES, SKIP\n         MVI   OUTMSG+8,C'E'       SET MSG TYPE AS ERROR\n         C     R3,=F'12'           IS RETCODE < 12 ?\n         BL    ERRSKP1             YES SKIP\n         MVI   OUTMSG+8,C'D'       SET MSG TYPE AS DISASTOR\n         SPACE ,\nERRSKP1  DS    0H\n         SLR   R5,R5               CLEAR OFFSET\n         LA    R6,OUTCMD           POINT TO OUTCMD\n         SPACE ,\nERRLP    DS    0H\n         ICM   R3,B'0001',0(R2)    LOAD TXT LEN INTO R3\n         BZ    ERRPUTIT            IF ZERO DONE\n         LA    R6,OUTCMD(R5)       LOAD POINTER INTO BUFFER\n         BCTR  R3,0                BUMP LEN BACK ONE FOR EX\n         EX    R3,ERRMVC1          MOVE TEXT\n         LA    R3,1(,R3)           ADD BACK ONE\n         LA    R5,0(R3,R5)         BUMP OFFSET\n         LA    R2,1(R3,R2)         POINT TO NEXT TEXT STR\n         ICM   R3,B'0001',0(R2)    LOAD LEN\n         BZ    ERRPUTIT            DONE IF ZERO\n         SPACE ,\n         L     R7,0(,R1)           POINT TO FIRST DYNAMIC\n         LA    R1,4(,R1)           POINT TO NEXT DYNAMIC\n         LA    R8,8                LOAD MAX LEN\n         LA    R4,ERRWORK          POINT TO ERR WORK\n         SPACE ,\nERRLP2   DS    0H\n         CLI   0(R7),C','          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C' '          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C')'          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C'='          END OF STR ?\n         BE    ERRSKP2             YES\n         MVC   0(1,R4),0(R7)       MOVE BYTE\n         LA    R4,1(,R4)           BUMP TARGET POINTER\n         LA    R7,1(,R7)           BUMP SOURCE POINTER\n         BCT   R8,ERRLP2           LOOP\n         SPACE ,\nERRSKP2  DS    0H\n         LA    R4,8                LOAD MAX LEN\n         SR    R4,R8               GET LEN OF STR\n         BNP   ERRSKP3             NONE END\n         LA    R6,OUTCMD(R5)       POINT INTO OUTCMD\n         BCTR  R4,0                LESS ONE FOR EX\n         EX    R4,ERRMVC2          MOVE STR\n         LA    R4,1(,R4)           ADD BACK\n         LA    R5,0(R4,R5)         SET OFFSET POINTER\n         SPACE ,\nERRSKP3  DS    0H\n         B     ERRLP               LOOP\n         SPACE ,\nERRPUTIT DS    0H\n         PUT   OUTPUT,OUTBUF       PUT STR\n         LM    R14,R12,SAVAREA2    RELOAD REGS\n         BR    R14                 RETURN\n         SPACE ,\nERRMVC1  MVC   0(*-*,R6),1(R2)\nERRMVC2  MVC   0(*-*,R6),ERRWORK\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR MESSAGES                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCONTERR1 ERRMSG RC=8,TXT1='MORE THAN 25 CONTINUATION CARDS',           X\n               MSGNUM=0001\nCONTERR2 ERRMSG RC=4,TXT1='CONTINUATION SPECIFIED ON LAST CARD',       X\n               MSGNUM=0002\nERRSCN4  ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': NOT SPECIFIED',                 X\n               MSGNUM=0003\nERRSCN8  ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': INVALID',                                       X\n               MSGNUM=0004\nERRSCN12 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': TOO MANY OR TOO FEW VALUES SPECIFIED',          X\n               MSGNUM=0005\nERRSCN16 ERRMSG RC=8,TXT1='LOGIC ERROR',                               X\n               MSGNUM=0991\nERRSCN20 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': INVALID',                       X\n               MSGNUM=0006\nERRSCN24 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': TOO LONG',                      X\n               MSGNUM=0007\nERRSCN28 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': SPECIFIED TWICE',                               X\n               MSGNUM=0008\nERRSCN32 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': GREATER THAN 16',               X\n               MSGNUM=0009\nERRSCN36 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': MUTUALLY EXCLUSIVE WITH OTHER SPECIFIED KEYWORD'X\n               ,MSGNUM=0010\nERRSCN40 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': SPECIFIED TOO MANY TIMES',                      X\n               MSGNUM=0011\nERRSCN44 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': SPECIFIED TWICE',               X\n               MSGNUM=0012\nERRID    ERRMSG RC=8,TXT1='KEYWORD ID: NOT SPECIFIED',                 X\n               MSGNUM=0013\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        KEYWORD CHECK SUBROUTINES                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK MESSAGE ID                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nIDCHK    DS    0H\n         SAVE  (14,12),,IDCHK      SAVE REGS\n         TM    FLAGS2,IDFLG        ID ALREADY SPECIFIED ?\n         BO    IDCRET28            YES, ERROR\n         OI    FLAGS2,IDFLG        SET ID FLAG\n         B     IDCRET0             BR TO RET CODE 0\n         SPACE ,\nIDCRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     IDCRET\n         SPACE ,\nIDCRET28 DS    0H\n         LA    R15,28              SET RETCODE TO 28\n         B     IDCRET\n         SPACE ,\nIDCRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK JOBNAME                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nJOBCHK   DS    0H\n         SAVE  (14,12),,JOBCHK     SAVE REGS\n         TM    FLAGS1,JBNMFLG      JOBNAME ALREADY SPECIFIED ?\n         BO    JOBRET28            YES, ERROR\n         OI    FLAGS1,JBNMFLG      SET JOBNAME FLAG\n         B     JOBRET0             BR\n         SPACE ,\nJOBRET0  DS    0H\n         SLR   R15,R15             SET RET CODE TO ZERO\n         B     JOBRET\n         SPACE ,\nJOBRET28 DS   0H\n         LA    R15,28              SET RETCODE TO 28\n         B     JOBRET\n         SPACE ,\nJOBRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK ROUTE                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nROUCHK   DS    0H\n         SAVE  (14,12),,ROUCHK     SAVE REGS\n         TM    FLAGS1,ROUTFLG      ROUT ALREADY SPECIFIED ?\n         BO    ROURET28            YES ERROR\n         OI    FLAGS1,ROUTFLG      SET ROUT FLAG\n         SPACE 1\n         LR    R8,R0               POINT TO STR AREA\n         SLR   R4,R4               CLEAR R4 FOR IC\n         IC    R4,0(,R8)           GET NUMBER OF ENTRIES\n         SLR   R5,R5               CLEAR R5\n         SPACE 1\nROULP    DS    0H\n         LA    R8,1(R5,R8)         POINT TO ROU PARAMETER\n         LA    R3,1(,R8)           POINT R3 TO FIRST\n         CLI   0(R8),X'02'         IS LEN > 2 ?\n         BH    ROURET32            LESS ERROR\n         ICM   R5,B'0001',0(R8)    LOAD LEN\n         BZ    ROUNULL             END IF ZERO\n         BCTR  R5,0                LESS ONE FOR EX\n         EX    R5,ROUPACK          PACK IT\n         LA    R5,1(,R5)           ADD BACK\n         CVB   R2,WRKDWRD          CONVERT TO BIN\n         C     R2,=F'16'           IS IT > 16 ?\n         BH    ROURET32            YES, ERROR\n         BCTR  R2,0                SUB ONE FOR SHIFT\n         ICM   R6,B'1111',=X'00008000' SET \"MASK\"  ...\n         SLR   R7,R7               ...\n         SRL   R6,0(R2)            MOVE OVER ...\n         SRDL  R6,8                ...\n         SRL   R7,24               ...\n         EX    R6,ROUTM1           ALREADY SPECIFIED ?\n         BO    ROURET44            YES, ERROR\n         EX    R7,ROUTM2           ALREADY SPECIFIED ?\n         BO    ROURET44            YES, ERROR\n         EX    R6,ROUOI1           SET BIT\n         EX    R7,ROUOI2           SET BIT\n         SPACE ,\nROUNULL  DS    0H\n         BCT   R4,ROULP            LOOP\n         SPACE 1\n         B     ROURET0             ALL DONE\n         SPACE ,\nROURET0  DS    0H\n         SLR   R15,R15             SET RET CODE TO 1\n         B     ROURET\n         SPACE ,\nROURET28 DS    0H\n         LA    R15,28              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET32 DS    0H\n         LA    R15,32              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET44 DS    0H\n         LA    R15,44              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nROUPACK  PACK  WRKDWRD(8),0(*-*,R3)\nROUTM1   TM    ROUTFLGS,*-*\nROUTM2   TM    ROUTFLGS+1,*-*\nROUOI1   OI    ROUTFLGS,*-*\nROUOI2   OI    ROUTFLGS+1,*-*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK DESC                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDESCHK   DS    0H\n         SAVE  (14,12),,DESCHK     SAVE REGS\n         TM    FLAGS1,DESCFLG      DESC ALREADY SPECIFIED ?\n         BO    DESRET28            YES, ERROR\n         OI    FLAGS1,DESCFLG      SET DESC FLAG\n         SPACE 1\n         LR    R8,R0               POINT TO PARAM AREA\n         SLR   R4,R4               CLEAR R4\n         IC    R4,0(,R8)           LOAD NUMBER OF PARAMS\n         SLR   R5,R5               CLEAR R5\n         SPACE 1\nDESLP    DS    0H\n         LA    R8,1(R5,R8)         BUMP PARAM AREA POINTER\n         LA    R3,1(,R8)           POINT R3 TO PARAM\n         CLI   0(R8),X'02'         IS LEN > 2 ?\n         BH    DESRET32            YES, ERROR\n         ICM   R5,B'0001',0(R8)    LOAD LEN\n         BZ    DESNULL             BR IF ZERO\n         BCTR  R5,0                LESS ONE FOR EX\n         EX    R5,DESPACK          PACK\n         LA    R5,1(,R5)           ADD BACK\n         CVB   R2,WRKDWRD          CONVERT\n         C     R2,=F'16'           > 16 ?\n         BH    DESRET32            YES, ERROR\n         BCTR  R2,0                SUB ONE FOR MOVE\n         ICM   R6,B'1111',=X'00008000' SET MASK ...\n         SLR   R7,R7               ...\n         SRL   R6,0(R2)            SHIFT\n         SRDL  R6,8                ...\n         SRL   R7,24               ...\n         EX    R6,DESTM1           ALREADY ON ?\n         BO    DESRET44            YES, ERROR\n         EX    R7,DESTM2           ALREADY ON ?\n         BO    DESRET44            YES, ERROR\n         EX    R6,DESOI1           SET BIT\n         EX    R7,DESOI2           SET BIT\n         SPACE ,\nDESNULL  DS    0H\n         BCT   R4,DESLP            LOOP\n         SPACE 1\n         B     DESRET0             ALL DONE\n         SPACE ,\nDESRET0  DS    0H\n         SLR   R15,R15             SET RETCODE TO ZERO\n         B     DESRET\n         SPACE ,\nDESRET28 DS   0H\n         LA    R15,28              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET32 DS   0H\n         LA    R15,32              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET44 DS   0H\n         LA    R15,44              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nDESPACK  PACK  WRKDWRD(8),0(*-*,R3)\nDESTM1   TM    DESCFLGS,*-*\nDESTM2   TM    DESCFLGS+1,*-*\nDESOI1   OI    DESCFLGS,*-*\nDESOI2   OI    DESCFLGS+1,*-*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK COMMAND                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDCHK   DS    0H\n         SAVE  (14,12),,CMDCHK     SAVE REGS\n         OI    FLAGS1,CMMDFLG      SET CMD FLAG\n         LA    R2,CMD1             POINT TO CMD AREA\n         LA    R3,8                MAX CMDS\n         SLR   R1,R1               CLEAR R1\n         SPACE ,\nCMDLP    DS    0H\n         CLI   0(R2),X'00'         ANY CMDS YET ?\n         BE    CMDMVC              NO, SKIP\n         IC    R1,0(,R2)           GET LEN\n         LA    R2,1(R1,R2)         POINT TO NEXT CMD\n         BCT   R3,CMDLP            LOOP\n         B     CMDRET40            ERROR, TOO MANY\n         SPACE ,\nCMDMVC   DS    0H\n         IC    R1,CMD+1            GET CMD LEN\n         EX    R1,CMDCHMVC         MOVE CMD PLUS LEN\n         L     R2,CMDLEN           LOAD TOTAL CMD LEN\n         LA    R2,1(R1,R2)         ADD LEN OF CRNT CMD\n         ST    R2,CMDLEN           ST CMDLEN\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,CMDNM            GET NUMBER OF CMDS\n         LA    R3,1(,R3)           ADD ONE\n         STC   R3,CMDNM            STORE\n         B     CMDRET0             RETURN CODE 0\n         SPACE ,\nCMDRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     CMDRET\n         SPACE ,\nCMDRET40 DS   0H\n         LA    R15,40              SET RET CODE\n         B     CMDRET\n         SPACE ,\nCMDRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nCMDCHMVC MVC   0(*-*,R2),CMD+1\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK DELETE                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDELCHK   DS    0H\n         SAVE  (14,12),,DELCHK     SAVE REGS\n         TM    FLAGS1,DELFLG       DEL ALREADY SET\n         BO    DELRET28            YES, ERROR\n         TM    FLAGS1,B'11111111'  ANYTHING ELSE SET\n         BNZ   DELRET36            YES, ERROR\n         OI    FLAGS1,DELFLG       SET DEL FLAG\n         B     DELRET0             RETURN CODE 0\n         SPACE ,\nDELRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     DELRET\n         SPACE ,\nDELRET28 DS   0H\n         LA    R15,28              SET RET CODE\n         B     DELRET\n         SPACE ,\nDELRET36 DS   0H\n         LA    R15,36              SET RET CODE\n         B     DELRET\n         SPACE ,\nDELRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        KEYWORD TABLE                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKEYTBL   KEYT  'DELETE',(DELCHK),,,(0,0)\n         KEYT  'ID=',(IDCHK),MSGID,,,                                  X\n               LEN=(1,120)\n         KEYT  'JOBNAME=',(JOBCHK),JOBNAME,ALPHANUM,,                  X\n               LEN=(1,8)\n         KEYT  'ROUTCDE=',(ROUCHK),ROUTCDE,NUMERIC,(1,16),             X\n               LEN=(1,2)\n         KEYT  'DESC=',(DESCHK),DESC,NUMERIC,(1,16),                   X\n               LEN=(1,2)\n         KEYT  'CMD=',(CMDCHK),CMD,,,                                  X\n               LEN=(1,120),                                            X\n               END=YES\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        LITERAL POOL                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*                CONSTANTS AND EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PATCH AREA                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*                                                                     *\nOUTPUTC  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               RECFM=FBA,LRECL=133,BLKSIZE=13300\nOUTPUTL  EQU   *-OUTPUTC\nINPUTC   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD\nINPUTL   EQU   *-INPUTC\nOPENINC  OPEN  (,),MF=L\nOPENINL  EQU   *-OPENINC\nOPENOUTC OPEN  (,(OUTPUT)),MF=L\nOPENOUTL EQU   *-OPENOUTC\nCLOSINC  CLOSE (,),MF=L\nCLOSINL  EQU   *-CLOSINC\nCLOSOUTC CLOSE (,),MF=L\nCLOSOUTL EQU   *-CLOSOUTC\n         TITLE 'DSECTS USED BY IEEC3PO'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYSTEM DSECTS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         PRINT OFF\n         CVT   DSECT=YES\n         PRINT ON\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CSA TABLE DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         C3POTABL\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        COMMAND BLOCK DSECT                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMBLK    DSECT\nCMBLKFWD DS    A\nCMBLKBCK DS    A\nCMBLKNXT DS    A\nCMBLKEND DS    A\nCMBLK1ST EQU   *\nCMBLKLEN EQU   4096\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        WORK AREA DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nWKAREA   DSECT\nSAVE     DS    18F                     SAVE AREA\nSAVAREA2 DS    18F                     SAVE AREA\nCLRSTRT  EQU   *\nMSGID    DS    CL122\nROUTCDE  DS    CL122\nDESC     DS    CL122\nJOBNAME  DS    CL10\nCMD      DS    CL122\nCMDLEN   DS    F\nCMDNM    DS    XL1\nCMD1     DS    8CL122\nFLAGS1   DS    X'00'\n*        BITS ARE DEFINED IN MESSAGE ENTRY DSECT IN ENTFLAG           *\nFLAGS2   DS    X'00'\nCONT     EQU   B'10000000'\nIDFLG    EQU   B'01000000'\nWRKDWRD  DS    D'0'\nWRKWRD1  DS    F'0'\nWRKWRD2  DS    F'0'\nROUTFLGS DS    XL2'0000'\nDESCFLGS DS    XL2'0000'\nCLRLEN   EQU   *-CLRSTRT\nFLAGS3   DS    X'00'\nTSTFLG   EQU   B'10000000'\nERRPRM1  DS    F\nERRPRM2  DS    F\nERRPRM3  DS    F\nERRWORK  DS    D\nEOD      DS    X\nBLKPTRF  DS    A\nBLKPTRL  DS    A\nRETCODE  DS    F\nOUTBUF   DS    0CL133\nOUTCC    DS    CL1\nOUTMSG   DS    CL10\nOUTCMD   DS    CL122\nOPENIN   OPEN  (,),MF=L\nOPENOUT  OPEN  (,(OUTPUT)),MF=L\nCLOSIN   CLOSE (,),MF=L\nCLOSOUT  CLOSE (,),MF=L\nOUTPUT   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               RECFM=FBA,LRECL=133,BLKSIZE=13300\nINPUT    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD\nCMDCOUNT DS    PL4\nCMDBUF   DS    0H\nCOLCOUNT DS    H\nCMDTXT   DS    CL1800\nWKAREAL  EQU   *-WKAREA\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         MSGENT\n         END\n./ ADD NAME=IGC0025B 0100-88137-88153-1457-00200-00200-00000-GIBSON\n         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: IGC0025B (SVC 252)                                     *\n*                                                                     *\n* DESCRIPTION: ROUTINE TO GET PASSWORD FROM JCL                       *\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*  1) GET POINTER TO JCT                                              *\n*         IF NOT FOUND RETURN WITH CODE 4                             *\n*                                                                     *\n*  2)     SCAN TABLE FOR DSN MATCH OR BLANK DSN (FOR DEFAULT PW)      *\n*             IF NONE FOUND RETURN WITH CODE 4                        *\n*                ELSE MOVE PSW AND RETURN WITH CODE 0                 *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      IGC0025B CALLED FROM IEAVMXIT                                  *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO GET PASSWORD FROM JES2                                      *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = ADDRESS OF FIELD IN WHICH PASSWORD IS RETURNED           *\n*      R1  = ADDRESS OF DSN                                           *\n*      R6  = ENTRY POINT                                              *\n*      R7  = ADDRESS OF ASCB                                          *\n*      R13 =                                                          *\n*      R14 = RETURN ADDRESS                                           *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      IF PASSWORD FOUND                                              *\n*          PASSWORD AT ADDRESS PASSED IN R0                           *\n*          RETURN CODE 0                                              *\n*      ELSE                                                           *\n*          RETURN CODE 4                                              *\n*                                                                     *\n*  REGISTER USEAGE:                                                   *\n*       R0  - WORK REGISTER                                           *\n*       R1  - WORK REGISTER                                           *\n*       R2  - WORK                                                    *\n*       R3  - WORK                                                    *\n*       R4  - WORK                                                    *\n*       R5  - WORK                                                    *\n*       R6  - BASE REGISTER FOR PROGRAM                               *\n*       R7  - BASE REGISTER FOR ASCB DSECT                            *\n*       R8  - UNUSED                                                  *\n*       R9  - UNUSED                                                  *\n*       R10 - BASE REGISTER FOR JCT DSECT                             *\n*       R11 - UNUSED                                                  *\n*       R12 - UNUSED                                                  *\n*       R13 - UNUSED                                                  *\n*       R14 - RETURN ADDRESS                                          *\n*       R15 - RETURN CODE                                             *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         PRINT ON,GEN\n         IFGRPL\n         $HASPEQU\n         $HFAME\n         $BUFFER\n         $JCT\n         $TQE\n         $SJB\n         $XECB\n         $SCAT\n         $SVT\n         $USERCBS\n         IECDSECS CVT,TCB,JSCB,PSCB,UPT,DSAB,TIOT,UCB,ASCB,            X\n               DEB,PSA,JESCT,                                          X\n               SECCORE,(MAIN,(IOB=NO)),WTG,PREFX,EXPAND=YES\n         IEFJSCVT\n         PRINT ON,GEN\n         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'\nIGC0025B CSECT\n         USING PSA,0\n         USING ASCB,R7\n         USING IGC0025B,R6     SET ADDRESSABILITY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SAVE PARAMETERS                                              *\n*                                                                     *\n***********************************************************************\n         LR    R4,R0            SAVE PASSWORD RETURN ADDRESS\n         LR    R5,R1            SAVE DSN ADDRESS\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        GET POINTER TO JCT                                           *\n*                                                                     *\n***********************************************************************\n         L     R1,ASCBJBNI              CHECK FOR INITIATED JOB\n         LTR   R1,R1                    IS IT ?\n         BZ    RET4                     NO, THEN LEAVE RET 4\n         LH    R2,ASCBASID              GET ASID\n         SLL   R2,2                     TIMES 4\n         L     R1,FLCCVT                GET POINTER TO CVT\n         L     R1,CVTJESCT-CVT(,R1)     GET POINTER TO JESCT\n         L     R1,JESSSCT-JESCT(,R1)    GET POINTER TO SSCVT\nSSCVTLP  DS    0H\n         LR    R3,R1                    SAVE POINTER\n         CLC   SSCTSNAM-SSCT(3,R1),=CL3'JES' THIS A JES SSCT ?\n         BNE   SSCVTLP2                 NO, SKIP\n         L     R1,SSCTSSVT-SSCT(,R1)    GET POINTER TO SSVT\n         LTR   R1,R1                    IS THERE ONE ?\n         BZ    SSCVTLP2                 NO, SKIP\n         SPACE 2\n         L     R1,SVTHAVT-SSVT(,R1)     GET POINTER TO HAVT\n         LTR   R1,R1                    IS THERE ONE ?\n         BZ    SSCVTLP2                 NO, SKIP\n         SPACE 2\n         LA    R1,0(R2,R1)              POINT TO ...\n         ICM   R1,B'1111',0(R1)         ... FIRST SJB IN CHAIN\n         BZ    SSCVTLP2                 SKIP IF NONE FOUND\n         SPACE 2\nSJBLOOP  DS    0H\n         LR    R0,R1                    LOAD R0 WITH SJB ADDRESS\n         TM    SJBFLG2-SJB(R1),SJB2INIT         TEST FOR BATCH JOB\n         BE    GOTSJB                   GOT SJB BRANCH TO PROCESS\n         ICM   R1,B'1111',SJBSJB-SJB(R1)       POINT TO NEXT SJB\n         BNZ   SJBLOOP                  LOOP UNTILL END OF CHAIN\n         B     SSCVTLP2                 IF NO JOB SJB FOUND ...\n*                                       ... TRY NEXT SUB-SYSTEM\n         SPACE 2\nSSCVTLP2 DS    0H\n         ICM   R1,B'1111',SSCTSCTA-SSCT(R3)    POINT TO NEXT SSCVT\n         BZ    RET4                     RETURN CODE 4 IF NONE\n         B     SSCVTLP                  ELSE LOOP\n         EJECT ,\nGOTSJB   DS    0H\n         LR    R1,R0                    POINT TO LAST SJB\n         ICM   R10,B'1111',SJBJCT-SJB(R1) GET POINTER TO JCT\n         BZ    RET4                     RETURN CODE 4 IF NO JCT\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK PASSWORD MODE                                          *\n*                                                                     *\n***********************************************************************\n         TM    JCTUSER0-JCT(R10),JCTPW   PASSWORD SUPPLIED IN JCL ?\n         BNO   RET4                     NO, RETURN CODE 4\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        PASSWORD PROCESSING ROUTINE                                  *\n*                                                                     *\n***********************************************************************\n         USING PCT,R1\n         L     R1,JCTUSER2-JCT(,R10)     PTR TO PASSWORD CONTROL TABLE\n         LTR   R1,R1                    IS THERE ONE ?\n         BZ    RET4                     NO, RETURN CODE 4\n         LH    R0,PCTPWCNT              GET COUNT\n         LA    R1,PCTTABL               POINT TO FIRST ENTRY\n         DROP  R1\n         SPACE ,\nPWDSRCH  DS    0H\n         XC    8(44,R1),=52X'FF'        UNSCRAMBLE DSN\n         CLC   8(44,R1),0(R5)           DATA SET NAMES COMPARE ?\n         BE    PWDSRCH1                 YES, BR TO MOVE PW\n         CLC   8(44,R1),=CL44' '        ENTRY FOR DEFAULT PASSWORD ?\n         BNE   PWDSRCH2                 NO, BRANCH TO CONTINUE\n         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD\n         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD\nPWDSRCH2 DS    0H\n         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN\n         LA    R1,52(,R1)               BUMP TO NEXT ENTRY\n         BCT   R0,PWDSRCH               LOOP TO END OF TABLE\n         TM    JCTUSER0-JCT(R10),JCTPWDEF WAS THERE A DEFLT PASSWORD ?\n         BO    RET0                     YES, BRANCH RETURN CODE 0\n         B     RET4                     NO, BR RET CODE 4 PW NOT FOUND\n         SPACE ,\nPWDSRCH1 DS    0H\n         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN\n         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD\n         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD\n         B     RET0                     BRANCH TO RETURN CODE 0\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R15,0                    LOAD RETURN CODE 0\n         B     RETURN                   BR TO RETURN\nRET4     DS    0H\n         LA    R15,4                    LOAD RETURN CODE OF 4\n         B     RETURN                   BR TO RETURN\nRETURN   DS    0H\n         BR    R14                      RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n         END\n./ ADD NAME=JES2PARM 0100-88137-88153-1457-00014-00014-00000-GIBSON\nEXIT001  ROUTINE=(UEXIT1),\n         ENABLE\nEXIT003  ROUTINE=(UEXIT3),\n         ENABLE\nEXIT004  ROUTINE=(UEXIT4),\n         ENABLE\nEXIT007  ROUTINE=(UEXIT7),\n         ENABLE\nEXIT008  ROUTINE=(UEXIT8),\n         ENABLE\nLOAD     HASPXJ01\nLOAD     HASPXJ03\nLOAD     HASPXJ04\nLOAD     HASPXJ07\n./ ADD NAME=KEYSCAN  0100-88137-88153-1457-00856-00856-00000-GIBSON\n***********************************************************************\n****                                                                ***\n****                                                                ***\n****  GENERAL FUNCTION: TO VALIDATE A CHARACTER STRING CONTAINING   ***\n****                    KEYWORDS AND VALUES AND PERFORM REQUESTED   ***\n****                    OPERATIONS AS SPECIFIED IN THE KEYWORD      ***\n****                    VALIDATION TABLE DEFINED WITH ONE OR MORE   ***\n****                    KEYT MACROS.  THIS MACRO EXPANDS TO AN      ***\n****                    INDEPENDENT CSECT UPON INITIAL INVOCATION   ***\n****                    AND IS ACCESSED VIA V-TYPE ADDRESSING       ***\n****                    FOR SUBSEQUENT INVOCATIONS.  THERE ARE 2    ***\n****                    BASIC PARTS TO THIS MACRO.  THE FIRST PART  ***\n****                    SETS UP THE APPROPRIATE PARMS BASED UPON    ***\n****                    THE USER PARAMETERS SUPPLIED.  THE SECOND   ***\n****                    PART DOES THE STRING MANIPULATION, PERFORMS ***\n****                    THE REQUESTED FUNCTIONS AND SETS RETURN     ***\n****                    CODES.                                      ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  ENTRY REGS:   R0   AL4  ADDR OF CHAR STRING                   ***\n****                R1   AL4  ADDRESS OF 1ST KEYT ENTRY             ***\n****                R2                                              ***\n****                R3                                              ***\n****                R4                                              ***\n****                R5                                              ***\n****                R6                                              ***\n****                R7                                              ***\n****                R8                                              ***\n****                R9                                              ***\n****                R10                                             ***\n****                R11                                             ***\n****                R12                                             ***\n****                R13  SAVE AREA                                  ***\n****                R14  RETURN ADDRESS                             ***\n****                R15                                             ***\n****                                                                ***\n****  REGISTER USAGE:  R0   WORK                                    ***\n****                   R1   WORK                                    ***\n****                   R2   WORK                                    ***\n****                   R3   CHAR STRING LENGTH                      ***\n****                   R4   CHAR STRING ADDRESS                     ***\n****                   R5   WORK                                    ***\n****                   R6   WORK                                    ***\n****                   R7   WORK                                    ***\n****                   R8   WORK                                    ***\n****                   R9   SAVED RETURN CODE                       ***\n****                   R10  WORKAREA BASE                           ***\n****                   R11  PROGRAM BASE                            ***\n****                   R12  PROGRAM BASE                            ***\n****                   R13  OLD SAVEAREA                            ***\n****                   R14  KEYWORD TABLE BASE                      ***\n****                   R15  RETURN CODE                             ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  AUTHOR: E STEWART                DATE: 05/29/80               ***\n****                                                                ***\n****                                                                ***\n****  ATTRIBUTES: RENT,REUS,REFR                                    ***\n****                                                                ***\n****                                                                ***\n****  CALLED BY: UTILITY FUNCTION                                   ***\n****                                                                ***\n****                                                                ***\n****  MACROS USED: GETMAIN,FREEMAIN                                 ***\n****                                                                ***\n****                                                                ***\n****  ROUTINES CALLED: NONE                                         ***\n****                                                                ***\n****                                                                ***\n****  NORMAL EXIT: BR R14                                           ***\n****                                                                ***\n****  EXIT REGS:     R0   AL4  ADDR OF KEYWORD IN CHAR STRING WHERE ***\n****                           VALIDATION ERROR OCCURED             ***\n****                 R1   AL4  ADDR OF VALUE IN CHAR STRING WHERE   ***\n****                           VALIDATION ERROR OCCURED             ***\n****                 R15       00  KEYWORD(S)VALUE(S) FOUND AND     ***\n****                               OP(S) PERFORMED                  ***\n****                           04  KEYWORD(S) FOUND, SOME VALUE NOT ***\n****                               FOUND IN KEYT                    ***\n****                           08  A KEYWORD WAS NOT FOUND IN KEYT  ***\n****                           12  'VALCNT' DID NOT PASS VALIDATION ***\n****                           16  MORE INPUT EXPECTED, I.E. ONLY   ***\n****                               BLANKS, COMMENTS, OR ),BLANK WAS ***\n****                               FOUND. OTHERWISE RC=00 WOULD HAVE***\n****                               BEEN RETURNED.                   ***\n****                           20  'TYPE' DID NOT PASS VALIDATION.  ***\n****                           24  'LEN' DID NOT PASS VALIDATION.   ***\n****                                                                ***\n****                                                                ***\n****  ABEND CODES: NONE (I HOPE)                                    ***\n****                                                                ***\n****                                                                ***\n****  MESSAGES ISSUED: NONE                                         ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  DSECTS/MACROS USED: NONE FROM AN EXTERNAL SOURCE              ***\n****                                                                ***\n****                                                                ***\n****  SPECIAL NOTES:                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n***********************************************************************\nKEYSCAN  CSECT ,\n         SAVE  (14,12),,'KEYSCAN,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING KEYSCAN,R12,R11         REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         USING KVDSVR,R14          TABLE ADDRESS BASE\n         GETMAIN R,LV=KVWALNTH     GET WORKAREA\n         LR    R10,R1              PUT INTO BASE REG\n         USING KVWAVR,R10          WORKAREA BASE\n         L     R4,20(,R13)         GET STRING ADDRESS INTO REG 4\n         SR    R3,R3               CLEAR WORK REG\n         ICM   R3,B'0011',0(R4)    GET STRING LENGTH\n         LA    R4,2(,R4)           BUMP OVER STRING LENGTH\n         MVI   KVWAFL1,0           CLEAR FLAG BYTE\n         MVI   KVWAKWVA,0          CLEAR COUNT BYTE\n         MVC   KVWASAV1(4*13),20(R13) SAVE REGS 0-12\n         MVC   KVWASAV1+(4*14)(4*2),12(R13) SAVE REGS 14-15\n         ST    R13,KVWASAV1+(4*13)  SAVE REG 13 FROM CALLER\nKVR004   DS    0H\n         L     R14,24(,R13)        TABLE ADDRESS\n         LA    R6,KVWAVR\n         LA    R7,KVWACLR\n         LA    R8,KVWAVR+KVWACLR\n         SLR   R9,R9\n         MVCL  R6,R8\n         LTR   R3,R3               Q. ANY DATA TO SCAN\n         BP    KVR005              A. YES, CONTINUE AS NORMAL\n         LA    R9,16               SET BAD RC\n         B     KVR900              AND RETURN\nKVR005   DS    0H\n         SR    R2,R2               CLEAR FOR LATER\n         ST    R4,KVWALOC          SAVE STRING LOC\n         ST    R4,KVWAKEY          SAVE STRING LOC\nKVR005A  DS    0H\n         LR    R5,R3               LOAD LENGTH INTO R5\n         C     R5,KVA256           IS IT GREATER THAN 256 ?\n         BNH   KVR005B             NO, NO PROBLEM\n         L     R5,KVA256           YES, THEN SET TO 256\nKVR005B  DS    0H\n         BCTR  R5,R0               REDUCE BY ONE\n         EX    R5,KVTR1VR          SEARCH FOR NON BLANK\n         LA    R5,1(,R3)           GET ORIG LENGTH\n         CLM   R2,B'0001',KVAX00   Q. ANYTHING FOUND\n         BNE   KVR006              A. YES, SEE WHAT IT IS\n         SR    R3,R5               SUB OFF FROM TOTAL LENGTH\n         BNP   KVR005C             NOTHING LEFT\n         LA    R4,256(,R4)         BUMP UP LOCATION\n         B     KVR005A\nKVR005C  DS    0H\n         LA    R9,16               SET BLANKS RETURN CODE\n         B     KVR900              RETURN TO CALLER\nKVR006   DS    0H\n         LR    R5,R1               SAVE REG 1\n         SR    R1,R4               GET NEW\n         SR    R3,R1               DATA LENGTH\n         LR    R4,R5               GET NEW LOCATION\n         CLM   R2,B'0001',KVASLASH Q. COULD THIS BE COMMENT\n         BNE   KVR020              A. NO, CONTINUE\n         CLI   1(R4),C'*'          Q .WAS THIS A COMMENT\n         BE    KVR008              A. YES, CONTINUE\n         LA    R9,8                SAY INVALID KEYWORD\n         B     KVR900              AND RETURN\nKVR008   DS    0H                  VALIDATE COMMENT\n         LA    R4,2(,R4)           BUMP OVER /*\n         BCTR  R3,0                REDUCE COUNT\n         BCTR  R3,0                REDUCE COUNT\nKVR010   DS    0H\n         CLI   0(R4),C'*'          Q. IS IT REALLY A COMMENT\n         BE    KVR014              A. YES, CONTINUE\nKVR012   DS    0H\n         LA    R4,1(,R4)           BUMP ADDRESS\n         BCT   R3,KVR010           LOOP THROUGH\n         LA    R9,8                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR014   DS    0H\n         CLI   1(R4),C'/'          Q. IS 2ND CHAR A SLASH\n         BNE   KVR012              A. NO, CONTINUE SCAN FOR END\n         LA    R4,2(,R4)           BUMP OVER */\n         BCTR  R3,0                REDUCE COUNT\n         BCTR  R3,0                REDUCE COUNT\n         B     KVR005              AND CONTINUE SCAN\nKVR020   DS    0H                  VALIDATE CHARACTERS FOUND\n         ST    R4,KVWALOC          SAVE STRING ADDR\n         ST    R4,KVWAKEY          SAVE STRING ADDR\n         SR    R5,R5               CLEAR FOR KEYWORD COMPARE\n         SR    R6,R6               CLEAR FOR KEYWORD COMPARE\n         SR    R7,R7               CLEAR FOR KEYWORD COMPARE\nKVR022   DS    0H\n         IC    R5,KVLL0001         GET KEYWORD LEN\n         EX    R5,KVCVR            Q. KEYWORD FOUND\n         BE    KVR080              A. YES,CONTINUE\nKVR023   DS    0H\n         IC    R6,KVVN0001         GET COUNT OF VALUE ENTRIES\n         LA    R14,0(R14,R5)       BUMP OVER VARIABLE KEYWORD\n         LTR   R6,R6               Q. ANY MORE VALUES TO DO\n         BZ    KVR028              A. NO, CONTINUE AS IS\nKVR024   DS    0H\n         IC    R7,KVVL0001         LENGTH OF VALUE KEYWORD\n         LA    R14,KVVG0001(R7,R14) BUMP OVER VALUE ENTRY\n         BCT   R6,KVR024           CONTINUE THRU ALL VALUES\nKVR028   DS    0H\n         LA    R14,KVKL0001+1(R14) BUMP OVER KEYWORD ENTRY\n         CLC   KVAFFFF,KVDSVR      Q. LAST ENTRY\n         BNE   KVR022              A. NO, CONTINUE SCAN\n         LA    R9,8                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR080   DS    0H                  KEYWORD FOUND\n         LA    R6,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD\n         CLI   0(R6),C'('          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         CLI   0(R6),C' '          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         CLI   0(R6),C','          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         LR    R9,R3               CURRENT LENGTH\n         SR    R9,R5               MINUS KEYWORD EX LENGTH\n         BCTR  R9,0                MINUS ONE\n         LTR   R9,R9               Q. ANY DATA LEFT IN STRING\n         BZ    KVR082              A. NO, JUST CONTINUE NORMALLY\n         SR    R6,R6               CLEAR FOR LATER\n         B     KVR023              ELSE LOOK FOR ANOTHER KEYWORD\nKVR082   DS    0H\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R6,B'0011',KVRA0001 GET EXIT ROUTINE ADDR\n         BZ    KVR084              BRANCH IF NOT SPECIFIED\n         SRDL  R6,12               GET REG INTO R6\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF RTN BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R7,0(R7,R6)         GET ROUTINE ADDRESS\n         ST    R7,KVWARTN          SAVE RTN ADDRESS\nKVR084   DS    0H\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R6,B'0011',KVRP0001 GET EXIT ROUTINE PARM\n         BZ    KVR088              BRANCH IF NOT SPECIFIED\n         SRDL  R6,12               GET REG INTO R6\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF PARM BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R7,0(R7,R6)         GET PARM ADDRESS\n         ST    R7,KVWAPRM          SAVE PARM ADDRESS\nKVR088   DS    0H\n         LA    R4,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD\n         SR    R3,R5               REDUCE STRING COUNT\n         BCTR  R3,0                REDUCE STRING COUNT\n         CLI   0(R4),C'('          Q. VALUE(S) SPECIFIED\n         BE    KVR110              A. YES, CONTINUE\n         CLI   KVHV0001,0          Q. ANY VALUES REQUIRED\n         BNE   KVR090              A. NO, JUST RETURN\n         SR    R9,R9               SET ZERO RETURN CODE\n         B     KVR900              AND RETURN\nKVR090   DS    0H\n         MVI   KVWAKWVA,0          CLEAR COUNT\n         B     KVR172              GO PROCESS THIS KEYWORD\nKVR110   DS    0H                  MOVE ALL VALUES TO LOCAL STORAGE\n         SR    R1,R1               CLEAR FOR LATER\n         MVI   KVWAKWVA,0          CLEAR COUNT\n         BCTR  R3,0                REDUCE COUNT\n         LA    R4,1(,R4)           BUMP TO NEXT BYTE\n         CLI   0(R4),C')'          Q. NULL KEYWORDS\n         BNE   KVR120              A. NO, CONTINUE NORMALLY\n         B     KVR140              GO PROCESS NULL ENTRY\nKVR120   DS    0H\n         SR    R1,R1               CLEAR FOR LATER\n         CLI   0(R4),C''''         Q. QUOTED STRING FOR THIS VALUE\n         BNE   KVR124              A. NO, DONT SET FLAG\n         OI    KVWAQUO,KVWAQQ      SAY IN QUOTE MODE\n         LA    R4,1(,R4)           BUMP OVER QUOTE\n         BCTR  R3,0                REDUCE STRING COUNT\nKVR124   DS    0H\n         LA    R2,KVWATMP          ADDR OF TEMP WORK AREA\n         LR    R5,R4               SAVE OLD VALUES LOCATION\n         ST    R5,KVWALOC          SAVE STRING ADDR\nKVR130   DS    0H\n         CLI   0(R4),C'('          Q. OPEN  PAREN\n         BNE   KVR130A             A. NO, CONTINUE\n         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?\n         BO    KVR130A             A. YES, CONTINUE\n         OI    KVWAQUO,KVWAQP      SET PARENED QUOTE MODE\n         L     R0,KVWAPRN          LOAD PAREN COUNT\n         A     R0,=F'1'            ADD ONE TO PAREN COUNT\n         ST    R0,KVWAPRN          STORE PAREN COUNT\n         B     KVR134\nKVR130A  DS    0H\n         CLI   0(R4),C')'          Q. TERMINATING DELIMITER\n         BNE   KVR130B             A. NO, CONTINUE\n         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?\n         BO    KVR140              A. YES, CONTINUE\n         TM    KVWAQUO,KVWAQP      Q. IN PAREN QUOTE MODE\n         BNO   KVR140              A. NO, SAVE THIS KEYWORD\n         L     R0,KVWAPRN          LOAD PAREN COUNT\n         S     R0,=F'1'            SUB ONE\n         BP    KVR134              IF POSITIVE CONTINUE\n         NI    KVWAQUO,255-KVWAQP  TURN OFF PAREN QUOTE MODE\n         B     KVR134              AND CONTINUE\nKVR130B  DS    0H\n         CLI   0(R4),C','          Q. COMMA DELIMITER\n         BE    KVR140              A. YES, SAVE THIS KEYWORD\n         CLI   0(R4),C''''         Q. END OF QUOTED STRING\n         BNE   KVR134              A. NO, CONTINUE\n         LA    R4,1(,R4)           BUMP ADDRESS\n         BCTR  R3,0                REDUCE COUNT\n         LA    R1,1(,R1)           ADD 1 FOR LATER STRING MOVE\n         CLI   0(R4),C''''         Q. REALLY END OF STRING\n         BE    KVR134              A. NO, NOT YET JUST DOUBLE QUOTES\n         NI    KVWAQUO,255-KVWAQQ  RESET QUOTE MODE FLAG\n         B     KVR130              AND CONTINUE\nKVR134   DS    0H\n         MVC   0(1,R2),0(R4)       SAVE THIS BYTE\n         LA    R2,1(,R2)           BUMP WORK BYTE\n         LA    R4,1(,R4)           GO TO NEXT BYTE\n         BCT   R3,KVR130           CONTINUE SCAN\n         LA    R9,4                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR140   DS    0H                  PROCESS FOUND VALUE\n         CLI   KVWAQUO,0           Q. ARE WE IN QUOTE MODE\n         BNE   KVR134              A. YES, IGNORE OTHER DELIMITERS\n         LR    R6,R4               SAVE NEW ADDR\n         SR    R6,R5               GET VALUE LENGTH\n         SR    R6,R1               SUBTRACT ANY QUOTED STRING BYTES\n         SR    R5,R5               CLEAR WORK REG\n         ICM   R5,B'0001',KVWAKWVA GET WORK AREA COUNT\n         BNZ   KVR146              BRANCH IF ALREADY SOME IN THERE\n         LA    R8,KVWAKWVA+1       GET NEXT LOC ADDRESS\n         B     KVR148              AND CONTINUE\nKVR146   DS    0H                  LOOK FOR VALUES END LOCATION\n         LA    R8,KVWAKWVA+1       GET START ADDRESS\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R7,B'0001',KVWAKWVA+1   GET LENGTH OF LAST ONE\nKVR147   DS    0H\n         LA    R8,1(R7,R8)         GO TO NEXT SLOT\n         ICM   R7,B'0001',0(R8)    GET NEXT LENGTH\n         BCT   R5,KVR147            LOOP THRU\nKVR148   DS    0H                  MOVE NEW VALUE IN NOW\n         LTR   R6,R6               Q. NULL VALUE SPECIFIED\n         BNZ   KVR150              A. NO, CONTINUE MVC\n         STC   R6,0(,R8)           SAVE NULL VALUE LENGTH\n         B     KVR160              AND UPDATE VALUES COUNT\nKVR150   DS    0H                  MOVE NEW VALUES INTO WORKAREA\n         L     R5,KVWALOC          RESTORE STRING ADDR\n         STC   R6,0(,R8)           SAVE STRING LENGTH\n         BCTR  R6,0                REDUCE COUNT\n         EX    R6,KVM1VR           PERFORM THE MOVE\n         TM    KVVT0001,X'FF'      Q. ANY VALIDATION REQUIRED\n         BZ    KVR160              A. NO, JUST CONTINUE\n         SR    R2,R2               CLEAR WORK REG\n         ICM   R2,B'0001',KVVT0001 GET VALIDATION CODE\n         SLL   R2,2                X 4\n         B     *+0(R2)             GO TO VALIDATE IT\n         B     KVR154              ALPHA\n         B     KVR156              NUMERIC\n         B     KVR158              ALPH/NUMERIC\nKVR154   DS    0H                  ALPHA VALIDATION\n         EX    R6,KVTR2VR          A. ALPHA FIELD\n         BZ    KVR160              A. YES, CONTINUE\nKVR155   DS    0H                  ERROR RETURN\n         LA    R9,20               SET RC\n         B     KVR900              AND RETURN\nKVR156   DS    0H                  NUMERIC\n         EX    R6,KVTR3VR          Q. NUMERIC FIELD\n         BZ    KVR160              A. YES, CONTINUE\n         B     KVR155              ELSE SET BAD RC\nKVR158   DS    0H                  ALPHA/NUMERIC\n         EX    R6,KVTR4VR          Q. ALPHA/NUMERIC\n         BZ    KVR160              A. YES, CONTINUE\n         B     KVR155              ELSE ERROR RETURN\nKVR160   DS    0H\n         CLI   KVVLL001,0          Q. WAS VALUE LEN VALIDATION REQUSTED\n         BE    KVR169              A. NO, BYPASS LENGTH VALIDATION\n         LA    R6,1(,R6)           RESTORE FULL LENGTH\n         CLM   R6,B'0001',KVVLL001 Q. WAS LOW VALUE PRECEEDED\n         BL    KVR168              A. YES, ERROR CONDITION\n         CLM   R6,B'0001',KVVLH001 Q. WAS HIGH VALUE EXCEEDED\n         BH    KVR168              A. YES, ERROR CONDITION\n         B     KVR169              VALUE LENGTH PASSED VALIDATION\nKVR168   DS    0H\n         LA    R9,24               SET VALUE ERROR\n         B     KVR900              AND RETURN\nKVR169   DS    0H\n         IC    R7,KVWAKWVA         GET CURRENT COUNT\n         LA    R7,1(,R7)           ADD ONE\n         STC   R7,KVWAKWVA         AND SAVE THE COUNT\n         CLI   0(R4),C')'          Q. WAS IT ENDING DELIMETER\n         BE    KVR170              A. YES, TERMINATE SCAN\n         LA    R4,1(,R4)           BUMP OVER COMMA\n         BCTR  R3,0                REDUCE STRING LENGTH\n         B     KVR120              CONTINUE FOR MORE KEYWORDS\nKVR170   DS    0H                  PROCESS ENDING DELIMITER\n         LA    R4,1(,R4)           BUMP OVER )\n         BCTR  R3,0                REDUCE COUNT\nKVR172   DS    0H                  PROCESS ENDING DELIMITER\n         SR    R5,R5               CLEAR WORK REG\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R5,B'0001',KVHV0001 GET VALUE(S) COUNT HIGH NUMBER\n         BNZ   KVR180              GO HERE IF NOT ZERO COUNT\n         CLM   R5,B'0001',KVWAKWVA Q. WAS COUNT FOUND ALSO ZERO\n         BE    KVR180              A. YES, CONTINUE WITHOUT ERROR YET\nKVR174   DS    0H\n         LA    R9,12               SAY COUNT EXCEEDED\n         B     KVR900              AND RETURN\nKVR180   DS    0H\n         CLM   R5,B'0001',KVWAKWVA Q. HIGH COUNT EXCEEDED\n         BL    KVR174              A. YES, ERROR AND GET OUT\n         ICM   R5,B'0001',KVLV0001 GET LOW VALUE(S) COUNT\n         BZ    KVR182              GET OUT IF ZERO COUNT\n         CLM   R5,B'0001',KVWAKWVA Q. COUNT LESS THAN LOW VALUE\n         BH    KVR174              A. YES, GET OUT WITH ERROR\nKVR182   DS    0H\n         ICM   R5,B'0011',KVAA0001 Q. IS THERE AN AREA PROVIDED\n         BZ    KVR200              A. NO, JUST CONTINUE\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVAA0001 GET WORKAREA ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R2\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF AREA BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R6,0(R7,R6)         GET WORKAREA ADDRESS\n         LA    R5,KVWAKWVA         GET MY AREA ADDRESS\n         SR    R2,R2               CLEAR WORK REG\n         IC    R2,KVWAKWVA         GET COUNT\n         MVC   0(1,R6),KVWAKWVA    MOVE COUNT BYTE\n         LA    R6,1(,R6)           BUMP OVER COUNT BYTE\n         LA    R5,1(,R5)           BUMP OVER COUNT BYTE\nKVR184   DS    0H\n         MVC   0(1,R6),0(R5)       MOVE FIRST LENGTH BYTE\n         LTR   R2,R2               WAS ANYTHING IN THE AREA\n         BNZ   KVR186              YES, CONTINUE WITH MOVE\n         MVI   KVWAKWVA,1          SAY SOMETHING WAS THERE\n         B     KVR200              AND CONTINUE\nKVR186   DS    0H\n         SR    R7,R7               CLEAR FOR NEXT INSTR\n         ICM   R7,B'0001',0(R5)    GET BYTE COUNT\n         BNZ   KVR188              BRANCH FOR NON ZERO MOVE\n         LA    R6,1(,R6)           BUMP OVER NULL BYTE\n         LA    R5,1(,R5)           BUMP OVER NULL BYTE\n         B     KVR194              AND CONTINUE\nKVR188   DS    0H\n         BCTR  R7,0                REDUCE BY ONE\n         EX    R7,KVM2VR           MOVE DATA OVER\nKVR190   DS    0H\n         LA    R6,2(R7,R6)         BUMP OVER OUTPUT\n         LA    R5,2(R7,R5)         BUMP OVER INPUT\nKVR194   DS    0H\n         BCT   R2,KVR184           COUNTINUE MOVE\nKVR200   DS    0H                  SEE IF VALUES TO BE COMPARED\n         SPACE\n*        AT THIS POINT THE VALUES HAVE BEEN MOVED TO MY WORKAREA\n*        AND TO THE USER WORK AREA IF AREA HAS BEEN SPECIFIED\n*        IN THE KEYT MACRO\n         SPACE\n         SR    R2,R2               CLEAR WORK REG\n         ICM   R2,B'0001',KVVN0001 Q. WERE ANY VALUES TO BE VERIFIED\n*                                     OR WAS THERE WORK TO BE DONE\n         BNZ   KVR220              A. YES, CONTINUE AS USUAL\n         SR    R9,R9               CLEAR RC\n         B     KVR900              AND RETURN TO CALLER\nKVR220   DS    0H\n         ST    R2,KVVNCNT          SAVE COUNT\n         ST    R14,KVWAR14         SAVE KEYT ADDR\n         LA    R5,KVWAKWVA+1       ADDR OF FOUND VALUES\n         ST    R5,KVWASV           SAVE VALUES ADDR\n         MVC   KVWASVC,KVWAKWVA    SAVE VALUES COUNT\n         SR    R2,R2               CLEAR REG\n         ICM   R2,B'0001',KVWASVC  Q. ANY VALUES FOUND\n         BNZ   KVR230              A. YES, CONTINUE WITH COUNT\n         MVI   KVWASVC,1           ELSE SAY AT LEAST ONE FOUND\nKVR230   DS    0H\n         L     R2,KVVNCNT          GET COUNT\n         L     R14,KVWAR14         GET TABLE ADDR\n         L     R5,KVWASV           GET ADDR OF CURRENT VALUE TO FIND\n         SR    R1,R1               CLEAR WORK REG\n         ICM   R1,B'0001',KVWASVC  GET COUNT\n         BZ    KVR500              STOP SCAN IF NONE LEFT\n         BCTR  R1,0                REDUCE COUNT\n         STC   R1,KVWASVC          SAVE NEW COUNT\n         ICM   R1,B'0001',0(R5)    GET LENGTH OF CURRENT VALUE\n         LA    R1,1(R1,R5)         BUMP TO WHERE NEW VALUE WILL BE\n         ST    R1,KVWASV           AND SAVE ADDRESS\n         SR    R7,R7               CLEAR FOR LATER\n         IC    R7,KVLL0001         GET KEYWORD LENGTH\n         LA    R14,0(R14,R7)       BUMP OVER VARIABLE LENGTH KEYWORD\nKVR240   DS    0H                  SCAN TABLE FOR THIS VALUE\n         ST    R2,KVWAR2           SAVE CURRENT COUNT\n         ICM   R7,B'0001',KVVL0001 LENGTH OF VALUE\n         BZ    KVR300              IF NO KEYWORD VALUE HAS BEEN PUT\n*                                  IN KEYT DONT LOOK FOR A MATCH, JUST\n*                                  DO THE WORK IF ANY\n         BCTR  R7,0                REDUCE FOR EX INSTR\n         EX    R7,KVC2VR           Q. ARE VALUES EQUAL\n         BE    KVR300              A. YES, GO SEE IF ANY WORK TO DO\nKVR250   DS    0H\n         L     R2,KVWAR2           RELOAD LOOP COUNTER\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,KVVL0001         GET LENGTH OF VALUE\n         LA    R14,KVVG0001(R1,R14) GO TO NEXT ENTRY\n         BCT   R2,KVR240           AND CONTINUE SCAN\n         CLI   KVWAVF,X'FF'        Q. WERE VALUE(S) MATCHED IN KEYT\n         BE    KVR260              A. YES, CONTINUE WITH NO ERRORS\n         LA    R9,4                VALUE NOT FOUND RC\n         B     KVR900              AND RETURN\nKVR260   DS    0H\n         MVI   KVWAVF,0            RESET VALUES FOUND FLAG\n         B     KVR230              AND CONTINUE WITH OTHER VALUES\nKVR300   DS    0H                  VALUE FOUND SEE IF ANY WORK TO DO\n         MVI   KVWAVF,X'FF'        SAY VALUES FOUND\n         TM    KVOP0001,X'FF'      Q. ANY OP CODES SPECIFIED\n         BNZ   KVR320              A. YES, SEE IF SOME WORK TO DO\n         B     KVR250              ELSE CONTINUE VALUES SCAN\nKVR320   DS    0H                  DECODE OP CODES AND DO THEM\n         LA    R6,KVVV0001         GET ADDR OF VALUES ENTRY\n         LA    R1,KVWAFLN          ADDR OF SAVE TABLE\n         ICM   R7,B'1111',KVWACN1  GET CURRENT COUNT OF VALUES ALREADY\n*                                  PROCESSED\n         BZ    KVR326              ADD THIS ONE IF NONE YET\nKVR322   DS    0H\n         C     R6,0(,R1)           Q. ALREADY PROCESSED THIS ENTRY\n         BE    KVR250              A. YES BYPASS FURTHER PROCESSING\n         LA    R1,4(,R1)           BUMP TABLE ADDRESS\n         BCT   R7,KVR322           CONTINUE SCAN\nKVR326   DS    0H\n         ST    R6,0(,R1)           SAVE ADDRESS OF THIS ENTRY FOR LATER\n*                                  COMPARE OF OTHER VALUES\n         L     R7,KVWACN1          GET OLD COUNT\n         LA    R7,1(,R7)           ADD 1 TO IT\n         ST    R7,KVWACN1          AND SAVE IT\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVTO0001 GET TO ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R2\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF TO BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R2,0(R7,R6)         GET TO ADDREESS\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVFR0001 GET FROM ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R6\n         SLL   R6,2                X 4\n         LTR   R6,R6               Q. WAS THIS SELF DEFINING TERM\n         BZ    KVR330              A. YES, DONT LOAD NONEXISTENT BASE\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF FROM BASE REG\nKVR330   DS    0H\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R8,0(R7,R6)         GET FROM ADDRESS\n         SR    R1,R1               CLEAR WORK REG\n         ICM   R1,B'0011',KVOL0001 GET LENGTH OF FIELD\n         BCTR  R1,0                GET EX LENGTH\n         SR    R7,R7               CLEAR WORK REG\n         IC    R7,KVOP0001         GET OP CODE\n         SLL   R7,2                MULTIPLY BY 4\n         B     *+0(R7)             BRANCH TO OP CODE ROUTINE\n         B     KVR360              N OP CODE SPECIFIED\n         B     KVR380              O OP CODE SPECIFIED\n         B     KVR400              M OP CODE SPECIFIED\n         B     KVR420              X OP CODE SPECIFIED\nKVR360   DS    0H                  N OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR366              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPNI           ISSUE THE AND OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR366   DS    0H                  N OP CODE\n         EX    R1,KVOPN            ISSUE THE AND OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR380   DS    0H                  O OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR386              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPOI           ISSUE THE OR OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR386   DS    0H                  N OP CODE\n         EX    R1,KVOPO            ISSUE THE OR OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR400   DS    0H                  M OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR406              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPMI           ISSUE THE MVC OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR406   DS    0H                  N OP CODE\n         EX    R1,KVOPM            ISSUE THE MVC OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR420   DS    0H                  N OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR426              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPXI           ISSUE THE XI OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR426   DS    0H                  N OP CODE\n         EX    R1,KVOPX            ISSUE THE XC OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR500   DS    0H                  ALL VALUES SCANNED\n         SR    R9,R9               CLEAR RC\n         B     KVR900              AND RETURN\nKVR900   DS    0H                  RETURN POINT\n         LTR   R9,R9               Q . RC=00\n         BNZ   KVR930              A. NO, CONTINUE RETURN TO CALLER\n         ICM   R1,B'1111',KVWARTN  Q. RTN TO CALL\n         BZ    KVR910              A. NO, CONTINUE NO CALL\n         MVC   KVWASKIP(KVRRLEN),KVRSKIP SET UP REG RELOAD ROUTINE\n         LR    R15,R1              GET RTN ADDR\n         LA    R0,KVWAKWVA         GET STRING ADDR\n         ST    R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR\n         LA    R13,KVWASAV         MY SAVE AREA\n         L     R1,KVWAPRM          GET PARM DATA ADDR\n         STM   R0,R15,KVWASAV9     SAVE REGS\n         LA    R14,KVWASKIP        LOAD RETURN ADDRESS\n         LM    R2,R12,KVWASAV1+(4*2) LOAD CALLING REGS\n         BR    R15                 CALL USERS ROUTINE\nKVR900A  DS    0H\n         L     R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR\n         LTR   R9,R15              WAS RETURN CODE ZERO?\n         BNZ   KVR930              NO, RETURN TO CALLER\nKVR910   DS    0H\n         MVI   KVWAFL1,1           SAY AT LEAST 1 GOOD FIND\n         B     KVR004              GO DO MORE NOW\nKVR930   DS    0H\n         L     R4,KVWALOC          SAVE STRING LOCATION\n         L     R5,KVWAKEY          SAVE KEYWORD LOCATION\n         CLI   KVWAFL1,0           Q. ANY GOOD FINDS\n         BE    KVR950              A. NO, LEAVE RC AS IS\n         C     R9,KVASIX           Q. WAS RC=16\n         BNE   KVR950              A. NO, LEAVE RC AS IS\n         SR    R9,R9               SET ZERO RC\nKVR950   DS    0H\n         LR    R1,R10              GET WORKAREA ADDRESS\n         LA    R0,KVWALNTH         GET WORKAREA LENGTH\n         FREEMAIN R,LV=(0),A=(1)   FREE WORKAREA\n         LR    R15,R9              SETUP RETURN CODE\n         LM    R6,R12,11*4(R13)    RESTORE REGS\n         LR    R0,R5               PUT IN KEYWORD LOCATION\n         LR    R1,R4               PUT IN STRING LOCATION\n         LM    R2,R5,7*4(R13)      RESTORE OTHER REGS\n         L     R14,3*4(R13)        RESTORE RETURN REG\n         BR    R14                 RETURN TO CALLER\n         EJECT ,\nKVRSKIP  DS    0F\n         B     KVRRELD-*(,R14)\nKVRSAV9  DC    16F'0'\nKVRRELD  LM    R0,R14,4(R14)\nKVRRET   B     KVR900A\nKVRRLEN  EQU   *-KVRSKIP\n         EJECT ,\nKVOPN    NC    0(*-*,R2),0(R8)\nKVOPNI   NI    0(R2),*-*\nKVOPO    OC    0(*-*,R2),0(R8)\nKVOPOI   OI    0(R2),*-*\nKVOPM    MVC   0(*-*,R2),0(R8)\nKVOPMI   MVI   0(R2),*-*\nKVOPX    XC    0(*-*,R2),0(R8)\nKVOPXI   XI    0(R2),*-*\nKVCVR    CLC   KVKV0001(*-*),0(R4)\nKVTR1VR  TRT   0(*-*,R4),KTVRT1    NON-BLANK TEST\nKVTR2VR  TRT   1(*-*,R8),KTVRT2    ALPHA TEST\nKVTR3VR  TRT   1(*-*,R8),KTVRT3    NUMERIC TEST\nKVTR4VR  TRT   1(*-*,R8),KTVRT4    ALPHA/NUMERIC NATIONAL TEST\nKVC2VR   CLC   KVVV0001(*-*),1(R5)\nKVM1VR   MVC   1(*-*,R8),KVWATMP\nKVM2VR   MVC   1(*-*,R6),1(R5)\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT1   DC    X'00000000000000000000000000000000' - 00\n         DC    X'00000000000000000000000000000000' - 10\n         DC    X'00000000000000000000000000000000' - 20\n         DC    X'00000000000000000000000000000000' - 30\n         DC    X'000000000000000000004A4B4C4D4E4F' - 40\n         DC    X'500000000000000000005A5B5C5D5E5F' - 50\n         DC    X'6061000000000000000000006C6D6E6F' - 60\n         DC    X'0000000000000000007D7A7B7C407E7F' - 70\n         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - 80\n         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - 90\n         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - A0\n         DC    X'00000000000000000000000000000000' - B0\n         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - C0\n         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - D0\n         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - E0\n         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT2   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 1\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 2\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 3\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 4\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 5\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 6\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 7\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 8\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 9\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - C\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - D\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT3   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 40\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 50\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 70\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - C0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - D0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - E0\n         DC    X'00000000000000000000FFFFFFFFFFFF' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT4   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF' - 40\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 50\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 70\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - C0\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - D0\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E0\n         DC    X'00000000000000000000FFFFFFFFFFFF' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CONSTANTS USED BY KEYWORD PARSE ROUTINE                      *\n*---------------------------------------------------------------------*\nKVAFFFF  DC    X'FFFF'\nKVASIX   DC    F'16'\nKVA256   DC    F'256'\nKVAX00   DC    X'00'\nKVASLASH DC    C'/'\n         EJECT ,\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*                CONSTANTS AND EQUATES                                *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKVWAVR   DSECT ,                   START OF PARSE WORK AREA\nKVWASAV  DS    18F                 SAVE AREA TO CALL RTN\nKVWAVF   DS    X                   VALUES FOUND FLAG\nKVWAQUO  DS    X                   QUOTED STRING MODE FLAG\nKVWAQQ   EQU   B'10000000'         QUOTED QUOTED STRING\nKVWAQP   EQU   B'01000000'         PARENED QUOTED STRING\nKVWAPRN  DS    F                   COUNT OF PAREN NESTING\nKVWASV   DS    F                   ADDR OF VALUES FOUND\nKVWARTN  DS    F                   ADDRESS OF RTN TO CALL\nKVWAPRM  DS    F                   ADDRESS OF RTN PARM\nKVWALOC  DS    F                   LOCATION OF INPUT STRING\nKVWAR14  DS    F                   SAVE AREA FOR REG 14\nKVWAR2   DS    F                   SAVE AREA FOR REG 2\nKVVNCNT  DS    F                   VALUE COUNT SAVEAREA\nKVWAKEY  DS    F                   ADDRESS OF CURRENT KEYWORD IN STRING\nKVWACN1  DS    F                   COUNT OF VALUE ADDRS IN KVWAFLN\nKVWASVC  DS    X                   COUNT OF VALUES FOUND\nKVWAKWVA DS    512X                WORKAREA FOR VALUE MOVE\nKVWATMP  DS    256X                WORKAREA FOR TEMP VALUE MOVE\nKVWACLR  EQU   *-KVWAVR            LENGTH OF WORKAREA TO CLEAR\nKVWAFL1  DS    X                   FLAG TO SHOW SOME GOOD WORDS FOUND\nKVWASAV1 DS    16F                 SAVE AREA FOR CALLERS REGS\nKVWASKIP DS    F                   REGISTER RELOAD ROUTINE\nKVWASAV9 DS    16F                 REGISTER RELOAD SAVE AREA\nKVWARELD DS    F                   REGISTER RELOAD\nKVWARET  DS    F                   REGISTER RELOAD RETURN\nKVWAFLN  DS    15XL4               SAVEAREA FOR MAX COUNT OF FIELDN'S\nKVWALNTH EQU   *-KVWAVR\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKVDSVR   DSECT\nKVLL0001 DS    AL1                 LENGTH OF KEY-1\nKVRA0001 DS    SL2                 RTN ADDRESS\nKVRP0001 DS    SL2                 RTN PARM\nKVAA0001 DS    SL2                 AREA ADDRESS\nKVVLL001 DS    AL1                 VALUE LENGTH LOW\nKVVLH001 DS    AL1                 VALUE LENGTH HIGH\nKVLV0001 DS    AL1                 VALUE COUNT LOW\nKVHV0001 DS    AL1                 VALUE COUNT HIGH\nKVVT0001 DS    XL1                 VALUE TYPE\nKVTA0001 EQU   X'01'               ALPHA TYPE\nKVTN0001 EQU   X'02'               NUMERIC TYPE\nKVTB0001 EQU   X'03'               ALPHA OR NUMERIC TYPE\nKVVN0001 DS    AL1                 COUNT OF VALUE ENTRIES\nKVKL0001 EQU   *-KVLL0001          LENGTH OF TABLE ENTRY MINUS KEYWORD\nKVKV0001 DS    C                   KEYWORD\nKVVL0001 DS    AL1                 VALUE LENGTH\nKVOP0001 DS    XL1                 OP CODE\nKVVA0001 EQU   X'01'               N  OP CODE\nKVVO0001 EQU   X'02'               O  OP CODE\nKVVM0001 EQU   X'03'               M  OP CODE\nKVVX0001 EQU   X'04'               X  OP CODE\nKVTO0001 DS    SL2                 TO ADDRESS\nKVFR0001 DS    SL2                 FROM ADDRESS\nKVOL0001 DS    AL2                 LENGTH OF TO FIELD\nKVVG0001 EQU   *-KVVL0001          ENTRY LENGTH MINUS VALUE CONSTANT\nKVVV0001 DS    C                   VALUE CONSTANT\nKVLA0001 EQU   *,2                 LAST ENTRY =X'FFFF'\n         END\n./ ADD NAME=KEYT     0100-88137-88153-1457-00326-00326-00000-GIBSON\n         MACRO\n&NAME    KEYT  &KEYWORD,&RTN,&AREA,&TYPE,&VALCNT,&FIELD1=,&FIELD2=,    X\n               &FIELD3=,&FIELD4=,&FIELD5=,&FIELD6=,&FIELD7=,           X\n               &FIELD8=,&FIELD9=,&FIELD10=,&FIELD11=,&FIELD12=,        X\n               &FIELD13,&FIELD14=,&FIELD15=,&END=,                     X\n               &LEN=\n         LCLA  &KVVN,&CNTR1,&KVLL,&CNTR2\n         LCLC  &P1,&P2,&P3,&P4,&LEN1,&LEN2,&KEYWORK\n         AIF   ('&SYSLIST(1)' NE '').KVRM020 ONLY REQUIRED KEYWORD\n         MNOTE 8,'1ST PARM MISSING AND IS REQUIRED'\n         MEXIT\n.KVRM020 ANOP\n&KEYWORK SETC  '&KEYWORD'\n         AIF   ('&KEYWORK'(1,1) NE '''' OR                             X\n               '&KEYWORK'(K'&KEYWORD,1) NE '''').KW1\n&KEYWORK SETC  '&KEYWORK'(2,K'&KEYWORK-2)\n.KW1     ANOP\n&KVLL    SETA  K'&KEYWORK-1        SET KEYWORD LENGTH-1\n&NAME    DC    AL1(&KVLL)          KEY LENGTH-1\n         AIF   ('&SYSLIST(2)' NE '').KVRM030 IS EXIT RTN SPECIFIED\n         DC    SL2(0)              EXIT RTN NOT SPECIFIED\n         DC    SL2(0)              EXIT PARM NOT SPECIFIED\n         AGO   .KVRM049\n.KVRM030 ANOP\n         DC    SL2(&SYSLIST(2,1))  EXIT ROUTINE ADDR\n         AIF   (N'&SYSLIST(2) NE 1).KVRM046\n         DC    SL2(0)              NO RTN PARM INFO REQUESTED\n         AGO   .KVRM049\n.KVRM046 ANOP\n         DC    SL2(&SYSLIST(2,2))  EXIT RTN PARM SPECIFIED\n.KVRM049 ANOP\n         AIF   ('&SYSLIST(3)' NE '').KVRM050\n         DC    SL2(0)              NO AREA SPECIFIED\n         AGO   .KVRM060\n.KVRM050 ANOP\n         DC    SL2(&AREA)          AREA ADDR SPECIFIED\n.KVRM060 ANOP\n         AIF   ('&LEN' NE '').KVRM070\n         DC    AL1(0)              VALUE LENGTH LOW DEFAULT\n         DC    AL1(0)              VALUE LENGTH HIGH DEFAULT\n         AGO   .KVRM078\n.KVRM070 ANOP\n&LEN1    SETC  '&LEN(1)'\n&LEN2    SETC  '&LEN(2)'\n         AIF   ('&LEN1' NE '').KVRM074\n         DC    AL1(1)              VALUE LENGTH LOW IMPLIED\n         AGO   .KVRM077\n.KVRM074 ANOP\n         DC    AL1(&LEN1)          VALUE LENGTH LOW SPECIFIED\n.KVRM076 ANOP\n         AIF   ('&LEN2' NE '').KVRM077\n         DC    AL1(&LEN1)          VALUE LENGTH HIGH SPECIFIED\n         AGO   .KVRM078\n.KVRM077 ANOP\n         DC    AL1(&LEN2)          VALUE LENGTH HIGH SPECIFIED\n.KVRM078 ANOP\n         AIF   (N'&SYSLIST(5) NE 0).KVRM090 VALUE COUNT SPECIFIED\n         DC    AL1(1)              VALUE COUNT LOW DEFAULT\n         DC    AL1(1)              VALUE COUNT HIGH DEFAULT\n         AGO   .KVRM110\n.KVRM090 ANOP\n         AIF   (N'&SYSLIST(5) NE 1).KVRM094\n         AIF   ('&SYSLIST(5,1)' EQ '(').KVRM094\n         DC    AL1(0)              VALUE COUNT LOW IMPLIED\n         DC    AL1(&VALCNT)        VALUE COUNT HIGH SPECIFIED\n         AGO   .KVRM110\n.KVRM094 ANOP\n         AIF   ('&SYSLIST(5,1)' EQ ')').KVRM096\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT LOW\n         DC    AL1(&SYSLIST(5,2))  VALUE COUNT HIGH\n         AGO   .KVRM110\n.KVRM096 ANOP\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT HIGH\n.KVRM110 ANOP\n         AIF   ('&SYSLIST(4)' NE '').KVRM120\n         DC    X'00'               NO VALUE VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM120 ANOP\n         AIF   ('&SYSLIST(4)' NE 'ALPHA').KVRM130\n         DC    X'01'               ALPHA VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM130 ANOP\n         AIF   ('&SYSLIST(4)' NE 'NUMERIC').KVRM140\n         DC    X'02'               NUMERIC VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM140 ANOP\n         AIF   ('&SYSLIST(4)' NE 'ALPHANUM').KVRM150\n         DC    X'03'               ALPHANUM VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM150 ANOP\n         MNOTE 8,'INVALID VALIDATION TYPE SPECIFIED  &TYPE'\n.KVRM160 ANOP\n         AIF   ('&FIELD1' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD2' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD3' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD4' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD5' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD6' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD7' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD8' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD9' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD10' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD11' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD12' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD13' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD14' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD15' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n.KVRM166 ANOP\n         DC    AL1(&KVVN)          COUNT OF FIELDS SPECIFIED\n         DC    C'&KEYWORK'         REQUESTED KEYWORD\n         AGO   .KVRM300\n.KVRM180 ANOP\n         AIF   ('&END' NE 'YES').KVRM190\n         DC    X'FFFF'             END OF TABLE INDICATIOR\n.KVRM190 ANOP\n         MEXIT\n.KVRM300 ANOP\n         AIF   ('&FIELD1' EQ '').KVRM180\n&CNTR1   SETA  1\n&P1      SETC  '&FIELD1(1)'\n&P2      SETC  '&FIELD1(2)'\n&P3      SETC  '&FIELD1(3)'\n&P4      SETC  '&FIELD1(4)'\n         AGO   .KVRM500\n.KVRM320 ANOP\n         AIF   ('&FIELD2' EQ '').KVRM180\n&CNTR1   SETA  2\n&P1      SETC  '&FIELD2(1)'\n&P2      SETC  '&FIELD2(2)'\n&P3      SETC  '&FIELD2(3)'\n&P4      SETC  '&FIELD2(4)'\n         AGO   .KVRM500\n.KVRM330 ANOP\n         AIF   ('&FIELD3' EQ '').KVRM180\n&CNTR1   SETA  3\n&P1      SETC  '&FIELD3(1)'\n&P2      SETC  '&FIELD3(2)'\n&P3      SETC  '&FIELD3(3)'\n&P4      SETC  '&FIELD3(4)'\n         AGO   .KVRM500\n.KVRM340 ANOP\n         AIF   ('&FIELD4' EQ '').KVRM180\n&CNTR1   SETA  4\n&P1      SETC  '&FIELD4(1)'\n&P2      SETC  '&FIELD4(2)'\n&P3      SETC  '&FIELD4(3)'\n&P4      SETC  '&FIELD4(4)'\n         AGO   .KVRM500\n.KVRM350 ANOP\n         AIF   ('&FIELD5' EQ '').KVRM180\n&CNTR1   SETA  5\n&P1      SETC  '&FIELD5(1)'\n&P2      SETC  '&FIELD5(2)'\n&P3      SETC  '&FIELD5(3)'\n&P4      SETC  '&FIELD5(4)'\n         AGO   .KVRM500\n.KVRM360 ANOP\n         AIF   ('&FIELD6' EQ '').KVRM180\n&CNTR1   SETA  6\n&P1      SETC  '&FIELD6(1)'\n&P2      SETC  '&FIELD6(2)'\n&P3      SETC  '&FIELD6(3)'\n&P4      SETC  '&FIELD6(4)'\n         AGO   .KVRM500\n.KVRM370 ANOP\n         AIF   ('&FIELD7' EQ '').KVRM180\n&CNTR1   SETA  7\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM380 ANOP\n         AIF   ('&FIELD8' EQ '').KVRM180\n&CNTR1   SETA  8\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM390 ANOP\n         AIF   ('&FIELD9' EQ '').KVRM180\n&CNTR1   SETA  9\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3A0 ANOP\n         AIF   ('&FIELD10' EQ '').KVRM180\n&CNTR1   SETA  10\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3B0 ANOP\n         AIF   ('&FIELD11' EQ '').KVRM180\n&CNTR1   SETA  11\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3C0 ANOP\n         AIF   ('&FIELD12' EQ '').KVRM180\n&CNTR1   SETA  12\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3D0 ANOP\n         AIF   ('&FIELD13' EQ '').KVRM180\n&CNTR1   SETA  13\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3E0 ANOP\n         AIF   ('&FIELD14' EQ '').KVRM180\n&CNTR1   SETA  14\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3F0 ANOP\n         AIF   ('&FIELD15' EQ '').KVRM180\n&CNTR1   SETA  15\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM500 ANOP\n         AIF   ('&P1' NE '').KVRM720\n         DC    X'00'               NO VALUE IS SPECIFIED\n         AGO   .KVRM730\n.KVRM720 ANOP\n&CNTR2   SETA  K'&P1\n         DC    AL1(&CNTR2)         LENGTH OF VALUE SPECIFIED\n.KVRM730 ANOP\n         AIF   ('&P2' EQ '').KVRM900\n         AIF   ('&P2' NE 'N').KVRM750\n         DC    X'01'               N  OP CODE\n         AGO   .KVRM800\n.KVRM750 ANOP\n         AIF   ('&P2' NE 'O').KVRM760\n         DC    X'02'               O  OP CODE\n         AGO   .KVRM800\n.KVRM760 ANOP\n         AIF   ('&P2' NE 'M').KVRM770\n         DC    X'03'               M  OP CODE\n         AGO   .KVRM800\n.KVRM770 ANOP\n         AIF   ('&P2' NE 'X').KVRM780\n         DC    X'04'               X OP CODE\n         AGO   .KVRM800\n.KVRM780 ANOP\n         MNOTE 8,'INVALID OP SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM800 ANOP\n         AIF   ('&P3' NE '').KVRM820\n         MNOTE 8,'TO ADDR REQ AND NOT SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM820 ANOP\n         DC    SL2(&P3)            TO ADDRESS\n         AIF   ('&P4' NE '').KVRM830\n         MNOTE 8,'FROM ADDR REQ AND NOT SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM830 ANOP\n         DC    SL2(&P4)            FROM ADDRESS\n         DC    AL2(L'&P3)          LENGTH OF TO ADDRESS\n.KVRM834 ANOP\n         AIF   ('&P1' NE '').KVRM840\n         AGO   .KVRM950\n.KVRM840 ANOP\n         DC    C'&P1'              VALUE CONSTANT\n         AGO   .KVRM950\n.KVRM900 ANOP\n         AIF   ('&P3' EQ '').KVRM920\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'\n         MEXIT\n.KVRM920 ANOP\n         AIF   ('&P4' EQ '').KVRM930\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'\n         MEXIT\n.KVRM930 ANOP\n         DC    X'00'               NO OP CODE\n         DC    SL2(0)              NO TO ADDR\n         DC    SL2(0)              NO FROM ADDR\n         DC    SL2(0)              NO TO LENGTH\n.KVRM950 ANOP\n         AIF   (&CNTR1 EQ 1).KVRM320\n         AIF   (&CNTR1 EQ 2).KVRM330\n         AIF   (&CNTR1 EQ 3).KVRM340\n         AIF   (&CNTR1 EQ 4).KVRM350\n         AIF   (&CNTR1 EQ 5).KVRM360\n         AIF   (&CNTR1 EQ 6).KVRM370\n         AIF   (&CNTR1 EQ 7).KVRM380\n         AIF   (&CNTR1 EQ 8).KVRM390\n         AIF   (&CNTR1 EQ 9).KVRM3A0\n         AIF   (&CNTR1 EQ 10).KVRM3B0\n         AIF   (&CNTR1 EQ 11).KVRM3C0\n         AIF   (&CNTR1 EQ 12).KVRM3D0\n         AIF   (&CNTR1 EQ 13).KVRM3E0\n         AIF   (&CNTR1 EQ 14).KVRM3F0\n         AIF   (&CNTR1 EQ 15).KVRM180\n         MEND\n./ ADD NAME=MSGENT   0100-88137-88153-1457-00030-00030-00000-GIBSON\n         MACRO\n         MSGENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMSGENT   DSECT\nENTLEN   DS    H                       LENGTH OF THIS ENTRY\nENTDESC  DS    XL2                     DSEC CODE\nENTROUT  DS    XL2                     ROUTE CODE\nENTFLAG  DS    XL1                     FLAGS\nDESCFLG  EQU   B'10000000'             DESC CODE SPECIFIED\nROUTFLG  EQU   B'01000000'             ROUTE CODE SPECIFIED\nCMMDFLG  EQU   B'00100000'             COMMAND SPECIFED\n*        EQU   B'00010000'             UNUSED\nJBNMFLG  EQU   B'00001000'             JOBNAME SPECIFIED\nDELFLG   EQU   B'00000100'             DELETE SPECIFIED\nLISTFLG  EQU   B'00000010'             LIST SPECIFIED\n*        EQU   B'00000001'             UNUSED\nENTFLG2  DS    XL1                     FLAGS UNUSED\nENTJBNM  DS    CL8                     JOBNAME IF SPECIFIED\nENTHDRLN EQU   *-MSGENT                LENGTH OF FIXED HDR\nENTLID   DS    XL1                     MESSAGE LENGTH\nENTID    DS    CL127                   MESSAGE\n         DS    XL1                     NUMBER OF COMMANDS\n         DS    XL1                     COMMAND LENGTH\n         DS    CL127                   COMMAND\n         MEND\n./ ADD NAME=WTOR     0100-88137-88153-1457-00130-00130-00000-GIBSON\n//WTOR     JOB  TS,GIBSON,MSGCLASS=X,COND=(4,LT),REGION=4096K,\n//         CLASS=Y\n//ASMBL    EXEC ASMFCL,PARM.ASM='OBJ,NODECK',\n//         PARM.LKED='XREF,NCAL,LIST'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT2   DD SPACE=(CYL,(50,10))\n//SYSUT3   DD SPACE=(CYL,(50,10))\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n***********************************************************************\n*   THIS PROGRAM WAS WRITTEN TO TEST IEAVMXIT. IT WILL TAKE WHATEVER  *\n*   MESSAGE IS SPECIFIED AS A PARM AND PUT IT OUT AS A WTO IF         *\n*   PARM='WTO=MSG' IS SPECIFIED OR AS A WTOR IF                       *\n*   PARM='WTOR=MSG' IS SPECIFIED.                                     *\n*                                                                     *\n*  FOLLOWING IS JCL USED TO INVOKE:                                   *\n*  //SYSTEST  JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y                       *\n*  //TEST1    EXEC PGM=WTOR,PARM='WTOR=SYSTEM TESTING'                *\n*  //STEPLIB  DD   DSN=GIBSON.LOADLIB,DISP=SHR                        *\n***********************************************************************\n         TITLE 'WTOR'\nWTOR     CSECT                     BEGINING OF PROGRAM\n         USING *,R12               SET UP BASE REG\n         SAVE  (14,12),,WTOR..&SYSDATE       SAVE REGESTERS\n         LR    R12,R15             SET UP ADDRESSABILITY\n         LR    R2,R13              SAVE ADDR OF PREVIOUS SAVEAREA\n         LA    R13,SAVEAREA        POINT TO CURRENT SAVEAREA\n         ST    R13,8(R2)           LINK PREVIOUS SAVEAREA TO SAVEAREA\n         ST    R2,4(R13)           LINK SAVEAREA TO PREVIOUS SAVEAREA\n         L     R1,0(,R1)           LOAD ADDR OF PARM INTO R1\n         CLC   0(2,R1),=H'0'       PARM LENGTH = 0?\n         BE    INVPARM             YES, ISSUE INVALID PARM WTO\nDOPARM   DS    0H\n         CLC   0(2,R1),=H'5'       COMPARE LENGTH OF TO MAX LENGTH\n         BL    INVPARM             INVALID PARM LENGTH\n         CLC   =C'WTO=',2(R1)      WTO PARAM\n         BE    DOWTO               YES, BRANCH TO PROCESS\n         CLC   =C'WTOR=',2(R1)     WTOR PARAM\n         BE    DOWTOR              YES, BRANCH TO PROCESS\n         BNE   INVPARM             NO, INVALID PARAMTER\n*\nDOWTO    DS    0H\n         LH    R2,0(,R1)\n         SH    R2,=H'4'\n         BNP   INVPARM\n         CH    R2,=H'120'\n         BH    INVPARM\n         BCTR  R2,0\n         LA    R3,6(,R1)\n         EX    R2,MVCWTO\n*MVCWTO  MVC   WTOL+4(*-*),0(R3)\n         WTO   MF=(E,WTOL)\n         B     RETURN\nMVCWTOR  MVC   WTORL+12(*-*),0(R3)\nMVCWTO   MVC   WTOL+4(*-*),0(R3)\n****\nDOWTOR   DS    0H\n         LH    R2,0(,R1)\n         SH    R2,=H'5'\n         BNP   INVPARM\n         CH    R2,=H'120'\n         BH    INVPARM\n         BCTR  R2,0\n         LA    R3,7(,R1)\n         EX    R2,MVCWTOR\n*MVCWTOR MVC   WTORL+12(*-*),0(R3)\n*MVCENT  MVC   ENTID(*-*),0(R3)\n         MVI   WTORECB,0           CLEAR OUT ECB FOR REPLY\n         WTOR  MF=(E,WTORL)\n         WAIT  1,ECB=WTORECB       WAIT FOR OPERATOR TO REPLY\n         B     RETURN\n****\n*\nINVPARM  DS    0H\n         WTO   'PARAMETER MISSING OR INVALLID, EXECUTION ENDS',        X\n               ROUTCDE=(14),DESC=(7)\n         B     RETURN\nRETURN   DS    0H\n         L     R13,SAVEAREA+4      RESTORE R13\n         SLR   R15,R15\n         RETURN (14,12),T,RC=(15)  RETURN TO MVS\n         EJECT ,\n*---------------------------------------------------------------------*\n*        WORK AREA AND CONSTANTS                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nSAVEAREA DS    18F                 SAVEAREA\nWTORECB  DC    F'0'                ECB FOR WTOR\nWTORRPLY DS    CL80                REPLY FOR WTOR\nWTORL    WTOR  '                                                       X\n                                                                       X\n                   ',WTORRPLY,80,WTORECB,ROUTCDE=(14),DESC=(7),MF=L\nWTOL     WTO   '                                                       X\n                                                                       X\n                   ',ROUTCDE=(14),DESC=(7),MF=L\n         EJECT ,\n*---------------------------------------------------------------------*\n* REGISTER EQUATES                                                    *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       ADDRESS OF SUPPLIED PARAMETERS\nR2       EQU   2                       ADDRESS OF EXIT PARAMETERS\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       WORK REGISTER\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REGISTER\nR8       EQU   8                       WORK REGISTER\nR9       EQU   9                       POINTER TO TABLE ENTRY\nR10      EQU   10                      BASE REGISTER FOR WORK AREA\nR11      EQU   11                      2ND BASE REGISTER\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n         EJECT ,\n*---------------------------------------------------------------------*\n* LIERTAL POOL                                                        *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         END                     , END OF PROGRAM\n//LKED.SYSLMOD DD DSN=GIBSON.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n ENTRY WTOR\n NAME  WTOR(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$USERCBS": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\"\\x00\"\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "GIBSON"}, "text": "         MACRO -- $USERCBS -- USER CONTROL BLOCKS\n         $USERCBS\n***********************************************************************\n*                                                                     *\n*        EQUATES USED IN EXITS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        THE FOLLOWING FLIELDS ARE USED IN THE JCT DSECT              *\n*        JCTUSER0 - THE FIRST BYTE IS USED FOR FLAGS (SEE BELOW)      *\n*        JCTUSER1 - \"PCT\" TRACK ADDRESS                               *\n*        JCTUSER2 - IN STORAGE BUFFER ADDRESS OF THE \"PCT\"            *\n*        THE FOLLOWING FLAGS ARE DEFINED FOR JCTUSER0                 *\n***********************************************************************\nJCTPW    EQU   B'10000000'     PASSWORD FLAG\nJCTPWDEF EQU   B'01000000'     DEFAULT PASSWORD SUPPLIED\n         EJECT ,\n         TITLE 'HASP PASSWORD CONTROL TABLE (PCT) DSECT'\n         SPACE 5\nPCT      DSECT                     HASP PASSWORD CONTROL TABLE DSECT\n         DS    (BUFSTART-BFPDSECT)X     BUFFER CONTROL INFORMATION\nPCTSTART EQU   *                   START OF DATA WRITTEN TO SPOOL\nPCTID    DS    CL4'PCT'            PCT IDENTIFIER\nPCTLENG  DS    AL2(*-*)            LENGTH OF PCT INCLUDING PREFIX\nPCTPWCNT DS    H\nPCTJBKEY DS    XL4                 JOB IDENTIFIER KEY\nPCTTRACK DS    XL4                 TRACK ADDRESS OF THIS PCT\nPCTPCTTR DS    XL4                 TRACK ADDRESS OF NEXT PCT\nPCTPCT   DS    A                   STORAGE ADDRESS OF NEXT PCT\nPCTENTOF DS    F                   OFFSET BEYOND LAST ENT IN OCT\n         DS    XL4                 RESERVED FOR FUTURE USE\nPCTTABL  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@SMC3PO": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00$\\x00$\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "GIBSON"}, "text": "//IEEC3PO  JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IEEC3PO  EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEEC3PO),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEEC3PO),DISP=SHR\n//*\n//KEYSCAN  EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(KEYSCAN),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(KEYSCAN),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(IEEC3PO)\n INCLUDE JESOBJ(KEYSCAN)\n SETCODE AC(1)\n NAME IEEC3PO(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SMEXIT4": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x16\\x00\\x16\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "GIBSON"}, "text": "//@SMEXIT4 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//JESEXIT4 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ04),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ04),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(HASPXJ04)\n NAME HASPXJ04(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SMEXIT7": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x17\\x00\\x17\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "GIBSON"}, "text": "//@SMEXIT7 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//JESEXIT7 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ07),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ07),DISP=SHR\n//*\n//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(HASPXJ07)\n NAME HASPXJ07(R)\n/*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SMEXIT8": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x16\\x00\\x16\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "GIBSON"}, "text": "//@SMEXIT8 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//JESEXIT8 EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXS08),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXS08),DISP=SHR\n//*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(HASPXS08)\n NAME HASPXS08(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SMVMXIT": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x17\\x00\\x17\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "GIBSON"}, "text": "//IEAVMXIT JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IEAVMXIT EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEAVMXIT),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEAVMXIT),DISP=SHR\n/*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT'\n//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE JESOBJ(IEAVMXIT)\n SETCODE AC(1)\n NAME IEAVMXIT(R)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SM0025B": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x15\\x00\\x15\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "GIBSON"}, "text": "//@SM0025B JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K\n//IGC0025B EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IGC0025B),DISP=SHR\n//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IGC0025B),DISP=SHR\n//*\n//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'\n//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   *\n INCLUDE LLBOBJ(IGC0025B)\n NAME IGC0025B(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@ZAPRDPS": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00-\\x00-\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "GIBSON"}, "text": "//@ZAPRDPS JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y\n//*\n//* DESCRIPTION:\n//*              PASSWORD MOD\n//*              CHANGE READPSWD SO MSG IEC301A (ASK OPER FOR PASSWORD)\n//*              INCLUDES DSNAME\n//*\n//STEP2    EXEC PGM=AMASPZAP\n//SYSPRINT DD   SYSOUT=*\n//SYSLIB   DD   DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN    DD   *\n    NAME READPSWD READPSWD\n    VER 004A 9502D088         .         CLI   MYCODE,K2\n    VER 004E 478030CA         .         BE    OSQ41500\n    VER 0052 9503D088         .         CLI   MYCODE,K3\n    VER 0056 478030CA         .         BE    OSQ41500\n    VER 005A 5810D2B4         .         L     R1,MYTCB\n    VER 005E 5810100C         .         L     R1,TCBIO-TCB(,R1)\n    VER 0062 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)\n    VER 0068 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K\n    VER 006E D207D0C81008     .         MVC   MYMSTEPN,\n*                             .                TIOCSTEP-TIOT(R1)\n    VER 0074 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K\n    VER 00CC D206D0B632B5     .         MVC   MYMDSN(MYMDSNN-MYMDSN),\n*                             .                OSQ4855K\n    VER 00D2 D22BD0BDD104     .         MVC   MYMDSNN(L'MYDSN),MYDSN\n    VER 00D8 4110D0E8         .         LA    R1,MYMDSNN+L'MYDSN-1\n    VER 02A6 6BC4C4D5C1D4C540 .OSQ4840K DC    C',DDNAME '\n*****                         .\n    REP 004A 5810D2B4         .         L     R1,MYTCB\n    REP 004E 5810100C         .         L     R1,TCBIO-TCB(,R1)\n    REP 0052 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)\n    REP 0058 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K\n    REP 005E D207D0C81008     .         MVC   MYMSTEPN,\n*                             .                TIOCSTEP-TIOT(R1)\n    REP 0064 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K\n    REP 006A 9502D088         .         CLI   MYCODE,K2\n    REP 006E 47F030CA         .         B     OSQ41500\n    REP 0072 9503D088         .         CLI   MYCODE,K3\n    REP 0076 478030CA         .         BE    OSQ41500\n    REP 00CC 47000000         .         NOP   0\n    REP 00D0 0700             .         NOPR  0\n    REP 00D2 D22BD0D8D104     .         MVC   MYMDDNMN(L'MYDSN),MYDSN\n    REP 00D8 4110D103         .         LA    R1,MYMDDNMN+L'MYDSN-1\n    REP 02A6 6BC4E2D5C1D4C540 .OSQ4840K DC    CL8',DSNAME '\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "C3POTBL": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x12\\x00\\x12\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "GIBSON"}, "text": "         MACRO\n         C3POTABL\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CSA TABLE DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nC3POTABL DSECT\nC3POID   DS    CL8\nC3PONXT  DS    A\nC3PO1ST  DS    A\nC3POEND  DS    A\nC3POLEN  DS    A\nC3PORSV  DS    A\nC3POHDRL EQU   *-C3POTABL\nC3POENT  EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HASPXJ04": {"ttr": 2577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x013\\x013\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 307, "newlines": 307, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: HASPXJ04                                               *\n*                                                                     *\n* DESCRIPTION: SCAN JES2 CONTROL STAEMENTS FOR /*PASSWORD CARDS AND   *\n*              IF FOUND PROCESS THEM                                  *\n*                                                                     *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      HASPXJ04                                                       *\n*         CALLED FROM HASPRDR                                         *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO PROCESS /*PASSWORD JES2 CONTROL STAEMENTS                   *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = CODE INDICATING WHETHER A JES2 CONTROL STATEMENT OR JCL  *\n*            IS BEING PROCESSED.                                      *\n*                0 INDICATES JES2 CONTROL STATEMENT                   *\n*                4 INDICATES JCL STATEMENT                            *\n*      R1  = POINTER TO A 3 WORD PARAMETER LIST WITH FORMAT           *\n*            WORD 1 - ADDRESS OF THE CONTROL STATEMENT/JCL IMAGE BUFF *\n*            WORD 2 - ADDRESS OF THE EXIT FLAG BYTE, RDWFLAGX, IN PCE *\n*            WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT         *\n*      R10 = ADDRESS OF THE JCT                                       *\n*      R11 = ADDRESS OF THE HCT                                       *\n*      R13 = ADDRESS OF TE PCE                                        *\n*      R14 = RETURN ADDRESS                                           *\n*      R15 = ENTRY ADDRESS                                            *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      R0-R14 SAME AS ENTRY                                           *\n*      R15   RETURN CODE                                              *\n*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *\n*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*\n*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*\n*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*\n*            ATED WITH THIS EXIT, PERFORM STANDARD HASPRDR PROCESSING.*\n*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *\n*            THIS EXIT AND TO PERFORM STANDARD HASPRDR PROCESSING.    *\n*        8 - FOR JES2 CONTROL STATEMENTS, TELLS JES2 NOT TO PERFORM   *\n*            STANDARD HASPRCCS PROCESSING: INSTEAD, IMMEDIATELY       *\n*            CONVERT THE STATEMENT TO A COMMENT (//*) WITH THE NULL-ON*\n*            -INPUT FLAG SET TO ONE AND WRITE THE STATEMENT TO THE JCL*\n*            IMAGES DATA SET. FOR JCL STATEMENTS, TELLS JES2 TO       *\n*            PERFORM STANDARD HASPRDR PROCESSING.                     *\n*       12 - TELLS JES2 TO CANCEL THE JOB BECAUSE AN ILLEGAL CONTROL  *\n*            STATEMENT HAS BEEN DETECTED;                             *\n*            OUTPUT (THE INCOMPLETE JCL IMAGE) IS PRODUCED.           *\n*       16 - TELLS JES2 TO PURGE THE JOB BECAUSE AN ILLEGAL CONTROL   *\n*            STATEMENT HAS BEEN DETECTED; NO OUTPUT IS PRODUCED.      *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         PRINT ON,NOGEN\n         COPY  $HASPGBL\n         EJECT ,\nHASPXJ04 $MODULE NOTICE=NONE,                                          C\n               TITLE='JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN', C\n               RPL,                GENERATE MVS  RPL    DSECT          C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $JCT,                                                   C\n               $JQE,                                                   C\n               $PCE,                                                   C\n               $CAT,                                                   C\n               $HCT,                                                   C\n               $MIT,                                                   C\n               $MITETBL,                                               C\n               $MODMAP,                                                C\n               $RDRWORK,                                               C\n               $USERCBS,                                               C\n               $XECB,              GENERATE HASP XECB DSECT            C\n               $XIT                GENERATE HASP XIT DSECT\n         PRINT ON,GEN,NODATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR /*PASSWORD CONTROL CARD                            *\n*                                                                     *\n***********************************************************************\nUEXIT4  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT\n        $SAVE\n         USING JCT,R10\n         LR    R12,R15         LOAD BASE REGISTER\n         LTR   R0,R0           IS IT FOR JES2 CONTROL CARD ?\n         BNZ   RET0            NO, RETURN CODE 0\n         LM    R2,R4,0(R1)     LOAD POINTERS TO PARAMS\n         LTR   R4,R4           IS THERE A JCT ?\n         BZ    RET0            NO, RETURN CODE 0\n         CLC   0(10,R2),=CL10'/*PASSWORD'  IS IT A PSW CONTROL CARD ?\n         BNE   RET0            NO, RETURN CODE 0\n         MVC   JCTXWRK,=CL52' ' INITIAL TEMP PCT ENTRY TO BLANKS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK FORMAT                                                 *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG1      POINT TO ERROR MSG 1\n         CLI   10(R2),C' '     IS COL 11 A BLANK ?\n         BNE   RET12           NO, RETURN CODE 12 WITH MSG1\n         CLI   11(R2),C' '     IS COL 12 A BLANK ?\n         BE    RET12           YES, RETURN CODE 12 WITH MSG1\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        MOVE DSN TO WORK AREA AND BLANK OUT IN CONTROL CARD          *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG2      POINT TO ERROR MSG 2\n         LA    R5,11(,R2)      LOAD FOR START OF SCAN FOR BLANK\n         LA    R6,1            LOAD INCREMENT FOR BXLE\n         LA    R7,19(,R2)      LOAD FOR END OF SCAN\n         LA    R8,JCTXWRK      LOAD ADDRESS TO MOVE PW\nSCNLP1   CLI   0(R5),C' '      FOUND A BLANK ?\n         BE    SCNLP1E         YES, EXIT LOOP\n         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF PW\n         MVI   0(R5),C' '      BLANK OUT PASSWORD IN CARD\n         LA    R8,1(,R8)       BUMP POINTER\n         BXLE  R5,R6,SCNLP1    LOOP\n         B     RET12           RETURN CODE 12 WITH MSG 2\nSCNLP1E  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FIND FIRST NON-BLANK AFTER PASSWORD                          *\n*                                                                     *\n***********************************************************************\n         LA    R7,68(,R2)      LOAD FOR END OF SCAN\nSCNLP2   CLI   0(R5),C' '      FOUND NON-BLANK ?\n         BNE   SCNLP2E         YES, EXIT LOOP\n         BXLE  R5,R6,SCNLP2    NO, LOOP\n         B     SETDEF          BRANCH TO SET DEFAULT PASSWORD\nSCNLP2E  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR DSN= KEYWORD                                       *\n*                                                                     *\n***********************************************************************\n         CLC   0(4,R5),=CL4'DSN=' FOUND DSN= KW ?\n         BNE   SETDEF          NO, BRANCH TO SET DEFAULT PASSWORD\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK FOR DSN AFTER DSN= KEYWORD                             *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG6      POINT TO ERROR MSG 6\n         LA    R7,71(,R2)      POINT TO COL 72\n         LA    R5,4(,R5)       POINT PAST KEYWORD\n         CR    R5,R7           AT END OF CARD ?\n         BNL   RET12           YES, RETURN CODE 12 WITH MSG 6\n         CLI   0(R5),C' '      IS THERE A DSN ?\n         BE    RET12           NO, RETURN CODE 12 WITH MSG 6\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        MOVE DSN TO WORK AREA                                        *\n*                                                                     *\n***********************************************************************\n         LA    R1,ERRMSG3      POINT TO ERROR MSG 3\n         LA    R7,71(,R2)      LOAD FOR END OF SCAN\n         LA    R8,JCTXWRK+7    LOAD ADDRESS TO MOVE DSN - 1\n         LA    R9,JCTXWRK+52   LOAD END OF TABLE ENTRY\nSCNLP4   CLI   0(R5),C' '      FOUND A BLANK ?\n         BE    SCNLP4E         YES, EXIT LOOP\n         LA    R8,1(,R8)       BUMP POINTER\n         CR    R8,R9           MOVED 44 CHARS ALREADY ?\n         BE    RET12           YES, RETURN CODE 12 WITH MSG 3\n         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF DSN\n         BXLE  R5,R6,SCNLP4    LOOP\nSCNLP4E  DS    0H\n         B     SETENT1         BRANCH TO SET ENTRY IN PCT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SET DEFAULT PASSWORD SUPPLIED FLAG                           *\n*                                                                     *\n***********************************************************************\nSETDEF   DS    0H\n         OI    JCTUSER0,JCTPWDEF  SET PW DEFAULT FLAG\n         B     SETENT1         BRANCH TO SET ENTRY IN PCT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        INTIALIZE PCT                                                *\n*                                                                     *\n***********************************************************************\nSETENT1  DS    0H\n         TM    JCTUSER0,JCTPW  ALREADY BEEN HERE ONCE ?\n         BO    SETENT2         YES, SKIP GETBUF\n         OI    JCTUSER0,JCTPW  SET PW FLAG\n        $GETBUF WAIT=YES       GET BUFFER\n         LR    R2,R1           SAVE ADDRESS IN R2\n         USING PCT,R2          ADDRESS PCT\n         XC    PCTSTART(PCTTABL-PCTSTART),PCTSTART CLEAR PCT HEADER\n         MVC   PCTID,=CL4'PCT' SET PCT ID\n         LH    R0,$BUFLENG     SET BLOCK ...\n         STH   R0,PCTLENG      ... LENGTH\n         MVC   PCTJBKEY,JCTJBKEY   SET JOB KEY\n         LA    R9,PCTTABL-PCT       SET INITIAL ...\n         ST    R9,PCTENTOF         ... OFFSET\n         ST    R2,JCTUSER2     SAVE BUFFER ADDRESS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SCAN TABLE FOR DUPLICATE DSN                                 *\n*                                                                     *\n***********************************************************************\nSETENT2  DS    0H\n         L     R2,JCTUSER2     LOAD ADDRESS OF PCT\n         XC    JCTXWRK,=52X'FF' SCRAMBLE\n         LA    R5,PCTTABL      GET POINTER TO START OF TABLE\n         L     R7,PCTENTOF     GET OFFSET TO NEXT AVAILABLE ENTRY\n         LA    R7,PCT(R7)      POINT TO LAST ENTRY\n         CR    R7,R5           DOES TABLE HAVE ANY ENTRIES ?\n         BNH   SETENT3         NO, THEN SKIP SEARCH\n         LA    R6,52           GET TABLE ENTRY LENGTH\n         SR    R7,R6           POINT TO LAST ENTRY\n         SR    R5,R6           BACK UP ONE ENTRY LENGTH FOR BXH\nSETENT2A DS    0H\n         BXH   R5,R6,SETENT3\n         CLC   8(44,R5),JCTXWRK+8 DATA SET NAMES COMPARE ?\n         BNE   SETENT2A        NO, LOOP\n         MVC   0(52,R5),JCTXWRK   MOVE IN TABLE ENTRY\n         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK FOR AVAILABLE SPACE IN PCT AND MOVE IN ENTRY           *\n*                                                                     *\n***********************************************************************\nSETENT3  DS    0H\n         LH    R9,PCTPWCNT     GET COUNT\n         LA    R9,1(,R9)        BUMP COUNT BY ONE\n         STH   R9,PCTPWCNT      AND STORE BACK\n         SPACE 1\n         LA    R1,ERRMSG7       POINT TO ERROR MSG 7\n         L     R5,PCTENTOF      GET CURRENT OFFSET\n         LA    R0,52(,R5)       ADD 52 FOR OFFSET FOR NEXT ENTRY\n         CH    R0,PCTLENG       OVER MAXIMUM LENGTH ?\n         BH    RET12            YES, RETURN CODE 12 WITH MESSAGE\n         ST    R0,PCTENTOF      SET NEW OFFSET\n         SPACE 1\n*        MOVE IN PCT ENTRY\n         SPACE 1\nSETENT3A DS    0H\n         LA    R5,PCT(R5)       POINT TO  ENTRY\n         MVC   0(52,R5),JCTXWRK MOVE IN TABLE ENTRY\n         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS\n         DROP  R2\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R15,0           LOAD RETURN CODE 0\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRET8     DS    0H\n         LA    R15,8           LOAD RETURN CODE OF 8\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRET12    DS    0H\n         MVC   JCTXWRK(80),0(R1) MOVE IN ERROR MESSAG\n         OI    RDWFLAGX,RDWXXSEM FLAG ERROR MESSAGE SUPPLIED\n         L     R1,JCTUSER2     GET ADDRESS OF BUFFER\n         LTR   R1,R1           IS THERE ONE ?\n         BZ    RET12A          NO, SKIP FREEBUF\n         XC    JCTUSER2,JCTUSER2 CLEAR PCT ADDRESS\n        $FREEBUF (R1)          FREE BUFFER\nRET12A   DS    0H\n         LA    R15,12          LOAD RETURN CODE OF 12\n         B     RETURN          BR TO RETURN\n         SPACE 2\nRETURN   DS    0H\n        $RETURN RC=(R15)       RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        ERROR MESSAGES                                               *\n*                                                                     *\n***********************************************************************\nERRMSG1  DC    CL80'INVALID PASSWORD CONTROL CARD, INVALID FORMAT'\nERRMSG2  DC    CL80'INVALID PASSWORD CONTROL CARD, PASSWORD IS LONGER TX\n               HAN 8 CHARACTERS'\nERRMSG3  DC    CL80'INVALID PASSWORD CONTROL CARD, DATA SET NAME IS LONX\n               GER THAN 44 CHARACTERS'\nERRMSG4  DC    CL80'INVALID PASSWORD CONTROL CARD, MULTIPLE DEFAULT PASX\n               SWORDS SUPPLIED'\nERRMSG6  DC    CL80'INVALID PASSWORD CONTROL CARD, NO DATA SET NAME FOLX\n               LOWING DSN KEYWORD'\nERRMSG7  DC    CL80'NUMBER OF PASSWORD CONTROL CARDS EXCEEDS MAXIMUM'\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HASPXJ07": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x01\\r\\x01\\r\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 269, "newlines": 269, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'JES EXIT 7 -- MAIN TASK CONTROL BLOCK I/O EXIT'\n***********************************************************************\n**                                                                    *\n* MODULE NAME:  HASPXJ07                                              *\n*                                                                     *\n* DESCRIPTIVE NAME:  WRITE PCT (LLB PASSWORD CONTROL TABLE)           *\n*                                                                     *\n* FUNCTION:  UPDATE CONTROL BLOCKS IN JES2 MAIN TASK                  *\n*                                                                     *\n* ENTRY POINTS:                                                       *\n*         THIS EXIT IS TAKEN FROM THE JES2 MAIN TASK IN HASPNUC       *\n*         JUST AFTER THE CONTROL BLOCK IS READ FROM OR JUST BEFORE    *\n*         THE CONTROL BLOCK IS WRITTEN TO SPOOL.                      *\n*                                                                     *\n* INPUT:                                                              *\n*         R0  = A POINTER TO A PARAMETER LIST WITH THE FOLLOWING      *\n*               STRUCTURE, MAPPED BY $XPL:                            *\n*               FIELD NAME OFFSET DESCRIPTION                         *\n*               XPLID      (+0)   EYE CATCHER ('XPL')                 *\n*               XPLLEVEL   (+4)   MAINTENANCE LEVEL                   *\n*               XPLXITID   (+5)   EXIT NUMBER                         *\n*               XPLEXLEV   (+6)   VERSION NUMBER                      *\n*               XPLIND     (+7)   INDICATOR BYTE                      *\n*               XPLCOND    (+8)   CONDITION BYTE. JES2 SETS THE       *\n*                                 CONDITION BYTE WITH ONE OF THE      *\n*                                 FOLLOWING BIT SETTINGS              *\n*                                 X007CBWR    CB IS TO BE WRITTEN     *\n*                                 X007CBUN    CB READ IS UNKNOWN      *\n*                                 X007IOER    CB READ IS NOT VALID    *\n*               XPLRESP     (+9)  RESPONSE BYTE                       *\n*               XPLSIZE     (+10) LENGTH OF PARAMETER LIST            *\n*               X007CBID          THE 4 CHARACTER EBCDIC CB ID        *\n*         R1  = ADDRESS OF THE BUFFFER THAT CONTAINS THE JCT          *\n*         R11 = ADDRESS OF THE HCT                                    *\n*         R13 = ADDRESS OF THE PCE                                    *\n*         R14 = RETURN ADDRESS                                        *\n*         R15 = ENTRY ADDRESS                                         *\n* OUTPUT:                                                             *\n*         R0  = A POINTER TO A PARAMETER LIST, MAPPED BY $XPL         *\n*               FIELD NAME DESCRIPTION                                *\n*               XPLCOND    CONDITION BYTE.                            *\n*               XPLRESP    RESPONSE BYTE. TURN THE X007IOER BIT       *\n*                          SETTING ON IN THE RESPONSE BYTE IF AN I/O  *\n*                          ERROR OCCURRED.                            *\n*         R15 = RETURN CODE                                           *\n*                                                                     *\n*         RETURN CODES HAVE THE FOLLOWING MEANINGS:                   *\n*         0 - TELLS JES2 THAT IF ANY ADDITIONAL EXIT ROUTINES ARE     *\n*             ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE    *\n*             EXIT ROUTINE. IF THERE IS NO OTHER EXIT ROUTINES        *\n*             ASSOCIATED WITH THIS EXIT, CONTINUE WITH NORMAL         *\n*             PROCESSING, WHICH IS DETERMINED BY THE PARTICULAR EXIT  *\n*             POINT FROM WHICH THE EXIT WAS CALLED.                   *\n*         4 - TELLS JES2 THAT EVEN IF ADDITIONAL EXIT ROUTINES ARE    *\n*             ASSOCIATED WITH THIS EXIT, IGNORE THEM; CONTINUE WITH   *\n*             NORMAL PROCESSING, WHICH IS DETERMINED BY THE           *\n*             PARTICULAR EXIT POINT FROM WHICH THIS EXIT WAS CALLED.  *\n*         8 - TELLS JES2 THAT AN I/O ERROR WAS ENCOUNTERED. MESSAGE   *\n*             $HASP370 IS ISSUED. IF THERE IS ANY OTHER EXIT ROUTINES *\n*             ASSOCIATED WITH THIS EXIT, IGNORE THEM; CONTINUE WITH   *\n*             NORMAL PROCESSING, WHICH IS DETERMINED BY THE           *\n*             PARTICULAR EXIT POINT FROM WHICH THIS EXIT WAS CALLED.  *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL\n         EJECT ,\nHASPXJ07 $MODULE NOTICE=NONE,                                          C\n               TITLE='JESEXIT7 - MAIN TASK CONTROL BLOCK I/O EXIT',    C\n               RPL,                GENERATE MVS  RPL    DSECT          C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $CAT,                                                   C\n               $ERA,                                                   C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $HCT,                                                   C\n               $IOT,                                                   C\n               $JCT,                                                   C\n               $JQE,                                                   C\n               $MIT,                                                   C\n               $MITETBL,                                               C\n               $MODMAP,                                                C\n               $PCE,                                                   C\n               $PRE,                                                   C\n               $RDRWORK,                                               C\n               $TAB,                                                   C\n               $USERCBS,                                               C\n               $XECB,              GENERATE HASP XECB DSECT            C\n               $XIT,               GENERATE HASP XIT DSECT             C\n               $XPL\n***********************************************************************\n*                                                                     *\n*        ENTRY AND INITIAL CHECKING                                   *\n*                                                                     *\n***********************************************************************\nUEXIT7  $ENTRY CSECT=YES,BASE=R12\n        $SAVE  TRACE=YES,NAME=HASPXJ07 SAVE CALLERS REGISTERS\n         USING PCE,R13             ESTABLISH ADDRESSABILITY\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              LOAD JCT ADDRESS\n         USING JCT,R10             ESTABLISH JCT ADDRESSABILITY\n         LR    R2,R0               LOAD XPL ADDRESS\n         USING XPL,R2              ESTABLISH XPL ADDRESSABILITY\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ESTAE ENVIRONMENT                                  *\n*                                                                     *\n***********************************************************************\n         L     R14,=A(X7RECOVR)    R14 => UEXIT7 RECOVERY EP\n        $ESTAE RECADDR=R14         CREATE ESTAE ENVIRONMENT\n         LR    R1,R14              SET REGISTER 1\n***********************************************************************\n*                                                                     *\n*        MOVE PORTION OF THE COMMAND CURRENTLY BEING PROCESSED        *\n*        INTO THE PRE (PRETRACK) FOR THE PROCESSOR RECOVERY           *\n*        ROUTINE (X7RECOVR).                                          *\n*                                                                     *\n***********************************************************************\n         L     R14,PCEPRE          GET ADDRESS OF PRE\n         USING PRE,R14             ESTABLISH ADDRESSABILITY\n         MVC   PRETRACK(L'X7MSG),X7MSG  MOVE MESSAGE INTO PRE\n         MVI   PRELOGLN,L'X7MSG    SET LENGTH OF DATA IN PRETRACK\n         DROP  R14                 KILL ADDRESSABILITY\n***********************************************************************\n*                                                                     *\n*        IF WE HAVE THE JCT, CHECK IF THIS IS A WRITE OPERATION.      *\n*                                                                     *\n***********************************************************************\n         SLR   R7,R7               INITIALIZE GOOD RETURN CODE\n         CLC   X007CBID,=CL4'JCT ' IS THIS A JCT?\n         BE    CHKTYPE             YES, CHECK OPERATION\n         B     EXITRET             NO, RETURN\nCHKTYPE  DS    0H\n         TM    XPLCOND,X007CBWR    IS THIS A WRITE OPERATION ?\n         BZ    EXITRET             NO, RETURN\n***********************************************************************\n*                                                                     *\n*        CHECK TO SEE IF THE PCT WAS WRITTEN ALREADY.                 *\n*                                                                     *\n***********************************************************************\n         TM    JCTUSER0,JCTPW      PASSWORD SUPPLIED IN JCL ?\n         BNO   EXITRET             NO, RETURN\n         CLC   JCTUSER1,$ZEROS     ALREADY GOT TRACK SPACE ?\n         BNE   EXITRET             YES, RETURN\n         CLC   JCTUSER2,$ZEROS     IS THERE A PCT ?\n         BE    EXITRET             NO, RETURN\n         MVC   PCEUSER0,JCTUSER2   SAVE PCT ADDRESS\n***********************************************************************\n*        SEE IF WE HAVE AN IOT (FOR $TRACK)                           *\n***********************************************************************\n         ICM   R8,B'1111',RDWIOT   GET IOT ADDRESSABILITY\n         BZ    NOTANIOT            NO ADDRESS IN R8 SO RETURN\n         USING IOT,R8              ESTABLISH IOT ADDRESSABILITY\n         CLC   IOTID,=CL4'IOT'     IS THIS AN IOT ?\n         BNE   NOTANIOT            NO, RETURN\n         DROP  R8\n***********************************************************************\n*        OBTAIN TRACK GROUP TO WRITE OUT THE PCT                      *\n***********************************************************************\n        $TRACK IOTMSTAB-IOT(,R8),JQE=PCEJQE,WRPRIM=NO,ERRET=FAIL$TRK\nDO$CBIO  DS    0H\n         ST    R1,JCTUSER1         SAVE MTTR IN JCT USER FIELD\n         L     R6,PCEUSER0         GET JCT BUFFER ADDRESS\n        $CBIO TYPE=WRITE,BUFAD=(R6),MTTR=JCTUSER1,VERIFY=NONE,         C\n               EXIT=NO,ERRET=WRITFAIL\n         SLR   R7,R7               SET RETURN CODE\n         B     FREEBUF             FREE BUFFER AND RETURN\n         EJECT\n***********************************************************************\n*    ERROR MESSAGES FOR $TRACK, AND ALSO WHY WE HAD TO SKIP $TRACK    *\n***********************************************************************\nNOTANIOT DS    0H\n        $MID   902\n        $WTO   X7MSG01,L'X7MSG01,ROUTE=$ALL,CLASS=$TRIVIA\n         LA    R7,4                BAD RETURN CODE\n         B     FREEBUF             FREE BUFFER AND RETURN\nFAIL$TRK DS    0H\n         C     R15,=F'8'           RETURN CODE OF 8 FROM $TRACK\n         BL    DO$CBIO             NO, GO DO IO\n        $MID   903\n        $WTO   X7MSG02,L'X7MSG02,ROUTE=$ALL,CLASS=$TRIVIA\n         LA    R7,4                BAD RETURN CODE\n         B     FREEBUF             FREE BUFFER AND RETURN\nWRITFAIL DS    0H\n        $MID   904\n        $WTO   X7MSG03,L'X7MSG03,ROUTE=$ALL,CLASS=$TRIVIA\n         LA    R7,4                BAD RETURN CODE\n         B     FREEBUF             FREE BUFFER AND RETURN\nRCZERO   DS    0H\n         SLR   R7,R7\nFREEBUF  DS    0H\n         L     R6,PCEUSER0\n         XC    PCEUSER0,PCEUSER0   CLEAR USER FIELD\n         USING PCT,R6              ESTABLISH PCT ADDRESSABILITY\n         CLC   PCTID,=CL4'PCT'     IS THIS A PCT ?\n         BNE   EXITRET               NO, DO NOT FREE THE BUFFER\n         DROP  R6\n        $FREEBUF (R6)              FREE PCT BUFFER\n         XC    JCTUSER2,JCTUSER2   CLEAR USER FIELD\n         B     EXITRET             BRANCH TO RETURN\n         TITLE 'PCTIO RECOVERY ROUTINE - X7RECOVR'\n***********************************************************************\n*                                                                     *\n*        HASX07A - EXIT 7 RECOVERY ROUTINE                            *\n*                                                                     *\n*        REGISTERS UPON ENTRY -                                       *\n*                                                                     *\n*            R0 - SAME AS ABEND                                       *\n*            R1 - POINTER TO ERA                                      *\n*      R2 - R10 - SAME AS ABEND                                       *\n*           R11 - POINTER TO HCT                                      *\n*           R13 - POINTER TO PCE                                      *\n*           R14 - RETURN ADDRESS                                      *\n*           R15 - ENTRY ADDRESS                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING ERA,R5              ESTABLISH ERA ADDRESSABILTY\n         SPACE 1\nX7RECOVR LR    R5,R1               GET ADDRESS OF ERA IN R5\n         SPACE 1\n         MVC   ERAREG12,=A(HASPXJ07) GET VALID BASE REGISTER\n         ICM   R1,B'1111',PCEUSER0 GET STORAGE ADDRESS\n         XC    PCEUSER0,PCEUSER0   CLEAR PCEUSER0\n         USING PCT,R1              ESTABLISH PCT ADDRESSABILITY\n         CLC   PCTID,=CL4'PCT'     IS THIS A PCT ?\n         BNE   X7RECRET              NO, DO NOT FREE THE BUFFER\n         DROP  R1\n         SPACE 1\n        $FREEBUF (R1)                YES, FREE THE BUFFER\n         XC    JCTUSER2,JCTUSER2   CLEAR USER FIELD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $SETRP - SET UP OPTION AND RETURN TO CALLER                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX7RECRET DS    0H\n        $SETRP PERCOLATE           SET PERCOLATE OPTION\n         SPACE 1\n        $RETURN TRACE=YES          RETURN TO CALLER\n         TITLE 'PCTIO SUBTASK ROUTINE -- RETURN TO THE CALLER'\n***********************************************************************\n*                                                                     *\n*        RETURN TO THE CALLER                                         *\n*                                                                     *\n***********************************************************************\n         SPACE  1\nEXITRET  DS     0H\n        $ESTAE CANCEL              CANCEL ESTAE ENVIRONMENT\n         SPACE  1\n        $RETURN RC=(R7),TRACE=YES  RETURN TO CALLER\n         SPACE  3\n         TITLE 'JES2 USER EXIT 7 (DATA DEFINITIONS)'\n***********************************************************************\n*                                                                     *\n*        EXIT 7 MESSAGES                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX7MSG    DC    C'ESTAE SET UP FOR EXIT 7'\nX7MSG01 $MSG   902,'NOT AN IOT'\nX7MSG02 $MSG   903,'ERROR FROM $TRACK'\nX7MSG03 $MSG   904,'$CBIO WRITE FAILED'\n         TITLE 'JES2 USER EXIT 7'\n         LTORG\n         SPACE\n         TITLE 'END OF LOAD MODULE ($MODEND)'\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HASPXS08": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\xf1\\x00\\xf1\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 241, "newlines": 241, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'JESEXIT8 - MAIN TASK CONTROL BLOCK READ/WRITE EXIT'\n***********************************************************************\n**                                                                    *\n* MODULE NAME: HASPXS08                                               *\n*                                                                     *\n* DESCRIPTIVE NAME:  READ  PCT (LLB PASSWORD CONTROL TABLE)           *\n*                                                                     *\n* FUNCTION:  READ CONTROL BLOCKS IN USER ADDRESS SPACE                *\n*                                                                     *\n* ENTRY POINTS:                                                       *\n*         THIS EXIT IS TAKEN FROM THE USER ADDRESS SPACE (HASCSRDS)   *\n*         JUST AFTER THE CONTROL BLOCK IS READ FROM OR JUST BEFORE    *\n*         THE CONTROL BLOCK IS WRITTEN TO SPOOL.                      *\n*                                                                     *\n* INPUT:                                                              *\n*         R0  = A POINTER TO A PARAMETER LIST WITH THE FOLLOWING      *\n*               STRUCTURE, MAPPED BY $XPL:                            *\n*               FIELD NAME OFFSET DESCRIPTION                         *\n*               XPLID      (+0)   EYE CATCHER ('XPL')                 *\n*               XPLLEVEL   (+4)   MAINTENANCE LEVEL                   *\n*               XPLXITID   (+5)   EXIT NUMBER                         *\n*               XPLEXLEV   (+6)   VERSION NUMBER                      *\n*               XPLIND     (+7)   INDICATOR BYTE                      *\n*               XPLCOND    (+8)   CONDITION BYTE. JES2 SETS THE       *\n*                                 CONDITION BYTE WITH ONE OF THE      *\n*                                 FOLLOWING BIT SETTINGS              *\n*                                 X008CBWR    CB IS TO BE WRITTEN     *\n*                                 X008CBUN    CB READ IS UNKNOWN      *\n*                                 X008IOER    CB READ IS NOT VALID    *\n*               XPLRESP     (+9)  RESPONSE BYTE                       *\n*               XPLSIZE     (+10) LENGTH OF PARAMETER LIST            *\n*               X008CBID          THE 4 CHARACTER EBCDIC CB ID        *\n*         R1  = ADDRESS OF THE CONTROL BLOCK                          *\n*         R11 = ADDRESS OF THE HCT                                    *\n*         R13 = ADDRESS OF AN OS-STYLE SAVE AREA                      *\n*         R14 = RETURN ADDRESS                                        *\n*         R15 = ENTRY ADDRESS                                         *\n* OUTPUT:                                                             *\n*         R0  = A POINTER TO A PARAMETER LIST, MAPPED BY $XPL         *\n*               FIELD NAME DESCRIPTION                                *\n*               XPLCOND    CONDITION BYTE.                            *\n*               XPLRESP    RESPONSE BYTE. TURN THE X008IOER BIT       *\n*                          SETTING ON IN THE RESPONSE BYTE IF AN I/O  *\n*                          ERROR OCCURRED.                            *\n*         R15 = RETURN CODE                                           *\n*                                                                     *\n*         RETURN CODES HAVE THE FOLLOWING MEANINGS:                   *\n*         0 - TELLS JES2 THAT IF ANY ADDITIONAL EXIT ROUTINES ARE     *\n*             ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE    *\n*             EXIT ROUTINE. IF THERE IS NO OTHER EXIT ROUTINES        *\n*             ASSOCIATED WITH THIS EXIT, CONTINUE WITH NORMAL         *\n*             PROCESSING, WHICH IS DETERMINED BY THE PARTICULAR EXIT  *\n*             POINT FROM WHICH THE EXIT WAS CALLED.                   *\n*         4 - TELLS JES2 THAT EVEN IF ADDITIONAL EXIT ROUTINES ARE    *\n*             ASSOCIATED WITH THIS EXIT, IGNORE THEM; CONTINUE WITH   *\n*             NORMAL PROCESSING, WHICH IS DETERMINED BY THE           *\n*             PARTICULAR EXIT POINT FROM WHICH THIS EXIT WAS CALLED.  *\n*         8 - TELLS JES2 THAT AN I/O ERROR WAS ENCOUNTERED. MESSAGE   *\n*             $HASP370 IS ISSUED. IF THERE IS ANY OTHER EXIT ROUTINES *\n*             ASSOCIATED WITH THIS EXIT, IGNORE THEM; CONTINUE WITH   *\n*             NORMAL PROCESSING, WHICH IS DETERMINED BY THE           *\n*             PARTICULAR EXIT POINT FROM WHICH THIS EXIT WAS CALLED.  *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         COPY  $HASPGBL            COPY HASP GLOBALS\nHASPXS08 $MODULE NOTICE=NONE,ENVIRON=USER,                             C\n               TITLE='JESEXIT8 - USER TASK CONTROL BLOCK I/O EXIT',    C\n               ASCB,               GENERATE MVS ASCB DSECT             C\n               CVT,                GENERATE MVS CVT DSECT              C\n               DEB,                GENERATE MVS DEB DSECT              C\n               PSA,                GENERATE MVS PSA DSECT              C\n               RPL,                GENERATE MVS RGP DSECT              C\n               SDWA,               GENERATE MVS SDWA DSECT             C\n               $BUFFER,            GENERATE HASP BUFFER DSECT          C\n               $CAT,               GENERATE HASP CAT DSECT             C\n               $HASPEQU,           GENERATE HASP EQUATES               C\n               $HCT,               GENERATE HASP HCT DSECT             C\n               $HCCT,              GENERATE HASP SSVT DSECT            C\n               $IOT,               GENERATE HASP IOT DSECT             C\n               $JCT,               GENERATE HASP JCT DSECT             C\n               $JQE,               GENERATE HASP JQE DSECT             C\n               $MIT,               GENERATE HASP MIT DSECT             C\n               $MITETBL,           GENERATE HASP MITETBL DSECT         C\n               $PCE,               GENERATE HASP PCE DSECT             C\n               $PDDB,              GENERATE HASP PDDB DSECT            C\n               $SCAT,              GENERATE HASP SCAT DSECT            C\n               $SJB,               GENERATE HASP SJB DSECT             C\n               $TAB,               GENERATE HASP TAB DSECT             C\n               $TQE,               GENERATE HASP TQE DSECT             C\n               $USERCBS,           GENERATE USER CONTROL BLOCKS        C\n               $XPL\n         PRINT ON,GEN,NODATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ENTRY FOR JCT READ/WRITE                                     *\n*                                                                     *\n***********************************************************************\nUEXIT8  $ENTRY CSECT=YES,BASE=R12  EXIT ROUTINE ENTRY POINT\n        $SAVE  NAME=UEXIT8         SAVE CALLERS REGS\n         USING HCCT,R11            ADDRESS SSVT\n         LR    R12,R15             LOAD BASE REGISTER\n         SPACE\n         LR    R3,R0               SAVE ENTRY CODE\n         USING XPL,R3              SET UP ADDRESSABILITY FOR XPL\n         LR    R9,R1               SAVE JCT POINTER\n         USING JCT,R9              ADDRESS JCT\n         USING PSA,0\n         L     R1,FLCCVT               LOAD ADDRESS OF CVT\n         L     R1,CVTTCBP-CVT(,R1)     GET POINTER TO ...\n         L     R1,12(,R1)              ... ASCB\n         L     R7,ASCBJBNS-ASCB(,R1)   LOAD POINTER TO STC JOBNAME\n         CLC   0(8,R7),=CL8'INIT'      IS THIS AN INIT JOB\n         BNE   RET0                NO, EXIT\n         CLC   X008CBID,=CL4'JCT'  IS IT A JCT ?\n         BNE   RET0                NO, EXIT\n         TM    XPLCOND,X008CBWR    IS THIS A WRITE OPERATION ?\n         BO    RET0                IF SO RETURN CODE ZERO\n         SPACE ,\n         TM    JCTUSER0,JCTPW      PASSWORDS SUPPLIED IN JCL ?\n         BNO   RET0                NO, RETURN\n         CLC   JCTUSER1,=A(0)      IS THERE A PCT  ON SPOOL ?\n         BE    RET0                NO, RETURN\n         SPACE\n         LA    R0,STORGLEN         GET DATA AREA LENGTH\n         GETMAIN  RC,LV=(0),SP=230 GET STORAGE FOR WORKAREA\n         LTR   R15,R15             TEST RETURN FROM GETMAIN\n         BNZ   RET0                QUIT HERE IF NO STORAGE\n         ST    R1,8(,R13)          POINT CALLERS SAVEAREA TO OURS\n         ST    R13,4(,R1)          SAVE ADDRESS OF CALLERS SAVE AREA\n         LR    R13,R1              POINT R13 TO OUR SAVE AREA\n         USING STORAGE,R13         ADDRESS CALLER SAVE AREA\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        FIND SJB                                                     *\n*                                                                     *\n***********************************************************************\n         USING PSA,R0\n         $SJBFIND TYPE=LAST\n         LTR   R15,R15\n         BNZ   RET0C\n         ST    R1,X8SJB\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        READ IN PASSWORD CONTROL TABLE                               *\n*                                                                     *\n***********************************************************************\n         $SJBLOCK ADDR=X8SJB,NONDISP=RETURN,TYPE=GET\n         C     R15,=F'4'           RETURN CODE GREATER THAN 4\n         BH    RET0C               YES, EXIT\n         ST    R15,X8SJBRC         SAVE RETURN CODE\n         XC    JCTUSER2,JCTUSER2 CLEAR BUFFER ADDRESS\n         L     R10,X8SJB\n         $CBIO TYPE=READ,MTTR=JCTUSER1,VERIFY=PCT,EXIT=NO\n         B     X8BRTBL(R15)      BR INTO BR TABLE\nX8BRTBL  DS    0H\n         B     CBRET0\n         B     CBRET4\n         B     CBRET8\n         B     CBRET12\n         B     CBRET16\n         B     CBRET20\n         B     CBRET24\nCBRET0   DS    0H\n         ST    R1,JCTUSER2       SAVE POINTER TO PASSWORD CONTROL TABLE\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET4   DS    0H\n         $MID  997\n         WTO   '&MID.HASPXS08 - RETURN CODE 4 FROM $CBIO',ROUTCDE=10,  X\n               DESC=6\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET8   DS    0H\n         $MID  997\n         WTO   '&MID.HASPXS08 - RETURN CODE 8 FROM $CBIO',ROUTCDE=10,  X\n               DESC=6\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET12  DS    0H\n         $MID  997\n         WTO   '&MID.HASPXS08 - RETURN CODE 12 FROM $CBIO',ROUTCDE=10, X\n               DESC=6\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET16  DS    0H\n         $MID  997\n         WTO   '&MID.HASPXS08 - RETURN CODE 16 FROM $CBIO',ROUTCDE=10, X\n               DESC=6\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET20  DS    0H\n         $MID  997\n         WTO   '&MID.HASPXS08 - RETURN CODE 20 FROM $CBIO',ROUTCDE=10, X\n               DESC=6\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nCBRET24  DS    0H\n         ST    R1,JCTUSER2       SAVE POINTER TO PASSWORD CONTROL TABLE\n         B     UNLKSJB           BRANCH TO UNLOCK SJB\nUNLKSJB  DS    0H\n         CLC   X8SJBRC,=F'4'       DID SOMEONE ALREADY HAVE THE LOCK\n         BE    RET0C               YES, THEN LET THEM FREE IT\n         $SJBLOCK ADDR=X8SJB,TYPE=FREE\n         B     RET0C\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE ,\nRET0C    DS    0H\n         LA    R1,STORAGE          POINT TO AREA\n         L     R13,SAVEAREA+4      RESTORE CALLER'S SAVEAREA\n         DROP  R13                 DROP OUR SAVE AREA\n         LA    R0,STORGLEN         GET LENGTH OF DATA AREA\n         ICM   R0,B'1000',=AL1(230) SET SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE ,\nRET0     DS    0H\n         LA    R15,0           LOAD RETURN CODE 0\n        $RETURN RC=(R15)       RETURN TO CALLER\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CONSTANTS, EQUATES AND LITERALS                              *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n        $MODEND\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        USER SAVE AREA DSECT                                         *\n*                                                                     *\n***********************************************************************\nSTORAGE  DSECT\nSAVEAREA DS    18F\nX8SJB    DS    F\nX8SJBRC  DS    F\nSTORGLEN EQU   *-STORAGE           LENGTH OF EXTENDED AREA\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEASVC00": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x02\\x00\\x02\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "GIBSON"}, "text": "SVCPARM 252,REPLACE,TYPE(3),           /* READPSWD SVC  JAG 05/17/83 */\n            APF(NO),NPRMPT(NO)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAVMXIT": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x03v\\x03v\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 886, "newlines": 886, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'IEAVMXIT  '\n         PRINT  GEN\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:  THIS PROGRAM IS A COMMUNICATIONS TASK EXIT.       *\n*              IT CAN MANIPULATE CONSOLE MESSAGES OR TRIGGER AN       *\n*              EVENT BASED ON A CONSOLE MESSAGE BEING ISSUED.         *\n*                                                                     *\n*        ENTRY:  IEAVMXIT                                             *\n*                                                                     *\n*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *\n*                                                                     *\n*        INPUT:  REGISTER 1 POINTS TO CTXT                            *\n*                                                                     *\n*                                                                     *\n*  NOTES ON MACRO IEEMSG                                              *\n*                                                                     *\n* IEEMSG - BUILD AN ENTRY FOR WTO MSG TABLE                           *\n*                                                                     *\n*         THE IEEMSG MACRO INSTRUCTION IS USED TO BUILD AN ENTRY      *\n*         FOR THE WTO MSG TABLE USED TO MODIFY ROUTING AND DESC       *\n*         CODES FOR WTO MESSAGES, ISSUE COMMANDS AND RESOND TO        *\n*         WTOR'S.                                                     *\n*                                                                     *\n*         THE IEEMSG IS WRITTEN AS FOLLOWS:                           *\n*                                                                     *\n*          ____________________________________________________       *\n*         |                                                    |      *\n*         | SYMBOL | IEEMSG   | ID=\"WTOMSGID\"                  |      *\n*         |        |          | /ROUTCDE=(\"ROUTE CODES\")/      |      *\n*         |        |          | /DESC=(\"DESCRIPTOR CODES\")/    |      *\n*         |        |          | /CMD1=\"CMD\"/                   |      *\n*         |        |          | /CMD2=\"CMD\"/                   |      *\n*         |        |          | /CMD3=\"CMD\"/                   |      *\n*         |        |          | /CMD4=\"CMD\"/                   |      *\n*         |        |          | /CMD5=\"CMD\"/                   |      *\n*         |        |          | /CMD6=\"CMD\"/                   |      *\n*         |        |          | /CMD7=\"CMD\"/                   |      *\n*         |        |          | /CMD8=\"CMD\"/                   |      *\n*         |        |          | /CMD9=\"CMD\"/                   |      *\n*         |        |          | /CMD10=\"CMD\"/                  |      *\n*         |        |          | /JOBNAME=\"JOBNAME\"/            |      *\n*          ____________________________________________________       *\n*                                                                     *\n*         SYMBOLS:                                                    *\n*           SLASHES (/) ARE USED TO ENCLOSE OPTIONAL ELEMENTS         *\n*           DOUBLE QUOTES (\") ARE USED TO ENCLOSE ELEMENTS FOR WHICH  *\n*           YOU CODE VALUES THAT YOU CHOSE                            *\n*           OR SIGN (|) IS USED TO SEPARATE ALTERNATIVE ELEMENTS.     *\n*                                                                     *\n*         THE FOLLOWING DESCRIBES THE IEEMSG OPERANDS                 *\n*           ID=\"WTOMSGID\"                                             *\n*             THE ID OPERAND SPECFIES THE WTO OR WTOR MESSAGES TO BE  *\n*             ACTED UPON. THE LENGTH MUST BE GREATER THAN 2 AND LESS  *\n*             THAN 125. THIS IS COMPARED TO THE BEGINNING OF EACH     *\n*             WTO OR WTOR MESSAGE.                                    *\n*                                                                     *\n*           ROUTCDE=(\"ROUTE CODES\")                                   *\n*             THE ROUTCDE OPERAND SPECIFIES THE ROUTING CODES TO BE   *\n*             ASSIGNED TO THE MESSAGE.                                *\n*                                                                     *\n*           DESC=(\"DESCRIPTOR CODES\")                                 *\n*             THE DESC OPERAND SPECIFIES THE DESCRIPTOR CODES TO BE   *\n*             ASSIGNED TO THE MESSAGE.                                *\n*                                                                     *\n*           CMD1=\"CMD\"                                                *\n*           CMD2=\"CMD\"                                                *\n*           CMD3=\"CMD\"                                                *\n*           CMD4=\"CMD\"                                                *\n*           CMD5=\"CMD\"                                                *\n*           CMD6=\"CMD\"                                                *\n*           CMD7=\"CMD\"                                                *\n*           CMD8=\"CMD\"                                                *\n*           CMD9=\"CMD\"                                                *\n*           CMD10=\"CMD\"                                               *\n*             THE CMD OPERAND SPECIFIES THE COMMANDS TO BE ISSUED.    *\n*             THE LENGTH MUST BE LESS THAN 120 .                      *\n*             10 SEPARATE COMMANDS CAN BE SPECIFIED.                  *\n*                                                                     *\n*           JOBNAME=\"JOBNAME\"                                         *\n*             THE JOBNAME OPERAND SPECIFIES THE NAME OF THE JOB THAT  *\n*             MUST BE ISSUEING THE WTO/WTOR FOR THIS ENTRY.           *\n*             THE LENGTH MUST BE 8 CHARATCTERS OR LESS.               *\n*                                                                     *\n*                                                                     *\n*         EXAMPLE 1                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES TO 0 SO MESSAGE WILL    *\n*           NOT APPEAR ON THE CONSOLE ONLY IN THE LOG.                *\n*                                                                     *\n*           IEEMSG ID=NDP00005,ROUTCDE=0                              *\n*                                                                     *\n*         EXAMPLE 2                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES TO 2 AND THE DESC CODE  *\n*           TO 4 SO THAT A NON-DEL MESSAGE WILL ROLL .                *\n*                                                                     *\n*           IEEMSG ID=IEE362A,ROUTCDE=(2),DESC=(4)                    *\n*                                                                     *\n*         EXAMPLE 3                                                   *\n*           OPERATION: CHANGE THE ROUTE CODES SO MESSAGE WILL APPEAR  *\n*           ON ALL CONSOLES.                                          *\n*                                                                     *\n*           IEEMSG ID=IEE362A,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13, *\n*                 14,15,16)                                           *\n*                                                                     *\n*         EXAMPLE 4                                                   *\n*           OPERATION: ISSUE COMMANDS 'S TSO' AND '$SLGN1' FOR        *\n*                      MESSAGE IST020I.                               *\n*                                                                     *\n*           IEEMSG ID=IST020I,CMD1='S TSO',CMD2=$SLGN1                *\n*                                                                     *\n*         EXAMPLE 5                                                   *\n*           OPERATION: ISSUE REPLY 'U' FOR MESSAGE IKT012D.           *\n*                                                                     *\n*           IEEMSG ID=IKT012D,CMD1='R XX,U'                           *\n*                                                                     *\n*                                                                     *\n*        FILES:  NONE.                                                *\n*                                                                     *\n*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS A              *\n*           COMMUNICATIONS TASK EXIT.                                 *\n*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *\n*                                                                     *\n*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *\n*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE           *\n*              ORIGINALLY REQUESTED.                                  *\n*                                                                     *\n*            . CHANGING DESCRIPTOR CODES ON MESSAGES IN ORDER TO      *\n*              KEEP MESSAGES FROM ROLLING OFF THE SCREEN.             *\n*                                                                     *\n*            . KEEPING MESSAGES OFF THE CONSOLE COMPLETELY BY         *\n*              CHANGING THE ROUTING CODE TO ZERO                      *\n*                                                                     *\n*            . TRIGGERING AN ACTIVITY (I.E. START A TASK) IF A        *\n*              SPECIFIC MESSAGE IS ISSUED.                            *\n*                                                                     *\n*            . REPLY TO 'WTORS' AUTOMATICALLY                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*    MACRO DEFINITIONS                                                *\n*---------------------------------------------------------------------*\n         MACRO\n&LABEL   IEEMSG   &ID=,&ROUTCDE=,&DESC=,&JOBNAME=,                     X\n               &CMD1=,                                                 X\n               &CMD2=,                                                 X\n               &CMD3=,                                                 X\n               &CMD4=,                                                 X\n               &CMD5=,                                                 X\n               &CMD6=,                                                 X\n               &CMD7=,                                                 X\n               &CMD8=,                                                 X\n               &CMD9=,                                                 X\n               &CMD10=\n         LCLC  &DCODE,&RCODE,&FLG,&MSGID,&JBNM,&CRD\n         LCLC  &CRDM(10)\n         LCLA  &LCRDM(10)\n         LCLA  &NUMCMD\n         LCLA  &I,&N,&LID,&RCFLG,&DCFLG,&CMFLG,&RSFLG,&LCRD\n         LCLA  &JBFLG\n         LCLB  &CMDFLG\n&DCODE   SETC  '0000000000000000'\n&RCODE   SETC  '0000000000000000'\n&FLG     SETC  '00000000'\n&JBNM    SETC  '        '\n&DCFLG   SETA  0\n&RCFLG   SETA  1\n&CMFLG   SETA  2\n&JBFLG   SETA  4\n&CMDFLG  SETB  0\n.*\n.* CHECK PARAMETERS\n.*\n.IDCHK1  AIF   (T'&ID NE 'O').IDCHK1A\n         MNOTE 8,'* * * ERROR * * * ID NOT SPECIFIED'\n         MEXIT\n.IDCHK1A AIF   (K'&ID GE 3).IDCHK1B\n         MNOTE 8,'* * * ERROR * * * ID LESS THAN 3 CHARACTERS'\n         MEXIT\n.IDCHK1B AIF   (K'&ID LE 125).IDCHK1C\n         MNOTE 8,'* * * ERROR * * * ID GREATER THAN 125 CHARACTERS'\n         MEXIT\n.IDCHK1C ANOP\n         AIF   (T'&CMD1 EQ 'O').IDCHK1E\n&CMDFLG  SETB  1\n&CRDM(1) SETC  '&CMD1'\n         AIF   ('&CMD1'(1,1) NE '''' OR                                X\n               '&CMD1'(K'&CMD1,1) NE '''').IDCK1D1\n&CRDM(1) SETC  '&CMD1'(2,K'&CMD1-2)\n.IDCK1D1 AIF   (K'&CRDM(1) LE 120).IDCHK1E\n         MNOTE 8,'* * * ERROR * * * CMD1 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1E AIF   (T'&CMD2 EQ 'O').IDCHK1F\n&CMDFLG  SETB  1\n&CRDM(2) SETC  '&CMD2'\n         AIF   ('&CMD2'(1,1) NE '''' OR                                X\n               '&CMD2'(K'&CMD2,1) NE '''').IDCK1E1\n&CRDM(2) SETC  '&CMD2'(2,K'&CMD2-2)\n.IDCK1E1 AIF   (K'&CRDM(2) LE 120).IDCHK1F\n         MNOTE 8,'* * * ERROR * * * CMD2 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1F AIF   (T'&CMD3 EQ 'O').IDCHK1G\n&CMDFLG  SETB  1\n&CRDM(3) SETC  '&CMD3'\n         AIF   ('&CMD3'(1,1) NE '''' OR                                X\n               '&CMD3'(K'&CMD3,1) NE '''').IDCK1F1\n&CRDM(3) SETC  '&CMD3'(2,K'&CMD3-2)\n.IDCK1F1 AIF   (K'&CRDM(3) LE 120).IDCHK1G\n         MNOTE 8,'* * * ERROR * * * CMD3 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1G AIF   (T'&CMD4 EQ 'O').IDCHK1H\n&CMDFLG  SETB  1\n&CRDM(4) SETC  '&CMD4'\n         AIF   ('&CMD4'(1,1) NE '''' OR                                X\n               '&CMD4'(K'&CMD4,1) NE '''').IDCK1G1\n&CRDM(4) SETC  '&CMD4'(2,K'&CMD4-2)\n.IDCK1G1 AIF   (K'&CRDM(4) LE 120).IDCHK1H\n         MNOTE 8,'* * * ERROR * * * CMD4 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1H AIF   (T'&CMD5 EQ 'O').IDCHK1I\n&CMDFLG  SETB  1\n&CRDM(5) SETC  '&CMD5'\n         AIF   ('&CMD5'(1,1) NE '''' OR                                X\n               '&CMD5'(K'&CMD5,1) NE '''').IDCK1H1\n&CRDM(5) SETC  '&CMD5'(2,K'&CMD5-2)\n.IDCK1H1 AIF   (K'&CRDM(5) LE 120).IDCHK1I\n         MNOTE 8,'* * * ERROR * * * CMD5 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1I AIF   (T'&CMD6 EQ 'O').IDCHK1J\n&CMDFLG  SETB  1\n&CRDM(6) SETC  '&CMD6'\n         AIF   ('&CMD6'(1,1) NE '''' OR                                X\n               '&CMD6'(K'&CMD6,1) NE '''').IDCK1I1\n&CRDM(6) SETC  '&CMD6'(2,K'&CMD6-2)\n.IDCK1I1 AIF   (K'&CRDM(6) LE 120).IDCHK1J\n         MNOTE 8,'* * * ERROR * * * CMD6 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1J AIF   (T'&CMD7 EQ 'O').IDCHK1K\n&CMDFLG  SETB  1\n&CRDM(7) SETC  '&CMD7'\n         AIF   ('&CMD7'(1,1) NE '''' OR                                X\n               '&CMD7'(K'&CMD7,1) NE '''').IDCK1J1\n&CRDM(7) SETC  '&CMD7'(2,K'&CMD7-2)\n.IDCK1J1 AIF   (K'&CRDM(7) LE 120).IDCHK1K\n         MNOTE 8,'* * * ERROR * * * CMD7 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1K AIF   (T'&CMD8 EQ 'O').IDCHK1L\n&CMDFLG  SETB  1\n&CRDM(8) SETC  '&CMD8'\n         AIF   ('&CMD8'(1,1) NE '''' OR                                X\n               '&CMD8'(K'&CMD8,1) NE '''').IDCK1K1\n&CRDM(8) SETC  '&CMD8'(2,K'&CMD8-2)\n.IDCK1K1 AIF   (K'&CRDM(8) LE 120).IDCHK1L\n         MNOTE 8,'* * * ERROR * * * CMD8 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1L AIF   (T'&CMD9 EQ 'O').IDCHK1M\n&CMDFLG  SETB  1\n&CRDM(9) SETC  '&CMD9'\n         AIF   ('&CMD9'(1,1) NE '''' OR                                X\n               '&CMD9'(K'&CMD9,1) NE '''').IDCK1L1\n&CRDM(9) SETC  '&CMD9'(2,K'&CMD9-2)\n.IDCK1L1 AIF   (K'&CRDM(9) LE 120).IDCHK1M\n         MNOTE 8,'* * * ERROR * * * CMD9 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK1M AIF   (T'&CMD10 EQ 'O').IDCHK2\n&CMDFLG  SETB  1\n&CRDM(10) SETC '&CMD10'\n         AIF   ('&CMD10'(1,1) NE '''' OR                               X\n               '&CMD10'(K'&CMD10,1) NE '''').IDCK1M1\n&CRDM(10) SETC '&CMD10'(2,K'&CMD10-2)\n.IDCK1M1 AIF   (K'&CRDM(10) LE 120).IDCHK2\n         MNOTE 8,'* * * ERROR * * * CMD10 GREATER THAN 120 CHARACTERS'\n         MEXIT\n.IDCHK2  ANOP\n         AIF   (K'&JOBNAME LE 8).IDCHK99\n         MNOTE 8,'* * * ERROR * * * JOBNAME GREATER THAN 8 CHARACTERS'\n         MEXIT\n.IDCHK99 ANOP\n.*\n.* DESCRIPTOR CODES\n.*\n.DCHK    AIF   (T'&DESC EQ 'O').RCHK\n         AIF   (N'&DESC EQ 1 AND &DESC(1) EQ 0).DFLG\n&I       SETA  1\n.DLOOP   ANOP\n&N       SETA  &DESC(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGND\n         MNOTE 8,'&N IS INVALID DESCRIPTOR - IGNORED'\n         AGO   .NXTD\n.ASSIGND ANOP\n&DCODE   SETC  '&DCODE'(1,&N-1).'1'.'&DCODE'(&N+1,16-&N)\n.NXTD    AIF  (&I LE N'&DESC).DLOOP\n.DFLG    ANOP\n&FLG     SETC  '&FLG'(1,&DCFLG).'1'.'&FLG'(&DCFLG+2,8-&DCFLG+1)\n.*\n.* ROUTE CODES\n.*\n.RCHK    AIF   (T'&ROUTCDE EQ 'O').IDCHK\n         AIF   (N'&ROUTCDE EQ 1 AND &ROUTCDE(1) EQ 0).RFLG\n&I       SETA  1\n.RLOOP   ANOP\n&N       SETA  &ROUTCDE(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGNR\n         MNOTE 8,'&N IS INVALID ROUTE - IGNORED'\n         AGO   .NXTR\n.ASSIGNR ANOP\n&RCODE   SETC  '&RCODE'(1,&N-1).'1'.'&RCODE'(&N+1,16-&N)\n.NXTR    AIF   (&I LE N'&ROUTCDE).RLOOP\n.RFLG    ANOP\n&FLG     SETC  '&FLG'(1,&RCFLG).'1'.'&FLG'(&RCFLG+2,8-&RCFLG+1)\n.*\n.* MESSAGE ID\n.*\n.IDCHK   ANOP\n&MSGID   SETC  '&ID'\n         AIF   ('&MSGID'(1,1) NE '''' OR '&MSGID'(K'&ID,1) NE '''').ID2\n&MSGID   SETC  '&MSGID'(2,K'&MSGID-2)\n.ID2     ANOP\n&LID     SETA  K'&MSGID\n.*\n.* COMMAND\n.*\n.CMCHK   AIF   (NOT &CMDFLG).JBNMCHK\n&NUMCMD  SETA  0\n&I       SETA  0\n.CMLP    ANOP\n&I       SETA  &I+1\n&LCRDM(&I) SETA  0\n         AIF   (K'&CRDM(&I) EQ 0).CMLPB\n&LCRDM(&I) SETA  K'&CRDM(&I)\n&NUMCMD  SETA  &NUMCMD+1\n.CMLPB   AIF  (&I LT 10).CMLP\n&FLG     SETC  '&FLG'(1,&CMFLG).'1'.'&FLG'(&CMFLG+2,8-&CMFLG+1)\n.*\n.* JOBNAME\n.*\n.JBNMCHK AIF   (T'&JOBNAME EQ 'O').ASSIGNC\n&JBNM    SETC  '&JOBNAME'\n&FLG     SETC  '&FLG'(1,&JBFLG).'1'.'&FLG'(&JBFLG+2,8-&JBFLG+1)\n.*\n.*\n.*\n.ASSIGNC ANOP\n&LABEL   DS   0H\nS&SYSNDX EQU  *\n         DC   AL2(E&SYSNDX-S&SYSNDX)\n         DC   BL2'&DCODE'\n         DC   BL2'&RCODE'\n         DC   BL1'&FLG'\n         DC   BL1'00000000'\n         DC   CL8'&JBNM'\n         DC   AL1(&LID)\n         DC   C'&MSGID'\n         AIF  (NOT &CMDFLG).END\n         DC   AL1(&NUMCMD)\n&I       SETA  0\n.BLP     ANOP\n&I       SETA  &I+1\n         AIF   (K'&CRDM(&I) EQ 0).BLPB\n         DC   AL1(&LCRDM(&I))\n         DC   C'&CRDM(&I)'\n.BLPB    AIF  (&I LT 10).BLP\n.END     ANOP\nE&SYSNDX DS   0H\n         MEND\n         EJECT ,\n*---------------------------------------------------------------------*\n*        START THE PROGRAM                                            *\n*---------------------------------------------------------------------*\n         SPACE ,\n         TITLE 'IEAVMXIT  WTO/WTOR EXIT'\nIEAVMXIT CSECT\nIEAVMXIT AMODE 31\nIEAVMXIT RMODE ANY\n         SAVE  (14,12),,'IEAVMXIT,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING IEAVMXIT,R12,R11        REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         L     R2,0(,R1)               SET ADDR TO CTXT DSECT\n         USING CTXT,R2                 EST. ADDR TO CTXT DSECT\n         L     R3,CTXTTXPJ             SET ADDR TO TEXT OF MAJOR LINE\n         USING CTXTATTR,R3             EST. ADDRESSABILITY\n         SPACE ,\n         GETMAIN RU,LV=WKAREAL,SP=227,LOC=BELOW\n         LR    R10,R1                  SAVE THE ADDRESS\n         USING WKAREA,R10              GET ADDRESSABILITY\n         ST    R13,SAVE+4              CHAIN ...\n         LA    R1,SAVE                    ...\n         ST    R1,8(,R13)              ...  SAVEAREAS\n         LR    R13,R1                  PUT SAVE AREA ADDRESS INTO R13\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        TEST FOR COMTASK ASID AND IF SO EXIT                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         USING PSA,0                   ADDRESS LOW CORE\n         L     R4,CVTPTR               POINT TO CVT\n         L     R1,CVTTCBP-CVT(,R4)     GET TCB POINTERS\n         L     R1,12(,R1)              GET ASCB POINTER\n         L     R4,CVTCUCB-CVT(,R4)     GET UCM ADDRESS\n         LH    R4,UCMCTID-UCM(,R4)     GET COMTASK ASID\n         LTR   R4,R4                   IS THERE ONE ?\n         BNP   RETURN                  NO, RETURN\n         CH    R4,ASCBASID-ASCB(,R1)   ARE WE COMING FROM COMTASK ?\n         BE    RETURN                  YES, RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        TURN OFF ROUTE 14 REGARDLESS                                 *\n*                                                                     *\n*        THIS CODE IS USED SO ROUTE CODE 14 WILL APPEAR ONLY IN THE   *\n*        LOG.                                                         *\n*---------------------------------------------------------------------*\n         SPACE ,\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         TM    CTXTR002,CTXTR14        IS ROUTE CODE 14 ON ?\n         BNO   ROUTE13                 NO, BRANCH\n         NI    CTXTR002,X'FF'-CTXTR14  YES, TURN IT OFF\n         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG\n         EJECT ,\n*---------------------------------------------------------------------*\n*        DONT LOG ROUTE 13 REGARDLESS                                 *\n*                                                                     *\n*        THIS CODE IS USED SO ROUTE CODE 13 WILL NOT APPEAR  IN THE   *\n*        LOG.                                                         *\n*---------------------------------------------------------------------*\n         SPACE ,\nROUTE13  DS    0H\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         CLI   CTXTR002,CTXTR13        IS ONLY ROUTE 13 ON (2ND HALF)?\n         BNE   SCANTBL                 NO, BRANCH\n         CLI   CTXTR001,X'00'          IS ONLY ROUTE 13 ON (1ST HALF)?\n         BNE   SCANTBL                 NO, BRANCH\n         OI    CTXTRFB2,CTXTRNHC       YES, SET NO HARDCOPY FLAG\n         DROP  R1\n         EJECT ,\n*---------------------------------------------------------------------*\n*        SCAN TABLE                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nSCANTBL  DS    0H\n         L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         L     R1,CVTTCBP-CVT(,R1)     GET POINTER TO ...\n         L     R1,12(,R1)              ... ASCB\n         USING ASCB,R1\n         L     R7,ASCBJBNI             LOAD POINTER TO INIT JOBNAME\n         LTR   R7,R7                   IS THERE AN INIT JOBNAME PTR ?\n         BNZ   SCANTBL1                YES, USE IT\n         L     R7,ASCBJBNS             LOAD STC JOBNAME POINTER\n         LTR   R7,R7                   IS THERE AN STC JOBNAME PTR ?\n         BNZ   SCANTBL1                YES, SKIP LOAD OF BLANK PTR\n         LA    R7,=CL8' '              POINT TO BLANKS\nSCANTBL1 DS    0H\n         SLR   R4,R4                   CLEAR FOR ICM\n         ICM   R4,B'0011',ASCBASID     LOAD ASID\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         SRDL  R4,4                    MOVE NYBBLE INTO R5\n         SRL   R5,4                    MOVE OVER ONE NYBBLE\n         ST    R5,CURASID              SAVE\n         OC    CURASID,=X'F0F0F0F0'    CONVERT TO ZONED\n         TR    CURASID,TRHEXTBL        TR 0-9,A-F\n         MVC   CURJBNM(8),0(R7)        SAVE JOBNAME\n         DROP  R1\n         SPACE 2\n         LA    R4,8                    MAX LJOBNAME LENGTH\n         LA    R5,CURJBNM              POINT TO JOBNAME\nSCANTBL2 DS    0H\n         CLI   0(R5),C' '              FOUND THE END OF THE JOBNAME ?\n         BE    SCANTBL3                YES, BRANCH TO STORE LENGTH\n         LA    R5,1(,R5)               BUMP POINTER\n         BCT   R4,SCANTBL2             LOOP TO FIND LENGTH\nSCANTBL3 DS    0H\n         LA    R5,8                    MAX LENGTH\n         SR    R5,R4                   CALCULATE LENGTH\n         STH   R5,CURJBNLN             SAVE JOBNAME LENGTH\n         SPACE 2\n         L     R1,CVTPTR               LOAD ADDRESS OF CVT\n         LA    R5,CVTUSER-CVT(,R1)     LOAD ADDRESS OF CVTUSER\n         USING C3POTABL,R5\n         SPACE ,\n         LM    R8,R9,TABLPRMS          POINT TO START & END OF TABLE\n         USING MSGENT,R8               ADDRESS IT\nSCANLP   DS    0H\n         CR    R8,R9                   REACHED END OF TABLE ?\n         BNL   SCANEND                 YES, EXIT LOOP\n         TM    ENTFLAG,JBNMFLG         WAS JOBNAME SPECIFIED ?\n         BNO   SCANIT                  NO, SKIP COMPARE OF JOBNAMES\n         CLC   CURJBNM,ENTJBNM         COMPARE JOBNAMES\n         BNE   SCANSKP                 SKIP ENTRY IF NOT EQUAL\nSCANIT   DS    0H\n         SLR   R1,R1                   CLEAR FOR IC\n         ICM   R1,B'0001',ENTLID       GET LENGTH OF MESSAGE ID\n         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)\n         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE\n         EX    R1,ENTCLC               COMPARE ID'S\n         BE    GOTENT                  BRANCH IF MATCH\nSCANSKP  DS    0H\n         ICM   R1,B'0011',ENTLEN       GET LENGTH OF ENTRY\n         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)\n         LA    R8,0(R1,R8)             POINT TO NEXT ENTRY\n         B     SCANLP                  LOOP\nSCANEND  DS    0H\n         SPACE ,\n         L     R5,0(,R5)               POINT TO NEXT R2D2 TABLE\n         LTR   R5,R5                   IS THERE ONE ?\n         BZ    CHKPSWD                 NO, SO CHECK FOR PASSWORD\n         CLC   C3POID,=CL8'C3POTABL'   DOES ID CHECK ?\n         BNE   CHKPSWD                 NO, SO CHECK FOR PASSWORD\n         LM    R8,R9,C3PO1ST           POINT TO START AND END OF TABLE\n         LA    R5,C3PONXT              GET POINTER TO NEXT SEG.\n         B     SCANLP                  LOOP TO SCAN TABLE\n         SPACE ,\nENTCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CHECK FOR PASSWORD MESSAGE                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nCHKPSWD  DS    0H\n         LA    R8,PSWDMSG              POINT TO PASSWORD MSG ENTRY\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,ENTLID               GET LENGTH OF MESSAGE ID\n         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE\n         EX    R1,PSWCLC               COMPARE ID'S\n         BE    DOPSWD                  BRANCH IF MATCH\n         B     RETURN                  NOT FOUND\n         SPACE ,\nPSWCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PROCESS   PASSWORD MESSAGE                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\nDOPSWD   DS    0H\n         LA    R0,CTXTTMSG+128-51      POINT TO END OF SCAN\n         LA    R7,CTXTTMSG+10          POINT TO POSSIBLE DSN FIELD\n         LA    R9,61                   LENGTH OF MESSAGE\nDOPSWDLP DS    0H\n         CLC   0(6,R7),=CL6'DSNAME'    LOOK FOR DSNAME IN MESSAGE\n         BE    GOTDSN                  FOUND IT\n         LA    R7,1(,R7)               BUMP POINTER\n         LA    R9,1(,R9)               BUMP POINTER\n         CR    R7,R0                   REACHED END OF SCAN ?\n         BL    DOPSWDLP                NO, LOOP\n         B     RETURN                  RETURN\n         SPACE ,\nGOTDSN   DS    0H\n         MVC   DSN(44),7(R7)           MOVE DSN\n         LA    R0,PSWDRPLY             POINT TO FIELD FOR PASSWORD\n         LA    R1,DSN                  POINT TO DSN FIELD\n         SVC   252                     ASK FOR PASSWORD\n         LTR   R15,R15                 DID I GET ONE\n         BZ    MOVEPSWD                YES BR. TO MOVE ENTRY\n         CLC   DSN(5),=CL5'UCAT.'      ASKING FOR UCAT PSWD ?\n         BNE   RETURN                  NO, RETURN\n         L     R1,PSATOLD              POINT TO ACTIVE TCB\n         L     R1,TCBJSCB-TCB(,R1)     GET POINTER TO JSCB\n         L     R1,JSCBACT-IEZJSCB(,R1) POINT TO ACTIVE JSCB FOR SSIB\n         L     R1,JSCBSSIB-IEZJSCB(,R1) POINT TO SSIB\n         L     R1,SSIBSUSE-SSIB(,R1)    POINT TO SJB\n         L     R7,SJBJCT-SJB(,R1)       POINT TO JCT\n         USING JCT,R7\n         CLC   JCTROOMN(4),=CL4'PROD'  IS THIS A PRODUCTION JOB ?\n         BNE   RETURN                  NO, RETURN\n         DROP  R7\n         MVC   PSWDRPLY(8),=CL8' '     BLANK OUT PSWDRPLY\n         LA    R1,8                    LOAD LOOP COUNT\n         LA    R7,DSN+5                LOAD START OF 2ND LVL QUAL\n         LA    R4,PSWDRPLY             LOAD START OF PASSWORD REPLY\nUCATLOOP DS    0H\n         CLI   0(R7),C'.'              REACHED END OF QUALIFIER ?\n         BE    MOVEPSWD                YES, CHECK FOR PRODUCTION JOB\n         CLI   0(R7),C' '              REACHED END OF QUALIFIER ?\n         BE    MOVEPSWD                YES, CHECK FOR PRODUCTION JOB\n         MVC   0(1,R4),0(R7)           MOVE CHARACTER\n         LA    R4,1(,R4)               BUMP TARGET POINTER\n         LA    R7,1(,R7)               BUMP SOURCE POINTER\n         BCT   R1,UCATLOOP             MOVE MAX OF 8 CHARS\nMOVEPSWD DS    0H\n         MVC   PSWDENT(PSWDMSGL),MSGENT MOVE ENTRY\n         LA    R8,PSWDENT              POINT R8 TO NEW ENTRY\n         STC   R9,ENTLID               SAVE MESSAGE LENGTH\n         BCTR  R9,0                    LESS ONE FOR EX MVC\n         EX    R9,MVCPWENT             MOVE MESSAGE\n         LA    R9,1(,R9)               GET BACK LENGTH\n         LA    R7,ENTID(R9)            POINT TO REPLY AREA\n         MVI   0(R7),1                 MOVE IN NUMER OF \"COMMANDS\"\n         MVI   1(R7),13                MOVE IN REPLY LENGTH\n         MVC   2(L'REPLYKW,R7),REPLYKW MOVE IN REPLY KEY WORD\n         MVC   7(8,R7),PSWDRPLY        MOVE IN PASSWORD\n         B     GOTENT                  PROCESS AS REGULAR ENTRY\n         SPACE ,\nMVCPWENT MVC   ENTID(*-*),CTXTTMSG\n         EJECT ,\n*---------------------------------------------------------------------*\n*        GOT TABLE ENTRY NOW PROCESS IT                               *\n*---------------------------------------------------------------------*\n         SPACE ,\nGOTENT   DS    0H\n         SPACE ,\nCHKDESC  DS    0H\n         TM    ENTFLAG,DESCFLG         DO WE WANT TO SET DESC. CODE\n         BNO   CHKROUT                 NO, BRANCH TO CHECK NEXT FLAG\n         L     R1,CTXTDCP              POINT TO DESC CODE BLOCK\n         USING CTXTDESC,R1\n         MVC   CTXTDESC-CTXTDESC(2,R1),ENTDESC     MOVE IN DESC\n         OI    CTXTRFB1,CTXTRCDC       AND TURN ON DC CHANGED FLAG\n         DROP  R1\n         SPACE ,\nCHKROUT  DS    0H\n         TM    ENTFLAG,ROUTFLG         DO WE WANT TO SET ROUT. CODE\n         BNO   CHKCMD                  NO, BRANCH TO CHECK NEXT FLAG\n         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK\n         USING CTXTROUT,R1\n         MVC   CTXTROUT-CTXTROUT(2,R1),ENTROUT     MOVE IN ROUT\n         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG\n         DROP  R1\n         SPACE ,\nCHKCMD   DS    0H\n         TM    ENTFLAG,CMMDFLG         ARE WE DOING A COMMAND ?\n         BO    COMMAND                 YES, BRANCH TO DO COMMAND\n         B     RETURN                  RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        SET UP TO ISSUE COMMAND                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nCOMMAND  EQU  *\n         SLR   R5,R5                   CLEAR FOR IC\n         IC    R5,ENTLID               GET LENGTH OF MESSAGE\n         LA    R5,ENTID(R5)            POINT TO COMMANDS\n         SLR   R4,R4                   CLEAR FOR IC\n         ICM   R4,B'0001',0(R5)        GET NUMBER OF COMMANDS\n         BZ    RETURN                  EXIT IF NONE\n         LA    R5,1(,R5)               BUMP UP PAST NUMBER OF CMDS\nCMDLOOP  DS    0H\n         LA    R9,WTOAREA              POINT TO WTO AREA\n         USING CMDDSECT,R9             USE IT\n         MVI   WTOAREA,C' '            CLEAR ...\n         MVC   WTOAREA+1(L'WTOAREA-1),WTOAREA ... WTOAREA\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,0(,R5)               GET LENGTH\n         LTR   R1,R1                   ZERO LENGTH ?\n         BZ    RETURN                  YES, LEAVE\n         CH    R1,=AL2(L'WTOAREA-CWTOLEN)  TOO LARGE TO MOVE ?\n         BH    RETURN                  YES, LEAVE\n         SPACE ,\n         BCTR  R1,0                    LESS ONE FOR EX\n         EX    R1,$MVCCMD              MOVE CMD\n         B     CMDEXSKP                SKIP OVER EXECUTED CODE\n         SPACE\n$MVCCMD  MVC   WTOAREA+4(*-*),1(R5)    EXECUTED\n         SPACE\nCMDEXSKP DS    0H\n         LA    R1,1(,R1)               GET BACK REAL LENGTH\n         SPACE ,\n         LR    R0,R1                   AND SAVE IN R0\n         MVC   CMDDSECT(CMDHDRLN),CMDWTO MOVE FIRST PART OF WTO COMMAND\n         AH    R0,CMDWTO               ADD LEN OF WTO TO LEN OF CMD\n         STH   R0,CMDLEN               STORE LENGTH OF COMMAND WTO\n         LA    R1,CMDCMD(R1)           POINT PAST CMD\n         MVC   0(CWTOLEN-CMDHDRLN,R1),CMDWTO+CMDHDRLN MOVE REST OF WTO\n         SPACE\n         CLC   CMDCMD(5),REPLYKW       REPLY REQUESTED ?\n         BNE   CMDJBNSC                NO, BRANCH TO SCAN FOR JOBNAME\n         TM    CTXTTFB1,CTXTTFWR       IS IT A WTOR ?\n         BNO   RETERR1                 NO, BR TO ISSUE ERR MSG AND RET\n         OI    CTXTRFB2,CTXTRHCO       SET TO HARDCOPY ONLY\n         MVC   CMDRPNUM(L'CTXTRPID),CTXTRPID  MOVE IN REPLY NUM\n         SPACE\nCMDJBNSC DS    0H\n         SLR   R7,R7                   CLEAR R7 FOR IC\n         IC    R7,0(,R5)               GET LENGTH OF CMD\n         S     R7,=A(L'JOBNKW-1)       GET LENGTH OF SEARCH\n         BNP   CMDISSUE                SKIP SRCH IF NOT LONG ENOUGH\n         LA    R1,CMDCMD               POINT TO CMD IN WTO\n         SPACE ,\n         DROP  R9\n         SPACE ,\nCMDSCNLP DS    0H\n         CLC   0(8,R1),JOBNKW          SEARCH FOR JOB NAME KEYWORD\n         BE    CMDMVJBN                MOVE IN JOBNAME\n         LA    R1,1(,R1)               BUMP POINTER\n         BCT   R7,CMDSCNLP             LOOP\n         B     CMDISSUE                BR TO ISSUE CMD\n         EJECT ,\n*---------------------------------------------------------------------*\n*        MOVE JOBNAME INTO COMMAND IF REQUESTED                       *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDMVJBN DS    0H\n         MVC   0(8,R1),CURJBNM         MOVE IN JOBNAME\n         LA    R9,8(,R1)               POINT TO DISPLACE PLACE\n         AH    R1,CURJBNLN             ADD LENGTH OF JOBNAME\n         LA    R8,8                    MAX JOBNAME LENGTH\n         SH    R8,CURJBNLN             AMOUNT TO DISPLACE REST OF WTO\n         BNP   CMDMVJB2                SKIP IF NOTHING TO DISPLACE\n         LA    R7,0(R8,R7)             GET AMOUNT TO MOVE\n         LTR   R7,R7                   IS THERE ANY?\n         BNP   CMDMVJB1                NO, SKIP MOVE\n         BCTR  R7,0                    LESS ONE FOR EX\n         EX    R7,$CMDMVC1             MOVE RIGHT\n         B     CMDMVJB1\n         SPACE\n$CMDMVC1 MVC   0(*-*,R1),0(R9)         EXECUTED\n         SPACE\nCMDMVJB1 DS    0H\n         LA    R9,WTOAREA              POINT TO WTO AREA\n         USING CMDDSECT,R9             USE IT\n         LH    R1,CMDLEN               LOAD LENGTH OF WTO\n         SR    R1,R8                   LESS AMOUNT MOVED\n         STH   R1,CMDLEN               STORE NEW LENGTH\nCMDMVJB2 DS    0H\n         B     CMDISSUE\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*        ISSUE COMMAND                                                *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDISSUE DS    0H\n         LA    R1,WTOAREA              POINT R1 TO COMMAND WTO\n         SR    R0,R0                   SHOW COMMAND\n         SVC   34                      ISSUE COMMAND\n         SLR   R1,R1                   CLEAR FOR IC\n         IC    R1,0(,R5)               GET LENGTH\n         LA    R5,1(R1,R5)             POINT TO NEXT CMD\n         BCT   R4,CMDLOOP              LOOP THROUGH COMMANDS\n         SPACE ,\n         B     RETURN                  BRANCH TO EXIT\n         EJECT ,\nCMDWTO   WTO   ' ',ROUTCDE=(1),DESC=(5),MF=L\nCWTOLEN  EQU   *-CMDWTO\n         EJECT ,\n*---------------------------------------------------------------------*\n*        ISSUE ERROR MESSAGE WTO                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETERR1  DS    0H\n         WTO   'R2D20001 REPLY REQUESTED AND MESSAGE IS NOT A WTOR'\n         B     RETURN                  BRANCH TO RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO DO FREEMAIN       *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETURN   DS    0H\n         LR    R1,R10                  GET AREA ADDRESS\n         L     R13,SAVE+4              RELOAD SAVE AREA ADDRESS\n         FREEMAIN RU,A=(1),LV=WKAREAL,SP=227\n         LM    R14,R12,12(R13)         RELOAD REGISTERS\n         SLR   R15,R15                 SET RETURN CODE\n         BR    R14                     RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*        TABLE OF MESSAGE ID'S TO BE ACTED ON                         *\n*---------------------------------------------------------------------*\n         SPACE ,\nTABLPRMS DC     A(MSGTABS),A(MSGTABE),A(0),A(0)\nMSGTABS  DS     0H\n         IEEMSG ID=IST020I,CMD1='S TSO',CMD2='$SLGN1;DQ'\nMSGTABE  EQU    *\n         DC     512X'0'\nTABLEND  EQU    *\n         EJECT ,\n*---------------------------------------------------------------------*\n*        \"DUMMY\" TABLE FOR PASSWORD MESSAGES                          *\n*---------------------------------------------------------------------*\n         SPACE ,\nPSWDMSG  IEEMSG ID=IEC301A,CMD1='R XX,        '\nPSWDMSGL EQU   *-PSWDMSG\n         EJECT ,\n*---------------------------------------------------------------------*\n*                CONSTANTS                                            *\n*---------------------------------------------------------------------*\n         SPACE ,\nREPLYKW  DC    CL5'R XX,'\nJOBNKW   DC    CL8'&&JOBNAME'\nASIDKW   DC    CL8'&&ASID'\nTRHEXTBL EQU   *-X'F0'\n         DC    C'01234567'\n         DC    C'89ABCDEF'\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*---------------------------------------------------------------------*\n*                EQUATES                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        COMMAND DSECT                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDDSECT DSECT\nCMDLEN   DS    AL2                     LENGTH OF COMMAND WTO\nCMDMCS   DC    B'0000000000000000'     MCS FLAGS\nCMDHDRLN EQU   *-CMDDSECT\nCMDCMD   EQU   *                       COMMAND GOES HERE\nCMDRPNUM EQU   *+2                     REPLYNUM GOES HERE\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CSA TABLE DSECT                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\n         C3POTABL\n         EJECT ,\n*---------------------------------------------------------------------*\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*---------------------------------------------------------------------*\n         SPACE ,\n         MSGENT\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYSTEM DSECTS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         PRINT ON\n         CVT   DSECT=YES\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IKJTCB\n         IHAASVT\n         IHAASCB\n         IHARB\n         IKJTSB\n         IEECUCM FORMAT=NEW,DSECT=YES\n         IEZJSCB\n         IEFJSSIB\n         IHAORE\n         IHAWQE\n         IEZVX100\n         SPACE ,\n         IFGRPL\n         $HASPEQU\n         $HFAME\n         $BUFFER\n         $PDDB PDDB DSECT\n         $TQE\n         $SJB\n         $JCT\n         PRINT ON\n         EJECT ,\n*---------------------------------------------------------------------*\n*        WORK AREA DSECT                                              *\n*---------------------------------------------------------------------*\n         SPACE ,\nWKAREA   DSECT\nSAVE     DS    18F                     SAVE AREA\nDSN      DS    CL44                    DSN FOR PASSWORD\nCURJBNM  DS    CL8                     JOBNAME\nCURJBNLN DS    H                       JOBNAME LENGTH\nCURASID  DS    F                       ASID\nPSWDENT  DS    CL(PSWDMSGL)\n         DS    CL88                    ROOM TO EXPAND ENTRY\nPSWDRPLY DS    CL8                     PASSWORD REPLY\nWTOAREA  DS    CL128                   AREA FOR SVC 34\nWKAREAL  EQU   *-WKAREA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEBCOPY": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GIBSON"}, "text": "//IEBCOPY JOB   TS,GIBSON,MSGCLASS=X,CLASS=Y,TYPRUN=HOLD\n//STEP1  EXEC   PGM=IEBCOPY\n//SYSPRINT DD SYSOUT=*\n//INDD     DD  DSN=GIBSON.JES2.EXITLIB,DISP=SHR\n//OUTDD    DD  DSN=GIBSON.JES2.EXITLIB,UNIT=TAPE,VOL=SER=LLBCBT,\n//         DISP=(NEW,KEEP),LABEL=(1,SL,EXPDT=98000)\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSIN    DD  *\n COPY INDD=INDD,OUTDD=OUTDD\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEEC3PO": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x04u\\x04u\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 1141, "newlines": 1141, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'BUILD R2D2 TABLE  -    IEEC3PO  '\n         PRINT  GEN\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FUNCTION:  THIS PROGRAM BUILDS A TABLE IN CSA  FOR THE WTO   *\n*              EXIT IEAVMXIT, WHICH INCLUDES IEECR2D2. IT RESPOND TO  *\n*              A WTOR OR ISSUE COMMANDS KEYED OFF A WTO.              *\n*                                                                     *\n*        ENTRY:  IEEC3PO                                              *\n*                                                                     *\n*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *\n*                                                                     *\n*        INPUT:  NONE                                                 *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*    MACRO DEFINITIONS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&LABEL   ERRMSG   &RC=,&TXT1=,&TXT2=,&TXT3=,&MSGNUM=\n         LCLA  &LTXT1,&LTXT2,&LTXT3\n.*\n.* CHECK PARAMETERS\n.*\n.RCCHK1  AIF   (T'&RC NE 'O').RCCHK9\n         MNOTE 8,'* * * ERROR * * * RC NOT SPECIFIED'\n         MEXIT\n.RCCHK9  ANOP\n.NMCHK1  AIF   (T'&MSGNUM NE 'O').NMCHK2\n         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT SPECIFIED'\n         MEXIT\n.NMCHK2  AIF   (K'&MSGNUM EQ 4).NMCHK9\n         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT 5 CHARACTERS'\n         MEXIT\n.NMCHK9  ANOP\n.TX1CHK1 AIF   (T'&TXT1 NE 'O').TX1CHK9\n         MNOTE 8,'* * * ERROR * * * TXT1 NOT SPECIFIED'\n         MEXIT\n.TX1CHK9 ANOP\n.TX2CHK1 AIF   (T'&TXT2 NE 'O').TX2CHK9\n         AIF   (T'&TXT3 EQ 'O').TX2CHK9\n         MNOTE 8,'* * * ERROR * * * TXT3 WAS SPECIFIED BUT NOT TXT2'\n         MEXIT\n.TX2CHK9 ANOP\n.*\n.* SET LENGTHS\n.*\n&LTXT1   SETA  K'&TXT1-2\n&LTXT2   SETA  K'&TXT2-2\n&LTXT3   SETA  K'&TXT3-2\n.*\n.* COMMAND\n.*\n&LABEL   DC   F'&RC'\n         DC   CL5'&MSGNUM'\n         DC   AL1(&LTXT1)\n         DC   C&TXT1\n         AIF   (T'&TXT2 EQ 'O').OUT\n         DC   AL1(&LTXT2)\n         DC   C&TXT2\n         AIF   (T'&TXT3 EQ 'O').OUT\n         DC   AL1(&LTXT3)\n         DC   C&TXT3\n.OUT     ANOP\n         DC   AL1(0)\n         MEND\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        START THE PROGRAM                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nIEEC3PO  CSECT\n         SAVE  (14,12),,'IEEC3PO,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING IEEC3PO,R12,R11         REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         GETMAIN R,LV=WKAREAL,SP=250   GET CORE FROM SP=250\n         ST    R13,SAVE+4-WKAREA(,R1)  CHAIN ...\n         ST    R1,8(,R13)              ...  SAVEAREAS\n         LR    R10,R1                  PUT SAVE AREA ADDRESS INTO R13\n         L     R1,24(,R13)             RELOAD PARM REG.\n         USING WKAREA,R10              GET ADDRESSABILITY\n         LA    R13,SAVE                LOAD SAVE AREA ADDRESS INTO R13\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS PARM                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R1,0(,R1)               POINT TO PARM\n         CLC   0(2,R1),=H'0'           NO PARM SPECIFIED ?\n         BE    DODCBS                  GO DO DCB S\n         CLC   0(2,R1),=H'6'           6 CHARS ?\n         BNE   DODCBS                  NO, GO DO DCB S\n         CLC   =CL6'VERIFY',2(R1)      IS IT VERIFY ?\n         BNE   DODCBS                  NO, BR TO DO DCBS\n         OI    FLAGS3,TSTFLG           SET TEST FLAG\n         B     DODCBS                  B DO DCB S\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET UP DCB'S                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDODCBS   DS    0H\n         MVC   INPUT(INPUTL),INPUTC        SET UP SYSIN DCB\n         MVC   OUTPUT(OUTPUTL),OUTPUTC     SET UP SYSOUT DCB\n         MVC   OPENIN(OPENINL),OPENINC     SET UP OPEN FOR SYSIN\n         MVC   OPENOUT(OPENOUTL),OPENOUTC  SET UP OPEN FOR SYSOUT\n         MVC   CLOSIN(CLOSINL),CLOSINC     SET UP CLOSE FOR SYSIN\n         MVC   CLOSOUT(CLOSOUTL),CLOSOUTC  SET UP CLOSE FOR SYSOUT\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        GET INPUT                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCMDGETIN DS    0H\n         LA    R2,OUTPUT           POINT TO OUTPUT DCB\n         OPEN  ((2)),MF=(E,OPENOUT) OPEN OUTPUT\n         TM    OUTPUT+48,X'10'     DID OUTPUT OPEN\n         BZ    OUTERR              NO - BRANCH TO PUT OUT ERROR MSG\n         LA    R2,INPUT            POINT TO INPUT DCB\n         OPEN  ((2)),MF=(E,OPENIN) OPEN INPUT\n         TM    INPUT+48,X'10'      DID IT OPEN\n         BZ    INERR               NO, BRANCH TO PUT OUT ERROR MSG\n         ZAP   CMDCOUNT,=P'0'      CLEAR COUTER\n         SPACE ,\nCMDGET   DS    0H\n         XC    COLCOUNT,COLCOUNT   CLEAR COL COUNT FOR CONTINUATIONS\n         SPACE ,\nCMDGET1  DS    0H\n         CLI   EOD,X'FF'           REACHED END OF INPUT ?\n         BE    MOVTAB              YES, BRANCH TO MOV TABLE TO CSA\n         GET   INPUT               READ RECORD FROM SYSIN\n         SPACE ,\nCMDOUT   DS    0H\n         MVI   OUTBUF,C' '         CLEAR OUTPUT...\n         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ... BUFFER\n         MVC   OUTCMD(80),0(R1)    MOVE CMD TO OUTPUT\n         LR    R4,R1 SAVE INPUT RECORD POINTER\n         PUT   OUTPUT,OUTBUF       PUT MSG TO OUTPUT FILE\n         NI    FLAGS2,255-CONT     ASSUME NOT CONT AND CLEAR CONT FLAG\n         CLI   71(R4),C' '         CONTINUATION ?\n         BE    SKPSET              NO, SKIP SETTING CONT FLAG\n         OI    FLAGS2,CONT         YES, SET CONT FLAG\n         SPACE ,\nSKPSET   DS    0H\n         LH    R2,COLCOUNT         LOAD COL COUNT\n         LA    R3,CMDTXT(R2)       POINT R3 INTO CMDTXT TO MOVE INPUT\n         LA    R2,71(,R2)          LOAD NEW COLCOUNT INTO R2\n         STH   R2,COLCOUNT         STORE NEW COL COUNT\n         MVC   0(71,R3),0(R4)      MOVE INPUT INTO BUFFER\n         C     R2,=F'1729'         OVER MAX ?\n         BL    CONTOK1             NO, SKIP PUTTING OUT ERR MSG\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,CONTERR1         ... OUT ...\n         ST    R1,ERRPRM3          ...... ERROR ...\n         LA    R1,ERRPRM1          ......... MESSAGE ...\n         BAL   R14,ERRPUT\n         SPACE ,\nCONTOK1  DS    0H\n         TM    FLAGS2,CONT         THIS A CONT ?\n         BO    CMDGET1             YES, GET NEXT RECORD\n         B     CALLSCAN            NO, BRANCH TO CALL SCAN ROUTINE\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CALL SCAN ROUTINE                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCALLSCAN DS    0H\n         LA    R4,CLRSTRT          CLEAR\n         LA    R5,CLRLEN           STORAGE\n         LA    R6,CLRSTRT-1        ...\n         SLR   R7,R7               ...\n         MVCL  R4,R6               ...\n         SPACE ,\n         AP    CMDCOUNT,=P'1'      ADD ONE TO CMD COUNT\n         LA    R0,CMDBUF           GET ADDR OF CHAR STRING\n         LA    R1,KEYTBL           KEYWORD TABLE ADDRESS\n         CALL  KEYSCAN             SCAN\n         STM   R0,R1,ERRPRM1       SAVE FOR POSSIBLE ERROR\n         B     SCANERR(R15)        SET ERROR MSG\n         SPACE 1\nSCANERR  DS    0H\n         B     CHKMSGID            NO ERRS BR TO CHK MSG ID SPECIFIED\n         B     SCANER4             VALUE MISSING FOR KEYWORD\n         B     SCANER8             INVALID KEYWORD\n         B     SCANER12            TOO MANY/FEW VALUES FOR KEYWORD\n         B     CMDGET              NULL INPUT\n         B     SCANER20            INVALID VALUE FOR KEYWORD\n         B     SCANER24            VALUE TOO LONG FOR KEYWORD\n         B     SCANER28            KEYWORD SPECIFIED TWICE\n         B     SCANER32            NUMERIC VALUE TOO HIGH\n         B     SCANER36            KEYWORD SPECIFIED MUTUALLY EXC\n         B     SCANER40            KEYWORD SPECIFIED TOO MANY TIMES\n         B     SCANER44            VALUE SPECIFIED TWICE FOR KEYWORD\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET AND PUT ERROR MSG                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nSCANER4  DS    0H\n         LA    R1,ERRSCN4\n         B     SCANER99\n         SPACE 1\nSCANER8  DS    0H\n         LA    R1,ERRSCN8\n         B     SCANER99\n         SPACE 1\nSCANER12 DS    0H\n         LA    R1,ERRSCN12\n         B     SCANER99\n         SPACE 1\nSCANER16 DS    0H\n         LA    R1,ERRSCN16\n         B     SCANER99\n         SPACE 1\nSCANER20 DS    0H\n         LA    R1,ERRSCN20\n         B     SCANER99\n         SPACE 1\nSCANER24 DS    0H\n         LA    R1,ERRSCN24\n         B     SCANER99\n         SPACE 1\nSCANER28 DS    0H\n         LA    R1,ERRSCN28\n         B     SCANER99\n         SPACE 1\nSCANER32 DS    0H\n         LA    R1,ERRSCN32\n         B     SCANER99\n         SPACE 1\nSCANER36 DS    0H\n         LA    R1,ERRSCN36\n         B     SCANER99\n         SPACE 1\nSCANER40 DS    0H\n         LA    R1,ERRSCN40\n         B     SCANER99\n         SPACE 1\nSCANER44 DS    0H\n         LA    R1,ERRSCN44\n         B     SCANER99\n         SPACE 1\nSCANER99 DS    0H\n         ST    R1,ERRPRM3\n         LA    R1,ERRPRM1\n         BAL   R14,ERRPUT\n         B     CMDGET\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MAKE SURE MSG ID OR DELETE SPECIFIED                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCHKMSGID DS    0H\n         TM    FLAGS1,DELFLG       DELETE SPECIFIED ?\n         BO    GOTID               YES, BR, ITS OK\n         TM    FLAGS2,IDFLG        MESSAGE ID SPECIFIED ?\n         BO    GOTID               YES, BR, ITS OK\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,ERRID            ERR ...\n         ST    R1,ERRPRM3          MSG ...\n         LA    R1,ERRPRM1          ...\n         BAL   R14,ERRPUT          ...\n         B     CMDGET              ...\n         SPACE ,\nGOTID    DS    0H\n         CLC   RETCODE,=F'4'       IS RETCODE GREATER THAN 4 ?\n         BH    CMDGET              YES, GET NEXT, DONT SET TABLE\n         B     MOVEENT             BR TO MOVE ENT INTO CMDBLK\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET UP CMD BLOCK                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMOVEENT  DS    0H\n         LA    R2,ENTHDRLN         ADD HDR LEN TO TOTAL ENT LEN\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,MSGID+1          GET LEN OF MSGID\n         LA    R2,1(R3,R2)         ADD TO TOTAL ENT LEN\n         TM    FLAGS1,CMMDFLG      CMD SPECIFIED ?\n         BZ    NOCMD               NO, SKIP ADDING CMD LEN\n         L     R3,CMDLEN           LOAD CMD LEN\n         LA    R2,1(R3,R2)         ADD TO TOTAL LEN\n         L     R1,=A(CMBLKLEN-(CMBLK1ST-CMBLK)) GET MAX LEN\n         CR    R2,R1               TOO HIGH ?\n         BNH   NOCMD               NO, SKIP\n         EX    R0,*                YES, ABEND\n         SPACE ,\nNOCMD    DS    0H\n         L     R9,BLKPTRL          POINT TO LAST CMDBLK\n         LTR   R9,R9               IS THERE ONE ?\n         BZ    GETCMBLK            NO, GO GET ONE\n         USING CMBLK,R9            SET ADDRESSABILITY\n         L     R4,CMBLKNXT         POINT TO NXT BLK ENTRY\n         LA    R4,0(R2,R4)         ADD ENTRY LEN\n         C     R4,CMBLKEND         PAST END ?\n         BL    SKIPGET             NO, SKIP GETTING NEW BLK\n         SPACE ,\nGETCMBLK DS    0H\n         GETMAIN R,LV=CMBLKLEN,SP=250   GET CORE FROM SP=250\n         LTR   R9,R9               IS THIS FORST BLK ?\n         BNZ   NOTFIRST            NO, SKIP\n         LR    R9,R1               LOAD POINTER TO NEW BLK\n         ST    R9,BLKPTRF          STORE ADD IN FIRST BLK PTR\n         XC    CMBLKFWD,CMBLKFWD   CLEAR FWD POINTER\n         XC    CMBLKBCK,CMBLKBCK   CLEAR BACKWD POINTER\n         B     SKPCHAIN            AND SKIP CHAINING\n         SPACE ,\nNOTFIRST DS    0H\n         ST    R1,CMBLKFWD         CHAIN FWD\n         ST    R9,CMBLKBCK-CMBLK(,R1) CHAIN BACK\n         LR    R9,R1               POINT TO NEW BLK\n         SPACE ,\nSKPCHAIN DS    0H\n         ST    R9,BLKPTRL          SAVE PTR TO LAST BLK\n         L     R1,=A(CMBLKLEN)     GET LENGTH OF BLK\n         LA    R1,0(R1,R9)         ADD TO START\n         ST    R1,CMBLKEND         STORE END OF BLK\n         LA    R4,CMBLK1ST         GET POINTER TO FISRT ENT\n         ST    R4,CMBLKNXT         SAVE AS NEXT AVAILABLE ENT\n         LA    R4,0(R2,R4)\n         SPACE ,\nSKIPGET  DS    0H\n         L     R8,CMBLKNXT         GET POINTER TO NEXT AVAIL ENT\n         ST    R4,CMBLKNXT         SAVE NEW PTR\n         USING MSGENT,R8\n         STH   R2,ENTLEN           STORE ENT LEN\n         MVC   ENTDESC,DESCFLGS    MOVE DESC FLAGS\n         MVC   ENTROUT,ROUTFLGS    MOVE ROUT FLAGS\n         MVC   ENTFLAG,FLAGS1      MOVE FLAGS\n         MVC   ENTJBNM,=CL8' '     CLEAR JOB NAME\n         TM    FLAGS1,JBNMFLG      WAS JOBNAME SPECIFIED ?\n         BNO   NOJBNM              NO, SKIP SETTING JOB NAME\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,JOBNAME+1        GET LENGTH OF JOBNAME\n         BCTR  R3,0                LESS ONE FOR EX\n         EX    R3,JOBNMMVC         MOVE JOBNAME\n         SPACE ,\nNOJBNM   DS    0H\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,MSGID+1          GET MSG ID LEN\n         EX    R3,MSGIDMVC         MOV MSGID PLUS LEN\n         TM    FLAGS1,CMMDFLG      WAS CMD SPECIFIED ?\n         BZ    NOCMDMOV            NO, SKIP CMD MOV\n         LA    R4,ENTLID+1(R3)     POINT TO AREA TO MOVE CMD\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,CMDNM            GET NUMBER OF CMDS\n         STC   R3,0(,R4)           STORE\n         LA    R4,1(,R4)           BUMP PTR UP ONE\n         L     R5,CMDLEN           GET CMD LEN\n         LA    R6,CMD1             POINT TO CMDS\n         LR    R7,R5               SET LENGTH OF TARGET AREA\n         MVCL  R4,R6               MOVE CMDS\n         SPACE ,\nNOCMDMOV DS    0H\n         B     CMDGET\n         SPACE ,\nJOBNMMVC MVC   ENTJBNM(*-*),JOBNAME+2\nMSGIDMVC MVC   ENTLID(*-*),MSGID+1\n         DROP  R8\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        END OF DATA ROUTINE                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDEOD   DS    0H\n         MVI   EOD,X'FF'           SET EOD FLAG\n         LA    R2,INPUT            POINT TO INPUT DCB\n         CLOSE ((2)),MF=(E,CLOSIN) CLOSE INPUT\n         TM    FLAGS2,CONT         CONTINUATION ON LAST CARD ?\n         BNO   CMDEOD1             NO, SKIP\n         XC    ERRPRM1(8),ERRPRM1  PUT ...\n         LA    R1,CONTERR2         ERR ...\n         ST    R1,ERRPRM3          MSG ...\n         LA    R1,ERRPRM1          ...\n         BAL   R14,ERRPUT          ...\n         B     CALLSCAN            ...\n         SPACE ,\nCMDEOD1  DS    0H\n         B     MOVTAB              BR, TO MOVE TABLE TO CSA\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MOVE TABLE INTO CSA                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMOVTAB   DS    0H\n         TM    FLAGS3,TSTFLG       TEST FLAG ON\n         BO    RETURN              YES, BRANCH TO RETURN\n         CLC   RETCODE,=F'4'       RET CODE GREATER THAN 4 ?\n         BH    RETURN              YES, ALL DONE\n         TM    FLAGS1,DELFLG       DELETE REQUESTED ?\n         BO    DELETE              YES, GO DO DELETE\n         SLR   R0,R0               CLEAR R0 FOR TOTAL COUNT\n         USING CMBLK,R4\n         L     R4,BLKPTRF          POINT TO FIRST CMDBLK\n         SPACE ,\nCNTLP    DS    0H\n         L     R5,CMBLKNXT         POINT R5 TO NEXT CMDBLK\n         LA    R6,CMBLK1ST         POINT R6 TO FIRST ENTRY\n         SR    R5,R6               GET LENGTH OF BLK\n         AR    R0,R5               ADD TO TOTAL LEN\n         L     R4,CMBLKFWD         POINT TO NEXT BLK\n         LTR   R4,R4               IS THERE ONE ?\n         BNZ   CNTLP               YES, LOOP\n         DROP  R4\n         LA    R6,C3POHDRL         GET LEN OF C3PO CSA TABLE HEADER\n         AR    R0,R6               ADD TO TOTAL LEN\n         LR    R2,R0               SAVE IN R2\n         LR    R3,R0               AND R3\n         GETMAIN R,LV=(2),SP=241 SP=241 GET CSA\n         LR    R8,R1               PUT ADDR INTO R8\n         USING C3POTABL,R8\n         MVC   C3POID,=CL8'C3POTABL' SET C3PO ID\n         L     R5,CVTPTR           POINT R5 TO CVT\n         L     R5,CVTUSER-CVT(,R5) LOAD R5 FROM CVTUSER\n         ST    R5,C3PONXT          CHAIN NEW TABLE IN FRONT OF OLD\n         LA    R5,C3POENT          LOAD POINTER TO FISRT ENT\n         ST    R5,C3PO1ST          ST POINTER TO FISRT ENT\n         LA    R5,C3POTABL         LOAD PTR TO TABLE\n         AR    R5,R3               ADD LEN OF TABLE\n         ST    R5,C3POEND          STO PTR TO END OF TABLE\n         ST    R3,C3POLEN          ST LEN OF TABLE\n         XC    C3PORSV,C3PORSV     CLEAR RESV\n         LA    R6,C3POENT          POINT TO FIRST ENT\n         USING CMBLK,R3\n         L     R3,BLKPTRF          LOAD ADDR OF FISRT CMD BLK\n         SPACE ,\nMOVLOOP  DS    0H\n         LA    R4,CMBLK1ST         LOAD ADDR OF FIRST ENT IN CMD BLK\n         L     R5,CMBLKNXT         LOAD POINTER TO NEXT AVAIL ENT\n         SR    R5,R4               GET LEN OF CMD BLK ENTRIES\n         LR    R7,R5               AND SET AS TARGET LEN\n         MVCL  R6,R4               MOVE CMD ENTER INTO CSA\n         L     R3,CMBLKFWD         POINT TO NEXT CMDBLK\n         LTR   R3,R3               IS THERE ONE ?\n         BNZ   MOVLOOP             YES, LOOP\n         L     R4,CVTPTR               LOAD ADDRESS OF CVT\n         USING CVT,R4\n         L     R2,CVTUSER              LOAD OLD CONTENTS OF CVTUSER\n         MODESET KEY=ZERO\n         ST    R8,CVTUSER              SET PTR TO NEW C3PO TABLE\n         DROP  R4\n         MODESET KEY=NZERO\n         B     RETURN                  RETURN\n         DROP  R8\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FREEMAIN OLD R2D2 TABLE                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDELETE   DS    0H\n         L     R4,CVTPTR           GET POINTER TO ...\n         L     R2,CVTUSER-CVT(,R4) ... C3PO TABLE\n         USING C3POTABL,R2\n         LR    R3,R2               SAVE POINTER\n         SPACE ,\nDELLOOP  DS    0H\n         LTR   R2,R3               DOES TABLE EXIST ?\n         BZ    DELLPEND            NO, ALL DONE\n         L     R3,C3PONXT          YES, LOAD POINTER TO NEXT TABLE\n         CLC   C3POID,=CL8'C3POTABL' IS IT AN R2D2 TABLE ?\n         BNE   DELXIT              NO, EXIT SOMETHING NOT RIGHT\n         LR    R1,R2               LOAD FREEMAIN ADDRESS\n         L     R2,C3POLEN          LOAD FREEMAIN LENGTH\n         DROP  R2\n         LTR   R2,R2               IS LENGTH ZERO ?\n         BZ    DELXIT              YES, DON'T FREE IT\n         FREEMAIN R,A=(1),LV=(2),SP=241 DO FREEMAIN\n         B     DELLOOP             LOOP TO FREE NEXT TABLE\n         SPACE ,\nDELLPEND DS    0H\n         MODESET KEY=ZERO\n         XC    CVTUSER-CVT(4,R4),CVTUSER-CVT(R4) CLEAR PTR IN CVT\n         MODESET KEY=NZERO\n         SPACE ,\nDELXIT   DS    0H\n         B     RETURN              RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *\n*        OUR GOTTEN CORE FROM SP=250                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nRETURN   DS    0H\n         LA    R2,OUTPUT           POINT TO OUTPUT DCB\n         CLOSE ((2)),MF=(E,CLOSOUT) CLOSE OUTPUT\n         L     R9,BLKPTRF          GET POINTER TO FIRST CMD BLK\n         SPACE ,\nFREELP   DS    0H\n         LTR   R9,R9               IS THER ONE ?\n         BZ    SKIPFREE            NO, THEN DONT FREE IT\n         USING CMBLK,R9\n         LR    R1,R9               LOAD POINTER TO CMD BLK\n         L     R9,CMBLKFWD         LOAD POINTER TO NEXT CMD BLK\n         FREEMAIN R,A=(1),LV=CMBLKLEN,SP=250 DO FREEMAIN\n         B     FREELP              LOOP\n         SPACE 2\nSKIPFREE DS    0H\n         L     R2,RETCODE          LOAD RETURN CODE\n         LR    R1,R13              GET AREA ADDRESS\n         L     R13,SAVE+4          RELOAD SAVE AREA ADDRESS\n         FREEMAIN R,A=(1),LV=WKAREAL,SP=250 DO FREEMAIN\n         LR    R15,R2              LOAD RETCODE INTO R15\n         RETURN (14,12),RC=(15)    RETURN\n         DROP  R9\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DISASTEROUS ERRORS                                           *\n*        WTO ERROR MSG AND RETURN WITH CODE 12                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nOUTERR   DS    0H\n         WTO   'C3PO0901D ERROR OPENING OUTPUT FILE, EXECUTION ENDS',  X\n               ROUTCDE=(12)\n         MVC   RETCODE,=F'12'      SET ERROR CODE\n         B     RETURN\n         SPACE ,\nINERR    DS    0H\n         WTO   'C3PO0902D ERROR OPENING INPUT FILE, EXECUTION ENDS',   X\n               ROUTCDE=(12)\n         MVC   RETCODE,=F'12'      SET ERROR CODE\n         B     RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR MESSAGE SUBROUTINE                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nERRPUT   DS    0H\n         STM   R14,R12,SAVAREA2    SAVE REGISTERS\n         L     R2,8(,R1)           LOAD POINTER TO ERR MSG BLK\n         L     R3,0(,R2)           LOAD RETURN CODE\n         LA    R4,4(,R2)           POINT TO MSG NUM\n         LA    R2,9(,R2)           POINT TO FIRST ERR MSG TXT\n         C     R3,RETCODE          IS RETCODE GREATER THAN CURNT ?\n         BNH   ERRSKP              NO, SKIP RET CODE SET\n         ST    R3,RETCODE          ST NEW RETCODE\n         SPACE ,\nERRSKP   DS    0H\n         MVI   OUTBUF,C' '         CLEAR OUTPUT BUFFER ...\n         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ...\n         MVC   OUTMSG(4),=C'C3PO'  SET MSG HDR\n         MVC   OUTMSG+4(4),0(R4)   SET MSG NUM\n         MVI   OUTMSG+8,C'I'       SET MSG TYPE AS INFORMATIONAL\n         C     R3,=F'4'            IS RETCODE < 4 ?\n         BL    ERRSKP1             YES, SKIP\n         MVI   OUTMSG+8,C'W'       SET MSG TYPE AS WARNING\n         C     R3,=F'8'            IS RETCODE < 8 ?\n         BL    ERRSKP1             YES, SKIP\n         MVI   OUTMSG+8,C'E'       SET MSG TYPE AS ERROR\n         C     R3,=F'12'           IS RETCODE < 12 ?\n         BL    ERRSKP1             YES SKIP\n         MVI   OUTMSG+8,C'D'       SET MSG TYPE AS DISASTOR\n         SPACE ,\nERRSKP1  DS    0H\n         SLR   R5,R5               CLEAR OFFSET\n         LA    R6,OUTCMD           POINT TO OUTCMD\n         SPACE ,\nERRLP    DS    0H\n         ICM   R3,B'0001',0(R2)    LOAD TXT LEN INTO R3\n         BZ    ERRPUTIT            IF ZERO DONE\n         LA    R6,OUTCMD(R5)       LOAD POINTER INTO BUFFER\n         BCTR  R3,0                BUMP LEN BACK ONE FOR EX\n         EX    R3,ERRMVC1          MOVE TEXT\n         LA    R3,1(,R3)           ADD BACK ONE\n         LA    R5,0(R3,R5)         BUMP OFFSET\n         LA    R2,1(R3,R2)         POINT TO NEXT TEXT STR\n         ICM   R3,B'0001',0(R2)    LOAD LEN\n         BZ    ERRPUTIT            DONE IF ZERO\n         SPACE ,\n         L     R7,0(,R1)           POINT TO FIRST DYNAMIC\n         LA    R1,4(,R1)           POINT TO NEXT DYNAMIC\n         LA    R8,8                LOAD MAX LEN\n         LA    R4,ERRWORK          POINT TO ERR WORK\n         SPACE ,\nERRLP2   DS    0H\n         CLI   0(R7),C','          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C' '          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C')'          END OF STR ?\n         BE    ERRSKP2             YES\n         CLI   0(R7),C'='          END OF STR ?\n         BE    ERRSKP2             YES\n         MVC   0(1,R4),0(R7)       MOVE BYTE\n         LA    R4,1(,R4)           BUMP TARGET POINTER\n         LA    R7,1(,R7)           BUMP SOURCE POINTER\n         BCT   R8,ERRLP2           LOOP\n         SPACE ,\nERRSKP2  DS    0H\n         LA    R4,8                LOAD MAX LEN\n         SR    R4,R8               GET LEN OF STR\n         BNP   ERRSKP3             NONE END\n         LA    R6,OUTCMD(R5)       POINT INTO OUTCMD\n         BCTR  R4,0                LESS ONE FOR EX\n         EX    R4,ERRMVC2          MOVE STR\n         LA    R4,1(,R4)           ADD BACK\n         LA    R5,0(R4,R5)         SET OFFSET POINTER\n         SPACE ,\nERRSKP3  DS    0H\n         B     ERRLP               LOOP\n         SPACE ,\nERRPUTIT DS    0H\n         PUT   OUTPUT,OUTBUF       PUT STR\n         LM    R14,R12,SAVAREA2    RELOAD REGS\n         BR    R14                 RETURN\n         SPACE ,\nERRMVC1  MVC   0(*-*,R6),1(R2)\nERRMVC2  MVC   0(*-*,R6),ERRWORK\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR MESSAGES                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCONTERR1 ERRMSG RC=8,TXT1='MORE THAN 25 CONTINUATION CARDS',           X\n               MSGNUM=0001\nCONTERR2 ERRMSG RC=4,TXT1='CONTINUATION SPECIFIED ON LAST CARD',       X\n               MSGNUM=0002\nERRSCN4  ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': NOT SPECIFIED',                 X\n               MSGNUM=0003\nERRSCN8  ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': INVALID',                                       X\n               MSGNUM=0004\nERRSCN12 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': TOO MANY OR TOO FEW VALUES SPECIFIED',          X\n               MSGNUM=0005\nERRSCN16 ERRMSG RC=8,TXT1='LOGIC ERROR',                               X\n               MSGNUM=0991\nERRSCN20 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': INVALID',                       X\n               MSGNUM=0006\nERRSCN24 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': TOO LONG',                      X\n               MSGNUM=0007\nERRSCN28 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': SPECIFIED TWICE',                               X\n               MSGNUM=0008\nERRSCN32 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': GREATER THAN 16',               X\n               MSGNUM=0009\nERRSCN36 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': MUTUALLY EXCLUSIVE WITH OTHER SPECIFIED KEYWORD'X\n               ,MSGNUM=0010\nERRSCN40 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': SPECIFIED TOO MANY TIMES',                      X\n               MSGNUM=0011\nERRSCN44 ERRMSG RC=8,TXT1='KEYWORD ',                                  X\n               TXT2=': VALUE ',TXT3=': SPECIFIED TWICE',               X\n               MSGNUM=0012\nERRID    ERRMSG RC=8,TXT1='KEYWORD ID: NOT SPECIFIED',                 X\n               MSGNUM=0013\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        KEYWORD CHECK SUBROUTINES                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK MESSAGE ID                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nIDCHK    DS    0H\n         SAVE  (14,12),,IDCHK      SAVE REGS\n         TM    FLAGS2,IDFLG        ID ALREADY SPECIFIED ?\n         BO    IDCRET28            YES, ERROR\n         OI    FLAGS2,IDFLG        SET ID FLAG\n         B     IDCRET0             BR TO RET CODE 0\n         SPACE ,\nIDCRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     IDCRET\n         SPACE ,\nIDCRET28 DS    0H\n         LA    R15,28              SET RETCODE TO 28\n         B     IDCRET\n         SPACE ,\nIDCRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK JOBNAME                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nJOBCHK   DS    0H\n         SAVE  (14,12),,JOBCHK     SAVE REGS\n         TM    FLAGS1,JBNMFLG      JOBNAME ALREADY SPECIFIED ?\n         BO    JOBRET28            YES, ERROR\n         OI    FLAGS1,JBNMFLG      SET JOBNAME FLAG\n         B     JOBRET0             BR\n         SPACE ,\nJOBRET0  DS    0H\n         SLR   R15,R15             SET RET CODE TO ZERO\n         B     JOBRET\n         SPACE ,\nJOBRET28 DS   0H\n         LA    R15,28              SET RETCODE TO 28\n         B     JOBRET\n         SPACE ,\nJOBRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK ROUTE                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nROUCHK   DS    0H\n         SAVE  (14,12),,ROUCHK     SAVE REGS\n         TM    FLAGS1,ROUTFLG      ROUT ALREADY SPECIFIED ?\n         BO    ROURET28            YES ERROR\n         OI    FLAGS1,ROUTFLG      SET ROUT FLAG\n         SPACE 1\n         LR    R8,R0               POINT TO STR AREA\n         SLR   R4,R4               CLEAR R4 FOR IC\n         IC    R4,0(,R8)           GET NUMBER OF ENTRIES\n         SLR   R5,R5               CLEAR R5\n         SPACE 1\nROULP    DS    0H\n         LA    R8,1(R5,R8)         POINT TO ROU PARAMETER\n         LA    R3,1(,R8)           POINT R3 TO FIRST\n         CLI   0(R8),X'02'         IS LEN > 2 ?\n         BH    ROURET32            LESS ERROR\n         ICM   R5,B'0001',0(R8)    LOAD LEN\n         BZ    ROUNULL             END IF ZERO\n         BCTR  R5,0                LESS ONE FOR EX\n         EX    R5,ROUPACK          PACK IT\n         LA    R5,1(,R5)           ADD BACK\n         CVB   R2,WRKDWRD          CONVERT TO BIN\n         C     R2,=F'16'           IS IT > 16 ?\n         BH    ROURET32            YES, ERROR\n         BCTR  R2,0                SUB ONE FOR SHIFT\n         ICM   R6,B'1111',=X'00008000' SET \"MASK\"  ...\n         SLR   R7,R7               ...\n         SRL   R6,0(R2)            MOVE OVER ...\n         SRDL  R6,8                ...\n         SRL   R7,24               ...\n         EX    R6,ROUTM1           ALREADY SPECIFIED ?\n         BO    ROURET44            YES, ERROR\n         EX    R7,ROUTM2           ALREADY SPECIFIED ?\n         BO    ROURET44            YES, ERROR\n         EX    R6,ROUOI1           SET BIT\n         EX    R7,ROUOI2           SET BIT\n         SPACE ,\nROUNULL  DS    0H\n         BCT   R4,ROULP            LOOP\n         SPACE 1\n         B     ROURET0             ALL DONE\n         SPACE ,\nROURET0  DS    0H\n         SLR   R15,R15             SET RET CODE TO 1\n         B     ROURET\n         SPACE ,\nROURET28 DS    0H\n         LA    R15,28              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET32 DS    0H\n         LA    R15,32              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET44 DS    0H\n         LA    R15,44              SET ERROR CODE\n         B     ROURET\n         SPACE ,\nROURET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nROUPACK  PACK  WRKDWRD(8),0(*-*,R3)\nROUTM1   TM    ROUTFLGS,*-*\nROUTM2   TM    ROUTFLGS+1,*-*\nROUOI1   OI    ROUTFLGS,*-*\nROUOI2   OI    ROUTFLGS+1,*-*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK DESC                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDESCHK   DS    0H\n         SAVE  (14,12),,DESCHK     SAVE REGS\n         TM    FLAGS1,DESCFLG      DESC ALREADY SPECIFIED ?\n         BO    DESRET28            YES, ERROR\n         OI    FLAGS1,DESCFLG      SET DESC FLAG\n         SPACE 1\n         LR    R8,R0               POINT TO PARAM AREA\n         SLR   R4,R4               CLEAR R4\n         IC    R4,0(,R8)           LOAD NUMBER OF PARAMS\n         SLR   R5,R5               CLEAR R5\n         SPACE 1\nDESLP    DS    0H\n         LA    R8,1(R5,R8)         BUMP PARAM AREA POINTER\n         LA    R3,1(,R8)           POINT R3 TO PARAM\n         CLI   0(R8),X'02'         IS LEN > 2 ?\n         BH    DESRET32            YES, ERROR\n         ICM   R5,B'0001',0(R8)    LOAD LEN\n         BZ    DESNULL             BR IF ZERO\n         BCTR  R5,0                LESS ONE FOR EX\n         EX    R5,DESPACK          PACK\n         LA    R5,1(,R5)           ADD BACK\n         CVB   R2,WRKDWRD          CONVERT\n         C     R2,=F'16'           > 16 ?\n         BH    DESRET32            YES, ERROR\n         BCTR  R2,0                SUB ONE FOR MOVE\n         ICM   R6,B'1111',=X'00008000' SET MASK ...\n         SLR   R7,R7               ...\n         SRL   R6,0(R2)            SHIFT\n         SRDL  R6,8                ...\n         SRL   R7,24               ...\n         EX    R6,DESTM1           ALREADY ON ?\n         BO    DESRET44            YES, ERROR\n         EX    R7,DESTM2           ALREADY ON ?\n         BO    DESRET44            YES, ERROR\n         EX    R6,DESOI1           SET BIT\n         EX    R7,DESOI2           SET BIT\n         SPACE ,\nDESNULL  DS    0H\n         BCT   R4,DESLP            LOOP\n         SPACE 1\n         B     DESRET0             ALL DONE\n         SPACE ,\nDESRET0  DS    0H\n         SLR   R15,R15             SET RETCODE TO ZERO\n         B     DESRET\n         SPACE ,\nDESRET28 DS   0H\n         LA    R15,28              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET32 DS   0H\n         LA    R15,32              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET44 DS   0H\n         LA    R15,44              SET RET CODE\n         B     DESRET\n         SPACE ,\nDESRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nDESPACK  PACK  WRKDWRD(8),0(*-*,R3)\nDESTM1   TM    DESCFLGS,*-*\nDESTM2   TM    DESCFLGS+1,*-*\nDESOI1   OI    DESCFLGS,*-*\nDESOI2   OI    DESCFLGS+1,*-*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK COMMAND                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMDCHK   DS    0H\n         SAVE  (14,12),,CMDCHK     SAVE REGS\n         OI    FLAGS1,CMMDFLG      SET CMD FLAG\n         LA    R2,CMD1             POINT TO CMD AREA\n         LA    R3,8                MAX CMDS\n         SLR   R1,R1               CLEAR R1\n         SPACE ,\nCMDLP    DS    0H\n         CLI   0(R2),X'00'         ANY CMDS YET ?\n         BE    CMDMVC              NO, SKIP\n         IC    R1,0(,R2)           GET LEN\n         LA    R2,1(R1,R2)         POINT TO NEXT CMD\n         BCT   R3,CMDLP            LOOP\n         B     CMDRET40            ERROR, TOO MANY\n         SPACE ,\nCMDMVC   DS    0H\n         IC    R1,CMD+1            GET CMD LEN\n         EX    R1,CMDCHMVC         MOVE CMD PLUS LEN\n         L     R2,CMDLEN           LOAD TOTAL CMD LEN\n         LA    R2,1(R1,R2)         ADD LEN OF CRNT CMD\n         ST    R2,CMDLEN           ST CMDLEN\n         SLR   R3,R3               CLEAR R3 FOR IC\n         IC    R3,CMDNM            GET NUMBER OF CMDS\n         LA    R3,1(,R3)           ADD ONE\n         STC   R3,CMDNM            STORE\n         B     CMDRET0             RETURN CODE 0\n         SPACE ,\nCMDRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     CMDRET\n         SPACE ,\nCMDRET40 DS   0H\n         LA    R15,40              SET RET CODE\n         B     CMDRET\n         SPACE ,\nCMDRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         SPACE ,\nCMDCHMVC MVC   0(*-*,R2),CMD+1\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK DELETE                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nDELCHK   DS    0H\n         SAVE  (14,12),,DELCHK     SAVE REGS\n         TM    FLAGS1,DELFLG       DEL ALREADY SET\n         BO    DELRET28            YES, ERROR\n         TM    FLAGS1,B'11111111'  ANYTHING ELSE SET\n         BNZ   DELRET36            YES, ERROR\n         OI    FLAGS1,DELFLG       SET DEL FLAG\n         B     DELRET0             RETURN CODE 0\n         SPACE ,\nDELRET0  DS    0H\n         SLR   R15,R15             CLEAR RET CODE\n         B     DELRET\n         SPACE ,\nDELRET28 DS   0H\n         LA    R15,28              SET RET CODE\n         B     DELRET\n         SPACE ,\nDELRET36 DS   0H\n         LA    R15,36              SET RET CODE\n         B     DELRET\n         SPACE ,\nDELRET   DS    0H\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        KEYWORD TABLE                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKEYTBL   KEYT  'DELETE',(DELCHK),,,(0,0)\n         KEYT  'ID=',(IDCHK),MSGID,,,                                  X\n               LEN=(1,120)\n         KEYT  'JOBNAME=',(JOBCHK),JOBNAME,ALPHANUM,,                  X\n               LEN=(1,8)\n         KEYT  'ROUTCDE=',(ROUCHK),ROUTCDE,NUMERIC,(1,16),             X\n               LEN=(1,2)\n         KEYT  'DESC=',(DESCHK),DESC,NUMERIC,(1,16),                   X\n               LEN=(1,2)\n         KEYT  'CMD=',(CMDCHK),CMD,,,                                  X\n               LEN=(1,120),                                            X\n               END=YES\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        LITERAL POOL                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*                CONSTANTS AND EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PATCH AREA                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*                                                                     *\nOUTPUTC  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               RECFM=FBA,LRECL=133,BLKSIZE=13300\nOUTPUTL  EQU   *-OUTPUTC\nINPUTC   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD\nINPUTL   EQU   *-INPUTC\nOPENINC  OPEN  (,),MF=L\nOPENINL  EQU   *-OPENINC\nOPENOUTC OPEN  (,(OUTPUT)),MF=L\nOPENOUTL EQU   *-OPENOUTC\nCLOSINC  CLOSE (,),MF=L\nCLOSINL  EQU   *-CLOSINC\nCLOSOUTC CLOSE (,),MF=L\nCLOSOUTL EQU   *-CLOSOUTC\n         TITLE 'DSECTS USED BY IEEC3PO'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYSTEM DSECTS                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         PRINT OFF\n         CVT   DSECT=YES\n         PRINT ON\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CSA TABLE DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         C3POTABL\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        COMMAND BLOCK DSECT                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nCMBLK    DSECT\nCMBLKFWD DS    A\nCMBLKBCK DS    A\nCMBLKNXT DS    A\nCMBLKEND DS    A\nCMBLK1ST EQU   *\nCMBLKLEN EQU   4096\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        WORK AREA DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nWKAREA   DSECT\nSAVE     DS    18F                     SAVE AREA\nSAVAREA2 DS    18F                     SAVE AREA\nCLRSTRT  EQU   *\nMSGID    DS    CL122\nROUTCDE  DS    CL122\nDESC     DS    CL122\nJOBNAME  DS    CL10\nCMD      DS    CL122\nCMDLEN   DS    F\nCMDNM    DS    XL1\nCMD1     DS    8CL122\nFLAGS1   DS    X'00'\n*        BITS ARE DEFINED IN MESSAGE ENTRY DSECT IN ENTFLAG           *\nFLAGS2   DS    X'00'\nCONT     EQU   B'10000000'\nIDFLG    EQU   B'01000000'\nWRKDWRD  DS    D'0'\nWRKWRD1  DS    F'0'\nWRKWRD2  DS    F'0'\nROUTFLGS DS    XL2'0000'\nDESCFLGS DS    XL2'0000'\nCLRLEN   EQU   *-CLRSTRT\nFLAGS3   DS    X'00'\nTSTFLG   EQU   B'10000000'\nERRPRM1  DS    F\nERRPRM2  DS    F\nERRPRM3  DS    F\nERRWORK  DS    D\nEOD      DS    X\nBLKPTRF  DS    A\nBLKPTRL  DS    A\nRETCODE  DS    F\nOUTBUF   DS    0CL133\nOUTCC    DS    CL1\nOUTMSG   DS    CL10\nOUTCMD   DS    CL122\nOPENIN   OPEN  (,),MF=L\nOPENOUT  OPEN  (,(OUTPUT)),MF=L\nCLOSIN   CLOSE (,),MF=L\nCLOSOUT  CLOSE (,),MF=L\nOUTPUT   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               RECFM=FBA,LRECL=133,BLKSIZE=13300\nINPUT    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD\nCMDCOUNT DS    PL4\nCMDBUF   DS    0H\nCOLCOUNT DS    H\nCMDTXT   DS    CL1800\nWKAREAL  EQU   *-WKAREA\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\n         MSGENT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGC0025B": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 224, "newlines": 224, "modlines": 0, "user": "GIBSON"}, "text": "         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: IGC0025B (SVC 252)                                     *\n*                                                                     *\n* DESCRIPTION: ROUTINE TO GET PASSWORD FROM JCL                       *\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*  1) GET POINTER TO JCT                                              *\n*         IF NOT FOUND RETURN WITH CODE 4                             *\n*                                                                     *\n*  2)     SCAN TABLE FOR DSN MATCH OR BLANK DSN (FOR DEFAULT PW)      *\n*             IF NONE FOUND RETURN WITH CODE 4                        *\n*                ELSE MOVE PSW AND RETURN WITH CODE 0                 *\n*                                                                     *\n*  ENTRY POINT:                                                       *\n*      IGC0025B CALLED FROM IEAVMXIT                                  *\n*                                                                     *\n*  PURPOSE:                                                           *\n*      TO GET PASSWORD FROM JES2                                      *\n*                                                                     *\n*  INPUT:                                                             *\n*      R0  = ADDRESS OF FIELD IN WHICH PASSWORD IS RETURNED           *\n*      R1  = ADDRESS OF DSN                                           *\n*      R6  = ENTRY POINT                                              *\n*      R7  = ADDRESS OF ASCB                                          *\n*      R13 =                                                          *\n*      R14 = RETURN ADDRESS                                           *\n*                                                                     *\n*  OUTPUT:                                                            *\n*      IF PASSWORD FOUND                                              *\n*          PASSWORD AT ADDRESS PASSED IN R0                           *\n*          RETURN CODE 0                                              *\n*      ELSE                                                           *\n*          RETURN CODE 4                                              *\n*                                                                     *\n*  REGISTER USEAGE:                                                   *\n*       R0  - WORK REGISTER                                           *\n*       R1  - WORK REGISTER                                           *\n*       R2  - WORK                                                    *\n*       R3  - WORK                                                    *\n*       R4  - WORK                                                    *\n*       R5  - WORK                                                    *\n*       R6  - BASE REGISTER FOR PROGRAM                               *\n*       R7  - BASE REGISTER FOR ASCB DSECT                            *\n*       R8  - UNUSED                                                  *\n*       R9  - UNUSED                                                  *\n*       R10 - BASE REGISTER FOR JCT DSECT                             *\n*       R11 - UNUSED                                                  *\n*       R12 - UNUSED                                                  *\n*       R13 - UNUSED                                                  *\n*       R14 - RETURN ADDRESS                                          *\n*       R15 - RETURN CODE                                             *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         PRINT ON,NOGEN\n         COPY  $HASPGBL\n&ANVIRON SETC  'USER'        SET ENVIRONMENT TO USER\n         $HASPEQU            GENERATE HASP EQUATES\n         $BUFFER             GENERATE HASP BUFFER DSECT\n         $CADDR\n         $HFAME              GENERATE HASP\n         $HCCT               GENERATE HASP SSVT DSECT\n         $JCT                GENERATE HASP JCT DSECT\n         $MIT\n         $PADDR\n         $PARMLST\n         $PSV\n         $SCAT               GENERATE HASP SCAT DSECT\n         $SJB                GENERATE HASP SJB DSECT\n         $TQE                GENERATE HASP TQE DSECT\n         $USERCBS            GENERATE USER CONTROL BLOCKS\n         $XECB               GENERATE HASP XECB DSECT\n         IFGRPL\n         IECDSECS CVT,TCB,JSCB,PSCB,UPT,DSAB,TIOT,UCB,ASCB,            X\n               DEB,PSA,JESCT,,                                         X\n               SECCORE,(MAIN,(IOB=NO)),WTG,PREFX,EXPAND=YES\n         IEFJSCVT\n         IEFJSSIB\n         PRINT ON,GEN\n         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'\nIGC0025B CSECT\nIGC0025B AMODE 31\nIGC0025B RMODE ANY\n         USING PSA,0\n         USING ASCB,R7\n         USING IGC0025B,R6     SET ADDRESSABILITY\n         B     SKIPHDR         SKIP OVER HEADER\n         DC    AL1(L'IEIBALL)  LENGTH OF HEADER\nIEIBALL  DC    C'IGC0025B &SYSDATE &SYSTIME'\nSKIPHDR  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SAVE PARAMETERS AND GET STORAGE                              *\n*                                                                     *\n***********************************************************************\n         LR    R4,R0            SAVE PASSWORD RETURN ADDRESS\n         LR    R5,R1            SAVE DSN ADDRESS\n         GETMAIN RU,LV=DATALEN,SP=252 GET STORAGE\n         LR    R13,R1\n         USING DATA,R13\n         ST    R14,RETADDR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        GET POINTER TO JCT                                           *\n*                                                                     *\n***********************************************************************\n         L     R1,PSATOLD               CURRENT TCB\n         L     R1,TCBJSCB-TCB(,R1)      JSCB\n         L     R1,JSCBACT-IEZJSCB(,R1)  SSIB\n         ICM   R1,B'1111',JSCBSSIB-IEZJSCB(R1) SSIB\n         BZ    RET4\n         CLC   SSIBSSNM-SSIB(3,R1),=CL3'JES'\n         BNE   RET4\n         LA    R3,SSIBSSNM-SSIB(,R1)    POINT TO SUB SYSTEM NAME\n         SPACE ,\n         L     R1,FLCCVT\n         L     R1,CVTJESCT-CVT(,R1)\n         L     R1,JESSSCT-JESCT(,R1)\n         USING SSCT,R1\nSSCTLOOP DS    0H\n         LTR   R1,R1\n         BZ    RET4\n         CLC   SSCTSNAM,0(R3)\n         BE    SSCTFND\n         L     R1,SSCTSCTA\n         B     SSCTLOOP\nSSCTFND  DS    0H\n         ICM   R11,B'1111',SSCTSUS2\n         BZ    RET4\n         USING HCCT,R11\n         DROP  R1\n        $SJBFIND TYPE=LAST\n         LTR   R15,R15\n         BNZ   RET4\n         ICM   R10,B'1111',SJBJCT-SJB(R1) GET POINTER TO JCT\n         BZ    RET4                     RETURN CODE 4 IF NO JCT\n         USING JCT,R10\n         CLC   JCTID,=CL4'JCT'          IS IT A JCT\n         BNE   RET4\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CHECK PASSWORD MODE                                          *\n*                                                                     *\n***********************************************************************\n         TM    JCTUSER0,JCTPW            PASSWORD SUPPLIED IN JCL ?\n         BNO   RET4                     NO, RETURN CODE 4\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        PASSWORD PROCESSING ROUTINE                                  *\n*                                                                     *\n***********************************************************************\n         USING PCT,R1\n         L     R1,JCTUSER2               PTR TO PASSWORD CONTROL TABLE\n         LTR   R1,R1                    IS THERE ONE ?\n         BZ    RET4                     NO, RETURN CODE 4\n         LH    R0,PCTPWCNT              GET COUNT\n         LA    R1,PCTTABL               POINT TO FIRST ENTRY\n         DROP  R1\n         SPACE ,\nPWDSRCH  DS    0H\n         XC    8(44,R1),=52X'FF'        UNSCRAMBLE DSN\n         CLC   8(44,R1),0(R5)           DATA SET NAMES COMPARE ?\n         BE    PWDSRCH1                 YES, BR TO MOVE PW\n         CLC   8(44,R1),=CL44' '        ENTRY FOR DEFAULT PASSWORD ?\n         BNE   PWDSRCH2                 NO, BRANCH TO CONTINUE\n         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD\n         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD\nPWDSRCH2 DS    0H\n         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN\n         LA    R1,52(,R1)               BUMP TO NEXT ENTRY\n         BCT   R0,PWDSRCH               LOOP TO END OF TABLE\n         TM    JCTUSER0,JCTPWDEF        WAS THERE A DEFLT PASSWORD ?\n         BO    RET0                     YES, BRANCH RETURN CODE 0\n         B     RET4                     NO, BR RET CODE 4 PW NOT FOUND\n         SPACE ,\nPWDSRCH1 DS    0H\n         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN\n         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD\n         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD\n         B     RET0                     BRANCH TO RETURN CODE 0\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        RETURN                                                       *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R2,0                     LOAD RETURN CODE 0\n         B     RETURN                   BR TO RETURN\nRET4     DS    0H\n         LA    R2,4                     LOAD RETURN CODE OF 4\n         B     RETURN                   BR TO RETURN\nRETURN   DS    0H\n         L     R3,RETADDR\n         LR    R1,R13\n         FREEMAIN RU,LV=DATALEN,A=(1),SP=252 FREE DATA DSECT STORAGE\n         LR    R14,R3\n         LR    R15,R2\n         BR    R14                      RETURN\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        LITERALS                                                     *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        DATA DSECT                                                   *\n*                                                                     *\n***********************************************************************\nDATA     DSECT  ,\nSAVEAREA DS     18F\nRETADDR  DS     16F\nDATALEN  EQU    *-DATA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES2PARM": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "GIBSON"}, "text": "EXIT003  ROUTINE=(UEXIT3),\n         ENABLE\nEXIT004  ROUTINE=(UEXIT4),\n         ENABLE\nEXIT007  ROUTINE=(UEXIT7),\n         ENABLE\nEXIT008  ROUTINE=(UEXIT8),\n         ENABLE\n    LOADMOD(HASPXJ03)\n    LOADMOD(HASPXJ04)\n    LOADMOD(HASPXJ07)\n    LOADMOD(HASPXS08) STORAGE=LPA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYSCAN": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x03Y\\x03Y\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 857, "newlines": 857, "modlines": 0, "user": "GIBSON"}, "text": "***********************************************************************\n****                                                                ***\n****                                                                ***\n****  GENERAL FUNCTION: TO VALIDATE A CHARACTER STRING CONTAINING   ***\n****                    KEYWORDS AND VALUES AND PERFORM REQUESTED   ***\n****                    OPERATIONS AS SPECIFIED IN THE KEYWORD      ***\n****                    VALIDATION TABLE DEFINED WITH ONE OR MORE   ***\n****                    KEYT MACROS.  THIS MACRO EXPANDS TO AN      ***\n****                    INDEPENDENT CSECT UPON INITIAL INVOCATION   ***\n****                    AND IS ACCESSED VIA V-TYPE ADDRESSING       ***\n****                    FOR SUBSEQUENT INVOCATIONS.  THERE ARE 2    ***\n****                    BASIC PARTS TO THIS MACRO.  THE FIRST PART  ***\n****                    SETS UP THE APPROPRIATE PARMS BASED UPON    ***\n****                    THE USER PARAMETERS SUPPLIED.  THE SECOND   ***\n****                    PART DOES THE STRING MANIPULATION, PERFORMS ***\n****                    THE REQUESTED FUNCTIONS AND SETS RETURN     ***\n****                    CODES.                                      ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  ENTRY REGS:   R0   AL4  ADDR OF CHAR STRING                   ***\n****                R1   AL4  ADDRESS OF 1ST KEYT ENTRY             ***\n****                R2                                              ***\n****                R3                                              ***\n****                R4                                              ***\n****                R5                                              ***\n****                R6                                              ***\n****                R7                                              ***\n****                R8                                              ***\n****                R9                                              ***\n****                R10                                             ***\n****                R11                                             ***\n****                R12                                             ***\n****                R13  SAVE AREA                                  ***\n****                R14  RETURN ADDRESS                             ***\n****                R15                                             ***\n****                                                                ***\n****  REGISTER USAGE:  R0   WORK                                    ***\n****                   R1   WORK                                    ***\n****                   R2   WORK                                    ***\n****                   R3   CHAR STRING LENGTH                      ***\n****                   R4   CHAR STRING ADDRESS                     ***\n****                   R5   WORK                                    ***\n****                   R6   WORK                                    ***\n****                   R7   WORK                                    ***\n****                   R8   WORK                                    ***\n****                   R9   SAVED RETURN CODE                       ***\n****                   R10  WORKAREA BASE                           ***\n****                   R11  PROGRAM BASE                            ***\n****                   R12  PROGRAM BASE                            ***\n****                   R13  OLD SAVEAREA                            ***\n****                   R14  KEYWORD TABLE BASE                      ***\n****                   R15  RETURN CODE                             ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  AUTHOR: E STEWART                DATE: 05/29/80               ***\n****                                                                ***\n****                                                                ***\n****  ATTRIBUTES: RENT,REUS,REFR                                    ***\n****                                                                ***\n****                                                                ***\n****  CALLED BY: UTILITY FUNCTION                                   ***\n****                                                                ***\n****                                                                ***\n****  MACROS USED: GETMAIN,FREEMAIN                                 ***\n****                                                                ***\n****                                                                ***\n****  ROUTINES CALLED: NONE                                         ***\n****                                                                ***\n****                                                                ***\n****  NORMAL EXIT: BR R14                                           ***\n****                                                                ***\n****  EXIT REGS:     R0   AL4  ADDR OF KEYWORD IN CHAR STRING WHERE ***\n****                           VALIDATION ERROR OCCURED             ***\n****                 R1   AL4  ADDR OF VALUE IN CHAR STRING WHERE   ***\n****                           VALIDATION ERROR OCCURED             ***\n****                 R15       00  KEYWORD(S)VALUE(S) FOUND AND     ***\n****                               OP(S) PERFORMED                  ***\n****                           04  KEYWORD(S) FOUND, SOME VALUE NOT ***\n****                               FOUND IN KEYT                    ***\n****                           08  A KEYWORD WAS NOT FOUND IN KEYT  ***\n****                           12  'VALCNT' DID NOT PASS VALIDATION ***\n****                           16  MORE INPUT EXPECTED, I.E. ONLY   ***\n****                               BLANKS, COMMENTS, OR ),BLANK WAS ***\n****                               FOUND. OTHERWISE RC=00 WOULD HAVE***\n****                               BEEN RETURNED.                   ***\n****                           20  'TYPE' DID NOT PASS VALIDATION.  ***\n****                           24  'LEN' DID NOT PASS VALIDATION.   ***\n****                                                                ***\n****                                                                ***\n****  ABEND CODES: NONE (I HOPE)                                    ***\n****                                                                ***\n****                                                                ***\n****  MESSAGES ISSUED: NONE                                         ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n****  DSECTS/MACROS USED: NONE FROM AN EXTERNAL SOURCE              ***\n****                                                                ***\n****                                                                ***\n****  SPECIAL NOTES:                                                ***\n****                                                                ***\n****                                                                ***\n****                                                                ***\n***********************************************************************\nKEYSCAN  CSECT ,\n         SAVE  (14,12),,'KEYSCAN,&SYSDATE,&SYSTIME'\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         USING KEYSCAN,R12,R11         REAL BASE ADDRESS=R12\n         LA    R11,2048(,R12)          SET UP ...\n         LA    R11,2048(,R11)          ...    SECOND BASE REG\n         SPACE ,\n         USING KVDSVR,R14          TABLE ADDRESS BASE\n         GETMAIN R,LV=KVWALNTH     GET WORKAREA\n         LR    R10,R1              PUT INTO BASE REG\n         USING KVWAVR,R10          WORKAREA BASE\n         L     R4,20(,R13)         GET STRING ADDRESS INTO REG 4\n         SR    R3,R3               CLEAR WORK REG\n         ICM   R3,B'0011',0(R4)    GET STRING LENGTH\n         LA    R4,2(,R4)           BUMP OVER STRING LENGTH\n         MVI   KVWAFL1,0           CLEAR FLAG BYTE\n         MVI   KVWAKWVA,0          CLEAR COUNT BYTE\n         MVC   KVWASAV1(4*13),20(R13) SAVE REGS 0-12\n         MVC   KVWASAV1+(4*14)(4*2),12(R13) SAVE REGS 14-15\n         ST    R13,KVWASAV1+(4*13)  SAVE REG 13 FROM CALLER\nKVR004   DS    0H\n         L     R14,24(,R13)        TABLE ADDRESS\n         LA    R6,KVWAVR\n         LA    R7,KVWACLR\n         LA    R8,KVWAVR+KVWACLR\n         SLR   R9,R9\n         MVCL  R6,R8\n         LTR   R3,R3               Q. ANY DATA TO SCAN\n         BP    KVR005              A. YES, CONTINUE AS NORMAL\n         LA    R9,16               SET BAD RC\n         B     KVR900              AND RETURN\nKVR005   DS    0H\n         SR    R2,R2               CLEAR FOR LATER\n         ST    R4,KVWALOC          SAVE STRING LOC\n         ST    R4,KVWAKEY          SAVE STRING LOC\nKVR005A  DS    0H\n         LR    R5,R3               LOAD LENGTH INTO R5\n         C     R5,KVA256           IS IT GREATER THAN 256 ?\n         BNH   KVR005B             NO, NO PROBLEM\n         L     R5,KVA256           YES, THEN SET TO 256\nKVR005B  DS    0H\n         BCTR  R5,R0               REDUCE BY ONE\n         EX    R5,KVTR1VR          SEARCH FOR NON BLANK\n         LA    R5,1(,R3)           GET ORIG LENGTH\n         CLM   R2,B'0001',KVAX00   Q. ANYTHING FOUND\n         BNE   KVR006              A. YES, SEE WHAT IT IS\n         SR    R3,R5               SUB OFF FROM TOTAL LENGTH\n         BNP   KVR005C             NOTHING LEFT\n         LA    R4,256(,R4)         BUMP UP LOCATION\n         B     KVR005A\nKVR005C  DS    0H\n         LA    R9,16               SET BLANKS RETURN CODE\n         B     KVR900              RETURN TO CALLER\nKVR006   DS    0H\n         LR    R5,R1               SAVE REG 1\n         SR    R1,R4               GET NEW\n         SR    R3,R1               DATA LENGTH\n         LR    R4,R5               GET NEW LOCATION\n         CLM   R2,B'0001',KVASLASH Q. COULD THIS BE COMMENT\n         BNE   KVR020              A. NO, CONTINUE\n         CLI   1(R4),C'*'          Q .WAS THIS A COMMENT\n         BE    KVR008              A. YES, CONTINUE\n         LA    R9,8                SAY INVALID KEYWORD\n         B     KVR900              AND RETURN\nKVR008   DS    0H                  VALIDATE COMMENT\n         LA    R4,2(,R4)           BUMP OVER /*\n         BCTR  R3,0                REDUCE COUNT\n         BCTR  R3,0                REDUCE COUNT\nKVR010   DS    0H\n         CLI   0(R4),C'*'          Q. IS IT REALLY A COMMENT\n         BE    KVR014              A. YES, CONTINUE\nKVR012   DS    0H\n         LA    R4,1(,R4)           BUMP ADDRESS\n         BCT   R3,KVR010           LOOP THROUGH\n         LA    R9,8                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR014   DS    0H\n         CLI   1(R4),C'/'          Q. IS 2ND CHAR A SLASH\n         BNE   KVR012              A. NO, CONTINUE SCAN FOR END\n         LA    R4,2(,R4)           BUMP OVER */\n         BCTR  R3,0                REDUCE COUNT\n         BCTR  R3,0                REDUCE COUNT\n         B     KVR005              AND CONTINUE SCAN\nKVR020   DS    0H                  VALIDATE CHARACTERS FOUND\n         ST    R4,KVWALOC          SAVE STRING ADDR\n         ST    R4,KVWAKEY          SAVE STRING ADDR\n         SR    R5,R5               CLEAR FOR KEYWORD COMPARE\n         SR    R6,R6               CLEAR FOR KEYWORD COMPARE\n         SR    R7,R7               CLEAR FOR KEYWORD COMPARE\nKVR022   DS    0H\n         IC    R5,KVLL0001         GET KEYWORD LEN\n         EX    R5,KVCVR            Q. KEYWORD FOUND\n         BE    KVR080              A. YES,CONTINUE\nKVR023   DS    0H\n         IC    R6,KVVN0001         GET COUNT OF VALUE ENTRIES\n         LA    R14,0(R14,R5)       BUMP OVER VARIABLE KEYWORD\n         LTR   R6,R6               Q. ANY MORE VALUES TO DO\n         BZ    KVR028              A. NO, CONTINUE AS IS\nKVR024   DS    0H\n         IC    R7,KVVL0001         LENGTH OF VALUE KEYWORD\n         LA    R14,KVVG0001(R7,R14) BUMP OVER VALUE ENTRY\n         BCT   R6,KVR024           CONTINUE THRU ALL VALUES\nKVR028   DS    0H\n         LA    R14,KVKL0001+1(R14) BUMP OVER KEYWORD ENTRY\n         CLC   KVAFFFF,KVDSVR      Q. LAST ENTRY\n         BNE   KVR022              A. NO, CONTINUE SCAN\n         LA    R9,8                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR080   DS    0H                  KEYWORD FOUND\n         LA    R6,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD\n         CLI   0(R6),C'('          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         CLI   0(R6),C' '          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         CLI   0(R6),C','          Q. IS THIS DELIMITER\n         BE    KVR082              A. YES, CONTINUE\n         LR    R9,R3               CURRENT LENGTH\n         SR    R9,R5               MINUS KEYWORD EX LENGTH\n         BCTR  R9,0                MINUS ONE\n         LTR   R9,R9               Q. ANY DATA LEFT IN STRING\n         BZ    KVR082              A. NO, JUST CONTINUE NORMALLY\n         SR    R6,R6               CLEAR FOR LATER\n         B     KVR023              ELSE LOOK FOR ANOTHER KEYWORD\nKVR082   DS    0H\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R6,B'0011',KVRA0001 GET EXIT ROUTINE ADDR\n         BZ    KVR084              BRANCH IF NOT SPECIFIED\n         SRDL  R6,12               GET REG INTO R6\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF RTN BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R7,0(R7,R6)         GET ROUTINE ADDRESS\n         ST    R7,KVWARTN          SAVE RTN ADDRESS\nKVR084   DS    0H\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R6,B'0011',KVRP0001 GET EXIT ROUTINE PARM\n         BZ    KVR088              BRANCH IF NOT SPECIFIED\n         SRDL  R6,12               GET REG INTO R6\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF PARM BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R7,0(R7,R6)         GET PARM ADDRESS\n         ST    R7,KVWAPRM          SAVE PARM ADDRESS\nKVR088   DS    0H\n         LA    R4,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD\n         SR    R3,R5               REDUCE STRING COUNT\n         BCTR  R3,0                REDUCE STRING COUNT\n         CLI   0(R4),C'('          Q. VALUE(S) SPECIFIED\n         BE    KVR110              A. YES, CONTINUE\n         CLI   KVHV0001,0          Q. ANY VALUES REQUIRED\n         BNE   KVR090              A. NO, JUST RETURN\n         SR    R9,R9               SET ZERO RETURN CODE\n         B     KVR900              AND RETURN\nKVR090   DS    0H\n         MVI   KVWAKWVA,0          CLEAR COUNT\n         B     KVR172              GO PROCESS THIS KEYWORD\nKVR110   DS    0H                  MOVE ALL VALUES TO LOCAL STORAGE\n         SR    R1,R1               CLEAR FOR LATER\n         MVI   KVWAKWVA,0          CLEAR COUNT\n         BCTR  R3,0                REDUCE COUNT\n         LA    R4,1(,R4)           BUMP TO NEXT BYTE\n         CLI   0(R4),C')'          Q. NULL KEYWORDS\n         BNE   KVR120              A. NO, CONTINUE NORMALLY\n         B     KVR140              GO PROCESS NULL ENTRY\nKVR120   DS    0H\n         SR    R1,R1               CLEAR FOR LATER\n         CLI   0(R4),C''''         Q. QUOTED STRING FOR THIS VALUE\n         BNE   KVR124              A. NO, DONT SET FLAG\n         OI    KVWAQUO,KVWAQQ      SAY IN QUOTE MODE\n         LA    R4,1(,R4)           BUMP OVER QUOTE\n         BCTR  R3,0                REDUCE STRING COUNT\nKVR124   DS    0H\n         LA    R2,KVWATMP          ADDR OF TEMP WORK AREA\n         LR    R5,R4               SAVE OLD VALUES LOCATION\n         ST    R5,KVWALOC          SAVE STRING ADDR\nKVR130   DS    0H\n         CLI   0(R4),C'('          Q. OPEN  PAREN\n         BNE   KVR130A             A. NO, CONTINUE\n         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?\n         BO    KVR130A             A. YES, CONTINUE\n         OI    KVWAQUO,KVWAQP      SET PARENED QUOTE MODE\n         L     R0,KVWAPRN          LOAD PAREN COUNT\n         A     R0,=F'1'            ADD ONE TO PAREN COUNT\n         ST    R0,KVWAPRN          STORE PAREN COUNT\n         B     KVR134\nKVR130A  DS    0H\n         CLI   0(R4),C')'          Q. TERMINATING DELIMITER\n         BNE   KVR130B             A. NO, CONTINUE\n         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?\n         BO    KVR140              A. YES, CONTINUE\n         TM    KVWAQUO,KVWAQP      Q. IN PAREN QUOTE MODE\n         BNO   KVR140              A. NO, SAVE THIS KEYWORD\n         L     R0,KVWAPRN          LOAD PAREN COUNT\n         ST    R0,KVWAPRN          STORE PAREN COUNT\n         S     R0,=F'1'            SUB ONE\n         BP    KVR134              IF POSITIVE CONTINUE\n         NI    KVWAQUO,255-KVWAQP  TURN OFF PAREN QUOTE MODE\n         B     KVR134              AND CONTINUE\nKVR130B  DS    0H\n         CLI   0(R4),C','          Q. COMMA DELIMITER\n         BE    KVR140              A. YES, SAVE THIS KEYWORD\n         CLI   0(R4),C''''         Q. END OF QUOTED STRING\n         BNE   KVR134              A. NO, CONTINUE\n         LA    R4,1(,R4)           BUMP ADDRESS\n         BCTR  R3,0                REDUCE COUNT\n         LA    R1,1(,R1)           ADD 1 FOR LATER STRING MOVE\n         CLI   0(R4),C''''         Q. REALLY END OF STRING\n         BE    KVR134              A. NO, NOT YET JUST DOUBLE QUOTES\n         NI    KVWAQUO,255-KVWAQQ  RESET QUOTE MODE FLAG\n         B     KVR130              AND CONTINUE\nKVR134   DS    0H\n         MVC   0(1,R2),0(R4)       SAVE THIS BYTE\n         LA    R2,1(,R2)           BUMP WORK BYTE\n         LA    R4,1(,R4)           GO TO NEXT BYTE\n         BCT   R3,KVR130           CONTINUE SCAN\n         LA    R9,4                SET RETURN CODE\n         B     KVR900              AND RETURN\nKVR140   DS    0H                  PROCESS FOUND VALUE\n         CLI   KVWAQUO,0           Q. ARE WE IN QUOTE MODE\n         BNE   KVR134              A. YES, IGNORE OTHER DELIMITERS\n         LR    R6,R4               SAVE NEW ADDR\n         SR    R6,R5               GET VALUE LENGTH\n         SR    R6,R1               SUBTRACT ANY QUOTED STRING BYTES\n         SR    R5,R5               CLEAR WORK REG\n         ICM   R5,B'0001',KVWAKWVA GET WORK AREA COUNT\n         BNZ   KVR146              BRANCH IF ALREADY SOME IN THERE\n         LA    R8,KVWAKWVA+1       GET NEXT LOC ADDRESS\n         B     KVR148              AND CONTINUE\nKVR146   DS    0H                  LOOK FOR VALUES END LOCATION\n         LA    R8,KVWAKWVA+1       GET START ADDRESS\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R7,B'0001',KVWAKWVA+1   GET LENGTH OF LAST ONE\nKVR147   DS    0H\n         LA    R8,1(R7,R8)         GO TO NEXT SLOT\n         ICM   R7,B'0001',0(R8)    GET NEXT LENGTH\n         BCT   R5,KVR147            LOOP THRU\nKVR148   DS    0H                  MOVE NEW VALUE IN NOW\n         LTR   R6,R6               Q. NULL VALUE SPECIFIED\n         BNZ   KVR150              A. NO, CONTINUE MVC\n         STC   R6,0(,R8)           SAVE NULL VALUE LENGTH\n         B     KVR160              AND UPDATE VALUES COUNT\nKVR150   DS    0H                  MOVE NEW VALUES INTO WORKAREA\n         L     R5,KVWALOC          RESTORE STRING ADDR\n         STC   R6,0(,R8)           SAVE STRING LENGTH\n         BCTR  R6,0                REDUCE COUNT\n         EX    R6,KVM1VR           PERFORM THE MOVE\n         TM    KVVT0001,X'FF'      Q. ANY VALIDATION REQUIRED\n         BZ    KVR160              A. NO, JUST CONTINUE\n         SR    R2,R2               CLEAR WORK REG\n         ICM   R2,B'0001',KVVT0001 GET VALIDATION CODE\n         SLL   R2,2                X 4\n         B     *+0(R2)             GO TO VALIDATE IT\n         B     KVR154              ALPHA\n         B     KVR156              NUMERIC\n         B     KVR158              ALPH/NUMERIC\nKVR154   DS    0H                  ALPHA VALIDATION\n         EX    R6,KVTR2VR          A. ALPHA FIELD\n         BZ    KVR160              A. YES, CONTINUE\nKVR155   DS    0H                  ERROR RETURN\n         LA    R9,20               SET RC\n         B     KVR900              AND RETURN\nKVR156   DS    0H                  NUMERIC\n         EX    R6,KVTR3VR          Q. NUMERIC FIELD\n         BZ    KVR160              A. YES, CONTINUE\n         B     KVR155              ELSE SET BAD RC\nKVR158   DS    0H                  ALPHA/NUMERIC\n         EX    R6,KVTR4VR          Q. ALPHA/NUMERIC\n         BZ    KVR160              A. YES, CONTINUE\n         B     KVR155              ELSE ERROR RETURN\nKVR160   DS    0H\n         CLI   KVVLL001,0          Q. WAS VALUE LEN VALIDATION REQUSTED\n         BE    KVR169              A. NO, BYPASS LENGTH VALIDATION\n         LA    R6,1(,R6)           RESTORE FULL LENGTH\n         CLM   R6,B'0001',KVVLL001 Q. WAS LOW VALUE PRECEEDED\n         BL    KVR168              A. YES, ERROR CONDITION\n         CLM   R6,B'0001',KVVLH001 Q. WAS HIGH VALUE EXCEEDED\n         BH    KVR168              A. YES, ERROR CONDITION\n         B     KVR169              VALUE LENGTH PASSED VALIDATION\nKVR168   DS    0H\n         LA    R9,24               SET VALUE ERROR\n         B     KVR900              AND RETURN\nKVR169   DS    0H\n         IC    R7,KVWAKWVA         GET CURRENT COUNT\n         LA    R7,1(,R7)           ADD ONE\n         STC   R7,KVWAKWVA         AND SAVE THE COUNT\n         CLI   0(R4),C')'          Q. WAS IT ENDING DELIMETER\n         BE    KVR170              A. YES, TERMINATE SCAN\n         LA    R4,1(,R4)           BUMP OVER COMMA\n         BCTR  R3,0                REDUCE STRING LENGTH\n         B     KVR120              CONTINUE FOR MORE KEYWORDS\nKVR170   DS    0H                  PROCESS ENDING DELIMITER\n         LA    R4,1(,R4)           BUMP OVER )\n         BCTR  R3,0                REDUCE COUNT\nKVR172   DS    0H                  PROCESS ENDING DELIMITER\n         SR    R5,R5               CLEAR WORK REG\n         SR    R6,R6               CLEAR WORK REG\n         ICM   R5,B'0001',KVHV0001 GET VALUE(S) COUNT HIGH NUMBER\n         BNZ   KVR180              GO HERE IF NOT ZERO COUNT\n         CLM   R5,B'0001',KVWAKWVA Q. WAS COUNT FOUND ALSO ZERO\n         BE    KVR180              A. YES, CONTINUE WITHOUT ERROR YET\nKVR174   DS    0H\n         LA    R9,12               SAY COUNT EXCEEDED\n         B     KVR900              AND RETURN\nKVR180   DS    0H\n         CLM   R5,B'0001',KVWAKWVA Q. HIGH COUNT EXCEEDED\n         BL    KVR174              A. YES, ERROR AND GET OUT\n         ICM   R5,B'0001',KVLV0001 GET LOW VALUE(S) COUNT\n         BZ    KVR182              GET OUT IF ZERO COUNT\n         CLM   R5,B'0001',KVWAKWVA Q. COUNT LESS THAN LOW VALUE\n         BH    KVR174              A. YES, GET OUT WITH ERROR\nKVR182   DS    0H\n         ICM   R5,B'0011',KVAA0001 Q. IS THERE AN AREA PROVIDED\n         BZ    KVR200              A. NO, JUST CONTINUE\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVAA0001 GET WORKAREA ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R2\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF AREA BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R6,0(R7,R6)         GET WORKAREA ADDRESS\n         LA    R5,KVWAKWVA         GET MY AREA ADDRESS\n         SR    R2,R2               CLEAR WORK REG\n         IC    R2,KVWAKWVA         GET COUNT\n         MVC   0(1,R6),KVWAKWVA    MOVE COUNT BYTE\n         LA    R6,1(,R6)           BUMP OVER COUNT BYTE\n         LA    R5,1(,R5)           BUMP OVER COUNT BYTE\nKVR184   DS    0H\n         MVC   0(1,R6),0(R5)       MOVE FIRST LENGTH BYTE\n         LTR   R2,R2               WAS ANYTHING IN THE AREA\n         BNZ   KVR186              YES, CONTINUE WITH MOVE\n         MVI   KVWAKWVA,1          SAY SOMETHING WAS THERE\n         B     KVR200              AND CONTINUE\nKVR186   DS    0H\n         SR    R7,R7               CLEAR FOR NEXT INSTR\n         ICM   R7,B'0001',0(R5)    GET BYTE COUNT\n         BNZ   KVR188              BRANCH FOR NON ZERO MOVE\n         LA    R6,1(,R6)           BUMP OVER NULL BYTE\n         LA    R5,1(,R5)           BUMP OVER NULL BYTE\n         B     KVR194              AND CONTINUE\nKVR188   DS    0H\n         BCTR  R7,0                REDUCE BY ONE\n         EX    R7,KVM2VR           MOVE DATA OVER\nKVR190   DS    0H\n         LA    R6,2(R7,R6)         BUMP OVER OUTPUT\n         LA    R5,2(R7,R5)         BUMP OVER INPUT\nKVR194   DS    0H\n         BCT   R2,KVR184           COUNTINUE MOVE\nKVR200   DS    0H                  SEE IF VALUES TO BE COMPARED\n         SPACE\n*        AT THIS POINT THE VALUES HAVE BEEN MOVED TO MY WORKAREA\n*        AND TO THE USER WORK AREA IF AREA HAS BEEN SPECIFIED\n*        IN THE KEYT MACRO\n         SPACE\n         SR    R2,R2               CLEAR WORK REG\n         ICM   R2,B'0001',KVVN0001 Q. WERE ANY VALUES TO BE VERIFIED\n*                                     OR WAS THERE WORK TO BE DONE\n         BNZ   KVR220              A. YES, CONTINUE AS USUAL\n         SR    R9,R9               CLEAR RC\n         B     KVR900              AND RETURN TO CALLER\nKVR220   DS    0H\n         ST    R2,KVVNCNT          SAVE COUNT\n         ST    R14,KVWAR14         SAVE KEYT ADDR\n         LA    R5,KVWAKWVA+1       ADDR OF FOUND VALUES\n         ST    R5,KVWASV           SAVE VALUES ADDR\n         MVC   KVWASVC,KVWAKWVA    SAVE VALUES COUNT\n         SR    R2,R2               CLEAR REG\n         ICM   R2,B'0001',KVWASVC  Q. ANY VALUES FOUND\n         BNZ   KVR230              A. YES, CONTINUE WITH COUNT\n         MVI   KVWASVC,1           ELSE SAY AT LEAST ONE FOUND\nKVR230   DS    0H\n         L     R2,KVVNCNT          GET COUNT\n         L     R14,KVWAR14         GET TABLE ADDR\n         L     R5,KVWASV           GET ADDR OF CURRENT VALUE TO FIND\n         SR    R1,R1               CLEAR WORK REG\n         ICM   R1,B'0001',KVWASVC  GET COUNT\n         BZ    KVR500              STOP SCAN IF NONE LEFT\n         BCTR  R1,0                REDUCE COUNT\n         STC   R1,KVWASVC          SAVE NEW COUNT\n         ICM   R1,B'0001',0(R5)    GET LENGTH OF CURRENT VALUE\n         LA    R1,1(R1,R5)         BUMP TO WHERE NEW VALUE WILL BE\n         ST    R1,KVWASV           AND SAVE ADDRESS\n         SR    R7,R7               CLEAR FOR LATER\n         IC    R7,KVLL0001         GET KEYWORD LENGTH\n         LA    R14,0(R14,R7)       BUMP OVER VARIABLE LENGTH KEYWORD\nKVR240   DS    0H                  SCAN TABLE FOR THIS VALUE\n         ST    R2,KVWAR2           SAVE CURRENT COUNT\n         ICM   R7,B'0001',KVVL0001 LENGTH OF VALUE\n         BZ    KVR300              IF NO KEYWORD VALUE HAS BEEN PUT\n*                                  IN KEYT DONT LOOK FOR A MATCH, JUST\n*                                  DO THE WORK IF ANY\n         BCTR  R7,0                REDUCE FOR EX INSTR\n         EX    R7,KVC2VR           Q. ARE VALUES EQUAL\n         BE    KVR300              A. YES, GO SEE IF ANY WORK TO DO\nKVR250   DS    0H\n         L     R2,KVWAR2           RELOAD LOOP COUNTER\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,KVVL0001         GET LENGTH OF VALUE\n         LA    R14,KVVG0001(R1,R14) GO TO NEXT ENTRY\n         BCT   R2,KVR240           AND CONTINUE SCAN\n         CLI   KVWAVF,X'FF'        Q. WERE VALUE(S) MATCHED IN KEYT\n         BE    KVR260              A. YES, CONTINUE WITH NO ERRORS\n         LA    R9,4                VALUE NOT FOUND RC\n         B     KVR900              AND RETURN\nKVR260   DS    0H\n         MVI   KVWAVF,0            RESET VALUES FOUND FLAG\n         B     KVR230              AND CONTINUE WITH OTHER VALUES\nKVR300   DS    0H                  VALUE FOUND SEE IF ANY WORK TO DO\n         MVI   KVWAVF,X'FF'        SAY VALUES FOUND\n         TM    KVOP0001,X'FF'      Q. ANY OP CODES SPECIFIED\n         BNZ   KVR320              A. YES, SEE IF SOME WORK TO DO\n         B     KVR250              ELSE CONTINUE VALUES SCAN\nKVR320   DS    0H                  DECODE OP CODES AND DO THEM\n         LA    R6,KVVV0001         GET ADDR OF VALUES ENTRY\n         LA    R1,KVWAFLN          ADDR OF SAVE TABLE\n         ICM   R7,B'1111',KVWACN1  GET CURRENT COUNT OF VALUES ALREADY\n*                                  PROCESSED\n         BZ    KVR326              ADD THIS ONE IF NONE YET\nKVR322   DS    0H\n         C     R6,0(,R1)           Q. ALREADY PROCESSED THIS ENTRY\n         BE    KVR250              A. YES BYPASS FURTHER PROCESSING\n         LA    R1,4(,R1)           BUMP TABLE ADDRESS\n         BCT   R7,KVR322           CONTINUE SCAN\nKVR326   DS    0H\n         ST    R6,0(,R1)           SAVE ADDRESS OF THIS ENTRY FOR LATER\n*                                  COMPARE OF OTHER VALUES\n         L     R7,KVWACN1          GET OLD COUNT\n         LA    R7,1(,R7)           ADD 1 TO IT\n         ST    R7,KVWACN1          AND SAVE IT\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVTO0001 GET TO ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R2\n         SLL   R6,2                X 4\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF TO BASE REG\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R2,0(R7,R6)         GET TO ADDREESS\n         SR    R6,R6               CLEAR WORK REG\n         SR    R7,R7               CLEAR WORK REG\n         ICM   R6,B'0011',KVFR0001 GET FROM ADDRESS\n         SRDL  R6,12               GET REG NO. INTO R6\n         SLL   R6,2                X 4\n         LTR   R6,R6               Q. WAS THIS SELF DEFINING TERM\n         BZ    KVR330              A. YES, DONT LOAD NONEXISTENT BASE\n         LA    R1,KVWASAV1         ADDR OF SAVE AREA\n         L     R6,0(R6,R1)         GET CONTENTS OF FROM BASE REG\nKVR330   DS    0H\n         SRL   R7,20               SHIFT TO LOWER END\n         LA    R8,0(R7,R6)         GET FROM ADDRESS\n         SR    R1,R1               CLEAR WORK REG\n         ICM   R1,B'0011',KVOL0001 GET LENGTH OF FIELD\n         BCTR  R1,0                GET EX LENGTH\n         SR    R7,R7               CLEAR WORK REG\n         IC    R7,KVOP0001         GET OP CODE\n         SLL   R7,2                MULTIPLY BY 4\n         B     *+0(R7)             BRANCH TO OP CODE ROUTINE\n         B     KVR360              N OP CODE SPECIFIED\n         B     KVR380              O OP CODE SPECIFIED\n         B     KVR400              M OP CODE SPECIFIED\n         B     KVR420              X OP CODE SPECIFIED\nKVR360   DS    0H                  N OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR366              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPNI           ISSUE THE AND OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR366   DS    0H                  N OP CODE\n         EX    R1,KVOPN            ISSUE THE AND OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR380   DS    0H                  O OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR386              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPOI           ISSUE THE OR OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR386   DS    0H                  N OP CODE\n         EX    R1,KVOPO            ISSUE THE OR OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR400   DS    0H                  M OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR406              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPMI           ISSUE THE MVC OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR406   DS    0H                  N OP CODE\n         EX    R1,KVOPM            ISSUE THE MVC OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR420   DS    0H                  N OP CODE\n         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING\n         BNZ   KVR426              A. NO, CONTINUE STOR-STOR OPERATION\n         EX    R8,KVOPXI           ISSUE THE XI OP CODE STOR-IMED\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR426   DS    0H                  N OP CODE\n         EX    R1,KVOPX            ISSUE THE XC OP CODE STOR-STOR\n         B     KVR250              AND CONTINUE WITH OTHER VALUES\nKVR500   DS    0H                  ALL VALUES SCANNED\n         SR    R9,R9               CLEAR RC\n         B     KVR900              AND RETURN\nKVR900   DS    0H                  RETURN POINT\n         LTR   R9,R9               Q . RC=00\n         BNZ   KVR930              A. NO, CONTINUE RETURN TO CALLER\n         ICM   R1,B'1111',KVWARTN  Q. RTN TO CALL\n         BZ    KVR910              A. NO, CONTINUE NO CALL\n         MVC   KVWASKIP(KVRRLEN),KVRSKIP SET UP REG RELOAD ROUTINE\n         LR    R15,R1              GET RTN ADDR\n         LA    R0,KVWAKWVA         GET STRING ADDR\n         ST    R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR\n         LA    R13,KVWASAV         MY SAVE AREA\n         L     R1,KVWAPRM          GET PARM DATA ADDR\n         STM   R0,R15,KVWASAV9     SAVE REGS\n         LA    R14,KVWASKIP        LOAD RETURN ADDRESS\n         LM    R2,R12,KVWASAV1+(4*2) LOAD CALLING REGS\n         BR    R15                 CALL USERS ROUTINE\nKVR900A  DS    0H\n         L     R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR\n         LTR   R9,R15              WAS RETURN CODE ZERO?\n         BNZ   KVR930              NO, RETURN TO CALLER\nKVR910   DS    0H\n         MVI   KVWAFL1,1           SAY AT LEAST 1 GOOD FIND\n         B     KVR004              GO DO MORE NOW\nKVR930   DS    0H\n         L     R4,KVWALOC          SAVE STRING LOCATION\n         L     R5,KVWAKEY          SAVE KEYWORD LOCATION\n         CLI   KVWAFL1,0           Q. ANY GOOD FINDS\n         BE    KVR950              A. NO, LEAVE RC AS IS\n         C     R9,KVASIX           Q. WAS RC=16\n         BNE   KVR950              A. NO, LEAVE RC AS IS\n         SR    R9,R9               SET ZERO RC\nKVR950   DS    0H\n         LR    R1,R10              GET WORKAREA ADDRESS\n         LA    R0,KVWALNTH         GET WORKAREA LENGTH\n         FREEMAIN R,LV=(0),A=(1)   FREE WORKAREA\n         LR    R15,R9              SETUP RETURN CODE\n         LM    R6,R12,11*4(R13)    RESTORE REGS\n         LR    R0,R5               PUT IN KEYWORD LOCATION\n         LR    R1,R4               PUT IN STRING LOCATION\n         LM    R2,R5,7*4(R13)      RESTORE OTHER REGS\n         L     R14,3*4(R13)        RESTORE RETURN REG\n         BR    R14                 RETURN TO CALLER\n         EJECT ,\nKVRSKIP  DS    0F\n         B     KVRRELD-*(,R14)\nKVRSAV9  DC    16F'0'\nKVRRELD  LM    R0,R14,4(R14)\nKVRRET   B     KVR900A\nKVRRLEN  EQU   *-KVRSKIP\n         EJECT ,\nKVOPN    NC    0(*-*,R2),0(R8)\nKVOPNI   NI    0(R2),*-*\nKVOPO    OC    0(*-*,R2),0(R8)\nKVOPOI   OI    0(R2),*-*\nKVOPM    MVC   0(*-*,R2),0(R8)\nKVOPMI   MVI   0(R2),*-*\nKVOPX    XC    0(*-*,R2),0(R8)\nKVOPXI   XI    0(R2),*-*\nKVCVR    CLC   KVKV0001(*-*),0(R4)\nKVTR1VR  TRT   0(*-*,R4),KTVRT1    NON-BLANK TEST\nKVTR2VR  TRT   1(*-*,R8),KTVRT2    ALPHA TEST\nKVTR3VR  TRT   1(*-*,R8),KTVRT3    NUMERIC TEST\nKVTR4VR  TRT   1(*-*,R8),KTVRT4    ALPHA/NUMERIC NATIONAL TEST\nKVC2VR   CLC   KVVV0001(*-*),1(R5)\nKVM1VR   MVC   1(*-*,R8),KVWATMP\nKVM2VR   MVC   1(*-*,R6),1(R5)\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT1   DC    X'00000000000000000000000000000000' - 00\n         DC    X'00000000000000000000000000000000' - 10\n         DC    X'00000000000000000000000000000000' - 20\n         DC    X'00000000000000000000000000000000' - 30\n         DC    X'000000000000000000004A4B4C4D4E4F' - 40\n         DC    X'500000000000000000005A5B5C5D5E5F' - 50\n         DC    X'6061000000000000000000006C6D6E6F' - 60\n         DC    X'0000000000000000007D7A7B7C407E7F' - 70\n         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - 80\n         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - 90\n         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - A0\n         DC    X'00000000000000000000000000000000' - B0\n         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - C0\n         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - D0\n         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - E0\n         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT2   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 1\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 2\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 3\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 4\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 5\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 6\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 7\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 8\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 9\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - C\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - D\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT3   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 40\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 50\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 70\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - C0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - D0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - E0\n         DC    X'00000000000000000000FFFFFFFFFFFF' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nKTVRT4   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF' - 40\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 50\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 70\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - C0\n         DC    X'FF000000000000000000FFFFFFFFFFFF' - D0\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E0\n         DC    X'00000000000000000000FFFFFFFFFFFF' - F0\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         EJECT ,\n*---------------------------------------------------------------------*\n*        CONSTANTS USED BY KEYWORD PARSE ROUTINE                      *\n*---------------------------------------------------------------------*\nKVAFFFF  DC    X'FFFF'\nKVASIX   DC    F'16'\nKVA256   DC    F'256'\nKVAX00   DC    X'00'\nKVASLASH DC    C'/'\n         EJECT ,\n*---------------------------------------------------------------------*\n*        LITERAL POOL                                                 *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         EJECT ,\n*---------------------------------------------------------------------*\n*                CONSTANTS AND EQUATES                                *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT ,\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         SPACE ,\n         DC    32X'0'\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKVWAVR   DSECT ,                   START OF PARSE WORK AREA\nKVWASAV  DS    18F                 SAVE AREA TO CALL RTN\nKVWAVF   DS    X                   VALUES FOUND FLAG\nKVWAQUO  DS    X                   QUOTED STRING MODE FLAG\nKVWAQQ   EQU   B'10000000'         QUOTED QUOTED STRING\nKVWAQP   EQU   B'01000000'         PARENED QUOTED STRING\nKVWAPRN  DS    F                   COUNT OF PAREN NESTING\nKVWASV   DS    F                   ADDR OF VALUES FOUND\nKVWARTN  DS    F                   ADDRESS OF RTN TO CALL\nKVWAPRM  DS    F                   ADDRESS OF RTN PARM\nKVWALOC  DS    F                   LOCATION OF INPUT STRING\nKVWAR14  DS    F                   SAVE AREA FOR REG 14\nKVWAR2   DS    F                   SAVE AREA FOR REG 2\nKVVNCNT  DS    F                   VALUE COUNT SAVEAREA\nKVWAKEY  DS    F                   ADDRESS OF CURRENT KEYWORD IN STRING\nKVWACN1  DS    F                   COUNT OF VALUE ADDRS IN KVWAFLN\nKVWASVC  DS    X                   COUNT OF VALUES FOUND\nKVWAKWVA DS    512X                WORKAREA FOR VALUE MOVE\nKVWATMP  DS    256X                WORKAREA FOR TEMP VALUE MOVE\nKVWACLR  EQU   *-KVWAVR            LENGTH OF WORKAREA TO CLEAR\nKVWAFL1  DS    X                   FLAG TO SHOW SOME GOOD WORDS FOUND\nKVWASAV1 DS    16F                 SAVE AREA FOR CALLERS REGS\nKVWASKIP DS    F                   REGISTER RELOAD ROUTINE\nKVWASAV9 DS    16F                 REGISTER RELOAD SAVE AREA\nKVWARELD DS    F                   REGISTER RELOAD\nKVWARET  DS    F                   REGISTER RELOAD RETURN\nKVWAFLN  DS    15XL4               SAVEAREA FOR MAX COUNT OF FIELDN'S\nKVWALNTH EQU   *-KVWAVR\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nKVDSVR   DSECT\nKVLL0001 DS    AL1                 LENGTH OF KEY-1\nKVRA0001 DS    SL2                 RTN ADDRESS\nKVRP0001 DS    SL2                 RTN PARM\nKVAA0001 DS    SL2                 AREA ADDRESS\nKVVLL001 DS    AL1                 VALUE LENGTH LOW\nKVVLH001 DS    AL1                 VALUE LENGTH HIGH\nKVLV0001 DS    AL1                 VALUE COUNT LOW\nKVHV0001 DS    AL1                 VALUE COUNT HIGH\nKVVT0001 DS    XL1                 VALUE TYPE\nKVTA0001 EQU   X'01'               ALPHA TYPE\nKVTN0001 EQU   X'02'               NUMERIC TYPE\nKVTB0001 EQU   X'03'               ALPHA OR NUMERIC TYPE\nKVVN0001 DS    AL1                 COUNT OF VALUE ENTRIES\nKVKL0001 EQU   *-KVLL0001          LENGTH OF TABLE ENTRY MINUS KEYWORD\nKVKV0001 DS    C                   KEYWORD\nKVVL0001 DS    AL1                 VALUE LENGTH\nKVOP0001 DS    XL1                 OP CODE\nKVVA0001 EQU   X'01'               N  OP CODE\nKVVO0001 EQU   X'02'               O  OP CODE\nKVVM0001 EQU   X'03'               M  OP CODE\nKVVX0001 EQU   X'04'               X  OP CODE\nKVTO0001 DS    SL2                 TO ADDRESS\nKVFR0001 DS    SL2                 FROM ADDRESS\nKVOL0001 DS    AL2                 LENGTH OF TO FIELD\nKVVG0001 EQU   *-KVVL0001          ENTRY LENGTH MINUS VALUE CONSTANT\nKVVV0001 DS    C                   VALUE CONSTANT\nKVLA0001 EQU   *,2                 LAST ENTRY =X'FFFF'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYT": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x01F\\x01F\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 326, "newlines": 326, "modlines": 0, "user": "GIBSON"}, "text": "         MACRO\n&NAME    KEYT  &KEYWORD,&RTN,&AREA,&TYPE,&VALCNT,&FIELD1=,&FIELD2=,    X\n               &FIELD3=,&FIELD4=,&FIELD5=,&FIELD6=,&FIELD7=,           X\n               &FIELD8=,&FIELD9=,&FIELD10=,&FIELD11=,&FIELD12=,        X\n               &FIELD13,&FIELD14=,&FIELD15=,&END=,                     X\n               &LEN=\n         LCLA  &KVVN,&CNTR1,&KVLL,&CNTR2\n         LCLC  &P1,&P2,&P3,&P4,&LEN1,&LEN2,&KEYWORK\n         AIF   ('&SYSLIST(1)' NE '').KVRM020 ONLY REQUIRED KEYWORD\n         MNOTE 8,'1ST PARM MISSING AND IS REQUIRED'\n         MEXIT\n.KVRM020 ANOP\n&KEYWORK SETC  '&KEYWORD'\n         AIF   ('&KEYWORK'(1,1) NE '''' OR                             X\n               '&KEYWORK'(K'&KEYWORD,1) NE '''').KW1\n&KEYWORK SETC  '&KEYWORK'(2,K'&KEYWORK-2)\n.KW1     ANOP\n&KVLL    SETA  K'&KEYWORK-1        SET KEYWORD LENGTH-1\n&NAME    DC    AL1(&KVLL)          KEY LENGTH-1\n         AIF   ('&SYSLIST(2)' NE '').KVRM030 IS EXIT RTN SPECIFIED\n         DC    SL2(0)              EXIT RTN NOT SPECIFIED\n         DC    SL2(0)              EXIT PARM NOT SPECIFIED\n         AGO   .KVRM049\n.KVRM030 ANOP\n         DC    SL2(&SYSLIST(2,1))  EXIT ROUTINE ADDR\n         AIF   (N'&SYSLIST(2) NE 1).KVRM046\n         DC    SL2(0)              NO RTN PARM INFO REQUESTED\n         AGO   .KVRM049\n.KVRM046 ANOP\n         DC    SL2(&SYSLIST(2,2))  EXIT RTN PARM SPECIFIED\n.KVRM049 ANOP\n         AIF   ('&SYSLIST(3)' NE '').KVRM050\n         DC    SL2(0)              NO AREA SPECIFIED\n         AGO   .KVRM060\n.KVRM050 ANOP\n         DC    SL2(&AREA)          AREA ADDR SPECIFIED\n.KVRM060 ANOP\n         AIF   ('&LEN' NE '').KVRM070\n         DC    AL1(0)              VALUE LENGTH LOW DEFAULT\n         DC    AL1(0)              VALUE LENGTH HIGH DEFAULT\n         AGO   .KVRM078\n.KVRM070 ANOP\n&LEN1    SETC  '&LEN(1)'\n&LEN2    SETC  '&LEN(2)'\n         AIF   ('&LEN1' NE '').KVRM074\n         DC    AL1(1)              VALUE LENGTH LOW IMPLIED\n         AGO   .KVRM077\n.KVRM074 ANOP\n         DC    AL1(&LEN1)          VALUE LENGTH LOW SPECIFIED\n.KVRM076 ANOP\n         AIF   ('&LEN2' NE '').KVRM077\n         DC    AL1(&LEN1)          VALUE LENGTH HIGH SPECIFIED\n         AGO   .KVRM078\n.KVRM077 ANOP\n         DC    AL1(&LEN2)          VALUE LENGTH HIGH SPECIFIED\n.KVRM078 ANOP\n         AIF   (N'&SYSLIST(5) NE 0).KVRM090 VALUE COUNT SPECIFIED\n         DC    AL1(1)              VALUE COUNT LOW DEFAULT\n         DC    AL1(1)              VALUE COUNT HIGH DEFAULT\n         AGO   .KVRM110\n.KVRM090 ANOP\n         AIF   (N'&SYSLIST(5) NE 1).KVRM094\n         AIF   ('&SYSLIST(5,1)' EQ '(').KVRM094\n         DC    AL1(0)              VALUE COUNT LOW IMPLIED\n         DC    AL1(&VALCNT)        VALUE COUNT HIGH SPECIFIED\n         AGO   .KVRM110\n.KVRM094 ANOP\n         AIF   ('&SYSLIST(5,1)' EQ ')').KVRM096\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT LOW\n         DC    AL1(&SYSLIST(5,2))  VALUE COUNT HIGH\n         AGO   .KVRM110\n.KVRM096 ANOP\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT HIGH\n.KVRM110 ANOP\n         AIF   ('&SYSLIST(4)' NE '').KVRM120\n         DC    X'00'               NO VALUE VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM120 ANOP\n         AIF   ('&SYSLIST(4)' NE 'ALPHA').KVRM130\n         DC    X'01'               ALPHA VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM130 ANOP\n         AIF   ('&SYSLIST(4)' NE 'NUMERIC').KVRM140\n         DC    X'02'               NUMERIC VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM140 ANOP\n         AIF   ('&SYSLIST(4)' NE 'ALPHANUM').KVRM150\n         DC    X'03'               ALPHANUM VALIDATION REQUESTED\n         AGO   .KVRM160\n.KVRM150 ANOP\n         MNOTE 8,'INVALID VALIDATION TYPE SPECIFIED  &TYPE'\n.KVRM160 ANOP\n         AIF   ('&FIELD1' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD2' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD3' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD4' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD5' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD6' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD7' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD8' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD9' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD10' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD11' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD12' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD13' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD14' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n         AIF   ('&FIELD15' EQ '' ).KVRM166\n&KVVN    SETA  &KVVN+1\n.KVRM166 ANOP\n         DC    AL1(&KVVN)          COUNT OF FIELDS SPECIFIED\n         DC    C'&KEYWORK'         REQUESTED KEYWORD\n         AGO   .KVRM300\n.KVRM180 ANOP\n         AIF   ('&END' NE 'YES').KVRM190\n         DC    X'FFFF'             END OF TABLE INDICATIOR\n.KVRM190 ANOP\n         MEXIT\n.KVRM300 ANOP\n         AIF   ('&FIELD1' EQ '').KVRM180\n&CNTR1   SETA  1\n&P1      SETC  '&FIELD1(1)'\n&P2      SETC  '&FIELD1(2)'\n&P3      SETC  '&FIELD1(3)'\n&P4      SETC  '&FIELD1(4)'\n         AGO   .KVRM500\n.KVRM320 ANOP\n         AIF   ('&FIELD2' EQ '').KVRM180\n&CNTR1   SETA  2\n&P1      SETC  '&FIELD2(1)'\n&P2      SETC  '&FIELD2(2)'\n&P3      SETC  '&FIELD2(3)'\n&P4      SETC  '&FIELD2(4)'\n         AGO   .KVRM500\n.KVRM330 ANOP\n         AIF   ('&FIELD3' EQ '').KVRM180\n&CNTR1   SETA  3\n&P1      SETC  '&FIELD3(1)'\n&P2      SETC  '&FIELD3(2)'\n&P3      SETC  '&FIELD3(3)'\n&P4      SETC  '&FIELD3(4)'\n         AGO   .KVRM500\n.KVRM340 ANOP\n         AIF   ('&FIELD4' EQ '').KVRM180\n&CNTR1   SETA  4\n&P1      SETC  '&FIELD4(1)'\n&P2      SETC  '&FIELD4(2)'\n&P3      SETC  '&FIELD4(3)'\n&P4      SETC  '&FIELD4(4)'\n         AGO   .KVRM500\n.KVRM350 ANOP\n         AIF   ('&FIELD5' EQ '').KVRM180\n&CNTR1   SETA  5\n&P1      SETC  '&FIELD5(1)'\n&P2      SETC  '&FIELD5(2)'\n&P3      SETC  '&FIELD5(3)'\n&P4      SETC  '&FIELD5(4)'\n         AGO   .KVRM500\n.KVRM360 ANOP\n         AIF   ('&FIELD6' EQ '').KVRM180\n&CNTR1   SETA  6\n&P1      SETC  '&FIELD6(1)'\n&P2      SETC  '&FIELD6(2)'\n&P3      SETC  '&FIELD6(3)'\n&P4      SETC  '&FIELD6(4)'\n         AGO   .KVRM500\n.KVRM370 ANOP\n         AIF   ('&FIELD7' EQ '').KVRM180\n&CNTR1   SETA  7\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM380 ANOP\n         AIF   ('&FIELD8' EQ '').KVRM180\n&CNTR1   SETA  8\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM390 ANOP\n         AIF   ('&FIELD9' EQ '').KVRM180\n&CNTR1   SETA  9\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3A0 ANOP\n         AIF   ('&FIELD10' EQ '').KVRM180\n&CNTR1   SETA  10\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3B0 ANOP\n         AIF   ('&FIELD11' EQ '').KVRM180\n&CNTR1   SETA  11\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3C0 ANOP\n         AIF   ('&FIELD12' EQ '').KVRM180\n&CNTR1   SETA  12\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3D0 ANOP\n         AIF   ('&FIELD13' EQ '').KVRM180\n&CNTR1   SETA  13\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3E0 ANOP\n         AIF   ('&FIELD14' EQ '').KVRM180\n&CNTR1   SETA  14\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM3F0 ANOP\n         AIF   ('&FIELD15' EQ '').KVRM180\n&CNTR1   SETA  15\n&P1      SETC  '&FIELD7(1)'\n&P2      SETC  '&FIELD7(2)'\n&P3      SETC  '&FIELD7(3)'\n&P4      SETC  '&FIELD7(4)'\n         AGO   .KVRM500\n.KVRM500 ANOP\n         AIF   ('&P1' NE '').KVRM720\n         DC    X'00'               NO VALUE IS SPECIFIED\n         AGO   .KVRM730\n.KVRM720 ANOP\n&CNTR2   SETA  K'&P1\n         DC    AL1(&CNTR2)         LENGTH OF VALUE SPECIFIED\n.KVRM730 ANOP\n         AIF   ('&P2' EQ '').KVRM900\n         AIF   ('&P2' NE 'N').KVRM750\n         DC    X'01'               N  OP CODE\n         AGO   .KVRM800\n.KVRM750 ANOP\n         AIF   ('&P2' NE 'O').KVRM760\n         DC    X'02'               O  OP CODE\n         AGO   .KVRM800\n.KVRM760 ANOP\n         AIF   ('&P2' NE 'M').KVRM770\n         DC    X'03'               M  OP CODE\n         AGO   .KVRM800\n.KVRM770 ANOP\n         AIF   ('&P2' NE 'X').KVRM780\n         DC    X'04'               X OP CODE\n         AGO   .KVRM800\n.KVRM780 ANOP\n         MNOTE 8,'INVALID OP SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM800 ANOP\n         AIF   ('&P3' NE '').KVRM820\n         MNOTE 8,'TO ADDR REQ AND NOT SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM820 ANOP\n         DC    SL2(&P3)            TO ADDRESS\n         AIF   ('&P4' NE '').KVRM830\n         MNOTE 8,'FROM ADDR REQ AND NOT SPECIFIED IN FIELDN='\n         MEXIT\n.KVRM830 ANOP\n         DC    SL2(&P4)            FROM ADDRESS\n         DC    AL2(L'&P3)          LENGTH OF TO ADDRESS\n.KVRM834 ANOP\n         AIF   ('&P1' NE '').KVRM840\n         AGO   .KVRM950\n.KVRM840 ANOP\n         DC    C'&P1'              VALUE CONSTANT\n         AGO   .KVRM950\n.KVRM900 ANOP\n         AIF   ('&P3' EQ '').KVRM920\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'\n         MEXIT\n.KVRM920 ANOP\n         AIF   ('&P4' EQ '').KVRM930\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'\n         MEXIT\n.KVRM930 ANOP\n         DC    X'00'               NO OP CODE\n         DC    SL2(0)              NO TO ADDR\n         DC    SL2(0)              NO FROM ADDR\n         DC    SL2(0)              NO TO LENGTH\n.KVRM950 ANOP\n         AIF   (&CNTR1 EQ 1).KVRM320\n         AIF   (&CNTR1 EQ 2).KVRM330\n         AIF   (&CNTR1 EQ 3).KVRM340\n         AIF   (&CNTR1 EQ 4).KVRM350\n         AIF   (&CNTR1 EQ 5).KVRM360\n         AIF   (&CNTR1 EQ 6).KVRM370\n         AIF   (&CNTR1 EQ 7).KVRM380\n         AIF   (&CNTR1 EQ 8).KVRM390\n         AIF   (&CNTR1 EQ 9).KVRM3A0\n         AIF   (&CNTR1 EQ 10).KVRM3B0\n         AIF   (&CNTR1 EQ 11).KVRM3C0\n         AIF   (&CNTR1 EQ 12).KVRM3D0\n         AIF   (&CNTR1 EQ 13).KVRM3E0\n         AIF   (&CNTR1 EQ 14).KVRM3F0\n         AIF   (&CNTR1 EQ 15).KVRM180\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LLB0007": {"ttr": 4361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x01\\xe1\\x01\\xe1\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 481, "newlines": 481, "modlines": 0, "user": "GIBSON"}, "text": "++USERMOD(LLB0007) .\n++VER(Z038) FMID(HAE2402)\n   /*\n     *************************************************************\n     *** ====> NOTE: SAMPLIB MUST BE ADDED TO THE SYSLIB DDDEF ***\n     ***             BEFORE THIS MOD IS APPLYED.               ***\n     *************************************************************\n    DESCRIPTION:\n                 CREATES A VERSION OF DF/DSS THAT DOES NOT REQUIRE\n                 PASSWORDS FOR BACKING UP FILES OR VOLUMES\n       */ .\n++JCLIN .\n//SMP0007  JOB  (TS),'TECH SUPPORT',REGION=2048K\n//ASM      EXEC PGM=IEV90,PARM='DECK,REFR,RENT,XREF(SHORT)'\n//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.HASPSRC,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=SYS1.ASAMPLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))\n//SYSPRINT DD   SYSOUT=A\n//SYSIN    DD   DSN=SYS2.LLBSRC(ADRUPSWD),DISP=SHR\n//SYSPUNCH DD   DSN=SYS1.ADRLIB(ADRUPSWD),DISP=SHR\n//*\n//LKED     EXEC  PGM=IEWL,PARM='RENT,REFR,AC=1,AMODE=31'\n//SYSUT1   DD    UNIT=SYSDA,SPACE=(CYL,(5,1))\n//SYSPRINT DD    SYSOUT=*\n//LLBOBJ   DD   DSN=SYS2.LLBOBJ,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN   DD   *\n  INCLUDE  LLBOBJ(ADRUPSWD)\n  ENTRY    ADRDSSU\n  ALIAS    DUMPVOL\n  SETCODE  AC(1)\n  NAME     ADRDSSU(R)\n//*\n++SRC(ADRUPSWD) DISTLIB(LLBSRC) .\nADRUPSWD TITLE 'DSS USER PASSWORD EXIT ROUTINE                '\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = ADRUPSWD                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DSS USER PASSWORD ROUTINE           *\n*                                                                     *\n*             FUNCTION =                                              *\n*                   1) IF OPERATION IS DEFRAG SET RETURN CODE TO 0    *\n*                   2) IF PGM NAME IS DUMPVOL DYNAMICALLY ALLOCATE    *\n*                      AND OPEN \"SECURITY\" DATASET                    *\n*                      (IF THIS DATASET IS PASSWORD PROTECTED THIS    *\n*                       WILL CAUSE THE SYSTEM TO ASK FOR A PASSWORD)  *\n*                   2A) IF NO ABEND (I.E. 913) OCCURS SET RETURN CODE *\n*                       TO ZERO.                                      *\n*                       ELSE SET RETURN CODE TO 12                    *\n*                                                                     *\n*                OPERATION =                                          *\n*                   INVOKED BY DSS (ADRDSSU)                          *\n*                                                                     *\n*              INPUT =                                                *\n*                   R1  - POINTER TO FOUR WORD PARAMETER AREA         *\n*                   R13 - ADDRESS OF 72 BYTE STANDARD REGISTER SAVE   *\n*                         AREA                                        *\n*                   R14 - RETURN ADDRESS                              *\n*                   R15 - ADDRESS OF ADRUPSWD                         *\n*                   PARAMETER LIST                                    *\n*                      FIRST  WORD - POINTER TO THE FORMAT-1 DSCB FOR *\n*                                    A PASSWORD-PROTECTED             *\n*                                    NON-VSAM DATASET OR              *\n*                                    POINTER TO THE CLUSTER NAME FOR  *\n*                                    A VSAM DATASET OR                *\n*                                    ZERO FOR A VOLUME LEVEL ENTRY    *\n*                      SECOND WORD - POINTER TO THE CATALOG NAME OR   *\n*                                    ZERO FOR A VOLUME LEVEL ENTRY    *\n*                      THIRD  WORD - POINTER TO THE VOLUME SERIAL     *\n*                                    NUMBER                           *\n*                      FOURTH WORD - CONTAINS FLAGS WHICH ARE SET AS  *\n*                                    FOLLOWS:                         *\n*                           BYTE 1                                    *\n*                           BIT   MEANING                             *\n*                           0     END OF PARM LIST. MUST BE ONE       *\n*                           1     IF ON, READ ACCESS IS DESIRED ON    *\n*                                 THE VOLUME. IF OFF WRITE ACCESS IS  *\n*                                 REQUIRED.                           *\n*                           2     SET TO ONE FOR DUMP    OPERATION    *\n*                           3     SET TO ONE FOR RESTORE OPERATION    *\n*                           4     SET TO ONE FOR COPY    OPERATION    *\n*                           5     SET TO ONE FOR PRINT   OPERATION    *\n*                           6     SET TO ONE FOR DEFRAG  OPERATION    *\n*                           7     RESERVED                            *\n*                           BYTE 2                                    *\n*                           BIT   MEANING                             *\n*                           0     SET TO ONE FOR DEFRAG, PRINT, DUMP  *\n*                                 OR RESTORE FOR A DATASET OPERATION. *\n*                           1     SET TO ONE FOR A FULL VOLUME DUMP,  *\n*                                 RESTORE OR COPY OPERATION           *\n*                           2     SET TO ONE FOR A PARTIAL VOLUME     *\n*                                 (BY TRACKS) DUMP, RESTORE OR COPY   *\n*                                 OPERATION                           *\n*                           3 TO 7 RESERVED                           *\n*                           BYTE 3                                    *\n*                           BIT   MEANING                             *\n*                           0     SET ON FOR VOLUME LEVEL ENTRY       *\n*                                 SET OFF FOR DATASET LEVEL ENTRY     *\n*                           1     SET ON FOR VSAM DATASETS CATALOGED  *\n*                                 IN AN ICF CATALOG.                  *\n*                                 CLUSTER AND CATALOG NAMES ARE PASSED*\n*                           2 TO 7 RESERVED                           *\n*                           BYTE 4 RESERVED                           *\n*              OUTPUT = R15 CONTAINS RETURN CODE                      *\n*                       (SEE MANUAL SC26-3949)                        *\n*              NOTES =                                                *\n*                                                                     *\n*                                                                     *\n*             ENTRY POINTS = ADRUPSWD (ONLY ENTRY POINT)              *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nADRUPSWD CSECT ,\nADRUPSWD AMODE 31\nADRUPSWD RMODE ANY\n***********************************************************************\n*\n*        REGISTER EQUATES\n*\n***********************************************************************\nR0       EQU   0                   REG 0  - WORK REG\nR1       EQU   1                   REG 1  - WORK/PARMETER REG\nR2       EQU   2                   REG 2  - WORK REG\nR3       EQU   3                   REG 3  - WORK REG\nR4       EQU   4                   REG 4  - UNUSED\nR5       EQU   5                   REG 5  - UNUSED\nR6       EQU   6                   REG 6  - BASE FOR OUTPUT LINE\nR7       EQU   7                   REG 7  - BASE FOR COMMON PARM AREA\nR8       EQU   8                   REG 8  - BASE FOR BLDL LIST\nR9       EQU   9                   REG 9  - BASE FOR SMF RECORD\nR10      EQU   10                  REG 10 - UNUSED\nR11      EQU   11                  REG 11 - UNUSED\nR12      EQU   12                  REG 12 - CSECT BASE REG\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG\nR14      EQU   14                  REG 14 - LINKAGE REGISTER\nR15      EQU   15                  REG 15 - WORK REG\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SAVE REGISTERS, LOAD PARM DSECT AND GET WORK AREA            *\n*                                                                     *\n***********************************************************************\n         SAVE  (14,12),,'ADRUPSWD,&SYSDATE,&SYSTIME'\n         LR    R12,R15             LOAD BASE REGISTER\n         USING ADRUPSWD,R12        SET UP CSECT ADDRESSABILITY\n         LA    R7,0(,R1)           PARAMETER AREA ADDRESS\n         USING ADRUPB,R7           SET UP ADDRESSABILITY TO PARMS\n         L     R0,DATALEN          LOAD GETMAIN PARMS\n         GETMAIN R,LV=(0)          GET STORAGE FOR DATA DSECT\n         ST    R13,SAVEBK-SAVE(,R1) SAVE CALLER'S SAVE AREA ADDR\n         ST    R1,SAVEFW-SAVE(,R13) SAVE MY SAVE AREA ADDRESS\n         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED ADDR\n         USING DATA,R13            SET UP DATA DSECT ADDR.\n         B     TESTDFRG\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        TEST FOR DEFRAG OPERATION IF SO BRANCH TO RET CODE 0         *\n*                                                                     *\n***********************************************************************\nTESTDFRG DS    0H\n         TM    UPFLG1,UPDEFRAG     DOING DEFRAG ?\n         BO    RET0                YES, EXIT CODE 0\n         TM    UPFLG1,UPPRINT      DOING PRINT  ?\n         BNO   GETPGNM             NO, CHECK PROGRAM NAME\n         TM    UPFLG3,UPIND        VOLUME CHECKING\n         BO    RET8                YES, RETURN CODE 8\n         L     R1,UPDSCBAD         LOAD POINTER TO DSCB/DSN\n         LTR   R1,R1               IS IT ZERO ?\n         BZ    RET8                YES, RETURN CODE 8\n         CLC   0(44,R1),=CL44'PASSWORD' PASSWORD DATASET ?\n         BE    RET8                YES, MAKE SURE THEY KNOW THE PSWD\n         B     GETPGNM             NO, BRANCH TO CHECK PROGRAM NAME\n         DROP  R7\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CHECK FOR PROGRAM NAME OF DUMPVOL                            *\n*        IF NOT BRANCH TO RETURN CODE 12                              *\n*                                                                     *\n***********************************************************************\n         SPACE ,\nGETPGNM  DS    0H\n         L     R1,PSATOLD-PSA(,0)  LOAD ADDRESS OF CURRENT TCB\n         L     R1,TCBOTC-TCB(,R1)  LOAD ORIGINATING TCB\n         L     R1,TCBRBP-TCB(,R1)  LOAD ADDRESS OF CURRENT RB\n         L     R1,RBCDE-RBBASIC(,R1)  LOAD ADDRESS OF CURRENT CDE\n         CLC   CDNAME-CDENTRY(8,R1),=CL8'DUMPVOL'\n         BNE   RET12               RETURN CODE 12\n         B     RET0                RETURN CODE 0\n*        B     ALCSCRTY            BRANCH TO ALLOC SECURITY DATASET\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        HERE WE DYNAMICALLY ALLOCATE THE SECURITY DATASET AND        *\n*        OPEN IT FOR OUTPUT THIS WILL CAUSE THE SYSTEM                *\n*        TO ASK FOR A PASSWORD IF THE SECURITY DATASET IS PASSWORD    *\n*        PROTECTED                                                    *\n*                                                                     *\n***********************************************************************\nALCSCRTY DS    0H\n         LA    R8,DYNPARMS         SET UP BASE REG FOR DYNALLOC PARMS\n         USING S99RBP,R8           ESTABLISH ADDRESSABILITY\n         LA    R4,S99RBPTR+L'S99RBPTR POINT PAST RBPTR\n         USING S99RB,R4            ESTABLISH ADDRESSABILITY\n         ST    R4,S99RBPTR         POINT RBPTR TO RB\n         OI    S99RBPTR,S99RBPND   TURN ON HIGH ORDER BIT OF RBPTR\n         XC    S99RB(RBLEN),S99RB  CLEAR RB\n         MVI   S99RBLN,RBLEN       SET LENGTH OF RB\n         MVI   S99VERB,S99VRBAL    SET VERB CODE TO ALLOCATE FUNCTION\n         LA    R5,S99RB+RBLEN      POINT PAST RB\n         USING S99TUPL,R5          ESTABLISH ADDRESSABILTY\n         ST    R5,S99TXTPP         SET RB TEXT POINTERS\n         SPACE ,\n         LA    R6,S99TUPL+4*L'S99TUPTR POINT PAST 4 TEXT UNIT POINTERS\n         USING S99TUNIT,R6         ESTABLISH ADDRESSABILITY\n         ST    R6,S99TUPTR         PNT 1ST TXT UNIT PTR TO 1ST TXT UNIT\n         LA    R7,DALDSNAM         GET KEY FOR DSNAME\n         STH   R7,S99TUKEY         AND SET IT IN TEXT UNIT FIELD\n         LA    R7,1                SET NUMBER OF DSN PARMS ...\n         STH   R7,S99TUNUM         ... TO ONE\n         LA    R7,L'SECURITY       SET LENGTH OF DSN FIELD ...\n         STH   R7,S99TULNG         ... IN TEXT UNIT\n         MVC   S99TUPAR(L'SECURITY),SECURITY\n         SPACE ,\n         LA    R6,S99TUNIT+S99TUPAR-S99TUNIT+L'SECURITY POINT PAST TU\n         LA    R5,S99TUPL+L'S99TUPTR POINT TO NEXT UNIT POINTER\n         ST    R6,S99TUPTR         SET TEXT UNIT POINTER\n         LA    R7,DALSTATS         GET KEY FOR STATUS ...\n         STH   R7,S99TUKEY         ... AND STORE IT IN TEXT UNIT\n         LA    R7,1                SET NUMBER OF STATUS PARMS ...\n         STH   R7,S99TUNUM         ... TO ONE\n         STH   R7,S99TULNG         SET PARM LEN TO ONE\n         MVI   S99TUPAR,SHARE      SET SHARE\n         SPACE ,\n         LA    R6,S99TUNIT+S99TUPAR-S99TUNIT+1          POINT PAST TU\n         LA    R5,S99TUPL+L'S99TUPTR POINT TO NEXT UNIT POINTER\n         ST    R6,S99TUPTR         SET TEXT UNIT POINTER\n         LA    R7,DALCLOSE         GET KEY FOR 'UNALLOC AT CLOSE' ...\n         STH   R7,S99TUKEY         ... AND STORE IT IN TEXT UNIT\n         LA    R7,0                SET NUMBER OF PARMS ...\n         STH   R7,S99TUNUM         ... TO ZERO\n         SPACE ,\n         LA    R6,S99TUNIT+S99TUPAR-S99TUNIT            POINT PAST TU\n         LA    R5,S99TUPL+L'S99TUPTR POINT TO NEXT UNIT POINTER\n         ST    R6,S99TUPTR         SET TEXT UNIT POINTER\n         OI    S99TUPTR,S99TUPLN   TURN ON HIGH ORDER BIT FOR LAST PRM\n         LA    R7,DALRTDDN         GET KEY FOR 'RETURN DDNAME' ...\n         STH   R7,S99TUKEY         ... AND STORE IT IN TEXT UNIT\n         LA    R7,1                SET NUMBER OF 'RETURN DDN' PARMS ...\n         STH   R7,S99TUNUM         ... TO ONE\n         LA    R7,8                GET PARM LENGTH FOR DDNAME\n         STH   R7,S99TULNG         SET PARM LEN FOR DDNAME\n         LR    R1,R8               SET PARM REG FOR DYNALLOC\n         SPACE ,\n         DYNALLOC                  CALL DYNALLOC\n         L     R0,S99ERROR\n         LTR   R15,R15             IF NOT SUCESSFULL\n         BNZ   RET12               RETURN CODE 12\n         B     SETESTAE            BRANCH TO SET ESTAE (RECOVERY) ENV.\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SET UP RECOVERY ENVIRONMENT                                  *\n*                                                                     *\n***********************************************************************\nSETESTAE DS    0H\n         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST\n         LA    R0,RTRYRTN1             RETRY ROUTINE - NO SDWA\n         ST    R0,ESTAPARM             STORE IN PARAMETER LIST\n         LA    R0,RTRYRTN2             RETRY ROUTINE - WITH SDWA\n         ST    R0,ESTAPARM+4           STORE IN PARAMETER LIST\n         STM   R12,R13,ESTAPARM+8      STORE BASE & DATA REG IN PARM\n         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY\n         B     SETCLSTS\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SET UP SECURDCB, OPEN CLIST AND CLOSE CLIST                  *\n*                                                                     *\n***********************************************************************\nSETCLSTS DS    0H\n         MVC   SECURDCB(DCBLISTL),DCBLIST\n         MVC   SECURDCB+40(8),DYNDDNAM\n         MVC   OPENDATA(OPENLEN),OPENLIST\n         MVC   CLOSDATA(CLOSLEN),CLOSLIST\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        OPEN, CLOSE, CANCEL ESTAE AND RETURN                         *\n*                                                                     *\n***********************************************************************\n         LA    R2,SECURDCB\n         OPEN  ((2)),MF=(E,OPENDATA)\n         LA    R2,SECURDCB\n         CLOSE ((2)),MF=(E,CLOSDATA)\n         ESTAE 0                   CANCEL ESTAE EXIT\n         B     RET0\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        ESTAE EXIT ROUTINE                                           *\n*                                                                     *\n*        THIS CODE WILL ONLY BE EXECUTED IN THE CASE WHERE AN ABEND   *\n*        OCCURS AFTER THE ESTAE MACRO HAS BEEN EXECUTED.              *\n*        THE PURPOSE OF THIS CODE IS TO INTERCEPT 913 (INVALID PSWD)  *\n*        ABENDS WHEN THE WRONG PASSWORD IS GIVEN FOR THE SECURITY     *\n*        DATASET. IT THEN \"RECOVERS\" TO A ROUTINE THAT SETS THE       *\n*        RETURN CODE TO 12.                                           *\n*                                                                     *\n***********************************************************************\nRECOVERY DS    0H\n         DROP  R12\n         USING *,R15               SET UP ADDRESSABILITY\n         LA    R4,4                PUT 4 IN REGISTER FOR COMPARE\n         CR    R0,R4               IS SDWA PRESENT?\n         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA\n         L     R0,0(R2)            LOAD RETRY ADDRESS FROM PARAM LIST\n         LA    R15,4               SET RETCODE TO RETRY ADDR IN R0\n         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR\nHAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT\n         ST    R14,12(R13)         SAVE RETURN ADDRESS\n         L     R2,0(R1)            LOAD PARAM LIST ADDR FROM SDWA\n         L     R2,4(R2)            LOAD RETRY ADDRESS\n         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)\n         DROP  R15\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                 *\n*                                                                     *\n***********************************************************************\n         USING ADRUPSWD,R12        SET UP CSECT ADDRESSABILITY\nRTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT\n         LM    R12,R13,8(R1)       LOAD REGS FOR ESTAE PARM LIST\n         B     RTRYRTN2\n***********************************************************************\n*                                                                     *\n*        ESTAE RETRY ROUTINE WHEN SDWA WAS PRESENT                    *\n*                                                                     *\n***********************************************************************\nRTRYRTN2 DS    0H                  ESTAE RETRY ROUTINE WITH SDWA\n         LA    R2,SECURDCB\n         CLOSE ((2)),MF=(E,CLOSDATA)\n         LA    R15,12              LOAD RETURN CODE OF 12\n         B     RETURN              AND GET OUT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SET RETURN CODE, FREE STORAGE AND RETURN                     *\n*                                                                     *\n***********************************************************************\nRET0     DS    0H\n         LA    R15,0\n         B     RETURN\nRET8     DS    0H\n         LA    R15,8\n         B     RETURN\nRET12    DS    0H\n         LA    R15,12\n         B     RETURN\nRETURN   DS    0H                  ESTAE RETRY ROUTINE WITH SDWA\n*                                  JUST FREE STORAGE AND EXIT\n         LR    R2,R15              SAVE RET CODE\n         LR    R1,R13              GET FREEMAIN ADDRESS\n         L     R13,SAVEBK          LOAD OLD REG 13\n         L     R0,DATALEN          LOAD FREEMAIN PARM\n         FREEMAIN R,LV=(0),A=(1)   FREE DATA DSECT STORAGE\n         LR    R15,R2              SET RETURN CODE\n         L     R14,12(,R13)        LOAD RETURN ADDRESS\n         RETURN (0,12),RC=(15)     RETURN TO CALLER\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        CONSTANTS, LITERALS AND CLIST TEMPLATES                      *\n*                                                                     *\n***********************************************************************\nSECURITY DC    CL44'SYS2.APFLIB'\n         LTORG ,\n         PRINT ON,NOGEN\n*\n* DEFINE ESTAE LIST FORM\n*\nESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST\nLESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH\n*\n* DEFINE DCB\n*\nDCBLIST  DCB   DDNAME=XXXXXXXX,MACRF=(W),DSORG=PO\nDCBLISTL EQU   *-DCBLIST\n*\n* DEFINE OPEN\n*\nOPENLIST OPEN  (,(OUTPUT)),MF=L\nOPENLEN  EQU   *-OPENLIST\nCLOSLIST CLOSE (,),MF=L\nCLOSLEN  EQU   *-CLOSLIST\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        SYSTEM DSECT                                                 *\n*                                                                     *\n***********************************************************************\n         IHARB\n         IEFZB4D0\n         IEFZB4D2\nRBLEN    EQU   S99RBEND-S99RB\n         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO\n         IHAPSA                    PSA\n         IKJTCB                    TCB\n         IHACDE                    CDE\n         ADRUPB\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        DSECT FOR GETMAIN'ED STORAGE                                 *\n*                                                                     *\n***********************************************************************\nDATA     DSECT\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\n*\n*        STORAGE FOR ESTAE PARM LIST\n*\nESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA\nESTAPARM DS    4F               PARAMETER LIST PASSED TO RETRY ROUTINE\n*\n*        STORAGE FOR DYN ALLOC PARM LIST\n*\nSHARE    EQU   X'08'\nDYNPARMS DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\n         DS    XL(L'S99RBPTR)\n         DS    XL(RBLEN)\n         DS    4XL(L'S99TUPTR)\n         DS    XL(S99TUPAR-S99TUNIT+L'SECURITY)\n         DS    XL(S99TUPAR-S99TUNIT+1)\n         DS    XL(S99TUPAR-S99TUNIT)\n         DS    XL(S99TUPAR-S99TUNIT)\nDYNDDNAM DS    CL8\n*\n*        STORAGE FOR DCB\n*\nSECURDCB DCB   DDNAME=XXXXXXXX,MACRF=(W),DSORG=PO\n*\n*        STORAGE FOR OPEN CLIST\n*\nOPENDATA OPEN  (,(OUTPUT)),MF=L\n*\n*        STORAGE FOR CLOSE CLIST\n*\nCLOSDATA CLOSE (,),MF=L\n*\n*        EXTRA STORAGE IF NEEDED FOR ZAP PATCHES\n*\n         DS    6D\nLDATA    EQU   *-DATA\n         EJECT ,\nADRUPSWD CSECT\n         DS    0D\nDATALEN  DC    0F'0',AL1(230),AL3(LDATA)\nMODLEN   EQU   *-ADRUPSWD\nLPATCH   EQU   (MODLEN+9)/10/8+1   ADD 10% FOR PATCH AREA\nLPATCHL  DC    AL2(LPATCH*8)\nSPATCH   DC    S(PATCH)\nPATCH    DC    (LPATCH)D'00'\n         END   ADRUPSWD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSGENT": {"ttr": 4614, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "GIBSON"}, "text": "         MACRO\n         MSGENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MESSAGE TABLE ENTRY DSECT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE ,\nMSGENT   DSECT\nENTLEN   DS    H                       LENGTH OF THIS ENTRY\nENTDESC  DS    XL2                     DSEC CODE\nENTROUT  DS    XL2                     ROUTE CODE\nENTFLAG  DS    XL1                     FLAGS\nDESCFLG  EQU   B'10000000'             DESC CODE SPECIFIED\nROUTFLG  EQU   B'01000000'             ROUTE CODE SPECIFIED\nCMMDFLG  EQU   B'00100000'             COMMAND SPECIFED\n*        EQU   B'00010000'             UNUSED\nJBNMFLG  EQU   B'00001000'             JOBNAME SPECIFIED\nDELFLG   EQU   B'00000100'             DELETE SPECIFIED\nLISTFLG  EQU   B'00000010'             LIST SPECIFIED\n*        EQU   B'00000001'             UNUSED\nENTFLG2  DS    XL1                     FLAGS UNUSED\nENTJBNM  DS    CL8                     JOBNAME IF SPECIFIED\nENTHDRLN EQU   *-MSGENT                LENGTH OF FIXED HDR\nENTLID   DS    XL1                     MESSAGE LENGTH\nENTID    DS    CL127                   MESSAGE\n         DS    XL1                     NUMBER OF COMMANDS\n         DS    XL1                     COMMAND LENGTH\n         DS    CL127                   COMMAND\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTOR": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x930_\\x00\\x931\\x9f\\x120\\x00\\x82\\x00\\x82\\x00\\x00\\xc7\\xc9\\xc2\\xe2\\xd6\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-01T00:00:00", "modifydate": "1993-11-15T12:30:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "GIBSON"}, "text": "//WTOR     JOB  TS,GIBSON,MSGCLASS=X,COND=(4,LT),REGION=4096K,\n//         CLASS=Y\n//ASMBL    EXEC ASMFCL,PARM.ASM='OBJ,NODECK',\n//         PARM.LKED='XREF,NCAL,LIST'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT2   DD SPACE=(CYL,(50,10))\n//SYSUT3   DD SPACE=(CYL,(50,10))\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n***********************************************************************\n*   THIS PROGRAM WAS WRITTEN TO TEST IEAVMXIT. IT WILL TAKE WHATEVER  *\n*   MESSAGE IS SPECIFIED AS A PARM AND PUT IT OUT AS A WTO IF         *\n*   PARM='WTO=MSG' IS SPECIFIED OR AS A WTOR IF                       *\n*   PARM='WTOR=MSG' IS SPECIFIED.                                     *\n*                                                                     *\n*  FOLLOWING IS JCL USED TO INVOKE:                                   *\n*  //SYSTEST  JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y                       *\n*  //TEST1    EXEC PGM=WTOR,PARM='WTOR=SYSTEM TESTING'                *\n*  //STEPLIB  DD   DSN=GIBSON.LOADLIB,DISP=SHR                        *\n***********************************************************************\n         TITLE 'WTOR'\nWTOR     CSECT                     BEGINING OF PROGRAM\n         USING *,R12               SET UP BASE REG\n         SAVE  (14,12),,WTOR..&SYSDATE       SAVE REGESTERS\n         LR    R12,R15             SET UP ADDRESSABILITY\n         LR    R2,R13              SAVE ADDR OF PREVIOUS SAVEAREA\n         LA    R13,SAVEAREA        POINT TO CURRENT SAVEAREA\n         ST    R13,8(R2)           LINK PREVIOUS SAVEAREA TO SAVEAREA\n         ST    R2,4(R13)           LINK SAVEAREA TO PREVIOUS SAVEAREA\n         L     R1,0(,R1)           LOAD ADDR OF PARM INTO R1\n         CLC   0(2,R1),=H'0'       PARM LENGTH = 0?\n         BE    INVPARM             YES, ISSUE INVALID PARM WTO\nDOPARM   DS    0H\n         CLC   0(2,R1),=H'5'       COMPARE LENGTH OF TO MAX LENGTH\n         BL    INVPARM             INVALID PARM LENGTH\n         CLC   =C'WTO=',2(R1)      WTO PARAM\n         BE    DOWTO               YES, BRANCH TO PROCESS\n         CLC   =C'WTOR=',2(R1)     WTOR PARAM\n         BE    DOWTOR              YES, BRANCH TO PROCESS\n         BNE   INVPARM             NO, INVALID PARAMTER\n*\nDOWTO    DS    0H\n         LH    R2,0(,R1)\n         SH    R2,=H'4'\n         BNP   INVPARM\n         CH    R2,=H'120'\n         BH    INVPARM\n         BCTR  R2,0\n         LA    R3,6(,R1)\n         EX    R2,MVCWTO\n*MVCWTO  MVC   WTOL+4(*-*),0(R3)\n         WTO   MF=(E,WTOL)\n         B     RETURN\nMVCWTOR  MVC   WTORL+12(*-*),0(R3)\nMVCWTO   MVC   WTOL+4(*-*),0(R3)\n****\nDOWTOR   DS    0H\n         LH    R2,0(,R1)\n         SH    R2,=H'5'\n         BNP   INVPARM\n         CH    R2,=H'120'\n         BH    INVPARM\n         BCTR  R2,0\n         LA    R3,7(,R1)\n         EX    R2,MVCWTOR\n*MVCWTOR MVC   WTORL+12(*-*),0(R3)\n*MVCENT  MVC   ENTID(*-*),0(R3)\n         MVI   WTORECB,0           CLEAR OUT ECB FOR REPLY\n         WTOR  MF=(E,WTORL)\n         WAIT  1,ECB=WTORECB       WAIT FOR OPERATOR TO REPLY\n         B     RETURN\n****\n*\nINVPARM  DS    0H\n         WTO   'PARAMETER MISSING OR INVALLID, EXECUTION ENDS',        X\n               ROUTCDE=(14),DESC=(7)\n         B     RETURN\nRETURN   DS    0H\n         L     R13,SAVEAREA+4      RESTORE R13\n         SLR   R15,R15\n         RETURN (14,12),T,RC=(15)  RETURN TO MVS\n         EJECT ,\n*---------------------------------------------------------------------*\n*        WORK AREA AND CONSTANTS                                      *\n*---------------------------------------------------------------------*\n         SPACE ,\nSAVEAREA DS    18F                 SAVEAREA\nWTORECB  DC    F'0'                ECB FOR WTOR\nWTORRPLY DS    CL80                REPLY FOR WTOR\nWTORL    WTOR  '                                                       X\n                                                                       X\n                   ',WTORRPLY,80,WTORECB,ROUTCDE=(14),DESC=(7),MF=L\nWTOL     WTO   '                                                       X\n                                                                       X\n                   ',ROUTCDE=(14),DESC=(7),MF=L\n         EJECT ,\n*---------------------------------------------------------------------*\n* REGISTER EQUATES                                                    *\n*---------------------------------------------------------------------*\n         SPACE ,\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       ADDRESS OF SUPPLIED PARAMETERS\nR2       EQU   2                       ADDRESS OF EXIT PARAMETERS\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       WORK REGISTER\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REGISTER\nR8       EQU   8                       WORK REGISTER\nR9       EQU   9                       POINTER TO TABLE ENTRY\nR10      EQU   10                      BASE REGISTER FOR WORK AREA\nR11      EQU   11                      2ND BASE REGISTER\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n         EJECT ,\n*---------------------------------------------------------------------*\n* LIERTAL POOL                                                        *\n*---------------------------------------------------------------------*\n         SPACE ,\n         LTORG ,\n         END                     , END OF PROGRAM\n//LKED.SYSLMOD DD DSN=GIBSON.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n ENTRY WTOR\n NAME  WTOR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT126/FILE126.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT126", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}