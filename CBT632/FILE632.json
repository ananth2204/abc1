{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012511000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE632.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE632.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x07'", "DS1TRBAL": "b']^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x90\\x00\\r\\x04\\x91\\x00\\x02\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04<\\x00\\x00\\x01\\x03\\x14o\\x01\\x03\\x14o\\t9\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf0@@@'", "ispf": {"version": "04.60", "flags": 0, "createdate": "2003-05-26T00:00:00", "modifydate": "2003-05-26T09:39:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-460"}, "text": "REGULAR CBT TAPE - VERSION 460    FILE:  632\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT460.FILE632\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,445 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/26/03    09:39:08    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x03\\x14?\\x01\\x03\\x14?\\x01&\\x00-\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-23T00:00:00", "modifydate": "2003-05-23T01:26:18", "lines": 45, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    Contribution to CBT\n   Date:    Wed, 21 May 2003 15:28:31 +0930\n   From:    \"Cherlet, Gary (JTS)\" <Cherlet.Gary@saugov.sa.gov.au>\n     To:    \"'sbgolob@cbttape.org'\" <sbgolob@cbttape.org>\n     CC:    \"'Sam Knutson'\" <Sam.Knutson@asg.com>\n\n\nSam -\nAt the end of this e-mail is a note that I had\nreceived from Sam Knutson as a result of a thread\non the AMS List Server.  Please find attached the\n\"EBCDIC to BASE64\" encoder utility which was the\nsubject of that thread - and which Sam suggested I\nshould contribute.\n\nI believe that now such a utility is now available from a\nnumber of sources (for example when you obtain the XMITIP\ntool) - but when I needed this utility I couldn't find\nanything.\n\nIn any event - if you think there is some value in\nputting this out on the CBT - you are welcome to it.  The\nassembler program has a #JISTAMP macro coded in it - the\nmacro is included in the XMI file for those who want to\nleave it in the program - or people can simply remove it\n- it just puts a date:time stamp into the load module.  I\nwould be pleased if you can use this simple little tool -\nsince in the past I have downloaded material from CBT and\nfound it very useful.\n\nI managed to locate some documentation which I have\nincluded in the ZIP file - it contains a DISCLAIMER and\nCOPYRIGHT notice.  I hope that this is adequate for the\nneeds of the CBT.  (See member $$DOCO .)\n\nIf you need anything else from me - please let me know -\ncheers - Gary\n\nGary Cherlet\nCurrently at\nJustice Technology Services\nTelephone (+61-8)  8226 5199\nFacsimile  (+61-8)  8226 5355\nMobile      (+61)     041 333 1613\nMailto:cherlet.gary@saugov.sa.gov.au\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\x03\\x14o\\x01\\x03\\x14o\\t5\\x005\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-26T00:00:00", "modifydate": "2003-05-26T09:35:04", "lines": 53, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: RE: Contribution to CBT\nDate: Mon, 26 May 2003 09:31:14 +0930\nFrom: \"Cherlet, Gary (JTS)\" <Cherlet.Gary@saugov.sa.gov.au>\nTo: \"'Sam Golob'\" <sbgolob@cbttape.org>\n\nWalking home Friday night I realised that we had called this\ncontribution the \"EBCDIC to BASE64 Converter\". In actual fact\nthere is no real reason to convert EBCDIC directly to BASE64 -\nusually you want a file in BASE64 so you can send the file as a\nMIME attachment - in which case the source file should already be\nin ASCII. So there's a couple of issues:\n\n1) Contribution is misnamed - it should simply be \"BASE64\nEncoder\" or \"Mainframe Assembler BASE64 Encoder\"\n\n2) Users who have EBCDIC files to be e-mailed as attachments\nshould first convert them to ASCII - so I've added in the TOASCII\nand TOASCILF programs to do this (documentation upgraded) - and\nalso a sample job stream to show how an EBCDIC file with HTML\ndirectives could be e-mailed as an attachment - also shown in the\n$$DOCO.\n\nThis should now be a more complete offering - and ought to be of\nsome use to people who don't have XMITIP.\n\nI didn't change the versioning or dates inside the documentation\nentries - as this is a \"new\" offering.  I suppose what I've done\nis just corrected the initial release of \"ver 1.0\" .  All of\nthe changes, including the new programs, have been made inside\nthe XMI file - so you shouldn't have too much to do to whip this\npuppy into shape.\n\nSorry about being so vague about all of this - it was just that\nthe initial suggestion had focused on the BASE64 encoding - I\nforgot in the rush to send it out that on it's own it might not\nbe particularly useful.\n\nCheers - Gary\n\nGary Cherlet\nCurrently at\nJustice Technology Services\nTelephone (+61-8)  8226 5199\nFacsimile  (+61-8)  8226 5355\nMobile      (+61)     041 333 1613\nMailto:cherlet.gary@saugov.sa.gov.au\nPersonal Mailto:gary@cherlet.com\n\n    ---------------------------------------------------------------------\n                 Name: CBT632.zip\n   CBT632.zip    Type: WinZip File\n                       (application/x-unknown-content-type-WinZip)\n             Encoding: base64\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOCO": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x009\\x01\\x03\\x14?\\x01\\x03\\x14o\\t\\x16\\x01I\\x00\\x83\\x00\\x00\\xd1\\xc4\\xc1\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-05-23T00:00:00", "modifydate": "2003-05-26T09:16:39", "lines": 329, "newlines": 131, "modlines": 0, "user": "JDAGPC"}, "text": "\nv 1.0                                         May 21st, 2003\n\n\n                       Table of Contents\n\n     DISCLAIMER\n1    COPYRIGHT\n\n2    BASE 64 ENCODER ! TOBASE64 UTILITY\n2.1  JES Job Log Message Output\n2.2  Return Codes\n2.3  JCL to run the TOBASE64  Data Conversion Program\n\n3    TOASCII ! EBCDIC to ASCII Conversion\n3.1  JES Job Log Message Output\n3.2  Return Codes\n3.3  JCL to run the TOASCII   Data Conversion Program\n\n4    TOASCILF ! EBCDIC to ASCII Conversion - With CRLF Added\n4.1  JES Job Log Message Output                                 2\n4.2  Return Codes                                               3\n4.3  JCL to run the TOASCILF  Data Conversion Program           3\n\n5    Putting it all together - Sample e-mail job\n\nDISCLAIMER\n\n    No warranties are supplied or implied.  No claims for\n    damage or loss incurred by use of these programs will\n    be accepted.  No warranty is made to the accuracy of\n    the programs and related material and no responsibility\n    is assumed for any modification directly or indirectly\n    caused by the use of this software.  It is the user's\n    responsibility to evaluate the usefulness of the\n    material supplied.  We do not guarantee to keep any\n    material provided up to date, nor do we guarantee to\n    provide any corrections or extensions NO WARRANTY,\n    EXPRESSED OR IMPLIED, IS PROVIDED BY ANY OR ALL OF THE\n    PERSONS AND/OR INSTITUTIONS EDITING, DUPLICATING, OR\n    OTHERWISE HANDLING THE SUPPLIED PROGRAMS AND RELATED\n    MATERIAL.  PERSONS AND/OR INSTITUTIONS USING ANY OF THE\n    SUPPLIED PROGRAMS OR MATERIALS, DO SO ENTIRELY AT THEIR\n    OWN RISK.  Use of these programs and/or related\n    materials indicates acceptance of these terms.\n\n1  Copyright\n\nYou are authorised to use these programs, subject to the\ndisclaimer notice above. You may not pass these programs on to\nothers. You may not sell the programs in either source or object\nform, either separately or as part of a package. You can modify\nthe programs to suit the needs of your installation, but this is\ndone at your own risk and we are not obliged to help you to do so.\n\n2  BASE 64 Encoder ! TOBASE64 Utility\n\nTOBASE64 is a user written program whose purpose is to read data\nfrom the file pointed to by the SYSUT1 DD statement and, treating\nit as a continuous bit stream, encode it as a BASE64 data stream.\nThe  resultant encoded data is written to the file pointed to by\nthe  SYSUT2 DD statement. The required DD statements for the\ninput and output files follow:\n\nDD Name Description of file contents\n\nSYSUT1  Input file containing data which the user wishes to\n        convert to BASE64 prior to e-mailing from the mainframe\n        using SMTP.  Usually the file will be in ASCII for\n        transferring to a PC based platform.  The following input\n        characteristics are allowed:\n\n               Physical sequential\nRECFM=VB(A) maximum lrecl=1028 (ie. user data length=1024)\nRECFM=FB(A) maximum lrecl=1024\n\nSYSUT2  Output file contains the data from SYSUT1 encoded in BASE\n        64. The \"safe 64\" characters are in EBCDIC - since the\n        mainframe SMTP processing does the EBCDIC to ASCII\n        conversion.\n\n2.1  JES Job Log Message Output\n\nDuring program execution, messages pertaining to the characteristics\nof the input file are displayed.  If the file is neither fixed not\nvariable the run will terminate with return code 16.  Also if the\nLRECL is too big the run will terminate with return code 16.\n\nA normally completed run will have return code 0 (zero) and the\njob log will look similar to the following example:\n\n  Display  Filter  View  Print  Options  Help\n-----------------------------------------------------------------------------\nSDSF OUTPUT DISPLAY JDAGPC$D JOB04716 DSID 2 LINE 0 COLUMNS 02- 81\nCOMMAND INPUT ===>                                     SCROLL ===> CSR\n******************************* TOP OF DATA **********************************\n\n                 J E S 2  J O B  L O G  --  S Y S T E M  S Y S K  --  N O D E\n09.58.49 JOB04716 ---- TUESDAY,   10 OCT 2000 ----\n09.58.49 JOB04716  IRR010I  USERID JDAGPC   IS ASSIGNED TO THIS JOB.\n09.58.50 JOB04716  ICH70001I JDAGPC   LAST ACCESS AT 09:50:23 ON TUESDAY, OCT\n09.58.50 JOB04716  $HASP373 JDAGPC$D STARTED - INIT 20   - CLASS T - SYS SYSK\n09.58.50 JOB04716  SMF021I JDAGPC$D WITH ACCOUNT CODE=DB\n09.58.50 JOB04716  IEF403I JDAGPC$D - STARTED - TIME=09.58.50\n09.58.51 JOB04716  +** Opening SYSUT1       **\n09.58.51 JOB04716  +** input LRECL = 000240 **\n09.58.51 JOB04716  +** RECFM = variable     **\n09.58.52 JOB04716  +** Issuing CLOSEs       **\n09.58.58 JOB04716  MVS0010I JDAGPC$D 00.284 T          SIZE19A  ** R0000 **\n09.59.00 JOB04716  IEF404I JDAGPC$D - ENDED - TIME=09.59.00\n\n\nIf the job stops with return code 16, then an appropriate error\nmessage will be displayed after the  +** input LRECL = 000240 **\nmessage.\n\n2.2  Return Codes\n\nRet Code  Significance\n\n0   Normal return code ! the file SYSUT1 has been converted to\n    the file SYSUT2\n\n16  Input file characteristics were not acceptable for one of the\n    following reasons:\n\n    **   RECFM = unknown       **\n    **   LRECL more than 1028  **   _for a RECFM=VB file\n    **   LRECL more than 1024  **   _for a RECFM=FB file\n\n\n2.3  JCL to run the TOBASE64  Data Conversion Program\n\n//*        BASE 64 ENCODING\n//TOBASE64 EXEC  PGM=TOBASE64\n//STEPLIB  DD    DSN=JIS.DEV.UTILBAT.LOADLIB,DISP=SHR\n//SYSUT1   DD    DSN=JDAGPC.LOG.MISC,DISP=SHR   VB 255 - Input\n//SYSUT2   DD    DSN=JDAGPC.LOG.BASE64,DISP=SHR FB 80 - Output\n\n\n\n3    TOASCII ! EBCDIC to ASCII Conversion\n\nTOASCII is a user written program whose purpose is to read data\nfrom the file pointed to by the SYSUT1 DD statement and write each\nrecord to the file pointed to by the SYSUT2 DD statement - after it\nhas been converted to ASCII.\n\nDD Name Description of file contents\n\nSYSUT1  Input file containing data which the user wishes to\n        convert to ASCII. The following input characteristics\n        are allowed:\n\n               Physical sequential\nRECFM=VB(A) maximum lrecl=1028 (ie. user data length=1024)\nRECFM=FB(A) maximum lrecl=1024\n\nSYSUT2  Output file contains the data from SYSUT1 encoded in ASCII.\n\n3.1  JES Job Log Message Output\n\nSimilar to TOBASE64.\n\nIf the job stops with return code 16, then an appropriate error\nmessage will be displayed after the  +** input LRECL = 000240 **\nmessage.\n\n3.2  Return Codes\n\nRet Code  Significance\n\n0   Normal return code ! the file SYSUT1 has been converted to\n    the file SYSUT2\n\n16  Input file characteristics were not acceptable for one of the\n    following reasons:\n\n    **   RECFM = unknown       **\n    **   LRECL more than 1028  **   _for a RECFM=VB file\n    **   LRECL more than 1024  **   _for a RECFM=FB file\n\n\n3.3  JCL to run the TOASCII  Data Conversion Program\n\n//*        EBCDIC to ASCII Data Conversion\n//TOASCII  EXEC  PGM=TOASCII\n//STEPLIB  DD    DSN=YOURHLQ.LOADLIB,DISP=SHR\n//SYSUT1   DD    DSN=LOG.MISC,DISP=SHR   VB 255 - Input\n//SYSUT2   DD    DSN=LOG.BASE64,DISP=SHR FB 80 - Output\n\n\n4    TOASCILF ! EBCDIC to ASCII Conversion - With CRLF Added\n\nTOASCILF is a user written program whose purpose is to read data\nfrom the file pointed to by the SYSUT1 DD statement and convert\nit to ASCII. In so doing it adds a <CR><LF> to the end of each\nrecord in the file pointed to by the SYSUT2 DD statement.\n\nIf you are sending HTML outside the mainframe environment you would\nnormally send it as straight ASCII and not worry about where lines\nstart and end - since HTML viewers \"eat\" the white space and follow\nthe HTML formatting commands.\n\nIf you are sending formatted data as straight \"text\" - for example a\nsource program file or structured data - then you might want to\npreserve \"new lines\" in the new environment. This is accomplished\nby adding a \"carriage return + line feed\" to the end of each line\n- that is the <CR><LF> characters. Use TOASCILF instead of TOASCII.\n\nThe required DD statements for the input and output files follow:\n\nDD Name Description of file contents\n\nSYSUT1  Input file containing data which the user wishes to\n        convert to ASCII.\n\n               Physical sequential\nRECFM=VB(A) maximum lrecl=1026 (ie. user data length=1022)\nRECFM=FB(A) maximum lrecl=1022\n\nSYSUT2  Output file contains the data from SYSUT1 converted to ASCII\n        with the ASCII <CR><LF> characters added. Each record (LRECL)\n        is 2 bytes larger than the equivalent record in the SYSUT1 file.\n\n4.1  JES Job Log Message Output\n\nSimilar to TOBASE64.\n\nIf the job stops with return code 16, then an appropriate error\nmessage will be displayed after the  +** input LRECL = 000240 **\nmessage.\n\n4.2  Return Codes\n\nRet Code  Significance\n\n0   Normal return code ! the file SYSUT1 has been converted to\n    the file SYSUT2\n\n16  Input file characteristics were not acceptable for one of the\n    following reasons:\n\n    **   RECFM = unknown       **\n    **   LRECL more than 1028  **   _for a RECFM=VB file\n    **   LRECL more than 1024  **   _for a RECFM=FB file\n\n\n4.3  JCL to run the TOASCILF  Data Conversion Program\n\n//*        EBCDIC to ASCII WIth <CR><LF> Appended\n//TOASCILF EXEC  PGM=TOASCILF\n//STEPLIB  DD    DSN=YOURHLQ.LOADLIB,DISP=SHR\n//SYSUT1   DD    DSN=LOG.MISC,DISP=SHR   VB 255 - Input\n//SYSUT2   DD    DSN=LOG.ASCILF,DISP=SHR FB 80 - Output\n\n\n\n5    Putting it all together - Sample e-mail job\n\nLet's say we've just created a mainframe report - wrappered it with HTML\nand have it sitting in a file on DASD. We now want to e-mail it as an\nattachment. FILE632 contains all the utilities that you will need to\nachieve this. TOASCII will convert the EBCDIC data to ASCII, then\nTOBASE64 will convert this to the \"safe 64\" character set for\ninclusion as a MIME attachment. Finally - IEBGENER is used to send\nthe file as an attachment, using the JES SMTP writer.\n\nThe following sample job stream to accomplish all of this is in\nFILE632(EMAILXMP) - that job stream is listed below. Pay particular\nattention to the \"Content-type\" line - which has very important data\nin columns 73-80 - it identifies the string that defines the MIME\nattachment boundaries:\n\n//USERID$1 JOB  (ACCOUNT),'EMAIL TEST',MSGCLASS=Y,CLASS=X,\n//        MSGLEVEL=(1,1)\n//*\n//*====================================================================\n//* Job to send an email via SMTP, including an encoded attachment   *\n//*==================================================================*\n//*\n//** Convert the attachment to ASCII\n//*\n//ASCII    EXEC PGM=TOASCII\n//STEPLIB  DD   DSN=YOURHLQ.LOADLIB,DISP=SHR\n//SYSUT1   DD   DISP=SHR,DSN=REPORT.TOBE.EMAILED\n//SYSUT2   DD   DSN=&&ASCII,DISP=(,PASS),UNIT=SYSDA,\n//              SPACE=(TRK,(5,5),RLSE)\n//*\n//** Encode the attachment using the ENBASE64 Rexx exec\n//*\n//B64      EXEC PGM=TOBASE64\n//STEPLIB  DD   DSN=YOURHLQ.LOADLIB,DISP=SHR\n//SYSUT1   DD   DISP=SHR,DSN=&&ASCII\n//SYSUT2   DD   DSN=&&BASE64,DISP=(,PASS),UNIT=SYSDA,\n//              DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),\n//              SPACE=(CYL,(5,1),RLSE)\n//*\n//** Send the e-mail with attachment\n//*\n//SENDNOTE EXEC PGM=IEBGENER\n//SYSIN    DD DUMMY\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=(B,SMTP)\n//SYSUT1   DD *\nHELO DOMAIN\nMAIL FROM:<USERID@DOMAIN>\nRECPT TO:<GARY@CHERLET.COM>\nDATA\nMime-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"---- =_NextPart_000_01BD3BAF.A762FD80\"\n\nThis message is in MIME format. Since your mail reader does not understand\nthis format, some or all of this message may not be legible.\n\n------ =_NextPart_000_01BD3BAF.A762FD80\nContent-Type: text/plain; charset=\"us-ascii\"\nContent-Transfer-Encoding: 7bit\n\nAttached is the Desried Report in  html form\n\n------ =_NextPart_000_01BD3BAF.A762FD80\nContent-Type: application/octet-stream; name=\"report.html\"\nContent-Transfer-Encoding: base64\n\n/*\n//         DD DSN=&&BASE64,DISP=(SHR)\n\n------ =_NextPart_000_01BD3BAF.A762FD80--\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#JISTAMP": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00G\\x00\\x99\\x15_\\x01\\x02&\\x8f\\x11\\x14\\x00\\t\\x00\\x08\\x00\\x00\\xd1\\xc4\\xc1\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-06-04T00:00:00", "modifydate": "2002-09-25T11:14:47", "lines": 9, "newlines": 8, "modlines": 0, "user": "JDAGPC"}, "text": "         macro\n         #JISTAMP\n         b     bypass_time_stamp\n\n         dc    c'Assembled on: &sysdatc, at &systime, by &sysjob'\n         dc    h'0'\n\nbypass_time_stamp  equ   *\n         mend\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE632": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04<\\x00\\x00\\x01\\x03\\x14o\\x01\\x03\\x14o\\t8\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf0@@@'", "ispf": {"version": "04.60", "flags": 0, "createdate": "2003-05-26T00:00:00", "modifydate": "2003-05-26T09:38:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT-460"}, "text": "//***FILE 632 is from Gary Cherlet and contains an Assembler        *   FILE 632\n//*           program to convert EBCDIC files into BASE64 format.   *   FILE 632\n//*           See member $$DOCO for further information.            *   FILE 632\n//*                                                                 *   FILE 632\n//*           There are two other programs that convert EBCDIC      *   FILE 632\n//*           files to ASCII, to make it easier to send emails.     *   FILE 632\n//*           Please see $$$NOTE2.                                  *   FILE 632\n//*                                                                 *   FILE 632\n//*           Gary Cherlet                                          *   FILE 632\n//*           Currently at                                          *   FILE 632\n//*           Justice Technology Services                           *   FILE 632\n//*           Telephone (+61-8)  8226 5199                          *   FILE 632\n//*           Facsimile  (+61-8)  8226 5355                         *   FILE 632\n//*           Mobile      (+61)     041 333 1613                    *   FILE 632\n//*           Mailto:cherlet.gary@saugov.sa.gov.au                  *   FILE 632\n//*           Mailto:gary@cherlet.com                               *   FILE 632\n//*                                                                 *   FILE 632\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EMAILXMP": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00A\\x01\\x03\\x14o\\x01\\x03\\x14o\\t\\x15\\x007\\x00=\\x00\\x00\\xd1\\xc4\\xc1\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-05-26T00:00:00", "modifydate": "2003-05-26T09:15:41", "lines": 55, "newlines": 61, "modlines": 0, "user": "JDAGPC"}, "text": "//USERID$1 JOB  (ACCOUNT),'TEST EMAIL',MSGCLASS=Y,CLASS=X,\n//        MSGLEVEL=(1,1)\n//*\n//*==================================================================*\n//* Job to send an email via SMTP, including an encoded attachment   *\n//*==================================================================*\n//*\n//** Convert the attachment to ASCII\n//*\n//ASCII    EXEC PGM=TOASCII\n//STEPLIB  DD DSN=YOURHLQ.LOADLIB,DISP=SHR\n//SYSUT1   DD DISP=SHR,DSN=REPORT.TOBE.EMAILED\n//SYSUT2   DD DSN=&&ASCII,DISP=(,PASS),UNIT=SYSDA,\n//            SPACE=(CYL,(5,2),RLSE)\n//*\n//** Encode the attachment using the ENBASE64 Rexx exec\n//*\n//B64      EXEC PGM=TOBASE64\n//STEPLIB  DD DSN=JIS.DEV.UTILBAT.LOADLIB,DISP=SHR\n//SYSUT1   DD DISP=SHR,DSN=&&ASCII\n//SYSUT2   DD DSN=&&BASE64,DISP=(,PASS),UNIT=SYSDA,\n//            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),\n//            SPACE=(CYL,(5,2),RLSE)\n//*\n//** Send the e-mail with attachment\n//*\n//SENDNOTE EXEC PGM=IEBGENER\n//SYSIN    DD DUMMY\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=(B,SMTP)\n//SYSUT1   DD *\nHELO AAIPC1K\nMAIL FROM:<USERID@DOMAIN>\nRECPT TO:<GARY@CHERLET.COM>\nDATA\nMime-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"---- =_NextPart_000_01BD3BAF.A762FD80\"\n\nThis message is in MIME format. Since your mail reader does not understand\nthis format, some or all of this message may not be legible.\n\n------ =_NextPart_000_01BD3BAF.A762FD80\nContent-Type: text/plain; charset=\"us-ascii\"\nContent-Transfer-Encoding: 7bit\n\nAttached is the Report in  html form\n\n------ =_NextPart_000_01BD3BAF.A762FD80\nContent-Type: application/octet-stream; name=\"report.html\"\nContent-Transfer-Encoding: base64\n\n/*\n//         DD DSN=&&BASE64,DISP=(SHR)\n\n------ =_NextPart_000_01BD3BAF.A762FD80--\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TOASCII": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00F\\x01\\x00\\x04\\x0f\\x01\\x01\\x05\\x7f\\x140\\x00\\xfa\\x00\\x8d\\x00\\x00\\xd2\\xc9\\xe2\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-02-09T00:00:00", "modifydate": "2001-02-26T14:30:46", "lines": 250, "newlines": 141, "modlines": 0, "user": "KISGPC"}, "text": "TOASCII csect\nTOASCII amode 31\nTOASCII rmode 24\n\n           #REGEQU\n\n***********************************************************************\n*                                                                     *\n*   MODULE NAME:  TOASCII - EBCDIC to ASCII Converter                 *\n*                                                                     *\n***********************************************************************\n*            Justice Information System - CONFIDENTIAL                *\n*                                                                     *\n*      (C) Attorney-Generals' Department of South Australia           *\n*                                                                     *\n*                  2000 LICENSED MATERIAL                             *\n*                                                                     *\n*    Property of Attorney-General's Department of South Australia     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* AUTHOR:      G.Cherlet                                              *\n*              Heron Computing Services                               *\n* DATE:        May 2000                                               *\n* COPYRIGHT:   Attorney-General's Department of South Australia       *\n*                                                                     *\n* DESCRIPTION: the purpose of this program is to read data from the   *\n* the file pointed to by the SYSUT1 DD statement and convert it to    *\n* ASCII. The resultant data is written to the file indicated by the   *\n* SYSUT2 DD statement. The output file will have the same physical    *\n* characteristcs as the input file at SYSUT1.                         *\n*                                                                     *\n***********************************************************************\n\n\n         using TOASCII,R12\n         SAVE  (14,12),,*                   SAVE REGISTERS\n         lr    R12,R15\n         lr    R11,R13\n         st    R13,SAVEAREA+4\n         la    R13,SAVEAREA\n         #JISTAMP\n         b     INITRTN\nSAVEAREA dc    18F'0'\nINITRTN  equ   *\n         st    R13,8(R11)\n\n         mvc   WTOMSG(26),=c'** Opening SYSUT1       **'\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT1,(INPUT)),MODE=31\n         la    R2,SYSUT2\n         la    R3,SYSUT1\n         using IHADCB,R2\n         mvc   DCBPRECL,DCBPRECL-IHADCB(R3)\n         mvc   DCBLRECL,DCBLRECL-IHADCB(R3)\n         mvc   DCBBLKSI,DCBBLKSI-IHADCB(R3)\n         mvc   DCBRECFM,DCBRECFM-IHADCB(R3)\n         la    R2,SYSUT1\n\n         mvc   WORD+2(2),DCBLRECL\n         l     R15,WORD\n         cvd   R15,DWORD\n         oi    DWORD+7,x'0F'\n         mvc   WTOMSG(26),=c'** input LRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORD+5(3)\n         bal   R11,WTOPRTN\n\n         mvc   WTOMSG(26),=c'** RECFM = variable     **'\n         tm    DCBRECFM,DCBRECV\n         bo    FILE$OKF\n\n         mvc   WTOMSG(26),=c'** RECFM = fixed        **'\n         tm    DCBRECFM,DCBRECF\n         bo    FILE$OKV\n\n         mvc   WTOMSG(26),=c'** RECFM = unknown      **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKV       equ   *\n\n         clc   DCBLRECL,=h'1028'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(26),=c'** LRECL more than 1028  **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKF       equ   *\n\n         clc   DCBLRECL,=h'1024'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(26),=c'** LRECL more than 1024  **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OK        equ   *\n\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT2,(OUTPUT)),MODE=31\n\nREAD$WRITE     equ   *\n\n         l     R1,=A(SYSUT1)\n         l     R0,=A(BUFF)\n         GET   (1),(0)\n         l     R14,=A(BUFF)\n\n         lh    R1,DCBLRECL\n         bctr  R1,R0              Machine length\n\n         tm    DCBRECFM,DCBRECF\n         bo    translate\n         sh    R1,=h'4'           Don't translate the RDW\n         ah    R14,=h'4'           start after the RDW\n\nTRANSLATE      equ   *\n               ch    R1,=h'255'\n               bh    TRANSLATE256GT\n               b     TRANSLATE256LE\n\nTRANSLATE256GT equ   *\n               lh    R15,=h'255'\n               ex    R15,DOASCII\n               sh    R1,=h'256'\n               ah    R14,=h'256'\n               b     TRANSLATE\n\nTRANSLATE256LE ex    R1,DOASCII\n\n         l     R1,=A(SYSUT2)\n         l     R0,=A(BUFF)\n         PUT   (1),(0)\n\n         b     READ$WRITE\n\nNOMORE   equ   *\n\n         mvc   WTOMSG(26),=c'** Issuing CLOSEs       **'\n         bal   R11,WTOPRTN\n\n         CLOSE SYSUT2,MODE=31\n\n         sr    R15,R15\n\nCLOSE1   equ   *\n\n         CLOSE SYSUT1,MODE=31\n\n         l     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n\nDOASCII  tr    0(0,R14),ASCII      EBCDIC ---->  ASCII\n\n*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*------------> End of Main-line Code <--------------------------------*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*\n*\nWTOPRTN   equ   *\n          la    R4,WTOLIST\n          WTO   MF=(E,(R4))\n          mvi   WTOMSG,C' '\n          mvc   WTOMSG+1(L'WTOMSG-1),WTOMSG\n          br    R11\n\nWTOLIST  WTO '                                                         X\n                              ',                                       X\n               ROUTCDE=11,DESC=7,MF=L\nWTOMSG    equ   WTOLIST+4,70\n\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n\n\nDWORD    DC    d'0'\nWORD     DC    f'0'\n\n\nEBCDIC   DC    256CL1' '  x'40' - space\n*\n         ORG   EBCDIC+X'20'\n         DC    X'405A7F7B5B6C507D'\n         DC    C'()*+,-./0123456789:;< >?@'\n         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ{\\}\u00ac_`'\n         DC    C'abcdefghijklmnopqrstuvwxyz{ }~'\n*\n         ORG\n\n*                000102030405060708090A0B0C0D0E0F\nASCII    DC    x'000102031A091A7F1A1A1A0B0C0D0E0F'   00\n         DC    x'101112131A1A081A18191A1A1C1D1E1F'   10\n         DC    x'1A1A1C1A1A0A171B1A1A1A1A1A050607'   20\n         DC    x'1A1A161A1A1E1A041A1A1A1A14151A1A'   30\n         DC    x'20A6E180EB909FE2AB8B9B2E3C282B7C'   40\n         DC    x'26A9AA9CDBA599E3A89E21242A293B5E'   50\n         DC    x'2D2FDFDC9ADDDE989DACBA2C255F3E3F'   60\n         DC    x'D78894B0B1B2FCD6FB603A2340273D22'   70\n         DC    x'F861626364656667686996A4F3AFAEC5'   80\n         DC    x'8C6A6B6C6D6E6F7071729787CE93F1FE'   90\n         DC    x'C87E737475767778797AEFC0DA5BF2F9'   A0\n         DC    x'B5B6FDB7B8B9E6BBBCBD8DD9BF5DD8C4'   B0\n         DC    x'7B414243444546474849CBCABEE8ECED'   C0\n         DC    x'7D4A4B4C4D4E4F505152A1ADF5F4A38F'   D0\n         DC    x'5CE7535455565758595AA0858EE9E4D1'   E0\n         DC    x'30313233343536373839B3F7F0FAA7FF'   40\n\nASCII2   DC    256XL1'20' - space\n         ORG   ASCII+X'40'   SPace\n         DC    X'20'\n         ORG   ASCII+C'a'\n         DC    X'616263646566676869'\n         ORG   ASCII+C'j'\n         DC    X'6A6B6C6D6E6F707172'\n         ORG   ASCII+C's'\n         DC    X'737475767778797A'\n         ORG   ASCII+C'A'\n         DC    X'414243444546474849'\n         ORG   ASCII+C'J'\n         DC    X'4A4B4C4D4E4F505152'\n         ORG   ASCII+C'S'\n         DC    X'535455565758595A'\n         ORG   ASCII+C'0'\n         DC    X'30313233343536373839'\n         ORG\n\n\n         ltorg\n\n         ds    0D\nBUFF     ds    0cl1028\n         dc    1028cl1' '\n\n\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,                        X\n               EODAD=NOMORE\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=100\n\n          DCBD  DSORG=(PS),DEVD=DA\n\n         end   TOASCII\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TOASCILF": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00F\\x01\\x00 \\x8f\\x01\\x01\\x05\\x7f\\x14\\x06\\x014\\x00\\xd9\\x00\\x00\\xd2\\xc9\\xe2\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2000-07-26T00:00:00", "modifydate": "2001-02-26T14:06:46", "lines": 308, "newlines": 217, "modlines": 0, "user": "KISGPC"}, "text": "TOASCILF csect\nTOASCILF amode 31\nTOASCILF rmode 24\n\n           #REGEQU\n\n***********************************************************************\n*                                                                     *\n*   MODULE NAME:  TOASCILF - EBCDIC to ASCII                          *\n*                                                                     *\n***********************************************************************\n\n         using TOASCILF,R12\n         SAVE  (14,12),,*                   SAVE REGISTERS\n         lr    R12,R15\n         lr    R11,R13\n         st    R13,SAVEAREA+4\n         la    R13,SAVEAREA\n         #JISTAMP\n         b     INITRTN\nSAVEAREA dc    18F'0'\nINITRTN  equ   *\n         st    R13,8(R11)\n\n         mvc   WTOMSG(27),=c'** Opening SYSUT1        **'\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT1,(INPUT))\n         la    R2,SYSUT2\n         la    R3,SYSUT1\n         using IHADCB,R2\n         mvc   DCBRECFM,DCBRECFM-IHADCB(R3)\n\n         lh    R15,DCBPRECL-IHADCB(R3)\n         ltr   R15,R15\n         bz    DO$LRECL\n         cvd   R15,DWORDIN\n         ah    R15,=h'2'\n         sth   R15,DCBPRECL\n         cvd   R15,DWORDOUT\n\n         oi    DWORDIN+7,x'0F'\n         mvc   WTOMSG(27),=c'**  input PRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORDIN+5(3)\n         bal   R11,WTOPRTN\n\n         oi    DWORDOUT+7,x'0F'\n         mvc   WTOMSG(27),=c'** output PRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORDOUT+5(3)\n         bal   R11,WTOPRTN\n\nDO$LRECL equ   *\n\n         lh    R15,DCBLRECL-IHADCB(R3)\n         cvd   R15,DWORDIN\n         ah    R15,=h'2'\n         sth   R15,DCBLRECL\n         cvd   R15,DWORDOUT\n\n         oi    DWORDIN+7,x'0F'\n         mvc   WTOMSG(27),=c'**  input LRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORDIN+5(3)\n         bal   R11,WTOPRTN\n\n         oi    DWORDOUT+7,x'0F'\n         mvc   WTOMSG(27),=c'** output LRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORDOUT+5(3)\n         bal   R11,WTOPRTN\n\n         sr    R14,R14\n         lh    R15,DCBBLKSI-IHADCB(R3)\n         cvd   R15,DWORDIN\n         lh    R1,DCBLRECL-IHADCB(R3)\n         dr    R14,R1\n         ltr   R14,R14      If remainder not = 0 - then -\n         bnz   BAD$BF        - we have a bad Blocking Factor\n         mh    R15,DCBLRECL This is ( old LRECL +2 ) * Block Factor\n         sth   r15,DCBBLKSI = new Block Size !\n         cvd   R15,DWORDOUT\n\n         oi    DWORDIN+7,x'0F'\n         mvc   WTOMSG(27),=c'**  input BLKSZ = 00000  **'\n         unpk  WTOMSG+18(5),DWORDIN+5(3)\n         bal   R11,WTOPRTN\n\n         oi    DWORDOUT+7,x'0F'\n         mvc   WTOMSG(27),=c'** output BLKSZ = 00000  **'\n         unpk  WTOMSG+18(5),DWORDOUT+5(3)\n         bal   R11,WTOPRTN\n\n\n         la    R2,SYSUT1\n\n         mvc   WTOMSG(27),=c'** RECFM = variable      **'\n         tm    DCBRECFM,DCBRECV\n         bo    FILE$OKF\n\n         mvc   WTOMSG(27),=c'** RECFM = fixed         **'\n         tm    DCBRECFM,DCBRECF\n         bo    FILE$OKV\n\n         mvc   WTOMSG(27),=c'** RECFM = unknown       **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKV       equ   *\n\n         clc   DCBLRECL,=h'1026'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(27),=c'** LRECL more than 1026   **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nBAD$BF         equ   *\n\n         lr    R3,R14\n         st    R15,WORD\n         cvd   R15,DWORD\n         oi    DWORD+7,x'0F'\n         mvc   WTOMSG(27),=c'**    Blocking  = 00000  **'\n         unpk  WTOMSG+18(5),DWORD+5(3)\n         bal   R11,WTOPRTN\n         st    R3,WORD\n         cvd   R15,DWORD\n         oi    DWORD+7,x'0F'\n         mvc   WTOMSG(27),=c'**   Remainder  = 00000  **'\n         unpk  WTOMSG+18(5),DWORD+5(3)\n         bal   R11,WTOPRTN\n         mvc   WTOMSG(27),=c'**  Bad Blocking Factor  **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKF       equ   *\n\n         clc   DCBLRECL,=h'1022'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(27),=c'** LRECL more than 1022   **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OK        equ   *\n\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT2,(OUTPUT))\n         la    R2,SYSUT2\n\nREAD$WRITE     equ   *\n\n         l     R1,=A(SYSUT1)\n         l     R0,=A(BUFF)\n         GET   (1),(0)\n         l     R14,=A(BUFF)\n\n         lh    R1,DCBLRECL\n         bctr  R1,R0\n\n         lh    R3,DCBLRECL\n         a     R3,=a(BUFF)\n         sh    R3,=h'2'            <<<<<<- TESTING TESTING 1...2....3\n         mvc   0(2,R3),=x'0D25'    <<<<<<- EBCDIC chars =  CRLF\n\n*->>>>>> b     BYP$XLATE <<<<<<<<<<<<<<<<- Testing\n\n         tm    DCBRECFM,DCBRECF\n         bo    translate\n         sh    R1,=h'4'           Don't translate the RDW\n         ah    R14,=h'4'           start after the RDW\n\nTRANSLATE      equ   *\n               ch    R1,=h'255'\n               bh    TRANSLATE256GT\n               b     TRANSLATE256LE\n\nTRANSLATE256GT equ   *\n               lh    R15,=h'255'\n               ex    R15,DOASCII\n               sh    R1,=h'256'\n               ah    R14,=h'256'\n               b     TRANSLATE\n\nTRANSLATE256LE ex    R1,DOASCII\n\n\nBYP$XLATE equ   *\n\n         l     R1,=A(SYSUT2)\n         l     R0,=A(BUFF)\n         PUT   (1),(0)\n\n         b     READ$WRITE\n\nNOMORE   equ   *\n\n         mvc   WTOMSG(27),=c'** Issuing CLOSEs        **'\n         bal   R11,WTOPRTN\n\n         CLOSE SYSUT2\n\n         sr    R15,R15\n\nCLOSE1   equ   *\n\n         CLOSE SYSUT1\n\n         l     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n\nDOASCII  tr    0(0,R14),ASCII      EBCDIC ---->  ASCII\n\n*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*------------> End of Main-line Code <--------------------------------*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*\n*\nWTOPRTN   equ   *\n          la    R4,WTOLIST\n          WTO   MF=(E,(R4))\n          mvi   WTOMSG,C' '\n          mvc   WTOMSG+1(L'WTOMSG-1),WTOMSG\n          br    R11\n\nWTOLIST  WTO '                                                         X\n                              ',                                       X\n               ROUTCDE=11,DESC=7,MF=L\nWTOMSG    equ   WTOLIST+4,70\n\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n\n\nDWORD    DC    d'0'\nDWORDIN  DC    d'0'\nDWORDOUT DC    d'0'\nWORD     DC    f'0'\n\n\nEBCDIC   DC    256CL1' '   x'40' - space\n*\n         ORG   EBCDIC+X'20'\n         DC    X'405A7F7B5B6C507D'\n         DC    C'()*+,-./0123456789:;< >?@'\n         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ{\\}\u00ac_`'\n         DC    C'abcdefghijklmnopqrstuvwxyz{ }~'\n*\n         ORG\n\n*                000102030405060708090A0B0C0D0E0F\nASCII    DC    x'000102031A091A7F1A1A1A0B0C0D0E0F'   00\n         DC    x'101112131A1A081A18191A1A1C1D1E1F'   10\n         DC    x'1A1A1C1A1A0A171B1A1A1A1A1A050607'   20\n         DC    x'1A1A161A1A1E1A041A1A1A1A14151A1A'   30\n         DC    x'20A6E180EB909FE2AB8B9B2E3C282B7C'   40\n         DC    x'26A9AA9CDBA599E3A89E21242A293B5E'   50\n         DC    x'2D2FDFDC9ADDDE989DACBA2C255F3E3F'   60\n         DC    x'D78894B0B1B2FCD6FB603A2340273D22'   70\n         DC    x'F861626364656667686996A4F3AFAEC5'   80\n         DC    x'8C6A6B6C6D6E6F7071729787CE93F1FE'   90\n         DC    x'C87E737475767778797AEFC0DA5BF2F9'   A0\n         DC    x'B5B6FDB7B8B9E6BBBCBD8DD9BF5DD8C4'   B0\n         DC    x'7B414243444546474849CBCABEE8ECED'   C0\n         DC    x'7D4A4B4C4D4E4F505152A1ADF5F4A38F'   D0\n         DC    x'5CE7535455565758595AA0858EE9E4D1'   E0\n         DC    x'30313233343536373839B3F7F0FAA7FF'   40\n\nASCII2   DC    256XL1'20' - space\n         ORG   ASCII+X'40'   SPace\n         DC    X'20'\n         ORG   ASCII+C'a'\n         DC    X'616263646566676869'\n         ORG   ASCII+C'j'\n         DC    X'6A6B6C6D6E6F707172'\n         ORG   ASCII+C's'\n         DC    X'737475767778797A'\n         ORG   ASCII+C'A'\n         DC    X'414243444546474849'\n         ORG   ASCII+C'J'\n         DC    X'4A4B4C4D4E4F505152'\n         ORG   ASCII+C'S'\n         DC    X'535455565758595A'\n         ORG   ASCII+C'0'\n         DC    X'30313233343536373839'\n         ORG\n\n\n         ltorg\n\n         ds    0D\nBUFF     ds    0cl1028\n         dc    1028cl1' '\n\n\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,                        X\n               EODAD=NOMORE\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=100\n\n          DCBD  DSORG=(PS),DEVD=DA\n\n         end   TOASCILF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TOBASE64": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00I\\x01\\x00$?\\x01\\x01\\x05\\x1f\\x16%\\x01o\\x00\\x05\\x00\\x00\\xd2\\xc9\\xe2\\xc7\\xd7\\xc3@@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2001-02-20T16:25:49", "lines": 367, "newlines": 5, "modlines": 0, "user": "KISGPC"}, "text": "TOBASE64 csect\nTOBASE64 amode 31\nTOBASE64 rmode 24\n\n           #REGEQU\n\n***********************************************************************\n*                                                                     *\n*   MODULE NAME:  TOBASE64 - ASCII to \"safe ASCII\" base 64 for MIME   *\n*                                                                     *\n***********************************************************************\n*            Justice Information System - CONFIDENTIAL                *\n*                                                                     *\n*      (C) Attorney-Generals' Department of South Australia           *\n*                                                                     *\n*                  2000 LICENSED MATERIAL                             *\n*                                                                     *\n*    Property of Attorney-General's Department of South Australia     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* AUTHOR:      G.Cherlet                                              *\n*              Heron Computing Services                               *\n* DATE:        October 2000                                           *\n* COPYRIGHT:   Attorney-General's Department of South Australia       *\n*                                                                     *\n* DESCRIPTION: the purpose of this program is to read data from the   *\n* the file pointed to by the SYSUT1 DD statement and, treating it as  *\n* a continuous bit stream, encode it as a BASE64 data stream. The     *\n* resultant encoded data is written to the file pointed to by the     *\n* SYSUT2 DD statement.                                                *\n*                                                                     *\n* Register Usage:                                                     *\n*                                                                     *\n* R12 - Base                                                          *\n* R11 - Link Register                                                 *\n* R8  - Current output pointer in OUT_AREA                            *\n* R6  - Current input pointer in IN_AREA                              *\n* R5  - Used when doing \"save+restore\" of unprocessed characters      *\n* R4  - Length of data left to encode                                 *\n* R3  - Used when doing \"save+restore\" of unprocessed characters      *\n* R2  - Base for SYSUT1 - for referencing DCB information             *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n\n         using TOBASE64,R12\n         SAVE  (14,12),,*                   SAVE REGISTERS\n         lr    R12,R15\n         lr    R11,R13\n         st    R13,SAVEAREA+4\n         la    R13,SAVEAREA\n         #JISTAMP\n         b     INITRTN\nSAVEAREA dc    18F'0'\nINITRTN  equ   *\n         st    R13,8(R11)\n\n         mvc   WTOMSG(26),=c'** Opening SYSUT1       **'\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT1,(INPUT)),MODE=31\n         la    R2,SYSUT1\n         using IHADCB,R2\n\n         mvc   WORD+2(2),DCBLRECL\n         l     R15,WORD\n         cvd   R15,DWORD\n         oi    DWORD+7,x'0F'\n         mvc   WTOMSG(26),=c'** input LRECL = 00000  **'\n         unpk  WTOMSG+18(5),DWORD+5(3)\n         bal   R11,WTOPRTN\n\n         mvc   WTOMSG(26),=c'** RECFM = variable     **'\n         tm    DCBRECFM,DCBRECV\n         bo    FILE$OKF\n\n         mvc   WTOMSG(26),=c'** RECFM = fixed        **'\n         tm    DCBRECFM,DCBRECF\n         bo    FILE$OKV\n\n         mvc   WTOMSG(26),=c'** RECFM = unknown      **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKV       equ   *\n\n         clc   DCBLRECL,=h'1028'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(26),=c'** LRECL more than 1028  **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OKF       equ   *\n\n         clc   DCBLRECL,=h'1024'\n         bnh   FILE$OK\n\n         mvc   WTOMSG(26),=c'** LRECL more than 1024  **'\n         bal   R11,WTOPRTN\n         l     R15,=f'16'\n         b     CLOSE1\n\nFILE$OK        equ   *\n\n         bal   R11,WTOPRTN\n\n         OPEN  (SYSUT2,(OUTPUT)),MODE=31\n\n         mvc   REMAINDER,=f'0'\n         mvc   OUT_SIZE,=f'0'\n         la    R8,OUT_AREA\n\n         bal   r11,READ$RTN     After this: R6 = a(IN_AREA)\n*                                           R4 = ACTUAL_LENGTH\n\nENCODE$LOOP    equ   *\n\n         st    R4,REMAINDER      Save for future reference!\n         ch    R4,=h'3'          Have we got at least 3 bytes?\n         bnl   ENCODE$3          YES - encode them !\n*                                NO - save them and READ next record!\n         c     R4,=f'0'\n         be    ENCODE$R\n\n         bctr  R4,R0             Set machine length for move - then\n         ex    R4,SAVEREMAINDER   do the move !\n*                                Less than 3 bytes to encode - time to\nENCODE$R bal   R11,READ$RTN       read next record - if it's there\n         a     R4,REMAINDER        calculate NEW actual_length - note\n*                                   R4 = LENGTH READ after READ$RTN !\n\n         clc   REMAINDER,=f'0'\n         be    ENCODE$3\n\n         la    R3,IN_AREA        Add \"remainder\" of last record\n         l     R5,REMAINDER       to front of this record !\n\n         tm    DCBRECFM,DCBRECF  Fixed or Variable?\n         bo    ENCODE$V          Fixed - continue!\n         ah    R3,=h'4'          Variable - bypass the RDW !\n\nENCODE$V equ   *\n\n         sr    R3,R5             Calculate \"to\" location -\n         bctr  R5,R0              and machine length -\n         ex    R5,RESTORECHARS     then do the move !\n         lr    R6,R3             Adjust location in IN_AREA !\n\nENCODE$3       equ   *\n\n         bal   R11,EXPAND$RTN\n\n         sh    R4,=h'3'         Decrement length\n         ah    R6,=h'3'         Increment IN_AREA pointer\n         ah    R8,=h'4'         Increment OUT_AREA pointer\n         st    R6,IN_POINTER    Remember for future reference\n         l     R1,OUT_SIZE      Increment OUT_AREA counter -\n         ah    R1,=h'4'          so that we can tell when it's time\n         st    R1,OUT_SIZE        to do a WRITE - IF we haven't filled\n         ch    R1,=h'76'           the OUT-AREA yet continue\n         bl    ENCODE$LOOP      ELSE\n*                                 We have >= 76 so it's time to\n         bal   R11,WRITE$RTN       do the \"WRITE thing\" !\n\n         b     ENCODE$LOOP\n\nSAVEREMAINDER  mvc   SAVECHARS(0),0(R6)\nRESTORECHARS   mvc   0(0,R3),SAVECHARS\n\n\n*\n*---------------------------------------------------------------------*\n*------------> End of File - Deal with It -  <------------------------*\n*------------> There may be unprocessed data <------------------------*\n*------------> in IN_AREA - handle that 1st! <------------------------*\n*---------------------------------------------------------------------*\n*\n*        The reason we are here is that we had less than 3 bytes\n*        to encode (0, 1, or 2) so we tried READ$RTN but on the GET\n*        we were sent to the EODAD which is NOMORE (see below) !\n*        Now we have to work out if we have 0, 1, or 2 bytes left !\n*\nNOMORE   equ   *\n\n         l     R6,IN_POINTER     R6 destroyed by READ$RTN - so restore!\n         l     R4,REMAINDER      Retrieve REMAINING actual_length\n\n         ch    R4,=h'0'          Have we got anything left ?\n         be    GOT0MORE          If  0  we have none - so DONE!\n\n         bal   R11,EXPAND$RTN    Expand what's left - either 1 or 2\n         l     R1,OUT_SIZE      Increment OUT_AREA counter -\n         ah    R1,=h'4'          so that we can tell when it's time\n         st    R1,OUT_SIZE        to do a WRITE !\n\n         ch    R4,=h'2'          What was left? Was it 2 bytes?\n         be    GOT2MORE          YES - handle 8 bit short condition!\n         b     GOT1MORE          NO - handle 16 bit short condition!\n\nGOT2MORE equ   *\n*                                Nullify low order 2 bits of 2nd last\n         ni    2(R8),b'11111100'  byte, then put \"=\" sign in last\n         mvi   3(R8),c'='          byte to tell decoder 8 bits short !\n         bal   R11,WRITE$RTN     Do the \"WRITE thing\"  !!\n         b     GOT0MORE\n\n*\nGOT1MORE equ   *\n*                                Nullify low order 4 bits of 3rd last\n         ni    1(R8),b'11110000'  byte, then put \"==\" signs in last 2\n         mvc   2(2,R8),=cl2'=='    bytes to tell decode 16 bits short !\n         bal   R11,WRITE$RTN     Do the \"WRITE thing\"  !!\n         b     GOT0MORE\n\n*\nGOT0MORE equ   *\n\n         l     R1,OUT_SIZE\n         c     R1,=f'1'          Anything left to WRITE ?\n         bl    CLOSE2            NO - close up shop and get out !\n         mvc   OUT_SIZE,=f'76'   YES - Force full buffer and -\n         bal   R11,WRITE$RTN      do the \"WRITE thing\" with WRITE$RTN !\n\nCLOSE2   equ   *\n\n         mvc   WTOMSG(26),=c'** Issuing CLOSEs       **'\n         bal   R11,WTOPRTN\n\n         CLOSE SYSUT2,MODE=31\n\n         sr    R15,R15\n\nCLOSE1   equ   *\n\n         CLOSE SYSUT1,MODE=31\n\n         l     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n\n*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*------------> End of Main-line Code <--------------------------------*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*\n*\n\nEXPAND$RTN     equ   *   Expands 3 bytes to 4 bytes\n\n         icm   R0,B'0111',0(R6)\n         la    R5,4\n\nEXPAND$LOOP    equ   *\n\n         srdl  R0,6              Isolate 6 bits - then\n         srl   R1,2               add 2 bits to make 8 - and\n         bct   R5,EXPAND$LOOP      do this 3 more times !\n\n         stcm  R1,B'1111',0(R8)\n\n         br    R11\n\n*\n*\n\nREAD$RTN       equ   *   < 3 remaining to encode so it's time to READ!\n\n         sr    R4,R4\n         l     R6,=A(IN_AREA)\n         l     R1,=A(SYSUT1)\n         l     R0,=A(IN_AREA)\n         GET   (1),(0)\n\n         lh    R4,DCBLRECL      This is the \"actual length\" to encode!\n\n         tm    DCBRECFM,DCBRECF Fixed or Variable?\n         bor   R11              Fixed - continue! If variable don't\n         sh    R4,=h'4'          translate the RDW - adjust length\n         ah    R6,=h'4'            and start after the RDW !\n\n         br    R11\n\n*\n*\n\nWRITE$RTN      equ   *   We have >= 76 so it's time to do a WRITE !\n\n         tr    OUT_AREA,SAFE64\n\n         l     R1,=A(SYSUT2)\n         l     R0,=A(OUT_AREA)\n         PUT   (1),(0)\n         mvi   OUT_AREA,c' '            Only clear out 1st 76 bytes -\n         mvc   OUT_AREA+1(79),OUT_AREA   since there may be LEFT OVERS!\n         la    R8,OUT_AREA              Reset output pointer.\n\n         l     R1,OUT_SIZE\n         sh    R1,=h'76'         We wrote out 76 bytes -\n         st    R1,OUT_SIZE        save current OUT_AREA size -\n         ch    R1,=h'1'            check to see if there's some left?\n         blr   R11               NO - none left so continue\n         sh    R1,=h'1'          YES - some left - so move to front -\n         ex    R1,SHIFTLEFTOVERS     - after calculating m/c length!\n\n         br    R11\n\nSHIFTLEFTOVERS mvc   OUT_AREA(0),OUT_AREA+76\n\n*\n*\nWTOPRTN   equ   *\n          la    R10,WTOLIST\n          WTO   MF=(E,(R10))\n          mvi   WTOMSG,C' '\n          mvc   WTOMSG+1(L'WTOMSG-1),WTOMSG\n          br    R11\n\nWTOLIST  WTO '                                                         X\n                              ',                                       X\n               ROUTCDE=11,DESC=7,MF=L\nWTOMSG    equ   WTOLIST+4,70\n\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n\n\nDWORD          dc    d'0'\nWORD           dc    f'0'\nACTUAL_LENGTH  dc    f'0'\nREMAINDER      dc    f'0'\nIN_POINTER     dc    a(0)\nOUT_SIZE       dc    f'0'\n\n\nSAFE64   dc    256xl1'40' - space\n         org   SAFE64\n         dc    c'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         dc    c'abcdefghijklmnopqrstuvwxyz'\n         dc    c'0123456789+/'\n         org   SAFE64+c'='\n         dc    c'='\n         org\n\n         ltorg\n\nSAVECHARS  dc  cl3' '   <<<<<<- for remaining data from last read -\n         dc    cl3' '   <<<<<<- for remaining data from last read -\nIN_AREA  ds    0cl1028          when 1 or 2 bytes not processed -\n         dc    1028cl1' '       moved to front - handled by ENCODE$LOOP\n\nOUT_AREA ds    0cl80   <<<<<- RFC1521 says to only use 76 bytes !\n         dc    76cl1' '\n         dc    cl4' '    <<<<<<- for \"overflow\" - goes to start of next\n*                                OUT_AREA - handled by WRITE$RTN\n\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=NOMORE\n\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80,RECFM=FB\n\n         DCBD  DSORG=(PS),DEVD=DA\n\n         end   TOBASE64\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT632/FILE632.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT632", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}