{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012409000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE578.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE578.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0e'", "DS1TRBAL": "b'\\x83\\xe2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04K\\x00\\x0c\\x04L\\x00\\x02\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x14\\x7f\\x01\\x02\\x14\\x7f\\x13Q\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-27T00:00:00", "modifydate": "2002-05-27T13:51:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 447    FILE:  578\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT447.FILE578\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 29 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,761 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/27/02    13:50:58    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x9d\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 157, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "ISPF general table handler\n--------------------------\n\nProvided by Roy Gardiner    version 1.0 May 2002\n\nPlease e-mail comments and questions to roy at-sign roygardiner.com\n\nSummary\n-------\n\nThis package will enable you to maintain any ISPF table which has\none or two key fields. You only need to code, by copying the examples\ngiven here, (1) a scrollable display for the whole table (2) a display\npanel for full details of a single row.  The benefit of the package\nis that it enables you to create in a few minutes a table update\nutility using your own panels.\n\nBasic features provided\n-----------------------\n\nJust by cloning the sample panels you will be able to:\n\n  - see a scrollable display of your table\n  - use the Locate command to find rows\n  - sort the table display\n  - display extra information which will not fit on a single display\n      line\n  - update the table (multiple users)\n  - protect against concurrent update\n  - edit any number of extension variables to any row, without\n      knowing the names of the variables\n  - provide simple data dictionary (along the lines of: this is a\n      variable name, this is what it means)\n\n(Note that this package does NOT handle non-keyed tables)\n\nThe benefit of using the package is development speed; all you need to\ndo is to modify the example panels to match your table layout - a few\nminutes work.\n\nThe package is not designed to handle large volumes of data; for tables\nlarger than 1000 rows which need to be updated by more than about a\ndozen people, consider DB2 or another proper database. Large tables\ncombined with many users create unacceptable performance and\nespecially update contention issues.\n\nDemonstrations\n--------------\n\nSetting up the demonstrations\n-----------------------------\n\n\n1. Edit the member DEM#1. Change the assignments to the Rexx variables\n   q1 q2 q3  so that the ALLOC which follows them points to the library\n   you where RECEIVED the package and where you are now reading this\n   Run it (you may need to copy it to a command library).\n\n       TSO DEM#1      on an ISPF command line\n\n   This will make available all the Rexx and ISPF comonents of the\n   demonstration. Note that this need be run only once in an ISPF\n   session, but once run you can then run the demos any number of times.\n   The demos won't work in another session.\n\n2. Run the exec DEM#2\n\n   This will create the table FANDF (Friends AND Family) on this library\n   The table will have just 2 rows.\n\n\nDemonstration A: Basic features\n---------------\n\n   Run the exec DEM#3.\n\n   This invokes the general table handler for the table you have just\n   created.  Make sure you run in the same session in which you ran\n   DEM#1, so that its LIBDEFs are in effect.\n\n   You should now get a panel headed\n\n            Friends and Family demonstration\n\n   If not, you may need to re-run the DEM#1 exec to re-establish the\n   library allocations.\n\n   The command-line and prefix-aread commands available are documented\n   separately in member #CMDS. Please try them; note that the SORT\n   command will not work for this demo; please go to demonstration 2\n   to show how it works.\n\n\nDemonstration B: Basic + Column Sort\n---------------\n\n   To see slightly larger volumes and demo of the sorting feature,\n   please run exec DEM#2A which will recreate the table then run\n   exec DEM#4.  This exec also demonstrates the column sorting feature;\n   you can type SORT FIRST to sort by first name, and so on\n\n                      - - - - - - - - - -\n\n\n   Now you've looked through the demonstrations, you should be able to\n   make the utility work on one of your own tables. Don't forget, your\n   table must have either one or two keys.  You can see how to invoke\n   the utility by example in DEM#3 and see the full documentation for\n   the interface in #INVOKE.\n\n                      - - - - - - - - - -\n\nDemonstration 3: Column sort + extension variables + data dictionary.\n---------------\n\n   The exec will also deal with tables where rows have any number of\n   different extension variables; you don't have to know the names\n   of any of the variables when defining the table.\n\n   Now run the exec DEM#5.  The display will look similar to demo 2;\n   the E and B prefix commands will give a new display. What you will\n   see is a list of the variable names for the row, each one being\n   followed by an N (for a named variable) or an X (for an extension\n   variable). You can use In Rn to insert and repeat lines to create\n   new extension variables, D to delete them. You can't repeat variable\n   names and you can't create new Named variables, only new Extension\n   variables.\n\n   There are two rows for each variable; its name, type (N or X) and\n   value, plus a second line giving an explanation of what the name\n   means.  This utility implements an (optional) data dictionary\n   feature, where every variable name can have a description linked\n   with it.\n\n   To see how this works, use I to insert an new line for a row, then\n   add a variable name and a value. Your new variable name will not\n   have any description associated with it;\n\n                      - - - - - - - - - -\n\nDemonstration 4: Maintaining a data dictionary\n---------------\n\n   A data dictionary for the Friends and Family demonstration is\n   supplied. Run exec DEM#6 to see it. Note that you can update, ADD\n   and DELETE data dictionary entries, and the Friends and Family\n   demonstration will reflect those changes when next it's invoked.\n\n   With Friends and Family and the Data Dictionary you now can see\n   that (a) the look and feel of table updates are very similar and\n   (b) you need very little customisation.\n\n\n                      - - - - - - - - - -\n\n   You can now customise the package by reading the #CUSTOM member\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INDEX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 8, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "This says what information is in which member. High-level documentation\nis in the members prefixed by $ (pound-sign); specific details are\nin the members starting with # (hash-sign).\n\n$README   The starting point for all the documentation\n#CMDS     User commands available when a table is being displayed\n#CUSTOM   How to customize the sample panels to match your tables\n#INVOKE   Arguments to the execs provided\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#CMDS": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00:\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 58, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "Basic commands available\n------------------------\n\nCommand line\n------------\n\nADD newkey \u00a3oldkey]\n\n    For tables with one key, adds a new row with key value 'newkey',\n    optionally copying values from 'oldkey'.\n\nADD newkey1 newkey2 \u00a3oldkey1 oldkey2]\n\n    For tables with two keys, adds a new row with key values 'newkey1'\n    and 'newkey2' optionally copying values from 'oldkey1'.  Either one\n    of the new keys may match the old, but oviously not both. This can\n    be specified:\n\n        ADD = newkey2 oldkey1 oldkey2\n\n    where 'newkey1' will be the same as 'oldkey1'.\n\nDELETE key1       or for 2-keyed tables\nDELETE key1 key2\n\n    issued from the command line (there is no D prefix command)\n    and must be typed in full.\n\nSORT column-heading order\n\n    Note that this option requires the developer to modify the display\n    panel to provide the column names.  See #CUSTOM.\n\n    'order' can be A for ascending, D for descending.\n\nLocate value\n\n    After a table has been sorted, L <value> will locate the value in\n    the sorted column and line up the display.\n\n\nPrefix area\n-----------\n\ne   For 'Edit' or 'Update' of a table row.\nu\n    This displays the panel in editable form (usually seen as green\n    text) and all fields overtyped are saved. You can put validation\n    on the panel as you see fit.\n\n    If you want to exit, type CANCEL on the command line and your\n    changes will not be saved.\n\ns   For 'Select' or 'Browse' of a table row\nb\n    This displays the panel in non-editable form (usually blue text)\n    and fields cannot be overtyped.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#CUSTOM": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00,\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 44, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "Customising display panels\n--------------------------\n   To make this work without the need for running the library\n   allocation exec which is part of the demonstrations, you should\n   install the various components in the appropriate ISPF libraries\n\n   Anything            should go\n   starting:           to:\n\n   UTC                 SYSPROC or SYSEXEC\n   UTP                 ISPPLIB\n\n\n   To set up a table display panel, change either PFANDF3 or\n   UTPVL01.\n\n    1) change the row starting %cmd to have your headings\n    2) change the row starting !lcmd to have your variables.\n    3) change between the comment\n\n                             /* SORT command                 ...start */\n\n       and the corresponding ...end\n\n       - change so that the column names you've coded under 1) match\n         the sort options\n       - change so that the variables you've coded under 2) match\n         your table variables\n\n    4) If you don't want to have Browse and Update exits, delete\n       the lines from\n                             /* Exits for browse and update  ...start */\n                 to\n                             /* Exits for browse and update  ...end   */\n\n    5) If you don't have an exit, you will need a panel for updating\n       a single row. Clone UPTVL02 for this purpose. You should only\n       need to change the )BODY part of the panel.\n\n    6) Read the #INVOKE member to see how to invoke the UTCTSHAR\n       exec. The two panels you've just created will be the\n       TBPAN and FULLPAN parameters.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#INVOKE": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\xa6\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 166, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "General table display\n---------------------\n\nThis shows the arguments to the general table display exec.  The\nexec is designed to be invoked from another exec or (more likely) from\nan IPSF panel.  For this reason, none of the keywords may be\nabbreviated but must, in order to provide documentation, be coded in\nfull.\n\n%UTCTSHAR    The command name. Designed not to be memorable, so that\n             it should not clash with another\n\n  Arguments:\n\n   TABLE(name)         required\n   LIBRARY(ddname)    } mutually exclusive\n   DATASET(dsname)    }\n   TBPAN(panel1)       required\n   FULLPAN(panel2)     required\n   SCAN(scanparm)      optional\n   REFRESH             optional\n   DESCENDING          optional\n\nname         The ISPF table to be displayed\nddname       Pre-allocated DDname of the library containing the table\ndsname       fully qualified dataset name (coded without quotes) of\n               the library containing the table. DDNAME and DATASET\n               are mutually exclusive; if both are coded (not\n               recommended) only DATASET is used.\npanel1       Scrollable panel to display table rows\npanel2       Display panel for full details of one row only\nscanparm     YES - enable row scanning\n             NO  - row scanning not needed\n\n             The recommended value for this parm is YES\n\n\nREFRESH      Re-open the table on each redisplay. Not usually needed.\nDESCENDING   Show the table in descending sequence.\n\n\nGeneral way of handling variables in a single row\n-------------------------------------------------\n\nUTCTBTMP can be invoked by UTCTSHAR to display all the Named and\nExtension variables on a single table row.\n\n   UPDATE            } mutually exclusive; if neither specified,\n   BROWSE            } BROWSE assumed\n\n                      all keyword parameters optional\n   PANEL(panelid)\n   NAMETB(nametb)     all keyword parameters optional\n   DATASET(namelib)\n   NAMEDD(namedd)\n   THISDA(homeda)\n   THISDD(homedd)\n\n\n\n UPDATE   say whether changes to the table are allowed or not\n BROWSE\n panelid  name of panel to be used to show the variables on the row.\n          default panelid is UTPTBTMP.\n\nThese keyword parameters are only needed if there is a table available\nwhich contains a description of what variable names mean.\n\n\n nametb     table name\n namelib  } mutualy exclusive: dataset name or DDname of library\n namedd   ) containing the table.  These over-ride HOMEDA and HOMEDD\n homeda   } mutualy exclusive: dataset name or DDname of library\n homedd   ) containing the table.  These are provided from UTCTSHAR\n            automatically, making NAMELIB and NAMEDD unnecessary when\n            the names table is on the same library as the displayed\n            table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE578": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x14\\x01\\x01\\x02_\\x01\\x02\\x14\\x7f\\x13P\\x006\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-05-27T13:50:14", "lines": 54, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 578 is from Roy Gardiner, and contains a general ISPF     *   FILE 578\n//*           table handling facility, which allows you to drive    *   FILE 578\n//*           your own ISPF panels with an easily creatable table   *   FILE 578\n//*           update utility of your own making.                    *   FILE 578\n//*                                                                 *   FILE 578\n//*     ISPF general table handler                                  *   FILE 578\n//*     --------------------------                                  *   FILE 578\n//*                                                                 *   FILE 578\n//*     Provided by Roy Gardiner    version 1.0 May 2002            *   FILE 578\n//*                                                                 *   FILE 578\n//*     Please e-mail comments and questions to:                    *   FILE 578\n//*     roy@roygardiner.com                                         *   FILE 578\n//*                                                                 *   FILE 578\n//*     Summary                                                     *   FILE 578\n//*     -------                                                     *   FILE 578\n//*                                                                 *   FILE 578\n//*     This package will enable you to maintain any ISPF table     *   FILE 578\n//*     which has one or two key fields. You only need to code,     *   FILE 578\n//*     by copying the examples given here, (1) a scrollable        *   FILE 578\n//*     display for the whole table (2) a display panel for         *   FILE 578\n//*     full details of a single row.  The benefit of the           *   FILE 578\n//*     package is that it enables you to create in a few           *   FILE 578\n//*     minutes a table update utility using your own panels.       *   FILE 578\n//*                                                                 *   FILE 578\n//*     Basic features provided                                     *   FILE 578\n//*     -----------------------                                     *   FILE 578\n//*                                                                 *   FILE 578\n//*     Just by cloning the sample panels you will be able to:      *   FILE 578\n//*                                                                 *   FILE 578\n//*       - see a scrollable display of your table                  *   FILE 578\n//*       - use the Locate command to find rows                     *   FILE 578\n//*       - sort the table display                                  *   FILE 578\n//*       - display extra information which will not fit on a       *   FILE 578\n//*           single display line                                   *   FILE 578\n//*       - update the table (multiple users)                       *   FILE 578\n//*       - protect against concurrent update                       *   FILE 578\n//*       - edit any number of extension variables to any row,      *   FILE 578\n//*           without knowing the names of the variables            *   FILE 578\n//*       - provide simple data dictionary (along the lines of:     *   FILE 578\n//*           this is a variable name, this is what it means)       *   FILE 578\n//*                                                                 *   FILE 578\n//*     (Note that this package does NOT handle non-keyed tables)   *   FILE 578\n//*                                                                 *   FILE 578\n//*     The benefit of using the package is development speed;      *   FILE 578\n//*     all you need to do is to modify the example panels to       *   FILE 578\n//*     match your table layout - a few minutes work.               *   FILE 578\n//*                                                                 *   FILE 578\n//*     The package is not designed to handle large volumes of      *   FILE 578\n//*     data; for tables larger than 1000 rows which need to be     *   FILE 578\n//*     updated by more than about a dozen people, consider DB2     *   FILE 578\n//*     or another proper database.  Large tables combined with     *   FILE 578\n//*     many users create unacceptable performance and              *   FILE 578\n//*     especially update contention issues.                        *   FILE 578\n//*                                                                 *   FILE 578\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEM#1": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 23, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Create the demonstration library allocation                        */\n/**********************************************************************/\n\n  q1 = \"???????\"\n  q2 = \"???????\"\n  q3 = \"???????\"\n\n  q1 = \"ZZZZZZZ\"\n  q2 = \"A\"\n  q3 = \"GEN\"\n\n  dataset = \"'\"q1\".\"q2\".\"q3\"'\"\n                             /* demo: table library                   */\n  address \"TSO\" \"ALLOC DD(DEMTLIB) SHR DA(\"dataset\") REUSE\"\n  say \"Table library allocated code:\"rc\n                             /* demo: panel library                   */\n  address \"ISPEXEC\" \"LIBDEF ISPPLIB DATASET ID(\"dataset\")\"\n  say \"Panel library allocated code:\"rc\n                             /* demo: panel library                   */\n  address \"TSO\"  \"ALTLIB ACTIVATE APPLICATION(CLIST)\"   ,\n                 \"DATASET(\"dataset\")\"\n  say \"Clist library allocated code:\"rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#2": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 25, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Create the demonstration friends&family table                      */\n/**********************************************************************/\n\n  address \"ISPEXEC\"\n\n  \"TBCREATE FANDF   KEYS(NAME1 NAME2) NAMES(DESCR ADDRESS PHONE \",\n                   \") REPLACE LIBRARY(DEMTLIB)\"\n\n  name1 = \"GEORGE\"\n  name2 = \"BUSH\"\n  phone = \"202-456-1414\"\n  descr = \"President of the United States\"\n  address = \"1600 Pennsylvania Avenue NW\" ,\n            \"Washington, DC 20500\"\n  \"TBADD FANDF\"\n\n  name1 = \"TONY\"\n  name2 = \"BLAIR\"\n  phone = \"0207 219 3000\"\n  descr = \"Prime Minister of Great Britain\"\n  address = \"House of Commons, London SW1 OAA\"\n  \"TBADD FANDF\"\n\n  \"TBCLOSE FANDF LIBRARY(DEMTLIB)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#2A": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00$\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 36, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Create the demonstration friends&family table                      */\n/* with lots of extra dummy lines to demonstrate table features       */\n/**********************************************************************/\n\n  address \"ISPEXEC\"\n\n  \"TBCREATE FANDF   KEYS(NAME1 NAME2) NAMES(DESCR ADDRESS PHONE \",\n                   \") REPLACE LIBRARY(DEMTLIB)\"\n\n  name1 = \"GEORGE\"\n  name2 = \"BUSH\"\n  phone = \"202-456-1414\"\n  descr = \"President of the United States\"\n  address = \"1600 Pennsylvania Avenue NW\" ,\n            \"Washington, DC 20500\"\n  \"TBADD FANDF\"\n\n  name1 = \"TONY\"\n  name2 = \"BLAIR\"\n  phone = \"0207 219 3000\"\n  descr = \"Prime Minister of Great Britain\"\n  address = \"House of Commons, London SW1 OAA\"\n  \"TBADD FANDF\"\n\n  do i = 1 to 50\n     xx = right(\"0\"i,2)\n     name1 = \"TONY\"xx\n     name2 = \"BLAIR\"xx\n     phone = \"0207 219 3\"xx\n     descr = \"Prime Minister\"xx\n     address = \"London SW\"xx\n     \"TBADD FANDF\"\n  end\n\n  \"TBCLOSE FANDF LIBRARY(DEMTLIB)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#2B": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 26, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Create the demonstration friends&family table                      */\n/**********************************************************************/\n\n  address \"ISPEXEC\"\n\n  \"TBCREATE UTTNAMES KEYS(NAME) NAMES(DESC\",\n                   \") REPLACE LIBRARY(DEMTLIB)\"\n\n  name = \"NAME1\"\n  desc = \"Friends&Family: First name\"\n  \"TBADD UTTNAMES\"\n  name = \"NAME2\"\n  desc = \"Friends&Family: Surname\"\n  \"TBADD UTTNAMES\"\n  name = \"PHONE\"\n  desc = \"Friends&Family: Phone number\"\n  \"TBADD UTTNAMES\"\n  name = \"DESCR\"\n  desc = \"Friends&Family: Title or informal description\"\n  \"TBADD UTTNAMES\"\n  name = \"ADDRESS\"\n  desc = \"Friends&Family: Postal Address\"\n  \"TBADD UTTNAMES\"\n\n  \"TBCLOSE UTTNAMES LIBRARY(DEMTLIB)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#3": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 9, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Display the demonstration friends and family table                 */\n/**********************************************************************/\n\n  address \"TSO\"  ,\n      \"%UTCTSHAR TABLE(FANDF)\"  ,\n      \"LIBRARY(DEMTLIB)\"        ,\n      \"TBPAN(PFANDF1)\"          ,\n      \"FULLPAN(PFANDF1X)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#4": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 10, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Display the demonstration friends and family table                 */\n/* with panel coded to show sorting by column                         */\n/**********************************************************************/\n\n  address \"TSO\"  ,\n      \"%UTCTSHAR TABLE(FANDF)\"  ,\n      \"LIBRARY(DEMTLIB)\"        ,\n      \"TBPAN(PFANDF2)\"          ,\n      \"FULLPAN(PFANDF1X)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#5": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 9, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Display the demonstration friends and family table                 */\n/* with panel coded to show sorting by column                         */\n/**********************************************************************/\n\n  address \"TSO\"  ,\n      \"%UTCTSHAR TABLE(FANDF)\"  ,\n      \"LIBRARY(DEMTLIB)\"        ,\n      \"TBPAN(PFANDF3)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEM#6": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 10, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* rexx ***************************************************************/\n/* Display the demonstration friends and family table                 */\n/* with panel coded to show sorting by column                         */\n/**********************************************************************/\n\n  address \"TSO\"  ,\n      \"%UTCTSHAR TABLE(UTTNAMES)\"  ,\n      \"LIBRARY(DEMTLIB)\"        ,\n      \"TBPAN(UTPVL01)\" ,\n      \"FULLPAN(UTPVL02)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FANDF": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00<\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 60, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PFANDF1": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00!\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 33, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input)  caps(on) color(red)\n@ type(output) color(blue)\n)body expand(}})\n+}-} Friends and Family demonstration +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n%Cmd  +First         Last+                       Description+\n)Model\n!lcmd @name1        @name2                      @descr\n)init\n .zvars = '(scroll)'\n)reinit\n)proc\n &zcmd = trunc(&zcmd,' ')\n &opts = .trail\n &maincmd = &zcmd\n                             /* standard command abbreviations        */\n if (&maincmd = L,LO,LOC,LOCA,LOCAT)\n    &maincmd = LOCATE\n &zcmd = ' '\n if (&ztdsels \u00ac= 0000)\n   &linecmd = ' '\n   &lcmd = trunc(&lcmd,' ')\n   &lopt = .trail\n                             /* standard prefix-area abbreviations    */\n   if (&lcmd = E)\n      &lcmd = U\n   if (&lcmd = B)\n      &lcmd = S\n   if (&lcmd = S,U)\n     &linecmd  = &lcmd\n &lcmd = ' '\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PFANDF1X": {"ttr": 789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 24, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input) caps(on) color(red)\n? type(output) color(blue)\n\u00af type(&attr) color(&color) caps(off)\n)body expand(}})\n+}-}  Friends and Family full details +}-}\n%Command ===>_zcmd                                                            +\n\n\n+first name       ?name1\n+second name      ?name2\n+phone            \u00afphone\n+description      \u00afdescr\n+address          \u00afaddress\n\n)init\n)reinit\n)proc\n if (&zcmd = CAN,CANC,CANCE,CANCEL)\n   &linecmd = &z\n   &zerrlm = 'Update abandoned'\n   .msg  = isrz001\n   .resp = END\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PFANDF2": {"ttr": 791, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x009\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 57, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input)  caps(on) color(red)\n@ type(output) color(blue)\n)body expand(}})\n+}-} Friends and Family demonstration +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n%Cmd  +First         Last+                       Description+\n)Model\n!lcmd @name1        @name2                      @descr\n)init\n .zvars = '(scroll)'\n)reinit\n)proc\n &zcmd = trunc(&zcmd,' ')\n &opts = .trail\n &maincmd = &zcmd\n                             /* standard command abbreviations        */\n if (&maincmd = L,LO,LOC,LOCA,LOCAT)\n    &maincmd = LOCATE\n                             /* SORT command                 ...start */\n if (&maincmd = SORT)\n                             /* split sort command options            */\n    &opt1    = trunc(&opts,' ')\n                             /* ascending or descending?              */\n    &sortdir = .trail\n    if (&sortdir \u00ac= D)\n        &sortdir  = A\n                             /* SORT command tailoring       ...start */\n                             /* select variable name from column      */\n                             /* SORTTYPE can be C or N                */\n    &sortvar  = &Z\n    if (&opt1 = F,FI,FIR,FIRS,FIRST)\n       &sortvar  = 'NAME1'\n       &sorttype = 'C'\n    if (&opt1 = L,LA,LAS,LAST)\n       &sortvar  = 'NAME2'\n       &sorttype = 'C'\n    if (&opt1 = D,DE,DES,DECR,DESCRI,DESCRIP,DESCRIPT,DESCRIPTI,\n                DESCRIPTIO,DESCRIPTION)\n       &sortvar  = 'DESCR'\n       &sorttype = 'C'\n                             /* SORT command tailoring       ...end   */\n                             /* SORT command                 ...end   */\n &zcmd = ' '\n if (&ztdsels \u00ac= 0000)\n   &linecmd = ' '\n   &lcmd = trunc(&lcmd,' ')\n   &lopt = .trail\n                             /* standard prefix-area abbreviations    */\n   if (&lcmd = E)\n      &lcmd = U\n   if (&lcmd = B)\n      &lcmd = S\n   if (&lcmd = S,U)\n     &linecmd  = &lcmd\n &lcmd = ' '\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PFANDF2E": {"ttr": 793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00>\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 62, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input)  caps(on) color(red)\n@ type(output) color(blue)\n)body expand(}})\n+}-} Friends and Family demonstration +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n%Cmd  +First         Last+                       Description+\n)Model\n!lcmd @name1        @name2                      @descr\n)init\n .zvars = '(scroll)'\n)reinit\n)proc\n                             /* Comments show where to change lines   */\n                             /* when modifying this panel for use     */\n                             /* with a new table                      */\n &zcmd = trunc(&zcmd,' ')\n &opts = .trail\n &maincmd = &zcmd\n if (&maincmd = L,LO,LOC,LOCA,LOCAT)\n    &maincmd = LOCATE\n if (&maincmd = SORT)\n                             /* variables for SORT command    ...START*/\n                             /* SVAR: column name                     */\n                             /* SOPTS: sort options                   */\n    if (&opt1 = &z)\n       &svar     = 'APP'\n       &sopts    = 'C,A'\n    if (&opt1 = DESCRIPTION)\n       &svar     = 'DESC'\n       &sopts    = 'C,A'\n                             /* variables for SORT command    ...END  */\n if (&maincmd = ADD)\n                             /* Assign your own value to EXITUPD to   */\n                             /* get your own action taken for ADD     */\n    &exitupd =  'UTCTBTMP UPDATE PANEL(RIDS064C) +\n                          NAMETB(RIDS0643) NAMEDD(SECTLIB'\n                             /* 7 chars max in env name               */\n    &opt1 = trunc(&opt1,7)\n &zcmd = ' '\n if (&ztdsels \u00ac= 0000)\n   &linecmd = ' '\n   &lcmd = trunc(&lcmd,' ')\n   &lopt = .trail\n   if (&lcmd = E)\n      &lcmd = U\n   if (&lcmd = B)\n      &lcmd = S\n   if (&lcmd = S,U)\n     &linecmd  = &lcmd\n     if (&linecmd = S)\n                             /* Assign a value to EXITACT to be       */\n                             /* executed for the B or S line command  */\n        &exitact =  'UTCTBTMP BROWSE PANEL(RIDS064C) +\n                              NAMETB(RIDS0643) NAMEDD(SECTLIB'\n     if (&linecmd = U)\n                             /* Assign a value to EXITUPD to be       */\n                             /* executed for the E or U line command  */\n        &exitupd =  'UTCTBTMP UPDATE PANEL(RIDS064C) +\n                              NAMETB(RIDS0643) NAMEDD(SECTLIB'\n &lcmd = ' '\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PFANDF3": {"ttr": 795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00C\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 67, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input)  caps(on) color(red)\n@ type(output) color(blue)\n)body expand(}})\n+}-} Friends and Family demonstration +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n%Cmd  +First         Last+                       Description+\n)Model\n!lcmd @name1        @name2                      @descr\n)init\n .zvars = '(scroll)'\n)reinit\n)proc\n &zcmd = trunc(&zcmd,' ')\n &opts = .trail\n &maincmd = &zcmd\n                             /* standard command abbreviations        */\n if (&maincmd = L,LO,LOC,LOCA,LOCAT)\n    &maincmd = LOCATE\n                             /* SORT command                 ...start */\n if (&maincmd = SORT)\n                             /* split sort command options            */\n    &opt1    = trunc(&opts,' ')\n                             /* ascending or descending?              */\n    &sortdir = .trail\n    if (&sortdir \u00ac= D)\n        &sortdir  = A\n                             /* SORT command tailoring       ...start */\n                             /* select variable name from column      */\n                             /* SORTTYPE can be C or N                */\n    &sortvar  = &Z\n    if (&opt1 = F,FI,FIR,FIRS,FIRST)\n       &sortvar  = 'NAME1'\n       &sorttype = 'C'\n    if (&opt1 = L,LA,LAS,LAST)\n       &sortvar  = 'NAME2'\n       &sorttype = 'C'\n    if (&opt1 = D,DE,DES,DESCR,DESCRI,DESCRIP,DESCRIPT,DESCRIPTI,\n                DESCRIPTIO,DESCRIPTION)\n       &sortvar  = 'DESCR'\n       &sorttype = 'C'\n                             /* SORT command tailoring       ...end   */\n                             /* SORT command                 ...end   */\n &zcmd = ' '\n if (&ztdsels \u00ac= 0000)\n   &linecmd = ' '\n   &lcmd = trunc(&lcmd,' ')\n   &lopt = .trail\n                             /* standard prefix-area abbreviations    */\n   if (&lcmd = E)\n      &lcmd = U\n   if (&lcmd = B)\n      &lcmd = S\n   if (&lcmd = S,U)\n     &linecmd  = &lcmd\n                             /* Exits for browse and update  ...start */\n     if (&linecmd = S)\n                             /* Assign a value to EXITACT to be       */\n                             /* executed for the B or S line command  */\n        &exitact =  'UTCTBTMP BROWSE'\n     if (&linecmd = U)\n                             /* Assign a value to EXITUPD to be       */\n                             /* executed for the E or U line command  */\n        &exitupd =  'UTCTBTMP UPDATE'\n                             /* Exits for browse and update  ...end   */\n &lcmd = ' '\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTCTBTMP": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x01\\x0f\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 271, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* Rexx */\n/**********************************************************************/\n/* Function:                                                          */\n/*                                                                    */\n/*  Form a table from a list of variables, display the values of      */\n/*  the variables, update the list and put the values back to the     */\n/*  shared pool                                                       */\n/*                                                                    */\n/* Author:                                                            */\n/**********************************************************************/\n/* ChangeControl-Start                                                */\n/* ChangeControl-End                                                  */\n                             /* Debug on?                             */\n  arg argstr\n  if pos(\"DEBUG\",argstr) \\= 0\n  then trace all\n  else\n  do\n     a = msg(\"OFF\")\n     a = prompt(\"OFF\")\n  end\n                             /* establish default environment         */\n  address \"ISPEXEC\"\n  sysenv = sysvar(\"SYSENV\")\n                             /* error handling                        */\n  \"CONTROL ERRORS RETURN\"\n  Zerrlm = \"\"\n  rc = 0\n  AcceptCC = 8\n  call on error name Error\n  call on failure name Error\n /********************************************************************/\n\n  false  = a\\=a\n  true   = a=a\n  tnames = false\n  nLines = 1\n  desc  = \"\"\n  arg action . 1  \"NAMETB(\"  nametb  \")\" ,\n               1  \"DATASET(\" namelib \")\" ,\n               1  \"NAMEDD(\"  namedd  \")\" ,\n               1  \"PANEL(\"   panel   \")\" ,\n               1  \"THISDD(\"  homedd  \")\" ,\n               1  \"THISDA(\"  homeda  \")\" ,\n               .\n                             /*  Are we to use specified libraries    */\n                             /*  for names or the current library?    */\n  if namelib = \"\" then namelib = homeda\n  if namedd  = \"\" then namedd  = homedd\n  if nametb  = \"\" then nametb = \"UTTNAMES\"\n                             /*  Use dataset name or DDname?          */\n  if namelib \\= \"\" then\n  do\n     if sysdsn(\"'\"namelib\"'\") = \"OK\" then\n     do\n        \"LIBDEF NAMEST DATASET ID('\"namelib\"')\"\n        \"TBOPEN\" nametb \"LIBRARY(NAMEST) NOWRITE\"\n        if rc = 0 then Tnames = true\n     end\n  end\n  else if namedd \u00ac= \"\" then\n  do\n      \"TBOPEN\" nametb \"LIBRARY(\"namedd\") NOWRITE\"\n      if rc = 0 then Tnames = true\n  end\n                             /*  panel specified?  (optional)         */\n  if panel = \"\"\n  then panel = \"UTPTBTMP\"\n                             /*  select browse or edit display        */\n  if action = \"UPDATE\" then\n  do\n     color  = \"GREEN\"\n     attr   = \"INPUT\"\n  end\n  else\n  do\n     attr  = \"OUTPUT\"\n     color = \"BLUE\"\n  end\n                             /*  retrieve external values             */\n  \"VGET (KCOUNT KEY1 KEY2 &KEY1 &KEY2\"   ,\n        \"NAMES  &NAMES EXTNAMES &EXTNAMES) SHARED\"\n  slog = log\n                             /*  get key value(s) for display         */\n  key1val = value(key1)\n  if kcount = 1\n  then key2val = \"None\"\n  else key2val = value(key2)\n                             /*  create temporary table for variables */\n  table   = \"UTTTMP77\"\n  \"TBCREATE &TABLE NOWRITE NAMES(NAME LOCN VALUE DESC) REPLACE\"\n                             /*  extract each variable and its value  */\n  fullnames = names extnames\n  J = words(names)\n  locn = \"N\"\n  do i = 1 to words(fullnames)\n     name  = word(fullnames,i)\n     value = value(name)\n     desc  = \"\"\n     if i>j then locn = \"X\"\n     if Tnames then \"TBGET\" nametb\n     \"TBADD &TABLE\"\n  end\n  \"TBSORT  &TABLE FIELDS(NAME,C,A)\"\n                             /*  display the temporary table          */\n  log = slog\n  tblrow     = 0\n  \"TBTOP   &TABLE\"\n  \"TBDISPL &TABLE  PANEL(&PANEL) CSRROW(\"tblrow\")\"\n  subTbRc = rc\n  do while subTbRc < 8 | ztdsels > 0\n\n                             /*  cancel without update                */\n     if zcmd = \"CAN\" then\n     do\n        call stdmsg \"Update cancelled, no changes made\",   ,\n                    \"Cancelled\"\n        signal qquit\n     end\n\n     crp = ztdtop\n                             /*  locate line                          */\n     if zcmd = \"LOCATE\" then\n     do\n                             /* set name value                        */\n        name = opt1\"*\"\n                             /* ...scan for it                        */\n        \"TBTOP &TABLE\"\n        \"TBSCAN &TABLE ARGLIST(NAME)\"  ,\n               \"CONDLIST(EQ) POSITION(CRP)\"\n                             /* row not found...                      */\n        if rc = 8 then\n        do\n                             /* ...show the last few                  */\n           \"TBBOTTOM &TABLE POSITION(CRP)\"\n           crp = crp - 6\n        end\n     end\n                             /* add a line                            */\n     if zcmd = \"ADD\" then\n     do\n        if action \\= \"UPDATE\"\n        then call StdMsg \"You are not in update mode\"\n        else\n        do\n           \"TBVCLEAR &TABLE\"\n           locn = \"X\"\n           \"TBADD\" table\n        end\n     end\n                             /*  process all selected lines           */\n     do while ztdsels > 0\n        slog = log\n        if Tnames then\n        do\n           slog = log\n           \"TBGET\" nametb\n           log = slog\n        end\n                             /*  update only if requested             */\n        if action = \"UPDATE\"\n        then \"TBPUT &TABLE\"\n                             /*  insert lines where necessary         */\n        if lcmd = \"I\"   | lcmd = \"R\" then\n        do\n           if action \\= \"UPDATE\"\n           then call StdMsg \"You are not in update mode\"\n           else\n                             /* Insert lines                          */\n           do\n              if lcmd = \"I\" then\n              do\n                 \"TBVCLEAR\" table\n              end\n              name = \"VARNAME\"\n              locn = \"X\"\n\n                             /* Add requested number of lines         */\n              if \\datatype(nLines,\"NUM\")\n              then nLines = 1\n\n              do i = 1 to nLines\n                 \"TBADD\" table\n                 if i = 1\n                 then \"TBQUERY\" table \"POSITION(TBLROW)\"\n              end\n           end\n        end\n        if lcmd = \"D\" then\n        do\n                             /* Delete lines                          */\n           if locn = \"X\"\n           then \"TBDELETE\" table\n           else call stdmsg ,\n                    \"Only X type variables can be deleted\",   ,\n                    \"Not deletable\"\n\n        end\n                             /* Discard invalid variables             */\n        if symbol(name) = \"BAD\" then\n        do\n           if name \\= \"\" then\n               call StdMsg \"unusable name\" name \"changed to VARNAME\"\n           name = \"VARNAME\"\n           \"TBPUT &TABLE\"\n        end\n        lcmd = \"\"\n                             /*  get next selected line               */\n        if ztdsels = 1\n        then  ztdsels = 0\n        else \"TBDISPL &TABLE\"\n     end\n                             /*  reposition table                     */\n     if subTbRc \\= 8 then\n     do\n        \"TBTOP   &TABLE\"\n        \"TBSKIP  &TABLE  NUMBER(\"crp\")\"\n        \"TBDISPL &TABLE  PANEL(&PANEL) CSRROW(\"tblrow\")\"\n        SubTbRc = rc\n     end\n  end\n\n  if action = \"UPDATE\" then\n  do\n                             /*  rebuild list of extension variables  */\n     extnames = \"\"\n     badlist = \"\"\n                             /*  scan the whole table                 */\n     \"TBTOP   &TABLE\"\n     \"TBSKIP  &TABLE\"\n     do while rc = 0\n        call value name,value\n        if locn = \"X\"\n        then extnames = extnames name\n        \"TBSKIP &TABLE\"\n     end\n  end\n  \"VPUT (NAMES  &NAMES EXTNAMES &EXTNAMES) SHARED\"\n /********************************************************************/\nqquit:\n                             /* abandon ...                           */\n  AcceptCC = 12\n  if tnames then \"TBEND\" nametb\n  exit\n /********************************************************************/\nStdMsg:\n  parse arg zerrlm,zerrsm,quit\n  if sysenv = \"FORE\"\n  then \"ISPEXEC SETMSG MSG(ISRZ002)\"\n  else say date() time() zerrlm\n  if quit \\= \"\" then signal qquit\n  return\n /********************************************************************/\n                             /* Generalised error handling            */\nError:\n                             /* Return acceptable code to the program */\n  if (rc >= 0 & rc <= AcceptCC)\n  then return\n                             /* Or report the error and terminate     */\n  eline = sourceline(sigl)\n  errCond = condition(\"C\")\n  errDesc = condition(\"D\")\n                             /* get error text if applicable          */\n  if rc > 0 & rc < 100\n  then etext = errortext(rc)\n  else etext = \"\"\n                             /* Check error code                      */\n  if rc = -3\n  then etext = \"A Host command was not found\"\n  \"DISPLAY PANEL(UTPERR01)\"\n  signal qquit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UTCTSHAR": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x01\\x85\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 389, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": "/* Rexx */\n/**********************************************************************/\n/* Function: General routine to handle ISPF tables                    */\n/*                                                                    */\n/* This routine provides general-purpose display functions for ISPF   */\n/* tables that have one or two keys. Non-keyed tables are not catered */\n/* for. The routine allows display, scrolling, sorting, panels to     */\n/* display full row details, command exits for row display and for    */\n/* row update, protection against concurrent update of any row.       */\n/* This allows multiple user access, with update, to the table.       */\n/* Extension variables, if present, are always preserved.             */\n/*                                                                    */\n/* R Gardiner, November 1997                                          */\n/**********************************************************************/\n/* ChangeControl-Start                                                */\n/* ChangeControl-End                                                  */\n                             /* Debug on?                             */\n  arg argstr\n  if pos(\"DEBUG\",argstr) \\= 0\n  then trace all\n  else\n  do\n     debug = \"\"\n     a = msg(\"OFF\")\n     a = prompt(\"OFF\")\n  end\n                             /* establish default environment         */\n  address \"ISPEXEC\"\n                             /* error handling                        */\n  \"CONTROL ERRORS RETURN\"\n  Zerrlm = \"\"\n  rc = 0\n  AcceptCC = 8\n  call on error name Error\n  call on failure name Error\n                             /* general variables                     */\n  true    = a=a\n  false   = \u00actrue\n  sysuid  = sysvar(\"SYSUID\")\n  dandt   = sysuid date() time()\n  update    = \"OK\"\n                             /* table update logging variables        */\n  log     = \"\"\n  storLog = \"\"\n  linecmd = \"\"\n  svar    = \"\"\n  NoSkip  = false\n                             /* names of display and update exits     */\n  exitact   = \"\"\n  exitupd   = \"\"\n  extnames  = \"\"\n                             /* decode arguments                      */\n  parse arg                                                  ,/*..cont*/\n             1 \"TABLE(\"         table       \")\"              ,/*..cont*/\n             1 \"LIBRARY(\"       library     \")\"              ,/*..cont*/\n             1 \"DATASET(\"       dataset     \")\"              ,/*..cont*/\n             1 \"TBPAN(\"         tbpan       \")\"              ,/*..cont*/\n             1 \"FULLPAN(\"       fullpan     \")\"              ,/*..cont*/\n             1 \"SCAN(\"          scan        \")\"              ,/*..cont*/\n\n  if dataset \\= \"\"\n  then exitlibs = \"THISDA(\"dataset\")\"\n  else exitlibs = \"THISDD(\"library\")\"\n                             /* is it to be rebuilt each time?        */\n  if pos(\"REFRESH\",argstr) \\= 0\n  then refresh = true\n  else refresh = false\n                             /* decide order of table display         */\n  if pos(\"DESCENDING\",argstr) \\= 0\n  then order = \"D\"\n  else order = \"A\"\n                             /* DATASET takes precedence over LIBRARY */\n  if dataset \\= \"\" then\n  do\n     \"LIBDEF YYDATA DATASET ID('&DATASET')\"\n     library = yydata\n  end\n  call TBopen \"NOWRITE\"\n                             /* open was successful.                  */\n                             /* deduce names of variables             */\n  \"TBQUERY &TABLE KEYS(KEY) NAMES(NAMES)\"\n                             /* check if the variable exists to       */\n                             /* enable row-level update checking      */\n  if pos(\"LOG\",names) \\= 0\n  then UpdateCheck = true\n  else UpdateCheck = false\n                             /* remove brackets                       */\n  parse var key \"(\" key1 key2 \")\" 1 \"(\" key \")\"\n                             /* check if one or two keys              */\n  scankey  = key1\n  scancond = \"GE\"\n  sortneeded = false\n\n  if key2 \\= \"\"\n  then kcount = 2\n  else kcount = 1\n                             /* browse type colours                   */\n  parse var names \"(\" names \")\"\n  color = \"BLUE\"\n  attr  = \"OUTPUT\"\n                             /* display the table                     */\n  \"TBDISPL &TABLE PANEL(&TBPAN)\"\n  do while rc <= 4\n     parse var opts opt1 opt2 opt3 opt4 opt5 opt6\n                             /* process command-line commands         */\n     if maincmd = \"LOCATE\"     then\n     do\n                             /* set key values...                     */\n        call value Scankey,opt1\n                             /* ...scan for them                      */\n        \"TBTOP &TABLE\"\n        \"TBSCAN &TABLE ARGLIST(&SCANKEY)\" ,\n               \"CONDLIST(\"scancond\") POSITION(ZTDTOP)\"\n                             /* row not found...                      */\n        if rc = 8 then\n        do\n                             /* ...show the last 10                   */\n           \"TBBOTTOM &TABLE POSITION(ZTDTOP)\"\n           \"TBSKIP   &TABLE NUMBER(-10)\"\n           NoSkip = true\n        end\n        csrrow = ztdtop\n     end\n     else\n     if maincmd = \"ADD\" then\n     do\n                             /* clear for add                         */\n        \"TBVCLEAR &TABLE\"\n        if kcount = 2             then\n        do\n                             /* check key options specified           */\n           if opt1 = \"=\" then opt1 = opt3\n           if opt2 = \"=\" then opt2 = opt4\n           if opt3 = \"=\" then opt3 = opt1\n           if opt4 = \"=\" then opt4 = opt2\n\n           call value key1,opt3\n           call value key2,opt4\n        end\n        else call value key1,opt2\n                             /* get extension variables from          */\n                             /* row being copied (if any)             */\n        addnames = \"\"\n        \"TBGET &TABLE SAVENAME(ADDNAMES)\"\n        parse var addnames \"(\" addnames \")\"\n                             /* set new key values                    */\n        if kcount = 2             then\n        do\n           call value key1,opt1\n           call value key2,opt2\n        end\n        else call value key1,opt1\n                             /* don't add if already there            */\n        \"TBEXIST &TABLE\"\n        if rc = 0\n        then call stdMsg \"Row\" opt1 \"already exists\"\n        else linecmd = \"U\"\n     end\n     else\n     if maincmd = \"DELETE\" then\n     do\n                             /* set key values for delete             */\n        call value key1,opt1\n        if kcount = 2\n        then call value key2,opt2\n                             /* call update routine                   */\n        call tbupdate maincmd,\"\"\n        csrrow = 0\n     end\n     else\n     if maincmd = \"SORT\" then\n     do\n        if sortvar = \"\"\n        then call StdMsg \"No valid sort column was selected\",  ,\n                         \"Column invalid\"\n        else Call TableSort\n     end\n                             /* process prefix area commands          */\n     if linecmd \\= \"\"  then\n     do\n        \"TBQUERY &TABLE POSITION(CSRROW)\"\n        \"TBGET   &TABLE SAVENAME(EXTNAMES) NOREAD\"\n        parse var extnames \"(\" extnames \")\"\n                             /* colours for table update              */\n        if linecmd = \"U\"          then\n        do\n           color  = \"GREEN\"\n           attr   = \"INPUT\"\n        end\n                             /* show full details of a row            */\n        if fullpan \\= \"\"  & (linecmd = \"S\"  | linecmd = \"U\")\n        then\n        do\n           \"DISPLAY PANEL(&FULLPAN)\"\n           do while rc = 0\n              \"DISPLAY PANEL(&FULLPAN)\"\n           end\n        end\n                             /* update table                          */\n        if linecmd = \"U\" | exitupd \\= \"\" then\n        do\n                             /* xrc keeps the user update return code */\n           xrc = 0\n           if exitupd \\= \"\" then\n           do\n                             /* call user update, if specified        */\n\n              \"TBEXIST &TABLE\"\n                             /* tell user if the row exists or not    */\n              if rc = 0\n              then exists = \"YES\"\n              else\n              do\n                 exists = \"NO\"\n                 extnames = addnames\n              end\n                             /* pass in all related variables         */\n              \"VPUT (KCOUNT KEY1 KEY2 &KEY1 &KEY2 \",\n                    \"NAMES &NAMES EXTNAMES &EXTNAMES) SHARED\"\n                             /* make sure we can restore environment  */\n              \"CONTROL DISPLAY SAVE\"\n              acceptCC = 12\n              address \"TSO\" exitupd exitlibs\n              xrc = rc\n              acceptCC = 8\n                             /* restore environment after the update  */\n              \"CONTROL DISPLAY RESTORE\"\n              exitupd = \"\"\n              \"VGET (NAMES &NAMES EXTNAMES &EXTNAMES) SHARED\"\n           end\n                             /* update the table                      */\n           if xrc = 0 then\n           do\n              call tbupdate \"MOD\",\"SAVE(&EXTNAMES) ORDER\"\n           end\n        end\n     end\n                             /* take exit action                      */\n     if exitact \\= \"\" then\n     do\n        \"VPUT (KCOUNT KEY1 KEY2 &KEY1 &KEY2 \",\n              \"NAMES &NAMES EXTNAMES &EXTNAMES) SHARED\"\n\n        \"CONTROL DISPLAY SAVE\"\n        acceptCC = 12\n        if exitstyl = \"CALL\"\n        then interpret \"CALL\" xroutine \"xparms\"\n        else address \"TSO\" exitact exitlibs\n        acceptCC = 8\n        \"CONTROL DISPLAY RESTORE\"\n        exitact = \"\"\n     end\n                             /* re-open the table if requested        */\n     if refresh\n     then call TBopen \"NOWRITE\"\n                             /* redisplay the table                   */\n     linecmd = \"\"\n     color   = \"BLUE\"\n     attr    = \"OUTPUT\"\n     if NoSkip\n     then NoSkip = false\n     else\n     do\n        \"TBTOP &TABLE\"\n        \"TBSKIP &TABLE NUMBER(&ZTDTOP)\"\n     end\n     \"TBDISPL &TABLE PANEL(&TBPAN) CSRROW(&CSRROW) AUTOSEL(NO)\"\n  end\n  if library = \"YYDATA\" then \"LIBDEF YYDATA\"\nqquit:\n                             /* abandon ...                           */\n  AcceptCC = 12\n  \"TBEND &TABLE\"\n  exit\n /********************************************************************/\nTBopen:\n  arg mode\n                             /* table may not be open, so allow rc 12 */\n  acceptCC = 12\n  \"TBEND &TABLE\"\n  \"TBOPEN &TABLE &MODE LIBRARY(&LIBRARY)\"\n  do while rc \\= 0\n                             /* table won't open, retry               */\n     \"TBEND &TABLE\"\n     \"TBOPEN &TABLE &MODE LIBRARY(&LIBRARY)\"\n                             /* table won't open, so prompt user      */\n     if rc \\= 0 then\n     do\n        \"DISPLAY PANEL(UTPTSHAR)\"\n        if rc = 8 then\n        do\n           call stdMsg \"cannot open\" table\n           signal qquit\n        end\n                             /* try again                             */\n        \"TBOPEN &TABLE &MODE LIBRARY(&LIBRARY)\"\n     end\n  end\n  acceptCC = 8\n  return\n /********************************************************************/\ntbupdate:\n  parse arg tbcmd,parms\n                             /* re-open in WRITE, then update, then   */\n                             /* re-open back to NOWRITE mode          */\n  call tbopen \"WRITE\"\n                             /* For an update that is not a delete,   */\n                             /* is row-level checking enabled?        */\n  CheckOK = true\n  if UpdateCheck & (maincmd \\= \"DELETE\") then\n  do\n                             /* Yes, save current values              */\n        \"VPUT (KCOUNT KEY1 KEY2 &KEY1 &KEY2 \",\n              \"NAMES &NAMES EXTNAMES &EXTNAMES) SHARED\"\n                             /* Get latest row valuve                 */\n     StorLog = Log\n     \"TBGET &TABLE\"\n                             /* Check the log field                   */\n     if StorLog \\= Log then\n     do\n                             /* If it's different, send a message     */\n        CheckOK = false\n        call stdMsg \"Row has changed\" ,\n                 \"before\" StorLog \"after\" log ,\n                 \"you must re-enter your changes\"\n     end\n                             /* Yes, get current values back          */\n     else \"VGET (NAMES &NAMES EXTNAMES &EXTNAMES) SHARED\"\n  end\n                             /* Either checking is not enabled or it  */\n                             /* showed that the row can be updated    */\n  if CheckOK then\n  do\n     parse var log last '01'x lastButOne '01'x lastButTwo\n     dandt   = sysuid date() time()\n     log = dandt || '01'x || last || '01'x lastButOne\n     zerrsm = \"hello mum\"\n     zerrlm = \"hello mum\"\n     \"TB\"tbcmd table parms\n     if tbcmd = \"DELETE\" & rc = 8\n     then call StdMsg value(key1) \"was not found\",\"not found\"\n                             /* sort only if a new row is added       */\n     if sortneeded & (maincmd = \"ADD\" | (tbcmd = \"MOD\" & rc \\= 0))\n     then call TableSort\n                             /* close the table with updates          */\n     \"TBCLOSE &TABLE LIBRARY(&LIBRARY)\"\n  end\n                             /* abandon the update                    */\n  else \"TBEND   &TABLE\"\n                             /* reopen in browse mode                 */\n  call TBopen\n                             /* sort to current order (if necessary)  */\n  return\n /********************************************************************/\n TableSort:\n\n   if sortdir = \"D\"\n   then scancond = \"LE\"\n   else scancond = \"GE\"\n   scankey = sortvar\n\n   \"TBSORT &TABLE FIELDS(\"sortvar\",\"sorttype\",\"sortdir\")\"\n\n   sortneeded = true\n  return\n /********************************************************************/\nError:\n                             /* Generalised error handling            */\n                             /* Return acceptable code to the program */\n  if (rc >= 0 & rc <= AcceptCC)\n  then return\n                             /* Or report the error and terminate     */\n  eline = sourceline(sigl)\n  errCond = condition(\"C\")\n  errDesc = condition(\"D\")\n                             /* get error text if applicable          */\n  if lrc > 0 & lrc < 100\n  then etext = errortext(lrc)\n  else etext = \"\"\n                             /* Check error code                      */\n  if lrc = -3\n  then etext = \"A Host command was not found\"\n  \"DISPLAY PANEL(UTPERR01)\"\n  signal qquit\n/**********************************************************************/\nStdMsg:\n  parse arg zerrlm,zerrsm\n  \"ISPEXEC SETMSG MSG(ISRZ002)\"\n  return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UTPERR01": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 25, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(output) color(red)     caps(off) skip(on)\n)Body expand(}})\n%}-} error handling }-}\n%Command ===>_zcmd\n+\nPlease print this panel and contact your Dialog developer\n\n+ Return code:!rc  +<\n+ Rexx error type:!ErrCond+<Source line number!sigl    + and text:\n+\n+ !eline\n+ Diagnostic text (only applicable if it is a Rexx error):\n+\n+ !etext\n+ Last ISPF error message, if any:\n+\n+ !zerrlm\n+ Any descriptive text supplied by Rexx:\n+\n+ !ErrDesc\n)init\n  .cursor = zcmd\n)proc\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTPTBTMP": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 28, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input) caps(on) color(red)\n\u00a2 type(output) color(blue) caps(off)\n@ type(&attr) color(&color) caps(off)\n# type(&attr) color(&color) caps(on)\n)body expand(}})\n+}-} Extended table view +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n\n+Key 1 Value:\u00a2key1val\n+Key 2 value:\u00a2key2val\n+\n%Cmd  +Name     Type, value and description\n)Model\n!lcmd #name    \u00a2z@value\n               \u00a2desc\n)init\n .zvars = '(scroll locn)'\n)reinit\n)proc\n &zcmd = trunc(&zcmd,' ')\n &opt1 = .trail\n if (&zcmd = L,LO,LOC,LOCA,LOCAT)\n    &zcmd = LOCATE\n &lcmd  = trunc(&lcmd,1)\n if (&lcmd = I,R)\n    &nLines   = .trail\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTPTSHAR": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 17, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(output) color(red)     caps(off) skip(on)\n)Body expand(}})\n%}-} Table error processing }-}\n%Command ===>_zcmd\n+\n+ Table name:&TABLE\n\n+ Error:&ZERRLM\n+\n+\n+ Press%enter+ to retry the operation (recommended)\n+ Press%PF3+to terminate\n)init\n  .cursor = zcmd\n)proc\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTPVL01": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x006\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 54, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input)  caps(on) color(red)\n@ type(output) color(blue)\n)body expand(}})\n+}-} Variables and their descriptions +}-}\n%Command ===>_zcmd                                           %Scroll ===>_z   +\n%Cmd  +Name          Description\n)Model\n!lcmd @name         @desc\n)init\n .zvars = '(scroll)'\n)reinit\n)proc\n &zcmd = trunc(&zcmd,' ')\n &opts = .trail\n &maincmd = &zcmd\n                             /* standard command abbreviations        */\n if (&maincmd = L,LO,LOC,LOCA,LOCAT)\n    &maincmd = LOCATE\n                             /* SORT command                 ...start */\n if (&maincmd = SORT)\n                             /* split sort command options            */\n    &opt1    = trunc(&opts,' ')\n                             /* ascending or descending?              */\n    &sortdir = .trail\n    if (&sortdir \u00ac= D)\n        &sortdir  = A\n                             /* SORT command tailoring       ...start */\n                             /* select variable name from column      */\n                             /* SORTTYPE can be C or N                */\n    &sortvar  = &Z\n    if (&opt1 = N,NA,NAM,NAME)\n       &sortvar  = 'NAME'\n       &sorttype = 'C'\n    if (&opt1 = D,DE,DES,DESCR,DESCRI,DESCRIP,DESCRIPT,DESCRIPTI,\n                DESCRIPTIO,DESCRIPTION)\n       &sortvar  = 'DESC'\n       &sorttype = 'C'\n                             /* SORT command tailoring       ...end   */\n                             /* SORT command                 ...end   */\n &zcmd = ' '\n if (&ztdsels \u00ac= 0000)\n   &linecmd = ' '\n   &lcmd = trunc(&lcmd,' ')\n   &lopt = .trail\n                             /* standard prefix-area abbreviations    */\n   if (&lcmd = E)\n      &lcmd = U\n   if (&lcmd = B)\n      &lcmd = S\n   if (&lcmd = S,U)\n     &linecmd  = &lcmd\n &lcmd = ' '\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTPVL02": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x15\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 21, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "text": ")attr\n! type(input) caps(on) color(red)\n? type(output) color(blue)\n\u00af type(&attr) color(&color) caps(off)\n)body expand(}})\n+}-}  Variable name and its description +}-}\n%Command ===>_zcmd                                                            +\n\n\n+Name             ?name\n+Description      \u00afdesc\n\n)init\n)reinit\n)proc\n if (&zcmd = CAN,CANC,CANCE,CANCEL)\n   &linecmd = &z\n   &zerrlm = 'Update abandoned'\n   .msg  = isrz001\n   .resp = END\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTTNAMES": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00\\x1f\\x01\\x01\\x00\\x1f\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9\\xe9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-01T00:00:00", "modifydate": "2001-01-01T00:00:00", "lines": 6, "newlines": 0, "modlines": 0, "user": "ZZZZZZZ"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT578/FILE578.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT578", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}