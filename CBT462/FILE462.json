{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012115000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE462.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE462.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x12'", "DS1TRBAL": "b'\\x1a\\xd4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03h\\x00\\x0c\\x03i\\x00\\x04\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "The format of the members in this pds is as follows:\n\nAll members are edit macros unless they begin with the character #.\nThese members are panels that should be placed in a panel library.\nThey are tutorial screen.\n\n#SR20000 is an example of modifying the IBM tutorial panel to\ninclude tutorial information on your Installation Edit Macros.\nIt should be named ISR20000.\n\n#EMCH is an example panel that would list the edit macros so a user\nmay view the list and request tutorial information about an individual\nmacro.\n\n$MODS is a member containing a history of the modifications to this\ndataset.\n\nDirect any questions to:\n\nBob Zimmerman\nCNA Insurance\nCNA Plaza - 8cs\nChicago, Illinois 60685\n(312) 822-5719\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$MODS": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS LIST IS IN MODIFICATION ORDER AND INCLUDES A DESCRIPTION OF THE MOD\nTO THE EDIT MACRO\n\nEDIT     LAST\nMACRO    MODIFIED  DESCRIPTION\n-------- --------  -----------\nDEBLANK  8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCONLY    8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMPDS   8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMJCL   8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMEXED  8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMEXEC  8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMCLIST 8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nCOMASM   8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nACFCOMP  8603      MICHAEL BOTOS OF HOUSE INFORMATION SYSTEMS\n                   NEW EDIT MACRO\n\nPASTE    8603      BOB ZIMMERMAN\n                   NEW EDIT MACRO\n\nCUT      8603      BOB ZIMMERMAN\n                   NEW EDIT MACRO\n\nLJUST    8508      HARVEY MILLER OF FIREMANS FUND\n                   NEW EDIT MACRO\n\nRJUST    8508      HARVEY MILLER OF FIREMANS FUND\n                   NEW EDIT MACRO\n\nCENTER   8508      HARVEY MILLER OF FIREMANS FUND\n                   NEW EDIT MACRO\n\nECHANGE  8508      BOB ZIMMERMAN OF CNA INSURANCE\nEXEC               MODIFIED TO DISPLAY PANEL NAME\n                   WHICH CONFORMS TO NAMING CONVENTIONS\n                   # FOLLOWED BY PANEL.\n\nONLY     8507      BOB ZIMMERMAN OF CNA INSURANCE\n                   MODIFIED TO SPECIFY HOW MANY\n                   TIMES A STRING IS FOUND\n\nECHANGE  8507      BOB ZIMMERMAN OF CNA INSURANCE\n                   ADDED NEW EDIT MACRO\n\nCONVISPF 8507      MARK GIBBONS OF AIRBORNE EXPRESS\n                   ADDED NEW EDIT MACRO\n\nCORNER   8507      MARK GIBBONS OF AIRBORNE EXPRESS\n                   ADDED NEW EDIT MACRO\n\nBOX      8507      MARK GIBBONS OF AIRBORNE EXPRESS\n                   ADDED NEW EDIT MACRO\n\nAPPEND   8507      MARK GIBBONS OF AIRBORNE EXPRESS\n                   ADDED NEW EDIT MACRO\n\n#*****   8506      SOME PANEL ERRORS ON #EMCH AND #COMMENT\n                   HAVE BEEN CORRECTED\n\nSHOWDCB  8506      BOB ZIMMERMAN OF CNA INSURANCE\n                   ADDED NEW EDIT MACRO\n\nGENJCL   8506      BOB ZIMMERMAN OF CNA INSURANCE\n                   ADDED NEW EDIT MACRO\n\nTSOTOJCL 8506      BOB ZIMMERMAN OF CNA INSURANCE\n                   ADDED NEW EDIT MACRO\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ACFCOMP": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $ACFCOMP: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter ACFCOMP on the EDIT command line when you have completed editing\n           an ACF2 rule source PDS member.\n!\n$Use:    !This macro will invoke ACF2 and automatically compile and store the\n           rule you were editing. ACF2 displays the complilation process.  The\n           user is returned to the EDIT display panel.\n!\n$Note:   !This macro is for use by H.I.S. ACF2 division security officers,\n           ONLY!!\n\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#APPEND": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  APPEND  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -----------------------------------\n                      |     Edit Macro  \"APPEND\"        |\n                      -----------------------------------\n+\n    This Edit Macro copies the specified member of a PDS at the end of\n    the current member you are currently editing.\n\n%SYNTAX:+   APPEND member\n+\n+           \"member\"  is a required parameter\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#BOX": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  BOX  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"BOX\"        |\n                      --------------------------------\n+\n    This Edit Macro will place \"*\" around text already in the dataset\n    creating a box of \"*\" around the data. The boxes left hand corner\n    will begin where you place the cursor on the screen.\n\n%SYNTAX:+   BOX  width depth\n+\n+           width is the width of the box (defualt is 20)\n+           depth is the depth of the box (defualt is 10)\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CENTER": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  CENTER  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -------------------------------\n                      |     Edit Macro  \"CENTER\"    |\n                      -------------------------------\n+\n    This Edit Macro allows a user to center the data in a dataset\n    between the specified bounds. The only requirement is for the lines\n    you wish centered to be marked by an S line command.\n\n\n%SYNTAX:+   CENTER\n+\n+           There are no other operands for this command.\n+           The lines you want centered must be designated with\n+           an S line command. Use S followed by a number or a block\n+           command version (SS SS).\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#COMASM": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMASM: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter$COMASM!on the EDIT command line and a line destination\n           (either$A!for after or$B!for before).\n!\n         $COMASM!(ID)\n!\n$Use:    !COMASM adds a comment block at the designated place to your ASM type\n           data set. The optional parameter $ID!will include your user id, the\n           date, and the time within the comment block.\n!\n$\n\n!\n!\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMCLIS": {"ttr": 531, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMCLIST: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter$COMCLIST!on the EDIT command line and a line destination\n           (either$A!for after or$B!for before).\n!\n         $COMCLIST!(ID)\n!\n$Use:    !COMCLIST adds a comment block at the designated place to your CLIST\n           type data set. The optional parameter $ID!will include your user id,\n           the date, and the time within the comment block.\n!\n$\n\n!\n!\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMEXEC": {"ttr": 533, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMEXEC: EDIT MACRO HELP  +<---\n+\n$Syntax:!There are no keywords or options with this macro.\n!\n         $COMEXEC\n!\n$Use:   !The$COMEXEC!EDIT macro will place a comment box above each non-excluded\n          occurrence of the word ' EXEC '.\n!\n!\n$Note:  !If you do not want the comment box for a particular EXEC line simply\n          exclude (X line command) that line before issuing the COMEXEC macro.\n!\n        !You can use the macro ONLY EXEC to display your EXEC statements.\n\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMEXED": {"ttr": 535, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMEXED: EDIT MACRO HELP  +<---\n+\n$Syntax:!\n!\n         $COMEXEC!(ID)\n!\n$Use:   !The$COMEXEC!EDIT macro will place a comment box above each non-excluded\n          occurrence of the word ' EXEC '. The ID parameter will place the data\n          set and member name within the FIRST comment box.\n!\n!\n$Note:  !If you do not want the comment box for a particular EXEC line simply\n          exclude (X line command) that line before issuing the COMEXEC macro.\n!\n        !You can use the macro ONLY EXEC to display your EXEC statements.\n\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMJCL": {"ttr": 537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMJCL: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter$COMJCL!on the EDIT command line and a line destination\n           (either$A!for after or$B!for before).\n!\n$Use:    !COMJCL adds a comment block at the designated place to your CNTL type\n           data set. The comment includes your user id, the date and the time.\n!\n$\n\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMMENT": {"ttr": 539, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    COMMENT.                                                       */\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8503                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  COMMENT  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -----------------------------------\n                      |     Edit Macro  \"COMMENT\"       |\n                      -----------------------------------\n+\n    This Edit Macro will allow modify the current edit mask and modify\n    the bounds of the edit profile. The Mask will conform to a comment\n    preface. For COBOL this is an asterisk in column 7, for Assembler\n    an asterisk in column 1 etc...\n\n    The screen in cleared and a Text Flow mode is entered. This allows\n    the user to free-type the comment lines.\n\n%   The user remains in COMMENT mode until the command COMMENT OFF is\n    issued. This will reset his COMMENT bounds and mask back to their\n    original value.\n+\n)PROC\n     &ZUP = #EMCH\n     &ZCONT = #COMMEN2\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#COMMEN2": {"ttr": 541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*   This is the second tutorial screen for the COMMENT edit Macro.  */\n/*   Screen COMMENT# has a ZCONT parameter pointing to this one.     */\n/*********************************************************************/\n/*   Bob Zimmerman                                                   */\n/*   CNA Insurance                                                   */\n/*   Last Modified 8503                                              */\n/*********************************************************************/\n)BODY Expand(@@)\n%Tutorial @-@  COMMENT  @-@ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -----------------------------------\n                      |     Edit Macro  \"COMMENT\"       |\n                      |              SYNTAX             |\n                      -----------------------------------\n+\n   %Syntax:+  COMMENT <type>/OFF\n\n         where type is the type of comment you would like.  This is an\n         optional parameter and defaults to your EDIT Profile. Valid\n         Comment types are CLIST, PANELS, ASM, JCL and COBOL.\n\n         COMMENT OFF will turn off COMMENT mode.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#COMPDS": {"ttr": 543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $COMPDS: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter$COMPDS! on the EDIT command line and a line destination\n           (either$A!for after or$B!for before).\n!\n$Use:    !This macro inserts a comment line at the marked place which\n           automatically incorporates the name of the partitioned data set you\n           are using.\n!\n$Note:   !This macro is for use with CNTL type data sets.  The inserted line is:\n\n           //*   THIS IS pds(member)\n\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#CONLY": {"ttr": 770, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $CONLY: EDIT MACRO HELP  +<---\n+\n$Syntax:!This EDIT macro uses most of the parameters of the ISPF EDIT CHANGE\n          command.\n\n         $CONLY string-1 string-2 (range-1 (range-2)) (CHARS) (col-1 (col-2))\n                                                      (PREFIX)\n                                                      (SUFFIX)\n                                                      (WORD)\n\n!\n$Use:   !CONLY performs the requested change and then displays only those lines\n          which have been changed.\n!\n$Note:  !For case sensative changes, use the character notation$c'aAbB'!in the\n          string-1 parameter.\n!\n        !The CHANGE command keywords ALL, FIRST, LAST, NEXT, NX, PREV, and X$are\n          not supported.\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#CONVISP": {"ttr": 772, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  CONVISPF  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"CONVISPF\"   |\n                      --------------------------------\n+\n    This Edit Macro will convert a panel from old SPF to new ISPF.\n    It merely changes the OPT variable to ZCMD and SEL to ZSEL.\n\n%SYNTAX:+   CONVISPF\n+\n+           There are no operands for this command.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CORNER": {"ttr": 774, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%\\\u00a6)\n)BODY Expand(//)\n%Tutorial /-/  CORNER  /-/ Tutorial\n%SELECTION ===>\u00a6ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"CORNER\"     |\n                      --------------------------------\n\\\n This macro changes certain visible characters to IBM 3800 style format\n characters to print continous box shapes. The conversion is:\n\n         { upper left corner    (left bracket)\n         } upper right corner   (right bracket)\n         \u00a2 lower left corner    (cent sign)\n         ! lower right corner   (exclamation point)\n         < left \"t\"             (less-than sign)\n         > right \"t\"            (greater-than sign)\n         ~ ascending \"t\"        (wavy line - upper case left of 1)\n         ` descending \"t\"       (accent - lower case wavy line)\n         | vertical bar         (vertical bar)\n         _ horizontal bar       (underscore)\n         + cross                (plus sign)\n\n%SYNTAX:\\   CORNER\n\n            There are no operands for this command\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CUT": {"ttr": 776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(\\\\)\n%Tutorial \\-\\  CUT  \\-\\ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"CUT\"        |\n                      --------------------------------\n+\n    This Edit Macro will save the data indicated by the copy/move line\n    commands.\n\n    The CUT data is remembered between edit sessions.\n\n    To view all past cut data, specify LIST as the level. The list that\n    is given supports the \"B\" Browse and \"D\" Delete line commands.\n\n    The data is retrieved by the PASTE Edit Macro.\n\n%SYNTAX:+   CUT  level\n+\n+           level is a 5 byte alpha-nueric identifier.\n            The default level is \"A\".\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CUTD": {"ttr": 778, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n ! TYPE(INPUT) INTENS(HIGH) CAPS(ON)\n \\ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(LEFT)\n)BODY\n%-----------------------  ISPF/PDF CUT MEMBERS  --------------------------------\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +\n+  LEVEL  RECORDS   CREATED    FIRST RECORD\n)MODEL\n!Z\\Z    +  \\RECCNT+\\CREATED + \\RECORD                                          +\n)INIT\n  .HELP = #CUT\n  .ZVARS = '(ZSCML LSEL LEVEL)'\n  &LSEL = &Z\n)PROC\n IF (&ZCMD \u00ac= &Z) .MSG = ISPZ001\n VPUT (ZSCML) PROFILE\n IF (&ZTDSELS \u00ac= 0)\n     VER (&LSEL,LIST,S,D,B MSG= DTSM001)\n &UMSG1 = 'INVALID VALUE'\n &LMSG1 = 'ENTER ''S'' OR ''B'' TO SELECT OR ''D'' TO DELETE THE MEMBER'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DEBLANK": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(input) INTENS(HIGH) COLOR(RED)\n  ! TYPE(TEXT) INTENS(low) COLOR(GREEN)\n  + TYPE(TEXT) INTENS(low) COLOR(blue)\n  $ TYPE(TEXT) INTENS(high) COLOR(white)\n)body\n+                    ---> $DEBLANK: EDIT MACRO HELP  +<---\n+\n$Syntax: !Enter$DEBLANK!on the EDIT command line and a line destination\n           (either$A!for after or$B!for before).\n!\n         $DEBLANK\n!\n$Use:    $DEBLANK!removes any lines from the data set which are completely\n           blank.\n!\n$Caution:!This macro presently does not support excluded lines or labels.\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n+Press$ENTER+to return to Tutorial menu, or$PF3+to return from whence you came.\n)INIT\n)PROC\n  &ZUP = EMHIS000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ECHANGE": {"ttr": 782, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  ECHANGE  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"ECHANGE\"    |\n                      --------------------------------\n+\n    This Edit Macro allows a user to type in an edit change command\n    that normally would not fit on the regular edit command line.\n\n\n%SYNTAX:+   ECHANGE\n+\n+           There are no other operands for this command.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ECHANG2": {"ttr": 784, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY\n%--------------------  EXTENDED CHANGE COMMAND  --------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Specify the CHANGE command below:\n+\n%CHANGE +from string%===>_ECHFROM\n+        to string  %===>_ECHTO\n+        other parms%===>_ECHPARM\n+\n+\n+    (from and to strings should be enclosed in quotes where necessary)\n+\n)INIT\n .CURSOR = ECHFROM\n .HELP = #ECHANGE\n)PROC\n IF (&ZCMD \u00ac= &Z) .MSG = ISPZ001\n VER (&ECHFROM,NB)\n VER (&ECHTO,NB)\n VPUT (ECHFROM ECHTO ECHPARM) PROFILE\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#EMCH": {"ttr": 786, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL ------------------ EDIT PRIMARY COMMANDS -------------------- TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n+\n%                     -----------------------------------\n                      |    Installation Edit Macros     |\n                      -----------------------------------\n+\n The following topics are presented in sequence, or may be selected by\n entering the%EDIT MACRO+name.\n+\n+Edit Macros are:\n+\n+   COMMENT   -    ONLY      -    PROFLIST     -    GENJCL\n+   TSOTOJCL  -    SHOWDCB   -    APPEND       -    BOX\n+   CONVISPF  -    CORNER    -    ECHANGE      -    EXEC\n+   CENTER    -    LJUST     -    CUT          -    PASTE\n+   NEWMSGS   -    ACFCOMP   -    COMASM       -    COMCLIST\n+   COMEXEC   -    COMEXED   -    COMJCL       -    COMPDS\n+   CONLY     -    DEBLANK\n+\n)PROC\n   &ZSEL = TRANS(&ZCMD\n           COMMENT,#COMMENT\n              ONLY,#ONLY\n          PROFLIST,#PROFLIS\n            GENJCL,#GENJCL\n          TSOTOJCL,#TSOTOJC\n           SHOWDCB,#SHOWDCB\n            APPEND,#APPEND\n               BOX,#BOX\n          CONVISPF,#CONVISP\n            CORNER,#CORNER\n           ECHANGE,#ECHANGE\n              EXEC,#EXEC\n            CENTER,#CENTER\n             LJUST,#LJUST\n               CUT,#CUT\n             PASTE,#PASTE\n           NEWMSGS,#NEWMSGS\n           ACFCOMP,#ACFCOMP\n            COMASM,#COMASM\n          COMCLIST,#COMCLIS\n           COMEXEC,#COMEXEC\n           COMEXED,#COMEXED\n            COMJCL,#COMJCL\n            COMPDS,#COMPDS\n             CONLY,#CONLY\n           DEBLANK,#DEBLANK\n                )\n   &ZUP = ISR20000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#EXEC": {"ttr": 788, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  EXEC  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     ---------------------------------\n                      |     Edit Macro  \"EXEC\"        |\n                      ---------------------------------\n+\n    This Edit Macro will execute the member you are currently editing.  The\n    real benefit of this macro is that you do not have to save the changes.\n    It will execute the changes without saving them.\n\n%SYNTAX:+   EXEC SAVE\n+\n+           SAVE is an optional keyword. When requesting the SAVE option,\n+                this edit macro will first save all your changes and then\n+                execute the CLIST.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#EXEC2": {"ttr": 790, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%\\_)\n)BODY\n%-----------------------  EXEC CLIST EDIT MACRO  -------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n\\Specify the parameters below (enclose parameters in quotes if needed):\n%EXEC &FULLDSN +\n%===>_EXECPARM\n+\n)INIT\n .CURSOR = EXECPARM\n .HELP = #EXEC\n)PROC\n IF (&ZCMD \u00ac= &Z) .MSG = ISPZ001\n VPUT (EXECPARM) PROFILE\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#GENJCL": {"ttr": 792, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    GENJCL.                                                        */\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8506                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  GENJCL  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                    ----------------------------------\n                     |     Edit Macro  \"GENJCL\"       |\n                     ----------------------------------\n+\n    This Edit Macro will insert either JCL or a TSO ALLOC statement into\n    your dataset. The code inserted will reflect the current allocation\n    attributes of a given dataset.\n\n+   The syntax is as follows:\n\n%   GENJCL dsname\n    GENJCL dsname  TSO\n+\n    where dsname is a dataset currently allocated.\n    The TSO keyword specifies the ALLOC statement should be used.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#LJUST": {"ttr": 794, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  LJUST  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -------------------------------\n                      |     Edit Macro  \"LJUST\"     |\n                      -------------------------------\n+\n    This Edit Macro allows a user to left justify the data in a\n    dataset against the left bounds. The only requirement is for the\n    lines you wish modified to be marked by an S line command.\n\n\n%SYNTAX:+   LJUST\n+\n+           There are no other operands for this command.\n+           The lines you want modified must be designated with\n+           an S line Command. Use S followed by a number or a block\n+           command version (SS SS).\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#NEWMSGS": {"ttr": 796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  NEWMSGS  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"NEWMSGS\"    |\n                      --------------------------------\n+\n    This macro should be invoked as an IMACRO or intial macro for an empty\n    PDS member. It may be invoked from the command line of PDF Edit but\n    only if the member is empty.\n\n    Its purpose is to initialize the member with the format of an ISPF\n    Dialog Manager Message member. Be sure that the dataset is unnumbered\n    when invoking this command.\n\n    Because it is a dialog program, invoke this command with an exclamation\n    mark.   !NEWMSGS.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ONLY": {"ttr": 798, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    ONLY.\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8503                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  ONLY  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -----------------------------------\n                      |     Edit Macro  \"ONLY\"          |\n                      -----------------------------------\n+\n    This Edit Macro allows a user to issue the FIND command that will\n    Exclude all lines except the string he requests. This is similar to\n    issuing the Primary command Exclude All followed by the Find Command.\n\n%SYNTAX:+   ONLY any valid FIND parameter except ALL\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PASD": {"ttr": 800, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n ! TYPE(INPUT) INTENS(HIGH) CAPS(ON)\n \\ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(LEFT)\n)BODY\n%-----------------------  ISPF/PDF CUT MEMBERS  --------------------------------\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +\n+  LEVEL  RECORDS   CREATED    FIRST RECORD\n)MODEL\n!Z\\Z    +  \\RECCNT+\\CREATED + \\RECORD                                          +\n)INIT\n  .HELP =  #PASTE\n  .ZVARS = '(ZSCML LSEL LEVEL)'\n  &LSEL = &Z\n)PROC\n IF (&ZCMD \u00ac= &Z) .MSG = ISPZ001\n VPUT (ZSCML) PROFILE\n IF (&ZTDSELS \u00ac= 0)\n     VER (&LSEL,LIST,S,B MSG= DTSM001)\n &UMSG1 = 'INVALID VALUE'\n &LMSG1 = 'ENTER ''S'' TO SELECT OR ''B'' TO BROWSE THE MEMBER'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PASTE": {"ttr": 802, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  PASTE  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     --------------------------------\n                      |     Edit Macro  \"PASTE\"      |\n                      --------------------------------\n+\n    This Edit Macro will retrieve data saved by the CUT Edit Macro command.\n    The original data is undisturbed. The placement of the data is determined\n    by the placement of the \"A\" After or \"B\" Before line commands.\n\n    The special level LIST will list all available CUT files to allow\n    \"S\", select or \"B\" Browse line commands.\n\n%SYNTAX:+   PASTE level\n+\n+           level is a 5 byte alpha-numeric identifier.\n+           The default is list all current File Folders.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PROFLIS": {"ttr": 1026, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    PROFLIST.\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8503                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  PROFLIST  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -----------------------------------\n                      |     Edit Macro  \"PROFLIST\"      |\n                      -----------------------------------\n+\n    This Edit Macro will scroll the dataset to the top and insert NOTE\n    lines listing the users current EDIT profiles. In a consulting\n    environment, this macro will allow the users to view another users\n    edit profiles instead of adding bad profiles and possibly \"dropping\"\n    the users good profiles.\n\n%SYNTAX:+   PROFLIST\n+\n+   There are no parameters for this command.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#RJUST": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n)BODY Expand(//)\n%Tutorial /-/  RJUST  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                     -------------------------------\n                      |     Edit Macro  \"RJUST\"     |\n                      -------------------------------\n+\n    This Edit Macro allows a user to right justify the data in a\n    dataset against the right bounds. The only requirement is for the\n    lines you wish modified to be marked by a \u00a2 (cent) sign.\n\n\n%SYNTAX:+   RJUST\n+\n+           There are no other operands for this command.\n+           The lines you want modified must be designated with\n+           the \"\u00a2\" sign. Use \u00a2 followed by a number or a block\n+           command version (\u00a2\u00a2 \u00a2\u00a2).\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SHOWDCB": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    SHOWDCB.                                                       */\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8506                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  SHOWDCB  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                    ----------------------------------\n                     |     Edit Macro  \"SHOWDCB\"      |\n                     ----------------------------------\n+\n    This Edit Macro will write a comment line on the 3rd line of the\n    edit display screen with the current DCB information of the\n    dataset you are in edit on.\n\n+   The syntax is as follows:\n\n%   SHOWDCB\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SR20000": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL -------------------------- EDIT ----------------------------- TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%\n%                     -----------------------------------\n                      |              EDIT               |\n                      -----------------------------------\n+\n  %Edit+allows you to create or change source data.\n\n The following topics are presented in sequence, or may be selected by number:\n  %0+- General introduction             %8+- Tabbing (hardware/software/logical)\n  %1+- Types of data sets               %9+- Automatic Recovery\n  %2+- Edit entry panel                %10+- Edit Profiles\n  %3+- Member selection list           %11+- Edit line commands\n  %4+- Display screen format           %12+- Edit primary commands\n  %5+- Scrolling data                  %13+- Labels and Ranges\n  %6+- Sequence numbering              %14+- Terminating edit\n  %7+- Display Modes (CAPS/HEX/NULLS)  %EM+- Installation Edit Macros\n\n The following topic will be presented only if selected by number:\n %15+- Miscellaneous notes about edit\n)PROC\n   &ZSEL = TRANS(&ZCMD\n                0,ISR2A000\n                1,ISR2B000\n                2,ISR2C000\n                3,ISR2D000\n                4,ISR2E000\n                5,ISR2F000\n                6,ISR2G000\n                7,ISR2H000\n                8,ISR2I000\n                9,ISR2J000\n                10,ISR2K000\n                11,ISR2L000\n                12,ISR2M000\n                13,ISR2Q000\n                14,ISR2N000\n                15,*ISR2O000\n                EM,#EMCH\n                )\n   &ZUP = ISR00003\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#TSOTOJC": {"ttr": 1034, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%+_)\n/*********************************************************************/\n/*    This is a tutorial screen for documenting the edit macro       */\n/*    TSOTOJCL.                                                      */\n/*********************************************************************/\n/*    Bob Zimmerman                                                  */\n/*    CNA Insurance                                                  */\n/*    Last Modified 8506                                             */\n/*********************************************************************/\n)BODY Expand(//)\n%Tutorial /-/  TSOTOJCL  /-/ Tutorial\n%SELECTION ===>_ZCMD                                                           +\n%                   -----------------------------------\n                    |     Edit Macro  \"TSOTOJCL\"      |\n                    -----------------------------------\n+\n      This Edit Macro will insert code into the PROC section of a panel.\n      The purpose of the code is to translate a dataset name entered in TSO\n      syntax to JCL syntax.\n\n%SYNTAX:+   TSOTOJCL var1 var2\n+\n+   \"var1\"  is the variable name (without an ampersand) containing the dsname\n+           in TSO syntax.\n+\n+   \"var2\"  is the variable name (without an ampersand) that will contain the\n+           dsname in JCL syntax.\n+\n)PROC\n     &ZUP = #EMCH\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACFCOMP": {"ttr": 1036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* ISPF EDIT MACRO: ACFCOMP                                           */\n/*                                                                    */\n/* FUNCTION: SAVES THE CURRENT MEMBER THEN ISSUES THE TSO             */\n/*  ACFCOMP COMMAND FOR THE DATA SET/MEMBER BEING EDITTED.            */\n/*                                                                    */\n/*   FOR USE BY ACF2 SECURITY OFFICERS ONLY!!                         */\n/*                                                                    */\n/*                                                                    */\n/*   MICHAEL BOTOS  042685                                            */\n/*                                                                    */\nISREDIT MACRO (APARM)\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n  IF &STR(&APARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#ACFCOMP)\n     EXIT CODE(0)\n    END\n\n  ISREDIT SAVE\n  ISREDIT (MEM) = MEMBER\n  ISREDIT (DS) = DATASET\n\n  CONTROL MSG LIST NOFLUSH\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | ISSUE ACFCOMP COMMAND.                                        | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n  ACFCOMP '&DS.(&MEM.)'\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPEND": {"ttr": 1038, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ISREDIT MACRO (MEMBER)\n\n        IF &STR(&MEMBER) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#APPEND)\n            EXIT\n            END\n\n        IF &STR(&MEMBER) = THEN +\n            DO\n            SET ZEDSMSG = &STR(ENTER MEMBER NAME)\n            SET ZEDLMSG = &STR(YOU MUST SPECIFY THE MEMBER NAME +\n            FOR THE APPEND COMMAND)\n            ISPEXEC SETMSG MSG(ISRZ001)\n            EXIT CODE(12)\n            END\n\nISPEXEC CONTROL ERRORS RETURN\nISREDIT COPY &MEMBER AFTER .ZLAST\nSET LCC  = &LASTCC\nISPEXEC CONTROL ERRORS CANCEL\nIF &LCC NE 0 THEN +\n    DO\n    ISPEXEC SETMSG MSG(&ZERRMSG)\n    EXIT CODE(12)\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BOX": {"ttr": 1040, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ISREDIT MACRO (WIDTH,DEPTH)\n        IF &STR(&WIDTH) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#BOX)\n            EXIT\n            END\n\nISREDIT (ROW,COL) = CURSOR\nISPEXEC CONTROL ERRORS RETURN\nIF &WIDTH = THEN SET &WIDTH = 20\nIF &DEPTH = THEN SET &DEPTH = 10\nSET &DASHS = &STR(****************************************)\nSET &DASHS = &STR(&DASHS&DASHS)\nSET &TOP = &STR(*&SUBSTR(1:&WIDTH-2,&DASHS)*)\nSET &MAX = &DEPTH - 2\nSET &COUNT = 1\nISREDIT LINE &ROW               = LINE + < &COL '&TOP'>\nDO WHILE(&COUNT LE &MAX)\n   ISREDIT LINE &EVAL(&ROW+&COUNT) = +\n     LINE + < &COL '*' &EVAL(&COL+&WIDTH-1) '*'>\n   SET &COUNT = &COUNT + 1\nEND\nISREDIT LINE &EVAL(&ROW+&COUNT) = LINE + < &COL '&TOP'>\nIF &MAXCC > 0 THEN DO\n   SET ZEDSMSG = &STR(INCOMPLETE BOX)\n   SET ZEDLMSG = &STR(NOT ENOUGH ROOM TO DRAW A COMPLETE BOX)\n   ISPEXEC SETMSG MSG(ISRZ000)\nEND\nSET &COL = &COL + 1\nSET &ROW = &ROW + 1\nISREDIT CURSOR = (ROW,COL)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CENTER": {"ttr": 1042, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* CENTER MACRO - COMMAND ===> CE   - LINE COMMANDS S<N> AND SS\n   ISREDIT MACRO (TYPE) NOPROCESS\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#CENTER)\n            EXIT\n            END\n\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE S\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(S) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"S<N>\" OR \"SS\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET L = &LENGTH(&SUBSTR(&LB:&RB,&NRSTR(&LN)))\n      SET S = &LB\n      DO WHILE(&S < &L)\n         IF &SUBSTR(&S:&S,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDS\n         SET S = &S + 1\n      END\nFOUNDS: +\n      SET E = &L\n      DO WHILE(&E > &S)\n         IF &SUBSTR(&E:&E,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDE\n         SET E = &E - 1\n      END\nFOUNDE: +\n      SET LINE = &SUBSTR(&S:&E,&NRSTR(&LN))\n      SET L = &LENGTH(&NRSTR(&LINE))\n      SET D = &BL - &L\n      IF &D > 1 THEN DO\n         SET H = &D / 2\n         SET LINE2 = &SUBSTR(1:&H,&STR(                                -\n                                                                       )\n         IF &LB = 1 THEN +\n            SET LINE = &NRSTR(&LINE2.&LINE)\n         ELSE +\n            SET LINE = &SUBSTR(1:&LB-1,&NRSTR(&LN))&NRSTR(&LINE2.&LINE)\n      END\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNADBROW": {"ttr": 1044, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)\n 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)\n 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)\n 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)\n 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)\n 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)\n)BODY WIDTH(&ZWIDTH) EXPAND(//)\n%&CNATITLE-------------------------------------/-/-----%LINE!ZLINES%COL!ZCOLUMS+\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_Z   +\n|ZDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */\n  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */\n  IF (&ZMEMB \u00ac= ' ')\n    &ZTITLE = '&ZDSN(&ZMEMB)&ZLEVEL '\n  IF (&ZMEMB = ' ')\n    &ZTITLE = '&ZDSN&ZLEVEL '\n  &MIXED = MIX\n  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */\n    &MIXED = EBCDIC\n  IF (&BRTITLE = &Z)\n      &CNATITLE = 'BROWSE - &ZTITLE'\n  IF (&BRTITLE \u00ac= &Z)\n      &CNATITLE = '&BRTITLE -'\n\n)REINIT\n  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)\n  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(ZDATA)\n\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNADEDIT": {"ttr": 1046, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD(20)\n  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 03 TYPE(DATAOUT) SKIP(ON) /* FOR TEXT ENTER CMD. FIELD */\n 04 TYPE(DATAIN)  INTENS(LOW)  CAPS(OFF)\n 05 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 06 TYPE(DATAIN)  INTENS(LOW)  CAPS(IN)\n 07 TYPE(DATAIN)  INTENS(HIGH) CAPS(IN)\n 08 TYPE(DATAIN)  INTENS(LOW)  FORMAT(DBCS)\n 09 TYPE(DATAIN)  INTENS(LOW)  FORMAT(EBCDIC)\n 0A TYPE(DATAIN)  INTENS(LOW)  FORMAT(&MIXED)\n 20 TYPE(DATAIN)  INTENS(LOW) CAPS(IN) FORMAT(&MIXED)\n)BODY WIDTH(&ZWIDTH) EXPAND(//)\n!CNATITLE ----------------------------/-/---------------------%COLUMNS!ZCL!ZCR%%\n%COMMAND ===>_ZCMD                    / /                     %SCROLL ===>_Z   %\n|ZDATA -------------------------------/-/--------------------------------------|\n|                                     / /                                      |\n| ------------------------------------/-/--------------------------------------|\n)INIT\n  .HELP = ISR20000         /* DEFAULT TUTORIAL NAME     */\n  .ZVARS = 'ZSCED'         /* SCROLL AMT VARIABLE NAME  */\n  &MIXED = MIX             /* SET FROMAT MIX            */\n  IF (&ZPDMIX = N)         /* IF EBCDIC MODE REQUESTED  */\n    &MIXED = EBCDIC        /*  SET FORMAT EBCDIC        */\n\n  IF (&EDTITLE = &Z) &CNATITLE = 'EDIT ---&ZTITLE'\n  IF (&EDTITLE \u00ac= &Z) &CNATITLE = '&EDTITLE -'\n)REINIT\n  REFRESH(ZCMD,ZSCED,ZDATA,,ZCL,ZCR)\n  .HELP = ISR20000         /* DEFAULT TUTORIAL NAME     */\n  IF (&CNACUR \u00ac= &Z)\n      .CURSOR = ZCMD\n      .CSRPOS = 1\n      &CNACUR = &Z\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(ZDATA)\n  IF (.RESP = ENTER)\n      IF (&ZCMD = '?')\n          &ZCMD = &CNASEDZC\n          &UMSG1 = 'RECALL COMPLETED'\n          &LMSG1 = 'BY ENTERING A \"?\" YOU HAVE RECALLED YOUR LAST EDIT COMMAND'\n          &CNACUR = ON\n          .MSG = DTSM001W\n      IF (&ZCMD \u00ac= '?',&Z)\n          &CNASEDZC = &ZCMD\n          VPUT (CNASEDZC) PROFILE\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMASM": {"ttr": 1048, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMASM                                                      */\n/*                                                                    */\n/* FUNCTION: ADDS A COMMENT BLOCK FOR AN ASSEMBLER PROGRAM.           */\n/*                                                                    */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/03/85                            */\n/*                                                                    */\n/*                                                                    */\nISREDIT MACRO NOPROCESS (PARM)\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n  ISPEXEC CONTROL ERRORS RETURN\n/*CONTROL LIST CONLIST SYMLIST                                        */\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMASM)\n     EXIT CODE(0)\n    END\n\n  ISREDIT PROCESS DEST\n\n  IF &LASTCC \u00ac= 0 THEN +\n    DO\n      SET ZEDSMSG = &STR(COMMENT COMMAND PENDING)\n      SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n                          THE 'COMJCL' MACRO COMMAND)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (DEST) = LINENUM .ZDEST\n\n\n   SET &LINEA = &STR(***************************************************\n   SET &LINEB = &STR(*\n   IF &STR(&PARM.) = &STR(ID) THEN +\n     DO\n       SET &LINEC = &STR(* ) &STR( BY:&SYSUID.  ON:&SYSSDATE.  AT:&SYSTI\n       SET &LINED = &SUBSTR(1:70,&LINEC.)&STR(*)\n     END\n    ELSE +\n     SET &LINED = &STR(*\n   SET &LINEE = &STR(***************************************************\n\nCOMIT: +\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEA.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 1) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 2) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 3) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 4) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 5) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 6) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 7) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 8) = DATALINE '&LINED.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 9) = DATALINE '&LINEE.'\n      ISREDIT LOCATE &EVAL(&DEST+1)\n      ISREDIT SEEK C'*' NEXT 10\n      ISREDIT (ROW,COL) = CURSOR\n      ISREDIT CURSOR = &EVAL(&ROW+2) &COL\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMCLIST": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMCLIST                                                    */\n/*                                                                    */\n/* FUNCTION: ADDS A COMMENT BLOCK FOR AN ASSEMBLER PROGRAM.           */\n/*                                                                    */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/03/85                            */\n/*                                                                    */\n/*                                                                    */\nISREDIT MACRO NOPROCESS (PARM)\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n  ISPEXEC CONTROL ERRORS RETURN\n/*CONTROL LIST CONLIST SYMLIST                                        */\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMCLIS)\n     EXIT CODE(0)\n    END\n\n  ISREDIT PROCESS DEST\n\n  IF &LASTCC \u00ac= 0 THEN +\n    DO\n      SET ZEDSMSG = &STR(COMMENT COMMAND PENDING)\n      SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n                          THE 'COMJCL' MACRO COMMAND)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (DEST) = LINENUM .ZDEST\n\n\n   SET &LINEA = &STR(/* |-----------------------------------------------\n   SET &LINEB = &STR(/* |\n   IF &STR(&PARM.) = &STR(ID) THEN +\n     DO\n       SET &LINEC = &STR(/* |) &STR( BY:&SYSUID.  ON:&SYSDATE.  AT:&SYST\n       SET &LINED = &SUBSTR(1:68,&LINEC.)&STR(| */)\n     END\n    ELSE +\n     SET &LINED = &STR(/* |\n   SET &LINEE = &STR(/* |-----------------------------------------------\n\nCOMIT: +\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEA.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 1) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 2) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 3) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 4) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 5) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 6) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 7) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 8) = DATALINE '&LINED.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 9) = DATALINE '&LINEE.'\n      ISREDIT LOCATE &EVAL(&DEST+1)\n      ISREDIT SEEK C'-' NEXT 6\n      ISREDIT (ROW,COL) = CURSOR\n      ISREDIT CURSOR = &EVAL(&ROW+2) &COL\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMEXEC": {"ttr": 1283, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMEXEC                                                     */\n/*                                                                    */\n/* FUNCTION: Adds a comment block for a JCL data set in front of each */\n/*  EXEC statement.                                                   */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/24/85                            */\n/*                                                                    */\n/*                                                                    */\n  ISREDIT MACRO (PARM)\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n\n  ISPEXEC CONTROL ERRORS RETURN\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMEXEC)\n     EXIT CODE(0)\n    END\n\n   ISREDIT (ENVIR) = USER_STATE\n   ISREDIT UP MAX\n\n   ISREDIT SEEK C' EXEC ' ALL NX\n   ISREDIT (EXECS) = SEEK_COUNTS\n\n   SET &EXECE = &EVAL(&EXECS)\n\n   SET &LINEC = &STR(//*)\n   SET &LINEB = &STR(//* -------------------------- COMMENT ------------\n   SET &LINED = &STR(//* -----------------------------------------------\n   SET &LINE  = &STR(//* |\n   SET &LINEA = &STR(//* |) &STR( BY:&SYSUID.  ON:&SYSDATE.  AT:&SYSTIME\n   SET &LINEZ = &SUBSTR(1:71,&LINEA.)&STR(|)\n\n   DO WHILE &EXECS > 0\n     ISREDIT SEEK C' EXEC ' NEXT NX\n     ISREDIT (LIN COL) = CURSOR\n     ISREDIT LINE_BEFORE &EVAL(&LIN) = DATALINE '&LINEC.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 1) = DATALINE '&LINEB.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 2) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 3) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 4) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 5) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 6) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 7) = DATALINE '&LINEZ.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 8) = DATALINE '&LINED.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 9) = DATALINE '&LINEC.'\n     SET &EXECS = &EXECS - 1\n     SET &LIN = &LIN + 11\n     ISREDIT CURSOR = &LIN 1\n   END\n\n   ISREDIT USER_STATE = (ENVIR)\n\n   SET ZEDSMSG = &STR(&EXECE COMMENTS ADDED)\n   SET ZEDLMSG = &STR(&EXECE COMMENT BLOCKS HAVE BEEN ADDED)\n   ISPEXEC SETMSG MSG(ISRZ001)\n\nEXIT CODE(1)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMEXED": {"ttr": 1285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMEXECD                                                    */\n/*                                                                    */\n/* FUNCTION: Adds a comment block for a JCL data set in front of each */\n/*  EXEC statement.  Places the data set name in the first comment    */\n/*  block.                                                            */\n/*                                                                    */\n/*                                                                    */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/24/85                            */\n/*                                                                    */\n/*                                                                    */\n  ISREDIT MACRO (PARM)\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n\n  ISPEXEC CONTROL ERRORS RETURN\n/*CONTROL LIST SYMLIST CONLIST                                        */\n\n  IF &STR(&PARM.) = &STR(help) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMEXED)\n     EXIT CODE(0)\n    END\n\n  ISREDIT (ENVIR) = USER_STATE\n  ISREDIT (MEM) = MEMBER\n  ISREDIT (DS) = DATASET\n  ISREDIT UP MAX\n\n  ISREDIT SEEK C' EXEC ' ALL NX\n  ISREDIT (EXECS) = SEEK_COUNTS\n\n   SET &EXECE = &EVAL(&EXECS)\n\n   SET &LINEE = &STR(//* | ) &STR(THIS IS &DS.(&MEM.)) &STR(\n   SET &LINEF = &STR(&SUBSTR(1:71,&LINEE.))&STR(|)\n   SET &LINEC = &STR(//*)\n   SET &LINEB = &STR(//* -----------------------------------------------\n   SET &LINED = &STR(//* -----------------------------------------------\n   SET &LINE  = &STR(//* |\n   SET &LINEA = &STR(//* |) &STR( BY:&SYSUID.  ON:&SYSDATE.  AT:&SYSTIME\n   SET &LINEZ = &SUBSTR(1:71,&LINEA.)&STR(|)\n\n   DO WHILE &EXECS > 0\n     ISREDIT SEEK C' EXEC ' NEXT NX\n     ISREDIT (LIN COL) = CURSOR\n     ISREDIT LINE_BEFORE &EVAL(&LIN) = DATALINE '&LINEC.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 1) = DATALINE '&LINEB.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 2) = DATALINE '&LINEF.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 3) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 4) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 5) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 6) = DATALINE '&LINE.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 7) = DATALINE '&LINEZ.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 8) = DATALINE '&LINED.'\n     ISREDIT LINE_BEFORE &EVAL(&LIN + 9) = DATALINE '&LINEC.'\n     SET &LINEF = &STR(&LINE.)\n     SET &EXECS = &EXECS - 1\n     SET &LIN = &LIN + 11\n     ISREDIT CURSOR = &LIN 1\n   END\n\n   ISREDIT USER_STATE = (ENVIR)\n   ISREDIT UP MAX\n   ISREDIT SEEK EXEC FIRST NX\n   ISREDIT (LIN2,COL2) = CURSOR\n   ISREDIT LOCATE &EVAL(&LIN2-9)\n   ISREDIT CURSOR = &EVAL(&LIN2-6) 8\n\n\n   SET ZEDSMSG = &STR(&EXECE COMMENTS ADDED)\n   SET ZEDLMSG = &STR(&EXECE COMMENT BLOCKS HAVE BEEN ADDED)\n   ISPEXEC SETMSG MSG(ISRZ001)\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMJCL": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMJCL                                                      */\n/*                                                                    */\n/* FUNCTION: ADDS A COMMENT BLOCK FOR A JCL DATA SET.                 */\n/*                                                                    */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/03/85                            */\n/*                                                                    */\n/*                                                                    */\nISREDIT MACRO NOPROCESS (PARM)\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n  ISPEXEC CONTROL ERRORS RETURN\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMJCL)\n     EXIT CODE(0)\n    END\n\n  ISREDIT PROCESS DEST\n\n  IF &LASTCC \u00ac= 0 THEN +\n    DO\n      SET ZEDSMSG = &STR(COMMENT COMMAND PENDING)\n      SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n                          THE 'COMJCL' MACRO COMMAND)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (DEST) = LINENUM .ZDEST\n\n\n   SET &LINEC = &STR(//*)\n   SET &LINEB = &STR(//* -------------------------- COMMENT ------------\n   SET &LINE  = &STR(//* |\n   SET &LINEA = &STR(//* |) &STR( BY:&SYSUID.  ON:&SYSDATE.  AT:&SYSTIME\n   SET &LINEZ = &SUBSTR(1:71,&LINEA.)&STR(|)\n\nCOMIT: +\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEC.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 1) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 2) = DATALINE '&LINE.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 3) = DATALINE '&LINE.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 4) = DATALINE '&LINE.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 5) = DATALINE '&LINE.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 6) = DATALINE '&LINEZ.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 7) = DATALINE '&LINE.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 8) = DATALINE '&LINEB.'\n      ISREDIT LINE_AFTER &EVAL(&DEST + 9) = DATALINE '&LINEC.'\n      ISREDIT LOCATE &EVAL(&DEST+1)\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMENT": {"ttr": 1290, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (TYPE) NOPROCESS\n\n/*********************************************************************/\n/*   BOB ZIMMERMAN                                                   */\n/*   CNA INSURANCE                                                   */\n/*   (312) 822-5719                                                  */\n/*   LAST MODIFIED 8503                                              */\n/*********************************************************************/\n/*       SETUP COMMENT ENVIRONMENT -\n/*           * THIS INCLUDES SETTING BOUNDS IN BY 5 COLS ON EACH SIDE\n/*           * WRITING A LINES OF A BOX FOR THE APPROPRIATE TYPE\n/*           * ENTERING TF LINE MODE FOR THE USER\n/*********************************************************************/\n\n         ISPEXEC CONTROL ERRORS CANCEL\n\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#COMMENT)\n            EXIT\n            END\n\nSETOFF:  IF &STR(&TYPE) = OFF THEN +\n             DO\n             ISREDIT (LEFT,RIGHT) = BOUNDS\n             SET &LEFT = &LEFT - 5\n             SET &RIGHT = &RIGHT +5\n\n             IF &LEFT < 0 OR &RIGHT < 0 THEN +\n                 DO\n                 SET ZEDSMSG = &STR(CURRENT BOUNDS INVALID)\n                 SET ZEDLMSG = &STR(UNABLE TO RESET BOUNDS FROM +\n                 CURRENT VALUE)\n                 ISPEXEC SETMSG MSG(ISRZ001)\n                 EXIT CODE(12)\n                 END\n             ISREDIT BOUNDS &LEFT &RIGHT\n             ISREDIT MASKLINE = ' '\n             EXIT CODE(0)\n             END\n\n         ELSE +\n             DO\n             ISREDIT (LEFT,RIGHT) = BOUNDS\n             SET &LEFT = &LEFT + 5\n             SET &RIGHT = &RIGHT -5\n             END\n\n         ISREDIT PROCESS DEST\n         IF &LASTCC \u00ac= 0 THEN +\n             DO\n             SET ZEDSMSG = &STR(COMMENT COMMAND PENDING)\n             SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n             THE 'COMMENT' PRIMARY COMMAND)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         IF &STR(&TYPE) = THEN +\n             DO\n             ISREDIT (TYPE) = PROFILE\n             END\n\n         IF &STR(&TYPE) = PANEL THEN SET TYPE = CLIST\n         IF &STR(&TYPE) = PLIB THEN SET TYPE = CLIST\n         IF &STR(&TYPE) = ISPPLIB THEN SET TYPE = CLIST\n         IF &STR(&TYPE) = ASMB THEN SET TYPE = ASM\n         IF &STR(&TYPE) = BAL THEN SET TYPE = ASM\n         IF &STR(&TYPE) = CNTL THEN SET TYPE = JCL\n\n         IF &STR(&TYPE) = CLIST THEN +\n             DO\n             IF &RIGHT > 69 THEN SET RIGHT = 69\n             ISREDIT MASKLINE = <1 '/*' 70 '*/'>\n             SET &LINE =        &STR(/*****************************-\n****************************************/         )\n             GOTO FLOWIT\n             END\n\n         IF &STR(&TYPE) = ASM THEN +\n             DO\n             IF &RIGHT > 70 THEN SET RIGHT = 70\n             ISREDIT MASKLINE = <1 '*' 71 '*'>\n             SET &LINE =        &STR(******************************-\n*****************************************         )\n             GOTO FLOWIT\n             END\n\n         IF &STR(&TYPE) = COBOL THEN +\n             DO\n             IF &RIGHT > 70 THEN SET RIGHT = 70\n             ISREDIT MASKLINE = <7 '*' 71 '*'>\n             SET &LINE =        &STR(      ************************-\n*****************************************         )\n             GOTO FLOWIT\n             END\n\n         IF &STR(&TYPE) = JCL THEN +\n             DO\n             IF &RIGHT > 70 THEN SET RIGHT = 70\n             ISREDIT MASKLINE = <1 '//*' 71 '*'>\n             SET &LINE =        &STR(//* * * * * * * * * * * * * * -\n* * * * * * * * * * * * * * * * * * * * *         )\n             GOTO FLOWIT\n             END\n\n         SET ZEDSMSG = &STR(INVALID COMMENT TYPE)\n         SET ZEDLMSG = &STR(VALID TYPES ARE CLIST, PANEL, +\n         COBOL, JCL AND ASM)\n         ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n\nFLOWIT:  +\n         ISREDIT (DEST) = LINENUM .ZDEST\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         ISREDIT TENTER &EVAL(&DEST + 1)\n         ISREDIT BOUNDS &LEFT &RIGHT\n         ISREDIT LOCATE &DEST\n\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPDS": {"ttr": 1293, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: COMPDS                                                      */\n/*                                                                    */\n/* FUNCTION: ADDS A COMMENT IN JCL ABOUT PDS NAME AND MEMBER.         */\n/*                                                                    */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/08/85  FOR MS.                   */\n/*                                                                    */\n/*                                                                    */\nISREDIT MACRO NOPROCESS (PARM)\n\n/*                                                                   */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/*                                                                   */\n\n  ISPEXEC CONTROL ERRORS RETURN\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#COMPDS)\n     EXIT CODE(0)\n    END\n\n  ISREDIT PROCESS DEST\n\n  IF &LASTCC \u00ac= 0 THEN +\n    DO\n      SET ZEDSMSG = &STR(COMMENT COMMAND PENDING)\n      SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n                          THE 'COMJCL' MACRO COMMAND)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (DEST) = LINENUM .ZDEST\n  ISREDIT (MEM) = MEMBER\n  ISREDIT (DS) = DATASET\n\n\n   SET &LINEA = &STR(//*   )\n   SET &LINEC = &STR(//*   ) &STR(  THIS IS &DS.(&MEM.))\n\nCOMIT: +\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEA.'\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEC.'\n      ISREDIT LINE_AFTER &DEST = DATALINE '&LINEA.'\n      ISREDIT LOCATE &DEST\n\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONLY": {"ttr": 1295, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: CONLY                                                       */\n/*                                                                    */\n/* FUNCTION: Displays only those lines with changes in them.          */\n/*  Accepts most CHANGE command parameters.\n/*                                                                    */\n/*                                                                    */\n/*  Written by MICHAEL BOTOS  --  05/29/85                            */\n/*                                                                    */\n/*   UPDATE to add NOCAPS for TSO/E: 12/04/85 - MZB                   */\n/*                                                                    */\n/*                                                                    */\n  ISREDIT MACRO (STR1 STR2 RANG1 RANG2 KEY1 COL1 COL2 KEYZ)\n  CONTROL NOCAPS\n  ISPEXEC CONTROL ERRORS RETURN\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  IF &STR(&STR1.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#CONLY)\n     EXIT CODE(0)\n    END\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Test for too many parameters                                  | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  IF X&KEYZ. NE &STR(X) THEN +\n    DO\n       SET ZEDSMSG = &STR(Too many KEYWORDS)\n       SET ZEDLMSG = &STR(Enter CONLY HELP FOR SYNTAX and supported KEY)\n       ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n    END\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Testing for unsupported keywords: ALL, FIRST, LAST, NEXT, NX, | */\n/* |  PREV, and X.                                                 | */\n/* |                                                               | */\n/* | NOTE: Shift back to CAPS for this processing only.            | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n\n  CONTROL CAPS\n  IF X&RANG1. = &STR(XALL) OR X&RANG2. = &STR(XALL) +\n    OR X&KEY1. = &STR(XALL) OR X&COL1. = &STR(XALL) +\n    OR X&COL2. = &STR(XALL) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XFIRST) OR X&RANG2. = &STR(XFIRST) +\n    OR X&KEY1. = &STR(XFIRST) OR X&COL1. = &STR(XFIRST) +\n    OR X&COL2. = &STR(XFIRST) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XLAST) OR X&RANG2. = &STR(XLAST) +\n    OR X&KEY1. = &STR(XLAST) OR X&COL1. = &STR(XLAST) +\n    OR X&COL2. = &STR(XLAST) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XNEXT) OR X&RANG2. = &STR(XNEXT) +\n    OR X&KEY1. = &STR(XNEXT) OR X&COL1. = &STR(XNEXT) +\n    OR X&COL2. = &STR(XNEXT) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XNX) OR X&RANG2. = &STR(XNX) +\n    OR X&KEY1. = &STR(XNX) OR X&COL1. = &STR(XNX) +\n    OR X&COL2. = &STR(XNX) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XPREV) OR X&RANG2. = &STR(XPREV) +\n    OR X&KEY1. = &STR(XPREV) OR X&COL1. = &STR(XPREV) +\n    OR X&COL2. = &STR(XPREV) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XX) OR X&RANG2. = &STR(XX) +\n    OR X&KEY1. = &STR(XX) OR X&COL1. = &STR(XX) +\n    OR X&COL2. = &STR(XX) THEN GOTO BADKEY\n  CONTROL NOCAPS\n\n\n  ISREDIT EXCLUDE ALL\n  ISREDIT CHANGE &STR1. &STR2. &RANG1. &RANG2. &KEY1. &COL1. &COL2. ALL\n\n  EXIT CODE(0)\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Set message for unsupported keywords.                         | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  BADKEY: +\n    DO\n       SET ZEDSMSG = &STR(Invalid KEYWORD)\n       SET ZEDLMSG = &STR(Enter CONLY ? to list SYNTAX and supported KEY\n       ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n    END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CONVISPF": {"ttr": 1298, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ISREDIT MACRO (TYPE)\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#CONVISP)\n            EXIT\n            END\n\n  ISREDIT CHANGE \"_OPT\" \"_ZCMD\" ALL\n  ISREDIT CHANGE \"&&&&OPT\" \"&&&&ZCMD\" ALL\n  ISREDIT CHANGE \"&&&&SEL\" \"&&&&ZSEL\" ALL\n  ISPEXEC CONTROL DISPLAY REFRESH\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CORNER": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ISREDIT MACRO (TYPE)\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#CORNER)\n            EXIT\n            END\n\nISREDIT CHANGE ALL { X'AC'    /* UPPER LEFT CORNER  */\nISREDIT CHANGE ALL } X'BC'    /* UPPER RIGHT CORNER */\nISREDIT CHANGE ALL \u00a2 X'AB'    /* LOWER LEFT CORNER  */\nISREDIT CHANGE ALL ! X'BB'    /* LOWER RIGHT CORNER */\nISREDIT CHANGE ALL < X'EB'    /* LEFT \"T\"           */\nISREDIT CHANGE ALL > X'EC'    /* RIGHT \"T\"          */\nISREDIT CHANGE ALL ~ X'CC'    /* ASCENDING \"T\"      */\nISREDIT CHANGE ALL ` X'CB'    /* DESCENDING \"T\"     */\nISREDIT CHANGE ALL | X'FA'    /* VERTICAL BAR       */\nISREDIT CHANGE ALL _ X'BF'    /* HORIZONTAL BAR     */\nISREDIT CHANGE ALL + X'8F'    /* CROSS              */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUT": {"ttr": 1539, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          ISREDIT MACRO (LEVEL REST) NOPROCESS\n/******************************************************************\n/*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n/*     AND SET CONTROL ACCORDINGLY                                *\n/******************************************************************\n         CONTROL MSG FLUSH PROMPT\n         ISPEXEC  CONTROL  ERRORS CANCEL\n         ISPEXEC VGET (SPFDBUG) PROFILE\n         IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n         IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n/******************************************************************\n/*               MAIN CLIST LOGIC                                 *\n/******************************************************************\n\n          IF &NRSTR(&REST) \u00ac= THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(INVALID OPERAND)\n             SET ZEDLMSG = &NRSTR(ONLY A FILE NAME OF 5 BYTES OR +\n             LESS IS VALID)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          IF &NRSTR(&LEVEL) = THEN +\n             DO\n             SET LEVEL = A\n             END\n\n          IF &NRSTR(&LEVEL) = HELP THEN +\n             DO\n             ISPEXEC CONTROL DISPLAY SAVE\n             ISPEXEC SELECT PGM(ISPTUTOR) PARM(#CUT)\n             ISPEXEC CONTROL DISPLAY RESTORE\n             EXIT CODE(0)\n             END\n\n          IF &NRSTR(&LEVEL) = LIST THEN +\n             DO\n             GOTO CUTLIST\n             END\n\n          IF &LENGTH(&NRSTR(&LEVEL)) > 5 THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(INVALID LEVEL)\n             SET ZEDLMSG = &NRSTR(ONLY A FILE NAME OF 5 BYTES OR +\n             LESS IS VALID)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          IF &DATATYPE(&NRSTR(&LEVEL)) = NUM THEN +\n              SET LEVEL = &LEVEL\n\n          CONTROL NOFLUSH NOMSG\n          ISREDIT PROCESS RANGE C M\n          SET LCC = &LASTCC\n          CONTROL FLUSH MSG\n          ISREDIT (CMD) = RANGE_CMD\n          IF &LCC > 0 THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(RANGE NOT SPECIFIED)\n             SET ZEDLMSG = &NRSTR(USING \"M\" OR \"C\" LINE COMMANDS +\n             YOU MUST SPECIFY THE LINES TO CUT)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          ISREDIT (FLINE) = LINENUM .ZFRANGE\n          ISREDIT (LLINE) = LINENUM .ZLRANGE\n\n          SET TABLE = &NRSTR(CUT&LEVEL)\n\n          ISPEXEC TBCREATE &TABLE NAMES(RECORD) WRITE REPLACE +\n                  LIBRARY(ISPPROF)\n          SET LCC = &LASTCC\n\n          SET CNT = 0\n          DO WHILE &FLINE \u00ac> &LLINE\n\n             ISREDIT (RECORD) = LINE &FLINE\n             ISPEXEC TBADD &TABLE\n             SET CNT = &CNT + 1\n             IF &CMD = M THEN DO\n                 ISREDIT DELETE &FLINE &FLINE\n                 SET LLINE = &LLINE - 1\n                 END\n             ELSE +\n                 SET FLINE = &FLINE + 1\n\n             END\n\n          ISPEXEC TBCLOSE &TABLE PAD(10) LIBRARY(ISPPROF)\n          SET ZEDSMSG = &NRSTR(&CNT LINES CUT)\n          SET ZEDLMSG = &NRSTR(&CNT LINES CUT AND SAVED INTO FILE +\n          &LEVEL)\n          ISPEXEC SETMSG MSG(ISRZ000)\n          EXIT CODE(1)\nCUTLIST:  +\n          ISPEXEC TBCREATE CUTLIST NAMES(LEVEL RECCNT CREATED +\n                  RECORD) NOWRITE\n\n          ISPEXEC TBVCLEAR CUTLIST\n          ISPEXEC LMINIT DATAID(ID) DDNAME(ISPPROF)\n          ISPEXEC LMOPEN DATAID(&ID)\n          ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n          IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM         )\n          ELSE SET PREF = ZZZ\n          SET LEVEL = &SUBSTR(4:8,&MEM        )\n\n          DO WHILE &PREF < CUT\n              ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n              IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM         )\n              ELSE SET PREF = ZZZ\n              SET LEVEL = &SUBSTR(4:8,&MEM        )\n              END\n\n          DO WHILE &PREF = CUT\n             ISPEXEC TBSTATS &MEM      +\n                     CDATE(CREATED)    +\n                     ROWCURR(RECCNT)   +\n                     LIBRARY(ISPPROF)\n             SET RECCNT = &RECCNT\n             ISPEXEC TBOPEN &MEM LIBRARY(ISPPROF) NOWRITE\n             ISPEXEC TBSKIP &MEM\n             ISPEXEC TBEND  &MEM\n             ISPEXEC TBADD CUTLIST\n\n             ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n             IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM     )\n             ELSE SET PREF = ZZZ\n             SET LEVEL = &SUBSTR(4:8,&MEM        )\n             END\n\n          ISPEXEC LMMLIST DATAID(&ID) OPTION(FREE)\n          ISPEXEC LMCLOSE DATAID(&ID)\n          ISPEXEC LMFREE DATAID(&ID)\n\n          ISPEXEC TBTOP CUTLIST\n          SET PANEL = #CUTD\nCUTLOOP:  +\n          ISPEXEC TBTOP CUTLIST\n          ISPEXEC TBSKIP CUTLIST NUMBER(&ZTDTOP)\n          ISPEXEC TBDISPL CUTLIST PANEL(&PANEL)\n          SET PCC = &LASTCC\n          SET PANEL = #CUTD\n          IF &PCC > 4 THEN DO\n             ISPEXEC TBEND CUTLIST\n             EXIT CODE(1)\n             END\nIF &LSEL  = S  OR &LSEL = B THEN DO\n          ISPEXEC CONTROL DISPLAY SAVE\n          SET BRTITLE = &STR(FILE FOLDER \"&LEVEL\")\n          ALLOC F(CUTTEXT) REUSE NEW UNIT(SYSDA) +\n                LRECL(80) BLKSIZE(6160) RECFM(F B) +\n                DSORG(PS) SP(5 5) TR\n          ISPEXEC LMINIT DATAID(ID) DDNAME(CUTTEXT)\n          ISPEXEC LMOPEN DATAID(&ID) OPTION(OUTPUT)\n          SET TABLE = &STR(CUT&LEVEL)\n          ISPEXEC TBOPEN &TABLE NOWRITE LIBRARY(ISPPROF)\n          ISPEXEC TBTOP &TABLE\n          DO WHILE &RECCNT > 0\n              ISPEXEC TBSKIP &TABLE\n              ISPEXEC LMPUT DATAID(&ID) MODE(INVAR) +\n                  DATALOC(RECORD) DATALEN(80)\n              SET RECCNT = &RECCNT - 1\n              END\n              ISPEXEC TBEND &TABLE\n              ISPEXEC LMCLOSE DATAID(&ID)\n              ISPEXEC BROWSE DATAID(&ID) PANEL(CNADBROW)\n              ISPEXEC LMFREE DATAID(&ID)\n              FREE F(CUTTEXT)\n              IF &PCC = 4 THEN SET PANEL =\n              ISPEXEC CONTROL DISPLAY RESTORE\n              GOTO CUTLOOP\n          END\nIF &LSEL  = D THEN DO\n          ISPEXEC CONTROL DISPLAY SAVE\n          ISPEXEC TBERASE CUT&LEVEL LIBRARY(ISPPROF)\n          ISPEXEC TBDELETE CUTLIST\n          IF &PCC = 4 THEN SET PANEL =\n          ISPEXEC CONTROL DISPLAY RESTORE\n          GOTO CUTLOOP\n          END\n          IF &PCC = 4 THEN SET PANEL =\n          GOTO CUTLOOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEBLANK": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* MACRO: deblank                                                     */\n/*                                                                    */\n/* FUNCTION: Removes completely blank lines from a data set.          */\n/*                                                                    */\n/*  WRITTEN BY MICHAEL BOTOS  --  07/24/85                            */\n/*                                                                    */\n/*                                                                    */\n  ISREDIT MACRO (PARM)\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n\n/*CONTROL LIST CONLIST SYMLIST                                        */\n  ISPEXEC CONTROL ERRORS RETURN\n\n  IF &STR(&PARM.) = &STR(HELP) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#DEBLANK)\n     EXIT CODE(0)\n    END\n\n   ISREDIT EXCLUDE ALL\n   ISREDIT (STRI,EXCNT) = EXCLUDE_COUNTS\n/* WRITE THE END IS &EXCNT                                            */\n   ISREDIT (ENVIR) = USER_STATE\n   ISREDIT (RECLEN) = LRECL\n   ISREDIT RESET\n   ISREDIT EXCLUDE ALL\n   ISREDIT FIND P'\u00ac' 1 &EVAL(&RECLEN.) ALL\n   ISREDIT DELETE ALL X\n   ISREDIT RESET\n   ISREDIT EXCLUDE ALL\n   ISREDIT (STRI2,EXCNT2) = EXCLUDE_COUNTS\n/* WRITE THE END IS now &EXCNT                                        */\n   SET &BLANKS = &EVAL(&EXCNT - &EXCNT2)\n/* WRITE THIS IS BLANKS =  &BLANKS                                    */\n/*                                                                    */\n\n   ISREDIT RESET\n   ISREDIT USER_STATE = (ENVIR)\n\n   SET ZEDSMSG = &STR(&BLANKS lines removed)\n   SET ZEDLMSG = &STR(&BLANKS totally blank lines have been removed.)\n   ISPEXEC SETMSG MSG(ISRZ001)\n\nEXIT CODE(1)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ECHANGE": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (TYPE)\n/******************************************************************\n/*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n/*     AND SET CONTROL ACCORDINGLY                                *\n/******************************************************************\n         CONTROL MSG FLUSH NOPROMPT\n         ISPEXEC  CONTROL  ERRORS CANCEL\n         ISPEXEC VGET (SPFDBUG) PROFILE\n         IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n         IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n         ELSE CONTROL NOLIST NOMSG NOSYMLIST NOCONLIST\n/******************************************************************\n/*               MAIN CLIST LOGIC                                 *\n/******************************************************************\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#ECHANGE)\n            EXIT\n            END\n\nLOOP:    ISPEXEC DISPLAY PANEL(#ECHANG2)\n         IF &LASTCC \u00ac= 0 THEN EXIT\n\n         ISPEXEC CONTROL ERRORS RETURN\n         ISREDIT CHANGE &ECHFROM &ECHTO &ECHPARM\n         SET LCC = &LASTCC\n         IF &LCC \u00ac= 0 THEN ISPEXEC SETMSG MSG(&ZERRMSG)\n         ISPEXEC CONTROL ERRORS CANCEL\n         IF &LCC = 4 THEN DO\n             SET ZEDSMSG = &STR(STRING NOT FOUND)\n             SET ZEDLMSG = &STR(THE SPECIFIED STRING WAS NOT FOUND)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             END\n         IF &LCC = 8 THEN DO\n             SET ZEDSMSG = &STR(ERR - TRUNCATION OCCURRED)\n             SET ZEDLMSG = &STR(THE SPECIFIED STRING WAS TRUNCATED)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             END\n         IF &LCC = 4 THEN GOTO LOOP\n         IF &LCC > 8 THEN GOTO LOOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXEC": {"ttr": 1547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (TYPE)\n/******************************************************************\n/*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n/*     AND SET CONTROL ACCORDINGLY                                *\n/******************************************************************\n         CONTROL MSG FLUSH NOPROMPT\n         ISPEXEC  CONTROL  ERRORS CANCEL\n         ISPEXEC VGET (SPFDBUG) PROFILE\n         IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n         IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n         ELSE CONTROL NOLIST NOMSG NOSYMLIST NOCONLIST\n/******************************************************************\n/*               MAIN CLIST LOGIC                                 *\n/******************************************************************\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#EXEC)\n            EXIT\n            END\n\n         IF &STR(&TYPE) = SAVE THEN ISREDIT SAVE\n         IF &STR(&TYPE) = SAVE THEN SET TYPE =\n\n         IF &STR(&TYPE) \u00ac= THEN DO\n             SET ZEDSMSG = &STR(INVALID PARAMETER)\n             SET ZEDLMSG = &STR(THE ONLY ALLOWABLE PARAMETER +\n             FOR THIS COMMAND IS SAVE)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         ISREDIT (FIRST,LAST) = DISPLAY_LINES\n\n         ISREDIT (STATUS) = DATA_CHANGED\n         IF &STATUS = NO THEN DO\n             ISREDIT (EXDSN) = DATASET\n             ISREDIT (EXMEM) = MEMBER\n             IF &EXMEM = THEN SET EXDSN = &STR('&EXDSN.')\n             ELSE SET EXDSN = &STR('&EXDSN.(&EXMEM.)')\n             GOTO PROCESS\n             END\n\n         ISPEXEC SELECT PGM(GET0TABL) PARM(TABL)\n         ISPEXEC VGET (TABL) SHARED\n\n         SET EXDSN = &STR(&TABL..CLIST)\n         ALLOC DA(&EXDSN) FILE(&TABL) NEW +\n             SPACE(45 45) TRACK RELEASE   +\n             LRECL(255) BLKSIZE(6233) RECFM(V B) DSORG(PS)\n\n         ISPEXEC LMINIT DATAID(CLIST) DDNAME(&TABL) ENQ(EXCLU)\n         IF &LASTCC = 8 THEN DO\n             ISPEXEC SETMSG MSG(&ZERRMSG)\n             EXIT CODE(12)\n             END\n\n         ISPEXEC LMOPEN DATAID(&CLIST) OPTION(OUTPUT)\n         IF &LASTCC \u00ac= 0 THEN DO\n             ISPEXEC SETMSG MSG(&ZERRMSG)\n             EXIT CODE(12)\n             END\n\n         SET LINE = 1\n         ISREDIT (RECFM) = RECFM\n         ISREDIT (LASTL) = LINENUM .ZLAST\n\nLOOP:    +\n         IF &LASTL < &LINE THEN GOTO ENDLOOP\n         ISREDIT (RECORD) = LINE &LINE\n         IF &LASTCC \u00ac= 0 THEN DO\n             ISPEXEC SETMSG MSG(&ZERRMSG)\n             EXIT CODE(12)\n             END\n\n         SET LEN = &LENGTH(&NRSTR(&RECORD))\n         ISPEXEC LMPUT DATAID(&CLIST) +\n            MODE(INVAR) DATALOC(RECORD) DATALEN(&LEN)\n\n         SET LINE = &LINE + 1\n         GOTO LOOP\n\nENDLOOP: +\n         ISPEXEC LMCLOSE DATAID(&CLIST)\n\nPROCESS: +\n         ISREDIT (FULLDSN) = DATASET\n         ISREDIT (FULLMEM) = MEMBER\n         IF &FULLMEM = THEN SET FULLDSN = &STR('&FULLDSN.')\n         ELSE SET FULLDSN = &STR('&FULLDSN.(&FULLMEM.)')\n\n         ISPEXEC DISPLAY PANEL(#EXEC2)\n         IF &LASTCC \u00ac= 0 THEN DO\n             IF &STATUS = YES THEN DO\n                 ISPEXEC LMFREE DATAID(&CLIST)\n                 FREE F(&TABL) DELETE\n                 END\n             EXIT CODE(0)\n             END\n\n         ISPEXEC CONTROL ERRORS RETURN\n         ISPEXEC SELECT CMD(EX &EXDSN &EXECPARM)\n         SET LCC = &LASTCC\n         ISPEXEC CONTROL ERRORS CANCEL\n         IF &STATUS = YES THEN DO\n             ISPEXEC LMFREE DATAID(&CLIST)\n             FREE F(&TABL) DELETE\n             END\n         IF &LCC \u00ac= 0 THEN DO\n             ISPEXEC CONTROL ERRORS RETURN\n             ISPEXEC SETMSG MSG(&ZERRMSG)\n             EXIT CODE(12)\n             END\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECPANL": {"ttr": 1550, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR DEFAULT(%\\_)\n)BODY\n%-----------------------  EXEC CLIST EDIT MACRO  -------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n\\Specify the parameters below (enclose parameters in quotes if needed):\n%EXEC &FULLDSN +\n%===>_EXECPARM\n+\n)INIT\n .CURSOR = EXECPARM\n .HELP = #EXEC\n)PROC\n IF (&ZCMD \u00ac= &Z) .MSG = ISPZ001\n VPUT (EXECPARM) PROFILE\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GENJCL": {"ttr": 1552, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (DSN TSO PARMS) NOPROCESS\n\n/*********************************************************************/\n/*   BOB ZIMMERMAN                                                   */\n/*   CNA INSURANCE                                                   */\n/*   (312) 822-5719                                                  */\n/*   LAST MODIFIED 8505                                              */\n/*********************************************************************/\n\n         ISPEXEC CONTROL ERRORS CANCEL\n\n        IF &STR(&PARMS) = AND &TSO = AND &DSN = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#GENJCL)\n            EXIT\n            END\n\n\n         IF &STR(&PARMS) \u00ac= THEN +\n             DO\n             SET ZEDSMSG = &STR(INVALID PARAMETERS)\n             SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n             SYNTAX ONLY)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         IF &STR(&TSO) = OR &STR(&TSO) = TSO THEN\n         ELSE +\n             DO\n             SET ZEDSMSG = &STR(INVALID PARAMETER)\n             SET ZEDLMSG = &STR(THE ONLY VALID PARAMETER FOR THIS +\n             COMMAND IS \"TSO\")\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         ISREDIT PROCESS DEST\n         IF &LASTCC \u00ac= 0 THEN +\n             DO\n             SET ZEDSMSG = &STR(GENJCL COMMAND PENDING)\n             SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n             THE 'GENJCL' PRIMARY COMMAND)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         IF &STR(&DSN) = THEN +\n             DO\n             SET ZEDSMSG = &STR(SPECIY A DATASET)\n             SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n             SYNTAX)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n        SET DSNINFO = &STR(&DSN)\n        ISPEXEC CONTROL ERRORS RETURN\n        ISPEXEC LMINIT DATAID(ID) DATASET(&DSNINFO)\n        SET LCC = &LASTCC\n        ISPEXEC CONTROL ERRORS CANCEL\n        IF &LCC \u00ac= 0 THEN DO\n            ISPEXEC SETMSG MSG(&ZERRMSG)\n            EXIT CODE(12)\n            END\n\n        ISPEXEC VPUT (DSNINFO) SHARED\n        ISPEXEC CONTROL ERRORS RETURN\n        ISPEXEC SELECT PGM(DSN0INFO) PARM(DSNINFO)\n        SET LCC = &LASTCC\n        ISPEXEC CONTROL ERRORS CANCEL\n        ISPEXEC LMFREE DATAID(&ID)\n        IF &LCC \u00ac= 0 THEN DO\n             SET ZEDSMSG = &STR(DATASET NOT FOUND)\n             SET ZEDLMSG = &STR(SPECIFY A DATASET NAME IN VALID TSO +\n             SYNTAX)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n        ISPEXEC VGET (DEVTYPE VOLSER LRECL BLKSIZE RECFM) SHARED\n        ISPEXEC VGET (DSORG DIRALLOC SCALO TRALC ATRECFM) SHARED\n\n        IF &SUBSTR(1:1,&DSN) \u00ac= &STR(') THEN DO\n            SET DSN = &STR(&SYSPREF..&DSN)\n            END\n        ELSE DO\n             SET &DSN = &SUBSTR(2:&LENGTH(&DSN)-1,&DSN)\n             END\n\n         IF &STR(&TSO) = TSO THEN GOTO FLOWTSO\n\nFLOWIT:  +\n         IF &STR(&DIRALLOC) \u00ac= THEN SET DIR = &STR(,&DIRALLOC)\n         ELSE SET DIR =\n         ISREDIT (DEST) = LINENUM .ZDEST\n         SET LINE = &STR(//GENJCL  DD  DSN=&DSN,)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(//            DISP=(NEW,CATLG),)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(//            UNIT=&DEVTYPE,)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(//            VOL=SER=&VOLSER,)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(//            DCB=(LRECL=&LRECL,+\n         BLKSIZE=&BLKSIZE,RECFM=&RECFM,DSORG=&DSORG),)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(//            SPACE=(TRK,(&TRALC,+\n         &SCALO.&DIR)))\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n\n         EXIT CODE(0)\n\nFLOWTSO: +\n         IF &DIRALLOC = THEN SET DIR =\n         ELSE SET DIR = &STR(DIR(&DIRALLOC))\n         ISREDIT (DEST) = LINENUM .ZDEST\n         SET LINE = &STR(ALLOC DA('&DSN') NEW CATALOG +)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(    UNIT(&DEVTYPE) VOL(&VOLSER) +)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(    LRECL(&LRECL) BLKSIZE(&BLKSIZE) +)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(    RECFM(&ATRECFM) &DIR +\n         DSORG(&DSORG) +)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n         SET DEST = &DEST + 1\n         SET LINE = &STR(    SPACE(&TRALC &SCALO) TRACK)\n         ISREDIT LINE_AFTER &DEST = DATALINE '&LINE'\n\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LJUST": {"ttr": 1793, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* LJUST MACRO - COMMAND ===> LJUST - LINE COMMANDS S<N> AND SS\n   ISREDIT MACRO (TYPE) NOPROCESS\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#LJUST)\n            EXIT\n            END\n\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE S\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(S) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"S<N>\" OR \"SS\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET L = &LENGTH(&SUBSTR(&LB:&RB,&NRSTR(&LN)))\n      SET S = &LB\n      DO WHILE(&S < &L)\n         IF &SUBSTR(&S:&S,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDS\n         SET S = &S + 1\n      END\nFOUNDS: +\n      SET E = &L\n      DO WHILE(&E > &S)\n         IF &SUBSTR(&E:&E,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDE\n         SET E = &E - 1\n      END\nFOUNDE: +\n      SET LINE = &SUBSTR(&S:&E,&NRSTR(&LN))\n      SET L = &LENGTH(&NRSTR(&LINE))\n      SET D = &BL - &L\n      IF &D > 1 THEN DO\n         SET H = &D\n         SET LINE2 = &SUBSTR(1:&H,&STR(                                -\n                                                                       )\n         IF &LB = 1 THEN +\n            SET LINE = &NRSTR(&LINE.&LINE2)\n         ELSE +\n            SET LINE = &SUBSTR(1:&LB-1,&NRSTR(&LN))&NRSTR(&LINE.&LINE2)\n      END\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NEWMSGS": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS EDIT MACRO IS A PROGRAM AND IS DESCRIBED IN THE DIALOG JCL PDS\nCALLED GUIDE.JCL ON THE TAPE. THE DIALOG NAME ID NEWMSGS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ONLY": {"ttr": 1797, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**********************************************************************\n/*       FIND ONLY THE SPECIFIED STRING -\n/*       EXCLUDE ALL OTHER LINES\n/**********************************************************************\n         ISREDIT MACRO (PARMS)\n/******************************************************************\n/*     DETERMINE IF WE ARE RUNNING IN DEBUG MODE                  *\n/*     AND SET CONTROL ACCORDINGLY                                *\n/******************************************************************\n         CONTROL MSG FLUSH NOPROMPT\n         ISPEXEC  CONTROL  ERRORS CANCEL\n         ISPEXEC VGET (SPFDBUG) PROFILE\n         IF &LASTCC \u00ac= 0 THEN SET &SPFDBUG = N\n         IF &SPFDBUG = Y THEN CONTROL LIST MSG SYMLIST CONLIST\n         ELSE CONTROL NOLIST NOMSG NOSYMLIST NOCONLIST\n/******************************************************************\n/*               MAIN CLIST LOGIC                                 *\n/******************************************************************\n         CONTROL NOCAPS\n        IF &STR(&PARMS) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#ONLY)\n            EXIT\n            END\n\n         ISREDIT (STAT,VALUE) = NUMBER\n         ISPEXEC CONTROL ERRORS RETURN\n         ISREDIT UNNUM\n         ISREDIT FIND &NRSTR(&PARMS) ALL\n         SET SCC = &LASTCC\n         IF &SCC > 11 THEN +\n            DO\n            ISREDIT NUMBER = (STAT,VALUE)\n            ISPEXEC SETMSG MSG(&ZERRMSG)\n            EXIT CODE(&SCC)\n            END\n         ISREDIT EXCLUDE ALL\n         ISREDIT FIND &NRSTR(&PARMS) ALL\n         SET SCC = &LASTCC\n         IF &SCC > 11 THEN +\n            DO\n            ISPEXEC SETMSG MSG(&ZERRMSG)\n            END\n         ELSE DO\n             ISREDIT (STRING LINES) = FIND_COUNTS\n             SET STRING = &EVAL(&STRING)\n             SET LINES = &EVAL(&LINES)\n             SET ZEDSMSG = &STR(&STRING STRINGS ON &LINES LINES)\n             SET ZEDLMSG = &STR(&PARMS FOUND &STRING TIMES ON &LINES +\n             LINES)\n             ISPEXEC SETMSG MSG(ISRZ000)\n             END\n         ISREDIT NUMBER = (STAT,VALUE)\n         EXIT CODE(&SCC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PASTE": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          ISREDIT MACRO (LEVEL REST) NOPROCESS\n\n          IF &NRSTR(&REST) \u00ac= THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(INVALID OPERAND)\n             SET ZEDLMSG = &NRSTR(ONLY A FILE NAME OF UP TO 5 +\n             ALPHANUMERIC BYTES IS VALID)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          IF &NRSTR(&LEVEL) = THEN +\n             DO\n             SET LEVEL = LIST\n             END\n\n          IF &NRSTR(&LEVEL) = LIST THEN +\n             DO\n             GOTO PASTLIST\n             END\n\n          IF &NRSTR(&LEVEL) = HELP THEN +\n             DO\n             ISPEXEC CONTROL DISPLAY SAVE\n             ISPEXEC SELECT PGM(ISPTUTOR) PARM(#PASTE)\n             ISPEXEC CONTROL DISPLAY RESTORE\n             EXIT CODE(1)\n             END\n\n          IF &DATATYPE(&NRSTR(&LEVEL)) = NUM THEN +\n                 SET LEVEL = &LEVEL\n          IF &LENGTH(&NRSTR(&LEVEL)) > 5 THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(INVALID LEVEL)\n             SET ZEDLMSG = &NRSTR(ONLY A FILE NAME OF LESS THAN 6 +\n             BYTES IS VALID)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          CONTROL NOFLUSH NOMSG\n          ISREDIT PROCESS DEST\n          SET LCC = &LASTCC\n          CONTROL FLUSH MSG\n          IF &LCC > 0 THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(PASTE CMD PENDING)\n             SET ZEDLMSG = &NRSTR(USING \"A\" OR \"B\" LINE COMMANDS +\n             YOU MUST SPECIFY THE DESTINATION OF THE PASTE)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          ISREDIT (LINE) = LINENUM .ZDEST\n\n          SET TABLE = &NRSTR(CUT&LEVEL)\n\n          ISPEXEC TBSTATS &TABLE STATUS1(ST1) LIBRARY(ISPPROF)\n          SET LCC = &LASTCC\n          IF &ST1 \u00ac= 1 THEN +\n             DO\n             SET ZEDSMSG = &NRSTR(DATA NOT CUT)\n             SET ZEDLMSG = &NRSTR(THE REQUESTED FILE (&LEVEL) WAS +\n             NOT CUT)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n          ISPEXEC TBOPEN &TABLE LIBRARY(ISPPROF)\n          ISPEXEC TBTOP &TABLE\n\n          SET CNT = 0\n          SET LCC = 0\n          DO WHILE &LCC = 0\n\n             ISPEXEC TBSKIP &TABLE\n             SET LCC = &LASTCC\n\n             IF &LCC = 0 THEN DO\n                 ISREDIT LINE_AFTER &LINE = DATALINE (RECORD)\n                 SET LINE = &LINE + 1\n                 SET CNT = &CNT + 1\n                 END\n\n             END\n\n          ISPEXEC TBEND &TABLE\n          SET ZEDSMSG = &NRSTR(&CNT LINES PASTED)\n          SET ZEDLMSG = &NRSTR(&CNT LINES PASTED FROM FILE &LEVEL)\n          ISPEXEC SETMSG MSG(ISRZ000)\n          EXIT CODE(1)\nPASTLIST: +\n          ISPEXEC TBCREATE CUTLIST NAMES(LEVEL RECCNT CREATED +\n                  RECORD) NOWRITE\n\n          ISPEXEC TBVCLEAR CUTLIST\n          ISPEXEC LMINIT DATAID(ID) DDNAME(ISPPROF)\n          ISPEXEC LMOPEN DATAID(&ID)\n          ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n          IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM         )\n          ELSE SET PREF = ZZZ\n          SET LEVEL = &SUBSTR(4:8,&MEM        )\n\n          DO WHILE &PREF < CUT\n              ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n              IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM         )\n              ELSE SET PREF = ZZZ\n              SET LEVEL = &SUBSTR(4:8,&MEM        )\n              END\n\n          DO WHILE &PREF = CUT\n             ISPEXEC TBSTATS &MEM      +\n                     CDATE(CREATED)    +\n                     ROWCURR(RECCNT)   +\n                     LIBRARY(ISPPROF)\n             SET RECCNT = &RECCNT\n             ISPEXEC TBOPEN &MEM LIBRARY(ISPPROF) NOWRITE\n             ISPEXEC TBSKIP &MEM\n             ISPEXEC TBEND  &MEM\n             ISPEXEC TBADD CUTLIST\n\n             ISPEXEC LMMLIST DATAID(&ID) MEMBER(MEM)\n             IF &LASTCC = 0 THEN SET PREF = &SUBSTR(1:3,&MEM     )\n             ELSE SET PREF = ZZZ\n             SET LEVEL = &SUBSTR(4:8,&MEM        )\n             END\n\n          ISPEXEC LMMLIST DATAID(&ID) OPTION(FREE)\n          ISPEXEC LMCLOSE DATAID(&ID)\n          ISPEXEC LMFREE DATAID(&ID)\n\n          ISPEXEC TBTOP CUTLIST\n          SET PANEL = #PASD\nCUTLOOP:  +\n          ISPEXEC TBTOP CUTLIST\n          ISPEXEC TBSKIP CUTLIST NUMBER(&ZTDTOP)\n          ISPEXEC TBDISPL CUTLIST PANEL(&PANEL)\n          SET PCC = &LASTCC\n          SET PANEL = #PASD\n          IF &PCC > 4 THEN DO\n             ISPEXEC TBEND CUTLIST\n             EXIT CODE(1)\n             END\nIF &LSEL  = B THEN DO\n          ISPEXEC CONTROL DISPLAY SAVE\n          SET BRTITLE = &STR(FILE FOLDER \"&LEVEL\")\n          ALLOC F(CUTTEXT) REUSE NEW UNIT(SYSDA) +\n                LRECL(80) BLKSIZE(6160) RECFM(F B) +\n                DSORG(PS) SP(5 5) TR\n          ISPEXEC LMINIT DATAID(ID) DDNAME(CUTTEXT)\n          ISPEXEC LMOPEN DATAID(&ID) OPTION(OUTPUT)\n          SET TABLE = &STR(CUT&LEVEL)\n          ISPEXEC TBOPEN &TABLE NOWRITE LIBRARY(ISPPROF)\n          ISPEXEC TBTOP &TABLE\n          DO WHILE &RECCNT > 0\n              ISPEXEC TBSKIP &TABLE\n              ISPEXEC LMPUT DATAID(&ID) MODE(INVAR) +\n                  DATALOC(RECORD) DATALEN(80)\n              SET RECCNT = &RECCNT - 1\n              END\n              ISPEXEC TBEND &TABLE\n              ISPEXEC LMCLOSE DATAID(&ID)\n              ISPEXEC BROWSE DATAID(&ID) PANEL(CNADBROW)\n              ISPEXEC LMFREE DATAID(&ID)\n              FREE F(CUTTEXT)\n              ISPEXEC CONTROL DISPLAY RESTORE\n              IF &PCC = 4 THEN SET PANEL =\n              GOTO CUTLOOP\n          END\nIF &LSEL  = S THEN DO\n          ISPEXEC CONTROL ERRORS RETURN\n          ISREDIT PASTE &LEVEL\n          SET LCC = &LASTCC\n          ISPEXEC CONTROL ERRORS CANCEL\n          ISPEXEC TBEND CUTLIST\n          IF &LCC \u00ac= 0 THEN EXIT CODE(&LCC)\n          EXIT CODE(0)\n          END\n          IF &PCC = 4 THEN SET PANEL =\n          GOTO CUTLOOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PROFLIST": {"ttr": 1803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (TYPE)\n/*********************************************************************/\n/*   BOB ZIMMERMAN                                                   */\n/*   CNA INSURANCE                                                   */\n/*   (312) 822-5719                                                  */\n/*   LAST MODIFIED 8503                                              */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/*   THIS EDIT MACRO WILL ALL CURRENT EDIT PROFILES DEFINED FOR A    */\n/*   USER.                                                           */\n/*                                                                   */\n/*********************************************************************/\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#PROFLIS)\n            EXIT\n            END\n\n/*       ISREDIT UP MAX\n         ISREDIT (FIRST) = DISPLAY_LINES\n         ISREDIT LINE_AFTER &FIRST = MSGLINE ' '\n         ISPEXEC TBTOP ISREDIT\n         ISPEXEC TBSKIP ISREDIT\nLOOP:    +\n         ISREDIT LINE_AFTER &FIRST = NOTELINE +\n         '   &SUBSTR(1:8,&ZEDPTYPE       )  +\n             &SUBSTR(1:5,&ZEDPLRCL       )  +\n             &SUBSTR(1:5,&ZEDPRCFM       )'\n         ISPEXEC TBSKIP ISREDIT\n         IF &LASTCC = 0 THEN GOTO LOOP\n         ISREDIT LINE_AFTER &FIRST = MSGLINE '   -------  -----  -----'\n         ISREDIT LINE_AFTER &FIRST = MSGLINE '   PROFILE  LRECL  RECFM'\n         ISREDIT LINE_AFTER &FIRST = MSGLINE ' '\n         ISREDIT LINE_AFTER &FIRST = MSGLINE 'THE FOLLOWING IS +\n         A LIST OF +\n         YOUR CURRENT EDIT PROFILES:'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RJUST": {"ttr": 1805, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* RJUST MACRO - COMMAND ===> RJUST - LINE COMMANDS \u00a2<N> AND \u00a2\u00a2\n   ISREDIT MACRO (TYPE) NOPROCESS\n        IF &STR(&TYPE) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#RJUST)\n            EXIT\n            END\n\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE \u00a2\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(\u00a2) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"\u00a2<N>\" OR \"\u00a2\u00a2\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET L = &LENGTH(&SUBSTR(&LB:&RB,&NRSTR(&LN)))\n      SET S = &LB\n      DO WHILE(&S < &L)\n         IF &SUBSTR(&S:&S,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDS\n         SET S = &S + 1\n      END\nFOUNDS: +\n      SET E = &L\n      DO WHILE(&E > &S)\n         IF &SUBSTR(&E:&E,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDE\n         SET E = &E - 1\n      END\nFOUNDE: +\n      SET LINE = &SUBSTR(&S:&E,&NRSTR(&LN))\n      SET L = &LENGTH(&NRSTR(&LINE))\n      SET D = &BL - &L\n      IF &D > 1 THEN DO\n         SET H = &D\n         SET LINE2 = &SUBSTR(1:&H,&STR(                                -\n                                                                       )\n         IF &LB = 1 THEN +\n            SET LINE = &NRSTR(&LINE2.&LINE)\n         ELSE +\n            SET LINE = &SUBSTR(1:&LB-1,&NRSTR(&LN))&NRSTR(&LINE2.&LINE)\n      END\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWDCB": {"ttr": 1807, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (STUFF)\n\n/*********************************************************************/\n/*   BOB ZIMMERMAN                                                   */\n/*   CNA INSURANCE                                                   */\n/*   (312) 822-5719                                                  */\n/*   LAST MODIFIED 8506                                              */\n/*********************************************************************/\n\n         CONTROL FLUSH MSG NOPROMPT\n         ISPEXEC CONTROL ERRORS CANCEL\n\n        IF &STR(&STUFF) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#SHOWDCB)\n            EXIT\n            END\n\n         IF &STR(&STUFF) NE THEN +\n            DO\n            SET ZEDSMSG = &STR(INVALID PARAMETERS)\n            SET ZEDLMSG = &STR(NO PARAMTERS ARE ALLOWED FOR THE +\n            SHOWDCB COMMAND)\n            ISPEXEC SETMSG MSG(ISRZ001)\n            EXIT CODE(12)\n            END\n\n         ISREDIT (DSNSINFO) = DATASET\n         SET DSNSINFO = &STR('&DSNSINFO')\n         ISPEXEC VPUT (DSNSINFO) SHARED\n\n         ISPEXEC SELECT PGM(DSN0INFO) PARM(DSNSINFO)\n         SET LCC = &LASTCC\n         ISPEXEC VGET (VOLSER LRECL BLKSIZE RECFM DSORG) SHARED\n         SET LCC = &LASTCC\n         SET ZEDSMSG = &STR( )\n         SET ZEDLMSG = &STR(****** DCB=(LRECL=&LRECL,BLKSIZE=&BLKSIZE,+\n         RECFM=&RECFM,DSORG=&DSORG))\n         ISPEXEC SETMSG MSG(ISRZ000)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOTOJCL": {"ttr": 1809, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         ISREDIT MACRO (TSODSN JCLDSN REST) NOPROCESS\n\n         ISPEXEC CONTROL ERRORS CANCEL\n\n        IF &STR(&REST) = AND &TSODSN = HELP AND &JCLDSN = THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#TSOTOJC)\n            EXIT\n            END\n\n         IF &STR(&REST) \u00ac= OR &TSODSN = OR &JCLDSN = THEN DO\n             SET ZEDSMSG = &STR(INVALID PARMS)\n             SET ZEDLMSG = &STR(SPECIFY A TSO VARIABLE NAME AND A JCL +\n             VARIABLE NAME)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(12)\n             END\n\n         ISREDIT PROCESS DEST\n         IF &LASTCC \u00ac= 0 THEN +\n             DO\n             SET ZEDSMSG = &STR(TSOJCL COMMAND PENDING)\n             SET ZEDLMSG = &STR(ENTER AN 'A' OR 'B' LINE COMMAND WITH +\n             THE 'TSOJCL' PRIMARY COMMAND)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             EXIT CODE(16)\n             END\n\n\nFLOWIT:  +\n         ISREDIT (DEST) = LINENUM .ZDEST\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             ' IF (&&&&&TSODSN \u00ac= &&&&Z)'\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '     &&&&TEMP = TRUNC (&&&&&TSODSN,'''')'\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '     &&&&TRAIL = .TRAIL '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '     IF (&&&&TRAIL = &&&&Z) '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '         &&&&&JCLDSN = '&&&&ZPREFIX..&&&&&TSODSN''\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '     IF (&&&&TRAIL \u00ac= &&&&Z) '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '         &&&&&JCLDSN = TRUNC (&&&&TRAIL,'''') '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             ' IF (&&&&&TSODSN = &&&&Z) '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE +\n             '     &&&&&JCLDSN = &&&&Z '\n         SET DEST = &DEST + 1\n         ISREDIT LINE_AFTER &DEST = DATALINE '     '\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT462/FILE462.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT462", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}