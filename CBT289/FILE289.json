{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011648000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE289.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE289.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x0b'", "DS1TRBAL": "b'+\\x08'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xfa\\x00\\t\\x01\\xfb\\x00\\x01\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\\\\\x00\\x12\\x01\\x16\\x19\\x7f\\x01\\x16\\x19\\x7f\\x19\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf2@@@'", "ispf": {"version": "04.92", "flags": 0, "createdate": "2016-07-15T00:00:00", "modifydate": "2016-07-15T19:13:12", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-492"}, "text": "REGULAR CBT TAPE - VERSION 492    FILE:  289\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT492.FILE289\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,349 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/15/16    19:13:11    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x15\\x01\\x14 \\x1f\\x01\\x16\\x19\\x9f\\x13#\\x00L\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2014-07-20T00:00:00", "modifydate": "2016-07-17T13:23:15", "lines": 76, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": "         Some more notes on SMP/E input processing\n         ---- ---- ----- -- ----- ----- ----------\n\n\n1.  PTFs as shipped from IBM ain't quite what they used to be.\n    However, we can handle the differences, at least partially.\n\n    For example, we can handle compaction.  This process seems\n    to have been meant to reduce the bulk in PTFs that are being\n    shipped electronically.  However, in my biased opinion, the\n    process does not seem to save that much space.  It does serve\n    to obfuscate the content of the PTFs (namely the object decks)\n    and therefore the actual content of the PTF becomes harder to\n    understand.\n\n    Nevertheless, a simple process, using the IBM utility GIMCPTS\n    with the following sample JCL, can \"expand\" the PTF's material\n    and show you most of the original content.  The only parts of\n    the PTF which remain obfuscated, are the modules presented in\n    $$.GIMDTS  FORMAT .\n\n    Simple expansion of each PTF can be done using the following\n    prototype JCL:\n\n\n    //SBGOLOBG  JOB (ACCT#),S-GOLOB,\n    // NOTIFY=&SYSUID,\n    // CLASS=B,MSGCLASS=X\n    //*\n    //EXPPTF  PROC MEM=XXX\n    //UNZIP   EXEC PGM=GIMCPTS,PARM='EXPAND,LANGUAGE=ENU'\n    //SYSPRINT DD  SYSOUT=*\n    //SYSUT1   DD  DISP=SHR,DSN=SBGOLOB.PTFSyymm.PTFS(&MEM)  *input\n    //SYSUT2   DD  DISP=SHR,DSN=SBGOLOB.PTFSyymm.PTEX(&MEM)  *output\n    //        PEND\n    //*\n    //PTFNUMB EXEC EXPPTF,MEM=PTFNUMB\n\n       etc.\n\n    where the SYSUT2 DD name points to the output dataset.\n\n    All SMPPTS control statements and comment statements are\n    unchanged by this process.  Only the contents of the\n    modules are expanded.\n\n    Again I must emphasize that the contents of\n    $$.GIMDTS  FORMAT material still remains unchanged after\n    this process.\n\n    Sequential SMPPTFIN datasets are also handled correctly\n    by the GIMCPTS program, and you can use the following\n    sample JCL as an example:\n\n    //SBGOLOBG  JOB (ACCT#),S-GOLOB,\n    // NOTIFY=&SYSUID,\n    // CLASS=B,MSGCLASS=X\n    //*\n    //UNZIP   EXEC PGM=GIMCPTS,PARM='EXPAND,LANGUAGE=ENU'\n    //SYSPRINT DD  SYSOUT=*\n    //SYSUT1   DD  DISP=OLD,DSN=SBGOLOB.SMPPTFIN.SEQPTFS  *input\n    //SYSUT2   DD  DISP=SHR,DSN=SBGOLOB.SMPPTFIN.SEQPTEX  *output\n    //SYSIN    DD  DUMMY\n\n\n2.  Since comments and SMP control cards inside the PTFs are not\n    changed by GIMCPTS processing at all, our own programs,\n    PUTXREF and SMPUPD are not affected in their operation at all,\n    except for their report of the number of cards read in each\n    PTF.\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE289": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\\\\\x00\\x03\\x01\\x16\\x19\\x7f\\x01\\x16\\x19\\x7f\\x19\\x13\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf2@@@'", "ispf": {"version": "04.92", "flags": 0, "createdate": "2016-07-15T00:00:00", "modifydate": "2016-07-15T19:13:03", "lines": 30, "newlines": 30, "modlines": 0, "user": "CBT-492"}, "text": "//***FILE 289 IS THE PGM TO GENERATE A PTF TAPE XREF REPORT.  THIS  *   FILE 289\n//*           PROGRAM, CALLED PHRANQUE, WILL GENERATE FOUR REPORTS: *   FILE 289\n//*                                                                 *   FILE 289\n//*     REPORT 01  WILL BE A LIST OF ALL THE PTF'S ON THE TAPE      *   FILE 289\n//*                                                                 *   FILE 289\n//*     REPORT 02  WILL CONTAIN A LIST OF ALL ELEMENTS              *   FILE 289\n//*                (MODULE, MACROS, ETC.) ON THE TAPE AND           *   FILE 289\n//*                THE PTF'S THAT REFERENCE THEM                    *   FILE 289\n//*                                                                 *   FILE 289\n//*     REPORT 03  WILL LIST ALL THE COVER LETTERS ON THE TAPE      *   FILE 289\n//*                                                                 *   FILE 289\n//*     REPORT 04  WILL LIST ALL THE FMID'S ON THE TAPE AND THE     *   FILE 289\n//*                PTF'S THAT REFERENCE THOSE FMIDS                 *   FILE 289\n//*                                                                 *   FILE 289\n//*     This program will help prevent problems in RECEIVE'ing      *   FILE 289\n//*     SMPPTFIN-format data.  You can run the data through this    *   FILE 289\n//*     program and find out if you are going to RECEIVE the        *   FILE 289\n//*     right PTF's or the wrong ones, BEFORE THEY ARE SEEN         *   FILE 289\n//*     BY SMP/E.                                                   *   FILE 289\n//*                                                                 *   FILE 289\n//*     See also:  Programs PUTXREF and SMPUPD from CBT File 118.   *   FILE 289\n//*                                                                 *   FILE 289\n//*     Brought up to date (z/OS 2.2) by Sam Golob.  But the        *   FILE 289\n//*      original load module runs fine.  No source code changes    *   FILE 289\n//*      either.  Just using newer versions of IBM macros and       *   FILE 289\n//*      modules (IEFSD095 to make big letters on the printout).    *   FILE 289\n//*      Load library included here, in TSO XMIT format.            *   FILE 289\n//*                                                                 *   FILE 289\n//*         email:  sbgolob@cbttape.org or sbgolob@attglobal.net    *   FILE 289\n//*                                                                 *   FILE 289\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GIMEXPS0": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\"\\x01\\x14 \\x1f\\x01\\x14 \\x1f\\x15R\\x00\\x0f\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2014-07-20T00:00:00", "modifydate": "2014-07-20T15:52:22", "lines": 15, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBG  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                                                                 *\n//*  SMP/E UNCOMPACT PTFS SO THAT OBJECT DECKS MAY BE READ, ETC.    *\n//*                                                                 *\n//*     (RUN FOR SEQUENTIAL SMPPTFIN DATASETS WITH ONE OR MORE      *\n//*      PTFS CONTAINED IN THEM)                                    *\n//*                                                                 *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//UNCOMP  EXEC PGM=GIMCPTS,PARM='EXPAND,LANGUAGE=ENU'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=OLD,DSN=SBGOLOB.Z24.HBB7790.SEQPTFS\n//SYSUT2   DD  DISP=SHR,DSN=SBGOLOB.Z24.HBB7790.SEQPTEX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GIMEXP00": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x13\\x01\\x14 \\x1f\\x01\\x14 \\x1f\\x15R\\x00\\x1a\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2014-07-20T00:00:00", "modifydate": "2014-07-20T15:52:13", "lines": 26, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBG  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                                                                 *\n//*  SMP/E UNCOMPACT PTFS SO THAT OBJECT DECKS MAY BE READ, ETC.    *\n//*                                                                 *\n//*     (RUN FOR EACH MEMBER OF A PDS WHICH CONTAINS ONE PTF.)      *\n//*                                                                 *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*\n//EXPPTF  PROC MEM=XXX\n//UNZIP   EXEC PGM=GIMCPTS,PARM='EXPAND,LANGUAGE=ENU'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=SBGOLOB.PTFSPDS.PTFS(&MEM)   <--INPUT\n//SYSUT2   DD  DISP=SHR,DSN=SBGOLOB.PTFSPDS.PTEX(&MEM)   <--OUTPUT\n//        PEND\n//*\n//UI12453 EXEC EXPPTF,MEM=UI12453\n//UI12565 EXEC EXPPTF,MEM=UI12565\n//UI12721 EXEC EXPPTF,MEM=UI12721\n//UI12722 EXEC EXPPTF,MEM=UI12722\n//UI12751 EXEC EXPPTF,MEM=UI12751\n//*\n//*             ETC.\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHADECB": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x01\\x8f\\x00\\x82\\x01\\x8f#\\x17\\x03N\\x03N\\x00\\x00\\xe2\\xe2\\xe4\\xc4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-01-18T00:00:00", "modifydate": "1982-01-18T23:17:00", "lines": 846, "newlines": 846, "modlines": 0, "user": "SSUD"}, "text": "*\n*        %GOTO DECBL1;      /*\n         MACRO\n         IHADECB &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSCT\nDECB     DSECT , -            DECBPTR\n         AGO   .CONT\n.NODSCT  ANOP\n         DS    0D\nDECB     EQU   * -            DECBPTR\n.CONT    ANOP  ,  */\n*%DECBL1 : ;\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCKS FOR -                       */\n*/*            BSAM, BISAM, BDAM, QTAM, BTAM                         */\n*/*                                                                  */\n*/*  OS/VS2 RELEASE 1, OS/VS1 RELEASE 2, 05/25/72, LEVEL=3           */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */\n*/*             USING ON DECB GIVES ADDRESSABILITY FOR ALL SYMBOLS.  */\n*/*      PL/S - DCL DECBPT PTR                                       */\n*/* **************************************************************** */\n*%GOTO DECBL2;  /*\n         SPACE 1\n         IEZBITS , -          SYMBOLIC BIT DEFINITIONS\n         SPACE 1\n***********************************************************************\n*              DATA EVENT CONTROL BLOCK FOR BSAM                      *\n***********************************************************************\n         SPACE 1\nDECSDECB DS    CL4 -          EVENT CONTROL BLOCK\nDECBPTR  DS    0A -           FOR IBM 1419 MAGNETIC CHARACTER READER\n*                             AND IBM 1275 OPTICAL READER SORTER, A\n*                             POINTER TO NEXT DECB TO BE TESTED FOR\n*                             COMPLETION BY THE CHECK MACRO INSTRUCTION\nDECTYPE  DS    0BL2 -         TYPE OF I/O REQUEST\nDECTYPE1 DS    B -            TYPE OF LENGTH OPERAND\nDECLNS   EQU   BIT0 -         S CODED FOR LENGTH\nDECRSV01 EQU   BIT1,,C'X' -   RESERVED\nDECRSV02 EQU   BIT2,,C'X' -   RESERVED\nDECRSV03 EQU   BIT3,,C'X' -   RESERVED\nDECRSV04 EQU   BIT4,,C'X' -   RESERVED\nDECRSV05 EQU   BIT5,,C'X' -   RESERVED\nDECRSV06 EQU   BIT6,,C'X' -   RESERVED\nDECRSV07 EQU   BIT7,,C'X' -   RESERVED\nDECTYPE2 DS    B -            TYPE OF OPERATION\nDECRDSF  EQU   BIT0 -         READ SF\nDECRDSB  EQU   BIT1 -         READ SB\nDECWRSF  EQU   BIT2 -         WRITE SF\nDECWRSD  EQU   BIT3 -         WRITE SD\nDECRSV08 EQU   BIT4,,C'X' -   RESERVED\nDECWRSZ  EQU   BIT5 -         WRITE SZ\nDECRSV09 EQU   BIT6,,C'X' -   RESERVED\nDECWRSFR EQU   BIT7 -         WRITE SFR (BIT 2 IS ALSO ON)\nDECLNGTH DS    H -            LENGTH OF KEY AND DATA\nDECDCBAD DS    A -            ADDRESS OF DCB TO WHICH THIS I/O REQUEST\n*                             IS RELATED\nDECAREA  DS    A -            ADDRESS OF KEY AND DATA, OR FOR 1287 OR\n*                             1288 OPTICAL READERS, ADDRESS OF A\n*                             USER-SPECIFIED CHANNEL PROGRAM\nDECIOBPT DS    A -            ADDRESS OF IOB\nDECNEXT  DS    0A -           SAME AS DECNEXTA BELOW\nDECRSV10 DS    X -            RESERVED\nDECNEXTA DS    AL3 -          ADDRESS OF NEXT ADDRESS FEEDBACK FIELD.\n*                             PRESENT ONLY IF R IS CODED IN WRITE MACRO\n         SPACE 2\n***********************************************************************\n*              DATA EVENT CONTROL BLOCK FOR BISAM                     *\n***********************************************************************\n         SPACE 1\n         ORG   DECB\nDECBECB  DS    0CL4 -         EVENT CONTROL BLOCK\nDECBRB   DS    0A -           SAME AS DECBRBA BELOW\nDECBECBF DS    B -            FLAG FIELD\nDECBWAIT EQU   BIT0 -         AWAITING COMPLETION OF EVENT\nDECBPOST EQU   BIT1 -         EVENT HAS COMPLETED\nDECRSV11 EQU   BIT2,,C'X' -   RESERVED\nDECRSV12 EQU   BIT3,,C'X' -   RESERVED\nDECRSV13 EQU   BIT4,,C'X' -   RESERVED\nDECRSV14 EQU   BIT5,,C'X' -   RESERVED\nDECRSV15 EQU   BIT6,,C'X' -   RESERVED\nDECRSV16 EQU   BIT7,,C'X' -   RESERVED\nDECBRBA  DS    AL3 -          ADDRESS OF RB FOR PROGRAM AWAITING EVENT\n*                             (BEFORE EVENT COMPLETION) OR RESERVED\n*                             (AFTER EVENT COMPLETION)\nDECBTYP1 DS    B -            OPTION BYTE\nDECRSV17 EQU   BIT0,,C'X' -   RESERVED\nDECRSV18 EQU   BIT1,,C'X' -   RESERVED\nDECRSV19 EQU   BIT2,,C'X' -   RESERVED\nDECRSV20 EQU   BIT3,,C'X' -   RESERVED\nDECRSV21 EQU   BIT4,,C'X' -   RESERVED\nDECRSV22 EQU   BIT5,,C'X' -   RESERVED\nDECBLNS  EQU   BIT6 -         LENGTH CODED AS 'S'\nDECBARS  EQU   BIT7 -         AREA CODED AS 'S'\nDECBTYP2 DS    B -            TYPE OF I/O REQUEST\nDECBRDK  EQU   BIT0 -         READ K\nDECRSV23 EQU   BIT1,,C'X' -   RESERVED\nDECBRDKU EQU   BIT2 -         READ KU\nDECRSV24 EQU   BIT3,,C'X' -   RESERVED\nDECBWRK  EQU   BIT4 -         WRITE K\nDECBWRKN EQU   BIT5 -         WRITE KN\nDECRSV25 EQU   BIT6,,C'X' -   RESERVED\nDECRSV26 EQU   BIT7,,C'X' -   RESERVED\nDECBLGTH DS    H -            NUMBER OF BYTES READ OR WRITTEN\nDECBDCBA DS    A -            ADDRESS OF DATA CONTROL BLOCK\nDECBAREA DS    A -            ADDRESS OF AREA IN STORAGE FOR RECORD\nDECBLOGR DS    A -            ADDRESS OF LOGICAL RECORD\nDECBKEY  DS    A -            ADDRESS OF KEY PORTION OF RECORD\nDECBEXC1 DS    B -            EXCEPTIONAL CONDITION CODE BYTE 1\nDECEXRNF EQU   BIT0 -         RECORD NOT FOUND\nDECEXRLC EQU   BIT1 -         RECORD LENGTH CHECK\nDECEXNSP EQU   BIT2 -         SPACE NOT FOUND IN WHICH TO ADD A RECORD\nDECEXINV EQU   BIT3 -         INVALID REQUEST\nDECEXERR EQU   BIT4 -         UNCORRECTABLE I/O ERROR\nDECEXUBK EQU   BIT5 -         UNREACHABLE BLOCK\nDECEXOFL EQU   BIT6 -         OVERFLOW RECORD\nDECEXDUP EQU   BIT7 -         DUPLICATE RECORD PRESENTED FOR INCLUSION\n*                             IN DATA SET\nDECBEXC2 DS    B -            EXCEPTIONAL CONDITION CODE BYTE 2\nDECRSV27 EQU   BIT0,,C'X' -   RESERVED\nDECRSV28 EQU   BIT1,,C'X' -   RESERVED\nDECRSV29 EQU   BIT2,,C'X' -   RESERVED\nDECRSV30 EQU   BIT3,,C'X' -   RESERVED\nDECRSV31 EQU   BIT4,,C'X' -   RESERVED\nDECRSV32 EQU   BIT5,,C'X' -   RESERVED\nDECEXASR EQU   BIT6 -         EXECUTION OF LAST CHANNEL PROGRAM WAS\n*                             INSTITUTED BY AN ASYNCHRONOUS ROUTINE\nDECEXRKU EQU   BIT7 -         PREVIOUS MACRO INSTRUCTION WAS READ KU\n         SPACE 2\n***********************************************************************\n*              DATA EVENT CONTROL BLOCK FOR BDAM                      *\n***********************************************************************\n         SPACE 1\n         ORG   DECB\n         DS    0CL4 -         DECSDECB - EVENT CONTROL BLOCK\n         DS    B -            COMPLETION CODE BYTE 1\nDECCC2   DS    B -            COMPLETION CODE BYTE 2\nDECCCRNF EQU   BIT0 -         RECORD NOT FOUND\nDECCCRLC EQU   BIT1 -         RECORD LENGTH CHECK\nDECCCNSP EQU   BIT2 -         SPACE NOT FOUND\nDECCCINV EQU   BIT3 -         INVALID REQUEST\nDECCCERR EQU   BIT4 -         UNCORRECTABLE I/O ERROR\nDECCCEOD EQU   BIT5 -         END OF DATA\nDECCCUER EQU   BIT6 -         UNCORRECTABLE ERROR OTHER THAN I/O ERROR\nDECCCREX EQU   BIT7 -         A READ WITH EXCLUSIVE CONTROL WAS NOT\n*                             PRECEDED BY A WRITE WITH EXCLUSIVE\n*                             CONTROL\nDECCC3   DS    B -            COMPLETION CODE BYTE 3\nDECRSV33 EQU   BIT0,,C'X' -   RESERVED\nDECCCWRI EQU   BIT1 -         A WRITE MACRO INSTRUCTION WAS ADDRESSED\n*                             TO AN INPUT DATA SET\nDECCCEXS EQU   BIT2 -         AN EXTENDED SEARCH WAS SPECIFIED WITH\n*                             DCBLIMCT FIELD SET TO ZERO\nDECCCNBK EQU   BIT3 -         BLOCK REQUESTED IS NOT WITHIN DATA SET\nDECCCWDI EQU   BIT4 -         A WRITE-BY-IDENTIFICATION (DI) ADDRESSED\n*                             RECORD ZERO\nDECCCSDK EQU   BIT5 -         A SEARCH-ON-KEY (DK) WAS SPECIFIED WITH\n*                             DCBKEYLE FIELD SET TO ZERO OR WITHOUT AN\n*                             ADDRESS FOR THE KEY\nDECCCOPT EQU   BIT6 -         A MACRO INSTRUCTION USED AN OPTION NOT\n*                             SET IN THE DCB\nDECCCKFF EQU   BIT7 -         THE KEY FOR THE FIXED-LENGTH RECORD TO BE\n*                             ADDED BEGINS WITH HEX FF\nDECRSV34 DS    X -            RESERVED\n         DS    0BL2 -         DECTYPE - TYPE OF I/O REQUEST\n         DS    B -            DECTYPE1 - FIRST BYTE OF DECTYPE\nDECVERFY EQU   BIT0 -         VERIFY\nDECOFLOW EQU   BIT1 -         OVERFLOW\nDECEXSRC EQU   BIT2 -         EXTENDED SEARCH\nDECFDBCK EQU   BIT3 -         FEEDBACK\nDECACTAD EQU   BIT4 -         ACTUAL ADDRESSING\nDECDYNBF EQU   BIT5 -         DYNAMIC BUFFERING\nDECRDEX  EQU   BIT6 -         READ EXCLUSIVE\nDECRELBA EQU   BIT7 -         RELATIVE BLOCK ADDRESSING\n         DS    B -            DECTYPE2 - SECOND BYTE OF DECTYPE\nDECKEYS  EQU   BIT0 -         S CODED FOR KEY ADDRESS\nDECBKLNS EQU   BIT1 -         S CODED FOR BLOCK LENGTH\nDECTYPRU EQU   BIT2+BIT3 -    RU IS SUFFIXED TO THE TYPE, INDICATING\n*                             THAT THE FEEDBACK ADDRESS POINTED TO BY\n*                             DECNXADR CAN BE ADDRESS OF EITHER NEXT\n*                             DATA RECORD OR NEXT CAPACITY RECORD,\n*                             WHICHEVER OCCURS FIRST\nDECTYPR  EQU   BIT3 -         R IS SUFFIXED TO THE TYPE, INDICATING\n*                             THAT THE FEEDBACK ADDRESS POINTED TO BY\n*                             DECNXADR IS ADDRESS OF NEXT DATA RECORD\n*                             (BIT 2 IS ZERO)\nDECOPRD  EQU   BIT4 -         TYPE OF OPERATION - 0 IS WRITE, 1 IS READ\nDECSRKEY EQU   BIT5 -         TYPE OF SEARCH ARGUMENT - 0 IS ID ,\n*                             1 IS KEY\nDECWRADD EQU   BIT6 -         ADD OPTION OF WRITE OPERATION\nDECRSV35 EQU   BIT7,,C'X' -   RESERVED\n         DS    H -            DECLNGTH - LENGTH OF DATA\n         DS    A -            DECDCBAD - ADDRESS OF DCB TO WHICH THIS\n*                             I/O REQUEST IS RELATED\n         DS    A -            DECAREA - ADDRESS OF DATA\n         DS    A -            DECIOBPT - ADDRESS OF IOB\nDECKYADR DS    A -            ADDRESS OF KEY\nDECRECPT DS    A -            ADDRESS OF BLOCK REFERENCE FIELD\nDECNA    DS    0A -           SAME AS DECNAA BELOW\nDECRSV36 DS    X -            RESERVED\nDECNAA   DS    AL3 -          ADDRESS OF NEXT ADDRESS FEEDBACK FIELD.\n*                             PRESENT ONLY IF R OR RU IS CODED IN READ\n*                             MACRO.\n         SPACE 2\n***********************************************************************\n*              DATA EVENT CONTROL BLOCK FOR QTAM                      *\n***********************************************************************\n         SPACE 1\n         ORG   DECB\nLINEDECB DS    CL4 -          ALWAYS ZERO\nDECRSV37 DS    X -            RESERVED\nDECOPCOD DS    C -            OPERATION CODE FOR CURRENT SEGMENT\n         DS    H -            DECLNGTH - LENGTH OF INPUT AREA FOR\n*                             INITIAL READ\n         DS    A -            DECDCBAD - ADDRESS OF DCB\n         DS    A -            DECAREA - STARTING ADDRESS FOR DATA IN A\n*                             BUFFER\nDECRSV38 DS    XL4 -          RESERVED\nDECCPOL  DS    0A -           SAME AS DECCPOLA BELOW\nDECNMMSG DS    FL1 -          NUMBER OF MESSAGES RECEIVED\nDECCPOLA DS    AL3 -          ADDRESS OF CURRENTLY ACTIVE ENTRY IN\n*                             POLLING LIST\nDECRSV39 DS    X -            RESERVED\nDECUCBDX DS    FL1 -          INDEX TO UCB ADDRESS IN DEB\nDECRSV40 DS    XL2 -          RESERVED\nDECRSV41 DS    XL4 -          RESERVED\nDECADRCH DS    A -            ADDRESS OF ADDRESSING CHARACTERS IN\n*                             TERMINAL ENTRY\n         DS    0A -           DECPOLPT - ADDRESS OF POLLING LIST\nDECRSV42 DS    X -            RESERVED\n         DS    AL3 -          DECPOLPA - ADDRESS OF POLLING LIST\n         SPACE 2\n***********************************************************************\n*              DATA EVENT CONTROL BLOCK FOR BTAM                      *\n***********************************************************************\n         SPACE 1\n         ORG   DECB\n         DS    CL4 -          DECSDECB - EVENT CONTROL BLOCK\n         DS    0BL2 -         DECTYPE - PROGRAMMING INDICATORS\n         DS    B -            DECTYPE1 - FIRST BYTE OF DECTYPE\nDECRDAPL EQU   BIT0 -         READ, USING AUTOPOLL\nDECRSV43 EQU   BIT1,,C'X' -   RESERVED\nDECRSV44 EQU   BIT2,,C'X' -   RESERVED\nDECRSV45 EQU   BIT3,,C'X' -   RESERVED\nDECRSV46 EQU   BIT4,,C'X' -   RESERVED\nDECSTRME EQU   BIT5 -         'S' CODED FOR TERMINAL ENTRY\nDECSAREA EQU   BIT6 -         'S' CODED FOR AREA\nDECSLNTH EQU   BIT7 -         'S' CODED FOR LENGTH\n         DS    C -            DECTYPE2 - OPERATION CODE\n         DS    H -            DECLNGTH - LENGTH OF BUFFER OR MESSAGE\n*                             AREA\n         DS    0A -           DECDCBAD - ADDRESS OF ASSOCIATED DCB\nDECBUFCT DS    0FL1 -         CONTAINS A RUNNING COUNT OF BUFFERS\n*                             OBTAINED BY BTAM FOR CURRENT READ\n*                             OPERATION.  (DYNAMIC BUFFERING ONLY.)\n*                             USE DIFFERS DURING BSC AND 2760 ON LINE\n*                             TEST.\nDECONLTT DS    B -            FLAG BYTE FOR BSC AND 2760 ONLINE TEST\nDECONLTS EQU   BIT0 -         IF ZERO, ONLINE TEST REQUESTED BY RFT\n*                             MESSAGE (BSC).  IF ONE, ONLINE TEST\n*                             INITIATED BY ONLTST MACRO INSTRUCTION\n*                             (BSC).\nDECRCVMS EQU   BIT1 -         IF ZERO, SENDING TEST MESSAGES (BSC).\n*                             IF ONE, RECEIVING TEST MESSAGES (BSC) OR\n*                             TYPE 11 ONLINE TEST FOR 2760 OPTICAL\n*                             IMAGE UNIT.\nDECRSV47 EQU   BIT2,,C'X' -   RESERVED\nDECRSV48 EQU   BIT3,,C'X' -   RESERVED\nDECRSV49 EQU   BIT4,,C'X' -   RESERVED\nDECRSV50 EQU   BIT5,,C'X' -   RESERVED\nDECRSV51 EQU   BIT6,,C'X' -   RESERVED\nDECRSV52 EQU   BIT7,,C'X' -   RESERVED\nDECDCBAA DS    AL3 -          ADDRESS OF ASSOCIATED DCB\n         DS    A -            DECAREA - ADDRESS OF BUFFER OR MESSAGE\n*                             AREA\nDECSENS0 DS    B -            SENSE INFORMATION\nDECSENS1 DS    B -            RESERVED\nDECCOUNT DS    H -            RESIDUAL COUNT FROM CSW FOR LAST CCW\n*                             EXECUTED\nDECENTRY DS    0A -           ADDRESS OF TERMINAL LIST\nDECCMCOD DS    C -            COMMAND FOR WHICH ERROR OCCURRED\nDECENTRA DS    AL3 -          ADDRESS OF TERMINAL LIST\nDECFLAGS DS    B -            OPERATION STATUS\nDECWACK  EQU   BIT0+BIT1 -    WACK WAS RECEIVED (BSC)\nDECERRMS EQU   BIT0 -         ERROR STATUS MESSAGE WAS RECEIVED (BSC).\n*                             BIT1 IS OFF.\nDECDIFAC EQU   BIT1 -         ACKNOWLEDGMENT OTHER THAN ACK-0 OR ACK-1\n*                             RECEIVED (BSC)\nDECALTAC EQU   BIT2 -         ACKNOWLEDGMENT ALTERNATION INCORRECT\nDECBADID EQU   BIT3 -         FOR TWX 33/35 STATION AND BSC STATION,\n*                             INCORRECT ID RECEIVED.  FOR AUTOPOLL,\n*                             INDEX BYTE RECEIVED DOES NOT MATCH AN\n*                             ACTIVE ONE.  FOR BSC NONSWITCHED\n*                             POINT-TO-POINT LINE, CONTENTION OCCURRED.\n*                             FOR WTTA, CONTENTION OCCURRED OR\n*                             INCORRECT ID RECEIVED.\nDECNOBUF EQU   BIT4 -         FOR READ, DYNAMIC BUFFERING, NO BUFFER\n*                             WAS AVAILABLE.  (MESSAGE LOST)\nDECNEGRP EQU   BIT5 -         FOR OPENLST, POLLING, NEGATIVE RESPONSE\n*                             TO POLLING RECEIVED.  FOR WRAPLST, ALL\n*                             ENTRIES ARE INACTIVE.  FOR ADDRESSING,\n*                             NEGATIVE RESPONSE TO ADDRESSING\n*                             RECEIVED.  FOR WTTA, LAST MESSAGE\n*                             RECEIVED ENDED WITH EOT OR TIME-OUT.\n*                             FOR 2741, POWER IS OFF OR OTHER\n*                             INTERVENTION REQUIRED CONDITION EXISTS.\nDECREVRS EQU   BIT6 -         FOR WTTA, MESSAGE ENDED WITH WRU SIGNAL.\n*                             FOR BSC STATIONS, REVERSE INTERRUPT (RVI)\n*                             SEQUENCE WAS RECEIVED (SEE ALSO BIT1).\n*                             FOR 2741, WRITE OPERATION WAS ENDED BY\n*                             TERMINAL INTERRUPT.\nDECSSMSG EQU   BIT6 -         A 3270 REMOTE SENSE/STATUS MESSAGE WAS\n*                             RECEIVED IF THIS BIT IS ONE AND BIT 1\n*                             IS ZERO                            ICB479\nDECSTXNQ EQU   BIT7 -         FOR WTTA, CONTENTION CONDITION WAS\n*                             ENCOUNTERED.  FOR BSC STATIONS, STX ENQ\n*                             SEQUENCE WAS RECEIVED.\nDECRLN   DS    FL1 -          RELATIVE LINE NUMBER\nDECRESPN DS    CL2 -          FOR BSC OPERATIONS, RESPONSE FROM A\n*                             TERMINAL TO ADDRESSING.  FOR STOP-START\n*                             OPERATIONS, BYTE 1 IS RESPONSE FROM A\n*                             TERMINAL TO ADDRESSING AND BYTE 2 IS\n*                             VERTICAL REDUNDANCY CHARACTER AND\n*                             LONGITUDINAL REDUNDANCY CHARACTER\n*                             (VRC/LRC) RESPONSE.\nDECTPCOD DS    C -            TP OPERATION CODE\nDECERRST DS    B -            I/O ERROR STATUS FLAGS\nDECSIO3  EQU   BIT0 -         SIO RESULTED IN A CONDITION CODE OF 3\nDECUNDEF EQU   BIT1 -         UNDEFINED ERROR CONDITION\nDECERPER EQU   BIT2 -         AN ERROR CONDITION OCCURRED DURING AN I/O\n*                             OPERATION INITIATED BY ERROR RECOVERY\n*                             ROUTINE\nDECDIAGN EQU   BIT3 -         DIAGNOSTIC WRITE/READ OPERATION ENDED\n*                             BECAUSE OF ERROR (2701 ONLY)\nDECDSABL EQU   BIT4 -         DISABLE COMMAND ISSUED TO SWITCHED LINE\n*                             BY ERROR RECOVERY ROUTINE BECAUSE OF\n*                             PERMANENT ERROR ON THAT LINE\nDECRSV53 EQU   BIT5,,C'X' -   RESERVED\nDECRSV54 EQU   BIT6,,C'X' -   RESERVED\nDECRSV55 EQU   BIT7,,C'X' -   RESERVED\nDECCSWST DS    BL2 -          STATUS BITS FROM CSW FOR LAST CCW\n*                             EXECUTED\nDECADRPT DS    A -            ADDRESS OF ADDRESSING LIST ENTRY USED IN\n*                             PREVIOUS OPERATION\nDECPOLPT DS    0A -           SAME AS DECPOLPA BELOW\nDECNDXPL DS    FL1 -          FOR AUTOPOLL, INDEX TO CURRENT ENTRY IN\n*                             POLLING LIST\nDECPOLPA DS    AL3 -          FOR PROGRAMMED POLLING, ADDRESS OF\n*                             CURRENT ENTRY IN POLLING LIST.  FOR\n*                             AUTOPOLL, ADDRESS OF POLLING LIST.  FOR\n*                             BSC ON-LINE TEST, ADDRESS OF TEXT DATA.\n         SPACE 1\n*              BSC EXTENSION\n*        FIELDS ARE PRESENT ONLY IF A SUBLIST IS CODED FOR THE\n*        AREA AND LENGTH OPERANDS OF THE READ OR WRITE MACRO\n*        INSTRUCTION THAT DEFINES THE DECB.\n         SPACE 1\nDECRSV56 DS    XL2 -          RESERVED\nDECWLNG  DS    H -            LENGTH, IN BYTES, OF DATA AREA IN\n*                             LEADING-GRAPHICS AND CONVERSATIONAL TYPE\n*                             OPERATIONS OR OF AREA CONTAINING TONE\n*                             CHARACTERS IN READ CONNECT WITH TONE\n*                             (TCW) OPERATIONS\nDECWAREA DS    A -            ADDRESS OF DATA AREA IN LEADING-GRAPHICS\n*                             AND CONVERSATIONAL OPERATIONS, OR OF AREA\n*                             CONTAINING TONE CHARACTERS IN READ TCW\n*                             OPERATIONS\n         MEND  , */\n*%DECBL2 :  ;\n*\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCK FOR BSAM                     */\n*/* **************************************************************** */\n*\n*DECLARE\n*  1 DECB     BASED(DECBPT) BDY(WORD),\n*   2 DECSDECB    CHAR(4) BDY(WORD),     /* EVENT CONTROL BLOCK      */\n*   2 DECBPTR     PTR(31),               /* FOR IBM 1419 MAGNETIC\n*                                           CHARACTER READER AND\n*                                           IBM 1275 OPTICAL READER\n*                                           SORTER, A POINTER TO\n*                                           NEXT DECB TO BE TESTED\n*                                           FOR COMPLETION BY THE\n*                                           CHECK MACRO INSTRUCTION  */\n*    3 DECTYPE     CHAR(2),              /* TYPE OF I/O REQUEST      */\n*     4 DECTYPE1    CHAR(1),             /* TYPE OF LENGTH OPERAND   */\n*      5 DECLNS   BIT(1),                /* S CODED FOR LENGTH       */\n*      5 DECRSV01 BIT(1),                /* RESERVED                 */\n*      5 DECRSV02 BIT(1),                /* RESERVED                 */\n*      5 DECRSV03 BIT(1),                /* RESERVED                 */\n*      5 DECRSV04 BIT(1),                /* RESERVED                 */\n*      5 DECRSV05 BIT(1),                /* RESERVED                 */\n*      5 DECRSV06 BIT(1),                /* RESERVED                 */\n*      5 DECRSV07 BIT(1),                /* RESERVED                 */\n*     4 DECTYPE2    CHAR(1),             /* TYPE OF OPERATION        */\n*      5 DECRDSF  BIT(1),                /* READ SF                  */\n*      5 DECRDSB  BIT(1),                /* READ SB                  */\n*      5 DECWRSF  BIT(1),                /* WRITE SF                 */\n*      5 DECWRSD  BIT(1),                /* WRITE SD                 */\n*      5 DECRSV08 BIT(1),                /* RESERVED                 */\n*      5 DECWRSZ  BIT(1),                /* WRITE SZ                 */\n*      5 DECRSV09 BIT(1),                /* RESERVED                 */\n*      5 DECWRSFR BIT(1),                /* WRITE SFR (BIT 2 IS ALSO\n*                                           ON)                      */\n*    3 DECLNGTH    FIXED(15),            /* LENGTH OF KEY AND DATA   */\n*   2 DECDCBAD    PTR(31),               /* ADDRESS OF DCB TO WHICH\n*                                           THIS I/O REQUEST  IS\n*                                           RELATED                  */\n*   2 DECAREA     PTR(31),               /* ADDRESS OF KEY AND DATA,\n*                                           OR FOR 1287 OR 1288\n*                                           OPTICAL READERS, ADDRESS\n*                                           OF A USER-SPECIFIED\n*                                           CHANNEL PROGRAM          */\n*   2 DECIOBPT    PTR(31),               /* ADDRESS OF IOB           */\n*   2 DECNEXT     PTR(31),               /* SAME AS DECNEXTA BELOW   */\n*    3 DECRSV10    CHAR(1),              /* RESERVED                 */\n*    3 DECNEXTA    PTR(24);              /* ADDRESS OF NEXT ADDRESS\n*                                           FEEDBACK FIELD.  PRESENT\n*                                           ONLY IF R IS CODED IN\n*                                           WRITE MACRO              */\n*\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCK FOR BISAM                    */\n*/* **************************************************************** */\n*\n*DECLARE 1  DECBS01\n*      BASED(DECBPT) BDY(WORD),\n*   2 DECBECB     CHAR(4)  BDY(WORD),    /* EVENT CONTROL BLOCK      */\n*    3 DECBRB      PTR(31),              /* SAME AS DECBRBA BELOW    */\n*     4 DECBECBF    CHAR(1),             /* FLAG FIELD               */\n*      5 DECBWAIT BIT(1),                /* AWAITING COMPLETION OF\n*                                           EVENT                    */\n*      5 DECBPOST BIT(1),                /* EVENT HAS COMPLETED      */\n*      5 DECRSV11 BIT(1),                /* RESERVED                 */\n*      5 DECRSV12 BIT(1),                /* RESERVED                 */\n*      5 DECRSV13 BIT(1),                /* RESERVED                 */\n*      5 DECRSV14 BIT(1),                /* RESERVED                 */\n*      5 DECRSV15 BIT(1),                /* RESERVED                 */\n*      5 DECRSV16 BIT(1),                /* RESERVED                 */\n*     4 DECBRBA     PTR(24),             /* ADDRESS OF RB FOR\n*                                           PROGRAM AWAITING EVENT\n*                                           (BEFORE EVENT\n*                                           COMPLETION) OR RESERVED\n*                                           (AFTER EVENT COMPLETION) */\n*   2 DECBTYP1    CHAR(1),               /* OPTION BYTE              */\n*    3 DECRSV17 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV18 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV19 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV20 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV21 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV22 BIT(1),                  /* RESERVED                 */\n*    3 DECBLNS  BIT(1),                  /* LENGTH CODED AS 'S'      */\n*    3 DECBARS  BIT(1),                  /* AREA CODED AS 'S'        */\n*   2 DECBTYP2    CHAR(1),               /* TYPE OF I/O REQUEST      */\n*    3 DECBRDK  BIT(1),                  /* READ K                   */\n*    3 DECRSV23 BIT(1),                  /* RESERVED                 */\n*    3 DECBRDKU BIT(1),                  /* READ KU                  */\n*    3 DECRSV24 BIT(1),                  /* RESERVED                 */\n*    3 DECBWRK  BIT(1),                  /* WRITE K                  */\n*    3 DECBWRKN BIT(1),                  /* WRITE KN                 */\n*    3 DECRSV25 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV26 BIT(1),                  /* RESERVED                 */\n*   2 DECBLGTH    FIXED(15),             /* NUMBER OF BYTES READ OR\n*                                           WRITTEN                  */\n*   2 DECBDCBA    PTR(31),               /* ADDRESS OF DATA CONTROL\n*                                           BLOCK                    */\n*   2 DECBAREA    PTR(31),               /* ADDRESS OF AREA IN\n*                                           STORAGE FOR RECORD       */\n*   2 DECBLOGR    PTR(31),               /* ADDRESS OF LOGICAL\n*                                           RECORD                   */\n*   2 DECBKEY     PTR(31),               /* ADDRESS OF KEY PORTION\n*                                           OF RECORD                */\n*   2 DECBEXC1    CHAR(1),               /* EXCEPTIONAL CONDITION\n*                                           CODE BYTE 1              */\n*    3 DECEXRNF BIT(1),                  /* RECORD NOT FOUND         */\n*    3 DECEXRLC BIT(1),                  /* RECORD LENGTH CHECK      */\n*    3 DECEXNSP BIT(1),                  /* SPACE NOT FOUND IN WHICH\n*                                           TO ADD A RECORD          */\n*    3 DECEXINV BIT(1),                  /* INVALID REQUEST          */\n*    3 DECEXERR BIT(1),                  /* UNCORRECTABLE I/O ERROR  */\n*    3 DECEXUBK BIT(1),                  /* UNREACHABLE BLOCK        */\n*    3 DECEXOFL BIT(1),                  /* OVERFLOW RECORD          */\n*    3 DECEXDUP BIT(1),                  /* DUPLICATE RECORD\n*                                           PRESENTED FOR INCLUSION\n*                                           IN DATA SET              */\n*   2 DECBEXC2    CHAR(1),               /* EXCEPTIONAL CONDITION\n*                                           CODE BYTE 2              */\n*    3 DECRSV27 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV28 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV29 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV30 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV31 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV32 BIT(1),                  /* RESERVED                 */\n*    3 DECEXASR BIT(1),                  /* EXECUTION OF LAST\n*                                           CHANNEL PROGRAM WAS\n*                                           INSTITUTED BY AN\n*                                           ASYNCHRONOUS ROUTINE     */\n*    3 DECEXRKU BIT(1);                  /* PREVIOUS MACRO\n*                                           INSTRUCTION WAS READ KU  */\n*\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCK FOR BDAM                     */\n*/* **************************************************************** */\n*\n*DECLARE 1  DECBS02\n*      BASED(DECBPT) BDY(WORD),\n*   2 *           CHAR(4)  BDY(WORD),    /* DECSDECB - EVENT CONTROL\n*                                           BLOCK                    */\n*    3 *           CHAR(1),              /* COMPLETION CODE BYTE 1   */\n*    3 DECCC2      CHAR(1),              /* COMPLETION CODE BYTE 2   */\n*     4 DECCCRNF BIT(1),                 /* RECORD NOT FOUND         */\n*     4 DECCCRLC BIT(1),                 /* RECORD LENGTH CHECK      */\n*     4 DECCCNSP BIT(1),                 /* SPACE NOT FOUND          */\n*     4 DECCCINV BIT(1),                 /* INVALID REQUEST          */\n*     4 DECCCERR BIT(1),                 /* UNCORRECTABLE I/O ERROR  */\n*     4 DECCCEOD BIT(1),                 /* END OF DATA              */\n*     4 DECCCUER BIT(1),                 /* UNCORRECTABLE ERROR\n*                                           OTHER THAN I/O ERROR     */\n*     4 DECCCREX BIT(1),                 /* A READ WITH EXCLUSIVE\n*                                           CONTROL WAS NOT PRECEDED\n*                                           BY A WRITE WITH\n*                                           EXCLUSIVE CONTROL        */\n*    3 DECCC3      CHAR(1),              /* COMPLETION CODE BYTE 3   */\n*     4 DECRSV33 BIT(1),                 /* RESERVED                 */\n*     4 DECCCWRI BIT(1),                 /* A WRITE MACRO INSTRUCTION\n*                                           WAS ADDRESSED TO AN INPUT\n*                                           DATA SET                 */\n*     4 DECCCEXS BIT(1),                 /* AN EXTENDED SEARCH WAS\n*                                           SPECIFIED WITH DCBLIMCT\n*                                           FIELD SET TO ZERO        */\n*     4 DECCCNBK BIT(1),                 /* BLOCK REQUESTED IS NOT\n*                                           WITHIN DATA SET          */\n*     4 DECCCWDI BIT(1),                 /* A WRITE-BY-IDENTIFICATION\n*                                           (DI) ADDRESSED RECORD\n*                                           ZERO                     */\n*     4 DECCCSDK BIT(1),                 /* A SEARCH-ON-KEY (DK) WAS\n*                                           SPECIFIED WITH DCBKEYLE\n*                                           FIELD SET TO ZERO OR\n*                                           WITHOUT AN ADDRESS FOR\n*                                           THE KEY                  */\n*     4 DECCCOPT BIT(1),                 /* A MACRO INSTRUCTION USED\n*                                           AN OPTION NOT SET IN\n*                                           THE DCB                  */\n*     4 DECCCKFF BIT(1),                 /* THE KEY FOR THE FIXED-\n*                                           LENGTH RECORD TO BE\n*                                           ADDED BEGINS WITH HEX FF */\n*    3 DECRSV34    CHAR(1),              /* RESERVED                 */\n*   2 *           CHAR(2),               /* DECTYPE - TYPE OF I/O\n*                                           REQUEST                  */\n*    3 *           CHAR(1),              /* DECTYPE1 - FIRST BYTE OF\n*                                           DECTYPE                  */\n*     4 DECVERFY BIT(1),                 /* VERIFY                   */\n*     4 DECOFLOW BIT(1),                 /* OVERFLOW                 */\n*     4 DECEXSRC BIT(1),                 /* EXTENDED SEARCH          */\n*     4 DECFDBCK BIT(1),                 /* FEEDBACK                 */\n*     4 DECACTAD BIT(1),                 /* ACTUAL ADDRESSING        */\n*     4 DECDYNBF BIT(1),                 /* DYNAMIC BUFFERING        */\n*     4 DECRDEX  BIT(1),                 /* READ EXCLUSIVE           */\n*     4 DECRELBA BIT(1),                 /* RELATIVE BLOCK ADDRESSING*/\n*    3 *           CHAR(1),              /* DECTYPE2 - SECOND BYTE\n*                                           OF DECTYPE               */\n*     4 DECKEYS  BIT(1),                 /* S CODED FOR KEY ADDRESS  */\n*     4 DECBKLNS BIT(1),                 /* S CODED FOR BLOCK LENGTH */\n*     4 DECTYPRU BIT(2),                 /* RU IS SUFFIXED TO THE\n*                                           TYPE, INDICATING THAT THE\n*                                           FEEDBACK ADDRESS POINTED\n*                                           TO BY DECNXADR CAN BE\n*                                           ADDRESS OF EITHER NEXT\n*                                           DATA RECORD OR NEXT\n*                                           CAPACITY RECORD,\n*                                           WHICHEVER OCCURS FIRST   */\n*      5 DECTYPU  BIT(1),                /* OFF IF R IS SUFFIXED,\n*                                           ONE IF RU IS SUFFIXED    */\n*      5 DECTYPR  BIT(1),                /* R IS SUFFIXED TO THE\n*                                           TYPE, INDICATING THAT\n*                                           THE FEEDBACK ADDRESS\n*                                           POINTED TO BY DECNXADR\n*                                           IS ADDRESS OF NEXT DATA\n*                                           RECORD  (BIT 2 IS ZERO)  */\n*     4 DECOPRD  BIT(1),                 /* TYPE OF OPERATION - 0 IS\n*                                           WRITE, 1 IS READ         */\n*     4 DECSRKEY BIT(1),                 /* TYPE OF SEARCH ARGUMENT\n*                                           - 0 IS ID ,  1 IS KEY    */\n*     4 DECWRADD BIT(1),                 /* ADD OPTION OF WRITE\n*                                           OPERATION                */\n*     4 DECRSV35 BIT(1),                 /* RESERVED                 */\n*   2 *           FIXED(15),             /* DECLNGTH - LENGTH OF\n*                                           DATA                     */\n*   2 *           PTR(31),               /* DECDCBAD - ADDRESS OF\n*                                           DCB TO WHICH THIS I/O\n*                                           REQUEST IS RELATED       */\n*   2 *           PTR(31),               /* DECAREA - ADDRESS OF\n*                                           DATA                     */\n*   2 *           PTR(31),               /* DECIOBPT - ADDRESS OF\n*                                           IOB                      */\n*   2 DECKYADR    PTR(31),               /* ADDRESS OF KEY           */\n*   2 DECRECPT    PTR(31),               /* ADDRESS OF BLOCK\n*                                           REFERENCE FIELD          */\n*   2 DECNA       PTR(31),               /* SAME AS DECNAA BELOW     */\n*    3 DECRSV36    CHAR(1),              /* RESERVED                 */\n*    3 DECNAA      PTR(24);              /* ADDRESS OF NEXT ADDRESS\n*                                           FEEDBACK FIELD.  PRESENT\n*                                           ONLY IF R OR RU IS CODED\n*                                           IN READ MACRO.           */\n*\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCK FOR QTAM                     */\n*/* **************************************************************** */\n*\n*DECLARE 1  DECBS03\n*      BASED(DECBPT) BDY(WORD),\n*   2 LINEDECB    CHAR(4) BDY(WORD),     /* ALWAYS ZERO              */\n*   2 DECRSV37    CHAR(1),               /* RESERVED                 */\n*   2 DECOPCOD    CHAR(1),               /* OPERATION CODE FOR\n*                                           CURRENT SEGMENT          */\n*   2 *           FIXED(15),             /* DECLNGTH - LENGTH OF\n*                                           INPUT AREA FOR INITIAL\n*                                           READ                     */\n*   2 *           PTR(31),               /* DECDCBAD - ADDRESS OF\n*                                           DCB                      */\n*   2 *           PTR(31),               /* DECAREA - STARTING\n*                                           ADDRESS FOR DATA IN A\n*                                           BUFFER                   */\n*   2 DECRSV38    CHAR(4) BDY(WORD),     /* RESERVED                 */\n*   2 DECCPOL     PTR(31),               /* SAME AS DECCPOLA BELOW   */\n*    3 DECNMMSG    PTR(8),               /* NUMBER OF MESSAGES\n*                                           RECEIVED                 */\n*    3 DECCPOLA    PTR(24),              /* ADDRESS OF CURRENTLY\n*                                           ACTIVE ENTRY IN POLLING\n*                                           LIST                     */\n*   2 DECRSV39    CHAR(1),               /* RESERVED                 */\n*   2 DECUCBDX    PTR(8),                /* INDEX TO UCB ADDRESS IN\n*                                           DEB                      */\n*   2 DECRSV40    CHAR(2) BDY(WORD,3),   /* RESERVED                 */\n*   2 DECRSV41    CHAR(4) BDY(WORD),     /* RESERVED                 */\n*   2 DECADRCH    PTR(31),               /* ADDRESS OF ADDRESSING\n*                                           CHARACTERS IN TERMINAL\n*                                           ENTRY                    */\n*   2 *           PTR(31),               /* DECPOLPT - ADDRESS OF\n*                                           POLLING LIST             */\n*    3 DECRSV42    CHAR(1),              /* RESERVED                 */\n*    3 *           PTR(24);              /* DECPOLPA - ADDRESS OF\n*                                           POLLING LIST             */\n*\n*\n*/* **************************************************************** */\n*/*            DATA EVENT CONTROL BLOCK FOR BTAM                     */\n*/* **************************************************************** */\n*\n*DECLARE 1  DECBS04\n*      BASED(DECBPT) BDY(WORD),\n*   2 *           CHAR(4) BDY(WORD),     /* DECSDECB - EVENT CONTROL\n*                                           BLOCK                    */\n*   2 *           CHAR(2),               /* DECTYPE - PROGRAMMING\n*                                           INDICATORS               */\n*    3 *           CHAR(1),              /* DECTYPE1 - FIRST BYTE OF\n*                                           DECTYPE                  */\n*     4 DECRDAPL BIT(1),                 /* READ, USING AUTOPOLL     */\n*     4 DECRSV43 BIT(1),                 /* RESERVED                 */\n*     4 DECRSV44 BIT(1),                 /* RESERVED                 */\n*     4 DECRSV45 BIT(1),                 /* RESERVED                 */\n*     4 DECRSV46 BIT(1),                 /* RESERVED                 */\n*     4 DECSTRME BIT(1),                 /* 'S' CODED FOR TERMINAL\n*                                           ENTRY                    */\n*     4 DECSAREA BIT(1),                 /* 'S' CODED FOR AREA       */\n*     4 DECSLNTH BIT(1),                 /* 'S' CODED FOR LENGTH     */\n*    3 *           CHAR(1),              /* DECTYPE2 - OPERATION\n*                                           CODE                     */\n*   2 *           FIXED(15),             /* DECLNGTH - LENGTH OF\n*                                           BUFFER OR MESSAGE AREA   */\n*   2 *           PTR(31),               /* DECDCBAD - ADDRESS OF\n*                                           ASSOCIATED DCB           */\n*    3 DECBUFCT    PTR(8),               /* CONTAINS A RUNNING COUNT\n*                                           OF BUFFERS OBTAINED BY\n*                                           BTAM FOR CURRENT READ\n*                                           OPERATION.  (DYNAMIC\n*                                           BUFFERING ONLY.)  USE\n*                                           DIFFERS DURING BSC AND\n*                                           2760 ON LINE TEST.       */\n*     4 DECONLTT    CHAR(1),             /* FLAG BYTE FOR BSC AND\n*                                           2760 ONLINE TEST         */\n*      5 DECONLTS BIT(1),                /* IF ZERO, ONLINE TEST\n*                                           REQUESTED BY RFT MESSAGE\n*                                           (BSC).  IF ONE, ONLINE\n*                                           TEST INITIATED BY ONLTST\n*                                           MACRO INSTRUCTION (BSC). */\n*      5 DECRCVMS BIT(1),                /* IF ZERO, SENDING TEST\n*                                           MESSAGES (BSC).  IF ONE,\n*                                           RECEIVING TEST MESSAGES\n*                                           (BSC) OR TYPE 11 ONLINE\n*                                           TEST FOR 2760 OPTICAL\n*                                           IMAGE UNIT.              */\n*      5 DECRSV47 BIT(1),                /* RESERVED                 */\n*      5 DECRSV48 BIT(1),                /* RESERVED                 */\n*      5 DECRSV49 BIT(1),                /* RESERVED                 */\n*      5 DECRSV50 BIT(1),                /* RESERVED                 */\n*      5 DECRSV51 BIT(1),                /* RESERVED                 */\n*      5 DECRSV52 BIT(1),                /* RESERVED                 */\n*    3 DECDCBAA    PTR(24),              /* ADDRESS OF ASSOCIATED\n*                                           DCB                      */\n*   2 *           PTR(31),               /* DECAREA - ADDRESS OF\n*                                           BUFFER OR MESSAGE AREA   */\n*   2 DECSENS0    CHAR(1),               /* SENSE INFORMATION        */\n*   2 DECSENS1    CHAR(1),               /* RESERVED                 */\n*   2 DECCOUNT    FIXED(15),             /* RESIDUAL COUNT FROM CSW\n*                                           FOR LAST CCW EXECUTED    */\n*   2 DECENTRY    PTR(31),               /* ADDRESS OF TERMINAL LIST */\n*    3 DECCMCOD    CHAR(1),              /* COMMAND FOR WHICH ERROR\n*                                           OCCURRED                 */\n*    3 DECENTRA    PTR(24),              /* ADDRESS OF TERMINAL LIST */\n*   2 DECFLAGS    CHAR(1),               /* OPERATION STATUS         */\n*    3 DECWACK  BIT(2),                  /* WACK WAS RECEIVED (BSC)  */\n*     4 DECERRMS BIT(1),                 /* ERROR STATUS MESSAGE WAS\n*                                           RECEIVED (BSC).  BIT1 IS\n*                                           OFF.                     */\n*     4 DECDIFAC BIT(1),                 /* ACKNOWLEDGMENT OTHER\n*                                           THAN ACK-0 OR ACK-1\n*                                           RECEIVED (BSC)           */\n*    3 DECALTAC BIT(1),                  /* ACKNOWLEDGMENT\n*                                           ALTERNATION INCORRECT    */\n*    3 DECBADID BIT(1),                  /* FOR TWX 33/35 STATION\n*                                           AND BSC STATION,\n*                                           INCORRECT ID RECEIVED.\n*                                           FOR AUTOPOLL, INDEX\n*                                           BYTE RECEIVED DOES NOT\n*                                           MATCH AN ACTIVE ONE.\n*                                           FOR BSC NONSWITCHED\n*                                           POINT-TO-POINT LINE,\n*                                           CONTENTION OCCURRED. FOR\n*                                           WTTA, CONTENTION\n*                                           OCCURRED OR INCORRECT\n*                                           ID RECEIVED.             */\n*    3 DECNOBUF BIT(1),                  /* FOR READ, DYNAMIC\n*                                           BUFFERING, NO BUFFER\n*                                           WAS AVAILABLE. (MESSAGE\n*                                           LOST)                    */\n*    3 DECNEGRP BIT(1),                  /* FOR OPENLST, POLLING,\n*                                           NEGATIVE RESPONSE TO\n*                                           POLLING RECEIVED.  FOR\n*                                           WRAPLST, ALL ENTRIES\n*                                           ARE INACTIVE.  FOR\n*                                           ADDRESSING, NEGATIVE\n*                                           RESPONSE TO ADDRESSING\n*                                           RECEIVED.  FOR WTTA, LAST\n*                                           MESSAGE RECEIVED ENDED\n*                                           WITH EOT OR TIME-OUT.\n*                                           FOR 2741, POWER IS OFF\n*                                           OR OTHER INTERVENTION\n*                                           REQUIRED CONDITION\n*                                           EXISTS.                  */\n*    3 DECREVRS BIT(1),                  /* FOR WTTA, MESSAGE ENDED\n*                                           WITH WRU SIGNAL.  FOR\n*                                           BSC STATIONS, REVERSE\n*                                           INTERRUPT (RVI) SEQUENCE\n*                                           WAS RECEIVED (SEE ALSO\n*                                           BIT 1).  FOR 2741, WRITE\n*                                           OPERATION WAS ENDED BY\n*                                           TERMINAL INTERRUPT.      */\n*     4 DECSSMSG BIT(1),                 /* A 3270 REMOTE SENSE/STATUS\n*                                           MESSAGE WAS RECEIVED IF\n*                                           THIS BIT IS ONE AND BIT 1\n*                                           IS ZERO            ICB479*/\n*    3 DECSTXNQ BIT(1),                  /* FOR WTTA, CONTENTION\n*                                           CONDITION WAS\n*                                           ENCOUNTERED.  FOR BSC\n*                                           STATIONS, STX ENQ\n*                                           SEQUENCE WAS RECEIVED.   */\n*   2 DECRLN      PTR(8),                /* RELATIVE LINE NUMBER     */\n*   2 DECRESPN    CHAR(2),               /* FOR BSC OPERATIONS,\n*                                           RESPONSE FROM A\n*                                           TERMINAL TO ADDRESSING.\n*                                           FOR STOP-START\n*                                           OPERATIONS, BYTE 1 IS\n*                                           RESPONSE FROM A\n*                                           TERMINAL TO ADDRESSING\n*                                           AND BYTE 2 IS VERTICAL\n*                                           REDUNDANCY CHARACTER AND\n*                                           LONGITUDINAL REDUNDANCY\n*                                           CHARACTER  (VRC/LRC)\n*                                           RESPONSE.                */\n*   2 DECTPCOD    CHAR(1),               /* TP OPERATION CODE        */\n*   2 DECERRST    CHAR(1),               /* I/O ERROR STATUS FLAGS   */\n*    3 DECSIO3  BIT(1),                  /* SIO RESULTED IN A\n*                                           CONDITION CODE OF 3      */\n*    3 DECUNDEF BIT(1),                  /* UNDEFINED ERROR\n*                                           CONDITION                */\n*    3 DECERPER BIT(1),                  /* AN ERROR CONDITION\n*                                           OCCURRED DURING AN I/O\n*                                           OPERATION INITIATED BY\n*                                           ERROR RECOVERY ROUTINE   */\n*    3 DECDIAGN BIT(1),                  /* DIAGNOSTIC WRITE/READ\n*                                           OPERATION ENDED BECAUSE\n*                                           OF ERROR (2701 ONLY)     */\n*    3 DECDSABL BIT(1),                  /* DISABLE COMMAND ISSUED\n*                                           TO SWITCHED LINE BY\n*                                           ERROR RECOVERY ROUTINE\n*                                           BECAUSE OF PERMANENT\n*                                           ERROR ON THAT LINE       */\n*    3 DECRSV53 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV54 BIT(1),                  /* RESERVED                 */\n*    3 DECRSV55 BIT(1),                  /* RESERVED                 */\n*   2 DECCSWST    CHAR(2),               /* STATUS BITS FROM CSW FOR\n*                                           LAST CCW EXECUTED        */\n*   2 DECADRPT    PTR(31),               /* ADDRESS OF ADDRESSING\n*                                           LIST ENTRY USED IN\n*                                           PREVIOUS OPERATION       */\n*   2 DECPOLPT    PTR(31),               /* SAME AS DECPOLPA BELOW   */\n*    3 DECNDXPL    PTR(8),               /* FOR AUTOPOLL, INDEX TO\n*                                           CURRENT ENTRY IN\n*                                           POLLING LIST             */\n*    3 DECPOLPA    PTR(24),              /* FOR PROGRAMMED POLLING,\n*                                           ADDRESS OF CURRENT\n*                                           ENTRY IN POLLING LIST.\n*                                           FOR AUTOPOLL, ADDRESS\n*                                           OF POLLING LIST.  FOR\n*                                           BSC ON-LINE TEST,\n*                                           ADDRESS OF TEXT DATA.    */\n*\n*/*            BSC EXTENSION                                         */\n*/*      FIELDS ARE PRESENT ONLY IF A SUBLIST IS CODED FOR THE       */\n*/*      AREA AND LENGTH OPERANDS OF THE READ OR WRITE MACRO         */\n*/*      INSTRUCTION THAT DEFINES THE DECB.                          */\n*\n*   2 DECRSV56    CHAR(2),               /* RESERVED                 */\n*   2 DECWLNG     FIXED(15),             /* LENGTH, IN BYTES, OF\n*                                           DATA AREA IN\n*                                           LEADING-GRAPHICS AND\n*                                           CONVERSATIONAL TYPE\n*                                           OPERATIONS OR OF AREA\n*                                           CONTAINING TONE\n*                                           CHARACTERS IN READ\n*                                           CONNECT WITH TONE (TCW)\n*                                           OPERATIONS               */\n*   2 DECWAREA    PTR(31);               /* ADDRESS OF DATA AREA IN\n*                                           LEADING-GRAPHICS AND\n*                                           CONVERSATIONAL\n*                                           OPERATIONS, OR OF AREA\n*                                           CONTAINING TONE\n*                                           CHARACTERS IN READ TCW\n*                                           OPERATIONS               */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHASTOW": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x966\\x1f\\x00\\x966\\x1f\\x17\\x04\\x00^\\x00^\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf2\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-26T00:00:00", "modifydate": "1996-12-26T17:04:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "FILE427"}, "text": "*  %GOTO STOL1;\n         MACRO\n         IHASTOW &DSECT=YES\n.* /* START OF SPECIFICATIONS ****\n.*\n.*01  MODULE-NAME = IHASTOW\n.*\n.*01  COPYRIGHT = NONE\n.*\n.*01  STATUS = VS2 RELEASE 2 LEVEL 0\n.*\n.*01  DESCRIPTIVE-NAME = STOW INPUT PARAMETER LIST\n.*\n.*01  FUNCTION = MAPS THE PARAMETER LIST SUPPLIED TO THE STOW MACRO\n.*               BY THE CALLER.\n.*\n.*01  MODULE-TYPE = MACRO\n.*\n.*02    MACRO-SIZE = N/A FOR A MAPPING MACRO\n.*\n.*02    PARAMETER-RECEIVED = DSECT\n.*\n.*03      TYPE = CHARACTER STRING\n.*\n.*04        VALUE = YES OR NO\n.*\n.*01  TABLES = NONE\n.*\n.*01  INNER-MACROS = NONE\n.*\n.*01  SYSTEM-MACROS = NONE\n.*\n.*01  CHANGE-ACTIVITY = SEE BELOW\n.*    VS2 RELEASE 2 DELETIONS\n.*\n.**** END OF SPECIFICATIONS ***/\n.*/*\n.*/ %STOL1: ;\n* /* MACCOMP Y-2 SC1D2/SJD48                                         */\n* /* MACSTAT Y-2 73226/021160                                        */\n*/********************************************************************/\n*/*                                                                  */\n*/*      THIS MACRO MAPS THE PARAMETER LIST SUPPLIED TO THE STOW     */\n*/*      MACRO BY THE CALLER.                                        */\n*/*                                                                  */\n*/*      VS2 RELEASE 2, 8/14/73, LEVEL=0                             */\n*/*                                                                  */\n*/*      METHOD OF ACCESS                                            */\n*/*        BAL  - A USING ON THE DSECT NAME 'STOW' ESTABLISHES       */\n*/*               ADDRESSABILITY TO ALL SYMBOLS.                     */\n*/*        PL/S - DEFINE A BASE FOR THE STRUCTURE BEFORE REFERENCING */\n*/*               ANY SYMBOLS WITHIN IT.                             */\n*/*                                                                  */\n*/********************************************************************/\n* %; /*\n.*/ %GOTO STOL2;  /*\n         AIF   ('&DSECT' EQ 'NO').STONOD\nSTOW     DSECT\n         AGO   .STOL3\n.STONOD  ANOP\nSTOW     EQU   *\n.STOL3   ANOP\n*\nSTONAME  DS    CL8                      NEW NAME FOR ADD.  OLD NAME FOR\n*                                       DELETE, CHANGE, OR REPLACE.\nSTOCHANG DS    0CL8                     NEW NAME FOR CHANGE\nSTOTTR   DS    XL3                      RELATIVE ADDRESS OF MEMBER\nSTOCTTRN DS    B                        ALIAS BIT, NUMBER OF TTRN'S,\n*                                       AND LENGTH OF USER DATA\nSTOALIAS EQU   X'80'                    MEMBER IS AN ALIAS NAME\nSTOTTRNS EQU   X'60'                    NUMBER OF TTRN'S IN THE USER\n*                                       DATA AREA.\nSTODATSZ EQU   X'1F'                    SIZE OF USER DATA AREA IN\n*                                       HALF WORDS.\nSTODATA  DS    CL62                     USER DATA AREA\nSTOLNGMV EQU   L'STOCHANG+L'STOTTR+L'STOCTTRN  LENGTH OF FIELDS SAVED\n*                                       FOR CHANGE OPERATIONS\n         MEND ,  */\n* %STOL2: ;\n*\n*DCL 1 STOW BASED,\n*      2 STONAME  CHAR(8),              /* NEW NAME FOR ADD.  OLD NAME\n*                                       FOR DELETE, CHANGE, REPLACE. */\n*      2 STOCHANG CHAR(8),              /* NEW NAME FOR CHANGE       */\n*        3 STOTTR   FIXED(24) BDY(BYTE), /* RELATIVE ADDR OF MEMBER  */\n*        3 STOCTTRN FIXED(8),           /* ALIAS BIT, NUMBER OF TTRN'S,\n*                                       AND LENGTH OF USER DATA.     */\n*          4 STODATSZ FIXED(8),         /* SIZE OF USER DATA AREA IN\n*                                       HALF WORDS (BITS 3 - 7).     */\n*          %STOCLRHI = '''00011111''B';\n*            5 STOALIAS BIT(1),         /* MEMBER IS AN ALIAS NAME   */\n*            5 STOTTRNS BIT(2),         /* NUMBER OF TTRN'S IN THE\n*                                       USER DATA AREA.              */\n*        3 STODATA  CHAR(62);           /* USER DATA AREA            */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADLIB": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x16\\x19\\x7f\\x01\\x16\\x19\\x7f\\x18X\\x010\\x010\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-07-15T00:00:00", "modifydate": "2016-07-15T18:58:25", "lines": 304, "newlines": 304, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PHRANQU$": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x002\\x01\\x16\\x19\\x7f\\x01\\x16\\x19\\x7f\\x17\\x08\\x00 \\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-07-15T00:00:00", "modifydate": "2016-07-15T17:08:32", "lines": 32, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=CBT.CBT491.FILE289.PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PHRANQUE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//LINKLIB  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n INCLUDE LINKLIB(IEFSD095)\n ORDER   PHRANQUE,PHRA0001,PHRA0002,PHRA0003,IEFSD095\n SETSSI  CB492289\n SETCODE AC(1)\n ENTRY   PHRANQUE\n NAME    PHRANQUX(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHRANQUE": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x966\\x1f\\x00\\x966\\x1f\\x16S\\x07\\xa5\\x07\\xa5\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-26T00:00:00", "modifydate": "1996-12-26T16:53:00", "lines": 1957, "newlines": 1957, "modlines": 0, "user": "SOURCE"}, "text": "*          DATA SET CBT1089    AT LEVEL 006 AS OF 10/22/80\n*PROGRAM DESCRIPTION:                                                   00001\n*                                                                       00002\n*       EXTERNAL REQUIREMENTS: IEFSD095                                 00003\n*                     LIBRARY: SYS1.AOSB0                               00004\n*                                                                       00005\n*       SYS1.APVTMACS IS A REQUIRED MACRO LIBRARY.                      00006\n*             (TO ACCESS MACROS IHADECB AND IHASTOW)                    00007\n*                                                                       00008\n*       TO USE THE FACILITIES OF THE BLOCK AND HEADER                   00009\n*       KEYWORDS, MODULE IEFSD095 MUST BE INCLUDED FROM                 00010\n*       SYS1.AOSB0 AT LINK EDIT.                                        00011\n*                                                                       00012\n*       PHRANQUE IS A PTF UTILITY PRIMARILY INTENDED TO PROVIDE         00013\n*       A CONVENIENT MEANS OF CREATING COVER LETTERS FROM THE PTF       00014\n*       FILE OF A PUT TAPE. ADDITIONAL FEATURES ASSOCIATED WITH         00015\n*       COVER LETTER PROCESSING, INTENDED TO ENHANCE ITS                00016\n*       USABILITY, MAY BE REQUESTED VIA THE CONTROL DATASET.            00017\n*       THESE FEATURES ARE:                                             00018\n*                                                                       00019\n*             BLOCK PRINT THE PTF NUMBER BEFORE EACH COVER LETTER       00020\n*             TO MAKE MICROFICHE COPIES EASIER TO SCAN. (BLOCK)         00021\n*                                                                       00022\n*             START EACH COVER LETTER ON A NEW PAGE. (EJECT)            00023\n*                                                                       00024\n*             CHANGE THE PAGE SIZE. (LINES)                             00025\n*                                                                       00026\n*             PROVIDE A LIST OF PTF'S CONTAINED IN THE                  00027\n*             COVER LETTER LISTING. (PTFLIST)                           00028\n*                                                                       00029\n*             PROVIDE A CROSS REFERENCE LIST INDICATING                 00030\n*             WHICH PTF'S WILL HIT EACH ELEMENT. (XREF)                 00031\n*                                                                       00032\n*             PROVIDE A CROSS REFERENCE OF WHICH PTF'S APPLY            00033\n*             TO EACH FUNCTION. (FMIDLIST)                              00034\n*                                                                       00035\n*             LIST THE COVER LETTERS IN ASSENDING ORDER BY              00036\n*             PTF NUMBER. (SORT)                                        00037\n*                                                                       00038\n*       OTHER FUNCTIONS AVAILABLE ARE:                                  00039\n*                                                                       00040\n*             CONTROL OVER WHICH PTF'S ARE TO BE PROCESSED.             00041\n*             IT IS POSSIBLE TO PROCESS ONLY SPECIFIED                  00042\n*             PTF'S (INCLUDE) OR TO PROCESS ALL EXCEPT A                00043\n*             LIST OF SPECIFIED PTF'S (EXCLUDE).                        00044\n*                                                                       00045\n*             OMIT TEXT ELEMENT IF A SOURCE UPDATE ELEMENT              00046\n*             WITH THE SAME ELEMENT NAME EXISTS WITHIN A                00047\n*             PTF. (NOMOD)                                              00048\n*                                                                       00049\n*             PRODUCE A COPY OF THE PROCESSED PTF'S AS                  00050\n*             SPECIFIED IN THE CONTROL DATASET.                         00051\n*             (IF SORT WAS SPECIFIED, THE COPIED PTF'S                  00052\n*             WILL BE SORTED; IF NOMOD WAS SPECIFIED,                   00053\n*             COPIED PTF'S WILL NOT CONTAIN TEXT ELEMENTS               00054\n*             FOR WHICH A SOURCE UPDATE EXISTS; AND THE                 00055\n*             CONTENTS OF THE COPIED OUTPUT WILL BE TAILORED            00056\n*             AS SPECIFIED BY ANY INCLUDE OR EXCLUDE LIST               00057\n*             PROVIDED)                                                 00058\n*                                                                       00059\n*             MERGE THE PTF'S SELECTED FROM THE PTFIN DATASET           00060\n*             INTO AN EXISTING DATASET AS SPECIFIED BY PTFOUT,          00061\n*             REPLACE DUPLICATE PTF'S WITH THE LAST COPY EXISTING       00062\n*             ON PTFOUT OR WITH A COPY FROM PTFIN IF ONE EXISTS,        00063\n*             AND CREATE A COVER LETTER LISTING WHICH REFLECTS          00064\n*             THE NEW CONTENTS OF THE PTFOUT DATASET. THIS              00065\n*             FUNCTION IS AUTOMATICALLY INVOKED WHEN SORT IS            00066\n*             REQUESTED AND A PTFOUT DD STATEMENT IS INCLUDED           00067\n*             WHICH DOES NOT SPECIFY A DISPOSITION OF NEW OR            00068\n*             MOD. THE OPTION TO UNCONDITIONALLY BYPASS THE             00069\n*             MERGE FUNCTION IS AVAILABLE. (NOMERGE) TO AVOID           00070\n*             ACCIDENTAL LOSS OF DATA, IF NOMERGE IS SPECIFIED          00071\n*             OR IF SORT IS NOT SPECIFIED, A DISPOSITION OF             00072\n*             OLD (FOR PTFOUT) WILL BE AUTOMATICALLY CHANGED            00073\n*             TO A DISPOSITION OF MOD.                                  00074\n         EJECT                                                          00075\n*             PHRANQUE WILL ALSO SEPERATE NON-SMP DATA FROM             00076\n*             SMP FORMAT DATA IF THE PTFIN DATASET IS                   00077\n*             ARRANGED SUCH THAT ALL OF THE NON-SMP DATA                00078\n*             IS BEFORE THE SMP FORMAT DATA. (THIS FUNCTION             00079\n*             WILL, FOR EXAMPLE, SEPERATE PUTDOC FROM PTF'S             00080\n*             OBTAINED IN THE SAME DLS RUN. IT IS NECESSARY TO          00081\n*             SPECIFY THAT THE PUTDOC MUST BE TRANSFERRED               00082\n*             FIRST.) AS PTFIN IS READ, ALL STATEMENTS PRIOR            00083\n*             TO THE FIRST ++ SYSMOD HEADER WILL BE WRITTEN             00084\n*             TO THE SYSPUNCH DATASET. THE FIRST ++ SYSMOD              00085\n*             HEADER STATEMENT INDICATES THE BEGINNING OF               00086\n*             SMP FORMAT DATA AND ALL SUBSEQUENT STATEMENTS             00087\n*             ARE CONSIDERED PTF'S.                                     00088\n         EJECT                                                          00089\n*DD STATEMENTS:                                                         00090\n*                                                                       00091\n*       SYSIN    =>CONTROL DATASET. SEE KEYWORD PARAMETERS.             00092\n*                  LRECL=80,BLKSIZE MUST BE SPECIFIED.IF SYSIN          00093\n*                  IS OMITTED OR SPECIFIED AS DUMMY, PROCESSING         00094\n*                  WILL CONSIST OF TOTALLY COPYING THE CONTENTS         00095\n*                  OF THE PTFIN DATASET, STARTING WITH THE FIRST        00096\n*                  ++ SYSMOD HEADER STATEMENT, TO THE PTFOUT            00097\n*                  DATASET (IF A PTFOUT DD STATEMENT EXISTS),           00098\n*                  ALL RECORDS READ FROM THE PTFIN DATASET PRIOR        00099\n*                  TO THE FIRST ++ SYSMOD HEADER STATEMENT WILL         00100\n*                  BE COPIED TO THE SYSPUNCH DATASET (IF A              00101\n*                  SYSPUNCH DD STATEMENT EXISTS) AND COVER              00102\n*                  LETTER INFORMATION WILL BE WRITTEN TO THE            00103\n*                  PTFDATA DATASET. DSORG=PS.                           00104\n*                                                                       00105\n*       PTFDATA  =>OUTPUT DATASET CONTAINING PTF COVER LETTERS,         00106\n*                  AND ALL REQUESTED LISTS. IF A SORT WAS REQUESTED     00107\n*                  AND A SYSUT2 DATASET WAS PROVIDED, THE PTFLIST       00108\n*                  AND XREF (IF REQUESTED) WILL BE FIRST, FOLLOWED      00109\n*                  BY THE PTF COVER LETTERS IN ASSENDING SEQUENCE       00110\n*                  BY PTF NUMBER, WITH THE FMIDLIST (IF REQUESTED)      00111\n*                  LAST. IF A SORT WAS NOT REQUESTED, THE PTF           00112\n*                  COVER LETTERS WILL OCCUR FIRST, ARRANGED IN          00113\n*                  THE SAME ORDER AS THE EXIST ON THE PTFIN             00114\n*                  DATASET, FOLLOWED BY THE LISTS (AS REQUESTED).       00115\n*                  LRECL IS 121 WITH MACHINE PRINT CONTROL              00116\n*                  CHARACTERS. BLKSIZE MUST BE SPECIFIED AS             00117\n*                  A MULTIPLE OF 121 (BUT NOT 121). THIS                00118\n*                  STATEMENT IS REQUIRED. DSORG=PS                      00119\n*                                                                       00120\n*       PTFIN    =>INPUT DATASET CONTAINING PTF'S FOR                   00121\n*                  PROCESSING. LRECL IS 80. RECFM AND BLKSIZE           00122\n*                  MUST BE SPECIFIED. THIS STATEMENT IS                 00123\n*                  REQUIRED. DSORG=PS                                   00124\n*                                                                       00125\n*       PTFOUT   =>OUTPUT DATASET CONTAINING PTF'S COPIED               00126\n*                  FROM PTFIN. FURTHER INFORMATION REGUARDING           00127\n*                  THIS DATASET MAY BE FOUND IN THE PROGRAM             00128\n*                  DESCRIPTION. THIS STATEMENT IS OPTIONAL              00129\n*                  AND IF OMITTED, PROCESSING IS THE SAME               00130\n*                  AS SPECIFING DUMMY. LRECL IS 80. BLKSIZE             00131\n*                  MUST BE SPECIFIED AS 80 OR A MULTIPLE                00132\n*                  OF 80. DSORG=PS                                      00133\n*                                                                       00134\n*       SYSUT1   =>OPTIONAL SEQUENTIAL WORK DATASET REQUIRED TO         00135\n*                  PERFORM THE NOMOD FUNCTION. SEE THE PROGRAM          00136\n*                  DESCRIPTION AND NOMOD KEYWORD DESCRIPTION            00137\n*                  FOR MORE INFORMATION.                                00138\n*                                                                       00139\n*       SYSUT2   =>OPTIONAL PARTITIONED WORK DATASET REQUIRED           00140\n*                  TO PERFORM THE SORT FUNCTION. SEE THE                00141\n*                  PROGRAM DESCRIPTION FOR MORE INFORMATION.            00142\n*                                                                       00143\n*       SYSPRINT =>PRINT DATASET FOR MESSAGES.LRECL AND                 00144\n*                  BLKSIZE ARE 121, WITH MACHINE PRINT                  00145\n*                  CONTROL CHARACTERS. THIS STATEMENT IS                00146\n*                  REQUIRED. DSORG=PS                                   00147\n*                                                                       00148\n*       SYSPUNCH =>OUTPUT DATASET WHICH WILL CONTAIN ALL                00149\n*                  RECORDS READ FROM PTFIN PRIOR TO THE FIRST           00150\n*                  ++ SYSMOD HEADER STATEMENT. THIS STATEMENT           00151\n*                  IS OPTIONAL. IF IT IS OMITTED, PROCESSING            00152\n*                  IS THE SAME AS SPECIFING DUMMY. DSORG=PS             00153\n         EJECT                                                          00154\n*KEYWORD PARAMETERS:                                                    00155\n*                                                                       00156\n*       THE FORMAT OF THE CONTROL STATEMENTS IS FREE FORM. EACH         00157\n*       KEYWORD MAY BE LOCATED ANYWHERE IN COLUMNS 1 THROUGH 72         00158\n*       (COLUMNS 73 THROUGH 80 ARE IGNORED). AN ASTERISK IN             00159\n*       COLUMN 1 INDICATES A COMMENT AND THAT STATEMENT IS              00160\n*       IGNORED. WHEN A KEYWORD HAS SYNTAX CONSIDERATIONS,              00161\n*       THESE ARE OUTLINED IN THE ASSOCIATED KEYWORD                    00162\n*       DESCRIPTION.                                                    00163\n*                                                                       00164\n*       THE FOLLOWING PARAMETERS MAY BE SPECIFIED IN THE                00165\n*       CONTROL DATASET OR AS PARAMETERS ON THE EXECUTE                 00166\n*       STATEMENT OR A COMBINATION. NOTE: EACH KEYWORD                  00167\n*       MAY BE SPECIFIED ONLY ONCE.                                     00168\n*                                                                       00169\n*       BLOCK    =>PRINT THE PTF NUMBER IN BLOCK LETTERS BEFORE         00170\n*                  EACH COVER LETTER                                    00171\n*                                                                       00172\n*       EJECT    =>BEGIN EACH COVER LETTER ON A NEW PAGE                00173\n*                                                                       00174\n*       SORT     =>PLACE PTF'S IN COALATING SEQUENCE IN BOTH            00175\n*                  THE PRINTED OUTPUT AND MACHINE READABLE PTF          00176\n*                  OUTPUT (PRESENT IF THE PTFOUT DD STATEMENT           00177\n*                  IS PROVIDED). SYSUT2 IS REQUIRED TO PERFORM          00178\n*                  THIS FUNCTION.                                       00179\n*                                                                       00180\n*       NOMOD    =>DO NOT PLACE A MOD ELEMENT IN THE PTFOUT             00181\n*                  DATASET IF A SOURCE ELEMENT OF THE SAME              00182\n*                  NAME EXISTS WITHIN THE PTF. SYSUT1 IS                00183\n*                  REQUIRED TO PERFORM THIS FUNCTION.                   00184\n*                                                                       00185\n*       EXCLUDE                                                         00186\n*          OR    =>PROVIDES A LIST OF PTF'S TO BE EXCLUDED FROM         00187\n*       INCLUDE    THE OUTPUT OR A LIST OF PTF'S WHICH WILL BE          00188\n*                  SELECTED (INCLUDE) FROM PTFIN TO BE INCLUDED         00189\n*                  IN THE OUTPUT. THE LIST IS IN PARENTHESES            00190\n*                  AND MAY SPAN SEVERAL INPUT RECORDS. PTF              00191\n*                  NUMBERS MUST BE SEPERATED BY ONE OR MORE             00192\n*                  SPACES. A COMMA IS OPTIONAL.                         00193\n*                                                                       00194\n*                  FOR EXAMPLE:  TO PROCESS 3 SPECIFIC PTF'S            00195\n*                                FROM PTFIN, SPECIFY                    00196\n*                                                                       00197\n*                  INCLUDE  (AA11111 AA22222  , AA33333  )              00198\n*                                                                       00199\n*                  THE DEFAULT MAXIMUM LIST SIZE IS 50. IT MAY BE       00200\n*                  CHANGED BY SPECIFING A NEW MAXIMUM LIST SIZE         00201\n*                  AS SHOWN IN THE FOLLOWING EXAMPLE:                   00202\n*                                                                       00203\n*                  EXCLUDE = 100 (BB11111,BB22222 ....)                 00204\n*                                                                       00205\n*                  INCLUDE AND EXCLUDE ARE MUTUALLY EXCLUSIVE.          00206\n*                  THIS LIST APPLIES ONLY TO PTF'S READ FROM            00207\n*                  THE PTFIN DATASET. READBACK OF PTFOUT                00208\n*                  IS NOT AFFECTED. (SEE PROGRAM DESCRIPTION)           00209\n*                                                                       00210\n*       PTFLIST  =>INCLUDE, IN THE PRINTED OUTPUT, A LIST               00211\n*                  OF THE NUMBERS OF ALL PTF'S PROCESSED.               00212\n*                                                                       00213\n         EJECT                                                          00214\n*       XREF     =>INCLUDE, IN THE PRINTED OUTPUT, A CROSS              00215\n*                  REFERENCE LIST OF WHICH PTF'S CONTAIN                00216\n*                  EACH ELEMENT NAME, BY ELEMENT NAME.                  00217\n*                                                                       00218\n*       FMIDLIST =>INCLUDE, IN THE PRINTED OUTPUT, A CROSS              00219\n*                  REFERENCE LIST OF WHICH PTF'S APPLY TO               00220\n*                  EACH FUNCTION, BY FUNCTION NAME.                     00221\n*                                                                       00222\n*       SYSMODS  =>EACH LIST (PTFLIST, XREF, AND FMIDLIST)              00223\n*                  REQUIRES AN INTERNAL TABLE. THE DEFAULT              00224\n*                  TABLE SIZE ALLOWS A MAXIMUM OF 1500 PTF'S            00225\n*                  TO BE PROCESSED. SPACE FOR THE XREF TABLE            00226\n*                  IS BASED ON AN AVERAGE OF 8 ELEMENTS PER             00227\n*                  PTF. SPACE FOR THE FMIDLIST TABLE IS BASED           00228\n*                  ON AN AVERAGE OF 4 VER STATEMENTS PER PTF.           00229\n*                  THE SIZE OF THE TABLES MAY BE ALTERED BY             00230\n*                  CHANGING THE THE MAXIMUM PTF'S ALLOWED VALUE         00231\n*                  AS SHOWN IN THE FOLLOWING EXAMPLES:                  00232\n*                                                                       00233\n*                         SYSMODS ( 2000 )                              00234\n*                                                                       00235\n*                              OR                                       00236\n*                                                                       00237\n*                         SYSMODS = 500                                 00238\n*                                                                       00239\n*                  THE STORAGE REQUIRED FOR THESE TABLES MAY            00240\n*                  BE CALCULATED AS FOLLOWS:                            00241\n*                                                                       00242\n*                  PTFLIST  = 16 + (8 * 1500 OR SYSMODS VALUE)          00243\n*                                                                       00244\n*                  XREF     = 16 + (64 * 1500 OR SYSMODS VALUE)         00245\n*                                                                       00246\n*                  FMIDLIST = 16 + (32 * 1500 OR SYSMODS VALUE)         00247\n*                                                                       00248\n*       LINES    =>SPECIFIES THE MAXIMUM NUMBER OF LINES PER            00249\n*                  PAGE FOR THE PTFDATA DATASET. THE DEFAULT            00250\n*                  LINE COUNT IS 55. FOR EXAMPLE:                       00251\n*                                                                       00252\n*                  LINES (60 )    OR    LINES =100                      00253\n*                                                                       00254\n*       NOMERGE  =>INHIBIT READING THE PTFOUT DATASET PRIOR             00255\n*                  TO READING THE PTFIN DATASET. FURTHER                00256\n*                  INFORMATION ON THIS FUNCTION IS CONTAINED            00257\n*                  IN THE PROGRAM DESCRIPTION.                          00258\n*                                                                       00259\n*       HEADER   =>PRINT 2 PAGES OF HEADER DATA, IN BLOCK               00260\n*                  LETTERS, AT THE BEGINNING AND END OF THE             00261\n*                  PTFDATA DATASET. THE DATA MAY BE ANY                 00262\n*                  PRINTABLE CHARACTERS NO EXCEEDING A                  00263\n*                  MAXIMUM OF SEVEN. FOR EXAMPLE:                       00264\n*                                                                       00265\n*                  HEADER ( PTF'S)   OR   HEADER =PUT8008               00266\n*                                                                       00267\n*       END      =>OPTIONALLY USED TO INDICATE THE END OF               00268\n*                  THE CONTROL DATASET. NO FURTHER CONTROL              00269\n*                  STATEMENT SCANNING TAKES PLACE.                      00270\n*                                                                       00271\n         EJECT                                                          00272\n*SAMPLE JCL                                                             00273\n*                                                                       00274\n*  //STEP01    EXEC PGM=PHRANQUE,REGION=1024K                           00275\n*  //*                                                                  00276\n*  //* THIS RUN WILL GENERATE THE FOLLOWING PTF TAPE XREF               00277\n*  //* REPORTS.                                                         00278\n*  //*                                                                  00279\n*  //*        ALL REPORTS ARE IN EBCDIC COLLATING SEQUENCE              00280\n*  //*                                                                  00281\n*  //*      1. A LIST OF ALL THE PTF'S APPEARING ON THE TAPE            00282\n*  //*                                                                  00283\n*  //*      2. A LIST OF ALL ELEMENTS (MODULE, MACROS, ETC.) APPEARING  00284\n*  //*         ON THE TAPE AND THE PTF'S THAT REFERENCE THEM            00285\n*  //*                                                                  00286\n*  //*      3. A LIST OF ALL THE COVER LETTERS AND THEIR JCLIN IF       00287\n*  //*         THERE IS A JCLIN FOR THAT PTF                            00288\n*  //*                                                                  00289\n*  //*      4. A LIST OF ALL FMID'S APPEARING ON THE TAPE AND THE PTF'S 00290\n*  //*         THAT REFERENCE THOSE FMIDS                               00291\n*  //*                                                                  00292\n*  //*    ABNLIGNR   >===  TO SUPRESS ANY ABENDAID OPTIONS (OPTIONAL)   00293\n*  //*    SYSPRINT   >===  PRINT ANY MESSAGES AND CONTROL CARD ERRORS   00294\n*  //*    SYSIN      >===  INPUT CONTROL STATEMENT                      00295\n*  //*    SYSUT2     >===  TEMPORARY WORK PDS                           00296\n*  //*    PTFIN      >===  INPUT PTF TAPE                               00297\n*  //*    PTFDATA    >===  OUTPUT XREF REPORTS AND PTF COVER LETTERS    00298\n*  //*    SYSUDUMP   >===  DUMP DD CARD                                 00299\n*  //*                                                                  00300\n*  //ABNLIGNR  DD  DUMMY                                                00301\n*  //SYSPRINT  DD  SYSOUT=1                                             00302\n*  //SYSIN     DD  *                                                    00303\n*   BLOCK SORT EJECT PTFLIST XREF FMIDLIST LINES(80) HEADER(PUT8008)    00304\n*  //SYSUT2    DD DSN=TEMPPDS,UNIT=(DASD,2),SPACE=(CYL,(50,30,200)),    00305\n*  //          DISP=(NEW,PASS)                                          00306\n*  //PTFIN     DD DSN=PTFS,VOL=SER=DLSTAP,UNIT=3400-5,DISP=(OLD,KEEP),  00307\n*  //          LABEL=(1,NL),DCB=(RECFM=FB,LRECL=80,BLKSIZE=7200,DEN=4)  00308\n*  //PTFDATA   DD SYSOUT=Y,DCB=(BLKSIZE=3630,RECFM=FBM)                 00309\n*  //SYSUDUMP  DD SYSOUT=1                                              00310\n         EJECT                                                          00311\n         PRINT NOGEN                                                    00312\n         IHADECB                                                        00313\nBSAMADDR DS    F                                                        00314\nBSAMSIZE DS    H                                                        00315\nRDCOUNT  DS    H                                                        00316\nBSAMSW   DS    X                                                        00317\nFIRSTWT  EQU   1                                                        00318\nLASTWT   EQU   2                                                        00319\nPTREND   DS    0F                                                       00320\n         ORG   DECB                                                     00321\nWORKAREA DS    F                                                        00322\nESIZE    DS    F                                                        00323\nLOWENTRY DS    F                                                        00324\nENDENTRY DS    F                                                        00325\nTSTART   DS    X                                                        00326\n         ORG                                                            00327\nPTRSIZE  EQU   PTREND-DECB                                              00328\nDSSIZE   EQU   PTRSIZE+2*PREFIX                                         00329\nBSAMAREA DSECT                                                          00330\nBSAMLINK DS    F                                                        00331\nBSAMBUFE DS    F                                                        00332\nBSAMBUFC DS    F                                                        00333\nBSAMBUF  DS    38CL80                                                   00334\nPREFIX   EQU   BSAMBUF-BSAMAREA                                         00335\nLISTNAME DSECT                                                          00336\nLNAME    DS    7C                                                       00337\nLSW      DS    C                                                        00338\nRECDATA  DSECT                                                          00339\nREC      DS    80X                                                      00340\n         IHASTOW                                                        00341\nSTOWEND  EQU   *                                                        00342\nSTOWSIZE EQU   STOWEND-STOW                                             00343\n         EJECT                                                          00344\nPHRANQUE CSECT                                                          00345\n         STM   R14,R12,12(R13)                                          00346\n         LR    R12,R15                                                  00347\n         USING PHRANQUE,R12                                             00348\n         USING DECB,R8                                                  00349\n         USING LNAME,R4                                                 00350\n         USING IHADCB,R2                                                00351\n         USING REC,R3                                                   00352\n         USING BSAMAREA,R11                                             00353\n         L     R4,ASAVE           ADDR OF SAVE AREA                     00354\n         ST    R13,4(R4)          SAVE BACK POINTER                     00355\n         ST    R4,8(R13)          SAVE FORWARD POINTER                  00356\n         LR    R13,R4             NEW SAVE AREA                         00357\n         LR    R4,R1              SAVE PARM REG                         00358\n         USING SAVE,R13                                                 00359\n         OPEN  MF=(E,ODDS)                                              00360\n         LA    R10,OPTIONS        SET RETURN FROM SPACES                00361\n         L     R1,0(R4)           POINTER TO PARM DATA                  00362\n         LH    R2,0(R1)           LENGTH OF PARM DATA                   00363\n         LTR   R2,R2              ZERO LENGTH?                          00364\n         BZ    NOPARMS            YES, NO EXEC CARD PARMS               00365\n         C     R2,=F'100'         LENGTH CHECK                          00366\n         BH    ERROR12            CAN'T BE OVER 100                     00367\n         BCTR  R2,0               MINUS ONE FOR MOVE                    00368\n         EX    R2,MOVEPARM        DO MOVE                               00369\n         BAL   R6,PTPARM          FIND FIRST KEYWORD                    00370\n         LA    R6,ERECORD         END OF NORMAL RECORD                  00371\n         ST    R6,RECEND             SAVE FOR COMPARES                  00372\n         MVI   RECORD,C' '        CLEAR                                 00373\n         MVC   RECORD+1(119),RECORD     RECORD AREA                     00374\nNOPARMS  EQU   *                                                        00375\n         RDJFCB MF=(E,OSYSIN)                                           00376\n         LTR   R15,R15            SYSIN DD PROVIDED?                    00377\n         BNZ   SYSINEOF           NO, TAKE DEFAULTS                     00378\n         OPEN MF=(E,OSYSIN),TYPE=J                                      00379\n         OI    SW3,SYINOPEN       INDICATE SYSIN OPEN                   00380\n         BALR  R6,0               RETURN ADDR FOR GET                   00381\n         GET   SYSIN,RECORD                                             00382\nPTPARM   EQU   *                                                        00383\n         LA    R0,PRECORD         ADDR OF PRINT RECORD                  00384\n         BAL   R14,MPRINT         LINK TO SYSPRINT RTN                  00385\n         CLI   RECORD,C'*'        IS THIS A COMMENT?                    00386\n         BER   R6                 YES, GET ANOTHER RECORD               00387\n         LA    R3,RECORD          ADDR OF RECORD                        00388\n         B     SPACES1                                                  00389\nMOVEPARM MVC   RECORD(0),2(R1)    MOVE PARMS TO RECORD AREA             00390\n         EJECT                                                          00391\nOPTIONS  EQU   *                                                        00392\n         CLC   REC(5),=C'BLOCK'   BLOCK PRINT REQUIRED?                 00393\n         BE    SETBLOCK                                                 00394\n         CLC   REC(7),=C'EXCLUDE' IS THIS AN EXCLUDE LIST?              00395\n         BE    SETEX                                                    00396\n         CLC   REC(5),=C'NOMOD'   ARE MODULES WANTED?                   00397\n         BE    SETNOMOD           NO, GO SET THAT                       00398\n         CLC   REC(4),=C'SORT'    SORT ALSO?                            00399\n         BE    SETSORT            YES,GO SET UP FOR IT                  00400\n         CLC   REC(7),=C'INCLUDE'                                       00401\n         BE    SETLIST            YES, PROCESS THE LIST                 00402\n         CLC   REC(5),=C'EJECT'     SKIP TO ONE BETWEEN SYSMODS?        00403\n         BE    SETEJECT                                                 00404\n         CLC   REC(7),=C'NOMERGE'    INHIBIT READBACK?                  00405\n         BE    SETNMRGE           YES, SET NOMERGE                      00406\n         CLC   REC(7),=C'PTFLIST' IS A PTF LIST REQUESTED?              00407\n         BE    STPTFLST           YES, GO SET IT                        00408\n         CLC   REC(4),=C'XREF'    IS AN ELEMENT-SYSMOD XREF REQUESTED?  00409\n         BE    SETXREF            YES, GO SET IT                        00410\n         CLC   REC(5),=C'LINES'   CHANGE PAGE SIZE?                     00411\n         BE    SETLINES           YES, DO CHANGE                        00412\n         CLC   REC(8),=C'FMIDLIST' IS AN FMID LIST REQUESTED?           00413\n         BE    SETFLIST           YES, GO SET IT                        00414\n         CLC   REC(6),=C'HEADER'   IS AN HEADER REQUESTED?              00415\n         BE    SETHEADR           YES, GO SET IT                        00416\n         CLC   REC(7),=C'SYSMODS'  CHANGE SYSMOD COUNT?                 00417\n         BE    SETSYSMD           YES, CHANGE IT                        00418\n         CLC   REC(3),=C'END'     END OF CONTROL STATEMENTS?            00419\n         BE    SYSINEOF           YES, GO TO EOF ON SYSIN               00420\n         B     ERROR1             UNKNOWN KEYWORD                       00421\nASAVE    DC    A(PHRA0003)                                              00422\n         EJECT                                                          00423\nSETLINES EQU   *                                                        00424\n         TM    SW4,LINES          DUPLICATE KEYWORD?                    00425\n         BO    ERROR5             YES, ERROR                            00426\n         OI    SW4,LINES          SET LINES PROCESSED                   00427\n         LA    R3,5(R3)           BUMP OVER KEYWORD                     00428\n         BAL   R8,CVB             LINK TO BINARY CONVERT                00429\n         ST    R15,MAXLINES       NEW PAGE SIZE                         00430\n         ST    R15,LCOUNT         FORCE NEW PAGE                        00431\n         B     SPACES                                                   00432\n         SPACE 3                                                        00433\nCVB      EQU *                                                          00434\n         ST    R10,SAVER10        SAVE BAL REG                          00435\n         BAL   R10,SPACES         SKIP OVER SPACES                      00436\n         CLI   REC,C'='           EQUAL SIGN?                           00437\n         BE    FOREQU             PROCESS EQUAL SIGN FORMAT             00438\n         CLI   REC,C'('           SYNTAX CHECK                          00439\n         BNE   ERROR6             NO, ?                                 00440\n         BAL   R4,DOCONV          DO BINARY CONVERT                     00441\n         CLI   REC,C')'           IS IT ?                               00442\n         BNE   ERROR6             NO, ?                                 00443\n         LA    R3,1(R3)           BUMP OVER IT                          00444\nCVBRETRN EQU   *                                                        00445\n         L     R10,SAVER10        RESTORE R10                           00446\n         BR    R8                                                       00447\nFOREQU   EQU   *                                                        00448\n         BAL   R4,DOCONV          DO BINARY CONVERT                     00449\n         B     CVBRETRN                                                 00450\nDOCONV   EQU   *                                                        00451\n         LA    R3,1(R3)           BUMP POINTER                          00452\n         BAL   R11,SCANRTN1       FIND OPERAND AND LENGTH               00453\n         C     R5,=F'7'           OPERAND OVER 7 CHARACTERS?            00454\n         BH    ERROR6             YES, SYSTAX ERROR                     00455\n         LR    R15,R5             SAVE LENGTH FOR NUMERIC SCAN          00456\nTESTNUM  EQU   *                                                        00457\n         BCTR  R15,0              DECREMENT INDEX REG                   00458\n         TM    REC,X'F0'          IS IT NUMERIC ?                       00459\n         BNO   ERROR6             IF NOT, SYNTAX ERROR                  00460\n         LA    R3,1(R3)           BUMP RECORD POINTER                   00461\n         LTR   R15,R15            END OF SCAN ?                         00462\n         BNZ   TESTNUM            NO, CONTINUE SCAN                     00463\n         SR    R3,R5              RESTORE RECORD POINTER                00464\n         LR    R15,R5             SAVE LENGTH AGAIN                     00465\n         BCTR  R5,0               DECREMENT FOR PACK                    00466\n         O     R5,=F'112'         OR IN L1 FOR PACK                     00467\n         EX    R5,PACKIT          EXECUTE PACK                          00468\n         AR    R3,R15             SKIP OVER OPERAND                     00469\n         BAL   R10,SPACES         LOOK FOR )                            00470\n         CVB   R15,PACKDEC        CONVERT TO BINARY                     00471\n         BR    R4                                                       00472\nPACKIT   PACK  PACKDEC(0),REC(0)  EXECUTED PACK                         00473\n         EJECT                                                          00474\nSETSYSMD EQU   *                                                        00475\n         TM    SW2,SYSMOD         DUPLICATE KEYWORD                     00476\n         BO    ERROR5             YES, ERROR                            00477\n         OI    SW2,SYSMOD         SET CHANGE SYSMOD COUNT               00478\n         LA    R3,7(R3)           BUMP OVER KEYWORD                     00479\n         BAL   R8,CVB             LINK TO BINARY CONVERT                00480\n         ST    R15,SMCOUNT        SET NEW COUNT                         00481\n         B     SPACES                                                   00482\n         SPACE 3                                                        00483\nSETHEADR EQU   *                                                        00484\n         TM    SW2,PHEADER        CHECK FOR DUPLICATE PARM              00485\n         BO    ERROR5                                                   00486\n         L     R1,BLOCKPT         ADDR OF BLOCK PRINT RTN               00487\n         LTR   R1,R1              IS BLOCK PRINT RTN LINKED?            00488\n         BZ    ERROR13            NO, ERROR                             00489\n         OI    SW2,PHEADER        INDICATE PRINT HEADER                 00490\n         ST    R10,SAVER10        SAVE BAL REG                          00491\n         MVC   IMSG3(8),=8C' '    CLEAR STOW NAME                       00492\n         LA    R3,6(R3)           BUMP POINTER                          00493\n         BAL   R10,SPACES         STEP TO HEADER DATA                   00494\n         CLI   REC,C'='           FORMAT EQUAL SIGN?                    00495\n         BE    HEADEQU            YES, DO THAT FORMAT                   00496\n         CLI   REC,C'('           OTHER FORMAT?                         00497\n         BNE   ERROR6             NO, WHO KNOWS?                        00498\n         BAL   R4,MOVECHRS        MOVE HEADER DATA TO STOW NAME         00499\n         CLI   REC,C')'           CLOSING THING?                        00500\n         BNE   ERROR6             NO, ERROR                             00501\n         LA    R3,1(R3)           BUMP OVER IT                          00502\nCHRSEXIT EQU   *                                                        00503\n         L     R10,SAVER10        RESTORE BAL REG                       00504\n         B     SPACES                                                   00505\nHEADEQU  EQU   *                                                        00506\n         BAL   R4,MOVECHRS        MOVE HEADER DATA TO STOW NAME         00507\n         B     CHRSEXIT                                                 00508\nMOVECHRS EQU   *                                                        00509\n         LA    R3,1(R3)           BUMP OVER DELIMITER                   00510\n         BAL   R11,SCANRTN1       DO SPACES AND LENGTH                  00511\n         LTR   R5,R5              ZERO LENGTH?                          00512\n         BZ    HEADROFF           YES,TURN OFF HEADER                   00513\n         C     R5,=F'7'           7 CHARACTERS MAX                      00514\n         BH    ERROR6             TOO MANY IS AN ERROR                  00515\n         LR    R15,R5             SAVE LENGTH                           00516\n         BCTR  R5,0               MINUS ONE FOR EXECUTE                 00517\n         EX    R5,MVECHARS        DO MOVE                               00518\n         AR    R3,R15             BUMP OVER HEADER DATA                 00519\nHEADER1  EQU   *                                                        00520\n         BAL   R10,SPACES         DO SPACES STUFF                       00521\n         BR    R4                                                       00522\nHEADROFF EQU   *                                                        00523\n         NI    SW2,255-PHEADER    RESET PHEADER                         00524\n         B     HEADER1                                                  00525\nMVECHARS MVC   IMSG3(0),REC                                             00526\n         EJECT                                                          00527\nSETEX    EQU   *                                                        00528\n         TM    SW,EXCLUDE         CHECK FOR DUPLICATE PARM              00529\n         BO    ERROR5                                                   00530\n         OI    SW,EXCLUDE         SET EXCLUDE                           00531\n         B     SETLIST                                                  00532\n         SPACE 3                                                        00533\nSETBLOCK EQU   *                                                        00534\n         TM    SW3,BLOCK          DUPLICATE KEYWORD?                    00535\n         BO    ERROR5             YES, ERROR                            00536\n         L     R1,BLOCKPT         ADDR OF BLOCK PRINT RTN               00537\n         LTR   R1,R1              IS IT LINKED?                         00538\n         BZ    ERROR13            NO, ERROR                             00539\n         OI    SW3,BLOCK                                                00540\n         LA    R3,5(R3)                                                 00541\n         B     SPACES                                                   00542\n         SPACE 3                                                        00543\nSETSORT  EQU   *                                                        00544\n         TM    SW,SORT            HAVE WE ALREADY SELECTED SORT?        00545\n         BO    ERROR5             YES, DUPLICATE KEYWORD                00546\n         RDJFCB MF=(E,OSYSUT2)                                          00547\n         LTR   R15,R15            RETURN CODE ZERO?                     00548\n         BNZ   ERROR10                                                  00549\n         OI    SW,SORT            SET SORT SW                           00550\n         OPEN  MF=(E,OSYSUT2),TYPE=J                                    00551\n         OPEN  MF=(E,OUT2DIR)                                           00552\n         L     R15,APUTUT2        ADDR OF PUT RTN                       00553\n         ST    R15,APUTRTN        STORE IN ADDR LIST                    00554\n         LA    R2,SYSUT2          DCB ADDR                              00555\n         LA    R8,ABSAMUT2        ADDR OF BSAM POINTER                  00556\n         BAL   R7,GETBUF          GET AND SET UP BUFFER                 00557\n         OI    SW2,UT2OPEN        SYSUT2 HAS BEEN OPENED                00558\n         LA    R3,4(R3)           BUMP POINTER                          00559\n         B     SPACES                                                   00560\nAPUTUT2  DC    A(PUTUT2)                                                00561\n         SPACE 2                                                        00562\n         EJECT                                                          00563\nSETLIST  EQU   *                                                        00564\n         TM    SW,LIST            HAVE WE ALREADY PROCESSED A LIST?     00565\n         BO    ERROR5             YES, DUPLICATE KEYWORD                00566\n         OI    SW3,DOSCAN         SCAN LIST AT END                      00567\n         OI    SW,LIST            SET LIST SW                           00568\n         ST    R10,SAVER10        SAVE BAL REG                          00569\n         LA    R3,7(R3)           BUMP POINTER                          00570\n         BAL   R10,SPACES         SKIP OVER SPACES                      00571\n         CLI   REC,C'='           CHANGE TABLE SIZE ?                   00572\n         BNE   DOPTFLST           NO, BUILD TABLE                       00573\n         BAL   R4,DOCONV          CONVERT NEW TABLE SIZE                00574\n         ST    R15,APTFLIST       NEW SIZE                              00575\nDOPTFLST EQU   *                                                        00576\n         CLI   REC,C'('           IS THIS A LIST?                       00577\n         BNE   ERROR6             NO, WHO KNOWS?                        00578\n         LA    R1,8               ENTRY SIZE                            00579\n         M     R0,APTFLIST        GETMAIN SIZE                          00580\n         LR    R8,R1              SAVE LENGTH                           00581\n         GETMAIN R,LV=(R1),SP=10                                        00582\n         ST    R1,APTFLIST        ADDR OF PTF LIST                      00583\n         LR    R4,R1                                                    00584\n         LA    R8,0(R1,R8)        END OF LIST                           00585\nADD1     EQU   *                                                        00586\n         LA    R3,1(R3)           BUMP RECORD POINTER                   00587\n         BAL   R10,SPACES         SKIP OVER BLANK CHARACTERS            00588\n         CLI   REC,C')'           END OF LIST?                          00589\n         BE    ENDLIST            YES, RETURN                           00590\n         BAL   R10,LENGTH         GET LENGTH OF THIS PARM               00591\n         LA    R10,7              LENGTH MUST BE 7                      00592\n         CLR   R10,R5             ARE THEY EQUAL?                       00593\n         BNE   ERROR2             NO, DO ERROR MSG                      00594\n         CR    R8,R4              TABLE FULL?                           00595\n         BNH   ERROR7             YEP                                   00596\n         MVC   0(7,R4),REC        MOVE SYSMOD NAME TO TABLE             00597\n         MVI   7(R4),X'00'        ZERO COUNTER                          00598\n         LA    R4,8(R4)           BUMP LIST POINTER                     00599\n         LA    R3,6(R3)           BUMP RECORD POINTER                   00600\n         B     ADD1               LOOP BACK                             00601\nENDLIST  EQU   *                                                        00602\n         ST    R4,ENDPTFL         SAVE END POINTER                      00603\n         L     R10,SAVER10        RESTORE BAL REG                       00604\n         LA    R3,1(R3)           BUMP RECORD POINTER                   00605\n         B     SPACES                                                   00606\n         SPACE 3                                                        00607\nSETNMRGE EQU   *                                                        00608\n         TM    SW3,NOMERGE        DUPLICATE KEYWORD?                    00609\n         BO    ERROR5             YES, MSG AND EXIT                     00610\n         OI    SW3,NOMERGE        SET NOMERGE                           00611\n         LA    R3,7(R3)                                                 00612\n         B     SPACES                                                   00613\n         EJECT                                                          00614\nSETNOMOD EQU   *                                                        00615\n         TM    SW,NOMOD           HAVE WE ALREADY SELECTED NOMOD?       00616\n         BO    ERROR5             YES, DUPLICATE KEYWORD                00617\n         RDJFCB MF=(E,OSYSUT1)                                          00618\n         LTR   R15,R15            RETURN CODE ZERO?                     00619\n         BNZ   ERROR11                                                  00620\n         OI    SW,NOMOD           SET NOMOD SW                          00621\n         OPEN  MF=(E,OSYSUT1),TYPE=J                                    00622\n         LA    R2,SYSUT1          DCB ADDR                              00623\n         LA    R8,ABSAMUT1        ADDR OF BSAM POINTER                  00624\n         BAL   R7,GETBUF          GET AND SET UP BUFFER                 00625\n         OI    SW2,UT1OPEN        SYSUT1 HAS BEEN OPENED                00626\n         L     R1,NAMELIST        LIST SIZE                             00627\n         LR    R8,R1              SAVE LENGTH                           00628\n         GETMAIN R,LV=(R1),SP=10                                        00629\n         ST    R1,NAMELIST        ADDR OF ELEMENT LIST                  00630\n         LA    R8,0(R1,R8)        END OF LIST                           00631\n         ST    R8,ENDNAMEL        END OF ELEMENT LIST                   00632\n         LA    R3,5(R3)           BUMP POINTER                          00633\n         B     SPACES                                                   00634\n         SPACE 3                                                        00635\nSETEJECT EQU   *                                                        00636\n         TM    SW3,EJECT          DUPLICATE PARM?                       00637\n         BO    ERROR5             YES, ERROR MSG                        00638\n         OI    SW3,EJECT          SET EJECT                             00639\n         LA    R3,5(R3)                                                 00640\n         B     SPACES                                                   00641\n         SPACE 3                                                        00642\nSETXREF  EQU   *                                                        00643\n         TM    SW3,XREF           DUPLICATE KEYWORD?                    00644\n         BO    ERROR5             YES, ERROR                            00645\n         OI    SW3,XREF           SET XREF                              00646\n         LA    R3,4(R3)           BUMP POINTER                          00647\n         B     SPACES                                                   00648\n         SPACE 3                                                        00649\nSTPTFLST EQU   *                                                        00650\n         TM    SW3,PTFLIST        DUPLICATE KEYWORD?                    00651\n         BO    ERROR5             YES, ERROR                            00652\n         OI    SW3,PTFLIST        SET PTFLIST                           00653\n         LA    R3,7(R3)           BUMP POINTER                          00654\n         B     SPACES                                                   00655\n         SPACE 3                                                        00656\nSETFLIST EQU   *                                                        00657\n         TM    SW4,FMIDLIST       DUPLICATE PARM?                       00658\n         BO    ERROR5             YES, ERROR                            00659\n         OI    SW4,FMIDLIST       INDICATE BUILD LIST                   00660\n         LA    R3,8(R3)           BUMP OVER KEYWORD                     00661\n         B     SPACES                                                   00662\n         EJECT                                                          00663\nSETUPTBL EQU   *                                                        00664\n         L     R15,0(R8)          CLACULATE                             00665\n         M     R14,SMCOUNT          GETMAIN                             00666\n         MR    R14,R11                SIZE                              00667\n         LA    R14,16(R15)        ADD 16 BYTES FOR HEADER               00668\n         GETMAIN R,LV=(R14),SP=10                                       00669\n         ST    R1,0(R8)           SAVE TABLE ADDR                       00670\n         LR    R8,R1              BASE FOR TABLE                        00671\n         AR    R14,R1             END OF TABLE                          00672\n         ST    R14,ENDENTRY       LAST TABLE POSITION                   00673\n         SR    R14,R11            BACK UP ONE                           00674\n         ST    R14,LOWENTRY       ADDR OF LOWEST ENTRY                  00675\n         BCTR  R11,0              ENTRY SIZE MINUS 1                    00676\n         ST    R11,ESIZE          SAVE IT                               00677\n         EX    R11,CLRENTRY       MAKE LOW ENTRY ZEROS                  00678\n         BR    R7                                                       00679\nCLRENTRY XC    0(0,R14),0(R14)                                          00680\n         SPACE 3                                                        00681\nSYSINEOF EQU   *                                                        00682\n         TM    SW3,XREF           BUILD XREF?                           00683\n         BZ    NOTXREF            NO, TRY PTFLIST                       00684\n         LA    R8,XREFADDR        ADDR OF XREF TABLE                    00685\n         LA    R11,16             ENTRY SIZE                            00686\n         BAL   R7,SETUPTBL        GET STORAGE AND INITIALIZE TABLE      00687\nNOTXREF  EQU   *                                                        00688\n         TM    SW3,PTFLIST        BUILD PTFLIST?                        00689\n         BZ    NOTPTFL            NO, TRY FMIDLIST                      00690\n         LA    R8,TADDR           ADDR OF PTFLIST TABLE                 00691\n         LA    R11,8              ENTRY SIZE                            00692\n         BAL   R7,SETUPTBL        GET STORAGE AND INITIALIZE TABLE      00693\nNOTPTFL  EQU   *                                                        00694\n         TM    SW4,FMIDLIST       BUILD FMIDLIST?                       00695\n         BZ    NOTFMIDL           NO,MOVE ON                            00696\n         LA    R8,FMIDADDR        FMID LIST TABLE                       00697\n         LA    R11,16             ENTRY SIZE                            00698\n         BAL   R7,SETUPTBL        BUILD FMID TABLE                      00699\nNOTFMIDL EQU   *                                                        00700\n         TM    SW3,SYINOPEN       IS SYSIN OPEN?                        00701\n         BZ    NOSYSIN            NO, DO NOT CLOSE                      00702\n         CLOSE MF=(E,OSYSIN)                                            00703\n         FREEPOOL SYSIN                                                 00704\nNOSYSIN  EQU   *                                                        00705\n         CALL  PHRA0001                                                 00706\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,EODAD=SYSINEOF,LRECL=80,          X00707\n               MACRF=GM,RECFM=F,BLKSIZE=80,EXLST=XLIST                  00708\nOSYSIN   OPEN  (SYSIN,INPUT),MF=L                                       00709\n         EJECT                                                          00710\n         LTORG                                                          00711\n         EJECT                                                          00712\nPHRA0001 CSECT                                                          00713\n         BALR  R12,0                                                    00714\n         USING *,R12                                                    00715\n         BAL   R4,HEADERTN        LINK TO HEADER RTN                    00716\n         RDJFCB MF=(E,OPTFOUT)    IS THERE PTFOUT DATASET?              00717\n         LTR   R15,R15            RETURN CODE ZERO?                     00718\n         BNZ   DONTREAD           NO, DO NOT OPEN                       00719\n         TM    SW3,NOMERGE        BYPASS MERGE?                         00720\n         BO    NOREAD             YES, NO READBACK                      00721\n         TM    JFCBTSDM,JFCSDS    SYSOUT DATA SET ?                     00722\n         BO    NOREAD             YES, NO READ                          00723\n         TM    JFCBIND2,JFCMOD    DISP = NEW OR MOD?                    00724\n         BO    NOREAD             YES, DO NOT READ OUTPUT TAPE          00725\n         OI    SW,DISPOLD         PTFOUT DISP=OLD                       00726\nNOREAD   EQU   *                                                        00727\n         OPEN  MF=(E,OPTFOUT),TYPE=J                                    00728\n         OI    SW2,OUTOPEN                                              00729\n         LA    R2,PTFOUT          DCB ADDR                              00730\n         LA    R8,ABSAMOUT        ADDR OF BSAM POINTER                  00731\n         BAL   R7,GETBUF          GET AND SET UP BUFFER                 00732\n         TM    SW,DISPOLD+SORT    SORT AND PTFOUT DISP=OLD?             00733\n         BO    READIT             YES, START READING                    00734\n         TM    SW,DISPOLD         DISP=OLD BUT NOT SORT?                00735\n         BZ    DONTREAD           NO, START WITH PTFIN                  00736\n         CLOSE (PTFOUT,LEAVE),TYPE=T  REPOSITION AT END OF DATA SET     00737\n         B     DONTREAD                                                 00738\nREADIT   EQU   *                                                        00739\n         BAL   R14,MSG6                                                 00740\n         L     R6,APUTRTN         ADDR OF PUT RTN                       00741\n         LA    R9,GETOUT          ADDR OF GET RTN                       00742\n         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS                 00743\n         LA    R7,NEXTPTF         RETURN FOR ++SYSMOD                   00744\n         B     INITREAD           DO INITIAL READ                       00745\n         EJECT                                                          00746\nPOUTEOF  EQU   *                                                        00747\n         BAL   R6,STOWRTN         DO FINAL STOW                         00748\n         CLOSE (PTFOUT,REREAD),TYPE=T                                   00749\n         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS                 00750\n         L     R11,BSAMADDR       ADDR OF BSAM AREA                     00751\n         LA    R14,BSAMBUF        START OF IO AREA                      00752\n         ST    R14,BSAMBUFC       MAKE IT CURRENT                       00753\nDONTREAD EQU   *                                                        00754\n         BAL   R14,MSG7                                                 00755\n         OI    SW,NRDBACK                                               00756\n         NI    SW,255-HEADER-PTFSEL                                     00757\n         LA    R9,GETPTF          ADDR OF GET ROUTINE                   00758\n         LR    R6,R9              LOOP TO GET IF NOT ++                 00759\n         RDJFCB MF=(E,OPUNCH)                                           00760\n         LTR   R15,R15            WAS IT SUCCESSFUL?                    00761\n         BNZ   NOPUNCH            NO, DONT OPEN                         00762\n         OPEN  MF=(E,OPUNCH),TYPE=J                                     00763\n         LA    R6,PUTPUNCH        ADDR OF PUNCH RTN                     00764\n         OI    SW2,PUNOPEN        INDICATE SYSPUNCH OPEN                00765\nNOPUNCH  EQU   *                                                        00766\n         BALR  R7,R9              LINK TO INPUT ROUTINE                 00767\nNEXTPTF  EQU   *                                                        00768\n         BAL   R6,CKPTF           FINISH UP THIS SYSMOD                 00769\n         LR    R6,R9              SET UP RETURN REG                     00770\n         NI    SW,255-HEADER-PTFSEL                                     00771\n         AR    R3,R5              BUMP RECORD POINTER                   00772\n         BAL   R11,SCANRTN        FIND NEXT DATA WORD                   00773\n         TM    SW,LIST+NRDBACK    LIST AND NOT READING PTFOUT?          00774\n         BNO   NOLIST             DO LIST ONLY IF BOTH ARE ONE          00775\n         BAL   R15,LISTRTN        CHECK PTF LIST                        00776\nNOLIST   EQU   *                                                        00777\n         L     R4,NAMELIST        ADDR OF ELEMENT LIST                  00778\n         ST    R4,CNAMEL          MAKE IT CURRENT                       00779\n         OI    SW,PTFSEL          INDICATE THAT A PTF IS SELECTED       00780\n         MVC   STOWA(8),=8C' '    CLEAR STOW AREA                       00781\n         MVC   STOWA(7),REC       MOVE PTF NUMBER TO MEMBER NAME        00782\n         MVC   TEMPNAME+8(8),STOWA SYSMOD NAME FOR XREF TABLE           00783\nSETPUT   EQU   *                                                        00784\n         L     R6,APUTRTN         ADDR OF PUT RTN                       00785\n         BR    R6                 GO DO PUT                             00786\n         EJECT                                                          00787\nLISTRTN  EQU   *                                                        00788\n         L     R4,APTFLIST        ADDR OF PTF LIST                      00789\nCOMPARE  EQU   *                                                        00790\n         CLC   LNAME(7),REC       CHECK FOR MATCH                       00791\n         BE    PTFMATCH           YES, SELECT THIS PTF                  00792\n         LA    R4,8(R4)           BUMP POINTER                          00793\n         CL    R4,ENDPTFL         END?                                  00794\n         BC    10,NOMATCH         YES, NOT FOUND                        00795\n         B     COMPARE            LOOP BACK                             00796\nNOMATCH  EQU   *                                                        00797\n         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?              00798\n         BZR   R6                 NO, NO PTFSEL                         00799\n         BR    R15                                                      00800\nPTFMATCH EQU   *                                                        00801\n         MVI   LSW,X'01'          MARK AS SELECTED                      00802\n         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?              00803\n         BOR   R6                 YES, BYPASS THIS SYSMOD               00804\n         BR    R15                                                      00805\n         SPACE 3                                                        00806\nCKPTF    EQU   *                                                        00807\n         TM    SW2,INNOMOD        IS PART OF THIS SYSMOD ON SYSUT1?     00808\n         BO    RDSYSUT1           YES, GET MOD ELEMENTS FROM SYSUT1     00809\n         TM    SW,PTFSEL          IS A PTF SELECTED?                    00810\n         BZR   R6                 NO, BYPASS STOW                       00811\n         TM    SW,SORT            ARE WE DOING A SORT?                  00812\n         BO    STOWRTN            YES, STOW SYSMOD NAME                 00813\n         BAL   R14,MSG2           END OF PTF MSG                        00814\nDOPLIST  EQU   *                                                        00815\n         TM    SW3,PTFLIST        IS PTFLIST TO BE DONE?                00816\n         BZR   R6                 NO, RETURN                            00817\n         L     R8,TADDR           ADDR OF TABLE                         00818\n         LA    R10,STOWA          ADDR OF OBJECT FOR TABLE ADD          00819\n         B     TBLSORT            DO ADD TO PTF LIST                    00820\nSTOWRTN  EQU   *                                                        00821\n         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS                 00822\n         BAL   R4,CHKWRITE        FINISH UP OUTPUT                      00823\n         STOW  SYSUT2,STOWA       STOW THE PTF NUMBER                   00824\nCHKSTOW  EQU   *                                                        00825\n         B     *+4(R15)           BRANCH TABLE FOR CHECKING STOW        00826\n         B     DOPLIST            GOOD STOW, DO TABLE                   00827\n         B     DUPNAME            SECOND COPY OF THIS PTF, USE THIS ONE 00828\n         B     ERROR9             INVALID STOW REQUEST                  00829\n         B     ERROR8             OUT OF DIRECTORY SPACE                00830\nDUPNAME  EQU   *                                                        00831\n         BAL   R14,MSG1           DUPLICATE PTF MSG                     00832\n         STOW  SYSUT2,STOWA,R     DO STOW WITH REPLACE                  00833\n         B     CHKSTOW            CHECK RETURN CODE AGAIN               00834\n         EJECT                                                          00835\nPUTPTF   EQU   *                                                        00836\n         TM    SW,HEADER          HAVE WE PRINTED THE HEADER YET?       00837\n         BO    COPY               YES, DONT DO IT AGAIN                 00838\n         BAL   R10,BLOCKRTN       GO TO BLOCK PRINT RTN                 00839\nCOPY     EQU   *                                                        00840\n         BALR  R6,0               SET UP RETURN FOR NOT ++PTF           00841\n         TM    SW4,LISTREC        PRINT THIS REC?                       00842\n         BZ    NOPRINT            NO, BR                                00843\n         LA    R0,PRECORD         ADDR OF PRINT RECORD                  00844\n         BAL   R14,PRINT          LINK TO PRINT ROUTINE                 00845\n         TM    SW4,NLISTALL       SHOULD WE LIST ALL?                   00846\n         BZ    NOPRINT            YES, BYPASS CHECK FOR PERIOD          00847\n         TM    SW4,NCOMMENT       ARE WE IN COMMENT?                    00848\n         BZ    CHKCOM             YES, CHECK FOR END OF COMMENT         00849\nPERIOD   EQU   *                                                        00850\n         CLI   REC,C'.'           END OF STATEMENT?                     00851\n         BE    LISTOFF            YES, TURN LIST OFF                    00852\n         TM    SW4,NINVER         ARE WE IN A ++VER STATEMENT?          00853\n         BO    NOTVER             NO, DO NOT CHECK FMID LIST            00854\n         TM    SW4,FMIDPARN+FMIDID WHERE IN FMID STUFF ARE WE?          00855\n         BZ    FMID1              ZERO = LOOKING FOR C'FMID'            00856\n         BM    FMID2              MIXED = LOOKING FOR C'('              00857\n*                                 ONES = LOOKING FOR FUNCTION ID        00858\nNOTVER   EQU   *                                                        00859\n         CLC   REC(2),=C'/*'      START OF COMMENT?                     00860\n         BE    SETCOM             YES, GO SET COMMENT                   00861\nPERIOD1  EQU   *                                                        00862\n         TM    SW4,FMIDPARN+FMIDID ARE WE LOOKING FOR FUNCTION ID ?     00863\n         BNO   PERIOD2            NO, CONTINUE NORMAL SCAN              00864\n         CLI   REC,C' '           IS THIS CHARACTER A BLANK?            00865\n         BNE   FMID3              NO, THEN IT IS FUNCTION ID            00866\nPERIOD2  EQU   *                                                        00867\n         LA    R3,1(R3)           NEXT CHARACTER                        00868\n         C     R3,RECEND          END OF RECORD?                        00869\n         BC    10,NOPRINT         YES, MOVE ON                          00870\n         B     PERIOD                                                   00871\nSETCOM   EQU   *                                                        00872\n         NI    SW4,255-NCOMMENT      SET IN COMMENT                     00873\n         B     CHKCOM1                                                  00874\nCHKCOM   EQU   *                                                        00875\n         CLC   REC(2),=C'*/'      END OF COMMENT?                       00876\n         BE    RESETCOM           YES,GO CHECK FOR PERIOD               00877\nCHKCOM1  EQU   *                                                        00878\n         LA    R3,1(R3)           NEXT CHARACTER                        00879\n         C     R3,RECEND          END OF RECORD?                        00880\n         BC    10,NOPRINT         YES, MOVE ON                          00881\n         B     CHKCOM                                                   00882\nRESETCOM EQU   *                                                        00883\n         OI    SW4,NCOMMENT       SET NOT IN COMMENT                    00884\n         B     PERIOD1                                                  00885\nLISTOFF  EQU   *                                                        00886\n         NI    SW4,255-LISTREC    TURN OFF LIST AND VER                 00887\nNOPRINT  EQU   *                                                        00888\n         L     R4,RECCOUNT        INCREMENT                             00889\n         LA    R4,1(R4)           RECORD                                00890\n         ST    R4,RECCOUNT        COUNT                                 00891\n         TM    SW2,OUTOPEN        IS PTFOUT OPEN?                       00892\n         BZR   R9                 NO, DO NOT WRITE                      00893\n         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS                 00894\n         BAL   R10,BSAMWRIT       PUT RECORD TO PTFOUT                  00895\n         BR    R9                                                       00896\n         EJECT                                                          00897\nFMID1    EQU   *                                                        00898\n         CLC   REC(4),=C'FMID'    IS THIS FMID KEYWORD ?                00899\n         BNE   NOTVER             NO, CONTINUE LOOKING                  00900\n         LA    R3,3(R3)           BUMP POINTER L'FMID-1                 00901\n         OI    SW4,FMIDID         HAVE FOUND C'FMID'                    00902\n         B     NOTVER                                                   00903\n         SPACE 3                                                        00904\nFMID2    EQU   *                                                        00905\n         CLI   REC,C'('           IS THIS C'(' AFTER C'FMID'            00906\n         BNE   NOTVER             NO, CONTINUE LOOKING                  00907\n         OI    SW4,FMIDPARN+NINVER HAVE FOUND C'('--- ALSO              00908\n*                                 SET 'NOT IN VER STATEMENT' --         00909\n*                                 DON'T NEED TO DO THAT CHECKING NOW    00910\n         B     PERIOD2                                                  00911\n         SPACE 3                                                        00912\nFMID3    EQU   *                                                        00913\n         MVC   TEMPNAME(7),REC    MOVE FMID FOR TABLE                   00914\n         MVI   TEMPNAME+7,C' '    PUT BLANK ON END                      00915\n         NI    SW4,255-FMIDPARN-FMIDID                                  00916\n         ST    R6,SAVER10         SAVE BAL REG                          00917\n         L     R8,FMIDADDR        ADDR OF FMID TABLE                    00918\n         LA    R10,TEMPNAME       ADDR OF OBJECT FOR TABLE ADD          00919\n         BAL   R6,TBLSORT         ADD TO FMID TABLE                     00920\n         LA    R3,3(R3)           BUMP POINTER L'FUNCTION-1             00921\n         L     R6,SAVER10         RESTORE BAL REG                       00922\n         B     NOTVER                                                   00923\n         SPACE 3                                                        00924\nPUTUT2   EQU   *                                                        00925\n         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS                 00926\n         BAL   R10,BSAMWRIT                                             00927\n         BR    R9                                                       00928\n         SPACE 3                                                        00929\nTCLOSE   EQU   *                                                        00930\n         CLOSE (SYSUT1,REREAD),TYPE=T                                   00931\n         BR    R10                                                      00932\n         EJECT                                                          00933\nUT2EOF   EQU   *                                                        00934\n         L     R14,CURDE          ADDR OF CURRENT DIRECTORY ENTRY       00935\n         CLC   0(8,R14),KEY       IS THIS END OF DIRECTORY BLOCK?       00936\n         BNE   STEPDIR            NO, GET NEXT DIRECTORY ENTRY          00937\nSTARTDIR EQU   *                                                        00938\n         LA    R14,KEY            ADDR OF DIRECTORY BUFFER              00939\n         READ  DIRECB,SF,UT2DIR,(R14)                                   00940\n         CHECK DIRECB                                                   00941\n         LA    R14,DIR            ADDR OF DIRECTORY RECORD              00942\n         B     DOPOINT                                                  00943\nSTEPDIR  EQU   *                                                        00944\n         IC    R15,STOCTTRN-STOW(R14)  LENGTH BYTE                      00945\n         N     R15,USERL          USE ONLY LENGTH BITS                  00946\n         LA    R15,12(R15,R15)    SIZE OF THIS ENTRY                    00947\n         AR    R14,R15            ADDR OF NEXT ENTRY                    00948\nDOPOINT  EQU   *                                                        00949\n         ST    R14,CURDE          ADDR OF CURRENT DIRECTORY ENTRY       00950\n         CLC   0(8,R14),=8X'FF'   END OF DIRECTORY?                     00951\n         BE    DIREOF             YES, CLEAN UP AND EXIT                00952\n         MVC   STOWA(12),0(R14)   MOVE TO STOW AREA                     00953\n         NC    STOWA+STOTTR-STOW(L'STOTTR+L'STOCTTRN),TTRMASK           00954\n         POINT SYSUT2,STOWA+STOTTR-STOW                                 00955\n         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS                 00956\nINITREAD EQU   *                                                        00957\n         BAL   R10,IREAD          START READ PROCESS                    00958\n         B     CHECKREC                                                 00959\n         SPACE 3                                                        00960\nIREAD    EQU   *                                                        00961\n         L     R11,BSAMADDR       ADDR OF BSAM AREA                     00962\n         BAL   R4,READ                                                  00963\n         B     DOREAD                                                   00964\n         EJECT                                                          00965\nRDSYSUT1 EQU   *                                                        00966\n         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS                 00967\n         BAL   R10,BSAMWRIT       OUTPUT CURRENT BUFFER, START NEW ONE  00968\nLSTRDUT1 EQU   *                                                        00969\n         BAL   R4,CHKWRITE        FINISH UP OUTPUT                      00970\n         BAL   R10,TCLOSE         SET TO REREAD SYSUT1                  00971\n         ST    R9,AGETRTN         SAVE GET RTN ADDR                     00972\n         LA    R9,GETUT1          ADDR OF GET ROUTINE                   00973\n         OI    SW2,UT1LOOP        INDICATE READING FROM SYSUT1          00974\n         LR    R6,R9              RETURN FOR NOT ++PTF                  00975\n         BAL   R7,INITREAD        START READ PROCESS                    00976\nENDUT1LP EQU   *                                                        00977\n         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS                 00978\n         L     R11,BSAMADDR       CURRENT BSAMAREA                      00979\n         BAL   R4,RESETBUF        RESET BUFFER POINTERS                 00980\n         CHECK (R8)                                                     00981\nUT1EOF   EQU   *                                                        00982\n         TM    SW3,EOFPTFIN       IS PTFIN AT EOF?                      00983\n         BO    ENDNOMOD           YES, EXIT INPUT PROCESSING            00984\n         BAL   R10,TCLOSE         POSITION SYSUT1 FOR REUSE             00985\n         NI    SW2,255-INNOMOD-UT1LOOP                                  00986\n         L     R9,AGETRTN         RESTORE GET RTN ADDR                  00987\n         LA    R7,NEXTPTF                                               00988\n         BR    R7                 GO DO NEXT PTF                        00989\n         SPACE 3                                                        00990\nPTFINEOF EQU   *                                                        00991\n         OI    SW3,EOFPTFIN       INDICATE PTFIN AT EOF                 00992\n         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS                 00993\n         TM    SW2,INNOMOD        IS ANYTHING ON SYSUT1?                00994\n         BO    LSTRDUT1           FINISH READING SYSUT1                 00995\nENDNOMOD EQU   *                                                        00996\n         NI    SW2,255-INNOMOD-UT1LOOP                                  00997\n         BAL   R6,CKPTF           FINISH UP THIS SYSMOD                 00998\n         BAL   R6,PRINTLST        BUILD PTF LIST                        00999\n         TM    SW,SORT            ARE WE DOING A SORT?                  01000\n         BZ    DIREOF1            NO,FINISHED,GO TO END                 01001\n         NI    SW,255-LIST-SORT-NOMOD-PTFSEL                            01002\n         BAL   R14,RPRINT         SKIP TO ONE                           01003\n         LA    R9,GETUT2          ADDR OF NEW GET RTN                   01004\n         ST    R9,AGETRTN         SAVE FOR LATTER                       01005\n         LA    R6,PUTPTF          ADDR OF NEW PUT RTN                   01006\n         ST    R6,APUTRTN         SAVE IT FOR LATTER                    01007\n         LA    R7,NEXTPTF         RETURN FOR ++PTF                      01008\n         B     STARTDIR                                                 01009\n         SPACE 3                                                        01010\nDIREOF   EQU   *                                                        01011\n         BAL   R6,CKPTF           END MSG IF NECESSARY                  01012\n         BAL   R6,PRNTXREF        NOW DO FMIDLIST                       01013\nDIREOF1  EQU   *                                                        01014\n         CALL  PHRA0002                                                 01015\n         EJECT                                                          01016\nGETOUT   EQU   *                                                        01017\n         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS                 01018\n         B     GOREAD                                                   01019\nGETUT2   EQU   *                                                        01020\n         L     R8,ABSAMUT2        ADDR OF BSAM POINTERS                 01021\n         B     GOREAD                                                   01022\nGETUT1   EQU   *                                                        01023\n         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS                 01024\nGOREAD   EQU   *                                                        01025\n         BAL   R10,BSAMREAD       GET RECORD FROM BSAM BUFFER           01026\n         B     CHECKREC                                                 01027\nGETPTF   EQU   *                                                        01028\n         GET   PTFIN,RECORD                                             01029\nCHECKREC EQU   *                                                        01030\n         LA    R3,RECORD          RESET RECORD POINTER                  01031\n         CLC   RECORD(2),=C'++'   IS IT ++ CARD?                        01032\n         BNER  R6                 NO RETURN                             01033\n         OI    SW4,LISTREC+NCOMMENT+NLISTALL+NINVER                     01034\n         NI    SW4,255-FMIDPARN-FMIDID                                  01035\n         LA    R3,2(R3)           PASS OVER ++                          01036\n         BAL   R11,SCANRTN1       FIND NEXT DATA WORD                   01037\n         CLC   REC(8),=C'FUNCTION'     IS IT SYSMOD TPYE FUNCTION?      01038\n         BER   R7                 YES, PROCESS IT                       01039\n         CLC   REC(3),=C'PTF'     IS IT SYSMOD TYPE PTF?                01040\n         BER   R7                 YES, PROCESS IT                       01041\n         CLC   REC(4),=C'APAR'    IS IT SYSMOD TYPE APAR?               01042\n         BER   R7                 YES, PROCESS IT                       01043\n         CLC   REC(7),=C'USERMOD' IS IT SYSMOD TYPE USERMOD?            01044\n         BER   R7                 YES, PROCESS IT                       01045\n         TM    SW,PTFSEL          IS A SYSMOD SELECTED?                 01046\n         BNOR  R6                                                       01047\n         CLC   REC(2),=C'IF'                                            01048\n         BE    SETPUT             YES, BYPASS TABLE STUFF               01049\n         CLC   REC(5),=C'JCLIN'   IS THIS A JCLIN STATEMENT?            01050\n         BE    DOJCLIN            YES, BYPASS TABLE STUFF               01051\n         CLC   REC(3),=C'VER'     IS THIS A VER STATEMENT?              01052\n         BE    DOVER              YES, CHECK FOR FMID LIST              01053\n         MVC   TEMPNAME(8),=8C' ' CLEAR WORK AREA                       01054\n         ST    R3,SAVER10                                               01055\n         BAL   R10,LENGTH         GET LENGTH OF ELEMENT TYPE            01056\n         AR    R3,R5              BUMP RECORD POINTER                   01057\n         BAL   R11,SCANRTN        FIND NEXT DATA WORD                   01058\n         BCTR  R5,0               SET UP COUNT FOR EXECUTED MOVE        01059\n         EX    R5,MOVE            MOVE ELEMENT NAME TO TABLE            01060\n         TM    SW,NOMOD+NRDBACK   NOMOD AND NOT READBACK?               01061\n         BNO   BLDXREF            NO, JUST BUILD AN XREF                01062\n         L     R3,SAVER10                                               01063\n         CLC   REC(3),=C'MOD'     IS IT NMOD?                           01064\n         BNE   DOTABLE            NO, DO ADD TO ELEMENT NAME TABLE      01065\n         TM    SW2,UT1LOOP        ARE WE READING FROM SYSUT1?           01066\n         BO    CHECKTBL           YES, CHECK FOR DUPLICATE SOURCE       01067\n         OI    SW2,INNOMOD        INDICATE THAT A ++MOD IS ON SYSUT1    01068\n         BALR  R6,0               SET UP RETURN FOR NOT ++PTF           01069\n         L     R8,ABSAMUT1        ADDR OF BSAM POINTERS                 01070\n         BAL   R10,BSAMWRIT       PUT TO SYSUT1                         01071\n         BR    R9                 RETURN                                01072\n         EJECT                                                          01073\nDOVER    EQU   *                                                        01074\n         TM    SW4,FMIDLIST       FMID LIST REQUESTED?                  01075\n         BZ    SETPUT             NO, BYPASS TABLE                      01076\n         NI    SW4,255-NINVER     SET IN ++VER STATEMENT                01077\n         B     SETPUT                                                   01078\n         SPACE 3                                                        01079\nDOJCLIN  EQU   *                                                        01080\n         NI    SW4,255-NLISTALL   LIST ALL UNTIL NEXT ++                01081\n         B     SETPUT             GO TO PUT RTN                         01082\n         EJECT                                                          01083\nDOTABLE  EQU   *                                                        01084\n         L     R4,CNAMEL          ELEMENT LIST CURRENT POINTER          01085\n         CL    R4,ENDNAMEL        END OF TABLE?                         01086\n         BE    ERROR4             YES, TOO MANY ELEMENTS TO DO          01087\n         MVC   LNAME(8),TEMPNAME  MOVE ELEMENT NAME TO ELEMENT TABLE    01088\n         LA    R4,8(R4)           BUMP POINTER                          01089\n         ST    R4,CNAMEL          MAKE IT CURRENT                       01090\nBLDXREF  EQU   *                                                        01091\n         TM    SW3,XREF           IS XREF TO BE DONE?                   01092\n         BZ    SETPUT             NO, BYPASS IT                         01093\n         L     R8,XREFADDR        ADDR OF XREF TABLE                    01094\n         LA    R10,TEMPNAME       ADDR OF OBJECT FOR TABLE ADD          01095\n         BAL   R6,TBLSORT         ADD TO XREF TABLE                     01096\n         B     SETPUT             RESTORE PUT RTN ADDR AND DO PUT       01097\nMOVE     MVC   TEMPNAME(0),REC                                          01098\n         SPACE 3                                                        01099\nCHECKTBL EQU   *                                                        01100\n         L     R4,NAMELIST        ADDR OF ELEMENT LIST                  01101\nCHKLOOP  EQU   *                                                        01102\n         CL    R4,CNAMEL          ARE WE AT FIRST EMPTY ENTRY?          01103\n         BE    BLDXREF            YES, NOT FOUND, COPY THIS ELEMENT     01104\n         CLC   LNAME(8),TEMPNAME  DOES SAME NAME EXIST?                 01105\n         BE    SKIPMOD            YES, BYPASS THIS ELEMENT              01106\n         LA    R4,8(R4)           BUMP POINTER                          01107\n         B     CHKLOOP                                                  01108\n         SPACE 3                                                        01109\nSKIPMOD  EQU   *                                                        01110\n         BAL   R14,MSG9           ISSUE MOD DELETED MSG                 01111\n         BAL   R14,MSG10          PUT IT TO PTFDATA ALSO                01112\n         LR    R6,R9              SET RETURN FOR NOT ++PTF              01113\n         BR    R9                                                       01114\n         SPACE 3                                                        01115\nPUTPUNCH EQU   *                                                        01116\n         LA    R0,SKIP            SKIP TO ONE                           01117\n         BAL   R14,MPRINT         SKIP TO ONE                           01118\n         BALR  R6,0               RETURN FOR PUTS TO SYSPUNCH           01119\n         LA    R0,PRECORD         ADDR OF PRINT RECORD                  01120\n         BAL   R14,MPRINT         LINK TO SYSPRINT RTN                  01121\n         PUT   SYSPUNCH,RECORD                                          01122\n         BALR  R7,R9              RETURN FOR ++SYSMOD, LINK TO GET RTN  01123\n         LA    R0,SKIP                                                  01124\n         BAL   R14,MPRINT         LINK TO SYSPRINT RTN                  01125\n         LA    R7,NEXTPTF         PROCESS ++SYSMOD                      01126\n         BR    R7                                                       01127\n         EJECT                                                          01128\nBLOCKRTN EQU   *                                                        01129\n         OI    SW,HEADER          SET HEADER PRINTED                    01130\n         TM    SW3,EJECT          SKIP TO ONE REQUIRED?                 01131\n         BZ    NOEJECT            NO, CONTINUE                          01132\n         BAL   R14,RPRINT         SKIP AND RESET COUNTER                01133\nNOEJECT  EQU   *                                                        01134\n         TM    SW3,BLOCK          BLOCK PRINT REQUESTED?                01135\n         BZ    DOMSG3             WRITE MSG3 AND RETURN                 01136\n         L     R1,LCOUNT          CURRENT LINE COUNT                    01137\n         A     R1,FOURTEEN        BLOCK PRINT REQUIRES 14 LINES         01138\n         CL    R1,MAXLINES        WILL BLOCK PRINT FIT ON PAGE?         01139\n         BNH   COUNTOK            YES, CONTINUE                         01140\n         OI    LCOUNT,X'FF'       FORCE SKIP TO ONE ON NEXT PRINT       01141\nCOUNTOK  EQU   *                                                        01142\n         BAL   R14,MSG3           START OF PTF MSG                      01143\nDOHEADER EQU   *                                                        01144\n         MVI   MSGAREA,C' '                                             01145\n         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS                 01146\n         LA    R0,PMSGAREA                                              01147\n         BAL   R14,PRINT                                                01148\n         LA    R1,1               STARTING COUNT                        01149\n         ST    R1,COUNT           SET IT IN THE PARM COUNT FIELD        01150\nBLOKLOOP EQU   *                                                        01151\n         LA    R1,BLKPARM         ADDR OF PARM LIST                     01152\n         L     R15,BLOCKPT        ADDR OF BLOCK PRINT RTN               01153\n         BALR  R14,R15                                                  01154\n         LA    R0,PMSGAREA                                              01155\n         BAL   R14,PRINT                                                01156\n         MVI   MSGAREA,C' '                                             01157\n         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS                 01158\n         L     R1,COUNT           CURRENT BLOCK LINE COUNT              01159\n         LA    R1,1(R1)           BUMP BY ONE                           01160\n         ST    R1,COUNT           SAVE IN BLOCK PARM FOR NEXT LINE      01161\n         C     R1,MAXCOUNT        BUT, WAS THAT THE LAST LINE ?         01162\n         BL    BLOKLOOP           NO, LOOP TO DO NEXT BLOCK LINE        01163\n         LA    R0,PMSGAREA                                              01164\n         BAL   R14,PRINT                                                01165\n         B     COPY1                                                    01166\nDOMSG3   EQU   *                                                        01167\n         BAL   R14,MSG3           START OF PTF MSG                      01168\nCOPY1    EQU   *                                                        01169\n         MVC   SKIPNAME(8),STOWA                                        01170\n         BR    R10                                                      01171\n         EJECT                                                          01172\nHEADERTN EQU   *                                                        01173\n         TM    SW2,PHEADER        PRINT HEADER PAGES?                   01174\n         BZR   R4                 NO, SKIPIT                            01175\n         MVC   STOWA(8),IMSG3     MOVE HEADER DATA                      01176\n         BAL   R10,DOHEADER       HEADER 1                              01177\n         BAL   R10,DOHEADER       HEADER 2                              01178\n         BAL   R10,DOHEADER       HEADER 3                              01179\n         OI    LCOUNT,X'FF'       FORCE NEW PAGE                        01180\n         BAL   R10,DOHEADER       HEADER 1                              01181\n         BAL   R10,DOHEADER       HEADER 2                              01182\n         BAL   R10,DOHEADER       HEADER 3                              01183\n         OI    LCOUNT,X'FF'       FORCE NEW PAGE                        01184\n         BR    R4                                                       01185\n         EJECT                                                          01186\nPRINTLST EQU   *                                                        01187\n         TM    SW3,DOSCAN         IS THERE A LIST?                      01188\n         BZ    NOSCAN             NO, NO LIST TO SCAN                   01189\n         L     R4,APTFLIST        ADDR OF PTF LIST                      01190\n         TM    SW,EXCLUDE         IS THIS AN EXCLUDE LIST?              01191\n         BZ    SCANLOOP           NO, DO 'NOT FOUND' LIST               01192\n         MVC   IMSG5+12(9),=C'EXCLUDED '    MAKT IT EXCLUDED MSG        01193\n         BALR  R7,0               SET LOOP ADDR                         01194\n         TM    LSW,X'01'          WAS THIS ONE EXCLUDED?                01195\n         BZ    LISTED             NO, DO NOT LIST                       01196\n         B     NLISTED            YES, PUT OUT EXCLUDED MSG             01197\n         USING LNAME,R4                                                 01198\nSCANLOOP EQU   *                                                        01199\n         BALR  R7,0               SET LOOP ADDR                         01200\n         TM    LSW,X'01'          WAS SYSMOD FOUND?                     01201\n         BO    LISTED             YES, CHECK NEXT ENTRY                 01202\nNLISTED  EQU   *                                                        01203\n         MVC   IMSG5+4(7),LNAME      MOVE PTF NUMBER TO MSG             01204\n         BAL   R14,MSG5           NOT FOUND MSG                         01205\nLISTED   EQU   *                                                        01206\n         LA    R4,8(R4)           BUMP POINTER                          01207\n         CL    R4,ENDPTFL         END OF LIST?                          01208\n         BLR   R7                 NO TRY NEXT ENTRY                     01209\nNOSCAN   EQU   *                                                        01210\n         TM    SW,SORT            WAS A SORT DONE?                      01211\n         BO    DONTSKIP           YES, ALLREADY AT TOP OF PAGE          01212\n         BAL   R14,RPRINT         SKIP TO ONE                           01213\nDONTSKIP EQU   *                                                        01214\n         TM    SW3,PTFLIST        WAS PTF LIST DONE?                    01215\n         BZ    PRNTXREF           NO, TRY XREF                          01216\n         NI    SW3,255-PTFLIST    DISABLE PTFLIST                       01217\n         L     R8,TADDR           ADDR OF TABLE                         01218\n         L     R11,ESIZE          ENTRY SIZE MINUS 1                    01219\n         LTR   R11,R11            IS ENTRY SIZE ZERO?                   01220\n         BZ    PRNTXREF           YES,GO TRY XREF                       01221\n         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY                  01222\n         LA    R15,8(R15)         SKIP OVER ZEROS                       01223\n         ST    R15,LOWENTRY       PUT IT BACK                           01224\n         MVC   SKIPNAME(8),=C'PTFLIST '                                 01225\n         BALR  R14,0              RETURN FOR LOOP AFTER PRINT           01226\n         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY                  01227\n         C     R15,ENDENTRY       ARE WE AT END?                        01228\n         BE    ENDBLD1            YES,EXIT, THIS LINE EMPTY             01229\n         MVI   MSGAREA,C' '       CLEAR                                 01230\n         MVC   MSGAREA+1(119),MSGAREA  MSG AREA                         01231\n         MVC   MSGAREA+90(8),SKIPNAME LIST NAME TO PRINT LINE           01232\n         LA    R1,MSGAREA         PRINT LINE ADDR                       01233\n         LA    R11,8              LOOP COUNT                            01234\nBLDLOOP  EQU   *                                                        01235\n         C     R15,ENDENTRY       AT END?                               01236\n         BE    ENDBLD             YES, OUTPUT LAST LINE                 01237\n         MVC   0(8,R1),0(R15)     MOVE TO PRINT LINE                    01238\n         LA    R1,11(R1)          STEP PRINT POSITION                   01239\n         LA    R15,8(R15)         STEP TABLE POINTER                    01240\n         BCT   R11,BLDLOOP        LOOP TILL ZERO                        01241\n         ST    R15,LOWENTRY       PUT IT BACK                           01242\n         LA    R0,PMSGAREA        ADDR OF PRINT LINE                    01243\n         B     PRINT              DO PRINT                              01244\nENDBLD   EQU   *                                                        01245\n         LA    R0,PMSGAREA        ADDR OF PRINT LINE                    01246\n         BAL   R14,PRINT          PRINT LAST LINE                       01247\nENDBLD1  EQU   *                                                        01248\n         BAL   R14,RPRINT         SKIP TO ONE                           01249\n         EJECT                                                          01250\nPRNTXREF EQU   *                                                        01251\n         ST    R6,SAVER10         SAVE BAL REG                          01252\n         TM    SW3,XREF           WAS XREF DONE?                        01253\n         BZ    XREF1              NO, TRY FMID LIST                     01254\n         NI    SW3,255-XREF       DISABLE XREF                          01255\n         L     R8,XREFADDR        ADDR OF XREF TABLE                    01256\n         L     R11,ESIZE          ENTRY SIZE MINUS 1                    01257\n         LTR   R11,R11            IS IT ZERO?                           01258\n         BZ    XREF1              YES, TRY FMID LIST                    01259\n         MVC   SKIPNAME(8),=C'XREF    ' NEW LIST NAME                   01260\n         BAL   R6,PRINTBL         PRINT XREF TABLE                      01261\nXREF1    EQU   *                                                        01262\n         TM    SW,SORT            DID WE DO A SORT?                     01263\n         BO    XREF3              YES, DONT DO FMIDLIST YET             01264\n         TM    SW4,FMIDLIST       IS THERE AN FMID LIST?                01265\n         BZ    XREF2              NO RETURN                             01266\n         NI    SW4,255-FMIDLIST                                         01267\n         L     R8,FMIDADDR        ADDR OF FMID TABLE                    01268\n         L     R11,ESIZE          ENTRY SIZE                            01269\n         LTR   R11,R11            IS IT ZERO                            01270\n         BZ    XREF2              YES, BYPASS PRINT                     01271\n         MVC   SKIPNAME(8),=C'FMIDLIST' NEW LIST NAME                   01272\n         BAL   R14,RPRINT         SKIP TO ONE                           01273\n         BAL   R6,PRINTBL         PRINT FMID TABLE                      01274\nXREF2    EQU   *                                                        01275\n         OI    LCOUNT,X'FF'       FORCE NEW PAGE                        01276\n         BAL   R4,HEADERTN        TRY ENDING HEADER                     01277\nXREF3    EQU   *                                                        01278\n         L     R6,SAVER10         RESTORE BAL REG                       01279\n         BR    R6                                                       01280\n         EJECT                                                          01281\nPRINTBL  EQU   *                                                        01282\n         LA    R4,2               START FOR ADD LINES                   01283\n         ST    R4,PACKDEC+4       SAVE IT                               01284\n         SR    R4,R4                                                    01285\n         ST    R4,WORKAREA        ASSUME ZERO TO START SCAN             01286\n         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY                  01287\n         LA    R15,16(R15)        SKIP OVER ZEROS                       01288\n         ST    R15,LOWENTRY       PUT IT BACK                           01289\n         BALR  R14,0              RETURN FROM PRINT                     01290\n         MVI   MSGAREA,C' '       CLEAR                                 01291\n         MVC   MSGAREA+1(119),MSGAREA  MSGAREA                          01292\n         MVC   MSGAREA+90(8),SKIPNAME LIST NAME TO PRINT LINE           01293\n         MVI   MSGAREA+28,C'*'                                          01294\n         MVI   MSGAREA+58,C'*'                                          01295\n         L     R4,WORKAREA        ARE WE IN ADD LINES?                  01296\n         SRL   R4,1               NO ADD IF COUNT 0 OR 1                01297\n         LTR   R4,R4                                                    01298\n         BNZ   ADDLINE            YES, ADD THEM                         01299\n         L     R15,LOWENTRY       ADDR OF LOWEST ENTRY                  01300\n         C     R15,ENDENTRY       ARE WE AT THE END?                    01301\n         BER   R6                 YES, EXIT                             01302\n         ST    R15,PACKDEC        SAVE LOWENTRY FOR ADDLINE             01303\n         LA    R1,MSGAREA         ADDR FOR MOVE                         01304\n         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES             01305\n         LA    R1,MSGAREA+30      ADDR FOR MOVE                         01306\n         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES             01307\n         LA    R1,MSGAREA+60      ADDR FOR MOVE                         01308\n         BAL   R10,CHKDUP         SCAN FOR MULTIPLE ENTRIES             01309\nPASSCOMP EQU   *                                                        01310\n         ST    R15,LOWENTRY       NEW LOWEST ENTRY                      01311\n         L     R4,WORKAREA        GET MAXIMUM DUP COUNT                 01312\n         LA    R4,1(R4)           ADD 1 IN CASE COUNT IS ODD            01313\n         SRL   R4,1               DIVIDE BY 2 (2 ENTRIES/LINE)          01314\n         A     R4,LCOUNT          PLUS CORRENT PRINT LINE COUNT         01315\n         CL    R4,MAXLINES        WILL THEY ALL FIT ON THIS PAGE?       01316\n         BL    LINESOK            YES, GO PRINT                         01317\n         OI    LCOUNT,X'FF'       NO, FORCE NEW PAGE                    01318\nLINESOK  EQU   *                                                        01319\n         LA    R0,PMSGAREA        PRINT LINE ADDR                       01320\n         B     PRINT              GO PRINT                              01321\nUPCOUNT  EQU   *                                                        01322\n         LA    R15,16(R15)        BUMP TABLE POINTER                    01323\n         LTR   R4,R4              IS THIS FIRST DUP?                    01324\n         BNZ   NOTFIRST           NO, CONTINUE TO COUNT DUPS            01325\n         MVC   20(8,R1),8(R15)    MOVE FIRST DUP TO PRINT               01326\nNOTFIRST EQU   *                                                        01327\n         LA    R4,1(R4)           BUMP MAX COUNTER                      01328\n         B     DUPLOOP                                                  01329\nCHKDUP   EQU   *                                                        01330\n         MVC   0(8,R1),0(R15)     MOVE ELEMENT NAME                     01331\n         MVC   10(8,R1),8(R15)    MOVE SYSMOD NAME                      01332\nDUPLOOP  EQU   *                                                        01333\n         LA    R11,16(R15)        LAST ENTRY CHECK                      01334\n         C     R11,ENDENTRY       END OF TABLE?                         01335\n         BL    DOCOMP             NO, COMPARE TO FIND DUP               01336\n         LA    R10,PASSCOMP       SET RETURN TO DO NO MORE CHECKS       01337\n         B     ENDCOUNT                                                 01338\nDOCOMP   EQU   *                                                        01339\n         CLC   0(8,R15),16(R15)   THIS ENTRY SAME AS NEXT?              01340\n         BE    UPCOUNT            YES, STEP COUNTERS AND LOOP           01341\nENDCOUNT EQU   *                                                        01342\n         LA    R15,16(R15)        BUMP TABLE POINTER                    01343\n         C     R4,WORKAREA        DID WE EXCEED PREVIOUS MAX?           01344\n         BL    SETCOUNT           NO,                                   01345\n         ST    R4,WORKAREA        YES, MAKE THIS NEW MAX                01346\nSETCOUNT EQU   *                                                        01347\n         SR    R4,R4                                                    01348\n         BR    R10                                                      01349\n         EJECT                                                          01350\nADDLOOP  EQU   *                                                        01351\n         SR    R4,R4                                                    01352\nCLOOP    EQU   *                                                        01353\n         LA    R11,16(R15)        END CHECK                             01354\n         C     R11,ENDENTRY       ARE WE AT END?                        01355\n         BE    ENDDUP             YES, GET OUT                          01356\n         CLC   0(8,R15),16(R15)   THIS ENTRY SAME AS NEXT               01357\n         BNER  R10                NO, RETURN                            01358\n         LA    R4,1(R4)           BUMP MAX COUNTER                      01359\n         LA    R15,16(R15)        BUMP TABLE POINTER                    01360\n         C     R4,PACKDEC+4       IS THIS THE CURRENT DUP?              01361\n         BE    MOVEDUP            YES, MOVE IT TO PRINT LINE            01362\n         L     R2,PACKDEC+4       GET CURRENT DUP VALUE                 01363\n         LA    R2,1(R2)           ADD 1                                 01364\n         CR    R4,R2              IS THIS CURRENT VALUE + 1 ?           01365\n         BNE   CLOOP              NO, CONTINUE LOOPING                  01366\n         LA    R4,1(R4)           BUMP COUNTER FOR THIS DUP             01367\n         MVC   10(8,R1),8(R15)    MOVE TO PRINT LINE                    01368\n         B     CLOOP              CONTINUE LOOPING                      01369\nMOVEDUP  EQU   *                                                        01370\n         MVC   0(8,R1),8(R15)     MOVE SYSMOD NAME TO MSGAREA           01371\n         B     CLOOP              LOOP TO FIND NEXT ELEMENT             01372\nADDLINE  EQU   *                                                        01373\n         L     R15,PACKDEC        TABLE START FOR DUP LINES             01374\n         LA    R1,MSGAREA+10      FIRST POSITION                        01375\n         BAL   R10,ADDLOOP                                              01376\n         LA    R1,MSGAREA+40      SECOND POSITION                       01377\n         LA    R15,16(R15)        BUMP TABLE POINTER                    01378\n         BAL   R10,ADDLOOP                                              01379\n         LA    R1,MSGAREA+70      THIRD POSITION                        01380\n         LA    R15,16(R15)        BUMP TABLE POINTER                    01381\n         BAL   R10,ADDLOOP                                              01382\nENDDUP   EQU   *                                                        01383\n         L     R4,PACKDEC+4       CURRENT DUP NUMBER                    01384\n         LA    R4,2(R4)           BUMP BY 2 (2 DUPS/LINE)               01385\n         ST    R4,PACKDEC+4       SAVE IT                               01386\n         C     R4,WORKAREA        GREATER THAN MAX?                     01387\n         BNH   LINESOK            NO,DO NEXT DUP                        01388\n         LA    R4,2               RESET                                 01389\n         ST    R4,PACKDEC+4       DUP COUNTER                           01390\n         SR    R4,R4              RESET                                 01391\n         ST    R4,WORKAREA        MAX COUNTER                           01392\n         B     LINESOK                                                  01393\n         EJECT                                                          01394\n         LTORG                                                          01395\n         EJECT                                                          01396\nPHRA0002 CSECT                                                          01397\n         BALR  R12,0                                                    01398\n         USING *,R12                                                    01399\n         TM    SW2,UT2OPEN        IS SYSUT2 OPEN?                       01400\n         BZ    NOSORT             NO, DONT CLOSE IT                     01401\n         CLOSE MF=(E,OSYSUT2)                                           01402\n         CLOSE MF=(E,OUT2DIR)                                           01403\nNOSORT   EQU   *                                                        01404\n         BALR R12,0               SET NEW BASE                          01405\n         USING *,R12                                                    01406\n         BAL   R14,MSG4           DONE MSG                              01407\n         TM    SW2,OUTOPEN        IS PTFOUT OPEN?                       01408\n         BZ    NOOUTPUT           NO, NO WRITE TO FINISH                01409\n         L     R8,ABSAMOUT        ADDR OF BSAM POINTERS                 01410\n         BAL   R4,CHKWRITE        FINISH UP OUTPUT                      01411\n         CLOSE MF=(E,OPTFOUT)                                           01412\nNOOUTPUT EQU   *                                                        01413\n         TM    SW2,UT1OPEN        IS SYSUT1 OPEN?                       01414\n         BZ    NTSYSUT1           NO, NO CLOSE REQUIRED                 01415\n         CLOSE MF=(E,OSYSUT1)                                           01416\nNTSYSUT1 EQU   *                                                        01417\n         TM    SW2,PUNOPEN        IS SYSPUNCH OPEN?                     01418\n         BZ    NPUNO                                                    01419\n         CLOSE MF=(E,OPUNCH)                                            01420\n         LA    R1,SYSPUNCH                                              01421\n         BAL   R10,FREEPOOL                                             01422\nNPUNO    EQU   *                                                        01423\n         CLOSE MF=(E,ODDS)                                              01424\n         LA    R1,PTFDATA         DCB ADDR                              01425\n         BAL   R10,FREEPOOL       FREE BUFFERS                          01426\n         LA    R1,SYSPRINT        ADDR OF DCB                           01427\n         BAL   R10,FREEPOOL                                             01428\n         LA    R1,PTFIN           ADDR OF DCB                           01429\n         BAL   R10,FREEPOOL                                             01430\n         L     R13,4(R13)          SAVE AREA BACK POINTER               01431\n         FREEMAIN RU,SP=10                                              01432\n         LM    R14,R12,12(R13)    RESTORE REGS                          01433\n         SR    R15,R15            ZERO RETURN CODE NO MATTER WHAT       01434\n         BR    R14                RETURN                                01435\n         SPACE 3                                                        01436\nFREEPOOL EQU   *                                                        01437\n         FREEPOOL (R1)                                                  01438\n         BR    R10                                                      01439\n         EJECT                                                          01440\nPHRA0003 CSECT                                                          01441\nSAVE     DS    18F                                                      01442\n         SPACE 3                                                        01443\nBSAMWRIT EQU   *                                                        01444\n         L     R11,BSAMADDR       ADDR OF BSAM AREA                     01445\n         L     R14,BSAMBUFE       END OF BSAM IO AREA                   01446\n         S     R14,BSAMBUFC       MINUS CURRENT POINTER                 01447\n         BNZ   MOVEBUF            NO, PUT RECORD IN CURRENT BUFFER      01448\nDOWRITE  EQU   *                                                        01449\n         L     R11,BSAMADDR       ADDR OF BSAM AREA                     01450\n         TM    BSAMSW,FIRSTWT     HAVE WE WRITTEN YET?                  01451\n         BZ    NOCHECK            NO, NOTHING TO CHECK                  01452\n         CHECK (R8)                                                     01453\nNOCHECK  EQU   *                                                        01454\n         LA    R14,BSAMBUF        START OF IO BUFFER                    01455\n         L     R1,BSAMBUFC        CURRENT POINTER                       01456\n         CR    R1,R14             EQUAL?                                01457\n         BER   R10                YES, NOTHING TO WRITE                 01458\n         OI    BSAMSW,FIRSTWT+LASTWT                                    01459\n         SR    R1,R14             BLKSIZE FOR WRITE                     01460\n         L     R2,DECDCBAD        DCB ADDR                              01461\n         STH   R1,DCBBLKSI        BLKSIZE FOR WRITE                     01462\n         WRITE (R8),SF,,(R14),'S',MF=E                                  01463\n         L     R11,BSAMLINK       ADDR OF OTHER BUFFER AREA             01464\n         ST    R11,BSAMADDR       MAKE IT CURRENT                       01465\n         BAL   R15,SETUPBUF       RESET BUFFERS                         01466\nMOVEBUF  EQU   *                                                        01467\n         L     R14,BSAMBUFC       CURRENT POINTER                       01468\n         MVC   0(80,R14),RECORD   MOVE OUT RECORD                       01469\n         LA    R14,80(R14)        BUMP POINTER                          01470\n         ST    R14,BSAMBUFC       MAKE CURRENT                          01471\n         BR    R10                                                      01472\n         EJECT                                                          01473\nBSAMREAD EQU   *                                                        01474\n         L     R11,BSAMADDR       ADDR OF BSAM AREA                     01475\n         L     R14,BSAMBUFC       ADDR OF CURRENT ENTRY                 01476\n         S     R14,BSAMBUFE       MINUS END ADDR                        01477\n         BNZ   BUFMOVE            ARE WE AT END?                        01478\nDOREAD   EQU   *                                                        01479\n         CHECK (R8)                                                     01480\n         L     R2,DECDCBAD        DCB ADDR                              01481\n         LH    R14,DCBBLKSI       BYTE COUNT FOR READ                   01482\n         L     R1,DCBIOBA         ADDR OF IOB                           01483\n         SH    R14,22(R1)         MINUS RESIDULE BYTE COUNT             01484\n         STH   R14,RDCOUNT                                              01485\n         BAL   R4,READ                                                  01486\n         ST    R11,BSAMADDR       MAKE IT CURRENT                       01487\n         LA    R14,BSAMBUF        START OF IO AREA                      01488\n         ST    R14,BSAMBUFC       MAKE IT CURRENT                       01489\n         AH    R14,RDCOUNT        LENGTH OF NEXT RECORD                 01490\n         ST    R14,BSAMBUFE       END OF IO AREA                        01491\nBUFMOVE  EQU   *                                                        01492\n         L     R14,BSAMBUFC       CURRENT POINTER                       01493\n         MVC   RECORD(80),0(R14)   MOVE INTO RECORD                     01494\n         LA    R14,80(R14)        BUMP POINTER                          01495\n         ST    R14,BSAMBUFC       MAKE CURRENT                          01496\n         BR    R10                RETURN                                01497\n         SPACE 2                                                        01498\nREAD     EQU   *                                                        01499\n         LA    R14,BSAMBUF        START OF IO AREA                      01500\n         L     R2,DECDCBAD        DCB ADDR                              01501\n         LH    R1,BSAMSIZE        MAX READ BLOCK SIZE                   01502\n         STH   R1,DCBBLKSI                                              01503\n         READ  (R8),SF,,(R14),'S',MF=E                                  01504\n         L     R11,BSAMLINK       ADDR OF OTHER BUFFER AREA             01505\n         BR    R4                                                       01506\n         SPACE 3                                                        01507\nSCANRTN  EQU   *                                                        01508\n         BAL   R10,SPACES         BYPASS SPACES                         01509\n         CLI   REC,C'('           IS IT LEFT PAREN?                     01510\n         BNE   ERROR3             NO, SYNTAX ERROR                      01511\n         LA    R3,1(R3)           BUMP RECORD POINTER                   01512\nSCANRTN1 EQU   *                                                        01513\n         BAL   R10,SPACES         SKIP OVER BLANK CHARACTERS            01514\n         BAL   R10,LENGTH         GET LENGTH OF ELEMENT NAME            01515\n         BR    R11                                                      01516\n         EJECT                                                          01517\nGETBUF   EQU   *                                                        01518\n         LH    R14,DCBBLKSI       MAXIMUM BLOCK SIZE                    01519\n         LA    R14,3(R14)         ROUND UP                              01520\n         SRL   R14,2              TO NEXT                               01521\n         SLL   R14,2              FULL WORD                             01522\n         LA    R1,DSSIZE(R14,R14)      GETMAIN SIZE                     01523\n         GETMAIN R,LV=(R1),SP=10                                        01524\n         ST    R1,0(R8)           SAVE AREA POINTER                     01525\n         LR    R8,R1              BASE FOR POINTER AREA                 01526\n         LH    R15,DCBBLKSI       MAXIMUM BLKSIZE                       01527\n         STH   R15,BSAMSIZE       SAVE FOR LATTER                       01528\n         MVI   BSAMSW,X'00'                                             01529\n         ST    R2,DECDCBAD        SAVE DCB ADDR                         01530\n         LA    R15,PTRSIZE(R8)    ADDR OF FIRST IO AREA                 01531\n         ST    R15,BSAMADDR       SAVE AS FIRST BUFFER POINTER          01532\n         LA    R11,PREFIX(R15,R14) ADDR OF SECOND IO AREA               01533\n         ST    R15,BSAMLINK       LINK BUFFERS                          01534\n         ST    R11,BSAMLINK-BSAMAREA(R15)   TOGETHER                    01535\n         BAL   R15,SETUPBUF      SET UP BUFFER ADDRESSES                01536\n         L     R11,BSAMLINK       OTHER BUFFER NOW                      01537\n         BAL   R15,SETUPBUF      SET UP BUFFER ADDRESSES                01538\n         BR    R7                                                       01539\n         SPACE 3                                                        01540\nSETUPBUF EQU   *                                                        01541\n         LA    R14,BSAMBUF        ADDR OF BSAM BUFFER                   01542\n         ST    R14,BSAMBUFC       MAKE IT CURRENT                       01543\n         AH    R14,BSAMSIZE       ADD MAXIMUM BLKSIZE                   01544\n         ST    R14,BSAMBUFE       SAVE IN END POINTER                   01545\n         BR    R15                                                      01546\n         EJECT                                                          01547\nCHKWRITE EQU   *                                                        01548\n         NI    BSAMSW,255-LASTWT                                        01549\n         BAL   R10,DOWRITE        WRITE LAST BUFFER                     01550\n         TM    BSAMSW,LASTWT                                            01551\n         BZ    NOLWRITE                                                 01552\n         CHECK (R8)                                                     01553\nNOLWRITE EQU   *                                                        01554\n         NI    BSAMSW,255-FIRSTWT-LASTWT                                01555\nRESETBUF EQU   *                                                        01556\n         BAL   R15,SETUPBUF       SET UP BUFFER ADDRESSES               01557\n         L     R11,BSAMLINK       ADDR OF OTHER BUFFER                  01558\n         BAL   R15,SETUPBUF       SET UP BUFFER ADDRESSES               01559\n         BR    R4                                                       01560\n         EJECT                                                          01561\nLENGTH   EQU   *                                                        01562\n         LR    R5,R3              START OF SCAN                         01563\nLENGTH1  EQU   *                                                        01564\n         C     R5,RECEND          END OF FIELD?                         01565\n         BCR   10,R10             YES, RETURN WITH THIS LENGTH          01566\n         CLI   0(R5),C' '         IS IT A BLANK?                        01567\n         BE    LENGTH2            YES, RETURN WITH THIS LENGTH          01568\n         CLI   0(R5),C'('         IS IT A RIGHT PAREN?                  01569\n         BE    LENGTH2            YES, RETURN WITH THIS LENGTH          01570\n         CLI   0(R5),C')'         IS IT A LEFT PAREN?                   01571\n         BE    LENGTH2            YES, RETURN WITH THIS LENGTH          01572\n         CLI   0(R5),C','         IS IT A COMMA?                        01573\n         BE    LENGTH2            YES, RETURN WITH THIS LENGTH          01574\n         LA    R5,1(R5)           BUMP BY ONE                           01575\n         B     LENGTH1                                                  01576\nLENGTH2  EQU   *                                                        01577\n         SR    R5,R3              CALCULATE LENGTH                      01578\n         BR    R10                RETURN                                01579\n         SPACE 3                                                        01580\nSPACES1  EQU   *                                                        01581\n         CLI   REC,SPACE          IS THIS A SPACE?                      01582\n         BNE   CKCOMMA            CHECK IF ITS A COMMA                  01583\nCKNEXT   EQU   *                                                        01584\n         LA    R3,1(R3)           DUMP RECORD POINTER                   01585\nSPACES   EQU   *                                                        01586\n         C     R3,RECEND          END OF RECORD?                        01587\n         BCR   10,R6              YES, RETURN                           01588\n         B     SPACES1                                                  01589\nCKCOMMA  EQU   *                                                        01590\n         CLI   REC,COMMA          IS IT A COMMA?                        01591\n         BNER  R10                NO, RETURN                            01592\n         B     CKNEXT             YES, CONTINUE CHECKING FOR NO SPACE   01593\n         EJECT                                                          01594\nERROR1   EQU   *                                                        01595\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01596\n         DC    AL1(L'EMSG1-1)                                           01597\nEMSG1    DC    C'UNKNOWN KEYWORD'                                       01598\n         DS    0H                                                       01599\nERROR2   EQU   *                                                        01600\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01601\n         DC    AL1(L'EMSG2-1)                                           01602\nEMSG2    DC    C'SYSMOD NAME MUST 7 CHARACTERS'                         01603\n         DS    0H                                                       01604\nERROR3   EQU   *                                                        01605\n         MVC   EMSG3+23(7),STOWA  MOVE SYSMOD NAME TO MSG               01606\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01607\n         DC    AL1(L'EMSG3-1)                                           01608\nEMSG3    DC    C'SYNTAX ERROR IN SYSMOD        '                        01609\n         DS    0H                                                       01610\nERROR4   EQU   *                                                        01611\n         BAL   R10,PUTEMSG        LINK TO ERROR PRINT                   01612\n         DC    AL1(L'EMSG4-1)                                           01613\nEMSG4    DC    C'SYSMOD IS TOO LARGE FOR TABLE- DO NOT USE NOMOD'       01614\n         DS    0H                                                       01615\nERROR5   EQU   *                                                        01616\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01617\n         DC    AL1(L'EMSG5-1)                                           01618\nEMSG5    DC    C'DUPLICATE KEYWORD'                                     01619\n         DS    0H                                                       01620\nERROR6   EQU   *                                                        01621\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01622\n         DC    AL1(L'EMSG6-1)                                           01623\nEMSG6    DC    C'SYNTAX ERROR'                                          01624\n         DS    0H                                                       01625\nERROR7   EQU   *                                                        01626\n         BAL   R10,ERRPRINT       LINK TO ERROR PRINT                   01627\n         DC    AL1(L'EMSG7-1)                                           01628\nEMSG7    DC    C'SYSMOD LIST TOO LARGE, SPECIFY LARGER LIST SIZE'       01629\n         DS    0H                                                       01630\nERROR8   EQU   *                                                        01631\n         BAL   R10,PUTEMSG        LINK TO ERROR PRINT                   01632\n         DC    AL1(L'EMSG8-1)                                           01633\nEMSG8    DC    C'INSUFFICIENT DIRECTORY SPACE FOR SYSUT2'               01634\n         DS    0H                                                       01635\nERROR9   EQU   *                                                        01636\n         LA    R14,ABEND          ABEND AFTER PRINT                     01637\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01638\n         DC    AL1(L'EMSG9-1)                                           01639\nEMSG9    DC    C'STOW RC=8 FOR ADD REQUEST'                             01640\n         DS    0H                                                       01641\nERROR10  EQU   *                                                        01642\n         BAL   R10,PUTEMSG                                              01643\n         DC    AL1(L'EMSG10-1)                                          01644\nEMSG10   DC    C'SYSUT2 DD MISSING'                                     01645\n         EJECT                                                          01646\n         DS    0H                                                       01647\nERROR11  EQU   *                                                        01648\n         BAL   R10,PUTEMSG                                              01649\n         DC    AL1(L'EMSG11-1)                                          01650\nEMSG11   DC    C'SYSUT1 DD MISSING'                                     01651\n         DS    0H                                                       01652\nERROR12  EQU   *                                                        01653\n         BAL   R10,PUTEMSG                                              01654\n         DC    AL1(L'EMSG12-1)                                          01655\nEMSG12   DC    C'EXEC CARD PARMS EXCEED LENGTH OF 100'                  01656\n         DS    0H                                                       01657\nERROR13  EQU   *                                                        01658\n         BAL   R10,PUTEMSG                                              01659\n         DC    AL1(L'EMSG13-1)                                          01660\nEMSG13   DC    C'BLOCK PRINT REQUESTED BUT IEFSD095 NOT LINKED'         01661\n         DS    0H                                                       01662\nMSG1     EQU   *                                                        01663\n         MVC   IMSG1+17(7),STOWA  MOVE NAME TO MSG                      01664\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01665\n         DC    AL1(L'IMSG1-1)                                           01666\nIMSG1    DC    C'DUPLICATE OF PTF         FOUND, LAST COPY USED'        01667\n         DS    0H                                                       01668\nMSG2     EQU   *                                                        01669\n         L     R4,RECCOUNT        CURRENT RECORD COUNT                  01670\n         CVD   R4,PACKDEC         CONVERT TO DECIMAL                    01671\n         SR    R4,R4              CLEAR COUNTER                         01672\n         ST    R4,RECCOUNT        FOR NEXT TIME                         01673\n         OI    PACKDEC+7,X'0F'    FIX UP LAST BYTE                      01674\n         MVC   IMSG2B(9),EDITMASK MAKE RECORD COUNT                     01675\n         ED    IMSG2B(8),PACKDEC+4 PRINTABLE                            01676\n         LA    R0,IMSG2P                                                01677\n         B     PRINT                                                    01678\nIMSG2P   DC    X'09'                                                    01679\nIMSG2    DC    0CL20'*',20C'*'                                          01680\nIMSG2A   DC    C' END OF PTF         ** '                               01681\nIMSG2B   DC    0CL57'*',C'         RECORDS ',20C'*',20C' '              01682\n         DC    20C' '                                                   01683\n         DS    0H                                                       01684\nMSG3     EQU   *                                                        01685\n         MVC   RECORD+90(8),STOWA NAME TO RIGHT MARGIN                  01686\n         MVC   IMSG2+32(8),STOWA  MOVE NAME TO MSG                      01687\n         MVC   IMSG2+90(8),STOWA  NAME TO RIGHT MARGIN                  01688\n         MVC   IMSG3+25(8),STOWA  MOVE NAME TO MSG                      01689\n         MVC   IMSG3+90(8),STOWA  NAME TO RIGHT MARGIN                  01690\n         LA    R0,IMSG3P                                                01691\n         B     PRINT                                                    01692\nIMSG3P   DC    X'09'                                                    01693\nIMSG3    DC    0CL20'*',20C'*'                                          01694\nIMSG3A   DC    C' PTF         '                                         01695\nIMSG3B   DC    0CL67'*',47C'*',20C' '                                   01696\n         DC    20C' '                                                   01697\n         EJECT                                                          01698\n         DS    0H                                                       01699\nMSG4     EQU   *                                                        01700\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01701\n         DC    AL1(L'IMSG4-1)                                           01702\nIMSG4    DC    C'PROCESSING COMPLETE'                                   01703\n         DS    0H                                                       01704\nMSG5     EQU   *                                                        01705\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01706\n         DC    AL1(L'IMSG5-1)                                           01707\nIMSG5    DC    C'PTF         NOT FOUND'                                 01708\n         DS    0H                                                       01709\nMSG6     EQU   *                                                        01710\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01711\n         DC    AL1(L'IMSG6-1)                                           01712\nIMSG6    DC    C'READING PTFOUT'                                        01713\n         DS    0H                                                       01714\nMSG7     EQU   *                                                        01715\n         BAL   R10,MSGPRINT       LINK TO PRINT MSG RTN                 01716\n         DC    AL1(L'IMSG7-1)                                           01717\nIMSG7    DC    C'READING PTFIN'                                         01718\n         DS    0H                                                       01719\nMSG8     EQU   *                                                        01720\n         SR    R11,R11            MAKE ENTRY SIZE                       01721\n         ST    R11,ESIZE          ZERO                                  01722\n         LR    R14,R6             SET RETURN ADDR                       01723\n         BAL   R10,MSGPRINT       PRINT MSG                             01724\n         DC    AL1(L'IMSG8-1)                                           01725\nIMSG8    DC    C'PTFLIST OR XREF TABLE OVERFLOW--FUNCTION DISABLED'     01726\n         DS    0H                                                       01727\nMSG9     EQU   *                                                        01728\n         MVC   IMSG9A(7),STOWA    SYSMOD NAME TO MSG                    01729\n         MVC   IMSG9B(8),TEMPNAME ELEMENT NAME TO MSG                   01730\n         BAL   R10,MSGPRINT       PRINT MSG                             01731\n         DC    AL1(L'IMSG9+L'IMSG9A+L'IMSG9B-1)                         01732\nIMSG9    DC    C'NOMOD PROCESSING--SYSMOD '                             01733\nIMSG9A   DC    C'        MODULE ELEMENT '                               01734\nIMSG9B   DC    C'         DELETED'                                      01735\n         DS    0H                                                       01736\nMSG10    EQU   *                                                        01737\n         MVC   IMSG10(L'IMSG9+L'IMSG9A+L'IMSG9B),IMSG9                  01738\n         MVC   IMSG10+90(8),STOWA                                       01739\n         LA    R0,IMSG10P                                               01740\n         B     PRINT                                                    01741\nIMSG10P  DC    X'09'                                                    01742\nIMSG10   DC    CL120' '                                                 01743\n         EJECT                                                          01744\n         DS    0H                                                       01745\nABEND    EQU   *                                                        01746\n         ABEND 1,DUMP                                                   01747\n         SPACE 3                                                        01748\nEMOVE    MVC   MSGAREA(0),1(R10)                                        01749\nERRPRINT EQU   *                                                        01750\n         LA    R0,PRECORD         PRINT ADDR FOR RECORD                 01751\n         BAL   R14,MPRINT         LINK TO SYSPRINT RTN                  01752\n         MVI   RECORD,C' '                                              01753\n         MVC   RECORD+1(119),RECORD  MOVE BLANKS ACCROSS RECORD         01754\n         MVI   REC,C'*'                                                 01755\n         LA    R0,PRECORD                                               01756\n         BAL   R14,MPRINT         LINK TO SYSPRINT RTN                  01757\nPUTEMSG  EQU   *                                                        01758\n         BAL   R14,MSGPRINT       GO DO PRINT                           01759\n         CALL  PHRA0002           CLEAN UP AND EXIT                     01760\n         SPACE 3                                                        01761\nMSGPRINT EQU   *                                                        01762\n         MVI   MSGAREA,C' '  BLANK TO MSG AREA                          01763\n         MVC   MSGAREA+1(119),MSGAREA   CLEAR TO BLANKS                 01764\n         IC    R1,0(R10)          GET MSG LENGTH BYTE                   01765\n         EX    R1,EMOVE                                                 01766\n         LA    R0,PMSGAREA                                              01767\nMPRINT   EQU   *                                                        01768\n         LA    R2,SYSPRINT        DCB ADDR                              01769\n         LR    R1,R2                                                    01770\n         L     R15,DCBWRITE                                             01771\n         BR    R15                                                      01772\n         SPACE 3                                                        01773\nRPRINT   EQU   *                                                        01774\n         LA    R0,SKIP            SKIP TO ONE                           01775\n         SR    R15,R15            SET LINE COUNT TO ZERO                01776\n         B     RPRINT1                                                  01777\nPRINT    EQU   *                                                        01778\n         L     R15,LCOUNT         CURRENT LINE COUNT                    01779\n         CL    R15,MAXLINES       ARE WE AT MAX?                        01780\n         BL    NOSKIP             NO, DO PRINT                          01781\n         STM   R14,R1,PRINTSAV    SAVE REGS OVER SKIP TO 1              01782\n         PUT   PTFDATA,SKIP       SKIP TO 1                             01783\n         LM    R14,R1,PRINTSAV                                          01784\n         SR    R15,R15            RESTART LINE COUNT                    01785\nNOSKIP   EQU   *                                                        01786\n         LA    R15,1(R15)                                               01787\nRPRINT1  EQU   *                                                        01788\n         ST    R15,LCOUNT         SAVE LINE COUNT                       01789\n         LA    R2,PTFDATA                                               01790\n         LR    R1,R2              DCB ADDR FOR PUT                      01791\n         L     R15,DCBWRITE       ADDR OF PUT ROUTINE                   01792\n         BR    R15                BRANCH TO PUT ROUTINE                 01793\n         EJECT                                                          01794\nTBLSORT  EQU   *                                                        01795\n         L     R11,ESIZE          ENTRY SIZE                            01796\n         LTR   R11,R11            IS ENTRY SIZE ZERO?                   01797\n         BZR   R6                 YES, RETURN                           01798\n         L     R14,LOWENTRY       ADDR OF LOWEST ENTRY                  01799\n         LA    R0,TSTART          START OF TABLE                        01800\n         CR    R0,R14             IS TABLE FULL?                        01801\n         BE    MSG8               PUT OUT ERROR MSG                     01802\n         LR    R15,R14            SAVE START POINTER                    01803\nCOMPLOOP EQU   *                                                        01804\n         EX    R11,COMP1          COMPARE OBJECT TO TABLE ENTRY         01805\n         BER   R6                 DO NOT MAKE DUPLICATE ENTRIES         01806\n         BNH   MOVEIT             MOVE IF NOT HIGHER THAN TABLE         01807\n         ST    R15,WORKAREA       INSERT ADDR                           01808\n         LA    R15,1(R11,R15)     INCREMENT TABLE POINTER               01809\n         C     R15,ENDENTRY       END OF TABLE?                         01810\n         BNE   COMPLOOP           NO, LOOP TO COMPARE                   01811\nMOVEIT   EQU   *                                                        01812\n         SR    R15,R14            LENGTH OF MOVE                        01813\n         LR    R1,R11             ENTRY SIZE MINUS 1                    01814\n         LA    R1,1(R1)           ENTRY SIZE                            01815\n         L     R0,LOWENTRY        ADDR OF LOWEST ENTRY                  01816\n         SR    R0,R1              NEW LOWEST ENTRY ADDR                 01817\n         ST    R0,LOWENTRY        SAVE IT                               01818\n         LR    R1,R15             LENGTH OF MOVE                        01819\n         MVCL  R0,R14             DO MOVE                               01820\n         L     R15,WORKAREA       INSERT ADDR                           01821\n         EX    R11,MOVETBL1        PLACE ENTRY INTO TABLE               01822\n         BR    R6                                                       01823\n         SPACE 3                                                        01824\nCOMP1    CLC   0(0,R10),0(R15)                                          01825\nMOVETBL1 MVC   0(0,R15),0(R10)                                          01826\n         EJECT                                                          01827\nR0       EQU   0                                                        01828\nR1       EQU   1                                                        01829\nR2       EQU   2                                                        01830\nR3       EQU   3                                                        01831\nR4       EQU   4                                                        01832\nR5       EQU   5                                                        01833\nR6       EQU   6                                                        01834\nR7       EQU   7                                                        01835\nR8       EQU   8                                                        01836\nR9       EQU   9                                                        01837\nR10      EQU   10                                                       01838\nR11      EQU   11                                                       01839\nR12      EQU   12                                                       01840\nR13      EQU   13                                                       01841\nR14      EQU   14                                                       01842\nR15      EQU   15                                                       01843\n         SPACE 3                                                        01844\nCOMMA    EQU   C','                                                     01845\nSPACE    EQU   C' '                                                     01846\nSW       DC    X'00'                                                    01847\nHEADER   EQU   128                                                      01848\nEXCLUDE  EQU   64                                                       01849\nNRDBACK  EQU   32                                                       01850\nNOMOD    EQU   16                                                       01851\nLIST     EQU   8                                                        01852\nSORT     EQU   4                                                        01853\nPTFSEL   EQU   2                                                        01854\nDISPOLD  EQU   1                                                        01855\nSW2      DC    X'00'                                                    01856\nUT2OPEN  EQU   128                                                      01857\nINNOMOD  EQU   64                                                       01858\nUT1LOOP  EQU   32                                                       01859\nUT1OPEN  EQU   16                                                       01860\nOUTOPEN  EQU   8                                                        01861\nPUNOPEN  EQU   4                                                        01862\nSYSMOD   EQU   2                                                        01863\nPHEADER  EQU   1                                                        01864\nSW3      DC    X'00'                                                    01865\nXREF     EQU   128                                                      01866\nPTFLIST  EQU   64                                                       01867\nNOMERGE  EQU   32                                                       01868\nEJECT    EQU   16                                                       01869\nDOSCAN   EQU   8                                                        01870\nEOFPTFIN EQU   4                                                        01871\nSYINOPEN EQU   2                                                        01872\nBLOCK    EQU   1                                                        01873\nSW4      DC    X'00'                                                    01874\nNLISTALL EQU   128                                                      01875\nNCOMMENT EQU   64                                                       01876\nLISTREC  EQU   32                                                       01877\nFMIDLIST EQU   16                                                       01878\nLINES    EQU   8                                                        01879\nNINVER   EQU   4                                                        01880\nFMIDPARN EQU   2                                                        01881\nFMIDID   EQU   1                                                        01882\n         EJECT                                                          01883\n         PRINT NOGEN                                                    01884\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PO,MACRF=(R,W),BLKSIZE=3040,        X01885\n               RECFM=U,EODAD=UT2EOF,EXLST=XLIST                         01886\nUT2DIR   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=R,KEYLEN=8,EODAD=DIREOF,   X01887\n               RECFM=F,LRECL=256,BLKSIZE=256                            01888\nPTFIN    DCB   DDNAME=PTFIN,DSORG=PS,EODAD=PTFINEOF,MACRF=GM,LRECL=80   01889\nPTFOUT   DCB   DDNAME=PTFOUT,DSORG=PS,MACRF=(R,W),EXLST=XLIST,         X01890\n               EODAD=POUTEOF                                            01891\nSYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,LRECL=80,EXLST=XLIST   01892\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,BLKSIZE=121,         X01893\n               MACRF=PM,RECFM=FM                                        01894\nPTFDATA  DCB   DDNAME=PTFDATA,DSORG=PS,LRECL=121,MACRF=PM,RECFM=FBM     01895\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(R,W),BLKSIZE=3040,        X01896\n               RECFM=U,EODAD=UT1EOF,EXLST=XLIST                         01897\nOUT2DIR  OPEN  (UT2DIR,INPUT),MF=L                                      01898\nOPUNCH   OPEN  (SYSPUNCH,OUTPUT),MF=L                                   01899\nOSYSUT1  OPEN  (SYSUT1,OUTIN),MF=L                                      01900\nOSYSUT2  OPEN  (SYSUT2,OUTIN),MF=L                                      01901\nOPTFOUT  OPEN  (PTFOUT,INOUT),MF=L                                      01902\nODDS     OPEN  (PTFIN,,SYSPRINT,OUTPUT,PTFDATA,OUTPUT),MF=L             01903\nTADDR    DC    A(1)         ENTRY SIZE * SYSMODS                        01904\nXREFADDR DC    A(8)         ENTRY SIZE * SYSMODS * ELEMENTS/SYSMOD      01905\nFMIDADDR DC    A(4)         ENTRY SIZE * SYSMODS * ++VER/SYSMOD         01906\nSMCOUNT  DC    A(1500)      DEFAULT SYSMOD COUNT VALUE                  01907\nMAXLINES DC    F'55'                                                    01908\nFOURTEEN DC    F'14'                                                    01909\nLCOUNT   DC    F'55'                                                    01910\nAPTFLIST DC    F'50'                                                    01911\nNAMELIST DC    F'800'                                                   01912\nAPUTRTN  DC    A(PUTPTF)                                                01913\nRECEND   DC    A(RECORD+100)                                            01914\nUSERL    DC    A(STODATSZ)                                              01915\nTTRMASK  DC    (L'STOTTR)X'FF',(L'STOCTTRN)X'00'                        01916\nXLIST    DC    X'87',AL3(INFMJFCB)                                      01917\nBLKPARM  DC    A(STOWA)                                                 01918\n         DC    A(COUNT)                                                 01919\n         DC    A(MSGAREA)                                               01920\n         DC    A(DATASIZE)                                              01921\nCOUNT    DC    F'0'                                                     01922\nDATASIZE DC    F'7'                                                     01923\nBLOCKPT  DC    V(IEFSD095)        SYS1.AOSB0                            01924\nMAXCOUNT DC    F'13'                                                    01925\nRECCOUNT DC    F'0'                                                     01926\nEDITMASK DC    X'402020202020202040'                                    01927\nSKIP     DC    X'8B',CL90'       SKIP TO ONE'                           01928\nSKIPNAME DC    30C' '                                                   01929\nPRECORD  DC    X'09'                                                    01930\nRECORD   DC    120C' '                                                  01931\nERECORD  EQU   RECORD+71                                                01932\nPMSGAREA DC    X'09'                                                    01933\nMSGAREA  DC    120C' '                                                  01934\n         EJECT                                                          01935\n         LTORG                                                          01936\nPACKDEC  DS    D                                                        01937\nENDPTFL  DS    F                                                        01938\nENDNAMEL DS    F                                                        01939\nCNAMEL   DS    F                                                        01940\nABSAMUT1 DS    F                                                        01941\nABSAMUT2 DS    F                                                        01942\nABSAMOUT DS    F                                                        01943\nPRINTSAV DS    4F                                                       01944\nAGETRTN  DS    F                                                        01945\nSAVER10  DS    F                                                        01946\nCURDE    DS    F                                                        01947\n         DS    0F                                                       01948\nJFCB     IEFJFCBN LIST=YES                                              01949\nTEMPNAME DS    16C                                                      01950\nSTOWA    DS    CL(STOWSIZE)                                             01951\nKEY      DS    8C                                                       01952\nLEN      DS    2C                                                       01953\nDIR      DS    254C                                                     01954\n         DCBD  DSORG=(PS,PO)                                            01955\n         END                                                            01956\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHRANQU1": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x01\\x00\\x85%?\\x01\\x16\\x19\\x7f\\x16W\\x00%\\x00%\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-09-10T00:00:00", "modifydate": "2016-07-15T16:57:01", "lines": 37, "newlines": 37, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBF  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//******************************************************************//\n//*   PTF FILE PROCESSING WITH THE MULTIPLE UTILITY PROGRAM        *//\n//*       P H R A N Q U E                                          *//\n//******************************************************************//\n//*        KEYWORDS\n//*   BLOCK    -\n//*   EJECT     -\n//*   LINES     -\n//*   PTFLIST   -\n//*   XREF      -\n//*   FMIDLIST  -\n//*   SORT      -\n//*   EXCLUDE   -\n//*   NOMOD     -\n//*   MERGE     -\n//*   NOMERGE   -\n//*\n//PTMASSAG EXEC PGM=PHRANQUE,REGION=5000K\n//STEPLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//ABNLIGNR  DD  DUMMY\n//SYSPRINT  DD  SYSOUT=*\n//SYSPUNCH  DD  DUMMY\n//PTFIN     DD  DISP=SHR,DSN=SBGOLOB.PTFSAMP\n//PTFOUT    DD  DUMMY\n//PTFDATA   DD  DISP=(NEW,CATLG),DSN=SBGOLOB.PHRANQUE.PTFDATA,\n//   DCB=(RECFM=FBM,LRECL=121,BLKSIZE=3630),\n//   SPACE=(TRK,(60,60),RLSE),UNIT=3390,VOL=SER=WORKS3\n//SYSUT1    DD  DUMMY\n//SYSUT2    DD  DISP=(NEW,PASS),DSN=&&TEMPPDS,UNIT=SYSDA,\n//   SPACE=(CYL,(50,30,300)),VOL=SER=WORK93\n//SYSIN     DD  *\n BLOCK SORT XREF FMIDLIST\n PTFLIST LINES(60) HEADER(PUT1510) EJECT\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHRANQU2": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00X\\x00\\x85%?\\x01\\x16\\x19\\x7f\\x16V\\x00%\\x00%\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-09-10T00:00:00", "modifydate": "2016-07-15T16:56:58", "lines": 37, "newlines": 37, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBF  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//******************************************************************//\n//*   PTF FILE PROCESSING WITH THE MULTIPLE UTILITY PROGRAM        *//\n//*       P H R A N Q U E                                          *//\n//******************************************************************//\n//*        KEYWORDS\n//*   BLOCK    -\n//*   EJECT     -\n//*   LINES     -\n//*   PTFLIST   -\n//*   XREF      -\n//*   FMIDLIST  -\n//*   SORT      -\n//*   EXCLUDE   -\n//*   NOMOD     -\n//*   MERGE     -\n//*   NOMERGE   -\n//*\n//PTMASSAG EXEC PGM=PHRANQUX,REGION=5000K\n//STEPLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//ABNLIGNR  DD  DUMMY\n//SYSPRINT  DD  SYSOUT=*\n//SYSPUNCH  DD  DUMMY\n//PTFIN     DD  DISP=SHR,DSN=SBGOLOB.PTFSAMP\n//PTFOUT    DD  DUMMY\n//PTFDATA   DD  DISP=(NEW,CATLG),DSN=SBGOLOB.PHRANQUX.PTFDATA,\n//   DCB=(RECFM=FBM,LRECL=121,BLKSIZE=3630),\n//   SPACE=(TRK,(60,60),RLSE),UNIT=3390,VOL=SER=WORKS3\n//SYSUT1    DD  DUMMY\n//SYSUT2    DD  DISP=(NEW,PASS),DSN=&&TEMPPDS,UNIT=SYSDA,\n//   SPACE=(CYL,(50,30,300)),VOL=SER=WORK93\n//SYSIN     DD  *\n BLOCK SORT XREF FMIDLIST\n PTFLIST LINES(60) HEADER(PUT1510) EJECT\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT289/FILE289.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT289", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}