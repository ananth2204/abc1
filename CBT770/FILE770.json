{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012747000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 940576, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE770.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE770.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x10\\x07'", "DS1TRBAL": "b'L^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x059\\x00\\x06\\x05:\\x00\\x07\\x00\\x11'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x008\\x01\\x19\\x01o\\x01\\x19\\x01o\\x14\\x19\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-16T00:00:00", "modifydate": "2019-01-16T14:19:38", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  770\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE770\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 8,877 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/16/19    14:19:38    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOCTXT": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070?\\x01\\x070?\\x07B\\x03Y\\x03Y\\x00\\x00\\xe3\\xc5\\xe7\\xe3\\xc4\\xd6\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-30T00:00:00", "modifydate": "2007-10-30T07:42:00", "lines": 857, "newlines": 857, "modlines": 0, "user": "TEXTDOC"}, "text": "\nzCBT Automation Tools\n) 2006 - Deru Sudibyo\n\n\nWhat is zCBT?\n\nzCBT is a miniature of zJOS.  zCBT is the simplest solution for\nz/OS system event management at no cost.  You don't need special\nskill to automate your system using zCBT. Once zCBT is properly\nsetup, you will very able to manage your system events using very\nsimple rexx scripting.  All you need is rexx skill.\n\nzCBT is a combined of subsystem functions and resource manager\nwhich run on z/OS as a subsystem, instead of an address space.\nzCBT subsystem supports 5 types of events:\n\nMessages (MSG) events for both WTO and WTOR. Message is trapped\nbefore sent to console, hence you can optionally suppress it. By\ntrapping substring of message text, you can do several actions.\nFor WTOR message, you can reply it.\n\nCommand (CMD) events.  Command is trapped before sent console,\nhence you can optionally suppress it.  This is an opportunity for\nyou to have your own console commands.  By preparing rexx routine\nto trap certain command verbs (regardless they are valid\ncommands) and their associated actions, you will have your own\ncommands.\n\nEnd-of-jobstep (EOS) events for both jobs and STCs.  EOS event is\ntrapped at almost the time of its occurrence and reporting\ncondition codes. If you are a smart programmer, by using zCBT you\ncan develop your own scheduler in rexx language.\n\nEnd-of-job (EOJ) events for jobs and STCs.  EOJ event is\nsimulated from all related EOS previously occurred.  Hence, there\nis a short time delay (less than 1 sec).\n\nTime-of-day (TOD) events.  TOD is very common event people can\ntrap.  Internally it just STIMER or STIMERM macro which doesn't\nneed authorization as privileged routine.  Since rexx able to\nobtain date and time, zCBT only support TOD time event for both\nclock and interval time.\n\nThe way zCBT subsystem supports system automation is by providing\nsome rexx functions.  Request regarding which event you want to\ntrap is sent to zCBT as function arguments.  Trapped event\ninformation is then returned to you as result value of the issued\nfunction.  Although rexx is executed synchronously, you can\nhowever, trap multiple events within a single rexx program.\nCBTIVP member of REXXLIB dataset gives you example how to handle\nmultiple events.\n\nYour rexx program can run on TSO TMP session, TSO batch or\nnon-TSO job.  To run CBTIVP, you can start JCBTEST1 member of\nJCLLIB as either normal STC or under MSTR subsystem.   If you\nneed zCBT to automate your system startup, you must run your rexx\nprogram as STC under MSTR subsystem.\n\n\nzCBT Supported Rexx Functions\n\nYou can easily handle 5 types of events, message, command,\nend-of-jobstep (EOS), end-of-job (EOJ) and time-of-day (TOD) by\nusing ordinary rexx scripting or programming. To do so, zCBT\nprovides 7 rexx functions, these are:\n\ncbcmd()\ncbevent()\ncbserver()\ncbset()\ncbwait()\ncbwto()\ncbwtor()\n\n\nzCBT Installation\n\nzCBT package is in TSO XMIT format and reside in ZIP file.  To\ninstall it, do the following steps:\n\nExtract zCBT.FREEWARE.XMI and CBTSETUP.REX files from ZIP.\n\nLog in to your TSO user.  Your TSO user must have system support\nor administration authorization.\n\nUpload zCBT.FREEWARE.XMI file onto your z/OS.  Transfer must be\nin BINARY mode.  Target must be a sequential dataset with FB 80\nrecord format.  Use any name to meet your naming standard.\n\nUpload CBTSETUP.REX file onto your z/OS.    Transfer must be in\nASCII mode.  Target must be a member of partitioned dataset (PDS\nor PDSE) which is concatenated in your existing SYSEXEC or\nSYSPROC file of TSO user you are currently logging on.  Targeted\nmember name must be CBTSETUP.\n\nSelect TSO command shell panel (option 6) or menu bar choice 4,\nthen issue the following command:\n\n  CBTSETUP DSN=xmi_file_name PREF=hlq\n  Where:\n  xmi_file_name is uploaded zCBT package dataset name\n  hlq is high level qualifier you prefer for all zCBT datasets.\n\nUpon completion of CBTSETUP, 6 zCBT datasets are extracted from the package:\n  hlq.CBT.LOADLIB .\n  hlq.CBT.REXXLIB\n  hlq.CBT.SAMPLIB\n  hlq.CBT.SRCLIB\n  hlq.CBT.MACLIB\n  hlq.CBT.JCLLIB\n\nRegister hlq.CBT.LOADLIB into APF and apply it.\n\nRead @README member of hlq.CBT.SAMPLIB carefully.  Follow the\ninstructions and recommendation in @README member to customize\nZCBT, CBTIPL, IEALPA00, IEFSSN00, JCBTEST1 and JCBTEST2 members.\n\nCopy customized ZCBT, CBTIPL and JCBTEST1 members of SAMPLIB\ndataset into your current PROCLIB.\n\nCopy or merge customized IEALPA00 and IEFSSN00 members of SAMPLIB\ninto your current PARMLIB.\n\nStart ZCBT under master subsystem, e.g. START ZCBT,SUB=MSTR.  It\nwill setup a subsystem named CBT.  If you prefer to use different\nname, start with the following command:\n\nSTART ZCBT,SUB=MSTR,SSN=subsysname\n\nNote that, if IEALPA00 and IEFSSN00 samples are implemented, you\ndon't need to start ZCBT in next IPL.\n\n\nzCBT Verification\n\nOnce ZCBT is brought up, zCBT subsystem is active and ready for\nautomation or EMS.  The STC ZCBT itself immediately down when\nsetup is complete. To make sure zCBT is working properly, do the\nfollowing verification steps: Assume you have customized JCBTEST1\nand JCBTEST2 members of SAMPLIB dataset, and JCBTEST1 is ready in\nPROCLIB.  Start JCBTEST1 either under primary subsystem (START\nJCBTEST1) or under master subsystem (START JCBTEST1,SUB=MSTR).\nIssue command CBT LIST on console to see event definition\ncurrently requested by JCBTEST1.  Submit customized JCBTEST2.\nSee the log or console.\n\nJCBTEST1 issues cbset() function to define events and request\nzCBT subsystem to collect information of these defined event each\ntime they occur.   Then issue cbevent() function without argument\nto wait and receive information regarding previously requested\nevents.   cbevent() is iterated until all requested events are\nreceived.    It only issue WTO message using cbwto() function as\naction against each event occurrence.\n\nJCBTEST2 is a 2-step job to generate event requested by JCBTEST1.\nStep 1 is to generate MSG and EOS events.  Step 2 is to generate\nCMD and EOS events.  When the job terminate, EOJ event is\ngenerated.\n\n\nzCBT Usage and License\n\nBy learning rexx program CBTIVP (called by job JCBTEST1), CBTIVP1\nand CBTIVP2 (called by job JCBTEST2), and CBTIPL (called by job\nCBTIPL) in REXXLIB dataset, you would understand how to use zCBT.\nNothing special and does not need additional skill.   As a\nfreeware, you can use zCBT any time at no cost.   However, as a\nfreeware product, all the common term of use of freeware are\napplicable to zCBT.   Although you may use it in your production\nsystem, you may not use its parts or components in any commercial\nactivities.\n\nzCBT consists of 2 program modules, CBTREX and CBTEMS.  CBTREX\nmodule is a rexx functions package module.  To give you a chance\nto add some more functions, CBTREX and all associated macros\nsource codes are provided.   If you are assembler or C\nprogrammer, you can easily implement your innovation by enhancing\nthe CBTREX module.\n\nCBTEMS is a core of zCBT.  The source code of CBTEMS is not\nprovided.  This to avoid abusing or violence of the usage of\nzCBT, since it can be enhanced to become complete EMS solution as\nnormally provided by ISVs.\n\nzCBT uses ESR SVC code 212.  If you have constraint with this\ncode on your environment and expect to use other code, please\nsend request to the author.   A complete package with different\nESR code will be sent to you.\n\n\n Automating Your System using zCBT\n\nAs a toy, zCBT is quite capable to manage system events to\nautomate your z/OS system.  You can implement system automation\nonly with a single rexx program.  By combining cbset() and\ncbevent() functions smartly, your rexx program capable to capture\nand handle any occurrence of expected messages, commands,\nend-of-step (EOS) and end-of-job (EOJ) events.  Both cbset() and\ncbevent() functions are the main design of zCBT subsystem.   The\nfollowing example illustrates the logic skeleton of how rexx\nprogram can manage system event smartly based on zCBT\narchitecture.\n\n/* -------------------------------------- */\n/* Request zCBT for the following events: */\n/* -------------------------------------- */\nset1   = zjset('MSG','msg_string')\nset2   = zjset('CMD','cmd_string','SUPPRESS')\nset3   = zjset('EOS','jobname.stepname')\nset4   = zjset('EOJ','jobname')\n\n/* -------------------------------------- */\n/* Wait notification from zCBT if any one */\n/* of the above events occurs.            */\n/* -------------------------------------- */\nDo forever\n   event  = zjevent()\n   evtype = strip(word(event,1))\n   Select\n      When evtype = 'MSG' then call MSG_handler\n      When evtype = 'CMD' then call CMD_handler\n      When evtype = 'EOS' then call EOS_handler\n      When evtype = 'EOJ' then call EOJ_handler\n      Otherwise NOP\n   End\nEnd\nExit\n\nMSG_handler:\n/* routine to handle message events */\nReturn\n\nCMD_handler:\n/* routine to handle command events */\nReturn\n\nEOS_handler:\n/* routine to handle end-of-step events */\nReturn\n\nEOJ_handler:\n/* routine to handle end-of-job events */\nReturn\n\nOther function such as cbstate(), cbcmd() and cbwait() in\naddition, will give you chance to enhance your rexx program\nperforming EMS functions smarter.   You can detect whether a\nworkload or job is up by using cbstate() function.   To issue a\nconsole command, you can use cbcmd() function.  Cbwait() function\nis to enter to wait state based on either TOD clock or interval.\n\nUnless really required, you should not use cbwait() function\nwithin combined cbset() and cbevent() functions mechanism.  Doing\nso might impact to the timing precision of events occurrences.\nIt can even worst when cbwait() is issued in the wrong place.\n\n\nzCBT Functions Reference\n\ncbcmd()\n\ncbcmd() is a rexx function to pass command text to console for\nexecution.  As it is a privileged function which normally\nforbidden in rexx environment, it needs authorization from zCBT.\nHence it can only be used when zCBT subsystem is active.\nNevertheless, the use of cbcmd() also depend on your local\nsecurity setting.\n\nSyntax:\n\nvar = cbcmd('command_text')\n\nor\n\nvar = cbcmd(cmdvar)\n\nWhere:\n'command_text' is text of command string, which must be enclosed\nwith either single or double quote.\n\ncmdvar is variable name to contain text of command string.\n\nvar is variable name to contain function result.  Possible results are:\n\n  'ISSUED' - command was issued\n  'UNAUTHORIZED nnn' - command was not granted\n  nnn is zCBT authorization exception code\n\nExample:\n\nTo issue MVS command D PROG,APF, you can write it in rexx as follow:\n\nx = cbcmd('D PROG,APF')\n\nAlternatively,   you can use variable as follow:\n\ncmd = \"D PROG,APF\"\nx = cbcmd(cmd)\nif x = 'ISSUED' then ...\nelse ...\n\n\ncbevent()\n\ncbevent() is a rexx function to request zCBT subsystem for\nnotification when a certain event as specified in its arguments\noccurs, or when any event previously requested by using cbset()\nfunction occurs, and optionally perform an immediate simple\naction.  When issued, cbevent() function may entering wait state\ncondition to listen notification from zCBT subsystem regarding\nthe occurrence of previously selected event.  You must realize\nthat it will be sleeping forever and only wake up when the event\noccurs.\n\nWhen issued with arguments, cbevent() only listens an event as\nspecified in the arguments and perform a simple action if one\nspecified in argument.  Function is immediately woken up and\nterminated when the event occurs.  Actually when notified by zCBT\nsubsystem that the expected event occurs.  To wait next similar\nevent, you must iterate it.  By using cbevent() function with\narguments, your rexx program can only listen a single event at a\ntime.\n\nWhen issued without argument, cbevent() listens all previously\nrequested events by using cbset() function.  Hence, cbevent()\nwithout argument must be preceded by cbset() function.  This\ngives you chance to your rexx program to listen multiple events\nat a time.  When one of expected events occurs, cbevent() is\nimmediately woken up and terminated.  To continue wait for next\nevent, either similar or other event, you must iterate it.   As\ncbset() function does not support immediate action, no action is\nperform when cbevent() function without argument is woken up.\nAll action must be handle in your rexx program by using cbcmd()\nfunction.\n\nAs it is a privileged function, it needs authorization from zCBT\nsubsystem.  Hence it can only be used when zCBT subsystem is\nactive.  Besides, it actively communicates with zCBT subsystem to\nsend request to and receive event information from zCBT\nsubsystem.  Nevertheless, the use of cbevent() also depend on\nyour local security setting.\n\nSyntax:\n\nvar = cbevent('evtype','evtext',\u00dd'SUPPRESS'\u00a8,'action')\n\nor\n\nvar = cbevent(evtypevar,evtextvar,optvar,actionvar)\n\nor\n\nvar = cbevent()    /* without argument */\n\nWhere:\n\nArguments:\n  'evtype' (expression) or evtypevar (variable) is type of event\n  in 3-character abbreviation, which MSG for message event, CMD\n  for command event, EOJ for end-of-job event or EOS for\n  end-of-step event.\n\n  'evtext' (expression) or evtextvar (variable) is text or string\n  represents part of the source of event information you want to\n  capture or trap.\n\n  'SUPPRESS' (expression) or optvar (variable) is suppression\n  option for MSG or CMD event only.  If optvar (variable) is\n  used, it must contain 'SUPPRESS' or nulls or blanks.\n\n  SUPPRESS for MSG event causes message to be suppressed.  Hence\n  messages no longer eligible for subsequent trapping for either\n  cbevent() invocations or EMS table entries.\n\n  SUPPRESS for CMD event causes command to be suppressed and not\n  executed.  Hence command no longer eligible for subsequent\n  trapping for either cbevent() invocations or EMS table entries.\n\n  'action' (expression) or actionvar (variable) is text to\n  express a simple action you want to perform.  There are 3\n  possible simple actions:\n\n  'MSG=messagetext'\n  'CMD=commandtext'\n  'REPLY=replytext'\n\nvar is variable name to contain function result, which depends on\nevent type:\n\n  For MSG event from WTO message, var contains:\n  'MSG message text'\n  For MSG event from WTOR message, var contains:\n  'MSG (REPLYID=nn) message text'\n  For CMD event, var contains:\n  'CMD command text'\n  For EOJ event, var contains:\n  'EOJ JOB=jobname SCC=nnn MAXCC=nnn '\n  For EOS event, var contains:\n  'EOS JOB=jobname STEP=stepname SCC=nnn UCC=nnn'\n  If one or more arguments were invalid or missing, var contains:\n  'ERROR_ARGUMENT'\n  If command was not granted, var contains:\n  'UNAUTHORIZED nnn'\n  nnn is zCBT authorization exception code\n\nExample:\n\nTo capture command D APF and change it to D PROG,APF, you can\nwrite it in rexx as follow:\n\nX = cbevent('CMD','D APF','SUPPRESS',\n            'CMD=d prog,apf')\n\nAlternatively,   you can use variable as follows:\n\ncmd = \"D APF\"\nxcmd = \"CMD=D PROG,APF\"\nx = cbevent('cmd',cmd,'SUPPRESS',xcmd)\nif x = cmd then ...\n\nWith option SUPPRESS, D APF command will appear as a valid\ncommand and result as if you issue D PROG,APF command.\n\nNotes:\n\nWhen a CMD or MSG event occurs and more than one cbevent() and/or\ncbset() functions are issued at the same time (by several users,\neach cbevent() is notified in sequent.  Therefore, you must care\nof suppression option of cbevent() function.  If event is\nsuppressed, event may no longer eligible for either subsequent\ncbevent().\n\nWhen more than one cbevent() functions are active at the same\ntime to capture WTOR message, only one user can issue reply\ncommand.  Other reply will result no outstanding reply.\n\nOnce cbevent() got missed, it will remain stay in wait state\nuntil similar event occurs.  Unless very urgent situation, you\nshould not cancel it.  Doing so, causes an orphaned EVB control\nblock and will remain in ECSA until next IPL.\n\ncbevent() function can be issued without argument.  This only\nvalid when you have requested events collection by issuing\ncbset() function.  Otherwise, cbevent() will result\nunpredictable.\n\n\ncbset()\n\ncbset() is a rexx function to request zCBT subsystem for\nnotification when a certain event as specified in its arguments\noccurs. Unlike cbevent(), once request is confirmed by zCBT\nsubsystem, cbset() is not entering to wait state until notified\nby zCBT subsystem.  Rather, cbset() immediately finish and return\nto your rexx program when request is confirmed. You responsible\nto handle the notification from zCBT subsystem by issuing\ncbevent() function without argument.\n\nSuch mechanism gives chance to your rexx program to handle\nmultiple events or multiple types of events at a time.  You may\nissue several cbset() for all expected events, then followed by\niterated cbevent() without argument as in the following example:\n\nreq1 = cbset('MSG','$HASP492')\nreq2 = cbset('MSG','IST020I')\nreq3 = cbset('CMD','P','SUPPRESS')\nDo forever\n   event = cbevent()\n   evtype = strip(word(event,1))\n   Select\n      When evtype = 'MSG' then,\n         Do\n            msgid = strip(word(event,2))\n            Select\n               When msgid = '$HASP492' then,\n                  Do\n                     action1 = cbcmd('START VTAM')\n                     action2 = cbcmd('START SDSF')\n                  End\n               When msgid = 'IST020I' then,\n                  Do\n                     action1 = cbcmd('START TSO')\n                     action2 = cbcmd('START CICSPROD')\n                  End\n               Otherwise NOP\n             End\n         End\n      When evtype = 'CMD' then,\n         Do\n            cmdverb = strip(word(event,2))\n            cmdtarg = strip(word(event,3))\n            If cmdverb = 'P' then,\n               If cmdtarg = 'VTAM' then,\n                  action3 = cbcmd('Z NET,QUICK')\n               Else,\n                  action3 = cbcmd('STOP ' || cmdtarg)\n         End\n      Otherwise NOP\nEnd\n\nThe above example shows you how rexx program can handle $HASP392\nand IST020I messages and STOP command.   When $HASP392 message\noccurs, this indicates JES2 initialization complete, then start\nVTAM and SDSF.   When IST020I message occurs, this indicates VTAM\ninitialization complete, then start TSO and CICSPROD.   Such idea\nis very common in EMS implementation.\n\nOne thing you should keep in mind is the way this example handle\nP command.  P is a short form of STOP command verb.  When P\ncommand issuance occurs, suppress it to avoid execution.  Then,\ncheck the command argument, which is a name of workload or job to\nbe brought down.   If the targeted job is VTAM, then issue Z\nNET,QUICK.   Else, issue STOP for the same target.  This will\naffect as if P command applicable for VTAM, which is actually\nnot.   Although STOP and P are actually executed by the same\nprocessor, STOP verb won't be trapped since ZCBT subsystem only\nevaluate the command text.\n\nCombined cbset() and cbevent() functions is the main design idea\nof zCBT subsystem.  Both functions gives you chance to automate\nactions against several MSG, CMD, EOS and EOJ events in a single\nrexx program which fully follows your own idea.\n\nAs it is a privileged function, it needs authorization from zCBT.\nNevertheless, the use of cbset() also depend on your local\nsecurity setting.\n\nSyntax:\n\nvar = cbset('evtype','evtext',\u00dd'SUPPRESS'\u00a8)\n\nor\n\nvar = cbset(evtypevar,evtextvar,optvar)\n\nWhere:\n\nArguments:\n  'evtype' (expression) or evtypevar (variable) is type of event\n  in 3-character abbreviation, which MSG for message event, CMD\n  for command event, EOJ for end-of-job event or EOS for\n  end-of-step event.\n\n  'evtext' (expression) or evtextvar (variable) is text or string\n  represents part of the source of event information you want to\n  capture or trap.\n\n  'SUPPRESS' (expression) or optvar (variable) is suppression\n  option for MSG or CMD event only.  If optvar (variable) is\n  used, it must contain 'SUPPRESS' or nulls or blanks.\n\n  SUPPRESS for MSG event causes message to be suppressed.  Hence\n  messages no longer eligible for subsequent trapping.\n\n  SUPPRESS for CMD event causes command to be suppressed and not\n  executed.  Hence command no longer eligible for subsequent\n  trapping.\n\nvar is variable name to contain function result:\n  If request was confirmed, var contains:\n  'SET'\n  If one or more arguments were invalid or missing, var contains:\n  'ERROR_ARGUMENT'\n  If authorization was not granted, var contains:\n  'UNAUTHORIZED nnn'\n  nnn is zJOS authorization exception code\n\nExample:\n\nSee the above example.\n\nNote:\n\nLogical path length between cbset() and cbevent() functions\nissuance could be vary, depend on your rexx program logic.  If\nthe path length is quite significant, event might occur prior to\ncbevent() function issuance.  In such case, cbevent() will\nimmediately return to your rexx program, since event information\nhas already given in your program area.  There is no indicator\ntelling you whether event occurs earlier than cbevent() function\nissuance.  You, therefore, should care of path length if time\nprecision is required.\n\n\ncbstate()\n\ncbstate() is a rexx function to obtain state information of any\nlocal workload.  As it is a privileged function, it needs\nauthorization from zCBT.  Nevertheless, the use of cbstate() also\ndepend on your local security setting.\n\nSyntax:\n\nvar = cbstate('workload_name')\n\nor\n\nvar = cbstate(namevar)\n\nWhere:\n\n'workload_name' is text of name of workload (jobname), which must\nbe enclosed with either single or double quote.\n\nnamevar is variable name to contain text of workload name\n(jobname).\n\nvar is variable name to contain function result.\n  If workload up, var variable will contain 5 words of:\n  'UP type ASCB=xxxxxxxx ASID=xxxx JOBID=xxxxxxxx'\n  Type is either STC, JOB or TSU\n  If workload down, var contains:\n  'DOWN'\n  If argument invalid (no argument or argument more than 8-byte)\n  'ERROR_ARGUMENT'\n  If authorization not granted by zCBT\n  'UNAUTHORIZED nnn'\n  nnn is zCBT authorization exception code\n\nExample:\n\nTo obtain state information of VTAM, you can write in rexx:\n\nx = cbstate('VTAM')\nvtamstate = word(x,1)\n\nAlternatively,   you can use variable as follow:\n\njob = \"VTAM\"\nx = cbstate(job)\nvtamstate = word(x,1)\n\nUpon completion, if VTAM is up, x may contains:\n\n\"UP STC ASCB=00F8A000 ASID=0021 JOBID=STC09703\"\n\nYou can get all information by parsing the result (x) as follows:\n\nIf vtamstate = 'UP' then,\n   Parse var x,\n      'UP' jobtype 'ASCB=' ascb 'ASID=' asid,\n      'JOBID=' jobid\n\n\ncbwait()\n\ncbwait() is a rexx function to enter to wait state based on TOD\nclock or interval. Entering wait state is not a privileged\nprocess, hence cbwait() function need not authorization. Hence,\nyou can use cbwait() regardless zCBT subsystem is active.  While\nwaiting, your rexx program is suspended until time is expired.\n\nSyntax:\n\nvar = cbwait('timeval')\n\nor\n\nvar = cbwait(timevar)\n\nWhere:\n\n'timeval' is time value, which must be enclosed with either\nsingle or double quote.   Time value must be in the following\nformat:\n\n  TOD value - wait until specified TOD.  Format is:\n  HH:MM:SS\n  Interval value - wait for specified interval.  Formats are:\n  +HH:MM:SS\n  +MM:SS\n  +SS\n\ntimevar is variable name to contain time value.\n\nvar is variable name to contain function result.\n  If wait state was entered:\n  'EXPIRED FOR nnnnnn SECS'\n  If wait state was not entered (for example: already late):\n  'EXPIRED FOR -nnnnnn SECS'\n  If CPU clock was error:\n  'ERROR_CLOCK RC=nnnn'\n  If argument invalid (no argument or argument more than 9-byte)\n  'ERROR_ARGUMENT'\n\nExample:\n\nTo wait until 23:30:00:\n\nx = cbwait('23:30:00')\n\nTo wait for 5 minutes 45 seconds and using variable:\n\ninterval = '+05:45'\nx = cbwait(interval)\n\n\n\ncbwto()\n\ncbwto() is a rexx function to issue WTO message to console.\nIssuing WTO is not a privileged process, hence function need not\nauthorization, and internally is nothing to do with zCBT\nsubsystem.  Hence, you can use cbwto() regardless zCBT subsystem\nis active.\n\nSyntax:\n\nvar = cbwto('message_text')\n\nor\n\nvar = cbwto(msgvar)\n\nWhere:\n\n'message_text' is a text of message to be issued, which must be\nenclosed with either single or double quote.\n\nmsgvar is variable name to contain message text.\n\nvar is variable name to contain function result.\n  If WTO was successfully issued:\n  'ISSUED'\n  If WTO was unsuccessful:\n  'ABORTED'\n  If argument invalid (no argument or argument more than 126-byte\n    length)\n  'ERROR_ARGUMENT'\n\n\nExample:\n\nTo issue \"Good morning!\" to system console:\n\nx = cbwto(Good morning!')\n\ncbwtor()\n\ncbwtor() is a rexx function to issue WTOR message to console.\nIssuing WTOR is not a privileged process, hence function need not\nauthorization.   Hence, you can use cbwto() regardless zCBT\nsubsystem is active.\n\nAs it is WTOR, reply is required to finish the function.  While\nwaiting for reply, your rexx program is suspended until your\nmessage is replied.   Reply text can be any 1 to 54 characters in\nlength.\n\nSyntax:\n\nvar = cbwtor('message_text')\n\nor\n\nvar = cbwtor(msgvar)\n\nWhere:\n\n'message_text' is a text of message to be issued, which must be\nenclosed with either single or double quote.\n\nmsgvar is variable name to contain message text.\n\nvar is variable name to contain function result.\n  If WTOR was successfully issued:\n  'REPLY=replytext'\n  If WTOR was unsuccessful:\n  'ABORTED RC=nnn'\n  If argument invalid (no argument or argument more than 126-byte\n    length)\n  'ERROR_ARGUMENT'\n\nExample:\n\nTo issue \"Good morning!\" to system console and require reply:\n\nx = cbwtor(Good morning!')\n/* check reply text */\nIf substr(x,1,6) = \"REPLY=\" then,\n   Parse var x \"REPLY=\" reply\n\n\nzCBT Commands Reference\n\nzCBT provides 2 subsystem commands to support you managing system\nevents better.   These are LIST and MSG.   As these are subsystem\ncommands, you can only use them when zCBT subsystem is active.\nOtherwise, command will not be recognized and z/OS will reject\nthem as invalid command.\n\n\nLIST Command\n\nLIST command is to display list of listened events which either\nrequested by issuing cbevent() or cbset() functions.   This gives\nyou chance to monitor how many outstanding events listeners.\n\nSyntax\n\nCBT LIST\n\nMSG Command\n\nMSG command is to issue WTO message interactively.   This gives\nyou chance to simulate a certain message to test your rexx\nprogram.\n\nSyntax\n\nCBT MSG message_text\n\n\n\n\n The Author needs Your Help\n\nThe author of zCBT is the author of zJOS.  zJOS is a proven\nintegrated EMS and workload scheduling.   Although zJOS has\nalready marketed locally in Indonesia and currently is running on\nproduction systems, it has no future in Indonesia.   The only way\nto earn better future is if it is acquired by well known ISV.  It\nshould be quite interesting product since not all ISV provide\nsuch solution.  Besides, the automation solution normally is\nquite expensive.\n\nThe author needs help to market it to well known ISV and offers\n50-50 sharing.  If you capable to do it up to close the deal at\nall cost, you will earn 50%.  This rule is applicable to\neverybody.   Hence, if you are the buyer and directly deal with\nthe author, fairly you only need to pay 50% of the price.  Should\nyou are interested to do it, kindly notify the author.\n\nzJOS can handle total automation of multiple z/OS systems\nintegrally.  However, zJOS agent only supports z/OS and late\nOS/390 platforms.  To support other platform, the only effort\nrequired is developing agent for the targeted platform, and zJOS\nbecomes one of enterprise automation solution.\n\nThe standard zJOS agent communication protocol is provided.\nAgent is simple, consists of 2 major processes, IP socket client\nand events listener. Unfortunately, author doesn't have enough\nskill for internal of non-z/OS platforms.  Author offers\nownership sharing to anybody who interested to develop agent for\nopen system and other non-z/OS platforms proportionally.  Should\nyou are the guy, kindly let author know.\n\n\nContact the Author\n\nEmails: @bogor.net, @gmail.com or @SSH\nCompany address and phone: see www.sumbersolusindo.co.id.\nMobile:  +62-812-110-6577\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x082\\x8f\\x01\\x082\\x8f\\x13\\x02\\x00\\x16\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-11-23T00:00:00", "modifydate": "2008-11-23T13:02:00", "lines": 22, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ------------------------------------------------------ */\n//*  BATCH JOB TO CREATE FILES NECESSARY FOR THIS PACKAGE  */\n//* ------------------------------------------------------ */\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(JCLLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.JCLLIB')\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(LOADLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.LOADLIB')\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(MACLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.MACLIB')\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(REXXLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.REXXLIB')\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(SAMPLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.SAMPLIB')\n RECEIVE INDS('CBT.CBT476.FILE770.PDS(SRCLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.SRCLIB')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INSTAL1": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x16\\x01\\x082\\x8f\\x01\\x083\\x0f\\x17&\\x00\\x16\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2008-11-23T00:00:00", "modifydate": "2008-11-25T17:26:16", "lines": 22, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ------------------------------------------------------ */\n//*  BATCH JOB TO CREATE FILES NECESSARY FOR THIS PACKAGE  */\n//* ------------------------------------------------------ */\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(JCLLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.JCLLIB')\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(LOADLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.LOADLIB')\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(MACLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.MACLIB')\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(REXXLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.REXXLIB')\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(SAMPLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.SAMPLIB')\n RECEIVE INDS('SBGOLOB.CBT477.FILE770(SRCLIB)')\n   DSN('SBGOLOB.DERU.ZCBT.SRCLIB')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ZJOS": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x07)o\\x01\\x07)o\"W\\x00.\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-23T00:00:00", "modifydate": "2007-10-23T22:57:49", "lines": 46, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "For Your Information:  About Deru Sudibyo's commercial automation\nproduct, which is called zJOS.  This free offering, zCBT in this\nfile (File 770 of the CBT Tape), is a subset of zJOS.\n\nI am author, owner, architect, and developer of  zJOS-XDI(R), the\nmodern integrated mainframe automation solution package.  zJOS-XDI\nconsists of 3 products, Sekar to automate actions against any\nsystem event, Puspa to automate workloads scheduling and AutoXfer\nto automate spool/report files distribution from mainframe to\nsmall computers.   AutoXfer was done in about 6 months on\npartner's sites.  Whereas Sekar and Puspa were completed during\naround 6 months at home with remote access to partner's system.\nAll products work for either a single or networked mainframe\nhosts.\n\nOn networked mainframes environment, combined Sekar and Puspa\nprovide an integrated automation solution.  Event on any host can\ntrigger actions on several hosts.   A job on any host can be\ntriggered by several job events on several hosts.    All are\nmanaged centrally.   Such functions are very competitive against\nany other automation solution products in the world.  Since in\nfact only few independent software vendors (ISV) provide such\nsolution, zJOS-XDI supposed to be very marketable products.\nShould you curious to try, please kindly download this demo.\n\nzJOS-XDI package is a proven solution.   Nevertheless, as in my\ncountry there is no chance for its future, I decided to sell it to\nany ISV who capable to market it.  Existing local install bases\nare just a step to prove its functionalities and quality in the\nreal world.  It was actually designed to be acquired by world\nclass ISV.\n\nzJOS-XDI currently only supports z/OS and OS/390 platforms.  In\nthe enterprise environment, to support other platforms, all you\nneed is to develop agent for each platform based on zJOS agent\nprotocol design which is already documented.  Should you\ninterested to share with me developing non-mainframe agents, I am\nglad to say welcome.  Once non-mainframe agents are supported,\nzJOS-XDI then becomes world class enterprise automation solution.\n\nBesides, I also produced some freeware as an obligation to my\n\"true world\".   Although currently I am very busy with\nagro-industry activities which is in very critical situation, I am\nstill developing freeware for future contribution.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@DOC": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070?\\x01\\x070?\\x06S\\x05\\xcd\\x05\\xcd\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-30T00:00:00", "modifydate": "2007-10-30T06:53:00", "lines": 1485, "newlines": 1485, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@FILE770": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x003\\x01\\x19\\x01o\\x01\\x19\\x01o\\x14\\x19\\x00d\\x00d\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-16T00:00:00", "modifydate": "2019-01-16T14:19:33", "lines": 100, "newlines": 100, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 770 is from Deru Sudibyo and contains a free z/OS event   *   FILE 770\n//*           management system, which can be used for automation.  *   FILE 770\n//*           Control of the system is from REXX statements, using  *   FILE 770\n//*           a REXX function package which is supplied together    *   FILE 770\n//*           with this system.                                     *   FILE 770\n//*                                                                 *   FILE 770\n//*           email:  Deru Sudibyo <deru.sudibyo@gmail.com>         *   FILE 770\n//*                                                                 *   FILE 770\n//*     Note:  The member CBTSETUP is not necessary in this         *   FILE 770\n//*            pds, but has been included because it is the work    *   FILE 770\n//*            of the author, and it may be necessary in a future   *   FILE 770\n//*            install process.                                     *   FILE 770\n//*                                                                 *   FILE 770\n//*     A description of this package follows:                      *   FILE 770\n//*                                                                 *   FILE 770\n//*     zCBT Automation Tools                                       *   FILE 770\n//*     Copyright (c) 2006   Deru Sudibyo                           *   FILE 770\n//*                                                                 *   FILE 770\n//*     What is zCBT?                                               *   FILE 770\n//*                                                                 *   FILE 770\n//*     zCBT is a miniature of (my commercial package) zJOS.        *   FILE 770\n//*     zCBT is the simplest solution for z/OS system event         *   FILE 770\n//*     management at no cost.  You don't need special skill to     *   FILE 770\n//*     automate your system using zCBT. Once zCBT is properly      *   FILE 770\n//*     setup, you will very able to manage your system events      *   FILE 770\n//*     using very simple rexx scripting.  All you need is rexx     *   FILE 770\n//*     skill.                                                      *   FILE 770\n//*                                                                 *   FILE 770\n//*     zCBT is a combination of subsystem functions and resource   *   FILE 770\n//*     manager which runs on z/OS as a subsystem, instead of an    *   FILE 770\n//*     address space.  zCBT subsystem supports 5 types of          *   FILE 770\n//*     events:                                                     *   FILE 770\n//*                                                                 *   FILE 770\n//*     Messages (MSG) events for both WTO and WTOR. Message is     *   FILE 770\n//*     trapped before sent to console, hence you can optionally    *   FILE 770\n//*     suppress it. By trapping substring of message text, you     *   FILE 770\n//*     can do several actions.  For WTOR message, you can reply    *   FILE 770\n//*     it.                                                         *   FILE 770\n//*                                                                 *   FILE 770\n//*     Command (CMD) events.  Command is trapped before sent       *   FILE 770\n//*     console, hence you can optionally suppress it.  This is     *   FILE 770\n//*     an opportunity for you to have your own console             *   FILE 770\n//*     commands.  By preparing rexx routine to trap certain        *   FILE 770\n//*     command verbs (regardless they are valid commands) and      *   FILE 770\n//*     their associated actions, you will have your own            *   FILE 770\n//*     commands.                                                   *   FILE 770\n//*                                                                 *   FILE 770\n//*     End-of-jobstep (EOS) events for both jobs and STCs.         *   FILE 770\n//*     EOS event is trapped at almost the time of its              *   FILE 770\n//*     occurrence and reporting condition codes. If you are a      *   FILE 770\n//*     smart programmer, by using zCBT you can develop your        *   FILE 770\n//*     own scheduler in rexx language.                             *   FILE 770\n//*                                                                 *   FILE 770\n//*     End-of-job (EOJ) events for jobs and STCs.  EOJ event       *   FILE 770\n//*     is simulated from all related EOS previously occurred.      *   FILE 770\n//*     Hence, there is a short time delay (less than 1 sec).       *   FILE 770\n//*                                                                 *   FILE 770\n//*     Time-of-day (TOD) events.  TOD is very common event         *   FILE 770\n//*     people can trap.  Internally it just STIMER or STIMERM      *   FILE 770\n//*     macro which doesn't need authorization as privileged        *   FILE 770\n//*     routine.  Since rexx able to obtain date and time, zCBT     *   FILE 770\n//*     only support TOD time event for both clock and interval     *   FILE 770\n//*     time.                                                       *   FILE 770\n//*                                                                 *   FILE 770\n//*     The way zCBT subsystem supports system automation is by     *   FILE 770\n//*     providing some rexx functions.  Request regarding which     *   FILE 770\n//*     event you want to trap is sent to zCBT as function          *   FILE 770\n//*     arguments.  Trapped event information is then returned      *   FILE 770\n//*     to you as result value of the issued function.  Although    *   FILE 770\n//*     rexx is executed synchronously, you can however, trap       *   FILE 770\n//*     multiple events within a single rexx program.  CBTIVP       *   FILE 770\n//*     member of REXXLIB dataset gives you example how to          *   FILE 770\n//*     handle multiple events.                                     *   FILE 770\n//*                                                                 *   FILE 770\n//*     Your rexx program can run on TSO TMP session, TSO batch     *   FILE 770\n//*     or non-TSO job.  To run CBTIVP, you can start JCBTEST1      *   FILE 770\n//*     member of JCLLIB as either normal STC or under MSTR         *   FILE 770\n//*     subsystem.   If you need zCBT to automate your system       *   FILE 770\n//*     startup, you must run your rexx program as STC under        *   FILE 770\n//*     MSTR subsystem.                                             *   FILE 770\n//*                                                                 *   FILE 770\n//*     zCBT Supported Rexx Functions                               *   FILE 770\n//*                                                                 *   FILE 770\n//*     You can easily handle 5 types of events, message,           *   FILE 770\n//*     command, end-of-jobstep (EOS), end-of-job (EOJ) and         *   FILE 770\n//*     time-of-day (TOD) by using ordinary rexx scripting or       *   FILE 770\n//*     programming. To do so, zCBT provides 7 rexx functions,      *   FILE 770\n//*     these are:                                                  *   FILE 770\n//*                                                                 *   FILE 770\n//*     cbcmd()                                                     *   FILE 770\n//*     cbevent()                                                   *   FILE 770\n//*     cbserver()                                                  *   FILE 770\n//*     cbset()                                                     *   FILE 770\n//*     cbwait()                                                    *   FILE 770\n//*     cbwto()                                                     *   FILE 770\n//*     cbwtor()                                                    *   FILE 770\n//*                                                                 *   FILE 770\n//*     See the internal documentation for explanations for         *   FILE 770\n//*     each function:  members $DOCTXT (text) or @DOC (MS word).   *   FILE 770\n//*                                                                 *   FILE 770\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CBTSETUP": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070?\\x01\\x070?\\x06Y\\x01?\\x01?\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-30T00:00:00", "modifydate": "2007-10-30T06:59:00", "lines": 319, "newlines": 319, "modlines": 0, "user": "DERU"}, "text": "/*REXX=====================================================*/\n/*                                                         */\n/*          +----------+                                   */\n/*          | CBTSETUP |                                   */\n/*          +----------+                                   */\n/*         zCBT Installation Tool                          */\n/*                                                         */\n/*  Desc  -                                                */\n/*          Rexx program to do zCBT package installation.  */\n/*          This tool will interactively ask for certain   */\n/*          information to complete the installation       */\n/*          steps.                                         */\n/*                                                         */\n/*                                                         */\n/*  Syntax -                                               */\n/*                                                         */\n/*       CBTSETUP DSN=package_dataset                      */\n/*                PREF=prefix                              */\n/*                                                         */\n/*       package_dataset is dataset of uploaded            */\n/*                       ZCBT.FREEWARE.XMI                 */\n/*       prefix is high level qualifier to be used         */\n/*                 for zCBT system datasets                */\n/*       version is current version of XDI you are         */\n/*                  installing (3 digits VRM)              */\n/*                                                         */\n/*                                                         */\n/*  Copyright -                                            */\n/*                                                         */\n/*   (C) 2006 - Deru Sudibyo                               */\n/*                                                         */\n/*=========================================================*/\nMVSinfo = mvsvar('SYSOPSYS')\nOSname  = strip(word(MVSinfo,1))\nOSver   = strip(word(MVSinfo,2))\nOSput   = strip(word(MVSinfo,3))\n\nIf OSname <> \"z/OS\" then,\n   Do\n       Say \"CBTSETUP:\" OSname OSver \"is not supported!!!\"\n       exit\n   End\n\narg argstring\nIf pos(\"DSN=\",argstring) > 0 then,\n   parse var argstring . \"DSN=\" dsn .\nElse dsn = \"\"\nIf pos(\"PREF=\",argstring) > 0 then,\n   parse var argstring . \"PREF=\" hlq .\nElse hlq = \"\"\nIf pos(\"STEP=\",argstring) > 0 then,\n   parse var argstring . \"STEP=\" stp .\nElse stp = \"\"\n\ndsn = strip(dsn)\nhlq = strip(hlq)\nstp = strip(stp)\n\nif dsn = \"\" then,\n    dsn = \"ZCBT.FREEWARE.XMI\"\n\nselect\n   when hlq = \"\" then do\n       pfx  = userid() || \".\"\n       pfx2 = pfx\n   end\n   when hlq = \"NO\" then do\n       pfx  = \"\"\n       pfx2 = userid() || \".\"\n   end\n   otherwise do\n       pfx  = hlq || \".\"\n       pfx2 = pfx\n   end\nend\nif substr(dsn,1,1) = \"'\" then do\n   parse var dsn \"'\" dsn \"'\" .\n   dsn = strip(dsn)\nend\n\nSelect\n   When stp = \"MASTER\" then,\n        Call Install_Master\n   When stp = \"MEMBER\" then,\n        Call Install_Member\n   When stp = \"SETUP\"  then,\n        Call Setup_zCBT\n   Otherwise,\n        If pos(\".XMILIB(\",dsn) > 0 then,\n            Call Install_Member\n        Else,\n            Call Install_Master\nEnd\nExit\n\n/*\n   +----------------------------+\n   | Installing Package Member  |\n   | Dataset name must be       |\n   | NIT.XDIVvrm.PACKAGE.XMI    |\n   +----------------------------+\n*/\nInstall_Member:\nparse var dsn inlib \"(\" mem \")\"\nlibtype = mem\nindsn    = \"'\" || dsn  || \"'\"\nlogdsn   = \"'\" || pfx2 || \"RECEIVE.LOG.LIST\" || random() || \"'\"\noutdsn   =  pfx2 || \"CBT.\" || libtype\nlocaldsn = \"'\" || outdsn || \"'\"\nSelect\n   When mem = \"SRCLIB\" then,\n        nextdsn = inlib || \"(MACLIB)\"\n   When mem = \"MACLIB\" then,\n        nextdsn = inlib || \"(LOADLIB)\"\n   When mem = \"LOADLIB\" then,\n        nextdsn = inlib || \"(JCLLIB)\"\n   When mem = \"JCLLIB\" then,\n        nextdsn = inlib || \"(SAMPLIB)\"\n   When mem = \"SAMPLIB\" then do\n        nextdsn = inlib || \"(REXXLIB)\"\n   End\n   When mem = \"REXXLIB\" then do\n        nextdsn  =  pfx2 || \"CBT.\"\n        stp      = \"SETUP\"\n   End\n   Otherwise nop\nEnd\nIf sysdsn(indsn) = 'OK' then,\n   Signal Issue_Receive\nElse do\n   push \"CBTSETUP DSN=\" nextdsn \" PREF=\" hlq \"STEP=\" stp\n   Exit\nEnd\n\n/*\n   +----------------------------+\n   | Installing Package Master  |\n   | Dataset name must be       |\n   | NIT.XDIVvrm.PACKAGE.XMI    |\n   +----------------------------+\n*/\nInstall_Master:\nindsn    = \"'\" || dsn  || \"'\"\nlogdsn   = \"'\" || pfx2 || \"RECEIVE.LOG.LIST\" || random() || \"'\"\noutdsn   =  pfx2 || \"CBT.XMILIB\"\nlocaldsn = \"'\" || outdsn || \"'\"\nAddress TSO \"DELETE\" localdsn\nnextdsn  = outdsn || \"(SRCLIB)\"\nstp      = \"MEMBER\"\n\nIssue_Receive:\npush \"CBTSETUP DSN=\" nextdsn \" PREF=\" hlq \"STEP=\" stp\npush \"RESTORE DATASET(\" localdsn \") \"\nPush \"RECEIVE  USERID(\" userid() \") \",\n        \" INDATASET(\" indsn \") \",\n        \" LOGDATASET(\" logdsn \") \",\n        \" DISPLAY NONAMES \"\nSay  \"CBTSETUP DSN=\" nextdsn \" PREF=\" hlq \"STEP=\" stp\nExit\n\n\n/*\n   +------------------------------------------------------+\n   | Setting up XDI ..                                    |\n   |                                                      |\n   |    1. Customize XDI clist procedures                 |\n   |    2. Customize XDI STC procedures                   |\n   |    3. Allocate VSAM LDS for DIV                      |\n   |    4. Preparing MVS system for XDI                   |\n   |        a. Update PROG member for APF                 |\n   |        b. Copy XDI procedures to SYS1.PROCLIB        |\n   |        c. Update TSO logon procedure                 |\n   |    5. Notify user to do the rest                     |\n   |                                                      |\n   +------------------------------------------------------+\n*/\nSetup_zCBT:\nDo queued()\n   pull garbage\nEnd\nlibpfx   = dsn\nsamplib  = libpfx || \"SAMPLIB\"\ncbtipl   = \"'\" || samplib || \"(CBTIPL)'\"\niealpa   = \"'\" || samplib || \"(IEALPA00)'\"\njtest1   = \"'\" || samplib || \"(JCBTEST1)'\"\njtest2   = \"'\" || samplib || \"(JCBTEST2)'\"\nzcbt     = \"'\" || samplib || \"(ZCBT)'\"\n\nCall Read_member cbtipl\nIf row.0 > 0 then,\n   Do\n      Call Update_DD\n      Call Write_member cbtipl\n      If result = 0 then,\n         Say \"CBTSETUP:\" cbtipl \"was successfully setup.\"\n   End\n\nCall Read_member jtest1\nIf row.0 > 0 then,\n   Do\n      Call Update_DD\n      Call Write_member jtest1\n      If result = 0 then,\n         Say \"CBTSETUP:\" jtest1 \"was successfully setup.\"\n   End\n\nCall Read_member jtest2\nIf row.0 > 0 then,\n   Do\n      Call Update_DD\n      Call Write_member jtest2\n      If result = 0 then,\n         Say \"CBTSETUP:\" jtest2 \"was successfully setup.\"\n   End\n\nCall Read_member iealpa\nIf row.0 > 0 then,\n   Do\n      Do i = 1 to row.0\n         If pos('INCLUDE LIBRARY(',row.i) > 0 then,\n            Do\n               row.i = \"INCLUDE LIBRARY(\" ||,\n                       libpfx || \"LOADLIB)\"\n               Leave\n            End\n      End\n      Call Write_member iealpa\n      If result = 0 then,\n         Say \"CBTSETUP:\" iealpa \"was successfully setup.\"\n   End\n\nCall Read_member zcbt\nIf row.0 > 0 then,\n   Do\n      Do i = 1 to row.0\n         If pos('//ZCBT PROC SSN=CBT,HLQ=',row.i) > 0 then,\n            Do\n               row.i = \"//ZCBT PROC SSN=CBT,HLQ=\" || hlq\n               Leave\n            End\n      End\n      Call Write_member zcbt\n      If result = 0 then,\n         Say \"CBTSETUP:\" zcbt \"was successfully setup.\"\n   End\nSay \"CBTSETUP: zCBT installation complete.  Read @README in SAMPLIB.\"\nExit\n\n\n\n\nUpdate_DD:\nDo i = 1 to row.0\n     word1 = strip(word(row.i,1))\n     Select\n         When word1 = \"//STEPLIB\" then,\n              row.i = \"//STEPLIB  DD DISP=SHR,DSN=\" ||,\n                      libpfx || \"LOADLIB\"\n         When word1 = \"//SYSEXEC\" then,\n              row.i = \"//SYSEXEC  DD DISP=SHR,DSN=\" ||,\n                      libpfx || \"REXXLIB\"\n         Otherwise NOP\n     End\nEnd\nReturn\n\n/*\n   +----------------------------+\n   | EXECIO Read Lib member     |\n   |                            |\n   +----------------------------+\n*/\nRead_member:\ndrop row.\narg dataset\nAddress TSO\ny = msg(\"OFF\")\n\"NEWSTACK\"\n\"ALLOC FILE(XDIDATA) DA(\" dataset \") SHR\"\n\"EXECIO * DISKR XDIDATA (FINIS STEM ROW.\"\nrcode = rc\n\"FREE FILE(XDIDATA)\"\n\"DELSTACK\"\ny = msg(\"ON\")\nReturn rcode\n\n/*\n   +----------------------------+\n   | EXECIO Write Lib member    |\n   |                            |\n   +----------------------------+\n*/\nWrite_member:\narg dataset\nAddress TSO\ny = msg(\"OFF\")\n\"NEWSTACK\"\nIf sysdsn(dataset) = \"MEMBER NOT FOUND\" then do\n     \"ALLOC FILE(XDIDATA) DA(\" dataset \") OLD\"\n     If RC <> 0 then,\n        \"ALLOC FILE(XDIDATA) DA(\" dataset \") SHR\"\nEnd\nElse,\n     \"ALLOC FILE(XDIDATA) DA(\" dataset \") SHR\"\nIf rc <> 0 then,\n   Do\n      rcode = rc\n      \"DELSTACK\"\n      y = msg(\"ON\")\n      Say \"CBTSETUP: EXECIO\" dataset \"returned RC =\" rcode\n      Return rcode\n   End\n\"EXECIO * DISKW XDIDATA (FINIS STEM ROW.\"\nrcode = rc\n\"FREE FILE(XDIDATA)\"\n\"DELSTACK\"\ny = msg(\"ON\")\nReturn rcode\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLLIB": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x083\\x0f\\x01\\x083\\x0f\\x17\\x15\\x00\\x93\\x00\\x93\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-25T00:00:00", "modifydate": "2008-11-25T17:15:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOADLIB": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070\\x7f\\x01\\x070\\x7f\\x19A\\x01\\xd7\\x01\\xd7\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-11-03T00:00:00", "modifydate": "2007-11-03T19:41:00", "lines": 471, "newlines": 471, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MACLIB": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070\\x7f\\x01\\x070\\x7f\\x19A\\x0b\\x95\\x0b\\x95\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-11-03T00:00:00", "modifydate": "2007-11-03T19:41:00", "lines": 2965, "newlines": 2965, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "REXXLIB": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x083\\x0f\\x01\\x083\\x0f\\x17\"\\x015\\x015\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-25T00:00:00", "modifydate": "2008-11-25T17:22:00", "lines": 309, "newlines": 309, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SAMPLIB": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x083\\x0f\\x01\\x083\\x0f\\x17\"\\x01.\\x01.\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-25T00:00:00", "modifydate": "2008-11-25T17:22:00", "lines": 302, "newlines": 302, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SRCLIB": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x070\\x7f\\x01\\x070\\x7f\\x19A\\x07\\x1c\\x07\\x1c\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-11-03T00:00:00", "modifydate": "2007-11-03T19:41:00", "lines": 1820, "newlines": 1820, "modlines": 0, "user": "DERU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT770/FILE770.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT770", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}