/*REXX=====================================================*/
/*                                                         */
/*          +----------+                                   */
/*          | CBTSETUP |                                   */
/*          +----------+                                   */
/*         zCBT Installation Tool                          */
/*                                                         */
/*  Desc  -                                                */
/*          Rexx program to do zCBT package installation.  */
/*          This tool will interactively ask for certain   */
/*          information to complete the installation       */
/*          steps.                                         */
/*                                                         */
/*                                                         */
/*  Syntax -                                               */
/*                                                         */
/*       CBTSETUP DSN=package_dataset                      */
/*                PREF=prefix                              */
/*                                                         */
/*       package_dataset is dataset of uploaded            */
/*                       ZCBT.FREEWARE.XMI                 */
/*       prefix is high level qualifier to be used         */
/*                 for zCBT system datasets                */
/*       version is current version of XDI you are         */
/*                  installing (3 digits VRM)              */
/*                                                         */
/*                                                         */
/*  Copyright -                                            */
/*                                                         */
/*   (C) 2006 - Deru Sudibyo                               */
/*                                                         */
/*=========================================================*/
MVSinfo = mvsvar('SYSOPSYS')
OSname  = strip(word(MVSinfo,1))
OSver   = strip(word(MVSinfo,2))
OSput   = strip(word(MVSinfo,3))

If OSname <> "z/OS" then,
   Do
       Say "CBTSETUP:" OSname OSver "is not supported!!!"
       exit
   End

arg argstring
If pos("DSN=",argstring) > 0 then,
   parse var argstring . "DSN=" dsn .
Else dsn = ""
If pos("PREF=",argstring) > 0 then,
   parse var argstring . "PREF=" hlq .
Else hlq = ""
If pos("STEP=",argstring) > 0 then,
   parse var argstring . "STEP=" stp .
Else stp = ""

dsn = strip(dsn)
hlq = strip(hlq)
stp = strip(stp)

if dsn = "" then,
    dsn = "ZCBT.FREEWARE.XMI"

select
   when hlq = "" then do
       pfx  = userid() || "."
       pfx2 = pfx
   end
   when hlq = "NO" then do
       pfx  = ""
       pfx2 = userid() || "."
   end
   otherwise do
       pfx  = hlq || "."
       pfx2 = pfx
   end
end
if substr(dsn,1,1) = "'" then do
   parse var dsn "'" dsn "'" .
   dsn = strip(dsn)
end

Select
   When stp = "MASTER" then,
        Call Install_Master
   When stp = "MEMBER" then,
        Call Install_Member
   When stp = "SETUP"  then,
        Call Setup_zCBT
   Otherwise,
        If pos(".XMILIB(",dsn) > 0 then,
            Call Install_Member
        Else,
            Call Install_Master
End
Exit

/*
   +----------------------------+
   | Installing Package Member  |
   | Dataset name must be       |
   | NIT.XDIVvrm.PACKAGE.XMI    |
   +----------------------------+
*/
Install_Member:
parse var dsn inlib "(" mem ")"
libtype = mem
indsn    = "'" || dsn  || "'"
logdsn   = "'" || pfx2 || "RECEIVE.LOG.LIST" || random() || "'"
outdsn   =  pfx2 || "CBT." || libtype
localdsn = "'" || outdsn || "'"
Select
   When mem = "SRCLIB" then,
        nextdsn = inlib || "(MACLIB)"
   When mem = "MACLIB" then,
        nextdsn = inlib || "(LOADLIB)"
   When mem = "LOADLIB" then,
        nextdsn = inlib || "(JCLLIB)"
   When mem = "JCLLIB" then,
        nextdsn = inlib || "(SAMPLIB)"
   When mem = "SAMPLIB" then do
        nextdsn = inlib || "(REXXLIB)"
   End
   When mem = "REXXLIB" then do
        nextdsn  =  pfx2 || "CBT."
        stp      = "SETUP"
   End
   Otherwise nop
End
If sysdsn(indsn) = 'OK' then,
   Signal Issue_Receive
Else do
   push "CBTSETUP DSN=" nextdsn " PREF=" hlq "STEP=" stp
   Exit
End

/*
   +----------------------------+
   | Installing Package Master  |
   | Dataset name must be       |
   | NIT.XDIVvrm.PACKAGE.XMI    |
   +----------------------------+
*/
Install_Master:
indsn    = "'" || dsn  || "'"
logdsn   = "'" || pfx2 || "RECEIVE.LOG.LIST" || random() || "'"
outdsn   =  pfx2 || "CBT.XMILIB"
localdsn = "'" || outdsn || "'"
Address TSO "DELETE" localdsn
nextdsn  = outdsn || "(SRCLIB)"
stp      = "MEMBER"

Issue_Receive:
push "CBTSETUP DSN=" nextdsn " PREF=" hlq "STEP=" stp
push "RESTORE DATASET(" localdsn ") "
Push "RECEIVE  USERID(" userid() ") ",
        " INDATASET(" indsn ") ",
        " LOGDATASET(" logdsn ") ",
        " DISPLAY NONAMES "
Say  "CBTSETUP DSN=" nextdsn " PREF=" hlq "STEP=" stp
Exit


/*
   +------------------------------------------------------+
   | Setting up XDI ..                                    |
   |                                                      |
   |    1. Customize XDI clist procedures                 |
   |    2. Customize XDI STC procedures                   |
   |    3. Allocate VSAM LDS for DIV                      |
   |    4. Preparing MVS system for XDI                   |
   |        a. Update PROG member for APF                 |
   |        b. Copy XDI procedures to SYS1.PROCLIB        |
   |        c. Update TSO logon procedure                 |
   |    5. Notify user to do the rest                     |
   |                                                      |
   +------------------------------------------------------+
*/
Setup_zCBT:
Do queued()
   pull garbage
End
libpfx   = dsn
samplib  = libpfx || "SAMPLIB"
cbtipl   = "'" || samplib || "(CBTIPL)'"
iealpa   = "'" || samplib || "(IEALPA00)'"
jtest1   = "'" || samplib || "(JCBTEST1)'"
jtest2   = "'" || samplib || "(JCBTEST2)'"
zcbt     = "'" || samplib || "(ZCBT)'"

Call Read_member cbtipl
If row.0 > 0 then,
   Do
      Call Update_DD
      Call Write_member cbtipl
      If result = 0 then,
         Say "CBTSETUP:" cbtipl "was successfully setup."
   End

Call Read_member jtest1
If row.0 > 0 then,
   Do
      Call Update_DD
      Call Write_member jtest1
      If result = 0 then,
         Say "CBTSETUP:" jtest1 "was successfully setup."
   End

Call Read_member jtest2
If row.0 > 0 then,
   Do
      Call Update_DD
      Call Write_member jtest2
      If result = 0 then,
         Say "CBTSETUP:" jtest2 "was successfully setup."
   End

Call Read_member iealpa
If row.0 > 0 then,
   Do
      Do i = 1 to row.0
         If pos('INCLUDE LIBRARY(',row.i) > 0 then,
            Do
               row.i = "INCLUDE LIBRARY(" ||,
                       libpfx || "LOADLIB)"
               Leave
            End
      End
      Call Write_member iealpa
      If result = 0 then,
         Say "CBTSETUP:" iealpa "was successfully setup."
   End

Call Read_member zcbt
If row.0 > 0 then,
   Do
      Do i = 1 to row.0
         If pos('//ZCBT PROC SSN=CBT,HLQ=',row.i) > 0 then,
            Do
               row.i = "//ZCBT PROC SSN=CBT,HLQ=" || hlq
               Leave
            End
      End
      Call Write_member zcbt
      If result = 0 then,
         Say "CBTSETUP:" zcbt "was successfully setup."
   End
Say "CBTSETUP: zCBT installation complete.  Read @README in SAMPLIB."
Exit




Update_DD:
Do i = 1 to row.0
     word1 = strip(word(row.i,1))
     Select
         When word1 = "//STEPLIB" then,
              row.i = "//STEPLIB  DD DISP=SHR,DSN=" ||,
                      libpfx || "LOADLIB"
         When word1 = "//SYSEXEC" then,
              row.i = "//SYSEXEC  DD DISP=SHR,DSN=" ||,
                      libpfx || "REXXLIB"
         Otherwise NOP
     End
End
Return

/*
   +----------------------------+
   | EXECIO Read Lib member     |
   |                            |
   +----------------------------+
*/
Read_member:
drop row.
arg dataset
Address TSO
y = msg("OFF")
"NEWSTACK"
"ALLOC FILE(XDIDATA) DA(" dataset ") SHR"
"EXECIO * DISKR XDIDATA (FINIS STEM ROW."
rcode = rc
"FREE FILE(XDIDATA)"
"DELSTACK"
y = msg("ON")
Return rcode

/*
   +----------------------------+
   | EXECIO Write Lib member    |
   |                            |
   +----------------------------+
*/
Write_member:
arg dataset
Address TSO
y = msg("OFF")
"NEWSTACK"
If sysdsn(dataset) = "MEMBER NOT FOUND" then do
     "ALLOC FILE(XDIDATA) DA(" dataset ") OLD"
     If RC <> 0 then,
        "ALLOC FILE(XDIDATA) DA(" dataset ") SHR"
End
Else,
     "ALLOC FILE(XDIDATA) DA(" dataset ") SHR"
If rc <> 0 then,
   Do
      rcode = rc
      "DELSTACK"
      y = msg("ON")
      Say "CBTSETUP: EXECIO" dataset "returned RC =" rcode
      Return rcode
   End
"EXECIO * DISKW XDIDATA (FINIS STEM ROW."
rcode = rc
"FREE FILE(XDIDATA)"
"DELSTACK"
y = msg("ON")
Return rcode

