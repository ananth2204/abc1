*
*
*                     +----------+
*     Module Name  -  | CBTSVA   |
*                     +----------+
*
*
*     Function -
*               Map of large save area for working space
*
*     Operating Environment -
*        Type              Macro
*        Location          local/private area
*        Created by        Each module during invocation
*        Pointed by        Reg 13
*
*
*
*
*     Syntax -
*
*
*     Operation -
*
*
*     Author -
*          Name     :  Deru Sudibyo
*                      Software Architect
*          Copyright:  (C)1998 Deru Sudibyo
*
*     Disclaimer -
*         This module is developed as a personal support, and is
*         not a part of CA support matterials.  The purpose is as
*         a temporary solution or even just a sample.  Therefor,
*         further modifications and maintenance are client's
*         responsibilities.
*
*     Modification Log -
*     +--------+------------+--------+---------------------------+
*     | Date   | Engineer   | V.R.L. | Description               |
*     +--------+------------+--------+---------------------------+
*     |98/02/23| Deru S.    | 1.0.0. | First development         |
*     |        |            |        |                           |
*     |        |            |        |                           |
*     |        |            |        |                           |
*     |        |            |        |                           |
*     |        |            |        |                           |
*     |        |            |        |                           |
*     +--------+------------+--------+---------------------------+
*
         MACRO
&LABEL   CBTSVA &TYPE=DSECT,&AMODE=31,&RMODE=ANY,&PRINT=NOGEN
         COPY  CBTGBLVR
         lclb  &ssi
         lclc  &pfx,&S
CBTSVA   &TYPE
         AIF   ('&TYPE' NE 'CSECT').BEGIN
CBTSVA   AMODE &AMODE
CBTSVA   RMODE &RMODE
.BEGIN   ANOP
         print &PRINT
SVA      EQU   *
           DC  9D'0'           for standard save area
           org SVA+4
SVAold     dc  f'0'            slot for old reg 13
           org ,
SVAregs    DC  16F'0'          temporary save area
SVAmsgregs DC  16F'0'          temporary save area
SVAreg14   DC  F'0'            R14 save area
         @vglobal place=SVA
SVAuserarea equ *
SVAbase1   DC  A(*-*)          Base 1 address save area
SVAbase2   DC  A(*-*)          Base 2 address save area
SVAexit1   DC  A(*-*)          Exit 1 address save area
SVAexit2   DC  A(*-*)          Exit 2 address save area
SVAcom     DC  A(*-*)          COM address
SVAeot     DC  A(*-*)          EOT address
SVAdomid   DC  A(*-*)          MSG DOM id
SVADOMlist dc  A(*-*,*-*)      DOM id list start and end ptr
SVADOMcurr dc  A(*-*)          Current DOM id ptr
SVAmid     dc  cl5' '          module id
SVAflags   dc  xl1'00'         general purpose flags
           dc  xl2'00'         reserved
SVArcode   dc  A(*-*)          return code
SVArsn     dc  A(*-*)          reason code
SVAcorr    dc  A(*-*)          address correction
SVAkey     dc  A(*-*)          PSW key
SVAaccode  dc  A(*-*)          ASC code
         space ,
SVAECB   ds    f               Own local ECB
SVAECBcopy ds  0f              copy of own local ECB
           ds  x               reserved for wait/post bits
SVAECBarg  ds  x               argument
SVAECBcomp ds  x               component targeted
SVAECBreq  ds  x               request
         space ,
SVArecov1  dc  a(*-*)          address of recovery routine 1
SVArecov2  dc  a(*-*)          address of recovery routine 2
SVAecpsw   dc  xl8'00'         extended control psw (SDWA:SDWAEC1)
SVAnxtinst dc  a(*-*)          address of next instruction
SVArscode  dc  f'0'            reason code
SVAabcode  dc  f'0'            abend code
SVAabtrace dc  xl8'00'         abend trace information
SVAabregs  dc  0xl64'00'       copy saved regs (SDWA:SDWASRSV)
SVAabreg00 dc  f'0'            - copy saved reg 00
SVAabreg01 dc  f'0'            - copy saved reg 01
SVAabreg02 dc  f'0'            - copy saved reg 02
SVAabreg03 dc  f'0'            - copy saved reg 03
SVAabreg04 dc  f'0'            - copy saved reg 04
SVAabreg05 dc  f'0'            - copy saved reg 05
SVAabreg06 dc  f'0'            - copy saved reg 06
SVAabreg07 dc  f'0'            - copy saved reg 07
SVAabreg08 dc  f'0'            - copy saved reg 08
SVAabreg09 dc  f'0'            - copy saved reg 09
SVAabreg10 dc  f'0'            - copy saved reg 10
SVAabreg11 dc  f'0'            - copy saved reg 11
SVAabreg12 dc  f'0'            - copy saved reg 12
SVAabreg13 dc  f'0'            - copy saved reg 13
SVAabreg14 dc  f'0'            - copy saved reg 14
SVAabreg15 dc  f'0'            - copy saved reg 15
SVAabflags dc  x'00'           recovery indicators
SVAabf_per equ x'80'           - request to percolate
SVAabf_ini equ x'40'           - task is in initialization phase
SVAabf_set equ x'20'           - ESTAE is active
           dc  xl3'00'         reserved
SVArecsv1  dc  xl64'00'        recovery save area 1
SVArecsv2  dc  xl64'00'        recovery save area 2
         space ,
SVAword    dc  f'0'            fullword buffer
SVAdword   dc  d'0'            doubleword buffer
SVAinword  dc  f'0'            fullword input buffer
SVAoutword dc  f'0'            fullword output buffer
SVAindbwd  dc  d'0'            doubleword input buffer
SVAoutdbwd dc  d'0'            doubleword output buffer
         space ,
           org SVAREG14
SVALINK    DC  F'0'            Other name
           org ,
           ds  0d
SVAtod     ds  0xl16           TOD buffer
SVAdtime   ds  0d              time (dec: hhmmsstt)
SVAtime    ds  f               time (bin)
           ds  f
SVAdate    ds  f               time (dec)
           ds  f
.* +--------------------------------------------------------+
.* |  Macro List Forms                                      |
.* |  - very frequently used macro list forms               |
.* +--------------------------------------------------------+
SVA_macforms cbtmform prefix=SVA
           ds  0d
SVACARD1   DC  XL80'00'        buffer 80-byte card
SVACARD2   DC  XL80'00'        buffer 80-byte card
SVAlist    DC  XL80'00'        buffer 80-byte for any list form
SVABUF80   DC  XL80'00'        buffer 80
SVABUFFF   DC  XL256'00'       buffer 256
SVAwtobuf  dc  xl256'00'       buffer 256 for WTO
SVAlibdsn  dc  cl44'CBT.EMS.LOADLIB'
           ds  0f
           space ,
.* +--------------------------------------------------------+
.* |  SSI information area                                  |
.* +--------------------------------------------------------+
           space ,
SSI_savearea ds  xl80                  save area
SSI_info     ds  0d
SSI_tokpair  dc  0cl32' '              Token-pair for share
SSI_shrname  dc  0cl16' '              Shared name
SSI_shrname1 dc  cl8' '                -  match WSdsp_name
SSI_shrname2 dc  cl8' '                -  match WSDIV_name
SSI_shrtoken dc  0xl16'00'             shared token
SSI_comcb    dc  a(*-*)                COM control block address
SSI_ascb     dc  a(*-*)                ASCB of main address space
SSI_token    dc  f'0'                  Vector table token
SSI_sscvt    dc  a(*-*)                SSCVT address
SSI_ssob     dc  a(*-*)                SSOB address
SSI_mgcrpl   dc  0f                    MGCRPL address
SSI_wqe      dc  a(*-*)                WQE address (alias)
SSI_initrtn  dc  cl8' '                SSI init routine name
SSI_name     dc  cl4' '                SSI name
SSI_varinfo  dc  0xl16                 list of SSI variables info
SSI_qryinfo  dc  a(*-*)                address of QUERYed info
SSI_rcode    dc  f'0'                  Return code
SSI_rcmsg    dc  f'0'                  Return/SSI_reason code in msg
SSI_reason   dc  f'0'                  SSI_reason code
SSI_status   dc  x'00'                 SSI status indicators
SSI_flags    dc  x'00'                 SSI setup indicator
SSI_f_wtor   equ x'80'                 - trapped msg was WTOR
SSI_f_eoj    equ x'40'                 - EOJ msg was trapped
SSI_f_jclerr equ x'20'                 - JCL error msg was trapped
SSI_f_jabend equ x'10'                 - job abend msg was trapped
SSI_f_job    equ SSI_f_eoj+SSI_f_jclerr+SSI_f_jabend msg was about job
SSI_f_cmd    equ x'08'                 - command was trapped
SSI_evtype   ds  x                     event type
             ds  x                     reserved
SSI_rpllen   ds  h                     length WTOR reply id text
SSI_rplid    ds  cl8                   WTOR reply id text
SSI_consid   ds  f                     console id
SSI_consname ds  cl8                   console name
SSI_msgptr   ds  a(*-*)                msg buffer address
SSI_scc      ds  h                     system CC (EOS only)
SSI_ucc      ds  h                     user CC (EOS only)
         IEFSSI MF=(L,SSI_parmlist),PLISTVER=MAX
*
         IEFSSVT MF=(L,SSI_ssvtparm),PLISTVER=MAX
*
         CSVDYLPA MF=(L,SSI_dynLPA)
SSI_infolen equ *-SSI_info
*
         aif  ('&DERMID' ne 'CBTEMS').rexx
SSI_dyntab ds 0f
         iefssvti type=RESERVE,                                        +
               ssvtdata=SS_table_dyn,                                  +
               tablen=SS_table_len
SSI_dyntablen equ *-SSI_dyntab
         ago   .tracefld
.rexx    aif  ('&DERMID' ne 'CBTREX').tracefld
         space ,
* +-------------------------------------------+
* | Function internal area                    |
* +-------------------------------------------+
         space ,
RX_evbptr    ds  a(*-*)              pointer to own EVB
RX_evblen    ds  h                   length of own EVB
RX_evbtype   ds  x                   EVB type indicator
RX_evbt_old  equ c'O'                - old EVB
RX_evbt_new  equ c'N'                - newly obtained EVB
RX_jobtype   ds  x                   job/user type
RX_job_stc   equ c'S'                - STC/TSU/mount
RX_job_tsu   equ c'T'                - TSU user
RX_job_job   equ c'J'                - batch job (initiated)
RX_jobname   ds  cl8                 job/user name
RX_jobid     ds  cl8                 JES job id
RX_address   ds  0xl12               flow switch addresses
RX_address0  ds  a(*-*)              flow switch address 0
RX_address1  ds  a(*-*)              flow switch address 1
RX_address2  ds  a(*-*)              flow switch address 2
RX_evbcom    ds  a(*-*)              EVB chain pointer in COM
RX_evidptr   ds  a(*-*)              address of event id/string
RX_evidlen   ds  h                   length of event id/string
RX_evtype    ds  x                   event type
RX_option    ds  x                   suppression option
RX_suppress  equ c'S'                 - suppress msg/cmd
RX_action    ds  x                   immediate action type
RX_ac_cmd    equ c'C'                 - action = cmd
RX_ac_msg    equ c'M'                 - action = msg
RX_ac_rpy    equ c'R'                 - action = reply
             ds  x                   reserved
RX_aclen     ds  h                   action text length
RX_acptr     ds  a(*-*)              action text address
RX_waitnum   ds  h                   num of awaiting ECBs
RX_postnum   ds  h                   num of posted ECBs
.tracefld anop
          space ,
* +--------------------------------+
* | Abend trace info fields        |
* +--------------------------------+
          space ,
          org   SVAabtrace          redefine abend trace info
SVA_trace      dc   x'00'           trace byte 0
SVA_tr_base    equ  c'0'             - base module
SVA_tr_ssi     equ  c'1'             - SSI initializer
SVA_tr_cmd     equ  c'2'             - commands listener
SVA_tr_msg     equ  c'3'             - messages listener
SVA_tr_rmg     equ  c'4'             - RMG routine
SVA_tr_wait    equ  c'5'             - function wait
SVA_tr_set     equ  c'6'             - function set
SVA_tr_any     equ  c'7'             - function wait any event
SVA_trace1     dc   x'00'           trace byte 1
SVA_tr1_evuser equ  c'a'             - user trapping event
SVA_tr1_inrmg  equ  c'b'             - init RMG routine
SVA_tr1_actssi equ  c'c'             - activating SSI
SVA_tr1_offssi equ  c'd'             - inactivating SSI
SVA_tr1_qryssi equ  c'e'             - querying SSI
SVA_tr1_dynlpa equ  c'f'             - installing dynamic LPA
SVA_tr1_srdlpa equ  c'g'             - searching dynamic LPA
SVA_tr1_srnlpa equ  c'h'             - searching NIP LPA
SVA_tr1_dellpa equ  c'i'             - deleting dynamic LPA
SVA_tr1_abort  equ  c'j'             - abofrting user's EVB
SVA_tr1_comssi equ  c'k'             - accessing COM area
SVA_tr1_scsr   equ  c'l'             - accessing COM area
SVA_tr1_insvc  equ  c'm'             - installing ESR SVC
SVA_tr1_ulist  equ  c'n'             - listing out users
SVA_trace2     dc   x'00'           trace byte 2
SVA_tr2_evusrq equ  c'A'             - enqueue in user event trapping
SVA_tr2_enqlpa equ  c'B'             - enqueue for dyhnamic LPA
SVA_tr2_insvcq equ  c'C'             - enqueue for SVC installation
          org   ,
*VAtrinfo ds    cl26                trace info text
*         ds    cl2
SVAdomtb  ds    0d
SVAuserareasize equ *-SVAuserarea
SVASIZE   EQU   *-SVA
          EJECT ,
          AIF   ('&TYPE' NE 'CSECT').EXIT
          END   CBTSVA
.EXIT     ANOP
          MEND
