.*
.*
.*                    +----------+
.*    Macro Name   -  | @ENTRY   |
.*                    +----------+
.*
.*
.*    Function -
.*
.*
.*    Syntax -
.*
.*
.*    Operation -
.*
.*
.*    Author -
.*         Name     :  Deru Sudibyo
.*                     S/W Architect
.*         Copyright:  (C)1998 Deru Sudibyo
.*
.*
.*    Modification Log -
.*    +--------+------------+--------+---------------------------+
.*    | Date   | Engineer   | V.R.L. | Description               |
.*    +--------+------------+--------+---------------------------+
.*    |98/02/23| Deru S.    | 1.0.0. | First development         |
.*    |06/10/18| Deru S.    | 1.0.1  | Added CBTDOM macro to     |
.*    |        |            |        | build DOMid stack         |
.*    |        |            |        |                           |
.*    |        |            |        |                           |
.*    |        |            |        |                           |
.*    |        |            |        |                           |
.*    +--------+------------+--------+---------------------------+
.*
         MACRO
&NAME    @ENTRY &EP=,                                                  ++
               &ESA=,                                                  ++
               &ARMODE=NO,                                             ++
               &ARCTRL=NO,                                             ++
               &DOMSAVE=YES,                                           ++
               &DOMEXCH=NO,                                            ++
               &EXECUTE=YES,                                           ++
               &SVA=,                                                  ++
               &SVASIZE=,                                              ++
               &SVALOC=,                                               ++
               &KEY=ASIS,                                              ++
               &SVAINIT=YES,                                           ++
               &RUNTYPE=MAINTASK,                                      ++
               &CSECT=NO,                                              ++
               &BREG=R12
         COPY  CBTGBLVR
         gblb  &DIB390,&DIBESA
         LCLA  &NBR,&I
         lclb  &csectf,&dom
         LCLC  &BR1,&BR2,&BR3,&ENTRY,&BRLINK,&BRLINKS,&IX,&OS,&CID,&lbl
.*
         aif   (t'&SVA eq 'O').ckesame
&DERSVA  setb  0
         aif   ('&SVA' ne 'YES').ckesame
&DERSVA  setb  1
.ckesame aif   (t'&ESA ne 'O').ckesa
&DIB390  setb  (&DER390)
&DIBESA  setb  (&DERESA)
         ago   .okesa
.ckesa   AIF   ('&ESA' NE '390').dib370
&DIB390  SETB  1
&DIBESA  SETB  1
         ago   .okesa
.dib370  AIF   ('&ESA' NE '370').s370
&DIB390  SETB  0
&DIBESA  SETB  1
         ago   .okesa
.s370    anop
&DIB390  SETB  0
&DIBESA  SETB  0
.okesa   anop
.*
&DERACCR setb  0
&DERACTL setb  0
&DERSUBT setb  0
         aif   ('&ARMODE' ne 'YES').go
&DERACCR setb  1
.go      aif   ('&ARCTRL' ne 'YES').go1
&DERACTL setb  1
.go1     aif   ('&RUNTYPE' ne 'SUBTASK').go2
&DERSUBT setb  1
.go2     aif   ('&DOMEXCH' ne 'YES').go3
         aif   (NOT &DERSVA).go3
&DERXDOM setb  1
.go3     anop
&BRLINK  setc  'BASR'
&IX      setc  '&SYSNDX'
&lbl     setc  'DER&IX'
         aif   (t'&SVASIZE eq 'O').go5
         aif   (&DERXDOM).go4
&DERSVSZ setc  '&SVASIZE'
         ago   .go5
.go4     anop
&DERSVSZ setc  '&SVASIZE+512'
.go5     aif   (t'&SVALOC eq 'O').go6
&DERSVLC setc  '&SVALOC'
.go6     aif   ('&SVAINIT' ne 'YES').go7
         aif   (NOT &DERSVA).go7
&DERSVINIT setb 1
.go7     anop
&NBR     seta  N'&BREG
&BR1     setc  '&BREG(1)'
         aif   (NOT &DERRENT).BEGIN
         aif   (NOT &DERSVA).begin
&DERSVSZ setc 'SVASIZE+512'
         aif   (&DERXDOM).BEGIN
&DERSVSZ setc 'SVASIZE'
.BEGIN   aif   (T'&NAME NE 'O').A
         MNOTE 8,'DER041E Label missing. Unable to define module name.'
         MEXIT
.A       aif   (K'&NAME LE 8).B
         MNOTE 8,'DER042E Module name exceeded (max 8 bytes).'
         MEXIT
.B       aif   (&NBR LE 3).C
         MNOTE 8,'DER043E Number of base registers exceeded (max 3).'
         MEXIT
.C       aif   (&DEREQU).D
         MNOTE 8,'DER044E This macro must not be used as module prolog'
         MEXIT
.D       anop
&DERMEP  setc  '&NAME'
         aif   (K'&NAME LE 6).D1
&DERMID  setc  '&NAME'(1,6)
&DERCID  setc  '&NAME'(1,5)
&cid     setc  '&NAME'(7,1)
&DERCID  setc  '&DERCID&CID'
&cid     setc  '&NAME'(4,5)
         ago   .D2
.D1      anop
&DERMID  setc  '&NAME'
&DERCID  setc  '&NAME'
&cid     setc  '&NAME'(4,3)
.D2      anop
&ENTRY   setc  '&NAME'
         aif   (T'&EP EQ 'O').d2ep
&ENTRY   setc  '&EP'
.d2ep    aif   (not &DERprolg).D3
         entry &ENTRY
.D3      aif   ('&CSECT' eq 'YES').csect
&NAME    ds    0d
         ago   .okname
.csect   aif   (&DERRSECT).rsect
&NAME    CSECT
         ago   .oksect
.rsect   anop
&NAME    RSECT
.oksect  anop
&csectf  setb   1
.okname  aif   ('&entry' eq '&name').start
&ENTRY   EQU   *
.start   aif   (&DERSVA).normal
         aif   (&NBR EQ 1).goin
         mnote 8,'DER001E SVA=NO specified with multi base registers.'
         mexit
.goin    using &name,&breg
         B     DER&IX
         dc    a(*-*)
         ago   .enter
.normal  aif   (not &DIB390).ESA370
         BAKR  R14,0          Stack states
.E       USING &NAME,R15
         B     DER&IX
.enter   anop
&name._id_offset equ *-&name
         DC    Cl8'&NAME',c'&SYSDATE &SYSTIME'
         aif   (&DERprolg).e00
         DC    C'(C)2006 Ir. DERU SUDIBYO -'
&DERprolg setb  1
.e00     anop
DER&IX   DS   0D
         aif   (not &DERSVA).quit
         DROP  R15
         aif   (not (&deraccr and &deractl)).e1   .e0x
.*       aif   (&deraccr and &deractl).e0a
.*       aif   (not (&DIB390 and &DIBESA)).e0x
.e0a     SAC   512                    SWITCH INTO AR MODE
         SYSSTATE ASCENV=AR           ENSURE PROPER CODE GENERATION
         ago   .e1
.e0x     anop
         aif   (T'&EP EQ 'O').E1
         aif   (not (&DIB390 and &DIBESA)).e0y
         lae   &BR1,0
.e0y     anop
         &BRLINK &BR1,0
         ago   .E2
.E1      aif   (&DIB390 or &DIBESA).e1x
         LR    &BR1,R15       Copy base address
         ago   .e2
.e1x     lae   &BR1,0(R15,0)       Copy base address
.E2      anop
         aif   (&NBR EQ 1).E4
&BR2     setc  '&BREG(2)'
         aif   (&NBR EQ 2).E3
&BR3     setc  '&BREG(3)'
         USING &ENTRY,&BR1,&BR2,&BR3
         LA    R15,4095
         LA    &BR2,1(R15,&BR1)
         LA    &BR3,1(R15,&BR2)
         ago   .F
.E3      USING &ENTRY,&BR1,&BR2
         LA    R15,4095
         LA    &BR2,1(R15,&BR1)
         ago   .F
.E4      USING &ENTRY,&BR1
.F       ago   .SVA
.ESA370  aif   (not &DIBESA).NONESA
&BRLINK  setc  'BASR'
&BRLINKS setc  'BAS'
         ago   .SAVING
.NONESA  anop
&BRLINK  setc  'BALR'
&BRLINK  setc  'BAL'
.SAVING  STM   R14,R12,12(R13)
         ago   .E
.SVA     aif   (&DERRENT).STORAGE
         aif   (&DIB390).FINAL
         &BRLINKS R1,DER&IX.B
         DS    0D
DER&IX.A ds    XL&DERSVSZ
DER&IX.B EQU   *
         ago   .HSKEEP
.STORAGE anop
         xr    r2,r2                clear reg 2
         aif   (not (('&key' eq 'ZERO') or ('&key' eq '0'))).getvs
         IPK   0(0)                 SAVE CURRENT PSW KEY
         SPKA  0(0)                 SET PSW KEY
         o     r2,=x'80000000'      indicates key was save and set
.getvs   aif   (&DIBESA).ESA
         GETMAIN R,LV=&DERSVSZ,LOC=&DERSVLC
         ago   .HSKEEP
.ESA     STORAGE OBTAIN,COND=NO,LENGTH=&DERSVSZ,LOC=&DERSVLC
.HSKEEP  anop
&DERSTOR setb  1
         aif   (&DIB390).hsk390
         st    r2,0(,R1)            save key in reg 2
         l     r2,20+4*2(r13)       restore reg 2
         ST    R13,4(,R1)           Old in new
         lm    R14,r15,20(R13)      keep reg 0-1 to reg 14-15
         ST    R1,8(,R13)           New in old
         aif   (&deraccr).ar370
         LR    R13,R1               Chain
         LR    R0,R14               restore content of reg 0
         LR    R1,R15               restore content of reg 1
         ago   .final
.ar370   lae   r13,0(0,r1)          SVA address
         mvc   4(4,r13),=c'F1SA'    put indicator
         LR    R0,R14               restore content of reg 0
         LR    R1,R15               restore content of reg 1
         ago   .final
.hsk390  aif   (&deraccr).hsk390ar
         lr    r13,r1               R13 as SVA base address
         ereg  r0,r1                restore reg 0-1 (parameter list)
         ago   .final
.hsk390ar anop
         lae   r13,0(0,r1)          SVA address
         mvc   4(4,r13),=c'F1SA'    put indicator
         ereg  r0,r1                restore reg 0-1 (parameter list)
.FINAL   anop
         using CBTSVA,r13
         mvc   &DERPSWSV,0(r13)     save PSW key in the correct place
         xr    r15,r15              clear reg 15
         iac   r15                  get ASC code
         st    r15,&DERSACSV        save it in SVA
         aif   (&deraccr).done
         SAC   0                    swtich into PRIMARY mode
         SYSSTATE ASCENV=P          ensure proper code generation
*.done    aif   (not &DERSVA).dom
.done    anop
         aif   (not &DERSVINIT).dom
         l     r15,=a(&DERSVLOC)    SVA initialization routine
         basr  r14,r15              initialize SVA
.dom     anop
&CBTDOMSV setb  0
         aif   ('&DOMSAVE' eq 'NO').domx
*        aif   (NOT &DERSVA).domx
&CBTDOMSV setb  1
         stm   r14,r1,&DERSVGR      save reg 0-1 and 14-15
         CBTDOM BUILD,loc=SVA
         lm    r14,r1,&DERSVGR      restore reg 0-1 and 14-15
.domx    anop
         xc    SVAdomid,SVAdomid    clear this word
         aif   (not &DERXDOM).end
         la    r15,SVAdomtb         DOMid table location
.*       st    r15,SVAdomid         hold it in this word
         xc    0(256,r15),0(r15)    clear 1st half
         xc    256(256,r15),256(r15) clear 2nd half
.end     anop
         mvc   SVAmid,=cl5'&cid'    get module id
.quit    anop
         MEND
