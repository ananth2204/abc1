{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20081125222011000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "SBGOLOB.DERU.ZCBT.REXXLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.DERU.ZCBT.REXXLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "080330", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x01\\x0e'", "DS1TRBAL": "b'c\\xe0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f=P\\x00\\x04\\x88\\xd0P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f=P\\x00\\x04\\x88\\xd0P'", "b'X\\xf5$\\xb0\\x00\\x00\\x00\\x8e\\x00\\x02\\x00\\x8e\\x00\\x06\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"CBTIPL": {"ttr": 268, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x005\\x01\\x07)\\x8f\\x01\\x07)\\x9f\\x01\\x08\\x00\\\\\\x00L\\x00'\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-10-25T00:00:00", "modifydate": "2007-10-26T01:08:35", "lines": 92, "newlines": 76, "modlines": 39, "user": "IBMUSER"}, "text": "/* Example of StartUp Procedure */\n\n x = cbwto('CBTIPL: Startup procedure in progress...')\n\n/* Step 1 =================================================\n\n     Bring up:\n           - JES2\n           - DLF\n           - VMCF (EZAZSSI)\n           - FFST\n           - CA90 (CAS9)\n---------------------------------------------------------- */\n\n     x  = cbcmd('START JES2,P=JES2PAA1')\n     x  = cbcmd('START DLF,SUB=MSTR')\n     x  = cbcmd('START EZAZSSI,P=&SYSNAME')\n     x  = cbcmd('START CAS9,SUB=MSTR')\n     x  = cbcmd('START EPWFFST.FFST,SUB=MSTR')\n\n\n/* Step 2 =================================================\n\n     Ask zCBT to collect:\n        - JES2 message $HASP492\n        - JES2 message $HASP454\n        - VTAM message IST020I\n\n---------------------------------------------------------- */\n\n     x  = cbset('MSG','$HASP492')\n     x  = cbset('MSG','$HASP454')\n     x  = cbset('MSG','IST020I')\n\n\n/* Step 3 =================================================\n\n     Wait collected events\n      + When msg $HASP492 occurs, indicates JES2 up,\n        then bring up:\n              - VTAM\n              - SDSF\n              - ACF2\n\n      + When msg $HASP454 occurs, JES2 needs to confirm\n        due to check point problem.  Then reply Y\n\n      + When msg IST020I occurs, indicates VTAM up,\n        then bring up:\n              - TCPIP\n              - TSO\n\n---------------------------------------------------------- */\n\n jes2  = 0\n jrpy  = 0\n vtam  = 0\n all   = 0\n Do forever\n     event  = cbevent()\n     evtype = strip(word(event,1))\n     If evtype = 'MSG' then do\n         info = strip(word(event,2))\n         Select\n             When info = '$HASP492' then,\n                  Do\n                      jes2 = 1\n                      x  = cbcmd('START VTAM')\n                      x  = cbcmd('START SDSF')\n                  End\n             When info = 'IST020I' then,\n                  Do\n                      vtam = 1\n                      x  = cbcmd('START TSO')\n                      x  = cbcmd('START TCPIP')\n                      x  = cbcmd('START HTTPD1')\n                  End\n             Otherwise,\n                  If strip(word(event,3)) = '$HASP454' then,\n                      Do\n                         Parse var info \"(REPLYID=\" rpyid \")\" .\n                         rpytxt = \"REPLY \" || rpyid || \",Y\"\n                         x  = cbcmd(rpytxt)\n                         jrpy = 1\n                      End\n         End\n         all = jes2 * vtam\n         if all = 1 then LEAVE\n     End\n End\n x = cbwto('CBTIPL: Startup procedure complete')\n Exit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CBTIVP": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x009\\x01\\x07)/\\x01\\x07)?\\x12\\x17\\x00f\\x00a\\x00\\t\\xc4\\xe8\\xc1\\xc8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2007-10-19T00:00:00", "modifydate": "2007-10-20T12:17:39", "lines": 102, "newlines": 97, "modlines": 9, "user": "DYAH"}, "text": "/* Test zCBT step 1 -----------------------------------------------\n\n   Use function cbset to tell zCBT we are waiting for\n        1. WTO Message 'TESTMSG01'\n        2. command 'TESTCMD'\n        3. End-of-step job JCBTEST2 step JCBSTEP1\n        4. End-of-step job JCBTEST2 step JCBSTEP2\n        5. End-of-job job JCBTEST2\n\n------------------------------------------------------------------*/\n\nset1 = cbset('MSG','TESTMSG01')\n\n       If set1 = 'SET' then,\n          msg1 = cbwto('TESTCBT01: waiting for msg TESTMSG01')\n       Else,\n          msg1 = cbwto('TESTCBT01: cbset() test was failed!')\n\nset2 = cbset('CMD','TESTCMD','SUPPRESS')   /* Suppress the cmd\n                                              and we will issue\n                                              an other, hence\n                                              it look like the\n                                              response of TESTCMD */\n       If set2 = 'SET' then,\n          msg2 = cbwto('TESTCBT02: waiting for cmd TESTCMD')\n       Else,\n          msg2 = cbwto('TESTCBT02: cbset() test was failed!')\n\nset3 = cbset('EOS','JCBTEST2.JCBSTEP1')\n\n       If set3 = 'SET' then,\n          msg3 = cbwto('TESTCBT03: waiting for EOS JCBTEST2.JCBSTEP1')\n       Else,\n          msg3 = cbwto('TESTCBT03: cbset() test was failed!')\n\nset4 = cbset('EOS','JCBTEST2.JCBSTEP2')\n\n       If set4 = 'SET' then,\n          msg4 = cbwto('TESTCBT04: waiting for EOS JCBTEST2.JCBSTEP2')\n       Else,\n          msg4 = cbwto('TESTCBT04: cbset() test was failed!')\n\nset5 = cbset('EOJ','JCBTEST2')\n\n       If set5 = 'SET' then,\n          msg5 = cbwto('TESTCBT05: waiting for EOJ JCBTEST2')\n       Else,\n          msg5 = cbwto('TESTCBT05: cbset() test was failed!')\n\nchk  = cbcmd('CBT LIST')\n\n/* Test zCBT step 2 -----------------------------------------------\n\n   Use function cbevent to wait all 5 defined events.\n   When any one of the above events occurs, cbevent terminated and\n   results the following text:\n\n     set1: \"MSG TESTMSG01 bla bla bla ...\"\n     set2: \"CMD TESTCMD bla bla bla ...\"\n     set3: \"EOS JOB=JCBTEST2 STEP=JCBSTEP1 SCC=nnn UCC=nnn\"\n     set4: \"EOS JOB=JCBTEST2 STEP=JCBSTEP2 SCC=nnn UCC=nnn\"\n     set5: \"EOJ JOB=JCBTEST2 SCC=nnn MAXCC=nnn\"\n\n------------------------------------------------------------------*/\n\n   evmsg  = 0\n   evcmd  = 0\n   eveos1 = 0\n   eveos2 = 0\n   eveoj  = 0\n\nDo forever\n\n   wto1 = cbwto('TESTCBT07: issue cbevent to wait for any event')\n\n   wait1 = cbevent()\n\n        evn1 = strip(word(wait1,1))\n        txt1 = subword(wait1,2)\n        etxt = \"Trapped event text is: \" || wait1\n        wto2 = cbwto(etxt)\n\n        Select\n            When evn1 = 'MSG' then evmsg = 1\n            When evn1 = 'CMD' then evcmd = 1\n            When evn1 = 'EOS' then do\n                 parse var txt1 'JOB=' job 'STEP=' stp 'SCC=' .\n                 If stp = 'JCBSTEP1' then eveos1 = 1\n                 Else eveos2 = 1\n              End\n            When evn1 = 'EOJ' then eveoj = 1\n            Otherwise,\n                 wto2 = cbwto(evn1)\n        End\n\n        evcheck = evcmd * evmsg * eveos1 * eveos2 * eveoj\n        If evcheck > 0 then leave\n\nEnd\n\nwto3 = cbwto('TESTCBT09: zCBT test was completed.')\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CBTIVP1": {"ttr": 264, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x07)/\\x01\\x07)?\\x12$\\x00\\x12\\x00\\x10\\x00\\x06\\xc4\\xe8\\xc1\\xc8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-10-19T00:00:00", "modifydate": "2007-10-20T12:24:00", "lines": 18, "newlines": 16, "modlines": 6, "user": "DYAH"}, "text": "/* Test zCBT ------------------------------------------------------\n\n Run on job JCBTEST2 step JCBSTEP1\n\n  This rexx program is to generate event which are needed by\n  rexx program CBTIVP on job (STC) JCBTEST1.\n\n     1.  Give 3 sec delay\n     2.  Issue WTO Message 'TESTMSG01'\n     3.  When this step finish (JCBSTEP1), automatically\n         generate EOS event JCBTEST2.JCBSTEP1\n\n------------------------------------------------------------------*/\n\n a = cbwait('+00:03')\n x = cbwto('TESTMSG01 This message is needed by CBTIPV')\n\nExit 8\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CBTIVP2": {"ttr": 266, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x12\\x01\\x07)/\\x01\\x07)?\\x12$\\x00\\x18\\x00\\r\\x00\\x18\\xc4\\xe8\\xc1\\xc8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-10-19T00:00:00", "modifydate": "2007-10-20T12:24:12", "lines": 24, "newlines": 13, "modlines": 24, "user": "DYAH"}, "text": "/* Test zCBT ------------------------------------------------------\n\n Run on job JCBTEST2 step JCBSTEP2\n\n  This rexx program is to generate event which are needed by\n  rexx program CBTIVP on job (STC) JCBTEST1.\n\n     1.  Give 3 secs delay\n\n     2.  Issue WTO command 'TESTCMD'\n\n     3.  When this step finish (JCBSTEP2), automatically\n         generate EOS event JCBTEST2.JCBSTEP2\n\n     4.  When this job finish, automatically\n         generate EOJ event JCBTEST2\n\n------------------------------------------------------------------*/\n\n a = cbwait('+00:03')\n x = cbcmd('TESTCMD')\n b = cbwait('+00:02')\n\nExit 4\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTRXF": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00(\\x01\\x07'O\\x01\\x07)\\x1f\\x12\\x08\\x00\\x0f\\x00\\x02\\x00\\x0f\\xc4\\xc5\\xd9\\xe4@@@@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2007-10-01T00:00:00", "modifydate": "2007-10-18T12:08:28", "lines": 15, "newlines": 2, "modlines": 15, "user": "DERU"}, "text": "arg job waktu\njstate = cbstate(job)\njcmd   = \"DISPLAY A,\" || job\nxcmd   = cbcmd(jcmd)\njmsg1  = 'note111 ' || jstate\njmsg2  = 'note222 ' || jstate\nwto1   = cbwto(jmsg1)\njeda  = cbwait('+00:15')\nwto2   = cbwtor(jmsg2)\nsay \"Command\" jcmd xcmd\nsay \"WTO\" wto1\nsay \"WTOR\" wto2\nif words(waktu) = 0 then waktu = '+00:01:15'\nwait   = cbwait(waktu)\nsay wait\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TESTTRAP": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00\\x15\\x01\\x07'\\x7f\\x01\\x07)\\x1f\\x12\\t\\x00&\\x00\\x08\\x00#\\xc4\\xc5\\xd9\\xe4@@@@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2007-10-04T00:00:00", "modifydate": "2007-10-18T12:09:15", "lines": 38, "newlines": 8, "modlines": 35, "user": "DERU"}, "text": "/*\nevent = cbevent('eoj','JTSORXF',,\"cmd=se 'test cbevent',user=(deru)\")\n*/\narg jobname\naksi = \"cmd=SE 'test cbevent',USER=(DERU)\"\nevent = cbevent('msg','note111','SUPPRESS',aksi)\n\nsay event\nmsg1 = 'trapping WTO finish'\nx1 = cbwto(event)\nx2 = cbwto(msg1)\nevent = cbevent('msg','note222','SUPPRESS',\"reply=tertangkap\")\n\nsay event\nmsg1 = 'trapping WTOR finish'\nx1 = cbwto(event)\nx2 = cbwto(msg1)\n\nif jobname = 'JREXTEST' then,\n   eostext = strip(jobname) || \".REXX\"\nelse,\n   eostext = strip(jobname) || \".TSO\"\nmsg1 = 'waiting for EOS of jobstep ' || eostext\nx2 = cbwto(msg1)\n\naksi = \"cmd=SE 'EOS \" || eostext || \" sudah terbukti',USER=(DERU)\"\nevent = cbevent('eos',eostext,,aksi)\nx2 = cbwto(event)\n\nmsg1 = 'waiting for EOJ of job ' || jobname\nx2 = cbwto(msg1)\naksi = \"cmd=SE 'EOJ \" || jobname || \" sudah terbukti',USER=(DERU)\"\nevent = cbevent('eoj',jobname,,aksi)\nx2 = cbwto(event)\naksi = \"cmd=SE 'cmd DAL diperbolehkan',USER=(DERU)\"\nevent = cbevent('cmd','dal',,aksi)\nsay 'command' event 'tertangkap juga...'\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT770/CBT.V500.FILE770.PDS/REXXLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT770/CBT.V500.FILE770.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}