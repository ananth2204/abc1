{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20081125222115000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "SBGOLOB.DERU.ZCBT.SAMPLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.DERU.ZCBT.SAMPLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "080330", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x05'", "DS1LSTAR": "b'\\x00\\x01\\x10'", "DS1TRBAL": "b'a8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f=P\\x00\\x04\\x88\\xd0P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f=P\\x00\\x04\\x88\\xd0P'", "b'X\\xf5&\\xf0\\x00\\x00\\x00\\x12\\x00\\t\\x00\\x12\\x00\\r\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"@README": {"ttr": 270, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x02\\x01\\x07)\\x9f\\x01\\x07)\\x9f\\x14I\\x00e\\x00e\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-10-26T00:00:00", "modifydate": "2007-10-26T14:49:02", "lines": 101, "newlines": 101, "modlines": 0, "user": "IBMUSER"}, "text": "zCBT SAMPLIB\n============\n\nThis SAMPLIB contains 6 members:\n\n  ZCBT\n  JCBTEST1\n  JCBTEST2\n  IEALPA00\n  IEFSSN00\n  CBTIPL\n\n\n1. ZCBT Member\n--------------\n\nZCBT is a procedure to initialize zCBT subsystem.  It must be in your\ncurrent system PROCLIB (e.g. SYS1.PROCLIB).  Before you can use zCBT\nsupported rexx functions, zCBT subsystem must already be initialized\nand activated.  This procedure is one of the ways to do.   Customize\nthis procedure to meet your environment before you can use.   At the\nfirst time you install zCBT, start this procedure to initialize zCBT\nwith the following command:\n\n     START ZCBT,SUB=MSTR,SSN=subsystemname\n\nUnless you setup IEFSSNxx and IEALPAxx members of PARMLIB for zCBT\nsubsystem to initialize automatically each IPL, you have to start\nZCBT once each IPL period.\n\n\n2. JCBTEST1 and JCBTEST2 Members\n--------------------------------\n\nThese are 2 jobs to run zCBT installation verification procedures.  Job\nJCBTEST1 is an STC and must be placed in your current PROCLIB to execute\nrexx program CBTIVP in REXXLIB and can be renamed to any name.   Whereas\njob JCBTEST2 is a batch job to run rexx programs CBTIVP1 and CBTIVP2 in\nREXXLIB and must exactly use jobname of JCBTEST2.  Both jobs must be\ncustomized to meet your environment.\n\nTo verify zCBT installation, once ZCBT subsystem is initialized (by mean\nstarting ZCBT, then start JCBTEST1.  Then you submit JCBTEST2.  JCBTEST1\nis terminated following JCBTEST2 termination.\n\n\n3. IEALPA00 and IEFSSN00 Members\n--------------------------------\n\nIEALPA00 and IEFSSN00 are sample of PARMLIB parameters you must prepare\nif you need zCBT to manage system startup procedure.  In this case, zCBT\nmust be ready earlier than other application tasks.  zCBT subsystem must\nbe initialized during NIP.  Therefore, zCBT EMS modules must be already\nloaded on LPA.\n\nIEALPA00 is to ask z/OS to load all zCBT EMS modules onto modifiable LPA\n(EMLPA) during NIP period.   You must correct the library name to meet\nthe true name of your zCBT LOADLIB dataset.  However, you may not change\nthe modules names.  You can either use this sample as a separate PARMLIB\nmember by pointing it with MLPA=xx in your current IEASYSxx, or merge it\ninto the existing IEALPAxx member.\n\nIEFSSN00 is to ask z/OS to define subsystem name for zCBT and execute\nthe initialization routine CBTEMSSS.  You can change the subsystem name\nto any valid subsystem name, or just leave this given name (CBT).  You,\nhowever, must not change the initialization routine name.  The name must\nbe CBTEMSSS.  When you implement this SSN sample, you must already setup\nthe above IEALPA00 sample.  z/OS will search CBTEMSSS module in the LPA.\nYou can either use this sample as a separate PARMLIB member by pointing\nit with SSN=xx in your current IEASYSxx, or merge it into the existing\nIEFSSNxx member.\n\n\n4. CBTIPL Member\n----------------\n\nCBTIPL is a sample of system startup procedure.  It executes CBTIPL rexx\nprogram in REXXLIB dataset, which starts JES2 and other independent jobs\nat the first stage.  Next stage, it starts other jobs which depends on\nJES2, including VTAM.  The final stage, starts other jobs which depends\non VTAM.\n\nWhen you plan to use this sample, you must customize it to meet to your\nenvironment requirements.  You must also properly prepared IEALPA00 and\nIEFSSN00 samples\n\nIf you plan to use CBTIPL for system startup, do the following steps:\n\n (1)  Customize both IEALPA00 and IEFSSN00 samples and make sure both\n      are properly effective when you IPL the system.  This means, ZCBT\n      is automatically started during NIP.  See syslog.\n\n (2)  Customize CBTIPL rexx program in REXXLIB dataset (PDS) to meet\n      you environments:\n\n        a.  Adopt all your current COMMNDxx content to CBTIPL by\n            converting each COM='bla bla bla' in COMMNDxx becomes\n            x = cbcmd('bla bla bla') in CBTIPL.\n\n        b.  Put COM='START CBTIPL,SUB=MSTR' as the only content of\n            your current COMMNDxx.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CBTIPL": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x07)\\x9f\\x01\\x07)\\x9f\\x01\\x12\\x00 \\x00 \\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-26T00:00:00", "modifydate": "2007-10-26T01:12:12", "lines": 32, "newlines": 32, "modlines": 0, "user": "IBMUSER"}, "text": "//*************************************************************\n//**                                                         **\n//**  CBTIPL                                                 **\n//**                                                         **\n//**  This procedure is to perform system startup procedure  **\n//**  using zCBT facilities.  Since CBTIPL is started first  **\n//**  time, it must not have dependency with JES subsystem.  **\n//**  Hence, it must be started under master subsystem by    **\n//**  invoking the following START command:                  **\n//**                                                         **\n//**     START CBTIPL,SUB=MSTR                               **\n//**                                                         **\n//**  Location -                                             **\n//**                                                         **\n//**     Library:  in Current PROCLIB                        **\n//**                                                         **\n//**  Dependencies -                                         **\n//**                                                         **\n//**     Program lib:  in  STEPLIB                           **\n//**     Rexx lib   :  in  SYSEXEC                           **\n//**     Called rexx:  CBTIPL                                **\n//**                                                         **\n//*************************************************************\n//CBTIPL PROC\n//*\n//REXX   EXEC PGM=IRXJCL,TIME=1440,REGION=0M,PARM='CBTIPL'\n//SYSTSPRT DD DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20)),\n//         DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//STEPLIB  DD DISP=SHR,DSN=DERU.CBT.LOADBNI\n//SYSEXEC  DD DISP=SHR,DSN=DERU.CBT.REXXLIB\n//SYSTSIN  DD DUMMY\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEALPA00": {"ttr": 266, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x07)\\x9f\\x01\\x07)\\x9f\\x01\\x18\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-26T00:00:00", "modifydate": "2007-10-26T01:18:44", "lines": 14, "newlines": 14, "modlines": 0, "user": "IBMUSER"}, "text": "/* ----------------------- zCBT Subsystem ------------------------- */\n/*                                                                  */\n/*   Specify MLPA parameter to bring zCBT subsystem supporting      */\n/*   modules onto LPA automatically.                                */\n/*                                                                  */\n/* ---------------------------------------------------------------- */\nINCLUDE LIBRARY(your.CBT.LOADLIB)\nMODULES(CBTEMS,\n        CBTEMSCM,\n        CBTEMSES,\n        CBTEMSMS,\n        CBTEMSRM,\n        CBTEMSSS,\n        IGX00212)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFSSN00": {"ttr": 268, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x07)\\x9f\\x01\\x07)\\x9f\\x01\\x19\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-26T00:00:00", "modifydate": "2007-10-26T01:19:13", "lines": 2, "newlines": 2, "modlines": 0, "user": "IBMUSER"}, "text": "SUBSYS SUBNAME(CBT) /* DEFINE ZCBT SUBSYSTEM */\n  INITRTN(CBTEMSSS)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCBTEST1": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x07)?\\x01\\x07)?\\x13E\\x00\\x19\\x00\\x1b\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-10-20T00:00:00", "modifydate": "2007-10-20T13:45:55", "lines": 25, "newlines": 27, "modlines": 0, "user": "DERU"}, "text": "//*************************************************************\n//**                                                         **\n//**  JCBTEST1                                               **\n//**                                                         **\n//**  Once zCBT is completely installed and initialized,     **\n//**  run this job as system task (STC) to perform some      **\n//**  verification.  It can be brought up either under       **\n//**  primary subsystem:                                     **\n//**                                                         **\n//**     START JCBTEST1                                      **\n//**                                                         **\n//**  or master subsystem:                                   **\n//**                                                         **\n//**     START JCBTEST1,SUB=MSTR                             **\n//**                                                         **\n//*************************************************************\n//JCBTEST1 PROC\n//*\n//REXX   EXEC PGM=IRXJCL,TIME=1440,REGION=0M,PARM='CBTIVP'\n//SYSTSPRT DD DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20)),\n//         DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//STEPLIB  DD DISP=SHR,DSN=your.CBT.LOADLIB\n//SYSEXEC  DD DISP=SHR,DSN=your.CBT.REXXLIB\n//SYSTSIN  DD DUMMY\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCBTEST2": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00(\\x01\\x07)?\\x01\\x07)?\\x13D\\x00\\x17\\x00\\x17\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-10-20T00:00:00", "modifydate": "2007-10-20T13:44:28", "lines": 23, "newlines": 23, "modlines": 0, "user": "DERU"}, "text": "//*******************************************************\n//**                                                   **\n//**   JCBTEST2                                        **\n//**                                                   **\n//**   JOB TO CREATE EVENTS NEEDED BY STC JCBTEST1.    **\n//**   SUBMIT THIS JOB WHILE JCBTEST1 IS RUNNING.      **\n//**                                                   **\n//*******************************************************\n//JCBTEST2 JOB (1,NIT),'CREATES EVENTS',CLASS=A,\n//   MSGCLASS=X,NOTIFY=&SYSUID\n//JCBSTEP1 EXEC PGM=IKJEFT01,DYNAMNBR=20\n//SYSTSPRT DD SYSOUT=(P,TSOTEST),DEST=PEMALANG\n//STEPLIB  DD DISP=SHR,DSN=YOUR.CBT.LOADLIB\n//SYSEXEC  DD DISP=SHR,DSN=YOUR.CBT.REXXLIB\n//SYSTSIN  DD *\n%CBTIVP1\n/*\n//JCBSTEP2 EXEC PGM=IRXJCL,REGION=0M,PARM='CBTIVP2'\n//SYSTSPRT DD SYSOUT=(P,REXTEST),DEST=PEMALANG\n//STEPLIB  DD DISP=SHR,DSN=YOUR.CBT.LOADLIB\n//SYSEXEC  DD DISP=SHR,DSN=YOUR.CBT.REXXLIB\n//SYSTSIN  DD DUMMY\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZCBT": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x07)?\\x01\\x07)?\\x13B\\x00T\\x00T\\x00\\x00\\xc4\\xc5\\xd9\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-10-20T00:00:00", "modifydate": "2007-10-20T13:42:54", "lines": 84, "newlines": 84, "modlines": 0, "user": "DERU"}, "text": "//*========================================================*\n//*                                                        *\n//*                +---------+                             *\n//*                | zCBT    |                             *\n//*                +---------+                             *\n//*              zCBT address space                        *\n//*                                                        *\n//*                                                        *\n//*  DESCRIPTION -                                         *\n//*                                                        *\n//*      zCBT address space is a system task (STC)         *\n//*      to prepare zCBT subsystem initialization.         *\n//*      zCBT subsystem is an event management system      *\n//*      (EMS) which lets users to automate their          *\n//*      system using rexx program.  zCBT supports         *\n//*      some rexx functions to interact with 4 types      *\n//*      of events: MSG, CMD, EOJ and EOS.                 *\n//*                                                        *\n//*                                                        *\n//*  OPERATION -                                           *\n//*                                                        *\n//*      This STC can either to bring up zCBT subsystem    *\n//*      or be brought up by zCBT subsystem.  When it      *\n//*      brings up zCBT subsystem, it prepares data area   *\n//*      and LPA modules prior to setup the subsystem.     *\n//*                                                        *\n//*      When it is brought up by zCBT subsystem (for      *\n//*      example: when subsystem is brought up during      *\n//*      NIP in respond to IEFSSNxx parameter or by        *\n//*      issueing SETSSI command), it checks dataarea      *\n//*      and LPA modules.  If data area does not exist     *\n//*      then allocate it.  If LPA modules not ready in    *\n//*      LPA, then load them.  Upon completion, send       *\n//*      acknowledgement signal to zCBT initialization     *\n//*      task.                                             *\n//*                                                        *\n//*      Once checking or preparation successfully done,   *\n//*      this task then terminated.  You don't need to     *\n//*      start it again until next IPL.                    *\n//*                                                        *\n//*      If all CBTEMSxx modules are already in LPA,       *\n//*      for example if you make them preloaded with       *\n//*      either LPALSTxx or IEALPAxx or IEAFIXxx           *\n//*      PARMLIB definition, then you don't need to        *\n//*      run this address space.                           *\n//*                                                        *\n//*                                                        *\n//*  START COMMAND SYNTAX -                                *\n//*                                                        *\n//*      To get this task up, issue the following          *\n//*      command:                                          *\n//*                                                        *\n//*         START ZCBT,SUB=MSTR,SSN=subsystemname          *\n//*                                                        *\n//*                                                        *\n//*  SECURITY REQUIREMENTS -                               *\n//*                                                        *\n//*  A.  zCBD needs UPDATE level access to the following   *\n//*      resources:                                        *\n//*                                                        *\n//*     (1) JESSPOOL RESOURCE CLASSES                      *\n//*     (2) MVS.** OPERCMDS CLASS                          *\n//*     (3) JES2.** OPERCMDS CLASS                         *\n//*                                                        *\n//*  b.  This must runs in privileged mode.  zCBT loadlib  *\n//*      must be registerred as APF library.  otherwise,   *\n//*      it will abend s047.                               *\n//*                                                        *\n//*========================================================*\n//ZCBT PROC SSN=CBT,HLQ=DERU\n//ZCBTEXEC EXEC PGM=CBTEMS,REGION=0M,TIME=1440,\n//  PARM='SSN=&SSN'\n//*--------------------------------------------------------*\n//*  zCBT load module library (loadlib)                    *\n//*     - Can be avoided if it is installed in LINKLST     *\n//*       or link pack area (LPA)                          *\n//*     - Must be registerred in authorized program        *\n//*       function (APF) to avoid s047 abend               *\n//*     - you must change it to accommodate your local     *\n//*       environment.  if your naming structure is        *\n//*       different, its corresponding parameters in       *\n//*       proc card must also be modified.                 *\n//*--------------------------------------------------------*\n//STEPLIB DD DISP=SHR,DSN=&HLQ..CBT.LOADLIB\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT770/CBT.V500.FILE770.PDS/SAMPLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT770/CBT.V500.FILE770.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}