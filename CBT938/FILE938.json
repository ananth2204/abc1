{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013517000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE938.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE938.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x04'", "DS1TRBAL": "b'\\x9e.'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\x93\\x00\\x0e\\t\\x94\\x00\\x02\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04[\\x00B\\x01\\x150/\\x01\\x150/\\x01\\x19\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf1@@@'", "ispf": {"version": "04.91", "flags": 0, "createdate": "2015-10-29T00:00:00", "modifydate": "2015-10-29T01:19:42", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-491"}, "text": "REGULAR CBT TAPE - VERSION 491    FILE:  938\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT491.FILE938\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 695 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/29/15    01:19:42    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$XEPH": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x15(o\\x01\\x15(o\\x18X\\x00\\x0b\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2015-10-13T00:00:00", "modifydate": "2015-10-13T18:58:29", "lines": 11, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "Xephon Articles.....\n\nXephon had turned over the rights to all of its MVS articles to\nThomas Publishing around the year 2005, and Bob Thomas of Thomas\nPublishing (in early 2008) turned over support and publication\nrights for the published code to www.cbttape.org, for articles\npublished thru the year 2005.\n\nTherefore we can (in good conscience) publish and use this Xephon\ncode on the CBT Tape collection.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$ART": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x001\\x01\\x15(o\\x01\\x150/\\x01\\x18\\x00\\xa3\\x00\\xa4\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-10-13T00:00:00", "modifydate": "2015-10-29T01:18:31", "lines": 163, "newlines": 164, "modlines": 0, "user": "SBGOLOB"}, "text": "JES subsystem information\n\nObtaining specific information about the primary subsystem under\nwhich a given job is running can be cumbersome.  You generally\nneed to know something about the internal control block structure\nto get at the information you are trying to locate.  What makes\nthis an even more difficult process is that the control block\nstructures for JES2 and JES3 are different and you cannot\nleverage data location techniques across the two environments.\n\nIBM has tried to provide a little assistance in this area. There\nexists a directed subsystem interface (SSI) call that can be used\nto extract information about a specific subsystem. The upside of\nthis subsystem call is that it can be made in a consistent fashion\nindependently of the subsystem your program is running under\n(either JES2 or JES3).  The downside is that the subsystem call\ncurrently returns only a small subset of information about the\nprimary subsystem in control.  If your information requirements can\nbe satisfied by this subsystem call, it does provide a consistent\nmethod and allows your program to run successfully without concern\nfor which JES environment may be in control.\n\nThe subsystem call I am referring to is the directed subsystem\nfunction call to SSI function code 54.  Subsystem Version\nInformation (SSVI).  Although you could build in support for\nfunction code 54 in your own subsystems, this article will focus\non SSI function code 54 because it specifically relates to JES2\nor JES3.\n\nThe function code 54 subsystem function call returns information\nin the supplied SSOB (SubSystem Options Block).  The SSVI function\nspecific area of the SSOB consists of a fixed-length header\ncomponent and a variable-length data area component.\n\nThe fixed-length header contains one particularly useful bit of\ninformation, which is referred to as the subsystem common name.\nThe value returned for the subsystem common name is either JES2\nor JES3, depending on the JES environment under which the program\nis running.  This can be important, especially if your program is\nrunning under a secondary JES that has a subsystem name other\nthan the traditional JES2 or JES3 we may expect to see.\n\nThe variable-length data includes (but is not limited to)\ninformation about the JES node name, the JES member name, whether\nor not four-digit device numbers are supported, and how output\nclasses are currently set up.  For a complete list of information\navailable in the variable length data see section  3.1.5.16 Format\nof the Variable Output Sections  in the OS/390 MVS Using the\nSubsystem Interface manual.\n\nA practical use for the information available from this subsystem\nfunction call is to determine viable external writer output classes.\nA traditional MVS external writer using the process SYSOUT\nsubsystem function call (SSI function code 1) in a JES2\nenvironment requires that you direct SYSOUT output to output\nclasses with certain specific characteristics if the desired output\nis to be properly processed by the external writer. Specifically, a\nHOLD or PURGE output class should not be used as a target for\nSYSOUT output if the external writer is to operate as expected.\n\nA directed SSI function code 54 call can be made to extract\nsubsystem information independently of the JES environment,\nand the information about output class characteristics and the\nJES environment can be obtained without regard for JES\nspecifics.\n\nThe program provided with this article, SSINFO, uses the function\ncode 54 subsystem call to obtain subsystem information.  It\ndisplays information, via WTO, to the operator console, about the\nJES environment that SSINFO is running under as well as\ninformation about the output classes and their current\ncharacteristics.\n\nSample JCL to linkedit SSINFO:\n\n//IEWL     EXEC  PGM=HEWLH\u00d896,PARM='XREF,LIST,MAP'\n//SYSPRINT DD    SYSOUT=*\n//SYSUT1   DD    UNIT=SYSDA,SPACE=(CYL,(2,1))\n//OBJECT   DD    DSN=object.library,DISP=SHR\n//SYSLMOD  DD    DSN=load.library,DISP=SHR\n//SYSLIN   DD    *\n   INCLUDE OBJECT(SSINFO)\n   ENTRY   SSINFO\n   NAME    SSINFO(R)\n\nSample JCL for running the SSINFO program:\n\n//SSINFO   EXEC  PGM=SSINFO\n//STEPLIB  DD    DSN=load.library,DISP=SHR\n\nAny output produced by SSINFO is sent to the operator console.\nSample console output generated from SSINFO\n\n\nAny output produced by SSINFO is sent to the operator console.\nSample console output generated from SSINFO:\n SSINFO - ACTIVE SUBSYSTEM NAME IS JESA\n SSINFO - COMMON SUBSYSTEM IS JES2\n SSINFO - ADDITIONAL JESA SUBSYSTEM INFORMATION:\n   JES_NODE='ESS     '\n   JES_MEMBERNAME='JESA'\n   DYNAMIC_OUTPUT='YES'\n   INITIATOR_RESTART='YES'\n   MULTIPLE_STCTSO='YES'\n   FOUR_DIGIT_DEVNUMS='YES'\n   AUTO_RESTART_MANAGER='YES'\n   SAPI='YES'\n   SAPI_CHARS='NO'\n   CLIENT_PRINT='YES'\n   TSO_SYSOUT_CLASS='H,K,O,X'\n   WTR_SYSOUT_CLASS='A,B,C,D,E,F,G,I,J,L,M,N,P,Q,R,S,T,U,V,W,Y,\u00d8,1,2,3,4\n,6,7,8'\n SSINFO - OUTPUT CLASS INFORMATION\n          CLASS: A  NON HELD\n          CLASS: B  NON HELD\n          CLASS: C  NON HELD\n          CLASS: D  NON HELD\n          CLASS: E  NON HELD\n          CLASS: F  NON HELD\n          CLASS: G  NON HELD\n          CLASS: H  TSO HELD\n          CLASS: I  NON HELD\n          CLASS: J  NON HELD\n          CLASS: K  TSO HELD\n          CLASS: L  NON HELD\n          CLASS: M  NON HELD\n          CLASS: N  NON HELD\n          CLASS: O  TSO HELD\n          CLASS: P  NON HELD\n          CLASS: Q  NON HELD\n          CLASS: R  NON HELD\n          CLASS: S  NON HELD\n          CLASS: T  NON HELD\n          CLASS: U  NON HELD\n          CLASS: W  NON HELD\n          CLASS: V  NON HELD\n          CLASS: X  TSO HELD\n          CLASS: Y  NON HELD\n          CLASS: Z  PURGE\n          CLASS: \u00d8  NON HELD\n          CLASS: 1  NON HELD\n          CLASS: 2  NON HELD\n          CLASS: 3  NON HELD\n          CLASS: 4  NON HELD\n          CLASS: 5  PURGE\n          CLASS: 6  NON HELD\n          CLASS: 7  NON HELD\n          CLASS: 8  NON HELD\n          CLASS: 9  PURGE\n\nNotice that in this example the subsystem name is JESA, but the\ncommon subsystem name is JES2. In this case, the SSINFO\nutility was run under a secondary JES2 subsystem running as\nJESA.\n\nThe SSINFO program provides an example of the environment\nset-up necessary to make a directed subsystem call using the\nIEFSSREQ macro. It is also useful in providing information about\nthe JES subsystem under which it is running. Try it out in your\nenvironment and check your results.\n\nSystem Programmer (Canada)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE01": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x15(o\\x01\\x15(o\\x19\\x19\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2015-10-13T00:00:00", "modifydate": "2015-10-13T19:19:52", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Xephon MVS magazine 201, June 2003. Program SSINFO\n          \u00ddSEC=UNOFFICIAL\u00a8\nFrom:     \"GILES,Peter\" <Peter.Giles@ssc.gov.au>\nDate:     10/12/2015 5:28 PM\nTo:       \"'sbgolob@cbttape.org'\" <sbgolob@cbttape.org>\n\nFolks\n\nI have added two extra lines to the output of SSINFO.\n\nSSINFO - Active subsystem name is JES2\nSSINFO - Common subsystem is JES2\nSSINFO - Version is z/OS1.12    FMID is HJE7770      <<< Added\nSSINFO - Product Level  41   Service Level   2       <<< lines\nSSINFO - Additional JES2 subsystem information:\n\nI have attached the source code.\nThe changes are marked with  SSC .\n\nPeter Giles\n\nMainframe and Storage | Technology Branch | Shared Services Centre\nDepartment of Employment\nAustralian Government\nPhone +61 2 6121 8081 | Fax (02) 6276 4908 | Mobile 0412 652 354\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE938": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04[\\x003\\x01\\x150/\\x01\\x150/\\x01\\x19\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf1@@@'", "ispf": {"version": "04.91", "flags": 0, "createdate": "2015-10-29T00:00:00", "modifydate": "2015-10-29T01:19:33", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-491"}, "text": "//***FILE 938 is from Peter Giles, by way of the Xephon article     *   FILE 938\n//*           about Subsystem call 54, in the June 2003 issue of    *   FILE 938\n//*           MVS Update.  Peter has added some lines of code to    *   FILE 938\n//*           the subsystem information display.                    *   FILE 938\n//*                                                                 *   FILE 938\n//*           Xephon MVS code through the year 2005 is now          *   FILE 938\n//*           supported by www.cbttape.org.  See member $$$XEPH.    *   FILE 938\n//*                                                                 *   FILE 938\n//*           Output from the SSINFO program is sent to the         *   FILE 938\n//*           system console and the system log.                    *   FILE 938\n//*                                                                 *   FILE 938\n//*           email:  Peter.Giles@ssc.gov.au                        *   FILE 938\n//*                                                                 *   FILE 938\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSINFO": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x15(o\\x01\\x15(o\\x17\\x18\\x01\\xd6\\x01\\xd6\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-10-13T00:00:00", "modifydate": "2015-10-13T17:18:51", "lines": 470, "newlines": 470, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//C       EXEC PGM=ASMA90,\n//             PARM=(NODECK,OBJECT)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//*        DD  DSN=SYS1.SHASMAC,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(120,120),,,ROUND)\n//SYSPUNCH DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSIN    DD  *\nSSINFO CSECT\nSSINFO AMODE 31\nSSINFO RMODE ANY\n***********************************************************************\n*                                                                     *\n* THE SSINFO UTILITY IS USEFUL FOR DISPLAYING SUBSYSTEM               *\n* INFORMATION FOR EITHER JES2 OR JES3 SUBSYSTEMS.                     *\n*                                                                     *\n* IT PROVIDES SAMPLE CODE FOR PERFORMING A DIRECTED SUBSYSTEM         *\n* FUNCTION CALL USING THE IEFSSREQ MACRO.                             *\n*                                                                     *\n* XEPHON MVS June 2003, Magazine 201                                  *\n*                                                                     *\n***********************************************************************\n         USING SSINFO,R15              SET TEMPORARY ADDRESSABILITY\n         B     BEGIN                   BRANCH TO PROGRAM LOGIC\n         DC    C'SSINFO '              MODULE NAME\n         DC    C'&SYSDATE '            ASSEMBLY DATE\n         DC    C'&SYSTIME '            ASSEMBLY TIME\n         DS    0H                      ALIGNMENT\nBEGIN    EQU   *\n         DROP  R15\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    R10,R15                 COPY MODULE ADDRESS\n         LA    R11,4095(,R10)          SET UP SECOND ...\n         LA    R11,1(,R11)             BASE REGIRSTER\n         USING SSINFO,R10,R11          SET ADDRESSABILITY\n         LR    R9,R13                  COPY SAVEAREA ADDRESS\n         LR    R2,R1                   COPY PARAMETER ADDRESS\n         STORAGE OBTAIN,LENGTH=WORKLEN,LOC=ANY\n         LR    R0,R1                   SAVE THE STORAGE ADDRESS\n         LR    R14,R1                  COPY IT AGAIN\n         LR    R3,R1                   ONCE MORE FOR GOOD MEASURE\n         L     R1,=A(WORKLEN)          GET THE LENGTH\n         XR    R15,R15                 CLEAR THE FILL BYTE\n         MVCL  R0,R14                  CLEAR WORKING STORAGE\n         ST    R9,4(,R3)               SAVE PREVIOUS SAVEAREA\n         LR    R13,R3                  COPY WORKING STORAGE ADDRESS\n         USING WORKAREA,R13            SET ADDRESSABILITY\n         L     R15,16                  GET CVT ADDRESS\n         L     R15,0(,R15)             GET TCB/ASCB AREA ADDRESS\n         L     R15,4(,R15)             GET CURRENT TCB\n         L     R15,TCBJSCB-TCB(,R15)   GET JSCB ADDRESS?\n         L     R15,JSCBSSIB-IEZJSCB(,R15) GET SSIB ADDRESS?\n         MVC   SSNMSAVE(8),=8C' '      INITIALIZE THE AREA\n         MVC   SSNMSAVE(4),SSIBSSNM-SSIB(R15) MV SSNAME\n         LA    R1,SSNMSAVE             GET STARTING ADDRESS\n         XR    R15,R15                 CLEAR COUNTER\nLENLP1   EQU   *\n         C     R15,=F'8'               MAX LENGTH?\n         BNL   LENEND1                 YES - WE'RE DONE WITH LENGTH\n         CLI   0(R1),C' '              A BLANK?\n         BE    LENEND1                 YES - WE'RE DONE WITH LENGTH\n         CLI   0(R1),X'00'             A NULL?\n         BE    LENEND1                 YES - WE'RE DONE WITH LENGTH\n         LA    R1,1(,R1)               POINT TO NEXT BYTE\n         LA    R15,1(,R15)             ADD ONE TO COUNT\n         B     LENLP1                  CHECK NEXT BYTE\nLENEND1  EQU   *\n         ST    R15,SSNMLEN             SAVE THE LENGTH\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG1       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+34(8),SSNMSAVE  MOVE IN SUBSYSTEM NAME\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n***********************************************************************\n         LA    R2,SSOBHSIZ             GET SSOB HEADER LENGTH\n         LA    R14,SSVIFSIZ            GET SSVI FIXED LENGTH SIZE\n         ST    R14,VISIZE              SAVE SIZE\n         AR    R2,R14                  CALCULATE A STARTING LENGTH\n         ST    R2,SSOBLN               SAVE LENGTH VALUE\nSSCALL   EQU   *\n         L     R2,SSOBLN               GET LENGTH\n         STORAGE OBTAIN,LENGTH=(R2),LOC=ANY\n         ST    R1,SSOBADDR             SAVE STORAGE ADDRESS\n         LR    R0,R1                   COPY STORAGE ADDRESS\n         LR    R14,R1                  COPY STORAGE ADDRESS\n         L     R1,SSOBLN               GET LENGTH\n         XR    R15,R15                 SET FILL BYTE\n         MVCL  R0,R14                  CLEAR THE STORAGE\n***********************************************************************\n         L     R2,SSOBADDR             GET SSOB ADDRESS\n         USING SSOBEGIN,R2             SET ADDRESSABILITY\n         XC    SSOB(SSOBHSIZ),SSOB     CLEAR THE SSOB\n         MVC   SSOBID(4),=C'SSOB'      SET SSOB ID\n         MVC   SSOBFUNC(2),=AL2(SSOBSSVI) SET FUNCTION ID\n         MVC   SSOBLEN(2),=AL2(SSOBHSIZ) SET SSOB HEADER SIZE\n         LR    R3,R2                   GET SSOB ADDRESS\n         AH    R3,SSOBLEN              CALCULATE SSVI ADDRESS\n         USING SSVI,R3                 SET ADDRESSABILITY\n         ST    R3,SSOBINDV             SAVE SSVI ADDRESS\n***********************************************************************\n         XC    SSVIHEAD(SSVIMSIZ),SSVIHEAD CLEAR THE SSVI\n         L     R15,VISIZE              GET SSVI AREA LENGTH\n         STCM  R15,B'0011',SSVILEN     SAVE THE LENGTH\n         MVI   SSVIVER,SSVICVER        MOVE CURRENT VERSION NUMBER IN\n         MVC   SSVIID,=A(SSVICID)      SAVE THE IDENTIFIER\n         LR    R1,R2                   GET SSOB ADDRESS\n         O     R1,=X'80000000'         TURN ON X'80' BIT\n         ST    R1,SSOBPTR              SAVE SSOB PTR\n         LA    R1,SSOBPTR              POINT TO SSOB PTR\n         IEFSSREQ ,                    MAKE SUBSYSTEM REQUEST\n         CLC   SSOBRETN(4),=F'0'       SUBSYSTEM DATA RETURNED?\n         BE    SSDATAOK                YES - THINGS ARE GOOD\n         CLC   SSOBRETN(4),=F'8'       DATA BUFFER TOO SMALL?\n***********************************************************************\n         L     R1,SSOBADDR             GET STORAGE ADDRESS\n         L     R0,SSOBLN               GET STORAGE LENGTH\n         CLC   VISIZE+2(2),SSVIRLEN    CURRENT SZ & REQUIRED SZ EQUAL?\n         BE    SSVIERR                 YES - ISSUE AN ERROR\n         XC    VISIZE(4),VISIZE        CLEAR CURRENT SSVI LENGTH\n         MVC   VISIZE+2(2),SSVIRLEN    COPY THE REQUIRED SIZE\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\n         LA    R2,SSOBHSIZ             GET SSOB HEADER LENGTH\n         L     R14,VISIZE              SSVI REQUIRED SIZE\n         AR    R2,R14                  CALCULATE A STARTING LENGTH\n         ST    R2,SSOBLN               SAVE LENGTH VALUE\n         B     SSCALL                  TRY AGAIN\n***********************************************************************\nSSDATAOK EQU   *\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG2       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+29(8),SSVICNAM  MOVE IN SUBSYSTEM COMMON NAME\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n         MVC   CNAMSAVE(8),SSVICNAM    SAVE SUBSYSTEM COMMON NAME\n***********************************************************************\n*        SSC change start\n*\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG8       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+20(8),SSVIVERS  MOVE IN Version of subsystem\n         MVC   WTOWK+4+40(8),SSVIFMID  MOVE IN FMID    of subsystem\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n***********************************************************************\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG9       MOVE IN MESSAGE CONTENT\n         XR    R7,R7                   Init R7\n         IC    R7,SSVIPLVL             Convert to decimal\n         CVD   R7,PD1                  Convert to packed decimal\n         MVC   WTOWK+4+23(3),=X'202020' Move edit pattern to unpack\n         ED    WTOWK+4+23(3),PD1+6     Format output\n         XR    R7,R7                   Init R7\n         IC    R7,SSVISLVL             Convert to decimal\n         CVD   R7,PD1                  Convert to packed decimal\n         MVC   WTOWK+4+43(3),=X'202020' Move edit pattern to unpack\n         ED    WTOWK+4+43(3),PD1+6     Format output\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n*\n*        SSC Change end\n***********************************************************************\n         L     R7,SSVISDOF            GET OFFSET OF SYSTEM DEFINED INFO\n         LTR   R7,R7                   ANY SYSTEM DEFINED INFO?\n         BZ    RETURN                  NO - WE'RE DONE\n         LA    R7,0(R7,R3)             POINT TO SYSTEM DEFINED INFO\n         CLC   0(2,R7),=H'0'           ANY DATA?\n         BE    RETURN                  NO - WE'RE DONE\n         XR    R8,R8                   CLEAR R8\n         ICM   R8,B'0011',0(R7)        GET DATA LENGTH\n         LA    R7,2(,R7)               POINT TO FIRST KEYWORD\n         LA    R8,0(R8,R7)             POINT TO END OF DATA\n***********************************************************************\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG6       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+20(4),SSNMSAVE  MOVE IN SUBSYSTEM NAME\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n***********************************************************************\n*                                                                     *\n* R7 POINTS TO THE START OF THE DATA.                                 *\n* R8 POINTS TO THE END OF THE DATA.                                   *\n*                                                                     *\n* KEYWORDS CAN BE RELIABLY LOCATED USING THE FOLLOWING RULE:          *\n*                                                                     *\n* ,KEYWORD=                                                           *\n*                                                                     *\n* WE ARE AT THE START OF THE DATA.                                    *\n* THE FIRST KEYWORD WILL END AT THE FIRST '=' CHARACTER.              *\n* POSITION PAST THE '=' AND SEARCH FOR THE NEXT KEYWORD LOCATION.     *\n* ONCE WE DETECT THE NEXT KEYWORD,                                    *\n* WE KNOW WHERE THE DATA FOR THE PREVIOUS KEYWORD ENDS.               *\n*                                                                     *\n***********************************************************************\nNEXTKWD  EQU *\n         LR    R9,R7                   COPY R7\nKWDENDLP EQU   *\n         CR    R9,R8                   END OF DATA?\n         BNL   SYSINFOE                YES - NOT NORMAL\n         CLI   0(R9),C'='              KEYWORD END?\n         BE    KWDNEXT                 YES - FIND NEXT KEYWORD\n         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE\n         B     KWDENDLP                CHECK IT OUT\nKWDNEXT  EQU   *\n         LA    R9,1(,R9)               POINT TO KEYWORD DATA\nKWDNXTLP EQU   *\n         CR    R9,R8                   END OF DATA?\n         BNL   KWDLAST                 YES - WE HAVE THE LAST KEYWORD\n         CLI   0(R9),C'='              KEYWORD END INDICATOR?\n         BNE   KWDNXT10                NO - CONTINUE SEARCH\n         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE\n         CLI   0(R9),C''''             START OF KEYWORD DATA?\n         BNE   KWDNXTLP                NO - CHECK AGAIN\nKWDNXT05 EQU   *\n         BCTR  R9,0                    BACK UP ONE BYTE\n         CLI   0(R9),C','              COMMA?\n         BE    KWDNEXTE                YES - WE'VE FOUND NEXT KEYWORD\n         B     KWDNXT05                TRY AGAIN\nKWDNXT10 EQU   *\n         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE\n         B     KWDNXTLP                TRY AGAIN\nKWDLAST  EQU   *\n         OI    PARSEFLG,LAST           SET LAST KEYWORD FLAG\nKWDLASTL EQU   *\n         BCTR  R9,0                    POINT TO PREVIOUS BYTE\n         CLI   0(R9),C' '              A BLANK?\n         BE    KWDLASTL                YES - CHECK PREVIOUS\n         CLI   0(R9),X'00'             NULL?\n         BE    KWDLASTL                YES - CHECK PREVIOUS\n         LA    R9,1(,R9)               POINT PAST END OF DATA\nKWDNEXTE EQU   *\n         LA    R7,1(,R7)               SKIP PAST COMMA\n         LR    R15,R9                  GET END ADDRESS\n         SR    R15,R7                  GET LENGTH\n         C     R15,=F'118'             MAX LENGTH OK?\n         BNH   DATALNOK                YES - LENGTH IS OK\n         L     R15,=F'118'             SET MAX LENGTH\nDATALNOK EQU   *\n         CLC   0(7,R7),=C'EXW_SYS'     JES3 EXTERNAL WRITER CLASS?\n         BNE   CHKSYSO2                NO - CHECK NEXT SYSOUT TYPE\n         ST    R7,ESYSOUTA             SAVE KEYWORD START ADDRESS\n         B     KWDOUT                  GO ISSUE MESSAGE\nCHKSYSO2 EQU   *\n         CLC   0(7,R7),=C'TSO_SYS'     TSO HELD OUTPUT CLASS?\n         BNE   CHKSYSO3                NO - CHECK NEXT SYSOUT TYPE\n         ST    R7,TSYSOUTA             SAVE KEYWORD START ADDRESS\n         B     KWDOUT                  GO ISSUE MESSAGE\nCHKSYSO3 EQU   *\n         CLC   0(7,R7),=C'WTR_SYS'     NON HELD OUTPUT CLASS?\n         BNE   KWDOUT                  NO - NOT ONE WE'RE INTERESTED IN\n         ST    R7,WSYSOUTA             SAVE KEYWORD START ADDRESS\n         B     KWDOUT                  GO ISSUE MESSAGE\nKWDOUT   EQU   *\n***********************************************************************\n         BCTR  R15,0                   REDUCE BY ONE\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG7       MOVE IN MESSAGE CONTENT\n         EX    R15,DATAMVC             MOVE THE DATA\n         WTO   MF=(E,WTOWK)            ISSUE THE WTO\n***********************************************************************\n         TM    PARSEFLG,LAST           ARE WE DONE?\n         BO    LISTSYSO                YES - LIST OUTPUT CLASSES\n         LR    R7,R9                   POINT TO NEXT KEYWORD\n         B     NEXTKWD                 GO CHECK IT OUT\n***********************************************************************\nLISTSYSO EQU   *\n         CLC   ESYSOUTA(4),=F'0'       EXTERNAL WRITER CLASS DATA?\n         BNE   CLASDATA                YES - WE HAVE CLASS DATA\n         CLC   TSYSOUTA(4),=F'0'       TSO HELD CLASS DATA?\n         BNE   CLASDATA                YES - WE HAVE CLASS DATA\n         CLC   WSYSOUTA(4),=F'0'       NON HELD CLASS DATA?\n         BNE   CLASDATA                YES - WE HAVE CLASS DATA\n         B     RETURN                  NO CLASS DATA\nCLASDATA EQU   *\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG3       MOVE IN MESSAGE CONTENT\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n***********************************************************************\n         LA    R5,CLASSLST             GET CLASS LIST ADDRESS\nCLASSLP  EQU *\n         CLI   0(R5),X'FF'             END OF LIST?\n         BE    RETURN                  YES - WE'RE DONE\n***********************************************************************\n         L     R9,ESYSOUTA             GET EXTERNAL WRITER AREA ADDRESS\n         LTR   R9,R9                   ANY DATA?\n         BZ    NXTTYPE2                NO - CHECK NEXT TYPE\n         LA    R9,18(,R9)              POINT TO CLASS DATA\nTYPELP1  EQU   *\n         CLI   0(R9),C''''             END QUOTE?\n         BE    NXTTYPE2                YES - CHECK NEXT TYPE\n         CLC   0(1,R9),0(R5)           A CLASS MATCH?\n         BE    CLASMCH1                YES - SET MATCH TYPE 1 VALUES\n         CLI   1(R9),C''''             END QUOTE?\n         BE    NXTTYPE2                YES - CHECK NEXT TYPE\n         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE\n         B     TYPELP1                 GO CHECK IT OUT\nCLASMCH1 EQU   *\n         MVC   CLASSID(20),=CL20'JES3  EXTERNAL WRITER'\n         B     CLASSOUT                GO ISSUE THE MESSAGE\n***********************************************************************\nNXTTYPE2 EQU   *\n         L     R9,TSYSOUTA             GET TSO AREA ADDRESS\n         LTR   R9,R9                   ANY DATA?\n         BZ    NXTTYPE3                NO - CHECK NEXT TYPE\n         LA    R9,18(,R9)              POINT TO CLASS DATA\nTYPELP2  EQU   *\n         CLI   0(R9),C''''             END QUOTE?\n         BE    NXTTYPE3                YES - CHECK NEXT TYPE\n         CLC   0(1,R9),0(R5)           A CLASS MATCH?\n         BE    CLASMCH2                YES - SET MATCH TYPE 2 VALUES\n         CLI   1(R9),C''''             END QUOTE?\n         BE    NXTTYPE3                YES - CHECK NEXT TYPE\n         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE\n         B     TYPELP2                 GO CHECK IT OUT\nCLASMCH2 EQU   *\n         MVC   CLASSID(20),=CL20'TSO HELD'\n         B     CLASSOUT                GO ISSUE THE MESSAGE\n***********************************************************************\nNXTTYPE3 EQU   *\n         L     R9,WSYSOUTA             GET NON HELD AREA ADDRESS\n         LTR   R9,R9                   ANY DATA?\n         BZ    PRGCLASS                NO - MUST BE A PURGE CLASS\n         LA    R9,18(,R9)              POINT TO CLASS DATA\nTYPELP3  EQU   *\n         CLI   0(R9),C''''             END QUOTE?\n         BE    PRGCLASS                YES - MUST BE A PURGE CLASS\n         CLC   0(1,R9),0(R5)           A CLASS MATCH?\n         BE    CLASMCH3                YES - SET MATCH TYPE 3 VALUES\n         CLI   1(R9),C''''             END QUOTE?\n         BE    PRGCLASS                YES - MUST BE A PURGE CLASS\n         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE\n         B     TYPELP3                 GO CHECK IT OUT\nCLASMCH3 EQU   *\n         MVC   CLASSID(20),=CL20'NON HELD'\n         B     CLASSOUT                GO ISSUE THE MESSAGE\n***********************************************************************\nPRGCLASS EQU   *\n         MVC   CLASSID(20),=CL20'PURGE'\n         B     CLASSOUT                GO ISSUE THE MESSAGE\n***********************************************************************\nCLASSOUT EQU   *\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG4       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+16(1),0(R5)     MOVE IN THE CLASS\n         MVC   WTOWK+4+19(20),CLASSID  MOVE IN THE CLASS INFORMATION\nNOEXTIND EQU   *\n         WTO   MF=(E,WTOWK)            ISSUE THE WTO\nNXTCLASS EQU   *\n         LA    R5,1(,R5)               POINT TO NEXT CLASS\n         B     CLASSLP                 GO CHECK IT OUT\n***********************************************************************\nRETURN   EQU   *\n         ICM   R1,B'1111',SSOBADDR     GET SSOB ADDRESS\n         BZ    NOSSOB                  IF NO SSOB DON'T RELEASE\n         L     R0,SSOBLN               GET STORAGE LENGTH\n         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)\nNOSSOB   EQU   *\n         L     R3,SAVEAREA+4           SAVE OLD SAVEAREA ADDRESS\n         LR    R1,R13                  GET WORKING STORAGE ADDRESS\n         STORAGE RELEASE,LENGTH=WORKLEN,ADDR=(R1)\n         LR    R13,R3                  COPY OLD SAVEAREA ADDRESS\n         LM    R14,R12,12(R13)         RESTORE THE REGISTERS\n         XR    R15,R15                 CLEAR R15\n         BR    R14\n***********************************************************************\nSSVIERR  EQU *\n         WTO   'SSINFO - UNABLE TO OBTAIN SUBSYSTEM INFORMATION.',     X\n               ROUTCDE=(1),DESC=(6)\n         B     RETURN                  GO HOME\n***********************************************************************\nSYSINFOE EQU   *\n         WTO   'SSINFO - INVALID END OF SUBSYSTEM INFORMATION DATA DETEX\n               CTED',                                                  X\n               ROUTCDE=(1),DESC=(6)\n         B     RETURN                  GO HOME\n***********************************************************************\nNOSSCVT  EQU   *\n         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL\n         MVC   WTOWK+4(120),MSG5       MOVE IN MESSAGE CONTENT\n         MVC   WTOWK+4+40(4),SSNMSAVE  MOVE IN SUBSYSTEM NAME\n         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE\n         B     RETURN                  GO HOME\n***********************************************************************\nDATAMVC  MVC   WTOWK+4+2(*-*),0(R7)    MOVE SUBSYSTEM INFO DATA\n***********************************************************************\nCLASSLST DC    C'ABCDEFGHIJKLMNOPQRSTUWVXYZ0123456789',X'FF'\n***********************************************************************\nWTO1LS   WTO   '         1         2         3         4         5     X\n                   6         7         8         9         0         1 X\n                       2',ROUTCDE=(1),DESC=(6),MF=L\nWTO1LN   EQU   *-WTO1LS\nMSG1     DC    CL120'SSINFO - Active subsystem name is XXXXXXXX'\nMSG2     DC    CL120'SSINFO - Common subsystem is XXXX     '\nMSG3     DC    CL120'SSINFO - OUTPUT CLASS information'\nMSG4     DC    CL120'         CLASS: X                      '\nMSG5     DC    CL120'SSINFO - SSCVT not located for subsystem XXXX    '\nMSG6     DC    CL120'SSINFO - Additional XXXX subsystem information:'\nMSG7     DC    CL120' '\nMSG8     DC    CL120'SSINFO - Version is             FMID is          '  SSC\nMSG9     DC    CL120'SSINFO - Product Level       Service Level       '  SSC\n         LTORG ,\nWORKAREA DSECT\nSAVEAREA DS    18F\nSSOBPTR  DS    F\nCLASS    DS    CL1\nPARSEFLG DS    XL1\nCOMMA    EQU   X'80'\nQUOTE    EQU   X'40'\nBLANK    EQU   X'20'\nEQUAL    EQU   X'10'\nLAST     EQU   X'08'\nDBL1     DS    2D\nDBL2     DS    2D\nPD1      DS    D                      Packed decimal 1  SSC change\nESYSOUTA DS    F\nTSYSOUTA DS    F\nWSYSOUTA DS    F\nCLASSID  DS    CL20\nCNAMSAVE DS    CL8\nSSNMSAVE DS    CL8\nSSNMLEN  DS    F\nSSOBADDR DS    F\nSSOBLN   DS    F\nVISIZE   DS    F\nWTOWK    DS    0D,CL(WTO1LN)\nWORKLEN  EQU   *-WORKAREA\n         CVT      DSECT=YES\n         IEFJESCT\n         IEFJSCVT\n         IEESMCA\n         IKJTCB\n         IEZJSCB\n         IEFJSSIB\n         IEFSSOBH\n         IEFSSVI  DSECT=YES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n         END\n//*\n//L       EXEC PGM=HEWL,COND=(5,LT,C),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLIN   DD  DSN=&OBJ,\n//             DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(1024,(120,120),,,ROUND)\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB(SSINFO)\n//SYSLIN    DD *\n  INCLUDE OBJECT(SSINFO)\n  ENTRY   SSINFO\n  NAME    SSINFO(R)\n//*\n//SSINFO  EXEC  PGM=SSINFO\n//STEPLIB  DD   DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT938/FILE938.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT938", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}