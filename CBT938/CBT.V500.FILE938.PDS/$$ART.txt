JES subsystem information

Obtaining specific information about the primary subsystem under
which a given job is running can be cumbersome.  You generally
need to know something about the internal control block structure
to get at the information you are trying to locate.  What makes
this an even more difficult process is that the control block
structures for JES2 and JES3 are different and you cannot
leverage data location techniques across the two environments.

IBM has tried to provide a little assistance in this area. There
exists a directed subsystem interface (SSI) call that can be used
to extract information about a specific subsystem. The upside of
this subsystem call is that it can be made in a consistent fashion
independently of the subsystem your program is running under
(either JES2 or JES3).  The downside is that the subsystem call
currently returns only a small subset of information about the
primary subsystem in control.  If your information requirements can
be satisfied by this subsystem call, it does provide a consistent
method and allows your program to run successfully without concern
for which JES environment may be in control.

The subsystem call I am referring to is the directed subsystem
function call to SSI function code 54.  Subsystem Version
Information (SSVI).  Although you could build in support for
function code 54 in your own subsystems, this article will focus
on SSI function code 54 because it specifically relates to JES2
or JES3.

The function code 54 subsystem function call returns information
in the supplied SSOB (SubSystem Options Block).  The SSVI function
specific area of the SSOB consists of a fixed-length header
component and a variable-length data area component.

The fixed-length header contains one particularly useful bit of
information, which is referred to as the subsystem common name.
The value returned for the subsystem common name is either JES2
or JES3, depending on the JES environment under which the program
is running.  This can be important, especially if your program is
running under a secondary JES that has a subsystem name other
than the traditional JES2 or JES3 we may expect to see.

The variable-length data includes (but is not limited to)
information about the JES node name, the JES member name, whether
or not four-digit device numbers are supported, and how output
classes are currently set up.  For a complete list of information
available in the variable length data see section  3.1.5.16 Format
of the Variable Output Sections  in the OS/390 MVS Using the
Subsystem Interface manual.

A practical use for the information available from this subsystem
function call is to determine viable external writer output classes.
A traditional MVS external writer using the process SYSOUT
subsystem function call (SSI function code 1) in a JES2
environment requires that you direct SYSOUT output to output
classes with certain specific characteristics if the desired output
is to be properly processed by the external writer. Specifically, a
HOLD or PURGE output class should not be used as a target for
SYSOUT output if the external writer is to operate as expected.

A directed SSI function code 54 call can be made to extract
subsystem information independently of the JES environment,
and the information about output class characteristics and the
JES environment can be obtained without regard for JES
specifics.

The program provided with this article, SSINFO, uses the function
code 54 subsystem call to obtain subsystem information.  It
displays information, via WTO, to the operator console, about the
JES environment that SSINFO is running under as well as
information about the output classes and their current
characteristics.

Sample JCL to linkedit SSINFO:

//IEWL     EXEC  PGM=HEWLHØ96,PARM='XREF,LIST,MAP'
//SYSPRINT DD    SYSOUT=*
//SYSUT1   DD    UNIT=SYSDA,SPACE=(CYL,(2,1))
//OBJECT   DD    DSN=object.library,DISP=SHR
//SYSLMOD  DD    DSN=load.library,DISP=SHR
//SYSLIN   DD    *
   INCLUDE OBJECT(SSINFO)
   ENTRY   SSINFO
   NAME    SSINFO(R)

Sample JCL for running the SSINFO program:

//SSINFO   EXEC  PGM=SSINFO
//STEPLIB  DD    DSN=load.library,DISP=SHR

Any output produced by SSINFO is sent to the operator console.
Sample console output generated from SSINFO


Any output produced by SSINFO is sent to the operator console.
Sample console output generated from SSINFO:
 SSINFO - ACTIVE SUBSYSTEM NAME IS JESA
 SSINFO - COMMON SUBSYSTEM IS JES2
 SSINFO - ADDITIONAL JESA SUBSYSTEM INFORMATION:
   JES_NODE='ESS     '
   JES_MEMBERNAME='JESA'
   DYNAMIC_OUTPUT='YES'
   INITIATOR_RESTART='YES'
   MULTIPLE_STCTSO='YES'
   FOUR_DIGIT_DEVNUMS='YES'
   AUTO_RESTART_MANAGER='YES'
   SAPI='YES'
   SAPI_CHARS='NO'
   CLIENT_PRINT='YES'
   TSO_SYSOUT_CLASS='H,K,O,X'
   WTR_SYSOUT_CLASS='A,B,C,D,E,F,G,I,J,L,M,N,P,Q,R,S,T,U,V,W,Y,Ø,1,2,3,4
,6,7,8'
 SSINFO - OUTPUT CLASS INFORMATION
          CLASS: A  NON HELD
          CLASS: B  NON HELD
          CLASS: C  NON HELD
          CLASS: D  NON HELD
          CLASS: E  NON HELD
          CLASS: F  NON HELD
          CLASS: G  NON HELD
          CLASS: H  TSO HELD
          CLASS: I  NON HELD
          CLASS: J  NON HELD
          CLASS: K  TSO HELD
          CLASS: L  NON HELD
          CLASS: M  NON HELD
          CLASS: N  NON HELD
          CLASS: O  TSO HELD
          CLASS: P  NON HELD
          CLASS: Q  NON HELD
          CLASS: R  NON HELD
          CLASS: S  NON HELD
          CLASS: T  NON HELD
          CLASS: U  NON HELD
          CLASS: W  NON HELD
          CLASS: V  NON HELD
          CLASS: X  TSO HELD
          CLASS: Y  NON HELD
          CLASS: Z  PURGE
          CLASS: Ø  NON HELD
          CLASS: 1  NON HELD
          CLASS: 2  NON HELD
          CLASS: 3  NON HELD
          CLASS: 4  NON HELD
          CLASS: 5  PURGE
          CLASS: 6  NON HELD
          CLASS: 7  NON HELD
          CLASS: 8  NON HELD
          CLASS: 9  PURGE

Notice that in this example the subsystem name is JESA, but the
common subsystem name is JES2. In this case, the SSINFO
utility was run under a secondary JES2 subsystem running as
JESA.

The SSINFO program provides an example of the environment
set-up necessary to make a directed subsystem call using the
IEFSSREQ macro. It is also useful in providing information about
the JES subsystem under which it is running. Try it out in your
environment and check your results.

System Programmer (Canada)

