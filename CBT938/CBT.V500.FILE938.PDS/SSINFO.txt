//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,
//    MSGCLASS=X,NOTIFY=&SYSUID
//*
//C       EXEC PGM=ASMA90,
//             PARM=(NODECK,OBJECT)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//*        DD  DSN=SYS1.SHASMAC,DISP=SHR
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(120,120),,,ROUND)
//SYSPUNCH DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,
//             DISP=(MOD,PASS),
//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)
//SYSIN    DD  *
SSINFO CSECT
SSINFO AMODE 31
SSINFO RMODE ANY
***********************************************************************
*                                                                     *
* THE SSINFO UTILITY IS USEFUL FOR DISPLAYING SUBSYSTEM               *
* INFORMATION FOR EITHER JES2 OR JES3 SUBSYSTEMS.                     *
*                                                                     *
* IT PROVIDES SAMPLE CODE FOR PERFORMING A DIRECTED SUBSYSTEM         *
* FUNCTION CALL USING THE IEFSSREQ MACRO.                             *
*                                                                     *
* XEPHON MVS June 2003, Magazine 201                                  *
*                                                                     *
***********************************************************************
         USING SSINFO,R15              SET TEMPORARY ADDRESSABILITY
         B     BEGIN                   BRANCH TO PROGRAM LOGIC
         DC    C'SSINFO '              MODULE NAME
         DC    C'&SYSDATE '            ASSEMBLY DATE
         DC    C'&SYSTIME '            ASSEMBLY TIME
         DS    0H                      ALIGNMENT
BEGIN    EQU   *
         DROP  R15
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R10,R15                 COPY MODULE ADDRESS
         LA    R11,4095(,R10)          SET UP SECOND ...
         LA    R11,1(,R11)             BASE REGIRSTER
         USING SSINFO,R10,R11          SET ADDRESSABILITY
         LR    R9,R13                  COPY SAVEAREA ADDRESS
         LR    R2,R1                   COPY PARAMETER ADDRESS
         STORAGE OBTAIN,LENGTH=WORKLEN,LOC=ANY
         LR    R0,R1                   SAVE THE STORAGE ADDRESS
         LR    R14,R1                  COPY IT AGAIN
         LR    R3,R1                   ONCE MORE FOR GOOD MEASURE
         L     R1,=A(WORKLEN)          GET THE LENGTH
         XR    R15,R15                 CLEAR THE FILL BYTE
         MVCL  R0,R14                  CLEAR WORKING STORAGE
         ST    R9,4(,R3)               SAVE PREVIOUS SAVEAREA
         LR    R13,R3                  COPY WORKING STORAGE ADDRESS
         USING WORKAREA,R13            SET ADDRESSABILITY
         L     R15,16                  GET CVT ADDRESS
         L     R15,0(,R15)             GET TCB/ASCB AREA ADDRESS
         L     R15,4(,R15)             GET CURRENT TCB
         L     R15,TCBJSCB-TCB(,R15)   GET JSCB ADDRESS?
         L     R15,JSCBSSIB-IEZJSCB(,R15) GET SSIB ADDRESS?
         MVC   SSNMSAVE(8),=8C' '      INITIALIZE THE AREA
         MVC   SSNMSAVE(4),SSIBSSNM-SSIB(R15) MV SSNAME
         LA    R1,SSNMSAVE             GET STARTING ADDRESS
         XR    R15,R15                 CLEAR COUNTER
LENLP1   EQU   *
         C     R15,=F'8'               MAX LENGTH?
         BNL   LENEND1                 YES - WE'RE DONE WITH LENGTH
         CLI   0(R1),C' '              A BLANK?
         BE    LENEND1                 YES - WE'RE DONE WITH LENGTH
         CLI   0(R1),X'00'             A NULL?
         BE    LENEND1                 YES - WE'RE DONE WITH LENGTH
         LA    R1,1(,R1)               POINT TO NEXT BYTE
         LA    R15,1(,R15)             ADD ONE TO COUNT
         B     LENLP1                  CHECK NEXT BYTE
LENEND1  EQU   *
         ST    R15,SSNMLEN             SAVE THE LENGTH
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG1       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+34(8),SSNMSAVE  MOVE IN SUBSYSTEM NAME
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
***********************************************************************
         LA    R2,SSOBHSIZ             GET SSOB HEADER LENGTH
         LA    R14,SSVIFSIZ            GET SSVI FIXED LENGTH SIZE
         ST    R14,VISIZE              SAVE SIZE
         AR    R2,R14                  CALCULATE A STARTING LENGTH
         ST    R2,SSOBLN               SAVE LENGTH VALUE
SSCALL   EQU   *
         L     R2,SSOBLN               GET LENGTH
         STORAGE OBTAIN,LENGTH=(R2),LOC=ANY
         ST    R1,SSOBADDR             SAVE STORAGE ADDRESS
         LR    R0,R1                   COPY STORAGE ADDRESS
         LR    R14,R1                  COPY STORAGE ADDRESS
         L     R1,SSOBLN               GET LENGTH
         XR    R15,R15                 SET FILL BYTE
         MVCL  R0,R14                  CLEAR THE STORAGE
***********************************************************************
         L     R2,SSOBADDR             GET SSOB ADDRESS
         USING SSOBEGIN,R2             SET ADDRESSABILITY
         XC    SSOB(SSOBHSIZ),SSOB     CLEAR THE SSOB
         MVC   SSOBID(4),=C'SSOB'      SET SSOB ID
         MVC   SSOBFUNC(2),=AL2(SSOBSSVI) SET FUNCTION ID
         MVC   SSOBLEN(2),=AL2(SSOBHSIZ) SET SSOB HEADER SIZE
         LR    R3,R2                   GET SSOB ADDRESS
         AH    R3,SSOBLEN              CALCULATE SSVI ADDRESS
         USING SSVI,R3                 SET ADDRESSABILITY
         ST    R3,SSOBINDV             SAVE SSVI ADDRESS
***********************************************************************
         XC    SSVIHEAD(SSVIMSIZ),SSVIHEAD CLEAR THE SSVI
         L     R15,VISIZE              GET SSVI AREA LENGTH
         STCM  R15,B'0011',SSVILEN     SAVE THE LENGTH
         MVI   SSVIVER,SSVICVER        MOVE CURRENT VERSION NUMBER IN
         MVC   SSVIID,=A(SSVICID)      SAVE THE IDENTIFIER
         LR    R1,R2                   GET SSOB ADDRESS
         O     R1,=X'80000000'         TURN ON X'80' BIT
         ST    R1,SSOBPTR              SAVE SSOB PTR
         LA    R1,SSOBPTR              POINT TO SSOB PTR
         IEFSSREQ ,                    MAKE SUBSYSTEM REQUEST
         CLC   SSOBRETN(4),=F'0'       SUBSYSTEM DATA RETURNED?
         BE    SSDATAOK                YES - THINGS ARE GOOD
         CLC   SSOBRETN(4),=F'8'       DATA BUFFER TOO SMALL?
***********************************************************************
         L     R1,SSOBADDR             GET STORAGE ADDRESS
         L     R0,SSOBLN               GET STORAGE LENGTH
         CLC   VISIZE+2(2),SSVIRLEN    CURRENT SZ & REQUIRED SZ EQUAL?
         BE    SSVIERR                 YES - ISSUE AN ERROR
         XC    VISIZE(4),VISIZE        CLEAR CURRENT SSVI LENGTH
         MVC   VISIZE+2(2),SSVIRLEN    COPY THE REQUIRED SIZE
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)
         LA    R2,SSOBHSIZ             GET SSOB HEADER LENGTH
         L     R14,VISIZE              SSVI REQUIRED SIZE
         AR    R2,R14                  CALCULATE A STARTING LENGTH
         ST    R2,SSOBLN               SAVE LENGTH VALUE
         B     SSCALL                  TRY AGAIN
***********************************************************************
SSDATAOK EQU   *
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG2       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+29(8),SSVICNAM  MOVE IN SUBSYSTEM COMMON NAME
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
         MVC   CNAMSAVE(8),SSVICNAM    SAVE SUBSYSTEM COMMON NAME
***********************************************************************
*        SSC change start
*
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG8       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+20(8),SSVIVERS  MOVE IN Version of subsystem
         MVC   WTOWK+4+40(8),SSVIFMID  MOVE IN FMID    of subsystem
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
***********************************************************************
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG9       MOVE IN MESSAGE CONTENT
         XR    R7,R7                   Init R7
         IC    R7,SSVIPLVL             Convert to decimal
         CVD   R7,PD1                  Convert to packed decimal
         MVC   WTOWK+4+23(3),=X'202020' Move edit pattern to unpack
         ED    WTOWK+4+23(3),PD1+6     Format output
         XR    R7,R7                   Init R7
         IC    R7,SSVISLVL             Convert to decimal
         CVD   R7,PD1                  Convert to packed decimal
         MVC   WTOWK+4+43(3),=X'202020' Move edit pattern to unpack
         ED    WTOWK+4+43(3),PD1+6     Format output
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
*
*        SSC Change end
***********************************************************************
         L     R7,SSVISDOF            GET OFFSET OF SYSTEM DEFINED INFO
         LTR   R7,R7                   ANY SYSTEM DEFINED INFO?
         BZ    RETURN                  NO - WE'RE DONE
         LA    R7,0(R7,R3)             POINT TO SYSTEM DEFINED INFO
         CLC   0(2,R7),=H'0'           ANY DATA?
         BE    RETURN                  NO - WE'RE DONE
         XR    R8,R8                   CLEAR R8
         ICM   R8,B'0011',0(R7)        GET DATA LENGTH
         LA    R7,2(,R7)               POINT TO FIRST KEYWORD
         LA    R8,0(R8,R7)             POINT TO END OF DATA
***********************************************************************
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG6       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+20(4),SSNMSAVE  MOVE IN SUBSYSTEM NAME
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
***********************************************************************
*                                                                     *
* R7 POINTS TO THE START OF THE DATA.                                 *
* R8 POINTS TO THE END OF THE DATA.                                   *
*                                                                     *
* KEYWORDS CAN BE RELIABLY LOCATED USING THE FOLLOWING RULE:          *
*                                                                     *
* ,KEYWORD=                                                           *
*                                                                     *
* WE ARE AT THE START OF THE DATA.                                    *
* THE FIRST KEYWORD WILL END AT THE FIRST '=' CHARACTER.              *
* POSITION PAST THE '=' AND SEARCH FOR THE NEXT KEYWORD LOCATION.     *
* ONCE WE DETECT THE NEXT KEYWORD,                                    *
* WE KNOW WHERE THE DATA FOR THE PREVIOUS KEYWORD ENDS.               *
*                                                                     *
***********************************************************************
NEXTKWD  EQU *
         LR    R9,R7                   COPY R7
KWDENDLP EQU   *
         CR    R9,R8                   END OF DATA?
         BNL   SYSINFOE                YES - NOT NORMAL
         CLI   0(R9),C'='              KEYWORD END?
         BE    KWDNEXT                 YES - FIND NEXT KEYWORD
         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE
         B     KWDENDLP                CHECK IT OUT
KWDNEXT  EQU   *
         LA    R9,1(,R9)               POINT TO KEYWORD DATA
KWDNXTLP EQU   *
         CR    R9,R8                   END OF DATA?
         BNL   KWDLAST                 YES - WE HAVE THE LAST KEYWORD
         CLI   0(R9),C'='              KEYWORD END INDICATOR?
         BNE   KWDNXT10                NO - CONTINUE SEARCH
         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE
         CLI   0(R9),C''''             START OF KEYWORD DATA?
         BNE   KWDNXTLP                NO - CHECK AGAIN
KWDNXT05 EQU   *
         BCTR  R9,0                    BACK UP ONE BYTE
         CLI   0(R9),C','              COMMA?
         BE    KWDNEXTE                YES - WE'VE FOUND NEXT KEYWORD
         B     KWDNXT05                TRY AGAIN
KWDNXT10 EQU   *
         LA    R9,1(,R9)               POINT TO NEXT DATA BYTE
         B     KWDNXTLP                TRY AGAIN
KWDLAST  EQU   *
         OI    PARSEFLG,LAST           SET LAST KEYWORD FLAG
KWDLASTL EQU   *
         BCTR  R9,0                    POINT TO PREVIOUS BYTE
         CLI   0(R9),C' '              A BLANK?
         BE    KWDLASTL                YES - CHECK PREVIOUS
         CLI   0(R9),X'00'             NULL?
         BE    KWDLASTL                YES - CHECK PREVIOUS
         LA    R9,1(,R9)               POINT PAST END OF DATA
KWDNEXTE EQU   *
         LA    R7,1(,R7)               SKIP PAST COMMA
         LR    R15,R9                  GET END ADDRESS
         SR    R15,R7                  GET LENGTH
         C     R15,=F'118'             MAX LENGTH OK?
         BNH   DATALNOK                YES - LENGTH IS OK
         L     R15,=F'118'             SET MAX LENGTH
DATALNOK EQU   *
         CLC   0(7,R7),=C'EXW_SYS'     JES3 EXTERNAL WRITER CLASS?
         BNE   CHKSYSO2                NO - CHECK NEXT SYSOUT TYPE
         ST    R7,ESYSOUTA             SAVE KEYWORD START ADDRESS
         B     KWDOUT                  GO ISSUE MESSAGE
CHKSYSO2 EQU   *
         CLC   0(7,R7),=C'TSO_SYS'     TSO HELD OUTPUT CLASS?
         BNE   CHKSYSO3                NO - CHECK NEXT SYSOUT TYPE
         ST    R7,TSYSOUTA             SAVE KEYWORD START ADDRESS
         B     KWDOUT                  GO ISSUE MESSAGE
CHKSYSO3 EQU   *
         CLC   0(7,R7),=C'WTR_SYS'     NON HELD OUTPUT CLASS?
         BNE   KWDOUT                  NO - NOT ONE WE'RE INTERESTED IN
         ST    R7,WSYSOUTA             SAVE KEYWORD START ADDRESS
         B     KWDOUT                  GO ISSUE MESSAGE
KWDOUT   EQU   *
***********************************************************************
         BCTR  R15,0                   REDUCE BY ONE
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG7       MOVE IN MESSAGE CONTENT
         EX    R15,DATAMVC             MOVE THE DATA
         WTO   MF=(E,WTOWK)            ISSUE THE WTO
***********************************************************************
         TM    PARSEFLG,LAST           ARE WE DONE?
         BO    LISTSYSO                YES - LIST OUTPUT CLASSES
         LR    R7,R9                   POINT TO NEXT KEYWORD
         B     NEXTKWD                 GO CHECK IT OUT
***********************************************************************
LISTSYSO EQU   *
         CLC   ESYSOUTA(4),=F'0'       EXTERNAL WRITER CLASS DATA?
         BNE   CLASDATA                YES - WE HAVE CLASS DATA
         CLC   TSYSOUTA(4),=F'0'       TSO HELD CLASS DATA?
         BNE   CLASDATA                YES - WE HAVE CLASS DATA
         CLC   WSYSOUTA(4),=F'0'       NON HELD CLASS DATA?
         BNE   CLASDATA                YES - WE HAVE CLASS DATA
         B     RETURN                  NO CLASS DATA
CLASDATA EQU   *
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG3       MOVE IN MESSAGE CONTENT
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
***********************************************************************
         LA    R5,CLASSLST             GET CLASS LIST ADDRESS
CLASSLP  EQU *
         CLI   0(R5),X'FF'             END OF LIST?
         BE    RETURN                  YES - WE'RE DONE
***********************************************************************
         L     R9,ESYSOUTA             GET EXTERNAL WRITER AREA ADDRESS
         LTR   R9,R9                   ANY DATA?
         BZ    NXTTYPE2                NO - CHECK NEXT TYPE
         LA    R9,18(,R9)              POINT TO CLASS DATA
TYPELP1  EQU   *
         CLI   0(R9),C''''             END QUOTE?
         BE    NXTTYPE2                YES - CHECK NEXT TYPE
         CLC   0(1,R9),0(R5)           A CLASS MATCH?
         BE    CLASMCH1                YES - SET MATCH TYPE 1 VALUES
         CLI   1(R9),C''''             END QUOTE?
         BE    NXTTYPE2                YES - CHECK NEXT TYPE
         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE
         B     TYPELP1                 GO CHECK IT OUT
CLASMCH1 EQU   *
         MVC   CLASSID(20),=CL20'JES3  EXTERNAL WRITER'
         B     CLASSOUT                GO ISSUE THE MESSAGE
***********************************************************************
NXTTYPE2 EQU   *
         L     R9,TSYSOUTA             GET TSO AREA ADDRESS
         LTR   R9,R9                   ANY DATA?
         BZ    NXTTYPE3                NO - CHECK NEXT TYPE
         LA    R9,18(,R9)              POINT TO CLASS DATA
TYPELP2  EQU   *
         CLI   0(R9),C''''             END QUOTE?
         BE    NXTTYPE3                YES - CHECK NEXT TYPE
         CLC   0(1,R9),0(R5)           A CLASS MATCH?
         BE    CLASMCH2                YES - SET MATCH TYPE 2 VALUES
         CLI   1(R9),C''''             END QUOTE?
         BE    NXTTYPE3                YES - CHECK NEXT TYPE
         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE
         B     TYPELP2                 GO CHECK IT OUT
CLASMCH2 EQU   *
         MVC   CLASSID(20),=CL20'TSO HELD'
         B     CLASSOUT                GO ISSUE THE MESSAGE
***********************************************************************
NXTTYPE3 EQU   *
         L     R9,WSYSOUTA             GET NON HELD AREA ADDRESS
         LTR   R9,R9                   ANY DATA?
         BZ    PRGCLASS                NO - MUST BE A PURGE CLASS
         LA    R9,18(,R9)              POINT TO CLASS DATA
TYPELP3  EQU   *
         CLI   0(R9),C''''             END QUOTE?
         BE    PRGCLASS                YES - MUST BE A PURGE CLASS
         CLC   0(1,R9),0(R5)           A CLASS MATCH?
         BE    CLASMCH3                YES - SET MATCH TYPE 3 VALUES
         CLI   1(R9),C''''             END QUOTE?
         BE    PRGCLASS                YES - MUST BE A PURGE CLASS
         LA    R9,2(,R9)               POINT TO NEXT CLASS VALUE
         B     TYPELP3                 GO CHECK IT OUT
CLASMCH3 EQU   *
         MVC   CLASSID(20),=CL20'NON HELD'
         B     CLASSOUT                GO ISSUE THE MESSAGE
***********************************************************************
PRGCLASS EQU   *
         MVC   CLASSID(20),=CL20'PURGE'
         B     CLASSOUT                GO ISSUE THE MESSAGE
***********************************************************************
CLASSOUT EQU   *
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG4       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+16(1),0(R5)     MOVE IN THE CLASS
         MVC   WTOWK+4+19(20),CLASSID  MOVE IN THE CLASS INFORMATION
NOEXTIND EQU   *
         WTO   MF=(E,WTOWK)            ISSUE THE WTO
NXTCLASS EQU   *
         LA    R5,1(,R5)               POINT TO NEXT CLASS
         B     CLASSLP                 GO CHECK IT OUT
***********************************************************************
RETURN   EQU   *
         ICM   R1,B'1111',SSOBADDR     GET SSOB ADDRESS
         BZ    NOSSOB                  IF NO SSOB DON'T RELEASE
         L     R0,SSOBLN               GET STORAGE LENGTH
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1)
NOSSOB   EQU   *
         L     R3,SAVEAREA+4           SAVE OLD SAVEAREA ADDRESS
         LR    R1,R13                  GET WORKING STORAGE ADDRESS
         STORAGE RELEASE,LENGTH=WORKLEN,ADDR=(R1)
         LR    R13,R3                  COPY OLD SAVEAREA ADDRESS
         LM    R14,R12,12(R13)         RESTORE THE REGISTERS
         XR    R15,R15                 CLEAR R15
         BR    R14
***********************************************************************
SSVIERR  EQU *
         WTO   'SSINFO - UNABLE TO OBTAIN SUBSYSTEM INFORMATION.',     X
               ROUTCDE=(1),DESC=(6)
         B     RETURN                  GO HOME
***********************************************************************
SYSINFOE EQU   *
         WTO   'SSINFO - INVALID END OF SUBSYSTEM INFORMATION DATA DETEX
               CTED',                                                  X
               ROUTCDE=(1),DESC=(6)
         B     RETURN                  GO HOME
***********************************************************************
NOSSCVT  EQU   *
         MVC   WTOWK(WTO1LN),WTO1LS    MOVE IN THE MESSAGE MODEL
         MVC   WTOWK+4(120),MSG5       MOVE IN MESSAGE CONTENT
         MVC   WTOWK+4+40(4),SSNMSAVE  MOVE IN SUBSYSTEM NAME
         WTO   MF=(E,WTOWK)            ISSUE THE MESSAGE
         B     RETURN                  GO HOME
***********************************************************************
DATAMVC  MVC   WTOWK+4+2(*-*),0(R7)    MOVE SUBSYSTEM INFO DATA
***********************************************************************
CLASSLST DC    C'ABCDEFGHIJKLMNOPQRSTUWVXYZ0123456789',X'FF'
***********************************************************************
WTO1LS   WTO   '         1         2         3         4         5     X
                   6         7         8         9         0         1 X
                       2',ROUTCDE=(1),DESC=(6),MF=L
WTO1LN   EQU   *-WTO1LS
MSG1     DC    CL120'SSINFO - Active subsystem name is XXXXXXXX'
MSG2     DC    CL120'SSINFO - Common subsystem is XXXX     '
MSG3     DC    CL120'SSINFO - OUTPUT CLASS information'
MSG4     DC    CL120'         CLASS: X                      '
MSG5     DC    CL120'SSINFO - SSCVT not located for subsystem XXXX    '
MSG6     DC    CL120'SSINFO - Additional XXXX subsystem information:'
MSG7     DC    CL120' '
MSG8     DC    CL120'SSINFO - Version is             FMID is          '  SSC
MSG9     DC    CL120'SSINFO - Product Level       Service Level       '  SSC
         LTORG ,
WORKAREA DSECT
SAVEAREA DS    18F
SSOBPTR  DS    F
CLASS    DS    CL1
PARSEFLG DS    XL1
COMMA    EQU   X'80'
QUOTE    EQU   X'40'
BLANK    EQU   X'20'
EQUAL    EQU   X'10'
LAST     EQU   X'08'
DBL1     DS    2D
DBL2     DS    2D
PD1      DS    D                      Packed decimal 1  SSC change
ESYSOUTA DS    F
TSYSOUTA DS    F
WSYSOUTA DS    F
CLASSID  DS    CL20
CNAMSAVE DS    CL8
SSNMSAVE DS    CL8
SSNMLEN  DS    F
SSOBADDR DS    F
SSOBLN   DS    F
VISIZE   DS    F
WTOWK    DS    0D,CL(WTO1LN)
WORKLEN  EQU   *-WORKAREA
         CVT      DSECT=YES
         IEFJESCT
         IEFJSCVT
         IEESMCA
         IKJTCB
         IEZJSCB
         IEFJSSIB
         IEFSSOBH
         IEFSSVI  DSECT=YES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU  10
R11      EQU  11
R12      EQU  12
R13      EQU  13
R14      EQU  14
R15      EQU  15
         END
//*
//L       EXEC PGM=HEWL,COND=(5,LT,C),
//             PARM='LIST,LET,XREF,MAP'
//SYSLIN   DD  DSN=&OBJ,
//             DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(1024,(120,120),,,ROUND)
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB(SSINFO)
//SYSLIN    DD *
  INCLUDE OBJECT(SSINFO)
  ENTRY   SSINFO
  NAME    SSINFO(R)
//*
//SSINFO  EXEC  PGM=SSINFO
//STEPLIB  DD   DISP=SHR,DSN=SYS1.W$$.LINKLIB
//*
