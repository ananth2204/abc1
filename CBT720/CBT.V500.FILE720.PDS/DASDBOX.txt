/* REXX  EXEC TO PROCESS DASD AND CREATE A LIST IN BOXES       */
/* TRACE RESULTS */
/* Arguments are VOLUME to sort by volume, or STORAGE to sort  */
/* by Storage Group and volume, or default sorted by unit addr */
  parse upper arg sort_criteria
  NUMERIC DIGITS 16
  stat = msg('off')
 "FREE F(OUT)"

 OFFL_COUNT = 0
 MOD3_COUNT = 0
 MOD9_COUNT = 0
 HYP1_COUNT = 0
 HYP2_COUNT = 0
 MISC_COUNT = 0
 MISC_TOTAL = 0

  HDRRECD.1 = '1      DASD  System-'MVSVAR(SYSNAME),
               '('subword(MVSVAR('SYSOPSYS'),1,2)')  ' date('u') ' ' time()
  HDRRECD.2 = ' '
  select
   when sort_criteria = 'VOLUME' then
    HDRRECD.2 = '                              Sorted by Volume'
   when sort_criteria = 'STORAGE' then
    HDRRECD.2 = '                     Sorted by Storage Group and Volume'
   otherwise nop
  end

  /* This requires the Assembler REXX function  ALXRDASD  */
  SCAN_OK = ALXRDASD('DASDREC')
 IF SCAN_OK ¬= 'OK' THEN
  DO
   SAY SCAN_OK
   EXIT 12
  END
  if sort_criteria = 'VOLUME' then
   call sort_dasdrec

  /* Make sure that IDCAMS is authorized to be called in IKJTSOxx */
  /* by defining it in the AUTHPGM section                        */
  call process_dcollect

 count = 0              /* outrecd. counter           */
 page_count = 0         /* page  counter              */

/* Table consists of eight columns of DASD volumes in eight rows, */
/* at 64 addresses per page. A channel in the channel field, 2nd  */
/* byte of UCB, will also drive creation of a new page            */
 call build_table          /* Build the first box table  */

 do dd = 1 to dasdrec.0
  IF WORD(DASDREC.DD,1) = 'ON' THEN
   CALL PROCESS_VOLUME
 end

  if sort_criteria = 'STORAGE' then
   call sort_dcollect

 /* Loop through DASD volumes and fill the boxes   */
 DO I = 1 TO DASDREC.0
  if i = 1 then
   current_channel = SUBSTR(word(dasdrec.1,2),2,1)

/*IF WORD(DASDREC.I,1) = 'ON' THEN
   CALL PROCESS_VOLUME */

  PARSE VAR DASDREC.I STATUS UCB VSN SIZE IX STOREGRP FREE RMNDR
  FREE = FREE'% fr'
  CHANNEL = SUBSTR(UCB,2,1)
  CALL PROCESS_COUNT

  if channel ¬= current_channel & sort_criteria ¬= 'VOLUME' &,
     channel ¬= current_channel & sort_criteria ¬= 'STORAGE' then
   do
    current_channel = channel
    call write_table             /* Write table and build another  */
   end

  call build_box               /* Go and write info for this disk */

 END

 if row > 2 & row < 44 then
  call write_table
/*  trace results */
 call process_total

 "ALLOC F(OUT) SYSOUT(X) RECFM(F A) LRECL(121)"

  total_begin = 52
/*say page_count   count */
  do xx = 1 to page_count
   outrecd.total_begin = totrecord.1
   next = total_begin + 1
   outrecd.next = totrecord.2
   total_begin = total_begin + 53
  end
  "EXECIO" COUNT "DISKW OUT (STEM outrecd. FINIS)"
  "FREE F(OUT)"

EXIT

/*******************************************************/
PROCESS_DCOLLECT:
/* trace r */
 "free f(sysin,sysprint)"
/* "ALLOC F(SYSPRINT) SYSOUT(X)" */
 "ALLOC F(SYSPRINT) DSN('NULLFILE') SHR REUSE"
/*  "ALLOC F(SYSPRINT) DA(SYSPRINT) SHR REUSE" */
 "ALLOC F(SYSIN) NEW LRECL(80) REUSE"
 QUEUE ' DCOLLECT VOLUMES(*) OUTFILE(OUTDS) NODATAINFO'
 QUEUE ''
 "EXECIO * DISKW SYSIN (FINIS"

 "ALLOC F(OUTDS) NEW LRECL(264) RECFM(V B) REUSE"
 "CALL *(IDCAMS)"
 "EXECIO * DISKR OUTDS (STEM DC. FINIS"
 "FREE F(OUTDS)"
RETURN

/*******************************************************/
PROCESS_VOLUME:
 VOLUME = WORD(DASDREC.DD,3)
 DO X = 1 TO DC.0
  IF SUBSTR(DC.X,25,6) = VOLUME THEN
   DO
    STORE_GRP = SUBSTR(DC.X,83,8)
    IF STORE_GRP = '        ' THEN
     STORE_GRP = 'NON_SMS  '
    PCT_FREE  = C2D(SUBSTR(DC.X,36,1))
    DASDREC.DD = DASDREC.DD LEFT(STORE_GRP,8) PCT_FREE
    return
   END
 END
RETURN

/*******************************************************/
PROCESS_COUNT:
 SELECT
   WHEN STATUS = 'OFF'  THEN
    DO
     OFFL_COUNT = OFFL_COUNT + 1
     TYPE = 'OFFLINE'
     VSN = ' '
    END
   WHEN SIZE = '3340' | SIZE = '3339'  THEN
    DO
     MOD3_COUNT = MOD3_COUNT + 1
     TYPE = 'MODEL3'
    END
   WHEN SIZE = '10020'  THEN
    DO
     MOD9_COUNT = MOD9_COUNT + 1
     TYPE = 'MODEL9'
    END
   WHEN SIZE = '501' THEN
    DO
     HYP1_COUNT = HYP1_COUNT + 1
     TYPE = 'HYPER1'
    END
   WHEN SIZE = '521' THEN
    DO
     HYP2_COUNT = HYP2_COUNT + 1
     TYPE = 'HYPER2'
    END
   OTHERWISE
    DO
     MISC_COUNT = MISC_COUNT + 1
     MISC_TOTAL = MISC_TOTAL + SIZE
     TYPE = SIZE
    END
  END
 RETURN

/*******************************************************/
write_table:

 count = count + 1
 outrecd.count = hdrrecd.1 '  Page -' page_count
 count = count + 1
 outrecd.count = hdrrecd.2

 do wr = 1 to tsfx
  count = count + 1
  outrecd.count = table.wr
 end

 count = count + 1
 outrecd.count = ' '   /* this will be Total Record  1  */
 count = count + 1
 outrecd.count = ' '   /* this will be Total Record  2  */

 call build_table
return

/*******************************************************/
build_table:

 page_count = page_count + 1

L1=' ________ ________ ________ ________ ________ ________ ________ ________ '
L2='|        |        |        |        |        |        |        |        |'
L3='|________|________|________|________|________|________|________|________|'

 col = 6         /* Set the starting location column pointer */
 row = 2         /* Set the starting location row pointer    */

 tsfx = 1

 TABLE.tsfx = ' ' L1
 DO T = 1 TO 8
  DO TT = 1 TO 5
   tsfx = tsfx + 1
   TABLE.tsfx = ' ' L2
  END
  tsfx = tsfx + 1
  TABLE.tsfx = ' ' L3
 END

return

/*******************************************************/
build_box:

 START_COL1 = col
 START_COL2 = col - 1
 START_COL3 = col - 2      /*GET THE STORAGE GRP NAME IN 1ST COL*/
 START_COL4 = col - 1
 START_COL5 = col - 1
 START_ROW  = ROW
 START_ROW2 = START_ROW + 1
 START_ROW3 = START_ROW + 2
 START_ROW4 = START_ROW + 3
 START_ROW5 = START_ROW + 4

 TABLE.START_ROW = OVERLAY(UCB,TABLE.START_ROW,START_COL1)
 TABLE.START_ROW2 = OVERLAY(VSN,TABLE.START_ROW2,START_COL2)
 TABLE.START_ROW3 = OVERLAY(STOREGRP,TABLE.START_ROW3,START_COL3)
 TABLE.START_ROW4 = OVERLAY(TYPE,TABLE.START_ROW4,START_COL4)
 IF STATUS = 'ON' THEN
  TABLE.START_ROW5 = OVERLAY(FREE,TABLE.START_ROW5,START_COL5)

 col = col + 9         /* Increment to next box column  */
 if col > 69 then      /* If GT 69 then start new row   */
  do
   col = 6             /* Reset to first box            */
   row = row + 6       /* Increment to next row         */
   if row > 44 then    /* If row is GT then new page    */
    call write_table   /* Go and build                  */
  end
 return

/*******************************************************/
process_total:
  TOTAL_SIZE = (MOD3_COUNT * 2.838) + (MOD9_COUNT * 8.514),
               + (HYP1_COUNT * .424) + (HYP2_COUNT * .441),
               + (MISC_TOTAL * .0008)
  TOTRECORD.1 = '0  TOTAL OF' FORMAT(TOTAL_SIZE,,2)'GB  ',
                MOD3_COUNT' 3390-3(2.838GB) AND',
                MOD9_COUNT' 3390-9(8.514GB) AND'
  TOTRECORD.2 = '                        ',
                HYP2_COUNT' HYPER2(.441GB)  AND',
                HYP1_COUNT' HYPER1(.424GB)'

return

/*******************************************************/
SORT_DASDREC:
 call convert_hex
 DO S = 1 TO dasdrec.0
  Y = S + 1
  DO Z = Y TO dasdrec.0
   select

    when WORD(dasdrec.S,1) = 'OFF' & WORD(dasdrec.Z,1) = 'ON' then
     DO
      HOLD = dasdrec.S
      dasdrec.S = dasdrec.Z
      dasdrec.Z = HOLD
     END

    when WORD(dasdrec.S,1) = 'ON' & WORD(dasdrec.Z,1) = 'ON' then
     DO
      if WORD(dasdrec.S,3) > WORD(dasdrec.Z,3) then
       do
        HOLD = dasdrec.S
        dasdrec.S = dasdrec.Z
        dasdrec.Z = HOLD
       END
     END


    when WORD(dasdrec.S,1) = 'OFF' & WORD(dasdrec.z,1) = 'OFF' then
     DO
      if WORD(dasdrec.S,2) > WORD(dasdrec.Z,2) then
       do
        HOLD = dasdrec.S
        dasdrec.S = dasdrec.Z
        dasdrec.Z = HOLD
       END
     END

    otherwise nop
   END
  END
 END
 call convert_back
RETURN


/*******************************************************/
SORT_DCOLLECT:
 call convert_hex
 DO S = 1 TO dasdrec.0
  Y = S + 1
  DO Z = Y TO dasdrec.0
   select

    when WORD(dasdrec.S,1) = 'OFF' & WORD(dasdrec.Z,1) = 'ON' then
     DO
      HOLD = dasdrec.S
      dasdrec.S = dasdrec.Z
      dasdrec.Z = HOLD
     END

    when WORD(dasdrec.S,1) = 'ON' & WORD(dasdrec.Z,1) = 'ON' then
     DO
      select
       when WORD(dasdrec.S,6) > WORD(dasdrec.Z,6) then
        do
         HOLD = dasdrec.S
         dasdrec.S = dasdrec.Z
         dasdrec.Z = HOLD
        END
       when WORD(dasdrec.S,6) = WORD(dasdrec.Z,6) then
        do
         if WORD(dasdrec.S,3) > WORD(dasdrec.Z,3) then
          do
           HOLD = dasdrec.S
           dasdrec.S = dasdrec.Z
           dasdrec.Z = HOLD
          END
        END
       otherwise nop
      end
     END


    when WORD(dasdrec.S,1) = 'OFF' & WORD(dasdrec.z,1) = 'OFF' then
     DO
      if WORD(dasdrec.S,2) > WORD(dasdrec.Z,2) then
       do
        HOLD = dasdrec.S
        dasdrec.S = dasdrec.Z
        dasdrec.Z = HOLD
       END
     END

    otherwise nop
   END
  END
 END
 call convert_back
RETURN

/*******************************************************/
convert_hex:

 do xx = 1 to dasdrec.0
  dasdrec.xx = word(dasdrec.xx,1) x2d(word(dasdrec.xx,2)) subword(dasdrec.xx,3)
 end
return

/*******************************************************/
convert_back:

 do xx = 1 to dasdrec.0
  dasdrec.xx = word(dasdrec.xx,1) right(d2x(word(dasdrec.xx,2)),4,0),
  subword(dasdrec.xx,3)
 end
return
