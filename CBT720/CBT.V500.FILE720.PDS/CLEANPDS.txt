    TITLE 'CLEANPDS - Program to cleanup duplicate PDS Members'
*********************************************************************
* AUTHOR - BILL SWEENEY                                             *
*     SSC, INC.                                                     *
*     WHSWEENEY@SSCMAINFRAME.COM                                    *
*     WWW.SSCMAINFRAME.COM                                          *
* DATE - (C) COPYRIGHT 2004                                         *
*                                                                   *
* DISCLAIMER - IT IS THE RESPONSIBILITY OF THE INIDIVIDUAL          *
*         TO VALIDATE THAT THIS SOFTWARE WILL NOT HARM YOUR         *
*         SYSTEM. INSTALL THIS SOFTWARE AT YOUR OWN RISK.           *
*         SSC, INC. IS NOT RESPONSIBLE FOR ANY PROBLEMS             *
*         CAUSED WHILE USING THIS SOFTWARE. GOOD LUCK.              *
*                                                                   *
* LINKAGE INFORMATION - AMODE 24                                    *
*                  RMODE 24                                         *
*                  NON-REENTRANT                                    *
*                  NOT APF AUTHORIZED                               *
*                                                                   *
*  Description - Program will compare the members of two PDS data   *
*                sets, and if PARM=DELETE is specified, it will     *
*                delete the duplicate members in the PDSDELET DD    *
*                statement. Without the PARM field it will report   *
*                on the duplicate members without deleting.         *
*                I originally wrote this because  vendor PDS files  *
*                were being merged into a single large PDS, which   *
*                was then placed in the LINKLIST. It caused problems*
*                when you upgraded to a new release and wanted to   *
*                get rid of the prior release.                      *
*                                                                   *
*********************************************************************
*  DATE   - MARCH 1995                                             *
*                                                                  *
*  //SSCWHSPD JOB (SY0044,T,BATCH),'PROGRAMMER  ',CLASS=A,         *
*  //  MSGCLASS=T,NOTIFY=&SYSUID                                   *
*  //* Run without PARM=DELETE to see report and not delete members*
*  //STEP1    EXEC PGM=CLEANPDS,REGION=0M,PARM=DELETE              *
*  //STEPLIB  DD  DSN=your.loadlib,DISP=SHR                        *
*  //OUTFILE  DD  SYSOUT=*                                         *
*  //PDSINFIL DD  DISP=SHR,DSN=good.linklist.library               *
*  //PDSDELET DD  DISP=SHR,DSN=old.linklist.library                *
*                                                                  *
*                                                                  *
********************************************************************
CLEANPDS CSECT
         PRINT ON,GEN
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RC4      EQU   4
RC8      EQU   8
RC16     EQU   16
               EJECT
****************************************************************
*  SAVE LOGIC TO CONSERVE ON REGISTERS. R13 IS USED AS BOTH    *
*  THE BASE REGISTER AND THE POINTER TO THE 18 WORD SAVE AREA. *
****************************************************************
         B     72(R15)             BRANCH AROUND THE SAVE AREA
         DS    17F                 THIS AND THE PRIOR BR ARE 18F SAVE
         STM   R14,R12,12(R13)     SAVE IN CALLERS SAVEAREA
         ST    R13,4(R15)          SAVE IN OUR SAVE AREA
         ST    R15,8(R13)          STORE OUR SAVE AREA ADDR IN THEIRS
         LR    R13,R15             SET UP AS SAVE AND BASE REG
         USING CLEANPDS,R13
         L     R2,0(R1)               GET PARM ADDR
         LH    R3,0(R2)               GET LENGTH
         LTR   R3,R3                  ANY PARM SUPPLIED
         BZ    NOPARM
         CLC   2(6,R2),=C'DELETE'     IS THIS A DELETE RUN
         BNE   NOPARM
         OI    FLAG,X'01'             FLAG TO SAY DELETE RUN
**************************************
*  LETS GO AHEAD AND ACQUIRE STORAGE *
**************************************
NOPARM   LH   R0,HW256
         L    R5,MEMBER_LENGTH
         AR   R0,R5
         ST   R0,GETMAIN_LENGTH  SAVE THIS LENGTH FOR LATER
         GETMAIN R,LV=(0)
GET_STORAGE ST  R1,GETMAIN_ADDRESS SAVE THE STORAGE ADDRESS
         LR   R7,R1
         LA   R11,256(R7)
         ST   R11,MEMBER_ADDRESS
*******************************************************************
OPENDIR  EQU   *
         OPEN  (DIRREAD)           OPEN PDS TO READ DIRECTORY
         TM    DIRREAD+48,X'10'    OPEN SUCCESSFUL
         BO    OPENOK              NO, THEN QUIT
         WTO   'UNABLE TO OPEN DIRECTORY FOR INPUT MEMBERS'
         MVI   RETCODE+3,RC16
         B     FREE_STORAGE
OPENOK   EQU   *
         SLR   R3,R3
LOCSET   READ  DIRDECB,SF,DIRREAD,(7)
         CHECK DIRDECB
RDNXTDIR EQU   *
LIST0    LR    R10,R7              R10 POINTS TO FIELD READ
         LH    R9,0(R10)           R9 CONTAINS LENGTH OF RECORD
         AR    R9,R10              POINT TO END OF LIST
         LA    R10,2(R10)          ADDRESS MEMBER
LIST1    CLC   0(8,R10),FFFLAG     IS THIS THE LAST DIRECTORY ENTRY
         BE    DIRENDL             YES, THEN CLOSE IT AND GET TO WORK
LIST2    MVC   0(8,R11),0(R10)    MOVE IN MMBR NAME,TTR, AND ALIAS BIT
         LA    R3,1(R3)            INCR. COUNTER FOR MEMBERS
INCRMBRA LA    R11,8(R11)         INCR. INPUT MEMBER LIST
GETPAST  IC    R14,11(R10)          GET # OF USER HALFWORDS
         N     R14,FW31             ZERO OUT HI ORDER BITS
         SLA   R14,1                MULTIPLY BY TWO
         LA    R14,12(R14)          ADD THE CONSTANT SECTION TO IT
         AR    R10,R14             AND THEN INCREMENT R10
         CR    R10,R9              ARE WE AT THE END OF THIS READ
         BL    LIST1               NO, THEN PROCESS THE NEXT
         B     LOCSET              READ NEXT RECORD
         EJECT
******************************************************
* THIS NEXT SECTION IS ENTERED IF EODAD IS HIT OR AN *
* I/O ERROR OCCURS                                   *
******************************************************
NOTDIR   EQU   *
         CLOSE DIRREAD             CLOSE DIRECTORY
         WTO   'DIRECTORY SHOULD NOT HAVE REACHED EODAD'
         MVI   RETCODE+3,RC8
         B     FREE_STORAGE
*******************************************************************
* WE HAVE FINISHED A GOOD READING OF THE DIRECTORY AND WILL CLOSE *
* IT, VERIFY IT HAS MEMBERS AND THEN PROCESS THE PDS              *
*******************************************************************
DIRENDL  MVC   0(8,R11),FFFLAG    FLAG END OF MEMBER LIST
         CLOSE DIRREAD             CLOSE DIRECTORY
         L     R11,MEMBER_ADDRESS  RELOAD R11 POINTER
         LTR   R3,R3              VERIFY THAT AT LEAST 1 MEMBER EXIST
         BNZ   OPENFILE           YES, THEN GO AND PROCESS
         WTO   'NO MEMBERS IN PDS; FORGET IT'
         MVI   RETCODE+3,RC8
         B     FREE_STORAGE
***********************************************
*   OPEN THE PDS AND PROCESS THE MEMBER LIST  *
***********************************************
OPENFILE OPEN  (PDSDELET,(OUTPUT),OUTFILE,(OUTPUT))
         TM    PDSDELET+48,X'10'  GOOD OPEN ??
         BO    OPENOK2            YES, THEN CONTINUE EUROK
         WTO   'UNABLE TO OPEN PDSDELET FILE FOR PROCESSING'
         MVI   RETCODE+3,RC16
         B     FREE_STORAGE
OPENOK2  EQU   *
         TM    OUTFILE+48,X'10'  GOOD OPEN ??
         BO    LOOPFIND           YES, THEN CONTINUE EUROK
         WTO   'UNABLE TO OPEN OUTFILE FILE FOR OUTPUT'
         MVI   RETCODE+3,RC16
         CLOSE PDSDELET
         B     FREE_STORAGE
LOOPFIND EQU   *
         MVC   MEMBER(8),0(R11)
         MVC   MEMBER_DELETED(8),0(R11)
         FIND  PDSDELET,MEMBER,D
         LTR   R15,R15
         BNZ   INCR_MEMBER
GOODFIND EQU   *
         TM    FLAG,X'01'
         BZ    NO_DELETE
*              *
         STOW  PDSDELET,MEMBER,D
         LTR   R15,R15
         BZ    GOOD_DELETE
         MVC   MEMBER_STATUS(46),DELETE_FAILED
         B     NO_DELETE
GOOD_DELETE  MVC   MEMBER_STATUS(46),DELETE_GOOD
NO_DELETE EQU  *
         PUT   OUTFILE,OUTRECD
INCR_MEMBER    LA  R11,8(R11)
         BCT   R3,LOOPFIND
         CLOSE (PDSDELET,,OUTFILE)
********************************************************************
*   CLEANUP   TO GO HOME                                           *
********************************************************************
FREE_STORAGE   EQU  *
         L     R1,GETMAIN_ADDRESS
         L     R0,GETMAIN_LENGTH
         FREEMAIN R,LV=(0),A=(1)
EXIT     L     R15,RETCODE
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
DIRREAD  DCB   MACRF=R,DSORG=PS,DDNAME=PDSINFIL,EODAD=NOTDIR,          X
               BLKSIZE=256,LRECL=256,RECFM=F
PDSDELET DCB   DDNAME=PDSDELET,MACRF=(R,W),DSORG=PO
OUTFILE  DCB   DDNAME=OUTFILE,MACRF=PM,DSORG=PS,LRECL=80
DOUBLE_WORD  DC    D'0'
GETMAIN_ADDRESS DC F'0'
GETMAIN_LENGTH  DC F'0'
MEMBER_ADDRESS DC F'0'
MEMBER_LENGTH  DC F'400000'
RETCODE  DC    F'0'
FW31     DC    F'31'
MEMBER   DC    CL8' ',2F'0'
HW1      DC    H'1'
HW256    DC    H'256'
HW32760  DC    H'32760'
FFFLAG   DC    8X'FF'
FLAG     DC    X'00'
OUTRECD  DS    0CL80
         DC    CL9'  MEMBER '
MEMBER_DELETED DC    CL9' '
MEMBER_STATUS  DC    CL62'FOUND, BUT NOT DELETED BECAUSE OF PARM VALUE'
DELETE_GOOD    DC    CL46'SUCCESSFULLY DELETED FROM PDSDELET FILE'
DELETE_FAILED  DC    CL46'NOT DELETED BECAUSE OF STOW ERROR'
         END
