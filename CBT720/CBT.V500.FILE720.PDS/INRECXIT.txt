INRECXIT TITLE 'Network Print Facility Input Record Exit'
*********************************************************************
* AUTHOR - BILL SWEENEY                                             *
*     SSC, INC.                                                     *
*     WHSWEENEY@SSCMAINFRAME.COM                                    *
*     WWW.SSCMAINFRAME.COM                                          *
* DATE - (C) COPYRIGHT 2004                                         *
*                                                                   *
* DISCLAIMER - IT IS THE RESPONSIBILITY OF THE INIDIVIDUAL          *
*         TO VALIDATE THAT THIS SOFTWARE WILL NOT HARM YOUR         *
*         SYSTEM. INSTALL THIS SOFTWARE AT YOUR OWN RISK.           *
*         SSC, INC. IS NOT RESPONSIBLE FOR ANY PROBLEMS             *
*         CAUSED WHILE USING THIS SOFTWARE. GOOD LUCK.              *
*                                                                   *
* LINKAGE INFORMATION - AMODE 31                                    *
*                  RMODE ANY                                        *
*            --->  *** REENTRANT *** <--- Must be Reentrant         *
*                  NOT APF AUTHORIZED                               *
*                                                                   *
* DESCRIPTION - Network Print Facility (NPF) Input record exit      *
*               to place PCL in printers for IP Printing            *
*                                                                   *
*  Assembly - Include the TCP/IP SEZACMAC in the SYSLIB             *
*                                                                   *
*                                                                   *
*-------------------------------------------------------------------*
*                                                                   *
*   This exit will imbed the necessary PCL in the output to print   *
*   it nicer than what it has been printing.                        *
*                                                                   *
*-------------------------------------------------------------------*
INRECXIT CSECT
INRECXIT AMODE ANY
INRECXIT RMODE ANY
*              Registers           entry       INRECXIT    exit
R0       EQU   0                   n/a         work        =entry
R1       EQU   1                   >>IRELIST   work        =entry
R2       EQU   2                   n/a         work        =entry
R3       EQU   3                   n/a         work        =entry
R4       EQU   4                   n/a         work        =entry
R5       EQU   5                   n/a         work        =entry
R6       EQU   6                   n/a         work        =entry
R7       EQU   7                   n/a         work        =entry
R8       EQU   8                   n/a         >IRXSTATD   =entry
R9       EQU   9                   n/a         >RTDATA     =entry
R10      EQU   10                  n/a         >IRELIST    =entry
R11      EQU   11                  n/a         base 2      =entry
R12      EQU   12                  n/a         base 1      =entry
R13      EQU   13                  >callsave   >INRCSTG    =entry
R14      EQU   14                  >return     work        =entry
R15      EQU   15                  >INRECXIT   retcode     retcode
         SPACE 5
         USING INRECXIT,R15       Establish temporary base register
         B     INRC0000           Branch around constants
         DC    CL9'INRECXIT'      Module identifier
         DC    CL9'&SYSDATE'      Assembly date
         DC    CL6'&SYSTIME'      Assembly time
         SPACE 5
INRC0000 DS    0H
         STM   R14,R12,12(R13)    Save caller's registers
         LR    R12,R15            Change base registers
         DROP  R15                Tell assembler
         USING INRECXIT,R12
         L     R10,0(R1)          Get address of exit parameter list
         USING IRELIST,R10        Make exit parameter list addressable
         L     R9,IRERTD          Get address of routing data area
         USING RTDATA,R9          Make routing data area addressable
         L     R8,IRESTRG         Get address of IRE static memory
         USING IRXSTATD,R8        Make IRE static storage addressable
         ICM   R1,15,IRXDSTGA     Get address of IRE dynamic storage
         BNZ   INRC0020           Storage has already been allocated
         LA    R2,INRCSTGL        Get length of program storage
         GETMAIN RC,LV=(R2),LOC=ANY Get program storage
         LTR   R15,R15            Did GETMAIN work?
         BZ    INRC0010           Yes
         WTO   'INRECXIT GETMAIN FAILED'
         LA    R15,8              No,  show error
         B     RET00010           Return to NPF
INRC0010 DS    0H
         ST    R1,IRXDSTGA        Save dynamic storage address
INRC0020 DS    0H
         ST    R1,8(0,R13)        Complete save area pointers
         ST    R13,4(0,R1)
         LR    R13,R1             Point to dynamic storage area
         USING INRCSTG,R13        Tell assembler
         SPACE 5
         CLC   RTFUNCTN(4),=CL8'OPEN' Is this OPEN call?
         BE    OPN00000           Yes
         CLC   RTFUNCTN(3),=CL8'PUT'  Is this PUT call?
         BE    PUT00000           Yes
         CLC   RTFUNCTN(5),=CL8'CLOSE' Is this CLOSE call?
         BE    CLS00000           Yes
         CLC   RTFUNCTN(7),=CL8'RELEASE' Is this RELEASE call?
         BE    REL00000           Yes
         CLC   RTFUNCTN(4),=CL8'TERM' Is this TERM call?
         BE    TRM00000           Yes
         WTO   'INRECXIT UNKNOWN FUNCTION'
         LA    R15,4              Bad function, show error
         B     RET00000           Return to NPF
         SPACE 5
*---------------------------------------------------------------------*
*        Process OPEN call
*---------------------------------------------------------------------*
OPN00000 DS    0H
         MVI   IRXFLAG,IRXNEW     Set flag for new file
         XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
*        Process PUT call
*---------------------------------------------------------------------*
PUT00000 DS    0H
         TM    IRXFLAG,IRXOLD     First PUT to this file?
         BO    PUT00020           No, pass it through
         CLI   IRXFLAG,IRXNEW     First PUT to this file?
         BNE   PUT00015           No, pass it through
         OI    IRXFLAG,IRX2ND     Only look at first PUT
         L     R2,IREBPTR
         L     R3,IREDLEN
         CH    R3,HW1024
         BH    PUT00020           If greater than get out
         LA    R14,SAVEREC
         LR    R15,R3
         MVCL  R14,R2
         MVC   IRXRECL(4),IREDLEN Save this for later
* OPTION1 is portrait, OPTION2 is Landscape,
* OPTION3 is CICS 11 x 32 alternate printer
* We're going to do check if VTAM and CICS1 and use Landscape
         CLI   IRECID,C'V'        Is this VTAM application?
         BNE   CHECK_PORTRAIT     No, then continue with options
         L     R3,IRECPAD         Load the bind image
* Compare first seven characters of APPLID
         CLC   27(7,R3),=C'PRODCIC'  Is it PRODCICS
         BE    SET_LANDSCAPE
CHECK_PORTRAIT   EQU  *
         CLC   RTDAOPTN(7),OPTION1  See if it is OPTION1
         BNE   CHECK_LANDSCAPE
         LA    R2,PCLPORT         Point to our PCL record
         LH    R15,PCLPORT        Get the length
         B     CHECK_VAR
CHECK_LANDSCAPE  EQU  *
         CLC   RTDAOPTN(7),OPTION2  See if it is OPTION2
         BNE   SET_CICSLAND
SET_LANDSCAPE  EQU  *
         LA    R2,PCLLAND         Point to our PCL record
         LH    R15,PCLLAND        Get the length
         B     CHECK_VAR
SET_CICSLAND   EQU  *
         LA    R2,PCLCICS         Point to our PCL record
         LH    R15,PCLCICS        Get the length
CHECK_VAR      EQU  *
         CLI   RTDARTYP,C'V'      Variable length records?
         BE    PUT00010           Yes, continue
         LA    R2,4(0,R2)         No, point past record descriptor
         SH    R15,HW4
PUT00010 DS    0H                 R2 points to carriage control
         L     R14,IREBPTR        Get the buffer address
         ST    R15,IREDLEN        Save the new length
         BCTR  R15,0              Decr for move
         EX    R15,MOVEPCL        MVC  0(0,R14),0(R2)
         MVI   IREWFLG,X'00'      Write this record
         MVI   IRERFLG,X'01'      Return to exit without read
         B     CLEARR15           Go return to NPF
PUT00015 DS    0H                 R2 points to carriage control
         OI    IRXFLAG,IRXOLD     Set the flag
         MVC   IREDLEN(4),IRXRECL Replace the record
         L     R2,IREBPTR
         L     R3,IREDLEN
         LA    R14,SAVEREC
         LR    R15,R3
         MVCL  R2,R14
***********************************************************
PUT00020 DS    0H
         CLI   IRECID,C'V'        Is this VTAM application?
         BNE   WRITEIT            Yes, then we are only doing JES2
         L     R3,IRECPAD         Load the bind image
         CLC   27(7,R3),=C'PRODCIC'  Is it PRODCICS
         BNE   WRITEIT
         L     R15,IREBPTR        Load up record
         TM    IRXFLAG,IRXTOP     Have we checked for 1st Top
         BO    KEEP_GOING
         CLI   4(R15),C'1'        Is it Top of Page
         BNE   KEEP_GOING
         OI    IRXFLAG,IRXTOP
         MVI   4(R15),C' '
KEEP_GOING     EQU  *
         CLI   RTDARTYP,C'V'      Variable length records?
         BNE   TRYFIXED
         CLC   0(2,R15),HW5       See if length of five
         BE    NOTWRITE
         B     WRITEIT
TRYFIXED L     R15,IREDLEN        Get the Length
         CH    R15,HW1
         BNE   WRITEIT
NOTWRITE MVI   IREWFLG,X'01'       Set flag to not write
         B     READNEXT
WRITEIT  MVI   IREWFLG,X'00'      Write this record
READNEXT MVI   IRERFLG,X'00'      Read next record
CLEARR15 XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
*        Process CLOSE call
*---------------------------------------------------------------------*
CLS00000 DS    0H
         MVI   IREWFLG,X'01'      No record to write
         MVI   IRERFLG,X'00'      Normal return from CLOSE
         XR    R15,R15            Zero return code
         B     RET00000
*---------------------------------------------------------------------*
*        Process RELEASE or TERM call
*---------------------------------------------------------------------*
REL00000 DS    0H
TRM00000 DS    0H
         LA    R2,INRCSTGL        Get length of dynamic storage
         LR    R1,R13             Get address of dynamic storage
         L     R13,SAVEAREA+4     Get address of caller's save area
         FREEMAIN RU,LV=(R2),A=(R1) Free dynamic storage
         XR    R15,R15            Zero return code
         B     RET00010
         SPACE 5
*---------------------------------------------------------------------*
*        Return to NPF
*---------------------------------------------------------------------*
RET00000 DS    0H                 Switch back to caller's save area
         L     R13,SAVEAREA+4     Return to caller
RET00010 DS    0H                 Already back to caller's save area
         ST    R15,16(R13)        Set return code in saved R15
         LM    R14,R12,12(R13)    Restore caller's registers
         BSM   0,R14
         EJECT
*---------------------------------------------------------------------*
*        Program constants
*---------------------------------------------------------------------*
         DS   0F
* Changed l8D to l16D
         DS   0F
PCLLAND  DC   AL2(LENGTH_PCLL),AL2(00)
PCLRCDL  DC   X'4027',C'E'          Reset
         DC   X'2750',C'k3G'        CR;LF;FF
         DC   X'2750',C'l0S'        Simplex Print
*        DC   X'2750',C'l5H'        Feed from Paper Deck
         DC   X'2750',C'l1O'        Landscape
         DC   X'27',C'(8U'          Roman-8 Symbol Set
         DC   X'27',C'(s0P'         Pri Spacing is Fixed
         DC   X'27',C'(s13H'        13 Pitch
*        DC   X'27',C'(s15H'        15 Pitch
*        DC   X'27',C'(s8.5V'       Point Size is 8.5
         DC   X'27',C'(s0S'         Pri Style is Upright
         DC   X'27',C'(s0B'         Pri Stroke is Normal
         DC   X'27',C'(s0T'         Pri Typeface is Line Printer
*        DC   X'2750',C'l8D'        8 lines per inch
*        DC   X'2750',C'l4C'        VMI is 4 OR 12 LPI
         DC   X'2750',C'l5.2C'      VMI is 5.2
         DC   X'2750',C'l7E'        Top Margin is 7
         DC   X'2750',C'a4L'        Left Margin is 4
*        DC   X'2750',C'a10L'       Left Margin is 10
*        DC   X'2750',C'a10M'       Right Margin is 10
         DC   X'2750',C'a0R'        Cursor Position = Row 0
LENGTH_PCLL   EQU *-PCLLAND
*
         DS   0F
PCLPORT  DC   AL2(LENGTH_PCLP),AL2(00)
PCLRCDP  DC   X'4027',C'E'          Reset
         DC   X'2750',C'k3G'        CR;LF;FF
         DC   X'2750',C'l0S'        Simplex Print
*        DC   X'2750',C'l5H'        Feed from Paper Deck
         DC   X'2750',C'l0O'        Portrait
         DC   X'27',C'(8U'          Roman-8 Symbol Set
         DC   X'27',C'(s0P'         Pri Spacing is Fixed
         DC   X'27',C'(s12H'        12 Pitch
*        DC   X'27',C'(s8.5V'       Point Size is 8.5
         DC   X'27',C'(s0S'         Pri Style is Upright
         DC   X'27',C'(s0B'         Pri Stroke is Normal
         DC   X'27',C'(s0T'         Pri Typeface is Line Printer
         DC   X'2750',C'l8D'        8 lines per inch
*        DC   X'2750',C'l5.2727C'   VMI is 5.2727
         DC   X'2750',C'l7E'        Top Margin is 7
         DC   X'2750',C'a10L'       Left Margin is 10
*        DC   X'2750',C'a10M'       Right Margin is 10
         DC   X'2750',C'a0R'        Cursor Position = Row 0
LENGTH_PCLP   EQU *-PCLPORT
*
         DS   0F
PCLCICS  DC   AL2(LENGTH_PCLC),AL2(00)
PCLRCDC  DC   X'4027',C'E'          Reset
         DC   X'2750',C'k3G'        CR;LF;FF
         DC   X'2750',C'l0S'        Simplex Print
*        DC   X'2750',C'l5H'        Feed from Paper Deck
         DC   X'2750',C'l0O'        Portrait
         DC   X'27',C'(8U'          Roman-8 Symbol Set
         DC   X'27',C'(s0P'         Pri Spacing is Fixed
         DC   X'27',C'(s18H'        12 Pitch
*        DC   X'27',C'(s8.5V'       Point Size is 8.5
         DC   X'27',C'(s0S'         Pri Style is Upright
         DC   X'27',C'(s0B'         Pri Stroke is Normal
         DC   X'27',C'(s0T'         Pri Typeface is Line Printer
         DC   X'2750',C'l5.2C'      VMI is 5.2727
         DC   X'2750',C'l10E'       Top Margin is 10
         DC   X'2750',C'a4L'        Left Margin is 4
         DC   X'2750',C'a0R'        Cursor Position = Row 0
LENGTH_PCLC   EQU *-PCLCICS
HW1      DC   H'1'
HW4      DC   H'4'
HW5      DC   H'5'
HW1024   DC   H'1024'
MOVEPCL  MVC  0(0,R14),0(R2)
OPTION1  DC   CL7'OPTION1'
OPTION2  DC   CL7'OPTION2'
         LTORG
         SPACE 5
IRXSTATD DSECT                    16 byte static IRE storage
IRXDSTGA DS    A                  Address of dynamic storage area
IRXFLAG  DS    X                  File status flag
IRXNEW   EQU   X'00'              ... first record in file
IRX2ND   EQU   X'01'              ... second record in file
IRXTOP   EQU   X'10'              ... found first Top of Page
IRXOLD   EQU   X'80'              ... not first record in file
         DS    3X                 unused
IRXRECP  DS    F                  Pointer to First Record
IRXRECL  DS    F                  Length of first record
         SPACE 5
INRCSTG  DSECT
SAVEAREA DS    18F                Save Area
         DS    0D                 Round up to double word boundary
SAVEREC  DS    1024X              Make this big enough
INRCSTGL EQU   *-INRCSTG          Length of dynamic storage area
         SPACE 5
         EZAPPFCD IRE=DSECT,   DSECT for input record exit parameters  X
               RDA=DSECT       DSECT for routing data area
         SPACE 5
         END   ,                   End of INRECXIT  module
