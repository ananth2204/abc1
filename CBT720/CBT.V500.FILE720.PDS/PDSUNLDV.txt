*********************************************************************
* AUTHOR - BILL SWEENEY                                             *
*     SSC, INC.                                                     *
*     WHSWEENEY@SSCMAINFRAME.COM                                    *
*     WWW.SSCMAINFRAME.COM                                          *
* DATE - (C) COPYRIGHT 2004                                         *
*                                                                   *
* DISCLAIMER - IT IS THE RESPONSIBILITY OF THE INIDIVIDUAL          *
*         TO VALIDATE THAT THIS SOFTWARE WILL NOT HARM YOUR         *
*         SYSTEM. INSTALL THIS SOFTWARE AT YOUR OWN RISK.           *
*         SSC, INC. IS NOT RESPONSIBLE FOR ANY PROBLEMS             *
*         CAUSED WHILE USING THIS SOFTWARE. GOOD LUCK.              *
*                                                                   *
* LINKAGE INFORMATION - AMODE 24                                    *
*                  RMODE 24                                         *
*                  NON-REENTRANT                                    *
*                  NOT APF AUTHORIZED                               *
*                                                                   *
* DESCRIPTION - PROGRAM TO UNLOAD A PDS TO A SEQUENTIAL FILE SO     *
*               SO THAT IT CAN BE OFFLOADED.                        *
*                                                                   *
*  JCL       -                                                      *
*        //JOBNAME JOB (ACCT),'PROGRAMMER   ',MSGCLASS=X,CLASS=X,   *
*        //      NOTIFY=&SYSUID                                     *
*        //STEP1  EXEC  PGM=PDSUNLDV                                *
*        //STEPLIB  DD  DSN=PREFIX.ISPF.LOADLIB,DISP=SHR            *
*        //PDSINFIL DD  DSN=PREFIX.YOUR.PDS,DISP=SHR                *
*        //OUTFILE  DD  DSN=PREFIX.YOUR.UNLOAD,DISP=(,CATLG),       *
*        //     SPACE=(TRK,(9,9),RLSE)                              *
*        //SYSUDUMP DD  SYSOUT=*                                    *
*                                                                   *
*********************************************************************
PDSUNLDV CSECT
         PRINT ON,GEN
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RC4      EQU   4
RC8      EQU   8
RC16     EQU   16
               EJECT
****************************************************************
*  SAVE LOGIC TO CONSERVE ON REGISTERS. R13 IS USED AS BOTH    *
*  THE BASE REGISTER AND THE POINTER TO THE 18 WORD SAVE AREA. *
****************************************************************
         B     72(R15)             BRANCH AROUND THE SAVE AREA
         DS    17F                 THIS AND THE PRIOR BR ARE 18F SAVE
         STM   R14,R12,12(R13)     SAVE IN CALLERS SAVEAREA
         ST    R13,4(R15)          SAVE IN OUR SAVE AREA
         ST    R15,8(R13)          STORE OUR SAVE AREA ADDR IN THEIRS
         LR    R13,R15             SET UP AS SAVE AND BASE REG
         LA    R12,2048(R13)       ADDR TO SECOND BASE REG
         LA    R12,2048(R12)       FINISH THE 4096 INCR
         USING PDSUNLD,R13,R12
**************************************
*  LETS GO AHEAD AND ACQUIRE STORAGE *
**************************************
         LH   R0,HW256
         L    R5,MEMBER_LENGTH
         AR   R0,R5
         LH   R4,HW32760
         AR   R0,R4
         ST   R0,GETMAIN_LENGTH  SAVE THIS LENGTH FOR LATER
         GETMAIN R,LV=(0)
GET_STORAGE ST  R1,GETMAIN_ADDRESS SAVE THE STORAGE ADDRESS
         LR   R7,R1
         LA   R11,256(R7)
         ST   R11,MEMBER_ADDRESS
         LA   R5,0(R11,R5)
         ST   R5,READBLOK_ADDRESS
*******************************************************************
OPENDIR  EQU   *
         OPEN  (DIRREAD)           OPEN PDS TO READ DIRECTORY
         TM    DIRREAD+48,X'10'    OPEN SUCCESSFUL
         BO    OPENOK              NO, THEN QUIT
         WTO   'UNABLE TO OPEN DIRECTORY'
         MVI   RETCODE+3,RC16
         B     FREE_STORAGE
OPENOK   EQU   *
         SLR   R3,R3
         LA    R11,2(R11)   POINT PAST DIRECTORY READ AND LENGTH FLD
LOCSET   READ  DIRDECB,SF,DIRREAD,(7)
         CHECK DIRDECB
RDNXTDIR EQU   *
LIST0    LR    R10,R7              R10 POINTS TO FIELD READ
         LH    R9,0(R10)           R9 CONTAINS LENGTH OF RECORD
         AR    R9,R10              POINT TO END OF LIST
         LA    R10,2(R10)          ADDRESS MEMBER
LIST1    CLC   0(8,R10),FFFLAG     IS THIS THE LAST DIRECTORY ENTRY
         BE    DIRENDL             YES, THEN CLOSE IT AND GET TO WORK
LIST2    MVC   0(12,R11),0(R10)    MOVE IN MMBR NAME,TTR, AND ALIAS BIT
         LA    R3,1(R3)            INCR. COUNTER FOR MEMBERS
INCRMBRA LA    R11,12(R11)         INCR. INPUT MEMBER LIST
GETPAST  IC    R14,11(R10)          GET # OF USER HALFWORDS
         N     R14,FW31             ZERO OUT HI ORDER BITS
         SLA   R14,1                MULTIPLY BY TWO
         LA    R14,12(R14)          ADD THE CONSTANT SECTION TO IT
         AR    R10,R14             AND THEN INCREMENT R10
         CR    R10,R9              ARE WE AT THE END OF THIS READ
         BL    LIST1               NO, THEN PROCESS THE NEXT
         B     LOCSET              READ NEXT RECORD
         EJECT
******************************************************
* THIS NEXT SECTION IS ENTERED IF EODAD IS HIT OR AN *
* I/O ERROR OCCURS                                   *
******************************************************
NOTDIR   EQU   *
         CLOSE DIRREAD             CLOSE DIRECTORY
         WTO   'DIRECTORY SHOULD NOT HAVE REACHED EODAD'
         MVI   RETCODE+3,RC8
         B     FREE_STORAGE
*******************************************************************
* WE HAVE FINISHED A GOOD READING OF THE DIRECTORY AND WILL CLOSE *
* IT, VERIFY IT HAS MEMBERS AND THEN PROCESS THE PDS              *
*******************************************************************
DIRENDL  MVC   1(8,R11),FFFLAG    FLAG END OF MEMBER LIST
         CLOSE DIRREAD             CLOSE DIRECTORY
         L     R11,MEMBER_ADDRESS  RELOAD R11 POINTER
         LTR   R3,R3              VERIFY THAT AT LEAST 1 MEMBER EXIST
         BNZ   STRR3              YES, THEN GO AND SAVE IT BOB
         WTO   'NO MEMBERS IN PDS; FORGET IT'
         MVI   RETCODE+3,RC8
         B     FREE_STORAGE
STRR3    STCM  R3,3,0(R11)          SAVE THE NUMBER OF MEMBERS FOUND
         LA    R11,2(R11)           POINT PAST LENGTH
***********************************************
*   OPEN THE PDS AND PROCESS THE MEMBER LIST  *
***********************************************
         OPEN  PDSINFIL
         TM    PDSINFIL+48,X'10'  GOOD OPEN ??
         BO    OPENOK2            YES, THEN CONTINUE EUROK
         WTO   'UNABLE TO OPEN PDSUPDT FILE FOR INPUT'
         MVI   RETCODE+3,RC16
         B     FREE_STORAGE
OPENOK2  EQU   *
         MVC   OUTFILE+62(2),PDSINFIL+62
         MVC   OUTFILE+82(2),PDSINFIL+82
         MVC   OUTFILE+36(1),PDSINFIL+36
         OPEN  (OUTFILE,(OUTPUT))
         TM    OUTFILE+48,X'10'  GOOD OPEN ??
         BO    LOOPFIND           YES, THEN CONTINUE EUROK
         WTO   'UNABLE TO OPEN OUTFILE FILE FOR OUTPUT'
         MVI   RETCODE+3,RC16
         CLOSE PDSINFIL
         B     FREE_STORAGE
LOOPFIND EQU   *
         FIND  PDSINFIL,(11),D
         LTR   R15,R15
         BZ    GOODFIND
         ABEND 002,DUMP        JUST QUIT
GOODFIND EQU   *
         MVC   ADDNAME(8),0(R11)
         TM    PDSINFIL+36,X'40'  IS IT VARIABLE LENGTH BLOCK
         BZ    PUTFIXED           NO, THEN WRITE OUT FIXED RECORD
         PUT   OUTFILE,ADDRECDV   YES, THEN WRITE OUT VARIABLE RECORD
         B     LOOPREAD
PUTFIXED EQU   *
         PUT   OUTFILE,ADDRECD
LOOPREAD EQU   *
         READ  PDSDECB,SF,PDSINFIL,(5)
         CHECK PDSDECB
         TM    FLAG,X'01'         SEE IF RECOVERY ENTERED
         BZ    NO_ERROR
         MVI   FLAG,X'00'         RESET FLAG
         B     EODAD
NO_ERROR LH    R6,PDSINFIL+62     BLKSIZE
         L     R7,PDSDECB+16      IOB
         SH    R6,14(R7)
         SRDL  R6,32
         TM    PDSINFIL+36,X'40'  IS IT VARIABLE LENGTH BLOCK
         BZ    SETDIVID           NO, THEN PROCESS FIXED
         LA    R8,4(R5)           ADDRESS PAST BDW
         B     LOOPWRIT
SETDIVID LH    R9,PDSINFIL+82    LRECL
         DR    R6,R9             GET THE BRANCH COUNT (ONLY GOOD IF FB)
         LR    R8,R5
LOOPWRIT PUT   OUTFILE,(8)
         TM    PDSINFIL+36,X'40'  IS IT VARIABLE LENGTH BLOCK
         BZ    ITSFIXED           NO, THEN PROCESS FIXED BLOCK
         SLR   R15,R15            CLEAR FOR INSERT
         ICM   R15,3,0(R8)        GET THE RDW LENGTH IN R15
         LA    R8,0(R8,R15)       INCREMENT TO NEXT RECORD
         SLR   R7,R15             DECR THE RDW
         CH    R7,HW4             ACCOUNT FOR THE BDW
         BH    LOOPWRIT           GT 4, THEN MORE RECORDS
         B     LOOPREAD           GET THE NEX
ITSFIXED LA    R8,0(R9,R8)
         BCT   R7,LOOPWRIT
         B     LOOPREAD
EODAD    LA    R11,12(R11)
         BCT   R3,LOOPFIND        IF IT FALLS THRU THEN WE ARE DONE
         MVC   ENDNAME(8),ADDNAME
WRITEND  TM    PDSINFIL+36,X'40'  IS IT VARIABLE LENGTH BLOCK
         BZ    PUTENDFB           NO, THEN WRITE OUT FIXED RECORD
         PUT   OUTFILE,ENDRECDV   YES, THEN WRITE OUT VARIABLE RECORD
         B     CLOSEUP
PUTENDFB PUT   OUTFILE,ENDRECD
CLOSEUP  EQU   *
         CLOSE (PDSINFIL,,OUTFILE)
********************************************************************
*   CLEANUP   TO GO HOME                                           *
********************************************************************
FREE_STORAGE   EQU  *
         L     R1,GETMAIN_ADDRESS
         L     R0,GETMAIN_LENGTH
         FREEMAIN R,LV=(0),A=(1)
EXIT     L     R15,RETCODE
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
RECOVER  OI    FLAG,X'01'
         BR    R14
DIRREAD  DCB   MACRF=R,DSORG=PS,DDNAME=PDSINFIL,EODAD=NOTDIR,          X
               BLKSIZE=256,LRECL=256,RECFM=F
PDSINFIL DCB   DDNAME=PDSINFIL,MACRF=(R),DSORG=PO,EODAD=EODAD,         X
               SYNAD=RECOVER
OUTFILE  DCB   DDNAME=OUTFILE,MACRF=PM,DSORG=PS
DOUBLE_WORD  DC    D'0'
RDJFCB1  RDJFCB (PDSINFIL,),MF=L
GETMAIN_ADDRESS DC F'0'
GETMAIN_LENGTH  DC F'0'
MEMBER_ADDRESS DC F'0'
MEMBER_LENGTH  DC F'40000'
READBLOK_ADDRESS DC F'0'
RETCODE  DC    F'0'
FW31     DC    F'31'
HW1      DC    H'1'
HW4      DC    H'4'
HW256    DC    H'256'
HW32760  DC    H'32760'
FFFLAG   DC    8X'FF'
FLAG     DC    X'00'
ADDRECDV DC    H'24',H'00'
ADDRECD  DS    0CL80
         DC    CL12'./ ADD NAME='
ADDNAME  DC    CL68' '
ENDRECDV DC    H'22',H'00'
ENDRECD  DS    0CL80
         DC    CL10'./ ENDUP '
ENDNAME  DC    CL70' '
         END
