/*  rexx  */
/ trace r */

/* Date can either by YYDDD Julian or YYYYMMDD format   */

 arg date1,time1,date2,time2

 if length(date1) = 5 then         /* See if date 5 character Julian  */
  do
   year1 = 20||substr(date1,1,2)
   day1  = substr(date1,3,3)
  end
 else
  do
   year1 = substr(date1,1,4)
 /* Get the date in format mm/dd/yy and then use julian function */
   day1   = substr(date1,5,2)'/'substr(date1,7,2)'/'substr(date1,3,2)
   day1   = julian(day1)
   day1   = substr(day1,3,3)
  end

 if length(date2) = 5 then         /* See if date 5 character Julian  */
  do
   year2 = 20||substr(date2,1,2)
   day2  = substr(date2,3,3)
  end
 else
  do
   year2 = substr(date2,1,4)
 /* Get the date in format mm/dd/yy and then use julian function */
   day2   = substr(date2,5,2)'/'substr(date2,7,2)'/'substr(date2,3,2)
   day2   = julian(day2)
   day2   = substr(day2,3,3)
  end

 year_diff = year2 - year1


 day_diff = day2 - day1

 parse value time1 with hh1 ':' mm1 ':' ss1
 parse value time2 with hh2 ':' mm2 ':' ss2
 hour_diff = hh2 - hh1
 minute_diff = mm2 - mm1
 second_diff = ss2 - ss1

 select
  when year_diff = 0 & day_diff = 0 & hour_diff = 0 &,
       minute_diff = 0 & second_diff = 0 then
   return 0

  when year_diff = 0 & day_diff = 0 & hour_diff = 0 &,
       minute_diff = 0 & second_diff > 0 then
   return second_diff 'seconds'

  when year_diff = 0 & day_diff = 0 & hour_diff = 0 &,
       minute_diff > 0  then
   do
    if second_diff < 0 then
     do
      second_diff = second_diff + 60
      minute_diff = minute_diff - 1
      return minute_diff 'minutes' second_diff 'seconds'
     end
    else
      return minute_diff 'minutes' second_diff 'seconds'
   end

  when year_diff = 0 & day_diff = 0 & hour_diff > 0  then
   do
    if minute_diff < 0 then
     do
      minute_diff = ((hour_diff-1)*60) + ((mm2+60) - mm1)
      return minute_diff 'minutes'
     end
    else
     do
      minute_diff = (hour_diff*60) + minute_diff
      return minute_diff 'minutes'
    end
   end

  when year_diff = 0 & day_diff > 0 then
   do

    if hour_diff < 0 then
     hour_diff = ((day_diff-1)*24) + ((hh2+24) - hh1)
    else
     hour_diff = (day_diff*24) + hour_diff

    if minute_diff < 0 then
     do
      hour_diff = hour_diff-1
      minute_diff = minute_diff + 60
      return hour_diff 'hours' minute_diff 'minutes'
     end
    else
      return hour_diff 'hours' minute_diff 'minutes'

   end

  when year_diff > 0 0 then
   do

    days = 0
    leap_year = year2
    if year1//4 = 0 then
     last_year = 366
    else
     last_year = 365
    do yy = 1 to year_diff
     leap_year = leap_year - 1
     if leap_year//4 = 0 then
      days = days + 366
     else
      days = days + 365
    end
      day_diff = (days - day1) + day2


    if hour_diff < 0 then
     do
      day_diff = day_diff - 1
      hour_diff = hour_diff + 1
     end

    if minute_diff < 0 then
     do
      hour_diff = hour_diff-1
      minute_diff = minute_diff + 60
      return day_diff 'days' hour_diff 'hours' minute_diff 'minutes'
     end
    else
      return day_diff 'days' hour_diff 'hours' minute_diff 'minutes'

   end

  otherwise
   return 'ERROR'

 end

exit
julian:
 arg gdate
 MONTH = SUBSTR(GDATE,1,2)
 DAY   = SUBSTR(GDATE,4,2)
 YEAR  = SUBSTR(GDATE,7,2)
 IF \DATATYPE(MONTH,'W') | \DATATYPE(DAY,'W') | \DATATYPE(YEAR,'W') |,
  MONTH < 1 & MONTH > 12 | DAY < 1 & DAY > 31 THEN
  DO
   SAY 'INVALID DATE PASSED. FORMAT IS MM/DD/YY, E.G.  01/01/95'
   SAY 'CORRECT THE FORMAT AND RETRY'
   EXIT 16
  END
 MONTHS.  = 31
 MONTHS.2 = 28
 MONTHS.4 = 30
 MONTHS.6 = 30
 MONTHS.9 = 30
 MONTHS.11 = 30
 IF YEAR//4 = 0 THEN
  MONTHS.2 = 29
  MONTH = STRIP(MONTH,'L',0)     /* STRIP ANY LEADING ZEROES  */
  IF DAY > MONTHS.MONTH THEN
   DO
    SAY 'THE DAY SPECIFIED IS GT THE AMOUNT FOR THAT MONTH'
    EXIT 16
   END
 JDAY = 0
 LOOP_MONTH = MONTH - 1
 IF MONTH > 1 THEN
  DO I = 1 TO LOOP_MONTH
   JDAY = JDAY + MONTHS.I
  END
 JDAY = JDAY + DAY
 JDAY = RIGHT(JDAY,3,0)
 JDATE = YEAR||JDAY

 return jdate

