    TITLE 'SYSURDR  - PROGRAM TO ACCEPT JCL FROM CONSOLE USING WTOR'
*********************************************************************
* AUTHOR - BILL SWEENEY                                             *
*     SSC, INC.                                                     *
*     WHSWEENEY@SSCMAINFRAME.COM                                    *
*     WWW.SSCMAINFRAME.COM                                          *
* DATE - (C) COPYRIGHT 2004                                         *
*                                                                   *
* DISCLAIMER - IT IS THE RESPONSIBILITY OF THE INIDIVIDUAL          *
*         TO VALIDATE THAT THIS SOFTWARE WILL NOT HARM YOUR         *
*         SYSTEM. INSTALL THIS SOFTWARE AT YOUR OWN RISK.           *
*         SSC, INC. IS NOT RESPONSIBLE FOR ANY PROBLEMS             *
*         CAUSED WHILE USING THIS SOFTWARE. GOOD LUCK.              *
*                                                                   *
*                                                                   *
*  DESCRIPTION - PROGRAM WAS WRITTEN TO PROVIDE AN INTERFACE TO     *
*                THE CONSOLE IN THE EVENT THAT THE NETWORK WAS NOT  *
*                AVAILABLE. IT WILL ACCEPT JCL FOR A BATCH JOB      *
*                USING WTORS. I GOT THE IDEA FROM VSE.              *
*                                                                   *
*  LINKAGE INFORMATION - NONE                                       *
*********************************************************************
*****************************************************************
* THIS PROGRAM WILL ALLOW YOU TO SUBMIT JOBS FROM AN OPERATOR   *
* CONSOLE BY TYPING IN THE INDIVIDUAL JCL STATEMENTS. IT ALLOWS *
* SOME FLEXIBILITY RELATIVE TO YOUR RESPONSES, BUT NOT MUCH. IT *
* IS ALL WTOR DRIVEN.                                           *
*****************************************************************
SYSURDR  CSECT
         PRINT ON,GEN
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*******************************************************************
* SAVE LOGIC USES R13 AS BOTH THE BASE REGISTER AND SAVE AREA PTR.*
*******************************************************************
         B     72(R15)
         DS    17F
         STM   R14,R12,12(R13)
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         USING SYSURDR,R13
*******************************************************************
* GO GET 10 PAGES OF STORAGE, BECAUSE WHO WILL TYPE MORE THAN 500 *
* JCL STATEMENTS.                                                 *
*******************************************************************
         GETMAIN R,LV=40960
         ST    R1,STRADDR1          SAVE THE ADDRESS OF STORAGE
         LR    R11,R1               PUT IT IN R11 ALSO
         SLR   R10,R10              CLEAR R10 TO USE A COUNTER
*******************************************************************
* ISSUE 2 NON-ROLLABLE WTO'S AND THE ONE WTOR TO INITIATE THIS    *
* WONDROUS PROCESS                                                *
*******************************************************************
         WTO   'THE READER UTILITY IS USED TO SUBMIT BATCH JOBS WHEN NO+
                ONLINE SYSTEM IS AVAILABLE.',ROUTCDE=2,DESC=2
         LR     R3,R1
         WTO   'ENTER RESTART TO START BACK AT BEGINNING, ABORT TO QUIT+
                PROCESSING AND EXIT, OR LIST TO DISPLAY THE RECORDS ALR+
               EADY TYPED.',ROUTCDE=2,DESC=2
         LR     R4,R1         SAVE ADDR POINTER FOR DOM
LOOPTHRU MVC   JCLREC(80),BLANKS     CLEAR OUT WTOREPLY AREA BEFORE
WTOR1    WTOR  '<-- MSG #. ENTER JCL STATEMENTS TO CREATE A JOB. WHEN F+
               INISHED ENTER // OR A NULL CARD TO SUBMIT JOB.',        +
               JCLREC,80,ECB1,ROUTCDE=3
         WAIT  ECB=ECB1           SIT HERE AND WAIT FOR THERE REPLY
         XC    ECB1,ECB1          CLEAR IT FOR GENERAL PURPOSE
         OC    JCLREC(80),BLANKS    CAPITALIZE THE WHOLE DARN THING
         CLC   JCLREC(6),=C'ABORT '  WOULD THEY LIKE TO QUIT ?
         BE    FREEMSG               YES, THEN GO BYE-BYE
         CLC   JCLREC(5),=C'LIST '   WOULD THEY LIKE TO SEE THE JCL
         BNE   CHKREST               NO, THEN CHECK IF RESTART SPEC
         LTR   R10,R10               LET'S MAKE SURE THERE IS DATA
         BNZ   LODDISP               YES, THEN GO SHOW THEM
         WTO   'YOU HAVE NO RECORDS TO DISPLAY AT THIS TIME.',ROUTCDE=2
         B     LOOPTHRU              REISSUE THE WTOR
LODDISP  L     R9,STRADDR1          LET R9 POINT TO BEGIN AGAIN
         LR    R8,R10                 GET CURRENT NUMBER OF RECORDS
LOOPIT   MVC   WTOJCLD+8(80),0(R9)   MOVE RECORD INTO WTO AREA
WTOJCLD  WTO   '                                                       +
                                          ',ROUTCDE=2
         LA    R9,80(R9)            POINT TO NEXT RECORD
         BCT   R8,LOOPIT            LOOP THRU UNTIL FINISHED
         B     LOOPTHRU             GO ISSUE WTOR AGAIN
**********************************************************************
* THE RESTART FUNCTION WILL START BACK AT THE BEGINNING, MAKING YOU  *
* RETYPE ALL YOUR STATEMENTS. IF YOU DO NOT NEED TO RESTART AT THE   *
* BEGINNING, BUT PERHAPS THE MIDDLE, THEN SUPPLY A NUMERIC VALUE     *
* BETWEEN 1 AND 99 TO RETURN TO A PARTICULAR PLACE.                  *
**********************************************************************
CHKREST  CLC   JCLREC(8),=C'RESTART '   IS THIS A RESTART
         BNE   CHKEND               NO, THEN IT MUST BE PART OF JOB
         TRT   JCLREC+7(5),NBLANK   LOOK FOR 1ST NON-BLANK
         BZ    RESTBEG              IF NOT FOUND THEN START AT BEGIN
         CLI   0(R1),C'0'           MUST BE NUMERIC
         BNL   RESTREC              YES, THEN TURN IT TO BINARY
RESTBEG  WTO   'YOU HAVE REQUESTED A RESTART, AND YOUR NEXT STATEMENT W+
               ILL CONSTITUTE THE BEGINNING OF THIS JOB.',ROUTCDE=2
         L     R11,STRADDR1         POINT BACK TO BEGINNING
         SLR   R10,R10              CLEAR COUNT TO ZERO
         B     LOOPTHRU             START OVER
RESTREC  CLI   1(R1),C'0'           HAVE THEY SUPPLIED TWO DIGITS
         BL    ONENUM               NO, THEN DO JUST ONE
         MVC   WTORECN+83(2),0(R1)  MOVE BOTH NUMBERS TO WTO AREA
         PACK  POINTER+5(3),0(2,R1)  TURN IT INTO PACKED FIRST
         B     CONVERT              GO CONVERT TO BINARY
ONENUM   PACK  POINTER+5(3),0(1,R1)  PACK JUST ONE BYTE
         MVC   WTORECN+83(1),0(R1)  MOVE TO OUTPUT
         MVI   WTORECN+84,C' '      CLEAR OUT IF ANY FROM BEFORE
CONVERT  CVB   R9,POINTER           CONVERT TO BINRY FOR REGISTER USE
         CR    R10,R9               COMP TO VERIFY REQUEST NOT GT R10
         BL    WTORECN              ASKED FOR TOO HIGH, USE WHAT IN R10
         LR     R10,R9              RELOAD VALUE
WTORECN  WTO   'YOU HAVE REQUESTED A RESTART, AND YOUR NEXT STATEMENT W+
               ILL BEGIN AT RECORD   .',ROUTCDE=2
         L     R11,STRADDR1        POINT BACK TO BEGIN OF STORAGE
         LTR   R10,R10             MAKE SURE NOT HAVE ZEROES IN IT
         BZ    LOOPTHRU            YES, THEN START OVER AT BEGIN
         BCTR  R10,0               DECR 1 FOR COUNTER
         LR    R9,R10              RELOAD INTO R9
         MH    R9,=H'80'           MULT BY RECSIZE TO INCR R11
         LA    R11,0(R9,R11)       POINT TO STATEMENTS IN STORAGE
         B     LOOPTHRU            LOOP BACK THRU
CHKEND   TRT   JCLREC(80),NBLANK   LOOK FOR NULL STATEMENT
         BZ    SUBMIT              YES, THEN SUBMIT JOB
         MVC   0(80,R11),JCLREC    MOVE TO STORAGE AREA
         LA    R10,1(R10)          INCR COUNTER
         LA    R11,80(R11)         POINT TO NEXT RECORD FOR UPDATE
         CLC   JCLREC(2),=C'//'    IS THIS A // JCL STATEMENT
         BNE   LOOPTHRU            LOOP BACK THROUGH FOR NEXT CARD
         TRT   JCLREC+2(78),NBLANK  LOOK FOR NON BLANK FOR EOJ
         BNZ   LOOPTHRU             WE FOUND SOMETHING SO GET MORE
**********************************************************************
* WE WILL NOW OPEN THE INTERNAL READER AND SUBMIT THE JOB.           *
**********************************************************************
SUBMIT   OPEN  (READER,(OUTPUT))
         TM    READER+48,X'10'      VERIFY OPEN BIT
         BO    GOODOPEN             YES, THEN CONITNUE
         WTO   'BAD NEWS. UNABLE TO OPEN READER DD STATEMENT'
         ABEND  400,DUMP
GOODOPEN L     R11,STRADDR1         POINT TO BEGINNING OF CARDS
LOOPPUT  PUT   READER,(11)          WRITE THEM
         LA    R11,80(R11)          INCREMENT TO NEXT RECORD
         BCT   R10,LOOPPUT          LOOP TIL DONE
         CLOSE READER               CLOSE
FREEMSG  DOM   MSG=(3)              DELETE NON ROLLABLE MSGS
         DOM   MSG=(4)              HERE ALSO
FREESTR  L     R1,STRADDR1          LOAD UP R1 SO AS TO FREE STORAGE
         FREEMAIN R,LV=40960,A=(1)
RETURN   L     R13,4(R13)           RETURN LOGIC TO GO BYE-BYE
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
READER   DCB  DDNAME=READER,MACRF=PM,DSORG=PS
JCLREC   DC    CL80' '
BLANKS   DC    CL80' '
POINTER  DC    D'0'
ECB1     DC    F'0'
STRADDR1 DC    F'0'
         LTORG
         DS    0F
NBLANK   DC    256X'FF'
         ORG   NBLANK+C' '
         DC    X'00'
         ORG
BLANK    DC    256X'00'
         ORG   BLANK+X'FF'
         DC    X'00'
         ORG
         END
