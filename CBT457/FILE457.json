{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012105000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 5055596, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE457.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 5055596, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 5055596, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE457.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00O\\n'", "DS1TRBAL": "b'\\\\,'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03T\\x00\\n\\x03Y\\x00\\x0e\\x00P'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x14C\\x009\\x009\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T14:43:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "SYSPAJA"}, "text": "1   18.11.94                                            DOC - Page 1/2.\n\n          ***************************************************\n          ***     P R E L I M I N A R Y     N O T E S     ***\n          ***************************************************\n\n Files author : MOINIL P.A.\n -------------- Computing Centre (TP361)\n                J.R.C. - Ispra establishment\n                21020 ISPRA (VA), Italy\n\n Products installation requirement :\n -----------------------------------\n     Data-set \"->.SOURCE.FILE0\" is a pre-requisite.\n     See to the member $$$PROCS which contains a job to store the\n     procedures used for products installation.\n\n Data-set members structure :\n ----------------------------\n     The members names ending by a dollar sign ($) are the JCL to\n     install (assembly + link-edit) the modules, and the members\n     names ending by a paragraph sign (@) are the corresponding\n     modules documentation.\n\n                   *********************************\n                   ***     INFORMATION NOTES     ***\n                   *********************************\n\n     Assuming the LISTNO program in \"->.SOURCE.FILE0\" installed, you may\n SUBMIT the job below to obtain a copy of this document :\n         //...      JOB ...\n         //DOC     EXEC PGM=LISTNO,PARM='M=DOC'\n         //SYSPDS    DD DSN=->.SOURCE.FILE3,DISP=SHR\n         //SYSPRINT  DD SYSOUT=A\n     Only two information notes list (about 500 lines) may be also\n obtained by this job if you specify M=INFO as parameter.\n1   18.11.94                                            DOC - Page 2/2.\n\n  *******************************************************************\n  ***     D A T A - S E T ->.SOURCE.FILE3     C O N T E N T S     ***\n  *******************************************************************\n\n BLACKJK    TSO BLACKJACK game.\n DECIDER    Try it ... player.\n DIVER      Try it ... player.\n GDDM       GDDM demonstrations.\n JOTTO      Try it ... player.\n KALAH      Ancient Egyptian board game.\n KLINGON    KLINGON (Space War) game.\n LIFE       Try it ... player.\n LUNAR      Lunar landing simulation.\n POKER      IBM 3270 Dispaly - Slot Machine Poker Game.\n SEIKO      Full screen display clock time.\n SNAKE      System-Node-Activity-Knowledge-Exit.\n STREK      STAR-TREK game.\n T3270FS    IBM 3270 full-screen terminal test TSO command.\n WORM       Wonderful-Online-Response-Monitor.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$PROCS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x7f\\x00\\x942\\x7f\\x15%\\x003\\x003\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-23T00:00:00", "modifydate": "1994-11-23T15:25:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "SYSPAJA"}, "text": "//ADDPROCS JOB (........),'INSTALL  PROCEDURES',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=2\n//*----------- ADD PRODUCTS INSTALLATION PROCEDURES -------------------\n//*            ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).\n//* NOTES  1 - I NORMALLY USE THE ASSEMBLER H (DON'T USE ASSEMBLER F,\n//*            THERE IS A GOOD PROBABILITY TO HAVE ERRORS).\n//*        2 - ALL PROCEDURES ASSUME THE FOLLOWING UNIT NAMES :\n//*                     DU=SYSDA : DISK UNIT\n//*                     VU=VIO   : VIRTUAL UNIT\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*      ASSEMBLER H PROCEDURES.                                      *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//PROCH   EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    DD DSN=->.TARGET.PROCLIB,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DATA,DLM=ZZ\n./     ADD     NAME=PAJ3AS2        <------------- ASSEMBLY / 2 MACLIBS\n./     NUMBER  NEW1=100,INCR=100\n//PAJ3AS2 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE3',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=&DSS,DISP=&DS\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ADD     NAME=PAJ3AS3        <------------- ASSEMBLY / 3 MACLIBS\n./     NUMBER  NEW1=100,INCR=100\n//PAJ3AS3 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE3',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=&DSS,DISP=&DS\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ENDUP\nZZ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DOC#": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11\\x7f\\x00\\x90\\x11\\x7f\\x13W\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-27T00:00:00", "modifydate": "1990-04-27T13:57:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n                DDDDDDD          OOOOOOO         CCCCCCCC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DDDDDDD          OOOOOOO         CCCCCCCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n=/MB     $$$DOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INFO#": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x12\\x14\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:14:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n          IIII       NN     NN       FFFFFFFFF        OOOOOOO\n           II        NNN    NN       FFFFFFFFF       OOOOOOOOO\n           II        NNNN   NN       FF              OO     OO\n           II        NN NN  NN       FF              OO     OO\n           II        NN  NN NN       FFFFFF          OO     OO\n           II        NN   NNNN       FFFFFF          OO     OO\n           II        NN    NNN       FF              OO     OO\n           II        NN     NN       FF              OO     OO\n           II        NN     NN       FF              OOOOOOOOO\n          IIII       NN     NN       FF               OOOOOOO\n\n\n\n\n1   18/11/94\n                                                      INDEX     1/1.\n\n=/MB     SNAKE@    System-Node-Activity-Knowledge-Exit.\n=/MB     WORM@     Wonderful-Online-Response-Monitor.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLACKJK": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t/\\x00\\x92\\t/\\x11X\\x02/\\x02/\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1992-04-01T11:58:00", "lines": 559, "newlines": 559, "modlines": 0, "user": "SYSPAJA"}, "text": " BLAKJAK: PROC OPTIONS(MAIN)  REORDER;\n      DEFAULT RANGE(*) STATIC;\n      DCL TME CHAR(9);\n      DCL CHECK ENTRY(CHAR(120) VAR, FIXED BIN(15));\n      DCL RAND ENTRY(FIXED BIN(31), FLOAT DEC);\n      DCL TIME BUILTIN;\n      DCL R1 FIXED BIN(31);\n      DCL W CHAR(120) VAR;\n      DCL C FIXED BIN(15);\n      DCL I FIXED BIN(15);\n      DCL CDS FIXED BIN(15);\n      DCL DISPL PIC 'ZZZZZ9';\n      DCL STAKE FLOAT DEC;\n      DCL R3 FLOAT DEC;\n      DCL CARD CHAR(19) INIT('   Q29T36A57K48J   ');\n      DCL CTS(19) FIXED BIN(15);\n      DCL DECK CHAR(104) VARYING;\n      DCL MYHAND CHAR(7) VARYING;\n      DCL URHAND CHAR(6) VARYING;\n      DCL ANHAND CHAR(6) VARYING;\n      DCL URBET FLOAT DEC;\n      DCL INT_BET FIXED DEC(10);\n      DCL HANDIS FLOAT DEC;\n      DCL UTONOW FLOAT DEC;\n      DCL METONOW FLOAT DEC;\n      DCL TWOTONOW FLOAT DEC;\n      DCL URACE CHAR(1);\n      DCL ACE_A CHAR(1);\n      DCL MYACE CHAR(1);\n      DCL ACES CHAR(1);\n      DCL NEWCARD CHAR(1);\n      DCL HAND2_A CHAR(1);\n      DCL HAND2_B CHAR(1);\n      DCL ACECT FIXED BIN(15);\n      W='  ';\n      CALL HTPUT(W);\n      W='Welcome to TSO BLACKJACK.';\n      CALL HTPUT(W);\n   M1ASK:\n      W='Do you need the rules? (reply Y or N)';\n      CALL HTPUT(W);\n      CALL HTGET(W);\n      IF W = 'Y' THEN GOTO M1INS;\n      IF W = 'y' THEN GOTO M1INS;\n      IF W = 'N' THEN GOTO M1X1T;\n      IF W = 'n' THEN GOTO M1X1T;\n      IF W = 'Q' THEN GOTO LEAVE;\n      IF W = 'q' THEN GOTO LEAVE;\n      W='W H A T ? ?';\n      CALL HTPUT(W);\n      GOTO M1ASK;\n   M1INS:\n      W='  ';\n      CALL HTPUT(W);\n      W='T H E   R U L E S';\n      CALL HTPUT(W);\n      W='We play with a double deck, to reduce shuffling.';\n      CALL HTPUT(W);\n      W='This is a gentlemen''s game. No one wins ties.';\n      CALL HTPUT(W);\n      W='Your BLACKJACK pays double.';\n      CALL HTPUT(W);\n      W='5 cards, 21 or under pays double.';\n      CALL HTPUT(W);\n      W='Three sevens pay double!';\n      CALL HTPUT(W);\n      W='Any combination of 6, 7 and 8 pay double!';\n      CALL HTPUT(W);\n      W='Dealer BLACKJACK wins automatically.';\n      CALL HTPUT(W);\n      W='BLACKJACK is defined as 21 in two (2) cards.';\n      CALL HTPUT(W);\n      W='ACE (A) is one (1) or eleven (11), at your option.';\n      CALL HTPUT(W);\n      W='You start with a stake of $100, and you may bet any or all.';\n      CALL HTPUT(W);\n      W='However, you may not bet less than $1.';\n      CALL HTPUT(W);\n      W='The game is over when : 1. You quit or,';\n      CALL HTPUT(W);\n      W='                        2. You go broke.';\n      CALL HTPUT(W);\n      W='You cannot bet more than your remaining stake.';\n      CALL HTPUT(W);\n      W='You lose if you go over 21.';\n      CALL HTPUT(W);\n      W='Dealer must hit 16 or less, must stick 17 or over.';\n      CALL HTPUT(W);\n      W='Call for a new deck - enter S.';\n      CALL HTPUT(W);\n      W='To stop playing     - enter Q.';\n      CALL HTPUT(W);\n      W='To get another card - enter H.';\n      CALL HTPUT(W);\n      W='To stick            - enter C/R.';\n      CALL HTPUT(W);\n      W='NOTE : C/R means CARRIAGE RETURN only (null line).';\n      CALL HTPUT(W);\n      W='I will re-shuffle after every BLACKJACK.';\n      CALL HTPUT(W);\n      W='I will re-shuffle after all the ACES have been played.';\n      CALL HTPUT(W);\n      W='T H A T '' S   T H E   R U L E S';\n      CALL HTPUT(W);\n      W='  ';\n      CALL HTPUT(W);\n   M1X1T:\n      TME = TIME;\n      R1 = SUBSTR(TME,4);\n      STAKE = 100.00;\n      W='Mix ''em up now.';\n      CALL HTPUT(W);\n      CALL MIXER;\n   NEWHAND:\n      IF STAKE < 1 THEN GOTO BROKE;\n      DISPL = STAKE;\n      W='Your stake is now' || DISPL;\n      CALL HTPUT(W);\n      W='Place your bet.';\n      CALL HTPUT(W);\n      CALL HTGET(W);\n      IF W = 'Q' THEN GOTO QUIT;\n      IF W = 'q' THEN GOTO QUIT;\n      IF W = 'S' THEN DO; CALL MIXER;\n                          GOTO NEWHAND; END;\n      IF W = 's' THEN DO; CALL MIXER;\n                          GOTO NEWHAND; END;\n      CALL CHECK(W,I);\n      IF I = 0 THEN DO; W='W H A T ? ?';\n                        CALL HTPUT(W);\n                        GOTO NEWHAND; END;\n      INT_BET = W;\n      URBET = INT_BET;\n      INT_BET = 9;\n      IF URBET > STAKE THEN DO; W='You can''t bet that much.';\n                                CALL HTPUT(W);\n                                URBET = 0;\n                                GOTO NEWHAND; END;\n      IF URBET < 1.0 THEN DO; W='At least $1.00, BIG SPENDER!';\n                              CALL HTPUT(W);\n                              URBET = 0;\n                              GOTO NEWHAND; END;\n      MYHAND = '      ';\n      URHAND = '      ';\n      URACE = 'U';\n      MYACE = 'M';\n      MYHAND = '';\n      URHAND = '';\n      HANDIS = 0;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      CALL COUNTEM;\n      URHAND = URHAND || NEWCARD;\n      UTONOW = HANDIS;\n      IF ACES = 'A' THEN DO; URACE = 'A';\n                             ACES = 'U'; END;\n      HANDIS = 0;\n      IF C > 103 THEN CALL MIXER;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      CALL COUNTEM;\n      MYHAND = MYHAND || NEWCARD;\n      METONOW = HANDIS;\n      IF ACES = 'A' THEN DO; MYACE = 'A';\n                             ACES = 'M'; END;\n      IF C > 103 THEN CALL MIXER;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      HANDIS = UTONOW;\n      CALL COUNTEM;\n      URHAND = URHAND || NEWCARD;\n      UTONOW = HANDIS;\n      IF ACES = 'A' THEN DO; URACE = 'A';\n                             ACES = 'U'; END;\n      IF C > 103 THEN CALL MIXER;\n      W='Your hand is ' || URHAND;\n      CALL HTPUT(W);\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      HANDIS = METONOW;\n      CALL COUNTEM;\n      MYHAND = MYHAND || NEWCARD;\n      METONOW = HANDIS;\n      IF ACES = 'A' THEN DO; MYACE = 'A';\n                             ACES = 'M'; END;\n      IF C > 103 THEN CALL MIXER;\n      W='Dealer shows (-)' || NEWCARD;\n      CALL HTPUT(W);\n      IF MYACE = 'A' THEN DO; IF METONOW = 11.0 THEN GOTO MYBJ; END;\n      IF UTONOW = 11.0 THEN DO; IF URACE = 'A' THEN GOTO URBJ;\n                                ELSE GOTO DUBLDOWN; END;\n      IF SUBSTR(URHAND,1,1) = SUBSTR(URHAND,2,1) THEN GOTO SPLIT;\n   NEXTPLAY:\n      W='Your play, hit or stick?';\n      CALL HTPUT(W);\n      CALL HTGET(W);\n      IF I = 0 THEN GOTO IPLAY;\n      IF W = 'H' THEN GOTO HIT;\n      IF W = 'h' THEN GOTO HIT;\n      IF W = 'Q' THEN GOTO QUIT;\n      IF W = 'q' THEN GOTO QUIT;\n      IF W = 'S' THEN DO; CALL MIXER;\n                          GOTO NEXTPLAY; END;\n      IF W = 's' THEN DO; CALL MIXER;\n                          GOTO NEXTPLAY; END;\n      W='W H A T ? ?';\n      CALL HTPUT(W);\n      GOTO NEXTPLAY;\n   IPLAY:\n      IF INT_BET = 1 THEN GOTO SPL1T;\n      IF METONOW > 21.0 THEN GOTO MAYBEPAY;\n      IF METONOW > 16.0 THEN GOTO THECALL;\n      IF MYACE = 'M' THEN GOTO IHIT;\n      IF MYACE = 'W' THEN GOTO IHIT;\n      METONOW = METONOW + 10.0;\n      MYACE = 'W';\n      IF METONOW < 22.0 THEN GOTO IPLAY;\n      MYACE = 'M';\n      METONOW = METONOW - 10.0;\n   IHIT:\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      IF C > 103 THEN CALL MIXER;\n      HANDIS = METONOW;\n      CALL COUNTEM;\n      MYHAND = MYHAND || NEWCARD;\n      W='Dealer now shows ' || MYHAND;\n      CALL HTPUT(W);\n      METONOW = HANDIS;\n      IF ACES = 'A' THEN DO; MYACE = 'W';\n                             METONOW = METONOW + 10.0;\n                             ACES = 'M'; END;\n      IF METONOW > 21.0 THEN GOTO MAYBEPAY;\n                        ELSE GOTO IPLAY;\n   MAYBEPAY:\n      IF MYACE = 'M' THEN GOTO PAYHIM;\n      IF MYACE = 'W' THEN MYACE = 'M';\n                 ELSE GOTO PAYHIM;\n      METONOW = METONOW - 10.0;\n      GOTO IPLAY;\n  QUIT:\n      DISPL = STAKE;\n      W='You started with $100, you now have' || DISPL;\n      CALL HTPUT(W);\n      STAKE = STAKE - 100.00;\n      IF STAKE > 0 THEN W='You''re a winner!';\n                   ELSE W='Sorry about that!';\n      CALL HTPUT(W);\n  LEAVE:\n      W='That''s all folks. Bye-Bye, old chap.';\n      CALL HTPUT(W);\n      RETURN;\n   THECALL:\n      IF URACE = 'U' THEN GOTO CALL1;\n      UTONOW = UTONOW + 10.0;\n      URACE = 'U';\n      IF UTONOW < 22.0 THEN GOTO CALL1;\n      UTONOW = UTONOW - 10.0;\n   CALL1:\n      DISPL = UTONOW;\n      W='You    =' || DISPL || ' with ' || URHAND;\n      CALL HTPUT(W);\n      DISPL = METONOW;\n      W='Dealer =' || DISPL || ' with ' || MYHAND;\n      CALL HTPUT(W);\n      IF METONOW > UTONOW THEN GOTO YOULOSE;\n      IF UTONOW > METONOW THEN GOTO PAYHIM;\n      W='Tie hand, no winner.';\n      CALL HTPUT(W);\n      IF INT_BET = 2 THEN GOTO MORE_PAY;\n      GOTO NEWHAND;\n   DOUBLE5:\n      W='You have 5 cards under 21.';\n      CALL HTPUT(W);\n   PAY2X:\n      W='I pay double - BOO HOO!';\n      CALL HTPUT(W);\n      STAKE = STAKE + URBET;\n   PAYHIM:\n      STAKE = STAKE + URBET;\n      W='I pay.';\n      CALL HTPUT(W);\n      IF INT_BET = 2 THEN GOTO MORE_PAY;\n      IF INT_BET = 1 THEN DO; INT_BET = 0;\n                              GOTO  SPLAT; END;\n      URBET = 0;\n      GOTO NEWHAND;\n   BUSTED:\n      W='Sorry, you lose! You''re over 21 with ' || URHAND;\n      IF INT_BET = 2 THEN DO; CALL HTPUT(W);\n                              INT_BET = 0;\n                              UTONOW = TWOTONOW;\n                              URHAND = '      ';\n                              URHAND = ANHAND;\n                              STAKE = STAKE - URBET;\n                              GOTO IPLAY; END;\n   BUSTER:\n      CALL HTPUT(W);\n      STAKE = STAKE - URBET;\n      IF INT_BET = 1 THEN DO; INT_BET = 0;\n                              GOTO  SPLAT; END;\n      IF INT_BET = 2 THEN GOTO MORE_PAY;\n      URBET = 0;\n      GOTO NEWHAND;\n   BROKE:\n      W='Too bad, you just went broke.';\n      CALL HTPUT(W);\n      GOTO QUIT;\n   YOULOSE:\n      W='You lose this one.';\n      GOTO BUSTER;\n   DUBLDOWN:\n      W='You have 11 in two cards.';\n      CALL HTPUT(W);\n      W='You may double your bet on one more card.';\n      CALL HTPUT(W);\n      W='Enter Y if you wish to try it, else enter N if not.';\n      CALL HTPUT(W);\n      CALL HTGET(W);\n      IF W = 'Q' THEN GOTO QUIT;\n      IF W = 'q' THEN GOTO QUIT;\n      IF W = 'Y' THEN GOTO ONECARD;\n      IF W = 'y' THEN GOTO ONECARD;\n      IF W = 'N' THEN GOTO NEXTPLAY;\n      IF W = 'n' THEN GOTO NEXTPLAY;\n      W='Wrong answer, let''s try it again.';\n      CALL HTPUT(W);\n      GOTO DUBLDOWN;\n   HIT:\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      IF C > 103 THEN CALL MIXER;\n      HANDIS = UTONOW;\n      CALL COUNTEM;\n      URHAND = URHAND || NEWCARD;\n      W='You now show ' || URHAND;\n      CALL HTPUT(W);\n      UTONOW = HANDIS;\n      IF ACES = 'A' THEN DO; URACE = 'A';\n                             ACES = 'U'; END;\n      IF UTONOW > 21.0 THEN GOTO BUSTED;\n      NEWCARD = SUBSTR(URHAND,5,1);\n      IF UTONOW = 21.0 THEN GOTO GOT21;\n   H1T:\n      IF NEWCARD = ' ' THEN GOTO NEXTPLAY;\n                       ELSE GOTO DOUBLE5;\n   GOT21:\n      IF SUBSTR(URHAND,1,1) \u00ac= '7' THEN GOTO TRY6AND8;\n      IF SUBSTR(URHAND,2,1) \u00ac= '7' THEN GOTO TRY6OR8;\n      IF SUBSTR(URHAND,3,1) \u00ac= '7' THEN GOTO H1T;\n      IF SUBSTR(URHAND,4,1) \u00ac= ' ' THEN GOTO H1T;\n                                   ELSE GOTO PAY2X;\n   ONECARD:\n      URBET = URBET * 2.0;\n      IF URBET > STAKE THEN DO;\n                       W='Sorry, you can''t double up, not enuff $$.';\n                       CALL HTPUT(W);\n                       URBET = URBET / 2.0;\n                       GOTO NEXTPLAY; END;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      IF C > 103 THEN CALL MIXER;\n      HANDIS = UTONOW;\n      CALL COUNTEM;\n      URHAND = URHAND || NEWCARD;\n      W='You now show ' || URHAND;\n      CALL HTPUT(W);\n      UTONOW = HANDIS;\n      GOTO IPLAY;\n   URBJ:\n      W='You have BLACKJACK!';\n      CALL HTPUT(W);\n      CALL MIXER;\n      GOTO PAY2X;\n   MYBJ:\n      W='Dealer has BLACKJACK. Shows ' || MYHAND;\n      CALL HTPUT(W);\n      CALL MIXER;\n      GOTO YOULOSE;\n   SPLIT:\n      HANDIS = URBET * 2;\n      IF HANDIS > STAKE THEN GOTO NO_SPLIT;\n      W='You have doubles, with ' || URHAND;\n      CALL HTPUT(W);\n      W='If you wish you may split them (playing them as two hands).';\n      CALL HTPUT(W);\n      W='Enter Y, otherwise enter N.';\n      CALL HTPUT(W);\n      CALL HTGET(W);\n      IF W = 'Q' THEN GOTO QUIT;\n      IF W = 'q' THEN GOTO QUIT;\n      IF W = 'N' THEN GOTO NEXTPLAY;\n      IF W = 'n' THEN GOTO NEXTPLAY;\n      IF W = 'Y' THEN GOTO SPLIT_TING;\n      IF W = 'y' THEN GOTO SPLIT_TING;\n      W = 'W H A T ? ?';\n      CALL HTPUT(W);\n      GOTO SPLIT;\n   SPLIT_TING:\n      IF URACE \u00ac= 'A' THEN GOTO SPL1T_T1NG;\n      URACE = 'U';\n      IF SUBSTR(URHAND,1,1) = 'A' THEN URACE = 'A';\n   SPL1T_T1NG:\n      HAND2_A = SUBSTR(URHAND,2,1);\n      HANDIS = 0;\n      NEWCARD = SUBSTR(URHAND,1,1);\n      CALL COUNTEM;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      CALL COUNTEM;\n      UTONOW = HANDIS;\n      IF ACES = 'A' THEN DO; URACE = 'A';\n                             ACES = 'U'; END;\n      IF C > 103 THEN CALL MIXER;\n      SUBSTR(URHAND,2,1) = NEWCARD;\n      HAND2_B = SUBSTR(DECK,C,1);\n      C = C + 1;\n      IF C > 103 THEN CALL MIXER;\n      INT_BET = 1;\n      W='Your first hand shows ' || URHAND;\n      CALL HTPUT(W);\n      GOTO NEXTPLAY;\n   SPL1T:\n      INT_BET = 2;\n   SPLAT:\n      ANHAND = URHAND;\n      URHAND = '      ';\n      URHAND = '';\n      TWOTONOW = UTONOW;\n      HANDIS = 0;\n      NEWCARD = HAND2_A;\n      URHAND = URHAND || HAND2_A;\n      CALL COUNTEM;\n      NEWCARD = HAND2_B;\n      URHAND = URHAND || HAND2_B;\n      CALL COUNTEM;\n      UTONOW = HANDIS;\n      W='Your second hand shows ' || URHAND;\n      CALL HTPUT(W);\n      ACE_A = URACE;\n      URACE = 'U';\n      IF HAND2_A = 'A' THEN DO; URACE = 'A';\n                                ACES = 'U'; END;\n      IF HAND2_B = 'A' THEN DO; URACE = 'A';\n                                ACES = 'U'; END;\n      GOTO NEXTPLAY;\n   NO_SPLIT:\n      W='You don''t have enuff $ for doubles!';\n      CALL HTPUT(W);\n      GOTO NEXTPLAY;\n   MORE_PAY:\n      INT_BET = 0;\n      UTONOW = TWOTONOW;\n      URHAND = '      ';\n      URHAND = ANHAND;\n      URACE = ACE_A;\n      IF METONOW > 21.0 THEN GOTO PAYHIM;\n      IF SUBSTR(URHAND,5,1) = ' ' THEN GOTO THECALL;\n                                  ELSE GOTO IPLAY;\n   TRY6AND8:\n      IF SUBSTR(URHAND,1,1)  = '6' THEN GOTO GOT6_1;\n      IF SUBSTR(URHAND,1,1) \u00ac= '8' THEN GOTO H1T;\n      IF SUBSTR(URHAND,2,1)  = '7' THEN GOTO GOT87;\n      IF SUBSTR(URHAND,2,1) \u00ac= '6' THEN GOTO H1T;\n   GOT86:\n      IF SUBSTR(URHAND,3,1)  = '7' THEN GOTO PAY2X;\n                                   ELSE GOTO H1T;\n   GOT6_1:\n      IF SUBSTR(URHAND,2,1)  = '8' THEN GOTO GOT86;\n      IF SUBSTR(URHAND,2,1) \u00ac= '7' THEN GOTO H1T;\n   GOT67:\n      IF SUBSTR(URHAND,3,1)  = '8' THEN GOTO PAY2X;\n                                   ELSE GOTO H1T;\n   GOT87:\n      IF SUBSTR(URHAND,3,1)  = '6' THEN GOTO PAY2X;\n                                   ELSE GOTO H1T;\n   TRY6OR8:\n      IF SUBSTR(URHAND,2,1)  = '8' THEN GOTO GOT87;\n      IF SUBSTR(URHAND,2,1)  = '6' THEN GOTO GOT67;\n                                   ELSE GOTO H1T;\n0  COUNTEM: PROC;\n   RECOUNT:\n      IF NEWCARD = '2' THEN GOTO ADD2;\n      IF NEWCARD = '4' THEN GOTO ADD4;\n      IF NEWCARD = '6' THEN GOTO ADD6;\n      IF NEWCARD = '8' THEN GOTO ADD8;\n      IF NEWCARD = 'T' THEN GOTO ADD10;\n      IF NEWCARD = 'J' THEN GOTO ADD10;\n      IF NEWCARD = 'Q' THEN GOTO ADD10;\n      IF NEWCARD = 'K' THEN GOTO ADD10;\n      IF NEWCARD = '3' THEN GOTO ADD3;\n      IF NEWCARD = '5' THEN GOTO ADD5;\n      IF NEWCARD = '7' THEN GOTO ADD7;\n      IF NEWCARD = '9' THEN GOTO ADD9;\n      IF NEWCARD = 'A' THEN DO; ACES = 'A';\n                                HANDIS = HANDIS + 1.0;\n                                ACECT = ACECT + 1;\n                                IF ACECT > 7 THEN CALL MIXER;\n                                RETURN; END;\n      W='OOPS, deck has been dropped.';\n      CALL HTPUT(W);\n      CALL MIXER;\n      NEWCARD = SUBSTR(DECK,C,1);\n      C = C + 1;\n      GOTO RECOUNT;\n   ADD9: HANDIS = HANDIS + 2.0;\n   ADD7: HANDIS = HANDIS + 2.0;\n   ADD5: HANDIS = HANDIS + 2.0;\n   ADD3: HANDIS = HANDIS + 1.0;  GOTO ADD2;\n   ADD10: HANDIS = HANDIS + 2.0;\n   ADD8: HANDIS = HANDIS + 2.0;\n   ADD6: HANDIS = HANDIS + 2.0;\n   ADD4: HANDIS = HANDIS + 2.0;\n   ADD2: HANDIS = HANDIS + 2.0;\n      RETURN;\n   END COUNTEM;\n0  MIXER: PROC;\n      CTS = 0;\n      DECK = '';\n      CDS = 0;\n   MIXERS:\n      CALL RAND(R1,R3);\n      C = FLOOR(18 * R3 + 1.5);\n      IF CTS(C) > 7 THEN GOTO MIXERS;\n      IF C > 16 THEN GOTO MIXERS;\n      IF C <  4 THEN GOTO MIXERS;\n      CTS(C) = CTS(C) + 1;\n      DECK = DECK || SUBSTR(CARD,C,1);\n      CDS = CDS + 1;\n      IF CDS < 104 THEN GOTO MIXERS;\n      C = 1;\n      W='S H U F F L E';\n      CALL HTPUT(W);\n      ACECT = 0;\n      RETURN;\n   END MIXER;\n0  HTPUT: PROC(S);\n      DCL S CHAR(120) VAR;\n      DCL RC FIXED BIN(15);\n      DCL TPUT ENTRY(CHAR(120) VAR, FIXED BIN(15));\n   WR:\n      CALL TPUT(S,RC);\n      IF RC = 8 THEN GOTO WR;\n      IF RC\u00ac= 0 THEN CALL PLIDUMP;\n      RETURN;\n   END HTPUT;\n0  HTGET: PROC(Y);\n      DCL Y CHAR(120) VAR;\n      DCL RC FIXED BIN(15);\n      DCL TGET ENTRY (CHAR(120) VAR, FIXED BIN(15));\n   READ1T:\n      Y = ' ';\n      CALL TGET(Y,RC);\n      IF RC = 8 THEN GOTO READ1T;\n      IF RC\u00ac= 0 THEN CALL PLIDUMP;\n      I = LENGTH(Y);\n      RETURN;\n   END HTGET;\n END BLAKJAK;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLACKJK$": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10B\\x00(\\x00(\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:42:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "SYSPAJA"}, "text": "//BLACKJK  JOB (........),'INSTALL -BLACKJACK-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=1\n/*JOBPARM L=8\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*             T S O     B L A C K J A C K     G A M E               *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//* BEFORE EXECUTION OF THIS JOB, ADJUST :                            *\n//*            1. THE PL/I LIBRARIES DS-NAMES BELOW (PL/I COMPILER,   *\n//*               RELEASE 5 HAS BEEN USED),                           *\n//*            2. THE \"->.SOURCE.FILE3\" DS-NAME,                      *\n//*            3. THE \"->.TARGET.LINKLIB\" IN THE PROCEDURE \"BLACKJKP\" *\n//*               (MOVED BY LAST STEP OF THIS JOB).                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//CMP     EXEC PGM=IEL0AA,PARM='NODECK,OBJECT'\n//STEPLIB   DD DSN=->.YOUR.PLIV5.PLICOMP,DISP=SHR\n//SYSLIN    DD UNIT=VIO,SPACE=(3200,(25,100)),\n//             DSN=&&LOADSET,DISP=(,PASS,DELETE)\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1),,CONTIG),\n//             DSN=&&SYSUT1,DCB=BLKSIZE=1024\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE3(BLACKJK),DISP=SHR\n//AS1     EXEC PAJ3AS2,MBR=BLACKJK1\n//AS2     EXEC PAJ3AS2,MBR=BLACKJK2\n//AS3     EXEC PAJ3AS2,MBR=BLACKJK3\n//LNK     EXEC PAJILKL,OPT=',MAP,LET'\n//SYSLIB    DD DSN=->.YOUR.PLIV5.PLIBASE,DISP=SHR\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN)\n  NAME    BLACKJK(R)\n/*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJPROC\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=FB AND LRECL=80, ELSE            *\n//*       \"PAJPROV\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=VB AND LRECL=255.                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//TCL     EXEC PAJPROC,MBR=BLACKJKP,\n//             DSP='->.TARGET.TSO.CLISTS',DSS='->.SOURCE.FILE3'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLACKJKP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x12\\x14\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:14:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=BLACKJK\n./     NUMBER  NEW1=100,INCR=100\nPROC     0\n/*********************************************************************/\n/*                   B L A C K J A C K     G A M E                   */\n/*********************************************************************/\n         CONTROL NOMSG\n         FREE F(PLIDUMP FT06F001)\n         ALLOC F(FT06F001) DA(*)\n         ALLOC F(PLIDUMP) DUMMY\n         CALL '->.TARGET.LINKLIB(BLACKJK)'\n         FREE F(PLIDUMP FT06F001)\n         CONTROL MSG\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLACKJK1": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x08\\x7f\\x00\\x92\\x08\\x7f\\x12@\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-27T00:00:00", "modifydate": "1992-03-27T12:40:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "RAND     TITLE 'PSEUDO-RANDOM NUMBER GENERATOR ...'\nRAND     START 0\n         SPACE 1\n        $DEFREG\n         SPACE 1\n         USING *,R15               ESTABLISH ADDRESSABILITY\n         STM   R2,R5,28(R13)       SAVE SOME OF THE REGISTERS\n         LM    R2,R3,0(R1)         LOAD ADDRESSES OF VARIABLES PASSED\n         L     R5,=A(7*7*7*7*7)    COMPUTE NEXT INTEGER\n         M     R4,0(R2)            RANDOM NUMBER WITH\n         D     R4,=A(X'7FFFFFFF')  X(I+1)=AX(I)  (MOD P)\n         ST    R4,0(R2)            RETURN RANDOMED\n         SRL   R4,7                COMPUTE\n         A     R4,=A(X'40000000')  NEXT REAL\n         ST    R4,0(R3)            RANDOM NUMBER\n         LM    R2,R5,28(R13)       RE-ESTABLISH USER REGISTERS\n         BR    R14                 GO BACK\n         DROP  R15\n         SPACE 1\n        LTORG\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLACKJK2": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t/\\x00\\x92\\t/\\x11X\\x01\\xdc\\x01\\xdc\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1992-04-01T11:58:00", "lines": 476, "newlines": 476, "modlines": 0, "user": "SYSPAJA"}, "text": "TGTP     TITLE 'PL/1 PROGRAMS INTERFACE TO TGET/TPUT.'\nTGET     START 0\n         SPACE 1\n        PRINT  OFF\n         MACRO\n&NAME   #CALL  &W,&N\n&NAME    L     R15,=A(&W)\n         BASR  R14,R15\n         NOP   &N*4\n         MEND\n        PRINT  ON\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                     *\n* INTERFACE TO TGET/TPUT SVC FOR PL/1 PROGRAMS.                       *\n* ---------------------------------------------                       *\n*        A WXTRN FOR THE SYMBOL PLIBASE IS USED TO CONTROL THE METHOD *\n*        OF ACCESS TO VARYING CHARACTER STRING VARIABLES.             *\n*        IF THE EXTERNAL REFERENCE WAS RESOLVED BY THE LINKAGE        *\n*        EDITOR, ITS VALUE WILL NON-ZERO. USING THIS TECHNIQUE        *\n*        THE SUBROUTINE TO FUNCTION PROPERLY WITH CODE GENERATED BY   *\n*        EITHER THE F-LEVEL OR OPTIMIZING/CHECKOUT COMPILER.          *\n*                                                                     *\n* THIS MODULE HAS TWO ENTRY POINTS :                                  *\n* ----------------------------------                                  *\n*        TGET - OBTAINS A MESSAGE FROM THE TERMINAL.                  *\n*              INVOCATION : CALL TGET(VSTR,RC);                       *\n*                  WHERE 'VSTR' IS A VARYING CHARACTER STRING USED TO *\n*                       RECEIVE THE INPUT MESSAGE,                    *\n*                  AND 'RC' IS A HALFWORD BINARY VARIABLE. IT WILL    *\n*                       CONTAIN THE TGET RETURN CODE.                 *\n*              ENTRY DECLARATION :                                    *\n*                  DCL TGET ENTRY(CHAR(X) VAR,FIXED BIN(15));         *\n*                  THE MAXIMUM LENGTH OF 'VSTR' IS USED AS THE TGET   *\n*                  BUFFER LENGTH; AFTER THE EXECUTION OF TGET,        *\n*                  LENGTH(VSTR)=NUMBER OF CHARACTERS READ.            *\n*                                                                     *\n*        TPUT - WRITES A MESSAGE TO THE TERMINAL.                     *\n*              INVOCATION : CALL TPUT(VSTR,RC);                       *\n*                  WHERE 'VSTR' IS A VARYING CHARACTER STRING         *\n*                       CONTAINING THE MSG,                           *\n*                  AND 'RC' IS A FIXED BIN(15) VARIABLE, TO RECEIVE   *\n*                       THE INPUT RETURN CODE.                        *\n*              ENTRY DECLARATION :                                    *\n*                  DCL TPUT ENTRY(CHAR(X) VAR,FIXED BIN(15));         *\n*                  THE CURRENT LENGTH OF 'VSTR' IS USED AS THE TPUT   *\n*                  BUFFER LENGTH.                                     *\n*                                                                     *\n* FULL SCREEN ADDED BY : MOINIL P.A.                                  *\n* ---------------------- COMPUTING CENTRE                             *\n*                        J.R.C. - ISPRA ESTABLISHMENT                 *\n*                        21020 ISPRA (VA), ITALY                      *\n*                                                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         ENTRY TPUT\n         WXTRN PLISTART\n         SPACE 1\n        $DEFREG\n         EJECT\n*------- 'TGET' ENTRY POINT\n         SPACE 1\n         USING *,R15\nDTGL     EQU   TGTP-*\n         MVI   SWENT+3,DTGL\n         B     SWENT\n         DROP  R15\n         SPACE 1\n*------- 'TPUT' ENTRY POINT\n         SPACE 1\n         USING *,R15\nDTPL     EQU   TGTP-*\nTPUT     MVI   SWENT+3,DTPL\n         DROP  R15\n         SPACE 1\n*------- COMMON ENTRY\n         SPACE 1\nSWENT    LA    R15,*-*(R15)\nTGTP    $XENT  BASE=R10,ID=TGETTPUT\n         LM    R8,R9,0(R1)\n         TM    FLAGS,INVTSO\n         BO    NOTTSO\n         OC    ATSO,ATSO\n         BNZ   KNOWN\n        EXTRACT ATSO,'S',FIELDS=(TSO)\n         L     R2,ATSO\n         TM    0(R2),X'80'\n         BZ    NOTTSO              WE ARE'NT IN TSO\n        GTSIZE ,\n         LTR   R15,R15\n         BNZ   ERGTSZ              ERROR RETURN CODE\n         LTR   R15,R0\n         BZ    NDTERM              NOT DISPLAY TERMINAL\n         CL    R1,=F'80'           TEST LINE LENGTH\n         BE    TSTSC\n         CL    R1,=F'132'\n         BNE   NDTERM\n         CL    R0,=F'27'           TEST NUMBER OF LINES\n         BNE   NDTERM\n         B     SETSCT\nTSTSC    CL    R0,=F'24'\n         BE    SETSCT\n         CL    R0,=F'32'\n         BE    SETSCT\n         CL    R0,=F'43'\n         BNE   NDTERM\nSETSCT   OI    FLAGS,SCTERM\n         B     NDTERM+L'NDTERM\nNDTERM   NI    FLAGS,255-SCTERM\n         USING DSDV,R8\nKNOWN    L     R3,CMPSW            SET COMPILER SWITCH\n         LA    R1,0(R10)\n         BCTR  R1,0\n         CLI   0(R1),DTGL          SWENT+3 = DTGL (TGET) ?\n         BE    TGTPR               YES, SO TGET\n         CLI   0(R1),DTPL          SWENT+3 = DTPL (TPUT) ?\n         BE    TPTPR               YES, SO TPUT\n         XR    R15,R15             NONE OF THOSE, SO SKIP\n         B     FLUSH\n         EJECT\n*------- 'TGET' PROCESS\n         SPACE 1\nTGTPR    XR    R0,R0\n         ICM   R0,B'0011',SDVMSL\n         L     R2,SDVADDR          ADDRESS OF STRING (OR LENGTH FIELD)\n         LR    R1,R2\n         LTR   R3,R3               COMPILER SWITCH ?\n         BZ    *+L'*+4             BRANCH IF F-LEVEL COMPILER\n         LA    R1,2(R1)            POINT TO DATA, NOT LENGTH FIELD\n         TM    FLAGS,SCTERM\n         BZ    TGTPR1\n        #CALL  DOFS,0\n         B     TGTPR2\nTGTPR1   ICM   R1,B'1000',=X'80'   FLAGS-TGET, WAIT, EDIT\n        TGET   (1),(0),R\nTGTPR2   LTR   R3,R3               COMPILER SWITCH ?\n         BZ    *+L'*+8             BRANCH IF F-LEVEL COMPILER\n         STCM  R1,B'0011',0(R2)    LENGTH TO STRING PREFIX\n         B     RET\n         STCM  R1,B'0011',SDVCSL   SET CURRENT STRING LENGTH IN SDV\n         B     RET\n         EJECT\n*------- 'TPUT' PROCESS\n         SPACE 1\nTPTPR    XR    R0,R0\n         L     R1,SDVADDR          STRING ADDRESS\n         LTR   R3,R3               COMPILER SWITCH ?\n         BZ    *+L'*+12            BRANCH IF F-LEVEL COMPILER\n         ICM   R0,B'0011',0(R1)    SET CURRENT LENGTH FOR TPUT\n         LA    R1,2(R1)            POINT TO DATA\n         B     *+L'*+4\n         ICM   R0,B'0011',SDVCSL   BUFFER SIZE=CURRENT STRING LENGTH\n         TM    FLAGS,SCTERM\n         BZ    TPTPR1\n        #CALL  DOFS,1\n         B     RET\nTPTPR1   ICM   R1,B'1000',=X'00'   FLAGS-TPUT,WAIT,NOHOLD,NOBREAK,EDIT\n        TPUT   (1),(0),R\n         B     RET\n         EJECT\n*------- ERRORS RETURN\n         SPACE 1\nNOTTSO  TPUT   TSEMSG,L'TSEMSG\n         B     QUIT\nERGTSZ   CVD   R15,DWRD\n         MVC   DWRD(4),=XL4'40202120'\n         ED    DWRD(4),DWRD+L'DWRD-2\n         MVC   GTSMSG+20(3),DWRD+1\n        TPUT   GTSMSG,L'GTSMSG\nQUIT     LA    R15,16\n         SPACE 1\n*------- COMMON RETURN\n         SPACE 1\n         DROP  R8,R10\nRET      STCM  R15,B'0011',0(R9)   SET RETURN CODE\nFLUSH   $XRET  CC=(R15)\n         EJECT\n*------- CONSTANTS AND WORK-AREAS\n         SPACE 1\nDWRD     DC    D'0'\nCMPSW    DC    A(PLISTART)         COMPILER SWITCH\nATSO     DC    A(*-*)\nFLAGS    DC    XL1'0'              GENERAL FUNCTIONS\nINVTSO   EQU   X'80'                    INVALID (TSO ENVIRONMENT)\nSCTERM   EQU   X'40'                    SCREEN TERMINAL\n         SPACE 1\nTSEMSG   DC    C' => not outside TSO environment | Bye-Bye'\nGTSMSG   DC    C' => \"GTSIZE\" - RC =     - Exit -'\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n        LTORG\n         EJECT\n*- - - - D O     F U L L     S C R E E N - - - - - - - - - - - - - - -*\n         SPACE 1\nDOFS    $XENT  BASE=R8,DT=NO\n         XR    R10,R10\n         LR    R5,R0\n         LR    R6,R1\n         LR    R7,R10\n         ICM   R7,B'0011',2(R14)   CALL FS NUMBER\n         TM    SWFSW,SW1ST\n         BO    DOFSW\n        @FSI   ,\n         LTR   R15,R15\n         BNZ   DOFIMM\n         OI    OPTFS,FSSKIP\n        @FS    ,,,MF=(E,FSPARMI)\n         LTR   R15,R15\n         BNZ   DOFERR\n         OI    SWFSW,SW1ST\nDOFSW    CL    R7,=A(DOFSMX)\n         BNL   DOFVER\n         B     DOFSV(R7)\nDOFSV    B     DOFS0               TGET\n         B     DOFS1               TPUT\nDOFSMX   EQU   *-DOFSV\nDOFS0    BAS   R7,DOFSTM\n         LTR   R5,R2\n         BNP   *+L'*+14\n         BCT   R5,*+L'*+6\n         MVC   0(*-*,R6),REPLY          << EXECUTED >>\n         EX    R5,*-6\n         L     R5,4(R13)\n         ST    R2,24(R5)           AT RETURN R1 = REPLY LENGTH\n         NI    SWFSW,255-SWNMS\n         B     DOFSX\nDOFS1    MVC   WLNE,BLANKS\n         BCT   R5,*+L'*+6\n         MVC   WLNE(*-*),0(R6)          << EXECUTED >>\n         EX    R5,*-6\n         CLC   WLNE(12),=CL12'You started '\n         BNE   *+L'*+8\n         NI    SWFSW,255-SWHMS\n         B     DOFS1A\n         TM    SWFSW,SWNMS\n         BO    DOFS1A+L'DOFS1A\nDOFS1A   BAS   R7,DOFSRZ\n         CLC   WLNE(12),=CL12'Do you need '\n         BE    DOFS1B\n         CLC   WLNE(6),=CL6'Place '\n         BE    DOFS1B\n         CLC   WLNE(11),=CL11'Your play, '\n         BNE   *+L'*+8\n         OI    SWFSW,SWHMS\n         B     DOFS1B+L'DOFS1B\n         CLC   WLNE(7),=CL7'Enter Y'\n         BE    DOFS1B\n         CLC   WLNE(13),=CL13'S H U F F L E'\n         BE    DOFS1B+L'DOFS1B\n         CLC   WLNE(8),=CL8'W H A T '\n         BE    DOFS1C\n         CLC   WLNE(10),=CL10'You can''t '\n         BE    DOFS1C\n         CLC   WLNE(9),=CL9'At least '\n         BE    DOFS1C\n         CLC   WLNE(6),=CL6'Wrong '\n         BE    DOFS1C\n         CLC   WLNE(17),=CL17'Sorry, you can''t '\n         BE    DOFS1C\n         CLC   WLNE(10),=CL10'You don''t '\n         BE    DOFS1C\n         CLC   WLNE(11),=CL11'That''s all '\n         BE    DOFS1E\n         BAS   R7,DOFSRW\n         B     DOFS1D              +0\n         L     R1,=A(FSGI)         +4\n         MVC   0(23,R1),=CL23'Just enter to continue.'\n         BAS   R7,DOFSTM\n         B     DOFS1A\nDOFS1B   NI    SWFSW,255-SWHMS\n         L     R1,=A(FSMS)\n         B     DOFS1D\nDOFS1C   L     R1,=A(FSGI)\n         LA    R2,L'FSGI\n         B     DOFS1D+L'DOFS1D\nDOFS1D   LA    R2,L'WLNE\n         BCT   R2,*+L'*+6\n         MVC   0(*-*,R1),WLNE           << EXECUTED >>\n         EX    R2,*-6\n         OI    SWFSW,SWNMS\n         B     DOFSX\nDOFS1E   L     R1,=A(FSGI)\n         MVC   0(L'FSGI,R1),WLNE\n         BAS   R7,DOFSTM\n         XR    R0,R0\n         LR    R1,R0\n         B     DOFXQR\n         SPACE 1\nDOFSRW   L     R0,=A(FSGL)                   R7 = LINK REGISTER\n         L     R1,=A(FSGS)\n         CLC   0(L'WLNE,R1),BLANKS\n         BER   R7\n         LA    R1,L'WLNE(R1)\n         CLR   R1,R0\n         BL    *-14\n         B     4(R7)\nDOFSRZ   TM    SWFSW,SWHMS                   R7 = LINK REGISTER\n         BO    DOFSRZ1\n         L     R0,=A(FSGL)\n         L     R1,=A(FSGS)\n         MVC   0(L'WLNE,R1),BLANKS\n         LA    R1,L'WLNE(R1)\n         CLR   R1,R0\n         BL    *-12\nDOFSRZ1  L     R1,=A(FSMS)\n         MVC   0(L'FSMS,R1),BLANKS\n         L     R1,=A(FSGI)\n         MVC   0(L'FSGI,R1),BLANKS\n         BR    R7\nDOFSTM   MVC   REPLY,BLANKS                  R7 = LINK REGISTER\n         NI    OPTFS,255-FSSKIP\n        @FS    ,,,MF=(E,FSPARMA)\n         LTR   R15,R15\n         BNZ   DOFERR\n         LTR   R1,R1\n         BZ    DOFSTM1\n         CLI   0(R1),X'F3'         PF-KEY 3?\n         BE    *+L'*+8\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3)?\n         BNE   DOFSTM1\n         MVI   REPLY,C'Q'\n         LA    R2,1\n         BR    R7\nDOFSTM1  XR    R2,R2\n        @FSR   ,\n         LTR   R15,R15\n         BZR   R7\n         LTR   R1,R1\n         BNPR  R7\n         LA    R2,REPLY\nDOFSTM2  MVC   0(1,R2),3(R15)\n         CLI   0(R2),C' '\n         BNE   DOFSTM3\n         LA    R15,1(R15)\n         BCT   R1,DOFSTM2\n         BR    R7\nDOFSTM3  LR    R0,R2\n         LA    R2,1(R2)\n         LA    R15,1(R15)\n         BCT   R1,*+L'*+4\n         B     *+L'*+10\n         MVC   0(1,R2),3(R15)\n         B     DOFSTM3+L'DOFSTM3\n         SR    R2,R0\n         BR    R7\n         SPACE 1\nDOFIMM   CVD   R15,DBLW\n         MVC   ERRMSI+19(4),=XL4'40202120'\n         ED    ERRMSI+19(4),DBLW+L'DBLW-2\n        TPUT   ERRMSI,L'ERRMSI\n         B     DOFERX\nDOFERR   CVD   R15,DBLW\n         MVC   ERRMSE+29(4),=XL4'40202120'\n         ED    ERRMSE+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,ERRMSE+21\n         SRL   R0,4\n         STC   R0,ERRMSE+20\n         NC    ERRMSE+20(2),=XL2'0F0F'\n         TR    ERRMSE+20(2),HEXTB\n         LA    R0,L'ERRMSE\n         LA    R1,ERRMSE\n         B     DOFXQR\nDOFVER   SRL   R7,2\n         CVD   R7,DBLW\n         MVC   DOFMSE+21(6),=XL6'402020202120'\n         ED    DOFMSE+21(6),DBLW+L'DBLW-3\n         LA    R0,L'DOFMSE\n         LA    R1,DOFMSE\nDOFXQR   STM   R0,R1,ERRMSLA\n         MVI   OPTFS,FSEXIT\n        @FS    ,MF=(E,FSPARMX)\n         LR    R10,R15             RETAIN RETURN CODE\n         LM    R0,R1,ERRMSLA\n         LTR   R1,R1\n         BZ    NOMSGE\n        TPUT   (1),(0)\nNOMSGE   LTR   R10,R10\n         BZ    DOFERX\n         CVD   R10,DBLW\n         MVC   ERRMSE+29(4),=XL4'40202120'\n         ED    ERRMSE+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,ERRMSE+21\n         SRL   R0,4\n         STC   R0,ERRMSE+20\n         NC    ERRMSE+20(2),=XL2'0F0F'\n         TR    ERRMSE+20(2),HEXTB\n        TPUT   ERRMSE,L'ERRMSE\nDOFERX   LA    R10,16\nDOFSX   $XRET  CC=(R10)\n         EJECT\n*------- CONSTANTS AND WORK-AREAS\n         SPACE 1\nDBLW     DC    D'0'\nERRMSLA  DC    2F'0'\nFSPARMI  DC    A(OPTFS)\n         DC    A(INITR)\n         DC    A(*+4+X'80000000')\n         DC    A(INITRL)\nFSPARMA  DC    A(OPTFS)\n         DC    A(FSCR)\n         DC    A(*+4+X'80000000')\n         DC    A(FSCRL)\nFSPARMX  DC    A(OPTFS+X'80000000')\nWLNE     DC    CL80' '\nREPLY    DC    CL80' '\nBLANKS   DC    CL80' '\nHEXTB    DC    CL16'0123456789ABCDEF'\nSWFSW    DC    XL1'0'              SCREEN FUNCTIONS\nSW1ST    EQU   X'80'\nSWNMS    EQU   X'08'\nSWHMS    EQU   X'04'\nOPTFS   @FSO   ,\n         SPACE 1\nERRMSI   DC    C' => \"FSRTNI\" - RC =     - Exit -'\nERRMSE   DC    C' => \"FSRTN\" - OPT =    , RC =     - Exit -'\nDOFMSE   DC    C' => \"DOFS\" - Number =       - Exit -'\n         SPACE 1\n        LTORG  ,                   LITERALS\n         SPACE 1\n         DROP  R8                  END OF LOCAL ADDRESSABILITY\n         EJECT\n*- - - - S C R E E N     D A T A - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nINITR   $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nINITRL   EQU   *-INITR\n         SPACE 1\nFSCR    $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,INT),MF=L\n        $FS    SBA=(1,24),MF=L\n        $FS    TEXT='B   L   A   C   K   J   A   C   K',MF=L\n        $FS    SBA=(2,1),SF=(PROT,INT),RA=(2,80,-),MF=L\n        $FS    SF=(PROT),MF=L\nFSGS    $FS    TEXT=(' ',80),MF=L       1 -> (3,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6\n        $FS    TEXT=(' ',80),MF=L       7\n        $FS    TEXT=(' ',80),MF=L       8\n        $FS    TEXT=(' ',80),MF=L       9\n        $FS    TEXT=(' ',80),MF=L      10\n        $FS    TEXT=(' ',80),MF=L      11\n        $FS    TEXT=(' ',80),MF=L      12\n        $FS    TEXT=(' ',80),MF=L      13\n        $FS    TEXT=(' ',80),MF=L      14\n        $FS    TEXT=(' ',80),MF=L      15\n        $FS    TEXT=(' ',80),MF=L      16\n        $FS    TEXT=(' ',80),MF=L      17\nFSGL    $FS    TEXT=(' ',80),MF=L      18 -> (20,1)\n        $FS    SF=(PROT,INT),RA=(21,80,=),MF=L\n        $FS    SF=(PROT),MF=L\nFSMS    $FS    TEXT=(' ',80),MF=L         -> (22,1)\n        $FS    SF=(PROT,INT),MF=L         -> (23,1)\n        $FS    TEXT='===>',MF=L\n        $FS    SF=NORMAL,MF=L\n        $FS    SBA=(23,20),SF=(PROT),MF=L\nFSGI    $FS    TEXT=(' ',50),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nFSCRL    EQU   *-FSCR\n         EJECT\n*------- DSECTS\n         SPACE 1\nDSDV     DSECT\nSDVADDR  DS    F\nSDVMSL   DS    H\nSDVCSL   DS    H\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLACKJK3": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t\\x1f\\x00\\x92\\t\\x1f\\x11V\\x00<\\x00<\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-31T00:00:00", "modifydate": "1992-03-31T11:56:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "SYSPAJA"}, "text": "CHCK     TITLE 'CHECK FIELD FOR ONLY DIGIT(S) ...'\nCHECK    START 0\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                     *\n* NOTE : A WXTRN FOR THE SYMBOL PLIBASE IS USED TO CONTROL THE METHOD *\n* ------ OF ACCESS TO VARYING CHARACTER STRING VARIABLES.             *\n*        IF THE EXTERNAL REFERENCE WAS RESOLVED BY THE LINKAGE        *\n*        EDITOR, ITS VALUE WILL NON-ZERO. USING THIS TECHNIQUE        *\n*        THE SUBROUTINE TO FUNCTION PROPERLY WITH CODE GENERATED BY   *\n*        EITHER THE F-LEVEL OR OPTIMIZING/CHECKOUT COMPILER.          *\n*                                                                     *\n* AUTHOR : MOINIL P.A.                                                *\n* -------- COMPUTING CENTRE                                           *\n*          J.R.C. - ISPRA ESTABLISHMENT                               *\n*          21020 ISPRA (VA), ITALY                                    *\n*                                                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         WXTRN PLISTART\n         SPACE 1\n        $DEFREG\n         EJECT\n         USING *,R15               ESTABLISH ADDRESSABILITY\n         STM   R0,R4,20(R13)       SAVE SOME OF THE REGISTERS\n         LM    R2,R3,0(R1)         LOAD ADDRESSES OF VARIABLES PASSED\n         USING DSDV,R2\n         L     R4,CMPSW            SET COMPILER SWITCH\n         XR    R0,R0\n         L     R1,SDVADDR          STRING ADDRESS\n         LTR   R4,R4               COMPILER SWITCH ?\n         BZ    *+L'*+12            BRANCH IF F-LEVEL COMPILER\n         ICM   R0,B'0011',0(R1)    SET CURRENT LENGTH FOR CHECK\n         LA    R1,2(R1)            POINT TO DATA\n         B     *+L'*+4\n         ICM   R0,B'0011',SDVCSL   BUFFER SIZE=CURRENT STRING LENGTH\n         LTR   R0,R0\n         BNP   QUIT\nLOOP     CLI   0(R1),C'0'\n         BL    NULL\n         CLI   0(R1),C'9'\n         BH    NULL\n         LA    R1,1(R1)\n         BCT   R0,LOOP\n         B     QUIT\nNULL     XC    0(2,R3),0(R3)       ERROR, NULLIFY STRING LENGTH\nQUIT     LM    R0,R4,20(R13)       RE-ESTABLISH USER REGISTERS\n         BR    R14                 GO BACK\n         DROP  R2,R15\n         SPACE 1\nCMPSW    DC    A(PLISTART)         COMPILER SWITCH\n         SPACE 1\n*------- DSECTS\n         SPACE 1\nDSDV     DSECT\nSDVADDR  DS    F\nSDVMSL   DS    H\nSDVCSL   DS    H\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DECIDER": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x129\\x04Y\\x04Y\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:39:00", "lines": 1113, "newlines": 1113, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=DECIDER\n./     NUMBER  NEW1=100,INCR=100\nPROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/* CBT ORIGIN : EXTRACTED FROM CBT TAPE 91 MAR, FILE 134.        (PM)*/\n/* PRE-REQUISITE : ERASE COMMAND                                     */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n  CONTROL MAIN NOMSG\n  ATTN DO\n    EXIT\n    END\n  ERROR DO\n    WRITE LAST COMPLETION CODE WAS &LASTCC\n    RETURN\n    END\n  ERASE\n  WRITE\n  WRITE YOU ARE ABOUT TO BE ASKED SOME QUESTIONS ABOUT YOURSELF.\n  WRITE YOU MUST ANSWER THEM AS TRUTHFULLY AS POSSIBLE FOR THE TEST\n  WRITE TO BE OF ANY VALUE.\n  WRITE\n  WRITE BEFORE WE BEGIN THE TEST, PLEASE BE KIND ENOUGH TO\n  WRITENR ENTER YOUR CHRISTIAN NAME:\n  READ THNAME\n  WRITE THANK YOU, &THNAME; NOW WE WILL PROCEED. PLEASE HIT ENTER.\n  WRITENR ****\n  READ\n  SET &POINTS=100000000\n  ERASE\n  WRITE WHAT MOST CLOSELY DESCRIBES YOUR WORK:\n  WRITE\n  WRITE  1.  LAYABOUT\n  WRITE  2.  CLERK\n  WRITE  3.  LABOURER\n  WRITE  4.  ENTREPENEUR\n  WRITE  5.  JACK OF ALL TRADES\n  WRITE  6.  POLITICIAN\n  WRITE  7.  ARTISAN\n  WRITE  8.  PROFESSIONAL\n  WRITE  9.  MUSICIAN\n  WRITE  10. ARTIST\n  WRITE  11. ACADEMIC\n  WRITE  12. OTHER\n  WRITE\n  WRITENR ===>\n  READ WORK\n  IF &WORK EQ 1  THEN SET &POINTS=&POINTS+00020301\n  ELSE IF &WORK EQ 2  THEN SET &POINTS=&POINTS+00010103\n  ELSE IF &WORK EQ 3  THEN SET &POINTS=&POINTS+02010002\n  ELSE IF &WORK EQ 4  THEN SET &POINTS=&POINTS+02020002\n  ELSE IF &WORK EQ 5  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &WORK EQ 6  THEN SET &POINTS=&POINTS+01020002\n  ELSE IF &WORK EQ 7  THEN SET &POINTS=&POINTS+03010201\n  ELSE IF &WORK EQ 8  THEN SET &POINTS=&POINTS+01020102\n  ELSE IF &WORK EQ 9  THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &WORK EQ 10 THEN SET &POINTS=&POINTS+02020300\n  ELSE IF &WORK EQ 11 THEN SET &POINTS=&POINTS+02010002\n  ERASE\n  WRITE WHAT MOST CLOSELY DESCRIBES YOUR RELIGION:\n  WRITE\n  WRITE  1. MUSLIM\n  WRITE  2. CHRISTIAN\n  WRITE  3. HINDU\n  WRITE  4. TAOIST\n  WRITE  5. CONFUCIAN\n  WRITE  6. BUDDHIST\n  WRITE  7. AGNOSTIC\n  WRITE  8. ATHEIST\n  WRITE  9. OTHER\n  WRITE\n  WRITENR ===>\n  READ RELIGION\n  IF &RELIGION EQ 1  THEN SET &POINTS=&POINTS+02040100\n  ELSE IF &RELIGION EQ 2  THEN SET &POINTS=&POINTS+02010104\n  ELSE IF &RELIGION EQ 3  THEN SET &POINTS=&POINTS+02030201\n  ELSE IF &RELIGION EQ 4  THEN SET &POINTS=&POINTS+03010102\n  ELSE IF &RELIGION EQ 5  THEN SET &POINTS=&POINTS+02000103\n  ELSE IF &RELIGION EQ 6  THEN SET &POINTS=&POINTS+02010104\n  ELSE IF &RELIGION EQ 7  THEN SET &POINTS=&POINTS+01020101\n  ELSE IF &RELIGION EQ 8  THEN SET &POINTS=&POINTS+02020002\n  ERASE\n  WRITE WHAT MOST CLOSELY DESCRIBES YOUR BEST SKILL:\n  WRITE\n  WRITE  1.  SPORT\n  WRITE  2.  MUSIC\n  WRITE  3.  ART (PAINTING)\n  WRITE  4.  WRITING\n  WRITE  5.  READING\n  WRITE  6.  FLIRTING\n  WRITE  7.  SCREWING\n  WRITE  8.  WATCHING TELEVISION\n  WRITE  9.  EATING\n  WRITE  10. COOKING\n  WRITE  11. MATHEMATICS\n  WRITE  12. ACCOUNTANCY\n  WRITE  13. MEDITATION\n  WRITE  14. PROCRASTINATION\n  WRITE  15. RECKLESSNESS\n  WRITE  16. OTHER\n  WRITE\n  WRITENR ===>\n  READ SKILL\n  IF &SKILL EQ 1  THEN SET &POINTS=&POINTS+04010001\n  ELSE IF &SKILL EQ 2  THEN SET &POINTS=&POINTS+01010300\n  ELSE IF &SKILL EQ 3  THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &SKILL EQ 4  THEN SET &POINTS=&POINTS+02010302\n  ELSE IF &SKILL EQ 5  THEN SET &POINTS=&POINTS+01000203\n  ELSE IF &SKILL EQ 6  THEN SET &POINTS=&POINTS+02030002\n  ELSE IF &SKILL EQ 7  THEN SET &POINTS=&POINTS+03040100\n  ELSE IF &SKILL EQ 8  THEN SET &POINTS=&POINTS+00000204\n  ELSE IF &SKILL EQ 9  THEN SET &POINTS=&POINTS+03000001\n  ELSE IF &SKILL EQ 10 THEN SET &POINTS=&POINTS+02020200\n  ELSE IF &SKILL EQ 11 THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &SKILL EQ 12 THEN SET &POINTS=&POINTS+00010004\n  ELSE IF &SKILL EQ 13 THEN SET &POINTS=&POINTS+02010301\n  ELSE IF &SKILL EQ 14 THEN SET &POINTS=&POINTS+00010203\n  ELSE IF &SKILL EQ 15 THEN SET &POINTS=&POINTS+03030000\n  ERASE\n  WRITE WHAT MOST CLOSELY DESCRIBES YOUR FAVOURITE COLOUR:\n  WRITE\n  WRITE  1.  RED\n  WRITE  2.  GREEN\n  WRITE  3.  BLUE\n  WRITE  4.  BROWN\n  WRITE  5.  YELLOW\n  WRITE  6.  PINK\n  WRITE  7.  PURPLE\n  WRITE  8.  WHITE\n  WRITE  9.  BLACK\n  WRITE  10. ORANGE\n  WRITE  11. GREY\n  WRITE  12. OLIVE\n  WRITE  13. AQUAMARINE\n  WRITE  14. OTHER\n  WRITE\n  WRITENR ===>\n  READ COLOUR\n  IF &COLOUR EQ 1  THEN SET &POINTS=&POINTS+04030101\n  ELSE IF &COLOUR EQ 2  THEN SET &POINTS=&POINTS+01000203\n  ELSE IF &COLOUR EQ 3  THEN SET &POINTS=&POINTS+00010304\n  ELSE IF &COLOUR EQ 4  THEN SET &POINTS=&POINTS+01020002\n  ELSE IF &COLOUR EQ 5  THEN SET &POINTS=&POINTS+02020001\n  ELSE IF &COLOUR EQ 6  THEN SET &POINTS=&POINTS+02020002\n  ELSE IF &COLOUR EQ 7  THEN SET &POINTS=&POINTS+01020101\n  ELSE IF &COLOUR EQ 8  THEN SET &POINTS=&POINTS+01000102\n  ELSE IF &COLOUR EQ 9  THEN SET &POINTS=&POINTS+01020400\n  ELSE IF &COLOUR EQ 10 THEN SET &POINTS=&POINTS+01020102\n  ELSE IF &COLOUR EQ 11 THEN SET &POINTS=&POINTS+01000003\n  ELSE IF &COLOUR EQ 12 THEN SET &POINTS=&POINTS+01010101\n  ELSE IF &COLOUR EQ 13 THEN SET &POINTS=&POINTS+02020200\n  ERASE\n  WRITE WHICH OF THE FOLLOWING IS MOST TRUE OF YOU?:\n  WRITE\n  WRITE  1.  GOOD MEMORY FOR NUMBERS\n  WRITE  2.  GOOD MEMORY FOR FACES\n  WRITE  3.  GOOD MEMORY FOR STORIES\n  WRITE  4.  GOOD MEMORY FOR NICE EVENTS OF MY LIFE\n  WRITE  5.  GOOD MEMORY FOR UGLY EVENTS OF MY LIFE\n  WRITE  6.  GOOD MEMORY FOR ALL EVENTS OF MY LIFE\n  WRITE  7.  GOOD MEMORY FOR FUTURE DATES\n  WRITE  8.  GOOD MEMORY FOR TELEVISION ADS\n  WRITE  9.  GOOD MEMORY FOR PEOPLES NAMES\n  WRITE  10. GOOD MEMORY FOR MUSIC\n  WRITE  11. GOOD MEMORY FOR TRIVIA\n  WRITE  12. OTHER\n  WRITE\n  WRITENR ===>\n  READ MEMORY\n  IF &MEMORY EQ  1 THEN SET &POINTS=&POINTS+01010003\n  ELSE IF &MEMORY EQ  2 THEN SET &POINTS=&POINTS+02010300\n  ELSE IF &MEMORY EQ  3 THEN SET &POINTS=&POINTS+01010301\n  ELSE IF &MEMORY EQ  4 THEN SET &POINTS=&POINTS+02030102\n  ELSE IF &MEMORY EQ  5 THEN SET &POINTS=&POINTS+00010400\n  ELSE IF &MEMORY EQ  6 THEN SET &POINTS=&POINTS+02020202\n  ELSE IF &MEMORY EQ  7 THEN SET &POINTS=&POINTS+01000004\n  ELSE IF &MEMORY EQ  8 THEN SET &POINTS=&POINTS+00020103\n  ELSE IF &MEMORY EQ  9 THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &MEMORY EQ 10 THEN SET &POINTS=&POINTS+02020300\n  ELSE IF &MEMORY EQ 11 THEN SET &POINTS=&POINTS+00000002\n  ERASE\n  WRITE WHICH OF THE FOLLOWING IS MOST TRUE OF YOU?:\n  WRITE\n  WRITE  1.  GOOD AT MANIPULATING NUMBERS\n  WRITE  2.  GOOD AT SPATIAL MANIPULATION\n  WRITE  3.  GOOD AT VISUALISING OR IMAGINING THINGS\n  WRITE  4.  GOOD AT SINGING OR PLAYING MUSIC FROM MEMORY\n  WRITE  5.  GOOD AT WRITING COMPUTER PROGRAMS\n  WRITE  6.  GOOD AT BALANCING YOUR BODY ON ONE LEG\n  WRITE  7.  GOOD AT TALKING TO PEOPLE ON THE TELEPHONE\n  WRITE  8.  GOOD AT MOLLIFYING A FRIEND\"S ANGER\n  WRITE  9.  GOOD AT ADDRESSING A MEETING OR A SMALL GROUP OF PEOPLE\n  WRITE  10. GOOD AT READING AND COMPREHENSION\n  WRITE  11. OTHER\n  WRITE\n  WRITENR ===>\n  READ SKILL2\n  IF &SKILL2 EQ 1  THEN SET &POINTS=&POINTS+03000003\n  ELSE IF &SKILL2 EQ 2  THEN SET &POINTS=&POINTS+03000102\n  ELSE IF &SKILL2 EQ 3  THEN SET &POINTS=&POINTS+03010302\n  ELSE IF &SKILL2 EQ 4  THEN SET &POINTS=&POINTS+02020201\n  ELSE IF &SKILL2 EQ 5  THEN SET &POINTS=&POINTS+02020002\n  ELSE IF &SKILL2 EQ 6  THEN SET &POINTS=&POINTS+03000001\n  ELSE IF &SKILL2 EQ 7  THEN SET &POINTS=&POINTS+02020102\n  ELSE IF &SKILL2 EQ 8  THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &SKILL2 EQ 9  THEN SET &POINTS=&POINTS+03010003\n  ELSE IF &SKILL2 EQ 10 THEN SET &POINTS=&POINTS+02020002\n  ERASE\n  WRITE WHICH OF THE FOLLOWING BOOKS WOULD YOU PREFER:\n  WRITE\n  WRITE  1.  WAR AND PEACE\n  WRITE  2.  THE FRENCH LIEUTENANT\"S WOMAN\n  WRITE  3.  CASTLE OF CROSSED DESTINIES\n  WRITE  4.  TESS OF THE D\"URBERVILLES\n  WRITE  5.  UNDER THE VOLCANO\n  WRITE  6.  HISTORY OF THE LOCOMOTIVE\n  WRITE  7.  GUIDE TO MAINTAINING YOUR PET\n  WRITE  8.  THE PSYCHOLOGY OF ASSERTION IN THE WORKPLACE\n  WRITE  9.  ARISTOTLE\"S METAPHYSICS\n  WRITE  10. 1001 WAYS TO INVEST YOUR MONEY\n  WRITE  11. THE PENGUIN LEUNIG\n  WRITE  12. FIRST BOOK OF THE TIMES CROSSWORD PUZZLES\n  WRITE  13. DECAMERON\n  WRITE  14. RISE AND FALL OF THE ROMAN EMPIRE\n  WRITE  15. OTHER\n  WRITE\n  WRITENR ===>\n  READ BOOK\n  IF &BOOK EQ 1  THEN SET &POINTS=&POINTS+03030300\n  ELSE IF &BOOK EQ 2  THEN SET &POINTS=&POINTS+01030100\n  ELSE IF &BOOK EQ 3  THEN SET &POINTS=&POINTS+00020400\n  ELSE IF &BOOK EQ 4  THEN SET &POINTS=&POINTS+01030101\n  ELSE IF &BOOK EQ 5  THEN SET &POINTS=&POINTS+03030200\n  ELSE IF &BOOK EQ 6  THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &BOOK EQ 7  THEN SET &POINTS=&POINTS+00010103\n  ELSE IF &BOOK EQ 8  THEN SET &POINTS=&POINTS+00020100\n  ELSE IF &BOOK EQ 9  THEN SET &POINTS=&POINTS+03000203\n  ELSE IF &BOOK EQ 10 THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &BOOK EQ 11 THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &BOOK EQ 12 THEN SET &POINTS=&POINTS+02000001\n  ELSE IF &BOOK EQ 13 THEN SET &POINTS=&POINTS+02020000\n  ELSE IF &BOOK EQ 14 THEN SET &POINTS=&POINTS+02020201\n  ERASE\n  WRITE WHICH OF THE FOLLOWING PEOPLE DO YOU MOST ADMIRE:\n  WRITE\n  WRITE  1.  CHARLIE CHAPLIN\n  WRITE  2.  JOSEPH STALIN\n  WRITE  3.  LYNDON B. JOHNSON\n  WRITE  4.  ENRICO CARUSO\n  WRITE  5.  JOHANN SEBASTIAN BACH\n  WRITE  6.  RONALD BIGGS\n  WRITE  7.  FRIEDRICH NIETZCHE\n  WRITE  8.  MARILYN MONROE\n  WRITE  9.  RONALD MACDONALD\n  WRITE  10. LEE HARVEY OSWALD\n  WRITE  11. CLEOPATRA\n  WRITE  12. LANG HANCOCK\n  WRITE  13. EVONNE CAWLEY\n  WRITE  14. CHE GUEVARA\n  WRITE  15. JIMMY CARTER\n  WRITE  16. OTHER\n  WRITE\n  WRITENR ===>\n  READ PERSON\n  IF &PERSON EQ  1 THEN SET &POINTS=&POINTS+01020300\n  ELSE IF &PERSON EQ  2 THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &PERSON EQ  3 THEN SET &POINTS=&POINTS+01010003\n  ELSE IF &PERSON EQ  4 THEN SET &POINTS=&POINTS+02030200\n  ELSE IF &PERSON EQ  5 THEN SET &POINTS=&POINTS+03030101\n  ELSE IF &PERSON EQ  6 THEN SET &POINTS=&POINTS+04010000\n  ELSE IF &PERSON EQ  7 THEN SET &POINTS=&POINTS+03030200\n  ELSE IF &PERSON EQ  8 THEN SET &POINTS=&POINTS+01030001\n  ELSE IF &PERSON EQ  9 THEN SET &POINTS=&POINTS+01000003\n  ELSE IF &PERSON EQ 10 THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &PERSON EQ 11 THEN SET &POINTS=&POINTS+03000202\n  ELSE IF &PERSON EQ 12 THEN SET &POINTS=&POINTS+02000001\n  ELSE IF &PERSON EQ 13 THEN SET &POINTS=&POINTS+03010001\n  ELSE IF &PERSON EQ 14 THEN SET &POINTS=&POINTS+03030100\n  ELSE IF &PERSON EQ 15 THEN SET &POINTS=&POINTS+00000003\n  ERASE\n  WRITE WHICH OF THE FOLLOWING MOST CLOSELY DESCRIBES YOUR SOCIAL LIFE:\n  WRITE\n  WRITE  1.  NO FRIENDS\n  WRITE  2.  FEW FRIENDS I SEE OCCASIONALLY\n  WRITE  3.  FEW FRIENDS I SEE OFTEN\n  WRITE  4.  MANY FRIENDS I SEE OCCASIONALLY\n  WRITE  5.  MANY FRIENDS, SOME OF WHOM I SEE OFTEN\n  WRITE  6.  MANY FRIENDS I SEE OFTEN\n  WRITE  7.  JUST MY LOVER\n  WRITE  8.  JUST MY SPOUSE\n  WRITE  9.  JUST MY SPOUSE AND CHILDREN AND PET\n  WRITE  10. MY PARENTS\n  WRITE  11. LIVE WITH MY PARENTS AND HAVE NO FRIENDS\n  WRITE  12. OTHER\n  WRITE\n  WRITENR ===>\n  READ FRIENDS\n  IF &FRIENDS EQ 1  THEN SET &POINTS=&POINTS+00010101\n  ELSE IF &FRIENDS EQ 2  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &FRIENDS EQ 3  THEN SET &POINTS=&POINTS+02020302\n  ELSE IF &FRIENDS EQ 4  THEN SET &POINTS=&POINTS+01010001\n  ELSE IF &FRIENDS EQ 5  THEN SET &POINTS=&POINTS+01020201\n  ELSE IF &FRIENDS EQ 6  THEN SET &POINTS=&POINTS+02010002\n  ELSE IF &FRIENDS EQ 7  THEN SET &POINTS=&POINTS+02020100\n  ELSE IF &FRIENDS EQ 8  THEN SET &POINTS=&POINTS+02010101\n  ELSE IF &FRIENDS EQ 9  THEN SET &POINTS=&POINTS+01010003\n  ELSE IF &FRIENDS EQ 10 THEN SET &POINTS=&POINTS+01010202\n  ELSE IF &FRIENDS EQ 11 THEN SET &POINTS=&POINTS+00000102\n  ERASE\n  WRITE WHICH OF THE FOLLOWING MOST APPEALS TO YOUR PALATE:\n  WRITE\n  WRITE  1.  STEW OR CASSEROLE\n  WRITE  2.  CHICKEN CONSOMME\n  WRITE  3.  FISH AND CHIPS\n  WRITE  4.  FILET MIGNON\n  WRITE  5.  SPAGHETTI MARINARA\n  WRITE  6.  PORK SATAY\n  WRITE  7.  BEEF CURRY\n  WRITE  8.  MOUSSAKA\n  WRITE  9.  PORK CHOPS\n  WRITE  10. LAMB ON A SPIT\n  WRITE  11. ROAST BEEF\n  WRITE  12. RATATOUILLE\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ FOOD\n  IF &FOOD EQ 1  THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &FOOD EQ 2  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &FOOD EQ 3  THEN SET &POINTS=&POINTS+02000002\n  ELSE IF &FOOD EQ 4  THEN SET &POINTS=&POINTS+02010000\n  ELSE IF &FOOD EQ 5  THEN SET &POINTS=&POINTS+02020102\n  ELSE IF &FOOD EQ 6  THEN SET &POINTS=&POINTS+02030001\n  ELSE IF &FOOD EQ 7  THEN SET &POINTS=&POINTS+02020000\n  ELSE IF &FOOD EQ 8  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &FOOD EQ 9  THEN SET &POINTS=&POINTS+01000003\n  ELSE IF &FOOD EQ 10 THEN SET &POINTS=&POINTS+04010102\n  ELSE IF &FOOD EQ 11 THEN SET &POINTS=&POINTS+02010001\n  ELSE IF &FOOD EQ 12 THEN SET &POINTS=&POINTS+00010201\n  ERASE\n  WRITE WHICH OF THE FOLLOWING DRINKS MOST APPEALS TO YOU:\n  WRITE\n  WRITE  1.  BLOODY MARY\n  WRITE  2.  GIN AND TONIC\n  WRITE  3.  BRANDY ALEXANDER\n  WRITE  4.  LAGER\n  WRITE  5.  DARK ALE\n  WRITE  6.  NEAT WHISKY\n  WRITE  7.  WHISKY AND WATER\n  WRITE  8.  NEAT VODKA\n  WRITE  9.  COCA-COLA\n  WRITE  10. MINERAL WATER\n  WRITE  11. FLAVOURED MILK\n  WRITE  12. FRUIT JUICE\n  WRITE  13. HEAVY RED WINE\n  WRITE  14. LIGHT RED WINE\n  WRITE  15. DRY WHITE WINE\n  WRITE  16. SWEET WHITE WINE\n  WRITE  17. OTHER\n  WRITE\n  WRITENR ===>\n  READ DRINK\n  IF &DRINK EQ 1  THEN SET &POINTS=&POINTS+03020100\n  ELSE IF &DRINK EQ 2  THEN SET &POINTS=&POINTS+01010002\n  ELSE IF &DRINK EQ 3  THEN SET &POINTS=&POINTS+02000201\n  ELSE IF &DRINK EQ 4  THEN SET &POINTS=&POINTS+02020003\n  ELSE IF &DRINK EQ 5  THEN SET &POINTS=&POINTS+02020302\n  ELSE IF &DRINK EQ 6  THEN SET &POINTS=&POINTS+03010001\n  ELSE IF &DRINK EQ 7  THEN SET &POINTS=&POINTS+03020102\n  ELSE IF &DRINK EQ 8  THEN SET &POINTS=&POINTS+03010202\n  ELSE IF &DRINK EQ 9  THEN SET &POINTS=&POINTS+01000003\n  ELSE IF &DRINK EQ 10 THEN SET &POINTS=&POINTS+01010103\n  ELSE IF &DRINK EQ 11 THEN SET &POINTS=&POINTS+02000003\n  ELSE IF &DRINK EQ 12 THEN SET &POINTS=&POINTS+02030102\n  ELSE IF &DRINK EQ 13 THEN SET &POINTS=&POINTS+03030300\n  ELSE IF &DRINK EQ 14 THEN SET &POINTS=&POINTS+03020102\n  ELSE IF &DRINK EQ 15 THEN SET &POINTS=&POINTS+01010003\n  ELSE IF &DRINK EQ 16 THEN SET &POINTS=&POINTS+00010002\n  ERASE\n  WRITE WHICH OF THE FOLLOWING MUSIC MOST APPEALS TO YOU:\n  WRITE\n  WRITE  1.  PICTURES AT AN EXHIBITION (MUSSORGSKY)\n  WRITE  2.  FIFTH SYMPHONY (BEETHOVEN)\n  WRITE  3.  FOUR SEASONS (VIVALDI)\n  WRITE  4.  SWAN LAKE (TCHAIKOVSKY)\n  WRITE  5.  SYMPHONY NR. 40 (MOZART)\n  WRITE  6.  NOCTURNES (CHOPIN)\n  WRITE  7.  RHAPSODY IN BLUE (GEORGE GERSHWIN)\n  WRITE  8.  ORGAN CONCERTO (POULENC)\n  WRITE  9.  BRANDENBURG CONCERTI (J.S.BACH)\n  WRITE  10. CELLO CONCERTO (DVORAK)\n  WRITE  11. PIANO CONCERTO NR. 2 (RACHMANINOV)\n  WRITE  12. PIANO CONCERTO NR. 3 (BEETHOVEN)\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ MUSIC\n  IF &MUSIC EQ 1  THEN SET &POINTS=&POINTS+02030400\n  ELSE IF &MUSIC EQ 2  THEN SET &POINTS=&POINTS+04020400\n  ELSE IF &MUSIC EQ 3  THEN SET &POINTS=&POINTS+02020103\n  ELSE IF &MUSIC EQ 4  THEN SET &POINTS=&POINTS+01030201\n  ELSE IF &MUSIC EQ 5  THEN SET &POINTS=&POINTS+03020302\n  ELSE IF &MUSIC EQ 6  THEN SET &POINTS=&POINTS+01030200\n  ELSE IF &MUSIC EQ 7  THEN SET &POINTS=&POINTS+02020102\n  ELSE IF &MUSIC EQ 8  THEN SET &POINTS=&POINTS+03010102\n  ELSE IF &MUSIC EQ 9  THEN SET &POINTS=&POINTS+03020003\n  ELSE IF &MUSIC EQ 10 THEN SET &POINTS=&POINTS+02010003\n  ELSE IF &MUSIC EQ 11 THEN SET &POINTS=&POINTS+02030201\n  ELSE IF &MUSIC EQ 12 THEN SET &POINTS=&POINTS+03020201\n  ERASE\n  WRITE WHICH OF THE FOLLOWING MUSICIANS MOST APPEALS TO YOU:\n  WRITE\n  WRITE  1.  GEORGE BENSON\n  WRITE  2.  THE EAGLES\n  WRITE  3.  PINK FLOYD\n  WRITE  4.  JOAN ARMATRADING\n  WRITE  5.  MEN AT WORK\n  WRITE  6.  THE ROLLING STONES\n  WRITE  7.  JEANNIE LEWIS\n  WRITE  8.  THE BEACHBOYS\n  WRITE  9.  PLANXTY\n  WRITE  10. BLACK SABBATH\n  WRITE  11. JOAN BAEZ\n  WRITE  12. BOB DYLAN\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ MUSIC2\n  IF &MUSIC2 EQ 1  THEN SET &POINTS=&POINTS+00000002\n  ELSE IF &MUSIC2 EQ 2  THEN SET &POINTS=&POINTS+00010001\n  ELSE IF &MUSIC2 EQ 3  THEN SET &POINTS=&POINTS+02000103\n  ELSE IF &MUSIC2 EQ 4  THEN SET &POINTS=&POINTS+02020101\n  ELSE IF &MUSIC2 EQ 5  THEN SET &POINTS=&POINTS+02010101\n  ELSE IF &MUSIC2 EQ 6  THEN SET &POINTS=&POINTS+01010103\n  ELSE IF &MUSIC2 EQ 7  THEN SET &POINTS=&POINTS+02020001\n  ELSE IF &MUSIC2 EQ 8  THEN SET &POINTS=&POINTS+00000002\n  ELSE IF &MUSIC2 EQ 9  THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &MUSIC2 EQ 10 THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &MUSIC2 EQ 11 THEN SET &POINTS=&POINTS+01020101\n  ELSE IF &MUSIC2 EQ 12 THEN SET &POINTS=&POINTS+01010201\n  ERASE\n  WRITE WHICH OF THE FOLLOWING MOST APPEALS TO YOU:\n  WRITE\n  WRITE  1.  A PICNIC IN THE COUNTRY\n  WRITE  2.  A WALK IN THE WILDERNESS IN BAD WEATHER\n  WRITE  3.  SWIMMING ON SANDY BEACH\n  WRITE  4.  SUNNING ON A SANDY BEACH\n  WRITE  5.  ATTENDING A CONCERT\n  WRITE  6.  DINING OUT\n  WRITE  7.  RUGGED UP BY THE FIRESIDE ON A RAINY DAY\n  WRITE  8.  GOING TO A MOVIE\n  WRITE  9.  GOING TO A NIGHTSPOT\n  WRITE  10. GOING TO A PARTY\n  WRITE  11. WORKING AROUND THE HOUSE\n  WRITE  12. DRIVING A CAR ON THE OPEN ROAD\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ ENJOY\n  IF &ENJOY EQ 1  THEN SET &POINTS=&POINTS+00010003\n  ELSE IF &ENJOY EQ 2  THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &ENJOY EQ 3  THEN SET &POINTS=&POINTS+01010203\n  ELSE IF &ENJOY EQ 4  THEN SET &POINTS=&POINTS+01020201\n  ELSE IF &ENJOY EQ 5  THEN SET &POINTS=&POINTS+02020102\n  ELSE IF &ENJOY EQ 6  THEN SET &POINTS=&POINTS+01020101\n  ELSE IF &ENJOY EQ 7  THEN SET &POINTS=&POINTS+00010103\n  ELSE IF &ENJOY EQ 8  THEN SET &POINTS=&POINTS+01010101\n  ELSE IF &ENJOY EQ 9  THEN SET &POINTS=&POINTS+02000002\n  ELSE IF &ENJOY EQ 10 THEN SET &POINTS=&POINTS+02010003\n  ELSE IF &ENJOY EQ 11 THEN SET &POINTS=&POINTS+02000004\n  ELSE IF &ENJOY EQ 12 THEN SET &POINTS=&POINTS+03010002\n  ERASE\n  WRITE WHICH OF THE FOLLOWING SPORTS DO YOU LIKE TO WATCH:\n  WRITE\n  WRITE  1.  CRICKET\n  WRITE  2.  AUSTRALIAN RULES FOOTBALL\n  WRITE  3.  SOCCER\n  WRITE  4.  GOLF\n  WRITE  5.  TENNIS\n  WRITE  6.  CAR RACING\n  WRITE  7.  MOTOR BIKE RACING\n  WRITE  8.  BASKETBALL\n  WRITE  9.  DIVING\n  WRITE  10. GYMNASTICS\n  WRITE  11. FIELD EVENTS\n  WRITE  12. BOXING\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ SPORT\n  IF &SPORT EQ 1  THEN SET &POINTS=&POINTS+00010003\n  ELSE IF &SPORT EQ 2  THEN SET &POINTS=&POINTS+02010001\n  ELSE IF &SPORT EQ 3  THEN SET &POINTS=&POINTS+02020101\n  ELSE IF &SPORT EQ 4  THEN SET &POINTS=&POINTS+00000103\n  ELSE IF &SPORT EQ 5  THEN SET &POINTS=&POINTS+02030101\n  ELSE IF &SPORT EQ 6  THEN SET &POINTS=&POINTS+03020100\n  ELSE IF &SPORT EQ 7  THEN SET &POINTS=&POINTS+03030000\n  ELSE IF &SPORT EQ 8  THEN SET &POINTS=&POINTS+01010001\n  ELSE IF &SPORT EQ 9  THEN SET &POINTS=&POINTS+02000201\n  ELSE IF &SPORT EQ 10 THEN SET &POINTS=&POINTS+01000301\n  ELSE IF &SPORT EQ 11 THEN SET &POINTS=&POINTS+01000001\n  ELSE IF &SPORT EQ 12 THEN SET &POINTS=&POINTS+03020002\n  ERASE\n  WRITE WHICH OF THE FOLLOWING PLACES WOULD YOU LIKE TO VISIT:\n  WRITE\n  WRITE  1.  FIJI\n  WRITE  2.  SINGAPORE\n  WRITE  3.  LOS ANGELES\n  WRITE  4.  NEW YORK\n  WRITE  5.  LONDON\n  WRITE  6.  PARIS\n  WRITE  7.  FLORENCE\n  WRITE  8.  PRAGUE\n  WRITE  9.  AGEAN ISLANDS\n  WRITE  10. MOROCCO\n  WRITE  11. MOZAMBIQUE\n  WRITE  12. EL SALVADOR\n  WRITE  13. THE GOLD COAST\n  WRITE  14. OTHER\n  WRITE\n  WRITENR ===>\n  READ PLACE\n  IF &PLACE EQ 1  THEN SET &POINTS=&POINTS+00010003\n  ELSE IF &PLACE EQ 2  THEN SET &POINTS=&POINTS+00010002\n  ELSE IF &PLACE EQ 3  THEN SET &POINTS=&POINTS+01010002\n  ELSE IF &PLACE EQ 4  THEN SET &POINTS=&POINTS+02000101\n  ELSE IF &PLACE EQ 5  THEN SET &POINTS=&POINTS+01010001\n  ELSE IF &PLACE EQ 6  THEN SET &POINTS=&POINTS+02020101\n  ELSE IF &PLACE EQ 7  THEN SET &POINTS=&POINTS+02030100\n  ELSE IF &PLACE EQ 8  THEN SET &POINTS=&POINTS+03010300\n  ELSE IF &PLACE EQ 9  THEN SET &POINTS=&POINTS+00000103\n  ELSE IF &PLACE EQ 10 THEN SET &POINTS=&POINTS+03020200\n  ELSE IF &PLACE EQ 11 THEN SET &POINTS=&POINTS+02020300\n  ELSE IF &PLACE EQ 12 THEN SET &POINTS=&POINTS+02040100\n  ELSE IF &PLACE EQ 13 THEN SET &POINTS=&POINTS+00010003\n  ERASE\n  WRITE WHICH OF THE FOLLOWING WOULD YOU DO WITH A $10,000 GIFT:\n  WRITE\n  WRITE  1.  PUT IT IN A FIXED TERM DEPOSIT\n  WRITE  2.  PUT IN YOUR SAVINGS ACCOUNT\n  WRITE  3.  SPEND IT ON A STEREO, VIDEO RECORDER ETC.\n  WRITE  4.  SPEND IT ON HOUSE IMPROVMENTS\n  WRITE  5.  USE IT FOR A HOUSE OR LAND DEPOSIT\n  WRITE  6.  PUT IT TOWARDS BUYING A NEW CAR\n  WRITE  7.  SPEND IT ON A SELECTION OF FINE WINES\n  WRITE  8.  SPEND IT ON FURNITURE\n  WRITE  9.  GIVE MOST OF IT TO NEEDY FAMILY OR FRIENDS\n  WRITE  10. INVEST IT IN GOLD, SILVER ETC.\n  WRITE  11. PUT IT TOWARDS STARTING A SMALL BUSINESS\n  WRITE  12. GAMBLE IT ON HORSE RACING\n  WRITE  13. OTHER\n  WRITE\n  WRITENR ===>\n  READ MONEY\n  IF &MONEY EQ 1  THEN SET &POINTS=&POINTS+01000002\n  ELSE IF &MONEY EQ 2  THEN SET &POINTS=&POINTS+00000100\n  ELSE IF &MONEY EQ 3  THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &MONEY EQ 4  THEN SET &POINTS=&POINTS+01000002\n  ELSE IF &MONEY EQ 5  THEN SET &POINTS=&POINTS+02000102\n  ELSE IF &MONEY EQ 6  THEN SET &POINTS=&POINTS+02020002\n  ELSE IF &MONEY EQ 7  THEN SET &POINTS=&POINTS+00030300\n  ELSE IF &MONEY EQ 8  THEN SET &POINTS=&POINTS+01000001\n  ELSE IF &MONEY EQ 9  THEN SET &POINTS=&POINTS+02030300\n  ELSE IF &MONEY EQ 10 THEN SET &POINTS=&POINTS+02010101\n  ELSE IF &MONEY EQ 11 THEN SET &POINTS=&POINTS+03010002\n  ELSE IF &MONEY EQ 12 THEN SET &POINTS=&POINTS+01030100\n  ERASE\n  WRITE WHICH OF THE FOLLOWING DESCRIBES YOUR WORST VICE:\n  WRITE\n  WRITE  1.  TOBACCO\n  WRITE  2.  MARIJUANA\n  WRITE  3.  ALCOHOL\n  WRITE  4.  PATHOLOGICAL PROMISCUITY\n  WRITE  5.  TELEVISION\n  WRITE  6.  SLEEPING\n  WRITE  7.  LAZINESS\n  WRITE  8.  FOOD\n  WRITE  9.  INANE PUZZLES\n  WRITE  10. FITNESS FANATICISM\n  WRITE  11. SWEETS\n  WRITE  12. GAMBLING\n  WRITE  13. NARCOTICS\n  WRITE  14. OTHER\n  WRITE\n  WRITENR ===>\n  READ VICE\n  IF &VICE EQ 1  THEN SET &POINTS=&POINTS+00020200\n  ELSE IF &VICE EQ 2  THEN SET &POINTS=&POINTS+01000301\n  ELSE IF &VICE EQ 3  THEN SET &POINTS=&POINTS+00030202\n  ELSE IF &VICE EQ 4  THEN SET &POINTS=&POINTS+02020000\n  ELSE IF &VICE EQ 5  THEN SET &POINTS=&POINTS+00000002\n  ELSE IF &VICE EQ 6  THEN SET &POINTS=&POINTS+00010201\n  ELSE IF &VICE EQ 7  THEN SET &POINTS=&POINTS+00000101\n  ELSE IF &VICE EQ 8  THEN SET &POINTS=&POINTS+02020102\n  ELSE IF &VICE EQ 9  THEN SET &POINTS=&POINTS+00000001\n  ELSE IF &VICE EQ 10 THEN SET &POINTS=&POINTS+02010002\n  ELSE IF &VICE EQ 11 THEN SET &POINTS=&POINTS+00010001\n  ELSE IF &VICE EQ 12 THEN SET &POINTS=&POINTS+02020000\n  ELSE IF &VICE EQ 13 THEN SET &POINTS=&POINTS+00010000\n  ERASE\n  WRITE WHICH OF THE FOLLOWING DO YOU LIKE LEAST:\n  WRITE\n  WRITE  1.  COLD SHOWERS\n  WRITE  2.  HOT BATHS\n  WRITE  3.  SWELTERING SUMMER NIGHTS\n  WRITE  4.  COLD, WET AND WINDY WINTER NIGHTS\n  WRITE  5.  TELEVISION ADS\n  WRITE  6.  LOUD NOISES\n  WRITE  7.  PETS\n  WRITE  8.  CHILDREN\n  WRITE  9.  CROWDED PLACES\n  WRITE  10. FLYING IN A PLANE\n  WRITE  11. GREAT HEIGHTS\n  WRITE  12. WASHING DISHES\n  WRITE  13. OFFICE JOBS\n  WRITE  14. POVERTY\n  WRITE  15. OTHER\n  WRITE\n  WRITENR ===>\n  READ HATE\n  IF &HATE EQ 1  THEN SET &POINTS=&POINTS+00010200\n  ELSE IF &HATE EQ 2  THEN SET &POINTS=&POINTS+01010200\n  ELSE IF &HATE EQ 3  THEN SET &POINTS=&POINTS+01020201\n  ELSE IF &HATE EQ 4  THEN SET &POINTS=&POINTS+00020101\n  ELSE IF &HATE EQ 5  THEN SET &POINTS=&POINTS+02020200\n  ELSE IF &HATE EQ 6  THEN SET &POINTS=&POINTS+00010300\n  ELSE IF &HATE EQ 7  THEN SET &POINTS=&POINTS+02000202\n  ELSE IF &HATE EQ 8  THEN SET &POINTS=&POINTS+00000202\n  ELSE IF &HATE EQ 9  THEN SET &POINTS=&POINTS+00010300\n  ELSE IF &HATE EQ 10 THEN SET &POINTS=&POINTS+00010100\n  ELSE IF &HATE EQ 11 THEN SET &POINTS=&POINTS+00010100\n  ELSE IF &HATE EQ 12 THEN SET &POINTS=&POINTS+03020100\n  ELSE IF &HATE EQ 13 THEN SET &POINTS=&POINTS+01030300\n  ELSE IF &HATE EQ 14 THEN SET &POINTS=&POINTS+00010003\n  ERASE\n  WRITE WHICH OF THE FOLLOWING ANIMALS DO YOU LIKE MOST:\n  WRITE\n  WRITE  1.  DOG\n  WRITE  2.  CAT\n  WRITE  3.  LION\n  WRITE  4.  ELEPHANT\n  WRITE  5.  PANTHER\n  WRITE  6.  GIRAFFE\n  WRITE  7.  PARROT\n  WRITE  8.  BUDGERIGAR\n  WRITE  9.  HIPPOPOTAMUS\n  WRITE  10. ANTELOPE\n  WRITE  11. KANGAROO\n  WRITE  12. KOALA BEAR\n  WRITE  13. BLACK BEAR\n  WRITE  14. DOLPHIN\n  WRITE  15. HAMSTER\n  WRITE  16. OTHER\n  WRITE\n  WRITENR ===>\n  READ ANIMAL\n  IF &ANIMAL EQ 1  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &ANIMAL EQ 2  THEN SET &POINTS=&POINTS+01010102\n  ELSE IF &ANIMAL EQ 3  THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &ANIMAL EQ 4  THEN SET &POINTS=&POINTS+02010200\n  ELSE IF &ANIMAL EQ 5  THEN SET &POINTS=&POINTS+01020200\n  ELSE IF &ANIMAL EQ 6  THEN SET &POINTS=&POINTS+02010000\n  ELSE IF &ANIMAL EQ 7  THEN SET &POINTS=&POINTS+01010001\n  ELSE IF &ANIMAL EQ 8  THEN SET &POINTS=&POINTS+01000003\n  ELSE IF &ANIMAL EQ 9  THEN SET &POINTS=&POINTS+02010000\n  ELSE IF &ANIMAL EQ 10 THEN SET &POINTS=&POINTS+01030101\n  ELSE IF &ANIMAL EQ 11 THEN SET &POINTS=&POINTS+01020001\n  ELSE IF &ANIMAL EQ 12 THEN SET &POINTS=&POINTS+01020101\n  ELSE IF &ANIMAL EQ 13 THEN SET &POINTS=&POINTS+02020000\n  ELSE IF &ANIMAL EQ 14 THEN SET &POINTS=&POINTS+01020401\n  ELSE IF &ANIMAL EQ 15 THEN SET &POINTS=&POINTS+01000001\n  SET &SS=&SUBSTR(2:3,&POINTS)\n  SET &CC=&SUBSTR(4:5,&POINTS)\n  SET &MM=&SUBSTR(6:7,&POINTS)\n  SET &PP=&SUBSTR(8:9,&POINTS)\n  SET &SS=(1000*&SS)/388\n  SET &CC=(1000*&CC)/332\n  SET &MM=(1000*&MM)/267\n  SET &PP=(1000*&PP)/362\n  SET &TT=&SS+&CC+&MM+&PP\n  IF &TT GT 0 THEN DO\n    SET &SS=(100*&SS)/&TT\n    SET &CC=(100*&CC)/&TT\n    SET &MM=(100*&MM)/&TT\n    SET &PP=100-&SS-&CC-&MM\n    END\n  ELSE DO\n    WRITE INVALID RESULTS\n    EXIT\n    END\n  SET &VAL1=&SS\n  SET &VAL2=&CC\n  SET &VAL3=&MM\n  SET &VAL4=&PP\n  SET &TYP1=SS\n  SET &TYP2=CC\n  SET &TYP3=MM\n  SET &TYP4=PP\nLOOP:+\n  SET &TEMP=&STR()\n  IF &VAL2 GT &VAL1 THEN DO\n    SET &TEMP=&VAL2\n    SET &VAL2=&VAL1\n    SET &VAL1=&TEMP\n    SET &TIMP=&TYP2\n    SET &TYP2=&TYP1\n    SET &TYP1=&TIMP\n    END\n  IF &VAL3 GT &VAL2 THEN DO\n    SET &TEMP=&VAL3\n    SET &VAL3=&VAL2\n    SET &VAL2=&TEMP\n    SET &TIMP=&TYP3\n    SET &TYP3=&TYP2\n    SET &TYP2=&TIMP\n    END\n  IF &VAL4 GT &VAL3 THEN DO\n    SET &TEMP=&VAL4\n    SET &VAL4=&VAL3\n    SET &VAL3=&TEMP\n    SET &TIMP=&TYP4\n    SET &TYP4=&TYP3\n    SET &TYP3=&TIMP\n    END\n  IF &TEMP NE THEN GOTO LOOP\n  SET &LABEL=&TYP1&TYP2&TYP3&TYP4\n  SET &DIF1=(&VAL1-&VAL2+2)/5\n  SET &DIF2=(&VAL2-&VAL3+2)/5\n  SET &DIF3=(&VAL3-&VAL4+2)/5\n  SET &WSS=BLOOD\n  SET &WCC=CHOLER\n  SET &WMM=MELANCHOLY\n  SET &WPP=PHLEGM\n  SET &TAP1=&&W&TYP1\n  SET &TAP2=&&W&TYP2\n  SET &TAP3=&&W&TYP3\n  SET &TAP4=&&W&TYP4\n  ERASE\n  WRITE\n  WRITE NOW THAT THE QUESTIONS ARE FINISHED, YOUR PSYCHE AND\n  WRITE PHYSIOGNOMY ARE BEING ANALYSED ACCORDING TO THE\n  WRITE DOCTRINE OF THE FOUR HUMOURS FIRST POSTULATED BY\n  WRITE GALEN IN THE DAYS OF THE ANCIENT GREEKS.\n  WRITE HIT ENTER TO OBTAIN YOUR RESULTS....\n  WRITENR ****\n  READ\n  ERASE\n  WRITE\n  WRITE PROPORTIONS OF YOUR FOUR HUMOURS ARE, FROM HIGH TO LOW:\n  WRITE\n  WRITE &TAP1: &VAL1.%; &TAP2: &VAL2.%; &TAP3: &VAL3.%; &TAP4: &VAL4.%;\n  WRITE\n  WRITE ADJUSTED DIFFERENCES ARE: &DIF1 &DIF2 &DIF3\n  WRITE\n  WRITE WELL &THNAME, YOU TEND TOWARDS THE FOLLOWING QUALITIES....\n  WRITE\n  IF &DIF1 EQ 0 AND &DIF2 EQ 0 AND &DIF3 EQ 0 THEN GOTO SPECIAL1\n  ELSE IF &DIF1 EQ 0 AND &DIF2 EQ 0 AND &DIF3 NE 0 THEN GOTO SPECIAL2\n  ELSE IF &DIF1 EQ 0 AND &DIF2 NE 0 AND &DIF3 EQ 0 THEN GOTO SPECIAL3\n  ELSE IF &DIF1 EQ 0 AND &DIF2 NE 0 AND &DIF3 NE 0 THEN GOTO SPECIAL4\n  ELSE IF &DIF1 NE 0 AND &DIF2 EQ 0 AND &DIF3 EQ 0 THEN GOTO SPECIAL5\n  ELSE IF &DIF1 NE 0 AND &DIF2 EQ 0 AND &DIF3 NE 0 THEN GOTO SPECIAL6\n  ELSE IF &DIF1 NE 0 AND &DIF2 NE 0 AND &DIF3 EQ 0 THEN GOTO SPECIAL7\n  ELSE GOTO SPECIAL8\nSPECIAL1:+\n  WRITE APPARENTLY YOU ARE PERFECTLY BALANCED\n  WRITE YOU SHOULD BE A A DILETTANTE OR JACK OF ALL TRADES\n  WRITE YOU MUST GUARD AGAINST A FACILE EXISTENCE\n  GOTO FINAL\nSPECIAL2:+\n  SET &LABEL=&TYP4.2\n  GOTO &LABEL\nPP2:+\n  WRITE YOU ARE BALANCED BUT MOODY\n  WRITE YOU SHOULD BE A POSEUR\n  WRITE YOU MUST BEWARE OF MALICIOUS PEOPLE\n  GOTO FINAL\nMM2:+\n  WRITE YOU ARE BALANCED BUT INSENSITIVE\n  WRITE YOU COULD DO ALMOST ANY JOB\n  WRITE YOU MUST GUARD AGAINST BLANDNESS\n  GOTO FINAL\nCC2:+\n  WRITE YOU ARE BALANCED BUT LISTLESS\n  WRITE YOU SHOULD TEND MORE TOWARDS PHYSICAL WORK\n  WRITE YOU SHOULD GUARD AGAINST SLOTH\n  GOTO FINAL\nSS2:+\n  WRITE YOU ARE BALANCED BUT UNMOTIVATED\n  WRITE YOU SHOULD BE IN GOVERNMENT WORK\n  WRITE YOU SHOULD TRY TO BE MORE IMAGINATIVE\n  GOTO FINAL\nSPECIAL3:+\n  SET &LABEL=&TYP1&TYP2.3\n  GOTO &LABEL\nMMPP3:+\n  WRITE YOU ARE LANGUID, UNMOTIVATED, LYMPHATIC; STEADY, SENSITIVE\n  WRITE YOU SHOULD FIND A SOFT JOB\n  WRITE YOU MUST GUARD AGAINST LONELINESS\n  GOTO FINAL\nMMCC3:+\n  WRITE YOU ARE PETULANT, MOODY, ERRATIC; CREATIVE, ENTHUSIASTIC\n  WRITE YOU SEEM TO BE A CREATIVE PERSON\n  WRITE YOU MUST GUARD AGAINST DESTRUCTIVE EMOTIONS\n  GOTO FINAL\nMMSS3:+\n  WRITE YOU ARE MOODY, HEADSTRONG; BRAVE, DEVOTED\n  WRITE YOU NEED A JOB THAT REQUIRES SOME SELFLESSNESS\n  WRITE YOU MUST NOT LET YOURSELF BE EASILY INFLUENCED\n  GOTO FINAL\nPPCC3:+\n  WRITE YOU ARE LISTLESS, IRRITABLE, PRIM; RELIABLE, CARING\n  WRITE YOU SHOULD BE IN THE MEDICAL PROFESSION\n  WRITE YOU SHOULD GUARD AGAINST BEING MORALISTIC\n  GOTO FINAL\nPPSS3:+\n  WRITE YOU ARE DISPASSIONATE, INSENSTIVE; HARDY, ENERGETIC\n  WRITE YOU SHOULD BE IN SALES\n  WRITE YOU SHOULD GUARD AGAINST BEING DOGMATIC\n  GOTO FINAL\nPPMM3:+\n  GOTO MMPP3\nCCSS3:+\n  WRITE YOU ARE IMPETUOUS, RECKLESS; PASSIONATE, INDUSTRIOUS\n  WRITE YOU SHOULD BE IN THE BLACK MARKET\n  WRITE YOU SHOULD GUARD AGAINST RASHNESS\n  GOTO FINAL\nCCMM3:+\n  GOTO MMCC3\nCCPP3:+\n  GOTO PPCC3\nSSCC3:+\n  GOTO CCSS3\nSSMM3:+\n  GOTO MMSS3\nSSPP3:+\n  GOTO PPSS3\nSPECIAL4:+\n  SET &LABEL=&TYP3&TYP4.4\n  GOTO &LABEL\nCCSS4:+\n  WRITE YOU ARE LANGUID, UNMOTIVATED; STEADY, SENSITIVE\n  WRITE YOU ARE THE HOMELY TYPE\n  WRITE YOU SHOULD GUARD AGAINST BOREDOM AND ROUTINE\n  GOTO FINAL\nSSCC4:+\n  WRITE YOU ARE LANGUID, LISTLESS; STEADY, SENSITIVE\n  WRITE YOU ARE THE HOMELY TYPE\n  WRITE YOU MUST TRY AND CULTIVATE OTHER INTERESTS\n  GOTO FINAL\nPPSS4:+\n  WRITE YOU ARE PETULANT, TIMID; ENTHUSIASTIC, INTELLIGENT\n  WRITE YOU SHOULD BE IN RESEARCH\n  WRITE YOU SHOULD GUARD AGAINST COWARDICE\n  GOTO FINAL\nSSPP4:+\n  WRITE YOU ARE PETULANT, ERRATIC; CREATIVE, CONFIDENT\n  WRITE YOU SHOULD BE IN CINEMA\n  WRITE YOU SHOULD GUARD AGAINST ARROGANCE\n  GOTO FINAL\nPPCC4:+\n  WRITE YOU ARE HEADSTRONG, CALLOUS; STALWART, DEVOTED\n  WRITE YOU SHOULD BE HAVE A MILITARY VOCATION\n  WRITE YOU SHOULD GUARD AGAINST NARROW MINDEDNESS\n  GOTO FINAL\nCCPP4:+\n  WRITE YOU ARE MOODY, UNCONSTANT; STALWART, DEVOTED\n  WRITE YOU SHOULD IN THE JEWEL TRADE\n  WRITE YOU SHOULD GUARD AGAINST THEFT\n  GOTO FINAL\nSSMM4:+\n  WRITE YOU ARE IRRITABLE, OBTUSE; RELIABLE, CARING\n  WRITE YOU SHOULD BE IN THE MEDICAL PROFESSION\n  WRITE YOU SHOULD GUARD AGAINST BEING MORALISTIC\n  GOTO FINAL\nMMSS4:+\n  WRITE YOU ARE LISTLESS, IRRITABLE; RELIABLE, SENSITIVE\n  WRITE YOU SHOULD DO SOCIAL WORK\n  WRITE YOU SHOULD GUARD AGAINST INFATUATION\n  GOTO FINAL\nMMCC4:+\n  WRITE YOU ARE DISPASSIONATE, CALLOUS; HARDY, SHREWD\n  WRITE YOU SHOULD BE IN BUSINESS\n  WRITE YOU SHOULD GUARD AGAINST MAKING ENEMIES\n  GOTO FINAL\nCCMM4:+\n  WRITE YOU ARE DISPASSIONATE, INSENSTIVE; HARDY, ENERGETIC\n  WRITE YOU SHOULD BE A CORPORATE WORKER\n  WRITE YOU OUGHT TO GUARD AGAINST MEANINGLESSNESS\n  GOTO FINAL\nPPMM4:+\n  WRITE YOU ARE IMPETUOUS, OBTUSE; PASSIONATE, INDUSTRIOUS\n  WRITE YOU SHOULD BE AN ARTISAN\n  WRITE YOU SHOULD GUARD AGAINST NARROW MINDEDNESS\n  GOTO FINAL\nMMPP4:+\n  WRITE YOU ARE IMPETUOUS, RECKLESS; PASSIONATE, ADVENTUROUS\n  WRITE YOU SHOULD BE AN ADVENTURER\n  WRITE YOU OUGHT TO GUARD AGAINST UNWITTINGLY HURTING PEOPLE\n  GOTO FINAL\nSPECIAL5:+\n  SET &LABEL=&TYP1.5\n  GOTO &LABEL\nPP5:+\n  WRITE YOU ARE CAUTIOUS, UNIMAGINITIVE; STEADY\n  WRITE YOU SHOULD BE IN COMPUTING\n  WRITE YOU SHOULD TRY TO CULTIVATE OTHER INTERESTS\n  GOTO FINAL\nMM5:+\n  WRITE YOU ARE MOODY, OVERSENSITIVE; CREATIVE, PENSIVE\n  WRITE YOU SHOULD BE A FREE THINKER\n  WRITE YOU SHOULD NOT LET YOURSELF BE EASILY DOMINATED\n  GOTO FINAL\nCC5:+\n  WRITE YOU ARE PETULANT, ERRATIC; EBULLIENT, PASSIONATE\n  WRITE YOU SHOULD DO SOCIAL WORK\n  WRITE YOU SHOULD GUARD AGAINST INFATUATION\n  GOTO FINAL\nSS5:+\n  WRITE YOU ARE HEADSTRONG, CALLOUS; STALWART, INDUSTRIOUS\n  WRITE YOU SHOULD BE IN POLITICS\n  WRITE YOU SHOULD GUARD AGAINST MAKING ENEMIES\n  GOTO FINAL\nSPECIAL6:+\n  SET &LABEL=&TYP1&TYP4.6\n  GOTO &LABEL\nPPMM6:+\n  WRITE YOU ARE CAUTIOUS, UNIMAGINITIVE; STEADY\n  WRITE YOU SHOULD BE IN COMPUTING\n  WRITE YOU SHOULD TRY TO CULTIVATE OTHER INTERESTS\n  GOTO FINAL\nPPSS6:+\n  WRITE YOU ARE CAUTIOUS, STOIC; IMPERTURBABLE, RELIABLE\n  WRITE YOU SHOULD BE IN THE LEGAL PROFESSION\n  WRITE YOU SHOULD NOT LET YOUR WORK GOVERN YOUR LIFE\n  GOTO FINAL\nPPCC6:+\n  WRITE YOU ARE OBTUSE, LISTLESS, IMPASSIVE; COLLECTED\n  WRITE YOU SHOULD BE IN FINANCE\n  WRITE YOU SHOULD SEEK NEW EXPERIENCES\n  GOTO FINAL\nMMSS6:+\n  WRITE YOU ARE MOODY, LISTLESS, IRRITABLE; PENSIVE, SENSITIVE\n  WRITE YOU SHOULD BE INVOLVED IN FINE ARTS\n  WRITE YOU SHOULD GUARD AGAINST PEEVISHNESS\n  GOTO FINAL\nMMCC6:+\n  WRITE YOU ARE LISTLESS, DEPRESSIVE; ARTFUL, SENSITIVE\n  WRITE YOU SHOULD BE INVOLVED WITH MUSIC\n  WRITE YOU SHOULD GUARD AGAINST SELF-PITY\n  GOTO FINAL\nMMPP6:+\n  WRITE YOU ARE ERRATIC, MOODY; CREATIVE, PASSIONATE\n  WRITE YOU SHOULD BE THE LITERARY SORT\n  WRITE YOU SHOULD GUARD AGAINST INTROSPECTION\n  GOTO FINAL\nCCSS6:+\n  WRITE YOU ARE PETULANT, IRRITABLE; EXCITABLE, CURIOUS\n  WRITE YOU SHOULD BE IN RESEARCH\n  WRITE YOU SHOULD GUARD AGAINST PEEVISHNESS\n  GOTO FINAL\nCCMM6:+\n  WRITE YOU ARE PETULANT, OBTUSE; ENTHUSIASTIC, INTERESTED\n  WRITE YOU SHOULD BE A STUDENT\n  WRITE YOU SHOULD GUARD AGAINST SELFISHNESS\n  GOTO FINAL\nCCPP6:+\n  WRITE YOU ARE ERRATIC, IMPETUOUS; PASSIONATE, EBULLIENT\n  WRITE YOU SHOULD BE IN THE GASTRONOMIC FIELD\n  WRITE YOU SHOULD GUARD AGAINST EXCESSES AND SELF-INDULGENCE\n  GOTO FINAL\nSSMM6:+\n  WRITE YOU ARE CALLOUS, HEADSTRONG; INDUSTRIOUS, SHREWD\n  WRITE YOU SHOULD BE IN BUSINESS\n  WRITE YOU SHOULD NOT BECOME TOO CYNICAL\n  GOTO FINAL\nSSCC6:+\n  WRITE YOU ARE HEADSTRONG, DISPASSIONATE; INDUSTRIOUS, STALWART\n  WRITE YOU SHOULD BE IN MANAGEMENT\n  WRITE YOU SHOULD GUARD AGAINST INSENSITIVITY\n  GOTO FINAL\nSSPP6:+\n  WRITE YOU ARE IMPETUOUS, RECKLESS; INDUSTRIOUS, EBULLIENT\n  WRITE YOU SHOULD BE LEAD AN ENTREPENEURIAL LIFE\n  WRITE YOU MUST GUARD AGAINST RASHNESS\n  GOTO FINAL\nSPECIAL7:+\n  SET &LABEL=&TYP1&TYP2.7\n  GOTO &LABEL\nMMPP7:+\n  WRITE YOU ARE LANGUID, UNMOTIVATED; STEADY, SENSITIVE\n  WRITE YOU ARE THE HOMELY SORT\n  WRITE YOU MUST GUARD AGAINST BOREDOM AND ROUTINE\n  GOTO FINAL\nMMCC7:+\n  WRITE YOU ARE PETULANT, MOODY, ERRATIC; CREATIVE, ENTHUSIASTIC\n  WRITE YOU SHOULD BE IN FINE ARTS\n  WRITE YOU SHOULD GUARD AGAINST IRRATIONAL BELIEFS\n  GOTO FINAL\nMMSS7:+\n  WRITE YOU ARE MOODY, HEADSTRONG; STALWART, SYMPATHETIC\n  WRITE YOU SHOULD FOLLOW A CAUSE\n  WRITE YOU SHOULD GUARD AGAINST DUBIOUS CONVICTIONS\n  GOTO FINAL\nPPCC7:+\n  WRITE YOU ARE LISTLESS, IRRITABLE, STOIC; RELIABLE, CARING\n  WRITE YOU SHOULD BE IN FINANCE\n  WRITE YOU MUST GUARD AGAINST SUPPRESSING YOUR EMOTIONS\n  GOTO FINAL\nPPSS7:+\n  WRITE YOU ARE DISPASSIONATE, INSENSTIVE; HARDY, ENERGETIC\n  WRITE YOU SHOULD BE IN JOURNALISM\n  WRITE YOU MUST GUARD AGAINST BEING SELFISH\n  GOTO FINAL\nPPMM7:+\n  WRITE YOU ARE CAUTIOUS, LYMPHATIC; STEADY, PENSIVE\n  WRITE YOU SHOULD BE AN ACADEMIC\n  WRITE YOU MUST TRY TO BE MORE ACTIVE\n  GOTO FINAL\nCCSS7:+\n  WRITE YOU ARE IMPETUOUS, RECKLESS; PASSIONATE, INDUSTRIOUS\n  WRITE YOU SHOULD BE AN ADVENTURER\n  WRITE YOU OUGHT TO GUARD AGAINST UNWITTINGLY HURTING PEOPLE\n  GOTO FINAL\nCCMM7:+\n  WRITE YOU ARE PETULANT, SPITEFUL; PASSIONATE, PERCEPTIVE\n  WRITE YOU SHOULD BE IN DRAMA\n  WRITE YOU MUST AVOID CLOSE RELATIONSHIPS WITH LIKE PEOPLE\n  GOTO FINAL\nCCPP7:+\n  WRITE YOU ARE PETULANT, CALLOUS; OPTIMISTIC, CHEERFUL\n  WRITE YOU SHOULD BE IN SHOW BUSINESS\n  WRITE YOU MUST GUARD AGAINST BEING TOO INSENSITIVE\n  GOTO FINAL\nSSCC7:+\n  WRITE YOU ARE RECKLESS, BELLICOSE; INDUSTRIOUS, CHEERFUL\n  WRITE YOU SHOULD BE AN OUTDOORS TYPE\n  WRITE YOU MUST TRY TO BE MORE GENTLE\n  GOTO FINAL\nSSMM7:+\n  WRITE YOU ARE MOODY, BLUSTERING; THOUGHTFUL, DEPENDABLE\n  WRITE YOU WOULD MAKE A GOOD TEACHER\n  WRITE YOU OUGHT NOT BE TOO DIDACTIC\n  GOTO FINAL\nSSPP7:+\n  WRITE YOU ARE OBTUSE, CALLOUS; INDUSTRIOUS, COLLECTED, DEPENDABLE\n  WRITE YOU SHOULD BE IN SALES MANAGEMENT\n  WRITE YOU SHOULD TRY AND CULTIVATE OUTSIDE INTERESTS\n  GOTO FINAL\nSPECIAL8:+\n  SET &LABEL=&TYP1&TYP2.8\n  GOTO &LABEL\nMMPP8:+\n  WRITE YOU ARE LANGUID, UNMOTIVATED; STEADY, SENSITIVE\n  WRITE YOU ARE THE HOMELY SORT\n  WRITE YOU MUST GUARD AGAINST BOREDOM AND ROUTINE\n  GOTO FINAL\nMMCC8:+\n  WRITE YOU ARE PETULANT, MOODY, ERRATIC; CREATIVE, ENTHUSIASTIC\n  WRITE YOU SHOULD BE IN FINE ARTS\n  WRITE YOU SHOULD GUARD AGAINST IRRATIONAL BELIEFS\n  GOTO FINAL\nMMSS8:+\n  WRITE YOU ARE MOODY, HEADSTRONG; STALWART, SYMPATHETIC\n  WRITE YOU SHOULD FOLLOW A CAUSE\n  WRITE YOU SHOULD GUARD AGAINST DUBIOUS CONVICTIONS\n  GOTO FINAL\nPPCC8:+\n  WRITE YOU ARE LISTLESS, IRRITABLE, STOIC; RELIABLE, CARING\n  WRITE YOU SHOULD BE IN FINANCE\n  WRITE YOU MUST GUARD AGAINST SUPPRESSING YOUR EMOTIONS\n  GOTO FINAL\nPPSS8:+\n  WRITE YOU ARE DISPASSIONATE, INSENSTIVE; HARDY, ENERGETIC\n  WRITE YOU SHOULD BE IN JOURNALISM\n  WRITE YOU MUST GUARD AGAINST BEING SELFISH\n  GOTO FINAL\nPPMM8:+\n  WRITE YOU ARE CAUTIOUS, LYMPHATIC; STEADY, PENSIVE\n  WRITE YOU SHOULD BE AN ACADEMIC\n  WRITE YOU MUST TRY TO BE MORE ACTIVE\n  GOTO FINAL\nCCSS8:+\n  WRITE YOU ARE IMPETUOUS, RECKLESS; PASSIONATE, INDUSTRIOUS\n  WRITE YOU SHOULD BE AN ADVENTURER\n  WRITE YOU OUGHT TO GUARD AGAINST UNWITTINGLY HURTING PEOPLE\n  GOTO FINAL\nCCMM8:+\n  WRITE YOU ARE PETULANT, SPITEFUL; PASSIONATE, PERCEPTIVE\n  WRITE YOU SHOULD BE IN DRAMA\n  WRITE YOU MUST AVOID CLOSE RELATIONSHIPS WITH LIKE PEOPLE\n  GOTO FINAL\nCCPP8:+\n  WRITE YOU ARE PETULANT, CALLOUS; OPTIMISTIC, CHEERFUL\n  WRITE YOU SHOULD BE IN SHOW BUSINESS\n  WRITE YOU MUST GUARD AGAINST BEING TOO INSENSITIVE\n  GOTO FINAL\nSSCC8:+\n  WRITE YOU ARE RECKLESS, BELLICOSE; INDUSTRIOUS, CHEERFUL\n  WRITE YOU SHOULD BE AN OUTDOORS TYPE\n  WRITE YOU MUST TRY TO BE MORE GENTLE\n  GOTO FINAL\nSSMM8:+\n  WRITE YOU ARE MOODY, BLUSTERING; THOUGHTFUL, DEPENDABLE\n  WRITE YOU WOULD MAKE A GOOD TEACHER\n  WRITE YOU OUGHT NOT BE TOO DIDACTIC\n  GOTO FINAL\nSSPP8:+\n  WRITE YOU ARE OBTUSE, CALLOUS; INDUSTRIOUS, COLLECTED, DEPENDABLE\n  WRITE YOU SHOULD BE IN SALES MANAGEMENT\n  WRITE YOU SHOULD TRY AND CULTIVATE OUTSIDE INTERESTS\nFINAL:+\n  WRITE THANK YOU FOR YOUR PATRONAGE &THNAME; PLEASE CALL AGAIN.\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DECIDER$": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x7f\\x00\\x942\\x7f\\x15%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-23T00:00:00", "modifydate": "1994-11-23T15:25:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//DECIDER  JOB (........),'INSTALL -DECIDER-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=(,20)\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJPROC\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=FB AND LRECL=80, ELSE            *\n//*       \"PAJPROV\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=VB AND LRECL=255.                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//TCL     EXEC PAJPROC,MBR=DECIDER,DSS='->.SOURCE.FILE3',\n//             DSP='->.TARGET.TSO.CLISTS'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DIVER": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x11/\\x00\\x92\\x11/\\x163\\x02\\xfe\\x02\\xfe\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-21T00:00:00", "modifydate": "1992-04-21T16:33:00", "lines": 766, "newlines": 766, "modlines": 0, "user": "SYSPAJA"}, "text": "DIVE     TITLE '--- D I V E R ---'\nDIVER    START 0\n         SPACE 1\n* ORIGIN : EXTRACTED FROM TAPE CBT 91 MAR, FILE 134.\n* -------- DISASSEMBLED AND THEN RECODED/MODIFIED BY MOINIL P.A.\n         SPACE 1\n        $DEFREG\nKB       EQU   1024\nLDATA    EQU   (4*KB)\n         EJECT\n        $XENT  BASE=R12,LV=LDATA,TYPE=RENT\n         LR    R11,R13\n         USING WDATA,R11\n         MVI   WHERE,4\n         MVI   MESS,C' '\n         MVC   MESS+1(L'MESS-1),MESS\n        GTSIZE ,\n         LTR   R0,R0               ZERO LINES?\n         BZ    NOTVDU              YES, PROBABLY ON A TTY\n         CH    R0,=H'24'           LESS THAN 24 LINES?\n         BL    NOTVDU              YES, I DON'T LIKE THIS\n         CH    R0,=H'99'           MORE THAN 99 LINES?\n         BH    NOTVDU              YES, SCOREBOARD NAME WON'T WORK\n         CH    R1,=H'80'           LESS THAN 80 COLUMNS?\n         BL    NOTVDU              YES, CAN'T BE AN HONEST-TO-GOD VDU\n         MVI   GRAFLAGS,0          ALL GRAPHIC FEATURES TO BE VERIFIED\n         MVC   GTTL(INIT0L),INIT0\n         XC    WASTE,WASTE\n         XC    TERMATT,TERMATT\n        GTTERM PRMSZE=WASTE,ATTRIB=TERMATT,MF=(E,GTTL)\n         TM    TERMATT+3,X'01'     QUERY BIT ON?\n         BZ    NOTGC               NO, CAN'T DO QUERY\n         LA    R0,RSTAIDL\n         LA    R1,RSTAID\n         ICM   R1,B'1000',=X'0B'   TPUT FULLSCR,WAIT,HOLD\n        TPUT   (1),(0),R\n         LA    R2,QUERYL\n         LA    R3,QUERY\n        TPG    (R3),(R2),NOEDIT,WAIT,MF=(E,TPGL)\nQGET     LA    R0,KB\n         LA    R1,BUFFER\n         ICM   R1,B'1000',=X'81'   TGET ASIS,WAIT\n        TGET   (1),(0),R\n         CLI   BUFFER,X'88'        QUERY RESPONSE AID?\n         BNE   NOTGC               NO, UNEXPECTED DATA, FORGET QUERY\n         XR    R0,R0\n         LA    R15,BUFFER          POINT TO THE AID\nNOTSBF   LA    R15,1(,R15)         IGNORE A BYTE\n         BCT   R1,QPRS             DECREMENT LENGTH\n         B     NOTGC               JUST IN CASE THAT WAS THE LAST BYTE\nQPRS     CLI   2(R15),X'81'        QUERY REPLY ID?\n         BNE   NOTSBF              NO, SKIP A BYTE\n         TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?\n         BNO   NOTSBF              NO, SKIP A BYTE\n         CLI   0(R15),0            LENGTH LESS THAT 256?\n         BNE   NOTSBF              NO, SKIP A BYTE\n         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?\n         BE    QCLR                YES, PROCESS COLOUR SUPPORT\n         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?\n         BE    QHLT                YES, PROCESS HIGHLIGHTING SUPPORT\n         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?\n         BE    QSYM                YES, PROCESS SYMBOL SETS SUPPORT\nNXTSBF   ICM   R0,B'0011',0(R15)   NO, LOAD SUB-FIELD LENGTH\n         SR    R1,R0               SUBTRACT IT FROM TGET DATA LENGTH\n         BZ    NOTGC               END OF QUERY, INITIALIZATION DONE\n         BM    QGET                QUERY CONTINUES IN NEXT BLOCK\n         AR    R15,R0              POINT TO NEXT SUB-FIELD\n         B     QPRS                EXAMINE IT\nQCLR     CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?\n         BL    NXTSBF              NO, NO 7-COLOUR SUPPORT\n         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?\n         BNE   NXTSBF              NO, DON'T SET 7-COLOUR MODE\n         OI    GRAFLAGS,COLR       FLAG COLOUR SUPPORT CERTAINTY\n         B     NXTSBF              EXTENDED CAPABILITY NOW FLAGGED\nQHLT     CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?\n         BL    NXTSBF              NO, SO DO NOT FLAG IT\n         CLC   7(6,R15),=CL6'112244' YES, BLINK, REVERSE+UNDERSCORE OK?\n         BNE   NXTSBF              NO\n         OI    GRAFLAGS,HLIT       YES, FLAG HIGHLIGHTING SUPPORT\n         B     NXTSBF              EXTENDED CAPABILITY NOW FLAGGED\nQSYM     OI    GRAFLAGS,SYMSET     FLAG SYMBOL-SETS SUB-FIELD RETURNED\n         TM    4(R15),X'80'        IS GRAPHICS ESCAPE SUPPORTED?\n         BZ    NXTSBF              NO, SO DO NOT FLAG IT\n         OI    GRAFLAGS,GEOK       YES, FLAG GRAPHICS ESCAPE SUPPORT\n         B     NXTSBF              EXTENDED CAPABILITY NOW FLAGGED\nNOTGC    TM    GRAFLAGS,COLR+GEOK  TERMINAL OK FOR ME?\n         BO    YESOK               YES\nNOTVDU  TPUT   SORRYM,L'SORRYM\n         B     QUIT\nYESOK   STFSMODE ON,INITIAL        ACTIVATE VTAM FULL SCREEN MODE\n         LA    R0,BUFFER\n         LA    R1,INTL\n         ST    R1,LIMG\n         L     R14,=A(INT)\n         LR    R15,R1\n         MVCL  R0,R14\n         BAS   R9,STPT\n         LA    R0,SBA1V\n         LM    R14,R15,=A(SBA0V,SBA0VL)\n         LR    R1,R15\n         MVCL  R0,R14\n         LA    R0,BUFFER\n         L     R14,=A(IMG)\n         L     R15,=A(IMGL)\n         LR    R1,R15\n         LR    R2,R15\n         MVCL  R0,R14\n         LA    R1,BUFFER\n         ALR   R1,R2\n         L     R3,=A(STX)\n         MVC   0(STXL,R1),0(R3)\n         LA    R1,STXL(R1)\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R1))\n         LA    R1,STXL+L'SBA1+1(R2)\n         ST    R1,LIMG\n         LA    R3,5\n         BAS   R9,STPT\n         BCT   R3,*-4\n         LA    R1,BUFFER\n         ALR   R1,R2\n        $FS    SBA=(3,3),RA=(3,35,00),MF=(I,(R1))\n        $FS    SBA=(2,2),SF=IC,MF=(I,)\n         LA    R1,2*L'SBA1+L'SRA1+1(R2)\n         ST    R1,LIMG\n         BAS   R9,STPT\n         LA    R0,BUFFER\n         L     R14,=A(CNG)\n         L     R15,=A(CNGL)\n         LR    R1,R15\n         LR    R2,R15\n         MVCL  R0,R14\n         LA    R0,BUFFER\n         A     R0,=A(CNGL)\n         L     R14,=A(IMG)\n         A     R14,=A(IMGD)\n         L     R15,=A(IMGL)\n         S     R15,=A(IMGD)\n         LR    R1,R15\n         AR    R2,R15\n         MVCL  R0,R14\n         LA    R1,BUFFER\n         ALR   R1,R2\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R1))\n         LA    R2,L'SBA1+1(R2)\n         ST    R2,LIMG\n         LM    R2,R4,=A(L'TBL1,TBE1,TBL1)\nLOOP1    BAS   R9,STPT\n         L     R5,=A(SBA1P)\n         LA    R6,SBA1V\n         L     R7,=A(SBC1P)\n         BAS   R9,SUB1\n         L     R5,=A(SBA2P)\n         LA    R6,SBA2V\n         L     R7,=A(SBC2P)\n         BAS   R9,SUB1\n         L     R5,=A(SBA3P)\n         LA    R6,SBA3V\n         L     R7,=A(SBC3P)\n         BAS   R9,SUB1\n         L     R5,=A(SBA4P)\n         LA    R6,SBA4V\n         L     R7,=A(SBC4P)\n         BAS   R9,SUB1\n         BXLE  R4,R2,LOOP1\n         BAS   R9,STPT\n         LA    R0,BUFFER\n         A     R0,=A(IMGD)\n         LA    R14,BUFFER\n         A     R14,=A(CNGL)\n         L     R15,=A(IMGL)\n         S     R15,=A(IMGD)\n         LR    R1,R15\n         MVCL  R0,R14\n         LA    R6,BUFFER\n         L     R7,=A(IMGL)\n         ALR   R6,R7\n        $FS    SA=(COLOUR,YELLOW),MF=(I,(R6))\n         LA    R6,L'SA1(R6)\n         LA    R7,L'SA1(R7)\n         LA    R2,TLL2\n         L     R3,=A(TBL2)\n         LR    R4,R3\n         L     R5,=A(TBE2)\nLOOP2    LR    R0,R7\n         LR    R1,R6\n         MVC   0(TLL2,R1),0(R4)\n         ALR   R1,R2\n         AR    R0,R2\n         BXLE  R4,R2,*-10\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R1))\n         LR    R1,R0\n         LA    R1,L'SBA1+1(R1)\n         ST    R1,LIMG\n         BAS   R9,STPT\n         CLR   R3,R5\n         BE    *+L'*+10\n         ALR   R3,R2\n         L     R4,=A(TBL2)\n         B     LOOP2\n         L     R1,=A(SA1P)\n         LA    R1,BUFFER(R1)\n        $FS    SA=(COLOUR,YELLOW),MF=(I,(R1))\n         LA    R2,27\nLOOP3    BAS   R9,STPT\n         L     R5,=A(SBA5P)\n         LA    R6,SBA5V\n         BAS   R9,SUB2\n         L     R5,=A(SBA6P)\n         LA    R6,SBA6V\n         BAS   R9,SUB2\n         L     R5,=A(SBA7P)\n         LA    R6,SBA7V\n         BAS   R9,SUB2\n         BCT   R2,LOOP3\n         LA    R6,BUFFER\n         L     R7,=A(IMGL)\n         ALR   R6,R7\n         LA    R6,L'SA1(R6)\n         LA    R7,L'SA1(R7)\n         LA    R2,TLL2\n         L     R5,=A(TBL2)\nLOOP4    L     R4,=A(TBL2)\n         LR    R3,R5\n         LR    R0,R7\n         LR    R1,R6\n         CLR   R4,R3\n         BNL   *+L'*+6\n         ALR   R4,R2\n         B     *-8\n         MVC   0(L'TBL2,R1),0(R4)\n         LA    R1,L'TBL2(R1)\n        $FS    SET=00,MF=(I,(R1))\n         LA    R1,1(R1)\n         AH    R0,=Y(L'TBL2+1)\n         ALR   R4,R2\n         L     R3,=A(TBE2)\n         MVC   0(TLL2,R1),0(R4)\n         ALR   R1,R2\n         AR    R0,R2\n         BXLE  R4,R2,*-10\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R1))\n         LR    R1,R0\n         LA    R1,L'SBA1+1(R1)\n         ST    R1,LIMG\n         BAS   R9,STPT\n         SR    R3,R2\n         CLR   R5,R3\n         BNL   *+L'*+6\n         ALR   R5,R2\n         B     LOOP4\n         LA    R6,BUFFER\n         L     R7,=A(IMGL)\n         ALR   R6,R7\n         LR    R1,R6\n         ALR   R3,R2\n         MVC   0(TLL2,R1),0(R3)\n         ALR   R1,R2\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R1))\n         LA    R1,L'SBA1+1(R7,R2)\n         ST    R1,LIMG\n         BAS   R9,STPT\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R6))\n         LA    R1,L'SBA1+1(R7)\n         ST    R1,LIMG\n         BAS   R9,STPT\n         L     R3,=A(ETX)\n         MVC   0(ETXL,R6),0(R3)\n         LA    R6,ETXL(R6)\n        $FS    SBA=(2,2),SF=IC,MF=(I,(R6))\n         LA    R7,ETXL+L'SBA1+1(R7)\n         ST    R7,LIMG\n         LA    R3,5\n         BAS   R9,STPT\n         BCT   R3,*-4\nLEAVE    XR    R15,R15\n         IC    R15,WHERE\n         B     *+L'*(R15)\n         B     RSCRSK\n         LA    R0,BUFFER\n         LA    R1,TRML\n         ST    R1,LIMG\n         L     R14,=A(TRM)\n         LR    R15,R1\n         MVCL  R0,R14\n         BAS   R9,STPT\nRSCRSK  STLINENO LINE=1,MODE=OFF   DEACTIVATE VTAM FULL SCREEN MODE\n        TCLEARQ INPUT              FLUSH ANY RESIDUAL INPUT\n         CLI   WHERE,0\n         BNE   QUIT\n        TPUT   MESS,L'MESS\nQUIT    $XRET  CC=0,LV=LDATA,TYPE=RENT\nSTPT     L     R0,LIMG\n         LA    R1,BUFFER\n         ICM   R1,B'1000',=X'03'   FULLSCR\n        TPUT   (1),(0),R\n         LTR   R15,R15\n         BZR   R9\n         CLI   WHERE,0\n         BE    LEAVE\n         MVC   MESS(L'ERRMSG),ERRMSG\n         CVD   R15,DWRK\n         MVC   DWRK(4),=XL4'40202120'\n         ED    DWRK(4),DWRK+L'DWRK-2\n         MVC   MESS+ERRCC(L'ERRCC),DWRK+1\n         MVI   WHERE,0\n         B     LEAVE\n         SPACE 1\nSUB1     LA    R5,BUFFER(R5)\n         A     R5,=A(CNGL)\n         S     R5,=A(IMGD)\n         LA    R7,BUFFER(R7)\n         MVC   1(2,R7),1(R5)\n         LH    R1,0(R6)\n         AH    R1,0(R4)\n         STH   R1,0(R6)\n         BAS   R14,GNSBA\n         BR    R9\nSUB2     LA    R5,BUFFER(R5)\n         LH    R1,0(R6)\n         AH    R1,=H'-1'\n         STH   R1,0(R6)\n         BAS   R14,GNSBA\n         LH    R1,2(R6)\n         AH    R1,=H'1'\n         STH   R1,2(R6)\n         LA    R5,L'SBA1(R5)\n         BAS   R14,GNSBA\n         BR    R9\n         SPACE 1\nGNSBA    LR    R15,R1\n         XR    R0,R0\n         CL    R1,TRSBAM\n         BNL   *+L'*+6\n         XR    R1,R1\n         B     *+L'*+6\n         D     R0,TRSBAM\n         LR    R0,R1\n         MH    R0,TRSBAM+2\n         SR    R15,R0\n         AL    R1,=A(TRSBA)\n         AL    R15,=A(TRSBA)\n         MVC   1(1,R5),0(R1)\n         MVC   2(1,R5),0(R15)\n         BR    R14\n         EJECT\nTBL1     DC    H'-1',H'-1',H'-1',H'-1',H'-1'\n         DC    H'-1',H'-1',H'-1',H'-1',H'-1'\n         DC    H'-80',H'-80',H'-80',H'-80',H'-80'\n         DC    H'-80',H'-80',H'-80',H'-80',H'-80'\n         DC    H'-80',H'-80',H'-80',H'-80',H'-80'\n         DC    H'-80',H'-80',H'-1',H'-1',H'-1'\n         DC    H'-1',H'-1',H'-1',H'-1',H'-1'\n         DC    H'-1',H'-1',H'-1',H'-1',H'-1'\n         DC    H'-1',H'-1',H'-1',H'-1',H'-1'\n         DC    H'-1',H'-1',H'-1',H'-1',H'-1'\nTBE1     EQU   *-L'TBL1\n         SPACE 1\n         CNOP  0,4\nTRSBA    DC    XL16'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    XL16'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    XL16'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\nTRSBAL   EQU   *-TRSBA\nTRSBAM   DC    A(TRSBAL)\n         SPACE 1\nSORRYM   DC    C'=== Sorry, but I can''t run on this terminal ...'\nERRMSG   DC    C'=== TPUT failed - RC =     - Exit -'\nERRCC    EQU   23,3\n         SPACE 1\nRSTAID  $FS    CC=W,WCC=(KBR,RMDT),MF=L\nRSTAIDL  EQU   *-RSTAID\nQUERY   $FS    CC=(WSF),SET=000501FF02,MF=L\nQUERYL   EQU   *-QUERY\n         EJECT\n        LTORG\n         SPACE 1\n         DROP  R11,R12             KILL ADDRESSABILITIES\n         EJECT\nINIT0   GTTERM PRMSZE=*-*,ATTRIB=*-*,MF=L\n        TPG    *-*,*-*,NOEDIT,WAIT,MF=L\nINIT0L   EQU   *-INIT0\n         SPACE 1\nSBA0V    DC    Y(19*80+77)         V1 = 20,78\n         DC    Y(20*80+77)         V2 = 21,78\n         DC    Y(21*80+77)         V3 = 22,78\n         DC    Y(22*80+77)         V4 = 23,78\n         SPACE 1\n         DC    Y(20*80+28)         V5 = 21,29\n         DC    Y(20*80+29)              21,30\n         DC    Y(21*80+28)         V6 = 22,29\n         DC    Y(21*80+29)              22,30\n         DC    Y(22*80+28)         V7 = 23,29\n         DC    Y(22*80+29)              23,30\nSBA0VL   EQU   *-SBA0V\n         SPACE 1\n        PRINT  NOGEN\nINT     $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(2,2),SF=IC,MF=L\nINTL     EQU   *-INT\n         SPACE 1\nTRM     $FS    CC=EW,WCC=(KBR,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=IC,MF=L\nTRML     EQU   *-TRM\n         SPACE 1\nIMG     $FS    CC=W,WCC=(RMDT),MF=L\nIMGD     EQU   *-IMG\nSBA1    $FS    SBA=(1,1),MF=L\n        $FS    SFE=(ATTR,SKIP),MF=L\n        $FS    SA=(COLOUR,RED),MF=L                         <--- RED\n        $FS    SBA=(1,1),SET=(GE,C5),MF=L\n        $FS    RA=(1,80,GE,A2),MF=L\n        $FS    SBA=(1,80),SET=(GE,D5),MF=L\n        $FS    SBA=(2,1),SET=(GE,85),MF=L\n        $FS    SBA=(2,80),SET=(GE,85),MF=L\n        $FS    SBA=(3,1),SET=(GE,85),MF=L\n        $FS    SBA=(3,80),SET=(GE,85),MF=L\n        $FS    SBA=(4,1),SET=(GE,85),MF=L\n        $FS    SBA=(4,80),SET=(GE,85),MF=L\n        $FS    SBA=(5,1),SET=(GE,85),MF=L\n        $FS    SBA=(5,80),SET=(GE,85),MF=L\n        $FS    SBA=(6,1),SET=(GE,85),MF=L\n        $FS    SBA=(6,80),SET=(GE,85),MF=L\n        $FS    SBA=(7,1),SET=(GE,85),MF=L\n        $FS    SBA=(7,80),SET=(GE,85),MF=L\n        $FS    SBA=(8,1),SET=(GE,85),MF=L\n        $FS    SBA=(8,80),SET=(GE,85),MF=L\n        $FS    SBA=(9,1),SET=(GE,85),MF=L\n        $FS    SBA=(9,80),SET=(GE,85),MF=L\n        $FS    SBA=(10,1),SET=(GE,85),MF=L\n        $FS    SBA=(10,80),SET=(GE,85),MF=L\n        $FS    SBA=(11,1),SET=(GE,85),MF=L\n        $FS    SBA=(11,80),SET=(GE,85),MF=L\n        $FS    SBA=(12,1),SET=(GE,85),MF=L\n        $FS    SBA=(12,80),SET=(GE,85),MF=L\n        $FS    SBA=(13,1),SET=(GE,85),MF=L\n        $FS    SBA=(13,80),SET=(GE,85),MF=L\n        $FS    SBA=(14,1),SET=(GE,85),MF=L\n        $FS    SBA=(14,80),SET=(GE,85),MF=L\n        $FS    SBA=(15,1),SET=(GE,85),MF=L\n        $FS    SBA=(15,80),SET=(GE,85),MF=L\n        $FS    SBA=(16,1),SET=(GE,85),MF=L\n        $FS    SBA=(16,80),SET=(GE,85),MF=L\n        $FS    SBA=(17,1),SET=(GE,85),MF=L\n        $FS    SBA=(17,80),SET=(GE,85),MF=L\n        $FS    SBA=(18,1),SET=(GE,85),MF=L\n        $FS    SBA=(18,80),SET=(GE,85),MF=L\n        $FS    SBA=(19,1),SET=(GE,85),MF=L\n        $FS    SBA=(19,80),SET=(GE,85),MF=L\n        $FS    SBA=(20,1),SET=(GE,85),MF=L\n        $FS    SBA=(20,80),SET=(GE,85),MF=L\n        $FS    SBA=(21,1),SET=(GE,85),MF=L\n        $FS    SBA=(21,80),SET=(GE,85),MF=L\n        $FS    SBA=(22,1),SET=(GE,85),MF=L\n        $FS    SBA=(22,80),SET=(GE,85),MF=L\n        $FS    SBA=(23,1),SET=(GE,85),MF=L\n        $FS    SBA=(23,80),SET=(GE,85),MF=L\n        $FS    SBA=(24,1),SET=(GE,C4),MF=L\n        $FS    RA=(24,80,GE,A2),MF=L\n        $FS    SBA=(24,80),SET=(GE,D4),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(4,67),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SBA=(5,67),SET=(GE,85),MF=L\n        $FS    SBA=(5,69),SET=(GE,85),MF=L\n        $FS    SBA=(6,67),SET=(GE,85),MF=L\n        $FS    SBA=(6,69),SET=(GE,85),MF=L\n        $FS    SBA=(7,67),SET=(GE,85),MF=L\n        $FS    SBA=(7,69),SET=(GE,85),MF=L\n        $FS    SA=(COLOUR,TURQ),MF=L                        <--- TURQ\n        $FS    SBA=(7,45),RA=(7,55,GE,93),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(7,55),SET=(GE,95),MF=L\n        $FS    RA=(7,74,GE,95),MF=L\n        $FS    SBA=(7,74),SET=(GE,91),MF=L\n        $FS    SBA=(8,64),SET=(GE,C6),MF=L\nSRA1    $FS    RA=(8,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(8,72),SET=(GE,D6),MF=L\n        $FS    SBA=(9,64),SET=(GE,C6),MF=L\n        $FS    RA=(9,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(9,72),SET=(GE,D6),MF=L\n        $FS    SBA=(10,64),SET=(GE,C6),MF=L\n        $FS    RA=(10,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(10,72),SET=(GE,D6),MF=L\n        $FS    SBA=(11,64),SET=(GE,C6),MF=L\n        $FS    RA=(11,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(11,72),SET=(GE,D6),MF=L\n        $FS    SBA=(12,61),SET=(GE,C5),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,C7),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(12,71),SET=(GE,A2),MF=L\n        $FS    SET=(GE,D6),MF=L\n        $FS    SBA=(13,61),SET=(GE,85),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(13,71),TEXT=' ',MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    SA=(COLOUR,TURQ),MF=L                        <--- TURQ\n        $FS    SBA=(14,55),RA=(14,61,GE,93),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(14,61),SET=(GE,95),MF=L\n        $FS    RA=(14,72,GE,95),MF=L\n        $FS    SBA=(14,72),SET=(GE,95),MF=L\n        $FS    SBA=(15,64),SET=(GE,C6),MF=L\n        $FS    RA=(15,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(15,72),SET=(GE,D6),MF=L\n        $FS    SBA=(16,64),SET=(GE,C6),MF=L\n        $FS    RA=(16,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(16,72),SET=(GE,D6),MF=L\n        $FS    SBA=(17,64),SET=(GE,C6),MF=L\n        $FS    RA=(17,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(17,72),SET=(GE,D6),MF=L\n        $FS    SBA=(18,64),SET=(GE,C6),MF=L\n        $FS    RA=(18,72,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(18,72),SET=(GE,D6),MF=L\n        $FS    SBA=(19,63),SET=(GE,C5),MF=L\n        $FS    SET=(GE,D4),MF=L\n        $FS    SBA=(19,72),SET=(GE,C4),MF=L\n        $FS    SET=(GE,D5),MF=L\n        $FS    SBA=(20,63),SET=(GE,C6),MF=L\n        $FS    RA=(20,73,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(20,73),SET=(GE,D6),MF=L\n        $FS    SBA=(21,62),SET=(GE,C5),MF=L\n        $FS    SET=(GE,D4),MF=L\n        $FS    SBA=(21,73),SET=(GE,C4),MF=L\n        $FS    SET=(GE,D5),MF=L\n        $FS    SBA=(22,62),SET=(GE,C6),MF=L\n        $FS    RA=(22,74,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(22,74),SET=(GE,D6),MF=L\n        $FS    SBA=(23,62),SET=(GE,C6),MF=L\n        $FS    RA=(23,74,' '),MF=L\n        $FS    TEXT=' ',MF=L\n        $FS    SBA=(23,74),SET=(GE,D6),MF=L\n        $FS    SA=(COLOUR,WHITE),MF=L                       <--- WHITE\n        $FS    SBA=(7,66),SET=(GE,C6),MF=L\n        $FS    RA=(7,70,GE,A2),MF=L\n        $FS    SBA=(8,66),SET=(GE,C6),MF=L\n        $FS    RA=(8,70,GE,A2),MF=L\n        $FS    SBA=(9,66),SET=(GE,C6),MF=L\n        $FS    RA=(9,70,GE,A2),MF=L\n        $FS    SBA=(10,66),SET=(GE,C6),MF=L\n        $FS    RA=(10,70,GE,A2),MF=L\n        $FS    SBA=(11,66),SET=(GE,C6),MF=L\n        $FS    RA=(11,70,GE,A2),MF=L\n        $FS    SBA=(12,66),SET=(GE,C6),MF=L\n        $FS    RA=(12,70,GE,A2),MF=L\n        $FS    SBA=(13,66),SET=(GE,C6),MF=L\n        $FS    RA=(13,70,GE,A2),MF=L\n        $FS    SBA=(14,66),SET=(GE,C6),MF=L\n        $FS    RA=(14,70,GE,A2),MF=L\n        $FS    SBA=(15,66),SET=(GE,C6),MF=L\n        $FS    RA=(15,70,GE,A2),MF=L\n        $FS    SBA=(16,66),SET=(GE,C6),MF=L\n        $FS    RA=(16,70,GE,A2),MF=L\n        $FS    SBA=(17,66),SET=(GE,C6),MF=L\n        $FS    RA=(17,70,GE,A2),MF=L\n        $FS    SBA=(18,66),SET=(GE,C6),MF=L\n        $FS    RA=(18,70,GE,A2),MF=L\n        $FS    SBA=(19,66),SET=(GE,C6),MF=L\n        $FS    RA=(19,70,GE,A2),MF=L\n        $FS    SBA=(20,66),SET=(GE,C6),MF=L\n        $FS    RA=(20,70,GE,A2),MF=L\n        $FS    SBA=(20,70),SET=(GE,D6),MF=L\n        $FS    SBA=(21,66),SET=(GE,C6),MF=L\n        $FS    RA=(21,70,GE,A2),MF=L\n        $FS    SBA=(21,70),SET=(GE,D6),MF=L\n        $FS    SBA=(22,66),SET=(GE,C6),MF=L\n        $FS    RA=(22,70,GE,A2),MF=L\n        $FS    SBA=(22,70),SET=(GE,D6),MF=L\n        $FS    SBA=(23,66),SET=(GE,C6),MF=L\n        $FS    RA=(23,70,GE,A2),MF=L\n        $FS    SBA=(23,70),SET=(GE,D6),MF=L\n        $FS    SA=(COLOUR,PINK),MF=L                        <--- PINK\nSBA1P    EQU   *-IMG\n        $FS    SBA=(20,78),SET=(GE,FD),MF=L\nSBA2P    EQU   *-IMG\n        $FS    SBA=(21,78),SET=(GE,95),MF=L\n        $FS    SET=(GE,91),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L                       <--- GREEN\nSBA3P    EQU   *-IMG\n        $FS    SBA=(22,78),SET=(GE,95),MF=L\n        $FS    SET=(GE,91),MF=L\n        $FS    SA=(COLOUR,PINK),MF=L                        <--- PINK\nSBA4P    EQU   *-IMG\n        $FS    SBA=(23,78),SET=(GE,91),MF=L\n        $FS    SET=(GE,91),MF=L\n        $FS    SA=(COLOUR,WHITE),MF=L                       <--- WHITE\n        $FS    SBA=(7,70),SET=(GE,D6),MF=L\n        $FS    SBA=(8,70),SET=(GE,D6),MF=L\n        $FS    SBA=(9,70),SET=(GE,D6),MF=L\n        $FS    SBA=(10,70),SET=(GE,D6),MF=L\n        $FS    SBA=(11,70),SET=(GE,D6),MF=L\n        $FS    SBA=(12,70),SET=(GE,D6),MF=L\n        $FS    SBA=(13,70),SET=(GE,D6),MF=L\n        $FS    SBA=(14,70),SET=(GE,D6),MF=L\n        $FS    SBA=(15,70),SET=(GE,D6),MF=L\n        $FS    SBA=(16,70),SET=(GE,D6),MF=L\n        $FS    SBA=(17,70),SET=(GE,D6),MF=L\n        $FS    SBA=(18,70),SET=(GE,D6),MF=L\n        $FS    SBA=(19,70),SET=(GE,D6),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(4,55),SET=(GE,C5),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SBA=(4,70),SET=(GE,C5),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SET=(GE,D7),MF=L\n        $FS    SET=(GE,A2),MF=L\n        $FS    SBA=(4,74),SET=(GE,D5),MF=L\n        $FS    SBA=(5,55),SET=(GE,85),MF=L\n        $FS    SBA=(5,57),SET=(GE,85),MF=L\n        $FS    SBA=(5,59),SET=(GE,85),MF=L\n        $FS    SBA=(5,61),SET=(GE,85),MF=L\n        $FS    SBA=(5,63),SET=(GE,85),MF=L\n        $FS    SBA=(5,65),SET=(GE,85),MF=L\n        $FS    SBA=(5,71),SET=(GE,85),MF=L\n        $FS    SBA=(5,73),SET=(GE,85),MF=L\n        $FS    SBA=(5,74),SET=(GE,85),MF=L\n        $FS    SA=(COLOUR,WHITE),MF=L                       <--- WHITE\n        $FS    SBA=(3,65),SET=(GE,C5),MF=L\n        $FS    SET=(GE,D5),MF=L\n        $FS    SBA=(3,70),SET=(GE,C5),MF=L\n        $FS    SET=(GE,D5),MF=L\n        $FS    SBA=(4,65),SET=(GE,D3),MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    SBA=(4,70),SET=(GE,85),MF=L\n        $FS    SET=(GE,D3),MF=L\n        $FS    SBA=(5,65),SET=(GE,85),MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    SBA=(5,70),SET=(GE,85),MF=L\n        $FS    SET=(GE,85),MF=L\n        $FS    SBA=(6,66),SET=(GE,85),MF=L\n        $FS    SBA=(6,70),SET=(GE,85),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(6,55),SET=(GE,85),MF=L\n        $FS    SBA=(6,57),SET=(GE,85),MF=L\n        $FS    SBA=(6,59),SET=(GE,85),MF=L\n        $FS    SBA=(6,61),SET=(GE,85),MF=L\n        $FS    SBA=(6,63),SET=(GE,85),MF=L\n        $FS    SBA=(6,65),SET=(GE,85),MF=L\n        $FS    SBA=(6,71),SET=(GE,85),MF=L\n        $FS    SBA=(6,73),SET=(GE,85),MF=L\n        $FS    SBA=(6,74),SET=(GE,85),MF=L\n        $FS    SA=(COLOUR,TURQ),MF=L                        <--- TURQ\n        $FS    SBA=(21,2),RA=(21,57,GE,95),MF=L\n        $FS    SBA=(22,2),RA=(22,57,GE,95),MF=L\n        $FS    SBA=(23,2),RA=(23,57,GE,95),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L                        <--- BLUE\n        $FS    SBA=(20,2),RA=(20,57,GE,A2),MF=L\n        $FS    SBA=(20,57),SET=(GE,D5),MF=L\n        $FS    SBA=(21,57),SET=(GE,85),MF=L\n        $FS    SBA=(22,57),SET=(GE,85),MF=L\n        $FS    SBA=(23,57),SET=(GE,85),MF=L\nSA1P     EQU   *-IMG\nSA1     $FS    SA=(COLOUR,TURQ),MF=L                        <--- TURQ\nSBA5P    EQU   *-IMG\n        $FS    SBA=(21,29),RA=(21,30,GE,95),MF=L\nSBA6P    EQU   *-IMG\n        $FS    SBA=(22,29),RA=(22,30,GE,95),MF=L\nSBA7P    EQU   *-IMG\n        $FS    SBA=(23,29),RA=(23,30,GE,95),MF=L\nIMGL     EQU   *-IMG\n         SPACE 1\nCNG     $FS    CC=W,WCC=(RMDT),MF=L\nSBC1P    EQU   *-CNG\n        $FS    SBA=(20,78),SET=00,MF=L\nSBC2P    EQU   *-CNG\n        $FS    SBA=(21,78),SET=0000,MF=L\nSBC3P    EQU   *-CNG\n        $FS    SBA=(22,78),SET=0000,MF=L\nSBC4P    EQU   *-CNG\n        $FS    SBA=(23,78),SET=0000,MF=L\nCNGL     EQU   *-CNG\n         SPACE 1\nSTX     $FS    SBA=(3,3),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='Welcome to the swimming-pool |',MF=L\nSTXL     EQU   *-STX\n         SPACE 1\nETX     $FS    SBA=(3,3),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='So long ... old chap |||',MF=L\nETXL     EQU   *-ETX\n         SPACE 1\nTBL2    $FS    SBA=(5,44),SET=(GE,B3),MF=L\nTLL2     EQU   *-TBL2\n        $FS    SBA=(6,42),SET=(GE,A1),MF=L\n        $FS    SBA=(6,41),SET=(GE,A1),MF=L\n        $FS    SBA=(6,40),SET=(GE,A1),MF=L\n        $FS    SBA=(7,38),SET=(GE,A1),MF=L\n        $FS    SBA=(8,36),SET=(GE,A1),MF=L\n        $FS    SBA=(9,34),SET=(GE,A1),MF=L\n        $FS    SBA=(10,33),SET=(GE,A1),MF=L\n        $FS    SBA=(11,32),SET=(GE,A1),MF=L\n        $FS    SBA=(12,31),SET=(GE,A1),MF=L\n        $FS    SBA=(13,31),SET=(GE,A1),MF=L\n        $FS    SBA=(14,30),SET=(GE,A1),MF=L\n        $FS    SBA=(15,29),SET=(GE,A1),MF=L\n        $FS    SBA=(16,29),SET=(GE,A1),MF=L\n        $FS    SBA=(17,29),SET=(GE,A1),MF=L\n        $FS    SBA=(18,29),SET=(GE,A1),MF=L\n        $FS    SBA=(19,29),SET=(GE,A1),MF=L\n        $FS    SBA=(20,29),SET=(GE,A1),MF=L\nTBE2    $FS    SBA=(21,29),SET=(GE,A1),MF=L\n        PRINT  GEN\n         EJECT\nWDATA    DSECT\n         SPACE 1\n         DS    18F                 SAVE AREA\nDWRK     DS    D\nGTTL    GTTERM PRMSZE=*-*,ATTRIB=*-*,MF=L\nTPGL    TPG    *-*,*-*,NOEDIT,WAIT,MF=L\nLIMG     DS    F\nTERMATT  DS    F\nWASTE    DS    H\n         SPACE 1\nSBA1V    DS    H\nSBA2V    DS    H\nSBA3V    DS    H\nSBA4V    DS    H\n         SPACE 1\nSBA5V    DS    2H\nSBA6V    DS    2H\nSBA7V    DS    2H\n         SPACE 1\nGRAFLAGS DS    XL1                 TERMINAL GRAPHIC CAPABILITY\nCOLR     EQU   X'80'               AT LEAST SEVEN COLOURS SUPPORTED\nHLIT     EQU   X'40'               BLINK, REVERSE, U-SCORE SUPPORTED\nGEOK     EQU   X'20'               GRAPHICS ESCAPE SUPPORTED\nSYMSET   EQU   X'10'               SYMBOL-SETS SUB-FIELD RETURNED\n         SPACE 1\nWHERE    DS    XL1\nMESS     DS    CL78\n         SPACE 1\nBUFFER   DS    0F                  BUFFER AREA ...\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DIVER$": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x129\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//DIVER    JOB (........),'INSTALL  -DIVER-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1000K,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                         D  I  V  E  R                             *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS2,OPT=',RENT',MBR=DIVER\n//LNK     EXEC PAJILKC,OPT=',MAP,RENT'\n//SYSIN     DD *\n  ENTRY   DIVER\n  NAME    DIVER(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GDDM": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\tW\\x1b\\xc3\\x1b\\xc3\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T09:57:00", "lines": 7107, "newlines": 7107, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=$$GDOC\n./     NUMBER  NEW1=100,INCR=100\n\n                     G R A P H I C S   P R O G R A M S\n\n          RELEASE 2.0     1  JULY  1991\n\n          COURTESY     JIM MARSHALL, CAPT, USAF-RET\n                       1-301-436-6580\n          -------------------------------------------------------------\n\n               This is a collection of FORTRAN programs that were coded\n          to demonstrate GDDM functions on the IBM 3279 terminals we\n          had. Captain Frank FINNERN was the coder for these programs\n          and did a great job. He was assigned down in SAN ANTONIO, TX\n          at the 2ISG. I took the code with me to FORT MEADE.\n\n               Please do not dismay if you see these things coded in\n          FORTRAN. For those with MVS and MVS/XA who can not afford to\n          buy FORTRAN (likely story), I have put a free unsupported\n          version of the OS/360 FORTRAN G (IEYFORT) compiler onto the\n          SHARE and CBT tape. It works fine and will drive these\n          programs.\n\n          D I S C L A I M E R S  |||||\n          *********************************************\n          Use all of these at your own risk, naturally|\n          *********************************************\n\n               The file is constructed as follows : the source is put\n          in as a name. Then if there is any instructions, guidance,\n          etc..., that member is suffixed with a #. If the JCL is\n          involved, then most always the JCL is suffixed with a $.\n\n          For example :  XXXX    - source member\n                         XXXX#   - additional information\n                         XXXX$   - JCL to install\n\n\n          CHANGE ACTIVITY LOG : none\n          -------------------------------------------------------------\n\n          Summary of modules contained :\n          ------------------------------\n               (O) Origin : tape CBT 93 AUG\n                            (1) : file 300, member GDDM\n                            (2) : file 300\n                            (3) : file 134\n\n          Utility   Rel  Description                                (O)\n          --------  ---  -----------------------------------------  ---\n\n          ANIM           Some animations (Assembler programming     (3)\n                         examples using local full-screen macros)\n\n          CODEBUST  2X   A true \"BUG BUSTER\" flag                   (1)\n\n          ILRBIRD        Full-screen writes demonstration           (2)\n\n          LOGO      2X   Our LOGO for the unit                      (1)\n\n          NITEFLT   2X   See the SPACE SHUTTLE streak across the    (1)\n                         night sky\n\n          SABREBAT  2X   AIR FORCE X-29 airplane                    (1)\n\n          SHUTTLE   2X   SPACE SHUTTLE launch                       (1)\n\n          ZOOM      2X   Zoom in and look inside the cockpit        (1)\n                         (module ZOOMS added)\n\n          Notes : 1. These members have been arranged by MOINIL P.A.\n          =======    Modules ZOOMS, ILRBIRD and ANIM are Assembler H,\n                     others are adapted to be compiled in FORTRAN VS.\n                  2. ANIM needs as pre-requisite the installation of\n                     routine FSRTN.\n\n          Remark : ANIM program verify the display size and QUERY\n          ======== reply data to be sure it is able to run on that\n                   terminal without giving the message SCREEN ERASURE\n                   which causes i.e. the breakdown of the TSO session\n                   on IBM-PS2 with EXTRA versions (as we have).\n                   I suggest you code a little TSO-command, based on\n                   this check, in order to select the invocation of any\n                   other GDDM demonstration, just to prevent ... crash\n                   (as example, I have included my command TGTERM too).\n                   To print/debug the QUERY reply data of a terminal\n                   use my T3270FS command (see also ISPF panel PAJVRS).\n\n          Data-sets names :\n          =================\n\n          Here follows the list of the data-sets names defined to\n          generate and use GDDM demonstrations at our installation\n          (see members named ...$ (JCL) to make your changes) :\n\n          <User-id>....\n          ->.USER.DEMO.ORIGIN (this library, created in member GDDM$)\n          ->.USER.DEMO.DATA (compiled load modules library, also\n                             created in member GDDM$)\n          ->.SOURCE.FILE0 (the library of basic material)\n          ->.TARGET.CMDLIB (the load library of TSO commands)\n          ->.TARGET.RTNLIB (the load library of routine FSRTN)\n\n          <System-id>....               <System-id>....\n          SYS1.MACLIB                   SYS1.VSF2COMP\n          SYS1.MODGEN                   SYS1.VSF2FORT\n                                        SYS1.GDDMLOAD\n\n                              G O O D     L U C K\n\n                                        MOINIL P.A. (03/23/94)\n                                        Computing Centre (TP 361)\n                                        J.R.C. - Ispra Establishment\n                                        21020 ISPRA (VA), ITALY\n./     ADD     NAME=ANIM\n./     NUMBER  NEW1=100,INCR=100\nANIM     TITLE 'TEST SOME ANIMATIONS ...'\n         PRINT OFF\n* Here follows the Assembly SYSPARM(...) Options process which allows\n*        you to select :\n*        1. NONE or omitted = no list of macros development\n*           FULL = list all macros development (unless system DSECTs)\n*        2. US or omitted = use USA display characters\n*           EU = use EUROPEAN display characters\n*        How to define Options : i.e - SYSPARM(FULL)\n*                                      SYSPARM(,EU)\n*        If you want add another selection, you can easily do it\n*        adjusting below the statements marked \"<===\", define the new\n*        OPT(N) default, and supply the new option coding just before\n*        the comment card marked \"---> ADD OPTION(S)\".\n         GBLC  &EULST,&EUDCH                                  <===\n         LCLA  &CN,&CT,&LN,&MX,&SB,&ST\n         LCLC  &OPT(2)                                        <===\n&MX      SETA  2                                              <===\n&OPT(1)  SETC  'NONE'\n&OPT(2)  SETC  'US'\n&CN      SETA  K'&SYSPARM\n         AIF   (K'&SYSPARM EQ 0).SP99\n&CT      SETA  1\n&SB      SETA  1\n&ST      SETA  &CT\n.SP1     AIF   ('&SYSPARM'(&CT,1) EQ ',').SP2\n&CT      SETA  &CT+1\n         AIF   (&CT LE &CN).SP1\n.SP2     ANOP\n&LN      SETA  &CT-&ST\n         AIF   (&LN EQ 0).SP3\n&OPT(&SB) SETC '&SYSPARM'(&ST,&LN)\n.SP3     ANOP\n&SB      SETA  &SB+1\n         AIF   (&SB GT &MX).SP99\n&CT      SETA  &CT+1\n         AIF   (&CT GT &CN).SP99\n&ST      SETA  &CT\n         AGO   .SP1\n.SP99    ANOP\n&EULST   SETC  'GEN'\n         AIF   ('&OPT(1)' EQ 'FULL').SL1\n&EULST   SETC  'NOGEN'\n.SL1     ANOP\n&EUDCH   SETC  'EUROPE'\n         AIF   ('&OPT(2)' EQ 'EU').SL99\n&EUDCH   SETC  'USA'\n.SL99    ANOP\n* ---> ADD OPTION(S)\n         MACRO\n&LABEL   #GO   &NAME,&AR=I\n         AIF   ('&NAME' NE '').A\n         MNOTE 8,'--- NAME OF ROUTINE MISSING (IT IS MANDATORY) ---'\n         AGO   .MEND\n.A       AIF   ('&AR' EQ 'D').B\n&LABEL   L     R15,=A(&NAME)\n         AGO   .C\n.B       ANOP\n&LABEL   L     R15,&NAME\n.C       BASR  R14,R15\n.MEND    MEND\n         PRINT ON\nANIM     START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*    Purpose : test some animations on 3270 display terminal with     *\n*              graphics support (GDDM).                               *\n*                                                                     *\n*    Origin :  CBT 93 AUG tape, file 134.                             *\n*              Updates : all tests grouped in one module and use of   *\n*                        FSRTN routine (FULL-SCREEN).                 *\n*                   by : MOINIL P.A.                                  *\n*                        Computing Centre (TP 361)                    *\n*                        J.R.C. - Ispra Establishment                 *\n*                        21020 Ispra (VA), Italy                      *\n*                                                                     *\n*    IBM manuals used : GA23-0059 3270 Information Display System     *\n*                                 Data Stream Programmer's Reference  *\n*                       SC33-0101 Graphical Data Display Manager Base *\n*                                 Programming Reference               *\n*                       SC33-0148 Graphical Data Display Manager      *\n*                                 Application Programming Guide       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT &EULST\n        $DEFREG\n         EJECT\n        $XENT  BASE=R12\n         ST    R1,RPARM            SAVE ENTRY R1\n*------- CHECK IF WE ARE ENTERED AS TSO COMMAND\n        #GO    CHECK\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+8             0 = OK\n         LA    R2,8                4 = ERROR, SET CC=8\n         B     QUIT\n*------- VERIFY TERMINAL FEATURES\n        #GO    VERFY\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 = OK\n         B     LEAVE               4 = ERROR\n*------- DISPLAY SOME TERMINAL CHARACTERISTICS\n        #GO    DTINF\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 = OK, CONTINUE\n         B     LEAVE               4 = ERROR OR END\n*------- INITIALIZATION OF TITLES DISPLAY\n        #GO    INITT\n*------- SELECTION DISPLAY\nRXSEL   #GO    SELDS\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+8             0 = OK, CONTINUE\n         B     LEAVE               4 = ERROR\n         B     SHUT                8 = END\n         LTR   R3,R1               SOME SELECTION?\n         BZ    VXALL               NO, DO ALL\n*------- EXECUTE A SINGLE ANIMATION\n         BCTR  R3,0\n         SLL   R3,2\n         AL    R3,=A(VANIM,L'VANIM,VLAST)\n        #GO    0(R3),AR=D\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     RXSEL               0 = OK, CONTINUE\n         B     LEAVE               4 = ERROR OR END\n*------- EXECUTE ALL ANIMATIONS SEQUENTIALLY\nVXALL    LM    R3,R5,=A(VANIM,L'VANIM,VLAST)\nVEXEC   #GO    0(R3),AR=D\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 = OK, CONTINUE\n         B     LEAVE               4 = ERROR OR END\n         BXLE  R3,R4,VEXEC\n         B     RXSEL\n*------- ANIMATIONS TERMINATED\nSHUT     XR    R2,R2               SET CC=0\n         B     *+L'*+4\nLEAVE    LA    R2,8                SET CC=8\n         MVI   OPTFS,FSEXIT        EXIT FULL-SCREEN MODE\n        @FS    OPTFS,MF=(E,FSPARM)\nQUIT     XR    R0,R0\n         ICM   R0,B'0011',ERRMSL\n         BZ    NOMSG\n         L     R1,ERRMSA\n        TPUT   (1),(0)             PUT OUT ERROR MESSAGE\nNOMSG    LR    R15,R2              GET CC\n        $XRET  CC=(R15)\n         SPACE 1\n*------- CONSTANTS AND WORK-AREAS\nDBLW     DC    D'0'\nWRKFL1   DC    CL8' '\nWRKFL2   DC    CL8' '\nRPARM    DC    A(*-*)\nATIOT    DC    A(*-*)\nATSO     DC    A(*-*)\nAPSCB    DC    A(*-*)\nASCRIPTR DC    A(*-*)              PTR TO ACTIVE SCREEN IMAGE\nASCRLGTH DC    A(*-*)              PTR TO LENGTH OF ACTIVE SCREEN IMAGE\nASPS     EQU   *-ASCRIPTR\nASCRRTN  DC    A(*-*)              PTR TO PROCESS READ SCREEN ROUTINE\nASPL     EQU   *-ASCRIPTR\nFSPARM  @FS    ,,,MF=L\nFSBFSZ   DC    F'0'\nERRMSA   DC    F'0'\nERRMSL   DC    F'0'\nRQSZ     DC    0H'0',AL1(24,80)    REQUESTED SCREEN SIZE\nMAXISX   DC    H'0'\nMAXISY   DC    H'0'\nTXT1XY   DC    2H'0'               TITLES TEXT CO-ORD'S\nTXT2XY   DC    2H'0'\nTXQXY    DC    2H'0'\nTXTW     DC    H'0'\nTXTH     DC    H'0'\nTXQW     DC    H'0'\nTXQH     DC    H'0'\n         SPACE 1\nVANIM    DC    A(ANIM1,ANIM2,ANIM3,ANIM4,ANIM5)\n         DC    A(ANIM6,ANIM7,ANIM8,ANIM9,ANIM10)\n         DC    A(ANIM11)\nVLAST    EQU   *-L'VANIM           END OF ANIMATIONS TEST VECTOR\n         SPACE 1\nTERMAT  @FST   ,\n         PRINT GEN\nOPTFS   @FSO   ,\n         PRINT &EULST\nSWXEQ    DC    XL1'0'\nFL81     EQU   X'80'               USABLE AREA FOUND\nFL85     EQU   X'40'               CHARACTER SETS FOUND\nFLA6     EQU   X'20'               IMPLICIT PARTITION FOUND\nFL81S    EQU   X'08'               USABLE AREA SHORT\nFL85S    EQU   X'04'               CHARACTER SETS SHORT\nFLA6S    EQU   X'02'               IMPLICIT PARTITION SHORT\nSWA6     DC    XL1'0'\nFLA61    EQU   X'80'\nFLA62    EQU   X'40'\nINCMD    DC    CL1' '              INPUT COMMAND\nSELIN    DC    CL2' '              SELECTION INPUT\n         SPACE 1\nQ81R     EQU   *                   8181 = USABLE AREA\nQ81FLAGS DC    XL2'0'              VARIOUS FLAGS\nQ81WUA   DC    XL2'0'              WIDTH OF USABLE AREA\nQ81HUA   DC    XL2'0'              HEIGHT OF USABLE AREA\nQ81UMDXY DC    XL1'0'              UNIT OF MEASURE DOTS X AND Y\nQ81DSX   DC    XL4'0'              DOT SPACING X\nQ81DSY   DC    XL4'0'              DOT SPACING Y\nQ81NXDC  DC    XL1'0'              NUMBER X-UNITS DEFAULT CELL\nQ81NYDC  DC    XL1'0'              NUMBER Y-UNITS DEFAULT CELL\nQ81L     EQU   *-Q81R\n         SPACE 1\n*------- LITERAL POOL\n        LTORG\n         EJECT\n*======= CHECK ENVIRONMENT\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR\n         SPACE 1\nCHECK   $XENT  BASE=R9\n         L     R2,RPARM            GET ENTRY R1\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB)\n         L     R1,APSCB            YES, GET PSCB ADDRESS\n         LTR   R1,R1               TSO RUNNING?\n         BZ    REJECT              NO, I DON'T LIKE BATCH ...\n         L     R15,ATSO            TSO-FLAG ADDRESS\n         TM    0(R15),X'80'        TSO FOREGROUND?\n         BO    OKTSO               YES\nREJECT  WTO    ' -> Only TSO FOREGROUND command allowed',              X\n               ROUTCDE=11,DESC=7\n         B     CHECKZ\n         USING CPPL,R2\n         USING PSCB,R1\nOKTSO    CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?\n         BNE   *+L'*+10            NO\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?\n         BE    OKCMD               YES, TSO COMMAND\n         LR    R1,R2\n         USING IKJEBECA,R1\n         L     R2,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?\n         BE    OKCMD               YES, TSO SUB-COMMAND\n         DROP  R2\n         LA    R0,ERRCMD\n         LA    R1,L'ERRCMD\n         B     CHECKY\nOKCMD   @FSI   FSBFSZ,TERMAT,RQSZ,MF=(E,FSPARM) INITIALIZE FULL-SCREEN\n         LTR   R15,R15\n         BZ    CHECKX              OK, RC=0\n         LA    R0,ERRFIN\n         LA    R1,L'ERRFIN\nCHECKY   ST    R0,ERRMSA\n         STH   R1,ERRMSL\nCHECKZ   LA    R15,4               SET RC=4\nCHECKX  $XRET  CC=(R15)\n         SPACE 1\nERRCMD   DC    C' -> Only TSO command or sub-command allowed'\nERRFIN   DC    C' -> Full-screen initialization failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*======= VERIFY TERMINAL\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR\n         SPACE 1\nVERFY   $XENT  BASE=R9\n         MVC   ASCRIPTR(ASPS),=A(SCRNI,SCRNIL) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     VERFY1              0 - OK\n         LA    R0,ERRCLR           4 - ERROR\n         LA    R1,L'ERRCLR\n         B     VERFYZ\nVERFY1   TM    FSATTRB3,FSTQUERY   CAN DO QUERY ON THIS TUBE?\n         BO    VERFY2              YES\n         LA    R0,ERRRQY           NO, SKIP (NO COLORS, ...)\n         LA    R1,L'ERRRQY\n         B     VERFYZ\nVERFY2  @FSQ   ,                   DO IT\n         LTR   R15,R15\n         BZ    VERFY3\n         LA    R0,ERRQRF\n         LA    R1,L'ERRQRF\n         B     VERFYZ\nVERFY3   LR    R2,R1               QUERY REPLY DATA\n         LR    R3,R1\n         ALR   R3,R0\n         LA    R1,1\n         SLR   R3,R1\nVLOOP    ALR   R2,R1\n         CLR   R2,R3\n         BH    VTEST\n         CLC   2(2,R2),=XL2'8181'  USABLE AREA?\n         BNE   VC85                NO\n         OI    SWXEQ,FL81\n         CLC   0(2,R2),=AL2(21)\n         BNL   *+L'*+8\n         OI    SWXEQ,FL81S\n         B     VNEXT\n         MVC   Q81R(Q81L),4(R2)\n         B     VNEXT\nVC85     CLC   2(2,R2),=XL2'8185'  CHARACTERS SETS?\n         BNE   VCA6                NO\n         OI    SWXEQ,FL85\n         CLC   0(2,R2),=AL2(8)\n         BNL   *+L'*+8\n         OI    SWXEQ,FL85S\n         B     VNEXT\n         MVC   Q85R(Q85L),4(R2)\n         B     VNEXT\nVCA6     CLC   2(2,R2),=XL2'81A6'  IMPLICIT PARTITION?\n         BNE   VNEXT               NO\n         OI    SWXEQ,FLA6\n         CLC   0(2,R2),=AL2(24)\n         BNL   *+L'*+8\n         OI    SWXEQ,FLA6S\n         B     VNEXT\n         CLC   6(2,R2),=XL2'0B01'\n         BE    *+L'*+8\n         OI    SWA6,FLA61\n         B     VNEXT\n         CLC   17(2,R2),=XL2'0B02'\n         BE    *+L'*+8\n         OI    SWA6,FLA62\n         B     VNEXT\n         MVC   QA6WD(L'QA6WD+L'QA6HD),9(R2)\n         MVC   QA6WCD(L'QA6WCD+L'QA6HCD),20(R2)\nVNEXT    XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         B     VLOOP\nVTEST    TM    SWXEQ,FL81+FL85+FLA6\n         BO    VTEST1              ALL FOUND\n         LA    R1,ERRQMS+14\n         TM    SWXEQ,FL81\n         BO    VT85\n         MVC   0(2,R1),=CL2'81'\n         LA    R1,2(R1)\nVT85     TM    SWXEQ,FL85\n         BO    VTA6\n         CLI   ERRQMS+14,C' '\n         BE    VT85M\n         MVI   0(R1),C'/'\n         LA    R1,1(R1)\nVT85M    MVC   0(2,R1),=CL2'85'\n         LA    R1,2(R1)\nVTA6     TM    SWXEQ,FLA6\n         BO    VTNFM\n         CLI   ERRQMS+14,C' '\n         BE    VTA6M\n         MVI   0(R1),C'/'\n         LA    R1,1(R1)\nVTA6M    MVC   0(2,R1),=CL2'A6'\n         LA    R1,2(R1)\nVTNFM    MVC   1(9,R1),=CL9'not found'\n         LA    R0,ERRQMS\n         LA    R1,L'ERRQMS\n         B     VERFYZ\nVTEST1   TM    SWXEQ,FL81S+FL85S+FLA6S\n         BZ    VTEST2              NONE SHORT\n         LA    R1,ERRQMS+14\n         TM    SWXEQ,FL81S\n         BZ    VT85S\n         MVC   0(2,R1),=CL2'81'\n         LA    R1,2(R1)\nVT85S    TM    SWXEQ,FL85S\n         BZ    VTA6S\n         CLI   ERRQMS+14,C' '\n         BE    VT85SM\n         MVI   0(R1),C'/'\n         LA    R1,1(R1)\nVT85SM   MVC   0(2,R1),=CL2'85'\n         LA    R1,2(R1)\nVTA6S    TM    SWXEQ,FLA6S\n         BZ    VTSHM\n         CLI   ERRQMS+14,C' '\n         BE    VTA6SM\n         MVI   0(R1),C'/'\n         LA    R1,1(R1)\nVTA6SM   MVC   0(2,R1),=CL2'A6'\n         LA    R1,2(R1)\nVTSHM    MVC   1(9,R1),=CL9'too short'\n         LA    R0,ERRQMS\n         LA    R1,L'ERRQMS\n         B     VERFYZ\nVTEST2   TM    SWA6,FLA61+FLA62\n         BZ    VCHCK               Q-CODE A6 PROCESSED\n         TM    SWA6,FLA61\n         BZ    *+L'*+12\n         LA    R0,ERRA61\n         LA    R1,L'ERRA61\n         B     VERFYZ\n         LA    R0,ERRA62\n         LA    R1,L'ERRA62\n         B     VERFYZ\nVCHCK    TM    Q81FLAGS,X'20'      OUTBOUND 3270DS S.F.?\n         BZ    *+L'*+12            YES\n         LA    R0,ERRMC1\n         LA    R1,L'ERRMC1\n         B     VERFYZ\n         TM    Q81FLAGS,X'03'      12/14/16-BIT ADDRESSING ALLOWED?\n         BO    *+L'*+12            YES\n         LA    R0,ERRMC2\n         LA    R1,L'ERRMC2\n         B     VERFYZ\n         TM    Q81FLAGS+1,X'60'    MATRIX AND CELLS?\n         BZ    *+L'*+12            YES\n         LA    R0,ERRMC3\n         LA    R1,L'ERRMC3\n         B     VERFYZ\n         CLI   Q81UMDXY,X'01'      MILLIMETERS?\n         BE    *+L'*+12            YES\n         LA    R0,ERRMC4\n         LA    R1,L'ERRMC4\n         B     VERFYZ\n         CLC   Q81NXDC(L'Q81NXDC+L'Q81NYDC),Q85DDMBW\n         BE    *+L'*+12            YES\n         LA    R0,ERRMC5\n         LA    R1,L'ERRMC5\n         B     VERFYZ\n         XR    R0,R0\n         ICM   R0,B'0101',Q81NXDC\n         CLM   R0,B'1111',QA6WCD\n         BE    *+L'*+12            YES\n         LA    R0,ERRMC6\n         LA    R1,L'ERRMC6\n         B     VERFYZ\n         CLC   Q81WUA(L'Q81WUA+L'Q81HUA),QA6WD\n         BE    *+L'*+12            YES\n         LA    R0,ERRMC7\n         LA    R1,L'ERRMC7\n         B     VERFYZ\n         TM    Q85FLAGS,X'02'      CGCSID PRESENT?\n         BO    VSRCH               YES\n         LA    R0,ERRMC8\n         LA    R1,L'ERRMC8\nVERFYZ   ST    R0,ERRMSA\n         STH   R1,ERRMSL\n         LA    R15,4               SET RC=4\n         B     VERFYX\nVSRCH    L     R2,ATIOT            SEARCH DD IF SNAP AVAILABLE\n         USING TIODSECT,R2\nVSNAP    CLC   TIOELNGH(4),=F'0'\n         BE    VINIT\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP '\n         BNE   *+L'*+4\n         OI    OPTFS,FSSNAP        SET USER WANT SNAP SCREEN INPUT\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     VSNAP\n         DROP  R2\nVINIT    XR    R15,R15             SET RC=0\nVERFYX  $XRET  CC=(R15)\n         SPACE 1\nQ85R     EQU   *                   8185 = CHARACTER SETS\nQ85FLAGS DC    XL2'0'              VARIOUS FLAGS\nQ85DDMBW DC    XL1'0'              DEFAULT DOT MATRIX BLOCK WIDTH\nQ85DDMBH DC    XL1'0'              DEFAULT DOT MATRIX BLOCK HEIGHT\nQ85L     EQU   *-Q85R\n*                                  81A6 = IMPLICIT PARTITION\nQA6WD    DC    XL2'0'              WIDTH DEFAULT IPZ CELLS\nQA6HD    DC    XL2'0'              HEIGHT DEFAULT IPZ CELLS\nQA6WCD   DC    XL2'0'              WIDTH CHAR. CELL DEFAULT\nQA6HCD   DC    XL2'0'              HEIGHT CHAR. CELL DEFAULT\n         SPACE 1\nERRCLR   DC    C' -> Full-screen clear failed'\nERRRQY   DC    C' -> Can''t do QUERY on this tube'\nERRQRF   DC    C' -> Obtain QUERY reply data failed'\nERRQMS   DC    CL40' -> Q-code(s) '\nERRA61   DC    CL40' -> Q-code A6 : unexpected 1st parameter'\nERRA62   DC    CL40' -> Q-code A6 : unexpected 2nd parameter'\nERRMC1   DC    C' -> OUTBOUND 3270DS not supported in Q-code 81'\nERRMC2   DC    C' -> 12/14/16-bit addressing not allowed in Q-code 81'\nERRMC3   DC    C' -> Non-matrix type or PELs values in Q-code 81'\nERRMC4   DC    C' -> Unit of measure not millimeters in Q-code 81'\nERRMC5   DC    C' -> Q-codes 81-85 : cell units/matrix block default'\nERRMC6   DC    C' -> Q-codes 81-A6 : cell units/WCD-HCD default'\nERRMC7   DC    C' -> Q-codes 81-A6 : WUA-HUA/WD-HD cells default'\nERRMC8   DC    C' -> \"CGCSID\" absent in Q-code 85'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nSCRNI    $FS   CC=EW,WCC=(RMDT),SBA=(24,79),MF=L\n         $FS   SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(IC),MF=L\nSCRNIL   EQU   *-SCRNI\n         EJECT\n*======= DISPLAY SOME TERMINAL CHARACTERISTICS\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nDTINF   $XENT  BASE=R9\n         L     R8,=A(INF,INFL,RSCRN)\n         USING INF,R8              SCREEN IMAGE ADDRESSABILITY\n         XR    R3,R3               DO X-AXIS COMPUTATION\n         LR    R2,R3\n         ICM   R3,B'0011',Q81WUA\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFWUA(L'INFWUA),WRKFL1+L'WRKFL1-L'INFWUA\n         XR    R0,R0\n         IC    R0,Q81NXDC\n         CVD   R0,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFNUX(L'INFNUX),WRKFL1+L'WRKFL1-L'INFNUX\n         MR    R2,R0\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFTXU(L'INFTXU),WRKFL1+L'WRKFL1-L'INFTXU\n         ICM   R0,B'1111',Q81DSX\n         SRDL  R0,16\n         CVD   R0,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         SRL   R1,16\n         CVD   R1,DBLW\n         MVC   WRKFL2,=XL8'4020202020202120'\n         ED    WRKFL2,DBLW+4\n         LA    R14,WRKFL2+L'WRKFL2-2\n         CLI   0(R14),C' '\n         BE    *+L'*+4\n         BCT   R14,*-8\n         MVI   0(R14),C'/'\n         BCTR  R14,0\n         LA    R15,WRKFL1+L'WRKFL1-1\n         CLI   0(R15),C' '\n         BE    *+L'*+12\n         MVC   0(1,R14),0(R15)\n         BCTR  R14,0\n         BCT   R15,*-16\n         MVC   INFDSX(L'INFDSX),WRKFL2+L'WRKFL2-L'INFDSX\n         LR    R14,R3\n         SRL   R14,1\n         STH   R14,MAXISX\n         CVD   R14,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFXCV(L'INFXCV),WRKFL1+L'WRKFL1-L'INFXCV\n         MR    R2,R0\n         DR    R2,R1\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFGHS(L'INFGHS),WRKFL1+L'WRKFL1-L'INFGHS\n         XR    R3,R3               DO Y-AXIS COMPUTATION\n         LR    R2,R3\n         ICM   R3,B'0011',Q81HUA\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFHUA(L'INFHUA),WRKFL1+L'WRKFL1-L'INFHUA\n         XR    R0,R0\n         IC    R0,Q81NYDC\n         CVD   R0,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFNUY(L'INFNUY),WRKFL1+L'WRKFL1-L'INFNUY\n         MR    R2,R0\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFTYU(L'INFTYU),WRKFL1+L'WRKFL1-L'INFTYU\n         ICM   R0,B'1111',Q81DSY\n         SRDL  R0,16\n         CVD   R0,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         SRL   R1,16\n         CVD   R1,DBLW\n         MVC   WRKFL2,=XL8'4020202020202120'\n         ED    WRKFL2,DBLW+4\n         LA    R14,WRKFL2+L'WRKFL2-2\n         CLI   0(R14),C' '\n         BE    *+L'*+4\n         BCT   R14,*-8\n         MVI   0(R14),C'/'\n         BCTR  R14,0\n         LA    R15,WRKFL1+L'WRKFL1-1\n         CLI   0(R15),C' '\n         BE    *+L'*+12\n         MVC   0(1,R14),0(R15)\n         BCTR  R14,0\n         BCT   R15,*-16\n         MVC   INFDSY(L'INFDSY),WRKFL2+L'WRKFL2-L'INFDSY\n         LR    R14,R3\n         SRL   R14,1\n         STH   R14,MAXISY\n         CVD   R14,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFYCV(L'INFYCV),WRKFL1+L'WRKFL1-L'INFYCV\n         MR    R2,R0\n         DR    R2,R1\n         CVD   R3,DBLW\n         MVC   WRKFL1,=XL8'4020202020202120'\n         ED    WRKFL1,DBLW+4\n         MVC   INFGVS(L'INFGVS),WRKFL1+L'WRKFL1-L'INFGVS\n         MVC   ASCRIPTR(ASPL),=A(INF,INFL,RSCRN) SET PTR'S\n         MVI   INCMD,C' '          RESET INPUT FIELD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     DTINFX              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     DTINFY              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BM    DTINFZ              IMMEDIATE TERMINATION\n         XR    R15,R15             ELSE CONTINUE, SET RC=0\n         B     DTINFX\n         DROP  R8\nDTINFY   LA    R0,ERRINF\n         LA    R1,L'ERRINF\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nDTINFZ   LA    R15,4               SET RC=4\nDTINFX  $XRET  CC=(R15)\n         SPACE 1\nERRINF   DC    C' -> Display terminal characteristics failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nINF      $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<=',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,14),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,YELLOW),MF=L\n         $FS   TEXT='Here follows some terminal',MF=L\n         $FS   TEXT=' GRAPHIC characteristics :',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(2,80),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(4,3),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,WHITE),MF=L\n         $FS   TEXT='Note :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,RED),MF=L\n         $FS   TEXT='values belongs to \"IMPLICIT',MF=L\n         $FS   TEXT=' PARTITION DEFAULT\" screen size.',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(4,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(5,3),SF=(SKIP),MF=L\n         $FS   SBA=(5,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(6,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='         Width of Usable Area in cells :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFWUA   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(6,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(7,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='        Height of Usable Area in cells :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFHUA   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(7,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(8,3),SF=(SKIP),MF=L\n         $FS   SBA=(8,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(9,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='     Number of X-units in default cell :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFNUX   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(9,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(10,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='     Number of Y-units in default cell :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFNUY   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(10,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(11,3),SF=(SKIP),MF=L\n         $FS   SBA=(11,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(12,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='         Total of X-units (horizontal) :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFTXU   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(12,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(13,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='           Total of Y-units (vertical) :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFTYU   $FS   TEXT=(' ',8),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(13,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(14,3),SF=(SKIP),MF=L\n         $FS   SBA=(14,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(15,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='     Dot spacing in the X (horizontal) :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFDSX   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='of MMs (millimeters)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(15,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(16,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='       Dot spacing in the Y (vertical) :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFDSY   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='of MMs',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(16,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(17,3),SF=(SKIP),MF=L\n         $FS   SBA=(17,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(18,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='        Graphic screen horizontal size :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFGHS   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='MMs',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(18,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(19,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='          Graphic screen vertical size :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFGVS   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='MMs',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(19,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(20,3),SF=(SKIP),MF=L\n         $FS   SBA=(20,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(21,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='       X-axis coordinates values range :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFXCV   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='(from -X to +X)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(21,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(22,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='       Y-axis coordinates values range :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L\nINFYCV   $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='(from -Y to +Y)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(22,78),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(24,1),SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nINFL     EQU   *-INF\n         EJECT\n*======= INITIALIZATION OF TITLES DISPLAY\n*              RETURN CODE : ALWAYS 0\n         SPACE 1\nINITT   $XENT  BASE=R9\n         XC    DBLW,DBLW           WIDTH-HEIGHT\n         MVC   DBLW+2(L'Q81DSX),Q81DSX\n         LH    R1,INITWH\n         MH    R1,DBLW+4\n         XR    R0,R0\n         D     R0,DBLW\n         STH   R1,TXTW\n         LH    R1,INIQWH\n         MH    R1,DBLW+4\n         XR    R0,R0\n         D     R0,DBLW\n         STH   R1,TXQW\n         MVC   DBLW+2(L'Q81DSY),Q81DSY\n         LH    R1,INITWH+L'INITWH\n         MH    R1,DBLW+4\n         XR    R0,R0\n         D     R0,DBLW\n         STH   R1,TXTH\n         LH    R1,INIQWH+L'INIQWH\n         MH    R1,DBLW+4\n         XR    R0,R0\n         D     R0,DBLW\n         STH   R1,TXQH\n         XR    R1,R1               X-Y CO-ORD'S\n         LH    R0,INITXY\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STH   R1,TXT1XY\n         XR    R1,R1\n         LH    R0,INITXY+L'INITXY\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STH   R1,TXT1XY+L'TXT1XY\n         XR    R1,R1\n         LH    R0,INIQXY\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STH   R1,TXQXY\n         XR    R1,R1\n         LH    R0,INIQXY+L'INIQXY\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STH   R1,TXQXY+L'TXQXY\n         LH    R0,TXTW\n         XR    R1,R1\n         LH    R1,TXT1XY\n         MH    R0,=Y(L'TTESTT)\n         AR    R1,R0\n         STH   R1,TXT2XY\n         MVC   TXT2XY+L'TXT2XY,TXT1XY+L'TXT1XY\n         XR    R15,R15             SET RC=0\n        $XRET  CC=(R15)\n         SPACE 1\nINITWH   DC    H'3'                WIDTH (IN MMS)\n         DC    H'8'                HEIGHT (IN MMS)\nINIQWH   DC    H'5'                WIDTH (IN MMS)\n         DC    H'12'               HEIGHT (IN MMS)\n*                                  FACTORS (% OF X,Y) TABLE\nINITXY   DC    H'-95'              X CO-ORD OF STRING\n         DC    H'-95'              Y \" \"\nINIQXY   DC    H'+95'              X CO-ORD OF STRING\n         DC    H'+95'              Y \" \"\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*======= SELECTION DISPLAY\n*              RETURN CODE : 0 = OK, R1 = 0 OR SELECTION NUMBER\n*                            4 = ERROR\n*                            8 = END\n         SPACE 1\nSELDS   $XENT  BASE=R9\n         L     R8,=A(SEL,SELL,RSSEL)\n         USING SEL,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(SEL,SELL,RSSEL) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,SELLN23I)     SET NORMAL INPUT\n         MVC   SELIN,=CL2' '       RESET INPUT FIELD\nSELDSE   MVC   SELLN23R,SELIN\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     SELDSR              0 - INVALID (NO PF-KEY SUPPORTED)\n         B     SELDSY              4 - ERROR\n         XR    R2,R2               8 - RESET NUMBER\n         LTR   R1,R1               DID USER TYPE IN?\n         BM    SELDST              IMMEDIATE TERMINATION\n         BZ    SELDSS              NONE, ALL SEQUENTIALLY\n         CLC   SELIN,=CL2' '\n         BE    SELDSS              NONE, ALL SEQUENTIALLY\n         CLI   SELIN,C' '\n         BE    SELDSN\n         CLI   SELIN,C'0'\n         BL    SELDSR\n         CLI   SELIN,C'9'\n         BH    SELDSR\n         MVC   DBLW(1),SELIN\n         NI    DBLW,X'0F'\n         IC    R2,DBLW\nSELDSN   XR    R1,R1\n         CLI   SELIN+1,C' '\n         BE    SELDSW\n         CLI   SELIN+1,C'0'\n         BL    SELDSR\n         CLI   SELIN+1,C'9'\n         BH    SELDSR\n         MVC   DBLW(1),SELIN+1\n         NI    DBLW,X'0F'\n         IC    R1,DBLW\n         LTR   R2,R2\n         BZ    *+L'*+4\n         MH    R2,=H'10'\nSELDSW   AR    R2,R1\n         BNP   SELDSR              ERROR, NULL\nSELDSS   CH    R2,=Y(((VLAST-VANIM)+L'VANIM)/L'VANIM) VERIFY VALUE\n         BH    SELDSR              ERROR, TOO LARGE\n         L     R14,4(R13)          PREVIOUS SAVE AREA\n         ST    R2,24(R14)          SET BACK R1\n         XR    R15,R15             SET RC=0\n         B     SELDSX\nSELDSR  $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,SELLN23I)     SET ERROR INPUT\n         B     SELDSE\n         DROP  R8\nSELDST   LA    R15,8               SET RC=8\n         B     SELDSX\nSELDSY   LA    R0,ERRSEL\n         LA    R1,L'ERRSEL\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nSELDSZ   LA    R15,4               SET RC=4\nSELDSX  $XRET  CC=(R15)\n         SPACE 1\nERRSEL   DC    C' -> Selection Display failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nSEL      $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,YELLOW),MF=L\n         $FS   TEXT='List of available tests :',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(3,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 1 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Graphic Cursor',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(4,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 2 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='LINE (X,Y) vector',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(5,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 3 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='FILLET (X,Y) vector',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(6,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 4 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Display Image',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(7,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 5 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Display Full Arc',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(8,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 6 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Move LINE (X,Y)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(9,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 7 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Copy LINE (X,Y)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(10,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 8 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Draw LINE (X,Y)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(11,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT=' 9 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Move Full Arc',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(12,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT='10 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Draw Full Arc',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(13,20),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT='11 -',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='Draw a Cube',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(23,1),MF=L\nSELLN23I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nSELLN23R $FS   TEXT=(' ',2),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   TEXT='<= ENTER',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='a specific test',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   TEXT='number',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='or just',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   TEXT='ENTER',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   TEXT='to execute all sequentially.',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(24,7),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,BLUE),MF=L\n         $FS   TEXT='Use',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='PA-1/2/3',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,BLUE),MF=L\n         $FS   TEXT='to terminate.',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L\n         $FS   TEXT='Note :',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,RED),MF=L\n         $FS   TEXT='all PF''s are inactive ',MF=L\n         AIF   ('&EUDCH' EQ 'EUROPE').DCH1\n         $FS   TEXT='!!!',MF=L\n         AGO   .DCH2\n.DCH1    $FS   TEXT='|||',MF=L\n.DCH2    $FS   SF=(SKIP),MF=L\n         $FS   SBA=(23,2),MF=L\n         $FS   SF=(IC),MF=L\nSELL     EQU   *-SEL\n         EJECT\n*======= ANIMATION 1 (ORIGINAL : PS4)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM1   $XENT  BASE=R9\n         L     R8,=A(AN1,AN1L,RSCRN)\n         USING AN1,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   AN1T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN1T2(2*L'AN1T2),TXT1XY\n         MVC   AN1T3(2*L'AN1T3),TXT2XY\n         MVC   AN1Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN1Q2(2*L'AN1Q2),TXQXY\n         MVC   ASCRIPTR(ASPL),=A(AN1,AN1L,RSCRN) SET PTR'S\nANIM1R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN1LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM1E   MVC   AN1LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM1X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM1Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM1E              NONE, RESHOW\n         BM    ANIM1Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM1R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM1X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN1LN1I)      SET ERROR INPUT\n         B     ANIM1E\n         DROP  R8\nANIM1Y   LA    R0,ERRAN1\n         LA    R1,L'ERRAN1\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM1Z   LA    R15,4               SET RC=4\nANIM1X  $XRET  CC=(R15)\n         SPACE 1\nERRAN1   DC    C' -> \"ANIM1\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN1      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN1SF1   DC    AL2(AN1SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN1SF1L  EQU   *-AN1SF1\nAN1SF2   DC    AL2(AN1SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F11'           SFID = OBJECT CONTROL\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'30'               BEGIN PROCEDURE\n         DC    AL1(AN1P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN1P1    DC    CL4'CSAC'             NAME OF PROCEDURE TO BE CREATED\n         DC    XL2'00'               RESERVED\n         DC    AL2(AN1PR1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL2'00'               RESERVED\nAN1P1L   EQU   *-AN1P1\nAN1PR1   EQU   *                   PROCEDURE DATA\n         DC    XL1'08'             GATTCUR (ATTACH GRAPHIC CURSOR)\n         DC    XL1'00'\nAN1PR1L  EQU   *-AN1PR1\nAN1SF2L  EQU   *-AN1SF2\nAN1SF3   DC    AL2(AN1SF3L)        L = LENGTH OF S.F.\n         DC    XL2'0F0F'           SFID = OBJECT DATA\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'40'               BEGIN DATA UNIT\n         DC    AL1(AN1P2L)           LENGTH OF FOLLOWING PARAMETERS\nAN1P2    DC    XL4'00'               NAME OF PROCEDURE TO BE CREATED\n         DC    XL1'00'               RESERVED\n         DC    XL1'00'               NEW DATA UNIT\n         DC    AL2(AN1DU1L)          LENGTH OF DATA UNIT TO BE CREATED\nAN1P2L   EQU   *-AN1P2\nAN1DU1   EQU   *                   DATA UNIT DATA\n         DC    AL2(AN1DU2L)          LENGTH OF DATA\n         DC    CL2'RB'\nAN1DU2   DC    HL2'2',HL2'22'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'14'\n         DC    HL2'96',HL2'0'\n         DC    HL2'1',HL2'0'\n         DC    HL2'256',HL2'0'\n         DC    HL2'-32768'\n         DC    HL2'4',HL2'0'\n         DC    HL2'5',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'1024'\n         DC    HL2'7',HL2'256'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'0',HL2'0'\n         DC    HL2'24708',HL2'67'\n         DC    HL2'67'\nAN1DU2L  EQU   *-AN1DU2\nAN1DU1L  EQU   *-AN1DU1\nAN1SF3L  EQU   *-AN1SF3\nAN1SF4   DC    AL2(AN1SF4L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN1P3L)           LENGTH OF FOLLOWING PARAMETERS\nAN1P3    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN1SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN1P3L   EQU   *-AN1P3\nAN1SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN1T1L)           LENGTH OF FOLLOWING DATA\nAN1T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN1T1L   EQU   *-AN1T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN1T2L)           LENGTH OF FOLLOWING DATA\nAN1T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nTTESTT   DC    CL6'Test :'             STRING\nAN1T2L   EQU   *-AN1T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN1T3L)           LENGTH OF FOLLOWING DATA\nAN1T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL16' Graphic Cursor'   STRING\nAN1T3L   EQU   *-AN1T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN1Q1L)           LENGTH OF FOLLOWING DATA\nAN1Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN1Q1L   EQU   *-AN1Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN1Q2L)           LENGTH OF FOLLOWING DATA\nAN1Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM1'              STRING\nAN1Q2L   EQU   *-AN1Q2\nAN1SG1L  EQU   *-AN1SG1\nAN1SF4L  EQU   *-AN1SF4\nAN1SF5   DC    AL2(AN1SF5L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN1LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN1LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN1SF5L  EQU   *-AN1SF5\nAN1L     EQU   *-AN1\n         EJECT\n*======= ANIMATION 2 (ORIGINAL : PS3)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM2   $XENT  BASE=R9\n         L     R8,=A(AN2,AN2L,RSCRN)\n         USING AN2,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   AN2T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN2T2(2*L'AN2T2),TXT1XY\n         MVC   AN2T3(2*L'AN2T3),TXT2XY\n         MVC   AN2Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN2Q2(2*L'AN2Q2),TXQXY\n         LH    R0,TXTW\n         XR    R1,R1\n         LH    R1,TXT2XY\n         MH    R0,=Y(L'AN2T3T)\n         AR    R1,R0\n         STCM  R1,B'0011',AN2T4\n         MVC   AN2T4+L'AN2T4,TXT2XY+L'TXT2XY\n         LA    R2,AN2MFN\n         LA    R3,AN2MF\n         LA    R4,AN2D1\n         LA    R5,AN2D2\nANIM2L   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         STCM  R1,B'0011',0(R5)\n         XR    R1,R1\n         LH    R0,L'AN2MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN2D1(R4)\n         STCM  R1,B'0011',L'AN2D2(R5)\n         LA    R3,2*L'AN2MF(R3)\n         LA    R4,2*L'AN2D1(R4)\n         LA    R5,2*L'AN2D2(R5)\n         BCT   R2,ANIM2L\n         MVC   ASCRIPTR(ASPL),=A(AN2,AN2L,RSCRN) SET PTR'S\nANIM2R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN2LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM2E   MVC   AN2LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM2X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM2Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM2E              NONE, RESHOW\n         BM    ANIM2Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM2R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM2X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN2LN1I)      SET ERROR INPUT\n         B     ANIM2E\n         DROP  R8\nANIM2Y   LA    R0,ERRAN2\n         LA    R1,L'ERRAN2\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM2Z   LA    R15,4               SET RC=4\nANIM2X  $XRET  CC=(R15)\n         SPACE 1\n*                                  FACTORS (% OF X,Y) TABLE\nAN2MF    DC    H'+45',H'+55'            LINE START\n         DC    H'+25',H'+85'            1ST LINE END\n         DC    H'-30',H'-35'            2ND LINE END\nAN2MFN   EQU   (*-AN2MF)/(2*L'AN2MF)\nERRAN2   DC    C' -> \"ANIM2\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN2      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN2SF1   DC    AL2(AN2SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN2SF1L  EQU   *-AN2SF1\nAN2SF2   DC    AL2(AN2SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN2P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN2P1    DC    FL4'1'                SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN2SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN2P1L   EQU   *-AN2P1\nAN2SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN2D1L)           LENGTH OF FOLLOWING DATA\nAN2D1    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 1ST LINE END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 2ND LINE END\n         DC    HL2'0'                  Y \" \"\nAN2D1L   EQU   *-AN2D1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN2D2L)           LENGTH OF FOLLOWING DATA\nAN2D2    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 1ST LINE END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 2ND LINE END\n         DC    HL2'0'                  Y \" \"\nAN2D2L   EQU   *-AN2D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN2D3L)           LENGTH OF FOLLOWING DATA\nAN2D3    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN2D3L   EQU   *-AN2D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN2T1L)           LENGTH OF FOLLOWING DATA\nAN2T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN2T1L   EQU   *-AN2T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN2T2L)           LENGTH OF FOLLOWING DATA\nAN2T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN2T2T   DC    CL6'Test :'             STRING\nAN2T2L   EQU   *-AN2T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN2T3L)           LENGTH OF FOLLOWING DATA\nAN2T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN2T3T   DC    CL18' LINE (X,Y) vector' STRING\nAN2T3L   EQU   *-AN2T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'01'               COLOR = BLUE\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN2T4L)           LENGTH OF FOLLOWING DATA\nAN2T4    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL26' (three points connection)' STRING\nAN2T4L   EQU   *-AN2T4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN2Q1L)           LENGTH OF FOLLOWING DATA\nAN2Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN2Q1L   EQU   *-AN2Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN2Q2L)           LENGTH OF FOLLOWING DATA\nAN2Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM2'              STRING\nAN2Q2L   EQU   *-AN2Q2\nAN2SG1L  EQU   *-AN2SG1\nAN2SF2L  EQU   *-AN2SF2\nAN2SF3   DC    AL2(AN2SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN2LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN2LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN2SF3L  EQU   *-AN2SF3\nAN2L     EQU   *-AN2\n         EJECT\n*======= ANIMATION 3 (ORIGINAL : PS5)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM3   $XENT  BASE=R9\n         L     R8,=A(AN3,AN3L,RSCRN)\n         USING AN3,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   AN3T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN3T2(2*L'AN3T2),TXT1XY\n         MVC   AN3T3(2*L'AN3T3),TXT2XY\n         LH    R0,TXTW\n         XR    R1,R1\n         LH    R1,TXT2XY\n         MH    R0,=Y(L'AN3T3T)\n         AR    R1,R0\n         STCM  R1,B'0011',AN3T4\n         MVC   AN3T4+L'AN3T4,TXT2XY+L'TXT2XY\n         MVC   AN3Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN3Q2(2*L'AN3Q2),TXQXY\n         LA    R2,AN3MFN\n         LA    R3,AN3MF\n         LA    R4,AN3D1\n         LA    R5,AN3D2\nANIM3L   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         STCM  R1,B'0011',0(R5)\n         XR    R1,R1\n         LH    R0,L'AN3MF(R3)\n         MH    R0,MAXISY\n         LTR   R0,R0\n         BZ    *+L'*+12\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN3D1(R4)\n         STCM  R1,B'0011',L'AN3D2(R5)\n         LA    R3,2*L'AN3MF(R3)\n         LA    R4,2*L'AN3D1(R4)\n         LA    R5,2*L'AN3D2(R5)\n         BCT   R2,ANIM3L\n         MVC   ASCRIPTR(ASPL),=A(AN3,AN3L,RSCRN) SET PTR'S\nANIM3R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN3LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM3E   MVC   AN3LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM3X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM3Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM3E              NONE, RESHOW\n         BM    ANIM3Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM3R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM3X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN3LN1I)      SET ERROR INPUT\n         B     ANIM3E\n         DROP  R8\nANIM3Y   LA    R0,ERRAN3\n         LA    R1,L'ERRAN3\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM3Z   LA    R15,4               SET RC=4\nANIM3X  $XRET  CC=(R15)\n         SPACE 1\n*                                  FACTORS (% OF X,Y) TABLE\nAN3MF    DC    H'+45',H'+55'            LINE START\n         DC    H'+25',H'+85'            1ST LINE END\n         DC    H'-30',H'-35'            2ND LINE END\nAN3MFN   EQU   (*-AN3MF)/(2*L'AN3MF)\nERRAN3   DC    C' -> \"ANIM3\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN3      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN3SF1   DC    AL2(AN3SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN3SF1L  EQU   *-AN3SF1\nAN3SF2   DC    AL2(AN3SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN3P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN3P1    DC    FL4'1'                SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN3SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN3P1L   EQU   *-AN3P1\nAN3SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'C5'             GFLT (FILLET AT GIVEN POSITION)\n         DC    AL1(AN3D1L)           LENGTH OF FOLLOWING DATA\nAN3D1    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 1ST LINE END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 2ND LINE END\n         DC    HL2'0'                  Y \" \"\nAN3D1L   EQU   *-AN3D1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN3D2L)           LENGTH OF FOLLOWING DATA\nAN3D2    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 1ST LINE END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF 2ND LINE END\n         DC    HL2'0'                  Y \" \"\nAN3D2L   EQU   *-AN3D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN3D3L)           LENGTH OF FOLLOWING DATA\nAN3D3    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN3D3L   EQU   *-AN3D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN3T1L)           LENGTH OF FOLLOWING DATA\nAN3T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN3T1L   EQU   *-AN3T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN3T2L)           LENGTH OF FOLLOWING DATA\nAN3T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN3T2T   DC    CL6'Test :'             STRING\nAN3T2L   EQU   *-AN3T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN3T3L)           LENGTH OF FOLLOWING DATA\nAN3T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN3T3T   DC    CL20' FILLET (X,Y) vector' STRING\nAN3T3L   EQU   *-AN3T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'01'               COLOR = BLUE\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN3T4L)           LENGTH OF FOLLOWING DATA\nAN3T4    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL26' (three points connection)' STRING\nAN3T4L   EQU   *-AN3T4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN3Q1L)           LENGTH OF FOLLOWING DATA\nAN3Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN3Q1L   EQU   *-AN3Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN3Q2L)           LENGTH OF FOLLOWING DATA\nAN3Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM3'              STRING\nAN3Q2L   EQU   *-AN3Q2\nAN3SG1L  EQU   *-AN3SG1\nAN3SF2L  EQU   *-AN3SF2\nAN3SF3   DC    AL2(AN3SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN3LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN3LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN3SF3L  EQU   *-AN3SF3\nAN3L     EQU   *-AN3\n         EJECT\n*======= ANIMATION 4 (ORIGINAL : PS7)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM4   $XENT  BASE=R9\n         L     R8,=A(AN4,AN4L,RSCRN)\n         USING AN4,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   AN4T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN4T2(2*L'AN4T2),TXT1XY\n         MVC   AN4T3(2*L'AN4T3),TXT2XY\n         LH    R0,TXTW\n         XR    R1,R1\n         LH    R1,TXT2XY\n         MH    R0,=Y(L'AN4T3T)\n         AR    R1,R0\n         STCM  R1,B'0011',AN4T4\n         MVC   AN4T4+L'AN4T4,TXT2XY+L'TXT2XY\n         MVC   AN4Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN4Q2(2*L'AN4Q2),TXQXY\n         MVC   ASCRIPTR(ASPL),=A(AN4,AN4L,RSCRN) SET PTR'S\nANIM4R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN4LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM4E   MVC   AN4LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM4X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM4Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM4E              NONE, RESHOW\n         BM    ANIM4Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM4R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM4X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN4LN1I)      SET ERROR INPUT\n         B     ANIM4E\n         DROP  R8\nANIM4Y   LA    R0,ERRAN4\n         LA    R1,L'ERRAN4\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM4Z   LA    R15,4               SET RC=4\nANIM4X  $XRET  CC=(R15)\n         SPACE 1\nERRAN4   DC    C' -> \"ANIM4\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN4      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN4SF1   DC    AL2(AN4SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN4SF1L  EQU   *-AN4SF1\nAN4SF2   DC    AL2(AN4SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN4P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN4P1    DC    FL4'1'                SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN4SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN4P1L   EQU   *-AN4P1\n*        THE IMAGE CONSISTS OF SURROUNDING SQUARES OF \"ON\" DISPLAY\n*              POINTS (GREEN/YELLOW) SURROUNDING A SMALL \"OFF\" CENTER\n*              AT POSITION X,Y = 0,0.\nAN4SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\n         DC    XL1'0B'               PATTERN = DIAG 1 (BL TO TR)\n         DC    XL1'D1'             GBIMG (IMAGE BEGIN, AT GIVEN POS.)\n         DC    AL1(AN4D1L)           LENGTH OF FOLLOWING DATA\nAN4D1    DC    HL2'0'                  X CO-ORD OF IMAGE\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  FORMAT OF IMAGE\n         DC    HL2'32'                 WIDTH OF IMAGE IN PELS\n         DC    HL2'16'                 HEIGHT OF IMAGE IN PELS\nAN4D1L   EQU   *-AN4D1\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I1)          LENGTH OF FOLLOWING DATA\nAN4I1    DC    BL4'11111111111111111111111111111111'\n*        WIDTH ==>>----+----1----+----2----+----3--<<== 32 BITS = PELS\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I2)          LENGTH OF FOLLOWING DATA\nAN4I2    DC    BL4'11111111111111111111111111111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I3)          LENGTH OF FOLLOWING DATA\nAN4I3    DC    BL4'11111111111111111111111111111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I4)          LENGTH OF FOLLOWING DATA\nAN4I4    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I5)          LENGTH OF FOLLOWING DATA\nAN4I5    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I6)          LENGTH OF FOLLOWING DATA\nAN4I6    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I7)          LENGTH OF FOLLOWING DATA\nAN4I7    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I8)          LENGTH OF FOLLOWING DATA\nAN4I8    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I9)          LENGTH OF FOLLOWING DATA\nAN4I9    DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I10)         LENGTH OF FOLLOWING DATA\nAN4I10   DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I11)         LENGTH OF FOLLOWING DATA\nAN4I11   DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I12)         LENGTH OF FOLLOWING DATA\nAN4I12   DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I13)         LENGTH OF FOLLOWING DATA\nAN4I13   DC    BL4'11111110000000000000000001111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I14)         LENGTH OF FOLLOWING DATA\nAN4I14   DC    BL4'11111111111111111111111111111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I15)         LENGTH OF FOLLOWING DATA\nAN4I15   DC    BL4'11111111111111111111111111111111'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4I16)         LENGTH OF FOLLOWING DATA\nAN4I16   DC    BL4'11111111111111111111111111111111'\n         DC    XL1'93'             GEIMG (IMAGE END)\n         DC    AL1(0)              NO FOLLOWING DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'D1'             GBIMG (IMAGE BEGIN, AT GIVEN POS.)\n         DC    AL1(AN4D2L)           LENGTH OF FOLLOWING DATA\nAN4D2    DC    HL2'0'                  X CO-ORD OF IMAGE\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  FORMAT OF IMAGE\n         DC    HL2'32'                 WIDTH OF IMAGE IN PELS\n         DC    HL2'16'                 HEIGHT OF IMAGE IN PELS\nAN4D2L   EQU   *-AN4D2\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J1)          LENGTH OF FOLLOWING DATA\nAN4J1    DC    BL4'00000000000000000000000000000000'\n*        WIDTH ==>>----+----1----+----2----+----3--<<== 32 BITS = PELS\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J2)          LENGTH OF FOLLOWING DATA\nAN4J2    DC    BL4'00000000000000000000000000000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J3)          LENGTH OF FOLLOWING DATA\nAN4J3    DC    BL4'00000000000000000000000000000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J4)          LENGTH OF FOLLOWING DATA\nAN4J4    DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J5)          LENGTH OF FOLLOWING DATA\nAN4J5    DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J6)          LENGTH OF FOLLOWING DATA\nAN4J6    DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J7)          LENGTH OF FOLLOWING DATA\nAN4J7    DC    BL4'00000001111111000011111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J8)          LENGTH OF FOLLOWING DATA\nAN4J8    DC    BL4'00000001111111000011111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J9)          LENGTH OF FOLLOWING DATA\nAN4J9    DC    BL4'00000001111111000011111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J10)         LENGTH OF FOLLOWING DATA\nAN4J10   DC    BL4'00000001111111000011111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J11)         LENGTH OF FOLLOWING DATA\nAN4J11   DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J12)         LENGTH OF FOLLOWING DATA\nAN4J12   DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J13)         LENGTH OF FOLLOWING DATA\nAN4J13   DC    BL4'00000001111111111111111110000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J14)         LENGTH OF FOLLOWING DATA\nAN4J14   DC    BL4'00000000000000000000000000000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J15)         LENGTH OF FOLLOWING DATA\nAN4J15   DC    BL4'00000000000000000000000000000000'\n         DC    XL1'92'             GIMD (IMAGE DATA)\n         DC    AL1(L'AN4J16)         LENGTH OF FOLLOWING DATA\nAN4J16   DC    BL4'00000000000000000000000000000000'\n         DC    XL1'93'             GEIMG (IMAGE END)\n         DC    AL1(0)              NO FOLLOWING DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN4T1L)           LENGTH OF FOLLOWING DATA\nAN4T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN4T1L   EQU   *-AN4T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN4T2L)           LENGTH OF FOLLOWING DATA\nAN4T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN4T2T   DC    CL6'Test :'             STRING\nAN4T2L   EQU   *-AN4T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN4T3L)           LENGTH OF FOLLOWING DATA\nAN4T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN4T3T   DC    CL14' Display Image'    STRING\nAN4T3L   EQU   *-AN4T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'01'               COLOR = BLUE\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN4T4L)           LENGTH OF FOLLOWING DATA\nAN4T4    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL40' (squares left-top corner on X,Y = 0,0)' STRING\nAN4T4L   EQU   *-AN4T4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN4Q1L)           LENGTH OF FOLLOWING DATA\nAN4Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN4Q1L   EQU   *-AN4Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN4Q2L)           LENGTH OF FOLLOWING DATA\nAN4Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM4'              STRING\nAN4Q2L   EQU   *-AN4Q2\nAN4SG1L  EQU   *-AN4SG1\nAN4SF2L  EQU   *-AN4SF2\nAN4SF3   DC    AL2(AN4SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN4LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN4LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN4SF3L  EQU   *-AN4SF3\nAN4L     EQU   *-AN4\n         EJECT\n*======= ANIMATION 5 (ORIGINAL : PS6)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM5   $XENT  BASE=R9\n         L     R8,=A(AN5,AN5L,RSCRN)\n         USING AN5,R8              SCREEN IMAGE ADDRESSABILITY\n         MVC   AN5T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN5T2(2*L'AN5T2),TXT1XY\n         MVC   AN5T3(2*L'AN5T3),TXT2XY\n         MVC   AN5Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN5Q2(2*L'AN5Q2),TXQXY\n         LA    R2,AN5MFN\n         LA    R3,AN5MF\n         LA    R4,AN5D1\nANIM5L   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN5MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN5D1(R4)\n         LA    R3,2*L'AN5MF(R3)\n         LA    R4,2*L'AN5D1(R4)\n         BCT   R2,ANIM5L\n         MVC   AN5D5,AN5D1\n         MVC   AN5D5+L'AN5D5,AN5D1+3*L'AN5D1\n         MVC   AN5D5+2*L'AN5D5,AN5D1+2*L'AN5D1\n         MVC   AN5D5+3*L'AN5D5,AN5D1+L'AN5D1\n         MVC   ASCRIPTR(ASPL),=A(AN5,AN5L,RSCRN) SET PTR'S\n         MVI   AN5X1,X'01'         FORCE START TO EXTERNAL\nANIM5R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN5LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\n         CLI   AN5X1,X'03'         IS IT EXTERNAL?\n         BNE   ANIM5C              NO, WAS INTERNAL\n         MVI   AN5X1,X'01'         YES, SET BLUE\n         MVC   AN5X2,=AL1(0,240)   INTERNAL\n        $FS    TEXT='Reshow ?',MF=(I,AN5LN1X)\n        $FS    TEXT='(Y/N)',MF=(I,AN5LN1Z)\n         B     ANIM5E\nANIM5C   MVI   AN5X1,X'03'         SET PINK\n         MVC   AN5X2,=AL1(1,16)    EXTERNAL\n        $FS    TEXT='... just',MF=(I,AN5LN1X)\n        $FS    TEXT='ENTER',MF=(I,AN5LN1Z)\nANIM5E   MVC   AN5LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM5X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM5Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BM    ANIM5Z              IMMEDIATE TERMINATION\n         BZ    ANIM5E              NONE, RESHOW\n         CLI   AN5X1,X'03'         WAS IT EXTERNAL?\n         BE    ANIM5R              YES\n         CLI   INCMD,C'Y'          NO, RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM5R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM5X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN5LN1I)      SET ERROR INPUT\n         B     ANIM5E\n         DROP  R8\nANIM5Y   LA    R0,ERRAN5\n         LA    R1,L'ERRAN5\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM5Z   LA    R15,4               SET RC=4\nANIM5X  $XRET  CC=(R15)\n         SPACE 1\n*                                  FACTORS (% OF X,Y) TABLE\nAN5MF    DC    H'+20'                   X CO-ORD OF MAJOR AXIS END\n         DC    H'+25'                   Y CO-ORD OF MINOR AXIS END\n         DC    H'-30'                   X CO-ORD OF MINOR AXIS END\n         DC    H'+20'                   Y CO-ORD OF MAJOR AXIS END\nAN5MFN   EQU   (*-AN5MF)/(2*L'AN5MF)\nERRAN5   DC    C' -> \"ANIM5\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN5      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN5SF1   DC    AL2(AN5SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN5SF1L  EQU   *-AN5SF1\nAN5SF2   DC    AL2(AN5SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN5P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN5P1    DC    FL4'1'                SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN5SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN5P1L   EQU   *-AN5P1\nAN5SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\n         DC    XL1'10'               PATTERN = SOLID SHADING\n         DC    XL1'22'             GSAP (SET ARC PARAMETERS)\n         DC    AL1(AN5D1L)           LENGTH OF FOLLOWING DATA\nAN5D1    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END\nAN5D1L   EQU   *-AN5D1\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'00'               FLAGS = DO NOT DRAW BOUNDARY LINE\n         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)\n         DC    AL1(AN5D2L)           LENGTH OF FOLLOWING DATA\nAN5D2    DC    HL2'0'                  X CO-ORD OF CENTER\n         DC    HL2'0'                  Y \" \"\n         DC    AL1(1,0)                MULTIPLIER\nAN5D2L   EQU   *-AN5D2\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(0)                NO FOLLOWING DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\nAN5X1    DC    XL1'00'               COLOR = PINK\n         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)\n         DC    AL1(AN5D3L)           LENGTH OF FOLLOWING DATA\nAN5D3    DC    HL2'0'                  X CO-ORD OF CENTER\n         DC    HL2'0'                  Y \" \"\nAN5X2    DC    AL2(0)                  MULTIPLIER\nAN5D3L   EQU   *-AN5D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN5D4L)           LENGTH OF FOLLOWING DATA\nAN5D4    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN5D4L   EQU   *-AN5D4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN5D5L)           LENGTH OF FOLLOWING DATA\nAN5D5    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END\nAN5D5L   EQU   *-AN5D5\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN5T1L)           LENGTH OF FOLLOWING DATA\nAN5T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN5T1L   EQU   *-AN5T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN5T2L)           LENGTH OF FOLLOWING DATA\nAN5T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN5T2T   DC    CL6'Test :'             STRING\nAN5T2L   EQU   *-AN5T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN5T3L)           LENGTH OF FOLLOWING DATA\nAN5T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL18' Display Full Arc' STRING\nAN5T3L   EQU   *-AN5T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN5Q1L)           LENGTH OF FOLLOWING DATA\nAN5Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN5Q1L   EQU   *-AN5Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN5Q2L)           LENGTH OF FOLLOWING DATA\nAN5Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM5'              STRING\nAN5Q2L   EQU   *-AN5Q2\nAN5SG1L  EQU   *-AN5SG1\nAN5SF2L  EQU   *-AN5SF2\nAN5SF3   DC    AL2(AN5SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN5LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN5LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= ',MF=L\nAN5LN1X  $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\nAN5LN1Z  $FS   TEXT=(' ',5),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN5SF3L  EQU   *-AN5SF3\nAN5L     EQU   *-AN5\n         EJECT\n*======= ANIMATION 6 (ORIGINAL : ANIM3)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM6   $XENT  BASE=R9\n         LA    R2,AN6MFN\n         LA    R3,AN6MF\n         LA    R4,AN6SXY\nANIM6V   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN6MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN6SXY(R4)\n         LA    R3,2*L'AN6MF(R3)\n         LA    R4,2*L'AN6SXY(R4)\n         BCT   R2,ANIM6V\n         L     R8,=A(AN6S1,AN6S1L)\n         USING AN6S1,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN6T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN6T2(2*L'AN6T2),TXT1XY\n         MVC   AN6T3(2*L'AN6T3),TXT2XY\n         MVC   AN6Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN6Q2(2*L'AN6Q2),TXQXY\n         MVC   AN6D3(AN6D3L),AN6SXY\n         B     ANIM6R+L'ANIM6R\nANIM6R   L     R8,=A(AN6S1,AN6S1L)\n         LH    R7,AN6NST           NUMBER OF STEPS\n         LA    R5,AN6WXY\n         LA    R6,AN6IXY\n         LA    R14,AN6SXY\n         LA    R15,AN6D1N\nANIM6Q   LH    R3,AN6STOF(R14)     FINAL CO-ORD\n         LH    R1,0(R14)\n         LTR   R1,R1\n         BZ    *+L'*+6\n         SR    R3,R1               SUBTRACT INITIAL CO-ORD\n         M     R0,=F'1000'\n         ST    R1,0(R5)            INITIAL CO-ORD\n         LTR   R3,R3\n         BZ    *+L'*+6\n         M     R2,=F'1000'\n         DR    R2,R7               DIVIDE MOVEMENT BY STEPS\n         ST    R3,0(R6)            INCREMENT CO-ORD\n         LA    R5,L'AN6WXY(R5)\n         LA    R6,L'AN6IXY(R6)\n         LA    R14,L'AN6SXY(R14)\n         BCT   R15,ANIM6Q\n         LA    R7,1(R7)\nANIM6L   LA    R2,AN6WXY           SET VALUES\n         LA    R3,AN6D1\n         LA    R4,AN6D1N\nANIM6S   XR    R1,R1\n         L     R0,0(R2)\n         LTR   R0,R0\n         BZ    *+L'*+8\n         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR\n         D     R0,=F'1000'\n         STCM  R1,B'0011',0(R3)\n         LA    R2,L'AN6WXY(R2)\n         LA    R3,L'AN6D1(R3)\n         BCT   R4,ANIM6S\n         MVC   ASCRIPTR(ASPS),=A(AN6S1,AN6S1L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM6Y              4 - ERROR\n         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS\n         B     ANIM6T\n         LA    R1,AN6D1N           INCREMENT VALUES\n         LA    R2,AN6WXY\n         LA    R3,AN6IXY\nANIM6I   L     R0,0(R2)\n         A     R0,0(R3)\n         ST    R0,0(R2)\n         LA    R2,L'AN6WXY(R2)\n         LA    R3,L'AN6IXY(R3)\n         BCT   R1,ANIM6I\n         B     ANIM6L\n         DROP  R8\nANIM6T   L     R8,=A(AN6S2,AN6S2L,RSCRN)\n         USING AN6S2,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(AN6S2,AN6S2L,RSCRN) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN6LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM6E   MVC   AN6LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM6X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM6Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM6E              NONE, RESHOW\n         BM    ANIM6Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM6R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM6X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN6LN1I)      SET ERROR INPUT\n         B     ANIM6E\n         DROP  R8\nANIM6Y   LA    R0,ERRAN6\n         LA    R1,L'ERRAN6\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM6Z   LA    R15,4               SET RC=4\nANIM6X  $XRET  CC=(R15)\n         SPACE 1\nAN6WXY   DC    2F'0'               X1-Y1 WORK VALUES\nAN6IXY   DC    2F'0'               X1-Y1 INCREMENT VALUES\nAN6NST   DC    H'32'               NUMBER OF STEPS\nAN6SXY   DC    H'0'                X1 CO-ORD OF ANIM START\n         DC    H'0'                Y1 \" \"\nAN6STOF  EQU   *-AN6SXY\n         DC    H'0'                X1 CO-ORD OF ANIM END\n         DC    H'0'                Y1 \" \"\n*                                  FACTORS (% OF X,Y) TABLE\nAN6MF    DC    H'-70'              X1 CO-ORD OF ANIM START\n         DC    H'+50'              Y1 \" \"\n         DC    H'+70'              X1 CO-ORD OF ANIM END\n         DC    H'+50'              Y1 \" \"\nAN6MFN   EQU   (*-AN6MF)/(2*L'AN6MF)\nERRAN6   DC    C' -> \"ANIM6\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN6S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN6SF1   DC    AL2(AN6SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN6SF1L  EQU   *-AN6SF1\nAN6SF2   DC    AL2(AN6SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN6P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN6P1    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN6SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN6P1L   EQU   *-AN6P1\nAN6SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'05'               COLOR = TURQ\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN6D1L)           LENGTH OF FOLLOWING DATA\nAN6D1    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\nAN6D1N   EQU   (*-AN6D1)/L'AN6D1\n         DC    HL2'0'                  X CO-ORD OF LINE END\n         DC    HL2'0'                  Y \" \"\nAN6D1L   EQU   *-AN6D1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN6D2L)           LENGTH OF FOLLOWING DATA\nAN6D2    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN6D2L   EQU   *-AN6D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN6D3L)           LENGTH OF FOLLOWING DATA\nAN6D3    DC    HL2'0'                  X CO-ORD OF INITIAL START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  Y CO-ORD OF FINAL END\n         DC    HL2'0'                  X \" \"\nAN6D3L   EQU   *-AN6D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN6T1L)           LENGTH OF FOLLOWING DATA\nAN6T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN6T1L   EQU   *-AN6T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN6T2L)           LENGTH OF FOLLOWING DATA\nAN6T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN6T2T   DC    CL6'Test :'             STRING\nAN6T2L   EQU   *-AN6T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN6T3L)           LENGTH OF FOLLOWING DATA\nAN6T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL16' Move LINE (X,Y)'  STRING\nAN6T3L   EQU   *-AN6T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN6Q1L)           LENGTH OF FOLLOWING DATA\nAN6Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN6Q1L   EQU   *-AN6Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN6Q2L)           LENGTH OF FOLLOWING DATA\nAN6Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM6'              STRING\nAN6Q2L   EQU   *-AN6Q2\nAN6SG1L  EQU   *-AN6SG1\nAN6SF2L  EQU   *-AN6SF2\nAN6S1L   EQU   *-AN6S1\n         SPACE 1\nAN6S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN6SF3   DC    AL2(AN6SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN6LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN6LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN6SF3L  EQU   *-AN6SF3\nAN6S2L   EQU   *-AN6S2\n         EJECT\n*======= ANIMATION 7 (ORIGINAL : ANIM2)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM7   $XENT  BASE=R9\n         LA    R2,AN7MFN\n         LA    R3,AN7MF\n         LA    R4,AN7SXY\nANIM7V   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN7MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN7SXY(R4)\n         LA    R3,2*L'AN7MF(R3)\n         LA    R4,2*L'AN7SXY(R4)\n         BCT   R2,ANIM7V\n         L     R8,=A(AN7S1,AN7S1L)\n         USING AN7S1,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN7T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN7T2(2*L'AN7T2),TXT1XY\n         MVC   AN7T3(2*L'AN7T3),TXT2XY\n         MVC   AN7Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN7Q2(2*L'AN7Q2),TXQXY\n         DROP  R8\n         L     R8,=A(AN7S2,AN7S2L)\n         USING AN7S2,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN7D3(AN7D3L/2),AN7SXY\n         MVC   AN7D3+2*L'AN7D3(AN7D3L/2),AN7SXY+AN7STOF\n         MVC   AN7D4(AN7D4L/2),AN7SXY+2*L'AN7SXY\n         MVC   AN7D4+2*L'AN7D4(AN7D4L/2),AN7SXY+AN7STOF+2*L'AN7SXY\n         B     ANIM7R+L'ANIM7R\nANIM7R   L     R8,=A(AN7S2,AN7S2L)\n         LH    R7,AN7NST           NUMBER OF STEPS\n         LA    R5,AN7WXY\n         LA    R6,AN7IXY\n         LA    R14,AN7SXY\n         LA    R15,AN7D1N\nANIM7Q   LH    R3,AN7STOF(R14)     FINAL CO-ORD\n         LH    R1,0(R14)\n         LTR   R1,R1\n         BZ    *+L'*+6\n         SR    R3,R1               SUBTRACT INITIAL CO-ORD\n         M     R0,=F'1000'\n         ST    R1,0(R5)            INITIAL CO-ORD\n         LTR   R3,R3\n         BZ    *+L'*+6\n         M     R2,=F'1000'\n         DR    R2,R7               DIVIDE MOVEMENT BY STEPS\n         ST    R3,0(R6)            INCREMENT CO-ORD\n         LA    R5,L'AN7WXY(R5)\n         LA    R6,L'AN7IXY(R6)\n         LA    R14,L'AN7SXY(R14)\n         BCT   R15,ANIM7Q\n         MVC   ASCRIPTR(ASPS),=A(AN7S1,AN7S1L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM7Y              4 - ERROR\n         LA    R7,1(R7)\nANIM7L   LA    R2,AN7WXY           SET VALUES\n         LA    R3,AN7D1\n         LA    R4,AN7D1N\nANIM7S   XR    R1,R1\n         L     R0,0(R2)\n         LTR   R0,R0\n         BZ    *+L'*+8\n         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR\n         D     R0,=F'1000'\n         STCM  R1,B'0011',0(R3)\n         LA    R2,L'AN7WXY(R2)\n         LA    R3,L'AN7D1(R3)\n         BCT   R4,ANIM7S\n         MVC   ASCRIPTR(ASPS),=A(AN7S2,AN7S2L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM7Y              4 - ERROR\n         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS\n         B     ANIM7T\n         LA    R1,AN7D1N           INCREMENT VALUES\n         LA    R2,AN7WXY\n         LA    R3,AN7IXY\nANIM7I   L     R0,0(R2)\n         A     R0,0(R3)\n         ST    R0,0(R2)\n         LA    R2,L'AN7WXY(R2)\n         LA    R3,L'AN7IXY(R3)\n         BCT   R1,ANIM7I\n         B     ANIM7L\n         DROP  R8\nANIM7T   L     R8,=A(AN7S3,AN7S3L,RSCRN)\n         USING AN7S3,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(AN7S3,AN7S3L,RSCRN) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN7LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM7E   MVC   AN7LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM7X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM7Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM7E              NONE, RESHOW\n         BM    ANIM7Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM7R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM7X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN7LN1I)      SET ERROR INPUT\n         B     ANIM7E\n         DROP  R8\nANIM7Y   LA    R0,ERRAN7\n         LA    R1,L'ERRAN7\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM7Z   LA    R15,4               SET RC=4\nANIM7X  $XRET  CC=(R15)\n         SPACE 1\nAN7WXY   DC    4F'0'               X1-Y1-X2-Y2 WORK VALUES\nAN7IXY   DC    4F'0'               X1-Y1-X2-Y2 INCREMENT VALUES\nAN7NST   DC    H'112'              NUMBER OF STEPS\nAN7SXY   DC    H'0'                X1 CO-ORD OF ANIM START\n         DC    H'0'                Y1 \" \"\n         DC    H'0'                X2 \" \"\n         DC    H'0'                Y2 \" \"\nAN7STOF  EQU   *-AN7SXY\n         DC    H'0'                X1 CO-ORD OF ANIM END\n         DC    H'0'                Y1 \" \"\n         DC    H'0'                X2 \" \"\n         DC    H'0'                Y2 \" \"\n*                                  FACTORS (% OF X,Y) TABLE\nAN7MF    DC    H'-70'              X1 CO-ORD OF ANIM START\n         DC    H'+10'              Y1 \" \"\n         DC    H'-70'              X2 \" \"\n         DC    H'+65'              Y2 \" \"\n         DC    H'+30'              X1 CO-ORD OF ANIM END\n         DC    H'-25'              Y1 \" \"\n         DC    H'+70'              X2 \" \"\n         DC    H'-95'              Y2 \" \"\nAN7MFN   EQU   (*-AN7MF)/(2*L'AN7MF)\nERRAN7   DC    C' -> \"ANIM7\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN7S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN7SF1   DC    AL2(AN7SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN7SF1L  EQU   *-AN7SF1\nAN7SF2   DC    AL2(AN7SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN7P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN7P1    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN7SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN7P1L   EQU   *-AN7P1\nAN7SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN7T1L)           LENGTH OF FOLLOWING DATA\nAN7T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN7T1L   EQU   *-AN7T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN7T2L)           LENGTH OF FOLLOWING DATA\nAN7T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN7T2T   DC    CL6'Test :'             STRING\nAN7T2L   EQU   *-AN7T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN7T3L)           LENGTH OF FOLLOWING DATA\nAN7T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL16' Copy LINE (X,Y)'  STRING\nAN7T3L   EQU   *-AN7T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN7Q1L)           LENGTH OF FOLLOWING DATA\nAN7Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN7Q1L   EQU   *-AN7Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN7Q2L)           LENGTH OF FOLLOWING DATA\nAN7Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM7'              STRING\nAN7Q2L   EQU   *-AN7Q2\nAN7SG1L  EQU   *-AN7SG1\nAN7SF2L  EQU   *-AN7SF2\nAN7S1L   EQU   *-AN7S1\n         SPACE 1\nAN7S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN7SF3   DC    AL2(AN7SF3L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN7P2L)           LENGTH OF FOLLOWING PARAMETERS\nAN7P2    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN7SG2L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN7P2L   EQU   *-AN7P2\nAN7SG2   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'05'               COLOR = TURQ\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN7D1L)           LENGTH OF FOLLOWING DATA\nAN7D1    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF LINE END\n         DC    HL2'0'                  Y \" \"\nAN7D1L   EQU   *-AN7D1\nAN7D1N   EQU   (*-AN7D1)/L'AN7D1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN7D2L)           LENGTH OF FOLLOWING DATA\nAN7D2    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN7D2L   EQU   *-AN7D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN7D3L)           LENGTH OF FOLLOWING DATA\nAN7D3    DC    HL2'0'                  X CO-ORD OF INITIAL START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  Y CO-ORD OF FINAL START\n         DC    HL2'0'                  X \" \"\nAN7D3L   EQU   *-AN7D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN7D4L)           LENGTH OF FOLLOWING DATA\nAN7D4    DC    HL2'0'                  X CO-ORD OF INITIAL END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  Y CO-ORD OF FINAL END\n         DC    HL2'0'                  X \" \"\nAN7D4L   EQU   *-AN7D4\nAN7SG2L  EQU   *-AN7SG2\nAN7SF3L  EQU   *-AN7SF3\nAN7S2L   EQU   *-AN7S2\n         SPACE 1\nAN7S3    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN7SF4   DC    AL2(AN7SF4L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN7LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN7LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN7SF4L  EQU   *-AN7SF4\nAN7S3L   EQU   *-AN7S3\n         EJECT\n*======= ANIMATION 8 (ORIGINAL : ANIM4)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM8   $XENT  BASE=R9\n         LA    R2,AN8MFN\n         LA    R3,AN8MF\n         LA    R4,AN8SXY\nANIM8V   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN8MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN8SXY(R4)\n         LA    R3,2*L'AN8MF(R3)\n         LA    R4,2*L'AN8SXY(R4)\n         BCT   R2,ANIM8V\n         L     R8,=A(AN8S1,AN8S1L)\n         USING AN8S1,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN8T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN8T2(2*L'AN8T2),TXT1XY\n         MVC   AN8T3(2*L'AN8T3),TXT2XY\n         MVC   AN8Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN8Q2(2*L'AN8Q2),TXQXY\n         DROP  R8\n         L     R8,=A(AN8S2,AN8S2L)\n         USING AN8S2,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN8D3(AN8D3L/2),AN8SXY\n         MVC   AN8D3+2*L'AN8D3(AN8D3L/2),AN8SXY+AN8STOF\n         B     ANIM8R+L'ANIM8R\nANIM8R   L     R8,=A(AN8S2,AN8S2L)\n         LH    R7,AN8NST           NUMBER OF STEPS\n         LA    R5,AN8WXY\n         LA    R6,AN8IXY\n         LA    R14,AN8SXY\n         LA    R15,AN8D1N\nANIM8Q   LH    R3,AN8STOF(R14)     FINAL CO-ORD\n         LH    R1,0(R14)\n         LTR   R1,R1\n         BZ    *+L'*+6\n         SR    R3,R1               SUBTRACT INITIAL CO-ORD\n         M     R0,=F'1000'\n         ST    R1,0(R5)            INITIAL CO-ORD\n         LTR   R3,R3\n         BZ    *+L'*+6\n         M     R2,=F'1000'\n         DR    R2,R7               DIVIDE MOVEMENT BY STEPS\n         ST    R3,0(R6)            INCREMENT CO-ORD\n         LA    R5,L'AN8WXY(R5)\n         LA    R6,L'AN8IXY(R6)\n         LA    R14,L'AN8SXY(R14)\n         BCT   R15,ANIM8Q\n         MVC   ASCRIPTR(ASPS),=A(AN8S1,AN8S1L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM8Y              4 - ERROR\n         LA    R7,1(R7)\nANIM8L   LA    R2,AN8WXY           SET VALUES\n         LA    R3,AN8D1\n         LA    R4,AN8D1N\nANIM8S   XR    R1,R1\n         L     R0,0(R2)\n         LTR   R0,R0\n         BZ    *+L'*+8\n         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR\n         D     R0,=F'1000'\n         STCM  R1,B'0011',0(R3)\n         LA    R2,L'AN8WXY(R2)\n         LA    R3,L'AN8D1(R3)\n         BCT   R4,ANIM8S\n         MVC   ASCRIPTR(ASPS),=A(AN8S2,AN8S2L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM8Y              4 - ERROR\n         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS\n         B     ANIM8T\n         LA    R1,AN8D1N           INCREMENT VALUES\n         LA    R2,AN8WXY\n         LA    R3,AN8IXY\nANIM8I   L     R0,0(R2)\n         A     R0,0(R3)\n         ST    R0,0(R2)\n         LA    R2,L'AN8WXY(R2)\n         LA    R3,L'AN8IXY(R3)\n         BCT   R1,ANIM8I\n         B     ANIM8L\n         DROP  R8\nANIM8T   L     R8,=A(AN8S3,AN8S3L,RSCRN)\n         USING AN8S3,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(AN8S3,AN8S3L,RSCRN) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN8LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM8E   MVC   AN8LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM8X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM8Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM8E              NONE, RESHOW\n         BM    ANIM8Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM8R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM8X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN8LN1I)      SET ERROR INPUT\n         B     ANIM8E\n         DROP  R8\nANIM8Y   LA    R0,ERRAN8\n         LA    R1,L'ERRAN8\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM8Z   LA    R15,4               SET RC=4\nANIM8X  $XRET  CC=(R15)\n         SPACE 1\nAN8WXY   DC    4F'0'               X1-Y1-X2-Y2 WORK VALUES\nAN8IXY   DC    4F'0'               X1-Y1-X2-Y2 INCREMENT VALUES\nAN8NST   DC    H'256'              NUMBER OF STEPS\nAN8SXY   DC    H'0'                X1 CO-ORD OF ANIM START\n         DC    H'0'                Y1 \" \"\n         DC    H'0'                X2 \" \"\n         DC    H'0'                Y2 \" \"\nAN8STOF  EQU   *-AN8SXY\n         DC    H'0'                X1 CO-ORD OF ANIM END\n         DC    H'0'                Y1 \" \"\n         DC    H'0'                X2 \" \"\n         DC    H'0'                Y2 \" \"\n*                                  FACTORS (% OF X,Y) TABLE\nAN8MF    DC    H'-35'              X1 CO-ORD OF ANIM START\n         DC    H'+35'              Y1 \" \"\n         DC    H'+0'               X2 \" \"\n         DC    H'+0'               Y2 \" \"\n         DC    H'+35'              X1 CO-ORD OF ANIM END\n         DC    H'+35'              Y1 \" \"\n         DC    H'+0'               X2 \" \"\n         DC    H'+0'               Y2 \" \"\nAN8MFN   EQU   (*-AN8MF)/(2*L'AN8MF)\nERRAN8   DC    C' -> \"ANIM8\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN8S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN8SF1   DC    AL2(AN8SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN8SF1L  EQU   *-AN8SF1\nAN8SF2   DC    AL2(AN8SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN8P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN8P1    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN8SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN8P1L   EQU   *-AN8P1\nAN8SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN8T1L)           LENGTH OF FOLLOWING DATA\nAN8T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN8T1L   EQU   *-AN8T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN8T2L)           LENGTH OF FOLLOWING DATA\nAN8T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN8T2T   DC    CL6'Test :'             STRING\nAN8T2L   EQU   *-AN8T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN8T3L)           LENGTH OF FOLLOWING DATA\nAN8T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL16' Draw LINE (X,Y)'  STRING\nAN8T3L   EQU   *-AN8T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN8Q1L)           LENGTH OF FOLLOWING DATA\nAN8Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN8Q1L   EQU   *-AN8Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN8Q2L)           LENGTH OF FOLLOWING DATA\nAN8Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM8'              STRING\nAN8Q2L   EQU   *-AN8Q2\nAN8SG1L  EQU   *-AN8SG1\nAN8SF2L  EQU   *-AN8SF2\nAN8S1L   EQU   *-AN8S1\n         SPACE 1\nAN8S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN8SF3   DC    AL2(AN8SF3L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN8P2L)           LENGTH OF FOLLOWING PARAMETERS\nAN8P2    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN8SG2L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN8P2L   EQU   *-AN8P2\nAN8SG2   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'05'               COLOR = TURQ\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN8D1L)           LENGTH OF FOLLOWING DATA\nAN8D1    DC    HL2'0'                  X CO-ORD OF LINE START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF LINE END\n         DC    HL2'0'                  Y \" \"\nAN8D1L   EQU   *-AN8D1\nAN8D1N   EQU   (*-AN8D1)/L'AN8D1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN8D2L)           LENGTH OF FOLLOWING DATA\nAN8D2    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN8D2L   EQU   *-AN8D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN8D3L)           LENGTH OF FOLLOWING DATA\nAN8D3    DC    HL2'0'                  X CO-ORD OF INITIAL START\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  Y CO-ORD OF FINAL END\n         DC    HL2'0'                  X \" \"\nAN8D3L   EQU   *-AN8D3\nAN8SG2L  EQU   *-AN8SG2\nAN8SF3L  EQU   *-AN8SF3\nAN8S2L   EQU   *-AN8S2\n         SPACE 1\nAN8S3    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN8SF4   DC    AL2(AN8SF4L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN8LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN8LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN8SF4L  EQU   *-AN8SF4\nAN8S3L   EQU   *-AN8S3\n         EJECT\n*======= ANIMATION 9 (ORIGINAL : ANIM4)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM9   $XENT  BASE=R9\n         LA    R2,AN9MFN\n         LA    R3,AN9MF\n         LA    R4,AN9SXY\nANIM9V   XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN9MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN9SXY(R4)\n         LA    R3,2*L'AN9MF(R3)\n         LA    R4,2*L'AN9SXY(R4)\n         BCT   R2,ANIM9V\n         L     R8,=A(AN9S1,AN9S1L)\n         USING AN9S1,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   AN9T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN9T2(2*L'AN9T2),TXT1XY\n         MVC   AN9T3(2*L'AN9T3),TXT2XY\n         MVC   AN9Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN9Q2(2*L'AN9Q2),TXQXY\n         B     ANIM9R+L'ANIM9R\nANIM9R   L     R8,=A(AN9S1,AN9S1L)\n         LH    R7,AN9NST           NUMBER OF STEPS\n         LA    R5,AN9WXY\n         LA    R6,AN9IXY\n         LA    R14,AN9SXY\n         LA    R15,AN9D1N\nANIM9Q   LH    R3,AN9STOF(R14)     FINAL CO-ORD\n         LH    R1,0(R14)\n         LTR   R1,R1\n         BZ    *+L'*+6\n         SR    R3,R1               SUBTRACT INITIAL CO-ORD\n         M     R0,=F'1000'\n         ST    R1,0(R5)            INITIAL CO-ORD\n         LTR   R3,R3\n         BZ    *+L'*+6\n         M     R2,=F'1000'\n         DR    R2,R7               DIVIDE MOVEMENT BY STEPS\n         ST    R3,0(R6)            INCREMENT CO-ORD\n         LA    R5,L'AN9WXY(R5)\n         LA    R6,L'AN9IXY(R6)\n         LA    R14,L'AN9SXY(R14)\n         BCT   R15,ANIM9Q\n         LA    R7,1(R7)\nANIM9L   LA    R2,AN9WXY           SET VALUES\n         LA    R3,AN9D1\n         LA    R4,AN9D1N\nANIM9S   XR    R1,R1\n         L     R0,0(R2)\n         LTR   R0,R0\n         BZ    *+L'*+8\n         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR\n         D     R0,=F'1000'\n         STCM  R1,B'0011',0(R3)\n         LA    R2,L'AN9WXY(R2)\n         LA    R3,L'AN9D1(R3)\n         BCT   R4,ANIM9S\n         MVC   AN9D4,AN9D1\n         MVC   AN9D4+L'AN9D4,AN9D1+3*L'AN9D1\n         MVC   AN9D4+2*L'AN9D4,AN9D1+2*L'AN9D1\n         MVC   AN9D4+3*L'AN9D4,AN9D1+L'AN9D1\n         MVC   ASCRIPTR(ASPS),=A(AN9S1,AN9S1L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM9Y              4 - ERROR\n         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS\n         B     ANIM9T\n         LA    R1,AN9D1N           INCREMENT VALUES\n         LA    R2,AN9WXY\n         LA    R3,AN9IXY\nANIM9I   L     R0,0(R2)\n         A     R0,0(R3)\n         ST    R0,0(R2)\n         LA    R2,L'AN9WXY(R2)\n         LA    R3,L'AN9IXY(R3)\n         BCT   R1,ANIM9I\n         B     ANIM9L\n         DROP  R8\nANIM9T   L     R8,=A(AN9S2,AN9S2L,RSCRN)\n         USING AN9S2,R8            SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(AN9S2,AN9S2L,RSCRN) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN9LN1I)      SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM9E   MVC   AN9LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM9X              0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM9Y              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM9E              NONE, RESHOW\n         BM    ANIM9Z              IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM9R              \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM9X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN9LN1I)      SET ERROR INPUT\n         B     ANIM9E\n         DROP  R8\nANIM9Y   LA    R0,ERRAN9\n         LA    R1,L'ERRAN9\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM9Z   LA    R15,4               SET RC=4\nANIM9X  $XRET  CC=(R15)\n         SPACE 1\nAN9WXY   DC    4F'0'               X1-Y1-X1-Y1 WORK VALUES\nAN9IXY   DC    4F'0'               X1-Y1-X1-Y1 INCREMENT VALUES\nAN9NST   DC    H'64'               NUMBER OF STEPS\nAN9SXY   DC    H'0'                X1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'0'                Y1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'0'                X1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'0'                Y1 CO-ORD OF INITIAL MAJOR AXIS END\nAN9STOF  EQU   *-AN9SXY\n         DC    H'0'                X2 CO-ORD OF FINAL MAJOR AXIS END\n         DC    H'0'                Y2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'0'                X2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'0'                Y2 CO-ORD OF FINAL MAJOR AXIS END\n*                                  FACTORS (% OF X,Y) TABLE\nAN9MF    DC    H'+40'              X1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'+75'              Y1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'+8'               X1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'+15'              Y1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'-8'               X2 CO-ORD OF FINAL MAJOR AXIS END\n         DC    H'+15'              Y2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'-40'              X2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'+75'              Y2 CO-ORD OF FINAL MAJOR AXIS END\nAN9MFN   EQU   (*-AN9MF)/(2*L'AN9MF)\nERRAN9   DC    C' -> \"ANIM9\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN9S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN9SF1   DC    AL2(AN9SF1L)        L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN9SF1L  EQU   *-AN9SF1\nAN9SF2   DC    AL2(AN9SF2L)        L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN9P1L)           LENGTH OF FOLLOWING PARAMETERS\nAN9P1    DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN9SG1L)          LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN9P1L   EQU   *-AN9P1\nAN9SG1   EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'22'             GSAP (SET ARC PARAMETERS)\n         DC    AL1(AN9D1L)           LENGTH OF FOLLOWING DATA\nAN9D1    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END\nAN9D1L   EQU   *-AN9D1\nAN9D1N   EQU   (*-AN9D1)/L'AN9D1\n         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)\n         DC    AL1(AN9D2L)           LENGTH OF FOLLOWING DATA\nAN9D2    DC    HL2'0'                  X CO-ORD OF CENTER\n         DC    HL2'0'                  Y \" \"\n         DC    AL1(0,128)              MULTIPLIER\nAN9D2L   EQU   *-AN9D2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN9D3L)           LENGTH OF FOLLOWING DATA\nAN9D3    DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN9D3L   EQU   *-AN9D3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'04'               COLOR = GREEN\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'08'               SYMBOL = FILLED SQUARE\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN9D4L)           LENGTH OF FOLLOWING DATA\nAN9D4    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  Y \" \"\n         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  Y \" \"\nAN9D4L   EQU   *-AN9D4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN9T1L)           LENGTH OF FOLLOWING DATA\nAN9T1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN9T1L   EQU   *-AN9T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN9T2L)           LENGTH OF FOLLOWING DATA\nAN9T2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN9T2T   DC    CL6'Test :'             STRING\nAN9T2L   EQU   *-AN9T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN9T3L)           LENGTH OF FOLLOWING DATA\nAN9T3    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL14' Move Full Arc'    STRING\nAN9T3L   EQU   *-AN9T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN9Q1L)           LENGTH OF FOLLOWING DATA\nAN9Q1    DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN9Q1L   EQU   *-AN9Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN9Q2L)           LENGTH OF FOLLOWING DATA\nAN9Q2    DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM9'              STRING\nAN9Q2L   EQU   *-AN9Q2\nAN9SG1L  EQU   *-AN9SG1\nAN9SF2L  EQU   *-AN9SF2\nAN9S1L   EQU   *-AN9S1\n         SPACE 1\nAN9S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN9SF3   DC    AL2(AN9SF3L)        L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN9LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN9LN1R  $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN9SF3L  EQU   *-AN9SF3\nAN9S2L   EQU   *-AN9S2\n         EJECT\n*======= ANIMATION 10 (ORIGINAL : ANIM5)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM10  $XENT  BASE=R9\n         LA    R2,AN10MFN\n         LA    R3,AN10MF\n         LA    R4,AN10SXY\nANIM10V  XR    R1,R1\n         LH    R0,0(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISX\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',0(R4)\n         XR    R1,R1\n         LH    R0,L'AN10MF(R3)\n         LTR   R0,R0\n         BZ    *+L'*+12\n         MH    R0,MAXISY\n         SRDA  R0,32\n         D     R0,=F'100'\n         STCM  R1,B'0011',L'AN10SXY(R4)\n         LA    R3,2*L'AN10MF(R3)\n         LA    R4,2*L'AN10SXY(R4)\n         BCT   R2,ANIM10V\n         L     R8,=A(AN10S1,AN10S1L)\n         USING AN10S1,R8           SCREEN IMAGE ADDRESSABILITY\n         MVC   AN10T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN10T2(2*L'AN10T2),TXT1XY\n         MVC   AN10T3(2*L'AN10T3),TXT2XY\n         MVC   AN10Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN10Q2(2*L'AN10Q2),TXQXY\n         DROP  R8\nANIM10R  L     R8,=A(AN10S2,AN10S2L)\n         USING AN10S2,R8           SCREEN IMAGE ADDRESSABILITY\n         LH    R7,AN10NST          NUMBER OF STEPS\n         LA    R5,AN10WXY\n         LA    R6,AN10IXY\n         LA    R14,AN10SXY\n         LA    R15,AN10D1N\nANIM10Q  LH    R3,AN10STOF(R14)    FINAL CO-ORD\n         LH    R1,0(R14)\n         LTR   R1,R1\n         BZ    *+L'*+6\n         SR    R3,R1               SUBTRACT INITIAL CO-ORD\n         M     R0,=F'1000'\n         ST    R1,0(R5)            INITIAL CO-ORD\n         LTR   R3,R3\n         BZ    *+L'*+6\n         M     R2,=F'1000'\n         DR    R2,R7               DIVIDE MOVEMENT BY STEPS\n         ST    R3,0(R6)            INCREMENT CO-ORD\n         LA    R5,L'AN10WXY(R5)\n         LA    R6,L'AN10IXY(R6)\n         LA    R14,L'AN10SXY(R14)\n         BCT   R15,ANIM10Q\n         MVC   ASCRIPTR(ASPS),=A(AN10S1,AN10S1L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM10Y             4 - ERROR\n         LA    R7,1(R7)\nANIM10L  LA    R2,AN10WXY          SET VALUES\n         LA    R3,AN10D1\n         LA    R4,AN10D1N\nANIM10S  XR    R1,R1\n         L     R0,0(R2)\n         LTR   R0,R0\n         BZ    *+L'*+8\n         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR\n         D     R0,=F'1000'\n         STCM  R1,B'0011',0(R3)\n         LA    R2,L'AN10WXY(R2)\n         LA    R3,L'AN10D1(R3)\n         BCT   R4,ANIM10S\n         MVC   ASCRIPTR(ASPS),=A(AN10S2,AN10S2L) SET PTR'S\n        #GO    FSCOUT              SEND TO SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     ANIM10Y             4 - ERROR\n         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS\n         B     ANIM10T\n         LA    R1,AN10D1N          INCREMENT VALUES\n         LA    R2,AN10WXY\n         LA    R3,AN10IXY\nANIM10I  L     R0,0(R2)\n         A     R0,0(R3)\n         ST    R0,0(R2)\n         LA    R2,L'AN10WXY(R2)\n         LA    R3,L'AN10IXY(R3)\n         BCT   R1,ANIM10I\n         B     ANIM10L\n         DROP  R8\nANIM10T  L     R8,=A(AN10S3,AN10S3L,RSCRN)\n         USING AN10S3,R8           SCREEN IMAGE ADDRESSABILITY\n         MVC   ASCRIPTR(ASPL),=A(AN10S3,AN10S3L,RSCRN) SET PTR'S\n        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN10LN1I)     SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\nANIM10E  MVC   AN10LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM10X             0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM10Y             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    ANIM10E             NONE, RESHOW\n         BM    ANIM10Z             IMMEDIATE TERMINATION\n         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM10R             \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM10X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN10LN1I)     SET ERROR INPUT\n         B     ANIM10E\n         DROP  R8\nANIM10Y  LA    R0,ERRAN10\n         LA    R1,L'ERRAN10\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM10Z  LA    R15,4               SET RC=4\nANIM10X $XRET  CC=(R15)\n         SPACE 1\nAN10WXY  DC    4F'0'               X1-Y1-X1-Y1 WORK VALUES\nAN10IXY  DC    4F'0'               X1-Y1-X1-Y1 INCREMENT VALUES\nAN10NST  DC    H'48'               NUMBER OF STEPS\nAN10SXY  DC    H'0'                X1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'0'                Y1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'0'                X1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'0'                Y1 CO-ORD OF INITIAL MAJOR AXIS END\nAN10STOF EQU   *-AN10SXY\n         DC    H'0'                X2 CO-ORD OF FINAL MAJOR AXIS END\n         DC    H'0'                Y2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'0'                X2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'0'                Y2 CO-ORD OF FINAL MAJOR AXIS END\n*                                  FACTORS (% OF X,Y) TABLE\nAN10MF   DC    H'+40'              X1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'+75'              Y1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'+8'               X1 CO-ORD OF INITIAL MINOR AXIS END\n         DC    H'+15'              Y1 CO-ORD OF INITIAL MAJOR AXIS END\n         DC    H'-8'               X2 CO-ORD OF FINAL MAJOR AXIS END\n         DC    H'+15'              Y2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'-40'              X2 CO-ORD OF FINAL MINOR AXIS END\n         DC    H'+75'              Y2 CO-ORD OF FINAL MAJOR AXIS END\nAN10MFN  EQU   (*-AN10MF)/(2*L'AN10MF)\nERRAN10  DC    C' -> \"ANIM10\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN10S1   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN10SF1  DC    AL2(AN10SF1L)       L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN10SF1L EQU   *-AN10SF1\nAN10SF2  DC    AL2(AN10SF2L)       L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN10P1L)          LENGTH OF FOLLOWING PARAMETERS\nAN10P1   DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN10SG1L)         LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN10P1L  EQU   *-AN10P1\nAN10SG1  EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'07'               SYMBOL = FILLED DIAMOND\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN10C1L)          LENGTH OF FOLLOWING DATA\nAN10C1   DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN10C1L  EQU   *-AN10C1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN10T1L)          LENGTH OF FOLLOWING DATA\nAN10T1   DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN10T1L  EQU   *-AN10T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN10T2L)          LENGTH OF FOLLOWING DATA\nAN10T2   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN10T2T  DC    CL6'Test :'             STRING\nAN10T2L  EQU   *-AN10T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN10T3L)          LENGTH OF FOLLOWING DATA\nAN10T3   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL14' Draw Full Arc'    STRING\nAN10T3L  EQU   *-AN10T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN10Q1L)          LENGTH OF FOLLOWING DATA\nAN10Q1   DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN10Q1L  EQU   *-AN10Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN10Q2L)          LENGTH OF FOLLOWING DATA\nAN10Q2   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM10'             STRING\nAN10Q2L  EQU   *-AN10Q2\nAN10SG1L EQU   *-AN10SG1\nAN10SF2L EQU   *-AN10SF2\nAN10S1L  EQU   *-AN10S1\n         SPACE 1\nAN10S2   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN10SF3  DC    AL2(AN10SF3L)       L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN10P2L)          LENGTH OF FOLLOWING PARAMETERS\nAN10P2   DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN10SG2L)         LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN10P2L  EQU   *-AN10P2\nAN10SG2  EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'06'               COLOR = YELLOW\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'00'               MODE = DRAWING DEFAULT\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'22'             GSAP (SET ARC PARAMETERS)\n         DC    AL1(AN10D1L)          LENGTH OF FOLLOWING DATA\nAN10D1   DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END\n         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END\nAN10D1L  EQU   *-AN10D1\nAN10D1N  EQU   (*-AN10D1)/L'AN10D1\n         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)\n         DC    AL1(AN10D2L)          LENGTH OF FOLLOWING DATA\nAN10D2   DC    HL2'0'                  X CO-ORD OF CENTER\n         DC    HL2'0'                  Y \" \"\n         DC    AL1(0,176)              MULTIPLIER\nAN10D2L  EQU   *-AN10D2\nAN10SG2L EQU   *-AN10SG2\nAN10SF3L EQU   *-AN10SF3\nAN10S2L  EQU   *-AN10S2\n         SPACE 1\nAN10S3   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN10SF4  DC    AL2(AN10SF4L)       L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN10LN1I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN10LN1R $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= Reshow ?',MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\n         $FS   TEXT='(Y/N)',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN10SF4L EQU   *-AN10SF4\nAN10S3L  EQU   *-AN10S3\n         EJECT\n*======= ANIMATION 11 (ORIGINAL : CUBE)\n*              RETURN CODE : 0 = OK, CONTINUE\n*                            4 = ERROR OR END\n         SPACE 1\nANIM11  $XENT  BASE=R9\n         XC    DBLW,DBLW           WIDTH-HEIGHT\n         MVC   DBLW+2(L'Q81DSX),Q81DSX\n         LH    R3,AN11WMM\n         MH    R3,DBLW+4\n         XR    R2,R2\n         D     R2,DBLW\n         STH   R3,AN11WX\n         LR    R1,R3\n         SRL   R1,1\n         STH   R1,AN11X4\n         STH   R1,AN11X5\n         LNR   R2,R1\n         STH   R2,AN11X3\n         AR    R1,R3\n         STH   R1,AN11X6\n         STH   R1,AN11X7\n         SR    R2,R3\n         STH   R2,AN11X1\n         STH   R2,AN11X2\n         MVC   DBLW+2(L'Q81DSY),Q81DSY\n         LH    R3,AN11HMM\n         MH    R3,DBLW+4\n         XR    R2,R2\n         D     R2,DBLW\n         LR    R1,R3\n         SRL   R1,1\n         STH   R1,AN11Y2\n         STH   R1,AN11Y5\n         LNR   R2,R1\n         STH   R2,AN11Y6\n         AR    R1,R3\n         STH   R1,AN11Y3\n         STH   R1,AN11Y7\n         SR    R2,R3\n         STH   R2,AN11Y1\n         STH   R2,AN11Y4\n         LA    R2,AN11X1\n         LA    R3,AN11X1P\n         LA    R4,AN11X1M\n         LA    R5,AN11XAN\n         LH    R6,AN11WX\n         AR    R6,R6\nANIM11F  LH    R0,0(R2)\n         LR    R1,R0\n         AR    R0,R6\n         SR    R1,R6\n         STH   R0,0(R3)\n         STH   R1,0(R4)\n         LA    R2,L'AN11X1+L'AN11Y1(R2)\n         LA    R3,L'AN11X1P(R3)\n         LA    R4,L'AN11X1M(R4)\n         BCT   R5,ANIM11F\n         L     R8,=A(AN11,AN11L,RSCRN)\n         USING AN11,R8             SCREEN IMAGE ADDRESSABILITY\n         MVC   AN11D1+L'AN11D1,AN11Y1\n         MVC   AN11D1+3*L'AN11D1,AN11Y4\n         MVC   AN11D1+5*L'AN11D1,AN11Y5\n         MVC   AN11D1+7*L'AN11D1,AN11Y2\n         MVC   AN11D1+9*L'AN11D1,AN11Y1\n         MVC   AN11D2+L'AN11D2,AN11Y2\n         MVC   AN11D2+3*L'AN11D2,AN11Y3\n         MVC   AN11D2+5*L'AN11D2,AN11Y7\n         MVC   AN11D2+7*L'AN11D2,AN11Y5\n         MVC   AN11D2+9*L'AN11D2,AN11Y2\n         MVC   AN11D3+L'AN11D3,AN11Y4\n         MVC   AN11D3+3*L'AN11D3,AN11Y6\n         MVC   AN11D3+5*L'AN11D3,AN11Y7\n         MVC   AN11D3+7*L'AN11D3,AN11Y5\n         MVC   AN11D3+9*L'AN11D3,AN11Y4\n         MVC   AN11D4+L'AN11D4,AN11Y1\n         MVC   AN11D4+3*L'AN11D4,AN11Y4\n         MVC   AN11D4+5*L'AN11D4,AN11Y5\n         MVC   AN11D4+7*L'AN11D4,AN11Y2\n         MVC   AN11D4+9*L'AN11D4,AN11Y1\n         MVC   AN11D5+L'AN11D5,AN11Y2\n         MVC   AN11D5+3*L'AN11D5,AN11Y3\n         MVC   AN11D5+5*L'AN11D5,AN11Y7\n         MVC   AN11D5+7*L'AN11D5,AN11Y5\n         MVC   AN11D5+9*L'AN11D5,AN11Y2\n         MVC   AN11D6+L'AN11D6,AN11Y4\n         MVC   AN11D6+3*L'AN11D6,AN11Y6\n         MVC   AN11D6+5*L'AN11D6,AN11Y7\n         MVC   AN11D6+7*L'AN11D6,AN11Y5\n         MVC   AN11D6+9*L'AN11D6,AN11Y4\n         MVC   AN11T1(L'TXTW+L'TXTH),TXTW\n         MVC   AN11T2(2*L'AN11T2),TXT1XY\n         MVC   AN11T3(2*L'AN11T3),TXT2XY\n         LH    R0,TXTW\n         XR    R1,R1\n         LH    R1,TXT2XY\n         MH    R0,=Y(L'AN11T3T)\n         AR    R1,R0\n         STCM  R1,B'0011',AN11T4\n         MVC   AN11T4+L'AN11T4,TXT2XY+L'TXT2XY\n         MVC   AN11Q1(L'TXQW+L'TXQH),TXQW\n         MVC   AN11Q2(2*L'AN11Q2),TXQXY\n         MVC   ASCRIPTR(ASPL),=A(AN11,AN11L,RSCRN) SET PTR'S\n         MVC   AN11D1,AN11X1       SET INITIAL STATUS\n         MVI   AN11M1,X'02'\nANIM11R $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,AN11LN1I)     SET NORMAL INPUT\n         MVI   INCMD,C' '          RESET INPUT FIELD\n         CLC   AN11D1,AN11X1       IS IT MIXED?\n         BE    ANIM11C             YES\n         MVC   AN11D1,AN11X1       NO\n         MVC   AN11D1+2*L'AN11D1,AN11X4\n         MVC   AN11D1+4*L'AN11D1,AN11X5\n         MVC   AN11D1+6*L'AN11D1,AN11X2\n         MVC   AN11D1+8*L'AN11D1,AN11X1\n         MVC   AN11D2,AN11X2\n         MVC   AN11D2+2*L'AN11D2,AN11X3\n         MVC   AN11D2+4*L'AN11D2,AN11X7\n         MVC   AN11D2+6*L'AN11D2,AN11X5\n         MVC   AN11D2+8*L'AN11D2,AN11X2\n         MVC   AN11D3,AN11X4\n         MVC   AN11D3+2*L'AN11D3,AN11X6\n         MVC   AN11D3+4*L'AN11D3,AN11X7\n         MVC   AN11D3+6*L'AN11D3,AN11X5\n         MVC   AN11D3+8*L'AN11D3,AN11X4\n         MVC   AN11D4,AN11X1\n         MVC   AN11D4+2*L'AN11D4,AN11X4\n         MVC   AN11D4+4*L'AN11D4,AN11X5\n         MVC   AN11D4+6*L'AN11D4,AN11X2\n         MVC   AN11D4+8*L'AN11D4,AN11X1\n         MVC   AN11D5,AN11X2\n         MVC   AN11D5+2*L'AN11D5,AN11X3\n         MVC   AN11D5+4*L'AN11D5,AN11X7\n         MVC   AN11D5+6*L'AN11D5,AN11X5\n         MVC   AN11D5+8*L'AN11D5,AN11X2\n         MVC   AN11D6,AN11X4\n         MVC   AN11D6+2*L'AN11D6,AN11X6\n         MVC   AN11D6+4*L'AN11D6,AN11X7\n         MVC   AN11D6+6*L'AN11D6,AN11X5\n         MVC   AN11D6+8*L'AN11D6,AN11X4\n         MVC   AN11T4T,=CL14' (after mix)'\n         CLI   AN11M1,X'01'        FIRST PASS PATTERN?\n         BE    ANIM11B             YES\n        $FS    TEXT='Reshow ?',MF=(I,AN11LN1X)\n        $FS    TEXT='(Y/N)',MF=(I,AN11LN1Z)\n         B     ANIM11E\nANIM11C  CLI   AN11M1,X'01'        FIRST PASS PATTERN?\n         BE    ANIM11P             YES\n         MVI   AN11M1,X'01'        NO, SET FIRST PATTERNS\n         MVI   AN11M2,X'02'\n         MVI   AN11M3,X'03'\n         MVI   AN11M4,X'04'\n         MVI   AN11M5,X'04'\n         MVI   AN11M6,X'04'\n         MVI   AN11R1,X'05'        COLOR = TURQ\n         MVI   AN11R2,X'04'        COLOR = GREEN\n         B     ANIM11O\nANIM11P  MVI   AN11M1,X'02'        SET SECOND PATTERNS\n         MVI   AN11M2,X'03'\n         MVI   AN11M3,X'04'\n         MVI   AN11M4,X'05'\n         MVI   AN11M5,X'05'\n         MVI   AN11M6,X'05'\n         MVI   AN11R1,X'06'        COLOR = YELLOW\n         MVI   AN11R2,X'01'        COLOR = BLUE\nANIM11O  MVC   AN11D1,AN11X1M\n         MVC   AN11D1+2*L'AN11D1,AN11X4M\n         MVC   AN11D1+4*L'AN11D1,AN11X5M\n         MVC   AN11D1+6*L'AN11D1,AN11X2M\n         MVC   AN11D1+8*L'AN11D1,AN11X1M\n         MVC   AN11D2,AN11X2M\n         MVC   AN11D2+2*L'AN11D2,AN11X3M\n         MVC   AN11D2+4*L'AN11D2,AN11X7M\n         MVC   AN11D2+6*L'AN11D2,AN11X5M\n         MVC   AN11D2+8*L'AN11D2,AN11X2M\n         MVC   AN11D3,AN11X4M\n         MVC   AN11D3+2*L'AN11D3,AN11X6M\n         MVC   AN11D3+4*L'AN11D3,AN11X7M\n         MVC   AN11D3+6*L'AN11D3,AN11X5M\n         MVC   AN11D3+8*L'AN11D3,AN11X4M\n         MVC   AN11D4,AN11X1P\n         MVC   AN11D4+2*L'AN11D4,AN11X4P\n         MVC   AN11D4+4*L'AN11D4,AN11X5P\n         MVC   AN11D4+6*L'AN11D4,AN11X2P\n         MVC   AN11D4+8*L'AN11D4,AN11X1P\n         MVC   AN11D5,AN11X2P\n         MVC   AN11D5+2*L'AN11D5,AN11X3P\n         MVC   AN11D5+4*L'AN11D5,AN11X7P\n         MVC   AN11D5+6*L'AN11D5,AN11X5P\n         MVC   AN11D5+8*L'AN11D5,AN11X2P\n         MVC   AN11D6,AN11X4P\n         MVC   AN11D6+2*L'AN11D6,AN11X6P\n         MVC   AN11D6+4*L'AN11D6,AN11X7P\n         MVC   AN11D6+6*L'AN11D6,AN11X5P\n         MVC   AN11D6+8*L'AN11D6,AN11X4P\n         MVC   AN11T4T,=CL14' (before mix)'\nANIM11B $FS    TEXT='... just',MF=(I,AN11LN1X)\n        $FS    TEXT='ENTER',MF=(I,AN11LN1Z)\nANIM11E  MVC   AN11LN1R,INCMD\n        #GO    FSCALL              DISPLAY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     ANIM11X             0 - CONTINUE (NO PF-KEY SUPPORTED)\n         B     ANIM11Y             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BM    ANIM11Z             IMMEDIATE TERMINATION\n         BZ    ANIM11E             NONE, RESHOW\n         CLC   AN11D1,AN11X1       IS IT MIXED?\n         BNE   ANIM11R             NO\n         CLI   AN11M1,X'01'        YES, FIRST PASS PATTERN?\n         BE    ANIM11R             YES\n         CLI   INCMD,C'Y'          NO, RESHOW (RE-DISPLAY) COMMAND?\n         BE    ANIM11R             \"Y\", GO DO IT\n         CLI   INCMD,C'N'\n         BE    *+L'*+8             \"N\", CONTINUE\n         CLI   INCMD,C' '          JUST A SPACE (BLANK)?\n         BNE   *+L'*+6             NO\n         XR    R15,R15             YES, CONTINUE, SET RC=0\n         B     ANIM11X\n        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,AN11LN1I)     SET ERROR INPUT\n         B     ANIM11E\n         DROP  R8\nANIM11Y  LA    R0,ERRAN11\n         LA    R1,L'ERRAN11\n         ST    R0,ERRMSA\n         STH   R1,ERRMSL\nANIM11Z  LA    R15,4               SET RC=4\nANIM11X $XRET  CC=(R15)\n         SPACE 1\nAN11WMM  DC    H'20'               WIDTH (IN MMS)\nAN11HMM  DC    H'20'               HEIGHT (IN MMS)\nAN11WX   DC    H'0'\n*                                  CORNERS CO-ORD'S\nAN11X1   DC    H'0'                    X CO-ORD OF 1ST CORNER\nAN11Y1   DC    H'0'                    Y \" \"\nAN11X2   DC    H'0'                    X CO-ORD OF 2ND CORNER\nAN11Y2   DC    H'0'                    Y \" \"\nAN11X3   DC    H'0'                    X CO-ORD OF 3RD CORNER\nAN11Y3   DC    H'0'                    Y \" \"\nAN11X4   DC    H'0'                    X CO-ORD OF 4TH CORNER\nAN11Y4   DC    H'0'                    Y \" \"\nAN11X5   DC    H'0'                    X CO-ORD OF 5TH CORNER\nAN11Y5   DC    H'0'                    Y \" \"\nAN11X6   DC    H'0'                    X CO-ORD OF 6TH CORNER\nAN11Y6   DC    H'0'                    Y \" \"\nAN11X7   DC    H'0'                    X CO-ORD OF 7TH CORNER\nAN11Y7   DC    H'0'                    Y \" \"\nAN11X1M  DC    H'0'                ALTERNATE X-MINUS CO-ORD'S\nAN11X2M  DC    H'0'\nAN11X3M  DC    H'0'\nAN11X4M  DC    H'0'\nAN11X5M  DC    H'0'\nAN11X6M  DC    H'0'\nAN11X7M  DC    H'0'\nAN11XAN  EQU   (*-AN11X1M)/L'AN11X1M\nAN11X1P  DC    H'0'                ALTERNATE X-PLUS CO-ORD'S\nAN11X2P  DC    H'0'\nAN11X3P  DC    H'0'\nAN11X4P  DC    H'0'\nAN11X5P  DC    H'0'\nAN11X6P  DC    H'0'\nAN11X7P  DC    H'0'\nERRAN11  DC    C' -> \"ANIM11\" : test failed'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nAN11     $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)\nAN11SF1  DC    AL2(AN11SF1L)       L = LENGTH OF S.F.\n         DC    XL1'03'             SFID = ERASE/RESET\n         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE\nAN11SF1L EQU   *-AN11SF1\nAN11SF2  DC    AL2(AN11SF2L)       L = LENGTH OF S.F.\n         DC    XL2'0F10'           SFID = OBJECT PICTURE\n         DC    XL1'00'               PID\n         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST\n*                                          - MODE : INTERMEDIATE MODE\n         DC    XL1'00'               OBJTYP : GRAPHICS\n*                                  DATA\n         DC    X'70'               GBSEG (SEGMENT START)\n         DC    AL1(AN11P1L)          LENGTH OF FOLLOWING PARAMETERS\nAN11P1   DC    CL4'CH01'             SEGMENT-ID\n*                                    FLAGS - 1ST BYTE :\n         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE\n*                                    BIT 1 = 1 - RESERVED\n*                                    BIT 2 = 1 - DETECTABLE\n*                                    BIT 3 = 1 - RESERVED\n*                                    BIT 4 = 0 - NO HIGHLIGHTING\n*                                    BITS 5-7 = 100 - RESERVED\n*                                    FLAGS - 2ND BYTE :\n         DC    BL1'00001000'         BIT 0 = 0 - CHAINED\n*                                    BITS 1-2 = 00 - RESERVED\n*                                    BIT 3 = 0 - NO PROLOG\n*                                    BIT 4 = 1 - TRANSFORMABLE\n*                                    BITS 5-7 = 000 - RESERVED\n         DC    AL2(AN11SG1L)         LENGTH OF SEGMENT TO BE CREATED\n         DC    XL4'00'               RESERVED\nAN11P1L  EQU   *-AN11P1\nAN11SG1  EQU   *                   SEGMENT DATA\n         DC    XL1'0A'             GSCOL (SET COLOR)\nAN11R1   DC    XL1'00'               COLOR\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'01'               MODE = MIX\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M1   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D1L)          LENGTH OF FOLLOWING DATA\nAN11D1   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D1L  EQU   *-AN11D1\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M2   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D2L)          LENGTH OF FOLLOWING DATA\nAN11D2   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D2L  EQU   *-AN11D2\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M3   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D3L)          LENGTH OF FOLLOWING DATA\nAN11D3   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D3L  EQU   *-AN11D3\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'0A'             GSCOL (SET COLOR)\nAN11R2   DC    XL1'00'               COLOR\n         DC    XL1'0C'             GSMX (SET MIX)\n         DC    XL1'01'               MODE = MIX\n         DC    XL1'18'             GSLT (SET LINE TYPE)\n         DC    XL1'07'               LINETYPE = SOLID LINE\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M4   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D4L)          LENGTH OF FOLLOWING DATA\nAN11D4   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D4L  EQU   *-AN11D4\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M5   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D5L)          LENGTH OF FOLLOWING DATA\nAN11D5   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D5L  EQU   *-AN11D5\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)\nAN11M6   DC    XL1'00'               PATTERN = DECREASE DENSITY\n         DC    XL1'68'             GBAR (BEGIN AREA)\n         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES\n         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)\n         DC    AL1(AN11D6L)          LENGTH OF FOLLOWING DATA\nAN11D6   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START\n         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END\n         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END\nAN11D6L  EQU   *-AN11D6\n         DC    XL1'60'             GEAR (END AREA)\n         DC    AL1(1)                LENGTH OF FOLLOWING DATA\n         DC    XL1'00'                 RESERVED\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'29'             GSMS (MARKER TYPE)\n         DC    XL1'07'               SYMBOL = FILLED DIAMOND\n         DC    XL1'C2'             GSMRKS (MARKER)\n         DC    AL1(AN11C1L)          LENGTH OF FOLLOWING DATA\nAN11C1   DC    HL2'0'                  X = 0\n         DC    HL2'0'                  Y = 0\nAN11C1L  EQU   *-AN11C1\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'07'               COLOR = NEUTRAL (WHITE)\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'01'               DIRECTION = LEFT TO RIGHT\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN11T1L)          LENGTH OF FOLLOWING DATA\nAN11T1   DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN11T1L  EQU   *-AN11T1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN11T2L)          LENGTH OF FOLLOWING DATA\nAN11T2   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN11T2T  DC    CL6'Test :'             STRING\nAN11T2L  EQU   *-AN11T2\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN11T3L)          LENGTH OF FOLLOWING DATA\nAN11T3   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN11T3T  DC    CL12' Draw a Cube'      STRING\nAN11T3L  EQU   *-AN11T3\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'01'               COLOR = BLUE\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN11T4L)          LENGTH OF FOLLOWING DATA\nAN11T4   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\nAN11T4T  DC    CL14' '               STRING\nAN11T4L  EQU   *-AN11T4\n         DC    XL1'0A'             GSCOL (SET COLOR)\n         DC    XL1'02'               COLOR = RED\n         DC    XL1'19'             GSLW (SET LINE WIDTH)\n         DC    XL1'01'               LINEWIDTH = NORMAL LINE\n         DC    XL1'39'             GSCM (SET CHAR. MODE)\n         DC    XL1'03'               MODE = STROKE PRECISION\n         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)\n         DC    XL1'02'               DIRECTION = TOP TO BOTTOM\n         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)\n         DC    AL1(AN11Q1L)          LENGTH OF FOLLOWING DATA\nAN11Q1   DC    HL2'0'                  WIDTH\n         DC    HL2'0'                  HEIGHT\nAN11Q1L  EQU   *-AN11Q1\n         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)\n         DC    AL1(AN11Q2L)          LENGTH OF FOLLOWING DATA\nAN11Q2   DC    HL2'0'                  X CO-ORD OF STRING\n         DC    HL2'0'                  Y \" \"\n         DC    CL8'ANIM11'             STRING\nAN11Q2L  EQU   *-AN11Q2\nAN11SG1L EQU   *-AN11SG1\nAN11SF2L EQU   *-AN11SF2\nAN11SF3  DC    AL2(AN11SF3L)       L = LENGTH OF S.F.\n         DC    XL1'40'             SFID = OUTBOUND 3270DS\n         DC    XL1'00'               PID\n         $FS   CC=(W),WCC=(KBR),MF=L\n         $FS   SBA=(1,1),MF=L\nAN11LN1I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\nAN11LN1R $FS   TEXT=(' ',1),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   TEXT='<= ',MF=L\nAN11LN1X $FS   TEXT=(' ',8),MF=L\n         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L\nAN11LN1Z $FS   TEXT=(' ',5),MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),MF=L\n         $FS   SF=(IC),MF=L\nAN11SF3L EQU   *-AN11SF3\nAN11L    EQU   *-AN11\n         EJECT\n*------> FULL-SCREEN OUTPUT ONLY SERVICE ROUTINE.\n*        AT ENTRY, THE ROUTINE HAS TWO INPUTS :\n*              \"ASCRIPTR\" POINTS TO THE SCREEN IMAGE,\n*              \"ASCRLGTH\" POINTS TO THE SCREEN IMAGE LENGTH.\n*        AT EXIT : R15 = 0 - OK\n*                        4 - ERROR\n         SPACE 1\nFSCOUT  $XENT  BASE=R9\n*        --> DO FULL-SCREEN TPUT (OUTPUT) ONLY.\n         NI    OPTFS,FSFULL+FSSNAP\n         OI    OPTFS,FSSKIP\n         L     R2,ASCRIPTR\n        @FS    OPTFS,(R2),ASCRLGTH,MF=(E,FSPARM)\n         LTR   R15,R15             HOW COMPLETE?\n         BZ    FSCOX               OK, RC=0\n         LA    R15,4               ERROR, SET RC=4\nFSCOX   $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> FULL-SCREEN OUTPUT-INPUT SERVICE ROUTINE.\n*        AT ENTRY, THE ROUTINE HAS THREE INPUTS :\n*              \"ASCRIPTR\" POINTS TO THE SCREEN IMAGE,\n*              \"ASCRLGTH\" POINTS TO THE SCREEN IMAGE LENGTH,\n*              \"ASCRRTN\" POINTS TO THE INPUT SCREEN PROCESS ROUTINE.\n*        AT EXIT : R15 = 0 - PF-KEY PROCESS (FUNCTION IN \"INCMD\")\n*                        4 - ERROR\n*                        8 - R1 = ZERO -> RESHOW\n*                                 MINUS -> CLEAR AND END\n*                                 PLUS -> ANALYZE INPUT (\"INCMD\")\n         SPACE 1\nFSCALL  $XENT  BASE=R9\n*        --> DO FULL-SCREEN TPUT (OUTPUT) AND TGET (INPUT).\n         NI    OPTFS,FSFULL+FSSNAP\n         L     R2,ASCRIPTR\n        @FS    OPTFS,(R2),ASCRLGTH,MF=(E,FSPARM)\n         LTR   R15,R15\n         BZ    FSCAID\n         CH    R15,=H'8'           END REQUESTED?\n         BE    *+L'*+8             YES\n         LA    R15,4               NO, ERROR, SET RC=4\n         B     FSCX                EXIT\n         L     R1,=F'-1'           YES (PA-KEY)\n         B     FSCRC\nFSCAID   LTR   R1,R1               AID?\n         BZ    FSNONE              NO, NONE\n         CLI   0(R1),X'7D'         YES, ENTER KEY?\n         BE    FSCENT              YES\n         CLI   0(R1),X'F1'         NO, PF-KEY 1-9?\n         BL    *+L'*+8             NO\n         CLI   0(R1),X'F9'\n         BNH   FSCPFK              YES\n         CLI   0(R1),X'7A'         NO, PF-KEY 10-12?\n         BL    *+L'*+8             NO\n         CLI   0(R1),X'7C'\n         BNH   FSCPFK              YES\n         CLI   0(R1),X'C1'         NO, PF-KEY 13-21?\n         BL    *+L'*+8             NO\n         CLI   0(R1),X'C9'\n         BNH   FSCPFK              YES\n         CLI   0(R1),X'4A'         NO, PF-KEY 22-24?\n         BL    *+L'*+8             NO\n         CLI   0(R1),X'4C'\n         BNH   FSCPFK              YES\nFSNONE   XR    R1,R1               NO, RE-DISPLAY\n         B     FSCRC\nFSCPFK   MVC   INCMD,0(R1)         MOVE THE REQUESTED PF-KEY\n         B     FSCX                EXIT\nFSCENT  #GO    ASCRRTN,AR=D        GO TO REPLY ROUTINE\nFSCRC    LA    R15,8               NOT FOUND, SET RC=8\n         L     R14,4(R13)          PREVIOUS SAVE AREA\n         ST    R1,24(R14)          SET BACK R1\nFSCX    $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> READ \"SCREEN\" PROCESS ROUTINE.\n*        AT EXIT : R1 = 0 OR 1\n         SPACE 1\nRSCRN   $XENT  BASE=R9\n         XR    R3,R3               INITIAL SWITCH\n         LA    R2,1                INITIAL COUNT (ONE IF JUST ENTER)\nRSLOOP  @FSR   ,                   GET REPLY TEXT\n         LTR   R15,R15             NO MORE FIELDS MODIFIED?\n         BNZ   RSPRCD              NO\n         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA\n         ST    R2,24(R1)           PASS BACK COUNT IN R1\n        $XRET  CC=(R15)\nRSPRCD   LTR   R3,R3               FIRST TIME DONE?\n         BNZ   *+L'*+4             YES\n         LR    R3,R2               NO, SAY IT DONE\n         XR    R2,R2               RESET COUNT (ZERO TO RESHOW)\n         CLC   RSSBA1,0(R15)\n         BNE   RSLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         LTR   R1,R1\n         BZ    RSFC1               FIELD CLEARED (CANC FC)\n         CH    R1,=H'1'\n         BNE   RSLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVI   INCMD,C' '          FOR UPPERCASE\n         OC    INCMD,3(R15)        COPY COMMAND\n         B     RSBF1\nRSFC1    MVI   INCMD,C' '          COMMAND CLEARED\nRSBF1    LA    R2,1(R2)            BUMP COUNT\n         B     RSLOOP\n         SPACE 1\nRSSBA1   $FS   SBA=(1,2),MF=L\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> READ \"SELECTION\" PROCESS ROUTINE.\n*        AT EXIT : R1 = 0 OR 2\n         SPACE 1\nRSSEL   $XENT  BASE=R9\n         XR    R2,R2               INITIAL COUNT\nSLLOOP  @FSR   ,                   GET REPLY TEXT\n         LTR   R15,R15             NO MORE FIELDS MODIFIED?\n         BNZ   SLPRCD              NO\n         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA\n         ST    R2,24(R1)           PASS BACK COUNT IN R1\n        $XRET  CC=(R15)\nSLPRCD   CLC   SLSBA1,0(R15)\n         BNE   SLLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         LTR   R1,R1\n         BZ    SLFC1               FIELD CLEARED (CANC FC)\n         CH    R1,=H'2'\n         BH    SLLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVC   SELIN,=CL2' '       FOR UPPERCASE\n         SH    R1,=H'1'\n         EX    R1,SLOF1            COPY SELECTION\n         B     SLBF1\nSLFC1    MVC   SELIN,=CL2' '       SELECTION CLEARED\nSLBF1    LA    R2,2(R2)            BUMP COUNT\n         B     SLLOOP\nSLOF1    OC    SELIN(*-*),3(R15)   <<EXECUTED>>\n         SPACE 1\nSLSBA1   $FS   SBA=(23,2),MF=L\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 2\n*------- DSECT'S\n         PRINT NOGEN\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\n         END\n./     ADD     NAME=ANIM$\n./     NUMBER  NEW1=100,INCR=100\n//ANIM     JOB (........),'INSTALL -A N I M-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)\n/*JOBPARM L=10\n//*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULE INSTALLATION :                               *\n//* -----------------------------------                               *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*\n//ASS     EXEC PGM=IEV90,\n//             PARM='SYSPARM(FULL,EU),XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ANIM),DISP=SHR\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,MAP',COND=(4,LT)\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSADD    DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   ANIM\n  NAME    ANIM(R)\n/*\n./     ADD     NAME=CODEBUST\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"CODEBUST\" OR \"BUGBUSTERS\"    C\nC---------------------------------------------------------------------C\nC     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C\nC     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C\nC     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C\nC     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C\nC     BE APPRECIATED BY US TRUE 'TECHIES'.                            C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     CHANGE LOG :                                                    C\nC           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C\nC                     PGM AND TSO \"SESSION MANAGER\". DUE TO LACK OF   C\nC                     A CALL TO FSTERM TO CLEANUP.   JDM              C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      DIMENSION X1(6),Y1(6),X2(6),Y2(6)\n      INTEGER*4 COPYP(9)\n      DATA X1/55.0,65.0,75.0,80.0,80.0,80.0/\n      DATA Y1/90.0,93.0,85.0,70.0,60.0,40.0/\n      DATA X2/45.0,35.0,25.0,20.0,20.0,20.0/\n      DATA Y2/90.0,93.0,85.0,70.0,60.0,40.0/\n      DATA COPYP/0,0,1,0,0,0,0,80,0/\n      CALL FSINN\n      CALL GSFLD(1,1,32,80)\n      CALL GSPS(1.0,1.0)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(1)\n      CALL GSPAT(16)\nC----- OUTSIDE CIRCLE\n      CALL GSCOL(2)\n      CALL GSLW(100)\n      CALL GSMOVE(10.0,50.0)\n      CALL GSAREA(1)\n      CALL GSARC(50.0,50.0,360.0)\n      CALL GSENDA\nC----- INSIDE CIRCLE\n      CALL GSCOL(8)\n      CALL GSLW(100)\n      CALL GSMOVE(15.0,50.0)\n      CALL GSAREA(1)\n      CALL GSARC(50.0,50.0,360.0)\n      CALL GSENDA\nC----- BUG\n      CALL GSCOL(7)\n      CALL GSLW(100)\n      CALL GSMOVE(48.0,74.0)\n      CALL GSAREA(1)\n      CALL GSLINE(45.0,70.0)\n      CALL GSLINE(41.0,60.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(50.0,20.0)\n      CALL GSLINE(58.0,40.0)\n      CALL GSLINE(59.0,60.0)\n      CALL GSLINE(55.0,70.0)\n      CALL GSLINE(52.0,74.0)\n      CALL GSLINE(48.0,74.0)\n      CALL GSENDA\n      CALL GSMOVE(45.0,60.0)\n      CALL GSLINE(38.0,70.0)\n      CALL GSLINE(38.0,77.0)\n      CALL GSMOVE(45.0,50.0)\n      CALL GSLINE(38.0,60.0)\n      CALL GSLINE(38.0,67.0)\n      CALL GSMOVE(45.0,50.0)\n      CALL GSLINE(38.0,40.0)\n      CALL GSLINE(38.0,33.0)\n      CALL GSMOVE(45.0,40.0)\n      CALL GSLINE(38.0,30.0)\n      CALL GSLINE(38.0,23.0)\n      CALL GSMOVE(55.0,40.0)\n      CALL GSLINE(62.0,30.0)\n      CALL GSLINE(62.0,23.0)\n      CALL GSMOVE(55.0,50.0)\n      CALL GSLINE(62.0,40.0)\n      CALL GSLINE(62.0,33.0)\n      CALL GSMOVE(55.0,50.0)\n      CALL GSLINE(62.0,60.0)\n      CALL GSLINE(62.0,67.0)\n      CALL GSMOVE(55.0,60.0)\n      CALL GSLINE(62.0,70.0)\n      CALL GSLINE(62.0,77.0)\n      CALL GSCOL(8)\n      CALL GSMOVE(45.0,68.0)\n      CALL GSLINE(55.0,68.0)\n      CALL GSMOVE(50.0,68.0)\n      CALL GSLINE(50.0,20.0)\n      CALL GSMS(7)\n      CALL GSMARK(48.0,71.0)\n      CALL GSMARK(52.0,71.0)\nC----- BAR\n      CALL GSCOL(2)\n      CALL GSLW(100)\n      CALL GSMOVE(14.0,63.0)\n      CALL GSAREA(1)\n      CALL GSLINE(16.0,69.0)\n      CALL GSLINE(88.0,43.0)\n      CALL GSLINE(86.0,37.0)\n      CALL GSLINE(14.0,63.0)\n      CALL GSENDA\nC----- ANTENNAE\n      CALL GSCOL(7)\n      CALL GSLW(100)\n      CALL GSMOVE(52.0,74.0)\n      CALL GSPFLT(6,X1,Y1)\n      CALL GSMOVE(48.0,74.0)\n      CALL GSPFLT(6,X2,Y2)\nC----- INTRODUCTION\n      CALL GSLW(10)\n      CALL GSCOL(2)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCB(1.5,5.0)\n      CALL GSCHAR(12.0,5.0,11,'CODEBUSTERS')\n      CALL GSCHAR(75.0,5.0,9,' Y 4 2 1 ')\n      CALL GSSCLS\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\nC     CALL FSOPEN('CODEBSTR',3,COPYP)\nC     CALL GSCOPY(66,130)\nC     CALL FSCLS(1)\nC     CALL FSSAVE('CODEBSTR')\n      CALL FSTERM\n      STOP\n      END\n./     ADD     NAME=CODEBUS$\n./     NUMBER  NEW1=100,INCR=100\n//CODEBUST JOB (........),'INSTALL -CODEBUST-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(CODEBUST),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  NAME   CODEBUST(R)\n/*\n./     ADD     NAME=ILRBIRD\n./     NUMBER  NEW1=100,INCR=100\nBIRD     TITLE '-- I L R B I R D --'\nILRBIRD  START 0\n         SPACE 1\n*--------------------------------------------------------------------*\n*                                                                    *\n*        THIS IS A DEMONSTRATION FROM AN UNKNOWN AUTHOR WHICH        *\n*        SHOWS ONE HOW TO ACCOMPLISH FULL-SCREEN WRITES TO A         *\n*        TERMINAL.  THERE ARE PROBABLY MANY VERSIONS OF THIS         *\n*        AROUND, SO THIS MAY NOT BE THE ORIGINAL.                    *\n*                                                                    *\n*        CLEANED UP THE CODE AND TRIED TO DOCUMENT WHAT IS           *\n*        HAPPENING.                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\n* ORIGIN : EXTRACTED FROM CBT 93 FEB TAPE, FILE 300.\n* CHANGE : LOCAL MACROS USE, SOME MINOR CHANGES AND RE-ENTERABLE\n*          DONE BY MOINIL P.A. - COMPUTING CENTRE (TP361)\n*                                J.R.C. - ISPRA ESTABLISHMENT\n*                                21020 ISPRA (VA), ITALY\n         SPACE 1\nILRBIRD  AMODE 24\nILRBIRD  RMODE 24\n         PRINT NOGEN\n         EJECT\n        $DEFREG\n        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT\n         LR    R9,R13\n         USING WKAREA,R9\n         MVC   PUTBF(LISQ),PUTISQ\n         MVC   PUTBL(L'PUTLST),PUTLST\n         XR    R3,R3\n         SPACE 1\nMOVEIT   LA    R4,DTAREA           GET DATA AREA ADDRESS\n         LA    R5,LGTHDT           AND LENGTH\n         XR    R6,R6               SET FROM ADDRESS TO ZERO\n         XR    R7,R7               WITH ZERO LENGTH\n         ICM   R7,B'1000',=X'40'   FILL CHARACTER IS BLANK\n         MVCL  R4,R6               CLEAR THE BUFFER\n         LA    R3,1(,R3)           BUMP THE COUNTER\n         LA    R4,DTAREA-OVERLAP+25 POINT TO DATA AREA TARGET\n         LA    R5,L'MLNES          SET INCREMENT IN REG 5\n         LR    R6,R3               COUNTER IN REG 6\n         LA    R7,MLNES            POINT TO LINES\n         LA    R0,NOLNES           MAX LINES ON SCREEN\n         SR    R0,R3               SUBTRACT COUNT\n         MH    R0,=Y(LGLNES)\n         AR    R4,R0\nMVBIRD   MVC   0(L'MLNES,R4),0(R7) MOVE TO A LINE\n         AR    R7,R5               BUMP MOVE ADDRESSES\n         AH    R4,=Y(LGLNES)\n         BCT   R6,MVBIRD           LOOP IF MORE\n         CH    R3,=H'22'           ARE WE DONE\n         BH    FINI                BR IF YES\n         LA    R5,PUTBF            POINT TO STUFF TO BE WRITTEN\n         LA    R6,LGTHBF           LOAD LENGTH OF BUFFER\n         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n        TPUT   (R5),(R6),R\n        STIMER WAIT,BINTVL=WAITIN1\n         B     MOVEIT\nFINI     MVC   PUTBF+STXT(7),=CL7'BYE-BYE'\n         LA    R5,PUTBF            POINT TO STUFF TO BE WRITTEN\n         LA    R6,LGTHBF           LOAD LENGTH OF BUFFER\n         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n        TPUT   (R5),(R6),R\n        STIMER WAIT,BINTVL=WAITIN2\n         LA    R5,BUFBLK           POINT TO STUFF TO BE WRITTEN\n         LA    R6,BLKLN            LOAD LENGTH OF BUFFER\n         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC\n*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)\n         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR\n        TPUT   (R5),(R6),R\n        $XRET  CC=0,LV=WKLEN,TYPE=RENT\n         EJECT\nWAITIN1  DC    F'100'              TIME * 0.01\nWAITIN2  DC    F'1000'\nTPUTFLG  DC    X'0B'               WAIT HOLD,NOBREAK,ASIS\nPUTISQ  $FS    WCC=(KBR,RMDT),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=NORMAL,MF=L\n        $FS    SBA=(1,3),SF=(PROT,INT),MF=L\nSTXT     EQU   *-PUTISQ\n        $FS    TEXT=' HELLO ',MF=L\n        $FS    SF=(PROT),MF=L\nOVERLAP  EQU   11                  OVERLAP'D DATA LENGTH\nLISQ     EQU   *-PUTISQ\nPUTLST  $FS    SF=(PT,IC),MF=L\nBUFBLK  $FS    WCC=(AL,KBR,RMDT),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nBLKLN    EQU   *-BUFBLK\n         SPACE 1\n        LTORG\n         SPACE 1\nMLNES    DC    CL30'                 ##           '    LINE 1\n         DC    CL30'                ####          '         2\n         DC    CL30'                ####          '         3\n         DC    CL30'                ####          '         4\n         DC    CL30'                ####          '         5\n         DC    CL30'                ####          '         6\n         DC    CL30'                ####          '         7\n         DC    CL30'           #### #### ###      '         8\n         DC    CL30'       ### #### #### ####     '         9\n         DC    CL30'      #### #### #### ####     '         10\n         DC    CL30'      #### #### #### ####  ###'         11\n         DC    CL30'      ################### ####'         12\n         DC    CL30'      ################### ####'         13\n         DC    CL30'       ###################### '         14\n         DC    CL30'        ####################  '         15\n         DC    CL30'         ##################   '         16\n         DC    CL30'          ################    '         17\n         DC    CL30'           ##############     '         18\n         DC    CL30'            ############      '         19\n         DC    CL30'            ############      '         20\n         DC    CL30'            ############      '         21\n         DC    CL30'                              '         22\n         DC    CL30'                              '         23\n         EJECT\nWKAREA   DSECT\n         DS    18F                 SAVE AREA\n         SPACE 1\nPUTBF    DS    (LISQ)X\nDTAREA   DS    CL(80-OVERLAP)\nLGLNES   EQU   OVERLAP+L'DTAREA\n         DS    23CL(LGLNES)\nLGTHDT   EQU   *-DTAREA\nNOLNES   EQU   (LGTHDT+OVERLAP)/LGLNES\nPUTBL    DS    (L'PUTLST)X\nLGTHBF   EQU   *-PUTBF\n         SPACE 1\nWKLEN    EQU   (((*-WKAREA)+7)/8)*8\n         SPACE 1\n         END\n./     ADD     NAME=ILRBIRD$\n./     NUMBER  NEW1=100,INCR=100\n//ILRBIRD  JOB (........),'INSTALL -ILRBIRD-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)\n/*JOBPARM L=5\n//*------------------------------------------------------------------*\n//*      INSTALL \"ILRBIRD\" DEMONSTRATION                             *\n//*------------------------------------------------------------------*\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ILRBIRD),DISP=SHR\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,LET,MAP,NORENT',COND=(4,LT)\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD *\n  ENTRY   ILRBIRD\n  NAME    ILRBIRD(R)\n/*\n./     ADD     NAME=LOGO\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"LOGO\".                       C\nC---------------------------------------------------------------------C\nC     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C\nC     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C\nC     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C\nC     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C\nC     BE APPRECIATED BY US TRUE 'TECHIES'.                            C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     CHANGE LOG :                                                    C\nC           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C\nC                     PGM AND TSO \"SESSION MANAGER\". DUE TO LACK OF   C\nC                     A CALL TO FSTERM TO CLEANUP.   JDM              C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      DIMENSION X(29),Y(29),X1(29),Y1(29),X2(8),Y2(8),X3(8),Y8(12)\n      DIMENSION X4(9),Y4(9),X5(9),X6(7),Y6(7),X7(25),Y7(25),X8(12)\n      DIMENSION XF1(3),YF1(3),XF2(3),XF3(3),YF3(3),XF4(3),YF4(3)\n      DIMENSION YF5(3),XF8(3),YF8(3),XF9(3),YF9(3),Y12(7),X13(12)\n      DIMENSION X9(35),Y9(35),X10(5),Y10(5),X11(7),Y11(7),X12(7)\n      DIMENSION Y13(12)\n      DATA X /12.0,15.0,18.0,19.0,18.5,18.0,16.0,15.5,16.0,18.0,\n     *21.0,28.0,40.0,50.0,60.0,72.0,79.0,82.0,84.0,84.5,84.0,82.0,\n     *81.5,81.0,82.0,85.0,88.0,78.0,22.0/\n      DATA Y /80.0,76.0,70.0,64.0,58.0,52.0,44.0,39.0,34.0,30.0,\n     *26.0,21.0,15.0,10.0,15.0,21.0,26.0,30.0,34.0,39.0,44.0,52.0,\n     *58.0,64.0,70.0,76.0,80.0,90.0,90.0/\n      DATA X1/14.0,17.0,20.0,21.0,20.5,20.0,18.0,17.5,18.0,20.0,\n     *23.0,30.0,42.0,50.0,58.0,70.0,77.0,80.0,82.0,82.5,82.0,80.0,\n     *79.5,79.0,80.0,83.0,86.0,78.0,22.0/\n      DATA Y1/80.0,76.0,70.0,64.0,58.0,52.0,44.0,39.0,34.0,30.0,\n     *27.0,22.0,16.0,12.0,16.0,22.0,27.0,30.0,34.0,39.0,44.0,52.0,\n     *58.0,64.0,70.0,76.0,80.0,88.0,88.0/\n      DATA X9/62.0,61.0,60.0,59.0,58.0,57.0,55.5,54.0,57.5,58.5,60.0,\n     *59.75,60.0,61.0,62.0,63.0,64.0,65.0,65.75,65.0,66.5,68.0,68.5,\n     *69.0,68.75,69.0,70.0,70.0,69.0,68.0,67.0,65.0,64.0,63.5,62.5/\n      DATA Y9/74.0,73.25,73.0,72.5,72.75,73.0,74.0,74.0,71.0,69.5,\n     *68.0,67.0,66.5,66.25,66.0,66.0,66.25,66.5,67.0,68.0,68.5,70.0,\n     *69.1,69.5,70.5,71.5,73.0,74.0,74.5,74.25,73.0,73.5,74.0,75.0,\n     *75.0/\n      DATA X10/61.25,62.0,63.0,64.0,65.0/\n      DATA Y10/73.0,72.75,72.6,72.75,73.5/\n      DATA X11/60.8,61.1,62.0,63.0,64.0,65.0,64.0/\n      DATA Y11/67.25,67.0,66.8,66.75,66.8,67.5,68.0/\n      DATA X12/69.0,69.25,69.0,68.5,67.75,68.0,68.0/\n      DATA Y12/72.25,73.0,73.5,73.5,72.25,72.0,71.0/\n      DATA X2/26.0,28.0,29.0,29.0,28.0,50.0,50.0,24.0/\n      DATA X3/74.0,72.0,71.0,71.0,72.0,50.0,50.0,76.0/\n      DATA Y2/76.0,70.0,66.0,62.0,56.0,56.0,80.0,80.0/\n      DATA X4/27.0,26.0,26.0,30.0,34.0,40.0,50.0,50.0,28.0/\n      DATA X5/73.0,74.0,74.0,70.0,66.0,60.0,50.0,50.0,72.0/\n      DATA Y4/50.0,46.0,40.0,34.0,30.0,27.0,21.0,56.0,56.0/\n      DATA X6/29.0,37.0,43.5,43.5,40.0,38.0,31.0/\n      DATA Y6/36.0,31.0,35.0,36.0,39.0,44.0,44.0/\n      DATA X7/58.75,59.0,58.5,58.5,57.5,58.5,58.5,59.25,58.5,58.5,\n     *58.0,58.0,60.0,61.0,62.0,66.0,65.0,66.0,67.0,\n     *67.25,67.0,66.0,64.0,62.0,60.0/\n      DATA Y7/42.0,41.5,40.0,39.5,37.0,37.0,36.25,36.0,36.0,35.25,\n     *34.75,34.0,33.75,34.0,32.0,35.0,36.5,36.5,38.0,40.0,42.0,\n     *44.0,44.5,44.5,44.0/\n      DATA X8/61.0,63.0,62.25,62.5,63.5,64.0,65.0,65.5,65.5,65.0,\n     *64.5,63.5/\n      DATA Y8/41.25,42.0,40.0,38.5,38.5,39.5,39.5,39.0,38.0,37.0,\n     *36.5,36.75/\n      DATA X13/54.75,55.0,55.1,55.0,54.75,54.5,54.4,54.0,53.5,53.25,\n     *53.5,54.0/\n      DATA Y13/75.25,76.0,76.5,77.0,77.5,77.75,78.5,77.25,76.5,76.0,\n     *75.25,75.0/\n      DATA XF1/34.0,36.0,38.0/\n      DATA YF1/68.0,67.0,68.0/\n      DATA XF2/38.0,40.0,42.0/\n      DATA XF3/42.0,40.0,38.0/\n      DATA YF3/73.0,74.0,73.0/\n      DATA XF4/38.0,36.0,34.0/\n      DATA YF4/76.0,77.0,76.0/\n      DATA XF8/46.0,40.0,47.0/\n      DATA YF8/65.0,56.0,46.0/\n      DATA XF9/53.0,60.0,53.0/\n      CALL FSINN\n      CALL GSFLD(1,1,32,80)\n      CALL GSPS(1.0,1.0)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(1)\nC----- CREATE AND FILL IN OUTSIDE SHIELD IN YELLOW\n      CALL GSLW(2)\n      CALL GSCOL(6)\n      CALL GSPAT(16)\n      CALL GSMOVE(22.0,90.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(29,X,Y)\n      CALL GSENDA\nC----- CREATE AND FILL IN INSIDE SHIELD IN BLUE\n      CALL GSCOL(1)\n      CALL GSPAT(16)\n      CALL GSMOVE(22.0,88.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(29,X1,Y1)\n      CALL GSENDA\nC----- UPPER LEFT QUARTER\n      CALL GSCOL(6)\n      CALL GSPAT(16)\n      CALL GSMOVE(24.0,80.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(8,X2,Y2)\n      CALL GSENDA\nC----- UPPER RIGHT QUARTER\n      CALL GSCOL(5)\n      CALL GSPAT(16)\n      CALL GSMOVE(76.0,80.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(8,X3,Y2)\n      CALL GSENDA\nC----- LOWER LEFT QUARTER\n      CALL GSCOL(5)\n      CALL GSPAT(16)\n      CALL GSMOVE(28.0,56.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(9,X4,Y4)\n      CALL GSENDA\nC----- LOWER RIGHT QUARTER\n      CALL GSCOL(6)\n      CALL GSPAT(16)\n      CALL GSMOVE(72.0,56.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(9,X5,Y4)\n      CALL GSENDA\nC----- GLOBE\n      CALL GSCOL(5)\n      CALL GSPAT(16)\n      CALL GSMOVE(62.0,56.0)\n      CALL GSAREA(0)\n      CALL GSARC(50.0,56.0,360.0)\n      CALL GSENDA\n      CALL GSLW(2)\n      CALL GSCOL(1)\n      CALL GSMOVE(62.0,56.0)\n      CALL GSARC(50.0,56.0,360.0)\n      CALL GSMOVE(44.0,66.0)\n      CALL GSLINE(46.0,65.0)\n      CALL GSLINE(50.0,64.5)\n      CALL GSLINE(53.0,65.0)\n      CALL GSLINE(56.0,66.0)\n      CALL GSMOVE(40.0,62.0)\n      CALL GSLINE(44.0,60.0)\n      CALL GSLINE(50.0,59.0)\n      CALL GSLINE(56.0,60.0)\n      CALL GSLINE(60.0,62.0)\n      CALL GSMOVE(38.0,56.0)\n      CALL GSLINE(62.0,56.0)\n      CALL GSMOVE(40.0,50.0)\n      CALL GSLINE(44.0,52.0)\n      CALL GSLINE(50.0,53.0)\n      CALL GSLINE(56.0,52.0)\n      CALL GSLINE(60.0,50.0)\n      CALL GSMOVE(46.0,45.0)\n      CALL GSLINE(50.0,46.0)\n      CALL GSLINE(54.0,45.0)\n      CALL GSMOVE(46.0,65.0)\n      CALL GSPFLT(3,XF8,YF8)\n      CALL GSMOVE(53.0,65.0)\n      CALL GSPFLT(3,XF9,YF8)\nC----- LIGHTNING\n      CALL GSCOL(6)\n      CALL GSMOVE(58.0,66.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSLINE(61.0,66.0)\n      CALL GSLINE(52.0,54.0)\n      CALL GSLINE(54.0,50.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(49.0,48.0)\n      CALL GSLINE(46.0,48.0)\n      CALL GSLINE(50.0,56.0)\n      CALL GSLINE(58.0,66.0)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(58.0,66.0)\n      CALL GSLINE(61.0,66.0)\n      CALL GSLINE(52.0,54.0)\n      CALL GSLINE(54.0,50.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(49.0,48.0)\n      CALL GSLINE(46.0,48.0)\n      CALL GSLINE(50.0,56.0)\n      CALL GSLINE(58.0,66.0)\nC----- STAR\n      CALL GSCOL(7)\n      CALL GSMOVE(50.0,63.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSLINE(48.0,58.0)\n      CALL GSLINE(42.0,58.0)\n      CALL GSLINE(46.0,54.0)\n      CALL GSLINE(44.0,48.0)\n      CALL GSLINE(50.0,51.0)\n      CALL GSLINE(56.0,48.0)\n      CALL GSLINE(54.0,54.0)\n      CALL GSLINE(58.0,58.0)\n      CALL GSLINE(52.0,58.0)\n      CALL GSLINE(50.0,63.0)\n      CALL GSENDA\n      CALL GSCOL(2)\n      CALL GSMOVE(48.0,58.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSARC(50.0,55.0,360.0)\n      CALL GSENDA\nC----- COINS\n      CALL GSCOL(7)\n      CALL GSMOVE(34.0,76.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSLINE(34.0,68.0)\n      CALL GSPFLT(3,XF1,YF1)\n      CALL GSPFLT(3,XF2,YF1)\n      CALL GSLINE(42.0,73.0)\n      CALL GSPFLT(3,XF3,YF3)\n      CALL GSLINE(38.0,76.0)\n      CALL GSPFLT(3,XF4,YF4)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(34.0,76.0)\n      CALL GSLINE(34.0,68.0)\n      CALL GSPFLT(3,XF1,YF1)\n      CALL GSPFLT(3,XF2,YF1)\n      CALL GSLINE(42.0,73.0)\n      CALL GSPFLT(3,XF3,YF3)\n      CALL GSLINE(38.0,76.0)\n      CALL GSPFLT(3,XF4,YF4)\n      DO 10 I=69,76\n      YF5(1)=I+0.0\n      YF5(2)=I-1.0\n      YF5(3)=YF5(1)\n      CALL GSMOVE(34.0,YF5(1))\n      CALL GSPFLT(3,XF1,YF5)\n   10 CONTINUE\n      DO 20 I=69,73\n      YF5(1)=I+0.0\n      YF5(2)=I-1.0\n      YF5(3)=YF5(1)\n      CALL GSMOVE(38.0,YF5(1))\n      CALL GSPFLT(3,XF2,YF5)\n   20 CONTINUE\n      CALL GSMOVE(38.0,73.0)\n      CALL GSLINE(38.0,68.0)\nC----- TERMINAL\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(31.0,44.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(7,X6,Y6)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(31.0,44.0)\n      CALL GSPLNE(7,X6,Y6)\n      CALL GSMOVE(31.5,44.0)\n      CALL GSLINE(33.0,36.0)\n      CALL GSLINE(37.0,31.0)\n      CALL GSMOVE(32.0,44.0)\n      CALL GSLINE(34.0,36.0)\n      CALL GSLINE(37.0,32.0)\n      CALL GSLINE(43.5,36.0)\n      CALL GSMOVE(32.5,43.0)\n      CALL GSLINE(37.5,43.0)\n      CALL GSLINE(37.5,39.0)\n      CALL GSLINE(34.0,38.0)\n      CALL GSMOVE(37.5,44.0)\n      CALL GSLINE(39.5,39.0)\n      CALL GSMOVE(34.0,36.0)\n      CALL GSLINE(40.0,39.0)\n      CALL GSMOVE(35.0,35.0)\n      CALL GSLINE(41.0,38.0)\n      CALL GSMOVE(36.0,34.0)\n      CALL GSLINE(42.0,37.0)\n      CALL GSMOVE(36.5,33.0)\n      CALL GSLINE(42.5,36.5)\n      CALL GSMOVE(35.0,37.0)\n      CALL GSLINE(38.0,33.0)\n      CALL GSMOVE(36.0,37.0)\n      CALL GSLINE(39.0,33.5)\n      CALL GSMOVE(37.0,37.5)\n      CALL GSLINE(40.0,34.0)\n      CALL GSMOVE(38.0,38.0)\n      CALL GSLINE(41.0,34.5)\n      CALL GSMOVE(39.0,38.5)\n      CALL GSLINE(42.0,35.0)\nC----- HEAD\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(60.0,44.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(25,X7,Y7)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(60.0,44.0)\n      CALL GSPLNE(25,X7,Y7)\n      CALL GSMOVE(59.0,41.5)\n      CALL GSPLNE(12,X8,Y8)\n      CALL GSMOVE(61.0,34.0)\n      CALL GSLINE(63.0,35.0)\n      CALL GSLINE(64.0,36.0)\n      CALL GSMOVE(59.5,40.0)\n      CALL GSLINE(61.0,40.0)\n      CALL GSMOVE(59.75,39.75)\n      CALL GSLINE(60.5,39.0)\n      CALL GSLINE(59.75,39.0)\nC----- LAMP\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(62.5,75.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(35,X9,Y9)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(62.5,75.0)\n      CALL GSPLNE(35,X9,Y9)\n      CALL GSMOVE(61.0,73.25)\n      CALL GSPLNE(5,X10,Y10)\n      CALL GSMOVE(62.0,74.0)\n      CALL GSLINE(63.0,74.0)\n      CALL GSMOVE(61.0,68.0)\n      CALL GSPLNE(7,X11,Y11)\n      CALL GSCOL(5)\n      CALL GSMOVE(68.0,71.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSPLNE(7,X12,Y12)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(68.0,71.0)\n      CALL GSPLNE(7,X12,Y12)\n      CALL GSCOL(7)\n      CALL GSMOVE(54.0,75.0)\n      CALL GSPAT(16)\n      CALL GSAREA(0)\n      CALL GSPLNE(12,X13,Y13)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSMOVE(54.0,75.0)\n      CALL GSPLNE(12,X13,Y13)\n      CALL GSMOVE(60.0,68.0)\n      CALL GSLINE(65.0,68.0)\nC----- INTRODUCTION\n      CALL GSLW(2)\n      CALL GSCOL(7)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCH(0.2,1.0)\n      CALL GSCB(2.0,8.0)\n      CALL GSCHAR(12.0,90.0,36,'2ND   INFORMATION   SYSTEMS   GROUP ')\n      CALL GSCHAR(12.0,0.0,36,'    SAN ANTONIO            TEXAS    ')\n      CALL GSSCLS\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\n      CALL FSTERM\n      STOP\n      END\n./     ADD     NAME=LOGO$\n./     NUMBER  NEW1=100,INCR=100\n//LOGO     JOB (........),'INSTALL -L O G O-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(LOGO),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  NAME   LOGO(R)\n/*\n./     ADD     NAME=NITEFLT\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"NITEFLT\". THIS IS A          C\nC     MODEL OF THE SPACE SHUTTLE FLYING AT NIGHT.                     C\nC---------------------------------------------------------------------C\nC     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C\nC     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C\nC     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C\nC     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C\nC     BE APPRECIATED BY US TRUE 'TECHIES'.                            C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     CHANGE LOG :                                                    C\nC           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C\nC                     PGM AND TSO \"SESSION MANAGER\". DUE TO LACK OF   C\nC                     A CALL TO FSTERM TO CLEANUP.   JDM              C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      DIMENSION X1(3),Y1(3),X2(3),Y2(3),X3(3),Y3(3),X4(5),Y4(5)\n      DIMENSION X5(3),Y5(3),X6(11),Y6(11),X7(11),Y7(11),Y11(12)\n      DIMENSION X8(2),Y8(2),X9(2),Y9(2),X10(6),Y10(6),X11(12)\n      DIMENSION XM1(5),YM1(5),XHAUSL(4),YHAUSL(4),XHAUSR(4),YHAUSR(4)\n      DIMENSION XBLSTL(10),YBLSTL(10),XBLSTR(10),YBLSTR(10)\n      DATA X1 /27.0,24.0,23.0/\n      DATA Y1 /85.0,85.0,76.0/\n      DATA X2 /46.0,43.0,42.0/\n      DATA Y2 /85.0,85.0,76.0/\n      DATA X3 /38.0,32.0,30.0/\n      DATA Y3 /95.0,95.0,80.0/\n      DATA X4 /31.0,34.0,36.0,39.0,40.0/\n      DATA Y4 /28.0,26.0,26.0,28.0,30.0/\n      DATA X5 /37.0,33.0,32.0/\n      DATA Y5 /75.0,75.0,59.0/\n      DATA X6 /40.0,42.0,44.0,46.0,47.0,48.0,49.0,49.5,50.0,50.0,40.0/\n      DATA Y6 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/\n      DATA X7 /30.0,28.0,26.0,24.0,23.0,22.0,21.0,20.5,20.0,20.0,30.0/\n      DATA Y7 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/\n      DATA X8 /30.0,30.0/\n      DATA Y8 /25.0,20.0/\n      DATA X9 /40.0,39.0/\n      DATA Y9 /25.0,31.0/\n      DATA X10 /34.5,34.5,35.0,35.5,35.5,35.0/\n      DATA Y10 /29.0,16.0,15.0,16.0,29.0,31.0/\n      DATA X11 /37.0,36.0,35.0,34.0,33.0,32.0,33.0,34.0,\n     *35.0,36.0,37.0,38.0/\n      DATA Y11 /64.0,65.0,66.0,65.0,64.0,62.0,62.0,\n     *63.0,64.0,63.0,62.0,62.0/\n      DATA XM1 /34.0,35.0,36.0,33.0,34.0/\n      DATA YM1 /69.0,69.0,69.0,67.0,67.0/\n      DATA XHAUSL /22.0,29.0,33.0,18.0/\n      DATA YHAUSL /19.5,19.5,0.0,0.0/\n      DATA XHAUSR /41.0,48.0,52.0,37.0/\n      DATA YHAUSR /19.5,19.5,0.0,0.0/\n      DATA XBLSTL /18.0,20.0,22.0,25.0,26.0,29.0,31.0,33.0,\n     *33.0,18.0/\n      DATA YBLSTL /90.0,80.0,70.0,60.0,60.0,70.0,80.0,90.0,\n     *100.0,100.0/\n      DATA XBLSTR /37.0,39.0,41.0,44.0,45.0,48.0,50.0,52.0,\n     *52.0,37.0/\n      DATA YBLSTR /90.0,80.0,70.0,60.0,60.0,70.0,80.0,90.0,\n     *100.0,100.0/\n      CALL FSINN\n      CALL GSFLD(1,1,32,80)\n      CALL GSPS(1.0,1.0)\nC===== FIRST WINDOW TOP LEFT CORNER OF SCREEN\n      CALL GSVIEW(0.0,0.5,0.5,1.0)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(1)\nC----- FILL IN STARS\n      CALL GSCOL(7)\n      CALL GSMS(6)\n      CALL GSMARK(39.0,16.0)\n      CALL GSMARK(48.0,96.0)\n      CALL GSMARK(57.0,55.0)\n      CALL GSMARK(16.0,82.0)\n      CALL GSMARK(85.0,47.0)\n      CALL GSMARK(64.0,59.0)\n      CALL GSMARK(13.0,34.0)\n      CALL GSMARK(52.0,78.0)\n      CALL GSMARK(71.0,43.0)\n      CALL GSMARK(22.0,66.0)\n      CALL GSMARK(13.0,11.0)\nC----- CREATE AND FILL IN EXHAUST\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(18.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSL,YHAUSL)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(18.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSL,YHAUSL)\n      CALL GSENDA\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(37.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSR,YHAUSR)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(37.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSR,YHAUSR)\n      CALL GSENDA\nC----- CREATE AND FILL IN LEFT BOOSTER\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(28.0,76.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X1,Y1)\n      CALL GSLINE(23.0,25.0)\n      CALL GSLINE(21.0,22.0)\n      CALL GSLINE(30.0,22.0)\n      CALL GSLINE(28.0,25.0)\n      CALL GSLINE(28.0,76.0)\n      CALL GSMOVE(23.0,22.0)\n      CALL GSLINE(22.0,20.0)\n      CALL GSLINE(29.0,20.0)\n      CALL GSLINE(28.0,22.0)\n      CALL GSLINE(23.0,22.0)\n      CALL GSENDA\nC----- CREATE AND FILL IN RIGHT BOOSTER\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(47.0,76.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X2,Y2)\n      CALL GSLINE(42.0,25.0)\n      CALL GSLINE(40.0,22.0)\n      CALL GSLINE(49.0,22.0)\n      CALL GSLINE(47.0,25.0)\n      CALL GSLINE(47.0,76.0)\n      CALL GSMOVE(42.0,22.0)\n      CALL GSLINE(41.0,20.0)\n      CALL GSLINE(48.0,20.0)\n      CALL GSLINE(47.0,22.0)\n      CALL GSLINE(42.0,22.0)\n      CALL GSENDA\nC----- CREATE AND FILL IN MAIN AUX TANK\n      CALL GSCOL(8)\n      CALL GSPAT(16)\n      CALL GSMOVE(40.0,80.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X3,Y3)\n      CALL GSLINE(30.0,30.0)\n      CALL GSPLNE(5,X4,Y4)\n      CALL GSLINE(40.0,80.0)\n      CALL GSMOVE(30.0,72.0)\n      CALL GSLINE(28.0,72.0)\n      CALL GSLINE(28.0,70.0)\n      CALL GSLINE(30.0,70.0)\n      CALL GSMOVE(30.0,42.0)\n      CALL GSLINE(28.0,42.0)\n      CALL GSLINE(28.0,40.0)\n      CALL GSLINE(30.0,40.0)\n      CALL GSMOVE(40.0,72.0)\n      CALL GSLINE(42.0,72.0)\n      CALL GSLINE(42.0,70.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSMOVE(40.0,42.0)\n      CALL GSLINE(42.0,42.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSENDA\n      CALL GSCOL(2)\n      CALL GSPAT(2)\n      CALL GSMOVE(40.0,80.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X3,Y3)\n      CALL GSLINE(30.0,30.0)\n      CALL GSPLNE(5,X4,Y4)\n      CALL GSLINE(40.0,80.0)\n      CALL GSMOVE(30.0,72.0)\n      CALL GSLINE(28.0,72.0)\n      CALL GSLINE(28.0,70.0)\n      CALL GSLINE(30.0,70.0)\n      CALL GSMOVE(30.0,42.0)\n      CALL GSLINE(28.0,42.0)\n      CALL GSLINE(28.0,40.0)\n      CALL GSLINE(30.0,40.0)\n      CALL GSMOVE(40.0,72.0)\n      CALL GSLINE(42.0,72.0)\n      CALL GSLINE(42.0,70.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSMOVE(40.0,42.0)\n      CALL GSLINE(42.0,42.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSENDA\nC===== CREATE AND FILL IN SPACE SHUTTLE\nC----- NOSE ASSEMBLY\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X5,Y5)\nC----- WINGS\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPLNE(11,X6,Y6)\n      CALL GSMOVE(32.0,59.0)\n      CALL GSPLNE(11,X7,Y7)\nC----- ENGINE HOUSING\n      CALL GSMOVE(31.0,31.0)\n      CALL GSPLNE(2,X8,Y8)\n      CALL GSLINE(31.0,20.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(39.0,20.0)\n      CALL GSLINE(40.0,20.0)\n      CALL GSPLNE(2,X9,Y9)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSLINE(32.0,59.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSLINE(38.0,59.0)\n      CALL GSMOVE(31.0,31.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSLINE(39.0,31.0)\n      CALL GSLINE(31.0,31.0)\n      CALL GSENDA\n      CALL GSMOVE(31.0,22.0)\n      CALL GSCOL(8)\nC----- LEFT ROCKET\n      CALL GSAREA(1)\n      CALL GSLINE(31.0,19.5)\n      CALL GSLINE(33.0,19.5)\n      CALL GSLINE(33.0,22.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSENDA\nC----- MIDDLE ROCKET\n      CALL GSMOVE(34.0,22.0)\n      CALL GSAREA(1)\n      CALL GSLINE(34.0,19.0)\n      CALL GSLINE(36.0,19.0)\n      CALL GSLINE(36.0,22.0)\n      CALL GSLINE(34.0,22.0)\n      CALL GSENDA\nC----- RIGHT ROCKET\n      CALL GSMOVE(37.0,22.0)\n      CALL GSAREA(1)\n      CALL GSLINE(37.0,19.5)\n      CALL GSLINE(39.0,19.5)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(37.0,22.0)\n      CALL GSENDA\nC----- LEFT ROCKET CONNECTOR\n      CALL GSMOVE(33.0,22.0)\n      CALL GSAREA(0)\n      CALL GSLINE(33.0,20.0)\n      CALL GSLINE(34.0,20.0)\n      CALL GSLINE(34.0,22.0)\n      CALL GSLINE(33.0,22.0)\n      CALL GSENDA\nC----- RIGHT ROCKET CONNECTOR\n      CALL GSMOVE(36.0,22.0)\n      CALL GSAREA(0)\n      CALL GSLINE(36.0,20.0)\n      CALL GSLINE(37.0,20.0)\n      CALL GSLINE(37.0,22.0)\n      CALL GSLINE(36.0,22.0)\n      CALL GSENDA\nC----- OUTLINE SPACE SHUTTLE\n      CALL GSCOL(1)\n      CALL GSLW(1)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPFLT(3,X5,Y5)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPLNE(10,X6,Y6)\n      CALL GSMOVE(32.0,59.0)\n      CALL GSPLNE(10,X7,Y7)\n      CALL GSMOVE(20.0,28.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSMOVE(50.0,28.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSMOVE(31.0,31.0)\n      CALL GSPLNE(2,X8,Y8)\n      CALL GSLINE(31.0,20.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(39.0,20.0)\n      CALL GSLINE(40.0,20.0)\n      CALL GSPLNE(2,X9,Y9)\nC----- FUSELAGE\n      CALL GSMOVE(32.0,59.0)\n      CALL GSLINE(32.0,31.0)\n      CALL GSLINE(38.0,31.0)\n      CALL GSLINE(38.0,59.0)\n      CALL GSCOL(8)\nC------ COCKPIT\n      CALL GSMOVE(38.0,62.0)\n      CALL GSAREA(1)\n      CALL GSPLNE(10,X11,Y11)\n      CALL GSENDA\nC------ CARGO BAY\n      CALL GSCOL(1)\n      CALL GSMOVE(38.0,53.0)\n      CALL GSLINE(32.0,53.0)\n      CALL GSLT(3)\n      CALL GSMOVE(35.0,53.0)\n      CALL GSLINE(35.0,31.0)\nC------ VERTICAL STABILIZER\n      CALL GSCOL(7)\n      CALL GSLT(0)\n      CALL GSAREA(1)\n      CALL GSPLNE(6,X10,Y10)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSPLNE(6,X10,Y10)\nC----- SPLIT WINDSHIELD\n      CALL GSCOL(7)\n      CALL GSLW(1)\n      CALL GSMOVE(35.0,66.0)\n      CALL GSLINE(35.0,64.0)\nC----- FLAG STRIPES\n      CALL GSCOL(2)\n      CALL GSLW(0)\n      CALL GSMOVE(27.0,35.0)\n      CALL GSLINE(29.0,35.0)\n      CALL GSMOVE(27.0,34.0)\n      CALL GSLINE(29.0,34.0)\n      CALL GSMOVE(25.0,33.0)\n      CALL GSLINE(29.0,33.0)\n      CALL GSMOVE(25.0,32.0)\n      CALL GSLINE(29.0,32.0)\nC----- FLAG BLUE FIELD\n      CALL GSCOL(1)\n      CALL GSMOVE(25.0,35.0)\n      CALL GSAREA(1)\n      CALL GSLINE(27.0,35.0)\n      CALL GSLINE(27.0,33.5)\n      CALL GSLINE(25.0,33.5)\n      CALL GSLINE(25.0,35.0)\n      CALL GSENDA\nC----- USA\n      CALL GSLW(0)\n      CALL GSCOL(8)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCB(2.0,4.0)\n      CALL GSCHAR(41.0,31.0,3,'USA')\nC----- FLIGHT CONTROL SURFACES\n      CALL GSCOL(1)\n      CALL GSMOVE(20.0,31.0)\n      CALL GSLINE(31.0,31.0)\n      CALL GSMOVE(39.0,31.0)\n      CALL GSLINE(50.0,31.0)\n      CALL GSMOVE(20.0,30.0)\n      CALL GSLINE(30.5,30.0)\n      CALL GSMOVE(39.5,30.0)\n      CALL GSLINE(50.0,30.0)\n      CALL GSMOVE(26.0,30.0)\n      CALL GSLINE(26.0,26.5)\n      CALL GSMOVE(44.0,30.0)\n      CALL GSLINE(44.0,26.5)\nC----- COCKPIT HATCHES\n      CALL GSMOVE(33.0,60.0)\n      CALL GSLINE(33.0,57.0)\n      CALL GSLINE(34.5,57.0)\n      CALL GSLINE(34.5,60.0)\n      CALL GSLINE(33.0,60.0)\n      CALL GSMOVE(35.5,60.0)\n      CALL GSLINE(35.5,57.0)\n      CALL GSLINE(37.0,57.0)\n      CALL GSLINE(37.0,60.0)\n      CALL GSLINE(35.5,60.0)\n      CALL GSSCLS\nC===== SECOND WINDOW BOTTOM LEFT CORNER OF SCREEN\n      CALL GSVIEW(0.0,0.5,0.0,0.5)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(2)\nC----- FILL IN STARS\n      CALL GSCOL(7)\n      CALL GSMS(6)\n      CALL GSMARK(35.0,16.0)\n      CALL GSMARK(44.0,96.0)\n      CALL GSMARK(52.0,55.0)\n      CALL GSMARK(19.0,82.0)\n      CALL GSMARK(83.0,47.0)\n      CALL GSMARK(64.0,59.0)\n      CALL GSMARK(12.0,34.0)\n      CALL GSMARK(56.0,78.0)\n      CALL GSMARK(75.0,43.0)\n      CALL GSMARK(28.0,66.0)\n      CALL GSMARK(11.0,11.0)\nC----- CREATE AND FILL IN BLAST\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(18.0,100.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(10,XBLSTL,YBLSTL)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(18.0,100.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(10,XBLSTL,YBLSTL)\n      CALL GSENDA\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(37.0,100.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(10,XBLSTR,YBLSTR)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(37.0,100.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(10,XBLSTR,YBLSTR)\n      CALL GSENDA\n      CALL GSSCLS\nC===== THIRD WINDOW BOTTOM RIGHT CORNER OF SCREEN\n      CALL GSVIEW(0.5,1.0,0.0,0.5)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(3)\nC----- FILL IN STARS\n      CALL GSCOL(7)\n      CALL GSMS(6)\n      CALL GSMARK(35.0,16.0)\n      CALL GSMARK(44.0,96.0)\n      CALL GSMARK(52.0,55.0)\n      CALL GSMARK(19.0,82.0)\n      CALL GSMARK(83.0,47.0)\n      CALL GSMARK(64.0,59.0)\n      CALL GSMARK(12.0,34.0)\n      CALL GSMARK(56.0,78.0)\n      CALL GSMARK(75.0,43.0)\n      CALL GSMARK(28.0,66.0)\n      CALL GSMARK(11.0,11.0)\n      CALL GSSCLS\nC===== FOURTH WINDOW TOP RIGHT CORNER OF SCREEN\n      CALL GSVIEW(0.5,1.0,0.5,1.0)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(4)\nC----- FILL IN STARS\n      CALL GSCOL(7)\n      CALL GSMS(6)\n      CALL GSMARK(39.0,19.0)\n      CALL GSMARK(68.0,80.0)\n      CALL GSMARK(60.0,80.0)\n      CALL GSMARK(67.0,57.0)\n      CALL GSMARK(16.0,86.0)\n      CALL GSMARK(85.0,45.0)\n      CALL GSMARK(64.0,54.0)\n      CALL GSMARK(13.0,33.0)\n      CALL GSMARK(22.0,72.0)\n      CALL GSMARK(71.0,41.0)\n      CALL GSMARK(23.0,60.0)\n      CALL GSMARK(15.0,19.0)\nC----- MOON\n      CALL GSMOVE(40.0,70.0)\n      CALL GSPAT(16)\n      CALL GSAREA(1)\n      CALL GSARC(55.0,70.0,360.0)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSMOVE(40.0,70.0)\n      CALL GSPAT(3)\n      CALL GSAREA(0)\n      CALL GSARC(55.0,70.0,360.0)\n      CALL GSENDA\n      CALL GSCOL(6)\n      CALL GSMOVE(40.0,70.0)\n      CALL GSPAT(1)\n      CALL GSAREA(0)\n      CALL GSARC(55.0,70.0,360.0)\n      CALL GSENDA\n      CALL GSSCLS\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\n      CALL FSTERM\n      STOP\n      END\n./     ADD     NAME=NITEFLT$\n./     NUMBER  NEW1=100,INCR=100\n//NITEFLT  JOB (........),'INSTALL -NITEFLT-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(NITEFLT),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  NAME   NITEFLT(R)\n/*\n./     ADD     NAME=SABREBAT\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"SABREBAT\". THIS IS A         C\nC     MODEL OF THE AIR FORCE X-29A SABREBAT.                          C\nC---------------------------------------------------------------------C\nC     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C\nC     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C\nC     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C\nC     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C\nC     BE APPRECIATED BY US TRUE 'TECHIES'.                            C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     CHANGE LOG :                                                    C\nC           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C\nC                     PGM AND TSO \"SESSION MANAGER\". DUE TO LACK OF   C\nC                     A CALL TO FSTERM TO CLEANUP.   JDM              C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      DIMENSION X1(4),Y1(4)\n      DATA X1 /75.0,75.0,65.0,0.0/\n      DATA Y1 /51.0,49.0,47.75,0.0/\n      CALL FSINN\n      CALL GSFLD(1,1,32,80)\n      CALL GSPS(1.0,1.0)\n      CALL GSWIN(0.0,85.0,0.0,85.0)\n      CALL GSSEG(1)\nC----- OUTLINE ENGINE\n      CALL GSCOL(5)\n      CALL GSLW(0)\n      CALL GSMOVE(8.0,52.8)\n      CALL GSLINE(5.0,52.0)\n      CALL GSLINE(5.0,48.0)\n      CALL GSLINE(8.0,47.2)\n      CALL GSLINE(8.0,49.5)\n      CALL GSLINE(6.0,50.0)\n      CALL GSLINE(8.0,50.5)\n      CALL GSLINE(8.0,52.8)\n      CALL GSLW(0)\n      CALL GSMOVE(5.0,52.0)\n      CALL GSLINE(8.0,52.0)\n      CALL GSMOVE(5.0,51.5)\n      CALL GSLINE(8.0,51.5)\n      CALL GSMOVE(5.0,51.0)\n      CALL GSLINE(8.0,51.0)\n      CALL GSMOVE(5.0,50.5)\n      CALL GSLINE(8.0,50.5)\n      CALL GSMOVE(5.0,50.0)\n      CALL GSLINE(8.0,50.0)\n      CALL GSMOVE(5.0,49.5)\n      CALL GSLINE(8.0,49.5)\n      CALL GSMOVE(5.0,49.0)\n      CALL GSLINE(8.0,49.0)\n      CALL GSMOVE(5.0,48.5)\n      CALL GSLINE(8.0,48.5)\n      CALL GSMOVE(5.0,48.0)\n      CALL GSLINE(8.0,48.0)\n      CALL GSLW(0)\n      CALL GSMOVE(10.0,53.0)\n      CALL GSLINE(8.0,52.8)\n      CALL GSMOVE(10.0,47.0)\n      CALL GSLINE(8.0,47.2)\nC----- OUTLINE TAIL SECTION\n      CALL GSLW(0)\n      CALL GSMOVE(20.0,56.0)\n      CALL GSLINE(8.0,56.0)\n      CALL GSLINE(8.0,53.0)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(20.0,44.0)\n      CALL GSLINE(8.0,44.0)\n      CALL GSLINE(8.0,47.0)\n      CALL GSLINE(20.0,47.0)\n      CALL GSLINE(20.0,49.5)\n      CALL GSMOVE(20.0,50.5)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(17.0,50.3)\n      CALL GSLINE(18.5,50.5)\n      CALL GSLINE(22.0,50.5)\n      CALL GSLINE(22.0,49.5)\n      CALL GSLINE(18.5,49.5)\n      CALL GSLINE(17.0,49.7)\n      CALL GSMOVE(19.0,50.0)\n      CALL GSLINE(16.0,50.5)\n      CALL GSLINE(13.0,50.7)\n      CALL GSLINE(10.0,50.6)\n      CALL GSLINE(8.0,50.5)\n      CALL GSLINE(9.0,50.0)\n      CALL GSLINE(8.0,49.5)\n      CALL GSLINE(10.0,49.4)\n      CALL GSLINE(13.0,49.3)\n      CALL GSLINE(16.0,49.5)\n      CALL GSLINE(19.0,50.0)\n      CALL GSMOVE(12.0,56.0)\n      CALL GSLINE(12.0,53.0)\n      CALL GSMOVE(12.5,56.0)\n      CALL GSLINE(12.5,53.0)\n      CALL GSMOVE(12.0,47.0)\n      CALL GSLINE(12.0,44.0)\n      CALL GSMOVE(12.5,47.0)\n      CALL GSLINE(12.5,44.0)\nC----- LEFT WING\n      CALL GSLW(0)\n      CALL GSMOVE(35.0,53.5)\n      CALL GSLINE(33.0,58.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSLINE(34.0,70.0)\n      CALL GSLINE(20.0,56.0)\n      CALL GSLINE(23.0,56.0)\n      CALL GSLINE(35.0,69.0)\n      CALL GSLINE(33.0,69.0)\n      CALL GSMOVE(25.0,61.0)\n      CALL GSLINE(27.5,61.0)\n      CALL GSMOVE(29.0,65.0)\n      CALL GSLINE(31.0,65.0)\n      CALL GSMOVE(25.0,58.0)\n      CALL GSLINE(33.0,58.0)\nC----- RIGHT WING\n      CALL GSMOVE(35.0,46.5)\n      CALL GSLINE(33.0,42.0)\n      CALL GSLINE(40.0,30.0)\n      CALL GSLINE(34.0,30.0)\n      CALL GSLINE(20.0,44.0)\n      CALL GSLINE(23.0,44.0)\n      CALL GSLINE(35.0,31.0)\n      CALL GSLINE(33.0,31.0)\n      CALL GSMOVE(25.0,39.0)\n      CALL GSLINE(27.5,39.0)\n      CALL GSMOVE(29.0,35.0)\n      CALL GSLINE(31.0,35.0)\n      CALL GSMOVE(25.0,42.0)\n      CALL GSLINE(33.0,42.0)\nC----- FUSELAGE\n      CALL GSMOVE(32.0,50.0)\n      CALL GSLINE(32.5,50.0)\n      CALL GSMOVE(37.0,50.0)\n      CALL GSLINE(38.0,50.0)\n      CALL GSMOVE(45.0,50.0)\n      CALL GSLINE(45.5,50.0)\n      CALL GSMOVE(50.0,54.0)\n      CALL GSLINE(40.0,54.0)\n      CALL GSLINE(35.0,53.5)\n      CALL GSLINE(30.0,53.2)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(50.0,46.0)\n      CALL GSLINE(40.0,46.0)\n      CALL GSLINE(35.0,46.5)\n      CALL GSLINE(30.0,46.8)\n      CALL GSLINE(20.0,47.0)\n      CALL GSMOVE(30.0,53.2)\n      CALL GSLINE(30.0,46.8)\n      CALL GSMOVE(40.0,54.0)\n      CALL GSLINE(46.0,54.0)\n      CALL GSMOVE(26.0,53.0)\n      CALL GSLINE(26.0,54.0)\n      CALL GSLINE(25.0,53.5)\n      CALL GSLINE(24.5,53.0)\nC----- INTAKES\n      CALL GSLW(0)\n      CALL GSMOVE(49.0,54.0)\n      CALL GSLINE(43.0,60.0)\n      CALL GSLINE(40.0,60.0)\n      CALL GSLINE(37.0,55.0)\n      CALL GSLINE(40.0,55.0)\n      CALL GSLINE(41.0,54.0)\n      CALL GSMOVE(49.0,46.0)\n      CALL GSLINE(43.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSLINE(37.0,45.0)\n      CALL GSLINE(40.0,45.0)\n      CALL GSLINE(41.0,46.0)\n      CALL GSMOVE(50.0,54.0)\n      CALL GSLINE(50.0,53.0)\n      CALL GSLINE(52.0,52.5)\n      CALL GSLINE(43.0,52.5)\n      CALL GSMOVE(43.0,47.5)\n      CALL GSLINE(52.0,47.5)\n      CALL GSLINE(50.0,47.0)\n      CALL GSLINE(50.0,46.0)\nC----- NOSE\n      CALL GSLW(0)\n      CALL GSMOVE(45.0,52.25)\n      CALL GSLINE(65.0,52.25)\n      CALL GSPFLT(3,X1,Y1)\n      CALL GSLINE(45.0,47.75)\n      CALL GSMOVE(59.0,52.25)\n      CALL GSLINE(59.0,51.0)\n      CALL GSMOVE(59.0,49.0)\n      CALL GSLINE(59.0,47.75)\n      CALL GSMOVE(65.0,52.25)\n      CALL GSLINE(65.0,47.75)\n      CALL GSMOVE(71.0,51.0)\n      CALL GSLINE(71.0,49.0)\n      CALL GSLW(2)\n      CALL GSMOVE(79.0,50.0)\n      CALL GSLINE(74.0,50.0)\nC----- CANOPY\n      CALL GSLW(0)\n      CALL GSMOVE(49.0,53.5)\n      CALL GSLINE(41.0,53.5)\n      CALL GSLINE(40.0,53.25)\n      CALL GSLINE(38.5,53.0)\n      CALL GSLINE(37.0,52.1)\n      CALL GSLINE(34.0,52.0)\n      CALL GSLINE(32.0,51.9)\n      CALL GSLINE(30.0,51.5)\n      CALL GSLINE(28.0,50.5)\n      CALL GSLINE(48.0,51.5)\n      CALL GSMOVE(49.0,46.5)\n      CALL GSLINE(41.0,46.5)\n      CALL GSLINE(40.0,46.75)\n      CALL GSLINE(38.5,47.0)\n      CALL GSLINE(37.0,47.9)\n      CALL GSLINE(34.0,48.0)\n      CALL GSLINE(32.0,48.1)\n      CALL GSLINE(30.0,48.5)\n      CALL GSLINE(28.0,49.5)\n      CALL GSLINE(48.0,48.5)\n      CALL GSLINE(47.75,49.0)\n      CALL GSLINE(47.5,50.0)\n      CALL GSLINE(47.75,51.0)\n      CALL GSLINE(48.0,51.5)\n      CALL GSLINE(57.75,51.5)\n      CALL GSLINE(58.75,51.0)\n      CALL GSLINE(59.1,50.5)\n      CALL GSLINE(59.1,49.5)\n      CALL GSLINE(58.75,49.0)\n      CALL GSLINE(57.75,48.5)\n      CALL GSLINE(48.0,48.5)\n      CALL GSCOL(1)\n      CALL GSPAT(16)\n      CALL GSMOVE(50.5,51.2)\n      CALL GSAREA(0)\n      CALL GSLINE(54.0,51.2)\n      CALL GSLINE(54.0,48.8)\n      CALL GSLINE(50.5,48.8)\n      CALL GSLINE(50.0,49.0)\n      CALL GSLINE(49.7,50.0)\n      CALL GSLINE(50.0,51.0)\n      CALL GSLINE(50.5,51.2)\n      CALL GSENDA\n      CALL GSCOL(5)\n      CALL GSMOVE(54.3,51.5)\n      CALL GSLINE(54.3,48.5)\n      CALL GSMOVE(54.5,51.2)\n      CALL GSCOL(1)\n      CALL GSAREA(0)\n      CALL GSLINE(57.0,51.2)\n      CALL GSLINE(58.0,51.0)\n      CALL GSLINE(58.3,50.5)\n      CALL GSLINE(58.5,50.0)\n      CALL GSLINE(58.3,49.5)\n      CALL GSLINE(58.0,49.0)\n      CALL GSLINE(57.0,48.8)\n      CALL GSLINE(54.5,48.8)\n      CALL GSLINE(54.5,51.2)\n      CALL GSENDA\nC----- INTRODUCTION\n      CALL GSLW(2)\n      CALL GSCOL(7)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCB(2.0,8.0)\n      CALL GSCHAR(30.0,75.0,8,'SABREBAT')\n      CALL GSCHAR(30.0,73.0,8,'________')\n      CALL GSLW(1)\n      CALL GSCOL(7)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCB(1.5,5.0)\n      CALL GSCHAR(5.0,20.0,49,'GRUMMAN MODEL 712 FORWARD SWEPT WING DEMO\n     *NSTRATOR')\n      CALL GSCHAR(15.0,10.0,34,'(U.S. AIR FORCE DESIGNATION X-29A)')\n      CALL GSSCLS\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\n      CALL FSTERM\n      STOP\n      END\n./     ADD     NAME=SABREBA$\n./     NUMBER  NEW1=100,INCR=100\n//SABREBAT JOB (........),'INSTALL -SABREBAT-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(SABREBAT),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  NAME   SABREBAT(R)\n/*\n./     ADD     NAME=SHUTTLE\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"SHUTTLE\". THIS IS A          C\nC     MODEL OF THE SPACE SHUTTLE.                                     C\nC---------------------------------------------------------------------C\nC     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C\nC     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C\nC     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C\nC     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C\nC     BE APPRECIATED BY US TRUE 'TECHIES'.                            C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     CHANGE LOG :                                                    C\nC           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C\nC                     PGM AND TSO \"SESSION MANAGER\". DUE TO LACK OF   C\nC                     A CALL TO FSTERM TO CLEANUP.   JDM              C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      DIMENSION X1(3),Y1(3),X2(3),Y2(3),X3(3),Y3(3),X4(5),Y4(5)\n      DIMENSION X5(3),Y5(3),X6(11),Y6(11),X7(11),Y7(11),Y11(12)\n      DIMENSION X8(2),Y8(2),X9(2),Y9(2),X10(6),Y10(6),X11(12)\n      DIMENSION XM1(5),YM1(5),XHAUSL(4),YHAUSL(4),XHAUSR(4),YHAUSR(4)\n      DATA X1 /27.0,24.0,23.0/\n      DATA Y1 /85.0,85.0,76.0/\n      DATA X2 /46.0,43.0,42.0/\n      DATA Y2 /85.0,85.0,76.0/\n      DATA X3 /38.0,32.0,30.0/\n      DATA Y3 /95.0,95.0,80.0/\n      DATA X4 /31.0,34.0,36.0,39.0,40.0/\n      DATA Y4 /28.0,26.0,26.0,28.0,30.0/\n      DATA X5 /37.0,33.0,32.0/\n      DATA Y5 /75.0,75.0,59.0/\n      DATA X6 /40.0,42.0,44.0,46.0,47.0,48.0,49.0,49.5,50.0,50.0,40.0/\n      DATA Y6 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/\n      DATA X7 /30.0,28.0,26.0,24.0,23.0,22.0,21.0,20.5,20.0,20.0,30.0/\n      DATA Y7 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/\n      DATA X8 /30.0,30.0/\n      DATA Y8 /25.0,20.0/\n      DATA X9 /40.0,39.0/\n      DATA Y9 /25.0,31.0/\n      DATA X10 /34.5,34.5,35.0,35.5,35.5,35.0/\n      DATA Y10 /29.0,16.0,15.0,16.0,29.0,31.0/\n      DATA X11 /37.0,36.0,35.0,34.0,33.0,32.0,33.0,34.0,\n     *35.0,36.0,37.0,38.0/\n      DATA Y11 /64.0,65.0,66.0,65.0,64.0,62.0,62.0,\n     *63.0,64.0,63.0,62.0,62.0/\n      DATA XM1 /34.0,35.0,36.0,33.0,34.0/\n      DATA YM1 /69.0,69.0,69.0,67.0,67.0/\n      DATA XHAUSL /22.0,29.0,33.0,18.0/\n      DATA YHAUSL /19.5,19.5,0.0,0.0/\n      DATA XHAUSR /41.0,48.0,52.0,37.0/\n      DATA YHAUSR /19.5,19.5,0.0,0.0/\n      CALL FSINN\n      CALL GSFLD(1,1,32,80)\n      CALL GSWIN(0.0,100.0,0.0,100.0)\n      CALL GSSEG(1)\nC----- CREATE AND FILL IN BACKGROUND FOR ENTIRE SCREEN IN TURQUOISE\n      CALL GSCOL(5)\n      CALL GSMOVE(0.0,0.0)\n      CALL GSAREA(0)\n      CALL GSLINE(100.0,0.0)\n      CALL GSLINE(100.0,100.0)\n      CALL GSLINE(0.0,100.0)\n      CALL GSLINE(0.0,0.0)\n      CALL GSENDA\nC----- CREATE AND FILL IN EXHAUST\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(18.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSL,YHAUSL)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(18.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSL,YHAUSL)\n      CALL GSENDA\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(37.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSR,YHAUSR)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(3)\n      CALL GSMOVE(37.0,0.0)\n      CALL GSAREA(0)\n      CALL GSPLNE(4,XHAUSR,YHAUSR)\n      CALL GSENDA\nC----- CREATE AND FILL IN LEFT BOOSTER\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(28.0,76.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X1,Y1)\n      CALL GSLINE(23.0,25.0)\n      CALL GSLINE(21.0,22.0)\n      CALL GSLINE(30.0,22.0)\n      CALL GSLINE(28.0,25.0)\n      CALL GSLINE(28.0,76.0)\n      CALL GSMOVE(23.0,22.0)\n      CALL GSLINE(22.0,20.0)\n      CALL GSLINE(29.0,20.0)\n      CALL GSLINE(28.0,22.0)\n      CALL GSLINE(23.0,22.0)\n      CALL GSENDA\nC----- CREATE AND FILL IN RIGHT BOOSTER\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(47.0,76.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X2,Y2)\n      CALL GSLINE(42.0,25.0)\n      CALL GSLINE(40.0,22.0)\n      CALL GSLINE(49.0,22.0)\n      CALL GSLINE(47.0,25.0)\n      CALL GSLINE(47.0,76.0)\n      CALL GSMOVE(42.0,22.0)\n      CALL GSLINE(41.0,20.0)\n      CALL GSLINE(48.0,20.0)\n      CALL GSLINE(47.0,22.0)\n      CALL GSLINE(42.0,22.0)\n      CALL GSENDA\nC----- CREATE AND FILL IN MAIN AUX TANK\n      CALL GSCOL(2)\n      CALL GSPAT(16)\n      CALL GSMOVE(40.0,80.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X3,Y3)\n      CALL GSLINE(30.0,30.0)\n      CALL GSPLNE(5,X4,Y4)\n      CALL GSLINE(40.0,80.0)\n      CALL GSMOVE(30.0,72.0)\n      CALL GSLINE(28.0,72.0)\n      CALL GSLINE(28.0,70.0)\n      CALL GSLINE(30.0,70.0)\n      CALL GSMOVE(30.0,42.0)\n      CALL GSLINE(28.0,42.0)\n      CALL GSLINE(28.0,40.0)\n      CALL GSLINE(30.0,40.0)\n      CALL GSMOVE(40.0,72.0)\n      CALL GSLINE(42.0,72.0)\n      CALL GSLINE(42.0,70.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSMOVE(40.0,42.0)\n      CALL GSLINE(42.0,42.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSENDA\n      CALL GSCOL(8)\n      CALL GSPAT(2)\n      CALL GSMOVE(40.0,80.0)\n      CALL GSAREA(0)\n      CALL GSPFLT(3,X3,Y3)\n      CALL GSLINE(30.0,30.0)\n      CALL GSPLNE(5,X4,Y4)\n      CALL GSLINE(40.0,80.0)\n      CALL GSMOVE(30.0,72.0)\n      CALL GSLINE(28.0,72.0)\n      CALL GSLINE(28.0,70.0)\n      CALL GSLINE(30.0,70.0)\n      CALL GSMOVE(30.0,42.0)\n      CALL GSLINE(28.0,42.0)\n      CALL GSLINE(28.0,40.0)\n      CALL GSLINE(30.0,40.0)\n      CALL GSMOVE(40.0,72.0)\n      CALL GSLINE(42.0,72.0)\n      CALL GSLINE(42.0,70.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSMOVE(40.0,42.0)\n      CALL GSLINE(42.0,42.0)\n      CALL GSLINE(42.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSENDA\nC===== CREATE AND FILL IN SPACE SHUTTLE\nC----- NOSE ASSEMBLY\n      CALL GSCOL(7)\n      CALL GSPAT(16)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSAREA(1)\n      CALL GSPFLT(3,X5,Y5)\nC----- WINGS\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPLNE(11,X6,Y6)\n      CALL GSMOVE(32.0,59.0)\n      CALL GSPLNE(11,X7,Y7)\nC----- ENGINE HOUSING\n      CALL GSMOVE(31.0,31.0)\n      CALL GSPLNE(2,X8,Y8)\n      CALL GSLINE(31.0,20.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(39.0,20.0)\n      CALL GSLINE(40.0,20.0)\n      CALL GSPLNE(2,X9,Y9)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSLINE(32.0,59.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSLINE(38.0,59.0)\n      CALL GSMOVE(31.0,31.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSLINE(39.0,31.0)\n      CALL GSLINE(31.0,31.0)\n      CALL GSENDA\n      CALL GSMOVE(31.0,22.0)\n      CALL GSCOL(8)\nC----- LEFT ROCKET\n      CALL GSAREA(1)\n      CALL GSLINE(31.0,19.5)\n      CALL GSLINE(33.0,19.5)\n      CALL GSLINE(33.0,22.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSENDA\nC------ MIDDLE ROCKET\n      CALL GSMOVE(34.0,22.0)\n      CALL GSAREA(1)\n      CALL GSLINE(34.0,19.0)\n      CALL GSLINE(36.0,19.0)\n      CALL GSLINE(36.0,22.0)\n      CALL GSLINE(34.0,22.0)\n      CALL GSENDA\nC----- RIGHT ROCKET\n      CALL GSMOVE(37.0,22.0)\n      CALL GSAREA(1)\n      CALL GSLINE(37.0,19.5)\n      CALL GSLINE(39.0,19.5)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(37.0,22.0)\n      CALL GSENDA\nC----- LEFT ROCKET CONNECTOR\n      CALL GSMOVE(33.0,22.0)\n      CALL GSAREA(0)\n      CALL GSLINE(33.0,20.0)\n      CALL GSLINE(34.0,20.0)\n      CALL GSLINE(34.0,22.0)\n      CALL GSLINE(33.0,22.0)\n      CALL GSENDA\nC----- RIGHT ROCKET CONNECTOR\n      CALL GSMOVE(36.0,22.0)\n      CALL GSAREA(0)\n      CALL GSLINE(36.0,20.0)\n      CALL GSLINE(37.0,20.0)\n      CALL GSLINE(37.0,22.0)\n      CALL GSLINE(36.0,22.0)\n      CALL GSENDA\nC----- OUTLINE SPACE SHUTTLE\n      CALL GSCOL(1)\n      CALL GSLW(1)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPFLT(3,X5,Y5)\n      CALL GSMOVE(38.0,59.0)\n      CALL GSPLNE(10,X6,Y6)\n      CALL GSMOVE(32.0,59.0)\n      CALL GSPLNE(10,X7,Y7)\n      CALL GSMOVE(20.0,28.0)\n      CALL GSLINE(30.0,25.0)\n      CALL GSMOVE(50.0,28.0)\n      CALL GSLINE(40.0,25.0)\n      CALL GSMOVE(31.0,31.0)\n      CALL GSPLNE(2,X8,Y8)\n      CALL GSLINE(31.0,20.0)\n      CALL GSLINE(31.0,22.0)\n      CALL GSLINE(39.0,22.0)\n      CALL GSLINE(39.0,20.0)\n      CALL GSLINE(40.0,20.0)\n      CALL GSPLNE(2,X9,Y9)\nC----- FUSELAGE\n      CALL GSMOVE(32.0,59.0)\n      CALL GSLINE(32.0,31.0)\n      CALL GSLINE(38.0,31.0)\n      CALL GSLINE(38.0,59.0)\n      CALL GSCOL(8)\nC----- COCKPIT\n      CALL GSMOVE(38.0,62.0)\n      CALL GSAREA(1)\n      CALL GSPLNE(10,X11,Y11)\n      CALL GSENDA\nC----- CARGO BAY\n      CALL GSCOL(1)\n      CALL GSMOVE(38.0,53.0)\n      CALL GSLINE(32.0,53.0)\n      CALL GSLT(3)\n      CALL GSMOVE(35.0,53.0)\n      CALL GSLINE(35.0,31.0)\nC----- VERTICAL STABILIZER\n      CALL GSCOL(7)\n      CALL GSLT(0)\n      CALL GSAREA(1)\n      CALL GSPLNE(6,X10,Y10)\n      CALL GSENDA\n      CALL GSCOL(1)\n      CALL GSPLNE(6,X10,Y10)\nC----- SPLIT WINDSHIELD\n      CALL GSCOL(7)\n      CALL GSLW(1)\n      CALL GSMOVE(35.0,66.0)\n      CALL GSLINE(35.0,64.0)\nC----- FLAG STRIPES\n      CALL GSCOL(2)\n      CALL GSLW(0)\n      CALL GSMOVE(27.0,35.0)\n      CALL GSLINE(29.0,35.0)\n      CALL GSMOVE(27.0,34.5)\n      CALL GSLINE(29.0,34.5)\n      CALL GSMOVE(27.0,34.0)\n      CALL GSLINE(29.0,34.0)\n      CALL GSMOVE(27.0,33.5)\n      CALL GSLINE(29.0,33.5)\n      CALL GSMOVE(25.0,33.0)\n      CALL GSLINE(29.0,33.0)\n      CALL GSMOVE(25.0,32.5)\n      CALL GSLINE(29.0,32.5)\n      CALL GSMOVE(25.0,32.0)\n      CALL GSLINE(29.0,32.0)\nC----- FLAG BLUE FIELD\n      CALL GSCOL(1)\n      CALL GSMOVE(25.0,35.0)\n      CALL GSAREA(1)\n      CALL GSLINE(27.0,35.0)\n      CALL GSLINE(27.0,33.5)\n      CALL GSLINE(25.0,33.5)\n      CALL GSLINE(25.0,35.0)\n      CALL GSENDA\nC----- USA\n      CALL GSLW(0)\n      CALL GSCOL(8)\n      CALL GSCM(3)\n      CALL GSCD(1)\n      CALL GSCB(1.0,3.0)\n      CALL GSCHAR(42.0,31.0,3,'USA')\nC----- FLIGHT CONTROL SURFACES\n      CALL GSCOL(1)\n      CALL GSMOVE(20.0,31.0)\n      CALL GSLINE(31.0,31.0)\n      CALL GSMOVE(39.0,31.0)\n      CALL GSLINE(50.0,31.0)\n      CALL GSMOVE(20.0,30.0)\n      CALL GSLINE(30.5,30.0)\n      CALL GSMOVE(39.5,30.0)\n      CALL GSLINE(50.0,30.0)\n      CALL GSMOVE(26.0,30.0)\n      CALL GSLINE(26.0,26.5)\n      CALL GSMOVE(44.0,30.0)\n      CALL GSLINE(44.0,26.5)\nC----- COCKPIT HATCHES\n      CALL GSMOVE(33.0,60.0)\n      CALL GSLINE(33.0,57.0)\n      CALL GSLINE(34.5,57.0)\n      CALL GSLINE(34.5,60.0)\n      CALL GSLINE(33.0,60.0)\n      CALL GSMOVE(35.5,60.0)\n      CALL GSLINE(35.5,57.0)\n      CALL GSLINE(37.0,57.0)\n      CALL GSLINE(37.0,60.0)\n      CALL GSLINE(35.5,60.0)\nC----- GUIDANCE CONTROL\n      CALL GSMS(7)\n      CALL GSMRKS(5,XM1,YM1)\n      CALL GSLW(1)\n      CALL GSLT(2)\n      CALL GSMOVE(33.0,68.0)\n      CALL GSLINE(37.0,68.0)\n      CALL GSSCLS\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\n      STOP\n      END\n./     ADD     NAME=SHUTTLE$\n./     NUMBER  NEW1=100,INCR=100\n//SHUTTLE  JOB (........),'INSTALL -SHUTTLE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(SHUTTLE),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  NAME   SHUTTLE(R)\n/*\n./     ADD     NAME=TGTERM\n./     NUMBER  NEW1=100,INCR=100\nTGTERM   TITLE '--- TSO TEST GRAPHIC TERMINAL COMMAND ---'\nTGTERM   START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                     *\n*    PURPOSE : JUST TEST A 3270 TERMINAL TO KNOW IF IT SUPPORTS       *\n*              GRAPHICS PROCESSING (I.E., GDDM).                      *\n*              AT EXIT : R15 = 0 - TERMINAL SUPPORTS GRAPHICS.        *\n*                        R15 = 8 - AN ERROR HAS BEEN DETECTED OR THE  *\n*                                  TERMINAL CANNOT PROCESS GRAPHICS.  *\n*                                                                     *\n*    AUTHOR :  MOINIL P.A.                                            *\n*              COMPUTING CENTRE (TP 361)                              *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n         EJECT\n        $XENT  BASE=R12\n*------- CHECK IF WE ARE ENTERED AS TSO COMMAND\n        $TEW$EC NOTTSO=(,ONLY),MSG=PUTMSG,ERR=REJECT\n        @FSI   FSBFSZ,TERMAT,RQSZ,MF=(E,FSPARM) INITIALIZE FULL-SCREEN\n         LTR   R15,R15\n         BNZ   REJECT              ERROR\n*------- VERIFY TERMINAL FEATURES\n         NI    OPTFS,FSFULL+FSSNAP\n         OI    OPTFS,FSSKIP\n        @FS    OPTFS,SCRNI,SCRNIL,MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   LEAVE\n         TM    FSATTRB3,FSTQUERY   CAN DO QUERY ON THIS TUBE?\n         BZ    LEAVE               NO, SKIP (NO COLORS, ...)\n        @FSQ   ,                   YES, DO IT\n         LTR   R15,R15\n         BNZ   LEAVE\n         LR    R2,R1               QUERY REPLY DATA\n         LR    R3,R1\n         ALR   R3,R0\n         LA    R1,1\n         SLR   R3,R1\nVLOOP    ALR   R2,R1\n         CLR   R2,R3\n         BH    XTEST\n         CLC   2(2,R2),=XL2'8181'  USABLE AREA DEFINED ?\n         BE    CHK81               YES\n         CLC   2(2,R2),=XL2'8185'  CHARACTERS SETS DEFINED ?\n         BE    CHK85               YES\nVNEXT    XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         B     VLOOP\nCHK81    TM    4(R2),X'01'         12/14-BIT ADDRESSING ALLOWED ?\n         BZ    LEAVE               NO\n         TM    4(R2),X'20'         OUTBOUND 3270DS ALLOWED ?\n         BO    LEAVE               NO\n         OI    SWXEQ,SW81\n         B     VNEXT\nCHK85    CLC   0(2,R2),=XL2'0014'  HOW ABOUT DEFINITION ?\n         BNH   LEAVE               NO GOOD\n         OI    SWXEQ,SW85\n         B     VNEXT\nXTEST    TM    SWXEQ,SW81+SW85\n         BNO   LEAVE\n         XR    R2,R2               YES, SET RC=0\n         B     CLEAR\nREJECT   LA    R2,8                SET RC=8\n         B     QUIT\nLEAVE    LA    R2,8                SET RC=8\nCLEAR    MVI   OPTFS,FSEXIT        EXIT FULL-SCREEN MODE\n        @FS    OPTFS,MF=(E,FSPARM)\nQUIT    $XRET  CC=(R2)\n         SPACE 1\n*------- CONSTANTS AND WORK-AREAS\n        $TEW$WA\nSCRNIL   DC    A(LSCRNI)\nFSPARM  @FS    ,,,MF=L\nFSBFSZ   DC    F'80'\nRQSZ     DC    0H'0',AL1(32,80)    REQUESTED SCREEN SIZE\nTERMAT  @FST   ,\n         PRINT GEN\nOPTFS   @FSO   ,\n         PRINT NOGEN\nSWXEQ    DC    XL1'0'\nSW81     EQU   X'80'               USABLE AREA\nSW85     EQU   X'40'               CHARACTER SETS\nSCRNI    $FS   CC=EW,WCC=(RMDT),SBA=(24,79),MF=L\n         $FS   SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(IC),MF=L\nLSCRNI   EQU   *-SCRNI\n         SPACE 1\n*------- LITERAL POOL\n        LTORG\n         SPACE 1\n*------- DSECT'S\n        $TEW$DS\n         SPACE 1\n         END\n./     ADD     NAME=TGTERM$\n./     NUMBER  NEW1=100,INCR=100\n//TGTERM   JOB (........),'INSTALL -TGTERM-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)\n/*JOBPARM L=4\n//*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULE INSTALLATION :                               *\n//* -----------------------------------                               *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(TGTERM),DISP=SHR\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,MAP',COND=(4,LT)\n//SYSLMOD   DD DSN=->.TARGET.CMDLIB,DISP=OLD\n//SYSADD    DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   TGTERM\n  NAME    TGTERM(R)\n/*\n./     ADD     NAME=ZOOM\n./     NUMBER  NEW1=100,INCR=100\nC---------------------------------------------------------------------C\nC     GDDM DEMONSTRATION PROGRAM CALLED \"ZOOM\".                       C\nC---------------------------------------------------------------------C\nC     THIS IS AN EXERCISE ON LOOKING AT AN AIRPLANE AND ZOOMING       C\nC     IN ON SOME PART, LIKE THE COCKPIT. FRANK WAS NEVER ABLE TO      C\nC     COMPLETE PROGRAM. SO I LEAVE IT TO SOME \"YOUNG GENIUS\" TO       C\nC     FIGURE OUT WHAT HE WAS DOING, DOCUMENT THE CODE, AND ENHANCE    C\nC     IT.                                                             C\nC                                                                     C\nC     JIM MARSHALL, CAPT, USAF-RET                                    C\nC                                                                     C\nC     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C\nC---------------------------------------------------------------------C\n      LOGICAL*1 SWE\n      CHARACTER*4 W1,W2,H1,H2\n      CHARACTER*4 VW1,VW2,VH1,VH2\n      CHARACTER*4 VOK/'    '/,VERR/'????'/\n      REAL*4 WW1/0.0/,WW2/85.0/,HH1/0.0/,HH2/85.0/\n      VW1=VOK\n      VW2=VOK\n      VH1=VOK\n      VH2=VOK\n      CALL FSINN\n      CALL FSPCRT(93,0,0,1)\n      CALL ASDFLD(1,1,3,1,31,2)\n      CALL ASCPUT(1,31,'ENTER THE REQUIRED WIDTH RANGE:')\n      CALL ASDFLD(2,1,35,1,4,1)\n      CALL ASFCOL(2,6)\n      CALL ASDFLD(3,1,40,1,2,2)\n      CALL ASCPUT(3,2,'TO')\n      CALL ASDFLD(4,1,43,1,4,1)\n      CALL ASFCOL(4,6)\n      CALL ASDFLD(5,1,48,1,17,2)\n      CALL ASCPUT(5,17,'AND HEIGHT RANGE:')\n      CALL ASDFLD(6,1,66,1,4,1)\n      CALL ASFCOL(6,6)\n      CALL ASDFLD(7,1,71,1,2,2)\n      CALL ASCPUT(7,2,'TO')\n      CALL ASDFLD(8,1,74,1,4,1)\n      CALL ASFCOL(8,6)\n      CALL ASDFLD(9,2,35,1,4,2)\n      CALL ASFCOL(9,3)\n      CALL ASCPUT(9,4,VW1)\n      CALL ASDFLD(10,2,43,1,4,2)\n      CALL ASFCOL(10,3)\n      CALL ASCPUT(10,4,VW2)\n      CALL ASDFLD(11,2,66,1,4,2)\n      CALL ASFCOL(11,3)\n      CALL ASCPUT(11,4,VH1)\n      CALL ASDFLD(12,2,74,1,4,2)\n      CALL ASFCOL(12,3)\n      CALL ASCPUT(12,4,VH2)\n      CALL ASDFLD(13,32,2,1,54,2)\n      CALL ASCPUT(13,54,\n     *'FULL WIDTH IS 0 - 85 UNITS; FULL DEPTH IS 0 - 85 UNITS')\n      CALL ASDFLD(14,32,62,1,18,2)\n      CALL ASFCOL(14,1)\n      CALL ASCPUT(14,18,'(ANY PF-KEY = END)')\n      CALL GSCLP(1)\n111   CALL GSFLD(3,1,28,80)\n      IF ((WW2-WW1).GT.(HH2-HH1)) CALL GSPS(1.0,(HH2-HH1)/(WW2-WW1))\n      IF ((WW2-WW1).LE.(HH2-HH1)) CALL GSPS((WW2-WW1)/(HH2-HH1),1.0)\n      CALL GSWIN(WW1,WW2,HH1,HH2)\n      CALL GSSEG(0)\n      CALL GSLW(2)\n      CALL GSCOL(2)\n      CALL GSMOVE(WW1,HH1)\n      CALL GSLINE(WW1,HH2)\n      CALL GSLINE(WW2,HH2)\n      CALL GSLINE(WW2,HH1)\n      CALL GSLINE(WW1,HH1)\n      CALL DRAWIT\n      CALL ASFCUR(2,1,1)\n      CALL ASREAD(ATYPE,ATMOD,COUNT)\n      IF (ATYPE.NE.0.0) GOTO 999\n      VW1=VOK\n      VW2=VOK\n      VH1=VOK\n      VH2=VOK\n      CALL ASCGET(2,4,W1)\n      CALL ASCGET(4,4,W2)\n      CALL ASCGET(6,4,H1)\n      CALL ASCGET(8,4,H2)\n      CALL GETVAL(W1,NW1,NCCW1)\n      CALL GETVAL(W2,NW2,NCCW2)\n      CALL GETVAL(H1,NH1,NCCH1)\n      CALL GETVAL(H2,NH2,NCCH2)\n      IF (NCCH1.EQ.0) GOTO 222\n      VW1=VERR\n222   IF (NCCW2.EQ.0) GOTO 333\n      VW2=VERR\n333   IF (NCCW1.EQ.0) GOTO 444\n      VH1=VERR\n444   IF (NCCH2.EQ.0) GOTO 555\n      VH2=VERR\n555   IF ((NCCW1+NCCW2+NCCCH1+NCCH2).NE.0) GOTO 888\n      SWE=.FALSE.\n      IF (NW1.NE.NW2) GOTO 666\n      VW1=VERR\n      VW2=VERR\n      SWE=.TRUE.\n666   IF (NH1.NE.NH2) GOTO 777\n      VH1=VERR\n      VH2=VERR\n      SWE=.TRUE.\n777   IF (SWE) GOTO 888\n      WW1=NW1\n      WW2=NW2\n      HH1=NH1\n      HH2=NH2\n888   CALL ASCPUT(9,4,VW1)\n      CALL ASCPUT(10,4,VW2)\n      CALL ASCPUT(11,4,VH1)\n      CALL ASCPUT(12,4,VH2)\n      GOTO 111\n999   CALL FSTERM\n      STOP\n      END\n      SUBROUTINE DRAWIT\n      DIMENSION X1(3),Y1(3)\n      DATA X1 /75.0,75.0,65.0/\n      DATA Y1 /51.0,49.0,47.75/\nC----- OUTLINE ENGINE\n      CALL GSCOL(5)\n      CALL GSLW(0)\n      CALL GSMOVE(8.0,52.8)\n      CALL GSLINE(5.0,52.0)\n      CALL GSLINE(5.0,48.0)\n      CALL GSLINE(8.0,47.2)\n      CALL GSLINE(8.0,49.5)\n      CALL GSLINE(6.0,50.0)\n      CALL GSLINE(8.0,50.5)\n      CALL GSLINE(8.0,52.8)\n      CALL GSLW(0)\n      CALL GSMOVE(5.0,52.0)\n      CALL GSLINE(8.0,52.0)\n      CALL GSMOVE(5.0,51.5)\n      CALL GSLINE(8.0,51.5)\n      CALL GSMOVE(5.0,51.0)\n      CALL GSLINE(8.0,51.0)\n      CALL GSMOVE(5.0,50.5)\n      CALL GSLINE(8.0,50.5)\n      CALL GSMOVE(5.0,50.0)\n      CALL GSLINE(8.0,50.0)\n      CALL GSMOVE(5.0,49.5)\n      CALL GSLINE(8.0,49.5)\n      CALL GSMOVE(5.0,49.0)\n      CALL GSLINE(8.0,49.0)\n      CALL GSMOVE(5.0,48.5)\n      CALL GSLINE(8.0,48.5)\n      CALL GSMOVE(5.0,48.0)\n      CALL GSLINE(8.0,48.0)\n      CALL GSLW(0)\n      CALL GSMOVE(10.0,53.0)\n      CALL GSLINE(8.0,52.8)\n      CALL GSMOVE(10.0,47.0)\n      CALL GSLINE(8.0,47.2)\nC----- OUTLINE TAIL SECTION\n      CALL GSLW(0)\n      CALL GSMOVE(20.0,56.0)\n      CALL GSLINE(8.0,56.0)\n      CALL GSLINE(8.0,53.0)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(20.0,44.0)\n      CALL GSLINE(8.0,44.0)\n      CALL GSLINE(8.0,47.0)\n      CALL GSLINE(20.0,47.0)\n      CALL GSLINE(20.0,49.5)\n      CALL GSMOVE(20.0,50.5)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(17.0,50.3)\n      CALL GSLINE(18.5,50.5)\n      CALL GSLINE(22.0,50.5)\n      CALL GSLINE(22.0,49.5)\n      CALL GSLINE(18.5,49.5)\n      CALL GSLINE(17.0,49.7)\n      CALL GSMOVE(19.0,50.0)\n      CALL GSLINE(16.0,50.5)\n      CALL GSLINE(13.0,50.7)\n      CALL GSLINE(10.0,50.6)\n      CALL GSLINE(8.0,50.5)\n      CALL GSLINE(9.0,50.0)\n      CALL GSLINE(8.0,49.5)\n      CALL GSLINE(10.0,49.4)\n      CALL GSLINE(13.0,49.3)\n      CALL GSLINE(16.0,49.5)\n      CALL GSLINE(19.0,50.0)\n      CALL GSMOVE(12.0,56.0)\n      CALL GSLINE(12.0,53.0)\n      CALL GSMOVE(12.5,56.0)\n      CALL GSLINE(12.5,53.0)\n      CALL GSMOVE(12.0,47.0)\n      CALL GSLINE(12.0,44.0)\n      CALL GSMOVE(12.5,47.0)\n      CALL GSLINE(12.5,44.0)\nC----- LEFT WING\n      CALL GSLW(0)\n      CALL GSMOVE(35.0,53.5)\n      CALL GSLINE(33.0,58.0)\n      CALL GSLINE(40.0,70.0)\n      CALL GSLINE(34.0,70.0)\n      CALL GSLINE(20.0,56.0)\n      CALL GSLINE(23.0,56.0)\n      CALL GSLINE(35.0,69.0)\n      CALL GSLINE(33.0,69.0)\n      CALL GSMOVE(25.0,61.0)\n      CALL GSLINE(27.5,61.0)\n      CALL GSMOVE(29.0,65.0)\n      CALL GSLINE(31.0,65.0)\n      CALL GSMOVE(25.0,58.0)\n      CALL GSLINE(33.0,58.0)\nC----- RIGHT WING\n      CALL GSMOVE(35.0,46.5)\n      CALL GSLINE(33.0,42.0)\n      CALL GSLINE(40.0,30.0)\n      CALL GSLINE(34.0,30.0)\n      CALL GSLINE(20.0,44.0)\n      CALL GSLINE(23.0,44.0)\n      CALL GSLINE(35.0,31.0)\n      CALL GSLINE(33.0,31.0)\n      CALL GSMOVE(25.0,39.0)\n      CALL GSLINE(27.5,39.0)\n      CALL GSMOVE(29.0,35.0)\n      CALL GSLINE(31.0,35.0)\n      CALL GSMOVE(25.0,42.0)\n      CALL GSLINE(33.0,42.0)\nC----- FUSELAGE\n      CALL GSMOVE(32.0,50.0)\n      CALL GSLINE(32.5,50.0)\n      CALL GSMOVE(37.0,50.0)\n      CALL GSLINE(38.0,50.0)\n      CALL GSMOVE(45.0,50.0)\n      CALL GSLINE(45.5,50.0)\n      CALL GSMOVE(50.0,54.0)\n      CALL GSLINE(40.0,54.0)\n      CALL GSLINE(35.0,53.5)\n      CALL GSLINE(30.0,53.2)\n      CALL GSLINE(20.0,53.0)\n      CALL GSMOVE(50.0,46.0)\n      CALL GSLINE(40.0,46.0)\n      CALL GSLINE(35.0,46.5)\n      CALL GSLINE(30.0,46.8)\n      CALL GSLINE(20.0,47.0)\n      CALL GSMOVE(30.0,53.2)\n      CALL GSLINE(30.0,46.8)\n      CALL GSMOVE(40.0,54.0)\n      CALL GSLINE(46.0,54.0)\n      CALL GSMOVE(26.0,53.0)\n      CALL GSLINE(26.0,54.0)\n      CALL GSLINE(25.0,53.5)\n      CALL GSLINE(24.5,53.0)\nC----- INTAKES\n      CALL GSLW(0)\n      CALL GSMOVE(49.0,54.0)\n      CALL GSLINE(43.0,60.0)\n      CALL GSLINE(40.0,60.0)\n      CALL GSLINE(37.0,55.0)\n      CALL GSLINE(40.0,55.0)\n      CALL GSLINE(41.0,54.0)\n      CALL GSMOVE(49.0,46.0)\n      CALL GSLINE(43.0,40.0)\n      CALL GSLINE(40.0,40.0)\n      CALL GSLINE(37.0,45.0)\n      CALL GSLINE(40.0,45.0)\n      CALL GSLINE(41.0,46.0)\n      CALL GSMOVE(50.0,54.0)\n      CALL GSLINE(50.0,53.0)\n      CALL GSLINE(52.0,52.5)\n      CALL GSLINE(43.0,52.5)\n      CALL GSMOVE(43.0,47.5)\n      CALL GSLINE(52.0,47.5)\n      CALL GSLINE(50.0,47.0)\n      CALL GSLINE(50.0,46.0)\nC----- NOSE\n      CALL GSLW(0)\n      CALL GSMOVE(45.0,52.25)\n      CALL GSLINE(65.0,52.25)\n      CALL GSPFLT(3,X1,Y1)\n      CALL GSLINE(45.0,47.75)\n      CALL GSMOVE(59.0,52.25)\n      CALL GSLINE(59.0,51.0)\n      CALL GSMOVE(59.0,49.0)\n      CALL GSLINE(59.0,47.75)\n      CALL GSMOVE(65.0,52.25)\n      CALL GSLINE(65.0,47.75)\n      CALL GSMOVE(71.0,51.0)\n      CALL GSLINE(71.0,49.0)\n      CALL GSLW(2)\n      CALL GSMOVE(79.0,50.0)\n      CALL GSLINE(74.0,50.0)\nC----- CANOPY\n      CALL GSLW(0)\n      CALL GSMOVE(49.0,53.5)\n      CALL GSLINE(41.0,53.5)\n      CALL GSLINE(40.0,53.25)\n      CALL GSLINE(38.5,53.0)\n      CALL GSLINE(37.0,52.1)\n      CALL GSLINE(34.0,52.0)\n      CALL GSLINE(32.0,51.9)\n      CALL GSLINE(30.0,51.5)\n      CALL GSLINE(28.0,50.5)\n      CALL GSLINE(48.0,51.5)\n      CALL GSMOVE(49.0,46.5)\n      CALL GSLINE(41.0,46.5)\n      CALL GSLINE(40.0,46.75)\n      CALL GSLINE(38.5,47.0)\n      CALL GSLINE(37.0,47.9)\n      CALL GSLINE(34.0,48.0)\n      CALL GSLINE(32.0,48.1)\n      CALL GSLINE(30.0,48.5)\n      CALL GSLINE(28.0,49.5)\n      CALL GSLINE(48.0,48.5)\n      CALL GSLINE(47.75,49.0)\n      CALL GSLINE(47.5,50.0)\n      CALL GSLINE(47.75,51.0)\n      CALL GSLINE(48.0,51.5)\n      CALL GSLINE(57.75,51.5)\n      CALL GSLINE(58.75,51.0)\n      CALL GSLINE(59.1,50.5)\n      CALL GSLINE(59.1,49.5)\n      CALL GSLINE(58.75,49.0)\n      CALL GSLINE(57.75,48.5)\n      CALL GSLINE(48.0,48.5)\n      CALL GSCOL(1)\n      CALL GSPAT(16)\n      CALL GSMOVE(50.5,51.2)\n      CALL GSAREA(0)\n      CALL GSLINE(54.0,51.2)\n      CALL GSLINE(54.0,48.8)\n      CALL GSLINE(50.5,48.8)\n      CALL GSLINE(50.0,49.0)\n      CALL GSLINE(49.7,50.0)\n      CALL GSLINE(50.0,51.0)\n      CALL GSLINE(50.5,51.2)\n      CALL GSENDA\n      CALL GSCOL(5)\n      CALL GSMOVE(54.3,51.5)\n      CALL GSLINE(54.3,48.5)\n      CALL GSMOVE(54.5,51.2)\n      CALL GSCOL(1)\n      CALL GSAREA(0)\n      CALL GSLINE(57.0,51.2)\n      CALL GSLINE(58.0,51.0)\n      CALL GSLINE(58.3,50.5)\n      CALL GSLINE(58.5,50.0)\n      CALL GSLINE(58.3,49.5)\n      CALL GSLINE(58.0,49.0)\n      CALL GSLINE(57.0,48.8)\n      CALL GSLINE(54.5,48.8)\n      CALL GSLINE(54.5,51.2)\n      CALL GSENDA\n      CALL GSSCLS\n      RETURN\n      END\n./     ADD     NAME=ZOOMS\n./     NUMBER  NEW1=100,INCR=100\nGETVAL   TITLE 'GET VALUE ROUTINE (ZOOM UTILITY)'\nGETVAL   START 0\n         SPACE 1\n* PURPOSE :    SHORT ROUTINE TO CONVERT THE 4-CHARACTERS VALUES, WHICH\n* ---------    HAVE BEEN ENTERED AS WIDTH-HEIGHT RANGES (0 - 85), IN\n*              BINARY VALUES.\n         SPACE 1\n* FORTRAN :    CALL GETVAL(C,N)\n* ---------             WHERE C IS THE 4-CHARACTERS VALUE\n*                         AND N IS THE BINARY VALUE (FULLWORD)\n         SPACE 1\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE (TP 361)\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n        PRINT  NOGEN\n        YREGS\n        SAVE   (14,12),,*\n         LR    R12,R15\n         USING GETVAL,R12\n         LR    R15,R13\n         LA    R13,SVAR\n         ST    R13,8(R15)\n         ST    R15,4(R13)\n         LTR   R1,R1\n         BZ    EXIT\n         TM    0(R1),X'80'\n         BO    EXIT\n         TM    4(R1),X'80'\n         BO    EXIT\n         TM    8(R1),X'80'\n         BZ    EXIT\n         LM    R2,R4,0(R1)\n         LA    R4,0(R4)\n         LTR   R2,R2\n         BZ    EXIT\n         LTR   R3,R3\n         BZ    EXIT\n         LA    R0,4\n         XR    R1,R1\n         ST    R1,0(R3)\n         ST    R1,0(R4)\n         LR    R14,R1\n         LA    R15,15\n         MVI   SWITCH,0\nLOOP     CLI   0(R2),0\n         BE    TEST\n         CLI   0(R2),C' '\n         BNE   *+L'*+16\n         TM    SWITCH,BIT0\n         BZ    SKIP\n         OI    SWITCH,BIT1\n         B     SKIP\n         TM    SWITCH,BIT1\n         BO    QUIT\n         CLI   0(R2),C'0'\n         BL    QUIT\n         CLI   0(R2),C'9'\n         BH    QUIT\n         OI    SWITCH,BIT0\n         IC    R14,0(R2)\n         NR    R14,R15\n         LTR   R1,R1\n         BZ    *+L'*+4\n         MH    R1,TEN\n         AR    R1,R14\nSKIP     LA    R2,1(R2)\n         BCT   R0,LOOP\nTEST     CH    R1,MAX\n         BH    QUIT\n         ST    R1,0(R3)\n         B     EXIT\nQUIT     LA    R1,16\n         ST    R1,0(R4)\nEXIT     L     R13,4(R13)\n        RETURN (14,12),T,RC=0\n         SPACE 1\n*------- CONSTANTS AND WORK-AREAS\n         SPACE 1\nSVAR     DC    18F'0'\nMAX      DC    H'85'\nTEN      DC    H'10'\nSWITCH   DC    XL1'0'\n         SPACE 1\n        IEZBITS\n         SPACE 1\n         END\n./     ADD     NAME=ZOOM$\n./     NUMBER  NEW1=100,INCR=100\n//ZOOM     JOB (........),'INSTALL -Z O O M-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)\n/*JOBPARM L=5\n//FORT    EXEC PGM=FORTVS2,\n//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'\n//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,\n//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ZOOM),DISP=SHR\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD DSN=&LOADSET,DISP=(MOD,PASS)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ZOOMS),DISP=SHR\n//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR\n//          DD DSN=SYS1.GDDMLOAD,DISP=SHR\n//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//          DD *\n  ENTRY  MAIN\n  NAME   ZOOM(R)\n/*\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GDDM$": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943O\\x00\\x943O\\x14\\x16\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-30T00:00:00", "modifydate": "1994-11-30T14:16:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYSPAJA"}, "text": "//GDDM     JOB (........),'RESTORE -G D D M-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=20\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*             G D D M     D E M O N S T R A T I O N S               *\n//* GDDM INSTALLATION :                                               *\n//*    1. USE THE JOB BELOW TO RESTORE THE INSTALLATION DATA-SET      *\n//*       LIBRARY (VERIFY \"SYSUT2\" AND \"SYSIN\" DD-CARDS DEFINITIONS)  *\n//*       AND PRE-ALLOCATE THE COMPILE LOAD LIBRARY (VERIFY \"DATA\"    *\n//*       DD-CARD DEFINITION),                                        *\n//*    2. ADJUST \"->.USER.DEMO.DATA\" IN THE PROCEDURES \"PAJCANIM\"     *\n//*       AND \"PAJCGDDM\" (MOVED BY STEP \"CPY\" BELOW).                 *\n//*    3. THEN LOOK TO RESTORED MEMBER $$GDOC.                        *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//RESTORE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    DD UNIT=DISK,VOLUME=SER=......,SPACE=(CYL,(3,1,10)),\n//             DSN=->.USER.DEMO.ORIGIN,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=FB,BLKSIZE=3120,LRECL=80)\n//SYSIN     DD DSN=->SOURCE.FILE3(GDDM),DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n//ALLOC   EXEC PGM=IEFBR14,COND=(4,LT)\n//DATA      DD UNIT=DISK,VOLUME=SER=......,SPACE=(CYL,(3,1,10)),\n//             DSN=->.USER.DEMO.DATA,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=U,BLKSIZE=32760)\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJISPF\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=FB AND LRECL=80, ELSE     *\n//*       \"PAJISPV\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=VB AND LRECL=255.         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//CPY     EXEC PAJISPF,DSS='->.SOURCE.FILE3',\n//             DST='->.ISPF.CLISTS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJCANIM,PAJCBIRD,PAJCGDDM)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JOTTO": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x12@\\x07\\xdb\\x07\\xdb\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:40:00", "lines": 2011, "newlines": 2011, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=JOTTO\n./     NUMBER  NEW1=100,INCR=100\nPROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/* CBT ORIGIN : EXTRACTED FROM CBT TAPE 91 MAR, FILE 134.        (PM)*/\n/* PRE-REQUISITE : ERASE COMMAND                                     */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n  ERASE\n  WRITE CLIST IS INITIALIZING - HIT ENTER TO CONTINUE\n  WRITENR ***\n  READ\n  CONTROL NOFLUSH NOMSG\n  SET &HABE=&STR(020)\n  SET &HABH=&STR(001)\n  SET &HABI=&STR(020)\n  SET &HABL=&STR(021)\n  SET &HABO=&STR(001)\n  SET &HABR=&STR(020)\n  SET &HABU=&STR(001)\n  SET &HACE=&STR(300)\n  SET &HACH=&STR(320)\n  SET &HACK=&STR(320)\n  SET &HACR=&STR(001)\n  SET &HACT=&STR(300)\n  SET &HACU=&STR(001)\n  SET &HADE=&STR(321)\n  SET &HADG=&STR(020)\n  SET &HADI=&STR(020)\n  SET &HADM=&STR(001)\n  SET &HADU=&STR(001)\n  SET &HADY=&STR(300)\n  SET &HAFE=&STR(320)\n  SET &HAFT=&STR(301)\n  SET &HAGE=&STR(321)\n  SET &HAGI=&STR(021)\n  SET &HAGO=&STR(001)\n  SET &HAGU=&STR(020)\n  SET &HAHE=&STR(001)\n  SET &HAID=&STR(300)\n  SET &HAIL=&STR(320)\n  SET &HAIM=&STR(300)\n  SET &HAIN=&STR(320)\n  SET &HAIR=&STR(320)\n  SET &HAIS=&STR(021)\n  SET &HAIT=&STR(320)\n  SET &HAIV=&STR(020)\n  SET &HAIZ=&STR(020)\n  SET &HAKE=&STR(320)\n  SET &HAKU=&STR(020)\n  SET &HAKY=&STR(300)\n  SET &HALD=&STR(300)\n  SET &HALE=&STR(321)\n  SET &HALI=&STR(021)\n  SET &HALK=&STR(300)\n  SET &HALM=&STR(300)\n  SET &HALO=&STR(021)\n  SET &HALP=&STR(300)\n  SET &HALS=&STR(320)\n  SET &HALT=&STR(321)\n  SET &HALV=&STR(020)\n  SET &HAMB=&STR(001)\n  SET &HAME=&STR(320)\n  SET &HAMO=&STR(001)\n  SET &HAMP=&STR(301)\n  SET &HAMU=&STR(001)\n  SET &HANC=&STR(020)\n  SET &HAND=&STR(320)\n  SET &HANE=&STR(320)\n  SET &HANG=&STR(321)\n  SET &HANI=&STR(020)\n  SET &HANK=&STR(301)\n  SET &HANO=&STR(321)\n  SET &HANT=&STR(300)\n  SET &HANU=&STR(020)\n  SET &HANV=&STR(001)\n  SET &HAOS=&STR(300)\n  SET &HAPE=&STR(320)\n  SET &HAPH=&STR(300)\n  SET &HAPI=&STR(020)\n  SET &HAPL=&STR(021)\n  SET &HAPO=&STR(020)\n  SET &HAPS=&STR(020)\n  SET &HAPT=&STR(300)\n  SET &HARC=&STR(020)\n  SET &HARD=&STR(320)\n  SET &HARE=&STR(320)\n  SET &HARF=&STR(300)\n  SET &HARG=&STR(021)\n  SET &HARI=&STR(001)\n  SET &HARK=&STR(300)\n  SET &HARL=&STR(320)\n  SET &HARM=&STR(300)\n  SET &HARN=&STR(300)\n  SET &HARO=&STR(020)\n  SET &HARP=&STR(300)\n  SET &HARS=&STR(021)\n  SET &HART=&STR(320)\n  SET &HARV=&STR(020)\n  SET &HARY=&STR(300)\n  SET &HASE=&STR(300)\n  SET &HASH=&STR(301)\n  SET &HASI=&STR(020)\n  SET &HASK=&STR(301)\n  SET &HASM=&STR(300)\n  SET &HASO=&STR(020)\n  SET &HASP=&STR(301)\n  SET &HAST=&STR(321)\n  SET &HATC=&STR(020)\n  SET &HATE=&STR(320)\n  SET &HATH=&STR(320)\n  SET &HATI=&STR(020)\n  SET &HATO=&STR(001)\n  SET &HATY=&STR(020)\n  SET &HAUC=&STR(020)\n  SET &HAUD=&STR(321)\n  SET &HAUG=&STR(020)\n  SET &HAUL=&STR(020)\n  SET &HAUN=&STR(020)\n  SET &HAUS=&STR(020)\n  SET &HAUZ=&STR(020)\n  SET &HAVE=&STR(321)\n  SET &HAVO=&STR(021)\n  SET &HAVY=&STR(300)\n  SET &HAWD=&STR(020)\n  SET &HAWE=&STR(020)\n  SET &HAWK=&STR(020)\n  SET &HAWL=&STR(300)\n  SET &HAWN=&STR(300)\n  SET &HAXE=&STR(020)\n  SET &HAXI=&STR(001)\n  SET &HAXO=&STR(020)\n  SET &HAYE=&STR(020)\n  SET &HAYO=&STR(020)\n  SET &HAZE=&STR(320)\n  SET &HAZO=&STR(020)\n  SET &HAZU=&STR(001)\n  SET &HAZY=&STR(300)\n  SET &HBAD=&STR(001)\n  SET &HBAK=&STR(001)\n  SET &HBAN=&STR(301)\n  SET &HBAR=&STR(301)\n  SET &HBAS=&STR(001)\n  SET &HBAT=&STR(001)\n  SET &HBAW=&STR(001)\n  SET &HBEA=&STR(001)\n  SET &HBED=&STR(300)\n  SET &HBEG=&STR(001)\n  SET &HBEI=&STR(001)\n  SET &HBEL=&STR(301)\n  SET &HBEN=&STR(001)\n  SET &HBER=&STR(301)\n  SET &HBHO=&STR(020)\n  SET &HBID=&STR(301)\n  SET &HBIG=&STR(001)\n  SET &HBIN=&STR(301)\n  SET &HBIP=&STR(001)\n  SET &HBIR=&STR(001)\n  SET &HBIS=&STR(001)\n  SET &HBIT=&STR(301)\n  SET &HBLA=&STR(001)\n  SET &HBLE=&STR(321)\n  SET &HBLI=&STR(001)\n  SET &HBLO=&STR(001)\n  SET &HBLU=&STR(001)\n  SET &HBOA=&STR(001)\n  SET &HBON=&STR(021)\n  SET &HBOR=&STR(021)\n  SET &HBOT=&STR(001)\n  SET &HBOU=&STR(021)\n  SET &HBOW=&STR(300)\n  SET &HBOX=&STR(001)\n  SET &HBRA=&STR(301)\n  SET &HBRE=&STR(301)\n  SET &HBRI=&STR(001)\n  SET &HBRO=&STR(001)\n  SET &HBRU=&STR(001)\n  SET &HBUD=&STR(001)\n  SET &HBUE=&STR(300)\n  SET &HBUG=&STR(001)\n  SET &HBUL=&STR(001)\n  SET &HBUN=&STR(001)\n  SET &HBUR=&STR(001)\n  SET &HBUS=&STR(020)\n  SET &HBUY=&STR(001)\n  SET &HCAB=&STR(001)\n  SET &HCAD=&STR(001)\n  SET &HCAK=&STR(001)\n  SET &HCAL=&STR(320)\n  SET &HCAM=&STR(021)\n  SET &HCAN=&STR(001)\n  SET &HCAP=&STR(001)\n  SET &HCAR=&STR(321)\n  SET &HCAS=&STR(001)\n  SET &HCAT=&STR(001)\n  SET &HCAU=&STR(001)\n  SET &HCAY=&STR(300)\n  SET &HCEA=&STR(021)\n  SET &HCED=&STR(001)\n  SET &HCEN=&STR(020)\n  SET &HCER=&STR(300)\n  SET &HCHA=&STR(001)\n  SET &HCHE=&STR(301)\n  SET &HCHI=&STR(001)\n  SET &HCHO=&STR(001)\n  SET &HCHR=&STR(020)\n  SET &HCHT=&STR(300)\n  SET &HCHU=&STR(001)\n  SET &HCID=&STR(301)\n  SET &HCIG=&STR(001)\n  SET &HCIO=&STR(020)\n  SET &HCKY=&STR(300)\n  SET &HCLA=&STR(001)\n  SET &HCLE=&STR(301)\n  SET &HCLI=&STR(001)\n  SET &HCLO=&STR(001)\n  SET &HCOA=&STR(001)\n  SET &HCOL=&STR(021)\n  SET &HCOM=&STR(001)\n  SET &HCOP=&STR(020)\n  SET &HCOR=&STR(021)\n  SET &HCOU=&STR(021)\n  SET &HCOW=&STR(021)\n  SET &HCOY=&STR(300)\n  SET &HCRA=&STR(021)\n  SET &HCRE=&STR(021)\n  SET &HCRI=&STR(021)\n  SET &HCRO=&STR(001)\n  SET &HCRU=&STR(021)\n  SET &HCRY=&STR(301)\n  SET &HCUR=&STR(301)\n  SET &HCUS=&STR(300)\n  SET &HCUT=&STR(020)\n  SET &HCYC=&STR(001)\n  SET &HDAI=&STR(001)\n  SET &HDAL=&STR(300)\n  SET &HDAN=&STR(001)\n  SET &HDAR=&STR(301)\n  SET &HDAZ=&STR(001)\n  SET &HDEA=&STR(021)\n  SET &HDEB=&STR(001)\n  SET &HDEC=&STR(001)\n  SET &HDEI=&STR(001)\n  SET &HDEL=&STR(301)\n  SET &HDEM=&STR(001)\n  SET &HDEN=&STR(301)\n  SET &HDEP=&STR(021)\n  SET &HDER=&STR(300)\n  SET &HDET=&STR(300)\n  SET &HDEV=&STR(001)\n  SET &HDEX=&STR(300)\n  SET &HDGE=&STR(300)\n  SET &HDIA=&STR(001)\n  SET &HDIC=&STR(021)\n  SET &HDID=&STR(300)\n  SET &HDIF=&STR(020)\n  SET &HDIN=&STR(001)\n  SET &HDIO=&STR(320)\n  SET &HDIR=&STR(301)\n  SET &HDIT=&STR(301)\n  SET &HDMI=&STR(020)\n  SET &HDOT=&STR(001)\n  SET &HDOU=&STR(001)\n  SET &HDOW=&STR(301)\n  SET &HDOZ=&STR(001)\n  SET &HDRA=&STR(001)\n  SET &HDRE=&STR(001)\n  SET &HDRI=&STR(001)\n  SET &HDRO=&STR(001)\n  SET &HDRU=&STR(001)\n  SET &HDST=&STR(300)\n  SET &HDTH=&STR(300)\n  SET &HDUL=&STR(020)\n  SET &HDUN=&STR(001)\n  SET &HDUP=&STR(001)\n  SET &HDWA=&STR(001)\n  SET &HDYI=&STR(001)\n  SET &HEAC=&STR(020)\n  SET &HEAD=&STR(320)\n  SET &HEAF=&STR(300)\n  SET &HEAK=&STR(300)\n  SET &HEAL=&STR(320)\n  SET &HEAM=&STR(300)\n  SET &HEAN=&STR(320)\n  SET &HEAP=&STR(300)\n  SET &HEAR=&STR(321)\n  SET &HEAS=&STR(020)\n  SET &HEAT=&STR(320)\n  SET &HEAV=&STR(020)\n  SET &HEBA=&STR(020)\n  SET &HEBI=&STR(020)\n  SET &HEBO=&STR(001)\n  SET &HEBR=&STR(020)\n  SET &HECA=&STR(020)\n  SET &HECK=&STR(300)\n  SET &HECO=&STR(020)\n  SET &HECR=&STR(020)\n  SET &HECU=&STR(020)\n  SET &HEDA=&STR(020)\n  SET &HEDG=&STR(020)\n  SET &HEDI=&STR(001)\n  SET &HEFT=&STR(300)\n  SET &HEGA=&STR(020)\n  SET &HEGI=&STR(020)\n  SET &HEGR=&STR(020)\n  SET &HEIG=&STR(021)\n  SET &HEIN=&STR(320)\n  SET &HEIR=&STR(320)\n  SET &HELA=&STR(021)\n  SET &HELB=&STR(001)\n  SET &HELC=&STR(020)\n  SET &HELD=&STR(300)\n  SET &HELF=&STR(300)\n  SET &HELI=&STR(021)\n  SET &HELO=&STR(021)\n  SET &HELT=&STR(300)\n  SET &HELU=&STR(001)\n  SET &HEMI=&STR(020)\n  SET &HEMU=&STR(020)\n  SET &HEMO=&STR(020)\n  SET &HEMP=&STR(001)\n  SET &HEMY=&STR(300)\n  SET &HENA=&STR(021)\n  SET &HENC=&STR(020)\n  SET &HEND=&STR(301)\n  SET &HENE=&STR(001)\n  SET &HENI=&STR(020)\n  SET &HENJ=&STR(001)\n  SET &HENO=&STR(020)\n  SET &HENR=&STR(001)\n  SET &HENT=&STR(301)\n  SET &HENU=&STR(020)\n  SET &HENV=&STR(001)\n  SET &HEPA=&STR(020)\n  SET &HEPI=&STR(020)\n  SET &HEPO=&STR(021)\n  SET &HEPT=&STR(320)\n  SET &HEQU=&STR(001)\n  SET &HERA=&STR(300)\n  SET &HERC=&STR(020)\n  SET &HERD=&STR(300)\n  SET &HERI=&STR(020)\n  SET &HERK=&STR(300)\n  SET &HERN=&STR(300)\n  SET &HERT=&STR(320)\n  SET &HERU=&STR(020)\n  SET &HERY=&STR(300)\n  SET &HESH=&STR(300)\n  SET &HESI=&STR(020)\n  SET &HEST=&STR(300)\n  SET &HETC=&STR(020)\n  SET &HETH=&STR(001)\n  SET &HETR=&STR(020)\n  SET &HETY=&STR(300)\n  SET &HEVA=&STR(001)\n  SET &HEVI=&STR(021)\n  SET &HEVO=&STR(001)\n  SET &HEWN=&STR(300)\n  SET &HEXA=&STR(001)\n  SET &HEXE=&STR(020)\n  SET &HEXI=&STR(001)\n  SET &HEXT=&STR(001)\n  SET &HEXU=&STR(020)\n  SET &HFAB=&STR(001)\n  SET &HFAI=&STR(001)\n  SET &HFAL=&STR(001)\n  SET &HFAN=&STR(001)\n  SET &HFAR=&STR(001)\n  SET &HFAU=&STR(001)\n  SET &HFEA=&STR(001)\n  SET &HFEI=&STR(001)\n  SET &HFEL=&STR(001)\n  SET &HFER=&STR(300)\n  SET &HFET=&STR(001)\n  SET &HFIB=&STR(001)\n  SET &HFIE=&STR(001)\n  SET &HFIG=&STR(001)\n  SET &HFIL=&STR(001)\n  SET &HFIN=&STR(001)\n  SET &HFIR=&STR(001)\n  SET &HFIT=&STR(300)\n  SET &HFLA=&STR(001)\n  SET &HFLE=&STR(301)\n  SET &HFLI=&STR(001)\n  SET &HFLO=&STR(001)\n  SET &HFLU=&STR(001)\n  SET &HFOC=&STR(001)\n  SET &HFOI=&STR(001)\n  SET &HFOR=&STR(001)\n  SET &HFOU=&STR(001)\n  SET &HFRA=&STR(001)\n  SET &HFRE=&STR(001)\n  SET &HFRI=&STR(001)\n  SET &HFRO=&STR(001)\n  SET &HFRU=&STR(001)\n  SET &HFTE=&STR(020)\n  SET &HFUS=&STR(001)\n  SET &HGAB=&STR(001)\n  SET &HGAI=&STR(001)\n  SET &HGAL=&STR(300)\n  SET &HGAN=&STR(300)\n  SET &HGAR=&STR(300)\n  SET &HGAU=&STR(001)\n  SET &HGAW=&STR(001)\n  SET &HGEL=&STR(300)\n  SET &HGEN=&STR(021)\n  SET &HGER=&STR(300)\n  SET &HGES=&STR(300)\n  SET &HGHO=&STR(001)\n  SET &HGHT=&STR(300)\n  SET &HGIA=&STR(001)\n  SET &HGIB=&STR(001)\n  SET &HGIC=&STR(300)\n  SET &HGIL=&STR(020)\n  SET &HGIN=&STR(300)\n  SET &HGIP=&STR(001)\n  SET &HGIR=&STR(001)\n  SET &HGLA=&STR(001)\n  SET &HGLE=&STR(321)\n  SET &HGLI=&STR(001)\n  SET &HGLO=&STR(001)\n  SET &HGNA=&STR(001)\n  SET &HGNO=&STR(001)\n  SET &HGOI=&STR(001)\n  SET &HGON=&STR(020)\n  SET &HGOR=&STR(001)\n  SET &HGOT=&STR(300)\n  SET &HGOU=&STR(001)\n  SET &HGRA=&STR(001)\n  SET &HGRE=&STR(001)\n  SET &HGRI=&STR(001)\n  SET &HGRO=&STR(301)\n  SET &HGRU=&STR(001)\n  SET &HGRY=&STR(300)\n  SET &HGUA=&STR(001)\n  SET &HGUE=&STR(301)\n  SET &HGUI=&STR(001)\n  SET &HHAB=&STR(001)\n  SET &HHAC=&STR(020)\n  SET &HHAD=&STR(020)\n  SET &HHAF=&STR(020)\n  SET &HHAI=&STR(020)\n  SET &HHAK=&STR(020)\n  SET &HHAL=&STR(021)\n  SET &HHAM=&STR(020)\n  SET &HHAN=&STR(021)\n  SET &HHAO=&STR(020)\n  SET &HHAP=&STR(020)\n  SET &HHAR=&STR(021)\n  SET &HHAS=&STR(021)\n  SET &HHAT=&STR(001)\n  SET &HHAU=&STR(001)\n  SET &HHAV=&STR(021)\n  SET &HHAW=&STR(020)\n  SET &HHAZ=&STR(001)\n  SET &HHEA=&STR(021)\n  SET &HHED=&STR(001)\n  SET &HHEF=&STR(020)\n  SET &HHEI=&STR(020)\n  SET &HHEL=&STR(020)\n  SET &HHEN=&STR(300)\n  SET &HHER=&STR(300)\n  SET &HHES=&STR(020)\n  SET &HHEW=&STR(020)\n  SET &HHEX=&STR(001)\n  SET &HHIC=&STR(320)\n  SET &HHID=&STR(020)\n  SET &HHIE=&STR(020)\n  SET &HHIK=&STR(001)\n  SET &HHIL=&STR(020)\n  SET &HHIM=&STR(020)\n  SET &HHIN=&STR(021)\n  SET &HHIR=&STR(021)\n  SET &HHIS=&STR(020)\n  SET &HHIT=&STR(021)\n  SET &HHOA=&STR(021)\n  SET &HHOC=&STR(020)\n  SET &HHOI=&STR(021)\n  SET &HHOL=&STR(021)\n  SET &HHOM=&STR(021)\n  SET &HHON=&STR(021)\n  SET &HHOR=&STR(321)\n  SET &HHOS=&STR(020)\n  SET &HHOT=&STR(001)\n  SET &HHOU=&STR(021)\n  SET &HHOV=&STR(021)\n  SET &HHOW=&STR(020)\n  SET &HHRE=&STR(320)\n  SET &HHRO=&STR(020)\n  SET &HHRU=&STR(020)\n  SET &HHUM=&STR(021)\n  SET &HHUN=&STR(021)\n  SET &HHUR=&STR(020)\n  SET &HHUS=&STR(001)\n  SET &HHYM=&STR(021)\n  SET &HIAD=&STR(300)\n  SET &HIAL=&STR(300)\n  SET &HIAN=&STR(020)\n  SET &HIAR=&STR(320)\n  SET &HIBE=&STR(320)\n  SET &HIBR=&STR(020)\n  SET &HICA=&STR(020)\n  SET &HICE=&STR(300)\n  SET &HICH=&STR(020)\n  SET &HICK=&STR(300)\n  SET &HICT=&STR(300)\n  SET &HICY=&STR(300)\n  SET &HIDA=&STR(020)\n  SET &HIDE=&STR(321)\n  SET &HIDG=&STR(020)\n  SET &HIDI=&STR(001)\n  SET &HIDO=&STR(020)\n  SET &HIDS=&STR(020)\n  SET &HIDT=&STR(020)\n  SET &HIED=&STR(300)\n  SET &HIEF=&STR(300)\n  SET &HIEL=&STR(020)\n  SET &HIEN=&STR(320)\n  SET &HIER=&STR(320)\n  SET &HIES=&STR(300)\n  SET &HIET=&STR(320)\n  SET &HIFE=&STR(300)\n  SET &HIFL=&STR(020)\n  SET &HIFT=&STR(300)\n  SET &HIFY=&STR(300)\n  SET &HIGA=&STR(020)\n  SET &HIGE=&STR(020)\n  SET &HIGH=&STR(320)\n  SET &HIGN=&STR(300)\n  SET &HIGO=&STR(020)\n  SET &HIKE=&STR(320)\n  SET &HILC=&STR(020)\n  SET &HILD=&STR(300)\n  SET &HILE=&STR(320)\n  SET &HILO=&STR(020)\n  SET &HILT=&STR(320)\n  SET &HILY=&STR(300)\n  SET &HIMB=&STR(301)\n  SET &HIME=&STR(300)\n  SET &HIMP=&STR(301)\n  SET &HIMY=&STR(300)\n  SET &HINA=&STR(321)\n  SET &HINC=&STR(021)\n  SET &HIND=&STR(301)\n  SET &HINE=&STR(321)\n  SET &HINF=&STR(001)\n  SET &HING=&STR(321)\n  SET &HINK=&STR(300)\n  SET &HINL=&STR(001)\n  SET &HINO=&STR(020)\n  SET &HINT=&STR(301)\n  SET &HINU=&STR(001)\n  SET &HIOL=&STR(020)\n  SET &HIOM=&STR(300)\n  SET &HION=&STR(300)\n  SET &HIOR=&STR(300)\n  SET &HIOT=&STR(300)\n  SET &HIOU=&STR(020)\n  SET &HIPE=&STR(320)\n  SET &HIPS=&STR(020)\n  SET &HIRC=&STR(020)\n  SET &HIRD=&STR(300)\n  SET &HIRE=&STR(320)\n  SET &HIRK=&STR(301)\n  SET &HIRL=&STR(300)\n  SET &HIRO=&STR(001)\n  SET &HIRP=&STR(300)\n  SET &HIRS=&STR(020)\n  SET &HIRT=&STR(320)\n  SET &HIRY=&STR(300)\n  SET &HISE=&STR(320)\n  SET &HISK=&STR(300)\n  SET &HISL=&STR(021)\n  SET &HISM=&STR(300)\n  SET &HISO=&STR(020)\n  SET &HISP=&STR(300)\n  SET &HIST=&STR(320)\n  SET &HISY=&STR(300)\n  SET &HITA=&STR(020)\n  SET &HITC=&STR(020)\n  SET &HITE=&STR(300)\n  SET &HITH=&STR(320)\n  SET &HITR=&STR(020)\n  SET &HITY=&STR(300)\n  SET &HIVA=&STR(020)\n  SET &HIVE=&STR(320)\n  SET &HIVO=&STR(021)\n  SET &HIXE=&STR(020)\n  SET &HIZE=&STR(300)\n  SET &HJAN=&STR(001)\n  SET &HJAU=&STR(001)\n  SET &HJOI=&STR(001)\n  SET &HJOK=&STR(001)\n  SET &HJOY=&STR(300)\n  SET &HJUD=&STR(001)\n  SET &HJUI=&STR(001)\n  SET &HKAS=&STR(020)\n  SET &HKAT=&STR(020)\n  SET &HKED=&STR(300)\n  SET &HKEI=&STR(020)\n  SET &HKEL=&STR(300)\n  SET &HKEN=&STR(300)\n  SET &HKER=&STR(300)\n  SET &HKEW=&STR(300)\n  SET &HKIR=&STR(020)\n  SET &HKLE=&STR(301)\n  SET &HKNA=&STR(001)\n  SET &HKNE=&STR(001)\n  SET &HKNI=&STR(001)\n  SET &HKNO=&STR(001)\n  SET &HKUM=&STR(300)\n  SET &HKUN=&STR(020)\n  SET &HLAB=&STR(001)\n  SET &HLAC=&STR(020)\n  SET &HLAD=&STR(021)\n  SET &HLAG=&STR(001)\n  SET &HLAI=&STR(020)\n  SET &HLAK=&STR(020)\n  SET &HLAM=&STR(020)\n  SET &HLAN=&STR(021)\n  SET &HLAP=&STR(001)\n  SET &HLAR=&STR(321)\n  SET &HLAS=&STR(020)\n  SET &HLAT=&STR(021)\n  SET &HLAU=&STR(001)\n  SET &HLAV=&STR(020)\n  SET &HLAW=&STR(300)\n  SET &HLAX=&STR(300)\n  SET &HLAY=&STR(301)\n  SET &HLAZ=&STR(020)\n  SET &HLBO=&STR(020)\n  SET &HLCE=&STR(020)\n  SET &HLCH=&STR(300)\n  SET &HLEA=&STR(021)\n  SET &HLED=&STR(301)\n  SET &HLEF=&STR(020)\n  SET &HLEG=&STR(001)\n  SET &HLEI=&STR(020)\n  SET &HLEM=&STR(001)\n  SET &HLEN=&STR(020)\n  SET &HLEP=&STR(020)\n  SET &HLER=&STR(320)\n  SET &HLES=&STR(320)\n  SET &HLET=&STR(300)\n  SET &HLEW=&STR(020)\n  SET &HLGE=&STR(300)\n  SET &HLIB=&STR(001)\n  SET &HLIC=&STR(320)\n  SET &HLID=&STR(320)\n  SET &HLIE=&STR(020)\n  SET &HLIG=&STR(021)\n  SET &HLIK=&STR(021)\n  SET &HLIM=&STR(020)\n  SET &HLIN=&STR(021)\n  SET &HLIP=&STR(300)\n  SET &HLIR=&STR(020)\n  SET &HLIT=&STR(320)\n  SET &HLIV=&STR(021)\n  SET &HLKY=&STR(300)\n  SET &HLOA=&STR(021)\n  SET &HLOB=&STR(020)\n  SET &HLOC=&STR(020)\n  SET &HLOD=&STR(001)\n  SET &HLOF=&STR(020)\n  SET &HLOG=&STR(001)\n  SET &HLON=&STR(320)\n  SET &HLOP=&STR(020)\n  SET &HLOR=&STR(020)\n  SET &HLOS=&STR(021)\n  SET &HLOT=&STR(320)\n  SET &HLOU=&STR(021)\n  SET &HLOV=&STR(021)\n  SET &HLOW=&STR(320)\n  SET &HLOY=&STR(001)\n  SET &HLSE=&STR(300)\n  SET &HLTE=&STR(020)\n  SET &HLTH=&STR(300)\n  SET &HLTR=&STR(020)\n  SET &HLTY=&STR(300)\n  SET &HLTZ=&STR(300)\n  SET &HLUC=&STR(021)\n  SET &HLUD=&STR(020)\n  SET &HLUI=&STR(020)\n  SET &HLUK=&STR(020)\n  SET &HLUM=&STR(021)\n  SET &HLUN=&STR(021)\n  SET &HLUP=&STR(001)\n  SET &HLUR=&STR(021)\n  SET &HLUS=&STR(020)\n  SET &HLUT=&STR(020)\n  SET &HLVE=&STR(300)\n  SET &HLYI=&STR(001)\n  SET &HLYM=&STR(001)\n  SET &HLYN=&STR(001)\n  SET &HMAD=&STR(300)\n  SET &HMAG=&STR(001)\n  SET &HMAI=&STR(001)\n  SET &HMAK=&STR(001)\n  SET &HMAL=&STR(001)\n  SET &HMAN=&STR(301)\n  SET &HMAP=&STR(001)\n  SET &HMAR=&STR(021)\n  SET &HMAS=&STR(001)\n  SET &HMAT=&STR(001)\n  SET &HMAY=&STR(001)\n  SET &HMBE=&STR(020)\n  SET &HMBU=&STR(020)\n  SET &HMEA=&STR(021)\n  SET &HMED=&STR(301)\n  SET &HMEL=&STR(321)\n  SET &HMEN=&STR(300)\n  SET &HMEO=&STR(300)\n  SET &HMER=&STR(001)\n  SET &HMET=&STR(301)\n  SET &HMIC=&STR(300)\n  SET &HMID=&STR(001)\n  SET &HMIG=&STR(001)\n  SET &HMIL=&STR(020)\n  SET &HMIN=&STR(001)\n  SET &HMIR=&STR(001)\n  SET &HMIS=&STR(001)\n  SET &HMIT=&STR(321)\n  SET &HMOD=&STR(001)\n  SET &HMOI=&STR(001)\n  SET &HMOK=&STR(020)\n  SET &HMON=&STR(321)\n  SET &HMOR=&STR(001)\n  SET &HMOU=&STR(001)\n  SET &HMOW=&STR(001)\n  SET &HMPE=&STR(020)\n  SET &HMPH=&STR(300)\n  SET &HMPL=&STR(020)\n  SET &HMPT=&STR(020)\n  SET &HMPY=&STR(300)\n  SET &HMUC=&STR(020)\n  SET &HMUN=&STR(001)\n  SET &HMUR=&STR(301)\n  SET &HMUS=&STR(021)\n  SET &HMUT=&STR(001)\n  SET &HNAC=&STR(020)\n  SET &HNAD=&STR(001)\n  SET &HNAI=&STR(021)\n  SET &HNAK=&STR(021)\n  SET &HNAL=&STR(300)\n  SET &HNAM=&STR(001)\n  SET &HNAP=&STR(020)\n  SET &HNAR=&STR(320)\n  SET &HNAS=&STR(021)\n  SET &HNAV=&STR(021)\n  SET &HNCE=&STR(300)\n  SET &HNCH=&STR(300)\n  SET &HNCL=&STR(020)\n  SET &HNCU=&STR(020)\n  SET &HNCY=&STR(300)\n  SET &HNDE=&STR(020)\n  SET &HNDI=&STR(020)\n  SET &HNDO=&STR(020)\n  SET &HNDY=&STR(300)\n  SET &HNEA=&STR(020)\n  SET &HNED=&STR(300)\n  SET &HNEG=&STR(001)\n  SET &HNEI=&STR(001)\n  SET &HNEL=&STR(300)\n  SET &HNEM=&STR(020)\n  SET &HNEP=&STR(020)\n  SET &HNER=&STR(320)\n  SET &HNEW=&STR(300)\n  SET &HNEX=&STR(001)\n  SET &HNEY=&STR(300)\n  SET &HNFE=&STR(020)\n  SET &HNFI=&STR(020)\n  SET &HNGE=&STR(320)\n  SET &HNGL=&STR(020)\n  SET &HNGO=&STR(020)\n  SET &HNGR=&STR(020)\n  SET &HNGS=&STR(300)\n  SET &HNGY=&STR(300)\n  SET &HNIC=&STR(301)\n  SET &HNIF=&STR(020)\n  SET &HNIG=&STR(001)\n  SET &HNIM=&STR(300)\n  SET &HNIP=&STR(020)\n  SET &HNIS=&STR(300)\n  SET &HNIT=&STR(020)\n  SET &HNJO=&STR(020)\n  SET &HNKL=&STR(020)\n  SET &HNKY=&STR(300)\n  SET &HNLA=&STR(020)\n  SET &HNLE=&STR(020)\n  SET &HNOB=&STR(001)\n  SET &HNOD=&STR(320)\n  SET &HNOE=&STR(300)\n  SET &HNOI=&STR(001)\n  SET &HNOM=&STR(321)\n  SET &HNOR=&STR(321)\n  SET &HNOT=&STR(001)\n  SET &HNOU=&STR(020)\n  SET &HNOV=&STR(001)\n  SET &HNOW=&STR(020)\n  SET &HNRO=&STR(020)\n  SET &HNSE=&STR(020)\n  SET &HNTE=&STR(020)\n  SET &HNTH=&STR(300)\n  SET &HNTI=&STR(020)\n  SET &HNTR=&STR(020)\n  SET &HNUD=&STR(001)\n  SET &HNUR=&STR(021)\n  SET &HNUS=&STR(300)\n  SET &HNVI=&STR(020)\n  SET &HNVO=&STR(020)\n  SET &HNYL=&STR(001)\n  SET &HOAC=&STR(020)\n  SET &HOAD=&STR(300)\n  SET &HOAK=&STR(301)\n  SET &HOAL=&STR(300)\n  SET &HOAN=&STR(300)\n  SET &HOAR=&STR(020)\n  SET &HOAS=&STR(020)\n  SET &HOAT=&STR(320)\n  SET &HOBE=&STR(320)\n  SET &HOBI=&STR(020)\n  SET &HOBL=&STR(020)\n  SET &HOCA=&STR(020)\n  SET &HOCE=&STR(001)\n  SET &HOCH=&STR(301)\n  SET &HOCK=&STR(300)\n  SET &HOCU=&STR(020)\n  SET &HODE=&STR(320)\n  SET &HODG=&STR(020)\n  SET &HOFT=&STR(301)\n  SET &HOGI=&STR(020)\n  SET &HOGL=&STR(001)\n  SET &HOGU=&STR(020)\n  SET &HOIC=&STR(300)\n  SET &HOID=&STR(300)\n  SET &HOIL=&STR(300)\n  SET &HOIN=&STR(320)\n  SET &HOIR=&STR(300)\n  SET &HOIS=&STR(020)\n  SET &HOIT=&STR(300)\n  SET &HOKE=&STR(320)\n  SET &HOKY=&STR(300)\n  SET &HOLA=&STR(320)\n  SET &HOLD=&STR(300)\n  SET &HOLE=&STR(320)\n  SET &HOLI=&STR(020)\n  SET &HOLL=&STR(300)\n  SET &HOLV=&STR(020)\n  SET &HOMA=&STR(020)\n  SET &HOME=&STR(320)\n  SET &HOMI=&STR(020)\n  SET &HOMP=&STR(300)\n  SET &HONE=&STR(320)\n  SET &HONG=&STR(320)\n  SET &HONI=&STR(020)\n  SET &HONK=&STR(020)\n  SET &HONS=&STR(001)\n  SET &HONT=&STR(320)\n  SET &HONU=&STR(020)\n  SET &HONY=&STR(300)\n  SET &HOPE=&STR(301)\n  SET &HOPI=&STR(020)\n  SET &HORA=&STR(020)\n  SET &HORB=&STR(001)\n  SET &HORC=&STR(020)\n  SET &HORD=&STR(300)\n  SET &HORE=&STR(320)\n  SET &HORG=&STR(021)\n  SET &HORK=&STR(320)\n  SET &HORL=&STR(020)\n  SET &HORM=&STR(300)\n  SET &HORN=&STR(320)\n  SET &HORP=&STR(020)\n  SET &HORS=&STR(020)\n  SET &HORT=&STR(320)\n  SET &HORU=&STR(020)\n  SET &HORY=&STR(300)\n  SET &HOSE=&STR(320)\n  SET &HOST=&STR(300)\n  SET &HOTC=&STR(020)\n  SET &HOTE=&STR(320)\n  SET &HOTH=&STR(301)\n  SET &HOUB=&STR(020)\n  SET &HOUC=&STR(020)\n  SET &HOUD=&STR(300)\n  SET &HOUG=&STR(021)\n  SET &HOUL=&STR(320)\n  SET &HOUN=&STR(021)\n  SET &HOUP=&STR(300)\n  SET &HOUR=&STR(320)\n  SET &HOUS=&STR(320)\n  SET &HOUT=&STR(320)\n  SET &HOVE=&STR(320)\n  SET &HOWE=&STR(020)\n  SET &HOWI=&STR(001)\n  SET &HOWL=&STR(300)\n  SET &HOWN=&STR(301)\n  SET &HOWR=&STR(020)\n  SET &HOXE=&STR(020)\n  SET &HOXY=&STR(300)\n  SET &HOYA=&STR(020)\n  SET &HOZE=&STR(020)\n  SET &HPAC=&STR(020)\n  SET &HPAD=&STR(020)\n  SET &HPAI=&STR(001)\n  SET &HPAL=&STR(301)\n  SET &HPAN=&STR(021)\n  SET &HPAR=&STR(021)\n  SET &HPAS=&STR(001)\n  SET &HPAT=&STR(021)\n  SET &HPAU=&STR(001)\n  SET &HPAW=&STR(021)\n  SET &HPEA=&STR(021)\n  SET &HPED=&STR(301)\n  SET &HPEL=&STR(300)\n  SET &HPEN=&STR(321)\n  SET &HPER=&STR(321)\n  SET &HPHA=&STR(001)\n  SET &HPHO=&STR(001)\n  SET &HPIA=&STR(001)\n  SET &HPIC=&STR(320)\n  SET &HPID=&STR(300)\n  SET &HPIE=&STR(001)\n  SET &HPIK=&STR(020)\n  SET &HPIL=&STR(001)\n  SET &HPIN=&STR(021)\n  SET &HPIO=&STR(001)\n  SET &HPIR=&STR(320)\n  SET &HPIT=&STR(021)\n  SET &HPIV=&STR(001)\n  SET &HPIX=&STR(001)\n  SET &HPLA=&STR(001)\n  SET &HPLE=&STR(301)\n  SET &HPLI=&STR(020)\n  SET &HPLO=&STR(020)\n  SET &HPLU=&STR(001)\n  SET &HPLY=&STR(300)\n  SET &HPOA=&STR(001)\n  SET &HPOC=&STR(020)\n  SET &HPOI=&STR(021)\n  SET &HPOK=&STR(001)\n  SET &HPON=&STR(300)\n  SET &HPOR=&STR(021)\n  SET &HPOT=&STR(300)\n  SET &HPOU=&STR(001)\n  SET &HPOW=&STR(001)\n  SET &HPOX=&STR(020)\n  SET &HPRA=&STR(021)\n  SET &HPRI=&STR(021)\n  SET &HPRO=&STR(001)\n  SET &HPRU=&STR(001)\n  SET &HPSA=&STR(001)\n  SET &HPSE=&STR(320)\n  SET &HPSY=&STR(300)\n  SET &HPTH=&STR(300)\n  SET &HPTY=&STR(300)\n  SET &HPUL=&STR(001)\n  SET &HPUN=&STR(001)\n  SET &HPUR=&STR(021)\n  SET &HPUS=&STR(001)\n  SET &HPYL=&STR(001)\n  SET &HQUA=&STR(021)\n  SET &HQUE=&STR(001)\n  SET &HQUI=&STR(021)\n  SET &HQUO=&STR(001)\n  SET &HRAB=&STR(001)\n  SET &HRAC=&STR(020)\n  SET &HRAD=&STR(021)\n  SET &HRAF=&STR(020)\n  SET &HRAI=&STR(021)\n  SET &HRAK=&STR(020)\n  SET &HRAL=&STR(300)\n  SET &HRAM=&STR(020)\n  SET &HRAN=&STR(021)\n  SET &HRAP=&STR(321)\n  SET &HRAS=&STR(020)\n  SET &HRAT=&STR(321)\n  SET &HRAU=&STR(020)\n  SET &HRAV=&STR(021)\n  SET &HRAW=&STR(320)\n  SET &HRAY=&STR(300)\n  SET &HRAZ=&STR(021)\n  SET &HRBA=&STR(020)\n  SET &HRBI=&STR(020)\n  SET &HRCE=&STR(300)\n  SET &HRCH=&STR(300)\n  SET &HRCY=&STR(300)\n  SET &HRDY=&STR(300)\n  SET &HREA=&STR(021)\n  SET &HREC=&STR(021)\n  SET &HRED=&STR(300)\n  SET &HREG=&STR(001)\n  SET &HREI=&STR(001)\n  SET &HREL=&STR(001)\n  SET &HREM=&STR(001)\n  SET &HREN=&STR(320)\n  SET &HREP=&STR(020)\n  SET &HRER=&STR(300)\n  SET &HRES=&STR(021)\n  SET &HREW=&STR(300)\n  SET &HRGA=&STR(020)\n  SET &HRGE=&STR(300)\n  SET &HRGO=&STR(300)\n  SET &HRGU=&STR(020)\n  SET &HRHY=&STR(001)\n  SET &HRIA=&STR(020)\n  SET &HRIB=&STR(020)\n  SET &HRIC=&STR(020)\n  SET &HRID=&STR(321)\n  SET &HRIE=&STR(020)\n  SET &HRIF=&STR(021)\n  SET &HRIG=&STR(301)\n  SET &HRIL=&STR(301)\n  SET &HRIM=&STR(020)\n  SET &HRIN=&STR(020)\n  SET &HRIO=&STR(020)\n  SET &HRIP=&STR(321)\n  SET &HRIS=&STR(020)\n  SET &HRIT=&STR(320)\n  SET &HRIV=&STR(021)\n  SET &HRIZ=&STR(020)\n  SET &HRKE=&STR(020)\n  SET &HRKS=&STR(300)\n  SET &HRKY=&STR(300)\n  SET &HRLD=&STR(300)\n  SET &HRLY=&STR(300)\n  SET &HRNY=&STR(300)\n  SET &HROA=&STR(021)\n  SET &HROB=&STR(321)\n  SET &HROC=&STR(020)\n  SET &HROG=&STR(001)\n  SET &HROI=&STR(020)\n  SET &HROL=&STR(320)\n  SET &HRON=&STR(020)\n  SET &HROP=&STR(320)\n  SET &HROS=&STR(020)\n  SET &HROT=&STR(020)\n  SET &HROU=&STR(021)\n  SET &HROV=&STR(020)\n  SET &HROW=&STR(320)\n  SET &HROX=&STR(020)\n  SET &HROY=&STR(001)\n  SET &HRPS=&STR(300)\n  SET &HRSE=&STR(300)\n  SET &HRSH=&STR(300)\n  SET &HRSO=&STR(020)\n  SET &HRST=&STR(300)\n  SET &HRTH=&STR(300)\n  SET &HRTY=&STR(300)\n  SET &HRUB=&STR(300)\n  SET &HRUC=&STR(020)\n  SET &HRUD=&STR(020)\n  SET &HRUE=&STR(020)\n  SET &HRUG=&STR(300)\n  SET &HRUI=&STR(020)\n  SET &HRUM=&STR(320)\n  SET &HRUN=&STR(020)\n  SET &HRUP=&STR(300)\n  SET &HRUS=&STR(021)\n  SET &HRUT=&STR(020)\n  SET &HRVE=&STR(300)\n  SET &HRYP=&STR(020)\n  SET &HSAB=&STR(001)\n  SET &HSAI=&STR(001)\n  SET &HSAL=&STR(021)\n  SET &HSAT=&STR(001)\n  SET &HSAU=&STR(001)\n  SET &HSAW=&STR(001)\n  SET &HSAX=&STR(001)\n  SET &HSCA=&STR(001)\n  SET &HSCE=&STR(001)\n  SET &HSCI=&STR(001)\n  SET &HSCO=&STR(001)\n  SET &HSCR=&STR(001)\n  SET &HSED=&STR(300)\n  SET &HSEP=&STR(001)\n  SET &HSER=&STR(301)\n  SET &HSET=&STR(300)\n  SET &HSHA=&STR(001)\n  SET &HSHE=&STR(021)\n  SET &HSHI=&STR(001)\n  SET &HSHO=&STR(001)\n  SET &HSHR=&STR(001)\n  SET &HSHU=&STR(001)\n  SET &HSHY=&STR(300)\n  SET &HSIC=&STR(300)\n  SET &HSIG=&STR(001)\n  SET &HSIN=&STR(301)\n  SET &HSIR=&STR(001)\n  SET &HSIS=&STR(300)\n  SET &HSKA=&STR(001)\n  SET &HSKE=&STR(021)\n  SET &HSKI=&STR(001)\n  SET &HSKU=&STR(001)\n  SET &HSKY=&STR(300)\n  SET &HSLA=&STR(001)\n  SET &HSLE=&STR(321)\n  SET &HSLI=&STR(001)\n  SET &HSLO=&STR(001)\n  SET &HSLU=&STR(001)\n  SET &HSMA=&STR(001)\n  SET &HSME=&STR(001)\n  SET &HSMI=&STR(001)\n  SET &HSMO=&STR(001)\n  SET &HSNA=&STR(001)\n  SET &HSNE=&STR(001)\n  SET &HSNI=&STR(001)\n  SET &HSNO=&STR(001)\n  SET &HSOB=&STR(001)\n  SET &HSOL=&STR(001)\n  SET &HSON=&STR(300)\n  SET &HSOU=&STR(001)\n  SET &HSPA=&STR(001)\n  SET &HSPE=&STR(021)\n  SET &HSPI=&STR(001)\n  SET &HSPL=&STR(001)\n  SET &HSPO=&STR(001)\n  SET &HSPR=&STR(001)\n  SET &HSPU=&STR(001)\n  SET &HSQU=&STR(001)\n  SET &HSTA=&STR(001)\n  SET &HSTE=&STR(301)\n  SET &HSTI=&STR(021)\n  SET &HSTO=&STR(001)\n  SET &HSTR=&STR(001)\n  SET &HSTU=&STR(001)\n  SET &HSTY=&STR(301)\n  SET &HSUA=&STR(001)\n  SET &HSUG=&STR(001)\n  SET &HSUI=&STR(001)\n  SET &HSUP=&STR(001)\n  SET &HSUR=&STR(001)\n  SET &HSWA=&STR(001)\n  SET &HSWE=&STR(001)\n  SET &HSWI=&STR(001)\n  SET &HSWO=&STR(001)\n  SET &HSYN=&STR(001)\n  SET &HSYR=&STR(001)\n  SET &HTAB=&STR(001)\n  SET &HTAC=&STR(021)\n  SET &HTAG=&STR(020)\n  SET &HTAI=&STR(020)\n  SET &HTAK=&STR(020)\n  SET &HTAL=&STR(321)\n  SET &HTAM=&STR(020)\n  SET &HTAN=&STR(020)\n  SET &HTAP=&STR(001)\n  SET &HTAR=&STR(021)\n  SET &HTAS=&STR(001)\n  SET &HTAV=&STR(020)\n  SET &HTCH=&STR(300)\n  SET &HTEA=&STR(021)\n  SET &HTED=&STR(300)\n  SET &HTEL=&STR(300)\n  SET &HTEN=&STR(301)\n  SET &HTEP=&STR(001)\n  SET &HTER=&STR(320)\n  SET &HTES=&STR(320)\n  SET &HTHA=&STR(001)\n  SET &HTHE=&STR(321)\n  SET &HTHI=&STR(021)\n  SET &HTHO=&STR(001)\n  SET &HTHR=&STR(001)\n  SET &HTHU=&STR(001)\n  SET &HTHY=&STR(301)\n  SET &HTIC=&STR(020)\n  SET &HTID=&STR(001)\n  SET &HTIE=&STR(300)\n  SET &HTIG=&STR(001)\n  SET &HTIL=&STR(321)\n  SET &HTIN=&STR(321)\n  SET &HTIO=&STR(300)\n  SET &HTIR=&STR(301)\n  SET &HTOC=&STR(020)\n  SET &HTOI=&STR(020)\n  SET &HTOK=&STR(021)\n  SET &HTOL=&STR(320)\n  SET &HTON=&STR(021)\n  SET &HTOP=&STR(001)\n  SET &HTOR=&STR(021)\n  SET &HTOU=&STR(001)\n  SET &HTOV=&STR(020)\n  SET &HTOW=&STR(001)\n  SET &HTRA=&STR(321)\n  SET &HTRE=&STR(321)\n  SET &HTRI=&STR(021)\n  SET &HTRO=&STR(020)\n  SET &HTRU=&STR(021)\n  SET &HTRY=&STR(300)\n  SET &HTUC=&STR(020)\n  SET &HTUD=&STR(020)\n  SET &HTUL=&STR(001)\n  SET &HTUM=&STR(020)\n  SET &HTUN=&STR(021)\n  SET &HTWA=&STR(001)\n  SET &HTWI=&STR(001)\n  SET &HTYL=&STR(020)\n  SET &HTYR=&STR(300)\n  SET &HUAC=&STR(020)\n  SET &HUAD=&STR(300)\n  SET &HUAI=&STR(020)\n  SET &HUAK=&STR(020)\n  SET &HUAL=&STR(300)\n  SET &HUAR=&STR(020)\n  SET &HUAS=&STR(020)\n  SET &HUAT=&STR(300)\n  SET &HUAV=&STR(020)\n  SET &HUBT=&STR(300)\n  SET &HUCE=&STR(300)\n  SET &HUCH=&STR(300)\n  SET &HUCI=&STR(020)\n  SET &HUCK=&STR(320)\n  SET &HUCY=&STR(300)\n  SET &HUDE=&STR(300)\n  SET &HUDG=&STR(020)\n  SET &HUDI=&STR(020)\n  SET &HUDY=&STR(300)\n  SET &HUEL=&STR(300)\n  SET &HUER=&STR(020)\n  SET &HUES=&STR(020)\n  SET &HUGA=&STR(020)\n  SET &HUGE=&STR(300)\n  SET &HUGH=&STR(320)\n  SET &HUGL=&STR(020)\n  SET &HUIB=&STR(300)\n  SET &HUIC=&STR(020)\n  SET &HUID=&STR(300)\n  SET &HUIE=&STR(020)\n  SET &HUIL=&STR(020)\n  SET &HUIR=&STR(020)\n  SET &HUIS=&STR(020)\n  SET &HUIT=&STR(320)\n  SET &HUKA=&STR(001)\n  SET &HUKE=&STR(300)\n  SET &HULC=&STR(001)\n  SET &HULD=&STR(300)\n  SET &HULG=&STR(020)\n  SET &HULI=&STR(020)\n  SET &HULK=&STR(320)\n  SET &HULS=&STR(020)\n  SET &HULT=&STR(301)\n  SET &HUMA=&STR(020)\n  SET &HUMB=&STR(300)\n  SET &HUMP=&STR(320)\n  SET &HUNA=&STR(020)\n  SET &HUNC=&STR(021)\n  SET &HUND=&STR(301)\n  SET &HUNF=&STR(001)\n  SET &HUNG=&STR(300)\n  SET &HUNI=&STR(021)\n  SET &HUNK=&STR(300)\n  SET &HUNT=&STR(301)\n  SET &HUOI=&STR(020)\n  SET &HUOT=&STR(020)\n  SET &HUPE=&STR(020)\n  SET &HUPS=&STR(001)\n  SET &HURB=&STR(001)\n  SET &HURC=&STR(020)\n  SET &HURE=&STR(320)\n  SET &HURG=&STR(020)\n  SET &HURI=&STR(020)\n  SET &HURK=&STR(020)\n  SET &HURL=&STR(020)\n  SET &HURN=&STR(300)\n  SET &HURP=&STR(300)\n  SET &HURS=&STR(320)\n  SET &HURT=&STR(300)\n  SET &HURV=&STR(020)\n  SET &HUSE=&STR(320)\n  SET &HUSH=&STR(321)\n  SET &HUSI=&STR(020)\n  SET &HUSK=&STR(020)\n  SET &HUST=&STR(320)\n  SET &HUTE=&STR(320)\n  SET &HUTH=&STR(300)\n  SET &HUYE=&STR(020)\n  SET &HUZE=&STR(300)\n  SET &HVAD=&STR(020)\n  SET &HVAG=&STR(001)\n  SET &HVAL=&STR(301)\n  SET &HVAP=&STR(001)\n  SET &HVAU=&STR(001)\n  SET &HVED=&STR(300)\n  SET &HVEL=&STR(300)\n  SET &HVEN=&STR(301)\n  SET &HVER=&STR(320)\n  SET &HVET=&STR(300)\n  SET &HVEX=&STR(001)\n  SET &HVIC=&STR(021)\n  SET &HVIL=&STR(300)\n  SET &HVIO=&STR(301)\n  SET &HVIP=&STR(001)\n  SET &HVIT=&STR(001)\n  SET &HVIX=&STR(001)\n  SET &HVOC=&STR(300)\n  SET &HVOG=&STR(001)\n  SET &HVOI=&STR(020)\n  SET &HVOK=&STR(020)\n  SET &HVOM=&STR(001)\n  SET &HVOR=&STR(020)\n  SET &HVOT=&STR(301)\n  SET &HVOU=&STR(001)\n  SET &HVOW=&STR(001)\n  SET &HVOY=&STR(300)\n  SET &HWAF=&STR(001)\n  SET &HWAG=&STR(001)\n  SET &HWAI=&STR(001)\n  SET &HWAL=&STR(001)\n  SET &HWAM=&STR(020)\n  SET &HWAN=&STR(021)\n  SET &HWAR=&STR(020)\n  SET &HWAS=&STR(001)\n  SET &HWAT=&STR(001)\n  SET &HWAV=&STR(001)\n  SET &HWAX=&STR(001)\n  SET &HWDY=&STR(300)\n  SET &HWEA=&STR(021)\n  SET &HWED=&STR(300)\n  SET &HWEI=&STR(001)\n  SET &HWEL=&STR(300)\n  SET &HWEN=&STR(001)\n  SET &HWER=&STR(300)\n  SET &HWHA=&STR(001)\n  SET &HWHE=&STR(001)\n  SET &HWHI=&STR(001)\n  SET &HWHO=&STR(001)\n  SET &HWIC=&STR(020)\n  SET &HWID=&STR(001)\n  SET &HWIE=&STR(001)\n  SET &HWIF=&STR(020)\n  SET &HWIN=&STR(021)\n  SET &HWIR=&STR(021)\n  SET &HWIT=&STR(001)\n  SET &HWKY=&STR(300)\n  SET &HWNE=&STR(020)\n  SET &HWOM=&STR(001)\n  SET &HWON=&STR(001)\n  SET &HWOR=&STR(021)\n  SET &HWOU=&STR(001)\n  SET &HWRE=&STR(001)\n  SET &HWRI=&STR(001)\n  SET &HWRO=&STR(001)\n  SET &HWRY=&STR(300)\n  SET &HXAC=&STR(020)\n  SET &HXAL=&STR(020)\n  SET &HXED=&STR(300)\n  SET &HXEL=&STR(300)\n  SET &HXEN=&STR(300)\n  SET &HXIL=&STR(020)\n  SET &HXIO=&STR(020)\n  SET &HXIS=&STR(020)\n  SET &HXON=&STR(300)\n  SET &HXTO=&STR(020)\n  SET &HXTR=&STR(020)\n  SET &HXUS=&STR(300)\n  SET &HYAC=&STR(001)\n  SET &HYAL=&STR(300)\n  SET &HYCL=&STR(020)\n  SET &HYEA=&STR(001)\n  SET &HYER=&STR(300)\n  SET &HYIE=&STR(001)\n  SET &HYIN=&STR(020)\n  SET &HYLE=&STR(300)\n  SET &HYLO=&STR(020)\n  SET &HYME=&STR(320)\n  SET &HYMP=&STR(020)\n  SET &HYNC=&STR(020)\n  SET &HYNO=&STR(020)\n  SET &HYOD=&STR(001)\n  SET &HYOK=&STR(001)\n  SET &HYOR=&STR(300)\n  SET &HYOU=&STR(001)\n  SET &HYPT=&STR(300)\n  SET &HYRU=&STR(020)\n  SET &HZEB=&STR(001)\n  SET &HZED=&STR(300)\n  SET &HZEL=&STR(300)\n  SET &HZEN=&STR(300)\n  SET &HZOR=&STR(300)\n  SET &HZUR=&STR(020)\n  SET &DICT0=&STR(SQUIBBLENDAFTERFEASTBLIMPOFTENMEANTBIDET)\n  SET &DICT1=&STR(SQUIBBLENDAFTERFEASTBLIMPOFTENMEANTBIDET)\n  SET &DICT2=&STR(BISONIMBEDGIBEDTACKYSPIKEIRKEDINLAWSLEWN)\n  SET &DICT3=&STR(SHOUTSNORTFIELDRYTHMRHYMESTAREFLAREBLACK)\n  SET &DICT4=&STR(FLUTESINGERIGHTMIGHTOUGHTWATCHHAVENVAPID)\n  SET &DICT5=&STR(WHEATGRATEYIELDSQUIDRAPIDGLARESPOILBLOCK)\n  SET &DICT6=&STR(FLOATSTOKEBIGHTNIGHTLIGHTINEPTRAVENRIPEN)\n  SET &DICT7=&STR(SOLIDGREATWHISTSTOREFLINTFLICKWAVERQUARK)\n  SET &DICT8=&STR(PLANKCRAVESLAVEBRAVEBREADWHIRLTRIPEARISE)\n  SET &DICT9=&STR(FORGESLOPEWIERDWIELDQUESTSHINEREIGNFEIGN)\n  SET &DICT10=&STR(DEIGNPLATESLATEALIGNSHAREEXACTFOUNDSOUND)\n  SET &DICT11=&STR(BRICKSLACKFLACKBINGEWHINEGRAPHPHASELIVER)\n  SET &DICT12=&STR(FORCEPRISMWHILESHUNTMOUNTSTOVESTYLELADEN)\n  SET &DICT13=&STR(KNEADFARCEFALSECLEANINERTSLIMEBLEAKFLAKE)\n  SET &DICT14=&STR(CHESTCHEATCHOIRMATCHBOTCHGROPESTEAMSTORM)\n  SET &DICT15=&STR(TREADSTEADCLOUTAVERTAVOIDABORTVALIDBOUGH)\n  SET &DICT16=&STR(COUGHROUGHDENIMGRAILSNIPEBLANKFIRTHCRUMB)\n  SET &DICT17=&STR(SHARDGRIEFALERTFLIRTSKIRTSCOUTENACTINTER)\n  SET &DICT18=&STR(PRICKSLICKFLUSHBLUSHBASTEHASTEPASTESHORN)\n  SET &DICT19=&STR(SHREDASTIRABLEDWHALEFLINGBRINGCLINGMERIT)\n  SET &DICT20=&STR(PLANTBLUNTBRUNTSTOICGHOULSTEALLIKENSHARP)\n  SET &DICT21=&STR(CLOWNDROWNFROWNCANOEKLEINYODELSTROPSTRAP)\n  SET &DICT22=&STR(STRIPABOUTALONEAGILEARGUEREGALFINALDINER)\n  SET &DICT23=&STR(SLURPDRONEDRIVESTAVECRUELSPLITQUACKMITRE)\n  SET &DICT24=&STR(LINEDASKEDPINEDSMILESLIMECLIMBACUTELARGE)\n  SET &DICT25=&STR(BOUNDROUNDWOUNDHOUNDFLOWNBLOWNHATEDRHYME)\n  SET &DICT26=&STR(PITCHDRAINSLAINCLAIMPLAINPLANESTAINWRITE)\n  SET &DICT27=&STR(WRINGWRONGQUILTPLEADMELONNAMEDHOLEDGLOAT)\n  SET &DICT28=&STR(WRISTDRAWNGROWNPRAWNSTREWSTRAWWAXEDFIXED)\n  SET &DICT29=&STR(SPIESAMUSEPLUMBCRIESWINEDFINEDMUSEDWIRED)\n  SET &DICT30=&STR(TIREDTRIEDFRIEDMINEDCLONETHINKDRINKSLINK)\n  SET &DICT31=&STR(BRINKPLEATEARTHGIRTHDEPTHPROXYEPOXYBOXED)\n  SET &DICT32=&STR(WANEDGLORYLAUGHLAGERCAMELFLOCKTRASHFLASH)\n  SET &DICT33=&STR(BRASHMANICSAVERRABIDCRESTTRENDPROUDALOUD)\n  SET &DICT34=&STR(QUICKFRONTFIENDNEXUSTULIPAPLOTCREAMEXTOL)\n  SET &DICT35=&STR(TABLEFABLESABLEDEMONVOGUEROGUEVAGUEINDEX)\n  SET &DICT36=&STR(THUMBBRUSHBROWNGRIPESCARESNARENOBLELOVER)\n  SET &DICT37=&STR(CHURNCHILDCHIDECHIEFCHARTMARCHPARCHSPANK)\n  SET &DICT38=&STR(FLANKDRANKEXALTCEDARMODELPYLONFLESHIMBUE)\n  SET &DICT39=&STR(BRACEREACHNICHEANGLEIMPELINFERATONESTONE)\n  SET &DICT40=&STR(SLINKFLUNKYOKEDSHAKEAZUREFRAILSHAWLSTUNG)\n  SET &DICT41=&STR(PRISEMUTEDASKEWADEPTSTERNALOFTDRIFTKNARL)\n  SET &DICT42=&STR(KNIFEADEPTLODGEJUDGELODGERIDGENUDGEROUSE)\n  SET &DICT43=&STR(ARSONAMPLEANGELANGRYANODEAMUCKANGLEANKLE)\n  SET &DICT44=&STR(AMONGAMBERSYNODAGONYAGENTAISLEALOFTASPEN)\n  SET &DICT45=&STR(ALTERALIVEAUDITALIKEADMITADULTACRIDALIEN)\n  SET &DICT46=&STR(BELOWBEACHBENCHBLADEBEASTBADGEBEARDBIPED)\n  SET &DICT47=&STR(BAKERBANDYBASTEBELCHBARGEBATHEBIGOTBAWDY)\n  SET &DICT48=&STR(BEINGBIRCHBEGINBITCHBERTHBIRTHBUYERBUNCH)\n  SET &DICT49=&STR(BURLYBURSTBULGEBUGLEBUDGEBULKYBRUTEBRINE)\n  SET &DICT50=&STR(BRIEFBROTHBROILBRANDBRAWLBRAWNBROTHBREAK)\n  SET &DICT51=&STR(BRISKBRAKEBRAINBONUSBREAMBOARDBLUSHBOAST)\n  SET &DICT52=&STR(VIOLABLAMEBLEAKPEALSBLEATBLANDBLANKBLIND)\n  SET &DICT53=&STR(BLAZEBLOCKCABLECARVECAROLCASTECRYPTCARGO)\n  SET &DICT54=&STR(CANDYCAPERCAPONCAUSECATERCAULKCABINCAMEO)\n  SET &DICT55=&STR(CHOMPCEDARCHAFECHAIRCHAINCHALKCHASMCHART)\n  SET &DICT56=&STR(CHAOSCHARMCHEAPCHEATCHARTCHIMECHINACHORD)\n  SET &DICT57=&STR(CHIRPCHUNKCIDERCIGARCLERKCLOAKCLANKCLING)\n  SET &DICT58=&STR(CORPSCLAMPCLASPCLEFTCOWERCOMETCRASHCLOTH)\n  SET &DICT59=&STR(CLOUTCLOUDSUAVECLOSEKNAVECADETCRAPECRANE)\n  SET &DICT60=&STR(HYMENCRAFTCOUNTCOUGHCOURTCRISPCRAVECRAWL)\n  SET &DICT61=&STR(CRAZECRAZYCREAKCREAMCRESTCRIMECRUELCRUMB)\n  SET &DICT62=&STR(CROAKCURSECURVEGNOMECRUSHCRUSTDAIRYDAISY)\n  SET &DICT63=&STR(DOUBTDOWRYDOZENDRAFTDRAINDRAKEDRAWLDREAM)\n  SET &DICT64=&STR(DRIFTDRINKDRIVEDELAYDECRYDECOYDAILYDEBAR)\n  SET &DICT65=&STR(DITCHDEPTHDEVILDIRTYDIARYDEATHDECAYDINGY)\n  SET &DICT66=&STR(DEBITDEMONDEIGNDEPOTDRONEDROVEDROWNDRUNK)\n  SET &DICT67=&STR(DWARFEXTRAEXISTEXISTEVICTCHASMEARLYEBONY)\n  SET &DICT68=&STR(EDIFYEIGHTOGLEDELBOWDOTESNOMADSTANDEMPTY)\n  SET &DICT69=&STR(ENDOWENJOYENROLENTRYEQUALENVOYEPOCHFUSTY)\n  SET &DICT70=&STR(FRUITFROWNFROCKFROTHFRAILFRAUDFRANKRYTHM)\n  SET &DICT71=&STR(FREAKFORTHFORTYFRISKFORCEFORGEFOUNDFLUKE)\n  SET &DICT72=&STR(FLUIDFOCUSFOISTFLAMEFRAMEFLUTEFOCALFAULT)\n  SET &DICT73=&STR(FARCEFLESHFLASKFEIGNFEINTFETCHFANCYFAINT)\n  SET &DICT74=&STR(FAIRYFAITHFALSEFIGHTFILTHFLOUTFIBREFIERY)\n  SET &DICT75=&STR(FILCHFINCHFINALFLOURFLIRTFLOATFIRSTFLAKY)\n  SET &DICT76=&STR(FLAKEFLAMEFLOCKFLINTFLINGGUILEGUILDGUEST)\n  SET &DICT77=&STR(GRIMEGRAVYGRAZEGRASPGRAPEGRANTGRATEGRAVE)\n  SET &DICT78=&STR(GABLEGLADEGLANDGLOATGUISEGUARDGROWLGROAN)\n  SET &DICT79=&STR(GRAINGRAFTSYRUPGNASHGHOSTGAILYGAUDYSUGAR)\n  SET &DICT80=&STR(GLINTGLEAMGLOBEGRUELGRIEFGROINGROUPGROPE)\n  SET &DICT81=&STR(GRANDDOUGHDOTEDGRADEGIANTGIPSYGIRTHGENUS)\n  SET &DICT82=&STR(GAUZEGAUNTGAWKYGLIDEGLOVEGLORYHONEYHORSE)\n  SET &DICT83=&STR(HOTELHOUSEHOVELHOVERHOISTHOARDRHYMEHEAVY)\n  SET &DICT84=&STR(HINGEHEADYHEARTHAZELHAVENHOUNDHUMANSTAVE)\n  SET &DICT85=&STR(HABITHAVOCHALVEHANDYHAUNTCREPTHASTESLEPT)\n  SET &DICT86=&STR(INGOTIDEALINLETIRONYIMPLYINTERISLETINFER)\n  SET &DICT87=&STR(INCURINDEXINUREIVORYINERTJAUNTJOINTJUDGE)\n  SET &DICT88=&STR(JUICYJUICELYNCHKNOTSGRIPESTORELARGELATHE)\n  SET &DICT89=&STR(LAUGHLAYERLEARNLEASTLEASHLEMONREGALLIGHT)\n  SET &DICT90=&STR(LINEDLINERLIVERLODGELOGICLOSERLOUSELUCID)\n  SET &DICT91=&STR(ROYALLUCKYLUNARLUNCHLURCHLURIDLYNCHMAGIC)\n  SET &DICT92=&STR(MAIZEMALTYMARCHMAYORMIGHTMINORMODELMONTH)\n  SET &DICT93=&STR(MOULTMAPLEMANORMARSHMEDALMINCEMIRTHMOIST)\n  SET &DICT94=&STR(MORALMOUTHMOURNMUSICMASONMERCYMISERMONEY)\n  SET &DICT95=&STR(MOULDMOUSEMUNCHMIDGEMIDSTMISTYMURKYDUNCE)\n  SET &DICT96=&STR(NAKEDNAIVENASTYNAVELNEIGHNEGRONIGHTNOBLE)\n  SET &DICT97=&STR(NOISENOISYNORTHNOTCHNOVELNUDGENURSEOCEAN)\n  SET &DICT98=&STR(OCHREOPERAORBITORGANOTHEROUNCEOWINGOWNER)\n  SET &DICT99=&STR(PRICKPRICEPRIDEPRIMEPRIZEPROBEPRONEPRONG)\n  SET &DICT100=&STR(PROSEPROUDPROVEPROWLPRUDEPROXYPSALMPULSE)\n  SET &DICT101=&STR(PUNCHPURGEPURSEPRINTPRISMPRAWNPRANKPOUND)\n  SET &DICT102=&STR(PORCHPOACHPOISEPLUCKPLUSHPLEADPLUMBPOINT)\n  SET &DICT103=&STR(PLEATPAINTPOWERPENALPENISPLANEPLANKPLANT)\n  SET &DICT104=&STR(PATIOPANELPANICPARSEPARTYPATCHPAUSEPEACH)\n  SET &DICT105=&STR(PEARLPEDALPERILPILOTPINCHPLACEPHASEPIANO)\n  SET &DICT106=&STR(PILESPIETYPIOUSPITCHPIVOTPLAINQUACKQUAIL)\n  SET &DICT107=&STR(QUAKEQUARTQUASHQUERYQUESTQUIETQUICKQUILT)\n  SET &DICT108=&STR(QUIREQUITEQUOITQUOTEROUGEROUGHROUNDROUSE)\n  SET &DICT109=&STR(ROUTEROYALRADIORANGERAPIDRATIORAVENRAZED)\n  SET &DICT110=&STR(REACHREACTREALMREADYOCCURRELAXRELAYRELIC)\n  SET &DICT111=&STR(REMITRESINRIDGERIGHTRIFLERIVALRIVETFIVER)\n  SET &DICT112=&STR(ROASTROBINROGUESHELFSHINESHIRESHIRKSHIRT)\n  SET &DICT113=&STR(SHOALSHOCKSHORNSHORTSHORESHOVESHOUTSHREW)\n  SET &DICT114=&STR(SHRUBSHRUGSHUNTSIGHTSINEWSIRENSINCESKATE)\n  SET &DICT115=&STR(SKEINSKIRTSLACKSLANGSLANTSLATESLAVESLICE)\n  SET &DICT116=&STR(SLIDESLINGSLINKSLOPESLOTHSLIMESLIMYSCOUT)\n  SET &DICT117=&STR(SCOURSCORNSCORESCOLDSCOPESCIONSCENTSCOWL)\n  SET &DICT118=&STR(SCRAPSCREWSCRIPSCRUBSCARFSERUMSHADESHADY)\n  SET &DICT119=&STR(SAINTSATINSATYRSAUCYSAUCESCALDSCALESCALP)\n  SET &DICT120=&STR(SCAMPSCARESCARFSHAFTSHAKESHAMESHAPESHARE)\n  SET &DICT121=&STR(SHARKSHARPSHAVESHAWLSHEAFSHEARSHOVESTEAK)\n  SET &DICT122=&STR(STEALSTICKSTILESTINGSTINKSTOCKSTOKESTONE)\n  SET &DICT123=&STR(STORESTORYSTORKSTORMSPOILSPORTSPRATSPRAY)\n  SET &DICT124=&STR(SPRIGSPURNSQUADSQUATSQUIDSTACKSTAGESTAID)\n  SET &DICT125=&STR(STAINSTAIRSTAKESTALESTALKSTAMPSTANDSTARE)\n  SET &DICT126=&STR(STAVESTEADSPAWNSPEAKSPEARSPENDSPICESPINE)\n  SET &DICT127=&STR(SPIRESPITESNARLSNEAKSNIPESNORESNORTSNOUT)\n  SET &DICT128=&STR(SOBERSOLIDSOLVESOUNDSOUTHSPACESPADESPORE)\n  SET &DICT129=&STR(SPARKSLUMPSMARTSMEARSMELTSMILESMITESMITH)\n  SET &DICT130=&STR(SMOKESMOKYSNACKSNAILSNAKESNARESTRAPSTRAW)\n  SET &DICT131=&STR(STRAYSTREWSTRIPSTROPSTUDYSTUMPSTYLESUGAR)\n  SET &DICT132=&STR(SUITESUPERSWARMSURGESURLYSWEARSWEATSWIFT)\n  SET &DICT133=&STR(SWAMPSWINGSWINESYRUPSWORNSWORDTRADETRACE)\n  SET &DICT134=&STR(TRACKTOWELTOWERTOUCHTOUGHTRAINTRAMPTRASH)\n  SET &DICT135=&STR(TRAILTONGSTINGETOKENTONICTOPICTORCHTIDAL)\n  SET &DICT136=&STR(TIGERBIGHTTHINGTHINKTHIRDTHONGTHORNTHOSE)\n  SET &DICT137=&STR(THROBTHUMBTHROWTHUMPTHIEFTREADTRIALTREND)\n  SET &DICT138=&STR(TRIBETRICKTRIPETRICETRUCETUNICTWANGTWICE)\n  SET &DICT139=&STR(TWIRLTWIRETARDYTEACHTENORTEPIDTHANKCLEFT)\n  SET &DICT140=&STR(THEIRTHICKTRUCKTRUNKTULIPTABLETALONTAPER)\n  SET &DICT141=&STR(ULTRAULCERUNCLEUNDERUNFITUNITYUNITEUNTIE)\n  SET &DICT142=&STR(UNTILUPSETUSHERURBANVOWELVOTERVOMITVITAL)\n  SET &DICT143=&STR(VIPERVOGUEVICARVENOMVALIDVALETVAULTVAGUE)\n  SET &DICT144=&STR(WONKYVIXENWAXEDVOUCHBOXEDPIXELWAISTWAGES)\n  SET &DICT145=&STR(WAFERWATERWAIVEWALTZWASTEWATCHWAVERWEARY)\n  SET &DICT146=&STR(WEIGHWEIRDNEIGHDOUGHWIELDWINCHWINCEWIDTH)\n  SET &DICT147=&STR(ENDOWWHOSEWHOREWHOLEWHITEWHISKWHINEWHILE)\n  SET &DICT148=&STR(WHEATWHARFWHALEWHACKWENCHWORTHWOUNDWOULD)\n  SET &DICT149=&STR(WORSTWORSEWORKSWORLDWOMANWITCHWRECKWRING)\n  SET &DICT150=&STR(WROTHWRITEWRONGYACHTYEARNYEASTYOKELYOUNG)\n  SET &DICT151=&STR(YOUTHYOURSZEBRARILEDPALEDASHENLIKENLUPEN)\n  SET &DICT152=&STR(TIREDBOREDCAREDBAREDSIREDHIREDHOLEDSOLED)\n  SET &DICT153=&STR(CAKEDBAKEDMAKERFILEDTILERTILEDFILERSPATE)\n  SET &DICT154=&STR(FINERPOKEDPOKERHIKEDHIKERFELONPLAITCAPED)\n  SET &DICT155=&STR(ETHICLANCEFAREDFLIESLUREDHONEDSALTYJANUS)\n  SET &DICT156=&STR(SAXONPYLONJOKEDSAWEDLAGERPAWEDMUTEDMATED)\n  SET &DICT157=&STR(UNDERSYRUPYACHTPITHYRHYMETHYMECHASMPRISM)\n  SET &DICT158=&STR(STYLEOCHREVIXENVENOMSUGARDEALTPILEDPHONE)\n  SET &DICT159=&STR(ETHICLANCEFAREDFLIESLUREDHONEDSALTYJANUS)\n  SET &DICT160=&STR(LUMPYCRIMPGRIMYAXIOMABHORSTUCKRUSTYPUSHY)\n  SET &DICT161=&STR(DANCEHORNYBROADSTRUMSHOWNLOATHMOWERDYING)\n  SET &DICT162=&STR(SHEWNRAISEFLIERHUSKYNADIRLYINGANVILAXIOM)\n  SET &DICT163=&STR(FORUMONSETOAKENSTOLESOLARLEMURUKASEABUSE)\n  SET &DICT164=&STR(SABRETRIADSEPALLAPSEEDICTMITREOAKUMTAPIR)\n  SET &DICX=1312\n  ERROR DO\n    EXIT\n    END\n  SET &MASTER=SYSPAJA\n  SET &WELC=0\n  SET &NN=&SYSUID\n  SET &NAME=&NN\nWELCOME:+\n  ERASE\n  WRITE GREETINGS &NAME - ENTER 'HELP' AT ANY TIME FOR INFORMATION\nRESET:+\n  ERROR OFF\n  SET &FLAG=NOWORD\n  SET &ZZ1=0\n  SET &CNT2=1\n  SET &LCNT=0\n  SET &GCNT=0\n  SET &QLOG1=&STR()\n  SET &HIST1=&STR(>)\n  SET &RECORD=&STR(ON )\n  ERROR DO\n    IF &LASTCC EQ 904 OR &LASTCC EQ 932 THEN DO\n      IF &ZZ1 EQ 3 THEN SET &H&UU3=&STR(000)\n      ELSE IF &ZZ1 EQ 2 THEN SET &H&UU2=&STR(000)\n      ELSE IF &ZZ1 EQ 1 THEN SET &H&UU1=&STR(000)\n      ELSE IF &ZZ1 EQ 0 THEN GOTO OTHER\n      GOTO SCOOP&ZZ1\n      END\nOTHER:+\n    SET &LCNT=&LCNT+1\n    SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID ERROR &LASTCC)\n    WRITENR ERROR LASTCC IS &LASTCC - CONTINUE?\n    READ ANSWER\n    IF &ANSWER EQ Y OR &ANSWER EQ YES THEN RETURN\n    GOTO AM9\n    END\n  SET &X=&SUBSTR(4:5,&SYSTIME)\n  SET &Y=&SUBSTR(7:8,&SYSTIME)\n  SET &Z=(60*&Y)+&X\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID START)\n  SET &SCORE=0\n  SET &SCARE=0\n  SET &SCYRE=0\n  SET &SC=0\nBACK:+\n  SET &ZQA=&STR(A)\n  SET &ZQB=&STR(B)\n  SET &ZQC=&STR(C)\n  SET &ZQD=&STR(D)\n  SET &ZQE=&STR(E)\n  SET &ZQF=&STR(F)\n  SET &ZQG=&STR(G)\n  SET &ZQH=&STR(H)\n  SET &ZQI=&STR(I)\n  SET &ZQJ=&STR(J)\n  SET &ZQK=&STR(K)\n  SET &ZQL=&STR(L)\n  SET &ZQM=&STR(M)\n  SET &ZQN=&STR(N)\n  SET &ZQO=&STR(O)\n  SET &ZQP=&STR(P)\n  SET &ZQQ=&STR(Q)\n  SET &ZQR=&STR(R)\n  SET &ZQS=&STR(S)\n  SET &ZQT=&STR(T)\n  SET &ZQU=&STR(U)\n  SET &ZQV=&STR(V)\n  SET &ZQW=&STR(W)\n  SET &ZQX=&STR(X)\n  SET &ZQY=&STR(Y)\n  SET &ZQZ=&STR(Z)\n  SET &A=&Z//&DICX\n  SET &B=(&A//8)*5+1\n  SET &C=&A/8\n  SET &NN=&&DICT&C\n  SET &E=&SUBSTR(&B:&B+4,&NN)\n  SET &A1 EQ &SUBSTR(1:1,&E)\n  SET &A2 EQ &SUBSTR(2:2,&E)\n  SET &A3 EQ &SUBSTR(3:3,&E)\n  SET &A4 EQ &SUBSTR(4:4,&E)\n  SET &A5 EQ &SUBSTR(5:5,&E)\n  SET &LL=1\n  SET &MM1=&STR(>)\n  SET &GCN2=0\n  SET &RRRR=&SCARE/3-&GCNT+1\n  SET &QLOG1=&STR( HINTS AVAILABLE: &RRRR)\nXXXXX:+\n  IF &WELC EQ 1 THEN DO\n    ERASE\n    IF &SCARE GT 0 AND &RRRR GT 0 THEN WRITE &QLOG1\n    END\n  ELSE SET &WELC=1\nXXXXY:+\n  WRITENR                            ?\nXXXXZ:+\n  READ WORD OPT\n  SET &CNT1=0\nLOOP2:+\n  IF &NAME EQ &MASTER THEN DO\n    IF &WORD EQ TRACE AND &OPT NE THEN DO\n      IF &OPT EQ ON THEN CONTROL CONLIST SYMLIST LIST NOFLUSH\n      ELSE IF &OPT EQ OFF +\n        THEN CONTROL NOCONLIST NOSYMLIST NOLIST NOFLUSH\n      SET &LCNT=&LCNT+1\n      SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD &OPT)\n      IF &OPT EQ ON THEN GOTO XXXXX\n      ELSE GOTO HISTORY\n      END\n    ELSE IF &WORD EQ RECORD THEN DO\n      IF &OPT EQ ON THEN SET &RECORD=&STR(ON )\n      ELSE IF &OPT EQ OFF THEN SET &RECORD=&STR(OFF)\n      WRITENR RECORDING IS &STR(&RECORD)           ?\n      GOTO XXXXZ\n      END\n    ELSE IF &WORD EQ EXIT THEN DO\n      ERASE\n      EXIT\n      END\n    END\n  SET &CNT1=0\n  IF &WORD EQ HELP THEN GOTO HELP\n  ELSE IF &WORD EQ HISTORY THEN GOTO HISTORY\n  ELSE IF &WORD EQ HINT THEN GOTO GINT\n  ELSE IF &WORD EQ ALPHA THEN GOTO ALPHA\n  ELSE IF &WORD EQ RESIGN THEN DO\n    IF &OPT NE THEN SET &SCORE=&OPT\n    ELSE SET &SCORE=20\n    SET &LCNT=&LCNT+1\n    SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD &OPT)\n    GOTO OUT2\n    END\n  ELSE IF &WORD EQ REVIEW THEN GOTO OUT3\n  ELSE IF &WORD EQ CANCEL THEN DO\n    SET &LCNT=&LCNT+1\n    SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD &E)\n    WRITE AS YOU WISH &NAME - THE WORD WAS &E.\n    WRITENR ***\n    READ\n    GOTO FIN\n    END\n  ELSE IF &WORD EQ RESET THEN DO\n    SET &LCNT=&LCNT+1\n    SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID RESET &E)\n    WRITE AS YOU WISH &NAME - THE WORD WAS &E.\n    WRITENR ***\n    READ\n    SET &E=RESET\n    IF &STR(&RECORD) EQ OFF OR &NAME EQ &MASTER THEN GOTO RESET\n    ELSE GOTO AL9\n    END\n  ELSE IF &WORD EQ &E THEN DO\n    SET &SCORE=&SCORE+1\n    GOTO OUT\n    END\nTEST:+\n  IF &LENGTH(&WORD) NE 5 THEN GOTO ASKBAD\n  SET &UU1=&SUBSTR(1:3,&WORD)\n  SET &UU2=&SUBSTR(2:4,&WORD)\n  SET &UU3=&SUBSTR(3:5,&WORD)\n  SET &X1=&&H&UU1\n  SET &X2=&&H&UU2\n  SET &X3=&&H&UU3\n  SET &ZZ1=1\nSCOOP1:+\n  SET &X1=&SUBSTR(3:3,&X1)\n  SET &ZZ1=2\nSCOOP2:+\n  SET &X2=&SUBSTR(2:2,&X2)\n  SET &ZZ1=3\nSCOOP3:+\n  SET &X3=&SUBSTR(1:1,&X3)\n  SET &ZZ1=0\n  IF &X1 EQ 0 OR &X2 EQ 0 OR &X3 EQ 0 THEN GOTO ASKBAD\n  SET &B1 EQ &SUBSTR(1:1,&WORD)\n  SET &B2 EQ &SUBSTR(2:2,&WORD)\n  SET &B3 EQ &SUBSTR(3:3,&WORD)\n  SET &B4 EQ &SUBSTR(4:4,&WORD)\n  SET &B5 EQ &SUBSTR(5:5,&WORD)\n  SET &ZQ&B1=&STR(.)\n  SET &ZQ&B2=&STR(.)\n  SET &ZQ&B3=&STR(.)\n  SET &ZQ&B4=&STR(.)\n  SET &ZQ&B5=&STR(.)\n  IF &B1 EQ &B2 OR &B1 EQ &B3 OR &B1 EQ &B4 OR &B1 EQ &B5 +\n    OR &B2 EQ &B3 OR &B2 EQ &B4 OR &B2 EQ &B5 OR &B3 EQ &B4 +\n    OR &B3 EQ &B5 OR &B4 EQ &B5 THEN GOTO ASKBAD\n  SET &SCORE=&SCORE+1\n  IF &B1 EQ &A1 OR &B1 EQ &A2 OR &B1 EQ &A3 OR &B1 EQ &A4 -\n    OR &B1 EQ &A5 THEN SET &CNT1=&CNT1+1\n  IF &B2 EQ &A1 OR &B2 EQ &A2 OR &B2 EQ &A3 OR &B2 EQ &A4 -\n    OR &B2 EQ &A5 THEN SET &CNT1=&CNT1+1\n  IF &B3 EQ &A1 OR &B3 EQ &A2 OR &B3 EQ &A3 OR &B3 EQ &A4 -\n    OR &B3 EQ &A5 THEN SET &CNT1=&CNT1+1\n  IF &B4 EQ &A1 OR &B4 EQ &A2 OR &B4 EQ &A3 OR &B4 EQ &A4 -\n    OR &B4 EQ &A5 THEN SET &CNT1=&CNT1+1\n  IF &B5 EQ &A1 OR &B5 EQ &A2 OR &B5 EQ &A3 OR &B5 EQ &A4 -\n    OR &B5 EQ &A5 THEN SET &CNT1=&CNT1+1\n  SET &NN=&&MM&LL\n  SET &MM&LL=&NN&STR( )&WORD&STR( )&CNT1\n  IF &LENGTH(&NN) GT 60 THEN DO\n    SET &LL=&LL+1\n    SET &MM&LL=&STR(>)\n    END\n  IF &SCORE EQ 20 THEN GOTO OUT2\n  WRITENR &WORD &CNT1                    ?\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD &CNT1)\n  READ WORD OPT\n  GOTO LOOP2\nALPHA:+\n  SET &ZQ=&STR(&ZQA&ZQB&ZQC&ZQD&ZQE&ZQF&ZQG&ZQH&ZQI&ZQJ&ZQK&ZQL+\n    &ZQM&ZQN&ZQO&ZQP&ZQQ&ZQR&ZQS&ZQT&ZQU&ZQV&ZQW&ZQX&ZQY&ZQZ)\n  IF &STR(&ZQ) EQ &STR(ABCDEFGHIJKLMNOPQRSTUVWXYZ) THEN +\n    WRITENR NO LETTERS USED YET!       ?\n  ELSE IF &STR(&ZQ) EQ &STR(..........................) THEN +\n    WRITENR ALL LETTERS USED!          ?\n  ELSE DO\n    WRITENR &ZQ ?\n    END\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD)\n  READ WORD OPT\n  GOTO LOOP2\nGINT:+\n  IF &GCNT GT &SCARE/3 OR &SCARE EQ 0 THEN +\n    WRITENR NO HINTS AVAILABLE         ?\n  ELSE IF &GCN2  EQ 5 THEN +\n    WRITENR YOU HAVE ALL THE LETTERS!! ?\n  ELSE DO\n    IF &GCN2=0 THEN +\n      WRITENR &A1 IS THE FIRST LETTER      ?\n    ELSE IF &GCN2=1 THEN +\n      WRITENR &A2 IS THE SECOND LETTER     ?\n    ELSE IF &GCN2=2 THEN +\n      WRITENR &A3 IS THE THIRD  LETTER     ?\n    ELSE IF &GCN2=3 THEN +\n      WRITENR &A4 IS THE FOURTH LETTER     ?\n    ELSE IF &GCN2=4 THEN +\n      WRITENR &A5 IS THE FIFTH  LETTER     ?\n    SET &GCNT=&GCNT+1\n    SET &GCN2=&GCN2+1\n    SET &RRRR=&SCARE/3-&GCNT+1\n    SET &QLOG1=&STR( HINTS AVAILABLE: &RRRR)\n    SET &RRRS=&SUBSTR(1:&GCN2,&E)\n    SET &WORD=&STR(HINT GRANTED N:&GCN2 T:&GCNT W:&RRRS)\n    SET &QLOG2=&STR( FIRST &GCN2 LETTERS OF THE WORD: &RRRS)\n    END\n  GOTO OUT3C\nHISTORY:+\n  ERASE\nHISTORX:+\n  SET &QQ=1\n  DO WHILE &QQ LE &CNT2\n    SET &NN=&&HIST&QQ\n    IF &LENGTH(&NN) GT 2 THEN WRITE &SUBSTR(2:&LENGTH(&NN),&NN)\n    SET &QQ=&QQ+1\n    END\n  GOTO OUT3B\nOUT3:+\n  ERASE\nOUT3B:+\n  SET &QQ=1\n  DO WHILE &QQ LE &LL\n    SET &NN=&&MM&QQ\n    IF &LENGTH(&NN) GT 2 THEN WRITE &SUBSTR(2:&LENGTH(&NN),&NN)\n    SET &QQ=&QQ+1\n    END\n  IF &SCARE GT 0 AND &RRRR GT 0 THEN WRITE &QLOG1\n  IF &GCN2 GT 0 THEN WRITE &QLOG2\n  IF &NAME EQ &MASTER THEN WRITE RECORDING IS &STR(&RECORD)\nASK:+\n  WRITENR                            ?\nOUT3C:+\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &WORD)\n  READ WORD OPT\n  GOTO LOOP2\nASKBAD:+\n  WRITENR PREVIOUS INPUT IGNORED     ?\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID INVALID &WORD)\n  READ WORD OPT\n  GOTO LOOP2\nHELP:+\n  ERASE\n  WRITE THE OBJECT OF THE GAME IS TO GUESS A FIVE LETTER WORD WHICH HAS\n  WRITE BEEN CHOSEN BY THE PROGRAM. YOU ARE GIVEN TWENTY GUESSES. YOU\n  WRITE WILL BE TOLD HOW MANY LETTERS OF YOUR WORD EXIST IN THE TARGET\nWRITE WORD FOR EACH GUESS. ALL WORDS USED IN THIS GAME MUST NOT CONTAIN\n  WRITE ANY REPEATED LETTERS AND MUST BE EXACTLY FIVE LETTERS LONG.\n  WRITE   COMMANDS :\n  WRITE     RESIGN    - GIVES YOU THE MYSTERY WORD AND MINIMUM SCORE\n  WRITE     REVIEW    - GIVES YOU A SUMMARY OF THE CURRENT ROUND\n  WRITE     HISTORY   - GIVES YOU A HISTORY OF THIS GROUP OF ROUNDS\n  WRITE                     PLUS A SUMMARY AS ABOVE\n  WRITE     HINT      - MAY BE USED AN AVERAGE OF ONCE PER THREE ROUNDS\n  WRITE                     TO GET ANOTHER LETTER OF A DIFFICULT WORD\n  WRITE     RESET     - TO CLEAN THE SLATE AND START SCORING AFRESH\n  WRITE     ALPHA     - SHOWS WHICH LETTERS YOU HAVE NOT USED\n  WRITE     CANCEL    - RESIGN FROM GAME AT POSITION OF PREVIOUS ROUND\n  IF &NAME EQ &MASTER THEN DO\n    WRITE     TRACE  ON,OFF - SETS THE CLIST TRACE OPTIONS ON OR OFF\n    WRITE     RECORD ON,OFF - SETS THE LOGGING FLAG ON OR OFF\n    WRITE     EXIT          - EMERGENCY EXIT\n    END\n  WRITE THE LOG IS IN DATA-SET : &SYSUID..JOTTO.DATA (AT YOUR DISPOSAL)\n  WRITENR ***\n  READ\n  ERASE\n  GOTO ASK\nOUT2:+\n  WRITE &E &A\n  WRITE BAD SHOW &NAME!\n  GOTO OVERX\nOUT:+\n  WRITE &E &A\n  WRITE WELL DONE &NAME!\nOVERX:+\n  SET &SCARE=&SCARE+1\n  IF &SCORE GT 20 THEN SET &SCORE=20\n  IF &SCORE LT 1 THEN SET &SCORE=1\n  SET &SCYRE=&SCYRE+&SCORE\n  SET &SCIRE=&SCYRE/&SCARE\n  SET &SCERE=(20-&SCIRE)/2+&SCARE+1\n  SET &SC=(&SCERE*(1000-((&SCIRE**3)/8)))/(&SCERE+1)\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID &E &SC &SCORE)\n  WRITE YOUR CUMULATIVE SCORE IS &SC\n  WRITENR ANOTHER ROUND?\n  READ Z\n  IF &Z EQ &STR(NO) OR &Z EQ &STR(N) THEN GOTO FIN\n  WRITENR ***\n  SET &NN=&&HIST&CNT2\n  SET &HIST&CNT2=&NN&STR( )&E&STR( )&SC&STR( )&SCORE\n  IF &LENGTH(&NN) GT 60 THEN DO\n    SET &CNT2=&CNT2+1\n    SET &HIST&CNT2=&STR(>)\n    END\n  READ\n  SET &X=&SUBSTR(4:5,&SYSTIME)\n  SET &Y=&SUBSTR(7:8,&SYSTIME)\n  SET &Z=&Y&X\n  SET &SCORE=0\n  GOTO BACK\nFIN:+\n  SET  &IX1=&STR(         )\n  SET  &IX2=&STR(         )\n  SET  &IX3=&STR(         )\n  SET  &IX4=&STR(         )\n  SET  &IX5=&STR(         )\n  SET  &IX6=&STR(         )\n  SET  &IX7=&STR(         )\n  SET  &IX8=&STR(         )\n  SET  &IX9=&STR(         )\n  SET &IX10=&STR(         )\n  SET &IX11=&STR(         )\n  SET &IX12=&STR(         )\n  SET &IX13=&STR(         )\n  SET &IX14=&STR(         )\n  IF &SC>922 THEN DO\n    SET &CL=&STR(JOTTOMEISTER)\n    SET &IX1=&STR(  ------>)\n    END\n  ELSE IF &SC>907 THEN DO\n    SET &CL=&STR(GRAND MASTER)\n    SET &IX2=&STR(  ------>)\n    END\n  ELSE IF &SC>893 THEN DO\n    SET &CL=&STR(DOYENNE)\n    SET &IX3=&STR(  ------>)\n    END\n  ELSE IF &SC>864 THEN DO\n    SET &CL=&STR(MASTER)\n    SET &IX4=&STR(  ------>)\n    END\n  ELSE IF &SC>836 THEN DO\n    SET &CL=&STR(PROFESSIONAL)\n    SET &IX5=&STR(  ------>)\n    END\n  ELSE IF &SC>816 THEN DO\n    SET &CL=&STR(EXPERT)\n    SET &IX6=&STR(  ------>)\n    END\n  ELSE IF &SC>789 THEN DO\n    SET &CL=&STR(ARTISAN)\n    SET &IX7=&STR(  ------>)\n    END\n  ELSE IF &SC>759 THEN DO\n    SET &CL=&STR(DILETTANTE)\n    SET &IX8=&STR(  ------>)\n    END\n  ELSE IF &SC>719 THEN DO\n    SET &CL=&STR(AMATEUR)\n    SET &IX9=&STR(  ------>)\n    END\n  ELSE IF &SC>639 THEN DO\n    SET &CL=&STR(APPRENTICE)\n    SET &IX10=&STR(  ------>)\n    END\n  ELSE IF &SC>569 THEN DO\n    SET &CL=&STR(ASPIRANT)\n    SET &IX11=&STR(  ------>)\n    END\n  ELSE IF &SC>419 THEN DO\n    SET &CL=&STR(NOVICE)\n    SET &IX12=&STR(  ------>)\n    END\n  ELSE IF &SC>269 THEN DO\n    SET &CL=&STR(FLEDGLING)\n    SET &IX13=&STR(  ------>)\n    END\n  ELSE DO\n    SET &CL=&STR(COMPLETE BEGINNER)\n    SET &IX14=&STR(  ------>)\n    END\n  ERASE\n  WRITE WELL &NAME, WITH A SCORE OF &SC YOU ATTAINED THE RANK OF &CL\n  WRITE           *** RANK ***      >>SCORE RANGE<<\n  WRITE &IX1 JOTTOMEISTER         923 TO 999\n  WRITE &IX2 GRAND MASTER         908 TO 922\n  WRITE &IX3 DOYENNE              894 TO 907\n  WRITE &IX4 MASTER               865 TO 893\n  WRITE &IX5 PROFESSIONAL         837 TO 864\n  WRITE &IX6 EXPERT               817 TO 836\n  WRITE &IX7 ARTISAN              790 TO 816\n  WRITE &IX8 DILETTANTE           760 TO 789\n  WRITE &IX9 AMATEUR              720 TO 759\n  WRITE &IX10 APPRENTICE           640 TO 719\n  WRITE &IX11 ASPIRANT             570 TO 639\n  WRITE &IX12 NOVICE               420 TO 569\n  WRITE &IX13 FLEDGLING            270 TO 419\n  WRITE &IX14 COMPLETE BEGINNER      0 TO 269\n  SET &LCNT=&LCNT+1\n  SET &LOG&LCNT=&STR(&SYSDATE &SYSTIME &SYSUID RANK ATTAINED &CL &SC)\n  ERROR OFF\nAM9:+\n  IF &STR(&RECORD) EQ OFF THEN GOTO FR9\nAL9:+\n  ALLOC F(JLOG) DA(JOTTO.DATA) MOD REUS\n  IF &LASTCC EQ 0 THEN GOTO CLS\n  WRITE SOMEONE ELSE HAS THE LOG DATA-SET. DO YOU WISH TO\n  WRITENR TRY AGAIN OR NOT? ENTER YES OR NO >\n  READ ANSWER\n  IF &ANSWER NE NO AND &ANSWER NE N THEN GOTO AL9\n  GOTO FR9\nCLS:+\n  ERROR DO\n    SET &LUG=&STR(&SYSDATE &SYSTIME &SYSUID +\n    LOG WRITE ERROR LASTCC &LASTCC INDEX &LCNTX OF &LCNT)\n    SET &JLOG=&STR(&LUG)\n    RETURN\n    END\n  OPENFILE JLOG OUTPUT\n  SET &LCNTX=1\n  DO WHILE &LCNTX LE &LCNT\n    SET &LUG=&&LOG&LCNTX\n    SET &JLOG=&STR(&LUG)\n    PUTFILE JLOG\n    SET &LCNTX=&LCNTX+1\n    END\n  CLOSFILE JLOG\n  FREE F(JLOG)\nFR9:+\n  IF &E EQ RESET THEN GOTO RESET\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOTTO$": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x7f\\x00\\x942\\x7f\\x15%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-23T00:00:00", "modifydate": "1994-11-23T15:25:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//JOTTO    JOB (........),'INSTALL -J O T T O-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=(,20)\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJPROC\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=FB AND LRECL=80, ELSE            *\n//*       \"PAJPROV\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=VB AND LRECL=255.                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//TCL     EXEC PAJPROC,MBR=JOTTO,DSS='->.SOURCE.FILE3',\n//             DSP='->.TARGET.TSO.CLISTS'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KALAH": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t/\\x00\\x92\\t/\\x11)\\x06K\\x06K\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1992-04-01T11:29:00", "lines": 1611, "newlines": 1611, "modlines": 0, "user": "SYSPAJA"}, "text": "KLAH     TITLE 'K A L A H -- ANCIENT EGYPTIAN BOARD GAME'\n         SPACE 1\n        PRINT  OFF\n*** COPYRIGHT 1976 - REGENTS OF THE UNIVERSITY OF CALIFORNIA,     ***\n*** CAMPUS COMPUTING NETWORK   (SHARE CODE 'UR')  -  1/15/76      ***\n*** ALTHOUGH WE ARE RUNNING THIS MODULE IN OUR PRODUCTION SYSTEM, ***\n*** NO WARRANTY, EXPRESSED OR IMPLIED, IS MADE BY CCN AS TO THE   ***\n*** FUNCTIONING OR CORRECTNESS OF THE FOLLOWING CODE.             ***\n         MACRO\n&LAB    @MSG   &TEXT\n         GBLC  &LABL1,&LABL2\n         GBLA  &LEN(30),&I,&L\n         AIF   ('&LAB' EQ '').GO\n&I       SETA  0\n&LABL1   SETC  '&LAB'\n&LABL2   SETC  '&LAB&SYSNDX'\n&LABL2   EQU   *\n.GO      ANOP\n&L       SETA  K'&TEXT-2\n&I       SETA  &I+1\n&LEN(&I) SETA  &L\n         DC    C&TEXT\n         MEND\n         MACRO\n        @MSGGEN &DUMMY\n         GBLC  &LABL1,&LABL2\n         GBLA  &LEN(30),&I,&L\n&LABL1   DC    A(&LABL2)\n         DC    AL2(&I)\n&L       SETA  1\n.LOOP    AIF   (&L GT &I).EXIT\n         DC    AL2(&LEN(&L))\n&L       SETA  &L+1\n         AGO   .LOOP\n.EXIT    MEND\n         MACRO\n&NAME   #CALL  &WHERE\n         AIF   ('&WHERE' NE '').W1\n         MNOTE 8,'--- \"WHERE\" OPERAND MISSING ---'\n         MEXIT\n.W1      AIF   ('&WHERE'(1,1) EQ '(').W2\n&NAME    L     R15,=A(&WHERE)      GET ENTRY POINT\n         AGO   .W3\n.W2      AIF   ('&WHERE' EQ '(15)').W4\n         AIF   ('&WHERE' EQ '(R15)').W4\n&NAME    LR    R15,&WHERE          SET ENTRY POINT\n.W3      BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.W4      ANOP\n&NAME    BASR  R14,R15             GO TO ROUTINE\n         MEND\n         MACRO\n&NAME   #DSP   &A,&N\n&NAME    BAS   R14,&A\n         NOP   &N*4\n         MEND\n         MACRO\n&NAME   #XENT  &DUMMY\n         CNOP  0,8\n&NAME    STM   R14,R12,12(R13)     SAVE REGISTERS\n         B     16(,R15)            BRANCH AROUND ID\n         DC    CL8'&NAME'          IDENTIFIER\n         LR    R8,R15              SET BASE REGISTER\n         USING &NAME,R8            SET ADDRESSABILITY\n         LR    R15,R13             PREVIOUS SAVE AREA\n         LA    R13,18*4(R13)       NEW CURRENT SAVE AREA\n         ST    R13,8(R15)          LINK SAVE AREAS\n         ST    R15,4(R13)\n         SPACE 1\n         MEND\n         MACRO\n&NAME   #XRET  &RC=\n&NAME    L     R13,4(R13)          PREVIOUS SAVE AREA\n         AIF   ('&RC' EQ '').N1\n         AIF   ('&RC'(1,1) EQ '(').N2\n         AIF   ('&RC' NE '0').N3\n.N1      XR    R15,R15             SET RC=0\n         ST    R15,16(R13)         STORE IT (R15)\n         AGO   .N4\n.N2      ST    &RC(1),16(R13)      STORE RC (R15)\n         AGO   .N4\n.N3      MVC   16(4,R13),=AL4(&RC) SET RC (R15)\n.N4      LM    R14,R12,12(R13)     RESTORE REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATOR\n         BR    R14                 RETURN\n         SPACE 1\n         MEND\n         MACRO\n        #XEND  &DUMMY\n        LTORG  ,                   LITERALS\n         SPACE 1\n         DROP  R8                  END OF LOCAL ADDRESSABILITY\n         MEND\n        PRINT  ON\n         SPACE 1\nKALAH    START 0\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*   KALAH :    THIS PROGRAM ALLOWS A USER TO PLAY THE COMPUTER IN     *\n*              THE GAME OF KALAH. THE USER IS ASKED VARIOUS INITIAL   *\n*              PARAMETERS VALUES AND THEN THE PLAY ALTERNATES WITH    *\n*              THE USER GIVING HIS MOVES AS PIT NUMBERS.              *\n*   AUTHOR :   DON D WORTH                                            *\n*              FULL SCREEN BY : MOINIL P.A.                           *\n*                               COMPUTING CENTRE                      *\n*                               J.R.C. - ISPRA ESTABLISHMENT          *\n*                               21020 ISPRA (VA), ITALY               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  NOGEN\n        $DEFREG\n*------- MAIN ENTRY, INITIALIZE\n*        HOUSEKEEPING\n         SPACE 1\n        $XENT  BASE=(R11,R12),LV=DATALEN,TYPE=RENT\n         LR    R9,R13              SET DATA ADDRESSABILITY\n         USING DATA,R9\n         MVC   EXTR(LEXTR),EXTRP\n         XC    ATSO,ATSO\n        EXTRACT ATSO,'S',FIELDS=(TSO),MF=(E,EXTR)\n         L     R2,ATSO\n         TM    0(R2),X'80'\n         BZ    NOTTSO              WE ARE'NT IN TSO\n         XC    EXTR(LEXTR),EXTR\n         XC    ATSO,ATSO\n        GTSIZE ,\n         LTR   R15,R15\n         BNZ   ERGTSZ              ERROR RETURN CODE\n         LTR   R15,R0\n         BZ    NDTERM              NOT DISPLAY TERMINAL\n         CL    R1,=F'80'           TEST LINE LENGTH\n         BE    TSTSC\n         CL    R1,=F'132'\n         BNE   NDTERM\n         CL    R0,=F'27'           TEST NUMBER OF LINES\n         BNE   NDTERM\n         B     SETSCT\nTSTSC    CL    R0,=F'24'\n         BE    SETSCT\n         CL    R0,=F'32'\n         BE    SETSCT\n         CL    R0,=F'43'\n         BNE   NDTERM\nSETSCT   OI    FLAGS,SCTERM\n         B     NDTERM+L'NDTERM\nNDTERM   NI    FLAGS,255-SCTERM\n         XC    LIST0(5*4),LIST0    RESET LIST\n         MVI   VPL,C'B'            LET HIM GO FIRST\n         MVC   MAXLV(2),=H'2'      DEFAULT LEVEL\n         MVC   PPP(2),=H'6'        DEFAULT PEBS/PIT\n         LA    R1,INMSG            INITIAL MESSAGE\n         LA    R0,LGINMSG          LENGTH\n        #DSP   DSPLAY,0            GIVE IT TO HIM          CALL FS = 0\n         LA    R1,REPLY            WHERE TO REPLY\n         ST    R1,LIST0+2*4        INTO LIST\n         LA    R1,L'REPLY          READ LENGTH\n         ST    R1,LIST0+3*4        INTO LIST\n         SPACE 1\n*------- ASK USER FOR NEW GAME PARAMETERS\n*        SEE IF USER WANTS TO CHANGE DEFAULTS\n         SPACE 1\nNEWGAME  L     R1,=A(ASKPARMS)     FIND MESSAGE\n         LA    R0,LASKPARM         LENGTH\n        #DSP   DSPLAY,1            ASK HIM                 CALL FS = 1\n         MVI   OPTS,0              NO OPTIONS SELECTED YET\n         LA    R1,REPLY            FIND STRING\n         L     R0,LIST0+4*4        GET READ LENGTH\n         LTR   R0,R0               NULL?\n         BNP   START               LEAVE THINGS ALONE\nSELOPTS  CLI   0(R1),C'L'          LOOK-LEVEL?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTSL          YES\n         CLI   0(R1),C'P'          PEBBLES PER PIT?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTSP          YES\n         CLI   0(R1),C'T'          TRACE LEVEL?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTST          YES\n         CLI   0(R1),C'W'          WHO FIRST?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTSW          YES\n         CLI   0(R1),C'B'          BOARD LAYOUT?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTSB          YES\n         CLI   0(R1),C'V'          VERIFY MOVES?\n         BNE   *+L'*+4             NO\n         OI    OPTS,OPTSV          YES\n         LA    R1,1(R1)            NEXT CHAR\n         BCT   R0,*+L'*+4          GO ON\n         B     SELEND\n         CLI   0(R1),C' '\n         BNE   *-16\n         LA    R1,1(R1)            NEXT CHAR\n         BCT   R0,*+L'*+4          GO ON\n         B     SELEND\n         CLI   0(R1),C' '\n         BE    *-16\n         B     SELOPTS             GO LOOK\nSELEND   CLI   OPTS,0              NOTHING SELECTED?\n         BE    START               NOPE, SKIP ALL OF EM\n         SPACE 1\n*------- ASK USER FOR LOOK-AHEAD LEVEL\n         SPACE 1\n         TM    OPTS,OPTSL          ASK LEVEL?\n         BZ    REASKPPP            NO\n         LA    R0,LASKLHL          USE FULL LENGTH\n         B     RELHL+L'RELHL       SKIP LENGTH LOAD\nRELHL    LA    R0,80               MINIMUM LENGTH\n         L     R1,=A(ASKLHL)       GET MESSAGE\n        #DSP   DSPLAY,2                                    CALL FS = 2\n         TM    REPLY,X'F0'         NUMERIC VALUE?\n         BNO   RELHL               NO\n         PACK  DBLW(8),REPLY(1)    CONVERT IT\n         CVB   R1,DBLW             GET IT\n         LTR   R1,R1               MUST BE NON-ZERO\n         BZ    RELHL               NO GOOD\n         STH   R1,MAXLV            SAVE IT\n         SPACE 1\n*------- ASK FOR NUMBER OF PEBBLES PER PIT\n         SPACE 1\nREASKPPP TM    OPTS,OPTSP          PEBBLES PER PIT\n         BZ    REVER               NO, GO ON\n         LA    R1,ASKPPP           WHERE IS MESSAGE\n         LA    R0,L'ASKPPP         LENGTH\n        #DSP   DSPLAY,2            GO GET NUMBER           CALL FS = 2\n         TM    REPLY,X'F0'         NUMERIC?\n         BNO   REASKPPP            NO\n         PACK  DBLW(8),REPLY(1)    GET IT\n         CVB   R1,DBLW             LOAD INTO REG\n         STH   R1,PPP              SAVE FOREVER\n         SPACE 1\n*------- ASK USER IF HE WANTS VERIFICATION\n         SPACE 1\nREVER    TM    OPTS,OPTSV          VERIFY?\n         BZ    RETRAC              NO\n         LA    R1,VERMSG\n         LA    R0,L'VERMSG\n        #DSP   DSPLAY,2            ASK HIM                 CALL FS = 2\n         CLI   REPLY,C'N'          NO?\n         BNE   *+L'*+8\n         NI    FLAGS,255-VERIFY    NO MORE VERIFY\n         B     RETRAC\n         CLI   REPLY,C'Y'          YES?\n         BNE   REVER               NOPE, ITS ????\n         OI    FLAGS,VERIFY        SET FLAG\n         SPACE 1\n*------- ASK FOR TRACE LEVEL MAXIMUM\n         SPACE 1\nRETRAC   TM    OPTS,OPTST          TRACE?\n         BZ    REFIRST             NO\n         LA    R1,ASKTRAC\n         LA    R0,LASKTRAC         GET MESSAGE LENGTH\n        #DSP   DSPLAY,2            ASK HIM                 CALL FS = 2\n         CLI   REPLY,C'R'          RESET?\n         BNE   *+L'*+12            NO\n         MVI   TRACE,0             RESET COMPARES\n         NI    FLAGS,255-TESTING   SHUT IT UP\n         B     REFIRST\n         TM    REPLY,X'F0'         OK?\n         BNO   RETRAC              NO\n         PACK  DBLW(8),REPLY(1)    GET IT\n         CVB   R1,DBLW             GET IT IN REG\n         STC   R1,TRACE            SAVE FOR COMPARES\n         OI    FLAGS,TESTING       DO IT EACH TURN\n         SPACE 1\n*------- ASK WHO GOES FIRST\n         SPACE 1\nREFIRST  TM    OPTS,OPTSW          WHO FIRST?\n         BZ    REBOARD             NO\n         LA    R1,ASKFIR\n         LA    R0,L'ASKFIR\n        #DSP   DSPLAY,2                                    CALL FS = 2\n         CLI   REPLY,C'M'          HIM?\n         BNE   *+L'*+8             NO\n         MVI   VPL,C'B'            SET HIM FIRST\n         B     REBOARD\n         CLI   REPLY,C'Y'          ME?\n         BNE   REFIRST             NO, INVALID\n         MVI   VPL,C'A'            SET ME FIRST\n         SPACE 1\n*------- ASK FOR INTITIAL BOARD SETTINGS\n         SPACE 1\nREBOARD  TM    OPTS,OPTSB          BOARD SETUP?\n         BZ    START               NOPE\n         LA    R1,ASKBRD           MESSAGE\n         LA    R0,LASKBRD          LENGTH\n        #DSP   DSPLAY,2            GO ASK                  CALL FS = 2\n         L     R0,LIST0+4*4        GET REPLY LENGTH\n         LTR   R0,R0               NULL?\n         BZ    REBOARD             YES, ASK AGAIN\n         LA    R1,REPLY            FIND REPLY BUFFER\n         LA    R2,VARR             FIRST PIT\n         LA    R15,14              NUMBER OF PITS I NEED\nFILLPITS TM    0(R1),X'F0'         NUMERIC YET?\n         BO    GOTDIG              YES\n         LA    R1,1(R1)            ELSE, SKIP AHEAD\n         BCT   R0,FILLPITS         GO ON\n         B     REBOARD             NOT ENOUGH\nGOTDIG   LR    R14,R1              SAVE START\nGOTDIG1  TM    0(R1),X'F0'         NUMERIC?\n         BNO   GOTBLK              NO\n         LA    R1,1(R1)            NEXT CHAR\n         BCT   R0,GOTDIG1          DO IT\nGOTBLK   LR    R3,R1               GET FINAL PTR\n         SR    R3,R14              FIND TRUE LENGTH\n         CH    R3,=H'3'            TOO LARGE?\n         BH    REBOARD             YES, UGLY\n         BCT   R3,*+L'*+6          EXECUTE LENGTH\n         PACK  DBLW(8),0(0,R14)         << EXECUTED >>\n         EX    R3,*-6              CONVERT TO DECIMAL\n         CVB   R3,DBLW             GET IT IN REG\n         STC   R3,0(R2)            SAVE IN ARRAY\n         LA    R2,1(R2)            NEXT ARRAY MEMBER\n         BCT   R15,FILLPITS        CONTINUE\n         MVC   SCREEN+480(80),BLANKS\n         MVC   SCREEN+480(14),=C'IS THIS RIGHT?'\n         LA    R0,480+14           LENGTH\n         XR    R1,R1               FIRST BOARD\n        #DSP   DBOARD,2            DISPLAY BOARD           CALL FS = 2\nBOARDOK  CLI   REPLY,C'Y'          YES?\n         BE    START1              YES, GO TO IT\n         CLI   REPLY,C'N'          NO?\n         BE    REBOARD             NO, GO ASK AGAIN\n         LA    R0,14               LENGTH\n         LA    R1,SCREEN+480       MESSAGE\n        #DSP   DSPLAY,3            ASK AGAIN               CALL FS = 3\n         B     BOARDOK             SEE IF SO\n         SPACE 1\n*------- SET UP INITIAL BOARD\n         SPACE 1\nSTART    LA    R15,VARR            FIND BOARD ARRAY\n         LH    R1,PPP              GET PEBBLES PER PIT\n         LA    R0,14               NUMBER OF PITS\n         STC   R1,0(R15)           FILL A PIT\n         LA    R15,1(R15)          NEXT PIT\n         BCT   R0,*-8\n         MVI   VAK,0               NOTHING IN KALAHS\n         MVI   VBK,0               EITHER ONE\nSTART1   CLI   VPL,C'A'            WHO FIRST?\n         BE    MEFIRST             ME\n         SPACE 1\n*------- GIVE HIM A MOVE FIRST\n*        ASK USER FOR HIS MOVE\n         SPACE 1\nDISP     MVC   SCREEN+480(80),BLANKS\n         MVC   SCREEN+480(L'YOURMOVE),YOURMOVE\n         LA    R1,SCREEN+480+L'YOURMOVE WHERE TO PUT WISE CRACK\nDISP1    OC    VB1(6),VB1          CAN HE MOVE AT ALL?\n         BZ    ENDGAME             NO, STOP THEN\n         CLC   VAK(1),VBK          COMPARE SCORES SO FAR\n         BE    DISP2               NECK AND NECK\n         MVI   0(R1),C','          I CAN'T RESIST...\n         LA    R1,2(R1)            I HAVE TO SAY SOMETHING\n         L     R0,=A(MSGA)         ASSUME I'M WINNING\n         BH    *+L'*+4             YES, I AM\n         L     R0,=A(MSGB)         NO I'M NOT\n         BAS   R14,WISECRAK        GENERATE SOMETHING\nDISP2    LA    R0,SCREEN           FIND LENGTH\n         SR    R1,R0               GET IT\n         LR    R0,R1\n         XR    R1,R1               SHOW MAIN BOARD\n        #DSP   DBOARD,4            DO IT TO IT             CALL FS = 4\nDISP3    OC    LIST0+4*4(4),LIST0+4*4 NULL READ?\n         BZ    DISP                THEN RE-DISPLAY SCREEN\n         TM    REPLY,X'F0'         NUMERIC?\n         BO    PITOK1              YES\nNONO     LA    R1,BADPIT           NO, UGLY\n         LA    R0,L'BADPIT         LENGTH OF MESSAGE\n        #DSP   DSPLAY,5            GIVE ERROR, GET REPLY   CALL FS = 5\n         B     DISP3               CHECK NEW REPLY\nPITOK1   PACK  DBLW(8),REPLY(1)    GET IT\n         CVB   R1,DBLW             CONVERT TO REG\n         LTR   R1,R1               HOWS IT LOOK?\n         BNP   NONO                ICKY\n         CH    R1,=H'6'            MUST BE WITHIN 1-6 RANGE\n         BH    NONO                ICKY\n         LA    R15,7               GET A CONSTANT\n         SR    R15,R1              GET INVERSE OF HIS NUM SYSTEM\n         STC   R15,VCP             SET UP FOR THE DRIBBLE\n         XR    R1,R1               DO THE MAIN BOARD\n         MVI   VPL,C'B'            ITS HIS TURN\n         BAS   R14,DRIBBLE         MAKE HIS MOVE\n         B     NONO                +0 - EMPTY PIT\n         SPACE 1\n*------- DO VERIFICATION OF USER'S MOVE, HANDLE EXTRA MOVES\n         SPACE 1\n         TM    FLAGS,VERIFY        +4 - VERIFY HIS MOVES FOR HIM?\n         BZ    NOVER               NOPE\n         CLC   VCP(1),VERPIT       THIS WHAT I EXPECTED?\n         BE    NOVER               YES, GO ON\n         CLI   VERPIT,0            FIRST MOVE?\n         BE    NOVER\n         MVC   MSWRK(12),=C'I GUESSED XX'\n         IC    R15,VERPIT          GET WHAT I THOT\n         LA    R14,7               GET A CONSTANT\n         SR    R14,R15             CONVERT NUMBER SYSTEMS\n         CVD   R14,DBLW            CONVERT NUMBER\n         UNPK  MSWRK+10(2),DBLW(8) MOVE TO LINE\n         OI    MSWRK+11,X'F0'      FIX THE SIGN\n         LA    R1,MSWRK\n         LA    R0,12               LENGTH\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,6            SEND THE MESSAGE        CALL FS = 6\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\nNOVER    CLI   VPL,C'B'            STILL HIM?\n         MVI   VERPIT,0            I HAVE NO EXPECTATIONS\n         BNE   MEFIRST             IF NOT HIM, MY TURN\n         MVC   SCREEN+480(80),BLANKS ELSE, SET UP TO ASK FOR NOTHER\n         MVC   SCREEN+480(L'BAGAIN),BAGAIN\n         LA    R1,SCREEN+480+L'BAGAIN\n         B     DISP1               LET HIM GO AGAIN\n         SPACE 1\n*------- MY TURN, SEE IF I HAVE NO CHOICES\n*        MY TURN, SHOW BOARD FIRST\n         SPACE 1\nMEFIRST  MVC   SCREEN+480(80),BLANKS\n         MVC   SCREEN+480(L'MYMOVE),MYMOVE\n         LA    R1,SCREEN+480+L'MYMOVE\nMEFIRST1 OC    VA1(6),VA1          CAN I MOVE AT ALL?\n         BZ    ENDGAME             NO, STOP THEN\n         L     R0,=A(MSGD)         HERE ARE WISECRACKS\n         BAS   R14,WISECRAK        DO IT\n         LA    R0,SCREEN           START OF DISPLAY\n         SR    R1,R0               LENGTH\n         LR    R0,R1\n         XR    R1,R1               DO MAIN BOARD\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DBOARD,7            SHOW BOARD, GO ON...    CALL FS = 7\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\n         SPACE 1\n*------- SEE IF I HAVE A CHOICE IN MOVES\n         SPACE 1\n         XR    R1,R1               POINT TO MY FIRST PIT\n         STC   R1,VERPIT           NO PIT FOR VERIFY YET\n         XR    R15,R15             CLEAR SEARCH REG\n         LA    R0,6                NUMBER OF PITS\n         BCTR  R15,0               ITS EMPTY\nSEARCH   LA    R14,VARR(R1)        FIND THIS PIT\n         CLI   0(R14),0            EMPTY?\n         BE    SEARON              YES, CONTINUE\n         LTR   R15,R15             TEST FOR PREVIOUS HIT\n         BNZ   CHOSE               MORE THAN ONE\n         LR    R15,R1              ELSE, SAVE ITS INDEX\nSEARON   LA    R1,1(R1)            NEXT ONE\n         BCT   R0,SEARCH           CONTINUE SEARCHING\n         LA    R15,1(R15)          NOT AN OFFSET\n         STC   R15,VOP             SAVE THE ONE I FOUND\n         B     CHOSEN              GO USE IT\n*------- OPTIMIZE MY MOVE\n*        INITIALIZE THE ROOT VERTEX BLOCK\n*              R5 = LAST NODE INDEX VALUE\n*              R6 = NEXT NODE INDEX VALUE (R5+1)\n         SPACE 1\nCHOSE    XR    R5,R5               LAST PTR IS ROOT\n         LH    R6,VBLEN            NEXT IS FIRST\n         MVI   VLV,0               LEVEL IS 0\n         MVI   VOP,0               NO OPTIMUM PIT YET\n         MVC   VOS(2),NONE         NO OPTIMUM SCORE\n         MVI   VPL,C'A'            MAKE SURE OF THE PLAYER\n         MVI   VCP,1               START WITH FIRST PIT\n         SPACE 1\n*------- GO UP TO NEXT NODE IN THE GAME TREE\n         SPACE 1\nNEXTUP   XR    R1,R1               CLEAR FOR AN IC\n         IC    R1,VLV(R5)          GET LAST LEVEL\n         LA    R1,1(R1)            NEXT LEVEL\n         STC   R1,VLV(R6)          SAVE FOR NEXT ONE\n         CH    R1,MAXLV            TOO FAR?\n         BH    BACKDOWN            YES, BACKDOWN THE TREE\n         IC    R1,VCP(R5)          GET CHOSEN PIT\n         STC   R1,VCP(R6)          COPY TO NEW NODE\n         IC    R1,VPL(R5)          MERGE UP PLAYER...\n         STC   R1,VPL(R6)          TEMPORARILY\n         LA    R14,VARR(R5)        GET LAST ARRAY\n         LA    R15,VARR(R6)        AND NEXT\n         MVC   0(14,R15),0(R14)    COPY BOARD UP\n         LR    R1,R6               DO IT TO NEXT\n         BAS   R14,DRIBBLE         MAKE LAST NODE'S MOVE TO NEXT\n         B     ABORT               +0 - INVALID TRY, BACK OFF\n         XR    R1,R1               +4 - GET A ZERO\n         STC   R1,VCP(R6)          NO CURRENT PIT YET\n         STC   R1,VOP(R6)          NO OPTIMUM PIT\n         LA    R1,VOS(R6)          FIND OPTIMUM SCORE\n         MVC   0(2,R1),NONE\n         LA    R14,VA1(R6)         FIND THE ONE I JUST DID\n         OC    0(6,R14),0(R14)     END OF GAME SITUATION?\n         BNZ   TRYONE              NO, CONTINUE\n         LA    R15,VCP(R6)         FIND CURRENT PTR\n         MVI   0(R15),6            TRIED LAST PIT ALREADY\n         AH    R6,VBLEN            NEXT NEXT\n         AH    R5,VBLEN            NEXT LAST\n         B     BACKDOWN            PRETEND EXCEEDED MAXLV\n         SPACE 1\n*------- TRY OUT A MOVE AND GO UP TREE\n         SPACE 1\nTRYONE   XR    R1,R1               CLEAR A REG\n         IC    R1,VCP(R6)          GET LAST PIT NUMBER TRIED\n         LA    R1,1(R1)            NEXT PIT\n         STC   R1,VCP(R6)          SET IT UP\n         CH    R1,=H'7'            TOO MUCH?\n         BNL   DOWN                YES, ALL HAVE BEEN TRIED\n         AH    R6,VBLEN            NEXT N\n         AH    R5,VBLEN            AND L\n         B     NEXTUP              GO UP ANOTHER NODE\n         SPACE 1\n*------- IF END OF BRANCH REACHED, START BACK DOWN\n         SPACE 1\nBACKDOWN XR    R1,R1               CLEAR FOR IC\n         XR    R14,R14             CLEAR FOR ANOTHER ONE\n         IC    R1,VAK(R5)          GET A KALAH VALUE\n         IC    R14,VBK(R5)         AND B KALAH VALUE\n         SR    R1,R14              GET SCORE\n         STH   R1,VOS(R6)          UNTRIED NODE WORTH 0\n         LA    R1,VPL(R5)          FIND THE PLAYER\n         CLI   0(R1),C'A'          ME?\n         BE    SCOREA              YES\n         LH    R1,VOS(R6)          GET THE NEW SCORE\n         SH    R1,=H'1'            HIS TURN, I LOSE A 1/2 POINT\n         STH   R1,VOS(R6)          SAVE IT\n         B     DOWN                CONTINUE DOWN TREE\nSCOREA   LH    R1,VOS(R6)\n         AH    R1,=H'1'            MY TURN, I GET A 1/2 POINT\n         STH   R1,VOS(R6)          SAVE IT\n         SPACE 1\n*------- WHEN ALL POSIBILITIES HAVE BEEN TRIED, MERGE BACK BEST SCORE\n         SPACE 1\nDOWN     LTR   R6,R6               AT END?\n         BZ    CHOSEN              YES, EXIT\n         TM    FLAGS,TESTING       TESTING?\n         BZ    NOTEST              NO\n         LA    R15,VLV(R5)         FIND MERGED TO LEVEL\n         CLC   0(1,R15),TRACE      DO THIS?\n         BH    NOTEST              NO\n         LH    R15,VOS(R6)         GET SCORE\n         CVD   R15,DBLW            CONVERT IT\n         MVC   MSWRK(8),=C'LN PN+VV' MOVE IN MASK\n         UNPK  MSWRK+6(2),DBLW(8)  MOVE SCORE TO SCREEN\n         OI    MSWRK+7,X'F0'       FIX THE SIGN\n         IC    R1,VPL(R5)          GET PLAYER CODE\n         LTR   R15,R15             NEGATIVE?\n         BNM   *+L'*+4             NO\n         MVI   MSWRK+5,C'-'        SHOW MINUS\n         STC   R1,MSWRK+3          PUT IN LINE\n         IC    R1,VCP(R5)          GET PIT CHOICE\n         CLI   MSWRK+3,C'A'        MY MOVE?\n         BE    TESTA               YES\n         LR    R0,R1               SAVE IT\n         LA    R1,7                GET COMPLEMENT\n         SR    R1,R0               THIS WAY\nTESTA    STC   R1,MSWRK+4          PUT IN LINE\n         OI    MSWRK+4,X'F0'       FIX SIGN\n         IC    R1,VLV(R5)          GET LEVEL NUMBER\n         STC   R1,MSWRK+1          PUT IN LEVEL\n         OI    MSWRK+1,X'F0'       FIX SIGN\n         LA    R1,MSWRK            FIND TEXT\n         LA    R0,8                LENGTH\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,8            SEND THE MESSAGE        CALL FS = 8\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\nNOTEST   LA    R1,VOS(R5)          FIND PREVIOUS BEST SCORE\n         LH    R15,VOS(R6)         PICK UP NEW ONE FOR MERGE\n         CLC   0(2,R1),NONE        NO PREVIOUS?\n         BE    MERGE               NONE, MERGE THEN\n         LA    R1,VPL(R5)          WHOSE MOVE?\n         CLI   0(R1),C'A'          MINE?\n         LH    R14,VOS(R5)         GET VALUE FOR COMPARISON\n         BE    *+L'*+6             IF ITS ME, DIFFERENT CRITERIA\n         CR    R15,R14             VOS(N) > VOS(L)?\n         B     *+L'*+2             CONTINUE\n         CR    R14,R15             VOS(L) > VOS(N)?\n         BH    ABORT               NOPE\nMERGE    STH   R15,VOS(R5)         NEW SCORE\n         IC    R1,VCP(R5)          LAST SELECTED PIT\n         STC   R1,VOP(R5)          PRODUCED THIS SCORE\n         TM    FLAGS,TESTING       TESTING?\n         BZ    NOTEST1\n         LA    R15,VLV(R5)         TEST THIS LEVEL\n         CLC   0(1,R15),TRACE\n         BH    NOTEST1             NOPE\n         LA    R1,=CL6'PICKED'     INDICATE MERGE DONE\n         LA    R0,6                LENGTH\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,8            SEND THE MESSAGE        CALL FS = 8\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\nNOTEST1  LTR   R5,R5               MERGING TO END ONE?\n         BNZ   ABORT               NO\n         IC    R1,VOP(R6)          GET B'S BEST MOVE FOR THIS CASE\n         STC   R1,VERPIT           AND SAVE IT\n         SPACE 1\n*------- BACK DOWN ONE NODE AND TRY AGAIN\n         SPACE 1\nABORT    SH    R5,VBLEN            BACK DOWN LAST VERTEX\n         SH    R6,VBLEN            AND NEXT\n         BNM   TRYONE              IF NOT BACK TO START...\n         SPACE 1\n*------- MAKE MY MOVE\n*        I'VE GOT A MOVE, MOVE IT THEN\n         SPACE 1\nCHOSEN   TM    FLAGS,TESTING+SCTERM TESTING ON SCREEN?\n         BNO   SKIPTR\n         TM    SWFSW,SWTRC\n         BZ    SKIPTR\n        #DSP   DSPLAY,9            LAST MESSAGE(S)         CALL FS = 9\nSKIPTR   MVC   VCP(1),VOP          USE OPTIMUM PIT\n         MVC   MSWRK(L'IMOVED),IMOVED GET TEXT\n         XR    R1,R1               CLEAR FOR IC\n         IC    R1,VCP              GET MY PIT NUMBER\n         CVD   R1,DBLW             CONVERT IT\n         UNPK  MSWRK+14(2),DBLW(8) MOVE CHOICE TO SCREEN\n         OI    MSWRK+15,X'F0'      FIX THE SIGN\n         LA    R0,L'IMOVED\n         LA    R1,MSWRK            HERE IS MESSAGE\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,6            SEND THE MESSAGE        CALL FS = 6\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\n         XR    R1,R1               DISPLAY MAJOR BOARD\n         BAS   R14,DRIBBLE         MAKE MY MOVE\n         EX    0,*                 +0 - THIS CAN'T HAPPEN (I HOPE)\n         CLI   VPL,C'A'            +4 - ME AGAIN?\n         BNE   DISP                NO, GO ON\n         MVC   SCREEN+480(80),BLANKS\n         MVC   SCREEN+480(L'AAGAIN),AAGAIN YES, I GET ANOTHER TURN\n         LA    R1,SCREEN+480+L'AAGAIN\n         B     MEFIRST1            GO DISPLAY AND ASK HIM\n         SPACE 1\n*------- GIVE END OF GAME STATISTICS\n*        WHEN ENTIRE BOARD IS CLEAR, SHOW FINAL SCORE\n         SPACE 1\nENDGAME  LA    R0,SCREEN\n         LA    R14,GAMEMSG\n         LA    R1,LGAMEMSG\n         LR    R15,R1\n         MVCL  R0,R14\n         CLC   VAK(1),VBK          HOW'D HE/I DO?\n         BE    ENDGAME1            NECK AND NECK\n         MVI   SCREEN+89,C','       I WILL TALK\n         LA    R1,SCREEN+91        WHERE GOES THE MESSAGE\n         L     R0,=A(MSGE)         ASSUME I WON\n         MVI   VPL,C'B'            HE GOES FIRST IF SO\n         BH    IWIN                I DID\n         MVI   VPL,C'A'            I GO FIRST IF HE WON\n         L     R0,=A(MSGC)         HE WON\n         MVC   0(13,R1),=C'GIVE THAT MAN'\n         LA    R1,14(R1)           NEXT LOCATION\nIWIN     BAS   R14,WISECRAK        MAKE A DIRTY CRACK\nENDGAME1 XR    R14,R14             CLEAR FOR IC\n         XR    R15,R15             SAME HERE\n         IC    R14,VAK             GET MY SCORE\n         IC    R15,VBK             AND HIS\n         CVD   R14,DBLW            CONVERT MINE\n         MVC   SCREEN+326(3),=X'202120' EDIT MASK\n         ED    SCREEN+325(4),DBLW+6 GET IT\n         CVD   R15,DBLW            CONVERT HIS\n         MVC   SCREEN+332(3),=X'202120' MOVE IN EDIT MASK\n         ED    SCREEN+331(4),DBLW+6 CONVERT TO SCREEN\n         AH    R14,AMATCH          MY MATCH SCORE\n         AH    R15,BMATCH          HIS MATCH SCORE\n         STH   R14,AMATCH          UPDATE THEM\n         STH   R15,BMATCH          BOTH\n         CVD   R14,DBLW            CONVERT MINE\n         MVC   SCREEN+406(3),=X'202120' MOVE EDMSK TO SCREEN\n         ED    SCREEN+405(4),DBLW+6 EDIT IT INTO LINE\n         CVD   R15,DBLW            CONVERT HIS\n         MVC   SCREEN+412(3),=X'202120' GET EDIT MASK\n         ED    SCREEN+411(4),DBLW+6 CONVERT NUMBER\n         CR    R14,R15             HOWS HE DOING?\n         LA    R1,SCREEN+LGAMEMSG  ASSUME NECK AND NECK\n         BE    EGAME               THEY ARE EQUAL\n         MVC   0(2,R1),=C', '      OH BOY, I GET TO CRACK\n         LA    R1,2(R1)            JUMP TO SPOT\n         L     R0,=A(MSGA)         ASSUME I'M WINNING\n         BH    *+L'*+4             I AM\n         L     R0,=A(MSGB)         I'M NOT\n         BAS   R14,WISECRAK        GET A CRACK\nEGAME    MVI   0(R1),C'?'          END THE SENTENCE\n         LA    R1,1(R1)            COUNT IT\n         LA    R0,SCREEN           BEGINNING OF DISPLAY\n         SR    R1,R0               GET LENGTH\n         LR    R0,R1               GET IN RIGHT REG\n         LA    R1,SCREEN           WHERE IS MESSAGE?\nREEG    #DSP   DSPLAY,10           ASK FOR NEXT ONE        CALL FS = 10\n         CLI   REPLY,C'Y'          NEW GAME?\n         BE    NEWGAME             YES,  GO TO IT\n         CLI   REPLY,C'N'          NO?\n         BE    LEAVE               THEN LEAVE\n         L     R0,LIST0+4          GET WRITE LENGTH\n         CL    R0,=A(7*80)         JUST LAST LINE DONE?\n         BNH   *+L'*+4             YES\n         S     R0,=A(7*80)         NO, JUST LAST LINE\n         LA    R1,SCREEN           FIND IT\n         A     R1,=A(7*80)\n         B     REEG                ASK AGAIN\nLEAVE    TM    FLAGS,SCTERM        FULL SCREEN?\n         BZ    QUIT                NO\n         B     RSTFS\n         SPACE 1\n*------- ERROR MESSAGE, EXIT\n         SPACE 1\nNOTTSO  TPUT   ERRMS0,L'ERRMS0\n         B     QUIT\nERGTSZ   MVC   MSWRK(L'ERRMS1),ERRMS1\n         MVC   MSWRK+5(6),=CL6'GTSIZE'\n         CVD   R15,DBLW\n         MVC   MSWRK+19(4),=XL4'40202120'\n         ED    MSWRK+19(4),DBLW+L'DBLW-2\nSHTDWN  TPUT   MSWRK,L'ERRMS1\n         SPACE 1\n*------- WHEN DONE, EXIT\n*        IF USER IS THROUGH, EXIT\n         SPACE 1\nQUIT    $XRET  CC=0,LV=DATALEN,TYPE=RENT\n         EJECT\n*======= DRIBBLE : MAKE A MOVE - MOVE FOR THE CALLER (LOCAL ROUTINE)\n*                  INPUT - R1  = VER INDEX LEVEL\n*                          R14 = RETURN ADDRESS\n*                                +0 PIT EMPTY\n*                                +4 NORMAL\n         SPACE 1\nDRIBBLE  STM   R14,R12,12(R13)     SAVE CALLER'S REGS\n         LA    R3,VER(R1)          FIND HIS VER\n         USING VER,R3\n         SPACE 1\n*------- LOCATE PIT TO BE MOVED\n         SPACE 1\n         CLI   VPL,C'A'            THIS FOR ME?\n         BNE   *+L'*+8             NO\n         LA    R2,14               LOAD I REGISTER\n         B     *+L'*+4             JUMP NEXT ONE\n         LA    R2,7                IF B, USE 7\n         XR    R0,R0               CLEAR TO GET CP\n         IC    R0,VCP              GET CHOSEN PIT\n         SR    R2,R0               GET ITS REAL OFFSET\n         SPACE 1\n*------- IF THE CHOSEN PIT IS EMPTY, RETURN WITH ERROR\n         SPACE 1\n         LA    R1,VARR(R2)         FIND IT\n         CLI   0(R1),0             EMPTY?\n         BNE   *+L'*+6             NO\n         LM    R14,R12,12(R13)     RELOAD HIS REGS\n         BR    R14                 RETURN DIRECTLY (EMPTY)\n         SPACE 1\n*------- PICK UP THE PEBBLES IN THE PIT\n         SPACE 1\n         XR    R4,R4               ZILTCH K REGISTER\n         IC    R4,0(R1)            GET CONTENTS OF PIT\n         MVI   0(R1),0             PIT NOW EMPTY\n         XR    R0,R0               ASSUME A PLAYER'S KALAH\n         CLI   VPL,C'A'            A PLAYER?\n         BNE   *+L'*+4             NO, B PLAYER, SKIP A'S KALAH\n         LA    R0,7                ELSE, SKIP B'S KALAH\n         SPACE 1\n*------- DISTRIBUTE PEBBLES AROUND THE BOARD\n         SPACE 1\n         XR    R1,R1               CLEAR FOR ICS\nDLOOP    LA    R2,1(R2)            NEXT PIT OFFSET\n         CH    R2,=H'13'           OFF THE END?\n         BNH   *+L'*+2             NO\n         XR    R2,R2               YES, WRAP AROUND BACK AGAIN\n         CR    R2,R0               OPPONENTS KALAH?\n         BE    DLOOP               YES, SKIP IT\n         IC    R1,VARR(R2)         GET THIS PIT'S CONTENTS\n         LA    R1,1(R1)            ADD ONE TO IT\n         STC   R1,VARR(R2)         PUT IT BACK\n         BCT   R4,DLOOP            DO ALL PEBBLES PICKED UP\n         SPACE 1\n*------- DETERMINE IF I CAPTURED ANYTHING\n         SPACE 1\n         LA    R1,VARR(R2)         FIND LAST PIT FILLED\n         CLI   0(R1),1             WAS EMPTY?\n         BNE   NOCAP               NO, NO CAPTURE MADE\n         CLI   VPL,C'A'            MY TURN?\n         BE    *+L'*+8             NO\n         LA    R4,1                LOCATION OF HIS SIDE\n         B     *+L'*+4             JUMP A'S\n         LA    R4,8                LOCATION OF MY SIDE\n         CR    R2,R4               ENDED UP ON HIS SIDE MAYBE?\n         BL    NOCAP               NOT A CHANCE\n         LA    R1,5(R4)            GET LIMIT OF SIDE\n         CR    R2,R1               HOWS THIS?\n         BH    NOCAP               NOT A CHANCE\n         XR    R5,R5               CLEAR FOR IC\n         IC    R5,OPPS(R2)         GET THE OPPOSITE PIT\n         LA    R4,6(R4)            FIND HIS KALAH\n         CH    R4,=H'13'           TOO FAR?\n         BNH   *+L'*+4             NO\n         SH    R4,=H'14'           YES, ADJUST DOWNWARDS\n         LA    R1,VARR(R5)         FIND THE OTHER SIDE\n         CLI   0(R1),0             EMPTY?\n         BE    DOUT                YES, NOTHING TO CATCH\n         XR    R1,R1               CLEAR FOR IC\n         IC    R1,VARR(R4)         GET HIS KALAH'S CONTENTS\n         LR    R14,R1              COPY IT\n         IC    R1,VARR(R5)         GET OPPONENTS PIT\n         LA    R14,1(R1,R14)       ADD TO HIS KALAH +CAPTURING PEB\n         XR    R1,R1               GET A ZERO\n         STC   R14,VARR(R4)        RESTORE KALAH COUNT\n         STC   R1,VARR(R2)         NOTHING ON THIS SIDE\n         STC   R1,VARR(R5)         OR THE OTHER\n         B     DOUT                RETURN TO CALLER\n         SPACE 1\n*------- IF NO CAPTURE WAS MADE, SEE IF ANOTHER TURN IS WARRENTED\n         SPACE 1\nNOCAP    CLI   VPL,C'A'            A PLAYER?\n         BNE   NCNOTA              NO\n         LTR   R2,R2               HIS KALAH WAS LAST?\n         BZ    DOUT1               YES, NO PLAYER SWITCH\nRESA     MVI   VPL,C'B'            ITS B'S TURN\n         B     DOUT1               CONTINUE\nNCNOTA   CH    R2,=H'7'            HIS KALAH?\n         BE    DOUT1               YES, HE GETS ANOTHER TURN\n         MVI   VPL,C'A'            A'S TURN NOW\n         B     DOUT1               GET OUT\nDOUT     CLI   VPL,C'A'            WHOSE TURN IS IT?\n         BE    RESA                A'S\n         MVI   VPL,C'A'            ELSE, ITS B'S (NOW A'S)\n         SPACE 1\n*------- IF GAME IS OVER, CLEAR THE BOARD\n         SPACE 1\nDOUT1    OC    VB1(6),VB1          THIS SIDE EMPTY?\n         BZ    BGO                 YES\n         OC    VA1(6),VA1          A'S EMPTY?\n         BNZ   DOUT2               NO\n         LA    R1,VB1              ADD UP B\n         B     BGO+L'BGO\nBGO      LA    R1,VA1              ADD UP A\n         XR    R0,R0               CLEAR FOR ICS\n         XR    R2,R2               ZERO SUM REGISTER\n         LA    R4,6                NUMBER TO DO\nADDUP    IC    R0,0(R1)            GET THIS PIT\n         MVI   0(R1),0             ITS EMPTY NOW\n         AR    R2,R0               ADD TO SUM\n         LA    R1,1(R1)            NEXT ONE\n         BCT   R4,ADDUP            ADD UP ALL PITS\n         LA    R15,VA6             POINT TO END\n         CR    R1,R15              PAST END?\n         BNH   *+L'*+4             NO\n         LA    R1,VAK              YES, HERE IT IS\n         IC    R0,0(R1)            GET KALAH KONTENTS\n         AR    R2,R0               GET TOTAL\n         STC   R2,0(R1)            PUT IT INTO THE KALAH\n         SPACE 1\n*------- WHEN DONE DRIBBLING, RETURN\n         SPACE 1\nDOUT2    LM    R14,R12,12(R13)     RESTORE REGS\n         B     4(R14)              RETURN OK\n         DROP  R3\n         EJECT\n*======= WISECRAK : PICK A PHRASE (LOCAL ROUTINE)\n*                   PICK A NASTY CRACK FROM A TABLE AT RANDOM\n*                   INPUT - R1  = OUTPUT LINE LOCATION\n*                           R0  = TABLE LOCATION\n*                           R14 = RETURN ADDRESS\n*                   OUTPUT - R1  = NEXT OUTPUT LOCATION\n         SPACE 1\nWISECRAK STM   R14,R12,12(R13)     SAVE CALLER'S REGS\n         LR    R2,R0               SAVE TABLE LOC\n         LR    R3,R1               SAVE OUTPUT LOCATION\n         SPACE 1\n*------- GENERATE RANDOM NUMBER FROM 1-N\n*              N=NUMBER-OF-WISECRACKS\n*              R=RANDOM-NUMBER (0-99)\n*              NUM=((R*N)/100)+1\n         SPACE 1\n        TIME   BIN\n         LR    R15,R0              SET UP TIME FOR DIVIDE\n         XR    R14,R14             CLEAR FOR DIVIDE\n         D     R14,=F'100'         R (REMAINDER)\n         MH    R14,4(R2)           R*N\n         LR    R15,R14             SET UP FOR DIVIDE\n         XR    R14,R14\n         D     R14,=F'100'         (R*N)/100=NUM-1\n         LA    R14,1(R15)          GET ANSWER\n         SPACE 1\n*------- LOCATE PROPER TEXT IN THE TABLE\n         SPACE 1\n         L     R4,0(R2)            GET FIRST MESSAGE\n         LA    R15,6(R2)           FIRST LENGTH\n         B     *+L'*+10            SKIP FIRST ITERATION\n         LH    R0,0(R15)           GET TEXT LENGTH\n         LA    R15,2(R15)          NEXT LENGTH\n         AR    R4,R0               NEXT TEXT\n         BCT   R14,*-10            CONTINUE\n         SPACE 1\n*------- MOVE TEXT TO LINE, AND RETURN\n         SPACE 1\n         LH    R1,0(R15)           GET TEXT LENGTH\n         BCT   R1,*+L'*+6          EXECUTE LENGTH\n         MVC   0(0,R3),0(R4)            << EXECUTED >>\n         EX    R1,*-6              GET THE TEXT\n         LA    R1,1(R1,R3)         NEW POINTER\n         ST    R1,24(R13)          RETURN IT TO HIM\n         LM    R14,R12,12(R13)     RESTORE REGS\n         BR    R14                 RETURN\n         EJECT\n*======= DBOARD : BOARD DISPLAY GENERATOR (LOCAL ROUTINE)\n*                CALLED TO SET UP DISPLAY FOR SCREEN\n*                INPUT - R1  = VER INDEX VALUE\n*                        R0  = LENGTH OF DISPLAY\n*                        R14 = RETURN ADDRESS\n         SPACE 1\n*======= DSPLAY : DISPLAY SCREEN (LOCAL ROUTINE)\n*                 INPUT - R0  = LENGTH OF DISPLAY SCREEN\n*                         R1  = ADDRESS OF DISPLAY\n*                         R14 = RETURN ADDRESS\n         SPACE 1\nDBOARD   MVC   SCREEN(80),BLANKS   CLEAR SCREEN TO DO DISPLAY\n         MVC   SCREEN+80(200),SCREEN\n         MVC   SCREEN+280(200),SCREEN\n         LA    R1,VARR(R1)         POINT TO PROPER ARRAY\n         ST    R0,LIST0+4          SAVE LENGTH\n         LR    R0,R14              SAVE RETURN ADDRESS\n         XR    R15,R15             START AT FIRST ARRAY ELEMENT\nBOARDLP  XR    R14,R14             CLEAR FOR IC\n         IC    R14,0(R1,R15)       GET ARRAY ELEMENT\n         CVD   R14,DBLW            CONVERT IT\n         LR    R14,R15             GET INDEX\n         AR    R14,R14             *2 FOR HALFWORDS\n         LH    R14,OFFSETS(R14)    GET ITS SCREEN OFFSET\n         LTR   R14,R14             ALL DONE?\n         BZ    BOARDIT             YES, DISPLAY IT\n         LA    R14,SCREEN(R14)     POINT TO IT\n         UNPK  0(2,R14),DBLW(8)    MOVE IT TO SCREEN\n         OI    1(R14),X'F0'        FIX THE SIGN\n         CLI   0(R14),C'0'         CHEATERS EDIT\n         BNE   *+L'*+4\n         MVI   0(R14),C' '\n         LA    R15,1(R15)          NEXT ARRAY MEMBER\n         B     BOARDLP             DO ALL PITS\nBOARDIT  LR    R14,R0              RESTORE RETURN\n         L     R1,LIST0+4          GET LENGTH\n         BCTR  R1,0                LAST CHAR\n         LA    R1,SCREEN(R1)       POINT TO IT\n         LA    R1,SCREEN           POINT TO SCREEN\n         L     R0,LIST0+4          ITS LENGTH AND GO DO IT\n         SPACE 1\nDSPLAY   MVC   REPLY(L'REPLY),BLANKS NOTHING READ YET\n         ST    R1,LIST0            SAVE SCREEN ADDR\n         ST    R0,LIST0+4          AND LENGTH\n         SPACE 1\n*------- DISPLAY AND EVENTUALLY READ\n         SPACE 1\n         TM    FLAGS,SCTERM        FULL SCREEN?\n         BZ    NOTFS               NO\n         ST    R14,SVR14           YES, SAVE RETURN AROUND CALL\n        #CALL  DOFS\n         L     R14,SVR14           RESTORE RETURN AFTER CALL\n         CH    R15,=H'4'           WHERE GO?\n         BE    SHTDWN              +4 - ERROR, MESSAGE AND EXIT\n         BH    *+L'*+6             +8 - ERROR, MESSAGE AND EXIT\n         CLI   REPLY,C'E'          +0 - OK, END?\n         BNER  R14                 NO, RETURN\nRSTFS    MVI   OPTFS,FSEXIT\n        @FS    OPTFS,MF=(E,FSPARM)\n         LR    R10,R15             RETAIN RETURN CODE\n         XR    R0,R0\n         ICM   R0,B'0011',ERRMSL\n         BZ    NOMSGE\n        TPUT   MSWRK,(0)\nNOMSGE   LTR   R10,R10\n         BZ    QUIT\n         MVC   MSWRK(L'ERRMS2),ERRMS2\n         CVD   R10,DBLW\n         MVC   MSWRK+29(4),=XL4'40202120'\n         ED    MSWRK+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSWRK+21\n         SRL   R0,4\n         STC   R0,MSWRK+20\n         NC    MSWRK+20(2),=XL2'0F0F'\n         TR    MSWRK+20(2),HEXTB\n        TPUT   MSWRK,L'ERRMS2\n         B     QUIT\nNOTFS    STM   R14,R12,12(R13)     SAVE HIS REGS\n         L     R3,LIST0            GET BUFFER LOCATION\n         L     R4,LIST0+4          GET LENGTH TO DISPLAY\nTPLOOP   LA    R0,80               ASSUME FULL LINE\n         CR    R4,R0               JUST THIS LINE?\n         BH    *+L'*+2             YES\n         LR    R0,R4               ELSE DO REMAINDER\n         LA    R1,0(R3)            GET ADDRESS\n        TPUT   (1),(0),R           DUMP THE LINE\n         LA    R3,80(R3)           NEXT LINE\n         SH    R4,=H'80'           GET REMAINING LENGTH\n         BP    TPLOOP              YES, CONTINUE\n         OC    LIST0+2*4(2*4),LIST0+2*4 READ?\n         BZ    TSOXT               NO\n         L     R1,LIST0+2*4        GET READ ADDRESS\n         L     R0,LIST0+3*4        GET LENGTH\n         O     R1,=X'80000000'     TGET\n        TGET   (1),(0),R           READ\n         ST    R1,LIST0+4*4        AND SAVE RETURNED LENGTH\nTSOXT    LM    R14,R12,12(R13)     RESTORE REGS\n         OC    REPLY(L'REPLY),BLANKS MAKE IT UPPER CASE\n         CLI   REPLY,C'E'          END?\n         BE    QUIT                YES\n         BR    R14                 RETURN\n         EJECT\n*- - - - C O N S T A N T S - - - - - - - - - - - - - - - - - - - - - -*\n*------- MESSAGES\n         SPACE 1\nASKPPP   DC    C'ENTER PEBBLES (1-9) PER PIT'\nVERMSG   DC    C'SHALL I VERIFY YOUR MOVES AFTER YOU''VE MADE THEM?'\nASKBRD   DC    CL80'ENTER CONTENTS OF PITS STARTING WITH MY KALAH AND'\n         DC    CL80'PROCEEDING COUNTERCLOCKWISE TO MY PIT 1.'\n         DC    CL80'KALAH BOARD :                1 2 3 4 5 6  <--- MY NX\n               UMBERED PITS'\n         DC    CL80'              MY KALAH -> 0               0 <- YOURX\n                KALAH'\n         DC    C'                             1 2 3 4 5 6  <--- YOUR NUX\n               MBERED PITS'\nLASKBRD  EQU   *-ASKBRD\nASKTRAC  DC    CL80'ENTER MAXIMUM LEVEL TO WHICH TO TRACE (0-9),'\n         DC    C'OR ENTER ''R'' (RESET) TO SET TRACE OFF.'\nLASKTRAC EQU   *-ASKTRAC\nASKFIR   DC    C'WHO GOES FIRST? YOU OR ME?'\nBADPIT   DC    C'INVALID OR EMPTY PIT, RE-ENTER'\nBAGAIN   DC    C'YOU GET ANOTHER MOVE'\nAAGAIN   DC    C'I GET ANOTHER MOVE, '\nMYMOVE   DC    C'MY MOVE, '\nYOURMOVE DC    C'YOUR MOVE'\nIMOVED   DC    C'I''LL MOVE PIT XX'\nGAMEMSG  DC    CL80' '\n         DC    CL80'GAME OVER'\nBLANKS   DC    CL80' '\n         DC    CL80'SCORE  ME   YOU'\n         DC    CL80'GAME               '\n         DC    CL80'MATCH'\n         DC    CL80' '\n         DC    C'NEW GAME'\nLGAMEMSG EQU   *-GAMEMSG\nINMSG    DC    CL80'TYPE ''END'' AT ANY TIME TO EXIT THE GAME.'\n         DC    C'ENTER NULL LINE IF YOU WANT TO RE-DISPLAY THE SCREEN.'\nLGINMSG  EQU   *-INMSG\nERRMS0   DC    C' => NOT OUTSIDE TSO ENVIRONMENT | BYE-BYE'\nERRMS1   DC    C' => \"      \" - RC = ... - EXIT -'\nERRMS2   DC    C' => \"FSRTN\" - OPT = .. , RC = ... - EXIT -'\n         EJECT\n*------- VERTEX BOARD OPPOSITES\n         SPACE 1\nOPPS     DC    AL1(07),AL1(13),AL1(12),AL1(11),AL1(10),AL1(09),AL1(08)\n         DC    AL1(00),AL1(06),AL1(05),AL1(04),AL1(03),AL1(02),AL1(01)\n         SPACE 1\nOFFSETS  DS    0H\n         DC    AL2(240),AL2(324),AL2(328),AL2(332),AL2(336),AL2(340)\n         DC    AL2(344),AL2(268),AL2(184),AL2(180),AL2(176),AL2(172)\n         DC    AL2(168),AL2(164),AL2(0)\n         SPACE 1\n*------- LITERALS\n         SPACE 1\nEXTRP   EXTRACT *-*,'S',MF=L\nNONE     DC    0H'0',X'7FFF'\nVBLEN    DC    H'20'\nHEXTB    DC    CL16'0123456789ABCDEF'\n         SPACE 1\n        LTORG\n         EJECT\n*- - - - D O     F U L L     S C R E E N - - - - - - - - - - - - - - -*\n         SPACE 1\nDOFS    #XENT  ,\n         XR    R10,R10\n         TM    SWFSW,SW1ST\n         BO    DOFSW\n        @FSI   ,\n         LTR   R15,R15\n         BNZ   DOFIMM\n         OI    OPTFS,FSSKIP\n         LM    R2,R3,INITRA\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         OI    SWFSW,SW1ST\nDOFSW    LM    R2,R3,LIST0\n         CH    R3,=H'80'\n         BNH   *+L'*+22\n         CLC   0(80,R2),BLANKS\n         BNE   *+L'*+12\n         LA    R2,80(R2)\n         SH    R3,=H'80'\n         B     DOFSW+L'DOFSW\n         STM   R2,R3,DFSTL\n         XR    R7,R7\n         L     R1,SVR14\n         ICM   R7,B'0011',2(R1)    GET CALL FS NUMBER\n         CL    R7,=A(DOFSMX)\n         BNL   DOFVER\n         B     DOFSV(R7)\nDOFSV    B     DOFS0\n         B     DOFS1\n         B     DOFS2\n         B     DOFS3\n         B     DOFS4\n         B     DOFS5\n         B     DOFS6\n         B     DOFS7\n         B     DOFS8\n         B     DOFS9\n         B     DOFS10\nDOFSMX   EQU   *-DOFSV\nDOFS0    L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSMS)\n         BAS   R7,DOFSMV\n         OI    SWFSW,SWNMS\n         B     DOFSX\nDOFS1    L     R1,=A(FSG1)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSG2)\n         BAS   R14,DOFSRZ\n         TM    SWFSW,SWNMS\n         BO    *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\nDOFS1A   L     R1,=A(FSG1)\n         BAS   R7,DOFSMV\nDOFS3    NI    OPTFS,255-FSSKIP\n         BAS   R7,DOFSTM\n         B     DOFSX\nDOFS2    L     R1,=A(FSG1)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSG2)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         B     DOFS1A\nDOFS4    TM    SWFSW,SWNMS\n         BO    *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         BAS   R7,DOFSIN\n         B     *+L'*+4             +0\n         BAS   R7,DOFSSH           +4\n         NI    SWFSW,255-SWNMS\n         B     DOFS3\nDOFS5    L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSMS)\n         B     DOFS1A+L'DOFS1A\nDOFS6    L     R1,=A(FSMS)\n         CLC   0(80,R1),BLANKS\n         BE    *+L'*+8\n         LA    R1,80(R1)\n         B     *-14\n         BAS   R7,DOFSMV\n         OI    SWFSW,SWNMS\n         B     DOFSX\nDOFS7    TM    SWFSW,SWNMS\n         BO    *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         BAS   R7,DOFSIN\n         B     *+L'*+4             +0\n         BAS   R7,DOFSSH           +4\n         NI    SWFSW,255-SWNMS\n         B     DOFS3\nDOFS8    TM    SWFSW,SWTRC\n         BO    DOFS8A\n         LA    R0,20\n         L     R1,=A(TSMS)\n         MVC   0(80,R1),BLANKS\n         LA    R1,80(R1)\n         BCT   R0,*-10\n         OI    SWFSW,SWTRC\nDOFS8A   L     R1,=A(TSMS)\n         LA    R0,20*8\n         CLC   0(10,R1),BLANKS\n         BE    DOFS8B\n         LA    R1,10(R1)\n         BCT   R0,*-14\n         NI    SWFSW,255-SWTRC\n         NI    OPTFS,255-FSSKIP\n         LM    R2,R3,TSCRA\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         B     DOFS8\nDOFS8B   LM    R2,R3,DFSTL\n         BCT   R3,*+L'*+6\n         MVC   1(*-*,R1),0(R2)          << EXECUTED >>\n         EX    R3,*-6\n         B     DOFSX\nDOFS9    NI    SWFSW,255-SWTRC\n         NI    OPTFS,255-FSSKIP\n         LM    R2,R3,TSCRA\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         B     DOFSX\nDOFS10   CLC   DFSTL+4(4),=A(6*80)\n         BNH   DOFS3\n         LM    R2,R3,DFSTL\n         A     R2,=A(6*80)\n         S     R3,=A(6*80)\n         STM   R2,R3,DFSML\n         MVC   DFSTL+4(4),=A(5*80)\n         TM    SWFSW,SWNMS\n         BO    *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         BAS   R7,DOFSIN\n         B     *+L'*+4             +0\n         BAS   R7,DOFSSH           +4\n         NI    SWFSW,255-SWNMS\n         L     R1,=A(FSMS)\n         CLC   0(80,R1),BLANKS\n         BE    *+L'*+8\n         LA    R1,80(R1)\n         B     *-14\n         LM    R2,R3,DFSML\n         BAS   R7,DOFSMV1\n         B     DOFS3\n         SPACE 1\nDOFSRZ   LA    R0,6                          R14 = LINK REGISTER\n         MVC   0(80,R1),BLANKS\n         LA    R1,80(R1)\n         BCT   R0,*-10\n         BR    R14\nDOFSSH   L     R2,=A(FSG1)                   R7 = LINK REGISTER\n         L     R3,=A(6*80)\n         L     R4,=A(FSG2)\n         L     R5,=A(6*80+X'40000000')\n         MVCL  R2,R4\n         L     R1,=A(FSG2)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSG2)\nDOFSMV   LM    R2,R3,DFSTL                   R7 = LINK REGISTER\nDOFSMV1  CH    R3,=H'80'\n         BNH   DOFSMV2\n         MVC   0(80,R1),0(R2)\n         LA    R1,80(R1)\n         LA    R2,80(R2)\n         SH    R3,=H'80'\n         B     DOFSMV1\nDOFSMV2  CLC   0(80,R1),BLANKS\n         BE    *+L'*+6\n         MVC   0(80,R1),BLANKS\n         BCT   R3,*+L'*+6\n         MVC   0(*-*,R1),0(R2)          << EXECUTED >>\n         EX    R3,*-6\n         BR    R7\nDOFSIN   L     R1,=A(FSG1)                   R7 = LINK REGISTER\n         BAS   R14,DOFSINS\n         L     R1,=A(FSG2)\n         BAS   R14,DOFSINS\n         L     R1,=A(FSG1)\n         BAS   R14,DOFSINC\n         L     R1,=A(FSG2)\n         BAS   R14,DOFSINC\n         B     4(R7)\nDOFSINS  LM    R2,R3,DFSTL                   R14 = LINK REGISTER\n         LR    R4,R1\n         L     R5,=A(6*80+X'40000000')\n         CLCL  R2,R4\n         BER   R7\n         LM    R2,R3,DFSTL\n         CL    R3,=A(4*80)\n         BNHR  R14\n         L     R3,=A(4*80)\n         LR    R4,R1\n         L     R5,=A(4*80+X'40000000')\n         CLCL  R2,R4\n         BNER  R14\n         LM    R2,R3,DFSTL\n         A     R1,=A(4*80)\n         A     R2,=A(4*80)\n         S     R3,=A(4*80)\n         B     DOFSMV1\nDOFSINC  LA    R2,BLANKS                     R14 = LINK REGISTER\n         LA    R3,80\n         LR    R4,R1\n         L     R5,=A(6*80+X'40000000')\n         CLCL  R2,R4\n         BE    DOFSMV\n         BR    R14\nDOFSTM   LM    R2,R3,FSCRA                   R7 = LINK REGISTER\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         XC    LIST0+4*4(4),LIST0+4*4\n         TM    OPTFS,FSSKIP\n         BOR   R7\n         OC    LIST0+2*4(2*4),LIST0+2*4 NO READ?\n         BZR   R7\n         LM    R2,R3,LIST0+2*4\n         BASR  R4,0\n         LA    R5,C' '\n         SLL   R5,24\n         MVCL  R2,R4\n         LTR   R1,R1\n         BZ    DOFSTM1\n         CLI   0(R1),X'F3'         PF-KEY 3?\n         BE    *+L'*+8\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3)?\n         BNE   DOFSTM1\n         L     R2,LIST0+2*4\n         MVC   0(3,R2),=CL3'END'\n         LA    R2,3\n         ST    R2,LIST0+4*4\n         BR    R7\nDOFSTM1 @FSR   ,\n         LTR   R15,R15\n         BZR   R7\n         LTR   R1,R1\n         BNPR  R7\n         L     R2,LIST0+2*4\nDOFSTM2  OC    0(1,R2),3(R15)\n         CLI   0(R2),C' '\n         BNE   DOFSTM3\n         LA    R15,1(R15)\n         BCT   R1,DOFSTM2\n         BR    R7\nDOFSTM3  LR    R0,R2\n         LA    R2,1(R2)\n         LA    R15,1(R15)\n         BCT   R1,*+L'*+4\n         B     *+L'*+10\n         OC    0(1,R2),3(R15)\n         B     DOFSTM3+L'DOFSTM3\n         SR    R2,R0\n         ST    R2,LIST0+4*4\n         BR    R7\n         SPACE 1\nDOFIMM   MVC   MSWRK(L'ERRMS1),ERRMS1\n         MVC   MSWRK+5(6),=CL6'FSRTNI'\n         CVD   R15,DBLW\n         MVC   MSWRK+19(4),=XL4'40202120'\n         ED    MSWRK+19(4),DBLW+L'DBLW-2\n         LA    R10,4\n         B     DOFSX\nDOFERR   MVC   MSWRK(L'ERRMS2),ERRMS2\n         CVD   R15,DBLW\n         MVC   MSWRK+29(4),=XL4'40202120'\n         ED    MSWRK+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSWRK+21\n         SRL   R0,4\n         STC   R0,MSWRK+20\n         NC    MSWRK+20(2),=XL2'0F0F'\n         TR    MSWRK+20(2),HEXTB\n         LA    R0,L'ERRMS2\n         B     DOFERX\nDOFVER   MVC   MSWRK(L'DOFMSE),DOFMSE\n         SRL   R7,2\n         CVD   R7,DBLW\n         MVC   MSWRK+21(6),=XL6'402020202120'\n         ED    MSWRK+21(6),DBLW+L'DBLW-3\n         LA    R0,L'DOFMSE\nDOFERX   STH   R0,ERRMSL\n         LA    R10,8\nDOFSX   #XRET  RC=(R10)\nINITRA   DC    A(INITR,*+4,INITRL)\nFSCRA    DC    A(FSCR,*+4,FSCRL)\nTSCRA    DC    A(TSCR,*+4,TSCRL)\nDOFMSE   DC    C' => \"DOFS\" - NUMBER = ..... - EXIT -'\n         SPACE 1\n        #XEND  ,\n         SPACE 1\n         DROP  R9,R11,R12          KILL ALL ADDRESSABILITIES\n         EJECT\n*------- MESSAGES\n         SPACE 1\nASKPARMS DC    CL80'WHICH INITIAL PARAMETER(S) DO YOU WISH TO CHANGE?'\n         DC    CL80'L - LOOK AHEAD           P - PEBBLES/PIT          TX\n                - TRACE'\n         DC    CL80'W - WHO GOES FIRST       B - BOARD (INITIAL SET)  VX\n                - VERIFY'\n         DC    CL80'ENTER NEW LINE TO ACCEPT ALL DEFAULTS'\n         DC    C'AT LEAST ONE SPACE MUST SEPARATE MULTIPLE PARAMETERS SX\n               PECIFICATION.'\nLASKPARM EQU   *-ASKPARMS\nASKLHL   DC    CL80'GIVE ME A LEVEL OF SMARTS'\n         DC    CL80'1 = IMBECILE             2 = BEGINNER (DEFAULT)   3X\n                = AVERAGE'\n         DC    CL80'4 = FAIR TO GOOD         5 = CLEVER               6X\n                = INTELLEGENT'\n         DC    CL80'7 = GENIUS               8 = KALAH MASTER         9X\n                = COMPUTER UNBOUND'\n         DC    C'NOTE : LEVELS ABOVE 5 ARE VERY EXPENSIVE AND SLOW'\nLASKLHL  EQU   *-ASKLHL\n         SPACE 1\n*------- WISECRACKS\n         SPACE 1\nMSGA    @MSG   'THIS SHOULD BE FUNNY'\n        @MSG   'DUMB DUMB'\n        @MSG   'OH SLOW OF WIT'\n        @MSG   'MR. LOSER'\n        @MSG   '(GIVE UP YET?)'\n        @MSG   'OR SHOULD I SAY STUMBLE?'\n        @MSG   'OH KALAH KLUTZ'\n        @MSG   'PEBBLE HEAD'\n        @MSG   'GENERAL CUSTER'\n        @MSG   'MENTAL MIDGET'\n        @MSG   'CHICKEN KALAH-KING'\n        @MSG   'LITTLE ONE'\n        @MSG   'ARE YOU GOING TO GUESS AGAIN?'\n        @MSG   'DUMMKOPF'\n        @MSGGEN\n         SPACE 1\nMSGB    @MSG   'KALAH-MATY JANE'\n        @MSG   'CHAMP'\n        @MSG   'MR. WIZARD'\n        @MSG   'MASTER'\n        @MSG   'BOBBY FISCHER'\n        @MSG   'OH KING OF KALAH'\n        @MSG   '(HAVE MERCY!)'\n        @MSG   'KILLER'\n        @MSG   'BOSS'\n        @MSG   'TIGER'\n        @MSG   'GRAND VIZAR'\n        @MSG   'OH PROFOUND ONE'\n        @MSG   'WHIZZ KID'\n        @MSG   'SUPERMAN'\n        @MSG   '(DO YOU HAVE ANOTHER COMPUTER HELPING?)'\n        @MSG   'GARANAPLATZZZ'\n        @MSGGEN\n         SPACE 1\nMSGC    @MSG   'A FREE TRIP THRU THE NEW YORK SLUMS'\n        @MSG   'A CEE-GAR'\n        @MSG   'A RIPE BANANA'\n        @MSG   'A PLATINUM PEBBLE'\n        @MSG   'A KEWPIE DOLL'\n        @MSG   'AN HONORARY DEGREE'\n        @MSG   'A CHOCOLATE COVERED DEWEY BUTTON'\n        @MSG   'A STANDING OVATION'\n        @MSG   'A CHAUFERED TRICYCLE'\n        @MSG   'A MEDAL'\n        @MSG   'A M.U.S.'\n        @MSG   'AN ALL EXPENSE-PAID TRIP TO EAST LEFTOVERSHOE'\n        @MSG   'A FREE CERTIFICATE TO GET HIS TYPING FINGER BRONZED'\n        @MSGGEN\n         SPACE 1\nMSGD    @MSG   'THINKING...'\n        @MSG   'CONTEMPLATING...'\n        @MSG   'COGITATING...'\n        @MSG   'MEDITATING...'\n        @MSG   'PONDERING...'\n        @MSG   'CONSIDERING...'\n        @MSG   'ANALYZING...'\n        @MSG   'CALCULATING...'\n        @MSG   'RUNNING UP YOUR BILL...'\n        @MSG   'SLEEPING...'\n        @MSG   'ZZZZZZZZ...'\n        @MSG   'SPINNING MY WHEELS...'\n        @MSG   'LOOPING AND LOOPING AND LOOPING AND...'\n        @MSG   'HMMMMMMM....'\n        @MSG   'GRUNT, GRUNT, GRUNT...'\n        @MSGGEN\n         SPACE 1\nMSGE    @MSG   'I WIN (OF COURSE)'\n        @MSG   'I WIN (WANT MY AUTOGRAPH?)'\n        @MSG   'I WIN! I WIN! I WIN!'\n        @MSG   'I WON. THAT WAS EASY.'\n        @MSGGEN\n         EJECT\n*- - - - S C R E E N     D A T A - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nINITR   $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nINITRL   EQU   *-INITR\n         SPACE 1\nFSCR    $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,INT),MF=L\n        $FS    SBA=(1,21),MF=L\n        $FS    TEXT='K A L A H -- ANCIENT EGYPTIAN BOARD GAME',MF=L\n        $FS    SBA=(2,1),SF=(PROT,INT),RA=(2,80,-),MF=L\n        $FS    SF=(PROT),MF=L\nFSG1    $FS    TEXT=(' ',80),MF=L       1 -> (3,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6 -> (8,1)\n        $FS    SF=(PROT,INT),RA=(9,80,-),MF=L\n        $FS    SF=(PROT),MF=L\nFSG2    $FS    TEXT=(' ',80),MF=L       1 -> (10,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6 -> (15,1)\n        $FS    SF=(PROT,INT),RA=(16,80,=),MF=L\n        $FS    SF=(PROT),MF=L\nFSMS    $FS    TEXT=(' ',80),MF=L       1 -> (17,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6 -> (22,1)\n        $FS    SF=(PROT,INT),MF=L\n        $FS    TEXT='===>',MF=L\n        $FS    SF=NORMAL,MF=L\n        $FS    SBA=(23,80),SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nFSCRL    EQU   *-FSCR\n         SPACE 1\nTSCR    $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,INT),MF=L\n        $FS    SBA=(1,28),MF=L\n        $FS    TEXT='K A L A H -- TRACE OPTION',MF=L\n        $FS    SBA=(2,1),SF=(PROT,INT),RA=(2,80,-),MF=L\n        $FS    SF=(PROT),MF=L\nTSMS    $FS    TEXT=(' ',80),MF=L       1 -> (3,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6\n        $FS    TEXT=(' ',80),MF=L       7\n        $FS    TEXT=(' ',80),MF=L       8\n        $FS    TEXT=(' ',80),MF=L       9\n        $FS    TEXT=(' ',80),MF=L      10\n        $FS    TEXT=(' ',80),MF=L      11\n        $FS    TEXT=(' ',80),MF=L      12\n        $FS    TEXT=(' ',80),MF=L      13\n        $FS    TEXT=(' ',80),MF=L      14\n        $FS    TEXT=(' ',80),MF=L      15\n        $FS    TEXT=(' ',80),MF=L      16\n        $FS    TEXT=(' ',80),MF=L      17\n        $FS    TEXT=(' ',80),MF=L      18\n        $FS    TEXT=(' ',80),MF=L      19\n        $FS    TEXT=(' ',80),MF=L      20 -> (22,1)\n        $FS    SF=(PROT,INT),MF=L\n        $FS    TEXT='===>',MF=L\n        $FS    SF=NORMAL,MF=L\n        $FS    SBA=(23,80),SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nTSCRL    EQU   *-TSCR\n         EJECT\n*- - - - V A R I A B L E S - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nDATA     DSECT\n         DS    18F                 SAVE AREA\n         DS    18F                 ADDITIONAL SAVE AREA\nEXTR    EXTRACT *-*,'S',MF=L\nLEXTR    EQU   *-EXTR\nSVR14    EQU   EXTR,4\nATSO     DS    F\nSWFSW    EQU   ATSO,1              SCREEN FUNCTIONS\nSWTRC    EQU   X'80'\nSW1ST    EQU   X'10'\nSWNMS    EQU   X'08'\nERRMSL   EQU   ATSO+2,2\nFLAGS    DS    XL1                 GENERAL FUNCTIONS\nVERIFY   EQU   X'80'                    VERIFY USERS MOVES FOR HIM\nTESTING  EQU   X'40'                    TESTING, SHOW PATH\nSCTERM   EQU   X'08'                    SCREEN TERMINAL\nOPTS     DS    XL1                 OPTIONS SELECTED\nOPTSL    EQU   X'80'                    LEVEL GIVEN\nOPTSP    EQU   X'40'                    PEBBLES PER PIT GIVEN\nOPTST    EQU   X'20'                    TRACE LEVEL GIVEN\nOPTSW    EQU   X'10'                    WHO GOES FIRST GIVEN\nOPTSB    EQU   X'08'                    INITIAL BOARD GIVEN\nOPTSV    EQU   X'04'                    VERIFICATION REQUESTED\nVERPIT   DS    XL1                 B'S BEST MOVE\nTRACE    DS    XL1                 MAXIMUM LEVEL TO TRACE\nMAXLV    DS    H                   MAXIMUM LOOK AHEAD\nPPP      DS    H                   PEBBLES/PIT\nAMATCH   DS    H                   MY MATCH SCORE SO FAR\nBMATCH   DS    H                   HIS MATCH SCORE SO FAR\nSCREEN   DS    800C\nLIST0    DS    A         TUPT-TGET LIST +0 = SCREEN ADDRESS\n         DS    F                        +4 = SCREEN TEXT LENGTH\n         DS    A                        +8 = REPLY ADDRESS\n         DS    F                        +12 = MAX. REPLY LENGTH\n         DS    F                        +16 = TRUE REPLY LENGTH\nREPLY    DS    CL80\nMSWRK    DS    CL80\nSVRDP    DS    XL8\nDBLW     DS    D\n         EJECT\n*------- VERTEX BLOCKS\n         SPACE 1\nSIZE     EQU   10                  NUMBER OF POSSIBLE LEVELS\nVER      DS    0F\nVLV      DS    XL1\nVOP      DS    XL1\nVOS      DS    H\nVPL      DS    CL1\nVCP      DS    XL1\nVARR     EQU   *\nVAK      DS    XL1\nVB1      DS    XL1\nVB2      DS    XL1\nVB3      DS    XL1\nVB4      DS    XL1\nVB5      DS    XL1\nVB6      DS    XL1\nVBK      DS    XL1\nVA1      DS    XL1\nVA2      DS    XL1\nVA3      DS    XL1\nVA4      DS    XL1\nVA5      DS    XL1\nVA6      DS    XL1\n         DS    (SIZE*5)F\n         SPACE 1\nDFSTL    DS    2F                  TEXT ADDRESS / LENGTH\nDFSML    DS    2F                  MESSAGE ADDRESS / LENGTH\nFSPARM  @FS    ,,,MF=L\nOPTFS   @FSO   ,\n         SPACE 1\nDATALEN  EQU   (((*-DATA)+7)/8)*8\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KALAH$": {"ttr": 6402, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//KALAH    JOB (........),'INSTALL  -KALAH-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*   A N C I E N T     E G Y P T I A N     B O A R D     G A M E     *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS2,MBR=KALAH\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   KALAH\n  NAME    KALAH(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KLINGON": {"ttr": 6404, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\tW:$:$\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T09:57:00", "lines": 14884, "newlines": 14884, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=##DOC\n1                                                          DOC - Page 1\n\n    Following is the documentation to install the fun and versatile\n  Space War Game \"KLINGON\".\n\n    Complete, ready to print rules are in member #RULES. You may print\n  it using the PRINTDS TSO command, as e.g. :\n\n    TSO PRINTDS DA('______________________________________(#RULES)')\n                CCHAR CLASS(A) DEST(________)\n\n    Program KLINGON : a Space War Game\n    By : Larry WILLIAMS\n    With consulting and assistance : Mark STEVENS\n    This version updated by : MOINIL P.A. - J.R.C. Ispra, Italy.\n                              (April 1993)\n\n    Programmer's notes\n    ==================\n\n    KLINGON is a Space War Game written for Control Data Corporation\n  machines 6000 or higher with FORTRAN 5 (ANSI 1977 standard).\n    Version 1.2 was updated in 1987 - MARCH to operate under MVS/TSO\n  on 3270 24, 32 or 43 lines terminals in fullscreen mode and via\n  FORTRAN I/O (UNITS 5/6) for non 3270.\n    This version is now with Assembler H and FORTRAN VS compiler, and\n  operates under MVS/XA 2.2.3.\n\n    Copyright notice :\n    ------------------\n    Permission is hereby granted for the copying, distribution,\n  modification and use of this program and associated documentation\n  for recreational purposes, provided that all references to the author\n  are retained.\n    However, permission is not and will not be granted for the SALE or\n  PROMOTIONAL use of this program or program documentation, or for use\n  in any situation in which PROFIT may be considered on objective,\n  since it is the desire of the author to respect the copyrights of\n  the originators of STAR TREK.\n\n    STAR TREK is a trademark of Paramount Pictures.\n\n    This program was finished in JANUARY, 1983.\n1                                                          DOC - Page 2\n\n    INSTALLATION INSTRUCTIONS\n    =========================\n\n  (1) - Assuming Assembler H and FORTRAN VS compiler are available.\n        If you do not have a version of FORTRAN available, a job has\n        been provided (#GETFORT) in the original PDS (file 38 of CBT 92\n        MAR tape) to unload the compiler and callib from that CBT tape.\n\n        ( ) - FORTRAN VS is already installed\n              Write DS-names of FORTRAN VS libraries below :\n\n              COMPILER _______________________________________________\n\n              LNK-CALL _______________________________________________\n\n\n  (2) - Allocate a PDS (your choice of name) that is able to hold all\n        data, i.e. : SPACE=(CYL,(3,1,30)\n                     BLKSIZE=3120\n                     LRECL=80\n        for use as a work OBJECT library.\n\n        ( ) - Write DS-name here _____________________________________\n\n\n  (3) - Review the member SHIFTAB, and decide when KLINGON should be\n        allowed to be played, the default is to allow play anytime.\n        Update this member if exclusions are to be made.\n\n\n  (4) - Decide what load library you would like the modules \"KL\" (main\n        routine) and \"INITKL\" (file init routine) to be installed into.\n\n        ( ) - Write DS-name here _____________________________________\n\n\n  (5) - Edit Member #JCLFULL and modify the data-sets names as needed.\n        Data-sets names that need to be modified are marked with \"<-\"\n        at the right margin.\n        Please note : the JCL marked with a '$' in column 1 is the\n        prototype JCL to actually assembly/compile/link KLINGON, do not\n        change any parms except the work unit name (VIO is default).\n        You should change the JOB card in the $ jcl to meet with your\n        standards, the card may be continued if needed.\n\n        If FORTRAN VS is not the desired FORTRAN, modify the compiler\n        program name as needed.\n\n        If you wish to review the JCL before submitting it, modify the\n        FT14F001 DD card to NOT use the internal reader.\n1                                                          DOC - Page 3\n\n  (6) - Run the #JCLFULL JOB.\n        This job will feed a job to the internal reader to assemble and\n        link KLINGON.\n\n  (7) - Copy the graphics file to a sequential data-set.\n        Allocate a LRECL 80 data-set to hold the graphics data, and\n        copy member #GRAFICS to that file.\n\n        ( ) - Write DS-name here _____________________________________\n\n        Note : a PDS should not be used since the DSN-ENQ will tie up\n               the whole file, also, IBM access methods used by old\n               FORTRAN can be confused opening two members at the same\n               time.\n\n  (8) - Copy the rules file to a sequential data-set.\n        Allocate a LRECL 80 data-set to hold the rules data, and copy\n        member #RULES to that file.\n\n        ( ) - Write DS-name here _____________________________________\n\n\n  (9) - Copy the help file to a sequential data-set.\n        Allocate a LRECL 80 data-set to hold the help data, and copy\n        member #KLHELP to that file.\n\n        ( ) - Write DS-name here _____________________________________\n\n        ( ) - Be sure to modify the comments in the help file to say\n              where the rules \"manual\" is stored (member #RULES).\n\n        Note : a PDS should not be used since the DSN-ENQ will tie up\n               the whole file, also, IBM access methods used by old\n               FORTRAN can be confused opening two members at the same\n               time.\n\n  (10)- Modify the CLIST for the game.\n        Modify CLIST #KLPROC to meet your requirements (see steps 4-9).\n\n        The default UNIT type for the \"high-speed work files\" is VIO,\n        if desired, this may be changed to SYSDA instead.\n\n        ( ) - Move the modified CLIST to the library of your choice.\n\n  (11)- Try the game | Should work great.\n\n  (12)- At this point, the object file may be deleted (if desired).\n1                                                          DOC - Page 4\n\n    DEBUGGING INFORMATION\n    =====================\n\n    KLINGON is a rather advanced game program, and sometimes data for\n  debugging needs to be collected.\n\n    To collect bebugging data the FT10F001 file must be pre-allocated\n  for the users who are allowed to do it (see step 10, CLIST #KLPROC).\n\n    To activate debugging trace :\n       - at the \"COMMAND ?\" prompt in KLINGON, enter \"XDEBUG\" command,\n       - the password to activate/deactivate XDEBUG is \"NONA\".\n\n ----------------------------------------------------------------------\n\n    If you have any questions/comments, etc... address your mail to :\n\n         Larry Williams\n         P.O. Box 8069\n         Bartlett, IL  60103\n\n    or : MOINIL P.A. -- Phone number : (0332) 789442\n         Computing Centre (TP 361)\n         J.R.C. - Ispra Establishment\n         21020 ISPRA (VA), ITALY\n\n ----------------------------------------------------------------------\n./     ADD     NAME=##NEW\n1\n  File 038\n  ========\n\n    The changes to \"KLINGON\" provide the same level of graphics support\n  to MODEL-3 (32 by 80) screens as is currently available to MODEL-2\n  (24 by 80) and MODEL-4 (43 by 80) screen.\n\n    To produce this enhancement, the following members were changed and\n  are supplied in this file :\n       #GRAFICS\n       CPAGE\n       FSIO1\n       FSIO2\n       INTRO\n\n    These changes added 03/27/90 to file 038. They are from Mr Greg\n  PRICE of Australia, see file 001 of the CBT MVS MODS tape for Greg's\n  address in Australia.\n\n                                        Arnie CASINGHINO (03/27/90)\n1\n  Changes to original file 038 (from CBT 92 MAR tape)\n  ===================================================\n\n  The following changes were applied on April 28th 1993 :\n    1. Member MEMLPG deleted (unused).\n    2. Member IWV deleted (was an exact copy of member IW), so use of\n       IWV has been replaced everywhere by IW.\n    3. Member SZTERM deleted (his process and more has been included\n       in member GAINIT).\n    4. Member STIMER deleted (his process has been included in member\n       FSIO2).\n    5. Member CPAGE deleted (his process and more has been inserted in\n       members FSIO1 and FSIO2).\n    6. Assembler member INSFOR added (routine).\n    7. Members #GETFORT and #SRULES deleted (we don't use them), and\n       member #RULES modified to be printed A4 paper format.\n       Also member ##DOC reworked to reflect changes.\n    8. Member #KLSEQ and #KL3270 replaced by member #KLPROC (now unique\n       procedure to invoke \"KLINGON\").\n    9. Member #ERASE added (TSO command needed by new the procedure\n       #KLPROC, which allows to run also under ISPF).\n       Note : this TSO command is identical to the one distributed in\n              the ->.SOURCE.FILE0 (don't install if already linked in\n              the LPALIB).\n   10. Member #JCLPROG modified to generate only one job.\n   11. Member #JCLFULL modified to use our JOB and JOBPARM cards, the\n       Assembler H and the FORTRAN VS compiler (MVS/XA 2.2.3 version),\n       and now, all steps are given a zero return code.\n\n  Data-sets names :\n  =================\n\n  Here follows the list of all the data-sets names defined to generate\n  and use KLINGON at our installation (see member ##DOC and the various\n  other members where they appear to make your changes) :\n       <User-id>....                 <Group-id>....\n       ->.USER.KL.CNTL               ->.GROUP.KL.GRAPH\n       ->.USER.KL.DATA               ->.GROUP.KL.HELP\n       ->.USER.KL.OBJ                ->.GROUP.KL.LOAD\n                                     ->.GROUP.KL.RULES\n       <System-id>....               <System-id>....\n       SYS1.MACLIB                   SYS1.VF23COMP\n       SYS1.MODGEN                   SYS1.VF23FORT\n\n                              G O O D     L U C K\n\n                                        MOINIL P.A. (04/28/93)\n                                        Computing Centre (TP 361)\n                                        J.R.C. - Ispra Establishment\n                                        21020 ISPRA (VA), ITALY\n./     ADD     NAME=#ERASE\n//ERASE    JOB (........),'INSTALL -ERASE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)\n/*JOBPARM L=2\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT,RENT'\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\nTESR     TITLE '--- TERMINAL ERASE SCREEN SUBROUTINE/TSO COMMAND ---'\nERASE    START 0\n         SPACE 1\n* PURPOSE : ERASE THE SCREEN OF A TERMINAL AND SET CURSOR AT THE TOP\n*               OF IT (ROW 1 - COLUMN 1).\n* MAY BE USED : 1. AS TSO COMMAND : ERASE\n*               2. AS PROGRAM ROUTINE : CALL ERASE\n* AUTHOR : MOINIL P.A.\n*               COMPUTING CENTRE\n*               J.R.C. - ISPRA ESTABLISHMENT\n*               21020 ISPRA (VA), ITALY\n         SPACE 1\n        YREGS\n         SPACE 1\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n         USING ERASE,R12           WE GOT IT\n        GETMAIN R,LV=72            GET SAVE AREA\n         LR    R15,R13             PREVIOUS SAVE AREA\n         LR    R13,R1              CURRENT SAVE AREA\n         XC    0(18*4,R13),0(R13)  CLEAR SAVE AREA\n         ST    R13,8(R15)          LINK SAVE AREAS\n         ST    R15,4(R13)\n        GTSIZE\n         LTR   R4,R0               IS IT A SCREEN TERMINAL?\n         BZ    EXIT                NO, BYPASS\n         USING PSA,R0              WE HAVE TO GET IT FROM ASXB\n         L     R3,PSAAOLD          GET OUR ASCB ADDRESS\n         DROP  R0\n         USING ASCB,R3\n         L     R3,ASCBASXB         GET ASXB ADDRESS\n         DROP  R3\n         USING ASXB,R3\n         L     R2,ASXBMPST         VTAM MEMORY PROCESS SCHED. TABLE\n         DROP  R3\n         LTR   R2,R2               CHECK IF VTAM OR TCAM?\n         BZ    TCAM                ADDRESS DOESN'T EXIST : TCAM\n         CLM   R4,B'0001',SZ24     NORMAL SCREEN SIZE?\n         BNE   ALTSZ               NO\n         LA    R0,CLERNL           NORMAL SIZE\n         LA    R1,CLERN            NORMAL CLEAR\n         B     SEND\nALTSZ    LA    R0,CLERAL           ALTERNATE SIZE\n         LA    R1,CLERA            ALTERNATE CLEAR\nSEND     ICM   R1,B'1000',FUSCR\n        TPUT   (1),(0),R\n        STLINENO LINE=1\n        STTMPMD OFF\n         B     EXIT\nTCAM    TPUT   ERBUF,ERBUFL,ASIS   ERASE SCREEN AND SET CURSOR\nEXIT     LR    R1,R13              CURRENT SAVE AREA\n         L     R13,4(R13)          PREVIOUS SAVE AREA\n        FREEMAIN R,LV=72,A=(1)     FREE SAVE AREA\n        RETURN (14,12),T,RC=0      RESTORE REGISTER AND BACK TO CALLER\n         SPACE 1\n*------- FIXED CONSTANTS\n         SPACE 1\nERBUF    DC    X'401140403C40400013'\nERBUFL   EQU   *-ERBUF\nCLERN    DC    X'27F5C111404013'\nCLERNL   EQU   *-CLERN\nCLERA    DC    X'277EC111404013'\nCLERAL   EQU   *-CLERA\nSZ24     DC    AL1(24)             24 LINES SCREEN\nFUSCR    DC    XL1'03'\n         SPACE 1\n        PRINT  NOGEN\n        IHAPSA\n        IHAASCB\n        IHAASXB\n         SPACE 1\n         END\n/*\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,RENT',COND=(4,LT)\n//SYSLMOD   DD DSN=SYS1.CMDLIB,DISP=OLD\n//* --------> OR : SYS1.LPALIB\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD *\n  ENTRY   ERASE\n  NAME    ERASE(R)\n/*\n./     ADD     NAME=#GRAFICS\nMOVE43000100 ===================================================================\n                    .   .                 .    .          .     .   .\n  .     .   .                 .                             .         .    .\n                  .       .         .                .\n  .                                        .      .              .\n      .   .      .    .         .                         .            .   .\n                   .      .          .\n      .      .                          .    .\n  .               .    . .       .     .   .      .     .    .          .\n     .                                                             .\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n             .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\n    .                                               .             .  .\n                           .                                               .  .\n          .   .                  .      .   .\n                      .                                .\n   .                                                                .  .\n                                     .               .\n             .              .                               .   . .\n  .                   .               .\n         .                       .                  .              .\n                                                           .\nMOVE43000000 ===================================================================\n \u00c8     \u00c8   \u00c8    \u00c8       \u00c8    \u00c8    \u00c8                    /     /         /    /\n\u00c8                \u00c8       \u00c8         \u00c8         /      / /            /\n \u00c8  \u00c8   \u00c8      \u00c8    \u00c8         \u00c8             /      /        /     /      /   /\n     \u00c8   \u00c8      \u00c8\u00c8   \u00c8  \u00c8      \u00c8                           /            /   /\n    \u00c8      \u00c8      \u00c8      \u00c8                /    /\n\u00c8    \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /          /\n \u00c8 \u00c8             \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8                                                             /\n       \u00c8 \u00c8    \u00c8      \u00c8                       /             /               /\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\n /  /   /   / /     /            /      \u00c8     \u00c8            \u00c8     \u00c8          \u00c8\n   /   /     /     /            /        \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8\n                          /                           \u00c8             \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8                               \u00c8\n        /   /        /         /          \u00c8   \u00c8         \u00c8\n  /                 /                                    \u00c8           \u00c8  \u00c8\n /                                                    \u00c8               \u00c8  \u00c8\n            /              /                           \u00c8     \u00c8   \u00c8 \u00c8\n /         /         /    /            \u00c8                      \u00c8   \u00c8 \u00c8\n/       /           /           /       \u00c8            \u00c8              \u00c8\nMOVE43000000 ===================================================================\n \u00c8     \u00c8   \u00c8    \u00c8       \u00c8    \u00c8    \u00c8           /      / /     /      /  /    /\n\u00c8  \u00c8   \u00c8      \u00c8  \u00c8 \u00c8     \u00c8   \u00c8     \u00c8         /      / /      /     /      /   /\n \u00c8  \u00c8   \u00c8      \u00c8\u00c8   \u00c8  \u00c8      \u00c8             /      /        /     /      /   /\n   \u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8   \u00c8  \u00c8      \u00c8                /          /            /   /\n    \u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /          /\n\u00c8 \u00c8  \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8           \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8 \u00c8    \u00c8      \u00c8                         /             /       /       /\n   \u00c8   \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8              /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\n /  /  //   / /     /  /        //      \u00c8     \u00c8         \u00c8  \u00c8     \u00c8     \u00c8    \u00c8\n/  /   /   / /     /            /        \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8      \u00c8\n  /   /     /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8                     \u00c8\n  /    /   /        /         /            \u00c8   \u00c8         \u00c8           \u00c8  \u00c8\n /                 /                                  \u00c8   \u00c8           \u00c8  \u00c8\n/           /              /                           \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /         /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8\n/       / /         /    /      /       \u00c8            \u00c8         \u00c8   \u00c8\u00c8\u00c8\nMOVE43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8     \u00c8   \u00c8\u00c8    \u00c8           /      / /     //     /  /   //  /\n\u00c8  \u00c8   \u00c8      \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8     \u00c8         /      / /      /     /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8   \u00c8  \u00c8      \u00c8             /    / /        /     /      /   /\n   \u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8  \u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /      /   /\n\u00c8 \u00c8 \u00c8\u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8 \u00c8       \u00c8       /   /  /   /     /   //      /   /   /\n  \u00c8 \u00c8 \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8                /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8     \u00c8    \u00c8 \u00c8\n/  /  //   / /     /  /        //        \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8    \u00c8\n  /   /   / /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n  /    /   /        /  /      /            \u00c8   \u00c8         \u00c8           \u00c8  \u00c8      \u00c8\n /        /        /         /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8\n/           /     /        /                           \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /         /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8\nMOVE43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8    \u00c8           /      / /     //     /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8     \u00c8         /    / / /      /     /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8  \u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8 \u00c8\u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /      /   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8       \u00c8         /   // /   /     /   //      /   /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   /  /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8    \u00c8 \u00c8\n  /  //   / /     /  /    /   //          \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n  /    /   /        /  /      /            \u00c8   \u00c8         \u00c8           \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /        /  /      /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8\n/        /  /     /        //                \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /     /   /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nMOVE43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8    \u00c8           /    / / /     //     /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8 \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   // /   /     /   //      /   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /    /    //\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /     /  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /  //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n  /    /   /   /    /  /    / /            \u00c8 \u00c8 \u00c8         \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /        /  /      /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8 \u00c8\n/        /  /     /  /     //                \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /      /  /     /   /    //           \u00c8      \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nMOVE43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8 \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   // /   /    //   //      /   /\n \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / /  /    //\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /   //    //\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /    //  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n/  // ///  / /     /  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/  //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8      \u00c8  \u00c8 \u00c8  \u00c8\n  /    /   /   /    /  /    / /            \u00c8 \u00c8 \u00c8         \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /   /    /  /    / /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8           \u00c8  \u00c8 \u00c8\n/        /  /     /  /     //                \u00c8   \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8  \u00c8 \u00c8\n /      /  /     /   /    //           \u00c8      \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/      // /     /   /    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //   //      /   /\n\u00c8 \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / /  //   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //    //\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /     / /     / /   /   //   ///\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n // // ///  / /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n  // ///  / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8\n  //   /   /   /  / /  /   // /            \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8    \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /    /  /    / /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8\n//       /  //    /  /    ///                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n /      /  /     /  //    //           \u00c8      \u00c8   \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // /     /   /    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //   //      /   /\n \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / /  //   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //   ///\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n/ //   /   /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /  / /  /   // /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8   \u00c8  \u00c8    \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //    /  /    ///                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n//      /  //    /  //   ///           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // /     /  //    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8 \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///   //  /   //  /\n\u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /   ///   //    / /  //\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   / / / /   ///   / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///  ///\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n/ //   / / /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /  / /  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //  / /  /   ////                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n//  /   /  //    /  //   ///           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // //    /  //   ///     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8   \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///   //  / / // //\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /   ///   //    / /  //\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   / / ///   ///   / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   / / / /   ///   / / ///   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /  //  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ ///  / / /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   / / /   /  / /  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //  / /  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//  /   /  //  / /  //  ////           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/  /   // //    /  //   ///     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8   \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /// ///  //// / / /////\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /// ///  ////   / / ///\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /// ///  ////   / / ///\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /// ///  ////   / / ///  /\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /// / /  ////   / / ///  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // / /  //  ///  /   // /            \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n ///  / / /  //  ///  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n///  / / /  //  / /  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//  / / /  //  / /  //  ////           \u00c8      \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/  / / // //  / /  //  ////     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /// ///  //// / / /////\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /// ///  ////   / / ///\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /// ///  ////   / / ///\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /// ///  ////   / / ///  /\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /// / /  ////   / / ///  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n\u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // / /  //  ///  /   // /            \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n /// // / /  //  ///  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n/// // / /  //  ///  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n// // / /  //  ///  //  ////           \u00c8      \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/ // / // //  ///  //  ////     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\nMOVE43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8                 /   // /   /// ///  ////   / / ///\n\u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8                 /   // /   /// / /  ////   / / ///\n \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8               /   // /   /// / /  ////   / / ///\n\u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8             /   // /   /// / /  ////   / / ///  /\n \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                    / /    // /    // /   / / //   //\n\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                  / /    // /    // /   /   //   ///\n\u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                / /    // /    // /   /   //   ///\n \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              /      // /    /  /   /   //   ///\n  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                /      //      /  /       /    ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\n /// /   / /  /    /    /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8\n/// / / / /  /    /   //   /   /               \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n// / / / // /    /   //   /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8\n/// /// // /    //  //   /   //            \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // /    //  //   /   //              \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // /    //  //   /   //                \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n /// // / /  //  //   /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n/// // / /  //  ///  /   // /                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n// // / /  //  ///  /   // /                  \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/ // / // //  ///  /   // /                    \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8 \u00c8\nMOVE43000000 ===================================================================\n \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                            / /    // /    // /   /   //\n  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                          /      // /    // /   /   //\n   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                            /      //      /  /       /\n\u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                 //      /  /       /    /\n \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                               //      /  /       /    //\n  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                             /       /          /    //\n\u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                           /       /          /    //\n \u00c8                                                 /                  /     /\n  \u00c8                                                                  /     /\n                                                                    /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   /\n  /                                                 \u00c8                         \u00c8\n /                                                   \u00c8                    \u00c8    \u00c8\n/ /       /            /                              \u00c8           \u00c8        \u00c8\n /       /            /                           \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8 \u00c8\n/       /       /    /                             \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8\n     / /       /    /   /                         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8\n    / /  /    /    /   /                           \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8\n   / /  /    /    /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\n/ / /  /    /   //   /   /                           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\n / // /    /   //   /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8\n/ // /  / //  //   /   /                         \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8\nMOVE43000150 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNEWQ43000100 ===================================================================\n   .           .        .   .    .    .       .       .      .   .   .       .\n         .   .     .   .          .                         .             .   .\n    .                     .                    .      .           .     .    .\n            .     .              .   .   .          .           .   .\n     .               .     .\n.     .                                        .     .    .    .           .\n          .    .                   .                           .    .\n                        .    .           .          .\n   .     .        .\n .            .           .         .          .          .     .       .    .\n        .            .        .\n   .                                    .                            .\n            .    .                .           .      .           .       .   .\n                         .                                 .\n  .      .      .   .                   .\n            .         .         .              .     .    .       .\n      .        .          .  .                                          .   .\n                                   .   .                     .\n         .   .     .    .    .             .                       .\n    .                         .                         .                .  .\n                  .                 .       .   .           .\n  .     .    .                          .                     .     .          .\n                        .                            .\n    .                          .     .     .    .                         .   .\n          .       .                                      .\n                          .                                    .     .    .\n .      .     .       .         .                  .     .       .          .\n                                     .     .\n           .      .                                      .             .   .   .\n    .                     .                         .       .    .\n .      .                       .     .   .    .                      .    .\n           .  .                                      .\n   .                  .                    .                .\n          .      .                                .      .        .        .\n    .  .      .            .       .                                  .\n           .                                           .                      .\n                              .            .      .           .\n .      .          .                 .                             .       .\n              .             .                     .     .  .    .             .\n                                  .      .     .                      .\n           .           .             .                             .       .\n                             .                       .        .\n                 .\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDA43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nREDB43000000 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\n\n\n\n\n\nINTR43000300 ===================================================================\n                    .   .                 .    .          .     .   .\n  .     .   .                 .                             .         .    .\n                  .       .         .                .\n  .                                        .      .              .\n      .   .      .    .         .                         .            .   .\n                   .      .          .\n      .      .                          .    .\n  .               .    . .       .     .   .      .     .    .          .\n     .                                                             .\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n             .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\n    .                                               .             .  .\n                           .                                               .  .\n          .   .                  .      .   .\n                      .                                .\n   .                                                                .  .\n                                     .               .\n             .              .                               .   . .\n  .                   .               .\n         .                       .                  .              .\n                                                           .\nINTR43000000 ===================================================================\n \u00c8     \u00c8   \u00c8    \u00c8       \u00c8    \u00c8    \u00c8                    /     /         /    /\n\u00c8                \u00c8       \u00c8         \u00c8         /      / /            /\n \u00c8  \u00c8   \u00c8      \u00c8    \u00c8         \u00c8             /      /        /     /      /   /\n     \u00c8   \u00c8      \u00c8\u00c8   \u00c8  \u00c8      \u00c8                           /            /   /\n    \u00c8      \u00c8      \u00c8      \u00c8                /    /\n\u00c8    \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /          /\n \u00c8 \u00c8             \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8                                                             /\n       \u00c8 \u00c8    \u00c8      \u00c8                       /             /               /\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\n /  /   /   / /     /            /      \u00c8     \u00c8            \u00c8     \u00c8          \u00c8\n   /   /     /     /            /        \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8\n                          /                           \u00c8             \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8                               \u00c8\n        /   /        /         /          \u00c8   \u00c8         \u00c8\n  /                 /                                    \u00c8           \u00c8  \u00c8\n /                                                    \u00c8               \u00c8  \u00c8\n            /              /                           \u00c8     \u00c8   \u00c8 \u00c8\n /         /         /    /            \u00c8                      \u00c8   \u00c8 \u00c8\n/       /           /           /       \u00c8            \u00c8              \u00c8\nINTR43000000 ===================================================================\n \u00c8     \u00c8   \u00c8    \u00c8       \u00c8    \u00c8    \u00c8           /      / /     /      /  /    /\n\u00c8  \u00c8   \u00c8      \u00c8  \u00c8 \u00c8     \u00c8   \u00c8     \u00c8         /      / /      /     /      /   /\n \u00c8  \u00c8   \u00c8      \u00c8\u00c8   \u00c8  \u00c8      \u00c8             /      /        /     /      /   /\n   \u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8   \u00c8  \u00c8      \u00c8                /          /            /   /\n    \u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /          /\n\u00c8 \u00c8  \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8           \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8 \u00c8    \u00c8      \u00c8                         /             /       /       /\n   \u00c8   \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8              /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\n /  /  //   / /     /  /        //      \u00c8     \u00c8         \u00c8  \u00c8     \u00c8     \u00c8    \u00c8\n/  /   /   / /     /            /        \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8      \u00c8\n  /   /     /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8                     \u00c8\n  /    /   /        /         /            \u00c8   \u00c8         \u00c8           \u00c8  \u00c8\n /                 /                                  \u00c8   \u00c8           \u00c8  \u00c8\n/           /              /                           \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /         /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8\n/       / /         /    /      /       \u00c8            \u00c8         \u00c8   \u00c8\u00c8\u00c8\nINTR43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8     \u00c8   \u00c8\u00c8    \u00c8           /      / /     //     /  /   //  /\n\u00c8  \u00c8   \u00c8      \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8     \u00c8         /      / /      /     /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8   \u00c8  \u00c8      \u00c8             /    / /        /     /      /   /\n   \u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8  \u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /      /   /\n\u00c8 \u00c8 \u00c8\u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8 \u00c8       \u00c8       /   /  /   /     /   //      /   /   /\n  \u00c8 \u00c8 \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8                /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8     \u00c8    \u00c8 \u00c8\n/  /  //   / /     /  /        //        \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8    \u00c8\n  /   /   / /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n  /    /   /        /  /      /            \u00c8   \u00c8         \u00c8           \u00c8  \u00c8      \u00c8\n /        /        /         /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8\n/           /     /        /                           \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /         /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8\nINTR43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8    \u00c8           /      / /     //     /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8     \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8     \u00c8         /    / / /      /     /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8  \u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8 \u00c8\u00c8      \u00c8   \u00c8  \u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   //     /     /    /      /   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8       \u00c8         /   // /   /     /   //      /   /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   /  /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8    \u00c8 \u00c8\n  /  //   / /     /  /    /   //          \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n  /    /   /        /  /      /            \u00c8   \u00c8         \u00c8           \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /        /  /      /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8\n/        /  /     /        //                \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /         /     /   /    /            \u00c8                \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nINTR43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8    \u00c8           /    / / /     //     /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8 \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   //     /    //    /      /   /\n \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8           /   // /   /     /   //      /   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /    /    //\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /     /  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /  //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n  /    /   /   /    /  /    / /            \u00c8 \u00c8 \u00c8         \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /        /  /      /              \u00c8   \u00c8     \u00c8   \u00c8           \u00c8  \u00c8 \u00c8\n/        /  /     /  /     //                \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n /      /  /     /   /    //           \u00c8      \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/       / /         /    /      /       \u00c8            \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nINTR43000000 ===================================================================\n \u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //    /      /   /\n\u00c8 \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8           /   // /   /    //   //      /   /\n \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / /  /    //\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /   //    //\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /    //  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n/  // ///  / /     /  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/  //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8      \u00c8  \u00c8 \u00c8  \u00c8\n  /    /   /   /    /  /    / /            \u00c8 \u00c8 \u00c8         \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8    \u00c8\n /        /   /    /  /    / /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8           \u00c8  \u00c8 \u00c8\n/        /  /     /  /     //                \u00c8   \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8  \u00c8 \u00c8\n /      /  /     /   /    //           \u00c8      \u00c8   \u00c8     \u00c8     \u00c8   \u00c8 \u00c8   \u00c8  \u00c8\n/      // /     /   /    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //    /      /   /\n \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8    \u00c8 \u00c8             /   // /   /    //   //      /   /\n\u00c8 \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / /  //   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //    //\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /     / /     / /   /   //   ///\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n // // ///  / /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n  // ///  / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8\n  //   /   /   /  / /  /   // /            \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8    \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /    /  /    / /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8      \u00c8    \u00c8 \u00c8\u00c8 \u00c8\n//       /  //    /  /    ///                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n /      /  /     /  //    //           \u00c8      \u00c8   \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // /     /   /    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8     \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///    /  /   //  /\n\u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /    //   //      /   /\n \u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /   / /   //    / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / /  //   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //   ///\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n/ //   /   /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /  / /  /   // /              \u00c8 \u00c8 \u00c8     \u00c8   \u00c8   \u00c8  \u00c8    \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //    /  /    ///                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n//      /  //    /  //   ///           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // /     /  //    //     /       \u00c8      \u00c8   \u00c8 \u00c8   \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8  \u00c8 \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///   //  /   //  /\n\u00c8\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /   ///   //    / /  //\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /   ///   //    / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   / / / /   ///   / /  //   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///  ///\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n/ //   / / /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   /   /   /  / /  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //  / /  /   ////                \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n//  /   /  //    /  //   ///           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/      // //    /  //   ///     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8   \u00c8   \u00c8 \u00c8   \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8   \u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /   ///   //  / / // //\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /   ///   //    / /  //\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /   ///   //    / /  //\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   / / ///   ///   / /  //\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   / / / /   ///   / / ///   /\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /  //  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ ///  / / /   /  / /  /   // /            \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n //   / / /   /  / /  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//   /   /  //  / /  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//  /   /  //  / /  //  ////           \u00c8      \u00c8 \u00c8 \u00c8     \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\n/  /   // //    /  //   ///     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8   \u00c8   \u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8   \u00c8 \u00c8\u00c8 \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /// ///  //// / / /////\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /// ///  ////   / / ///\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /// ///  ////   / / ///\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /// ///  ////   / / ///  /\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /// / /  ////   / / ///  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // / /  //  ///  /   // /            \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n ///  / / /  //  ///  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n///  / / /  //  / /  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n//  / / /  //  / /  //  ////           \u00c8      \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/  / / // //  / /  //  ////     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8    \u00c8           /   // / / /// ///  //// / / /////\n\u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8     \u00c8         /   // / / /// ///  ////   / / ///\n \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8             /   // /   /// ///  ////   / / ///\n\u00c8 \u00c8\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8           /   // /   /// ///  ////   / / ///  /\n \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8           /   // /   /// / /  ////   / / ///  //\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n\u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // / /  //  ///  /   // /            \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n /// // / /  //  ///  /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n/// // / /  //  ///  /   ////                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n// // / /  //  ///  //  ////           \u00c8      \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/ // / // //  ///  //  ////     /       \u00c8      \u00c8 \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8\u00c8\u00c8  \u00c8 \u00c8\u00c8 \u00c8\nINTR43000000 ===================================================================\n\u00c8\u00c8\u00c8\u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8 \u00c8                 /   // /   /// ///  ////   / / ///\n\u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8\u00c8\u00c8  \u00c8\u00c8   \u00c8                 /   // /   /// / /  ////   / / ///\n \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8               /   // /   /// / /  ////   / / ///\n\u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8             /   // /   /// / /  ////   / / ///  /\n \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                    / /    // /    // /   / / //   //\n\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                  / /    // /    // /   /   //   ///\n\u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                / /    // /    // /   /   //   ///\n \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              /      // /    /  /   /   //   ///\n  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                /      //      /  /       /    ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\n /// /   / /  /    /    /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8\n/// / / / /  /    /   //   /   /               \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n// / / / // /    /   //   /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8\n/// /// // /    //  //   /   //            \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // /    //  //   /   //              \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\n/ /// // /    //  //   /   //                \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\n /// // / /  //  //   /   // /              \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n/// // / /  //  ///  /   // /                \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\n// // / /  //  ///  /   // /                  \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8 \u00c8\n/ // / // //  ///  /   // /                    \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8 \u00c8\nINTR43000000 ===================================================================\n \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                            / /    // /    // /   /   //\n  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                          /      // /    // /   /   //\n   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                            /      //      /  /       /\n\u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                 //      /  /       /    /\n \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                               //      /  /       /    //\n  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                             /       /          /    //\n\u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                           /       /          /    //\n \u00c8                                                 /                  /     /\n  \u00c8                                                                  /     /\n                                                                    /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   /\n  /                                                 \u00c8                         \u00c8\n /                                                   \u00c8                    \u00c8    \u00c8\n/ /       /            /                              \u00c8           \u00c8        \u00c8\n /       /            /                           \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8 \u00c8\n/       /       /    /                             \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8\n     / /       /    /   /                         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8\n    / /  /    /    /   /                           \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8\n   / /  /    /    /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\n/ / /  /    /   //   /   /                           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\n / // /    /   //   /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8\n/ // /  / //  //   /   /                         \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8\nINTR43000300 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n            K     K L        IIIII  N     N  GGGGG   OOOOO  N     N\n            K    K  L          I    NN    N G     G O     O NN    N\n            K   K   L          I    N N   N G       O     O N N   N\n            KKKK    L          I    N  N  N G       O     O N  N  N\n            K   K   L          I    N   N N G   GGG O     O N   N N\n            K    K  L          I    N    NN G     G O     O N    NN\n            K     K LLLLLLL  IIIII  N     N  GGGGG   OOOOO  N     N\n\n\n                                       A\n\n                     S P A C E   W A R   A D V E N T U R E\n\n\n                              W R I T T E N   B Y\n\n                          L A R R Y   W I L L I A M S\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMOVE32000100 ===================================================================\n                   .      .          .\n      .      .                          .    .\n  .               .    . .       .     .   .      .     .    .          .\n     .                                                             .\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\n    .                                               .             .  .\n                           .                                               .  .\n          .   .                  .      .   .\n                      .                                .\n   .                                                                .  .\nMOVE32000000 ===================================================================\n\u00c8    \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /          /\n \u00c8 \u00c8             \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8                                                             /\n       \u00c8 \u00c8    \u00c8      \u00c8                       /             /               /\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\n /  /   /   / /     /            /      \u00c8     \u00c8            \u00c8     \u00c8          \u00c8\n   /   /     /     /            /        \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8\n                          /                           \u00c8             \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8                               \u00c8\n        /   /        /         /          \u00c8   \u00c8         \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8  \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8           \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8 \u00c8    \u00c8      \u00c8                         /             /       /       /\n   \u00c8   \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8              /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\n /  /  //   / /     /  /        //      \u00c8     \u00c8         \u00c8  \u00c8     \u00c8     \u00c8    \u00c8\n/  /   /   / /     /            /        \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8      \u00c8\n  /   /     /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8                     \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8 \u00c8       \u00c8       /   /  /   /     /   //      /   /   /\n  \u00c8 \u00c8 \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8                /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8     \u00c8    \u00c8 \u00c8\n/  /  //   / /     /  /        //        \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8    \u00c8\n  /   /   / /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8       \u00c8         /   // /   /     /   //      /   /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   /  /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8    \u00c8 \u00c8\n  /  //   / /     /  /    /   //          \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /    /    //\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /     /  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /  //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / /  /    //\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /   //    //\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /    //  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n/  // ///  / /     /  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/  //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8      \u00c8  \u00c8 \u00c8  \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / /  //   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //    //\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /     / /     / /   /   //   ///\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n // // ///  / /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n  // ///  / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / /  //   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //   ///\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///  ///\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /  //  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n\u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nMOVE32000000 ===================================================================\n\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                  / /    // /    // /   /   //   ///\n\u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                / /    // /    // /   /   //   ///\n \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              /      // /    /  /   /   //   ///\n  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                /      //      /  /       /    ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\n /// /   / /  /    /    /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8\n/// / / / /  /    /   //   /   /               \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n// / / / // /    /   //   /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8\n/// /// // /    //  //   /   //            \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // /    //  //   /   //              \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nMOVE32000000 ===================================================================\n\u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                 //      /  /       /    /\n \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                               //      /  /       /    //\n  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                             /       /          /    //\n\u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                           /       /          /    //\n \u00c8                                                 /                  /     /\n  \u00c8                                                                  /     /\n                                                                    /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   /\n  /                                                 \u00c8                         \u00c8\n /                                                   \u00c8                    \u00c8    \u00c8\n/ /       /            /                              \u00c8           \u00c8        \u00c8\n /       /            /                           \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8 \u00c8\n/       /       /    /                             \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8\n     / /       /    /   /                         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8\n    / /  /    /    /   /                           \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8\n   / /  /    /    /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\nMOVE32000150 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNEWQ32000100 ===================================================================\n.     .                                        .     .    .    .           .\n          .    .                   .                           .    .\n                        .    .           .          .\n   .     .        .\n .            .           .         .          .          .     .       .    .\n        .            .        .\n   .                                    .                            .\n            .    .                .           .      .           .       .   .\n                         .                                 .\n  .      .      .   .                   .\n            .         .         .              .     .    .       .\n      .        .          .  .                                          .   .\n                                   .   .                     .\n         .   .     .    .    .             .                       .\n    .                          .                        .                .  .\n  .     .    .                          .                     .     .          .\n                        .                            .\n    .                          .     .     .    .                         .   .\n          .       .                                      .\n                          .                                    .     .    .\n .      .     .       .         .                  .     .       .          .\n                                     .     .\n           .      .                                      .             .   .   .\n    .                     .                         .       .    .\n .      .                       .     .   .    .                      .    .\n           .  .                                      .\n   .                  .                    .                .\n          .      .                                .      .        .        .\n    .  .      .            .       .                                  .\n           .                                           .                      .\n                              .            .      .           .\n .      .          .                 .                             .       .\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDA32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nREDB32000000 ===================================================================\n\n\n\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\n\n\n\n\n\nINTR32000300 ===================================================================\n                   .      .          .\n      .      .                          .    .\n  .               .    . .       .     .   .      .     .    .          .\n     .                                                             .\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\n    .                                               .             .  .\n                           .                                               .  .\n          .   .                  .      .   .\n                      .                                .\n   .                                                                .  .\nINTR32000000 ===================================================================\n\u00c8    \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /          /\n \u00c8 \u00c8             \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8                                                             /\n       \u00c8 \u00c8    \u00c8      \u00c8                       /             /               /\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\n /  /   /   / /     /            /      \u00c8     \u00c8            \u00c8     \u00c8          \u00c8\n   /   /     /     /            /        \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8\n                          /                           \u00c8             \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8                               \u00c8\n        /   /        /         /          \u00c8   \u00c8         \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8  \u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8           \u00c8    \u00c8 \u00c8       \u00c8       /   /      /     /    /      /   /\n    \u00c8 \u00c8 \u00c8    \u00c8      \u00c8                         /             /       /       /\n   \u00c8   \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8              /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\n /  /  //   / /     /  /        //      \u00c8     \u00c8         \u00c8  \u00c8     \u00c8     \u00c8    \u00c8\n/  /   /   / /     /            /        \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8      \u00c8\n  /   /     /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8  \u00c8\n         /   /           /      /        \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8                     \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8      \u00c8   \u00c8    \u00c8 \u00c8       \u00c8         /   //     /     /    /      /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8 \u00c8       \u00c8       /   /  /   /     /   //      /   /   /\n  \u00c8 \u00c8 \u00c8 \u00c8    \u00c8      \u00c8   \u00c8    \u00c8                /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8     \u00c8    \u00c8 \u00c8\n/  /  //   / /     /  /        //        \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8    \u00c8\n  /   /   / /     /       /    /          \u00c8     \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\n        /   /        /  /      /          \u00c8   \u00c8         \u00c8             \u00c8  \u00c8    \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8 \u00c8       \u00c8         /   // /   /     /   //      /   /   /\n \u00c8 \u00c8 \u00c8 \u00c8    \u00c8    \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   /  /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /       /     /     /    /    /\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\n /  // //   / /     /  /        //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8    \u00c8 \u00c8\n  /  //   / /     /  /    /   //          \u00c8     \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /   /   /   /   /       /    / /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8      \u00c8     \u00c8\u00c8  \u00c8    \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8    \u00c8\u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /       /     /     / /  /    /\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /    /    //\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /     /  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8\n/  // //   / /     /  /        //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n /  //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8     \u00c8   \u00c8  \u00c8     \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/   /   /   /   /    /  /    / /          \u00c8 \u00c8 \u00c8         \u00c8      \u00c8      \u00c8  \u00c8    \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /   / /   //    / /  //   /\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / /  /    //\n   \u00c8   \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8            / /     / /     / /   /   //    //\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n /  // ///  / /    //  /    /   //      \u00c8     \u00c8    \u00c8    \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n/  // ///  / /     /  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8    \u00c8 \u00c8\n  // //   / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   /   /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8 \u00c8\n/  //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8         \u00c8   \u00c8  \u00c8      \u00c8  \u00c8 \u00c8  \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /   / /   //    / /  //   /\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / /  //   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //    //\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /     / /     / /   /   //   ///\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\n // // ///  / /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  /    /   //        \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n  // ///  / /     /  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\u00c8\n // //   / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   /   /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8  \u00c8 \u00c8  \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / /  //   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///   //\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /     / /     / /   / / //   ///\n   \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n// // ///  / /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  /    /   //          \u00c8     \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /   /  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8 \u00c8\n// //   / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8   \u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///   //\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   / / / /   ///   / / ///  ///\n  \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8   \u00c8 \u00c8\n/ // ///  / /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  /    /   // /        \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /   /  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8  \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   / / / /   ///   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n // ///  / / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// ///  / / /  //  / /  /   // /          \u00c8 \u00c8 \u00c8   \u00c8    \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n \u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8\u00c8\u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8         /   // /   /// / /  ////   / / ///  ///\n\u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8 \u00c8 \u00c8  \u00c8\u00c8\u00c8   \u00c8   \u00c8       /   // /   /// / /  ////   / / ///  ///\n \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              / /    // /    // /   / / //   ///\n  \u00c8\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8            / /    // /    // /   /   //   ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\n ///// /// // /    //  //   /   //      \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n///// /// // /    //  //   /   //        \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n//// /// // /    //  //   /   //          \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\u00c8\n/// /// // / /  //  //   /   // /        \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // / /  //  ///  /   // /          \u00c8 \u00c8 \u00c8   \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nINTR32000000 ===================================================================\n\u00c8 \u00c8 \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                  / /    // /    // /   /   //   ///\n\u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8                / /    // /    // /   /   //   ///\n \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8              /      // /    /  /   /   //   ///\n  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8                /      //      /  /       /    ///\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\n /// /   / /  /    /    /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8\n/// / / / /  /    /   //   /   /               \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\n// / / / // /    /   //   /   /                 \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8\n/// /// // /    //  //   /   //            \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8 \u00c8 \u00c8\n// /// // /    //  //   /   //              \u00c8     \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8\u00c8\u00c8 \u00c8 \u00c8\u00c8 \u00c8\nINTR32000000 ===================================================================\n\u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                 //      /  /       /    /\n \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                               //      /  /       /    //\n  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                             /       /          /    //\n\u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                           /       /          /    //\n \u00c8                                                 /                  /     /\n  \u00c8                                                                  /     /\n                                                                    /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   /\n  /                                                 \u00c8                         \u00c8\n /                                                   \u00c8                    \u00c8    \u00c8\n/ /       /            /                              \u00c8           \u00c8        \u00c8\n /       /            /                           \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8 \u00c8\n/       /       /    /                             \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8\n     / /       /    /   /                         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8\n    / /  /    /    /   /                           \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8\n   / /  /    /    /   /                             \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8\nINTR32000300 ===================================================================\n\n\n\n\n\n\n\n            K     K L        IIIII  N     N  GGGGG   OOOOO  N     N\n            K    K  L          I    NN    N G     G O     O NN    N\n            K   K   L          I    N N   N G       O     O N N   N\n            KKKK    L          I    N  N  N G       O     O N  N  N\n            K   K   L          I    N   N N G   GGG O     O N   N N\n            K    K  L          I    N    NN G     G O     O N    NN\n            K     K LLLLLLL  IIIII  N     N  GGGGG   OOOOO  N     N\n\n\n                                       A\n\n                     S P A C E   W A R   A D V E N T U R E\n\n\n                              W R I T T E N   B Y\n\n                          L A R R Y   W I L L I A M S\n\n\n\n\n\n\n\n\nMOVE24000100 ===================================================================\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n             .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\nMOVE24000000 ===================================================================\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\nMOVE24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nMOVE24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nMOVE24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nMOVE24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nMOVE24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\nMOVE24000150 ===================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNEWQ24000100 ===================================================================\n .            .           .         .          .          .     .       .    .\n        .            .        .\n   .                                    .                            .\n            .    .                .           .      .           .       .   .\n                         .                                 .\n  .      .      .   .                   .\n            .         .         .              .     .    .       .\n      .        .          .  .                                          .   .\n                                   .   .                     .\n         .   .     .    .    .             .                       .\n    .                         .                         .                .  .\n                  .                 .       .   .           .\n  .     .    .                          .                     .     .          .\n                        .                            .\n    .                          .     .     .    .                         .   .\n          .       .                                      .\n                          .                                    .     .    .\n .      .     .       .         .                  .     .       .          .\n                                     .     .\n           .      .                                      .             .   .   .\n    .                     .                         .       .    .\n .      .                       .     .   .    .                      .    .\n           .  .                                      .\n   .                  .                    .                .\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDA24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           />>                                                   <<\u00c8\n          + >>>                                                 <<< +\n           \u00c8>>                                                   <</\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /   >>                                             <<   \u00c8\n          +    >>>                                           <<<    +\n           \u00c8   >>                                             <<   /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /      >>                                       <<      \u00c8\n          +       >>>                                     <<<       +\n           \u00c8      >>                                       <<      /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /         >>                                 <<         \u00c8\n          +          >>>                               <<<          +\n           \u00c8         >>                                 <<         /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /            >>                           <<            \u00c8\n          +             >>>                         <<<             +\n           \u00c8            >>                           <<            /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /               >>                     <<               \u00c8\n          +                >>>                   <<<                +\n           \u00c8               >>                     <<               /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                  >>               <<                  \u00c8\n          +                   >>>             <<<                   +\n           \u00c8                  >>               <<                  /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                     >>         <<                     \u00c8\n          +                      >>>       <<<                      +\n           \u00c8                     >>         <<                     /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                        >>   <<                        \u00c8\n          +                         >>> <<<                         +\n           \u00c8                        >>   <<                        /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nREDB24000000 ===================================================================\n\n\n                    _______________________________________\n                   /                                       \u00c8\n                  /         RRRRRR  FEEEEEE DDDDDD          \u00c8\n                 /          R     R E       D     D          \u00c8\n                /           R     R E       D     D           \u00c8\n               /            RRRRRR  EEEEE   D     D            \u00c8\n              /             R   R   E       D     D             \u00c8\n             /              R    R  E       D     D              \u00c8\n            /               R     R EEEEEEE DDDDDD                \u00c8\n           /                                                       \u00c8\n          +                                                         +\n           \u00c8                                                       /\n            \u00c8        AAAAA  L       FEEEEEE RRRRRR  TTTTTTT       /\n             \u00c8      A     A L       E       R     R    T         /\n              \u00c8     A     A L       E       R     R    T        /\n               \u00c8    A     A L       EEEEE   RRRRRR     T       /\n                \u00c8   AAAAAAA L       E       R   R      T      /\n                 \u00c8  A     A L       E       R    R     T     /\n                  \u00c8 A     A LLLLLLL EEEEEEE R     R    T    /\n                   \u00c8                                       /\n                    ---------------------------------------\n                        B A T T L E     S T A T I O N S\nINTR24000300 ===================================================================\n        .\n           .    .      .                   .             .               .\n      .                     .    .                .           .    .\n               .     .                 .                                     .\n\n   .     .                                   .         .       .      .\n      .\n             .   .    .      .    .                               .      .\n    .                                    .       .\n       .    .                                                    .    .        .\n                                                          .                 .\n                  .      .      .              .     .             .    .\n             .\n    .                                     .                                  .\n                                                                .    .\n            .       .            .                      .\n                                        .   .      .                      .\n         .                .                                      .   .        .\n               .                  .     .                 .\n                   .                                          .\n         .                                     .         .                .\n          .               .        .                 .              .\n   .          .                                                .          .   .\n     .   .     .     .            .    .     .            .\nINTR24000000 ===================================================================\n    \u00c8     \u00c8    \u00c8      \u00c8   \u00c8    \u00c8            /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n              \u00c8     \u00c8                   /                                     /\n \u00c8     \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8                                     /         /       /      /\n     \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                                   /      /\n  \u00c8         \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               /      /\n   \u00c8 \u00c8    \u00c8                               /       /                /    /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /                                         \u00c8                    \u00c8    \u00c8        \u00c8\n           /       /            /                        \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8                \u00c8\n        /                /                \u00c8   \u00c8      \u00c8            \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8                 \u00c8       \u00c8   \u00c8\n             /    /             /         \u00c8                 \u00c8  \u00c8\n        /        /                              \u00c8         \u00c8     \u00c8          \u00c8\n       / /               /        /              \u00c8    \u00c8    \u00c8         \u00c8      \u00c8\n  /     /    /          /        /                     \u00c8        \u00c8     \u00c8    \u00c8   \u00c8\nINTR24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /         /           /    /          /\n\u00c8     \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8                                       /         /       /      /\n  \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8              /         /       /    / /    /\n \u00c8   \u00c8     \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               /      /\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /               //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /         /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n          /       /            /         \u00c8   \u00c8      \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8   \u00c8     \u00c8  \u00c8\n       /      /         /        /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8       \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8                 \u00c8  \u00c8    \u00c8   \u00c8\n        /   /    /             /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8          \u00c8\n       / /      /        /        /              \u00c8    \u00c8    \u00c8     \u00c8   \u00c8      \u00c8\n  /   / /    /          /        /                \u00c8    \u00c8    \u00c8   \u00c8     \u00c8    \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /       /     /     /    /    /\n     \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8       \u00c8     \u00c8                   /       /         /       /      /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                /         /       /    / /    /\n\u00c8 \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    / /    /\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /               //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/         /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8      \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8   \u00c8     \u00c8\n      /      /    /    /        /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8  \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8    \u00c8         \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8\n       / / /    /        /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8      \u00c8\n  /   / /    / /        /    /   /                \u00c8    \u00c8    \u00c8   \u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n    \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8       \u00c8     \u00c8       \u00c8    \u00c8        /       / /       /   /   //     /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /       /         /       /    / /    /\n \u00c8 \u00c8   \u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    / /    /\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n        //       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8   \u00c8     \u00c8\n     /  /   /    /    /        /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8  \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8    \u00c8    \u00c8    \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  /   / / /  / /        /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n\u00c8   \u00c8     \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8    \u00c8          / /     / /     / /   /   //    //\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /       / /       /   /   //   / /    /\n\u00c8 \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    / /    /\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n       //     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8      \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8   \u00c8 \u00c8   \u00c8\n    /  / / /    /    /   /    /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8  \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   /    /   /           \u00c8    \u00c8    \u00c8    \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /     / /     / /   /   //   ///\n \u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /    /\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n      //     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8      \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8\n  //  / / /  / /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n\u00c8   \u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   / /   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     // /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8   \u00c8 \u00c8 \u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n    // / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8   \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8          / /    // /    // /   /   //   ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8   \u00c8\u00c8   \u00c8        /      // /    /  /   /   //   ///   //\n\u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8          /      //      /  /       /    ///   //\n \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               //      /  /       /    ///   //\n\u00c8 \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8             //      /  /       /    ///   //\n \u00c8 \u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8           /       /          /    //    //\n  \u00c8 \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8         /       /          /    //    //\n   \u00c8 \u00c8    \u00c8                               /       /          /     /    /      /\n      \u00c8    \u00c8                                                /     /    /      /\n                                                           /                 /\n\n\n\n            /\n   /       /                               \u00c8                                  \u00c8\n  /       /                                 \u00c8                    \u00c8    \u00c8        \u00c8\n /       / /       /            /            \u00c8           \u00c8        \u00c8    \u00c8\n/       / /       /            /         \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n       ///       /       /    /           \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8  \u00c8\n      ///     / /       /    /   /       \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n     ///     / /  /    /    /   /         \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n    /// /   / /  /    /    /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8     \u00c8 \u00c8  \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8 \u00c8\u00c8  \u00c8\n   /// / / / /  /    /   //   /   /         \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\n  /// / / / // /    /   //   /   /           \u00c8 \u00c8  \u00c8\u00c8\u00c8  \u00c8  \u00c8 \u00c8  \u00c8\u00c8 \u00c8   \u00c8\u00c8 \u00c8 \u00c8 \u00c8\u00c8\u00c8\nINTR24000000 ===================================================================\n\u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                     //      /  /       /    ///   /\n \u00c8  \u00c8\u00c8 \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                   //      /  /       /    ///   //\n\u00c8 \u00c8  \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8                 /       /          /    //    //\n \u00c8    \u00c8  \u00c8   \u00c8    \u00c8      \u00c8    \u00c8               /       /          /    //    //\n\u00c8 \u00c8    \u00c8                                     /       /          /     /    /\n   \u00c8    \u00c8                                                      /     /    /\n                                                              /\n\n\n\n\n\n\n\n\n\n         /\n/       /                                     \u00c8\n       /                                       \u00c8                    \u00c8    \u00c8\n      / /       /            /                  \u00c8           \u00c8        \u00c8    \u00c8\n     / /       /            /               \u00c8   \u00c8\u00c8     \u00c8     \u00c8        \u00c8    \u00c8  \u00c8\n    ///       /       /    /                 \u00c8   \u00c8\u00c8     \u00c8     \u00c8      \u00c8 \u00c8 \u00c8  \u00c8  \u00c8\n   ///     / /       /    /   /             \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8      \u00c8 \u00c8 \u00c8  \u00c8\n  ///     / /  /    /    /   /               \u00c8 \u00c8   \u00c8\u00c8     \u00c8    \u00c8\u00c8 \u00c8    \u00c8 \u00c8 \u00c8  \u00c8\nINTR24000000 ===================================================================\n                                                                    /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   /\n  /                                                 \u00c8                         \u00c8\nINTR24000300 ===================================================================\n\n\n\n            K     K L        IIIII  N     N  GGGGG   OOOOO  N     N\n            K    K  L          I    NN    N G     G O     O NN    N\n            K   K   L          I    N N   N G       O     O N N   N\n            KKKK    L          I    N  N  N G       O     O N  N  N\n            K   K   L          I    N   N N G   GGG O     O N   N N\n            K    K  L          I    N    NN G     G O     O N    NN\n            K     K LLLLLLL  IIIII  N     N  GGGGG   OOOOO  N     N\n\n\n                                       A\n\n                     S P A C E   W A R   A D V E N T U R E\n\n\n                              W R I T T E N   B Y\n\n                          L A R R Y   W I L L I A M S\n\n\n\n\n./     ADD     NAME=#JCLFULL\n//GENERATE JOB (........),'GENERATE -KLINGON-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=3M,TIME=(,10)\n/*JOBPARM L=2\n//*=========   G E N E R A T O R     E X E C U T I O N   ============*\n//*-- -- -->   1. COMPILE (FORTRAN VS)                   <-- -- -- --*\n//FORT    EXEC PGM=FORTVS2,PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(0)'\n//STEPLIB   DD DSN=SYS1.VF23COMP,DISP=SHR\n//SYSLIN    DD UNIT=SYSDA,DSN=&&OBJ,DISP=(,PASS,DELETE),\n//             SPACE=(CYL,(1,1)),DCB=(RECFM=FB,BLKSIZE=3440,LRECL=80)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.USER.KL.DATA(#JCLPROG),DISP=SHR\n//*-- -- -->   2. LOAD AND GO                            <-- -- -- --*\n//LOADGO  EXEC PGM=LOADER,PARM='CALL,MAP',COND=(8,LE)\n//STEPLIB   DD DSN=SYS1.VF23FORT,DISP=SHR\n//SYSLIB    DD DSN=SYS1.VF23FORT,DISP=SHR\n//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE,DELETE)\n//SYSLOUT   DD SYSOUT=*\n//FT06F001  DD SYSOUT=*\n//*            FOLLOWING DD CARD CONTAINS THE NAME OF THE MEMBERS <--*\n//*            THAT ARE TO BE ASSEMBLED.                          <--*\n//FT10F001  DD *\nFSIO1\nFSIO2\nGAINIT\nINSFOR\nJULIAN\nSHIFT\nSHIFTAB\nSTAX\nTIME\n/*\n//*            FOLLOWING DD CARD CONTAINS THE NAME OF THE MEMBERS <--*\n//*            THAT ARE TO HAVE LINK JCL CREATED FOR THEM.        <--*\n//FT11F001  DD *\n#LINK\n#LNKINIT\n/*\n//*            FOLLOWING DD POINTS AT THE MEMLIST TO CREATE       <--*\n//*            COMPILE JCL FROM.                                  <--*\n//FT12F001  DD DSN=->.USER.KL.DATA(#MEMLIST),DISP=SHR\n//*            FOLLOWING DD POINTS CONTAINS INFO TO CREATE THE    <--*\n//*            JOBS JCL FROM.                                     <--*\n//FT13F001  DD *\n$/INSTALL  JOB (........),'INSTALL -KLINGON-',\n$/             MSGLEVEL=(1,1),MSGCLASS=A,REGION=3M,TIME=(,20)\n$*JOBPARM L=20\n$/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n$/KLASM   PROC WORK=VIO,MBR=UNKNOWN,\n$/             INDS='->.USER.KL.DATA',                 <- INPUT SOURCE\n$/             OBJDS='->.USER.KL.OBJ'                 <- OUTPUT OBJECT\n$/*  PROCEDURE TO INVOKE ASSEMBLER H.\n$/*  DDNAMES USED BY THIS STEP :\n$/*  SYSLIB   - ASSEMBLER MACLIB, STANDARD \"SYS1.MACLIB\"\n$/*                               AND \"SYS1.MODGEN\" (IEFTIOT1)\n$/*  SYSUT1   - ASSEMBLER WORK SPACE\n$/*  SYSPRINT - WHERE LISTINGS ARE PRODUCED\n$/*  SYSLIN   - OBJECT DECKS PRODUCED HERE\n$/*  SYSIN    - INPUT TO THE ASSEMBLER\n$/ASH     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n$/SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n$/          DD DSN=SYS1.MODGEN,DISP=SHR\n$/SYSUT1    DD UNIT=&WORK,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n$/SYSPRINT  DD SYSOUT=*\n$/SYSLIN    DD DSN=&OBJDS(&MBR),DISP=OLD\n$/SYSIN     DD DSN=&INDS(&MBR),DISP=SHR\n$/        PEND\n$/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n$/KLFORT  PROC OPT=2,MBR=UNKNOWN,\n$/             FORTLIB='SYS1.VF23COMP',             <- FORTRAN COMPILE\n$/             INDS='->.USER.KL.DATA',                 <- INPUT SOURCE\n$/             OBJDS='->.USER.KL.OBJ'                 <- OUTPUT OBJECT\n$/*  PROCEDURE TO INVOKE FORTRAN VS COMPILER.\n$/*  DDNAMES USED BY THIS STEP :\n$/*  STEPLIB  - LIBRARY WHERE THE FORTRAN COMPILER LOAD MODULE IS\n$/*  SYSLIN   - WHERE GENERATED OBJECT MODULE IS PUT\n$/*  SYSPRINT - WHERE FORTRAN LISTINGS ARE PRODUCED TO\n$/*  SYSIN    - INPUT TO THE FORTRAN\n$/FORT    EXEC PGM=FORTVS2,\n$/             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(&OPT)'\n$/STEPLIB   DD DISP=SHR,DSN=&FORTLIB\n$/SYSLIN    DD DISP=OLD,DSN=&OBJDS(&MBR)\n$/SYSPRINT  DD SYSOUT=*\n$/SYSIN     DD DISP=SHR,DSN=&INDS(&MBR)\n$/        PEND\n$/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n$/KLLINK  PROC WORK=VIO,MBR=UNKNOWN,\n$/             FORTLNK='SYS1.VF23FORT',                <- FORTRAN LINK\n$/             INDS='->.USER.KL.DATA',                 <- INPUT SOURCE\n$/             OBJDS='->.USER.KL.OBJ',                <- OUTPUT OBJECT\n$/             OUTDS='->.GROUP.KL.LOAD'                 <- OUTPUT LOAD\n$/*  PROCEDURE TO INVOKE THE LINKAGE EDITOR.\n$/*  TWO STEP PROCEDURE, THE FIRST STEP COPIES THE LINKAGE EDITOR\n$/*  CONTROL CARDS FROM THE KLINGON CONTROL FILE (WHICH MAY HAVE A\n$/*  BLKSIZE GREATER THAN ALLOWED BY LINKAGE EDITOR 3200 MAX) TO A\n$/*  WORK FILE.\n$/*  DDNAMES USED BY THE REBLOCK STEP ARE IEBGENER STANDARD.\n$/*  LKED DDNAMES :\n$/*  SYSLIB   - FORTRAN CALLLIB\n$/*  SYSLMOD  - OUTPUT LOAD MODULE LIBRARY\n$/*  SYSOBJ   - OBJECT LIBRARY, ADDED TO BY KLASM AND KLFORT STEPS\n$/*  SYSUT1   - WORK FILE FOR LKED\n$/*  SYSPRINT - WHERE LISTINGS FOR LKED\n$/*  SYSLIN   - WHERE LINKAGE EDITOR CONTROL CARDS ARE READ FROM\n$/REBLOCK EXEC PGM=IEBGENER\n$/SYSUT1    DD DSN=&INDS(&MBR),DISP=SHR\n$/SYSUT2    DD DSN=&&LINK,SPACE=(TRK,(1,1)),UNIT=&WORK,\n$/             DISP=(NEW,PASS,DELETE),DCB=(LRECL=80,BLKSIZE=80,RECFM=F)\n$/SYSPRINT  DD DUMMY\n$/SYSIN     DD DUMMY\n$/LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)\n$/SYSLIB    DD DISP=SHR,DSN=&FORTLNK\n$/SYSLMOD   DD DISP=OLD,DSN=&OUTDS\n$/SYSOBJ    DD DISP=SHR,DSN=&OBJDS\n$/SYSUT1    DD UNIT=&WORK,SPACE=(CYL,(1,1))\n$/SYSPRINT  DD SYSOUT=*\n$/SYSLIN    DD DSN=&&LINK,DISP=(OLD,DELETE,DELETE)\n$/        PEND\n$/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n/*\n//*            THE FOLLOWING DD IS THE ONE WHERE THE JOBS WILL    <--*\n//*            BE SUBMITTED TO.                                   <--*\n//*            ORIGINAL WAS : FT14F001  DD SYSOUT=(A,INTRDR)\n//FT14F001  DD DSN=->.USER.KL.CNTL(JOBS),DISP=OLD\n./     ADD     NAME=#JCLPROG\nC*********************************************************************\nC     PROGRAM TO GENERATE JCL FOR COMPILING MEMBERS\nC         (FORTRAN G/H/VS COMPATIBLE)\nC*********************************************************************\n      COMMON /PARMS/ IASMC, ILNKC, ICCNT, ISTEP, IMEM(2),\n     *    IASML(100,2), ILNKL(100,2), ICARDS(100,20)\n      CALL ASMLIS\n      CALL LNKLIS\n      REWIND 13\n      ICCNT = 0\n100   READ (13,10000,END=101) (ICARDS(ICCNT+1,N),N=1,20)\n      ICCNT = ICCNT + 1\n      IF (ICCNT.LT.100) GO TO 100\n      WRITE (6,10002)\n      GO TO 999\n101   ISTEP = 10000\n      REWIND 12\n102   READ (12,10001,END=103) IMEM\n      CALL MEMPR\n      GO TO 102\n103   CALL LINKPR\n999   STOP\n10000 FORMAT (1X,A3,19A4)\n10001 FORMAT (2A4)\n10002 FORMAT (' ','*** SCRAMBLE *** - MORE THAN 100 JCL CARDS'/\n     *        ' ','OVERFLOW OF ARRAY, USE LESS JCL CARDS')\n      END\nC*********************************************************************\n      SUBROUTINE ASMLIS\nC*********************************************************************\n      COMMON /PARMS/ IASMC, ILNKC, ICCNT, ISTEP, IMEM(2),\n     *    IASML(100,2), ILNKL(100,2), ICARDS(100,20)\n      IASMC = 0\n      REWIND 10\n100   READ (10,11000,END=999) (IASML(IASMC+1,N),N=1,2)\n      IASMC = IASMC + 1\n      IF (IASMC.LT.100) GO TO 100\n      WRITE (6,11001)\n999   RETURN\n11000 FORMAT (2A4)\n11001 FORMAT (' ','*** WARNING *** - MORE THAN 100 ASMLIST ENTRIES'/\n     *        ' ','EXCESS ENTRIES INGORED')\n      END\nC*********************************************************************\n      SUBROUTINE LNKLIS\nC*********************************************************************\n      COMMON /PARMS/ IASMC, ILNKC, ICCNT, ISTEP, IMEM(2),\n     *    IASML(100,2), ILNKL(100,2), ICARDS(100,20)\n      ILNKC = 0\n      REWIND 11\n100   READ (11,11000,END=999) (ILNKL(ILNKC+1,N),N=1,2)\n      ILNKC = ILNKC + 1\n      IF (ILNKC.LT.100) GO TO 100\n      WRITE (6,11001)\n999   RETURN\n11000 FORMAT (2A4)\n11001 FORMAT (' ','*** WARNING *** - MORE THAN 100 LINKMEM ENTRIES'/\n     *        ' ','EXCESS ENTRIES INGORED')\n      END\nC*********************************************************************\n      SUBROUTINE MEMPR\nC*********************************************************************\n      COMMON /PARMS/ IASMC, ILNKC, ICCNT, ISTEP, IMEM(2),\n     *    IASML(100,2), ILNKL(100,2), ICARDS(100,20)\n      IF (ISTEP.NE.10000) GO TO 200\n      DO 100 J=1,ICCNT\n          WRITE (14,12000) (ICARDS(J,N),N=1,20)\n100   CONTINUE\n200   ISTEP  = ISTEP + 1\n      ILANG = 0\n      DO 201 J=1,IASMC\n          IF (IMEM(1).EQ.IASML(J,1).AND.IMEM(2).EQ.IASML(J,2)) ILANG = 1\n201   CONTINUE\n      IF (ILANG.EQ.1) GO TO 202\n      WRITE (14,12001) ISTEP, IMEM\n      GO TO 900\n202   WRITE (14,12002) ISTEP, IMEM\n900   CONTINUE\n      RETURN\n12000 FORMAT ('/',A3,19A4)\n12001 FORMAT ('//ST',I5,' EXEC KLFORT,MBR=',2A4)\n12002 FORMAT ('//ST',I5,' EXEC KLASM,MBR=',2A4)\n      END\nC*********************************************************************\n      SUBROUTINE LINKPR\nC*********************************************************************\n      COMMON /PARMS/ IASMC, ILNKC, ICCNT, ISTEP, IMEM(2),\n     *    IASML(100,2), ILNKL(100,2), ICARDS(100,20)\n      ISTEP = 10000\n      DO 100 J=1,ILNKC\n          ISTEP = ISTEP + 1\n          WRITE (14,12001) ISTEP, (ILNKL(J,N),N=1,2)\n100   CONTINUE\n      RETURN\n12001 FORMAT ('//LK',I5,' EXEC KLLINK,MBR=',2A4)\n      END\n./     ADD     NAME=#KLHELP\nLOGONMSG              This is the IBM version of \"K L I N G O N\"\nLOGONMSG          Users are reminded this is not productive work |||\nLOGONMSG\nINTRO       Welcome to KLINGON, a game of space war and conquest.\nINTRO       This section is intended as a brief introduction to KLINGON,\nINTRO       complete rules are available in the \"->.GROUP.KL.RULES\" data-set.\nINTRO       You may print it using the PRINTDS TSO command, as e.g. :\nINTRO            TSO PRINTDS DA('->.GROUP.KL.RULES') CCHAR CLASS(A) DEST(R41)\nINTRO       During a game, if you forget a command, type HELP.\nINTRO       In the NOT too distant future : it is the time of STAR TREK and\nINTRO       you are the commander of the flagship of the KLINGON empire, the\nINTRO       supercommander KAZH.\nINTRO       Your ship is the most powerful in the known galaxy, your mission :\nINTRO       break thru the Federation defenses and destroy as many Federation\nINTRO       starbases as you can ...\nINTRO       Your weaponry is awesome, a back of 150 disruptor torpedos |\nINTRO       Your fleet : the mightiest the KLINGON empire has ever gathered;\nINTRO       ready to help defend you from attacks from Federation starships.\nINTRO\nINTRO       Some brief information on your ship :\nINTRO       Weaponry :   disruptor torpedos (150)\nINTRO       Shields :    pulsed energy - reflective type\nINTRO       Engines :    WARP - dilithium energizer - stress field type\nINTRO                    IMPULSE - hydrogen conversion type\nINTRO       Top speeds : maximum safe speed - WARP FACTOR (WF) 10\nINTRO                    emergency speed    - WARP FACTOR (WF) 12\nINTRO                    IMPULSE            - .95C\nINTRO       Other :      ANTI-PHOTON device\nINTRO                    emergency field dampening system\nINTRO                    TRACTOR BEAM\nINTRO       If you wish to stop your game early, type STOP or TERMINATE.\nINTRO\nINTRO       You may have noticed that KLINGON does not have different lengths\nINTRO       of games, that is because all of them are short and nasty |\nINTRO\nINTRO       Have fun |||\nINTRO\nINTROHLP\nINTROHLP    At this point, you are being asked if you would like introduction\nINTROHLP    instructions, please reply YES or NO or just hit ENTER (default=NO)\nINTROHLP\nONHELP\nONHELP      At this point, you are being asked if you would like an OLD or NEW\nONHELP      game : OLD = continue a Frozen game\nONHELP             NEW = start a new game\nONHELP\nLEVHELP\nLEVHELP     You are being asked how good a player you are :\nLEVHELP       GOOD     = Starting player, this is the easiest,\nLEVHELP       EXPERT   = Good player, has some experience,\nLEVHELP       EMERITUS = World class, best player will only win 5% of the time.\nLEVHELP\nTOURHELP    At this point, you are being asked whether you would like a REGULAR\nTOURHELP    or TOURNAMENT game.\nTOURHELP    REGULAR    = Start the random number generator with a number based\nTOURHELP                 on the time of day.\nTOURHELP    TOURNAMENT = Start the random number generator with a user supplied\nTOURHELP                 key, the same key will cause the same game to be\nTOURHELP                 generated. This option allows players to compete as\nTOURHELP                 the starting setup will be the same for all players.\nTOURHELP\nSRSCAN      SHORT-RANGE SCAN\nSRSCAN        Mnemonic              : SRSCAN\nSRSCAN        Shortest abbreviation : S\nSRSCAN        Full commands         : SRSCAN\nSRSCAN                                SRSCAN NO\nSRSCAN      Note for TSO 3270 users ---> See Help Catagory FS3270\nSRSCAN        The SHORT-RANGE SCAN gives you a considerable amount of\nSRSCAN      information about the quadrant your starship is in.\nSRSCAN      A SHORT-RANGE SCAN is best described by an example.\nSRSCAN        1 2 3 4 5 6 7 8 9 10\nSRSCAN       1 * . . . . . . . . . TORPEDOES    150 CONDITION: READY\nSRSCAN       2 . . . F . . . . . . POSITION    5 - 1, 4 - 4\nSRSCAN       3 . . . . . * . B . . STARDATE    4300.00\nSRSCAN       4 . . . S . . . . . . REMAINING      6.93\nSRSCAN       5 . . . . . . . . . . CONDITION   RED   A.P.D.  ARMED\nSRSCAN       6 . . . # . . . . * . ENERGY      2176.25\nSRSCAN       7 . . . . . P . . . . SHIELDS   UP  3472 PCT 11800 UNTS\nSRSCAN       8 . . . . * . . . . . WARP FACTOR   10.00\nSRSCAN       9 . * . . * . . . C . FEDERATION  BASES 6  STARSHIPS 4\nSRSCAN      10 . . . . . . . . . . KLINGON    COMMANDERS  4\nSRSCAN      The left part is a picture of the quadrant. The S at sector\nSRSCAN        4 - 4 represents the supercommander KAZH; the B at sector\nSRSCAN        3 - 8 is a starbase.\nSRSCAN      There is a KLINGON commander (C) at sector 9 - 9, and a planet at\nSRSCAN        sector 7 - 6. Other features in the quadrant are a Federation\nSRSCAN        starship (F), at 2 - 4, and a black hole at 6 - 4 (#).\nSRSCAN      The stars (*) are located at 1 - 1, 3 - 6, 6 - 9, 8 - 5,\nSRSCAN        9 - 2, and 9 - 5.\nSRSCAN      The periods (.) are just empty space--they are printed to help\nSRSCAN        you get your bearings.\nSRSCAN      The information on the right is assorted STATUS information.\nSRSCAN      The STATUS information will be absent if you type NO after\nSRSCAN      SRSCAN. Otherwise, STATUS information will be presented.\nSRSCAN        SHORT-RANGE SCANs are free. That is, they use up no energy\nSRSCAN      and no time. If you are in battle, doing a SHORT-RANGE SCAN does\nSRSCAN      not give the enemies another chance to hit you. You can safely\nSRSCAN      do a SHORT-RANGE SCAN anytime you like.\nSTATUS      STATUS REPORT\nSTATUS        Mnemonic              : STATUS\nSTATUS        Shortest abbreviation : ST\nSTATUS      Note for TSO 3270 users ---> See Help Catagory FS3270\nSTATUS        This command gives you information about the current state of\nSTATUS      your starship, as follows :\nSTATUS        STARDATE - the current date. A stardate is the same as a day.\nSTATUS        CONDITION - there are four possible conditions :\nSTATUS             RED = in battle, YELLOW = low on energy (0/1000 units),\nSTATUS             GREEN = none of the above.\nSTATUS        EMERGENCY - in battle and less than 1000 units of energy.\nSTATUS        POSITION - quadrant is given first, then sector.\nSTATUS        FEDERATION - gives the numbers on how many starships and starships\nSTATUS             are left for the Federation.\nSTATUS        WARP FACTOR - what your warp factor is currently set to.\nSTATUS        ENERGY - the amount of energy you have left. If it drops to zero,\nSTATUS             one dose of 750.0 units of energy will be taken from your\nSTATUS             batteries, provided your battle computer is working, and the\nSTATUS             batteries are charged.\nSTATUS\nSTATUS        TORPEDOES - how many disruptor torpedoes you have left. Also tells\nSTATUS             what the status of your disruptor torpedo tubes are :\nSTATUS             OUT = no torpedoes left, READY = torpedoes standing by to\nSTATUS             fire, DAMAGED = torpedo tubes are damaged.\nSTATUS        SHIELDS - whether your shields are up or down, how strong they are\nSTATUS             (what percent of a hit they can deflect), and shield energy.\nSTATUS        KLINGON - how many of your friendly ships are out there.\nSTATUS        REMAINING - how long you have to crush the Federation. If it\nSTATUS             reaches zero, the Federation wins, and you will then be\nSTATUS             opening sealed orders.\nSTATUS        Status information is free--it uses no time or energy, and if you\nSTATUS      are in battle, the Federation is not given another chance to hit\nSTATUS      you.\nSTATUS\nSTATUS        Status information can also be obtained by doing a SHORT-RANGE\nSTATUS      SCAN (see the SRSCAN command for details).\nLRSCAN      LONG-RANGE SCAN\nLRSCAN        Mnemonic              : LRSCAN\nLRSCAN        Shortest abbreviation : L\nLRSCAN\nLRSCAN      Note for TSO 3270 users ---> See Help Catagory FS3270\nLRSCAN\nLRSCAN        A LONG-RANGE SCAN gives you general information about where you\nLRSCAN      are and what is around you. Here is an example output.\nLRSCAN\nLRSCAN\nLRSCAN       LONG RANGE SCAN FOR AREA: 1 - 4\nLRSCAN         ****   ****   ****\nLRSCAN          102      2   9999\nLRSCAN         1007      3     19\nLRSCAN       PLANET DETECTED IN QUADRANT: 2 - 5\nLRSCAN        This scan says that you are in row 1, column 4 of the 8 by 8\nLRSCAN      galaxy. The numbers in the scan indicate how many of each kind of\nLRSCAN      thing there is in your quadrant and all adjacent quadrants.\nLRSCAN      The digits are interpreted as follows :\nLRSCAN\nLRSCAN\nLRSCAN\nLRSCAN        Thousands digit = 1000 indicates a KLINGON commander,\nLRSCAN        Hundreds digit  = number of Federation starships,\nLRSCAN        Tens digit      = number of starbases present,\nLRSCAN        Ones gigit      = number of stars present,\nLRSCAN        9999            = indicates supernova,\nLRSCAN        ****            = edge of Federation space.\nLRSCAN\nLRSCAN\nLRSCAN        For example, in your quadrant (1 - 4) the number is 2, which\nLRSCAN      indicates 2 stars, you, and nothing else (you are always in the\nLRSCAN      center quadrant of these scans). There is a Federation starship in\nLRSCAN      quadrant 1 - 3 (102), a commander and seven stars in quadrant 2 - 3\nLRSCAN      (1007), a supernova in quadrant 1 - 5 (9999) and starbase, and nine\nLRSCAN      stars in 2 - 5 (19).\nLRSCAN        You might also notice a report on a planet in quadrant 2 - 5\nLRSCAN      unlike super STAR TREK, planets are detectable by LONG RANGE SCAN,\nLRSCAN      so that if they are in your flight path, you can stop and kill it\nLRSCAN      if you wish.\nLRSCAN        Since you are in row 1, there are no quadrants above you.\nLRSCAN      The ****'s indicate the border of Federation space, which you are\nLRSCAN      not permitted to cross.\nLRSCAN        LONG-RANGE SCANs are free. They use up no energy or time, and\nLRSCAN      can be done safely regardless of battle conditions.\nLRSCAN        For 3270 TSO users, the information given is in a less verbose\nLRSCAN       fashion.\nCHART       STAR CHART\nCHART         Mnemonic              : CHART\nCHART         Shortest abbreviation : C\nCHART         As you proceed in the game, you learn more and more about what\nCHART       things are where in the galaxy. This information is automatically\nCHART       recorded for you in your star chart.\nCHART         The chart looks like an 8 by 8 array of numbers. These numbers\nCHART       are interpreted exactly as they are on a LONG-RANGE SCAN. A period\nCHART       (.) in place of a digit means you do not know that information yet.\nCHART       For example, ... means you know nothing about the quadrant.\nCHART         Looking at the star chart is a free operation. It costs you\nCHART       neither time nor energy, and can be done safely whether in or out\nCHART       of battle.\nDAMAGE      DAMAGE REPORT\nDAMAGE        Mnemonic              : DAMAGES\nDAMAGE        Shortest abbreviation : DA\nDAMAGE        At any time you may ask for a damage report to find out what\nDAMAGE      devices are damaged and how long it will take to repair them.\nDAMAGE        If you suffer damages while moving, it is possible that a\nDAMAGE      subsequent damage report will not show any damage. This happens\nDAMAGE      if the time spent on the move exceeds the repair time, since in\nDAMAGE      this case the damaged devices were fixed en route.\nDAMAGE\nDAMAGE        Damage reports are free. They use no energy or time, and can\nDAMAGE      be done safely even in the midst of battle.\nMOVE        MOVE UNDER WARP DRIVE\nMOVE          Mnemonic              : MOVE\nMOVE          Shortest abbreviation : M\nMOVE          Full command          : MOVE MANUAL (DISPLACEMENT)\nMOVE                                  MOVE AUTOMATIC (DESTINATION)\nMOVE          This command is the usual way to move from one place to another\nMOVE        within the galaxy. You move under warp drive, according to the\nMOVE        current warp factor (see WARP FACTOR).\nMOVE          There are two command modes for movement; MANUAL and AUTOMATIC.\nMOVE\nMOVE        The MANUAL mode requires the following format :\nMOVE               MOVE MANUAL (DELTX),(DELTY)\nMOVE        (DELTX) and (DELTY) are the horizontal and vertical displacements\nMOVE        for your starship, in quadrants; a displacement of one sector is\nMOVE        0.1 quadrants. Specifying (DELTX) and (DELTY) causes your ship to\nMOVE        move in a straight line to the specified destination. If (DELTY)\nMOVE        is omitted, it is assumed zero. For example, the shortest possible\nMOVE        command to move 1 sector to the right would be : M M .1\nMOVE          The following examples of MANUAL movement refer to the\nMOVE        SHORT-RANGE SCAN example.\nMOVE          Destination sector      MANUAL movement command\nMOVE                3 - 1                    M M -.3 .1\nMOVE                2 - 1                    M M -.3 .2\nMOVE                1 - 2                    M M -.2 .3\nMOVE                3 - 4                    M M 0 .1\nMOVE          (leaving quadrant)             M M .7\nMOVE                3 - 5                    M M .1 .1\nMOVE                4 - 10                   M M .6\nMOVE                6 - 6                    M M .2 -.2\nMOVE                5 - 4                    M M 0 -.1\nMOVE        The AUTOMATIC mode is as follows :\nMOVE               MOVE AUTOMATIC (QROW),(QCOL),(SROW),(SCOL)\nMOVE        where (QROW) and (QCOL) are the row and column numbers of the\nMOVE        destination quadrant, and (SROW) and (SCOL) are the row and column\nMOVE        numbers of the destination sector within that quadrant.\nMOVE        This command also moves your ship in a straight line path to the\nMOVE        destination. For moving within a quadrant, (QROW) and (QCOL) may\nMOVE        be omitted. For example, to move to sector 2 - 9 in the current\nMOVE        quadrant, the shortest command would be : M A 2 9\nMOVE\nMOVE        To move to quadrant 3 - 7, sector 5 - 8, type : M A 3 7 5 8\nMOVE        and it will be done. In AUTOMATIC mode, either two or four numbers\nMOVE        must be supplied.\nMOVE          AUTOMATIC mode utilizes the ship's BATTLE COMPUTER. If the\nMOVE        computer is damaged, MANUAL movement must be used. If warp engines\nMOVE        are damaged less than 5 stardates you can still go WARP 5.\nMOVE          It uses time and energy to move. How much time and how much energy\nMOVE        depends on your current warp factor and the distance you move the\nMOVE        higher the warp factor, the faster you move, but higher warp factors\nMOVE        require more energy.\nMOVE        Your warp engines are most efficient at warp factor 10, as you move\nMOVE        away from this speed, you use more energy in proportion to the\nMOVE        distance moved.\nWARP        WARP FACTOR\nWARP          Mnemonic              : WARP\nWARP          Shortest abbreviation : W\nWARP          Full command          : WARP (NUMBER)\nWARP          Your WARP FACTOR controls the speed of your starship. The larger\nWARP        the warp factor, the faster you go and the more energy you use.\nWARP          Your minimum warp factor is 1.0 and your maximum warp factor\nWARP        is 12.0. At speeds above warp 10 there is some danger of causing\nWARP        damage to your warp engines; this damage is larger at higher warp\nWARP        factors and also depends on how far you go at that warp factor.\nIMPULSE     IMPULSE ENGINES\nIMPULSE       Mnemonic              : IMPULSE\nIMPULSE       Shortest abbreviation : I\nIMPULSE       Full command   IMPULSE (MANUAL or AUTOMATIC),\nIMPULSE                              (DISPLACEMENT or DESTINATION)\nIMPULSE       The impulse engines give you a way to move when your warp engines\nIMPULSE     are damaged. They move you at a speed of 0.95 sectors per STARDATE,\nIMPULSE     which is the equivalent of a WARP FACTOR of about 0.975, so they\nIMPULSE     are much too slow to use except in emergencies.\nIMPULSE       Movement commands are indicated just as in the MOVE command.\nIMPULSE       The impulse engines require 20 units of energy to engage, plus\nIMPULSE     10 units per sector (100 units per quadrant) travelled.\nIMPULSE       The player should note, the impulse engines are in a rather\nIMPULSE     vunerable part of the ship, are damaged easily.\nSHIELDS     DEFLECTOR SHIELDS\nSHIELDS       Mnemonic              : SHIELDS\nSHIELDS       Shortest abbreviation : SH\nSHIELDS       Full commands         : SHIELDS UP\nSHIELDS                               SHIELDS DOWN\nSHIELDS                               SHIELDS TRANSFER (AMOUNT OF ENERGY TO\nSHIELDS                                                 TRANSFER)\nSHIELDS       Your DEFLECTOR SHIELDS are a defensive device to protect you\nSHIELDS     from Federation attacks (and nearby novas).\nSHIELDS\nSHIELDS       As the shields protect you, they gradually weaken. A shield\nSHIELDS     strength of 75 percent, for example, means that the next time you\nSHIELDS     are attacked, your shields will deflect 75 percent of the hit, and\nSHIELDS     let 25 percent get through to hurt you. It costs 50 units of energy\nSHIELDS     to raise shields, nothing to lower them. You should never have to\nSHIELDS     raise or lower shields manually, as your automatic deflector screen\nSHIELDS     control will do this for you, as you go into battle, and leave\nSHIELDS     battle. If your energy level is questionable (as to if you might\nSHIELDS     not want to raise shields, if they would do little or no good) you\nSHIELDS     will be prompted as to if you wish shields raised.\nSHIELDS       You may transfer energy between the ship's energy (given as\nSHIELDS     (ENERGY) in STATUS) and the shields. (TRANSFER) may be abbreviated\nSHIELDS     (T). (AMOUNT OF ENERGY TO TRANSFER) is the number of units of\nSHIELDS     energy you wish to take from the ship's energy and put into the\nSHIELDS     shields. If you specify a negative number, energy is drained from\nSHIELDS     the shields to the ship. Transferring energy constitutes a turn.\nSHIELDS     If you transfer energy to the shields while under attack, they will\nSHIELDS     be at the new energy level when you are next hit.\nSHIELDS       Enemy torpedoes hitting your ship explode on your shields (if they\nSHIELDS     are up) and have essentially the same effect as phaser hits.\nSHIELDS       If you wish to override automatic shield control, specify UP or\nSHIELDS     DOWN in the command.\nCOMPUTE     SHIPS COMPUTER\nCOMPUTE       Mnemonic              : COMPUTER\nCOMPUTE       Shortest abbreviation : CO\nCOMPUTE       Full commands         : COMPUTE AUTOMATIC <ROWSEC> <COLSEC>\nCOMPUTE                               COMPUTE AUTOMATIC <RQUAD> <CQUAD>\nCOMPUTE                                                 <RSEC> <CSEC>\nCOMPUTE                               COMPUTE MANUAL <X-DISP> <Y-DISP>\nCOMPUTE       The ship's computer allows you to get some information about\nCOMPUTE     movement, before you actually move.\nCOMPUTE\nCOMPUTE       You enter the destination you are considering in the same format\nCOMPUTE     as MOVE. The computer will then calculate and report to you the time\nCOMPUTE     and energy required for such a trip.\nCOMPUTE       This command requires no time or energy, so you may use it anytime\nCOMPUTE     your ship's computer is undamaged.\nPHOTON      PHOTON TORPEDOES\nPHOTON\nPHOTON      See DISRUPTOR TORPEDOES command.\nDISRUPTOR   DISRUPTOR TORPEDOES\nDISRUPTOR     Mnemonic              : DISRUPTOR\nDISRUPTOR     Shortest abbreviation : DIS\nDISRUPTOR     Full commands         : DISRUPTOR (NUMBER) (TARG1) (TARG2)\nDISRUPTOR                                                (TARG3) (TARG4)\nDISRUPTOR     DISRUPTOR TORPEDOES are projectile weapons--you either hit what\nDISRUPTOR   you aim at, or you don't. There are no PARTIAL HITS.\nDISRUPTOR     You may fire DISRUPTOR TORPEDOES singly, or in bursts of two,\nDISRUPTOR   three or four. Each torpedo is individually targetable.\nDISRUPTOR\nDISRUPTOR     The computer will prompt you, asking for the target sector for\nDISRUPTOR   each torpedo. Alternately, you may specify each target in the\nDISRUPTOR   command line. If more than one torpedo is fired and only one target\nDISRUPTOR   sector is specified, all torpedoes are fired at that sector. For\nDISRUPTOR   example, to fire two torpedoes at sector 3 - 4, you type :\nDISRUPTOR          DIS 2 3 4   (or)   DIS 2 3 4 3 4\nDISRUPTOR   To fire torpedoes at, consecutively, sectors 2 - 6, 1 - 10, and\nDISRUPTOR   4 - 7, type : DIS 3 2 6 1 10 4 7\nDISRUPTOR   There is no restriction to fire directly at a sector. For example,\nDISRUPTOR   you can enter : DIS 1 3 2.5 to aim between two sectors.\nDISRUPTOR     However, sector numbers must be 1 to 10 inclusive.\nDISRUPTOR     Torpedoes going within 0.5 sectors of a black hole are swallowed.\nDISRUPTOR   If your DISRUPTOR TORPEDO tubes are damaged less than 3 STARDATES,\nDISRUPTOR   you can still fire 2 torpedoes (instead of 4).\nREST        REST\nREST          Mnemonic              : REST\nREST          Shortest abbreviation : RES\nREST          Full command          : REST (NUMBER OF STARDATES)\nREST          This command simply allows the specified number of STARDATES to\nREST        go by. This is useful if you have suffered damages and wish to wait\nREST        until repairs are made before you go back into battle. Note that\nREST        your energy level will be raised by 1024 units a STARDATE, as you\nREST        REST. It is not generally advisable to REST while you are under\nREST        attack by the Federation.\nHELP        HELP\nHELP          Mnemonic              : HELP\nHELP          (no abbreviation)\nHELP          HELP command connects you with the KLINGON help data base, for\nHELP        quick help on using a command.\nABANDON     ABANDON SHIP\nABANDON       Mnemonic              : ABANDON\nABANDON       (no abbreviation)\nABANDON       You may not ABANDON ship, that is unworthy of a KLINGON.\nDESTRUCT    SELF-DESTRUCT\nDESTRUCT      Mnemonic              : DESTRUCT\nDESTRUCT      (no abbreviation)\nDESTRUCT      You may self-DESTRUCT, thus killing yourself and ending the game.\nTERMINATE   TERMINATE THE CURRENT GAME\nTERMINATE     Mnemonic              : TERMINATE\nTERMINATE     (no abbreviation)\nTERMINATE     Immediately CANCEL the current game. No conclusion is reached and\nTERMINATE   no score is computed. You will be given an opportunity to start a\nTERMINATE   new game or to leave the KLINGON program.\nSENSOR      SENSOR-SCAN\nSENSOR        Mnemonic              : SENSORS\nSENSOR        Shortest abbreviation : SE\nSENSOR        Utilizing the SHORT-RANGE SENSORS, your first officer gives you a\nSENSOR      readout on any planet in your quadrant.\nA.P.D.      ANTI-PHOTON DEVICE\nA.P.D.        Mnemonic              : ANTI PHOTON\nA.P.D.        Shortest abbreviation : A P\nA.P.D.        Full command          : ANTI PHOTON\nA.P.D.        Like all KLINGON commanders, your ship is equipped with an\nA.P.D.      ANTI-PHOTON device. This A.P.D. will protect you from one round of\nA.P.D.      Federation photon torpedoes (3). The A.P.D. requires 500 units of\nA.P.D.      shield energy to activate it.\nA.P.D.\nA.P.D.\nA.P.D.        Two things can disarm the ANTI-PHOTON device :\nA.P.D.      1. it absorbs a full round of torpedoes, or\nA.P.D.      2. a Federation starship fires phasers at you (the A.P.D. is run by\nA.P.D.         the ship's main computer, not the battle computer, and as such is\nA.P.D.         not affected when the battle computer is damaged and can be used\nA.P.D.         even if your shields are down).\nA.P.D.        The use of the ANTI PHOTON device does not count as a turn and can\nA.P.D.      be activated instantly, even during battle, at no cost in time, and\nA.P.D.      does not allow enemies to attack.\nBATTERY     BATTERY\nBATTERY       Mnemonic              : BATTERY\nBATTERY       Shortest abbreviation : BATT\nBATTERY       The BATTERY command provides information of whether your batteries\nBATTERY     (used if you fall below zero energy) are charged or not, once the\nBATTERY     batteries are drained there is no way to recharge them. They contain\nBATTERY     750.0 units of energy.\nTRACTOR     TRACTOR BEAM\nTRACTOR       Mnemonic              : TRACTOR\nTRACTOR       Shortest abbreviation : TRAC\nTRACTOR       Full command          : TRACTOR (TARGET QUADRANT)\nTRACTOR       The TRACTOR command allows you to pull a ship across some distance\nTRACTOR     in space. When this command is issued you will be prompted with the\nTRACTOR     amount of energy it would take to pull a ship that far, and asked if\nTRACTOR     you still wish to engage the TRACTOR BEAM, if a ship is found at the\nTRACTOR     target quadrant it will be pulled to your quadrant. If there is more\nTRACTOR     then one at the target quadrant, one will be selected randomly.\nTRACTOR       If there is no ship at the target quadrant, you will be notified\nTRACTOR     of this fact, and the power drain caused by the TRACTOR BEAM will be\nTRACTOR     cut by 50%. It is possible to TRACTOR either commanders (to help out\nTRACTOR     in a fight perhaps) or Federation starships. Starbases, planets,\nTRACTOR     stars, and black holes are not effected by the TRACTORS.\nTRACTOR       The use of the TRACTOR BEAM constitutes a turn, and enemies will\nTRACTOR     attack.\nFREEZE      FREEZE\nFREEZE        Mnemonic              : FREEZE\nFREEZE        (no abbreviation)\nFREEZE        The purpose of the FREEZE command is to allow a player to save\nFREEZE      current state of the game, so that it can be finished later. A local\nFREEZE      file FT26F001 is written with all the information about the game in\nFREEZE      progress.\nFREEZE        To restart a game created by the FREEZE command, the user need\nFREEZE      only type OLD in response to the initial question about the type of\nFREEZE      game desired.\nFREEZE        Note : a TOURNAMENT game is like a frozen game, with the\nFREEZE      following differences :\nFREEZE      (1) TOURNAMENT games always start from the beginning, while a\nFREEZE          frozen game can start at any point,\nFREEZE      (2) TOURNAMENT games require only that the player remember the\nFREEZE          name or number of the TOURNAMENT, while the information about\nFREEZE          a frozen game must be kept on a file.\nGRAPHICS    EXTERNAL\nGRAPHICS      Mnemonic              : EXTERNAL\nGRAPHICS      Shortest abbreviation : EX\nGRAPHICS      (This command is valid for Full-screen users only)\nGRAPHICS      The EXTERNAL command toggles the display of external views, that\nGRAPHICS    is, the graphics features of KLINGON.\nGRAPHICS      To turn the displays OFF, if displays are \"ON\" enter the EXTERNAL\nGRAPHICS    command, to turn them back ON, enter the command again.\nHINTS         The rules for KLINGON are very much like SUPER STAR TREK, with the\nHINTS       following exceptions :\nHINTS       - MAX SAFE WARP is 10,\nHINTS       - you have a TRACTOR BEAM which can be activated by typing :\nHINTS         TRAC TARGET where TARGET is the two number quadrant number you are\nHINTS         tractoring to ... it will pull in any kind of ship,\nHINTS       - you do not have phasers,\nHINTS       - you may fire 4 torpedoes at a time,\nHINTS       - you have an ANTI-PHOTON device which will protect you from 1 round\nHINTS         of Federation torpedoes (3 torps),\nHINTS       - you may not ORBIT, SHUTTLE, CRYSTAL, or use PLANETS command.\nHINTS       - you may not ABANDON |\nHINTS       If you are looking for a place to REFUEL (RECHARGE) you can't, you\nHINTS       are two weeks away from HOME. Your energy is replenished by your\nHINTS       warp energizers at the rate of 1024 units/stardate (i.e. REST or\nHINTS       MOVE slower than WARP 7 to get more energy).\nHINTS       Run out of time and you will die.\nHINTS       On the SHORT RANGE SCAN # is a black hole, try not to hit them.\nHINTS       The object of the game is to kill all the starbases, do so, and you\nHINTS       win. You need not kill any of the starships to win.\nHINTS       The CHART and LONG RANGE SCAN key is :\nHINTS         1000's digit = KLINGONs (your guys)\nHINTS         100's digit  = Federation starships (the enemy)\nHINTS         10's digit   = starbases (kill these)\nHINTS         1's digit    = stars\nHINTS       Your ANTI PHOTON device is disarmed by any hit from a Federation\nHINTS         starship ... to rearm it (at a cost of 500 units of energy) type\nHINTS         in A P command.\nHINTS       LONG RANGE SCANs show planets.\nFS3270      ========================\nFS3270      Notes for TSO 3270 users\nFS3270      ========================\nFS3270\nFS3270      For TSO 3270 users, KLINGON is a full screen application.\nFS3270      The major differences are :\nFS3270\nFS3270      The SRSCAN, LRSCAN, and STATUS commands cannot be explicitely\nFS3270      entered, since this information is on the screen at all times.\nFS3270\nFS3270      The format of the screen is : ...........  ++++++++++   LRSCAN\nFS3270                                    ...........  ++++++++++   and\nFS3270                                    ... SRS ...  + status +\nFS3270                                    ...........  ++ info ++   PLANET\nFS3270                                    ...........  ++++++++++   info\nFS3270      SRS and STATUS : the format of this information is the same as the\nFS3270      standard version. The LRSCAN and PLANET information is the same as\nFS3270      described in the LRSCAN command, however, the information is pre-\nFS3270      sented in a \"compressed\" form, to allow for the smaller amount of\nFS3270      space available on the screen.\nFS3270      The full screen mode will work only on 24, 32 and 43 lines 327X\nFS3270      devices. If you wish to experiment with other devices, the GAINIT,\nFS3270      FSIO1 and FSIO2 assembler routines supplied in source are those\nFS3270      which must be verified/modified by the user.\nBUGS        At the present time, please report any bugs to :\nBUGS             Larry Williams\nBUGS             P.O. Box 8069\nBUGS             Bartlett, IL  60103\nBUGS        or : MOINIL P.A. -- Phone number : (0332) 789442\nBUGS             Computing Centre (TP 361)\nBUGS             J.R.C. - Ispra Establishment\nBUGS             21020 ISPRA (VA), ITALY\nNEWS                            ||| No News |||\n./     ADD     NAME=#KLPROC\nPROC     0 LOADLIB(->.GROUP.KL.LOAD) -\n           FREEZEDS(KL.FREEZE) UNM(DISK) VSN(......)  -\n           HELPFILE(->.GROUP.KL.HELP) GRAPHIC(->.GROUP.KL.GRAPH)\n/*********************************************************************/\n/*  COMMENTS ON PARMS PASSED TO THIS CLIST :                         */\n/*  ----------------------------------------                         */\n/*  LOADLIB  = NAME OF LOAD LIBRARY WHERE THE \"KL\" AND \"KLINIT\"      */\n/*             PROGRAMS ARE LINKED IN.                               */\n/*  FREEZEDS = THE NAME (UNQUALIFIED) FOR THE FREEZE FILE, IN CASE   */\n/*             GAME FROZEN.                                          */\n/*  UNM/VSN  = UNIT TYPE AND VOLUME SERIAL NUMBER WHERE ALLOCATE     */\n/*             THE FREEZE FILE (FT27F001).                           */\n/*  HELPFILE = NAME OF DATA-SET WHERE \"KLINGON\" HELP DATA IS KEPT.   */\n/*                                                                   */\n/*  GRAPHIC  = \"GRAPHICS\" IMAGES FOR 3270 TYPE TERMINALS.            */\n/*           = (NULLFILE) - NOT USED FOR SEQUENTIAL MODE             */\n/*********************************************************************/\n         CONTROL NOFLUSH NOMSG\n         ERASE\n         ERROR DO\n           WRITE => NOW ALLOCATING THE FREEZE FILE, PLEASE STAND BY ...\n/*       ----> NOTICE THE FREEZE FILE IS ALLOC WITHOUT QUALIFIER, SO */\n/*             PROPER PREFIX WILL BE USED.                           */\n           ALLOC DD(FT27F001) DA(&FREEZEDS) UNIT(&UNM) VOLUME(&VSN) -\n             SP(1 1) TRACKS REL\n           WRITE => NOW INITIALIZING FREEZE FILE, PLEASE STAND BY ...\n/*       ----> CALL THE INITIALIZATION PROGRAM TO MAKE ZEROES        */\n           CALL '&LOADLIB(INITKL)'\n           GOTO ALLOCD\n           END\n/*       ----> FT06F001 IS NOT USED, BUT SOME VERSIONS OF FORTRAN    */\n/*             INSIST ON IT, SO ALLOCATED HERE.                      */\n         ALLOC DD(FT06F001) DA(*) REUSE\n         WRITE => NOW ATTEMPTING TO ALLOCATE YOUR FREEZE FILE\n         WRITE => IF NOT FOUND, IT WILL BE CREATED\n         ALLOC DD(FT27F001) DA(&FREEZEDS) OLD\nALLOCD:  WRITE => FREEZE FILE ALLOCATION COMPLETE\n         ERROR OFF\n         FREE ATTR(F)\n         ATTR F RECFM(F B) LRECL(80) BLKSIZE(3200) DSORG(PS)\n         WRITE => NOW CREATING HIGH SPEED WORK FILES\n         ALLOC DD(FT99F001) UNIT(VIO) USING(F) SP(1 1) CYL REUSE\n         ALLOC DD(FT98F001) UNIT(VIO) USING(F) SP(1 1) CYL REUSE\n         ALLOC DD(FT97F001) UNIT(VIO) USING(F) SP(1 1) CYL REUSE\n/*       ----> UNIT=10 IS THE DEBUG FILE, WILL NOT ACTUALLY BE       */\n/*             USED UNLESS DEBUG MODE IS ACTIVATED (ACTIVATED BY     */\n/*             XDEBUG COMMAND WITH PASSWORD)                         */\n/*             N.B. - LIMITED HERE TO ALLOCATE ONLY IF MATCHES       */\n/*                    SPECIFIC LOGONID BEING USED                    */\n         IF ((&SYSUID = SYSPAJA) OR (&SYSUID = AZC10)) THEN -\n           ALLOC DD(FT10F001) SYSOUT(X) HOLD REUSE\n/*       ----> UNIT 8  = SYSOUT TO SEND CERTIFICATES OF MERIT TO     */\n/*                       (FOR WINNERS OF EXPERT AND EMERITUS GAMES)  */\n         ALLOC DD(FT08F001) SYSOUT(A) DEST(RMT41) REUSE NOHOLD\n/*       ----> UNIT 26 = KLINGON HELP FILE (NOT IBM STANDARD HELP)   */\n         ALLOC DD(FT26F001) DA('&HELPFILE') SHR REUSE INPUT\n         WRITENR => DO YOU WISH TO RUN SEQUENTIAL LINE MODE (Y/N) ?\n         READ SLM\n/*       ----> UNIT 5  = INPUT FROM TERMINAL                         */\n/*       ----> UNIT 25 = FILES WHERE GRAPHICS FILES ARE KEPT,        */\n/*                       COPIED TO HIGH SPEED WORK FILES             */\n         IF &SLM EQ Y OR &SLM EQ YES THEN DO\n           ALLOC DD(FT05F001) DA(*) SHR REUSE\n           ALLOC DD(FT25F001) DA('NULLFILE') SHR REUSE\n           END\n         ELSE ALLOC DD(FT25F001) DA('&GRAPHIC') SHR REUSE\n         CALL '&LOADLIB(KL)'\n         FREE DA('&HELPFILE')\n         FREE DA('&LOADLIB')\n         FREE DD(FT27F001,FT08F001,FT26F001,FT99F001,FT98F001,FT06F001)\n         FREE DD(FT25F001,FT97F001,FT10F001)\n         IF &SLM EQ Y OR &SLM EQ YES THEN FREE DD(FT05F001)\n         ERASE\n         WRITE * = = = = = = = = = = = = = = = = = = = = = = = = = = =*\n         WRITE * PLEASE ONLY KEEP THE FREEZE FILE IF YOU FROZE A GAME *\n         WRITE * = = = = = = = = = = = = = = = = = = = = = = = = = = =*\n         WRITENR => DO YOU WISH TO KEEP THE FREEZE FILE (Y/N) ?\n         READ OPT\n         IF &OPT EQ Y OR &OPT EQ YES THEN -\n           WRITE => FREEZE FILE KEPT\n         ELSE DO\n           DELETE &FREEZEDS\n           WRITE => FREEZE FILE DELETED\n           END\n         FREE ATTR(F)\n         EXIT CODE(0)\n./     ADD     NAME=#LINK\n ORDER   MAIN(P)\n ORDER   OUTUNT\n ORDER   TRACKR\n ORDER   TERMSZ\n ORDER   INFOSH\n ORDER   INFO\n ORDER   MISC\n ORDER   TRACOM\n ORDER   NUMBER\n ORDER   SHIPS\n ORDER   CPU\n ORDER   DEVICE\n ORDER   HURT\n ORDER   SSINFO\n ORDER   CWORD\n ORDER   SRCOPY\n ORDER   DEBUG\n ORDER   Z3270\n ORDER   PHASE\n ORDER   EXTRA\n ORDER   SHIFTF\n ORDER   IW\n ORDER   IWI\n ORDER   BRIDGE\n ORDER   ICROG\n ORDER   ISGN\n ORDER   LRSCAN\n ORDER   NUMREC\n ORDER   PRHIT\n ORDER   PRMIM\n ORDER   PRMRM\n ORDER   PRMSG\n ORDER   PRMSM\n ORDER   RAND\n ORDER   RANDF\n ORDER   READIN\n ORDER   SETFOR\n ORDER   SRSCAN\n ORDER   SR3270\n ORDER   SRS\n ORDER   XDEBUG\n ORDER   XFILLB\n ORDER   XCHEAD\n ORDER   DBUGRN\n INCLUDE SYSOBJ(ABANMS)\n INCLUDE SYSOBJ(ABSORB)\n INCLUDE SYSOBJ(ADDQUE)\n INCLUDE SYSOBJ(APDEV)\n INCLUDE SYSOBJ(AROUND)\n INCLUDE SYSOBJ(BATTCK)\n INCLUDE SYSOBJ(BATTLE)\n INCLUDE SYSOBJ(BEEP)\n INCLUDE SYSOBJ(BEEP2)\n INCLUDE SYSOBJ(BLOCKD)\n INCLUDE SYSOBJ(BRIDGE)\n INCLUDE SYSOBJ(BSTAT)\n INCLUDE SYSOBJ(CERT)\n INCLUDE SYSOBJ(COMOVE)\n INCLUDE SYSOBJ(COPVEC)\n INCLUDE SYSOBJ(CORAND)\n INCLUDE SYSOBJ(DAMAGE)\n INCLUDE SYSOBJ(DAMAGR)\n INCLUDE SYSOBJ(DBUGCH)\n INCLUDE SYSOBJ(DBUGIA)\n INCLUDE SYSOBJ(DBUGIN)\n INCLUDE SYSOBJ(DBUGRA)\n INCLUDE SYSOBJ(DBUGRN)\n INCLUDE SYSOBJ(DEBUGX)\n INCLUDE SYSOBJ(DEATHR)\n INCLUDE SYSOBJ(DESMSG)\n INCLUDE SYSOBJ(DISPIN)\n INCLUDE SYSOBJ(DIST)\n INCLUDE SYSOBJ(DOCK)\n INCLUDE SYSOBJ(DRAGIN)\n INCLUDE SYSOBJ(EMPLAC)\n INCLUDE SYSOBJ(ENGUSE)\n INCLUDE SYSOBJ(ENGYST)\n INCLUDE SYSOBJ(ESCAPE)\n INCLUDE SYSOBJ(FREEZE)\n INCLUDE SYSOBJ(FSIO1)\n INCLUDE SYSOBJ(FSIO2)\n INCLUDE SYSOBJ(GAINIT)\n INCLUDE SYSOBJ(GRAFIC)\n INCLUDE SYSOBJ(HELP)\n INCLUDE SYSOBJ(HELPRT)\n INCLUDE SYSOBJ(ICROG)\n INCLUDE SYSOBJ(IDENT)\n INCLUDE SYSOBJ(IFEDST)\n INCLUDE SYSOBJ(IFWIN)\n INCLUDE SYSOBJ(IN3270)\n INCLUDE SYSOBJ(INITCH)\n INCLUDE SYSOBJ(INITCT)\n INCLUDE SYSOBJ(INITDM)\n INCLUDE SYSOBJ(INITGR)\n INCLUDE SYSOBJ(INSFOR)\n INCLUDE SYSOBJ(INTERC)\n INCLUDE SYSOBJ(INTRO)\n INCLUDE SYSOBJ(ISBSET)\n INCLUDE SYSOBJ(ISGN)\n INCLUDE SYSOBJ(ITERPT)\n INCLUDE SYSOBJ(IW)\n INCLUDE SYSOBJ(IWI)\n INCLUDE SYSOBJ(JULIAN)\n INCLUDE SYSOBJ(KILLER)\n INCLUDE SYSOBJ(KL)\n INCLUDE SYSOBJ(LINEF)\n INCLUDE SYSOBJ(LOCATE)\n INCLUDE SYSOBJ(LONINT)\n INCLUDE SYSOBJ(LRSCAN)\n INCLUDE SYSOBJ(MAININ)\n INCLUDE SYSOBJ(M2FAST)\n INCLUDE SYSOBJ(NOVKIL)\n INCLUDE SYSOBJ(NUMREC)\n INCLUDE SYSOBJ(OLDNEW)\n INCLUDE SYSOBJ(ORBIT)\n INCLUDE SYSOBJ(PERHIT)\n INCLUDE SYSOBJ(PHASER)\n INCLUDE SYSOBJ(PHOTON)\n INCLUDE SYSOBJ(PLACE)\n INCLUDE SYSOBJ(PLAGAN)\n INCLUDE SYSOBJ(PLANET)\n INCLUDE SYSOBJ(PRCHRT)\n INCLUDE SYSOBJ(PRHIT)\n INCLUDE SYSOBJ(PRMIM)\n INCLUDE SYSOBJ(PRMRM)\n INCLUDE SYSOBJ(PRMSG)\n INCLUDE SYSOBJ(PRMSGC)\n INCLUDE SYSOBJ(PRMSG1)\n INCLUDE SYSOBJ(PRMSM)\n INCLUDE SYSOBJ(PROMOT)\n INCLUDE SYSOBJ(PRSC)\n INCLUDE SYSOBJ(PRTEND)\n INCLUDE SYSOBJ(RAND)\n INCLUDE SYSOBJ(RANDF)\n INCLUDE SYSOBJ(RANSET)\n INCLUDE SYSOBJ(READIN)\n INCLUDE SYSOBJ(REPAIR)\n INCLUDE SYSOBJ(RESORT)\n INCLUDE SYSOBJ(SCAN)\n INCLUDE SYSOBJ(SCORE)\n INCLUDE SYSOBJ(SECSET)\n INCLUDE SYSOBJ(SENDEC)\n INCLUDE SYSOBJ(SETFED)\n INCLUDE SYSOBJ(SETFOR)\n INCLUDE SYSOBJ(SHECON)\n INCLUDE SYSOBJ(SHIP)\n INCLUDE SYSOBJ(SHIFT)\n INCLUDE SYSOBJ(SHIFTC)\n INCLUDE SYSOBJ(SHIFTAB)\n INCLUDE SYSOBJ(SRS)\n INCLUDE SYSOBJ(SR3270)\n INCLUDE SYSOBJ(SRSCAN)\n INCLUDE SYSOBJ(SSDEST)\n INCLUDE SYSOBJ(SSFIND)\n INCLUDE SYSOBJ(SSINIT)\n INCLUDE SYSOBJ(SSMOVI)\n INCLUDE SYSOBJ(SSMOVO)\n INCLUDE SYSOBJ(SSPRNT)\n INCLUDE SYSOBJ(SSTART)\n INCLUDE SYSOBJ(STARTM)\n INCLUDE SYSOBJ(STAX)\n INCLUDE SYSOBJ(TARSET)\n INCLUDE SYSOBJ(TIME)\n INCLUDE SYSOBJ(TIMMSG)\n INCLUDE SYSOBJ(TIMUSE)\n INCLUDE SYSOBJ(TRACK)\n INCLUDE SYSOBJ(TSMSG)\n INCLUDE SYSOBJ(XFILLB)\n INCLUDE SYSOBJ(XCHEAD)\n INCLUDE SYSOBJ(XDEBUG)\n INCLUDE SYSOBJ(YESNO)\n ENTRY MAIN\n NAME KL(R)\n./     ADD     NAME=#LNKINIT\n INCLUDE SYSOBJ(INITKL)\n NAME INITKL(R)\n./     ADD     NAME=#MEMLIST\nINITKL\nKL\nABANMS\nABSORB\nADDQUE\nAPDEV\nAROUND\nBATTCK\nBATTLE\nBEEP\nBEEP2\nBLOCKD\nBRIDGE\nBSTAT\nCERT\nCOMOVE\nCOPVEC\nCORAND\nDAMAGE\nDAMAGR\nDBUGCH\nDBUGIA\nDBUGIN\nDBUGRA\nDBUGRN\nDEATHR\nDEBUGX\nDESMSG\nDISPIN\nDIST\nDOCK\nDRAGIN\nEMPLAC\nENGUSE\nENGYST\nESCAPE\nFREEZE\nFSIO1\nFSIO2\nGAINIT\nGRAFIC\nHELP\nHELPRT\nICROG\nIDENT\nIFEDST\nIFWIN\nINITCH\nINITCT\nINITDM\nINITGR\nINSFOR\nINTERC\nINTRO\nIN3270\nISBSET\nISGN\nITERPT\nIW\nIWI\nJULIAN\nKILLER\nLINEF\nLOCATE\nLONINT\nLRSCAN\nMAININ\nM2FAST\nNOVKIL\nNUMREC\nOLDNEW\nORBIT\nPERHIT\nPHASER\nPHOTON\nPLACE\nPLAGAN\nPLANET\nPRCHRT\nPRHIT\nPRMIM\nPRMRM\nPRMSG\nPRMSGC\nPRMSG1\nPRMSM\nPROMOT\nPRSC\nPRTEND\nRAND\nRANDF\nRANSET\nREADIN\nREPAIR\nRESORT\nSCAN\nSCORE\nSECSET\nSENDEC\nSETFED\nSETFOR\nSHECON\nSHIFT\nSHIFTAB\nSHIFTC\nSHIP\nSRS\nSRSCAN\nSR3270\nSSDEST\nSSFIND\nSSINIT\nSSMOVI\nSSMOVO\nSSPRNT\nSSTART\nSTARTM\nSTAX\nTARSET\nTIME\nTIMMSG\nTIMUSE\nTRACK\nTSMSG\nXCHEAD\nXDEBUG\nXFILLB\nYESNO\n./     ADD     NAME=#RULES\n1\n0                                                                Page 1\n0                                 K L I N G O N\n+                                 _____________\n0                A  S P A C E   W A R   S T A R   T R E K   G A M E\n0                                      by\n0                                LARRY WILLIAMS\n0        Rules adapted from a game \"SUPER STAR TREK\", written by David\n         MATUSZEK and  Paul REYNOLDS, rewritten for the HARRIS 220\n         at PENN STATE UNIVERSITY by Rod HILLS and extended by John\n         MCLAUGHLIN.\n0        No portion of the code from SUPER STAR TREK was used in\n         writing KLINGON.\n0        Permission is hereby granted for the copying, distribution,\n         modification and use of this program and associated\n         documentation for recreational purposes, provided that all\n         references to the author are retained. However, permission\n         is not and will not be granted for the sale or promotional\n         use of this program or program documentation, or for use in\n         any situation in which profit may be considered an objective,\n         since it is the desire of the author to respect the copyrights\n         of the originators of STAR TREK.\n0        ---------------------------------------------------------------\n0        The Organian Peace Treaty has collapsed, and the Federation\n         is at war with the KLINGON empire, and you are the commander\n         of the flagship of the KLINGON empire : the supercommander\n         KAZH, the mighest ship in the known galaxy.\n0        Your battleground is Federation space, which for convenience\n         is divided up into eight rows of eight quadrants each, like\n         a checkerboard. Rows are numbered from top to bottom, and\n         columns are numbered left to right, so quadrant 1 - 8 would\n         be in the upper right hand corner of the galaxy.\n0        During battle you will be concerned only with those enemies,\n         that is to say, Federation starbases, and Federation\n         starships, that occupy the same quadrant as yourself.\n         Quadrants are divided up into sectors, ten rows of ten sectors\n         each. Sectors are numbered in the same way as quadrants, so\n         the sector in the upper right corner is sector 1 - 10. You\n         have a SHORT-RANGE SCANNER which allows you to look at the\n         entire quadrant in a single display.\n0        Enemies recharge during your absence. If you leave a quadrant\n         containing a weakened enemy, when you return to that quadrant\n         he will be strong again. Also, each time you enter a quadrant,\n         the positions of everything in the quadrant (except your ship)\n         are randomized, to save you the trouble of trying to remember\n         where everything in the quadrant is. Notice that this refers\n         only to the positions of things in the quadrant--the numbers\n         of each kind of thing are not changed (except black holes)\n         if you kill something, it stays dead.\n1\n0                                                                Page 2\n0        There are two kinds of KLINGONs commanders, and yourself, the\n         supercommander KAZH, the commanders are not quite a match for\n         a Federation starship, but they can do quite a bit of damage.\n0        Your ship contains the most advanced KLINGON engineering\n         features, including a LONG RANGE TRACTOR BEAM, an ANTI-PHOTON\n         device, and a DILITHIUM RE-ENERGIZER that can refocus energy\n         from your main energy cells, back into the MATTER-ANTIMATTER\n         CONVERTERS to create energy at a rate of 1024 units/stardates,\n         recharging your ship. This recharging is essential to your home\n         possibility of success for you and your strike force, since\n         is two weeks away, and you can't stop anyplace for energy.\n0        There is yet another problem, too, you don't have the element\n         of surprise forever, you must break through the Federation\n         defenses, and destroy all starbases before the Federation has\n         time to muster a defense to your strike force, in about 7\n         stardates.\n0        In light of this energy shortage, your ship is not equipped\n         with any kind of energy weapons, such as phasers, but instead\n         is equipped with ULTRA HIGH POWER DISRUPTOR TORPEDOES, each\n         containing over ten grams of anti-matter.\n0        If you succeed in your mission, which is not an easy one, then\n         many riches of the galaxy will be yours, and you will have\n         complete control over all Federation space, making the galaxy\n         safe for treachery forever.\n0        Space is vast, and it takes precious time to move from one\n         place to another. In comparison, other things happen so quickly\n         that we assume they take no time at all. Two ways that time can\n         pass are when you move, or when you issue a command to sit\n         still and REST for a period of time. You will sometimes want to\n         do the latter, since the various devices aboard your starship\n         may be damaged and require time to repair.\n0        In addition to starships and starbases, the galaxy contains\n         (surprise) stars. Mostly, stars are a nuisance and just get in\n         your way. However, stars can be very useful when next to an\n         intended target, as they can then be made to go NOVA, causing\n         heavy damage to any nearby ships or starbases. If another star\n         is adjacent to a NOVA, it too will go NOVA. Stars may also\n         occasionally go SUPERNOVA; a SUPERNOVA in a quadrant destroys\n         everything in the quadrant and makes the quadrant permanently\n         uninhabitable. You may \"JUMP OVER\" a quadrant containing a\n         SUPERNOVA when you MOVE, but you should not STOP there.\n1\n0                                                                Page 3\n0        SUPERNOVAs are a rare natural event, the most likely way for a\n         start to go SUPERNOVA is for one of your DISRUPTOR TORPEDOES\n         to set it off. In the event you do set off a star (10%) and it\n         goes SUPERNOVA, navigational control of your ship will be\n         taken over by your battle computer, and you will be piloted\n         out of the quadrant, picking as a target quadrant, one of the\n         following : (in order of preference)\n0             1. the nearest quadrant that does not contain an enemy\n                 starbase or starship,\n0             2. a quadrant slightly more distant that does not contain\n                 an enemy,\n0             3. the nearest quadrant to which the path is clear,\n0             4. any quadrant to which you can move.\n0        If your BATTLE COMPUTER is damaged, you will be given a random\n         course to a random nearby quadrant.\n0        Also a few PLANETs are scattered through the galaxy. These can\n         be very helpful, and you get time bonus (which can be turned\n         into energy by RESTing,  which increases your energy supply)\n         depending on the billions of people killed and whether the\n         planet had dilithium when you blow up these planets. Planets\n         can be detected on the LONG RANGE SCANNERS.\n0        Finally, each quadrant will contain from 0 to 3 black holes.\n         These can swallow TORPEDOES passing near them. They are just\n         something to get in your way, and serve no useful purpose.\n1\n0                                                                Page 4\n0                  --------- HOW TO ISSUE COMMANDS ---------\n0        (IBM 327X TSO users should refer to \"Appendix T - Notes for\n         TSO full screen users\")\n0        When the game is waiting for you to enter a command, it will\n         print out :\n                   COMMAND - ?\n         you may then type in your command. All you have to remember\n         for each command is the mnemonic. For example, if you want to\n         MOVE straight up for one quadrant, you can type in the\n         mnemonic \"MOVE\" and the computer will prompt you with :\n                   MANUAL OR AUTOMATIC?\n         say you type in 'MANUAL'. The computer then responds :\n                   X AND Y DISPLACEMENTS-\n         now you type in 0 1 which specifies an X movement of zero and\n         a Y movement of 1.\n         When you have learned the commands, you can avoid being\n         prompted by simply typing in the information without waiting\n         to be asked for it. For example, in the above example, you\n         could simply type in :\n                   MOVE MANUAL 0 1\n         and it will be done. Or you could type in :\n                   MOVE MANUAL\n         and when the computer responds with :\n                   X AND Y DISPLACEMENTS-\n         you can type in :\n                   0 1\n         and it will understand. You can abbreviate most mnemonics.\n         For \"MOVE\", you can use any of :\n                   MOVE     MOV     MO     M\n         successfully. For your safety, certain critical commands (such\n         as to TERMINATE) must be written out in full. Also, in a few\n         cases two or more commands begin with the same letter, and in\n         this case that letter refers to a particular one of the\n         commands; to get the other, your abbreviation must be two or\n         more letters long. This sounds complicated, but you will learn\n         the abbreviations quickly enough.\n0        What this all boils down to is :\n              (1) you can abbreviate practically anything,\n              (2) if you forget, the computer will prompt you,\n              (3) if you remember, you can type it all on one line.\n         If you are part way through entering a command and you change\n         your mind, you can cancel the command by typing a -1 as one of\n         the parameters, with the exception of the MANUAL MOVE command\n         (type X and Y of 0 0 to cancel a MOVE MANUAL).\n0        If anything is not clear to you, experiment. The worst you can\n         do is lose a game or two.\n1\n0                                                                Page 5\n0                ---------  C  O  M  M  A  N  D  S  ---------\n0        ABANDON SHIP\n+        ____________\n0        Mnemonic : ABANDON\n         (No abbreviation)\n0        You may not ABANDON ship, that is unworthy of a KLINGON.\n0\n0        ANTI-PHOTON DEVICE\n+        __________________\n0        Mnemonic : ANTI PHOTON\n         Shortest abbreviation : A P\n         Full command : ANTI PHOTON\n0        Like all KLINGON commanders, your ship is equipped with an\n         ANTI-PHOTON device. This A.P.D. will protect you from one\n         round of Federation PHOTON TORPEDOES (3). The A.P.D. requires\n         500 units of shield energy to activate it. Two things can\n         disarm the ANTI-PHOTON device, 1. it absorbs a full round of\n         TORPEDOES or 2. a Federation starship fires phasers at you\n         (the A.P.D. is run by the ship's main computer, not the battle\n         computer, and as such is not affected when the battle computer\n         is damaged and can be used even if your shields are down).\n0        The use of the ANTI PHOTON device does not count as a turn and\n         can be activated instantly, even during battle, at no cost in\n         time, and does not allow enemies to attack.\n0\n0        BATTERY\n+        _______\n0        Mnemonic :BATTERY\n         Shortest abbreviation :BATT\n0        The BATTERY command provides information of whether your\n         batteries (used if you fall below zero energy) are charged or\n         not, once the batteries are drained there is no way to recharge\n         them. They contain 750.0 units of energy.\n1\n0                                                                Page 6\n0        CHART\n+        _____\n0        Mnemonic : CHART\n         Shortest abbreviation : C\n0        As you proceed in the game, you learn more and more about what\n         things are where in the galaxy. This information is automati-\n         cally recorded for you in your star CHART.\n0        The CHART looks like an 8 by 8 array of numbers. These numbers\n         are interpreted exactly as they are on a LONG-RANGE SCAN.\n         A period (.) in place of a digit means you do not know that\n         information yet. For example, ... means you know nothing about\n         the quadrant.\n0        Looking at the star CHART is a free operation. It costs you\n         neither time nor energy, and can be done safely whether in or\n         out of battle.\n0\n0        COMPUTE MOVEMENT\n+        ________________\n0        Mnemonic : COMPUTE\n         Shortest abbreviation : CO\n         Full commands : COMPUTE AUTOMATIC <ROWSEC> <COLSEC>\n                         COMPUTE AUTOMATIC <RQUAD> <CQUAD> <RSEC> <CSEC>\n                         COMPUTE MANUAL <X-DISP> <Y-DISP>\n0        The ship's COMPUTER allows you to get some information about\n         movement, before you actually move. You enter the destination\n         you are considering in the same format as MOVE.\n         The COMPUTER will then calculate and report to you the time\n         and energy required for such a trip.\n0        This command requires no time or energy, so you may use it\n         anytime your ship's COMPUTER is undamaged.\n1\n0                                                                Page 7\n0        COMPUTER (BATTLE)\n+        _________________\n0        Mnemonic : -none-\n         (Not a command)\n0        While not a command, this section is to document what functions\n         are handled by the \"SHIP'S COMPUTER\" which is in the heart of\n         the ship and not open to attack, and what is controlled by the\n         \"BATTLE COMPUTER\" (can't do everything on one COMPUTER|).\n0        Usually the functions controlled by the BATTLE COMPUTER are\n         less critical.\n0        Controlled by the BATTLE COMPUTER :\n0             Compute of movement\n              Compute of path out of way of SUPERNOVA\n              Control of battery if power below zero\n              Move automatic functions\n0        Functions handled by \"SHIP'S COMPUTER\" (not open to attack)\n0             DEFLECTOR SCREEN control (considered vital)\n              Control of ship's energy allowing transfer of energy\n              Automating Dampening System (when DISRUPTOR TORPEDOES\n                   explode in the firing tubes)\n              Star CHART\n              WARP engine control\n              ANTI-PHOTON device\n1\n0                                                                Page 8\n0        DAMAGE REPORT\n+        _____________\n0        Mnemonic : DAMAGES\n         Shortest abbreviation : DA\n0        At any time you may ask for a damage report to find out what\n         devices are damaged and how long it will take to repair them.\n0        If you suffer damages and MOVE, it is possible that a subse-\n         quent damage report will not show any damage. This happens if\n         the time spent on the MOVE exceeds the repair time, since in\n         this case the damaged devices were fixed en route.\n0        Damage reports are free. They use no energy or time, and can\n         be done safely even in the midst of battle.\n0\n0        DEFLECTOR SHIELDS\n+        _________________\n0        Mnemonic : SHIELDS\n         Shortest abbreviation : SH\n         Full commands : SHIELDS UP\n                         SHIELDS DOWN\n                         SHIELDS TRANSFER (AMOUNT OF ENERGY TO TRANSFER)\n0        Your DEFLECTOR SHIELDS are a defensive device to protect you\n         from Federation attacks (and nearby NOVAs). As the shields\n         protect you, they gradually weaken. A shield strength of 75\n         percent, for example, means that the next time you are\n         attacked, your shields will deflect 75 percent of the hit, and\n         let 25 percent get through to hurt you.\n0        It costs 50 units of energy to raise shields, nothing to lower\n         them.\n0        You should never have to raise or lower shields manually, as\n         your automatic DEFLECTOR SCREEN CONTROL will do this for you,\n         as you go into battle, and leave battle.\n0        You may transfer energy between the ship's energy (given as\n         (ENERGY) in STATUS) and the shields. (TRANSFER) may be\n         abbreviated (T). (AMOUNT OF ENERGY TO TRANSFER) is the number\n         of units of energy you wish to take from the ship's energy and\n         put into the shields. If you specify a negative number, energy\n         is drained from the shields to the ship.\n         Transferring energy constitutes a turn. If you transfer energy\n         to the shields while under attack, they will be at the new\n         energy level when you are next hit.\n0        Enemy TORPEDOES hitting your ship explode on your shields (if\n         they are up) and have essentially the same effect as phaser\n         hits.\n1\n0                                                                Page 9\n0        DISRUPTOR TORPEDOES\n+        ___________________\n0        Mnemonic : DISRUPTOR\n         Shortest abbreviation : DIS\n         Full commands : DISRUPTOR (NUMBER),(T1),(T2),(T3),(T4)\n                                   (T1, T2... means \"TARGET NUMBER\")\n0        DISRUPTOR TORPEDOES are projectile weapons--you either hit\n         what you aim at, or you don't. There are no 'PARTIAL HITS'.\n0        You may fire DISRUPTOR TORPEDOES singly, or in bursts of two,\n         three or four. Each TORPEDO is individually targettable\n         The computer will prompt you, asking for the target sector\n         for each TORPEDO. Alternately, you may specify each taraget\n         in the command line.\n0        If more than one TORPEDO is fired and only one target sector\n         is specified, all TORPEDOES are fired at that sector. For\n         example, to fire two TORPEDOES at sector 3 - 4, you type :\n0             DIS 2 3 4           (or)           DIS 2 3 4 3 4\n0        To fire TORPEDOES at, consecutively, sectors 2 - 6,  1 - 10,\n         and 4 - 7, type :\n0             DIS 3 2 6 1 10 4 7\n0        There is no restriction to fire directly at a sector. For\n         example, you can enter :\n0             DIS 1 3 2.5\n0        to aim between two sectors. However, sector numbers must be\n         1 to 10 inclusive.\n0        TORPEDOES going within 0.5 sectors of a black hole are\n         swallowed. If your DISRUPTOR TORPEDO tubes are damaged less\n         than 3 stardates, you can still fire 2 TORPEDOES (instead of\n         4).\n0\n0        DESTRUCT\n+        ________\n0        Mnemonic : DESTRUCT\n0        (No abbreviation)\n0        You may self-DESTRUCT, thus killing yourself and ending the\n         game.\n1\n0                                                               Page 10\n0        EXTERNAL\n+        ________\n0        Mnemonic : EXTERNAL\n         Shortest abbreviation : EX\n0        (This command is valid for Full-screen users only)\n0        The \"EXTERNAL\" command toggles the display of external views,\n         that is, the graphics features of KLINGON.\n0        To turn the displays OFF, if displays are \"ON\" enter the\n         \"EXTERNAL\" command, to turn them back ON, enter the command\n         again.\n0\n0        FREEZE\n+        ______\n0        Mnemonic : FREEZE\n         (No abbreviation)\n0        The purpose of the \"FREEZE\" command is to allow a player to\n         save the current state of the game, so that it can be finished\n         later. All pertinant information about the game is written to\n         a FREEZE file, saved on the users catalog, and the game stops.\n0        To restart a game created by the 'FREEZE' command, the user\n         need only type 'OLD' in response to the initial question about\n         the type of game desired, followed by the (FILE NAME).\n0        Note : a 'TOURNAMENT' game is like a frozen game, with the\n         following differences : (1) TOURNAMENT games always start from\n         the beginning, While a frozen game can start at any point,\n         (2) TOURNAMENT games require only that the player remember the\n         name or number of the TOURNAMENT, while the information about\n         a frozen game must be kept on a file.\n0\n0        HELP\n+        ____\n0        Mnemonic : HELP\n         (No abbreviation)\n0        HELP command connects you with the KLINGON help data base, for\n         quick help on using a command.\n1\n0                                                               Page 11\n0        IMPULSE ENGINES\n+        _______________\n0        Mnemonic : IMPULSE\n         Shortest abbreviation : I\n         Full command : IMPULSE (MANUAL or AUTOMATIC),(DISP or DEST)\n                                            (\"DISP\" means displacement,\n                                             \"DEST\" is destination)\n0        The IMPULSE ENGINES give you a way to MOVE when your WARP\n         engines are damaged. They move you at a speed of 0.95 sectors\n         per stardate, which is the equivalent os a WARP FACTOR of about\n         0.975, so they are much too slow to use except in emergencies.\n0        Movement commands are indicated just as in the 'MOVE' command.\n0        The IMPULSE ENGINES require 20 units of energy to engage, plus\n         10 units per sector (100 units per quadrant) travelled.\n0\n0        LONG-RANGE SCAN\n+        _______________\n0        Mnemonic : LRSCAN\n         Shortest abbreviation : L\n0        A LONG-RANGE SCAN gives you general information about where\n         you are and what is around you. Here is an example output :\n0             LONG RANGE SCAN FOR AREA:  1 - 4\n0                ****   ****   ****\n0                 102      2   9999\n0                1007      3     19\n0             PLANET DETECTED IN QUADRANT:  2 - 5\n0        This scan says that you are in row 1, column 4 of the 8 by 8\n         galaxy. The numbers in the scan indicate how many of each kind\n         of thing there is in your quadrant and all adjacent quadrants.\n         The digits are interpreted as follows :\n0             THOUSANDs digit = 1000 indicates a KLINGON commander,\n              HUNDREDs digit  = number of Federation starships,\n              TENs digit      = number of starbases present,\n              ONEs digit      = number of stars present,\n              9999            = indicates SUPERNOVA,\n              ****            = edge of Federation space.\n1\n0                                                               Page 12\n0        For example, in your quadrant (1 - 4) the number is 2, which\n         indicates 2 stars, you, and nothing else (you are always in\n         the center quadrant of these scans). There is a Federation\n         starship in quadrant 1 - 3 (102),  a commander and seven stars\n         in quadrant 2 - 3 (1007), a SUPERNOVA in quadrant 1 - 5 (9999)\n         and a starbase, and nine stars in 2 - 5 (19).\n0        You might also notice a report on a planet in quadrant 2 - 5\n         unlike SUPER STAR TREK, planets are detectable by LONG RANGE\n         SCAN, so that if they are in your flight path, you can stop\n         and kill it if you wish.\n0        Since you are in row 1, there are no quadrants above you.\n         The  ****'s indicate the border of Federation space, which\n         you are not permitted to cross.\n0        LONG-RANGE SCANs are free. They use up no energy or time, and\n         can be done safely regardless of battle conditions.\n0\n0        MOVE UNDER WARP DRIVE\n+        _____________________\n0        Mnemonic : MOVE\n         Shortest abbreviation : M\n         Full command : MOVE MANUAL (DISPLACEMENT)\n                        MOVE AUTOMATIC (DESTINATION)\n0        This command is the usual way to MOVE from one place to\n         another within the galaxy. You MOVE under WARP DRIVE,\n         according to the current WARP FACTOR (see 'WARP FACTOR').\n0        There are two command modes for movement; MANUAL and\n         AUTOMATIC. The MANUAL mode requires the following format :\n0                  MOVE MANUAL (DELTX),(DELTY)\n0        (DELTX) and (DELTY) are the horizontal and vertical\n         displacements for your starship, in quadrants; a displacement\n         of one sector is 0.1 quadrants. Specifying (DELTX) and (DELTY)\n         causes your ship to MOVE in a straight line to the specified\n         destination. If (DELTY) is omitted, it is assumed zero. For\n         example, the shortest possible command to MOVE 1 sector to the\n         right would be :\n0                  M M .1\n1\n0                                                               Page 13\n0        The following examples of MANUAL movement refer to the\n         SHORT-RANGE SCAN example.\n0             DESTINATION SECTOR      MANUAL MOVEMENT COMMAND\n0                   3 - 1                    M M -.3 .1\n                    2 - 1                    M M -.3 .2\n                    1 - 2                    M M -.2 .3\n                    3 - 4                    M M 0 .1\n              (LEAVING QUADRANT)             M M .7\n                    3 - 5                    M M .1 .1\n                    4 - 10                   M M .6\n                    6 - 6                    M M .2 -.2\n                    5 - 4                    M M 0 -.1\n0        The AUTOMATIC mode is as follows :\n0                  MOVE AUTOMATIC (QROW),(QCOL),(SROW),(SCOL)\n0        where (QROW) and (QCOL) are the row and column numbers of the\n         destination quadrant, and (SROW) and (SCOL) are the row and\n         column numbers of the destination sector within that quadrant.\n         This command also MOVEs your ship in a straight line path to\n         the destination. For moving within a quadrant, (QROW) and\n         (QCOL) may be omitted. For example, to MOVE to sector 2 - 9\n         in the current quadrant, the shortest command would be :\n0                  M A 2 9\n0        To MOVE to quadrant 3 - 7, sector 5 - 8, type :\n0                  M A 3 7 5 8\n0        and it will be done. In AUTOMATIC mode, either two or four\n         numbers must be supplied.\n0        AUTOMATIC mode utilizes the ship's 'BATTLE COMPUTER'. If the\n         COMPUTER is damaged, MANUAL movement must be used.\n0        If WARP ENGINES are damaged less than 5 stardates you can\n         still go WARP five.\n0        It uses time and energy to MOVE. How much time and how much\n         energy depends on your current WARP FACTOR and the distance you\n         MOVE. The higher the WARP FACTOR, the faster you MOVE, and the\n         more energy you use, but the WARP ENGINES are more efficient at\n         high speeds.\n0        In other words, to get there twice as fast does not use twice\n         as much energy.\n0        The suggested WARP speed is WARP 10, the fastest \"SAFE\" speed.\n1\n0                                                               Page 14\n0        PHOTON TORPEDOES\n+        ________________\n0        See DISRUPTOR TORPEDO command.\n0\n0        REST\n+        ____\n0        Mnemonic : REST\n         Shortest abbreviation : RES\n         Full command : REST (NUMBER OF STARDATES)\n0        This command simply allows the specified number of stardates\n         to go by. This is useful if you have suffered damages and wish\n         to wait until repairs are made before you go back into battle,\n         or you wish to REST to restore energy (1024 units/stardate).\n0        It is not generally advisable to REST while you are under\n         attack by the Federation.\n0\n0        SENSOR-SCAN\n+        ___________\n0        Mnemonic : SENSORS\n         Shortest abbreviation : SE\n0        Utilizing the SHORT-RANGE SENSORS, your first officer gives\n         you a readout on any planet in your quadrant.\n1\n0                                                               Page 15\n0        SHORT-RANGE SCAN\n+        ________________\n0        Mnemonic : SRSCAN\n         Shortest abbreviation : S\n         Full commands : SRSCAN\n                         SRSCAN NO\n         (TSO 327X users should refer to \"Appendix T - Notes for TSO\n         full screen users\")\n0        The SHORT-RANGE SCAN gives you a considerable amount of\n         information about the quadrant your starship is in. A SHORT\n         RANGE SCAN is best described by an example.\n0              1 2 3 4 5 6 7 8 9 10\n             1 * . . . . . . . . .  TORPEDOES    150 CONDITION: READY\n             2 . . . F . . . . . .  POSITION    5 - 1, 4 - 4\n             3 . . . . . * . B . .  STARDATE    4300.00\n             4 . . . S . . . . . .  REMAINING      6.93\n             5 . . . . . . . . . .  CONDITION   RED   A.P.D.  ARMED\n             6 . . . # . . . . * .  ENERGY      2176.25\n             7 . . . . . P . . . .  SHIELDS   UP  3472 PCT 11800 UNTS\n             8 . . . . * . . . . .  WARP FACTOR   10.00\n             9 . * . . * . . . C .  FEDERATION  BASES 6  STARSHIPS 4\n            10 . . . . . . . . . .  KLINGON     COMMANDERS  4\n0        The left part is a picture of the quadrant.\n         The S at sector 4 - 4 represents the supercommander KAZH; the\n         B at sector 3 - 8 is a starbase. There is a KLINGON commander\n         (C) at sector 9 - 9, and a planet at sector 7 - 6.\n         Other features in the quadrant are a Federation starship (F),\n         at 2 - 4, and a black hole at 6 - 4 (#). The stars (*) are\n         located at 1 - 1, 3 - 6, 6 - 9, 8 - 5, 9 - 2, and 9 - 5.\n0        The periods (.) are just empty space--they are printed to help\n         you get your bearings.\n0        The information on the right is assorted STATUS information.\n         The STATUS information will be absent if you type NO after\n         SRSCAN. Otherwise, STATUS information will be presented.\n0        SHORT-RANGE SCANs are free. That is, they use up no energy and\n         no time. If you are in battle, doing a SHORT-RANGE SCAN does\n         not give the enemies another chance to hit you. You can safely\n         do a SHORT-RANGE SCAN anytime you like.\n1\n0                                                               Page 16\n0        STATUS REPORT\n+        _____________\n0        Mnemonic : STATUS\n         Shortest abbreviation : ST\n         (TSO 327X users should refer to \"Appendix T - Notes for TSO\n         full screen users\")\n0        This command gives you information about the current state of\n         your starship, as follows :\n0             STARDATE - the current date. A stardate is the same as\n                   a day.\n0             CONDITION - there are four possible conditions :\n0                  RED    - in battle,\n                   YELLOW - low on energy (0/1000 units),\n                   GREEN  - none of the above.\n0             POSITION - quadrant is given first, then sector.\n0             FEDERATION - gives the numbers on how many starships and\n                   starships are left for the Federation.\n0             WARP FACTOR - what your WARP FACTOR is currently set to.\n0             ENERGY - the amount of energy you have left. If it drops\n                   to zero, one dose of 750.0 units of energy will be\n                   taken from your batteries, provided your BATTLE\n                   COMPUTER is working, and the batteries are charged.\n0             TORPEDOES - how many DISRUPTOR TORPEDOES you have left.\n                   Also tells what the STATUS of your DISRUPTOR TORPEDO\n                   tubes are :\n0                       OUT - no TORPEDOES left,\n                        READY - TORPEDOES standing by to fire,\n                        DAMAGED - TORPEDO tubes are damaged.\n0             SHIELDS - whether your shields are up or down, how strong\n                   they are (what percent of a hit they can deflect),\n                   and shield energy.\n0             KLINGON - how many of your friendly ships are out there.\n0             REMAINING - how long you have to crush the Federation if\n                   it reaches zero, the Federation wins, and you will\n                   then be opening sealed orders.\n0        STATUS information is free--it uses no time or energy, and if\n         you are in battle, the Federation is not given another chance\n         to hit you.\n0        STATUS information can also be obtained by doing a SHORT-RANGE\n         SCAN. See the (SRSCAN) command for details.\n1\n0                                                               Page 17\n0        TERMINATE THE CURRENT GAME\n+        __________________________\n0        Mnemonic : TERMINATE\n         (No abbreviation)\n0        Immediately CANCEL the current game. No conclusion is reached\n         and no score is computed. You will be given an opportunity to\n         start a new game or to leave the STAR TREK program.\n0\n0        TRACTOR BEAM\n+        ____________\n0        Mnemonic : TRACTOR\n         Shortest abbreviation : TRAC\n         Full command : TRACTOR (TARGET QUADRANT)\n0        The TRACTOR command allows you to pull a ship across some\n         distance in space. When this command is issued you will be\n         prompted with the amount of energy it would take to pull a\n         ship that far, and asked if you still wish to engage the\n         TRACTOR BEAM, if a ship is found at the target quadrant it\n         will be pulled to your quadrant. If there is more than one at\n         the target quadrant, one will be selected randomly.\n0        If there is no ship at the target quadrant, you will be\n         notified of this fact, and the power drain caused by the\n         TRACTOR BEAM will be cut by 50%.\n0        It is possible to TRACTOR either commanders (to help out in a\n         fight perhaps) or Federation starships, starbases, planets,\n         stars, and black holes are not effected by the TRACTORs.\n0        The use of the TRACTOR BEAM constitutes a turn, and enemies\n         will attack.\n0\n0        WARP FACTOR\n+        ___________\n0        Mnemonic : WARP\n         Shortest abbreviation : W\n         Full command : WARP (NUMBER)\n0        Your WARP FACTOR controls the speed of your starship. The\n         larger the WARP FACTOR, the faster you go and the more energy\n         you use.\n0        Your minimum WARP FACTOR is 1.0 and your maximum WARP FACTOR\n         is 12.0. At speeds above WARP 10 there is some danger of\n         causing damage to your WARP ENGINES; this damage is larger\n         at higher WARP FACTORs and also depends on how far you go at\n         that WARP FACTOR.\n1\n0                                                               Page 18\n0        XDEBUG\n+        ______\n0        Mnemonic : XDEBUG\n         Shortest abbreviation : XDEBUG\n         Full command : XDEBUG\n0        The Extended Debugging feature is used (under advisment of the\n         user maintaining the game program) to provide trace information\n         on routine flow.\n0        If you enter this command by mistake, enter any random\n         PASSWORD, the program will then reject the command and proceed\n         with play.\n0\n0\n0                  --------- MISCELLANEOUS NOTES ---------\n0        If a Federation starbase or planet is attacked, but not\n         destroyed (and there is anyone alive to do it), a subspace\n         radio call on the star fleet priority one channel will go out,\n         meaning that if there are any Federation starships nearby, you\n         will soon have lots of company ...\n0        BLACK HOLEs move about, randomly.\n0        The type of DISRUPTOR TORPEDOES you carry have been known to\n         explode in the firing tube, but that is rather rare.\n0        When hits are shot at the supercommander KAZH, the hit is\n         shown as two numbers, example :\n0             (112,1832)  UNIT HIT FROM FEDERATION STARSHIP AT 1 - 1\n0        this means that your shields absorbed 1832 units, and your\n         ship got hit with 112 units.\n1\n0                                                               Page 19\n0                         --------- SCORING ---------\n0        Scoring is fairly simple. You get points for good things, and\n         you lose points for bad things.\n0        You gain :\n0             (1) 200 points for each Federation starbase,\n              (2) 100 points for each Federation starship you destroy,\n              (3) you get a win bonus based on your skill level,\n                  10000-GOOD, 20000-EXPERT, 30000-EMERITUS,\n              (4) a special win bonus for time remaining,\n              (5) a promotion to the next level, for any win,\n              (6) a point bonus for billions of people killed on\n                  planets, and an extra bonus for dilithium.\n0        You lose :\n0             (7) 75 points for each commander destroyed,\n              (8) 1000 points if you get yourself killed.\n0        You can be promoted from any level. There is a special\n         promotion available if you go beyond the 'EXPERT' range.\n         You can also have a certificate of merit printed with your\n         name, and date provided you are promoted from either the\n         'EXPERT' or 'EMERITUS' levels.\n0        You should probably start out at the GOOD level, even if you\n         are already familiar with one of the other versions of the\n         STAR TREK GAME--but, of course, the level of game you play\n         is up to you. If you want to start at the EXPERT level, go\n         ahead. It's your funeral. The EMERITUS game is considered\n         impossible by some (although it is rumored that the author\n         wins about 10 percent of the time).\n1\n0                                                               Page 20\n0                  --------- HANDY REFERENCE PAGE ---------\n         Abbrev.   Full command                      Device used\n         --------  --------------------------------  -------------------\n         A P       ANTI PHOTON                       (none)\n         BATT      BATTERY                           (none)\n         C         CHART                             (none)\n         CO        COMPUTE AUTO (DESTINATION)        COMPUTER\n                   COMPUTE MANUAL (X-DISP) (Y-DISP)   \" \"\n         DA        DAMAGES                           (none)\n         DIS       DISRUPTOR (NUMBER) (TARGETS)      DISRUPTOR TORPEDOES\n         DESTRUCT  DESTRUCT                          (none)\n         EXT       EXTERNAL (Turn off graphics)      (none)\n         FREEZE    FREEZE                            (none)\n         HELP      HELP                              (none)\n         I         IMPULSE MANUAL (DISPLACEMENT)     IMPULSE ENGINES\n                   IMPULSE AUTOMATIC (DESTINATION)   IMPULSE ENGINES/\n                                                             COMPUTER\n         L         LRSCAN                            LONG-RANGE SENSORS\n         M         MOVE MANUAL (DISPLACEMENT)        WARP ENGINES\n                   MOVE AUTOMATIC (DESTINATION)      WARP ENGINES/\n                                                          COMPUTER\n         P         SAME AS DISRUPTOR                  - -\n         RES       REST (NUMBER OF STARDATES)        (none)\n         SE        SENSORS                           SHORT-RANGE SENSORS\n         SH        SHIELDS (UP, DOWN, OR TRANSFER)   DEFLECTOR SHIELDS\n         S         SRSCAN (NO)                       SHORT-RANGE\n                                                       SENSORS\n         ST        STATUS                            (none)\n         TERMINATE TERMINATE                         (none)\n0        L. R. SCAN : THOUSANDs digit = commanders\n                      HUNDREDs digit  = Federation starships\n                      TENs digit      = starbases\n                      ONEs digit      = stars\n                      ****            = edge of Federation space\n                      9999            = SUPERNOVA\n                      PERIOD (.)      = digit not known\n                                        (star CHART only)\n0        Courses are given in MANUAL mode in X - Y displacements; in\n         AUTOMATIC mode as destination quadrant and/or sector.\n         Distances are given in quadrants. A distance of one sector is\n         0.1 quadrant. Starbases require 4 to 6 TORPEDOES to kill,\n         while a Federation requires 2-4 TORPEDOES to kill, and planets\n         anywhere from 1-4 TORPEDOES depending on population and\n         presence of dilithium.\n0        WARP 10 is the fastest safe speed. At higher speeds, engine\n         damage may occur. Shields cost 50 units of energy to raise.\n1\n0                                                               Page 21\n0                       --------- ACKNOWLEDGMENTS ---------\n0        The author would like to thank Mark STEVENS of GOVERNER'S\n         STATE UNIVERSITY, located in PARK FOREST, ILLINOIS, for\n         programming assistance and support. Other thanks go to Tim\n         LYON of NORTHERN ILLINOIS UNIVERSITY, and Raymond POWERS for\n         extensive playtesting of the prototypes of the game (they\n         found most of the bugs, firsthand).\n0        And deepest thanks go to David MATUSZEK and Paul REYNOLDS\n         (whom I have never met) for giving permission in the rules\n         of SUPER STAR TREK, the game on which this one is based, for\n         allowing the copying or modification of their rules without\n         charge. A majority of these rules are taken directly from\n         the text of their rules, word for word.\n0        And thanks as well to Wes PALMER of the EDUCATIONAL\n         COMPUTING NETWORK, for putting up with my questions about\n         the program \"SUPER STAR TREK\".\n0             Thanks all ...\n                                       Yours truly,\n0                                     LARRY WILLIAMS\n                                      Author of the KLINGON program.\n0\n0                       --------- REFERENCES ---------\n0        1. STAR TREK (the original television series), produced by\n            Gene RODENBERRY.\n0        2. STAR TREK (the animated television series), produced by\n            Gene RODENBERRY and Hal SUTHERLAND.\n0        3. The making of STAR TREK, by Steven E. WHITFIELD and Gene\n            RODENBERRY. The best and most complete readily available\n            book about STAR TREK (BALLANTINE books).\n0        4. The world of STAR TREK, by David GERROLD. Similar in scope\n            to the above book (BANTAM).\n0        5. The STAR TREK guide, third revision 4/17/67, by Gene\n            RODENBERRY. The original writer's guide for the television\n            series, but less comprehensive than (3) above (NORWAY\n            productions).\n0        6. The TROUBLE with TRIBBLES, by David GERROLD. Includes the\n            complete script of this popular show (BALLANTINE books).\n0        7. STAR TREK, STAR TREK 2, ..., STAR TREK 12,  by James BLISH.\n            The original shows in short story form (BANTAM).\n0        8. SPOCK MUST DIE, by James BLISH. An original novel, but\n            rather similar to the show 'THE ENEMY WITHIN' (BANTAM).\n1\n0                                                               Page 22\n0                       --------- Appendix T ---------\n0        Notes for TSO full screen users.\n+        ________________________________\n0        For TSO 3270 users, KLINGON is a full screen application.\n         The major differences are :\n0        The SRSCAN, LRSCAN, and STATUS commands cannot be explictly\n         entered, since this information is on the screen at all times.\n0        The format of the screen is :\n0              ...........  ++++++++++   LRSCAN\n               ...........  ++++++++++   and\n               ... SRS ...  + status +\n               ...........  ++ info ++   PLANET\n               ...........  ++++++++++   info\n0        SRS and STATUS - the format of this information is the same as\n         the standard version.\n0        The LRSCAN and PLANET information is the same as described in\n         the LRSCAN command, however, the information is presented in\n         a \"compressed\" form, to allow for the smaller amount of space\n         available on the screen.\n0        The full screen mode will work only on 24, 32 and 43 lines\n         327X devices.\n0        If you wish to experiment with other devices, the GAINIT,\n         FSIO1 and FSIO2 assembler routines supplied in source are\n         those which must be verified/modified by the user.\n./     ADD     NAME=ABANMS\nC*********************************************************************\n      SUBROUTINE ABANMS\nC PURPOSE : PRINT \"YOU CAN'T ABANDON\" MSG\nC*********************************************************************\n      CALL DBUGIN ('ABANMS ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG ('ABANDON | THAT''S SOMETHING A SOFT SLIMY',IW(39))\n      CALL PRMSG ('''EARTHER'' WOULD DO, NOT A KLINGON |',IW(35))\n      CALL DBUGIN ('ABANMS EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ABSORB\nC*********************************************************************\n      SUBROUTINE ABSORB (HHIT,SHIPO,SHEO)\nC PURPOSE : DETERMINE HOW MUCH HIT IS TO BE ABSORBED BY THE SHIELDS,\nC           AND HOW MUCH BY THE SHIP\nC*********************************************************************\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      CHARACTER *4 CZDAMG , CZDOWN\n      EQUIVALENCE (CZDAMG,IZDAMG) , (CZDOWN,IZDOWN)\n      DATA CZDAMG /'DAMG'/ , CZDOWN /'DOWN'/\n      CALL DBUGIN ('ABSORB ENTERED',IW(14),0)\n      CALL DBUGCH ('CURRENT SHIELD STATUS',IW(21),ISHUPD,IW(4))\n      CALL DBUGRN ('HIT TO ABSORB ',IW(14),HIT)\n      CALL DBUGIN ('SHIELD ENERGY',IW(13),ISHENG)\n      HIT = HHIT\n      IF (ISHUPD.EQ.IZDAMG.OR.ISHUPD.EQ.IZDOWN.OR.ISHENG.EQ.0) GO TO 10\n      IF (ISHENG.GT.2500) GO TO 20\n      GO TO 40\n10    CALL DBUGIN ('SHIP FULL HIT',IW(13),0)\n      SHE = 0.0\n      SHIP = HIT\n      GO TO 50\n20    IF (HIT.GT.ISHENG) GO TO 30\n      CALL DBUGIN ('SHLD FULL HIT',IW(13),0)\n      SHIP = 0.0\n      SHE = HIT\n      GO TO 50\n30    HIT = HIT-FLOAT(ISHENG)\n      SHE = FLOAT(ISHENG)\n      SHIP = HIT\n      GO TO 50\n40    PCT = FLOAT(ISHENG)/25.0\n      XPCT = 100.0-PCT\n      SHIP = HIT*(XPCT/100.0)\n      SHE = HIT*(PCT/100.0)\n50    ENERGY = ENERGY-SHIP\n      ISHENG = ISHENG-IFIX(SHE+.5)\n      IF (ISHENG.LT.0) ISHENG = 0\n      SHEO = SHE\n      SHIPO = SHIP\n      CALL DBUGRN ('SHIP ABSORB   ',IW(14),SHIPO)\n      CALL DBUGRN ('SHIELD ABSORB ',IW(14),SHEO)\n      CALL DBUGIN ('ABSORB EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ADDQUE\nC*********************************************************************\n      SUBROUTINE ADDQUE (ITEM)\nC PURPOSE : ADD A VALUE TO THE GRAFICS QUE\nC*********************************************************************\n      COMMON /WORKQ/ IGCNT, INQUE(10)\n      CALL DBUGIN ('ADDQUE ENTERED',IW(14),0)\n      CALL DBUGCH ('ADDQUE ITEM',IW(12),ITEM,IW(4))\n      IGCNT = IGCNT + 1\n      CALL DBUGIN ('IGCNT IS NOW',IW(12),IGCNT)\n      INQUE(IGCNT) = ITEM\n      CALL DBUGIN ('ADDQUE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=APDEV\nC*********************************************************************\n      SUBROUTINE APDEV\nC  PURPOSE : ACTIVATE THE ANTI PHOTON DEVICE IS NOT SET, ELSE\nC            DISPLAY MSG SAYING \"IT'S ON\"\nC*********************************************************************\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      CALL DBUGIN ('APDEV ENTERED',IW(13),0)\n      CALL DBUGIN ('AT ENTRY, THE DEVICE FLAG=',IW(26),IAPDEV)\n      IF (IAPDEV.EQ.1) GO TO 270\n      IF (XDSDC.LE.0.001) GO TO 260\n      CALL LINEF\n      CALL PRMSG (\n     *     'ANTI-PHOTON DEVICE IS POWERED BY THE SHIELDS, AND CANNOT',\n     *     IW(56))\n      CALL PRMSG (\n     *     'BE USED IF THE SHIELDS ARE NOT WORKING, LORD COMMANDER',\n     *     IW(54))\n      GO TO 150\n260   IF (ISHENG.GT.500) GO TO 280\n      CALL LINEF\n      CALL PRMSG (\n     *'INSUFFICENT ENERGY IN SHIELDS TO USE ANTI-PHOTON DEVICE',IW(55))\n      GO TO 150\n270   CALL LINEF\n      CALL PRMSG (\n     *'THE ANTI-PHOTON DEVICE IS ALREADY ARMED, LORD COMMANDER',IW(55))\n      GO TO 150\n280   CALL LINEF\n      CALL PRMSG ('ANTI-PHOTON DEVICE ARMED, LORD COMMANDER',IW(40))\n      ISHENG = ISHENG-500\n      IAPDEV = 1\n      CALL DBUGIN ('THE DEVICE FLAG IS NOW=',IW(23),IAPDEV)\n150   CALL DBUGIN ('APDEV EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=AROUND\nC*********************************************************************\n      SUBROUTINE AROUND (IIX,IIY)\nC PURPOSE : HANDLE THE NOVA OF STARS IN A \"RING\" AROUND\nC           A NOVA STAR\nC*********************************************************************\n      CALL DBUGIN ('AROUND ENTERED',IW(14),0)\n      IX = IIX\n      IY = IIY\n      CALL PRMSM (\n     *  '*** STAR AT SECTOR: ',20,IW(20),IY,IX,'NOVAS',5,IW(5))\n      ILOX = IX-ISGN(IX-1)\n      IHIX = ISGN(10-IX)+IX\n      ILOY = IY-ISGN(IY-1)\n      IHIY = ISGN(10-IY)+IY\n      DO 20 I = ILOY, IHIY\n           DO 10 J = ILOX, IHIX\n                CALL NOVKIL (J,I)\n10         CONTINUE\n20    CONTINUE\n      CALL DBUGIN ('AROUND EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=BATTCK\nC*********************************************************************\n      SUBROUTINE BATTCK\nC PURPOSE : CHECK TO SEE IF THE BATTERIES ARE CHARGED,\nC           DISPLAY THE STATUS\nC*********************************************************************\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      CALL DBUGIN ('BATTCK ENTERED',IW(14),0)\n      CALL LINEF\n      IF (BATTER.GT.0.9) GO TO 100\n      CALL PRMSG ('RUBIDIUM ENERGY STORAGE CELLS DRAINED',IW(37))\n      GO TO 110\n100   CALL LINEF\n      CALL PRMSG ('RUBIDUM ENERGY STORAGE CELLS COMPLETELY CHARGED',\n     *    IW(47))\n110   CALL DBUGIN ('BATTCK EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=BATTLE\nC*********************************************************************\n      SUBROUTINE BATTLE\nC PURPOSE : CHECK TO SEE IF WE ARE CURRENTLY IN BATTLE, IF SO,\nC           LET THE ENEMY ATTACK, THEN TALLY UP THE RESULTS\nC           NEXT, OUR FRIENDS (COMMANDERS) WILL FIRE AT ANYTHING HANDY\nC*********************************************************************\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,IFX(9),IFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /SHIPS/ IUSFED(15,13)\n      DIMENSION NFX(9),NFY(9),IDMSG(11)\n      CHARACTER *4 CZGRE , CZCLER , CZRDOT , CZKZF , CZKZB , CZKZC\n      CHARACTER *4 CZMSG(11)\n      EQUIVALENCE (CZGRE,IZGRE) , (CZCLER,IZCLER) , (CZRDOT,ICRDOT) ,\n     *            (CZKZF,KZF) , (CZKZB,KZB) , (CZKZC,KZC)\n      EQUIVALENCE (CZMSG,IDMSG)\n      DATA CZGRE /'GREE'/ , CZCLER /'CLEA'/ , CZRDOT /'.'/ ,\n     *     CZKZF /'F'/ , CZKZB /'B'/ , CZKZC /'C'/\n      DATA CZMSG(1) /'** S'/ , CZMSG(2) /'TARS'/ , CZMSG(3) / 'HIP '/ ,\n     *     CZMSG(4) /'U.S.'/ , CZMSG(5) /'S.  '/ ,\n     *     CZMSG(9) /'AT S'/ , CZMSG(10) /'ECTO'/ , CZMSG(11) /'R:  '/\n      DATA IDMSG(6) /0/ , IDMSG(7) /0/ , IDMSG(8) /0/\n      CALL DBUGIN ('BATTLE ENTERED',IW(14),0)\n      CALL SHECON\n      IF (ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZGRE) GO TO 250\n      NMCALL = 0\n10    CALL ITERPT\n      IF (NFED.EQ.0) GO TO 80\n      CALL LOCATE (KZF,INONE,INONE2)\n      CALL RESORT (IFX,IFY,NFX,NFY,NFED)\n      DO 70 J = 1, NFED\n           MFX = NFX(J)\n           MFY = NFY(J)\n           CALL INTERC (MFX,MFY,IRTN)\n           IF (IRTN.EQ.IZCLER) GO TO 30\n20         IAFIRE = NSECE(MFX,MFY)/2\n           IF (IPOF.EQ.1) IAFIRE = IAFIRE*1.2\n           FIRE = IAFIRE*PERHIT(ISCPX2,ISCPY2,MFX,MFY)\n           CALL ABSORB (FIRE,SHIP,SHE)\n           JS = IFIX(SHIP+.5)\n           JE = IFIX(SHE+.5)\n           CALL LINEF\n           CALL PRHIT (\n     *     JS,JE,'UNIT HIT FROM FEDERATION STARSHIP AT: ',\n     *          38,IW(38),MFY,MFX)\n           CALL DAMAGE (SHIP)\n           NSECE(MFX,MFY) = NSECE(MFX,MFY)-IAFIRE/3\n           GO TO 60\n30         IF (RAND(100.0).LT.20.0.OR.IPOF.EQ.1) GO TO 20\n           IF (PERHIT(ISCPX2,ISCPY2,MFX,MFY).LT..6) GO TO 20\n           CALL LINEF\n           CALL PRMSM ('=== INCOMING PHOTON TORPEDOS FROM: ',\n     *          35,IW(35),MFY,MFX,' ',0,1)\n           DO 50 N = 1, 3\n                CALL LINEF\n                CALL PRMSG ('### TRACKING INCOMING PHOTON TORPEDO',\n     *                       IW(36))\n                IF (IAPDEV.EQ.1) GO TO 40\n                CALL ABSORB (RAND(50.0)+650.0,SHIP,SHE)\n                JS = IFIX(SHIP+.5)\n                JE = IFIX(SHE+.5)\n                CALL LINEF\n                CALL PRHIT (JS,JE,'UNIT HIT, PHOTON TORPEDO FROM ',\n     *               30,IW(30),MFY,MFX)\n                CALL DAMAGE (SHIP)\n                GO TO 50\n40              CALL PRMSG (\n     *            '*** ANTI-PHOTON DEVICE ABSORBS PHOTON TORPEDO',\n     *            IW(45))\n50         CONTINUE\n60         IAPDEV = 0\n70    CONTINUE\n80    IF (NSBASE.EQ.0) GO TO 100\n      CALL LOCATE (KZB,IIXB,IIYB)\n      FIRE = (RAND(50.0)+750.0)*PERHIT(ISCPX2,ISCPY2,IIXB,IIYB)\n      CALL ABSORB (FIRE,SHIP,SHE)\n      JS = IFIX(SHIP+.5)\n      JE = IFIX(SHE+.5)\n      CALL LINEF\n      CALL PRHIT (\n     *     JS,JE,'UNIT HIT FROM STARBASE AT: ',27,IW(27),IIYB,IIXB)\n      CALL DAMAGE (SHIP)\n100   IF (NCOMM.EQ.0) GO TO 150\n      CALL LOCATE (KZC,NONE,NONE2)\n      DO 140 M = 1, NCOMM\n           IIXC = NCX(M)\n           IIYC = NCY(M)\n           IFA = -NSECE(IIXC,IIYC)/2\n           IF (NFED.EQ.0) GO TO 120\n           IFA = IFA/NFED\n           DO 110 NF = 1, NFED\n                JFX = NFX(NF)\n                JFY = NFY(NF)\n                FIRE = IFA*PERHIT(IIXC,IIYC,JFX,JFY)\n                IP1 = IFIX(FIRE)/3\n                IP2D = IP1*2\n                CALL LINEF\n                CALL PRHIT (\n     *               IP2D,IP1,'HIT ON FEDERATION STARSHIP AT: ',\n     *               31,IW(31),JFY,JFX)\n                CALL PRMSM (\n     *              'FROM COMMANDER AT: ',19,IW(19),\n     *              IIYC,IIXC,' ',0,1)\n                NSECE(JFX,JFY) = NSECE(JFX,JFY)-IFIX(FIRE)\n                IF (NSECE(JFX,JFY).GT.0) GO TO 110\n                ET = ET+.3\n                IFS = IFS-1\n                IFSC = IFSC+1\n                ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-100\n                NSECE(JFX,JFY) = 0\n                ISECT(JFX,JFY) = ICRDOT\n                CALL SSDEST (IUSFED,ISCPX1,ISCPY1,JFX,JFY,IDMSG(6))\n                CALL PRMSM (\n     *          IDMSG,44,IW(44),JFY,JFX,'DESTROYED',9,IW(9))\n                CALL ITERPT\n                GO TO 140\n110        CONTINUE\n           GO TO 140\n120        IF (NSBASE.EQ.0) GO TO 140\n           CALL LOCATE (KZB,IIXB,IIYB)\n           FIRE = IFA*PERHIT(IIXC,IIYC,IIXB,IIYB)\n           IP1 = IFIX(FIRE)/3\n           IP2D = IP1*2\n           CALL LINEF\n           CALL PRHIT (\n     *         IP2D,IP1,'HIT ON STARBASE AT: ',20,IW(20),IIYB,IIXB)\n           CALL PRMSM (\n     *         'FROM COMMANDER AT: ',19,IW(19),IIYC,IIXC,' ',0,1)\n           NSECE(IIXB,IIYB) = NSECE(IIXB,IIYB)-IFIX(FIRE)\n           IF (NSECE(IIXB,IIYB).GT.0) GO TO 130\n           CALL PRMSM ('*** STARBASE AT: ',17,IW(17),IIYB,IIXB,\n     *          'DESTROYED',9,IW(9))\n           NSECE(IIXB,IIYB) = 0\n           ISECT(IIXB,IIYB) = ICRDOT\n           ET = ET+.5\n           ISB = ISB-1\n           ISBC = ISBC+1\n           ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-10\n           CALL ITERPT\n           GO TO 140\n130        IF (NMCALL.EQ.1) GO TO 140\n           IF (ILEV.NE.3) GO TO 140\n           CALL DRAGCC\n           NMCALL = 1\n           CALL ITERPT\n           IF (NFED.GT.0) GO TO 10\n140   CONTINUE\n150   CALL ITERPT\n      CALL LOCATE (KZF,IDUM,IDUM2)\n      CALL LOCATE (KZC,IDUM,IDUM2)\n      IF (NFED.EQ.0.AND.NSBASE.EQ.0) GO TO 250\n      IF (IPOF.NE.1) GO TO 240\n160   IF (NCOMM.EQ.0.OR.NFED.EQ.0) GO TO 230\n      MC = MIN0(NFED,NCOMM)\n      DO 220 N = 1, MC\n           IF (NSECE(IFX(N),IFY(N))+NSECE(NCX(N),NCY(N))) 200 , 210 ,\n     *           210\n200        ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-100\n           NSECE(IFX(N),IFY(N)) = 0\n           ISECT(IFX(N),IFY(N)) = ICRDOT\n           ET = ET+.3\n           IFS = IFS-1\n           IFSC = IFSC+1\n           CALL SSDEST (IUSFED,ISCPX1,ISCPY1,IFX(N),IFY(N),IDMSG(6))\n           CALL PRMSM (\n     *        IDMSG,44,IW(44),IFY(N),IFX(N),'DESTROYED IN BATTLE',\n     *        19,IW(19))\n           GO TO 220\n210        CALL PRMSM ('*** COMMANDER AT ',17,IW(17),NCY(N),NCX(N),\n     *          'DESTROYED IN BATTLE',19,IW(19))\n           ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-1000\n           NSECE(NCX(N),NCY(N)) = 0\n           ISECT(NCX(N),NCY(N)) = ICRDOT\n           IKC = IKC-1\n220   CONTINUE\n      CALL ITERPT\n      CALL LOCATE (KZC,IDUM,IDUM2)\n      CALL LOCATE (KZF,IDUM,IDUM2)\n      GO TO 160\n230   CALL ITERPT\n      IF (NSBASE.EQ.0.OR.NCOMM.EQ.0) GO TO 240\n      CALL LOCATE (KZB,IIXB,IIYB)\n      CALL PRMSM ('*** STARBASE AT ',16,IW(16),IIYB,IIXB,\n     *     'DESTROYED BY COMMANDER',22,IW(22))\n      ISB = ISB-1\n      ISBC = ISBC+1\n      ET = ET+.5\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-10\n      ISECT(IIXB,IIYB) = ICRDOT\n      NSECE(IIXB,IIYB) = 0\n240   IPCT = IFIX((FLOAT(ISHENG)/25.0)+.5)\n      CALL BSTAT (ENERGY,ISHUPD,IPCT)\n      IF (ENERGY.LE.-500.0) IPAD1(1) = -1000000\n250   CALL DBUGIN ('BATTLE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=BEEP\nC*********************************************************************\n      SUBROUTINE BEEP\nC PURPOSE : THIS ROUTINE IS CALLED WHEN SOMETHING URGENT HAPPENS,\nC           AT THE PRESENT TIME, NOT USED\nC*********************************************************************\n      CALL LINEF\n      CALL DBUGIN ('BEEP CALLED (NOT USED)',IW(22),0)\n      RETURN\n      END\n./     ADD     NAME=BEEP2\nC*********************************************************************\n      SUBROUTINE BEEP2\nC PURPOSE : THIS ROUTINE IS CALLED WHEN SOMETHING VERY URGENT HAPPENS,\nC           AT THE PRESENT TIME, NOT USED\nC*********************************************************************\n      CALL LINEF\n      CALL DBUGIN ('BEEP2 CALLED (NOT USED)',IW(23),0)\n      RETURN\n      END\n./     ADD     NAME=BLOCKD\nC*********************************************************************\n      BLOCK DATA\nC*********************************************************************\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,\n     +KZH,KZI,KZJ,KZK,KZL,KZM,KZN,\n     +KZO,KZP,KZQ,KZR,KZS,KZT,KZU,\n     +KZV,KZW,KZX,KZY,KZZ,\n     +ICRDOT,ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,\n     +KZ2,KZ3,KZ4,KZ5,KZ6,KZ7,\n     +KZ8,KZ9,ICRBLK\n      CHARACTER *4 CZKZA,CZKZB,CZKZC,CZKZD,CZKZE,CZKZF,CZKZG,\n     +CZKZH,CZKZI,CZKZJ,CZKZK,CZKZL,CZKZM,CZKZN,\n     +CZKZO,CZKZP,CZKZQ,CZKZR,CZKZS,CZKZT,CZKZU,\n     +CZKZV,CZKZW,CZKZX,CZKZY,CZKZZ,\n     +CZRDOT,CZRPLS,CZRCRH,CZRSTR,CZRMIN,CZRZER,CZKZ1,\n     +CZKZ2,CZKZ3,CZKZ4,CZKZ5,CZKZ6,CZKZ7,\n     +CZKZ8,CZKZ9,CZRBLK\n      EQUIVALENCE (CZKZA,KZA),(CZKZB,KZB),(CZKZC,KZC),(CZKZD,KZD),\n     +(CZKZE,KZE),(CZKZF,KZF),(CZKZG,KZG),(CZKZH,KZH),(CZKZI,KZI),\n     +(CZKZJ,KZJ),(CZKZK,KZK),(CZKZL,KZL),(CZKZM,KZM),(CZKZN,KZN),\n     +(CZKZO,KZO),(CZKZP,KZP),(CZKZQ,KZQ),(CZKZR,KZR),(CZKZS,KZS),\n     +(CZKZT,KZT),(CZKZU,KZU),(CZKZV,KZV),(CZKZW,KZW),(CZKZX,KZX),\n     +(CZKZY,KZY),(CZKZZ,KZZ),(CZRDOT,ICRDOT),(CZRPLS,ICRPLS),\n     +(CZRCRH,ICRCRH),(CZRSTR,ICRSTR),(CZRMIN,ICRMIN),\n     +(CZRZER,ICRZER),(CZKZ1,KZ1),(CZKZ2,KZ2),(CZKZ3,KZ3),(CZKZ4,KZ4),\n     +(CZKZ5,KZ5),(CZKZ6,KZ6),(CZKZ7,KZ7),(CZKZ8,KZ8),(CZKZ9,KZ9),\n     +(CZRBLK,ICRBLK)\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     +IKY(8,8),INPUT(50),IPAD3\n      CHARACTER *4 CZPAD3\n      EQUIVALENCE (CZPAD3,IPAD3)\n      DATA CZKZA/'A'/,CZKZB/'B'/,CZKZC/'C'/,\n     +CZKZD/'D'/,CZKZE/'E'/,CZKZF/'F'/,CZKZG/'G'/,CZKZH/'H'/,\n     +CZKZI/'I'/,CZKZJ/'J'/,CZKZK/'K'/,CZKZL/'L'/,CZKZM/'M'/,\n     +CZKZN/'N'/,CZKZO/'O'/,CZKZP/'P'/,CZKZQ/'Q'/,CZKZR/'R'/,\n     +CZKZS/'S'/,CZKZT/'T'/,CZKZU/'U'/,CZKZV/'V'/,CZKZW/'W'/,\n     +CZKZX/'X'/,CZKZY/'Y'/,CZKZZ/'Z'/,CZRDOT/'.'/,CZRPLS/'+'/,\n     +CZRCRH/'#'/,CZRSTR/'*'/,CZRMIN/'-'/ ,CZRZER/'0'/,CZKZ1/'1'/,\n     +CZKZ2/'2'/,CZKZ3/'3'/,CZKZ4/'4'/,CZKZ5/'5'/,CZKZ6/'6'/,\n     +CZKZ7/'7'/,CZKZ8/'8'/,CZKZ9/'9'/,CZRBLK/' '/\n      COMMON /STRING/ IZSUPN, IZBLKH, IZMISS, IZNOVA, IZCDAM, IZCDES,\n     * IZFDAM, IZFDES, IZBDAM, IZBDES, IZPDES,\n     * IZP100, IZP200, IZP300, IZP400, IZERR\n      CHARACTER *4 CZSUPN, CZBLKH, CZMISS, CZNOVA, CZCDAM, CZCDES,\n     * CZFDAM, CZFDES, CZBDAM, CZBDES, CZPDES,\n     * CZP100, CZP200, CZP300, CZP400, CZERR\n      EQUIVALENCE (CZSUPN,IZSUPN),(CZBLKH,IZBLKH),(CZMISS,IZMISS),\n     *(CZNOVA,IZNOVA),(CZCDAM,IZCDAM),(CZCDES,IZCDES),(CZFDAM,IZFDAM),\n     *(CZFDES,IZFDES),(CZBDAM,IZBDAM),(CZBDES,IZBDES),(CZPDES,IZPDES),\n     *(CZP100,IZP100),(CZP200,IZP200),(CZP300,IZP300),(CZP400,IZP400),\n     *(CZERR,IZERR)\n      DATA IPAD1 /9* 999999/, IPAD2 /9* 999999/\n      DATA CZPAD3 /')'/\n      DATA CZSUPN / 'SNOV'/\n      DATA CZBLKH / 'BHOL'/\n      DATA CZMISS / 'MISS'/\n      DATA CZNOVA / '*NOV'/\n      DATA CZCDAM / 'CDAM'/\n      DATA CZCDES / 'CDES'/\n      DATA CZFDAM / 'FDAM'/\n      DATA CZFDES / 'FDES'/\n      DATA CZBDAM / 'BDAM'/\n      DATA CZBDES / 'BDES'/\n      DATA CZPDES / 'PDES'/\n      DATA CZP100 / 'P100'/\n      DATA CZP200 / 'P200'/\n      DATA CZP300 / 'P300'/\n      DATA CZP400 / 'P400'/\n      DATA CZERR  / 'ERRO'/\n      END\n./     ADD     NAME=BRIDGE\nC*********************************************************************\n      SUBROUTINE BRIDGE (IIPNTR)\nC PURPOSE : POINT POINTER AT NEXT NON-BLANK CHARACTER AFTER A\nC           BLANK IN THE COMMAND LINE\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(51)\n      CHARACTER *4 CZRBLK\n      EQUIVALENCE (CZRBLK,ICRBLK)\n      DATA CZRBLK /' '/\n      CALL DBUGIN ('BRIDGE ENTERED',IW(14),0)\n      IPNTR = IIPNTR\n      DO 10 N = IPNTR, 51\n           IF (INPUT(N).EQ.ICRBLK) GO TO 20\n10    CONTINUE\n20    IPNTR = N\n      CALL DBUGIN ('(BRIDGE), BLANK FOUND AT ',IW(25),N)\n      GO TO 30\nC*********************************************************************\n      ENTRY GAP (IIPNTR)\nC PURPOSE : POINT POINTER AT FIRST NON-BLANK IN COMMAND LINE\nC*********************************************************************\n      IPNTR = 1\n30    CALL DBUGIN ('GAP ENTERED',IW(11),0)\n      DO 40 N = IPNTR, 51\n           IF (INPUT(N).NE.ICRBLK) GO TO 50\n40    CONTINUE\n50    IIPNTR = N\n      CALL DBUGIN ('(GAP), NON-BLANK FOUND AT',IW(25),N)\n      CALL DBUGIN ('BRIDGE/GAP EXITED',IW(17),0)\n      RETURN\n      END\n./     ADD     NAME=BSTAT\nC*********************************************************************\n      SUBROUTINE BSTAT (ENERGY,ISHUPD,IPCT)\nC PURPOSE : DISPLAY INFORMATION ON ENERGY AND SHIELDS\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      CALL DBUGIN ('BSTAT ENTERED',IW(13),0)\n      CALL LINEF\n      WRITE (IOUTT,50000) ENERGY,ISHUPD,IPCT\n      CALL LINEF\n      CALL DBUGIN ('BSTAT EXITED',IW(12),0)\n      RETURN\n50000 FORMAT (' ENERGY: ',F9.2,' SHIELDS  ',A4,2X,I3,' PCT')\n      END\n./     ADD     NAME=CERT\nC*********************************************************************\n      SUBROUTINE CERT (NAME,INDIM,IRNK,IRDIM)\nC PURPOSE : PRINT A \"YOU WIN\" CERTIFICATE IF EXPERT OR EMERITUS\nC*********************************************************************\n      COMMON /CPU/ IBMT\n      DIMENSION IRNK(IRDIM),MSG1(7),MSG2(4),MSG3(3),IPL(20)\n      DIMENSION NAME(INDIM)\n      CHARACTER *4 CZMSG1(7),CZMSG2(4),CZMSG3(3),CZIPL(20)\n      EQUIVALENCE (CZMSG1,MSG1),(CZMSG2,MSG2),(CZMSG3,MSG3)\n      EQUIVALENCE (CZIPL,IPL)\n      DATA CZIPL / 20*' '/\n      DATA CZMSG1 / '  TH','E KL','INGO','N HI','GH C','OMMA','ND'/\n      DATA CZMSG2 /        'AWAR','DS T','O YO','U   '/\n      DATA CZMSG3 /        ' THE',' RAN','K OF'/\n      CALL DBUGIN ('CERT ENTERED',IW(12),0)\n      IF (IBMT.EQ.1) GO TO 10\n      CALL PRMSG ('SET PRINTER TO TOP OF PAGE',IW(26))\n      CALL READIN ('THEN HIT RETURN',IW(15),15,1,EOFF)\n      GO TO 12\n10    CALL PRMSG ('YOUR AWARD IS NOW BEING WRITTEN TO FT08F001  ',\n     *                 IW(43))\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      CALL SHIP\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      CALL PRMSGC(' ',IW(1))\n      DO 11 N=1,7\n           IPL(N+7) = MSG1(N)\n11    CONTINUE\n12    CALL PRMSGC(IPL,IW(80))\n      CALL PRMSGC(' ',IW(1))\n      DO 13 N=8,14\n           IPL(N) = IPL(1)\n13    CONTINUE\n      IPL(10)= MSG2(1)\n      IPL(11)= MSG2(2)\n      IPL(12)= MSG2(3)\n      IPL(13)= MSG2(4)\n      CALL PRMSGC(IPL,IW(80))\n      CALL PRMSGC(' ',IW(1))\n      DO 14 N=2,20\n           IPL(N) = IPL(1)\n14    CONTINUE\n      DO 15 N=1,INDIM\n           IPL(N+9) = NAME(N)\n15    CONTINUE\n      CALL PRMSGC(IPL,IW(80))\n      CALL PRMSGC(' ',IW(1))\n      DO 16 N=2,20\n           IPL(N) = IPL(1)\n16    CONTINUE\n      IPL(10)= MSG3(1)\n      IPL(11)= MSG3(2)\n      IPL(12)= MSG3(3)\n      CALL PRMSGC(IPL,IW(80))\n      CALL PRMSGC(' ',IW(1))\n      DO 17 N=2,20\n           IPL(N) = IPL(1)\n17    CONTINUE\n      DO 18 N=1,IRDIM\n           IPL(N+6) = IRNK(N)\n18    CONTINUE\n      CALL PRMSGC(IPL,IW(80))\n      DO 19 N=1,45\n           CALL PRMSGC(' ',IW(1))\n19    CONTINUE\n      CALL DBUGIN ('CERT EXITED',IW(11),0)\n      RETURN\n      END\n./     ADD     NAME=COMOVE\nC*********************************************************************\n      SUBROUTINE COMOVE\nC PURPOSE : CHECK TO SEE IF A COMMANDER NEEDS TO MOVE AROUND\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      CHARACTER *4 CZRDOT , CZKZC , CZRED\n      EQUIVALENCE (CZRDOT,ICRDOT) , (CZKZC,KZC) , (CZRED,IZRED)\n      DATA CZRDOT /'.'/ , CZKZC /'C'/ , CZRED /'RED'/\n      CALL DBUGIN ('COMOVE ENTERED',IW(14),0)\n      DO 40 IY = 1, 8\n           DO 30 IX = 1, 8\n                J = ICHART(IX,IY)\n                IF (J.EQ.9999.OR.J.LT.1000.OR.(IX.EQ.ISCPX1.AND.IY.EQ.\n     *               ISCPY1)) GO TO 30\n                IXM = 1\n                IYM = 1\n                IF (RAND(2.0).GT.1.0) IXM = -IXM\n                IF (RAND(2.0).GT.1.0) IYM = -IYM\n                IXM = IXM+IX\n                IYM = IYM+IY\n                IF (IXM.NE.ISCPX1.OR.IYM.NE.ISCPY1) GO TO 20\n                IF (XLRDC.GT.0.001.AND.XSRDC.GT.001) GO TO 10\n                CALL LINEF\n      CALL PRMSG (\n     *  'LORD COMMANDER, SENSORS INDICATE ONE OF OUR COMMANDERS IS',\n     *  IW(57))\n                CALL PRMSG ('ENTERING THE QUADRANT',IW(21))\n10              M1 = RAND(10.0)+1.0\n                M2 = RAND(10.0)+1.0\n                IF (ISECT(M1,M2).NE.ICRDOT) GO TO 10\n                ISECT(M1,M2) = KZC\n                NSECE(M1,M2) = -4500\n                ICHART(IX,IY) = ICHART(IX,IY)-1000\n                ICHART(IXM,IYM) = ICHART(IXM,IYM)+1000\n                GO TO 30\n20              IF (IXM.LT.1.OR.IXM.GT.8.OR.IYM.LT.1.OR.IYM.GT.8.OR.\n     *               ICROG(ICHART(IXM,IYM)).EQ.IZRED.OR.ICHART(IXM,IYM)\n     *               .GT.1000) GO TO 30\n                ICHART(IX,IY) = ICHART(IX,IY)-1000\n                ICHART(IXM,IYM) = ICHART(IXM,IYM)+1000\n30         CONTINUE\n40    CONTINUE\n      CALL DBUGIN ('COMOVE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=COPVEC\nC*********************************************************************\n      SUBROUTINE COPVEC (VEC2,VEC1,IXL,IXH,IYL,IYH)\nC PURPOSE : SELECTIVELY COPY PARTS OF AN ARRAY TO ANOTHER ARRAY\nC*********************************************************************\n      DIMENSION VEC1(8,8),VEC2(8,8)\n      CALL DBUGIN ('COPVEC ENTERED',IW(14),0)\n      DO 20 N = IYL, IYH\n           DO 10 M = IXL, IXH\n                VEC2(M,N) = VEC1(M,N)\n10         CONTINUE\n20    CONTINUE\n      CALL DBUGIN ('COPVEC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=CORAND\nC*********************************************************************\n      SUBROUTINE CORAND (TME)\nC PURPOSE : GENERATE A RANDOM PLACE FOR A COMMANDER TO MOVE TO\nC*********************************************************************\n      DATA ACCUM / 0.0 / ,TMIX / 0.0 /\n      CALL DBUGIN ('CORAND ENTERED',IW(14),0)\n      ACCUM = ACCUM+TME\n      IF (ABS(TMIX).GT.0.0001) GO TO 10\n      X = RAND(0.5)-.25\n      TMIX = X+.50\n10    IF (ACCUM.LT.TMIX) GO TO 20\n      ACCUM = ACCUM-TMIX\n      TMIX = 0.0\n      CALL COMOVE\n20    CALL DBUGIN ('CORAND EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DAMAGE\nC*********************************************************************\n      SUBROUTINE DAMAGE (UHIT)\nC PURPOSE : DAMAGE A PART OF THE SHIP IF GREATER THAN 400 UNIT\nC           HIT ABSORBED PAST SHIELDS\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      CHARACTER *4 CZDAMG , CZUP\n      EQUIVALENCE (CZDAMG,IZDAMG) , (CZUP,IZUP)\n      DATA CZDAMG / 'DAMG'/ ,CZUP / 'UP'/\n      CALL DBUGIN ('DAMAGE ENTERED',IW(14),0)\n      UNHIT = UHIT\n      IBY = 0\n10    UNIHIT = UNHIT-(RAND(30.0)+170.0)\n      IF (UNIHIT.LE.0.0) GO TO 200\n      IF (UNIHIT.GT.400.0) UNIHIT = 400.0\n      IF (IBY.EQ.1) GO TO 20\n      CALL LINEF\n      CALL PRMSG ('*** DAMAGE CONTROL REPORTS',IW(26))\n20    HIT = RAND(0.25)+(UNIHIT*.005)\n      IIX = (IFIX(UNIHIT*RAND(3.5))/100)\n      IIX = IIX+1\n      IF (IIX.LT.4.OR.IIX.GT.14) GO TO 120\n      IF (IIX.LT.5) GO TO 30\n      IF (IIX.LT.7) GO TO 40\n      IF (IIX.LT.9) GO TO 50\n      IF (IIX.LT.11) GO TO 60\n      IF (IIX.LT.12) GO TO 70\n      IF (IIX.LT.13) GO TO 80\n      IF (IIX.LT.14) GO TO 90\n      IF (IIX.LT.15) GO TO 100\n30    CALL PRMSG ('*** IMPULSE ENGINES DAMAGED, LORD COMMANDER.',\n     *    IW(44))\n      XIEDC = XIEDC+HIT\n      GO TO 190\n40    CALL PRMSG ('*** SUBSPACE RADIO DAMAGED, LORD COMMANDER.',\n     *    IW(43))\n      XSRDC = XSRDC+HIT\n      GO TO 190\n50    CALL PRMSG ('*** LONG RANGE SCANNERS DAMAGED, LORD COMMANDER.',\n     *    IW(48))\n      XLRDC = XLRDC+HIT\n      GO TO 190\n60    CALL PRMSG ('*** BATTLE COMPUTER DAMAGED, LORD COMMANDER.',\n     *    IW(44))\n      XCDC = XCDC+HIT\n      GO TO 190\n70    CALL PRMSG ('*** WARP ENGINES DAMAGED, LORD COMMANDER.',IW(41))\n      XWEDC = XWEDC+HIT\n      GO TO 190\n80    CALL PRMSG ('*** SHORT RANGE SCANNERS DAMAGED, LORD COMMANDER.',\n     *   IW(49))\n      XSSDC = XSSDC+HIT\n      GO TO 190\n90    CALL PRMSG (\n     *  '*** DISRUPTOR TORPEDO TUBES DAMAGED, LORD COMMANDER.',\n     *   IW(52))\n      XPTDC = XPTDC+HIT\n      GO TO 190\n100   CALL PRMSG ('*** DEFLECTOR SHIELDS DAMAGED',IW(29))\n      IF (ISHUPD.NE.IZUP) GO TO 110\n      CALL PRMSG (\n     *  '*** DEFLECTOR SHIELDS ARE NOW DOWN, LORD COMMANDER.',\n     *     IW(51))\n110   XDSDC = XDSDC+HIT\n      ISHUPD = IZDAMG\n      GO TO 190\n120   ID20 = IFIX(RAND(19.0)+2.0)\n      ID15 = IFIX(RAND(6.0)+15.0)\n      J = RAND(6.0)+1.0\n      IF (J.EQ.1) GO TO 130\n      IF (J.EQ.2) GO TO 140\n      IF (J.EQ.3) GO TO 150\n      IF (J.EQ.4) GO TO 160\n      IF (J.EQ.5) GO TO 170\n      IF (J.EQ.6) GO TO 180\n130   CALL PRMIM ('--- MINOR DAMAGE TO BULKHEADS ON DECK ',\n     *      38,IW(38),ID20,' ',0,1)\n      GO TO 190\n140   CALL PRMIM ('--- MINOR DAMAGE TO FOOD INTEGRATERS ON DECK ',\n     *     45,IW(45),ID20,' ',0,1)\n      GO TO 190\n150   CALL PRMIM ('--- MINOR DAMAGE TO RE-PROCESSING CENTER ON DECK ',\n     *     49,IW(49),ID15,' ',0,1)\n      GO TO 190\n160   CALL PRMIM ('--- MINOR DAMAGE TO STORAGE HOLDS ON DECK ',\n     *     42,IW(42),ID15,' ',0,1)\n      GO TO 190\n170   CALL PRMIM (\n     * '--- ENGINEERING REPORTS NON-CRITICAL POWER LOSS ON DECK ',\n     * 56,IW(56),ID20,' ',0,1)\n      GO TO 190\n180   ID = RAND(10.0)+1.0\n      CALL PRMIM ('--- ',4,IW(4),ID,\n     *            'CASUALTIES FROM THIS HIT',24,IW(24))\n      CALL PRMIM ('     ON DECK ',13,IW(13),ID20,' ',0,1)\n190   IF (UNHIT.LT.600.0) GO TO 200\n      UNHIT = UNHIT-400.0\n      CALL PRMSG ('AND',IW(3))\n      IBY = 1\n      GO TO 10\n200   CALL DBUGIN ('DAMAGE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DAMAGR\nC*********************************************************************\n      SUBROUTINE DAMAGR\nC PURPOSE : DISPLAY STATUS OF DEVICES ON THE SHIP\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      CALL DBUGIN ('DAMAGR ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG ('    DAMAGE REPORT FOLLOWS:',IW(26))\n      CALL LINEF\n      IF (XCDC.GT.0.001.OR. XSRDC.GT.0.001.OR.XIEDC.GT.0.001.OR.\n     *    XLRDC.GT.0.001.OR.XWEDC.GT.0.001.OR.XDSDC.GT.0.001.OR.\n     *    XSSDC.GT.0.001.OR.XPTDC.GT.0.001) GO TO 100\n      GO TO 110\n100   IF (XCDC.GT.0.001)  CALL PRMRM ('COMPUTER           ',19,IW(19),\n     *     XCDC,' ',0,1)\n      IF (XSRDC.GT.0.001) CALL PRMRM ('SUBSPACE RADIO     ',19,IW(19),\n     *     XSRDC,' ',0,1)\n      IF (XIEDC.GT.0.001) CALL PRMRM ('IMPULSE ENGINES    ',19,IW(19),\n     *     XIEDC,' ',0,1)\n      IF (XLRDC.GT.0.001) CALL PRMRM ('LONG RANGE SENSORS ',19,IW(19),\n     *     XLRDC,' ',0,1)\n      IF (XWEDC.GT.0.001) CALL PRMRM ('WARP ENGINES       ',19,IW(19),\n     *     XWEDC,' ',0,1)\n      IF (XDSDC.GT.0.001) CALL PRMRM ('DEFLECTOR SCREENS  ',19,IW(19),\n     *     XDSDC,' ',0,1)\n      IF (XSSDC.GT.0.001) CALL PRMRM ('SHORT RANGE SENSORS',19,IW(19),\n     *     XSSDC,' ',0,1)\n      IF (XPTDC.GT.0.001) CALL PRMRM ('DISRUPTOR TORPEDOES',19,IW(19),\n     *     XPTDC,' ',0,1)\n      GO TO 120\n110   CALL LINEF\n      CALL PRMSG ('SHIP FULLY OPERATIONAL, LORD COMMANDER',IW(38))\n120   CALL DBUGIN ('DAMAGR EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DBUGCH\nC*********************************************************************\n      SUBROUTINE DBUGCH(MSG,MSGDIM,ICHAR,IDIM)\nC PURPOSE : IF TRACE IS ACTIVE, DISPLAY DEBUGGING INFORMATION\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /DBUGUN/ IUDBUG\n      DIMENSION MSG(MSGDIM), ICHAR(IDIM)\n      IF (IDEBUG.NE.1) GO TO 100\n          J = MSGDIM\n          IF (J.GT.10) J = 10\n          WRITE (IUDBUG,10000) (MSG(N),N=1,J)\n          WRITE (IUDBUG,10001)\n          WRITE (IUDBUG,10002) ICHAR\n          WRITE (IUDBUG,10003) (MSG(N),N=1,J)\n100   RETURN\n10000 FORMAT (' *DEBUG* BEGIN',1X,10A4)\n10001 FORMAT ('         ----+----1----+----2----+----3',\n     *                 '----+----4----+----5 ')\n10002 FORMAT ('         ',5A10)\n10003 FORMAT (' *DEBUG* END  ',1X,10A4)\n      END\n./     ADD     NAME=DBUGIA\nC*********************************************************************\n      SUBROUTINE DBUGIA(MSG,MSGDIM,INTEG,IDIM)\nC PURPOSE : IF TRACE IS ACTIVE, DISPLAY DEBUGGING INFORMATION\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /DBUGUN/ IUDBUG\n      DIMENSION MSG(MSGDIM), INTEG(IDIM)\n      IF (IDEBUG.NE.1) GO TO 100\n          J = MSGDIM\n          IF (J.GT.10) J = 10\n          WRITE (IUDBUG,10000) (MSG(N),N=1,J)\n          WRITE (IUDBUG,10001) INTEG\n          WRITE (IUDBUG,10002) (MSG(N),N=1,J)\n100   RETURN\n10000 FORMAT (' *DEBUG* BEGIN',1X,10A4)\n10001 FORMAT (' ',I12,1X,I12,1X,I12,1X,I12)\n10002 FORMAT (' *DEBUG* END  ',1X,10A4)\n      END\n./     ADD     NAME=DBUGIN\nC*********************************************************************\n      SUBROUTINE DBUGIN(MSG,MSGDIM,INTEG)\nC PURPOSE : IF TRACE IS ACTIVE, DISPLAY DEBUGGING INFORMATION\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /DBUGUN/ IUDBUG\n      DIMENSION MSG(MSGDIM)\n      DIMENSION IDFORM (8)\n      CHARACTER *4 CZDFORM(8)\n      EQUIVALENCE (CZDFORM,IDFORM)\n      DATA CZDFORM(1) /'('' *'/ , CZDFORM(2) /'DEBU'/ ,\n     *     CZDFORM(3) /'G*'','/ , CZDFORM(4) /'I20,'/ ,\n     *     CZDFORM(5) /'1X,'/ , CZDFORM(8) /')'/\n      DATA IDFORM(6) /-1/ , IDFORM(7) /-1/\n      IF (IDEBUG.NE.1) GO TO 100\n          I = IWI(IDUMMY)\n          CALL SETFOR (I,IDFORM(6),IDFORM(7),IMX)\n          IF (IMX.EQ.0) WRITE (IUDBUG,IDFORM) INTEG\n          IF (IMX.NE.0) WRITE (IUDBUG,IDFORM) INTEG, (MSG(N),N=1,IMX)\n100   RETURN\n      END\n./     ADD     NAME=DBUGRA\nC*********************************************************************\n      SUBROUTINE DBUGRA(MSG,MSGDIM,REALN,IDIM)\nC PURPOSE : IF TRACE IS ACTIVE, DISPLAY DEBUGGING INFORMATION\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /DBUGUN/ IUDBUG\n      DIMENSION MSG(MSGDIM), REALN(IDIM)\n      IF (IDEBUG.NE.1) GO TO 100\n          J = MSGDIM\n          IF (J.GT.10) J = 10\n          WRITE (IUDBUG,10000) (MSG(N),N=1,J)\n          WRITE (IUDBUG,10001) REALN\n          WRITE (IUDBUG,10002) (MSG(N),N=1,J)\n100   RETURN\n10000 FORMAT (' *DEBUG* BEGIN',1X,10A4)\n10001 FORMAT (' ',F12.7,1X,F12.7,1X,F12.7,1X,F12.7)\n10002 FORMAT (' *DEBUG* END  ',1X,10A4)\n      END\n./     ADD     NAME=DBUGRN\nC*********************************************************************\n      SUBROUTINE DBUGRN(MSG,MSGDIM,REALN)\nC PURPOSE : IF TRACE IS ACTIVE, DISPLAY DEBUGGING INFORMATION\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /DBUGUN/ IUDBUG\n      DIMENSION MSG(MSGDIM)\n      IF (IDEBUG.NE.1) GO TO 100\n          J = MSGDIM\n          IF (J.GT.10) J = 10\n          WRITE (IUDBUG,10000) REALN, (MSG(N),N=1,J)\n100   RETURN\n10000 FORMAT (' *DEBUG*',F20.7,1X,10A4)\n      END\n./     ADD     NAME=DEATHR\nC*********************************************************************\n      SUBROUTINE DEATHR\nC PURPOSE : TO SAY DEATHRAY (SSTREK COMMAND) NOT AVAIL\nC*********************************************************************\n      CALL DBUGIN ('DEATHR ENTERED',IW(14),0)\n      CALL PRMSG (\n     *  'KLINGONS DON''T NEED \"TOY\" WEAPONS LIKE A DEATHRAY    ',\n     *     IW(49))\n      CALL PRMSG ('TO DO THEIR FIGHTING FOR THEM.',IW(30))\n      CALL DBUGIN ('DEATHR EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DEBUGX\nC*********************************************************************\n      SUBROUTINE DEBUGX\nC PURPOSE : WRITE GAME VARIABLES TO THE EXTENDED DEBUGGING FILE\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /DBUGUN/ IUDBUG\n      WRITE (IUDBUG,09999)\n09999 FORMAT (/' ================== XSNAP BEGIN')\n      WRITE (IUDBUG,10000)\n     *     CSDATE,TGIVEN,ILEV,WFACT,IDATF,BATTER,ISSAVE,IDUM,TARX\n10000 FORMAT (' CSDATE=',F14.3/' TGIVEN=',F14.3/' ILEV  =',I14  /\n     *        ' WFACT =',F14.3/' IDATF =',I14  /' BATTER=',F14.3/\n     *        ' ISSAVE=',I14  /' IDUM  =',I14  /' TARX  =',F14.3)\n      WRITE (IUDBUG,10001)\n     *     TARY,ISCPX2,ISCPY2,NSECE,IHIT,ISBC,IFSC,IKCC,ITORCT,ISB,IFS\n10001 FORMAT (' TARY  =',F14.3/' ISCPX2=',I14  /' ISCPY2=',I14  /\n     *        ' NSECE = (10 * 10)',20(/5I15)/\n     *                         ' IHIT  =',A4   /' ISBC  =',I14  /\n     *        ' IFSC  =',I14  /' IKCC  =',I14  /' ITORCT=',I14  /\n     *        ' ISB   =',I14  /' IFS   =',I14  )\n      WRITE (IUDBUG,10002)\n     *     IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,ISECT,TVX,TVY,ICMC\n10002 FORMAT (' IKC   =',I14  /' IPR   =',I14  /' ISCPX1=',I14  /\n     *        ' ISCPY1=',I14  /' ICHC  =',I14  /' IPLC  =',I14  /\n     *        ' ISTC  =',I14  /' ET    =',F14.3/\n     *        ' ISECT = (10 * 10)',10(/10A4)/\n     *        ' TVX   =',F14.3/' TVY   =',F14.3/' ICMC  =',I14  )\n      WRITE (IUDBUG,10003)\n     *     ICHART,IPLNET,IKY,IPAD3,XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC\n10003 FORMAT (' ICHART= (8 * 8)',16(/4I15)/\n     *        ' IPLNET= (8 * 8)',16(/4I15)/\n     *        ' IKY   = (8 * 8)',16(/4I15)/\n     *                                          ' IPAD3 =',I14  /\n     *        ' XCDC  =',F14.3/' XSRDC =',F14.3/' XIEDC =',F14.3/\n     *        ' XLRDC =',F14.3/' XWEDC =',F14.3/' XDSDC =',F14.3)\n      WRITE (IUDBUG,10004)\n     *     XSSDC,XPTDC,NSTARS,NPLNTS,NSBASE,NFED,NCOMM,ICOND,ENERGY\n10004 FORMAT (' XSSDC =',F14.3/' XPTDC =',F14.3/' NSTARS=',I14  /\n     *        ' NPLTS =',I14  /' NSBASE=',I14  /' NFED  =',I14  /\n     *        ' NCOMM =',F14.3/' ICOND =',2A4  /' ENERGY=',F14.3)\n      WRITE (IUDBUG,10005)\n     *     ISHUPD,ISHENG,IAPDEV,IPOF,IOVER,NOCALL,IPLENG,IPBASE,IFED2\n10005 FORMAT (' ISHUPD=',A4   /' ISHENG=',I14  /' IAPDEV=',I14  /\n     *        ' IPOF  =',I14  /' IOVER =',I14  /' NOCALL=',I14  /\n     *        ' IPLENG=',I14  /' IPBASE=',I14  /' IFED2 =',I14  )\n      WRITE (IUDBUG,10006)\n     *     ICOMM2,IUSFED\n10006 FORMAT (' ICOMM2=',I14  /\n     *        ' IUSFED= (15 * 13)',13(/4I3,11A4))\n      WRITE (IUDBUG,10007) NFX,NFY,NCX,NCY\n10007 FORMAT (' NFX   =',5I15/' ',4I15/\n     *        ' NFY   =',5I15/' ',4I15/\n     *        ' NCX   =',5I15/' ',4I15/\n     *        ' NCY   =',5I15/' ',4I15)\n      WRITE (IUDBUG,10099)\n10099 FORMAT (/' ================== XSNAP END')\n      RETURN\n      END\n./     ADD     NAME=DESMSG\nC*********************************************************************\n      SUBROUTINE DESMSG\nC PURPOSE : DISPLAY \"YOU BLEW UP MSG\"\nC*********************************************************************\n      CALL DBUGIN ('DESMSG ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG ('  #CLICK#',IW(10))\n      CALL LINEF\n      CALL PRMSG (\n     *     '*********************************************************',\n     *     IW(57))\n      CALL PRMSG (\n     *     '****         SUPERCOMMANDER KAZH DESTROYED           ****',\n     *     IW(57))\n      CALL PRMSG (\n     *     '*********************************************************',\n     *     IW(57))\n      CALL DBUGIN ('DESMSG EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DISPIN\nC*********************************************************************\n      SUBROUTINE DISPIN\nC PURPOSE : DISPLAY INFORMATION ABOUT INITIAL SETUP\nC           NUMBERS (I.E. FEDERATION AND KLINGON STRENGTHS)\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,\n     * ISTC,ET,ISECT(10,10),TVX,TVY,ICMC\n      CALL DBUGIN ('DISPIN ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMIM (' ',0,IW(1),ISB,'FEDERATION STARBASES',20,IW(20))\n      CALL PRMIM (' ',0,IW(1),IFS,'FEDERATION STARSHIPS',20,IW(20))\n      CALL LINEF\n      CALL PRMIM ('YOU WILL HAVE ',14,IW(14),IKC,\n     *     'COMMANDERS TO ASSIST YOU',24,IW(24))\n      CALL PRMSG ('GOOD LUCK. ALL OF KLINGON GOES WITH YOU',IW(39))\n      CALL LINEF\n      CALL DBUGIN ('DISPIN EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=DIST\nC*********************************************************************\n      REAL FUNCTION DIST (TQX,TSX,TQY,TSY,PQX,PSX,PQY,PSY)\nC*********************************************************************\nC     DIST IS DISTANCE IN QUADRANTS\nC     TQX - IS TARGET QUADRANT X VALUE.\nC     TSX - IS TARGET SECTOR X VALUE.\nC     TQY - IS TARGET QUADRANT Y VALUE\nC     TSY - IS TARGET SECTOR Y VALUE\nC     PQX - IS PRESENT QUADRANT X VALUE\nC     PSX - IS PRESENT SECTOR X VALUE\nC     PQY - IS PRESENT QUADRANT Y VALUE\nC     PSY - IS PRESENT SECTOR Y VALUE.\nC     ----------------------------------------------------------------\nC     TARGET IS AREA YOU WISH TO GO TO.\nC     PRESENT IS AREA WHERE YOU ARE NOW.\nC     OTHER VARIABLES ARE USED AS INTERMEDIATE RESULT AREAS\nC     ----------------------------------------------------------------\n      INTEGER TQX,TSX,TQY,TSY,PQX,PSX,PQY,PSY\n      REAL XTP,XPP,YTP,YPP\n      CALL DBUGIN ('FUNC DIST ENTERED',IW(17),0)\n      CALL DBUGRN ('(DIST) PQX=',IW(11),PQX)\n      CALL DBUGRN ('(DIST) PQY=',IW(11),PQY)\n      CALL DBUGRN ('(DIST) PSX=',IW(11),PSX)\n      CALL DBUGRN ('(DIST) PSY=',IW(11),PSY)\n      CALL DBUGRN ('(DIST) TQX=',IW(11),TQX)\n      CALL DBUGRN ('(DIST) TQY=',IW(11),TQY)\n      CALL DBUGRN ('(DIST) TSX=',IW(11),TSX)\n      CALL DBUGRN ('(DIST) TSY=',IW(11),TSY)\n      XTP = TQX+(.1*(TSX-1))\n      XPP = PQX+(.1*(PSX-1))\n      YTP = TQY+(.1*(TSY-1))\n      YPP = PQY+(.1*(PSY-1))\n      D = SQRT(((XTP-XPP)**2)+((YTP-YPP)**2))\n      DIST = D\n      CALL DBUGRN ('(DIST) DIST=',IW(12),D)\n      CALL DBUGIN ('FUNC DIST EXITED',IW(16),0)\n      RETURN\n      END\n./     ADD     NAME=DOCK\nC*********************************************************************\n      SUBROUTINE DOCK\nC PURPOSE : PRINT MSG SAYING DOCK NOT AVAIL\nC*********************************************************************\n      CALL DBUGIN ('DOCK ENTERED',IW(12),0)\n      CALL LINEF\n      CALL PRMSG ('WHAT ARE YOU PLANNING TO DO, DOCK WITH',IW(38))\n      CALL PRMSG ('A FEDERATION STARBASE ???',IW(25))\n      CALL DBUGIN ('DOCK EXITED',IW(11),0)\n      RETURN\n      END\n./     ADD     NAME=DRAGIN\nC*********************************************************************\n      SUBROUTINE DRAGIN\nC PURPOSE : HANDLE CONDITION OF STARBASE CALLING FOR HELP, PULL IN\nC           HELPERS IF AVAILABLE\nC*********************************************************************\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /SSINFO/ IOXQ(9),IOYQ(9),INXS(9),INYS(9)\n      CALL DBUGIN ('DRAGIN ENTERED',IW(14),0)\n      ICTFLG = 0\n      GO TO 10\nC*********************************************************************\n      ENTRY DRAGCC\nC*********************************************************************\n      ICTFLG = 1\n10    CALL DBUGIN ('DRAGCC ENTERED',IW(14),0)\n      CALL ITERPT\n      IF (NFED.GT.0.OR.(NSBASE.EQ.0.AND.NPLNTS.EQ.0)) GO TO 200\n      IF (NOCALL.EQ.1) GO TO 200\n      IDAMG = 0\n      IF (NPLNTS.EQ.0) GO TO 20\n      CALL LOCATE (KZP,IIXP,IIYP)\n      M1 = NSECE(IIXP,IIYP)\n      IF (M1.NE.IPLENG.AND.M1.LE.-200000000) IDAMG = 2\n20    IF (NSBASE.EQ.0) GO TO 30\n      CALL LOCATE (KZB,IIXB,IIYB)\n      IF (NSECE(IIXB,IIYB).NE.IPBASE) IDAMG = 1\n30    IF (IDAMG.EQ.0) GO TO 200\n      ILOX = ISCPX1-ISGN(ISCPX1-1)\n      IHIX = ISGN(8-ISCPX1)+ISCPX1\n      ILOY = ISCPY1-ISGN(ISCPY1-1)\n      IHIY = ISGN(8-ISCPY1)+ISCPY1\n      IF (XSRDC.GT.0.001) GO TO 80\n      CALL LINEF\n      CALL PRMSG (\n     *  'LORD COMMANDER, WE HAVE INTERCEPTED A SUBSPACE RADIO',\n     *  IW(52))\n      CALL PRMSG (\n     *  'TRANSMISSION ON A FEDERATION FREQUENCY:',IW(39))\n      CALL LINEF\n      CALL PRMSG (\n     *  '# PRIORITY ONE # CALL TO ANY FEDERATION STARSHIP:',IW(49))\n      CALL LINEF\n      NOCALL = 1\n      IF (IDAMG.EQ.2) GO TO 40\n      CALL PRMSM (\n     *  'FROM STARBASE IN QUADRANT: ',27,IW(27),\n     *  ISCPY1,ISCPX1,' ',0,1)\n      GO TO 50\n40    CALL PRMSM (\n     *  'FROM FEDERATION PLANET IN QUADRANT: ',36,IW(36),ISCPY1,\n     *     ISCPX1,' ',0,1)\n50    IF (ICTFLG.EQ.0) GO TO 60\n      CALL PRMSG (\n     *  'WE ARE CURRENTLY UNDER ATTACK FROM A KLINGON COMMANDER',\n     *  IW(54))\n      GO TO 70\n60    CALL PRMSG (\n     *  'WE ARE UNDER ATTACK FROM THE KLINGON SUPER-COMMANDER',\n     *  IW(52))\n70    CALL PRMSG ('       ... PLEASE RESPOND.',IW(26))\n80    CALL LINEF\nC     --- FIND IF THERE ARE ANY STARSHIPS HANDY ---\n      IRESP = 0\n      ISSCNT = 1\n      DO 120 I = ILOY, IHIY\n           DO 110 J = ILOX, IHIX\n                IF (ISCPX1.EQ.J.AND.ISCPY1.EQ.I) GO TO 110\n                CALL SCAN (ICHART(J,I))\n                IF (IFED2.EQ.0) GO TO 110\n                CALL ITERPT\n                IF (NFED.EQ.9) GO TO 130\n                IF (XLRDC.LE.0.001) CALL PRMSM (\n     *               'INCOMING FEDERATION STARSHIP(S) FROM: ',\n     *               38,IW(38),I,J,' ',0,1)\n                IRESP = IRESP+1\n                ICHART(J,I) = ICHART(J,I)-(100*IFED2)\n                ICHART(ISCPX1,ISCPY1)=ICHART(ISCPX1,ISCPY1)+(100*IFED2)\n                DO 100 M = 1, IFED2\n90                   M1 = RAND(10.0)+1.0\n                     M2 = RAND(10.0)+1.0\n                     IF (ISECT(M1,M2).NE.ICRDOT) GO TO 90\n                     ISECT(M1,M2) = KZF\n                     NSECE(M1,M2) = IFEDST(DUMMY)\n                     IOXQ(ISSCNT) = J\n                     IOYQ(ISSCNT) = I\n                     INXS(ISSCNT) = M1\n                     INYS(ISSCNT) = M2\n                     ISSCNT = ISSCNT+1\n100             CONTINUE\n110        CONTINUE\n120   CONTINUE\n130   IF (IRESP.GT.0) GO TO 140\n      CALL LINEF\n      CALL PRMSG ('NO FEDERATION STARSHIPS RESPOND',IW(31))\n      CALL LINEF\n      GO TO 200\n140   CALL SSPRNT (1)\n      IF (XSRDC.GT.0.001) GO TO 200\n      CALL LINEF\n      CALL PRMSG (\n     *  'TOP ALERT CALL FROM SUPER-COMMANDER KAZH:',IW(41))\n      CALL LINEF\n      CALL PRMSG (\n     *  'ALL COMMANDERS IN RANGE ARE ORDERED TO CONVERGE ',IW(48))\n      CALL PRMSM ('ON QUADRANT: ',13,IW(13),ISCPY1,ISCPX1,' ',0,1)\n      CALL LINEF\n      IRESP = 0\n      DO 190 I = ILOY, IHIY\n           DO 180 J = ILOX, IHIX\n                IF (J.EQ.ISCPX1.AND.I.EQ.ISCPY1) GO TO 180\n                CALL SCAN (ICHART(J,I))\n                IF (ICOMM2.EQ.0) GO TO 180\n                CALL ITERPT\n                IF (NCOMM.EQ.9) GO TO 200\n                CALL PRMSM ('COMMANDER(S) IN QUADRANT: ',26,IW(26),\n     *               I,J,'RESPOND',7,IW(7))\n                IRESP = IRESP+1\n                ICHART(J,I) = ICHART(J,I)-(1000*ICOMM2)\n                ICHART(ISCPX1,ISCPY1)=ICHART(ISCPX1,ISCPY1)+\n     *                                            (1000*ICOMM2)\n                DO 170 M = 1, ICOMM2\n160                  M1 = RAND(10.0)+1.0\n                     M2 = RAND(10.0)+1.0\n                     IF (ISECT(M1,M2).NE.ICRDOT) GO TO 160\n                     ISECT(M1,M2) = KZC\n                     NSECE(M1,M2) = -4500\n170             CONTINUE\n180        CONTINUE\n190   CONTINUE\n      IF (IRESP.GT.0) GO TO 200\n      CALL LINEF\n      CALL PRMSG ('NO COMMANDERS RESPONDED, LORD COMMANDER',IW(39))\n      CALL LINEF\n200   CALL DBUGIN ('DRAGIN/DRAGCC EXITED',IW(20),0)\n      RETURN\n      END\n./     ADD     NAME=EMPLAC\nC*********************************************************************\n      SUBROUTINE EMPLAC (NFS)\nC PURPOSE : PLACE FEDERATION STARSHIPS (FOR EMERITUS ONLY) SO\nC           THAT ALL STARBASES ARE GUARDED BY A STARSHIP, AND\nC           \"EXTRA\" STARSHIPS ARE PUT NEAR STARBASES TOO.\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      CALL DBUGIN ('EMPLAC ENTERED',IW(14),0)\n      IRF = 0\n      DO 30 J = 1, 8\n           DO 20 I = 1, 8\n                IF (MOD(ICHART(I,J)/10,10).EQ.0) GO TO 20\n                IRF = IRF+1\n10              IX = (IFIX(RAND(3.0)+1.0)-2)+I\n                IY = (IFIX(RAND(3.0)+1.0)-2)+J\n                IF (IX.LT.1.OR.IX.GT.8.OR.IY.LT.1.OR.IY.GT.8) GO TO 10\n                ICHART(IX,IY) = ICHART(IX,IY)+100\n                CALL SSINIT (IUSFED,IX,IY)\n20         CONTINUE\n30    CONTINUE\n      IFMORE = NFS-IRF\n      DO 90 J = 1, IFMORE\n40         IX = RAND(8.0)+1.0\n           IY = RAND(8.0)+1.0\n           ILOX = IX-ISGN(IX-1)\n           IHIX = ISGN(8-IX)+IX\n           ILOY = IY-ISGN(IY-1)\n           IHIY = ISGN(8-IY)+IY\n           DO 60 N = ILOY, IHIY\n                DO 50 I = ILOX, IHIX\n                     IF (MOD(ICHART(I,N)/10,10).NE.0) GO TO 70\n50              CONTINUE\n60         CONTINUE\n           IOK = 0\n           GO TO 80\n70         IOK = 1\n80         IF (IOK.EQ.0) GO TO 40\n           ICHART(IX,IY) = ICHART(IX,IY)+100\n           CALL SSINIT (IUSFED,IX,IY)\n90    CONTINUE\n      CALL DBUGIN ('EMPLAC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ENGUSE\nC*********************************************************************\n      FUNCTION ENGUSE (D,WF)\nC PURPOSE : COMPUTE HOW MUCH ENERGY USED TO MOVE AT A CERTAIN\nC           WARP FACTOR\nC*********************************************************************\nC     D IS DISTANCE IN QUADRANTS\nC     WF IS CURRENT WARP FACTOR\nC ----------------------------------------------------------------\n      CALL DBUGIN ('ENGUSE ENTERED',IW(14),0)\n      E = D*(WF**(2.0+((12.0-WF)*.1)))\n      CALL DBUGRN ('ENGUSE VALUE=',IW(13),E)\n      ENGUSE = E\n      CALL DBUGIN ('ENGUSE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ENGYST\nC*********************************************************************\n      SUBROUTINE ENGYST (IENGST,IZRED)\nC PURPOSE : TEST LEVEL OF ENERGY LEFT IN SHIP\nC           SET IENGST = -1 IF OUT OF ENERGY, 0 IF OK TO CONTINUE\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      CALL DBUGIN ('ENGYST ENTERED',IW(14),0)\n      IENGST = 0\n      IF (ENERGY.GT.0.0) GO TO 190\n      CALL LINEF\n      IF (XCDC.GT.0.001) GO TO 160\n      CALL PRMSG (\n     * 'MAIN ENERGY BANKS HAVE FALLEN TO ZERO, BATTLE COMPUTER',IW(54))\n      CALL PRMSG (\n     * 'LOCKED INTO EMERGENCY ENERGY CIRCUITS, CROSS-CIRCUITING',IW(55)\n     * )\n      CALL PRMSG ('TO EMERGENCY RUBIDIUM ENERGY STORAGE CELLS',IW(42))\n      CALL LINEF\n      ENERGY = ENERGY+BATTER\n      BATTER = 0.0\n      IF (ENERGY.GT.0.0) GO TO 190\n160   IF (ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZRED) GO TO 170\n      CALL LINEF\n      CALL PRMSG ('YOUR COMPUTER WAS UNABLE TO RESTORE YOUR ENERGY,',\n     *     IW(48))\n      CALL PRMSG ('YOU AND YOUR CREW DIE IN THE CRUEL COLDNESS OF SPACE'\n     *     ,IW(52))\n      GO TO 180\n170   CALL LINEF\n      CALL PRMSG ('THE SUPERCOMMANDER KAZH IS DESTROYED IN BATTLE',\n     *     IW(46))\n      CALL PRMSG ('AS FAR AS A KLINGON IS CONCERNED, THIS IS THE ONLY',\n     *     IW(50))\n      CALL PRMSG ('WAY TO DIE!',IW(11))\n180   IENGST = -1\n190   CALL DBUGIN ('ENGYST EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ESCAPE\nC*********************************************************************\n      SUBROUTINE ESCAPE (INX,INY,IOUTX,IOUTY)\nC PURPOSE : COMPUTE A RANDOM LOCATION TO MOVE TO FOR SUPERNOVA IF\nC           COMPUTER DAMAGED\nC*********************************************************************\n      CALL DBUGIN ('ESCAPE ENTERED',IW(14),0)\n10    IXX = (IFIX(RAND(3.0)+1.0)-2)+INX\n      IYY = (IFIX(RAND(3.0)+1.0)-2)+INY\n      IF (IXX.EQ.INX.AND.IYY.EQ.INY) GO TO 10\n      IF (IXX.GT.8.OR.IXX.LT.1.OR.IYY.GT.8.OR.IYY.LT.1) GO TO 10\n      IOUTX = IXX\n      IOUTY = IYY\n      CALL DBUGIN ('ESCAPE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=FREEZE\nC*********************************************************************\n      SUBROUTINE FREEZE\nC PURPOSE : WRITE GAME VARIABLES TO A FREEZE FILE\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /SRCOPY/ ISCOP(10,10)\n      CHARACTER *4 CZRBLK\n      EQUIVALENCE (CZRBLK,ICRBLK)\n      DATA CZRBLK /' '/\n      CALL DBUGIN ('FREEZE ENTERED',IW(14),0)\n      IDATF = 0\n      REWIND 27\n      WRITE (27) CSDATE,TGIVEN,ILEV,WFACT,IDATF,BATTER,ISSAVE,IDUM,TARX,\n     *     TARY,ISCPX2,ISCPY2,NSECE,IHIT,ISBC,IFSC,IKCC,ITORCT,ISB,IFS,\n     *     IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,ISECT,TVX,TVY,ICMC,\n     *     ICHART,IPLNET,IKY,IPAD3,XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,\n     *     XSSDC,XPTDC,NSTARS,NPLNTS,NSBASE,NFED,NCOMM,ICOND,ENERGY,\n     *     ISHUPD,ISHENG,IAPDEV,IPOF,IOVER,NOCALL,IPLENG,IPBASE,IFED2,\n     *     ICOMM2,IUSFED\n      ENDFILE 27\n      REWIND 27\n      CALL PRMSG ('GAME NOW ON FROZEN FILE (TAPE27/FT27F001)',IW(41))\n      CALL DBUGIN ('FREEZE EXITED',IW(13),0)\n      GO TO 30\nC*********************************************************************\n      ENTRY GET\nC PURPOSE : READ THE VARIABLES BACK FROM THE FROZEN FILE\nC*********************************************************************\nC     PLEASE NOTE, IPAD1(1) IS USED AS AN ERROR FLAG SINCE\nC     IT IS NOT OF GREAT IMPORTANCE TO THE MAIN PROGRAM.\nC     ----------------------------------------------------------------\n      CALL DBUGIN ('GET ENTERED',IW(11),0)\n      IPAD1(1) = 999999\n      REWIND 27\n      READ (27,END=20,ERR=20)\n     *     CSDATE,TGIVEN,ILEV,WFACT,IDATF,BATTER,ISSAVE,IDUM,\n     *     TARX,TARY,ISCPX2,ISCPY2,NSECE,IHIT,ISBC,IFSC,IKCC,ITORCT,ISB,\n     *     IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,ISECT,TVX,TVY,\n     *     ICMC,ICHART,IPLNET,IKY,IPAD3,XCDC,XSRDC,XIEDC,XLRDC,XWEDC,\n     *     XDSDC,XSSDC,XPTDC,NSTARS,NPLNTS,NSBASE,NFED,NCOMM,ICOND,\n     *     ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER,NOCALL,IPLENG,IPBASE,\n     *     IFED2,ICOMM2,IUSFED\n      DO 10 I=1, 10\n         DO 10 J=1,10\n            ISCOP(I,J) = ICRBLK\n10    CONTINUE\n      CALL DBUGIN ('GET EXITED',IW(10),0)\n      GO TO 30\n20    CALL PRMSG ('ERROR WHILE READING FILE, TRY AGAIN',IW(35))\n      IPAD1(1) = -99999\n30    RETURN\n      END\n./     ADD     NAME=FSIO1\nFSR1     TITLE '--- FSIO1 - DO FULLSCREEN TPUT/TGET ROUTINE ---'\nFSIO1    START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : ROUTINE FSIO1 - DO FULLSCREEN TPUT/TGET                 *\n*           INPUT  - BUFFERS IN COMMON \"FSBUFF\"                     *\n*           OUTPUT - A LINE OF INPUT, 50 CHARACTERS LONG RETURNED   *\n*                    IN COMMOM \"FSBUFF\"                             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n         USING FSIO1,R12           WE GOT IT\n         ST    R13,SAVEAREA+4      NON-RENT, NO BIG DEAL HERE\n         LA    R15,SAVEAREA        SET FORWARD/BACKWORD POINTERS\n         ST    R15,8(,R13)           \" \" \"\n         LA    R13,SAVEAREA          \" \" \"\n* 1) INIT THE COUNTERS FOR PROGRAM (AT LEAST MAKE PROGRAM \"REUS\")\n         XC    COUNTER,COUNTER     ZERO OUT COUNTER\n         XC    BUFFDISP,BUFFDISP   DISP TO CURRENT $WORK\n         XC    LNCNT,LNCNT         ZERO OUT LINE COUNTER\n         L     R11,=V(FSBUFF)      COMMON \"FSBUFF\"\n         USING $FSBUFF,R11         ADDRESS IT\n* 2) OBTAIN INFO ABOUT TERMINAL (IBM3270) IT IS 24, 32 OR 43 LINES\n*    AND PREPARE THE CLEAR SCREEN SEQUENCE FOR OUR DATA\n         L     R3,=V(TERMSZ)       COMMON \"TERMSZ\"\n         LM    R0,R1,0(R3)         GET VARIABLES \"IILINE\" AND \"IILLEN\"\n         LTR   R15,R0              DETERMINE IF DISPLAY TERMINAL\n         BZ    QUIT                IF R0=0, WE IN WRONG PLACE, OUT\n         CLI   CLRSCR+5,0          ALREADY GOT SCREEN SIZE ?\n         BNE   NOCSIZE             YES, SKIP, ALREADY DONE\n         MR    R0,R0               GET THE SCREEN SIZE\n         BCTR  R1,0                GET LAST SCREEN LOCATION\n         STC   R1,CLRSCR+6         SAVE LOW-ORDER\n         SRL   R1,6\n         STC   R1,CLRSCR+5         SAVE HIGH-ORDER\n         NC    CLRSCR+5(2),=XL2'3F3F' CONVERT TO 3270 12-BIT\n         TR    CLRSCR+5(2),TBL12BIT ADDRESS FORMAT\nNOCSIZE  BCTR  R15,0               DECREMENT FOR CONTIN LINE\n         ST    R15,LNCNTMS         USE DISPLAY SIZE VALUE\n* 3) SET AN INITIAL CLEAR OF THE SCREEN FOR OUR DATA\n         L     R9,=V(BUFFER)       INIT THE POINTER TO BUFFER AREA\n         MVC   0(L'CLRSCR,R9),CLRSCR CLEAR SEQUENCE STRING\n         LA    R8,L'CLRSCR         AND SET \"CURRENT\" BUFFER LENGTH\n         LA    R9,L'CLRSCR(,R9)    SET R9 TO CURRENT BUFFER\n* 4) INIT THE BUFFER POINTERS AND COUNTERS, R9 IS CURRENT BUFFER\n*    POSITION, R8 IS CURRENT LENGTH OF USED BUFFER\n         MVC   LNCNT,LNCNTMS       INIT LINE COUNTER\n         MVC   0(LINELEN,R9),WAITUP FILL IN WITH \"WAITING\" MSG\n         LA    R9,LINELEN(,R9)     PUSH UP BUFFER ADDRESS\n         LA    R8,LINELEN(,R8)     PUSH UP LENGTH VALUE\n* 5) FILL IN HEADER FROM FSBUFF AREA FOR IT\n         LA    R3,HEADLEN          LENGTH TO MOVE TO BUFFER\n         LR    R5,R3               COPY LENGTH TO 2ND REG\n         LR    R2,R9               \"TO\" BUFFER ADDRESS\n         LA    R4,$HEADER          \"FROM\" TEXT ADDRESS\n         MVCL  R2,R4               BUILD HEADING LINE\n         LA    R8,HEADLEN(,R8)     INCR BUFFER SIZE\n         LA    R9,HEADLEN(,R9)     INCR POSITION OF NEXT LINE\n         L     R10,LNCNT           GET LINE COUNTER\n         SH    R10,=AL2(HEADLINE+1) DECREMENT LINE COUNTER (HEADER\n         ST    R10,LNCNT           PLUS STATUS LINE)\n* 6) LOOK TO SEE IF ALL LINES DISPLAYED ... IF SO EXIT\n*    OTHERWISE LOOK TO SEE IF THE PAGE IS FULL, DISPLAY IT\n*    OTHERWISE KEEP FILLING IN THE PAGE BUFFER\n*    TOP OF DISPLAY LOOP\nPUTLOOP  CLC   COUNTER,$LINECNT    ALL LINES BEEN DISPLAYED ?\n         BE    DONE                IF YES, ALL DONE\n         LTR   R10,R10             IS THIS ZERO\n         BP    FILLBUFF            KEEP FILLING THIS PAGE IF POS\n         MVC   LNCNT,LNCNTMS       RESET LINE COUNTER\n         MVC   0(L'CNTMSG,R9),CNTMSG INDICATE MORE TO COME\n         MVC   L'CNTMSG(L'INCURS,R9),INCURS AND SET CURSOR\n         LA    R8,L'CNTMSG+L'INCURS(,R8) INCR FOR CONTIN MESSAGE\n         SR    R1,R1               NO PARMS\n         L     R15,=V(GRAFIC)      ADDRESS OF GRAFICS RTN\n         BALR  R14,R15             GO DO PRETTY PICTURES\n         LR    R0,R8               SETUP TPUT FULLSCR REQ\n         L     R1,=V(BUFFER)\n         ICM   R1,8,TPUTFLG        SETUP TPUT FLAGS\n        TPUT   (1),(0),R           ISSUE FULLSCREEN TPUT\n        TGET   INBUF,0             DUMMY TGET, JUST FOR WAIT\n         L     R9,=V(BUFFER)\n         MVC   0(L'CLRSCR,R9),CLRSCR CLEAR SEQUENCE STRING\n         LA    R8,L'CLRSCR         AND SET \"CURRENT\" BUFFER LENGTH\n         LA    R9,L'CLRSCR(,R9)    SET R9 TO CURRENT BUFFER\n         MVC   0(LINELEN,R9),WAITUP FILL IN WITH \"WAITING\" MSG\n         LA    R9,LINELEN(,R9)     PUSH UP BUFFER ADDRESS\n         LA    R8,LINELEN(,R8)     PUSH UP LENGTH VALUE\n         LA    R8,HEADLEN(,R8)     INCR BUFFER SIZE (ALLOW HEADER)\n         LA    R9,HEADLEN(,R9)     INCR POSITION OF NEXT LINE\n         L     R10,LNCNT           GET LINE COUNTER\n         SH    R10,=AL2(HEADLINE+1) DECREMENT LINE COUNTER\n         ST    R10,LNCNT           STORE IT BACK\n         B     PUTLOOP             DROP TO BOTTOM OF LOOP\nFILLBUFF L     R2,BUFFDISP         LOAD WITH CURRENT BUFFER DISP\n         LA    R1,$WORK            AND WORK ADDRESS\n         LA    R1,0(R1,R2)         ADD THEM TOGETHER\n         LA    R2,LINELEN(,R2)     ADD TO POINTER\n         ST    R2,BUFFDISP         STORE IT BACK\n         MVC   0(LINELEN,R9),0(R1) BUILD BUFFER ENTRY\n         LA    R8,LINELEN(,R8)     INCR BUFFER SIZE\n         LA    R9,LINELEN(,R9)     INCR A(NEXT BUFFER ENTRY)\n         L     R1,COUNTER          LOAD COUNTER VALUE\n         LA    R1,1(,R1)           INCR FOR NEXT ENTRY\n         ST    R1,COUNTER          STORE BACK\n         L     R10,LNCNT           DECREMENT LINE COUNTER\n         BCTR  R10,0               SUBTRACT ONE\n         ST    R10,LNCNT           STORE IT BACK\n         B     PUTLOOP             DO THE NEXT SCREEN\n* 7) THIS INVOKE OF THE ROUTINE DONE, READ THE NEXT LINE\n*    OF INPUT FROM THE USER\nDONE     L     R15,=V(XCHEAD)      PREPARE TO FILL IN BUFFERS\n         SR    R1,R1               NO PARMS\n         BALR  R14,R15             CALL ROUTINE\n         L     R1,=V(BUFFER)\n         MVC   0(L'CLRSCR,R1),CLRSCR CLEAR SEQUENCE STRING\n         LA    R1,L'CLRSCR(,R1)    PUSH UP POINTER\n         MVC   0(LINELEN,R1),CURRMSG FILL IN WITH \"CURRENT\" MSG\n         L     R5,=V(PHASE)        ADDRESS TO \"PHASE\"\n         ICM   R5,B'1111',0(R5)    AND IT'S VALUE\n         BZ    *+L'*+6             IF ZERO, NOT IN INIT\n         MVC   0(LINELEN,R1),INITMSG INIT MSG\n         LA    R1,LINELEN(,R1)     PUSH UP BUFFER ADDRESS\n         LA    R3,HEADLEN          LENGTH TO MOVE TO BUFFER\n         LR    R5,R3               COPY LENGTH TO 2ND REG\n         LR    R2,R1               \"TO\" BUFFER ADDRESS\n         LA    R4,$HEADER          \"FROM\" TEXT ADDRESS\n         MVCL  R2,R4               BUILD HEADING LINE\n         SR    R1,R1               NO PARMS\n         L     R15,=V(GRAFIC)      ADDRESS OF GRAFICS RTN\n         BALR  R14,R15             GO DO PRETTY PICTURES\n* 8) PULL IN THE \"PROMPT\" FOR THE LAST LINE\n         L     R2,$PROMLEN         LENGTH OF MESSAGE\n         LA    R1,$PROMPT          ADDRESS OF MESSAGE\n         BCT   R2,*+L'*+6          SUBTRACT FOR 360 MOVE INST\n         MVC   0(*-*,R9),0(R1)     <<EXECUTED>>\n         EX    R2,*-6              FILL IN PROMPT MESSAGE\n         L     R2,$PROMLEN         LENGTH OF PROMPT\n         LA    R2,0(R2,R9)         ADDRESS TO FILL IN \" ?\"\n         MVC   0(2,R2),=CL2' ?'    ADD ? TO PROMPT\n         L     R2,$PROMLEN         LOAD LENGTH OF MSG\n         LA    R2,2(R2)            ADD TWO FOR \" ?\"\n         LA    R8,0(R2,R8)         INCR LENGTH OF END MSG\n         LA    R9,0(R2,R9)         AND BUFFER POINTER\n         MVC   0(L'UNLOCK,R9),UNLOCK FILL IN UNLOCK STRING\n         LA    R8,L'UNLOCK(,R8)     ADD LENGTH OF UNLOCK\n         LA    R9,L'UNLOCK(,R9)     AND BUFFER ADDRESS\n         LR    R0,R8               SETUP TPUT FULLSCR REQ\n         L     R1,=V(BUFFER)       ADDRESS OF BUFFER\n         ICM   R1,8,TPUTFLG        SETUP TPUT FLAGS\n        TPUT   (1),(0),R           FULLSCREEN\n         L     R1,=V(BUFFER)       REUSE BUFFER FOR INPUT\n         LA    R0,BUFFLEN          AND SET LENGTH\n         MVI   $RETURN,C' '        FILL IN RETURN BUFFER W/BLANKS\n         MVC   $RETURN+1(L'$RETURN-1),$RETURN       \"     \"\n        TGET   (1),(0),EDIT,WAIT   GET INPUT FROM USER\n         LTR   R15,R15             RETURN CODE ZERO ?\n         BNZ   AROUND              IF NOT, BLANKS LEFT ALONE\n* 9) COMPRESS AND UPPER CASE THE RECEIVED INPUT\n         LR    R3,R1               SAVE LENGTH\n         L     R1,=V(BUFFER)       ADDRESS BUFFER\n         LA    R2,$RETURN          ADDRESS RETURN AREA\n         LA    R4,L'$RETURN        RETURN AREA LENGTH\nGTXT1    OI    0(R1),C' '          UPPER CASE\n         CLI   0(R1),C' '\n         BNE   GTXT3\nGTXT2    LA    R1,1(R1)\n         BCT   R3,*+L'*+4\n         B     PASSIN\n         OI    0(R1),C' '          UPPER CASE\n         CLI   0(R1),C' '\n         BE    GTXT2\n         MVI   0(R2),C' '\n         B     GTXT4\nGTXT3    MVC   0(1,R2),0(R1)       FILL IN RETURN AREA\n         LA    R1,1(R1)\n         BCT   R3,*+L'*+4\n         B     PASSIN\nGTXT4    LA    R2,1(R2)\n         BCT   R4,GTXT1            CHECK NOT TOO LONG\n         MVI   $RETURN,C' '        FILL IN RETURN BUFFER W/BLANKS\n         MVC   $RETURN+1(L'$RETURN-1),$RETURN       \"     \"\nAROUND  TCLEARQ INPUT              FLUSH THE TRASH\nPASSIN   XC    $LINECNT,$LINECNT   ZERO THE LINE COUNTER\n         L     R3,=V(Z3270)        COMMON \"Z3270\"\n         USING $Z3270,R3           ADDRESS OF 13A4 AND 50A1 AREA\n         MVC   $A12,$RETURN        MOVE FROM RETURN AREA IN \"IF12\"\n         LA    R4,$RETURN          ADDRESS OF RETURN\n         LA    R5,$A50             ADDRESS OF \"IF50\"\n         LA    R6,50               HOW MANY CHARS ?\nFILLIN   MVC   0(4,R5),=CL4' '     BLANK OUT\n         MVC   0(1,R5),0(R4)       MOVE CHAR\n         LA    R4,1(R4)            PUSH UP POINTERS\n         LA    R5,4(R5)\n         BCT   R6,FILLIN\n* 10) RESTORE REGS AND RETURN\nQUIT     L     R13,SAVEAREA+4      GET ORIGINAL REGISTER 13\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         EJECT\n*------- WORK AREAS (NON-RENT CODE)\n         SPACE 1\nSAVEAREA DC    9D'0'               REGISTERS SAVE AREA\nLNCNT    DC    F'0'                LINE COUNTER\nLNCNTMS  DC    F'0'                MAX # LINES/PAGE (24, 32 OR 43)\nCOUNTER  DC    F'0'                WORK COUNTER\nBUFFDISP DC    A(0)                DISPLACEMENT TO CURRENT $WORK\nINBUF    DC    XL1'0'              DUMMY BUFFER\n         SPACE 1\nCNTMSG   DC    C' PRESS ENTER TO SEE NEXT PAGE '\nUNLOCK   DC    X'1D4113'           UNLOCK KEYBOARD STRING\nINCURS   EQU   UNLOCK+L'UNLOCK-1,1\nCLRSCR   DC    X'C31140403C0000001D60114040' CLEAR SCREEN\nTPUTFLG  DC    X'03'          TPUT FLAGS (FULLSCR,WAIT,NOHOLD,NOBREAK)\n         SPACE 1\nTBL12BIT DS    0F\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE 1\nLINELEN  EQU   80                  LENGTH OF ONE LINE\nINITMSG  DC    CL(LINELEN)' K L I N G O N     V E R S I O N    1.2.0'\nCURRMSG  DC    CL(LINELEN)' TACTICAL DISPLAY IS: *CURRENT*'\nWAITUP   DC    CL(LINELEN)' TACTICAL DISPLAY IS: WAITING TO BE UPDATED'\n         SPACE 1\n         LTORG\n         EJECT\nBUFFER   CSECT\nLBUFF    EQU   (((L'CLRSCR+(LINELEN*43))+7)/8)*8\n         DS    XL(LBUFF)           BYTES CNTL + 43 LINES\nBUFFLEN  EQU   *-BUFFER            BUFFER LENGTH\n         SPACE 1\n$FSBUFF  DSECT ,                   START OF MAP FOR COMMON \"FSBUFF\"\n$PROMLEN DS    F                   (\"NPROML\") AMOUNT OF PROMPT FILLED\n$PROMPT  DS    CL80                (\"NPROMT\") BUFFER FOR PROMPT\n$RETURN  DS    CL52                (\"NREAD\") RETURN AREA READ FROM USER\nHEADLINE EQU   12                  NUMBER OF LINES IN HEADER\n$HEADER  DS    (HEADLINE*LINELEN)CL1 (\"NHEAD\") SPACE FOR HEADER AREA\nHEADLEN  EQU   *-$HEADER           LENGTH OF HEADER AREA\n$LINECNT DS    F                   (\"NCOUNT\") NUMBER OF ITEMS ON $WORK\n$WORK    DS    CL(200*80)          (\"NWORK\") WORK AREA FOR DISPLAY\n$FSBUFFL EQU   *-$PROMLEN          TOTAL LENGTH\n         SPACE 1\n$Z3270   DSECT\n$A12     DS    CL52                13A4 FORMAT (\"IF12\")\n$A50     DS    50A                 50A1 FORMAT (\"IF50\")\n         SPACE 1\n         END\n./     ADD     NAME=FSIO2\nFSR2     TITLE '--- FSIO2 - DO FULLSCREEN TPUT GRAPHICS ROUTINES ---'\nFSIO2    START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : ROUTINE FSIO2 - DO FULLSCREEN TPUT FOR GRAPHICS         *\n*                           ROUTINES                                *\n*                   PARM. = 1) WAIT TIME (IN 0.01 OF SECOND)        *\n*                           2) FULLSCREEN OPERATION FLAG :          *\n*                              + = INITIAL (FIRST)                  *\n*                              0 = CONTINUE (INTERMEDIATE)          *\n*                              - = FINAL (LAST)                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n         USING FSIO2,R12           WE GOT IT\n         ST    R13,SAVEAREA+4      NON-RENT, NO BIG DEAL HERE\n         LA    R15,SAVEAREA        SET FORWARD/BACKWORD POINTERS\n         ST    R15,8(,R13)           \" \" \"\n         LA    R13,SAVEAREA          \" \" \"\n         LM    R9,R10,0(R1)        WAIT TIME AND FLAG ADDRESSES\n         ICM   R0,B'1111',0(R9)    GET TIME VALUE\n         ST    R0,TIMESC\n         ICM   R4,B'1111',0(R10)   FLAG VALUE\n* 1) ADDRESS WORK BUFFER\n         L     R11,=V(DISPLY)      COMMON \"DISPLY\"\n         USING $DSBUFF,R11         ADDRESS IT\n* 2) OBTAIN INFO ABOUT TERMINAL (IBM3270) IT IS 24, 32 OR 43 LINES\n         L     R3,=V(TERMSZ)       COMMON \"TERMSZ\" (CHECK \"IILINE\")\n         ICM   R3,B'1111',0(R3)    DETERMINE IF DISPLAY TERMINAL\n         BZ    QUIT                IF R0=0, WE IN WRONG PLACE, OUT\n* 3) DO INITIAL CLEAR OF THE SCREEN FOR OUR DATA\n         LTR   R4,R4               FIRST TIME ?\n         BNP   SDFSW               NO\n        STFSMODE ON\n         LA    R0,L'CLRSCR         SETUP LENGTH\n         LA    R1,CLRSCR           CLEAR SCREEN\n         ICM   R1,8,TPUTFLG        SETUP TPUT FLAGS\n        TPUT   (1),(0),R           ISSUE FULLSCREEN TPUT\n* 4) DO FULLSCREEN OF OUR DATA AND \"WAIT\" IF REQUESTED\nSDFSW    MH    R3,=AL2(LINELEN)    LINES LENGTH\n         LA    R3,L'WRTSCR(,R3)\n         LR    R0,R3               SETUP LENGTH\n         LA    R1,$PREFXL-L'WRTSCR(,R11) ADDRESS OF BUFFER\n         MVC   0(L'WRTSCR,R1),WRTSCR WRITE SEQUENCE\n         OC     TIMESC,TIMESC      WAIT TIME ?\n         BZ     NOWTT              NO, NO WAIT\n         ICM   R1,8,TPUTFLH        YES, SETUP TPUT FLAGS\n        TPUT   (1),(0),R           ISSUE FULLSCREEN TPUT\n        STIMER  WAIT,,BINTVL=TIMESC AND WAIT A BIT\n         B     TSTFN\nNOWTT    ICM   R1,8,TPUTFLG        SETUP TPUT FLAGS\n        TPUT   (1),(0),R           ISSUE FULLSCREEN TPUT\n* 5) DO FINAL CLEAR OF THE SCREEN OF OUR DATA\nTSTFN    LTR   R4,R4\n         BNM   QUIT\n         LA    R0,L'CLRSCR         SETUP LENGTH\n         LA    R1,CLRSCR           CLEAR SCREEN\n         ICM   R1,8,TPUTFLG        SETUP TPUT FLAGS\n        TPUT   (1),(0),R           ISSUE FULLSCREEN TPUT\n        STFSMODE OFF\n        STLINENO LINE=1\n        TCLEARQ INPUT              FLUSH THE TRASH\n* 6) RESTORE REGS AND RETURN\nQUIT     L     R13,SAVEAREA+4      GET ORIGINAL REGISTER 13\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         EJECT\n*------- WORK AREAS (NON-RENT CODE)\n         SPACE 1\nSAVEAREA DC    9D'0'               REGISTERS SAVE AREA\nTIMESC   DC    F'0'\nCLRSCR   DC    X'27F5401140401D6013' CLEAR SCREEN\nWRTSCR   DC    X'27F1401140401D6013114040' WRITE SCREEN\nTPUTFLG  DC    X'03'          TPUT FLAGS (FULLSCR,WAIT,NOHOLD,NOBREAK)\nTPUTFLH  DC    X'0B'          TPUT FLAGS (FULLSCR,WAIT,HOLD,NOBREAK)\n         SPACE 1\n         LTORG\n         SPACE 1\n$DSBUFF  DSECT                     START OF MAP FOR DSBUFF DSECT\n$PREFIX  DS    4F                  ROOM FOR CLEAR SEQUENCE (\"IDPAD\")\n$PREFXL  EQU   *-$PREFIX\nLINELEN  EQU   80                  LENGTH OF ONE LINE\n$AREA    DS    (43*LINELEN)CL1     TPUT WORK AREA\n         END\n./     ADD     NAME=GAINIT\nGAIR     TITLE '--- GAINIT - SET VARIABLES FOR GRAPHICS ROUTINE ---'\nGAINIT   START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : THIS ROUTINE INITS THE GAME VARIABLES FOR GRAPHICS AND  *\n*           IF 3270/IBM TSO SUPPORTED                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         USING GAINIT,R12\n         ST    R13,SAVEAREA+4      NON-RENT, NO BIG DEAL HERE\n         LA    R15,SAVEAREA        SET FORWARD/BACKWORD POINTERS\n         ST    R15,8(,R13)           \" \" \"\n         LA    R13,SAVEAREA          \" \" \"\n*------- DETERMINE ENVIRONMENT\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO)\n         L     R1,ATSO             CHECK TSO RUNNING\n         TM    0(R1),X'80'\n         BZ    NOTTSO              NOT TSO\n         XR    R1,R1\n         L     R2,ATIOT            CHECK SEQ. LINE MODE REQUESTED\n         USING TIODSECT,R2\nSEARCH   CLC   TIOELNGH(4),=F'0'\n         BE    NSLMRQ\n         CLC   TIOEDDNM,=CL8'FT05F001'\n         BE    YSLMRQ\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SEARCH\n         DROP  R2\nNOTTSO  WTO    '=> SORRY, ONLY TSO-FOREGROUND RUN IS ALLOWED',         X\n               ROUTCDE=11,DESC=7\n         B     RSZALL\nYSLMRQ   XR    R6,R6               SET IBMTSO = 0\n         LR    R7,R6               AND IGRAFC = 0\n         B     FTTSS\nNSLMRQ   LA    R6,1                SET IBMTSO = 1\n         LR    R7,R6               AND IGRAFC = 1\n*------- FIND TSO TERMINAL SCREEN SIZE\n*        OBTAIN INFO ABOUT TERMINAL (IBM3270/ 24, 32 OR 43 LINES)\nFTTSS   GTSIZE ,                   OBTAIN IBM TERMINAL INFO\n         LR    R5,R1               GET LINE LENGTH\n         CL    R5,=F'80'           EXACTLY 80 COLUMNS ?\n         BE    OKCOLS              OK\n         BL    LSHORT              LOW, UNACCEPTABLE\n         LTR   R6,R6               HIGH, HAS REQUESTED SEQ. LINE MODE ?\n         BNZ   LHIGH               NO\n         XR    R4,R4               YES, SET AS SEQUENTIAL LINE MODE\n         B     SETVAR\nLHIGH    LA    R1,MSG80HGH         LET USER KNOW\n         LA    R0,LEN80HGH         WE CAN'T HANDLE THEM\n        TPUT   (1),(0),R           NON-FS TPUT\n         B     REQMSG\nLSHORT   LA    R1,MSG80LOW         LET USER KNOW\n         LA    R0,LEN80LOW         WE CAN'T HANDLE THEM\n        TPUT   (1),(0),R           NON-FS TPUT\n         B     RSZALL\nOKCOLS   LTR   R4,R0               DETERMINE IF DISPLAY TERMINAL\n         BZ    NOTDST              IF R0=0, WE ARE WRONG PLACE, OUT\n         CL    R4,=F'24'           EXACTLY 24 LINES ?\n         BE    STDSCR              OK\n         CL    R4,=F'32'           EXACTLY 32 LINES ?\n         BE    STDSCR              OK\n         CL    R4,=F'43'           EXACTLY 43 LINES ?\n         BNE   NOTSTD              NO, NOT STANDARD\nSTDSCR   LTR   R6,R6               HAS REQUESTED SEQ. LINE MODE ?\n         BNZ   SETVAR              NO, OK\n         LA    R6,1                YES, BUT SCREEN STANDARD, SO USE IT\n         B     SETVAR\nNOTSTD   LA    R1,MSG24#48         OTHERWISE LET USER KNOW\n         LA    R0,LEN24#48         WE CAN'T HANDLE THEM\n        TPUT   (1),(0),R           NON-FS TPUT\n         LTR   R6,R6               HAS REQUESTED SEQ. LINE MODE ?\n         BNZ   REQMSG              NO\n         XR    R4,R4               YES, SET AS SEQUENTIAL LINE MODE\n         B     SETVAR\nNOTDST   LTR   R6,R6               HAS REQUESTED SEQ. LINE MODE ?\n         BZ    SETVAR              YES, OK\n         LA    R1,MSGNOTDT         NO, INFORM USER\n         LA    R0,LENNOTDT\n        TPUT   (1),(0),R           NON-FS TPUT\nREQMSG   LA    R1,MSGSLMRQ         INFORM USER\n         LA    R0,LENSLMRQ\n        TPUT   (1),(0),R           NON-FS TPUT\nRSZALL   XR    R4,R4               RESET ALL\n         LR    R5,R4\n         LR    R6,R4\n         LR    R7,R4\n         BCTR  R4,0                WHEN GO BACK, ASK TO EXIT GAME\n         SPACE 1\n* USE OF THE VARIABLES IN COMMON \"INITVR\" :\n* =========================================\n*        FLAG IBMTSO : 0 = SEQUENTIAL LINE MODE,\n*                      1 = FULL 3270 TSO SUPPORT.\n*        FLAG IGRAFC : 0 = GRAPHICS BORE ME, OR MY 3270 LOOKALIKES ARE\n*                          SOOO ... SLOW, GRAPHICS DON'T LOOK GOOD,\n*                      1 = FULL 3270 GRAPHICS USE.\n*        IF IBMTSO IS SET TO ZERO, IGRAFC IS IGNORED, OR\n*        IF IBMTSO IS SET TO ONE, IT WILL ASSUME YOU ARE 3278\n*             MODEL 2 OR MODEL 4, OR SOMETHING THAT RUNS LIKE IT.\n*        IF IGRAFC FLAG IS SET TO ZERO, IT SUPPRESS ALL GRAPHICS\n*             DISPLAYS (WHICH YOU MAY WANT TO DO IF IT DOES NOT LOOK\n*             PRETTY ...).\n*        THE IGRAFC FLAG CAN BE SET TO ZERO, BY ENTERING THE \"EXT\"\n*             COMMAND (FOR \"EXTERNAL VIEW\") ANYTIME YOU ARE PROMPTED\n*             WITH A \"COMMAND - \" PROMPT.\n*        NOTE : IF IGRAFC FLAG IS SET TO ZERO, THE PLAYER CANNOT TURN\n*               IT ON (SET TO ONE) ANYMORE.\n         SPACE 1\nSETVAR   L     R3,=V(TERMSZ)       COMMON \"TERMSZ\"\n         STM   R4,R5,0(R3)         SET VARIABLES \"IILINE\" AND \"IILLEN\"\n         L     R3,=V(INITVR)       COMMON \"INITVR\"\n         STM   R6,R7,0(R3)         SET VARIABLES \"IBMTSO\" AND \"IGRAFC\"\n         SPACE 1\n         LTR   R4,R4               EXIT FORCED ?\n         BNM   QUIT                NO\n         LA    R1,MSGTERM          YES, LET USER READ MESSAGES\n         LA    R0,LENTERM\n        TPUT   (1),(0),R           NON-FS TPUT\n        TGET   INBUF,0             DUMMY TGET, JUST FOR WAIT\nQUIT     L     R13,SAVEAREA+4      GET ORIGINAL REGISTER 13\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         SPACE 1\nSAVEAREA DC    9D'0'\nATIOT    DC    A(*-*)\nATSO     DC    A(*-*)\nINBUF    DC    XL1'0'              DUMMY BUFFER\nMSG80HGH DC    C'=> THIS TERMINAL HAS A LINE LENGTH GREATER THAN 80'\nLEN80HGH EQU   *-MSG80HGH          LENGTH OF MSG\nMSG80LOW DC    C'=> SORRY, CAN''T RUN WITH A LINE LENGTH LESS THAN 80'\nLEN80LOW EQU   *-MSG80LOW          LENGTH OF MSG\nMSG24#48 DC    C'=> YOU ARE RUNNING ON A NON 24, 32 OR 43 LINES 3270'\nLEN24#48 EQU   *-MSG24#48          LENGTH OF MSG\nMSGNOTDT DC    C'=> YOU ARE RUNNING ON A NON DISPLAY TERMINAL'\nLENNOTDT EQU   *-MSGNOTDT          LENGTH OF MSG\nMSGSLMRQ DC    C'=> SO, YOU MAY ONLY RUN UNDER SEQUENTIAL LINE MODE'\nLENSLMRQ EQU   *-MSGSLMRQ          LENGTH OF MSG\nMSGTERM  DC    C'=> HIT ENTER TO TERMINATE PROGRAM'\nLENTERM  EQU   *-MSGTERM           LENGTH OF MSG\n         SPACE 1\n         LTORG\n         SPACE 1\n         PRINT NOGEN\nTIODSECT DSECT ,\n        IEFTIOT1 ,\n         SPACE 1\n         END\n./     ADD     NAME=GRAFIC\nC*********************************************************************\n      SUBROUTINE GRAFIC\nC PURPOSE : HANDLE THE DISPLAY FOR \"MOVING\" IMAGES ON THE SCREEN\nC*********************************************************************\n      COMMON /WORKQ/ IGCNT, INQUE(10)\n      COMMON /DISPLY/ IDPAD(4), IGOUT(20,43)\n      COMMON /TERMSZ/ IILINE, IILLEN\n      COMMON /GRAPH/ IOK\n      DIMENSION ITIMER(50)\n      DIMENSION INCORE (20,43,50)\n      CHARACTER *4 CZIEOF , CZNVAL\n      EQUIVALENCE (CZIEOF,IEOF) , (CZNVAL,INVAL)\n      DATA CZIEOF /'*EOF'/\n      DATA CZNVAL /'    '/\n      CALL DBUGIN ('GRAFIC ENTERED',IW(14),0)\n      IF (IOK.EQ.0) IGCNT = 0\n      IF (IGCNT.EQ.0.OR.IOK.NE.1) GO TO 200\n      I = 1\n      IF (INVAL.EQ.INQUE(I)) GO TO 100\n      K = 0\n10    IF (I.GT.IGCNT) GO TO 100\n      REWIND 97\n20    READ (97,10000,END=60) NTYPE, INLNEC, ITIME2\n      IF (NTYPE.EQ.IEOF) GO TO 60\n      IF (NTYPE.NE.INQUE(I)) GO TO 40\n      IF (IILINE.NE.INLNEC) GO TO 40\n      INVAL = NTYPE\n      K = K + 1\n      IF (K.GT.50) K = 50\n      ITIMER(K) = ITIME2\n      DO 30 J=1, INLNEC\n          READ (97,10001,END=60) (INCORE(M,J,K),M=1,20)\n30    CONTINUE\n      GO TO 20\n40    DO 50 J=1, INLNEC\n          READ (97,10002,END=60) IDUMMY\n50    CONTINUE\n      GO TO 20\n60    I = I + 1\n      GO TO 10\n100   DO 120 J=1, K\n          DO 110 M=1, IILINE\n              DO 110 L=1,20\n                  IGOUT (L,M) = INCORE (L,M,J)\n110       CONTINUE\n          IFLAG = 0\n          IF (J.EQ.1) IFLAG = 1\n          IF (J.EQ.K) IFLAG = -1\n          ITIME2 = ITIMER(J)\n          CALL FSIO2 (ITIME2,IFLAG)\n120   CONTINUE\n      IGCNT = 0\n200   CALL DBUGIN ('GRAFIC EXITED',IW(13),0)\n      RETURN\n10000 FORMAT (A4,I2,I6)\n10001 FORMAT (20A4)\n10002 FORMAT (A4)\n      END\n./     ADD     NAME=HELP\nC*********************************************************************\n      SUBROUTINE HELP\nC PURPOSE : DISPLAY THE HELP MENU AND CALL THE HELP ROUTINE\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8),INPUT(50),IPAD3\n      COMMON /CPU/ IBMT\n      COMMON /PHASE/ INIT\n      DIMENSION ICATAL(40,3)\n      DIMENSION ILINE(15)\n      DIMENSION ISTWRK(3)\n      DIMENSION IST001(3)\n      DIMENSION IST002(3)\n      DIMENSION IST003(3)\n      DIMENSION IST004(3)\n      DIMENSION IST005(3)\n      DIMENSION IST006(3)\n      DIMENSION IST007(3)\n      DIMENSION IST008(3)\n      DIMENSION IST009(3)\n      DIMENSION IST010(3)\n      DIMENSION IST011(3)\n      DIMENSION IST012(3)\n      DIMENSION IST013(3)\n      DIMENSION IST014(3)\n      DIMENSION IST015(3)\n      DIMENSION IST016(3)\n      DIMENSION IST017(3)\n      DIMENSION IST018(3)\n      DIMENSION IST019(3)\n      DIMENSION IST020(3)\n      DIMENSION IST021(3)\n      DIMENSION IST022(3)\n      DIMENSION IST023(3)\n      DIMENSION IST024(3)\n      DIMENSION IST025(3)\n      DIMENSION IST026(3)\n      DIMENSION IST027(3)\n      DIMENSION IST028(3)\n      DIMENSION IST029(3)\n      DIMENSION IST030(3)\n      CHARACTER *4 CZT001(3),CZT002(3),CZT003(3),CZT004(3),CZT005(3),\n     *CZT006(3),CZT007(3),CZT008(3),CZT009(3),CZT010(3),CZT011(3),\n     *CZT012(3),CZT013(3),CZT014(3),CZT015(3),CZT016(3),CZT017(3),\n     *CZT018(3),CZT019(3),CZT020(3),CZT021(3),CZT022(3),CZT023(3),\n     *CZT024(3),CZT025(3),CZT026(3),CZT027(3),CZT028(3),CZT029(3),\n     *CZT030(3)\n      EQUIVALENCE (CZT001,IST001),(CZT002,IST002),(CZT003,IST003),\n     *(CZT004,IST004),(CZT005,IST005),(CZT006,IST006),(CZT007,IST007),\n     *(CZT008,IST008),(CZT009,IST009),(CZT010,IST010),(CZT011,IST011),\n     *(CZT012,IST012),(CZT013,IST013),(CZT014,IST014),(CZT015,IST015),\n     *(CZT016,IST016),(CZT017,IST017),(CZT018,IST018),(CZT019,IST019),\n     *(CZT020,IST020),(CZT021,IST021),(CZT022,IST022),(CZT023,IST023),\n     *(CZT024,IST024),(CZT025,IST025),(CZT026,IST026),(CZT027,IST027),\n     *(CZT028,IST028),(CZT029,IST029),(CZT030,IST030)\n      DATA CZT001 /'A.P.','D.  ','    '/\n      DATA CZT002 /'ABAN','DON ','    '/\n      DATA CZT003 /'BATT','ERY ','    '/\n      DATA CZT004 /'BUGS','    ','    '/\n      DATA CZT005 /'CHAR','T   ','    '/\n      DATA CZT006 /'COMP','UTE ','    '/\n      DATA CZT007 /'DAMA','GE  ','    '/\n      DATA CZT008 /'DEST','RUCT','    '/\n      DATA CZT009 /'DISR','UPTO','R   '/\n      DATA CZT010 /'FREE','ZE  ','    '/\n      DATA CZT011 /'GRAP','HICS','    '/\n      DATA CZT012 /'HINT','S   ','    '/\n      DATA CZT013 /'HELP','    ','    '/\n      DATA CZT014 /'IMPU','LSE ','    '/\n      DATA CZT015 /'INTR','O   ','    '/\n      DATA CZT016 /'LRSC','AN  ','    '/\n      DATA CZT017 /'MOVE','    ','    '/\n      DATA CZT018 /'NEWS','    ','    '/\n      DATA CZT019 /'PHOT','ON  ','    '/\n      DATA CZT020 /'REST','    ','    '/\n      DATA CZT021 /'SENS','OR  ','    '/\n      DATA CZT022 /'SHIE','LDS ','    '/\n      DATA CZT023 /'SRSC','AN  ','    '/\n      DATA CZT024 /'FS32','70  ','    '/\n      DATA CZT025 /'STAT','US  ','    '/\n      DATA CZT026 /'TERM','INAT','E   '/\n      DATA CZT027 /'TRAC','TOR ','    '/\n      DATA CZT028 /'WARP','    ','    '/\n      DATA CZT029 /'    ','    ','    '/\n      DATA CZT030 /'    ','    ','    '/\n      CHARACTER *4 CZATAL(40,3) , CZHELP , CZH1 , CZH2 , CZE1 ,\n     *             CZL1 , CZLIST , CZEND , CZBLK\n      EQUIVALENCE (CZATAL,ICATAL) , (CZHELP,IHELP) , (CZH1,IH1)     ,\n     *            (CZH2,IH2)      , (CZE1,IE1)     , (CZL1,IL1)     ,\n     *            (CZLIST,ILIST)  , (CZEND,IEND)   , (CZBLK,IBLK)\n      DATA CZATAL / 120 * ' ' /\n      DATA CZHELP /'*HEL'/ , CZLIST /'*LIS'/ , CZEND /'*END'/\n      DATA CZH1   /'*H  '/ , CZH2   /'*   '/ , CZE1  /'*E  '/\n      DATA CZL1   /'*L  '/ , CZBLK  /' '/\n      CALL DBUGIN ('HELP ENTERED',IW(12),0)\n      IHOLDI = INIT\n      INIT = 1\n      ICATAL(1,1)  = IST001(1)\n      ICATAL(1,2)  = IST001(2)\n      ICATAL(1,3)  = IST001(3)\n      ICATAL(2,1)  = IST002(1)\n      ICATAL(2,2)  = IST002(2)\n      ICATAL(2,3)  = IST002(3)\n      ICATAL(3,1)  = IST003(1)\n      ICATAL(3,2)  = IST003(2)\n      ICATAL(3,3)  = IST003(3)\n      ICATAL(4,1)  = IST004(1)\n      ICATAL(4,2)  = IST004(2)\n      ICATAL(4,3)  = IST004(3)\n      ICATAL(5,1)  = IST005(1)\n      ICATAL(5,2)  = IST005(2)\n      ICATAL(5,3)  = IST005(3)\n      ICATAL(6,1)  = IST006(1)\n      ICATAL(6,2)  = IST006(2)\n      ICATAL(6,3)  = IST006(3)\n      ICATAL(7,1)  = IST007(1)\n      ICATAL(7,2)  = IST007(2)\n      ICATAL(7,3)  = IST007(3)\n      ICATAL(8,1)  = IST008(1)\n      ICATAL(8,2)  = IST008(2)\n      ICATAL(8,3)  = IST008(3)\n      ICATAL(9,1)  = IST009(1)\n      ICATAL(9,2)  = IST009(2)\n      ICATAL(9,3)  = IST009(3)\n      ICATAL(10,1) = IST010(1)\n      ICATAL(10,2) = IST010(2)\n      ICATAL(10,3) = IST010(3)\n      ICATAL(11,1) = IST011(1)\n      ICATAL(11,2) = IST011(2)\n      ICATAL(11,3) = IST011(3)\n      ICATAL(12,1) = IST012(1)\n      ICATAL(12,2) = IST012(2)\n      ICATAL(12,3) = IST012(3)\n      ICATAL(13,1) = IST013(1)\n      ICATAL(13,2) = IST013(2)\n      ICATAL(13,3) = IST013(3)\n      ICATAL(14,1) = IST014(1)\n      ICATAL(14,2) = IST014(2)\n      ICATAL(14,3) = IST014(3)\n      ICATAL(15,1) = IST015(1)\n      ICATAL(15,2) = IST015(2)\n      ICATAL(15,3) = IST015(3)\n      ICATAL(16,1) = IST016(1)\n      ICATAL(16,2) = IST016(2)\n      ICATAL(16,3) = IST016(3)\n      ICATAL(17,1) = IST017(1)\n      ICATAL(17,2) = IST017(2)\n      ICATAL(17,3) = IST017(3)\n      ICATAL(18,1) = IST018(1)\n      ICATAL(18,2) = IST018(2)\n      ICATAL(18,3) = IST018(3)\n      ICATAL(19,1) = IST019(1)\n      ICATAL(19,2) = IST019(2)\n      ICATAL(19,3) = IST019(3)\n      ICATAL(20,1) = IST020(1)\n      ICATAL(20,2) = IST020(2)\n      ICATAL(20,3) = IST020(3)\n      ICATAL(21,1) = IST021(1)\n      ICATAL(21,2) = IST021(2)\n      ICATAL(21,3) = IST021(3)\n      ICATAL(22,1) = IST022(1)\n      ICATAL(22,2) = IST022(2)\n      ICATAL(22,3) = IST022(3)\n      ICATAL(23,1) = IST023(1)\n      ICATAL(23,2) = IST023(2)\n      ICATAL(23,3) = IST023(3)\n      ICATAL(24,1) = IST024(1)\n      ICATAL(24,2) = IST024(2)\n      ICATAL(24,3) = IST024(3)\n      ICATAL(25,1) = IST025(1)\n      ICATAL(25,2) = IST025(2)\n      ICATAL(25,3) = IST025(3)\n      ICATAL(26,1) = IST026(1)\n      ICATAL(26,2) = IST026(2)\n      ICATAL(26,3) = IST026(3)\n      ICATAL(27,1) = IST027(1)\n      ICATAL(27,2) = IST027(2)\n      ICATAL(27,3) = IST027(3)\n      ICATAL(28,1) = IST028(1)\n      ICATAL(28,2) = IST028(2)\n      ICATAL(28,3) = IST028(3)\n      ICATAL(29,1) = IST029(1)\n      ICATAL(29,2) = IST029(2)\n      ICATAL(29,3) = IST029(3)\n      ICATAL(30,1) = IST030(1)\n      ICATAL(30,2) = IST030(2)\n      ICATAL(30,3) = IST030(3)\n      NUMCAT = 30\n      IF (IBMT.EQ.1) GO TO 110\n10    CALL LINEF\n      CALL READIN ('ENTER COMMAND NAME OR *HELP',IW(27),27,0,EOFF)\n      IF (EOFF.GT..1) GO TO 10\n      I = INPUT(1)\n      IF (I.EQ.IBLK) GO TO 10\n      IF (I.EQ.IEND) GO TO 300\n      IF (I.EQ.IE1) GO TO 300\n      IF (I.EQ.IHELP) GO TO 20\n      IF (I.EQ.IH1) GO TO 20\n      IF (I.NE.IH2) GO TO 100\n20    CALL LINEF\n      CALL PRMSG ('*HELP SUPPLIES YOU WITH THIS LISTING.',IW(37))\n      CALL PRMSG\n     *     ('*LIST GIVES YOU A COMMAND LIST TO CHOOSE FROM ',IW(45))\n      CALL PRMSG ('*END RETURNS YOU TO THE GAME IN PROGRESS ',IW(40))\n      CALL LINEF\n      GO TO 10\n100   IF (I.EQ.ILIST) GO TO 110\n      IF (I.NE.IL1) GO TO 200\n110   CALL LINEF\n      CALL PRMSG ('YOU MAY SELECT FROM THE FOLLOWING: ',IW(34))\n120   CALL LINEF\n      DO 130 N = 1, NUMCAT, 5\n           ILINE(1) = ICATAL(N,1)\n           ILINE(2) = ICATAL(N,2)\n           ILINE(3) = ICATAL(N,3)\n           ILINE(4) = ICATAL(N+1,1)\n           ILINE(5) = ICATAL(N+1,2)\n           ILINE(6) = ICATAL(N+1,3)\n           ILINE(7) = ICATAL(N+2,1)\n           ILINE(8) = ICATAL(N+2,2)\n           ILINE(9) = ICATAL(N+2,3)\n           ILINE(10) = ICATAL(N+3,1)\n           ILINE(11) = ICATAL(N+3,2)\n           ILINE(12) = ICATAL(N+3,3)\n           ILINE(13) = ICATAL(N+4,1)\n           ILINE(14) = ICATAL(N+4,2)\n           ILINE(15) = ICATAL(N+4,3)\n           CALL PRMSG (ILINE,IW(60))\n130   CONTINUE\n      CALL LINEF\n      GO TO 10\n200   DO 210 N = 1, 28\n           IF (I.NE.ICATAL(N,1)) GO TO 210\n           ILINE(1) = ICATAL(N,1)\n           ILINE(2) = ICATAL(N,2)\n           ILINE(3) = ICATAL(N,3)\n           GO TO 220\n210   CONTINUE\n      CALL PRMSG ('INVALID HELP CATEGORY, THE LIST TO CHOOSE FROM IS  ',\n     *    IW(49))\n      GO TO 120\n220   CALL HELPRT (ILINE,IW(12))\n      CALL LINEF\n      IF (IBMT.EQ.1) GO TO 110\n      GO TO 10\n300   INIT = IHOLDI\n      CALL DBUGIN ('HELP EXITED',IW(11),0)\n      RETURN\n      END\n./     ADD     NAME=HELPRT\nC*********************************************************************\n      SUBROUTINE HELPRT (ITYPE,ILEN)\nC PURPOSE : REWIND THE HELP FILE, AND READ THE HELP ENTRIES FOR\nC           REQUESTED CATAGORY\nC*********************************************************************\n      DIMENSION ITEXT(20),ITYPE(ILEN)\n      CALL DBUGIN ('HELPRT ENTERED',IW(14),0)\n      REWIND 26\n      IFLAG = 0\n10    IF (IFLAG.EQ.-1) GO TO 40\n      READ (26,10000,END=40) ITEXT\n      IF   (ITYPE(1).NE.ITEXT(1).OR.ITYPE(2).NE.ITEXT(2).OR.\n     *      ITYPE(3).NE.ITEXT(3)) GO TO 20\n      CALL PRMSG (ITEXT(4),IW(17*4))\n      FLAG = 1\n      GO TO 10\n20    IF (IFLAG.EQ.1) IFLAG = -1\n      GO TO 10\n40    CALL DBUGIN ('HELPRT EXITED',IW(13),0)\n      RETURN\n10000 FORMAT (20A4)\n      END\n./     ADD     NAME=ICROG\nC*********************************************************************\n      FUNCTION ICROG (J)\nC PURPOSE : DETERMINE IF THE GIVEN QUADRANT IS AT BATTLE STATIONS\nC*********************************************************************\n      CHARACTER *4 CZGRE , CZRED\n      EQUIVALENCE (CZGRE,IZGRE) , (CZRED,IZRED)\n      DATA CZGRE / 'GREE'/ ,CZRED / 'RED'/\n      CALL DBUGIN ('ICROG ENTERED',IW(13),0)\n      I = MOD(J,1000)\n      II = IZGRE\n      IF (I.GT.9) II = IZRED\n      ICROG = II\n      CALL DBUGCH ('ICROG VALUE ',IW(12),II,IW(4))\n      CALL DBUGIN ('ICROG EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=IDENT\nC*********************************************************************\n      SUBROUTINE IDENT (INPUT,IERROR,IOUT)\nC PURPOSE : WITH A GIVEN CHARACTER STRING, SEE WHAT NUMBER IT IS\nC (JUL-1-87 REMOVED CALLS TO DEBUG ROUTINE DUE TO VOLUME OF OUTPUT)\nC*********************************************************************\n      DIMENSION IKEY(10)\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      EQUIVALENCE (IKEY(1),ICRZER)\n      IERROR = 0\n      DO 10 N = 1,10\n           IF (INPUT.EQ.IKEY(N)) GO TO 20\n10    CONTINUE\n      IERROR = 1\n      GO TO 30\n20    IOUT = N-1\n30    RETURN\n      END\n./     ADD     NAME=IFEDST\nC*********************************************************************\n      FUNCTION IFEDST (DUMMY)\nC PURPOSE : ASSIGN A RANDOM STRENGTH TO A GIVEN FEDERATION STARSHIP\nC*********************************************************************\n      CALL DBUGIN ('IFEDST ENTERED',IW(14),0)\n      XXX = RAND(1.0)\n      XOUT = 7500.0\n      IF (XXX.GT..8) XOUT = XOUT-RAND(500.0)-2400.0\n      IF (XXX.LT..18) XOUT = XOUT+RAND(500.0)+900.0\n      IFEDST = IFIX(XOUT)\n      CALL DBUGIN ('IFEDST EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=IFWIN\nC*********************************************************************\n      SUBROUTINE IFWIN (IWIN)\nC PURPOSE : CHECK IF ALL STARBASES HAVE BEEN KILLED\nC*********************************************************************\nC     IWIN\nC     ----\nC     0 - NOT ALL DEAD YET\nC     1 - ALL DEAD WE HAVE A WINNER (ALSO SET IDIE = 0)\nC     ----------------------------------------------------------------\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      CALL DBUGIN ('IFWIN ENTERED',IW(13),0)\n      IWIN = 0\n      IF (ISB.GT.0) GO TO 100\n      CALL BEEP2\n      CALL PRMSG ('YOU HAVE DONE IT!, YOU HAVE SMASHED THE FEDERATION',\n     *     IW(50))\n      CALL PRMSG (\n     *     'FORCES TO THEIR KNEES! THE RICHES OF CONQUEST ARE YOURS',\n     *     IW(55))\n      CALL LINEF\n      IDIE = 0\n      CALL PROMOT (ILEV)\n      IWIN = 1\n100   CALL DBUGIN ('IFWIN EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=INITCH\nC*********************************************************************\n      SUBROUTINE INITCH\nC PURPOSE : INIT THE ICHART\nC           AND OTHER 8 X 8 ARRAYS TO PROPER STARTING VALUES\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      CALL DBUGIN ('INITCH ENTERED',IW(14),0)\n      DO 20 I = 1, 8\n           DO 10 J = 1, 8\n                ICHART(I,J) = RAND(10.0)\n                IKY(I,J) = 0\n                IPLNET(I,J) = 0\n10         CONTINUE\n20    CONTINUE\n      CALL DBUGIN ('INITCH EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=INITCT\nC*********************************************************************\n      SUBROUTINE INITCT (IZNOHT,IZRED,IZDOWN)\nC PURPOSE : INITIALIZE COUNTERS FOR GAME\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8), INPUT(50),IPAD3\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      CALL DBUGIN ('INITCT ENTERED',IW(14),0)\n      IPOF = 0\n      ISSAVE = 0\n      IHIT = IZNOHT\n      IAPDEV = 1\n      ET = 0.0\n      ICMC = 0\n      IPLC = 0\n      ISTC = 0\n      ISBC = 0\n      IFSC = 0\n      IKCC = 0\n      BATTER = 750.0\n      IF (ILEV.EQ.1) GO TO 70\n      IF (ILEV.EQ.2) GO TO 80\n      IF (ILEV.EQ.3) GO TO 90\nC     --- COMMENT LABEL 70    IS BRANCHED TO FOR \"GOOD\" GAME ---\n70    ISB = RAND(2.0)+5.0\n      IFS = RAND(3.0)+4.0\n      IKC = RAND(3.0)+3.0\n      GO TO 100\nC     --- COMMENT LABEL 80    IS FOR \"EXPERT\" GAME ---\n80    ISB = RAND(2.0)+10.0\n      IFS = RAND(2.0)+12.0\n      IKC = RAND(2.0)+6.0\n      GO TO 100\nC     --->COMMENT LABEL 90    IS FOR \"EMERITUS\" GAME ---\n90    ISB = 11\n      IFS = 13\n      IKC = 7\nC     --- PLACE STARBASES ---\n100   CALL PLACE (ISB,10,9)\nC     --- PLACE STARSHIPS ---\n      IF (ILEV.NE.3) GO TO 110\n      CALL EMPLAC (IFS)\n      GO TO 120\n110   CALL PLACE (IFS,100,99)\nC     --- PLACE COMMANDERS ---\n120   CALL PLACE (IKC,1000,9)\nC     --- PLACE PLANETS ---\n      IPR = RAND(12.0)+4.0\n      DO 150 N = 1, IPR\n130        I = RAND(8.0)+1.0\n           J = RAND(8.0)+1.0\n           IF (IPLNET(I,J).NE.0) GO TO 130\n           IF (RAND(1.0).LT.0.40) GO TO 140\n           IPLNET(I,J) = RAND(10000.0)\n140        IPLNET(I,J) = ((IPLNET(I,J)*10)+1)\n           IF (RAND(1.0).LT.0.52) IPLNET(I,J) = IPLNET(I,J)+100000\n150   CONTINUE\nC     --- PLACE SUPER-COMMANDER (US) ---\n160   ISCPX1 = RAND(8.0)+1.0\n      ISCPY1 = RAND(8.0)+1.0\n      IF (ISCPX1.NE.1.AND.ISCPX1.NE.8.AND.ISCPY1.NE.1.AND.ISCPY1.NE.\n     *     8.OR.ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZRED) GO TO 160\n      ISCPX2 = RAND(10.0)+1.0\n      ISCPY2 = RAND(10.0)+1.0\nC     --- INIT MISC VARIABLES, TORPEDO COUNT, STARDATE, GIVEN TIME,\nC                              ENERGY, SHIELD STATUS, WARP FACTOR,\nC                              SHIELD ENERGY\n      ITORCT = 150\n      CSDATE = 3500.0 + FLOAT(IFIX(RAND(10.0))*100)\n      TGIVEN = CSDATE + 7.0\n      ENERGY = 6000.0\n      ISHUPD = IZDOWN\n      WFACT  = 10.0\n      ISHENG = 12500\n      CALL DBUGIN ('INITCT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=INITDM\nC*********************************************************************\n      SUBROUTINE INITDM\nC PURPOSE : INIT DAMAGE\nC           CONTROLS TO ALL ZEROES (ALL FIXED)\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      CALL DBUGIN ('INITDM ENTERED',IW(14),0)\n      XCDC  = 0.00\n      XSRDC = 0.00\n      XIEDC = 0.00\n      XLRDC = 0.00\n      XWEDC = 0.00\n      XDSDC = 0.00\n      XSSDC = 0.00\n      XPTDC = 0.00\n      CALL DBUGIN ('INITDM EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=INITGR\nC*********************************************************************\n      SUBROUTINE INITGR\nC PURPOSE : INIT GRAFICS VARIABLES AND SETUP WORK FILE 97\nC*********************************************************************\n      COMMON /WORKQ/ IGCNT, INQUE(10)\n      COMMON /GRAPH/ IOK\n      DIMENSION I(20)\n      IGCNT = 0\n      REWIND 25\n      REWIND 97\n10    READ (25,10000,END=100) I\n      WRITE (97,10000) I\n      GO TO 10\n100   CALL ADDQUE ('INTR')\n      RETURN\n10000 FORMAT (20A4)\n      END\n./     ADD     NAME=INITKL\nC*********************************************************************\nC PURPOSE : PROGRAM TO INITAILIZE FILE27 (FREEZE FILE) FOR KLINGON\nC*********************************************************************\n      INTEGER I(1000)\n      DATA I/1000*0/\n      REWIND 27\n      WRITE (27) I\n      ENDFILE 27\n      REWIND 27\n      STOP\n      END\n./     ADD     NAME=INSFOR\nINSF     TITLE '--- INSFOR - INTEGER SIZE SET ROUTINE ---'\nINSFOR   START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : THIS ROUTINE SETS THE EDIT SIZE FOR A GIVEN INTEGER     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15\n         USING INSFOR,R12\n         LM    R1,R2,0(R1)         GET PARM ADDRESSES\n         L     R0,0(R1)            GET INTEGER VALUE\n         LTR   R0,R0               GET ABSOLUTE VALUE\n         BNM   *+L'*+18\n         CL    R0,=F'-1'\n         BNE   *+L'*+8\n         LA    R0,1\n         B     *+L'*+2\n         LPR   R0,R0\n         LA    R1,2\n         LM    R3,R5,=A(SVLCP,L'SVLCP,EVLCP)\n         CL    R0,0(R3)\n         BL    *+L'*+8\n         LA    R1,1(R1)\n         BXLE  R3,R4,*-12\n         CVD   R1,WORKD\n         MVC   WORKD(5),=XL5'4020212040'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         CLI   WORKD,C' '\n         BNE   *+L'*+10\n         MVC   WORKD(4),WORKD+1\n         B     *-14\n         MVC   0(4,R2),WORKD       STORE IT BACK\n         MVC   TRCE+10(4),WORKD\n        WTL    MF=(E,TRCE)\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         SPACE 1\nTRCE    WTL    ' ===> **** <- ',MF=L\n         SPACE 1\nWORKD    DC    D'0'\nSVLCP    DC    A(10)\n         DC    A(100)\n         DC    A(1000)\n         DC    A(10000)\n         DC    A(100000)\n         DC    A(1000000)\n         DC    A(10000000)\n         DC    A(100000000)\nEVLCP    DC    A(1000000000)\n         SPACE 1\n        LTORG\n         SPACE 1\n         END\n./     ADD     NAME=INTERC\nC*********************************************************************\n      SUBROUTINE INTERC (IIX,IIY,IRTN)\nC PURPOSE : CHECK TO SEE IF THE PATH BETWEEN THE CURRENT SUPER\nC           COMMANDER AND IIX, AND IIY (QUADRANT POSITION) IS CLEAR\nC           IRTN IS \"CLEA\" IF CLEAR, OR THE CHARACTER REPRESENTAION\nC           OF WHAT IS IN THE WAY OTHERWISE (I.E. \"C\", \"F\",ETC.)\nC*********************************************************************\n      INTEGER LRUDD,CSEC\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,CSEC(10,10),TVX,TVY,ICMC\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CHARACTER *4 CZCLER\n      EQUIVALENCE (CZCLER,IZCLER)\n      DATA CZCLER / 'CLEA'/\n      CALL DBUGIN ('INTERC ENTERED',IW(14),0)\n      DPRESX = FLOAT(IIX)\n      DPRESY = FLOAT(IIY)\n      TVX = DPRESX\n      TVY = DPRESY\n      SCX = FLOAT(ISCPX2)\n      SCY = FLOAT(ISCPY2)\n      CALL TARSET (DPRESX,DPRESY,SCX,SCY,ITRCON,LRUDD,SC)\n      XLRUD = FLOAT(LRUDD)\n10    IF (ITRCON.EQ.KZX) GO TO 20\n      TVY = TVY+XLRUD\n      TVX = TVX+SC\n      GO TO 30\n20    TVX = TVX+XLRUD\n      TVY = TVY+SC\n30    ITX = IFIX(TVX+0.5001)\n      ITY = IFIX(TVY+0.5001)\n      IF (CSEC(ITX,ITY).EQ.KZS) GO TO 40\n      IF (CSEC(ITX,ITY).EQ.ICRDOT) GO TO 10\n      IRTN = CSEC(ITX,ITY)\n      CALL DBUGCH ('INTERC - BLOCKED BY',IW(19),IRTN,IW(4))\n      GO TO 50\n40    IRTN = IZCLER\n      CALL DBUGCH ('INTERC - CLEAR',IW(14),IRTN,IW(4))\n50    CALL DBUGIN ('INTERC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=INTRO\nC*********************************************************************\n      SUBROUTINE INTRO\nC PURPOSE : INTRODUCE THE GAME, ASK IF INTRUCTIONS ARE WANTED,\nC           AND CONTINUE\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /CPU/ IBMT\n      COMMON /TERMSZ/ IILINE, IILLEN\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('INTRO ENTERED',IW(13),0)\n      CALL LINEF\n      CALL PRMSG ('                        KLINGON  ',IW(33))\n      CALL PRMSG ('               WRITTEN BY LARRY WILLIAMS ',IW(41))\n      CALL LINEF\n      CALL HELPRT ('LOGONMSG    ',IW(12))\n10    CALL READIN ('INSTRUCTIONS - ',IW(15),15,1,EOFF)\n      IF (EOFF.GT..1) GO TO 20\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 20\n      IF (INPUT(N2).EQ.ICRBLK) GO TO 10\n      IF (INPUT(N2).EQ.KZH) GO TO 100\n      IF (INPUT(N2).NE.KZY) GO TO 20\n      CALL LINEF\n      CALL HELPRT ('INTRO       ',IW(12))\n20    IF (IBMT.EQ.1) GO TO 30\n      CALL LINEF\n      CALL YESNO ('ARE YOU USING A SMALL SCREEN TERMINAL ',\n     *            IW(38),38,IYES)\n      ITTY = 0\n      IF (IYES.EQ.1) ITTY = 1\n30    IF (IBMT.EQ.1.AND.IILINE.LT.43) ITTY = 1\n      CALL DBUGIN ('INTRO EXITED',IW(12),0)\n      RETURN\nC     --- USER ENTERED \"HELP\" - TELL HIM WHERE HE IS ---\n100   CALL HELPRT ('INTROHLP    ',IW(12))\n      GO TO 10\n      END\n./     ADD     NAME=IN3270\nC*********************************************************************\n      SUBROUTINE IN3270\nC PURPOSE : FOR 3270 MVS/TSO INIT THE HEADER BUFFER AND LINECOUNT\nC*********************************************************************\n      COMMON /FSBUFF/ NPROML, NPROMT(20), NREAD(13),\n     *     NHEAD(20,12), NCOUNT, NWORK(20,200)\n      COMMON /OUTUNT/ IOUTT\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('IN3270 ENTERED',IW(14),0)\n      IOUTT = 99\n      NCOUNT = 0\n      DO 10 I = 1, 12\n          DO 10 J = 1, 20\n              NHEAD (J,I) = ICRBLK\n10    CONTINUE\n      CALL DBUGIN ('IN3270 EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ISBSET\nC*********************************************************************\n      FUNCTION ISBSET (DUMMY)\nC PURPOSE : SET RANDOM STRENGTH OF FEDERATION STARBASE,\nC           THIS WILL DETERMINE WHETHER 4, 5 OR 6 TORPEDOES\nC           NEEDED TO KILL THE BASE\nC*********************************************************************\n      CALL DBUGIN ('ISBSET ENTERED',IW(14),0)\n      XOUT = 12400.0\n      XXX = RAND(1.0)\n      IF (XXX.GT..8) XOUT = XOUT-2800.0\n      IF (XXX.LT..2) XOUT = XOUT+2000.0\n      ISBSET = IFIX(XOUT)\n      CALL DBUGIN ('ISBSET EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ISGN\nC*********************************************************************\n      FUNCTION ISGN (IVAL)\nC PURPOSE : SET FUNCTION ACCORDING TO SIGN  1 = POSITIVE\nC                                           0 = ZERO\nC                                          -1 = NEGATIVE\nC*********************************************************************\n      IF (IVAL) 10 , 20 , 30\n10    ISGN = -1\n      GO TO 40\n20    ISGN = 0\n      GO TO 40\n30    ISGN = +1\n40    RETURN\n      END\n./     ADD     NAME=ITERPT\nC*********************************************************************\n      SUBROUTINE ITERPT\nC PURPOSE : RETURN COUNTERS FOR NUMBER OF THINGS IN THIS QUADRANT\nC*********************************************************************\n      INTEGER PLCHT,CHRT\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),\n     *     NCX(9),NCY(9)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),CHRT(8,8),IPAD2(9),IPLNET(8,8),IKY(8,8),\n     *     INPUT(50),IPAD3\n      CALL DBUGIN ('ITERPT ENTERED',IW(14),0)\n      ICHART = CHRT(ISCPX1,ISCPY1)\n      PLCHT = IPLNET(ISCPX1,ISCPY1)\n      NPLNTS = MOD(PLCHT,10)\n      NCOMM = ICHART/1000\n      NFED = MOD(ICHART/100,10)\n      NSBASE = MOD(ICHART/10,10)\n      NSTARS = MOD(ICHART,10)\n      CALL DBUGIN ('ITERPT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=IW\nC*********************************************************************\n      FUNCTION IW(ILEN)\nC PURPOSE : RETURN THE NUMBER OF WORDS NEEDED FOR A CERTAIN STRING\nC           *IBM* DEPENDANT MODULE\nC*********************************************************************\n      COMMON  /CWORD/ IHOLD\n      IHOLD = ILEN\n      IW = (ILEN+3)/4\n      RETURN\n      END\n./     ADD     NAME=IWI\nC*********************************************************************\n      FUNCTION IWI(IDUMMY)\nC PURPOSE : RETURN LAST LEN VALUE PASSED TO IW...\nC*********************************************************************\n      COMMON  /CWORD/ IHOLD\n      IWI = IHOLD\n      RETURN\n      END\n./     ADD     NAME=JULIAN\nJULR     TITLE '--- JULIAN - JULIAN/GREGORIAN DAY OF WEEK ROUTINE ---'\nJULIAN   START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : JULIAN/GREGORIAN DAY OF WEEK ROUTINE, TAKEN FROM CBT    *\n*           TAPE FILE 336                                           *\n*           MODIFIED TO NOT USE FILE 336 MACROS IN ASSEMBLY         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n         USING JULIAN,R12          WE GOT IT\n         ST    R13,SAVEAREA+4      NON-RENT, NO BIG DEAL HERE\n         LA    R15,SAVEAREA        SET FORWARD/BACKWORD POINTERS\n         ST    R15,8(,R13)           \" \" \"\n         LA    R13,SAVEAREA          \" \" \"\n         LM    R2,R3,0(R1)         GET THE PARMS\n         SLR   R9,R9               ASSUME ONLY TWO PARMS       *MW82098\n         LTR   R3,R3               SECOND PARM LAST?           *MW82098\n         BM    *+L'*+8             NO:                         *MW82098\n         L     R9,8(,R1)           --SAVE WEEKDAY ADDRESS      *MW82098\n         MVI   0(R9),C'0'          --FLAG UNKNOWN WEEKDAY      *MW82098\n         ZAP   DMONTH,=P'0'\n         ZAP   DDAY,=P'0'\n         ZAP   DYEAR,=P'0'\n         ZAP   JDAY,=P'0'\n*------- COMPUTE JULIAN DATE FROM GREGORIAN DATE\n*        R1 CONTAINS THE ADDRESS OF THE IDENTIFIER LIST.\n*        R2 AND R3 POINT TO THE BEGINNING OF JDATE AND GDATE,\n*              RESPECTIVELY.  JDATE\n*        JDATE IS 5 BYTES LONG AND GDATE IS 6 BYTES LONG.\n         PACK  DMONTH,0(2,R3)\n         CVB   R4,DMONTH\n         SR    R5,R5\n         CR    R4,R5\n         BE    GREG                BRANCH TO GREG IF ZERO MONTH\n         LA    R5,12\n         CR    R4,R5\n         BH    QUIT                BRANCH IF MONTH > 12        *MW82098\n         SLL   R4,1                MULTIPLY BY 2 TO INDEX ON HALFWORDS\n         PACK  DDAY,2(2,R3)\n         PACK  DYEAR,4(2,R3)\n         CVB   R5,DDAY\n         DP    DYEAR,=PL1'4'\n         L     R6,DYEAR+4\n         N     R6,MASK1            ELIMINATE SIGN BITS OF REMAINDER\n         BZ    *+L'*+8\n         AH    R5,NORM(R4)\n         B     *+L'*+4\n         AH    R5,LEAP(R4)\n         CVD   R5,JDAY\n         UNPK  2(3,R2),JDAY        JULIAN DATE IS IN YYDDD FORMAT\n         OI    4(R2),X'F0'\n         MVC   0(2,R2),4(R3)\n*------- COMPUTE DAY OF WEEK IF REQUESTED?                     *MW82098\nGOBACK   LTR   R9,R9               FOURTH PARMS?               *MW82098\n         BZ    QUIT                YES:                        *MW82098\n         PACK  DYEAR,0(2,R2)       --RECREATE YEAR             *MW82098\n         CVB   R4,DYEAR            --R4 = YY                   *MW82098\n         LR    R5,R4               --R5 = YY                   *MW82098\n         BCTR  R5,0                --R5 = YY-1                 *MW82098\n         SRL   R5,2                --R5 = (YY-1)/2             *MW82098\n         AR    R5,R4               --R5 = YY+(YY-1)/4          *MW82098\n         PACK  JDAY,2(3,R2)        --RECREATE DAYS             *MW82098\n         CVB   R4,JDAY             --R4 = DDD                  *MW82098\n         AR    R5,R4               --R5 = YY+(YY-1)/4+DDD      *MW82098\n         SLR   R4,R4               --PREPARE FOR DIVIDE        *MW82098\n         D     R4,SEVEN            --R4 = (YY+(YY-1)/4+DDD)MOD *MW82098\n         LA    R4,1(,R4)           --UP ONE FOR COBOL          *MW82098\n         STC   R4,0(R9)            --SAVE FOR CALLER           *MW82098\n         OI    0(R9),C'0'          --PRETTY IT UP              *MW82098\n*------- RESTORE REGS AND RETURN\nQUIT     L     R13,SAVEAREA+4      GET ORIGINAL REGISTER 13\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n*------ COMPUTE GREGORIAN DATE FROM JULIAN DATE\nGREG     PACK  JDAY,2(3,R2)\n         CVB   R4,JDAY             R4 CONTAINS BINARY JULIAN DAY\n         CR    R4,R5\n         BE    CURDAT              GET CURRENT DATE IF BOTH DATES ZERO\n         PACK  DYEAR,0(2,R2)\nGREGL    LA    R5,24               R5 IS THE 'MONTH' INDEX\n         L     R6,MTWO             INCREMENT BACKWARDS BY HALFWORDS\n         SR    R7,R7               STOP AT ZERO\n         DP    DYEAR,=PL1'4'\n         L     R8,DYEAR+4\n         N     R8,MASK1            ELIMINATE SIGN BITS OF REMAINDER\n         BZ    LEAPL\nLOOP     CH    R4,NORM(R5)\n         BH    *+L'*+4             BRANCH IF JULIAN DAY (R4) HIGH\n         BXH   R5,6,LOOP\n         SH    R4,NORM(R5)\nBOXL     SRL   R5,1                DIVIDE BY 2 TO GET MONTH\n         CVD   R5,DMONTH\n         CVD   R4,DDAY\n         UNPK  0(2,R3),DMONTH\n         OI    1(R3),X'F0'         REMOVE ZONE SIGNS\n         UNPK  2(2,R3),DDAY\n         OI    3(R3),X'F0'\n         MVC   4(2,R3),0(R2)       YEAR\n         B     GOBACK\nLEAPL    CH    R4,LEAP(R5)\n         BH    *+L'*+4\n         BXH   R5,6,LEAPL\n         SH    R4,LEAP(R5)\n         B     BOXL\n*------- OBTAIN CURRENT DATE\nCURDAT  TIME\n         SR    R6,6\n         LR    R5,R1\n         N     R1,MASK2            R1 = 0000DDDC\n         ST    R6,JDAY\n         ST    R1,JDAY+4\n         SRL   R5,12\n         ST    R6,DYEAR\n         ST    R5,DYEAR+4\n         OI    DYEAR+7,X'0F'       FIX UP SIGN                 *MW82098\n         UNPK  2(3,R2),JDAY        STORE JULIAN CURRENT DATE\n         OI    4(R2),X'F0'\n         UNPK  0(2,R2),DYEAR\n         OI    1(R2),X'F0'\n         CVB   R4,JDAY\n         B     GREGL               OBTAIN GREGORIAN CURRENT DATE\n         EJECT\nSAVEAREA DC    9D'0'\nDMONTH   DC    D'0'\nDDAY     DC    D'0'\nDYEAR    DC    D'0'\nJDAY     DC    D'0'\nTWO      DC    F'2'\nMTWO     DC    F'-2'\nSEVEN    DC    F'7'                # DAYS IN WEEK              *MW82098\nMASK1    DC    A(X'000000F0')\nMASK2    DC    A(X'0000FFFF')\nNORM     DC    F'0'\n         DC    H'31'\n         DC    H'59'\n         DC    H'90'\n         DC    H'120'\n         DC    H'151'\n         DC    H'181'\n         DC    H'212'\n         DC    H'243'\n         DC    H'273'\n         DC    H'304'\n         DC    H'334'\nLEAP     DC    F'0'\n         DC    H'31'\n         DC    H'60'\n         DC    H'91'\n         DC    H'121'\n         DC    H'152'\n         DC    H'182'\n         DC    H'213'\n         DC    H'244'\n         DC    H'274'\n         DC    H'305'\n         DC    H'335'\n         SPACE 1\n         LTORG\n         SPACE 1\n         END\n./     ADD     NAME=KILLER\nC*********************************************************************\n      SUBROUTINE KILLER\nC PURPOSE : SEE IF A DISRUPTOR TORPEDO HIT SOMETHING, KILL THE\nC           OBJECT AS NEEDED\nC*********************************************************************\n      INTEGER CSEC\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /TRACOM/ TARX,TARY,PRESX,PRESY,NSECE(10,10),IHIT,ISBC,IFSC,\n     *     IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,\n     *     CSEC(10,10),TVX,TVY,ICMC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),\n     *     NCX(9),NCY(9)\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,\n     *  KZM,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *  ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *  KZ7,KZ8,KZ9,ICRBLK\n      COMMON /STRING/ IZSUPN, IZBLKH, IZMISS, IZNOVA, IZCDAM, IZCDES,\n     * IZFDAM, IZFDES, IZBDAM, IZBDES, IZPDES,\n     * IZP100, IZP200, IZP300, IZP400, IZERR\n      DIMENSION ISAVX(10),ISAVY(10),IDMSG(11)\n      CHARACTER *4 CZMSG(11)\n      EQUIVALENCE (CZMSG,IDMSG)\n      DATA CZMSG(1) /'** S'/ , CZMSG(2) /'TARS'/ , CZMSG(3) / 'HIP '/ ,\n     *     CZMSG(4) /'U.S.'/ , CZMSG(5) /'S.  '/ ,\n     *     CZMSG(9) /'AT S'/ , CZMSG(10) /'ECTO'/ , CZMSG(11) /'R:  '/\n      DATA IDMSG(6) /0/ , IDMSG(7) /0/ , IDMSG(8) /0/\n      CALL DBUGIN ('KILLER ENTERED',IW(14),0)\n      ITX = IFIX(TVX+0.5001)\n      ITY = IFIX(TVY+0.5001)\n      IF (ITX.GT.10.OR.ITX.LT.1.OR.ITY.GT.10.OR.ITY.LT.1) GO TO 270\n      IF (CSEC(ITX,ITY).EQ.ICRDOT) GO TO 300\n      CALL PRTEND\n      IF (CSEC(ITX,ITY).NE.ICRCRH) GO TO 10\n      CALL PRMSG (\n     *  '*** SENSOR CONTROL REPORTS DISRUPTOR TORPEDO SUCKED',\n     *  IW(51))\n      CALL PRMSM ('INTO BLACK HOLE AT: ',20,IW(20),ITY,ITX,' ',0,1)\n      IHIT = IZBLKH\n      GO TO 300\n10    IF (CSEC(ITX,ITY).NE.ICRSTR) GO TO 100\n      XXX = RAND(1.0)\n      IF (XXX.LE.0.05) GO TO 20\n      IF (XXX.LE.0.90) GO TO 40\n      GO TO 30\n20    CALL PRMSM (\n     *  '*** LORD COMMANDER, THE STAR AT: ',33,IW(33),ITY,ITX,' ',0,1)\n      CALL PRMSG ('WAS NOT AFFECTED BY OUR DISRUPTOR TORPEDO',IW(41))\n      IHIT = IZMISS\n      GO TO 300\n30    CALL BEEP\n      CALL ADDQUE ('REDA')\n      CALL PRMSG ('RED ALERT---RED ALERT',IW(21))\n      CALL PRMSM ('SUPERNOVA OF STAR AT: ',22,IW(22),ITY,ITX,' ',0,1)\n      CALL PRMSG (\n     *  'AUTOMATIC SUPERNOVA NAVIGATIONAL CONTROL ACTIVATING',IW(51))\n      CALL PRMSG ('STARSHIP ON FULL AUTOMATIC',IW(26))\n      CALL LINEF\n      IHIT = IZSUPN\n      GO TO 300\n40    IHIT = IZNOVA\n      CSEC(ITX,ITY) = ICRDOT\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-1\n      CALL AROUND (ITX,ITY)\n      ICNTR = 1\n      ISAVX(1) = ITX\n      ISAVY(1) = ITY\n      N3 = 1\n50    ILOX = ISAVX(N3)-ISGN(ISAVX(N3)-1)\n      IHIX = ISGN(10-ISAVX(N3))+ISAVX(N3)\n      ILOY = ISAVY(N3)-ISGN(ISAVY(N3)-1)\n      IHIY = ISGN(10-ISAVY(N3))+ISAVY(N3)\n      DO 80 I = ILOY, IHIY\n           DO 70 J = ILOX, IHIX\n                IF (CSEC(J,I).NE.ICRSTR) GO TO 70\n                ICNTR = ICNTR+1\n                ISAVX(ICNTR) = J\n                ISAVY(ICNTR) = I\n                IF (RAND(100.0).LT.10) GO TO 60\n                CSEC(J,I) = ICRDOT\n                CALL AROUND (J,I)\n                ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-1\n                NSECE(J,I) = 0\n                GO TO 70\n60              ITX = J\n                ITY = I\n                GO TO 30\n70         CONTINUE\n80    CONTINUE\n      N3 = N3+1\n      IF (N3.LE.ICNTR) GO TO 50\n      GO TO 300\n100   IF (CSEC(ITX,ITY).NE.KZC) GO TO 130\n      XXX = RAND(1.0)\n      CALL PRMSG (\n     *  '*** LORD COMMANDER, SENSOR CONTROL REPORTS WE''VE HIT AND...',\n     *  IW(59))\n      IF (XXX.GT..2) GO TO 120\n      CALL PRMSM (\n     * 'DAMAGED OUR COMMANDER AT SECTOR: ',33,IW(33),ITY,ITX,' ',0,1)\n      NSECE(ITX,ITY) = NSECE(ITX,ITY)+2500\n      IHIT = IZCDAM\n      IF (NSECE(ITX,ITY).LT.0) GO TO 300\n      CALL PRMSG (\n     *  'NEW UPDATE LORD COMMANDER, COMMANDER DESTROYED',IW(46))\n110   NSECE(ITX,ITY) = 0\n      CSEC(ITX,ITY) = ICRDOT\n      IHIT = IZCDES\n      IKCC = IKCC+1\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-1000\n      IKC = IKC-1\n      GO TO 300\n120   CALL PRMSM (\n     *  'DESTROYED OUR COMMANDER AT SECTOR: ',35,IW(35),ITY,ITX,' '\n     *     ,0,1)\n      GO TO 110\n130   IF (CSEC(ITX,ITY).NE.KZF) GO TO 150\n      NSECE(ITX,ITY) = NSECE(ITX,ITY)-2500\n      IF (NSECE(ITX,ITY).LE.0) GO TO 140\n      IHIT = IZFDAM\n      CALL PRMSM (\n     *  '*** HIT ON FEDERATION STARSHIP AT: ',35,IW(35),ITY,ITX,' '\n     *     ,0,1)\n      GO TO 300\n140   NSECE(ITX,ITY) = 0\n      CSEC(ITX,ITY) = ICRDOT\n      IHIT = IZFDES\n      ET = ET+0.3\n      IFS = IFS-1\n      IFSC = IFSC+1\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-100\n      CALL SSDEST (IUSFED,ISCPX1,ISCPY1,ITX,ITY,IDMSG(6))\n      CALL PRMSM (IDMSG,44,IW(44),ITY,ITX,'DESTROYED',9,IW(9))\n      GO TO 300\n150   IF (CSEC(ITX,ITY).NE.KZB) GO TO 170\n      NSECE(ITX,ITY) = NSECE(ITX,ITY)-2500\n      IF (NSECE(ITX,ITY).LE.0) GO TO 160\n      IHIT = IZBDAM\n      CALL PRMSM (\n     *  '*** HIT ON FEDERATION STARBASE AT: ',35,IW(35),ITY,ITX,' '\n     *     ,0,1)\n      GO TO 300\n160   NSECE(ITX,ITY) = 0\n      CSEC(ITX,ITY) = ICRDOT\n      IHIT = IZBDES\n      ET = ET+.5\n      ISB = ISB-1\n      ISBC = ISBC+1\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-10\n      CALL PRMSM (\n     *  '*** STARBASE AT: ',17,IW(17),ITY,ITX,'DESTROYED',9,IW(9))\n      GO TO 300\n170   IF (CSEC(ITX,ITY).NE.KZP) GO TO 280\n      NSECE(ITX,ITY) = NSECE(ITX,ITY)+100000000\n      IF (NSECE(ITX,ITY).GE.0) GO TO 180\n      IF (NSECE(ITX,ITY).EQ.-100000000) GO TO 210\n      IF (NSECE(ITX,ITY).EQ.-200000000) GO TO 240\n      IF (NSECE(ITX,ITY).EQ.-300000000) GO TO 250\n      GO TO 260\n180   CALL PRMSM (\n     *  '*** PLANET AT: ',15,IW(15),ITY,ITX,'DESTROYED',9,IW(9))\n      CSEC(ITX,ITY) = ICRDOT\n      IPR = IPR-1\n      NSECE(ITX,ITY) = 0\n      IHIT = IZPDES\n      IPLNET(ISCPX1,ISCPY1) = IPLNET(ISCPX1,ISCPY1)/10\n      IF (IPLNET(ISCPX1,ISCPY1).GT.9999) GO TO 190\n      IPLC = IPLC+100\n      GO TO 200\n190   IPLC = IPLC+600\n      ET = ET+.25\n200   IPLNET(ISCPX1,ISCPY1) = 0\n      GO TO 300\n210   CALL PRMSM (\n     *  '*** THE ATMOSPHERE OF THE PLANET AT ',36,IW(36),ITY,ITX,\n     *     'HAS',3,IW(3))\n      CALL PRMSG (\n     *  'BEEN RIPPED AWAY, ALL LIFE FORMS ON THE PLANET HAVE',\n     *     IW(51))\n      CALL PRMSG ('BEEN WIPED OUT',IW(14))\n      IHIT = IZP100\n      IF (IPLNET(ISCPX1,ISCPY1).GT.99999) GO TO 220\n      IPOP = IPLNET(ISCPX1,ISCPY1)/10\n      IPLNET(ISCPX1,ISCPY1) = 1\n      GO TO 230\n220   IPOP = (IPLNET(ISCPX1,ISCPY1)-100000)/10\n      IPLNET(ISCPX1,ISCPY1) = 100001\n230   ET = ET+.000025*IPOP\n      GO TO 300\n240   CALL PRMSG (\n     *  '*** SENSOR CONTROL REPORTS THE DEFENSE SYSTEM OF',IW(48))\n      CALL PRMSM (\n     *  'THE PLANET AT: ',15,IW(15),ITY,ITX,'HAS BEEN KNOCKED OUT',\n     *     20,IW(20))\n      IHIT = IZP200\n      GO TO 300\n250   CALL PRMSG (\n     *  '*** SENSOR CONTROL REPORTS THE DEFENSES OF THE PLANET',\n     *  IW(53))\n      CALL PRMSM (\n     *  'AT: ',4,IW(4),ITY,ITX,'HAVE BEEN WEAKENED',18,IW(18))\n      IHIT = IZP300\n      GO TO 300\n260   CALL PRMSG (\n     *  '*** SENSOR CONTROL REPORTS PLANETARY DEFENSES OF',IW(48))\n      CALL PRMSM (\n     *  'PLANET AT: ',11,IW(11),ITY,ITX,\n     *  'ARE HOLDING STRONG',18,IW(18))\n      IHIT = IZP400\n      GO TO 300\n270   CALL PRTEND\n      CALL PRMSG ('TORPEDO MISSED, LORD COMMANDER',IW(30))\n      IHIT = IZMISS\n      RETURN\n280   CALL PRMSG ('INTERNAL ERROR, ROUTINE=KILLER (ERROR 04)',IW(41))\n      CALL PRMSG ('NOW CALLING FREEZE ROUTINE TO SAVE DATA',IW(39))\n      CALL FREEZE\n      IHIT = IZERR\n300   CALL DBUGCH ('KILLER IHIT',IW(11),IHIT,IW(4))\n      CALL DBUGIN ('KILLER EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=KL\nC*********************************************************************\nC                     P R O G R A M     K L I N G O N\nC====================================================================*\nC    PROGRAM KLINGON          A SPACE WAR GAME                       *\nC    BY LARRY WILLIAMS                                               *\nC    WITH CONSULTING AND ASSISTANCE: MARK STEVENS                    *\nC    PROGRAMMER'S NOTES                                              *\nC    ------------------                                              *\nC    KLINGON IS A SPACE WAR GAME WRITTEN FOR CONTROL                 *\nC    DATA CORPORATION MACHINES 6000 OR HIGHER WITH                   *\nC    FORTRAN 5 (ANSI 1977 STANDARD)                                  *\nC    VERSION 1.1 WAS UPDATED IN 1987 - MARCH TO OPERATE UNDER        *\nC    MVS/TSO ON 3270 24 OR 43 LINE TERMINALS IN FULLSCREEN MODE      *\nC    AND VIA FORTRAN I/O (UNITS 5/6) FOR NON 3270                    *\nC    COPYRIGHT NOTICE                                                *\nC    ----------------                                                *\nC    PERMISSION IS HEREBY GRANTED FOR THE COPYING, DISTRIBUTION,     *\nC    MODIFICATION AND USE OF THIS PROGRAM AND ASSOCIATED             *\nC    DOCUMENTATION FOR RECREATIONAL PURPOSES, PROVIDED THAT ALL      *\nC    REFERENCES TO THE AUTHOR ARE RETAINED. HOWEVER, PERMISSION      *\nC    IS NOT AND WILL NOT BE GRANTED FOR THE SALE OR PROMOTIONAL      *\nC    USE OF THIS PROGRAM OR PROGRAM DOCUMENTATION, OR FOR USE IN     *\nC    IN ANY SITUATION IN WHICH PROFIT MAY BE CONSIDERED AN           *\nC    OBJECTIVE, SINCE IT IS THE DESIRE OF THE AUTHOR TO RESPECT      *\nC    THE COPYRIGHTS OF THE ORIGINATORS OF STAR TREK.                 *\nC    THIS PROGRAM WAS FINISHED IN JANUARY, 1983.                     *\nC====================================================================*\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /CPU/ IBMT\n      COMMON /TERMSZ/ IILINE, IILLEN\n      COMMON /INITVR/ IBMTSO, IGRAFC\n      COMMON /PHASE/ INIT\n      COMMON /OUTUNT/ IOUTT\n      COMMON /DBUGUN/ IUDBUG\n      COMMON /DEBUG/ IDEBUG\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /SRCOPY/ ISCOP(10,10)\n      COMMON /GRAPH/ IOK\n      COMMON /TRACKR/ ITRKC, RTRK(15,2)\n      DIMENSION IVALS(4),\n     * MSG3(9),MSG4(9),MSG5A(6),MSG5B(8),IDMSG2(15),IDMSG3(15)\n      DIMENSION NUMS(10), ICHAR(26)\n      EQUIVALENCE  (NUMS(1),ICRZER)\n      EQUIVALENCE  (ICHAR(1),KZA)\n      CHARACTER *4 CZMSG3(9) , CZMSG4(9) , CZMSG5A(6) , CZMSG5B(8) ,\n     *             CZDMSG2(15) , CZDMSG3(15)\n      EQUIVALENCE (CZMSG3,MSG3) , (CZMSG4,MSG4) , (CZMSG5A,MSG5A) ,\n     *       (CZMSG5B,MSG5B) , (CZDMSG2,IDMSG2) , (CZDMSG3,IDMSG3)\n      DATA LNAVXX / 0 /\n      DATA CZMSG3(1)/'THE '/,CZMSG3(2)/'PATH'/,CZMSG3(3)/' TO '/,\n     *     CZMSG3(4)/'THE '/,CZMSG3(5)/'TARG'/,CZMSG3(6)/'ET I'/,\n     *     CZMSG3(7)/'S:'/\n      DATA MSG3(8) /0/ , MSG3(9) /0/\n      DATA CZMSG4(1)/'WOUL'/,CZMSG4(2)/'D CA'/,CZMSG4(3)/'USE '/,\n     *     CZMSG4(4)/'YOUR'/,CZMSG4(5)/' ENE'/,CZMSG4(6)/'RGY '/,\n     *     CZMSG4(7)/'TO  '/\n      DATA MSG4(8) /0/ , MSG4(9) /0/\n      DATA CZMSG5A(1)/'SHIE'/,CZMSG5A(2)/'LDS '/,CZMSG5A(3)/'CURR'/,\n     *     CZMSG5A(4)/'ENTL'/,CZMSG5A(5)/'Y'/\n      DATA MSG5A(6) /0/\n      DATA CZMSG5B(1)/'DO Y'/,CZMSG5B(2)/'OU W'/,CZMSG5B(3)/'ISH '/,\n     *     CZMSG5B(4)/'TO '/,CZMSG5B(7)/'SHIE'/,CZMSG5B(8)/'LDS '/\n      DATA MSG5B(5) /0/ , MSG5B(6) /0/\n      DATA CZDMSG2(1)/'HAS '/,CZDMSG2(2)/'BEEN'/,CZDMSG2(3)/' IDE'/,\n     *     CZDMSG2(4)/'NTIF'/,CZDMSG2(5)/'IED '/,CZDMSG2(6)/'AS T'/,\n     *     CZDMSG2(7)/'HE F'/,CZDMSG2(8)/'EDER'/,CZDMSG2(9)/'ATIO'/,\n     *     CZDMSG2(10)/'N '/,CZDMSG2(14)/'U.S.'/,CZDMSG2(15)/'S.'/\n      DATA IDMSG2(11) /0/ , IDMSG2(12) /0/ , IDMSG2(13) /0/\n      DATA IDMSG3(1) /0/ , IDMSG3(2) /0/ , IDMSG3(3) /0/\n      DATA CZDMSG3(4) /',CAP'/ , CZDMSG3(5) /'TAIN'/ ,\n     *     CZDMSG3(6) /' '/ , CZDMSG3(7) /' '/ , CZDMSG3(8) /' '/ ,\n     *     CZDMSG3(9) /' '/ , CZDMSG3(10) /' '/ , CZDMSG3(11) /' '/ ,\n     *     CZDMSG3(12) /' '/ , CZDMSG3(13) /' '/ , CZDMSG3(14) /' '/ ,\n     *     CZDMSG3(15) /' '/\n      CHARACTER *4 CZRED , CZGRE , CZCLER , CZDAMG , CZDOWN , CZUP ,\n     *             CZYELL , CZNOHT , CZYEL2 , CZLOW , CZRAIS , CZSUPN ,\n     *             CZBLOC , CZBLC2 , CZINCR , CZDECR , CZEASE\n      EQUIVALENCE (CZRED,IZRED) , (CZGRE,IZGRE) , (CZCLER,IZCLER) ,\n     *            (CZDAMG,IZDAMG) , (CZDOWN,IZDOWN) , (CZUP,IZUP) ,\n     *        (CZYELL,IZYELL) , (CZNOHT,IZNOHT) , (CZYEL2,IZYEL2) ,\n     *          (CZLOW,IZLOW) , (CZRAIS,IZRAIS) , (CZSUPN,IZSUPN) ,\n     *        (CZBLOC,IZBLOC) , (CZBLC2,IZBLC2) , (CZINCR,IZINCR) ,\n     *            (CZDECR,IZDECR) , (CZEASE,IZEASE)\n      DATA CZRED  / 'RED'/\n      DATA CZGRE  / 'GREE'/\n      DATA CZCLER / 'CLEA'/\n      DATA CZDAMG / 'DAMG'/\n      DATA CZDOWN / 'DOWN'/ ,CZUP / 'UP'/\n      DATA CZYELL / 'YELL'/ ,CZNOHT / 'NOHT'/\n      DATA CZYEL2 / 'OW'/\n      DATA CZLOW / 'LOWE'/\n      DATA CZRAIS / 'RAIS'/\n      DATA CZSUPN / 'SNOV'/\n      DATA CZBLOC / 'BLOC'/\n      DATA CZBLC2 / 'KED'/\n      DATA CZINCR / 'INCR'/ ,CZDECR / 'DECR'/\n      DATA CZEASE / 'EASE'/\nC     === CYBER*CYBER*CYBER === === === === === === === ===> *BEGIN*\nC     --- SET IBMT = ZERO IF MACHINE IS A CYBER\nC                    (OR TSO SEQUENTIAL LINE MODE),\nC                    ONE FOR IBM TSO-3270 (24-43 LINES ONLY)\n      CALL GAINIT\n      IF (IILINE.EQ.-1) GO TO 9999\n      IBMT = IBMTSO\n      IOK  = IGRAFC\nC     === CYBER*CYBER*CYBER === === === === === === === ===> *EXIT*\n      ITRKC = 0\n      NQFLAG = 0\n      IOUTT = 6\n      IUDBUG = 10\n      INIT = 1\nC     --- AT THIS POINT IF THIS IS IBM TSO, CALL THE IN3270 ROUTINE\n      IF (IBMT.NE.1) GO TO 10\n      CALL STAX(0)\n      CALL INITGR\n      CALL IN3270\nC     --- CHECK TO SEE IF THE PLAYER IS IN THE ALLOWED SHIFT\nC         FOR PLAYING\n      CALL SHIFTC (I)\n      IF (I.NE.1) GO TO 2680\nC     --- CALL INIT ROUTINES\nC         AT THIS POINT CALL THE INTRO ROUTINE TO\nC         SEE IF INSTRUCTIONS ARE NEEDED\n10    CALL INTRO\nC     --- THEN CHECK IF OLD OR NEW GAME REQUESTED\n20    CALL OLDNEW (I)\nC         -1 = OLD GAME REQUESTED, ERROR IN GET (STOP)\nC          1 = OLD GAME, GET OK    (TO PROMPT FOR COMMAND)\nC          0 = NEW GAME REQUESTED  (CONTINUE INIT ROUTINES)\n      IF (I.EQ.-1) GO TO 2680\n      IF (I.EQ.1)  GO TO 100\n      CALL MAININ (IZNOHT,IZRED,IZDOWN)\nC     --- INIT COMPLETE... THIS LABEL BELOW IS THE TOP OF THE\nC         COMMAND DRIVER LOOP\n100   CALL LINEF\n      INIT = 0\nC     --- CHECK TO SEE IF ENERGY HAS RUN OUT, IF IT HAS, CHECK TO\nC         SEE IF COMPUTER AVAIL AND BATTERIES CHARGED, IF SO GIVE\nC         HIM A LITTLE JOLT\nC               I\nC             ------\nC              -1  = OUT OF ENERGY\nC               0  = O.K.\n      CALL ENGYST (I,IZRED)\n      IF (I.LT.0) GO TO 2560\nC     --- SEE IF THE PLAYER WON THE GAME, IF NO BASES LEFT,\nC         PLAYER HAS WON\n      CALL IFWIN (I)\n      IF (I.EQ.1) GO TO 2570\nC     --- SET THE CURRENT STATUS OF THE USER (RED, GREEN OR YELLOW)\nC         SET CURRENT SHIELD STATUS IF SHIELD WERE DAMAGED\n      ICOND(2) = ICRBLK\n      ICOND(1) = ICROG(ICHART(ISCPX1,ISCPY1))\n      IF (ICOND(1).EQ.IZGRE) ICOND(2) = KZN\n      IF (ENERGY.GT.1000.0.OR.ICOND(1).NE.IZGRE) GO TO 200\n      ICOND(1) = IZYELL\n      ICOND(2) = IZYEL2\n200   IF (XDSDC.GT.0.001) ISHUPD = IZDAMG\n      IHIT = IZNOHT\nC     --- NOW CHECK IF THE USER HAS RUN OUT OF TIME\nC         NOTE THE DIVIDE BY 2.1 FACTOR, I DECIDED THE GAME WAS\nC         TOO EASY WITH ORIGINAL ET (EXTRA TIME) VALUES, SO SHAVED\nC         IT IN ABOUT HALF\nC         IF USER RUNS OUT OF TIME, GO TO SAME ROUTINE THAT HANDLES\nC         SELF-DESTRUCT (CALL TIMMSG TO SAY WHAT HAPPENED)\n      TGIVEN = TGIVEN+(ET/2.1)\n      ET = 0.0\n      NOCNG = 0\n      REMAIN = TGIVEN-CSDATE\n      IF (REMAIN.GT.0.0) GO TO 210\n      CALL TIMMSG\n      GO TO 380\nC     --- EVERYTHING IS READY TO PROMPT FOR NEXT COMMAND\n210   CALL READIN ('COMMAND - ',IW(10),10,1,EOFF)\n      IF (EOFF.GT.0.9) GO TO 220\n      CALL GAP (N2)\n      IF (N2.LE.50) GO TO 230\n220   CALL LINEF\n      CALL PRMSG ('DID YOU SAY SOMETHING, LORD COMMANDER ?',IW(39))\n      CALL LINEF\n      GO TO 210\nC     --- FIND FIRST LETTER OF COMMAND, BRANCH TO :\nC         1)--- PROPER ROUTINE TO EXECUTE COMMAND IF IT CAN BE\nC               DETERMINED FROM FIRST LETTER.\nC               I IS SET TO AVOID ARRAY REFERENCE.\nC         2)--- ROUTINE TO FIND REMAINING LETTERS AS NEEDED.\n230   I = INPUT(N2)\n      DO 240 J=1,26\n          N = J\n          IF (I.EQ.ICHAR(N)) GO TO 250\n240   CONTINUE\n      GO TO 1720\nC     ===>    A    B    C    D    E    F    G    H    I    J    K\n250   GO TO (270, 260, 310, 320, 1630,300, 1720,2660,1470,1720,1720,\nC     ===>    L    M    N    O    P    Q    R    S    T    U    V\n     *       1610,1740,1720,2510,790, 1720,490, 410, 390, 1720,1720,\nC     ===>    W    X    Y    Z\n     *       2420,2700,1720,1720),N\nC     --- --- --- --- --- --- --- --- --- --- *** \"B\" COMMANDS\nC         CALL BATTERY ROUTINE\n260   CALL BATTCK\n      GO TO 100\nC     --- --- --- --- --- --- --- --- --- --- *** \"A\" COMMANDS\nC         \"ABANDON\"\nC         \"ANTI PHOTON\"\n270   CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 280\n      IF (INPUT(N2).NE.KZP) GO TO 1720\nC     --- CALL ROUTINE TO HANDLE ANTI-PHOTON\n      CALL APDEV\n      GO TO 100\nC     --- CALL ROUTINE TO SAY \"YOU CAN'T ABANDON\"\n280   CALL ABANMS\n      GO TO 100\nC     --- --- --- --- --- --- --- --- --- --- *** \"F\" COMMANDS\nC         \"FREEZE\"\n300   IF (INPUT(N2+1).NE.KZR.OR.INPUT(N2+2).NE.KZE.OR.INPUT(N2+3).NE.KZE\n     *     .OR.INPUT(N2+4).NE.KZZ.OR.INPUT(N2+5).NE.KZE) GO TO 1720\n      CALL FREEZE\n      CALL LINEF\n      CALL PRMSG ('KLINGON STOPPED BY FREEZE',IW(25))\n      GO TO 2680\nC     --- --- --- --- --- --- --- --- --- --- *** \"C\" COMMANDS\nC         \"CHART\"\nC         \"COMPUTE\"\n310   N2 = N2+1\nC     --- FOLLOWING IF IS FOR CHART\n      IF (INPUT(N2).NE.ICRBLK.AND.INPUT(N2).NE.KZH) GO TO 311\n      CALL PRCHRT\n      GO TO 100\nC     --- FOLLOWING IF IS FOR COMPUTE\n311   IF (INPUT(N2).EQ.KZO) GO TO 1810\n      GO TO 1720\nC     --- --- --- --- --- --- --- --- --- --- *** \"D\" COMMANDS\nC         \"DESTRUCT\"\nC         \"DEATHRAY\"\nC         \"DAMAGE\"\nC         \"DISRUPTOR\"\nC         \"DOCK\"\n320   N2 = N2+1\n      IF (INPUT(N2).EQ.KZA) GO TO 330\n      IF (INPUT(N2).EQ.KZE) GO TO 370\n      IF (INPUT(N2).EQ.KZI) GO TO 800\n      IF (INPUT(N2).EQ.KZO.OR.INPUT(N2).EQ.ICRBLK) GO TO 331\n      GO TO 1720\nC     --- CALL ROUTINE TO SAY DOCK NOT AVAIL\n331   CALL DOCK\n      GO TO 100\nC     --- CALL THE DAMAGE ROUTINE\n330   CALL DAMAGR\n      GO TO 100\nC     --- LOOK FURTHER AT \"DE\" STRING\n370   N2 = N2+1\n      IF (INPUT(N2).EQ.KZA) GO TO 381\n      IF (INPUT(N2).NE.KZS.OR.INPUT(N2+1).NE.KZT.OR.INPUT(N2+2).NE.\n     *    KZR.OR.INPUT(N2+3).NE.KZU.OR.INPUT(N2+4).NE.KZC.OR.INPUT(N2+5)\n     *    .NE.KZT) GO TO 1720\nC     --- THIS PORTION CHECKS IF THE PLAYER REALLY WANTS TO KILL SELF\n      CALL PRMSG ('SELF-DESTRUCT SEQUENCE BEGIN:',IW(29))\n      CALL LINEF\n      CALL YESNO ('DID YOU SAY # DESTRUCT # LORD COMMANDER ',\n     *         IW(40),40,IYES)\n      IF (IYES.NE.1) GO TO 100\nC    --- CONTINUE BELOW MUST BE KEPT FOR \"RUN OUT OF OF TIME\" ROUTINE\nC        ABOVE\n380   CALL DESMSG\n      GO TO 2560\nC     --- CALL ROUTINE TO SAY DEATHRAY (SSTREK COMMAND) NOT AVAIL\n381   CALL DEATHR\n      GO TO 100\nC     --- --- --- --- --- --- --- --- --- --- *** \"T\" COMMANDS\nC         \"TRACTOR\"\nC         \"TERMINATE\"\nC         \"TRANSPORTER\"\nC     --- LOOK FOR T-R-A\n390   IF (INPUT(N2+1).NE.KZR.OR.INPUT(N2+2).NE.KZA) GO TO 400\nC     --- FALL THRU TO HERE MEANS IT DOES START WITH T-R-A\n      IF (INPUT(N2+3).EQ.KZN) GO TO 399\nC     --- FALL THRU TO HERE, MEANS MAY BE TRACTOR COMMAND\n      IF (INPUT(N2+3).EQ.KZC) GO TO 1500\n      GO TO 1720\nC     --- CALL ROUTINE TO SAY WE DON'T HAVE SHUTTLE OR TRANSPORTER\n399   CALL TSMSG\n      GO TO 100\nC     --- AT THIS POINT THE COMMAND MIGHT BE \"TERMINATE\"\n400   IF (INPUT(N2+1).EQ.KZE.AND.INPUT(N2+2).EQ.KZR.AND.INPUT(N2+3).EQ.\n     *     KZM.AND.INPUT(N2+4).EQ.KZI.AND.INPUT(N2+5).EQ.KZN.AND.\n     *     INPUT(N2+6).EQ.KZA.AND.INPUT(N2+7).EQ.KZT.AND.INPUT(N2+8).EQ.\n     *     KZE.AND.INPUT(N2+9).EQ.ICRBLK) GO TO 2640\n      GO TO 1720\nC     --- --- --- --- --- --- --- --- --- --- *** \"S\" COMMANDS\n410   N2 = N2+1\n      IF (INPUT(N2).EQ.KZR.OR.INPUT(N2).EQ.ICRBLK) GO TO 430\n      IF (INPUT(N2).EQ.KZE) GO TO 420\n      IF (INPUT(N2).EQ.KZT.AND.INPUT(N2+1).EQ.KZA) GO TO 431\n      IF (INPUT(N2).EQ.KZH.AND.INPUT(N2+1).EQ.KZU) GO TO 419\n      IF (INPUT(N2).EQ.KZH.AND.(INPUT(N2+1).EQ.KZE.OR.INPUT(N2+1).EQ.KZI\n     *     .OR.(INPUT(N2+1).EQ.ICRBLK))) GO TO 580\n      IF (INPUT(N2).EQ.KZT.AND.INPUT(N2+1).EQ.KZO.AND.INPUT(N2+2).EQ.KZP\n     *     ) GO TO 2680\n      GO TO 1720\nC     --- CALL ROUTINE TO SAY WE DON'T HAVE SHUTTLE OR TRANSPORTER\n419   CALL TSMSG\n      GO TO 100\nC     --- CALL ROUTINE TO DISPLAY INFO ON SENSOR SCAN\n420   CALL SENDEC (IPLNET(ISCPX1,ISCPY1))\n      GO TO 100\nC     --- CALL ROUTINE TO DISPLAY SRSCAN\n430   IF (IBMT.EQ.1) GO TO 432\n      CALL SRS\n      GO TO 100\n432   CALL PRMSG ('YOUR FIRST OFFICER GREETS YOU WITH A PUZZLED ',\n     *                                                         IW(44))\n      CALL PRMSG ('LOOK AND SAYS: \"ALL SHORT RANGE DATA IS ON THE ',\n     *                                                         IW(46))\n      CALL PRMSG ('FORWARD TACTICAL SCREEN, LORD COMMANDER\"  ',IW(41))\n      GO TO 100\nC     --- CALL ROUTINE FOR STATUS ONLY\n431   IF (IBMT.EQ.1) GO TO 433\n      CALL SRSCAN(1,0,ISECT)\n      GO TO 100\n433   CALL PRMSG ('YOUR FIRST OFFICER GREETS YOU WITH A PUZZLED ',\n     *                                                         IW(44))\n      CALL PRMSG ('LOOK AND SAYS: \"ALL STATUS INFORMATION IS ON THE  ',\n     *                                                         IW(48))\n      CALL PRMSG ('FORWARD TACTICAL SCREEN, LORD COMMANDER\"  ',IW(42))\n      GO TO 100\nC     --- --- --- --- --- --- --- --- --- --- *** \"R\" COMMANDS\n490   IF (INPUT(N2+1).NE.KZE) GO TO 1720\n      IF (INPUT(N2+2).EQ.KZS) GO TO 510\n      GO TO 1720\n500   CALL READIN ('HOW LONG ',IW(9),9,1,EOFF)\n      IF (EOFF.GT..1) GO TO 500\n      CALL GAP (N2)\n      GO TO 520\n510   CALL BRIDGE (N2)\n520   IF (N2.GT.50) GO TO 500\n      CALL NUMREC (INPUT,N2,IERR,REST)\n      IF (IERR.NE.0.OR.REST.LT.0.0) GO TO 1720\n      IF (ABS(REST).LT..0001) GO TO 540\n      IF (REST.LT.REMAIN) GO TO 530\n      CALL PRMSG ('LORD COMMANDER, WE DON''T HAVE THAT MUCH TIME LEFT',\n     *     IW(49))\n      CALL YESNO ('DO YOU STILL WANT TO REST ',IW(26),26,IYES)\n      IF (IYES.NE.1) GO TO 540\n      CALL TIMMSG\n      GO TO 380\n530   CALL LINEF\n      IF (ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZGRE) GO TO 570\n      CALL LINEF\n      CALL PRMSG ('LORD COMMANDER, WE ARE CURRENTLY IN BATTLE,',IW(43))\n      CALL YESNO ('ARE YOU SURE YOU WANT TO REST?',IW(30),30,IYES)\n      IF (IYES.EQ.1) GO TO 550\n540   CALL PRMSG ('NO REST TAKEN',IW(13))\n      GO TO 100\n550   K = REST*20.0\n      DO 560 J = 1, K\n           CALL BATTLE\n560   CONTINUE\n570   CALL REPAIR (REST)\n      CSDATE = CSDATE+REST\n      ENERGY = ENERGY+(REST*1024.0)\n      T = TGIVEN-CSDATE\n      CALL PRMRM ('STARDATES REMAINING ',20,IW(20),T,' ',0,1)\n      GO TO 100\n580   CALL LINEF\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 610\n      IF (INPUT(N2).NE.KZT) GO TO 660\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 620\n590   CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 1720\n      IF (ABS(RTN).LT..5) GO TO 100\n      J = ISHENG+ IFIX(RTN)\n      IF (ENERGY-RTN.LT.0.0) GO TO 650\n      IF (ABS(RTN).LT.0.001) GO TO 100\n      IF (J.LT.0.OR.J.GT.12500) GO TO 630\n      IF (RTN.LT.0.0) GO TO 591\n      ENERGY = ENERGY-RTN\n      GO TO 592\n591   ENERGY = ENERGY-(FLOAT(IFIX(RTN)))\n592   ISHENG = J\n600   CALL PRMRM ('MAIN ENERGY BANKS NOW AT: ',26,IW(26),ENERGY,\n     *             ' ',0,1)\n      CALL PRMIM ('SHIELDS NOW AT: ',16,IW(16),ISHENG,'UNITS',5,IW(5))\n      GO TO 780\n610   CALL LINEF\n      CALL YESNO('DO YOU WISH TO CHANGE SHIELD ENERGY ',IW(36),36,IYES)\n      IF (IYES.EQ.1) GO TO 620\n      IF (IYES.EQ.0) GO TO 750\n620   CALL READIN ('ENERGY TO TRANSFER TO SHIELDS (NEGATIVE TO DRAIN) ',\n     *     IW(50),50,1,EOFF)\n      IF (EOFF.GT..1) GO TO 100\n      CALL GAP (N2)\n      GO TO 590\n630   CALL LINEF\n      IF (J.GT.12500) GO TO 640\n      CALL PRMSG ('ALL SHIELD ENERGY TRANSFERED TO MAIN ENERGY BANKS',\n     *           IW(49))\n      CALL LINEF\n      ENERGY = ENERGY+FLOAT(ISHENG)\n      ISHENG = 0\n      GO TO 600\n640   CALL PRMSG (\n     *     'SHIELD ENERGY MAXIMIZED, EXCESS RETURNED TO MAIN ENERGY',\n     *     IW(55))\n      CALL LINEF\n      ENERGY = ENERGY-FLOAT(12500-ISHENG)\n      ISHENG = 12500\n      GO TO 600\n650   CALL PRMSG (\n     *     'LORD COMMANDER, ENGINEERING REPORTS THE ENERGY LEVEL YOU',\n     *     IW(56))\n      CALL PRMSG('HAVE REQUESTED WOULD DROP OUR MAIN POWER BANKS TO 0.'\n     *     ,IW(52))\n      GO TO 100\n660   IF (INPUT(N2).NE.KZU.AND.INPUT(N2).NE.KZD) GO TO 1720\n      IF (ISHUPD.NE.IZDAMG) GO TO 680\n670   CALL PRMSG ('SHIELDS ARE DAMAGED AND DOWN.',IW(29))\n      GO TO 100\n680   IF (INPUT(N2).EQ.KZU.AND.ISHUPD.EQ.IZUP) GO TO 690\n      GO TO 700\n690   CALL PRMSG ('SHIELDS ALREADY UP.',IW(19))\n      GO TO 100\n700   IF (INPUT(N2).EQ.KZD.AND.ISHUPD.EQ.IZDOWN) GO TO 710\n      GO TO 720\n710   CALL PRMSG ('SHIELDS ALREADY DOWN.',IW(21))\n      GO TO 100\n720   IF (INPUT(N2).EQ.KZD) GO TO 740\n      IF (ENERGY.GT.50.0) GO TO 730\n      CALL PRMSG ('INSUFFICENT ENERGY TO RAISE SHIELDS.',IW(36))\n      GO TO 100\n730   ENERGY = ENERGY-50.0\n      IOVER = 1\n      ISHUPD = IZUP\n      CALL PRMSG ('AUTOMATIC CONTROL OVERRIDDEN.',IW(29))\n      CALL PRMSG ('SHIELDS RAISED',IW(14))\n      GO TO 780\n740   IOVER = 1\n      ISHUPD = IZDOWN\n      CALL PRMSG ('AUTOMATIC CONTROL OVERRIDDEN.',IW(28))\n      CALL PRMSG ('SHIELDS DROPPED',IW(15))\n      GO TO 780\n750   IF (ISHUPD.EQ.IZDAMG) GO TO 670\n      J = ISHUPD\n      K = IZRAIS\n      K2 = KZE\n      IF (J.EQ.IZUP) K = IZLOW\n      IF (J.EQ.IZUP) K2 = KZR\n      MSG5A(6) = J\n      MSG5B(5) = K\n      MSG5B(6) = K2\n      CALL PRMSG (MSG5A,IW(24))\n760   CALL READIN (MSG5B,IW(37),37,1,EOFF)\n      IF (EOFF.GT..1) GO TO 760\n      CALL GAP (N2)\n      IF (INPUT(N2).EQ.KZN) GO TO 100\n      IF (INPUT(N2).EQ.KZY) GO TO 770\n      CALL PRMSG ('YES OR NO PLEASE',IW(16))\n      GO TO 760\n770   N2 = 1\n      INPUT(1) = KZU\n      IF (J.EQ.IZUP) INPUT(1) = KZD\n      GO TO 720\n780   CALL BATTLE\n      GO TO 100\n790   IF (INPUT(N2+1).EQ.ICRBLK) GO TO 800\n      IF (INPUT(N2+1).EQ.KZL) GO TO 799\n      IF (INPUT(N2+1).NE.KZH) GO TO 1720\n      IF (INPUT(N2+2).EQ.KZO.OR.INPUT(N2+2).EQ.ICRBLK) GO TO 800\n      IF (INPUT(N2+2).NE.KZA) GO TO 1720\nC     --- CALL ROUTINE TO SAY WE DON'T HAVE PHASERS\n      CALL PHASER\n      GO TO 100\nC     --- CALL ROUTINE TO SAY PLANET RECORD NOT KEPT (WE JUST\nC         BLOW THEM UP)\n799   CALL PLANET\n      GO TO 100\n800   CALL PHOTON (IRETRN,ITQX,ITSX,ITQY,ITSY,N2)\nC     --- 100-PROMPT, 1720-N2.GT.50, 2560-DIE, 1950-MOVE.\n      IF (IRETRN.EQ.0) GO TO 100\n      IF (IRETRN.EQ.1) GO TO 1720\n      IF (IRETRN.EQ.2) GO TO 2560\n      IF (IRETRN.EQ.3) GO TO 1950\n      GO TO 100\n1470  IF (XIEDC.GT.0.001) GO TO 1490\n      IF (ENERGY.GT.50.0) GO TO 1480\n      CALL LINEF\n      CALL PRMSG ('INSUFFIENT ENERGY TO ACTIVATE IMPULSE ENGINES',\n     * IW(45))\n      GO TO 100\n1480  IMPULS = 1\n      GO TO 1800\n1490  CALL LINEF\n      CALL PRMSG ('IMPULSE ENGINES DAMAGED',IW(23))\n      GO TO 100\n1500  CALL LINEF\n      GO TO 1520\n1510  CALL READIN ('TARGET QUADRANT ',IW(16),16,1,EOFF)\n      IF (EOFF.GT..1) GO TO 1510\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 100\n      GO TO 1530\n1520  CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1510\n1530  CALL IDENT (INPUT(N2),IERR,ITRACY)\n      IF (IERR.NE.0) GO TO 1720\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1720\n      CALL IDENT (INPUT(N2),IERR,ITRACX)\n      IF (IERR.NE.0) GO TO 1720\n      IF (ITRACX.GT.8.OR.ITRACY.GT.8) GO TO 1720\n      IF (ITRACX.LT.1.OR.ITRACY.LT.1) GO TO 100\n      IF (ITRACX.EQ.ISCPX1.AND.ITRACY.EQ.ISCPY1) GO TO 100\n      TRENG = DIST(ITRACX,5,ITRACY,5,ISCPX1,ISCPX2,ISCPY1,ISCPY2)*650.0\n      IF (TRENG.GE.ENERGY) GO TO 1590\n      CALL PRMRM ('THAT WOULD REQUIRE ',19,IW(19),TRENG,\n     *    'UNITS OF ENERGY,',16,IW(16))\n      CALL YESNO ('DO YOU STILL WISH TO ENGAGE THE TRACTOR BEAM ',\n     *     IW(45),45,IYES)\n      IF (IYES.NE.1) GO TO 100\n      CALL LINEF\n      CALL PRMSG ('AS YOU SO ORDER, LORD COMMANDER...',IW(34))\n      CALL LINEF\n      CALL PRMSG ('TRACTOR BEAM ON FULL POWER, LORD COMMANDER',IW(42))\n      CALL LINEF\n      ENERGY = ENERGY-TRENG\n      IF (ICHART(ITRACX,ITRACY).LT.100.OR.ICHART(ITRACX,ITRACY).\n     *      EQ.9999) GO TO 1600\n      ICCNT = ICHART(ITRACX,ITRACY)/1000\n      IFCNT = MOD(ICHART(ITRACX,ITRACY)/100,10)\n      CP = (RAND(1.0)+.1)*ICCNT\n      FP = (RAND(1.0)+.1)*IFCNT\n1540  IX = RAND(10.0)+1.0\n      IY = RAND(10.0)+1.0\n      IF (ISECT(IX,IY).NE.ICRDOT) GO TO 1540\n      IF (CP.LT.FP) GO TO 1550\n      FLAG = 1000\n      GO TO 1560\n1550  FLAG = 100\n1560  ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)+FLAG\n      ICHART(ITRACX,ITRACY) = ICHART(ITRACX,ITRACY)-FLAG\n      CALL LINEF\n      CALL PRMSG('WE''VE LOCKED ONTO SOMETHING, LORD COMMANDER',IW(43))\n      CALL LINEF\n      IF (FLAG.GT.999.9) GO TO 1570\n      CALL PRMSG (\n     *  '*** FEDERATION STARSHIP CAUGHT IN LONG RANGE TRACTOR BEAM',\n     *     IW(57))\n      CALL PRMSG ('ALL HANDS... BATTLE STATIONS!',IW(29))\n      CALL ADDQUE ('REDA')\n      ISECT(IX,IY) = KZF\n      NSECE(IX,IY) = IFEDST(DUMMY)\n      CALL LINEF\n      CALL SSMOVI (IUSFED,ISCPX1,ISCPY1,IX,IY,ITRACX,ITRACY,IDMSG3(1),\n     *     IDMSG3(6),IDMSG2(12))\n      CALL PRMSG ('...LORD COMMANDER, THE SHIP WE TRACTORED IN',IW(43))\n      CALL PRMSG (IDMSG2,IW(60))\n      CALL PRMSG (IDMSG3,IW(60))\n      CALL PRMSG ('LAST KNOWN TO BE IN COMMAND.',IW(28))\n      CALL LINEF\n      GO TO 1580\n1570  CALL PRMSG ('*** COMMANDER CAUGHT IN LONG RANGE TRACTOR BEAM',\n     *   IW(47))\n      ISECT(IX,IY) = KZC\n      NSECE(IX,IY) = -4500\n1580  CALL LINEF\n      CALL PRMSG ('TRACTORS \"OFF\", LORD COMMANDER',IW(30))\n      CALL BATTLE\n      GO TO 100\n1590  CALL PRMSG ('WE DON''T HAVE THE ENERGY TO PULL A SHIP THAT FAR,',\n     *     IW(48))\n      CALL PRMSG ('LORD COMMANDER',IW(14))\n      GO TO 100\n1600  ENERGY = ENERGY+(TRENG*.5)\n      CALL PRMSG ('OUR TRACTOR BEAM WAS UNABLE TO LOCK ONTO ANYTHING,',\n     *    IW(50))\n      CALL PRMSG ('LORD COMMANDER',IW(14))\n      GO TO 1580\n1610  IF (IBMT.EQ.1) GO TO 1620\n      CALL LRSCAN\n      GO TO 100\n1620  CALL PRMSG ('YOUR FIRST OFFICER GREETS YOU WITH A PUZZLED   ',\n     *                                                         IW(44))\n      CALL PRMSG ('LOOK AND SAYS: \"ALL LONG RANGE DATA IS ON THE  ',\n     *                                                         IW(45))\n      CALL PRMSG ('FORWARD TACTICAL SCREEN, LORD COMMANDER\"  ',IW(42))\n      GO TO 100\n1630  IF (INPUT(N2+1).NE.KZX) GO TO 1720\n      CALL LINEF\n      IF (IGRAFC.EQ.0) GO TO 1640\n      IF (IOK.EQ.1) GO TO 1640\n      IOK = 1\n      CALL PRMSG ('EXTERNAL VISUAL DISPLAYS WILL BE DISPLAYED',IW(42))\n      GO TO 1650\n1640  IOK = 0\n      CALL PRMSG ('EXTERNAL VISUAL DISPLAYS NOW \"OFF\"        ',IW(42))\n1650  CALL PRMSG ('LORD COMMANDER',IW(14))\n      GO TO 100\n1720  CALL PRMSG (\n     *  'BEGGING YOUR LEAVE, LORD COMMANDER, BUT I DO NOT UNDERSTAND'\n     *     ,IW(59))\n      CALL PRMSG ('THE COMMAND:',IW(12))\n      CALL PRMSG1 (INPUT,50)\n      GO TO 100\n1730  CALL PRMSG (\n     *  'THE SUPERCOMMANDER KAZH CANNOT USE DILITHIUM CRYSTALS',IW(53))\n      GO TO 100\n1740  IF (INPUT(N2+1).NE.KZI) GO TO 1800\n      GO TO 1730\n1750  CALL LINEF\n      CALL READIN ('MANUAL OR AUTOMATIC ',IW(20),20,1,EOFF)\n      IF (EOFF.GT..1) GO TO 1780\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 1780\n      GO TO 1830\n1760  CALL LINEF\n      CALL READIN ('ENTER QUADRANT AND/OR SECTOR ',IW(29),29,1,EOFF)\n      IF (EOFF.GT..1) GO TO 1780\n      NCO = 0\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 1780\n      GO TO 1840\n1770  CALL LINEF\n      CALL READIN ('ENTER X AND Y DISPLACEMENTS: ',IW(29),29,1,EOFF)\n      IF (EOFF.GT..1) GO TO 1780\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 1780\n      GO TO 1900\n1780  CALL LINEF\n      CALL PRMSG ('MOVE OR COMPUTE COMMAND ABORTED.',IW(31))\n      GO TO 100\n1790  CALL LINEF\n      CALL PRMSG ('COMPUTER DAMAGED, MANUAL MOVE ONLY.',IW(35))\n      GO TO 100\n1800  LNAVXX = 0\n      GO TO 1820\n1810  LNAVXX = 1\n      IF (XCDC.GT..001) GO TO 1819\n      GO TO 1820\nC     --- THIS IS THE COMPTER DAMAGED ROUTINE, COMES HERE IF\nC         FUNCTION UNDER COMPUTER CONTROL AND IT'S BROKEN\n1819  CALL LINEF\n      CALL PRMSG ('COMPUTER DAMAGED',IW(16))\n      GO TO 100\n1820  ITQY = ISCPY1\n      ITQX = ISCPX1\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1750\n1830  IF (INPUT(N2).EQ.KZM) GO TO 1890\n      IF (INPUT(N2).NE.KZA) GO TO 1720\n      IF (XCDC.GT.0.001) GO TO 1790\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1760\n      NCO = 0\n1840  IF (N2.GT.50) GO TO 1870\n      CALL IDENT (INPUT(N2),IERR,IOUT)\n      IF (IERR.NE.0) GO TO 1720\n      IF (IOUT.NE.1) GO TO 1850\n      IF (INPUT(N2+1).EQ.ICRBLK) GO TO 1850\n      IF (INPUT(N2+1).NE.ICRZER) GO TO 1720\n      IVALUE = 10\n      GO TO 1860\n1850  IVALUE = IOUT\n1860  NCO = NCO+1\n      IVALS(NCO) = IVALUE\n      CALL BRIDGE (N2)\n      GO TO 1840\n1870  IF (NCO.NE.2.AND.NCO.NE.4) GO TO 1720\n      IF (NCO.EQ.2) GO TO 1880\n      ITQY = IVALS(1)\n      ITQX = IVALS(2)\n      ITSY = IVALS(3)\n      ITSX = IVALS(4)\n      GO TO 1930\n1880  ITSY = IVALS(1)\n      ITSX = IVALS(2)\n      GO TO 1930\n1890  CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1770\n1900  CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 1720\n      XVAL = RTN\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 1910\n      CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 1720\n      YVAL = RTN\n      GO TO 1920\n1910  YVAL = 0.0\n1920  YVAL = -YVAL\n      IDISPX = IFIX(XVAL*100.0)\n      IDISPY = IFIX(YVAL*100.0)\n      IDISPX = (IDISPX+ISGN(IDISPX))/10\n      IDISPY = (IDISPY+ISGN(IDISPY))/10\n      ISCX = (ISCPX1*10+ISCPX2-1)+IDISPX\n      ISCY = (ISCPY1*10+ISCPY2-1)+IDISPY\n      ITQX = ISCX/10\n      ITSX = MOD(ISCX,10)+1\n      ITQY = ISCY/10\n      ITSY = MOD(ISCY,10)+1\n1930  IF (ITQX.EQ.ISCPX1.AND.ITQY.EQ.ISCPY1.AND.ITSX.EQ.ISCPX2.AND.\n     *     ITSY.EQ.ISCPY2) GO TO 1780\n      IF (ITQY.GT.8.OR.ITQY.LT.1.OR.ITQX.GT.8.OR.ITQX.LT.1.OR.ITSY.GT.\n     *     10.OR.ITSY.LT.1.OR.ITSX.LT.1.OR.ITSX.GT.10) GO TO 1940\n      GO TO 1950\n1940  CALL PRMSG ('LORD COMMANDER, I DO NOT THINK IT WISE TO LEAVE',\n     *   IW(47))\n      CALL PRMSG ('FEDERATION SPACE UNTIL OUR MISSION IS COMPLETE.',\n     *   IW(47))\n      GO TO 100\n1950  IF (IMPULS.EQ.1.OR.XWEDC.LE.0.001.OR.LNAVXX.EQ.1) GO TO 1970\n      IF (XWEDC.LE.5.0.AND.WFACT.LE.5.0) GO TO 1970\n      IF (XWEDC.GT.5.0) GO TO 1960\n      CALL LINEF\n      CALL PRMSG ('LORD COMMANDER, WE MUST REDUCE SPEED TO WARP 5.',\n     *  IW(47))\n      GO TO 100\n1960  CALL LINEF\n      CALL PRMSG ('WARP ENGINES NON-OPERATIONAL',IW(28))\n      GO TO 100\n1970  WFDDST = DIST(ITQX,ITSX,ITQY,ITSY,ISCPX1,ISCPX2,ISCPY1,ISCPY2)\n      IF (LNAVXX.NE.1) CALL M2FAST (WFACT,WFDDST,WFDAMG)\n      IF (ITQY.EQ.ISCPY1.AND.ITQX.EQ.ISCPX1) GO TO 2050\n      IF (ICHART(ITQX,ITQY).NE.9999.OR.XCDC.GT.0.001.OR.LNAVXX.EQ.1)\n     *      GO TO 1980\n      CALL BEEP2\n      CALL PRMSG ('EMERGENCY NAVIGATIONAL OVERRIDE BY COMPUTER',\n     *   IW(43))\n      CALL PRMSG (\n     *  'TARGET QUADRANT CONTAINS SUPERNOVA, ENGINES SHUT DOWN',IW(53))\n      IF (IHIT.NE.IZSUPN) GO TO 100\n      CALL PRMSG ('YOUR SHIP LANDED IN A QUADRANT WITH A SUPERNOVA',\n     *                                                         IW(47))\n      CALL PRMSG ('YOU AND YOUR  SHIP ARE BURNED TO A CRISP',IW(40))\n      GO TO 2560\n1980  IF (LNAVXX.EQ.1) GO TO 2040\n      IF (IHIT.EQ.IZSUPN) GO TO 2010\n      IPOF = 1\n      CALL BATTLE\n      IPOF = 0\n      CALL LOCATE (KZF,J,J)\n      IF (NFED.EQ.0) GO TO 2000\n      DO 1990 J = 1, NFED\n           CALL SSMOVO(IUSFED,ISCPX1,ISCPY1,NFX(J),NFY(J),ISCPX1,ISCPY1\n     *          ,I)\n1990  CONTINUE\n2000  IF (IMPULS.EQ.1) GO TO 2030\n2010  IF (ISHUPD.NE.IZUP) GO TO 2020\n      CALL BEEP2\n      CALL PRMSG ('AUTOMATIC NAVIGATION CONTROL LOCKED IN',IW(38))\n      CALL PRMSG ('SHIELDS DROPPED.',IW(16))\n      CALL LINEF\n      ISHUPD = IZDOWN\n2020  CALL LINEF\n      CALL PRMSM ('COURSE PLOTTED FOR QUADRANT ',28,IW(28),\n     *            ITQY,ITQX,',',1,1)\n      CALL PRMSM (\n     *  'SECTOR ',7,IW(7),ITSY,ITSX,'AND LOCKED IN',13,IW(13))\n      CALL LINEF\n      CALL PRMRM ('COURSE LAID IN, WARP FACTOR ',28,IW(28),\n     *            WFACT,' ',0,1)\n      CALL ADDQUE ('MOVE')\n      NQFLAG = 1\n      GO TO 2040\n2030  CALL PRMSM ('COURSE PLOTTED FOR ',19,IW(19),ITQY,ITQX,' ',0,1)\n      CALL PRMSM (' ',0,1,ITSY,ITSX,'AND LOCKED IN',13,IW(13))\n      CALL LINEF\n      CALL PRMSG ('COURSE LAID IN, MAXIMUM IMPULSE FACTOR',IW(38))\n2040  CALL LONINT (ITQX,ITQY,ITSX,ITSY,IRTN,IIX,IIY)\n      LNAVC1 = IRTN\n      IF (IRTN.EQ.IZCLER.OR.LNAVXX.EQ.1) GO TO 2330\n      GO TO 2170\n2050  IF (LNAVXX.EQ.1) GO TO 2100\n      IF (IMPULS.EQ.1.OR.ISHUPD.NE.IZUP) GO TO 2090\n      IF (ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZGRE) GO TO 2060\n      F = ENGUSE(DIST(5,ITSX,5,ITSY,5,ISCPX2,5,ISCPY2),WFACT)\n      IF (F.LE.50.0) GO TO 2080\n2060  CALL BEEP2\n      CALL PRMSG ('SHIELDS DROPPED FOR IN-QUADRANT MOVE',IW(36))\n      CALL LINEF\n      ISHUPD = IZDOWN\n      CALL PRMSM ('MOVING TO SECTOR ',17,IW(17),ITSY,ITSX,\n     *     'LORD COMMANDER',14,IW(14))\n      IF (ICROG(ICHART(ISCPX1,ISCPY1)).EQ.IZGRE) GO TO 2100\n      IF (ENERGY.GT.800.0.AND.ISHENG.GT.1250) GO TO 2070\n      CALL PRMRM ('CURRENT ENERGY = ',17,IW(17),ENERGY,' ',0,1)\n      CALL PRMIM ('CURRENT SHIELD ENERGY = ',24,IW(24),ISHENG,' ',0,1)\n      CALL YESNO ('DO YOU WISH TO RAISE SHIELDS',IW(28),28,IYES)\n      IF (IYES.EQ.0) GO TO 2100\n      IF (IYES.EQ.1) GO TO 2070\n2070  CALL LINEF\n      CALL PRMSG ('SHIELDS RE-RAISED',IW(17))\n      ISHUPD = IZUP\n      CALL LINEF\n      ENERGY = ENERGY-50.0\n      GO TO 2100\n2080  ENERGY = ENERGY-F\n      IF (ISHUPD.EQ.IZUP) ENERGY = ENERGY-F\n2090  CALL PRMSM ('MOVING TO SECTOR: ',18,IW(18),ITSY,ITSX,\n     *     'LORD COMMANDER',14,IW(14))\n2100  IIX = ITSX\n      IIY = ITSY\n      DPRESX = ISCPX2\n      DPRESY = ISCPY2\n      TVX = DPRESX\n      TVY = DPRESY\n      STX = FLOAT(IIX)\n      STY = FLOAT(IIY)\n      CALL TARSET (DPRESX,DPRESY,STX,STY,ITRCON,LRUDD,SC)\n      XLRUD = FLOAT(LRUDD)\n2110  IF (ITRCON.EQ.KZX) GO TO 2120\n      TVY = TVY+XLRUD\n      TVX = TVX+SC\n      GO TO 2130\n2120  TVX = TVX+XLRUD\n      TVY = TVY+SC\n2130  ITX = IFIX(TVX+0.5001)\n      ITY = IFIX(TVY+0.5001)\n      IF (ISECT(ITX,ITY).NE.ICRDOT) GO TO 2140\n      IF (ITX.EQ.IIX.AND.ITY.EQ.IIY) GO TO 2150\n      GO TO 2110\n2140  IIX = ITX\n      IIY = ITY\n      IRTN = ISECT(ITX,ITY)\n      GO TO 2160\n2150  IRTN = IZCLER\n2160  LNAVC1 = IRTN\n      IF (LNAVXX.EQ.1) GO TO 2330\n      NOCNG = 1\n      ISECT(ISCPX2,ISCPY2) = ICRDOT\n      ISECT(ITSX,ITSY) = KZS\n      LNAVC1 = IRTN\n      IF (IRTN.EQ.IZCLER) GO TO 2330\n2170  CALL BEEP\n      CALL ADDQUE('REDA')\n      IF (IRTN.NE.ICRSTR) GO TO 2180\n      CALL PRMSM ('KAZH CAUSES HYPERSPACE RUPTURE OF STAR AT: ',\n     *    43,IW(43),IIY,IIX,' ',0,1)\n      CALL LINEF\n      CALL PRMSM ('*** STAR AT: ',13,IW(13),IIY,IIX,' NOVAS',6,IW(6))\n      CALL LINEF\n      CALL PRMSG ('YOU HAVE BEEN BURNED TO A FINE INTERSTELLAR DUST',\n     *    IW(48))\n      CALL PRMSG ('BY A NOVA.  NO DEFLECTOR SHIELD KNOWN WOULD HAVE',\n     *    IW(48))\n      CALL PRMSG ('MADE ANY DIFFERENCE',IW(19))\n      GO TO 2560\n2180  IF (IRTN.NE.ICRCRH) GO TO 2250\n      CALL ADDQUE('REDA')\n      CALL PRMSG ('EMERGENCY -- DOUBLE RED ALERT',IW(29))\n      CALL PRMSM ('KAZH BEING PULLED INTO BLACK HOLE AT: ',38,IW(38),\n     *     IIY,IIX,' ',0,1)\n      IF (XWEDC.GT.0.001.OR.ENERGY.LT.3000.0) GO TO 2230\n      CALL PRMSG (\n     *  'ALL ENGINES AT FULL EMERGENCY REVERSE, LORD COMMANDER',IW(53))\n      CALL PRMSG (\n     *  'ALL POWER CHANNELED TO WARP AND IMPULSE ENGINES',IW(47))\n      IBLOWT = IFIX(RAND(5000.0)+7400.5)\n      CALL PRMSG (\n     *  'MATTER ANTI MATTER CONVERTERS OVERHEATING, LORD COMMANDER',\n     *  IW(57))\n      CALL LINEF\n      IBLOWL = IFIX(8900.0+RAND(1050.0))\n      DO 2190 I = 7400, IBLOWT, 200\n           IF (IBMT.EQ.1) GO TO 2191\n           CALL PRMIM ('TEMPERATURE NOW, ',17,IW(17),I,\n     *                                         'AND RISING',10,IW(10))\n2191       IF (I.GT.IBLOWL) GO TO 2320\n2190  CONTINUE\n      ENERGY = ENERGY-(RAND(500.0)+2500.0)\n      XWEDC = RAND(2.0)+1.0\n      XIEDC = RAND(5.0)+1.0+XIEDC\n      CALL LINEF\n      CALL PRMSG ('WE''RE BREAKING FREE, LORD COMMANDER!  ',IW(36))\n      CALL LINEF\n      CALL PRMSG ('YOUR BLACK HOLE VEERING HAS SENT YOU WHIPPING',\n     *             IW(45))\n      CALL PRMSG ('AROUND THE BLACK HOLE AT GREATER THAN WARP 15',\n     *             IW(45))\n      CALL PRMSG ('YOU HAVE BEEN THROWN CLEAR',IW(26))\n      CALL LINEF\n      CALL PRMSG ('*** KAZH ENTERS TIME-SPACE DISTORTION GAP',IW(41))\n      CALL LINEF\n      CALL PRMSG ('TIME HAS STOPPED MOMENTARILY, YOU ARE TRAVELING',\n     *             IW(47))\n      XR = RAND(3.0)+15.0\n      CALL PRMRM ('AT WARP FACTOR, ',16,IW(16),XR,\n     *     'PROPELLED BY THE BLACK HOLE',27,IW(27))\n      XX = RAND(1.0)\n      IF (XX.LT..7) GO TO 2200\n      CALL LINEF\n      CALL PRMSG ('*** KAZH SLAMS INTO THE GALACTIC ENERGY BARRIER',\n     *  IW(47))\n      CALL PRMRM ('AT WARP: ',9,IW(9),XR,'AND BREAKS UP.',14,IW(14))\n      CALL LINEF\n      GO TO 2560\n2200  CALL LOCATE (KZF,J,J)\n      IF (NFED.EQ.0) GO TO 2220\n      DO 2210 J = 1, NFED\n           CALL SSMOVO (IUSFED,ISCPX1,ISCPY1,NFX(J),NFY(J),ISCPX1,ISCPY1\n     *          ,I)\n2210  CONTINUE\n2220  ISCPX1 = RAND(8.0)+1.0\n      ISCPY1 = RAND(8.0)+1.0\n      ISCPY2 = RAND(10.0)+1.0\n      ISCPX2 = RAND(10.0)+1.0\n      CALL PRMSM ('YOUR SHIP HAS COME TO REST IN QUADRANT: ',\n     *     40,IW(40),ISCPY1,ISCPX1,' ',0,1)\n      CALL PRMSM ('SECTOR: ',8,IW(8),ISCPY2,ISCPX2,' ',0,1)\n      CALL LINEF\n      CALL PRMSG ('*** WARP AND IMPULSE ENGINES DAMAGED',IW(36))\n      CALL LINEF\n      CALL ITERPT\n      CALL SECSET\n      GO TO 100\n2230  CALL PRMSM ('*** KAZH PULLED INTO BLACK HOLE AT: ',36,IW(36),\n     *    IIY,IIX,' ',0,1)\n      IF (XWEDC.GT.0.001) GO TO 2240\n      CALL PRMSG ('YOU DID NOT HAVE THE AVAILABLE ENGERY NEEDED.',\n     *    IW(45))\n      GO TO 2560\n2240  CALL PRMSG ('(WARP ENGINES NOT USABLE)',IW(25))\n      GO TO 2560\n2250  IF (IRTN.NE.KZC) GO TO 2260\n      CALL PRMSM ('*** KAZH RAMS COMMANDER AT: ',28,IW(28),\n     *            IIY,IIX,' ',0,1)\n      CALL PRMSM ('*** KAZH AND COMMANDER AT: ',\n     *     27,IW(27),IIY,IIX,'DESTROYED',9,IW(9))\n      IKCC = IKCC+1\n      GO TO 2560\n2260  IF (IRTN.NE.KZB) GO TO 2280\n      CALL PRMSM ('*** KAZH RAMS STARBASE AT: ',27,IW(27),\n     *          IIY,IIX,' ',0,1)\n      CALL LINEF\n      IF (ITORCT.GT.0) GO TO 2270\n      CALL PRMSG ('SINCE YOU HAD NO DISRUPTOR TORPEDOS LEFT,',IW(41))\n      CALL PRMSG ('THAT WAS THE BEST THING YOU COULD HAVE DONE',IW(43))\n      CALL LINEF\n2270  CALL PRMSG ('*** KAZH AND STARBASE DESTROYED',IW(31))\n      ISB = ISB-1\n      ISBC = ISBC+1\n      GO TO 2560\n2280  IF (IRTN.NE.KZF) GO TO 2290\n      CALL PRMSM ('*** KAZH RAMS FEDERATION STARSHIP AT: ',\n     *           38,IW(38),IIY,IIX,' ',0,1)\n      CALL PRMSM ('*** KAZH AND STARSHIP AT ',\n     *            25,IW(25),IIY,IIX,'DESTROYED',9,IW(9))\n      IFSC = IFSC+1\n      IFS = IFS-1\n      GO TO 2560\n2290  IF (IRTN.EQ.KZP) GO TO 2291\n      CALL PRMSG ('PLEASE REPORT ERROR ROUTINE=KL (ERROR 01)',IW(40))\n      CALL PRMSG ('NOW CALLING FREEZE TO SAVE DATA',IW(30))\n      CALL FREEZE\n2291  CALL LINEF\n      CALL PRMSM ('*** KAZH HITS PLANET AT ',24,IW(24),IIY,IIX,' ',0,1)\n      CALL LINEF\n      CALL PRMSG ('THE BLAST FROM THE ANTI-MATTER IN YOUR ENGINES',\n     *           IW(46))\n      CALL PRMSG ('DESTROYS THE PLANET... AND YOU AS WELL. ',IW(39))\n      CALL LINEF\n      IPR = IPR-1\n      J = IPLNET(ISCPX1,ISCPY1)/10\n      IF (J.GT.9999) GO TO 2300\n      IPLC = IPLC+100+(J/100.0+.5)\n      ET = ET+.000025*J\n      GO TO 2310\n2300  IPLC = IPLC+600+((J-10000)/100.0+.5)\n      ET = ET+.25+.000025*((J-10000)/100.0+.5)\n2310  IPLNET(ISCPX1,ISCPY1) = 0\n      GO TO 2560\n2320  CALL LINEF\n      CALL PRMSG ('THE INTERNAL SHIELDS ON YOUR ENGINES BREAK DOWN DUE',\n     *     IW(51))\n      CALL PRMSG (\n     *'TO THE HEAT, AND YOUR WARP AND IMPULSE ENGINES DETONATE',IW(55))\n      GO TO 2560\n2330  DISTT = DIST(ITQX,ITSX,ITQY,ITSY,ISCPX1,ISCPX2,ISCPY1,ISCPY2)\n      IF (LNAVXX.EQ.1) GO TO 2340\n      CALL PRMRM ('DISTANCE TRAVELED: ',19,IW(19),DISTT,' ',0,1)\n      IF (NQFLAG.EQ.0) GO TO 2340\n      NQFLAG = 0\n      CALL ADDQUE ('NEWQ')\n2340  DTNAV = DISTT\n      IF (IMPULS.EQ.1) GO TO 2350\n      E = ENGUSE(DISTT,WFACT)-(TIMUSE(DISTT,WFACT)*1024.0)\n      T = TIMUSE(DISTT,WFACT)\n      GO TO 2360\n2350  E = (DISTT*100+50)-(1.052632*DISTT*1024.0)\n      T = 1.052632*DISTT\n      IMPULS = 0\n2360  IF (LNAVXX.EQ.0) GO TO 2380\n      LNAVXX = 0\n      MSG3(8) = IZBLOC\n      MSG3(9) = IZBLC2\n      IF (LNAVC1.NE.IZCLER) GO TO 2365\n      MSG3(8) = IZCLER\n      MSG3(9) = KZR\n2365  IMPULS = 0\n      MSG4(8) = IZINCR\n      MSG4(9) = IZEASE\n      IF (E.GT.0.0) MSG4(8) = IZDECR\n      CALL LINEF\n      CALL PRMSM ('TO MOVE TO QUADRANT ',20,IW(20),ITQY,ITQX,' ',0,1)\n      CALL PRMSM ('TARGET SECTOR ',14,IW(14),ITSY,ITSX,' ',0,1)\n      CALL PRMRM ('AT WARP FACTOR ',15,IW(15),WFACT,' ',0,1)\n      CALL PRMRM ('(DISTANCE - ',12,IW(12),DTNAV,')',1,1)\n      CALL PRMRM (MSG4,36,IW(36),ABS(E),'UNITS',5,IW(5))\n      CALL PRMRM ('AND USE UP ',11,IW(11),T,'STARDATES.',10,IW(10))\n      IF (XSSDC.GT..001) GO TO 100\n      CALL LINEF\n      CALL PRMSG (MSG3,IW(36))\n      GO TO 100\n2380  ENERGY = ENERGY-E\n      CSDATE = CSDATE+T\n      ISCPX1 = ITQX\n      ISCPY1 = ITQY\n      ISCPX2 = ITSX\n      ISCPY2 = ITSY\n      ISSAVE = 0\n      CALL REPAIR (T)\n      IF (WFACT.LT.10.0001) GO TO 2390\n      IF (RAND(100.0).GE.WFDAMG) GO TO 2390\n      XWEDC = XWEDC+(WFDDST*(WFACT-10.0))+RAND(.113)\n      CALL LINEF\n      CALL PRMSG ('WARP ENGINES HAVE BEEN DAMAGED, LORD COMMANDER',\n     *   IW(46))\n2390  IF (NOCNG.NE.1) GO TO 2400\n      CALL BATTLE\n      IF (ICHART(ISCPX1,ISCPY1).NE.9999) GO TO 100\n      CALL LINEF\n      CALL PRMSM ('KAZH HITS SUPERNOVA IN QUADRANT ',32,IW(32),\n     *            ISCPY1,ISCPX1,' ',0,1)\n      CALL LINEF\n      CALL PRMSG ('YOU ARE INSTANTLY BURNED TO INTERSTELLAR ASH BY',\n     *             IW(47))\n      CALL PRMSG ('A SUPERNOVA, THAT WAS VERY SLOPPY NAVIGATING',\n     *             IW(44))\n      GO TO 2560\n2400  CALL ITERPT\n      CALL SECSET\n      GO TO 100\n2420  IF (XWEDC.GT.5.0) GO TO 2490\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 2430\n      CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 1720\n      WVAL = RTN\n      GO TO 2440\n2430  CALL PRMSG ('ENTER -1 TO ABORT THIS COMMAND.',IW(31))\n      CALL READIN ('ENTER NEW WARP FACTOR - ',IW(24),24,1,EOFF)\n      IF (EOFF.GT..1) GO TO 2450\n      CALL GAP (N2)\n      CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 2450\n      WVAL = RTN\n2440  IF (WVAL.LT.0.0001) GO TO 2450\n      IF (WVAL.LT.1.0.OR.WVAL.GT.12.0) GO TO 2460\n      IF (WVAL.GT.5.0.AND.XWEDC.GT.0.001) GO TO 2480\n      IF (WVAL.GT.10.0) GO TO 2470\n      CALL PRMRM ('WARP FACTOR NOW ',16,IW(16),WVAL,\n     *     'AS PER YOUR ORDER LORD COMMANDER',32,IW(32))\n      WFACT = WVAL\n      GO TO 100\n2450  CALL PRMSG ('WARP FACTOR CHANGE ABORTED.',IW(27))\n      GO TO 100\n2460  CONTINUE\n      CALL PRMRM ('WARP FACTOR OF ',15,IW(15),WVAL,'NOT ALLOWED',\n     *     11,IW(11))\n      GO TO 100\n2470  CALL PRMSG ('ALTHOUGH THERE IS A VERY GOOD CHANCE',IW(36))\n      CALL PRMSG ('OF WARP DRIVE FAILURE AT THIS SPEED',IW(35))\n      CALL PRMSG ('YOUR ORDER WILL BE IMPLEMENTED IMMEDIATELY',IW(42))\n      CALL PRMRM ('LORD COMMANDER, WARP FACTOR NOW AT ',\n     *            35,IW(35),WVAL,' ',0,1)\n      WFACT = WVAL\n      GO TO 100\n2480  CALL PRMSG ('WARP ENGINES PARTIALY DAMAGED',IW(29))\n      CALL PRMSG ('WARP 5 IS THE MAXIMUM',IW(21))\n      GO TO 2430\n2490  CALL PRMSG ('WARP ENGINES NOT USEABLE',IW(24))\n      GO TO 100\nC     --- CALL ROUTINE FOR DEBUG MODE ACTIVATION\n2700  IF (INPUT(N2+1).NE.KZD.OR.INPUT(N2+2).NE.KZE.OR.INPUT(N2+3).NE.KZB\n     *     .OR.INPUT(N2+4).NE.KZU.OR.INPUT(N2+5).NE.KZG) GO TO 2705\n      CALL XDEBUG\n      GO TO 100\n2705  IF (INPUT(N2+1).NE.KZS.OR.INPUT(N2+2).NE.KZN.OR.INPUT(N2+3).NE.KZA\n     *     .OR.INPUT(N2+4).NE.KZP.OR.IDEBUG.NE.1)    GO TO 1720\n      CALL DEBUGX\n      CALL PRMSG ('XSNAP COMPLETE',IW(14))\n      GO TO 100\nC     --- CALL ROUTINE TO SAY ORBIT NOT DONE\n2510  CALL ORBIT\n      GO TO 100\nC     --- CALL ROUTINE TO GET HELP FOR USER\n2660  CALL HELP\n      GO TO 100\nC     --- SET IDIE = 1 IF USER DIED, 0 IF HE WON\n2560  CALL LINEF\n      IDIE = 1\n2570  CALL SCORE (REMAIN)\n2640  INIT = 1\n      CALL PLAGAN (I)\n      IF (I.NE.1) GO TO 2645\n      I = 1\n      IF (IBMT.EQ.1) CALL SHIFTC (I)\n      IF (I.NE.1) GO TO 2680\n      GO TO 20\n2645  CALL LINEF\n      CALL PRMSG ('MAY THE GLORY OF ALL KLINGON GO WITH YOU',IW(40))\n2680  CALL LINEF\n      INIT = 1\n      CALL LINEF\n      IF (IBMT.NE.1) GO TO 2690\n      CALL READIN('HIT ENTER TO TERMINATE PROGRAM',IW(30),30,1,EOFF)\n2690  CALL STAX(1)\n9999  STOP\n      END\n./     ADD     NAME=LINEF\nC*********************************************************************\n      SUBROUTINE LINEF\nC PURPOSE : DISPLAY A BLANK LINE\nC*********************************************************************\n      CALL PRMSG (' ',IW(1))\n      RETURN\n      END\n./     ADD     NAME=LOCATE\nC*********************************************************************\n      SUBROUTINE LOCATE (ITYPE,IX,IY)\nC PURPOSE : LOCATE THE FEDERATION STARSHIPS AND COMMANDERS IN QUADRANT\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,\n     *     ISTC,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),\n     * NCX(9),NCY(9)\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('LOCATE ENTERED',IW(14),0)\n      IF (ITYPE.NE.KZF) GO TO 30\n      J = 1\n      DO 20 I = 1, 10\n           DO 10 N = 1, 10\n                IF (ISECT(N,I).NE.KZF) GO TO 10\n                NFX(J) = N\n                NFY(J) = I\n                J = J+1\n10         CONTINUE\n20    CONTINUE\n      GO TO 90\n30    IF (ITYPE.NE.KZC) GO TO 60\n      M = 1\n      DO 50 I = 1, 10\n           DO 40 N = 1, 10\n                IF (ISECT(N,I).NE.KZC) GO TO 40\n                NCX(M) = N\n                NCY(M) = I\n                M = M+1\n40         CONTINUE\n50    CONTINUE\n      GO TO 90\n60    DO 80 I = 1, 10\n           DO 70 N = 1, 10\n                IF (ISECT(N,I).NE.ITYPE) GO TO 70\n                IX = N\n                IY = I\n                GO TO 90\n70         CONTINUE\n80    CONTINUE\n      CALL PRMSG ('REPORT ERROR 03-LOCATE  ',IW(23))\n      CALL PRMSG ('CALLING FREEZE TO SAVE DATA',IW(29))\n      CALL FREEZE\n90    CALL DBUGIN ('LOCATE EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=LONINT\nC*********************************************************************\n      SUBROUTINE LONINT (ITQX,ITQY,ITSX,ITSY,IRTN,IIX,IIY)\nC PURPOSE : CHECK TO SEE IF USER IS ABOUT TO MOVE THRU AN OBJECT\nC           (NOT ALLOWED)\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CHARACTER *4 CZCLER\n      EQUIVALENCE (CZCLER,IZCLER)\n      DATA CZCLER / 'CLEA'/\n      CALL DBUGIN ('LONINT ENTERED',IW(14),0)\n      PRESX = ISCPX1+((ISCPX2-1)*.1)\n      PRESY = ISCPY1+((ISCPY2-1)*.1)\n      TVX = ITQX+((ITSX-1)*.1)\n      TVY = ITQY+((ITSY-1)*.1)\n      CALL TARSET (PRESX,PRESY,TVX,TVY,ITARCN,ILRUD,SC)\n      TVX = FLOAT(ISCPX2)\n      TVY = FLOAT(ISCPY2)\n      XLRUD = FLOAT(ILRUD)\n10    IF (ITARCN.NE.KZX) GO TO 20\n      TVX = TVX+XLRUD\n      TVY = TVY+SC\n      GO TO 30\n20    TVX = TVX+SC\n      TVY = TVY+XLRUD\n30    ITVX = IFIX(TVX+.5001)\n      ITVY = IFIX(TVY+.5001)\n      IF (ITVX.GT.10.OR.ITVX.LT.1.OR.ITVY.GT.10.OR.ITVY.LT.1) GO TO 40\n      IF (ISECT(ITVX,ITVY).EQ.ICRDOT) GO TO 10\n      IRTN = ISECT(ITVX,ITVY)\n      IIX = ITVX\n      IIY = ITVY\n      GO TO 50\n40    IRTN = IZCLER\n50    CALL DBUGCH ('LONINT RTN',IW(10),IRTN,IW(4))\n      CALL DBUGIN ('LONINT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=LRSCAN\nC*********************************************************************\n      SUBROUTINE LRSCAN\nC PURPOSE : FOR CPU=0 DISPLAY LRS SCAN, FOR CPU=1, FILL THE IOUTT\nC           UNIT WITH LRS INFO TO BE READ LATER\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /CPU/ IBMT\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION JPLAN (9,2)\n      DATA NONE /999999/\n      CALL DBUGIN ('LRSCAN ENTERED',IW(14),0)\n      IOUT = IOUTT\n      IF (IBMT.EQ.1) IOUT = IOUT - 1\n      IF (XLRDC.GT.0.001) GO TO 220\n      IX = ISCPX1\n      IY = ISCPY1\n      IT2 = IY+1\n      IT = IY-1\n      N50 = IX-1\n      N51 = IX+1\n      IDXXX = 0\n      IF (IBMT.EQ.1) GO TO 100\n      CALL LINEF\n      CALL PRMSM ('LONG RANGE SCAN FOR AREA: ',24,IW(24),IY,IX,' ',0,1)\n      CALL LINEF\n      GO TO 110\n100   WRITE (IOUT,10000)\n110   IF (IX.EQ.1) GO TO 120\n      IF (IX.EQ.8) GO TO 130\n      GO TO 140\n120   WRITE (IOUT,10001) NONE,ICHART(IX,IT),  ICHART(N51,IT),\n     *                   NONE,ICHART(IX,IT+1),ICHART(N51,IT+1),\n     *                   NONE,ICHART(IX,IT+2),ICHART(N51,IT+2)\n      GO TO 150\n130   WRITE (IOUT,10001) ICHART(N50,IT),  ICHART(IX,IT),  NONE,\n     *                   ICHART(N50,IT+1),ICHART(IX,IT+1),NONE,\n     *                   ICHART(N50,IT+2),ICHART(IX,IT+2),NONE\n      GO TO 150\n140   WRITE (IOUT,10001)\n     *            ICHART(N50,IT),  ICHART(N50+1,IT),  ICHART(N51,IT),\n     *            ICHART(N50,IT+1),ICHART(N50+1,IT+1),ICHART(N51,IT+1),\n     *            ICHART(N50,IT+2),ICHART(N50+1,IT+2),ICHART(N51,IT+2)\n150   IF (N50.EQ.0) N50 = 1\n      IF (N51.EQ.9) N51 = 8\n      IF (IT2.EQ.9) IT2 = 8\n      IF (IT.EQ.0) IT = 1\n      IF (IBMT.EQ.0) CALL LINEF\n      DO 210 N60 = N50, N51\n           DO 200 N70 = IT, IT2\n                IKY(N60,N70) = 1\n                IF (IPLNET(N60,N70).EQ.0) GO TO 200\n                IF (IBMT.EQ.0)\n     *               CALL PRMSM (\n     *               'PLANET DETECTED IN QUADRANT: ',29,IW(29),N70,N60,\n     *               ' ',0,1)\n                IDXXX = IDXXX + 1\n                JPLAN (IDXXX,1) = N70\n                JPLAN (IDXXX,2) = N60\n200        CONTINUE\n210   CONTINUE\n      IF (IDXXX.EQ.0) GO TO 900\n      IF (IBMT.EQ.0) GO TO 900\n      WRITE(IOUT,10002) ((JPLAN(I,J),J=1,2),I=1,IDXXX)\n      GO TO 900\n220   WRITE (IOUT,10003)\n900   CALL DBUGIN ('LRSCAN EXITED',IW(13),0)\n      RETURN\n10000 FORMAT (1X,'LONG RANGE SCAN'/1X,'---------------')\n10001 FORMAT (1X,3(I4,1X)//1X,3(I4,1X)//1X,3(I4,1X))\n10002 FORMAT (1X,'PLANET(S) IN:'/(I2,'-',I2,3X,I2,'-',I2))\n10003 FORMAT (/' *LRS DAMAGED*')\n      END\n./     ADD     NAME=MAININ\nC*********************************************************************\n      SUBROUTINE MAININ (IZNOHT,IZRED,IZDOWN)\nC PURPOSE : DRIVE ALL INITIALIZATION ROUTINES\nC*********************************************************************\nC     VARIABLES IDUM, AND IDUM2 WERE ONCE PART OF FEATURES\nC     OF KLINGON, NO LONGER USED, HOWEVER, IF THEY ARE DELETED\nC     CERTAIN ROUTINES WOULD NEED RE-WRITES.\nC     CALL ROUTINE TO SET THE LEVEL OF PLAYER\nC     ----------------------------------------------------------------\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      CALL DBUGIN ('MAININ ENTERED',IW(14),0)\n      CALL STARTM\nC     --- INITIALIZE THE SHIPS AND CAPTAINS FOR THE FEDERATION\n      CALL SSTART\nC     --- SET DAMAGE CONTROLS TO ZERO AND INIT GAME VARIABLES\n      CALL INITDM\nC     --- INITIALIZE THE CHART STUFF, AND THE COUNTERS\n      CALL INITCH\n      CALL INITCT (IZNOHT,IZRED,IZDOWN)\nC     --- DISPLAY INFO ON INITIAL GAME SETUP\n      CALL DISPIN\nC     --- SET UP INFORMATION ABOUT POPULATION IN SECTOR\n      CALL ITERPT\n      CALL SECSET\n      CALL DBUGIN ('MAININ EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=M2FAST\nC*********************************************************************\n      SUBROUTINE M2FAST (WFACT,DIST,WDAMG)\nC PURPOSE : SEE IF THE USER HAS WARP SPEED SET TOO HIGH, IF SO\nC           WARN THEM AND ASK IF THEY WANT TO SLOW DOWN\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      CALL DBUGIN ('M2FAST ENTERED',IW(14),0)\n      IF (WFACT.LT.10.0001) GO TO 20\n      W = WFACT\n      WD = (DIST/6.0*(W-10.0))*100.0\n      IF (WD.GT.99.0) WD = 99.0\n      WDAMG = WD\n      CALL LINEF\n      CALL PRMRM (\n     * 'LORD COMMANDER, THERE IS A',26,IW(26),WD,'% CHANCE OF ',11,\n     *     IW(11))\n      CALL PRMSG (\n     *  'OUR WARP ENGINES BEING DAMAGED IF WE CONTINUE ',IW(45))\n      CALL PRMSG ('AT OUR PRESENT COURSE AND SPEED',IW(31))\n      CALL LINEF\n      CALL YESNO ('DO YOU WISH TO REDUCE SPEED ',IW(28),28,IYES)\n      CALL LINEF\n      IF (IYES.NE.1) GO TO 10\n      CALL PRMSG (\n     *  'REDUCING SPEED TO WARP FACTOR 10, LORD COMMANDER',IW(48))\n      WFACT = 10.0\n      GO TO 20\n10    CALL PRMSG ('AS YOU SO ORDER, LORD COMMANDER',IW(31))\n20    CALL DBUGIN ('M2FAST EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=NOVKIL\nC*********************************************************************\n      SUBROUTINE NOVKIL (IIX,IIY)\nC PURPOSE : KILL AND DAMAGE THINGS AROUND A STAR THAT NOVAS\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      INTEGER CSEC\n      COMMON /TRACOM/ TARX,TARY,PRESX,PRESY,NSECE(10,10),IHIT,ISBC,IFSC,\n     *     IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,\n     *     CSEC(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      DIMENSION IDMSG(11)\n      CHARACTER *4 CZMSG(11) , CZNOVD\n      EQUIVALENCE (CZMSG,IDMSG) , (CZNOVD,IZNOVD)\n      DATA CZMSG(1) /'** S'/ , CZMSG(2) /'TARS'/ , CZMSG(3) /'HIP '/ ,\n     *     CZMSG(4) /'U.S.'/ , CZMSG(5) /'S. '/ , CZMSG(9) /'AT S'/ ,\n     *     CZMSG(10) /'ECTO'/ , CZMSG(11) /'R: '/\n      DATA IDMSG(6) /0/ , IDMSG(7) /0/ , IDMSG(8) /0/\n      DATA CZNOVD / 'NOVA'/\n      CALL DBUGIN ('NOVKIL ENTERED',IW(14),0)\n      IY = IIY\n      IX = IIX\n      IF (CSEC(IX,IY).EQ.ICRCRH.OR.CSEC(IX,IY).EQ.ICRDOT) GO TO 100\n      IF (CSEC(IX,IY).EQ.ICRSTR) GO TO 100\n      IF (CSEC(IX,IY).NE.KZC) GO TO 10\n      CALL PRMSM (\n     *  '*** COMMANDER AT:',17,IW(17),IY,IX,\n     *  'DESTROYED BY NOVA',17,IW(17))\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-1000\n      NSECE(IX,IY) = 0\n      CSEC(IX,IY) = ICRDOT\n      IKCC = IKCC+1\n      IKC = IKC-1\n      GO TO 100\n10    IF (CSEC(IX,IY).NE.KZP) GO TO 40\n      CALL PRMSM (\n     *  '*** PLANET AT: ',15,IW(15),IY,IX,\n     *  'DESTROYED BY NOVA',17,IW(17))\n      IPR = IPR-1\n      IPLNET(ISCPX1,ISCPY1) = IPLNET(ISCPX1,ISCPY1)/10\n      IF (IPLNET(ISCPX1,ISCPY1).GT.9999) GO TO 20\n      IPLC = IPLC+100+(IPLNET(ISCPX1,ISCPY1)/100.0+.5)\n      ET = ET+.000025*IPLNET(ISCPX1,ISCPY1)\n      GO TO 30\n20    IPLC = IPLC+600+((IPLNET(ISCPX1,ISCPY1)-10000)/100.0+.5)\n      ET = ET+.25+.000025*((IPLNET(ISCPX1,ISCPY1)-10000)/100.0+.5)\n30    IPLNET(ISCPX1,ISCPY1) = 0\n      NSECE(IX,IY) = 0\n      CSEC(IX,IY) = ICRDOT\n      GO TO 100\n40    IF (CSEC(IX,IY).NE.KZF) GO TO 60\n      NSECE(IX,IY) = NSECE(IX,IY)-5100\n      IF (NSECE(IX,IY).LE.0) GO TO 50\n      CALL PRMSM ('*** FEDERATION STARSHIP AT: ',28,IW(28),IY,IX,\n     *     'DAMAGED BY NOVA',15,IW(15))\n      GO TO 100\n50    ET = ET+.3\n      IFS = IFS-1\n      IFSC = IFSC+1\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-100\n      NSECE(IX,IY) = 0\n      CSEC(IX,IY) = ICRDOT\n      CALL SSDEST (IUSFED,ISCPX1,ISCPY1,IX,IY,IDMSG(6))\n      CALL PRMSM (\n     *  IDMSG,44,IW(44),IY,IX,'DESTROYED BY NOVA',17,IW(17))\n      GO TO 100\n60    IF (CSEC(IX,IY).NE.KZB) GO TO 80\n      NSECE(IX,IY) = NSECE(IX,IY)-5100\n      IF (NSECE(IX,IY).LE.0) GO TO 70\n      CALL PRMSM (\n     *  '*** STARBASE AT: ',17,IW(17),IY,IX,\n     *  'DAMAGED BY NOVA',15,IW(15))\n      GO TO 100\n70    ET = ET+.5\n      ISB = ISB-1\n      ISBC = ISBC+1\n      CSEC(IX,IY) = ICRDOT\n      ICHART(ISCPX1,ISCPY1) = ICHART(ISCPX1,ISCPY1)-10\n      CALL PRMSM ('*** STARBASE AT: ',17,IW(17),IY,IX,\n     *  'DESTROYED BY NOVA',17,IW(17))\n      GO TO 100\n80    CALL BEEP\n      CALL ADDQUE('REDA')\n      IF (CSEC(IX,IY).EQ.KZS) GO TO 90\n      CALL PRMSG ('PLEASE REPORT NOVKIL ERROR 5   ',IW(28))\n      CALL PRMSG ('CALLING FREEZE TO SAVE DATA',IW(29))\n90    CALL PRMSG ('*** KAZH HIT BY BLAST OF NOVA',IW(29))\n      IHIT = IZNOVD\n100   CALL DBUGIN ('NOVKIL EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=NUMREC\nC*********************************************************************\n      SUBROUTINE NUMREC (ICOMSC,IPNTRO,IERRCD,RTN)\nC PURPOSE : TAKE A CHARACTER STRING CONTAINING A NUMBER, AND TURN\nC           IT INTO A REAL NUMBER, WHOLE  NUMBERS ARE COMPLETELY\nC           ACCURATE, DECIMAL NUMBERS CAN BE AS MUCH AS .001 OFF\nC*********************************************************************\n      DIMENSION ICOMSC(50),IWORK(26), IWRK2(26)\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('NUMREC ENTERED',IW(14),0)\n      IPNTR = IPNTRO\n      IERRCD = 0\n      IERCD = 0\n      NEGFLG = 1\n      DO 10 N=1,26\n           IWORK(N) = ICRBLK\n           IWRK2(N) = ICRZER\n10    CONTINUE\n20    IF (ICOMSC(IPNTR).NE.ICRPLS) GO TO 30\n      IPNTR = IPNTR+1\n      GO TO 20\n30    IF (ICOMSC(IPNTR).NE.ICRMIN) GO TO 40\n      NEGFLG = -1\n      IPNTR = IPNTR+1\n      GO TO 30\n40    IF (ICOMSC(IPNTR).EQ.ICRBLK) GO TO 210\n      N = IPNTR\n      J = 1\n      IDOTPS = 0\n50    IF (ICOMSC(N).EQ.ICRBLK.OR.J.GT.20) GO TO 60\n           IF (ICOMSC(N).EQ.ICRDOT) IDOTPS = J\n           IWORK(J) = ICOMSC(N)\n           N = N + 1\n           J = J + 1\n           GO TO 50\n60    IF (J.GT.20) GO TO 210\n      IF (IDOTPS.GT.0) GO TO 70\n           IDOTPS = J\n           IWORK(J) = ICRDOT\n           J = J + 1\n70    IDOTCT = 0\n      DO 100 N = 1,21\n           IF (IWORK(N).EQ.ICRDOT) IDOTCT = IDOTCT + 1\n100   CONTINUE\n      IF (IDOTCT.NE.1) GO TO 210\n      IF (IWORK(IDOTPS+4).EQ.ICRBLK) IWORK(IDOTPS+4) = ICRZER\n      IF (IWORK(IDOTPS+3).EQ.ICRBLK) IWORK(IDOTPS+3) = ICRZER\n      IF (IWORK(IDOTPS+2).EQ.ICRBLK) IWORK(IDOTPS+2) = ICRZER\n      IF (IWORK(IDOTPS+1).EQ.ICRBLK) IWORK(IDOTPS+1) = ICRZER\n      IWRK2(25) = IWORK(IDOTPS+4)\n      IWRK2(24) = IWORK(IDOTPS+3)\n      IWRK2(23) = IWORK(IDOTPS+2)\n      IWRK2(22) = IWORK(IDOTPS+1)\n      N = IDOTPS - 1\n      J = 21\n110   IF (N.LT.1) GO TO 120\n          IWRK2(J) = IWORK(N)\n          J = J - 1\n          N = N - 1\n          GO TO 110\n120   DO 130 N=1,25\n          CALL IDENT(IWRK2(N),IERR,IRTN)\n          IF (IERR.NE.0) GO TO 210\n130   CONTINUE\n      R = 0.0\n      CALL IDENT(IWRK2(22),IERR,IRTN)\n      R = R + .1 * FLOAT(IRTN)\n      CALL IDENT(IWRK2(23),IERR,IRTN)\n      R = R + .01 * FLOAT(IRTN)\n      CALL IDENT(IWRK2(24),IERR,IRTN)\n      R = R + .001 * FLOAT(IRTN)\n      CALL IDENT(IWRK2(25),IERR,IRTN)\n      R = R + .0001 * FLOAT(IRTN)\n      N = 1000000\n      J = 0\n      DO 200 I=15,21\n           CALL IDENT (IWRK2(I),IERR,IRTN)\n           J = J + (IRTN*N)\n           N = N/10\n200   CONTINUE\n      RTN = FLOAT(J) + R\n      RTN = RTN * NEGFLG\n      GO TO 220\n210   IERRCD = 1\n      RTN = 0.0\n220   CALL DBUGRN ('NUMREC RETURN VALUE',IW(19),RTN)\n      CALL DBUGIN ('NUMREC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=OLDNEW\nC*********************************************************************\n      SUBROUTINE OLDNEW (IOLDNW)\nC PURPOSE : FIND OUT IF USER WANTS OLD OR NEW GAME\nC     SET IOLDNW\nC     -1 = OLD GAME REQUESTED, ERROR IN GET\nC      1 = OLD GAME, GET OK\nC      0 = NEW GAME REQUESTED\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8), INPUT(50),IPAD3\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      CALL DBUGIN ('OLDNEW ENTERED',IW(14),0)\n10    IOLDNW = -100\n      CALL LINEF\n      CALL PRMSG ('DO YOU WISH TO START A NEW GAME OR RESUME',IW(41))\n      CALL READIN ('AN OLD ONE (NEW OR OLD) ',IW(24),24,1,EOFF)\n      IF (EOFF.GT..1) GO TO 10\n      CALL GAP (N2)\n      IF (INPUT(N2).EQ.KZO) IOLDNW = 1\n      IF (INPUT(N2).EQ.KZN) IOLDNW = 0\n      IF (INPUT(N2).EQ.KZH) CALL HELPRT('ONHELP      ',IW(12))\n      IF (IOLDNW.EQ.-100) GO TO 10\n      IF (IOLDNW.EQ.1)   CALL GET\n      IF (IPAD1(1).LT.0) IOLDNW = -1\n      IF (IOLDNW.EQ.1)  CALL PRMSG ('NOW RESUMING FROZEN GAME.',IW(25))\n      CALL DBUGIN ('OLDNEW EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=ORBIT\nC*********************************************************************\n      SUBROUTINE ORBIT\nC PURPOSE : PRINT MSG SAYING ORBIT NOT AVAIL\nC*********************************************************************\n      CALL DBUGIN ('ORBIT ENTERED',IW(13),0)\n      CALL LINEF\n      CALL PRMSG (\n     *'YOUR JOB IS NOT TO ORBIT PLANETS, JUST DESTROY THE ONES',IW(55))\n      CALL PRMSG ('MOST USEFUL TO THE FEDERATION.',IW(30))\n      CALL DBUGIN ('ORBIT EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=PERHIT\nC*********************************************************************\n      FUNCTION PERHIT (IFX,IFY,ITX,ITY)\nC PURPOSE : USING DISTANCE TO \"WEAKEN\" A PHASER SHOT FROM A FEDERATION\nC           STARSHIP, DETERMINE HOW MUCH OF THE SHOT HITS US\nC*********************************************************************\n      CALL DBUGIN ('PERHIT ENTERED',IW(14),0)\n      DISTC = DIST(5,ITX,5,ITY,5,IFX,5,IFY)\n      P = ABS(1.0-(DISTC/1.3))\n      PERHIT = P\n      CALL DBUGRN ('PERHIT VALUE',IW(12),P)\n      CALL DBUGIN ('PERHIT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PHASER\nC*********************************************************************\n      SUBROUTINE PHASER\nC PURPOSE : PRINT MSG SAYING WE DON'T HAVE PHASERS\nC*********************************************************************\n      CALL DBUGIN ('PHASER ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG (\n     *'PHASERS ARE A FEDERATION WEAPON... YOUR SHIP IS EQUIPPED',IW(56))\n      CALL PRMSG (\n     *'WITH DISRUPTOR TORPEDOS, AND YOUR COMMANDERS ARE EQUIPPED',\n     *     IW(57))\n      CALL PRMSG ('WITH TIGHT BEAM DISRUPTOR MOUNTS.',IW(33))\n      CALL DBUGIN ('PHASER EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PHOTON\nC*********************************************************************\n      SUBROUTINE PHOTON (IRETRN,ITQX,ITSX,ITQY,ITSY,N2)\nC PURPOSE : TRACK AND REPORT TARGETS HIT BY OUR DISRUPTOR TORPEDOS\nC           (THE TERM PHOTON AND DISTRUPTOR ARE USED INTERCHAGABLY)\nC*********************************************************************\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      DIMENSION IRG(8,8), FIRE(8), DISVEC(8,8), VECD2(8,8), NUMS(10),\n     * MSGX(11), IDMSG(11)\n      EQUIVALENCE (NUMS(1),ICRZER)\n      CHARACTER *4 CZMSGX(11) , CZMSG(11)\n      EQUIVALENCE (CZMSGX,MSGX) , (CZMSG,IDMSG)\n      DATA CZMSGX(1)/'ENTE'/,CZMSGX(2)/'R TA'/,CZMSGX(3)/'RGET'/,\n     *     CZMSGX(4)/' SEC'/,CZMSGX(5)/'TOR '/,CZMSGX(6)/'FOR '/,\n     *     CZMSGX(7)/'TORP'/,CZMSGX(8)/'EDO '/,CZMSGX(9)/'NUMB'/,\n     *     CZMSGX(10)/'ER '/\n      DATA MSGX(11) /0/\n      DATA CZMSG(1) /'** S'/ , CZMSG(2) /'TARS'/ , CZMSG(3) /'HIP '/ ,\n     *     CZMSG(4) /'U.S.'/ , CZMSG(5) /'S. '/ , CZMSG(9) /'AT S'/ ,\n     *     CZMSG(10) /'ECTO'/ , CZMSG(11) /'R: '/\n      DATA IDMSG(6) /0/ , IDMSG(7) /0/ , IDMSG(8) /0/\n      CHARACTER *4 CZRED , CZSUPN , CZGRE , CZNOVD , CZCLER , CZDAMG ,\n     *             CZDOWN , CZBLOW\n      EQUIVALENCE (CZRED,IZRED) , (CZSUPN,IZSUPN) , (CZGRE,IZGRE) ,\n     *        (CZNOVD,IZNOVD) , (CZCLER,IZCLER) , (CZDAMG,IZDAMG) ,\n     *            (CZDOWN,IZDOWN) , (CZBLOW,IZBLOW)\n      DATA CZRED  / 'RED'/, CZSUPN /'SNOV'/\n      DATA CZGRE  / 'GREE'/\n      DATA CZNOVD / 'NOVA'/\n      DATA CZCLER / 'CLEA'/\n      DATA CZDAMG / 'DAMG'/\n      DATA CZDOWN / 'DOWN'/\n      DATA CZBLOW / 'BLOW'/\n      CALL DBUGIN ('PHOTON ENTERED',IW(14),0)\n      IRETRN = 0\n      CALL LINEF\n      IMAXT = 4\n      IF (XPTDC.GT.0.001) GO TO 1450\n810   IF (ITORCT.EQ.0) GO TO 1430\n      IFRCNT = 0\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 850\n      IF (INPUT(N2).EQ.ICRMIN.OR.INPUT(N2).EQ.ICRZER) GO TO 150\n      IF (INPUT(N2+1).NE.ICRBLK) GO TO 1720\n      CALL IDENT (INPUT(N2),IERR,IFIRE)\n      IF (IERR.NE.0) GO TO 850\n      IF (IFIRE.GT.IMAXT) GO TO 860\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 870\n820   IF (N2.GT.50) GO TO 830\n      CALL NUMREC (INPUT,N2,IERR,RTN)\n      IF (IERR.NE.0) GO TO 1720\n      IF (ABS(RTN).LT.0.000001) GO TO 150\n      IFRCNT = IFRCNT+1\n      IF (RTN.LT.0.5.OR.RTN.GT.10.5) GO TO 1720\n      FIRE(IFRCNT) = RTN\n      CALL BRIDGE (N2)\n      GO TO 820\n830   IF (IFRCNT.NE.2.AND.IFRCNT/2.NE.IFIRE) GO TO 1720\n      IF (IFRCNT.NE.2) GO TO 890\n      RX = FIRE(2)\n      RY = FIRE(1)\n      DO 840 J = 3, 8, 2\n           FIRE(J) = RY\n           FIRE(J+1) = RX\n840   CONTINUE\n      GO TO 890\n850   CALL PRMSG ('TO ABORT THIS COMMAND ENTER 0 0 (ZERO,ZERO)',IW(43))\n      CALL READIN ('NUMBER OF TORPEDOES TO FIRE - ',IW(30),30,1,EOFF)\n      IF (EOFF.GT..1) GO TO 150\n      CALL GAP (N2)\n      CALL IDENT (INPUT(N2),IERR,IFIRE)\n      IF (IERR.NE.0) GO TO 1720\n      IF (IFIRE.LE.0) GO TO 150\n      IF (IFIRE.GT.ITORCT) GO TO 1440\n      IF (IFIRE.LE.IMAXT) GO TO 870\n860   CALL PRMIM ('MAXIMUM OF ',11,IW(11),IMAXT,\n     *           'TORPEDOES PER BURST',20,IW(20))\n      IF (IMAXT.NE.4) CALL PRMSG ('(DUE TO TUBE DAMAGE)',IW(20))\n      GO TO 850\n870   DO 880 J = 1, IFIRE\n           NX = J*2\n           MSGX(11) = NUMS(J+1)\n           CALL LINEF\n           CALL READIN (MSGX,IW(44),44,1,EOFF)\n           IF (EOFF.GT..1) GO TO 150\n           CALL GAP (N2)\n           IF (N2.GT.50) GO TO 150\n           CALL NUMREC (INPUT,N2,IERR,FIRE(NX-1))\n           IF (IERR.NE.0) GO TO 1720\n           CALL BRIDGE (N2)\n           IF (N2.GT.50) GO TO 150\n           CALL NUMREC (INPUT,N2,IERR,FIRE(NX))\n           IF (IERR.NE.0) GO TO 1720\n           IF (FIRE(NX).LT..01.OR.FIRE(NX-1).LT..01) GO TO 150\n           IF (FIRE(NX).LT..5.OR.FIRE(NX).GT.10.5.OR.FIRE(NX-1).LT..\n     *          5.OR.FIRE(NX-1).GT.10.5) GO TO 1720\n880   CONTINUE\n890   IFIRE2 = IFIRE*2\n      IF (IFIRE.GT.ITORCT) GO TO 1440\n      DO 900 J = 1, IFIRE2, 2\n           I3Y = FIRE(J)+0.500001\n           I3X = FIRE(J+1)+0.500001\n           IF (ISECT(I3X,I3Y).EQ.KZS) GO TO 1420\n900   CONTINUE\n      IEMXC = 0\n      DO 910 J = 1, IFIRE2, 2\n           TARY = FIRE(J)\n           TARX = FIRE(J+1)\n           CALL TRACK\n           ITORCT = ITORCT-1\n           IEMXC = IEMXC+1\n           IF (J+2.GT.IFIRE2) GO TO 910\n           IF (IHIT.EQ.IZNOVD.OR.IHIT.EQ.IZBLOW.OR.IHIT.EQ.IZSUPN) GO TO\n     *           920\n910   CONTINUE\n      IF (IHIT.EQ.IZNOVD.OR.IHIT.EQ.IZBLOW.OR.IHIT.EQ.IZSUPN) GO TO 920\n      GO TO 1410\n920   CALL PRMSG ('REMAINDER OF BURST ABORTED',IW(26))\n      IEMXC2 = IFIRE-IEMXC\n      IF (IEMXC2.LT.1) GO TO 925\n      CALL PRMIM ('(THE REMAINING ',15,IW(15),IEMXC2,\n     *     'TORPEDOS WERE DUMPED INTO SPACE)',32,IW(32))\n      ITORCT = ITORCT-IEMXC2\n925   IF (IHIT.NE.IZSUPN) GO TO 1300\n      CALL LINEF\n      ITX = IFIX(TVX+.5001)\n      ITY = IFIX(TVY+.5001)\n      BLOWD = DIST(5,ITX,5,ITY,5,ISCPX2,5,ISCPY2)\n      IF (BLOWD.GT..2001) GO TO 930\n      CALL PRMSG ('EMERGENCY DROP IN...',IW(20))\n      CALL LINEF\n      CALL PRMSG (\n     *  'YOU WERE CLOSER THAN 2 SECTORS AWAY FROM THE SUPERNOVA,',\n     *   IW(55))\n      CALL PRMSG (\n     *  'YOUR SHIP''S COMPUTER DIDN''T HAVE TIME TO GET YOU AWAY.',\n     *   IW(53))\n      CALL PRMSG ('(PROVIDED IT WAS WORKING)',IW(25))\n      GO TO 2560\n930   IF (BLOWD.GT..5.OR.XWEDC.LE.0.001) GO TO 950\n940   CALL PRMSG ('EMERGENCY DROP INTO HYP...',IW(26))\n      CALL LINEF\n      CALL PRMSG (\n     *  'YOUR SHIP IS CREMATED BY A SUPERNOVA (YOUR WARP ENGINES',\n     *    IW(55))\n      CALL PRMSG (\n     *  'WERE DAMAGED AND YOU COULD NOT MAKE THE JUMP INTO HYPER-',\n     *    IW(56))\n      IF (XWEDC.GT.5.0) CALL PRMSG ('SPACE).',IW(7))\n      IF (XWEDC.LE.5.0) CALL PRMSG ('SPACE FAST ENOUGH).',IW(19))\n      GO TO 2560\n950   IF (XWEDC.GT.5.0) GO TO 940\n      CALL PRMSG ('EMERGENCY DROP INTO HYPERSPACE COMPLETE',IW(39))\n      CALL LINEF\n      IF (ENERGY.GT.50.0) GO TO 960\n      CALL PRMSG (\n     *  'YOUR SHIP DID NOT HAVE THE ENERGY NEEDED TO HOLD YOU'\n     *     ,IW(52))\n      CALL PRMSG (\n     *  'IN HYPERSPACE, YOUR SHIP DROPS BACK INTO NORMAL SPACE',IW(53))\n      CALL PRMSG ('AND GETS BURNED TO ASHES',IW(24))\n      GO TO 2560\n960   ENERGY = ENERGY-50.0\n      IF (XCDC.LE.0.001) GO TO 980\n      CALL PRMSG ('COMPUTER DAMAGED -- SETTING RANDOM COURSE',IW(41))\n      CALL LINEF\n970   RFX = RAND(0.9)+1.0\n      RFY = RAND(0.9)+1.0\n      IF (RAND(10.0).GT.5.0) RFX = -RFX\n      IF (RAND(10.0).GT.5.0) RFY = -RFY\n      IDISPX = IFIX(RFX*100.0)\n      IDISPY = IFIX(RFY*100.0)\n      IDISPX = (IDISPX+ISGN(IDISPX))/10\n      IDISPY = (IDISPY+ISGN(IDISPY))/10\n      ISCX = (ISCPX1*10+ISCPX2-1)+IDISPX\n      ISCY = (ISCPY1*10+ISCPY2-1)+IDISPY\n      MTX = ISCX/10\n      MTY = ISCY/10\n      IF (MTX.GT.8.OR.MTX.LT.1.OR.MTY.GT.8.OR.MTY.LT.1) GO TO 970\n      ITQX = MTX\n      ITQY = MTY\n      ITSX = MOD(ISCX,10)+1\n      ITSY = MOD(ISCY,10)+1\n      GO TO 1170\n980   CALL PRMSG ('COMPUTER CONTROL ACTIVATED',IW(26))\n      CALL LINEF\n      ILOX = ISCPX1-ISGN(ISCPX1-1)\n      IHIX = ISGN(8-ISCPX1)+ISCPX1\n      ILOY = ISCPY1-ISGN(ISCPY1-1)\n      IHIY = ISGN(8-ISCPY1)+ISCPY1\n      IAQ = 0\n      IAQFLG = 0\n      DO 1000 I = ILOX, IHIX\n           DO 990 J = ILOY, IHIY\n                IAQ = IAQ+1\n                D = DIST(I,5,J,5,ISCPX1,ISCPX2,ISCPY1,ISCPY2)\n                DISVEC(I,J) = D\n990        CONTINUE\n1000  CONTINUE\n      DISVEC(ISCPX1,ISCPY1) = 999.5\n      IRG(ISCPX1,ISCPY1) = IZRED\nC     --- SUBTRACT ONE FROM IAQ, TO ACCOUNT FOR PRESENT QUADRANT\n      IAQ = IAQ-1\n      CALL COPVEC (VECD2,DISVEC,ILOX,IHIX,ILOY,IHIY)\n      IAQ2 = IAQ\n      IF (XLRDC.LE.0.001) CALL PRMSG (\n     *  'LONG RANGE SCANNER DATA PLOTTED INTO COMPUTER',IW(45))\n      IF (XLRDC.GT.0.001) CALL PRMSG (\n     *  'LONG RANGE SCANNER DATA NOT AVAILABLE',IW(37))\n      DO 1020 I = ILOX, IHIX\n           DO 1010 J = ILOY, IHIY\n                IRG(I,J) = IZGRE\n                IF (XLRDC.LE.0.001) IRG(I,J) = ICROG(ICHART(I,J))\n1010       CONTINUE\n1020  CONTINUE\n      CALL LINEF\n      IF (XSSDC.LE.0.001) CALL PRMSG (\n     *  'SHORT RANGE SCANNER DATA PLOTTED INTO COMPUTER',IW(46))\n      IF (XSSDC.GT.0.001) CALL PRMSG (\n     *  'SHORT RANGE SCANNER DATA NOT AVAILABLE',IW(38))\n1030  IF (IAQFLG.NE.-1.OR.IAQ2.GT.0) GO TO 1050\n1040  CALL PRMSG (\n     *  'COMPUTER UNABLE TO FIND PATH OUT OF QUADRANT, YOU ARE',\n     *     IW(53))\n      CALL PRMSG ('BURNED TO A FINE INTERSTELLAR DUST BY THE SUPERNOVA',\n     *     IW(51))\n      GO TO 2560\n1050  IF (XLRDC.GT.0.001) IAQFLG = -1\n1060  DO 1080 I = ILOX, IHIX\n           DO 1070 J = ILOY, IHIY\n                IF (IRG(I,J).EQ.IZGRE) GO TO 1070\n                VECD2(I,J) = 999.0\n                IAQ2 = IAQ2-1\n1070       CONTINUE\n1080  CONTINUE\n      IF (IAQ2.EQ.0) GO TO 1110\n      RMIN = 1000.0\n      DO 1100 I = ILOX, IHIX\n           DO 1090 J = ILOY, IHIY\n                IF (RMIN.LT.VECD2(I,J)) GO TO 1090\n                RMIN = VECD2(I,J)\n                NQX = I\n                NQY = J\n1090       CONTINUE\n1100  CONTINUE\n1110  IF (IAQ2.GT.0) GO TO 1140\n      DO 1130 I = ILOX, IHIX\n           DO 1120 J = ILOY, IHIY\n                IRG(I,J) = IZGRE\n                IF (ICHART(I,J).EQ.9999) IRG(I,J) = IZRED\n1120       CONTINUE\n1130  CONTINUE\n      CALL COPVEC (VECD2,DISVEC,ILOX,IHIX,ILOY,IHIY)\n      IAQ2 = IAQ\n      IAQFLG = -1\n      GO TO 1060\n1140  IF (XSSDC.GT.0.001) GO TO 1150\n      CALL LONINT (NQX,NQY,5,5,IRTN,IIX,IIY)\n      IF (IRTN.EQ.IZCLER) GO TO 1150\n      IRG(NQX,NQY) = IZRED\n      IAQ2 = IAQ\n      GO TO 1030\n1150  IF (WFACT.GT.10.0) WFACT = 10.0\n      IF (WFACT.GT.7.0) GO TO 1160\n      WFACT = 7.0\n1160  CALL LINEF\n      IF (XWEDC.GT.0.001) WFACT = 5.0\n      CALL PRMRM ('WARP FACTOR NOW - ',18,IW(18),WFACT,' ',0,1)\n      CALL LINEF\n      CALL PRMSG ('HELM CONTROL NOW LOCKED INTO BATTLE COMPUTER',\n     *     IW(44))\n      CALL LINEF\n      CALL PRMSG ('STAND BY TO LEAVE QUADRANT ',IW(26))\n      CALL LINEF\n      IF (ICHART(NQX,NQY).EQ.9999) GO TO 1040\n      ITQY = NQY\n      ITQX = NQX\n      ITSX = 5\n      ITSY = 5\n1170  CALL ITERPT\n      IF (NFED.EQ.0) GO TO 1210\n      CALL LOCATE (KZF,IDUM,IDUM2)\n      DO 1200 M = 1, NFED\n           XXX = RAND(100.0)\n           IF (XXX.GT.55.0) GO TO 1190\n           I = 0\n1180       CALL ESCAPE (ISCPX1,ISCPY1,IX,IY)\n           I = I+1\n           IF (I.GT.7) GO TO 1190\n           IF (ICHART(IX,IY).GT.999) GO TO 1180\n           CALL LINEF\n           CALL SSMOVO (IUSFED,ISCPX1,ISCPY1,NFX(M),NFY(M),IX,IY,IDMSG(6\n     *          ))\n           CALL PRMSM (IDMSG,44,IW(44),NFY(M),NFX(M),' ',0,1)\n           CALL PRMSM ('ESCAPES TO QUADRANT ',20,IW(20),IY,IX,' ',0,1)\n           ICHART(IX,IY) = ICHART(IX,IY)+100\n           GO TO 1200\n1190       CALL LINEF\n           CALL SSDEST (IUSFED,ISCPX1,ISCPY1,NFX(M),NFY(M),IDMSG(6))\n           CALL PRMSM(IDMSG,44,IW(44),NFY(M),NFX(M),\n     *          'DESTROYED BY SUPERNOVA'\n     *          ,22,IW(22))\n           ET = ET+.3\n           IFS = IFS-1\n           IFSC = IFSC+1\n1200  CONTINUE\n1210  IF (NCOMM.EQ.0) GO TO 1250\n      CALL LOCATE (KZC,IDUM,IDUM2)\n      DO 1240 M = 1, NCOMM\n           XXX = RAND(100.0)\n           IF (XXX.GT.65.0) GO TO 1230\n           I = 0\n1220       CALL ESCAPE (ISCPX1,ISCPY1,IX,IY)\n           I = I+1\n           IF (I.GT.7) GO TO 1230\n           IF (ICHART(IX,IY).GT.9) GO TO 1220\n           CALL LINEF\n           CALL PRMSM ('*** COMMANDER AT ',17,IW(17),\n     *               NCY(M),NCX(M),' ',0,1)\n           CALL PRMSM ('ESCAPES TO QUADRANT ',20,IW(20),IY,IX,' ',0,1)\n           ICHART(IX,IY) = ICHART(IX,IY)+1000\n           GO TO 1240\n1230       CALL LINEF\n           CALL PRMSM ('*** COMMANDER AT ',17,IW(17),NCY(M),NCX(M),\n     *          'DESTROYED BY SUPERNOVA',22,IW(22))\n           IKC = IKC-1\n           IKCC = IKCC+1\n1240  CONTINUE\n1250  IF (NPLNTS.EQ.0) GO TO 1280\n      CALL LOCATE (KZP,IXP,IYP)\n      IPR = IPR-1\n      IPLNET(ISCPX1,ISCPY1) = IPLNET(ISCPX1,ISCPY1)/10\n      IF (IPLNET(ISCPX1,ISCPY1).GT.9999) GO TO 1260\n      IPLC = IPLC+100+(IPLNET(ISCPX1,ISCPY1)/100.0+.5)\n      ET = ET+.000025*IPLNET(ISCPX1,ISCPY1)\n      GO TO 1270\n1260  IPLC = IPLC+600+((IPLNET(ISCPX1,ISCPY1)-10000)/100.0+.5)\n      ET = ET+.25+.000025*((IPLNET(ISCPX1,ISCPY1)-10000)/100.0+.5)\n1270  IPLNET(ISCPX1,ISCPY1) = 0\n      CALL LINEF\n      CALL PRMSM ('*** PLANET AT ',14,IW(14),IYP,IXP,\n     *     'DESTROYED BY SUPERNOVA',\n     *     22,IW(22))\n1280  IF (NSBASE.EQ.0) GO TO 1290\n      CALL LOCATE (KZB,IXB,IYB)\n      ET = ET+.5\n      ISB = ISB-1\n      ISBC = ISBC+1\n      CALL LINEF\n      CALL PRMSM ('*** STARBASE AT ',16,IW(16),IYB,IXB,\n     *     'DESTROYED BY SUPERNOVA',22,IW(22))\n1290  IKY(ISCPX1,ISCPY1) = 1\n      ICHART(ISCPX1,ISCPY1) = 9999\n      CALL LINEF\n      GO TO 1950\n1300  IF (IHIT.NE.IZBLOW) GO TO 1350\n      CALL LINEF\n      CALL PRMSG ('EMERGENCY -- EMERGENCY',IW(22))\n      CALL LINEF\n      CALL PRMSG (\n     *  'AUTOMATIC EMERGENCY FIELD DAMPENING SYSTEM ACTIVATED',\n     *   IW(52))\n      CALL LINEF\n      UNHIT = RAND(400.0)+2200.0\n      IF (ISHUPD.NE.IZDAMG) GO TO 1310\n      CALL PRMSG ('SHIELDS NOT USABLE, STAND BY FOR SHOCK WAVE',IW(43))\n      GO TO 1330\n1310  J = ISHENG-IFIX(UNHIT)\n      IF (J.GT.0) GO TO 1320\n      CALL PRMSG ('SHIELD ENERGY LOW, STAND BY FOR SHOCK WAVE',IW(42))\n      UNHIT = UNHIT-FLOAT(ISHENG)\n      ISHENG = 0\n      GO TO 1330\n1320  CALL PRMSG (\n     *  'AUTOMATIC FIELD DAMPENING SYSTEM TAKES FULL IMPACT OF',\n     *  IW(53))\n      CALL PRMSG ('BLAST, NO DAMAGE TO SHIP',IW(24))\n      ISHENG = ISHENG-IFIX(UNHIT)\n      GO TO 1340\n1330  CALL DAMAGE (UNHIT)\n1340  CALL LINEF\n      CALL PRMIM ('SHIELDS NOW AT: ',16,IW(16),ISHENG,'UNITS.',6,IW(6))\n      GO TO 1410\n1350  CALL LINEF\n      CALL PRMSG ('EMERGENCY -- EMERGENCY',IW(22))\n      CALL LINEF\n      CALL PRMSG (\n     *  'THE LIGHTS OF YOUR BRIDGE GO OUT AS YOU AND YOUR BRIDGE',\n     *     IW(55))\n      CALL PRMSG (\n     *  'PERSONNEL ARE THROWN TO THE FLOOR BY THE FORCE OF THE NOVA',\n     *     IW(58))\n      CALL PRMSG (\n     *  'YOU STAGGER TO YOUR FEET AS THE LIGHTS COME BACK UP SLOWLY',\n     *     IW(58))\n      CALL LINEF\n      CALL PRMSG (\n     *  'YOUR FIRST OFFICER CALLS FOR DAMAGE REPORTS FROM ALL DECKS',\n     *     IW(58))\n      CALL LINEF\n      HIT = RAND(300.0)+1700.0\n      IF (ISHUPD.NE.IZDOWN.AND.ISHUPD.NE.IZDAMG) GO TO 1360\n      ENERGY = ENERGY-HIT\n      IF (ENERGY.LE.0.0) GO TO 1390\n      CALL DAMAGE (HIT)\n      GO TO 1400\n1360  IF (HIT.GT.FLOAT(ISHENG)) GO TO 1380\n      CALL PRMSG (\n     *  'SHIELDS TAKE FULL FORCE OF BLAST, NO DAMAGE TO SHIP',\n     *     IW(51))\n      CALL LINEF\n      ISHENG = ISHENG-IFIX(HIT)\n1370  CALL PRMIM ('SHIELDS NOW AT: ',16,IW(16),ISHENG,'UNITS.',6,IW(6))\n      GO TO 1400\n1380  CALL PRMSG (\n     *  'SHIELD ENERGY LOW, FORCE OF NOVA PARTIALLY ABSORBED BY',\n     *    IW(54))\n      CALL PRMSG ('SHIELDS, DAMAGE REPORTS COMING IN',IW(33))\n      ENERGY = ENERGY-(HIT-ISHENG)\n      IF (ENERGY.LE.0.0) GO TO 1390\n      ISHENG = 0\n      IF (HIT-ISHENG.GT.300.0) CALL DAMAGE (HIT-ISHENG)\n      IF (HIT-ISHENG.LE.300.0) CALL PRMSG ('*** NO DAMAGE',IW(13))\n      GO TO 1370\n1390  CALL PRMSG ('YOUR MAIN ENERGY HAS GONE TO 0',IW(30))\n      GO TO 2560\n1400  CALL LINEF\n1410  CALL DRAGIN\n      CALL BATTLE\n      GO TO 150\n1420  CALL LINEF\n      CALL PRMSG (\n     * 'I WOULDN''T DO THAT TOO OFTEN OR YOUR FIRST OFFICER MIGHT ',\n     *   IW(56))\n      CALL PRMSG ('GET SOME IDEAS ABOUT BEING \"LORD COMMANDER\".',\n     *     IW(43))\n      GO TO 150\n1430  CALL PRMSG ('LORD COMMANDER, TORPEDO FIRE CONTROL REPORTS WE',\n     *     IW(47))\n      CALL PRMSG ('DON''T HAVE ANY DISRUPTOR TORPEDOES LEFT',\n     *     IW(39))\n      GO TO 150\n1440  CALL PRMSG ('LORD COMMANDER, TORPEDO FIRE CONTROL REPORTS WE',\n     *     IW(47))\n      CALL PRMSG (\n     * 'DON''T HAVE ENOUGH TORPEDOES FOR THE ORDERED SPREAD     ',\n     *     IW(50))\n      GO TO 150\n1450  IF (XPTDC.GT.1.5) GO TO 1460\n      IF (XPTDC.LE.1.5) IMAXT = 1\n      IF (XPTDC.LE.1.0) IMAXT = 2\n      IF (XPTDC.LE.0.5) IMAXT = 3\n      GO TO 810\n1460  IMAXT = 0\n      CALL PRMSG (\n     *  'DISRUPTOR TORPEDO TUBES DAMAGED,  ',IW(32))\n      CALL PRMSG ('TRY FIRING LESS TORPEDOES',IW(25))\n      GO TO 150\n1720  IRETRN = 1\n      GO TO 150\n2560  IRETRN = 2\n      GO TO 150\n1950  IRETRN = 3\n150   CALL DBUGIN ('PHOTON EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PLACE\nC*********************************************************************\n      SUBROUTINE PLACE (NUMBER,ITEM,ILIMIT)\nC PURPOSE : THIS IS A ROUTINE FOR PLACING NUMBERS IN THE PRIMARY\nC           CHART\nC           NUMBER IS HOW MANY OF THE ITEM THAT HAS BEEN SELECTED\nC           ITEM IS THE QUANITY OF WHAT IS BE BE ADDED TO THE CHART\nC           ILIMIT IS THE LIMIT OF HOW HIGH THE CHART COULD BE\nC           AND STILL PUT THE ITEM AT THAT LOCATION.\nC           THE SSINIT (STAR SHIP LIST INIT) WILL BE CALLED\nC           IF ITEM = 100 (FEDERATION STARSHIP)\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),IKY(8,8)\n     *     ,INPUT(50),IPAD3\n      CALL DBUGIN ('PLACE ENTERED',IW(13),0)\n      DO 20 N = 1, NUMBER\n10         INDEX = RAND(8.0)+1.0\n           INDEY = RAND(8.0)+1.0\n           IF (ICHART(INDEX,INDEY).GT.ILIMIT) GO TO 10\n           ICHART(INDEX,INDEY) = ICHART(INDEX,INDEY)+ITEM\n           IF (ITEM.NE.100) GO TO 20\n           CALL SSINIT (IUSFED,INDEX,INDEY)\n20    CONTINUE\n      CALL DBUGIN ('PLACE EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=PLAGAN\nC*********************************************************************\n      SUBROUTINE PLAGAN (IYES)\nC PURPOSE : PROMPT USER TO SEE IF THEY WISH TO PLAY ANOTHER GAME\nC*********************************************************************\n      CALL DBUGIN ('PLAGAN ENTERED',IW(14),0)\n      CALL PRMSG ('=====================================',IW(37))\n      CALL LINEF\n      CALL YESNO ('DO YOU WISH TO PLAY AGAIN  ',IW(26),26,IYES)\n      CALL DBUGIN ('PLAGAN EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PLANET\nC*********************************************************************\n      SUBROUTINE PLANET\nC PURPOSE : PRINT MSG SAYING WE DON'T KEEP PLANET RECORD\nC*********************************************************************\n      CALL DBUGIN ('PLANET ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG ('BEGGING YOUR LEAVE, LORD COMMANDER, OUR COMPUTER IS',\n     *     IW(51))\n      CALL PRMSG ('NOT PROGRAMMED TO KEEP A RECORD OF PLANETS FOUND',\n     *     IW(48))\n      CALL DBUGIN ('PLANET EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PRCHRT\nC*********************************************************************\n      SUBROUTINE PRCHRT\nC PURPOSE : DISPLAY INFORMATION ON THE CURRENT STATUS OF THE GALAXY\nC           OWNED BY THE FEDERATION\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *    IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /OUTUNT/ IOUTT\n      COMMON /CPU/ IBMT\n      COMMON /TERMSZ/ IILINE, IILLEN\n      DIMENSION LINE(8),IFORM(21),ICHR(2),IINT(2)\n      CHARACTER *4 CZFORM(21) , CZICHR(2) , CZDOTS , CZIINT(2)\n      EQUIVALENCE (CZFORM,IFORM) , (CZICHR,ICHR) , (CZDOTS,IDOTS) ,\n     *            (CZIINT,IINT)\n      DATA CZFORM(1) /'(I2,'/ , CZFORM(2) /'6H -'/ ,\n     *     CZFORM(3) /'--  '/ , CZFORM(4) /','/ , CZFORM(21) /')'/\n      DATA CZICHR(1) /'A4, '/ , CZICHR(2) /'3X, '/\n      DATA CZDOTS /'....'/\n      DATA CZIINT(1) /'I4,'/ , CZIINT(2) /'3X,'/\n      CALL DBUGIN ('PRCHRT ENTERED',IW(14),0)\n      IF (ITTY.EQ.1) GO TO 5\n      CALL LINEF\n      CALL PRMSG ('CHART FOR KNOWN FEDERATION SPACE:',IW(33))\n      CALL LINEF\n5     CALL PRMSG (\n     *  '         1      2      3      4      5      6      7      8'\n     *     ,IW(59))\n      IF (IBMT.EQ.1.AND.ITTY.EQ.1) GO TO 6\n      CALL PRMSG (\n     *'      --------------------------------------------------------'\n     *  ,IW(62))\n6     DO 30 N = 1, 8\n           DO 20 M = 1, 8\n                IC = ICHART(M,N)\n                IF (IKY(M,N).EQ.1) GO TO 10\n                IF (IC/1000.EQ.0.AND.IKY(M,N).LT.0) IKY(M,N) = 0\n                IF (IC/1000.GT.0) IKY(M,N) = -1\n                IF (IKY(M,N).EQ.-1.AND.XSRDC.GT.0.001) IKY(M,N) = 0\n10              LINE(M) = IDOTS\n                IFORM(3+(2*M)) = ICHR(1)\n                IFORM(4+(2*M)) = ICHR(2)\n                IF (IKY(M,N).EQ.0) GO TO 20\n                LINE(M) = ICHART(M,N)\n                IFORM(3+(2*M)) = IINT(1)\n                IFORM(4+(2*M)) = IINT(2)\n20         CONTINUE\n           WRITE (IOUTT,IFORM) N,LINE\n           IF (ITTY.NE.1) CALL LINEF\n30    CONTINUE\n      IF (ITTY.NE.1) CALL LINEF\n      IF (IBMT.EQ.1.AND.ITTY.EQ.1) GO TO 40\n      CALL PRMSM (\n     *  'THE SUPERCOMMANDER KAZH CURRENTLY IN QUADRANT ',46,IW(46),\n     *     ISCPY1,ISCPX1,' ',0,1)\n40    CALL DBUGIN ('PRCHRT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PRHIT\nC*********************************************************************\n      SUBROUTINE PRHIT (IHIT1,IHIT2,MSG,MSGLEN,MSGDIM,ISEC1,ISEC2)\nC PURPOSE : DISPLAY INFORMATION ON INCOMING FIRE, NAMELY HOW\nC           STRONG WAS IT\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION MSG(MSGDIM),IFORM(17)\n      CHARACTER *4 CZFORM(17)\n      EQUIVALENCE (CZFORM,IFORM)\n      DATA CZFORM(1)  /'(2H '/ , CZFORM(2)  /'( ,I'/ ,\n     *     CZFORM(4)  /',1H,'/ , CZFORM(5)  /',  I'/ ,\n     *     CZFORM(7)  /',2H)'/ , CZFORM(8)  /' ,  '/ ,\n     *     CZFORM(11) /',1X,'/ , CZFORM(12) /'   I'/ ,\n     *     CZFORM(14) /',3H '/ , CZFORM(15) /'- ,I'/ ,\n     *     CZFORM(17) /')   '/\n      DATA IFORM(3) /0/ , IFORM(6) /0/ , IFORM(9) /-1/ ,\n     *     IFORM(10) /-1/ , IFORM(13) /0/ , IFORM(16) /0/\n      CALL SETFOR (MSGLEN,IFORM(9),IFORM(10),IMX)\n      CALL INSFOR(IHIT1,IFORM(3))\n      CALL INSFOR(IHIT2,IFORM(6))\n      CALL INSFOR(ISEC1,IFORM(13))\n      CALL INSFOR(ISEC2,IFORM(16))\n      IF (IMX.EQ.0) WRITE (IOUTT,IFORM) IHIT1,IHIT2,ISEC1,ISEC2\n      IF (IMX.NE.0) WRITE (IOUTT,IFORM) IHIT1,IHIT2,(MSG(N),N=1,IMX),\n     *                                  ISEC1,ISEC2\n      RETURN\n      END\n./     ADD     NAME=PRMIM\nC*********************************************************************\n      SUBROUTINE PRMIM (MSG1,MSG1L,MSG1D,INUM,MSG2,MSG2L,MSG2D)\nC PURPOSE : PRINT A NUMBER IN THE FORM \"MSG\" INTEGER \"MSG\"\nC           NOTE THAT CALLERS WILL PASS A SINGLE BLANK FOR A MSG,\nC           IF THEY WANT JUST A MSG FOLLOWED BY NUMBER OR NUMBER\nC           FOLLOWED BY MSG (I.E. BOTH MESSAGES ARE ALWAYS PRESENT,\nC           BUT ONE MAY BE BLANK)\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION MSG1(MSG1D),MSG2(MSG2D),IFORM(9)\n      CHARACTER *4 CZFORM(9)\n      EQUIVALENCE (CZFORM,IFORM)\n      DATA CZFORM(1) /'(1X,'/ , CZFORM(4) /',  I'/ ,\n     *     CZFORM(6) /',1X,'/ , CZFORM(9) /')   '/\n      DATA IFORM(2) /-1/ , IFORM(3) /-1/ , IFORM(5) /0/ ,\n     *     IFORM(7) /-1/ , IFORM(8) /-1/\n      CALL SETFOR (MSG1L,IFORM(2),IFORM(3),IMX1)\n      CALL SETFOR (MSG2L,IFORM(7),IFORM(8),IMX2)\n      CALL INSFOR(INUM,IFORM(5))\n      IF (IMX1.EQ.0) GO TO 10\n      IF (IMX2.EQ.0) GO TO 30\n      WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),INUM,(MSG2(N2),N2=1,IMX2)\n      GO TO 40\n10    IF (IMX2.EQ.0) GO TO 20\n      WRITE (IOUTT,IFORM) INUM,(MSG2(N2),N2=1,IMX2)\n      GO TO 40\n20    WRITE (IOUTT,IFORM) INUM\n      GO TO 40\n30    WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),INUM\n40    RETURN\n      END\n./     ADD     NAME=PRMRM\nC*********************************************************************\n      SUBROUTINE PRMRM (MSG1,MSG1L,MSG1D,RNUM,MSG2,MSG2L,MSG2D)\nC PURPOSE : PRINT A LINE IN THE FORM \"MSG\" REAL NUMBER \"MSG\"\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION MSG1(MSG1D),MSG2(MSG2D),IFORM(10),NUMS(20)\n      CHARACTER *4 CZFORM(10) , CZNUMS(20)\n      EQUIVALENCE (CZFORM,IFORM) , (CZNUMS,NUMS)\n      DATA CZFORM(1) /'(1X,'/ , CZFORM(4) /',F'/ , CZFORM(6) /'.3,'/ ,\n     *     CZFORM(7) /'1X,'/ , CZFORM(10) /')'/\n      DATA IFORM(2) /-1/ , IFORM(3) /-1/ , IFORM(5) /0/ ,\n     *     IFORM(8) /-1/ , IFORM(9) /-1/\n      DATA CZNUMS / '0','1','2','3','4','5','6','7','8','9','10','11',\n     *              '12','13','14','15','16','17','18','19'/\n      CALL SETFOR (MSG1L,IFORM(2),IFORM(3),IMX1)\n      CALL SETFOR (MSG2L,IFORM(8),IFORM(9),IMX2)\n      IF (ABS(RNUM).LT..0000001) GO TO 10\n      GO TO 20\n10    IFORM(5) = NUMS(7)\n      GO TO 40\n20    RL = ALOG10(ABS(RNUM))\n      IF (RL.LT.0) GO TO 30\n      IFORM(5) = NUMS(IFIX(RL)+7)\n      GO TO 40\n30    IFORM(5) = NUMS(7)\n40    IF (IMX1.EQ.0) GO TO 110\n      IF (IMX2.EQ.0) GO TO 130\n      WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),RNUM,(MSG2(N2),N2=1,IMX2)\n      GO TO 140\n110   IF (IMX2.EQ.0) GO TO 120\n      WRITE (IOUTT,IFORM) RNUM,(MSG2(N2),N2=1,IMX2)\n      GO TO 140\n120   WRITE (IOUTT,IFORM) RNUM\n      GO TO 140\n130   WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),RNUM\n140   RETURN\n      END\n./     ADD     NAME=PRMSG\nC*********************************************************************\n      SUBROUTINE PRMSG (IMSG,IDIM)\nC PURPOSE : DISPLAY A CHARACTER MSG TO OUT UNIT\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION IMSG(IDIM)\n      DIMENSION IFORM (4)\n      CHARACTER *4 CZFORM(4)\n      EQUIVALENCE (CZFORM,IFORM)\n      DATA CZFORM(1) /'(1X,'/ , CZFORM(4) /')'/\n      DATA IFORM(2) /-1/ , IFORM(3) /-1/\n      I = IWI(IDUMMY)\n      CALL SETFOR (I,IFORM(2),IFORM(3),IMX)\n      IF (IMX.EQ.0) WRITE (IOUTT,IFORM)\n      IF (IMX.NE.0) WRITE (IOUTT,IFORM) (IMSG(N),N=1,IMX)\n      RETURN\n      END\n./     ADD     NAME=PRMSGC\nC*********************************************************************\n      SUBROUTINE PRMSGC(IMSG,IDIM)\nC PURPOSE : DISPLAY MSG TO CERTIFICATE FILE (FT08F001)\nC*********************************************************************\n      COMMON /CPU/ IBMT\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION IMSG(IDIM)\n      DIMENSION IFORM (4)\n      CHARACTER *4 CZFORM(4)\n      EQUIVALENCE (CZFORM,IFORM)\n      DATA CZFORM(1) /'(1X,'/ , CZFORM(4) /')'/\n      DATA IFORM(2) /-1/ , IFORM(3) /-1/\n      I = IWI(IDUMMY)\n      CALL SETFOR (I,IFORM(2),IFORM(3),IMX)\n      IF (IBMT.NE.0) GO TO 10\n      IF (IMX.EQ.0) WRITE (IOUTT,IFORM)\n      IF (IMX.NE.0) WRITE (IOUTT,IFORM) (IMSG(N),N=1,IMX)\n10    IF (IBMT.NE.1) GO TO 20\n      IF (IMX.EQ.0) WRITE (8,IFORM)\n      IF (IMX.NE.0) WRITE (8,IFORM) (IMSG(N),N=1,IMX)\n20    RETURN\n      END\n./     ADD     NAME=PRMSG1\nC*********************************************************************\n      SUBROUTINE PRMSG1 (IMSG,IDIM)\nC PURPOSE : DISPLAY AN ARRAY IN A1 FORMAT\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION IMSG(IDIM)\n      I = IDIM\n      IF (I.GT.80) I = 80\n      WRITE (IOUTT,10000) (IMSG(N),N=1,I)\n      RETURN\n10000 FORMAT (' ',80A1)\n      END\n./     ADD     NAME=PRMSM\nC*********************************************************************\n      SUBROUTINE PRMSM (MSG1,MSG1L,MSG1D,ISEC1,ISEC2,MSG2,MSG2L,MSG2D)\nC PURPOSE : DISPLAY A LINE IN THE FORM \"MSG\" SECTOR#, SECTOR# \"MSG\"\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION MSG1(MSG1D),MSG2(MSG2D),IFORM(12),NUMS(2)\n      CHARACTER *4 CZFORM(12) , CZNUMS(2)\n      EQUIVALENCE (CZFORM,IFORM) , (CZNUMS,NUMS)\n      DATA CZFORM(1) /'(1X,'/ , CZFORM(4) /',I'/ , CZFORM(6) /',3H '/ ,\n     *     CZFORM(7) /'- ,I'/ , CZFORM(9) /',1X,'/ , CZFORM(12) /')'/\n      DATA IFORM(2) /-1/ , IFORM(3) /-1/ , IFORM(5) /0/ ,\n     *     IFORM(8) /0/ , IFORM(10) /-1/ , IFORM(11) /-1/\n      DATA CZNUMS / '1','2'/\n      CALL SETFOR (MSG1L,IFORM(2),IFORM(3),IMX1)\n      CALL SETFOR (MSG2L,IFORM(10),IFORM(11),IMX2)\n      IFORM(5) = NUMS(1)\n      IFORM(8) = NUMS(1)\n      IF (ISEC1.GT.9) IFORM(5) = NUMS(2)\n      IF (ISEC2.GT.9) IFORM(8) = NUMS(2)\n      IF (IMX1.EQ.0) GO TO 10\n      IF (IMX2.EQ.0) GO TO 30\n      WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),ISEC1,ISEC2,\n     *                    (MSG2(N2),N2=1,IMX2)\n      GO TO 40\n10    IF (IMX2.EQ.0) GO TO 20\n      WRITE (IOUTT,IFORM) ISEC1,ISEC2,(MSG2(N2),N2=1,IMX2)\n      GO TO 40\n20    WRITE (IOUTT,IFORM) ISEC1,ISEC2\n      GO TO 40\n30    WRITE (IOUTT,IFORM) (MSG1(N1),N1=1,IMX1),ISEC1,ISEC2\n40    RETURN\n      END\n./     ADD     NAME=PROMOT\nC*********************************************************************\n      SUBROUTINE PROMOT (ILEV)\nC PURPOSE : IF A PLAYER WINS A GAME, PROMOTE THEM TO NEXT LEVEL\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      DIMENSION NAME(10)\n      CALL DBUGIN ('PROMOT ENTERED',IW(14),0)\n      ILEVB = ILEV-2\n      CALL LINEF\n      CALL PRMSG (\n     *  'FOR YOUR OUTSTANDING WORK, THE KLINGON HIGH COMMAND',\n     *  IW(51))\n      CALL PRMSG ('AWARDS YOU THE NEW RANK OF: ',IW(28))\n      CALL LINEF\n      IF (ILEVB) 10 , 20 , 30\n10    CALL PRMSG ('      FLEET VICE-ADMIRAL EMERITUS       ',IW(40))\n      GO TO 80\n20    CALL PRMSG ('      FLEET ADMIRAL EMERITUS            ',IW(40))\n      GO TO 40\n30    CALL PRMSG ('      SUPREME FLEET ADMIRAL EMERITUS    ',IW(40))\n40    CALL LINEF\n      CALL YESNO ('DO YOU WANT YOUR CERTIFICATE OF MERIT PRINTED',\n     *    IW(45),45,IYES)\n      IF (IYES.EQ.0) GO TO 80\n50    CALL LINEF\n      CALL READIN ('ENTER THE NAME YOU WANT ON THE CERTIFICATE ',\n     *     IW(43),43,0,EOFF)\n      IF (EOFF.GT..1) GO TO 50\n      NAME(1) = INPUT(1)\n      NAME(2) = INPUT(2)\n      NAME(3) = INPUT(3)\n      NAME(4) = INPUT(4)\n      NAME(5) = INPUT(5)\n      NAME(6) = INPUT(6)\n      NAME(7) = INPUT(7)\n      NAME(8) = INPUT(8)\n      NAME(9) = INPUT(9)\n      NAME(10)= INPUT(10)\n      IF (ILEVB) 80 , 60 , 70\n60    CALL CERT (NAME,IW(40),\n     * '      FLEET ADMIRAL EMERITUS            ',IW(40))\n      GO TO 80\n70    CALL CERT (NAME,IW(40),\n     * '      SUPREME FLEET ADMIRAL EMERITUS    ',IW(40))\n80    CALL DBUGIN ('PROMOT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=PRSC\nC*********************************************************************\n      SUBROUTINE PRSC (NUM,MSG,MLEN,MDIM,ISCORE)\nC PURPOSE : PRINT A SCORE NUMBER FOR A PLAYER\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION MSG(MDIM),IVEC(7)\n      CHARACTER *4 CZIVEC(7)\n      EQUIVALENCE (CZIVEC,IVEC)\n      DATA CZIVEC(1) /'(1X,'/ , CZIVEC(2) /'I2,'/ , CZIVEC(3) /'1X,'/ ,\n     *     CZIVEC(6) /',T49'/ , CZIVEC(7) /',I7)'/\n      DATA IVEC(4) /-1/ , IVEC(5) /-1/\n      CALL SETFOR (MLEN,IVEC(4),IVEC(5),IMX)\n      IF (IMX.EQ.0) WRITE (IOUTT,IVEC) NUM,ISCORE\n      IF (IMX.NE.0) WRITE (IOUTT,IVEC) NUM,(MSG(N),N=1,IMX),ISCORE\n      RETURN\n      END\n./     ADD     NAME=PRTEND\nC*********************************************************************\n      SUBROUTINE PRTEND\nC PURPOSE : DISPLAY THE OUTGOING TORPEDO INFO IN TRACKR ARRAY\nC*********************************************************************\n      COMMON /OUTUNT/ IOUTT\n      COMMON /TRACKR/ ITRKC, RTRK(15,2)\n      IF (ITRKC.LT.1) GO TO 10\n      WRITE (IOUTT,10000) ((RTRK(N,J),J=1,2),N=1,ITRKC)\n      ITRKC = 0\n      CALL LINEF\n10    RETURN\n10000 FORMAT (' ',F6.3,' - ',F6.3,5X,F6.3,' - ',F6.3,5X,\n     *            F6.3,' - ',F6.3,5X,F6.3,' - ',F6.3)\n      END\n./     ADD     NAME=RAND\nC*********************************************************************\n      REAL FUNCTION RAND (VAL)\nC PURPOSE : RANDOM NUMBER GENERATOR,\nC           GENERATES A NUMBER BETWEEN 0.0 AND VAL\nC*********************************************************************\n      RAND = VAL*RANDF(1.0)\n      CALL DBUGRN('INPUT TO RAND',IW(13),VAL)\n      CALL DBUGRN('OUTPUT FROM RAND',IW(16),RAND)\n      RETURN\n      END\n./     ADD     NAME=RANDF\nC*********************************************************************\n      FUNCTION RANDF (VALUE)\nC PURPOSE : GENERATE A REAL NUMBER (RANDOM) BETWEEN 0.0 AND 1.0,\nC           NOTE THIS SUBROUTINE IS PSEUDO-RANDOM, TO INIT TO GET A\nC           NICE SPREAD OF DIFFERENT NUMBERS, CALL THIS ROUTINE A\nC           RANDOM NUMBER OF TIMES (SEE ROUTINE RANSET) FOR EXAMPLE,\nC           IF YOU GET A CLOCK FROM THE SYSTEM, GENERATE SOME INTEGER\nC           NUMBER FROM THAT CLOCK, AND CALL THIS ROUTINE \"N\" TIMES,\nC           THE RESULT WILL BE DIFFERENT SEQUENCES OF NUMBERS BASED\nC           ON THE TIME OF DAY.\nC           *NOTE* THE BASE NUMBERS IN THE DATA STATEMENT BELOW ARE\nC           VERY CAREFULLY SELECTED TO GIVE A GOOD DISTRIBUTION OF\nC           RANDOM NUMBERS, DO NOT CHANGE THESE NUMBERS.\nC*********************************************************************\n      REAL VALUE\n      INTEGER B,IS,NUM\n      DATA IS,M,B /8,10000,2821/\n      I1 = IS * B + 1\n      IS = I1 - (I1/M)*M\n      RNUM = FLOAT(IS/100 + 1)\n      RNUM = (RNUM / 100.0) * VALUE\n      IF (RNUM.GE.VALUE) RNUM=VALUE - .0001\n      RANDF = RNUM\n      GO TO 10\n      ENTRY RANFIN\n      IS = 8\n      M  = 10000\n      B  = 2821\n10    RETURN\n      END\n./     ADD     NAME=RANSET\nC*********************************************************************\n      SUBROUTINE RANSET (ICOUNT)\nC PURPOSE : KICK THE RANDOM NUMBER GENERATOR TO GET DIFFERENT STRINGS\nC           OF RANDOM NUMBERS BASED ON \"ICOUNT\"\nC*********************************************************************\n      CALL RANFIN\n      I = MOD(ICOUNT,1000)\n      DO  10 N=1,I\n           CALL RAND(1.0)\n10    CONTINUE\n      RETURN\n      END\n./     ADD     NAME=READIN\nC*********************************************************************\n      SUBROUTINE READIN (IPROM,IPDIM,IPLENC,IALEN,EOFF)\nC PURPOSE : GET A STRING FROM THE USER, BASED ON IALEN SEE WHETHER\nC           THEY WANT A4 FORMAT OR A1 FORMAT\nC*********************************************************************\n      COMMON /FSBUFF/ NPROML, NPROMT(20), NREAD(13),\n     *     NHEAD(20,12), NCOUNT, NWORK(20,200)\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /CPU/ IBMT\n      COMMON /Z3270/ IF12(13), IF50(50)\n      DIMENSION IPROM(IPDIM)\n      CALL DBUGIN ('READIN ENTERED',IW(14),0)\n      EOFF = 0.0\n      IF (IBMT.EQ.1) GO TO 100\n      CALL PRMSG (IPROM,IW(IPDIM*4))\n      CALL PRMSG ('?   ',IW(4))\n      IF (IALEN.NE.1) GO TO 30\n      READ (5,10000,END=40) (INPUT(N),N=1,50)\nC     --- KLUDGE BELOW TO GET AROUND CHEAP FORTRAN COMPILER BUG\nC         NOT BEING TO HANDLE INPUT PROPERLY\n      N = 50\n10    IF (INPUT(N).NE.ICRBLK) GO TO 20\n      N = N - 1\n      GO TO 10\n20    IF (INPUT(N).EQ.ICRMIN) INPUT(N) = ICRBLK\nC     --- END OF KLUDGE (REMOVE IF NOT NEEDED)\n      CALL DBUGCH('READIN-50A1',IW(11),INPUT,50)\n      GO TO 150\n30    READ (5,10010,END=40) (INPUT(N),N=1,12)\n      CALL DBUGCH('READIN-12A4',IW(11),INPUT,12)\n      GO TO 150\n40    EOFF = 1.0\n      GO TO 150\n100   DO 110 N=1, IPDIM\n          NPROMT(N) = IPROM(N)\n110   CONTINUE\n      NPROML = IPLENC\n      CALL XFILLB\n      CALL FSIO1\n      IF (IALEN.NE.1) GO TO 130\n      DO 120 N=1, 50\n          INPUT(N) = IF50(N)\n120   CONTINUE\n      CALL DBUGCH('READIN-50A1',IW(11),INPUT,50)\n      GO TO 150\n130   DO 140 N=1, 12\n          INPUT(N) = IF12(N)\n140   CONTINUE\n      CALL DBUGCH('READIN-12A4',IW(11),INPUT,12)\n150   CALL DBUGIN ('READIN EXITED',IW(13),0)\n      RETURN\n10000 FORMAT (50A1)\n10010 FORMAT (12A4)\n      END\n./     ADD     NAME=REPAIR\nC*********************************************************************\n      SUBROUTINE REPAIR (TME)\nC PURPOSE : BASED ON THE TIME USED UP, REPAIR BROKEN DEVICES ON\nC           THE SHIP\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      DIMENSION DEV(8)\n      EQUIVALENCE (DEV(1),XCDC)\n      CHARACTER *4 CZDAMG , CZDOWN\n      EQUIVALENCE (CZDAMG,IZDAMG) , (CZDOWN,IZDOWN)\n      DATA CZDAMG /'DAMG'/ , CZDOWN /'DOWN'/\n      CALL DBUGIN ('REPAIR ENTERED',IW(14),0)\n      CALL CORAND (TME)\n      DO 10 N = 1, 8\n           DEV(N) = DEV(N)-TME\n           IF (DEV(N).GT..0009999) GO TO 10\n           DEV(N) = 0.0\n10    CONTINUE\n      IF (XDSDC.LE.0.001.AND.ISHUPD.EQ.IZDAMG) ISHUPD = IZDOWN\n      CALL DBUGIN ('REPAIR EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=RESORT\nC*********************************************************************\n      SUBROUTINE RESORT (IARX,IARY,IACX,IACY,ILEN)\nC PURPOSE : CHANGE THE ORDER IN WHICH INCOMING FEDERATION FIRE IS\nC           RECEIVED SO USER CANNOT GUESS WHICH SHIP WILL FIRE FIRST\nC           (SO IT IS MORE LIKE REAL BATTLE \"FIRE AT WILL\")\nC*********************************************************************\n      DIMENSION IARX(9),IARY(9),IACX(9),IACY(9)\n      CALL DBUGIN ('RESORT ENTERED',IW(14),0)\n      IR = RAND(FLOAT(ILEN))+1.0\n      ICP = 1\n      DO 10 N = IR, ILEN\n           IACX(ICP) = IARX(N)\n           IACY(ICP) = IARY(N)\n           ICP = ICP+1\n10    CONTINUE\n      IF (IR.EQ.1) GO TO 30\n      IR = IR-1\n      DO 20 N = 1, IR\n           IACX(ICP) = IARX(N)\n           IACY(ICP) = IARY(N)\n           ICP = ICP+1\n20    CONTINUE\n30    CALL DBUGIN ('RESORT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SCAN\nC*********************************************************************\n      SUBROUTINE SCAN (IN)\nC PURPOSE : IF A QUADRANT HAS A SUPERNOVA IN IT, MAKE SURE THAT\nC           \"GHOST\" SHIPS ARE NOT GENERATED\nC           (RESET THOSE COUNTERS TO ZERO)\nC*********************************************************************\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      CALL DBUGIN ('SCAN ENTERED',IW(12),0)\n      ICOMM2 = IN/1000\n      IFED2 = MOD(IN/100,10)\n      IF (IN.NE.9999) GO TO 10\n      ICOMM2 = 0\n      IFED2 = 0\n10    CALL DBUGIN ('SCAN EXITED',IW(11),0)\n      RETURN\n      END\n./     ADD     NAME=SCORE\nC*********************************************************************\n      SUBROUTINE SCORE (REMAIN)\nC PURPOSE : DISPLAY THE USER'S SCORE BASED ON WHAT THEY KILLED\nC*********************************************************************\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      CALL DBUGIN ('SCORE ENTERED',IW(13),0)\n      CALL LINEF\n      CALL PRMSG ('YOUR SCORE:',IW(11))\n      CALL LINEF\n      ISCORE = 0\n      IF (IKCC.EQ.0) GO TO 100\n      IKCCS = -75*IKCC\n      CALL PRSC (IKCC,'COMMANDERS DESTROYED',20,IW(20),IKCCS)\n      ISCORE = ISCORE+IKCCS\n100   IF (IFSC.EQ.0) GO TO 110\n      IFSCS = IFSC*100\n      CALL PRSC (\n     *  IFSC,'FEDERATION STARSHIPS DESTROYED ',31,IW(31),IFSCS)\n      ISCORE = ISCORE+IFSCS\n110   IF (ISBC.EQ.0) GO TO 120\n      ISBCS = ISBC*200\n      CALL PRSC (\n     *  ISBC,'FEDERATION STARBASES DESTROYED ',31,IW(31),ISBCS)\n      ISCORE = ISCORE+ISBCS\n120   IF (IPLC.EQ.0) GO TO 130\n      IPLCS = IPLC/3\n      CALL PRMIM (\n     *  'SCORE FOR PLANETS DESTROYED                       ',\n     *  50,IW(50),IPLCS,' ',0,1)\n      ISCORE = ISCORE+IPLCS\n130   IF (IDIE.EQ.1) GO TO 140\n      TBONUS = REMAIN*2000.0\n      IT = IFIX(TBONUS)\n      IT2 = ILEV*10000\n      ISCORE = ISCORE+IT+IT2\n      CALL PRMIM (\n     *  'TIME BONUS                                        ',\n     *     50,IW(50),IT,' ',0,1)\n      CALL PRMIM (\n     *  'WIN BONUS                                         ',\n     *     50,IW(50),IT2,' ',0,1)\n      GO TO 150\n140   ISCORE = ISCORE-1000\n      IP = -1000\n      CALL PRMIM (\n     *  'PENALTY FOR LOSING YOUR SHIP AND DYING            ',\n     *     50,IW(50),IP,' ',0,1)\n150   CALL LINEF\n      CALL PRMIM (\n     *  'YOUR SCORE                                        ',\n     *     50,IW(50),ISCORE,' ',0,1)\n      CALL LINEF\n      CALL LINEF\n      CALL DBUGIN ('SCORE EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=SECSET\nC*********************************************************************\n      SUBROUTINE SECSET\nC PURPOSE : AT ENTRY TO SECTOR, CREATE THE MAP OF THE SECTOR FOR\nC           THE PLAYER\nC*********************************************************************\n      DIMENSION ISECDT(100),NSEC(100),IC2(7),NUMS(7)\n      DIMENSION ISECCY(100),ICLIST(5),NLIST(5)\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),NCX(\n     *     9),NCY(9)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /HURT/ NOCALL,IPLENG,IPBASE,IFED2,ICOMM2\n      EQUIVALENCE (ISECCY(1),ISECT(1,1)) , (NLIST(1),NSTARS) , (NSEC(1),\n     *     NSECE(1,1)) , (ISECDT(1),ISECT(1,1))\n      CHARACTER *4 CZIC2(7) , CZLIST(5) , CZRDOT\n      EQUIVALENCE (CZIC2,IC2) , (CZLIST,ICLIST) , (CZRDOT,ICRDOT)\n      DATA CZIC2 /'*','S','#','C','F','P','B'/\n      DATA NUMS / -200000000,100000000,-99999999,-5800,0,0,0 /\n      DATA CZLIST /'*','P','B','F','C'/\n      DATA CZRDOT /'.'/\n      CALL DBUGIN ('SECSET ENTERED',IW(14),0)\n      NUMS(7) = ISBSET(DUMMY)\n      DO 10 N1 = 1, 100\n           ISECCY(N1) = ICRDOT\n10    CONTINUE\n      IX1 = (ISCPY2-1)*10+ISCPX2\n      ISECCY(IX1) = IC2(2)\n      DO 40 N = 1, 5\n           IF (NLIST(N).EQ.0) GO TO 40\n           J = NLIST(N)\n           DO 30 NX = 1, J\n20              IXX = IFIX(RAND(100.0)+1.0)\n                IF (ISECCY(IXX).NE.ICRDOT) GO TO 20\n                ISECCY(IXX) = ICLIST(N)\n30         CONTINUE\n40    CONTINUE\n      IF (RAND(1.0).LE.0.6) GO TO 70\n      NBH = RAND(3.0)+1.0\n      DO 60 N4 = 1, NBH\n50         IX1 = RAND(100.0)+1.0\n           IF (ISECCY(IX1).NE.ICRDOT) GO TO 50\n           ISECCY(IX1) = IC2(3)\n60    CONTINUE\n70    INPL = IPLNET(ISCPX1,ISCPY1)\n      INPLC = INPL\n      IF (INPLC.EQ.0) GO TO 80\n      IPOP = 0\n      IDIL = 0\n      INPLC = INPLC/10\n      NUMS(6) = -100000000\n      IF (INPLC.GT.9999) IDIL = 1\n      IPOP = INPLC\n      IF (INPLC.GT.9999) IPOP = (INPLC-10000)\n      IF (IPOP.GT.0) NUMS(6) = NUMS(6)-200000000\n      IF (IPOP.GT.7000) NUMS(6) = NUMS(6)-100000000\n      IF (IPOP.GT.0.AND.IDIL.EQ.1) NUMS(6) = NUMS(6)-100000000\n      GO TO 90\n80    NUMS(6) = 0\n90    NUMS(5) = IFEDST(DUMMY)\n      DO 120 N5 = 1, 100\n           IF (ISECDT(N5).EQ.ICRDOT) GO TO 110\n           DO 100 N6 = 1, 7\n                IF (ISECDT(N5).NE.IC2(N6)) GO TO 100\n                NSEC(N5) = NUMS(N6)\n                GO TO 120\n100        CONTINUE\n110        NSEC(N5) = 0\n120   CONTINUE\n      IPLENG = NUMS(6)\n      IPBASE = NUMS(7)\n      IOVER = 0\n      NOCALL = 0\n      CALL SSPRNT (0)\n      CALL BATTLE\n      CALL DBUGIN ('SECSET EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SENDEC\nC*********************************************************************\n      SUBROUTINE SENDEC (IPLVLD)\nC PURPOSE : DISPLAY INFORMATION ABOUT A PLANET IN THE QUADRANT\nC*********************************************************************\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('SENDEC ENTERED',IW(14),0)\n      IPLVAL = IPLVLD\n      CALL LINEF\n      IF (IPLVAL.EQ.0) GO TO 10\n      CALL LOCATE (KZP,IIXP,IIYP)\n      CALL PRMSM ('PLANET AT: ',11,IW(11),IIYP,IIXP,' ',0,1)\n      POP = 0.0\n      IPLVAL = IPLVAL/10\n      IF (IPLVAL.GT.9999) POP = FLOAT(IPLVAL-10000)\n      IF (IPLVAL.LE.9999) POP = FLOAT(IPLVAL)\n      POP = POP/1000.0\n      CALL PRMRM (\n     *  'HAS A POPULATION OF ',20,IW(20),POP,'BILLION,',8,IW(8))\n      IF (IPLVAL.GT.9999)\n     *          CALL PRMSG ('AND HAS DILITHIUM CRYSTALS',IW(26))\n      IF (IPLVAL.LE.9999)\n     *          CALL PRMSG ('AND HAS NO DILITHIUM CRYSTALS',IW(29))\n      GO TO 20\n10    CALL PRMSG ('NO PLANET IN THIS QUADRANT',IW(26))\n20    CALL DBUGIN ('SENDEC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SETFED\nC*********************************************************************\n      SUBROUTINE SETFED (LQX,LQY,LSX,LSY,NAME,ICAPTN,ITYPE,ISEQ,\n     *                   IDNAME,IDCAPT,IDTYPE)\nC PURPOSE : INIT THE INFO ABOUT SHIP NAMES AND CAPTAIN NAMES\nC*********************************************************************\n      COMMON /SHIPS/ IUSFED(15,13)\n      DIMENSION NAME(IDNAME),ICAPTN(IDCAPT),ITYPE(IDTYPE)\n      CALL DBUGIN ('SETFED ENTERED',IW(14),0)\n      IUSFED (1,ISEQ) = LQX\n      IUSFED (2,ISEQ) = LQY\n      IUSFED (3,ISEQ) = LSX\n      IUSFED (4,ISEQ) = LSY\n      IUSFED (5,ISEQ) = NAME(1)\n      IUSFED (6,ISEQ) = NAME(2)\n      IUSFED (7,ISEQ) = NAME(3)\n      IUSFED (8,ISEQ) = ICAPTN(1)\n      IUSFED (9,ISEQ) = ICAPTN(2)\n      IUSFED (10,ISEQ)= ICAPTN(3)\n      IUSFED (11,ISEQ)= ICAPTN(4)\n      IUSFED (12,ISEQ)= ICAPTN(5)\n      IUSFED (13,ISEQ)= ITYPE(1)\n      IUSFED (14,ISEQ)= ITYPE(2)\n      IUSFED (15,ISEQ)= ITYPE(3)\n      CALL DBUGIN ('SETFED EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SETFOR\nC*********************************************************************\n      SUBROUTINE SETFOR (ILEN,IPOS1C,IPOS2C,IMX)\nC PURPOSE : SET FORMAT STATEMENT FOR A GIVEN LENGTH STRING\nC*********************************************************************\n      DIMENSION IXA4(25),IAX(3)\n      CHARACTER *4 CZIXA4(25) , CZIAX(3) , CZBLK , CZOLDR\n      EQUIVALENCE (CZIXA4,IXA4) , (CZIAX,IAX) , (CZBLK,IBLK) ,\n     *            (CZOLDR,IHOLDR)\n      DATA CZIXA4 /'1A4','2A4','3A4','4A4','5A4','6A4',\n     *     '7A4','8A4','9A4','10A4','11A4','12A4','13A4','14A4',\n     *     '15A4','16A4','17A4','18A4','19A4','20A4','21A4','22A4',\n     *     '23A4','24A4','25A4'/\n      DATA CZIAX /',A1 ',',A2 ',',A3 '/\n      DATA CZBLK /' '/ , CZOLDR /'1X'/\n      IL = ILEN\n      IPOS1 = IHOLDR\n      IPOS2 = IBLK\n      IMX = 0\n      IF (IL.EQ.0) GO TO 20\n      N = 0\n      IF (IL.GE.4) N = IL / 4\n      M = IL\n      IF (N.NE.0) M = IL - (N * 4)\n      IMX = 1\n      IF (N.EQ.0) GO TO 10\n      IF (N.GT.25) N = 25\n      IPOS1 = IXA4(N)\n      IMX = N\n      IF (M.EQ.0) GO TO 20\n      IMX = IMX + 1\n10    IPOS2 = IAX(M)\n20    IPOS1C = IPOS1\n      IPOS2C = IPOS2\n      RETURN\n      END\n./     ADD     NAME=SHECON\nC*********************************************************************\n      SUBROUTINE SHECON\nC PURPOSE : AUTOMATIC SHIELD CONTROL TO RAISE AND LOWER SHIELDS\nC*********************************************************************\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8),INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      CHARACTER *4 CZGRE , CZDOWN , CZRED , CZUP , CZDAMG\n      EQUIVALENCE (CZGRE,IZGRE) , (CZDOWN,IZDOWN) , (CZRED,IZRED) ,\n     *            (CZUP,IZUP) , (CZDAMG,IZDAMG)\n      DATA CZGRE /'GREE'/ , CZDOWN /'DOWN'/\n      DATA CZRED /'RED'/ , CZUP /'UP'/\n      DATA CZDAMG /'DAMG'/\n      CALL DBUGIN ('SHECON ENTERED',IW(14),0)\n      IF (IOVER.NE.0) GO TO 100\n      J = ICROG(ICHART(ISCPX1,ISCPY1))\n      IF (J.EQ.IZGRE.AND.ISHUPD.EQ.IZDOWN) GO TO 100\n      IF (J.EQ.IZRED.AND.ISHUPD.EQ.IZUP) GO TO 100\n      CALL LINEF\n      IF (J.EQ.IZGRE) GO TO 50\n      CALL PRMSG ('ENTERING BATTLE ZONE - BATTLE STATIONS',IW(38))\n      CALL ADDQUE ('REDB')\n      IF (ISHUPD.EQ.IZDAMG.OR.ISHENG.EQ.0.OR.ENERGY.LT.50.0) GO TO 30\n      IF (ISHENG.LT.1250) GO TO 40\n      IF (ENERGY.LT.800.0) GO TO 40\n10    CALL LINEF\n      CALL PRMSG (\n     *  'AUTOMATIC DEFLECTOR SHIELD CONTROL ACTIVATED',IW(44))\n      CALL PRMSG ('SHIELDS RAISED.',IW(15))\n      ENERGY = ENERGY-50.0\n      ISHUPD = IZUP\n      IOVER = 1\n20    CALL LINEF\n      GO TO 100\n30    CALL PRMSG ('SHIELDS NOT CURRENTLY USABLE.',IW(29))\n      IOVER = 1\n      GO TO 20\n40    CALL PRMRM ('CURRENT ENERGY = ',17,IW(17),ENERGY,' ',0,1)\n      CALL PRMIM ('CURRENT SHIELD ENERGY = ',24,IW(24),\n     *        ISHENG,' ',0,1)\n      CALL YESNO ('DO YOU WISH TO RAISE SHIELDS',IW(28),28,IYES)\n      IF (IYES.EQ.0) GO TO 20\n      IF (IYES.EQ.1) GO TO 10\n50    IF (ISHUPD.EQ.IZDAMG) GO TO 100\n      CALL PRMSG (\n     *  'AUTOMATIC DEFLECTOR SCREEN CONTROL ACTIVATING',IW(45))\n      CALL PRMSG ('SHIELDS DROPPED.',IW(16))\n      ISHUPD = IZDOWN\n      GO TO 20\n100   CALL DBUGIN ('SHECON EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SHIFT\nSHFT     TITLE '--- SHIFT - COMPUTE ALLOWED TIME ROUTINE ---'\nSHIFT    START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : ROUTINE SHIFT - COMPUTE ALLOWED TIME TO PLAY GAME       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR    R12,R15             ESTABLISH ADDRESSABILITY\n         USING SHIFT,R12           WE GOT IT\n         ST    R13,SAVEAREA+4      NON-RENT, NO BIG DEAL HERE\n         LA    R15,SAVEAREA        SET FORWARD/BACKWORD POINTERS\n         ST    R15,8(,R13)           \" \" \"\n         LA    R13,SAVEAREA          \" \" \"\n* 1) INIT THE COUNTERS FOR PROGRAM (AT LEAST MAKE PROGRAM \"REUS\")\n         MVC   JULDAT,=C'000000'   DISPLAY ZERO\n         MVC   GREGDAT,=C'000000'    \" \" \"\n         MVI   DAY,C'0'\n* 2) CALL JULIAN ROUTINE TO GET DAY OF WEEK\n         OI    PARMS+8,X'80'       FLIP ON VL BIT\n         LA    R1,PARMS            SET UP CALL\n         L     R15,=V(JULIAN)      AND THE JULIAN ROUTINE\n         BALR  R14,R15             GO GET THE DATE/DAY\n* 3) GET THE DAY OF THE WEEK\n         SR    R3,R3               CLEAR REG FOR IC\n         IC    R3,DAY              GET ONE BYTE DAY\n         S     R3,=X'000000F0'     STRIP OFF FIRST NIBBLE\n         LTR   R3,R3               CHECK RESULT\n         BZ    OKSHIFT             IF DAY UNKNOWN, LET THEM GO\n         BCTR  R3,0                SUBTRACT ONE\n         LR    R4,R3               COPY VALUE\n         MH    R4,=AL2($TABELEN)   AND NOW IT'S DISPLACEMENT\n         L     R3,=V(SHIFTAB)      LOAD ADDRESS OF SHIFT TABLE\n         L     R9,=V(INFOSH)       ADDRESS OF INFO SHIFT TABLE\n         USING $DISPLAY,R9\n         MVC   $DSTART,=CL8'00:00   '\n         MVC   $DSTOP,=CL8'00:00   '\n         LA    R3,0(R3,R4)         POINT AT ENTRY\n         USING $TIMETAB,R3\n         LH    R1,$STARTOK\n         ST    R1,FWORD\n         UNPK  DUMMY(9),FWORD(5)\n         TR    DUMMY(8),TRANTAB\n         MVC   $DSHOUR,DUMMY+4     FILL IN HOURS\n         MVC   $DSMIN,DUMMY+6      AND MINUTES\n         LH    R1,$STOPOK\n         ST    R1,FWORD\n         UNPK  DUMMY(9),FWORD(5)\n         TR    DUMMY(8),TRANTAB\n         MVC   $DPHOUR,DUMMY+4\n         MVC   $DPMIN,DUMMY+6\n         MVC   $ITYPE,$IFLAG\n        TIME   DEC\n         ST    R0,WORKTIME         SAVE THE TIME\n         CLC   WORKTIME(2),$STARTOK IN OK TIME?\n         BNH   OUTSHIFT            CURRENT TIME MUST BE > START\n         CLC   WORKTIME(2),$STOPOK BEFORE STOP TIME?\n         BH    OUTSHIFT            CUREENT TIME MUST BE < STOP\nOKSHIFT  CLC   $IFLAG,=C'EXCL'     IS EXCLUDE FLAG SET\n         BE    SETOUT              OVERRIDE OK, HE'S INSIDE EXCL\nSETOK    L     R1,=V(SHIFTF)       COMMON TO RETURN SHIFT IN\n         MVC   0(4,R1),=F'1'       MUST BE OK SET TO ONE\n         B     QUIT\nOUTSHIFT CLC   $IFLAG,=C'EXCL'     IS EXCLUDE FLAG SET\n         BE    SETOK               IF SO, OVERRIDE OUTSHIFT\nSETOUT   L     R1,=V(SHIFTF)       COMMON TO RETURN SHIFT IN\n         XC    0(4,R1),0(R1)       SET ZERO\n* 9) RESTORE REGS AND RETURN\nQUIT     L     R13,SAVEAREA+4      GET ORIGINAL REGISTER 13\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         EJECT\n*------- WORK AREAS (NON-RENT CODE)\nSAVEAREA DC    9D'0'               REGISTERS SAVE AREA\nJULDAT   DC    CL5' '              USAGE IS DISPLAY\nGREGDAT  DC    CL6' '              USAGE IS DISPLAY\nDAY      DC    CL1' '              USAGE IS DISPLAY\nPARMS    DC    A(JULDAT,GREGDAT,DAY)\nWORKTIME DC    A(0)\nTRANTAB  DC    CL(X'F0')' '\n         DC    C'0123456789ABCDEF'\nFWORD    DC    F'0',CL1' '\nDUMMY    DC    CL9' '\n         SPACE 1\n        LTORG\n         SPACE 1\n$TIMETAB DSECT\n$STARTOK DS    XL2\n$STOPOK  DS    XL2\n$IFLAG   DS    CL4\n$TABELEN EQU   *-$STARTOK\n$WHOLET  EQU   $TABELEN*7\n         SPACE 1\n$DISPLAY DSECT\n$DSTART  DS    0CL8\n$DSHOUR  DS    CL2\n$C1      DS    CL1\n$DSMIN   DS    CL2\n$FILL1   DS    CL3\n$DSTOP   DS    0CL8\n$DPHOUR  DS    CL2\n$C2      DS    CL1\n$DPMIN   DS    CL2\n$FILL2   DS    CL3\n$ITYPE   DS    CL4\n         SPACE 1\n         END\n./     ADD     NAME=SHIFTAB\nSHTB     TITLE '--- SHIFTAB - INIT VARIABLES FOR GRAPHICS ROUTINE ---'\nSHIFTAB  START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : SHIFT TABLE DATA CSECT                                  *\n*           INSTRUCTIONS FOR CODING AND USE :                       *\n*           THERE ARE SEVEN ENTRIES BELOW, ONE FOR EACH DAY OF THE  *\n*           WEEK (SUNDAY IS ALWAYS FIRST AND THE LABEL IS FOR       *\n*                DOCUMENTATION ONLY)                                *\n*           THE FORMAT OF EACH TABLE ENTRY :                        *\n*                FIRST TWO BYTES = HEX FORM HOUR AND MINUTE         *\n*                    (EXAMPLE X'1200'=NOON)                         *\n*                    FOR THE START TIME FOR THE \"SHIFT\" TODAY       *\n*                SECOND TWO BYTES = HEX FORM \"HHMM\" FOR THE STOP    *\n*                    TIME FOR THE \"SHIFT\" TODAY                     *\n*                +4 BYTES, LENGTH 4 = MODIFIER FOR THE SHIFT,       *\n*                    \"INCL\" MEANS THE GIVEN SHIFT IS THE SHIFT IN   *\n*                           WHICH PLAY IS ALLOWED.                  *\n*                    \"EXCL\" MEANS THIS IS THE SHIFT IN WHICH PLAY   *\n*                           IS *NOT* ALLOWED.                       *\n*           EXAMPLES :                                              *\n*           =========                                               *\n*           SUN  DC  XL2'0000',XL2'2400',C'INCL'                    *\n*                = ALLOW PLAY ALL DAY                               *\n*           MON  DC  XL2'0000',XL2'2400',C'EXCL'                    *\n*                = PREVENT PLAY ALL DAY                             *\n*           TUE  DC  XL2'0800',XL2'1700',C'ECXL'                    *\n*                = PREVENT PLAY FROM 8 TO 5                         *\n*           THE SUPPLIED DEFAULT IS ALLOW PLAY ALL THE TIME.        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nSUN      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nMON      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nTUE      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nWED      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nTHU      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nFRI      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\nSAT      DC  XL2'0000',XL2'2400',C'INCL'     MIDNIGHT TO 2400\n         DC  XL2'FFFF',XL2'FFFF',C'    '     END OF TABLE\n         SPACE 1\n         END\n./     ADD     NAME=SHIFTC\nC*********************************************************************\n      SUBROUTINE SHIFTC (IFLAG)\nC PURPOSE : CHECK THE SHIFT TO SEE IF A PLAYER CAN PLAY DURING\nC           THIS TIME\nC*********************************************************************\n      COMMON /SHIFTF/ ISHIFT\n      COMMON /OUTUNT/ IOUTT\n      COMMON /INFOSH/ ISTART(2), ISTOP(2), IXC\n      CALL DBUGIN ('SHIFTC ENTERED',IW(14),0)\n      CALL SHIFT\n      IF (ISHIFT.EQ.1) GO TO 100\n      CALL LINEF\n      CALL PRMSG ('YOU ARE NOT IN THE ALLOWED SHIFT ',IW(33))\n      CALL PRMSG ('TRY AGAIN NON-PRIME TIME.        ',IW(33))\n      CALL LINEF\n      CALL LINEF\n      CALL PRMSG\n     * ('VALID HOURS FOR TODAY  INCL=INCLUSIVE,EXCL=EXCLUSIVE ',IW(52))\n      CALL LINEF\n      CALL PRMSG ('START TIME:',IW(11))\n      CALL PRMSG (ISTART,IW(8))\n      CALL LINEF\n      CALL PRMSG ('STOP  TIME:',IW(11))\n      CALL PRMSG (ISTOP,IW(8))\n      CALL LINEF\n      CALL PRMSG (IXC,IW(4))\n      CALL LINEF\n100   IFLAG = ISHIFT\n      CALL DBUGIN ('SHIFTC EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SHIP\nC*********************************************************************\n      SUBROUTINE SHIP\nC PURPOSE : WRITE A PRETTY KLINGON SHIP TO THE CERTIFICATE FILE\nC*********************************************************************\n      CALL DBUGIN ('SHIP ENTERED',IW(12),0)\n      WRITE (8,10000)\n      WRITE (8,10010)\n      WRITE (8,10020)\n      WRITE (8,10030)\n      WRITE (8,10040)\n      WRITE (8,10050)\n      WRITE (8,10060)\n      WRITE (8,10070)\n      WRITE (8,10080)\n      WRITE (8,10090)\n      WRITE (8,10090)\n      WRITE (8,10080)\n      CALL DBUGIN ('SHIP EXITED',IW(11),0)\n      RETURN\n10000 FORMAT (3X,7X,'*****************')\n10010 FORMAT (3X,4X,'**********************',42X,'*****')\n10020 FORMAT (3X,1X,'***********************',40X,'***********')\n10030 FORMAT (3X,4X,'********',\n     *12X,'*********************************',\n     *'*******           *')\n10040 FORMAT (3X,10X,'*',13X,'*********************************',\n     *19X,'*')\n10050 FORMAT (3X,9X,'**************',34X,'******',13X,'*')\n10060 FORMAT (3X,11X,'*',11X,'*',39X,'*******',5X,'*')\n10070 FORMAT (3X,13X,'*',10X,'*',45X,'*****')\n10080 FORMAT (3X,5X,'***********************')\n10090 FORMAT (3X,5X,'*',22X,'*')\n      END\n./     ADD     NAME=SRS\nC*********************************************************************\n      SUBROUTINE SRS\nC PURPOSE : CHECK FOR SRSCAN PARMS AND ISSUE THE CALLS\nC           THIS ROUTINE WILL *NOT* BE CALLED IF CPU=1 (TSO)\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /SRCOPY/ ISCOP(10,10)\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     * IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,\n     * ET,ISECT(10,10),TVX,TVY,ICMC\n      CALL DBUGIN ('SRS ENTERED',IW(11),0)\n      IF (XSSDC.GT.0.001) GO TO 470\n      IKY(ISCPX1,ISCPY1) = 1\n      CALL BRIDGE (N2)\n      IF (N2.GT.50) GO TO 440\n      CALL SRSCAN (0,1,ISECT)\n      GO TO 450\n440   CALL SRSCAN (1,1,ISECT)\n450   DO 460 J = 1, 10\n           DO 460 I = 1, 10\n                ISCOP(I,J) = ISECT(I,J)\n460   CONTINUE\n      ISSAVE = 1\n      GO TO 150\n470   CALL PRMSG ('SHORT RANGE SCANNERS NON-OPERATIONAL  ',IW(36))\n      CALL LINEF\n      IF (ISSAVE.NE.1) GO TO 150\n      CALL PRMSG ('***** COPY OF LAST SHORT RANGE SCAN *****',IW(41))\n      CALL SRSCAN (0,1,ISCOP)\n      GO TO 150\n150   CALL DBUGIN ('SRS EXITED',IW(10),0)\n      RETURN\n      END\n./     ADD     NAME=SRSCAN\nC*********************************************************************\n      SUBROUTINE SRSCAN (ISTAT,ISRS,ISCAN)\nC PURPOSE : DISPLAY FORMATED INFORMATION ABOUT THE QUADRANT WE ARE IN\nC           IF ISTAT = -1 AND ISCAN = -1 THEN THIS IS \"COPY\" OF\nC           LAST SRS\nC*********************************************************************\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /INFO/ ICOND(2),ENERGY,ISHUPD,ISHENG,IAPDEV,IPOF,IOVER\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /CPU/ IBMT\n      COMMON /OUTUNT/ IOUTT\n      DIMENSION ISCAN(10,10)\n      DIMENSION IAPIND(2),IPTZ(2),IZARM(2), IZREAD(2),IZDAMG(2)\n      DATA IYES /1/\n      CHARACTER *4 CZBLK , CZOFF , CZOUT , CZARM(2) , CZREAD(2) ,\n     *             CZDAMG(2)\n      EQUIVALENCE (CZBLK,IBLK) , (CZOFF,IZOFF) , (CZOUT,IZOUT) ,\n     *            (CZARM,IZARM) , (CZREAD,IZREAD) , (CZDAMG,IZDAMG)\n      DATA CZBLK /' '/ , CZOFF /'OFF'/ , CZOUT /'OUT'/\n      DATA CZARM /'ARME','D'/\n      DATA CZREAD /'READ','Y'/\n      DATA CZDAMG /'DAMA','GED'/\n      CALL DBUGIN ('SRSCAN ENTERED',IW(14),0)\n      NSDAM = 0\n      IF (IBMT.EQ.0) CALL LINEF\n      IOUT = IOUTT\n      IF (IBMT.EQ.1) IOUT = IOUT - 1\n      IPTZ(1) = IZREAD(1)\n      IPTZ(2) = IZREAD(2)\n      IF (XPTDC.LE.0.001) GO TO 5\n      IPTZ(1) = IZDAMG(1)\n      IPTZ(2) = IZDAMG(2)\n5     IF (ITORCT.NE.0) GO TO 6\n      IPTZ(1) = IZOUT\n      IPTZ(2) = IBLK\n6     REMAIN = TGIVEN-CSDATE\n      IAPIND(1) = IZARM(1)\n      IAPIND(2) = IZARM(2)\n      IF (IAPDEV.EQ.1) GO TO 7\n      IAPIND(1) = IZOFF\n      IAPIND(2) = IBLK\n7     ISHPCT = IFIX(FLOAT(ISHENG)/25.0)\n      IF (ISTAT.NE.-1.OR.ISRS.NE.-1) GO TO 8\n      NSDAM = IYES\n      GO TO 30\n8     IF (ISTAT.EQ.IYES.AND.ISRS.EQ.IYES) GO TO 30\n      IF (ISTAT.NE.IYES.AND.ISRS.EQ.IYES) GO TO 20\n      IF (ISTAT.EQ.IYES.AND.ISRS.NE.IYES) GO TO 10\n      GO TO 30\nC     --- STATUS ONLY AT THIS POINT\n10    WRITE (IOUT,10010)\n     *     ITORCT,IPTZ,ISCPY1,ISCPX1,ISCPY2,ISCPX2,CSDATE,\n     *     REMAIN,ICOND,IAPIND,ENERGY,ISHUPD,ISHPCT,ISHENG,WFACT,ISB,IFS\n     *     ,IKC\n      GO TO 40\nC     --- SHORT FORM SRS\n20    WRITE (IOUT,10000)\n      WRITE (IOUT,10020) ((ISCAN(J,I),J=1,10),I=1,10)\n      GO TO 40\nC     --- LONG FORM SRS\n30    WRITE (IOUT,10000)\n      WRITE (IOUT,10030)\n     *      (ISCAN(J,1),J=1,10),ITORCT,IPTZ,(ISCAN(J,2),J=1,10),\n     *     ISCPY1,ISCPX1,ISCPY2,ISCPX2,(ISCAN(J,3),J=1,10),CSDATE,\n     *     (ISCAN(J,4),J=1,10),REMAIN,(ISCAN(J,5),J=1,10),ICOND,IAPIND,\n     *    (ISCAN(J,6),J=1,10),ENERGY,(ISCAN(J,7),J=1,10),ISHUPD,ISHPCT,\n     *     ISHENG,(ISCAN(J,8),J=1,10),WFACT,(ISCAN(J,9),J=1,10),ISB,IFS,\n     *     (ISCAN(J,10),J=1,10),IKC\n      IF (NSDAM.EQ.IYES) WRITE (IOUT,10040)\n      WRITE (IOUT,10050)\n40    CALL DBUGIN ('SRSCAN EXITED',IW(13),0)\n      RETURN\n10000 FORMAT (1X,'   1 2 3 4 5 6 7 8 9 10 ')\n10010 FORMAT (2X,'TORPEDOES',4X,I3,2X,'CONDITION:',2X,\n     * A4,A3/ 2X,'POSITION',4X,I2,' - ',I2,',',I2,\n     *' - ',I2/2X,'STARDATE',3X,F8.2/\n     * 2X,'REMAINING',3X,F8.2/2X,'CONDITION',3X,2A4,\n     * '  A.P.D. ',A4,A1/2X,'ENERGY',6X,F9.2/\n     * 2X,'SHIELDS',6X,A4,2X,I3,' PCT ',I5,' UNTS'/\n     * 2X,'WARP FACTOR ',F6.2/2X,\n     * 'FEDERATION BASES ',I2,'  STARSHIPS ',I2/2X,\n     * 'COMMANDERS   ',I2//)\n10020 FORMAT (' 1  ',10(A1,1X)\n     * / ' 2  ',10(A1,1X)/\n     * ' 3  ',10(A1,1X)/' 4  ',10(A1,1X)/\n     * ' 5  ',10(A1,1X)/\n     * ' 6  ',10(A1,1X)/' 7  ',10(A1,1X)/\n     * ' 8  ',10(A1,1X)/' 9  ',10(A1,1X)/\n     * ' 10 ',10(A1,1X))\n10030 FORMAT (' 1  ',10(A1,1X),2X,'TORPEDOES',4X,I3,2X,'CONDITION:',2X,\n     * A4,A3/ ' 2  ',10(A1,1X),2X,'POSITION',4X,I2,' - ',I2,',',I2,\n     *' - ',I2/' 3  ',10(A1,1X),2X,'STARDATE',3X,F8.2/' 4  ',10(A1,1X),\n     * 2X,'REMAINING',3X,F8.2/' 5  ',10(A1,1X),2X,'CONDITION',3X,2A4,\n     * '  A.P.D. ',A4,A1/' 6  ',10(A1,1X),2X,'ENERGY',6X,F9.2/' 7  ',\n     * 10(A1,1X),2X,'SHIELDS',6X,A4,2X,I3,' PCT ',I5,' UNTS'/' 8  ',\n     * 10(A1,1X),2X,'WARP FACTOR ',F6.2/' 9  ',10(A1,1X),2X,\n     * 'FEDERATION BASES ',I2,'  STARSHIPS ',I2/' 10 ',10(A1,1X),2X,\n     * 'COMMANDERS   ',I2)\n10040 FORMAT\n     *(' +++ SCANNERS DAMAGED, COPY OF LAST SCAN *** (STATUS CURRENT)')\n10050 FORMAT (//)\n      END\n./     ADD     NAME=SR3270\nC*********************************************************************\n      SUBROUTINE SR3270\nC PURPOSE : SET UP CALL TO SRSCAN ROUTINE FOR 3270 TSO TERM\nC           THIS ROUTINE WILL ONLY BE CALLED IF CPU=1 (TSO)\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /DEVICE/ XCDC,XSRDC,XIEDC,XLRDC,XWEDC,XDSDC,XSSDC,XPTDC\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /SRCOPY/ ISCOP(10,10)\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     * IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,\n     * ET,ISECT(10,10),TVX,TVY,ICMC\n      CALL DBUGIN ('SR3270 ENTERED',IW(14),0)\n      IF (XSSDC.GT.0.001) GO TO 470\n      IKY(ISCPX1,ISCPY1) = 1\n      CALL SRSCAN (1,1,ISECT)\n      DO 460 J = 1, 10\n           DO 460 I = 1, 10\n                ISCOP(I,J) = ISECT(I,J)\n460   CONTINUE\n      GO TO 150\n470   CALL SRSCAN (-1,-1,ISCOP)\n150   CALL DBUGIN ('SR3270 EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSDEST\nC*********************************************************************\n      SUBROUTINE SSDEST (ISHIPS,IQX,IQY,ISX,ISY,INAME)\nC PURPOSE : GET NAME OF DESTROYED FEDERATION STARSHIP, AND MARK\nC           THE SHIP \"DESTROYED\" (POSITION ZERO)\nC*********************************************************************\n      DIMENSION ISHIPS(15,13)\n      DIMENSION INAME(3)\n      CALL DBUGIN ('SSDEST ENTERED',IW(14),0)\n      CALL SSFIND (ISHIPS,IQX,IQY,ISX,ISY,NDX)\n      ISHIPS(1,NDX) = 0\n      ISHIPS(2,NDX) = 0\n      ISHIPS(3,NDX) = 0\n      ISHIPS(4,NDX) = 0\n      INAME(1) = ISHIPS(5,NDX)\n      INAME(2) = ISHIPS(6,NDX)\n      INAME(3) = ISHIPS(7,NDX)\n      CALL DBUGIN ('SSDEST EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSFIND\nC*********************************************************************\n      SUBROUTINE SSFIND (ISHIPS,LQX,LQY,LSX,LSY,NDXR)\nC PURPOSE : LOCATE A SHIP IN THE SHIPS VECTOR GIVEN IT'S POSITION\nC*********************************************************************\n      DIMENSION ISHIPS(15,13)\n      CALL DBUGIN ('SSFIND ENTERED',IW(14),0)\n      NDX = 1\n10    IF (NDX.GT.13.OR.(ISHIPS(1,NDX).EQ.LQX.AND.ISHIPS(2,NDX).EQ.\n     *     LQY.AND.ISHIPS(3,NDX).EQ.LSX.AND.ISHIPS(4,NDX).EQ.LSY))\n     *                                                  GO TO 20\n      NDX = NDX+1\n      GO TO 10\n20    IF (NDX.LE.13) GO TO 30\n      CALL PRMSG ('PLEASE REPORT ERROR 02 IN SSFIND  ',IW(34))\n      CALL PRMSG ('CALLING FREEZE TO SAVE DATA',IW(29))\n      CALL FREEZE\n      NDX = 1\n30    NDXR = NDX\n      CALL DBUGIN ('SSFIND EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSINIT\nC*********************************************************************\n      SUBROUTINE SSINIT (ISHIPS,IQX,IQY)\nC PURPOSE : INITIALIZE THE QUADRANT POSITION FOR A FEDERATION STARSHIP\nC*********************************************************************\n      DIMENSION ISHIPS(15,13)\n      CALL DBUGIN ('SSINIT ENTERED',IW(14),0)\n      CALL SSFIND (ISHIPS,0,0,0,0,NDX)\n      ISHIPS(1,NDX) = IQX\n      ISHIPS(2,NDX) = IQY\n      CALL DBUGIN ('SSINIT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSMOVI\nC*********************************************************************\n      SUBROUTINE SSMOVI (ISHIPS,IQX,IQY,ISX,ISY,NQX,NQY,INAME,IPILOT,\n     *     ITYPE)\nC PURPOSE : MOVE A FEDERATION STARSHIP FROM OUTSIDE THE QUADRANT\nC           TO INSIDE IT\nC*********************************************************************\n      DIMENSION ISHIPS(15,13),IPILOT(5)\n      DIMENSION INAME(3), ITYPE(3)\n      CALL DBUGIN ('SSMOVI ENTERED',IW(14),0)\n      CALL SSFIND (ISHIPS,NQX,NQY,0,0,NDX)\n      ISHIPS(1,NDX) = IQX\n      ISHIPS(2,NDX) = IQY\n      ISHIPS(3,NDX) = ISX\n      ISHIPS(4,NDX) = ISY\n      INAME(1) = ISHIPS(5,NDX)\n      INAME(2) = ISHIPS(6,NDX)\n      INAME(3) = ISHIPS(7,NDX)\n      IPILOT(1) = ISHIPS(8,NDX)\n      IPILOT(2) = ISHIPS(9,NDX)\n      IPILOT(3) = ISHIPS(10,NDX)\n      IPILOT(4) = ISHIPS(11,NDX)\n      IPILOT(5) = ISHIPS(12,NDX)\n      ITYPE(1) = ISHIPS(13,NDX)\n      ITYPE(2) = ISHIPS(14,NDX)\n      ITYPE(3) = ISHIPS(15,NDX)\n      CALL DBUGIN ('SSMOVI EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSMOVO\nC*********************************************************************\n      SUBROUTINE SSMOVO (ISHIPS,IQX,IQY,ISX,ISY,NQX,NQY,INAME)\nC PURPOSE : MOVE A FEDERATION STARSHIP FROM INSIDE A QUADRANT TO\nC           OUTSIDE THE QUADRANT\nC*********************************************************************\n      DIMENSION ISHIPS(15,13)\n      DIMENSION INAME(3)\n      CALL DBUGIN ('SSMOVO ENTERED',IW(14),0)\n      CALL SSFIND (ISHIPS,IQX,IQY,ISX,ISY,NDX)\n      ISHIPS(1,NDX) = NQX\n      ISHIPS(2,NDX) = NQY\n      ISHIPS(3,NDX) = 0\n      ISHIPS(4,NDX) = 0\n      INAME(1) = ISHIPS(5,NDX)\n      INAME(2) = ISHIPS(6,NDX)\n      INAME(3) = ISHIPS(7,NDX)\n      CALL DBUGIN ('SSMOVO EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSPRNT\nC*********************************************************************\n      SUBROUTINE SSPRNT (IFLAG)\nC PURPOSE : PRINT STATS ON A FEDERATION STARSHIP IN THE QUADRANT\nC*********************************************************************\n      COMMON /NUMBER/ NSTARS,NPLNTS,NSBASE,NFED,NCOMM,NFX(9),NFY(9),\n     *     NCX(9),NCY(9)\n      COMMON /SSINFO/ IOXQ(9),IOYQ(9),INXS(9),INYS(9)\n      COMMON /TRACOM/ TARX,TARY,ISCPX2,ISCPY2,NSECE(10,10),IHIT,ISBC,\n     *     IFSC,IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n     *     ,ET,ISECT(10,10),TVX,TVY,ICMC\n      COMMON /SHIPS/ IUSFED(15,13)\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      DIMENSION IDMSG2(15),IDMSG3(15)\n      CHARACTER *4 CZMSG2(15) , CZMSG3(15)\n      EQUIVALENCE (CZMSG2,IDMSG2) , (CZMSG3,IDMSG3)\n      DATA CZMSG2(1)/'HAS '/,CZMSG2(2)/'BEEN'/,CZMSG2(3)/' IDE'/,\n     *     CZMSG2(4)/'NTIF'/,CZMSG2(5)/'IED '/,CZMSG2(6)/'AS T'/,\n     *     CZMSG2(7)/'HE F'/,CZMSG2(8)/'EDER'/,CZMSG2(9)/'ATIO'/,\n     *     CZMSG2(10)/'N '/,CZMSG2(14)/'U.S.'/,CZMSG2(15)/'S. '/\n      DATA IDMSG2(11) /0/ , IDMSG2(12) /0/ , IDMSG2(13) /0/\n      DATA CZMSG3(4)/'CAPT'/,CZMSG3(5)/'AIN '/,CZMSG3(6)/' '/,\n     *     CZMSG3(7)/' '/,CZMSG3(8)/' '/,CZMSG3(9)/' '/,\n     *     CZMSG3(10)/' '/,CZMSG3(11)/' '/,CZMSG3(12)/' '/,\n     *     CZMSG3(13)/' '/,CZMSG3(14)/' '/,CZMSG3(15)/' '/\n      DATA IDMSG3(1) /0/ , IDMSG3(2) /0/ , IDMSG3(3) /0/\nC     --- IFLAG = 1 MEANS THE RTN MUST USE THE SSINFO QUADRANT INFO\nC         VECTORS FOR THE MOVES, = 0 MEANS USE CURRENT QUADRANT INFO\n      CALL DBUGIN ('SSPRNT ENTERED',IW(14),0)\n      CALL ITERPT\n      IF (NFED.EQ.0) GO TO 50\n      CALL LINEF\n      CALL PRMSG ('THE STATISTICS ON THE FEDERATION STARSHIPS IN',\n     *         IW(45))\n      CALL PRMSG ('OUR QUADRANT, TO FOLLOW:',IW(23))\n      IF (IFLAG.EQ.0) CALL LOCATE (KZF,N,N)\n      DO 40 N = 1, NFED\n           CALL LINEF\n           IF (IFLAG) 50 , 10 , 20\n10         IFX = NFX(N)\n           IFY = NFY(N)\n           IOX = ISCPX1\n           IOY = ISCPY1\n           GO TO 30\n20         IFX = INXS(N)\n           IFY = INYS(N)\n           IOX = IOXQ(N)\n           IOY = IOYQ(N)\n30         CALL PRMSM ('THE STARSHIP AT SECTOR: ',\n     *     24,IW(24),IFY,IFX,' ',0,1)\n           CALL SSMOVI (IUSFED,ISCPX1,ISCPY1,IFX,IFY,IOX,IOY,IDMSG3(1),\n     *          IDMSG3(6),IDMSG2(11))\n           CALL PRMSG (IDMSG2,IW(60))\n           CALL PRMSG (IDMSG3,IW(60))\n           CALL PRMSG ('LAST KNOWN TO BE IN COMMAND',IW(27))\n40    CONTINUE\n50    CALL DBUGIN ('SSPRNT EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=SSTART\nC*********************************************************************\n      SUBROUTINE SSTART\nC PURPOSE : SET SHIP NAMES AND CAPTAIN NAMES FOR SHIPS\nC*********************************************************************\n      CALL DBUGIN ('SSTART ENTERED',IW(14),0)\n      CALL SETFED (0,0,0,0,'ENTERPRISE  ',\n     * 'WILLIAM DECKER      ','CRUISER     ',1,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'POTEMPKIN   ',\n     * 'MARK STEVENS        ','CRUISER     ',2,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'YORKTOWN    ',\n     * 'TIMOTHY LYON        ','CRUISER     ',3,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'EXCALIBUR   ',\n     * 'JEFF LAURENCE       ','CRUISER     ',4,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'LEXINGTON   ',\n     * 'RAYMOND POWERS      ','CRUISER     ',5,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'KUBLIA      ',\n     * 'HOI SUEN            ','DESTROYER   ',6,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'SARGON      ',\n     * 'ANNE DREADEN        ','DESTROYER   ',7,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'MONITOR     ',\n     * 'LARRY WILLIAMS      ','SCOUT       ',8,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'HOOD        ',\n     * 'HERBERT RUBIN       ','CRUISER     ',9,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'EXETER      ',\n     * 'WILLIAM RUDD        ','CRUISER     ',10,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'DARIUS      ',\n     * 'MARIANNE ANDREAS    ','DESTROYER   ',11,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'ALARIC      ',\n     * 'GAVIN PATTON        ','DESTROYER   ',12,IW(10),IW(20),IW(12))\n      CALL SETFED (0,0,0,0,'SHAITAN     ',\n     * 'JACK FISCHRUP       ','DESTROYER   ',13,IW(10),IW(20),IW(12))\n      CALL DBUGIN ('SSTART EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=STARTM\nC*********************************************************************\n      SUBROUTINE STARTM\nC PURPOSE : PROMPT FOR INFO ABOUT GAME, LEVEL, OLDNEW, AT STARTUP\nC*********************************************************************\n      IMPLICIT INTEGER (A-Z)\n      REAL EOFF\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8),INPUT(50),IPAD3\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /MISC/ BATTER,ISSAVE,IDUM,WFACT,IDATF,ILEV,CSDATE,TGIVEN\n      CALL DBUGIN ('STARTM ENTERED',IW(14),0)\n      ILEV = 0\n      TOURN = 0\n10    CALL LINEF\n      CALL READIN ('ARE YOU RATED GOOD, EXPERT, OR EMERITUS ',\n     *     IW(40),40,1,EOFF)\n      IF (EOFF.GT..1) GO TO 10\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 10\n      IF (INPUT(N2).EQ.KZG) GO TO 40\n      IF (INPUT(N2).EQ.KZE.AND.INPUT(N2+1).EQ.KZX) GO TO 30\n      IF (INPUT(N2).EQ.KZE.AND.INPUT(N2+1).EQ.KZM) GO TO 20\n      CALL HELPRT('LEVHELP     ',IW(16))\n      GO TO 10\n20    ILEV = 3\n      GO TO 50\n30    ILEV = 2\n      GO TO 50\n40    ILEV = 1\n50    CALL LINEF\n      CALL READIN ('DO YOU WANT A TOURNAMENT OR REGULAR GAME ',\n     *     IW(41),41,1,EOFF)\n      IF (EOFF.GT..1) GO TO 50\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 50\n      IF (INPUT(N2).EQ.KZR) GO TO 60\n      IF (INPUT(N2).EQ.KZT) GO TO 70\n      CALL HELPRT('TOURHELP    ',IW(12))\n      GO TO 50\n60    TOURN = 0\n      GO TO 80\n70    TOURN = 1\n80    IF (TOURN.EQ.0) GO TO 100\n90    CALL LINEF\n      CALL READIN ('PLEASE SUPPLY NAME OR NUMBER OF TOURNAMENT ',\n     *     IW(43),43,0,EOFF)\n      NAME = IFIX(ABS(FLOAT(INPUT(1))/98765.0))\n      IF (EOFF.GT..1) GO TO 90\n100   IF (TOURN.EQ.1) CALL RANSET (NAME)\n      I = TIME(DUMMY)\n      IF (TOURN.NE.1) CALL RANSET (I)\n      CALL DBUGIN ('STARTM EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=STAX\nSTAX     TITLE '--- STAX - DEFER INTERUPTS ROUTINE ---'\nSTAX     START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : FUNCTION TO CANCEL \"STAE\" AND DEFER INTERUPTS IF        *\n*           DESIRED (TURNED OFF AT THIS POINT, TO USE,              *\n*           UNCOMMENT THE \"STAX\" MACROS)                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n         LR     R12,R15\n         USING  STAX,R12\n         L      R1,0(,R1)\n         ICM    R1,B'1111',0(R1)   GET PARM 0=DEFER ON \u00ac=0=DEFER OFF\n         BZ     DEFON\n*       STAX    DEFER=NO           DEFER INTERUPTS\n         B      QUIT\nDEFON    DS     0H\n*       STAX    DEFER=YES\n        STAE    0\nQUIT    RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         SPACE 1\n         END\n./     ADD     NAME=TARSET\nC*********************************************************************\n      SUBROUTINE TARSET (DPRECX,DPRECY,TACX,TACY,ITRCON,LRUDD,C)\nC PURPOSE : DETERMINE IF A GIVEN DESTINATION IS FURTHER AWAY ON\nC           THE X AXIS OR THE Y AXIS, NEEDED TO BREAK UP CHECKS\nC           FOR OBJECTS IN THE WAY (I.E. TARGETS FOR PHOTON TORPEOES\nC           AND MOVEMENT) SO THAT THINGS ARE NOT HOPPED OVER\nC  EXAMPLE :\nC  =========\nC        X-AXIS\nC  1 2 3 4 5 6 7 8 9 10           TARCON Y WOULD BE RETURNED\nC  . . . . . . . . . . 1          SINCE THERE IS A GREATER Y\nC                                 DISTANCE THAN X, HENCE X4-Y5\nC  . . . . . . . . . . 2          AND X5-Y6 WOULD BE CHECKED FOR\nC                                 THINGS IN THE WAY, IF X\nC  . . . . . . . . . . 3          WERE ACCIDENTLY RETURNED, THEN\nC                                 ONLY ONE POINT (EITHER X4-Y5 OR\nC  . . . 1 . . . . . . 4          X5-Y6) WOULD BE CHECKED (WRONGLY)\nC                         Y-AXIS\nC  . . . . . . . . . . 5          THIS MAY NOT BE COMPLETELY\nC                                 CLEAR, IN SHORT:\nC  . . . . . . . . . . 6          IF CHECKING FOR OBJECTS BETWEEN\nC                                 TWO OBJECTS, IT IS IMPORTANT TO\nC  . . . . 2 . . . . . 7          KNOW WHETHER IS IS FURTHER \"X\"\nC                                 AWAY OR FURTHER \"Y\" AWAY.\nC  . . . . . . . . . . 8\nC                                 POINTS INBETWEEN TWO OBJECTS\nC  . . . . . . . . . . 9          NEED TO HAVE ALL POINTS WITHIN\nC                                 .5 SECTORS OF THE PATH BE CONSIDERED\nC  . . . . . . . . . . 10         \"IN THE WAY\"\nC  1 = OBJECT ONE / 2 = OBJECT TWO\nC*********************************************************************\n      INTEGER LRUDD\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL DBUGIN ('TARSET ENTERED',IW(14),0)\n      DPRESX = DPRECX\n      DPRESY = DPRECY\n      TARX = TACX\n      TARY = TACY\n      ADELTX = DPRESX-TARX\n      ADELTY = DPRESY-TARY\n      IF (ADELTX.LT.0.0) ADELTX = -ADELTX\n      IF (ADELTY.LT.0.0) ADELTY = -ADELTY\n      ITRCON = KZY\n      IF (ADELTX.GE.ADELTY) ITRCON = KZX\n      IF (ITRCON.EQ.KZX) GO TO 10\nC     --- CONDITIONS FOR ITRCON 'Y'      ****************\n      LRUDD = 1\n      IF (TARY.LT.DPRESY) LRUDD = -1\n      SC = 0.0\n      IF (TARX.GT.DPRESX) SC = ADELTX/ADELTY\n      IF (TARX.LT.DPRESX) SC = -(ADELTX/ADELTY)\n      GO TO 20\nC     --- CONDITIONS FOR ITRCON 'X'      ****************\n10    LRUDD = 1\n      IF (TARX.LT.DPRESX) LRUDD = -1\n      SC = 0.0\n      IF (TARY.GT.DPRESY) SC = ADELTY/ADELTX\n      IF (TARY.LT.DPRESY) SC = -(ADELTY/ADELTX)\n20    C = SC\n      DPRECX = DPRESX\n      DPRECY = DPRESY\n      TACX = TARX\n      TACY = TARY\n      CALL DBUGCH ('TARSET RTN=',IW(11),ITRCON,IW(4))\n      CALL DBUGIN ('TARSET EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=TIME\nTIME     TITLE '--- TIME - FORTRAN TIME FUNCTION ---'\nTIME     START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE : TIME FUNCTION FOR FORTRAN - RETURN TIME IN R0           *\n*                                       (FUNCTION FORM)             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        YREGS\n        SAVE   (14,12),,*          SAVE REGISTERS\n        TIME    BIN                GET TIME IN BINARY\n         ST    R0,20(R13)          PASS R0 BACK\n        RETURN (14,12),T,RC=0      RESTORE REGISTERS AND RETURN ...\n         SPACE 1\n         END\n./     ADD     NAME=TIMMSG\nC*********************************************************************\n      SUBROUTINE TIMMSG\nC PURPOSE : PRINT THE MSGS THAT SAY THE USER HAS RUN OUT OF TIME.\nC*********************************************************************\n      CALL DBUGIN ('TIMMSG ENTERED',IW(14),0)\n      CALL LINEF\n      CALL PRMSG ('YOU HAVE RUN OUT OF TIME, THE FEDERATION FORCES HAVE'\n     *     ,IW(52))\n      CALL PRMSG ('HAD ENOUGH TIME TO BUILD UP A SOLID DEFENSE',IW(43))\n      CALL PRMSG ('YOUR ORDERS WERE VERY CLEAR... IF YOU FAILED.',\n     *     IW(45))\n      CALL DBUGIN ('TIMMSG EXITED',IW(13),0)\n      RETURN\n      END\n./     ADD     NAME=TIMUSE\nC*********************************************************************\n      FUNCTION TIMUSE (D,WF)\nC PURPOSE : DETERMINE HOW MUCH TIME IS USED MOVING FROM PLACE TO PLACE\nC           NOTE THAT IS STAR TREK THE SPEED IS WARP CUBED, THERE IS A\nC           FUDGE FACTOR IN HERE TO BE ABOUT WARP**1.5 DEPENDING ON\nC           WARP SPEED (ROUTINE CANNOT HANDLE WARP GREATER THAN 12)\nC           D IS DISTANCE TRAVELED\nC           WF IS CURRENT WARP FACTOR\nC*********************************************************************\n      T      = D/(WF**(1.5-((12.0-WF)*.1)))\n      CALL DBUGRN ('TIMUSE RTN=',IW(11),T)\n      TIMUSE = T\n      RETURN\n      END\n./     ADD     NAME=TRACK\nC*********************************************************************\n      SUBROUTINE TRACK\nC PURPOSE : DETERMINE PATH AND TRACK OUTGOING PHOTON TORPEDO\nC*********************************************************************\n      INTEGER PRESX,PRESY,NSECE,IHIT,LRVDP,ITRCON,ISBC,IFSC,IKCC,ICHART,\n     *     IPLNET,ISCPX1,ISCPY1,ICHC,IPLC,ISTC\n      REAL TARX,TARY,DPRESX,DPRESY,DELTX,DELTY,ADELTX,ADLETY,DISP,SL,\n     *     TVX,TVY\n      COMMON /TRACKR/ ITRKC, RTRK(15,2)\n      COMMON /TRACOM/ TARX,TARY,PRESX,PRESY,NSECE(10,10),IHIT,ISBC,IFSC,\n     *     IKCC,ITORCT,ISB,IFS,IKC,IPR,ISCPX1,ISCPY1,ICHC,IPLC,ISTC,ET,\n     *     CSEC(10,10),TVX,TVY,ICMC\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CHARACTER *4 CZBLOW , CZNOHT\n      EQUIVALENCE (CZBLOW,IZBLOW) , (CZNOHT,IZNOHT)\n      DATA CZBLOW /'BLOW'/ , CZNOHT /'NOHT'/\n      CALL DBUGIN ('TRACK ENTERED',IW(13),0)\n      IF (RAND(150.0).GT.1.0) GO TO 10\n      CALL BEEP\n      CALL LINEF\n      CALL ADDQUE ('REDA')\n      CALL PRMSG ('*** DISRUPTOR TORPEDO EXPLODES IN FIRING TUBE',\n     *    IW(45))\n      CALL LINEF\n      IHIT = IZBLOW\n      GO TO 50\n10    DPRESY = PRESY\n      DPRESX = PRESX\n      TVX = DPRESX\n      TVY = DPRESY\n      IHIT = IZNOHT\n      CALL LINEF\n      CALL PRMSG ('### TORPEDO FIRED -- TRACKING',IW(29))\n      CALL LINEF\n      CALL TARSET (DPRESX,DPRESY,TARX,TARY,ITRCON,LRUDD,SC)\n      XXX = RAND(1.0)\n      IF (XXX.LT.0.25) DISP = RAND(0.005)+.045\n      IF (XXX.LT.0.5.AND.XXX.GE.0.25) DISP = RAND(0.005)+.015\n      IF (XXX.LT.0.75.AND.XXX.GE.0.5) DISP = RAND(0.02)+.0075\n      IF (XXX.GE.0.75) DISP = RAND(.0075)\n      IF (RAND(1.0).GE..5) DISP = -DISP\n20    IF (IHIT.NE.IZNOHT) GO TO 50\n      IF (ITRCON.EQ.KZX) GO TO 30\n      TVY = TVY+LRUDD\n      TVX = TVX+SC+DISP\n      GO TO 40\n30    TVX = TVX+LRUDD\n      TVY = TVY+SC+DISP\n40    V1 = TVY\n      V2 = TVX\n      IF (V1.LT..5.OR.V1.GT.10.5.OR.V2.LT..5.OR.V2.GT.10.5) GO TO 900\n      ITRKC = ITRKC + 1\n      RTRK (ITRKC,1) = V1\n      RTRK (ITRKC,2) = V2\n900   CALL KILLER\n      GO TO 20\n50    CALL DBUGIN ('TRACK EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=TSMSG\nC*********************************************************************\n      SUBROUTINE TSMSG\nC PURPOSE : PRINT WE DON'T HAVE TRANSPORTER OR SHUTTLE MSG\nC*********************************************************************\n      CALL DBUGIN ('TSMSG ENTERED',IW(13),0)\n      CALL LINEF\n      CALL PRMSG ('THE SUPERCOMMANDER KAZH HAS NO SHUTTLE CRAFT OR',\n     *      IW(47))\n      CALL PRMSG ('PLANETARY TRANSPORTER, AS IT HAS NO USE FOR EITHER.',\n     *      IW(51))\n      CALL DBUGIN ('TSMSG EXITED',IW(12),0)\n      RETURN\n      END\n./     ADD     NAME=XCHEAD\nC*********************************************************************\n      SUBROUTINE XCHEAD\nC PURPOSE : FILL IN THE HEADER INFO FOR SRS AND LRS SCANS ON THE TOP\nC           OF THE SCREEN\nC*********************************************************************\n      COMMON /FSBUFF/ NPROML, NPROMT(20), NREAD(13),\n     *     NHEAD(20,12), NCOUNT, NWORK(20,200)\n      COMMON /OUTUNT/ IOUTT\n      COMMON /CPU/ IBMT\n      COMMON /PHASE/ INIT\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      IOUT = IOUTT - 1\n      DO 5  I = 1, 12\n          DO 5  J = 1, 20\n              NHEAD (J,I) = ICRBLK\n5     CONTINUE\n      IF (INIT.EQ.1) GO TO 500\n      REWIND IOUT\n      CALL SR3270\n      REWIND IOUT\n      DO 10 N=1,12\n          READ (IOUT,10000,END=15) (NHEAD(J,N),J=1,16)\n10    CONTINUE\n15    REWIND IOUT\n      CALL LRSCAN\n      REWIND IOUT\n      DO 20 N=1,12\n          READ (IOUT,10010,END=25) (NHEAD(J,N),J=17,20)\n20    CONTINUE\n25    REWIND IOUT\n500   RETURN\n10000 FORMAT (1X,16A4)\n10010 FORMAT (1X,4A4)\n      END\n./     ADD     NAME=XDEBUG\nC*********************************************************************\n      SUBROUTINE XDEBUG\nC PURPOSE : ACTIVATE AND DE-ACTIVATE THE TRACE FLAG AFTER GETTING\nC           A DEBUG PASSWORD (WHICH EQUALS NONA) AND CAUSE ROUTINES\nC           WITH DEBUG CALLS IN THEY TO DISPLAY DIAGNOSTIC INFO\nC*********************************************************************\n      COMMON /DEBUG/ IDEBUG\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *    IKY(8,8), INPUT(50),IPAD3\n      COMMON /EXTRA/ N2,ITTY,IDIE\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      CALL PRMSG ('KLINGON DEBUGGING ACTIVATION ROUTINE',IW(36))\n      CALL PRMSG ('ENTER DEBUG ACCESS PASSWORD BELOW',IW(33))\n100   CALL READIN ('PASSWORD - ',IW(11),11,1,EOFF)\n      IF (EOFF.GT.0.9) GO TO 220\n      CALL GAP (N2)\n      IF (N2.GT.50) GO TO 220\n      GO TO 225\n220   CALL LINEF\n      CALL PRMSG ('*BLANK LINE IGNORED* ',IW(20))\n      CALL LINEF\n      GO TO 100\n225   IF (INPUT(N2).EQ.KZN.AND.INPUT(N2+1).EQ.KZO.AND.\n     *    INPUT(N2+2).EQ.KZN.AND.INPUT(N2+3).EQ.KZA) GO TO 500\n      CALL PRMSG ('*PASSWORD NOT MATCHED*',IW(22))\n      GO TO 600\n500   CALL PRMSG ('*PASSWORD ACCEPTED*',IW(20))\n      IF (IDEBUG.EQ.1) GO TO 510\n          IDEBUG = 1\n          CALL PRMSG('TRACE IS NOW ACTIVE  ',IW(19))\n          GO TO 600\n510       IDEBUG = 0\n          CALL PRMSG('TRACE IS NOW INACTIVE ',IW(21))\n600   RETURN\n      END\n./     ADD     NAME=XFILLB\nC*********************************************************************\n      SUBROUTINE XFILLB\nC PURPOSE : FOR 3270 MVS/TSO REWIND THE WORK FILE AND READ THE RECORD\nC           IN A4 FORMAT\nC*********************************************************************\n      COMMON /FSBUFF/ NPROML, NPROMT(20), NREAD(13),\n     *     NHEAD(20,12), NCOUNT, NWORK(20,200)\n      COMMON /OUTUNT/ IOUTT\n      COMMON /CPU/ IBMT\n      COMMON /CHARS/ KZA,KZB,KZC,KZD,KZE,KZF,KZG,KZH,KZI,KZJ,KZK,KZL,KZM\n     *     ,KZN,KZO,KZP,KZQ,KZR,KZS,KZT,KZU,KZV,KZW,KZX,KZY,KZZ,ICRDOT,\n     *     ICRPLS,ICRCRH,ICRSTR,ICRMIN,ICRZER,KZ1,KZ2,KZ3,KZ4,KZ5,KZ6,\n     *     KZ7,KZ8,KZ9,ICRBLK\n      NCOUNT = 0\n      REWIND IOUTT\n      IF (IBMT.NE.1) GO TO 100\n10    NCOUNT = NCOUNT + 1\nC     --- FOLLOWING LINE IS TO PREVENT OVERFLOW\n      IF (NCOUNT.GT.200) GO TO 20\n      READ (IOUTT,10000,END=20) (NWORK(N,NCOUNT),N=1,20)\n      GO TO 10\n20    NCOUNT = NCOUNT - 1\n100   REWIND IOUTT\n      RETURN\n10000 FORMAT (1X,19A4,A3)\n      END\n./     ADD     NAME=YESNO\nC*********************************************************************\n      SUBROUTINE YESNO (IMSG,MSGDIM,MSGLEN,IYES)\nC PURPOSE : PROMPT USER FOR YES OR NO RESPONSE\nC*********************************************************************\n      COMMON /PADDED/ IPAD1(9),ICHART(8,8),IPAD2(9),IPLNET(8,8),\n     *     IKY(8,8),INPUT(50),IPAD3\n      DIMENSION IMSG(MSGDIM)\n      CHARACTER *4 CZY, CZYES , CZN, CZNO\n      EQUIVALENCE (CZY,IZY) , (CZYES,IZYES) , (CZN,IZN) , (CZNO,IZNO)\n      DATA CZY /'Y'/ , CZYES /'YES'/ , CZN /'N'/ , CZNO /'NO'/\n      CALL DBUGIN ('YESNO ENTERED',IW(13),0)\n      IYES = 0\n10    CALL READIN (IMSG,MSGDIM,MSGLEN,0,EOFF)\n      IF (EOFF.NE.0) GO TO 10\n      IF (INPUT(1).EQ.IZY.OR.INPUT(1).EQ.IZN) GO TO 20\n      IF (INPUT(1).EQ.IZYES.OR.INPUT(1).EQ.IZNO) GO TO 20\n      CALL PRMSG ('Y(ES) OR N(O), PLEASE.  ',IW(24))\n      GO TO 10\n20    IF (INPUT(1).EQ.IZY) IYES = 1\n      IF (INPUT(1).EQ.IZYES) IYES = 1\n      CALL DBUGIN ('YESNO EXITED',IW(12),0)\nC     --- ... KICK THE IW FUNCTION TO RETURN IHOLD TO CORRECT VALUE\n      IDUMMY = IW(MSGLEN)\n      RETURN\n      END\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KLINGON$": {"ttr": 12297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943O\\x00\\x943O\\x144\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-30T00:00:00", "modifydate": "1994-11-30T14:34:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSPAJA"}, "text": "//KLINGON  JOB (........),'RESTORE -KLINGON-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=20\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*            K L I N G O N     G A M E     (SPACE WAR)              *\n//* KLINGON INSTALLATION :                                            *\n//*    1. USE THE JOB BELOW TO RESTORE THE INSTALLATION DATA-SET      *\n//*       LIBRARY (VERIFY \"SYSUT2\" AND \"SYSIN\" DD-CARDS DEFINITIONS), *\n//*    2. THEN LOOK TO RESTORED MEMBERS ##NEW AND ##DOC.              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//RESTORE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    DD UNIT=DISK,VOLUME=SER=......,SPACE=(CYL,(3,1,30)),\n//             DSN=->.USER.KL.DATA,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=FB,BLKSIZE=3120,LRECL=80)\n//SYSIN     DD DSN=->.SOURCE.FILE3(KLINGON),DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LIFE": {"ttr": 12299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x10\\x1f\\x00\\x92\\x10\\x1f\\x12\\x06\\x08\\x8c\\x08\\x8c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-10T00:00:00", "modifydate": "1992-04-10T12:06:00", "lines": 2188, "newlines": 2188, "modlines": 0, "user": "SYSPAJA"}, "text": "LIFE     TITLE '--- L I F E ---'\nLIFE     START 0\n         SPACE 1\n* ORIGIN : EXTRACTED FROM TAPE CBT 91 MAR, FILE 134.\n* --------\n         SPACE 1\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         EJECT\n         LR    R8,R1          PASS PARM ADDRESS\n         TM    0(R8),X'80'    IS IT INVOKED AS A CMND PROCESSOR?\n         BO    ERROR1         NO, FLEE\n         ST    R8,ADCPPL      YES, RETAIN CPPL ADDRESS\n        GTSIZE ,              WHAT IS THE SCREENSIZE?\n         CH    R0,=H'0'\n         BNH   ERROR8         EXTRICATE THYSELF IF THINE VIDEO ISN'T\n         ST    R1,WIDTH       WIDTH\n         ST    R0,DEPTH       DEPTH\n         AH    R0,=H'2'       AN EXTRA ROW EITHER WAY FOR OVERFLOW\n         LR    R2,R0\n         XR    R0,R0\n         MR    R0,R2          MULTIPLY FOR TOTAL #BYTES NEEDED\n         LR    R2,R1          SAVE FOR LATER\n         S     R2,WIDTH       LESS THE TWO ROWS ABOVE....\n         S     R2,WIDTH\n         AH    R2,=H'3'       PLUS CURSOR POSITION INFO GIVES....\n         ST    R2,LENGTHG     TOTAL LENGTH OF SCREEN RETRIEVE\n         AH    R2,=H'2'       AND 5 BYTE PREFIX FOR TPUT GIVES...\n         ST    R2,LENGTH1     TOTAL LENGTH OF SCREEN DISPLAY\n         LA    R2,1(,R2)\n         ST    R2,LENGTH3\n         BCTR  R2,0\n         AH    R1,=H'2'       AN EXTRA TWO BYTES FOR CONVENIENCE!!!\n         ST    R1,STORAGE     TOTAL NUMBER OF BYTES FOR THE DISPLAY\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS1    SAVE OUR START ADDRESS\n         LA    R4,BLNKS       NOW CLEAR GETMAINED STORAGE....\n         LR    R2,R1\n         L     R3,STORAGE\n         L     R5,PADDING\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         A     R1,STORAGE     CALCULATE END OF SCREEN WITHIN STORAGE\n         S     R1,WIDTH       MINUS EXTRA ROW.....\n         SH    R1,=H'1'       LESS THE CONVENIENCE BYTE GIVES....\n         ST    R1,LIMIT       VERACIOUS ENDING\n         L     R1,WIDTH       WIDTH\n         L     R0,DEPTH       DEPTH\n         AH    R1,=H'2'       AN EXTRA TWO COLUMNS FOR ATTR BYTES\n         AH    R0,=H'2'       AN EXTRA TWO ROWS\n         LR    R2,R0\n         XR    R0,R0\n         MR    R0,R2          MULTIPLY FOR TOTAL #BYTES NEEDED\n         ST    R1,STORAGE2    SAVE FOR LATER\n         S     R1,WIDTH\n         S     R1,WIDTH\n         SH    R1,=H'4'       2 FOR EACH WIDTH\n         AH    R1,=H'8'       PREFIX\n         SH    R1,=H'2'       FOR THE TITLE LINE\n         ST    R1,LENGTH2\n         L     R2,=A(ATTNLS2)\n        STAX   ATT2,MF=(E,(R2))\n         L     R2,=A(ATTNLST)\n        STAX   ATTN,MF=(E,(R2)),REPLACE=NO\n         USING CPPL,R8        ESTABLISH ADDRESSABILITY\n         MVC   PPLCBUF,CPPLCBUF\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         DROP  R8\n        CALLTSSR EP=IKJPARS,MF=(E,PPL)\n         LTR   R15,R15        WAS PARSE SUCCESSFUL?\n         BNZ   ERROR2         NO, ERROR\n         MVI   FLAGERRF,X'01'\n         L     R8,PDLPTR      ESTABLISH PARM ADDRESSABILITY\n         USING IKJPARMD,R8\n         L     R9,OPER1       LOAD OPERAND ADDRESS\n         LH    R1,OPER1+4     LOAD OPERAND LENGTH\n         LA    R15,2(,R1)     INCREMENT LENGTH FOR IKJDAIR\n         STH   R15,DSNAME     STORE FOR IKJDAIR\n         BCTR  R1,0           DECREMENT FOR EXEC\n         LA    R7,INFILE      LOAD RECEIVING ADDRESS FOR EXEC\n         EX    R1,MOVEIT1     EXECUTE\n         OC    INFILE,BLNKS   FOLD TO UPPERCASE\n         CLC   INFILE(8),=C'Z7999999'\n         BNE   ALLOCATE\n         MVI   FLAGDS,X'00'   IMPLIES NO INPUT DATA, NO ALLOCATION\n         MVI   FLAGNODA,X'01'\n         MVC   INFILE(44),BLNKS\n         B     NODATA         IMPLIES NO INPUT DATA, NO ALLOCATION\n         DROP  R8\nREALLOC  L     R5,=A(DAPARMS) ESTABLISH ADDRESSABILITY\n         USING DAPL,R5\n         L     R6,=A(DAFREE)  ESTABLISH ADDRESSABILITY\n         USING DAPB18,R6\n         ST    R6,DAPLDAPB\n         XC    0(44,R6),0(R6)\n         MVI   DA18CD+1,X'18' SET CODE TO DEALLOCATE\n         MVC   DA18DDN,INPDD  MOVE IN DDNAME USED BY SYSTEM\n         LA    R1,DAPL        POINT TO PARM LIST\n         DROP  R5,R6\n        LINK   EP=IKJDAIR,MF=(E,(1)) DEALLOCATE\n         CLC   BLNKS(8),MEMBER\n         BNE   ALLOCATE\n         MVI   FLAGNODA,X'01'\n         MVI   FLAGPDS,X'01'\n         B     NODATA\nALLOCATE L     R5,=A(DAPARMS) ESTABLISH ADDRESSABILITY FOR IKJDAIR\n         USING DAPL,R5\n         XC    0(168,R5),0(R5)\n         L     R1,ADCPPL      GET CPPL ADDRESS\n         USING CPPL,R1        ESTABLISH ADDRESSABILITY\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R1\n         L     R9,=A(ECB)\n         ST    R9,DAPLECB\n         L     R6,=A(DAALLOC) ESTABLISH ADDRESSABILITY FOR ALLOCATE\n         USING DAPB08,R6\n         LA    R9,DAPB08\n         ST    R9,DAPLDAPB\n         MVI   DA08CD+1,X'08' SET CODE TO ALLOCATE\n         LA    R9,DSNAME      MOVE IN DSNAME ADDRESS\n         ST    R9,DA08PDSN\n         MVC   DA08DDN,BLNKS  CLEAR DDNAME\n         MVC   DA08UNIT(8),BLNKS    UNIT\n         MVC   DA08SER(8),BLNKS     VOLSER\n         MVC   DA08MNM(8),MEMBER    MEMBER NAME\n         MVC   DA08PSWD(8),BLNKS    PWORD\n         OI    DA08DSP1,DA08SHR SET DISP TO SHR,KEEP,KEEP\n         OI    DA08DPS2,DA08KEEP\n         OI    DA08DPS3,DA08KEEP\n         LA    R1,DAPL        POINT TO LIST\n         DROP  R5,R6\n        LINK   EP=IKJDAIR,MF=(E,(1))\n         LTR   R15,R15        ALLOCATE OK?\n         BZ    SKIP021\n         MVI   FLAGO,X'00'\n         MVI   FLAGNODA,X'01'\n         CLC   MEMBER(8),BLNKS\n         BNE   ERROR15\n         B     ERROR7         NO, ERROR\n         USING DAPB08,R6\nSKIP021  MVC   INPDD(8),DA08DDN SAVE DDNAME\n         MVC   PHSDD+40(8),DA08DDN MOVE DDNAME TO PHSDD AREA\n         MVC   PDSDD+40(8),DA08DDN MOVE DDNAME TO PHSDD AREA\n         CLI   FLAGPDS,X'01'\n         BE    NODATA\n         MVC   DSORG,DA08DSO\n         DROP  R6\n         TM    DSORG,X'02'    IS DSORG PARTITIONED?\n         BNO   SKIP331        YES, BRANCH\n         MVI   FLAGPDS,X'01'\n         MVI   FLAGNODA,X'01'\n         L     R1,LENGTHD\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS3\n         ST    R1,DIRPTR\n        OPEN   (PDSDD,(INPUT))\n         L     R6,ADDRESS3\n         A     R6,LENGTHD\n         SH    R6,=H'8'\n         ST    R6,ADDRESS6\n         L     R6,ADDRESS3\n         L     R7,=A(DIRAREA)\nRDLOOP  READ   DIRECT,SF,PDSDD,(R7),256 READ DIR BLOCK\n        CHECK  DIRECT         WAIT\n         XR    R5,R5          ZERO R5\n         MVC   BYTECNT,0(R7)  SAVE BYTE CNT\n         LA    R5,2(,R5)      MOVE POINTER ON\n         XR    R9,R9          ZERO R9\n         B     CON1\nMBRLOP   IC    R9,11(R5,R7)   PICK OUT USER DATA CNT\n         N     R9,=XL4'1F'    MASK OUT BITS 0-2\n         SLL   R9,1           MULTIPY HALFWORDS FOR BYTES\n         LA    R5,12(R9,R5)   SET R5 TO START OF NEXT ENTRY\n         CH    R5,BYTECNT     END OF THIS BLOCK\n         BNL   RDLOOP         YES - BRANCH\nCON1     LA    R1,0(R5,R7)    SET R1 TO START OF MEMBER NAM\n         CLC   FINNAM(8),0(R1) CHECK FOR SPECIAL NAME\n         BE    FINISH         YES - BRANCH\n         MVC   0(8,R6),0(R1)  MOVE MEMBER NAME\n         OC    0(8,R6),BLNKS\n         MVI   FLAGMEM,X'01'\n         LA    R6,8(,R6)\n         C     R6,ADDRESS6\n         BL    MBRLOP\n         MVI   FLAGPDS,X'02'\nFINISH   MVI   0(R6),X'FF'    END OF LIST MARK\n         ST    R6,ADDRESS4\n        CLOSE  (PDSDD)\n         CLI   FLAGPDS,X'02'\n         BNE   NODATA\n         MVI   FLAGPDS,X'01'\n         B     ERROR18\nSKIP331  TM    DSORG,X'40'    IS DSORG SEQUENTIAL?\n         BO    NODATA         YES, BRANCH\n         MVI   FLAGDS,X'00'\n         B     ERROR10\nOPEN2   OPEN   (PHSDD,(INPUT)) OPEN DATASET\n         LTR   R15,R15\n         BNZ   NODATA\n         TM    PHSDD+48,X'10' OPEN OK?\n         BO    NEXTXX1        NO, ERROR\n         MVI   FLAGDS,X'00'\n         B     ERROR3\nNEXTXX1  TM    PHSDD+36,X'80' FIXED?\n         BNO   NEXTXX3\n         TM    PHSDD+36,X'40'  \"\n         BNO   NEXTXX2\nNEXTXX3  MVI   FLAGDS,X'00'\n         B     ERROR6\nNEXTXX2  MVI   FLAGNODA,X'00'\n         L     R2,ADDRESS1    POINT R2 TO SCREEN BEGINNING\n         A     R2,WIDTH\n         AH    R2,=H'1'\n         L     R3,WIDTH       LOAD R3 WITH SCREEN WIDTH\n         CH    R3,PHSDD+82    GET-LENGTH IS MINIMUM(R3,RECORD LENGTH)\n         BL    DOIT\n         LH    R3,PHSDD+82\nDOIT     BCTR  R3,0           DECREMENT FOR EXEC\nGETIT   GET    PHSDD          FETCH RECORD\n         EX    R3,MOVEIT2     MOVE IT FROM BUFFER TO SCREEN\n         A     R2,WIDTH       INCREMENT SCREEN POINTER FOR NEXT RECORD\n         C     R2,LIMIT\n         BL    GETIT          AND AGAIN UNTIL END OF SCREEN\nENDFIL  CLOSE  (PHSDD)        CLOSE INPUT DATA SET\nNODATA  STFSMODE ON,INITIAL=YES\n         CLI   FLAGO,X'01'\n         BNE   DUMMKOPF\n         MVI   FLAGO,X'00'\n         CLI   FLAGNO,X'01'\n         BE    OUTOFIT\n         B     DSPLAY2        DISPLAY THE INITIAL SCREEN\nSCAN     CLI   FLAGIN,X'01'\n         BNE   OTHER4\n         MVI   FLAGIN,X'00'\n         XR    R3,R3\n         ST    R3,GENREAL\n         B     ERROR17\nOTHER4   L     R2,ADDRESS1    PREPARE FOR SCAN\n         LA    R2,1(,R2)      MOVE BOTTOM ROW TO TOP ROW-1\n         L     R4,LIMIT       SO THAT SCREEN AEFFECTIVELY\n         S     R4,WIDTH       WRAPS AROUND TOP TO BOTTOM\n         L     R3,WIDTH       DURING GENERATION PROCESSING\n         LR    R5,R3\n         MVCL  R2,R4          GREAT..NOW\n         L     R2,ADDRESS1    MOVE TOP ROW TO BOTTOM ROW+1\n         A     R2,WIDTH       FOR THE ABOVEMENTIONED REASON\n         LA    R2,1(,R2)\n         L     R4,LIMIT\n         L     R3,WIDTH\n         LR    R5,R3\n         MVCL  R4,R2          NICE\n         L     R3,ADDRESS1    UNIVERSAL CONSTANT!\n         LR    R9,R3\n         A     R9,WIDTH       R9 IS THE CURRENT CELL POINTER\n         LA    R9,1(,R9)      TRUE BEGINNING\n         LA    R6,1(,R3)      R6 IS VERY USEFUL!!!!!\n         MVC   POPLAST(4),POPCUR\n         XC    POPVAL,POPVAL  ACCUMUALATES #CHANGES/GENERATION\n         L     R5,WIDTH\n         SH    R5,=H'2'       R5 IS AN OFT NEEDED CONSTANT\n         XR    R4,R4          R4 IS THE EDGE DETECTOR\nLOOP     LR    R7,R3          R7 IS THE ADDRESS FOR NEIGHB TEST\n         XR    R8,R8          R8 IS THE NEIGHBOUR COUNT\n         C     R4,WIDTH       IS R4 AT THE EDGE?..DIFFERENT PROCESSING\n         BNE   *+L'*+2          AT THE EDGE SIMULATES LEFT-RIGHT WRAP\n         XR    R4,R4          YES, ZERO IT\n         LTR   R4,R4          IF R4 IS ZERO, LEFT EDGE\n         BZ    LEDGE          PROCEED TO LEFT EDGE COMPARISON\n         LA    R2,1(,R4)\n         C     R2,WIDTH       IF R4 IS WIDTH-1, RIGHT EDGE\n         BE    REDGE          PROCEED TO RIGHT EDGE COMPARISON\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   TALLY\n         LA    R8,1(,R8)\n         B     TALLY          COMPARISONS DONE; ESTABLISH CELL FATE\nLEDGE    CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   TALLY\n         LA    R8,1(,R8)\n         B     TALLY\nREDGE    SR    R7,R5\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         AR    R7,R5\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   2(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LA    R7,2(R5,R7)\n         CLI   0(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         CLI   1(R7),X'FD'\n         BNH   *+L'*+4\n         LA    R8,1(,R8)\n         LR    R7,R5\n         LA    R7,1(,R7)      TRANSLATE FF AND FD TO FF AND FE TO\n         LR    R2,R3          BLANK IN PREVIOUS ROW, SINCE IT WILL\n         SR    R2,R5          NOT BE NEEDED FOR ANY MORE\n         EX    R7,TRANIT      COMPARISONS.\nTALLY    SLA   R8,2           MULTIPLY NEIGHBOUR CNT BY FOUR\n         B     *+4(R8)        BRANCH ON THIS VALUE (PLUS 4)\n         B     FOURPLUS       ZERO NEIGHBOURS\n         B     FOURPLUS       ONE NEIGHBOUR\n         B     NEXT9          TWO NEIGHBOURS, NOTHING HAPPENS\n         B     THREE          THREE NEIGHBOURS\n         B     FOURPLUS\n         B     FOURPLUS\n         B     FOURPLUS\n         B     FOURPLUS\n         B     FOURPLUS\nTHREE    CLI   0(R9),X'40'    THREE NEIGHBOURS; IF BLANK NEW CELL\n         BNE   NEXT9\n         MVI   0(R9),X'FD'\n         LA    R0,1           INCREMENT CHANGE COUNT\n         A     R0,POPVAL\n         ST    R0,POPVAL\n         B     NEXT889\nFOURPLUS CLI   0(R9),C' '     FOUR NEIGHBOURS; IF NONBLANK, DEAD CELL\n         BE    NEXT889\n         MVI   0(R9),X'FE'\n         B     NEXT889\nNEXT9    CLI   0(R9),X'FF'\n         BNE   NEXT889\n         LA    R0,1           INCREMENT CHANGE COUNT\n         A     R0,POPVAL\n         ST    R0,POPVAL\nNEXT889  LA    R3,1(,R3)      INCREMENT COMPARE BASE REG\n         LA    R4,1(,R4)                        EDGE REG\n         LA    R9,1(,R9)                        CELL REG\n         C     R9,LIMIT       END OF SCREEN?\n         BL    LOOP           NO, LET'S GO AGAIN\n         LR    R7,R5\n         LA    R7,1(,R7)\n         LA    R2,1(,R3)\n         EX    R7,TRANIT      TRANSLATE FINAL ROW\n         XR    R2,R2\n         MVC   POPCUR,POPVAL\n         CLC   POPCUR,POPLAST\n         BNE   AROUND10       IF #CHANGES IS SAME AS LAST TIME..\n         L     R2,ACCUM2      INCREMENT #TIMES(#CHANGES UNCHANGED)\n         LA    R2,1(,R2)\n         CH    R2,=H'1000'    IF CONSTANT FOR 10 GENS, ZERO\n         BNL   XXFF             ACCUMULATORS AND DISPLAY VIA AROUND11\n         C     R2,LIM         IF CONSTANT FOR LIMIT, ZERO\n         BL    DDFF             ACCUMULATORS AND DISPLAY VIA AROUND11\nXXFF     XR    R2,R2\n         ST    R2,ACCUM2\n         B     AROUND11\nDDFF     ST    R2,ACCUM2      IF NOT YET 10 STORE NEW VALUE...\n         B     DDFF2            AND SEE IF....\nAROUND10 XR    R2,R2\n         ST    R2,ACCUM2\nDDFF2    OC    POPVAL,POPVAL\n         BNZ   OVER3T         BY REDUCING G TO ZERO\nAROUND11 XR    R3,R3\n         ST    R3,GENREAL\n         B     DISPLAY\nOVER3T   L     R3,GENCUR\n         LA    R3,1(,R3)\n         ST    R3,GENCUR\n         L     R3,GENABS\n         LA    R3,1(,R3)\n         ST    R3,GENABS\n         L     R3,GENREAL     DECREMENT G\n         BCT   R3,TIMETEST\n         ST    R3,GENREAL     STORE NEW G\n         B     DISPLAY        IF G\u00ac>0 THEN DISPLAY SCREEN\nTIMETEST ST    R3,GENREAL\n         CLI   FLAGTIME,X'01'\n         BNE   NOTIMING\n         MVC   TMEREAL,TME    RESET TIME FIELD\n        STIMER WAIT,BINTVL=TMEREAL,ERRET=ERROR4\nNOTIMING L     R3,INTREAL\n         BCT   R3,CONTX       NB : I TEST IS DEPENDENT ON G TEST\n         ST    R3,INTREAL       ELSE SAVE NEW I AND REPROCESS\n         B     DISPLAY        IF I\u00ac>0 THEN THEN DISPLAY SCREEN\nCONTX    ST    R3,INTREAL       ELSE SAVE NEW I AND REPROCESS\n         B     SCAN             THE COLONY\nDISPLAY  L     R2,ADDRESS1\n         A     R2,WIDTH\n         LA    R2,1(,R2)      TRUE BEGINNING\n         IC    R1,CHAR\n         STC   R1,NUMBERS2+255 PUT CURRENT CHAR AT X'FF' IN TABLE\n         L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1 FOR EXEC\nLOOPE    EX    R7,TRANIT      XLATE A ROW\n         A     R2,WIDTH       INCREMENT TO NEXT ROW\n         C     R2,LIMIT\n         BL    LOOPE          REPEAT UNTIL END OF SCREEN\n         MVI   NUMBERS2+255,X'FF' RESTORE X'FF' LOCATION TO X'FF'\n         MVI   FLAGRAW,X'00'\n         L     R3,GENREAL\n         LTR   R3,R3          IF G ZERO THEN DO A TGET.....\n         BNP   DSPLAY2\n         L     R3,PAU         GET PAUSE VALUE AND IF >0 THEN STIMER\n         LTR   R3,R3          PAU IS IN MILLISECONDS\n         BNP   DSPLAY2        DISPLAY IF ZERO\n         MVC   PAUREAL,PAU    REPLACE\n        STIMER WAIT,BINTVL=PAUREAL,ERRET=ERROR4\nDSPLAY2 STFSMODE ON,INITIAL=YES\n         XR    R1,R1\n         LR    R0,R1\n         L     R1,ADDRESS1\n         A     R1,WIDTH\n         SH    R1,=H'4'       SCREEN START MINUS FIVE FOR PREFIX\n         MVC   0(5,R1),FIELD1 MOVE TPUT PREFIX IN\n         XR    R5,R5\n         L     R5,GENCUR\n         LTR   R5,R5\n         BZ    OVER2\n         XR    R3,R3\n         L     R3,GENREAL\n         LTR   R3,R3          IF G ZERO THEN DO A TGET.....\n         BNP   OVER2\n         CLI   FLAGSTAT,C'Y'\n         BNE   OVER2\n         LR    R2,R1\n         L     R6,=A(TEMPDATA)\n         MVC   0(12,R6),5(R2)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   0(12,R6),5(R2)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   0(12,R6),5(R2)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   0(12,R6),5(R2)\n         LR    R2,R1\n         MVC   5(12,R2),=C'+----------+'\n         A     R2,WIDTH\n         CVD   R5,PACKAREA\n         MVC   5(3,R2),=C'|G>'\n         MVC   8(8,R2),PATTGEN\n         ED    8(8,R2),PACKAREA+4\n         MVI   16(R2),C'|'\n         A     R2,WIDTH\n         MVC   5(3,R2),=C'|P>'\n         L     R5,POPCUR\n         CVD   R5,PACKAREA\n         MVC   8(8,R2),PATTGEN\n         ED    8(8,R2),PACKAREA+4\n         MVI   16(R2),C'|'\n         A     R2,WIDTH\n         MVC   5(12,R2),=C'+----------+'\n         MVI   FLAGTEMP,X'01'\nOVER2    ICM   R1,B'1000',=X'1B' TPUT NOWAIT,HOLD,FULLSCR\n         L     R0,LENGTH1     LOAD LENGTH OF SCREEN+5\n        TPUT   (1),(0),R      DISPLAY\n         CH    R15,=H'8'      SEVERE ERROR?\n         BH    ERROR9         YES\n         L     R1,ADDRESS1\n         A     R1,WIDTH\n         SH    R1,=H'4'       SCREEN START MINUS FIVE FOR PREFIX\n         CLI   FLAGSTAT,C'Y'\n         BNE   SKIP91\n         CLI   FLAGTEMP,X'01'\n         BNE   SKIP91\n         MVI   FLAGTEMP,X'00'\n         LR    R2,R1\n         L     R6,=A(TEMPDATA)\n         MVC   5(12,R2),0(R6)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   5(12,R2),0(R6)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   5(12,R2),0(R6)\n         A     R2,WIDTH\n         LA    R6,12(,R6)\n         MVC   5(12,R2),0(R6)\nSKIP91   MVC   INTREAL,INT    RESTORE I\n         L     R3,GENREAL\n         LTR   R3,R3          IF G ZERO THEN DO A TGET.....\n         BNP   PROCURE\n         L     R2,ADDRESS1    ELSE TRANSLATE CHAR BACK TO X'FF'\n         A     R2,WIDTH\n         LA    R2,1(,R2)      TRUE BEGINNING\n*        CLI   CHAR,C' '      IF CHAR IS BLANK THEN NO CHANGE\n*        BE    AROUNDX\n         LA    R9,NUMBERS2    XLATE TABLE ADDRESS\n         XR    R5,R5          CLEAR\n         IC    R5,CHAR\n         AR    R5,R9          XLATE BASE PLUS CHAR GIVES TABLE ADDRESS\n         MVI   0(R5),X'FF'    MOVE IN X'FF'\nAROUNDX  L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1\nLOOPG    EX    R7,TRANIT      XLATE A ROW\n         A     R2,WIDTH       INCREMENT TO NEXT ROW\n         C     R2,LIMIT\n         BL    LOOPG          REPEAT TO END OF SCREEN\n         MVI   0(R5),X'40'    RESTORE TABLE ENTRY\n         MVI   FLAGRAW,X'01'\n         B     SCAN           PROCESS GENERATION\nPROCURE  MVI   FLAGIN,X'00'\n         L     R1,ADDRESS1\n         A     R1,WIDTH\n         SH    R1,=H'2'       SCREEN START MINUS THREE FOR.......\n         LR    R2,R1          CURSOR POSITION\n         ICM   R1,B'1000',=X'81' TGET WAIT,ASIS\n         L     R0,LENGTHG     SCREEN PLUS THREE\n        TGET   (1),(0),R      GET\n         CH    R15,=H'16'     SEVERE ERROR?\n         BE    ERROR9         YES\n         CH    R15,=H'20'     SEVERE ERROR?\n         BE    ERROR9         YES\n         NI    0(R2),X'0F'    FOLD RESPONSE VALUE\n         CLI   0(R2),X'03'    END KEY?\n         BE    ERROR11        YES\n         CLI   0(R2),X'04'    RESTORE KEY?\n         BNE   NEXT4\n         CLI   FLAGDS,X'00'\n         BE    ERROR16        IF NO INPUT DSET, DISPLAY AGAIN\n         CLI   FLAGNODA,X'01'\n         BNE   SKIP555        IF NO INPUT DSET, DISPLAY AGAIN\n         CLI   FLAGPDS,X'01'\n         BNE   ERROR13\n         MVI   FLAGNO,X'01'\n         BE    CDIR2\nSKIP555  CLI   FLAGNEWM,X'01'\n         BE    ERROR13        IF NO INPUT DSET, DISPLAY AGAIN\n         LA    R4,BLNKS\n         L     R2,ADDRESS1\n         L     R3,STORAGE\n         L     R5,PADDING     ERASE SCREEN AREA....\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         MVI   FLAGO,X'01'\n         B     OPEN2          AND REREAD DATA SET\nNEXT4    CLI   0(R2),X'05'    SAVE?\n         BE    RESTORE        YES\n         CLI   0(R2),X'0C'    ROTATE?\n         BE    ROTATE         YES\n         CLI   0(R2),X'02'    CENTRE THE OBJECT?\n         BE    CENTRE\n         CLI   0(R2),X'06'    REFLECT LEFT-RIGHT?\n         BE    REFLECT1\n         CLI   0(R2),X'09'    REFLECT UP-DOWN?\n         BE    REFLECT2\n         CLI   0(R2),X'07'    SCROLL UP?\n         BE    USHIFT\n         CLI   0(R2),X'08'    SCROLL DOWN?\n         BE    DSHIFT\n         CLI   0(R2),X'0E'    DISPLAY?\n         BNE   SKIP12\n         MVI   FLAGDIS,X'01'\n         B     BUGGERIT\nSKIP12   CLI   0(R2),X'0A'    SCROLL LEFT?\n         BNE   NEXT88\n         L     R5,MO2         IF SO, R5 MUST CONTAIN M\n         B     LSHIFT\nNEXT88   CLI   0(R2),X'0B'    SCROLL RIGHT?\n         BNE   NEXT99\n         L     R5,WIDTH       YES, SCROLL LEFT WITH R5=WIDTH-M\n         S     R5,MO2         (MORE ECONOMICAL)\n         BP    LSHIFT\n         B     DSPLAY2\nNEXT99   CLI   0(R2),X'01'    HELP SCREEN?\n         BNE   BUGGERIT       NO, BUGGER IT\n         B     DUMMKOPF       YES, HELP THE DUMMKOPF\nBUGGERIT L     R9,ADDRESS1    FIRST SCAN SCREEN FOR COMMANDS\n         A     R9,WIDTH\n         LA    R9,1(,R9)      TRUE BEGINNING\nLOOPC    CLI   1(R9),C'='     IS IT AN EQUAL SIGN?\n         BE    COMMAND        YES!\nAGAIN    LA    R9,1(,R9)      NO, INCREMENT AND TRY AGAIN\n         C     R9,LIMIT\n         BL    LOOPC\n         CLI   FLAGDIS,X'01'\n         BE    CDIS\nTRYO1    CLI   FLAGDIR,X'01'\n         BNE   TRYO2\n         CLI   FLAGPDS,X'01'\n         BE    CDIR2\n         MVI   FLAGDIR,X'00'\n         B     ERROR16\nTRYO2    CLI   FLAGDS,X'01'\n         BNE   OUTOFIT\n         CLI   FLAGO,X'01'\n         BNE   OUTOFIT        END OF SCREEN; OUT\n*        MVI   FLAGNO,X'00'\n         B     REALLOC\nCOMMAND  OI    0(R9),X'40'    FOLD VERB\n         CLI   0(R9),C'C'     IF C COMMAND SPECIAL PROCESSING...\n         BE    CCHA\n         CLI   0(R9),C'S'     IF S COMMAND SPECIAL PROCESSING...\n         BE    CSHO\n         CLI   0(R9),C'M'     IF M COMMAND SPECIAL PROCESSING...\n         BE    COPE\n         CLI   0(R9),C'D'     IF D COMMAND SPECIAL PROCESSING...\n         BE    CDIR\n         CLI   0(R9),C'R'     IF R COMMAND SPECIAL PROCESSING...\n         BNE   OVER9\n         LA    R5,2           CLEAR, LENGTH TWO\n         XR    R6,R6\n         ST    R6,GENCUR\n         B     CLEAN\nOVER9    LA    R4,2(,R9)      ELSE XLATE AND TEST FOR FIRST\n         XR    R1,R1            NONUMERIC AFTER THE EQUAL SIGN\n         TRT   0(8,R4),NUMBERS\n         BZ    AGAIN          IF LENGTH EIGHT, NO GOOD. START AGAIN\n         SR    R1,R4          LENGTH OF NUMERIC\n         LA    R5,1(,R1)      ADDRESS OF NUMERIC\n         SH    R1,=H'1'       LENGTH-1 FOR EXEC\n         BM    AGAIN          IF LENGTH\u00ac>0 THEN BACK TO START\n         MVC   TEMPAREA(8),BLNKS\n         EX    R1,MOVEIT7     PACK NUMERIC\n         EX    R1,PACK        PACK NUMERIC\n         CVB   R1,PACKAREA    CONVERT TO BINARY\n         CLI   0(R9),C'T'     NOW, WAS COMMAND T?\n         BE    CTME\n         CLI   0(R9),C'G'     OR G?\n         BE    CGEN\n         CLI   0(R9),C'P'     OR P?\n         BE    CPAU\n         CLI   0(R9),C'I'     OR I?\n         BE    CINT\n         CLI   0(R9),C'V'     OR M?\n         BE    CMO1\n         CLI   0(R9),C'H'     OR M?\n         BE    CMO2\n         CLI   0(R9),C'L'      OR L?\n         BE    CLIM\n         B     AGAIN          NONE OF THESE! BACK TO START\nCCHA     CLI   2(R9),C' '\n         BNE   YESTHANX\n         MVI   FLAGCL,X'01'\n         B     NOTHANX\nYESTHANX MVC   OLDCHAR,CHAR   C COMMAND, CHAR BECOMES OLD CHAR\n         MVC   XXCHAR,EXCHAR\n         MVC   EXCHAR,CHAR\n         MVC   CHAR,2(R9)     BYTE IMMEADIATELY AFTER = IS NEW CHAR\n         MVI   FLAGCL,X'00'\nNOTHANX  XR    R5,R5          CLEAR\n         LA    R5,2(,R5)      LENGTH TWO\n         B     CLEAN          CLEAN UP CODE\nCDIR     XR    R5,R5          CLEAR\n         LA    R5,2(,R5)      LENGTH TWO\n         MVI   FLAGDIR,X'01'\n         B     CLEAN          CLEAN UP CODE\nCSHO     OI    2(R9),X'40'\n         CLI   2(R9),C'Y'\n         BNE   SKIP88\n         MVI   FLAGSTAT,C'Y'\n         B     SKIP89\nCOPE     LA    R6,2(,R9)\n         XR    R5,R5\n         MVI   FLAGNO,X'01'\nLOOP123  CLI   0(R6),C' '\n         BE    GOTIT123\n         LA    R6,1(,R6)\n         LA    R5,1(,R5)\n         CH    R5,=H'8'\n         BNH   LOOP123\nGOTIT123 LTR   R5,R5\n         BNZ   OK123\n         MVC   MEMBER(8),BLNKS\n         LA    R5,2(,R5)\n         EX    R5,MOVEIT4     BLANK OUT COMMAND AND NUMERIC\n         CLI   FLAGPDS,X'01'\n         BNE   AGAIN\n         MVI   FLAGO,X'01'\n         B     AGAIN          TRY NEXT BYTE\nOK123    BCTR  R5,0\n         MVC   TEMPME1(8),MEMBER\n         MVC   MEMBER(8),BLNKS\n         EX    R5,MOVEIT8\n         LA    R5,2(,R5)\n         EX    R5,MOVEIT4     BLANK OUT COMMAND AND NUMERIC\n         OC    MEMBER,BLNKS\n         CLI   FLAGPDS,X'01'\n         BE    SKIP007\n         MVC   MEMBER(8),BLNKS\n         B     AGAIN\nSKIP007  L     R3,ADDRESS3\nLOOPM1   CLC   MEMBER(8),0(R3)\n         BE    OKDOKEY\n         LA    R3,8(,R3)\n         C     R3,ADDRESS4\n         BNH   LOOPM1\n         MVI   FLAGNEWM,X'01'\n         MVI   FLAGO,X'01'\n         MVI   FLAGNODA,X'00'\n*        MVC   MEMBER(8),TEMPME1\n         B     AGAIN\nOKDOKEY  MVI   FLAGO,X'01'\n         MVI   FLAGNODA,X'00'\n         MVI   FLAGNEWM,X'00'\n         B     AGAIN\nSKIP88   CLI   2(R9),C'N'\n         BNE   SKIP89\n         MVI   FLAGSTAT,C'N'\nSKIP89   LA    R5,2           CLEAR, LENGTH TWO\n         B     CLEAN          CLEAN UP CODE\nCDIS     MVI   FLAGNO,X'01'\n         L     R2,=A(INFOSCR)\n         USING INFODSC,R2\n         L     R5,GENCUR\n         CVD   R5,PACKAREA\n         MVC   CGEN1X(8),PATTGEN\n         ED    CGEN1X(8),PACKAREA+4\n         L     R5,GENABS\n         CVD   R5,PACKAREA\n         MVC   AGEN1X(8),PATTGEN\n         ED    AGEN1X(8),PACKAREA+4\n         L     R5,POPCUR\n         CVD   R5,PACKAREA\n         MVC   POP1X(8),PATTGEN\n         ED    POP1X(8),PACKAREA+4\n         MVC   SHO1X(1),FLAGSTAT\n         MVC   CHAR1X(1),CHAR\n         MVC   CHAR2X(1),EXCHAR\n         MVC   INT1X(8),INTCH\n         MVC   MOV1X(8),MO1CH\n         MVC   MOV2X(8),MO2CH\n         MVC   TME1X(8),TMECH\n         MVC   GEN1X(8),GENCH\n         MVC   PAU1X(8),PAUCH\n         MVC   LIM1X(8),LIMCH\n         MVC   DSN1X(44),INFILE\n         MVC   MEM1X(8),MEMBER\n         DROP  R2\n         L     R1,STORAGE     TOTAL NUMBER OF BYTES FOR THE DISPLAY\n         MVI   FLAGDIS,X'00'\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS2    BEGINNING OF HELP DISPLAY AREA\n         LA    R4,BLNKS       CLEAR THE STORAGE GAINED\n         LR    R2,R1\n         L     R3,STORAGE\n         L     R5,PADDING\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         L     R2,=A(INFOSCR) POINT TO HELP INFORMATION\n         L     R1,ADDRESS2    POINT TO STORAGE\n         A     R1,WIDTH\n         AH    R1,=H'1'       START OF SCREEN WITHIN STORAGE\n         L     R3,WIDTH       WIDTH OF SCREEN\n         CH    R3,=H'80'      COMPARE TO HELP WIDTH\n         BL    NEXT112        LOW? IF SO, TRUNCATE MOVE OPERATION\n         LH    R3,=H'80'      NO, 80 BYTE MOVE OPERATION\nNEXT112  BCTR  R3,0           DECREMENT FOR EXEC\n         L     R5,LIMI        HELP DEPTH\n         C     R5,DEPTH       COMPARE TO SCREEN DEPTH\n         BL    LOOPH2         LOW? IF SO, FULL HELP SCREEN\n         L     R5,DEPTH       NO, SCREEN DEPTH SHORTENS HELP SCREEN\nLOOPH2   EX    R3,MOVEIT3     MOVE A ROW\n         A     R1,WIDTH       INCREMENT TO NEXT ROW\n         LA    R2,80(,R2)     INCREMENT TO NEXT HELP ROW\n         BCT   R5,LOOPH2      DECREMENT EFFECTIVE SCREEN DEPTH\nRESHOW2  L     R1,ADDRESS2    FINISHED, TPUT IT AS WE NORMALLY DO\n         A     R1,WIDTH\n         SH    R1,=H'5'\n         MVC   0(7,R1),FIELD2 HI INTENSITY PROTECTED\n         ICM   R1,B'1000',=X'1B' TPUT NOWAIT,HOLD,FULLSCR\n         L     R0,LENGTH3     LENGTH\n        TPUT   (1),(0),R      PUT IT\n         CH    R15,=H'8'      SEVERE ERROR?\n         BH    ERROR9         YES\n         L     R1,ADDRESS2\n         A     R1,WIDTH\n         SH    R1,=H'2'       FETCH A RESPONSE\n         LR    R2,R1\n         ICM   R1,B'1000',=X'81' TGET WAIT,ASIS\n         L     R0,LENGTHG     LENGTH\n        TGET   (1),(0),R      GET IT\n         CH    R15,=H'16'     SEVERE ERROR?\n         BE    ERROR9         YES\n         CH    R15,=H'20'     SEVERE ERROR?\n         BE    ERROR9         YES\n         NI    0(R2),X'0F'\n         CLI   0(R2),X'00'    INTERRUPT\n         BNE   SKIP14\n        STFSMODE ON,INITIAL=YES\n         B     RESHOW2\nSKIP14   L     R1,ADDRESS2\n         LTR   R1,R1          GETMAIN PRESENT?\n         BZ    ENDCDIS        NO, DISPLAY COLONY\n         L     R0,STORAGE     YES, FREE STORAGE\n        FREEMAIN R,A=(1),LV=(0)\nENDCDIS  B     TRYO1\nCDIR2    MVI   FLAGDIR,X'00'\n         MVI   FLAGNO,X'01'\n         CLI   FLAGMEM,X'01'\n         BNE   ERROR12\n         L     R1,STORAGE2    TOTAL NUMBER OF BYTES FOR THE DISPLAY\n         MVI   FLAGDIS,X'00'\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS2    BEGINNING OF HELP DISPLAY AREA\nREDISPL  L     R1,ADDRESS2\n         LA    R4,BLNKS       CLEAR THE STORAGE GAINED\n         LR    R2,R1\n         L     R3,STORAGE\n         L     R5,PADDING\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         L     R1,ADDRESS2    POINT TO STORAGE\n         A     R1,WIDTH\n         AH    R1,=H'1'       START OF SCREEN WITHIN STORAGE\n         L     R2,DIRPTR\n         L     R3,WIDTH       WIDTH OF SCREEN\n         CH    R3,=H'13'      COMPARE TO HELP WIDTH\n         BL    NEXT912        LOW? IF SO, TRUNCATE MOVE OPERATION\n         LH    R3,=H'13'      NO, 13 BYTE MOVE OPERATION\nNEXT912  SH    R3,=H'5'       REMOVE PREFIX AREA\n         BNP   NOMORE\n         BCTR  R3,0           DECREMENT FOR EXEC\n         L     R6,=A(MENUTIT)\n         L     R7,WIDTH\n         CH    R7,=H'80'\n         BNH   GOON\n         LH    R7,=H'80'\nGOON     BCTR  R7,0\n         EX    R7,MOVEIT10\n         MVC   0(2,R1),PREF3\n         A     R1,WIDTH\n         LA    R1,1(,R1)\n         L     R5,DEPTH       NO, SCREEN DEPTH SHORTENS HELP SCREEN\n         BCTR  R5,0\nLOOPH8   C     R2,ADDRESS4\n         BNL   OTHERPR\n         EX    R3,MOVEIT9     MOVE A ROW\n         MVC   0(5,R1),PREF1\n         B     ZOOM\nOTHERPR  MVC   0(5,R1),PREF2\nZOOM     A     R1,WIDTH       INCREMENT TO NEXT ROW\n         LA    R1,2(,R1)\n         LA    R2,8(,R2)      INCREMENT TO NEXT HELP ROW\n         BCT   R5,LOOPH8      DECREMENT EFFECTIVE SCREEN DEPTH\nRESHOW3  L     R1,ADDRESS2    FINISHED, TPUT IT AS WE NORMALLY DO\n         A     R1,WIDTH\n         SH    R1,=H'7'\n         MVC   0(8,R1),FIELD3\n         ICM   R1,B'1000',=X'1B' TPUT NOWAIT,HOLD,FULLSCR\n         L     R0,LENGTH2     LENGTH\n        TPUT   (1),(0),R      PUT IT\n         CH    R15,=H'8'      SEVERE ERROR?\n         BH    ERROR9         YES\n         L     R1,ADDRESS2\n         LA    R1,2(,R1)\n         LR    R2,R1\n         ICM   R1,B'1000',=X'81' TGET WAIT,ASIS\n         L     R0,LENGTHG2    LENGTH\n        TGET   (1),(0),R      GET IT\n         CH    R15,=H'16'     SEVERE ERROR?\n         BE    ERROR9         YES\n         CH    R15,=H'20'     SEVERE ERROR?\n         BE    ERROR9         YES\n         NI    0(R2),X'0F'\n         CLI   0(R2),X'00'    INTERRUPT\n         BNE   SKIP18\n        STFSMODE ON,INITIAL=YES\n         B     RESHOW3\nSKIP18   CLI   0(R2),X'03'\n         BE    NOMORE\n         CLI   0(R2),X'07'    UP?\n         BNE   SKIP199\n         L     R6,DEPTH\n         BCTR  R6,0           EXCLUDE TITLE\n         MH    R6,=H'8'\n         L     R5,DIRPTR\n         SR    R5,R6\n         C     R5,ADDRESS3\n         BL    RESHOW3\n         ST    R5,DIRPTR\n         B     REDISPL\nSKIP199  CLI   0(R2),X'08'    DOWN?\n         BNE   SKIP099\n         L     R6,DEPTH\n         BCTR  R6,0           EXCLUDE TITLE\n         MH    R6,=H'8'\n         L     R5,DIRPTR\n         AR    R5,R6\n         C     R5,ADDRESS4\n         BNL   RESHOW3\n         ST    R5,DIRPTR\n         B     REDISPL\nSKIP099  CLI   3(R2),X'11'\n         BNE   RESHOW3\n         NI    4(R2),X'3F'    REDUCE BYTES 1,2 TO RIGHTMOST 6 BITS\n         NI    5(R2),X'3F'\n         XR    R5,R5          CLEAR REG 5 ....\n         IC    R5,4(R2)         AND LOAD IT WITH BYTE 1\n         SLL   R5,6           SHIFT IT LEFT SIX BITS\n         XR    R3,R3          CLEAR REG3 .....\n         IC    R3,5(R2)         AND LOAD IT WITH BYTE 2\n         AR    R5,R3          ADD IT TO (BYTE 1(TIMES 2**6))\n         LA    R5,1(,R5)      INCREMENT R5 FOR TRUE SCREEN POSITION\n         L     R3,WIDTH       LOAD R3 WITH 80\n         XR    R4,R4          CLEAR R4\n         DR    R4,R3          DIVIDE R5 BY 80\n         LA    R5,1(,R5)      INCREMENT FOR EXTRA LINE\n         L     R3,ADDRESS2    LOAD R3 WITH CURRENT SCREEN ADDRESS\n         L     R4,WIDTH\n         AH    R4,=H'2'\n         STH   R4,TEMPHALF\n         MH    R5,TEMPHALF\n         AR    R3,R5          ADD TO SCREEN ADDRESS\n         LA    R3,3(,R3)\n         MVC   MEMBER(8),0(R3)\n         MVI   FLAGO,X'01'\n         MVI   FLAGNODA,X'00'\n         MVI   FLAGNEWM,X'00'\nNOMORE   L     R1,ADDRESS2\n         LTR   R1,R1          GETMAIN PRESENT?\n         BZ    ENDCDIR2       NO, DISPLAY COLONY\n         L     R0,STORAGE2    YES, FREE STORAGE\n        FREEMAIN R,A=(1),LV=(0)\nENDCDIR2 B     TRYO2\nCLIM     ST    R1,LIM         STORE NUMERIC IN L FIELD\n         MVC   LIMCH,TEMPAREA\n         B     CLEAN          CLEAN THIS AREA\nCMO1     ST    R1,MO1         STORE NUMERIC IN M FIELD\n         MVC   MO1CH,TEMPAREA\n         MVI   FLAGNO,X'01'\n         B     CLEAN          CLEAN THIS AREA\nCMO2     ST    R1,MO2         STORE NUMERIC IN M FIELD\n         MVC   MO2CH,TEMPAREA\n         MVI   FLAGNO,X'01'\n         B     CLEAN          CLEAN THIS AREA\nCINT     ST    R1,INT         STORE NUMERIC\n         MVC   INTCH,TEMPAREA\n         MVC   INTREAL,INT    PROPAGATE TO TEMPORARY NUMERIC\n         B     CLEAN          CLEAN\nCTME     ST    R1,TME         AS ABOVE\n         LTR   R1,R1\n         BNZ   *+L'*+8\n         MVI   FLAGTIME,X'00'\n         B     *+L'*+4\n         MVI   FLAGTIME,X'01'\n         MVC   TMECH,TEMPAREA\n         MVC   TMEREAL,TME\n         B     CLEAN\nCPAU     ST    R1,PAU         AS ABOVE\n         MVC   PAUCH,TEMPAREA\n         MVC   PAUREAL,PAU\n         B     CLEAN\nCGEN     ST    R1,GEN         AS ABOVE\n         MVC   GENCH,TEMPAREA\n         MVC   GENREAL,GEN    SO USER MUST HIT ENTER AGAIN FOR ACTION\nCLEAN    EX    R5,MOVEIT4     BLANK OUT COMMAND AND NUMERIC\n         B     AGAIN          TRY NEXT BYTE\nOUTOFIT  CLI   FLAGCL,X'01'   NOW WE MUST TRANSLATE CHARACTERS\n         BNE   SKIP97\n         MVI   FLAGCL,X'00'\n         B     ERASE\nSKIP97   L     R2,ADDRESS1    NOW WE MUST TRANSLATE CHARACTERS\n         A     R2,WIDTH\n         LA    R2,1(,R2)      TRUE BEGINNING\n         CLI   CHAR,X'40'     IF CHAR PROVIDED WAS BLANK.....\n         BE    AROUND9        DO NOT ADJUST XLATE TABLE....\n         LA    R9,NUMBERS2    ELSE STORE X'FF' AT CHAR OFFSET\n         XR    R5,R5            IN TABLE.....\n         IC    R5,CHAR\n         AR    R5,R9\n         MVI   0(R5),X'FF'\n         CLI   OLDCHAR,X'11'  IF OLD CHAR NONEXISTENT OR....\n         BE    AROUND9\n         CLI   OLDCHAR,X'40'  IF OLD CHAR IS BLANK THEN DO NOT ADJUST\n         BE    AROUND9          XLATE TABLE...\n         XR    R5,R5          ELSE STORE X'FF' AT CHAR OFFSET IN TABLE\n         IC    R5,OLDCHAR\n         AR    R5,R9\n         MVI   0(R5),X'FF'\nAROUND9  L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1\nLOOPZ    EX    R7,TRANIT      XLATE ROW\n         A     R2,WIDTH       INCREMENT TO NEXT ROW\n         C     R2,LIMIT\n         BL    LOOPZ          REPEAT TO END OF SCREEN\n         LA    R9,NUMBERS2    RESTORE CHAR OFFSET OF TABLE TO BLANK\n         XR    R5,R5\n         IC    R5,CHAR\n         AR    R5,R9\n         MVI   0(R5),C' '\n         XR    R5,R5\n         CLI   OLDCHAR,X'11'  RESTORE OLD CHAR OFFSET TO BLANK\n         BE    AROUND3\n         IC    R5,OLDCHAR\n         AR    R5,R9\n         MVI   0(R5),C' '\n         MVI   OLDCHAR,X'11'  OLD CHAR HAS DIED NOW!\nAROUND3  L     R5,INTREAL     NOW ADJUST PAUSE VALUE...\n         XR    R4,R4          TIME IS WAIT BETWEEN GENS...\n         L     R6,TME         AND PAUSE IS WAIT TIME BETWEEN DISPLAYS\n         MR    R4,R6          SO PAUSE IS PAUSE-TIME*INTERVAL\n         L     R6,PAU\n         SR    R6,R5\n         BP    AROUND8        IF P-T*I\u00ac>0 THEN SET TO ZERO\n         XR    R6,R6\nAROUND8  ST    R6,PAU         STORE PAUSE VALUE\n         MVC   GENREAL,GEN\n         MVI   FLAGRAW,X'01'\n         CLI   FLAGNO,X'01'\n         BNE   NEXT333\n         MVI   FLAGNO,0\n         XR    R6,R6\n         ST    R6,GENREAL\n         B     DISPLAY\nNEXT333  L     R1,GEN\n         LTR   R1,R1\n         BNP   DISPLAY        IF G>0 THEN DISPLAY......\n         XR    R6,R6\n         ST    R6,POPCUR\n         ST    R6,POPLAST\n         B     SCAN           ELSE PROCESS\nUSHIFT   L     R5,MO1         UP SHIFT.....\n         LTR   R5,R5          IF #ROWS=0 THEN OUT\n         BZ    DSPLAY2\n         C     R5,DEPTH       IF #ROWS>SCREENDEPTH THEN OUT\n         BNL   DSPLAY2\nSHIFTXP  L     R2,ADDRESS1\n         LA    R2,1(,R2)      TOP ROW-1 (ACTS AS A BUFFER)\n         LR    R1,R2\n         A     R1,WIDTH\n         L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1 FOR EXEC\nSHIFTUP  EX    R7,MOVEIT2     MOVE THIS ROW TO NEXT ROW UP\n         A     R1,WIDTH\n         A     R2,WIDTH       NEXT ROW\n         C     R1,LIMIT       END OF SCREEN?\n         BL    SHIFTUP\n         L     R1,ADDRESS1    YES, NOW MOVE TOP ROW-1 (BUFFER)....\n         LA    R1,1(,R1)        TO BOTTOM ROW (ALIAS TOP ROW)\n         EX    R7,MOVEIT2\n         BCT   R5,SHIFTXP     ANOTHER RUNG?\n         CLI   FLAG,C'Y'      NO, CALLED BY CENTRE?\n         BNE   DSPLAY2        NO, DISPLAY\n         B     CENTRE2        YES, RETURN TO CENTRE\nDSHIFT   L     R5,MO1\n         LTR   R5,R5          ZERO SHIFT?\n         BZ    DSPLAY2        OUT\n         C     R5,DEPTH        LESS THAN SCREEN DEPTH?\n         BNL   DSPLAY2        OUT\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      SCREEN START\nSHIFTXN  L     R2,LIMIT       BOTTOM ROW+1 (BUFFER ROW)\n         LR    R1,R2\n         S     R1,WIDTH       BOTTOM ROW\n         L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1 FOR EXEC\nSHIFTDN  EX    R7,MOVEIT2     MOVE THIS ROW TO NEXT ONE DOWN\n         S     R1,WIDTH\n         S     R2,WIDTH       NEXT ROW UP\n         CR    R2,R4          TOP OF SCREEN?\n         BH    SHIFTDN        NO, AGAIN\n         L     R1,LIMIT       YES, NOW MOVE BOTTOM ROW+1 TO TOP ROW\n         LR    R2,R4            (THE BUFFER ROW ALIAS BOTTOM ROW)\n         EX    R7,MOVEIT2\n         BCT   R5,SHIFTXN     ANOTHER RUNG?\n         CLI   FLAG,C'Y'      NO, CALLED BY CENTRE?\n         BNE   DSPLAY2        NO, DISPLAY\n         B     CENTRE2        YES, RETURN TO CENTRE\nLSHIFT   LTR   R5,R5          ZERO SHIFT?\n         BZ    ENDLEFT        OUT\n         C     R5,WIDTH       >SCREENWIDTH?\n         BNL   ENDLEFT        OUT\n         L     R7,WIDTH\n         SR    R7,R5          WIDTH-M (!!!)\n         L     R1,ADDRESS1\n         A     R1,WIDTH\n         LA    R1,1(,R1)      SCREEN START\nSHIFTLX  L     R2,LIMIT       NOW MOVE FIRST R5 BYTES OF THIS ROW\n         LR    R4,R2            TO BOTTOM ROW+1 (BUFFER)\n         LR    R6,R5\n         BCTR  R6,0           DECREMENT FOR EXEC\n         EX    R6,MOVEIT2     MOVE IT\n         LR    R2,R1          NOW MOVE LAST WIDTH-R5 BYTES OF THIS ROW\n         LR    R8,R1            TO LEFT OF THIS ROW (BYTE 1)\n         AR    R1,R5          ROW START+M\n         LR    R6,R7          WIDTH-M\n         BCTR  R6,0\n         EX    R6,MOVEIT2     MOVE IT\n         AR    R2,R7          NOW MOVE BUFFER ROW TO LAST R5 BYTES\n         LR    R1,R4            OF THIS ROW (R2->THIS ROW+WIDTH-M)\n         LR    R6,R5          R5 BYTES        (R4->BUFFER ROW)\n         BCTR  R6,0           DECREMENT FOR EXEC\n         EX    R6,MOVEIT2\n         LR    R1,R8          RESTORE R1 FROM R8 TEMPORARY STORAGE\n         A     R1,WIDTH       NEXT ROW\n         C     R1,LIMIT       END OF SCREEN?\n         BL    SHIFTLX        NO, SHIFT IT LEFT\nENDLEFT  CLI   FLAGOK,X'01'   YES, DISPLAY IT\n         BE    DSPLAY2        YES, DISPLAY IT\n         B     RECENT\nREFLECT2 L     R1,ADDRESS1\n         A     R1,WIDTH\n         LA    R1,1(,R1)      R1 IS SCREEN START\n         L     R3,LIMIT\n         S     R3,WIDTH       R3 IS LAST ROW\n         L     R2,LIMIT       R2 IS BUFFER ROW\n         L     R7,WIDTH       NOW SWAP THE ROWS\n         BCTR  R7,0           WIDTH-1 FOR EXEC\nANOTHER  EX    R7,MOVEIT2     MOVE HIGH ROW TO BUFFER ROW\n         EX    R7,MOVEIT5     MOVE LOW ROW TO HIGH ROW\n         EX    R7,MOVEIT6     MOVE BUFFER ROW TO LOW ROW\n         S     R3,WIDTH       INCREMENT LOW ROW\n         A     R1,WIDTH       DECREMENT LOW ROW\n         CR    R1,R3          HAVE THEY MET AT THE MIDDLE?\n         BL    ANOTHER        NO, NEXT ROW\n         B     DSPLAY2        YES, DISPLAY\nREFLECT1 L     R1,ADDRESS1\n         LA    R1,1(,R1)\n         LR    R2,R1          TOP ROW-1 (BUFFER)\n         A     R1,WIDTH       SCREEN START\n         L     R7,WIDTH\n         BCTR  R7,0           WIDTH-1 FOR EXEC\nARRR     EX    R7,MOVEIT2     MOVE THIS ROW TO BUFFER\n         L     R5,ADDRESS1\n         A     R5,WIDTH       R5->LAST BYTE OF BUFFER ROW\n         L     R6,WIDTH       R6 IS WIDTH\n         LR    R4,R1          R4->THIS ROW\nLOOPXX   MVC   0(1,R4),0(R5)  MOVE BUFFER(ENDBYTE)->THISROW(STARTBYTE)\n         LA    R4,1(,R4)      INCREMENT START BYTE THIS ROW\n         BCTR  R5,0           DECREMENT END BYTE BUFFER ROW\n         BCT   R6,LOOPXX      DECREMENT WIDTH UNTIL END OF THIS ROW\n         A     R1,WIDTH       INCREMENT TO NEXT ROW\n         C     R1,LIMIT       END OF SCREEN?\n         BL    ARRR           NO, REVERSE THIS ROW ALSO\n         B     DSPLAY2        YES, DISPLAY SCREEN\nCENTRE   XR    R4,R4\n         ST    R4,ACCUM1\nRECENT   MVI   FLAGOK,X'00'\n         L     R4,ACCUM1\n         LA    R4,1(,R4)\n         ST    R4,ACCUM1\n         CH    R4,=H'8'\n         BL    SKIP94\n         MVI   FLAGOK,X'01'\n         B     DSPLAY2\nSKIP94   L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      SCREEN START\n         XR    R8,R8          CLEAR COUNTER\nLOPIT    CLC   0(1,R4),CHAR   IS THIS A LIVE CELL?\n         BNE   NONO\n         LA    R8,1(,R8)      YES, INCREMENT CELL COUNTER\nNONO     LA    R4,1(,R4)      NEXT POSITION\n         C     R4,LIMIT       END OF SCREEN?\n         BL    LOPIT          NO, TEST IT\n         LR    R9,R8          PREPARE FOR HALVING OF CELL COUNT\n         LTR   R9,R9          ZERO COUNT?\n         BZ    DSPLAY2        YES, DISPLAY SCREEN\n         XR    R8,R8          CLEAR\n         LH    R6,=H'2'       DIVISOR\n         DR    R8,R6          DIVIDE\n         ST    R9,TEMP        QUOTIENT\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      SCREEN START\n         XR    R3,R3          CLEAR\n         LR    R7,R3          CLEAR\n         LR    R8,R3          CLEAR\nLOPIT2   CLC   0(1,R4),CHAR   LIVE CELL?\n         BNE   NONO2\n         LA    R8,1(,R8)      YES, INCREMENT TEMPORARY COUNTER\nNONO2    LA    R4,1(,R4)      NEXT POSITION\n         LA    R7,1(,R7)      INCREMENT END OF ROW DETECTOR\n         C     R4,LIMIT       SCREEN END?\n         BNL   FOUND          YES, OUT\n         C     R7,WIDTH       END OF ROW?\n         BL    LOPIT2         NO, NEXT BYTE\n         C     R8,TEMP        YES, IS CELL COUNT > HALF TOTAL COUNT?\n         BH    FOUND          YES, HALFWAY MARK\n         LA    R3,1(,R3)      NO, INCREMENT ROW COUNTER\n         XR    R7,R7          CLEAR END OF ROW DETECTOR\n         B     LOPIT2         TRY AGAIN\nFOUND    ST    R3,SHIFT1      STORE CENTER OF GRAVITY ROW NUMBER\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      SCREEN START\n         XR    R3,R3          CLEAR\n         LR    R5,R4          CLEAR\n         XR    R8,R8          CLEAR\nLOPIT3   CLC   0(1,R4),CHAR   LIVE CELL?\n         BNE   NONO3\n         LA    R8,1(,R8)      YES, INCREMENT TEMPORARY COUNTER\nNONO3    A     R4,WIDTH       NEXT ELEMENT OF COLUMN\n         C     R4,LIMIT       BOTTOM OF SCREEN? (END OF COLUMN)\n         BL    LOPIT3         NO, NEXT BYTE\n         C     R8,TEMP        YES, IS CELL COUNT > HALF TOTAL COUNT?\n         BH    FOUND2         YES, OUT\n         LA    R5,1(,R5)      NO, INCREMENT COLUMN POINTER\n         LR    R4,R5          POINT TO NEXT COLUMN\n         LA    R3,1(,R3)      INCREMENT COLUMN COUNTER\n         C     R3,WIDTH       END OF SCREEN?\n         BL    LOPIT3         NO, GO AGAIN\nFOUND2   ST    R3,SHIFT2      STORE CENTER OF GRAVITY COLUMN NUMBER\n         MVI   FLAG,C'Y'      SET CENTRE FLAG\n         L     R2,SHIFT1      R2 IS ROW NUMBER\n         L     R7,DEPTH       DIVIDE SCREEN DEPTH BY 2\n         XR    R6,R6\n         LH    R5,=H'2'\n         DR    R6,R5          RESULT IN R7\n         CR    R7,R2          IS HALF DEPTH > CENTRE ROW?\n         BL    UPSH           YES, SHIFT UP REQUIRED\n         BNE   DNSH           IF EQUAL ALREADY CENTERED; CHECK COLUMN\n         MVI   FLAGOK,X'01'\n         B     CENTRE2\nDNSH     SR    R7,R2          HALF DEPTH - ROW NUMBER\n         LR    R5,R7          INTO R5\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      POINT R4 TO SCREEN START\n         B     SHIFTXN        CALL SHIFT DOWN CODE\nUPSH     SR    R2,R7          ROW NUMBER - HALF DEPTH\n         LR    R5,R2          INTO R5\n         B     SHIFTXP        CALL SHIFT UP CODE\nCENTRE2  MVI   FLAG,C'N'      RESET FLAG TO PRISTINE STATE\n         L     R2,SHIFT2      R2 IS COLUMN NUMBER\n         L     R7,WIDTH       DIVIDE WIDTH BY 2\n         XR    R6,R6\n         LH    R5,=H'2'\n         DR    R6,R5          R7 IS HALF WIDTH\n         CR    R7,R2          IS HALF WIDTH > CENTRE COLUMN?\n         BL    RISH           NO, RIGHT SHIFT IT\n         BNE   LESH           IF EQUAL ALREADY CENTERED; DISPLAY IT\n         CLI   FLAGOK,X'01'\n         BE    DSPLAY2\n         B     RECENT\nLESH     MVI   FLAGOK,X'00'\n         SR    R7,R2          HALF WIDTH - COLUMN NUMBER\n         L     R5,WIDTH       HALF WIDTH IS <= REAL HALF WIDTH\n         SR    R5,R7          WIDTH - HALF WIDTH + COLUMN NUMBER\n         B     LSHIFT           (\u00ac THE SAME AS HALF WIDTH + COLUMN!)\nRISH     MVI   FLAGOK,X'00'\n         SR    R2,R7          COLUMN NUMBER - HALF WIDTH\n         LR    R5,R2          INTO R5\n         B     LSHIFT         LEFT SHIFT\nERASE    L     R9,ADDRESS1    CLEAN THE SCREEN\n         A     R9,WIDTH\n         LA    R9,1(,R9)      SCREEN START\nCOMPCC2  CLI   0(R9),C' '\n         BE    DADADA\n         MVI   0(R9),C' '\nDADADA   LA    R9,1(,R9)\n         C     R9,LIMIT\n         BL    COMPCC2\n         B     DSPLAY2\nDUMMKOPF L     R1,STORAGE     TOTAL NUMBER OF BYTES FOR THE DISPLAY\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS2    BEGINNING OF HELP DISPLAY AREA\nRESHOW   L     R1,ADDRESS2\n         LA    R4,BLNKS\n         LR    R2,R1\n         L     R3,STORAGE\n         L     R5,PADDING\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         L     R2,=A(HELP1)\n         CLC   FLAGWH,=H'1'\n         BE    OTHER1\n         L     R2,=A(HELP2)\n         CLC   FLAGWH,=H'2'\n         BE    OTHER1\n         L     R2,=A(HELP3)\n         CLC   FLAGWH,=H'3'\n         BE    OTHER1\n         L     R2,=A(HELP4)\n         CLC   FLAGWH,=H'4'\n         BE    OTHER1\n         L     R2,=A(HELP5)\n         CLC   FLAGWH,=H'5'\n         BE    OTHER1\n         L     R2,=A(HELP6)\nOTHER1   L     R1,ADDRESS2    POINT TO STORAGE\n         A     R1,WIDTH\n         AH    R1,=H'1'       START OF SCREEN WITHIN STORAGE\n         L     R3,WIDTH       WIDTH OF SCREEN\n         CH    R3,=H'80'      COMPARE TO HELP WIDTH\n         BL    NEXT111        LOW? IF SO, TRUNCATE MOVE OPERATION\n         LH    R3,=H'80'      NO, 80 BYTE MOVE OPERATION\nNEXT111  BCTR  R3,0           DECREMENT FOR EXEC\n         L     R5,LIMH1\n         CLC   FLAGWH,=H'1'\n         BE    OTHER2\n         L     R5,LIMH2\n         CLC   FLAGWH,=H'2'\n         BE    OTHER2\n         L     R5,LIMH3\n         CLC   FLAGWH,=H'3'\n         BE    OTHER2\n         L     R5,LIMH4\n         CLC   FLAGWH,=H'4'\n         BE    OTHER2\n         L     R5,LIMH5\n         CLC   FLAGWH,=H'5'\n         BE    OTHER2\n         L     R5,LIMH6\nOTHER2   C     R5,DEPTH       COMPARE TO SCREEN DEPTH\n         BL    LOOPH          LOW? IF SO, FULL HELP SCREEN\n         L     R5,DEPTH       NO, SCREEN DEPTH SHORTENS HELP SCREEN\nLOOPH    EX    R3,MOVEIT3     MOVE A ROW\n         A     R1,WIDTH       INCREMENT TO NEXT ROW\n         LA    R2,80(,R2)     INCREMENT TO NEXT HELP ROW\n         BCT   R5,LOOPH       DECREMENT EFFECTIVE SCREEN DEPTH\n         L     R1,ADDRESS2    FINISHED, TPUT IT AS WE NORMALLY DO\n         A     R1,WIDTH\n         SH    R1,=H'5'\n         MVC   0(7,R1),FIELD2 HI INTENSITY PROTECTED\n         ICM   R1,B'1000',=X'1B' TPUT NOWAIT,HOLD,FULLSCR\n         L     R0,LENGTH3     LENGTH\n        TPUT   (1),(0),R      PUT IT\n         CH    R15,=H'8'      SEVERE ERROR?\n         BH    ERROR9         YES\n         L     R1,ADDRESS2\n         A     R1,WIDTH\n         SH    R1,=H'2'       FETCH A RESPONSE\n         LR    R2,R1\n         ICM   R1,B'1000',=X'81' TGET WAIT,ASIS\n         L     R0,LENGTHG     LENGTH\n        TGET   (1),(0),R      GET IT\n         CH    R15,=H'16'     SEVERE ERROR?\n         BE    ERROR9         YES\n         CH    R15,=H'20'     SEVERE ERROR?\n         BE    ERROR9         YES\n         NI    0(R2),X'0F'\n         CLI   0(R2),X'00'    INTERRUPT\n         BNE   SKIP15\n        STFSMODE ON,INITIAL=YES\n         B     RESHOW\nSKIP15   CLI   0(R2),X'07'    SCROLL UP?\n         BNE   TRY1\n         LH    R6,FLAGWH\n         BCTR  R6,0\n         LTR   R6,R6\n         BZ    RESHOW\n         STH   R6,FLAGWH\n         B     RESHOW\nTRY1     CLI   0(R2),X'08'    SCROLL DOWN?\n         BNE   TRY2\n         LH    R6,FLAGWH\n         LA    R6,1(,R6)\n         CH    R6,=H'6'\n         BH    RESHOW\n         STH   R6,FLAGWH\n         B     RESHOW\nTRY2     LA    R6,2\n         STH   R6,FLAGWH\n         L     R1,ADDRESS2\n         LTR   R1,R1          GETMAIN PRESENT?\n         BZ    DSPLAY2        NO, DISPLAY COLONY\n         L     R0,STORAGE     YES, FREE STORAGE\n        FREEMAIN R,A=(1),LV=(0)\n         B     DSPLAY2        DISPLAY COLONY\nRESTORE  CLI   FLAGDS,X'00'\n         BE    ERROR16\n         CLI   FLAGNODA,X'01'\n         BE    ERROR14        IF NO INPUT DSET MESSAGE DISPLAY\n         MVI   PHSDD+50,X'00' CHANGE FROM GET LOCATE TO PUT LOCATE\n         MVI   PHSDD+51,X'48' CHANGE\n        OPEN   (PHSDD,(OUTPUT))\n         TM    PHSDD+48,X'10' OPEN OK?\n         BNO   ERROR3         NO, ERROR\n         L     R2,ADDRESS1\n         A     R2,WIDTH\n         AH    R2,=H'1'       START OF SCREEN\n         L     R3,WIDTH       WIDTH\n         CH    R3,PHSDD+82    COMPARE TO RECORD LENGTH\n         BL    DOIT2          IF LOW, SCREEN WIDTH PREVAILS\n         LH    R3,PHSDD+82    IF HIGH, RECORD LENGTH PREVAILS\nDOIT2    BCTR  R3,0           DECREMENT FOR EXEC\nGETIT2  PUT    PHSDD          PUT BUFFER AND/OR GET BUFFER POINTER\n         EX    R3,MOVEIT3     MOVE SCREEN ROW TO BUFFER ROW\n         A     R2,WIDTH       INCREMENT TO NEXT ROW\n         C     R2,LIMIT       SCREEN END?\n         BL    GETIT2         NO, NEXT ROW\n        CLOSE  (PHSDD)        YES, CLOSE DATA SET\n         CLI   FLAGNEWM,X'01'\n         BNE   SKIP921\n         L     R3,ADDRESS3\nLOOPV1   CLC   MEMBER(8),0(R3)\n         BL    INSERT\n         LA    R3,8(,R3)\n         C     R3,ADDRESS4\n         BNH   LOOPV1\n         MVC   TEMPME1(8),MEMBER\n         B     ENDITPRE\nINSERT   MVC   TEMPME1(8),0(R3)\n         MVC   0(8,R3),MEMBER\n         MVI   FLAGMEM,X'01'\n         LA    R3,8(,R3)\n         C     R3,ADDRESS4\n         BH    ENDITPRE\nLOOPV2   MVC   TEMPME2(8),0(R3)\n         MVC   0(8,R3),TEMPME1\n         MVC   TEMPME1(8),TEMPME2\n         LA    R3,8(,R3)\n         C     R3,ADDRESS4\n         BNH   LOOPV2\nENDITPRE C     R3,ADDRESS6\n         BNL   ENDITALL\n         MVC   0(8,R3),TEMPME1\n         ST    R3,ADDRESS4\nENDITALL MVI   FLAGNEWM,X'00'\nSKIP921  MVI   PHSDD+50,X'48' RESTORE TO GET LOCATE\n         MVI   PHSDD+51,X'00' RESTORE\n         B     DSPLAY2        DISPLAY COLONY\nROTATE   L     R1,STORAGE     TOTAL NUMBER OF BYTES FOR THE DISPLAY\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS2    GET STORAGE FOR MANIPULATION\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      START OF SCREEN\n         L     R2,ADDRESS2    STORAGE ADDRESS\n         L     R3,STORAGE\n         S     R3,WIDTH\n         S     R3,WIDTH       TOTAL SCREEN LENGTH\n         LR    R5,R3\n         MVCL  R2,R4          MOVE SCREEN TO STORAGE AREA\n         L     R4,ADDRESS1\n         A     R4,WIDTH\n         LA    R4,1(,R4)      SCREEN START\n         XR    R2,R2          CLEAR\n         L     R3,WIDTH\n         S     R3,DEPTH       WIDTH-DEPTH.....\n         LH    R6,=H'2'\n         DR    R2,R6          DIVIDED BY 2 GIVES FLANK SIZE\n         LR    R7,R2          R7 IS REMAINDER\n         LR    R2,R4\n         SR    R2,R7          R2 IS FIRST ROW - REM\n         SR    R2,R3          R2 IS FRIST ROW - FLANK - REM\n         AR    R4,R3          R4 IS SCREEN START + FLANK\n         A     R2,WIDTH       R2 IS END(FIRST ROW)-FLANK-REM\n         BCTR  R2,0           DECREMENT\n         LR    R6,R2          R6<-R2\n         L     R1,ADDRESS2    STORAGE AREA START\n         L     R5,DEPTH       SCREEN DEPTH\n         AR    R1,R3          STORAGE AREA + FLANK\nLOOPV    MVC   0(1,R2),0(R1)  MOVE A BYTE FROM STORAGE TO SCREEN\n         A     R2,WIDTH       NEXT BYTE OF COLUMN IN SCREEN AREA\n         LA    R1,1(,R1)      NEXT BYTE OF ROW IN STORAGE AREA\n         BCT   R5,LOOPV       DECREMENT UNTIL SCREEN BOTTOM\n         BCTR  R6,0           DECREMENT R6\n         LR    R2,R6          PREV COLUMN BEGINNING\n         A     R1,WIDTH       NEXT SUB-ROW IN STORAGE\n         S     R1,DEPTH       NEXT ROW - MIDDLE PART\n         L     R5,DEPTH       REFRESH DEPTH COUNTER\n         CR    R6,R4          SCREEN END?\n         BNL   LOOPV          NO, AGAIN\n         L     R1,ADDRESS2    YES, FREE STORAGE IF THERE IS SOME\n         LTR   R1,R1\n         BZ    DSPLAY2\n         L     R0,STORAGE\n        FREEMAIN R,A=(1),LV=(0)\n         B     DSPLAY2        DISPLAY COLONY\nERROR1   L     R2,=A(ERR1)\n         B     WRITE\nERROR2   L     R2,=A(ERR2)\n         B     WRITE\nERROR3   L     R2,=A(ERR3)\n         B     WRITE\nERROR4   L     R2,=A(ERR4)\n         B     WRITE\nERROR5   L     R2,=A(ERR5)\n         B     WRITE\nERROR6   L     R2,=A(ERR6)\n         B     WRITE\nERROR7   L     R2,=A(ERR7)\n         B     WRITE\nERROR8   L     R2,=A(ERR8)\n         B     WRITE\nERROR9   L     R2,=A(ERR9)\n         B     WRITE\nERROR10  L     R2,=A(ERR10)\n         B     WRITE\nERROR11  L     R2,=A(ERR11)\n         B     WRITE\nERROR12  L     R2,=A(ERR12)\n         B     WRITE\nERROR13  L     R2,=A(ERR13)\n         B     WRITE\nERROR14  L     R2,=A(ERR14)\n         B     WRITE\nERROR15  L     R2,=A(ERR15)\n         B     WRITE\nERROR16  L     R2,=A(ERR16)\n         B     WRITE\nERROR17  L     R2,=A(ERR17)\n         B     WRITE\nERROR18  L     R2,=A(ERR18)\nWRITE    L     R3,=A(OUTLINE)\n         MVC   0(1,R3),BLNKS\n         MVC   1(79,R3),0(R3) CLEAR\n         MVC   0(55,R3),0(R2)\n         CLI   FLAGERRF,X'01'\n         BNE   SKIP882\nFULLERR  L     R1,STORAGE     TOTAL NUMBER OF BYTES FOR THE DISPLAY\n        GETMAIN R,LV=(1)\n         ST    R1,ADDRESS5    BEGINNING OF HELP DISPLAY AREA\n         LA    R4,BLNKS       CLEAR THE STORAGE GAINED\n         LR    R2,R1\n         L     R3,STORAGE\n         L     R5,PADDING\n         MVCL  R2,R4          FILL GETMAINED AREA WITH PAD OF BLANK\n         L     R2,=A(INFOSCR) POINT TO HELP INFORMATION\n         L     R1,ADDRESS5    POINT TO STORAGE\n         A     R1,WIDTH\n         AH    R1,=H'1'       START OF SCREEN WITHIN STORAGE\n         L     R3,WIDTH       WIDTH OF SCREEN\n         SH    R3,=H'2'\n         CH    R3,=H'54'      COMPARE TO ERR WIDTH\n         BL    NEXT332        LOW? IF SO, TRUNCATE MOVE OPERATION\n         LH    R3,=H'54'      NO, 55 BYTE MOVE OPERATION\nNEXT332  BCTR  R3,0           DECREMENT FOR EXEC\n         L     R2,=A(OUTLINE)\n         L     R5,LIMEF       HELP DEPTH\n         C     R5,DEPTH       COMPARE TO SCREEN DEPTH\n         BL    LOOPHX         LOW? IF SO, FULL HELP SCREEN\n         L     R5,DEPTH       NO, SCREEN DEPTH SHORTENS HELP SCREEN\nLOOPHX   EX    R3,MOVEIT11    MOVE A ROW\n         A     R1,WIDTH       INCREMENT TO NEXT ROW\n         L     R2,=A(ERR99)\n         BCTR  R5,0\n         LTR   R5,R5\n         BZ    RESHOW4\nLOOPHY   EX    R3,MOVEIT11    MOVE A ROW\nRESHOW4  L     R1,ADDRESS5    FINISHED, TPUT IT AS WE NORMALLY DO\n         A     R1,WIDTH\n         SH    R1,=H'5'\n         MVC   0(7,R1),FIELD2 HI INTENSITY PROTECTED\n         ICM   R1,B'1000',=X'1B' TPUT NOWAIT,HOLD,FULLSCR\n         L     R0,LENGTH3     LENGTH\n        TPUT   (1),(0),R      PUT IT\n         CH    R15,=H'8'      SEVERE ERROR?\n         BH    ERROR9         YES\n         L     R1,ADDRESS5\n         A     R1,WIDTH\n         SH    R1,=H'2'       FETCH A RESPONSE\n         LR    R2,R1\n         ICM   R1,B'1000',=X'81' TGET WAIT,ASIS\n         L     R0,LENGTHG     LENGTH\n        TGET   (1),(0),R      GET IT\n         CH    R15,=H'16'     SEVERE ERROR?\n         BE    ERROR9         YES\n         CH    R15,=H'20'     SEVERE ERROR?\n         BE    ERROR9         YES\n         NI    0(R2),X'0F'\n         CLI   0(R2),X'00'    INTERRUPT\n         BNE   SKIP144\n        STFSMODE ON,INITIAL=YES\n         B     RESHOW4\nSKIP144  CLI   0(R2),X'03'\n         BE    RETURN\n         L     R1,ADDRESS5\n         LTR   R1,R1          GETMAIN PRESENT?\n         BZ    ENDFULLE       NO, DISPLAY COLONY\n         L     R0,STORAGE     YES, FREE STORAGE\n        FREEMAIN R,A=(1),LV=(0)\nENDFULLE XR    R6,R6\n         ST    R6,GENREAL\n         MVI   FLAGNO,X'00'\n         CLI   FLAGRAW,X'01'\n         BE    DISPLAY\n         B     DSPLAY2\nSKIP882  LH    R0,=H'80'      LINE LENGTH, HIGH 2 BYTES 0 = NO ASID\n         L     R1,=A(OUTLINE) HIGH BYTE 0 = TPUT WAIT,EDIT\n        TPUT   (1),(0),R\nRETURN  STFSMODE OFF\n         L     R5,=A(DAPARMS) ESTABLISH ADDRESSABILITY\n         USING DAPL,R5\n         L     R6,=A(DAFREE)  ESTABLISH ADDRESSABILITY\n         USING DAPB18,R6\n         ST    R6,DAPLDAPB\n         XC    0(44,R6),0(R6) CLEAR PARM AREA\n         MVI   DA18CD+1,X'18' SET CODE TO DEALLOCATE\n         MVC   DA18DDN,INPDD  MOVE IN DDNAME USED BY SYSTEM\n         LA    R1,DAPL        POINT TO PARM LIST\n         DROP  R5,R6\n        LINK   EP=IKJDAIR,MF=(E,(1)) DEALLOCATE\n         L     R1,ADDRESS1    FREE STORAGE IF THERE IS SOME\n         LTR   R1,R1\n         BZ    NOFREE\n         L     R0,STORAGE\n        FREEMAIN R,A=(1),LV=(0)\nNOFREE   XR    R15,R15\n        $XRET  CC=(R15)       RETURN TO INVOKER\n         SPACE 1\n        CNOP   0,4\nATTN     LR    R2,R15\n         USING ATTN,R2\n         MVI   FLAGIN,X'01'\n         BR    R14\n         DROP  R2\n         SPACE 1\n        CNOP   0,4\nATT2     BR    R14\n         EJECT\n*------- CONSTANTS AND WORK-AREAS\n         SPACE 1\nPACKAREA DS    D\nPACK     PACK  PACKAREA,0(*-*,R4)\nMOVEIT1  MVC   0(*-*,R7),0(R9)     FOR MOVING DSNAME PARM\nMOVEIT2  MVC   0(*-*,R2),0(R1)     FOR MOVING RECORDS IN\nMOVEIT3  MVC   0(*-*,R1),0(R2)     FOR MOVING RECORDS OUT\nMOVEIT4  MVC   0(*-*,R9),BLNKS\nMOVEIT5  MVC   0(*-*,R1),0(R3)\nMOVEIT6  MVC   0(*-*,R3),0(R2)\nMOVEIT7  MVC   TEMPAREA(*-*),0(R4)\nMOVEIT8  MVC   MEMBER(*-*),2(R9)\nMOVEIT9  MVC   5(*-*,R1),0(R2)     FOR MOVING RECORDS OUT\nMOVEIT10 MVC   1(*-*,R1),0(R6)     FOR MOVING RECORDS OUT\nMOVEIT11 MVC   2(*-*,R1),0(R2)     FOR MOVING RECORDS OUT\nTRANIT   TR    0(*-*,R2),NUMBERS2\nTEMPHALF DC    H'0'\nADCPPL   DC    A(*-*)\nINTCH    DC    CL8'1'\nTMECH    DC    CL8'0'\nGENCH    DC    CL8'0'\nPAUCH    DC    CL8'0'\nMO1CH    DC    CL8'6'\nMO2CH    DC    CL8'20'\nLIMCH    DC    CL8'10'\nINT      DC    F'1'           ALL THE FOLLOWING ARE OBVIOUS\nTME      DC    F'0'\nGEN      DC    F'0'\nPAU      DC    F'0'\nMO1      DC    F'4'\nMO2      DC    F'20'\nLIM      DC    F'10'\nINTREAL  DC    F'1'\nTMEREAL  DC    F'0'\nGENREAL  DC    F'0'\nPAUREAL  DC    F'0'\nGENCUR   DC    F'0'\nGENABS   DC    F'0'\nADDRESS1 DC    F'0'\nADDRESS2 DC    F'0'\nADDRESS3 DC    F'0'           GETMAIN ADDRESS FOR PDS DIRECTORY\nADDRESS4 DC    F'0'\nADDRESS5 DC    F'0'\nADDRESS6 DC    F'0'\nSTORAGE  DC    F'0'\nSTORAGE2 DC    F'0'\nWIDTH    DC    F'0'\nDEPTH    DC    F'0'\nLIMIT    DC    F'0'\nLIMH1    DC    F'24'          DEPTH OF HELP SCREEN\nLIMH2    DC    F'24'\nLIMH3    DC    F'24'\nLIMH4    DC    F'24'\nLIMH5    DC    F'24'\nLIMH6    DC    F'24'\nLIMI     DC    F'8'           DEPTH OF STATUS SCREEN\nLIMEF    DC    F'3'           DEPTH OF STATUS SCREEN\nTEMP     DC    F'0'\nSHIFT1   DC    F'0'\nSHIFT2   DC    F'0'\nLENGTH1  DC    F'0'\nLENGTH2  DC    F'0'\nLENGTH3  DC    F'0'\nLENGTHG  DC    F'0'\nLENGTHD  DC    F'10000'\nLENGTHG2 DC    F'16'\nDIRPTR   DC    F'0'\nPOPVAL   DC    F'0'\nPOPLAST  DC    F'0'\nPOPCUR   DC    F'0'\nTEMPAREA DC    CL8'        '\nPADDING  DC    X'40000008'    PAD AND LENGTH OF 'BLANKS'\nDSORG    DC    X'00'\nNUMBERS  DC    240XL1'01'\n         DC    XL10'00'\n         DC    6XL1'01'\nNUMBERS2 DC    253XL1'40'\n         DC    X'FF40FF'\n         DS    0F\nPATTGEN  DC    XL8'4020202020202120'\nFIELD1   DC    X'4011404013'\nFIELD2   DC    X'40114040131DF8'   HI\nFIELD3   DC    X'4011404113114040'\nPREF1    DC    X'1D88401DF8'\nPREF2    DC    X'1DF0401DF0'\nPREF3    DC    X'1DF8'\n         DS    0D\nINPDD    DC    CL8' '         DDNAME GENERATED BY THE SYSTEM\nDSNAME   DC    X'0000'        IKJDAIR DSNAME AREA..2 BYTE LENGTH\nINFILE   DC    CL44' '          + DSNAME\nMEMBER   DC    CL8' '         MEMBER FIELD FOR IKJPARS\nTEMPME1  DC    CL8' '\nTEMPME2  DC    CL8' '\nBLNKS    DC    CL44' '\n         DS    F\nPPL      DS    0F             PPL AREA\nPPLUPT   DS    F\nPPLECT   DS    F\nPPLECB   DS    A(PARMECB)\nPPLPCL   DC    V(OPERS)\nPPLANS   DC    A(PDLPTR)\nPPLCBUF  DS    F\nPPLVWA   DC    F'0'\nPARMECB  DC    F'0'\nPDLPTR   DC    F'0'\nACCUM1   DC    F'0'\nACCUM2   DC    F'0'\nCHAR     DC    C'*'\nOLDCHAR  DC    X'11'\nEXCHAR   DC    C'*'\nXXCHAR   DC    C'*'\nFLAG     DC    C'N'\nFLAGDIS  DC    X'00'\nFLAGDIR  DC    X'00'\nFLAGNO   DC    X'00'\nFLAGDS   DC    X'01'\nFLAGO    DC    X'00'\nFLAGWH   DC    H'1'\nFLAGIN   DC    X'00'\nFLAGOK   DC    X'01'\nFLAGNODA DC    X'00'\nFLAGCL   DC    X'00'\nFLAGTEMP DC    X'00'\nFLAGTIME DC    X'00'\nFLAGPDS  DC    X'00'\nFLAGNEWM DC    X'00'\nFLAGMEM  DC    X'00'\nFLAGRAW  DC    X'00'\nFLAGERRF DC    X'00'\nFLAGSTAT DC    C'N'\n         DS    0H\nFINNAM   DC    8XL1'FF'       LAST MEMBER NAME\nBYTECNT  DC    H'0'\n         SPACE 1\n        PRINT  NOGEN\nPHSDD   DCB    MACRF=(GL),DSORG=PS,DDNAME=PHSDD,EODAD=ENDFIL,          X\n               SYNAD=ERROR5,BFTEK=E\nPDSDD   DCB    MACRF=(R),DSORG=PS,DDNAME=PHSDD,EODAD=ENDFIL,RECFM=U,   X\n               SYNAD=ERROR5\n        PRINT  GEN\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R10,R11,R12    KILL BASE ADDRESSABILITY\n         EJECT\nATTNLST STAX   ATTN,MF=L\nATTNLS2 STAX   ATT2,MF=L\nTEMPDATA DC    CL12'        '\n         DC    CL12'        '\n         DC    CL12'        '\n         DC    CL12'        '\nDIRAREA  DS    CL256\nECB      DS    F              EVENT CONROL BLOCK\nDAPARMS  DS    5A             IKJDAIR LIST\nDAALLOC  DS    26F                 ...\nDAFREE   DS    11F                 ...\nOUTLINE  DS    CL80' '\nERR1     DC    CL55'L01:- LIFE MUST BE INVOKED AS A COMMAND PROCESSOR'\nERR2     DC    CL55'L02:- LIFE HAS SUFFERED A PARAMETER ERROR'\nERR3     DC    CL55'L03:- LIFE COULD NOT OPEN THE INPUT DATA SET'\nERR4     DC    CL55'L04:- LIFE HAS SUFFERED A CLOCK ERROR'\nERR5     DC    CL55'L05:- LIFE HAD A READ ERROR ON THE INPUT DATA SET'\nERR6     DC    CL55'L06:- LIFE WILL ONLY PROCESS FIXED LENGTH RECORDS'\nERR7     DC    CL55'L07:- LIFE COULD NOT ALLOCATE THE INPUT DATA SET'\nERR8     DC    CL55'L08:- LIFE WILL ONLY WORK ON FULL SCREEN DEVICES'\nERR9     DC    CL55'L09:- LIFE HAS SUFFERED A TPUT OR TGET ERROR'\nERR10    DC    CL55'L10:- THE INPUT DATASET HAS AN INVALID DSORG'\nERR11    DC    CL55'L11:- THE \"EXIT\" KEY WAS HIT'\nERR12    DC    CL55'L12:- THE INPUT PDS DIRECTORY IS EMPTY'\nERR13    DC    CL55'L13:- THE READ KEY IS DISABLED: NO INPUT DATA'\nERR14    DC    CL55'L14:- THE WRITE KEY IS DISABLED: NO DESTINATION'\nERR15    DC    CL55'L15:- LIFE COULD NOT ALLOCATE THE SPECIFIED MEMBER'\nERR16    DC    CL55'L16:- THE REQUESTED DATA SET OPTION IS DISABLED'\nERR17    DC    CL55'L17:- ATTENTION/INTERRUPT CONDITION DETECTED'\nERR18    DC    CL55'L18:- PDS DIRECTORY OVERFLOW: MENU TRUNCATED'\nERR99    DC    CL55'L99:- HIT \"ENTER\" TO RETURN OR \"END\" KEY TO EXIT'\nMENUTIT  DC    CL40'++-----------------------LIFE PROGRAM SE'\n         DC    CL40'LECTION MENU---------------------------+'\nINFOSCR  DC    CL40'+------------------------LIFE PROGRAM ST'\n         DC    CL40'ATUS SCREEN ---------------------------+'\n         DC    CL40'|  Character=X  (Previously: Y)         '\n         DC    CL40'|   Interval=12345678    Time=12345678 |'\n         DC    CL40'| Current  Generation=                  '\n         DC    CL40'|      Limit=           Stats=1        |'\n         DC    CL40'| Absolute Generation=                  '\n         DC    CL40'| Generation=12345678   Pause=12345678 |'\n         DC    CL40'|          Population=                  '\n         DC    CL40'| Scroll Ver=1            Hor=1        |'\n         DC    CL40'+---------------------------------------'\n         DC    CL40'+--------------------------------------+'\n         DC    CL40'| Dsname=12345678.12345678.12345678.1234'\n         DC    CL40'5678.12345678        Member=12345678   |'\n         DC    CL40'+---------------------------------------'\n         DC    CL40'---------------------------------------+'\nHELP1    DC    CL40'+---------------------------------------'\n         DC    CL40'---------------------------------------+'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|     WELCOME TO CONWAY''S GAME OF.......'\n         DC    CL40'...                                    |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|         LLLLL              IIIII     F'\n         DC    CL40'FFFFFFFFFFFF     EEEEEEEEEEEEE         |'\n         DC    CL40'|         LLLLL              IIIII     F'\n         DC    CL40'FFFFFFFFFFFF     EEEEEEEEEEEEE         |'\n         DC    CL40'|         LLLLL              IIIII     F'\n         DC    CL40'FFFF             EEEEE                 |'\n         DC    CL40'|         LLLLL              IIIII     F'\n         DC    CL40'FFFFFFFF         EEEEEEEEE             |'\n         DC    CL40'|         LLLLL              IIIII     F'\n         DC    CL40'FFFF             EEEEE                 |'\n         DC    CL40'|         LLLLLLLLLLLLLL     IIIII     F'\n         DC    CL40'FFFF             EEEEEEEEEEEEE         |'\n         DC    CL40'|         LLLLLLLLLLLLLL     IIIII     F'\n         DC    CL40'FFFF             EEEEEEEEEEEEE         |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|     SCROLL DOWN FOR FURTHER INFORMATIO'\n         DC    CL40'N OR HIT ANY OTHER KEY TO GO           |'\n         DC    CL40'|     DIRECTLY TO THE INPUT SCREEN FOR T'\n         DC    CL40'HE FIRST GENERATION                    |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'+---------------------------------------'\n         DC    CL40'---------------------------------------+'\nHELP2    DC    CL40'+------------------------LIFE PROGRAM HE'\n         DC    CL40'LP SCREEN----------------------PAGE 1--+'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'| Life is a program which takes a set of'\n         DC    CL40' characters (initially the default     |'\n         DC    CL40'| character of \"*\") and uses these as re'\n         DC    CL40'presentations of \"cells\". The \"cells\"  |'\n         DC    CL40'| are then subjected to a process of evo'\n         DC    CL40'lution based on the following          |'\n         DC    CL40'| criteria:-                            '\n         DC    CL40'                                       |'\n         DC    CL40'|            1. A cell shall survive if '\n         DC    CL40'it has at least two neighbours but     |'\n         DC    CL40'|               no more than three neigh'\n         DC    CL40'bours, otherwise the existent cell     |'\n         DC    CL40'|               shall die.              '\n         DC    CL40'                                       |'\n         DC    CL40'|            2. A cell shall be born on '\n         DC    CL40'an unoccupied location if that location|'\n         DC    CL40'|               has exactly three neighb'\n         DC    CL40'ours.                                  |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'| A neighbouring location is any of the '\n         DC    CL40'eight possible locations surrounding   |'\n         DC    CL40'| a square on a grid.                   '\n         DC    CL40'                                       |'\n         DC    CL40'| The above scheme serves to create a we'\n         DC    CL40'll balanced ecology which ultimately   |'\n         DC    CL40'| stabilises or dies out, a process whic'\n         DC    CL40'h can extend for thousands of          |'\n         DC    CL40'| generations (a generation being one ap'\n         DC    CL40'plication of the rules to the entire   |'\n         DC    CL40'| colony simultaneously). The user, in t'\n         DC    CL40'his application, has control over      |'\n         DC    CL40'| the initial colony shape, the number o'\n         DC    CL40'f generations to run it and so on.     |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'+----SCROLL DOWN FOR INSTRUCTIONS-------'\n         DC    CL40'---------------------------------------+'\nHELP3    DC    CL40'+------------------------LIFE PROGRAM HE'\n         DC    CL40'LP SCREEN----------------------PAGE 2--+'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'| Command Format: \"LIFE DSNAME\"      (Ds'\n         DC    CL40'name is optional)                      |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'| After invocation, the user will, after'\n         DC    CL40' leaving this help section, be         |'\n         DC    CL40'| presented with a blank screen; this is'\n         DC    CL40' the first generation base which may   |'\n         DC    CL40'| be edited and set going. Editing consi'\n         DC    CL40'sts of placing a collection of cells   |'\n         DC    CL40'| on the screen (initially represented b'\n         DC    CL40'y \"*\") and then specifying a \"g\"       |'\n         DC    CL40'| greater than zero to process it. Other'\n         DC    CL40' options may be altered at leisure     |'\n         DC    CL40'| between generation cycles. If a data s'\n         DC    CL40'et was specified, then the data may    |'\n         DC    CL40'| be mapped onto the screen with the rea'\n         DC    CL40'd key, or saved at any time with the   |'\n         DC    CL40'| the write key. If the data set is a pd'\n         DC    CL40's, a member must first be specified    |'\n         DC    CL40'| with the \"M=\" option; alternatively, a'\n         DC    CL40' member list may be displayed with the |'\n         DC    CL40'| \"D=\" option whereby one can select a m'\n         DC    CL40'ember by placing any character before  |'\n         DC    CL40'| the desired member name and hitting \"E'\n         DC    CL40'nter\". Only the Scroll Up/Down keys    |'\n         DC    CL40'| are functional in the menu display. On'\n         DC    CL40'e may also deallocate a PDS member by  |'\n         DC    CL40'| specifying \"M= \",  thereby protecting '\n         DC    CL40'it from further \"Writes\". If upon      |'\n         DC    CL40'| invocation the display is distorted du'\n         DC    CL40'e to a disparity between the display   |'\n         DC    CL40'| size and the screen size, then the int'\n         DC    CL40'errupt key will rectify this anomaly.  |'\n         DC    CL40'| The interrupt key may also be used to '\n         DC    CL40'prematurely end a generation cycle.    |'\n         DC    CL40'| Non standard screen sizes (i.e. those '\n         DC    CL40'which do not reflect the actual        |'\n         DC    CL40'| display screen size) may cause data tr'\n         DC    CL40'ansmission errors.                     |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'+----SCROLL UP FOR THE INTRODUCTION--SCR'\n         DC    CL40'OLL DOWN FOR FURTHER NOTES-------------+'\nHELP4    DC    CL40'+------------------------LIFE PROGRAM HE'\n         DC    CL40'LP SCREEN----------------------PAGE 3--+'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'| The screen wraps around in both direct'\n         DC    CL40'ions and thus represents a torus, a    |'\n         DC    CL40'| shape which contains the colony withou'\n         DC    CL40't pruning the bounds. One must beware, |'\n         DC    CL40'| though, of using samples on different '\n         DC    CL40'screen sizes: the destiny varies by    |'\n         DC    CL40'| virtue of the edge interactions. It is'\n         DC    CL40' best to have a sample library for     |'\n         DC    CL40'| each device type.                     '\n         DC    CL40'                                       |'\n         DC    CL40'| Some facts: specifying \"C= \" clears th'\n         DC    CL40'e screen; when a new character is      |'\n         DC    CL40'| specified, all occurrences of both the'\n         DC    CL40' old character and the new character   |'\n         DC    CL40'| qualify for the next generation; the \"'\n         DC    CL40'I=\" option  is overridden by the \"G=\"  |'\n         DC    CL40'| option, thus if \"G\" is 10 and \"I\" is 4'\n         DC    CL40', then one will get an image update at |'\n         DC    CL40'| generations 4, 8 and finally 10. \"L\" o'\n         DC    CL40'verrides \"G\" and a similar scenario is |'\n         DC    CL40'| possible. \"L\" actually states that if '\n         DC    CL40'the population stabilises, \"L\"         |'\n         DC    CL40'| generations will be processed before t'\n         DC    CL40'he cycle stops. If the population      |'\n         DC    CL40'| reaches zero, \"L\" is always zero. The '\n         DC    CL40'reason \"L\" is available is that a      |'\n         DC    CL40'| population may be stable without havin'\n         DC    CL40'g truly stabilised, a fact which will  |'\n         DC    CL40'| become apparent after some use of the '\n         DC    CL40'program.                               |'\n         DC    CL40'| The pause and time options are useful '\n         DC    CL40'when one wishes to dwell awhile on     |'\n         DC    CL40'| each generation, or if the terminal im'\n         DC    CL40'age refreshes too quickly for the      |'\n         DC    CL40'| eye to see it. Also, I would recommend'\n         DC    CL40' the use of a channel attached         |'\n         DC    CL40'| terminal; the graphics can be remarkab'\n         DC    CL40'le because of the speed.               |'\n         DC    CL40'| One last point: the program is very fa'\n         DC    CL40'st, so beware of resource usage; the   |'\n         DC    CL40'| \"T\" option can be useful here.        '\n         DC    CL40'                                       |'\n         DC    CL40'+----SCROLL DOWN FOR THE COMMAND LIST--S'\n         DC    CL40'CROLL UP FOR PREVIOUS NOTES------------+'\nHELP5    DC    CL40'+------------------------LIFE PROGRAM HE'\n         DC    CL40'LP SCREEN----------------------PAGE 4--+'\n         DC    CL40'|Commands: (which may be entered indepen'\n         DC    CL40'dently anywhere on the life screen)    |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|G=0-9999999; The number of generations '\n         DC    CL40'processed between terminal inputs.     |'\n         DC    CL40'|I=0-9999999; The number of generations '\n         DC    CL40'processed between screen image updates.|'\n         DC    CL40'|P=0-9999999; The program wait time in 1'\n         DC    CL40'/100ths Sec between image updates.     |'\n         DC    CL40'|T=0-9999999; The program wait time in 1'\n         DC    CL40'/100ths Sec between generations.       |'\n         DC    CL40'|D=         ; Displays the directory of '\n         DC    CL40'the dataset if it is partitioned.      |'\n         DC    CL40'|R=         ; Resets the current generat'\n         DC    CL40'ion counter to zero.                   |'\n         DC    CL40'|S=Y or N   ; Specify y for execution ti'\n         DC    CL40'me statistics display.                 |'\n         DC    CL40'|C=         ; Any character which will b'\n         DC    CL40'e used to represent the cells.         |'\n         DC    CL40'|M=Member   ; If a PDS was specified, a '\n         DC    CL40'new member to display on the screen.   |'\n         DC    CL40'|H=0-Width  ; Number of columns used wit'\n         DC    CL40'h the Scroll Left/Right key            |'\n         DC    CL40'|V=0-Depth  ; Number of rows    used wit'\n         DC    CL40'h the Scroll Up/Down    key            |'\n         DC    CL40'|             Defaults: G=0, I=1, P=0, T'\n         DC    CL40'=0, V=6, H=20, C=*, S=Y.               |'\n         DC    CL40'|Pf keys:                               '\n         DC    CL40'                                       |'\n         DC    CL40'|PFK1/13  Help Screen    ; PFK2/14  Cent'\n         DC    CL40're colony ; PFK3/15  End the session   |'\n         DC    CL40'|PFK4/16  Read data      ; PFK5/17  Writ'\n         DC    CL40'e data    ; PFK6/18  Reflect left-right|'\n         DC    CL40'|PFK7/19  Scroll up      ; PFK8/20  Scro'\n         DC    CL40'll down   ; PFK9/21  Reflect up-down   |'\n         DC    CL40'|PFK10/22 Scroll left    ; PFK11/23 Scro'\n         DC    CL40'll right  ; PFK12/24 Rotate middle     |'\n         DC    CL40'|PA2      Display status ; PA1/ATTN Inte'\n         DC    CL40'rrupt     ;                            |'\n         DC    CL40'|PFK4/16 and PFK5/17 refer to the Data S'\n         DC    CL40'et option of the Life command.         |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'+----SCROLL UP FOR THE INSTRUCTIONS--SCR'\n         DC    CL40'OLL DOWN FOR ADVANCED TOPICS-----------+'\nHELP6    DC    CL40'+------------------------LIFE PROGRAM HE'\n         DC    CL40'LP SCREEN----------------------PAGE 5--+'\n         DC    CL40'|  Advanced Topics                      '\n         DC    CL40'                                       |'\n         DC    CL40'|                                       '\n         DC    CL40'                                       |'\n         DC    CL40'|  If one specifies a new value of \"V=\" '\n         DC    CL40'or \"H=\" (scrolling) or \"M=\"  (member)  |'\n         DC    CL40'|  then the screen will be presented aga'\n         DC    CL40'in to the user even if \"G\" > 0; this   |'\n         DC    CL40'|  is done because these three options a'\n         DC    CL40're not execution time options and thus |'\n         DC    CL40'|  should not be allowed to trigger the '\n         DC    CL40'process, even though other run time    |'\n         DC    CL40'|  options may have been specified.     '\n         DC    CL40'                                       |'\n         DC    CL40'|  When one saves a screen of data by hi'\n         DC    CL40'tting the \"Write\" Pf key, it is        |'\n         DC    CL40'|  possible to embed options in the data'\n         DC    CL40' before saving the data. The effect of |'\n         DC    CL40'|  this is that when the data is used la'\n         DC    CL40'ter as a sample, the options will      |'\n         DC    CL40'|  already have been chosen (perhaps jud'\n         DC    CL40'iciously?) and the user need only      |'\n         DC    CL40'|  hit the enter key to set the sample g'\n         DC    CL40'oing.                                  |'\n         DC    CL40'|  If one wishes to save the current scr'\n         DC    CL40'een, but without destroying the        |'\n         DC    CL40'|  original member from which it came, t'\n         DC    CL40'hen try the following:-                |'\n         DC    CL40'|  Either  1. Enter \"M=Newname\" (no proc'\n         DC    CL40'essing will be done) and then          |'\n         DC    CL40'|             hit the \"Write\" key; the d'\n         DC    CL40'ata will be stored in \"Newname\".       |'\n         DC    CL40'|          2. Enter \"D=\"; the Menu will '\n         DC    CL40'be presented. select a new member and  |'\n         DC    CL40'|             hit enter. Your original s'\n         DC    CL40'creen will return, and you can now     |'\n         DC    CL40'|             hit the \"Write\" key.      '\n         DC    CL40'                                       |'\n         DC    CL40'| To create a new member, simply use the'\n         DC    CL40' \"M=\" option specifying a non-existent |'\n         DC    CL40'| member name. The \"Read\" key will be te'\n         DC    CL40'mporarily disabled until something is  |'\n         DC    CL40'| written to it.                        '\n         DC    CL40'                                       |'\n         DC    CL40'+----SCROLL UP FOR THE COMMAND LIST-----'\n         DC    CL40'---------------------------------------+'\n         EJECT\n*------- TSO COMMAND OPERAND(S) PARSE LIST\n         SPACE 1\nOPERS    IKJPARM\nOPER1    IKJPOSIT DSNAME,USID,DEFAULT='''Z7999999'''\n         IKJENDP\n         EJECT\nINFODSC  DSECT ,\n         SPACE 1\n         DS    CL80\n         DS    CL13\nCHAR1X   DS    CL1\n         DS    CL15\nCHAR2X   DS    CL1\n         DS    CL10\n         DS    CL13\nINT1X    DS    CL8\n         DS    CL9\nTME1X    DS    CL8\n         DS    CL2\n         DS    CL22\nCGEN1X   DS    CL8\n         DS    CL10\n         DS    CL13\nLIM1X    DS    CL8\n         DS    CL9\nSHO1X    DS    CL8\n         DS    CL2\n         DS    CL22\nAGEN1X   DS    CL8\n         DS    CL10\n         DS    CL13\nGEN1X    DS    CL8\n         DS    CL9\nPAU1X    DS    CL8\n         DS    CL2\n         DS    CL22\nPOP1X    DS    CL8\n         DS    CL10\n         DS    CL13\nMOV1X    DS    CL8\n         DS    CL9\nMOV2X    DS    CL8\n         DS    CL2\nFILLER   DS    CL80\n         DS    CL9\nDSN1X    DS    CL44\n         DS    CL15\nMEM1X    DS    CL8\n         DS    CL4\n         SPACE 1\n        PRINT  NOGEN\n        IKJCPPL\n        IKJDAPL\n        IKJDAP08\n        IKJDAP18\n        CVT   DSECT=YES\n        PRINT  GEN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LIFE$": {"ttr": 13318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//LIFE     JOB (........),'INSTALL  -LIFE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                           L  I  F  E                              *\n//* NOTE : THE PROCEDURE 'PAJCLIFE' NEEDS AS PRE-REQUISITE THE        *\n//* ------ INSTALLATION OF THE 'DSNCHECK' COMMAND.                    *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=LIFE\n//LNK     EXEC PAJILKC,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   LIFE\n  NAME    LIFE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LUNAR": {"ttr": 13320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x932\\x7f\\x00\\x932\\x7f\\x14&\\x03X\\x03X\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-23T00:00:00", "modifydate": "1993-11-23T14:26:00", "lines": 856, "newlines": 856, "modlines": 0, "user": "SYSPAJA"}, "text": "LLS      TITLE 'L U N A R -- LUNAR LANDING SIMULATION'\n         SPACE 1\n        PRINT  OFF\n         MACRO\n&NAME   #CALL  &WHERE\n         AIF   ('&WHERE' NE '').W1\n         MNOTE 8,'--- \"WHERE\" OPERAND MISSING ---'\n         MEXIT\n.W1      AIF   ('&WHERE'(1,1) EQ '(').W2\n&NAME    L     R15,=A(&WHERE)      GET ENTRY POINT\n         AGO   .W3\n.W2      AIF   ('&WHERE' EQ '(15)').W4\n         AIF   ('&WHERE' EQ '(R15)').W4\n&NAME    LR    R15,&WHERE          SET ENTRY POINT\n.W3      BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.W4      ANOP\n&NAME    BASR  R14,R15             GO TO ROUTINE\n         MEND\n         MACRO\n&NAME   #DSP   &A,&N\n&NAME    BAS   R14,&A\n         NOP   &N*4\n         MEND\n         MACRO\n&NAME   #XENT  &DUMMY\n         CNOP  0,8\n&NAME    STM   R14,R12,12(R13)     SAVE REGISTERS\n         B     16(,R15)            BRANCH AROUND ID\n         DC    CL8'&NAME'          IDENTIFIER\n         LR    R8,R15              SET BASE REGISTER\n         USING &NAME,R8            SET ADDRESSABILITY\n         LR    R15,R13             PREVIOUS SAVE AREA\n         LA    R13,18*4(R13)       NEW CURRENT SAVE AREA\n         ST    R13,8(R15)          LINK SAVE AREAS\n         ST    R15,4(R13)\n         SPACE 1\n         MEND\n         MACRO\n&NAME   #XRET  &RC=\n&NAME    L     R13,4(R13)          PREVIOUS SAVE AREA\n         AIF   ('&RC' EQ '').N1\n         AIF   ('&RC'(1,1) EQ '(').N2\n         AIF   ('&RC' NE '0').N3\n.N1      XR    R15,R15             SET RC=0\n         ST    R15,16(R13)         STORE IT (R15)\n         AGO   .N4\n.N2      ST    &RC(1),16(R13)      STORE RC (R15)\n         AGO   .N4\n.N3      MVC   16(4,R13),=AL4(&RC) SET RC (R15)\n.N4      LM    R14,R12,12(R13)     RESTORE REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATOR\n         BR    R14                 RETURN\n         SPACE 1\n         MEND\n         MACRO\n        #XEND  &DUMMY\n        LTORG  ,                   LITERALS\n         SPACE 1\n         DROP  R8                  END OF LOCAL ADDRESSABILITY\n         MEND\n        PRINT  ON\n         SPACE 1\nLUNAR    START 0\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*   LUNAR :    LUNAR LANDING SIMULATION.                              *\n*   AUTHOR :   UNKNOWN (ORIGINAL MODULE WAS IN FORTRAN)               *\n*              FULL SCREEN BY : MOINIL P.A.                           *\n*                               COMPUTING CENTRE                      *\n*                               J.R.C. - ISPRA ESTABLISHMENT          *\n*                               21020 ISPRA (VA), ITALY               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  NOGEN\n        $DEFREG\n*------- MAIN ENTRY, INITIALIZE\n         SPACE 1\n        $XENT  BASE=(R11,R12),LV=DATALEN,TYPE=RENT\n         LR    R9,R13              SET DATA ADDRESSABILITY\n         USING DATA,R9\n         MVC   EXTR(LEXTR),EXTRP\n        EXTRACT ATSO,'S',FIELDS=(TSO),MF=(E,EXTR)\n         L     R2,ATSO\n         TM    0(R2),X'80'\n         BZ    NOTTSO              WE ARE'NT IN TSO\n         XC    EXTR(LEXTR),EXTR\n        GTSIZE ,\n         LTR   R15,R15\n         BNZ   ERGTSZ              ERROR RETURN CODE\n         LTR   R15,R0\n         BZ    NDTERM              NOT DISPLAY TERMINAL\n         CL    R1,=F'80'           TEST LINE LENGTH\n         BE    TSTSC\n         CL    R1,=F'132'\n         BNE   NDTERM\n         CL    R0,=F'27'           TEST NUMBER OF LINES\n         BNE   NDTERM\n         B     SETSCT\nTSTSC    CL    R0,=F'24'\n         BE    SETSCT\n         CL    R0,=F'32'\n         BE    SETSCT\n         CL    R0,=F'43'\n         BNE   NDTERM\nSETSCT   OI    FLAGS,SCTERM\n         B     NDTERM+L'NDTERM\nNDTERM   NI    FLAGS,255-SCTERM\n         XC    LIST0(5*4),LIST0    RESET LIST\n         LA    R1,REPLY            WHERE TO REPLY\n         ST    R1,LIST0+2*4        INTO LIST\n         LA    R1,L'REPLY          READ LENGTH\n         ST    R1,LIST0+3*4        INTO LIST\n         SPACE 1\n*------- ASK USER WANT INSTRUCTIONS\n         SPACE 1\nREINM    LA    R1,INMSG            INITIAL MESSAGE\n         LA    R0,L'INMSG          LENGTH\n        #DSP   DSPLAY,0            SEND THE MESSAGE        CALL FS = 0\n         L     R0,LIST0+4*4        GET READ LENGTH\n         LTR   R0,R0               NULL?\n         BNP   NEWGAME             YES, BYPASS INSTRUCTIONS\n         CLI   REPLY,C'N'\n         BE    NEWGAME             NO, BYPASS INSTRUCTIONS\n         CLI   REPLY,C'Y'\n         BNE   REINM\n         LA    R1,EXMSG            INSTRUCTIONS MESSAGE\n         LA    R0,LEXMSG           LENGTH\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,1            SEND THE MESSAGE        CALL FS = 1\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\n         SPACE 1\n*------- START LANDING\n         SPACE 1\nNEWGAME  LA    R1,ONMSG            NEW LANDING MESSAGE\n         LA    R0,LONMSG           LENGTH\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n        #DSP   DSPLAY,2            SEND THE MESSAGE        CALL FS = 2\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\n         XC    $T,$T               T = 0\n         MVC   $H,=F'5000'         H = 500.0\n         MVC   $V,=F'500'          V = 50.0\n         MVC   $F,=F'120'          F = 120\n         SPACE 1\n*------- EXECUTE LANDING\n         SPACE 1\nLOOP     BAS   R6,PRPLOT\n         LA    R1,WLNE             STATUS MESSAGE\n         LA    R0,L'WLNE           LENGTH\n        #DSP   DSPLAY,3            SEND THE MESSAGE        CALL FS = 3\n         L     R3,LIST0+4*4        GET READ LENGTH\n         XR    R0,R0               SET ZERO\n         LTR   R3,R3               NULL?\n         BNP   PRCVL               YES, SET AS ZERO\n         LA    R4,REPLY\n         LA    R2,1\n         LA    R3,REPLY-1(R3)\n         CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     PRCVL               NONE, SET AS ZERO\n         LR    R1,R0\n         LA    R15,15\nCSCAN    CLI   0(R4),C'0'\n         BL    PRBAD               BAD VALUE SPECIFIED\n         CLI   0(R4),C'9'\n         BH    PRBAD               BAD VALUE SPECIFIED\n         IC    R1,0(R4)\n         NR    R1,R15\n         LTR   R0,R0\n         BNP   *+L'*+4\n         MH    R0,=H'10'\n         AR    R0,R1\n         CH    R0,=H'30'\n         BNH   *+L'*+10\nPRBAD    MVC   WLNE,BLANKS         BAD VALUE SPECIFIED\n         B     LOOP+L'LOOP\n         BXLE  R4,R2,*+L'*+4\n         B     PRCVL\n         CLI   0(R4),C' '\n         BNE   CSCAN\nPRCVL    LTR   R2,R0\n         BZ    *+L'*+12\n         CL    R2,$F\n         BNH   *+L'*+4\n         L     R2,$F\nCYCLE    L     R5,$F               (R5) F = F - B\n         SR    R5,R2\n         ST    R5,$F\n         LTR   R2,R2\n         BZ    *+L'*+4\n         MH    R2,=H'10'\n         ST    R2,$B               (R2) B\n         L     R3,=F'50'           (R3) V1 = V + 5 - B\n         SR    R3,R2\n         ST    R3,$W1              W1 = 5 - B\n         A     R3,$V\n         ST    R3,$V1\n         L     R1,$V               (R4) H = H - ((V + V1)/2)\n         AR    R1,R3\n         BZ    *+L'*+10\n         XR    R0,R0\n         M     R0,=F'1'\n         D     R0,=F'2'\n         ST    R1,$W2              W2 = (V + V1)/2\n         L     R4,$H\n         SR    R4,R1\n         ST    R4,$H\n         BNP   TCHDWN\n         ST    R3,$V               V = V1\n         L     R0,$T               T = T + 1\n         A     R0,=F'1'\n         ST    R0,$T\n         LTR   R5,R5               F ?\n         BP    LOOP\n         MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n         LTR   R2,R2               B ?\n         BZ    NOTOFF\n         LA    R1,OFMSG            OFF MESSAGE\n         LA    R0,L'OFMSG          LENGTH\n        #DSP   DSPLAY,4            SEND THE MESSAGE        CALL FS = 4\nNOTOFF   BAS   R6,PRPLOT\n         LA    R1,WLNE             STATUS MESSAGE\n         LA    R0,L'WLNE           LENGTH\n        #DSP   DSPLAY,3            SEND THE MESSAGE        CALL FS = 3\n         MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\n         XR    R2,R2               (R2) B = 0\n         B     CYCLE\n         SPACE 1\n*------- LANDING TERMINATED\n         SPACE 1\nTCHDWN   MVC   SVRDP(L'SVRDP),LIST0+2*4 SAVE REPLY ADDRESS/LENGTH\n         XC    LIST0+2*4(2*4),LIST0+2*4 NO READ\n         MVC   WLNE,BLANKS\n         MVC   WLNE+1(22),=CL22'---------- CONTACT ---'\n         L     R0,$H\n         LTR   R0,R0\n         BM    *+L'*+8\n         MVI   WLNE+25,C'*'\n         B     *+L'*+4\n         MVI   WLNE+24,C'?'\n         LA    R1,WLNE             STATUS MESSAGE\n         LA    R0,L'WLNE           LENGTH\n        #DSP   DSPLAY,3            SEND THE MESSAGE        CALL FS = 3\n         L     R4,$H               H = H + ((V + V1)/2)\n         A     R4,$W2\n         ST    R4,$H\n         L     R0,$B               B - 5 ?\n         S     R0,=F'50'\n         BZ    SKPT1\n         L     R1,$W1\n         A     R1,$W1              D = (SQRT((V*V) + H*(2*W1))-V) / W1\n         XR    R0,R0\n         M     R0,$H\n         XR    R2,R2\n         L     R3,$V\n         M     R2,$V\n         AR    R1,R3\n         XR    R0,R0\n         LTR   R1,R1\n         BNP   SQROK\n         L     R0,$V\n         CLR   R1,R3\n         BE    SQROK\n         BL    SQRLOW\nSQRHIGH  A     R0,=F'10'\n         LR    R3,R0\n         XR    R2,R2\n         MR    R2,R0\n         CLR   R1,R3\n         BE    SQROK\n         BH    SQRHIGH\n         S     R0,=F'10'\n         B     SQROK\nSQRLOW   S     R0,=F'10'\n         LR    R3,R0\n         XR    R2,R2\n         MR    R2,R0\n         CLR   R1,R3\n         BE    SQROK\n         BL    SQRLOW\nSQROK    LR    R1,R0\n         S     R1,$V\n         XR    R0,R0\n         M     R0,=F'10'\n         D     R0,$W1              (R1) = D\n         B     SKPT2\nSKPT1    XR    R0,R0               D = H / V\n         L     R1,$H\n         M     R0,=F'10'\n         D     R0,$V               (R1) = D\nSKPT2    L     R3,$W1              V1 = V + (W1 * D)\n         XR    R2,R2\n         MR    R2,R1\n         CL    R3,=F'10'\n         BNL   *+L'*+6\n         XR    R3,R3\n         B     *+L'*+4\n         D     R2,=F'10'\n         A     R3,$V\n         ST    R3,$V1\n         L     R0,$T               T = T + D\n         MH    R0,=H'10'\n         AR    R0,R1\n         BAS   R14,EDTVLD\n         MVC   F1MSG+13(5),EDWRK+L'EDWRK-5\n         L     R0,$V1\n         BAS   R14,EDTVLD\n         MVC   F1MSG+47(6),EDWRK+L'EDWRK-6\n         L     R0,$F\n         BAS   R14,EDTVAL\n         MVC   F1MSG+109(3),EDWRK+L'EDWRK-3\n         LA    R1,F1MSG            FINAL MESSAGE\n         LA    R0,LF1MSG           LENGTH\n        #DSP   DSPLAY,4            SEND THE MESSAGE        CALL FS = 4\n         L     R1,$V1\n         LTR   R0,R1               V1 ?\n         BZ    *+L'*+14\n         BP    *+L'*+2\n         LPR   R0,R0\n         S     R0,=F'20'           ABS(V1) - 2 ?\n         BNM   SKPT3\n         LA    R1,F2MSG            FINAL MESSAGE\n         LA    R0,L'F2MSG          LENGTH\n        #DSP   DSPLAY,4            SEND THE MESSAGE        CALL FS = 4\n         B     SKRST\nSKPT3    XR    R0,R0               X = V1 / 2\n         M     R0,=F'1'\n         D     R0,=F'2'            (R1) = X\n         LR    R0,R1\n         BAS   R14,EDTVLD\n         MVC   F3MSG+22(6),EDWRK+L'EDWRK-6\n         LA    R1,F3MSG            FINAL MESSAGE\n         LA    R0,LF3MSG           LENGTH\n        #DSP   DSPLAY,4            SEND THE MESSAGE        CALL FS = 4\nSKRST    MVC   LIST0+2*4(L'SVRDP),SVRDP RESTORE REPLY ADDRESS/LENGTH\nREAMM    LA    R1,AMMSG            ASK FOR ANOTHER MISSION\n         LA    R0,L'AMMSG          LENGTH\n        #DSP   DSPLAY,5            SEND THE MESSAGE        CALL FS = 5\n         L     R0,LIST0+4*4        GET READ LENGTH\n         LTR   R0,R0               NULL?\n         BNP   REAMM               YES, ASK AGAIN\n         CLI   REPLY,C'Y'          NEW GAME?\n         BE    NEWGAME             YES, GO TO IT\n         CLI   REPLY,C'N'          NO?\n         BNE   REAMM               ASK AGAIN\n         TM    FLAGS,SCTERM        FULL SCREEN?\n         BZ    QUIT                NO\nLEAVE    MVI   OPTFS,FSEXIT        YES\n        @FS    OPTFS,MF=(E,FSPARM)\n         LR    R10,R15             RETAIN RETURN CODE\n         XR    R0,R0\n         ICM   R0,B'0011',ERRMSL\n         BZ    NOMSGE\n        TPUT   MSWRK,(0)\nNOMSGE   LTR   R10,R10\n         BZ    QUIT\n         MVC   MSWRK(L'ERRMS2),ERRMS2\n         CVD   R10,DBLW\n         MVC   MSWRK+29(4),=XL4'40202120'\n         ED    MSWRK+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSWRK+21\n         SRL   R0,4\n         STC   R0,MSWRK+20\n         NC    MSWRK+20(2),=XL2'0F0F'\n         TR    MSWRK+20(2),HEXTB\n        TPUT   MSWRK,L'ERRMS2\n         B     QUIT\n         SPACE 1\n*------- ERROR MESSAGE, EXIT\n         SPACE 1\nNOTTSO  TPUT   ERRMS0,L'ERRMS0\n         B     QUIT\nERGTSZ   MVC   MSWRK(L'ERRMS1),ERRMS1\n         MVC   MSWRK+5(6),=CL6'GTSIZE'\n         CVD   R15,DBLW\n         MVC   MSWRK+19(4),=XL4'40202120'\n         ED    MSWRK+19(4),DBLW+L'DBLW-2\nSHTDWN  TPUT   MSWRK,L'ERRMS1\n         SPACE 1\n*------- WHEN DONE, EXIT\n*        IF USER IS THROUGH, EXIT\n         SPACE 1\nQUIT    $XRET  CC=0,LV=DATALEN,TYPE=RENT\n         EJECT\n*======= EDTVAL : EDIT VALUE ROUTINES\n*                 INPUT - R0  = BINARY VALUE\n*                         R14 = RETURN ADDRESS\n*                         R15 = WORK REGISTER\n*                 OUTPUT - EDWRK = EDITED VALUE (RIGHT JUSTIFIED)\n         SPACE 1\nEDTVLD   LTR   R15,R0\n         BNM   *+L'*+2\n         LPR   R15,R15\n         MVC   EDWRK,=XL8'4040202021204B20'\n         CVD   R15,DBLW\n         ED    EDWRK,DBLW+L'DBLW-3\n         LTR   R0,R0\n         BNMR  R14\n         LA    R15,EDWRK+L'EDWRK-3\n         BCTR  R15,0\n         CLI   0(R15),C' '\n         BNE   *-6\n         MVI   0(R15),C'-'\n         BR    R14                 RETURN\n         SPACE 1\nEDTVAL   LTR   R15,R0\n         BNM   *+L'*+2\n         LPR   R15,R15\n         MVC   EDWRK,=XL8'4040402020202120'\n         CVD   R15,DBLW\n         ED    EDWRK,DBLW+L'DBLW-3\n         LTR   R0,R0\n         BNMR  R14\n         LA    R15,EDWRK+L'EDWRK-1\n         BCTR  R15,0\n         CLI   0(R15),C' '\n         BNE   *-6\n         MVI   0(R15),C'-'\n         BR    R14                 RETURN\n         SPACE 1\n*======= PRPLOT : PREPARE PLOT LINE\n*                 INPUT - R6  = RETURN ADDRESS\n*                         R14 = LINK USED\n         SPACE 1\nPRPLOT   MVC   WLNE,BLANKS\n         L     R0,$T\n         BAS   R14,EDTVAL\n         MVC   WLNE+1(3),EDWRK+L'EDWRK-3\n         L     R0,$H\n         BAS   R14,EDTVLD\n         MVC   WLNE+5(6),EDWRK+L'EDWRK-6\n         L     R0,$V\n         BAS   R14,EDTVLD\n         MVC   WLNE+12(6),EDWRK+L'EDWRK-6\n         L     R0,$F\n         BAS   R14,EDTVAL\n         MVC   WLNE+20(3),EDWRK+L'EDWRK-3\n         MVI   WLNE+25,C'+'\n         XR    R0,R0\n         L     R1,$H\n         CL    R1,=F'100'\n         BNL   *+L'*+6\n         LR    R1,R0\n         B     *+L'*+16\n         D     R0,=F'100'\n         CL    R0,=F'50'\n         BL    *+L'*+4\n         A     R1,=F'1'\n         CL    R1,=F'50'\n         BH    *+L'*+10\n         LA    R1,WLNE+26(R1)\n         MVI   0(R1),C'*'\n         BR    R6                  RETURN\n         MVI   WLNE+77,C'?'\n         BR    R6                  RETURN\n         SPACE 1\n*======= DSPLAY : DISPLAY AND EVENTUALLY READ ROUTINE\n*                 INPUT - R0  = LENGTH OF DISPLAY SCREEN\n*                         R1  = ADDRESS OF DISPLAY\n*                         R14 = RETURN ADDRESS\n         SPACE 1\nDSPLAY   MVC   REPLY(L'REPLY),BLANKS NOTHING READ YET\n         ST    R1,LIST0            SAVE SCREEN ADDR\n         ST    R0,LIST0+4          AND LENGTH\n         TM    FLAGS,SCTERM        FULL SCREEN?\n         BZ    NOTFS               NO\n         ST    R14,SVR14           YES, SAVE RETURN AROUND CALL\n        #CALL  DOFS\n         L     R14,SVR14           RESTORE RETURN AFTER CALL\n         CH    R15,=H'4'           WHERE GO?\n         BE    SHTDWN              +4 - ERROR, MESSAGE AND EXIT\n         BH    LEAVE               +8 - ERROR, MESSAGE AND EXIT\n         CLI   REPLY,C'E'          +0 - OK, END?\n         BE    LEAVE               YES\n         BR    R14                 NO, RETURN\nNOTFS    STM   R14,R12,12(R13)     SAVE HIS REGS\n         L     R3,LIST0            GET BUFFER LOCATION\n         L     R4,LIST0+4          GET LENGTH TO DISPLAY\nTPLOOP   LA    R0,80               ASSUME FULL LINE\n         CR    R4,R0               JUST THIS LINE?\n         BH    *+L'*+2             YES\n         LR    R0,R4               ELSE DO REMAINDER\n         LA    R1,0(R3)            GET ADDRESS\n        TPUT   (1),(0),R           DUMP THE LINE\n         LA    R3,80(R3)           NEXT LINE\n         SH    R4,=H'80'           GET REMAINING LENGTH\n         BP    TPLOOP              YES, CONTINUE\n         OC    LIST0+2*4(2*4),LIST0+2*4 READ?\n         BZ    TSOXT               NO\n         L     R1,LIST0+2*4        GET READ ADDRESS\n         L     R0,LIST0+3*4        GET LENGTH\n         O     R1,=X'80000000'     TGET\n        TGET   (1),(0),R           READ\n         ST    R1,LIST0+4*4        AND SAVE RETURNED LENGTH\nTSOXT    LM    R14,R12,12(R13)     RESTORE REGS\n         OC    REPLY(L'REPLY),BLANKS MAKE IT UPPER CASE\n         CLI   REPLY,C'E'          END?\n         BE    QUIT                YES\n         BR    R14                 RETURN\n         EJECT\n*- - - - C O N S T A N T S - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXTRP   EXTRACT *-*,'S',MF=L\nHEXTB    DC    CL16'0123456789ABCDEF'\n         SPACE 1\n*------- MESSAGES\n         SPACE 1\nINMSG    DC    C'LUNAR LANDING SIMULATION. DO YOU WANT INSTRUCTIONS ? (X\n               Y/N)'\nEXMSG    DC    CL80'YOU ARE LANDING ON THE MOON AND HAVE TAKEN OVER MANX\n               UAL CONTROL 500 FEET ABOVE'\n         DC    CL80'A GOOD LANDING SPOT. YOU HAVE A DOWNWARD VELOCITY OX\n               F 50 FT/SEC. AND 120 UNITS'\n         DC    CL80'OF FUEL REMAIN. EACH UNIT OF FUEL EXPENDED WILL SLOX\n               W YOUR DESCENT BY 1 FT/SEC.'\n         DC    C'THE MAXIMUM THRUST OF YOUR ENGINE IS 30 FT/SEC. OR 30 X\n               UNITS OF FUEL.'\nLEXMSG   EQU   *-EXMSG\nONMSG    DC    CL80'ONBOARD COMPUTER FAILURE TAKE OVER MANUAL CONTROL.'\n         DC    CL80'ENTER BURN VALUE (0-30 FUEL UNITS).'\nBLANKS   DC    CL80' '\nTLMSG    DC    C' SEC   FEET  SPEED FUEL PLOT'\nLONMSG   EQU   *-ONMSG\nAMMSG    DC    C'ANOTHER MISSION ? (Y/N)'\nOFMSG    DC    C' ****** OUT OF FUEL ***'\nF1MSG    DC    CL80'TOUCHDOWN AT ..... SECONDS - LANDING VELOCITY =    X\n                   FT/SEC.'\n         DC    C'                                  UNITS OF FUEL REMAINX\n               ING'\nLF1MSG   EQU   *-F1MSG\nF2MSG    DC    C'CONGRATULATIONS, A PERFECT LANDING.'\nF3MSG    DC    CL80'YOU PRODUCED A CRATER        FEET DEEP.'\n         DC    C'SORRY YOU BLEW IT, CONDOLENCES SENT TO NEXT OF KIN.'\nLF3MSG   EQU   *-F3MSG\nERRMS0   DC    C' => NOT OUTSIDE TSO ENVIRONMENT | BYE-BYE'\nERRMS1   DC    C' => \"      \" - RC = ... - EXIT -'\nERRMS2   DC    C' => \"FSRTN\" - OPT = .. , RC = ... - EXIT -'\n         EJECT\n*------- LITERALS\n         SPACE 1\n        LTORG\n         EJECT\n*- - - - D O     F U L L     S C R E E N - - - - - - - - - - - - - - -*\n         SPACE 1\nDOFS    #XENT  ,\n         XR    R10,R10\n         TM    SWFSW,SW1ST\n         BO    DOFSW\n        @FSI   ,\n         LTR   R15,R15\n         BNZ   DOFIMM\n         OI    OPTFS,FSSKIP\n         LM    R2,R3,INITRA\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         OI    SWFSW,SW1ST\nDOFSW    LM    R2,R3,LIST0\n         CH    R3,=H'80'\n         BNH   *+L'*+22\n         CLC   0(80,R2),BLANKS\n         BNE   *+L'*+12\n         LA    R2,80(R2)\n         SH    R3,=H'80'\n         B     DOFSW+L'DOFSW\n         STM   R2,R3,DFSTL\n         XR    R7,R7\n         L     R1,SVR14\n         ICM   R7,B'0011',2(R1)    GET CALL FS NUMBER\n         CL    R7,=A(DOFSMX)\n         BNL   DOFVER\n         B     DOFSV(R7)\nDOFSV    B     DOFS0\n         B     DOFS1\n         B     DOFS2\n         B     DOFS3\n         B     DOFS4\n         B     DOFS5\nDOFSMX   EQU   *-DOFSV\nDOFS0    L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         LA    R0,6\n         L     R1,=A(FSMS)\n         BAS   R7,DOFSMV\n         NI    OPTFS,255-FSSKIP\n         BAS   R7,DOFSTM\n         B     DOFSX\nDOFS1    L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         LA    R0,6\n         L     R1,=A(FSMS)\n         BAS   R7,DOFSMV\n         OI    SWFSW,SWNMS\n         B     DOFSX\nDOFS2    TM    SWFSW,SWNMS\n         BO    *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSGS)\n         BAS   R14,DOFSRZ\n         BAS   R14,DOFSRZ\n         L     R2,DFSTL\n         LA    R3,80\n         LA    R0,6\n         L     R1,=A(FSMS)\n         BAS   R7,DOFSMV+L'DOFSMV\n         L     R1,=A(FSGI)\n         MVC   0(L'FSGI,R1),80(R2)\n         L     R1,=A(FSGT)\n         MVC   0(80,R1),BLANKS\n         MVC   0(L'TLMSG,R1),3*80(R2)\n         OI    SWFSW,SWNMS\n         NI    SWFSW,255-SWHMS\n         B     DOFSX\nDOFS3    TM    SWFSW,SWNMS+SWHMS\n         BNZ   *+L'*+8\n         L     R1,=A(FSMS)\n         BAS   R14,DOFSRZ\n         L     R1,=A(FSGL)\n         CLC   0(80,R1),BLANKS\n         BE    DOFS3A\n         L     R2,=A(FSGS)\n         L     R5,=A(11*80+X'40000000')\n         LA    R3,0(R5)\n         LA    R4,80(R2)\n         MVCL  R2,R4\n         B     DOFS3B\nDOFS3A   L     R1,=A(FSGS)\n         CLC   0(80,R1),BLANKS\n         BE    DOFS3B\n         LA    R1,80(R1)\n         B     DOFS3A+L'DOFS3A\nDOFS3B   L     R2,DFSTL\n         MVC   0(80,R1),0(R2)\n         OC    LIST0+2*4(2*4),LIST0+2*4\n         BZ    *+L'*+8\n         NI    OPTFS,255-FSSKIP\n         B     *+L'*+4\n         OI    OPTFS,FSSKIP\n         BAS   R7,DOFSTM\n         NI    SWFSW,255-SWNMS\n         B     DOFSX\nDOFS4    LA    R0,6\n         L     R1,=A(FSMS)\n         BAS   R7,DOFSMV\n         L     R1,=A(FSGI)\n         MVC   0(L'FSGI,R1),BLANKS\n         OI    SWFSW,SWHMS\n         B     DOFSX\nDOFS5    L     R1,=A(FSGI)\n         MVC   0(L'FSGI,R1),BLANKS\n         LM    R2,R3,DFSTL\n         BCT   R3,*+L'*+6\n         MVC   0(*-*,R1),0(R2)          << EXECUTED >>\n         EX    R3,*-6\n         NI    OPTFS,255-FSSKIP\n         BAS   R7,DOFSTM\n         B     DOFSX\n         SPACE 1\nDOFSRZ   LA    R0,6                          R14 = LINK REGISTER\n         MVC   0(80,R1),BLANKS\n         LA    R1,80(R1)\n         BCT   R0,*-10\n         BR    R14\nDOFSMV   LM    R2,R3,DFSTL                   R7 = LINK REGISTER\nDOFSMV1  CLC   0(80,R1),BLANKS\n         BNE   DOFSMV2\n         CH    R3,=H'80'\n         BNH   DOFSMV3\n         MVC   0(80,R1),0(R2)\n         SH    R3,=H'80'\n         LA    R2,80(R2)\nDOFSMV2  LA    R1,80(R1)\n         BCT   R0,DOFSMV1\n         BR    R7\nDOFSMV3  BCT   R3,*+L'*+6\n         MVC   0(*-*,R1),0(R2)          << EXECUTED >>\n         EX    R3,*-6\n         BR    R7\nDOFSTM   LM    R2,R3,FSCRA                   R7 = LINK REGISTER\n        @FS    OPTFS,(R2),(R3),MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   DOFERR\n         XC    LIST0+4*4(4),LIST0+4*4\n         TM    OPTFS,FSSKIP\n         BOR   R7\n         OC    LIST0+2*4(2*4),LIST0+2*4 NO READ?\n         BZR   R7\n         LM    R2,R3,LIST0+2*4\n         BASR  R4,0\n         LA    R5,C' '\n         SLL   R5,24\n         MVCL  R2,R4\n         LTR   R1,R1\n         BZ    DOFSTM1\n         CLI   0(R1),X'F3'         PF-KEY 3?\n         BE    *+L'*+8\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3)?\n         BNE   DOFSTM1\n         L     R2,LIST0+2*4\n         MVC   0(3,R2),=CL3'END'\n         LA    R2,3\n         ST    R2,LIST0+4*4\n         BR    R7\nDOFSTM1 @FSR   ,\n         LTR   R15,R15\n         BZR   R7\n         LTR   R1,R1\n         BNPR  R7\n         L     R2,LIST0+2*4\nDOFSTM2  OC    0(1,R2),3(R15)\n         CLI   0(R2),C' '\n         BNE   DOFSTM3\n         LA    R15,1(R15)\n         BCT   R1,DOFSTM2\n         BR    R7\nDOFSTM3  LR    R0,R2\n         LA    R2,1(R2)\n         LA    R15,1(R15)\n         BCT   R1,*+L'*+4\n         B     *+L'*+10\n         OC    0(1,R2),3(R15)\n         B     DOFSTM3+L'DOFSTM3\n         SR    R2,R0\n         ST    R2,LIST0+4*4\n         BR    R7\n         SPACE 1\nDOFIMM   MVC   MSWRK(L'ERRMS1),ERRMS1\n         MVC   MSWRK+5(6),=CL6'FSRTNI'\n         CVD   R15,DBLW\n         MVC   MSWRK+19(4),=XL4'40202120'\n         ED    MSWRK+19(4),DBLW+L'DBLW-2\n         LA    R10,4\n         B     DOFSX\nDOFERR   MVC   MSWRK(L'ERRMS2),ERRMS2\n         CVD   R15,DBLW\n         MVC   MSWRK+29(4),=XL4'40202120'\n         ED    MSWRK+29(4),DBLW+L'DBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSWRK+21\n         SRL   R0,4\n         STC   R0,MSWRK+20\n         NC    MSWRK+20(2),=XL2'0F0F'\n         TR    MSWRK+20(2),HEXTB\n         LA    R0,L'ERRMS2\n         B     DOFERX\nDOFVER   MVC   MSWRK(L'DOFMSE),DOFMSE\n         SRL   R7,2\n         CVD   R7,DBLW\n         MVC   MSWRK+21(6),=XL6'402020202120'\n         ED    MSWRK+21(6),DBLW+L'DBLW-3\n         LA    R0,L'DOFMSE\nDOFERX   STH   R0,ERRMSL\n         LA    R10,8\nDOFSX   #XRET  RC=(R10)\nINITRA   DC    A(INITR,*+4,INITRL)\nFSCRA    DC    A(FSCR,*+4,FSCRL)\nDOFMSE   DC    C' => \"DOFS\" - NUMBER = ..... - EXIT -'\n         SPACE 1\n        #XEND  ,\n         SPACE 1\n         DROP  R9,R11,R12          KILL ALL ADDRESSABILITIES\n         EJECT\n*- - - - S C R E E N     D A T A - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nINITR   $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nINITRL   EQU   *-INITR\n         SPACE 1\nFSCR    $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,INT),MF=L\n        $FS    SBA=(1,22),MF=L\n        $FS    TEXT='L U N A R -- LUNAR LANDING SIMULATION',MF=L\n        $FS    SBA=(2,1),SF=(PROT,INT),RA=(2,80,-),MF=L\n        $FS    SF=(PROT),MF=L\nFSGT    $FS    TEXT=(' ',80),MF=L       T -> (3,1)\nFSGS    $FS    TEXT=(' ',80),MF=L       1 -> (4,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6\n        $FS    TEXT=(' ',80),MF=L       7\n        $FS    TEXT=(' ',80),MF=L       8\n        $FS    TEXT=(' ',80),MF=L       9\n        $FS    TEXT=(' ',80),MF=L      10\n        $FS    TEXT=(' ',80),MF=L      11\nFSGL    $FS    TEXT=(' ',80),MF=L      12 -> (15,1)\n        $FS    SF=(PROT,INT),RA=(16,80,=),MF=L\n        $FS    SF=(PROT),MF=L\nFSMS    $FS    TEXT=(' ',80),MF=L       1 -> (17,1)\n        $FS    TEXT=(' ',80),MF=L       2\n        $FS    TEXT=(' ',80),MF=L       3\n        $FS    TEXT=(' ',80),MF=L       4\n        $FS    TEXT=(' ',80),MF=L       5\n        $FS    TEXT=(' ',80),MF=L       6 -> (22,1)\n        $FS    SF=(PROT,INT),MF=L\n        $FS    TEXT='===>',MF=L\n        $FS    SF=NORMAL,MF=L\n        $FS    SBA=(23,20),SF=(PROT),MF=L\nFSGI    $FS    TEXT=(' ',50),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nFSCRL    EQU   *-FSCR\n         EJECT\n*- - - - V A R I A B L E S - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nDATA     DSECT\n         DS    18F                 SAVE AREA\n         DS    18F                 ADDITIONAL SAVE AREA\nDBLW     DS    D\nATSO     EQU   DBLW,4\nEXTR    EXTRACT *-*,'S',MF=L\nLEXTR    EQU   *-EXTR\nSVR14    DS    F\nSVRDP    DS    XL8\nEDWRK    DS    XL8\n$T       DS    F\n$H       DS    F\n$V       DS    F\n$F       DS    F\n$B       DS    F\n$V1      DS    F\n$W1      DS    F\n$W2      DS    F\nERRMSL   DS    H\nFLAGS    DS    XL1                 GENERAL FUNCTIONS\nSCTERM   EQU   X'08'                    SCREEN TERMINAL\nSWFSW    DS    XL1                 SCREEN FUNCTIONS\nSW1ST    EQU   X'10'\nSWNMS    EQU   X'08'\nSWHMS    EQU   X'04'\nLIST0    DS    A         TPUT-TGET LIST +0 = SCREEN ADDRESS\n         DS    F                        +4 = SCREEN TEXT LENGTH\n         DS    A                        +8 = REPLY ADDRESS\n         DS    F                        +12 = MAX. REPLY LENGTH\n         DS    F                        +16 = TRUE REPLY LENGTH\nREPLY    DS    CL80\nWLNE     DS    CL80\nMSWRK    DS    CL80\n         SPACE 1\nDFSTL    DS    2F                  TEXT ADDRESS / LENGTH\nDFSML    DS    2F                  MESSAGE ADDRESS / LENGTH\nFSPARM  @FS    ,,,MF=L\nOPTFS   @FSO   ,\n         SPACE 1\nDATALEN  EQU   (((*-DATA)+7)/8)*8\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LUNAR$": {"ttr": 13578, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//LUNAR    JOB (........),'INSTALL  -LUNAR-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       L U N A R     L A N D I N G     S I M U L A T I O N         *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS2,MBR=LUNAR\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   LUNAR\n  NAME    LUNAR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCANIM": {"ttr": 13580, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x13I\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T13:49:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/*********************************************************************/\n/*       EXECUTE ANIM-DEMO                                           */\n/*       PRE-REQUISITE : DOCP                                        */\n/*********************************************************************/\n         CONTROL MAIN NOMSG\n         DOCP ANIM 'ANIM' LIB('->.USER.DEMO.DATA') NORC\n         SET &RC = &LASTCC\n         IF &RC \u00ac= 0 THEN DO\n           WRITE => ANIM-DEMO RETURN CODE IS &RC <=\n           EXIT CODE(8)\n           END\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCBIRD": {"ttr": 13582, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x13I\\x00\\x07\\x00\\x07\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T13:49:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/*********************************************************************/\n/*       INVOKE  - I L R B I R D -                                   */\n/*       PRE-REQUISITE : DOCP - ERASE - TGTERM                       */\n/*********************************************************************/\n         DOCP ILRBIRD 'ILRBIRD' LIB('->.USER.DEMO.DATA') NORC\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCGDDM": {"ttr": 13825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x13I\\x00<\\x00<\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T13:49:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/*********************************************************************/\n/*       EXECUTE GDDM-DEMO                                           */\n/*       PRE-REQUISITE : DOCP - ERASE - TGTERM                       */\n/*********************************************************************/\n         CONTROL MAIN NOMSG\n         TGTERM\n         IF &LASTCC \u00ac= 0 THEN DO\n           WRITE => SORRY, THIS TERMINAL UNFITS MY NEEDS\n           EXIT CODE(8)\n           END\n         FREE F(FT05F001 FT06F001)\n         ALLOC F(FT05F001) DA(*)\n         IF &LASTCC \u00ac= 0 THEN DO\n           WRITE => FT05F001 ALLOCATION TO TERMINAL FAILED\n           EXIT CODE(8)\n           END\n         ALLOC F(FT06F001) DA(*)\n         IF &LASTCC \u00ac= 0 THEN DO\n           WRITE => FT06F001 ALLOCATION TO TERMINAL FAILED\n           FREE F(FT05F001)\n           EXIT CODE(8)\n           END\nLOOP:    ISPEXEC CONTROL ERRORS RETURN\n         ISPEXEC DISPLAY PANEL(PAJGDDM)\n         SET &CC = &LASTCC\n         IF &CC NE 0 THEN DO\n           IF &CC GT 8 THEN DO\n             SET ZERRSM = &STR(PANEL ERROR)\n             SET ZERRLM = &STR(PANEL DISPLAY FAILED / CC=&CC)\n             ISPEXEC SETMSG MSG(ISRZ002)\n             END\n           ELSE SET &CC = 0\n           ISPEXEC CONTROL ERRORS CANCEL\n           FREE F(FT05F001 FT06F001)\n           CONTROL MSG\n           EXIT CODE(&CC)\n           END\n         ISPEXEC CONTROL ERRORS CANCEL\n         IF (&NN = 1 OR &NN = &Z) THEN DO\n           DOCP LOGO 'LOGO' LIB('->.USER.DEMO.DATA') NORC\n           END\n         IF (&NN = 2 OR &NN = &Z) THEN DO\n           DOCP SHUTTLE 'SHUTTLE' LIB('->.USER.DEMO.DATA') NORC\n           END\n         IF (&NN = 3 OR &NN = &Z) THEN DO\n           DOCP NITEFLT 'NITEFLT' LIB('->.USER.DEMO.DATA') NORC\n           END\n         IF (&NN = 4 OR &NN = &Z) THEN DO\n           DOCP CODEBUST 'CODEBUST' LIB('->.USER.DEMO.DATA') NORC\n           END\n         IF (&NN = 5 OR &NN = &Z) THEN DO\n           DOCP SABREBAT 'SABREBAT' LIB('->.USER.DEMO.DATA') NORC\n           END\n         IF (&NN = 6 OR &NN = &Z) THEN DO\n           DOCP ZOOM 'ZOOM' LIB('->.USER.DEMO.DATA') NORC\n           END\n         ERASE\n         ISPEXEC CONTROL DISPLAY REFRESH\n         GOTO LOOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POKER": {"ttr": 13827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t/\\x00\\x92\\t/\\x15Y\\n\\xc3\\n\\xc3\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1992-04-01T15:59:00", "lines": 2755, "newlines": 2755, "modlines": 0, "user": "SYSPAJA"}, "text": "SMPG     TITLE '--- IBM 3270 DISPLAY - SLOT MACHINE POKER GAME ---'\n         PRINT  OFF\n         MACRO\n&NAME   #CALL  &WHERE\n         AIF   ('&WHERE' NE '').W1\n         MNOTE 8,'--- \"WHERE\" OPERAND MISSING ---'\n         MEXIT\n.W1      AIF   ('&WHERE'(1,1) EQ '(').W2\n&NAME    L     R15,=A(&WHERE)      GET ENTRY POINT\n         AGO   .W3\n.W2      AIF   ('&WHERE' EQ '(15)').W4\n         AIF   ('&WHERE' EQ '(R15)').W4\n&NAME    LR    R15,&WHERE          SET ENTRY POINT\n.W3      BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.W4      ANOP\n&NAME    BASR  R14,R15             GO TO ROUTINE\n         MEND\n         MACRO\n&NAME   #CKBF  &N\n&NAME    LA    R0,&N.(R4)\n         CLR   R0,R5\n         BL    *+L'*+4\n         BAS   R14,BFSHT\n         MEND\n         MACRO\n&LAB    #GTB   &N,&C=YES,&T=YES\n         AIF   ('&N' NE '').N1\n         MNOTE 8,'--- \"NAME\" OPERAND MISSING ---'\n         MEXIT\n.N1      ANOP\n&LAB     DC    A(&N,&N.L)\n         AIF   ('&C' EQ 'YES').C1\n         AIF   ('&C' EQ 'NO').C2\n         MNOTE 8,'--- C=&C INVALID SPECIFICATION ---'\n         MEXIT\n.C1      DC    A(&N.COL)\n         AGO   .C3\n.C2      DC    A(X'80000000')\n.C3      AIF   ('&T' EQ 'YES').T1\n         AIF   ('&T' EQ 'NO').T2\n         MNOTE 8,'--- T=&T INVALID SPECIFICATION ---'\n         MEXIT\n.T1      DC    A(&N.TY1,&N.TY2)\n         AGO   .T3\n.T2      DC    A(X'80000000',X'80000000')\n.T3      DC    A(&N.0,&N.1,&N.2,&N.3,&N.4)\n         DC    A(&N.5,&N.6,&N.7,&N.8)\n         MEND\n         MACRO\n&NAME   #XENT  &DUMMY\n         CNOP  0,8\n&NAME    STM   R14,R12,12(R13)     SAVE REGISTERS\n         B     16(,R15)            BRANCH AROUND ID\n         DC    CL8'&NAME'          IDENTIFIER\n         LR    R8,R15              SET BASE REGISTER\n         USING &NAME,R8            SET ADDRESSABILITY\n         LR    R15,R13             PREVIOUS SAVE AREA\n         LA    R13,18*4(R13)       NEW CURRENT SAVE AREA\n         ST    R13,8(R15)          LINK SAVE AREAS\n         ST    R15,4(R13)\n         SPACE 1\n         MEND\n         MACRO\n&NAME   #XRET  &DUMMY\n&NAME    L     R13,4(R13)          PREVIOUS SAVE AREA\n         XC    16(4,R13),16(R13)   SET RETURN CODE TO ZERO\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATOR\n         BR    R14                 RETURN\n         SPACE 1\n         MEND\n         MACRO\n        #XEND  &DUMMY\n        LTORG  ,                   LITERALS\n         SPACE 1\n         DROP  R8                  END OF LOCAL ADDRESSABILITY\n         MEND\n         PRINT  ON\n         PRINT NOGEN\n         SPACE 1\nPOKER    START 0\n         SPACE 1\n        $DEFREG\nKBYTES   EQU   1024                1K BYTES\nMWBFSZ   EQU   3*KBYTES            MAXIMUM WORK BUFFER SIZE IN BYTES\nMABFSZ   EQU   2*KBYTES            MAXIMUM ALT. BUFFER SIZE IN BYTES\n         SPACE 1\n*        PAY COEFFICIENTS.\n*              NOTE : THE MAXIMUM BET THE PROGRAM CAN ACCEPTED IS FIXED\n*                     AT THE STATEMENTS WITH \"<- - - - MAX.BET\" IN THE\n*                     LAST COLUMNS. THE MAXIMUM YOU CAN CODE IN THE\n*                     PROGRAM IS 999 (OVER REQUIRES CODE MODIFICATION).\n*                     CHANGE OF ANY VALUE BELOW WOULD BE ALSO REPORTED\n*                     IN THE 'HELP' PANEL.\n*              PF12 : TRACE/DEBUG PANEL (ALLOWED TO WIZARD ONLY).\n         SPACE 1\nWINOP    EQU   2                   ONE PAIR\nWINTP    EQU   5                   TWO PAIR\nWINTK    EQU   10                  THREE OF A KIND\nWINST    EQU   15                  STRAIGHT\nWINFS    EQU   20                  FLUSH\nWINFH    EQU   25                  FULL HOUSE\nWINFK    EQU   50                  FOUR OF A KIND (POKER)\nWINSF    EQU   75                  STRAIGHT FLUSH\nWINRF    EQU   100                 ROYAL FLUSH\n         SPACE 1\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        I N I T I A L I Z A T I O N                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $XENT  BASE=R12,LV=LDATA,TYPE=RENT\n         LR    R11,R13\n         USING WDATA,R11\n         LA    R1,SBFFR\n         ST    R1,MBFFR\n         MVC   MBFFR+4(4),=A(MWBFSZ)\n         AL    R1,=A(MWBFSZ)\n         ST    R1,ABFFR\n         MVC   ABFFR+4(4),=A(MABFSZ)\n         ZAP   VLTOT,=PL1'+0'\n         MVI   OPT,FSFULL\n         MVI   SWSEL,SELST\n         MVI   SWFUN,0\n         MVI   SWERR,0\n         MVC   EXTR(EXTRL),EXTRSK\n        EXTRACT ATIOT,'S',FIELDS=(TIOT),MF=(E,EXTR)\n         XR    R1,R1\n         L     R2,ATIOT\n         USING TIODSECT,R2\n         CLC   TIOCNJOB,WIZARD\n         BNE   SCSNAP\n         OI    SWFUN,TRCAV\n         XC    WBMAX(L'WBMAX+L'ABMAX),WBMAX\nSCSNAP   CLC   TIOELNGH(4),=F'0'\n         BE    SCNEND\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP'\n         BE    STSNAP\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SCSNAP\n         DROP  R2\nSTSNAP   OI    OPT,FSSNAP\nSCNEND  @FSI   ,\n         LTR   R10,R15\n         BNZ   XIMM\n         OI    OPT,FSSKIP\n         LM    R2,R3,INITRV\n        @FS    OPT,(R2),(R3),MF=(E,FSPARM)\n         LTR   R10,R15\n         BNZ   XERR\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        M A I N     P R O C E S S                                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nTSCRN    CLI   SWSEL,MXSEL\n         BH    SERR\n         XR    R1,R1\n         IC    R1,SWSEL\n         SLL   R1,2\n         B     DOSEL(R1)\nDOSEL    B     DO0\n         B     DO1\n         B     DO2\n         B     DO3\nMXSEL    EQU   ((*-DOSEL)/L'DOSEL)-1    MAX. VALUE\nDO0     #CALL  DOP0\n         B     SNDSC\nDO1     #CALL  DOP1\n         B     SNDSC\nDO2     #CALL  DOP2\n         LTR   R10,R10\n         BNZ   TSCRN\n         B     SNDSC\nDO3     #CALL  DOP3\nSNDSC    SL    R4,MBFFR\n         ST    R4,MBMSGL\nREPEAT   TM    SWFUN,PFKH\n         BZ    NHLP\n        #CALL  HLP0\n         LTR   R10,R10\n         BNZ   XERR\nNHLP     TM    SWFUN,TRCAV+PFKT\n         BNO   NTRC\n        #CALL  TRC0\n         LTR   R10,R10\n         BNZ   XERR\nNTRC     TM    SWFUN,TSREQ\n         BZ    *+L'*+16\n         CLC   MBMSGL,WBMAX\n         BNH   *+L'*+6\n         MVC   WBMAX,MBMSGL\n         L     R5,MBFFR\n         NI    OPT,255-FSSKIP\n        @FS    OPT,(R5),MBMSGL,MF=(E,FSPARM)\n         LTR   R10,R15\n         BNZ   XERR\n         NI    SWFUN,255-PFKE-PFKH-PFKT\n         LTR   R1,R1\n         BZ    SKPFT\n         CLI   0(R1),X'F1'         PF-KEY 1 ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKH\n         CLI   0(R1),X'C1'         PF-KEY 13 (ALT. 1) ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKH\n         CLI   0(R1),X'F3'         PF-KEY 3 ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKE\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3) ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKE\n         CLI   0(R1),X'7C'         PF-KEY 12 ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKT\n         CLI   0(R1),X'4C'         PF-KEY 24 (ALT. 12) ?\n         BNE   *+L'*+4\n         OI    SWFUN,PFKT\nSKPFT    MVI   RQCMD,C' '\n         MVC   RQCMD+1(L'RQCMD-1),RQCMD\nNXTRQ   @FSR   ,\n         LTR   R15,R15\n         BZ    ANAL\n         LM    R2,R4,=A(TBRQL,TBRQE,TBRQ)\n         CLC   0(3,R15),0(R4)\n         BE    *+L'*+8\n         BXLE  R4,R2,*-10\n         B     NXTRQ\n         ICM   R14,B'1111',3(R4)\n         BR    R14\nARQGET   LTR   R1,R1\n         BNP   NXTRQ\n         LA    R2,L'RQCMD\n         LA    R3,RQCMD\nARQLOOP  OC    0(1,R3),3(R15)\n         BCT   R1,*+L'*+4\n         B     NXTRQ\n         LA    R15,1(R15)\n         CLI   0(R3),C' '\n         BE    ARQLOOP\n         LA    R3,1(R3)\n         BCT   R2,ARQLOOP\n         B     NXTRQ\nHRQGT1   LA    R2,HLDSTR\n         B     HRQGST\nHRQGT2   LA    R2,HLDSTR+1\n         B     HRQGST\nHRQGT3   LA    R2,HLDSTR+2\n         B     HRQGST\nHRQGT4   LA    R2,HLDSTR+3\n         B     HRQGST\nHRQGT5   LA    R2,HLDSTR+4\nHRQGST   MVI   0(R2),C' '\n         LTR   R1,R1\n         BNP   NXTRQ\n         OI    3(R15),C' '\n         CLI   3(R15),C'H'\n         BNE   NXTRQ\n         MVI   0(R2),C'H'\n         B     NXTRQ\nANAL     TM    SWFUN,PFKE\n         BO    XEND\n         TM    SWREQ,BETRQ\n         BZ    ANALF\n         CLI   RQCMD,C'0'\n         BL    ANALF\n         XR    R0,R0\n         XR    R1,R1\n         LA    R2,RQCMD\n         LA    R3,L'RQCMD\n         LA    R4,15\nSCNUM    CLI   0(R2),C'0'\n         BL    STVBT\n         CLI   0(R2),C'9'\n         BH    STVBT\n         IC    R1,0(R2)\n         NR    R1,R4\n         LTR   R0,R0\n         BNP   *+L'*+4\n         MH    R0,=H'10'\n         AR    R0,R1\n         LA    R2,1(R2)\n         BCT   R3,SCNUM\nSTVBT    ST    R0,VLBET\n         B     TSBET\nANALF    LM    R2,R4,=A(TBCMDL,TBCMDE,TBCMD)\nANALN    XR    R1,R1\n         LA    R15,RQCMD\n         EX    R1,ANALC\n         BE    *+L'*+8\n         BXLE  R4,R2,*-8\n         B     CHKBR\n         LA    R0,L'TBCMD\n         LR    R14,R15\nANALS    LA    R14,1(R14)\n         CLI   0(R14),C' '\n         BE    ANALG\n         BCT   R0,*+L'*+4\n         B     CHKBR\n         LA    R1,1(R1)\n         EX    R1,ANALC\n         BE    ANALS\n         BXLE  R4,R2,ANALN\n         B     CHKBR\nANALG    ICM   R14,B'1111',L'TBCMD(R4)\n         BR    R14\nANALC    CLC   0(*-*,R15),0(R4)\nXHELP    OI    SWFUN,PFKH\n         B     CHKBR\nXTRC     OI    SWFUN,PFKT\n         B     CHKBR\nXTST     TM    SWFUN,TRCAV\n         BZ    CHKBR\n         OI    SWFUN,TSREQ\nCHKBR    TM    SWREQ,BETRQ\n         BZ    TSCRN\n         L     R0,VLBET\nTSBET    LTR   R0,R0\n         BNP   REPEAT\n         CH    R0,=H'10'           <- - - - - - - - - - - - - - MAX.BET\n         BH    REPEAT\n         NI    SWREQ,255-BETRQ\n         B     TSCRN\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        T E R M I N A T I O N                                        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nXEND     XR    R10,R10\nQUIT     MVI   OPT,FSEXIT\n        @FS    OPT,MF=(E,FSPARM)\n         LR    R9,R15\n         LTR   R10,R10\n         BZ    NMSG0\n        TPUT   ERRMSG,L'ERRMS1\nNMSG0    TM    SWERR,SHTBF\n         BZ    NMSG1\n        TPUT   ERRMS3,L'ERRMS3\n         MVC   ERRMSG(L'ERRMS3A),ERRMS3A\n         LA    R0,4\n         LA    R1,ERRMSG+8\n         LA    R14,SVRBFS\n         UNPK  0(9,R1),0(5,R14)\n         TR    0(8,R1),HEXTB-X'F0'\n         MVI   8(R1),C' '\n         LA    R1,12(R1)\n         LA    R14,4(R14)\n         BCT   R0,*-24\n        TPUT   ERRMSG,L'ERRMS3A\n         MVC   ERRMSG(L'ERRMS3B),ERRMS3B\n         UNPK  ERRMSG+8(9),MBFFR(5)\n         TR    ERRMSG+8(8),HEXTB-X'F0'\n         MVI   ERRMSG+16,C' '\n         UNPK  ERRMSG+20(9),ABFFR(5)\n         TR    ERRMSG+20(8),HEXTB-X'F0'\n         MVI   ERRMSG+28,C' '\n         ST    R12,ATIOT\n         UNPK  ERRMSG+34(9),ATIOT(5)\n         TR    ERRMSG+34(8),HEXTB-X'F0'\n         MVI   ERRMSG+42,C' '\n        TPUT   ERRMSG,L'ERRMS3B\nNMSG1    TM    SWERR,WHATF\n         BZ    NMSG2\n        TPUT   ERRMS4,L'ERRMS4\nNMSG2    TM    SWERR,SERRF\n         BZ    NMSG3\n        TPUT   ERRMS5,L'ERRMS5\nNMSG3    LTR   R9,R9\n         BZ    LEAVE\n         MVC   ERRMSG(L'ERRMS1),ERRMS1\n         CVD   R9,WORK\n         MVC   ERRMSG+30(4),=XL4'40202120'\n         ED    ERRMSG+30(4),WORK+L'WORK-2\n         XR    R0,R0\n         IC    R0,OPT\n         STC   R0,ERRMSG+22\n         SRL   R0,4\n         STC   R0,ERRMSG+21\n         NC    ERRMSG+21(2),=XL2'0F0F'\n         TR    ERRMSG+21(2),HEXTB\n        TPUT   ERRMSG,L'ERRMS1\nLEAVE    LR    R10,R15\n         LA    R0,SVA              SAVE AREA PERCOLATION\n         CLR   R0,R13\n         BE    *+L'*+8\n         L     R13,4(R13)\n         B     *-10\n         TM    SWFUN,TSREQ\n         BZ    NXTRC\n         MVC   ERRMSG(L'ERRMS6),ERRMS6\n         UNPK  ERRMSG+12(9),WBMAX(5)\n         TR    ERRMSG+12(8),HEXTB-X'F0'\n         MVI   ERRMSG+20,C' '\n         UNPK  ERRMSG+28(9),ABMAX(5)\n         TR    ERRMSG+28(8),HEXTB-X'F0'\n         MVI   ERRMSG+36,C' '\n        TPUT   ERRMSG,L'ERRMS6\nNXTRC   $XRET  CC=(R10),LV=LDATA,TYPE=RENT\nXERR     MVC   ERRMSG(L'ERRMS1),ERRMS1\n         CVD   R10,WORK\n         MVC   ERRMSG+30(4),=XL4'40202120'\n         ED    ERRMSG+30(4),WORK+L'WORK-2\n         XR    R0,R0\n         IC    R0,OPT\n         STC   R0,ERRMSG+22\n         SRL   R0,4\n         STC   R0,ERRMSG+21\n         NC    ERRMSG+21(2),=XL2'0F0F'\n         TR    ERRMSG+21(2),HEXTB\n         B     QUIT\nXIMM     MVC   ERRMSG(L'ERRMS2),ERRMS2\n         CVD   R10,WORK\n         MVC   ERRMSG+20(4),=XL4'40202120'\n         ED    ERRMSG+20(4),WORK+L'WORK-2\n        TPUT   ERRMSG,L'ERRMS2\n         B     LEAVE\nBFSHT    OI    SWERR,SHTBF\n         ST    R0,SVRBFS\n         STM   R4,R5,SVRBFS+4\n         ST    R14,SVRBFS+12\n         B     XEND\nWHAT     OI    SWERR,WHATF\n         B     XEND\nSERR     OI    SWERR,SERRF\n         B     XEND\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        G E N E R A L     R O U T I N E S                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*        MOVE SCREEN ORDERS ROUTINE.\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R2  = FROM ORDERS ADDRESS (AT ENTRY).\n*              R3  = FROM ORDERS LENGTH (AT ENTRY).\n*              R4  = CURRENT BUFFER ADDRESS POINTER / UPDATED.\n*              R5  = MAXIMUM BUFFER ADDRESS VALUE FOR CHECK.\n*              R14 = LINK REGISTER.\n         SPACE 1\nMVSCO    LR    R0,R4\n         ALR   R4,R3\n         CLR   R4,R5\n         BNL   BFSHT\n         LR    R1,R3\n         MVCL  R0,R2\n         BR    R14\n         SPACE 1\n*        GENERATE SET BUFFER ADDRESS ROUTINE.\n*              AT ENTRY : \"RCSBA\" = AL1(ROW,COLUMN)\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R3  = SBA POINTER.\n*              R14 = LINK REGISTER.\n*              R15 = WORK REGISTER.\n         SPACE 1\nGNSBA    XR    R0,R0\n         LR    R1,R0\n         IC    R0,RCSBA+1          COLUMN\n         SH    R0,=H'1'\n         IC    R1,RCSBA            ROW\n         SH    R1,=H'1'\n         BZ    *+L'*+4\n         MH    R1,=H'80'\n         AR    R1,R0\n         LR    R15,R1\n         XR    R0,R0\n         CL    R1,TRSBAM\n         BNL   *+L'*+6\n         XR    R1,R1\n         B     *+L'*+6\n         D     R0,TRSBAM\n         LR    R0,R1\n         MH    R0,TRSBAM+2\n         SR    R15,R0\n         AL    R1,=A(TRSBA)\n         AL    R15,=A(TRSBA)\n         MVC   1(1,R3),0(R1)\n         MVC   2(1,R3),0(R15)\n         BR    R14\n         SPACE 1\n*        BUILD A CARD IMAGE ROUTINE.\n*              AT ENTRY : \"CARD\" = 0-12\n*                         \"COLOR\" = 0-3\n*                         \"RCSBA\" = AL1(*-*,COLUMN)\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R2  = WORK REGISTER.\n*              R3  = WORK REGISTER.\n*              R4  = CURRENT BUFFER ADDRESS POINTER / UPDATED.\n*              R5  = MAXIMUM BUFFER ADDRESS VALUE FOR CHECK.\n*              R6  = WORK REGISTER.\n*              R7  = WORK REGISTER.\n*              R9  = LINK REGISTER.\n*              R14 = INTERNAL LINK REGISTER.\n*              R15 = WORK REGISTER.\n         SPACE 1\nBLDCI    LR    R6,R4\n         XR    R7,R7\n         IC    R7,CARD\n         LTR   R7,R7\n         BNP   *+L'*+4\n         MH    R7,=Y(TTNL)\n         AL    R7,=A(TTN)\n         LM    R2,R3,0(R7)\n         BAS   R14,MVSCO\n         TM    8(R7),X'80'\n         BO    BLDCI1\n         XR    R1,R1\n         IC    R1,COLOR\n         LTR   R1,R1\n         BNP   *+L'*+4\n         MH    R1,=Y(TCNL)\n         AL    R1,=A(TCN)\n         ICM   R2,B'1111',1(R1)\n         LR    R3,R6\n         AL    R3,8(R7)\n         MVC   0(L'TCH,R3),0(R2)\nBLDCI1   TM    12(R7),X'80'\n         BO    BLDCI2\n         LR    R2,R6\n         AL    R2,12(R7)\n         MVC   0(1,R2),0(R1)\nBLDCI2   TM    16(R7),X'80'\n         BO    BLDCI3\n         LR    R2,R6\n         AL    R2,16(R7)\n         MVC   0(1,R2),0(R1)\nBLDCI3   LA    R7,16(R7)\n         MVI   RCSBA,6             FROM LINE 7 UP TO LINE 15 INCLUDED\n         LA    R2,9\nBLDCI4   LA    R7,4(R7)\n         LR    R3,R6\n         AL    R3,0(R7)\n         XR    R1,R1\n         IC    R1,RCSBA\n         LA    R1,1(R1)\n         STC   R1,RCSBA\n         BAS   R14,GNSBA\n         BCT   R2,BLDCI4\n         BR    R9\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        L O C A L     C O N S T A N T S                              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nINITRV   DC    A(INITR,*+4,INITRL)\nWIZARD   DC    CL8'SYSPAJA '\nTRSBA    DC    XL16'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    XL16'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    XL16'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\nTRSBAL   EQU   *-TRSBA\nTRSBAM   DC    A(TRSBAL)\nEXTRSK  EXTRACT *-*,'S',MF=L\nEXTRL    EQU   *-EXTRSK\nHEXTB    DC    CL16'0123456789ABCDEF'\n         SPACE 1\nERRMS1   DC    C' --- \"FSRTN\" - OPT = .. , RC = ... -> EXIT ---'\nERRMS2   DC    C' --- \"FSRTNI\" - RC = ... -> EXIT ---'\nERRMS3   DC    C' --- BUFFER IS TOO SHORT -> EXIT ---'\nERRMS3A  DC    C'     R0=........ R4=........ R5=........ LK=........ '\nERRMS3B  DC    C'     WB=........ AB=........ M-BS=........ '\nERRMS4   DC    C' --- SELECTION FAILURE -> EXIT ---'\nERRMS5   DC    C' --- INVALID PROCESS -> EXIT ---'\nERRMS6   DC    C' --- WB-MAX=........ AB-MAX=........ '\n         SPACE 1\n        LTORG\n         EJECT\nDOP0    #XENT  ,\n         LA    R2,TCRDS\n         LA    R3,10\n         CLI   SHMOD,1\n         BNE   *+L'*+8\n         L     R15,=A(SLTCD)       ALTERNATE SELECTION\n         B     *+L'*+4\n         L     R15,=A(SHUFFLE)     STANDARD SELECTION\n         BASR  R14,R15\n         MVC   CCRDS(5*L'CCRDS),=AL1(13,0,13,0,13,0,13,0,13,0)\n         MVI   SWSEL,SELCD\n         OI    SWREQ,BETRQ\n         XC    VLBET,VLBET\n         XC    VLWIN,VLWIN\n         MVC   HLDSTR,=CL5' '\n         MVC   HLDPRV,=CL5' '\n         MVC   FLWIN,=CL5' '\n         MVC   TCLR,=CL5' '\n         MVC   TCDS,=CL5' '\n         MVI   DCNT1,0\n         MVI   DCNT2,0\n         LM    R0,R1,MBFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,MBFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(STRTR,STRTRL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(STRTX)\n         MVC   EDVAL,=XL20'402020204B2020204B2020204B2020204B202120'\n         ED    EDVAL,VLTOT\n         BM    DOP0SM\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R15))\n         MVC   0(8,R15),=CL8'Credit $'\n         B     DOP0MV\nDOP0SM  $FS    SA=(COLOUR,RED),MF=(E,(R15))\n         MVC   0(8,R15),=CL8' Debit $'\nDOP0MV   MVC   8(20,R15),EDVAL\n         MVC   CARD(L'CCRDS),CCRDS\n         MVI   RCSBA+1,10\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+L'CCRDS\n         MVI   RCSBA+1,23\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+2*L'CCRDS\n         MVI   RCSBA+1,36\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+3*L'CCRDS\n         MVI   RCSBA+1,49\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+4*L'CCRDS\n         MVI   RCSBA+1,62\n         BAS   R9,BLDCI\n         LM    R2,R3,=A(LSTTR,LSTTRL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(LSTTX)\n         MVC   0(20,R15),=CL20' Bet (1$-10$ max.) :'   <- - - - MAX.BET\n         L     R1,4(R13)\n         ST    R4,36(R1)           PASS BACK R4\n        #XRET  ,\n        #XEND  ,\n         EJECT\n*------- SHUFFLE (GENERATE) \"N\" CARDS DECK ... SUBROUTINE\n*              (PSEUDO-RANDOM NUMBER GENERATOR)\n*        AT ENTRY : R2 = ADDRESS OF A \"N\" HALFWORDS VECTOR\n*                   R3 = VALUE OF \"N\"\n*        AT EXIT : ALL VECTOR HALWORDS ARE FILLED WITH AL1(CARD,COLOR)\n*                  WHERE : CARD = 0-12\n*                          COLOR = 0-3\n         SPACE 1\n        CNOP   0,4\n         USING *,R5\nSHUFFLE  STM   R14,R5,12(R13)\n         LR    R5,R15\n         LTR   R3,R3\n         BNP   SHUFFX\n        TIME   MIC,SHUFFW,ZONE=LT  GET \"ELAPSED\" TIME (LOCAL TIME)\n         L     R0,SHUFFW+4\n         SRL   R0,9\n         ST    R0,SHUFFW\n         CL    R3,=F'52'\n         BNH   *+L'*+4\n         L     R3,=F'52'\n         LR    R4,R2\nSHUFF1   L     R1,=A(7*7*7*7*7)\n         M     R0,SHUFFW\n         D     R0,=A(X'7FFFFFFF')\n         ST    R0,SHUFFW\n         SRDL  R0,39\n         D     R0,=F'52'\nSHUFF2   SRDL  R0,2\n         SLL   R0,6\n         SLDL  R0,2\n         LR    R1,R4\nSHUFF3   CLR   R1,R2\n         BE    SHUFF4\n         CLM   R0,B'0011',0(R1)\n         BE    *+L'*+8\n         LA    R1,2(R1)\n         B     SHUFF3\n         SRDL  R0,2\n         SRL   R0,6\n         SLDL  R0,2\n         A     R0,=F'17'\n         C     R0,=F'52'\n         BL    SHUFF2\n         S     R0,=F'52'\n         B     SHUFF2\nSHUFF4   STCM  R0,B'0011',0(R2)\n         LA    R2,2(R2)\n         BCT   R3,SHUFF1\nSHUFFX   LM    R14,R5,12(R13)\n         BR    R14\n         SPACE 1\nSHUFFW   DC    D'0'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R5\n         EJECT\n*------- SELECT (GENERATE) \"N\" CARDS DECK ... SUBROUTINE\n*              (ALTERNATE PSEUDO-RANDOM NUMBER GENERATOR)\n*        AT ENTRY : R2 = ADDRESS OF A \"N\" HALFWORDS VECTOR\n*                   R3 = VALUE OF \"N\"\n*        AT EXIT : ALL VECTOR HALWORDS ARE FILLED WITH AL1(CARD,COLOR)\n*                  WHERE : CARD = 0-12\n*                          COLOR = 0-3\n         SPACE 1\n        CNOP   0,4\n         USING *,R5\nSLTCD    STM   R14,R5,12(R13)\n         LR    R5,R15\n         LTR   R3,R3\n         BNP   SLTCDX\n         CL    R3,=F'52'\n         BNH   *+L'*+4\n         L     R3,=F'52'\n         LR    R4,R2\nSLTCD1  TIME   MIC,SLTCDW,ZONE=LT  GET \"ELAPSED\" TIME (LOCAL TIME)\n         L     R1,SLTCDW+4\n         SRL   R1,9\n         LTR   R1,R1\n         BNP   SLTCD1\n         CL    R1,=F'13'\n         BNH   SLTCD1\n         XR    R0,R0\n         D     R0,=F'13'\n         SLL   R0,8\n         N     R1,=A(X'00000003')\n         OR    R0,R1\n         LR    R1,R4\nSLTCD2   CLR   R1,R2\n         BE    SLTCD3\n         CLM   R0,B'0011',0(R1)\n         BE    SLTCD1\n         LA    R1,2(R1)\n         B     SLTCD2\nSLTCD3   STCM  R0,B'0011',0(R2)\n         LA    R2,2(R2)\n         BCT   R3,SLTCD1\nSLTCDX   LM    R14,R5,12(R13)\n         BR    R14\n         SPACE 1\nSLTCDW   DC    D'0'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R5\n         EJECT\nDOP1    #XENT  ,\n         MVC   CCRDS(5*L'CCRDS),TCRDS\n         MVI   SWSEL,SELHD\n         MVC   HLDPRV,=CL5'HHHHH'\n         LM    R0,R1,MBFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,MBFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(STRTR,STRTRL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(STRTX)\n         MVC   EDVAL,=XL20'402020204B2020204B2020204B2020204B202120'\n         ED    EDVAL,VLTOT\n         BM    DOP1SM\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R15))\n         MVC   0(8,R15),=CL8'Credit $'\n         B     DOP1MV\nDOP1SM  $FS    SA=(COLOUR,RED),MF=(E,(R15))\n         MVC   0(8,R15),=CL8' Debit $'\nDOP1MV   MVC   8(20,R15),EDVAL\n         MVC   CARD(L'CCRDS),CCRDS\n         MVI   RCSBA+1,10\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+L'CCRDS\n         MVI   RCSBA+1,23\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+2*L'CCRDS\n         MVI   RCSBA+1,36\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+3*L'CCRDS\n         MVI   RCSBA+1,49\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+4*L'CCRDS\n         MVI   RCSBA+1,62\n         BAS   R9,BLDCI\n        #CKBF  17\n        $FS    SBA=(17,11),SF=(MDT),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,PINK),MF=(E,(R4))\n        $FS    TEXT='HOLD',MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,24),SF=(MDT),MF=(E,(R4))\n        $FS    TEXT='HOLD',MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,37),SF=(MDT),MF=(E,(R4))\n        $FS    TEXT='HOLD',MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,50),SF=(MDT),MF=(E,(R4))\n        $FS    TEXT='HOLD',MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,63),SF=(MDT),MF=(E,(R4))\n        $FS    TEXT='HOLD',MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTR,LSTTIL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(LSTTX)\n         MVC   0(20,R15),=CL20'Select your HOLD''s :'\n        #CKBF  11\n        $FS    SBA=(22,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,PINK),MF=(E,(R4))\n        #CKBF  29\n        $FS    TEXT='You are playing for a bet of ',MF=(E,(R4))\n        #CKBF  13\n        $FS    SA=(COLOUR,TURQ),MF=(E,(R4))\n         MVC   0(8,R4),=XL8'5B40202120404F40'\n         L     R0,VLBET\n         CVD   R0,WORK\n         ED    1(4,R4),WORK+L'WORK-2\n         CLI   2(R4),C' '\n         BNE   *+L'*+10\n         MVC   2(5,R4),3(R4)\n         B     *-14\n         LA    R4,1(R4)\n         CLI   0(R4),C'|'\n         BNE   *-8\n         LA    R4,2(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTI,LSTTRL-LSTTIL)\n         BAS   R14,MVSCO\n         L     R1,4(R13)\n         ST    R4,36(R1)           PASS BACK R4\n        #XRET  ,\n        #XEND  ,\n         EJECT\nDOP2    #XENT  ,\n         CLC   HLDPRV,HLDSTR\n         BNE   *+L'*+12\n         MVI   SWSEL,SELNX\n         LA    R10,4\n         B     DOP2X\n         MVI   SWSEL,SELHD\n         MVC   HLDPRV,HLDSTR\n         LM    R0,R1,MBFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,MBFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(STRTR,STRTRL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(STRTX)\n         MVC   EDVAL,=XL20'402020204B2020204B2020204B2020204B202120'\n         ED    EDVAL,VLTOT\n         BM    DOP2SM\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R15))\n         MVC   0(8,R15),=CL8'Credit $'\n         B     DOP2MV\nDOP2SM  $FS    SA=(COLOUR,RED),MF=(E,(R15))\n         MVC   0(8,R15),=CL8' Debit $'\nDOP2MV   MVC   8(20,R15),EDVAL\n         CLI   HLDSTR,C' '\n         BE    *+L'*+10\n         MVC   CARD(L'CCRDS),CCRDS\n         B     *+L'*+6\n         MVC   CARD(L'CCRDS),=AL1(13,0)\n         MVI   RCSBA+1,10\n         BAS   R9,BLDCI\n         CLI   HLDSTR+1,C' '\n         BE    *+L'*+10\n         MVC   CARD(L'CCRDS),CCRDS+L'CCRDS\n         B     *+L'*+6\n         MVC   CARD(L'CCRDS),=AL1(13,0)\n         MVI   RCSBA+1,23\n         BAS   R9,BLDCI\n         CLI   HLDSTR+2,C' '\n         BE    *+L'*+10\n         MVC   CARD(L'CCRDS),CCRDS+2*L'CCRDS\n         B     *+L'*+6\n         MVC   CARD(L'CCRDS),=AL1(13,0)\n         MVI   RCSBA+1,36\n         BAS   R9,BLDCI\n         CLI   HLDSTR+3,C' '\n         BE    *+L'*+10\n         MVC   CARD(L'CCRDS),CCRDS+3*L'CCRDS\n         B     *+L'*+6\n         MVC   CARD(L'CCRDS),=AL1(13,0)\n         MVI   RCSBA+1,49\n         BAS   R9,BLDCI\n         CLI   HLDSTR+4,C' '\n         BE    *+L'*+10\n         MVC   CARD(L'CCRDS),CCRDS+4*L'CCRDS\n         B     *+L'*+6\n         MVC   CARD(L'CCRDS),=AL1(13,0)\n         MVI   RCSBA+1,62\n         BAS   R9,BLDCI\n        #CKBF  17\n        $FS    SBA=(17,11),SF=(MDT),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n         CLI   HLDSTR,C' '\n         BE    DOP2A\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP2B\nDOP2A   $FS    TEXT='    ',MF=(E,(R4))\nDOP2B   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,24),SF=(MDT),MF=(E,(R4))\n         CLI   HLDSTR+1,C' '\n         BE    DOP2C\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP2D\nDOP2C   $FS    TEXT='    ',MF=(E,(R4))\nDOP2D   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,37),SF=(MDT),MF=(E,(R4))\n         CLI   HLDSTR+2,C' '\n         BE    DOP2E\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP2F\nDOP2E   $FS    TEXT='    ',MF=(E,(R4))\nDOP2F   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,50),SF=(MDT),MF=(E,(R4))\n         CLI   HLDSTR+3,C' '\n         BE    DOP2G\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP2H\nDOP2G   $FS    TEXT='    ',MF=(E,(R4))\nDOP2H   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,63),SF=(MDT),MF=(E,(R4))\n         CLI   HLDSTR+4,C' '\n         BE    DOP2I\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP2J\nDOP2I   $FS    TEXT='    ',MF=(E,(R4))\nDOP2J   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTR,LSTTIL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(LSTTX)\n         MVC   0(20,R15),=CL20'Let''s go or change :'\n        #CKBF  11\n        $FS    SBA=(22,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,PINK),MF=(E,(R4))\n        #CKBF  29\n        $FS    TEXT='You are playing for a bet of ',MF=(E,(R4))\n        #CKBF  13\n        $FS    SA=(COLOUR,TURQ),MF=(E,(R4))\n         MVC   0(8,R4),=XL8'5B40202120404F40'\n         L     R0,VLBET\n         CVD   R0,WORK\n         ED    1(4,R4),WORK+L'WORK-2\n         CLI   2(R4),C' '\n         BNE   *+L'*+10\n         MVC   2(5,R4),3(R4)\n         B     *-14\n         LA    R4,1(R4)\n         CLI   0(R4),C'|'\n         BNE   *-8\n         LA    R4,2(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTI,LSTTRL-LSTTIL)\n         BAS   R14,MVSCO\n         XR    R10,R10\nDOP2X    L     R1,4(R13)\n         ST    R4,36(R1)           PASS BACK R4\n         ST    R10,60(R1)          PASS BACK R10\n        #XRET  ,\n        #XEND  ,\n         EJECT\nDOP3    #XENT  ,\n         MVI   SWSEL,SELST\n         LA    R5,1\n         LA    R0,L'HLDSTR\n         LA    R1,HLDSTR\n         LA    R2,TCDS\n         LA    R3,TCLR\n         LA    R14,CCRDS\n         LA    R15,TCRDS+5*L'TCRDS\nDOP3SCL  CLI   0(R1),C' '\n         BNE   *+L'*+10\n         MVC   0(L'CCRDS,R14),0(R15)\n         LA    R15,L'TCRDS(R15)\n         MVC   0(1,R2),0(R14)\n         CLI   0(R2),0             \"TCDS\" - CHANGE 0 TO 13\n         BNE   *+L'*+4                      RETAIN 1-12\n         MVI   0(R2),13\n         MVC   0(1,R3),1(R14)\n         LA    R14,L'CCRDS(R14)\n         ALR   R3,R5\n         ALR   R2,R5\n         ALR   R1,R5\n         BCT   R0,DOP3SCL\n        #CALL  DOC0\n         XR    R0,R0\n         L     R1,VLBET\n         L     R15,VLWIN\n         LTR   R15,R15\n         BNP   *+L'*+2\n         MR    R0,R15\n         CVD   R1,WORK\n         LTR   R15,R15\n         BNP   *+L'*+10\n         AP    VLTOT,WORK+4(4)\n         B     *+L'*+6\n         SP    VLTOT,WORK+4(4)\n         LM    R0,R1,MBFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,MBFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(STRTR,STRTRL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(STRTX)\n         MVC   EDVAL,=XL20'402020204B2020204B2020204B2020204B202120'\n         ED    EDVAL,VLTOT\n         BM    DOP3SM\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R15))\n         MVC   0(8,R15),=CL8'Credit $'\n         B     DOP3MV\nDOP3SM  $FS    SA=(COLOUR,RED),MF=(E,(R15))\n         MVC   0(8,R15),=CL8' Debit $'\nDOP3MV   MVC   8(20,R15),EDVAL\n         MVC   CARD(L'CCRDS),CCRDS\n         MVI   RCSBA+1,10\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+L'CCRDS\n         MVI   RCSBA+1,23\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+2*L'CCRDS\n         MVI   RCSBA+1,36\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+3*L'CCRDS\n         MVI   RCSBA+1,49\n         BAS   R9,BLDCI\n         MVC   CARD(L'CCRDS),CCRDS+4*L'CCRDS\n         MVI   RCSBA+1,62\n         BAS   R9,BLDCI\n         CLI   FLWIN,C'*'\n         BNE   DOP3A\n        #CKBF  18\n        PRINT  GEN\n        $FS    SBA=(16,12),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n        $FS    RA=(16,16,GE,8A),MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        PRINT  NOGEN\nDOP3A    CLI   FLWIN+1,C'*'\n         BNE   DOP3B\n        #CKBF  18\n        $FS    SBA=(16,25),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n        $FS    RA=(16,29,GE,8A),MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\nDOP3B    CLI   FLWIN+2,C'*'\n         BNE   DOP3C\n        #CKBF  18\n        $FS    SBA=(16,38),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n        $FS    RA=(16,42,GE,8A),MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\nDOP3C    CLI   FLWIN+3,C'*'\n         BNE   DOP3D\n        #CKBF  18\n        $FS    SBA=(16,51),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n        $FS    RA=(16,55,GE,8A),MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\nDOP3D    CLI   FLWIN+4,C'*'\n         BNE   DOP3E\n        #CKBF  18\n        $FS    SBA=(16,64),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n        $FS    RA=(16,68,GE,8A),MF=(E,(R4))\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\nDOP3E   #CKBF  17\n        $FS    SBA=(17,11),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n         CLI   HLDSTR,C' '\n         BE    DOP3F\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP3G\nDOP3F   $FS    TEXT='    ',MF=(E,(R4))\nDOP3G   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,24),SF=(PROT,SKIP),MF=(E,(R4))\n         CLI   HLDSTR+1,C' '\n         BE    DOP3H\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP3I\nDOP3H   $FS    TEXT='    ',MF=(E,(R4))\nDOP3I   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,37),SF=(PROT,SKIP),MF=(E,(R4))\n         CLI   HLDSTR+2,C' '\n         BE    DOP3J\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP3K\nDOP3J   $FS    TEXT='    ',MF=(E,(R4))\nDOP3K   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,50),SF=(PROT,SKIP),MF=(E,(R4))\n         CLI   HLDSTR+3,C' '\n         BE    DOP3L\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP3M\nDOP3L   $FS    TEXT='    ',MF=(E,(R4))\nDOP3M   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  11\n        $FS    SBA=(17,63),SF=(PROT,SKIP),MF=(E,(R4))\n         CLI   HLDSTR+4,C' '\n         BE    DOP3N\n        $FS    TEXT='HELD',MF=(E,(R4))\n         B     DOP3O\nDOP3N   $FS    TEXT='    ',MF=(E,(R4))\nDOP3O   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTR,LSTTIL)\n         LR    R15,R4\n         BAS   R14,MVSCO\n         AL    R15,=A(LSTTX)\n         MVC   0(20,R15),=CL20'Another try or END :'\n        #CKBF  11\n        $FS    SBA=(22,1),SF=(PROT,SKIP),MF=(E,(R4))\n         OC    VLWIN,VLWIN\n         BZ    DOP3P\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        #CKBF  50+L'WLMSG\n        $FS    TEXT='Bravo | You have won (',MF=(E,(R4))\n         MVC   0(L'WLMSG,R4),WLMSG\n         LA    R4,L'WLMSG(R4)\n         BCTR  R4,0\n         CLI   0(R4),C' '\n         BE    *-6\n         MVC   1(12,R4),=CL12' - You gain '\n         LA    R4,13(R4)\n        $FS    SA=(COLOUR,TURQ),MF=(E,(R4))\n         MVC   0(12,R4),=XL12'5B4020202020202120404F40'\n         ED    1(8,R4),WORK+4\n         CLI   2(R4),C' '\n         BNE   *+L'*+10\n         MVC   2(9,R4),3(R4)\n         B     *-14\n         LA    R4,1(R4)\n         CLI   0(R4),C'|'\n         BNE   *-8\n         LA    R4,2(R4)\n         B     DOP3Q\nDOP3P   $FS    SA=(HILITE,BLINK),MF=(E,(R4))\n        $FS    SA=(COLOUR,RED),MF=(E,(R4))\n        #CKBF  50\n        $FS    TEXT='Sorry | You have lost (none) ',MF=(E,(R4))\n        $FS    TEXT='- Bye-bye your ',MF=(E,(R4))\n         MVC   0(8,R4),=XL8'5B40202120404F40'\n         L     R0,VLBET\n         CVD   R0,WORK\n         ED    1(4,R4),WORK+L'WORK-2\n         CLI   2(R4),C' '\n         BNE   *+L'*+10\n         MVC   2(5,R4),3(R4)\n         B     *-14\n         LA    R4,1(R4)\n         CLI   0(R4),C'|'\n         BNE   *-8\n         LA    R4,2(R4)\nDOP3Q   $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         LM    R2,R3,=A(LSTTI,LSTTRL-LSTTIL)\n         BAS   R14,MVSCO\n         L     R1,4(R13)\n         ST    R4,36(R1)           PASS BACK R4\n        #XRET  ,\n        #XEND  ,\n         EJECT\nDOC0    #XENT  ,\n         XR    R0,R0\n         LR    R10,R0\n         LA    R1,L'TCDS-1         SORT ASCENDING CARDS VALUES\n         LA    R2,TCDS\nDOC0SR1  LR    R3,R1\n         LA    R4,1(R2)\nDOC0SR2  CLC   0(1,R2),0(R4)\n         BNH   DOC0SR3\n         IC    R0,0(R2)\n         MVC   0(1,R2),0(R4)\n         STC   R0,0(R4)\nDOC0SR3  LA    R4,1(R4)\n         BCT   R3,DOC0SR2\n         LA    R2,1(R2)\n         BCT   R1,DOC0SR1\n         IC    R1,TCDS             CHECK FOR SCALED CARDS VALUES\n         LA    R2,L'TCDS\n         LA    R3,TCDS\n         EX    R1,*+L'*+20\n         BNE   *+L'*+20\n         LA    R1,1(R1)\n         LA    R3,1(R3)\n         BCT   R2,*-16\n         B     DOC0SC\n         CLI   0(R3),*-*\n         CLC   TCDS,=AL1(1,2,3,4,13)\n         BE    DOC0SC\n         CLC   TCLR,=AL1(0,0,0,0,0)     CHECK CARDS COLORS EQUALS\n         BE    DOC0FS\n         CLC   TCLR,=AL1(1,1,1,1,1)\n         BE    DOC0FS\n         CLC   TCLR,=AL1(2,2,2,2,2)\n         BE    DOC0FS\n         CLC   TCLR,=AL1(3,3,3,3,3)\n         BE    DOC0FS\n         XR    R14,R14             CHECK NUMBER OF EQUALS\n         XR    R15,R15\n         LA    R1,L'TCDS-1\n         LA    R2,TCDS\nDOC0CN1  CLC   0(1,R2),1(R2)\n         BE    *+L'*+10\n         LTR   R14,R14\n         BP    DOC0CN2\n         B     *+L'*+8\n         ST    R2,TKPTR\n         LA    R14,1(R14)\n         LA    R2,1(R2)\n         BCT   R1,DOC0CN1\n         B     DOC0CN3\nDOC0CN2  LA    R2,1(R2)\n         BCT   R1,*+L'*+4\n         B     DOC0CN3\n         CLC   0(1,R2),1(R2)\n         BNE   DOC0CN2\n         LA    R15,1(R15)\n         B     DOC0CN2\nDOC0CN3  CLR   R14,R15\n         BNL   *+L'*+6\n         XR    R14,R15\n         XR    R15,R14\n         XR    R14,R15\n         STC   R14,DCNT1\n         STC   R15,DCNT2\n         SLL   R14,2\n         B     *+L'*(R14)\n         B     DOC0X\n         B     DOC0T2\n         B     DOC0T3\n         B     DOC0FK\nDOC0T3   SLL   R15,2\n         B     *+L'*(R15)\n         B     DOC0TK\n         B     DOC0FH\nDOC0T2   SLL   R15,2\n         B     *+L'*(R15)\n         B     *+L'*+4\n         B     DOC0TP\n         L     R2,TKPTR\n         CLI   0(R2),9\n         BH    DOC0OP\n         B     DOC0X\nDOC0SC   CLC   TCLR,=AL1(0,0,0,0,0)     CHECK CARDS COLORS EQUALS\n         BE    DOC0SC1\n         CLC   TCLR,=AL1(1,1,1,1,1)\n         BE    DOC0SC1\n         CLC   TCLR,=AL1(2,2,2,2,2)\n         BE    DOC0SC1\n         CLC   TCLR,=AL1(3,3,3,3,3)\n         BNE   DOC0ST\nDOC0SC1  CLI   TCDS+L'TCDS-1,13\n         BNE   DOC0SF\n         CLI   TCDS+L'TCDS-2,12\n         BE    DOC0RF\nDOC0SF   LA    R10,WINSF           STRAIGHT FLUSH\n         MVC   WLMSG,=CL20'straight flush)'\n         MVC   FLWIN,=CL5'*****'\n         B     DOC0X\nDOC0RF   LA    R10,WINRF           ROYAL FLUSH\n         MVC   WLMSG,=CL20'royal flush)'\n         MVC   FLWIN,=CL5'*****'\n         B     DOC0X\nDOC0FK   LA    R10,WINFK           FOUR OF A KIND (POKER)\n         MVC   WLMSG,=CL20'four of a kind)'\n         CLC   CCRDS(1),CCRDS+L'CCRDS\n         BE    *+L'*+10\n         CLC   CCRDS(1),CCRDS+2*L'CCRDS\n         BNE   *+L'*+8\n         LA    R15,CCRDS\n         B     *+L'*+4\n         LA    R15,CCRDS+L'CCRDS\n         LA    R0,5\n         LA    R1,CCRDS\n         LA    R14,FLWIN\nDOC0FK1  CLC   0(1,R1),0(R15)\n         BNE   *+L'*+4\n         MVI   0(R14),C'*'\n         LA    R14,1(R14)\n         LA    R1,L'CCRDS(R1)\n         BCT   R0,DOC0FK1\n         B     DOC0X\nDOC0FH   LA    R10,WINFH           FULL HOUSE\n         MVC   WLMSG,=CL20'full house)'\n         MVC   FLWIN,=CL5'*****'\n         B     DOC0X\nDOC0FS   LA    R10,WINFS           FLUSH\n         MVC   WLMSG,=CL20'flush)'\n         MVC   FLWIN,=CL5'*****'\n         B     DOC0X\nDOC0ST   LA    R10,WINST           STRAIGHT\n         MVC   WLMSG,=CL20'straight)'\n         MVC   FLWIN,=CL5'*****'\n         B     DOC0X\nDOC0TK   LA    R10,WINTK           THREE OF A KIND\n         MVC   WLMSG,=CL20'three of a kind)'\n         LA    R0,4\n         LA    R1,CCRDS\nDOC0TK1  LR    R14,R0\n         LA    R15,L'CCRDS(R1)\nDOC0TK2  CLC   0(1,R1),0(R15)\n         BE    DOC0TK3\n         LA    R15,L'CCRDS(R15)\n         BCT   R14,DOC0TK2\n         LA    R1,L'CCRDS(R1)\n         BCT   R0,DOC0TK1\nDOC0TK3  LA    R0,5\n         LA    R1,CCRDS\n         LA    R14,FLWIN\nDOC0TK4  CLC   0(1,R1),0(R15)\n         BNE   *+L'*+4\n         MVI   0(R14),C'*'\n         LA    R14,1(R14)\n         LA    R1,L'CCRDS(R1)\n         BCT   R0,DOC0TK4\n         B     DOC0X\nDOC0TP   LA    R10,WINTP           TWO PAIR\n         MVC   WLMSG,=CL20'two pair)'\n         LA    R14,5\n         LA    R15,CCRDS\nDOC0TP1  LA    R0,5\n         LA    R1,CCRDS\nDOC0TP2  CLR   R1,R15\n         BE    *+L'*+10\n         CLC   0(1,R1),0(R15)\n         BE    DOC0TP3\n         LA    R1,L'CCRDS(R1)\n         BCT   R0,DOC0TP2\n         B     DOC0TP4\nDOC0TP3  LA    R15,L'CCRDS(R15)\n         BCT   R14,DOC0TP1\nDOC0TP4  LA    R0,CCRDS\n         LA    R14,FLWIN\n         SLR   R15,R0\n         SRL   R15,1\n         ALR   R15,R14\n         MVC   FLWIN,=CL5'*****'\n         MVI   0(R15),C' '\n         B     DOC0X\nDOC0OP   LA    R10,WINOP           ONE PAIR\n         MVC   WLMSG,=CL20'one pair)'\n         LA    R0,4\n         LA    R1,CCRDS\nDOC0OP1  CLI   0(R1),0             A\n         BE    DOC0OP2\n         CLI   0(R1),10            J\n         BE    DOC0OP2\n         CLI   0(R1),11            Q\n         BE    DOC0OP2\n         CLI   0(R1),12            K\n         BNE   DOC0OP4\nDOC0OP2  LR    R14,R0\n         LA    R15,L'CCRDS(R1)\nDOC0OP3  CLC   0(1,R1),0(R15)\n         BE    DOC0OP5\n         LA    R15,L'CCRDS(R15)\n         BCT   R14,DOC0OP3\nDOC0OP4  LA    R1,L'CCRDS(R1)\n         BCT   R0,DOC0OP1\nDOC0OP5  LA    R0,CCRDS\n         LA    R14,FLWIN\n         SLR   R1,R0\n         SRL   R1,1\n         ALR   R1,R14\n         MVI   0(R1),C'*'\n         SLR   R15,R0\n         SRL   R15,1\n         ALR   R15,R14\n         MVI   0(R15),C'*'\nDOC0X    ST    R10,VLWIN\n        #XRET  ,\n        #XEND  ,\n         EJECT\nTRC0    #XENT  ,\nTRC0R    LM    R0,R1,ABFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,ABFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(TRCST,TRCSTL)\n         BAS   R14,MVSCO\n        #CKBF  33+L'HLDPRV\n        $FS    SBA=(5,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT='Previous state : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(L'HLDPRV,R4),HLDPRV\n         LA    R0,L'HLDPRV\n         LR    R1,R4\n         ALR   R4,R0\n         CLI   0(R1),C'H'\n         BE    *+L'*+4\n         MVI   0(R1),C'-'\n         LA    R1,1(R1)\n         BCT   R0,*-16\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  34+L'SHMOD\n        $FS    SBA=(5,41),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT='   Shuffle mode : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(L'SHMOD,R4),SHMOD\n         OI    0(R4),C'0'\n         LA    R4,L'SHMOD(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  33+L'HLDSTR\n        $FS    SBA=(6,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT=' Current state : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(L'HLDSTR,R4),HLDSTR\n         LA    R0,L'HLDSTR\n         LR    R1,R4\n         ALR   R4,R0\n         CLI   0(R1),C'H'\n         BE    *+L'*+4\n         MVI   0(R1),C'-'\n         LA    R1,1(R1)\n         BCT   R0,*-16\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  40\n        $FS    SBA=(8,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,PINK),MF=(E,(R4))\n        $FS    TEXT='Selection : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n        $FS    TEXT='Initial ===> ',MF=(E,(R4))\n        #CKBF  2+5*14\n         LA    R0,5\n         LA    R1,TCRDS\n         BAS   R9,TRC0L\n        #CKBF  10+10*L'TCRDS\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n         MVI   0(R4),C'('\n         UNPK  1(6*L'TCRDS+1,R4),TCRDS(3*L'TCRDS+1)\n         UNPK  1+6*L'TCRDS(4*L'TCRDS+1,R4),TCRDS+3*L'TCRDS(2*L'TCRDS+1)\n         TR    1(10*L'TCRDS,R4),HEXTB-X'F0'\n         MVI   1+10*L'TCRDS(R4),C')'\n         LA    R4,2+10*L'TCRDS(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  24\n        $FS    SBA=(9,13),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n        $FS    TEXT='Replace ===> ',MF=(E,(R4))\n        #CKBF  2+5*14\n         LA    R0,5\n         LA    R1,TCRDS+5*L'TCRDS\n         BAS   R9,TRC0L\n        #CKBF  10+10*L'TCRDS\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n         MVI   0(R4),C'('\n         UNPK  1(6*L'TCRDS+1,R4),TCRDS+5*L'TCRDS(3*L'TCRDS+1)\n         UNPK  1+6*L'TCRDS(4*L'TCRDS+1,R4),TCRDS+8*L'TCRDS(2*L'TCRDS+1)\n         TR    1(10*L'TCRDS,R4),HEXTB-X'F0'\n         MVI   1+10*L'TCRDS(R4),C')'\n         LA    R4,2+10*L'TCRDS(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         CLC   TCLR(L'TCLR),=CL5' '\n         BE    TRC0NN\n        #CKBF  28\n        $FS    SBA=(11,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT=' Colours state : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n        #CKBF  5+3*L'TCLR\n         MVC   0(L'TCLR,R4),TCLR\n         MVI   0+L'TCLR(R4),C' '\n         MVI   1+L'TCLR(R4),C'('\n         UNPK  2+L'TCLR(2*L'TCLR+1,R4),TCLR(L'TCLR+1)\n         TR    2+L'TCLR(2*L'TCLR,R4),HEXTB-X'F0'\n         MVI   2+3*L'TCLR(R4),C')'\n         TR    0(L'TCLR,R4),=CL4'HDCS'\n         LA    R4,3+3*L'TCLR(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  30\n        $FS    SBA=(11,50),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT=' 1st count : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(1,R4),DCNT1\n         OI    0(R4),C'0'\n         LA    R4,1(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  31\n        $FS    SBA=(12,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT='    Kind state : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n        #CKBF  5+3*L'TCDS\n         MVC   0(L'TCDS,R4),TCDS\n         MVI   0+L'TCDS(R4),C' '\n         MVI   1+L'TCDS(R4),C'('\n         UNPK  2+L'TCDS(2*L'TCDS+1,R4),TCDS(L'TCDS+1)\n         TR    2+L'TCDS(2*L'TCDS,R4),HEXTB-X'F0'\n         MVI   2+3*L'TCDS(R4),C')'\n         TR    0(L'TCDS,R4),=CL14'?234567890JQKA'\n         LA    R4,3+3*L'TCDS(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  30\n        $FS    SBA=(12,50),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT=' 2nd count : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(1,R4),DCNT2\n         OI    0(R4),C'0'\n         LA    R4,1(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  32\n        $FS    SBA=(14,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,PINK),MF=(E,(R4))\n        $FS    TEXT='Final selection : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n        #CKBF  2+5*14\n         LA    R0,5\n         LA    R1,CCRDS\n         BAS   R9,TRC0L\n        #CKBF  10+10*L'CCRDS\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n         MVI   0(R4),C'('\n         UNPK  1(6*L'CCRDS+1,R4),CCRDS(3*L'CCRDS+1)\n         UNPK  1+6*L'CCRDS(4*L'CCRDS+1,R4),CCRDS+3*L'CCRDS(2*L'CCRDS+1)\n         TR    1(10*L'CCRDS,R4),HEXTB-X'F0'\n         MVI   1+10*L'CCRDS(R4),C')'\n         LA    R4,2+10*L'CCRDS(R4)\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n        #CKBF  34+L'FLWIN\n        $FS    SBA=(15,1),SF=(PROT,SKIP),MF=(E,(R4))\n        $FS    SA=(HILITE,DEFAULT),MF=(E,(R4))\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n        $FS    TEXT=' Win sel. state : ',MF=(E,(R4))\n        $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\n         MVC   0(L'FLWIN,R4),FLWIN\n         LA    R0,L'FLWIN\n         LR    R1,R4\n         ALR   R4,R0\n         CLI   0(R1),C'*'\n         BE    *+L'*+4\n         MVI   0(R1),C'-'\n         LA    R1,1(R1)\n         BCT   R0,*-16\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\nTRC0NN   LM    R2,R3,=A(TRCLS,TRCLSL)\n         BAS   R14,MVSCO\n         L     R5,ABFFR\n         SLR   R4,R5\n         ST    R4,ABMSGL\n         TM    SWFUN,TSREQ\n         BZ    *+L'*+16\n         CLC   ABMSGL,ABMAX\n         BNH   *+L'*+6\n         MVC   ABMAX,ABMSGL\n         NI    OPT,255-FSSKIP\n        @FS    OPT,(R5),ABMSGL,MF=(E,FSPARM)\n         LTR   R10,R15\n         BNZ   TRC0X\n         CLI   0(R1),X'F3'         PF-KEY 3 ?\n         BE    TRC0X\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3) ?\n         BE    TRC0X\n        @FSR   ,\n         LTR   R15,R15\n         BZ    TRC0R\n         LTR   R1,R1\n         BNP   TRC0R\n         CLI   3(R15),C'0'\n         BNE   *+L'*+8\n         MVI   SHMOD,0\n         B     TRC0R\n         CLI   3(R15),C'1'\n         BNE   *+L'*+8\n         MVI   SHMOD,1\n         B     TRC0R\n         OI    3(R15),C' '\n         CLI   3(R15),C'E'\n         BNE   TRC0R\n         XR    R10,R10\nTRC0X    L     R1,4(R13)\n         ST    R10,60(R1)          PASS BACK R10\n        #XRET  ,\n         SPACE 1\n*        DISPLAY SELECTED CARDS ROUTINE.\n*              AT ENTRY : VECTOR OF ELEMENTS = AL1(CARD,COLOR,...,...)\n*                         VECTOR MAY BE \"TCRDS\" OR \"CCRDS\"\n*              R0  = NUMBER OF ELEMENTS.\n*              R1  = START ADDRESS OF ELEMENTS.\n*              R4  = BUFFER POINTER.\n*              R9  = LINK REGISTER.\n         SPACE 1\nTRC0L   $FS    SA=(COLOUR,WHITE),MF=(E,(R4))\n         MVC   1(1,R4),0(R1)\n         TR    1(1,R4),=CL13'A234567890JQK'\n         CLI   1(R4),C'0'\n         BNE   *+L'*+4\n         MVI   0(R4),C'1'\n         LA    R4,2(R4)\n        $FS    SA=(COLOUR,BLUE),MF=(E,(R4))\n         MVI   0(R4),C'-'\n         LA    R4,1(R4)\n         CLI   1(R1),0\n         BNE   TRC0LA\n        $FS    SA=(COLOUR,RED),MF=(E,(R4))\n         B     TRC0LD\nTRC0LA   CLI   1(R1),1\n         BNE   TRC0LB\n        $FS    SA=(COLOUR,YELLOW),MF=(E,(R4))\n         B     TRC0LD\nTRC0LB   CLI   1(R1),2\n         BNE   TRC0LC\n        $FS    SA=(COLOUR,TURQ),MF=(E,(R4))\n         B     TRC0LD\nTRC0LC  $FS    SA=(COLOUR,GREEN),MF=(E,(R4))\nTRC0LD   MVC   0(1,R4),1(R1)\n         TR    0(1,R4),=CL4'HDCS'\n         LA    R4,2(R4)\n         LA    R1,L'CARD+L'COLOR(R1)\n         BCT   R0,TRC0L\n        $FS    SF=(PROT,SKIP),MF=(E,(R4))\n         BR    R9\n         SPACE 1\n        #XEND  ,\n         EJECT\nHLP0    #XENT  ,\nHLP0R    LM    R0,R1,ABFFR\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R4,R5,ABFFR\n         ALR   R5,R4\n         LM    R2,R3,=A(HLPST,HLPSTL)\n         BAS   R14,MVSCO\n         L     R5,ABFFR\n         SLR   R4,R5\n         ST    R4,ABMSGL\n         TM    SWFUN,TSREQ\n         BZ    *+L'*+16\n         CLC   ABMSGL,ABMAX\n         BNH   *+L'*+6\n         MVC   ABMAX,ABMSGL\n         L     R5,ABFFR\n         NI    OPT,255-FSSKIP\n        @FS    OPT,(R5),ABMSGL,MF=(E,FSPARM)\n         LTR   R10,R15\n         BNZ   HLP0X\n         CLI   0(R1),X'F3'         PF-KEY 3 ?\n         BE    HLP0X\n         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3) ?\n         BE    HLP0X\n        @FSR   ,\n         LTR   R15,R15\n         BZ    HLP0R\n         LTR   R1,R1\n         BNP   HLP0R\n         OI    3(R15),C' '\n         CLI   3(R15),C'E'\n         BNE   HLP0R\n         XR    R10,R10\nHLP0X    L     R1,4(R13)\n         ST    R10,60(R1)          PASS BACK R10\n        #XRET  ,\n        #XEND  ,\n         EJECT\n         DROP  R11                 KILL DSECT ADDRESSABILITY\n         DROP  R12                 KILL MAIN ADDRESSABILITY\n         SPACE 1\nTBRQ    $FS    SBA=(19,23),MF=L\n         DC    AL4(ARQGET)\nTBRQL    EQU   *-TBRQ\n        $FS    SBA=(17,12),MF=L\n         DC    AL4(HRQGT1)\n        $FS    SBA=(17,25),MF=L\n         DC    AL4(HRQGT2)\n        $FS    SBA=(17,38),MF=L\n         DC    AL4(HRQGT3)\n        $FS    SBA=(17,51),MF=L\n         DC    AL4(HRQGT4)\n        $FS    SBA=(17,64),MF=L\n         DC    AL4(HRQGT5)\nTBRQE    EQU   *-TBRQL\n         SPACE 1\nTBCMD    DC    CL8'END     ',AL4(XEND)\nTBCMDL   EQU   *-TBCMD\n         DC    CL8'STOP    ',AL4(XEND)\n         DC    CL8'HELP    ',AL4(XHELP)\n         DC    CL8'?       ',AL4(XHELP)\n         DC    CL8'TEST    ',AL4(XTST)\n         DC    CL8'TRACE   ',AL4(XTRC)\nTBCMDE   EQU   *-TBCMDL\n         SPACE 1\nINITR   $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nINITRL   EQU   *-INITR\n         SPACE 1\nSTRTR   $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,77),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(2,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(2,77),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(3,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(3,77),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(4,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(5,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(7,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(17,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(17,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(19,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(19,43),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C5),MF=L\n        $FS    RA=(1,18,GE,A2),SET=(GE,D5),MF=L\n        $FS    SBA=(1,45),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C5),MF=L\n        $FS    RA=(1,76,GE,A2),SET=(GE,D5),MF=L\n        $FS    SBA=(2,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(2,8),SA=(COLOUR,PINK),TEXT='P O K E R',MF=L\n        $FS    SBA=(2,18),SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(2,45),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(2,47),MF=L\nSTRTX    EQU   *-STRTR\n        $FS    SA=(COLOUR,DEFAULT),TEXT=(' ',28),MF=L\n        $FS    SBA=(2,76),SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(3,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C4),MF=L\n        $FS    RA=(3,18,GE,A2),SET=(GE,D4),MF=L\n        $FS    SBA=(3,45),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C4),MF=L\n        $FS    RA=(3,76,GE,A2),SET=(GE,D4),MF=L\n        $FS    SBA=(5,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT='Legend : ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT='H',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='Heart',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='D',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='Diamond',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='C',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='Club',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='S',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='Spade',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SBA=(6,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),RA=(7,1,GE,A2),MF=L\nSTRTRL   EQU   *-STRTR\n         SPACE 1\nLSTTR   $FS    SBA=(18,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),RA=(19,1,GE,A2),MF=L\n        $FS    SBA=(19,2),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\nLSTTX    EQU   *-LSTTR\n        $FS    TEXT=(' ',20),MF=L\n        $FS    SFE=(ATTR,NORMAL,HILITE,USCORE,COLOUR,BLUE),MF=L\n        $FS    SBA=(20,1),SF=(PROT,SKIP),MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='PF-key 1 or 13 = ',MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='Help',MF=L\n        $FS    SBA=(20,41),SF=(PROT,SKIP),MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='PF-key 3 or 15 = ',MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='End or Stop',MF=L\nLSTTIL   EQU   *-LSTTR\nLSTTI   $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLSTTRL   EQU   *-LSTTR\n         SPACE 1\nHLPST   $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(2,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(3,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(4,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(4,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(5,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(7,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(16,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(18,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(18,8),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C5),MF=L\n        $FS    RA=(1,18,GE,A2),SET=(GE,D5),MF=L\n        $FS    SBA=(2,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(2,8),SA=(COLOUR,PINK),TEXT='R U L E S',MF=L\n        $FS    SBA=(2,18),SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(3,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C4),MF=L\n        $FS    RA=(3,18,GE,A2),SET=(GE,D4),MF=L\n        $FS    SBA=(5,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT='Legend : ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT='H',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='Heart',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='D',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='Diamond',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='C',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='Club',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' / ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='S',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' = ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='Spade',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SBA=(6,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),RA=(7,1,GE,A2),MF=L\n        $FS    SBA=(7,2),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,PINK),MF=L\n        $FS    TEXT='I pay ',MF=L\n        $FS    SA=(COLOUR,TURQ),MF=L\n        $FS    TEXT='n',MF=L\n        $FS    SA=(COLOUR,PINK),MF=L\n        $FS    TEXT=' times your bet as below :',MF=L\n        $FS    SBA=(8,5),SA=(COLOUR,TURQ),MF=L\n        $FS    TEXT='n ',MF=L\n        $FS    SA=(COLOUR,PINK),MF=L\n        $FS    TEXT='=',MF=L\n        $FS    SBA=(8,9),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='100',MF=L\n        $FS    SBA=(8,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> royal flush. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='A',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='K',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='Q',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='J',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='10',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(9,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='75',MF=L\n        $FS    SBA=(9,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> straight flush. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='A',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='2',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='3',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='4',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='5',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(10,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='50',MF=L\n        $FS    SBA=(10,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> four of a kind (poker). ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='J',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='J',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='J',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='J',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='4',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(11,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='25',MF=L\n        $FS    SBA=(11,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> full house. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='8',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='8',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='8',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='2',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='2',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(12,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='20',MF=L\n        $FS    SBA=(12,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> flush. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='A',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='Q',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='7',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='5',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='2',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(13,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='15',MF=L\n        $FS    SBA=(13,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> straight. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='9',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='8',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='7',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='6',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='5',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(14,10),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='10',MF=L\n        $FS    SBA=(14,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> three of a kind. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='K',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='K',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='K',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='9',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='3',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(15,11),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='5',MF=L\n        $FS    SBA=(15,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> two pair. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='A',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='7',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='7',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='4',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='4',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(16,11),SA=(COLOUR,WHITE),MF=L\n        $FS    TEXT='2',MF=L\n        $FS    SBA=(16,13),SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='-> one pair of J, Q, K or A only. ',MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='I.e. : ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='Q',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='Q',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT='9',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,RED),TEXT='5',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT='3',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,DEFAULT),TEXT=' ',MF=L\n        $FS    SBA=(17,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),RA=(18,1,GE,A2),MF=L\n        $FS    SBA=(18,2),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='===>',MF=L\n        $FS    SFE=(ATTR,NORMAL,HILITE,USCORE,COLOUR,RED),MF=L\n        $FS    SBA=(18,9),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='(Enter \"E\" or use PF-key 3 or 15 to go back)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nHLPSTL   EQU   *-HLPST\n         SPACE 1\nTRCST   $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(2,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(3,19),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(4,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(17,80),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(19,1),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(19,8),SF=(PROT,SKIP),MF=L\n        $FS    SBA=(1,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C5),MF=L\n        $FS    RA=(1,18,GE,A2),SET=(GE,D5),MF=L\n        $FS    SBA=(2,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(2,8),SA=(COLOUR,PINK),TEXT='T R A C E',MF=L\n        $FS    SBA=(2,18),SA=(COLOUR,WHITE),SET=(GE,85),MF=L\n        $FS    SBA=(3,5),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,WHITE),SET=(GE,C4),MF=L\n        $FS    RA=(3,18,GE,A2),SET=(GE,D4),MF=L\nTRCSTL   EQU   *-TRCST\n        SPACE  1\nTRCLS   $FS    SBA=(18,1),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),RA=(19,1,GE,A2),MF=L\n        $FS    SBA=(19,2),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,GREEN),MF=L\n        $FS    TEXT='===>',MF=L\n        $FS    SFE=(ATTR,NORMAL,HILITE,USCORE,COLOUR,RED),MF=L\n        $FS    SBA=(19,9),SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,BLUE),MF=L\n        $FS    TEXT='(Enter 0 or 1 (change mode) or ',MF=L\n        $FS    TEXT='\"E\" or use PF-key 3 or 15 to go back)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nTRCLSL   EQU   *-TRCLS\n         SPACE 1\nTCN      DC    CL1'H',AL4(TCH)          0 - HEART\nTCNL     EQU   *-TCN\n         DC    CL1'D',AL4(TCD)          1 - DIAMOND\n         DC    CL1'C',AL4(TCC)          2 - CLUB\n         DC    CL1'S',AL4(TCS)          3 - SPADE\n         SPACE 1\nTCH     $FS    SA=(COLOUR,RED),MF=L\nTCD     $FS    SA=(COLOUR,YELLOW),MF=L\nTCC     $FS    SA=(COLOUR,TURQ),MF=L\nTCS     $FS    SA=(COLOUR,GREEN),MF=L\n         EJECT\nTTN     #GTB   ACE                  0 - ACE\nTTNL     EQU   *-TTN\n        #GTB   TWO                  1 - TWO\n        #GTB   THREE                2 - THREE\n        #GTB   FOUR                 3 - FOUR\n        #GTB   FIVE                 4 - FIVE\n        #GTB   SIX                  5 - SIX\n        #GTB   SEVEN                6 - SEVEN\n        #GTB   EIGHT                7 - EIGHT\n        #GTB   NINE                 8 - NINE\n        #GTB   TEN                  9 - TEN\n        #GTB   JACK                10 - JACK\n        #GTB   QUEEN               11 - QUEEN\n        #GTB   KING                12 - KING\n        #GTB   BACKW,C=NO,T=NO     13 - BACKWARD SIDE OF CARD\n         SPACE 1\nACE     $FS    SBA=(1,1),MF=L\nACE0     EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nACECOL   EQU   *-ACE\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nACETY1   EQU   *+2-ACE\n        $FS    TEXT='A ?      ',MF=L\nACE1     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE2     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE3     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE4     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='  A C E  ',MF=L\nACE5     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE6     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE7     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nACE8     EQU   *-ACE\n        $FS    SBA=(1,1),TEXT='      A ?',MF=L\nACETY2   EQU   *-1-ACE\nACEL     EQU   *-ACE\n         SPACE 1\nTWO     $FS    SBA=(1,1),MF=L\nTWO0     EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nTWOCOL   EQU   *-TWO\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nTWOTY1   EQU   *+2-TWO\n        $FS    TEXT='2 ?      ',MF=L\nTWO1     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTWO2     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nTWO3     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTWO4     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTWO5     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTWO6     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nTWO7     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTWO8     EQU   *-TWO\n        $FS    SBA=(1,1),TEXT='      2 ?',MF=L\nTWOTY2   EQU   *-1-TWO\nTWOL     EQU   *-TWO\n         SPACE 1\nTHREE   $FS    SBA=(1,1),MF=L\nTHREE0   EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nTHREECOL EQU   *-THREE\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nTHREETY1 EQU   *+2-THREE\n        $FS    TEXT='3 ?      ',MF=L\nTHREE1   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTHREE2   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nTHREE3   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTHREE4   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nTHREE5   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTHREE6   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nTHREE7   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTHREE8   EQU   *-THREE\n        $FS    SBA=(1,1),TEXT='      3 ?',MF=L\nTHREETY2 EQU   *-1-THREE\nTHREEL   EQU   *-THREE\n         SPACE 1\nFOUR    $FS    SBA=(1,1),MF=L\nFOUR0    EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nFOURCOL  EQU   *-FOUR\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nFOURTY1  EQU   *+2-FOUR\n        $FS    TEXT='4 ?      ',MF=L\nFOUR1    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFOUR2    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nFOUR3    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFOUR4    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFOUR5    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFOUR6    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nFOUR7    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFOUR8    EQU   *-FOUR\n        $FS    SBA=(1,1),TEXT='      4 ?',MF=L\nFOURTY2  EQU   *-1-FOUR\nFOURL    EQU   *-FOUR\n         SPACE 1\nFIVE    $FS    SBA=(1,1),MF=L\nFIVE0    EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nFIVECOL  EQU   *-FIVE\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nFIVETY1  EQU   *+2-FIVE\n        $FS    TEXT='5 ?      ',MF=L\nFIVE1    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFIVE2    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nFIVE3    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFIVE4    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nFIVE5    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFIVE6    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nFIVE7    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nFIVE8    EQU   *-FIVE\n        $FS    SBA=(1,1),TEXT='      5 ?',MF=L\nFIVETY2  EQU   *-1-FIVE\nFIVEL    EQU   *-FIVE\n         SPACE 1\nSIX     $FS    SBA=(1,1),MF=L\nSIX0     EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nSIXCOL   EQU   *-SIX\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nSIXTY1   EQU   *+2-SIX\n        $FS    TEXT='6 ?      ',MF=L\nSIX1     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSIX2     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSIX3     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSIX4     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSIX5     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSIX6     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSIX7     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSIX8     EQU   *-SIX\n        $FS    SBA=(1,1),TEXT='      6 ?',MF=L\nSIXTY2   EQU   *-1-SIX\nSIXL     EQU   *-SIX\n         SPACE 1\nSEVEN   $FS    SBA=(1,1),MF=L\nSEVEN0   EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nSEVENCOL EQU   *-SEVEN\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nSEVENTY1 EQU   *+2-SEVEN\n        $FS    TEXT='7 ?      ',MF=L\nSEVEN1   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSEVEN2   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSEVEN3   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nSEVEN4   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSEVEN5   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSEVEN6   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nSEVEN7   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nSEVEN8   EQU   *-SEVEN\n        $FS    SBA=(1,1),TEXT='      7 ?',MF=L\nSEVENTY2 EQU   *-1-SEVEN\nSEVENL   EQU   *-SEVEN\n         SPACE 1\nEIGHT   $FS    SBA=(1,1),MF=L\nEIGHT0   EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nEIGHTCOL EQU   *-EIGHT\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nEIGHTTY1 EQU   *+2-EIGHT\n        $FS    TEXT='8 ?      ',MF=L\nEIGHT1   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nEIGHT2   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nEIGHT3   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nEIGHT4   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nEIGHT5   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nEIGHT6   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nEIGHT7   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nEIGHT8   EQU   *-EIGHT\n        $FS    SBA=(1,1),TEXT='      8 ?',MF=L\nEIGHTTY2 EQU   *-1-EIGHT\nEIGHTL   EQU   *-EIGHT\n         SPACE 1\nNINE    $FS    SBA=(1,1),MF=L\nNINE0    EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nNINECOL  EQU   *-NINE\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nNINETY1  EQU   *+2-NINE\n        $FS    TEXT='9 ?      ',MF=L\nNINE1    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nNINE2    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nNINE3    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='    ',SET=(GE,C3),MF=L\n        $FS    TEXT='    ',MF=L\nNINE4    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nNINE5    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nNINE6    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nNINE7    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nNINE8    EQU   *-NINE\n        $FS    SBA=(1,1),TEXT='      9 ?',MF=L\nNINETY2  EQU   *-1-NINE\nNINEL    EQU   *-NINE\n         SPACE 1\nTEN     $FS    SBA=(1,1),MF=L\nTEN0     EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nTENCOL   EQU   *-TEN\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nTENTY1 EQU     *+3-TEN\n        $FS    TEXT='10 ?     ',MF=L\nTEN1     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTEN2     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nTEN3     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nTEN4     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nTEN5     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nTEN6     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='  ',SET=(GE,C3),MF=L\n        $FS    TEXT='   ',SET=(GE,C3),MF=L\n        $FS    TEXT='  ',MF=L\nTEN7     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nTEN8     EQU   *-TEN\n        $FS    SBA=(1,1),TEXT='     10 ?',MF=L\nTENTY2   EQU   *-1-TEN\nTENL     EQU   *-TEN\n         SPACE 1\nJACK    $FS    SBA=(1,1),MF=L\nJACK0    EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nJACKCOL  EQU   *-JACK\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nJACKTY1  EQU   *+2-JACK\n        $FS    TEXT='J ?      ',MF=L\nJACK1    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK2    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK3    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK4    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='  JACK   ',MF=L\nJACK5    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK6    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK7    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nJACK8    EQU   *-JACK\n        $FS    SBA=(1,1),TEXT='      J ?',MF=L\nJACKTY2  EQU   *-1-JACK\nJACKL    EQU   *-JACK\n         SPACE 1\nQUEEN   $FS    SBA=(1,1),MF=L\nQUEEN0   EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nQUEENCOL EQU   *-QUEEN\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nQUEENTY1 EQU   *+2-QUEEN\n        $FS    TEXT='Q ?      ',MF=L\nQUEEN1   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN2   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN3   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN4   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='  QUEEN  ',MF=L\nQUEEN5   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN6   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN7   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nQUEEN8   EQU   *-QUEEN\n        $FS    SBA=(1,1),TEXT='      Q ?',MF=L\nQUEENTY2 EQU   *-1-QUEEN\nQUEENL   EQU   *-QUEEN\n         SPACE 1\nKING    $FS    SBA=(1,1),MF=L\nKING0    EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\nKINGCOL  EQU   *-KING\n        $FS    SA=(COLOUR,DEFAULT),MF=L\nKINGTY1  EQU   *+2-KING\n        $FS    TEXT='K ?      ',MF=L\nKING1    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING2    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING3    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING4    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='  KING   ',MF=L\nKING5    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING6    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING7    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='         ',MF=L\nKING8    EQU   *-KING\n        $FS    SBA=(1,1),TEXT='      K ?',MF=L\nKINGTY2  EQU   *-1-KING\nKINGL    EQU   *-KING\n         SPACE 1\nBACKW   $FS    SBA=(1,1),MF=L\nBACKW0   EQU   0\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\nBACKW1   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\nBACKW2   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\nBACKW3   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\nBACKW4   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(HILITE,DEFAULT),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT='POKER',MF=L\n        $FS    SA=(HILITE,REVERSE),MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\nBACKW5   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\nBACKW6   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\nBACKW7   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\nBACKW8   EQU   *-BACKW\n        $FS    SBA=(1,1),MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,RED),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,WHITE),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,PINK),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,TURQ),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,GREEN),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,YELLOW),TEXT=' ',MF=L\n        $FS    SA=(COLOUR,BLUE),TEXT=' ',MF=L\nBACKWL   EQU   *-BACKW\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        W O R K - A R E A S     D S E C T                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWDATA    DSECT\n         SPACE 1\nSVA      DS    18F                 SAVE AREA\n         DS    18F                 ADDITIONAL SAVE AREA(s)\n         DS    18F                   ...\n         DS    18F                   ...\nWORK     DS    D\nSVRBFS   DS    4A\nEXTR     DS    (EXTRL)X\nATIOT    DS    A\nWBMAX    DS    F\nABMAX    DS    F\nMBFFR    DS    2A\nMBMSGL   DS    A\nABFFR    DS    2A\nABMSGL   DS    A\nVLBET    DS    A\nVLWIN    DS    A\nTKPTR    DS    A\nVLTOT    DS    PL8\nCCRDS    DS    5H                  FIVE TIMES AL1(CARD,COLOR)\nTCRDS    DS    10H                 TEN TIMES AL1(CARD,COLOR)\nRCSBA    DS    2AL1                (ROW,COLUMN)\nCARD     DS    AL1                 (0-12)\nCOLOR    DS    AL1                 (0-3)\nEDVAL    DS    CL20\nRQCMD    DS    CL20\nWLMSG    DS    CL20\nHLDSTR   DS    CL5\nHLDPRV   DS    CL5\nFLWIN    DS    CL5\nTCLR     DS    XL5\nTCDS     DS    XL5\nDCNT1    DS    XL1\nDCNT2    DS    XL1\nSWSEL    DS    XL1\nSELST    EQU   0                   SELECT STATUS\nSELCD    EQU   1                   SELECT CARDS\nSELHD    EQU   2                   SELECT HOLDS\nSELNX    EQU   3                   SELECT NEXT\nSWREQ    DS    XL1\nBETRQ    EQU   X'80'               BET REQUEST\nSWFUN    DS    XL1\nTRCAV    EQU   X'80'               TRACE AVAILABLE\nTSREQ    EQU   X'40'               TEST REQUESTED\nPFKE     EQU   X'08'               END REQUESTED\nPFKH     EQU   X'04'               HELP REQUESTED\nPFKT     EQU   X'02'               TRACE REQUESTED\nSWERR    DS    XL1\nSHTBF    EQU   X'80'               BUFFER TOO SHORT\nWHATF    EQU   X'40'               SELECTION FAILURE\nSERRF    EQU   X'20'               INVALID PROCESS\nSHMOD    DS    AL1                 0 = DEFAULT / 1 = ALTERNATE\nOPT     @FSO   ,\nFSPARM  @FS    ,,,MF=L\n         SPACE 1\nERRMSG   DS    80C                 BUILD MESSAGE AREA\n         SPACE 1\n         DS    0F                  END OF WORK-AREAS\nSBFFR    DS    (MWBFSZ)X           WORK BUFFER\n         DS    (MABFSZ)X           ALTERNATE BUFFER\nLDATA    EQU   *-SVA               TOTAL LENGTH\n         SPACE 2\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "POKER$": {"ttr": 14855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//POKER    JOB (........),'INSTALL  -POKER-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1000K,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*           IBM 3270 DISPLAY - SLOT MACHINE POKER GAME              *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=POKER\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   POKER\n  NAME    POKER(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEIKO": {"ttr": 14857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x12o\\x00\\x94\\x12o\\tV\\x06\\x04\\x06\\x04\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-06T00:00:00", "modifydate": "1994-05-06T09:56:00", "lines": 1540, "newlines": 1540, "modlines": 0, "user": "SYSPAJA"}, "text": "SK       TITLE 'SEIKO - FULL SCREEN DISPLAY CLOCK TIME.'\n        PRINT  OFF\n         MACRO\n&LAB    @GTB\n         LCLA  &I,&L,&M,&N,&N1,&N2,&N3,&N4\n         LCLB  &SW\n         LCLC  &C1,&C2\n&N       SETA  N'&SYSLIST\n         AIF   (&N EQ 11).A\n         MNOTE 8,'--- WRONG NUMBER OF OPERAND(S) : MUST BE 11 ---'\n         MEXIT\n.A       ANOP\n&I       SETA  1\n&SW      SETB  0\n.LOOP    ANOP\n&L       SETA  K'&SYSLIST(&I)\n         AIF   (&L EQ 11).B\n         MNOTE 8,'--- WRONG LENGTH OPERAND &I : MUST BE 9 ---'\n         MEXIT\n.B       AIF   ('&SYSLIST(&I)'(1,1) EQ '''').C\n         MNOTE 8,'--- OPERAND &I : STARTING QUOTE MISSING ---'\n         MEXIT\n.C       AIF   ('&SYSLIST(&I)'(&L,1) EQ '''').D\n         MNOTE 8,'--- OPERAND &I : ENDING QUOTE MISSING ---'\n         MEXIT\n.D       ANOP\n&L       SETA  1\n&M       SETA  2\n&N1      SETA  0\n&N2      SETA  0\n&N3      SETA  0\n&N4      SETA  0\n&C1      SETC  ' '\n&C2      SETC  ' '\n.E       AIF   ('&SYSLIST(&I)'(&M,1) NE ' ').F\n&L       SETA  &L+1\n&M       SETA  &M+1\n         AIF   (&M LT 11).E\n         AGO   .GEN\n.F       ANOP\n&N1      SETA  &L\n&C1      SETC  '&SYSLIST(&I)'(&M,1)\n.G       ANOP\n&N2      SETA  &N2+1\n&L       SETA  &L+1\n&M       SETA  &M+1\n         AIF   (&M EQ 11).GEN\n         AIF   ('&SYSLIST(&I)'(&M,1) NE ' ').G\n.H       ANOP\n&L       SETA  &L+1\n&M       SETA  &M+1\n         AIF   (&M EQ 11).GEN\n         AIF   ('&SYSLIST(&I)'(&M,1) EQ ' ').H\n&N3      SETA  &L\n&C2      SETC  '&SYSLIST(&I)'(&M,1)\n.I       ANOP\n&N4      SETA  &N4+1\n&L       SETA  &L+1\n&M       SETA  &M+1\n         AIF   (&M EQ 11).GEN\n         AIF   ('&SYSLIST(&I)'(&M,1) NE ' ').I\n.GEN     AIF   (&SW).OTH\n&LAB     DC    AL1(&N1,&N2,&N3,&N4),CL2'&C1&C2'\n&SW      SETB  1\n         AGO   .NXT\n.OTH     DC    AL1(&N1,&N2,&N3,&N4),CL2'&C1&C2'\n.NXT     ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &N).LOOP\n         DC    AL1(255)\n         MEND\n        PRINT  ON\n         SPACE 1\nSEIKO    START 0\n         SPACE 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  PURPOSE :   FULL SCREEN DISPLAY CLOCK TIME (TSO COMMAND).          *\n*  ---------                                                          *\n*                                                                     *\n*  COMMAND :   SYNTAX : SEIKO INTERVAL(...)                           *\n*  ---------       OR : SEIKO I(...)                                  *\n*              WHERE ... IS THE INTERVAL TIME EXPRESSED IN SECONDS    *\n*              (MAY RANGE FROM 1 UP TO 60). THE DEFAULT VALUE IS 1    *\n*              (EVERY SECONDS).                                       *\n*                                                                     *\n*  AUTHOR :    RAVARANI N. - MOINIL P.A.                              *\n*  --------    COMPUTING CENTRE (TP 361)                              *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n*-------------------------------------------------------------------- *\n         SPACE 1\n        $DEFREG\nSCBUFL   EQU   4*1024              SCREEN BUFFER LENGTH\n         EJECT\n        $XENT  BASE=(R11,R12),LV=WRKL,TYPE=RENT\n         LR    R10,R13             SET WORK AREAS ADDRESSABILITY\n         USING WRKDSECT,R10\n        $TEW$EC NOTTSO=(,ONLY),MSG=PUTMSG,ERR=SETRC\n        $TEW$PP PARM=PARMLST,REG=R3\n         LA    R1,100              SET DEFAULT INTERVAL (1 SEC)\n         CLI   PDIN+1,0            INTERVAL SPECIFIED ?\n         BE    DEFLT               NO\n         TM    SDIN+6,X'80'        VALUE PRESENT ?\n         BZ    DEFLT               NO\n         LH    R14,SDIN+4          GET LENGTH\n         LTR   R14,R14             LENGTH ZERO ?\n         BNP   DEFLT               YES\n         L     R1,SDIN             POINT TO VALUE\n         BCT   R14,*+L'*+6\n         PACK  CONV,0(0,R1)        << EXECUTED >>\n         EX    R14,*-6\n         CVB   R1,CONV             GET BINARY VALUE\n         CH    R1,=H'60'           VALID INTERVAL REQUESTED ?\n         BH    INVREQ              NO\n         MH    R1,=H'100'          COMPUTE WAIT VALUE\nDEFLT    ST    R1,INTVAL           SET WAIT INTERVAL\n         DROP  R3\n        IKJRLSA #TSANSW\n         SPACE 1\n*------- CHECK CALLER TERMINAL.\n         SPACE 1\n         XC    SZLINE(L'SZLINE+L'SZSCRN),SZLINE\n         MVI   SWITCH,0\n        GTSIZE ,                   GET ORIGINAL SCREEN SIZE\n         LTR   R0,R0               IS IT A SCREEN ?\n         BZ    NOTSCR              IF ZERO, NOT A SCREEN\n         CH    R0,=H'24'           STANDARD NUMBER OF LINES ?\n         BL    NOTSTD              LESS\n         BE    TSTLNL              YES\n         CH    R1,=H'80'           STANDARD LINE LENGTH ?\n         BL    NOTSTD              LESS\nSETSSZ   ST    R0,SZSCRN           SAVE SCREEN SIZE\n         ST    R1,SZLINE           SAVE LINE SIZE\n         OI    SWITCH,SCRST        INDICATE SCREEN SIZE TO BE SET\n         B     GO\nTSTLNL   CH    R1,=H'80'           STANDARD LINE LENGTH ?\n         BL    NOTSTD              LESS\n         BH    SETSSZ              MORE\n         SPACE 1\n*------- START SCREEN PROCESSING.\n         SPACE 1\nGO      $GFDATE TITDTE,TITTIM+2,MF=(L,GFDTEL)\n         MVI   DITYNU,0\n        STFSMODE ON,INITIAL=YES\n         TM    SWITCH,SCRST        SCREEN SIZE TO SET\n         BZ    STPCOFF             NO\n        STSIZE SIZE=80,LINE=24     SET STANDARD SCREEN SIZE\n         OI    SWITCH,SCRRS        INDICATE SCREEN SIZE TO BE RESET\nSTPCOFF  NI    SWITCH,255-SCREC\n         MVC   OSFRQ(LSF),OSFN\nRSTRT    XR    R1,R1\n         IC    R1,DITYNU\n         SLL   R1,2\n         AL    R1,=A(LSTB)\n         MVC   ADDTB(L'ADDTB),0(R1)\n         LA    R1,FULLSC\n         L     R0,=A(FULLSCL)\n         MVC   0(256,R1),FULLSCP\n         MVC   256(FULLSCL-256,R1),FULLSCP+256\n         AL    R1,=A(FULLSCL)\n         TM    SWITCH,SCREC\n         BO    RSCON\n         MVC   0(CMDNTL,R1),CMDNT\n         AL    R1,=A(CMDNTL)\n         AL    R0,=A(CMDNTL)\n         B     RSPTR\nRSCON    MVC   0(CMDSTL,R1),CMDST\n         AL    R1,=A(CMDSTL)\n         AL    R0,=A(CMDSTL)\nRSPTR    STM   R0,R1,SCBSLG\n         XC    PRVDTE,PRVDTE\n         XC    PRVTIM,PRVTIM\n         NI    SWITCH,255-SCRPI    RESET PRESERVE INPUT\n         SPACE 1\n*------- GET DATE AND CLOCK TIME.\n         SPACE 1\nGETTME  $GFDATE MF=(E,GFDTEL)      GET DATE/TIME\n         MVC   TITTIM(2),TITTIM+2  HHMMSS\n         MVC   TITTIM+3(2),TITTIM+4\n         MVI   TITTIM+2,C':'\n         MVI   TITTIM+5,C':'\n         L     R2,SCDATA           RESET BUFFER VARIABLE LENGTH AREA\n         L     R3,=A(SCBUFL)\n         SL    R3,SCBSLG\n         LA    R14,*\n         XR    R15,R15\n         MVCL  R2,R14\n         SPACE 1\n*------- EDIT THE DATE IF NEEDED.\n         SPACE 1\n         CLC   TITDTE,PRVDTE\n         BE    *+L'*+20\n         CLI   PRVDTE,0\n         BNE   RSTRT\n         MVC   FULLSC+FULLSCT(L'TITDTE),TITDTE\n         MVC   PRVDTE,TITDTE\n         SPACE 1\n*------- EDIT THE CLOCK TIME.\n         SPACE 1\n         LA    R2,TITTIM\n         LA    R7,PRVTIM\n         L     R3,SCDATA\n         XR    R4,R4\n         BAS   R8,EDIT             H\n         BAS   R8,EDIT             HH\n         BAS   R8,EDITS            HH:\n         BAS   R8,EDIT             HH:M\n         BAS   R8,EDIT             HH:MM\n         BAS   R8,EDITS            HH:MM:\n         BAS   R8,EDIT             HH:MM:S\n         BAS   R8,EDIT             HH:MM:SS\n         MVC   PRVTIM,TITTIM\n         SPACE 1\n*------- DISPLAY CLOCK TIME.\n         SPACE 1\n         L     R1,SCDATA\n         LR    R0,R3\n         SLR   R0,R1\n         AL    R0,SCBSLG\n         LA    R1,FULLSC\n         TM    SWITCH,SCRPI        PRESERVE INPUT ?\n         BO    PRSVIN              YES\n         AL    R0,=A(WSPTL)        NO\n         MVC   0(WSPTL,R3),WSPT\n        $FS    WCC=(KBR,RMDT),MF=(I,FULLWCC)\n         B     TSTFTD\nPRSVIN   NI    SWITCH,255-SCRPI    RESET PRESERVE INPUT\n        $FS    WCC=(KBR),MF=(I,FULLWCC)\nTSTFTD   TM    SWITCH,SCRST+SCRRS  FIRST TPUT DONE ?\n         BNO   SNDWR               YES\n        $FS    CC=EW,MF=(I,(R1))   SET ERASE/WRITE\nSNDWR    ICM   R1,B'1000',=X'03'   INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n         TM    SWITCH,SCRST+SCRRS  FIRST TPUT DONE ?\n         BNO   SNDRD               YES\n        $FS    CC=W,MF=(I,FULLSC)  RESTORE WRITE\n         NI    SWITCH,255-SCRST    SET FIRST TPUT DONE\n         SPACE 1\n*------- SEE IF STOP REQUESTED. THIS 'TGET' IS NECESSARY WHEN\n*        WORKING IN 'SNA', BECAUSE THE KEYBOARD RESTORE ORDER\n*        (SEE WCC OF 'TPUT') IS SET IN A PENDING STATE UNTIL A\n*        'TGET' IS EXECUTED. SO THIS AVOIDS THE KEYBOARD LOCK\n*        DURING THE WAIT INTERVAL TIME WHICH FOLLOWS.\n         SPACE 1\nSNDRD    L     R0,=A(SHRTSCL)\n         CL    R0,SCBSLG\n         BE    *+L'*+10\n         LA    R1,FULLSC\n         ALR   R1,R0\n         STM   R0,R1,SCBSLG\n         BAS   R8,ANYPDG           ANYTHING PENDING ...\n         SPACE 1\n*------- WAIT FOR REQUESTED INTERVAL.\n         SPACE 1\nTIMER   STIMER WAIT,BINTVL=INTVAL\n         SPACE 1\n*------- SEE IF OUTPUT COMPLETE (TASK MAY BE SWAP-OUT OR TERMINAL\n*        IN REMOTE ATTACHMENT MAY BE SLOWER THAN WAIT INTERVAL).\n         SPACE 1\n        ZEROKEY\n         USING PSA,R0\n         L     R14,PSAAOLD         ASCB\n         DROP  R0\n         USING ASCB,R14\n         L     R15,ASCBTSB         TSB\n         DROP  R14\n         USING TSB,R15\n         ICM   R2,B'1111',TSBNOBF  TSBNOBF+TSBOBFP\n         DROP  R15\n        RESETKEY\n         LTR   R2,R2\n         BNZ   TIMER\n         SPACE 1\n*------- SEE IF SOMETHING REQUESTED.\n         SPACE 1\n         BAS   R8,ANYPDG           ANYTHING PENDING ...\n         OI    SWITCH,SCRPI        NORMAL NOWAIT, SET PRESERVE INPUT\n         B     GETTME\nANYPDG   XC    PFREPLY,PFREPLY     ANYTHING PENDING ...\n        TGET   PFREPLY,L'PFREPLY,ASIS,NOWAIT\n         LTR   R15,R15\n         BZ    ANLZ                SOMETHING HAS BEEN ENTERED ...\n         CH    R15,=H'4'\n         BNE   QUIT                NOT NORMAL WAIT ...\n         BR    R8\nANLZ     CLI   PFCODE,X'F3'        PF 3 ENTERED ?\n         BE    QUIT                YES, EXIT\n         CLI   PFCODE,X'C3'        PF 15 ENTERED (ALT. PF 3) ?\n         BE    QUIT                YES, EXIT\n         CLI   PFCODE,X'F1'        PF 1 ENTERED ?\n         BE    DHLP                YES, GO DISPLAY TUTORIAL\n         CLI   PFCODE,X'C1'        PF 13 ENTERED (ALT. PF 1) ?\n         BE    DHLP                YES, GO DISPLAY TUTORIAL\n         CLI   PFCODE,X'F2'        PF 2 ENTERED ?\n         BE    CHGD                YES, GO CHANGE DISPLAY\n         CLI   PFCODE,X'C2'        PF 14 ENTERED (ALT. PF 2) ?\n         BE    CHGD                YES, GO CHANGE DISPLAY\n         OC    PFTEXT(8),=CL8' '   YES, UPPER CASE TEXT\n         LA    R0,8\n         LA    R1,PFTEXT\n         LA    R2,PFTEXT\nANLTX    CLI   0(R1),C' '          COMPRESS TEXT TO LEFT SIDE\n         BE    *+L'*+16\n         CLR   R1,R2\n         BE    *+L'*+6\n         MVC   0(1,R2),0(R1)\n         LA    R2,1(R2)\n         LA    R1,1(R1)\n         BCT   R0,ANLTX\n         CLR   R2,R1\n         BNL   *+L'*+12\n         MVI   0(R2),C' '\n         LA    R2,1(R2)\n         B     *-14\n         CLC   PFTEXT(8),=CL8' '   ANY TEXT ?\n         BE    RSTRT               NONE\n         CLC   PFTEXT(4),=CL4'END '     END TYPED ?\n         BE    QUIT                YES, EXIT\n         CLC   PFTEXT(5),=CL5'STOP '    STOP TYPED ?\n         BE    QUIT                YES, EXIT\n         CLC   PFTEXT(5),=CL5'HELP '    HELP TYPED ?\n         BE    DHLP                YES, GO DISPLAY TUTORIAL\n         CLC   PFTEXT(7),=CL7'CHANGE '  CHANGE TYPED ?\n         BE    CHGD                YES, GO CHANGE DISPLAY\n         CLI   PFTEXT,C'0'         NUMERIC ENTERED ?\n         BNL   INTREQ              YES, GO GET NEW INTERVAL\n         CLC   PFTEXT(4),=CL4'CON '\n         BE    STPCON\n         TM    SWITCH,SCREC\n         BO    XCLR\n         CLC   PFTEXT(2),=CL2'I '\n         BE    STPI\n         CLC   PFTEXT(2),=CL2'N '\n         BE    STPN\n         B     GETTME              IGNORE ANYTHING ELSE\nCHGD     XR    R1,R1\n         CLI   DITYNU,LSTN\n         BE    *+L'*+8\n         IC    R1,DITYNU\n         LA    R1,1(R1)\n         STC   R1,DITYNU\n         B     RSTRT\nSTPN     MVC   OSFRQ(LSF),OSFN\n         B     RSTRT\nSTPI     MVC   OSFRQ(LSF),OSFI\n         B     RSTRT\nXCLR     CLC   PFTEXT(5),=CL5'COFF '\n         BE    STPCOFF\n         CLC   PFTEXT(2),=CL2'I '\n         BE    STPEI\n         CLC   PFTEXT(2),=CL2'N '\n         BE    STPEN\n         CLI   PFTEXT+L'OSFETS-1,C' '\n         BNE   GETTME              IGNORE TOO LONG\n         LA    R14,L'OSFETS-1\n         LA    R15,PFTEXT\n         CLI   0(R15),C'N'\n         BE    XCLR1\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         B     XCLR1+L'XCLR1\n         MVC   0(*-*,R15),1(R15)\nXCLR1    EX    R14,*-6\n         LA    R14,L'OSFETS-1\n         LA    R15,PFTEXT\n         LR    R0,R15\nXCLR2    CLI   0(R15),C'+'\n         BE    XCLR3\n         CLI   0(R15),C'-'\n         BE    XCLR3\n         LA    R15,1(R15)\n         BCT   R14,XCLR2\n         B     XCLR4\nXCLR3    CLR   R15,R0\n         BE    XCLR4\n         XC    PFTEXT(1),0(R15)\n         XC    0(1,R15),PFTEXT\n         XC    PFTEXT(1),0(R15)\nXCLR4    LA    R14,L'OSFETS-1\n         LA    R15,PFTEXT\n         LR    R1,R15\n         CLI   0(R15),C'+'\n         BE    *+L'*+8\n         CLI   0(R15),C'-'\n         BNE   XCLR6\n         LA    R1,1(R1)\nXCLR5    LA    R15,1(R15)\n         BCT   R14,XCLR6\n         B     XCLR7\nXCLR6    CLI   0(R15),C'I'\n         BNE   XCLR5\n         CLR   R15,R1\n         BE    XCLR7\n         XC    0(1,R1),0(R15)\n         XC    0(1,R15),0(R1)\n         XC    0(1,R1),0(R15)\nXCLR7    L     R1,=A(OSFETS)\n         LA    R14,OSFETL\n         L     R15,=A(OSFETE)\n         CLC   PFTEXT(L'OSFETS),0(R1)\n         BE    *+L'*+8\n         BXLE  R1,R14,*-10\n         B     GETTME              IGNORE ANYTHING ELSE\n         MVC   OSFERQ(LESF),L'OSFETS(R1)\n         B     RSTRT\nSTPEN    MVC   OSFERQ(LESF),OSFEN\n         B     RSTRT\nSTPEI    MVC   OSFERQ(LESF),OSFEI\n         B     RSTRT\nSTPCON   OI    SWITCH,SCREC\n         MVC   OSFERQ(LESF),OSFEN\n         B     RSTRT\nINTREQ   XR    R1,R1\n         LA    R0,15\n         CLI   PFTEXT,C'0'         TEST NUMERIC RANGE\n         BL    GETTME              NO, IGNORE ANYTHING ELSE\n         CLI   PFTEXT,C'9'\n         BH    GETTME              NO, IGNORE ANYTHING ELSE\n         IC    R1,PFTEXT\n         NR    R1,R0\n         CLI   PFTEXT+1,C' '\n         BE    NEWINT\n         CLI   PFTEXT+1,C'0'       TEST NUMERIC RANGE\n         BL    GETTME              NO, IGNORE ANYTHING ELSE\n         CLI   PFTEXT+1,C'9'\n         BH    GETTME              NO, IGNORE ANYTHING ELSE\n         CLI   PFTEXT+2,C' '       TEST NOT MORE THAN 2 DIGITS\n         BNE   GETTME              NO, IGNORE ANYTHING ELSE\n         XR    R2,R2\n         IC    R2,PFTEXT+1\n         NR    R2,R0\n         MH    R1,=H'10'\n         AR    R1,R2\nNEWINT   CH    R1,=H'60'           VALID INTERVAL REQUESTED ?\n         BH    GETTME              NO, IGNORE ANYTHING ELSE\n         MH    R1,=H'100'          COMPUTE WAIT VALUE\n         ST    R1,INTVAL           SET NEW WAIT INTERVAL\n         B     GETTME\nDHLP     LM    R0,R1,=A(HELPSCL,HELPSC)\n         ICM   R1,B'1000',=X'03'   INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n         XC    PFHRPLY,PFHRPLY\n        TGET   PFHRPLY,L'PFHRPLY,ASIS,WAIT\n         LTR   R15,R15\n         BNZ   QUIT                SOMETHING GOES WRONG ...\n         CLI   PFCODE,X'F3'        PF 3 ENTERED ?\n         BE    DHLPX               YES, EXIT\n         CLI   PFCODE,X'C3'        PF 15 ENTERED (ALT. PF 3) ?\n         BE    DHLPX               YES, EXIT\n         OC    PFHTXT(2),=CL8' '   YES, UPPER CASE TEXT\n         CLI   PFHTXT+1,C' '\n         BE    *+L'*+18\n         CLI   PFHTXT,C' '\n         BNE   *+L'*+10\n         MVC   PFHTXT(1),PFHTXT+1\n         MVI   PFHTXT+1,C' '\n         CLC   PFHTXT(2),=CL8' '   ANY TEXT ?\n         BE    DHLP                NONE, REPEAT HELP\n         CLC   PFHTXT(2),=CL2'E '  E(ND) TYPED ?\n         BE    DHLPX               YES, GO BACK\n         CLC   PFHTXT(2),=CL2'S '  S(TOP) TYPED ?\n         BNE   DHLP                NO, REPEAT HELP\nDHLPX    XC    PFREPLY,PFREPLY\n         B     RSTRT\n         SPACE 1\n*------- TERMINATE PROCESSING.\n         SPACE 1\nQUIT     MVC   FULLSC(CLEARL),CLEAR     SET CLEAR SEQUENCE\n         TM    SWITCH,SCRRS        WAS SCREEN SIZE CHANGED ?\n         BZ    ENDCL               NO\n        STSIZE SIZELOC=SZLINE,LINELOC=SZSCRN RESTORE ORIGINAL SIZE\n        $FS    CC=EWA,MF=(I,FULLSC)\nENDCL    LA    R1,FULLSC\n         LA    R0,CLEARL\n         ICM   R1,B'1000',=X'03'   INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n        STFSMODE OFF\n         XR    R15,0               RC = 0 -----------------------------\nLEAVE   $XRET  CC=(R15),LV=WRKL,TYPE=RENT\nINVREQ  IKJRLSA #TSANSW\n         LA    R1,INVMS\n         B     FINISH\nNOTSCR   LA    R1,SCRMS\n         B     FINISH\nNOTSTD   LA    R1,STDMS\nFINISH   BAS   R14,PUTMSG\nSETRC    LA    R15,16              RC = 16 ----------------------------\n         B     LEAVE\n         EJECT\n*------- EDIT A CLOCK DIGIT ROUTINE.\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R2  = TIME DIGIT POINTER\n*              R3  = CURRENT BUFFER ADDRESS POINTER / UPDATED.\n*              R4  = RELATIVE POSITION IN BUFFER LINE / UPDATED.\n*              R5  = WORK REGISTER.\n*              R6  = WORK REGISTER.\n*              R7  = PREVIOUS TIME DIGIT POINTER\n*              R8  = LINK REGISTER.\n*              R14 = CALL REGISTER.\n*              R15 = WORK REGISTER.\n         SPACE 1\nEDIT     CLC   0(1,R2),0(R7)\n         BNE   EDIT1\n         LA    R2,1(R2)\n         LA    R7,1(R7)\n         AH    R4,=H'10'\n         BR    R8\nEDIT1    MVC   CONV(1),0(R2)\n         LA    R2,1(R2)\n         LA    R7,1(R7)\n         NI    CONV,X'0F'\n         XR    R15,R15\n         IC    R15,CONV\n         SLL   R15,2\n         AL    R15,ADDTB\n         L     R6,4(R15)\n         B     EDIT3\nEDITS    CLC   0(1,R2),0(R7)\n         BNE   EDIT2\n         LA    R2,1(R2)\n         LA    R7,1(R7)\n         AH    R4,=H'10'\n         BR    R8\nEDIT2    LA    R2,1(R2)\n         LA    R7,1(R7)\n         L     R15,ADDTB\n         L     R6,0(R15)\nEDIT3    LA    R5,6\nEDIT4    CLI   0(R6),255\n         BNE   *+L'*+6\n         AH    R4,=H'10'\n         BR    R8\n         STC   R5,RCSBA\n         LR    R0,R4\n         AH    R0,=H'1'\n         STC   R0,RCSBA+1\n         BAS   R14,GNSBA           GENERATE SBA\n         LR    R0,R4\n         AH    R0,=H'11'\n         STC   R0,RCSBA+1\n         BAS   R14,GNRA            GENERATE RA\n         CLI   0(R6),0\n         BNE   EDIT5\n         LR    R0,R4\n         AH    R0,=H'1'\n         STC   R0,RCSBA+1\n         BAS   R14,GNSBA           GENERATE SBA\n         MVC   0(LSF,R3),OSFN\n         LA    R3,LSF(R3)\n         B     EDIT7\nEDIT5    CLI   0(R6),1\n         BE    EDIT6\n         LR    R0,R4\n         AH    R0,=H'1'\n         STC   R0,RCSBA+1\n         BAS   R14,GNSBA           GENERATE SBA\n         MVC   0(LSF,R3),OSFN\n         LA    R3,LSF(R3)\nEDIT6    XR    R0,R0\n         IC    R0,0(R6)\n         AR    R0,R4\n         STC   R0,RCSBA+1\n         BAS   R14,GNSBA           GENERATE SBA\n         MVC   LCSF(1),1(R6)\n         MVC   LCSF+1(1),4(R6)\n         XR    R0,R0\n         LR    R1,R0\n         IC    R0,0(R6)\n         IC    R1,1(R6)\n         BAS   R14,GNSF            GENERATE SF\n         CLI   2(R6),0\n         BE    EDIT7\n         STC   R5,RCSBA\n         XR    R0,R0\n         IC    R0,2(R6)\n         AR    R0,R4\n         STC   R0,RCSBA+1\n         BAS   R14,GNSBA           GENERATE SBA\n         MVC   LCSF(1),3(R6)\n         MVC   LCSF+1(1),5(R6)\n         XR    R0,R0\n         LR    R1,R0\n         IC    R0,2(R6)\n         IC    R1,3(R6)\n         BAS   R14,GNSF            GENERATE SF\nEDIT7    LA    R6,6(R6)\n         LA    R5,1(R5)\n         B     EDIT4\n         SPACE 1\n*------- GENERATE SET BUFFER ADDRESS ROUTINE.\n*        GENERATE RESET TO ADDRESS ROUTINE.\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R3  = CURRENT BUFFER ADDRESS POINTER / UPDATED.\n*              R14 = LINK REGISTER.\n*              R15 = WORK REGISTER.\n         SPACE 1\nGNRA     OI    SWITCH,GRASO\n         B     GNSBA+L'GNSBA\nGNSBA    NI    SWITCH,255-GRASO\n         XR    R0,R0\n         LR    R1,R0\n         IC    R0,RCSBA+1          COLUMN\n         SH    R0,=H'1'\n         IC    R1,RCSBA            ROW\n         SH    R1,=H'1'\n         BZ    *+L'*+4\n         MH    R1,=H'80'\n         AR    R1,R0\n         LR    R15,R1\n         XR    R0,R0\n         CL    R1,TRSBAM\n         BNL   *+L'*+6\n         XR    R1,R1\n         B     *+L'*+6\n         D     R0,TRSBAM\n         LR    R0,R1\n         MH    R0,TRSBAM+2\n         SR    R15,R0\n         LA    R0,TRSBA\n         AR    R1,R0\n         AR    R15,R0\n         TM    SWITCH,GRASO\n         BO    *+L'*+10\n         MVC   0(L'OSBA,R3),OSBA\n         B     *+L'*+6\n         MVC   0(L'ORA,R3),ORA\n         MVC   1(1,R3),0(R1)\n         MVC   2(1,R3),0(R15)\n         TM    SWITCH,GRASO\n         BO    *+L'*+6\n         LA    R3,L'OSBA(R3)\n         BR    R14\n         LA    R3,L'ORA(R3)\n         BR    R14\n         SPACE 1\n*------- GENERATE SET FIELD ROUTINE.\n*              R0  = WORK REGISTER.\n*              R1  = WORK REGISTER.\n*              R3  = CURRENT BUFFER ADDRESS POINTER / UPDATED.\n*              R14 = LINK REGISTER.\n*              R15 = WORK REGISTER.\n         SPACE 1\nGNSF     TM    SWITCH,SCREC\n         BO    *+L'*+14\n         MVC   0(LSF,R3),OSFRQ\n         LA    R3,LSF(R3)\n         B     *+L'*+10\n         MVC   0(LESF,R3),OSFERQ\n         LA    R3,LESF(R3)\n         XR    R15,R15\n         IC    R15,LCSF\n         MVC   0(1,R3),LCSF+1\n         LA    R3,1(R3)\n         BCT   R15,*-10\n         AR    R0,R1\n         CH    R0,=H'10'\n         BER   R14\n         MVC   0(LSF,R3),OSFN\n         LA    R3,LSF(R3)\n         BR    R14\n         EJECT\n*------- CONSTANTS.\n         SPACE 1\n         PRINT NOGEN\nINVMS    WTO   ' -> Interval value must range from 1 to 60',           X\n               ROUTCDE=11,DESC=7,MF=L\nSCRMS    WTO   ' -> Sorry, run only on a screen terminal',             X\n               ROUTCDE=11,DESC=7,MF=L\nSTDMS    WTO   ' -> Sorry, need a screen sized 24 x 80',               X\n               ROUTCDE=11,DESC=7,MF=L\n         PRINT GEN\nTRSBA    DC    XL16'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    XL16'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    XL16'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\nTRSBAL   EQU   *-TRSBA\nTRSBAM   DC    A(TRSBAL)\n         SPACE 1\nOSBA    $FS    SBA=(1,1),MF=L\nORA     $FS    RA=(1,1,00),MF=L\nOSFN    $FS    SF=(PROT),MF=L\nLSF      EQU   *-OSFN\nOSFI    $FS    SF=(PROT,INT),MF=L\nOSFEN   $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,DEFAULT),MF=L\nLESF     EQU   *-OSFEN\nOSFEI   $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,DEFAULT),MF=L\n         SPACE 1\nFULLSCP $FS    CC=W,MF=L\n        $FS    WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),MF=L\nSHRTSCL  EQU   *-FULLSCP\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=NORMAL,RA=(1,15,00),MF=L\n        $FS    SF=(PROT),RA=(1,60,00),MF=L\n        $FS    SF=(PROT,INT),MF=L\nFULLSCT  EQU   *-FULLSCP\n        $FS    TEXT=(' ',20),MF=L\n        $FS    SF=(PROT,INT),RA=(2,80,6D),MF=L\n        $FS    SF=(PROT),RA=(6,1,00),MF=L\n        $FS    SBA=(17,1),SF=(PROT),RA=(20,1,00),MF=L\n        $FS    SF=(PROT,INT),RA=(20,80,6D),MF=L\n        $FS    SF=(PROT),TEXT=' You may enter a new interval time',MF=L\n        $FS    SF=(PROT,INT),TEXT='(1 up to 60)',MF=L\n        $FS    SF=(PROT),TEXT='in seconds, or use',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='(or',RA=(22,1,00),MF=L\n        $FS    SF=(PROT),TEXT='enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='STOP',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='END',MF=L\n        $FS    SF=(PROT),TEXT='keyword) to terminate. Tutorial :',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-1',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='HELP',MF=L\n        $FS    SF=(PROT),TEXT='keyword.',RA=(23,1,00),MF=L\n        $FS    SF=(PROT),TEXT='Change display type :',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-2',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='CHANGE',MF=L\n        $FS    SF=(PROT),TEXT='keyword.',RA=(24,1,00),MF=L\nFULLSCL  EQU   *-FULLSCP\n         SPACE 1\nCMDNT   $FS    SF=(PROT),TEXT='Commands :',MF=L\n        $FS    SF=(PROT,INT),TEXT='N',MF=L\n        $FS    SF=(PROT),TEXT='and',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='(enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='CON',MF=L\n        $FS    SF=(PROT),TEXT='for colours commands).',MF=L\n        $FS    SF=(PROT),RA=(1,1,00),MF=L\nCMDNTL   EQU   *-CMDNT\n         SPACE 1\nCMDST   $FS    SF=(PROT),TEXT='Commands :',MF=L\n        $FS    SF=(PROT,INT),TEXT='N, I, +, -, B, R, P, G, T, Y',MF=L\n        $FS    SF=(PROT),TEXT='and',MF=L\n        $FS    SF=(PROT,INT),TEXT='W',MF=L\n        $FS    SF=(PROT),TEXT='(enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='COFF',MF=L\n        $FS    SF=(PROT),TEXT='to reset colours).',MF=L\n        $FS    SF=(PROT),RA=(1,1,00),MF=L\nCMDSTL   EQU   *-CMDST\n         SPACE 1\nWSPT    $FS    SBA=(1,6),SF=NORMAL,RA=(1,15,00),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nWSPTL    EQU   *-WSPT\n         SPACE 1\n*------- TURN OFF FULL SCREEN (SPF), CLEAR\n*        AND RESET CURSOR TO ROW 1, COL 1.\n         SPACE 1\nCLEAR   $FS    CC=EW,WCC=(AL,KBR,RMDT),SBA=(24,79),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(IC),MF=L\nCLEARL   EQU   *-CLEAR\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R11,R12             END OF BASES ADDRESSABILITY\n         EJECT\n        PRINT  NOGEN\nHELPSC  $FS    CC=W,MF=L\n        $FS    WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n        $FS    SBA=(1,1),SF=(PROT,INT),TEXT='Tutorial',MF=L\n        $FS    SF=(PROT),TEXT='<------------------------',MF=L\n        $FS    SF=(PROT,INT),TEXT='S E I K O',MF=L\n        $FS    SF=(PROT),TEXT='------------------------>',MF=L\n        $FS    SF=(PROT,INT),TEXT='Tutorial',MF=L\n        $FS    SBA=(2,1),SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=NORMAL,MF=L\n        $FS    SBA=(2,9),SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT),RA=(4,80,-),MF=L\n        $FS    SBA=(5,1),SF=(PROT),TEXT=' Normal commands :',MF=L\n        $FS    SF=(PROT,INT),TEXT='N',MF=L\n        $FS    SF=(PROT),TEXT=': normal display',MF=L\n        $FS    SBA=(5,50),SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT=': intensive display',MF=L\n        $FS    SBA=(6,1),SF=(PROT),RA=(6,80,-),MF=L\n        $FS    SBA=(7,1),SF=(PROT),TEXT='Colours commands :',MF=L\n        $FS    SF=(PROT,INT),TEXT='+',MF=L\n        $FS    SF=(PROT),TEXT=': blink display',MF=L\n        $FS    SBA=(7,50),SF=(PROT,INT),TEXT='-',MF=L\n        $FS    SF=(PROT),TEXT=': reverse display',MF=L\n        $FS    SBA=(8,20),SF=(PROT,INT),TEXT='B',MF=L\n        $FS    SF=(PROT),TEXT=': blue display',MF=L\n        $FS    SBA=(8,50),SF=(PROT,INT),TEXT='G',MF=L\n        $FS    SF=(PROT),TEXT=': green display',MF=L\n        $FS    SBA=(9,20),SF=(PROT,INT),TEXT='P',MF=L\n        $FS    SF=(PROT),TEXT=': pink display',MF=L\n        $FS    SBA=(9,50),SF=(PROT,INT),TEXT='R',MF=L\n        $FS    SF=(PROT),TEXT=': red display',MF=L\n        $FS    SBA=(10,20),SF=(PROT,INT),TEXT='T',MF=L\n        $FS    SF=(PROT),TEXT=': turquoise display',MF=L\n        $FS    SBA=(10,50),SF=(PROT,INT),TEXT='W',MF=L\n        $FS    SF=(PROT),TEXT=': white display',MF=L\n        $FS    SBA=(11,20),SF=(PROT,INT),TEXT='Y',MF=L\n        $FS    SF=(PROT),TEXT=': yellow display',MF=L\n        $FS    SBA=(12,1),SF=(PROT),RA=(12,80,-),MF=L\n        $FS    SBA=(15,1),SF=(PROT,INT),TEXT='I.E. : 1.',MF=L\n        $FS    SF=(PROT),TEXT='entering',MF=L\n        $FS    SF=(PROT,INT),TEXT='T',MF=L\n        $FS    SF=(PROT),TEXT='means normal turquoise display',MF=L\n        $FS    SBA=(16,8),SF=(PROT,INT),TEXT='2.',MF=L\n        $FS    SF=(PROT),TEXT='entering',MF=L\n        $FS    SF=(PROT,INT),TEXT='+P',MF=L\n        $FS    SF=(PROT),TEXT='means blinking pink display',MF=L\n        $FS    SBA=(17,8),SF=(PROT,INT),TEXT='3.',MF=L\n        $FS    SF=(PROT),TEXT='entering',MF=L\n        $FS    SF=(PROT,INT),TEXT='-Y',MF=L\n        $FS    SF=(PROT),TEXT='means reverse yellow display',MF=L\n        $FS    SBA=(20,1),SF=(PROT),TEXT='Alternate',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-keys',MF=L\n        $FS    SF=(PROT),TEXT='allowed :',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-1 = PF-13',MF=L\n        $FS    SF=(PROT),TEXT='-',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-2 = PF-14',MF=L\n        $FS    SF=(PROT),TEXT='-',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3 = PF-15',MF=L\n        $FS    SBA=(23,1),SF=(PROT),TEXT='Use',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='(or enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='S',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='E',MF=L\n        $FS    SF=(PROT),TEXT='keyword) to exit the',MF=L\n        $FS    SF=(PROT,INT),TEXT='Tutorial',MF=L\n        $FS    SF=(PROT),TEXT='process.',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nHELPSCL  EQU   *-HELPSC\n         EJECT\nOSFETS   DC    CL4'B   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\nOSFETL   EQU   *-OSFETS\n         DC    CL4'G   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         DC    CL4'P   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         DC    CL4'R   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),MF=L\n         DC    CL4'T   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         DC    CL4'W   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         DC    CL4'Y   '\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         DC    CL4'+   '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,DEFAULT),MF=L\n         DC    CL4'-   '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,DEFAULT),MF=L\n         DC    CL4'+B  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,BLUE),MF=L\n         DC    CL4'+G  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,GREEN),MF=L\n         DC    CL4'+P  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,PINK),MF=L\n         DC    CL4'+R  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,RED),MF=L\n         DC    CL4'+T  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,TURQ),MF=L\n         DC    CL4'+W  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,WHITE),MF=L\n         DC    CL4'+Y  '\n        $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,YELLOW),MF=L\n         DC    CL4'-B  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,BLUE),MF=L\n         DC    CL4'-G  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,GREEN),MF=L\n         DC    CL4'-P  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,PINK),MF=L\n         DC    CL4'-R  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,RED),MF=L\n         DC    CL4'-T  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,TURQ),MF=L\n         DC    CL4'-W  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         DC    CL4'-Y  '\n        $FS    SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,YELLOW),MF=L\n         DC    CL4'IB  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         DC    CL4'IG  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         DC    CL4'IP  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         DC    CL4'IR  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,RED),MF=L\n         DC    CL4'IT  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         DC    CL4'IW  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         DC    CL4'IY  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         DC    CL4'+I  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,DEFAULT),MF=L\n         DC    CL4'-I  '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,DEFAULT),MF=L\n         DC    CL4'+IB '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,BLUE),MF=L\n         DC    CL4'+IG '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,GREEN),MF=L\n         DC    CL4'+IP '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,PINK),MF=L\n         DC    CL4'+IR '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,RED),MF=L\n         DC    CL4'+IT '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,TURQ),MF=L\n         DC    CL4'+IW '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,WHITE),MF=L\n         DC    CL4'+IY '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,YELLOW),MF=L\n         DC    CL4'-IB '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,BLUE),MF=L\n         DC    CL4'-IG '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,GREEN),MF=L\n         DC    CL4'-IP '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,PINK),MF=L\n         DC    CL4'-IR '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,RED),MF=L\n         DC    CL4'-IT '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,TURQ),MF=L\n         DC    CL4'-IW '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,WHITE),MF=L\nOSFETE   DC    CL4'-IY '\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,YELLOW),MF=L\n        PRINT  GEN\n         SPACE 1\nLSTB     DC    A(ATB,ARTB,BTB,BRTB)\nLSTN     EQU   (*-LSTB)/L'LSTB-1   MAX. ALLOWED = 255\n         EJECT\nATB      DC    A(ATB$,ATB0,ATB1,ATB2,ATB3,ATB4)\n         DC    A(ATB5,ATB6,ATB7,ATB8,ATB9)\n        PRINT  NOGEN\n         SPACE 1\nATB$    @GTB   '         ',                                            1\n               '         ',                                            2\n               '    **   ',                                            3\n               '    **   ',                                            4\n               '         ',                                            5\n               '         ',                                            6\n               '         ',                                            7\n               '    **   ',                                            8\n               '    **   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nATB0    @GTB   '  00000  ',                                            1\n               ' 0000000 ',                                            2\n               '000   000',                                            3\n               '000   000',                                            4\n               '000   000',                                            5\n               '000   000',                                            6\n               '000   000',                                            7\n               '000   000',                                            8\n               '000   000',                                            9\n               ' 0000000 ',                                            A\n               '  00000  '\n         SPACE 1\nATB1    @GTB   '    11   ',                                            1\n               '   111   ',                                            2\n               '  1111   ',                                            3\n               '    11   ',                                            4\n               '    11   ',                                            5\n               '    11   ',                                            6\n               '    11   ',                                            7\n               '    11   ',                                            8\n               '    11   ',                                            9\n               '    11   ',                                            A\n               '  111111 '\n         SPACE 1\nATB2    @GTB   '  22222  ',                                            1\n               ' 2222222 ',                                            2\n               '22     22',                                            3\n               '      22 ',                                            4\n               '     22  ',                                            5\n               '    22   ',                                            6\n               '   22    ',                                            7\n               '  22     ',                                            8\n               ' 22      ',                                            9\n               '222222222',                                            A\n               '222222222'\n         EJECT\nATB3    @GTB   '  33333  ',                                            1\n               ' 3333333 ',                                            2\n               '33     33',                                            3\n               '       33',                                            4\n               '      33 ',                                            5\n               '     33  ',                                            6\n               '      33 ',                                            7\n               '       33',                                            8\n               '33     33',                                            9\n               ' 3333333 ',                                            A\n               '  33333  '\n         SPACE 1\nATB4    @GTB   '     44  ',                                            1\n               '    44   ',                                            2\n               '   44    ',                                            3\n               '  44     ',                                            4\n               ' 44      ',                                            5\n               '44   44  ',                                            6\n               '444444444',                                            7\n               '444444444',                                            8\n               '     44  ',                                            9\n               '     44  ',                                            A\n               '     44  '\n         SPACE 1\nATB5    @GTB   '55555555 ',                                            1\n               '55555555 ',                                            2\n               '55       ',                                            3\n               '55       ',                                            4\n               '5555555  ',                                            5\n               '55555555 ',                                            6\n               '      555',                                            7\n               '       55',                                            8\n               '55     55',                                            9\n               ' 5555555 ',                                            A\n               '  55555  '\n         SPACE 1\nATB6    @GTB   '  666666 ',                                            1\n               ' 66666666',                                            2\n               '666      ',                                            3\n               '66       ',                                            4\n               '66666666 ',                                            5\n               '666666666',                                            6\n               '66    666',                                            7\n               '66     66',                                            8\n               '666   666',                                            9\n               ' 6666666 ',                                            A\n               '  66666  '\n         EJECT\nATB7    @GTB   '777777777',                                            1\n               '777777777',                                            2\n               '       77',                                            3\n               '      77 ',                                            4\n               '     77  ',                                            5\n               '    77   ',                                            6\n               '   77    ',                                            7\n               '  77     ',                                            8\n               ' 77      ',                                            9\n               ' 77      ',                                            A\n               ' 77      '\n         SPACE 1\nATB8    @GTB   '  88888  ',                                            1\n               ' 8888888 ',                                            2\n               '888   888',                                            3\n               '88     88',                                            4\n               '888   888',                                            5\n               ' 8888888 ',                                            6\n               '888   888',                                            7\n               '88     88',                                            8\n               '888   888',                                            9\n               ' 8888888 ',                                            A\n               '  88888  '\n         SPACE 1\nATB9    @GTB   '  99999  ',                                            1\n               ' 9999999 ',                                            2\n               '999   999',                                            3\n               '99     99',                                            4\n               '999    99',                                            5\n               ' 99999999',                                            6\n               '  9999999',                                            7\n               '       99',                                            8\n               '      999',                                            9\n               '99999999 ',                                            A\n               ' 999999  '\n        PRINT  GEN\n         EJECT\nARTB     DC    A(ARTB$,ARTB0,ARTB1,ARTB2,ARTB3,ARTB4)\n         DC    A(ARTB5,ARTB6,ARTB7,ARTB8,ARTB9)\n        PRINT  NOGEN\n         SPACE 1\nARTB$   @GTB   '         ',                                            1\n               '         ',                                            2\n               '         ',                                            3\n               '         ',                                            4\n               '   **    ',                                            5\n               '         ',                                            6\n               '   **    ',                                            7\n               '         ',                                            8\n               '         ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB0   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 00000   ',                                            3\n               '00   00  ',                                            4\n               '00   00  ',                                            5\n               '00   00  ',                                            6\n               '00   00  ',                                            7\n               '00   00  ',                                            8\n               ' 00000   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB1   @GTB   '         ',                                            1\n               '         ',                                            2\n               '   11    ',                                            3\n               '  111    ',                                            4\n               '   11    ',                                            5\n               '   11    ',                                            6\n               '   11    ',                                            7\n               '   11    ',                                            8\n               '  1111   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB2   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 22222   ',                                            3\n               '22   22  ',                                            4\n               '    22   ',                                            5\n               '   22    ',                                            6\n               '  22     ',                                            7\n               ' 22      ',                                            8\n               '2222222  ',                                            9\n               '         ',                                            A\n               '         '\n         EJECT\nARTB3   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 33333   ',                                            3\n               '33   33  ',                                            4\n               '     33  ',                                            5\n               '    33   ',                                            6\n               '     33  ',                                            7\n               '33   33  ',                                            8\n               ' 33333   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB4   @GTB   '         ',                                            1\n               '         ',                                            2\n               '   44    ',                                            3\n               '  44     ',                                            4\n               ' 44      ',                                            5\n               '44  44   ',                                            6\n               '4444444  ',                                            7\n               '    44   ',                                            8\n               '    44   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB5   @GTB   '         ',                                            1\n               '         ',                                            2\n               '555555   ',                                            3\n               '55       ',                                            4\n               '55       ',                                            5\n               '555555   ',                                            6\n               '     55  ',                                            7\n               '55   55  ',                                            8\n               ' 55555   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB6   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 66666   ',                                            3\n               '66       ',                                            4\n               '66       ',                                            5\n               '666666   ',                                            6\n               '66   66  ',                                            7\n               '66   66  ',                                            8\n               ' 66666   ',                                            9\n               '         ',                                            A\n               '         '\n         EJECT\nARTB7   @GTB   '         ',                                            1\n               '         ',                                            2\n               '7777777  ',                                            3\n               '     77  ',                                            4\n               '    77   ',                                            5\n               '   77    ',                                            6\n               '  77     ',                                            7\n               ' 77      ',                                            8\n               '77       ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB8   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 88888   ',                                            3\n               '88   88  ',                                            4\n               '88   88  ',                                            5\n               ' 88888   ',                                            6\n               '88   88  ',                                            7\n               '88   88  ',                                            8\n               ' 88888   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nARTB9   @GTB   '         ',                                            1\n               '         ',                                            2\n               ' 99999   ',                                            3\n               '99   99  ',                                            4\n               '99   99  ',                                            5\n               ' 999999  ',                                            6\n               '     99  ',                                            7\n               '     99  ',                                            8\n               ' 99999   ',                                            9\n               '         ',                                            A\n               '         '\n        PRINT  GEN\n         EJECT\nBTB      DC    A(BTB$,BTB0,BTB1,BTB2,BTB3,BTB4)\n         DC    A(BTB5,BTB6,BTB7,BTB8,BTB9)\n        PRINT  NOGEN\n         SPACE 1\nBTB$    @GTB   '         ',                                            1\n               '         ',                                            2\n               '    **   ',                                            3\n               '    **   ',                                            4\n               '         ',                                            5\n               '         ',                                            6\n               '         ',                                            7\n               '    **   ',                                            8\n               '    **   ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBTB0    @GTB   '00000000 ',                                            1\n               '00    00 ',                                            2\n               '00    00 ',                                            3\n               '00    00 ',                                            4\n               '00    00 ',                                            5\n               '00    00 ',                                            6\n               '00    00 ',                                            7\n               '00    00 ',                                            8\n               '00    00 ',                                            9\n               '00    00 ',                                            A\n               '00000000 '\n         SPACE 1\nBTB1    @GTB   '    11   ',                                            1\n               '    11   ',                                            2\n               '    11   ',                                            3\n               '    11   ',                                            4\n               '    11   ',                                            5\n               '    11   ',                                            6\n               '    11   ',                                            7\n               '    11   ',                                            8\n               '    11   ',                                            9\n               '    11   ',                                            A\n               '    11   '\n         SPACE 1\nBTB2    @GTB   '22222222 ',                                            1\n               '      22 ',                                            2\n               '      22 ',                                            3\n               '      22 ',                                            4\n               '      22 ',                                            5\n               '22222222 ',                                            6\n               '22       ',                                            7\n               '22       ',                                            8\n               '22       ',                                            9\n               '22       ',                                            A\n               '22222222 '\n         EJECT\nBTB3    @GTB   '33333333 ',                                            1\n               '      33 ',                                            2\n               '      33 ',                                            3\n               '      33 ',                                            4\n               '      33 ',                                            5\n               '33333333 ',                                            6\n               '      33 ',                                            7\n               '      33 ',                                            8\n               '      33 ',                                            9\n               '      33 ',                                            A\n               '33333333 '\n         SPACE 1\nBTB4    @GTB   '44    44 ',                                            1\n               '44    44 ',                                            2\n               '44    44 ',                                            3\n               '44    44 ',                                            4\n               '44    44 ',                                            5\n               '44444444 ',                                            6\n               '      44 ',                                            7\n               '      44 ',                                            8\n               '      44 ',                                            9\n               '      44 ',                                            A\n               '      44 '\n         SPACE 1\nBTB5    @GTB   '55555555 ',                                            1\n               '55       ',                                            2\n               '55       ',                                            3\n               '55       ',                                            4\n               '55       ',                                            5\n               '55555555 ',                                            6\n               '      55 ',                                            7\n               '      55 ',                                            8\n               '      55 ',                                            9\n               '      55 ',                                            A\n               '55555555 '\n         SPACE 1\nBTB6    @GTB   '66666666 ',                                            1\n               '66       ',                                            2\n               '66       ',                                            3\n               '66       ',                                            4\n               '66       ',                                            5\n               '66666666 ',                                            6\n               '66    66 ',                                            7\n               '66    66 ',                                            8\n               '66    66 ',                                            9\n               '66    66 ',                                            A\n               '66666666 '\n         EJECT\nBTB7    @GTB   '77777777 ',                                            1\n               '      77 ',                                            2\n               '      77 ',                                            3\n               '      77 ',                                            4\n               '      77 ',                                            5\n               '      77 ',                                            6\n               '      77 ',                                            7\n               '      77 ',                                            8\n               '      77 ',                                            9\n               '      77 ',                                            A\n               '      77 '\n         SPACE 1\nBTB8    @GTB   '88888888 ',                                            1\n               '88    88 ',                                            2\n               '88    88 ',                                            3\n               '88    88 ',                                            4\n               '88    88 ',                                            5\n               '88888888 ',                                            6\n               '88    88 ',                                            7\n               '88    88 ',                                            8\n               '88    88 ',                                            9\n               '88    88 ',                                            A\n               '88888888 '\n         SPACE 1\nBTB9    @GTB   '99999999 ',                                            1\n               '99    99 ',                                            2\n               '99    99 ',                                            3\n               '99    99 ',                                            4\n               '99    99 ',                                            5\n               '99999999 ',                                            6\n               '      99 ',                                            7\n               '      99 ',                                            8\n               '      99 ',                                            9\n               '      99 ',                                            A\n               '99999999 '\n        PRINT  GEN\n         EJECT\nBRTB     DC    A(BRTB$,BRTB0,BRTB1,BRTB2,BRTB3,BRTB4)\n         DC    A(BRTB5,BRTB6,BRTB7,BRTB8,BRTB9)\n        PRINT  NOGEN\n         SPACE 1\nBRTB$   @GTB   '         ',                                            1\n               '         ',                                            2\n               '         ',                                            3\n               '         ',                                            4\n               '   **    ',                                            5\n               '         ',                                            6\n               '   **    ',                                            7\n               '         ',                                            8\n               '         ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB0   @GTB   '         ',                                            1\n               '         ',                                            2\n               '0000000  ',                                            3\n               '00   00  ',                                            4\n               '00   00  ',                                            5\n               '00   00  ',                                            6\n               '00   00  ',                                            7\n               '00   00  ',                                            8\n               '0000000  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB1   @GTB   '         ',                                            1\n               '         ',                                            2\n               '   11    ',                                            3\n               '   11    ',                                            4\n               '   11    ',                                            5\n               '   11    ',                                            6\n               '   11    ',                                            7\n               '   11    ',                                            8\n               '   11    ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB2   @GTB   '         ',                                            1\n               '         ',                                            2\n               '2222222  ',                                            3\n               '     22  ',                                            4\n               '     22  ',                                            5\n               '2222222  ',                                            6\n               '22       ',                                            7\n               '22       ',                                            8\n               '2222222  ',                                            9\n               '         ',                                            A\n               '         '\n         EJECT\nBRTB3   @GTB   '         ',                                            1\n               '         ',                                            2\n               '3333333  ',                                            3\n               '     33  ',                                            4\n               '     33  ',                                            5\n               '3333333  ',                                            6\n               '     33  ',                                            7\n               '     33  ',                                            8\n               '3333333  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB4   @GTB   '         ',                                            1\n               '         ',                                            2\n               '44   44  ',                                            3\n               '44   44  ',                                            4\n               '44   44  ',                                            5\n               '4444444  ',                                            6\n               '     44  ',                                            7\n               '     44  ',                                            8\n               '     44  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB5   @GTB   '         ',                                            1\n               '         ',                                            2\n               '5555555  ',                                            3\n               '55       ',                                            4\n               '55       ',                                            5\n               '5555555  ',                                            6\n               '     55  ',                                            7\n               '     55  ',                                            8\n               '5555555  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB6   @GTB   '         ',                                            1\n               '         ',                                            2\n               '6666666  ',                                            3\n               '66       ',                                            4\n               '66       ',                                            5\n               '6666666  ',                                            6\n               '66   66  ',                                            7\n               '66   66  ',                                            8\n               '6666666  ',                                            9\n               '         ',                                            A\n               '         '\n         EJECT\nBRTB7   @GTB   '         ',                                            1\n               '         ',                                            2\n               '7777777  ',                                            3\n               '     77  ',                                            4\n               '     77  ',                                            5\n               '     77  ',                                            6\n               '     77  ',                                            7\n               '     77  ',                                            8\n               '     77  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB8   @GTB   '         ',                                            1\n               '         ',                                            2\n               '8888888  ',                                            3\n               '88   88  ',                                            4\n               '88   88  ',                                            5\n               '8888888  ',                                            6\n               '88   88  ',                                            7\n               '88   88  ',                                            8\n               '8888888  ',                                            9\n               '         ',                                            A\n               '         '\n         SPACE 1\nBRTB9   @GTB   '         ',                                            1\n               '         ',                                            2\n               '9999999  ',                                            3\n               '99   99  ',                                            4\n               '99   99  ',                                            5\n               '9999999  ',                                            6\n               '     99  ',                                            7\n               '     99  ',                                            8\n               '9999999  ',                                            9\n               '         ',                                            A\n               '         '\n        PRINT  GEN\n         EJECT\n*------- PARSE PARAMETER'S LIST (COMMAND SYNTAX).\n         SPACE 1\n        PRINT  NOGEN\nPARMLST IKJPARM\nPDIN    IKJKEYWD\n        IKJNAME 'INTERVAL',SUBFLD=SFIN,ALIAS=('I')\nSFIN    IKJSUBF\nSDIN    IKJIDENT 'INTERVAL IN SECONDS',FIRST=NUMERIC,OTHER=NUMERIC,    C\n               MAXLNTH=2\n        IKJENDP\n        PRINT  GEN\n         SPACE 1\nWRKDSECT DSECT                     WORK AREAS DESCRIPTION\n         SPACE 1\nSVA      DS    18F                 SAVE AREA\n         SPACE 1\nCONV     DS    D\n        $TEW$WA\nGFDTEL  $GFDATE *-*,*-*,MF=L       GET DATE/TIME PARAMETER LIST\n         SPACE 1\nINTVAL   DS    F\nSZLINE   DS    F\nSZSCRN   DS    F\nSCBSLG   DS    F\nSCDATA   DS    F\nADDTB    DS    F\n         SPACE 1\nRCSBA    DS    H\nLCSF     DS    H\nTITDTE   DS    CL20\nPRVDTE   DS    CL20\nTITTIM   DS    CL8\nPRVTIM   DS    CL8\nOSFRQ    DS    XL(LSF)\nOSFERQ   DS    XL(LESF)\nPFREPLY  DS    0CL14\nPFHRPLY  DS    0CL8\nPFCODE   DS    CL6\nPFHTXT   DS    0CL3\nPFTEXT   DS    CL9\nDITYNU   DS    XL1                 DISPLAY TYPE NUMBER (0-255)\nSWITCH   DS    XL1\nSCRST    EQU   X'80'               SCREEN SIZE TO BE SET\nSCRRS    EQU   X'40'               SCREEN SIZE TO BE RESET\nSCRPI    EQU   X'20'               SCREEN PRESERVE INPUT\nSCREC    EQU   X'10'               SCREEN EXTENDED COLOURS\nGRASO    EQU   X'01'               GENERATE RA SCREEN ORDER\n         SPACE 1\n         DS    0F                  START OF SCREEN BUFFER\nFULLSC   DS    (SCBUFL)X\nFULLWCC  EQU   FULLSC+L'FULLSCP,1\n         SPACE 1\nWRKL     EQU   (((*-SVA)+7)/8)*8   WORK AREAS LENGTH\n         SPACE 1\n        PRINT  NOGEN\n        $TEW$DS\n        IHAPSA\n        IHAASCB\n        IKJTSB LIST=YES\n        PRINT  GEN\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SEIKO$": {"ttr": 15617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x7f\\x00\\x942\\x7f\\x15&\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-23T00:00:00", "modifydate": "1994-11-23T15:26:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//SEIKO    JOB (........),'INSTALL  - SEIKO -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHSVC   GFDATE                                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,OPT=',RENT',MBR=SEIKO\n//LNK     EXEC PAJILKC,OPT=',RENT'\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE)\n  ENTRY   SEIKO\n  NAME    SEIKO(R)\n/*\n//HLP     EXEC PAJHELP,MBR=SEIKOH,DSS='->.SOURCE.FILE3'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEIKOH": {"ttr": 15619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x15\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:15:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=SEIKO\n./     NUMBER  NEW1=100,INCR=100\n)F FUNCTION : FULL SCREEN DISPLAY CLOCK TIME.\n)X SYNTAX :   SEIKO INTERVAL(...)  OR  SEIKO I(...)\n         REQUIRED - NONE.\n         DEFAULT  - EVERY SECONDS.\n         ALIAS    - NONE.\n)O OPERAND :  INTERVAL - THE INTERVAL TIME EXPRESSED IN SECONDS (MAY\n              RANGE FROM 1 UP TO 60). THE DEFAULT VALUE IS 1.\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SNAKE": {"ttr": 15621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x1f\\x00\\x942\\x1f\\t0\\x07\\x16\\x07\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-17T00:00:00", "modifydate": "1994-11-17T09:30:00", "lines": 1814, "newlines": 1814, "modlines": 0, "user": "SYSPAJA"}, "text": "SNAK     TITLE '--- SNAKE - A PROGRAM FOR TSO 3270 TERMINALS ---'\nSNAKE    START 0\n         SPACE 1\n         ENTRY HALFSNAK\n         ENTRY HS\n         ENTRY QUARTERS\n         ENTRY QS\n         SPACE 1\n* AUTHOR : WRITTEN AUGUST 1987 BY GREG PRICE OF PRYCROFT SIX PTY LTD.\n* --------\n*\n* ORIGIN : EXTRACTED FROM TAPE CBT 91 MAR, FILE 134.\n* --------\n*\n* PURPOSE : FOR USE UNDER TSO ON 3270-FAMILY VDU IN FULLSCREEN MODE.\n* --------- SNAKE SUPPORTS ALL SCREEN SIZES.\n*\n* OBJECT : TO PICK UP AS MANY $25 BUNDLES AS POSSIBLE AND MAKE IT\n* -------- \"HOME\" WITHOUT BEING EATEN BY THE SNAKE. MONEY IS DENOTED\n*        BY A '$', THE PLAYER BY A 'I', HOME BY '#', AND THE SNAKE BY\n*        A STRING OF 'S'S IN LOWER CASE, WITH THE SNAKE'S HEAD BEING\n*        IN UPPER CASE. EACH TIME THE PLAYER MOVES THE SNAKE MOVES.\n*        AT FIRST THE SNAKE WILL MOVE ALMOST RANDOMLY, BUT WILL MAKE\n*        AN \"INTELLIGENT\" MOVE MORE OFTEN AS THE GAME PROGRESSES.\n*        WHEN THE PLAYER GETS \"HOME\" THE GAME ENDS AND THE SCORE IS\n*        CREDITED. IF THE PLAYER GETS \"EATEN\" THEN THE GAME ENDS AND\n*        NO SCORE IS CREDITED.\n*\n* METHOD : THE PLAYER DEPRESSES KEYS TO INDICATE WHICH DIRECTION THE\n* -------- 'I' SHOULD MOVE. MONEY IS GAINED BY MOVING THE 'I' TO A\n*        LOCATION OCCUPIED BY A '$', WHEREUPON ANOTHER '$' WILL BE\n*        RANDOMLY GENERATED AT A VACANT LOCATION. GETTING TO \"HOME\"\n*        IS ACHIEVED BY MOVING THE 'I' TO THE LOCATION OCCUPIED BY\n*        THE '#' WHICH DOES NOT MOVE DURING A GAME. GETTING \"EATEN\"\n*        BY THE SNAKE OCCURS WHEN THE SNAKE'S HEAD MOVES TO THE\n*        LOCATION OCCUPIED BY THE 'I'.\n         EJECT\n* INPUT :      PA KEYS - REFRESH THE SCREEN IMAGE\n* -------      PFK   1 - DISPLAY HELP SCREEN\n*              PFK   3 - CANCEL - END WITHOUT SCORING\n*              PFK   4 - TOGGLE SHOW-SNAKE-TRAIL SWITCH\n*              PFK   5 - TOGGLE BURST-MODE-WHEN-RUNNING SWITCH\n*              PFK   7 - MOVE UP ONE LOCATION\n*              PFK   8 - MOVE DOWN ONE LOCATION\n*              PFK  10 - MOVE LEFT ONE LOCATION\n*              PFK  11 - MOVE RIGHT ONE LOCATION\n*              PFK  12 - CANCEL - END WITHOUT SCORING\n*              PFK  13 - DISPLAY HELP SCREEN\n*              PFK  15 - CANCEL - END WITHOUT SCORING\n*              PFK  16 - TOGGLE SHOW-SNAKE-TRAIL SWITCH\n*              PFK  17 - TOGGLE BURST-MODE-WHEN-RUNNING SWITCH\n*              PFK  19 - RUN UP UNTIL LEVEL WITH MONEY\n*              PFK  20 - RUN DOWN UNTIL LEVEL WITH MONEY\n*              PFK  22 - RUN LEFT UNTIL LEVEL WITH MONEY\n*              PFK  23 - RUN RIGHT UNTIL LEVEL WITH MONEY\n*              PFK  24 - CANCEL - END WITHOUT SCORING\n*\n*        ANY OTHER INPUT, OR TRYING TO MOVE THROUGH AN OBSTRUCTION, IS\n*        EQUIVALENT TO STANDING STILL WHILE THE SNAKE GETS A MOVE.\n*        NOTE THAT RUNNING IS STOPPED BY AN OBSTRUCTION, BUT ONLY AFTER\n*        FAILING A MOVE ATTEMPT, THUS GIVING THE SNAKE AN EXTRA MOVE.\n*        ANY SNAKE TRAIL DATA PRESENT IS CLEARED BY A SCREEN IMAGE\n*        RESHOW/REFRESH.\n         EJECT\n* NOTES : IF THE FILE \"ISPTABL\" (CAN BE CHANGED TO ANY PDS DD WHICH\n* ------- EFFECTIVELY HAS UACC(UPDATE)) IS ALLOCATED THEN THE HIGHEST\n*        SCORE IS KEPT AS USER DATA (PFD (NOT SPF) STATS) OF MEMBER\n*        \"SNKTAB##\" (REVIEW WILL SHOW PFD AND SPF STATS) WHERE ## IS\n*        THE NUMBER OF LINES THAT THE SCREEN HAS.\n*\n*        IF THE TERMINAL'S VTAM QUERY BIT IS ON, THEN A QUERY WILL BE\n*        DONE TO DETERMINE IF 3270 EXTENDED DATA STREAM DATA CAN BE\n*        SENT.\n*\n*        IF INVOKED AS 'HALFSNAK' OR 'HS', THEN ONLY THE TOP HALF\n*        (INTEGER ARITHMETIC) OF THE SCREEN WILL BE USED. NATURALLY A\n*        DIFFERENT SCOREBOARD MEMBER WILL BE USED. SIMILARLY WITH\n*        'QUARTERS' AND 'QS'.\n*\n*        RUNNING CAN BE SPEEDED UP BY ACTIVATING BURST MODE. WHEN THIS\n*        IS DONE CONSECUTIVE RUNNING MOVES ARE DISPLAYED WITH ONE TPUT,\n*        THUS OPTIMIZING TERMINAL I/O. HOWEVER, DEPENDING UPON THE\n*        TERMINAL AND ITS CONTROLLER, EACH INDIVIDUAL MOVE MAY BE\n*        INVISIBLE AND THE USER WILL BE PRESENTED WITH THE FINAL SCREEN\n*        IMAGE.\n         SPACE 1\n* REMARKS : \"SNAKE\" REQUIRES AMODE=24 AND RMODE=24.\n* --------- \"SNAKE\" IS NOT RE-ENTRANT NOR SERIALLY REUSEABLE.\n         SPACE 1\n        $DEFREG\n         EJECT\n*------- INITIALIZATION.\n         SPACE 1\nHALFSNAK CNOP  0,8                 HALF-SCREEN VERSION ENTRY POINT.\nHS       CNOP  0,8                 SHORT FORM (ALIAS) OF HALFSNAK.\nQUARTERS CNOP  0,8                 QUARTER-SCREEN VERSION ENTRY POINT.\nQS       CNOP  0,8                 SHORT FORM (ALIAS) OF QUARTERS.\n        $XENT  BASE=(R11,R12,R7),LV=SNAKECML,TYPE=RENT\n         USING SNAKECMN,R13\n        GTSIZE ,\n         LTR   R0,R0               ZERO LINES?\n         BZ    NOTVDU              YES, PROBABLY ON A TTY.\n         CH    R0,=H'24'           LESS THAN TWENTY-FOUR LINES?\n         BL    WACKYVDU            YES, I DON'T BELIEVE IT.\n         CH    R0,=H'99'           MORE THAN NINETY-NINE LINES?\n         BH    WACKYVDU            YES, SCOREBOARD NAME WON'T WORK.\n         CH    R1,=H'40'           LESS THAN FORTY COLUMNS?\n         BL    WACKYVDU            YES, CAN'T BE AN HONEST-TO-GOD VDU.\n         SPACE 1\n         LR    R8,R0               SAVE LINES ON SCREEN.\n         LR    R9,R1               SAVE COLUMNS ON SCREEN.\n         XC    ZEROAREA(ZEROLEN),ZEROAREA ZERO A FEW VARIABLES.\n         MVI   GRAFLAGS,0          ALL GRAPHIC FEATURES TO BE VERIFIED.\n         L     R1,CVTPTR           POINT TO THE CVT.\n         USING CVT,R1\n         MVC   OSBITS(L'OSBITS),CVTDCB COPY THE OPERATING SYSTEM FLAGS.\n         DROP  R1\n         TM    OSBITS,CVT8AOS2+CVTMVS2 SOME SORT OF MVS?\n         BO    XATEST              YES.\n         MVC   SNAKFILE+DCBDDNAM-IHADCB(8),PFDATTRS NO, OSIV/F4.\nXATEST   TM    OSBITS,CVTMVSE      EXTENDED ARCHITECTURE OS?\n         BZ    GOTAMODE            NO, FORGET ABOUT 31-BIT ADDRESSING.\n         LA    R1,GOTAMODE         YES.\n         ICM   R1,B'1000',=X'80'   SET MODE BIT.\n         BSM   0,R1                GET INTO 31-BIT ADDRESSING MODE.\n         USING PSA,R0\nGOTAMODE L     R1,PSATOLD          POINT TO THE CURRENT TCB.\n         DROP  R0\n         USING TCB,R1\n         L     R3,TCBRBP           POINT TO THE ACTIVE RB.\n         USING RBBASIC,R3\n         L     R3,RBCDE            POINT TO THE ACTIVE CDE.\n         DROP  R3\n         ICM   R1,B'1111',TCBTCT   POINT TO THE TIMING CONTROL TABLE.\n         DROP  R1\n         BZ    NOSMF               SMF NOT ACTIVE SO FORGET IT.\n         ST    R1,TCTADDR          SAVE TIMING CONTROL TABLE ADDRESS.\n         USING SMFTCT,R1\n         MVC   TGETCNTO(8),TCTLIN  GET CURRENT TGET AND TPUT COUNTS.\n         DROP  R1\nNOSMF    TM    OSBITS,CVTMVSE      EXTENDED ARCHITECTURE OS?\n         BZ    SIZCHECK            NO, EXECUTING IN 370 MODE.\n         LA    R1,SIZCHECK         YES, CLEAR HIGH BYTE.\n         BSM   0,R1                REVERT TO 24-BIT ADDRESSING.\n         USING CDENTRY,R3\nSIZCHECK CLI   CDNAME,C'H'         INVOKED AS HALFSNAK?\n         BE    HALFSIZE            NO, ONLY USE HALF OF THE LINES.\n         CLI   CDNAME,C'Q'         INVOKED AS QUARTERS?\n         BNE   HAVESIZE            NO, USE ALL OF THE SCREEN.\n         DROP  R3\n         SRL   R8,1                HALVE OF NUMBER OF LINES.\nHALFSIZE SRL   R8,1                HALVE OF NUMBER OF LINES (AGAIN).\nHAVESIZE STM   R8,R9,LINES         STORE SCREEN DIMENSIONS.\n         LR    R3,R9               NUMBER OF COLUMNS.\n         CVD   R8,WORK             GET THE DECIMAL NUMBER OF LINES\n         OI    WORK+7,X'0F'        TO SUFFIX THE MEMBER NAME.\n         UNPK  BORDNAME+6(2),WORK+6(2)\n         SH    R8,=H'2'            TWO BORDERS.\n         ST    R8,MOVLINES         NUMBER OF NON-BORDER LINES.\n         SH    R9,=H'2'            TWO BORDERS.\n         ST    R9,MOVECOLS         NUMBER OF NON-BORDER COLUMNS.\n         MR    R2,R8               COLUMNS TIMES NUMBER OF BLANK LINES.\n         ST    R3,ELIGIBLS         FOR LATER (SIDE BORDERS WEIGHTED).\n         AL    R3,COLUMNS          GET BOTTOM BORDER LOCATION.\n         BCTR  R3,0                POINT TO LAST RIGHT SIDE BORDER.\n         ST    R3,LASTSPOT         SAVE LAST ELIGIBLE SPOT LOCATION.\n         L     R1,COLUMNS\n         M     R0,LINES            GET TOTAL SCREEN SIZE.\n         STH   R1,SCRNSIZE         SAVE IT FOR LATER.\n        GTTERM PRMSZE=WASTE,ATTRIB=TERMATTR GET TERMINAL ATTRIBUTES.\n         TM    TERMATTR+3,X'01'    QUERY BIT ON?\n         BZ    NOTGRAFC            NO, CAN'T DO QUERY.\n         LA    R1,RESETAID         YES, RESET THE TERMINAL AID AND\n         LA    R0,L'RESETAID       WAIT TILL THIS IS DONE\n         ICM   R1,B'1000',=X'0B'   BEFORE PROCEEDING.\n        TPUT   (1),(0),R           TPUT FULLSCR,WAIT,HOLD.\n        TPG    QUERY,L'QUERY,NOEDIT,WAIT\nQUERYGET LA    R1,BUFFER           TEMPORARY TGET BUFFER FOR RESPONSE\n         LA    R0,1024             FROM READ PARTITION.\n         ICM   R1,B'1000',=X'81'   FLAGS FOR TGET ASIS,WAIT.\n        TGET   (1),(0),R           TGET ASIS,WAIT.\n         CLI   BUFFER,X'88'        QUERY RESPONSE AID?\n         BNE   NOTGRAFC            NO, UNEXPECTED DATA, FORGET QUERY.\n         XR    R0,R0               CLEAR FOR INSERTS.\n         LA    R15,BUFFER          POINT TO THE AID.\nNOTSBFLD LA    R15,1(,R15)         IGNORE A BYTE.\n         BCT   R1,QUERYPRS         DECREMENT THE LENGTH.\n         B     NOTGRAFC            JUST IN CASE THAT WAS THE LAST BYTE.\nQUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?\n         BNE   NOTSBFLD            NO, SKIP A BYTE.\n         TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?\n         BNO   NOTSBFLD            NO, SKIP A BYTE.\n         CLI   0(R15),0            LENGTH LESS THAT 256?\n         BNE   NOTSBFLD            NO, SKIP A BYTE.\n         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?\n         BE    QUERYCLR            YES, PROCESS COLOUR SUPPORT.\n         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?\n         BE    QUERYHLT            YES, PROCESS HIGHLIGHTING SUPPORT.\n         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?\n         BE    QUERYSYM            YES, PROCESS SYMBOL SETS SUPPORT.\n         CLI   3(R15),X'93'        QUERY REPLY PC ATTACHMENT ID?\n         BE    QUERYPCA            YES, PROCESS PC/PS2 3270 EMULATION.\nNXTSBFLD ICM   R0,B'0011',0(R15)   NO, LOAD SUB-FIELD LENGTH.\n         SR    R1,R0               SUBTRACT IT FROM TGET DATA LENGTH.\n         BZ    NOTGRAFC            END OF QUERY, INITIALIZATION DONE.\n         BM    QUERYGET            QUERY CONTINUES IN NEXT BLOCK.\n         AR    R15,R0              POINT TO NEXT SUB-FIELD.\n         B     QUERYPRS            EXAMINE IT.\nQUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?\n         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT.\n         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?\n         BNE   NXTSBFLD            NO, DON'T SET 7-COLOUR MODE.\n         OI    GRAFLAGS,COLR       FLAG COLOUR SUPPORT CERTAINTY.\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED.\nQUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?\n         BL    NXTSBFLD            NO, SO DO NOT FLAG IT.\n         CLC   7(6,R15),=CL6'112244' YES, BLINK, REVERSE+UNDERSCORE OK?\n         BNE   NXTSBFLD            NO.\n         OI    GRAFLAGS,HLIT       YES, FLAG HIGHLIGHTING SUPPORT.\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED.\nQUERYSYM OI    GRAFLAGS,SYMSET     FLAG SYMBOL-SETS SUB-FIELD RETURNED.\n         TM    4(R15),X'80'        IS GRAPHICS ESCAPE SUPPORTED?\n         BZ    NXTSBFLD            NO, SO DO NOT FLAG IT.\n         OI    GRAFLAGS,GEOK       YES, FLAG GRAPHICS ESCAPE SUPPORT.\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED.\nQUERYPCA OI    GRAFLAGS,PCAF       FLAG PC ATTACHMENT FACILITY TERM.\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED.\nNOTGRAFC LA    R0,X'28'            LOAD IBM SET ATTRIBUTE ORDER CODE.\n         TM    OSBITS,CVT8AOS2+CVTMVS2 IS OSIV/F4? (ASSUME NOT SVS!)\n         BO    GOTSACDE            NO, ASSUME NO FJ GEAR ON IBM SYSTEM.\n         TM    GRAFLAGS,SYMSET+PCAF \"SYMBOL-SETS\" OR 3270 EMULATION?\n         BNZ   GOTSACDE            YES, CAN'T BE 6682 OR 6683 SCREEN.\n         LA    R0,X'0E'            LOAD FACOM SET ATTRIBUTE ORDER CODE.\nGOTSACDE STC   R0,BLUE             INSERT CORRECT SA INTO DATA STREAMS.\n         STC   R0,RED\n         STC   R0,PINK\n         STC   R0,GREEN\n         STC   R0,TURQ\n         STC   R0,YELLOW\n         STC   R0,WHITE\n         STC   R0,NOHILITE\n         STC   R0,BLINKING\n         STC   R0,REVERSE\n         STC   R0,UNDERSCR\n         STC   R0,RESETSA\n         MVC   BUFFER(HDRLEN),BUFHDR\n         LA    R2,HDRLEN           LENGTH OF DATA STREAM SO FAR.\n         LA    R1,BUFFER+HDRLEN    POINT TO NEXT VACANT BUFFER POS.\n         MVI   BORDCHAR,C'X'       LOAD THE BORDER CHARACTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    NOTURQ              NO.\n         MVC   0(3,R1),TURQ        YES, USE A PRETTY COLOUR.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNOTURQ   TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    X4BORDER            NO, USE 'X'S FOR BORDER.\n         MVC   0(3,R1),REVERSE     USE REVERSE VIDEO BLANKS FOR BORDER.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\n         MVI   BORDCHAR,C' '       LOAD THE BORDER CHARACTER.\nX4BORDER MVI   0(R1),X'3C'         REPEAT-TO-ADDRESS.\n         LA    R0,1\n         AL    R0,COLUMNS          GET LOCATION OF 1ST NON-BORDER POSI.\n         STH   R0,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         STCM  R0,B'0011',1(R1)    ADDRESS PART OF REPEAT-TO-ADDRESS.\n         MVC   3(1,R1),BORDCHAR    MAKE THE TOP BORDER.\n         LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         L     R3,COLUMNS\n         BCTR  R3,0                POINT TO TOP RIGHT CORNER.\n         L     R15,MOVLINES        LOOP COUNTER.\nBORDERLP AL    R3,COLUMNS          POINT TO NEXT RIGHT SIDE BORDER.\n         STH   R3,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)    ADDRESS PART OF SET-BUFFER-ADDRESS.\n         MVC   3(1,R1),BORDCHAR    SUPPLY RIGHT SIDE BORDER.\n         MVC   4(1,R1),BORDCHAR    SET LEFT SIDE BORDER ON NEXT LINE.\n         LA    R1,5(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,5(,R2)           ADJUST LENGTH COUNTER.\n         BCT   R15,BORDERLP        MAKE THE NEXT LINE'S BORDER.\n         CLI   COLUMNS+3,80        LESS THAN EIGHTY COLUMNS?\n         BL    ACRNOKAY            YES, FORGET ABOUT SHOWING ACRONYM.\n         MVC   0(ACRNMLEN,R1),ACRNMMSG MAKE THE BOTTOM BORDER.\n         LA    R1,ACRNMLEN(,R1)    ADJUST BUFFER POINTER.\n         LA    R2,ACRNMLEN(,R2)    ADJUST LENGTH COUNTER.\nACRNOKAY MVC   0(3,R1),REPTOTOP\n         MVC   3(1,R1),BORDCHAR\n         LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    UNREVSNK            NO.\n         MVC   0(3,R1),NOHILITE    YES, NO HIGHLIGHTING FOR SNAKE.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nUNREVSNK TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    NOGRNSNK            NO.\n         MVC   0(3,R1),GREEN       YES, COLOUR THE SNAKE.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNOGRNSNK L     R5,LINES\n         SRL   R5,1\n         BCTR  R5,0\n         BCTR  R5,0                GET INITIAL LINE NUMBER.\n         M     R4,COLUMNS\n         LA    R5,10(,R5)          FIXED INITIAL LOCATION FOR SNAKE.\n         LA    R3,SNAKELOC\n         LA    R4,THESNAKE\n         LA    R15,SNAKELEN/4\nINITLOOP STH   R5,TOLOC            LOCATION OF THIS SNAKE SEGMENT.\n         STH   R5,0(,R3)           SAVE IT IN SNAKELOC.\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         STCM  R0,B'0011',1(R4)    SAVE IT IN THESNAKE.\n         LA    R5,1(,R5)           GET INITIAL LOC. OF NEXT SEGMENT.\n         LA    R3,2(,R3)           UPDATE SNAKELOC POINTER.\n         LA    R4,4(,R4)           UPDATE THESNAKE POINTER.\n         BCT   R15,INITLOOP        INITIALIZE NEXT SNAKE SEGMENT.\n         BCTR  R5,0                POINT BACK TO SNAKE'S HEAD.\n         XR    R4,R4               CLEAR FOR DIVIDE.\n         D     R4,COLUMNS\n         STM   R4,R5,SNAKEX        SAVE SNAKE'S HEAD'S CO-ORDS.\n         ST    R1,SNAKEPTR         SAVE ADDR. OF SNAKE IN DATA STREAM.\n         MVC   0(SNAKELEN-4,R1),THESNAKE+4\n         LA    R1,SNAKELEN-4(,R1)  ADJUST LENGTH POINTER.\n         LA    R2,SNAKELEN-4(,R2)  ADJUST LENGTH COUNTER.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         ST    R1,HOMEPNTR         SAVE ADDRESS OF HOME IN DATA STREAM.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    NORMHOME            NO, NORMAL VIDEO FOR HOME.\n         MVC   3(3,R1),REVERSE     YES, PUT REVERSE VIDEO BACK ON.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNORMHOME TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    MONOHOME            NO, MONOCHROME.\n         MVC   3(3,R1),RED         YES, LOAD THE COLOUR FOR HOME.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nMONOHOME MVI   3(R1),C'#'          LOAD THE CHARACTER DENOTING HOME.\n         TM    GRAFLAGS,GEOK       GRAPHIC ESCAPE SUPPORTED?\n         BZ    MADEHOME            NO, HOME NOW BUILT.\n         MVC   3(2,R1),=X'08C3'    YES, USE A GRAPHIC CHAR FOR HOME.\n         LA    R1,1(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,1(,R2)           ADJUST LENGTH COUNTER.\nMADEHOME LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    HOMEDONE            NO, ALREADY NORMAL.\n         MVC   0(3,R1),NOHILITE    YES, TURN OFF REVERSE VIDEO.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHOMEDONE MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         ST    R1,PLAYRPTR         SAVE ADDRESS OF PLAYER DATA.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    MONOPLYR            NO, MONOCHROME.\n         MVC   3(3,R1),WHITE       YES, LOAD THE COLOUR FOR THE PLAYER.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nMONOPLYR MVI   3(R1),C'I'          LOAD CHARACTER DENOTING THE PLAYER.\n         LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         ST    R1,MONEYPTR         SAVE ADDR. OF MONEY IN DATA STREAM.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    MONOMONY            NO, MONOCHROME.\n         MVC   3(3,R1),YELLOW      YES, LOAD THE COLOUR FOR THE MONEY.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nMONOMONY MVI   3(R1),C'$'          LOAD THE CHARACTER DENOTING MONEY.\n         LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         ST    R1,TRLRPNTR         SAVE ADDRESS OF DATA STREAM TRAILER.\n         MVC   0(4,R1),STRMTRLR    TACK ON DATA STREAM TRAILER.\n         LA    R2,4(,R2)           ADJUST LENGTH COUNTER.\n         ST    R2,IMAGESIZ         SAVE IT FOR SCREEN REFRESHES.\n         MVI   UPDTSTRM,X'C1'      WCC TO RESET MDT.\n        STFSMODE ON,INITIAL=YES    ACTIVATE VTAM FULL SCREEN MODE.\n         EJECT\n*------- GENERATE A NEW TARGET.\n         SPACE 1\nNEWTARG TIME   TU                  GET A \"RANDOM NUMBER\".\n         ST    R0,RANDOMTU         SAVE NEW RANDOM NUMBER SEED.\n         LR    R6,R0               SAVE THE TIMER UNITS VALUE.\nNEWISHTG LR    R3,R6               CURRENT TIMER UNITS FOR RANDOM #.\n         XR    R2,R2               CLEAR FOR DIVIDE.\n         D     R2,ELIGIBLS         DIVIDE # ELIGIBLES + VERT BORDERS.\n         L     R5,COLUMNS          GET NUMBER OF COLUMNS.\n         AR    R2,R5               + OFFSET FOR TOP BORDER TO GET LOC.\nCHEKSPOT LR    R4,R2               COPY THE SCREEN LOCATION.\n         SRDL  R2,32               PREPARE THE LOCATION FOR DIVIDE.\n         DR    R2,R5               DIVIDE SCREEN LOC. OFFSET BY COLS.\n         LR    R1,R5\n         BCTR  R1,0                GET COLUMNS-1 FOR LATER.\n         LTR   R2,R2               ON LEFT SIDE BORDER?\n         BNZ   NOTONLFT            NO BECAUSE REMAINDER IS NOT ZERO.\n         LA    R4,1(,R4)           YES, SO ADD ONE FOR NEXT LOCATION.\n         B     NOTONRIT\nUSEDSPOT LA    R2,1(,R4)           POINT TO THE NEXT SPOT.\n         B     CHEKSPOT            RESTART VERIFICATION.\nNOTONLFT CR    R2,R1               ON RIGHT SIDE BORDER?\n         BNE   NOTONRIT            NO.\n         LA    R4,2(,R4)           YES, SO ADD TWO (SKIP LEFT ALSO).\nNOTONRIT C     R4,LASTSPOT         GONE PASSED END OF SCREEN?\n         BL    STILLLOW            NO.  (NOT YET ANYWAY.)\n         LA    R4,1                YES, START AT TOP LEFT AGAIN.\n         AL    R4,COLUMNS          POINT PAST TOP BORDER LINE.\nSTILLLOW LA    R15,SNAKELEN/4-1    GET NUMBER OF SNAKE SEGMENTS.\n         LA    R3,SNAKELOC         POINT TO SNAKE LOCATION VECTOR.\nSNKCHKLP CH    R4,2(,R3)           \"RANDOM\" SPOT FILLED BY SNAKE?\n         BE    USEDSPOT            YES.\n         LA    R3,2(,R3)           NO, POINT TO NEXT SEGMENT.\n         BCT   R15,SNKCHKLP        LOOP THROUGH SNAKE CHECK AGAIN.\n         ICM   R15,B'0011',HOMELOCN GET LOCATION OF HOME.\n         BNZ   HOMEOKAY            HOME HAS BEEN MADE ALREADY.\n         STH   R4,HOMELOCN         NO HOME - BUT THERE IS NOW.\n         STH   R4,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF HOME.\n         L     R1,HOMEPNTR\n         STCM  R0,B'0011',1(R1)    UPDATE REFRESH DATA STREAM.\n         SRL   R6,1                SIMULATE NEW \"RANDOM NUMBER\".\n         B     NEWISHTG            NEED NEW LOCATION FOR MONEY NOW.\nHOMEOKAY CR    R4,R15              IS NEW SPOT OCCUPIED BY HOME?\n         BE    USEDSPOT            YES, SELECT ANOTHER.\n         ICM   R15,B'0011',PLAYRLOC NO, GET LOCATION OF PLAYER.\n         BNZ   PLYROKAY            PLAYER HAS BEEN LOCATED.\n         STH   R4,PLAYRLOC         NO PLAYER - BUT THERE IS NOW.\n         STH   R4,TOLOC\n         SRDL  R4,32               PREPARE FOR DIVIDE.\n         D     R4,COLUMNS\n         STM   R4,R5,PLAYERX       SAVE PLAYER'S CO-ORDINATES.\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF PLAYER.\n         L     R1,PLAYRPTR\n         STCM  R0,B'0011',1(R1)    UPDATE REFRESH DATA STREAM.\n         SRL   R6,1                SIMULATE NEW \"RANDOM NUMBER\".\n         B     NEWISHTG            NEED NEW LOCATION FOR MONEY NOW.\nPLYROKAY CR    R4,R15              IS NEW SPOT OCCUPIED THE PLAYER?\n         BE    USEDSPOT            YES, SELECT ANOTHER.\n         STH   R4,MONEYLOC         SAVE THE MONEY LOCATION.\n         STH   R4,TOLOC\n         SRDL  R4,32               PREPARE FOR DIVIDE.\n         D     R4,COLUMNS\n         STM   R4,R5,MONEYX        SAVE MONEY'S CO-ORDINATES.\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDR. OF THE MONEY.\n         L     R1,MONEYPTR\n         STCM  R0,B'0011',1(R1)    UPDATE REFRESH DATA STREAM.\n         ICM   R15,B'0011',TPUTLEN GET UPDATE DATA STREAM LENGTH.\n         BZ    RESHOW              IF ZERO THEN SEND INITIAL SCREEN.\n         ICM   R3,B'1111',SCOREPTR POINT TO SCORE DISPLAY.\n         BNZ   UPDTESCR            GO AND UPDATE IT.\n         L     R3,TRLRPNTR         NO SCORE DISPLAY YET SO MAKE ONE.\n         ST    R3,SCOREPTR         SAVE SCORE DISPLAY POINTER.\n         XR    R2,R2               ZERO EXTRA DATA LENGTH COUNTER.\n         MVC   1(2,R3),=X'40C2'    SBA ALREADY OK SO JUST GIVE ADDRESS.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    NORMSCOR            NO, ALREADY NORMAL.\n         MVC   3(3,R3),REVERSE     YES, REVERSE LIKE REST OF BORDER.\n         LA    R3,3(,R3)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNORMSCOR MVC   3(1,R3),BORDCHAR    NORMAL BORDER UP TO DOLLAR SIGN.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    NORMTRLR            NO, ALREADY NORMAL.\n         MVC   9(3,R3),NOHILITE    YES, TURN OFF REVERSE.\n         LA    R3,3(,R3)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNORMTRLR LA    R3,9(,R3)           ADJUST BUFFER POINTER.\n         LA    R2,9(,R2)           ADJUST LENGTH COUNTER.\n         ST    R3,TRLRPNTR         SAVE NEW TRAILER DATA ADDRESS.\n         MVC   0(4,R3),STRMTRLR    SUPPLY TRAILER AGAIN.\n         A     R2,IMAGESIZ         ADD PREVIOUS IMAGE SIZE.\n         ST    R2,IMAGESIZ         SAVE NEW IMAGE SIZE FOR REFRESH.\n         L     R3,SCOREPTR         POINT TO SCORE DATA.\nUPDTESCR TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    NORMUPDT            NO.\n         LA    R3,3(,R3)           YES, POINT PAST REVERSE.\nNORMUPDT MVC   4(5,R3),=X'2020202120' BIG ENOUGH FOR HALFWORD.\n         LH    R1,SCORE            GET THE LATEST POTENTIAL SCORE.\n         CVD   R1,WORK             MAKE IT DECIMAL, CAN'T BE ZERO.\n         EDMK  3(6,R3),WORK+5      DISPLAY THE SCORE.\n         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT.\n         MVI   0(R1),C'$'          SUPPLY DOLLAR SIGN.\n         LA    R1,UPDTSTRM(R15)    GET CURRENT BUFFER POSITION.\n         L     R5,PLAYRPTR         POINT TO SBA FOR PLAYER.\n         L     R4,MONEYPTR         POINT TO SBA FOR MONEY.\n         LR    R3,R4               COPY IT.\n         SR    R4,R5               GET LENGTH OF MONEY DATA STREAM.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE MONEY DATA STREAM.\n         LA    R1,1(R4,R1)         ADJUST DATA STREAM BUFFER POINTER.\n         LA    R15,1(R4,R15)       ADJUST DATA STREAM LENGTH COUNTER.\n         L     R3,SCOREPTR         POINT TO SCORE DATA STREAM.\n         L     R4,TRLRPNTR         POINT TO TRAILER DATA STREAM.\n         SR    R4,R3               GET SCORE DATA STREAM LENGTH.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE SCORE DATA STREAM.\n         LA    R15,1(R4,R15)       ADJUST DATA STREAM LENGTH COUNTER.\n         STH   R15,TPUTLEN         SAVE THE UPDATE DATA STREAM LENGTH.\n         NI    SNAKFLAG,255-NEXT   NEXT TARGET NO LONGER REQUIRED.\n         L     R1,CASHCNTR         GET THE NUMBER OF MONEY BUNDLES\n         LA    R1,1(,R1)           GRABBED SO FAR, INCREMENT IT,\n         ST    R1,CASHCNTR         AND SAVE IT AGAIN.\n         L     R1,CASHMOVS         GET MOVE COUNT FOR PREVIOUS MONEY.\n         A     R1,THISTREK         ADD MOVES FOR THIS MONEY BUNDLE.\n         ST    R1,CASHMOVS\n         XR    R1,R1\n         ST    R1,THISTREK         RESET MOVES-SINCE-LAST-CASH COUNTER.\n         B     TPUTSOME            DISPLAY THE NEW MONEY.\nDATAMOVE MVC   0(0,R1),0(R3)       <<< EXECUTED >>>\n         EJECT\n*------- TERMINAL INPUT/OUTPUT.\n         SPACE 1\nTPUTSOME CLC   TPUTLEN,MAXACCUM    IS THE DATA STREAM A BIT LONGISH?\n         BH    FORCTPUT            YES, BETTER SEND IT.\n         TM    SNAKFLAG,EATEN      IS PLAYER NOW SWALLOWED?\n         BO    FORCTPUT            YES, SEND ACCUMULATED DATA.\n         TM    SNAKFLAG,RUN+BURST  CURRENTLY RUNNING IN BURST MODE?\n         BO    RUNAWAY             YES, ACCUMULATE MORE DATA FOR TPUT.\nFORCTPUT LH    R15,TPUTLEN         NO, GET THE DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM(R15)    POINT PAST END OF DATA.\n         MVC   0(4,R1),STRMTRLR    TACK ON DATA STREAM TRAILER.\n         LA    R0,4(,R15)          GET TOTAL DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         POINT TO THE DATA STREAM.\n         ICM   R1,B'1000',=X'03'   LOAD TPUT FULLSCREEN FLAGS.\n        TPUT   (1),(0),R           SHOW THE DATA UPDATES.\n         TM    SNAKFLAG,EATEN      IS PLAYER NOW SWALLOWED?\n         BO    IAREDEAD            YES, A NOD'S AS GOOD AS A WINK.\nTGETSOME LA    R15,1\n         STH   R15,TPUTLEN         RESET THE UPDATE DATA ACCUMULATOR.\n         TM    SNAKFLAG,RUN        CURRENTLY RUNNING?\n         BO    RUNAWAY             YES, DECIDE WHICH WAY.\n         XC    WORK,WORK           ERASE PREVIOUS INPUT.\n         LA    R1,WORK             POINT TO THE INPUT BUFFER.\n         LA    R0,8                GET THE BUFFER LENGTH.\n         ICM   R1,B'1000',=X'81'   LOAD TGET ASIS,WAIT FLAGS.\n        TGET   (1),(0),R           GET THE PLAYER'S RESPONSE.\n         LR    R2,R1               SAVE TGET INPUT DATA LENGTH.\n         CH    R15,=H'12'          WAS REPLY AREA LONG ENOUGH?\n         BNE   TGETOKAY            YES, EXAMINE INPUT.\n        TCLEARQ INPUT              NO, FLUSH THE INPUT BUFFERS.\nTGETOKAY CH    R2,BORDBLDL         PA KEY HIT?  (ONE INPUT DATA BYTE?)\n         BNH   RESHOW              YES, PERFORM SCREEN REFRESH.\n         CLI   WORK,X'F1'          PFK 1?\n         BE    HELPSCRN            YES, FORMAT AND DISPLAY HELP SCREEN.\n         CLI   WORK,X'F3'          PFK 3?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'F4'          PFK 4?\n         BE    TRAILSW             YES, SWITCH TRAIL.\n         CLI   WORK,X'F5'          PFK 5?\n         BE    BURSTSW             YES, SWITCH BURST MODE.\n         CLI   WORK,X'F7'          PFK 7?\n         BE    STEPUP              YES, MOVE UP.\n         CLI   WORK,X'F8'          PFK 8?\n         BE    STEPDOWN            YES, MOVE DOWN.\n         CLI   WORK,X'7A'          PFK 10?\n         BE    STEPLEFT            YES, MOVE LEFT.\n         CLI   WORK,X'7B'          PFK 11?\n         BE    STEPRITE            YES, MOVE RIGHT.\n         CLI   WORK,X'7C'          PFK 12?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'C1'          PFK 13?\n         BE    HELPSCRN            YES, FORMAT AND DISPLAY HELP SCREEN.\n         CLI   WORK,X'C3'          PFK 15?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'C4'          PFK 16?\n         BE    TRAILSW             YES, SWITCH TRAIL.\n         CLI   WORK,X'C5'          PFK 17?\n         BE    BURSTSW             YES, SWITCH BURST MODE.\n         CLI   WORK,X'C7'          PFK 19?\n         BE    RUNUP               YES, MOVE UP.\n         CLI   WORK,X'C8'          PFK 20?\n         BE    RUNDOWN             YES, MOVE DOWN.\n         CLI   WORK,X'4A'          PFK 22?\n         BE    RUNLEFT             YES, MOVE LEFT.\n         CLI   WORK,X'4B'          PFK 23?\n         BE    RUNRIGHT            YES, MOVE RIGHT.\n         CLI   WORK,X'4C'          PFK 24?\n         BE    CLEANUP             YES, TERMINATE.\n         B     SLITHER             USELESS, SO JUST MOVE THE SNAKE.\n         SPACE 1\nRESHOW   LA    R1,BUFFER           POINT TO SCREEN IMAGE START.\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH.\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS.\n        TPUT   (1),(0),R           DISPLAY ENTIRE SCREEN IMAGE.\n         B     TGETSOME            GO WAIT FOR MORE INPUT.\n         SPACE 1\nTRAILSW  XI    THESNAKE+3,X'0B'    TOGGLE TRAIL BETWEEN BLANK AND DOT.\n         B     TGETSOME            GO WAIT FOR MORE INPUT.\n         SPACE 1\nBURSTSW  XI    SNAKFLAG,BURST      TOGGLE BURST-MODE FLAG.\n         B     TGETSOME            GO WAIT FOR MORE INPUT.\n         SPACE 1\nHELPSCRN MVC   UPDTSTRM(HDRLEN),BUFHDR\n         LA    R2,HDRLEN           LENGTH OF DATA STREAM SO FAR.\n         LA    R1,UPDTSTRM+HDRLEN  POINT TO NEXT VACANT BUFFER POS.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         L     R5,COLUMNS\n         SLL   R5,1\n         LA    R15,1(,R5)          GET LOCATION FOR SNAKE LEGEND.\n         STH   R15,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         STCM  R0,B'0011',1(R1)\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HNGRNSNK            NO.\n         MVC   0(3,R1),GREEN       YES, COLOUR THE SNAKE.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHNGRNSNK MVI   0(R1),X'A2'         SHOW A PICTURE OF THE SNAKE.\n         MVC   1(6,R1),0(R1)\n         MVI   7(R1),X'E2'\n         LA    R1,8(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,8(,R2)           ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR1            NO.\n         MVC   0(3,R1),BLUE        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR1 MVC   0(L'HLPMSG01,R1),HLPMSG01\n         LA    R1,L'HLPMSG01(,R1)  ADJUST BUFFER POINTER.\n         LA    R2,L'HLPMSG01(,R2)  ADJUST LENGTH COUNTER.\n         L     R3,PLAYRPTR         POINT TO PLAYER'S SBA.\n         L     R4,MONEYPTR         POINT TO SBA FOR MONEY.\n         SR    R4,R3               GET LENGTH OF PLAYER DATA STREAM.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE PLAYER DATA STREAM.\n         LA    R15,27(,R5)         GET LOCATION FOR PLAYER LEGEND.\n         STH   R15,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         STCM  R0,B'0011',1(R1)\n         LA    R1,1(R4,R1)         ADJUST BUFFER POINTER.\n         LA    R2,1(R4,R2)         ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR2            NO.\n         MVC   0(3,R1),BLUE        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR2 MVC   0(L'HLPMSG02,R1),HLPMSG02\n         LA    R1,L'HLPMSG02(,R1)  ADJUST BUFFER POINTER.\n         LA    R2,L'HLPMSG02(,R2)  ADJUST LENGTH COUNTER.\n         L     R3,HOMEPNTR         POINT TO SBA FOR HOME.\n         L     R4,PLAYRPTR         POINT TO PLAYER'S SBA.\n         SR    R4,R3               GET LENGTH OF HOME DATA STREAM.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE PLAYER DATA STREAM.\n         A     R5,COLUMNS\n         LA    R15,1(,R5)          GET LOCATION FOR HOME LEGEND.\n         STH   R15,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         STCM  R0,B'0011',1(R1)\n         LA    R1,1(R4,R1)         ADJUST BUFFER POINTER.\n         LA    R2,1(R4,R2)         ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR3            NO.\n         MVC   0(3,R1),BLUE        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR3 MVC   0(L'HLPMSG03,R1),HLPMSG03\n         LA    R1,L'HLPMSG03(,R1)  ADJUST BUFFER POINTER.\n         LA    R2,L'HLPMSG03(,R2)  ADJUST LENGTH COUNTER.\n         L     R3,MONEYPTR         POINT TO SBA FOR MONEY.\n         ICM   R4,B'1111',SCOREPTR POINT TO SCORE DISPLAY.\n         BNZ   MONEYEND            GOT END OF THE MONEY DATA STREAM.\n         L     R4,TRLRPNTR         POINT TO SBA FOR TRAILER.\nMONEYEND SR    R4,R3               GET LENGTH OF MONEY DATA STREAM.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE PLAYER DATA STREAM.\n         LA    R15,18(,R5)         GET LOCATION FOR MONEY LEGEND.\n         STH   R15,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         STCM  R0,B'0011',1(R1)\n         LA    R1,1(R4,R1)         ADJUST BUFFER POINTER.\n         LA    R2,1(R4,R2)         ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR4            NO.\n         MVC   0(3,R1),BLUE        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR4 MVC   0(L'HLPMSG04,R1),HLPMSG04\n         LA    R1,L'HLPMSG04(,R1)  ADJUST BUFFER POINTER.\n         LA    R2,L'HLPMSG04(,R2)  ADJUST LENGTH COUNTER.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR5            NO.\n         MVC   0(3,R1),TURQ        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR5 A     R5,COLUMNS\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG05,R1),HLPMSG05\n         LA    R1,L'HLPMSG05+3(,R1)\n         LA    R2,L'HLPMSG05+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG06,R1),HLPMSG06\n         LA    R1,L'HLPMSG06+3(,R1)\n         LA    R2,L'HLPMSG06+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG07,R1),HLPMSG07\n         LA    R1,L'HLPMSG07+3(,R1)\n         LA    R2,L'HLPMSG07+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG08,R1),HLPMSG08\n         LA    R1,L'HLPMSG08+3(,R1)\n         LA    R2,L'HLPMSG08+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG09,R1),HLPMSG09\n         LA    R1,L'HLPMSG09+3(,R1)\n         LA    R2,L'HLPMSG09+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG10,R1),HLPMSG10\n         LA    R1,L'HLPMSG10+3(,R1)\n         LA    R2,L'HLPMSG10+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR PFK HELP.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG11,R1),HLPMSG11\n         LA    R1,L'HLPMSG11+3(,R1)\n         LA    R2,L'HLPMSG11+3(,R2)\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    HLPCOLR6            NO.\n         MVC   0(3,R1),BLUE        YES, COLOUR THE TEXT.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nHLPCOLR6 A     R5,COLUMNS\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG12,R1),HLPMSG12\n         LA    R1,L'HLPMSG12+3(,R1)\n         LA    R2,L'HLPMSG12+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG13,R1),HLPMSG13\n         LA    R1,L'HLPMSG13+3(,R1)\n         LA    R2,L'HLPMSG13+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG14,R1),HLPMSG14\n         LA    R1,L'HLPMSG14+3(,R1)\n         LA    R2,L'HLPMSG14+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG15,R1),HLPMSG15\n         LA    R1,L'HLPMSG15+3(,R1)\n         LA    R2,L'HLPMSG15+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG16,R1),HLPMSG16\n         LA    R1,L'HLPMSG16+3(,R1)\n         LA    R2,L'HLPMSG16+3(,R2)\n         A     R5,COLUMNS          GET LOCATION FOR HELP TEXT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF TEXT.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R1)\n         MVC   3(L'HLPMSG17,R1),HLPMSG17\n         LA    R1,L'HLPMSG17+3(,R1)\n         LA    R2,L'HLPMSG17+3(,R2)\n         MVC   0(4,R1),STRMTRLR    TACK ON DATA STREAM TRAILER.\nREDOHELP LA    R0,4(,R2)           GET FINAL HELP DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         POINT TO HELP SCREEN IMAGE START.\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS.\n        TPUT   (1),(0),R           DISPLAY ENTIRE SCREEN IMAGE.\n         XC    WORK,WORK           ERASE PREVIOUS INPUT.\n         LA    R1,WORK             POINT TO THE INPUT BUFFER.\n         LA    R0,8                GET THE BUFFER LENGTH.\n         ICM   R1,B'1000',=X'81'   LOAD TGET ASIS,WAIT FLAGS.\n        TGET   (1),(0),R           GET THE PLAYER'S RESPONSE.\n         LR    R3,R1               SAVE TGET INPUT DATA LENGTH.\n         CH    R15,=H'12'          WAS REPLY AREA LONG ENOUGH?\n         BNE   HELPOKAY            YES, EXAMINE INPUT.\n        TCLEARQ INPUT              NO, FLUSH THE INPUT BUFFERS.\nHELPOKAY CH    R3,BORDBLDL         PA KEY HIT?  (ONE INPUT DATA BYTE?)\n         BNH   REDOHELP            YES, RESHOW HELP SCREEN.\n         CLI   WORK,X'F1'          PFK 1?\n         BE    REDOHELP            YES, RESHOW HELP SCREEN.\n         CLI   WORK,X'F3'          PFK 3?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'7C'          PFK 12?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'C1'          PFK 13?\n         BE    REDOHELP            YES, RESHOW HELP SCREEN.\n         CLI   WORK,X'C3'          PFK 15?\n         BE    CLEANUP             YES, TERMINATE.\n         CLI   WORK,X'4C'          PFK 24?\n         BE    CLEANUP             YES, TERMINATE.\n         B     RESHOW              NO, BACK TO THE MATTER AT HAND.\n         EJECT\n*------- PLAYER MOVEMENT.\n         SPACE 1\nRUNAWAY  XR    R1,R1               PLAYER IS RUNNING, BUT WHICH WAY?\n         IC    R1,RUNINDEX         POINT TO CORRECT DIRECTION'S CODE.\n         B     RUNTABLE(R1)        GO TO IT.\nRUNTABLE B     STEPUP              +0\n         B     STEPDOWN            +4\n         B     STEPLEFT            +8\n         B     STEPRITE            +12\n         SPACE 1\nRUNUP    MVI   RUNINDEX,0          LOAD RUNTABLE INDEX.\n         OI    SNAKFLAG,RUN        FLAG RUNNING STATUS.\nSTEPUP   LH    R1,PLAYRLOC         GET THE PLAYER'S LOCATION.\n         SL    R1,COLUMNS          POINT TO NEW LOCATION.\n         B     TAKESTEP            GO PERFORM FEASIBILITY STUDY.\n         SPACE 1\nRUNDOWN  MVI   RUNINDEX,4          LOAD RUNTABLE INDEX.\n         OI    SNAKFLAG,RUN        FLAG RUNNING STATUS.\nSTEPDOWN LH    R1,PLAYRLOC         GET THE PLAYER'S LOCATION.\n         AL    R1,COLUMNS          POINT TO NEW LOCATION.\n         B     TAKESTEP            GO PERFORM FEASIBILITY STUDY.\n         SPACE 1\nRUNLEFT  MVI   RUNINDEX,8          LOAD RUNTABLE INDEX.\n         OI    SNAKFLAG,RUN        FLAG RUNNING STATUS.\nSTEPLEFT LH    R1,PLAYRLOC         GET THE PLAYER'S LOCATION.\n         BCTR  R1,0                POINT TO NEW LOCATION.\n         B     TAKESTEP            GO PERFORM FEASIBILITY STUDY.\n         SPACE 1\nRUNRIGHT MVI   RUNINDEX,12         LOAD RUNTABLE INDEX.\n         OI    SNAKFLAG,RUN        FLAG RUNNING STATUS.\nSTEPRITE LH    R1,PLAYRLOC         GET THE PLAYER'S LOCATION.\n         LA    R1,1(,R1)           POINT TO NEW LOCATION.\n         SPACE 1\nTAKESTEP LA    R0,1                PERFORM THE SELECTED MOVE.\n         A     R0,THISTREK         ADJUST THE MOVES-FOR-MONEY COUNTER.\n         ST    R0,THISTREK\n         BAL   R14,CHECKLOC        VALIDATE THE MOVE.\n         TM    LOCFLAGS,BRDR+SNKE  BORDER OR SNAKE THERE?\n         BNZ   STOPRUN             YES, IGNORE THE MOVE.\n         STH   R1,PLAYRLOC         NO, SAVE THE PLAYER'S NEW LOCATION.\n         STH   R1,TOLOC\n         XR    R0,R0               CLEAR FOR DIVIDE.\n         D     R0,COLUMNS\n         STM   R0,R1,PLAYERX       SAVE PLAYER'S CO-ORDINATES.\n         BAL   R14,CALCPOSI        GET THE 3270 BUFFER ADDRESS OF SAME.\n         LH    R15,TPUTLEN         GET UPDATE DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM(R15)    GET CURRENT BUFFER POSITION.\n         MVI   0(R1),X'11'         SET-BUFFER-ADDRESS.\n         L     R3,PLAYRPTR         POINT TO PLAYER'S SBA.\n         MVC   1(2,R1),1(R3)       GET PREVIOUS BUFFER ADDRESS.\n         MVI   3(R1),C' '          BLANK PREVIOUS PLAYER TOKEN.\n         LA    R1,4(,R1)           ADJUST BUFFER POINTER.\n         STCM  R0,B'0011',1(R3)    UPDATE THE PLAYER'S BUFFER ADDRESS.\n         L     R4,MONEYPTR         POINT TO SBA FOR MONEY.\n         SR    R4,R3               GET LENGTH OF PLAYER DATA STREAM.\n         BCTR  R4,0                LESS ONE FOR EXECUTE.\n         EX    R4,DATAMOVE         COPY THE PLAYER DATA STREAM.\n         LA    R15,5(R4,R15)       ADJUST DATA STREAM LENGTH COUNTER.\n         STH   R15,TPUTLEN         SAVE THE UPDATE DATA STREAM LENGTH.\n         TM    LOCFLAGS,HOME       REACHED HOME-SWEET-HOME?\n         BO    GONEHOME            YES.\n         TM    LOCFLAGS,CASH       PICKED UP SOME CASH?\n         BZ    RUNCHECK            NO, RUN CHECKS.\n         OI    SNAKFLAG,NEXT       YES, NEXT MONEY BUNDLE REQUIRED.\n         LH    R1,SCORE            GET THE POTENTIAL SCORE SO FAR.\n         LA    R1,25(,R1)          ADD BUNDLE MONETARY VALUE.\n         STH   R1,SCORE            SAVE THE NEW POTENTIAL SCORE.\nSTOPRUN  NI    SNAKFLAG,255-RUN    STOP RUNNING.\n         B     SLITHER             GO MOVE THE SNAKE.\nRUNCHECK TM    SNAKFLAG,RUN        CURRENTLY RUNNING?\n         BZ    SLITHER             NO, MOVE THE SNAKE.\n         TM    RUNINDEX,8          IS RUN INDEX 8 OR 12?\n         BO    RUNVERT             YES, RUNNING LEFT OR RIGHT.\n         CLC   PLAYERY,MONEYY      REACHED LINE WITH MONEY?\n         BE    STOPRUN             YES, STOP RUNNING.\n         B     SLITHER             NO, KEEP RUNNING UP OR DOWN.\nRUNVERT  CLC   PLAYERX,MONEYX      REACHED COLUMN WITH MONEY?\n         BE    STOPRUN             YES, STOP RUNNING.\n         EJECT\n*------- SNAKE MOVEMENT.\n         SPACE 1\nSLITHER  LA    R1,THESNAKE         POINT TO SNAKE DATA STREAM.\n         LA    R0,SNAKELEN/4-1     GET NUMBER OF SEGMENTS.\nSLTHERNG MVC   1(2,R1),5(R1)       PERCOLATE SNAKE SEGMENTS.\n         LA    R1,4(,R1)           POINT TO NEXT SEGMENT.\n         BCT   R0,SLTHERNG         PROCESS NEXT SEGMENT.\n         MVC   SNAKELOC(SNAKELEN/2-2),SNAKELOC+2\n         LH    R1,SNKHDLOC         GET CURRENT SNAKE'S HEAD LOCATION.\n         SL    R1,COLUMNS          POINT TO \"UP\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEUP,LOCFLAGS    REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEUP+2        REMEMBER THE LOCATION.\n         LA    R1,1(,R1)           POINT TO \"UP-AND-RIGHT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEUPR,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEUPR+2       REMEMBER THE LOCATION.\n         AL    R1,COLUMNS          POINT TO \"RIGHT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKERHT,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKERHT+2       REMEMBER THE LOCATION.\n         AL    R1,COLUMNS          POINT TO \"DOWN-AND-RIGHT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEDNR,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEDNR+2       REMEMBER THE LOCATION.\n         BCTR  R1,0                POINT TO \"DOWN\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEDWN,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEDWN+2       REMEMBER THE LOCATION.\n         BCTR  R1,0                POINT TO \"DOWN-AND-LEFT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEDNL,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEDNL+2       REMEMBER THE LOCATION.\n         SL    R1,COLUMNS          POINT TO \"LEFT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKELFT,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKELFT+2       REMEMBER THE LOCATION.\n         SL    R1,COLUMNS          POINT TO \"UP-AND-LEFT\".\n         BAL   R14,CHECKLOC        PERFORM LOCATION VALIDATION.\n         MVC   SNAKEUPL,LOCFLAGS   REMEMBER DETAILS OF THIS LOCATION.\n         STH   R1,SNAKEUPL+2       REMEMBER THE LOCATION.\n         SPACE 1\n         L     R1,RANDOMTU         GET PREVIOUS \"RANDOM\" NUMBER.\n         XR    R0,R0               PREPARE FOR DIVIDE.\n         D     R0,=F'13'           DIVIDE BY A PRIME NUMBER.\n         X     R1,RANDOMTU         XOR ANSWER WITH PREVIOUS NUMBER.\n         ST    R1,RANDOMTU         SAVE THE NEW \"RANDOM\" NUMBER.\n         CLM   R1,B'0001',RNDMCNTR+3 COMPARE WITH RANDOM MOVE COUNTER.\n         BL    CLEVERMV            PERHAPS MAKE AN \"INTELLIGENT\" MOVE.\nFORCRAND CLI   RNDMCNTR+3,120      \"STEADY STATE RANDOMNESS CONSTANT\".\n         BH    NORNDINC            DO NOT INCREMENT ABOVE THIS VALUE.\n         L     R3,RNDMCNTR         GET THE \"RANDOM MOVE\" COUNTER.\n         LA    R3,1(,R3)           INCREMENT IT.\n         ST    R3,RNDMCNTR         SAVE IT AGAIN.\nNORNDINC STC   R1,WORK\n         NI    WORK,B'00011100'    GET THREE \"RANDOM\" BITS.\n         LA    R15,EOSNKMVS        POINT TO END OF TABLE.\n         XR    R1,R1\n         IC    R1,WORK             GET INDEX.\n         LA    R3,SNKMOVES(R1)     POINT TO \"RANDOM\" MOVE ENTRY.\nTESTRAND TM    0(R3),BRDR+HOME+CASH\n         BZ    RANDMOVE            ACCEPTABLE LOCATION SO USE IT.\n         LA    R3,4(,R3)           UNACCEPTABLE, SO TRY NEXT ONE.\n         CLR   R3,R15              PAST THE END OF THE TABLE?\n         BL    TESTRAND            NO, GO AHEAD.\n         LA    R3,SNKMOVES         YES, WRAP AROUND TO START OF TABLE.\n         B     TESTRAND            TEST FIRST ENTRY.\nRANDMOVE LH    R1,2(,R3)           LOAD TARGET LOCATION.\n         TM    0(R3),YUMMY         LANDED ON PLAYER?\n         BO    SNAKSNAK            YES, WELL, I AM RATHER PECKISH.\n         B     WRITHE              NO, JUST MAKE THE MOVE.\n         SPACE 1\nCLEVERMV LH    R1,SNKHDLOC         GET CURRENT SNAKE'S HEAD LOCATION.\n         CLC   SNAKEX,PLAYERX      IS SNAKE TO LEFT OR RIGHT?\n         BH    SISRIGHT            TO THE RIGHT.\n         BL    SISLEFT             TO THE LEFT.\nYCHECK   CLC   SNAKEY,PLAYERY      NEITHER, IS IT ABOVE OR BELOW?\n         BH    SISBELOW            BELOW.\n         BL    SISABOVE            ABOVE.\nCHEKCLVR BAL   R14,CHECKLOC        CHECK OUT \"CLEVER\" DECISION.\n         TM    LOCFLAGS,BRDR+HOME+CASH\n         BNZ   FORCRAND            UNACCEPTABLE LOC. SO GO \"RANDOM\".\n         TM    LOCFLAGS,YUMMY      LANDED ON THE PLAYER?\n         BZ    WRITHE              NO, JUST MAKE THE MOVE.\nSNAKSNAK OI    SNAKFLAG,EATEN      YES, GOBBLE UP PLAYER AND MONEY.\n         SPACE 1\nWRITHE   STH   R1,SNKHDLOC         SAVE SNAKE'S NEW LOCATION.\n         STH   R1,TOLOC            SAVE SNAKE'S NEW LOCATION.\n         XR    R0,R0               CLEAR FOR DIVIDE.\n         D     R0,COLUMNS\n         STM   R0,R1,SNAKEX        SAVE SNAKE'S HEAD'S CO-ORDS.\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         STCM  R0,B'0011',THESNAKE+SNAKELEN-3\n         L     R1,SNAKEPTR         SAVE NEW SNAKE IN DATA STREAM.\n         MVC   0(SNAKELEN-4,R1),THESNAKE+4\n         LH    R2,TPUTLEN          THE DATA STREAM LENGTH SO FAR.\n         LA    R1,UPDTSTRM(R2)     POINT TO CURRENT BUFFER ADDRESS.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    NOGRENSN            NO.\n         MVC   0(3,R1),GREEN       YES, COLOUR THE SNAKE.\n         LA    R1,3(,R1)           ADJUST BUFFER POINTER.\n         LA    R2,3(,R2)           ADJUST LENGTH COUNTER.\nNOGRENSN MVC   0(SNAKELEN,R1),THESNAKE LOAD THE SNAKE.\n         LA    R2,SNAKELEN(,R2)    ADJUST THE BUFFER LENGTH COUNTER.\n         STH   R2,TPUTLEN          SAVE IT.\n         TM    SNAKFLAG,NEXT       MORE MONEY REQUIRED?\n         BO    NEWTARG             YES, MAKE IT.\n         B     TPUTSOME            NO, SHOW THE DATA STREAM.\n         SPACE 1\nSISABOVE AL    R1,COLUMNS          GO DOWN.\n         B     CHEKCLVR\n         SPACE 1\nSISBELOW SL    R1,COLUMNS          GO UP.\n         B     CHEKCLVR\n         SPACE 1\nSISRIGHT BCTR  R1,0                GO LEFT.\n         B     YCHECK\nSISLEFT  LA    R1,1(,R1)           GO RIGHT.\n         B     YCHECK\n         EJECT\n*------- LOCATION VALIDATION SUBROUTINE.\n         SPACE 1\nCHECKLOC STM   R14,R4,12(R13)      SAVE CALLER'S REGISTERS (R14-R4).\n         MVI   LOCFLAGS,0          RESET ALL LOCATION FLAGS.\n         L     R4,COLUMNS          GET THE NUMBER OF SCREEN COLUMNS.\n         CR    R1,R4               IS IT ON TOP BORDER?\n         BNH   ONBORDER            YES, THAT WAS EASY.\n         C     R1,LASTSPOT         IS IT ON BOTTOM BORDER?\n         BNL   ONBORDER            YES, THAT WAS EASY.\n         LR    R2,R1               COPY THE LOCATION TO BE CHECKED.\n         SRDL  R2,32               PREPARE THE LOCATION FOR DIVIDE.\n         DR    R2,R4               DIVIDE SCREEN LOC. OFFSET BY COLS.\n         LTR   R2,R2               ON LEFT SIDE BORDER?\n         BZ    ONBORDER            YES, THAT WAS FAIRLY EASY TOO.\n         BCTR  R4,0                GET COLUMNS-1.\n         CR    R2,R4               ON RIGHT SIDE BORDER?\n         BE    ONBORDER            YES, THAT WAS ALSO FAIRLY EASY.\n         LA    R0,SNAKELEN/4-1     GET NUMBER OF SNAKE SEGMENTS.\n         LA    R3,SNAKELOC+2       POINT TO SNAKE LOCATION VECTOR.\nSNKLOCHK CH    R1,0(,R3)           A SNAKE LOCATION?\n         BE    ONSNAKE             YES.\n         LA    R3,2(,R3)           NO, POINT TO NEXT SEGMENT.\n         BCT   R0,SNKLOCHK         LOOP THROUGH SNAKE CHECK AGAIN.\n         CH    R1,HOMELOCN         IS THIS THE LOCATION OF HOME?\n         BE    ATHOME              YES.\n         CH    R1,MONEYLOC         IS THIS THE LOCATION OF THE MONEY?\n         BE    GOLDPILE            YES, COULD GET GOLDEN PILES.\n         CH    R1,PLAYRLOC         IS THIS THE LOCATION OF THE PLAYER?\n         BNE   LOCHKRET            NO.\n         OI    LOCFLAGS,YUMMY      PLAYER IS STANDING/RUNNING HERE.\n         B     LOCHKRET\nGOLDPILE OI    LOCFLAGS,CASH       HERE IS WHERE THE CASH IS STASHED.\n         B     LOCHKRET\nATHOME   OI    LOCFLAGS,HOME       LOCATION IS HOME-SWEET-HOME.\n         B     LOCHKRET\nONSNAKE  OI    LOCFLAGS,SNKE       LOCATION HAS A SNAKE SEGMENT.\n         CH    R1,SNKHDLOC         IS IT THE SNAKE'S HEAD?\n         BNE   LOCHKRET            NO.\n         OI    LOCFLAGS,SNKHD      YES, FLAG THIS AS WELL.\n         B     LOCHKRET\nONBORDER OI    LOCFLAGS,BRDR       LOCATION IS A BORDER.\nLOCHKRET LM    R14,R4,12(R13)      END OF LOCATION VALIDATION.\n         BR    R14                 RETURN TO CALLER.\n         EJECT\n*------- TERMINATION - SCORING.\n         SPACE 1\nIAREDEAD MVI   UPDTSTRM+1,X'11'    SET-BUFFER-ADDRESS.\n         LH    R5,SNKHDLOC         LOAD DEADY-BONES LOCATION POINTER.\n         BCTR  R5,0                POINT TO ONE BEFORE IT.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         STCM  R0,B'0011',UPDTSTRM+2\n         LA    R3,4                UPDATE DATA STREAM LENGTH SO FAR.\n         LA    R2,UPDTSTRM+4       POINT TO NEXT VACANT POSITION.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    GREENSNK            NO.\n         MVC   0(3,R2),GREEN       YES, MAKE SNAKE'S FACE GREEN.\n         LA    R2,3(,R2)           ADJUST BUFFER POINTER.\n         LA    R3,3(,R3)           ADJUST LENGTH COUNTER.\nGREENSNK TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    FACEIT              NO.\n         MVC   0(3,R2),REVERSE     YES, MAKE SNAKE'S FACE REVERSE.\n         LA    R2,3(,R2)           ADJUST BUFFER POINTER.\n         LA    R3,3(,R3)           ADJUST LENGTH COUNTER.\nFACEIT   LA    R8,2(,R5)           POINT TO SNAKE'S LEFT EYE.\n         STM   R2,R3,BUFFER        SAVE COUNTERS FOR LATER.\n         MVC   0(3,R2),SNKFACE1    LOAD SNAKE'S EYES AND NOSE.\n         MVI   3(R2),X'11'         SET-BUFFER-ADDRESS.\n         A     R5,COLUMNS          POINT TO SAME COLUMN NEXT LINE.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF SAME.\n         STCM  R0,B'0011',4(R2)\n         MVC   6(3,R2),SNKFACE2    SUPPLY SNAKE'S MOUTH.\n         LA    R0,9(,R3)           GET DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         GET DATA STREAM ADDRESS.\n         ICM   R1,B'1000',=X'0B'   LOAD TPUT FULLSCR,WAIT,HOLD FLAGS.\n         TPUT  (1),(0),R           SHOW THE SNAKE'S FACE.\n        STIMER WAIT,BINTVL==F'100' WAIT A SECOND.\n         LM    R2,R3,BUFFER        RESTORE DATA STREAM REGISTERS.\n         MVI   0(R2),C'-'          MAKE THE SNAKE WINK.\n         STH   R8,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 BUFFER ADDRESS OF LEFT EYE.\n         STCM  R0,B'0011',UPDTSTRM+2\n         LA    R0,1(,R3)           GET DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         GET DATA STREAM ADDRESS.\n         ICM   R1,B'1000',=X'0B'   LOAD TPUT FULLSCR,WAIT,HOLD FLAGS.\n        TPUT   (1),(0),R           SHOW THE SNAKE WINKING.\n        STIMER WAIT,BINTVL==F'100' WAIT A SECOND.\n         MVI   0(R2),X'96'         MAKE THE SNAKE WINK.\n         LA    R0,1(,R3)           GET DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         GET DATA STREAM ADDRESS.\n         ICM   R1,B'1000',=X'0B'   LOAD TPUT FULLSCR,WAIT,HOLD FLAGS.\n        TPUT   (1),(0),R           SHOW THE SNAKE NOT WINKING.\n        STIMER WAIT,BINTVL==F'100' WAIT A SECOND.\n         B     END                 GATHER STATISTICS.\n         SPACE 1\nENDPUT   LTR   R5,R5               IS TARGET LOCATION NEGATIVE?\n         BMR   R14                 YES, SUPPRESS OUTPUT.\n         CH    R5,SCRNSIZE         IS IT LARGER THAN THE SCREEN SIZE?\n         BNLR  R14                 YES, SUPPRESS OUTPUT.\n         STH   R5,TOLOC\n         LR    R15,R14             SAVE RETURN REGISTER.\n         BAL   R14,CALCPOSI        GET 3270 DISPLAY BUFFER ADDRESS.\n         LR    R14,R15             RESTORE RETURN REGISTER.\n         STCM  R0,B'0011',UPDTSTRM+2 SUPPLY BUFFER ADDR. IN DATA.\n         LR    R0,R3               LOAD DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         LOAD DATA STREAM ADDRESS.\n         ICM   R1,B'1000',=X'03'   LOAD TPUT FULLSCR,WAIT FLAGS.\n        TPUT   (1),(0),R           DISPLAY THE DATA.\n         BR    R14                 RETURN TO \"GONEHOME\" MAINLINE.\n         SPACE 1\nGONEHOME LH    R3,TPUTLEN          GET DATA STREAM LENGTH SO FAR.\n         LA    R2,UPDTSTRM(R3)     POINT TO NEXT VACANT POSITION.\n         MVI   0(R2),X'11'         SET-BUFFER-ADDRESS.\n         LH    R5,HOMELOCN         LOAD DATA LOCATION POINTER.\n         STH   R5,TOLOC\n         BAL   R14,CALCPOSI        GET 3270 DISPLAY BUFFER ADDRESS.\n         STCM  R0,B'0011',1(R2)    SUPPLY BUFFER ADDR. IN DATA STREAM.\n         LA    R3,3(,R3)           UPDATE DATA STREAM LENGTH SO FAR.\n         LA    R2,3(,R2)           POINT TO NEXT VACANT POSITION.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    NOREDEND            NO.\n         MVC   0(3,R2),RED         YES, COLOUR THESE SNAZZIES.\n         LA    R2,3(,R2)           ADJUST BUFFER POINTER.\n         LA    R3,3(,R3)           ADJUST LENGTH COUNTER.\nNOREDEND MVI   0(R2),C'I'          PUT THE PLAYER HOME.\n         LA    R0,1(,R3)           LOAD DATA STREAM LENGTH.\n         LA    R1,UPDTSTRM         LOAD DATA STREAM ADDRESS.\n         ICM   R1,B'1000',=X'03'   LOAD TPUT FULLSCR,WAIT FLAGS.\n        TPUT   (1),(0),R           DISPLAY THE DATA.\n         MVI   UPDTSTRM+1,X'11'    SET-BUFFER-ADDRESS.\n         LA    R3,5                GET LENGTH PLUS ONE FOR CHARACTER.\n         LA    R2,UPDTSTRM+4       POINT TO NEXT VACANT POSITION.\n         TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BZ    NOREDSQR            NO.\n         MVC   0(3,R2),RED         YES, COLOUR THESE SNAZZIES.\n         LA    R2,3(,R2)           ADJUST BUFFER POINTER.\n         LA    R3,3(,R3)           ADJUST LENGTH COUNTER.\nNOREDSQR MVI   0(R2),C'#'          NEW DISPLAY CHARACTER.\n         TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    NOREVSPC            NO.\n         MVC   0(3,R2),REVERSE     YES, USE REVERSE VIDEO.\n         LA    R2,3(,R2)           ADJUST BUFFER POINTER.\n         LA    R3,3(,R3)           ADJUST LENGTH COUNTER.\n         MVI   0(R2),C' '          NEW DISPLAY CHARACTER.\nNOREVSPC LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         S     R5,COLUMNS          GO UP.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         BCTR  R5,0                GO LEFT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         A     R5,COLUMNS          GO DOWN.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         LA    R5,1(,R5)           GO RIGHT.\n         BAL   R14,ENDPUT          DISPLAY THIS LITTLE UPDATE.\n         SPACE 1\nEND      XR    R5,R5               PREPARE FOR IC.\n         MVI   LOCFLAGS,0          CLEAR FOR LATER.\n         L     R4,540              GET POINTER TO CURRENT TCB.\n         L     R4,12(,R4)          POINT TO TIOT.\n         MVC   SNAKEUSR,0(R4)      GET USERID.\n         LA    R4,24(,R4)          POINT TO TIOELNGH.\nCHKDDNAM CLC   4(8,R4),SNAKFILE+DCBDDNAM-IHADCB\n         BE    OPENFLE             FILE EXISTS SO GO AND OPEN IT.\n         IC    R5,0(,R4)           GET TIOT ENTRY LENGTH.\n         AR    R4,R5               POINT TO NEXT TIOT ENTRY.\n         CLI   0(R4),0             ZERO LENGTH ENTRY?\n         BNE   CHKDDNAM            NO, CHECK OUT THIS ENTRY.\n         B     FAREWELL            NOT IN TIOT SO FORGET SCOREBOARD\nOPENFLE TIME   DEC                 GET DATE AND TIME.\n         LR    R4,R0               SAVE TIME.\n         LR    R5,R1               SAVE DATE.\n        OPEN   (SNAKFILE,(UPDAT))  OPEN SNAKFILE FOR UPDATE.\n        BLDL   SNAKFILE,BORDBLDL   CHECK FOR MEMBER.\n         LA    R3,255              GET X'FF'.\n         NR    R15,R3              GET BLDL RETURN CODE - MEMBER THERE?\n         BZ    GOTBOARD            YES.\n         CH    R15,=H'4'           NASTY PROBLEM?\n         BH    EOPDIR              YES, FORGET THE WHOLE THING.\n         TM    SNAKFLAG,EATEN      WAS THE PLAYER EATEN?\n         BO    EOPDIR              YES, DON'T MAKE A SCOREBOARD.\n        CLOSE  (SNAKFILE)          CLOSE THE FILE - NOTHING DONE YET.\n        OPEN   (SNAKFILE,(OUTPUT)) OPEN SNAKFILE FOR OUTPUT.\nGOTBOARD MVC   WORK(1),BORDC       GET ENTRY LENGTH CODE.\n         NI    WORK,X'7F'          TURN OFF ALIAS BIT.\n         CLI   WORK,15             SPF STATS?\n         BE    RIGHTMEM            YES, SCOREBOARD CHECK IS ON.\n         CLI   WORK,14             PFD STATS?\n         BE    RIGHTMEM            YES, SCOREBOARD CHECK IS ON.\n         MVI   BORDC,14            USER DATA OF PFD STATS.\n*- - - - OK FOR REVIEW WITH X-RAY VISION BUT INVISIBLE TO SPF.\n         MVI   BORDV,1             SNAKE R1 - RELEASES MAY TEST THIS.\n         MVI   BORDM,0             NO UPDATES YET.\n         STCM  R5,B'1111',BORDCR   SAVE CREATION DATE.\n         B     STOWREST            SAVE THE REMAINING NECESSARIES.\nRIGHTMEM MVC   DATEO,BORDCD        SAVE DATE OF PREVIOUS BEST.\n         MVC   TIMEO,BORDCT        SAVE TIME OF PREVIOUS BEST.\n         MVC   SCOREO,BORDMD       SAVE PREVIOUS BEST SCORE.\n         MVC   BESTUSER,BORDID     SAVE PREVIOUS BEST USERID.\n         TM    SNAKFLAG,EATEN      WAS THE PLAYER EATEN?\n         BO    EOPDIR              YES, DO NOT WRITE TO FILE.\n         CLC   SCORE,SCOREO        IS THIS A BETTER SCORE?\n         BNH   EOPDIR              NO, DO NOT WRITE TO FILE.\n*- - - - COULD USE CONTENTS OF MEMBER TO LIST TOP 10,\n*        LESS CHANCE OF CORRUPTION.\n         XR    R3,R3\n         IC    R3,BORDM            GET UPDATE COUNTER.\n         LA    R3,1(,R3)           INCREMENT.\n         STC   R3,BORDM            SAVE IT AGAIN.\nSTOWREST STCM  R5,B'1111',BORDCD   SAVE CURRENT DATE.\n         STCM  R4,B'1100',BORDCT   SAVE CURRENT TIME.\n         MVC   BORDMD,SCORE        SAVE NEW BEST SCORE.\n         MVC   BORDID,SNAKEUSR     SAVE NEW BEST SNAKE.\n         MVC   BORDK(USERLEN),BORDC CHANGE FROM BLDL TO STOW FORMAT.\n        STOW   SNAKFILE,BORDNAME,R ZAP IN NEW DETAILS QUICK.\n         STC   R15,LOCFLAGS        SAVE STOW RETURN CODE.\nEOPDIR  CLOSE  (SNAKFILE)          CLOSE THE FILE, HOPE NO CORRUPTIONS.\n         EJECT\n*------- TERMINATION - STATISTICS AND MESSAGE DISPLAY.\n         SPACE 1\nFAREWELL TM    OSBITS,CVTMVSE      MVS/XA-LIKE 31-BIT ADDRESSING?\n         BZ    GOTADRMD            NO.\n         LA    R1,GOTADRMD         YES.\n         ICM   R1,B'1000',=X'80'   SET MODE BIT.\n         BSM   0,R1                GET INTO 31-BIT ADDRESSING MODE.\nGOTADRMD L     R1,540              POINT TO THE CURRENT TCB.\n         ICM   R1,B'1111',164(R1)  POINT TO THE TIMING CONTROL TABLE.\n         BZ    ENDFUDGE            SMF NOT ACTIVE SO FORGET IT.\n         MVC   TGETCNTN(8),48(R1)  GET CURRENT TGET AND TPUT COUNTS.\nENDFUDGE TM    OSBITS,CVTMVSE      MVS/XA-LIKE 31-BIT ADDRESSING?\n         BZ    MAKEMSGS            NO, RUNNING IN 370 MODE.\n         LA    R1,MAKEMSGS         YES, BSM CAN'T GIVE S0C1 ABEND.\n         BSM   0,R1                REVERT TO 24-BIT ADDRESSING MODE.\n         SPACE 1\nMAKEMSGS MVC   UPDTSTRM(8),CLEARALL NO, CLEAR THE SCREEN FOR MESSAGES.\n         MVC   UPDTSTRM+8(2),=X'1DF8' PROTECT THE STATS ON THE SCREEN.\n         LA    R8,10               DATA STREAM LENGTH SO FAR.\n         LA    R9,UPDTSTRM+10      CURRENT BUFFER POSITION.\n         TM    GRAFLAGS,COLR+HLIT  IN GRAPHIC MODE?\n         BNO   PINKYPOO            NO, SKIP PINK.\n         MVC   UPDTSTRM+10(3),PINK SA,COLOUR,PINK.\n         MVC   UPDTSTRM+13(3),UNDERSCR SA,HILITE,UNDERSCR.\n         LA    R8,16               DATA STREAM LENGTH SO FAR.\n         LA    R9,UPDTSTRM+16      CURRENT BUFFER POSITION.\nPINKYPOO ICM   R3,B'1111',TCTADDR  ANY TSO STATISTICS TO REPORT?\n         BZ    TREKPUT             NO.\n         SPACE 1\n         LA    R1,STATSPOS         LINE NUMBER FOR STATSMSG.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR STATSMSG BUFFER ADDR.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         L     R1,TGETCNTN\n         S     R1,TGETCNTO\n         CVD   R1,WORK\n         ED    TSOTGETS,WORK+4     SHOW SNAKE TSO TERMINAL GET COUNT.\n         L     R1,TPUTCNTN\n         S     R1,TPUTCNTO\n         CVD   R1,WORK\n         ED    TSOTPUTS,WORK+4     SHOW SNAKE TSO TERMINAL PUT COUNT.\n         MVC   3(STATSLEN,R9),STATSMSG\n         LA    R8,STATSLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,STATSLEN+3(,R9)  UPDATE BUFFER POINTER.\n         SPACE 1\nTREKPUT  LA    R1,TREKPOS          LINE NUMBER FOR TREKMSG.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR TREKMSG BUFFER ADDRESS.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         ICM   R1,B'1111',CASHCNTR GET TOTAL NUMBER OF MONEY BUNDLES.\n         BZ    ZEROCASH            NO MONEY WAS GATHERED.\n         L     R1,CASHMOVS         GET NUMBER OF MOVES FOR ALL CASH.\n         M     R0,=F'100'          TWO DECIMAL PLACES FOR AVERAGE.\n         D     R0,CASHCNTR         GET THE AVERAGE MOVES FOR A BUNDLE.\n         CVD   R1,WORK\n         ED    TREKMSG,WORK+4\n         MVC   3(TREKMLEN,R9),TREKMSG\n         LA    R8,TREKMLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,TREKMLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nZEROCASH TM    GRAFLAGS,COLR       EXTENDED COLOUR SUPPORTED?\n         BNO   YELABACK            NO, SKIP YELLOW.\n         MVC   0(3,R9),YELLOW      YES, COLOUR THESE SNAZZIES.\n         LA    R8,3(,R8)           ADJUST BUFFER POINTER.\n         LA    R9,3(,R9)           ADJUST LENGTH COUNTER.\n         SPACE 1\nYELABACK TM    SNAKFLAG,EATEN      WAS THE PLAYER EATEN?\n         BZ    YELAFRNT            NO.\n         LA    R1,THISPOS          LINE NUMBER FOR THISMSG/EATENMSG.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR THISMSG BUFFER ADDRESS.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCORE\n         STCM  R0,B'1100',SCORE    ZERO THE SCORE.\n         CVD   R1,WORK\n         LA    R1,DEADCASH+5\n         EDMK  DEADCASH,WORK+5\n         BCTR  R1,0\n         MVI   0(R1),C'$'\n         MVC   3(EATENLEN,R9),EATENMSG\n         LA    R8,EATENLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,EATENLEN+3(,R9)  UPDATE BUFFER POINTER.\n         SPACE 1\nYELAFRNT CLI   LOCFLAGS,8          SCOREBOARD JUST CREATED?\n         BE    SHOWSHOW            YES, GIVE THE GOOD NEWS.\n         CLI   BESTUSER,0          WAS THE SCOREBOARD FOUND?\n         BE    ASTERPUT            NO, NO SCORING DETAILS TO REPORT.\n         SPACE 1\n         LA    R1,PREVPOS          LINE NUMBER FOR PREVMSG.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR PREVMSG BUFFER ADDRESS.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCOREO\n         CVD   R1,WORK\n         LA    R1,PREVSCOR+5\n         EDMK  PREVSCOR,WORK+5\n         BCTR  R1,0\n         MVI   0(R1),C'$'\n         ED    PREVDATE,DATEO+1\n         ICM   R1,B'0110',TIMEO\n         IC    R1,CHARZERO\n         SRL   R1,4\n         ST    R1,WORK+4\n         UNPK  PREVTIME+1(4),WORK+5(3)\n         MVC   PREVTIME(2),PREVTIME+1\n         MVI   PREVTIME+2,C':'\n         MVC   3(PREVMLEN,R9),PREVMSG\n         LA    R8,PREVMLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,PREVMLEN+3(,R9)  UPDATE BUFFER POINTER.\n         SPACE 1\n         TM    SNAKFLAG,EATEN      WAS THE PLAYER EATEN?\n         BO    SHOWSHOW            YES, THIS SCORE DIDN'T COUNT.\n         LA    R1,THISPOS          LINE NUMBER FOR THISMSG.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR THISMSG BUFFER ADDRESS.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCORE\n         CVD   R1,WORK\n         LA    R1,THISSCOR+5\n         EDMK  THISSCOR,WORK+5\n         BCTR  R1,0\n         MVI   0(R1),C'$'\n         ST    R5,WORK+4\n         ED    THISDATE,WORK+5\n         ICM   R4,B'0010',CHARZERO\n         SRL   R4,12\n         ST    R4,WORK+4\n         UNPK  THISTIME+1(4),WORK+5(3)\n         MVC   THISTIME(2),THISTIME+1\n         MVI   THISTIME+2,C':'\n         CLC   SCORE,SCOREO        HOW WAS THE SCORE?\n         BNH   BADLUCK             BAD LUCK - JUST WASN'T GOOD ENOUGH.\n         MVC   BDLUKSUF,GDLUKSUF   GOOD LUCK -  CONGRATS.\nBADLUCK  MVC   3(THISMLEN,R9),THISMSG\n         LA    R8,THISMLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,THISMLEN+3(,R9)  UPDATE BUFFER POINTER.\n         SPACE 1\nSHOWSHOW LA    R1,LUCKPOS          LINE NUMBER FOR APPROPRIATE MESSAGE.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR MESSAGE BUFFER ADDRESS.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         CLI   LOCFLAGS,8          SCOREBOARD JUST CREATED?\n         BE    GOODGOOD            YES, GIVE THE GOOD NEWS.\n         CLC   SCORE,SCOREO        HOW WAS THE SCORE?\n         BNH   BADSHOW             BAD LUCK - JUST WASN'T GOOD ENOUGH.\nGOODGOOD TM    GRAFLAGS,COLR+HLIT  IN GRAPHIC MODE?\n         BZ    GOODSHOW            NO, SKIP HIGHLIGHTING CHANGE.\n         MVC   3(3,R9),BLINKING    HIGHLIGHT PREVIOUS TOP WORMOGLODYTE\n         MVC   6(3,R9),RED           BEING DEPOSED.\n         LA    R8,6(,R8)           UPDATE DATA STREAM LENGTH.\n         LA    R9,6(,R9)           UPDATE BUFFER POINTER.\nGOODSHOW MVC   3(GDLUKLEN,R9),GDLUKMSG\n         LA    R8,GDLUKLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,GDLUKLEN+3(,R9)  UPDATE BUFFER POINTER.\n         B     DONELUCK\nBADSHOW  CLC   BESTUSER,SNAKEUSR   IS THIS THE TOP WORMOGLODYTE?\n         BE    OKAYLUCK            YES, DON'T WORRY.\n         MVC   3(BDLUKLEN,R9),BDLUKMSG\n         LA    R8,BDLUKLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,BDLUKLEN+3(,R9)  UPDATE BUFFER POINTER.\n         B     DONELUCK\nOKAYLUCK MVC   3(URTOPLEN,R9),URTOPMSG\n         LA    R8,URTOPLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n         LA    R9,URTOPLEN+3(,R9)  UPDATE BUFFER POINTER.\n         SPACE 1\nDONELUCK TM    GRAFLAGS,HLIT       EXTENDED HIGHLIGHTING SUPPORTED?\n         BZ    ASTERPUT            NO, SKIP HIGHLIGHTING CHANGE.\n         MVC   0(3,R9),NOHILITE    RESET HIGHLIGHTING.\n         LA    R8,3(,R8)           UPDATE DATA STREAM LENGTH.\n         LA    R9,3(,R9)           UPDATE BUFFER POINTER.\n         SPACE 1\nASTERPUT LA    R1,ASTERPOS         LINE NUMBER FOR ASTERISKS.\n         M     R0,COLUMNS          GET SCREEN LOCATION.\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN.\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR CHEATMSG BUFFER ADDR.\n         MVI   0(R9),X'11'         SET-BUFFER-ADDRESS.\n         STCM  R0,B'0011',1(R9)\n         TM    GRAFLAGS,COLR+HLIT  IN GRAPHIC MODE?\n         BZ    STARSPUT            NO, SKIP RED INSERTION.\n         MVC   3(3,R9),RED         YES, ASTERISKS IN RED.\n         MVC   6(3,R9),NOHILITE    RESET ANY HIGHLIGHTING.\n         LA    R8,6(,R8)           UPDATE DATA STREAM LENGTH.\n         LA    R9,6(,R9)           UPDATE BUFFER POINTER.\nSTARSPUT MVC   3(ASTERLEN,R9),ASTERMSG\n         LA    R8,ASTERLEN+3(,R8)  UPDATE DATA STREAM LENGTH.\n*        LA    R9,ASTERLEN+3(,R9)  UPDATE BUFFER POINTER (NOT NEEDED).\n         SPACE 1\nFINALPUT LA    R1,UPDTSTRM         POINT TO TERMINATION MESSAGES.\n         LR    R0,R8               GET DATA STREAM LENGTH.\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN,HOLD FLAGS.\n        TPUT   (1),(0),R\n         LA    R1,WORK\n         LA    R0,8\n         ICM   R1,B'1000',=X'81'   LOAD TGET ASIS,WAIT FLAGS.\n        TGET   (1),(0),R           END FOR ANY ALMOST ANY INPUT.\n         CLI   WORK,X'4D'\n         BL    CLEANUP             PF 22, 23 OR 24.\n         CLI   WORK,X'6F'\n         BL    FINALPUT            RESHOW IN CASE OF INTERCOM.\n         EJECT\n*------- TERMINATION - EXIT.\n         SPACE 1\nCLEANUP STLINENO LINE=1,MODE=OFF   DEACTIVATE VTAM FULL SCREEN MODE.\n        TCLEARQ INPUT              FLUSH ANY RESIDUAL INPUT.\n         XR    R15,R15             SET RETURN CODE = 0.\nLEAVE   $XRET  CC=(R15),LV=SNAKECML,TYPE=RENT\nWACKYVDU LA    R1,WACKYMSG         THE USER IS A CLOWN.\n         LA    R0,L'WACKYMSG\n         B     ERRMSG              TELL THE USER AND GO HOME.\nNOTVDU   LA    R1,SORRYMSG         SORRY, BUT VDU IS REQUIRED.\n         LA    R0,L'SORRYMSG\nERRMSG  TPUT  (1),(0),R            SEND ERROR MESSAGE.\n         LA    R15,8               SET RETURN CODE = 8.\n         B     LEAVE\n         SPACE 1\n*------- ENCODE SCREEN LOCATION TO 3270 BUFFER ADDRESS ROUTINE.\n         SPACE 1\nCALCPOSI LH    R0,TOLOC            GET CODE FOR 3270 BUFFER ADDRESS.\n         CH    R0,=H'4095'         LOCATION GREATER THAN 4K (12 BITS)?\n         BHR   R14                 YES, NO CONVERSION TO BE DONE.\n         STC   R0,WORK+1           NO, DO ORIGINAL 3270 ADDRESSING.\n         NI    WORK+1,B'00111111'  GET LOW-ORDER SIX-BIT NUMBER.\n         SRL   R0,6\n         STC   R0,WORK             GET HIGH-ORDER SIX-BIT NUMBER.\n         TR    WORK(2),TABLE       CONVERT TO 3270 DATA STREAM CHARS.\n         ICM   R0,B'0011',WORK     SAVE IN BOTTOM TWO BYTES OF R0.\n         BR    R14                 RETURN TO MAINLINE.\n         SPACE 1\nTABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\nCHARZERO DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*------- LITERALS AND INITIALIZED VARIABLES.\n         SPACE 1\nCLEARALL DC    XL8'401140403C404000' WCC,SBA,(1,1),RTA,(1,1),NULL.\nREPTOTOP EQU   CLEARALL+4,3        RTA,(1,1).\nSTRMTRLR DC    XL4'11404013'       SBA,(1,1),IC.\nTERMATTR DC    F'0'                FILLED IN BY GTTERM.\nMAXACCUM DC    AL2(L'UPDTSTRM-80)  DATA STREAM LENGTH THRESHOLD.\nWASTE    DC    H'0'                FILLED IN BY GTTERM.\nBORDBLDL DC    H'1',H'44'          ONE 44 BYTE ENTRY.\nBORDNAME DC    CL8'SNKTAB00'       NAME OF SCOREBOARD MEMBER.\nBORDTTR  DC    XL3'000000'         FILLED IN BY BLDL/STOW.\nBORDK    DC    XL1'00'             CONCATENATION CODE.\nBORDZ    DC    XL1'00'             LOCATION CODE.\nBORDC    DC    XL1'00'\nBORDV    DC    XL1'00'             VERSION NUMBER.\nBORDM    DC    XL1'00'             REVISION NUMBER.\n         DC    XL2'0000'           NOT USED.\nBORDCR   DC    XL4'0000000F'       CREATION DATE.\nBORDCD   DC    XL4'0000000F'       LAST CHANGE DATE.\nBORDCT   DC    XL2'0000'           LAST CHANGE TIME.\nBORDSI   DC    XL2'0000'           NUMBER OF LINES CURRENTLY.\nBORDIN   DC    XL2'0000'           NUMBER OF LINES INITIALLY.\nBORDMD   DC    XL2'0000'           NUMBER OF LINES MODIFIED.\nBORDID   DC    XL8'0000000000000000' USERID (10 BYTES FOR SPF).\nUSERLEN  EQU   *-BORDC             USER DATA LENGTH + 1.\nPFDATTRS DC    CL8'PFDATTRS'       DDNAME FOR OSIV/F4.\nRUNINDEX DC    X'00'               OFFSET INTO RUNTABLE.\nRESETAID DC    X'27F1C3'           ESCAPE,WRITE,WCC.\nQUERY    DC    X'F3000501FF02'     WRITE STRUCTURED FIELD,QUERY.\nSORRYMSG DC C'SORRY, THIS PROGRAM USES 3270 FULL-SCREEN TERMINAL I/O'\nWACKYMSG DC C'WHAT SORT OF WACKY SCREEN HAVE YOU GOT, BOZO-FEATURES?'\nACRNMMSG DC    C'(SNAKE=SYSTEM-NODE-ACTIVITY-KNOWLEDGE-EXIT)'\n         DC    C'(PF5/17=JOG/SPRINT)(PF4/16=TRAIL)'\nACRNMLEN EQU   *-ACRNMMSG\nHLPMSG01 DC    C'  THE SNAKE'      HELP SCREEN TEXT.\nHLPMSG02 DC    C'  THE PLAYER'\nHLPMSG03 DC    C'  HOME'\nHLPMSG04 DC    C'  TWENTY-FIVE DOLLARS'\nHLPMSG05 DC    C' PF03/12/15/24 - THE BOSS IS COMING'\nHLPMSG06 DC    C' PF07 - MOVE UP ONE LOCATION'\nHLPMSG07 DC    C' PF08 - MOVE DOWN ONE LOCATION'\nHLPMSG08 DC    C' PF10 - MOVE LEFT ONE LOCATION'\nHLPMSG09 DC    C' PF11 - MOVE RIGHT ONE LOCATION'\nHLPMSG10 DC    C' PF19 - RUN UP      PF20 - RUN DOWN'\nHLPMSG11 DC    C' PF22 - RUN LEFT    PF23 - RUN RIGHT'\nHLPMSG12 DC    C' RUNNING STOPS WHEN THE PLAYER REACHES'\nHLPMSG13 DC    C' THE MONEY, REACHES THE ROW OR COLUMN'\nHLPMSG14 DC    C' THAT THE MONEY IS IN, OR *AFTER* A MOVE'\nHLPMSG15 DC    C' FAILS DUE TO AN OBSTRUCTION. SCORES'\nHLPMSG16 DC    C' ARE ONLY CREDITED AFTER THE PLAYER'\nHLPMSG17 DC    C' REACHES HOME, WHEREUPON THE GAME ENDS.'\nSTATSPOS EQU   2                   TERMINATION MESSAGE DETAILS.\nSTATSMSG DC    C' TERMINAL I/O:'\nTSOTGETS DC    X'4020202020202120'\n         DC    C' GETS  AND'\nTSOTPUTS DC    X'4020202020202120'\n         DC    C' PUTS. '\nSTATSLEN EQU   *-STATSMSG\nTREKPOS  EQU   4\nTREKMSG  DC    X'4020202021204B2020'\n         DC C' WAS THE AVERAGE NUMBER OF MOVES FOR EACH MONEY BUNDLE. '\nTREKMLEN EQU   *-TREKMSG\nSNKFACE1 DC    X'964B96'           O.O\nSNKFACE2 DC    X'E06D61'           \\_/\nBLUE     DC    X'2842F1'\nRED      DC    X'2842F2'\nPINK     DC    X'2842F3'\nGREEN    DC    X'2842F4'\nTURQ     DC    X'2842F5'\nYELLOW   DC    X'2842F6'\nWHITE    DC    X'2842F7'\nNOHILITE DC    X'284100'           RESET HIGHLIGHTING.\nBLINKING DC    X'2841F1'           SET HIGHLIGHTING TO BLINKING.\nREVERSE  DC    X'2841F2'           SET HIGHLIGHT TO REVERSE VIDEO.\nUNDERSCR DC    X'2841F4'           SET HIGHLIGHT TO UNDERSCORES.\nRESETSA  DC    X'280000'           RESET ALL CHARACTER ATTRIBUTES.\nPREVPOS  EQU   8\nPREVMSG  DC    C' THE TOP SNAKE-DODGER WAS '\nBESTUSER DC    XL8'0000000000000000'\n         DC    C'WITH A SCORE OF'\nPREVSCOR DC    X'402020202120'\n         DC    C' ON'\nPREVDATE DC    X'4021204B202020'\n         DC    C' AT '\nPREVTIME DC    C'HH:MM'\n         DC    C'. '\nPREVMLEN EQU   *-PREVMSG\nTHISPOS  EQU   10\nTHISMSG  DC    C' YOUR SCORE OF'\nTHISSCOR DC    X'402020202120'\n         DC    C' ON'\nTHISDATE DC    X'4021204B202020'\n         DC    C' AT '\nTHISTIME DC    C'HH:MM'\nBDLUKSUF DC    C' DID NOT SURPASS THIS. '\nTHISMLEN EQU   *-THISMSG\nGDLUKSUF DC    C' SURPASSES EVEN THIS!! '\nEATENMSG DC    C' YOU AND YOUR'\nDEADCASH DC    X'402020202120'\n         DC    C' HAVE BEEN EATEN. WHO SAID YOU CAN''T TAKE IT WITH YOU+\n               ?  '\nEATENLEN EQU   *-EATENMSG\nLUCKPOS  EQU   12\nBDLUKMSG DC    C' WITH ALL THIS PRACTICE YOU''LL PROBABLY DO BETTER NEX+\n               T TIME. '\nBDLUKLEN EQU   *-BDLUKMSG\nURTOPMSG DC    C' DON''T WORRY, YOU ARE STILL THE TOP SNAKE-DODGER. '\nURTOPLEN EQU   *-URTOPMSG\nGDLUKMSG DC C' CONGRATULATIONS!!  YOU ARE THE NEW TOP SNAKE-DODGER! '\nGDLUKLEN EQU   *-GDLUKMSG\nASTERPOS EQU   14\nASTERMSG DC    C'***'\n         DC    X'1D40'             UNPROTECTED LOW-INTENSITY.\n         DC    X'13'               INSERT-CURSOR.\nASTERLEN EQU   *-ASTERMSG\nBUFHDR   DC    X'C11140403C4040401DF0'\nHDRLEN   EQU   *-BUFHDR\nTHESNAKE DC    X'11000040'         BLANK OUT PREVIOUS TAIL.\n         DC    X'110000A2'         END OF THE TAIL.\n         DC    X'110000A2'         \\\n         DC    X'110000A2'           \\\n         DC    X'110000A2'             \\ ___BODY OF THE SNAKE.\n         DC    X'110000A2'             /\n         DC    X'110000A2'           /\n         DC    X'110000A2'         /\nSNAKEHED DC    X'110000E2'         HEAD OF THE SNAKE.\nSNAKELEN EQU   *-THESNAKE          LENGTH OF THE SNAKE DATA STREAM.\n         SPACE 1\n         PRINT NOGEN\nSNAKFILE DCB   DSORG=PO,MACRF=(R,W),DDNAME=ISPTABL\n         PRINT GEN\n         SPACE 1\n         LTORG\n         SPACE 1\n         DS    0D\n         DC    CL80'     ANOTHER QUALITY PRODUCT FOR TSO BY GREG PRICE +\n               OF PRYCROFT SIX PTY LTD '\n         DS    0D\n         EJECT\n*------- DSECT'S (UNINITIALIZED VARIABLES).\n         SPACE 1\nSNAKECMN DSECT\n         SPACE 1\n         DS    18F                 SAVE-AREA.\nWORK     DS    D\nSNAKEUSR DS    D\nRANDOMTU DS    F\nTGETCNTO DS    F\nTPUTCNTO DS    F\nTGETCNTN DS    F\nTPUTCNTN DS    F\nLINES    DS    F\nCOLUMNS  DS    F\nMOVLINES DS    F\nMOVECOLS DS    F\nELIGIBLS DS    F\nSNAKEX   DS    F\nSNAKEY   DS    F\nMONEYX   DS    F\nMONEYY   DS    F\nPLAYERX  DS    F\nPLAYERY  DS    F\nIMAGESIZ DS    F\nLASTSPOT DS    F\nSNAKEPTR DS    F\nHOMEPNTR DS    F\nPLAYRPTR DS    F\nMONEYPTR DS    F\nDATEO    DS    F\nZEROAREA EQU   *              THIS AREA ZEROED AT INITIALIZATION.\nCASHCNTR DS    F\nCASHMOVS DS    F\nTHISTREK DS    F\nRNDMCNTR DS    F\nTRLRPNTR DS    F\nSCOREPTR DS    F\nTCTADDR  DS    F\nHOMELOCN DS    H\nMONEYLOC DS    H\nPLAYRLOC DS    H\nTPUTLEN  DS    H\nSCORE    DS    H\nZEROLEN  EQU   *-ZEROAREA     END OF INITIALLY ZEROED AREA.\nSCOREO   DS    H\nTIMEO    DS    H\nTOLOC    DS    H\nSCRNSIZE DS    H\nSNAKELOC DS    9H\nSNKHDLOC EQU   *-2,2\nBORDCHAR DS    C\nSNAKFLAG DS    C\nNEXT     EQU   X'80'\nEATEN    EQU   X'40'\nRUN      EQU   X'20'\nBURST    EQU   X'10'\nGRAFLAGS DS    X                   TERMINAL GRAPHIC CAPABILITY FLAGS.\nCOLR     EQU   X'80'               AT LEAST SEVEN COLOURS SUPPORTED.\nHLIT     EQU   X'40'               BLINK, REVERSE, U-SCORE SUPPORTED.\nGEOK     EQU   X'20'               GRAPHICS ESCAPE SUPPORTED.\nSYMSET   EQU   X'10'               SYMBOL-SETS SUB-FIELD RETURNED.\nPCAF     EQU   X'08'               PC ATTACHMENT FACILITY TERMINAL.\nLOCFLAGS DS    X                   STATUS FLAGS FOR A GIVEN LOCATION.\nBRDR     EQU   X'80'               LOCATION IS A BORDER.\nSNKE     EQU   X'40'               LOCATION OCCUPIED BY SNAKE SEGMENT.\nSNKHD    EQU   X'20'               THE SNAKE SEGMENT IS THE HEAD.\nHOME     EQU   X'10'               LOCATION IS HOME-SWEET-HOME.\nCASH     EQU   X'08'               HERE IS WHERE THE CASH IS STASHED.\nYUMMY    EQU   X'04'               PLAYER IS STANDING/RUNNING HERE.\nOSBITS   DS    C\nSNKMOVES DS    0D\nSNAKEUP  DS    X,X,H\nSNAKEUPR DS    X,X,H\nSNAKERHT DS    X,X,H\nSNAKEDNR DS    X,X,H\nSNAKEDWN DS    X,X,H\nSNAKEDNL DS    X,X,H\nSNAKELFT DS    X,X,H\nSNAKEUPL DS    X,X,H\nEOSNKMVS EQU   *\nUPDTSTRM DS    CL1024\nBUFFER   DS    CL1024\n         SPACE 1\nSNAKECML EQU   (((*-SNAKECMN)+7)/8)*8\n         PRINT NOGEN\n        DCBD   DSORG=PO,DEVD=DA\n        CVT    DSECT=YES\n        IHAPSA ,\n        IKJTCB ,\n        IEFTCT ,\n        IKJRB  ,\n        IHACDE ,\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SNAKE$": {"ttr": 16385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//SNAKE    JOB (........),'INSTALL  -SNAKE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                          S  N  A  K  E                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=SNAKE\n//LNK     EXEC PAJILKC,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ALIAS   HALFSNAK,HS,QUARTERS,QS\n  NAME    SNAKE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SNAKE@": {"ttr": 16387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x11\\x8f\\x00\\x92\\x11\\x8f\\x11\\x01\\x00V\\x00V\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-27T00:00:00", "modifydate": "1992-04-27T11:01:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "SYSPAJA"}, "text": "1   17/01/92\n                                                      SNAKE     1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       S N A K E   TSO Command       * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  SNAKE  : System-Node-Activity-Knowledge-Exit\n  -------- CBT origin : Extracted from CBT tape 91 MAR, files 134-135.\n           Written August 1987 by GREG PRICE of PRYCROFT SIX PTY LTD.\n\n  Use    : for use under TSO on 3270-family VDU in fullscreen mode.\n  -------- SNAKE supports all screen sizes.\n\n  Object : to pick up as many $25 bundles as possible and make it\n  ------   \"home\" without being eaten by the snake. Money is denoted\n           by a '$', the player by a 'I', home by '#', and the snake\n           by a string of 'S's in lower case, with the snake's head\n           being in upper case. Each time the player moves the snake\n           moves. At first the snake will move almost randomly, but\n           will make an \"intelligent\" move more often as the game\n           progresses. When the player gets \"home\" the game ends and\n           the score is credited. If the player gets \"eaten\" then the\n           game ends and no score is credited.\n\n  Method : The player depresses keys to indicate which direction the\n  -------- 'I' should move. Money is gained by moving the 'I' to a\n           location occupied by a '$', whereupon another '$' will be\n           randomly generated at a vacant location. Getting to \"home\"\n           is achieved by moving the 'I' to the location occupied by\n           the '#' which does not move during a game. Getting \"eaten\"\n           by the snake occurs when the snake's head moves to the\n           location occupied by the 'I'.\n\n  Input  : PA keys - refresh the screen image\n  -------- PFK  01 - display HELP screen\n           PFK  03 - CANCEL - END without scoring\n           PFK  04 - toggle SHOW-SNAKE-TRAIL switch\n           PFK  05 - toggle BURST-MODE-WHEN-RUNNING switch\n           PFK  07 - move up one location\n           PFK  08 - move down one location\n           PFK  10 - move left one location\n           PFK  11 - move right one location\n           PFK  12 - CANCEL - END without scoring\n           PFK  13 - display HELP screen\n           PFK  15 - CANCEL - END without scoring\n           PFK  16 - toggle SHOW-SNAKE-TRAIL switch\n           PFK  17 - toggle BURST-MODE-WHEN-RUNNING switch\n           PFK  19 - run up until level with money\n           PFK  20 - run down until level with money\n           PFK  22 - run left until level with money\n           PFK  23 - run right until level with money\n           PFK  24 - CANCEL - END without scoring\n1   17/01/92\n                                                      SNAKE     2/2.\n\n           Any other input, or trying to move through an obstruction,\n           is equivalent to standing still while the snake gets a\n           move. Note that running is stopped by an obstruction, but\n           only after failing a move attempt, thus giving the snake an\n           extra move. Any snake trail data present is cleared by a\n           screen image RESHOW/REFRESH.\n\n           If the file ISPTABL (can be changed to any PDS DD which\n           effectively has UACC(UPDATE)) is allocated then the highest\n           score is kept as user data (PFD (not SPF) stats) of member\n           SNKTAB## (REVIEW will show PFD and SPF stats) where ## is\n           the number of lines that the screen has.\n\n           If the terminal's VTAM query bit is on then a query will be\n           done to determine if 3270 extended data stream data can be\n           sent.\n\n           If invoked as 'HALFSNAK' or 'HS' then only the top half\n           (integer arithmetic) of the screen will be used. Naturally\n           a different scoreboard member will be used. Similarly with\n           'QUARTERS' and 'QS'.\n\n           Running can be speeded up by activating burst mode. When\n           this is done consecutive running moves are displayed with\n           one TPUT, thus optimizing terminal I/O. However, depending\n           upon the terminal and its controller, each individual move\n           may be invisible and the user will be presented with the\n           final screen image.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STREK": {"ttr": 16390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x05/\\x00\\x94\\x05/\\x14\\x06\\n~\\n~\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-02-21T00:00:00", "modifydate": "1994-02-21T14:06:00", "lines": 2686, "newlines": 2686, "modlines": 0, "user": "SYSPAJA"}, "text": "STRK     TITLE '--- TSO FULL-SCREEN STAR-TREK COMMAND ---'\n         PRINT OFF\n* Here follows the Assembly SYSPARM(...) options process which allows\n*        you to select :\n*        1. NONE or omitted = no list of macros development\n*           FULL = list all macros development\n*        2. US or omitted = use USA display characters\n*           EU = use European display characters\n*        How to define options : i.e - SYSPARM(FULL)\n*                                      SYSPARM(,EU)\n*        If you want add another selection, you can easily do it\n*        adjusting below the statements marked \"<===\", define the new\n*        OPT(n) default, and supply the new option coding just before\n*        the comment card marked \"---> Add option(s)\".\n         GBLC  &EULST,&EUDCH                                  <===\n         LCLA  &CN,&CT,&LN,&MX,&SB,&ST\n         LCLC  &OPT(2)                                        <===\n&MX      SETA  2                                              <===\n&OPT(1)  SETC  'NONE'\n&OPT(2)  SETC  'US'\n&CN      SETA  K'&SYSPARM\n         AIF   (K'&SYSPARM EQ 0).SP99\n&CT      SETA  1\n&SB      SETA  1\n&ST      SETA  &CT\n.SP1     AIF   ('&SYSPARM'(&CT,1) EQ ',').SP2\n&CT      SETA  &CT+1\n         AIF   (&CT LE &CN).SP1\n.SP2     ANOP\n&LN      SETA  &CT-&ST\n         AIF   (&LN EQ 0).SP3\n&OPT(&SB) SETC '&SYSPARM'(&ST,&LN)\n.SP3     ANOP\n&SB      SETA  &SB+1\n         AIF   (&SB GT &MX).SP99\n&CT      SETA  &CT+1\n         AIF   (&CT GT &CN).SP99\n&ST      SETA  &CT\n         AGO   .SP1\n.SP99    ANOP\n&EULST   SETC  'GEN'\n         AIF   ('&OPT(1)' EQ 'FULL').SL1\n&EULST   SETC  'NOGEN'\n.SL1     ANOP\n&EUDCH   SETC  'EUROPE'\n         AIF   ('&OPT(2)' EQ 'EU').SL99\n&EUDCH   SETC  'USA'\n.SL99    ANOP\n* ---> Add option(s)\n         MACRO\n&LABEL   #GO   &NAME,&AR=I\n         AIF   ('&NAME' NE '').A\n         MNOTE 8,'--- NAME of routine missing (it is mandatory) ---'\n         AGO   .MEND\n.A       AIF   ('&AR' EQ 'D').B\n&LABEL   L     R15,=A(&NAME)\n         AGO   .C\n.B       ANOP\n&LABEL   L     R15,&NAME\n.C       BASR  R14,R15\n.MEND    MEND\n         PRINT ON\n         SPACE 1\nSTREK    START 0\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*    Name :    STREK                                                  *\n*                                                                     *\n*    Author :  Ted BESTANI                                            *\n*                                                                     *\n*    Purpose : This program is designed to play STAR-TREK using the   *\n*              hardware characteristics of 3270 terminals.            *\n*                                                                     *\n*    Attributes : Non-reusable                                        *\n*                                                                     *\n*    Requirements : STAR-TREK requires that VTAM or TCAM support the  *\n*              FULL-SCREEN option (macros used : TGET/TPUT).          *\n*              It is designed for 3278-2 terminals.                   *\n*                                                                     *\n*    Origin :  Extracted from tape CBT 93 AUG, file 173.              *\n*              Updates : use of FSRTN routine (FULL-SCREEN).          *\n*                   by : MOINIL P.A.                                  *\n*                        Computing Centre (TP 361)                    *\n*                        J.R.C. - Ispra Establishment                 *\n*                        21020 Ispra (VA), Italy                      *\n*                                                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT &EULST\n        $DEFREG\n         EJECT\n        $XENT  BASE=(R12)\n         LM    R10,R11,=A(WORKDBLW,WORKDBLW+4*1024)\n         USING WORKDBLW,R10,R11\n*        --> CHECK IF WE ARE ENTERED AS TSO COMMAND\n         LR    R2,R1               GET ENTRY R1\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB)\n*        Results : BATCH-exec       TSO-background   TSO-foreground\n*                +----------------+----------------+----------------+\n*          APSCB +     0          +     a.PSCB     +     a.PSCB     +\n*           ATSO +     a.Flag     +     a.Flag     +     a.Flag     +\n*           Flag +     X'00'      +     X'00'      +     x'80'      +\n*                +----------------+----------------+----------------+\n*        Initial R1 -> a.CPPL (IKJCPPL) if TSO-command\n*                   -> a.Comm. Area (IKJEBECA) if TSO-subcommmand\n*                   -> a.Parameters List in all other cases\n         L     R1,ATSO             TSO-FLAG ADDRESS\n         TM    0(R1),X'80'         TSO FOREGROUND?\n         BZ    ERREX               NO, BACKGROUND, FLUSH\n         L     R1,APSCB            YES, GET PSCB ADDRESS\n         LTR   R1,R1               TSO RUNNING?\n         BZ    ERREX               NO, WHAT'S THAT? FLUSH\n         USING CPPL,R2\n         USING PSCB,R1\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?\n         BNE   *+L'*+10            NO\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?\n         BE    INITOK              YES, TSO COMMAND\n         LR    R1,R2\n         USING IKJEBECA,R1\n         L     R2,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?\n         BE    INITOK              YES, TSO SUB-COMMAND\n         DROP  R2\nERREX   WTO    ' -> Only TSO foreground command allowed',              X\n               ROUTCDE=11,DESC=7\n         B     SRC16\nINITOK   ST    R2,ACPPL            SAVE CPPL ADDRESS FOR LATER\n        #GO    GETCMD              HANDLE OPERAND(S) IF ANY\n        @FSI   FSBFSZ,TERMAT,RQSZ,MF=(E,FSPARM) INITIALIZE FULL-SCREEN\n         LTR   R15,R15\n         BZ    INFSOK\n         MVI   MSG1F1,C'I'\n         CVD   R15,WORKDBLW\n         MVC   MSG1F2,=XL4'40202120'\n         ED    MSG1F2,WORKDBLW+L'WORKDBLW-2\n        TPUT   MSG1,L'MSG1         PUT OUT ERROR MESSAGE\n         B     SRC16\nINFSOK  #GO    VERIFY              GO VERIFY TERMINAL\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     VERFOK              0 - OK, CONTINUE\n         B     DRERROR             4 - ERROR\n         B     DRCLEAR             8 - CLEAR AND END\nVERFOK   L     R2,ATIOT            SEARCH DD IF SNAP AVAILABLE\n         USING TIODSECT,R2\nSCSNAP   CLC   TIOELNGH(4),=F'0'\n         BE    DRIVER\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP '\n         BNE   *+L'*+4\n         OI    OPTFS,FSSNAP        SET USER WANT SNAP SCREEN INPUT\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SCSNAP\n         DROP  R2\nDRIVER   L     R0,STARCHRL\n         LR    R2,R0\n        GETMAIN R,LV=(0)\n         ST    R1,STARCHRT\n         AR    R1,R2\n         ST    R1,STARCHRX\n         TM    SWEXEC,SWCOMP       GO DIRECTLY TO COMPUTER?\n         BO    REINIT              YES\n        #GO    HEADER              DISPLAY HEADER\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     REINIT              0 - OK, CONTINUE\n         B     DRERROR             4 - ERROR\n         B     DRCLEAR             8 - CLEAR AND END\nREINIT  #GO    INITMEM             INITIALIZE MEMORY\n*        --> STAR-TREK main process.\nDSLOOP  #GO    DSPLAYS             BUILD AND INVOKE PRIMARY SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+8             0 - OK, CONTINUE\n         B     DRERROR             4 - ERROR\n         B     DRCLEAR             8 - CLEAR AND END\n        #GO    CLLCMND             INVOKE REQUESTED COMMAND\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+12            0 - OK, CONTINUE\n         B     DRERROR             4 - ERROR\n         B     DRCLEAR             8 - CLEAR AND END\n         B     DSLOOP              12 - DIAGNOSE (SYNTAX)\n         CLI   SWITCH,C' '\n         BNE   ENDGAME             INTERUPT\n        #GO    REACTIO             THE KLINGONS FIRE BACK\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     *+L'*+4             0 - OK\n         B     DRCLEAR             4 - SEVERE ERROR, CLEAR AND END\n         CLI   SWITCH,C' '\n         BE    DSLOOP              LOOP\nENDGAME #GO    DSPLEND             END OF GAME\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     REINIT              0 - OK, ANOTHER ONE\n         B     DRERROR             4 - ERROR\n         B     DRCLEAR             8 - CLEAR AND END\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                        T E R M I N A T I O N                        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nDRERROR  CVD   R15,WORKDBLW\n         MVC   MSG2F2,=XL4'40202120'\n         ED    MSG2F2,WORKDBLW+L'WORKDBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSG2F1+1\n         SRL   R0,4\n         STC   R0,MSG2F1\n         NC    MSG2F1,=XL2'0F0F'\n         TR    MSG2F1,=CL16'0123456789ABCDEF'\n         LA    R0,L'MSG2\n         STH   R0,ERRMSL\n         LA    R0,MSG2\n         ST    R0,ERRMSA\nDRCLEAR  MVI   OPTFS,FSEXIT        EXIT FULL-SCREEN MODE\n        @FS    OPTFS,MF=(E,FSPARM)\n         LR    R2,R15              RETAIN RETURN CODE\n         ICM   R1,B'1111',STARCHRT\n         BZ    NOSTCH\n         L     R0,STARCHRL\n        FREEMAIN R,LV=(0),A=(1)\nNOSTCH   XR    R0,R0\n         ICM   R0,B'0011',ERRMSL\n         BZ    NOMSGE\n         L     R1,ERRMSA\n        TPUT   (1),(0)             PUT OUT ERROR MESSAGE\nNOMSGE   LTR   R2,R2\n         BZ    QUIT\n         CVD   R2,WORKDBLW\n         MVC   MSG2F2,=XL4'40202120'\n         ED    MSG2F2,WORKDBLW+L'WORKDBLW-2\n         XR    R0,R0\n         IC    R0,OPTFS\n         STC   R0,MSG2F1+1\n         SRL   R0,4\n         STC   R0,MSG2F1\n         NC    MSG2F1,=XL2'0F0F'\n         TR    MSG2F1,=CL16'0123456789ABCDEF'\n        TPUT   MSG2,L'MSG2\nSRC16    LA    R2,16               SET RC=16\nQUIT    $XRET  CC=(R2)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12\n         EJECT\n*------> THIS ROUTINE HANDLES EVENTUAL COMMAND OPERAND(S).\n*        AT EXIT : R15 = 0.\n         SPACE 1\nGETCMD  $XENT  BASE=(R9)\n         L     R2,ACPPL            GET CPPL ADDRESS\n         USING CPPL,R2\n         L     R1,CPPLCBUF         GET COMMAND BUFFER ADDRESS\n         DROP  R2\n         LH    R3,0(R1)            BUFFER LENGTH\n         SH    R3,=H'4'            PREFIX LENGTH\n         LH    R2,2(R1)            OFFSET TO OPERAND(S)\n         SR    R3,R2               OPERAND(S) LENGTH\n         BNP   GETCMDX             NONE, JUMP\n         LA    R0,L'CMOBUF         MAX. LENGTH ACCEPTABLE\n         CLR   R3,R0\n         BNH   *+L'*+2\n         LR    R3,R0               TRUNCATE IF HIGHER\n         LA    R2,4(R1,R2)         START ADDRESS OF OPERAND(S)\n         BCT   R3,*+L'*+6          COMPUTE MACHINE LENGTH\n         OC    CMOBUF(*-*),0(R2)   <<EXECUTED>>\n         EX    R3,*-6              MOVE AND UPPERCASE OPERAND(S)\n         LA    R3,CMOBUF(R3)       SET SCAN POINTERS\n         LA    R2,1\n         LA    R4,CMOBUF\nOPSCN1   CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     GETCMDX\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=H'1'\n         BNE   OPSCN2\n         CLI   0(R14),C'H'         BYPASS SCREEN TITLE?\n         BNE   *+L'*+8             NO\n         OI    SWEXEC,SWHELP       YES, SET BYPASS\n         B     OPSCNX\n         CLI   0(R14),C'G'         GO DIRECTLY TO COMPUTER?\n         BNE   *+L'*+8             NO\n         OI    SWEXEC,SWCOMP       YES, SET GO\n         B     OPSCNX\n         CLI   0(R14),C'B'         TEST BLOW SCREEN?\n         BNE   OPSCNX              NO\n         OI    SWEXEC,SWBLOW       YES, SET TEST\n         B     OPSCNX\nOPSCN2   CH    R15,=H'2'\n         BNE   OPSCN3\n         CLC   0(2,R14),=CL2'GO'   GO DIRECTLY TO COMPUTER?\n         BNE   OPSCNX              NO\n         OI    SWEXEC,SWCOMP       YES, SET GO\n         B     OPSCNX\nOPSCN3   CH    R15,=H'4'\n         BNE   OPSCNX\n         CLC   0(4,R14),=CL4'HELP' BYPASS SCREEN TITLE?\n         BNE   *+L'*+8             NO\n         OI    SWEXEC,SWHELP       YES, SET BYPASS\n         B     OPSCNX\n         CLC   0(4,R14),=CL4'BLOW' TEST BLOW SCREEN?\n         BNE   OPSCNX              NO\n         OI    SWEXEC,SWBLOW       YES, SET TEST\nOPSCNX   CLR   R4,R3\n         BL    OPSCN1\nGETCMDX  XR    R15,R15             SET RC=0\n        $XRET  CC=(R15)\n         SPACE 1\nCMOBUF   DC    CL80' '             COMMAND OPERAND(S)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE VERIFY TERMINAL FEATURES.\n*        AT EXIT : R15 = 0, 4 OR 8.\n         SPACE 1\nVERIFY  $XENT  BASE=(R9)\n         NI    OPTFS,FSFULL+FSSNAP\n         OI    OPTFS,FSSKIP\n        @FS    OPTFS,SCRNI,SCRNIL,MF=(E,FSPARM)\n         LTR   R15,R15\n         BNZ   VERIFYE\n         TM    FSATTRB3,FSTQUERY   CAN DO QUERY ON THIS TUBE?\n         BZ    VERIFYR             NO, SKIP (NO COLORS, ...)\n        @FSQ   ,                   YES, DO IT\n         LTR   R15,R15\n         BNZ   VERIFYQ\n         LR    R2,R1               QUERY REPLY DATA\n         LR    R3,R1\n         ALR   R3,R0\n         LA    R1,1\n         SLR   R3,R1\nVERIFY1  ALR   R2,R1\n         CLR   R2,R3\n         BH    VERIFYR\n         CLC   2(2,R2),=XL2'8186'  COLORS DEFINED ?\n         BE    SETEXC              YES\n         CLC   2(2,R2),=XL2'8187'  HIGHLIGHTING DEFINED ?\n         BE    SETEXH              YES\nVERIFY2  XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         B     VERIFY1\nSETEXC   CLC   0(2,R2),=H'6'\n         BL    VERIFY2\n         CLI   5(R2),8\n         BL    VERIFY2\n         OI    SWEXEC,FSEXC\n         B     VERIFY2\nSETEXH   CLC   0(2,R2),=H'5'\n         BL    VERIFY2\n         CLI   4(R2),4\n         BL    VERIFY2\n         OI    SWEXEC,FSEXH\n         B     VERIFY2\nVERIFYQ  MVI   MSG1F1,C'Q'\n         CVD   R15,WORKDBLW\n         MVC   MSG1F2,=XL4'40202120'\n         ED    MSG1F2,WORKDBLW+L'WORKDBLW-2\n         LA    R0,L'MSG1\n         STH   R0,ERRMSL\n         LA    R0,MSG1\n         ST    R0,ERRMSA\n         LA    R15,8               ERROR, SET RC=8\n         B     VERIFYX\nVERIFYE  LA    R15,4               ERROR, SET RC=4\n         B     VERIFYX\nVERIFYR  XR    R15,R15             SET RC=0\nVERIFYX $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nSCRNIL   DC    A(LSCRNI)\nSCRNI    $FS   CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n         $FS   SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(IC),MF=L\nLSCRNI   EQU   *-SCRNI\n         EJECT\n*------> THIS ROUTINE TPUT'S HEADERS.\n*        AT EXIT : R15 = 0, 4 OR 8.\n         SPACE 1\nHEADER  $XENT  BASE=(R9)\n         TM    SWEXEC,SWHELP       BYPASS SCREEN TITLE?\n         BO    HEAD20              YES, BYPASS\n         L     R8,=A(SCRNT,LSCRNTL,RSCRTH)\n         USING SCRNT,R8\n        $FS    SF=NORMAL,MF=(I,SCTLN01I) SET NORMAL INPUT\n         MVI   INPUT+0,C' '        RESET INPUT FIELD\nHEAD10   MVC   SCTLN01R,INPUT+0\n         LM    R0,R2,=A(SCRNT,LSCRNTL,RSCRTH)\n         TM    SWEXEC,FSEXC+FSEXH  DOES THIS TUBE SUPPORT COLOR?\n         BO    *+L'*+10            YES\n         L     R1,=A(LSCRNTS)      NO, USE SHORT LENGTH\n         MVC   SCTCOLOR(L'SCTLA+L'SCTIC),SCTLA\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             HEADER (TITLE) SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     HEAD20              0 - CONTINUE\n         B     HEADERX             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    HEAD20              NO, CONTINUE\n         BM    HEADERX             YES, IMMEDIATE TERMINATION\n        $FS    SF=(INT),MF=(I,SCTLN01I) SET ERROR INPUT\n         B     HEAD10\n         DROP  R8\nHEAD20   L     R8,=A(SCRNH,LSCRNH,RSCRTH)\n         USING SCRNH,R8\n        $FS    SF=NORMAL,MF=(I,SCHLN01I) SET NORMAL INPUT\n         MVI   INPUT+0,C' '        RESET INPUT FIELD\nHEAD21   MVC   SCHLN01R,INPUT+0\n         LM    R0,R2,=A(SCRNH,LSCRNH,RSCRTH)\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             HEADER (DESCRIPTION) SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     HEAD30              0 - CONTINUE\n         B     HEADERX             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    HEAD30              NO, CONTINUE\n         BM    HEADERX             YES, IMMEDIATE TERMINATION\n        $FS    SF=(INT),MF=(I,SCHLN01I) SET ERROR INPUT\n         B     HEAD21\n         DROP  R8\nHEAD30   XR    R15,R15             SET RC=0\nHEADERX $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nSCRNT    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\nSCTLN01I $FS   SF=NORMAL,MF=L\nSCTLN01R $FS   TEXT=(' ',1),MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT=' SSSSSSSSSSS      TTTTTTTTTTTTTTTT   ',MF=L\n         $FS   TEXT='   AAAAAAAAAAAA      RRRRRRRRRRRRRR     ',MF=L\n         $FS   TEXT='   SS         SS     TTTTTTTTTTTTTTTT   ',MF=L\n         $FS   TEXT='  AAAAAAAAAAAAAA     RR           RR    ',MF=L\n         $FS   TEXT='  SS           SS           TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR            RR   ',MF=L\n         $FS   TEXT='  SS           SS           TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR            RR   ',MF=L\n         $FS   TEXT='   SS                       TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR           RR    ',MF=L\n         $FS   TEXT='    SSSSSSSSSSS             TT          ',MF=L\n         $FS   TEXT=' AAAAAAAAAAAAAAAA    RRRRRRRRRRRRRR     ',MF=L\n         $FS   TEXT='              SS            TT          ',MF=L\n         $FS   TEXT=' AAAAAAAAAAAAAAAA    RR       RR        ',MF=L\n         $FS   TEXT='  SS           SS           TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR        RR       ',MF=L\n         $FS   TEXT='  SS           SS           TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR         RR      ',MF=L\n         $FS   TEXT='   SS         SS            TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR          RR     ',MF=L\n         $FS   TEXT='    SSSSSSSSSSS             TT          ',MF=L\n         $FS   TEXT=' AA            AA    RR           RR    ',MF=L\n         $FS   SBA=(14,1),MF=L\n         $FS   TEXT='TTTTTTTTTTTTTTTTT    RRRRRRRRRRRRRR     ',MF=L\n         $FS   TEXT=' EEEEEEEEEEEEEEEE    KK            KK   ',MF=L\n         $FS   TEXT='TTTTTTTTTTTTTTTTT    RR           RR    ',MF=L\n         $FS   TEXT=' EEEEEEEEEEEEEEEE    KK          KK     ',MF=L\n         $FS   TEXT='       TT            RR            RR   ',MF=L\n         $FS   TEXT=' EE                  KK        KK       ',MF=L\n         $FS   TEXT='       TT            RR            RR   ',MF=L\n         $FS   TEXT=' EE                  KK      KK         ',MF=L\n         $FS   TEXT='       TT            RR           RR    ',MF=L\n         $FS   TEXT=' EE                  KK    KK           ',MF=L\n         $FS   TEXT='       TT            RRRRRRRRRRRRRR     ',MF=L\n         $FS   TEXT=' EEEEEEEEEE          KK  KKK            ',MF=L\n         $FS   TEXT='       TT            RR      RR         ',MF=L\n         $FS   TEXT=' EE                  KKKK  KK           ',MF=L\n         $FS   TEXT='       TT            RR       RR        ',MF=L\n         $FS   TEXT=' EE                  KK      KK         ',MF=L\n         $FS   TEXT='       TT            RR        RR       ',MF=L\n         $FS   TEXT=' EE                  KK        KK       ',MF=L\n         $FS   TEXT='       TT            RR         RR      ',MF=L\n         $FS   TEXT=' EEEEEEEEEEEEEEEE    KK          KK     ',MF=L\n         $FS   TEXT='       TT            RR          RR     ',MF=L\n         $FS   TEXT=' EEEEEEEEEEEEEEEE    KK            KK   ',MF=L\nLSCRNTS  EQU   (*-SCRNT)+L'SCTLA+L'SCTIC\nSCTCOLOR $FS   SBA=(1,3),MF=L\n         $FS   MFE=(HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(13,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\nSCTLA    $FS   SBA=(1,2),MF=L\nSCTIC    $FS   SF=(IC),MF=L\nLSCRNTL  EQU     *-SCRNT\n         SPACE 1\nSCRNH    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\nSCHLN01I $FS   SF=NORMAL,MF=L\nSCHLN01R $FS   TEXT=(' ',1),MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   SBA=(1,26),TEXT='**** Welcome to STAR-TREK ****',MF=L\n         $FS   SBA=(2,5),MF=L\n         AIF   ('&EUDCH' EQ 'EUROPE').DCH1\n         $FS   TEXT='HI!',MF=L\n         $FS   SF=(SKIP),TEXT='Welcome to',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STAR-TREK!',MF=L\n         AGO   .DCH2\n.DCH1    ANOP\n         $FS   TEXT='HI|',MF=L\n         $FS   SF=(SKIP),TEXT='Welcome to',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STAR-TREK|',MF=L\n.DCH2    $FS   SF=(SKIP),TEXT='This game is based on the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STAR-TREK TV',MF=L\n         $FS   SF=(SKIP),TEXT='series, and',MF=L\n         $FS   SBA=(3,1),MF=L\n         $FS   TEXT='is intended for those of us that ',MF=L\n         $FS   TEXT='just never were able to get enough.',MF=L\n         $FS   SBA=(4,5),MF=L\n         $FS   TEXT='The context of the game is a space ',MF=L\n         $FS   TEXT='battle between the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='Federation starship',MF=L\n         $FS   SBA=(5,1),TEXT='ENTERPRISE',MF=L\n         $FS   SF=(SKIP),TEXT='and several',MF=L\n         $FS   SF=(SKIP,INT),TEXT='KLINGON',MF=L\n         $FS   SF=(SKIP),TEXT='vessels. The',MF=L\n         $FS   SF=(SKIP,INT),TEXT='ENTERPRISE',MF=L\n         $FS   SF=(SKIP),TEXT='has been patrolling the',MF=L\n         $FS   SBA=(6,1),MF=L\n         $FS   TEXT='ROMULA ANDROS IV sector at the outbreak ',MF=L\n         $FS   TEXT='of interstellar war. The mission is now',MF=L\n         $FS   SBA=(7,1),TEXT='to defeat the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='KLINGON',MF=L\n         $FS   SF=(SKIP),TEXT='vessels in a specific number of',MF=L\n         $FS   SF=(SKIP,INT),TEXT='\"PARALLAX YEARS\".',MF=L\n         $FS   SBA=(8,4),SF=(SKIP),MF=L\n         $FS   TEXT='Following this page, you will be introduced',MF=L\n         $FS   TEXT=' to the main screen of the ships ',MF=L\n         $FS   SBA=(9,1),MF=L\n         $FS   TEXT='battle computer. By skillfully using ti',MF=L\n         $FS   TEXT='me, photon torpedoes, and phasers, you',MF=L\n         $FS   SBA=(10,1),TEXT='can defeat the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='KLINGONS',MF=L\n         $FS   SF=(SKIP),TEXT='and save the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='Federation.',MF=L\n         $FS   SBA=(11,4),SF=(SKIP),MF=L\n         $FS   TEXT='The screen of the battle computer is',MF=L\n         $FS   TEXT=' made up of four distinct sections. The',MF=L\n         $FS   SBA=(12,1),MF=L\n         $FS   TEXT='upper left section contains the long ',MF=L\n         $FS   TEXT='range sensors. This is a display of the',MF=L\n         $FS   SBA=(13,1),MF=L\n         $FS   TEXT='status (XYZ, where X=KLINGONS, Y=BASES ',MF=L\n         $FS   TEXT='and Z=STARS) of the sector, broken into',MF=L\n         $FS   SBA=(14,1),MF=L\n         $FS   TEXT='quadrants, and referred to by their',MF=L\n         $FS   SF=(SKIP,INT),TEXT='(x,y)',MF=L\n         $FS   SF=(SKIP),TEXT='axis coordinates (1,1 to 4,4). The',MF=L\n         $FS   SBA=(15,1),MF=L\n         $FS   TEXT='upper right section contains the short ',MF=L\n         $FS   TEXT='range sensors. This is a display of the',MF=L\n         $FS   SBA=(16,1),MF=L\n         $FS   TEXT='status of the quadrant you are in.',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STARS',MF=L\n         $FS   SF=(SKIP),TEXT='are represented by an',MF=L\n         $FS   SF=(SKIP,INT),TEXT='\"*\",',MF=L\n         $FS   SF=(SKIP),TEXT='the',MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   SBA=(17,1),TEXT='ENTERPRISE',MF=L\n         $FS   SF=(SKIP),TEXT='by',MF=L\n         $FS   SF=(SKIP,INT),TEXT='\"E\",',MF=L\n         $FS   SF=(SKIP),TEXT='and',MF=L\n         $FS   SF=(SKIP,INT),TEXT='KLINGONS',MF=L\n         $FS   SF=(SKIP),TEXT='by',MF=L\n         $FS   SF=(SKIP,INT),TEXT='\"K\".',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   TEXT='The lower right section is a display',MF=L\n         $FS   SBA=(18,1),TEXT='of the current operating ',MF=L\n         $FS   TEXT='statistics of the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='ENTERPRISE.',MF=L\n         $FS   SF=(SKIP),TEXT='The lower left section',MF=L\n         $FS   SBA=(19,1),MF=L\n         $FS   TEXT='is the area you use to communicate ',MF=L\n         $FS   TEXT='with the battle computer.',MF=L\n         $FS   SBA=(20,5),MF=L\n         $FS   TEXT='If you run out of supplies or energy ',MF=L\n         $FS   TEXT='you can get refueled by going to a',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STAR',MF=L\n         $FS   SBA=(21,1),TEXT='BASE,',MF=L\n         $FS   SF=(SKIP),TEXT='represented by a',MF=L\n         $FS   SF=(SKIP,INT),TEXT='\"B\"',MF=L\n         $FS   SF=(SKIP),TEXT='(move on every side, ',MF=L\n         $FS   TEXT='unless diagonally).',MF=L\n         $FS   SBA=(22,5),MF=L\n         $FS   TEXT='Note, however, that every time you use the',MF=L\n         $FS   SF=(SKIP,INT),TEXT='WARP DRIVE',MF=L\n         $FS   SF=(SKIP),TEXT='it costs you at least',MF=L\n         $FS   SBA=(23,1),TEXT='a year. To bypass these ',MF=L\n         $FS   TEXT='introduction screens, call',MF=L\n         $FS   SF=(SKIP,INT),TEXT='STREK',MF=L\n         $FS   SF=(SKIP),TEXT='with option',MF=L\n         $FS   SF=(SKIP,INT),TEXT='GO.',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(24,27),SF=(SKIP,INT),MF=L\n         $FS   TEXT='G O O D    L U C K    ',MF=L\n         AIF   ('&EUDCH' EQ 'EUROPE').DCH3\n         $FS   TEXT='!!!!',MF=L\n         AGO   .DCH4\n.DCH3    ANOP\n         $FS   TEXT='||||',MF=L\n.DCH4    $FS   SF=(SKIP),MF=L\n         $FS   SBA=(1,2),SF=(IC),MF=L\nLSCRNH   EQU   *-SCRNH\n         EJECT\n*------> READ \"SCRNT\" AND \"SCRNH\" PROCESS ROUTINE.\n*        AT EXIT : R1=INPUT TRUE LENGTH.\n         SPACE 1\nRSCRTH  $XENT  BASE=(R9)\n         XR    R2,R2               INITIAL COUNT\nRHLOOP  @FSR   ,                   GET REPLY TEXT\n         LTR   R15,R15             NO MORE FIELDS MODIFIED?\n         BNZ   RHPRCD              NO\n         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA\n         ST    R2,24(R1)           PASS BACK COUNT IN R1\n         XR    R15,R15             EXIT\n        $XRET  CC=(R15)\nRHPRCD   CLC   SCHCSF1,0(R15)\n         BNE   RHLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         LTR   R1,R1\n         BZ    RHFC1               FIELD CLEARED (CANC FC)\n         CH    R1,=H'1'\n         BNE   RHLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVI   INPUT+0,C' '        FOR UPPERCASE\n         OC    INPUT+0(1),3(R15)   COPY OPTION\n         B     RHBF1\nRHFC1    MVI   INPUT+0,C' '        OPTION CLEARED\nRHBF1    LA    R2,1(R2)            BUMP COUNT\n         B     RHLOOP\n         SPACE 1\nSCHCSF1  $FS   SBA=(1,2),MF=L\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE INITIALIZES MEMORY.\n*        AT EXIT : R15 = 0.\n         SPACE 1\nINITMEM $XENT  BASE=(R9)\n         LM    R0,R1,STARCHRT      CLEAR ALL TO INITIAL STATE\n         LA    R14,*\n         XR    R15,R15\n         MVCL  R0,R14\n         MVI   INPUT,C' '\n         MVC   INPUT+1(L'INPUT-1),INPUT+1\n         MVC   SCRTOI,=CL7'_______'\n         MVI   SWITCH,C' '\n         MVI   SCMSG1,C' '\n         MVC   SCMSG1+1(L'SCMSG1-1),SCMSG1\n         MVC   SCMSG2,SCMSG1\n         MVC   SCMSG3,SCMSG1\n         XC    KIRKPTR,KIRKPTR\n         ZAP   GAMENRGY,=PL3'5000'\n         MVC   GAMEDATE,=CL6'5537.1'\n         ZAP   GAMETORP,=PL2'10'\n         MVI   STATUS,C'1'\n         ZAP   DEFLECT,=PL2'100'\n        #GO    RANDOMR             GET RANDOM NUMBER (0-9)\n         LTR   R2,R1               COPY REGISTER\n         BZ    *+L'*+4\n         MH    R2,=Y(L'GAMETBL)    MULTIPLY BY NODE LENGTH\n         LA    R3,GAMETBL          GET START ADDRESS\n         AR    R3,R2               ADD TO BASE\n         MVC   GAMESTAT,0(R3)      MOVE THE GAME STATISTICS\n        TIME   MIC,TIMEAREA        GET BASE TIME\n         MVC   TIMEAREA(2),TIMEAREA+5 ALIGN\n         NI    TIMEAREA,X'03'      CLEAR BITS DOWN TO MOST 1K-1\n         LH    R2,TIMEAREA         LOAD INTO WORK REGISTER\n         ZAP   INITKLNG,GAMEKLNG   INITIALIZE COUNTERS\n         ZAP   INITBASE,GAMEBASE    \" \"\n         ZAP   INITSTRS,GAMESTRS    \" \"\n         B     INTL2\nINTL1    SRL   R2,2                JUMBLE DISP PTR\n        TIME   MIC,TIMEAREA        GET TIME FOR RANDOM FACTOR\n         MVC   TIMEAREA(2),TIMEAREA+5 ALIGN\n         NI    TIMEAREA,X'0F'      CLEAR HIGH ORDER NIBBLE\n         LH    R4,TIMEAREA         LOAD INTO WORK REGISTER\n         SRL   R4,4                CLEAR LOW ORDER NIBBLE (0<=X<256)\n         AR    R2,R4               ADD RANDOM FACTOR\nINTL2    CP    INITSTRS,=PL1'0'    ALL THE STARS USED UP?\n         BE    TRYKLING\n         LA    R2,129(R2)          BUMP DISPLACEMENT COUNTER\n         CL    R2,STARCHRL         EXCEEDED TABLE?\n         BH    INTL1               YES, CLEAR\n         L     R3,STARCHRT         START CHART PTR\n         AR    R3,R2               ADD DISPLACEMENT\n         CLI   0(R3),X'00'         HAS THIS POINT BEEN USED YET?\n         BNE   TRYKLING\n         MVI   0(R3),X'03'         MARK AS A STAR\n         SP    INITSTRS,=PL1'1'    DECREMENT STAR COUNTER\nTRYKLING CP    INITKLNG,=PL1'0'    ALL THE KLINGONS USED UP?\n         BE    TRYBASES\n         LA    R2,129(R2)          BUMP DISPLACEMENT COUNTER\n         CL    R2,STARCHRL         EXCEEDED TABLE?\n         BH    INTL1               YES, CLEAR\n         L     R3,STARCHRT         START CHART PTR\n         AR    R3,R2               ADD DISPLACEMENT\n         CLI   0(R3),X'00'         HAS THIS POINT BEEN USED YET?\n         BNE   TRYBASES\n         MVI   0(R3),X'01'         MARK AS A KLINGON\n         SP    INITKLNG,=PL1'1'    DECREMENT KLINGON COUNTER\nTRYBASES CP    INITBASE,=PL1'0'    ALL THE BASES USED UP?\n         BE    INTL3\n         LA    R2,129(R2)          BUMP DISPLACEMENT COUNTER\n         CL    R2,STARCHRL         EXCEEDED TABLE?\n         BH    INTL1               YES, CLEAR\n         L     R3,STARCHRT         STAR CHART PTR\n         AR    R3,R2               ADD DISPLACEMENT\n         CLI   0(R3),X'00'         HAS THIS POINT BEEN USED YET?\n         BNE   INTL2\n         MVI   0(R3),X'02'         MARK AS A BASE\n         SP    INITBASE,=PL1'1'    DECREMENT BASE COUNTER\n         B     INTL2\nINTL3    CP    INITKLNG,=PL1'0'    NO KLINGONS ALSO?\n         BNE   INTL2\n         CP    INITSTRS,=PL1'0'    NO STARS EITHER\n         BNE   INTL2\n         L     R3,STARCHRT         STAR CHART PTR\nINTKIRK TIME   MIC,TIMEAREA        GET BASE TIME\n         MVC   TIMEAREA(2),TIMEAREA+5 ALIGN\n         NI    TIMEAREA,X'03'      CLEAR BITS DOWN TO MOST 1K-1\n         LH    R2,TIMEAREA         ADD DISP\n         AR    R2,R3               GET ADDRESS IN STAR CHART\n         CLI   0(R2),X'00'         IS IT EMPTY\n         BNE   INTKIRK\n         MVI   0(R2),X'04'         PUT CAPT. KIRK IN IT\n*        --> NOW LET'S JUMBLE IT UP A BIT.\n         LR    R2,R3\n         AH    R3,=H'768'\n         LA    R4,128\nJUMBLE1  XC    0(1,R2),0(R3)       FLIP THE TWO BYTES\n         XC    0(1,R3),0(R2)        \" \"\n         XC    0(1,R2),0(R3)        \" \"\n         LA    R2,2(R2)            BUMP 1ST PTR\n         LA    R3,2(R3)             \" \" 2ND PTR\n         BCT   R4,JUMBLE1          ITERATE\n         L     R2,STARCHRT\n         LR    R3,R2\n         AH    R2,=H'512'\n         AH    R3,=H'256'\n         LA    R4,128\nJUMBLE2  XC    0(1,R2),0(R3)       FLIP THE TWO BYTES\n         XC    0(1,R3),0(R2)        \" \"\n         XC    0(1,R2),0(R3)        \" \"\n         LA    R2,2(R2)            BUMP 1ST PTR\n         LA    R3,2(R3)             \" \" 2ND PTR\n         BCT   R4,JUMBLE2          ITERATE\n         XR    R15,R15             SET RC=0\n        $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE REBUILDS THE MAIN DISPLAY SCREEN.\n*        AT EXIT : R15 = 0, 4 OR 8.\nDSPLAYS $XENT  BASE=(R9)\n         L     R8,=A(SCRN1,LSCRN1L,RSCRT1)\n         USING SCRN1,R8\n*        --> FORMAT LOGON RANGE SENSORS.\n         L     R1,STARCHRT         INIT PTR TO STAR CHART\n         LA    R2,SC1LRS            \" \"             SCREEN\n         LA    R3,4                4 LINES PER SECTOR\nDSPLOOP1 LA    R4,4                QUADRANTS PER LINE\nDSPLOOP2 LA    R5,64               64 POSITIONS PER QUADRANT\n         ZAP   ACCUM1,=PL1'0'\n         ZAP   ACCUM2,=PL1'0'\n         ZAP   ACCUM3,=PL1'0'\nDSPLOOP3 CLI   0(R1),X'00'         EMPTY?\n         BE    DSPEMPTY\n         CLI   0(R1),X'01'         KLINGON?\n         BNE   *+L'*+10\n         AP    ACCUM1,=PL1'1'      COUNT KLINGONS\n         B     DSPEMPTY\n         CLI   0(R1),X'02'         BASE\n         BNE   DSPTYPE3\n         CP    ACCUM2,=PL1'0'      CAN'T HAVE TWO BASE IN 1 QUAD\n         BNE   *+L'*+10\n         AP    ACCUM2,=PL1'1'      LET USER HAVE AT LEAST 1\n         B     DSPEMPTY\n         MVI   0(R1),X'00'         SORRY - CLEAR IT OUT\n         SP    GAMEBASE,=PL1'1'    SUBTRACT FROM TOTAL PER GAME\n         B     DSPEMPTY\nDSPTYPE3 CLI   0(R1),X'03'         STAR?\n         BNE   *+L'*+10\n         AP    ACCUM3,=PL1'1'      COUNT STARS\n         B     DSPEMPTY\n         CLI   0(R1),X'04'         ENTERPRISE?\n         BE    *+L'*+8\n         MVI   MSG3F1,C'A'         IMPOSSIBLE - BOMB\n         B     DSPLAYZ\n         ST    R1,KIRKPTR          STORE ADDRESS OF ENTERPRISE\nDSPEMPTY LA    R1,1(R1)            BUMP STAR CHART PTR\n         BCT   R5,DSPLOOP3         LOOP THRU MINOR INDEX\n         UNPK  0(1,R2),ACCUM1      PUT KLINGONS IN LONG RANGE\n         OI    0(R2),X'F0'\n         UNPK  1(1,R2),ACCUM2          BASES\n         OI    1(R2),X'F0'\n         UNPK  2(1,R2),ACCUM3          STARS\n         OI    2(R2),X'F0'\n         LA    R2,SC1LRSN(R2)      BUMP SCREEN PTR\n         BCT   R4,DSPLOOP2         ITERATE THRU SECOND LEVEL INDEX\n         LA    R2,SC1LRSNL(R2)     MOVE SCREEN PTR TO NEXT LINE\n         BCT   R3,DSPLOOP1         ITERATE THRU MAJOR INDEX\n*        --> FORMAT QUADRANT INDICATOR.\n         L     R2,KIRKPTR          GET ADDRESS OF ENTERPRISE\n         S     R2,STARCHRT         DO RELATIVE ADDRESS\n         SRL   R2,6                DIVIDE BY 64\n         ST    R2,KIRKPTR          SAVE RELATIVE QUADRANT\n         LTR   R3,R2\n         BZ    *+L'*+10\n         AR    R3,R2\n         MH    R2,=Y(L'QUADCVT1)   MULTIPLY BY LENGTH\n         MH    R3,=Y(L'QUADCVT3)   MULTIPLY BY LENGTH\n         LA    R2,QUADCVT1(R2)     GET ADDRESS IN CONVERSION TABLE\n         MVC   SC1LN13N,0(R2)      PUT CURRENT QUADRANT IN SCREEN\n         LA    R3,QUADCVT3(R3)     GET ADDRESS IN SBA TABLE\n         TM    SWEXEC,FSEXC+FSEXH  DOES THIS TUBE SUPPORT COLOR?\n         BO    DSPLCOL             YES\n         LA    R4,SC1COLOR         NO, SET CURRENT QUADRANT IN LOW\n         MVC   0(L'QUADCVT3,R4),0(R3)\n         LA    R4,L'QUADCVT3(R4)\n        $FS    SF=(SKIP),MF=(E,(R4))\n         MVC   0(L'QUADCVT3,R4),0+L'QUADCVT3(R3)\n         LA    R4,L'QUADCVT3(R4)\n        $FS    SF=(SKIP,INT),MF=(E,(R4))\nDSPLCOL  MVC   SC1LNCXY,0(R3)      PUT SBA CURRENT QUADRANT IN SCREEN\n*        --> FORMAT SHORT RANGE SENSORS AND POST COMBAT STATUS.\n         L     R4,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R4,6                MULTIPLY BY 64\n         A     R4,STARCHRT         GET ADDRESS OF QUADRANT\n         CLI   STATUS,C'4'         IS THE ENTERPRISE DOCKED?\n         BE    DSPSTBYP            YES, BYPASS\n         LR    R3,R4\n         XC    TRTABLE,TRTABLE     CLEAR SEARCH TABLE\n         MVI   TRTABLE+X'01',X'01' POST KLINGON FOR SEARCH\n         TRT   0(64,R3),TRTABLE    SEARCH QUADRANT FOR KLINGON\n         BNZ   DSPR1               FOUND, GO POST COND RED\n         CP    GAMENRGY,=PL3'1000' LOW ON ENERGY\n         BNH   DSPY1               GO POST COND YELLOW\n         CP    GAMEYRS,=PL1'5'     LOW ON YEARS\n         BNH   DSPY1               GO POST COND YELLOW\n         MVI   STATUS,C'1'         POST COND GREEN\n        $FS    SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),       X\n               MF=(I,SC1ATT)\n         B     DSPSTBYP\nDSPY1    MVI   STATUS,C'2'         POST COND YELLOW\n        $FS    SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),      X\n               MF=(I,SC1ATT)\n         B     DSPSTBYP\nDSPR1    MVI   STATUS,C'3'         POST COND RED\n        $FS    SFE=(ATTR,(SKIP,INT),HILITE,BLINK,COLOR,RED),           X\n               MF=(I,SC1ATT)\n*        --> COMPUTE SCREEN EFFICIENCY PERCENTAGE.\n         ZAP   WORKDBLW,GAMENRGY   GET REMAINING ENERGY\n         MP    WORKDBLW,=PL2'100'  * 100\n         DP    WORKDBLW,=PL3'5000' DIVIDE BY STARTING ENERGY\n         ZAP   DEFLECT,WORKDBLW+3(2) SAVE THE PERCENTAGE\n         MVC   SCMSG3,=CL44'You are under attack'\nDSPSTBYP LA    R5,SC1SRS           GET ADDRESS OF SHORT RANGE SENSORS\n         LA    R2,8                8 LINES PER QUADRANT\nDSPLOOP4 LA    R3,8                8 POSITIONS PER LINE\nDSPLOOP5 CLI   0(R4),X'00'         IS IT EMPTY?\n         BNE   *+L'*+8\n         MVI   0(R5),C'.'          MARK AS EMPTY\n         B     DSPLOOP6\n         CLI   0(R4),X'01'         IS IT A KLINGON?\n         BNE   *+L'*+8\n         MVI   0(R5),C'K'          MARK AS KLINGON\n         B     DSPLOOP6\n         CLI   0(R4),X'02'         IS IT A STAR BASE?\n         BNE   *+L'*+8\n         MVI   0(R5),C'B'          MARK AS STAR BASE\n         B     DSPLOOP6\n         CLI   0(R4),X'03'         IS IT A STAR?\n         BNE   *+L'*+8\n         MVI   0(R5),C'*'          MARK AS STAR\n         B     DSPLOOP6\n         CLI   0(R4),X'04'         IS IT THE ENTERPRISE?\n         BNE   *+L'*+8\n         MVI   0(R5),C'E'          MARK AS ENTERPRISE\n         B     DSPLOOP6\n         MVI   MSG3F1,C'B'         IMPOSSIBLE - BOMB\nDSPLAYZ  LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\nDSPLXIT  LA    R15,8               ERROR, SET RC=8\n         B     DSPLAYX\nDSPLOOP6 LA    R4,1(R4)            BUMP STARCHRT PTR\n         LA    R5,SC1SRSN(R5)       \" \" SCREEN PTR\n         BCT   R3,DSPLOOP5         ITERATE THRU LOW INDEX\n         LA    R5,SC1SRSNL(R5)     GO TO NEXT LINE\n         BCT   R2,DSPLOOP4         ITERATE THRU HIGH INDEX\n*        --> FORMAT OPERATING STATISTICS.\n         UNPK  SC1LN17N,GAMENRGY   DISPLAY ENERGY RESERVES\n         OI    SC1LN17N+L'SC1LN17N-1,C'0'\n         UNPK  SC1LN18N,GAMETORP   PHOTON TORPEDOES\n         OI    SC1LN18N+L'SC1LN18N-1,C'0'\n         UNPK  SC1LN19N,GAMEYRS    REMAINING YEARS\n         OI    SC1LN19N+L'SC1LN19N-1,C'0'\n         UNPK  SC1LN20N,GAMEKLNG   KLINGONS\n         OI    SC1LN20N+L'SC1LN20N-1,C'0'\n         UNPK  SC1LN21N,GAMEBASE   BASES\n         OI    SC1LN21N+L'SC1LN21N-1,C'0'\n         UNPK  SC1LN22N,DEFLECT    DEFLECTION PERCENTAGE\n         OI    SC1LN22N+L'SC1LN22N-1,C'0'\n         MVC   SC1LN23N,GAMEDATE   STAR DATE\n*        --> FORMAT BATTLE CONDITION.\n         CLI   STATUS,C'1'\n         BNE   *+L'*+10\n         MVC   SC1LN24N,=CL6'GREEN '\n         B     STATUS1\n         CLI   STATUS,C'2'\n         BNE   *+L'*+10\n         MVC   SC1LN24N,=CL6'YELLOW'\n         B     STATUS1\n         CLI   STATUS,C'3'\n         BNE   *+L'*+10\n         MVC   SC1LN24N,=CL6'RED   '\n         B     STATUS1\n         CLI   STATUS,C'4'\n         BNE   STATUS1\n         MVC   SC1LN24N,=CL6'DOCKED'\n*        --> PUT MESSAGES IN SCREEN.\nSTATUS1  MVC   SC1LN22M,SCMSG1\n         MVC   SC1LN23M,SCMSG2\n         MVC   SC1LN24M,SCMSG3\n*        --> PUT OUT THE SCREEN AND THEN RETURN IT.\nSCPUT1   MVC   SC1LN17R,SCRTOI+0   MOVE TO SCREEN\n         MVC   SC1LN18R,SCRTOI+1    \" \"\n         MVC   SC1LN19R,SCRTOI+2    \" \"\n         MVC   SC1LN20R,SCRTOI+3    \" \"\n         MVC   INPUT+0(L'SCRTOI),SCRTOI COPY TO INPUT\n         LM    R0,R2,=A(SCRN1,LSCRN1L,RSCRT1)\n         TM    SWEXEC,FSEXC+FSEXH  DOES THIS TUBE SUPPORT COLOR?\n         BO    *+L'*+10            YES\n         L     R1,=A(LSCRN1S)      NO, USE SHORT LENGTH\n         MVC   SC1COLOR+LSSC1N(L'SC1LA+L'SC1IC),SC1LA\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             PAINT THE SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     PFKEYS              0 - PF-KEY\n         B     DSPLAYX             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    SCPUT1              NO, RESHOW\n         BM    DSPLAYX             YES, IMMEDIATE TERMINATION\n         CLI   INPUT+0,C'0'        USER REQUEST DIRECTORY?\n         BE    SCHELP1             YES\n         MVC   SCRTOI,INPUT        MOVE COMMAND\n        $FS    SF=NORMAL,MF=(I,SC1LN17I)\n        $FS    SF=NORMAL,MF=(I,SC1LN18I)\n        $FS    SF=NORMAL,MF=(I,SC1LN19I)\n        $FS    SF=NORMAL,MF=(I,SC1LN20I)\n        $FS    SBA=(17,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,SC1CMD1)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,SC1CMD2)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,SC1CMD3)\n        $FS    SBA=(20,2),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X\n               MF=(I,SC1CMD4)\n         MVI   SCMSG1,C' '         CLEAR MSG LINES\n         MVC   SCMSG1+1(L'SCMSG1-1),SCMSG1\n         MVC   SCMSG2,SCMSG1\n         MVC   SCMSG3,SCMSG1\n         XR    R15,R15             SET RC=0\n         B     DSPLAYX\nPFKEYS   CLI   INPUT+0,C'9'        IMMEDIATE TERMINATION?\n         BE    DSPLXIT             YES\n         CLI   INPUT+0,C'1'        USER REQUEST DIRECTORY?\n         BNE   SCPUT1              NO, RESHOW\n         DROP  R8\nSCHELP1  L     R8,=A(SCRN2,LSCRN2,RSCRTH)\n         USING SCRN2,R8\n        $FS    SF=NORMAL,MF=(I,SC2LN01I) SET NORMAL INPUT\n         MVI   INPUT+0,C' '        RESET INPUT FIELD\nSCHELP2  MVC   SC2LN01R,INPUT+0\n         LM    R0,R2,=A(SCRN2,LSCRN2,RSCRTH)\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             COMMAND (HELP) SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     SCHELP3             0 - CONTINUE\n         B     DSPLAYX             4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    SCHELP3             NO, CONTINUE\n         BM    DSPLAYX             YES, IMMEDIATE TERMINATION\n        $FS    SF=(INT),MF=(I,SC2LN01I) SET ERROR INPUT\n         B     SCHELP2\n         DROP  R8\nSCHELP3  L     R8,=A(SCRN1,LSCRN1L,RSCRT1)\n         B     SCPUT1\nDSPLAYX $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\n*------- MAIN BATTLE COMPUTER SCREEN LAYOUT.\nSCRN1    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\nSC1LSF   $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='=========================          U   ',MF=L\n         $FS   TEXT='U          ============================ ',MF=L\nSC1LN02  $FS   TEXT=' = XXX = XXX = XXX = XXX = 4--Y     S   ',MF=L\nSC1LRS   EQU   SC1LN02+3           INITIAL POINT\nSC1LRSN  EQU   6                   NEXT ON SAME LINE\nSC1LRSNL EQU   136                 TO FIRST ON NEXT LINE\n         $FS   TEXT='S     Y--8 =  .  .  .  .  .  .  .  .  = ',MF=L\nSC1SRS   EQU   SC1LN02+54          INITIAL POINT\nSC1SRSN  EQU   3                   NEXT ON SAME LINE\nSC1SRSNL EQU   56                  TO FIRST ON NEXT LINE\n         $FS   TEXT=' =========================          S   ',MF=L\n         $FS   TEXT='S        7 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' = XXX = XXX = XXX = XXX = 3            ',MF=L\n         $FS   TEXT='         6 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' =========================          E   ',MF=L\n         $FS   TEXT='E        5 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' = XXX = XXX = XXX = XXX = 2        N   ',MF=L\n         $FS   TEXT='N        4 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' =========================          T   ',MF=L\n         $FS   TEXT='T        3 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' = XXX = XXX = XXX = XXX = 1        E   ',MF=L\n         $FS   TEXT='E        2 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT=' =========================          R   ',MF=L\n         $FS   TEXT='R        1 =  .  .  .  .  .  .  .  .  = ',MF=L\n         $FS   TEXT='    1     2     3     4   ----X     P   ',MF=L\n         $FS   TEXT='P          ============================ ',MF=L\n         $FS   TEXT=' Sector : Romula Andros IV          R   ',MF=L\n         $FS   TEXT='R     X----   1  2  3  4  5  6  7  8    ',MF=L\n         $FS   TEXT=' Long Range Sensors :               I   ',MF=L\n         $FS   TEXT='I             Short Range Sensors :     ',MF=L\n         $FS   TEXT='  Position 1 - Klingons             S   ',MF=L\n         $FS   TEXT='S              Quadrant = (',MF=L\nSC1LN13N $FS   TEXT='X,Y',MF=L\n         $FS   TEXT=')         ',MF=L\n         $FS   TEXT='  Position 2 - Star Bases           E   ',MF=L\n         $FS   TEXT='E                                       ',MF=L\n         $FS   TEXT='  Position 3 - Stars                    ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   TEXT='************* Communications ***********',MF=L\n         $FS   TEXT='******    ==== Operating Statistics ====',MF=L\n         $FS   TEXT='*   ',MF=L\nSC1LN17I $FS   SF=NORMAL,MF=L\nSC1LN17R $FS   TEXT=' ',MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='<---Enter command (0 for director',MF=L\n         $FS   TEXT='y)   *    Energy..................(',MF=L\nSC1LN17N $FS   TEXT='0000',MF=L\n         $FS   TEXT=')',MF=L\n         $FS   TEXT='*   ',MF=L\nSC1LN18I $FS   SF=NORMAL,MF=L\nSC1LN18R $FS   TEXT=' ',MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='<---Enter X axis coordinate      ',MF=L\n         $FS   TEXT='     *    Photon torpedoes..........(',MF=L\nSC1LN18N $FS   TEXT='00',MF=L\n         $FS   TEXT=')',MF=L\n         $FS   TEXT='*   ',MF=L\nSC1LN19I $FS   SF=NORMAL,MF=L\nSC1LN19R $FS   TEXT=' ',MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='<---Enter Y axis coordinate      ',MF=L\n         $FS   TEXT='     *    Years remaining...........(',MF=L\nSC1LN19N $FS   TEXT='00',MF=L\n         $FS   TEXT=')',MF=L\n         $FS   TEXT='*',MF=L\nSC1LN20I $FS   SF=NORMAL,MF=L\nSC1LN20R $FS   TEXT='    ',MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='<---Enter energy quantity        ',MF=L\n         $FS   TEXT='     *    Klingons..................(',MF=L\nSC1LN20N $FS   TEXT='00',MF=L\n         $FS   TEXT=')',MF=L\n         $FS   TEXT='****************************************',MF=L\n         $FS   TEXT='******    Star bases................(',MF=L\nSC1LN21N $FS   TEXT='00',MF=L\n         $FS   TEXT=')',MF=L\nSC1LN22M $FS   TEXT=(' ',44),MF=L\n         $FS   TEXT='      Deflection energy (%)....(',MF=L\nSC1LN22N $FS   TEXT='000',MF=L\n         $FS   TEXT=')',MF=L\nSC1LN23M $FS   TEXT=(' ',44),MF=L\n         $FS   TEXT='      Star date.............(',MF=L\nSC1LN23N $FS   TEXT='0000.0',MF=L\n         $FS   TEXT=')',MF=L\nSC1LN24M $FS   TEXT=(' ',44),MF=L\n         $FS   TEXT='      Combat status.........(',MF=L\nSC1LN24N $FS   TEXT='YELLOW',MF=L\n         $FS   TEXT=')',MF=L\nLSSC1N   EQU   (2*L'QUADCVT3)+(2*L'SC1LSF)\nLSCRN1S  EQU   (*-SCRN1)+LSSC1N+L'SC1LA+L'SC1IC\n*------- EXTENDED COLOR FIELDS FOR MAIN BATTLE COMPUTER.\n*        --> LONG RANGE SENSORS.\nSC1COLOR $FS   SBA=(1,1),MFE=(HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(1,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(2,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(2,7),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,9),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(2,13),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,15),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(2,19),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,21),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(2,25),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(3,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(3,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(4,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(4,7),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,9),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(4,13),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,15),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(4,19),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,21),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(4,25),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(5,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(5,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(6,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(6,7),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,9),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(6,13),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,15),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(6,19),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,21),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(6,25),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(7,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(7,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(8,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,3),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(8,7),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,9),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(8,13),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,15),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(8,19),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,21),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,TURQ),MF=L\n         $FS   SBA=(8,25),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(9,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(9,27),SF=(SKIP,INT),MF=L\n         $FS   SBA=(13,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(13,30),SF=(SKIP,INT),MF=L\n         $FS   SBA=(14,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(14,30),SF=(SKIP,INT),MF=L\n         $FS   SBA=(15,1),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(15,30),SF=(SKIP,INT),MF=L\n*        --> REVERSE VIDEO THE USS ENTERPRISE.\n         $FS   SBA=(1,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(1,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(1,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(1,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(2,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(2,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(2,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(2,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(3,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(3,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(3,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(3,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(5,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(5,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(5,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(5,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(6,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(6,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(6,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(6,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(7,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(7,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(7,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(7,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(8,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(8,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(8,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(8,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(9,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(9,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(9,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(9,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(10,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(10,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(10,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(10,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(11,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(11,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(11,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(11,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(12,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(12,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(12,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(12,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(13,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(13,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(13,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(13,42),SF=(SKIP,INT),MF=L\n         $FS   SBA=(14,36),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(14,38),SF=(SKIP,INT),MF=L\n         $FS   SBA=(14,40),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,BLUE),MF=L\n         $FS   SBA=(14,42),SF=(SKIP,INT),MF=L\n*        --> SHORT RANGE SENSORS.\n         $FS   SBA=(1,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(1,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(2,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(2,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(2,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(3,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(3,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(3,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(3,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(4,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(4,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(4,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(5,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(5,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(5,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(5,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(6,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(6,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(6,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(7,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(7,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(7,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(7,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(8,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(8,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(8,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(9,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(9,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,YELLOW),MF=L\n         $FS   SBA=(9,78),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(9,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(10,51),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,GREEN),MF=L\n         $FS   SBA=(10,80),SF=(SKIP,INT),MF=L\n*        --> UNDERLINE THE QUADRANT INDICATOR.\n         $FS   SBA=(13,53),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(13,66),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,USCORE,COLOR,PINK),MF=L\n         $FS   SBA=(13,72),SF=(SKIP,INT),MF=L\n*        --> COMMAND ENTRY CHARACTERS.\n         $FS   SBA=(15,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(16,47),SF=(SKIP,INT),MF=L\n         $FS   SBA=(16,50),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(17,2),SF=(SKIP),MF=L\nSC1CMD1  $FS   SBA=(17,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(17,45),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(17,47),SF=(SKIP,INT),MF=L\n         $FS   SBA=(17,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(18,2),SF=(SKIP),MF=L\nSC1CMD2  $FS   SBA=(18,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(18,45),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(18,47),SF=(SKIP,INT),MF=L\n         $FS   SBA=(18,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(19,2),SF=(SKIP),MF=L\nSC1CMD3  $FS   SBA=(19,5),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(19,45),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(19,47),SF=(SKIP,INT),MF=L\n         $FS   SBA=(19,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\nSC1CMD4  $FS   SBA=(20,2),                                             X\n               MFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(20,45),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(20,47),SF=(SKIP,INT),MF=L\n         $FS   SBA=(20,80),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,REVERSE,COLOR,TURQ),MF=L\n         $FS   SBA=(21,47),SF=(SKIP,INT),MF=L\n*        --> STATISTICS.\n         $FS   SBA=(17,75),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(18,77),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(19,77),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(20,77),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(21,77),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(21,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(22,76),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(22,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(23,73),MF=L\n         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(23,80),SF=(SKIP,INT),MF=L\n         $FS   SBA=(24,73),MF=L\nSC1ATT   $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L\n         $FS   SBA=(24,80),SF=(SKIP,INT),MF=L\n*        --> PICK OUT CURRENT QUADRANT OF LONG RANGE SENSORS\nSC1LNCXY $FS   SBA=(2,3),MFE=(COLOR,PINK),MF=L\n*        --> INSERT CURSOR AT COMMAND ENTRY FIELD.\nSC1LA    $FS   SBA=(17,6),MF=L\nSC1IC    $FS   SF=(IC),MF=L\nLSCRN1L  EQU   *-SCRN1\n         SPACE 1\nSCRN2    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\nSC2LN01I $FS   SF=NORMAL,MF=L\nSC2LN01R $FS   TEXT=(' ',1),MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   SBA=(1,22),MF=L\n         $FS   TEXT='**** STAR-TREK command directory ****',MF=L\n         $FS   SBA=(3,1),MF=L\n         $FS   SF=(SKIP,INT),TEXT='9 <--- END',MF=L\n         $FS   SF=(SKIP),TEXT='the game (this implies that ',MF=L\n         $FS   TEXT='you are surrendering) / PF9-PA1-PA2-PA3',MF=L\n         $FS   SBA=(5,1),MF=L\n         $FS   SF=(SKIP,INT),TEXT='1 <--- WARP DRIVE,',MF=L\n         $FS   SF=(SKIP),TEXT='interquadrant travel',MF=L\n         $FS   TEXT=' (between quadrants)',MF=L\n         $FS   SBA=(6,9),TEXT='Operand 1 - enter the X axis of ',MF=L\n         $FS   TEXT='the destination quadrant',MF=L\n         $FS   SBA=(7,9),TEXT='Operand 2 - enter the Y axis of ',MF=L\n         $FS   TEXT='the destination quadrant',MF=L\n         $FS   SBA=(9,1),MF=L\n         $FS   SF=(SKIP,INT),TEXT='2 <--- IMPULSE POWER,',MF=L\n         $FS   SF=(SKIP),TEXT='quadrant travel',MF=L\n         $FS   TEXT=' (within the current quadrant)',MF=L\n         $FS   SBA=(10,9),TEXT='Operand 1 - enter the X axis of ',MF=L\n         $FS   TEXT='the destination position',MF=L\n         $FS   SBA=(11,9),TEXT='Operand 2 - enter the Y axis of ',MF=L\n         $FS   TEXT='the destination position',MF=L\n         $FS   SBA=(13,1),MF=L\n         $FS   SF=(SKIP,INT),TEXT='3 <--- FIRE PHOTON TORPEDO',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(14,9),TEXT='Operand 1 - enter the X axis ',MF=L\n         $FS   TEXT='coordinate of the target',MF=L\n         $FS   SBA=(15,9),TEXT='Operand 2 - enter the Y axis ',MF=L\n         $FS   TEXT='coordinate of the target',MF=L\n         $FS   SBA=(17,1),MF=L\n         $FS   SF=(SKIP,INT),TEXT='4 <--- FIRE PHASERS',MF=L\n         $FS   SF=(SKIP),MF=L\n         $FS   SBA=(18,9),TEXT='Operand 1 - enter the X axis ',MF=L\n         $FS   TEXT='coordinate of the target',MF=L\n         $FS   SBA=(19,9),TEXT='Operand 2 - enter the Y axis ',MF=L\n         $FS   TEXT='coordinate of the target                   ',MF=L\n         $FS   SBA=(20,9),TEXT='Operand 3 - enter the amount of ',MF=L\n         $FS   TEXT='energy for phaser burst',MF=L\n         $FS   SBA=(23,1),SF=(SKIP,INT),TEXT='PF1 :',MF=L\n         $FS   SF=(SKIP),TEXT='display directory',MF=L\n         $FS   SBA=(1,2),SF=(IC),MF=L\nLSCRN2   EQU   *-SCRN2\n         EJECT\n*------> INPUT \"SCRN1\" PROCESS ROUTINE.\n*        AT EXIT : R1=INPUT TRUE LENGTH.\n         SPACE 1\nRSCRT1  $XENT  BASE=(R9)\n         XR    R2,R2               INITIAL COUNT\nR1LOOP  @FSR   ,                   GET REPLY TEXT\n         LTR   R15,R15             NO MORE FIELDS MODIFIED?\n         BNZ   R1PRCD              NO\n         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA\n         ST    R2,24(R1)           PASS BACK COUNT IN R1\n         XR    R15,R15             EXIT\n        $XRET  CC=(R15)\nR1PRCD   CLC   SC1CSF1,0(R15)\n         BE    R1FL1\n         CLC   SC1CSF2,0(R15)\n         BE    R1FL2\n         CLC   SC1CSF3,0(R15)\n         BE    R1FL3\n         CLC   SC1CSF4,0(R15)\n         BE    R1FL4\n         B     R1LOOP              UNEXPECTED (CHECK SCREEN IMAGE)\nR1FL1    LTR   R1,R1\n         BZ    R1FC1               FIELD CLEARED (CANC FC)\n         CH    R1,=H'1'\n         BNE   R1LOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVI   INPUT+0,C' '        FOR UPPERCASE\n         OC    INPUT+0(1),3(R15)   COPY COMMAND\n         B     R1BF1\nR1FC1    MVI   INPUT+0,C' '        COMMAND CLEARED\nR1BF1    LA    R2,1(R2)            BUMP COUNT\n         B     R1LOOP\nR1FL2    LTR   R1,R1\n         BZ    R1FC2               FIELD CLEARED (CANC FC)\n         CH    R1,=H'1'\n         BNE   R1LOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVI   INPUT+1,C' '        FOR UPPERCASE\n         OC    INPUT+1(1),3(R15)   COPY X AXIS COORDINATE\n         B     R1BF2\nR1FC2    MVI   INPUT+1,C' '        X AXIS COORDINATE CLEARED\nR1BF2    LA    R2,1(R2)            BUMP COUNT\n         B     R1LOOP\nR1FL3    LTR   R1,R1\n         BZ    R1FC3               FIELD CLEARED (CANC FC)\n         CH    R1,=H'1'\n         BNE   R1LOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVI   INPUT+2,C' '        FOR UPPERCASE\n         OC    INPUT+2(1),3(R15)   COPY Y AXIS COORDINATE\n         B     R1BF3\nR1FC3    MVI   INPUT+2,C' '        Y AXIS COORDINATE CLEARED\nR1BF3    LA    R2,1(R2)            BUMP COUNT\n         B     R1LOOP\nR1FL4    LTR   R1,R1\n         BZ    R1FC4               FIELD CLEARED (CANC FC)\n         CH    R1,=H'4'\n         BH    R1LOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVC   INPUT+3(4),=CL4' '  FOR UPPERCASE\n         SH    R1,=H'1'\n         EX    R1,R1OF4            COPY ENERGY QUANTITY\n         B     R1BF4\nR1FC4    MVC   INPUT+3(4),=CL4' '  ENERGY QUANTITY CLEARED\nR1BF4    LA    R2,4(R2)            BUMP COUNT\n         B     R1LOOP\nR1OF4    OC    INPUT+3(*-*),3(R15) <<EXECUTED>>\n         SPACE 1\nSC1CSF1  $FS   SBA=(17,6),MF=L\nSC1CSF2  $FS   SBA=(18,6),MF=L\nSC1CSF3  $FS   SBA=(19,6),MF=L\nSC1CSF4  $FS   SBA=(20,3),MF=L\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE ROUTES CONTROL TO THE COMMAND ROUTINES.\n*        AT EXIT : R15 = 0, 4 OR 8.\nCLLCMND $XENT  BASE=(R9)\n         CLI   INPUT+0,C'9'        END OF STAR-TREK\n         BNE   *+L'*+8\n         LA    R15,8               SET RC=8\n         B     CLLCMNX\n         CLI   INPUT+0,C'1'        COMMAND 1\n         BE    CCMND1\n         CLI   INPUT+0,C'2'        COMMAND 2\n         BE    CCMND2\n         CLI   INPUT+0,C'3'        COMMAND 3\n         BE    CCMND3\n         CLI   INPUT+0,C'4'        COMMAND 4\n         BE    CCMND4\n         L     R2,=A(SC1LN17I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD1)\n        $FS    SBA=(17,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         MVC   SCMSG1,=CL44'Invalid command'\n         LA    R15,12              SET RC=12\n         B     CLLCMNX\nCCMND1  #GO    CMD1                * WARP DRIVE INTER-QUADRANT\n         B     CLLCMNX\nCCMND2  #GO    CMD2                * WARP DRIVE INTRA-QUADRANT\n         B     CLLCMNX\nCCMND3  #GO    CMD3                * PHOTON TORPEDOES\n         B     CLLCMNX\nCCMND4  #GO    CMD4                * PHASER CONTROL\nCLLCMNX $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE ROUTES HANDLES TRAVEL BETWEEN QUADRANTS.\n*        AT EXIT : R15 = 0, 8 OR 12.\nCMD1    $XENT  BASE=(R9)\n         CLI   INPUT+1,C'1'        X MUST BE 1 - 4\n         BL    CMD1BADX\n         CLI   INPUT+1,C'4'\n         BH    CMD1BADX\n         CLI   INPUT+2,C'1'        Y MUST BE 1 - 4\n         BL    CMD1BADY\n         CLI   INPUT+2,C'4'\n         BH    CMD1BADY\n         L     R1,=A(SC1LN13N)     AXIS OF KIRK\n         PACK  WORKDBLW,0(1,R1)    GET X AXIS OF KIRK\n         CVB   R2,WORKDBLW\n         PACK  WORKDBLW,INPUT+1(1) GET X AXIS OF DESTINATION\n         CVB   R3,WORKDBLW\n         SR    R2,R3               GET DIFFERENCE\n         BNM   *+L'*+4\n         MH    R2,=H'-1'           GET ABSOLUTE VALUE\n         STH   R2,WRKHALF1         STORE\n         LTR   R2,R2\n         BZ    *+L'*+8\n         MH    R2,WRKHALF1         GET SQUARE\n         STH   R2,WRKHALF1         SAVE IT\n         PACK  WORKDBLW,0+L'SC1LN13N-1(1,R1) GET Y AXIS OF KIRK\n         CVB   R2,WORKDBLW\n         PACK  WORKDBLW,INPUT+2(1) GET Y AXIS OF DESTINATION\n         CVB   R3,WORKDBLW\n         SR    R2,R3               GET DIFFERENCE\n         BNM   *+L'*+4\n         MH    R2,=H'-1'           GET ABSOLUTE VALUE\n         STH   R2,WRKHALF2         STORE\n         LTR   R2,R2\n         BZ    *+L'*+4\n         MH    R2,WRKHALF2         GET SQUARE\n         AH    R2,WRKHALF1         ADD SQUARES\n         LR    R1,R2               MOVE FOR SQRT RTN\n        #GO    SQRTRTN             GET SQUARE ROOT\n         CVD   R1,WORKDBLW         CONVERT RADIX\n         SP    GAMEYRS,WORKDBLW    SUBTRACT FROM YEARS LEFT\n         BNP   CMD1KRKD            < 1 FEDERATION IS CONQUERED\n         PACK  WRKFULL1,GAMEDATE(4) PACK DATE\n         AP    WRKFULL1,WORKDBLW   SUBTRACT YEARS\n         UNPK  GAMEDATE(4),WRKFULL1 REINSTATE DATE\n         OI    GAMEDATE+3,X'F0'    CLEAR SIGN BIT\n         LTR   R1,R1\n         BZ    *+L'*+4\n         MH    R1,=H'50'           ENERGY = 50 UNITS PER YEAR\n         CVD   R1,WORKDBLW         CONVERT RADIX\n         SP    GAMENRGY,WORKDBLW   SUBTRACT FROM ENERGY TOTAL\n         BP    *+L'*+8\nCMD1KRKD MVI   SWITCH,C'D'         < 0 FEDERATION IS CONQUERED\n         B     CMD1RC\n         L     R2,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT         ADD BASE ADDRESS\n         LA    R3,64               INIT BCT REGISTER\nCMD1KRK1 CLI   0(R2),X'04'         IS THIS KIRK\n         BE    CMD1KRK2            YES, GO CLEAR HIM FROM QUAD\n         LA    R2,1(R2)            NO, BUMP BY 1\n         BCT   R3,CMD1KRK1         BCT\n         MVI   MSG3F1,C'0'         IMPOSSIBLE - BOMB\n         B     CMD1Z\nCMD1KRK2 MVI   0(R2),X'00'         CLEAR KIRK\n         MVC   QUADFIND+0(1),INPUT+1 BUILD NEW QUADRANT ADDRESS\n         MVI   QUADFIND+1,C','\n         MVC   QUADFIND+2(1),INPUT+2\n         LA    R2,QUADCVT1         GET ADDRESS OF CONVERT TABLE\n         XR    R3,R3               CLEAR FIND REGISTER\nCMD1KRK3 CH    R3,=Y(QUADLVT1)     END OF TABLE?\n         BE    CMD1KRK4            YES, LEAVE\n         CLC   QUADFIND,0(R2)      THIS ENTRY IN TABLE?\n         BE    CMD1KRK5            YES, THIS IS IT\n         LA    R2,L'QUADCVT1(R2)   NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD1KRK3\nCMD1KRK4 MVI   MSG3F1,C'1'         IMPOSSIBLE - BOMB\n         B     CMD1Z\nCMD1KRK5 ST    R3,KIRKPTR          STORE NEW RELATIVE QUADRANT\n         SLL   R3,6                MULTIPLY BY 64\n         A     R3,STARCHRT         ADD BASE ADDRESS\n         LA    R4,64(R3)           SET UP END+1 OF QUADRANT\n        TIME   MIC,TIMEAREA        GET BASE TIME\n         MVC   TIMEAREA(2),TIMEAREA+5 ALIGN\n         NI    TIMEAREA,X'03'      CLEAR EXTRA BITS\n         LH    R1,TIMEAREA         LOAD INTO WORK REGISTER\n         SRL   R1,4                RANDOM FACTOR\n         AR    R1,R3               ADD QUADRANT ADDRESS\n         LR    R2,R1               SAVE STARTING SEARCH ADDRESS\nCMD1KRK6 CLI   0(R1),X'00'         IS THIS SLOT EMPTY\n         BE    CMD1KRK8            YES, PUT KIRK IN IT\n         LA    R1,1(R1)            BUMP PTR\n         CLR   R1,R4\n         BL    CMD1KRK6            ITERATE\n         LR    R1,R3\nCMD1KRK7 CLI   0(R1),X'00'         IS THIS SLOT EMPTY\n         BE    CMD1KRK8            YES, PUT KIRK IN IT\n         LA    R1,1(R1)            BUMP PTR\n         CLR   R1,R2\n         BL    CMD1KRK7            ITERATE\n         MVI   MSG3F1,C'2'         IMPOSSIBLE - BOMB\nCMD1Z    LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\n         LA    R15,8               ERROR, SET RC=8\n         B     CMD1X\nCMD1KRK8 MVI   0(R1),X'04'         PUT KIRK IN SLOT\n         L     R1,=A(SC1LN13N)\n         CLC   QUADFIND,0(R1)\n         BNE   *+L'*+6\n         MVC   SCMSG1,=CL44'You were already in this quadrant'\n         MVC   SCRTOI,=CL7'_______' RESET COMMAND DOTS\nCMD1RC   XR    R15,R15             SET RC=0\nCMD1X   $XRET  CC=(R15)\nCMD1BADX L     R2,=A(SC1LN18I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD2)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         B     CMD1BADC\nCMD1BADY L     R2,=A(SC1LN19I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD3)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\nCMD1BADC MVC   SCMSG1,=CL44'The coordinates you supplied are not'\n         MVC   SCMSG2,=CL44'in the ROMULA ANDROS IV sector'\n         LA    R15,12              SET RC=12\n         B     CMD1X\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE HANDLES TRAVEL INSIDE QUADRANTS.\n*        AT EXIT : R15 = 0, 8 OR 12.\nCMD2    $XENT  BASE=(R9)\n         CLI   INPUT+1,C'1'        X MUST BE 1 - 8\n         BL    CMD2BADX\n         CLI   INPUT+1,C'8'\n         BH    CMD2BADX\n         CLI   INPUT+2,C'1'        Y MUST BE 1 - 8\n         BL    CMD2BADY\n         CLI   INPUT+2,C'8'\n         BH    CMD2BADY\n         MVC   QUADFIND+0(1),INPUT+1 FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),INPUT+2\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3               CLEAR FIND REGISTER\nCMD2FULL CH    R3,=Y(QUADLVT2)     END OF TABLE?\n         BE    CMD2ERR             YES, LEAVE\n         CLC   QUADFIND,0(R2)      THIS ENTRY IN TABLE?\n         BE    CMD2FND             YES, THIS IS IT\n         LA    R2,L'QUADCVT2(R2)   NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD2FULL\nCMD2ERR  MVI   MSG3F1,C'3'         IMPOSSIBLE - BOMB\n         B     CMD2Z\nCMD2FND  L     R2,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT\n         LR    R5,R2\n         AR    R2,R3\n         CLI   0(R2),X'00'\n         BE    CMD2NULL\n         L     R2,=A(SC1LN18I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD2)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         L     R2,=A(SC1LN19I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD3)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         MVC   SCMSG1,=CL44'The point that you want to move to'\n         MVC   SCMSG2,=CL44'is already occupied'\n         LA    R15,12              SET RC=12\n         B     CMD2X\nCMD2NULL LA    R4,64\nCMD2FIND CLI   0(R5),X'04'         IS THIS KIRK?\n         BE    CMD2FND2            YES, END OF SEARCH\n         LA    R5,1(R5)\n         BCT   R4,CMD2FIND\n         MVI   MSG3F1,C'4'         WHAT'S THAT?\nCMD2Z    LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\n         LA    R15,8               ERROR, SET RC=8\n         B     CMD2X\n*        --> COMPUTE ENERGY COST OF MOVE.\nCMD2FND2 LR    R6,R5               SAVE PTR\n         S     R6,STARCHRT         SUBTRACT START ADDRESS\n         L     R7,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R7,6                MULTIPLY BY 64\n         SR    R6,R7               SUBTRACT FROM RESIDUAL\n         BZ    *+L'*+4\n         MH    R6,=Y(L'QUADCVT2)   * NODE LENGTH\n         LA    R7,QUADCVT2         TABLE BEGIN AREA\n         AR    R6,R7               ADD OFFSET\n         PACK  WORKDBLW,QUADFIND+0(1)\n         CVB   R8,WORKDBLW\n         PACK  WORKDBLW,0(1,R6)\n         CVB   R7,WORKDBLW\n         SR    R8,R7\n         BNM   *+L'*+4\n         MH    R8,=H'-1'\n         STH   R8,WRKHALF1         STORE\n         LTR   R8,R8\n         BZ    *+L'*+4\n         MH    R8,WRKHALF1         GET SQUARE\n         STH   R8,WRKHALF1         SAVE IT\n         PACK  WORKDBLW,QUADFIND+2(1)\n         CVB   R8,WORKDBLW\n         PACK  WORKDBLW,2(1,R6)\n         CVB   R7,WORKDBLW\n         SR    R8,R7               GET DIFFERENCE\n         BNM   *+L'*+4\n         MH    R8,=H'-1'           GET ABSOLUTE VALUE\n         STH   R8,WRKHALF2         STORE\n         LTR   R8,R8\n         BZ    *+L'*+4\n         MH    R8,WRKHALF2         GET SQUARE\n         AH    R8,WRKHALF1         ADD SQUARES\n         LR    R1,R8               MOVE FOR SQRT RTN\n        #GO    SQRTRTN             GET SQUARE ROOT\n         LTR   R1,R1\n         BZ    *+L'*+4\n         MH    R1,=H'10'\n         CVD   R1,WORKDBLW\n         SP    GAMENRGY,WORKDBLW\n         BP    *+L'*+8\n         MVI   SWITCH,C'D'\n         B     CMD2RC\n         MVI   0(R5),X'00'         CLEAR OLD POSITION\n         MVI   0(R2),X'04'         MARK NEW POSITION\n         MVC   SCRTOI,=CL7'_______' RESET COMMAND DOTS\nCMD2RC   XR    R15,R15             SET RC=0\nCMD2X   $XRET  CC=(R15)\nCMD2BADX L     R2,=A(SC1LN18I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD2)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         B     CMD2BADC\nCMD2BADY L     R2,=A(SC1LN19I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD3)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\nCMD2BADC MVC   SCMSG1,=CL44'The coordinates you supplied are not'\n         MVC   SCMSG2,=CL44'in the current quadrant'\n         LA    R15,12              SET RC=12\n         B     CMD2X\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE HANDLES PHOTON TORPEDOES.\n*        AT EXIT : R15 = 0, 4, 8 OR 12.\nCMD3    $XENT  BASE=(R9)\n         CLI   INPUT+1,C'1'        X MUST BE 1 - 8\n         BL    CMD3BADX\n         CLI   INPUT+1,C'8'\n         BH    CMD3BADX\n         CLI   INPUT+2,C'1'        Y MUST BE 1 - 8\n         BL    CMD3BADY\n         CLI   INPUT+2,C'8'\n         BH    CMD3BADY\n         MVC   QUADFIND+0(1),INPUT+1 FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),INPUT+2\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3               CLEAR FIND REGISTER\nCMD3FULL CH    R3,=Y(QUADLVT2)     END OF TABLE?\n         BE    CMD3ERR             YES, LEAVE\n         CLC   QUADFIND,0(R2)      THIS ENTRY IN TABLE?\n         BE    CMD3FND             YES, THIS IS IT\n         LA    R2,L'QUADCVT2(R2)   NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD3FULL\nCMD3ERR  MVI   MSG3F1,C'5'         IMPOSSIBLE - BOMB\nCMD3Z    LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\n         LA    R15,8               ERROR, SET RC=8\n         B     CMD3X\nCMD3FND  L     R2,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT\n         LR    R5,R2\n         AR    R2,R3\n         SP    GAMENRGY,=PL2'10'   COST IS 10 UNITS - ENERGY\n         BP    *+L'*+8\n         MVI   SWITCH,C'D'\n         B     CMD3RC\n         CP    GAMETORP,=PL1'0'    1 TORPEDO\n         BNE   *+L'*+10\n         MVC   SCMSG1,=CL44'You falls through ... no more torpedoes'\n         B     CMD3CLR\n         SP    GAMETORP,=PL1'1'    -1 TORPEDO\n         CLI   0(R2),X'00'         IS SLOT EMPTY\n         BNE   CMD3TRYE\n         MVC   SCMSG1,=CL44'You missed by supplying wrong coordinates'\n         B     CMD3CLR\nCMD3TRYE CLI   0(R2),X'04'         IS IT THE ENTERPRISE\n         BNE   CMD3TRYS\n         MVC   SCMSG1,=CL44'You cannot shoot yourself with a torpedo'\n         B     CMD3CLR\nCMD3TRYS CLI   0(R2),X'03'         IS IT A STAR\n         BNE   CMD3TRYB\n         MVI   0(R2),X'00'         CLEAR STAR\n         MVC   SCMSG1,=CL44'You just walloped a star'\n         SP    GAMESTRS,=PL1'1'    DECREMENT STAR COUNT\n         B     CMD3CLR\nCMD3TRYB CLI   0(R2),X'02'         IS IT A BASE\n         BNE   CMD3TRYK\n         MVI   0(R2),X'00'         CLEAR BASE\n         MVC   SCMSG1,=CL44'Congratulations, idiot, you just'\n         MVC   SCMSG2,=CL44'destroyed one of your own bases'\n         SP    GAMEBASE,=PL1'1'\n         BNM   *+L'*+6\n         ZAP   GAMEBASE,=PL1'0'\n        #GO    BLOWSCR\n         MVC   SCRTOI,=CL7'_______' RESET COMMAND DOTS\n         B     CMD3X\nCMD3TRYK CLI   0(R2),X'01'         IS IT A KLINGON?\n         BE    *+L'*+8             YES\n         MVI   MSG3F1,C'6'         IMPOSSIBLE - BOMB\n         B     CMD3Z\n        #GO    RANDOMR             GET RANDOM NUMBER (0-9)\n         CH    R1,=H'7'\n         BE    CMD3MISS\n         CH    R1,=H'8'\n         BE    CMD3MISS\n         CH    R1,=H'9'\n         BE    CMD3MISS\n         MVI   0(R2),X'00'         CLEAR IT\n         SP    GAMEKLNG,=PL1'1'    DECREMENT KLINGON COUNT\n         BNZ   *+L'*+8\n         MVI   SWITCH,C'W'\n         B     CMD3RC\n         MVC   SCMSG1,=CL44'You destroyed the KLINGON'\n         B     CMD3CLR\nCMD3MISS MVC   SCMSG1,=CL44'You missed by being unlucky'\nCMD3CLR  MVC   SCRTOI,=CL7'_______' RESET COMMAND DOTS\nCMD3RC   XR    R15,R15             SET RC=0\nCMD3X   $XRET  CC=(R15)\nCMD3BADX L     R2,=A(SC1LN18I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD2)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         B     CMD3BADC\nCMD3BADY L     R2,=A(SC1LN19I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD3)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\nCMD3BADC MVC   SCMSG1,=CL44'The coordinates you supplied are not'\n         MVC   SCMSG2,=CL44'in the current quadrant'\n         LA    R15,12              SET RC=12\n         B     CMD3X\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE HANDLES PHASERS.\n*        AT EXIT : R15 = 0, 4, 8 OR 12.\nCMD4    $XENT  BASE=(R9)\n         CLI   INPUT+1,C'1'        X MUST BE 1 - 8\n         BL    CMD4BADX\n         CLI   INPUT+1,C'8'\n         BH    CMD4BADX\n         CLI   INPUT+2,C'1'        Y MUST BE 1 - 8\n         BL    CMD4BADY\n         CLI   INPUT+2,C'8'\n         BH    CMD4BADY\n         LA    R2,INPUT+3\n         LA    R3,4\nCMD4SCN1 CLI   0(R2),C'_'\n         BNE   *+L'*+4\n         MVI   0(R2),C' '\n         LA    R2,1(R2)\n         BCT   R3,CMD4SCN1\n         LA    R2,INPUT+3\n         LA    R3,4\nCMD4SCN2 CLI   0(R2),C' '\n         BE    CMD4SCN3\n         CLI   0(R2),C'0'\n         BL    CMD4SCNE\n         CLI   0(R2),C'9'\n         BH    CMD4SCNE\nCMD4SCN3 LA    R2,1(R2)\n         BCT   R3,CMD4SCN2\nCMD4SCN4 CLI   INPUT+6,C' '\n         BNE    CMD4SCN5\n         MVC   INPUT+6(1),INPUT+5\n         MVC   INPUT+5(1),INPUT+4\n         MVC   INPUT+4(1),INPUT+3\n         MVI   INPUT+3,C' '\n         B      CMD4SCN4\nCMD4SCN5 LA    R2,INPUT+3\n         LA    R3,4\nCMD4SCN6 CLI   0(R2),C' '\n         BNE   CMD4SCN7\n         MVI   0(R2),C'0'\n         LA    R2,1(R2)\n         BCT   R3,CMD4SCN6\n         B     CMD4SCNS\nCMD4SCN7 LA    R2,1(R2)\n         BCT   R3,*+L'*+4\n         B     CMD4SCNS\n         CLI   0(R2),C' '\n         BNE   CMD4SCN7\nCMD4SCNE L     R2,=A(SC1LN20I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD4)\n        $FS    SBA=(20,2),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         MVC   SCMSG1,=CL44'Invalid energy quantity specified'\n         LA    R15,12              SET RC=12\n         B     CMD4X\nCMD4SCNS MVC   QUADFIND+0(1),INPUT+1  FORMAT POSITION ADDRESS\n         MVC   QUADFIND+2(1),INPUT+2\n         MVI   QUADFIND+1,C','\n         LA    R2,QUADCVT2\n         XR    R3,R3               CLEAR FIND REGISTER\nCMD4FULL CH    R3,=Y(QUADLVT2)     END OF TABLE?\n         BE    CMD4ERR             YES, LEAVE\n         CLC   QUADFIND,0(R2)      THIS ENTRY IN TABLE?\n         BE    CMD4FND             YES, THIS IS IT\n         LA    R2,L'QUADCVT2(R2)   NO, BUMP POINTER\n         LA    R3,1(R3)\n         B     CMD4FULL\nCMD4ERR  MVI   MSG3F1,C'7'         IMPOSSIBLE - BOMB\nCMD4Z    LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\n         LA    R15,8               ERROR, SET RC=8\n         B     CMD4X\nCMD4FND  L     R2,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT\n         LR    R5,R2\n         AR    R2,R3\n         CLI   0(R2),X'00'         IS SLOT EMPTY\n         BNE   CMD4TRYS\n         MVC   SCMSG1,=CL44'You missed by supplying wrong coordinates'\n         B     CMD4CLR\nCMD4TRYS CLI   0(R2),X'03'         IS IT A STAR\n         BNE   CMD4TRYB\n         MVC   SCMSG1,=CL44'You cannot destroy a star with phasers'\n         B     CMD4CLR\nCMD4TRYB CLI   0(R2),X'02'         IS IT A BASE\n         BNE   CMD4TRYK\n         MVC   SCMSG1,=CL44'You cannot destroy a base with phasers'\n         B     CMD4CLR\nCMD4TRYK CLI   0(R2),X'01'         IS IT A KLINGON\n         BNE   CMD4MISS\n         CLC   INPUT+3(4),=CL4'0499' MINIMUM ENERGY\n         BL    CMD4LOW\n         CLC   INPUT+3(4),=CL4'1000' MAXIMUM ENERGY\n         BH    CMD4BLW\n        #GO    RANDOMR             GET RANDOM NUMBER (0-9)\n         CH    R1,=H'6'            60% CHANCE\n         BNH   CMD4BLW\nCMD4LOW  MVC   SCMSG1,=CL44'Insufficient energy to phasers'\n         B     CMD4CLR\nCMD4BLW  MVI   0(R2),X'00'         CLEAR KLINGON FROM MAP\n        #GO    BLOWSCR\n         LTR   R15,R15\n         BNZ   CMD4X               ERROR COMPLETION\n         MVC   SCMSG1,=CL44'You destroyed the KLINGON'\n         SP    GAMEKLNG,=PL1'1'\n         BNZ   CMD4CLR\n         MVI   SWITCH,C'W'\n         B     CMD4RC\nCMD4MISS CLI   0(R2),X'04'         IS IT THE ENTERPRISE?\n         BE    *+L'*+8             YES\n         MVI   MSG3F1,C'8'         IMPOSSIBLE - BOMB\n         B     CMD4Z\n         MVC   SCMSG1,=CL44'You cannot destroy yourself with phasers'\n         B     CMD4CLR\nCMD4CLR  PACK  WORKDBLW,INPUT+3(4) SUBTRACT RATED ENERGY\n         SP    GAMENRGY,WORKDBLW\n         BP    *+L'*+8\n         MVI   SWITCH,C'D'\n         B     CMD4RC\n         MVC   SCRTOI,=CL7'_______' RESET COMMAND DOTS\nCMD4RC   XR    R15,R15             SET RC=0\nCMD4X   $XRET  CC=(R15)\nCMD4BADX L     R2,=A(SC1LN18I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD2)\n        $FS    SBA=(18,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\n         B     CMD4BADC\nCMD4BADY L     R2,=A(SC1LN19I)\n        $FS    SF=(INT),MF=(I,(R2))\n         L     R2,=A(SC1CMD3)\n        $FS    SBA=(19,5),                                             X\n               MFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X\n               MF=(I,(R2))\nCMD4BADC MVC   SCMSG1,=CL44'The coordinates you supplied are not'\n         MVC   SCMSG2,=CL44'in the current quadrant'\n         LA    R15,12              SET RC=12\n         B     CMD4X\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> BLOW-SCREEN ROUTINE\n*        AT EXIT : R15 = 0 - OK, TPUT DONE\n*                        4 - ERROR\n*                        8 - TERMINATE (WHEN TEST)\n         SPACE 1\nBLOWSCR $XENT  BASE=(R9)\n         TM    SWEXEC,SWBLOW       TEST BLOW SCREEN?\n         BZ    BLWSC2              NO\n         L     R8,=A(SCRNB,LSCRNB,RSCRTH)\n         USING SCRNB,R8\n        $FS    SF=NORMAL,MF=(I,SCBLN01I) SET NORMAL INPUT\n         MVI   INPUT+0,C' '        RESET INPUT FIELD\nBLWSC1   MVC   SCBLN01R,INPUT+0\n         LM    R0,R2,=A(SCRNB,LSCRNB,RSCRTH)\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             HEADER (TITLE) SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     BLWSCX              0 - CONTINUE\n         B     BLWSCX              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    BLWSCZ              NO, CONTINUE\n         BM    BLWSCX              YES, IMMEDIATE TERMINATION\n        $FS    SF=(INT),MF=(I,SCBLN01I) SET ERROR INPUT\n         B     BLWSC1\n         DROP  R8\n*        --> DO FULL-SCREEN TPUT (OUTPUT) ONLY.\nBLWSC2   NI    OPTFS,FSFULL+FSSNAP\n         OI    OPTFS,FSSKIP\n        @FS    OPTFS,SCRNB,SCRNBL,MF=(E,FSPARM)\n         LTR   R15,R15\n         BZ    *+L'*+8\nBLWSCE   LA    R15,4               ERROR, SET RC=4\n         B     BLWSCX\n        STIMER  WAIT,,BINTVL=TIMEWT,ERRET=BLWSCE\nBLWSCZ   XR    R15,R15             SET RC=0\nBLWSCX  $XRET  CC=(R15)\n         SPACE 1\nSCRNBL   DC    A(LSCRNB)\nTIMEWT   DC    A(2*100)            2.00 SEC WAIT INTERVAL\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         SPACE 1\nSCRNB    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\nSCBLN01I $FS   SF=NORMAL,MF=L\nSCBLN01R $FS   TEXT=(' ',1),MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   TEXT='        *****    *                   ',MF=L\n         $FS   TEXT='    .                  .                ',MF=L\n         $FS   TEXT=' .        ***..*** *               *    ',MF=L\n         $FS   TEXT='            ***                         ',MF=L\n         $FS   TEXT='          *** ...**           .   *|*   ',MF=L\n         $FS   TEXT='          #*#*#     . .                 ',MF=L\n         $FS   TEXT=' .  .      *.** . **.     .        |    ',MF=L\n         $FS   TEXT='.        #*#*# .                        ',MF=L\n         $FS   TEXT='              * **** *             |    ',MF=L\n         $FS   TEXT='          .      . .                    ',MF=L\n         $FS   TEXT='                .****** .     .    |    ',MF=L\n         $FS   TEXT='    .    .        .                     ',MF=L\n         $FS   TEXT='     .     .              .        |    ',MF=L\n         $FS   TEXT='        .    .                          ',MF=L\n         $FS   TEXT='                  .       .             ',MF=L\n         $FS   TEXT=' .         % .       .                  ',MF=L\n         $FS   TEXT='                             .    @@@   ',MF=L\n         $FS   TEXT='         .%%%                           ',MF=L\n         $FS   TEXT='                                 @@@@@  ',MF=L\n         $FS   TEXT='        .                               ',MF=L\n         $FS   TEXT='  <---------------------------- @@@@@@@ ',MF=L\n         $FS   TEXT='----------------------------->          ',MF=L\n         $FS   TEXT='                  .              @@@@@  ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   TEXT='              .      .      .     @@@   ',MF=L\n         $FS   TEXT='      .      .             .            ',MF=L\n         $FS   TEXT='              .            .           .',MF=L\n         $FS   TEXT='   .    .            .                  ',MF=L\n         $FS   TEXT='      .   .                        |    ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   TEXT='           .        . *   .   *    |    ',MF=L\n         $FS   TEXT='          **        .      .            ',MF=L\n         $FS   TEXT='                      * .   *      |    ',MF=L\n         $FS   TEXT='  .       ***                           ',MF=L\n         $FS   TEXT='                     *    *        |   .',MF=L\n         $FS   TEXT='            **       .         .        ',MF=L\n         $FS   TEXT='      **          ***  . *         |    ',MF=L\n         $FS   TEXT='               *          .             ',MF=L\n         $FS   TEXT='       **  .     ****              |    ',MF=L\n         $FS   TEXT='       .        *     .                 ',MF=L\n         $FS   TEXT='                ****              *|*   ',MF=L\n         $FS   TEXT='          .      *                      ',MF=L\n         $FS   TEXT='                **                 *    ',MF=L\n         $FS   TEXT='                  *    .     .          ',MF=L\n         $FS   TEXT='         .                              ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   TEXT='                                        ',MF=L\n         $FS   SBA=(1,2),SF=(IC),MF=L\nLSCRNB   EQU   *-SCRNB\n         EJECT\n*------> THIS ROUTINE RETURNS A NUMBER FROM 0 - 9 IN REGISTER 1.\n         SPACE 1\nRANDOMR $XENT  BASE=(R9)\n        TIME   MIC,TIMEAREA        GET TOD CLOCK\n         XR    R1,R1               CLEAR WORK REGISTER\n         IC    R1,TIMEAREA+6       LOAD LEFT NIBBLE\n         SRL   R1,4                CLEAR RIGHT MIC NIBBLE\n         CH    R1,=H'10'           IF IT'S GREATER THAN 10 ...\n         BL    *+L'*+4             NO\n         SRL   R1,1                YES, DIVIDE BY TWO\n         L     R14,4(R13)          PREVIOUS SAVE AREA\n         ST    R1,24(R14)          SET BACK R1\n        $XRET  CC=0\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE RETURNS THE SQUARE ROOT OF A NUMBER.\n*        R1 = ENTRY NUMBER / EXIT RESULT\n         SPACE 1\nSQRTRTN $XENT  BASE=(R9)\n         CH    R1,=H'1'            SQRT OF 1 = 1\n         BNH   SQRTRTX\n         XR    R2,R2               INITIALIZE LOW REG TO 0\n         LR    R3,R1                \" \"       HIGH REG TO X\nSQRTLOOP LR    R6,R3               IF DISTANCE BETWEEN\n         SR    R6,R2                   LOW AND HIGH\n         CH    R6,=H'1'                EQUAL TO 1 ...\n         BNE   *+L'*+6\n         LR    R4,R3                   PUT HIGH IN R4\n         B     SQRTEND             GOTO END\n         LR    R4,R3               GET HIGH\n         AR    R4,R2               GET LOW\n         SRL   R4,1                AVERAGE - TRUNCATED\n         LTR   R5,R4               SAVE IT\n         STH   R5,SQRTHALF         AGAIN - IN MEMORY\n         BZ    *+L'*+4\n         MH    R5,SQRTHALF         GET SQUARE\n         CR    R5,R1               COMPARE\n         BE    SQRTEND             EQUAL\n         BL    *+L'*+6             LOW\n         LR    R3,R4               RE-INIT HIGH PTR\n         B     SQRTLOOP\n         LR    R2,R4               RE-INIT LOW PTR\n         B     SQRTLOOP\nSQRTEND  LR    R1,R4               PUT ANSWER INTO R1\nSQRTRTX  L     R14,4(R13)          PREVIOUS SAVE AREA\n         ST    R1,24(R14)          SET BACK R1\n        $XRET  CC=0\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE GIVES ANY KLINGONS PRESENT IN THE CURRENT QUAD\n*              THE OPPORTUNITY TO FIRE BACK AT THE ENTERPRISE.\n*        AT EXIT : R15 = 0 OR 4.\nREACTIO $XENT  BASE=(R9)\n         L     R2,KIRKPTR          GET REALTIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT         ADD BASE ADDRESS\n         LA    R3,64               SET TO 64\n         LR    R5,R2               SAVE BASE\nRCTFND1  CLI   0(R2),X'02'         IS IT A BASE?\n         BE    RCTFND2             YES, GO LOCATE\n         LA    R2,1(R2)            BUMP PTR\n         BCT   R3,RCTFND1          ITERATE\n         B     RCTCOUNT            NO BASE, GO RETALIATE\nRCTFND2  SR    R2,R5               GET OFFSET\n         BZ    *+L'*+4\n         MH    R2,=Y(L'QUADCVT2)   * NODE LENGTH\n         A     R2,=A(QUADCVT2)     ADD BASE ADDRESS\n         PACK  ACCUM1,0(1,R2)      X AXIS\n         PACK  ACCUM2,2(1,R2)      Y AXIS\n         L     R2,KIRKPTR          GET (X,Y) OF ENTERPRISE\n         SLL   R2,6                PROCESS SAME AS ABOVE\n         A     R2,STARCHRT\n         LA    R3,64\n         LR    R5,R2\nRCTFND3  CLI   0(R2),X'04'\n         BE    RCTFND4\n         LA    R2,1(R2)\n         BCT   R3,RCTFND3\n         MVI   MSG3F1,C'9'         IMPOSSIBLE - BOMB\n         LA    R0,L'MSG3\n         STH   R0,ERRMSL\n         LA    R0,MSG3\n         ST    R0,ERRMSA\n         LA    R15,4               ERROR, SET RC=4\n         B     REACTIZ\nRCTFND4  SR    R2,R5\n         BZ    *+L'*+4\n         MH    R2,=Y(L'QUADCVT2)\n         A     R2,=A(QUADCVT2)\n         PACK  ACCUM3,0(1,R2)\n         PACK  ACCUM4,2(1,R2)\n         CP    ACCUM1,ACCUM3       ARE X COOR'S SAME\n         BE    RCTFND5\n         CP    ACCUM2,ACCUM4       ARE Y COOR'S SAME\n         BNE   RCTCOUNT\n         SP    ACCUM1,ACCUM3\n         OI    ACCUM1,X'0F'\n         CLI   ACCUM1,X'1F'        IS ABSOLUTE DIFFERENCE 1\n         BNE   RCTCOUNT            NO, GO RETALIATE\n         B     RCTDOCK             YES, GO POST DOCKED STATUS\nRCTFND5  SP    ACCUM2,ACCUM4\n         OI    ACCUM2,X'0F'\n         CLI   ACCUM2,X'1F'        IS ABSOLUTE DIFFERENCE 1\n         BNE   RCTCOUNT            NO, GO RETALIATE\nRCTDOCK  MVI   STATUS,C'4'\n         L     R2,=A(SC1ATT)\n        $FS    SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),       X\n               MF=(I,(R2))\n         ZAP   GAMENRGY,=PL3'5000' REPLENISH ENERGY\n         ZAP   GAMETORP,=PL2'10'    \" \"      TORPEDOES\n         ZAP   DEFLECT,=PL2'100'    \" \"      DEFLECTION %\n         B     REACTIX\nRCTCOUNT L     R2,KIRKPTR          GET RELATIVE QUADRANT\n         SLL   R2,6                MULTIPLY BY 64\n         A     R2,STARCHRT\n         LA    R3,64\n         XR    R4,R4\nRCTCNT1  CLI   0(R2),X'01'         COUNT KLINGONS\n         BNE   RCTCNT2\n         LA    R4,1(R4)\nRCTCNT2  LA    R2,1(R2)\n         BCT   R3,RCTCNT1\n         LTR   R4,R4\n         BZ    *+L'*+8\n         MH    R4,=H'500'          RETALIATION ENERGY = 500\n         LA    R4,0(R4)            PER KLINGON MINUS\n         CVD   R4,WORKDBLW         SCREEN EFFICIENCY\n         ZAP   WRKFULL1,=PL2'100'\n         SP    WRKFULL1,DEFLECT\n         MP    WORKDBLW,WRKFULL1\n         DP    WORKDBLW,=PL2'100'\n         SP    GAMENRGY,WORKDBLW(6)\n         BP    *+L'*+8\n         MVI   SWITCH,C'D'\n         B     REACTIX\n         MVI   STATUS,C'1'\n         L     R2,=A(SC1ATT)\n        $FS    SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),       X\n               MF=(I,(R2))\nREACTIX  XR    R15,R15             SET RC=0\nREACTIZ $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> THIS ROUTINE TPUT'S TRAILERS.\n*        AT EXIT : R15 = 0, 4 OR 8.\n         SPACE 1\nDSPLEND $XENT  BASE=(R9)\n         L     R8,=A(SCRNX,LSCRNX,RSCRTX)\n         USING SCRNX,R8\n         MVI   SCXLN05,C' '\n         MVC   SCXLN05+1(L'SCXLN05-1),SCXLN05\n         MVC   SCXLN07,SCXLN05\n         MVC   SCXLN09,SCXLN05\n        $FS    SF=NORMAL,MF=(I,SCXLN20I) SET NORMAL INPUT\n         MVC   INPUT+0(3),=CL3' '  RESET INPUT FIELD\n         CLI   SWITCH,C'W'\n         BE    DSPLWIN\n         MVC   SCXLN05(L'DEADMSG1),DEADMSG1\n         MVC   SCXLN07(L'DEADMSG2),DEADMSG2\n         MVC   SCXLN09(L'DEADMSG3),DEADMSG3\n         B     DSPLE10\nDSPLWIN  MVC   SCXLN05(L'WINMSG1),WINMSG1\n         MVC   SCXLN07(L'WINMSG2),WINMSG2\n         MVC   SCXLN09(L'WINMSG3),WINMSG3\nDSPLE10  MVC   SCXLN20R,INPUT+0\nDSPLE11  LM    R0,R2,=A(SCRNX,LSCRNX,RSCRTX)\n         STM   R0,R2,ASCRIPTR      STORE PTR'S\n        #GO    FULLSCR             TRAILER SCREEN\n         B     *+L'*(R15)          HOW COMPLETE?\n         B     DSPLE12             0 - PF-KEY\n         B     DSPLEX              4 - ERROR\n         LTR   R1,R1               8 - DID USER TYPE IN?\n         BZ    DSPLEZ              NO, CONTINUE\n         BM    DSPLEX              YES, IMMEDIATE TERMINATION\n         MVC   WORKDBLW(3),INPUT+0\n         MVI   WORKDBLW+3,C' '\n         LA    R0,3\n         CLI   WORKDBLW,C' '\n         BNE   *+L'*+14\n         MVC   WORKDBLW(3),WORKDBLW+1\n         BCT   R0,*-14\n         B     DSPLEZ              ALL BLANKS, CONTINUE\n         CLC   WORKDBLW(2),=CL2'9 '\n         BE    DSPLEX              IMMEDIATE TERMINATION\n         CLC   WORKDBLW(2),=CL2'Y '\n         BE    DSPLEZ\n         CLC   WORKDBLW(2),=CL2'N '\n         BE    DSPLEY\n         CLC   WORKDBLW(3),=CL3'NO '\n         BE    DSPLEY\n         CLC   WORKDBLW(4),=CL4'YES '\n         BE    DSPLEZ\n        $FS    SF=(INT),MF=(I,SCXLN20I) SET ERROR INPUT\n         B     DSPLE10\nDSPLE12  CLI   INPUT+0,C'9'        IMMEDIATE TERMINATION?\n         BNE   DSPLE11             NO, RESHOW\nDSPLEY   LA    R15,8               YES, SET RC=8\n         B     DSPLEX\n         DROP  R8\nDSPLEZ   XR    R15,R15             SET RC=0\nDSPLEX  $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\nSCRNX    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SF=(SKIP,INT),MF=L\n         $FS   SBA=(1,25),TEXT='**** STAR-TREK end of game ****',MF=L\n         $FS   SBA=(5,21),MF=L\nSCXLN05  $FS   TEXT=(' ',40),MF=L\n         $FS   SBA=(7,21),MF=L\nSCXLN07  $FS   TEXT=(' ',40),MF=L\n         $FS   SBA=(9,21),MF=L\nSCXLN09  $FS   TEXT=(' ',40),MF=L\n         $FS   SBA=(20,1),SF=(SKIP),MF=L\n         $FS   TEXT='Another mission ?',MF=L\nSCXLN20I $FS   SF=NORMAL,MF=L\nSCXLN20R $FS   TEXT=(' ',3),MF=L\n         $FS   SF=(SKIP),TEXT='<= N(o) / Y(es) or just ENTER',MF=L\n         $FS   SBA=(20,20),SF=(IC),MF=L\nLSCRNX   EQU   *-SCRNX\n         EJECT\n*------> READ \"SCRNX\" PROCESS ROUTINE.\n*        AT EXIT : R1=INPUT TRUE LENGTH.\n         SPACE 1\nRSCRTX  $XENT  BASE=(R9)\n         XR    R2,R2               INITIAL COUNT\nRXLOOP  @FSR   ,                   GET REPLY TEXT\n         LTR   R15,R15             NO MORE FIELDS MODIFIED?\n         BNZ   RXPRCD              NO\n         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA\n         ST    R2,24(R1)           PASS BACK COUNT IN R1\n         XR    R15,R15             EXIT\n        $XRET  CC=(R15)\nRXPRCD   CLC   SCXCSF1,0(R15)\n         BNE   RXLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         LTR   R1,R1\n         BZ    RXFC1               FIELD CLEARED (CANC FC)\n         CH    R1,=H'3'\n         BH    RXLOOP              UNEXPECTED (CHECK SCREEN IMAGE)\n         MVC   INPUT+0(3),=CL3' '  FOR UPPERCASE\n         SH    R1,=H'1'\n         EX    R1,RXOF1            COPY RESPONSE\n         B     RXBF1\nRXFC1    MVC   INPUT+0(3),=CL3' '  RESPONSE CLEARED\nRXBF1    LA    R2,3(R2)            BUMP COUNT\n         B     RXLOOP\nRXOF1    OC    INPUT+0(*-*),3(R15) <<EXECUTED>>\n         SPACE 1\nSCXCSF1  $FS   SBA=(20,20),MF=L\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*------> FULL-SCREEN SERVICE ROUTINE (STANDARD 24 X 80 SCREEN).\n*        AT ENTRY, THE ROUTINE HAS THREE INPUTS :\n*              \"ASCRIPTR\" POINTS TO THE SCREEN IMAGE,\n*              \"ASCRLGTH\" POINTS TO THE SCREEN IMAGE LENGTH,\n*              \"ASCRRTN\" POINTS TO THE INPUT SCREEN PROCESS ROUTINE.\n*        AT EXIT : R15 = 0 - PF-KEY PROCESS (FUNCTION IN INPUT)\n*                        4 - ERROR\n*                        8 - R1 = ZERO -> RESHOW\n*                                 MINUS -> CLEAR AND END\n*                                 PLUS -> ANALYZE INPUT\n         SPACE 1\nFULLSCR $XENT  BASE=(R9)\n*        --> DO FULL-SCREEN TPUT (OUTPUT) AND TGET (INPUT).\n         NI    OPTFS,FSFULL+FSSNAP\n         L     R2,ASCRIPTR\n        @FS    OPTFS,(R2),ASCRLGTH,MF=(E,FSPARM)\n         LTR   R15,R15\n         BZ    FSCAID\n         CH    R15,=H'8'           END REQUESTED?\n         BE    *+L'*+8             YES\n         LA    R15,4               NO, ERROR, SET RC=4\n         B     FSCX                EXIT\n         L     R1,=F'-1'           YES (PA-KEY)\n         B     FSCRC\nFSCAID   LTR   R1,R1               AID?\n         BZ    FSNONE              NO, NONE\n         CLI   0(R1),X'7D'         YES, ENTER KEY?\n         BE    FSCENT              YES\n         CLI   0(R1),X'F1'         NO, PF-KEY 1-9?\n         BL    FSNONE              NO\n         CLI   0(R1),X'F9'\n         BNH   FSCPFK              YES\nFSNONE   XR    R1,R1               NO, RE-DISPLAY\n         B     FSCRC\nFSCPFK   MVC   INPUT+0(1),0(R1)    MOVE THE REQUESTED PF-KEY\n         B     FSCX                EXIT\nFSCENT  #GO    ASCRRTN,AR=D        GO TO REPLY ROUTINE\n*        -->   AT EXIT, R1=INPUT TRUE LENGTH.\nFSCRC    LA    R15,8               NOT FOUND, SET RC=8\n         L     R14,4(R13)          PREVIOUS SAVE AREA\n         ST    R1,24(R14)          SET BACK R1\nFSCX    $XRET  CC=(R15)\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*          W O R K I N G     S T O R A G E     S E C T I O N          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWORKDBLW DC    D'0'\nTIMEAREA DC    D'0'                RETURN AREA FOR TIME MACRO\nTERMAT  @FST   ,\nATIOT    DC    A(*-*)\nATSO     DC    A(*-*)\nAPSCB    DC    A(*-*)\nACPPL    DC    A(*-*)\nASCRIPTR DC    A(*-*)              PTR TO ACTIVE SCREEN IMAGE\nASCRLGTH DC    A(*-*)              PTR TO LENGTH OF ACTIVE SCREEN IMAGE\nASCRRTN  DC    A(*-*)              PTR TO PROCESS READ SCREEN ROUTINE\nSTARCHRT DC    A(*-*)              ADDRESS OF MATRIX AREA\nSTARCHRL DC    A(16*64)            DOT MATRIX LENGTH\nSTARCHRX DC    A(*-*)              ADDRESS OF END OF MATRIX AREA + 1\nERRMSA   DC    F'0'\nFSPARM  @FS    ,,,MF=L\nFSMSBA   EQU   4*L'SCHCSF1         MAX. = 4 * SCREEN BUFFER ADDRESSES\nFSBFSZ   DC    A((((FSMSBA+L'INPUT)+7)/8)*8) MAX. => L.SBA'S + TEXT\nRQSZ     DC    0H'0',AL1(24,80)    REQUESTED SCREEN SIZE\nERRMSL   DC    H'0'\nSQRTHALF DC    H'0'                \"SQRTRTN\" WORK USE\nINPUT    DC    CL16' '             INPUT FROM TERMINAL VIA TGET\nSCRTOI   DC    CL7'_______'        TERMINAL OUTPUT/INPUT\n         PRINT GEN\nOPTFS   @FSO   ,\n         PRINT &EULST\nSWITCH   DC    CL1' '              W=WIN, D=DEAD\nMSG1     DC    C' -> \"FSRTN \" routine failed / RC =    '\nMSG1F1   EQU   MSG1+10,1\nMSG1F2   EQU   MSG1+L'MSG1-4,4\nMSG2     DC    C' -> \"FSRTN\" routine failed - OPT =    , RC =    '\nMSG2F1   EQU   MSG2+35,2\nMSG2F2   EQU   MSG2+L'MSG2-4,4\nMSG3     DC    C' -> Error . -> Impossible - Bomb'\nMSG3F1   EQU   MSG3+10,1\n         SPACE 1\nSCMSG1   DC    CL44' '\nSCMSG2   DC    CL44' '\nSCMSG3   DC    CL44' '\nDEADMSG1 DC    CL33'The ENTERPRISE has been defeated'\nDEADMSG2 DC    CL33'The FEDERATION will be conquered'\nDEADMSG3 DC    CL33'May be in your next life ...'\nWINMSG1  DC    CL33'The KLINGONS have been defeated '\nWINMSG2  DC    CL33'The FEDERATION is victorious    '\nWINMSG3  DC    CL35'May be the KLINGONS will try again'\nINITKLNG DC    PL2'+0'             INIT AREA FOR KLINGONS\nINITBASE DC    PL1'+0'             INIT AREA FOR STAR BASES\nINITSTRS DC    PL2'+0'             INIT AREA FOR STARS\nACCUM1   DC    PL1'+0'\nACCUM2   DC    PL1'+0'\nACCUM3   DC    PL1'+0'\nACCUM4   DC    PL1'+0'\nTRTABLE  DC    XL256'0'            WORK AREA FOR TRT'S\nWRKHALF1 DC    H'0'                WORK AREA\nWRKHALF2 DC    H'0'                 \" \"\nWRKFULL1 DC    F'0'                 \" \"\nQUADFIND DC    CL3' '              WORK AREA FOR QUAD CONVERSIONS\nSWEXEC   DC    XL1'0'\nFSEXC    EQU   X'80'               COLORS\nFSEXH    EQU   X'40'               HIGHLIGHTING\nSWBLOW   EQU   X'08'               BLOW SCREEN TEST\nSWHELP   EQU   X'02'               SKIP TITLE\nSWCOMP   EQU   X'01'               GO COMPUTER\nKIRKPTR  DC    F'0'\n         SPACE 1\nGAMESTAT DS    0CL7\nGAMEKLNG DC    PL2'+0'             NUMBER OF KLINGONS FOR THIS GAME\nGAMESTRS DC    PL2'+0'              \" \"      STARS\nGAMEBASE DC    PL1'+0'              \" \"      BASES\nGAMEYRS  DC    PL2'+0'              \" \"      YEARS\n         SPACE 1\nGAMENRGY DC    PL4'5000'           AMOUNT OF ENERGY TO START\nGAMEDATE DC    CL6'5537.1'         STAR DATE OF THE GAME\nGAMETORP DC    PL2'10'             PHOTON TORPEDOES\nSTATUS   DC    CL1'1'              1=GREEN, 2=YELLOW, 3=RED, 4=DOCKED\nDEFLECT  DC    PL5'100'            DEFLECTION ENERGY PERCENTAGE\n         SPACE 1\n*------- THIS IS THE GAME TABLE - IT CONTAINS 10 GAMES.\n         SPACE 1\nGAMETBL  DS    0CL7\n         DC    PL2'08',PL2'50',PL1'2',PL2'20'\n         DC    PL2'09',PL2'51',PL1'2',PL2'20'\n         DC    PL2'10',PL2'52',PL1'2',PL2'21'\n         DC    PL2'11',PL2'53',PL1'2',PL2'21'\n         DC    PL2'12',PL2'54',PL1'2',PL2'22'\n         DC    PL2'13',PL2'55',PL1'3',PL2'22'\n         DC    PL2'14',PL2'56',PL1'3',PL2'23'\n         DC    PL2'15',PL2'57',PL1'3',PL2'23'\n         DC    PL2'16',PL2'58',PL1'4',PL2'24'\n         DC    PL2'17',PL2'59',PL1'4',PL2'24'\n         SPACE 1\n*------- CONVERSION TABLES FROM INTERNAL QUAD NUMBERS TO WORLD\n*              COORDINATES.\n         SPACE 1\nQUADCVT1 DC    CL3'1,4',CL3'2,4',CL3'3,4',CL3'4,4'\n         DC    CL3'1,3',CL3'2,3',CL3'3,3',CL3'4,3'\n         DC    CL3'1,2',CL3'2,2',CL3'3,2',CL3'4,2'\n         DC    CL3'1,1',CL3'2,1',CL3'3,1',CL3'4,1'\nQUADLVT1 EQU   (*-QUADCVT1)/L'QUADCVT1\n         SPACE 1\nQUADCVT2 DC    CL3'1,8',CL3'2,8',CL3'3,8',CL3'4,8'\n         DC    CL3'5,8',CL3'6,8',CL3'7,8',CL3'8,8'\n         DC    CL3'1,7',CL3'2,7',CL3'3,7',CL3'4,7'\n         DC    CL3'5,7',CL3'6,7',CL3'7,7',CL3'8,7'\n         DC    CL3'1,6',CL3'2,6',CL3'3,6',CL3'4,6'\n         DC    CL3'5,6',CL3'6,6',CL3'7,6',CL3'8,6'\n         DC    CL3'1,5',CL3'2,5',CL3'3,5',CL3'4,5'\n         DC    CL3'5,5',CL3'6,5',CL3'7,5',CL3'8,5'\n         DC    CL3'1,4',CL3'2,4',CL3'3,4',CL3'4,4'\n         DC    CL3'5,4',CL3'6,4',CL3'7,4',CL3'8,4'\n         DC    CL3'1,3',CL3'2,3',CL3'3,3',CL3'4,3'\n         DC    CL3'5,3',CL3'6,3',CL3'7,3',CL3'8,3'\n         DC    CL3'1,2',CL3'2,2',CL3'3,2',CL3'4,2'\n         DC    CL3'5,2',CL3'6,2',CL3'7,2',CL3'8,2'\n         DC    CL3'1,1',CL3'2,1',CL3'3,1',CL3'4,1'\n         DC    CL3'5,1',CL3'6,1',CL3'7,1',CL3'8,1'\nQUADLVT2 EQU   (*-QUADCVT2)/L'QUADCVT2\n         SPACE 1\nQUADCVT3 $FS   SBA=(2,3),MF=L\n         $FS   SBA=(2,7),MF=L\n         $FS   SBA=(2,9),MF=L\n         $FS   SBA=(2,13),MF=L\n         $FS   SBA=(2,15),MF=L\n         $FS   SBA=(2,19),MF=L\n         $FS   SBA=(2,21),MF=L\n         $FS   SBA=(2,25),MF=L\n         $FS   SBA=(4,3),MF=L\n         $FS   SBA=(4,7),MF=L\n         $FS   SBA=(4,9),MF=L\n         $FS   SBA=(4,13),MF=L\n         $FS   SBA=(4,15),MF=L\n         $FS   SBA=(4,19),MF=L\n         $FS   SBA=(4,21),MF=L\n         $FS   SBA=(4,25),MF=L\n         $FS   SBA=(6,3),MF=L\n         $FS   SBA=(6,7),MF=L\n         $FS   SBA=(6,9),MF=L\n         $FS   SBA=(6,13),MF=L\n         $FS   SBA=(6,15),MF=L\n         $FS   SBA=(6,19),MF=L\n         $FS   SBA=(6,21),MF=L\n         $FS   SBA=(6,25),MF=L\n         $FS   SBA=(8,3),MF=L\n         $FS   SBA=(8,7),MF=L\n         $FS   SBA=(8,9),MF=L\n         $FS   SBA=(8,13),MF=L\n         $FS   SBA=(8,15),MF=L\n         $FS   SBA=(8,19),MF=L\n         $FS   SBA=(8,21),MF=L\n         $FS   SBA=(8,25),MF=L\n         SPACE 1\n*- - - - DSECT'S - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         PRINT NOGEN\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STREK$": {"ttr": 17415, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "//STREK    JOB (........),'INSTALL  -STREK-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=8\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN                                              *\n//*      THE ASSEMBLY SYSPARM(...) OPTIONS ALLOWS YOU TO SELECT :     *\n//*            1. NONE OR OMITTED = NO LIST OF MACROS DEVELOPMENT     *\n//*               FULL = LIST ALL MACROS DEVELOPMENT                  *\n//*            2. US OR OMITTED = USE USA DISPLAY CHARACTERS          *\n//*               EU = USE EUROPEAN DISPLAY CHARACTERS                *\n//*      SPECIFY OPTIONS AT ASSEMBLY STEP 'ASS' :                     *\n//*      I.E - ... EXEC PAJ3AS3,MBR=STREK,OPT=',SYSPARM(FULL)'        *\n//*            ... EXEC PAJ3AS3,MBR=STREK,OPT=',SYSPARM(,EU)'         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=STREK\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN)\n  ENTRY   STREK\n  NAME    STREK(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "T3270FS": {"ttr": 17417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x1f\\x00\\x934\\x1f\\x16!\\x0e\\x10\\x0e\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-07T00:00:00", "modifydate": "1993-12-07T16:21:00", "lines": 3600, "newlines": 3600, "modlines": 0, "user": "SYSPAJA"}, "text": "FSTT     TITLE 'JUST A SMALL IBM-3270 FULL-SCREEN TERMINAL TEST ...'\n         SPACE 1\n        PRINT  OFF\n         MACRO\n&LBL    #GTB   &C=,&T=,&L=\n         LCLA  &N\n         AIF   ('&C' EQ 'END').END\n         AIF   (K'&C NE 8).ERRC\n         AIF   ('&T' EQ 'B').A\n         AIF   ('&T' NE 'C').ERRT\n.A       AIF   (K'&L GT 67).ERRL\n&N       SETA  K'&L-3\n&LBL     DC    XL4'&C',CL1'&T',AL1(&N)\n         DC    C&L\n         MEXIT\n.END     ANOP\n&LBL     DC    XL4'0'\n         MEXIT\n.ERRC    MNOTE 8,'--- C=... INVALID LENGTH (MUST BE 8)'\n         MEXIT\n.ERRT    MNOTE 8,'--- T=... INVALID (MUST BE \"B\" OR \"C\")'\n         MEXIT\n.ERRL    MNOTE 8,'--- L=... INVALID (GREATER THAN 65 CHARACTERS)'\n         MEND\n        PRINT  ON\n         SPACE 1\nT3270FS  START 0\n         SPACE 1\n        $DEFREG\nKBYTES   EQU   1024\n         SPACE 1\n        $XENT  BASE=R11\n         SPACE 1\n        $FS    DOC=(EJECT,ALL)\n         MVI   OPT,FSFULL\n        EXTRACT    ATIOT,'S',FIELDS=(TIOT)\n         L     R3,ATIOT            SEARCH DD IF SNAP AVAILABLE\n         USING TIODSECT,R3\nSCSNAP   CLC   TIOELNGH(4),=F'0'\n         BE    SINT\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP'\n         BNE   *+L'*+4\n         OI    OPT,FSSNAP\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSTEST'\n         BNE   *+L'*+4\n         OI    SWITCH,INTEST\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R3,R1\n         B     SCSNAP\n         DROP  R3\nSINT    @FSI   BUFSZ,TERMAT,RQSZ\n         LTR   R10,R15\n         BNZ   LEAVE\n         OI    OPT,FSSKIP\n        @FS    OPT,INITR,INITRL\n         LTR   R10,R15\n         BNZ   TTERR\n         L     R15,=A(VERIFY)\n         BASR  R14,R15\n         B     TTERR\nSTTT     LA    R7,TTMSGLEN\n         LA    R8,TTMSG8\nSTTN     MVC   0(MSGAL,R8),MSGA\n         LA    R7,MSGAL(R7)\n         ST    R7,TTMSGL\n         MVI   TTMSG7,C' '\n         MVC   TTMSG7+1(L'TTMSG7-1),TTMSG7\n         LA    R15,TTMSG7\n         LA    R1,RQROW\n         BAS   R14,STTD\n         MVI   1(R15),C'x'\n         LA    R15,3(R15)\n         LA    R1,RQCOL\n         BAS   R14,STTD\n         CLC   RQSZ,FSPRMSZE\n         BE    STPS\n        $FS    SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,BLUE),MF=(E,(R15))\n        $FS    TEXT='Primary size :',MF=E\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=E\n         LA    R1,FSPRMROW\n         BAS   R14,STTD\n         MVI   1(R15),C'x'\n         LA    R15,3(R15)\n         LA    R1,FSPRMCOL\n         BAS   R14,STTD\n         B     STTS\nSTTD     XR    R0,R0               LOCAL EDIT SUBROUTINE\n         IC    R0,0(R1)            R14 = LINK REGISTER\n         CVD   R0,WORK\n         MVC   0(4,R15),=XL4'40202120'\n         ED    0(4,R15),WORK+L'WORK-2\n         CLI   0(R15),C' '\n         BNE   *+L'*+10\n         MVC   0(4,R15),1(R15)\n         B     *-14\n         LA    R15,1(R15)\n         CLI   0(R15),C' '\n         BNE   *-8\n         BR    R14\nSTPS     CLC   FSPRMSZE,FSALTSZE\n         BE    STTS\n        $FS    SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,BLUE),MF=(E,(R15))\n        $FS    TEXT='Alternate size :',MF=E\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=E\n         LA    R1,FSALTROW\n         BAS   R14,STTD\n         MVI   1(R15),C'x'\n         LA    R15,3(R15)\n         LA    R1,FSALTCOL\n         BAS   R14,STTD\nSTTS     NI    OPT,255-FSSKIP\n        @FS    OPT,TTMSG,TTMSGL\n         LTR   R10,R15\n         BNZ   TTERR\n         CLI   0(R1),X'F3'         PF-3 KEY\n         BE    TTERR\n         CLI   0(R1),X'C3'         PF-15 KEY (ALT. 3)\n         BE    TTERR\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),            X\n               MF=(I,TTMSG1)\n         MVI   TTMSG2,C' '\n         MVC   TTMSG2+1(L'TTMSG2-1),TTMSG2\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),            X\n               MF=(I,TTMSG3)\n         MVI   TTMSG4,C' '\n         MVC   TTMSG4+1(L'TTMSG4-1),TTMSG4\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),          X\n               MF=(I,TTMSG5)\n         MVI   TTMSG6,C' '\n         MVC   TTMSG6+1(L'TTMSG6-1),TTMSG6\n         CLI   0(R1),X'7D'         ENTER KEY\n         BE    STTR\n         CLI   0(R1),X'F1'         PF-1 KEY\n         BE    HELP\n         CLI   0(R1),X'C1'         PF-13 KEY (ALT. 1)\n         BE    HELP\n         LA    R2,=CL35'Invalid key depressed (no function)'\n         LA    R3,35-1\n         B     STTEM\nSTTE1    LA    R2,=CL33'What do you want ? (none entered)'\n         LA    R3,33-1\n         B     STTEM\nSTTE2    LA    R2,=CL35'What do you mean ? (input too long)'\n         LA    R3,35-1\n         B     STTEM\nSTTE3    LA    R2,=CL30'Test number missing (enter it)'\n         LA    R3,30-1\n         B     STTEM\nSTTE4    LA    R2,=CL31'Test number too long or invalid'\n         LA    R3,31-1\n         B     STTER\nSTTE5    LA    R2,=CL19'Unknown test number'\n         LA    R3,19-1\n         B     STTER\nSTTE6    LA    R2,=CL33'Repeat number too long or invalid'\n         LA    R3,33-1\n         B     STTER\nSTTE7    LA    R2,=CL32'Repeat number too big (max = 99)'\n         LA    R3,32-1\n         B     STTER\nSTTE8    LA    R2,=CL23'Unknown numeric keyword'\n         LA    R3,23-1\n         B     STTER\nSTTE9    LA    R2,=CL16'keyword too long'\n         LA    R3,16-1\nSTTER   $FS    SFE=(ATTR,(PROT),HILITE,BLINK,COLOUR,RED),              X\n               MF=(I,TTMSG1)\n         LA    R8,TTMSG8\n         MVC   0(MSGBL,R8),MSGB\n         LA    R7,TTMSGLEN+MSGBL\n         LA    R8,MSGBL(R8)\n         L     R4,TXTP\n         L     R1,TXTL\n         EX    R1,STTEMV\n         LA    R7,1(R1,R7)\n         LA    R8,1(R1,R8)\n         SLR   R5,R4\n         LA    R5,TTMSG2(R5)\n         MVI   0(R5),C'\u00ac'\n         BCT   R6,*+L'*+4\n         B     STTEM+L'STTEM\n         BCT   R6,*+L'*+6\n         MVC   1(*-*,R5),0(R5)\n         EX    R6,*-6\n         B     STTEM+L'STTEM\nSTTEMV   MVC   0(*-*,R8),0(R4)\nSTTEM    XR    R7,R7\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,BLINK,COLOUR,GREEN),        X\n               MF=(I,TTMSG5)\n         EX    R3,STTMV\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,REVERSE,COLOUR,RED),        X\n               MF=(I,TTMSG3)\n         MVC   TTMSG4(L'TTMSG4),=CL7'Error :'\n         LTR   R7,R7\n         BZ    STTT\n         B     STTN\nSTTMV    MVC   TTMSG6(*-*),0(R2)\nSTTR    @FSR   ,\n         LTR   R15,R15\n         BZ    STTE1\n         LTR   R1,R1\n         BNP   STTE1\n         CH    R1,=Y(L'TTMSG2)\n         BH    STTE2\n         LA    R4,3(R15)           SET BXLE VALUES (R4,R2-R3)\n         LA    R3,2(R15,R1)\n         LA    R2,1\n         BCT   R1,*+L'*+6\n         OC    0(*-*,R4),=CL70' '\n         EX    R1,*-6\n         ST    R1,TXTL\n         ST    R4,TXTP\n         BAS   R14,SCANS\n         B     STTE3\n         BAS   R14,SCANN\n         B     STTE4\n         CH    R1,=Y(TSTMX)\n         BH    STTE5\n         STH   R1,TNO\n         LA    R1,1\n         STH   R1,TNR\n         MVI   TNS,255\n         MVC   TNS+1(8),=CL70' '\n         BAS   R14,SCANS\n         B     STTA\n         CLI   0(R5),C'0'\n         BL    STTB\n         BAS   R14,SCANN\n         B     STTE6\n         CH    R1,=H'99'\n         BH    STTE7\n         STH   R1,TNR\n         BAS   R14,SCANS\n         B     STTA\n         CLI   0(R5),C'0'\n         BNL   STTE8\nSTTB     LA    R1,TNS\n         BAS   R14,SCANT\n         B     STTE9\nSTTA     LH    R14,TNO\n         BCTR  R14,0\n         SLL   R14,2\n         L     R15,T00(R14)\n         BASR  R14,R15             GO TO REQUESTED TEST\n         B     STTT                +0 = NORMAL RETURN\n         B     TTRET               +4 = ERROR RETURN\n         LR    R2,R0               +8 = MESSAGE RETURN\n         LR    R3,R1\n         B     STTEM\nHELP     NI    OPT,255-FSSKIP\n        @FS    OPT,HLMSG,HLMSGL\n         LTR   R10,R15\n         BNZ   TTERR\n         CLI   0(R1),X'7D'         ENTER KEY\n         BE    HELP\n         B     STTS\n         SPACE 1\nSCANS    CLR   R4,R3               SET R5 = START OF OPERAND\n         BHR   R14                     R6 = LENGTH OF OPERAND\n         CLI   0(R4),C' '\n         BNE   *+L'*+6\n         BXLE  R4,R2,*-8\n         BR    R14\n         LR    R5,R4\n         BXLE  R4,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R6,R4\n         SLR   R6,R5\n         B     4(R14)\n         SPACE 1\nSCANN    CH    R6,=H'8'            SET R1 = NUMERIC VALUE OF OPERAND\n         BHR   R14\n         LR    R1,R5\n         LR    R0,R6\n         CLI   0(R1),C'0'\n         BLR   R14\n         CLI   0(R1),C'9'\n         BHR   R14\n         LA    R1,1(R1)\n         BCT   R0,*-16\n         LR    R1,R6\n         BCT   R1,*+L'*+6\n         PACK  WORK,0(*-*,R5)\n         EX    R1,*-6\n         CVB   R1,WORK\n         LTR   R1,R1\n         BNPR  R14\n         B     4(R14)\n         SPACE 1\nSCANT    CH    R6,=H'8'            R1 = ADDRESS OF STORE KEYWORD\n         BHR   R14                      LENGTH AND VALUE\n         LR    R15,R6\n         BCT   R15,*+L'*+6\n         MVC   1(*-*,R1),0(R5)\n         EX    R15,*-6\n         STC   R15,0(R1)\n         B     4(R14)\n         SPACE 1\nTTRET    LR    R10,R15\nTTERR    MVI   OPT,FSEXIT\n        @FS    OPT\n         LTR   R10,R10\n         BNZ   *+L'*+6\n         LTR   R10,R15\n         BZ    LEAVE\n         CH    R10,=H'99'\n         BNE   FSERR\n        TPUT   TERMSG,L'TERMSG\n         B     QUIT\nFSERR    CVD   R10,WORK\n         MVC   ERRMRC,=XL4'40202120'\n         ED    ERRMRC,WORK+L'WORK-(L'ERRMRC/2)\n        TPUT   ERRMSG,L'ERRMSG\nQUIT     LR    R10,R15\nLEAVE   $XRET  CC=(R10)\n         EJECT\nT00      DC    A(T01,T02,T03,T04)\nTSTMX    EQU   (*-T00)/L'T00\n         SPACE 1\nSSID     DS    0F\nT03SVID  DC    F'0'\nT04SVID  DC    F'0'\nNSID     EQU   (*-SSID)/L'SSID\n         SPACE 1\nWORK     DC    D'0'\nTERMAT  @FST   ,\nATIOT    DC    A(*-*)\nBUFFL    DC    A(*-*)\nBUFFA    DC    A(*-*)\nBUFSZ    DC    A(4*KBYTES)\nPSQA     DC    A(*-*)\nUAQA     DC    A(*-*)\nTXTL     DC    A(*-*)\nTXTP     DC    A(*-*)\nHLMSGL   DC    A(HLMSGLEN)\nTNO      DC    H'0'\nTNR      DC    H'0'\nTNS      DC    AL1(255),CL8' '\nRQSZ     DC    0H'0'\nRQROW    DC    AL1(24)\nRQCOL    DC    AL1(80)\nOPT     @FSO   ,\nSWITCH   DC    XL1'0'\nINTEST   EQU   X'80'\nFSXGE    EQU   X'10'\nFSEXC    EQU   X'08'\nFSEXH    EQU   X'04'\nFSEXS    EQU   X'02'\nFSEXD    EQU   X'01'\n         SPACE 1\nERRMSG   DC    C' --- \"FSRTN\" - RC = ... -> Exit ---'\nERRMRC   EQU   ERRMSG+19,4\nTERMSG   DC    C' --- Wait time interval error -> Exit ---'\n         SPACE 1\n        PRINT  NOGEN\nINITRL   DC    A(LINITR)\nINITR    $FS   CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L\n         $FS   SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(IC),MF=L\nLINITR   EQU   *-INITR\n         SPACE 1\nTTMSGL   DC    A(*-*)\nMSGA     $FS   SBA=(1,1),SF=(PT,IC),MF=L\nMSGAL    EQU   *-MSGA\nMSGB     $FS   SBA=(12,10),MF=L\nMSGBL    EQU   *-MSGB\n         SPACE 1\nTTMSG    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   SBA=(3,12),RA=(3,70,GE,93),MF=L\n         $FS   SBA=(3,11),SET=(GE,95),MF=L\n         $FS   SBA=(4,11),SET=(GE,95),MF=L\n         $FS   SBA=(5,11),SET=(GE,95),MF=L\n         $FS   SBA=(6,11),SET=(GE,95),MF=L\n         $FS   SBA=(7,11),SET=(GE,95),MF=L\n         $FS   SBA=(8,11),SET=(GE,95),MF=L\n         $FS   SBA=(9,11),SET=(GE,95),MF=L\n         $FS   SBA=(9,12),RA=(9,70,GE,94),MF=L\n         $FS   SBA=(3,70),SET=(GE,95),MF=L\n         $FS   SBA=(4,70),SET=(GE,95),MF=L\n         $FS   SBA=(5,70),SET=(GE,95),MF=L\n         $FS   SBA=(6,70),SET=(GE,95),MF=L\n         $FS   SBA=(7,70),SET=(GE,95),MF=L\n         $FS   SBA=(8,70),SET=(GE,95),MF=L\n         $FS   SBA=(9,70),SET=(GE,95),MF=L\n         $FS   SBA=(6,54),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   SBA=(6,27),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,USCORE,COLOUR,TURQ),MF=L\n         $FS   SBA=(6,28),TEXT='3270 Structured Field test',MF=L\n         $FS   SBA=(12,9),SF=NORMAL,MF=L\n         $FS   SBA=(12,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\n         $FS   TEXT='Enter :',MF=L\n         $FS   SBA=(12,80),SF=(PROT),MF=L\n         $FS   SBA=(13,9),MF=L\nTTMSG1   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),MF=L\nTTMSG2   $FS   TEXT=(' ',70),MF=L\n         $FS   SBA=(13,80),SF=(PROT),MF=L\n         $FS   SBA=(16,1),MF=L\nTTMSG3   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),MF=L\nTTMSG4   $FS   TEXT=(' ',7),MF=L\nTTMSG5   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\nTTMSG6   $FS   TEXT=(' ',70),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(20,15),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\nTTMSG7   $FS   TEXT=(' ',60),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(20,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,PINK),MF=L\n         $FS   TEXT='Screen size :',MF=L\nTTMSGLEN EQU   *-TTMSG\nTTMSG8   DC    (MSGBL+L'TTMSG2+MSGAL)X'0'\n        PRINT  GEN\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\n        PRINT  NOGEN\nHLMSG    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   SBA=(3,12),RA=(3,70,GE,93),MF=L\n         $FS   SBA=(3,11),SET=(GE,95),MF=L\n         $FS   SBA=(4,11),SET=(GE,95),MF=L\n         $FS   SBA=(5,11),SET=(GE,95),MF=L\n         $FS   SBA=(6,11),SET=(GE,95),MF=L\n         $FS   SBA=(7,11),SET=(GE,95),MF=L\n         $FS   SBA=(8,11),SET=(GE,95),MF=L\n         $FS   SBA=(9,11),SET=(GE,95),MF=L\n         $FS   SBA=(9,12),RA=(9,70,GE,94),MF=L\n         $FS   SBA=(3,70),SET=(GE,95),MF=L\n         $FS   SBA=(4,70),SET=(GE,95),MF=L\n         $FS   SBA=(5,70),SET=(GE,95),MF=L\n         $FS   SBA=(6,70),SET=(GE,95),MF=L\n         $FS   SBA=(7,70),SET=(GE,95),MF=L\n         $FS   SBA=(8,70),SET=(GE,95),MF=L\n         $FS   SBA=(9,70),SET=(GE,95),MF=L\n         $FS   SBA=(6,54),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   SBA=(6,27),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,USCORE,COLOUR,PINK),MF=L\n         $FS   SBA=(6,28),TEXT='3270 Structured Field test',MF=L\n         $FS   SBA=(11,20),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   TEXT='Test  Repeat  Option',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(11,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,RED),MF=L\n         $FS   TEXT='Command skeleton :',MF=L\n         $FS   SBA=(13,11),SF=NORMAL,MF=L\n         $FS   SBA=(13,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,BLUE),MF=L\n         $FS   TEXT='Test n\u00a2 :',MF=L\n         $FS   SBA=(13,14),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         $FS   TEXT='1 =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Colours (i.e : 1 4 R)',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='- White/Yellow/Turq/Green/Pink/',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(14,42),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='Red/Blue',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(15,14),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         $FS   TEXT='2 =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Display Programmed Symbols (i.e : 2 2)',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(16,14),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         $FS   TEXT='3 =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Load PS single-plane (i.e : 3 2 D)',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='- Load/Display/Cancel',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(17,14),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),MF=L\n         $FS   TEXT='4 =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Load PS triple-plane (i.e : 4 1 L)',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='- Load/Display/Cancel',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(20,12),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   TEXT='CGCSGID =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Coded Graphic Character Set Global ',MF=L\n         $FS   TEXT='IDentifier',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(20,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,USCORE,COLOUR,PINK),MF=L\n         $FS   SBA=(20,2),TEXT='Glossary :',MF=L\n         $FS   SBA=(21,15),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   TEXT='CECP =',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='Country Extended Code Page',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nHLMSGLEN EQU   *-HLMSG\n        PRINT  GEN\n         EJECT\n*------- SELECT LCID ROUTINE.\n         SPACE 1\n         CNOP  0,4\n         USING *,R15               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nSLLCID   STM   R1,R5,SLLSV         SET R0 = LCID\n         L     R2,PSQA\n         XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         LA    R5,0(R1,R2)\n         XR    R1,R1\n         IC    R1,12(R2)\n         LA    R2,13(R2)\n         LA    R0,X'EF'\n         LA    R3,X'4A'\nSLLSNT   LR    R4,R2\nSLLSCN   CLI   2(R4),X'FF'\n         BE    SLLNXT\n         EX    R3,SLLCHK\n         BNE   SLLNXT\n         CLR   R3,R0\n         BNL   *+L'*+8\n         LA    R3,1(R3)\n         B     SLLSNT\n         XR    R0,R0\n         B     SLLXRT\nSLLNXT   ALR   R4,R1\n         CLR   R4,R5\n         BL    SLLSCN\n         LR    R0,R3\nSLLXRT   LM    R1,R5,SLLSV\n         BR    R14\nSLLCHK   CLI   2(R4),*-*\n         SPACE 1\nSLLSV    DC    5F'0'\n         SPACE 1\n         DROP  R15                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\n*------- VERIFY TERMINAL.\n         SPACE 1\n         CNOP  0,4\n         USING *,R12               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nVERIFY   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R15,R13\n         LA    R13,VERIFYSV\n         B     VERIFYCS\nVERIFYSV DC    18F'0'\nVERIFYCS ST    R13,8(R15)\n         ST    R15,4(R13)\n        @FSQ   ,\n         LTR   R10,R15\n         BNZ   VERRXR\n         STM   R0,R1,BUFFL\n         TM    SWITCH,INTEST\n         BZ    VERANL\n         LM    R2,R3,BUFFL         QUERY REPLY DATA\n         MVI   VERLNE,C'1'\n         ALR   R2,R3\n         CLR   R3,R2\n         BL    *+L'*+14\n         MVC   VERLNE+2(27),=CL27'NO QUERY REPLY AID RECEIVED'\n         BAS   R8,VERDQL\n         B     VERDQC\n         LA    R4,1\n         UNPK  VERLNE+2(3),0(2,R3)\n         TR    VERLNE+2(2),TRHEX-X'F0'\n         MVC   VERLNE+4(18),=CL18' = QUERY REPLY AID'\n         CLI   0(R3),88\n         BNE   *+L'*+6\n         MVC   VERLNE+23(16),=CL16'(ERROR / NOT 88)'\n         BAS   R8,VERDQL\nVERDQ1   ALR   R3,R4\n         CLR   R3,R2\n         BNL   VERDQC\n         MVI   VERLNE,C'0'\n         UNPK  VERLNE+2(5),0(3,R3)\n         TR    VERLNE+2(4),TRHEX-X'F0'\n         MVC   VERLNE+6(29),=CL29' = LENGTH OF NEXT INFORMATION'\n         LA    R0,1(R3)\n         CLR   R0,R2\n         BL    *+L'*+12\n         MVC   VERLNE+4(2),=CL2' '\n         MVC   VERLNE+36(7),=CL7'(ERROR)'\n         BAS   R8,VERDQL\n         XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R0,0(R3,R4)\n         CLR   R0,R2\n         BNH   *+L'*+4\n         LR    R4,R2\n         SLR   R4,R3\n         LR    R5,R4\n         SH    R5,=H'2'\n         BNP   VERDQ1\n         UNPK  VERLNE+2(5),2(3,R3)\n         TR    VERLNE+2(4),TRHEX-X'F0'\n         MVC   VERLNE+6(18),=CL18' = QUERY LIST CODE'\n         CH    R5,=H'2'\n         BNL   *+L'*+12\n         MVC   VERLNE+4(2),=CL2' '\n         MVC   VERLNE+25(7),=CL7'(ERROR)'\n         BAS   R8,VERDQL\n         SH    R5,=H'2'\n         BNP   VERDQ1\n         MVC   VERLNE+4(6),=CL6'DATA ='\n         LA    R6,4(R3)\nVERDQ2   LA    R0,32\n         CLR   R0,R5\n         BNH   *+L'*+2\n         LR    R0,R5\n         SR    R5,R0\n         LR    R8,R0\n         LA    R7,VERLNE+11\n         XR    R1,R1\nVERDQ3   IC    R1,0(R6)\n         STC   R1,1(R7)\n         SRL   R1,4\n         STC   R1,0(R7)\n         NC    0(2,R7),=XL2'0F0F'\n         LA    R7,2(R7)\n         LA    R6,1(R6)\n         BCT   R0,VERDQ3\n         SLL   R8,1\n         BCT   R8,*+L'*+6\n         TR    VERLNE+11(*-*),TRHEX\n         EX    R8,*-6\n         BAS   R8,VERDQL\n         LTR   R5,R5\n         BP    VERDQ2\n         B     VERDQ1\nVERDQL  $PRINT VERLNE,,DDTEST\n         LTR   R10,R15\n         BNZ   VERER1\n         MVI   VERLNE,C' '\n         MVC   VERLNE+1(L'VERLNE-1),VERLNE\n         BR    R8\nVERDQC   MVI   VERLNE,C'0'\n         MVC   VERLNE+2(19),=CL19'--- END OF DATA ---'\n         BAS   R8,VERDQL\n        $PCLOSE\n         LTR   R10,R15\n         BNZ   VERER2\nVERANL   LA    R1,1\n         L     R2,BUFFA\n         LR    R3,R2\n         AL    R3,BUFFL\n         SLR   R3,R1\nVERSCN   ALR   R2,R1\n         CLR   R2,R3\n         BH    VERRET\n         CLC   2(2,R2),=XL2'8186'  COLORS DEFINED ?\n         BE    SETEXC              YES\n         CLC   2(2,R2),=XL2'8187'  HIGHLIGHTING DEFINED ?\n         BE    SETEXH              YES\n         CLC   2(2,R2),=XL2'8185'  CHARACTER SETS DEFINED ?\n         BE    SETEXS              YES\n         CLC   2(2,R2),=XL2'8181'  USABLE AREA DEFINED ?\n         BE    SETEXA              YES\nVERNXT   XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         B     VERSCN\nSETEXC   CLC   0(2,R2),=H'6'\n         BL    VERNXT\n         CLI   5(R2),8\n         BL    VERNXT\n         OI    SWITCH,FSEXC\n         B     VERNXT\nSETEXH   CLC   0(2,R2),=H'5'\n         BL    VERNXT\n         CLI   4(R2),4\n         BL    VERNXT\n         OI    SWITCH,FSEXH\n         B     VERNXT\nSETEXS   CLC   0(2,R2),=H'13'\n         BL    VERNXT\n         TM    4(R2),X'80'         GE SUPPORT\n         BZ    VERNXT\n         OI    SWITCH,FSXGE\n         ST    R2,PSQA\n         TM    8(R2),X'40'         LPS DATA TYPE 1 SUPPORT\n         BZ    VERNXT\n         OI    SWITCH,FSEXS\n         B     VERNXT\nSETEXA   CLC   0(2,R2),=H'23'\n         BL    VERNXT\n         TM    4(R2),X'20'         3270DS SUPPORT\n         BO    VERNXT\n         OI    SWITCH,FSEXD\n         ST    R2,UAQA\n         B     VERNXT\nVERRET   TM    SWITCH,FSEXC+FSEXH+FSXGE\n         BNO   VERER3\n         L     R13,4(R13)\n         ST    R10,16(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     4(R14)\nVERER1   LA    R2,L'VER1MSG\n         LA    R3,VER1MSG\n        $PCLOSE\n         B     VERERX\nVERER2   LA    R2,L'VER2MSG\n         LA    R3,VER2MSG\n         B     VERERX\nVERER3   TM    SWITCH,FSXGE\n         BO    *+L'*+4\n         MVI   VER3MSG+25,C'G'\n         TM    SWITCH,FSEXH\n         BO    *+L'*+4\n         MVI   VER3MSG+25,C'H'\n         TM    SWITCH,FSEXC\n         BO    *+L'*+4\n         MVI   VER3MSG+25,C'C'\n         LA    R2,L'VER3MSG\n         LA    R3,VER3MSG\nVERERX   MVI   OPT,FSEXIT\n        @FS    OPT\n         LTR   R10,R10\n         BNZ   *+L'*+2\n         LR    R10,R15\n        TPUT   (R3),(R2),R\n         LTR   R10,R10\n         BNZ   VERRXR\n         LR    R10,R15\nVERRXR   L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         BR    R14\n         SPACE 1\nDDTEST   DC    CL8'SYSTEST'\nTRHEX    DC    CL16'0123456789ABCDEF'\n         DC    AL1(L'VERLNE)\nVERLNE   DC    CL79' '\n         SPACE 1\nVER1MSG  DC    C' --- \"$PRINT\" error -> Exit ---'\nVER2MSG  DC    C' --- \"$PCLOSE\" error -> Exit ---'\nVER3MSG  DC    C' --- QUERY reply scan : \" \"  missing -> Exit ---'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\n*------- TEST NUMBER 1 - COLOURS.\n         SPACE 1\n         CNOP  0,4\n         USING *,R12               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nT01      STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R15,R13\n         LA    R13,T01SV\n         B     T01CS\nT01SV    DC    18F'0'\nT01CS    ST    R13,8(R15)\n         ST    R15,4(R13)\n         LH    R2,TNR\nT01BIG   LA    R3,3\nT01HIGH  LR    R1,R3\n         SLL   R1,2\n         L     R6,=A(T01RGE)\n         B     *(R1)\n         B     T01GE93             1\n         B     T01GE94             2\n         B     T01GE95             3\nT01GE93 $FS    RA=(24,1,GE,93),MF=(I,(R6))\n         B     T01SA\nT01GE94 $FS    RA=(24,1,GE,94),MF=(I,(R6))\n         B     T01SA\nT01GE95 $FS    RA=(24,1,GE,95),MF=(I,(R6))\nT01SA    LA    R4,T01SELN\n         CLI   TNS,255\n         BE    T01LOW\n         LA    R15,T01SEL\n         XR    R1,R1\n         IC    R1,TNS\nT01SNX   EX    R1,T01SCN\n         BE    T01SET\n         LA    R15,L'T01SEL(R15)\n         BCT   R4,T01SNX\n         LA    R2,=CL35'Unknown or invalid colour specified'\n         LA    R3,35-1\n         L     R13,4(R13)\n         STM   R2,R3,20(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     8(R14)\nT01SCN   CLC   TNS+1(*-*),1(R15)\nT01SET   IC    R1,0(R15)\n         LA    R4,1\n         B     T01LOW+L'T01LOW\nT01LOW   LR    R1,R4\n         SLL   R1,2\n         LM    R6,R8,=A(T01SCL,T01SAC,T01NME)\n         B     *(R1)\n         B     T01SAW              1\n         B     T01SAY              2\n         B     T01SAT              3\n         B     T01SAG              4\n         B     T01SAP              5\n         B     T01SAR              6\n         B     T01SAB              7\nT01SAW  $FS    SA=(COLOUR,WHITE),MF=(I,(R6))\n        $FS    SA=(COLOUR,WHITE),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+1\n         B     T01XFS\nT01SAY  $FS    SA=(COLOUR,YELLOW),MF=(I,(R6))\n        $FS    SA=(COLOUR,YELLOW),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+L'T01SEL+1\n         B     T01XFS\nT01SAT  $FS    SA=(COLOUR,TURQ),MF=(I,(R6))\n        $FS    SA=(COLOUR,TURQ),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+2*L'T01SEL+1\n         B     T01XFS\nT01SAG  $FS    SA=(COLOUR,GREEN),MF=(I,(R6))\n        $FS    SA=(COLOUR,GREEN),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+3*L'T01SEL+1\n         B     T01XFS\nT01SAP  $FS    SA=(COLOUR,PINK),MF=(I,(R6))\n        $FS    SA=(COLOUR,PINK),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+4*L'T01SEL+1\n         B     T01XFS\nT01SAR  $FS    SA=(COLOUR,RED),MF=(I,(R6))\n        $FS    SA=(COLOUR,RED),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+5*L'T01SEL+1\n         B     T01XFS\nT01SAB  $FS    SA=(COLOUR,BLUE),MF=(I,(R6))\n        $FS    SA=(COLOUR,BLUE),MF=(I,(R7))\n         MVC   0(8,R8),T01SEL+6*L'T01SEL+1\nT01XFS   OI    OPT,FSSKIP\n        @FS    OPT,T01MS,T01MSL\n         LTR   R10,R15\n         BNZ   T01ERR\n        STIMER WAIT,,BINTVL=T01TSC,ERRET=T01INT\n         BCT   R4,T01LOW\n         BCT   R3,T01HIGH\n         BCT   R2,T01BIG\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         BR    R14\nT01INT   LH    R10,=H'99'\nT01ERR   L     R13,4(R13)\n         ST    R10,16(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     4(R14)\n         SPACE 1\nT01TSC   DC    A(1*100)            1.00 SEC INTERVAL\nT01MSL   DC    A(LT01MS)\nT01SEL   DS    0CL9\n         DC    AL1(1),CL8'WHITE'\n         DC    AL1(2),CL8'YELLOW'\n         DC    AL1(3),CL8'TURQ'\n         DC    AL1(4),CL8'GREEN'\n         DC    AL1(5),CL8'PINK'\n         DC    AL1(6),CL8'RED'\n         DC    AL1(7),CL8'BLUE'\nT01SELN  EQU   (*-T01SEL)/L'T01SEL\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\n        PRINT  NOGEN\nT01MS    $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(PROT),MF=L\n         $FS   SBA=(1,15),SF=(PROT),MF=L\n         $FS   SBA=(1,24),SF=NORMAL,MF=L\n         $FS   SBA=(1,26),SF=(PROT),MF=L\n         $FS   SBA=(2,80),SF=(PROT),MF=L\n         $FS   SBA=(24,1),SF=(PROT),MF=L\n         $FS   SBA=(1,2),SA=(HILITE,USCORE),MF=L\nT01SCL   $FS   SA=RESET,MF=L\n         $FS   TEXT='Test colour :',MF=L\n         $FS   SBA=(1,16),SA=(HILITE,DEFAULT),MF=L\nT01NME   $FS   TEXT=(' ',8),MF=L\n         $FS   SA=(HILITE,DEFAULT),MF=L\n         $FS   SBA=(3,1),MF=L\nT01SAC   $FS   SA=RESET,MF=L\nT01RGE   $FS   RA=(24,1,GE,FILL),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nLT01MS   EQU   *-T01MS\n        PRINT  GEN\n         EJECT\n*------- TEST NUMBER 2 - DISPLAY ALL PS.\n         SPACE 1\n         CNOP  0,4\n         USING *,R12               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nT02      STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R15,R13\n         LA    R13,T02SV\n         B     T02CS\nT02SV    DC    18F'0'\nT02CS    ST    R13,8(R15)\n         ST    R15,4(R13)\n         LH    R8,TNR\nT02L     L     R1,PSQA\n         XR    R7,R7\n         ICM   R7,B'0011',0(R1)\n         LA    R2,0(R7,R1)\n         XR    R7,R7\n         IC    R7,12(R1)\n         LTR   R7,R7\n         BNP   T02ER1\n         LA    R6,13(R1)\nT02SCN   CLR   R6,R2\n         BNL   T02TST\n         CLI   2(R6),X'FF'         FREE PS\n         BE    T02FR\n         XR    R1,R1\n         IC    R1,0(R6)\n         STC   R1,WORK+1\n         SRL   R1,4\n         STC   R1,WORK\n         IC    R1,2(R6)\n         LR    R0,R1\n         STC   R1,WORK+3\n         SRL   R1,4\n         STC   R1,WORK+2\n         NC    WORK(4),=XL4'0F0F0F0F'\n         TR    WORK(4),=CL16'0123456789ABCDEF'\n         L     R1,=A(T02PSN)\n         MVC   0(2,R1),WORK\n         MVC   11(2,R1),WORK+2\n         LA    R14,T02VSTN\n         LA    R15,T02VST\n         L     R1,0(R15)\n         STC   R0,2(R1)\n         LA    R15,4(R15)\n         BCT   R14,*-12\n         L     R1,=A(T02PSM)\n         MVI   0(R1),C' '\n         MVC   1(L'T02PSM-1,R1),0(R1)\n         TM    1(R6),X'80'\n         BO    *+L'*+10\n         MVC   0(3,R1),=CL3'not'\n         LA    R1,4(R1)\n         MVC   0(8,R1),=CL8'loadable'\n         MVC   9(6,R1),=CL6'triple'\n         TM    1(R6),X'40'\n         BO    *+L'*+6\n         MVC   9(6,R1),=CL6'single'\n         MVC   15(6,R1),=CL6'-plane'\n         CLI   2(R6),0\n         BNE   *+L'*+6\n         MVC   22(13,R1),=CL13'(default set)'\n         CLI   2(R6),C'1'\n         BNE   *+L'*+6\n         MVC   22(19,R1),=CL19'(used by GE orders)'\n         L     R3,=A(T02PST)\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,GREEN),      X\n               MF=(I,(R3))\n         L     R1,=A(T02PSA)\n         MVI   0(R1),C' '\n         MVC   1(L'T02PSA-1,R1),0(R1)\n         TM    1(R6),X'80'\n         BO    T02NCC\n         MVC   0(3,R1),=CL3'not'\n         LA    R1,4(R1)\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,RED),        X\n               MF=(I,(R3))\nT02NCC   MVC   0(9,R1),=CL9'resetable'\n         L     R3,=A(T02PSC2)\n         MVI   0(R3),C' '\n         MVC   1(64,R3),0(R3)\n         L     R4,=A(T02PSC0)\n         MVC   0(9,R4),0(R3)\n         L     R4,=A(T02PSC1)\n         MVC   0(6,R4),0(R3)\n         L     R4,=A(T02PSC3)\n         MVC   0(6,R4),0(R3)\n         L     R4,=A(T02PSC4)\n         MVC   0(65,R4),0(R3)\n         L     R3,=A(T02PSCZ)\n        $FS    SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,YELLOW),         X\n               MF=(I,(R3))\n         L     R1,PSQA\n         TM    4(R1),X'02'         CGCSGID ?\n         BZ    T02LDS              NO\n         L     R1,=A(T02PSC0)\n         MVC   0(9,R1),=CL9'CGCSGID :'\n        $FS    SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),          X\n               MF=(I,(R3))\n         LR    R1,R6\n         BAS   R5,T02SID\n         B     T02SIN\n         L     R1,=A(T02PSC1)\n         CLI   4(R4),C'C'\n         BE    *+L'*+10\n         MVC   0(6,R1),=CL6'Base ='\n         B     *+L'*+6\n         MVC   0(6,R1),=CL6'CECP ='\n         L     R1,=A(T02PSC2)\n         EX    R3,T02MVC\n         B     T02SIA\nT02SIN   L     R1,=A(T02PSC1)\n         MVC   0(6,R1),=CL6'???? ='\n         L     R1,=A(T02PSC2)\n         MVC   0(16,R1),=CL16'Unknown type |||'\nT02SIA   LR    R1,R6\n         ALR   R1,R7\n         CLR   R1,R2\n         BNL   T02LDS\n         CLC   0(3,R6),0(R1)\n         BNE   T02LDS\n         LR    R6,R1\n         BAS   R5,T02SID\n         B     T02NIS\n         L     R1,=A(T02PSC3)\n         CLI   4(R4),C'C'\n         BE    *+L'*+10\n         MVC   0(6,R1),=CL6'Base ='\n         B     *+L'*+6\n         MVC   0(6,R1),=CL6'CECP ='\n         L     R1,=A(T02PSC4)\n         EX    R3,T02MVC\n         B     T02LDS\nT02NIS   L     R1,=A(T02PSC3)\n         MVC   0(6,R1),=CL6'???? ='\n         L     R1,=A(T02PSC4)\n         MVC   0(16,R1),=CL16'Unknown type |||'\nT02LDS   LM    R3,R4,=A(T02MS1,T02MS1L)\n         B     T02SSS\nT02MVC   MVC   0(*-*,R1),6(R4)\nT02FR    XR    R1,R1\n         IC    R1,0(R6)\n         STC   R1,WORK+1\n         SRL   R1,4\n         STC   R1,WORK\n         IC    R1,2(R6)\n         LR    R0,R1\n         STC   R1,WORK+3\n         SRL   R1,4\n         STC   R1,WORK+2\n         NC    WORK(4),=XL4'0F0F0F0F'\n         TR    WORK(4),=CL16'0123456789ABCDEF'\n         L     R1,=A(T02FRN)\n         MVC   0(2,R1),WORK\n         MVC   11(2,R1),WORK+2\n         L     R1,=A(T02FRM)\n         MVI   0(R1),C' '\n         MVC   1(L'T02FRM-1,R1),0(R1)\n         TM    1(R6),X'80'\n         BO    *+L'*+10\n         MVC   0(3,R1),=CL3'not'\n         LA    R1,4(R1)\n         MVC   0(8,R1),=CL8'loadable'\n         MVC   9(6,R1),=CL6'triple'\n         TM    1(R6),X'40'\n         BO    *+L'*+6\n         MVC   9(6,R1),=CL6'single'\n         MVC   15(6,R1),=CL6'-plane'\n         L     R3,=A(T02FRT)\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,GREEN),      X\n               MF=(I,(R3))\n         L     R1,=A(T02FRA)\n         MVI   0(R1),C' '\n         MVC   1(L'T02FRA-1,R1),0(R1)\n         TM    1(R6),X'80'\n         BO    T02FR1\n         MVC   0(3,R1),=CL3'not'\n         LA    R1,4(R1)\n        $FS    SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,RED),        X\n               MF=(I,(R3))\nT02FR1   MVC   0(9,R1),=CL9'resetable'\n         LM    R3,R4,=A(T02MS2,T02MS2L)\nT02SSS   NI    OPT,255-FSSKIP\n         BAS   R5,T02SND\n         B     T02ERR\n         TM    1(R6),X'80'\n         BZ    T02NXT\n         CLI   3(R15),C'R'\n         BNE   T02NXT\n         L     R1,=A(T02RWS)       PS RESET\n         MVC   0(1,R1),0(R6)\n         OI    OPT,FSSKIP\n         LM    R3,R4,=A(T02MS3,T02MS3L)\n         BAS   R5,T02SND\n         B     T02ERR\n         LA    R3,SSID\n         LA    R4,NSID\n         CL    R6,0(R3)\n         BE    T02RSP\n         LA    R3,L'SSID(R3)\n         BCT   R4,*-12\n         B     T02RST\nT02RSP   XC    0(4,R3),0(R3)\nT02RST   MVI   2(R6),X'FF'         FREE LCID\nT02NXT   ALR   R6,R7\n         B     T02SCN\nT02TST   BCT   R8,T02L\n         B     T02XRT\nT02SID   XR    R3,R3\n         L     R4,=A(T02TBN)\n         CLC   3(4,R1),0(R4)\n         BE    *+L'*+20\n         IC    R3,5(R4)\n         LA    R4,7(R3,R4)\n         CLC   0(4,R4),=XL4'0'\n         BNE   *-24\n         BR    R5\n         IC    R3,5(R4)\n         B     4(R5)\nT02SND  @FS    OPT,(R3),(R4)\n         LTR   R10,R15\n         BNZR  R5\n         LA    R5,4(R5)\n         LTR   R1,R1\n         BZR   R5\n         CLI   0(R1),X'7D'         ENTER KEY\n         BNER  R5\n        @FSR   ,\n         LTR   R15,R15\n         BZR   R5\n         LTR   R1,R1\n         BNPR  R5\n         CH    R1,=H'1'\n         BNER  R5\n         OI    3(R15),C' '\n         CLI   3(R15),C'Z'\n         BNER  R5\nT02XRT   L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         BR    R14\nT02ERR   L     R13,4(R13)\n         ST    R10,16(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     4(R14)\nT02ER1   LA    R2,=CL34'Descriptor length is zero, so none'\n         LA    R3,34-1\n         L     R13,4(R13)\n         STM   R2,R3,20(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     8(R14)\n         SPACE 1\nT02MS1L  DC    A(LT02MS1)\nT02MS2L  DC    A(LT02MS2)\nT02MS3L  DC    A(LT02MS3)\nT02VST   DC    A(T02PS1,T02PS2,T02PS3,T02PS4,T02PS5,T02PS6)\n         DC    A(T02PS7,T02PS8,T02PS9,T02PS10,T02PS11,T02PS12)\nT02VSTN  EQU   (*-T02VST)/L'T02VST\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\n        PRINT  NOGEN\nT02MS1   $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,35),SF=NORMAL,MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\n         $FS   TEXT='Display Programmed Symbols (PS) :',MF=L\n         $FS   SBA=(1,38),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='(type E or just ENTER-key to continue,',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(2,38),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='type R to reset PS, or type Z to stop)',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(4,5),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   TEXT='0 1 2 3 4 5 6 7 8 9 A B C D E F',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(4,45),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\n         $FS   TEXT='0 1 2 3 4 5 6 7 8 9 A B C D E F',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(6,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='4 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS1   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(40404140424043404440454046404740),MF=L\n         $FS   SET=(484049404A404B404C404D404E404F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(6,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='5 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS2   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(50405140524053405440554056405740),MF=L\n         $FS   SET=(584059405A405B405C405D405E405F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(8,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='6 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS3   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(60406140624063406440654066406740),MF=L\n         $FS   SET=(684069406A406B406C406D406E406F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(8,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='7 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS4   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(70407140724073407440754076407740),MF=L\n         $FS   SET=(784079407A407B407C407D407E407F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(10,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='8 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS5   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(80408140824083408440854086408740),MF=L\n         $FS   SET=(884089408A408B408C408D408E408F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(10,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='9 -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS6   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(90409140924093409440954096409740),MF=L\n         $FS   SET=(984099409A409B409C409D409E409F),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(12,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='A -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS7   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(A040A140A240A340A440A540A640A740),MF=L\n         $FS   SET=(A840A940AA40AB40AC40AD40AE40AF),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(12,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='B -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS8   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(B040B140B240B340B440B540B640B740),MF=L\n         $FS   SET=(B840B940BA40BB40BC40BD40BE40BF),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(14,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='C -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS9   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(C040C140C240C340C440C540C640C740),MF=L\n         $FS   SET=(C840C940CA40CB40CC40CD40CE40CF),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(14,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='D -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS10  $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(D040D140D240D340D440D540D640D740),MF=L\n         $FS   SET=(D840D940DA40DB40DC40DD40DE40DF),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(16,1),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='E -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS11  $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(E040E140E240E340E440E540E640E740),MF=L\n         $FS   SET=(E840E940EA40EB40EC40ED40EE40EF),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(16,41),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,PINK),MF=L\n         $FS   TEXT='F -',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PS12  $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SET=(F040F140F240F340F440F540F640F740),MF=L\n         $FS   SET=(F840F940FA40FB40FC40FD40FE),MF=L\n         $FS   SA=(PGSYM,DEFAULT),SF=(PROT),MF=L\n         $FS   SBA=(19,16),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\nT02PSN   $FS   TEXT='   (LCID =   ) /',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\nT02PSM   $FS   TEXT=(' ',46),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(19,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,RED),MF=L\n         $FS   TEXT='Stored PS n\u00a2 :',MF=L\n         $FS   SBA=(20,16),MF=L\nT02PST   $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,RED),MF=L\n         $FS   TEXT='Advice :',MF=L\n         $FS   SBA=(20,25),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='this PS table is ',MF=L\nT02PSA   $FS   TEXT=(' ',15),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(21,11),SF=(PROT),MF=L\n         $FS   SBA=(21,1),MF=L\nT02PSCZ  $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\nT02PSC0  $FS   TEXT=(' ',9),MF=L\n         $FS   SBA=(22,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\nT02PSC1  $FS   TEXT=(' ',6),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PSC2  $FS   TEXT=(' ',65),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(23,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,TURQ),MF=L\nT02PSC3  $FS   TEXT=(' ',6),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\nT02PSC4  $FS   TEXT=(' ',65),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nLT02MS1  EQU   *-T02MS1\n         SPACE 1\nT02MS2   $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,35),SF=NORMAL,MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\n         $FS   TEXT='Display Programmed Symbols (PS) :',MF=L\n         $FS   SBA=(1,38),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='(type E or just ENTER-key to continue,',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(2,38),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='type R to reset PS, or type Z to stop)',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(5,16),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\nT02FRN   $FS   TEXT='   (LCID =   ) /',MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\nT02FRM   $FS   TEXT=(' ',46),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(5,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,RED),MF=L\n         $FS   TEXT='Free - PS n\u00a2 :',MF=L\n         $FS   SBA=(6,16),MF=L\nT02FRT   $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,RED),MF=L\n         $FS   TEXT='Advice :',MF=L\n         $FS   SBA=(6,25),MF=L\n         $FS   SFE=(ATTR,(PROT,INT),HILITE,DEFAULT,COLOUR,BLUE),MF=L\n         $FS   TEXT='this PS table is ',MF=L\nT02FRA   $FS   TEXT=(' ',15),MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nLT02MS2  EQU   *-T02MS2\n        PRINT  GEN\n         SPACE 1\nT02MS3   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD\nT02MS31  DC    AL2(T02ML31)        LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'01000001'         FLAGS - BASIC FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\n         DC    X'FF'               LCID - LOCAL CHARACTER SET ID\n         DC    X'41'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT02RWS   DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\nT02ML31  EQU   *-T02MS31\nLT02MS3  EQU   *-T02MS3\n         EJECT\n        PRINT  NOGEN\nT02TBN  #GTB   C=00650025,T=B,                                         X\n               L='EBCDIC (WT), English (U.S.A.), and Netherlands'\n        #GTB   C=00670026,T=B,                                         X\n               L='English (U.S.A.) ASCII-international'\n        #GTB   C=0067016F,T=B,                                         X\n               L='English (U.S.A.) ASCII-7 and ASCII-8'\n        #GTB   C=006701F4,T=B,                                         X\n               L='International'\n        #GTB   C=01090111,T=B,                                         X\n               L='Austrian/German'\n        #GTB   C=010D0112,T=B,                                         X\n               L='Belgian'\n        #GTB   C=01110113,T=B,                                         X\n               L='Brazilian'\n        #GTB   C=011D0116,T=B,                                         X\n               L='Finnish and Swedish'\n        #GTB   C=01190115,T=B,                                         X\n               L='Dannish and Norwegian'\n        #GTB   C=01250118,T=B,                                         X\n               L='Italian'\n        #GTB   C=01290119,T=B,                                         X\n               L='Japanese English'\n        #GTB   C=0135011C,T=B,                                         X\n               L='Spanish-Speaking'\n        #GTB   C=0139011D,T=B,                                         X\n               L='English (U.K.)'\n        #GTB   C=014C0122,T=B,                                         X\n               L='Japanese Katakana)'\n        #GTB   C=017E0136,T=B,                                         X\n               L='APL'\n        #GTB   C=028A011C,T=B,                                         X\n               L='Spanish'\n        #GTB   C=02B90025,T=C,                                         X\n               L='Canadian Bilingual, English (U.S.A.), Netherlands, anX\n               d Portuguese'\n        #GTB   C=02B901F4,T=C,                                         X\n               L='Swiss-French (New), Swiss-German (New), and Belgian (X\n               New)'\n        #GTB   C=02B9011C,T=C,                                         X\n               L='Spanish and Spanish-Speaking'\n        #GTB   C=02B9011D,T=C,                                         X\n               L='English (U.K.)'\n        #GTB   C=02B90111,T=C,                                         X\n               L='Austrian/German'\n        #GTB   C=02B90115,T=C,                                         X\n               L='Danish and Norwegian'\n        #GTB   C=02B90116,T=C,                                         X\n               L='Finnish and Swedish'\n        #GTB   C=02B90118,T=C,                                         X\n               L='Italian'\n        #GTB   C=02B90129,T=C,                                         X\n               L='French'\n        #GTB   C=02B90367,T=C,                                         X\n               L='Icelandic'\n        #GTB   C=03AA0346,T=B,                                         X\n               L='Thai'\n        #GTB   C=03C30136,T=B,                                         X\n               L='APL2'\n        #GTB   C=038C01F4,T=B,                                         X\n               L='Swiss-French (New) and Swiss-German (New)'\n        #GTB   C=03890025,T=B,                                         X\n               L='Canadian Bilingual'\n        #GTB   C=045A0025,T=B,                                         X\n               L='Portuguese'\n        #GTB   C=045A01F4,T=B,                                         X\n               L='Belgian (New)'\n        #GTB   C=046401A7,T=B,                                         X\n               L='Greek'\n        #GTB   C=04650370,T=B,                                         X\n               L='Cyrillic'\n        #GTB   C=04660367,T=B,                                         X\n               L='Icelandic'\n        #GTB   C=04670389,T=B,                                         X\n               L='Turkish'\n        #GTB   C=04680366,T=B,                                         X\n               L='ROECE Latin and Yugoslav'\n        #GTB   C=04690129,T=B,                                         X\n               L='French'\n        #GTB   C=END\n        PRINT  GEN\n         EJECT\n*------- TEST NUMBER 3 - LOAD PS SINGLE-PLANE.\n         SPACE 1\n         CNOP  0,4\n         USING *,R12               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nT03      STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R15,R13\n         LA    R13,T03SV\n         B     T03CS\nT03SV    DC    18F'0'\nT03CS    ST    R13,8(R15)\n         ST    R15,4(R13)\n         TM    SWITCH,FSEXS+FSEXD\n         BNO   T03ER0\n         MVI   T03SW,0\n         CLI   TNS,255\n         BNE   T03SLX\n         OC    T03SVID,T03SVID\n         BZ    T03PCD\n         B     T03XDS\nT03SLX   LA    R14,T03SELN\n         LA    R15,T03SEL\n         XR    R1,R1\n         IC    R1,TNS\nT03SNX   EX    R1,T03CMP\n         BE    T03SET\n         LA    R15,L'T03SEL(R15)\n         BCT   R14,T03SNX\n         LA    R2,=CL37'Unknown or invalid function specified'\n         LA    R3,37-1\n         B     T03ERM\nT03CMP   CLC   TNS+1(*-*),0(R15)\nT03SET   ICM   R14,B'1111',8(R15)\n         BR    R14\nT03DISP  OC    T03SVID,T03SVID\n         BZ    T03ER1\n         OI    T03SW,F03DISP\n         B     T03XDS\nT03CANL  OC    T03SVID,T03SVID\n         BZ    T03ER2\n         B     T03XCL\nT03LOAD  OC    T03SVID,T03SVID\n         BNZ   T03ER3\n         OI    T03SW,F03LOAD\nT03PCD   L     R2,PSQA\n         TM    4(R2),X'30'         LPS AND LPSE SUPPORT\n         BNO   T03ER4\n         CLC   6(2,R2),=AL1(9,16)  DEFAULT SDW + SDH\n         BNE   T03ER5\n         TM    8(R2),X'40'         FORMAT TYPE 1\n         BZ    T03ER6\n         XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         LA    R5,0(R1,R2)\n         XR    R1,R1\n         IC    R1,12(R2)\n         LTR   R1,R1\n         BNP   T03ER7\n         LA    R4,13(R2)\nT03SCN   CLI   2(R4),X'FF'         FREE PS\n         BNE   T03NXT\n         TM    1(R4),X'80'         LOADABLE\n         BZ    T03NXT\n         TM    1(R4),X'40'         SINGLE-PLANE\n         BZ    T03XLP\nT03NXT   ALR   R4,R1\n         CLR   R4,R5\n         BL    T03SCN\n         B     T03ER8\nT03XLP   MVC   T03RWS1(1),0(R4)\n         MVC   T03RWS3(1),0(R4)\n         XR    R1,R1\n         IC    R1,0(R4)\n         STC   R1,T03RWS2+1\n         SRL   R1,4\n         STC   R1,T03RWS2\n         NC    T03RWS2(2),=XL2'0F0F'\n         TR    T03RWS2(2),=CL16'0123456789ABCDEF'\n         L     R2,UAQA\n         CLI   19(R2),9            AW (X UNITS)\n         BNE   T03ER9\n         CLI   20(R2),12           AH (Y UNITS)\n         BL    T03ER9\n         BH    T03STH\n         LM    R14,R1,=A(T03UATB,T03UAL,T03UA12,T03UAL)\n         MVCL  R14,R0\n         B     T03STR\nT03STH   LM    R14,R1,=A(T03UATB,T03UAL,T03UA16,T03UAL)\n         MVCL  R14,R0\nT03STR   L     R15,=A(SLLCID)      SELECT AN LCID\n         BASR  R14,R15\n         LTR   R0,R0\n         BNP   T03ER10\n         STC   R0,2(R4)            RETAIN LCID\n         ST    R4,T03SVID\n         L     R1,=A(T03LC11)\n         STC   R0,0(R1)\n         LA    R3,3\n         LA    R4,=A(T03RA1,T03RA2,T03RA3)\n         L     R1,0(R4)\n         STC   R0,9(R1)\n         LA    R4,4(R4)\n         BCT   R3,*-12\n         LA    R3,6\n         LA    R4,=A(T03SA1,T03SA2,T03SA3,T03SA4,T03SA5,T03SA6)\n         L     R1,0(R4)\n         STC   R0,2(R1)\n         LA    R4,4(R4)\n         BCT   R3,*-12\n         OI    OPT,FSSKIP\n         LM    R3,R4,T03V1\n         BAS   R5,T03SND\n         B     T03ERR\n         TM    T03SW,F03LOAD\n         BO    T03XRT\nT03XDS   LH    R6,TNR\nT03L     NI    OPT,255-FSSKIP\n         LM    R3,R4,T03V2\n         BAS   R5,T03SND\n         B     T03ERR\n         BCT   R6,T03L\n         TM    T03SW,F03DISP\n         BO    T03XRT\nT03XCL   OI    OPT,FSSKIP\n         LM    R3,R4,T03V3\n         BAS   R5,T03SND\n         B     T03ERR\n         L     R4,T03SVID\n         MVI   2(R4),X'FF'         FREE LCID\n         XC    T03SVID,T03SVID\n         B     T03XRT\nT03SND  @FS    OPT,(R3),(R4)\n         LTR   R10,R15\n         BNZR  R5\n         LA    R5,4(R5)\n         LTR   R1,R1\n         BZR   R5\n         CLI   0(R1),X'7D'         ENTER KEY\n         BNER  R5\n        @FSR   ,\n         LTR   R15,R15\n         BZR   R5\n         LTR   R1,R1\n         BNPR  R5\n         CH    R1,=H'1'\n         BNER  R5\n         OI    3(R15),C' '\n         CLI   3(R15),C'Z'\n         BNER  R5\nT03XRT   L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         BR    R14\nT03ERR   L     R13,4(R13)\n         ST    R10,16(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     4(R14)\nT03ER0   LA    R2,=CL40'Unavailable : D and/or S missing (QUERY)'\n         LA    R3,40-1\n         B     T03ERM\nT03ER1   LA    R2,=CL26'Single-plane PS not loaded'\n         LA    R3,26-1\n         B     T03ERM\nT03ER2   LA    R2,=CL32'Single-plane PS already canceled'\n         LA    R3,32-1\n         B     T03ERM\nT03ER3   LA    R2,=CL30'Single-plane PS already loaded'\n         LA    R3,30-1\n         B     T03ERM\nT03ER4   LA    R2,=CL29'LPS and/or LPSE not supported'\n         LA    R3,29-1\n         B     T03ERM\nT03ER5   LA    R2,=CL26'SDW and/or SDH not expected default'\n         LA    R3,26-1\n         B     T03ERM\nT03ER6   LA    R2,=CL35'Load PS format type 1 not supported'\n         LA    R3,35-1\n         B     T03ERM\nT03ER7   LA    R2,=CL34'Descriptor length is zero, so none'\n         LA    R3,34-1\n         B     T03ERM\nT03ER8   LA    R2,=CL38'No loadable single-plane free PS found'\n         LA    R3,38-1\n         B     T03ERM\nT03ER9   LA    R2,=CL43'Unexpected AW (X units) and/or AH (Y units)'\n         LA    R3,43-1\n         B     T03ERM\nT03ER10  LA    R2,=CL42'No LCID (local character set ID) available'\n         LA    R3,42-1\nT03ERM   L     R13,4(R13)\n         STM   R2,R3,20(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     8(R14)\n         SPACE 1\nT03MS1L  DC    A(LT03MS1)\nT03MS2L  DC    A(LT03MS2)\nT03MS3L  DC    A(LT03MS3)\nT03V1    DC    A(T03MS1,T03MS1L)\nT03V2    DC    A(T03MS2,T03MS2L)\nT03V3    DC    A(T03MS3,T03MS3L)\nT03SEL   DS    0CL12\n         DC    CL8'LOAD',A(T03LOAD)\n         DC    CL8'DISPLAY',A(T03DISP)\n         DC    CL8'CANCEL',A(T03CANL)\nT03SELN  EQU   (*-T03SEL)/L'T03SEL\nT03SW    DC    XL1'0'\nF03LOAD  EQU   X'80'\nF03DISP  EQU   X'40'\nF03CANL  EQU   X'20'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\nT03MS1   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD\nT03MS11  DC    AL2(T03ML11)        LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'01000001'         FLAGS - BASIC FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\nT03LC11  DC    X'00'               LCID - LOCAL CHARACTER SET ID\n         DC    X'50'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT03RWS1  DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\nT03UATB  DC    (T03UAL)X'0'\nT03ML11  EQU   *-T03MS11\nLT03MS1  EQU   *-T03MS1\n         SPACE 1\n         PRINT NOGEN\nT03MS2   $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,29),SF=NORMAL,MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\n         $FS   TEXT='Load PS single-plane test :',MF=L\n         $FS   SBA=(1,31),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='(E or ENTER-key = continue or Z = stop)',MF=L\n         $FS   SBA=(2,1),SF=(PROT),MF=L\n         $FS   SBA=(4,21),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),MF=L\nT03RWS2  $FS   TEXT='  ',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(4,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,TURQ),MF=L\n         $FS   TEXT='Stored PS n\u00a2 is :',MF=L\n         $FS   SBA=(10,58),SF=(PROT),MF=L\n         $FS   SBA=(10,22),MF=L\nT03RA1   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(10,58,5B),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(12,48),SF=(PROT),MF=L\n         $FS   SBA=(12,32),MF=L\nT03SA1   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(535757575757575757575757575754),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(13,48),SF=(PROT),MF=L\n         $FS   SBA=(13,32),MF=L\nT03SA2   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(5A4050405140524052405140504058),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(14,48),SF=(PROT),MF=L\n         $FS   SBA=(14,32),MF=L\nT03SA3   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(555959595959595959595959595956),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(16,58),SF=(PROT),MF=L\n         $FS   SBA=(16,22),MF=L\nT03RA2   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(16,58,5B),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(18,48),SF=(PROT),MF=L\n         $FS   SBA=(18,32),MF=L\nT03SA4   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(535757575757575757575757575754),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(19,48),SF=(PROT),MF=L\n         $FS   SBA=(19,32),MF=L\nT03SA5   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(5A4050405140524052405140504058),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(20,48),SF=(PROT),MF=L\n         $FS   SBA=(20,32),MF=L\nT03SA6   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(555959595959595959595959595956),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(22,58),SF=(PROT),MF=L\n         $FS   SBA=(22,22),MF=L\nT03RA3   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(22,58,5B),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nLT03MS2  EQU   *-T03MS2\n        PRINT  GEN\n         SPACE 1\nT03MS3   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD\nT03MS31  DC    AL2(T03ML31)        LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'01000001'         FLAGS - BASIC FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\n         DC    X'FF'               LCID - LOCAL CHARACTER SET ID\n         DC    X'41'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT03RWS3  DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\nT03ML31  EQU   *-T03MS31\nLT03MS3  EQU   *-T03MS3\n         SPACE 1\n        PRINT  NOGEN\nT03UA16 $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               111111111,                                              X\n               011111110,                                              X\n               001111100,                                              X\n               000111000,                                              X\n               000010000,                                              X\n               000111000,                                              X\n               001111100,                                              X\n               011111110,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,PL=SINGLE\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               100000001,                                              X\n               110000011,                                              X\n               111000111,                                              X\n               111101111,                                              X\n               111111111,                                              X\n               111101111,                                              X\n               111000111,                                              X\n               110000011,                                              X\n               100000001,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               111111111,                                              X\n               100000001,                                              X\n               101111101,                                              X\n               101000101,                                              X\n               101010101,                                              X\n               101000101,                                              X\n               101111101,                                              X\n               100000001,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111\n        $FSDOT 111111111,          START OF SYMBOL 4 X'53'             X\n               100000000,                                              X\n               101111111,                                              X\n               101000000,                                              X\n               101011111,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000\n        $FSDOT 111111111,          START OF SYMBOL 5 X'54'             X\n               000000001,                                              X\n               111111101,                                              X\n               000000101,                                              X\n               111110101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101\n        $FSDOT 101010000,          START OF SYMBOL 6 X'55'             X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101011111,                                              X\n               101000000,                                              X\n               101111111,                                              X\n               100000000,                                              X\n               111111111\n        $FSDOT 000010101,          START OF SYMBOL 7 X'56'             X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               111110101,                                              X\n               000000101,                                              X\n               111111101,                                              X\n               000000001,                                              X\n               111111111\n        $FSDOT 111111111,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 000010101,          START OF SYMBOL 9 X'58'             X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111\n        $FSDOT 101010000,          START OF SYMBOL 11 X'5A'            X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\nT03UAL   EQU   *-T03UA16\n         SPACE 1\nT03UA12 $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               111111111,                                              X\n               011111110,                                              X\n               001111100,                                              X\n               000111000,                                              X\n               000010000,                                              X\n               000111000,                                              X\n               001111100,                                              X\n               011111110,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,H=12,PL=SINGLE\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               100000001,                                              X\n               110000011,                                              X\n               111000111,                                              X\n               111101111,                                              X\n               111111111,                                              X\n               111101111,                                              X\n               111000111,                                              X\n               110000011,                                              X\n               100000001,                                              X\n               000000000,                                              X\n               111111111,H=12\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               111111111,                                              X\n               100000001,                                              X\n               101111101,                                              X\n               101000101,                                              X\n               101010101,                                              X\n               101000101,                                              X\n               101111101,                                              X\n               100000001,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,H=12\n        $FSDOT 111111111,          START OF SYMBOL 4 X'53'             X\n               100000000,                                              X\n               101111111,                                              X\n               101000000,                                              X\n               101011111,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,H=12\n        $FSDOT 111111111,          START OF SYMBOL 5 X'54'             X\n               000000001,                                              X\n               111111101,                                              X\n               000000101,                                              X\n               111110101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,H=12\n        $FSDOT 101010000,          START OF SYMBOL 6 X'55'             X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101011111,                                              X\n               101000000,                                              X\n               101111111,                                              X\n               100000000,                                              X\n               111111111,H=12\n        $FSDOT 000010101,          START OF SYMBOL 7 X'56'             X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               111110101,                                              X\n               000000101,                                              X\n               111111101,                                              X\n               000000001,                                              X\n               111111111,H=12\n        $FSDOT 111111111,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,H=12\n        $FSDOT 000010101,          START OF SYMBOL 9 X'58'             X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,                                              X\n               000010101,H=12\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               111111111,H=12\n        $FSDOT 101010000,          START OF SYMBOL 11 X'5A'            X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,                                              X\n               101010000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               111111111,                                              X\n               111111111,                                              X\n               000000000,H=12\n        PRINT  GEN\n         EJECT\n*------- TEST NUMBER 4 - LOAD PS TRIPLE-PLANE.\n         SPACE 1\n         CNOP  0,4\n         USING *,R12               LOCAL ADDRESSABILITY\n         USING T3270FS,R11         BASE ADDRESSABILITY\nT04      STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R15,R13\n         LA    R13,T04SV\n         B     T04CS\nT04SV    DC    18F'0'\nT04CS    ST    R13,8(R15)\n         ST    R15,4(R13)\n         MVI   T04SW,0\n         TM    SWITCH,FSEXS+FSEXD\n         BNO   T04ER0\n         CLI   TNS,255\n         BNE   T04SLX\n         OC    T04SVID,T04SVID\n         BZ    T04PCD\n         B     T04XDS\nT04SLX   LA    R14,T04SELN\n         LA    R15,T04SEL\n         XR    R1,R1\n         IC    R1,TNS\nT04SNX   EX    R1,T04CMP\n         BE    T04SET\n         LA    R15,L'T04SEL(R15)\n         BCT   R14,T04SNX\n         LA    R2,=CL37'Unknown or invalid function specified'\n         LA    R3,37-1\n         B     T04ERM\nT04CMP   CLC   TNS+1(*-*),0(R15)\nT04SET   ICM   R14,B'1111',8(R15)\n         BR    R14\nT04DISP  OC    T04SVID,T04SVID\n         BZ    T04ER1\n         OI    T04SW,F04DISP\n         B     T04XDS\nT04CANL  OC    T04SVID,T04SVID\n         BZ    T04ER2\n         B     T04XCL\nT04LOAD  OC    T04SVID,T04SVID\n         BNZ   T04ER3\n         OI    T04SW,F04LOAD\nT04PCD   L     R2,PSQA\n         TM    4(R2),X'30'         LPS AND LPSE SUPPORT\n         BNO   T04ER4\n         CLC   6(2,R2),=AL1(9,16)  DEFAULT SDW + SDH\n         BNE   T04ER5\n         TM    8(R2),X'40'         FORMAT TYPE 1\n         BZ    T04ER6\n         XR    R1,R1\n         ICM   R1,B'0011',0(R2)\n         LA    R5,0(R1,R2)\n         XR    R1,R1\n         IC    R1,12(R2)\n         LTR   R1,R1\n         BNP   T04ER7\n         LA    R4,13(R2)\nT04SCN   CLI   2(R4),X'FF'         FREE PS\n         BNE   T04NXT\n         TM    1(R4),X'80'         LOADABLE\n         BZ    T04NXT\n         TM    1(R4),X'40'         TRIPLE-PLANE\n         BO    T04XLP\nT04NXT   ALR   R4,R1\n         CLR   R4,R5\n         BL    T04SCN\n         B     T04ER8\nT04XLP   L     R1,=A(T04RWS11)\n         MVC   0(1,R1),0(R4)\n         L     R1,=A(T04RWS12)\n         MVC   0(1,R1),0(R4)\n         L     R1,=A(T04RWS13)\n         MVC   0(1,R1),0(R4)\n         L     R1,=A(T04RWS3)\n         MVC   0(1,R1),0(R4)\n         L     R2,=A(T04RWS2)\n         XR    R1,R1\n         IC    R1,0(R4)\n         STC   R1,1(R2)\n         SRL   R1,4\n         STC   R1,0(R2)\n         NC    0(2,R2),=XL2'0F0F'\n         TR    0(2,R2),=CL16'0123456789ABCDEF'\n         L     R2,UAQA\n         CLI   19(R2),9            AW (X UNITS)\n         BNE   T04ER9\n         CLI   20(R2),12           AH (Y UNITS)\n         BL    T04ER9\n         BH    T04STH\n         LM    R14,R1,=A(T04UTBB,T04UBL,T04U12B,T04UBL)\n         MVCL  R14,R0\n         LM    R14,R1,=A(T04UTBR,T04URL,T04U12R,T04URL)\n         MVCL  R14,R0\n         LM    R14,R1,=A(T04UTBG,T04UGL,T04U12G,T04UGL)\n         MVCL  R14,R0\n         B     T04STR\nT04STH   LM    R14,R1,=A(T04UTBB,T04UBL,T04U16B,T04UBL)\n         MVCL  R14,R0\n         LM    R14,R1,=A(T04UTBR,T04URL,T04U16R,T04URL)\n         MVCL  R14,R0\n         LM    R14,R1,=A(T04UTBG,T04UGL,T04U16G,T04UGL)\n         MVCL  R14,R0\nT04STR   L     R15,=A(SLLCID)      SELECT AN LCID\n         BASR  R14,R15\n         LTR   R0,R0\n         BNP   T04ER10\n         STC   R0,2(R4)            RETAIN LCID\n         ST    R4,T04SVID\n         LA    R3,3\n         LA    R4,=A(T04LC11,T04LC12,T04LC13)\n         L     R1,0(R4)\n         STC   R0,0(R1)\n         LA    R4,4(R4)\n         BCT   R3,*-12\n         LA    R3,3\n         LA    R4,=A(T04RA1,T04RA2,T04RA3)\n         L     R1,0(R4)\n         STC   R0,9(R1)\n         LA    R4,4(R4)\n         BCT   R3,*-12\n         LA    R3,6\n         LA    R4,=A(T04SA1,T04SA2,T04SA3,T04SA4,T04SA5,T04SA6)\n         L     R1,0(R4)\n         STC   R0,2(R1)\n         LA    R4,4(R4)\n         BCT   R3,*-12\n         OI    OPT,FSSKIP\n         LM    R3,R4,T04V1\n         BAS   R5,T04SND\n         B     T04ERR\n         TM    T04SW,F04LOAD\n         BO    T04XRT\nT04XDS   LH    R6,TNR\nT04L     NI    OPT,255-FSSKIP\n         LM    R3,R4,T04V2\n         BAS   R5,T04SND\n         B     T04ERR\n         BCT   R6,T04L\n         TM    T04SW,F04DISP\n         BO    T04XRT\nT04XCL   OI    OPT,FSSKIP\n         LM    R3,R4,T04V3\n         BAS   R5,T04SND\n         B     T04ERR\n         L     R4,T04SVID\n         MVI   2(R4),X'FF'         FREE LCID\n         XC    T04SVID,T04SVID\n         B     T04XRT\nT04SND  @FS    OPT,(R3),(R4)\n         LTR   R10,R15\n         BNZR  R5\n         LA    R5,4(R5)\n         LTR   R1,R1\n         BZR   R5\n         CLI   0(R1),X'7D'         ENTER KEY\n         BNER  R5\n        @FSR   ,\n         LTR   R15,R15\n         BZR   R5\n         LTR   R1,R1\n         BNPR  R5\n         CH    R1,=H'1'\n         BNER  R5\n         OI    3(R15),C' '\n         CLI   3(R15),C'Z'\n         BNER  R5\nT04XRT   L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         BR    R14\nT04ERR   L     R13,4(R13)\n         ST    R10,16(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     4(R14)\nT04ER0   LA    R2,=CL40'Unavailable : D and/or S missing (QUERY)'\n         LA    R3,40-1\n         B     T04ERM\nT04ER1   LA    R2,=CL26'Triple-plane PS not loaded'\n         LA    R3,26-1\n         B     T04ERM\nT04ER2   LA    R2,=CL32'Triple-plane PS already canceled'\n         LA    R3,32-1\n         B     T04ERM\nT04ER3   LA    R2,=CL30'Triple-plane PS already loaded'\n         LA    R3,30-1\n         B     T04ERM\nT04ER4   LA    R2,=CL29'LPS and/or LPSE not supported'\n         LA    R3,29-1\n         B     T04ERM\nT04ER5   LA    R2,=CL26'SDW and/or SDH not expected default'\n         LA    R3,26-1\n         B     T04ERM\nT04ER6   LA    R2,=CL35'Load PS format type 1 not supported'\n         LA    R3,35-1\n         B     T04ERM\nT04ER7   LA    R2,=CL34'Descriptor length is zero, so none'\n         LA    R3,34-1\n         B     T04ERM\nT04ER8   LA    R2,=CL38'No loadable triple-plane free PS found'\n         LA    R3,38-1\n         B     T04ERM\nT04ER9   LA    R2,=CL43'Unexpected AW (X units) and/or AH (Y units)'\n         LA    R3,43-1\n         B     T04ERM\nT04ER10  LA    R2,=CL42'No LCID (local character set ID) available'\n         LA    R3,42-1\nT04ERM   L     R13,4(R13)\n         STM   R2,R3,20(R13)\n         LM    R14,R12,12(R13)\n         MVI   12(R13),X'FF'\n         B     8(R14)\n         SPACE 1\nT04MS1L  DC    A(LT04MS1)\nT04MS2L  DC    A(LT04MS2)\nT04MS3L  DC    A(LT04MS3)\nT04V1    DC    A(T04MS1,T04MS1L)\nT04V2    DC    A(T04MS2,T04MS2L)\nT04V3    DC    A(T04MS3,T04MS3L)\nT04SEL   DS    0CL12\n         DC    CL8'LOAD',A(T04LOAD)\n         DC    CL8'DISPLAY',A(T04DISP)\n         DC    CL8'CANCEL',A(T04CANL)\nT04SELN  EQU   (*-T04SEL)/L'T04SEL\nT04SW    DC    XL1'0'\nF04LOAD  EQU   X'80'\nF04DISP  EQU   X'40'\nF04CANL  EQU   X'20'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R12                 KILL LOCAL ADDRESSABILITY\n         DROP  R11                 KILL BASE ADDRESSABILITY\n         EJECT\nT04MS1   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD\nT04MS11  DC    AL2(T04MS11L)       LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'11000001'         FLAGS - EXTENDED FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\nT04LC11  DC    X'00'               LCID - LOCAL CHARACTER SET ID\n         DC    X'50'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT04RWS11 DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\n         DC    X'06'               LENGTH OF EXT FORM PARAMETERS\n         DC    B'00000000'\n         DC    AL1(9)              LW\n         DC    AL1(16)             LH\n         DC    X'00'               RESERVED\n         DC    B'00000001'         BLUE PLANE\nT04UTBB  DC    (T04UBL)X'0'\nT04MS11L EQU   *-T04MS11\nT04MS12  DC    AL2(T04MS12L)       LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'11000001'         FLAGS - EXTENDED FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\nT04LC12  DC    X'00'               LCID - LOCAL CHARACTER SET ID\n         DC    X'50'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT04RWS12 DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\n         DC    X'06'               LENGTH OF EXT FORM PARAMETERS\n         DC    B'00000000'\n         DC    AL1(9)              LW\n         DC    AL1(16)             LH\n         DC    X'00'               RESERVED\n         DC    B'00000010'         RED PLANE\nT04UTBR  DC    (T04UBL)X'0'\nT04MS12L EQU   *-T04MS12\nT04MS13  DC    AL2(T04MS13L)       LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'11000001'         FLAGS - EXTENDED FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\nT04LC13  DC    X'00'               LCID - LOCAL CHARACTER SET ID\n         DC    X'50'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT04RWS13 DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\n         DC    X'06'               LENGTH OF EXT FORM PARAMETERS\n         DC    B'00000000'\n         DC    AL1(9)              LW\n         DC    AL1(16)             LH\n         DC    X'00'               RESERVED\n         DC    B'00000100'         GREEN PLANE\nT04UTBG  DC    (T04UBL)X'0'\nT04MS13L EQU   *-T04MS13\nLT04MS1  EQU   *-T04MS1\n         SPACE 1\n        PRINT  NOGEN\nT04MS2   $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,29),SF=NORMAL,MF=L\n         $FS   SBA=(1,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,YELLOW),MF=L\n         $FS   TEXT='Load PS triple-plane test :',MF=L\n         $FS   SBA=(1,31),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,GREEN),MF=L\n         $FS   TEXT='(E or ENTER-key = continue or Z = stop)',MF=L\n         $FS   SBA=(2,1),SF=(PROT),MF=L\n         $FS   SBA=(4,21),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,RED),MF=L\nT04RWS2  $FS   TEXT='  ',MF=L\n         $FS   SF=(PROT),MF=L\n         $FS   SBA=(4,1),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,USCORE,COLOUR,TURQ),MF=L\n         $FS   TEXT='Stored PS n\u00a2 is :',MF=L\n         $FS   SBA=(10,58),SF=(PROT),MF=L\n         $FS   SBA=(10,22),MF=L\nT04RA1   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(10,58,5B),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(12,48),SF=(PROT),MF=L\n         $FS   SBA=(12,32),MF=L\nT04SA1   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(535757575757575757575757575754),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(13,48),SF=(PROT),MF=L\n         $FS   SBA=(13,32),MF=L\nT04SA2   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(5A4050405140524052405140504058),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(14,48),SF=(PROT),MF=L\n         $FS   SBA=(14,32),MF=L\nT04SA3   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE),MF=L\n         $FS   SET=(555959595959595959595959595956),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(16,58),SF=(PROT),MF=L\n         $FS   SBA=(16,22),MF=L\nT04RA2   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(16,58,5C),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(18,48),SF=(PROT),MF=L\n         $FS   SBA=(18,32),MF=L\nT04SA4   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(535757575757575757575757575754),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(19,48),SF=(PROT),MF=L\n         $FS   SBA=(19,32),MF=L\nT04SA5   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(5A4050405140524052405140504058),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(20,48),SF=(PROT),MF=L\n         $FS   SBA=(20,32),MF=L\nT04SA6   $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SFE=(ATTR,(PROT),HILITE,REVERSE,COLOUR,WHITE),MF=L\n         $FS   SET=(555959595959595959595959595956),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(22,58),SF=(PROT),MF=L\n         $FS   SBA=(22,22),MF=L\nT04RA3   $FS   SFE=(ATTR,(PROT),HILITE,DEFAULT,COLOUR,WHITE,           X\n               PGSYM,DEFAULT),RA=(22,58,5B),MF=L\n         $FS   SA=(PGSYM,DEFAULT),MF=L\n         $FS   SBA=(1,1),SF=(PT,IC),MF=L\nLT04MS2  EQU   *-T04MS2\n        PRINT  GEN\n         SPACE 1\nT04MS3   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD\nT04MS31  DC    AL2(T04ML31)        LENGTH OF STRUCTURED FIELD\n         DC    X'06'               LOAD PROGRAMMED SYMBOLS (LOAD PS)\n         DC    B'01000001'         FLAGS - BASIC FORM\n*                                        - CLEAR\n*                                        - NO SUPRESSION\n*                                        - DATA TYPE 1\n         DC    X'FF'               LCID - LOCAL CHARACTER SET ID\n         DC    X'41'               CHAR - SLOT IN RWS FOR FIRST CHAR\nT04RWS3  DC    X'00'               RWS - PHYSICAL RWS TO BE LOADED\nT04ML31  EQU   *-T04MS31\nLT04MS3  EQU   *-T04MS3\n         SPACE 1\n        PRINT  NOGEN\nT04U16B $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR,PL=BLUE\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               000000000,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\nT04UBL   EQU   *-T04U16B\n         SPACE 1\nT04U16R $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR,PL=RED\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               000000000,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\nT04URL   EQU   *-T04U16R\n         SPACE 1\nT04U16G $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR,PL=GREEN\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               RRRRRRRRR\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               000000000,                                              X\n               000000000,                                              X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000\nT04UGL   EQU   *-T04U16G\n         SPACE 1\n*                             BLUE PLANE\nT04U12B $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12,PL=BLUE\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGWWWRRR,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n         SPACE 1\n*                             RED PLANE\nT04U12R $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12,PL=RED\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGWWWRRR,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n         SPACE 1\n*                             GREEN PLANE\nT04U12G $FSDOT 000000000,          START OF SYMBOL 1 X'50'             X\n               WWGRRRGWW,                                              X\n               0WWGRGWW0,                                              X\n               00WWGWW00,                                              X\n               000WWW000,                                              X\n               0000W0000,                                              X\n               000WWW000,                                              X\n               00WWGWW00,                                              X\n               0WWGRGWW0,                                              X\n               WWGRRRGWW,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12,PL=GREEN\n        $FSDOT 000000000,          START OF SYMBOL 2 X'51'             X\n               W0000000W,                                              X\n               WW00000WW,                                              X\n               GWW000WWG,                                              X\n               RGWW0WWGR,                                              X\n               RRGWWWGRR,                                              X\n               RGWW0WWGR,                                              X\n               GWW000WWG,                                              X\n               WW00000WW,                                              X\n               W0000000W,                                              X\n               000000000,                                              X\n               BBBWWWRRR,H=12\n        $FSDOT 000000000,          START OF SYMBOL 3 X'52'             X\n               YYYYYYYYY,                                              X\n               Y0000000Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0T0P0T0Y,                                              X\n               Y0T000T0Y,                                              X\n               Y0TTTTT0Y,                                              X\n               Y0000000Y,                                              X\n               YYYYYYYYY,                                              X\n               000000000,                                              X\n               GGGWWWRRR,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 4 X'53'             X\n               G00000000,                                              X\n               G0RRRRRRR,                                              X\n               G0R000000,                                              X\n               G0R0BBBBB,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 5 X'54'             X\n               00000000G,                                              X\n               RRRRRRR0G,                                              X\n               000000R0G,                                              X\n               BBBBB0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 6 X'55'             X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0BBBBB,                                              X\n               G0R000000,                                              X\n               G0RRRRRRR,                                              X\n               G00000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 7 X'56'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               BBBBB0R0G,                                              X\n               000000R0G,                                              X\n               RRRRRRR0G,                                              X\n               00000000G,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT GGGGGGGGG,          START OF SYMBOL 8 X'57'             X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,H=12\n        $FSDOT 0000B0R0G,          START OF SYMBOL 9 X'58'             X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,                                              X\n               0000B0R0G,H=12\n        $FSDOT 000000000,          START OF SYMBOL 10 X'59'            X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               000000000,                                              X\n               GGGGGGGGG,H=12\n        $FSDOT G0R0B0000,          START OF SYMBOL 11 X'5A'            X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,                                              X\n               G0R0B0000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 12 X'5B'            X\n               BBBBBBBBB,                                              X\n               BBBBBBBBB,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n        $FSDOT 000000000,          START OF SYMBOL 13 X'5C'            X\n               GGGGGGGGG,                                              X\n               GGGGGGGGG,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               WWWWWWWWW,                                              X\n               WWWWWWWWW,                                              X\n               000000000,                                              X\n               000000000,                                              X\n               RRRRRRRRR,                                              X\n               RRRRRRRRR,                                              X\n               000000000,H=12\n        PRINT  GEN\n         SPACE 2\n        PRINT  NOGEN\nTIODSECT DSECT\n        IEFTIOT1\n        PRINT  GEN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "T3270FS$": {"ttr": 18949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//T3270FS  JOB (........),'INSTALL  -T3270FS-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1000K,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                FSRTN     TXTPRINT                                 *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=T3270FS\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(FSRTN,PRINT)\n  ENTRY   T3270FS\n  NAME    T3270FS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WORM": {"ttr": 18951, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t\\x8f\\x00\\x92\\t\\x8f\\x14%\\x0c1\\x0c1\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-07T00:00:00", "modifydate": "1992-04-07T14:25:00", "lines": 3121, "newlines": 3121, "modlines": 0, "user": "SYSPAJA"}, "text": "WORM     TITLE '--- WORM - A PROGRAM FOR TSO 3270 TERMINALS ---'\nWORM     START 0\n         SPACE 1\n         ENTRY HALFTEST\n         ENTRY HALFWORM\n         ENTRY HW\n         ENTRY QUARTEST\n         ENTRY QUARTERW\n         ENTRY QW\n         ENTRY WORMTEST\n         SPACE 1\n* AUTHOR : WRITTEN OCTOBER 1986 BY GREG PRICE OF PRYCROFT SIX PTY LTD.\n* --------\n*\n* ORIGIN : EXTRACTED FROM TAPE CBT 91 MAR, FILE 134.\n* --------\n*\n* PURPOSE : FOR USE UNDER TSO ON 3270-FAMILY VDU IN FULLSCREEN MODE.\n* --------- WORM SUPPORTS ALL SCREEN SIZES.\n*\n* OBJECT : FOR THE WORM TO EAT THE NUMBERS APPEARING ON THE SCREEN\n* -------- WITHOUT COLLIDING WITH ITSELF OR THE BORDER AROUND THE\n*        SCREEN. WHEN A NUMBER IS EATEN (BY MOVING THE WORM'S HEAD\n*        (DENOTED BY A '@') TO THE NUMBER'S LOCATION) ANOTHER NUMBER\n*        WILL APPEAR AT A RANDOM VACANT LOCATION. THE VALUE OF THE\n*        EATEN NUMBER WILL BE ADDED TO THE SCORE AND THE WORM'S LENGTH\n*        WILL ALSO INCREASE BY THAT AMOUNT. COLLISIONS ARE DENOTED BY\n*        A '+' THEN A '*' ONE SECOND LATER, AND CAUSE THE WORM TO DIE\n*        DUE TO BRAIN DAMAGE CAUSED BY SHOCKING HEAD INJURIES.\n*\n* METHOD : ONCE THE WORM IS MOVING TEN (10) TGETS ARE DONE ONE-TENTH OF\n* -------- A SECOND APART. IF NO INPUT IS RECEIVED THE WORM IS MOVED\n*        ONE LOCATION IN THE CURRENT DIRECTION. WHEN WORMOMATIC IS\n*        ACTIVE ONLY ONE (1) TGET IS DONE WHEN IN BURST MODE, OR TWO\n*        (2) TGETS ONE-TENTH OF A SECOND APART OTHERWISE. THE CURRENT\n*        MEANING OF PF1 (DISPLAYED IN THE TITLE LINE) AND THE MOVE\n*        SPEED INDICATE THE CURRENT AUTOMATIC/MANUAL/BURST MODE STATUS.\n*\n*        AN OPTIONAL PROGRAM PARAMETER OR TSO COMMAND OPERAND\n*        (DEPENDING UPON THE METHOD OF INVOCATION) OF ONE OR TWO\n*        DECIMAL DIGITS MAY BE SUPPLIED. THIS SPECIFIES A TARGET UPPER\n*        LIMIT TO TASK-TYPE CPU TIME CONSUMPTION BY WORMOMATIC\n*        EXPRESSED IN TERMS OF PERCENTAGE OF ELAPSED TIME. THE DEFAULT\n*        OF ZERO MEANS THAT WORMOMATIC WILL NOT TRY TO LIMIT ITS CPU\n*        SERVICE ABSORPTION RATE.\n         EJECT\n* INPUT :      PA KEYS - REFRESH THE SCREEN IMAGE\n* -------      PF 1/13 - WORMOMATIC - AUTOMATIC WORM PILOT SPEED\n*              PF 2/14 - ACTIVATE/DEACTIVATE DEBUG MODE WHEN\n*                       |BURST MODE SWITCH IS ON (*NOW DISABLED*) |\n*                       |             -OR-                        |\n*                      - ACTIVATE/DEACTIVATE REVERSE VIDEO MODE\n*                       |WHEN BURST MODE SWITCH IS OFF (*IGNORE*) |\n*              PF 3/15 - END - END WITH SCORING\n*              PF 4/16 - TOGGLE GRAPHIC \"CHARACTER SETS\"\n*              PF 5/17 - ACTIVATE/DEACTIVATE \"BURST\" MODE\n*              PF 6/18 - ACTIVATE/DEACTIVATE GRAPHIC CHARACTER MODE\n*              PF 7/19 - CHANGE THE CURRENT DIRECTION TO UP AND MAKE\n*                        A MOVE\n*              PF 8/20 - CHANGE THE CURRENT DIRECTION TO DOWN AND MAKE\n*                        A MOVE\n*              PF 9/21 - MOVE UNCONDITIONALLY (UNLESS A NUMBER IS\n*                        ENCOUNTERED) EIGHT (8) LOCATIONS IN THE\n*                        CURRENT DIRECTION\n*              PF10/22 - CHANGE THE CURRENT DIRECTION TO RIGHT AND MAKE\n*                        A MOVE\n*              PF11/23 - CHANGE THE CURRENT DIRECTION TO LEFT AND MAKE\n*                        A MOVE\n*              PF12/24 - CANCEL - END WITHOUT SCORING\n*\n*        ENTER CAUSES A MOVE IN THE CURRENT DIRECTION TO BE MADE\n*        IMMEDIATELY. PA KEYS AND PF KEYS 1/13, 2/14, 4/16, 5/17 AND\n*        6/18 ARE THE ONLY ONES WHICH WILL NOT STOP WORMOMATIC WHILE\n*        IT IS ACTIVE. ATTENTION INTERRUPT (PA1) STOPS WORMOMATIC.\n         EJECT\n* NOTES : IF THE FILE \"ISPTABL\" (CAN BE CHANGED TO ANY PDS DD WHICH\n* ------- EFFECTIVELY HAS UACC(UPDATE)) IS ALLOCATED THEN THE HIGHEST\n*        SCORE IS KEPT AS USER DATA (PFD (NOT SPF) STATS) OF MEMBER\n*        EWSBTA##  (REVIEW WILL SHOW PFD AND SPF STATS) WHERE ## IS THE\n*        NUMBER OF LINES THAT THE SCREEN HAS.\n*        FILE NAME PFDATTRS IS USED UNDER OSIV/F4.\n*\n*        IF THE TERMINAL'S VTAM QUERY BIT IS ON THEN ARROWS ARE USED\n*        FOR THE WORM INSTEAD OF LOWER CASE 'O'S (THIS ALSO MEANS\n*        \"UNWINDING\" INFORMATION IS AVAILABLE TO THE PLAYER), THE '@'\n*        FOR THE HEAD IS REPLACED BY A BLOB, AND THE TARGET NUMBER WILL\n*        BE DISPLAYED IN REVERSE VIDEO. AN ALTERNATE GRAPHIC DISPLAY\n*        MODE IS AVAILABLE WHICH SHOWS THE WORM AS A CONTINUOUS LINE\n*        AND THE HEAD AS A BLOCK. LINE MODE IS SIMILATED IN NON-GRAPHIC\n*        MODE WITH DASHES ETC. THE INITIAL WORM IS WHITE, BUT EACH\n*        WORM FOOD TARGET IS ARTIFICIALLY COLOURED AT RANDOM. NO\n*        PRESERVATIVES ADDED. THE WORM WILL GRADUALLY TAKE ON THE\n*        COLOUR OF THE MOST RECENTLY CONSUMED FOOD. NO TWO CONSECUTIVE\n*        FOOD TARGETS WILL HAVE THE SAME COLOUR. 7-COLOUR DISPLAYS ARE\n*        ONLY TRANSMITTED IN \"GRAPHIC\" MODE. PF6/18 IS AVAILABLE TO\n*        ACTIVATE/DEACTIVATE \"GRAPHIC\" MODE, WHICH IS INITIALLY ON ONLY\n*        IF THE VTAM QUERY BIT FOR THE TSO TERMINAL IS ON AND THE QUERY\n*        INDICATED 7-COLOUR SUPPORT. IF THE QUERY DOES NOT INDICATE\n*        GRAPHICS ESCAPE SUPPORT THEN APL/GRAPHIC CHARACTERS WILL NOT\n*        BE USED EVEN IF SEVEN COLOURS ARE. REVERSE VIDEO MODE CAN BE\n*        ACTIVATED AND DEACTIVATED BY PF2/14 INDEPENDENTLY OF GRAPHIC\n*        MODE (PF2/14 USED TO ACTIVATE DEBUG MODE WHEN IN BURST MODE,\n*        BUT THIS HAS NOW BEEN DISABLED).\n*\n*        (IT REALLY DOESN'T LOOK MUCH LIKE A WORM IN \"GRAPHIC\" MODE.\n*        NORMAL MODE LOOKS BETTER ON A 3180 ANYWAY, AS WELL AS REDUCING\n*        DATA TRAFFIC. NOTE THAT \"GRAPHIC\" INFORMATION IS NOT SENT TO\n*        THE TERMINAL FOR SCREEN RESHOW/REFRESH)\n*\n*        TERMINAL I/O CAN BE SPEEDED UP WITH THE USE OF \"BURST\" MODE.\n*        INSTEAD OF ONE TPUT PER MOVE A DATA STREAM OF OVER 3K CAN BE\n*        ACCUMULATED AND SENT IN ONE TPUT. EATING A NUMBER ALSO\n*        TRIGGERS A TPUT. \"BURST\" MODE IS ONLY USED IN AUTOMATIC MODE.\n         EJECT\n*        IF INVOKED AS 'HALFWORM' OR 'HW' THEN ONLY THE TOP HALF\n*        (INTEGER ARITHMETIC) OF THE SCREEN WILL BE USED. NATURALLY A\n*        DIFFERENT SCOREBOARD MEMBER WILL BE USED. SIMILARLY WITH\n*        'QUARTERW' AND 'QW'. IF INVOKED AS 'WORMTEST' (FULL-SCREEN),\n*        'HALFTEST' (HALF-SCREEN) OR 'QUARTEST' (QUARTER-SCREEN) THEN\n*        FOOD-GENERATION TEST MODE WILL BE ACTIVE AND A WORM WILL NOT\n*        BE PRODUCED. SPEED AND COLOUR MODES ARE CONTROLLED AS\n*        DESCRIBED EARLIER. INITIALLY THE SCREEN WILL BE FILLED UP WITH\n*        FOOD TARGETS, BUT THEN PF4/16 WILL REQUEST GENERATION\n*        CONTINUATION WITHOUT REGARD TO PREVIOUS OCCUPANCY OF THE\n*        SELECTED POSITION. IF THE SCREEN IS CLEARED AT THIS STAGE,\n*        RANDOM NUMBER GENERATOR PECULIARITIES SUCH AS TIMER UNIT\n*        GRANULARITY (LOW-ORDER BIT ALWAYS OFF PERHAPS) MAY BECOME\n*        APPARENT. PF3/15 THEN PF4/16 MAY BE DONE ANYTIME.\n*\n*        THE ABOVE HAS BEEN CHANGED SUCH THAT PF4/16 IS REPLACED BY\n*        PF1-8/13-20. PF1-7/13-19 SPECIFY THE COLOUR CODE TO BE USED\n*        UNCONDITIONALLY. PF8/20 REACTIVATES RANDOM COLOUR GENERATION.\n*        REMEMBER THAT THIS FUNCTION IS ONLY AVAILABLE AT END-OF-TEST\n*        VIA PF3/15 OR VIA FULLY-COVERED SCREEN.\n*\n* REMARKS : \"WORM\" REQUIRES AMODE=24 AND RMODE=24.\n* --------- \"WORM\" IS NOT RE-ENTRANT NOR SERIALLY REUSEABLE.\n*           \"WORM\" MUST MUST BE APF AUTHORIZED IF THE USER'S TPUT AND\n*                  TRANSACTION COUNTERS ARE TO BE DECREMENTED. IN ANY\n*                  EVENT, THIS DECREMENTING WILL ONLY BE PERFORMED ON\n*                  MVS (MVS/370 OR MVS/XA) SYSTEMS.\n*        OSIV/F4 NOTE :\n*        TGETS/TPUTS MAKE TASKS NON-DISPATCHABLE UNDER F4. IN MVS,\n*        TASKS ARE PUT INTO A WAIT STATE. HENCE, TSS USERS DON'T\n*        TIMEOUT LIKE TSO USERS (S522 ABEND). ALSO, TGET NOWAIT MACROS\n*        STOP THE TCBS UNTIL A TSS TERMINAL KEYBOARD ATTENTION OCCURS.\n*        THEREFORE, WORM DOES NOT \"TICK OVER\" UNDER F4. SO, NO TGETS\n*        ARE ISSUED WHEN WORMOMATIC IS ACTIVE UNDER F4. TO STOP\n*        WORMOMATIC ON TSS ATTN/PA1 IS REQUIRED. MVS WAS LIKE THIS TOO,\n*        ORIGINALLY, WASN'T IT? (PRE-3.7? SVS?)\n         EJECT\n         GBLC  &SYSSPLV\n         SPACE 1\n&SYSSPLV SETC  '1'                 MVS/370 COMPATIBLE PROGRAM\n         SPACE 1\n        $DEFREG\n         EJECT\n*------- INITIALIZATION.\n         SPACE 1\nWORMTEST CNOP  0,8                 FULL-SCREEN RANDOM GENERATOR TEST\nHALFTEST CNOP  0,8                 HALF-SCREEN RANDOM GENERATOR TEST\nHALFWORM CNOP  0,8                 HALF-SCREEN VERSION ENTRY POINT\nHW       CNOP  0,8                 SHORT FORM (ALIAS) OF HALFWORM\nQUARTEST CNOP  0,8                 QUARTER-SCREEN RANDOM GENERATOR TEST\nQUARTERW CNOP  0,8                 QUARTER-SCREEN VERSION ENTRY POINT\nQW       CNOP  0,8                 SHORT FORM (ALIAS) OF QUARTERW\n        $XENT  BASE=(R11,R12,R7),LV=WORMCMNL,TYPE=RENT\n         USING WORMCMN,R13\n         LR    R2,R1               SAVE PARAMETER LIST ADDRESS\n        GTSIZE ,\n         LTR   R0,R0               ZERO LINES?\n         BZ    NOTVDU              YES, PROBABLY ON A TTY\n         CH    R0,=H'24'           LESS THAN TWENTY-FOUR LINES?\n         BL    WACKYVDU            YES, I DON'T BELIEVE IT\n         CH    R0,=H'99'           MORE THAN NINETY-NINE LINES?\n         BH    WACKYVDU            YES, SCOREBOARD NAME WON'T WORK\n         CH    R1,=H'40'           LESS THAN FORTY COLUMNS?\n         BL    WACKYVDU            YES, CAN'T BE AN HONEST-TO-GOD VDU\n         LR    R8,R0               SAVE LINES ON SCREEN\n         LR    R9,R1               SAVE COLUMNS ON SCREEN\n         MVI   WORMFLAG,0\n         MVI   WORMFLG2,0          OR 'XHST' FOR OTHER LOOK-AHEAD MODE\n         MVI   THISCOLR,0          START WITH RANDOM COLOUR SELECTION\n         MVI   GRAFLAGS,COLR+HLIT\n*- - - - LET PF2/14 AND PF6/18 TRY COLOUR AND HIGHLIGHTING\n*        IF NO QUERY DONE.\n         L     R1,CVTPTR           POINT TO THE CVT\n         USING CVT,R1\n         MVC   OSBITS,CVTDCB       OPERATING SYSTEM FLAGS FOR LATER\n         DROP  R1\n         USING PSA,R0\n         L     R1,PSATOLD          POINT TO THE CURRENT TCB\n         DROP  R0\n         USING TCB,R1\n         L     R1,TCBRBP           POINT TO THE ACTIVE RB\n         DROP  R1\n         USING RBBASIC,R1\n         L     R1,RBCDE            POINT TO THE ACTIVE CDE\n         DROP  R1\n         USING CDENTRY,R1\n         CLC   CDNAME+4(4),=C'TEST' FOOD GENERATION TEST?\n         BNE   NOTATEST            NO, PLAY THE GAME\n         OI    WORMFLG2,TEST       YES, TURN ON THE TEST BIT\nNOTATEST CLI   CDNAME,C'H'         INVOKED AS HALFWORM?\n         BE    HALFSIZE            NO, ONLY USE HALF OF THE LINES\n         CLI   CDNAME,C'Q'         INVOKED AS QUARTERW?\n         BNE   HAVESIZE            NO, USE ALL OF THE SCREEN\n         DROP  R1\n         SRL   R8,1                HALF OF THE NUMBER OF LINES\nHALFSIZE SRL   R8,1                HALF OF THE NUMBER OF LINES (AGAIN)\n         LA    R1,CLEARALL         POINT TO CLEAR SCREEN DATA STREAM\n         LA    R0,L'CLEARALL       GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n         TPUT  (1),(0),R           CLEAR THE SCREEN\nHAVESIZE STM   R8,R9,LINES         STORE SCREEN DIMENSIONS\n         CVD   R8,WORK             GET THE DECIMAL NUMBER OF LINES\n         OI    WORK+7,X'0F'          TO SUFFIX THE MEMBER NAME\n         UNPK  BORDNAME+6(2),WORK+6(2)\n         SH    R8,=H'2'            TWO BORDERS\n         ST    R8,MOVLINES         GET HOW MANY LINES TO MOVE\n         SH    R9,=H'2'            TWO BORDERS\n         ST    R9,MOVECOLS         GET HOW MANY COLUMNS TO MOVE\n         MVI   RTORLFT,X'96'       SAY WORM LAST WENT RIGHT\n         MVI   UPORDN,X'A4'        SAY WORM LAST WENT UP (ARBITRARY)\n         XC    ZEROAREA(ZEROLEN),ZEROAREA ZERO A FEW VARIABLES\n         MVC   DELAY,TEN           INITIALIZE STIMER DELAY\n         TM    0(R2),X'80'         INVOKED AS PROGRAM OR TSO COMMAND?\n         BO    PGMPARM             PROGRAM\n         L     R2,0(,R2)           CP SO POINT TO THE COMMAND BUFFER\n         LH    R3,2(,R2)           GET LENGTH OF PARSING DONE\n         LA    R3,4(,R3)           GET OFFSET INTO COMMAND BUFFER\n         LA    R1,0(R3,R2)         POINT TO FIRST NON-PARSED CHARACTER\n         SH    R3,0(,R2)           SUBTRACT COMMAND BUFFER LENGTH\n         BNP   TERMCHK             OPERAND LENGTH ? FORGET IT\n         B     INITPARM            OPERAND SPECIFIED SO USE IT\nPGMPARM  L     R2,0(,R2)           POINT TO PROGRAM PARAMETER\n         CLC   0(2,R2),=XL2'0'     ZERO PROGRAM PARAMETER LENGTH?\n         BE    TERMCHK             YES, SO NO INITIAL COMMAND\n         LA    R1,2(,R2)           NO, POINT TO START OF PARAMETER TEXT\n         LH    R3,0(,R2)           LOAD PARAMETER TEXT LENGTH\n         LTR   R3,R3               OPERAND LENGTH ?\n         BNP   TERMCHK             FORGET IT\nINITPARM LA    R0,2                GET MAXIMUM PARAMETER LENGTH\n         CR    R3,R0               IS IT TOO LONG?\n         BNH   PARMOKAY            NO\n         LR    R3,R0               YES, REDUCE TO MAXIMUM ALLOWED\nPARMOKAY XR    R0,R0               ZERO ACCUMULATOR\n         XC    WORK,WORK           ZERO WORK AREA\nPARMLOOP CLI   0(R1),C'0'          NUMERIC PARAMETER?\n         BL    PARMDONE            NO\n         CLI   0(R1),C'9'          NUMERIC PARAMETER?\n         BH    PARMDONE            NO\n         MH    R0,TEN+2            PROMOTE PREVIOUS DIGIT\n         MVC   WORK+3(1),0(R1)     COPY DIGIT\n         NI    WORK+3,X'0F'        CONVERT TO BINARY\n         A     R0,WORK             ADD TO ACCUMULATOR\n         LA    R1,1(,R1)           POINT TO NEXT PARAMETER BYTE\n         BCT   R3,PARMLOOP         PROCESS IT\nPARMDONE ST    R0,TGTPCNT          SAVE TARGET TCB TIME PERCENTAGE\nTERMCHK GTTERM PRMSZE=WASTE,ATTRIB=TERMATTR GET TERMINAL ATTRIBUTES\n         TM    TERMATTR+3,X'01'    QUERY BIT ON?\n         BZ    NOTGRAFC            NO, CAN'T DO QUERY\n         LA    R1,RESETAID         YES, RESET THE TERMINAL AID AND\n         LA    R0,L'RESETAID         WAIT TILL THIS IS DONE\n         ICM   R1,B'1000',=X'0B'       BEFORE PROCEEDING\n        TPUT   (1),(0),R           TPUT FULLSCR,WAIT,HOLD\n         MVI   GRAFLAGS,0          ALL GRAPHIC FEATURES TO BE VERIFIED\n        TPG    QUERY,L'QUERY,NOEDIT,WAIT\nQUERYGET LA    R1,BUFFER           TEMPORARY TGET BUFFER FOR RESPONSE\n         LA    R0,1024               FROM READ PARTITION\n         ICM   R1,B'1000',TGETFLAG FLAGS FOR TGET ASIS,WAIT\n        TGET   (1),(0),R           TGET ASIS,WAIT\n         CLI   BUFFER,X'88'        QUERY RESPONSE AID?\n         BNE   NOTGRAFC            UNEXPECTED RESPONSE, FORGET QUERY\n         XR    R0,R0               CLEAR FOR INSERTS\n         LA    R15,BUFFER          POINT TO THE AID\nNOTSBFLD LA    R15,1(,R15)         IGNORE A BYTE\n         BCT   R1,QUERYPRS         DECREMENT THE LENGTH\n         B     NOTGRAFC            JUST IN CASE THAT WAS THE LAST BYTE\nQUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?\n         BNE   NOTSBFLD            NO, SKIP A BYTE\n         TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?\n         BNO   NOTSBFLD            NO, SKIP A BYTE\n         CLI   0(R15),0            LENGTH LESS THAN 256?\n         BNE   NOTSBFLD            NO, SKIP A BYTE\n         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?\n         BE    QUERYCLR            YES, PROCESS COLOUR SUPPORT\n         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?\n         BE    QUERYHLT            YES, PROCESS HIGHLIGHTING SUPPORT\n         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?\n         BE    QUERYSYM            YES, PROCESS SYMBOL SETS SUPPORT\n         CLI   3(R15),X'93'        QUERY REPLY PC ATTACHMENT ID?\n         BE    QUERYPCA            YES, PROCESS PC/PS2 3270 EMULATION\nNXTSBFLD ICM   R0,B'0011',0(R15)   NO, LOAD SUB-FIELD LENGTH\n         SR    R1,R0               SUBTRACT IT FROM TGET DATA LENGTH\n         BZ    NOTGRAFC            END OF QUERY, INITIALIZATION DONE\n         BM    QUERYGET            QUERY CONTINUES IN NEXT BLOCK\n         AR    R15,R0              POINT TO NEXT SUB-FIELD\n         B     QUERYPRS            EXAMINE IT\nQUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?\n         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT\n         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?\n         BNE   NXTSBFLD            NO, DON'T RESTORE 7-COLOUR MODE\n         OI    WORMFLAG,GRAF       YES, ENABLE WORM GRAPHIC MODE\n         OI    GRAFLAGS,COLR       FLAG COLOUR SUPPORT CERTAINTY\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED\nQUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?\n         BL    NXTSBFLD            NO, SO DO NOT FLAG IT\n         CLC   7(6,R15),=CL6'112244' BLINK, REVERSE, UNDERSCORE OK?\n         BNE   NXTSBFLD            NO\n         OI    GRAFLAGS,HLIT       YES, FLAG HILIGHTING SUPPORT\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED\nQUERYSYM OI    GRAFLAGS,SYMSET     SYMBOL SETS SUB-FIELD RETURNED\n         TM    4(R15),X'80'        IS GRAPHICS ESCAPE SUPPORTED?\n         BZ    NXTSBFLD            NO, SO DO NOT FLAG IT\n         OI    GRAFLAGS,GEOK       YES, FLAG GRAPHICS ESCAPE SUPPORT\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED\nQUERYPCA OI    GRAFLAGS,PCAF       FLAG PC ATTACHMENT FACILITY TERMINAL\n         B     NXTSBFLD            EXTENDED CAPABILITY NOW FLAGGED\nNOTGRAFC LA    R0,X'28'            ASSUME IBM SET ATTRIBUTE TO BE USED\n         CLI   OSBITS,CVT8AOS2     OSIV/F4? (HOPE NO-ONE RUNS SVS)\n         BNE   HAVESETA            NO, ASSUME NOT FACOM VDU ON MVS\n         TM    GRAFLAGS,SYMSET+PCAF SYMBOL SETS OR PC SUB-FIELD?\n         BO    HAVESETA            YES, CAN'T BE FACOM HARDWARE\n         LA    R0,X'0E'            USE FACOM SET ATTRIBUTE ORDER CODE\nHAVESETA STC   R0,CMSGHDR          PUT CORRECT SA IN DATA STREAMS\n         STC   R0,REVERSE\n         STC   R0,BLUE\n         STC   R0,RED\n         STC   R0,PINK\n         STC   R0,GREEN\n         STC   R0,TURQ\n         STC   R0,YELLOW\n         STC   R0,WHITE\n         STC   R0,CMSGTRLR\n         STC   R0,UNDERSCR\n         STC   R0,NOHILITE\n         STC   R0,BLINKING\n         STC   R0,RESETSA\n         MVI   DTLSTART,C'X'       TOP LEFT CORNER OF BORDER\n         LA    R1,DTLSTART\n         L     R3,COLUMNS\n         EX    R3,CHAREPET         REPEAT X'S TO MAKE TOP BORDER\n         MVC   BUFFER(HDRLEN),BUFHDR\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BZ    TITLEOK             NO\n         MVC   BUFFER+SCORTITL(12),=C'FOOD-COVERAG'\nTITLEOK  M     R2,MOVLINES         COLS TIMES NUMBER OF BLANK LINES\n         ST    R3,ELIGIBLS         SAVE (VERT BORDERS WEIGHTED)\n         L     R2,MOVLINES         GET NUMBER OF BLANK LINES\n         L     R3,MOVECOLS         GET NUMBER OF BLANKS BETWEEN BORDERS\n         BCTR  R3,0                LESS 1 FOR EXECUTE\n         A     R1,COLUMNS\n         LA    R1,1(,R1)           POINT TO FIRST BLANK INSIDE BORDER\nBLNKLOOP MVI   0(R1),C' '\n         EX    R3,CHAREPET         BLANK OUT DETAIL LINE\n         ALR   R1,R3\n         MVC   1(2,R1),=C'XX'      BORDER\n         LA    R1,3(,R1)           POINT PAST BORDER\n         BCT   R2,BLNKLOOP         PROCESS NEXT LINE\n         BCTR  R1,0                POINT TO BOTTOM LEFT CORNER\n         ST    R1,LASTLOOK\n         LA    R3,2(,R3)           GET COLUMNS MINUS ONE\n         EX    R3,CHAREPET         COMPLETE THE BORDER\n         MVC   1(ACRNMLEN,R1),ACRNMMSG\n         LA    R2,ACRNMLEN+1(,R1)  SAVE BASE ADDRESS FOR DSPMDMSG\n         ST    R2,LIFEADDR         SAVE ADDR OF LIFETIME COUNTDOWN - 1\n         LA    R1,1(R3,R1)         POINT PAST BOTTOM RIGHT CORNER\n         MVI   0(R1),X'13'         MOVE THE CURSOR OUT OF THE WAY\n         LA    R1,1(,R1)           POINT PAST INSERT CURSOR\n         LA    R0,BUFFER           POINT TO WCC\n         SLR   R1,R0               GET SCREEN IMAGE SIZE\n         ST    R1,IMAGESIZ         STORE IT FOR LATER USE\n         MVC   15(DSPMDLEN,R2),DSPMDMSG\n         LA    R1,DTLSTART-1       GET CONCEPTUAL SCREEN IMAGE ORIGIN\n         SLR   R2,R1               GET OFFSET OF LIFETIME COUNTDOWN\n         STH   R2,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR LIFETIME BUFFER ADDR\n         STH   R0,LIFEBFAD\n         L     R1,COLUMNS\n         M     R0,LINES            GET THE NUMBER OF SCREEN LOCATIONS\n         LA    R1,DTLSTART+17(R1)  POINT PAST SCREEN IMAGE BUFFER\n         SRL   R1,3\n         SLL   R1,3                ALIGN ON DOUBLEWORD BOUNDARY\n         ST    R1,LOOKAHED         SAVE LOOK-AHEAD WORK AREA ADDRESS\n        STFSMODE ON,INITIAL=YES    ACTIVATE VTAM FULL SCREEN MODE\n         LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n         TPUT  (1),(0),R           DISPLAY ENTIRE SCREEN IMAGE\n         MVI   UPDTSTRM,X'40'      NULL WCC\n         TM    WORMFLG2,TEST       IN TEST MODE?\n         BO    TESTINIT            YES, DON'T MAKE A WORM\n         MVI   UPDTSTRM+1,X'11'    FIRST ORDER IS SBA\n         L     R1,LINES\n         SRL   R1,1\n         BCTR  R1,0\n         BCTR  R1,0                GET INITIAL LINE NUMBER\n         M     R0,COLUMNS\n         LA    R1,10(,R1)\n         STH   R1,TOLOC            TAIL AT SCREEN LINE 11 COLUMN 11\n         STH   R1,TAILLOC          SAVE TAIL LOCATION\n         LA    R1,DTLSTART(R1)     CORRESPONDING POS. IN BUFFER\n         ST    R1,TAILADDR         SAVE TAIL ADDRESS\n         MVI   0(R1),X'96'         TAIL LINKS TO THE RIGHT\n         MVC   1(6,R1),0(R1)       FILL IN INITIAL WORM\n         MVI   7(R1),C'@'          WORM'S HEAD\n         LA    R1,7(,R1)           POINT TO WORM'S HEAD\n         ST    R1,HEADADDR         SAVE HEAD ADDRESS\n         LH    R1,TAILLOC          GET TAIL LOCATION\n         LA    R1,7(,R1)           POINT TO WORM'S HEAD\n         STH   R1,HEADLOC          SAVE HEAD LOCATION\n         BAL   R14,CALCPOSI        GET CODE FOR LINE 11 COLUMN 11\n         STCM  R0,B'0011',UPDTSTRM+2\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    NORMWORM            NO\n         MVC   UPDTSTRM+4(3),WHITE\n         MVI   UPDTSTRM+7,X'3C'    REPEAT TO ADDRESS\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR LINE 11 COLUMN 18\n         STCM  R0,B'0011',UPDTSTRM+8\n         MVI   UPDTSTRM+10,X'96'   JUST IN CASE...\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    NOGEWORM            NO, SEND STANDARD CHARACTERS\n         MVC   UPDTSTRM+10(4),=X'088F08A3'\n         MVC   UPDTSTRM+14(4),STRMTRLR ADD TRAILER FOOTPRINT\n         LA    R0,18               GET DATA STREAM LENGTH\n         B     SHOWWORM\nNORMWORM MVI   UPDTSTRM+4,X'96'    WORM'S TAIL\n         MVC   UPDTSTRM+5(6),UPDTSTRM+4 MIDDLE\nNOGEWORM MVI   UPDTSTRM+11,C'@'    WORM'S HEAD\n         MVC   UPDTSTRM+12(4),STRMTRLR ADD TRAILER FOOTPRINT\n         LA    R0,16               GET DATA STREAM LENGTH\nSHOWWORM LA    R1,UPDTSTRM         POINT TO WORM DATA STREAM START\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n        TPUT   (1),(0),R           DISPLAY INITIAL WORM\nTESTINIT LA    R0,1                RESET ACCUMULATED\n         STH   R0,TPUTLEN          UPDATE DATA STREAM\n         EJECT\n*------- GENERATE A NEW TARGET.\n         SPACE 1\nNWTARGT TIME   TU                  GET \"RANDOM NUMBER\" FOR TARGET DTLS\n         TM    WORMFLAG,NEXT       IS NEXT TARGET NEEDED AFTER A MEAL?\n         BZ    DONENEXT            NO, MUST BE IN FOOD GEN TEST MODE\n         NI    WORMFLAG,255-NEXT   RESET NEXT-TARGET-NEEDED FLAG\n         MVI   STACKER+3,0         RESET STACKED MOVE COUNTER\n         L     R2,MEALCNTR         GET THE NUMBER OF WORM MEALS SO FAR\n         LA    R2,1(,R2)           INCREMENT IT\n         ST    R2,MEALCNTR         (NOT COUNTER MEAL) AND SAVE IT AGAIN\n         L     R2,EATMOVES         GET MOVE COUNT FOR PREVIOUS MEALS\n         A     R2,THISTREK         ADD MOVES FOR THIS MEAL\n         ST    R2,EATMOVES\n         XR    R2,R2\n         ST    R2,THISTREK         RESET MOVES-SINCE-LAST-MEAL COUNTER\nDONENEXT L     R2,FOODCNTR         GET FOOD GENERATION COUNTER\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    SHOWFOOD            YES, SO THERE IS NO REAL SCORE\n         LH    R2,SCORE            GET THE SCORE\nSHOWFOOD CVD   R2,WORK\n         OI    WORK+7,X'0F'\n         UNPK  BUFFER+SCORPOSI(4),WORK+5(3)\n         LH    R8,TPUTLEN          DATA STREAM LENGTH SO FAR\n         LA    R9,UPDTSTRM(R8)     CURRENT BUFFER POINTER\n         MVC   0(3,R9),=X'114050'  SBA, LINE 1 COLUMN 17\n         LA    R8,3(,R8)           ADJUST DATA STREAM LENGTH COUNTER\n         LA    R9,3(,R9)           ADJUST BUFFER POINTER\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    GOTWHITE            NO\n         MVC   0(3,R9),WHITE       SA,COLOUR\n         LA    R8,3(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,3(,R9)           ADJUST BUFFER POINTER\nGOTWHITE MVC   0(4,R9),BUFFER+SCORPOSI\n         LA    R8,4(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,4(,R9)           ADJUST BUFFER POINTER\n         MVC   WORMCOLR,COLRCHAR   TAKE ON COLOUR OF LATEST FOOD\n         XR    R2,R2\n         ICM   R2,B'0001',THISCOLR USER SPECIFIED COLOUR?\n         BZ    GETCOLOR            NO, MAKE RANDOM SELECTION\n         STC   R2,COLRCHAR         YES, USE IT - ONLY IN TEST MODE\n         OI    COLRCHAR,X'F0'      CONVERT TO 3270 COLOUR CODE\n         IC    R2,COLRCHAR         GET COLOUR FOR LATER\n         B     COLORNEW            CONTINUE\nGETCOLOR XR    R2,R2               CLEAR FOR DIVIDE\n         LR    R3,R0               CURRENT TIMER UNITS FOR RANDOM NO\n         LA    R6,7                DIVIDE TIMER UNITS BY SEVEN AND\n         DR    R2,R6               CONVERT 0 TO 6 REMAINDER TO\n         SR    R6,R2               A 7 TO 1 NUMBER\n         STC   R6,COLRCHAR         STORE NUMBER\n         OI    COLRCHAR,X'F0'      CONVERT TO 3270 COLOUR CODE\n         IC    R2,COLRCHAR         GET COLOUR FOR LATER\n         CLM   R2,B'0001',WORMCOLR DID THE COLOUR CHANGE?\n         BNE   COLORNEW            YES\n         CLI   COLRCHAR,X'F7'      NO, IS IT WHITE?\n         BL    COLROKAY            NO\n         LA    R2,X'F0'            YES, RESET COLOUR\nCOLROKAY LA    R2,1(,R2)           INCREMENT COLOUR\n         STC   R2,COLRCHAR         SAVE NEXT COLOUR\nCOLORNEW TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    GOTCOLOR            NO\n         MVC   0(2,R9),WHITE       SA,COLOUR\n         STC   R2,2(,R9)           USE LATEST COLOUR\n         MVC   3(3,R9),REVERSE     SA,HILITE,REVERSE\n         LA    R8,6(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,6(,R9)           ADJUST BUFFER POINTER\nGOTCOLOR LA    R3,X'F1'\n         SR    R2,R3               CONVERT COLOUR CODE TO 0 TO 6\n         SLL   R2,1                MULTIPLY BY TWO FOR HALFWORD INDEX\n         LA    R3,COLOURS(R2)      POINT TO COUNTER OF CHOSEN COLOUR\n         LH    R2,0(,R3)\n         LA    R2,1(,R2)           INCREMENT THE COUNTER OF THIS COLOUR\n         STH   R2,0(,R3)           - EVEN IF COLOURS ARE NOT USED\n         XR    R2,R2               CLEAR FOR DIVIDE\n         LR    R3,R0               CURRENT TIMER UNITS FOR RANDOM NO\n         D     R2,ELIGIBLS         DIVIDE BY # ELIGIBLES + VERT BORDERS\n         LA    R4,DTLSTART\n         AL    R4,COLUMNS          FIRST BUFFER LINE AFTER BORDER\n         NI    WORMFLG2,255-SSSS   OFF START-SCREEN-SPACE-SCAN FLAG\nGETEMPTY LA    R3,0(R2,R4)         POINT TO THE SELECTED BUFFER LOC.\n         CL    R3,LASTLOOK         GONE PAST BOTTOM RIGHT CORNER?\n         BL    LOOKOKAY            NO, PROCEED AS PLANNED\n         XR    R2,R2               START AGAIN FROM TOP LEFT CORNER\n         TM    WORMFLG2,SSSS       DONE A WHOLE SCAN OF THE SCREEN?\n         BO    AMAZING             YES, AVOID INFINITE LOOP BY ENDING\n         OI    WORMFLG2,SSSS       TURN ON START-SCREEN-SPACE-SCAN FLAG\n         B     GETEMPTY            WRAP-AROUND TO START OF SCREEN IMAGE\nLOOKOKAY CLI   0(R3),C' '          IS IT EMPTY?\nTST4EVER BE    GOTEMPTY            YES\n         LA    R2,1(,R2)           NO, TRY NEXT ONE\n         B     GETEMPTY\n         SPACE 1\nAMAZING  MVC   BUFFER+TITLPOSI(56),AMAZEMSG\n         LA    R1,BUFFER           AMAZING! NOWHERE TO PUT THE NUMBER\n         LA    R0,TITLPOSI+56\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n        TPUT   (1),(0),R\n        STIMER WAIT,BINTVL==F'500' WAIT 5 SECONDS\n         B     END                 FORCED TO END THE GAME\n         SPACE 1\nGOTEMPTY L     R5,COLUMNS          ADJUST FOR TOP BORDER/INFO LINE\n         ALR   R5,R2\n         STH   R5,TOLOC\n         STH   R5,NUMBRLOC         SAVE LOCATION OF NUMBER\n         XR    R4,R4               CLEAR FOR DIVIDE\n         LR    R5,R0               USE CURRENT TIMR UNTS FOR RANDOM NO.\n         LA    R6,9                DIVIDE TIMER UNITS BY NINE AND\n         DR    R4,R6               CONVERT 0 TO 8 REMAINDER TO\n         SR    R6,R4               A 9 TO 1 NUMBER\n         MVI   0(R9),X'11'\n         STC   R6,3(,R9)           PUT IT IN DATA STREAM\n         OI    3(R9),X'F0'         MAKE PRINTABLE NUMERIC CHARACTER\n         MVC   0(1,R3),3(R9)       UPDATE INCORE SCREEN IMAGE \"COPY\"\n         BAL   R14,CALCPOSI        GET CODE FOR TARGET LOCATION\n         STCM  R0,B'0011',1(R9)\n         LA    R8,4(,R8)           FINAL LENGTH OF DATA STREAM\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         A     R6,FOODVALU         ACCUMULATE FOOD VALUE\n         ST    R6,FOODVALU\n         LA    R0,1\n         A     R0,FOODCNTR         INCREMENT FOOD GENERATION COUNTER\n         ST    R0,FOODCNTR\n         B     FORTUNE             ENSURE THE SCREEN IS UPDATED\n         EJECT\n*------- FULLSCREEN TERMINAL I/O.\n         SPACE 1\nTPUTSOME ICM   R5,B'1111',STACKER  CURRENTLY RUNNING?\n         BNZ   ACCUMPUT            YES, SHOW WHOLE SPRINT IN ONE TPUT\n         CLC   TPUTLEN,MAXACCUM    IS THE DATA STREAM A BIT LONGISH?\n         BH    FORTUNE             YES, BETTER SEND IT\n         CLI   FUTRCOLR,X'F6'      CONDITION YELLOW?\n         BH    FORTUNE             YES, BETTER SEND IT\n         TM    WORMFLAG,AUTO+BURST IN BURST MODE? (BURST-MUST-COMPLETE)\n         BO    ACCUMPUT            YES, DON'T DO A TPUT YET\nFORTUNE  TM    WORMFLG2,FRTN       IN FORTUNE-TELLING MODE?\n         BZ    FORCEPT             NO\n         LH    R8,TPUTLEN          GET CURRENT TPUT LENGTH\n         LA    R9,UPDTSTRM(R8)     POINT TO CURRENT BUFFER POSITION\n         MVI   0(R9),X'11'         SBA\n         MVC   1(2,R9),LIFEBFAD\n         LA    R0,3                EXTRA DATA STREAM LENGTH SO FAR\n         L     R1,LIFEADDR         POINT TO COUNTER IN SCREEN IMAGE\n         TM    WORMFLAG,GRAF       GRAPHIC MODE ON?\n         BZ    NODEDCLR            NO, NO COLOUR FOR THE FUTURE\n         MVC   3(2,R9),WHITE       SA,COLOUR\n         MVC   5(1,R9),FUTRCOLR    SUPPLY THE PROMISE OF THINGS TO COME\n         LA    R0,6                EXTRA DATA STREAM LENGTH SO FAR\n         CLI   1(R1),C'X'          IS THERE A COUNTER?\n         BNE   NODEDCLR            YES, DO NOT DEFAULT THE ATTRIBUTES\n         STCM  R0,B'1100',4(R9)    MAKE SA,NULL,NULL (SA,ALL,DEFAULT)\nNODEDCLR ALR   R8,R0               ADJUST DATA STREAM LENGTH\n         ALR   R9,R0               ADJUST BUFFER POINTER\n         MVC   0(13,R9),1(R1)      LOAD IT INTO DATA STREAM\n         LA    R8,13(,R8)          ADJUST DATA STREAM LENGTH\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         CLI   1(R1),C'X'          IS THERE A COUNTER?\n         BNE   FORCEPT             YES, WELL WORTH SHOWING IT\n         NI    WORMFLG2,255-FRTN   NO, DON'T BOTHER IN FUTURE\nFORCEPT TIME   BIN                 GET THE TIME BEFORE THE TPUT STARTS\n         LR    R2,R0               COPY IT\n         LH    R1,TPUTLEN          GET DATA STREAM LENGTH SO FAR\n         LA    R1,UPDTSTRM(R1)     POINT PAST END OF DATA STREAM\n         MVC   0(4,R1),STRMTRLR    ON DATA STREAM TRAILER FOOTPRINT\n         LA    R0,4                LOAD DATA STREAM SUFFIX LENGTH\n         LA    R1,UPDTSTRM         POINT TO WORM DATA STREAM START\n         AH    R0,TPUTLEN          GET DATA STREAM LENGTH\n         MVI   0(R1),X'40'         NULL WCC AS DEFAULT\n         TM    WORMFLG2,LOCKED     IS THE KEYBOARD LOCKED?\n         BZ    PUTREADY            NO, ISSUE UPDATES\n         MVI   0(R1),X'C3'         YES, UNLOCK IT, RESET MDT AND AID\n         NI    WORMFLG2,255-LOCKED   KEYBOARD WILL BE UNLOCKED\nPUTREADY ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           DISPLAY LATEST SCREEN UPDATES\n         BAL   R14,WOORM           CALL WOORM\n         LA    R0,1                RESET ACCUMULATED\n         STH   R0,TPUTLEN            UPDATE DATA STREAM\n         TM    GRAFLAGS,RVRS       IN REVERSE? (VIDEO, NOT GEAR)\n         BZ    ACCUMPUT            NO\n         MVC   UPDTSTRM+1(3),REVERSE\n         MVI   TPUTLEN+1,4         YES\nACCUMPUT ICM   R5,B'0001',DIRCTION GET DIRECTION - MOVING YET?\n         BZ    STILSTIL            NO, DON'T ERASE INITIAL VALUE\n         STC   R5,PREVMOVE         YES, REMEMBER LAST MOVE DIRECTION\n         TM    WORMFLG2,ATTN       HAS THE ATTENTION BUTTON BEEN HIT?\n         BO    STANDUP             YES, DEAL WITH IT\nSTILSTIL TM    WORMFLAG,NEXT       NEXT TARGET REQUIRED?\n         BO    NWTARGT             YES, GET IT\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    TGETTEST            YES, FORGET ABOUT A MOVING WORM\n         ICM   R5,B'1111',STACKER  NO, CURRENTLY RUNNING?\n         BNZ   SKIPTGET            YES, NO MANUAL INTERVENTION ALLOWED\nTGETSOME LA    R5,10\n         TM    WORMFLAG,AUTO       IN AUTO MODE?\n         BZ    TGETLOOP            NO\n         TM    OSBITS,CVT8AOS2+CVTMVS2 YES, IS THIS OS/VS2 MVS?\n         BNO   AUTOPLOT            NO, TGET NOWAIT NOT SUPPORTED\n         LA    R5,2                MOVE A BIT FASTER FOR WORMOMATIC\nTGETLOOP LA    R1,WORK\n         LA    R0,8\n         ICM   R1,B'1000',TGETFLAG LOAD TGET FLAGS\n        TGET   (1),(0),R\n         CH    R15,=H'4'           NO DATA BECAUSE OF NOWAIT?\n         BNE   TGOTSOME            NO, LOOK AT DATA\n         TM    WORMFLAG,AUTO+BLITZ IN FAST AUTO MODE?\n         BO    TPUTDECR            YES, SKIP WAIT\n        STIMER WAIT,BINTVL=DELAY   NO, WAIT A TENTH OF A SECOND\n         BCT   R5,TGETLOOP         SEE IF ANY INPUT THIS TIME\nTPUTDECR ICM   R5,B'1111',TCTADDR  GET TCT ADDRESS IF APF AUTHORIZED\n         BZ    DONEDECR            HAVEN'T GOT IT SO SKIP ALL THIS\n         USING SMFTCT,R5\n         ICM   R0,B'1111',TPUTHOLD BEEN HERE BEFORE?\n         BNZ   *+L'*+10            YES\n         MVC   TPUTHOLD,TCTLOUT    SAVE CURRENT TPUT COUNT\n         B     DONEDECR            DON'T DECREMENT IT THE FIRST TIME\n         TM    OSBITS,CVTMVSE      MVS/XA?\n         BZ    AMODEOK1            NO\n         LA    R1,AMODEOK1         YES\n         ICM   R1,B'1000',=X'80'   SET MODE BIT\n         BSM   0,R1                GET INTO 31-BIT ADDRESSING MODE\nAMODEOK1 CLC   TPUTHOLD,TCTLOUT    HAS THE TPUT COUNT INCREASED?\n         BNL   DONEDECR            NO, NO FUDGING REQUIRED\n        MODESET MF=(E,MDSTSUPZ)\n         L     R1,TCTLOUT          GET CURRENT TPUT COUNT\n         BCTR  R1,0                DECREMENT IT\n         ST    R1,TCTLOUT          SAVE IT\n         DROP  R5\n         L     R1,DECRCNTR         GET DECREMENT COUNTER\n         LA    R1,1(,R1)           INCREMENT DECREMENT COUNTER\n         ST    R1,DECRCNTR         SAVE IT\n         STNSM ENABINTZ+1,X'04'    DISABLE INTERRUPTS\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         L     R1,ASCBOUXB         POINT TO THE OUXB\n         DROP  R1\n         USING OUXB,R1\n         L     R5,OUXBTRC          GET CURRENT TSO TRANSACTION COUNT\n         BCTR  R5,0                DECREMENT IT\n         ST    R5,OUXBTRC          SAVE IT\n         DROP  R1\nENABINTZ STOSM ENABINTZ+1,X'07'    ENABLE INTERRUPTS\n        MODESET MF=(E,MDSTPRBN)\nDONEDECR TM    OSBITS,CVTMVSE      MVS/XA?\n         BZ    AMODEOK2            NO\n         LA    R1,AMODEOK2         YES\n         BSM   0,R1                GET INTO 24-BIT ADDRESSING MODE\nAMODEOK2 TM    WORMFLAG,AUTO       IN AUTO MODE?\n         BO    AUTOPLOT            YES, CALL SUBROUTINE\n         B     MOVETAIL            NO, A SECOND IS UP, GET MOVING\n         SPACE 1\nSKIPTGET BCTR  R5,0                DECREMENT STACKED NUMBER\n         ST    R5,STACKER          SAVE NEW VALUE\n         B     MOVETAIL            GET MOVING\nTGOTSOME OI    WORMFLG2,LOCKED     KEYBOARD NOW LOCKED\n         CLI   WORK,X'6B'\n         BL    NOTPAKEY\n         CLI   WORK,X'6E'\n         BH    NOTPAKEY            NOT PA1, PA2, PA3 OR CLEAR\nRESHOW   XR    R15,R15\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    DORESHOW            NO, JUST SHOW NORMAL CHARACTERS\n         L     R15,IMAGESIZ        YES, GET SIZE OF NORMAL SCREEN IMAGE\n         LA    R15,BUFFER(R15)     POINT TO AFTER NORMAL SCREEN IMAGE\n         LH    R1,NUMBRLOC         GET FOOD LOCATION\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR NUMBER LOCATION\n         MVI   0(R15),X'11'        SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R15)\n         MVC   3(3,R15),REVERSE    SA,HILITE,REVERSE\n         MVC   6(2,R15),WHITE      SA,COLOUR\n         MVC   8(1,R15),COLRCHAR   LOAD THE TARGET'S COLOUR\n         LA    R1,DTLSTART(R1)     POINT TO NUMBER\n         MVC   9(1,R15),0(R1)      LOAD NUMBER\n         LA    R15,10              GET LENGTH OF EXTRA DATA\nDORESHOW TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    REDASHED            YES, RESHOW AS IT IS IN THE BUFFER\n         TM    WORMFLAG,LINE       NO, IS LINE MODE ON?\n         BZ    REDASHED            NO, RESHOW AS IT IS IN THE BUFFER\n         L     R1,TAILADDR         YES, POINT TO TAIL IN BUFFER\nOH2GO    CLI   0(R1),X'96'         LOWER CASE 'O'?\n         BNE   ES2GO               NO\n         MVI   0(R1),C'-'          YES, CHANGE TO A DASH\n         LA    R1,1(,R1)           POINT TO NEXT POSITION\n         B     OH2GO               CHECK THIS ONE\nES2GO    CLI   0(R1),X'A2'         LOWER CASE 'S'?\n         BNE   SEE2GO              NO\n         MVI   0(R1),C'_'          YES, CHANGE TO A DASH\n         BCTR  R1,0                POINT TO NEXT POSITION\n         B     OH2GO               CHECK THIS ONE\nSEE2GO   CLI   0(R1),X'83'         LOWER CASE 'C'?\n         BNE   YOU2GO              NO\n         MVI   0(R1),C'|'          YES, CHANGE TO A LINE\n         AL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     OH2GO               CHECK THIS ONE\nYOU2GO   CLI   0(R1),X'A4'         LOWER CASE 'U'?\n         BNE   REDASHED            NO, DISPLAY THE BUFFER\n         MVI   0(R1),C'\u00a6'          YES, CHANGE TO A LINE\n         SL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     OH2GO               CHECK THIS ONE\nREDASHED LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         AR    R0,R15              ADD ANY EXTRA GRAPHIC DATA\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           REFRESH ENTIRE SCREEN IMAGE\n         NI    WORMFLG2,255-LOCKED KEYBOARD IS NOW UNLOCKED\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    TGETTEST            YES, RESTART TEST INPUT CYCLE\n         TM    WORMFLAG,LINE       NO, IS LINE MODE ON?\n         BZ    TGETSOME            NO, RESTART INPUT CYCLE\n         L     R1,TAILADDR         YES, POINT TO TAIL IN BUFFER\nDASH2GO  CLI   0(R1),C'-'          DASH?\n         BNE   USCR2GO             NO\n         MVI   0(R1),X'96'         YES, CHANGE TO A LOWER CASE 'O'\n         LA    R1,1(,R1)           POINT TO NEXT POSITION\n         B     DASH2GO             CHECK THIS ONE\nUSCR2GO  CLI   0(R1),C'_'          DASH?\n         BNE   BRKN2GO             NO\n         MVI   0(R1),X'A2'         YES, CHANGE TO A LOWER CASE 'S'\n         BCTR  R1,0                POINT TO NEXT POSITION\n         B     DASH2GO             CHECK THIS ONE\nBRKN2GO  CLI   0(R1),C'\u00a6'          LINE?\n         BNE   OR2GO               NO\n         MVI   0(R1),X'A4'         YES, CHANGE TO A LOWER CASE 'U'\n         SL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     DASH2GO             CHECK THIS ONE\nOR2GO    CLI   0(R1),C'|'          LINE?\n         BNE   TGETSOME            NO, RESTORE DONE - START INPUT CYCLE\n         MVI   0(R1),X'83'         YES, CHANGE TO A LOWER CASE 'C'\n         AL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     DASH2GO             CHECK THIS ONE\n         SPACE 1\nSTANDUP  DS    0H                  ATTENTION HANDLER\n        STFSMODE ON                RESTORE VTAM FULL SCREEN MODE\n         NI    WORMFLAG,255-AUTO-BLITZ ATTENTION STOPS WORMOMATIC\n         NI    WORMFLG2,255-ATTN   RESET THE ATTENTION FLAG\n         MVC   BUFFER+TITLPOSI(56),STARTHDR RESTORE PFK HEADING\n         L     R1,LIFEADDR         POINT TO LIFETIME-LEFT COUNTER\n         MVC   1(13,R1),0(R1)      ERASE WITH X'S\n         B     RESHOW              REFRESH THE ERASED SCREEN IMAGE\n         SPACE 1\nSHOWFAIL LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           REFRESH ENTIRE SCREEN IMAGE\n        STIMER WAIT,BINTVL==F'6000' WAIT A MINUTE FOR EXAMINATION\n         DC    H'0'                CRASH\n         SPACE 1\nTGETTEST TM    OSBITS,CVT8AOS2+CVTMVS2 IS THIS OS/VS2 MVS?\n         BO    TGETFOOD            YES\n         TM    WORMFLAG,AUTO       NO, IN AUTO MODE?\n         BO    NWTARGT             YES, LOCKED IN\nTGETFOOD LA    R5,2                TEST MODE TGETS DONE HERE\n         LA    R1,WORK\n         LA    R0,8\n         ICM   R1,B'1000',TGETFLAG LOAD TGET FLAGS\n        TGET   (1),(0),R\n         CH    R15,=H'4'           NO DATA BECAUSE OF NOWAIT?\n         BNE   TGOTTEST            NO, LOOK AT DATA\n         TM    WORMFLAG,AUTO+BLITZ IN FAST AUTO MODE?\n         BO    NWTARGT             YES, SKIP WAIT\n        STIMER WAIT,BINTVL=DELAY   NO, WAIT A TENTH OF A SECOND\n         BCT   R5,TGETLOOP         SEE IF ANY INPUT THIS TIME\n         B     NWTARGT             TIME FOR MORE FOOD\nTGOTTEST OI    WORMFLG2,LOCKED     KEYBOARD NOW LOCKED\n         CLI   WORK,X'6B'\n         BL    NOTPAKEY\n         CLI   WORK,X'6F'\n         BL    RESHOW              PA1, PA2, PA3 OR CLEAR\n         SPACE 1\nNOTPAKEY NI    WORK,X'0F'          FOLD PF KEYS (1-12 = 13-24)\n         CLI   WORK,1              CAW?  (COMPUTER AIDED WORMING?)\n         BE    AUTOMODE            YES, GET INTO AUTOMATIC MODE\n         CLI   WORK,2              CHANGE DEBUG MODE?\n         BE    DEBUG               YES\n         CLI   WORK,3              END?\n         BE    END                 YES\n         CLI   WORK,4              CHANGE GRAPHIC CHARACTERS?\n         BE    GRAFLINE            YES\n         CLI   WORK,5              CHANGE BURST MODE?\n         BE    SPURT               YES\n         CLI   WORK,6              CHANGE GRAPHIC MODE?\n         BE    GRAPHIC             YES\n         CLI   WORK,12             CANCEL?\n         BE    CANCEL              YES\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    NWTARGT             YES, GO TEST IT\n         TM    WORMFLAG,AUTO       IS WORMOMATIC ACTIVE?\n         BZ    INMANUAL            NO, IN MANUAL MODE\n         NI    WORMFLAG,255-AUTO-BLITZ TERMINAL INPUT STOPS AUTO MODE\n         MVC   BUFFER+TITLPOSI+2(4),STARTHDR+2 =C'AUTO'\n         LH    R8,TPUTLEN          LENGTH OF DATA STREAM SO FAR\n         LA    R9,UPDTSTRM(R8)     GET CURRENT BUFFER POINTER\n         XR    R1,R1               GET ZERO\n         MVC   0(6,R9),PF1MSGBA    SBA,(1,23),SA,ALL,DEFAULT\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    NGTITLE1            NO\n         LA    R1,3                EXTRA THREE, DON'T ERASE RESETSA\nNGTITLE1 LA    R8,3(R1,R8)         INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,3(R1,R9)         ADJUST BUFFER POINTER\n         MVC   0(4,R9),BUFFER+TITLPOSI+2 =C'AUTO'\n         LA    R8,4(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         L     R1,LIFEADDR         POINT TO LIFETIME-LEFT COUNTER\n         MVC   1(13,R1),0(R1)      ERASE WITH X'S\n         TM    GRAFLAGS,RVRS       IN REVERSE? (VIDEO, NOT GEAR)\n         BZ    INMANUAL            NO\n         MVC   4(3,R9),REVERSE     YES, RESTORE IT\n         LA    R8,3(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\nINMANUAL CLI   WORK,7              UP?\n         BE    UP                  YES\n         CLI   WORK,8              DOWN?\n         BE    DOWN                YES\n         CLI   WORK,10             LEFT?\n         BE    LEFT                YES\n         CLI   WORK,11             RIGHT?\n         BE    RIGHT               YES\nMOVECHEK CLI   DIRCTION,0          CURRENTLY MOVING?\n         BE    TGETLOOP            NO, WAIT FOR DIRECTION INTRUCTIONS\n         CLI   WORK,9              RUN 8?\n         BNE   MOVETAIL            NO\n         MVI   STACKER+3,8         STACK UP EIGHT MOVES\n         EJECT\n*------- PERFORM A MOVE.\n         SPACE 1\nMOVETAIL L     R2,THISTREK         GET MOVES-SINCE-LAST-MEAL COUNTER\n         LA    R2,1(,R2)           LET'S HOPE A MOVE CLOSER TO THE NEXT\n         ST    R2,THISTREK         (I'M HUNGRY!)\n         LH    R8,TPUTLEN          LENGTH OF DATA STREAM SO FAR\n         LA    R9,UPDTSTRM(R8)     GET CURRENT BUFFER POINTER\n         ICM   R2,B'1111',GROWSIZE EATEN RECENTLY?\n         BNZ   GROWTAIL            YES, GROW A BIT\n         MVI   0(R9),X'11'         NO, SBA TO START DATA STREAM UPDATE\n         LH    R2,TAILLOC          GET OLD TAIL LOCATION\n         STH   R2,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR OLD TAIL LOCATION\n         STCM  R0,B'0011',1(R9)\n         MVI   3(R9),C' '          BLANK OLD TAIL\n         LA    R8,4(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,4(,R9)           ADJUST BUFFER POINTER\n         L     R1,TAILADDR         POINT TO TAIL IN BUFFER\n         CLI   0(R1),X'A4'         TAIL TO GO UP?\n         BE    TAILUP              YES\n         CLI   0(R1),X'83'         TAIL TO GO DOWN?\n         BE    TAILDOWN            YES\n         CLI   0(R1),X'A2'         TAIL TO GO LEFT?\n         BE    TAILLEFT            YES\n         CLI   0(R1),X'96'         TAIL TO GO RIGHT?\n         BE    TAILRITE            YES\n         MVI   BUFFER+FLGPOS,C'1'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nTAILRITE MVI   0(R1),C' '          BLANK OLD TAIL\n         LA    R2,1(,R2)           ADD 1 TO LOCATION\n         LA    R1,1(,R1)           POINT TO NEW TAIL\n         B     TAILDONE            NEW TAIL POSITIONS NOW CALCULATED\nTAILLEFT MVI   0(R1),C' '          BLANK OLD TAIL\n         BCTR  R2,0                SUBTRACT 1 FROM LOCATION\n         BCTR  R1,0                POINT TO NEW TAIL\n         B     TAILDONE            NEW TAIL POSITIONS NOW CALCULATED\nTAILDOWN MVI   0(R1),C' '          BLANK OLD TAIL\n         AL    R2,COLUMNS          ADD A WHOLE LINE TO LOCATION\n         AL    R1,COLUMNS          POINT TO NEW TAIL\n         B     TAILDONE            NEW TAIL POSITIONS NOW CALCULATED\nTAILUP   MVI   0(R1),C' '          BLANK OLD TAIL\n         SL    R2,COLUMNS          SUBTRACT A WHOLE LINE FROM LOCATION\n         SL    R1,COLUMNS          POINT TO NEW TAIL\nTAILDONE ST    R1,TAILADDR         STORE NEW TAIL ADDRESS\n         STH   R2,TAILLOC          STORE NEW TAIL LOCATION\n         B     MOVEHEAD            NOW MOVE THE HEAD\n         SPACE 1\nGRAPHIC  DS    0H                  ALLOW QUERY BIT OVERRIDE\n         XI    WORMFLAG,GRAF       TOGGLE GRAPHIC MODE BIT\n         TM    WORMFLAG,GRAF       NOW ON?\n         BZ    RESHOW              NO, ERASE GRAPHIC CHARACTERS\nGRAFREFR LH    R8,TPUTLEN          LENGTH OF DATA STREAM SO FAR\n         LA    R9,UPDTSTRM(R8)     GET CURRENT BUFFER POINTER\n         MVI   0(R9),X'11'         SBA\n         LH    R1,NUMBRLOC         GET FOOD LOCATION\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR NUMBER LOCATION\n         STCM  R0,B'0011',1(R9)\n         MVC   3(3,R9),REVERSE     SA,HILITE,REVERSE\n         MVC   6(2,R9),WHITE       SA,COLOUR\n         MVC   8(1,R9),COLRCHAR    LOAD THE TARGET'S COLOUR\n         LA    R1,DTLSTART(R1)     POINT TO NUMBER\n         MVC   9(1,R9),0(R1)       LOAD NUMBER\n         LA    R0,10(,R8)          GET LENGTH OF DATA STREAM SO FAR\n         CLI   TGETFLAG,X'81'      IS WORM IN THE STARTING POSITION?\n         BNE   COLORNUM            NO, JUST REFRESH THE NUMBER\n         TM    WORMFLG2,TEST       YES, IN FOOD GENERATION TEST MODE?\n         BO    COLORNUM            YES, JUST REFRESH THE NUMBER\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    RESHOW              NO, SEND STANDARD CHARACTERS\n         MVC   TOLOC,TAILLOC       NO, GET TAIL LOCATION FOR RESHOW\n         BAL   R14,CALCPOSI        GET CODE FOR INITIAL TAIL LOCATION\n         MVI   10(R9),X'11'        SBA\n         STCM  R0,B'0011',11(R9)\n         MVC   13(3,R9),NOHILITE   SA,HILITE,DEFAULT\n         MVC   16(3,R9),WHITE      SA,COLOUR,WHITE (INIT COLOUR)\n*        MVC   18(1,R9),WORMCOLR   INITIAL COLOUR OF WORM\n         MVI   19(R9),X'3C'        REPEAT TO ADDRESS\n         MVC   TOLOC,HEADLOC       YES, GET HEAD LOCATION FOR RESHOW\n         BAL   R14,CALCPOSI        GET CODE FOR INITIAL HEAD LOCATION\n         STCM  R0,B'0011',20(R9)\n         MVC   22(4,R9),=X'088F08A3'\n         TM    WORMFLAG,LINE       IS GRAPHIC \"LINE\" MODE ON?\n         BZ    INITWORM            NO, RESHOW INITIAL WORM WITH ARROWS\n         MVI   23(R9),X'A2'        WORM'S BODYLINE (JUST NOT CRICKET)\n         MVI   25(R9),X'C3'        WORM'S BLOCKHEAD\nINITWORM LA    R0,26(,R8)          GET DATA STREAM LENGTH\nCOLORNUM LR    R1,R0               GET CALCULATED DATA STREAM LENGTH\n         LA    R1,UPDTSTRM(R1)     POINT PAST END OF DATA STREAM\n         MVC   0(4,R1),STRMTRLR    ON DATA STREAM TRAILER FOOTPRINT\n         LA    R1,4                LOAD DATA STREAM SUFFIX LENGTH\n         AR    R0,R1               GET FINAL TPUT DATA STREAM LENGTH\n         LA    R1,UPDTSTRM         POINT TO WORM DATA STREAM START\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           DISPLAY GRAPHIC MODE INITIAL WORM\n         LA    R0,1                RESET ACCUMULATED\n         STH   R0,TPUTLEN            UPDATE DATA STREAM\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    TGETTEST            YES, RESTART TEST INPUT CYCLE\n         TM    GRAFLAGS,RVRS       IN REVERSE? (VIDEO, NOT GEAR)\n         BZ    TGETSOME            NO\n         MVC   UPDTSTRM+1(3),REVERSE\n         MVI   TPUTLEN+1,4         YES\n         B     TGETSOME            GET ANOTHER CHANCE BEFORE A MOVE\n         SPACE 1\nGRAFLINE XI    WORMFLAG,LINE       TOGGLE GRAPHIC \"CHARACTER SET\" BIT\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    TGETTEST            YES, NO CHANGE TO SCREEN IMAGE\n         TM    WORMFLAG,GRAF       NO, IS GRAPHIC MODE ON?\n         BO    GRAFREFR            DO REFRESH FOR INITIAL WORM ONLY\n         TM    WORMFLAG,LINE       NO, IS LINE MODE ON?\n         BZ    DASHED              NO, RESHOW AS IT IS IN THE BUFFER\n         L     R1,TAILADDR         POINT TO TAIL IN BUFFER\nOHTOGO   CLI   0(R1),X'96'         LOWER CASE 'O'?\n         BNE   ESTOGO              NO\n         MVI   0(R1),C'-'          YES, CHANGE TO A DASH\n         LA    R1,1(,R1)           POINT TO NEXT POSITION\n         B     OHTOGO              CHECK THIS ONE\nESTOGO   CLI   0(R1),X'A2'         LOWER CASE 'S'?\n         BNE   SEETOGO             NO\n         MVI   0(R1),C'_'          YES, CHANGE TO A DASH\n         BCTR  R1,0                POINT TO NEXT POSITION\n         B     OHTOGO              CHECK THIS ONE\nSEETOGO  CLI   0(R1),X'83'         LOWER CASE 'C'?\n         BNE   YOUTOGO             NO\n         MVI   0(R1),C'|'          YES, CHANGE TO A LINE\n         AL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     OHTOGO              CHECK THIS ONE\nYOUTOGO  CLI   0(R1),X'A4'         LOWER CASE 'U'?\n         BNE   DASHED              NO, DISPLAY THE BUFFER\n         MVI   0(R1),C'\u00a6'          YES, CHANGE TO A LINE\n         SL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     OHTOGO              CHECK THIS ONE\nDASHED   LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           REFRESH ENTIRE SCREEN IMAGE\n         NI    WORMFLG2,255-LOCKED KEYBOARD IS NOW UNLOCKED\n         L     R1,TAILADDR         POINT TO TAIL IN BUFFER\nDASHTOGO CLI   0(R1),C'-'          DASH?\n         BNE   USCRTOGO            NO\n         MVI   0(R1),X'96'         YES, CHANGE TO A LOWER CASE 'O'\n         LA    R1,1(,R1)           POINT TO NEXT POSITION\n         B     DASHTOGO            CHECK THIS ONE\nUSCRTOGO CLI   0(R1),C'_'          DASH?\n         BNE   BRKNTOGO            NO\n         MVI   0(R1),X'A2'         YES, CHANGE TO A LOWER CASE 'S'\n         BCTR  R1,0                POINT TO NEXT POSITION\n         B     DASHTOGO            CHECK THIS ONE\nBRKNTOGO CLI   0(R1),C'\u00a6'          LINE?\n         BNE   ORTOGO              NO\n         MVI   0(R1),X'A4'         YES, CHANGE TO A LOWER CASE 'U'\n         SL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     DASHTOGO            CHECK THIS ONE\nORTOGO   CLI   0(R1),C'|'          LINE?\n         BNE   TGETSOME            NO, RESTORE DONE - READY FOR A MOVE\n         MVI   0(R1),X'83'         YES, CHANGE TO A LOWER CASE 'C'\n         AL    R1,COLUMNS          POINT TO NEXT POSITION\n         B     DASHTOGO            CHECK THIS ONE\n         SPACE 1\nSPURT    XI    WORMFLAG,BURST      TOGGLE \"BURST MODE\" BIT\n         B     TGETSOME            NO CHANGE TO SCREEN IMAGE\n         SPACE 1\nDEBUG    TM    WORMFLAG,BURST      IN BURST MODE?\n*        BO    REVRSEIT            YES, NOT REALLY A DEBUG REQUEST\n         B     REVRSEIT            DISABLE DEBUG MODE CAPABILITY\n         XI    WORMFLAG,DBUG       NO, TOGGLE DEBUG MODE BIT\n         B     TGETSOME            GET ANOTHER CHANCE BEFORE A MOVE\n         SPACE 1\nREVRSEIT TM    GRAFLAGS,HLIT       ABSENCE OF HILIGHT SUPPORT VERIFIED?\n         BZ    TGETSOME            YES, DON'T CAUSE DATA STREAM ERRORS\n         XI    GRAFLAGS,RVRS       TOGGLE REVERSE VIDEO BIT\n         B     TGETSOME            GET ANOTHER CHANCE BEFORE A MOVE\n         SPACE 1\nGROWTAIL BCTR  R2,0                DECREMENT SIZE-TO-GROW COUNTER\n         ST    R2,GROWSIZE\n         SPACE 1\nMOVEHEAD TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    GTWRMCLR            NO\n         MVC   0(2,R9),WHITE       SA,COLOUR\n         MVC   2(1,R9),WORMCOLR    SUPPLY COLOUR CODE\n         LA    R8,3(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,3(,R9)           ADJUST BUFFER POINTER\nGTWRMCLR LH    R2,HEADLOC          GET OLD HEAD LOCATION\n         STH   R2,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR OLD HEAD LOCATION\n         MVI   0(R9),X'11'         SBA\n         STCM  R0,B'0011',1(R9)\n         L     R1,HEADADDR         POINT TO HEAD IN BUFFER\n         CLI   DIRCTION,X'A4'      CURRENTLY MOVING UP?\n         BE    HEADUP\n         CLI   DIRCTION,X'83'      CURRENTLY MOVING DOWN?\n         BE    HEADDOWN\n         CLI   DIRCTION,X'A2'      CURRENTLY MOVING LEFT?\n         BE    HEADLEFT\n         CLI   DIRCTION,X'96'      CURRENTLY MOVING RIGHT?\n         BE    HEADRITE\n         MVI   BUFFER+FLGPOS,C'2'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nHEADRITE MVI   RTORLFT,X'96'       LATEST HORIZONTAL MOVE IS RIGHT\n         MVI   3(R9),X'96'         OVERWRITE OLD HEAD\n         MVI   0(R1),X'96'         OVERWRITE OLD HEAD IN BUFFER\n         LA    R1,1(,R1)           POINT TO NEW HEAD ADDRESS\n         ST    R1,HEADADDR\n         LA    R2,1(,R2)           NO, MUST BE RIGHT, ADD 1 TO LOCATION\n         STH   R2,HEADLOC          STORE NEW HEAD LOCATION\n         CLI   0(R1),C' '          EMPTY SPOT?\n         BE    RIGHTOK             YES\n         CLI   0(R1),C'1'          TARGET?\n         BL    CRASHED             NO, IT IS A CRASH\n         OI    WORMFLAG,NEXT       NEED A NEW TARGET AFTER THIS\n         XR    R0,R0\n         NI    0(R1),X'0F'         GET NUMERIC PART\n         IC    R0,0(,R1)\n         LR    R3,R0               NUMBER EATEN BY WORM\n         A     R0,GROWSIZE         UPDATE COUNT-BEFORE-TAIL-MOVES\n         ST    R0,GROWSIZE\n         AH    R3,SCORE            UPDATE SCORE ACCUMULATED\n         STH   R3,SCORE\nRIGHTOK  MVI   0(R1),C'@'          YES, WRITE NEW HEAD\n         MVI   4(R9),C'@'          SUPPLY NEW HEAD\n         LA    R8,5(,R8)\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    RITENOGE            NO, SEND STANDARD CHARACTERS\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BO    RITEGRAF            YES\nRITENOGE TM    WORMFLAG,LINE       IN LINE MODE?\n         BZ    TPUTSOME            NO\n         MVI   3(R9),C'-'          YES, ATTEMPT CONTINUOUS LINE\n         CLI   PREVMOVE,X'96'      WAS PREVIOUS MOVE RIGHT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n*        MVI   3(R9),C'+'          NO, INDICATE A CORNER\n         MVI   3(R9),C'/'          NO, INDICATE A CORNER\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   3(R9),C'\\'          NO, IT MUST HAVE BEEN DOWN.\n         B     TPUTSOME\nRITEGRAF MVC   3(4,R9),=X'088F08A3'\n         LA    R8,2(,R8)           ALLOW FOR 2 GRAPHICS ESCAPES\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    WORMFLAG,LINE       USING CONTINUOUS LINE DISPLAY?\n         BZ    TPUTSOME            NO, DATA STREAM COMPLETE\n         MVI   6(R9),X'C3'         YES, CHANGE TO BLOCK HEAD\n         MVI   4(R9),X'A2'         SHOW HORIZONTAL LINE\n         CLI   PREVMOVE,X'96'      WAS PREVIOUS MOVE RIGHT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   4(R9),X'C5'         NO, SHOW CORNER\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   4(R9),X'C4'         NO, SHOW OTHER CORNER\n         B     TPUTSOME\nHEADLEFT MVI   RTORLFT,X'A2'       LATEST HORIZINTAL MOVE IS LEFT\n         MVI   4(R9),X'96'         OVERWRITE OLD HEAD\n         MVI   0(R1),X'A2'         OVERWRITE OLD HEAD IN BUFFER\n         BCTR  R1,0                POINT TO NEW HEAD ADDRESS\n         ST    R1,HEADADDR\n         BCTR  R2,0\n         STH   R2,HEADLOC          STORE NEW HEAD LOCATION\n         STH   R2,TOLOC            WANT TO POINT TO PREVIOUS SPOT\n         BAL   R14,CALCPOSI        GET CODE FOR NEW HEAD LOCATION\n         STCM  R0,B'0011',1(R9)\n         CLI   0(R1),C' '          EMPTY SPOT?\n         BE    LEFTOK              YES\n         CLI   0(R1),C'1'          TARGET?\n         BL    CRASHED             NO, IT IS A CRASH\n         OI    WORMFLAG,NEXT       NEED A NEW TARGET AFTER THIS\n         XR    R0,R0\n         NI    0(R1),X'0F'         GET NUMERIC PART\n         IC    R0,0(,R1)\n         LR    R3,R0               NUMBER EATEN BY WORM\n         A     R0,GROWSIZE         UPDATE COUNT-BEFORE-TAIL-MOVES\n         ST    R0,GROWSIZE\n         AH    R3,SCORE            UPDATE SCORE ACCUMULATED\n         STH   R3,SCORE\nLEFTOK   MVI   0(R1),C'@'          YES, WRITE NEW HEAD\n         MVI   3(R9),C'@'          SUPPLY NEW HEAD\n         LA    R8,5(,R8)\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    LEFTNOGE            NO, SEND STANDARD CHARACTERS\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BO    LEFTGRAF            YES\nLEFTNOGE TM    WORMFLAG,LINE       IN LINE MODE?\n         BZ    TPUTSOME            NO\n         MVI   4(R9),C'-'          YES, ATTEMPT CONTINUOUS LINE\n         CLI   PREVMOVE,X'A2'      WAS PREVIOUS MOVE LEFT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n*        MVI   4(R9),C'+'          NO, INDICATE A CORNER\n         MVI   4(R9),C'\\'          NO, INDICATE A CORNER\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   4(R9),C'/'          NO, IT MUST HAVE BEEN DOWN.\n         B     TPUTSOME\nLEFTGRAF MVC   3(4,R9),=X'08A3089F'\n         LA    R8,2(,R8)           ALLOW FOR 2 GRAPHICS ESCAPES\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    WORMFLAG,LINE       USING CONTINUOUS LINE DISPLAY?\n         BZ    TPUTSOME            NO, DATA STREAM COMPLETE\n         MVI   4(R9),X'C3'         YES, CHANGE TO BLOCK HEAD\n         MVI   6(R9),X'A2'         SHOW HORIZONTAL LINE\n         CLI   PREVMOVE,X'A2'      WAS PREVIOUS MOVE LEFT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   6(R9),X'D5'         NO, SHOW CORNER\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   6(R9),X'D4'         NO, SHOW OTHER CORNER\n         B     TPUTSOME\nHEADDOWN MVI   UPORDN,X'83'        LATEST VERTICAL MOVE IS DOWN\n         MVI   3(R9),X'96'         OVERWRITE OLD HEAD\n         MVI   0(R1),X'83'         OVERWRITE OLD HEAD IN BUFFER\n         AL    R1,COLUMNS          GET NEW HEAD ADDRESS\n         AL    R2,COLUMNS          GET NEW HEAD LOCATION\n         STH   R2,HEADLOC          STORE NEW HEAD LOCATION\n         C     R1,LASTLOOK         COMPARE WITH BOTTOM LEFT CORNER\n         BH    CRASHED             CRASHED INTO BOTTOM LINE\n         B     UPORDOWN\nHEADUP   MVI   UPORDN,X'A4'        LATEST VERTICAL MOVE IS UP\n         MVI   3(R9),X'96'         OVERWRITE OLD HEAD\n         MVI   0(R1),X'A4'         OVERWRITE OLD HEAD IN BUFFER\n         SL    R1,COLUMNS          GET NEW HEAD ADDRESS\n         SL    R2,COLUMNS          GET NEW HEAD LOCATION\n         LA    R3,DTLSTART         POINT TO LOGICAL TOP LEFT CORNER\n         AL    R3,COLUMNS          TO LEFT BORDER OF 1ST PLAY LINE\n         STH   R2,HEADLOC          STORE NEW HEAD LOCATION\n         CR    R3,R1               COMPARE WITH NEW HEAD ADDRESS\n         BH    CRASHED             CRASHED INTO INFO LINE\nUPORDOWN ST    R1,HEADADDR\n         STH   R2,TOLOC            WANT TO POINT TO PREVIOUS SPOT\n         BAL   R14,CALCPOSI        GET CODE FOR NEW HEAD LOCATION\n         MVI   4(R9),X'11'         SBA\n         STCM  R0,B'0011',5(R9)\n         CLI   0(R1),C' '          EMPTY SPOT?\n         BE    HEIGHTOK            YES\n         CLI   0(R1),C'1'          TARGET?\n         BL    CRASHED             NO, IT IS A CRASH\n         OI    WORMFLAG,NEXT       NEED A NEW TARGET AFTER THIS\n         XR    R0,R0\n         NI    0(R1),X'0F'         GET NUMERIC PART\n         IC    R0,0(,R1)\n         LR    R3,R0               NUMBER EATEN BY WORM\n         A     R0,GROWSIZE         UPDATE COUNT-BEFORE-TAIL-MOVES\n         ST    R0,GROWSIZE\n         AH    R3,SCORE            UPDATE SCORE ACCUMULATED\n         STH   R3,SCORE\nHEIGHTOK MVI   0(R1),C'@'          YES, WRITE NEW HEAD\n         MVI   7(R9),C'@'          SUPPLY NEW HEAD\n         LA    R8,8(,R8)\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    VERTNOGE            NO, SEND STANDARD CHARACTERS\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BO    VERTGRAF            YES\nVERTNOGE TM    WORMFLAG,LINE       IN LINE MODE?\n         BZ    TPUTSOME            NO\n         MVI   3(R9),C'|'          YES, ATTEMPT CONTINUOUS LINE\n         CLI   PREVMOVE,X'83'      WAS PREVIOUS MOVE DOWN?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n*        MVI   3(R9),C'+'          NO, INDICATE A CORNER\n         MVI   3(R9),C'/'          NO, INDICATE A CORNER\n         CLI   DIRCTION,X'A4'      GOING UP?\n         BE    VERTHIER            YES\n         CLI   PREVMOVE,X'A2'      NO, WAS PREVIOUS MOVE LEFT?\n         BE    TPUTSOME            YES\n         B     OTHERWAY            NO, IT MUST HAVE BEEN RIGHT\nVERTHIER CLI   PREVMOVE,X'96'      NO, WAS PREVIOUS MOVE RIGHT?\n         BE    TPUTSOME            YES\nOTHERWAY MVI   3(R9),C'\\'          NO, IT MUST HAVE BEEN LEFT\n         B     TPUTSOME\nVERTGRAF ICM   R0,B'0111',4(R9)    SAVE DATA\n         MVC   3(2,R9),=X'088A'    GRAPHIC UP ARROW\n         CLI   DIRCTION,X'A4'      GOING UP?\n         BE    UPAROWOK            YES\n         MVI   4(R9),X'8B'         NO, USE GRAPHIC DOWN ARROW\nUPAROWOK STCM  R0,B'0111',5(R9)    REPLACE DATA IN NEW LOCATION\n         MVC   8(2,R9),=X'08A3'    WORM'S HEAD\n         LA    R8,2(,R8)           ALLOW FOR 2 GRAPHICS ESCAPES\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    WORMFLAG,LINE       USING CONTINUOUS LINE DISPLAY?\n         BZ    TPUTSOME            NO, DATA STREAM COMPLETE\n         CLI   DIRCTION,X'A4'      YES, GOING UP?\n         BE    UPLINE              YES\n         MVI   9(R9),X'93'         CHANGE TO BLOCK HEAD\n         MVI   4(R9),X'85'         SHOW VERTICAL LINE\n         CLI   PREVMOVE,X'83'      WAS PREVIOUS MOVE DOWN?\n         BE    PCAFLINE            YES, DO FINAL CHECK FOR PC EMULATION\n         MVI   4(R9),X'D5'         NO, SHOW CORNER\n         CLI   PREVMOVE,X'96'      WAS PREVIOUS MOVE RIGHT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   4(R9),X'C5'         NO, SHOW OTHER CORNER\n         B     TPUTSOME\nUPLINE   MVI   9(R9),X'94'         CHANGE TO BLOCK HEAD\n         MVI   4(R9),X'85'         SHOW VERTICAL LINE\n         CLI   PREVMOVE,X'A4'      WAS PREVIOUS MOVE UP?\n         BE    PCAFLINE            YES, DO FINAL CHECK FOR PC EMULATION\n         MVI   4(R9),X'D4'         NO, SHOW CORNER\n         CLI   PREVMOVE,X'96'      WAS PREVIOUS MOVE RIGHT?\n         BE    TPUTSOME            YES, DATA STREAM COMPLETE\n         MVI   4(R9),X'C4'         NO, SHOW OTHER CORNER\n         B     TPUTSOME\n         SPACE 1\nPCAFLINE TM    GRAFLAGS,PCAF       PC OR PS2 3270 EMULATION?\n         BZ    TPUTSOME            NO, DATA STREAM COMPLETE\n         MVI   3(R9),C'|'          YES, HIDE MISSING APL CODE POINT\n         MVC   4(5,R9),5(R9)       SHIFT DATA STREAM UP ONE BYTE\n         BCTR  R8,0                DECREMENT DATA STREAM LENGTH\n         STH   R8,TPUTLEN          SAVE THE NEW VALUE\n         B     TPUTSOME\n         SPACE 1\nUP       MVI   DIRCTION,X'A4'      CURRENT DIRECTION IS NOW UP\n         CLI   TGETFLAG,X'91'      IS THE WORM MOVING?\n         BE    MOVETAIL            YES\n         BAL   R14,GETGOING        NO, START MOVING\n         B     MOVETAIL\nDOWN     MVI   DIRCTION,X'83'      CURRENT DIRECTION IS NOW DOWN\n         CLI   TGETFLAG,X'91'      IS THE WORM MOVING?\n         BE    MOVETAIL            YES\n         BAL   R14,GETGOING        NO, START MOVING\n         B     MOVETAIL\nLEFT     MVI   DIRCTION,X'A2'      CURRENT DIRECTION IS NOW LEFT\n         CLI   TGETFLAG,X'91'      IS THE WORM MOVING?\n         BE    MOVETAIL            YES\n         BAL   R14,GETGOING        NO, START MOVING\n         B     MOVETAIL\nRIGHT    MVI   DIRCTION,X'96'      CURRENT DIRECTION IS NOW RIGHT\n         CLI   TGETFLAG,X'91'      IS THE WORM MOVING?\n         BE    MOVETAIL            YES\n         BAL   R14,GETGOING        NO, START MOVING\n         B     MOVETAIL\n         SPACE 1\nCRASHED  MVC   TOLOC,HEADLOC       GET HEAD CRASH LOCATION\n         BAL   R14,CALCPOSI        GET CODE FOR CRASH LOCATION\n         STCM  R0,B'0011',1(R9)    PUT CODE IN SCREEN UPDATE STREAM\n         MVI   UPDTSTRM,X'C1'      WCC - DON'T UNLOCK THE KEYBOARD\n         MVI   3(R9),C'+'          + MARKS THE SPOT\n         MVC   4(4,R9),STRMTRLR    ON DATA STREAM TRAILER FOOTPRINT\n         LA    R1,UPDTSTRM         POINT TO DATA STREAM START\n         LA    R0,8(,R8)           GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           DISPLAY CRASH SITE\n        STIMER WAIT,BINTVL==F'100' WAIT A SECOND\n         MVI   3(R9),C'*'          * MARKS THE SPOT\n         LA    R1,UPDTSTRM         POINT TO DATA STREAM START\n         MVC   1(8,R1),0(R9)       JUST SHOW THE ASTERISK\n         LA    R0,9                GET DATA STREAM LENGTH\n         TM    WORMFLAG,GRAF       COLOUR REQUIRED?\n         BZ    SPLAT               NO\n         MVC   UPDTSTRM+4(2),WHITE SA,COLOUR\n         MVC   UPDTSTRM+6(1),WORMCOLR COLOUR OF SPLAT\n         MVI   UPDTSTRM+7,C'*'     * MARKS THE SPOT\n         MVC   UPDTSTRM+8(4),STRMTRLR TACK ON DATA STREAM TRAILER\n         LA    R0,12               GET DATA STREAM LENGTH\nSPLAT    ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n        TPUT   (1),(0),R           DISPLAY CRASH SITE\n         EJECT\n*------- TERMINATION - SCORING.\n         SPACE 1\nEND     TIME   BIN                 GET THE TIME\n         ST    R0,BINTIMEN         REMEMBER WHEN THINGS STOPPED\n         XR    R5,R5               PREPARE FOR IC\n         MVI   DIRCTION,0          CLEAR FOR LATER\n         TM    WORMFLG2,TEST       TESTING RANDOM NUMBER GENERATOR?\n         BO    DOAPAUSE            YES, DON'T EVEN TRY TO SCORE\n         USING PSA,R0\n         L     R4,PSATOLD          GET POINTER TO CURRENT TCB\n         DROP  R0\n         USING TCB,R4\n         L     R4,TCBTIO           POINT TO TIOT\n         DROP  R4\n         USING TIODSCT,R4\n         MVC   WORMUSER,TIOCNJOB   GET USERID\n         DROP  R4\n         LA    R4,L'TIOCNJOB+L'TIOCSTEP(,R4) POINT TO TIOELNGH\n         USING TIOENTRY,R4\nCHKDDNAM CLC   TIOEDDNM(L'TIOEDDNM),WORMFILE+DCBDDNAM-IHADCB\n         BE    OPENFL              FILE EXISTS SO GO AND OPEN IT\n         IC    R5,TIOELNGH         GET TIOT ENTRY LENGTH\n         AR    R4,R5               POINT TO NEXT TIOT ENTRY\n         CLI   TIOELNGH,0          ZERO LENGTH ENTRY?\n         BNE   CHKDDNAM            NO, CHECK OUT THIS ENTRY\n         DROP  R4\nDOAPAUSE MVC   PAUSEMSG(10),=C'NO SCORING'\n         B     WAITEXIT            NOT IN TIOT SO FORGET SCOREBOARD\nOPENFL  TIME   DEC                 GET DATE AND TIME\n         LR    R4,R0               SAVE TIME\n         LR    R5,R1               SAVE DATE\n        OPEN   (WORMFILE,(UPDAT))  OPEN WORMFILE\n        BLDL   WORMFILE,BORDBLDL   CHECK FOR MEMBER\n         LA    R3,255              GET X'FF'\n         NR    R15,R3              GET BLDL RETURN CODE - MEMBER THERE?\n         BZ    GOTBOARD            YES\n         CH    R15,=H'4'           NASTY PROBLEM?\n         BH    EOPDIR              YES, FORGET THE WHOLE THING\n        CLOSE  (WORMFILE)          CLOSE THE FILE - NOTHING DONE YET\n        OPEN   (WORMFILE,(OUTPUT)) OPEN WORMFILE\nGOTBOARD MVC   WORK(1),BORDC       GET ENTRY LENGTH CODE\n         NI    WORK,X'7F'          TURN OFF ALIAS BIT\n         CLI   WORK,15             SPF STATS?\n         BE    RIGHTMEM            YES, SCOREBOARD CHECK IS ON\n         CLI   WORK,14             PFD STATS?\n         BE    RIGHTMEM            YES, SCOREBOARD CHECK IS ON\n         MVI   BORDC,14            USER DATA OF PFD STATS\n*- - - - OK FOR REVIEW WITH X-RAY VISION BUT INVISIBLE TO SPF\n         MVI   BORDV,1             WORM R1 - RELEASES MAY TEST THIS\n         MVI   BORDM,0             NO UPDATES YET\n         STCM  R5,B'1111',BORDCR   SAVE CREATION DATE\n         B     STOWREST            SAVE THE REMAINING NECESSARIES\nRIGHTMEM MVC   DATEO,BORDCD        SAVE DATE OF PREVIOUS BEST\n         MVC   TIMEO,BORDCT        SAVE TIME OF PREVIOUS BEST\n         MVC   SCOREO,BORDMD       SAVE PREVIOUS BEST SCORE\n         MVC   BESTWORM,BORDID     SAVE PREVIOUS BEST USERID\n         CLC   SCORE,SCOREO        IS THIS A BETTER SCORE?\n         BNH   EOPDIR              NO, DO NOT WRITE TO FILE\n*- - - - COULD USE CONTENTS OF MEMBER TO LIST TOP 10,\n*        LESS CHANCE OF CORRUPTION\n         XR    R3,R3\n         IC    R3,BORDM            GET UPDATE COUNTER\n         LA    R3,1(,R3)           INCREMENT\n         STC   R3,BORDM            SAVE IT AGAIN\nSTOWREST STCM  R5,B'1111',BORDCD   SAVE CURRENT DATE\n         STCM  R4,B'1100',BORDCT   SAVE CURRENT TIME\n         MVC   BORDMD,SCORE        SAVE NEW BEST SCORE\n         MVC   BORDID,WORMUSER     SAVE NEW BEST WORM\n         MVC   BORDK(USERLEN),BORDC CHANGE FROM BLDL TO STOW FORMAT\n        STOW   WORMFILE,BORDNAME,R ZAP IN NEW DETAILS QUICK\n         STC   R15,DIRCTION        SAVE STOW RETURN CODE\nEOPDIR  CLOSE  (WORMFILE)          CLOSE THE FILE - HOPE NO CORRUPTIONS\nWAITEXIT MVC   BUFFER+TITLPOSI(56),PAUSEMSG\nREPROMPT LA    R0,TITLPOSI+56      PUT PROMPT MESSAGE ON TOP LINE\nALLPAUSE LA    R1,BUFFER\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n        TPUT   (1),(0),R\n         NI    WORMFLG2,255-LOCKED KEYBOARD IS NOW UNLOCKED\n         LA    R1,WORK\n         LA    R0,8\n         ICM   R1,B'1000',=X'81'   LOAD ASIS,WAIT FLAGS\n        TGET   (1),(0),R\n         OI    WORMFLG2,LOCKED     KEYBOARD NOW LOCKED\n         CLI   WORK,X'4D'\n         BL    ENDORCAN            PF 22, 23 OR 24\n         CLI   WORK,X'6B'\n         BL    REPROMPT            UNEXPECTED AID\n         CLI   WORK,X'6E'\n         BH    ENDORCAN            NOT PA1, PA2, PA3 OR CLEAR\n         L     R0,IMAGESIZ         RESHOW ENTIRE SCREEN IMAGE\n         B     ALLPAUSE\nGO4EVER  TM    WORMFLG2,TEST       IN TEST MODE?\n         BZ    REPROMPT            NO, WAIT FOR APPROPRIATE INPUT\n         OI    TST4EVER+1,X'F0'    MAKE THE BRANCH UNCONDITIONAL\n         MVC   THISCOLR,WORK       USE AID TO SPECIFY COLOUR CODE\n         NI    THISCOLR,7          TURN OFF INVALID COLOUR BITS\n         MVC   BUFFER+TITLPOSI(56),NTMVSMSG ASSUME NOT MVS\n         TM    OSBITS,CVT8AOS2+CVTMVS2 IS THIS OS/VS2 MVS?\n         BNO   F4LOOPYX            NO\n         MVC   BUFFER+TITLPOSI(56),STARTHDR RESTORE PFK HEADING\n         TM    WORMFLAG,AUTO       IN AUTO MODE?\n         BZ    F4LOOPYX            NO, SO PF1/13 STILL MEANS AUTO\n         MVC   BUFFER+TITLPOSI+2(4),=C'SLOW' RESTORE PF1 HEADING\n         TM    WORMFLAG,BLITZ      FAST AUTO SPEED ON?\n         BO    F4LOOPYX            YES, SO PF1/13 MEANS SLOW\n         MVC   BUFFER+TITLPOSI+2(4),=C'FAST' NO\nF4LOOPYX LA    R1,BUFFER           RESTORE THE PFK HEADING ON SCREEN\n         LA    R0,TITLPOSI+56\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R\n         B     NWTARGT             GO AND LOOP FOREVER\n         SPACE 1\n         USING PSA,R0\nFUJITSUX L     R1,PSALCCAR         POINT TO REAL ADDRESS OF LCCA\n         DROP  R0\n         USING LCCA,R1\n         LM    R0,R1,LCCAPGR3      LOAD CURRENT TCB TIME\n         DROP  R1\n         SRDL  R0,12               CONVERT TO MICROSECONDS\n         D     R0,=F'10000'        CONVERT TO CENTISECONDS\n         ST    R1,TCBTIMEN         SAVE CURRENT TCB TIME\n         B     CNCLTEST            CONTINUE WITH TERMINATION\n         SPACE 1\nENDORCAN CLI   WORK,X'7D'          ENTER?\n         BE    FAREWELL            YES, END\n         NI    WORK,X'0F'          FOLD PF KEYS (1-12 = 13-24)\n         CLI   WORK,9              PF1-8/13-20?\n         BL    GO4EVER             YES\n         CLI   WORK,12             PF12/24?\n         BNE   REPROMPT            NO, UNEXPECTED PROGRAM FUNCTION KEY\nCANCEL   OI    WORMFLG2,CNCL       YES\n         EJECT\n*------- TERMINATION - STATISTICS AND MESSAGE DISPLAY.\n         SPACE 1\nFAREWELL CLI   TGETFLAG,X'91'      DID THE WORM MOVE?\n         BNE   CNCLTEST            NO, DON'T EXAMINE TSO COUNTERS\n         TM    OSBITS,CVTMVSE      MVS/XA?\n         BZ    GOTADRMD            NO\n         LA    R1,GOTADRMD         YES\n         ICM   R1,B'1000',=X'80'   SET MODE BIT\n         BSM   0,R1                GET INTO 31-BIT ADDRESSING MODE\n         USING PSA,R0\nGOTADRMD L     R1,PSATOLD          POINT TO THE CURRENT TCB\n         DROP  R0\n         USING TCB,R1\n         ICM   R1,B'1111',TCBTCT   POINT TO THE TIMING CONTROL TABLE\n         BZ    ENDFUDGE            SMF NOT ACTIVE SO FORGET IT\n         DROP  R1\n         USING SMFTCT,R1\n         MVC   TGETCNTN(8),TCTLIN  GET CURRENT TGET AND TPUT COUNTS\n         DROP  R1\n         CLI   OSBITS,CVT8AOS2     IS THIS OSIV/F4?\n         BE    FUJITSUX            YES, DON'T EXAMINE TSO TRANSACTIONS\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         LM    R8,R9,ASCBEJST      LOAD CURRENT TCB TIME\n         SRDL  R8,12               CONVERT TO MICROSECONDS\n         D     R8,=F'10000'        CONVERT TO CENTISECONDS\n         ST    R9,TCBTIMEN         SAVE CURRENT TCB TIME\n         L     R1,ASCBOUXB         POINT TO THE OUXB\n         DROP  R1\n         USING OUXB,R1\n         MVC   XACTCNTN,OUXBTRC    GET CURRENT TSO TRANSACTION COUNT\n         DROP  R1\nENDFUDGE TM    OSBITS,CVTMVSE      MVS/XA?\n         BZ    CNCLTEST            NO, RUNNING IN 370 MODE\n         LA    R1,CNCLTEST         YES\n         BSM   0,R1                REVERT TO 24-BIT ADDRESSING MODE\n         SPACE 1\nCNCLTEST TM    WORMFLG2,CNCL       WAS CANCEL REQUESTED?\n         BO    CLEANUP             YES, JUST EXIT\n         MVC   UPDTSTRM(8),CLEARALL NO, CLEAR THE SCREEN FOR MESSAGES\n         MVI   UPDTSTRM,X'C3'      WCC TO RESET MDT AND UNLOCK KEYBD\n         MVC   UPDTSTRM+8(2),PROHIS PROTECT THE STATS ON THE SCREEN\n         LA    R8,10               DATA STREAM LENGTH SO FAR\n         LA    R9,UPDTSTRM+10      CURRENT BUFFER POSITION\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    PINKYPOO            NO, SKIP PINK\n         MVC   UPDTSTRM+10(3),PINK SA,COLOUR,PINK\n         MVC   UPDTSTRM+13(3),UNDERSCR SA,HILITE,UNDERSCR\n         LA    R8,16               DATA STREAM LENGTH SO FAR\n         LA    R9,UPDTSTRM+16      CURRENT BUFFER POSITION\n         SPACE 1\nPINKYPOO ICM   R0,B'1111',TCBTIMEO ANY TIMING STATISTICS TO REPORT?\n         BZ    TSOSTATS            NO\n         LA    R1,TIMEXPOS         LINE NUMBER FOR TIMEXMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR STATSMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         XR    R0,R0\n         L     R1,TPUTTIME         GET TOTAL TPUT ELAPSED TIME\n         ICM   R15,B'1111',TPUTCNTR GET NUMBER OF HOLD=YES TPUTS\n         BZ    TSOSTATS            DON'T DIVIDE BY ZERO\n         DR    R0,R15              GET CENTISECONDS PER TPUT\n         CVD   R1,WORK\n         ED    TIMETPUT,WORK+6     SHOW SECONDS PER TPUT\n         OI    TIMETPUT+1,X'F0'    SUPPLY LEADING DIGIT\n         L     R1,TCBTIMEN         GET END TCB TIME\n         SL    R1,TCBTIMEO         SUBSTRACT START TCB TIME\n         L     R15,BINTIMEN        GET END TIME-OF-DAY\n         S     R15,BINTIMEO        SUBTRACT START TIME-OF-DAY\n         BP    BINTODOK            POSITIVE RESULT IS GOOD\n         A     R15,=F'8640000'     CATER FOR MIDNIGHT WORMING\nBINTODOK M     R0,=F'1000'         FOR PERCENTAGE AND ONE DECIMAL PLACE\n         DR    R0,R15              GET TCB-TIME/ELAPSED PERCENTAGE\n         CVD   R1,WORK\n         ED    TIMETCB,WORK+6      SHOW IT\n         MVC   3(TIMEXLEN,R9),TIMEXMSG\n         LA    R8,TIMEXLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,TIMEXLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nTSOSTATS ICM   R3,B'1111',TGETCNTN ANY TSO STATISTICS TO REPORT?\n         BZ    VALUEPUT            NO\n         LA    R1,STATSPOS         LINE NUMBER FOR STATSMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR STATSMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         S     R3,TGETCNTO\n         CVD   R3,WORK\n         ED    TSOTGETS,WORK+4     SHOW WORM TSO TERMINAL GET COUNT\n         L     R1,TPUTCNTN\n         S     R1,TPUTCNTO\n         CVD   R1,WORK\n         ED    TSOTPUTS,WORK+4     SHOW WORM TSO TERMINAL PUT COUNT\n         MVC   3(STATSF4L,R9),STATSMSG\n         LA    R0,STATSF4L+3\n         ICM   R3,B'1111',XACTCNTN ANY TSO TRANSACTIONS TO REPORT?\n         BZ    STATSPUT            NO\n         S     R3,XACTCNTO\n         CVD   R3,WORK\n         ED    TSOXACTS,WORK+4     SHOW WORM TSO TRANSACTION COUNT\n         MVC   3(STATSLEN,R9),STATSMSG\n         LA    R0,STATSLEN+3\n         ICM   R1,B'1111',DECRCNTR ANY DECREMENTS?\n         BZ    STATSPUT            NO\n         CVD   R1,WORK\n         ED    TSODECRS,WORK+4     SHOW DECREMENTS TO TCTLOUT & OUXBTRC\n         MVC   3(FUDGELEN,R9),STATSMSG\n         LA    R0,FUDGELEN+3\nSTATSPUT AR    R8,R0               UPDATE DATA STREAM LENGTH\n         AR    R9,R0               UPDATE BUFFER POINTER\n         SPACE 1\nVALUEPUT LA    R1,VALUEPOS         LINE NUMBER FOR VALUEMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR VALUEMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         L     R1,FOODVALU         GET TOTAL GENERATED FOOD VALUE\n         CVD   R1,WORK\n         ED    VALUEMSG,WORK+5\n         M     R0,=F'100'          TWO DECIMAL PLACES FOR AVERAGE\n         D     R0,FOODCNTR         GET THE AVERAGE FOOD VALUE\n         CVD   R1,WORK\n         ED    VALUEAVG,WORK+6\n         MVC   3(VALUELEN,R9),VALUEMSG\n         LA    R8,VALUELEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,VALUELEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    NOCOLORS            NO, SKIP COLOR STATISTICS\n         LA    R1,COLORPOS         LINE NUMBER FOR COLORMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR COLORMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         LH    R1,BLUES            REPORT NUMBER OF BLUE WORMS\n         CVD   R1,WORK\n         ED    BLUECNT,WORK+5\n         LH    R1,REDS             REPORT NUMBER OF RED WORMS\n         CVD   R1,WORK\n         ED    REDCNT,WORK+5\n         LH    R1,PINKS            REPORT NUMBER OF PINK WORMS\n         CVD   R1,WORK\n         ED    PINKCNT,WORK+5\n         LH    R1,GREENS           REPORT NUMBER OF GREEN WORMS\n         CVD   R1,WORK\n         ED    GREENCNT,WORK+5\n         LH    R1,TURQS            REPORT NUMBER OF TURQUOISE WORMS\n         CVD   R1,WORK\n         ED    TURQCNT,WORK+5\n         LH    R1,YELLOWS          REPORT NUMBER OF YELLOW WORMS\n         CVD   R1,WORK\n         ED    YELLOCNT,WORK+5\n         LH    R1,WHITES           REPORT NUMBER OF WHITE WORMS\n         CVD   R1,WORK\n         ED    WHITECNT,WORK+5\n         MVC   3(COLORLEN,R9),COLORMSG\n         LA    R8,COLORLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,COLORLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nNOCOLORS TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    ASTERPUT            YES, DON'T DO THE COVERAGE RATING\n         LA    R1,TREKPOS          LINE NUMBER FOR TREKMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR TREKMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         ICM   R1,B'1111',MEALCNTR GET THE TOTAL NUMBER OF MEALS\n         BZ    COVERPUT            THE WORM HAS NOT EATEN\n         L     R1,EATMOVES         GET TOTAL MOVES FOR ALL MEALS\n         M     R0,=F'100'          TWO DECIMAL PLACES FOR AVERAGE\n         D     R0,MEALCNTR         GET THE AVERAGE MOVES FOR A MEAL\n         CVD   R1,WORK\n         ED    TREKMSG,WORK+4\n         MVC   3(TREKMLEN,R9),TREKMSG\n         LA    R8,TREKMLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,TREKMLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nCOVERPUT LA    R1,COVERPOS         LINE NUMBER FOR COVERMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR COVERMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCORE            GET SCORE\n         LA    R1,8(,R1)           ADD INITIAL SIZE\n         S     R1,GROWSIZE         SUBTRACT AMOUNT NOT GROWN YET\n         M     R0,=F'10000'        PERCENTAGE AND TWO DECIMAL PLACES\n         L     R3,MOVLINES\n         M     R2,MOVECOLS         GET AREA OF PLAY\n         DR    R0,R3               GET COVERAGE RATING\n         CVD   R1,WORK\n         ED    COVERMSG,WORK+5\n         MVC   3(COVERLEN,R9),COVERMSG\n         LA    R8,COVERLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,COVERLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\n         CLI   DIRCTION,8          SCOREBOARD JUST CREATED?\n         BE    SHOWSHOW            YES, GIVE THE GOOD NEWS\n         CLI   BESTWORM,0          WAS THE SCOREBOARD FOUND?\n         BE    ASTERPUT            NO, NO SCORING DETAILS TO REPORT\n         SPACE 1\n         LA    R1,PREVPOS          LINE NUMBER FOR PREVMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR PREVMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCOREO\n         CVD   R1,WORK\n         ED    PREVSCOR,WORK+5\n         ED    PREVDATE,DATEO+1\n         ICM   R1,B'0110',TIMEO\n         IC    R1,CHARZERO\n         SRL   R1,4\n         ST    R1,WORK+4\n         UNPK  PREVTIME+1(4),WORK+5(3)\n         MVC   PREVTIME(2),PREVTIME+1\n         MVI   PREVTIME+2,C':'\n         MVC   3(PREVMLEN,R9),PREVMSG\n         LA    R8,PREVMLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,PREVMLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\n         LA    R1,THISPOS          LINE NUMBER FOR THISMSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR THISMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         LH    R1,SCORE\n         CVD   R1,WORK\n         ED    THISSCOR,WORK+5\n         ST    R5,WORK+4\n         ED    THISDATE,WORK+5\n         ICM   R4,B'0010',CHARZERO\n         SRL   R4,12\n         ST    R4,WORK+4\n         UNPK  THISTIME+1(4),WORK+5(3)\n         MVC   THISTIME(2),THISTIME+1\n         MVI   THISTIME+2,C':'\n         CLC   SCORE,SCOREO        HOW WAS THE SCORE?\n         BNH   BADLUCK             BAD LUCK - JUST WASN'T GOOD ENOUGH\n         MVC   BDLUKSUF,GDLUKSUF   GOOD LUCK -  CONGRATS\nBADLUCK  MVC   3(THISMLEN,R9),THISMSG\n         LA    R8,THISMLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,THISMLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nSHOWSHOW LA    R1,LUCKPOS          LINE NUMBER FOR APPROPRIATE MSG\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR MESSAGE BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         CLI   DIRCTION,8          SCOREBOARD JUST CREATED?\n         BE    GOODGOOD            YES, GIVE THE GOOD NEWS\n         CLC   SCORE,SCOREO        HOW WAS THE SCORE?\n         BNH   BADSHOW             BAD LUCK - JUST WASN'T GOOD ENOUGH\nGOODGOOD TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    GOODSHOW            NO, SKIP HIGHLIGHTING CHANGE\n         MVC   3(3,R9),BLINKING    HIGHLIGHT PREVIOUS TOP WORMOGLODYTE\n         MVC   6(3,R9),RED           BEING DEPOSED\n         LA    R8,6(,R8)           UPDATE DATA STREAM LENGTH\n         LA    R9,6(,R9)           UPDATE BUFFER POINTER\nGOODSHOW MVC   3(GDLUKLEN,R9),GDLUKMSG\n         LA    R8,GDLUKLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,GDLUKLEN+3(,R9)  UPDATE BUFFER POINTER\n         B     DONELUCK\nBADSHOW  CLC   BESTWORM,WORMUSER   IS THIS THE TOP WORMOGLODYTE?\n         BE    OKAYLUCK            YES, DON'T WORRY\n         MVC   3(BDLUKLEN,R9),BDLUKMSG\n         LA    R8,BDLUKLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,BDLUKLEN+3(,R9)  UPDATE BUFFER POINTER\n         B     DONELUCK\nOKAYLUCK MVC   3(URTOPLEN,R9),URTOPMSG\n         LA    R8,URTOPLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,URTOPLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nDONELUCK TM    WORMFLAG,GRAF       YES, IN GRAPHIC MODE?\n         BZ    CHEATCHK            NO, SKIP HIGHLIGHTING CHANGE\n         SPACE 1\n         MVC   0(3,R9),NOHILITE    RESET HIGHLIGHTING\n         LA    R8,3(,R8)           UPDATE DATA STREAM LENGTH\n         LA    R9,3(,R9)           UPDATE BUFFER POINTER\nCHEATCHK TM    WORMFLAG,CHEAT      WAS WORMOMATIC USED?\n         BZ    ASTERPUT            NO\n         TM    WORMFLAG,GRAF       YES, IN GRAPHIC MODE?\n         BZ    AUTOWIN             NO, SKIP HIGHLIGHTING CHANGE\n         MVC   0(3,R9),BLUE        DON'T MAKE CRITICISM TOO LOUD\n         LA    R8,3(,R8)           UPDATE DATA STREAM LENGTH\n         LA    R9,3(,R9)           UPDATE BUFFER POINTER\nAUTOWIN  LA    R1,CHEATPOS         YES, LET THEM KNOW WE KNOW\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR CHEATMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         MVC   3(CHEATLEN,R9),CHEATMSG\n         LA    R8,CHEATLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n         LA    R9,CHEATLEN+3(,R9)  UPDATE BUFFER POINTER\n         SPACE 1\nASTERPUT LA    R1,ASTERPOS         LINE NUMBER FOR ASTERISKS\n         M     R0,COLUMNS          GET SCREEN LOCATION\n         LA    R1,1(,R1)           START FROM THE SECOND COLUMN\n         STH   R1,TOLOC\n         BAL   R14,CALCPOSI        GET CODE FOR CHEATMSG BUFFER ADDR\n         MVI   0(R9),X'11'         SET BUFFER ADDRESS\n         STCM  R0,B'0011',1(R9)\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    STARSPUT            NO, SKIP RED INSERTION\n         MVC   3(3,R9),RED         YES, ASTERISKS IN RED\n         MVC   6(3,R9),NOHILITE    RESET ANY HIGHLIGHTING.\n         LA    R8,6(,R8)           UPDATE DATA STREAM LENGTH\n         LA    R9,6(,R9)           UPDATE BUFFER POINTER\nSTARSPUT MVC   3(ASTERLEN,R9),ASTERMSG\n         LA    R8,ASTERLEN+3(,R8)  UPDATE DATA STREAM LENGTH\n*        LA    R9,ASTERLEN+3(,R9)  UPDATE BUFFER POINTER (NOT NEEDED)\n         SPACE 1\nFINALPUT LA    R1,UPDTSTRM         POINT TO TERMINATION MESSAGES\n         LR    R0,R8               GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'03'   LOAD FULLSCREEN FLAGS\n        TPUT   (1),(0),R\n         LA    R1,WORK\n         LA    R0,8\n         ICM   R1,B'1000',=X'81'   LOAD ASIS,WAIT FLAGS\n        TGET   (1),(0),R           END FOR ANY ALMOST ANY INPUT\n         CLI   WORK,X'4D'\n         BL    CLEANUP             PF 22, 23 OR 24\n         CLI   WORK,X'6F'\n         BL    FINALPUT            RESHOW IN CASE OF INTERCOM\n         EJECT\n*------- TERMINATION - EXIT.\n         SPACE 1\nCLEANUP  CLI   TGETFLAG,X'91'      DID THE WORM GET MOVING?\n         BNE   STAXOFF             NO, NO ATTENTION TRAP WAS SET\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    STAXOFF             YES, NO ATTENTION TRAP WAS SET\n        STAX   ,                   CANCEL THE ATTENTION TRAP\nSTAXOFF STLINENO LINE=1,MODE=OFF   DEACTIVATE VTAM FULL SCREEN MODE\n        TCLEARQ INPUT              FLUSH ANY RESIDUAL INPUT\n         XR    R15,R15             SET RETURN CODE = 0\nLEAVE   $XRET  CC=(R15),LV=WORMCMNL,TYPE=RENT\n         SPACE 1\nWACKYVDU LA    R1,WACKYMSG         YES, CAN'T BE AN HONEST-TO-GOD VDU\n         LA    R0,L'WACKYMSG\n         B     ERRMSG              TELL THE USER AND GO HOME\nNOTVDU   LA    R1,SORRYMSG         YES, PROBABLY ON A TTY\n         LA    R0,L'SORRYMSG\nERRMSG  TPUT   (1),(0),R           SORRY, BUT VDU IS REQUIRED\n         LA    R15,8               SET RETURN CODE = 8\n         B     LEAVE\n         EJECT\n*------- INITIALIZATION - OPERATING SYSTEM AND STATISTICS.\n         SPACE 1\nGETGOING MVI   TGETFLAG,X'91'      NOW MOVING SO USE ASIS,NOWAIT TGETS\n        TIME   BIN                 GET THE TIME\n         ST    R0,BINTIMEO         REMEMBER WHEN THINGS STARTED TO MOVE\n         TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    NOSTAXON            YES, DON'T SET AN ATTENTION TRAP\n        STAX   USADDR=(R13),MF=(E,STAXON) ACTIVATE THE ATTENTION TRAP\nNOSTAXON TM    OSBITS,CVT8AOS2+CVTMVS2 IS THIS OS/VS2 MVS?\n         BNO   FUJITSU             NO, CATER FOR OSIV/F4\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         LM    R0,R1,ASCBEJST      LOAD CURRENT TCB TIME\n         DROP  R1\n         SRDL  R0,12               CONVERT TO MICROSECONDS\n         D     R0,=F'10000'        CONVERT TO CENTISECONDS\n         ST    R1,TCBTIMEO         SAVE CURRENT TCB TIME\n        TESTAUTH FCTN=1            TEST FOR APF AUTHORIZATION\n         LTR   R15,R15             AUTHORIZED?\n         BNZ   TSTDAUTH            NO\n         OI    WORMFLG2,AUTH       YES, FLAG SAME\nTSTDAUTH TM    OSBITS,CVTMVSE      MVS/XA?\n         BZ    GOTAMODE            NO\n         LA    R1,GOTAMODE         YES\n         ICM   R1,B'1000',=X'80'   SET MODE BIT\n         BSM   0,R1                GET INTO 31-BIT ADDRESSING MODE\n         USING PSA,R0\nGOTAMODE L     R1,PSATOLD          POINT TO THE CURRENT TCB\n         DROP  R0\n         USING TCB,R1\n         ICM   R1,B'1111',TCBTCT   POINT TO THE TIMING CONTROL TABLE\n         BZ    GOTGOING            SMF NOT ACTIVE SO FORGET IT\n         DROP  R1\n         USING SMFTCT,R1\n         MVC   TGETCNTO(8),TCTLIN  GET CURRENT TGET AND TPUT COUNTS\n         DROP  R1\n         TM    WORMFLG2,AUTH       APF AUTHORIZED UNDER MVS?\n         BO    DISABLE             YES\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         L     R1,ASCBOUXB         POINT TO THE OUXB\n         DROP  R1\n         USING OUXB,R1\n         MVC   XACTCNTO,OUXBTRC    GET CURRENT TSO TRANSACTION COUNT\nGOTGOING TM    OSBITS,CVTMVSE      MVS/XA?\n         BZR   R14                 NO, RUNNING IN 370 MODE\n         SLL   R14,8               YES, CLEAR HIGH BYTE\n         SRL   R14,8\n         BSM   0,R14               REVERT TO 24-BIT ADDRESSING\n         SPACE 1\nDISABLE  ST    R14,WORK            SAVE THE RETURN ADDRESS\n         ST    R1,TCTADDR          SAVE TCT ADDRESS (ONLY IF AC=1)\n         DROP  R1\n        MODESET MF=(E,MDSTSUP)     GET INTO SUPERVISOR STATE\n         STNSM ENABINTS+1,X'04'    DISABLE INTERRUPTS\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         L     R1,ASCBOUXB         POINT TO THE OUXB\n         DROP  R1\n         USING OUXB,R1\n         L     R3,OUXBTRC          GET CURRENT TSO TRANSACTION COUNT\n         DROP  R1\nENABINTS STOSM ENABINTS+1,X'07'    ENABLE INTERRUPTS\n         MODESET MF=(E,MDSTPRB)    GET INTO PROBLEM STATE\n         ST    R3,XACTCNTO         STORE CURRENT TSO TRANSACTION COUNT\n         L     R14,WORK            RESTORE RETURN ADDRESS\n         B     GOTGOING\nFUJITSU  CLI   OSBITS,CVT8AOS2     IS THIS OSIV/F4?\n         BNE   GOTGOING            NO, INDETERMINATE OPERATING SYSTEM\n         MVC   WORMFILE+DCBDDNAM-IHADCB(8),PFDATTRS\n         USING PSA,R0\n         L     R1,PSALCCAR         POINT TO REAL ADDRESS OF LCCA\n         DROP  R0\n         USING LCCA,R1\n         LM    R0,R1,LCCAPGR3      LOAD CURRENT TCB TIME\n         DROP  R1\n         SRDL  R0,12               CONVERT TO MICROSECONDS\n         D     R0,=F'10000'        CONVERT TO CENTISECONDS\n         ST    R1,TCBTIMEO         SAVE CURRENT TCB TIME\n         USING PSA,R0\n         L     R1,PSATOLD          POINT TO THE CURRENT TCB\n         DROP  R0\n         USING TCB,R1\n         ICM   R1,B'1111',TCBTCT   POINT TO THE TIMING CONTROL TABLE\n         BZ    GOTGOING            SMF NOT ACTIVE SO FORGET IT\n         DROP  R1\n         USING SMFTCT,R1\n         MVC   TGETCNTO(8),TCTLIN  GET CURRENT TGET AND TPUT COUNTS\n         B     GOTGOING            END OF MOVING INITIALIZATION\n         DROP  R1\n         EJECT\n*------- WORMOMATIC - SITUATION EVALUATION.\n         SPACE 1\nAUTOMODE TM    WORMFLAG,AUTO       IS WORMOMATIC ALREADY ACTIVE?\n         BZ    GOTOAUTO            NO, GET INTO AUTOMATIC MODE\n         XI    WORMFLAG,BLITZ      YES, TOGGLE AUTO SPEED\nGOTOAUTO OI    WORMFLAG,CHEAT+AUTO INDICATE WORMOMATIC ACTIVATION\n         MVC   BUFFER+TITLPOSI+2(4),=C'SLOW'\n         TM    WORMFLAG,BLITZ      FAST AUTO SPEED ON?\n         BO    GTPF1HDR            YES, SO PF1/13 MEANS SLOW\n         MVC   BUFFER+TITLPOSI+2(4),=C'FAST' NO\n         TM    OSBITS,CVT8AOS2+CVTMVS2 IS THIS OS/VS2 MVS?\n         BO    GTPF1HDR            YES\n         MVC   BUFFER+TITLPOSI(56),NTMVSMSG\n         LA    R0,TITLPOSI+56      PUT PROMPT MESSAGE ON TOP LINE\n         LA    R1,BUFFER\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R\n         B     FLAGTEST\nGTPF1HDR LH    R8,TPUTLEN          LENGTH OF DATA STREAM SO FAR\n         LA    R9,UPDTSTRM(R8)     GET CURRENT BUFFER POINTER\n         XR    R1,R1               GET ZERO\n         MVC   0(6,R9),PF1MSGBA    SBA,(1,23),SA,ALL,DEFAULT\n         TM    WORMFLAG,GRAF       IN GRAPHIC MODE?\n         BZ    NGTITLE2            NO\n         LA    R1,3                EXTRA THREE, DON'T ERASE RESETSA\nNGTITLE2 LA    R8,3(R1,R8)         INCREASE DATA STREAM LENGTH COUNTER\n         LA    R9,3(R1,R9)         ADJUST BUFFER POINTER\n         MVC   0(4,R9),BUFFER+TITLPOSI+2 =C'FAST'/=C'SLOW'\n         LA    R8,4(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\n         TM    GRAFLAGS,RVRS       IN REVERSE? (VIDEO, NOT GEAR)\n         BZ    FLAGTEST            NO\n         MVC   4(3,R9),REVERSE     YES, RESTORE IT\n         LA    R8,3(,R8)           INCREASE DATA STREAM LENGTH COUNTER\n         STH   R8,TPUTLEN          ACCUMULATE DATA STREAM LENGTH\nFLAGTEST CLI   TGETFLAG,X'91'      IS THE WORM MOVING?\n         BE    AUTOPLOT            YES\n         BAL   R14,GETGOING        NO, START MOVING\nAUTOPLOT TM    WORMFLG2,TEST       IN FOOD GENERATION TEST MODE?\n         BO    NWTARGT             YES, GO TEST IT\n         XR    R4,R4               ZERO POSSIBLE MOVE DETAILS\n         ST    R4,MOVECNTR         RESET TEST MOVE COUNTER\n         XC    POSPATHS,POSPATHS   NO POSSIBLE PATHS FOUND YET\n         L     R0,COLUMNS\n         L     R1,HEADADDR         GET CURRENT ADDRESS\n         CLI   1(R1),C'0'          FOUND THE WORM FOOD?\n         BH    RISOK               YES, RIGHT IS OKAY\n         LA    R3,1(,R1)           NO, POINT TO \"RIGHT\" POSITION\n         C     R3,TAILADDR         ADDRESS OF TAIL?\n         BNE   RBLNKCHK            NO\n         ICM   R3,B'1111',GROWSIZE YES, TAIL TO BE DELETED?\n         BZ    RISOK               YES, RIGHT IS OKAY\nRBLNKCHK CLI   1(R1),C' '          FOUND A BLANK?\n         BNE   RISBAD              NO\nRISOK    LA    R4,16+ROK(,R4)      YES, RIGHT IS POSSIBLE\n         CLC   1(2,R1),=C' X'      NEXT TO SIDE BORDER AND NO FOOD?\n         BNE   RISGOOD             NO, NO WORRIES\n         LA    R3,DTLSTART         POINT TO CONCEPTUAL SCREEN ORIGIN\n         AH    R3,NUMBRLOC         POINT TO FOOD\n         CLI   1(R3),C'X'          FOOD ALSO IN SECOND-LAST COLUMN?\n         BNE   RISBAD              NO, INHIBIT RIGHT IF POSSIBLE\nRISGOOD  LA    R4,RGD(,R4)         RIGHT SHOULD NOT BE INHIBITED\nRISBAD   BCTR  R1,0                POINT TO \"LEFT\" POSITION\n         CLI   0(R1),C'0'          FOUND THE WORM FOOD?\n         BH    LISOK               YES, LEFT IS OKAY\n         C     R1,TAILADDR         ADDRESS OF TAIL?\n         BNE   LBLNKCHK            NO\n         ICM   R3,B'1111',GROWSIZE YES, TAIL TO BE DELETED?\n         BZ    LISOK               YES, LEFT IS OKAY\nLBLNKCHK CLI   0(R1),C' '          FOUND A BLANK?\n         BNE   LISBAD              NO\nLISOK    LA    R4,16+LOK(,R4)      YES, LEFT IS POSSIBLE\n         LR    R3,R1               POINT TO \"LEFT\" POSITION\n         BCTR  R3,0                POINT ONE MORE \"LEFT\"\n         CLC   0(2,R3),=C'X '      NEXT TO SIDE BORDER AND NO FOOD?\n         BNE   LISGOOD             NO, NO WORRIES\n         LA    R3,DTLSTART         POINT TO CONCEPTUAL SCREEN ORIGIN\n         AH    R3,NUMBRLOC         POINT TO FOOD\n         BCTR  R3,0                POINT \"LEFT\" OF FOOD\n         CLI   0(R3),C'X'          FOOD ALSO IN SECOND COLUMN?\n         BNE   LISBAD              NO, INHIBIT LEFT IF POSSIBLE\nLISGOOD  LA    R4,LGD(,R4)         LEFT SHOULD NOT BE INHIBITED\nLISBAD   LA    R1,1(,R1)           GET CURRENT ADDRESS AGAIN\n         SR    R1,R0               POINT TO \"UP\" POSITION\n         LA    R3,DTLSTART         POINT TO LOGICAL TOP LEFT CORNER\n         AL    R3,COLUMNS          TO LEFT BORDER OF 1ST PLAY LINE\n         CR    R3,R1               COMPARE WITH NEW HEAD ADDRESS\n         BH    UISBAD              WOULD CRASH INTO INFO LINE\n         CLI   0(R1),C'0'          FOUND THE WORM FOOD?\n         BH    UISOK               YES, UP IS OKAY\n         C     R1,TAILADDR         ADDRESS OF TAIL?\n         BNE   UBLNKCHK            NO\n         ICM   R3,B'1111',GROWSIZE YES, TAIL TO BE DELETED?\n         BZ    UISOK               YES, UP IS OKAY\nUBLNKCHK CLI   0(R1),C' '          FOUND A BLANK?\n         BNE   UISBAD              NO\nUISOK    LA    R4,16+UOK(,R4)      YES, UP IS POSSIBLE\nUISBAD   AR    R1,R0               GET CURRENT ADDRESS AGAIN\n         AR    R1,R0               POINT TO \"DOWN\" POSITION\n         C     R1,LASTLOOK         COMPARE WITH BOTTOM BORDER ADDRESS\n         BH    DISBAD              WOULD CRASH INTO INFO LINE\n         CLI   0(R1),C'0'          FOUND THE WORM FOOD?\n         BH    DISOK               YES, DOWN IS OKAY\n         C     R1,TAILADDR         ADDRESS OF TAIL?\n         BNE   DBLNKCHK            NO\n         ICM   R3,B'1111',GROWSIZE YES, TAIL TO BE DELETED?\n         BZ    DISOK               YES, DOWN IS OKAY\nDBLNKCHK CLI   0(R1),C' '          FOUND A BLANK?\n         BNE   DISBAD              NO\nDISOK    LA    R4,16+DOK(,R4)      YES, DOWN IS POSSIBLE\nDISBAD   LTR   R4,R4               ARE WE TRAPPED?\n         BZ    MOVETAIL            YES, FACE IT LIKE A WORM\n         STC   R4,DIRFLAGS         SAVE DIRECTION DETAILS\n         SLL   R4,26               SHIFT OUT RGD AND LGD BITS\n         SRL   R4,30               POSSIBLE MOVE COUNT IN LOW 2 BITS\n         STH   R4,AUTOOPTS         SAVE NUMBER OF POSSIBLE MOVES\n         STC   R4,AUTOOPTS         NOT-TO-BE-MODIFIED COPY OF SAME\nPONDORNT LA    R15,DECNTABL        POINT TO DIRECTION DECISION TABLE\n         ST    R15,DECNADDR                                    ENTRY\n         XR    R15,R15             ZERO MAX DEPTH TESTED FOR CHOICE\n         STH   R15,HOLDEPTH          OF THIS ALGORITHM INVOCATION\n         TM    AUTOOPTS+1,X'02'    MORE THAN ONE MOVE POSSIBLE?\n         BO    PONDER              YES, DECISIONS, DECISIONS...\n         TM    DIRFLAGS,DOK        DOWN IF IT WAS DOWN\n         BO    GODOWN\n         TM    DIRFLAGS,UOK        UP IF IT WAS UP\n         BO    GOUP\n         TM    DIRFLAGS,ROK        RIGHT IF IT WAS RIGHT\n         BO    GORIGHT\n         TM    DIRFLAGS,LOK        LEFT IF IT WAS LEFT\n         BO    GOLEFT              (NOTHING SHOULD DROP THROUGH HERE)\n         MVI   BUFFER+FLGPOS,C'3'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\n         EJECT\n*------- WORMOMATIC - DECISION ALGORITHM.\n         SPACE 1\nPONDER   XR    R4,R4               CLEAR FOR DIVIDE\n         LH    R5,NUMBRLOC         GET LOCATION OF NUMBER\n         DR    R4,R0               DIVIDE BY NUMBER OF COLUMNS\n         STM   R4,R5,FOODX         STORE FOOD CO-ORDINATES\n         XR    R4,R4               CLEAR FOR DIVIDE\n         LH    R5,HEADLOC          GET LOCATION OF HEAD\n         DR    R4,R0               DIVIDE BY NUMBER OF COLUMNS\n         STM   R4,R5,HEADX         STORE HEAD CO-ORDINATES\n         L     R1,HEADADDR         GET CURRENT ADDRESS\n         CLC   HEADY,FOODY         WHICH SIDE OF TARGET IS WORM'S HEAD?\n         BH    CLIMB               BELOW THE NUMBER\n         BE    RIGHTALT            ON THE SAME LINE AS THE NUMBER\n         SPACE 1\nDIVE     TM    DIRFLAGS,DOK        DOWN POSSIBLE?\n         BZ    DIVISH              NO, CAN'T GO DOWN\n         CLI   DIRCTION,X'83'      YES, CURRENTLY GOING DOWN?\n         BE    GODOWN              YES, KEEP GOING DOWN\n         TM    DIRFLAGS,RGD+LGD    NO, LEFT OR RIGHT POSSIBLE?\n         BNZ   GODOWN              YES, NOT A CRUCIAL DECISION\n         TM    DIRFLAGS,UOK        NO, IS UP POSSIBLE?\n         BZ    GODOWN              NO, DOWN IS ONLY OPTION\nMIDTREND CLI   DIRCTION,X'A2'      CURRENTLY GOING LEFT?\n         BE    LFT2VERT            YES\n         CLI   DIRCTION,X'96'      CURRENTLY GOING RIGHT?\n         BNE   MIDWAY              NO\n         CLI   1(R1),X'A4'         RIGHT BLOCKED BY \"UP\" WORM?\n         BE    GODOWN              YES, GO DOWN\n         CLI   1(R1),X'83'         NO, RIGHT BLOCKED BY \"DOWN\" WORM?\n         BE    GOUP                YES, GO UP\n         B     MIDWAY              NO\nLFT2VERT LR    R3,R1               POINT TO CURRENT HEAD ADDRESS\n         BCTR  R3,0\n         CLI   0(R3),X'A4'         LEFT BLOCKED BY \"UP\" WORM?\n         BE    GODOWN              YES, GO DOWN\n         CLI   0(R3),X'83'         NO, LEFT BLOCKED BY \"DOWN\" WORM?\n         BE    GOUP                YES, GO UP\nMIDWAY   CLI   1(R1),C'X'          NEXT TO RIGHT BORDER?\n         BE    VERTLUST            YES\n         LR    R3,R1               POINT TO CURRENT HEAD ADDRESS\n         BCTR  R3,0\n         CLI   0(R3),C'X'          NEXT TO LEFT BORDER?\n         BE    VERTLUST            YES\nCENTREIT L     3,LINES\n         SRL   3,1                 GET HALF THE NUMBER OF SCREEN LINES\n         C     3,HEADY             HEAD IN LOWER HALF OF SCREEN?\n         BL    GOUP                YES, GO UP\n         B     GODOWN              NO, GO DOWN\nVERTLUST CLC   HEADY,FOODY         WHICH SIDE OF TARGET IS WORM'S HEAD?\n         BH    GOUP                BELOW THE NUMBER\n         BL    GODOWN              ABOVE THE NUMBER\n         B     CENTREIT            ON THE SAME LINE AS THE NUMBER\nDIVISH   TM    DIRFLAGS,RGD+LGD+UOK NO, LEFT, RIGHT, UP POSSIBLE?\n         BO    GOFORIT             YES, MUST BE IN THE OPEN\nHORIZNTL TM    DIRFLAGS,RGD+LGD    NO, LEFT AND RIGHT POSSIBLE?\n         BZ    GOVERT              NO, NEITHER\n         BNO   GOHORIZ             NO, TAKE THE ONE THAT IS\n         CLI   DIRCTION,X'83'      CURRENTLY GOING DOWN?\n         BNE   UPOPP               NO\n         LR    R3,R1               GET HEADADDR\n         AL    R3,COLUMNS          POINT TO DOWN POSITION\nHORIZOPP CLI   0(R3),X'96'         OBSTRUCTED BY \"RIGHT\" WORM?\n         BE    GOLEFT              YES, SO GO LEFT\n         CLI   0(R3),X'A2'         OBSTRUCTED BY \"LEFT\" WORM?\n         BE    GORIGHT             YES, SO GO RIGHT\n         B     GORTORLF            NOT OBSTRUCTED BY LEFT OR RIGHT WORM\nUPOPP    CLI   DIRCTION,X'A4'      CURRENTLY GOING UP?\n         BNE   GORTORLF            NO\n         LR    R3,R1               GET HEADADDR\n         SL    R3,COLUMNS          POINT TO UP POSITION\n         B     HORIZOPP\nGOHORIZ  TM    DIRFLAGS,RGD        ONLY ONE POSSIBLE, IS IT RIGHT?\n         BO    GORIGHT             YES, DO IT\n         B     GOLEFT              NO, IT MUST BE LEFT\nGOVERT   TM    DIRFLAGS,UOK        ONLY ONE POSSIBLE, IS IT UP?\n         BO    GOUP                YES, DO IT\n         B     GODOWN              NO, IT MUST BE DOWN\n         SPACE 1\nRIGHTALT LR    R3,R1               GET HEADADDR\n         CLI   DIRCTION,X'A4'      GOING UP?\n         BE    RAUP                YES\n         CLI   DIRCTION,X'83'      GOING DOWN?\n         BE    RADWN               YES\n         CLI   DIRCTION,X'A2'      GOING LEFT?\n         BE    RALFT               YES\n         TM    DIRFLAGS,RGD        NO, GOING RIGHT, IS RIGHT STILL OK?\n         BO    GOFORIT             YES\n         LA    R3,1(,R3)           POINT TO RIGHT POSITION\nVERTIOPP CLI   0(R3),X'A4'         OBSTRUCTED BY \"UP\" WORM?\n         BE    GODOWN              YES, SO GO DOWN\n         CLI   0(R3),X'83'         OBSTRUCTED BY \"DOWN\" WORM?\n         BE    GOUP                YES, SO GO UP\n         B     GOFORIT             NOT OBSTRUCTED BY UP OR DOWN WORM\n         SPACE 1\nRALFT    TM    DIRFLAGS,LGD        GOING LEFT, IS LEFT STILL OK?\n         BO    GOFORIT             YES\n         BCTR  R3,0                POINT TO LEFT POSITION\n         B     VERTIOPP\n         SPACE 1\nRADWN    TM    DIRFLAGS,DOK        GOING DOWN, IS DOWN STILL OK?\n         BO    GOFORIT             YES\n         AL    R3,COLUMNS          POINT TO DOWN POSITION\n         B     HORIZOPP\n         SPACE 1\nRAUP     TM    DIRFLAGS,UOK        GOING UP, IS UP STILL OK?\n         BO    GOFORIT             YES\n         SL    R3,COLUMNS          POINT TO UP POSITION\n         B     HORIZOPP\n         SPACE 1\nGOFORIT  CLC   HEADX,FOODX         WHICH SIDE OF TARGET IS WORM'S HEAD?\n         BH    CRAWLEFT            RIGHT OF THE NUMBER\n         TM    DIRFLAGS,RGD        RIGHT POSSIBLE?\n         BO    GORIGHT             YES, GO RIGHT\nGOUPORDN TM    DIRFLAGS,UOK+DOK    UP, DOWN POSSIBLE?\n         BO    UPANDOWN            YES, BOTH\n         BZ    GOHORIZ             NEITHER, ONLY ONE DIRECTION POSSIBLE\n         TM    DIRFLAGS,UOK        NO, ONLY ONE, IS IT UP?\n         BO    GOUP                YES, DO IT\n         B     GODOWN              NO, IT MUST HAVE BEEN DOWN\nUPANDOWN CLI   UPORDN,X'A4'        WAS LAST VERTICAL UP?\n         BE    GOUP                YES, GO UP\n         B     GODOWN              NO, IT WAS DOWN SO GO DOWN\nCRAWLEFT TM    DIRFLAGS,LGD        LEFT POSSIBLE?\n         BO    GOLEFT              YES, GO LEFT\n         B     GOUPORDN            NO, MOVE VERTICALLY\n         SPACE 1\nGORTORLF LR    R3,R1               GET HEADADDR\nISRTBLKD LA    R3,1(,R3)           POINT TO NEXT RIGHT POSITION\n         CLI   0(R3),C' '          BLANK TO THE RIGHT?\n         BE    ISRTBLKD            YES\n         CLI   0(R3),C'0'          NO, IS THE RIGHT BLOCKED BY FOOD?\n         BH    GORIGHT             YES, GO RIGHT\n         LR    R3,R1               NO\nISLFBLKD BCTR  R3,0                POINT TO POSITION TO THE LEFT\n         CLI   0(R3),C' '          BLANK TO THE LEFT?\n         BE    ISLFBLKD            YES\n         CLI   0(R3),C'0'          NO, IS THE LEFT BLOCKED BY FOOD?\n         BH    GOLEFT              YES, GO LEFT\n         CLI   RTORLFT,X'96'       WAS LAST HORIZONTAL RIGHT?\n         BE    GORIGHT             YES, GO RIGHT\n         B     GOLEFT              NO, IT WAS LEFT SO GO LEFT\n         SPACE 1\nCLIMB    TM    DIRFLAGS,UOK        UP POSSIBLE?\n         BZ    CLIMBISH            NO, CAN'T GO UP\n         CLI   DIRCTION,X'A4'      YES, CURRENTLY GOING UP?\n         BE    GOUP                YES, KEEP GOING UP\n         TM    DIRFLAGS,RGD+LGD    NO, LEFT OR RIGHT POSSIBLE?\n         BNZ   GOUP                YES, NOT A CRUCIAL DECISION\n         TM    DIRFLAGS,DOK        NO, IS DOWN POSSIBLE?\n         BZ    GOUP                NO, UP IS ONLY OPTION\n         B     MIDTREND            NO, GO TOWARDS MIDDLE OF SCREEN\nCLIMBISH TM    DIRFLAGS,RGD+LGD+DOK NO, LEFT, RIGHT, DOWN POSSIBLE?\n         BO    GOFORIT             YES, MUST BE IN THE OPEN\n         B     HORIZNTL            NO, MAKE A HORIZONTAL MOVE\n         SPACE 1\nGODOWN   MVI   THISOPTN,DOK\n         MVI   AUTOMOVE,X'83'\n         B     TESTTEST\nGOUP     MVI   THISOPTN,UOK\n         MVI   AUTOMOVE,X'A4'\n         B     TESTTEST\nGOLEFT   MVI   THISOPTN,LOK\n         MVI   AUTOMOVE,X'A2'\n         B     TESTTEST\nGORIGHT  MVI   THISOPTN,ROK\n         MVI   AUTOMOVE,X'96'\nTESTTEST ICM   R0,B'0011',MAXDEPTH ANY LOOK-AHEAD?\n         BNZ   TESTMOVE            YES, DO IT\n         MVC   DIRCTION,AUTOMOVE   NO, SUPPLY ALGORITHM'S DECISION\n         B     MOVETAIL            AND TAKE IT\n         EJECT\n*------- WORMOMATIC - LOOK-AHEAD.\n         SPACE 1\nTESTMOVE MVC   DECISION,THISOPTN   GET PRE-DETERMINED INITIAL DECISION\n         MVC   TESTGROW,GROWSIZE   COPY GROWSIZE FOR FUTURE PROJECTIONS\n         MVI   FREEZER,0           INDICATE NO FOOD EATEN ON TRIAL YET\n         MVI   FOODMOVE,0\n         XR    R0,R0\n         STH   R0,DECDEPTH\n         STH   R0,MOVDEPTH         RESET DEPTH MARKERS\n         LH    R1,SCORE\n         LA    R1,8+10(,R1)        GET MAXIMUM FORESEEABLE WORM LENGTH\n         STH   R1,TGTDEPTH         NO POINT LOOKING BEYOND THIS\n         L     R10,LOOKAHED        POINT TO TEST MOVES SAVE AREA\n         L     R2,TAILADDR         POINT TO TAIL IN BUFFER\n         L     R3,HEADADDR         POINT TO HEAD IN BUFFER\n         B     TESTENTY            ENTRY POINT FOR FIRST TEST\n         SPACE 1\nTESTTAIL LA    R10,8(,R10)         POINT TO THIS TEST MOVE'S ENTRY\nTESTENTY L     R1,MOVECNTR\n         LA    R1,1(,R1)           INCREMENT TEST MOVE COUNTER\n         ST    R1,MOVECNTR\n         LH    R1,MOVDEPTH\n         LA    R1,1(,R1)           INCREMENT DEPTH COUNTER\n         STH   R1,MOVDEPTH\n         CH    R1,HOLDEPTH         LOCAL MAXIMUM DEPTH?\n         BNH   NOTNEWHI            NO\n         STH   R1,HOLDEPTH         YES, SAVE IT\nNOTNEWHI LR    R1,R2               SAVE TAIL ADDRESS\n         ICM   R0,B'1111',TESTGROW EATEN RECENTLY?\n         BNZ   GROWTEST            YES, GROW A BIT\n         ICM   R1,B'1000',0(R2)    SAVE TAIL CHARACTER\n         CLI   0(R2),X'A4'         TAIL TO GO UP?\n         BE    TTSTUP              YES\n         CLI   0(R2),X'83'         TAIL TO GO DOWN?\n         BE    TTSTDOWN            YES\n         CLI   0(R2),X'A2'         TAIL TO GO LEFT?\n         BE    TTSTLEFT            YES\n         CLI   0(R2),X'96'         TAIL TO GO RIGHT?\n         BE    TTSTRITE            YES\n         MVI   BUFFER+FLGPOS,C'4'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nTTSTRITE LA    R2,1(,R2)           TAIL TO GO RIGHT - POINT TO NEW TAIL\n         B     TTSTDONE            NEW TAIL POSITION NOW CALCULATED\nTTSTLEFT BCTR  R2,0                POINT TO NEW TAIL\n         B     TTSTDONE            NEW TAIL POSITION NOW CALCULATED\nTTSTDOWN AL    R2,COLUMNS          POINT TO NEW TAIL\n         B     TTSTDONE            NEW TAIL POSITION NOW CALCULATED\nTTSTUP   SL    R2,COLUMNS          POINT TO NEW TAIL\nTTSTDONE MVI   0(R1),C' '          BLANK OLD TAIL\n         B     TESTHEAD            NOW MOVE THE HEAD\nGROWTEST BCTR  R0,0                DECREMENT SIZE-TO-GROW COUNTER\n         ST    R0,TESTGROW\n         SPACE 1\nTESTHEAD ST    R1,0(,R10)          STORE OLD TAIL PARTICULARS\n         ST    R3,4(,R10)          STORE OLD HEAD ADDRESS\n         CLI   DECISION,UOK        CURRENTLY MOVING UP?\n         BE    HTSTUP\n         CLI   DECISION,DOK        CURRENTLY MOVING DOWN?\n         BE    HTSTDOWN\n         CLI   DECISION,LOK        CURRENTLY MOVING LEFT?\n         BE    HTSTLEFT\n         CLI   DECISION,ROK        CURRENTLY MOVING RIGHT?\n         BE    HTSTRITE\n         MVI   BUFFER+FLGPOS,C'5'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nHTSTRITE MVI   0(R3),X'96'         OVERWRITE OLD HEAD IN BUFFER\n         LA    R3,1(,R3)           POINT TO NEW HEAD ADDRESS\n         B     TRIALHED\nHTSTLEFT MVI   0(R3),X'A2'         OVERWRITE OLD HEAD IN BUFFER\n         BCTR  R3,0                POINT TO NEW HEAD ADDRESS\n         B     TRIALHED\nHTSTDOWN MVI   0(R3),X'83'         OVERWRITE OLD HEAD IN BUFFER\n         AL    R3,COLUMNS          GET NEW HEAD ADDRESS\n         B     TRIALHED\nHTSTUP   MVI   0(R3),X'A4'         OVERWRITE OLD HEAD IN BUFFER\n         SL    R3,COLUMNS          GET NEW HEAD ADDRESS\nTRIALHED MVI   FOODFLAG,0          CLEAR A BYTE\n         CLI   0(R3),C' '          EMPTY SPOT?\n         BE    TESTEVAL            YES\n         CLI   0(R3),C'0'          TARGET NUMBER?\n         BH    TESTFOOD            YES\n         MVI   BUFFER+FLGPOS,C'\u00ac'  NO, CRASH IF CRASH (INVALID CHAR)\n         B     SHOWFAIL            SHOW CURRENT STATUS\nTESTFOOD MVI   FOODFLAG,X'40'      REMEMBER EATING FOOD\n         MVI   FOODMOVE,X'40'      REMEMBER IT AS A POSSIBILITY\n         ST    R3,FREEZER          SAVE THE WORM FOOD IN THE FRIDGE\n         MVC   FREEZER(1),0(R3)\n         XR    R1,R1\n         NI    0(R3),X'0F'         GET NUMERIC PART\n         IC    R1,0(,R3)\n         LA    R1,11(,R1)          CATER FOR NEW NUMBER(S) NEAR HERE\n         A     R1,TESTGROW         UPDATE COUNT-BEFORE-TAIL-MOVES\n         ST    R1,TESTGROW\n         SPACE 1\nTESTEVAL MVI   0(R3),C'@'          SUPPLY NEW HEAD IN BUFFER\n         TM    WORMFLAG,DBUG       IN DEBUG MODE?\n         BZ    SKPTSCRN            NO, SKIP SCREEN TEST DISPLAY\n         MVI   BUFFER+FLGPOS,C'T'  INDICATE TEST SCREEN IMAGE\n         L     R4,LIFEADDR         POINT TO COUNTER IN SCREEN IMAGE\n         LH    R0,MOVDEPTH         GET CURRENT DEPTH\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  6(3,R4),WORK+6(2)   SHOW MAXIMUM LIFETIME\n         LH    R0,HOLDEPTH         GET DEEPEST SO FAR\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  11(3,R4),WORK+6(2)  SHOW MAXIMUM LIFETIME\n         LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           REFRESH ENTIRE SCREEN IMAGE\n         MVI   BUFFER+FLGPOS,C'X'  RESTORE DISPLAY TYPE INDICATOR\n         MVC   6(8,R4),5(R4)       ERASE DISPLAY OF INTERNAL COUNTERS\n*        STIMER WAIT,BINTVL=TEN    WAIT A DECISECOND\nSKPTSCRN L     R1,COLUMNS\n         XR    R4,R4               ZERO POSSIBLE MOVE DETAILS\n         LA    R15,1(,R3)\n         CLR   R15,R2              ADDRESS OF TAIL?\n         BNE   TSTRNTAL            NO\n         ICM   R0,B'1111',TESTGROW TAIL TO BE DELETED?\n         BZ    TSTRISOK            YES, RIGHT IS OKAY\n         B     TSTRISBD            NO, RIGHT WILL CAUSE A COLLISION\nTSTRNTAL CLI   1(R3),C'0'          FOUND THE WORM FOOD?\n         BH    TSTRISOK            YES, RIGHT IS OKAY\n         CLI   1(R3),C' '          FOUND A BLANK?\n         BNE   TSTRISBD            NO\nTSTRISOK LA    R4,16+ROK(,R4)      YES, RIGHT IS POSSIBLE\nTSTRISBD BCTR  R3,0                POINT TO \"LEFT\" POSITION ADDRESS\n         CLR   R3,R2               ADDRESS OF TAIL?\n         BNE   TSTLNTAL            NO\n         ICM   R0,B'1111',TESTGROW TAIL TO BE DELETED?\n         BZ    TSTLISOK            YES, LEFT IS OKAY\n         B     TSTLISBD            NO, LEFT WILL CAUSE A COLLISION\nTSTLNTAL CLI   0(R3),C'0'          FOUND THE WORM FOOD?\n         BH    TSTLISOK            YES, LEFT IS OKAY\n         CLI   0(R3),C' '          FOUND A BLANK?\n         BNE   TSTLISBD            NO\nTSTLISOK LA    R4,16+LOK(,R4)      YES, LEFT IS POSSIBLE\nTSTLISBD LA    R3,1(,R3)           GET CURRENT ADDRESS AGAIN\n         SLR   R3,R1               POINT TO \"UP\" POSITION ADDRESS\n         LA    R0,DTLSTART         POINT TO LOGICAL TOP LEFT CORNER\n         AL    R0,COLUMNS          TO LEFT BORDER OF 1ST PLAY LINE\n         CR    R0,R3               COMPARE WITH NEW HEAD ADDRESS\n         BH    TSTUISBD            WOULD CRASH INTO INFO LINE\n         CLR   R3,R2               ADDRESS OF TAIL?\n         BNE   TSTUNTAL            NO\n         ICM   R0,B'1111',TESTGROW TAIL TO BE DELETED?\n         BZ    TSTUISOK            YES, UP IS OKAY\n         B     TSTUISBD            NO, UP WILL CAUSE A COLLISION\nTSTUNTAL CLI   0(R3),C'0'          FOUND THE WORM FOOD?\n         BH    TSTUISOK            YES, UP IS OKAY\n         CLI   0(R3),C' '          FOUND A BLANK?\n         BNE   TSTUISBD            NO\nTSTUISOK LA    R4,16+UOK(,R4)      YES, UP IS POSSIBLE\nTSTUISBD ALR   R3,R1               GET CURRENT ADDRESS AGAIN\n         ALR   R3,R1               POINT TO \"DOWN\" POSITION ADDRESS\n         C     R3,LASTLOOK         COMPARE WITH BOTTOM BORDER ADDRESS\n         BH    TSTDISBD            WOULD CRASH INTO INFO LINE\n         CLR   R3,R2               ADDRESS OF TAIL?\n         BNE   TSTDNTAL            NO\n         ICM   R0,B'1111',TESTGROW TAIL TO BE DELETED?\n         BZ    TSTDISOK            YES, DOWN IS OKAY\n         B     TSTDISBD            NO, DOWN WILL CAUSE A COLLISION\nTSTDNTAL CLI   0(R3),C'0'          FOUND THE WORM FOOD?\n         BH    TSTDISOK            YES, DOWN IS OKAY\n         CLI   0(R3),C' '          FOUND A BLANK?\n         BNE   TSTDISBD            NO\nTSTDISOK LA    R4,16+DOK(,R4)      YES, DOWN IS POSSIBLE\nTSTDISBD SLR   R3,R1               GET CURRENT ADDRESS AGAIN\n         STC   R4,4(,R10)          SAVE DIRECTION DETAILS FOR THIS MOVE\n         OC    4(1,R10),FOODFLAG   SET FOOD FLAG IF APPROPRIATE\n         LTR   R4,R4               IS THE WORM TRAPPED?\n         BNZ   MAXCHECK            NO, PRESS ON\n         TM    WORMFLG2,XHST       YES, IN EXHAUSTIVE TEST MODE?\n         BO    BACKOUT             YES, TAKE BACK THE PREVIOUS DECISION\n         BAL   R14,UNDOTEST        NO, RESTORE BUFFER IMAGE\n         L     R15,DECNADDR        POINT TO CURRENT DIRTBL ENTRY\n         LA    R15,4(,R15)         POINT TO THE NEXT ONE\n         ST    R15,DECNADDR        SAVE\n         ICM   R15,B'0011',DECDEPTH ANY DECISIONS?\n         BZ    YAEORNAY            NO, TUNNEL FAST PATH EXIT\n         LA    R15,EODCNTBL        POINT TO END OF DECNTABL\n         C     R15,DECNADDR        HAVE WE REACHED IT?\n         BNE   TESTMOVE            NO, RETRY TEST WITH DIFFERENT ENTRY\n         B     YAEORNAY            YES, JUDGEMENT TIME\nMAXCHECK LA    R1,999              GET MAXIMUM LOOK-AHEAD CAPACITY\n         CH    R1,MOVDEPTH         HAS IT BEEN REACHED?\n         BE    TAKEPATH            YES, TERMINATE LOOK-AHEAD\n         CLC   MOVDEPTH,TGTDEPTH   LOOKED BEYOND LENGTH OF WORM?\n         BH    TAKEPATH            YES, THAT IS FAR ENOUGH\n         TM    4(R10),X'20'        NO, MORE THAN ONE POSSIBILITY?\n         BZ    CHOOSDIR            NO, IGNORE MAXDEPTH FOR TUNNELS\n         TM    AUTOOPTS,X'02'      MORE THAN ONE ORIGINAL ALTERNATIVE?\n         BO    CRUNCHON            YES, CONTINUE CRUNCHING\n         MVI   FUTRCOLR,X'F1'      CONDITION BLUE FOR QUICK THINKING\n         MVI   REDORPNK+1,X'F2'    ENFORCE RED FOR NEXT CONDITION RED\n         B     TRUEBLUE            TAKE THE ONLY POSSIBLE PATH\nCRUNCHON LH    R1,DECDEPTH         GET CURRENT DECISION-POINT DEPTH\n         LA    R1,1(,R1)           INCREMENT IT\n         STH   R1,DECDEPTH         SAVE IT\n         TM    WORMFLG2,XHST       IN EXHAUSTIVE TEST MODE?\n         BZ    CHOOSDIR            NO, DECDEPTH IRRELEVANT\n         CH    R1,MAXDEPTH         LOOKED AHEAD FAR ENOUGH?\n         BNL   TAKEPATH            YES, HAPPY WITH THIS ONE\nCHOOSDIR LA    R0,4                FOUR POSSIBLE DIRECTIONS\n         L     R15,DECNADDR        TO CURRENT DECISION TABLE ENTRY\nDECNLOOP IC    R1,0(,R15)          LOAD TRIAL DECISION\n         EX    R1,DIRNTEST         IS THIS DIRECTION POSSIBLE?\n         BO    DECODDIR            YES, BUT WHICH WAY IS \"THIS\"?\n         LA    R15,1(,R15)         POINT TO NEXT POSSIBLE CHOICE\n         BCT   R0,DECNLOOP         TRY IT\n         MVI   BUFFER+FLGPOS,C'6'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\n         SPACE 1\nDIRNTEST TM    4(R10),*-*          <<< EXECUTED >>>\n         SPACE 1\nDECODDIR STC   R1,WORK             EXAMINE DECISION CHOICE\n         TM    WORK,ROK            IS RIGHT POSSIBLE FROM HERE?\n         BO    DECIDER             YES, TAKE IT\n         TM    WORK,LOK            IS LEFT POSSIBLE FROM HERE?\n         BO    DECIDEL             YES, TAKE IT\n         TM    WORK,DOK            IS DOWN POSSIBLE FROM HERE?\n         BO    DECIDED             YES, TAKE IT\n         TM    WORK,UOK            IS UP POSSIBLE FROM HERE?\n         BO    DECIDEU             YES, TAKE IT\n         MVI   BUFFER+FLGPOS,C'6'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\n         SPACE 1\nDECIDEU  MVI   DECISION,UOK        TRY UP\n         B     TESTTAIL\nDECIDER  MVI   DECISION,ROK        TRY RIGHT\n         B     TESTTAIL\nDECIDEL  MVI   DECISION,LOK        TRY LEFT\n         B     TESTTAIL\nDECIDED  MVI   DECISION,DOK        TRY DOWN\n         B     TESTTAIL\n         SPACE 1\nBACKOUT  MVI   0(R3),C' '          ERASE HEAD\n         L     R3,4(,R10)          GET PREVIOUS HEAD ADDRESS\n         CLI   0(R3),X'A4'         WAS THE DECISION UP?\n         BE    DECNWASU            YES\n         CLI   0(R3),X'83'         WAS THE DECISION DOWN?\n         BE    DECNWASD            YES\n         CLI   0(R3),X'A2'         WAS THE DECISION LEFT?\n         BE    DECNWASL            YES\n         CLI   0(R3),X'96'         WAS THE DECISION RIGHT?\n         BE    DECNWASR            YES\n         MVI   BUFFER+FLGPOS,C'7'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nDECNWASU MVI   DECISION,UOK        UP\n         B     FIXHEAD\nDECNWASR MVI   DECISION,ROK        RIGHT\n         B     FIXHEAD\nDECNWASL MVI   DECISION,LOK        LEFT\n         B     FIXHEAD\nDECNWASD MVI   DECISION,DOK        DOWN\nFIXHEAD  MVI   0(R3),C'@'          RESTORE HEAD\n         ICM   R2,B'1111',0(R10)   GET PREVIOUS TAIL ADDRESS\n         BNM   SHRINK              WORM WAS GROWING SO TAIL NOT ERASED\n         XR    R1,R1               NOT GROWING SO ZERO TESTGROW\n         STCM  R2,B'1000',0(R2)    RESTORE ERASED TAIL\n         B     BACKDOUT            BEFORE IMAGE RESTORED\nSHRINK   L     R1,TESTGROW\n         LA    R1,1(,R1)           TAIL DID NOT MOVE\nBACKDOUT ST    R1,TESTGROW\n         LA    R2,0(,R2)           RESTORE TAIL ADDRESS FORMAT\n         LA    R3,0(,R3)           RESTORE HEAD ADDRESS FORMAT\n         LH    R0,MOVDEPTH         GET CURRENT DEPTH\n         BCTR  R0,0                DECREMENT FOR BACK-OUT\n         STH   R0,MOVDEPTH         SAVE NEW DEPTH\n         TM    4(R10),X'20'        WAS THIS A DECISION POINT?\n         BZ    GOTDECPT            NO\n         LH    R0,DECDEPTH         YES, GET CURRENT DECISION DEPTH\n         BCTR  R0,0                DECREMENT FOR BACK-OUT\n         STH   R0,DECDEPTH         SAVE NEW DECISION DEPTH\nGOTDECPT TM    4(R10),X'40'        FOOD EATEN HERE?\n         BZ    FOODISOK            NO\n         ICM   R1,B'1111',FREEZER  YES\n         STCM  R1,B'1000',0(R1)    RESTORE FOOD\nFOODISOK MVI   0(R3),C'@'          SUPPLY NEW HEAD IN BUFFER\n         TM    WORMFLAG,DBUG       IN DEBUG MODE?\n         BZ    SKPBSCRN            NO, SKIP SCREEN TEST DISPLAY\n         MVI   BUFFER+FLGPOS,C'B'  INDICATE BACKED-OUT SCREEN IMAGE\n         L     R4,LIFEADDR         POINT TO COUNTER IN SCREEN IMAGE\n         LH    R0,MOVDEPTH         GET CURRENT DEPTH\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  6(3,R4),WORK+6(2)   SHOW MAXIMUM LIFETIME\n         LH    R0,HOLDEPTH         GET DEEPEST SO FAR\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  11(3,R4),WORK+6(2)  SHOW MAXIMUM LIFETIME\n         LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           REFRESH ENTIRE SCREEN IMAGE\n         MVI   BUFFER+FLGPOS,C'X'  RESTORE DISPLAY TYPE INDICATOR\n         MVC   6(8,R4),5(R4)       ERASE DISPLAY OF INTERNAL COUNTERS\n*       STIMER WAIT,BINTVL=TEN     WAIT A DECISECOND\nSKPBSCRN LA    R15,8               GET ENTRY SIZE\n         SLR   R10,R15             POINT TO PREVIOUS ENTRY\n         C     R10,LOOKAHED        DONE EVERY POSSIBLE BRANCH?\n         BL    YAEORNAY            YES, JUDGEMENT TIME\n         XC    4(1,R10),DECISION   INHIBIT PREVIOUSLY SELECTED DECISION\n         TM    4(R10),X'0F'        ANY OTHER DECISIONS POSSIBLE?\n         BZ    BACKOUT             NO, BACK-OUT ANOTHER MOVE\n         B     CHOOSDIR            YES, TAKE A DIFFERENT PATH\n         SPACE 1\nYAEORNAY LA    R2,POSPATHS\nGTPOSPTH CLI   2(R2),0             BEEN HERE BEFORE?\n         BE    MTPOSPTH            NO, EMPTY POSSIBLE PATH ENTRY\n         LA    R2,4(,R2)           YES, TRY NEXT ENTRY\n         B     GTPOSPTH\nMTPOSPTH MVC   0(2,R2),HOLDEPTH    GET POTENTIAL LIFETIME LEFT\n         MVC   2(1,R2),AUTOMOVE    GET ORIGINAL MOVE\n         L     R1,LOOKAHED\n         MVC   3(1,R2),4(R1)       GET ORIGINAL MOVE'S STATS\n         TM    WORMFLG2,XHST       IN EXHAUSTIVE TEST MOVE SEARCH MODE?\n         BZ    INHIBNOT            DON'T SHOW LOOK-AHEAD'S INFLUENCE\n         OC    3(1,R2),FOODMOVE    YES, SET FOOD FLAG IF APPROPRIATE\n         LH    R1,HEADLOC          GET HEAD LOCATION\n         CLI   AUTOMOVE,X'A4'      IS DEADEND UP?\n         BE    NOGOUP              YES\n         CLI   AUTOMOVE,X'83'      IS DEADEND DOWN?\n         BE    NOGODOWN            YES\n         CLI   AUTOMOVE,X'A2'      IS DEADEND LEFT?\n         BE    NOGOLEFT            YES\n         CLI   AUTOMOVE,X'96'      IS DEADEND RIGHT?\n         BE    NOGORITE            YES\n         MVI   BUFFER+FLGPOS,C'8'  TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nNOGORITE LA    R1,1(,R1)           RIGHT, ADD 1 TO LOCATION\n         B     NOGOSIGN\nNOGOLEFT BCTR  R1,0                LEFT, SUBTRACT 1 FROM LOCATION\n         B     NOGOSIGN\nNOGODOWN AL    R1,COLUMNS          DOWN, ADD NUMBER OF COLUMNS\n         B     NOGOSIGN\nNOGOUP   SL    R1,COLUMNS          UP, SUBTRACT NUMBER OF COLUMNS\nNOGOSIGN STH   R1,TOLOC            INDICATE WHICH PATH WAS REJECTED\n         BAL   R14,CALCPOSI\n         LH    R8,TPUTLEN          GET CURRENT TPUT LENGTH\n         LA    R9,UPDTSTRM(R8)     POINT TO CURRENT BUFFER POSITION\n         MVI   0(R9),X'11'         SBA\n         STCM  R0,B'0011',1(R9)\n         TM    GRAFLAGS,GEOK       TRANSMIT GRAPHIC ESCAPE?\n         BZ    SHOWNOT             NO, SEND STANDARD CHARACTERS\n         TM    WORMFLAG,GRAF       GRAPHIC MODE ON?\n         BZ    SHOWNOT             NO\n         MVC   3(5,R9),=X'28420008B6'\n         MVC   5(1,R9),WORMCOLR    USE THE CURRENT COLOUR\n         MVC   8(4,R9),STRMTRLR    ON DATA STREAM TRAILER FOOTPRINT\n         LA    R0,12(,R8)          GET DATA STREAM LENGTH\n         B     SHOWNOGO\nSHOWNOT  MVI   3(R9),C'\u00ac'\n         MVC   4(4,R9),STRMTRLR    ON DATA STREAM TRAILER FOOTPRINT\n         LA    R0,8(,R8)           GET DATA STREAM LENGTH\nSHOWNOGO LA    R1,UPDTSTRM         POINT TO DATA STREAM START\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT   (1),(0),R           DISPLAY \"DISCARDED PATH\" SIGN\n         LA    R0,1                RESET ACCUMULATED\n         STH   R0,TPUTLEN            UPDATE DATA STREAM\n         TM    GRAFLAGS,RVRS       IN REVERSE? (VIDEO, NOT GEAR)\n         BZ    INHIBNOT            NO\n         MVC   UPDTSTRM+1(3),REVERSE\n         MVI   TPUTLEN+1,4         YES\nINHIBNOT TM    AUTOOPTS+1,X'02'    MORE THAN ONE MOVE POSSIBLE?\n         BZ    DEADED              NO, OOOEEE GOOOEEE\n         XC    DIRFLAGS,THISOPTN   YES, DELETE OPTION OF THIS PATH\n         CLI   THISOPTN,ROK        DID WE DELETE RIGHT?\n         BNE   THISNOTR            NO\n         NI    DIRFLAGS,255-RGD    YES, ALSO RESET RIGHT-GOOD FLAG\n         B     THISNOTL            OBVIOUSLY LEFT WASN'T DELETED\nTHISNOTR CLI   THISOPTN,LOK        DID WE DELETE LEFT?\n         BNE   THISNOTL            NO\n         NI    DIRFLAGS,255-LGD    YES, ALSO RESET LEFT-GOOD FLAG\nTHISNOTL LH    R0,AUTOOPTS         GET SAVED POSSIBLE MOVES COUNTER\n         BCTR  R0,0                DECREMENT\n         STH   R0,AUTOOPTS         RESTORE\n         B     PONDORNT            EXAMINE ALTERNATE PATH\n         SPACE 1\nDEADED   LA    R1,POSPATHS         POINT TO CHOICE TABLE\nREDORPNK MVI   FUTRCOLR,X'F2'      CONDITION RED - THE END IS NIGH\n         XI    REDORPNK+1,X'01'    TOGGLE BLUE (TOGGLE RED AND PINK)\n         TM    WORMFLG2,XHST       IN EXHAUSTIVE TEST MOVE SEARCH MODE?\n         BZ    FOODLESS            NO, IGNORE SCORING POSSIBILITIES\n         LA    R0,3                MAX. NUMBER OF POSSIBLE DIRECTIONS\nPTHCHOIC TM    3(R1),X'40'         CHANCE TO INCREASE SCORE HERE?\n         BO    GO4SCORE            TAKE IT (ALWAYS OFF IF XHST OFF)\n         LA    R1,4(,R1)           NO, TRY NEXT ENTRY\n         BCT   R0,PTHCHOIC\n         LA    R1,POSPATHS         GO FOR LONGEST DURATION CHOICE\nFOODLESS CLC   0(2,R1),POSPATHS+4  COMPARE FIRST WITH SECOND\n         BNL   POSPOKAY\n         LA    R1,POSPATHS+4       SECOND IS LONGER\nPOSPOKAY CLC   0(2,R1),POSPATHS+8  COMPARE LONGER WITH THIRD\n         BNL   GO4SCORE            ALREADY HAVE LONGEST DEATH MARCH\n         LA    R1,POSPATHS+8       THIRD IS LONGER\nGO4SCORE MVC   DIRCTION,2(R1)      SUPPLY WORMOMATIC'S FINAL DECISION\n         LH    R0,0(,R1)           GET MAXIMUM TIME LEFT\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         LH    R15,PRVDEPTH        GET PREVIOUS MAX LIFE EXPECTANCY\n         STH   R0,PRVDEPTH         SAVE FOR NEXT TIME\n         L     R1,LIFEADDR         POINT TO COUNTER IN SCREEN IMAGE\n         UNPK  1(3,R1),WORK+6(2)   SHOW MAXIMUM LIFETIME\n         MVC   4(2,R1),=C'++'\n         L     R0,MOVECNTR         GET THE NUMBER OF MOVES TESTED\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  6(8,R1),WORK+3(5)\n         OI    WORMFLG2,FRTN       IN FORTUNE-TELLING MODE\n         BCTR  R15,0               ADJUST PRVDEPTH FOR ONE MOVE LATER\n         CH    R15,PRVDEPTH        ANY DRAMATIC DROP?\n         BNH   MOVETAIL            NO, RETURN\n         MVI   FUTRCOLR,X'F6'      CONDITION YELLOW, LOOKING SICK\n         B     MOVETAIL            RETURN\n         SPACE 1\nTAKEPATH MVI   FUTRCOLR,X'F4'      CONDITION GREEN, THE END IS NOT NIGH\nTRUEBLUE BAL   R14,UNDOTEST        RESTORE BUFFER IMAGE\n         MVC   DIRCTION,AUTOMOVE   SUPPLY WORMOMATIC'S FINAL DECISION\n         LH    R1,HOLDEPTH         GET MIMIMUM MAXIMUM TIME LEFT\n         STH   R1,PRVDEPTH         SAVE FOR NEXT TIME\n         CVD   R1,WORK\n         OI    WORK+7,X'0F'\n         L     R1,LIFEADDR         POINT TO COUNTER IN SCREEN IMAGE\n         UNPK  1(3,R1),WORK+6(2)   SHOW MAXIMUM LIFETIME\n         MVC   4(2,R1),=C'++'\n         L     R0,MOVECNTR         GET THE NUMBER OF MOVES TESTED\n         CVD   R0,WORK\n         OI    WORK+7,X'0F'\n         UNPK  6(8,R1),WORK+3(5)\n         OI    WORMFLG2,FRTN       IN FORTUNE-TELLING MODE\n         TM    WORMFLAG,DBUG       IN DEBUG MODE?\n         BZ    MOVETAIL            NO, RETURN\n         MVI   BUFFER+FLGPOS,C'R'  INDICATE RESTORED SCREEN IMAGE\n         LA    R1,BUFFER           POINT TO SCREEN IMAGE START\n         L     R0,IMAGESIZ         GET DATA STREAM LENGTH\n         ICM   R1,B'1000',=X'0B'   LOAD FULLSCREEN,HOLD FLAGS\n        TPUT  (1),(0),R            REFRESH ENTIRE SCREEN IMAGE\n         MVI   BUFFER+FLGPOS,C'X'  RESTORE DISPLAY TYPE INDICATOR\n*       STIMER WAIT,BINTVL=TEN     WAIT A DECISECOND\n         B     MOVETAIL            LOGICAL END OF WORMOMATIC SUBROUTINE\n         SPACE 1\nUNDOTEST L     R0,LOOKAHED         ADDR OF LAST ENTRY TO BE RESTORED\n         LA    R15,8               GET ENTRY SIZE\nUNDOLOOP MVI   0(R3),C' '          ERASE HEAD\n         L     R3,4(,R10)          GET PREVIOUS HEAD ADDRESS\n         ICM   R1,B'1111',0(R10)   GET PREVIOUS TAIL ADDRESS\n         BNM   SHRINKIT            WORM WAS GROWING SO TAIL NOT ERASED\n         STCM  R1,B'1000',0(R1)    RESTORE ERASED TAIL\nSHRINKIT SLR   R10,R15             POINT TO PREVIOUS ENTRY\n         CLR   R0,R10              RESTORED FIRST ENTRY?\n         BNH   UNDOLOOP            NOT YES, CONTINUE\n         CLM   R3,B'0111',HEADADDR+1 SUCCESSFUL RESTORE?\n         BE    UNDONHED            YES\n         MVI   BUFFER+FLGPOS,C'9'  NO, TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nUNDONHED CLM   R1,B'0111',TAILADDR+1 SUCCESSFUL RESTORE?\n         BE    UNDOOKAY            YES\n         MVI   BUFFER+FLGPOS,C'A'  NO, TRAP ERROR\n         B     SHOWFAIL            SHOW CURRENT STATUS\nUNDOOKAY MVI   0(R3),C'@'          RESTORE HEAD (COSMETIC COMPLETENESS)\n         XR    R15,R15             ZERO RETURN CODE\n         ICM   R1,B'1111',FREEZER  ANY FOOD TO RESTORE?\n         BNMR  R14                 NO, RETURN\n         STCM  R1,B'1000',0(R1)    YES, RESTORE EATEN NUMBER\n         LA    R15,X'40'           INDICATE THIS IN RETURN CODE\n         BR    R14\n         EJECT\n*------- ENCODE SCREEN LOCATION TO 3270 BUFFER ADDRESS.\n         SPACE 1\nCALCPOSI LH    R0,TOLOC            GET CODE FOR 3270 BUFFER ADDRESS\n         CH    R0,=H'4095'         LOCATION GREATER THAN 4K (12 BITS)?\n         BHR   R14                 YES, NO CONVERSION TO BE DONE\n         STC   R0,WORK+1           NO, DO ORIGINAL 3270 ADDRESSING\n         NI    WORK+1,B'00111111'  GET LOW-ORDER SIX-BIT NUMBER\n         SRL   R0,6\n         STC   R0,WORK             GET HIGH-ORDER SIX-BIT NUMBER\n         TR    WORK(2),TABLE       CONVERT TO 3270 DATA STREAM CHARS\n         ICM   R0,B'0011',WORK     SAVE IN BOTTOM TWO BYTES OF R0\n         BR    R14                 RETURN TO MAINLINE\n         SPACE 1\nCHAREPET MVC   1(*-*,R1),0(R1)     <<< EXECUTED >>>\n         SPACE 1\nTABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\nCHARZERO DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         EJECT\n*------- ATTENTION EXIT AND MACRO LIST FORMS.\n         SPACE 1\n         USING ATTNEXIT,15\nATTNEXIT STM   R14,R12,12(R13)     SAVE REGISTERS\n         L     R2,8(R1)            POINT TO WORM DYNAMIC COMMON AREA\n         OI    WORMFLG2-WORMCMN(R2),ATTN TURN ON THE ATTENTION FLAG\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 LEAVE ATTENTION EXIT\n         DROP  15\n         SPACE 1\nSTAXON   STAX  ATTNEXIT,USADDR=*-*,MF=L\nMDSTSUP  MODESET MODE=SUP,MF=L\nMDSTSUPZ MODESET MODE=SUP,KEY=ZERO,MF=L\nMDSTPRB  MODESET MODE=PROB,MF=L\nMDSTPRBN MODESET MODE=PROB,KEY=NZERO,MF=L\n         EJECT\n*------- WORM OUTBOARD AND OCCUPANCY RESOURCE MEASUREMENT.\n         SPACE 1\nWOORM   TIME   BIN                 GET THE TIME AFTER THE TPUT\n         LR    R1,R0               COPY IT\n         SR    R1,R2               GET ELAPSED TIME OF TPUT\n         BP    OUTBRDTM            POSITIVE AS EXPECTED\n         A     R1,=F'8640000'      HANDLE MIDNIGHT DURING TPUT\nOUTBRDTM A     R1,TPUTTIME         ADD ACCUMULATED TPUT ELAPSED TIME\n         ST    R1,TPUTTIME         SAVE NEW VALUE\n         LA    R1,1\n         A     R1,TPUTCNTR         INCREMENT TPUT HOLD=YES COUNTER\n         ST    R1,TPUTCNTR         SAVE NEW VALUE\n         SPACE 1\n         CLI   OSBITS,CVT8AOS2     OSIV/F4?\n         BE    FUJITSUT            YES\n         USING PSA,R0\n         L     R1,PSAAOLD          POINT TO THE CURRENT ASCB\n         DROP  R0\n         USING ASCB,R1\n         LM    R8,R9,ASCBEJST      LOAD CURRENT TCB TIME\n         DROP  R1\n         B     TCBCALC\n         USING PSA,R0\nFUJITSUT L     R1,PSALCCAR         POINT TO REAL ADDRESS OF LCCA\n         DROP  R0\n         USING LCCA,R1\n         LM    R8,R9,LCCAPGR3      LOAD CURRENT TCB TIME\n         DROP  R1\nTCBCALC  SRDL  R8,12               CONVERT TO MICROSECONDS\n         D     R8,=F'10000'        CONVERT TO CENTISECONDS\n         LR    R8,R9               COPY CURRENT TCB CENTISECONDS\n         L     R10,TCBTIME         GET PREVIOUS TCB TIME\n         SR    R9,R10              GET CHANGE IN TCB TIME\n         ST    R8,TCBTIME          SAVE CURRENT TCB TIME\n         LR    R1,R0               COPY CURRENT TIME AGAIN\n         S     R0,BINTIME          SUBTRACT PREVIOUS TIME\n         ST    R1,BINTIME          SAVE CURRENT TIME\n         LTR   R10,R10             FIRST TIME IN WOORM?\n         BZR   R14                 YES, SO RETURN\n         SPACE 1\n         LTR   R3,R0               TIME-OF-DAY INCREASED?\n         BP    NOPUMPKN            YES, GOOD\n         A     R3,=F'8640000'      NO, MIDNIGHT HAS TRANSPIRED\n         LA    R1,PMPKNMSG         WORMOGLODYTES BEWARE!\n         LA    R0,L'PMPKNMSG\n        TPUT   (1),(0),R           YOU MIGHT TURN INTO A PUMPKIN...\nNOPUMPKN ICM   R0,B'1111',TGTPCNT  IS TARGET TCB PERCENTAGE ZERO?\n         BZR   R14                 YES, SO HOG THAT CPU\n         MVC   DELAY,TEN           NO, REINITIALIZE STIMER DELAY\n         TM    WORMFLAG,AUTO       IN AUTO MODE?\n         BZR   R14                 NO, DON'T RETARD MANUAL MODE\n         M     R8,=F'100'          YES, PREPARE FOR PERCENTAGE\n         DR    R8,R0               GET TARGET ELAPSED TIME\n         SR    R9,R3               SUBTRACT ACTUAL FROM TARGET ELAPSED\n         BNPR  R14                 TARGET NOT GREATER SO RETURN\n         TM    WORMFLAG,BLITZ      IN FAST AUTO MODE?\n         BO    WAITHERE            YES, ISSUE AN EXTRA WAIT\n         CLI   OSBITS,CVT8AOS2     OSIV/F4?\n         BE    WAITHERE            YES, ISSUE AN EXTRA WAIT\n         SRL   R9,1                HALVE THE EXTRA TIME FOR EACH WAIT\n         LA    R9,10(,R9)          INCLUDE BASE OF A DECISECOND\n         ST    R9,DELAY            SUPPLY NEW TGET WAIT INTERVAL\n         BR    R14                 EXIT WOORM\nWAITHERE ST    R9,WORK             YES, STORE CENTISECONDS TO WAIT\n        STIMER WAIT,BINTVL=WORK    WAIT FOR THE ELAPSED TIME TO PASS\n         BR    R14                 EXIT WOORM\n         EJECT\n*------- LITERALS AND INITIALIZED VARIABLES.\n         SPACE 1\nCLEARALL DC    XL8'401140403C404000' WCC,SBA,(1,1),RTA,(1,1),NULL\nSTRMTRLR DC    XL4'11404013'       SBA,(1,1),IC\nTERMATTR DC    F'0'                FILLED IN BY GTTERM\nTEN      DC    F'10'               A NUMBER BETWEEN 9 AND 11\nMAXACCUM DC    AL2(L'UPDTSTRM-64)  DATA STREAM LENGTH THRESHOLD\nWASTE    DC    H'0'                FILLED IN BY GTTERM\nMAXDEPTH DC    H'24' (>27 FOR FAST CPUS) DEFAULT MAXIMUM LOOK-AHEAD\nBORDBLDL DC    H'1',H'44'          ONE 44 BYTE ENTRY\nBORDNAME DC    CL8'EWSBTB00'       NAME OF SCOREBOARD MEMBER\nBORDTTR  DC    XL3'000000'         FILLED IN BY BLDL/STOW\nBORDK    DC    XL1'00'             CONCATENATION CODE\nBORDZ    DC    XL1'00'             LOCATION CODE\nBORDC    DC    XL1'00'\nBORDV    DC    XL1'00'             VERSION NUMBER\nBORDM    DC    XL1'00'             REVISION NUMBER\n         DC    XL2'0000'           NOT USED\nBORDCR   DC    XL4'0000000F'       CREATION DATE\nBORDCD   DC    XL4'0000000F'       LAST CHANGE DATE\nBORDCT   DC    XL2'0000'           LAST CHANGE TIME\nBORDSI   DC    XL2'0000'           NUMBER OF LINES CURRENTLY\nBORDIN   DC    XL2'0000'           NUMBER OF LINES INITIALLY\nBORDMD   DC    XL2'0000'           NUMBER OF LINES MODIFIED\nBORDID   DC    XL8'0000000000000000' USERID (10 BYTES FOR SPF)\nUSERLEN  EQU   *-BORDC             USER DATA LENGTH + 1\nPFDATTRS DC    CL8'PFDATTRS'       DDNAME FOR OSIV/F4\nCOLRCHAR DC    X'F7'               START WITH WHITE\nWORMCOLR DC    X'F0'               START WITH NOTHING\nFUTRCOLR DC    X'F4'               START WITH GREEN\nTGETFLAG DC    X'81'               START WITH ASIS,WAIT TGET\nDIRCTION DC    X'00'               NO DIRECTION YET\nPREVMOVE DC    X'96'               AS IF PREVIOUS MOVE WAS RIGHT\nRESETAID DC    X'27F1C3'           ESCAPE,WRITE,WCC\nQUERY    DC    X'F3000501FF02'     WRITE STRUCTURED FIELD,QUERY\nSORRYMSG DC C'SORRY, THIS PROGRAM USES 3270 FULL-SCREEN TERMINAL I/O'\nWACKYMSG DC C'WHAT SORT OF WACKY SCREEN HAVE YOU GOT, BOZO-FEATURES?'\nPMPKNMSG DC    C' CAREFUL!!  YOU MIGHT TURN INTO A PUMPKIN...'\nACRNMMSG DC    C'(WORM=WONDERFUL-ONLINE-RESPONSE-MONITOR)'\nACRNMLEN EQU   *-ACRNMMSG\nDSPMDMSG DC    C'(2,4,5&&6=DISPLAY-MODES)'\nDSPMDLEN EQU   *-DSPMDMSG\nAMAZEMSG DC    CL56'WOW!!!  END-OF-GAME FORCED BY A COMPLETELY FULL SCR+\n               EEN!!'\nPAUSEMSG DC    CL56'SCORING OK.  HIT <ENTER> FOR STATS OR PF12/24 TO CA+\n               NCEL.'\nNTMVSMSG DC    CL56'** THIS IS NOT MVS - YOU ARE LOCKED INTO WORMOMATIC+\n               !! **'\nTIMEXPOS EQU   2                   TERMINATION MESSAGE DETAILS\nTIMEXMSG EQU   *\n         DC    C' AVERAGE TPUT (HOLD=YES) ELAPSED TIME WAS'\nTIMETPUT DC    X'40214B2020'\n         DC    C' SECONDS.   '\nTIMETCB  DC    X'4021204B20'\n         DC    C'% TCB/ELAPSED. '\nTIMEXLEN EQU   *-TIMEXMSG\nSTATSPOS EQU   4\nSTATSMSG EQU   *\nTSOTGETS DC    X'4020202020202120'\n         DC    C' TGETS   '\nTSOTPUTS DC    X'4020202020202120'\n         DC    C' TPUTS   '\nSTATSF4L EQU   *-STATSMSG\nTSOXACTS DC    X'4020202020202120'\n         DC    C' TRANSACTIONS   '\nSTATSLEN EQU   *-STATSMSG\nTSODECRS DC    X'4020202020202120'\n         DC    C' DECREMENTS '\nFUDGELEN EQU   *-STATSMSG\nVALUEPOS EQU   6\nVALUEMSG DC    X'402020202120'\n         DC    C' WAS THE VALUE OF ALL FOOD TARGETS  -  THE AVERAGE FOO+\n               D VALUE WAS'\nVALUEAVG DC    X'40214B2020'\n         DC    C'. '\nVALUELEN EQU   *-VALUEMSG\nTREKPOS  EQU   8\nTREKMSG  DC    X'4020202021204B2020'\n         DC    C' WAS THE AVERAGE NUMBER OF MOVES FOR EACH MEAL. '\nTREKMLEN EQU   *-TREKMSG\nCOVERPOS EQU   10\nCOVERMSG DC    X'402021204B2020'\n         DC    C'% COVERAGE RATING FOR THIS SCREEN. '\nCOVERLEN EQU   *-COVERMSG\nCOLORPOS EQU   12\nCOLORMSG EQU   *\nCMSGHDR  DC    X'2842F5'\n         DC    C' RANDOM COLOUR SELECTIONS: '\nREVERSE  DC    X'2841F2'           SET CHAR HIGHLIGHT TO REVERSE VIDEO\nBLUE     DC    X'2842F1'\nBLUECNT  DC    X'402020202120'\nRED      DC    X'2842F2'\nREDCNT   DC    X'402020202120'\nPINK     DC    X'2842F3'\nPINKCNT  DC    X'402020202120'\nGREEN    DC    X'2842F4'\nGREENCNT DC    X'402020202120'\nTURQ     DC    X'2842F5'\nTURQCNT  DC    X'402020202120'\nYELLOW   DC    X'2842F6'\nYELLOCNT DC    X'402020202120'\nWHITE    DC    X'2842F7'\nWHITECNT DC    X'402020202120'\nCMSGTRLR DC    X'2842F6'\nUNDERSCR DC    X'2841F4'           SET CHAR HIGHLIGHT TO UNDERSCORES\nCOLORLEN EQU   *-COLORMSG\nPREVPOS  EQU   14\nPREVMSG  DC    C' THE TOP WORMOGLODYTE WAS '\nBESTWORM DC    XL8'0000000000000000'\n         DC    C'WITH A SCORE OF'\nPREVSCOR DC    X'402020202120'\n         DC    C' ON'\nPREVDATE DC    X'4021204B202020'\n         DC    C' AT '\nPREVTIME DC    C'HH:MM'\n         DC    C'. '\nPREVMLEN EQU   *-PREVMSG\nTHISPOS  EQU   16\nTHISMSG  DC    C' YOUR SCORE OF'\nTHISSCOR DC    X'402020202120'\n         DC    C' ON'\nTHISDATE DC    X'4021204B202020'\n         DC    C' AT '\nTHISTIME DC    C'HH:MM'\nBDLUKSUF DC    C' DID NOT SURPASS THIS. '\nTHISMLEN EQU   *-THISMSG\nGDLUKSUF DC    C' SURPASSES EVEN THIS!! '\nLUCKPOS  EQU   18\nBDLUKMSG DC    C' HAVE YOU TRIED WORMEX FOR BETTER, HEALTHIER, LONGER W+\n               ORMS? '\nBDLUKLEN EQU   *-BDLUKMSG\nURTOPMSG DC    C' DON''T WORRY, YOU ARE STILL THE TOP WORMOGLODYTE. '\nURTOPLEN EQU   *-URTOPMSG\nGDLUKMSG DC C' CONGRATULATIONS!!  YOU ARE THE NEW TOP WORMOGLODYTE! '\nGDLUKLEN EQU   *-GDLUKMSG\nCHEATPOS EQU   20\nCHEATMSG DC    C' P.S.  TRY DOING IT ALL BY YOURSELF NEXT TIME!  WORMOM+\n               ATIC IS FOR BEGINNERS. '\nCHEATLEN EQU   *-CHEATMSG\nASTERPOS EQU   22\nASTERMSG DC    C'***'\n         DC    X'1D40'             UNPROTECTED LOW-INTENSITY\n         DC    X'13'               INSERT CURSOR\nASTERLEN EQU   *-ASTERMSG\nNOHILITE DC    X'284100'           RESET CHAR HIGHLIGHT\nBLINKING DC    X'2841F1'           SET CHAR HIGHLIGHT TO BLINKING\nPF1MSGBA DC    X'1140D8'           BUFFER ADDRESS FOR PF1 MESSAGE\nRESETSA  DC    X'280000'           RESET C. ATTRS (KEEP AFTER PF1MSGBA)\nBUFHDR   DC    X'C3114040'\nFLGPOS   EQU   *-BUFHDR\n         DC    C'X'\nPROHIS   DC    X'1DF8'             PROTECTED HIGH-INTENSITY FOR TITLE\nSCORTITL EQU   *-BUFHDR\n         DC    C'CURRENT-SCORE='\nSCORPOSI EQU   *-BUFHDR\n         DC    C'0000  '\nTITLPOSI EQU   *-BUFHDR\nSTARTHDR DC    CL56'1=AUTO 3=END 7=UP 8=DOWN 9=RUN-8 10=LEFT 11=RIGHT 1+\n               2=CAN'\n         DC    X'1DF0'             SET REST OF THE BORDER LOW INTENSITY\nHDRLEN   EQU   *-BUFHDR\n         SPACE 1\n         PRINT NOGEN\nWORMFILE DCB   DSORG=PO,MACRF=(R,W),DDNAME=ISPTABL\n         PRINT GEN\n         SPACE 1\n         LTORG\n         SPACE 1\n         DS    0F\nDECNTABL DC    AL1(ROK,LOK,DOK,UOK) WHAT I THINK ARE THE BEST 8 OUT\n         DC    AL1(LOK,ROK,DOK,UOK) OF ALL 24 POSSIBLE COMBINATIONS.\n         DC    AL1(ROK,LOK,UOK,DOK)\n         DC    AL1(LOK,ROK,UOK,DOK) COULD ADD MORE ENTRIES WITHOUT\n         DC    AL1(DOK,UOK,ROK,LOK) CHANGING THE CODE FOR A SMALL\n         DC    AL1(UOK,DOK,ROK,LOK) GAIN IN INTELLIGENCE (AND PROBABLY\n         DC    AL1(DOK,UOK,LOK,ROK) A LARGE GAIN IN CPU TIME USAGE).\n         DC    AL1(UOK,DOK,LOK,ROK)\nEODCNTBL EQU   *\n         SPACE 1\n         DS    0D\n         DC    CL80'   ANOTHER QUALITY PRODUCT FOR TSO BY GREG PRICE'\n         DC    C' OF PRYCROFT SIX PTY LTD'\n         DS    0D                  END OF CSECT\n         EJECT\n*------- DSECT'S (UNINITIALIZED VARIABLES).\n         SPACE 1\nWORMCMN  DSECT\n         SPACE 1\n         DS    18F                 SAVE-AREA\nWORK     DS    D\nWORMUSER DS    D\nDELAY    DS    F\nBINTIMEO DS    F\nBINTIMEN DS    F\nTGETCNTO DS    F\nTPUTCNTO DS    F\nXACTCNTO DS    F\nTGETCNTN DS    F\nTPUTCNTN DS    F\nDECNADDR DS    F\nLINES    DS    F\nCOLUMNS  DS    F\nMOVLINES DS    F\nMOVECOLS DS    F\nELIGIBLS DS    F\nIMAGESIZ DS    F\nLASTLOOK DS    F\nLOOKAHED DS    F\nLIFEADDR DS    F\nHEADADDR DS    F\nTAILADDR DS    F\nMOVECNTR DS    F\nTESTGROW DS    F\nFREEZER  DS    F\nFOODX    DS    F\nFOODY    DS    F\nHEADX    DS    F\nHEADY    DS    F\nDATEO    DS    F\nZEROAREA EQU   *                   THIS AREA ZEROED AT INITIALIZATION\nTCTADDR  DS    F\nTGTPCNT  DS    F\nBINTIME  DS    F\nTCBTIME  DS    F\nTCBTIMEO DS    F\nTCBTIMEN DS    F\nTPUTTIME DS    F\nTPUTCNTR DS    F\nTPUTHOLD DS    F\nDECRCNTR DS    F\nXACTCNTN DS    F\nGROWSIZE DS    F\nFOODVALU DS    F\nFOODCNTR DS    F\nSTACKER  DS    F\nMEALCNTR DS    F\nEATMOVES DS    F\nTHISTREK DS    F\nCOLOURS  EQU   *                   COLOUR COUNTERS MUST BE CODE ORDER\nBLUES    DS    H\nREDS     DS    H\nPINKS    DS    H\nGREENS   DS    H\nTURQS    DS    H\nYELLOWS  DS    H\nWHITES   DS    H\nSCORE    DS    H\nZEROLEN  EQU   *-ZEROAREA          END OF INITIALLY ZEROED AREA\nSCOREO   DS    H\nTIMEO    DS    H\nTPUTLEN  DS    H\nHEADLOC  DS    H\nTAILLOC  DS    H\nTOLOC    DS    H\nNUMBRLOC DS    H\nLIFEBFAD DS    H\nMOVDEPTH DS    H\nHOLDEPTH DS    H\nTGTDEPTH DS    H\nDECDEPTH DS    H\nPRVDEPTH DS    H\nAUTOOPTS DS    H\nPOSPATHS DS    CL12\nAUTOMOVE DS    C\nDECISION DS    C\nUPORDN   DS    C\nRTORLFT  DS    C\nFOODMOVE DS    C\nFOODFLAG DS    C\nWORMFLAG DS    C\nNEXT     EQU   X'80'\nCHEAT    EQU   X'40'\nAUTO     EQU   X'20'\nGRAF     EQU   X'10'\nDBUG     EQU   X'08'\nBLITZ    EQU   X'04'\nLINE     EQU   X'02'\nBURST    EQU   X'01'\nWORMFLG2 DS    C\nLOCKED   EQU   X'80'\nFRTN     EQU   X'40'\nCNCL     EQU   X'20'\nXHST     EQU   X'10'\nSSSS     EQU   X'08'\nAUTH     EQU   X'04'\nTEST     EQU   X'02'\nATTN     EQU   X'01'\nGRAFLAGS DS    C                   TERMINAL GRAPHIC CAPABILITY FLAGS\nCOLR     EQU   X'80'               AT LEAST SEVEN COLOURS SUPPORTED\nHLIT     EQU   X'40'               BLINK, REVERSE, U-SCORES SUPPORTED\nGEOK     EQU   X'20'               GRAPHICS ESCAPE SUPPORTED\nSYMSET   EQU   X'10'               SYMBOL SETS SUB-FIELD RETURNED\nPCAF     EQU   X'08'               PC ATTACHMENT FACILITY TERMINAL\nRVRS     EQU   X'01'               USE REVERSE VIDEO ALL THE TIME\nDIRFLAGS DS    C\nRGD      EQU   X'80'\nLGD      EQU   X'40'\nROK      EQU   X'08'\nLOK      EQU   X'04'\nUOK      EQU   X'02'\nDOK      EQU   X'01'\nTHISOPTN DS    C\nOSBITS   DS    C\nTHISCOLR DS    C\n         DS    0D\nUPDTSTRM DS    CL3584\nBUFFER   DS    CL6\nDTLSTART EQU   *\n         ORG   WORMCMN+22000\n         SPACE 1\nWORMCMNL EQU   (((*-WORMCMN)+7)/8)*8\n         PRINT NOGEN\n        DCBD   DSORG=PO,DEVD=DA\n        CVT    DSECT=YES\n        IHAPSA ,\n        IKJTCB ,\n        IEFTCT ,\n        IKJRB  ,\n        IHACDE ,\n        IHAASCB ,\n        IHALCCA ,\n        IHAOUXB ,\nTIODSCT  DSECT ,\n        IEFTIOT1 ,\n         PRINT GEN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WORM$": {"ttr": 20229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942o\\x00\\x942o\\x120\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-22T00:00:00", "modifydate": "1994-11-22T12:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//WORM     JOB (........),'INSTALL  -WORM-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*                         W  O  R  M                                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ3AS3,MBR=WORM\n//LNK     EXEC PAJILKC,OPT=',MAP,NCAL,AC=1'\n//SYSIN     DD *\n  ALIAS   HALFWORM,HW,QUARTERW,QW,WORMTEST,HALFTEST,QUARTEST\n  NAME    WORM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WORM@": {"ttr": 20231, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x11\\x8f\\x00\\x92\\x11\\x8f\\x11\\x02\\x00\\x99\\x00\\x99\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-04-27T00:00:00", "modifydate": "1992-04-27T11:02:00", "lines": 153, "newlines": 153, "modlines": 0, "user": "SYSPAJA"}, "text": "1   17/01/92\n                                                      WORM      1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *        W O R M   TSO Command        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  WORM   : Wonderful-Online-Response-Monitor\n  -------- CBT origin : Extracted from CBT tape 91 MAR, files 134-135.\n           Written October 1986 by GREG PRICE of PRYCROFT SIX PTY LTD.\n\n  Use    : for use under TSO on 3270-family VDU in fullscreen mode.\n  -------- WORM supports all screen sizes.\n\n  Object : For the worm to eat the numbers appearing on the screen\n  -------- without colliding with itself or the border around the\n           screen. When a number is eaten (by moving the worm's head\n           (denoted by a '@') to the number's location) another number\n           will appear at a random vacant location. The value of the\n           eaten number will be added to the score and the worm's\n           length will also increase by that amount. Collisions are\n           denoted by a '+' then a '*' one second later, and cause the\n           worm to die due to brain damage caused by shocking head\n           injuries.\n\n  Method : Once the worm is moving ten (10) TGETs are done one-tenth\n  -------- of a second apart. If no input is received the worm is\n           moved one location in the current direction. When\n           wormomatic is active only one (1) TGET is done when in\n           burst mode, or two (2) TGETs one-tenth of a second apart\n           otherwise. The current meaning of PF1 (displayed in the\n           title line) and the move speed indicate the current\n           AUTOMATIC/MANUAL/BURSY mode status.\n\n           An optional program parameter or TSO command operand\n           (depending upon the method of invocation) of one or two\n           decimal digits may be supplied. This specifies a target\n           upper limit to task-type cpu time consumption by wormo-\n           matic expressed in terms of percentage of elapsed time. The\n           default of zero means that wormomatic will not try to limit\n           its cpu service absorption rate.\n1   17/01/92\n                                                      WORM      2/3.\n\n  Input  : PA keys - refresh the screen image\n  -------- PF 1/13 - WORMOMATIC - automatic worm pilot speed\n           PF 2/14 -|activate/deactivate DEBUG mode when      |\n                    |BURST mode switch is ON (*NOW DISABLED*) |\n                    |             -or-                        |\n                   - activate/deactivate REVERSE VIDEO mode\n                    |when BURST mode switch is OFF (*IGNORE*) |\n           PF 3/15 - END - end with scoring\n           PF 4/16 - toggle graphic \"CHARACTER SETS\"\n           PF 5/17 - activate/deactivate \"BURST\" mode\n           PF 6/18 - activate/deactivate graphic character mode\n           PF 7/19 - change the current direction to UP and make a move\n           PF 8/20 - change the current direction to DOWN and make a\n                     move\n           PF 9/21 - move unconditionally (unless a number is encounte-\n                     red) eight (8) locations in the current direction\n           PF10/22 - change the current direction to RIGHT and make a\n                     move\n           PF11/23 - change the current direction to LEFT and make a\n                     move\n           PF12/24 - CANCEL - end without scoring\n           Enter causes a move in the current direction to be made\n           immediately. PA keys and PF keys 1/13, 2/14, 4/16, 5/17 and\n           6/18 are the only ones which will not stop wormomatic while\n           it is active. Attention interrupt (PA1) stops wormomatic.\n\n           If the file ISPTABL (can be changed to any PDS DD which\n           effectively has UACC(UPDATE)) is allocated then the highest\n           score is kept as user data (PFD (not SPF) stats) of member\n           EWSBTA## (REVIEW will show PFD and SPF stats) where ## is\n           the number of lines that the screen has. File name PFDATTRS\n           is used under OSIV/F4.\n\n           If the terminal's VTAM query bit is on then arrows are used\n           for the worm instead of lower case 'O's (this also means\n           \"unwinding\" information is available to the player), the\n           '@' for the head is replaced by a blob, and the target\n           number will be displayed in reverse video. An alternate\n           graphic display mode is available which shows the worm as a\n           continuous line and the head as a block. Line mode is\n           similated in non-graphic mode with dashes etc. The initial\n           worm is white, but each worm food target is artificially\n           coloured at random. No preservatives added. The worm will\n           gradually take on the colour of the most recently consumed\n           food. No two consecutive food targets will have the same\n           colour. 7-colour displays are only transmitted in \"graphic\"\n           mode. PF6/18 is available to activate/deactivate \"graphic\"\n           mode, which is initially on only if the VTAM query bit for\n           the tso terminal is on and the query indicated 7-colour\n           support. If the query does not indicate graphics escape\n           support then APL/graphic characters will not be used even\n           if seven colours are. Reverse video mode can be activated\n1   17/01/92\n                                                      WORM      3/3.\n\n           and deactivated by PF2/14 independently of graphic mode\n           (PF2/14 used to activate debug mode when in burst mode, but\n           this has now been disabled).\n\n\n           It really doesn't look much like a worm in \"graphic\" mode.\n           Normal mode looks better on a 3180 anyway, as well as\n           reducing data traffic. Note that \"graphic\" information is\n           not sent to the terminal for screen RESHOW/REFRESH.\n\n           Terminal I/O can be speeded up with the use of \"burst\"\n           mode. Instead of one TPUT per move a data stream of over 3K\n           can be accumulated and sent in one TPUT. Eating a number\n           also triggers a TPUT. \"burst\" mode is only used in\n           automatic mode.\n\n           If invoked as 'HALFWORM' or 'HW' then only the top half\n           (integer arithmetic) of the screen will be used. Naturally\n           a different scoreboard member will be used. Similarly with\n           'QUARTERW' and 'QW'.\n\n           If invoked as 'WORMTEST' (full-screen), 'HALFTEST' (half-\n           screen) or 'QUARTEST' (quarter-screen) then food-generation\n           test mode will be active and a worm will not be produced.\n           Speed and colour modes are controlled as described earlier.\n           Initially the screen will be filled up with food targets,\n           but then pF4/16 will request generation continuation\n           without regard to previous occupancy of the selected\n           position. If the screen is cleared at this stage, random\n           number generator peculiarities such as timer unit\n           granularity (low-order bit always off perhaps) may become\n           apparent. PF3/15 then pF4/16 may be done anytime.\n\n           The above has been changed such that pF4/16 is replaced by\n           pF1-8/13-20. PF1-7/13-19 specify the colour code to be used\n           unconditionally. PF8/20 reactivates random colour\n           generation. Remember that this function is only available\n           at end-of-test via pF3/15 or via fully-covered screen.\n\n  Notes :  WORM must be APF authorized if the user's TPUT and transac-\n  -------     tion counters are to be decremented. In any event, this\n              decrementing will only be performed on MVS (MVS/370 or\n              MVS/XA) systems.\n           OSIV/F4 : TGETs/TPUTs make tasks non-dispatchable under F4.\n              In MVS, tasks are put into a wait state. Hence, TSS users\n              don't timeout like TSO users (S522 abend). Also, TGET\n              NOWAIT macros stop the TCBs until a TSS terminal keyboard\n              attention occurs. Therefore, WORM does not \"tick over\"\n              under F4. So, no TGETs are issued when wormomatic is\n              active under F4. To stop wormomatic on TSS ATTN/PA1 is\n              required. MVS was like this too, originally, wasn't it?\n              (PRE-3.7? SVS?)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT457/FILE457.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT457", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}