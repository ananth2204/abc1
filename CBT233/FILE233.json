{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011537000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE233.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE233.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\r'", "DS1TRBAL": "b'\\x17\\xe8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xa7\\x00\\x08\\x01\\xa7\\x00\\n\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95\\x01o\\x01\\x00)\\x9f\\x114\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-01-16T00:00:00", "modifydate": "2000-10-25T11:34:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "WSBG"}, "text": "Note for GBHABEND.  01/16/95\n\nThis is a program that I've used over the years, to produce any\nconceivable abend code, system or user.  The author is Gordon Hampton.\nGordon has included a large collection of macros inline, some of which\nhe uses in the program.  However, the program is basically very simple,\nand is a frontend to the ABEND macro.\n\nGordon used to use this program to follow ABENDAID from release to\nrelease, to see how they were improving.  One of my previous shops\nused it to stop VSAM jobstreams which produced a condition code of\n12 instead of abending.  After the IDCAMS step produced its code of 12,\na jobstep with this program produced the necessary user abend under\n\"cond\" control, so the jobstream would not continue in error.\n\nPlease direct inquiries to:\n\n        Sam Golob    P.O. Box 906     Tallman, NY 10982-0906\n                         sbgolob@attglobal.net\n\n\n\n\n        NaSPA  414-768-8000   7044 S. 13th Street\n                              Oak Creek, WI 53154-1429\n\n\nI'll refer your inquiries to Gordon.  Good luck.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GBHABEND": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x01o\\x00\\x95\\x01o\\x152\\x01\\xea\\x01\\xe8\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-01-16T00:00:00", "modifydate": "1995-01-16T15:32:00", "lines": 490, "newlines": 488, "modlines": 0, "user": "SBGCSC"}, "text": "         TITLE ' GBHABEND DOCUMENTATION'\n********************************************************************SBG\n*   THIS PROGRAM GENERATES ABENDS THAT ARE REQUIRED IN A JOBSTREAM. SBG\n*   ANY ABEND CODE, SYSTEM OR USER, OR SYSTEM WITH REASON CODE,     SBG\n*   MAY BE GENERATED.                                               SBG\n*                                                                   SBG\n*   THE ENTIRE PROGRAM IS A FRONTEND TO THE ABEND MACRO.            SBG\n*                                                                   SBG\n*   AUTHOR:   GORDON BOYD HAMPTON                                   SBG\n*                                                                   SBG\n********************************************************************SBG\n*   INSTRUCTIONS FOR USE:                                           SBG\n*      THIS PROGRAM CAN PRODUCE ANY KIND OF ABEND, DEPENDING ON     SBG\n*       THE PARM.  IF YOU CODE A FIRST LETTER OF THE PARM,          SBG\n*       YOU GET THE FOLLOWING RESULTS:                              SBG\n*                                                                   SBG\n*     S - SYSTEM ABEND                                              SBG\n*     U - USER ABEND                                                SBG\n*     R - SYSTEM ABEND WITH A REASON CODE                           SBG\n*                                                                   SBG\n*     A NUMERIC WILL GIVE YOU A USER ABEND.                         SBG\n*                                                                   SBG\n*  FULL FORMAT OF THE PARMS IS AS FOLLOWS:                          SBG\n*     SNNN - GIVES SYSTEM ABEND NNN.                                SBG\n*     UNNNN - GIVES USER ABEND NNNN.                                SBG\n*     NNNN - GIVES USER ABEND NNNN.                                 SBG\n*     RMMMNNN - GIVES SYSTEM ABEND MMM WITH REASON CODE NNN.        SBG\n*  IF YOU DON'T FOLLOW THIS FORMAT YOU MAY GET STRANGE RESULTS.     SBG\n*                                                                   SBG\n*   JCL TO RUN IS AS FOLLOWS:                                       SBG\n*                                                                   SBG\n*  //BOOMSTEP EXEC PGM=GBHABEND,PARM=U1288,COND=(8,GT,PREVSTEP)     SBG\n*  //STEPLIB  DD DISP=SHR,DSN=TST.TSO.CMDLIB                        SBG\n*  //SYSABEND DD SYSOUT=*                                           SBG\n*                                                                   SBG\n*  THIS WILL CAUSE A USER ABEND OF 1288 ON BOOMSTEP                 SBG\n*    IF PREVSTEP HAD A CONDITION CODE OF 8 OR GREATER.              SBG\n*                                                                   SBG\n*  IF YOU DON'T WANT A DUMP TO BE PRODUCED, LEAVE OUT THE           SBG\n*    SYSABEND DD CARD.                                              SBG\n*                                                                   SBG\n********************************************************************SBG\n         EJECT                                                      SBG\n         TITLE ' MACRO - REGS AND REG'\n         MACRO\n         REGS\n         GBLA  &REGS\n         AIF   (&REGS NE 0).EXIT\n&REGS    SETA  1\n         REG\n.EXIT    ANOP\n         MEND\n         SPACE 3\n         MACRO\n         REG   &R=R,&F=0,&L=15\n         LCLA  &W\n&W       SETA  &F\n.REPEAT  ANOP\n&R&W     EQU   &W\n&W       SETA  &W+1\n         AIF   (&W LE &L).REPEAT\n         MEND\n         TITLE ' MACRO - BEGIN, IFCODE, SETCODE AND GETCODE'\n         MACRO\n&N       BEGIN &BASE=R11,&SAVE=SAVEAREA,&XREG=R12,&RC=0,&RLEN=STORLEN, X\n               &RSTOR=STORAREA\n         GBLA  &RENT\n         GBLA  &S\n&S       SETA  1                       USING SAVE0 FOR RETURN-CODE\n         REGS\n         AIF   ('&SYSLIST(1).' EQ 'RENT').RENT\n&N       STM   R14,R12,12(R13)         SAVE REGS\n         BALR  &BASE,0                 SET BASE\n         USING *,&BASE                     REG\n         ST    R13,&SAVE.+4            LINK-\n         LR    &XREG,R13                  AGE\n         LA    R13,&SAVE               CONVEN-\n         ST    R13,8(&XREG)                TIONS\n         SETCODE   TO=&RC\n         MEXIT\n.RENT    ANOP\n&RENT    SETA  1\n         USING *,R15\n&N       STM   R14,R12,12(R13)         SAVE REGS\n******** GETMAIN   R,LV=&RLEN ********************************\n         GETMAIN   R,LV=&RLEN\n***********************************************************************\n         DROP  R15\n         BALR  &BASE,0                 SET BASE\n         USING *,&BASE                     REG (FOR INSTUCTIONS)\n         USING &RSTOR,R1               BASE FOR STORAGE AREA R1 (TEMP)\n         ST    R13,&SAVE.+4            LINKAGE\n         LR    &XREG,R13                  CONVENTIONS\n         LR    R13,R1                  SET BASE\n         DROP  R1                          REG  (FOR STORGAE AREA)\n         USING &RSTOR,R13              (BASE FOR STORAGE AREA R13)\n         ST    R13,8(&XREG)                TIONS\n         SETCODE   TO=&RC\n         L     R1,24(&XREG.)           SET REG1 TO PARM ADDR\n         MEND\n         SPACE 3\n         MACRO\n&N       IFCODE &C,&RTN,&TO=,&FIELD=,&REG=,&SREG=R13\n         REGS\n         AIF   ('&TO' EQ '').NOTO\n&N       CLC   4*18(4,&SREG.),=F'&TO.' COMPARE RETURN CODE TO VALUE\n         AGO   .BR\n.NOTO    ANOP\n         AIF   ('&REG' EQ '').NOREG\n&N       C     &REG,4*18(&SREG.)       COMPARE RETURN-CODE TO REG\n         AGO   .BR\n.NOREG   ANOP\n&N       CLC   4*18(4,&SREG.),&FIELD   COMPARE RETURN-CODE TO FIELD\n.BR      ANOP\n         B&C   &RTN                        BRANCH ON CONDITION\n         MEND\n         SPACE 3\n         MACRO\n&N       SETCODE   &TO=,&FIELD=,&REG=,&SREG=R13\n         REGS\n         AIF   ('&TO' EQ '').NOLIT\n&N       MVC   4*18(4,&SREG.),=F'&TO'  SAVE RETURN CODE IN SAVE0\n         MEXIT\n.NOLIT   ANOP\n         AIF   ('&FIELD' EQ '').REG\n&N       MVC   4*18(4,&SREG.),&FIELD   SAVE RETURN CODE IN SAVE0\n         MEXIT\n.REG     ANOP\n&N       ST    &REG,4*18(&SREG.)       SAVE RETURN CODE IN SAVE0\n         MEND\n         SPACE 3\n         MACRO\n&N       GETCODE   &FIELD=,&REG=,&SREG=R13\n         REGS\n         AIF   ('&FIELD' EQ '').REG\n&N       MVC   &FIELD,4*18(&SREG.)     GET RETURN CODE FROM SAVE0\n         MEXIT\n.REG     ANOP\n&N       L     &REG,4*18(&SREG.)       GET RETURN CODE FROM SAVE0\n         MEND\n         TITLE ' MACRO - PERFORM AND EXIT'\n         MACRO\n&N       PERFORM   &REG=R12\n         GBLA  &S\n         LCLA  &I\n&N       ST    &REG,SAVE&S             STORE LINK REG\n.PERLOOP ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&SYSLIST).PEREND\n         BAL   &REG,&SYSLIST(&I)       LINK WITH ROUTINE\n         AGO    .PERLOOP\n.PEREND  ANOP\n         L     &REG,SAVE&S             RESTORE REG\n&S       SETA  &S+1\n         MEND\n         SPACE 3\n         MACRO\n&N       EXIT  &REG=R12,&IF=\n&N       B&IF.R    &REG\n         MEND\n         TITLE ' MACRO - GOBACK'\n         MACRO\n&N       GOBACK    &SAVE=SAVEAREA,&RLEN=STORLEN,&FREG=1,&RCREG=R12\n         GBLA  &RENT\n         REGS\n         AIF   ('&SYSLIST(1).' EQ 'RENT').RENT\n         AIF   (&RENT EQ 1).RENT\n         GETCODE REG=R15               SET RETURN-CODE\n         L     R13,&SAVE.+4            RESTORE SAVE REG\n         L     R14,12(R13)             RESTORE RETURN ADDR\n         LM    R0,R12,20(R13)          RESTORE OTHER REGS\n         BR    R14                     GOBACK\n         MEXIT\n.RENT    ANOP\n&N       GETCODE REG=&RCREG            SAVE RETURN CODE\n         LR    R&FREG,R13              GET READY TO FREEMAIN\n         L     R13,&SAVE.+4            RESTORE SAVE REG\n******** FREEMAIN  R,LV=&RLEN,A=(&FREG) ***********************\n         FREEMAIN  R,LV=&RLEN,A=(&FREG)\n***********************************************************************\n         LR    R15,&RCREG              SET RETURN CODE\n         L     R14,12(R13)             RESTORE RETURN ADDR\n         LM    R0,R12,20(R13)          RESTORE OTHER REGS\n         BR    R14                     GOBACK\n         MEND\n         TITLE ' MACROS - PREPMAC AND AFTMAC'\n         MACRO\n&N       PREPMAC\n         GBLA  &S,&SPREP\n         REGS\n&SPREP   SETA  &S                                              06/28/79\n&N       STM   R14,R1,SAVE&SPREP       SAVE REGS\n&S       SETA  &S+4\n         MEND\n         SPACE 3\n         MACRO\n&N       AFTMAC\n         GBLA  &SPREP\n         REGS\n&N       LM    R14,R1,SAVE&SPREP       RESTORE REGS\n         MEND\n         TITLE ' MACROS -  OPENALL AND CLOSEALL'\n         MACRO\n&N       OPENALL\n         LCLA  &C\n         LCLC  &IO\n         AIF   ('&N' EQ '').NONAME\n&N       EQU   *\n.NONAME  ANOP\n         PREPMAC\n.TEST    ANOP\n&C       SETA  &C+1\n         AIF   (&C GT N'&SYSLIST).END\n         AIF   ('&SYSLIST(&C)' EQ 'INPUT').IO\n         AIF   ('&SYSLIST(&C)' EQ 'OUTPUT').IO\n********* O P E N *********************\n         OPEN  (&SYSLIST(&C),(&IO))\n         AGO   .TEST\n.IO      ANOP\n&IO      SETC  '&SYSLIST(&C)'\n         AGO   .TEST\n.END     ANOP\n***************************************\n         AFTMAC\n         MEND\n         EJECT\n         MACRO\n&N       CLOSEALL\n         LCLA  &C\n         AIF   ('&N' EQ '').NOEQ\n&N       EQU   *\n.NOEQ    ANOP\n         PREPMAC\n.TEST    ANOP\n&C       SETA  &C+1\n         AIF   (&C GT N'&SYSLIST).END\n********* C L O S E *******************\n         CLOSE (&SYSLIST(&C))\n         AGO   .TEST\n.END     ANOP\n***************************************\n         AFTMAC\n         MEND\n         TITLE ' MACRO - SAVEIT'\n         MACRO\n         SAVEIT    &SAVE=SAVEAREA\n         GBLA  &S\n         GBLA  &RENT\n         LCLA  &F\n         AIF   ('&SYSLIST(1).' EQ 'RENT').RENT\n         AIF   (&RENT EQ 1).RENT\n&SAVE    DC    18F'0'                  REGS SAVE-AREA\n.H       ANOP\n         AIF   (&F GE &S).END\nSAVE&F   DC    F'-1'                   SAVE AREA FOR MACROS\n&F       SETA  &F+1\n         AGO   .H\n.END     ANOP\n         MEXIT\n.RENT    ANOP\n&SAVE    DS    18F                     REGS SAVE-AREA\n.HR      ANOP\n         AIF   (&F GE &S).ENDR\nSAVE&F   DS    F                       SAVE AREA FOR MACROS\n&F       SETA  &F+1\n         AGO   .HR\n.ENDR    ANOP\n         MEND\n         TITLE 'MACRO - SHIFT'\n         MACRO\n&N       SHIFT &DIR,&FIELD,&DIG,&ROUND=5\n         LCLA  &NO\n         AIF   ('&DIR' EQ 'R').RIGHT\n.LEFT    ANOP\n&NO      SETA  &DIG\n         AGO   .SRP\n.RIGHT   ANOP\n&NO      SETA  64\n&NO      SETA  &NO-&DIG\n.SRP     ANOP\n&N       SRP   &FIELD,&NO,&ROUND       SHIFT AND ROUND\n         MEND\n         TITLE 'MACRO - MOVE'\n         MACRO\n&N       MOVE  &REC,&SEND,&PAD=C' ',&RL=0,&SL=0\n         GBLA  &S\n         GBLA  &RENT\n         LCLC  &P\n         LCLA  &J\n         LCLA  &D\n         LCLA  &L\n         LCLA  &LS\n         LCLA  &LR\n         LCLA  &LREC\n&LREC    SETA  L'&REC\n&P       SETC  '&PAD'\n         AIF   (&RL EQ 0).S1\n&LR      SETA  &RL\n.A1      ANOP\n         AIF   ('&SEND' EQ 'PAD').A2\n         AIF   (&SL EQ 0).S2\n.A2      ANOP\n&LS      SETA  &SL\n         AGO   .S3\n.S1      ANOP\n&LR      SETA  L'&REC\n         AGO   .A1\n.S2      ANOP\n&LS      SETA  L'&SEND\n.S3      ANOP\n         AIF   (&LR GT 256).BIG\n         AIF   (&LR LE &LS).S4\n&L       SETA  &LS\n         AIF   ('&SEND' EQ 'PAD').A3\n         AGO   .S5\n.S4      ANOP\n&L       SETA  &LR\n.S5      ANOP\n         AIF   (&L NE &LREC).S6\n         MVC   &REC,&SEND              MOVE\n         AGO   .S7\n.S6      ANOP\n         MVC   &REC.(&L),&SEND         MOVE\n.S7      ANOP\n         AIF   (&L EQ &LR).NOPAD\n.A3      ANOP\n         AIF   (&L EQ 0).A4\n         MVI   &REC.+&L,&P             PAD CHAR\n         AGO   .A5\n.A4      ANOP\n         MVI   &REC,&P                 PAD CHAR\n.A5      ANOP\n&J       SETA  &L+1\n&D       SETA  &LR-&LS-1\n         AIF   (&D LE 0).NOPAD\n         AIF   (&J EQ 0).A6\n         AIF   (&L EQ 0).A7\n         AIF   (&D EQ &LREC).A8\n         MVC   &REC.+&J.(&D),&REC.+&L  PAD FIELD\n         MEXIT\n.A6      ANOP\n         AIF   (&D EQ &LREC).A9\n         MVC   &REC(&D),&REC+&L        PAD FIELD\n         MEXIT\n.A7      ANOP\n         AIF   (&D EQ &LREC).A10\n         MVC   &REC+&J.(&D),&REC       PAD FIELD\n         MEXIT\n.A8      ANOP\n         MVC   &REC+&J,&REC+&L         PAD FIELD\n         MEXIT\n.A9      ANOP\n         MVC   &REC,&REC+&L            PAD FIELD\n         MEXIT\n.A10     ANOP\n         MVC   &REC+&J,&REC            PAD FIELD\n.NOPAD   ANOP\n         MEXIT\n.B1      ANOP\n         DC    A(0)                    SENDING ADDR FOR LONG PADS\n         AGO   .B2\n.BIG     ANOP\n         REGS\n         AIF   (&RENT EQ 1).RENT\n&N       B     STORE&S                 BRANCH OVER CONSTANTS OF MVCL\nLOAD&S   DC    A(&REC)                 REC ADDR\n         DC    F'&LR'                  REC LENGTH\n         AIF   ('&SEND' EQ 'PAD').B1\n         DC    A(&SEND)                SEND ADDR\n.B2      ANOP\n         DC    &P                      PAD CHAR\n         DC    FL3'&LS.'               SEND LENGTH\nSTORE&S  STM   R2,R5,SAVE&S            SAVE REGS 2-5\n         LM    R2,R5,LOAD&S            LOAD REGS 2-5 FOR MOVE\n         MVCL  R2,R4                   MOVE LONG\n         LM    R2,R5,SAVE&S            RESTORE REGS 2-5\n&S       SETA  &S+4\n         MEXIT\n.RPAD    ANOP\n         XR    R4,R4                   CLEAR REG 4 FOR BIG PAD MOVE\n         AGO   .RPADR\n.RENT    ANOP\n&N       STM   R2,R5,SAVE&S            SAVE REGS 2-5\n         LA    R2,&REC                 LOAD ADDR OF REC FIELD\n         L     R3,=F'&LR'              LOAD LEN OF REC FIELD\n         AIF   ('&SEND' EQ 'PAD').RPAD\n         LA    R4,&SEND                LOAD ADDR OF SEND FIELD\n.RPADR   ANOP\n         L     R5,=F'&LS'              LOAD LEN OF SEND FIELD\n         ICM   R5,B'1000',=&PAD        LOAD IN PAD CHAR\n         MVCL  R2,R4                   MOVE LONG\n         LM    R2,R5,SAVE&S            RESTORE REGS 2-5\n&S       SETA  &S+4\n         MEND\n         TITLE    'GBHABEND'\nGBHABEND CSECT\n*\n         REGS\n*\n         BEGIN\n*\n         B     NWKSTRT                BRANCH TO BEGINNING OF CODE   SBG\n         DC    C'WRITTEN BY:  '            WE ARE GRATEFUL          SBG\n         DC    C'GORDON B. HAMPTON   '     TO THE AUTHOR            SBG\n         DC    C'ASSEMBLED ON - '                                   SBG\n         DC    CL8'&SYSDATE'                                        SBG\n         DC    C' '                                                 SBG\n         DC    CL8'&SYSTIME'                                        SBG\n         DC    C'  '                                                SBG\nNWKSTRT  DS    0F                     START EXECUTION OF CODE\n         USING PARM,R10               PARM BASE\n         L     R10,0(R1)              SET-UP\n         LH    R9,LEN                 WAS A PARM\n         CH    R9,=H'0'                  PASSED?\n         BE    BIGBOOM                IF NOT,GO USER ZERO\n*\n         PERFORM   RCRTN\n*\nBIGBOOM  EQU   *\n         GETCODE REG=R1                  MOVE IN ABEND CODE\n*\n         ABEND (1),DUMP,,USER\n*\n         GOBACK                         NEVER EXECUTED\n         EJECT\nRCRTN    EQU   *\n         BCTR  R9,0                      SUBTRACT 1\n         CLI   CODE,C'S'                 IS THIS SYSTEM ABEND\n         BE    SYSTEM                    IF SO, GOTO SYSTEM RTN\n         CLI   CODE,C'R'                 IS THIS SYSTEM ABEND W/RC\n         BE    REASON                    IF SO, GOTO SYS W RC RTN\n         CLI   CODE,C'U'                 ELSE USER, BUT IS IT \"U\"\n         BE    USER                      IF SO GET RID OF \"U\"\n         SPACE 2\nUSERCODE EQU   *\n         EX    R9,PACK                   PACK PARM FIELD\n         CVB   R8,PACKED                 CONVERT IT TO BINARY\n*\n         SETCODE   REG=R8\n*\n         EXIT                            EXIT\n         SPACE 2\nUSER     EQU   *\n         LA    R10,1(R10)                ADD 1 TO CODE ADDR\n         BCT   R9,USERCODE               SUBTRACT 1 (GET RID OF \"U\")\n         B     USERCODE                    AND GOTO USERCODE\n*\nSYSTEM   EQU   *\n         BCTR  R9,0                      SUBTRACT 1\n         EX    R9,TRANS\n         LA    R9,1(R9)                  ADD ONE\n         EX    R9,PACK1\n*\nSYSCODE  EQU   *\n         L     R1,PACKE1\n*\n         ABEND  (1),DUMP,,SYSTEM\n*\n*                                       NEVER EXECUTED\n         EXIT\n*\n*                                       REASON CODE PARM:RSSSRRR\nREASON   EQU   *\n         TR    CODE+1(6),TABLE          TRANS SYS AND RC\n         PACK  PACKE1,CODE+1(4)         PACK SYS ABEND\n         PACK  PACKED(5),CODE+4(4)      PACK RC CODE\n         L     R15,PACKED               LOAD IN REASON CODE\n         B     SYSCODE\n*\nPACK     PACK  PACKED,CODE              PACK PARM FIELD\nPACK1    PACK  PACKE1,CODE+1            PACK PARM FIELD\nTRANS    TR    CODE+1,TABLE             THIS IS HEX INFO\n         TITLE 'STORAGE AREAS'\n         SAVEIT\n*\nPACKED   DS    D\n         DS    0F\nPACKE1   DS    FL5\nTABLE    DS    CL256\n         ORG    TABLE+C'A'\n         DC    X'FAFBFCFDFEFF'\n         ORG    TABLE+C'0'\n         DC    C'0123456789'\n         ORG\n         LTORG\n         TITLE 'PARM FIELDS'\nPARM     DSECT\nLEN      DS    H\nCODE     DS    100Z\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT233/FILE233.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT233", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}