{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013646000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 11463270, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE979.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 11463270, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 11463270, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE979.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\xaf\\x05'", "DS1TRBAL": "b'\\x91*'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\n@\\x00\\x05\\nL\\x00\\x00\\x00\\xb0'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00$\\x01\\x18$\\x7f\\x01\\x18$\\x7f\\x14\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-09-04T00:00:00", "modifydate": "2018-09-04T14:13:24", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  979\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE979\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 108,898 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/04/18    14:13:24    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$#ZZSA": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x18$_\\x01\\x18$_\\x160\\x04e\\x04e\\x00\\x00\\xd6\\xd9\\xc9\\xc7\\xc4\\xd6\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-09-02T00:00:00", "modifydate": "2018-09-02T16:30:58", "lines": 1125, "newlines": 1125, "modlines": 0, "user": "ORIGDOC"}, "text": "ZZSA Standalone Utilities\n\nAbstract\n\nThis stand alone program will allow you to display and edit data on dasd\nin a stand-alone environment when there is no MVS system available. This\nprogram was written to diagnose IPL device configuration problems, and\nto overcome the problem of having to re-ipl an entire MVS system in\norder to correct a minor IPLPARM, PARMLIB, PROCLIB or VTAMLST error. It\nis by no means a recommended procedure to make configuration changes,\nbut it can save valuable time making these types of corrections.\n\nJan Jaeger\n\n\nIntroduction\n\nThis stand alone utility supports the following functions:\n\n     Sense and list all devices in the IOCDS or assigned to the logical\n     partition IPL-ed with this program\n     Browse MVS sequential dataset or PDS member\n     Edit MVS sequential dataset or PDS member (inplace update only)\n     List VTOC of a DASD volume\n     List PDS directory\n     Display DASD volume serial\n     Dump any DASD record\n     Alter any DASD record\n\nThe utility is password protected, this has a twofold purpose:\n\n   1.Protection against unauthorised use\n   2.Assignment of terminal from which the utility can be used\n\nWhen the program is terminated, it can only be restarted by an IPL.\n\n\nInstallation\n\nThe distribution file ZZSA.ZIP contains the following files:\n\n   1.ZZSADIMG.BIN\n   2.ZZSATIMG.BIN\n   3.ZZSACARD.BIN\n\nAll files must be uploaded to MVS as F(B) 80 sequential datasets,\nZZSATIMG and ZZSADIMG are both in netdata format, and must be\nunloaded to unblocked datasets with the following TSO command:\n\nRECEIVE INDATASET(ZZSADIMG)\n\nand\n\nRECEIVE INDATASET(ZZSATIMG)\n\nThere are now 3 different types of image of this program:\n\n   1.ZZSADASD - ICKDSF ABS format IPL text (RECFM=U)\n   2.ZZSATAPE - Tape IPL text (RECFM=U)\n   3.ZZSACARD - Card image (RECFM=F, LRECL=80)\n\nAll 3 different versions are exactly the same, other then the initial\nIPL CCW chain to load the entire image. The card image has been added to\nsupport the virtual reader on VM as an IPL device in order to create a\nnamed saved system, and is also supported on real readers for those who\nlike to IPL a deck of cards.\n\nWrite IPL text to DASD\n\nIPLtext can be written to DASD using the folling JCL:\n\n//JJAEGERD JOB ,ZZ,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//          NOTIFY=JJAEGER\n//WRITETXT EXEC PGM=ICKDSF,PARM=NOREPLYU\n//SYSPRINT DD  SYSOUT=*\n//SAUTILDD DD  DSN=JJAEGER.ZZSADASD,DISP=SHR\n//SYSIN    DD  *\n REFORMAT UNIT(cua) VERIFY(volser) IPLDD(SAUTILDD,ABS)\n/*\n\nWrite IPL text to TAPE\n\nIPL text can be written to TAPE using the following JCL:\n\n//JJAEGERT JOB ,ZZ,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//          NOTIFY=JJAEGER\n//WRITETXT EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=JJAEGER.ZZSATAPE,DISP=SHR\n//SYSUT2   DD  DSN=JJAEGER.TAPE,DISP=(NEW,KEEP),\n//          UNIT=TAPE,VOL=SER=SAEDIT,LABEL=(1,BLP,EXPDT=98000)\n\nThe default password is ZZSECRET, which is defined as CL8, and can be\nchanged using AMASPZAP, or for DASD IPL text this utility can be used to\nalter the password using the zap option. The password is always\nlogically OR-ed with blanks before being compared with the stored value,\nso only uppercase passwords are supported. The password is contained in\nthe last eight bytes of record CCHHR 0000000006 when the utility is\ninstalled on DASD.\n\nCreating a Named Saved System (NSS) under VM\n\nUpload ZZSACARD.BIN to VM as IPL ZZSA A (recfm f, lrecl 80), and\nissue the following commands:\n\nSP PUN TO * RDR\nPUN IPL ZZSA A (NOH\nORDER RDR fileno\nIPL rdrdev CLEAR STOP\nST B8 0\n\nST 220 40404040 40404040\nST U220 password\n\nDEFSYS ZZSA 0-7 EW MACHMODE XA,ESA PARMREGS=NONE MINSIZE=1M \u00ddRSTD\u00a8\nSAVESYS ZZSA\n\nTERM CONMODE 3270\nIPL ZZSA\n\n\n\nOperation\n\nIPL\n\nIn order to initialise the program perform the following tasks:\n\n   1.Load (IPL) the system from the device that contains the ZZSA IPL\n     text\n   2.Generate an attention interrupt on the local non-SNA 3270 device\n     that will used (eg. hit enter, attention, PA or PF-key)\n   3.Enter the password on the initial screen displayed\n   4.The primary option menu will now be displayed\n\n\n ZZSAPSWD              Stand Alone Utilities\n\n\n\n\n\n\n\n\n                         Enter Password:\n\n\n                         ===> ________\n\n\n\n\n\n\n\n\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nPrimary Option Menu\n\nMenu options can be selected by either:\n\n   1.Enter the action character on the command line (ie. '0')\n   2.Enter the option name on the command line (ie. 'listdev')\n   3.Position the cursor on the selected option and hit enter\n\n\n ZZSAPRIM                   Stand Alone Utilities\n\n Option ===> _\n\n\n     0 ListDev  - List all devices\n\n     1 Browse   - Browse dataset or member                Console     0040/3274\n\n     2 Edit     - Edit dataset or member                  IPL Device  0503/3390\n\n     3 ListVTOC - List Volume Table Of Contents           IPL CPU     0001\n\n     4 ListPDS  - List PDS directory                      CPU Version FF\n\n     5 DispVol  - Display DASD volume label               CPU Serial  123456\n\n     6 Dump     - Dump DASD record by CCHHR               CPU Model   3090\n\n     7 Zap      - Alter DASD record by CCHHR              Date (TOD)  09/01/1991\n\n     X Exit     - Terminate program                       Time (TOD)  23:08:15\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nDevice list\n\nThis option lists valid subchannels and their properties\n SCH\n       Subchannel number\n DEV\n       Device name\n CHP\n       Channel path ID list\n C/T\n       Controller type and model code\n\n       (from SENSE ID)\n D/T\n       Device type and model code\n\n       (From SENSE ID)\n VOL\n       Volume Serial\n\n       (DASD devices only)\n VTOC\n       VTOC pointer in CCHHR format\n\n       (DASD devices only)\n\n\nInvalid or unassigned subchannels are not listed. Unassigned subchannel\nnumbers usually exist in an LPAR environment. These will show as gaps in the\nsubchannel number range.\n\nUsing this option will fully initialise the volume serial table so that\nthe volsers can be used in all other options rather then the device\naddress. All browse commands are valid while viewing the output.\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0000 Col 0001\n\n********************************* Top of Data **********************************\nSCH=0000 DEV=0009 CHP=F0                      C/T=3274-1D\nSCH=0001 DEV=0191 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=CMS191\nSCH=0002 DEV=0923 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSWRK\nSCH=0003 DEV=0924 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSTST\nSCH=0004 DEV=0925 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSDLB\nSCH=0005 DEV=0926 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSACC\nSCH=0006 DEV=0927 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSMSC\nSCH=0007 DEV=0040 CHP=F0\nSCH=0008 DEV=0041 CHP=F0\nSCH=0009 DEV=0042 CHP=F0\nSCH=000A DEV=0043 CHP=F0\nSCH=000B DEV=0044 CHP=F0\nSCH=000C DEV=0045 CHP=F0\nSCH=000D DEV=0046 CHP=F0\nSCH=000E DEV=0047 CHP=F0\nSCH=000F DEV=0048 CHP=F0\nSCH=0010 DEV=0049 CHP=F0\nSCH=0011 DEV=004A CHP=F0\nSCH=0012 DEV=004B CHP=F0\nSCH=0013 DEV=004C CHP=F0\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0000 Col 0017\n********************************* Top of Data **********************************\n1 CHP=F0                      C/T=3274-1D\n1 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=CMS191 VTOC=00\n3 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSWRK VTOC=04\n4 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSTST VTOC=04\n5 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSDLB VTOC=04\n6 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSACC VTOC=04\n7 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSMSC VTOC=04\n0 CHP=F0\n1 CHP=F0\n2 CHP=F0\n3 CHP=F0\n4 CHP=F0\n5 CHP=F0\n6 CHP=F0\n7 CHP=F0\n8 CHP=F0\n9 CHP=F0\nA CHP=F0\nB CHP=F0\nC CHP=F0\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0021 Col 0001\nSCH=0014 DEV=004D CHP=F0\nSCH=0015 DEV=004E CHP=F0\nSCH=0016 DEV=004F CHP=F0\nSCH=0017 DEV=000C CHP=F0\nSCH=0018 DEV=000D CHP=F0\nSCH=0019 DEV=000E CHP=F0\nSCH=001A DEV=0190 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT190\nSCH=001B DEV=019A CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19A\nSCH=001C DEV=019B CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19B\nSCH=001D DEV=019D CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19D\nSCH=001E DEV=019E CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19E\nSCH=001F DEV=019F CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19F\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nBrowse dataset or member\n\nEnter the fully qualified dataset name without quotes, and in case of a PDS\nenter the PDS member name.\n\nIf the volume has been referred to, or option 0 has been used to\ninitialise the volume serial table, then a volser can be entered rather\nthen a device address.\n\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\n\n ZZSABRDS Browse dataset or member\n Command ===>\n\n\n\n\n           Enter dataset name:\n           ===> _\n\n           Enter member name (PDS only):\n           ===>\n\n           and 4 digit DASD device number:\n           ===>\n\n\n           or DASD volume serial:\n           ===>\n\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nBrowse primary commands\n\nBrowse supports the following primary commands:\n\n     MAX , M\n     TOP, T\n     BOTTOM, BOT, B\n     UP, U\n     DOWN, D\n     FIND, F\n     RFIND, RF\n     LEFT, L\n     RIGHT, R\n     SORT\n     SAVE\n     FILE\n     END, CANCEL\n     EXIT\n\nMAX, M\n\nWill move max-right, max-left, top or bottem depending on the pf-key\npressed.\n\nTOP, T\n\nWill move to the top (line 1) of the file.\n\nBOTTOM, BOT, B\n\nWill move to the last line of the file.\n\nUP, U\n\nMoves one page backward. When the cursor is located in the output area, the\ncurrent line will become the last line in the output area.\n\nDOWN, D\n\nMoves one page forward. When the cursor is located in the output area, the\ncurrent line will become the first line in the output area.\n\nFIND, F\n\nFIND STRING will search for string in the file.\n\nRFIND, RF\n\nWill find the next occurrence of string in the file.\n\nLEFT, L\n\nMoves 80 columns to the left in the output file. When the cursor is located in\nthe output area, the current column will become the rightmost column in the\noutput area.\n\nRIGHT, R\n\nMoves 80 collumns to the right in the output file. When the cursor is located in\nthe output area, the current column will become the leftmost column in the\noutput area.\n\nSORT\n\nWill sort the file, when the cursor is located in the output area, the\nfile will be sorted on the cursor column.\n\nCANCEL, EXIT\n\nReturns to previous panel. Data will be discarded in edit mode, use SAVE\nor FILE to save data first.\n\n\n ZZSABROW Browse SYS1.PARMLIB(IEASYSS3)\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nALLOC=00,                      /* ALLOC00  ALLOCATION DEFAULTS MEMB. */\nCLOCK=00,                      /* CLOCK00  CLOCK MEMBER (NOPROMPT)   */\nCLPA,                          /*          CREATE PAG.LINK PACK AREA */\nCMB=(COMM,100),                /*          CHANNEL MEASUREMENT BLOCK */\nCMD=(S3),                      /* COMMNDS3    FIRST COMMANDS         */\nCON=S3,                        /* CONSOLS3 CONSOLE MEMBER            */\nCSA=(3584,16382),              /*          CSA/ECSA RANGE IN KBYTES  */\nDIAG=00,                       /* DIAG00   COMMON/GETM.FREEM.STOR    */\nDEVSUP=00,                     /* DEVSUP00 3480 SUBSYSTEM WITH IDRC  */\nDUMP=DASD,                     /*          DUMP ON DASD SYS1.DUMPXX  */\nFIX=00,                        /* IEAFIX00 FIXED LPA MEMBER          */\nIOS=00,                        /* IECIOS00 MIH   H-I/O SPEC. MEMBER  */\nLNK=(S3,L),                    /* LNKLSTS3 LINKLIST MEMBER           */\nLNKAUTH=APFTAB,                /*          LINKLIST NOT APF          */\nLOGCLS=L,                      /*          SYSLOG OUTPUT CLASS       */\nLOGLMT=999999,                 /*          CLOSE SLOG. 999.999 WTL'S */\nLPA=(S3,L),                    /* LPALSTS3 LPALIST MEMBER            */\nMAXUSER=100,                   /*          MAX. 100 ADDRESS SPACES   */\nMSTRJCL=00,                    /* MSTJCL00 LMOD MEMBER SYS1.LINKLIB  */\nNSYSLX=60,                     /* NUMBER OF SYSTEM LX'S RESERVED     */\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nEdit dataset or member\n\nEnter the fully qualified dataset name without quotes, and in case of a PDS\nenter the PDS member name.\n\nIf the volume has been referred to, or option 0 has been used to initialise the\nvolume serial table, then a volser can be entered rather then a device address.\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\nEdit supports F(B) 80 datasets only. Datasets with other DCB attributes can\nonly be altered with the ZAP option\n\n\n ZZSAEDDS Edit dataset or member\n Command ===>\n\n\n           Enter dataset name:\n           ===> _\n\n           Enter member name (PDS only):\n           ===>\n\n           and 4 digit DASD device number:\n           ===>\n\n           or DASD volume serial:\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nEdit primary commands\n\nIn addition to all browse primary commands edit supports the following\ncommands:\n\n     SAVE\n\nSAVE, FILE\n\nWhen saving a dataset or member only updated records will be written back\nto DASD, a SAVE command with no changed data will not cause a DASD\nupdate to occur. SAVE will not update any fields in the F1DSCB, last\nreference dates etc. will not be updated.\n\n\n ZZSAEDIT Edit SYS1.PARMLIB(IEASYSS3)\n Command ===> _                                              Line 0000 Col 0001\n ******************************** Top of Data *********************************\nALLOC=00,                      /* ALLOC00  ALLOCATION DEFAULTS MEMB. */\nCLOCK=00,                      /* CLOCK00  CLOCK MEMBER (NOPROMPT)   */\nCLPA,                          /*          CREATE PAG.LINK PACK AREA */\nCMB=(COMM,100),                /*          CHANNEL MEASUREMENT BLOCK */\nCMD=(S3),                      /* COMMNDS3    FIRST COMMANDS         */\nCON=S3,                        /* CONSOLS3 CONSOLE MEMBER            */\nCSA=(3584,16382),              /*          CSA/ECSA RANGE IN KBYTES  */\nDIAG=00,                       /* DIAG00   COMMON/GETM.FREEM.STOR    */\nDEVSUP=00,                     /* DEVSUP00 3480 SUBSYSTEM WITH IDRC  */\nDUMP=DASD,                     /*          DUMP ON DASD SYS1.DUMPXX  */\nFIX=00,                        /* IEAFIX00 FIXED LPA MEMBER          */\nIOS=00,                        /* IECIOS00 MIH   H-I/O SPEC. MEMBER  */\nLNK=(S3,L),                    /* LNKLSTS3 LINKLIST MEMBER           */\nLNKAUTH=APFTAB,                /*          LINKLIST NOT APF          */\nLOGCLS=L,                      /*          SYSLOG OUTPUT CLASS       */\nLOGLMT=999999,                 /*          CLOSE SLOG. 999.999 WTL'S */\nLPA=(S3,L),                    /* LPALSTS3 LPALIST MEMBER            */\nMAXUSER=100,                   /*          MAX. 100 ADDRESS SPACES   */\nMSTRJCL=00,                    /* MSTJCL00 LMOD MEMBER SYS1.LINKLIB  */\nNSYSLX=60,                     /* NUMBER OF SYSTEM LX-ES RESERVED    */\n  F2=Save  F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nVTOC List Utility\n\nEnter the four digit device address, or alternatively the volume serial\nnumber if the volume has been referred to previously.\n\n\n ZZSAGDEV VTOC List Utility\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n\n           ===> _\n\n           or DASD volume serial:\n\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nIn addition to the dataset names found on the volume, the following\ninformation will be displayed:\n DSORG\n          Dataset organisation ie VS, PO, PO-E\n RECFM\n          Record Format ie FB, VB, U\n BLKSIZE\n          Maximum block size\n LRECL\n          Logical Record Length\n CRDATE\n          Creation date\n REFDATE\n          Last reference date\n\n          (This utility does not update the last reference date)\n EXPDT\n          Expiration date\n EXTENT\n          Number of extends, followed by the extend addresses in CCHH\n          format\n\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nSYS1.AAID.CLIST                              DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AAID.MSGS                               DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AAID.PANELS                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AAID.TABLES                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ADCOB.CLIST                             DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ADLE.CLIST                              DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AD370.CLIST                             DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AD370.MSGS                              DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AD370.PANELS                            DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AD370.SKELS                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AI.CLIST                                DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AI.PANELS                               DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AI.SKELS                                DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.APL.CLIST                               DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.BOOK.EXEC                               DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.BOOK.MSGDAN                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGDEU                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGESP                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGFRA                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGITA                             DSORG=PO   RECFM=FB   BLKSIZE=06160\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0398 Col 0001\nSYS1.HELP                                    DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HELPENP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFCLST                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.HRFMSG                                  DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFPANL                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFSKEL                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTC                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ICEDGTL                                 DSORG=PO   RECFM=U    BLKSIZE=06144\nSYS1.ICEDGTM                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTS                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTT                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPC                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ICEISPL                                 DSORG=PO   RECFM=U    BLKSIZE=06144\nSYS1.ICEISPM                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPS                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPT                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEMAC                                  DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEUSER                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICQABTXT                                DSORG=PO   RECFM=FB   BLKSIZE=06160\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0398 Col 0081\n LRECL=00080 CRDATE=89026 REFDATE=89229 EXPDT=00000 EXTENT=001 01F50005-01FD0006\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 01FD0007-01FF000B\n LRECL=00255 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 018E000C-018F000A\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 01FF000C-\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 02000007-020B0002\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 020B0003-020E0006\n LRECL=00255 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 018F000B-018F000D\n LRECL=00000 CRDATE=89026 REFDATE=89210 EXPDT=00000 EXTENT=001 020E0007-020E000A\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020E000B-020E000D\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020E000E-020F0006\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020F0007-020F0009\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020F000A-020F000C\n LRECL=00255 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 018F000E-\n LRECL=00000 CRDATE=89026 REFDATE=89210 EXPDT=00000 EXTENT=001 020F000D-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02100006-0210000C\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 0210000D-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170002-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170006-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170009-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02180002-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02180008-0218000E\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nPDS directory list\n\nEnter the fully qualified dataset name without quotes.\n\nIf the volume has been referred to, or option 0 has been used to initialise the\nvolume serial table, then a volser can be entered rather then a device address.\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\nThe output will either be in loadmodule or ispf stats format.\n\n\n ZZSALPDS List PDS Directory\n Command ===>\n\n\n           Enter dataset name:\n\n           ===> _\n\n           and 4 digit DASD device number:\n\n           ===>\n\n           or DASD volume serial:\n\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nPDS directory showing ISPF statistics\n\nIn addition to the member name the following information is displayed:\n TTR\n          Relative position of member in PDS\n CCHHR\n          Absolute track address of member\n VER\n          Member version and level\n CRDATE\n          Creation date\n CHDATE\n          Date of last update\n CHTIME\n          Time of last update\n SIZE\n          Size in records\n INIT\n          Initial member size\n MOD\n          Modifications\n ID\n          Userid of last update\n\n\n\n ZZSABROW Directory SYS1.PARMLIB\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nAAAAAAAA TTR=000F1B CCHHR=0B7900001B VER=01.00 CRDATE=90.166 CHDATE=90.166 CHTIM\nADYSET00 TTR=000F0A CCHHR=0B7900000A VER=01.02 CRDATE=90.072 CHDATE=90.075 CHTIM\nADYSET01 TTR=000F08 CCHHR=0B79000008 VER=01.01 CRDATE=90.072 CHDATE=90.075 CHTIM\nADYSET02 TTR=000F0C CCHHR=0B7900000C VER=01.02 CRDATE=90.072 CHDATE=90.075 CHTIM\nALLOC00  TTR=000F0E CCHHR=0B7900000E VER=01.02 CRDATE=90.329 CHDATE=90.075 CHTIM\nAPPCPMS3 TTR=001214 CCHHR=0B79000314 VER=01.00 CRDATE=89.206 CHDATE=89.206 CHTIM\nASCHPMS3 TTR=00110D CCHHR=0B7900020D\nASFPBPS3 TTR=001205 CCHHR=0B79000305 VER=01.00 CRDATE=89.104 CHDATE=89.104 CHTIM\nCLOCKOP  TTR=001006 CCHHR=0B79000106 VER=01.00 CRDATE=90.266 CHDATE=90.266 CHTIM\nCLOCKST  TTR=001002 CCHHR=0B79000102 VER=01.01 CRDATE=90.090 CHDATE=90.266 CHTIM\nCLOCKWT  TTR=001004 CCHHR=0B79000104 VER=01.01 CRDATE=90.090 CHDATE=90.266 CHTIM\nCLOCK00  TTR=00120B CCHHR=0B7900030B VER=01.10 CRDATE=90.123 CHDATE=90.268 CHTIM\nCNLENU00 TTR=000102 CCHHR=0B78000102 VER=01.00 CRDATE=89.325 CHDATE=90.005 CHTIM\nCOFDLF00 TTR=000104 CCHHR=0B78000104 VER=01.01 CRDATE=89.005 CHDATE=89.005 CHTIM\nCOFVLFS3 TTR=000106 CCHHR=0B78000106 VER=01.01 CRDATE=89.057 CHDATE=89.089 CHTIM\nCOFVLF00 TTR=000108 CCHHR=0B78000108 VER=01.00 CRDATE=89.351 CHDATE=90.005 CHTIM\nCOMMNDS3 TTR=001B04 CCHHR=0B79000C04 VER=01.09 CRDATE=89.344 CHDATE=90.229 CHTIM\nCONFIGS3 TTR=00010A CCHHR=0B7800010A VER=01.00 CRDATE=89.344 CHDATE=89.344 CHTIM\nCONSOLS3 TTR=00010C CCHHR=0B7800010C VER=01.00 CRDATE=89.344 CHDATE=89.344 CHTIM\nCOUPLES3 TTR=001B12 CCHHR=0B79000C12 VER=01.02 CRDATE=87.105 CHDATE=87.106 CHTIM\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Directory SYS1.PARMLIB\n Command ===> _                                              Line 0000 Col 0051\n********************************* Top of Data **********************************\nATE=90.166 CHDATE=90.166 CHTIME=13:47:26 SIZE=0038 INIT=0038 MOD=0000 ID=T1TC\nATE=90.072 CHDATE=90.075 CHTIME=09:50:37 SIZE=0015 INIT=0015 MOD=0000 ID=T1SC\nATE=90.072 CHDATE=90.075 CHTIME=09:46:34 SIZE=0011 INIT=0011 MOD=0000 ID=T1SC\nATE=90.072 CHDATE=90.075 CHTIME=09:50:59 SIZE=0013 INIT=0013 MOD=0000 ID=T1SC\nATE=90.329 CHDATE=90.075 CHTIME=10:22:49 SIZE=0109 INIT=0109 MOD=0000 ID=T1SC\nATE=90.206 CHDATE=90.206 CHTIME=14:09:18 SIZE=0004 INIT=0004 MOD=0000 ID=T2JJ\n\nATE=89.104 CHDATE=89.104 CHTIME=12:30:56 SIZE=0057 INIT=0057 MOD=0000 ID=TSJJ\nATE=90.266 CHDATE=90.266 CHTIME=15:16:27 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=90.090 CHDATE=90.266 CHTIME=12:41:39 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=90.090 CHDATE=90.266 CHTIME=12:41:43 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=89.123 CHDATE=89.268 CHTIME=11:04:32 SIZE=0005 INIT=0002 MOD=0000 ID=TSJH\nATE=88.325 CHDATE=89.005 CHTIME=13:24:47 SIZE=0049 INIT=0049 MOD=0000 ID=TSWR\nATE=89.005 CHDATE=89.005 CHTIME=13:26:55 SIZE=0026 INIT=0026 MOD=0001 ID=TSWR\nATE=89.057 CHDATE=89.089 CHTIME=14:16:27 SIZE=0033 INIT=0041 MOD=0000 ID=TSTC\nATE=88.351 CHDATE=89.005 CHTIME=13:52:39 SIZE=0032 INIT=0032 MOD=0000 ID=TSWR\nATE=88.344 CHDATE=89.229 CHTIME=14:44:29 SIZE=0012 INIT=0006 MOD=0007 ID=TSJJ\nATE=88.344 CHDATE=89.344 CHTIME=21:13:36 SIZE=0059 INIT=0059 MOD=0000 ID=TSTC\nATE=89.344 CHDATE=89.344 CHTIME=20:55:56 SIZE=0225 INIT=0225 MOD=0000 ID=TSTC\nATE=87.105 CHDATE=87.106 CHTIME=10:07:30 SIZE=0006 INIT=0001 MOD=0006 ID=TSJJ\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nPDS directory showing loadmodule attributes\n\nIn addition to the member name the following information is displayed:\n SIZE\n         Virtual storage required to load the module\n EP\n         Entry point address\n AC\n         Authorisation code\n AMODE\n         Addressing mode\n RMODE\n         Residency mode\n MAIN\n         Name of main entry point\n\n         This field is only valid for an alias\n ATTR\n         Attributes such as RENT, REFR etc\n\n\n\n ZZSABROW Directory SYS1.LPALIB\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nACYAPCIP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=000000 AC=00 AMODE=31  RMODE\nACYAPCNP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0000C0 AC=00 AMODE=31  RMODE\nACYAPCPP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=000308 AC=00 AMODE=31  RMODE\nACYAPDRP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=002148 AC=00 AMODE=31  RMODE\nACYAPD1P TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=002900 AC=00 AMODE=31  RMODE\nACYAPFLP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0032A8 AC=00 AMODE=31  RMODE\nACYAPQCP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0038D0 AC=00 AMODE=31  RMODE\nACYAPQRP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=003F20 AC=00 AMODE=31  RMODE\nACYAPRGP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=004670 AC=00 AMODE=31  RMODE\nACYAPRIP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005570 AC=00 AMODE=31  RMODE\nACYAPRQP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005790 AC=00 AMODE=31  RMODE\nACYAPRSP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005CD0 AC=00 AMODE=31  RMODE\nACYAPSLP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=006540 AC=00 AMODE=31  RMODE\nADYPRED  TTR=00580C CCHHR=02DC000B0C SIZE=0013B8 EP=000000 AC=00 AMODE=31  RMODE\nAHLACFV  TTR=00681F CCHHR=02DD000C1F SIZE=000668 EP=00001C AC=00 AMODE=31  RMODE\nAHLDMPMD TTR=006523 CCHHR=02DD000923 SIZE=001728 EP=000B84 AC=00 AMODE=31  RMODE\nAHLDSP   TTR=006831 CCHHR=02DD000C31 SIZE=0007C8 EP=00008E AC=00 AMODE=31  RMODE\nAHLEXT   TTR=00680D CCHHR=02DD000C0D SIZE=000AA0 EP=00012A AC=00 AMODE=31  RMODE\nAHLFFP   TTR=009F0E CCHHR=02E100070E SIZE=005800 EP=000000 AC=00 AMODE=31  RMODE\nAHLFIO   TTR=006804 CCHHR=02DD000C04 SIZE=0006F0 EP=00001C AC=00 AMODE=31  RMODE\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Directory SYS1.LPALIB\n Command ===> _                                              Line 0000 Col 0051\n********************************* Top of Data **********************************\nP=000000 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0000C0 AC=00 AMODE=31  RMODE=ANY ATTR=(RN,RU)\nP=000308 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=002148 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=002900 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0032A8 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0038D0 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=003F20 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=004670 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005570 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005790 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005CD0 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=006540 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=000000 AC=00 AMODE=31  RMODE=ANY ATTR=(RN,RU)\nP=00001C AC=00 AMODE=31  RMODE=ANY MAIN=AHLTVTAM ATTR=(RN,RU)\nP=000B84 AC=00 AMODE=31  RMODE=ANY MAIN=AHLSETD  ATTR=(RN,RU)\nP=00008E AC=00 AMODE=31  RMODE=ANY MAIN=AHLTXSYS ATTR=(RN,RU)\nP=00012A AC=00 AMODE=31  RMODE=ANY MAIN=AHLTSYSM ATTR=(RN,RU)\nP=000000 AC=00 AMODE=31  RMODE=ANY MAIN=AHLFVEC  ATTR=(RN,RU,RF)\nP=00001C AC=00 AMODE=31  RMODE=ANY MAIN=AHLTSYFL ATTR=(RN,RU)\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nDisplay volume label\n\nEnter the four digit device address.\n\n\n ZZSAGVOL Display DASD Record 3 (VOL1)\n Command ===>\n\n\n\n\n           Enter 4 digit DASD device number:\n\n\n           ===> _\n\n\n ZZSABROW DASD record 3 for device 0926\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nVolume Label Identifier       VOL\nVolume Label Number           1\nVolume Serial Number          SYSACC\nVTOC Pointer (CCHHR)          0459000001\nVolume Security               X'40'\nOwner Name and Address Code   SYS1\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nDump DASD record\n\nEnter the four digit device address and the ten digit CCHHR address of the\nrecord to be displayed.\n\n\n ZZSADUMP Dump DASD record\n\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n           ===> _\n\n           and record address in 10 digit CCHHR format:\n           ===>\n\n\n ZZSABROW DASD record dump\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nDevice      0926(SYSACC)\nCCHHR       0000 0000 03   Sector      0E(014)\nKey length  04(004)        Data length 0050(00080)\n\nKey     0000    E5D6D3F1                                  VOL1\n\nData    0000    E5D6D3F1  E2E8E2C1  C3C34004  59000001    VOL1SYSACC ._...\n        0010    40404040  40404040  40404040  40404040\n        0020    40404040  40E2E8E2  F1404040  40404040         SYS1\n        0030    40404040  40404040  40404040  40404040\n        0040    40404040  40404040  40404040  40404040\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nAlter DASD record\n\nSupply the four digit device number and the ten digit CCHHR address on the\nZZSAALTR panel.\n\n\n ZZSAALTR Alter DASD record\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n\n           ===> 0926\n\n           and record address in 10 digit CCHHR format:\n\n           ===> 0000000003_\n\n\n\nZap supports the following primary commands:\n\n     MAX , M\n     TOP, T\n     BOTTOM, BOT, B\n     UP, U\n     DOWN, D\n     SAVE\n     END, CANCEL, EXIT\n\nMAX, M\n\nWill move max-right, max-left, top or bottem depending on the pf-key\npressed.\n\nTOP, T\n\nWill move to the top (line 1) of the file.\n\nBOTTOM, BOT, B\n\nWill move to the last line of the file.\n\nUP, U\n\nMoves one page backward. When the cursor is located in the output area, the\ncurrent line will become the last line in the output area.\n\nDOWN, D\n\nMoves one page forward. When the cursor is located in the output area, the\ncurrent line will become the first line in the output area.\n\nSAVE, FILE\n\nWhen saving a dataset or member only updated records will be written back\nto DASD, a SAVE command with no changed data will not cause a DASD\nupdate to occur. SAVE will not update any fields in the F1DSCB, last\nreference dates etc. will not be updated.\n\nEND, CANCEL, EXIT\n\nReturns to previous panel. Data will be discarded, use SAVE to save data\nfirst.\n\nUpdated, but unsaved fields appear hilited, and will revert back to their\noriginal intensity when the data is saved.\n\n\n ZZSADZAP Alter DASD 0926 CCHHR 0000000003\n Command ===> _                                                     Offset 0000\n\n Key  0000  E5 D6 D3 F1                                       VOL1\n\n Data 0000  E5 D6 D3 F1 E2 E8 E2 C1 C3 C3 40 04 59 00 00 01   VOL1SYSACC ._...\n      0010  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n      0020  40 40 40 40 40 E2 E8 E2 F2 40 40 40 40 40 40 40        SYS2\n      0030  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n      0040  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n\n\n\n\n\n\n\n\n\n\n\n\n\n  F2=Save  F3=End                      F7=Up F8=Down\n\n\n\nTerminating the program\n\nThe first 16M of central storage are cleared before loading a disabled wait\nPSW. This will prevent unauthorised access to sensitive data, and render the\nutility inelidgeble for restart. It can only be restarted with an IPL.\n\n\n ZZSAWAIT                     Stand Alone Utilities\n\n\n\n\n\n\n\n\n                            Loading disabled wait PSW\n\n                               Program terminated.\n\n\n\n\n\n\n\n\n\n\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nFixes\n\nModification levels are:\n\n J1\n    15/05/93\n           Valid paths not correctly listed\n J2\n    11/09/94\n           Device addresses gt X'7FFF' not recognised\n J3\n    04/10/98\n           DEAD0001 INTC X'15' on HDS M2000-728 when trying to\n           change interruption parm on CFS subchannel while SCHV bit\n           not set\n J4\n    09/10/98\n           Fix DEAD0005 on exit of PDS member list when PDS\n           contains no members\n J5\n    10/10/98\n           Fix overlay on primary option menu\n J6\n    10/10/98\n           Fix random posting of wait on I/O completion after timeout has\n           occurred\n J7\n    14/10/98\n           Fix DEAD0005 on invalid or corrupted VTOC\n J8\n    24/10/98\n           Reduce storage requirements for UCB table\n\n\n\nDOWNLOAD\n\nIPLTEXT is distributed in distribution file zzsa.zip\n\nPrevious version 90363+ available at fix level J3 in zzsa90363p.zip\n\n\n\n\n", "mimetype": "application/x-dosexec", "datatype": "unknown-8bit", "extension": ".x-dosexec"}, "$$README": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x14\\x01\\x18$o\\x01\\x18$\\x7f\\x12\\x10\\x00]\\x00@\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2018-09-03T00:00:00", "modifydate": "2018-09-04T12:10:14", "lines": 93, "newlines": 64, "modlines": 0, "user": "SBGOLOB"}, "text": "           Instructions for using the Practice ZZSA package\n\nIntroduction:\n\nThe purpose of this file is to provide an environment where you can\npractice using the ZZSA standalone recovery tool.\n\nZZSA is a recovery tool that was written by Jan Jaeger, and has nothing\nto do with IBM.  ZZSA, however, can be used to read IBM disk packs which\nwere formatted for use by MVS or z/OS.\n\nZZSA is IPL text.  That is, the IPL text of ZZSA is loaded onto a disk\npack, and the disk pack is IPL-ed, standalone.  Other disk packs may be\nin the configuration that is IPL-ed, and ZZSA will find them, if you\nrun Option 0 first, as soon as you get into ZZSA.\n\nWhat is here, in this file?\n\nI have made a package consisting of a 5-cylinder data volume, formatted\nas a 3390 disk, containing ipl-text to IPL ZZSA, and also containing\na text pds, to practice on, so you can become familiar with using the\nZZSA file editor, and with the other ZZSA functions.\n\nI have added a load library as well, and a listing of the (unrelated)\nprogram called NODSI, which lends itself to a simple zap, in order to\nremove a restriction to its use.\n\nThe Packaging of this file.\n\nThe package is a zipped file, (pds member PRACZZSA) which unzips to\na directory on the PC.  For argument's sake, we shall call the\ndirectory praczzsa (Practice using ZZSA).  The directory contains a\nsubdirectory which has a version of the Hercules emulator.  I am\ncalling this version of the emulator hyperion-40w.  It comes from\nwww.softdevlabs.com.\n\nDetailed instructions on how to use ZZSA may be found at the URL:\n\n    http://www.cbttape.org/~jjaeger/zzsa.html\n\n    or see member $$$#ZZSA in this pds.\n\nNow, to set up ZZSA on your PC using this package.\n\n1.  UNZIP the zip file into a directory that we'll call C:\\praczzsa\n    If it is not the c: drive, make the appropriate adjustments\n    to the accompanying .bat (batch) files in the directory.\n\n2.  Go to a command prompt screen if you are using Windows.\n\n3.  cd to the directory, and run the zzsa.bat batch file.  Edit it\n    to point to the proper disk if necessary.  An original copy of\n    the IPL disk for zzsa is shipped with the package.  Its name is\n    cyl005O.  With the first execution of the zzsa.bat file, this\n    pack is copied over to the working pack, whose name is cyl005.\n    In addition, a backup pack cyl005B is created with the first\n    execution of zzsa.bat.  Upon subsequent execution of zzsa.bat,\n    you have a choice if you want to use the pack cyl005B from last\n    time, or you can overlay your working pack cyl005 with the\n    original pack, cyl005O.  For example, if you clipped the cyl005\n    pack so it has a different id, you might want to overlay it with\n    the original pack that was shipped with this file, so you can\n    start over.\n\n4.  Set up your 3270 emulator to IP address 127.0.0.1, port 3270   The\n    terminal should grab the Hyperion (aka Hercules) main screen.\n\n5.  On the command prompt screen, which now has become a Hercules terminal,\n    enter:   IPL a40\n\n6.  Go to the Hyperion (Hercules) screen (the 3270 emulator) and enter\n    ESC or PA1 to generate an interrupt. The ZZSA entry screen should\n    now appear.   ZZSECRET is the password.  Enter it and PRESS ENTER.\n\n7.  Always enter Option 0 first.  This enables ZZSA to find out which\n    peripheral devices are connected to it.  Then you can try all the\n    other options out.  See the detailed instructions at the\n    following URL:\n\n    http://www.cbttape.org/~jjaeger/zzsa.html\n\n    Or see member $$$#ZZSA in this pds.\n\n8.  After you have exited ZZSA with the X option, you can get out of\n    Hercules (Hyperion) by entering quit in the command prompt screen,\n    which had become the Hercules console.  It is now no longer the\n    Hercules console, and it has now become a Windows Command screen,\n    again.  Follow the additional prompts to make a backup of your\n    cyl005 disk (cyl005B).\n\nGood Luck......\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$READM2": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x01\\x18$\\x7f\\x01\\x18$\\x7f\\x12\\x11\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-09-04T00:00:00", "modifydate": "2018-09-04T12:11:38", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "General Philosophy Regarding This File.  (An advanced look.)\n\nWhy is there a load library, and source for NODSI (which is an\nunrelated program), and a listing?\n\nWhy is there an emphasis on the \"type over zap\" capability here?\n\nIt seems to me that the purpose of this whole thing is to train\nz/OS people in using this tool.  The Herc stuff is just incidental,\nproviding a vehicle to create a \"practice environment\".  I also\nunderstand that ZZSA is not the \"environment of choice\" for dealing\nz/OS.  It is only a fixing tool, when nothing else is available.\nBut it has capabilities that are considerable, including a \"type\nover\" zap, which is kind of rare, as tools go.  Question is, to\nfind the right place to zap and get there accurately.  That skill\nis what I'm trying to help with.\n\nThat piece of it is not for \"the casual user\".  So you need a lot\nof practice, if you want to take the tool that far.  I have even\ninstalled a disassembly listing of NODSI, on the CYL005 pack,\nso they can try and learn to navigate to the correct place to zap.\n\nThe usual use for the zap (with ZZSA) is clipping a pack by\nchanging its id record (in record 3, track 0).  That record is\neasy to get to (0000000003).  But load module locations are very\nhard to find with ZZSA, and I don't want to exclude the\nadventurous user who may want to learn to do that too.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE979": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00\\x17\\x01\\x18$\\x7f\\x01\\x18$\\x7f\\x14\\x13\\x00=\\x00=\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-09-04T00:00:00", "modifydate": "2018-09-04T14:13:17", "lines": 61, "newlines": 61, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 979 is a package to help you learn to use the ZZSA        *   FILE 979\n//*           standalone utility program referred to in CBT Files   *   FILE 979\n//*           437 and 538.  There was no IBM involvement and no     *   FILE 979\n//*           IBM utilities are packaged with this package.         *   FILE 979\n//*                                                                 *   FILE 979\n//*               ******  ZZSA Tutorial Package  ******             *   FILE 979\n//*                                                                 *   FILE 979\n//*           THIS IS A COMPLETE, SELF-CONTAINED PACKAGE TO         *   FILE 979\n//*           SET UP ON YOUR PC, WHICH EMULATES A Z/OS ENVIRONMENT  *   FILE 979\n//*           RUNNING \"STANDALONE ZZSA\", WITH NO IBM INVOLVEMENT.   *   FILE 979\n//*                                                                 *   FILE 979\n//*           NO IBM PROGRAMS ARE RUN WITH THIS PACKAGE.  ALL       *   FILE 979\n//*           THE MATERIALS ARE PUBLIC-DOMAIN OR NEARLY SO.         *   FILE 979\n//*                                                                 *   FILE 979\n//*           WINDOWS IS ASSUMED.  IF YOU CAN GET THIS TO WORK      *   FILE 979\n//*           ON LINUX, PLEASE SEND THE MATERIALS TO ME, SO         *   FILE 979\n//*           I CAN ADD THEM IN HERE.   sbgolob@cbttape.org         *   FILE 979\n//*                                                                 *   FILE 979\n//*               ******  ZZSA Tutorial Package  ******             *   FILE 979\n//*                                                                 *   FILE 979\n//*           Included is a 5-cylinder mini-disk image for the PC   *   FILE 979\n//*           in P/390 format, containing IPL-text for ZZSA, and    *   FILE 979\n//*           containing some data files to practice editing or     *   FILE 979\n//*           zapping.                                              *   FILE 979\n//*                                                                 *   FILE 979\n//*           A source library called 'PRACTICE.ZZSA' and a load    *   FILE 979\n//*           library called 'ZZSA.TESTLOAD' are included in the    *   FILE 979\n//*           disk volume CYL005.  This should supply a lot of      *   FILE 979\n//*           material to practice using ZZSA with.                 *   FILE 979\n//*                                                                 *   FILE 979\n//*           I have added a disassembly listing of the load        *   FILE 979\n//*           module NODSI (unrelated) so the advanced user         *   FILE 979\n//*           can locate the appropriate place in it, to zap.       *   FILE 979\n//*                                                                 *   FILE 979\n//*           Jan Jaeger's original documentation                   *   FILE 979\n//*           (member $$$#ZZSA) and Lionel Dyck's msword doc        *   FILE 979\n//*           (member DOCX) have also been included here.           *   FILE 979\n//*                                                                 *   FILE 979\n//*           In addition, the entire Hercules emulator (4.0)       *   FILE 979\n//*           and a matching config file for the mini-disk was      *   FILE 979\n//*           included.  See the $$README member for some more      *   FILE 979\n//*           information.  The $$README file here, as opposed      *   FILE 979\n//*           to the one on the zip file, might be more up-to-date. *   FILE 979\n//*                                                                 *   FILE 979\n//*           Member PRACZZSA in this pds is a zip file, which      *   FILE 979\n//*           must be download in binary to a PC, and unzipped      *   FILE 979\n//*           there.  This will set up the entire environment       *   FILE 979\n//*           for you, and it just needs to be slightly             *   FILE 979\n//*           customized.  See member $$README first.  Then....     *   FILE 979\n//*                                                                 *   FILE 979\n//*           When you unzip the PRACZZSA zip file, customize       *   FILE 979\n//*           and execute the zzsa.bat file, which will set up      *   FILE 979\n//*           Hercules, and enable you to execute ZZSA under it.    *   FILE 979\n//*                                                                 *   FILE 979\n//*           See member DOCX.  You'll have to customize things     *   FILE 979\n//*           for youself, but the ingredients should be here.      *   FILE 979\n//*                                                                 *   FILE 979\n//*           Just in case you want to restore the CYL005 minidisk  *   FILE 979\n//*           on a real z/OS system, I've included an XMIT of       *   FILE 979\n//*           a DFDSS backup of it.  Member CYL005XM.               *   FILE 979\n//*                                                                 *   FILE 979\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CYL005XM": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x18$\\x7f\\x01\\x18$\\x7f\\x13$\\x13\\x82\\x13\\x82\\x00\\x00\\xe3\\xc8\\xc5\\xd7\\xc1\\xc3\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-09-04T00:00:00", "modifydate": "2018-09-04T13:24:28", "lines": 4994, "newlines": 4994, "modlines": 0, "user": "THEPACK"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DOCX": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x18$_\\x01\\x18$_\\x16#<\\x14<\\x14\\x00\\x00\\xd3\\xc2\\xc4\\xe8\\xc3\\xd2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-09-02T00:00:00", "modifydate": "2018-09-02T16:23:15", "lines": 15380, "newlines": 15380, "modlines": 0, "user": "LBDYCK"}, "mimetype": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "datatype": "binary", "extension": ".docx"}, "NODSI": {"ttr": 9225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x994\\x8f\\x01\\x18$_\\x14#\\x01\\x9c\\x01\\x9c\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "2018-09-02T14:23:00", "lines": 412, "newlines": 412, "modlines": 0, "user": "SOURCE"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*   (Note:  Line 183 is commented out to eliminate the need for RACF)\n//ASMA90   EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n TITLE 'BYPASS ENQ PROCESSING FOR DATASETS'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*   MVS DOES NOT SUPPLY A FUNCTION TO DELETE/RENAME/ALTER DATASETS    *\n*   THAT HAVE ENQ'S AGAINST DUPLICATES.                               *\n*   THIS PROGRAM WILL SUPPLY THAT FUNCTION.                           *\n*                                                                     *\n* FUNCTION:                                                           *\n*   THIS PROGRAM WILL PASS CONTROL TO THE PROGRAM NAMED ON THE PARM   *\n*   STATEMENT, AND INTERCEPT ALL SYSDSN ENQ'S ISSUED BY THAT PROGRAM  *\n*   SO THAT RNAMES ENQUEUED UPON CAN BE PROCESSED AS IF THEY HAD NO   *\n*   ACTIVE ENQ AGAINST THEM.                                          *\n*   ALL ENQUEUES WITH SCOPE=SYSTEM OR SCOPE=SYSTEMS WILL BE CONVERTED *\n*   TO SCOPE=STEP.  THIS SO THAT PROGRAMS ISSUEING THOSE ENQUEUES     *\n*   CAN STILL RELY ON VALID RETURNCODES FROM GRS FOR THE ENQUEUES     *\n*   AND DEQUEUES DONE.                                                *\n*                                                                     *\n* EXAMPLE:                                                            *\n*   //T2JJA    JOB ,'JAN JAEGER'                                      *\n*   //NODSI    EXEC PGM=NODSI,PARM='IEHPROGM,LINECNT=66'              *\n*   //VOLDD    DD  UNIT=3380,VOL=SER=STOR01,DISP=OLD                  *\n*   //SYSPRINT DD  SYSOUT=*                                           *\n*   //SYSIN    DD  *                                                  *\n*    SCRATCH DSNAME=T2JJ.ZZ,VOL=3380=STOR01                           *\n*   /*                                                                *\n*                                                                     *\n* LOGIC:                                                              *\n*   OBTAIN WORKAREA IN KEY7                                           *\n*   EXTRACT PROGRAM NAME FROM PARM= STATEMENT, AND BUILD NEW          *\n*    PARAMETER AREA                                                   *\n*   ISSUE RACROUTE TO VERIFY USER ACCESS TO THIS FACILITY             *\n*   ATTACH PROGRAM WITH RSAPF=YES AND DISP=NO                         *\n*   BUILD SVC SCREENING TABLE FOR ENQ/DEQ/RESERVE SVC'S               *\n*   SET NEWLY ATTACHED TCB DISPATCHABLE                               *\n*   WAIT FOR TCB TO TERMINATE                                         *\n*   SAVE RETURNCODE                                                   *\n*   RELEASE WORKAREA AND EXIT WITH RC FROM ATTACHED PROGRAM           *\n*                                                                     *\n* SVC INTERCEPT ROUTINE:                                              *\n*   ENTER AMODE AND PSW KEY FROM CALLER                               *\n*   CHANGE SVC PARAMTER LIST SO THAT ENQUEUES FOR SYSDSN ARE          *\n*   CONVERTED TO SCOPE=STEP                                           *\n*   RESET PSW KEY TO ZERO                                             *\n*   BRANCH-ENTER ORIGINAL SVC EPA.                                    *\n*                                                                     *\n* RACF OR ACF2:                                                       *\n*   ACCESS(READ) IS REQUIRED TO ENTITY(NODSI) IN CLASS(FACILITY) TO   *\n*   USE THIS FACILITY.  ACCESS WILL BE DENIED IF NO PROFILE EXISTS.   *\n*                                                                     *\n* REGISTER USAGE (MAIN PROGRAM):                                      *\n*   R0-R5 WORK                                                        *\n*   R6    PROGRAM BASE                                                *\n*   R7    ATTACHED PROGRAM PARM AREA                                  *\n*   R8    ATTACHED PROGRAM TCB ADDRESS                                *\n*   R9    JSCB ADDRESS                                                *\n*   R10   APF INDICATOR FROM JSCBOPTS(JSCBPASS)                       *\n*   R11   PSW KEY OF CALLER                                           *\n*   R12   PROGRAM BASE                                                *\n*   R13   KEY7 WORKAREA INCLUDING STANDARD OS SAVEAREA                *\n*   R14   RETURN ADDR                                                 *\n*   R15   ENTRY POINT ADDRESS + RETURN CODE                           *\n* REGISTER USAGE (INTERCEPT ROUTINE):                                 *\n*   R6    PROGRAM BASE                                                *\n*   R2,R11,R12 WORK                                                   *\n*   OTHERS AS DEFINED BY SVC LINKAGE CONVENTIONS                      *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(24),REFR,AC(1)                                    *\n*                                                                     *\n* HISTORY:                                                            *\n*   DATE       BY              COMMENTS                               *\n*   30/11/94   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$NODSI RSECT ,\nJJ$NODSI AMODE 31\nJJ$NODSI RMODE 24\n         B     SKIPHDR-*(,R15)         BRANCH AROUND EYE CATCHER\n         DC    AL1(L'EYECATCH)\nEYECATCH DC    C'JJ$NODSI-J.JAEGER-&SYSDATE.-&SYSTIME.'\nSKIPHDR  DS    0H\n         BAKR  R14,0                   STACK REGISTERS AND SET RETADDR\n         BASR  R6,0                    SET BASE REGISTER\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n         USING JJ$NODSI,R6\n*\n         L     R3,0(,R1)               PARAMETER POINTER\n         LA    R3,0(,R3)               ZERO BIT 31\n*\n         MODESET MODE=SUP\n         IPK   ,\n         LR    R11,R2                  SAVE PSWKEY\n         SPKA  X'70'\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKLEN,                                         X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=129\n         MVC   4(4,R1),=CL4'F1SA'      INDICATE LINKAGE STACK USED\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         EJECT ,\n*\n         SPKA  0(R11)\n         LH    R4,0(,R3)               PARAMETER LENGTH\n         LTR   R4,R4                   NO LENGTH\n         BZ    PRMERR\n         BCTR  R4,0                    REDUCE TO MACHINE LENGTH\n         CH    R4,=H'8'                IF MORE THEN 9\n         BNH   NOPRMLIM\n         LH    R4,=H'8'                THEN LIMIT TO 9\nNOPRMLIM DS    0H\n         SLR   R2,R2                   TR BYTE FOUND INDICATOR\n         EX    R4,FINDDLM              FIND A DELIMITER\n         BC    B'0110',DLMFOUND        FOUND A DELIMITER\n         CH    R4,=H'8'                DO WE HAVE MORE THEN 8\n         BNE   DLM8                    YES FALL THROUGH\n         B     PRMERR\nDLMFOUND DS    0H\n         SLR   R1,R3                   SUBTRACT START ADDRESS OF PARM\n         SH    R1,=H'2'                SUBTRACT LENGTH HW\n         LTR   R4,R1\n         BZ    PRMERR                  ZERO LENGTH THEN ERROR\n         BCTR  R4,0                    SET MACHINE LENGHT\nDLM8     DS    0H\n         SPKA  X'70'\n         XC    EPNAME,EPNAME\n         LR    R0,R4                   COPY LENGHT TO R0\n         LR    R1,R11                  COPY SOURCE KEY TO R1\n         MVCSK EPNAME,2(R3)            COPY EPNAME\n         OC    EPNAME,=CL8' '          FORCE UPPERCASE AND BLANKS\n         SPKA  0(R11)\n         LH    R5,0(,R3)               RELOAD PARM LENGTH\n         BCTR  R5,0                    SET MACHINE LENGTH\n         LTR   R2,R2                   CHECK FOR DELIMITER\n         BZ    NODLM\n         BCTR  R5,0                    SUBTRACT DELIMITER\nNODLM    DS    0H\n         SLR   R5,R4                   SUBTRACT EPNAME LENGTH\n         LA    R2,4(R4,R3)             POINT IN ORIGINAL PARM\n*\n         LA    R10,USERPLEN(,R5)       TOTAL LENGTH OF USERPARM\n         STORAGE OBTAIN,               GET STORAGE FOR PARM AREA       X\n               LENGTH=(10),                                            X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=130\n         LR    R7,R1\n         USING USERPARM,R7\n         LA    R1,PARMLEN\n         ST    R1,PARMADDR             STORE PARM ADDRESS\n         OI    PARMADDR,X'80'          FORCE END-OF-LIST INDICATOR ON\n         STH   R5,PARMLEN              STORE PARM LENGTH\n         LTR   R5,R5                   IS A PARM SPECIFIED\n         BZ    NOUPARM                 NO THEN DO NOT COPY\n         BCTR  R5,0\n         EX    R5,MVCPRM               COPY INTO NEW PARM AREA\nNOUPARM  DS    0H\n*\n         EJECT ,\n*\n         SPKA  X'70'\n         MVC   RACROUTE,MFLROUTE       INITIALIZE PARMLIST\n         RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACROUTE)\n         LTR   R8,R15                  CHECK ACCESS\n*        BNZ   AUTHERR                       TEST\n*\n         EJECT ,\n*\n         L     R9,PSATOLD-PSA(,0)      REMOVE APF AUTHORISATION\n         ICM   R9,B'0111',TCBJSCBB-TCB(R9)\n         USING IEZJSCB,R9\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH\n         SPKA  X'70'\n*\n         EJECT ,\n*\n         LR    R1,R7                   SET PARM REGISTER FOR ATTACH\n         XC    STECB,STECB\n         MVC   LATT,LATTI\n         ATTACH ECB=STECB,             ATTACH USER PGM                 X\n               EPLOC=EPNAME,                                           X\n               SF=(E,LATT)\n         LTR   R8,R15\n         BNZ   ATTERR\n         ST    R1,STTCB                STORE TCB ADDRESS\n         LR    R8,R1\n         USING TCB,R8\n*\n         SPKA  X'00'\n         STORAGE OBTAIN,               OBTAIN STORAGE FOR SCREENING    X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               SP=254\n         LR    R2,R1\n         USING SVCSCRN,R2\n         MVC   SVCSCHDR,SVCSTHDR       COPY SVC SCREENING HEADER\n         MVC   SVCSCTBL,SVCSTTBL       COPY SVC SCREENING TABLE\n         ST    R2,TCBSVCA2             STORE SCREENING TABLE IN TCB\n         DROP  R2\n         OI    TCBFLGS7,TCBSVCS+TCBSVCSP   SET SCREENING ACTIVE\n*\n         ATTACH DISP=RESET,            KICK OFF USER PGM               X\n               TCB=(8)\n         WAIT  ECB=STECB               WAIT FOR SUBTASK TO COMPLETE\n*\n         NI    TCBFLGS7,255-(TCBSVCS+TCBSVCSP)   SET SCREENING INACTIVE\n         XC    TCBSVCA2,TCBSVCA2       REMOVE SCREENING TABLE ADDRESS\n         STORAGE RELEASE,              RELEASE STORAGE FOR SCREENING   X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               ADDR=(2),                                               X\n               SP=254\n         SPKA  X'70'\n         DROP  R8\n*\n         DETACH STTCB                  REMOVE SUBTASK\n*\n         EJECT ,\n*\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH   REMOVE APF AUTHORISATION\n         DROP  R9\n*\n         SPKA  0(R11)\n         STORAGE RELEASE,              RELEASE PARM DATA AREA          X\n               LENGTH=(10),                                            X\n               ADDR=(7),                                               X\n               CALLRKY=YES,                                            X\n               SP=130\n         SPKA  X'70'\n*\n         SLR   R8,R8                   SAVE RETURNCODE\n         ICM   R8,B'0111',STECB+1\n*\n         LR    R1,R13\n         STORAGE RELEASE,              WORKAREA                        X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1),                                               X\n               CALLRKY=YES,                                            X\n               SP=129\n*\n         MODESET MODE=PROB,            BACK TO PROBLEMSTATE USERKEY    X\n               KEY=NZERO\n*\n         LR    R15,R8                  RESTORE RETURNCODE\n         PR    ,                       RETURN TO CALLER\n*\n         EJECT ,\n*\nSVCROUTR DS    0D                      SVC SCREENING INTERCEPT ADDRESS\n         BASR  R6,0                    ESTABLISH PROGRAM BASE\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n*\n         L     R2,RBLINK-RBBASIC(,R5)  GO UP ONE RB LEVEL (TYPE 2-4)\n*\n         IC    R11,RBOPSWB2-RBBASIC(,R2)\n         SPKA  0(R11)                  SET PSWKEY OF CALLER\n         TM    RBOPSWA-RBBASIC(R2),RBOPSWM\n         BO    STAY31\n         LA    R12,MODE24              ENTER AMODE OF CALLER\n         BSM   0,R12\nMODE24   DS    0H\nSTAY31   DS    0H\n         LR    R12,R1\nCHECKARG DS    0H\n         LR    R11,R12\n         TM    2(R12),B'01000000'      IS THIS SCOPE=SYSTEM(S)\n         BZ    NOEQDQ\n         L     R10,4(,R12)\n         CLC   =CL8'SYSDSN',0(R10)     IS THIS QNAME=SYSDSN\n         BNE   NOSDQN\n         NI    2(R12),B'10110111'      CHANGE TO SCOPE=STEP\nNOEQDQ   DS    0H\n         TM    2(R12),B'00001000'      WAS THIS A RESERVE\n         BZ    NOSDQN\n         LA    R12,4(,R12)             SKIP UCB= PARM\nNOSDQN   DS    0H\n         LA    R12,12(,R12)            ADVANCE TO NEXT ENTRY\n         TM    0(R11),B'10000000'      WAS THIS LAST IN LIST\n         BZ    CHECKARG                GO PROCESS NEXT ENTRY IN LIST\n         L     R12,=A(MODE31+X'80000000')\n         BSM   0,R12                   BACK TO AMODE 31\nMODE31   DS    0H\n         SPKA  X'00'                     AND KEY ZERO\n*\n         SL    R2,=AL4(RBBASIC-RBPREFIX) BACKUP TO RB PREFIX\n         LH    R2,RBINTCOD-RBPREFIX(,R2) LOAD INTERRUPTION CODE\n         SLL   R2,3                      MULTIPLY BY 8\n         L     R6,CVTABEND-CVT(,R3)      FIND THE SVC TABLE\n         L     R6,SCVTSVCT-SCVTSECT(,R6)\n         L     R6,SVCEP-SVCENTRY(R2,R6)  USE INTCOD AS INDEX IN TABLE\n         BSM   0,R6                    BRANCH TO ORIGINAL SVC ROUTINE\n*\n         EJECT ,\n*\nFINDDLM  TRT   2(0,R3),DLMTBL          TR TABLE TO FIND DELIMITER\nMVCPRM   MVC   PARMSTR(0),0(R2)        COPY PARAMETER STRING\n*\nPRMERR   DS    0H                      PARAMETER ERROR\n         WTO   MF=(E,PRMERRM)\n         ABEND 999,,STEP\n*\nAUTHERR  DS    0H                      AUTHORISATION ERROR\n         WTO   MF=(E,AUTHERRM)\n         ABEND 999,REASON=(8),,STEP    RACROUTE RC IS REASON CODE\n*\nATTERR   DS    0H                      ATTACH ERROR\n         WTO   MF=(E,ATTERRM)\n         ABEND 999,REASON=(8),,STEP    ATTACH RC IS REASON CODE\n*\nMFLROUTE RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               CLASS='FACILITY',       RESOURCE CLASS                  X\n               ENTITYX=ENTITYX,        PROFILE NAME                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               RACFIND=YES,            FORCE ICH MSG IF NO PROFILE     X\n               MF=L\nMFLROUTL EQU   *-MFLROUTE\n*\nENTITYX  DC    2AL2(L'PROFNAME)\nPROFNAME DC    C'NODSI'                PROFILE NAME\n*\nLATTI    ATTACH EPLOC=,                                                X\n               ECB=,                                                   X\n               JSTCB=YES,              IF THIS PROGRAM IS TO BE CALLED X\n               RSAPF=YES,              FROM IKJEFT01, THEN JSTCB=NO    X\n               DISP=NO,                MUST BE CODED                   X\n               SF=L\nLATTL    EQU   *-LATTI\n*\nPRMERRM  WTO   'JJ$001E PARAMETER ERROR',MCSFLAG=HRDCPY,MF=L\nAUTHERRM WTO   'JJ$002E AUTHORISATION FAILURE',MCSFLAG=HRDCPY,MF=L\nATTERRM  WTO   'JJ$003E ATTACH FAILED',MCSFLAG=HRDCPY,MF=L\n*\n         EJECT ,\n*\nSVCSTHDR DC    0D'0',AL4(SVCROUTR+X'80000000'),AL1(SVCTP34,0,0,0)\nSVCSTTBL DC    256X'80'\n         ORG   SVCSTTBL+48             ENQ/RESERVE\n         DC    X'00'\n         ORG   SVCSTTBL+56             DEQ\n         DC    X'00'\n         ORG   ,\n*\nDLMTBL   DC    XL256'00'               DELIMITER TABLE\n         ORG   DLMTBL+C' '             ONLY\n         DC    C' '                      SPACE\n         ORG   DLMTBL+C','                 AND\n         DC    C','                          COMMA\n         ORG   ,                               ARE VALID DELIMITERS\n*\n         LTORG ,\n*\n         EJECT ,\n*\nWORKAREA DSECT ,                       KEY 7 WORKAREA\nSAVEAREA DS    18F\nSTECB    DS    1F                      ECB ADDRESS FOR ATTACH\nSTTCB    DS    1F                      TCB ADDRESS RETURNED BY ATTACH\nEPNAME   DS    CL8                     EPNAME FOR ATTACH EPLOC=\nLATT     DS    XL(LATTL)               ATTACH WORK AREA\nRACROUTE DS    XL(MFLROUTL)            WORKAREA FOR RACROUTE\nSAFWK    DS    XL512                   WORKAREA FOR SAF\nWORKLEN  EQU   *-WORKAREA\n*\nSVCSCRN  DSECT ,                       KEY 0 SCREENING TABLE\nSVCSCHDR DS    1D\nSVCSCTBL DS    XL256\nSVCSCRNL EQU   *-SVCSCRN\n*\nUSERPARM DSECT ,                       USERKEY PARAMETERAREA\nPARMADDR DS    1F                      POINTER TO USERPARM\nPARMLEN  DS    1H                      LENGTH OF USERPARM\nPARMSTR  DS    0C                      USERPARM\nUSERPLEN EQU   *-USERPARM              USERPARM HEADER LENGTH\n*\n         EJECT ,\n*\n         IHAPSA ,\n         CVT   DSECT=YES\n         IHASCVT ,\n         IKJTCB ,\n         IKJRB ,\n         IHACDE ,\n         IHASVC ,\n         IEZJSCB ,\n         YREGS ,\n*\n         END   ,\n//LKED     EXEC PGM=HEWL,PARM='REFR,AMODE=31,RMODE=24,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSLMOD  DD  DSN=SYS1.W$$.LINKLIB(NODSI),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NODSIR": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00Q\\x00\\x994\\x8f\\x01\\x18$_\\x14$\\x01\\x9c\\x01\\x9c\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "2018-09-02T14:24:51", "lines": 412, "newlines": 412, "modlines": 0, "user": "SOURCE"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*   (Note:  Line 183 is not commented out, so you can zap it out.)\n//ASMA90   EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n TITLE 'BYPASS ENQ PROCESSING FOR DATASETS'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*   MVS DOES NOT SUPPLY A FUNCTION TO DELETE/RENAME/ALTER DATASETS    *\n*   THAT HAVE ENQ'S AGAINST DUPLICATES.                               *\n*   THIS PROGRAM WILL SUPPLY THAT FUNCTION.                           *\n*                                                                     *\n* FUNCTION:                                                           *\n*   THIS PROGRAM WILL PASS CONTROL TO THE PROGRAM NAMED ON THE PARM   *\n*   STATEMENT, AND INTERCEPT ALL SYSDSN ENQ'S ISSUED BY THAT PROGRAM  *\n*   SO THAT RNAMES ENQUEUED UPON CAN BE PROCESSED AS IF THEY HAD NO   *\n*   ACTIVE ENQ AGAINST THEM.                                          *\n*   ALL ENQUEUES WITH SCOPE=SYSTEM OR SCOPE=SYSTEMS WILL BE CONVERTED *\n*   TO SCOPE=STEP.  THIS SO THAT PROGRAMS ISSUEING THOSE ENQUEUES     *\n*   CAN STILL RELY ON VALID RETURNCODES FROM GRS FOR THE ENQUEUES     *\n*   AND DEQUEUES DONE.                                                *\n*                                                                     *\n* EXAMPLE:                                                            *\n*   //T2JJA    JOB ,'JAN JAEGER'                                      *\n*   //NODSI    EXEC PGM=NODSI,PARM='IEHPROGM,LINECNT=66'              *\n*   //VOLDD    DD  UNIT=3380,VOL=SER=STOR01,DISP=OLD                  *\n*   //SYSPRINT DD  SYSOUT=*                                           *\n*   //SYSIN    DD  *                                                  *\n*    SCRATCH DSNAME=T2JJ.ZZ,VOL=3380=STOR01                           *\n*   /*                                                                *\n*                                                                     *\n* LOGIC:                                                              *\n*   OBTAIN WORKAREA IN KEY7                                           *\n*   EXTRACT PROGRAM NAME FROM PARM= STATEMENT, AND BUILD NEW          *\n*    PARAMETER AREA                                                   *\n*   ISSUE RACROUTE TO VERIFY USER ACCESS TO THIS FACILITY             *\n*   ATTACH PROGRAM WITH RSAPF=YES AND DISP=NO                         *\n*   BUILD SVC SCREENING TABLE FOR ENQ/DEQ/RESERVE SVC'S               *\n*   SET NEWLY ATTACHED TCB DISPATCHABLE                               *\n*   WAIT FOR TCB TO TERMINATE                                         *\n*   SAVE RETURNCODE                                                   *\n*   RELEASE WORKAREA AND EXIT WITH RC FROM ATTACHED PROGRAM           *\n*                                                                     *\n* SVC INTERCEPT ROUTINE:                                              *\n*   ENTER AMODE AND PSW KEY FROM CALLER                               *\n*   CHANGE SVC PARAMTER LIST SO THAT ENQUEUES FOR SYSDSN ARE          *\n*   CONVERTED TO SCOPE=STEP                                           *\n*   RESET PSW KEY TO ZERO                                             *\n*   BRANCH-ENTER ORIGINAL SVC EPA.                                    *\n*                                                                     *\n* RACF OR ACF2:                                                       *\n*   ACCESS(READ) IS REQUIRED TO ENTITY(NODSI) IN CLASS(FACILITY) TO   *\n*   USE THIS FACILITY.  ACCESS WILL BE DENIED IF NO PROFILE EXISTS.   *\n*                                                                     *\n* REGISTER USAGE (MAIN PROGRAM):                                      *\n*   R0-R5 WORK                                                        *\n*   R6    PROGRAM BASE                                                *\n*   R7    ATTACHED PROGRAM PARM AREA                                  *\n*   R8    ATTACHED PROGRAM TCB ADDRESS                                *\n*   R9    JSCB ADDRESS                                                *\n*   R10   APF INDICATOR FROM JSCBOPTS(JSCBPASS)                       *\n*   R11   PSW KEY OF CALLER                                           *\n*   R12   PROGRAM BASE                                                *\n*   R13   KEY7 WORKAREA INCLUDING STANDARD OS SAVEAREA                *\n*   R14   RETURN ADDR                                                 *\n*   R15   ENTRY POINT ADDRESS + RETURN CODE                           *\n* REGISTER USAGE (INTERCEPT ROUTINE):                                 *\n*   R6    PROGRAM BASE                                                *\n*   R2,R11,R12 WORK                                                   *\n*   OTHERS AS DEFINED BY SVC LINKAGE CONVENTIONS                      *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(24),REFR,AC(1)                                    *\n*                                                                     *\n* HISTORY:                                                            *\n*   DATE       BY              COMMENTS                               *\n*   30/11/94   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$NODSI RSECT ,\nJJ$NODSI AMODE 31\nJJ$NODSI RMODE 24\n         B     SKIPHDR-*(,R15)         BRANCH AROUND EYE CATCHER\n         DC    AL1(L'EYECATCH)\nEYECATCH DC    C'JJ$NODSI-J.JAEGER-&SYSDATE.-&SYSTIME.'\nSKIPHDR  DS    0H\n         BAKR  R14,0                   STACK REGISTERS AND SET RETADDR\n         BASR  R6,0                    SET BASE REGISTER\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n         USING JJ$NODSI,R6\n*\n         L     R3,0(,R1)               PARAMETER POINTER\n         LA    R3,0(,R3)               ZERO BIT 31\n*\n         MODESET MODE=SUP\n         IPK   ,\n         LR    R11,R2                  SAVE PSWKEY\n         SPKA  X'70'\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKLEN,                                         X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=129\n         MVC   4(4,R1),=CL4'F1SA'      INDICATE LINKAGE STACK USED\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         EJECT ,\n*\n         SPKA  0(R11)\n         LH    R4,0(,R3)               PARAMETER LENGTH\n         LTR   R4,R4                   NO LENGTH\n         BZ    PRMERR\n         BCTR  R4,0                    REDUCE TO MACHINE LENGTH\n         CH    R4,=H'8'                IF MORE THEN 9\n         BNH   NOPRMLIM\n         LH    R4,=H'8'                THEN LIMIT TO 9\nNOPRMLIM DS    0H\n         SLR   R2,R2                   TR BYTE FOUND INDICATOR\n         EX    R4,FINDDLM              FIND A DELIMITER\n         BC    B'0110',DLMFOUND        FOUND A DELIMITER\n         CH    R4,=H'8'                DO WE HAVE MORE THEN 8\n         BNE   DLM8                    YES FALL THROUGH\n         B     PRMERR\nDLMFOUND DS    0H\n         SLR   R1,R3                   SUBTRACT START ADDRESS OF PARM\n         SH    R1,=H'2'                SUBTRACT LENGTH HW\n         LTR   R4,R1\n         BZ    PRMERR                  ZERO LENGTH THEN ERROR\n         BCTR  R4,0                    SET MACHINE LENGHT\nDLM8     DS    0H\n         SPKA  X'70'\n         XC    EPNAME,EPNAME\n         LR    R0,R4                   COPY LENGHT TO R0\n         LR    R1,R11                  COPY SOURCE KEY TO R1\n         MVCSK EPNAME,2(R3)            COPY EPNAME\n         OC    EPNAME,=CL8' '          FORCE UPPERCASE AND BLANKS\n         SPKA  0(R11)\n         LH    R5,0(,R3)               RELOAD PARM LENGTH\n         BCTR  R5,0                    SET MACHINE LENGTH\n         LTR   R2,R2                   CHECK FOR DELIMITER\n         BZ    NODLM\n         BCTR  R5,0                    SUBTRACT DELIMITER\nNODLM    DS    0H\n         SLR   R5,R4                   SUBTRACT EPNAME LENGTH\n         LA    R2,4(R4,R3)             POINT IN ORIGINAL PARM\n*\n         LA    R10,USERPLEN(,R5)       TOTAL LENGTH OF USERPARM\n         STORAGE OBTAIN,               GET STORAGE FOR PARM AREA       X\n               LENGTH=(10),                                            X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=130\n         LR    R7,R1\n         USING USERPARM,R7\n         LA    R1,PARMLEN\n         ST    R1,PARMADDR             STORE PARM ADDRESS\n         OI    PARMADDR,X'80'          FORCE END-OF-LIST INDICATOR ON\n         STH   R5,PARMLEN              STORE PARM LENGTH\n         LTR   R5,R5                   IS A PARM SPECIFIED\n         BZ    NOUPARM                 NO THEN DO NOT COPY\n         BCTR  R5,0\n         EX    R5,MVCPRM               COPY INTO NEW PARM AREA\nNOUPARM  DS    0H\n*\n         EJECT ,\n*\n         SPKA  X'70'\n         MVC   RACROUTE,MFLROUTE       INITIALIZE PARMLIST\n         RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACROUTE)\n         LTR   R8,R15                  CHECK ACCESS\n         BNZ   AUTHERR\n*\n         EJECT ,\n*\n         L     R9,PSATOLD-PSA(,0)      REMOVE APF AUTHORISATION\n         ICM   R9,B'0111',TCBJSCBB-TCB(R9)\n         USING IEZJSCB,R9\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH\n         SPKA  X'70'\n*\n         EJECT ,\n*\n         LR    R1,R7                   SET PARM REGISTER FOR ATTACH\n         XC    STECB,STECB\n         MVC   LATT,LATTI\n         ATTACH ECB=STECB,             ATTACH USER PGM                 X\n               EPLOC=EPNAME,                                           X\n               SF=(E,LATT)\n         LTR   R8,R15\n         BNZ   ATTERR\n         ST    R1,STTCB                STORE TCB ADDRESS\n         LR    R8,R1\n         USING TCB,R8\n*\n         SPKA  X'00'\n         STORAGE OBTAIN,               OBTAIN STORAGE FOR SCREENING    X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               SP=254\n         LR    R2,R1\n         USING SVCSCRN,R2\n         MVC   SVCSCHDR,SVCSTHDR       COPY SVC SCREENING HEADER\n         MVC   SVCSCTBL,SVCSTTBL       COPY SVC SCREENING TABLE\n         ST    R2,TCBSVCA2             STORE SCREENING TABLE IN TCB\n         DROP  R2\n         OI    TCBFLGS7,TCBSVCS+TCBSVCSP   SET SCREENING ACTIVE\n*\n         ATTACH DISP=RESET,            KICK OFF USER PGM               X\n               TCB=(8)\n         WAIT  ECB=STECB               WAIT FOR SUBTASK TO COMPLETE\n*\n         NI    TCBFLGS7,255-(TCBSVCS+TCBSVCSP)   SET SCREENING INACTIVE\n         XC    TCBSVCA2,TCBSVCA2       REMOVE SCREENING TABLE ADDRESS\n         STORAGE RELEASE,              RELEASE STORAGE FOR SCREENING   X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               ADDR=(2),                                               X\n               SP=254\n         SPKA  X'70'\n         DROP  R8\n*\n         DETACH STTCB                  REMOVE SUBTASK\n*\n         EJECT ,\n*\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH   REMOVE APF AUTHORISATION\n         DROP  R9\n*\n         SPKA  0(R11)\n         STORAGE RELEASE,              RELEASE PARM DATA AREA          X\n               LENGTH=(10),                                            X\n               ADDR=(7),                                               X\n               CALLRKY=YES,                                            X\n               SP=130\n         SPKA  X'70'\n*\n         SLR   R8,R8                   SAVE RETURNCODE\n         ICM   R8,B'0111',STECB+1\n*\n         LR    R1,R13\n         STORAGE RELEASE,              WORKAREA                        X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1),                                               X\n               CALLRKY=YES,                                            X\n               SP=129\n*\n         MODESET MODE=PROB,            BACK TO PROBLEMSTATE USERKEY    X\n               KEY=NZERO\n*\n         LR    R15,R8                  RESTORE RETURNCODE\n         PR    ,                       RETURN TO CALLER\n*\n         EJECT ,\n*\nSVCROUTR DS    0D                      SVC SCREENING INTERCEPT ADDRESS\n         BASR  R6,0                    ESTABLISH PROGRAM BASE\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n*\n         L     R2,RBLINK-RBBASIC(,R5)  GO UP ONE RB LEVEL (TYPE 2-4)\n*\n         IC    R11,RBOPSWB2-RBBASIC(,R2)\n         SPKA  0(R11)                  SET PSWKEY OF CALLER\n         TM    RBOPSWA-RBBASIC(R2),RBOPSWM\n         BO    STAY31\n         LA    R12,MODE24              ENTER AMODE OF CALLER\n         BSM   0,R12\nMODE24   DS    0H\nSTAY31   DS    0H\n         LR    R12,R1\nCHECKARG DS    0H\n         LR    R11,R12\n         TM    2(R12),B'01000000'      IS THIS SCOPE=SYSTEM(S)\n         BZ    NOEQDQ\n         L     R10,4(,R12)\n         CLC   =CL8'SYSDSN',0(R10)     IS THIS QNAME=SYSDSN\n         BNE   NOSDQN\n         NI    2(R12),B'10110111'      CHANGE TO SCOPE=STEP\nNOEQDQ   DS    0H\n         TM    2(R12),B'00001000'      WAS THIS A RESERVE\n         BZ    NOSDQN\n         LA    R12,4(,R12)             SKIP UCB= PARM\nNOSDQN   DS    0H\n         LA    R12,12(,R12)            ADVANCE TO NEXT ENTRY\n         TM    0(R11),B'10000000'      WAS THIS LAST IN LIST\n         BZ    CHECKARG                GO PROCESS NEXT ENTRY IN LIST\n         L     R12,=A(MODE31+X'80000000')\n         BSM   0,R12                   BACK TO AMODE 31\nMODE31   DS    0H\n         SPKA  X'00'                     AND KEY ZERO\n*\n         SL    R2,=AL4(RBBASIC-RBPREFIX) BACKUP TO RB PREFIX\n         LH    R2,RBINTCOD-RBPREFIX(,R2) LOAD INTERRUPTION CODE\n         SLL   R2,3                      MULTIPLY BY 8\n         L     R6,CVTABEND-CVT(,R3)      FIND THE SVC TABLE\n         L     R6,SCVTSVCT-SCVTSECT(,R6)\n         L     R6,SVCEP-SVCENTRY(R2,R6)  USE INTCOD AS INDEX IN TABLE\n         BSM   0,R6                    BRANCH TO ORIGINAL SVC ROUTINE\n*\n         EJECT ,\n*\nFINDDLM  TRT   2(0,R3),DLMTBL          TR TABLE TO FIND DELIMITER\nMVCPRM   MVC   PARMSTR(0),0(R2)        COPY PARAMETER STRING\n*\nPRMERR   DS    0H                      PARAMETER ERROR\n         WTO   MF=(E,PRMERRM)\n         ABEND 999,,STEP\n*\nAUTHERR  DS    0H                      AUTHORISATION ERROR\n         WTO   MF=(E,AUTHERRM)\n         ABEND 999,REASON=(8),,STEP    RACROUTE RC IS REASON CODE\n*\nATTERR   DS    0H                      ATTACH ERROR\n         WTO   MF=(E,ATTERRM)\n         ABEND 999,REASON=(8),,STEP    ATTACH RC IS REASON CODE\n*\nMFLROUTE RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               CLASS='FACILITY',       RESOURCE CLASS                  X\n               ENTITYX=ENTITYX,        PROFILE NAME                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               RACFIND=YES,            FORCE ICH MSG IF NO PROFILE     X\n               MF=L\nMFLROUTL EQU   *-MFLROUTE\n*\nENTITYX  DC    2AL2(L'PROFNAME)\nPROFNAME DC    C'NODSI'                PROFILE NAME\n*\nLATTI    ATTACH EPLOC=,                                                X\n               ECB=,                                                   X\n               JSTCB=YES,              IF THIS PROGRAM IS TO BE CALLED X\n               RSAPF=YES,              FROM IKJEFT01, THEN JSTCB=NO    X\n               DISP=NO,                MUST BE CODED                   X\n               SF=L\nLATTL    EQU   *-LATTI\n*\nPRMERRM  WTO   'JJ$001E PARAMETER ERROR',MCSFLAG=HRDCPY,MF=L\nAUTHERRM WTO   'JJ$002E AUTHORISATION FAILURE',MCSFLAG=HRDCPY,MF=L\nATTERRM  WTO   'JJ$003E ATTACH FAILED',MCSFLAG=HRDCPY,MF=L\n*\n         EJECT ,\n*\nSVCSTHDR DC    0D'0',AL4(SVCROUTR+X'80000000'),AL1(SVCTP34,0,0,0)\nSVCSTTBL DC    256X'80'\n         ORG   SVCSTTBL+48             ENQ/RESERVE\n         DC    X'00'\n         ORG   SVCSTTBL+56             DEQ\n         DC    X'00'\n         ORG   ,\n*\nDLMTBL   DC    XL256'00'               DELIMITER TABLE\n         ORG   DLMTBL+C' '             ONLY\n         DC    C' '                      SPACE\n         ORG   DLMTBL+C','                 AND\n         DC    C','                          COMMA\n         ORG   ,                               ARE VALID DELIMITERS\n*\n         LTORG ,\n*\n         EJECT ,\n*\nWORKAREA DSECT ,                       KEY 7 WORKAREA\nSAVEAREA DS    18F\nSTECB    DS    1F                      ECB ADDRESS FOR ATTACH\nSTTCB    DS    1F                      TCB ADDRESS RETURNED BY ATTACH\nEPNAME   DS    CL8                     EPNAME FOR ATTACH EPLOC=\nLATT     DS    XL(LATTL)               ATTACH WORK AREA\nRACROUTE DS    XL(MFLROUTL)            WORKAREA FOR RACROUTE\nSAFWK    DS    XL512                   WORKAREA FOR SAF\nWORKLEN  EQU   *-WORKAREA\n*\nSVCSCRN  DSECT ,                       KEY 0 SCREENING TABLE\nSVCSCHDR DS    1D\nSVCSCTBL DS    XL256\nSVCSCRNL EQU   *-SVCSCRN\n*\nUSERPARM DSECT ,                       USERKEY PARAMETERAREA\nPARMADDR DS    1F                      POINTER TO USERPARM\nPARMLEN  DS    1H                      LENGTH OF USERPARM\nPARMSTR  DS    0C                      USERPARM\nUSERPLEN EQU   *-USERPARM              USERPARM HEADER LENGTH\n*\n         EJECT ,\n*\n         IHAPSA ,\n         CVT   DSECT=YES\n         IHASCVT ,\n         IKJTCB ,\n         IKJRB ,\n         IHACDE ,\n         IHASVC ,\n         IEZJSCB ,\n         YREGS ,\n*\n         END   ,\n//LKED     EXEC PGM=HEWL,PARM='REFR,AMODE=31,RMODE=24,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSLMOD  DD  DSN=SYS1.W$$.LINKLIB(NODSIR),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NODSIZAP": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x009\\x01\\x13\\t\\x8f\\x01\\x18$_\\x14X\\x00\\x0e\\x00\\r\\x00\\x00\\xe9\\xc1\\xd7@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2013-04-08T00:00:00", "modifydate": "2018-09-02T14:58:39", "lines": 14, "newlines": 13, "modlines": 0, "user": "ZAP"}, "text": "//SBGOLOBZ JOB CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//*\n//*    ZAP NODSI TO NOT REQUIRE RACF AUTHORIZATION TO WORK.\n//*\n//*    (See if you can duplicate this using ZZSA...)\n//*\n//SPZAP   EXEC PGM=AMASPZAP\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR\nNAME NODSIR JJ$NODSI\nVER 00017A 4770 63BE            BNZ AUTHERR  (B if bad RACF retcode)\nREP 00017A 4700 63BE            NOP AUTHERR  (don't acknowledge RACF)\nIDRDATA NORACF\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NODSI00": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00W\\x01\\x18$/\\x01\\x18$\\x7f\\x14\\x11\\x00_\\x00\\x14\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2018-08-30T00:00:00", "modifydate": "2018-09-04T14:11:57", "lines": 95, "newlines": 20, "modlines": 0, "user": "DOC"}, "text": "Why have we put stuff concerning Jan Jaeger's NODSI program here?\n\nWe have done it to show the capability of ZZSA to fix different\ntypes of problems:  Source changes, Zap of load modules, etc.\nYou can use the extra \"NODSI**\" members to practice on.\n\nNow for the particulars of this situation--what is NODSI?\n\nJan Jaeger's NODSI program is meant to disable enqueues to allow us\nto delete or rename an uncataloged copy of a dataset, when there is\nan enqueue on the cataloged copy (such as SYS1.LINKLIB) that you\ncan't get rid of.  Jan went to the trouble of coding a restriction\nusing RACF, so that \"any Tom, Dick, and Harry\" can't come along and\nuse this program.  As coded, you need a profile of 'NODSI' defined\nin the RACF \"FACILITY\" class, and a UACC (user access level) of at\nleast \"READ\", to invoke the NODSI program.  JCL to invoke NODSI is\nprovided here, in members NODSI01 and NODSI02.\n\nWe want to allow anyone to use NODSI, without the RACF requirement.\n(NODSI still has to be APF-authorized, so we can restrict it that way,\nand we still have some control over it, by putting it in an authorized\nSTEPLIB that the general public doesn't have access to.)\n\nHow do we eliminate the RACF requirement?  It can be done with a\none-line zap (member NODSIZAP) or a source code change of one line\n(member NODSI).  The original source is in member NODSIR.\n\nAll you have to do is comment out line 183 in NODSIR.  It is\nalready commented out in member NODSI.  Or you can go to the load\nmodule for NODSIR, and zap the BNZ to AUTHERR (when you get a bad\nreturn code from RACF) and change it to a NOP, to always avoid the\nbranch.  Source member NODSI has this instruction commented out.\nSource member NODSIR is the original code.  If you assemble\nNODSIR, you can then apply the zap, NODSIZAP.  There is no space\nfor the zap in load module NODSI, because the commented instruction\nwas never assembled.\n\nBut this is if you have TSO.  What if you only have ZZSA?\n\nWe are providing a load library called ZZSA.TESTLOAD, so you can\npractice with the zapping function of ZZSA. We are also providing\nall source and JCL in dataset PRACTICE.ZZSA (on CYL005), so you can\nuse ZZSA to work with the source code and JCL as well.\n\nWe are also providing a disassembly listing of NODSIR (the zappable\nversion of NODSI), so you can better find (using ZZSA) where the place\nto zap it, is.  The disassembly listing has the displacements of the\ninstructions, and the source code has the instructions themselves.\nThe listing is in the sequential dataset:  NODSI.LISTING.\n\n(Note:  TSO fullscreen ZAP was just thrown in to ZZSA.TESTLOAD\n because you might like to have it, for use under TSO (CBT File 135.)\n Same for LOOK (CBT File 264).  These are generally useful for\n system programmers to have.  See Files 134 and 264 for their doc.)\n\nTo import this pack to a z/OS system, an XMIT of a DFDSS backup of it,\nhas been provided in member CYL005XM in File 979.  That's how you can\nget the other tools to z/OS.\n\n*----------------------------------------------------------------- *\n\n(This is from CBT File 437.....)\n\nNotes on our copy of NODSI from Jan Jaeger.\n\nMod to not require RACF authorization for this program.\n\nYou still need the program to be APF-authorized.\n\nWe commented out the branch on the bad return code from the\nRACROUTE.  Now the program doesn't need RACF authorization the\nway we have it.  It works in any case, and you don't have to have\nREAD access to profile NODSI in the FACILITY class.  If you want\nthat, just uncomment the line that is the branch to AUTHERR.\n\nOr the opposite.  If it is commented, and you do want to\nrequire RACF authorization, then uncomment it.\n\n*        BNZ   AUTHERR\n\nCool tool........\n\nOr alternatively, zap an existing NODSI module that requires RACF:\n\n//*\n//*    ZAP NODSI TO NOT REQUIRE RACF AUTHORIZATION TO WORK.\n//*\n//SPZAP   EXEC PGM=AMASPZAP\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR\nNAME NODSI  JJ$NODSI\nVER 00017A 4770 63BE            BNZ AUTHERR\nREP 00017A 4700 63BE            NOP AUTHERR\nIDRDATA NORACF\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NODSI01": {"ttr": 9736, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x18$/\\x01\\x18$/\"W\\x00\\n\\x00\\n\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-08-30T00:00:00", "modifydate": "2018-08-30T22:57:12", "lines": 10, "newlines": 10, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//NODSI    EXEC PGM=NODSI,PARM='IEHPROGM,LINECNT=66'\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//VOLDD    DD  UNIT=3390,VOL=SER=WORKS2,DISP=OLD\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n SCRATCH DSNAME=SBGOLOB.WORK.LINKLIB,VOL=3390=WORKS2\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NODSI02": {"ttr": 9738, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x18$/\\x01\\x18$/#)\\x00\\n\\x00\\n\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-08-30T00:00:00", "modifydate": "2018-08-30T23:29:25", "lines": 10, "newlines": 10, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//NODSI    EXEC PGM=NODSIR,PARM='IEHPROGM,LINECNT=66'\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//VOLDD    DD  UNIT=3390,VOL=SER=WORKS2,DISP=OLD\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n SCRATCH DSNAME=SBGOLOB.WORK.LINKLIB,VOL=3390=WORKS2\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRACZZSA": {"ttr": 9740, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x03 S\\x01\\x18$\\x7f\\x01\\x18$\\x7f\\x13Y\\xff\\xff\\xff\\xff\\x00\\x00\\xe9\\xc9\\xd7\\xc6\\xc9\\xd3\\xc5@\\x00\\x01P\\xec\\x00\\x01P\\xec\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.03", "flags": 32, "createdate": "2018-09-04T00:00:00", "modifydate": "2018-09-04T13:59:53", "lines": 65535, "newlines": 65535, "modlines": 0, "user": "ZIPFILE"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT979/FILE979.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT979", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}