Why have we put stuff concerning Jan Jaeger's NODSI program here?

We have done it to show the capability of ZZSA to fix different
types of problems:  Source changes, Zap of load modules, etc.
You can use the extra "NODSI**" members to practice on.

Now for the particulars of this situation--what is NODSI?

Jan Jaeger's NODSI program is meant to disable enqueues to allow us
to delete or rename an uncataloged copy of a dataset, when there is
an enqueue on the cataloged copy (such as SYS1.LINKLIB) that you
can't get rid of.  Jan went to the trouble of coding a restriction
using RACF, so that "any Tom, Dick, and Harry" can't come along and
use this program.  As coded, you need a profile of 'NODSI' defined
in the RACF "FACILITY" class, and a UACC (user access level) of at
least "READ", to invoke the NODSI program.  JCL to invoke NODSI is
provided here, in members NODSI01 and NODSI02.

We want to allow anyone to use NODSI, without the RACF requirement.
(NODSI still has to be APF-authorized, so we can restrict it that way,
and we still have some control over it, by putting it in an authorized
STEPLIB that the general public doesn't have access to.)

How do we eliminate the RACF requirement?  It can be done with a
one-line zap (member NODSIZAP) or a source code change of one line
(member NODSI).  The original source is in member NODSIR.

All you have to do is comment out line 183 in NODSIR.  It is
already commented out in member NODSI.  Or you can go to the load
module for NODSIR, and zap the BNZ to AUTHERR (when you get a bad
return code from RACF) and change it to a NOP, to always avoid the
branch.  Source member NODSI has this instruction commented out.
Source member NODSIR is the original code.  If you assemble
NODSIR, you can then apply the zap, NODSIZAP.  There is no space
for the zap in load module NODSI, because the commented instruction
was never assembled.

But this is if you have TSO.  What if you only have ZZSA?

We are providing a load library called ZZSA.TESTLOAD, so you can
practice with the zapping function of ZZSA. We are also providing
all source and JCL in dataset PRACTICE.ZZSA (on CYL005), so you can
use ZZSA to work with the source code and JCL as well.

We are also providing a disassembly listing of NODSIR (the zappable
version of NODSI), so you can better find (using ZZSA) where the place
to zap it, is.  The disassembly listing has the displacements of the
instructions, and the source code has the instructions themselves.
The listing is in the sequential dataset:  NODSI.LISTING.

(Note:  TSO fullscreen ZAP was just thrown in to ZZSA.TESTLOAD
 because you might like to have it, for use under TSO (CBT File 135.)
 Same for LOOK (CBT File 264).  These are generally useful for
 system programmers to have.  See Files 134 and 264 for their doc.)

To import this pack to a z/OS system, an XMIT of a DFDSS backup of it,
has been provided in member CYL005XM in File 979.  That's how you can
get the other tools to z/OS.

*----------------------------------------------------------------- *

(This is from CBT File 437.....)

Notes on our copy of NODSI from Jan Jaeger.

Mod to not require RACF authorization for this program.

You still need the program to be APF-authorized.

We commented out the branch on the bad return code from the
RACROUTE.  Now the program doesn't need RACF authorization the
way we have it.  It works in any case, and you don't have to have
READ access to profile NODSI in the FACILITY class.  If you want
that, just uncomment the line that is the branch to AUTHERR.

Or the opposite.  If it is commented, and you do want to
require RACF authorization, then uncomment it.

*        BNZ   AUTHERR

Cool tool........

Or alternatively, zap an existing NODSI module that requires RACF:

//*
//*    ZAP NODSI TO NOT REQUIRE RACF AUTHORIZATION TO WORK.
//*
//SPZAP   EXEC PGM=AMASPZAP
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR
NAME NODSI  JJ$NODSI
VER 00017A 4770 63BE            BNZ AUTHERR
REP 00017A 4700 63BE            NOP AUTHERR
IDRDATA NORACF
/*
