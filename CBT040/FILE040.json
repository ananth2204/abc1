{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011121000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1293292, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE040.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1293292, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1293292, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE040.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x15\\x08'", "DS1TRBAL": "b'Sh'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00P\\x00\\x08\\x00Q\\x00\\x0e\\x00\\x16'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS PDS CONTAINS SOURCE AND DOCUMENTATION FOR SEVERAL UTILITIES\nIN USE AT PEOPLES NATIONAL BANK OF WASHINGTON.  THEY ARE\n\n     PDSCLEAN - CLEANS OUT A PDS WITHOUT REQUIRING A DELETE/DEFINE.\n                THE NUMBER OF DIRECTORY BLOCKS MAY BE CHANGED\n                AT THE SAME TIME.  SEVERAL PDS'S MAY BE\n                CLEANED IN ONE STEP.  CAN BE EXECUTED IN TSO\n                FOREGROUND\n\n     PDSPDS   - A PDS MASS SCAN/UPDATE UTILITY.  LOOK AT ALL OR A\n                SUBSET OF MEMBERS OF A PDS.  CHANGE AS REQUESTED.\n                SINCE RECORDS ARE NOT USUALLY ADDED OR DELETED\n                UPDATES IN PLACE SAVING COMPRESSES.  XPDS TSO CLIST\n                AND PROCPDS PROC ARE INCLUDED.\n\n     RDOC72   - A DUCUMENTATION FORMATTER.  PROVIDES HEADERS, FOOTERS,\n                TABLE OF CONTENTS, PAGE NUMBERS, AND LOTS MORE.\n\n     SUPERGEN - SUPER IEBGENER.  FIND AND (LIMITED) CHANGE RECORDS\n                IN A SEQUENTIAL FILE.  RELATIVE RECORD NUMBER, TTR,\n                OR MBBCCHHR ADDRESSES CAN BE USED.  IDEAL FOR LOOKING\n                AT 'ACTUAL' DATA IN A LARGE FILE IN FOREGROUND.\n                SPGEN TSO CLIST AND PROCGEN PROC ARE INCLUDED.\n\nSOURCE FOR ALL MODULES AND SUBROUTINES PROVIDED.  TO INSTALL USE THE\nFOLLOWING INSTRUCTIONS.  SAMPLE JCL WILL REFER TO THIS PDS AS\n\"SHARE.DATA\".\n\nASSEMBLER NOTE:  TWO MACROS ARE INCLUDED IN SHARE.DATA.  THEY ARE:\n\n                 REGS    -  EQUS FOR R0 TO R15\n                 DBAIOB  -  DSECT FOR AN IOB\n\n                 SEVERAL PROGRAMS ALSO USE DSECT MAPPING MACROS\n                 FROM SYS1.AMODGEN.  THEY ARE:\n\n                 CVT     - MAPS COMMUNICATION VECTOR TABLE (CVT)\n                 IEFJFCB - MAPS THE JOB FILE CONTROL BLOCK (JFCB)\n\n                 INCLUDE SHARE.DATA AND SYS1.AMODGEN IN THE SYSLIB\n                 CONCATENATION OF ALL ASSEMBLY STEPS.\n\n1)  READ THIS MEMBER COMPLETELY BEFORE YOU START.\n\n2)  COMPILE MODULE 'RDOC72' WITH THE STANDARD COBOL COMPILER.\n\n3)  (OPTIONAL) RUN THE FOLLOWING JCL TO PRINT DOCUMENTATION ON\n    RDOC72:\n\n        //RDOC72     EXEC PGM=RDOC72\n        //SYSPRINT   DD SYSOUT=*\n        //SYSOUT     DD SYSOUT=*\n        //SYSPUNCH   DD DUMMY\n        //DIAGNOSE   DD DSN=&&DIAG,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(020,020))\n        //TABLES     DD DSN=&&TABL,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(020,020))\n        //LINEIMAG   DD DSN=&&LINE,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(050,050))\n        //ONEUP      DD DUMMY\n        //TWOUP      DD DUMMY\n        //SYSIN      DD DSN=SHARE.DATA(RDOC72UM),DISP=SHR\n\n    NOTE:  THE SYSIN DD MAY REQUIRE CHANGING\n\n4)  RUN THE FOLLOWING JCL TO PRINT DOCUMENTATION ON THE UTILITIES:\n\n        //RDOC72     EXEC PGM=RDOC72\n        //SYSPRINT   DD SYSOUT=*\n        //SYSOUT     DD SYSOUT=*\n        //SYSPUNCH   DD DUMMY\n        //DIAGNOSE   DD DSN=&&DIAG,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(020,020))\n        //TABLES     DD DSN=&&TABL,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(020,020))\n        //LINEIMAG   DD DSN=&&LINE,DISP=(NEW,DELETE,DELETE),UNIT=SYSDA,\n        //           SPACE=(TRK,(050,050))\n        //ONEUP      DD DUMMY\n        //TWOUP      DD DUMMY\n        //SYSIN      DD DSN=SHARE.DATA(MOREDOC),DISP=SHR\n\n    NOTE:  THE SYSIN DD MAY REQUIRE CHANGING\n\n5)  ASSEMBLE AND LINKEDIT THE FOLLOWING SUBROUTINES.  ASMH IS NOT\n    REQUIRED.\n\n    VDBS$DDF - SCAN TIOT TO FIND A DD.\n    VDBS$HEX - HEX PRINT UTILITY.\n    DBACONSL - WTO/WTOR ASSIST.\n\n6)  RUN A LINKEDIT USING THE \"LINKIN\" MEMBER AS THE SYSLIN DATA.\n    THESE CONTROL CARDS ASSUME THAT THE SUBROUTINES ASSEMBLED AND LINKED\n    IN STEP 4 ARE IN THE SYSLMOD FILE.  THIS STEP WILL CREATE THE\n    FOLLOWING ALIASES:\n\n    VDBS$DDF\n     - DDFIND   - THE SAME THING\n    VDBS$HEX\n     - HEXDUMP  - START ADDR TO END ADDR\n     - HEXDUMP2 - START ADDR FOR LENGTH\n    DBACONSL\n     - DBAWTO   - WTO SUPPORT\n     - DBAWTOR  - WTOR SUPPORT\n\n    NOTE:  LINKAGE EDITOR REQUIRES A BLOCKSIZE OF 3200 OR LESS ON\n           THE CONTROL CARD INPUT.\n\n    NOTE:  ADDITIONAL INFORMATION ON THESE SUBROUTINES IS FOUND\n           IN \"MOREDOC\".\n\n7) ASSEMBLE AND LINKEDIT THE FOLLOWING UTILITIES.  ASMH IS NOT\n   REQUIRED.  REQUIRED SUBROUTINES ARE INDICATED.  MAKE SURE\n   THEY ARE IN AN AUTOCALL LIBRARY IN THE LINK STEP.\n\n   PDSCLEAN\n    - NO REQUIRED SUBROUTINES\n   PDSPDS\n    - DDFIND   IN VDBS$DDF\n   SUPERGEN\n    - DBAWTO   IN DBACONSL\n    - HEXDUMP  IN VDBS$HEX\n    - VDBS$DDF IN VDBS$DDF\n\n   NOTE:  SUPERGEN INCLUDES LOGIC TO DEFEAT DEB CHECKING.  THIS LOGIC IS\n          USED BY WITH THE \"DEB\" AND \"VTOC\" SUBCOMMANDS.  THE LOGIC\n          TO IMPLEMENT THIS FACILITY IS LOCATED AT LABEL \"DEBMOD\" IN THE\n          CODE AND USES A USER SVC (247) TO FORCE AUTHORIZATION ON AND\n          THEN OFF.  THE LOGIC WORKS BY MODIFYING THE DEB LOW CCHH TO\n          0000 AND HIGH CCHH TO FFFF.  MODESET IS USED TO GET INTO AND\n          OUT OF KEY ZERO.  IF YOU ARE UNCOMFORTABLE WITH THIS\n          CAPABILITY INSERT A BRANCH TO JUMP AROUND THE LOGIC.\n          OTHERWISE, MODIFY THE LOGIC TO USE WHATEVER FACILITIES YOU\n          HAVE IN YOUR SHOP TO AUTHORIZE FOR MODESET.  WE HAVE HAD\n          THIS LOGIC DISABLED (THE SVC IS A NOP) FOR SOME TIME SO IT HAS\n          NOT BEEN TESTED RECENTLY.\n\n8) (OPTIONAL) THE TSO CLISTS CAN BE INSTALLED IN A CLIST LIBRARY.\n   THEY ARE:\n\n    SPGEN    - SUPERGEN\n    XPDS     - PDSPDS\n\n   NOTE: THE LIBRARY NAME IN THE CALL STATEMENT WILL REQUIRE CHANGING.\n\n   NOTE: THE CLIST LINES WERE TRUNCATED TO FIT INTO THIS PDS.  THE\n         ONLY NON BLANK CHARACTERS AFFECTED WERE THOSE THAT COMPLETED\n         THE BOX AROUND THE \"YOU KEYED IN AN ATTENTION\" MESSAGE.\n         CLOSING THE BOX IN COLUMN 91 GIVES A PLEASING RESULT.\n\n9) (OPTIONAL) INSTALL THE TWO PROCS IN A SUITABLE PROCLIB.  RENAME\n\n        PROCGEN TO SPGEN  (EXECUTES SUPERGEN) AND\n        PROCPDS TO PDSPDS (EXECUTES PDSPDS).\n\nCERTIFICATION\n-------------\n\n     THESE UTILITIES HAVE BEEN RUN EXTENSIVELY IN AN MVS/SP ENVIRONMENT.\nTHEY HAVE BEEN EXAMINED FOR XA COMPATABILITY AND DO NOT HAVE ANY XA\nDEPENDENCIES.  THEY HAVE BEEN TESTED SUPERFICIALLY IN AN XA ENVIRONMENT\nAND NO PROBLEMS HAVE SHOWN UP.  THE PROCS AND CLISTS ARE COPIES OF THE\nONES WE RUN IN PRODUCTION.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DBACONSL": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DBACONSL CSECT\n         ENTRY DBAWTO\n         ENTRY DBAWTOR\n         REGS\n*\n*        WTO/WTOR PROCESSOR\n*\n         TITLE 'DBAWTO - ENTRY POINT LOGIC'\nDBAWTO   EQU   *\n         LA    R15,MAINEP-DBAWTO(R15) A(MAINLINE)\n         USING MAINEP,R15     ADDRESSABILITY\n         MVI   SWEPA+3,X'00'  INDICATE WTO\n         BR    R15            CONTINUE\n         DROP  R15\n*\n*\n*\nDBAWTOR  EQU   *\n         LA    R15,MAINEP-DBAWTOR(R15) A(MAINLINE)\n         USING MAINEP,R15     ADDRESSABILITY\n         MVI   SWEPA+3,X'04'  INDICATE WTOR\n         BR    R15\n         TITLE 'DBACONSL - MAINLINE'\nMAINEP   EQU   *\n         SAVE  (14,12)        SAVE REGS\n         ST    R13,SAVEAREA+4 BACK CHAIN\n         LR    R12,R13        SAVE BACK POINTER\n         CNOP  0,4            ALIGN\n         BAL   R13,SKIPSAVE   A(NEW SAVE AREA)\nSAVEAREA DC    18F'0'\nSKIPSAVE EQU   *\n         ST    R13,8(R12)     FOREWARD CHAIN\n         DROP  R15\n         USING SAVEAREA,R13   ADDRESSABILITY\n         LM    R6,R7,0(R1)    POST PARMS\nONETIME  NOP   JNAMEOK\n         OI    ONETIME+1,X'F0' SKIP INIT 2ND TIME THRU\n         EXTRACT TIOT,FIELDS=TIOT\n         L     R2,TIOT        A(TIOT)\n         MVC   JOBNAMES,0(R2) POST REAL JOB NAME\nJNAMEOK  EQU   *\n         TIME  DEC\n         ST    R0,HHMMSSTH    POST HHMMSSTH\n         OI    HHMMSSTH+2,X'0F' PUT GOOD SIGN IN MIDDLE\n         MVC   TIME,MASK      POST EDIT MASK\n         ED    TIME,HHMMSSTH  EDIT\n         SR    R5,R5          CLEAR\n         IC    R5,1(R6)       PICK UP LENGTH\n         BCTR  R5,0           LESS 1 FOR MVC\n         STC   R5,COPY1+1     POST\nCOPY1    MVC   USERMSG,2(R6)  COPY TEXT\n         LA    R4,20(R5)      FULL LENGTH\n         STH   R4,MSGL        POST\n         LA    R4,MSGL(R4)    NOW ADDR PAST END\n         MVC   0(4,R4),ROUTDESC POST ROUTING AND DESCRIPTOR\n         MVC   0(1,R4),0(R6)  FIX TRAILER\n         L     R15,SWEPA      WTO/WTOR\n         B     *+4(R15)\n         B     DOWTO          00 - WTO\n         B     DOWTOR         04 - WTOR\nDOWTO    EQU   *\n         WTO   MF=(E,WTOBUF)\n         B     RETURN\nDOWTOR   EQU   *\n         NI    ECB,X'00'      CLEAR\n         LA    R1,WTORBUF\n         MVC   ANS(80),BLANK  CLEAR\n         WTOR  MF=(E,(1))\n         WAIT  1,ECB=ECB\n         LH    R5,0(R7)        L'ANS\n         BCTR  R5,0            LESS 1 FOR MVC\n         STC   R5,COPY2+1      POST\nCOPY2    MVC   2(0,R7),ANS     COPY\n         B     RETURN\n         TITLE 'DBACONSL - RETURN'\nRETURN   EQU   *\n         L     R13,4(,R13)\n         RETURN (14,12)\n         TITLE  'DBACONSL - DATA AREAS'\nTIOT     DC     A(0)\nHHMMSSTH DC     XL4'00'\nSWEPA    DC     A(0)\nBLANK    DC     C' '\nANS      DC     CL80' '\nECB      DC     A(0)\nWTORBUF  DS     0F\nREPLYL   DC     AL1(L'ANS)\n         DC     AL3(ANS)\n         DC     A(ECB)\nWTOBUF   EQU    *\nMSGL     DC     AL2(116)\n         DC     X'8000'       MCS FLAGS\nMSG      DC     112C' '\n         ORG    MSG\nJOBNAMES DC     C'JOBNAMES'\nTIME     DC     C' HH.MM'\n         DC     C' '\nUSERMSG  DC     CL4' '\n         ORG    ,\n         DC     X'40004000'\n         DC     XL4'00'\nROUTDESC DC     XL4'00004000'\nMASK     DC     X'4021204B2020'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DBAIOB": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DBAIOB  &CCW=,&DCB=,&PREFIX=IOB,&IOBFLG1=42\n****************************************************\n*         IOB FOR EXCP USE                         *\n****************************************************\n&PREFIX.ECB   DC   A(0)\n&PREFIX.IOB   DS   0D\n&PREFIX.FLAG1 DC   X'&IOBFLG1'\n&PREFIX.FLAG2 DC   X'00'\n&PREFIX.SENS0 DC   X'00'\n&PREFIX.SENS1 DC   X'00'\n&PREFIX.ECBCC DC   X'00'\n&PREFIX.ECBPB DC   AL3(&PREFIX.ECB)\n&PREFIX.FLAG3 DC   X'00'\n&PREFIX.CSW   DC    XL7'00'\n&PREFIX.STAT  EQU   &PREFIX.CSW+3\n&PREFIX.BYTES EQU   &PREFIX.CSW+5\n&PREFIX.STRTB DC   A(&CCW)\n&PREFIX.DCBPB DC   A(&DCB)\n              DC    2A(0)\n              DS    0XL8                    MBBCCHHR\n&PREFIX.MBB   DC    XL3'00'                 MBB\n&PREFIX.CCHHR DC    XL5'00'                 CCHHR\n**************************************************\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LKEDIN": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " INCLUDE SYSLMOD(VDBS$DDF)\n ALIAS DDFIND\n ENTRY VDBS$DDF\n NAME VDBS$DDF(R)\n INCLUDE SYSLMOD(VDBS$HEX)\n ALIAS HEXDUMP\n ALIAS HEXDUMP2\n ENTRY HEXDUMP\n NAME VDBS$HEX(R)\n INCLUDE SYSLMOD(DBACONSL)\n ALIAS DBAWTO\n ALIAS DBAWTOR\n ENTRY DBACONSL\n NAME DBACONSL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MOREDOC": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BOOK PEOPLES NATIONAL BANK UTILITIES\nCOVR1                  P E O P L E S B A N C O R P\nCOVR2                       U T I L I T I E S\nCOVR3                   D O C U M E N T A T I O N\nDATE 043087\nSECTN030.000.000 SUBROUTINES\nHEAD .010 DBACONSL- WTO/WTOR AID\n          DBACONSL CONTAINS TWO ENTRY POINTS.  DBAWTO SUPPORTS WRITE TO\n     OPERATOR.  DBAWTOR SUPPORTS WRITE TO OPERATOR WITH REPLY.  EACH\n     ENTRYPOINT WILL TAKE THE TEXT SUPPLIED BY THE CALLING PROGRAM\n     AND INSERT IT INTO A PROTOTYPE WTO/WTOR MESSAGE.  THE TEXT WILL\n     WILL BE AUTOMATICALLY PREFIXED WITH THE JOB NAME AND TIME (HH.MM).\n     IN THE CASE OF DBAWTOR A REPLY WILL BE REQUESTED.  THIS REPLY WILL\n     BE RETURNED TO THE CALLING PROGRAM.\n\n          TO USE DBAWTO:\n\n            CALL  DBAWTO,(MSGBUF),VL\n\n     MSGBUF DC    AL2(L'MSG)\n     MSG    DC    C'MESSAGE'\n\n     MSG SHOULD BE 80 OR LESS BYTES LONG.  MSGBUF STRUCTURE IS HALF\n     WORD LENGTH FOLLOWED BY MESSAGE.\n\n          TO USE DBAWTOR:\n\n            CALL  DBAWTOR,(MSGBUF,ANSBUF),VL\n\n     MSGBUF DC    AL2(L'MSG)\n     MSG    DC    C'MESSAGE'\n     ANSBUF DC    AL2(L'ANS)\n     ANS    DC    C'       '\n\n     MSG SHOULD BE 80 OR LESS BYTES LONG.  ANS SHOULD BE 80 OR LESS\n     BYTES LONG.  MSGBUF STRUCTURE IS HALF WORD LENGTH FOLLOWED BY\n     MESSAGE.  ANSBUF STRUCTURE IS HALF WORD LENGTH FOLLOWED BY AREA FOR\n     ANSWER.  MSGBUF AND ANSBUF DO NOT NEED TO BE CONTIGUOUS.\nHEAD .020 HEXDUMP - HEX DUMP\n          HEXDUMP IS A SUBROUTINE THAT ALLOWS THE USER TO DUMP\n     SELECTED PORTIONS OF STORAGE.  OPTIONAL TITLE AND HEADING\n     INFORMATION MAY BE PROVIDED.  HEXDUMP PROVIDES FIVE PARAMETERS.\n\n          OPTION                 OPTION\n          START                  START\n          END          OR        LENGTH\n          TITLE                  TITLE\n          HEADING                HEADING\n\n     IF HEXDUMP IS CALLED THE END OPTION IS USED.  IF HEXDUMP2 IS\n     CALLED THE LENGTH OPTION IS USED.  THE HEADING OR THE TITLE AND\n     THE HEADING MAY BE OMITTED.\n\n          THE OPTIONS ARE\n\n               ASIS - PRINT ADDRESSES AS IS (ACTUAL ADDRESS)\n               RELO - RELOCATE THE ADDRESSES SO THAT THE FIRST BYTE\n                      HAS ADDRESS 0.\n               DATA - START POINTS TO 132 BYTES OF CHARACTER DATA\n                      WHICH SHOULD BE PRINTED AS IS (EG NOT TRANSLATED\n                      TO CHAR AND HEX).  THIS ALLOWS THE USER TO PUT\n                      OUT A 'RECORD NOT FOUND' ERROR MESSAGE WHERE\n                      THE RECORD ITSELF WOULD GO.\n               CLOS - WILL CLOSE THE VDBS$HEX PRINT DCB (USEFUL AT\n                      END OF JOB).\n               PAGE - SKIP TO THE TOP OF THE PAGE FOR THE NEXT\n                      SET OF PRINTOUT (NO PRINTOUT FROM THIS\n                      COMMAND).\n\n          START IS THE ADDRESS OF THE FIRST BYTE OF DATA TO BE\n     DUMPED.  END IS THE ADDRESS OF THE LAST BYTE OF DATA TO BE\n     DUMPED.  LENGTH IS PROCESSED AS IF END = START+LENGTH-1.\n     TITLE IS PRINTED AT THE TOP OF EACH PAGE OF OUTPUT (132 BYTES\n     LONG).  HEADING IS PRINTED JUST ABOVE THE HEX AND CHARACTER DATA\n     (132 BYTES LONG).\n\n          ALL OUTPUT IS ROUTED TO\n\n               //HEXDUMP  DD  SYSOUT=A\n\n     THE HEXDUMP DD NAME CAN BE OVERRIDDEN.  THE ENTRY POINT HEXDCB\n     POINTS TO THE HEXDUMP DCB.  THE DD NAME OF THIS DCB MAY BE\n     CHANGED BEFORE THE FIRST CALL TO HEXDUMP OR HEXDUMP2.  IT\n     IS LOCATED AT HEXDCB+40.\nEJECT\n          IN ASSEMBLY\n\n                    CALL HEXDUMP,(OPTN,REC,RECEND,TITLE,HDNG1),VL\n                    CALL HEXDUMP2,(OPTN,REC,RECLEN,TITLE,HDNG2),VL\n                    .\n                    .\n                    .\n          OPTN     DC    C'ASIS'\n          REC      DS    XL100\n          RECEND   EQU   *-1\n          RECLEN   DC    A(L'REC)\n          TITLE    DC    CL132'ASM RECORD DUMP OF REC'\n          HDNG1    DC    CL132'DUMP WITH HEXDUMP'\n          HDNG2    DC    CL132'DUMP WITH HEXDUMP2'\n\n     IN COBOL USE\n\n          77  HEXDUMP-OPT       PIC X(4) VALUE 'RELO'.\n          77  HEXDUMP-TITLE     PIC X(132) VALUE\n                                'COBOL RECORD DUMP OF HEXDUMP-REC'.\n          77  HEXDUMP-REC       PIC X(100).\n          77  HEXDUMP-LENGTH    PIC S9(8) COMP SYNC VALUE +100.\n          .\n          .\n          .\n          CALL 'HEXDUMP2' USING HEXDUMP-OPTN,\n                                HEXDUMP-REC,\n                                HEXDUMP-LENGTH,\n                                HEXDUMP-TITLE.\n\n     NOTE THAT THE COBOL EXAMPLE CONTAINS NO DETAIL HEADING.\nHEAD .030 VDBS$DDF- DD FIND\n          VDBS$DDF IS A SUBROUTINE THAT LOCATES THE TIOT ENTRY FOR\n     A PARTICULAR DD NAME.  IN ASSEMBLY\n\n                   CALL  VDBS$DDF,(DDNAME,TIOT),VL\n                   .\n                   .\n                   .\n          DDNAME   DC    CL8'DDNAME  '\n          TIOT     DS    A\n\n     THE OS TIOT (TASK INPUT/OUTPUT TABLE) WILL BE SCANNED AND THE\n     ADDRESS OF THE TIOT ENTRY FOR THE DD NAME WILL BE RETURNED.\n     IF THE DDNAME IS NOT FOUND IN THE TIOT NO DD STATEMENT OF THAT\n     NAME WAS PROVIDED IN THE JCL.  IN THIS CASE THE RETURN CODE\n     IN REG15 WILL BE SET TO 4.  IF THE DD NAME IS LOCATED THE\n     RETURN CODE IN REG15 WILL BE SET TO 0.\n\n          IT IS UNLIKELY THAT A COBOL PROGRAM WOULD WANT TO\n     PROCESS TIOT INFORMATION BUT IT MIGHT BE USEFUL TO DETERMAINE\n     IF A DD STATEMENT EXISTS FOR A PRATICULAR DD NAME.  USE THE\n     FOLLOWING CODE TO CHECK FOR THE DD NAME 'DDNAME'.\n\n          77  DD-NAME       PIC X(8) VALUE 'DDNAME  '.\n          77  TIOT-ADDR     PIC S9(8) COMP SYNC.\n          .\n          .\n          .\n          CALL 'VDBS$DDF' USING DD-NAME TIOT-ADDR.\n          IF RETURN-CODE EQUAL ZERO THEN GO TO DD-FOUND.\n          MOVE ZERO TO RETURN-CODE.\n          GO TO DD-NOT-FOUND.\nSECTN040.000.000 UTILITIES\nHEAD .010 PDSCLEAN - EMPTY A PDS UTILITY\n          PDSCLEAN WILL DELETE ALL MEMBERS OF A PDS AND RESET THE EOF TO\n     THE BEGINNING OF THE FILE.  THIS SAVES A DELETE/ALLOCATE WHEN\n     EMPTYING A PDS OR CHANGING THE NUMBER OF DIRECTORY BLOCKS.  IT CAN\n     BE EXECUTED IN EITHER FOREGROUND OR BACKGROUND.  IT SCANS THE TIOT\n     FOR DDS THAT BEGIN CLEAN AND END WITH ANY THREE LETTERS (SPACES ARE\n     OK).  SAMPLE JCL FOR BATCH EXECUTION WOULD BE:\n\n     //S1      EXEC PGM=PDSCLEAN\n     //CLEAN    DD  DISP=SHR,DSN=FILE1            OK\n     //CLEANXXX DD  DISP=SHR,DSN=FILE2            OK\n     //CLEAN1   DD  DISP=SHR,DSN=FILE3,           OK (SEE BELOW)\n     //             SPACE=(TRK,(PRIM,ALT,DIR))\n     //ANYTHING DD  DISP=SHR,DSN=ANYTHING         IGNORED\n               ETC.\n\n     IF A SPACE PARAMETER IS INCLUDED THEN THE NUMBER OF DIRECTORY\n     BLOCKS IS ADJUSTED TO MATCH THE NEW NUMBER FROM THE JCL.\n     THE 'DIR' AMOUNT WOULD BE PICKED UP ON CLEAN1 IN THE EXAMPLE.\n     EXTRA DDS FOR OTHER PURPOSES MAY BE INCLUDED.  PDSCLEAN WILL\n     IGNORE THEM.\n\n          PDSCLEAN MAY BE RUN UNDER TSO IN FOREGROUND BY SIMPLY\n     ENTERING 'PDSCLEAN' PROVIDED THE PROGRAM IS IN LNKLST OR STEPLIB.\n     ALL OF THE NORMAL TSO DDS WILL BE IGNORED AS NONE OF THEM\n     STARTS WITH CLEAN.  JUST 'ALLOC' WHATEVER PDSS NEED CLEANING\n     OUT.\n\n          PDSCLEAN IS WRITTEN USING EXCP.  CAREFUL USE OF THE DEVTYP AND\n     TRKCALC MACROS RESULTS IN COMPLETELY DEVICE INDEPENDENT LOGIC.\n     THUS, THIS PROGRAM PROVIDES A BASIC TUTORIAL ON DEVICE INDEPENDENT\n     EXCP FOR DASD.\nHEAD .020 PDSPDS   - PDS UPDATE UTILITY\nSPAC2THE 'XPDS' CLIST CMD AND 'PDSPDS' PROC ALLOW A USER TO MANIPULATE\n     THE CONTENTS OF A PARTITIONED DATASET IN BATCH OR FOREGROUND MODE.\n\n     REFER TO SYNTAX OPERANDS AND SUBCOMMANDS FOR DETAILS\n\nSPAC2SYNTAX\n\n     CONTROL CARD IMAGES ARE CHECKED FOR DATA IN COLUMNS 1-71.  MEMBER\n     RECORDS MAY BE CHANGED IN COLUMNS 1-71 UNLESS OVERRIDDEN WITH A\n     -OPTION NUM=81, WHICH ALLOWS COLUMNS 1-80 TO BE MODIFIED.\n\n     LINE NUMBER DEFAULTS ARE:     (MODIFIED WITH A '-OPT NUM=,INCR=')\n\n     MEMBER LINE NUMBERS ARE ASSUMED TO BE IN COLUMNS 73-80 FOR 80 BYTE\n     RECORDS AND COLUMNS 1-8 FOR VARIABLE RECORDS.  FIXED LENGTH RECORDS\n     THAT ARE NOT 80 BYTES USE INTERNALLY GENERATED LINE NUMBERS.\n\n\n     ALL COMMANDS ARE VALID FOR RECFM=F OR FB.\n     THE -ADD/-UPDATE COMMANDS ARE NOT SUPPORTED FOR RECFM=U,V OR VB.\n\n     THE MAXIMUM RECORD SIZE IS 256.\n\n     THE TSO CLIST NAME IS 'XPDS  DSNAME'\n              E.G. KEY IN:  XPDS PDS.CNTL  (YOUR USERID IS ASSUMED)\n\n     THE PROC NAME IS PDSPDS:  SYMBOLICS ARE DSN,OUT,PDSPARM\n                                  (DEFAULT:  OUT=A)\n\n     EXAMPLE1-JCL:\n\n     //PDSPDS  EXEC PDSPDS,DSN='PDS.TO.EDIT'\n     //SYSIN     DD   *\n\n             THE EXPANDED PROC IS:\n\n     //PDSPDS  EXEC PGM=PDSPDS,PARM='...OPTIONAL PARM...'\n     //SYSUT1    DD   DSN=PDS.TO.EDIT,DISP=SHR      INPUT/-EDIT/-LIST\n     //SYSUT2    DD   DSN=PDS.TO.EDIT,DISP=SHR      OUT FOR -ADD/-UPDATE\n     //SYSPRINT  DD  SYSOUT=A (RECFM=FBA,LRECL=133)\n     //SYSPUNCH  DD   SYSOUT=B (RECFM=FB,LRECL=80)   OPTIONAL\n     //SYSWRK    DD   DSN=&&WORK,UNIT=SYSDA,SPACE=(TRK,(5,1)) OPTIONAL\n     //SYSIN     DD   *\n        ( --CONTROL CARD IMAGES-- )\n     //\n\n     FUNCTION:\n\n         ACCESS ALL OR SELECTED MEMBERS OF A PDS. MEMBERS MAY BE LISTED,\n         PUNCHED, UPDATED, UPDATED IN PLACE,SEARCHED FOR CHARACTER\n         STRINGS. CONTROL STATEMENTS MAY BE CREATED USING THE THE\n         DIRECTORY AS THE DRIVER TO GENERATE MEMBERNAME DEPENDENT\n         STATEMENTS.\nSPAC1  NOTE:  NO ALIAS OF A MEMBER IS PROCESSED EXCEPT FOR A DIRECTORY\n              LISTING.\n\nSPAC2COMMAND SYNTAX:\n\n        ALL COMMANDS AND OPTIONS MAY BE ABBREVIATED TO THE MINIMUM\n        REQUIRED TO DISTINGUISH ONE FROM THE OTHER. FOR EXAMPLE, -EDIT\n        MAY BE -EDI, OR -ED . SINCE NO OTHER COMMAND STARTS WITH 'ED'\n        THERE IS NO CONFLICT.\n\n        SIMILARLY, '-O E=Y' REPRESENTS '-OPTION EJECT=Y'\n\n        ALL COMMANDS READ FROM SYSIN START WITH '-' (DASH) IN COLUMN 1.\n        ALL COMMANDS FROM THE EXEC 'PARM=' DO NOT HAVE A '-'.\n\n        MULTIPLE COMMANDS MAY FOLLOW ONE ANOTHER (SEE EXAMPLE6 ).\n\n     MEMBER NAME SYNTAX IN COMMANDS:\n\n         COMMANDS THAT CAN SELECT MULTIPLE MEMBERS WILL BE NOTED AS\n         -COMMAND  MEMBERS    -COMMAND REPRESENTS A COMMAND,E.G, '-EDIT'\n         AND 'MEMBERS' IS DEFINED AS:\n             A. MEMBER   -EXPLICIT NAME OF MEMBER TO ACCESS.\n             B. MEM.ALL -ACCESS ALL MEMBERS THAT START WITH THE\n                          CHARACTERS 'MEM' WHERE MEM REPRESENTS ANY\n                          CHARACTER STRING.\n             C. ALL.ALL -ACCESS ALL MEMBERS.\n\n          A '-' (DASH) MAY BE SUBSTITUTED ANYWHERE IN 'MEMBER' OR 'MEM'\n          AS DEFINED IN (A) AND (B) ABOVE. EVERYWHERE A '-' APPEARS  THE\n          POSITION IS IGNORED IN SEARCHING FOR A MEMBER. FOR EXAMPLE\n          -SEARCH IL---P.ALL WILL ACCESS ALL MEMBERS THAT HAVE 'IL' IN\n          POSITIONS ONE AND TWO AND A 'P' IN POSITION SIX.\n\n          MULTIPLE 'MEMBERS' MAY BE CODED ON ONE COMMAND CARD EACH\n          SEPARATED BY A COMMA, E.G, -SCAN IL.ALL,PB.ALL WILL ACCESS ALL\n          MEMBERS THAT START WITH IL AND PB.\n\n          CAUTION:  WHEN USING GLOBAL ACCESS COMMANDS (WITH '.ALL' AND\n          '-') INADVERTANT MULTIPLE ACCESS OF THE SAME MEM MAY OCCUR,\n          E.G., -LIST IL---P,IL--1 WILL RESULT IN SOME MEMBERS BEING\n          ACCESSED TWICE (E.G.IL001P10).\n\n          SOME COMMANDS ALLOW THE ACCESS TO THE MEMBER(S) TO BE RESTRICT\n          BY LINE NUMBERS. THIS WILL BE NOTED AS:\n\n          MEMBERS,LINE1,LINE2\n\n              LINE1 AND LINE2        OPTIONAL-DEFAULT IS ALL\n              LINE1        -BEGINNNING LINE NUMBER\n              LINE2        -ENDING LINE NUMBER (DEFAULT=LINE1)\n\n\nSPAC2PARM FIELD SYNTAX:  (PDSPARM)\n\n         PARM FIELD INFORMATION IS PROCESSED BEFORE SYSIN DATA.\n\n         ALL COMMANDS MAY BE ENTERED VIA THE PARM FIELD.  NO '-' (DASH)\n         PRECEEDS THE COMMAND.\n\n         MULTIPLE COMMANDS ARE SEPARATED FROM EACH OTHER BY A ':' COLON.\n         FOR EXAMPLE PARM='L TP.ALL:L IL.ALL'\n         REPRESENTS TWO COMMANDS: -L TP.ALL\n                                  -L IL.ALL\n\nSPAC2OPTIONS\n\n        -OPTION SCAN=N/Y,     -FORCE ALL -EDIT CMDS TO -SCAN FUNCTION\n\n                FIND=N/Y,     -FIND WILL LIST DATA EVEN IF ALL '-C' S\n                               ARE NOT MATCHED.       SEE '-FIND'\n\n                LIST=N/Y,     -LIST -INC'D MEMBERS\n\n                DIR=N/Y,      -LIST DIRECTORY FOR EACH PDS ACCESSED\n\n                EJECT=N/Y,    -PAGE EJECT FOR EACH MEMBER ON -LIST\n\n                INDD=DDNAME,  -DDNAME THAT POINTS TO PDS-DEFAULT=SYSUT1\n\n                LINES=60,     -# LINES/PAGE\n\n                NUM=(73,8),   -73=STARTING COLUMN FOR LINE NUMBER\n                              -8=LENGTH OF LINE NUMBER.  A VALUE OF 81\n                              FORCES INTERNAL NUMBERING WHICH MAY BE\n                              USED TO ACCESS THE DATA.\n\n                INCR=10,      -10=AMOUNT BY WHICH EACH SUCCEEDING LINE\n                              NUMBER IS TO BE INCREMENTED.\n\n                CONTROL=-,    '-' (DASH)REPRESENTS THE CONTROL CHARACTER\n                              IN CC1., E.G., CODING   -OPT CONTROL=+\n                              IMPLIES ALL COMMANDS START WITH A '+'.\n\n                ASIS=N,       LISTS UP TO 80 BYTES OF A MEMBER WITH\n                              REFERENCE LINE NUMBERS LISTED ON THE LEFT\n                              AND/OR RIGHT.  THE MEMBERNAME IS PRINTED\n                              ON THE RIGHT.  A HEADING IS PROVIDED\n                              CONTAINING THE\n                              / DDNAME / VOLSER / LRECL-BLKSIZE /\n                              / DATASET NAME / DATE-TIME /\n                              / MEMBER NAME / PAGE NO /\n\n                     =Y,      LISTS UP TO 132 BYTES OF A MEMBER WITH A\n                              HEADING AS WITH 'N', BUT NO LINE NUMBERS\n                              OR MEMBER NAME PRINTED ON THE LEFT/RIGHT.\n\n                     =Y+1     SAME AS 'Y' EXCEPT THE FIRST POSITION OF\n                              THE MEMBER IS SKIPPED OVER, E.G., IT IS A\n                              CARRIAGE CONTROL CHARACTER.\n                     =Y+0     LIST UP TO 132 BYTES OF A MEMBER USING THE\n                              FIRST POSITION OF EACH RECORD AS ASA.  NO\n                              HEADING IS PROVIDED.\n\n            STOWCLOSE=N/Y,    CLOSES SYSUT2 AFTER EACH -ADD/-UPDATE\n\n            USER=N/Y,        SAVE YOUR 'INCR=, AND NUM=' IN DIRECTORY\n                             SUBSEQUENT '-LIST' WILL THEN USE THE INFO.\n\n     EXAMPLE2:\n      //PDSOPTNS EXEC PDSPDS,DSN='SOME.PDS',PDSPARM='O=Y'\n      -LIST ALL.ALL\n\nSPAC2SUBCOMMANDS\n\n     COMMANDS:  (IN ALPHABETICAL SEQUENCE -MINIMUM ABBREVIATION LISTED\n                FIRST)\n\n     -AD\n     -ADD MEMBER\n\n     USED TO ADD A -NEW- MEMBER TO THE PDS REFERENCED BY SYSUT2.  THE\n     MEMBER WILL CONSIST OF STATEMENTS FOLLOWING THIS CARD AND ANY\n     -INCLUDE'D MEMBERS.  ANY STATEMENT WITH A '-' (DASH) IN CC1 THAT IS\n     NOT '-INC' SIGNIFIES THE END OF INPUT FOR THIS NEW MEMBER.  USE\n     -REPLACE TO REPLACE A MEMBER THAT ALREADY EXISTS.\n\n     EXAMPLE3:\n\n         THIS IS THE FIRST CARD\n         -ADD ASAMPLE\n         THIS IS THE SECOND CARD\n         -INC AMEMBER,20,40      INCLUDE LINES 20-40 FROM AMEMBER.\n         THIS IS SOME MORE DATA\n         -INC INDD(ANAME),80,560 INCLUDE LINES 80-560 FROM ANAME POINTED\n                                 TO BY DDNAME-INDD\n         -END  ---------END OF COMMAND (OPTIONAL)\n\n\n     -AL\n     -ALIAS NAME,ALIASNAM\n\n     CREATES AN ALIAS FOR A MEMBER. THE ALIASNAM MUST NOT ALREADY  EXIST\n     IN THE PDS POINTED TO BY THE DDNAME SYSUT1 (OR INDD=).\n\n\n     -CO\n     -COPY OLDMEM,NEWMEM\n\n     COPIES OLDMEM AND GIVES IT THE NAME NEWMEM. NEWMEM MAY NOT  ALREADY\n     EXIST IN THE PDS POINTED TO BY THE DDNAME SYSUT2.  LINE NUMBERS ARE\n     GENERATED IN THE COPIED MEMBER AS PER-OPT NUM/INCR VALUES IN EFFECT\n     AT THE TIME.\n\n\n     -C\n     -CHANGE LINE1,LINE2,(COL1,COL2) /SEARCH-STRING/ REPLACEMENT-STRING\n        (THIS IS A SUBCOMMAND OF: -EDIT,-SCAN,-SEARCH,-FIND)\n        (UP TO 150 -CHANGE CARDS PER CMD ARE SUPPORTED.)\n\n      A. LINE1,LINE2     -OPTIONAL LINE NUMBERS -DEFAULT IS ALL CARDS.\n\n          LINE1     -STARTING LINE NUMBER.\n\n          LINE2     -ENDING LINE NUMBER. DEFAULT IS LINE1.\n\n      B. (COL1,COL2)   -OPTIONAL COLUMN NUMBERS TO SCAN -DEFAULT IS 1-71\n\n          COL1      -STARTING COLUMN.\n\n          COL2      -ENDING COLUMN. DEFAULT IS COL1.\n\n      C. '/' = ANY DELIMITER CHARACTER EXCEPT A NUMBER.\n\n      D. SEARCH-STRING    -CHARACTER STRING TO SEARCH FOR.\n\n      E. REPLACEMENT-STRING   -CHARACTER STRING TO REPLACE SEARCH-STRING\n          IF DELETION IS DESIRED OMIT THIS FIELD. THIS FIELD IS NOT  USE\n          BY -SEARCH,-FIND SO THE '/' MAY BE OMITTED.\n\n     -DI\n     -DIRECTORY MEMBER\n\n     LISTS THE DIRECTORY. NAME AND TTR AND WHETHER IT'S AN ALIAS  LISTED\n     MEMBER IS OPTIONAL AND LIMITS THE LIST TO NAMES THAT START WITH THE\n     CHARACTERS CODED.\n\n\n     -ED\n     -EDIT MEMBERS,LINE1,LINE2    (-CHANGE/-FILL CARDS FOLLOW)\n\n     LINE1,LINE2 ARE OPTIONAL LINE NUMBER LIMITS-REFER TO INTRODUCTION.\n\n     EXAMINE THE MEMBERS AND PROCESS THEN ACCORDING TO -CHANGE/-FILL\n     CARDS THAT FOLLOW   AN UPDATE IN PLACE IS PERFORMED FOR ALL -C\n     'HITS'. ONLY THE FIRST OCCURANCE OF THE SPECIFIED  SEARCH-STRING\n     IS REPLACED PER RECORD. IF A CONTROL ERROR OCCURS THE MEMBER IS\n     RESTORED TO IT'S INITIAL VALUE ONLY IF A //SYSWRK DD STATEMENT IS\n     SUPPLIED.\n\n     A LISTING OF THE ORIGINAL STATEMENT AND THE REPLACEMENT RECORD IS\n     PRODUCED.\n\n\n     -EN\n     -END       (OPTIONAL)\n\n     SIGNIFIES THE END OF THE CURRENT COMMAND, E.G., FOR A -EDIT\n     -C/-F SUBCMDS FOLLOW. A -END SIGNALS THE END OF THE '-C' S\n     AND THE -EDIT WILL PROCEED.\n\n     WHEN EXECUTING PDSPDS INTERACTIVELY THIS IS USED TO GET PDSPDS TO\n     PERFORM THE COMMAND WITHOUT KEYING IN A '/*' IF FOR INSTANCE ONLY\n     -EDIT IS TO BE DONE OR YOU WANT THE CURRENT CMDS TO BE PERFORMED\n     WITHOUT GOING TO A NEW COMMAND.\n\n\n     -F\n     -FILL LINE1,LINE2,(COL1) / STRING-TO-USE-AS-FILL /\n        (A SUBCOMMAND OF -EDIT)\n\n     A. LINE1,LINE2    OPTIONAL LINE NUMBERS-DEFAULT IS ALL CARDS.\n\n         LINE1      -STARTING LINE NUMBER.\n\n         LINE2      -ENDING LINE NUMBER. DEFAULT LINE1.\n\n     B. COL1        -OPTIONAL COLUMN NUMBER TO START 'FILL' AT.DEFAULT=1\n     C. '/' IS A DELIMITER AS IN -C.\n     D. STRING-TO-USE-AS-FILL   IS ANY CHARACTER STRING TO PLACE IN THE\n         RECORD.\n\n\n     -FIN\n     -FIND MEMBERS,LINE1,LINE2      (-CHANGE CARDS FOLLOW)\n\n     LISTS DATA THAT MATCHES THE /SEARCH-STRINGS/ OF ALL -CHANGE CARDS,\n     THAT IS,ALL OF THE SEARCH ARGUMENTS MUST HAVE A HIT BEFORE THE DATA\n     IS PRINTED. (NOTE: SHOULD ONLY BE USED ON JCL OR DATA FOLLOWING THE\n     CONVENTIONS BELOW.)\n\n     ALL 'CONTINUED DATA' IS EXAMINED AND LISTED FROM FIRST TO LAST\n     STATEMENT. WHEN THE SEARCH ARGUMENTS IN ALL -C CARDS MATCH.\n\n     CONTINUATION  OF STATEMENTS IS THE FIRST 'NONBLANK,COMMA,BLANK'\n     SEQUENCE, E.G., JCL CONTINUATION SYNTAX.\n\n     THE 'ALL' CONDITION MAY BE MODIFIED WITH '-OPT FIND=Y', WHICH WILL\n     THEN LIST THE COMPLETE STATEMENT IF 1 OR MORE 'HITS' OCCUR.\n\n\n     -INC\n     -INCLUDE MEMBER,LINE1,LINE2\n     -INCLUDE DDNAME(MEMBER),LINE1,LINE2\n\n     INCLUDES THE LINE NUMBERS REFERENCED WHERE CODED, E.G., AFTER A\n     -ADD CMD OR AFTER -REP, -INS USED IN A -UPDATE CMD.\n\n     A. MEMBER    THE MEMBER THE INCLUDE.\n\n     B. LINE1     REQUIRED-THE FIRST LINE NUMBER TO INCLUDE.\n\n     C. LINE2     THE LAST LINE NUMBER TO INCLUDE. DEFAULT LINE1.\n\n     D. DDNAME    DDNAME TO INCLUDE MEMBER FROM. DEFAULT SYSUT1 OR\n             -OPT INDD=VALUE.\n\n\n\n     -L\n     -LIST MEMBERS,LINE1,LINE2\n\n     LIST THE CONTENTS OF THE SELECTED MEMBERS ON SYSPRINT IN SORTED\n     SEQUENCE. (IF PAGE EJECTION IS DESIRED SEE -OPTION.)\n\n     LINE NUMBERS ARE PRINTED ON THE LEFT. REFER TO -OPT NUM=,ASIS=, FOR\n     FORMAT AND OVERRIDES.\n\nSPAC3\n     -P\n     -PUNCH MEMBERS,LINE1,LINE2\n\n     PUNCH THE CONTENTS OF THE SELECTED MEMBERS TO SYSPUNCH. OUTPUT IS\n     CONTINUOUS WITH NO SEPARATION BETWEEN MEMBERS.\n\n\n     -REN\n     -RENAME OLDNAME,NEWNAME\n\n     RENAM THE MEMBER CALLED OLDNAME TO NEWNAME ON THE PDS POINTED TO BY\n     SYSUT1 (OR INDD=). THE NEWNAME MUST NOT ALREADY EXIST.\n\n\n     -REPL\n     -REPLACE MEMBER\n\n     REPLACE THE MEMBER NAMED. FUNCTIONS JUST LIKE -ADD EXCEPT THAT AN\n     OLD MEMBER WITH THAT NAME IS REPLACED WITH THE NEW DATA.  IF IT\n     DOESN'T EXIST YET IT IS ADDED.\n\n\n     -SC\n     -SCRATCH MEMBER\n\n     SCRATCH THE MEMBER ON THE PDS POINTED TO BY SYSUT1 (OR INDD=).\n\n\n     -SC\n     -SCAN MEMBERS,LINE1,LINE2     (-CHANGE/-FILL CARDS FOLLOW)\n\n     SAME AS -EDIT EXCEPT NO ACTUAL UPDATE TAKES PLACE.\n\n\n     -SE\n     -SEARCH  MEMBERS,LINE1,LINE2   (-CHANGE CARDS FOLLOW)\n\n     SEARCHES THE MEMBERS FOR ALL OCCURRENCES OF THE /SEARCH-ARGUMENT/\n     ON -CHANGE CARDS. EACH MATCH IS LISTED.\n\n\n     -UP\n     -UPDATE MEMBER\n\n     UPDATES THE MEMBER ON SYSUT1 (OR INDD=). OUTPUT IS SYSUT2.  THREE\n     CONTROL CARDS FOLLOWING THIS CMD CONTROL THE UPDATE.  THEY ARE:\n     (-DEL,-INS,-REP)\n\n     A. -DEL LINE1,LINE2      DELETE THE LINE NUMBERS CODED.\n\n       LINE1        THE FIRST LINE NUMBER TO DELETE.\n\n       LINE2        THE LAST LINE TO DELETE. DEFAULT LINE1.\n\n      B. -INS LINE1   INSERT THE DATA FOLLOWING THIS CARD AFTER THE LINE\n                      NUMBER REFERENCED BY LINE1.  -INCLUDE CMD(S) MAY\n                      FOLLOW AND/OR BE INTERMIXED WITH OTHER DATA.\n\n      C. -REP LINE1,LINE2     REPLACE THE LINE NUMBERS CODED.\n\n         LINE1        THE FIRST LINE NUMBER TO REPLACE.\n\n         LINE2        THE LAST LINE NUMBER TO REPLACE. DEFAULT LINE1.\n\n                      DATA FOLLOWING THE CMD REPLACES LINE1/LINE2 LINE\n                      NUMBERS.\n                     -INCLUDE CMD(S) MAY FOLLOW AND/OR BE MIXED IN WITH\n                      OTHER DATA.\n\n     EXAMPLE4:\n\n      //PDSPDS EXEC PDSPDS,DSN='PDS.TO.UPDATE'\n      //INDD2       DD  DSN=PDS.TO.INCLUDE.FROM,DISP=SHR\n      //SYSIN       DD  *\n\n      -UPDATE ASAMPLE\n      -INS 0      YES YOU MAY INSERT BEFORE THE FIRST LINE#.\n              SOME---- DATA----- TO INSERT\n      -REP 10,70\n              THIS----- REPLACES ------SOMETHING\n      -INC ASMLE,40,130          THIS ALSO REPLACES\n      -INC INDD2(OTHERNAM),150         JUST ONE FROM HIM\n      -END             ---JUST TO END IT (NOT EOF JUST END OF CMD)\n\n\n     -US\n     -USAGE\n\n     CALCULATES THE NUMBER OF DIRECTORY BLKS ALLOCATED VS USED, THE\n     NUMBER OF MEMBERS AND ALIASES, AND THE NUMBER OF TRKS ALLOCATED VS\n     UNUSED.\n\n\n     -UT\n     -UTILITY  MEMBERS,LINE1,LINE2\n\n     ACCEPTS UP TO 100 MODEL STATEMENTS FOLLOWING THIS CARD. THE MODEL\n     STATEMENTS ARE REPRODUCED ONCE ON SYSPUNCH FOR EACH MEMBER ACCESSED\n     EVERY OCCURRENCE OF THE KEYWORK &NAME IS REPLACED WITH THE CURRENT\n     MEMBER NAME. MULTIPLE '&NAME' S ARE ALLOWED AND SUBSTITUTED WITH\n     THE MEMBER NAME PER CARD IMAGE.\n\n     A % (PERCENT) IN CC72 COPIES THE STATEMENT TO SYSPUNCH ONLY ONCE AN\n     REPLACES THE % WITH A BLANK.\n     A $ (DOLLAR) IN CC 72 COPIES THE STATEMENT TO SYSPUNCH ONLY ONCE AN\n     LEAVES THE $ AS IS.\n\n     EXAMPLE5:\n          //PDSUTIL EXEC PDSPDS,DSN='PDS.FOR.UTILITY'\n          //SYSIN DD DATA\n          -UTILITY RD.ALL\n          //XXX123IN JOB (..JOB STUFF..),NAME,       CC72->       $\n          //         CLASS=X                                      %\n          //&NAME EXEC ASMFC\n          //ASM.SYSIN DD DSN=PDS.FOR.UTILITY(&NAME),DISP=SHR\n          /*\n     ALL STATEMENTS FOLLOWING -UTILITY ARE 'MODELS', THAT IS, NO FUTHER\n     SCANNING FOR COMMANDS OCCURS.\n\n     OPERAND EXAMPLES\n     EXAMPLES6:\n\n          //PDSPDS  EXEC PDSPDS,DSN='PDS.TO.EDIT',OUT=T\n          //INDD1 DD DNS=OTHER.PDS.FOR.INCS,DISP=SHR\n          //SYSIN   DD   *\n          -LIST ALL.ALL   LIST ALL MEMBERS\n\n          -SCAN ABC.ALL   EXAMINE MEMBERS THAT START WITH ABC\n          -C /DSN=ABC.X/DSN=ABC.Y/    NO ACTUAL UPDATE\n          -C /VOL=SER=PNB707/VOL=SER=PNB807/\n          -END    -----------SIGNIFY END OF CMD (OPTIONAL IN ALL CASES)\n\n          -LIST PB.ALL    LIST ALL MEMBERS THAT START WITH PB\n\n          -LIST THISMEM,10,50       LIST LINES 10-50\n\n          -EDIT IL020P10,IL010P02       EDIT TWO MEMBERS\n          -C /UNIT=3350/UNIT=SYSDA/   UPDATE TO NEW VALUE\n          -END    -----------SIGNIFY END\n\n          -SEARCH ALL.ALL\n          -C /SPACE=/       LIST ALL OCCURRENCES OF SPACE=\n          -END    -----------SIGNIFY END\n\n          -FIND XY--Z.ALL      SEARCH ALL MEMBERS WITH 'XY' IN CC1 AND\n          -C /DSN=MYDATA/      'Z' IN CC5.\n          -C /VOL=SER=PNBXYZ/     MATCH HAS TO OCCUR TO ALL -C CARDS.\n          -C /SPACE=/\n          -END    -----------SIGNIFY END\n\nEJECT\n          -EDIT SAMPLE\n          -F 163,230,(1) /*/      PUT A '*' IN CC1 IN LINES 163-230\n          -F 163,230,(71) /*/     AND THE SAME IN CC71\n          -F 10,(30)  /*************/    SOME ASTERS IN CC30-42\n          -C 50,80,(40,50) /SOMETHING/ANYTHING/\n          -END    -----------SIGNIFY END\n          //\nEJECT\nHEAD .030 SUPERGEN - FILE SCAN/DUMP UTILITY\nSPAC1OVERVIEW\nSPAC11. LIST DATA IN HEX\n                <-INPUT  DD SYSUT1 OR 'INDD=..'\n                ->OUTPUT DD SYSPRINT\n        TWO TYPES OF HEX FORMATS-EITHER LIKE A DUMP OR A CHARACTER ON\n        TOP OF HEX.\n\n     2. COPY A DATASET\n                <-INPUT  DD SYSUT1 OR 'INDD=..'\n                ->OUTPUT DD SYSUT2 OR 'OUTDD=..'\n        THIS COPIES LIKE IEBGENER.  THE OUTPUT IS A COPY OF THE INPUT.\n        THE RECORDS MAY BE REARRANGED BY YOU TO A NEW FORMAT.\n\n     ** (1) AND (2) MAY BE COMBINED. THE OUTPUT PRODUCED IS CONTROLLED\n        BY VARIOUS SELECTION COMMANDS.\n\n     DEFAULT USES THE DSORG,RECFM,BLKSIZE DEFINED IN THE OUTPUT DATASET\n     IF CODED OR THE INFORMATION IS COPIED FROM THE INPUT DATASET IF\n     OMITTED. THE LRECL AND BLKSIZE OF 'INDD' AND 'OUTDD' MAY BE\n     DIFFERENT.\nSPAC3CLIST AND BATCH SYNTAX\n\n      THE PROGRAM RUNS IN BOTH FOREGROUND AND BACKGROUND. REFER END OF\n      THIS DOCUMENTATION FOR EXECUTION IN BACKGROUND.  REFER TO\n      'EXAMPLES'  FOR EXAMPLES.\nSPAC2\n      TSO USE : %SPGEN  DSNAME    |VOL(..) PRINT(..) SYSUT2(..)|\n\n      BG  USE : //SUPERGEN EXEC SPGEN,OUT=T,GENPARM='OPTIONAL CMDS'\n                //SYSUT1 ---- INPUT DD AS REQUIRED.\n                //SYSUT2 ---- OUTPUT DD AS REQUIRED.\n                //SYSIN DD *- OPTIONAL INPUT COMMANDS.\nSPAC3TSO CLIST CMD SYNTAX\n\n      DSNAME    - NAME OF DATASET.\n\n      VOL(..)   - VOLUME SERIAL NUMBER. OVERRIDES SYSTEM CATALOG OR\n                  SPECIFIES THE DSNAME LOCATION IF NOT CATALOGED.  THE\n                  DATASET MUST EXIST ON SPECIFIED VOLUME.\n\n      PRINT(..) - AFFECTS THE 'SYSPRINT' ALLOCATION STATEMENT.  DEFAULT\n                  IS TO THE TUBE.  SPECIFY 'PRINT(SYSOUT)' TO DIRECT THE\n                  SYSPRINT TO HARDCPY INSTEAD OF THE TUBE. YOU MUST\n                  RE-LOGON OR LOGOFF TO OBTAIN PRINTOUT.  'SYSIN' IS\n                  STILL TO THE TUBE.\n\n                  ** PLEASE NOTE THAT NO MESSAGES ARE PRINTED TO THE\n                     TUBE. IT IS NOW 'SYSOUT' SO BEWARE.\n\n      SYSUT2(.) - AFFECTS THE 'SYSUT2' ALLOCATION STATEMENT.  DEFAULT\n                  IS TO THE TUBE.  SPECIFY 'SYSUT2(SYSOUT)' TO DIRECT\n                  SYSUT2 TO HARDCPY INSTEAD OF THE TUBE. YOU MUST\n                  RE-LOGON OR LOGOFF TO OBTAIN PRINTOUT.\nSPAC3SPECIAL FEATURE\n\n     THE ATTENTION INTERRUPT (PA2) FEATURE IS SUPPORTED IN THIS CLIST\n     AND IS NORMALLY USED WHILE DUMPING A DATASET.  TO USE:\n\n     1. PRESS THE PA2 KEY.\n\n     2. IF THE SCREEN IS FULL (END OF PAGE) PRESS THE 'ENTER' KEY TO\n        RECEIVE THE MESSAGE IN RESPONSE TO THE PRESSING OF THE PA2 KEY.\n\n     3. KEY IN THE INDICATED RESPONSE AND PRESS 'ENTER'.\n\n     4. IF 'Y' WAS ENTERED THE EXECUTING PROGRAM IS RE-EXECUTED,\n        RE-USING YOUR CURRENT OPTIONS AND ALLOCATIONS.\n\n     5. 'N' IS TREATED THE SAME AS '/*' AND ALL ALLOCATIONS ARE FREED.\nSPAC3SYNTAX\n\n       ALL COMMANDS APPLY TO BOTH 'FG' AND 'BG' EXECUTION.\n\n       MOST COMMANDS MAY BE ABBREVIATED TO THE MINIMUM REQUIRED TO\n       DISTINGUISH ONE FROM THE OTHER. THE ABBREVIATED FORM IS LISTED\n       FIRST FOLLOWED BY A COMPLETE SPELLING OF THE COMMAND.  THE\n       '=','(', AND ')' MAY BE REPLACED WITH BLANKS WHERE THEY APPEAR.\n\n       'SPECIAL' COMMANDS MUST BE ENTERED IN THEIR ENTIRETY.  (E.G.,\n        'EXCP=Y'. REFER TO 'SPECIAL' AT END OF OPERANDS)\nSPAC3OPERANDS (SUMMARY)   SUBCOMMANDS FOLLOW:\nSPAC1SUBCOMMANDS FOLLOW:\nSPAC1MULTIPLE SUBCOMMANDS MAY BE ENTERED ON ONE LINE, SEPARATED BY A\n     DELIMITER (A BLANK OR COMMA).  THE SUBCOMMAND 'GO' STARTS THE\n     EXECUTION OF THE PROGRAM ACCORDING TO THE COMMAND OPTIONS CHOSEN.\n     IF NO SUBCOMMANDS ARE ENTERED AND 'GO' IS ENTERED, YOU GET A\n     HEXDUMP OF THE DATA ON TSO AND A COPY OF THE DATA IN 'BG'.  AT THE\n     COMPLETION OF THE 'TASK', CONTROL RETURNS TO 'SYSIN FOR MORE INPUT.\n     A '/*' ENTERED WITHOUT ANY PRIOR 'GO' IS SIMILAR, EXCEPT THAT THE\n     PROGRAM ENDS WHEN THE TASK IS COMPLETED.\n\n     **********************************************************\n     *          HERE IS A SUMMARY OF ALL SUBCOMMANDS          *\n     **********************************************************\n\n     DUMP=N/Y,HC,ALL                GET A HEXDUMP OF INPUT\n     INDD=SYSUT1                    THE INPUT DDNAME\n     OUTDD=SYSUT2                   THE OUTPUT DDNAME\n     FIND(S,E) CC SKIP/STOP X/C' '  TO FIND DATA\n     AND                            COMBINE ALL 'FIND'S\n     OR                             ANY FIND WILL DO.\n     BLKSIZE=N                      OVERRRIDE THE BLKSIZE (RECFM=U)\n     COUNT=N        (DEFAULT=ALL)   # OF OUTPUT RECORDS TO PROCESS\n     SKIP=N         (DEFAULT=NONE)  # OF INPUT RECORDS TO SKIP.\n     PUNCH(S,E) X/C' '              CREATE AN OUTPUT RECORD.\n     MOVE(S,E,I) OR (S,E) X/C' '    SPECIFY WHICH COLUMNS TO COPY\n     RESET                          RESET EVERYTHING BACK TO NOTHING\n     KEEP=N/Y                       SAVE CMDS FOR REUSE.\n     GO                             PERFORM FUNCTIONS\n     END                            END EXECUTION\n     /*       (PLEASE READ BELOW)   END EXECUTION\n     ***  THE FOLLOWING ARE SPECIAL REFER TO SPECIAL PLEASE ***\n     DSN=                           DSNAME TO PROCESS\n     EXCP=N/Y                       USE EXCP\n     VTOC=N/Y                       PROCESS THE VTOC\n     CCHHR=CCCCHHHHR\n     CYL=C\n     HEAD=H\n     REC=R\n     TTR=TTR\n     EOF=N/Y\n     DEB=N/Y\nEJECT\nSPAC2OPERANDS (INDIVIDUALLY EXPLAINED)\nSPAC2* COMMENT, ALL INFO AFTER '*' IS TREATED AS COMMENT.\n\n     D DUMP=N/Y     LIST OUTPUT IN 'DUMP' FORMAT.(DDNAME=SYSPRINT)\n                    DUMP=Y IS THE DEFAULT IF EXECUTED IN 'FG' TSO.\n       DUMP=HC      LIST OUTPUT IN HEX FORMAT WITH TRANSLATION ON TOP\n                    OF THE HEX PRINTOUT OF EACH POSITION.\n       DUMP=ALL     SPECIAL FORMAT FOR 'EXCP=Y'.READS ALL EXTENTS.\n\n     I INDD=SYSUT1  INPUT DDNAME. EACH TIME 'INDD' IS CODED, THE OLD\n                    'INDD' IS CLOSED AND THE NEW 'INDD' IS OPENED.\n                    NORMALLY THE INPUT IS LEFT POSITIONED AT THE LAST\n                    RECORD READ + 1, UNLESS AN END-OF-FILE IS READ,\n                    THEN THE FILE IS CLOSED AND PROCESSING STARTS AT\n                    THE BEGINNING AGAIN.\n\n     O OUTDD=SYSUT2 OUTPUT DDNAME. DCB INFORMATION IS COPIED FROM THE\n                    'INDD' DATASET IF NOT PRESENT IN THE JCL.  EACH TIME\n                    'OUTDD' IS SPECIFIED' THE OLD 'OUTDD' IS CLOSED AND\n                    THE NEW 'OUTDD' IS OPENED.  IF THE DDNAME IS MISSING\n                    OR THE FILE CANNOT BE SUCCESSFULLY OPENED, A MESSAGE\n                    IS ISSUED AND PROCESSING CONTINUES. (E.G. DUMP THE\n                    DATA IN HEX)\n\n                    'OUTDD' OR SYSUT2 IS NOT REQUIRED WHEN LISTING WITH\n                    DUMP=Y.\nSPAC1               **  THIS DATASET REPRESENTS A 'COPY' OF THE 'INDD'\n                        DATA AS CONTROLLED BY THE OTHER COMMANDS.\n\n     =N             A SPECIAL FORM IMPLIES NO OUTPUT TO GO TO 'OUTDD'.\n                    'N' IS THE DEFAULT WHEN EXECUTED IN 'FG' TSO.\n\n     F FIND  X'----' X=HEX , 2 CHARACTERS PER BYTE.\n             C'----' C=CHARACTER.\n                     '/' IS ALSO A VALID DELIMITER.\n                      DEFINES THE SEARCH STRING.\n                      SEARCHES THE WHOLE RECORD FOR THE 'STRING'.\n\n     F FIND(N)=       SAME AS ABOVE-- 'C' OR 'X'.\n                      N=COLUMN NUMBER TO SEARCH.\n                      COUNTING STARTS AT 1. ADD +4 TO N FOR\n                      RECFM=V,VB.  VBS FOR THE RDW.\n\n     F FIND(S,E)=     SAME AS ABOVE-- 'C' OR 'X'.\n                      S=STARTING COLUMN\n                      E=ENDING COLUMN (DEFAULT IS 'S'.)\n\n     F FIND(S,E) CC SKIP C'----'\n                         X'----'\n     F FIND(S,E) CC STOP C'----'\n                         X'----'\nSPAC1                 S=OPTIONAL-STARTING COLUMN (DEFAULT IS COL 1.)\n                      E=OPTIONAL-ENDING COLUMN (DEFAULT IS 'S',\n                      IF 'S,E' IS NOT CODED, THE WHOLE RECORD IS\n                      SEARCHED.\n                      CC=OPTIONAL-TYPE OF LOGICAL COMPARISON.\nSPAC2                 COMPLETE SPELLING FOR 'CC', 'STOP' AND 'SKIP'.\nSPAC1                 EQ= STRING EQUAL (THIS IS DEFAULT.)\n                      NE= NOT EQUAL.\n                      LT= LESS THAN.\n                      GT= GREATER THAN.\n                      LE= LESS THAN OR EQUAL TO.\n                      GE= GREATER THAN OR EQUAL TO.\n                      SKIP=OPTIONAL  THIS 'FIND' WILL START PROCESSING\n                      THE INPUT WHEN A MATCH OCCURS. THIS IS THE\n                      FIRST RECORD TO PROCESS.\n                      STOP=OPTIONAL  THIS 'FIND' WILL STOP PROCESSING\n                      THE INPUT WHEN A MATCH OCCURS. THIS IS THE\n                      LAST RECORD TO PROCESS.\n\n     AS MANY 'FINDS' AS DESIRED MAY BE ENTERED. EACH 'HIT' WILL BE\n     DUMPED TO SYSPRINT OR COPIED TO 'OUTDD' WHEN 'GO' OR '/*' IS\n     ENTERED.  REFER TO 'AND' AND 'OR' FOR COMBINING MULTIPLE FINDS.\n\n     USE 'SKIP' TO START PROCESSING THE INPUT DATASET AT THE PLACE WHERE\n     THE DATA IS EQUAL TO ANY/ALL OF THE 'FIND..SKIP' SEARCH STRINGS.\n     'SKIP=N' MAY BE COMBINED WITH 'SKIP=FIND' (I.E., YOU MAY SKIP 'N'\n     RECORDS BEFORE YOU START LOOKING FOR STRING MATCHES).\nSPAC3AND/OR APPLY TO ALL 'FIND'S\n\n     AND            IF CODED, ALL OF THE 'FIND' STRINGS MUST COMPARE\n                    BEFORE A RECORD IS SELECTED.\n\n     OR             DEFAULT VALUE. IF ANY ONE OF THE 'FIND' STRINGS\n                    COMPARE THE RECORD IS SELECTED.\n\n     B BLKSIZE=N    N=MAX BLKSIZE TO READ. IMPLIES RECFM=U. READS\n                    '1' PHYSICAL BLOCK ' L.E.' N  BYTES.  ALSO USED\n                    WITH 'EXCP=Y'.\n\n     C COUNT=N      N=NUMBER OF OUTPUT RECORDS TO PROCESS. THE COUNT\n                    IS INCREMENTED BY 1 EACH TIME A RECORD IS\n                    SELECTED.  DEFAULT IS ALL RECORDS.\n\n     S SKIP=N       N=NUMBER OF RECORDS TO SKIP. DEFAULT=NONE.\n\n     P PUNCH(S,E)   X'---'  X=HEX, 2 CHARACTERS PER BYTE.\n                    C'---'  C=CHARACTER.\n                    S=OPTIONAL-STARTING COLUMN (DEFAULT IS COLUMN 1.)\n                    E=OPTIONAL-ENDING COLUMN (DEFAULT IS 'S'),\n                    IF 'S,E' IS NOT CODED, THE WHOLE RECORD IS FILLED\n                    WITH THE FIRST BYTE OF THE STRING CODED.\n                    (PUNCH C'*' WILL FILL AN OUTPUT LINE WITH '*'\n                    DO NOT CODE 'E' UNLESS YOU WANT THE FIRST CHARACTER\n                    PROPAGATED. FOR EXAMPLE: CODING PUNCH(1,16) C'*DATA\n                    WILL GENERATE  '****************DATA'.\nSPAC1  NOTE: THIS COMMAND REQUIRES THE DEFAULT 'OUTDD=' OR YOUR OWN.\n\n       ONE (1) OUTPUT RECORD IS CREATED FROM ALL THE 'PUNCH' STATEMENTS\n       UP TO THE 'GO' COMMAND. IT IS YOUR RESPONSIBILITY TO SPECIFY EACH\n       OUTPUT POSITION. (USE PUNCH WITHOUT 'S,E' AS THE FIRST STATEMENT\n       TO FILL THE LINE WITH A DEFAULT CHARACTER.)  IF NO INPUT RECORDS\n       ARE TO BE READ AND  YOU JUST WANT TO PUNCH A RECORD, CODE:\n\n               YOUR 'PUNCH' COMMANDS, COUNT=0,GO\n\n       POSITIONS ARE FILLED IN THE ORDER OF THE 'PUNCH' STATEMENTS.  YOU\n       MAY USE 'KEEP=Y' TO KEEP THE CMDS ENTERED, THEN EACH 'GO' WILL\n       CREATE ONE NEW OUTPUT RECORD BEFORE IT SELECTS FROM THE INPUT AND\n       STARTS COPYING IT TO THE 'OUTDD'.  REFER TO 'EX10' FOR AN\n       EXAMPLE.\n\n     M MOVE(S,E,I)\n                    S=REQD-OUTPUT STARTING COLUMN.\n                    E=REQD-OUTPUT ENDING COLUMN.\n                    I=REQD-INPUT STARTING COLUMN.\n                    THE (S,E) POSITIONS CODED ARE FILLED\n                    WITH THE DATA FROM INPUT LOCATION 'I'.\n                    NO MOVE IS DONE IF THE DATA DOESN'T FIT.\n                    THE OUTPUT SHOULD BE FILLED WITH A DEFAULT FILL\n                    CHARACTER (SEE THE NEXT 'M' FORMAT) THEN FOLLOWED BY\n                    AS MANY MOVE'S AS REQUIRED TO CREATE A NEW OUTPUT\n                    RECORD.\n                    M(1,80) C' ',MOVE(1,72,9) WILL COPY\n                    COLUMNS 8,80 OF THE INPUT TO COLUMNS 1-72 IN THE\n                    OUTPUT WITH BLANKS IN COLUMNS 73,80.\n\n        MOVE(S,E)  X'---'  X=HEX, 2 CHARACTERS PER BYTE.\n                   C'---'  C=CHARACTER.\n                    S=REQD-OUTPUT STARTING COLUMN.\n                    E=OPTIONAL-OUTPUT ENDING COLUMN (DEFAULT=S).\n                    THE (S,E) POSITIONS CODED ARE FILLED\n                    WITH THE STRING CODED. IF THE STRING IS SHORTER\n                    THAN THE OUTPUT LENGTH, THE FIRST BYTE IS PROPAGATED\n                    TO FILL OUT THE REMAINDER.\n                    E.G. M(1,80) C'*' WILL FILL AN OUTPUT LINE WITH '*'\n                    FOR EXAMPLE: CODING MOVE(1,16) C'*DATA'\n                    WILL GENERATE  '****************DATA'.\nSPAC1  NOTE: THIS COMMAND REQUIRES THE DEFAULT 'OUTDD=' OR YOUR OWN.\n\n       IT IS YOUR RESPONSIBILITY TO SPECIFY EACH OUTPUT POSITION.\n       POSITIONS ARE FILLED IN THE ORDER OF THE 'MOVE' STATEMENTS.  YOU\n       MAY USE 'KEEP=Y' TO KEEP THE CMDS ENTERED, THEN EACH 'GO' WILL\n       CREATE OUTPUT RECORDS FROM THE INPUT ACCORDING TO 'MOVE' S.\n       REFER TO 'EX11' FOR AN EXAMPLE.\n\n       THIS COMMAND MAY BE COMBINED WITH ANY OTHER COMMAND TO LIMIT THE\n       NUMBER AND TYPE OF DATA.\n\n\n     R RESET        RESET EVERYTHING BACK TO WHAT IT WAS WHEN PROGRAM\n                    'INDD' AND 'OUTDD' NAMES REMAIN AS MODIFIED. THE\n                    INPUT FILE IS ALSO CLOSED AND REPOSITIONED AT THE\n                    BEGINNING OF THE FILE. THE OUTPUT IS NOT CLOSED.\nSPAC1  NOTE: 'DUMP,INDD,OUTDD,DSN' REMAIN IF CODED.\n\n     K KEEP=N/Y     DO NOT RESET SELECTION CMDS ENTERED AT END OF TASK.\n                    IF YOU CODE 'KEEP=Y' YOU CAN REPEAT THE LAST SET OF\n                    COMMANDS WITHOUT HAVING TO KEY THEM IN AGAIN.  FOR\n                    EXAMPLE IF YOU CODE :  FIND X'02',COUNT=1 THEN EACH\n                    TIME YOU KEY IN 'GO' IT WOULD TRY TO FIND 1 RECORD\n                    AT A TIME THAT HAD A X'02' ANYWHERE IN THE RECORD.\nSPAC1  NOTE: THIS DOES NOT APPLY TO 'SKIP=N'. IT RESETS TO '0'.\n\n     G GO           GO AND PERFORM THE FUNCTIONS DEFINED BY PRIOR\n                    CONTROL PARAMETERS.\n\n     E END          END EXECUTION.\n\n     /*             SIMILAR TO END BUT WILL PROCESS THE INPUT DATASET\n                    ACCORDING TO THE DEFAULT VALUES 'FG'=DUMP,'BG'=COPY.\n                    IF NO PREVIOUS 'GO' WAS ENTERED AND END THE PROGRAM\n                    IF A 'GO' WAS PREVIOUSLY ENTERED.\n\n     SPECIAL        THE FOLLOWING CMDS MUST BE ENTERED AS SHOWN.\n                    PREVIOUS COMMANDS SUCH AS 'DUMP,OUTDD,COUNT,FIND'\n                    STILL APPLY, AND MAY BE USED TO LIMIT THE 'READS'.\n\n     DSN=DATA.SET.NAME\n                    NAME OF DATASET YOU WANT TO PROCESS. DATASET IS ON\n                    VOL POINTED TO BY 'INDD'. DEFAULT IS THE JCL DSN.\n\n     EXCP=N/Y       USE EXCP TO READ THE DATA, MAY BE FOLLOWED BY A\n                    BLKSIZE=N, WHERE 'N' IS THE MAXIMUM BLKSIZE TO READ.\n                    THE BLKSIZE MAY BE LESS THAN THE ACTUAL SIZE, AND\n                    COULD SHORTEN THE OUTPUT IF ITS JUST LOOKING\n                    'AROUND'.\n\n                    WILL READ ANY NONVSAM DATASET.\n                    CCHHR,KEYLEN,BLKSIZE,TTR AND EOF ARE LISTED.\n                    UNLESS A CCHHR,CYL,HEAD,REC, OR TTR IS SPECIFIED,\n                    READING STARTS AT THE BEGINNING OF THE DATASET AND\n                    STOPS AT THE FIRST 'EOF'.\n\n                    IF 'DUMP=ALL' IS ALSO ENTERED, THE WHOLE EXTENT IS\n                    READ AND ALL 'EOFS' OR I/O ERRORS ARE LISTED.  IF\n                    EOF=Y IS ALSO ENTERED, ONLY EOF(S) ARE LISTED.\n\n     VTOC=N/Y       PROCESS THE VTOC OF THE PACK POINTED TO BY SYSUT1\n                    (INDD) USING EXCP. THE DATA IS PROCESSED 'AS IS'.\n\n     CCHHR=CCCCHHHHRR\n                    C,H,R ARE HEXADECIMAL DIGITS REPRESENTING THE DISK\n                    ADDRESS TO START AT. MAY BE USED WITH VTOC AND EXCP.\nSPAC3OPTIONAL CMDS\nSPAC1THE FOLLOWING CMDS FOLLOW EXCP OR VTOC AND ARE OPTIONAL\n\n     CYL=N          N=HEX NUMBER, LEADING ZEROES NOT REQD.\n                    BEGIN DISK CYL.\n\n     HEAD=N         N=HEX NUMBER,LEADING ZEROES NOT REQD.\n                    BEGIN HEAD.\n\n     REC=N          N=HEX NUMBER,LEADING ZEROES NOT REQD.\n                    BEGIN RECORD.\n\n     TTR=NRR        N=HEX NUMBER,LEADING ZEROES NOT REQD.\n                    BEGIN RELATIVE TRACK. RR=2 DIGIT HEX NUMBER,\n                    GIVING THE BEGINNING RECORD.\n\n     EOF=N/Y        USED WITH EXCP=Y TO LIST ONLY 'EOF' RECORDS.\n                    NO DATA RECORDS ARE LISTED.\n\n     DEB=N/Y        BYPASS DEBCHK.\nSPAC3EXAMPLES     SOME EXAMPLES OF SUPERGEN IN 'FG' AND 'BG'.\nSPAC2EXAMPLES (FOREGROUND)\nSPAC2***************************************************\n     ******** EXAMPLES OF RUNNING THIS ON 'TSO' ********\n     **************************************************\n\n     ALL EXAMPLES FOR 'TSO' ASSUME YOU HAVE KEYED IN 'SPGEN DSNAME'\n\n     EX1:   FIND(3)=C'CHARS TO LOOK FOR'  *  COLUMN 3 FOR LNGTH STRING.\n            FIND(1,80)=X'090612'   * SEARCH COLUMNS 1,80 FOR HEX STUFF.\n            COUNT=1          * DO IT FOR ONLY 1 RECORD.\n            KEEP=Y,GO        * KEEP THIS INFORMATION AND 'GO' AND DO IT\n            GO               * AND GO DO IT AGAIN FOR THE SAME.\n\n            THE ABOVE WILL GIVE A 'HEXDUMP' OF ANY 'HIT' ON THE SCREEN\n            EACH TIME 'GO' IS ENTERED (DEFAULT IS DUMP=Y FOR TSO).\n\n     EX2:   DUMP=N,OUTDD=SYSUT2,SKIP=6,COUNT=2,GO\n            D=N,O=SYSUT2,S=6,C=2,G * SAME AS ABOVE EXCEPT ABBREVIATED.\n            D N,O SYSUT2,S 6,C 2,G * SAME AS ABOVE EXCEPT MORE SO.\n\n            THIS WOULD RESULT IN A 'CHARACTER' DISPLAY OF RECORDS 7 AND\n            8 ON SYSUT2 WHICH IS DIRECTED TO THE SCREEN.\n\n     EX3:   BLKSIZE(4560),COUNT(5),GO\n\n            NOTICE THE USE OF '(' AND ')' WHICH IS OK.\n            THIS DUMPS 5 BLOCKS OF DATA EACH A MAXIMUM OF 4560 BYTES.\n            THE DATA IS NOT DEBLOCKED.\n\n     EX4:   DUMP=N,OUTDD=SYSUT2,GO\n\n            THIS WOULD LIST ON THE SCREEN (SYSUT2) THE DATA IN\n            'CHARACTER' AS IT APPEARS IN THE FILE.\nSPAC3EXAMPLES (BACKGROUND)\nSPAC2***************************************************\n     ******** EXAMPLES OF RUNNING THIS IN BATCH ********\n     ***************************************************\n\n     THE JCL DEFINING THIS JOB IS IN A PROC CALLED 'SPGEN'. IT HAS\n     SYMBOLICS :    OUT=A   FOR SYSPRINT OUTPUT CLASS\n                    GENPARM=  FOR PARM FIELD ENTRY OF ANY COMMANDS.\n\n     EX5:   //SPGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD  DSN=YOUR.IN.DATA,DISP=SHR  (INPUT DSN)\n            //SYSUT2  DD  DSN=YOUR.OUT.DATA,DISP=SHR (OUTPUT DSN)\n\n            IF NO COMMANDS ARE ENTERED THE DEFAULT IS TO COPY THE\n            DATASET TO SYSUT2 AS IN A IEBGENER.\n\n     EX6:   //SPGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD  DSN=INPUT,DISP=SHR\n            //SYSUT2  DD  DSN=OUTPUT,DISP=SHR\n            //SYSIN   DD  *\n            DUMP=Y,SKIP=23,COUNT=78,GO\n\n            THIS WILL GIVE A DUMP OF 78 RECORDS (24-101) AND COPY THEM\n            TO SYSUT2.\n\n     EX7:   //SUPERGEN EXEC SPGEN,OUT=T\n            //INDD1   DD  DSN=SOME.INDATA,DISP=SHR\n            //INDD2  DD  DSN=SOME.INDATA2,DISP=SHR\n            //OUTDD  DD  DSN=OUT.DATA.SET,DISP=NEW,...\n            //SYSIN  DD  *\n            INDD=INDD1,OUTDD=OUTDD,GO\n            INDD=INDD2,GO\n            /*\n\n            THE ABOVE MERGES INDD1+INDD2 AND PLACES IT IN OUTDD.  YOU\n            COULD HAVE CONTROLLED THE NUMBER AND TYPE OF RECORDS WITH\n            SKIP,COUNT, AND FIND.\n            E.G. INDD=INDD1,SKIP=5,FIND(1)=C'THISONE',OUTDD=OUTDD,GO\n\n     EX8:   //SUPERGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD  DSN=INPUT.TO.SEARCH,DISP=SHR\n            //SYSUT2  DD  DSN=SELECTED.OUTPUT,DISP=SHR\n            //SYSIN  DD  *\n            DUMP=Y          * HEXDUMP OF DATA ON SYSPRINT\n            FIND(1,80) SKIP X'0571AC'  * START AT THIS HEX STRING.\n            FIND(3)=X'65'   * AND PROCESS ALL THESE TYPE OF RECORDS.\n            FIND(20) NE STOP X'95' * BUT STOP WHEN COLUMN 20 NE X'95'.\n            COUNT=500       * OR WHEN 500 RECORDS HAVE BEEN PROCESSED.\n            GO              * GO AND DO IT\n\n            THE ABOVE LOOKS FOR X'0571AC', IT THEN START SELECTING THAT\n            RECORD AND 499 MORE RECORDS (=500) OR UNTIL X'95' IS FOUND\n            IN COLUMN 20. IT THEN LISTS THE FILE IN HEX AND COPIES  IT.\n\n     EX9:   //SPGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD  DSN=YOUR.DATA.SET,DISP=SHR\n            DUMP=Y,OUTDD=N   * DUMP ONLY\n            AND              * ALL OF THE 'FIND'S MUST BE TRUE.\n            FIND(3) LT X'0010'  * COLUMN 3 LESS THAN '0010'\n            FIND(3) GT X'0006'  * AND GREATER THAN '0006'.\n            GO                  * GO AND DO\n\n     EX10:  //SPGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD  DSN=INPUT.DATA.SET,DISP=SHR\n            //SYSUT2  DD  DSN=OUTPUT.DATA.SET,DISP=SHR\n            PUNCH C' '    * DEFAULT FILL IS A BLANK.\n            PUNCH 1 C'//JOBNAME JOB (...ETC...) * A JOB CARD\n            COUNT=0,GO    * CREATE A RECORD.\n            PUNCH C' ',PUNCH 1 C'//STEP1 EXEC PGM=SOMEPROG\n            COUNT=0,GO    * CREATE A RECORD.\n            PUNCH X'00'      * DEFAULT X'00' FILL.\n            PUNCH 3 X'231896'   * THESE HEX STARTING IN POSITION 3.\n            PUNCH 15 C'SOME DATA'    * SOME CHARACTER DATA.\n            PUNCH 35 X'574123'   * AND SOME MORE HEX.\n            COUNT=0,GO    * CREATE A RECORD WITH THE ABOVE DATA.\n            GO       *   NOW COPY THE REST OF THE INPUT TO OUTPUT.\n\n            THE ABOVE ASSUMES OUTDD=SYSUT2. IF SYSUT1/2 HAD AN\n            LRECL=80 THEN THE FOLLOWING IS CREATED IN SYSUT2:\n            //JOBNAME JOB (...ETC...)             RECORD 1.\n            //STEP1 EXEC PGM=SOMEPROG             RECORD 2.\n            ...THIRD RECORD WITH HEX AND CHAR... RECORD 3.\n            ....THE REST OF INPUT...              RECORDS 4 ...ETC.\n\n     EX11:  //SPGEN EXEC SPGEN,OUT=T\n            //SYSUT1  DD DSN=DATA.TO.BE.COPIED,DISP=SHR\n            //SYSUT2  DD  DSN=OUTPUT.DATA,DISP=SHR\n            MOVE(1,80) C' ' * FILL WITH BLANKS\n            MOVE(1,4,10)    * MOVE COLUMN 10-13 TO COLUMN 1-4.\n            MOVE(5,13,1)    * MOVE COLUMN 1-9 TO COLUMN 5-13.\n            GO         * CREATE THE NEW FORMAT OUTPUT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSCLEAN": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PDSCLEAN'\nPDSCLEAN CSECT\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        THE FUNCTION OF THIS PROGRAM IS TO REINITIALIZE ONE OR MORE  *\n*        PARTITION DATA SETS.  BY REINITIALIZE IT IS MEANT THAT THE   *\n*        DIRECTORY BLOCKS WILL BE REWRITTEN TO ZEROS AND              *\n*        THE NEXT AVAILABLE POINTER RESET TO START                    *\n*        OF DIRECTORY.  ALSO THE NEXT AVAILABLE DATA AREA             *\n*        POINTER IS RESET TO FOLLOW DIRECTORY AREA.                   *\n*                                                                     *\n*        ALL DD STATEMENTS THAT BEGIN WITH 'CLEAN'                    *\n*        WILL BE CANDIDATES FOR CLEANING.  DUMMY DD                   *\n*        STATEMENTS WILL BE BYPASSED.                                 *\n*                                                                     *\n*        THE NUMBER OF DIRECTORY BLOCKS CAN BE INCREASED OR DECREASED *\n*        BY RESPECIFYING IN JCL     I.E.   SPACE=(CYL,(1,,5))         *\n*        *                                                            *\n*        THE ADVANTAGE OF THIS METHOD IS THAT THE DATA SET            *\n*        DOES NOT HAVE TO BE SCRATCHED AND REALLOCATED THEREBY        *\n*        PRESERVING THE ALLOCATED AREA.                               *\n*        *                                                            *\n*        SAMPLE JCL                                                   *\n*        //S1 EXEC PGM=PDSCLEAN                                       *\n*        //CLEAN1 DD DSN=PDSTEST1.DISP=OLD                            *\n*        //CLEAN2 DD DSN=PDSTEST2,DISP=OLD,SPACE=(CYL,(1,,56)         *\n*        *                                                            *\n*        NOTE THAT CLEAN2 DD STATEMENT CHANGES # OF DIR BLKS TO 56    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        EQUATES                                                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         REGS\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        HOUSEKEEPING                                                 *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         SAVE (14,12),,PDSCLEAN*&SYSDATE*&SYSTIME\n         LR    R12,R15             ENTRY ADR TO BASE REG\n         USING PDSCLEAN,R12        PGM BASE\n         ST    R13,SAVEAREA+4      CHAIN NEW SAVE BACKWARD\n         LR    R2,R13              TEMP HOLD OLD SAVE AREA POINTER\n         LA    R13,SAVEAREA        PGM SAVEAREA IN REG 13\n         ST    R13,8(R2)           CHAIN OLD SAVE FORWARD\n         L     R1,0(R1)            PICK UP ADDRESS OF PARM FIELD\n         ST    R1,PARMADDR         SAVE PARM ADDRESS\n         EXTRACT TIOT,FIELDS=TIOT  GET ADDRESS OF TIOT\n         L     R2,TIOT             LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(R2)           SKIP TO DD ENTRIES\n         ST    R2,NEXTDD           SAVE FIRST DD TO INITIALIZE LOOP\n         LA    R6,EXCPDCB\n         USING IHADCB,R6\n         L     R5,16          CVT ADDR\n         USING CVT,R5         ADDRESSABILITY\n         TITLE 'PDSCLEAN - SCAN TIOT'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SCAN TIOT FOR DDNAMES 'CLEANXXX' WHERE X CAN BE ANYTHING     *\n*        WHEN FINDING ONE TAKE OFF TO SCRUB IT CLEAN                  *\n*        WHEN HITTING END OF TIOT GO TO END OF JOB                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nTIOTLOOP EQU   *\n         L     R2,NEXTDD           PICK UP CURRENT DD\n         SR    R3,R3               CLEAR REG3\n         IC    R3,0(R2)            DETERMINE IF END OF TIOT\n         LTR   R3,R3               END OF TIOT?\n         BZ    RETURN0             GO TO EOJ NORMAL\n         LA    R1,0(R2,R3)         ADDR OF NEXT TIOT\n         ST    R1,NEXTDD           SAVE\n         CLC   4(5,R2),=C'CLEAN'   IS THIS A VALID DD ENTRY\n         BNE   TIOTLOOP            NO -- SKIP IT\n         MVC   DDNAME(8),4(R2)     SAVE DDNAME\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        PROCESS A DD ENTRY                                           *\n*        THE NAME IS TAKEN FROM DDNAME                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         MVC   DCBDDNAM,DDNAME MOVE CURRENT DDNAME TO DCB\n         RDJFCB ((R6))             READ IN JFCB\n         LTR   R15,R15             TEST FOR GOOD READ\n         BNZ   JFCBERR             SHOULD NEVER HAPPEN\n         CLC   =C'NULLFILE',JFCB   CHECK FOR DUMMY\n         BE    TIOTLOOP            GO TO NEXT DD STATEMENT\n         BAL   R14,BLDIOB          RE-INITIALIZE IOB\n         MVI   CTR,X'01'           RECORD 1\n         MVI   CTKL,X'08'          8   BYTE KEY/BLOCK\n         MVC   CTDL,=H'256'        256 BYTES/DIRECTORY BLOCK\n         BAL   R14,BALFACT         GET FACTORS FOR TRACK BALANCING\n         OI    JFCB+52,X'02'       DO NOT MERGE DCB INTO JFCB\n         SR    R4,R4               CLEAR REG4\n         ICM   R4,B'0111',JFCB+160 PICK DIRECTORY # IF IN JCL\n         BNZ   REWRITE             USE NUMBER SPECIFIED IN JCL\n         TITLE 'PDSCLEAN - COUNT DIRECTORY BLOCKS IN OLD FILE'\n         OPEN  ((R6)),TYPE=J  OPEN TO READ DIRECTORY\n         TM    DCBOFLGS,X'10'     CHECK FOR GOOD OPEN\n         BZ    OPENERR        SHOULD NOT BE\n         MVC   IOBSTART,=AL3(READCCW)\nGETLOOP  EQU   *\n         BAL   R14,DOIO       GET NEXT DIR BLK\n         B     *+4(R15)       CHECK RETURN CODE\n         B     *+8            0 -- OK\n         B     CLOSEIN        4 -- I/O ERROR - TREAT AS EOF\n         CLI   CTKL,X'08'     CORRECT KEY LENGTH\n         BNE   CLOSEIN        NO -- TREAT AS EOF\n         CLC   CTDL,=H'0'     EOF DATA LENGTH\n         BE    CLOSEIN        YES\n         CLC   CTDL,=H'256'   REC TOO LONG\n         BH    CLOSEIN        YES -- TREAT AS EOF\n         LA    R4,1(R4)            COUNT THE DIRECTORY BLOCKS\n         BAL   R14,BUMPTTRN   BUMP TO NEXT REC\n         B     GETLOOP             READ TO EOF ON DIRECTORY\nCLOSEIN  CLOSE ((R6))\n         TITLE 'PDSCLEAN - WRITE NEW DIRECTORY'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4 CONTAINS THE NUMBER OF DIRECTORY BLOCKS TO BE WRITTEN     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nREWRITE  EQU   *\n         C     R4,=A(0)       ANY DIR BLKS\n         BE    DIRCTERR       NO -- RC=4\n         OPEN  ((R6),OUTPUT),TYPE=J OPEN TO WRITE NEW DIR BLKS\n         TM    DCBOFLGS,X'10'     CHECK FOR GOOD OPEN\n         BZ    OPENERR             SHOULD NOT BE\n         XC    DCBTRBAL,DCBTRBAL  CLEAR TRACK BALANCE FIELD\n         BAL   R14,BLDIOB     RE-INITIALIZE IOB\n         MVC   IOBSTART,=AL3(WRITECCW)\n         MVC   KEY,=XL8'FFFFFFFFFFFFFFFF'\n         XC    DATA,DATA\n         MVC   DATA(10),=XL10'000EFFFFFFFFFFFFFFFF'\n         MVI   CTKL,X'08'\n         MVC   CTDL,=H'256'\nPUTLOOP  EQU   *\n         BAL   R14,DOIO       WRITE NEXT DIR BLK\n         B     *+4(R15)       CHECK RETURN CODE\n         B     *+8            0 -- OK\n         B     WRITEERR       4 -- I/O ERROR\n         BAL   R14,UPDDCB     UPDATE DCB FIELDS\n         XC    KEY,KEY\n         XC    DATA,DATA\n         BAL   R14,BUMPTTRN   BUMP TO NEXT REC\n         BCT   R4,PUTLOOP          KEEP GOING\n         MVC   IOBSTART,=AL3(EOFCCW)\n         MVI   CTKL,X'00'     ZERO KEY LEN FOR EOF REC\n         MVC   CTDL,=H'0'     ZERO DATA LEN FOR EOF REC\n         BAL   R14,DOIO       WRITE EOF REC\n         B     *+4(R15)       CHECK RETURN CODE\n         B     *+8            0 -- OK\n         B     EOFERR         4 -- I/O ERROR\n         BAL   R14,UPDDCB     UPDATE DCB\n         CLOSE ((R6))\n         MVC   MSG+17(44),JFCB     MOVE IN DSN INTO MSG\n         WTO   MF=(E,MSG)          WRITE MSG TO JCL\n         B     TIOTLOOP\n         TITLE 'PDSCLEAN - END OF JOB LOGIC'\nRETURN0  EQU   *\n         SR    R15,R15        0 RETURN CODE\nRETURN   L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         TITLE 'PDSCLEAN - ERROR LOGIC'\n         PUSH  PRINT\n         PRINT NOGEN\nDOIOERR  EQU   *\n         WTO   'TTR TRANSLATE FAILURE',                                X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nWRITEERR EQU   *\n         WTO   'I/O ERROR WRITING THE DIRECTORY',                      X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nEOFERR   EQU   *\n         WTO   'I/O ERROR WRITING DIRECTORY EOF',                      X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nJFCBERR  EQU   *\n         WTO   'ERROR READING JFCB',                                   X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nOPENERR  EQU   *\n         WTO   'ERROR OPENING FILE',                                   X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nDIRCTERR EQU   *\n         WTO   'NO DIRECTORY BLOCKS',                                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nDEVDAERR EQU   *\n         WTO   'DEVICE TYPE NOT DISK',                                 X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nBALERR   EQU   *\n         WTO   'TRACK BALANCE ERROR',                                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nCAPERR   EQU   *\n         WTO   'TRACK CAPACITY ERROR',                                 X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nABEND    EQU   *\n         ABEND 1000,DUMP\n         POP   PRINT\n         TITLE 'BLDIOB'\nBLDIOB   EQU   *\n         XC    EXCPIOB,EXCPIOB  CLEAR\n         MVI   IOBFLAG1,X'C2'\n         MVC   IOBDCBPT,=AL3(EXCPDCB)\n         MVC   IOBECBPT,=AL3(EXCPECB)\n         MVC   TTRN,=X'00000100'  FIRST REC\n         BR    R14\n         TITLE 'DOIO'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING CODE USES THE ROUTINE CVTPCNVT FROM THE CVT    *\n*        DOCUMENTED IN THE VS1 DATA MANAGMENT FOR SYSTEMS PROGRAMMERS *\n*        IN THE XDAP SECTION.  A CRITICAL SECTION EXTENDS FROM THE    *\n*        CNOP INSTRUCTION THRU THE LABEL DOIOCONT.  EXTREME CARE      *\n*        SHOULD BE EXERCISED WHEN MODIFYING THIS SECTION.             *\n*                                                                     *\n*        CVTPCNVT REGISTER USAGE:                                     *\n*              R0             TTRN TO BE CONVERTED                    *\n*              R1             DEB ADDR                                *\n*              R2             ADDR OF MBBCCHHR TO BE COMPUTED         *\n*              R3 - R8        UNCHANGED                               *\n*              R9 - R13       ***** DESTROYED *****                   *\n*              R14            RETURN ADDR                             *\n*              R15            ENTRY POINT/RETURN CODE FOR CVTPCNVT    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nDOIO     EQU   *\n         ST    R14,DOIOR14    SAVE RETURN ADDR\n         L     R0,TTRN\n         SR    R1,R1\n         ICM   R1,7,DCBDEBA\n         LA    R2,IOBSEEK\n         STM   R9,R13,DOIOSAVE\n         L     R15,CVTPCNVT\n         CNOP  2,4            START OF CRITICAL SECTION\n         BALR  R14,R15\n         LM    R9,R13,8(R14)\n         B     DOIOCONT\nDOIOSAVE DS    5F\nDOIOCONT EQU   *              END OF CRITICAL SECTION\n         B     *+4(R15)       CHECK RETURN CODE\n         B     *+8            0 -- OK\n         B     DOIOERR        4 -- ERROR - CONVERT FAILED\n         MVC   IDCC,IOBCC     SEARCH CC\n         MVC   IDHH,IOBHH     SEARCH HH\n         SR    R1,R1          CLEAR\n         IC    R1,TTRNR       POST REC NUMBER\n         BCTR  R1,0           LESS 1 FOR SEARCH\n         STC   R1,IDR         POST SEARCH R\n         MVC   CTCC,IOBCC\n         MVC   CTHH,IOBHH\n         MVC   CTR,IOBR\n         XC    EXCPECB,EXCPECB  CLEAR\n         EXCP  EXCPIOB\n         WAIT  ECB=EXCPECB\n         L     R14,DOIOR14    REPOST RETURN ADDR\n         SR    R15,R15        0 RETURN CODE\n         CLI   EXCPECB,X'7F' I/O OK\n         BER   R14            YES\n         LA    R15,4          I/O ERROR RETURN CODE\n         BR    R14            RETURN\n         TITLE 'PDSCLEAN - BUMP TTRN TO NEXT REC'\nBUMPTTRN EQU   *\n         SR    R1,R1          CLEAR\n         IC    R1,TTRNR       PICK UP REC NUMBER\n         LA    R1,1(R1)       BUMP\n         CH    R1,RECMAX      TOO MANY\n         BNH   BUMPEND        NO\n         LH    R1,TTRNTT      PICK UP TRACK NUMBER\n         LA    R1,1(R1)       BUMP\n         STH   R1,TTRNTT      POST NEW TRACK NUMBER\n         LA    R1,1           RESET REC NUMBER\nBUMPEND  EQU   *\n         STC   R1,TTRNR       POST NEW REC NUMBER\n         BR    R14            EXIT\n         TITLE 'PDSCLEAN - COMPUTE TRACK BALANCE FACTORS'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE USES THE DEVTYPE AND TRKCALC MACROS WHICH       *\n*        ARE DOCUMENTED IN IBM OS/VS2 SYSTEM PROGRAMMING LIBRARY      *\n*                              DATA MANAGEMENT                        *\n*        DEVTYPE GETS THE DEVICE TYPE, TRACK PER CYLINDER AND         *\n*        CYLINDERS PER VOLUME.                                        *\n*                                                                     *\n*        TRKCALC FUNCTN=TRKCAP CALCULATES THE TRACK CAPACITY          *\n*           FOR A DIRECT ACCESS DEVICE.                               *\n*                                                                     *\n*        TRKCALC FUNCTN=TRKBAL CALCULATES THE NEW TRACK BALANCE.      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nBALFACT  EQU   *              COMPUTE TRACK BALANCE FACTORS\n         ST    R14,BALFR14    SAVE RETURN ADDR\n         DEVTYPE DDNAME,DEVCHAR,DEVTAB,RPS\n         CLI   DEVUCBCL,X'20' IS DEVICE CLASS DASD\n         BNE   DEVDAERR       NO  - ABEND\n         SPACE 2\n         TRKCALC FUNCTN=TRKCAP,  GET TRACK CAPACITY IN RECORDS         *\n               TYPE=DEVUCBTY,    USE CURRENT DEVICE TYPE               *\n               RKDD=CTRKDD,      USE STARTING ADDRESS                  *\n               MF=(E,STAR),      USE STAR LIST                         *\n               REGSAVE=YES       RESTORE REGISTERS\n         LTR   R15,R15           IF ERROR\n         BNZ   CAPERR               ABEND\n         STH   R0,RECMAX         SET MAXIMUM RECORD\n         L     R14,BALFR14       GET RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'PDSCLEAN - UPDATE DCBTRBAL AND DCBFDAD'\nUPDDCB   EQU   *\n         MVC   DCBFDAD,IOBSEEK  POST FULL ADDR OF LAST REC\n         TRKCALC FUNCTN=TRKBAL,    CALCULATE TRACK BALANCE             *\n               TYPE=DEVUCBTY,      USE CURRENT DEVICE TYPE             *\n               BALANCE=DCBTRBAL,   OLD BALANCE FROM DCB                *\n               RKDD=CTRKDD,        USE CURRENT RECORD ADDRESS          *\n               MF=(E,STAR),        USE STAR LIST                       *\n               REGSAVE=YES         RESET REGISTERS\n         LTR    R15,R15           IF OVERFLOW\n         BNZ    BALERR               ABEND\n         STH    R0,DCBTRBAL       RESET DCB TRACK BALANCE\n         BR     R14               RETURN\n         LTORG\n         TITLE 'PDSCLEAN - DATA AREAS'\nSAVEAREA DS    18F\nREADCCW  CCW   X'31',IDSEARCH,X'40',5      SEARCH CHAIN\n         CCW   X'08',*-8,0,0               TIC\n         CCW   X'1E',COUNT,X'20',8+8+256   READ COUNT KEY DATA\nWRITECCW CCW   X'31',IDSEARCH,X'40',5      SEARCH CHAIN\n         CCW   X'08',*-8,0,0               TIC\n         CCW   X'1D',COUNT,X'20',8+8+256   WRITE COUNT KEY DATA\nEOFCCW   CCW   X'31',IDSEARCH,X'40',5      SEARCH CHAIN\n         CCW   X'08',*-8,0,0               TIC\n         CCW   X'1D',COUNT,X'20',8         WRITE COUNT KEY DATA\nPARMADDR DC    F'0'\nEXCPECB  DS    F\nDOIOR14  DS    F\nBALFR14  DS    F\nTIOT     DC    F'0'\nNEXTDD   DC    F'0'\nRECMAX   DS    H\nTBKOV    DS    H\nTBNKOV   DS    H\nTBCAP    DS    H\nTTRN     DS    0F\nTTRNTT   DS    XL2\nTTRNR    DS    X\nTTRNN    DS    X\nDDNAME   DC    CL8'        '\nIDSEARCH DS    0XL5\nIDCC     DS    XL2\nIDHH     DS    XL2\nIDR      DS    X\nDEVCHAR  DS    6F\n         ORG DEVCHAR\nDEVTYPE  DS    0F                  UCB TYPE FLAGS\nDEVUCBMD DS    XL1                     MODEL\nDEVUCBOP DS    XL1                     OPTION\nDEVUCBCL DS    XL1                     CLASS  X'20' IS DASD\nDEVUCBTY DS    X                       DEVICE TYPE\nDEVBLK   DS    F\nDEVCYL   DS    H\nDEVTRK   DS    H\nDEVTRLEN DS    H\nDEVOV2   DS    0XL2\nDEVOV11  DS    X\nDEVOV12  DS    X\nDEVOVN   DS    X\nDEVOPT   DS    X\nDEVFMT2  EQU   X'08'\nDEVTOL   DS    H\nDEVR0OVH DS    H\nDEVSECT  DS    X\nDEVSECTD DS    X\nSTAR     TRKCALC MF=D              TRKCALC LIST WITH LABELS\n         DS    0D\nCOUNT    DS    0CL8                SEEK ADDRESS\nCTCC     DS    XL2                    CYLINDER ADDRESS\nCTHH     DS    XL2                    HEAD     ADDRESS\nCTRKDD   DS    0XL4                   TRKCALC DATA\nCTR      DS    X                         RECORD NUMBER\nCTKL     DS    X                         KEY LENGTH\nCTDL     DS    XL2                       DATA LENGTH\nKEY      DS    XL8                 KEY\nDATA     DS    XL256               DATA\nJFCBLIST DC    0F'0',XL1'87',AL3(JFCB)\nJFCB     DC    XL176'00'\nMSG WTO 'PDSCLEANED -                                              ',  *\n               MF=L,ROUTCDE=2,DESC=7\n         DS    0D\nEXCPIOB  DS    0CL40\nIOBFLAG1 DS    X\nIOBFLAG2 DS    X\nIOBSENS0 DS    X\nIOBSENS1 DS    X\nIOBECBCC DS    X\nIOBECBPT DS    AL3\nIOBFLAG3 DS    X\nIOBCSW   DS    XL7\nIOBSIOCC DS    X\nIOBSTART DS    AL3\n         DS    X              RESERVED\nIOBDCBPT DS    AL3\nIOBRESTR DS    X\n         DS    XL3            IOBRESTR+1\nIOBINCAM DS    XL2\nIOBERRCT DS    XL2\nIOBSEEK  DS    0XL8\nIOBM     DS    X\nIOBBB    DS    XL2\nIOBCC    DS    XL2\nIOBHH    DS    XL2\nIOBR     DS    X\n         EJECT\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        DCB'S                                                        *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         PRINT NOGEN\nEXCPDCB  DCB   DDNAME=XXXXXXXX,                                        *\n               DEVD=DA,                                                *\n               DSORG=PO,                                               *\n               EXLST=JFCBLIST,                                         *\n               MACRF=E\n         TITLE 'DSECTS'\n         DCBD  DSORG=PO,DEVD=DA\nCVT      DSECT\n         CVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSPDS": {"ttr": 1285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PDSPDS   CSECT\n         USING PDSPDS,15\n         USING IHADCB,4\n         STM       14,12,12(13)\n         ST        13,SAVEAREA+4\n         LR        12,13\n         CNOP      0,4\n         BAL       13,PDSEDIT\nSAVEAREA DC        18A(0)\nBASE     DC    A(SAVEAREA+3*4096)\n         DC    A(SAVEAREA+2*4096)\n         DC    A(SAVEAREA+1*4096)\n         DROP      15\n         USING SAVEAREA,13,12,11,10\nPDSEDIT  EQU       *\n         ST        13,8(12)\n         LM    10,12,BASE\n         L     1,0(1)\n         MVC   PARMSIZ,0(1)            PARM LENGTH\n         LA    1,2(1)\n         ST    1,PARMADR               PARM START\n***********************************************************************\n         BAL   14,OPENTIM              GET THE TIME\n         EJECT\n***********************************************************************\n*     OPENS                              *                            *\n***********************************************************************\n         LA    1,SYSINPRM\n         L     15,=V(DDFIND)\n         BALR  14,15\n         B     *+4(15)      CHECK RETURN CODE\n         B     *+8           00 - SYSIN PRESENT\n         B     OPENPRNT      04 - SYSIN ABSENT -- OPNE SYSPRINT ONLY\n         OPEN  (SYSIN,,SYSPRINT,(OUTPUT))\n***********************************************************************\n         B     CONTROL0\nOPENPRNT EQU   *\n         OPEN  (SYSPRINT,(OUTPUT))\n         LA    4,SYSPRINT\n         TM    DCBOFLGS,X'10'\n         BZ    CTLEXIT\n         B     CONTROL0\n*\nSYSINPRM DS    0F\n         DC    A(SYSIN+(DCBDDNAM-IHADCB))\n         DC    A(WORKTIOT)\n***********************************************************************\n         EJECT\n***********************************************************************\n         MVI   EOF,0\nCONTROL  EQU   *\n         MVI   PRINTASA,C'0'\n         LA    1,OKMSG\n         CLI   CTLERROR,0              ANY ERRORS\n         BE    CNTLMSG                    NO\n         LA    1,BADMSG\nCNTLMSG  BAL   14,PRNTSTAT             GOOD/BAD\nCONTROL0 EQU   *\n         L     3,SCANBUF\n         XC    0(L'CTLCTL,3),0(3)      CLEAR CTL\n         XC    EDITCTL(2),EDITCTL      CLEAR NAMES\n         XC    ERRCTL,ERRCTL\n         XC    ONCTL,ONCTL\n         MVC   FIRSTNUM,=4X'00'\n         MVC   LASTNUM,=4X'FF'\n         MVC   PRNTMEM,PRNTMEM-1\n         CLI   EOF,X'FF'               DID WE HAVE A PRIOR EOF\n         BE    CTLEXIT                    YES\n         CLI   CTLSAV,X'FF'            DID WE SAVE A CONTROL CARD\n         BE    CONTROL2                   YES-PROCESS IT NOW\n         CLI   PARMSAV,X'FF'           IS ANY PARM FIELD WAITING\n         BNE   CONTROL1                   NO\n         BAL   14,PARMS                GET PARMS\n         B     CONTROL2                PROCESS PARM AS CARD\nCONTROL1 EQU   *\n         BAL   14,GETSYSIN             READ A CONTROL CARD\n         B     CTLEOF                  END OF INPUT\n         B     KEYCTL0                 NOTHING\nCONTROL2 EQU   *                       A '' CARD\n         MVI   CTLSAV,0\n         BAL   14,SETCTL\nCTLSCAN  EQU   *\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN              FIND A WORD\n         B     KEYCTL0                 -NOTHING LEFT\n         B     CTLSCAN                 -ZERO = DELIMITER ONLY\n***********************************************************************\n         MVI   UT1TYPE,0               DEFAULT INPUT\n         MVC   CHKADR,PRMSTART         WHERE THE INPUT KEYWORD IS\n         MVC   CHKTBL,=A(KEYWORD1)     WHERE VALID ONES ARE\n         MVC   CHKLNGTH,PRMLNGTH       LENGTH TO CHK\n         BAL   14,CHKTYPE              CHECK UM\n         B     CTLLIST1                -INVALID KEYWORD\n         B     CTLLIST2                -END\n         B     CTLLIB1                 -EDIT\n         B     CTLLIST1                -C\n         B     CTLLIST1                -LIST\n         B     CTLLIST1                -PUNCH\n         B     CTLLIST1                -SCAN\n         B     CTLLIST2                -OPTION\n         B     CTLLIST1                -DIR\n         B     CTLLIST1                -UTIL\n         B     CTLLIST1                -SEARCH\n         B     CTLLIST1                -FIND\n         B     CTLLIST1                -USAGE\n         B     CTLLIST1                -FILL\n         B     CTLLIST1                -INC\n         B     CTLLIB2                 -RENAME\n         B     CTLLISTA                -COPY\n         B     CTLLIB2                 -ALIAS\n         B     CTLLIB3                 -SCRATCH\n         B     CTLLIST0                -REPLACE\n         B     CTLLIST0                -ADD\n         B     CTLLIST0                -UPDATE\n         B     CTLLIST1                -INS\n         B     CTLLIST1                -REP\n         B     CTLLIST1                -DEL\nCTLLIB1  EQU   *                       EDIT\n         MVI   UT1TYPE,4               UPDAT\n         B     CTLLIST1\nCTLLIB2  EQU   *                       RENAME,ALIAS\n         MVI   UT1TYPE,4               UPDAT\n         B     CTLLISTB\nCTLLIB3  EQU   *                       SCRATCH\n         MVI   UT1TYPE,4               UPDAT\n         B     CTLLISTC\nCTLLIST0 EQU   *\n         BAL   14,OPENUT2              WE NEED SYSUT2\n         CLI   EJECTON,0               EJECT\n         BE    CTLLISTC                   NO\n         ZAP   LINES,MAXLINES\n         B     CTLLISTC\nCTLLISTA EQU   *\n         BAL   14,OPENUT2              WE NEED SYSUT2\n         B     CTLLISTB\nCTLLISTB EQU   *                       RENAME/COPY/ALIAS\n         BAL   14,GETNAME\n         B     CTLERR3                 NO NAME\n         B     CTLERR6                 TOO LONG\n         MVC   STOWOLD,CARDNAME\nCTLLISTC EQU   *                       SCRATCH/UPDATE,ADD\n         BAL   14,GETNAME\n         B     CTLERR3                 NO NAME\n         B     CTLERR6                 TOO OONG\n         MVC   STOWNEW,CARDNAME\n         MVC   STOWNAME,CARDNAME\n         MVC   FINDNAME,CARDNAME\n         XC    WUT2BYTE,WUT2BYTE       THE OUT BUFR FOR SYSUT2\n         ZAP   PSEQUENC,=P'0'          NEW OUT SEQ NUMBER\nCTLLIST1 EQU   *\n         BAL   14,OPENUT1              DO SYSUT1\nCTLLIST2 EQU   *\n         BAL   14,PRNTCTL0             LIST CARD\nCTLTYPE  BAL   14,CHKTYPE              NOW FIND THE RIGHT ONE\n         B     KEYCTL                  -INVALID KEYWORD\n         B     CONTROL0                -END\n         B     EDIT                    -EDIT\n         B     POSTNERR                -C (NOT NOW)\n         B     LISTMEM\n         B     PUNCHMEM                -PUNCH\n         B     SCANMEM                 -SCAN\n         B     OPTION                  -OPTION\n         B     LDIRECT                 -DIRECTORY LISTING\n         B     UTILITY                 -UTILITY\n         B     SEARCH                  -SEARCH\n         B     FIND                    -FIND\n         B     USAGE                   -USAGE\n         B     POSTNERR                -FILL (NOT NOW)\n         B     POSTNERR                -INC (NOT NOW)\n         B     RENAME                  -RENAME\n         B     KOPY                    -COPY\n         B     ALIAS                   -ALIAS\n         B     SCRATCH                 -SCRATCH\n         B     REPLACE                 -REPLACE\n         B     ADD                     -ADD\n         B     UPDATE                  -UPDATE\n         B     POSTNERR                -INS (NOT NOW)\n         B     POSTNERR                -REP (NOT NOW)\n         B     POSTNERR                -DEL (NOT NOW)\n***********************************************************************\nCTLERR3  EQU   *\n         LA    1,CTLMSG3               NO NAME\n         B     CTLERRS\nCTLERR6  EQU   *\n         LA    1,CTLMSG6               TOO LONG\nCTLERRS  EQU   *\n         ST    1,MSGADR\n         BAL   14,PRNTCTL0\n         L     1,MSGADR\n         BAL   14,PRINTERR\n         B     CTLTYPE\n         EJECT\n***********************************************************************\nPOSTNERR EQU   *\n         LA    1,CTLMSG9               NOT VALID NOW\n         B     CNTLERR\n***********************************************************************\nKEYCTL0  EQU   *\n         BAL   14,PRNTCTL0\nKEYCTL   EQU   *\n         LA    1,CTLMSG2               INVALID KEYWORD\n         B     CNTLERR\nCNTLERR  EQU   *\n         BAL   14,PRINTERR\n         B     CONTROL\n***********************************************************************\nCTLEOF   EQU   *\nCTLEXIT  EQU   *\n         BAL   14,CLOSEUT1\n         BAL   14,CLOSEUT2\n         CLOSE (SYSIN,,SYSPRINT,,SYSPUNCH)\n         L     13,SAVEAREA+4\n         LM    14,12,12(13)\nRETURNRC LA    15,0\n         BR    14                      -----------RETURN\n         EJECT\n***********************************************************************\nOPTION   EQU   *\n         MVI   TRTTBL+C'=',C'='        ADD '=' DELIMITER\nOPTIONLP EQU   *\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     OPTIONXT                -DONE\n         B     OPTIONLP                -ZERO\n         MVC   CHKADR,PRMSTART         WHERE KEY IS\n         MVC   CHKLNGTH,PRMLNGTH       LENGTH\n         MVC   CHKTBL,=A(KEYWORD2)     WHAT TO COMPARE WITH\n***********************************************************************\nOPTIONSC EQU   *\n         MVC   PRMSTART,PRMHIT         CHK REST OUT\n         BAL   14,PRMSCAN\n         B     OPTIONR1                -DONE=NOTHING THERE\n         B     OPTIONSC                '0' COULD BE TROUBLE\n         BAL   14,CHKTYPE              NOW CHK WHAT IT WAS\n         B     OPTIONR1                INVALID KEYWORD\n         B     OPTION4                 SCAN\n         B     OPTION4                 LIST\n         B     OPTION4                 DIRECTORY\n         B     OPTION4                 EJECT\n         B     OPTNDD                  INDD\n         B     OPTNPACK                LINES\n         B     OPTNPACK                SEQ\n         B     OPTNPACK                COLUMN\n         B     OPTION4                 USER\n         B     OPTNCTRL                -CONTROL\n         B     OPTION4                 -STOWCLOSE\n         B     OPTION4                 -ASIS\n         B     OPTION4                 -FIND\nOPTNPACK EQU   *\n         L     3,PRMSTART\n         BCTR  3,0\n         MVC   OPTNDLM,0(3)\n         BAL   14,NUMBONE\n         B     OPTIONR1                NOT #\n         B     OPTION5\n***********************************************************************\nOPTION4  EQU   *                       CHK ONES THAT NEED YES/NO\n         L     3,PRMSTART\n         MVI   OPTNWRK,0\n         CLI   0(3),C'N'               NO\n         BE    OPTION5                    YES\n         CLI   0(3),C'Y'               YES\n         BNE   OPTIONR1                -NEITHER\n         MVI   OPTNWRK,X'FF'\nOPTION5  EQU   *                       NOW GO TO THE RIGHT ONE\n         BAL   14,CHKTYPE\n         B     OPTIONR1                BAD KEYWORD\n         B     OPTNSCAN                SCAN\n         B     OPTNLIST                LIST\n         B     OPTNDIR                 DIRECTORY\n         B     OPTNEJCT                EJECT\n         B     OPTNDD                  INDD\n         B     OPTNLINE                LINES\n         B     OPTNSEQ\n         B     OPTNCOL                 COLUMN\n         B     OPTNUSR                 USER\n         B     OPTNCTRL                CONTROL\n         B     OPTNSTOW                -STOWCLOSE\n         B     OPTNASIS                -ASIS\n         B     OPTNFIND                FIND\n***********************************************************************\nOPTNSCAN EQU   *\n         MVC   SCANPARM,OPTNWRK\n         B     OPTION8\nOPTNLIST EQU   *\n         MVC   GLISTON,OPTNWRK\n         B     OPTION8\nOPTNDIR  EQU   *\n         MVC   DIRECTON,OPTNWRK\n         B     OPTION8\nOPTNEJCT EQU   *\n         MVC   EJECTON,OPTNWRK\n         B     OPTION8\nOPTNDD   EQU   *\n         BAL   14,CLOSEUT1             CLOSE OLD ONES 1ST\n         L     3,PRMSTART\n         LH    2,PRMLNGTH\n         BCTR  2,0\n         STC   2,OPTNDMVC+1\n         MVC   UT1NAME,=CL8' '         BLANK OUT\nOPTNDMVC MVC   UT1NAME,0(3)            THE NEW DDNAME\n         BAL   14,OPENUT1              DO SYSUT1\n         B     OPTION8\n***********************************************************************\n*                                                                     *\nOPTNLINE EQU   *\n         ZAP   MAXLINES,DOUBLE\n         B     OPTION8\nOPTNSEQ  EQU   *\n         CVB   3,DOUBLE\n         STH   3,SEQINCR\n         B     OPTION8\n*******************************************************\nOPTNDLM  DC    C' '\n         DS    0H\nOPTNCOL  EQU   *\n         CVB   3,DOUBLE\n         BCTR  3,0\n         LA    4,79                    MAX REAL OFFSET\n         CR    3,4\n         BL    OPTNCOL2\n         LA    4,79+8                  MAX EXTERNAL\n         LA    3,80\nOPTNCOL2 EQU   *\n         CR    3,4                     ARE WE TOO BIG\n         BH    OPTIONR1                TOO MUCH OFFSET\n         SR    4,3                     PREDICT LENGTH\n         STH   4,SEQWLNG               LENGTH\n         STH   3,SEQWOFF               OFFSET\n         CLI   OPTNDLM,C'('\n         BNE   OPTNCOL4\n         CLI   PRMCHAR+3,C','          ANYTHING TO FOLLOW\n         BNE   OPTNCOL4                   NO\n         MVC   NUMADR,PRMHIT\n         BAL   14,NUMBER               GT LNGTH OF SEQ\n         B     OPTIONR1                NOT A NUM\n         CLC   SEQWOFF,=AL2(79)        EXTERNAL\n         BH    OPTNCOL4                   YES\n         CVB   3,DOUBLE\n         BCTR  3,0\n         STH   3,SEQWLNG\nOPTNCOL4 EQU   *\n         CLC   SEQWLNG(2),=AL2(7)      LNG TOO BIG\n         BH    OPTIONR1                   YES\n         MVC   SEQOFSET,SEQWOFF\n         MVC   SEQLNGTH,SEQWLNG\n         B     OPTION8\n***********************************************************************\nOPTNUSR  EQU   *\n         MVC   USERON,OPTNWRK\n         B     OPTION8\n*******************************************************\nOPTNCTRL EQU   *\n         L     3,PRMSTART\n         MVC   CLICTRL+1(1),0(3)       CONTROL CHAR TO USE\n         B     OPTION8\n*******************************************************\nOPTNSTOW EQU   *\n         MVC   STOWON,OPTNWRK\n         B     OPTION8\n**********************************************************************\nOPTNASIS EQU   *\n         MVI   PRTALL,0\n         MVC   ASIS,OPTNWRK\n         NI    ASIS,X'0F'\n         L     3,PRMSTART\n         CLC   =C'Y+1',0(3)            Y+1=SKIP OVER CARRIAGE CTL\n         BNE   OPTNAS2                    NO\n         OI    ASIS,X'F0'\n         B     OPTION8\nOPTNAS2  EQU   *\n         CLC   =C'Y+0',0(3)            Y+0=REALLY ASSIS\n         BNE   OPTION8\n         OI    PRTALL,X'FF'\n         B     OPTION8\n***********************************************************************\nOPTNFIND EQU   *\n         MVC   ANDFIND,OPTNWRK\n         B     OPTION8\n***********************************************************************\nOPTION8  EQU   *\n         CLI   PRMCHAR+3,C' '          THE END\n         BNE   OPTIONLP                NOT THE END YET\nOPTIONXT EQU   *\n         B     CONTROL                 -------EXIT\n***********************************************************************\nOPTIONR1 EQU   *\n         LA    1,OPTNMSG1              INVALID OPTION KEYWRD\n         L     3,CHKADR                WHERE WE STARTED\n         MVC   OPTNKEY(10),0(3)        BAD PLACE\n         BAL   14,PRINTERR\n         B     OPTION8\n***********************************************************************\n         EJECT\n***********************************************************************\nLDIRECT  EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    CONTROL\n         BAL   14,GETNAME\n         B     LDIRECTA                DONE/NONE\n         B     LDIRECTA                TOO LONG GET ALL\n*\n         MVC   DIRALL(2),PRMLNGTH\n         MVC   DIRALL+2(8),CARDNAME\n         MVI   DIRALL+10,X'FF'\n         BAL   14,DIRLIST1\n         B     CONTROL\nLDIRECTA EQU   *\n         BAL   14,DIRLIST              DIRECTORY LISTING\n         B     CONTROL                 --------EXIT\n***********************************************************************\nDIRALL   DC    AL2(1),CL8'ALL',X'00',8X'FF',4X'00',4X'00'\nDIRR14   DC    A(0)\n*                                                                     *\nDIRLIST  EQU   *\n         ST    14,DIRR14\n         MVC   DIRALL(2),=AL2(1)\n         MVI   DIRALL+10,0\nDIRLIST1 EQU   *\n         ST    14,DIRR14\n         MVI   DIRNAME,X'FF'           RESET DIR\n         MVC   FINDADR,=A(DIRALL)      DUMMY\n         ZAP   LINES,MAXLINES\nDIRLOOP  EQU   *\n         BAL   14,FINDMEM\n         B     DIRDONE                 -DONE\n         NOP   *\n         MVC   INDEXNAM(8),DIRNAME     NAME\n         MVC   INDEXALS(5),=CL8' '\n         TM    DIRCTL,X'80'            ALIAS\n         BZ    DIRLIST2                   NO\n         MVC   INDEXALS(5),=CL5'ALIAS'\nDIRLIST2 EQU   *\n         UNPK  INDEXTTR(7),DIRTTR(4)\n         TR    INDEXTTR(6),TRTBL-C'0'  MAKE PRINTABLE\n         MVI   INDEXTTR+6,C' '\n         MVC   PRINTIT(L'INDEXL),INDEXL MOVE TO PRINTBUF\n         SR    1,1\n         IC    1,DIRCTL\n         N     1,=XL4'1F'              # OF 2BYTE USER\n         LA    3,PRINTIT+L'INDEXL+1\n         UNPK  0(3,3),DIRCTL(2)\n         MVI   2(3),C' '\n         TR    0(2,3),TRTBL-C'0'\n         LA    3,3(3)\n         LA    4,DIRUSER\nDIRLIST3 EQU   *\n         LTR   1,1\n         BZ    DIRLIST4\n         UNPK  0(5,3),0(3,4)\n         MVI   4(3),C' '\n         TR    0(4,3),TRTBL-C'0'\n         BCTR  1,0\n         LA    3,5(3)\n         LA    4,2(4)                  NEXT 2\n         C     3,=A(PRINTIT+131)\n         BL    DIRLIST3                WE CNA DO MORE\nDIRLIST4 EQU   *\n         BAL   14,PRINTLIN\n         XC    DIRNAME,DIRNAME         WONT USE AGAIN\n         B     DIRLOOP                 GET THE NEXT\n***********************************************************************\nDIRDONE  EQU   *\n         L     14,DIRR14\n         BR    14\n***********************************************************************\n         EJECT\n**********************************************************************\nUSAGE    EQU   *\n         LA    4,SYSUT1\n         MVC   CAMDSN,=A(PRNTDSN)\n         MVC   CAMVOL,=A(PRNTVOL)\n         BAL   14,USED\n         B     USAGE2                  NOTHING\n         ZAP   TOTMEMR,=P'0'\n         ZAP   TOTMEMA,=P'0'\n         MVI   TOTSCAN,X'FF'\n         MVI   DIRNAME,X'FF'\n         MVC   FINDADR,=A(DIRALL)\n         MVC   DIRALL(2),=AL2(1)\n         MVI   DIRALL+10,0\nUSALOOP  EQU   *\n         BAL   14,FINDMEM\n         B     USADONE\n         B     USALIAS\n         AP    TOTMEMR,=P'1'\n         B     USACLEAR\nUSALIAS  EQU   *\n         AP    TOTMEMA,=P'1'\nUSACLEAR XC    DIRNAME,DIRNAME\n         B     USALOOP\nUSADONE  EQU   *\n         OI    TOTUSED+3,X'0F'\n         OI    TOTBLOCK+3,X'0F'\n         OI    TOTMEMR+3,X'0F'\n         OI    TOTMEMA+3,X'0F'\n*\n         MVC   USE1DDNM(8),UT1NAME\n         UNPK  USE1ALOC(5),TOTBLOCK\n         UNPK  USE1USED(5),TOTUSED\n         LA    1,USEMSG1\n         BAL   14,PRNTSTAT\n*\n         MVC   USE3DDNM(8),UT1NAME\n         UNPK  USE3MEMR(5),TOTMEMR\n         UNPK  USE3MEMA(5),TOTMEMA\n         LA    1,USEMSG3\n         BAL   14,PRNTSTAT\n         MVC   USE2DDNM(8),UT1NAME\n         MVI   PRINTASA,C'0'\n         LA    1,USEMSG2\n         BAL   14,PRNTSTAT             SYSUT1\nUSAGE2   EQU   *\n         LA    4,SYSUT2\n         MVC   CAMDSN,=A(PRNTDSN2)\n         MVC   CAMVOL,=A(PRNTVOL2)\n         BAL   14,USED\n         B     CONTROL\n         MVC   USE2DDNM(8),UT2NAME\n         MVI   PRINTASA,C'0'\n         LA    1,USEMSG2\n         BAL   14,PRNTSTAT\n         B     CONTROL\n**********************************************************************\nTOTSCAN  DC    X'00'\nTOTUSED  DC    PL4'0'\nTOTBLOCK DC    PL4'0'\nTOTMEMR  DC    PL4'0'\nTOTMEMA  DC    PL4'0'\n**********************************************************************\n         EJECT\n**********************************************************************\nDEBNMEXT EQU   16\nDEBAMLNG EQU   16\nDEBNMTRK EQU   14+32\nDS1LSTAR EQU   98-44\nDSNTOTAL DC    A(0)                    TOTAL TRKS\nDSNEMPTY DC    A(0)                    EMPTY TRKS\nDSNEXTNT DC    A(0)                    # EXTNTS\nUSEDR14  DC    A(0)\n*\nUSED     EQU   *                       R4 POINTS TO DCB\n         ST    14,USEDR14\n         TM    DCBOFLGS,X'10'          OPEN\n         BZR   14                         NO\n         L     1,DCBDEBAD              DEBADDRESS\n         SR    0,0\n         SR    3,3\n************************\n*  CLAC TOTAL SIZE DSN *\n************************\n         IC    3,DEBNMEXT(1)           # OF EXTNETS\n         ST    3,DSNEXTNT              SAVE EXTENTS\nUSEDLOOP EQU   *\n         AH    0,DEBNMTRK(1)           ADD # TRK/EXTENT\n         LA    1,DEBAMLNG(1)            GO TO NEXT\n         BCT   3,USEDLOOP\n         ST    0,DSNTOTAL              SAVE TOTAL # TRKS\n**********************************************************************\n         OBTAIN CAMLST\n         LH    1,DSCB+DS1LSTAR\n         LA    1,1(1)\n         L     0,DSNTOTAL\n         SR    0,1\n         ST    0,DSNEMPTY              SAVE EMPTY TRKS\n         L     1,DSNTOTAL              TOTAL # TRKS\n         CVD   1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  USE2ALOC(5),DOUBLE\n         L     1,DSNEMPTY              EMPTY TRKS\n         CVD   1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  USE2EMTY(5),DOUBLE\n         MVI   PRINTASA,C'0'\n         L     14,USEDR14\n         B     4(14)\n**********************************************************************\nCAMLST   CAMLST SEARCH,*,*,DSCB\n         ORG   *-12\nCAMDSN   DC    A(0)\nCAMVOL   DC    A(0)\n         ORG\n**********************************************************************\n         EJECT\n**********************************************************************\nRENAME   EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    CONTROL\n         BAL   14,STOWR                E RENAME\n         B     CONTROL\n**********************************************************************\nSCRATCH  EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    CONTROL\n         BAL   14,STOWS                -SCRATCH\n         B     CONTROL\n**********************************************************************\nALIAS    EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    CONTROL\n         MVI   FINDTYPE,X'FF'          ALIAS NOT OK\n         MVC   FINDNAME,STOWOLD\n         BAL   14,BLDL\n         B     CONTROL                 ERROR\n         MVC   STOWTTR(66),FINDTTR\n         BAL   14,STOWA                ALIAS\n         B     CONTROL\n**********************************************************************\nKOPY     EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    CONTROL\n         MVI   FINDTYPE,X'80'          ALIAS OK\n         MVC   FINDNAME,STOWOLD\n         BAL   14,BLDL\n         B     CONTROL                 NOT FOUND\n         MVC   STOWTTR(66),FINDTTR\n         BAL   14,SETSEQ\n         LA    1,FINDTTR\n         BAL   14,FINDUT1              POSITION\nCOPYLOOP EQU   *\n         BAL   14,READMEM\n         B     COPYEND                 EOF\n         BAL   14,WUT2OLD              COPY\n         B     COPYLOOP\nCOPYEND  EQU   *\n         BAL   14,UT2LAST              DO LAST SHORT BLK\n         BAL   14,STOWC                ADD COPIED (NO DUPS)\n         B     UT2RESET\n         EJECT\n***********************************************************************\nREPLACE  EQU   *\n         MVI   REPON,X'FF'\n***********************************************************************\nADD      EQU   *\n         XC    FINDOLI(70),FINDOLI\n         MVC   FINDADR,=A(FINDMODL)\n         BAL   14,SETSEQ\nADD2     EQU   *\n         CLI   CTLERROR,X'FF'          ERROR\n         BE    ADDFLUSH                   YES\nADDIT    EQU   *\n         BAL   14,GETSYSIN\n         B     ADDEND2                 EOF\n         B     ADD3                    NOT ''\n         BAL   14,INCHK                ANY INCS\n         B     ADDEND1                    NO\n         BAL   14,INC                  DO -INC\n         B     ADD2\nADD3     EQU   *\n         BAL   14,WUT2NEW              WRITE NEW\n         BAL   14,PRINTADD\n         B     ADDIT\n**********************************************************************\nADDEND1  EQU   *\n         MVI   CTLSAV,X'FF'\nADDEND2  EQU   *\n         BAL   14,UT2LAST              DO LAST SHORT BLK\n         CLI   REPON,0                 ADD\n         BE    ADDEND3                    YES\n         BAL   14,STOW\n         B     UT2RESET\nADDEND3  EQU   *\n         BAL   14,STOWC\n         B     UT2RESET\n*\n*********************************************************************\nADDFLUSH EQU   *                       FLUSH AFTER AN ERROR\n         BAL   14,GETSYSIN\n         B     UT2RESET\n         B     ADDFLIST                SOME DATA\n         BAL   14,INCHK                POSSIBLE INC\n         B     ADDFLEXT                   NO\nADDFLIST EQU   *\n         BAL   14,PRINTFLS\n         B     ADDFLUSH\nADDFLEXT EQU   *\n         MVI   CTLSAV,X'FF'\n         B     UT2RESET\n**********************************************************************\n         EJECT\n*********************************************************************\nUPOUT    DC    X'00'\nUPSTART  DC    XL4'FF'\nUPEND    DC    XL4'FF'\n*\n         DS    0F\nFINDMODL DC    AL2(8)\nFINDNAME DC    CL8' '\nFINDTYPE DC    X'FF'\n         DC    8X'FF'                  SESS/MASK\nFINDOLI  DC    XL4'00'\nFINDTTR  DC    XL3'00'\nFINDCTL  DC    X'00'\nFINDUSER DC    XL62'00'\n*\nUPMSG    DC    A(0)\n**********************************************************************\nNESTBLK  DC    A(0)\nNESTBYTE DC    A(0)\nNESTTTR  DC    A(0)\n**********************************************************************\nUPDATE   EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    UPCARDS\n         MVI   FINDTYPE,X'FF'          ALIAS NOT OK\n         BAL   14,BLDL\n         B     UPCARDS                 NOT FOUND\n         MVC   STOWTTR(66),FINDTTR\n         BAL   14,SETSEQ\n         LA    1,FINDTTR\n         BAL   14,FINDUT1              POSITION\n         MVI   UPDATA,0\nUPCARDS  EQU   *\n         BAL   14,GETSYSIN\n         B     UPEOF2                  -EOF\n         B     UPEOF1                  -NOT CTL\nUPCARDS2 EQU   *\n         BAL   14,INCHK\n         B     UPDATE3                 NOT -INC\n         LA    1,CTLMSG9               NOT NOW\n         BAL   14,PRINTERR\n         B     UPFLUSH\nUPDATE3  EQU   *\n         BAL   14,SETCTL\nUPDATE4  MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     UPEOF1                  NOTHING\n         B     UPDATE4\n         MVC   CHKADR,PRMSTART\n         MVC   CHKLNGTH,PRMLNGTH\n         MVC   CHKTBL,=A(KEY3C-2)\n         BAL   14,CHKTYPE\n         B     UPEOF1                  NOT 1 OF US\n         NOP   *                       -INS\n         NOP   *                       -REP\n         NOP   *                       -DEL\n         BAL   14,PRINTCTL\n         BAL   14,UPRANGE\n         CLI   CTLERROR,X'FF'          ANY ERRORS\n         BE    UPFLUSH                    YES\n         MVI   UPDATA,X'FF'\n**********************************************************************\n         BAL   14,CHKTYPE\n         NOP   *\n         B     INS\n         B     REP\n         B     DEL\nUPEOF1   EQU   *                       NEXT\n         MVI   CTLSAV,X'FF'\nUPEOF2   EQU   *\n         CLI   UPDATA,X'FF'            ANY DATA\n         BE    UPEOF2B                   YES\n         LA    1,UPMSG8\n         BAL   14,PRINTERR\nUPEOF2B  EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    UT2RESET                   YES-ERRORS\nUPEOF3   EQU   *\n         BAL   14,READMEM              COPY THE REST\n         B     UPEOFX\n         BAL   14,WUT2OLD\n         B     UPEOF3\nUPEOFX   EQU   *\n         BAL   14,UT2LAST              DO LAST SHORT BLK\n         BAL   14,STOW\n         B     UT2RESET\n**********************************************************************\n         EJECT\n**********************************************************************\nINS      EQU   *\n         MVI   UPOUT,0\n         CLC   UPSTART,=XL4'00'        BEFORE START\n         BE    INS4\nINS2     BAL   14,READMEM\n         B     UPERR4                  -EOF\n         BAL   14,WUT2OLD              COPY OLD\n         CLC   SEQWRK,UPSTART\n         BH    UPERR5                  TOO FAR\n         BNE   INS2\n**********************************************************************\nINS4     EQU   *\n         BAL   14,GETSYSIN\n         B     INS9                    EOF\n         B     INS6                    DATA TO INSERT\n         BAL   14,INCHK\n         B     INS9                    NOT -INC\n         MVC   NESTBLK(8),MEMBLK\n         NOTE  SYSUT1\n         ST    1,NESTTTR\n         BAL   14,INC                  DO INC\n         LA    1,NESTTTR\n         BAL   14,FINDUT1\n         MVC   MEMBUFR,BUFPOOL\n         LA    1,MEMDECB               REFRESH\n         BAL   14,RREAD\n         MVC   MEMBLK(8),NESTBLK       RESTORE DEBLOCKERS\n         B     INS4\n**********************************************************************\nINS6     EQU   *\n         MVI   UPOUT,X'FF'\n         BAL   14,WUT2NEW              INSERT NEW\n         BAL   14,PRINTINS\n         B     INS4\nINS9     EQU   *                       EOF OR NEXT CTL\n         CLI   UPOUT,X'FF'             ANY WRITTEN\n         BE    INSX                       YES\n         LA    1,UPMSG8                MSISING DATA\n         BAL   14,PRINTERR\nINSX     EQU   *\n         CLI   EOF,X'FF'               EOF\n         BE    UPEOF2                     YES\n         B     UPCARDS2\n**********************************************************************\n         EJECT\n**********************************************************************\nREP      EQU   *\n         MVI   UPOUT,0\nREP2     EQU   *\n         BAL   14,READMEM\n         B     UPERR4                  EOF\n         CLC   SEQWRK,UPSTART\n         BH    UPERR5                  TOO FAR\n         BE    REP4                    THIS IS IT\n         BAL   14,WUT2OLD              COPY OLD\n         B     REP2\n**********************************************************************\nREP4     EQU   *\n         BAL   14,PRINTDEL             DELETED\n         CLC   SEQWRK,UPEND            THE END\n         BE    REP6                       YES\n         BH    UPERR5                  TOO FAR\n         BAL   14,READMEM\n         B     UPERR4                  EOF\n         B     REP4\nREP6     EQU   *\n         B     INS4                    DO NEXT AS INSERTS\n**********************************************************************\n         EJECT\n**********************************************************************\nDEL      EQU   *\nDEL2     EQU   *\n         BAL   14,READMEM\n         B     UPERR4                  EOF\n         CLC   SEQWRK,UPSTART\n         BH    UPERR5                  TOO FAR\n         BE    DEL4\n         BAL   14,WUT2OLD              COPY OLD\n         B     DEL2\n**********************************************************************\nDEL4     EQU   *\n         BAL   14,PRINTDEL             DELETED\n         CLC   SEQWRK,UPEND            END\n         BE    DEL6                       YES\n         BH    UPERR5                  TOO FAR\n         BAL   14,READMEM\n         B     UPERR4                  EOF\n         B     DEL4\nDEL6     EQU   *\n         B     UPCARDS                 GET NEXT\n**********************************************************************\n         EJECT\n**********************************************************************\nUPERR4   EQU   *\n         LA    1,UPMSG4                EOF MEMBER\n         MVC   UPM4NAME(8),STOWNAME\n         MVC   UPM4SEQ(8),CARDSEQ\n         B     UPERRS\nUPERR5   EQU   *\n         LA    1,UPMSG5                MEM.GT.SEQUENCE\n         MVC   UPM5SEQ(8),CARDSEQ\n         B     UPERRS\nUPERRS   EQU   *\n         BAL   14,PRINTERR\n         B     UPFLUSH\nUPFLUSH  EQU   *\n         BAL   14,GETSYSIN\n         B     UPEOF2                  EOF\n         B     UPFLIST\n         BAL   14,INCHK\n         B     UPCARDS2                NOT -INC\nUPFLIST  EQU   *\n         BAL   14,PRINTFLS             LIST AS FLUSHED\n         B     UPFLUSH\n**********************************************************************\nUT2LST14 DC    A(0)\n*\nUT2LAST  EQU   *                       WRITE LAST SHOT BLK\n         ST    14,UT2LST14\n         CLC   WUT2BYTE,=A(0)          IS THERE A LAST BLK\n         BER   14                         NO\n         LA    4,SYSUT2\n         MVC   DCBBLKSI,WUT2BYTE+2     FOR LAST BLK\n         LA    1,WUT2DECB\n         BAL   14,WWRITE\n         LA    4,SYSUT2\n         MVC   DCBBLKSI,WUT2BLK+2      RESTORE OLD BLK\n         L     14,UT2LST14\n         BR    14\n**********************************************************************\nUT2RESET EQU   *\n         LA    4,SYSUT2\n         TM    DCBOFLGS,X'10'          OPEN\n         BZ    CONTROL\n         CLI   STOWON,X'FF'            DO WE CLOSE\n         BE    UT2RESTB                   YES\n         CLI   CTLERROR,0\n         BE    CONTROL\nUT2RESTB EQU   *\n         CLOSE (SYSUT2)\n         OPEN  (SYSUT2,(OUTPUT))\n         B     CONTROL\n         EJECT\nINCHKR14 DC    A(0)\n*\nINCHK    EQU   *\n         ST    14,INCHKR14\n         BAL   14,SETCTL\nINCHK3   MVC   PRMSTART,PRMHIT\n        BAL    14,PRMSCAN\n         B     INCHK6                  NOTHING\n         B     INCHK3\n         LH    2,PRMLNGTH\n         BCTR  2,0\n         STC   2,INCHKCLC+1\nINCHK6   EQU   *\n         L     3,PRMSTART\n         L     14,INCHKR14\nINCHKCLC CLC   0(0,3),KEY3AA           -INCLUDE\n         BNER  14                         NO\n         BAL   14,PRINTCTL\n         L     14,INCHKR14\n         B     4(14)\n**********************************************************************\n         EJECT\n**********************************************************************\nINCDIR   DC    X'00'\nINCSEQ   DC    PL6'0'\nINCDDNAM DC    CL8' '\nINCDDSAV DC    CL8' '\n         DS    0H\nINCR14   DC    A(0)\n*\nINC      EQU   *\n         ST    14,INCR14\n         MVI   INCDDNAM,0              INIT TO NO NEW DDNAM\n         MVC   INCSEQ,INTSEQ           SAVE CURRENT INTERNAL SEQ\n         ZAP   INTSEQ,=P'0'\n         BAL   14,GETNAME\n         B     INCERR3                 NO NAME\n         B     INCERR6                 TOO LONG\n         CLI   PRMCHAR+3,C'('          POSSIBLE DDNAME\n         BNE   INC1                       NO\n         MVC   INCDDNAM,CARDNAME       SAVE NEW DDNAME\n         MVC   INCDDSAV,UT1NAME        SAVE CURRENT DDNAME\n         BAL   14,GETNAME              GET REAL MEMBER\n         B     INCERR3                 NO NAME\n         B     INCERR6                 TOO LONG\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN              SKIP OVER )\n         NOP   *\n         NOP   *\n         BAL   14,UPRANGE              GET NUMBERS\n         CLI   CTLERROR,X'FF'\n         BE    INCEXIT\n         BAL   14,CLOSEUT1             CLOSE CURRENT ONE\n         MVI   UT1TYPE,0               MAKE INPUT\n         MVI   UT1OPTN,0               STILL INPUT\n         MVC   UT1NAME,INCDDNAM        THE NEW DDNAME\n         MVC   INCDIR,DIRECTON         SAVE DIR WANTED\n         MVI   DIRECTON,0              NO DIRS FOR INCS\n         BAL   14,OPENUT1              GET INC LIB\n         B     INC2\nINC1     EQU   *\n         BAL   14,UPRANGE\n         CLC   FINDNAME,CARDNAME       SAME AS BEFORE\n         BE    INC3                       YES\nINC2     EQU   *\n         CLI   CTLERROR,X'FF'\n         BE    INCEXIT\n         MVI   FINDTYPE,X'80'          ALIAS OK\n         MVC   FINDNAME,CARDNAME\n         BAL   14,BLDL\n         B     INCERR7                 NOT FOUND\nINC3     EQU   *\n         LA    1,FINDTTR\n         BAL   14,FINDUT1              POSITION\nINC4     EQU   *\n         BAL   14,READMEM\n         B     INCEXIT                 OEF\n         CLC   SEQWRK,UPSTART\n         BL    INC4                    NOT THERE YET\nINC6     CLC   SEQWRK,UPEND\n         BH    INCEXIT                 DONE\n         MVI   UPOUT,X'FF'\n         BAL   14,WUT2OLD              COPY ITT\n         CLI   GLISTON,0               WANT TO LIST ITT\n         BE    INC8                       NO\n         BAL   14,PRINTCOP\nINC8     EQU   *\n         BAL   14,READMEM\n         B     INCEXIT\n         B     INC6\nINCEXIT  EQU   *\n         CLI   INCDDNAM,0              WERE WE INCING\n         BE    INCEXRTN                   NO\n         MVI   FINDNAME,X'FF'\n         BAL   14,CLOSEUT1\n         MVC   UT1NAME,INCDDSAV\n         BAL   14,OPENUT1              GET THE OLD LIB BACK\n         MVC   DIRECTON,INCDIR         AND RESTORE DIR\nINCEXRTN EQU   *\n         MVC   INTSEQ,INCSEQ           RESTORE OLD INTERNAL SEQ\n         L     14,INCR14\n         BR    14\n**********************************************************************\nINCERR3  EQU   *\n         LA    1,CTLMSG3               NO NAME\n         B     INCERRS\nINCERR6  EQU   *\n         LA    1,CTLMSG6               NAME TOO LONG\n         B     INCERRS\nINCERR7  EQU   *\n         MVI   FINDNAME,X'FF'\n         B     INCEXIT\nINCERRS  EQU   *\n         BAL   14,PRINTERR\n         B     INCEXIT\n**********************************************************************\n         EJECT\n***********************************************************************\n*            FIND NAME FOR LIST/PRINT                                 *\n***********************************************************************\nLISTMEM  EQU   *\n         MVI   LISTON,X'FF'            TURN ON LIST WANTED\n         MVC   EDITARG,=A(EDITCTL)\n         BAL   14,EDITNAMS             FIND NAMES TO LIST\n         CLI   CTLERROR,0              ANY ERRORS\n         BNE   LIST5                      YES\nLIST4    EQU   *\n         BAL   14,FINDITT              LIST UM\nLIST5    EQU   *\n         MVI   LISTON,0\n         B     CONTROL                 ---EXIT TO CONTROL\n***********************************************************************\n         EJECT\n***********************************************************************\n*         FIND NAMES FOR PUNCH                                        *\n***********************************************************************\nPUNCHMEM EQU   *\n         MVI   PUNCHON,X'FF'\n         MVC   EDITARG,=A(EDITCTL)\n         BAL   14,EDITNAMS             FIND NAMES TO PUNCH\n         CLI   CTLERROR,0              ANY ERRORS\n         BNE   PUNCH5                     YES\n         BAL   14,OPENPNCH             CHECK IF PUNCH THERE\n         B     PUNCH5                     NO PUNCH\n         BAL   14,FINDITT\nPUNCH5   EQU   *\n         MVI   PUNCHON,0\n         B     CONTROL                 ---DONE---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\n*      FIND NAMES FOR EDIT-SCAN                                       *\n***********************************************************************\nSEARCH   EQU   *\n         MVI   SEARCHON,X'FF'          DO SEARCH ONLY\n         BAL   14,WRKMAIN\n         B     EDIT3\n**********************************************************\nSCANMEM  EQU   *\n         MVI   SCANON,X'FF'            SCAN ONLY\n         B     EDIT3\n***********************************************************************\nEDIT     EQU   *\n         MVI   EDITON,X'FF'\n         MVC   SCANON,SCANPARM         WHAT PARM SAYS\n         BAL   14,OPENWRK\n         B     EDIT3\n***********************************************************************\nFIND     EQU   *\n         MVI   SEARCHON,X'FF'\n         MVI   ANDON,X'FF'\n         BAL   14,WRKMAIN              ALLOCATE WRKBUFR\n         B     EDIT3\n***********************************************************************\nEDIT3    EQU   *\n         MVC   EDITARG,=A(EDITCTL)     WHERE TO SAVE NAMES START\n         MVC   SCANARG,SCANBUF         INIT FOR CHANGES\n         BAL   14,EDITNAMS\n         XC    CARGS,CARGS             CLEAR -C COUNTER\n**********************************************************************\n*         -C CARDS MUST FOLLOW                                       *\n**********************************************************************\nEDITCS   EQU   *\n         BAL   14,GETSYSIN\n         B     EDIT9                   -EOF\n         B     EDIT7                   BLANK\n         BAL   14,SETCTL\nEDITCS1  MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     EDIT7                   NOTHING\n         B     EDITCS1                 ZERO 'L'\n         L     3,PRMSTART\n         LH    2,PRMLNGTH\n         BCTR  2,0\n         STC   2,EDITCLC+1\n         STC   2,EDITCLC2+1\n         MVI   FILLON,0\nEDITCLC  CLC   KEY1B,0(3)              -C\n         BE    EDITCHNG\nEDITCLC2 CLC   KEY1L,0(3)              -FILL\n         BNE   EDIT7\n         MVI   FILLON,X'FF'\nEDITCHNG EQU   *\n*\n         BAL   14,CHANGCTL             PROCESS -C\n         B     EDITCS\n**********************************************************************\nEDIT7    EQU   *\n         MVI   CTLSAV,X'FF'\nEDIT9    EQU   *\n         L     3,SCANBUF\n         CLC   (CTLLNG1-CTLCTL)(2,3),=AL2(0) ANY -CS\n         BE    EDITERR4                   NO\n         CLI   CTLERROR,0              ANY ERRORS\n         BNE   CONTROL                    YES\n***********************************************************************\nEDIT4    EQU   *\n         BAL   14,FINDITT\n         MVC   SCANON,SCANPARM         RESET TO DEFAULT\nEDIT5    EQU   *\n         B     CONTROL                 ---EXIT TO CONTROL\n***********************************************************************\n         EJECT\n***********************************************************************\nEDITNR14 DC    A(0)\nFIRSTNUM DC    XL4'00'\nLASTNUM  DC    XL4'FF'\n*                                                                     *\nEDITNAMS EQU   *\n         ST    14,EDITNR14\n         MVI   MASKON,0\nEDITMORE EQU   *\n         BAL   14,GETNAME              GET NMME ON CARD\n         B     EDITDONE                DONE/NONE\n         B     EDITERR6                TOO LONG\n         BAL   14,NUMBONE              IS IT MAYBE A NUMBER\n         B     EDITNAM4                   NO\n         CLC   FIRSTNUM,=4X'00'\n         BNE   EDITNUM2\n         MVC   FIRSTNUM,NUMWORK\nEDITNUM2 MVC   LASTNUM,NUMWORK\n         B     EDITMORE\nEDITNAM4 EQU   *\n         L     3,EDITARG               WHERE TO PUT NAME\n         MVC   0(2,3),=H'8'            INIT TO GETTING 1 NAME\n         MVC   2(8,3),CARDNAME         SAVE NAME\n         MVC   10(1,3),PRMCHAR+3       TYPE\n         MVC   11(8,3),2(3)            NAME AGAIN\n         MVC   TRTTBL,TRTTBL-1         FF\n         MVI   TRTTBL+C'-',0           '-'=00\n         TR    11(8,3),TRTTBL          MAKE A MASK\n         CLC   11(8,3),=8X'FF'\n         BE    EDITSET\n         MVI   MASKON,X'FF'\nEDITSET  EQU   *\n         BAL   14,SETTRT               RESTORE TBL\n         CLI   PRMCHAR+3,C'.'          '.'=ALL\n         BNE   EDITINC                    NO\n         CLC   2(4,3),=CL4'ALL'        ALL.ALL\n         BNE   EDITSOME\n         MVI   10(3),0                 TURN ON ALL\nEDITSOME EQU   *\n         MVC   0(2,3),PRMLNGTH         USE FOR ALL CHK\n         MVC   PRMSTART,PRMHIT         SKIP OVER THE '.' ALL\n         BAL   14,PRMSCAN\n         NOP   *\n         NOP   *\nEDITINC  EQU   *\n         L     3,EDITARG\n         LA    3,L'EDITCTL(3)          BUMP TO NEXT AVAIL\n         ST    3,EDITARG               AND SAVE\n         XC    0(2,3),0(3)\n         CLI   PRMCHAR+3,C' '          BLANK=DONE\n         BE    EDITDONE                   YES\n         B     EDITMORE                LOOK FOR MORE NAMES THIS CARD\n***********************************************************************\nEDITDONE EQU   *\n         CLC   EDITCTL(2),=AL2(0)      ANY NAMES\n         BE    EDITERR3                   NO\n***********************************************************************\n         EJECT\n***********************************************************************\n*           SORT THE NAMES                                            *\n***********************************************************************\nEDITSRT  EQU   *\n         MVI   SORT,0                  NOTHING SORTED\n         LA    3,EDITCTL               WHERE THE NAMES ARE\nEDITSRT1 EQU   *\n         CLC   L'EDITCTL(2,3),=AL2(0)  THE END\n         BE    EDITSRT3                   YES\n         CLC   2(8,3),L'EDITCTL+2(3)   THIS 1 LOWER\n         BNH   EDITSRT2                   YES\n         XC    0(L'EDITCTL,3),L'EDITCTL(3) SWAP UM\n         XC    L'EDITCTL(L'EDITCTL,3),0(3)\n         XC    0(L'EDITCTL,3),L'EDITCTL(3) SWAP DONE\n         MVI   SORT,X'FF'              SOMETHING SORTED\nEDITSRT2 EQU   *\n         LA    3,L'EDITCTL(3)          TO NEXT 1\n         B     EDITSRT1\n***********************************************************************\nEDITSRT3 EQU   *\n         CLI   SORT,X'FF'              DID WE SORT ANY\n         BE    EDITSRT                    YES\n         B     EDITFND\nEDITFNDB EQU   *\n         ST    14,EDITNR14\n***********************************************************************\n*        FIND THE NAMES IN DIRECTORY                                  *\n***********************************************************************\nEDITFND  EQU   *\n         MVI   DIRNAME,X'FF'           START AT BEGIN DIRECT\n         LA    3,EDITCTL               BACK TO NAMES\nEDITFND2 EQU   *\n         ST    3,FINDADR\n         CLC   0(2,3),=AL2(0)          THE END\n         BE    EDITEXIT                   YES\n         CLI   MASKON,0                MASKS\n         BE    EDITFLOP                   NO\n         MVI   DIRNAME,X'FF'\nEDITFLOP EQU   *\n         BAL   14,FINDMEM              TRY TO FIND\n         B     EDITERR7                NO SUCH NAME EXISTS\n         B     EDITFND6                -AN ALIAS\nEDITFND4 EQU   *\n         L     3,FINDADR\n         MVC   2(8,3),DIRNAME          1ST NAME FOUND\nEDITFND3 EQU   *\n         LA    3,L'EDITCTL(3)          NEXT ONE\n         B     EDITFND2\n***********************************************************************\nEDITEXIT EQU   *\n         MVI   DIRNAME,X'FF'           RESET FOR ALL\n         L     14,EDITNR14\n         BR    14\n***********************************************************************\nEDITFND6 EQU   *\n         XC    DIRNAME,DIRNAME         WONT USE AGAIN\n         L     3,FINDADR\n         B     EDITFLOP                  NO-NOT USE ALIAS\n***********************************************************************\n         EJECT\n***********************************************************************\nEDITERR3 EQU   *\n         LA    1,CTLMSG3               NO VALID NAMES EXITS\n         BAL   14,PRINTERR\n         B     EDITEXIT\n***********************************************************************\nEDITERR4 EQU   *\n         LA    1,CTLMSG4               NO -C\n         BAL   14,PRINTERR\n         B     CONTROL\nEDITERR6 EQU   *\n         LA    1,CTLMSG6               NAME TOO LONG\n         BAL   14,PRINTERR\n         B     EDITMORE\nEDITERR7 EQU   *\n         BAL   14,CTLERR7              NAME NOT FOUND\n         L     3,FINDADR               RESTORE WHERE AT\n         B     EDITFND3                CHECK NEXT ONE\n***********************************************************************\n         EJECT\n***********************************************************************\n***********************************************************************\n         DS    0F\n         DC    X'00'\nUTILMODL EQU   *\n         DC    4X'FF'                  START\n         DC    4X'FF'                  END\n         DC    AL2(0)                  COLUMN START OFFSET\n         DC    AL2(255)                # COLUMNS TO CHK\n         DC    AL2(L'UTILKEY)\nUTILKEY  DC    C'&&NAME'\nUTILNGTH DC    AL2(L'UTILNAME)\nUTILNAME DC    C'UTILNAME'\n         DC    AL2(0)\n         DC    20X'00'\n***********************************************************************\nUTILITY  EQU   *\n         MVC   EDITARG,=A(EDITCTL)\n         BAL   14,EDITNAMS\n         BAL   14,CLOSEWRK             -CLOSE SYSWRK\n         BAL   14,WRKMAIN              ALLOCATE WRK POOL\n         MVC   WRKFROM,=A(CTLCARD)\n         BAL   14,OPENPNCH\n         B     UTILDONE                NO PUNCH\n         MVI   PUNCHON,X'FF'\nUTIL4    EQU   *\n         BAL   14,GETSYSIN\n         B     UTIL5                      EOF\n         NOP   *                       BLANK\n         BAL   14,PRINTCTL             -LIST CARD\n         MVC   ORIGINAL,CTLCARD\n         CLI   CTLCARD+71,C'%'         PERCENT = 1 COPY\n         BNE   UTIL4B                     NO\n         MVI   ORIGINAL+71,C' '        BLANK CC72\n         B     UTILONCE\nUTIL4B   EQU   *\n         CLI   CTLCARD+71,C'$'         DOLLAR = 1 COPY\n         BNE   UTIL4C                     NO\nUTILONCE EQU   *\n         BAL   14,PNCHMEM              PUNCH 1 COPY OF THIS CARD\n         B     UTIL4\n         B     UTILDONE                NO PUNCH\n***********************************************************************\nUTIL4C   EQU   *\n         BAL   14,WRKWRITE             SAVE\n         B     UTILERR1                MAIN STORAGE EXCEEDED\n         B     UTIL4\n***********************************************************************\nUTILERR1 EQU   *\n         LA    1,UTILMSG1\n         BAL   14,PRINTERR\n         BAL   14,WRKMAIN              RESET\n         B     UTIL4                   FLUSH REST\n***********************************************************************\nUTIL5    EQU   *\n         CLI   CTLERROR,0              ANY ERRORS\n         BNE   UTILDONE                   YES\n         LA    3,EDITCTL\n         ST    3,FINDADR\n         MVC   L'EDITCTL-4-4(4,3),=AL1(72,7,10,X'EE')\n         BAL   14,SETSEQ\n         LA    3,EDITCTL\nUTILMORE EQU   *\n         ST    3,FINDADR\n         CLC   0(2,3),=AL2(0)          DONE\n         BE    UTILDONE                   YES\n         CLI   MASKON,0                MASKS\n         BE    UTILFIND                   NO\n         MVI   DIRNAME,X'FF'\nUTILFIND EQU   *\n         BAL   14,FINDMEM\n         B     UTILNEXT                -PAST\n         B     UTILALS                 ALIAS\n         MVC   UTILNAME,DIRNAME\n         MVC   ORIGNAM(8),DIRNAME\n         LA    4,7\nUTILBLNK LA    3,UTILNAME(4)\n         CLI   0(3),C' '               BLANK\n         BNE   UTIL6                       NO\n         BCT   4,UTILBLNK\nUTIL6    EQU   *\n         LA    4,1(4)\n         STH   4,UTILNGTH              LENGTH\n         XC    1(L'CTLCTL,3),1(3)      TO STOP IT\n***********************************************************************\nUTILREP  EQU   *\n         BAL   14,WRKREAD\n         B     UTILINC                 -END OF DATA\nUTILSCAN EQU   *\n         MVC   SCANARG,=A(UTILMODL)\n         BAL   14,SCANREP\n         B     UTILDONE                -ERROR\n         B     UTIL7                   -DONE\n         MVC   ORIGINAL(71),COPY\n         B     UTILSCAN\nUTIL7    EQU   *\n         BAL   14,PNCHMEM              PUNCH IT\n         B     UTILREP\n         B     UTILDONE                -IF NO PUNCH\n***********************************************************************\nUTILALS  EQU   *\n         XC    DIRNAME,DIRNAME         BYPASS ALIAS\n         B     UTILFIND\n***********************************************************************\nUTILINC  EQU   *\n         L     3,FINDADR\n         CLC   0(2,3),=AL2(8)          FOR 1 ONLY\n         BNE   UTILINC2                    NO-MORE THAN 1\n         CLC   11(8,3),=8X'FF'         MASKED\n         BE    UTILNEXT                   NO\nUTILINC2 EQU   *\n         XC    DIRNAME,DIRNAME\n         B     UTILFIND\n***********************************************************************\nUTILNEXT EQU   *\n         L     3,FINDADR\n         LA    3,L'EDITCTL(3)\n         B     UTILMORE\n***********************************************************************\nUTILDONE EQU   *\n         B     CONTROL                 ---DONE---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nCTLER14  DC    A(0)\nCTLERR7  EQU   *\n         LA    1,CTLMSG7               NAME NOT FOUND\n         L     3,FINDADR\n         MVC   CERR7NAM(8),2(3)        THIS NAME\n         MVC   CERR8NAM(8),2(3)        NAME FOR ALIAS\n         TM    L'EDITCTL-4+3(3),X'80'  ALIAS\n         BZ    CTLERRXT                   NO\n         LA    1,CTLMSG8               NAME IS AN ALIAS\n         B     CTLERRXT\nCTLERRXT EQU   *\n         ST    14,CTLER14\n         BAL   14,PRINTERR\n         L     14,CTLER14\n         BR    14\n***********************************************************************\n         EJECT\n********************************\n* GET /SEARCH ARG/REP ARG/     *\n********************************\nCHNGR14  DC    A(0)\n*\nCHANGCTL EQU   *\n         ST    14,CHNGR14\n         LH    1,CARGS                   OF\n         LA    1,1(1)                     -C\n         STH   1,CARGS                       CARDS\n         BAL   14,PRINTCTL             LIST CARD\n         BAL   14,RANGE                CHK FOR POSSIBLE #'S\n         L     4,SCANARG\n         MVC   0(CTLLNG,4),STARTNUM    START/END COL/LNG\n         LA    4,CTLLNG(4)\n         ST    4,SCANARG\n         MVC       TRTTBL,TRTTBL-1     FOXES\n         MVI       TRTTBL+C' ',X'00'   DONT STOP ON BLANKS\n********************************\n* FIND BEGINNING DELIMITER     *\n********************************\n         MVC   PRMSTART,PRMHIT\n         BAL       14,PRMSCAN          LOOK FOR DELIMITER TO USE\n         B     ARGERR1                 NOTHING ON CARD\n         NOP       *                   ZERO IS OK\n*\n         XC        TRTTBL,TRTTBL       00\n         L         5,PRMCHAR           LOAD DELIMITER CHARACTER\n         LA        6,TRTTBL(5)         AND INDEX INTO TRT\n         STC       5,0(6)              STORE DELIMITER TO USE\n********************************\n* FIND SEARCH ARG              *\n********************************\n         CLI   FILLON,0                FILLON\n         BE    CHANGCT2                   NO\n         BAL   14,PRMSTOR2\nCHANGCT2 EQU   *\n         MVC       PRMSTART,PRMHIT     WHERE TO START\n         BAL       14,PRMSCAN          LOOK FOR SEARCH ARG\n         B     ARGERR2                 MISSING DELIMITER\n         B     ARGERR3                 ZERO SEARCH ARG LENGTH\n         BAL       14,PRMSTORE         SAVE SEARCH ARG\n         CLI   FILLON,X'FF'            FILLON\n         BE    CHANGEXT\n         CLI   SEARCHON,X'FF'          SEARCH ONLY\n         BNE   CHANGCT6                  NO-GET REP\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     CHANGCT3                MISSING\n         B     CHANGCT3                DITTO 0\n         L     3,PRMSTART\n         CLC   0(2,3),=CL2'-N'         IS THIS NOT\n         BNE   CHANGCT3                   NO\n         LH    1,CARGS                 BACK\n         BCTR  1,0                     IT\n         STH   1,CARGS                 OUT\n         B     CHANGST                 SAVE IT\nCHANGCT3 EQU   *\n         XC    PRMLNGTH,PRMLNGTH\n         B     CHANGST\n********************************\n* FIND REPLACEMENT ARG         *\n********************************\nCHANGCT6 EQU   *\n         MVC       PRMSTART,PRMHIT     SHERE TO START NEXT\n         BAL       14,PRMSCAN          FIND REP ARG\n         B     ARGERR4                 MISSING END DELIMITER\n         NOP       *                   ZERO -OK\n         CLC   PRMCOUNT,=AL2(0)        ARE WE DONE WITH CARD\n         BE    CHANGST                    NO\n         L     3,PRMHIT\n         CLI   0(3),C' '               IS THERE A BLANK AFTERWARDS\n         BNE   ARGERR5                    NO\nCHANGST  EQU   *\n         BAL       14,PRMSTORE         SAVE REP ARG\nCHANGEXT EQU   *\n         L     14,CHNGR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\n***********************************************************************\nARGERR1  EQU   *\n         LA    1,PRMSG1                BLANK CARD\n         B     PRMERRXT\nARGERR2  EQU   *\n         LA    1,PRMSG2                MISSING DELIMITER 2\n         B     PRMERRXT\nARGERR3  EQU   *\n         LA    1,PRMSG3                ARG ZERO LENGTH\n         B     PRMERRXT\nARGERR4  EQU   *\n         LA    1,PRMSG4                MISSING DELIMITER 3\n         B     PRMERRXT\nARGERR5  EQU   *\n         LA    1,PRMSG5                NO BLANK AFTER LAST DELIM\nPRMERRXT EQU   *\n         BAL   14,PRINTERR\n         B     CHANGEXT\n***********************************************************************\n         EJECT\n*******************************\n* SAVE /SEARCH/REP/ ARGS      *\n*******************************\nPRMSTR14 DC    A(0)\n*\nPRMSTORE EQU   *\n         ST    14,PRMSTR14\n         L         4,SCANARG           WHERE TO SAVE\n         L         3,PRMSTART          WHERE PARM SAVE ADDR IS\n         LH        2,PRMLNGTH          LENGTH OF PARM\n         STH       2,0(4)              SAVE\n         LTR   2,2\n         BZ    PRMSEXIT\n         BCTR      2,0                 MAKE MACH L\n         STC       2,PRMMVC+1\n         B     PRMMVC\nPRMSTOR2 EQU   *\n         ST    14,PRMSTR14\n         L     4,SCANARG\n         MVC   0(2,4),=AL2(2)\n         LA    2,2\n         STH   2,2(4)\n         LA    4,2(4)\n         B     PRMSEXIT\nPRMMVC   MVC       2(0,4),0(3)         SAVE\n         AH        4,PRMLNGTH          ADD THE LENGTH\nPRMSEXIT EQU   *\n         LA        4,2(4)              +2 CTL\n         XC    0(L'CTLCTL,4),0(4)      INDICATE END\n         ST        4,SCANARG           NEXT AVAIL\n         L     14,PRMSTR14\n         BR        14\n***********************************************************************\nPRMSTERR EQU   *\n         LA    1,SEQMSG3\n         BAL   14,PRINTERR\n         L     4,SCANARG\n         B     PRMSEXIT\n***********************************************************************\n         EJECT\nRANGER14 DC    A(0)\nSTARTNUM DC    XL4'FF'\nENDNUM   DC    XL4'FF'\nSTARTCOL DC    AL2(0)\nENDCOL   DC    AL2(0)\n*                                                                     *\nRANGE    EQU   *\n         ST    14,RANGER14\n         MVC   STARTNUM,=4X'FF'\n         MVC   ENDNUM,=4X'FF'\n         MVC   STARTCOL,=AL2(0)\n         MVC   ENDCOL,=AL2(255)\n         L     3,PRMHIT                -BEGIN NEXT\n         LH    4,PRMCOUNT              # LEFT\nRANGELOP CLI   0(3),C' '               BLANK\n         BNE   RANGE3                     NO\n         LA    3,1(3)\n         BCT   4,RANGELOP\n         B     RANGEXT\nRANGE3   EQU   *\n         CLI   0(3),C'('               COLUMNS\n         BE    RANGCOL1                   YES\n         ST    3,NUMADR\n         BAL   14,NUMBER\n         B     RANGEXT                 -NOT A NUMBER\n         MVC   STARTNUM,NUMWORK\n         MVC   ENDNUM,NUMWORK\n         CLI   PRMCHAR+3,C','          NEXT DELIM ,\n         BNE   RANGEXT\n         L     3,PRMHIT\n         CLI   0(3),C'('               COLUMNS\n         BE    RANGCOL1                   YES\n         MVC   NUMADR,PRMHIT\n         BAL   14,NUMBER\n         B     RANGE4                  NOT A NUMBER\n         MVC   ENDNUM,NUMWORK\n         CLC   STARTNUM,ENDNUM\n         BH    RANGE2\n         CLI   PRMCHAR+3,C','          ANYMORE\n         BNE   RANGEXT                    NO\n         L     3,PRMHIT\n         CLI   0(3),C'('               COLUMNS\n         BNE   RANGEXT                    NO\nRANGCOL1 EQU   *\n         LA    3,1(3)\n         ST    3,NUMADR\n         BAL   14,NUMBER\n         B     RANGE4                  NOT #\n         CVB   1,DOUBLE\n         STH   1,ENDCOL\n         BCTR  1,0\n         STH   1,STARTCOL\n         CLI   PRMCHAR+3,C','          MORE COLUMNS\n         BNE   RANGCOLS                   NO\n         MVC   NUMADR,PRMHIT\n         BAL   14,NUMBER\n         B     RANGE4                  NOT #\n         CVB   1,DOUBLE\n         STH   1,ENDCOL\nRANGCOLS EQU   *\n         LH    1,ENDCOL\n         SH    1,STARTCOL              END-START\n         BNP   RANGE2                  ERROR\n         STH   1,ENDCOL                # OF COLUMNS\n         B     RANGEXT\n***********************************************************\nRANGE2   EQU   *\n         LA    1,SEQMSG2\n         B     RANGMSG\nRANGE4   EQU   *\n         LA    1,SEQMSG3               NOT A NUMBER\nRANGMSG  EQU   *\n         BAL   14,PRINTERR\nRANGEXT  EQU   *\n         L     14,RANGER14\n         BR    14\n***********************************************************************\nUPRANG14 DC    A(0)\n*\nUPRANGE  EQU   *\n         ST    14,UPRANG14\n         BAL   14,RANGE\n         CLI   STARTNUM,X'FF'\n         BNE   UPRANGXT\n         LA    1,SEQMSG2               SOMETHINGS NOT NUM\n         BAL   14,PRINTERR\nUPRANGXT EQU   *\n         MVC   UPSTART,STARTNUM\n         MVC   UPEND,ENDNUM\n         L     14,UPRANG14\n         BR    14\n**********************************************************************\n         EJECT\n**********************************************************************\nNUMADR   DC    A(0)\nNUMBER14 DC    A(0)\nNUMWORK  DC    XL5'00'\nNUMPACK  PACK  NUMWORK,0(0,3)\n*                                                                     *\nNUMPACK2 PACK  DOUBLE,0(0,3)\n*\nNUMBONE  EQU   *\n         ST    14,NUMBER14\n         B     NUM1\nNUMBER   EQU   *\n         ST    14,NUMBER14\n         L     3,NUMADR\n         TM    0(3),X'F0'              NUMBER\n         BNO   NUMEXT0                    NO\nNUMBERS  EQU   *\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     NUMEXT0                 -DONE\n         B     NUMBERS                 -0 LENGTH\nNUM1     EQU   *\n         L     3,PRMSTART\n         LH    1,PRMLNGTH\n         BCTR  1,0\n         STC   1,NUMBCHK+1\nNUMBCHK  TRT   0(0,3),TRTNUM\n         BNZ   NUMEXT0\n         L     3,PRMSTART\n         LH    1,PRMLNGTH              LENGTH OF NUM\n         EX    1,NUMPACK\n         BCTR  1,0\n         EX    1,NUMPACK2\nNUMEXT4  EQU   *\n         L     14,NUMBER14\n         B     4(14)\nNUMEXT0  EQU   *\n         L     14,NUMBER14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\n*     READ MEMBER AND LIST OR SCAN                                    *\n***********************************************************************\nFINDIR14 DC    A(0)\n*                                                                     *\nFINDITT  EQU   *\n         ST    14,FINDIR14\n         MVI   ALLCHK,0                NOT IN -ALL- MODE YET\n         MVC   FINDADR,=A(EDITCTL)     WHERE NAMES ARE\n         ZAP   LINES,MAXLINES          START WITH NEW PAGE\nFINDMORE EQU   *\n         BAL   14,RESTORE              SEE IF ANYTHING TO RESTORE\n         XC    WRKNUM,WRKNUM           CLEAR # WRITTEN TO BKUP\n         MVI   WRITEON,0               NO CHANGES TO BUFR YET\n         MVI   FIRSTERR,0              NO ERROR FOR WRITING BUFR\n         MVI   ERROR,0                 SET TO NO ERROR\n         MVI   PRINTASA,C'0'\n         CLI   EJECTON,0               EJECT\n         BE    FINDITT3                   NO\n         ZAP   LINES,MAXLINES\nFINDITT3 EQU   *\n         L     3,FINDADR\n         CLC   0(2,3),=AL2(0)          IS THIS END\n         BE    FINDONE                    YES\n         MVC   ORIGNAM(8),2(3)         THIS MEM NAME\n         LA    1,L'EDITCTL-4(3)        TTR THIS MEM\n         BAL   14,FINDUT1\n         BAL   14,SETSEQ\nFINDREAD EQU   *\n         MVI   PRINTED,0               SET NO ORIG PRINTED YET\n         MVI   CHANGE,0                NOTHING CHANGED YET\n         BAL   14,FINDSRCH             SEE IF FIND/SEARCH\n         B     FINDINC1                   YES IT WAS\n         BAL   14,READMEM              READ A RECORD OF MEMBER\n         B     FINDINC1                END OF MEMBER\n*                                                                     *\n         BAL   14,PNCHMEM              PUNCH\n         B     FINDREAD                   WE ONLY PUNCH\n*                                                                     *\n         BAL   14,PRINTMEM             SEE IF TO PRINT\n         B     FINDREAD                ONLY LISTING\nFINDREP  EQU   *\n         MVC   SCANARG,SCANBUF         BEGIN OF ARGS\n         BAL   14,REPAGAIN             DO THE SCAN AND REPLACE\n         BAL   14,WRITEMEM\n         B     FINDREAD                ALL OK\nFINDINC1 EQU   *\n***********************************************************************\n         MVI   PRINTASA,C'0'\n         L     3,FINDADR\n         CLC   0(2,3),=AL2(8)          LOOK FOR 1 ONLY\n         BNE   FINDIALL                   NO-LOOK FOR MORE\n         CLC   11(8,3),=8X'FF'         IS IT MASKED\n         BE    FINDINC4                   NO-WE ARE DONE\nFINDIALL EQU   *\n         CLI   ALLCHK,X'FF'            ARE WE IN ALL MORE ALREADY\n         BE    FINDINC3                   YES\n         CLI   MASKON,0                MASKS\n         BE    FINDILOP                   NO\n         MVI   DIRNAME,X'FF'\nFINDILOP EQU   *\n         BAL   14,FINDMEM              POSITION TO 1ST ONE WE DID\n         B     FINDINC4                BEYOND\n         B     FINDILOP                SHOULDNT GET-ALIAS\n         MVI   ALLCHK,X'FF'            NOW ERE IN ALLCHK MODE\nFINDINC3 EQU   *\n         XC    DIRNAME,DIRNAME\n         BAL   14,FINDMEM              GET THE NEXT FOR ALL MODE\n         B     FINDINC4                THIS IS THE END\n         B     FINDINC3                AN ALIAS-CANT USE\n         L     3,FINDADR\n         MVC   2(8,3),DIRNAME          THIS IS THE NAME\n         B     FINDMORE                DO IT\n***********************************************************************\nFINDINC4 EQU   *\n         MVI   ALLCHK,0\n         L     3,FINDADR\n         LA    3,L'EDITCTL(3)          BUMP TO NEXT ONE\n         ST    3,FINDADR\n         B     FINDMORE\n***********************************************************************\nFINDONE  EQU   *\n         L     14,FINDIR14\n         BR    14                      ---EXIT\n***********************************************************************\nFINDUT14 DC    A(0)\nFINDSAV  DC    XL4'00'\n*\nFINDUT1  EQU   *\n         ST    14,FINDUT14\n         MVC   FINDSAV(3),0(1)         TTR TO FIND\n         FIND  SYSUT1,FINDSAV,C\n         MVC   MEMBYTE,MEMBLK          FORCE TO READ NEW\n         L     14,FINDUT14\n         BR    14\n**********************************************************************\n         EJECT\n***********************************************************************\nFINDSEND DC    X'00'\nFINDSR14 DC    A(0)\n*                                                                     *\nFINDSRCH EQU   *\n         CLI   SEARCHON,0              DOING SEARCH/FIND\n         BE    4(14)                      NO\n         ST    14,FINDSR14\n         MVI   FINDSEND,0              NOT END OF MEM YET\n         MVC   WRKFROM,=A(ORIGINAL)    WHERE TO SAVE FROM\n         XC    TRTTBL,TRTTBL\nFINDSRH0 EQU   *\n         CLI   FINDSEND,X'FF'          END OF MEMBER\n         BE    FINDSRHX                   YES\n         XC    ANDHITS,ANDHITS         CLEAR # OF HITS\n         XC    WRKBYTES,WRKBYTES       CLEAR # BUFFERED\nFINDSRH1 EQU *\n         BAL   14,READMEM              GET A MEM REC\n         B     FINDSRHE                   END OF MEM\n         BAL   14,WRKWRITE             SAVE\n         B     FINDSER1                STORAGE EXCEEDED\n         CLI   ANDON,0                 ANDING\n         BE    FINDSRH4                   NO\n***********************************************************************\n* COMBINE CONTNUED CARDS= X IN CC72 OR ,BLANK                         *\n***********************************************************************\n         MVI   ORIGINAL+71,C' '\n         MVI   TRTTBL+C',',C','        STOP ON COMMA\n         MVI   TRTTBL+C' ',0           BUT NOT A BLANK\n         TRT   ORIGINAL(71),TRTTBL\n         BZ FINDSRH4                   ITS NOT CONTINUED\n         CLC   0(2,1),=CL2', '         CONTINUED\n         BE    FINDSRH1                  YES\n         MVI   TRTTBL+C',',0           DONT STOP ON ,\n         MVI   TRTTBL+C' ',C' '        BUT DO ON BLANK\n         TRT   0(72,1),TRTTBL\n         BCTR  1,0                     BACKUP ONE\n         CLC   0(2,1),=CL2', '         CONTINUED\n         BE    FINDSRH1                   YES\n***********************************************************************\nFINDSRH4 EQU   *\n         BAL   14,WRKREAD              RETRIEVE SAVED\n         B     FINDSRH7                   END OF SAVED\n         MVC   SCANARG,SCANBUF\nFINDSRH6 EQU   *\n         BAL   14,SCANCARD\n         B     FINDSRH4                DONE/NONE\n         LH    1,ANDHITS\n         LA    1,1(1)\n         STH   1,ANDHITS\n         L     4,SCANARG               WHERE THIS ARG IS\n         LA    4,CTLLNG(4)             +CTLLNG\n         AH    4,0(4)                  + LENGHT SRCH\n         LA    4,2(4)                  +2 CTL\n         CLI   ANDON,0                 ANDING\n         BE    FINDSR6B                   NO\n         CLC   0(2,4),=AL2(0)          ZERO\n         BE    FINDSR6B                   YES\n         BAL   14,WRKMAIN              NO-THIS IS -NOT\n         B     FINDSRH0                TRY NEXT ONE\nFINDSR6B EQU   *\n         AH    4,0(4)                  + LENGTH REP\n         LA    4,2(4)                  +2 CTL\n         ST    4,SCANARG               IS THE NEXT ONE\n         B     FINDSRH6\n***********************************************************************\nFINDSRHE EQU   *\n         MVI   FINDSEND,X'FF'          END OF MEM\nFINDSRH7 EQU   *\n         CLC   ANDHITS,=AL2(0)         ANY HITS\n         BE    FINDSRH0                   NO\n         CLI   ANDON,0                 ANDING\n         BE    FINDSRH8                   NO\n         CLI   ANDFIND,X'FF'           COUNT FINDS\n         BE    FINDSRH8                   NO\n         CLC   ANDHITS,CARGS           ENOUGH HITS\n         BL    FINDSRH0                   NO\nFINDSRH8 EQU   *\n         BAL   14,WRKREAD              RETRIEVE SAVED\n         B     FINDSRH0                   END\n         BAL   14,PRINTORG             ----ORIGINAL\n         B     FINDSRH8                GET NEXT\n***********************************************************************\nFINDSRHX EQU   *\n         L     14,FINDSR14\n         BR    14                      ---DONE---EXIT\n***********************************************************************\nFINDSER1 EQU   *\n         LA    1,UTILMSG1\n         BAL   14,PRINTERR\n         B     FINDSRHX\n***********************************************************************\n         EJECT\n***********************************************************************\nREPAR14  DC    A(0)\n*                                                                     *\nREPAGAIN EQU   *\n         ST    14,REPAR14\nREPLOOP  EQU   *\n         BAL   14,SCANREP              EXAMINE THE INPUT TO ARGS\n         B     REPERROR                ERROR\n         B     REPDONE                 ALL DONE/NONE THIS RECORD\n         MVI   CHANGE,X'FF'            INDICATE A CHANGE\n         CLI   PRINTED,X'FF'           DID WE PRINT ORIGINAL YET\n         BE    REPCOPY                    YES\n         BAL   14,PRINTORG             ------ORIGINAL\n         MVI   PRINTED,X'FF'           ORIGINAL HAS BEEN PRINTED\nREPCOPY  MVC   ORIGINAL(71),COPY       NEW RECORD\n         B     REPLOOP                 AND LOOK FOR MORE TO DO\n***********************************************************************\nREPDONE  EQU   *\n         CLI   CHANGE,X'00'            ANY CHANGES\n         BE    REPOUT                     NO\n         BAL   14,PRINTREP             ------REPLACEMENT\nREPOUT   EQU   *\n         L     14,REPAR14\n         BR    14                      ---DONE---EXIT\n***********************************************************************\nREPERROR EQU   *\n* MAYBE PRINT ARG LATER                                               *\n         L     14,REPAR14\n         BR    14                      ---ERROR---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nSCANR14  DC    A(0)\n*                                                                     *\nSCANREP  EQU   *\n         ST    14,SCANR14\n         MVI   SCANEXIT+3,0            INIT TO ERROR\n*******************************\n* LOOK FOR MATCH              *\n*******************************\n         BAL       14,SCANCARD         TRY TO MATCH IT\n         B         SCANDONE            DONE/NONE\n         MVC   COPY,COPY-1             BLANK\n*******************************\n*      MOVE FRONT             *\n********************************\n         MVC   REPMAX,REPSIZE          MAX # TO MOVE\n         MVC       REPFROM,=A(ORIGINAL)          FROM ADDR\n         MVC       REPTO,=A(COPY)      TO ADDR\n         L         2,SCANHIT           HIT ADDRESS\n         S         2,SCANADR           MINUS START\n         STH       2,REPLNGTH          IS THE LNGTH\n         BAL       14,REPCARD          COPY OLD FRONT\n         B     REPERR1                 TOO LARGE (ONLY IF 80)\n****************************\n*  MOVE REPLACEMENT        *\n****************************\n         L         4,SCANARG           ADRESS CTL\n         LA    4,CTLLNG(4)             +CTLLNG\n         AH        4,0(4)              + LENGTH SEARCH\n         LA        4,2(4)              + CTL=GEGIN REP\n         MVC       REPLNGTH,0(4)       REP LENGTH\n         LA        4,2(4)              + CTL\n         ST        4,REPFROM           IS THE FROM ADDR\n         AH    4,REPLNGTH              ADD THE LENGTH\n         ST    4,SCANARG               AND POINT TO THE NEXT\n         BAL       14,REPCARD          COPY REPLACEMENT\n         B         REPERR1             -TOO LARGE\n*******************************\n*   MOVE TAIL IN              *\n*******************************\n         L     2,SCANEND               THE END +1\n         S     2,SCANTAIL              =LENGTH +1\n         BNP   TAILEXIT                NO TAIL\n         L     3,SCANEND\n         BCTR  3,0\nTAILCHK  CLI   0(3),C' '               IS IS BLANK\n         BNE   TAILEND\n         BCTR  3,0\n         BCT   2,TAILCHK\nTAILEND  STH   2,REPLNGTH              LENGTH OF TAIL\n         MVC   REPFROM,SCANTAIL        WHERE TAIL STARTS\n         BAL   14,REPCARD              MOVE IT IN\n         B     REPERR2                 -TAIL TOO BIG\nTAILEXIT EQU   *\n         MVI   SCANEXIT+3,8            INDICATE CHANGE\n         B     SCANRTRN\n*******************************\n*   END OF ONE SEARCH CHK     *\n*******************************\nSCANDONE EQU   *\n         MVI   SCANEXIT+3,4            SET TO DONE\nSCANRTRN L     14,SCANR14\nSCANEXIT B     0(14)\n***********************************************************************\nREPERR1  EQU   *\n         LA    1,REPMSG1               REPLACEMENT TOO LARGE\n         B     REPERRXT\nREPERR2  EQU   *\n         LA    1,REPMSG2               DATA OVERFLOW ON TAIL\n         B     REPERRXT\nREPERRXT EQU   *\n         MVI   SCANEXIT+3,0            SET TO ERROR\n         BAL   14,PRINTERR\n         CLI   PRINTED,X'FF'           DID WE PRINT ORIGNAL YET\n         BE    REPERRXU                   YES\n         BAL   14,PRINTORG             ORIGINAL AS IS\nREPERRXU EQU   *\n         MVC   ORIGINAL(71),COPY\n         LA    1,REPMSG3               HOW FAR WE GOT\n         BAL   14,PRINTDAT\n         B     SCANRTRN\n***********************************************************************\n         EJECT\n*****************************************\n*     SCAN CARD FOR MATCH TO A SEARCH ARG *\n*****************************************\nSCANARG  DC    A(0)                    WHAT TO LOOK FOR -UPDATED\nSCANADR  DC    A(ORIGINAL)             SCAN START\nSCANEND  DC    A(ORIGINAL+71)          SCAN END +1\nSCANHIT  DC    A(0)                    WHERE HIT WAS\nSCANTAIL DC    A(0)                    WHERE TAIL STARTS\nSCANMAX  DC    AL2(71)                 MAX # COLUMNS TO CHK\n         DC    C' '\nCARDSEQ  DC    CL8' '                  CARD SEQ\n         DC    X'00'\nSTARTWRK DC    XL4'00'                 START #\nENDWRK   DC    XL4'00'                 END #\nSEQWRK   DC    XL4'00'                 CRD SEQ WRK\n         DC    X'00'\n***********************************\n         DS    0H\nSCANCARD EQU   *\n         L     3,SCANADR               START SEARCH\n         L     4,SCANARG               ARG ADDRSS\n         CLC   CTLLNG(2,4),=AL2(0)     THE END\n         BER   14                         YES\n         AH    3,(CTLCOLST-CTLCTL)(4)       + COL START\n         MVC   STARTWRK,(CTLSTART-CTLCTL)(4) START #\n         MVC   ENDWRK,(CTLEND-CTLCTL)(4)     END #\n*\n         LH    2,SCANMAX               MAX BYTES SCAN\n         SH    2,(CTLLNG1-CTLCTL)(4)   MINUS SEARCH LENGTH\n         LA    2,1(2)                  +1 FOR BCT\n         SH    2,(CTLCOLST-CTLCTL)(4)  MINUS START COLUMN\n         BNP   SCANCRD2                L.E. 0\n         CH    2,(CTLCOLNG-CTLCTL)(4)  LNG COLS\n         BH    SCANCRD3                G.T\n         B     SCANCRD4                L.E.\nSCANCRD2 EQU   *\n         LA    2,1\n         B     SCANCRD4\nSCANCRD3 EQU   *\n         LH    2,(CTLCOLNG-CTLCTL)(4)\nSCANCRD4 EQU   *\n         LA    4,CTLLNG(4)             +CTLLNG\n         CLI   STARTWRK,X'FF'          ANY #'S\n         BE    SCANCRD6                   NO\n         CLC   SEQWRK,STARTWRK         G.E. START\n         BL    SCANNEXT                   NO\n         CLC   SEQWRK,ENDWRK           L.E. END\n         BH    SCANNEXT                   NO\nSCANCRD6 EQU   *\n         LH    5,0(4)                  LENGTH TO CHK\n         BCTR  5,0\n         STC   5,SCANCLC+1\n         CLI   2(4),0                  FILL\n         BNE   SCANCLC                    NO\n         AH    4,0(4)                  + LENGTH DUMMY\n         LA    4,2(4)                  +2 CTL\n         B     SCANEQL                 SIMULATE HIT\n*\n**********************************************************\nSCANCLC  CLC   0(3,3),2(4)             IS THIS EQUAL\n         BE    SCANEQL                    YES\n         LA    3,1(3)\n         BCT   2,SCANCLC\n********************************\n* NO HIT-POINT TO NEXT SEARCH ARG *\n***********************************\nSCANNEXT EQU   *\n         AH    4,0(4)                  + LENGTH CLC\n         LA    4,2(4)                  +2 FOR CTL\n         AH    4,0(4)                  + LENGTH THIS REP\n         LA    4,2(4)                  +2 FOR CTL\n         ST    4,SCANARG               IS NEXT ADDRESS OF CTL\n         B     SCANCARD                DO SOME MORE\n*********************************\n*         HIT                   *\n*********************************\nSCANEQL  EQU   *\n         ST    3,SCANHIT               WHERE HIT STARTS\n         AH    3,0(4)                  + LENGTH\n         ST    3,SCANTAIL              WHERE TAIL STARTS\n         B     4(14)                   ---HIT---EXIT\n***********************************\n         EJECT\n************************************\n*  MOVE DATA FROM A FIELD TO A FIELD *\n**************************************\nREPFROM  DC    A(0)                    WHERE TO COPY FROM\nREPTO    DC    A(0)                    WHERE TO COPY TO -UPDATED\nREPLNGTH DC    AL2(0)                  LENGTH TO COPY\nREPMAX   DC    AL2(71)                 MAX # AVAILABLE TO MOVE TO\nREPSIZE  DC    H'71'\n*\nREPCARD  EQU   *\n         L     3,REPFROM               FROM\n         L     4,REPTO                 TO\n         LH    2,REPMAX                # AVAILABLE\n         SH    2,REPLNGTH              MINUS THIS MOVE\n         BM    0(14)                   ---TOO MUCH---EXIT\n         STH   2,REPMAX                NEW # AVAILABLE\n         LH    2,REPLNGTH              LENGTH TO MOVE\n         BCTR  2,0                     MACH\n         LTR   2,2\n         BM    4(14)                   ---NOTHING---EXIT\n         STC   2,REPMVC+1\nREPMVC   MVC   0(0,4),0(3)             MOVE\n         AH    4,REPLNGTH              + MOVE LENGTH\n         ST    4,REPTO                 =NEXT AVAIL TO ADDR\n         B     4(14)                   ---MOVED---EXIT\n*********************************\n         EJECT\n****************************************\n* SCAN FIELD FOR DELIMITER             *\n****************************************\nPRMSTART DC    A(CTLCARD)              WHERE TO START SCAN\nPRMHIT   DC    A(0)                    DELIMITER ADDRESS+1\nPRMCHAR  DC    A(0)                    THE DELIM CHARACTER\nPRMLNGTH DC    AL2(0)                  LENGTH OF HIT\nPRMCOUNT DC    AL2(71)                 # COLUMNS TO CHK-DECREMENTED\n*\nPRMSCAN  EQU   *\n         XC    PRMLNGTH,PRMLNGTH       CLEAR\n         L     3,PRMSTART\n         LH    5,PRMCOUNT              BYTES LEFT\n         LTR   5,5\n         BNP   0(14)                   ---NONE LEFT---EXIT\n         BCTR  5,0\n         STC   5,PRMTRT+1\n         LA    1,1(5,3)                PREDICT END\nPRMTRT   TRT   0(0,3),TRTTBL\n         MVC   PRMCHAR+3(1),0(1)       DELIMITER\n         LA    3,1(1)                  +1 AFTER DELIM\n         ST    3,PRMHIT                SAVE\n         S     1,PRMSTART              END-BEGIN=LENGTH\n         SR    5,1                     DECR # LEFT\n         STH   5,PRMCOUNT\n         STH   1,PRMLNGTH              LENGTH FROM START TO END\n         BM    0(14)                   ---PAST END---EXIT\n         LTR   1,1\n         BZ    4(14)                   ---ZERO LENGTH---EXIT\n         B     8(14)                   ---OK---EXIT\n*****************************************\n         EJECT\n***********************************************************************\nPARMSR14 DC    A(0)\nPARMADR  DC    A(0)\nPARMSIZ  DC    AL2(0)\n*                                                                     *\nPARMS    EQU   *\n         ST    14,PARMSR14\n         MVC   CTLCARD,CTLCARD-1       CLEAR\n         XC    TRTTBL,TRTTBL\n         MVI   TRTTBL+C':',C':'        USE ':' AS DEBLOCKER FOR PARM\n         MVC   PRMHIT,PARMADR\n         MVC   PRMCOUNT,PARMSIZ        WHAT LEFT TO DO\nPARMSLOP EQU   *\n         MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     PARMSDON                -DONE\n         B     PARMSLOP                -ZERO-JUST A DELIM\nPARMSREC EQU       *\n         MVC   PARMSIZ,PRMCOUNT        SAVE FOR RETURN BACK TO HERE\n         MVC   PARMADR,PRMHIT          DITTO\n         L     3,PRMSTART              BEGIN OF HIT\n         LH    2,PRMLNGTH              LENGTH OF HIT\n         BCTR  2,0\n         STC   2,PARMSMVC+1\nPARMSMVC MVC   CTLCARD+1,0(3)\n         MVI   CTLCARD,C'-'\n         L     14,PARMSR14\n         BR    14                      ---GOT A PARM---EXIT\n***********************************************************************\nPARMSDON EQU   *\n         CLC   PRMLNGTH,=AL2(0)\n         BNE   PARMSREC\n         MVI   PARMSAV,0\n         L     14,PARMSR14\n         B     4(14)                   ---DONE WITH PARM---EXIT\n***********************************************************************\n         EJECT\n*********************************************************\nCHKADR   DC    A(0)                    ARG TO COMPARE\nCHKTBL   DC    A(0)                    TABLE TO SEARCH AGAINST\nCHKLNGTH DC    AL2(0)                  LENGTH ARG\n*                                                                     *\nCHKTYPE  EQU   *\n         SR    5,5\n         L     3,CHKADR                ARG TO COMPARE\n         L     4,CHKTBL                TABLE\n         LH    2,CHKLNGTH              LENGTH\n         BCTR  2,0\n         STC   2,CHKCLC+1              LENGTH TO CHK\nCHKCLC   CLC   0(0,3),2(4)\n         BE    CHKHIT                  ---HIT----EXIT\n         LA    5,4(5)                  BUMP EXIT OFFSET\n         IC    2,1(4)                  +LENGTH\n         AR    4,2\n         LA    4,2(4)                  +2 CTL\n         IC    2,1(4)\n         LTR   2,2                     IS THIS END\n         BZ    0(14)                   ----END--NOHIT---EXIT\n         B     CHKCLC\n*\nCHKHIT   EQU   *\n         SR    1,1\n         IC    1,0(4)                  MIN LENGTH\n         BCTR  1,0\n         IC    2,CHKCLC+1\n         CR    2,1                     GT MININUM\n         BLR   14                      ---NOPE---NOT LONG ENOUGH\n         B     4(5,14)                 ---HIT---EXIT\n***********************************************************************\nSETTRT   EQU   *\n         XC    TRTTBL,TRTTBL\n         MVI   TRTTBL+C' ',C' '        BLANK\n         MVI   TRTTBL+C',',C','        COMMA\n         MVI   TRTTBL+C'.',C'.'        PERIOD\n         MVI   TRTTBL+C'(',C'('        LEFT PAREN\n         MVI   TRTTBL+C')',C')'        RIGHT PAREN\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nGETINR14 DC    A(0)\n*                                                                     *\nGETSYSIN EQU   *\n         ST    14,GETINR14\n         LA    4,SYSIN\n         TM    DCBOFLGS,X'10'          OPEN OK\n         BZ    SYSINEND                   NO\n         GET   SYSIN,CTLCARD\n         L     14,GETINR14\nCLICTRL  CLI   CTLCARD,C'-'\n         BNE   4(14)                   NO ''\n         B     8(14)                   ''\nSYSINEND EQU   *\n         MVI   EOF,X'FF'\n         L     14,GETINR14\n         BR    14\n***********************************************************************\nSETCTR14 DC    A(0)\n*\nSETCTL   EQU   *\n         ST    14,SETCTR14\n         BAL   14,SETTRT\n         MVC   PRMCOUNT,=AL2(70)       70+1 COLUMNS TO CHK\n         MVC   PRMSTART,=A(CTLCARD+1)  START IN CC2\n         MVC   PRMHIT,PRMSTART\n         L     14,SETCTR14\n         BR    14\n**********************************************************************\n         DC    C' '\nCARDNAME DC    CL8' '\nGETNMR14 DC    A(0)\n*\nGETNAME  EQU   *\n         ST    14,GETNMR14\n         MVC   CARDNAME,CARDNAME-1\nGETNAM2  MVC   PRMSTART,PRMHIT\n         BAL   14,PRMSCAN\n         B     GETNAM4                 DONE\n         B     GETNAM2                 ZERO L\n         LH    2,PRMLNGTH\n         CH    2,=H'8'\n         BH    GETNAM5                 TOO LONG\n         L     4,PRMSTART\n         BCTR  2,0\n         STC   2,GETNMVC+1\nGETNMVC  MVC   CARDNAME,0(4)\n         L     14,GETNMR14\n         B     8(14)                   ---A NAME ---EXIT\nGETNAM4  L     14,GETNMR14\n         BR    14                      ---DOEN---EXIT\nGETNAM5  L     14,GETNMR14\n         B     4(14)                   ---TOO LONG---EXIT\n**********************************************************************\n         EJECT\n**********************************************************************\nACRDSEQ  DC    A(0)\nAORGSEQ  DC    A(0)\nANEWSEQ  DC    A(0)\nACNEWSEQ DC    A(0)\n*\nSEQWOFF  DC    H'0'\nSEQWLNG  DC    H'0'\nSEQWINC  DC    H'0'\n*\nSEQOFSET DC    H'72'\nSEQLNGTH DC    H'7'\nSEQINCR  DC    H'10'\nSEQCTL   DS    X\n*\nSETSEQ   DS    0H\n         L     3,FINDADR\n         MVC   SEQWOFF(6),SEQOFSET     DEFAULTS\n         LA    4,SYSUT1\n         TM    DCBRECFM,X'40'          VARIABLE\n         BNO   SEQSET0                    NO\n         CLC   SEQOFSET(4),=AL2(72,7)  IS IT DEFAULT\n         BNE   SEQSET2                    NO\n         MVC   SEQWOFF(4),=AL2(0,7)    ASSUME AT BEGINNG\n         B     SEQSET2\nSEQSET0  EQU   *\n         CLC   LRECL,=AL2(80)          80 LRECL\n         BE    SEQSET2                    YES\nSEQSET1  EQU   *\n         CLC   SEQOFSET(4),=AL2(72,7)  IS IT DEFAULT\n         BNE   SEQSET2                   NO\n         MVC   SEQWOFF(4),=AL2(80,7)\nSEQSET2  EQU   *\n         LA    3,L'EDITCTL-4-4(3)\n         CLI   3(3),X'EE'              ME\n         BNE   SEQSET3                    NO\n         MVC   SEQCTL,7(3)             POST DIRECTORY CTL BYTE\n         NI    SEQCTL,X'7F'            CLEAR ALIAS BIT\n         CLI   SEQCTL,3                USER DATA LENGTH CHECK\n         BNE   SEQSET3                 WRONG LENGTH -- NOT ME\n         MVC   SEQWOFF+1(1),0(3)       OFFSET\n         MVC   SEQWLNG+1(1),1(3)       LENGTH\n         MVC   SEQWINC+1(1),2(3)       INCR\nSEQSET3  EQU   *\n         LH    1,SEQWINC\n         CVD   1,DOUBLE\n         ZAP   SEQINC,DOUBLE\n         CLI   USERON,X'FF'            DO WE USE OURS\n         BNE   SEQSET5                 NO\n         MVC   STOWUSER(1),SEQWOFF+1\n         MVC   STOWUSER+1(1),SEQWLNG+1\n         MVC   STOWUSER+2(1),SEQWINC+1\n         MVI   STOWUSER+3,X'EE'        MY TYPE\n         LH    4,STOWUSER+4            LEVEL\n         LA    4,1(4)\n         STH   4,STOWUSER+4\n         MVI   STOWCTL,X'03'           3 HALFS\n*\nSEQSET5  EQU   *\n         CLC   SEQWOFF,=AL2(80)        EXTRNAL\n         BL    SEQSET5B                   NO\n         MVC   SEQWOFF,=AL2(256)\nSEQSET5B EQU   *\n         LA    5,ORIGINAL\n         AH    5,SEQWOFF\n         ST    5,AORGSEQ               ADDR OF MEM SEQ #\n*\n         LA    5,CARDSEQ+7\n         SH    5,SEQWLNG\n         ST    5,ACRDSEQ\n*\n         LA    5,CSEQUENC+7\n         SH    5,SEQWLNG\n         ST    5,ACNEWSEQ\n*\n         LA    5,NEWSEQ+7\n         SH    5,SEQWLNG\n         ST    5,ANEWSEQ\n*\n         MVC   WRKRDMVC+1(1),SEQWLNG+1\n         MVC   WUT2MVC2+1(1),SEQWLNG+1\n         MVC   WUT2MVC+1(1),SEQWLNG+1\n         MVC   READMMVC+1(1),SEQWLNG+1\n         MVC   CARDSEQ,CARDSEQ-1\n         MVC   NEWSEQ,NEWSEQ-1\n         ZAP   INTSEQ,=P'0'\n         MVC   SCANEND,=A(ORIGINAL+71)\n         MVC   REPSIZE,=AL2(71)\n         MVI   REPCOPY+1,70            MOVE 70\n         MVI   SCANMAX+1,71\n         CLC   SEQWOFF,=AL2(80)        EXTERNAL\n         BLR   14                         NO\n         MVC   SCANEND,=A(ORIGINAL+80)\n         MVC   REPSIZE,=AL2(80)\n         MVI   REPCOPY+1,79            MOVE 80\n         MVI   SCANMAX+1,80\n         BR    14\n**********************************************************************\n         EJECT\n**********************************************************************\nBLDLR14  DC    A(0)\n*\nBLDL     EQU   *\n         ST    14,BLDLR14\n         MVC   FINDADR,=A(FINDMODL)\n         MVI   DIRNAME,X'FF'\nBLDLFIND EQU   *\n         BAL   14,FINDMEM\n         B     BLDLERR7                NOT FOUND\n         B     BLDLALIS                ALIAS\nBLDLFND  MVC   FINDUSER,DIRUSER\n         L     14,BLDLR14\n         B     4(14)                   ----- HIT ---EXIT\n***********************************************************************\nBLDLALIS EQU   *\n         CLI   FINDTYPE,X'80'          ALIAS OK\n         BE    BLDLFND                    YES\nBLDLERR7 BAL   14,CTLERR7              NOT FOUND/ALIAS\n         L     14,BLDLR14\n         BR    14                      ----ERROR---EXIT\n**********************************************************************\n         EJECT\n***********************************************************************\nFINDADR  DC    A(0)\nFINDMR14 DC    A(0)\nFINDWRK1 DC    CL8' '\nFINDWRK2 DC    CL8' '\n*                                                                     *\nFINDMEM  EQU   *\n         ST    14,FINDMR14\n         L     3,FINDADR\n         LH    2,0(3)                  LENGTH\n         BCTR  2,0\n         STC   2,FINDCLC1+1\n         STC   2,FINDCLC2+1\n         MVC   FINDWRK1,DIRNAME\n         NC    FINDWRK1,11(3)          MASK DIR\n         MVC   FINDWRK2,2(3)\n         NC    FINDWRK2,11(3)          MASK EDIT TBL\n         CLI   DIRNAME,X'FF'           DO WE RESET\n         BNE   FINDCLC1                   NO\n         BAL   14,OPENDIR              RESET TO BEGIN\n         B     FINDEND                 OPEN BAD\n         B     FINDMLOP\nFINDCLC1 CLC   FINDWRK1,FINDWRK2       ARE WE SITTING ON IT\n         BE    FINDALIS                   YES\nFINDMLOP BAL   14,READDIR              GET 1 DIRECTORY NAME\n         B     FINDEND                 END OF DIR\n         L     3,FINDADR\nFINDCLC0 CLI   10(3),0                 FOR ALL.ALL\n         BE    FINDALIS                   YES\n         MVC   FINDWRK1,DIRNAME\n         NC    FINDWRK1,11(3)          MASK DIR\nFINDCLC2 CLC   FINDWRK1,FINDWRK2       IS THIS IT\n         BH    FINDMXT                 NOT FOUND\n         BNE   FINDMLOP                KEEP LOOKING\nFINDALIS EQU   *\n         MVC   L'EDITCTL-4(4,3),DIRTTR\n         MVC   L'EDITCTL-4-4(4,3),DIRUSER\n         TM    DIRCTL,X'80'            AN ALIAS\n         BO    FINDAXT                    YES\n         L     14,FINDMR14\n         B     8(14)                   ---HIT---EXIT\n***********************************************************************\nFINDAXT  EQU   *\n         L     14,FINDMR14\n         B     4(14)                   ---ALIAS---EXIT\n***********************************************************************\nFINDEND  EQU   *\n         MVI   DIRNAME,X'FF'           FORCE RESET\n         L     3,FINDADR\n         MVI   L'EDITCTL-4+3(3),0\n         L     14,FINDMR14\n         BR    14                      ---EOF---EXIT\nFINDMXT  EQU   *\n         CLC   11(8,3),=8X'FF'         MASKED\n         BNE   FINDMLOP                   YES\n         MVI   L'EDITCTL-4+3(3),0\n         L     14,FINDMR14\n         BR    14                      ---NOT FOUND---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nRDDECB   DC    A(DIRDECB)\nRDDCB    DC    A(FINDDCB)\nRDBUFR   DC    A(DIRBLK)\nDIRADR   DC    A(DIRBLK+2)             UPDATED TO CURR DIR ENTRY\nREADDR14 DC    A(0)\n*                                                                     *\nREADDIR  EQU   *\n         ST    14,READDR14\n         CLC   DIRBYTES(4),=A(0)       ANY LEFT\n         BNE   READDIR3                   YES\nREADDIR2 EQU   *\n         LA    1,RDDECB\n         BAL   14,RREAD\n         AP    TOTBLOCK,=P'1'\n         LA    3,DIRBLK+2\n         ST    3,DIRADR                WHERE DIR DATA STARTS\n         L     4,DIRBYTES\n         SH    4,=AL2(2)\n         ST    4,DIRBYTES\nREADDIR3 EQU   *\n         L     3,DIRADR\n         MVC   DIRREC,0(3)             DEBLOCK THIS MEMBER\n         CLC   DIRNAME,=8X'FF'         IS THIS THE END\n         BE    READDEOF                   YES\n         SR    4,4\n         IC    4,DIRCTL                GET LENGHT OF USER\n         N     4,=XL4'1F'              TURN OFF NONLENGTH BITS\n         XC    DIRUSER,DIRUSER\n         LR    5,4\n         SLL   5,1\n         BCTR  5,0\n         LTR   5,5\n         BM    READDIR4\n         STC   5,READDMVC+1\nREADDMVC MVC   DIRUSER,12(3)\nREADDIR4 EQU   *\n         LA    4,12(4,4)               *2 HALF +12 ALWAYS\n         L     5,DIRBYTES              BYTES IN DIRBLK\n         SR    5,4                     SUBTRACT WHAT WE TOOK\n         ST    5,DIRBYTES              AND THIS MANY LEFT\n         LA    3,0(3,4)                NEXT DEBLOCK ADDRESS\n         ST    3,DIRADR\n         L     14,READDR14\n         B     4(14)                   ---GOT A REC---EXIT\n***********************************************************************\nREADDEOF EQU   *\n         L     14,READDR14\n         CLI   TOTSCAN,0\n         BER   14                      ---EOF---EXIT\n         ZAP   TOTUSED,TOTBLOCK\nREADDALL LA    1,RDDECB\n         BAL   14,RREAD\n         AP    TOTBLOCK,=P'1'\n         B     READDALL\n***********************************************************************\nFINDEOF  EQU   *\n         MVI   TOTSCAN,0\n         CLOSE (FINDDCB),TYPE=T\n         B     READDEOF\n         EJECT\n******************************************************************\nOPENDR14 DC    A(0)\n*                                                                     *\nOPENDIR  EQU   *\n         ST    14,OPENDR14\n         XC    DIRBYTES(4),DIRBYTES\n         ZAP   TOTBLOCK,=P'0'\n         LA    4,FINDDCB\n         TM    DCBOFLGS,X'10'          OPEN YET\n         BO    OPENDPNT                   YES\n         OPEN  (FINDDCB)\n         TM    DCBOFLGS,X'10'          OPEN OK\n         BO    OPENDPNT                YES\n         L     14,OPENDR14\n         BR    14                       ----ERROR---EXIT\nOPENDPNT EQU   *\n         POINT FINDDCB,POINTTR         POINT TO BEGINNING\n         L     14,OPENDR14\n         B     4(14)                    -----EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nMEMDECB  DC    A(UT1DECB)\nMEMDCB   DC    A(SYSUT1)\nMEMBUFR  DC    A(0)\nMEMBLK   DC    A(0)\nMEMBYTE  DC    A(0)\nREADMR14 DC    A(0)\n*                                                                     *\nREADMEM  EQU   *\n         ST    14,READMR14\nREADMEM1 EQU   *\n         CLC   MEMBYTE,MEMBLK          READ ALL YET\n         BL    READMEM2                   NO\n         MVC   MEMBUFR,BUFPOOL\n         LA    1,MEMDECB\n         BAL   14,RREAD\n         LA    4,SYSUT1\n         LH    0,DCBBLKSI              LENGTH SUPPOSED TO BE\n         L     1,DCBIOBA               IOB ADDRESS\n         SH    0,22(1)                 MINUS RESIDUAL\n         ST    0,MEMBLK\n         XC    MEMBYTE,MEMBYTE\n         TM    DCBRECFM,X'40'          VARIABLE\n         BZ    READMEM2                   NO\n         MVI   MEMBYTE+3,4             +4 BDW\nREADMEM2 EQU   *\n         L     3,MEMBYTE               # BYTES READ\n         L     4,MEMBUFR               START OF BUFR\n         LA    4,0(3,4)                WHERE WE ARE\n         ST    4,RECADR                SAVE FOR UPDATE\n         TM    (SYSUT1+(DCBRECFM-IHADCB)),X'40' VARIABLE\n         BZ    READMEM6                   NO\n         LH    5,0(4)                  RDW\n         SH    5,=AL2(4)\n         STH   5,LRECL\n         LA    4,4(4)\n         LA    3,4(3)\n         ST    4,RECADR\n         MVC   ORIGINAL(256),ORIGINAL-1\nREADMEM6 EQU   *\n         LH    5,LRECL\n         BCTR  5,0\n         STC   5,READVMVC+1\n         STC   5,WRITMEMM+1\nREADVMVC MVC   ORIGINAL,0(4)           DEBLOCK\n         AP    INTSEQ,SEQINC\n         OI    INTSEQ+5,X'0F'\n         UNPK  ORIGSEQ,INTSEQ          MY SEQ #\n         L     4,ACRDSEQ               S WHERE CARD # IS\n         L     5,AORGSEQ\nREADMMVC MVC   0(0,4),0(5)             MOVE SEQUENC IN\n         PACK  SEQWRK(5),CARDSEQ(9)\n         AH    3,LRECL                 +LRECL\n         ST    3,MEMBYTE\nREADMEM3 EQU   *\n         CLC   SEQWRK,FIRSTNUM         CAN WE START\n         BL    READMEM1                   NO\n         CLC   SEQWRK,LASTNUM          DO WE ENDDITT\n         L     14,READMR14\n         BNH   4(14)                   ---RECORD ---EXIT\n         CLI   EDITON,0\n         BE    READMEOF\n         MVC   MEMBYTE,MEMBLK\n         BAL   14,WRITEMEM\n         B     READMEOF\n***********************************************************************\nREADMEOF EQU   *\n         MVC   MEMBYTE,MEMBLK\n         L     14,READMR14\n         BR    14                      ---EOF---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nWRITMR14 DC    A(0)\n*                                                                     *\nWRITEMEM EQU   *\n         ST    14,WRITMR14\n         CLI   SCANON,X'FF'            SCAN ONLY\n         BER   14                         YES\n         CLI   FIRSTERR,X'FF'          DID WE ALREADY DO 1ST ERROR\n         BER   14                         YES\n         CLI   ERROR,X'00'             WAS THERE AN ERROR\n         BE    WRITMEM2                   NO\n         MVI   FIRSTERR,X'FF'          1ST ERROR PROCESSED\n         B     WRITMEM4                UPDATE UP TILL NOW\n***********************************************************************\nWRITMEM2 EQU   *\n         CLI   CHANGE,0                ANY CHANGES\n         BE    WRITMEM3                   NO\n         BAL   14,BACKUP               SAVE COPY OF OLD\n         MVI   WRITEON,X'FF'           A CHANGE HAS OCCURRED IN BUFR\n         L     3,RECADR                WHERE REC IS IN BUFR\nWRITMEMM MVC   0(0,3),ORIGINAL         REPLACE\nWRITMEM3 EQU   *\n         CLC   MEMBYTE,MEMBLK          DONE WITH BUFFER\n         BNE   WRITMEMX                    NO\nWRITMEM4 EQU   *\n         CLI   WRITEON,X'FF'           DID ANY CHANGES OCCUR\n         BNE   WRITMEMX                   NO\n         MVC   MEMBUFR,BUFPOOL\n         LA    1,MEMDECB\n         BAL   14,WWRITE\n         MVI   WRITEON,0               BACK TO NOTHING\nWRITMEMX EQU   *\n         L     14,WRITMR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nBKDECB   DC    A(WRKDECB2)\nBKDCB    DC    A(SYSWRK)\nBKBUFR   DC    A(0)\nBACKR14  DC    A(0)\n*                                                                     *\nBACKUP   EQU   *\n         CLI   WRITEON,X'FF'           CHNAGE ALREADY BACKED\n         BER   14                         YES\n         CLI   WRKON,X'FF'             IS THERE A BACKUP\n         BNER  14                         NO\n         ST    14,BACKR14\n         NOTE  SYSUT1                  -NOTE TTR\n         L     3,BUFPOOLA\n         ST    1,0(3)                  SAVE TTR IN FRONT OF BUFR\n         MVC   BKBUFR,BUFPOOLA\n         LA    1,BKDECB\n         BAL   14,WWRITE               WRITE TTR-ORIG DATA\n         MVI   BKUPON,X'FF'            INDICATE A BKUP EXISTS\n         L     1,WRKNUM\n         LA    1,1(1)\n         ST    1,WRKNUM                # BLKS WRITTEN\n         L     14,BACKR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nRSTDECB  DC    A(WRKDECB1)\nRSTDCB   DC    A(SYSWRK)\nBUFWRK   DC    A(0)\nWRKNUM   DC    A(0)\nPOINTTR  DC    X'00000100'             POINT TO BEGIN\nRESTOR14 DC    A(0)\n*                                                                     *\nRESTORE  EQU   *\n         CLI   WRKON,X'FF'             IS THERE A DD\n         BNER  14                         NO\n         CLI   BKUPON,X'FF'            WAS THERE A BCKP REC\n         BNER  14                          NO\n         ST    14,RESTOR14\n         CLI   ERROR,X'FF'             WAS THERE AN ERROR\n         BNE   RESTEOF                    NO\n         POINT SYSWRK,POINTTR          BACK TO BEGIN\n         L     4,WRKNUM\n***********************************************************************\nRESTLOOP EQU   *\n         ST    4,WRKNUM\n         LA    1,RSTDECB\n         BAL   14,RREAD\n         L     3,BUFWRK\n         MVC   BKUPTTR,0(3)            THE TTR\n***********************************************************************\n         LA    1,BKUPTTR\n         BAL   14,FINDUT1              POSTION TO RIGHT SPOT\n         MVC   MEMBUFR,BUFPOOL\n         LA    1,MEMDECB\n         BAL   14,RREAD                THE CHANGED DATA\n***********************************************************************\n         LA    2,UT1DECB\n         L     3,BUFWRK\n         LA    3,4(3)                  BUMP PAST TTR\n         ST    3,MEMBUFR\n         LA    1,MEMDECB\n         BAL   14,WWRITE               RESTORE TO OROGINAL\n         L     4,WRKNUM\n         BCT   4,RESTLOOP\n***********************************************************************\nRESTEOF  EQU   *\n         XC    WRKNUM,WRKNUM\n         POINT SYSWRK,POINTTR          BACK TO BEGIN AGAIN\n         MVI   BKUPON,0\n         L     14,RESTOR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nWRKBUF   DC    A(0)\nWRKADR   DC    A(0)\nWRKFROM  DC    A(0)\nWRKBYTES DC    A(0)\nWRKSAVE  DC    A(0)\nWRKSIZE  DC    A(100*80)                GOOD FOR 100 CARDS\n*                                                                     *\nWRKWRITE EQU   *\n         L     3,WRKBYTES\n         C     3,WRKSIZE\n         BER   14                      STORAGE OVERFLOW\n         L     4,WRKBUF\n         LA    4,0(3,4)\n         L     5,WRKFROM\n         MVC   0(80,4),0(5)            SAVE\n         LA    3,80(3)\n         ST    3,WRKBYTES\n         ST    3,WRKSAVE\n         B     4(14)\n***********************************************************************\nWRKREAD  EQU   *\n         L     4,WRKBYTES\n         C     4,=A(0)\n         BE    WRKREOF                    DONE\n         L     3,WRKADR\n         MVC   ORIGINAL,0(3)\n         LA    3,80(3)\n         ST    3,WRKADR\n         SH    4,=AL2(80)\n         ST    4,WRKBYTES\n         L     4,ACRDSEQ\n         L     5,AORGSEQ\nWRKRDMVC MVC   0(0,4),0(5)\n         PACK  SEQWRK(5),CARDSEQ(9)\n         B     4(14)\n***********************************************************************\nWRKREOF  EQU   *\n         MVC   WRKADR,WRKBUF           BACK TO BEGIN\n         MVC   WRKBYTES,WRKSAVE        BYTES WE HAVE\n         BR    14\n***********************************************************************\nWRKMR14  DC    A(0)\n*                                                                     *\nWRKMAIN  EQU   *\n         MVC   WRKADR,WRKBUF\n         XC    WRKBYTES,WRKBYTES\n         CLC   WRKBUF,=A(0)            BUFFER GOTTEN\n         BNER  14                        YES\n         ST    14,WRKMR14\n         L     0,WRKSIZE\n         GETMAIN R,LV=(0)\n         ST    1,WRKBUF\n         ST    1,WRKADR\n         L     14,WRKMR14\n         BR    14\n***********************************************************************\nPSEQUENC DC    PL6'0'\n         DC    C' '\nNEWSEQ   DC    CL8' '\nCSEQUENC DC    CL8'00000000'\n         DC    C' '\nSEQINC   DC    PL6'10'\nINTSEQ   DC    PL6'0'\n*\nWUT2DECB DC    A(UT2DECB)\nWUT2DCB  DC    A(SYSUT2)\nWUT2BUFR DC    A(0)                    START BUFFR\nWUT2BLK  DC    A(0)                    BLKSIZE\nWUT2BYTE DC    A(0)                    # BYTES STORED\nWUT2R14  DC    A(0)\nWUT2FROM DC    A(0)                    FROM WHERE\n*\nWUT2NEW  EQU   *\n         LA    5,CTLCARD\n         B     WUT2\nWUT2OLD  EQU   *\n         LA    5,ORIGINAL\nWUT2     EQU   *\n         ST    5,WUT2FROM\n         AP    PSEQUENC,SEQINC\n         UNPK  CSEQUENC,PSEQUENC\n         OI    CSEQUENC+7,X'F0'\n         AH    5,SEQWOFF               + OFFSET\n         L     4,ACNEWSEQ\nWUT2MVC  MVC   0(0,5),0(4)             NEW SEQ\n         L     5,ANEWSEQ\nWUT2MVC2 MVC   0(0,5),0(4)             NEW   SEQ\n         ST    14,WUT2R14\n         CLC   WUT2BYTE,WUT2BLK        BLK FULL\n         BL    WUT2C                      NO\n         LA    1,WUT2DECB\n         BAL   14,WWRITE\n         XC    WUT2BYTE,WUT2BYTE\nWUT2C    EQU   *\n         L     3,WUT2BYTE              # BYTES OUT THERE\n         L     4,WUT2BUFR              START\n         LA    4,0(3,4)                WHERE NEXT 1 GPES\n         L     5,WUT2FROM\n         MVC   0(80,4),0(5)            BLK IT UP\n         LA    3,80(3)                 + 80 MORE\n         ST    3,WUT2BYTE\n         L     14,WUT2R14\n         BR    14\n**********************************************************************\n         EJECT\n**********************************************************************\n         USING  RWDSECT,5\nRREADR14 DC    A(0)\nRREAD    EQU   *\n         ST    14,RREADR14\n         LR    5,1\n         LM    2,4,RWDECB\n         READ  (2),SF,(3),(4),MF=E\n         CHECK (2)\n         L     14,RREADR14\n         BR    14\n**********************************************************************\nWWRITR14 DC    A(0)\n*\nWWRITE   EQU   *\n         ST    14,WWRITR14\n         LR    5,1\n         LM    2,4,RWDECB\n         WRITE (2),SF,(3),(4),MF=E\n         CHECK (2)\n         L     14,WWRITR14\n         BR    14\n**********************************************************************\n         EJECT\nSTOWLIST DS    0F\nSTOWNAME DC    CL8' '\nSTOWTTR  DC    XL3'00'                 FILLED IN BY SYST\nSTOWCTL  DC    X'00'\nSTOWUSER DC    XL62'00'\n*\nSTOWMAX  DC    H'0'\n*\nSTOWOLD  DC    CL8' '\nSTOWNEW  DC    CL8' '\nSTOWR14  DC    A(0)\n*\nSTOW     EQU   *\n         ST    14,STOWR14\n         NI    STOWCTL,X'7F'           NOT ALIAS\n         MVI   STOWMAX+1,9\nSTOW2    EQU   *\n         STOW  SYSUT2,STOWLIST,R\nSTOWCC   EQU   *\n         CVD   15,DOUBLE\n         UNPK  STOWCODE(3),DOUBLE\n         UNPK  STOWCODE(2),DOUBLE\n         OI    STOWCODE+1,X'F0'\n         CH    15,STOWMAX\n         BL    STOWOK\n         LA    1,STOWMSG1\n         BAL   14,PRINTERR\nSTOWOK   EQU   *\n         L     14,STOWR14\n         BR    14\n*********************************************************************\nSTOWR    EQU   *                       RENAME\n         ST    14,STOWR14\n         MVI   STOWMAX+1,1\n         STOW  SYSUT1,STOWOLD,C\n         B     STOWCC\nSTOWS    EQU   *                       SCRATCH\n         ST    14,STOWR14\n         MVI   STOWMAX+1,1\n         STOW  SYSUT1,STOWNEW,D\n         B     STOWCC\n*********************************************************************\nSTOWA    EQU   *                       ALIAS\n         ST    14,STOWR14\n         OI    STOWCTL,X'80'\n         MVI   STOWMAX+1,1\n         STOW  SYSUT1,STOWLIST,A\n         B     STOWCC\nSTOWC    EQU   *                       DONT ALLOW DUPLICATE\n         ST    14,STOWR14\n         MVI   STOWMAX+1,1\n         NI    STOWCTL,X'7F'           NO ALIAS\n         STOW  SYSUT2,STOWLIST,A\n         B     STOWCC\n**********************************************************************\n         EJECT\n***********************************************************************\nEDWRK    DC    PL5'0'\nEDPATRN  DC    X'40202020202120202020'\nEDSEQ    DC    CL10' '\nPRINTADR DC    A(0)\nMSGADR   DC    A(0)\nPRINTS1 DC    A(PRINTIT)\nPRINTS2  DC    A(PRINTMSG)\nPRINTR14 DC    A(0)\n*                                                                     *\nPRNTCTL0 EQU   *\n         MVI   PRINTASA,C'0'\nPRINTCTL EQU   *\n         LA    1,MSG1                  CONTROL\n         B     PRNTCARD\nPRINTINS EQU   *\n         LA    1,INSMSG\n         MVC   INSLNAME(8),STOWNAME\n         B     PRINTUP\nPRINTFLS EQU   *\n         LA    1,FLUSHMSG\n         B     PRINTUP2\nPRINTCOP EQU   *\n         LA    1,COPYMSG\n         MVC   COPYNAME(8),FINDNAME\n         B     PRINTDAT\nPRINTDEL EQU   *\n         LA    1,DELMSG\n         B     PRINTDAT\nPRINTUP  EQU   *\n         PACK  EDWRK,NEWSEQ            NEW SEQ #\n         MVC   EDSEQ,EDPATRN\n         ED    EDSEQ,EDWRK\n         MVC   PRINTSEQ,EDSEQ+2\nPRINTUP2 EQU   *\n         MVC   PRINTADR,=A(CTLCARD)\n         MVC   PRINTS1,=A(PRINTIT+OFFSET)\n         MVC   PRINTS2,=A(PRINTMSG+OFFSET)\n         B     PRINT\nPRINTADD EQU   *\n         LA    1,ADDMSG1\n         MVC   ADDNAME(8),STOWNAME\n         B     PRINTUP\nPRNTCARD EQU   *\n         MVC   PRINTADR,=A(CTLCARD)\n         MVC   PRINTS1,=A(PRINTIT)     WHERE TO PRINT DATA\n         MVC   PRINTS2,=A(PRINTMSG)    WHERE TO PRINT MSG\n         B     PRINT\nPRINTORG EQU   *\n         LA    1,ORIGMSG\n         B     PRINTDAT\nPRINTREP EQU   *\n         LA    1,REPMSG\n         MVC   PRINTIT(8),ORIGNAM      NAME IN FRONT OF LIST\n         B     PRINTDT2\nPRINTDAT EQU   *\n         LR    3,1\n         TRT   CARDSEQ,TRTNUM\n         LR    1,3                     RESTORE THE DESTROYED\n         BNZ   PRINTDT2                IT NOT NUMBER\n         OI    CARDSEQ+7,X'F0'\n         PACK  EDWRK,CARDSEQ           ORIG SEQ #\n         MVC   EDSEQ,EDPATRN\n         ED    EDSEQ,EDWRK\n         MVC   PRINTSEQ,EDSEQ+2\nPRINTDT2 EQU   *\n         MVC   PRINTS1,=A(PRINTIT+OFFSET)\n         MVC   PRINTS2,=A(PRINTMSG+OFFSET)\n         MVC   PRINTADR,=A(ORIGINAL)\n         B     PRINT\nPRINTMEM EQU   *\n         CLI   LISTON,X'FF'            DO WE WANT TO LIST\n         BNE   4(14)                   NO LISTING\n         L     1,FINDADR\n         LA    4,PRINTMSG+OFFSET\n         MVC   0(8,4),2(1)             NAME\n         MVC   PRNTMEM,2(1)\n         CLI   ASIS,X'0F'              ANY OVERRIDE\n         BL    PRINTDAT                   NO\n         L     3,=A(ORIGINAL)\n         BE    PRINTAS\n         LA    3,1(3)\nPRINTAS  EQU   *\n         CLI   PRTALL,0                FORGET HEADINGS\n         BE    PRINTALL                   NO\n**************************************************************\n         ST    14,PRINTR14\n         MVC   PRINTASA(133),ORIGINAL\n         PUT   SYSPRINT,PRINTASA\n         MVC   PRINTASA(132),PRINTASA-1\n         L     14,PRINTR14\n         BR    14\n**************************************************************\nPRINTLIN EQU   *\n         ST    14,PRINTR14\n         B     PRINTPUT\nPRINTERR EQU   *\n         MVI   CTLERROR,X'FF'\n         MVI   RETURNRC+3,8\nPRNTSTAT EQU   *\n         ST    14,PRINTR14\n         MVC   PRINTS2,=A(PRINTMSG-50)\n***********************************************************************\n         B     PRINTMES\nPRINTALL EQU   *\n         ST    14,PRINTR14\n         MVC   PRINTIT(132),0(3)\n         B     PRINTPUT\nPRINT    EQU   *\n         ST    14,PRINTR14\n         L     3,PRINTADR\n         L     4,PRINTS1               WHERE TO PRINT DATA\n         MVC   0(L'PRINTIT,4),0(3)\nPRINTMES EQU   *\n         ST    1,MSGADR                MSG ADDR\n         L     3,MSGADR\n         LH    2,0(3)\n         BCTR  2,0                     LENGTH OF MSG\n         STC   2,PRINTMVC+1\n         L     4,PRINTS2               WHERE TO PRINT MSGS\nPRINTMVC MVC   0(0,4),2(3)             THE MESSAGE\nPRINTPUT BAL   14,SYSOUT\n         MVC   PRINTASA(132),PRINTASA-1\n         L     14,PRINTR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nPAGE     DC    PL3'0'\nLINES    DC    PL4'99'\nMAXLINES DC    PL4'60'\nFILL     EQU   C'-'\n*                                                                     *\nSYSOR14  DC    A(0)\n*                                                                     *\nSYSOUT   EQU   *\n         ST    14,SYSOR14\n         CP    LINES,MAXLINES          IS THE PAGE FULL\n         BL    SYSOUT2                    NO\n         MVI   PRINTWRK,C'1'           NEW PAGE\n         MVI   PRINTWRK+1,FILL\n         MVC   PRINTWRK+2(L'PRINTWRK-2),PRINTWRK+1\n         PUT   SYSPRINT,PRINTWRK       BOX1\n         ZAP   LINES,=P'4'\n         AP    PAGE,=P'1'\n         MVC   PRNTPAGE,=XL6'402020202120'\n         ED    PRNTPAGE,PAGE\n         PUT   SYSPRINT,PRNTHDNG       HEADING\n         LA    4,SYSUT2\n         TM    DCBOFLGS,X'10'          OPEN\n         BZ    SYSOUT1                    NO\n         PUT   SYSPRINT,PRNTHNG2       SYSUT2\n         AP    LINES,=P'1'\nSYSOUT1  EQU   *\n         MVI   PRINTWRK,C' '\n         PUT   SYSPRINT,PRINTWRK       BOX2\n         MVI   PRINTASA,C'0'\nSYSOUT2  EQU   *\n         PUT   SYSPRINT,PRINTASA\n         AP    LINES,=P'1'             +1 TO LINE COUNT\n         CLI   PRINTASA,C'0'\n         BNE   SYSOUTXT\n         AP    LINES,=P'1'\nSYSOUTXT EQU   *\n         L     14,SYSOR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nEXLSTUT2 DC    0F'0',X'05',AL3(DCBEXIT)\nEXLSTUT1 DC    0F'0',X'87',AL3(JFCBAREA)\nEXLSTPRT DC    0F'0',X'85',AL3(DCBEXIT)\n*\nJFCBAREA DC    CL176' '\n         ORG   JFCBAREA\n         IEFJFCBN\n         ORG\n*                                                                     *\nDCBEXIT  EQU   *\n         USING *,15\n         DROP  4\n         USING IHADCB,1\nDCBEXIT2 OC    DCBBLKSI,DCBBLKSI       IS BLKSIZE ZERO\n         BNZR  14                         NO\n         MVC   DCBBLKSI,DCBLRECL       MAKE BLK=LRECL\n         BR    14\n         DROP  1,15\n         USING IHADCB,4\n***********************************************************************\n         EJECT\n***********************************************************************\nOPENR14  DC    A(0)\n*                                                                     *\nOPENUT1  EQU   *\n         ST    14,OPENR14\n         MVC   ORIGINAL(256),ORIGINAL-1\n         LA    4,SYSUT1\n         TM    DCBOFLGS,X'10'          OPEN YET\n         BZ    OPENUT1F                  NO-DO IT\n         CLC   UT1TYPE,UT1OPTN         SAME\n         BER   14                         YES\n         CLI   UT1OPTN,4               ALREADY UPDAT\n         BER   14                         YES\n         BAL  14,CLOSEUT1              CLOSE OLD FIRST\nOPENUT1F EQU   *\n         LA    4,SYSUT1\n         MVC   DCBDDNAM,UT1NAME\n         LA    4,FINDDCB\n         MVC   DCBDDNAM,UT1NAME\n         MVC   UT1OPTN,UT1TYPE\n         RDJFCB (SYSUT1)\n         MVC   PRNTDSN,JFCBDSNM        -DSN\n         MVC   PRNTVOL,JFCBVOLS        -VOLSER\n         MVC   PRNTDD1,UT1NAME\n         OPEN  (SYSUT1,,FINDDCB)\nUT1OPTN  EQU   *-10\n***********************************************************************\n         LA    4,SYSUT1\n         TM    DCBOFLGS,X'10'          OPEN OK\n         BZ    OPEN1ER                    NO\n         LH    0,DCBBLKSI              BLKSIZE\n         AH    0,=AL2(4)               +4 FOR TTR\n         GETMAIN R,LV=(0)              GET A BUFFER\n         ST    1,BUFPOOLA\n         LA    1,4(1)\n         ST    1,BUFPOOL\n***********************************************************************\n         SR    3,3\n         LH    3,DCBLRECL              LRECL\n         CVD   3,DOUBLE\n         UNPK  PRNTLREC,DOUBLE+4(4)\n         OI    PRNTLREC+2,X'F0'\n         LH    3,DCBBLKSI              BLKSIZE\n         CVD   3,DOUBLE\n         UNPK  PRNTBLK,DOUBLE+4(4)\n         OI    PRNTBLK+4,X'F0'\n         MVC   LRECL,=AL2(80)          DEFAULT TO 80\n         OC    DCBLRECL,DCBLRECL\n         BZ    OPENUT1B\n         MVC   LRECL,DCBLRECL          NOT 0 USE DCB LRECL\nOPENUT1B EQU   *\n         LH    0,DCBBLKSI              SYSUT1 BLKSIZE\n         AH    0,=AL2(4)               +4 FOR TTR\n         LA    4,SYSWRK\n         STH   0,DCBBLKSI              STORE IN SYSWRK\n         BAL   14,OPENTIM\n         CLI   DIRECTON,0              DIRECTORY WANTED\n         BE    OPENUT1X                   NO\n         BAL   14,DIRLIST\nOPENUT1X EQU   *\n         L     14,OPENR14\n         BR    14\nOPEN1ER  EQU   *\n         LA    1,UT1ERR1\n         MVC   UT1ERDD(8),UT1NAME\n         BAL   14,PRINTERR\n         B     OPENUT1X\n***********************************************************************\nOPEN2R14 DC    A(0)\nOPENUT2  EQU   *\n         ST    14,OPEN2R14\n         LA    4,SYSUT2\n         TM    DCBOFLGS,X'10'          OPEN\n         BOR   14                        YES\n         ZAP   LINES,MAXLINES\n         RDJFCB (SYSUT2)\n         MVC   PRNTDSN2,JFCBDSNM       -DSN\n         MVC   PRNTVOL2,JFCBVOLS       -VOLSER\n         MVC   PRNTDD2,UT2NAME\n         OPEN  (SYSUT2,(OUTPUT))\n         LA    4,SYSUT2\n         TM    DCBOFLGS,X'10'\n         BZ    OPEN2ERA\n         TM    DCBRECFM,X'40'          VARIABLE\n         BO    OPEN2ERB                   YES\n*********************************************************************\n         LH    0,DCBBLKSI              BLKSIZE\n         ST    0,WUT2BLK\n         GETMAIN R,LV=(0)\n         ST    1,WUT2BUFR\n         SR    3,3\n         LH    3,DCBLRECL              -LRECL\n         CVD   3,DOUBLE\n         UNPK  PRNTLRC2,DOUBLE+4(4)\n         OI    PRNTLRC2+2,X'F0'\n         LH    3,DCBBLKSI              -BLKSIZE\n         CVD   3,DOUBLE\n         UNPK  PRNTBLK2,DOUBLE+4(4)\n         OI    PRNTBLK2+4,X'F0'\n         ST    3,WUT2BLK\nOPENUT2X EQU   *\n         L     14,OPEN2R14\n         BR    14\n*********************************************************************\nOPEN2ERA EQU   *\n         LA    1,UT1ERR1\n         MVC   UT1ERDD(8),UT2NAME\n         BAL   14,PRINTERR\n         B     OPENUT2X\nOPEN2ERB EQU   *\n         LA    1,UT2ERR2\n         BAL   14,PRINTERR\n         B     OPENUT2X\n         EJECT\n***********************************************************************\nOPENTR14 DC    A(0)\n*                                                                     *\nOPENTIM  EQU   *\n         ST    14,OPENTR14\n         TIME  DEC\n         ST    1,FULL\n         UNPK  YYDDD,FULL              YYDDD\n         OI    YYDDD+4,X'F0'\n         MVC   PRNTYY,YEAR\n         MVC   PRNTDDD,DAY\n         ST    0,FULL                  HHMMSSTH\n         UNPK  HHMMSS,FULL\n         MVC   PRNTHH,HOURS\n         MVC   PRNTMM,MINUTES\n         MVC   PRNTSS,SECONDS\n         L     14,OPENTR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nOPENWR14 DC    A(0)\n*                                                                     *\nOPENWRK  EQU   *\n         ST    14,OPENWR14\nOPENWNOP NOPR  14                      BR IF OPEN FAIL\n         LA    1,WRKPARM\n         L     15,=V(DDFIND)\n         BALR  14,15\n         B     *+4(15)           CHECK RETURN CODE\n         B     *+8                00 - SYSWRK PRESENT\n         B     OPENWSET           04 - SYSWRK ABSENT - SKIP OPEN\n         OPEN  (SYSWRK,(OUTIN))\nOPENWSET EQU   *\n         OI    OPENWNOP+1,X'F0'\n         LA    4,SYSWRK\n         TM    DCBOFLGS,X'10'          OPEN SUCCESSFUL\n         BZ    OPENWRKX                   NO\n         MVI   WRKON,X'FF'             WE HAVE A FILE\n         NI    OPENWNOP+1,X'0F'\n         LH    0,DCBBLKSI\n         GETMAIN R,LV=(0)              GET A BUFFER\n         ST    1,BUFWRK\nOPENWRKX EQU   *\n         L     14,OPENWR14\n         BR    14\n***********************************************************************\nWRKPARM  DS    0F\nWRKDD    DC    A(SYSWRK+(DCBDDNAM-IHADCB))\nWRKUCB   DC    A(WORKTIOT)\nWRKERR   DC    A(OPENWSET)\n*\nWORKTIOT DC    A(0)\n**********************************************************************\n         EJECT\n***********************************************************************\nCLOSER14 DC    A(0)\n*                                                                     *\nCLOSEUT1 EQU   *\n         ST    14,CLOSER14\n         LA    4,SYSUT1\n         TM    DCBOFLGS,X'10'          DID WE OPEN YET\n         BZR   14                         NO\n         LH    0,DCBBLKSI\n         L     1,BUFPOOLA\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD BUFFER\nCLOSUT1B EQU   *\n         CLOSE (SYSUT1,,FINDDCB)\n         BAL   14,CLOSEWRK\n         L     14,CLOSER14\n         BR    14\n***********************************************************************\nCLOSEUT2 EQU   *\n         ST    14,CLOSER14\n         LA    4,SYSUT2\n         TM    DCBOFLGS,X'10'          CLOSED\n         BZR   14                         YES\n         LH    0,DCBBLKSI\n         L     1,WUT2BUFR\n         FREEMAIN                      R,LV=(0),A=(1)\n         CLOSE (SYSUT2)\n         L     14,CLOSER14\n         BR    14\n**********************************************************\n         EJECT\n***********************************************************************\nCLOSWR14 DC    A(0)\n*                                                                     *\nCLOSEWRK EQU   *\n         ST    14,CLOSWR14\n         LA    4,SYSWRK\n         TM    DCBOFLGS,X'10'          DID WE OPEN\n         BZR   14                         NO\n         LH    0,DCBBLKSI\n         L     1,BUFWRK\n         FREEMAIN R,LV=(0),A=(1)\nCLOSUT1C EQU   *\n         CLOSE (SYSWRK)\n         L     14,CLOSWR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nOPENPR14 DC    A(0)\n*                                                                     *\nOPENPNCH EQU   *\nOPENPNOP NOPR  14\n         ST    14,OPENPR14\n         LA    4,SYSPUNCH\n         TM    DCBOFLGS,X'10'          OPEN YET\n         BO    OPENP8                     YES\n         OPEN  (SYSPUNCH,(OUTPUT))\n         TM    DCBOFLGS,X'10'          OPEN OK\n         BO    OPENP8                     YES\n         OI    OPENPNOP+1,X'F0'        ENABLE BR 14\n         L     14,OPENPR14\n         BR    14\n***********************************************************************\nOPENP8   EQU   *\n         L     14,OPENPR14\n         B     4(14)                   ---OPEN OK---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nPNCHR14  DC    A(0)\n*                                                                     *\nPNCHMEM  EQU   *\n         CLI   PUNCHON,X'FF'           DO WE PUNCH\n         BNE   4(14)                      NO\n         ST    14,PNCHR14\n         PUT   SYSPUNCH,ORIGINAL\n         L     14,PNCHR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nPARMSAV  DC    X'FF'\nCTLSAV   DC    X'00'\nERRCTL   DS    0XL3\nERROR    DC    X'00'\nPRMERROR DC    X'00'\nCTLERROR DC    X'00'\nCHANGE   DC    X'00'\nEOF      DC    X'00'\nUPDATA   DC    X'00'\nSTOWON   DC    X'00'\nPRINTED  DC    X'00'\nALLCHK   DC    X'00'\nSORT     DC    X'00'\nONCTL    DS    0CL8\nLISTON   DC    X'00'\nSEARCHON DC    X'00'\nPUNCHON  DC    X'00'\nANDON    DC    X'00'\nSCANON   DC    X'00'\nFILLON   DC    X'00'\nEDITON   DC    X'00'\nREPON    DC    X'00'\n*\nANDFIND  DC    X'00'\nBKUPON   DC    X'00'\nWRKON    DC    X'00'\nOFFSET   EQU   10\nSCANPARM DC    X'00'\nWRITEON  DC    X'00'\nFIRSTERR DC    X'00'\nOPTNSAV  DC    X'00'\nOPTNWRK  DC    X'00'\nEJECTON  DC    X'00'\nDIRECTON DC    X'00'\nGLISTON  DC    X'00'\nMASKON   DC    X'00'\nUSERON   DC    X'00'\nASIS     DC    X'00'\nPRTALL   DC    X'00'\nCARRIAGE DC    X'00'\n*                                                                     *\nANDHITS  DC    H'0'\nCARGS    DC    H'0'\nUT1NAME  DC    CL8'SYSUT1'\nUT1TYPE  DC    X'00'\nUT2NAME  DC    CL8'SYSUT2'\nBKUPTTR  DC    A(0)\n         DS    0F\n***********************************************************************\nKEYWORD1 EQU   *\n         DC    AL1(2,L'KEY19)\nKEY19    DC    C'END'\n         DC    AL1(2,L'KEY1A)\nKEY1A    DC    C'EDIT'\n         DC    AL1(1,L'KEY1B)\nKEY1B    DC    C'CHANGE'\n         DC    AL1(1,L'KEY1C)\nKEY1C    DC    C'LIST'\n         DC    AL1(1,L'KEY1D)\nKEY1D    DC    C'PUNCH'\n         DC    AL1(2,L'KEY1E)\nKEY1E    DC    C'SCAN'\n         DC    AL1(1,L'KEY1F)\nKEY1F    DC    C'OPTION'\n         DC    AL1(2,L'KEY1G)\nKEY1G    DC    C'DIRECTORY'\n         DC    AL1(2,L'KEY1H)\nKEY1H    DC    C'UTILITY'\n         DC    AL1(2,L'KEY1I)\nKEY1I    DC    C'SEARCH'\n         DC    AL1(3,L'KEY1J)\nKEY1J    DC    C'FIND'\n         DC    AL1(2,L'KEY1K)\nKEY1K    DC    C'USAGE'\n         DC    AL1(3,L'KEY1L)\nKEY1L    DC    C'FILL'\nKEYWORD3 EQU   *\n         DC    AL1(3,L'KEY3AA)\nKEY3AA   DC    C'INCLUDE'\n         DC    AL1(3,L'KEY3AB)\nKEY3AB   DC    C'RENAME'\n         DC    AL1(2,L'KEY3AC)\nKEY3AC   DC    C'COPY'\n         DC    AL1(2,L'KEY3AD)\nKEY3AD   DC    C'ALIAS'\n         DC    AL1(2,L'KEY3AE)\nKEY3AE   DC    C'SCRATCH'\n         DC    AL1(4,L'KEY3AF)\nKEY3AF   DC    C'REPLACE'\n         DC    AL1(2,L'KEY3A)\nKEY3A    DC    C'ADD'\n         DC    AL1(2,L'KEY3B)\nKEY3B    DC    C'UPDATE'\n         DC    AL1(3,L'KEY3C)\nKEY3C    DC    C'INS'\n         DC    AL1(3,L'KEY3D)\nKEY3D    DC    C'REP'\n         DC    AL1(3,L'KEY3E)\nKEY3E    DC    C'DEL'\n         DC    AL2(0)\n***********************************************************************\nKEYWORD2 EQU   *\n         DC    AL1(2,L'KEY2A)\nKEY2A    DC    C'SCAN'\n         DC    AL1(1,L'KEY2B)\nKEY2B    DC    C'LIST'\n         DC    AL1(1,L'KEY2C)\nKEY2C    DC    C'DIRECTORY'\n         DC    AL1(1,L'KEY2D)\nKEY2D    DC    C'EJECT'\n         DC    AL1(3,L'KEY2E)\nKEY2E    DC    C'INDD'\n         DC    AL1(3,L'KEY2F)\nKEY2F    DC    C'LINES'\n         DC    AL1(3,L'KEY2G)\nKEY2G    DC    C'INCR'\n         DC    AL1(1,L'KEY2H)\nKEY2H    DC    C'NUM'\n         DC    AL1(1,L'KEY2I)\nKEY2I    DC    C'USER'\n         DC    AL1(2,L'KEY2J)\nKEY2J    DC    C'CONTROL'\n         DC    AL1(2,L'KEY2K)\nKEY2K    DC    C'STOWCLOSE'\n         DC    AL1(1,L'KEY2L)\nKEY2L    DC    C'ASIS'\n         DC    AL1(1,L'KEY2M)\nKEY2M    DC    C'FIND'\n         DC    AL2(0)\n***********************************************************************\n         EJECT\n***********************************************************************\nMSG1     DC    AL2(L'CMSG1)\nCMSG1    DC    C'---------CONTROL'\n*                                                                     *\nORIGMSG  DC    AL2(L'ORIGL)\nORIGL    DC    C'-----------ORIGINAL          '\nORIGNAM  EQU   ORIGL+21\nREPMSG   DC    AL2(L'REPL)\nREPL     DC    C'REPLACEMENT********'\nCOPYMSG  DC    AL2(L'COPYL)\nCOPYL    DC    C'-INC FROM 12345678'\nCOPYNAME EQU   *-8\nINSMSG   DC    AL2(L'INSL)\nINSL     DC    C'INSERTED *** 12345678'\nINSLNAME EQU   *-8\nDELMSG   DC    AL2(L'DELL)\nDELL     DC    C'----------- DELETED'\nFLUSHMSG DC    AL2(L'FLUSHL)\nFLUSHL   DC    C'* ERROR HAS OCCURRED -FLUSHED *'\n**********************************************************************\nSEQMSG2  DC    AL2(L'SEQER2)\nSEQER2   DC    C'********** ERROR-INVALID SEQUENCE'\nSEQMSG3  DC    AL2(L'SEQER3)\nSEQER3   DC    C'********** ERROR-NOT NUMERIC'\nUPMSG4   DC    AL2(L'UERR4)\nUERR4    DC    C'********** ERROR-EOF 12345678=12345678'\nUPM4SEQ  EQU   *-8\nUPM4NAME EQU   *-17\nUPMSG5   DC    AL2(L'UERR5)\nUERR5    DC    C'********** ERROR INVALID SEQ=12345678'\nUPM5SEQ  EQU   *-8\nUPMSG8   DC    AL2(L'UERR8)\nUERR8    DC    C'********** ERROR-NO DATA INSERTED'\n**********************************************************************\nOPTNMSG1 DC    AL2(L'OERR1)\nOERR1    DC    C'********** ERROR-          -INVALID OPTION'\nOPTNKEY  EQU   OERR1+17\n*                                                                     *\nINDEXMSG DC    AL2(L'INDEXL)\nINDEXL   DC    C'MEMBER 12345678 TTR 123456 ALIAS '\nINDEXNAM EQU   INDEXL+7\nINDEXTTR EQU   INDEXL+20\nINDEXALS EQU   INDEXL+27\n*                                                                     *\nUSEMSG1  DC    AL2(L'USE1L)\nUSE1L    DC    C'12345678 12345 DIR BLKS ALLOC 12345 BLKS USED'\nUSE1DDNM EQU   USE1L\nUSE1ALOC EQU   USE1L+9\nUSE1USED EQU   USE1L+30\nUSEMSG2  DC    AL2(L'USE2L)\nUSE2L    DC    C'12345678 12345 TRKS ALLOC     12345 TRKS EMPTY'\nUSE2DDNM EQU   USE2L\nUSE2ALOC EQU   USE2L+9\nUSE2EMTY EQU   USE2L+30\nUSEMSG3  DC    AL2(L'USE3L)\nUSE3L    DC    C'12345678 12345 MEMBERS +      12345 ALIAS'\nUSE3DDNM EQU   USE3L\nUSE3MEMR EQU   USE3L+9\nUSE3MEMA EQU   USE3L+30\n*\nOKMSG    DC    AL2(L'OKMSG1)\nOKMSG1   DC    C'***** ABOVE ACTION SUCCESSFUL *****'\nBADMSG   DC    AL2(L'BADMSG1)\nBADMSG1  DC    C'***** ABOVE ACTION FAILED *****'\nADDMSG1  DC    AL2(L'ADDMESS1)\nADDMESS1 DC    C'ADDED ****** 12345678'\nADDNAME  EQU   *-8\nSTOWMSG1 DC    AL2(L'STOWMES1)\nSTOWMES1 DC    C'********** ERROR-STOW FAILED-RC=  '\nSTOWCODE EQU   *-2\nUT1ERR1  DC    AL2(L'UT1ERR1L)\nUT1ERR1L DC    C'********** ERROR-OPEN FAILURE-12345678'\nUT1ERDD  EQU   *-8\nUT2ERR2  DC    AL2(L'UT2ERR2L)\nUT2ERR2L DC    C'********** ERROR-RECFM=V NOT SUPPORTED(OUTPUT)'\n**********************************************************************\nPRMSG1   DC    AL2(L'PERR1)\nPERR1    DC    C'********** ERROR-BLANK CARD ***'\nPRMSG2   DC    AL2(L'PERR2)\nPERR2    DC    C'********** ERROR-MISSING DELIMITER 2'\nPRMSG3   DC    AL2(L'PERR3)\nPERR3    DC    C'********** ERROR-FIRST ARG ZERO LENGTH'\nPRMSG4   DC    AL2(L'PERR4)\nPERR4    DC    C'********** ERROR-MISSING DELIMITER 3'\nPRMSG5   DC    AL2(L'PERR5)\nPERR5    DC    C'********** ERROR-CHAR AFTER LAST DELIM NOT BLANK'\n***********************************************************************\nREPMSG1  DC    AL2(L'RERR1)\nRERR1    DC    C'********** ERROR-REPLACEMENT TOO LARGE'\nREPMSG2  DC    AL2(L'RERR2)\nRERR2    DC    C'********** ERROR-DATA OVERFLOW **********'\nREPMSG3  DC    AL2(L'RERR3)\nRERR3    DC    C'********** ERROR-POINT OF REP FAILURE'\n***********************************************************************\nUTILMSG1 DC    AL2(L'UERR1)\nUERR1    DC    C'********** ERROR-UTILITY BUFFER SPACE EXCEEDED'\n***********************************************************************\nCTLMSG1  DC    AL2(L'CERR1)\nCERR1    DC    C'********** ERROR-BLANK CARD'\nCTLMSG2  DC    AL2(L'CERR2)\nCERR2    DC    C'********** ERROR-UNRECOGNIZED KEYWORD'\nCTLMSG3  DC    AL2(L'CERR3)\nCERR3    DC    C'********** ERROR-NO MEMBER NAME'\nCTLMSG4  DC    AL2(L'CERR4)\nCERR4    DC    C'********** ERROR-NO CHANGE CARDS FOR PRIOR EDIT'\nCTLMSG5  DC    AL2(L'CERR5)\nCERR5    DC    C'********** ERROR-MISSING EDIT CARD'\nCTLMSG6  DC     AL2(L'CERR6)\nCERR6    DC     C'********** ERROR-NAME GT THAN 8 POSITIONS'\nCTLMSG7  DC    AL2(L'CERR7)\nCERR7    DC    C'********** ERROR MEMBERXX NOT FOUND'\nCERR7NAM EQU   CERR7+17\nCTLMSG8  DC    AL2(L'CERR8)\nCERR8    DC    C'********** ERROR MEMBERXX IS AN ALIAS'\nCERR8NAM EQU   CERR8+17\nCTLMSG9  DC    AL2(L'CERR9)\nCERR9    DC    C'********** ERROR-NOT VALID HERE'\n***********************************************\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,                         X\n               RECFM=FB,LRECL=80,EODAD=SYSINEND,EXLST=EXLSTPRT\n*\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=(R,W),DSORG=PO,                     X\n               EODAD=READMEOF,EXLST=EXLSTUT1\nFINDDCB  DCB   DDNAME=SYSUT1,MACRF=(RP),DSORG=PS,RECFM=F,              X\n               BLKSIZE=256,LRECL=256,EODAD=FINDEOF\n*\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,                       X\n               EXLST=EXLSTUT2\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=FBA,LRECL=133,EXLST=EXLSTPRT\n*\nSYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,                      X\n               RECFM=FB,LRECL=80,EXLST=EXLSTPRT\nSYSWRK   DCB   DDNAME=SYSWRK,DSORG=PS,MACRF=(RP,WP),                   X\n               LRECL=80,RECFM=FB,EODAD=RESTEOF\n*\n         PRINT GEN\n         READ  DIRDECB,SF,FINDDCB,MF=L\n*\n         READ  UT1DECB,SF,SYSUT1,MF=L\n***********************************************\n         READ  WRKDECB1,SF,SYSWRK,MF=L\n         WRITE WRKDECB2,SF,SYSWRK,MF=L\n*\n         WRITE UT2DECB,SF,SYSUT2,MF=L\n*\n         DC    C' '\nCTLCARD  DC    CL80' '\nCTLSEQ   DC    CL8' '\n*\n*\n         DC    C' '\nORIGINAL DC    CL80' '\n         DC    CL(256-80)' '\nORIGSEQ  DC    CL8' '\n         DC     C' '\nCOPY     DC     CL80' '\n*                                                                     *\n         DC    C' '\nPRINTASA DC    C' '\nPRINTSEQ DS    0CL8\nPRINTIT  DC    CL80' '\n         DC    CL2' '\nPRINTMSG DC    CL50' '\n*\nDOUBLE   DS    0D\nFULL     DC    A(0)\n         DC    A(0)\n*                                                                     *\nYYDDD    DS    0CL5\nYEAR     DC    CL2' '\nDAY      DC    CL3' '\n*                                                                     *\nHHMMSS   DS    0CL7\nHOURS    DC    CL2' '\nMINUTES  DC    CL2' '\nSECONDS  DC    CL2' '\n         DC    C' '\n*                                                                     *\n         ORG   JFCBAREA\nDSCB     DS    0CL148\nPRINTWRK DS    CL133\n         ORG\n***********************************************************************\nPRNTHDNG DC    CL133' '\n         ORG   PRNTHDNG+1\nPRNTDD1  DC    CL8' '\n*\n         ORG   PRNTHDNG+10\nPRNTVOL  DC    CL6' '\n         ORG   PRNTHDNG+17\nPRNTLREC DC    CL3' '\n         DC    C'/'\nPRNTBLK  DC    CL5' '\n         ORG   PRNTHDNG+28\nPRNTDSN  DC    CL44'             PDSPDS'\n         DC    CL2' '\nPRNTYY   DC    CL2' '\n         DC    C'.'\nPRNTDDD  DC    CL3' '\n         DC    C' - '\nPRNTHH   DC    CL2' '\n         DC    C'.'\nPRNTMM   DC    CL2' '\n         DC    C'.'\nPRNTSS   DC    CL2' '\n         DC    CL2' '\n         DC    C'MEMBER '\nPRNTMEM  DC    CL8' '\n         ORG   PRNTHDNG+122\n         DC    C' PAGE'\nPRNTPAGE DC    CL6' '\n         ORG\n***********************************************************************\nPRNTHNG2 DC    CL133' '\n         ORG   PRNTHNG2+1\nPRNTDD2  DC    CL8' '\n         ORG   PRNTHNG2+10\nPRNTVOL2 DC    CL6' '\n         ORG   PRNTHNG2+17\nPRNTLRC2 DC    CL3' '\n         DC    C'/'\nPRNTBLK2 DC    CL5' '\n         ORG   PRNTHNG2+28\nPRNTDSN2 DC    CL44' '\n         ORG\n*\n         DS    0F\n         DC    X'FF'\nTRTTBL   DC    XL256'00'\n*\nTRTBL    DC    C'0123456789ABCDEF'\n*\nTRTNUM   DC    256AL1(*-TRTNUM)\n         ORG   TRTNUM+C' '\n         DC    X'00'\n         ORG   TRTNUM+C'0'\n         DC    10X'00'\n         ORG\n********************************************\n         LTORG\n****************************************\n         DS    0F\nEDITARG  DC     A(EDITCTL)\nSCANBUF  DC    A(SCANCTL)\nEDITBUF  DC    A(EDITCTL)\n         DS    0F\nDIRBYTES DC    AL2(0)                  REALLY 2 FROM NEXT LOC\nDIRBLK   DC    256X'00'\n***********************************************************************\nDIRREC   DS    0CL12                   DEBLOCKER FOR DIRECTORY\nDIRNAME  DC    XL8'FFFFFFFFFFFFFFFF'\nDIRTTR   DC    XL3'00'\nDIRCTL   DC    X'00'\nDIRUSER  DC    XL62'00'\n***********************************************************************\nLRECL    DC    H'80'\nRECADR   DC    A(0)                    REC ADDR IN BUFR FOR UPDATE\nBUFPOOL  DC    A(0)                    WHERE BUFFER IS\n*                                                                     *\nBUFPOOLA DC    A(0)\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*\nEDITCTL  DC    20XL27'00'\n*\n***********************************************************************\n***********************************************************************\n*\n         DS    0D\nSCANCTL  DC    150XL80'00'\n         ORG   SCANCTL\nCTLCTL   DS    0CL14\nCTLSTART DC    A(0)                    START #\nCTLEND   DC    A(0)                    END #\nCTLCOLST DC    AL2(0)                  COL START\nCTLCOLNG DC    AL2(0)                  LENGTH COL\nCTLLNG   EQU   *-CTLCTL\nCTLLNG1  DC    AL2(0)\nCTLLNG2  DC    AL2(0)\nCTLDATA1 DC    X'00'\nCTLDATA2 DC    X'00'\n         ORG\nRWDSECT  DSECT\nRWDECB   DC    A(0)\nRWDCB    DC    A(0)\nRWBUFR   DC    A(0)\nRWLNGTH  DC    A(0)\n         PRINT NOGEN\n         DCBD  DSORG=(PO,PS),DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROCGEN": {"ttr": 2821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//SPGEN  PROC OUT='*',                * SYSPRINT CLASS  *\n//            GENPARM=                * PARM -OPTIONAL  *\n//*                    **********\n//* ******************* SPGEN  ***********************************\n//*                    **********\n//SPGEN   EXEC  PGM=SUPERGEN,PARM='&GENPARM'\n//SYSPRINT DD    SYSOUT=&OUT           * RECFM=FBA,LRECL=133 *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROCPDS": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//PDSPDS PROC DSN=,                   * LIBRARY TO EDIT *\n//             PDSPARM=,               * PARM -OPTIONAL  *\n//             OUT='*',                * SYSPRINT  CLASS *\n//             COPIES=1                * NUMBER OF COPIES *\n//*                    **********\n//* ******************* PDSPDS ***********************************\n//*                    **********\n//PDSPDS  EXEC  PGM=PDSPDS,PARM='&PDSPARM'\n//SYSUT1   DD    DSN=&DSN,DISP=SHR\n//SYSUT2   DD    DSN=&DSN,DISP=SHR\n//SYSPRINT DD    SYSOUT=&OUT,COPIES=&COPIES   * RECFM=FBA,LRECL=133 *\n//SYSPUNCH DD    SYSOUT=B                     * RECFM=FB ,LRECL=80  *\n//SYSWRK   DD    DSN=&&WORK,UNIT=SYSDA,SPACE=(TRK,(5,1))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDOC72": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "000010 IDENTIFICATION DIVISION.\n000020 PROGRAM-ID.\n000030     RDOC72.\n000040 AUTHOR. KEITH R OSTLING, MODIFICATION BY PAT RUSSELL & ED H.\n000050 REMARKS.  MODIFICATION OF RDOC TO USE ONLY COLS 1-72, SEQ 73-80.\n000060     THE PURPOSE OF THIS PROGRAM IS TO PRINT SYSTEMS AND\n000070     PROGRAMMING DOCUMENTATION FROM PUNCHED CARDS-  REFER\n000080     TO DOCUMENTATION PROGRAM MEMORANDUM FOR DETAILS.\n000090     EJECT\n000100 ENVIRONMENT DIVISION.\n000110     SKIP3\n000120 CONFIGURATION SECTION.\n000130     SKIP2\n000140 SOURCE-COMPUTER.  IBM-370.\n000150 OBJECT-COMPUTER.  IBM-370.\n000160     SKIP2\n000170 INPUT-OUTPUT SECTION.\n000180     SKIP2\n000190 FILE-CONTROL.\n000200     SELECT CARD-FILE ASSIGN TO UT-S-SYSIN.\n000210     SELECT PRINT-FILE ASSIGN TO UT-S-SYSPRINT.\n000220     SELECT PUNCH-FILE ASSIGN TO UT-S-SYSPUNCH.\n000230     SELECT DIAGNOSTICS-FILE ASSIGN TO UT-S-DIAGNOSE.\n000240     SELECT TABLE-FILE ASSIGN TO UT-S-TABLES.\n000250     SELECT TWO-UP-TAPE ASSIGN TO UT-S-TWOUP.\n000260     SELECT ONE-UP-TAPE ASSIGN TO UT-S-ONEUP.\n000270     SELECT LINE-IMAGE ASSIGN TO UT-S-LINEIMAG.\n000280     EJECT\n000290 DATA DIVISION.\n000300     SKIP3\n000310 FILE SECTION.\n000320     SKIP2\n000330 FD  CARD-FILE\n000340     BLOCK CONTAINS 0 RECORDS\n000350     LABEL RECORDS ARE STANDARD\n000360     DATA RECORD IS CARD-IN.\n000370     SKIP1\n000380 01  CARD-IN.\n000390     02 CTL-WORD     PICTURE X(5).\n000400     88 BKHED-CARD                         VALUE 'BKHED'.\n000410     88 BKNUM-CARD                         VALUE 'BKNUM'.\n000420     88 BOOK-CARD                          VALUE 'BOOK '.\n000430     88 COLM1-CARD                         VALUE 'COLM1'.\n000440     88 COLM2-CARD                         VALUE 'COLM2'.\n000450     88 COLM3-CARD                         VALUE 'COLM3'.\n000460     88 COPY-CARD                          VALUE 'COPY '.\n000470     88 COVR1-CARD                         VALUE 'COVR1'.\n000480     88 COVR2-CARD                         VALUE 'COVR2'.\n000490     88 COVR3-CARD                         VALUE 'COVR3'.\n000500     88 DATE-CARD                          VALUE 'DATE '.\n000510     88 DOUBL-CARD                         VALUE 'DOUBL'.\n000520     88 EJECT-CARD                         VALUE 'EJECT'.\n000530     88 ENSUB-CARD                         VALUE 'ENSUB'.\n000540     88 HEAD-CARD                          VALUE 'HEAD '.\n000550     88 IND-A-CARD                         VALUE 'IND-A'.\n000560     88 IND-B-CARD                         VALUE 'IND-B'.\n000570     88 IND-C-CARD                         VALUE 'IND-C'.\n000580     88 IND-D-CARD                         VALUE 'IND-D'.\n000590     88 INDEX-CARD                         VALUE 'INDEX'.\n000600     88 LINES-CARD                         VALUE 'LINES'.\n000610     88 LIST-CARD                          VALUE 'LIST '.\n000620     88 NARR-CARD                          VALUE 'NARR '.\n000630     88 NOHED-CARD                         VALUE 'NOHED'.\n000640     88 NORM-CARD                          VALUE '     '.\n000650     88 NOTAB-CARD                         VALUE 'NOTAB'.\n000660     88 PAGE-CARD                          VALUE 'PAGE '.\n000670     88 PARA-CARD                          VALUE 'PARA '.\n000680     88 PARIN-CARD                         VALUE 'PARIN'.\n000690     88 PLAB1-CARD                         VALUE 'PLAB1'.\n000700     88 PLAB2-CARD                         VALUE 'PLAB2'.\n000710     88 PLAB3-CARD                         VALUE 'PLAB3'.\n000720     88 PLAB4-CARD                         VALUE 'PLAB4'.\n000730     88 PLAB5-CARD                         VALUE 'PLAB5'.\n000740     88 PLAB6-CARD                         VALUE 'PLAB6'.\n000750     88 PLAB7-CARD                         VALUE 'PLAB7'.\n000760     88 PLAB8-CARD                         VALUE 'PLAB8'.\n000770     88 PLAB9-CARD                         VALUE 'PLAB9'.\n000780     88 PLABA-CARD                         VALUE 'PLABA'.\n000790     88 PLABB-CARD                         VALUE 'PLABB'.\n000800     88 PLABC-CARD                         VALUE 'PLABC'.\n000810     88 PLABD-CARD                         VALUE 'PLABD'.\n000820     88 PLABE-CARD                         VALUE 'PLABE'.\n000830     88 PLABF-CARD                         VALUE 'PLABF'.\n000840     88 PLABG-CARD                         VALUE 'PLABG'.\n000850     88 PLABH-CARD                         VALUE 'PLABH'.\n000860     88 PLABI-CARD                         VALUE 'PLABI'.\n000870     88 PRTPG-CARD                         VALUE 'PRTPG'.\n000880     88 REPRT-CARD                         VALUE 'REPRT'.\n000890     88 SAVE1-CARD                         VALUE 'SAVE1'.\n000900     88 SAVE2-CARD                         VALUE 'SAVE2'.\n000910     88 SAVE3-CARD                         VALUE 'SAVE3'.\n000920     88 SAVE4-CARD                         VALUE 'SAVE4'.\n000930     88 SAVE5-CARD                         VALUE 'SAVE5'.\n000940     88 SAVE6-CARD                         VALUE 'SAVE6'.\n000950     88 SAVE7-CARD                         VALUE 'SAVE7'.\n000960     88 SAVE8-CARD                         VALUE 'SAVE8'.\n000970     88 SAVE9-CARD                         VALUE 'SAVE9'.\n000980     88 SECT-CARD                          VALUE 'SECT '.\n000990     88 SECTN-CARD                         VALUE 'SECTN'.\n001000     88 SEHED-CARD                         VALUE 'SEHED'.\n001010     88 SENUM-CARD                         VALUE 'SENUM'.\n001020     88 SEQ-CARD                           VALUE 'SEQ  '.\n001030     88 SINGL-CARD                         VALUE 'SINGL'.\n001040     88 SKIP-CARD                          VALUE 'SKIP '.\n001050     88 SPAC1-CARD                         VALUE 'SPAC1'.\n001060     88 SPAC2-CARD                         VALUE 'SPAC2'.\n001070     88 SPAC3-CARD                         VALUE 'SPAC3'.\n001080     88 SPAC4-CARD                         VALUE 'SPAC4'.\n001090     88 SPAC5-CARD                         VALUE 'SPAC5'.\n001100     88 SPAC6-CARD                         VALUE 'SPAC6'.\n001110     88 SPAC7-CARD                         VALUE 'SPAC7'.\n001120     88 SPAC8-CARD                         VALUE 'SPAC8'.\n001130     88 SPAC9-CARD                         VALUE 'SPAC9'.\n001140     88 SUBPG-CARD                         VALUE 'SUBPG'.\n001150     88 TITLE-CARD                         VALUE 'TITLE'.\n001160     88 XLINE-CARD                         VALUE 'XLINE'.\n001170\n001180     02  CARD-DATA.\n001190         03  DATA-A          PICTURE X(65).\n001200         03  BLANKS-A        PICTURE X(2).\n001210     02  CARD-DATA-B     REDEFINES   CARD-DATA.\n001220         03  DATA-B          PICTURE X(60).\n001230         03  BLANKS-B        PICTURE X(7).\n001240     02  CARD-DATA-C     REDEFINES   CARD-DATA.\n001250         03  DATA-C          PICTURE X(55).\n001260         03  BLANKS-C        PICTURE X(12).\n001270     02  CARD-DATA-D     REDEFINES   CARD-DATA.\n001280         03  DATA-D          PICTURE X(50).\n001290         03  BLANKS-D        PICTURE X(17).\n001300     02  CARD-DATA-H     REDEFINES   CARD-DATA.\n001310         03  DATA-H          PIC X(45).\n001320         03  BLANKS-H        PIC X(22).\n001330     02  CARD-REDEF      REDEFINES   CARD-DATA.\n001340         03  BEG-PAG-NUM     PIC     9(3).\n001350         03  BEG-PAG-SPAC    REDEFINES   BEG-PAG-NUM PIC X(3).\n001360         03  FILLER          PICTURE X.\n001370         03  BEG-SUB-NUM     PIC     99.\n001380         03  FILLER          PIC     X(61).\n001390     02  NO-NO           REDEFINES   CARD-DATA.\n001400         03  NUM-COPIES      PICTURE 99.\n001410         03  NUM-LINES   REDEFINES   NUM-COPIES  PICTURE 99.\n001420         03  FILLER          PICTURE X(65).\n001430     02  CD-REDEF        REDEFINES   CARD-DATA.\n001440         03  REPORT-CARD     PICTURE X(66).\n001450         03  R-CRD-BLANKS    PICTURE X(1).\n001460     02  C-REDEF         REDEFINES   CARD-DATA.\n001470         03  BEG-SEQ-NUM     PICTURE 9(5).\n001480         03  BEG-SEQ-SPAC    REDEFINES   BEG-SEQ-NUM PICTURE X(5).\n001490         03  FILLER          PICTURE X(62).\n001500     02  CRDEF           REDEFINES   CARD-DATA.\n001510         03  CD-BOOK-NAME    PICTURE X(55).\n001520         03  CD-BOOK-BLNK    PICTURE X(4).\n001530         03  CD-BOOK-NUM     PICTURE X(8).\n001540     02  CRDF            REDEFINES   CARD-DATA.\n001550         03  CD-SECT-NAME    PICTURE X(55).\n001560         03  CD-SECT-BLNK    PICTURE X(6).\n001570         03  CD-SECT-NUM     PICTURE X(6).\n001580     02  DATE-REDEF      REDEFINES   CARD-DATA.\n001590         03  CARD-DATE       PIC 9(6).\n001600         03  FILLER          PIC XXX.\n001610         03  OUTPUT-IND      PIC X.\n001620         03  FILLER          PIC X(57).\n001630     02  CARD-SEQ            PIC X(8).\n001640     EJECT\n001650 FD  PRINT-FILE RECORDING MODE F, LABEL RECORDS OMITTED,\n001660     RECORD CONTAINS 133 CHARACTERS,\n001670     DATA RECORDS ARE PRINT-REC, HEAD-REC, SECT-REC.\n001680     SKIP1\n001690 01  PRINT-REC.\n001700     02  SPAC-CTL            PICTURE X.\n001710     02  PRINT-LINE          PICTURE X(132).\n001720     02  NORM-LINE       REDEFINES   PRINT-LINE.\n001730         03  FILLER          PICTURE X(1).\n001740         03  PR-PAGLIN       PICTURE 9(8).\n001750         03  PRINT-PAGLIN    REDEFINES   PR-PAGLIN   PICTURE X(8).\n001760         03  FILLER          PICTURE X.\n001770         03  NORM-MARGIN     PICTURE X(70).\n001780         03  FILLER          PICTURE X(52).\n001790     02  INDENTA         REDEFINES   PRINT-LINE.\n001800         03  FILLER          PICTURE X(15).\n001810         03  A-MARGIN        PICTURE X(65).\n001820         03  FILLER          PICTURE X(52).\n001830     02  INDENTB         REDEFINES   PRINT-LINE.\n001840         03  FILLER          PICTURE X(20).\n001850         03  B-MARGIN        PICTURE X(60).\n001860         03  FILLER          PICTURE X(52).\n001870     02  INDENTC         REDEFINES   PRINT-LINE.\n001880         03  FILLER          PICTURE X(25).\n001890         03  C-MARGIN        PICTURE X(55).\n001900         03  FILLER          PICTURE X(52).\n001910     02  INDENTD         REDEFINES   PRINT-LINE.\n001920         03  FILLER          PICTURE X(30).\n001930         03  D-MARGIN        PICTURE X(50).\n001940         03  FILLER          PICTURE X(52).\n001950     02  REP-LINE        REDEFINES   PRINT-LINE.\n001960         03  LEFT-HALF       PICTURE X(66).\n001970         03  RIGHT-HALF      PICTURE X(66).\n001980     02  X-ALIGN         REDEFINES   PRINT-LINE.\n001990         03  PRT-POS-ONE     PICTURE X.\n002000         03  FILLER          PICTURE X(83).\n002010         03  PRT-POS-85      PICTURE X.\n002020         03  FILLER          PICTURE X(46).\n002030         03  PRT-POS-132     PICTURE X.\n002040     02  FILLER          REDEFINES   PRINT-LINE.\n002050         03  LIST-CTL        PICTURE X(5).\n002060         03  LIST-DATA       PICTURE X(67).\n002070         03  LIST-SEQ        PICTURE X(8).\n002080         03  FILLER          PICTURE X(52).\n002090     02  DOUBLE-UP       REDEFINES   PRINT-LINE.\n002100         03  FILLER          PICTURE X(8).\n002110         03  P-72            PICTURE X(72).\n002120         03  FILLER          PICTURE X(52).\n002130     02  COVER-LINE      REDEFINES   PRINT-LINE.\n002140         03  FILLER          PIC     X(52).\n002150         03  COVER-DATA      PIC     X(25).\n002160         03  FILLER          PIC     X(55).\n002170     SKIP1\n002180 01  HEAD-REC.\n002190     02  FILLER              PICTURE X(11).\n002200     02  HEAD-LINE           PIC     X(45).\n002210     02  FILLER              PIC     XXX.\n002220     02 PR-DATE      PICTURE Z9B99B99.\n002230     02  PAGE-LABEL          PIC     X(8).\n002240     02  PR-PAGE             PIC     ZZZ.\n002250     02 PR-DEC       PICTURE X.\n002260     02  PR-SUBPG            PIC     99.\n002270     02  FILLER              PIC X(52).\n002280     SKIP1\n002290 01  SECT-REC.\n002300     02 FILLER       PICTURE X(11).\n002310     02 SECT-LINE    PICTURE X(66).\n002320     02 FILLER       PICTURE X(56).\n002330     EJECT\n002340 FD  TABLE-FILE RECORDING MODE F, LABEL RECORDS STANDARD,\n002350     BLOCK CONTAINS  20 RECORDS, RECORD CONTAINS 133 CHARACTERS,\n002360     DATA RECORDS ARE TABLE-RECORD, TABLE-IN.\n002370     SKIP1\n002380 01  TABLE-RECORD.\n002390     05  TAB-REC-SPAC        PICTURE X.\n002400     05  FILLER          PIC X(8).\n002410     05  TAB-NAME        PIC X(72).\n002420     05  TABLE-ENTRY-1   REDEFINES           TAB-NAME.\n002430         10  TAB-SECT-NAM    PIC X(72).\n002440     05  TABLE-ENTRY-2   REDEFINES           TAB-NAME.\n002450         10  FILLER          PIC X(3).\n002460         10  TAB-HEAD        PIC X(62).\n002470         10  FILLER          PIC X.\n002480         10  TAB-PAGE-NO     PIC ZZZ.\n002490         10  TAB-DECIMAL     PIC X.\n002500         10  TAB-SUB-PAGE    PIC 99.\n002510     05  TABLE-ENTRY-3   REDEFINES           TAB-NAME.\n002520         10  FILLER          PIC X(6).\n002530         10  TAB-INDEX       PIC X(66).\n002540     05  TABLE-ENTRY-4   REDEFINES   TAB-NAME.\n002550         10  FILLER          PIC X(6).\n002560         10  LEADERS         PIC XX          OCCURS 33 TIMES.\n002570     05  FILLER              PIC X(52).\n002580     SKIP1\n002590 01  TABLE-IN.\n002600     02 TABLE-SPACE  PICTURE X.\n002610     02 TABLE-LINE   PICTURE X(132).\n002620     EJECT\n002630 FD  DIAGNOSTICS-FILE RECORDING MODE F, LABEL RECORDS STANDARD,\n002640     BLOCK CONTAINS  05 RECORDS, RECORD CONTAINS 133 CHARACTERS,\n002650     DATA RECORDS ARE DIAGNOSTICS, DIAG-TWO.\n002660     SKIP1\n002670 01  DIAGNOSTICS.\n002680     02 DIAG-SPAC    PICTURE X.\n002690     02 FILLER       PICTURE X(6).\n002700     02 DIAG-CARD    PICTURE X(6).\n002710     02 FILLER       PICTURE X.\n002720     02 DIAG-CARD-NO PICTURE Z(6).\n002730     02 FILLER       PICTURE X.\n002740     02 DIAG-PAGE    PICTURE X(6).\n002750     02 FILLER       PICTURE X.\n002760     02 DIAG-PAG-NO  PICTURE Z(4).\n002770     02 DIAG-DEC     PICTURE X.\n002780     02 DIAG-SUBPG   PICTURE 999.\n002790     02 FILLER       PICTURE XX.\n002800     02 DIAG-MESSAGE PICTURE X(35).\n002810     02 DIAG-BYP     PICTURE X(10).\n002820     02 FILLER       PICTURE X(50).\n002830     SKIP1\n002840 01  DIAG-TWO.\n002850     02 DIAG-SPACE   PICTURE X.\n002860     02 DIAG-CTL-WD  PICTURE X(5).\n002870     02 FILLER       PICTURE X.\n002880     02 DIAG-CARD-DATA PICTURE X(67).\n002890     02 FILLER       PICTURE X.\n002900     02 DIAG-SEQ     PICTURE X(8).\n002910     02 FILLER       PICTURE X(50).\n002920     EJECT\n002930 FD  LINE-IMAGE RECORDING MODE F, LABEL RECORDS STANDARD,\n002940     BLOCK CONTAINS  54 RECORDS, RECORD CONTAINS 133 CHARACTERS,\n002950     DATA RECORD IS DISK-REC.\n002960     SKIP1\n002970 01  DISK-REC.\n002980     02 DISK-SPAC    PICTURE X.\n002990     02 DISK-LINE    PICTURE X(132).\n003000     EJECT\n003010 FD  PUNCH-FILE RECORDING MODE F, LABEL RECORDS OMITTED,\n003020     DATA RECORD IS PUNCH-REC.\n003030     SKIP1\n003040 01  PUNCH-REC.\n003050     02 NEW-PAGLIN   PICTURE 9(5).\n003060     02 PUNCH-CTL    PICTURE X(5).\n003070     02 CARD-OUT     PICTURE X(70).\n003080     EJECT\n003090 FD  TWO-UP-TAPE\n003100         RECORDING MODE IS F,\n003110         LABEL RECORDS ARE OMITTED,\n003120             BLOCK CONTAINS  06  RECORDS,\n003130         RECORD CONTAINS 161 CHARACTERS,\n003140         DATA RECORD IS  TWO-UP-LINE.\n003150     SKIP1\n003160 01  TWO-UP-LINE.\n003170     02  T-LINE-CNTRL        PICTURE X.\n003180     02  TAPE-REC1.\n003190         05  LEFT-PAGE       PIC X(72).\n003200         05  CENTER          PIC X(13).\n003210         05  RIGHT-PAGE      PIC X(72).\n003220         05  EXTRAS          PIC X(3).\n003230     02  TAPE-REC2   REDEFINES   TAPE-REC1.\n003240         05  TAPE-LEFT.\n003250             10  TAPE-POS-ONE    PIC X.\n003260             10  FILLER          PIC X(70).\n003270             10  TAPE-POS-72     PIC X.\n003280             10  FILLER          PIC X(3).\n003290             10  TAPE-POS-76     PIC X.\n003300         05  FILLER              PIC X(84).\n003310     EJECT\n003320 FD  ONE-UP-TAPE\n003330         RECORDING MODE IS F,\n003340         LABEL RECORDS ARE OMITTED,\n003350         BLOCK CONTAINS  01 RECORDS,\n003360         DATA RECORD IS  ONE-UP-LINE.\n003370     SKIP1\n003380 01  ONE-UP-LINE.\n003390     02  O-LINE-CNTRL        PICTURE X.\n003400     02  O-DATA-LINE         PICTURE X(132).\n003410     EJECT\n003420 WORKING-STORAGE SECTION.\n003425 77  PAN-VALET PICTURE X(24) VALUE '002CBT1778   10/01/87'.\n003430     SKIP2\n003440 77  VER-MOD-NAME            PIC X(20)   VALUE\n003450     'RDOC V03M04 AUG15,71'.\n003460 77  SKIP-TO-ONE             PIC X       VALUE   '1'.\n003470 77  SPACE-ONE               PIC X       VALUE   ' '.\n003480 77  SPACE-TWO               PIC X       VALUE   '0'.\n003490 77  SPACE-THREE             PIC X       VALUE   '-'.\n003500 77  X-LINES-CTR             PIC S99     VALUE   ZERO    COMP-3.\n003510 77  DIAG-INDICATOR          PIC 99.\n003520 77  FIRST-BOOK-IND          PIC X       VALUE   SPACE.\n003530 77  TAPE-FILES              PIC 9(2)          VALUE ZEROES.\n003540     SKIP3\n003550 01  SWITCHES.\n003560     05  BKHED-SW            PIC X.\n003570     05  BKNUM-SW            PIC X.\n003580     05  COVER-SW            PIC X.\n003590     05  DIAGNOSTICS-SW      PIC X.\n003600     05  EJECT-SW            PIC X.\n003610     05  LEFT-SW             PIC X.\n003620     05  NO-TABLE-SW         PIC X.\n003630     05  NO-DATE-SW          PIC X.\n003640     05  NOHED-SW            PIC X.\n003650     05  PAGLIN-SW           PIC X.\n003660     05  PLAB-SW             PIC X.\n003670     05  RESEQ-SW            PIC X.\n003680     05  SEHED-SW            PIC X.\n003690     05  SENUM-SW            PIC X.\n003700     05  SUB-PAG-SW          PIC X.\n003710     05  TABLE-SW            PIC X.\n003720     05  TOO-LATE-SW         PIC X.\n003730     05  MODE-OF-OUTPUT      PICTURE X.\n003740         88  PRINT-ONE-UP-ROUGH              VALUE '1'.\n003750         88  TAPE-TWO-UP                     VALUE '2'.\n003760         88  PRINT-ONE-UP-FORMAL             VALUE '3'.\n003770         88  TAPE-ONE-UP                     VALUE '4'.\n003780     SKIP3\n003790 01  COUNTERS.\n003800     05  CARD-CTR            PIC 9(6)    COMP-3.\n003810     05  COPY-CTR            PIC 99      COMP-3.\n003820     05  COPIES-PTD          PIC 99      COMP-3.\n003830     05  COVER-CTR           PIC 99      COMP-3.\n003840     05  LINES-CTR           PIC S99     COMP-3.\n003850     05  LINES-LIMIT         PIC S99     COMP-3.\n003860     05  PAGE-CTR            PIC S999    COMP-3.\n003870     05  PAGLIN-CTR          PIC 9(5)    COMP-3.\n003880     05  SUB                 PIC 99      COMP-3.\n003890     05  SUB-PAG-CTR         PIC S99     COMP-3.\n003900     05  TAPE-RECDS          PIC     9(5).\n003910     05  XLINES-LIMIT        PIC S99     COMP-3.\n003920     SKIP3\n003930 01  STORAGE-AREAS.\n003940     05  CURR-DATE-DATE.\n003950          10  BYY            PIC 99.\n003960          10  MMDDYY.\n003970               15  MMDD      PIC 9(4).\n003980               15  AYY       PIC 99.\n003990          10  CURR-DATE REDEFINES MMDDYY    PIC 9(6).\n004000     05  NORM-SPAC           PIC X.\n004010     05  PLAB-CARD-STORE     PIC X(70).\n004020     05  STORE-HEAD          PIC X(45).\n004030     05  STORE-OLD-HEAD      PIC X(45).\n004040     05  STORE-PRINT-REC     PIC X(132).\n004050     05  STORE-SPAC-CTL      PIC X.\n004060     SKIP3\n004070 01  MODE-INDICATOR  PICTURE X(5).\n004080     88 NARR-MODE                          VALUE 'NARR '.\n004090     88 REPORT-MODE                        VALUE 'REPRT'.\n004100     88 TITLE-MODE                         VALUE 'TITLE'.\n004110     88 LIST-MODE                          VALUE 'LIST '.\n004120     SKIP3\n004130 01  BOOK-STORE.\n004140     02  FILLER              PIC     X(10)   VALUE   SPACES.\n004150     02 BOOK-NAME    PICTURE X(55)         VALUE SPACES.\n004160     02 FILLER       PICTURE X             VALUE SPACES.\n004170     02 BOOK-NUMBER  PICTURE X(8)          VALUE SPACES.\n004180     02 FILLER       PICTURE X(58)         VALUE SPACES.\n004190     SKIP3\n004200 01  SECT-STORE.\n004210     02 SECT-NAME    PICTURE X(55)         VALUE SPACES.\n004220     02 SECT-SEC     PICTURE X(5)          VALUE SPACES.\n004230     02 SECT-NUMBER  PICTURE X(6)          VALUE SPACES.\n004240     SKIP3\n004250 01  COLM-HEAD-STORE.\n004260     05  COLM-ONE-STORE      PIC X(70).\n004270     05  COLM-TWO-STORE      PIC X(70).\n004280     05  COLM-THREE-STORE    PIC X(70).\n004290     SKIP3\n004300 01  PARA-LABELS.\n004310     02  PLAB-ONE            PIC X(70).\n004320     02  PLAB-TWO            PIC X(70).\n004330     02  PLAB-THREE          PIC X(70).\n004340     02  PLAB-FOUR           PIC X(70).\n004350     02  PLAB-FIVE           PIC X(70).\n004360     02  PLAB-SIX            PIC X(70).\n004370     02  PLAB-SEVEN          PIC X(70).\n004380     02  PLAB-EIGHT          PIC X(70).\n004390     02  PLAB-NINE           PIC X(70).\n004400     SKIP3\n004410 01  TABLE-HEADER.\n004420     02  FILLER              PIC     X(10)   VALUE   SPACES.\n004430     02  HEADER-DATE         PIC     Z9B99B99.\n004440     02  FILLER              PIC     X(11)   VALUE   SPACES.\n004450     02  TOC-NAME            PIC X(17) VALUE  'TABLE OF CONTENTS'.\n004460     02  FILLER              PIC X(21)   VALUE   SPACES.\n004470     02  FILLER              PIC     X(5)    VALUE   'PAGE '.\n004480     02  TOC-PAGE            PIC X(6).\n004490 01  TABLE-HEADER-1.\n004500     05  FILLER              PIC X(76)   VALUE   SPACES.\n004510     05  FILLER              PIC X(4)    VALUE 'PAGE'.\n004520     SKIP2\n004530 01  COVER-LINE-1            PIC X(70).\n004540 01  COVER-LINE-2            PIC X(70).\n004550 01  COVER-LINE-3            PIC X(70).\n004560 01  COVER-LINE-4 PIC X(25) VALUE 'PEOPLES NATIONAL BANK'.\n004570 01  COVER-LINE-5 PIC X(25) VALUE 'OPERATIONS CENTER'.\n004580 01  COVER-LINE-7 PIC X(25) VALUE 'P.O. BOX 12787      '.\n004590 01  COVER-LINE-8 PIC X(25) VALUE 'SEATTLE, WASHINGTON 98111'.\n004600 01  TAPE-ALIGN-1            PIC X(72)   VALUE\n004610     '         1         2         3         4         5         6\n004620-    '         7  '.\n004630 01  TAPE-ALIGN-2            PIC X(72)   VALUE\n004640     '123456789012345678901234567890123456789012345678901234567890\n004650-    '123456789012'.\n004660 01  TAPE-ALIGN-3            PIC X(72)   VALUE     '* *  P R I N T\n004670-    ' E R    A L I G N M E N T    I N S T R U C T I O N S   * *'.\n004680 01  TAPE-ALIGN-4            PIC X(72)   VALUE     '* FOR PROPER F\n004690-    'ORM ALIGNMENT PRINT POSITION ONE SHOULD BE 1.3 INCHES    *'.\n004700 01  TAPE-ALIGN-5            PIC X(72)   VALUE     '* FROM THE LEF\n004710-    'T EDGE OF THE PAPER. TRIM THE PAPER .4 OF AN INCH FROM   *'.\n004720 01  TAPE-ALIGN-6            PIC X(72)   VALUE     '* THE EDGES\n004730-    'AND TO THE RIGHT OF THE X. THE ASTERISKS SHOW THE FIRST  *'.\n004740 01  TAPE-ALIGN-7            PIC X(72)   VALUE     '* AND LAST POS\n004750-    'ITIONS OF THE BODY OF THE DOCUMENT.                      *'.\n004760     SKIP2\n004770 01  ROMAN-NUMERALS.\n004780     02  FILLER              PIC X(6)    VALUE  'I     '.\n004790     02  FILLER              PIC X(6)    VALUE  'II    '.\n004800     02  FILLER              PIC X(6)    VALUE  'III   '.\n004810     02  FILLER              PIC X(6)    VALUE  'IV    '.\n004820     02  FILLER              PIC X(6)    VALUE  'V     '.\n004830     02  FILLER              PIC X(6)    VALUE  'VI    '.\n004840     02  FILLER              PIC X(6)    VALUE  'VII   '.\n004850     02  FILLER              PIC X(6)    VALUE  'VIII  '.\n004860     02  FILLER              PIC X(6)    VALUE  'IX    '.\n004870     02  FILLER              PIC X(6)    VALUE  'X     '.\n004880     02  FILLER              PIC X(6)    VALUE  'XI    '.\n004890     02  FILLER              PIC X(6)    VALUE  'XII   '.\n004900     02  FILLER              PIC X(6)    VALUE  'XIII  '.\n004910     02  FILLER              PIC X(6)    VALUE  'XIV   '.\n004920     02  FILLER              PIC X(6)    VALUE  'XV    '.\n004930     02  FILLER              PIC X(6)    VALUE  'XVI   '.\n004940     02  FILLER              PIC X(6)    VALUE  'XVII  '.\n004950     02  FILLER              PIC X(6)    VALUE  'XVIII '.\n004960     02  FILLER              PIC X(6)    VALUE  'XIX   '.\n004970     02  FILLER              PIC X(6)    VALUE  'XX    '.\n004980     02  FILLER              PIC X(6)    VALUE  'XXI   '.\n004990     02  FILLER              PIC X(6)    VALUE  'XXII  '.\n005000     02  FILLER              PIC X(6)    VALUE  'XXIII '.\n005010     02  FILLER              PIC X(6)    VALUE  'XXIV  '.\n005020     02  FILLER              PIC X(6)    VALUE  'XXV   '.\n005030     02  FILLER              PIC X(6)    VALUE  'XXVI  '.\n005040     02  FILLER              PIC X(6)    VALUE  'XXVII '.\n005050     02  FILLER              PIC X(6)    VALUE  'XXVIII'.\n005060     02  FILLER              PIC X(6)    VALUE  'XXIX  '.\n005070     02  FILLER              PIC X(6)    VALUE  'XXX   '.\n005080     02  FILLER              PIC X(6)    VALUE  'XXXI  '.\n005090     02  FILLER              PIC X(6)    VALUE  'XXXII '.\n005100     02  FILLER              PIC X(6)    VALUE  'XXXIII'.\n005110     02  FILLER              PIC X(6)    VALUE  'XXXIV '.\n005120     02  FILLER              PIC X(6)    VALUE  'XXXV  '.\n005130     02  FILLER              PIC X(6)    VALUE  'XXXVI '.\n005140     02  FILLER              PIC X(6)    VALUE  'XXXVII'.\n005150     02  FILLER              PIC X(6)    VALUE  'XXXIIX'.\n005160     02  FILLER              PIC X(6)    VALUE  'XXXIX '.\n005170     02  FILLER              PIC X(6)    VALUE  'XL    '.\n005180     02  FILLER              PIC X(6)    VALUE  'XLI   '.\n005190     02  FILLER              PIC X(6)    VALUE  'XLII  '.\n005200     02  FILLER              PIC X(6)    VALUE  'XLIII '.\n005210     02  FILLER              PIC X(6)    VALUE  'XLIV  '.\n005220     02  FILLER              PIC X(6)    VALUE  'XLV   '.\n005230     02  FILLER              PIC X(6)    VALUE  'XLVI  '.\n005240     02  FILLER              PIC X(6)    VALUE  'XLVII '.\n005250     02  FILLER              PIC X(6)    VALUE  'XLVIII'.\n005260     02  FILLER              PIC X(6)    VALUE  'IL    '.\n005270     02  FILLER              PIC X(6)    VALUE  'L     '.\n005280 01  R-NUMS              REDEFINES   ROMAN-NUMERALS.\n005290     02  ROMAN-NBRS          PIC X(6)      OCCURS 50 TIMES.\n005300     EJECT\n005310 PROCEDURE DIVISION.\n005320     SKIP3\n005330 START-RUN.\n005340     OPEN INPUT CARD-FILE.\n005350     OPEN OUTPUT PRINT-FILE.\n005360     EJECT\n005370 INITIALIZE.\n005380     MOVE 1 TO EJECT-SW.\n005390     MOVE 1 TO MODE-OF-OUTPUT.\n005400     OPEN OUTPUT LINE-IMAGE, TABLE-FILE, DIAGNOSTICS-FILE.\n005410     MOVE 'NARR ' TO MODE-INDICATOR.\n005420     MOVE SPACES TO  BKHED-SW,       BKNUM-SW,       COVER-SW,\n005430                     COLM-HEAD-STORE,\n005440                     DIAGNOSTICS-SW, LEFT-SW,        NO-TABLE-SW,\n005450         NO-DATE-SW, NOHED-SW,       PAGLIN-SW,      RESEQ-SW,\n005460                     PARA-LABELS,    PLAB-SW,\n005470                     PLAB-CARD-STORE,\n005480                     SEHED-SW,       SENUM-SW,       SUB-PAG-SW,\n005490                     TABLE-SW,       TOO-LATE-SW,\n005500                     NORM-SPAC,      STORE-HEAD,   STORE-OLD-HEAD,\n005510                     STORE-PRINT-REC, STORE-SPAC-CTL, PRINT-REC,\n005520                     SECT-NAME,      SECT-NUMBER.\n005530     MOVE ZEROES TO  CARD-CTR,       COPIES-PTD,     COVER-CTR,\n005540                     LINES-CTR,      PAGE-CTR,       PAGLIN-CTR,\n005550                     TAPE-RECDS,\n005560                     SUB,            SUB-PAG-CTR,    CURR-DATE.\n005570     ACCEPT CURR-DATE-DATE FROM DATE.\n005580     MOVE BYY TO AYY.\n005590     MOVE '1' TO NO-DATE-SW.\n005600     MOVE 01     TO  COPY-CTR.\n005610     MOVE 56     TO  LINES-LIMIT.\n005620     MOVE 70 TO XLINES-LIMIT.\n005630     ALTER TABLE-EXIT TO PROCEED TO BEGIN-COPIES.\n005640     EJECT\n005650 READ-CARD.\n005660     IF PLAB-SW IS NOT EQUAL TO 1, GO TO READ-CARD-CONTD.\n005670         MOVE SPACE TO PLAB-SW.\n005680         MOVE SPACES TO CTL-WORD.\n005690         MOVE PLAB-CARD-STORE TO CARD-DATA.\n005700     IF CARD-DATA IS EQUAL TO SPACES GO TO READ-CARD.\n005710         GO TO TEST-MODE.\n005720 READ-CARD-CONTD.\n005730     READ CARD-FILE, AT END GO TO LAST-CARD.\n005740 READ-CARD-1.\n005750     ADD 1 TO CARD-CTR.\n005760     IF RESEQ-SW NOT = 1 GO TO TEST-MODE.\n005770     ADD 10 TO PAGLIN-CTR.\n005780     MOVE PAGLIN-CTR TO NEW-PAGLIN.\n005790     MOVE CTL-WORD TO PUNCH-CTL.\n005800     MOVE CARD-DATA TO CARD-OUT.\n005810     WRITE PUNCH-REC.\n005820 TEST-MODE.\n005830     IF REPORT-MODE GO TO REPORT-PRINTING.\n005840     IF LIST-MODE GO TO LIST-PRINTING.\n005850\n005860 TEST-CARD-TYPE.\n005870     IF  BKHED-CARD  GO TO   PROC-BKHED.\n005880     IF  BKNUM-CARD  GO TO   PROC-BKNUM.\n005890     IF   BOOK-CARD  GO TO   PROC-BOOK.\n005900     IF   COPY-CARD  GO TO   PROC-COPY.\n005910     IF  COVR1-CARD  GO TO   PROC-COVER.\n005920     IF   DATE-CARD  GO TO   PROC-DATE.\n005930     IF  DOUBL-CARD  GO TO   PROC-DOUBL.\n005940     IF  EJECT-CARD  GO TO   PROC-EJECT.\n005950     IF  LINES-CARD  GO TO   PROC-LINES.\n005960     IF   LIST-CARD  GO TO   PROC-MODE-CHG.\n005970     IF   NARR-CARD  GO TO   PROC-MODE-CHG.\n005980     IF  NOHED-CARD  GO TO   PROC-NOHED.\n005990     IF  NOTAB-CARD  GO TO   PROC-NOTAB.\n006000     IF   PAGE-CARD  GO TO   PROC-PAGE.\n006010     IF  PRTPG-CARD  GO TO   PROC-PRTPG.\n006020     IF  REPRT-CARD  GO TO   PROC-MODE-CHG.\n006030     IF  SAVE1-CARD  GO TO   PROC-SAVE1.\n006040     IF  SAVE2-CARD  GO TO   PROC-SAVE2.\n006050     IF  SAVE3-CARD  GO TO   PROC-SAVE3.\n006060     IF  SAVE4-CARD  GO TO   PROC-SAVE4.\n006070     IF  SAVE5-CARD  GO TO   PROC-SAVE5.\n006080     IF  SAVE6-CARD  GO TO   PROC-SAVE6.\n006090     IF  SAVE7-CARD  GO TO   PROC-SAVE7.\n006100     IF  SAVE8-CARD  GO TO   PROC-SAVE8.\n006110     IF  SAVE9-CARD  GO TO   PROC-SAVE9.\n006120     IF  SEHED-CARD  GO TO   PROC-SEHED.\n006130     IF  SENUM-CARD  GO TO   PROC-SENUM.\n006140     IF    SEQ-CARD  GO TO   PROC-SEQ.\n006150     IF  SINGL-CARD  GO TO   PROC-SINGL.\n006160     IF  TITLE-CARD  GO TO   PROC-MODE-CHG.\n006170     IF  XLINE-CARD  GO TO   PROC-XLINE.\n006180     MOVE 1 TO TOO-LATE-SW.\n006190     IF  COLM1-CARD  GO TO   PROC-COLM1.\n006200     IF  COLM2-CARD  GO TO   PROC-COLM2.\n006210     IF  COLM3-CARD  GO TO   PROC-COLM3.\n006220     IF  ENSUB-CARD  GO TO   PROC-ENSUB.\n006230     IF   HEAD-CARD  GO TO   PROC-HEAD.\n006240     IF  SPAC1-CARD  GO TO   PROC-SPAC1.\n006250     IF  SPAC2-CARD  GO TO   PROC-SPAC2.\n006260     IF  SPAC3-CARD  GO TO   PROC-SPAC3.\n006270     IF  SPAC4-CARD  GO TO   PROC-SPAC4.\n006280     IF  IND-A-CARD  GO TO   PROC-IND-A.\n006290     IF  IND-B-CARD  GO TO   PROC-IND-B.\n006300     IF  IND-C-CARD  GO TO   PROC-IND-C.\n006310     IF  IND-D-CARD  GO TO   PROC-IND-D.\n006320     IF  INDEX-CARD  GO TO   PROC-INDEX.\n006330     IF   NORM-CARD  GO TO   PROC-NORM.\n006340     IF   PARA-CARD  GO TO   PROC-PARA.\n006350     IF  PARIN-CARD  GO TO   PROC-PARIN.\n006360     IF  PLAB1-CARD  GO TO   PROC-PLAB.\n006370     IF  PLAB2-CARD  GO TO   PROC-PLAB.\n006380     IF  PLAB3-CARD  GO TO   PROC-PLAB.\n006390     IF  PLAB4-CARD  GO TO   PROC-PLAB.\n006400     IF  PLAB5-CARD  GO TO   PROC-PLAB.\n006410     IF  PLAB6-CARD  GO TO   PROC-PLAB.\n006420     IF  PLAB7-CARD  GO TO   PROC-PLAB.\n006430     IF  PLAB8-CARD  GO TO   PROC-PLAB.\n006440     IF  PLAB9-CARD  GO TO   PROC-PLAB.\n006450     IF  PLABA-CARD  GO TO   PROC-PLAB.\n006460     IF  PLABB-CARD  GO TO   PROC-PLAB.\n006470     IF  PLABC-CARD  GO TO   PROC-PLAB.\n006480     IF  PLABD-CARD  GO TO   PROC-PLAB.\n006490     IF  PLABE-CARD  GO TO   PROC-PLAB.\n006500     IF  PLABF-CARD  GO TO   PROC-PLAB.\n006510     IF  PLABG-CARD  GO TO   PROC-PLAB.\n006520     IF  PLABH-CARD  GO TO   PROC-PLAB.\n006530     IF  PLABI-CARD  GO TO   PROC-PLAB.\n006540     IF   SECT-CARD  GO TO   PROC-SECT.\n006550     IF  SECTN-CARD  GO TO   PROC-SECT.\n006560     IF   SKIP-CARD  GO TO   PROC-SKIP.\n006570     IF  SPAC5-CARD  GO TO   PROC-SPAC5.\n006580     IF  SPAC6-CARD  GO TO   PROC-SPAC6.\n006590     IF  SPAC7-CARD  GO TO   PROC-SPAC7.\n006600     IF  SPAC8-CARD  GO TO   PROC-SPAC8.\n006610     IF  SPAC9-CARD  GO TO   PROC-SPAC9.\n006620     IF  SUBPG-CARD  GO TO   PROC-SUBPG.\n006630     MOVE 01 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n006640     EJECT\n006650 PROC-BKHED.\n006660     MOVE 1 TO BKHED-SW.\n006670     MOVE SPACES TO BOOK-STORE.\n006680     GO TO READ-CARD.\n006690\n006700 PROC-BKNUM.\n006710     MOVE 1 TO BKNUM-SW.\n006720     MOVE SPACES TO BOOK-NUMBER.\n006730     GO TO READ-CARD.\n006740\n006750 PROC-BOOK.\n006760     IF CD-BOOK-BLNK NOT EQUAL TO SPACES ALTER TOO-LONG-EXIT\n006770     TO PROCEED TO PROC-BOOK-CONTD, GO TO DATA-TOO-LONG.\n006780 PROC-BOOK-CONTD.\n006790     IF CARD-CTR EQUAL TO 1,\n006800     MOVE CD-BOOK-NAME TO BOOK-NAME,\n006810     MOVE CD-BOOK-NUM TO BOOK-NUMBER,\n006820     GO TO READ-CARD.\n006830     GO TO LAST-CARD.\n006840\n006850 PROC-COPY.\n006860     IF TOO-LATE-SW = 1, GO TO TOO-LATE.\n006870     IF NUM-COPIES NOT NUMERIC,\n006880     MOVE 03 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n006890     IF NUM-COPIES LESS THAN 02 GO TO READ-CARD.\n006900     IF COPY-CTR GREATER THAN 01 GO TO TOO-LATE.\n006910     IF  TAPE-TWO-UP, ADD 1 TO NUM-COPIES,\n006920         DIVIDE NUM-COPIES BY 2 GIVING COPY-CTR,\n006930         GO TO READ-CARD.\n006940     MOVE NUM-COPIES TO COPY-CTR.\n006950     GO TO READ-CARD.\n006960\n006970 PROC-COLM1.\n006980         MOVE CARD-DATA TO COLM-ONE-STORE.\n006990         IF CARD-DATA IS EQUAL TO SPACES GO TO READ-CARD.\n007000         GO TO PROC-NORM.\n007010\n007020 PROC-COLM2.\n007030         MOVE CARD-DATA TO COLM-TWO-STORE.\n007040         IF CARD-DATA IS EQUAL TO SPACES GO TO READ-CARD.\n007050         GO TO PROC-NORM.\n007060\n007070 PROC-COLM3.\n007080         MOVE CARD-DATA TO COLM-THREE-STORE.\n007090         IF CARD-DATA IS EQUAL TO SPACES GO TO READ-CARD.\n007100         GO TO PROC-NORM.\n007110\n007120 PROC-COVER.\n007130     IF  TOO-LATE-SW = 1, GO TO TOO-LATE.\n007140     MOVE SPACES TO COVER-LINE-2,  COVER-SW,  COVER-LINE-3.\n007150     MOVE CARD-DATA TO COVER-LINE-1.\n007160     READ CARD-FILE, AT END GO TO LAST-CARD.\n007170     IF  NOT COVR2-CARD  GO TO CK-COVR3.\n007180     ADD 1 TO CARD-CTR.\n007190     IF  RESEQ-SW = 1, PERFORM SEQ-COVER.\n007200     MOVE CARD-DATA TO COVER-LINE-2.\n007210     READ CARD-FILE, AT END GO TO LAST-CARD.\n007220 CK-COVR3.\n007230     IF  NOT COVR3-CARD  GO TO PRINT-COVER.\n007240     ADD 1 TO CARD-CTR.\n007250     IF  RESEQ-SW = 1, PERFORM SEQ-COVER.\n007260     MOVE 1 TO COVER-SW.\n007270     MOVE CARD-DATA TO COVER-LINE-3.\n007280 PRINT-COVER.\n007290     MOVE 1 TO EJECT-SW.\n007300     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-1.\n007310     GO TO WRITE-IMAGE.\n007320 PR-COVR-1.\n007330     PERFORM COVER-BLANK-LINES THRU COVER-BLANK-EXIT.\n007340     MOVE COVER-LINE-1 TO NORM-MARGIN.\n007350     MOVE SPACE-ONE TO SPAC-CTL.\n007360     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-2.\n007370     GO TO WRITE-IMAGE.\n007380 PR-COVR-2.\n007390     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-2A.\n007400     GO TO WRITE-IMAGE.\n007410 PR-COVR-2A.\n007420     MOVE COVER-LINE-2 TO NORM-MARGIN.\n007430     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-3.\n007440     GO TO WRITE-IMAGE.\n007450 PR-COVR-3.\n007460     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-3A.\n007470     GO TO WRITE-IMAGE.\n007480 PR-COVR-3A.\n007490     MOVE COVER-LINE-3 TO NORM-MARGIN.\n007500     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-4.\n007510     GO TO WRITE-IMAGE.\n007520 PR-COVR-4.\n007530     PERFORM COVER-BLANK-LINES THRU COVER-BLANK-EXIT.\n007540     MOVE COVER-LINE-4 TO COVER-DATA.\n007550     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-5.\n007560     GO TO WRITE-IMAGE.\n007570 PR-COVR-5.\n007580     MOVE COVER-LINE-5 TO COVER-DATA.\n007590     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-7.\n007600     GO TO WRITE-IMAGE.\n007610 PR-COVR-7.\n007620     MOVE COVER-LINE-7 TO COVER-DATA.\n007630     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-8.\n007640     GO TO WRITE-IMAGE.\n007650 PR-COVR-8.\n007660     MOVE COVER-LINE-8 TO COVER-DATA.\n007670     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-9.\n007680     GO TO WRITE-IMAGE.\n007690 PR-COVR-9.\n007700     MOVE LINES-LIMIT TO LINES-CTR.\n007710     IF  COVER-SW = SPACE GO TO READ-CARD-1.\n007720     GO TO READ-CARD.\n007730 COVER-BLANK-LINES.\n007740     MOVE 7 TO COVER-CTR.\n007750     ALTER WRITE-IMAGE-EXIT TO PROCEED TO PR-COVR-10.\n007760 PR-COVR-10.\n007770     IF  COVER-CTR = 0 GO TO COVER-BLANK-EXIT.\n007780     MOVE SPACE-THREE TO SPAC-CTL.\n007790     SUBTRACT 1 FROM COVER-CTR.\n007800     GO TO WRITE-IMAGE.\n007810 COVER-BLANK-EXIT. EXIT.\n007820 SEQ-COVER.\n007830     ADD 10 TO PAGLIN-CTR.\n007840     MOVE PAGLIN-CTR TO NEW-PAGLIN.\n007850     MOVE CTL-WORD TO PUNCH-CTL.\n007860     MOVE CARD-DATA TO CARD-OUT.\n007870     WRITE PUNCH-REC.\n007880     SKIP1\n007890 PROC-DATE.\n007900     IF  TOO-LATE-SW = 1, GO TO TOO-LATE.\n007910     MOVE '1'        TO  NO-DATE-SW.\n007920     IF CARD-DATE IS NUMERIC,\n007930     MOVE CARD-DATE  TO  CURR-DATE.\n007940     IF OUTPUT-IND IS EQUAL TO 2, GO TO PROC-DATE-CONTD.\n007950     IF OUTPUT-IND IS EQUAL TO 3, GO TO PROC-DATE-CONTD.\n007960     IF OUTPUT-IND IS EQUAL TO 4, GO TO PROC-DATE-CONTD.\n007970     GO TO READ-CARD.\n007980 PROC-DATE-CONTD.\n007990     MOVE OUTPUT-IND TO  MODE-OF-OUTPUT.\n008000     IF  TAPE-TWO-UP OPEN OUTPUT TWO-UP-TAPE WITH NO REWIND,\n008010         GO TO ALIGN-TAPE.\n008020     IF  TAPE-ONE-UP OPEN OUTPUT ONE-UP-TAPE WITH NO REWIND,\n008030         GO TO ALIGN-TAPE.\n008040     IF  PRINT-ONE-UP-FORMAL  GO TO ALIGN-PRINTER.\n008050     GO TO READ-CARD.\n008060\n008070 PROC-DOUBL.\n008080     MOVE SPACE-TWO   TO NORM-SPAC.\n008090     GO TO READ-CARD.\n008100\n008110 PROC-EJECT.\n008120     ALTER HEAD-EXIT TO PROCEED TO READ-CARD.\n008130     GO TO PAGE-HEADINGS.\n008140\n008150 PROC-ENSUB.\n008160     MOVE SPACE TO SUB-PAG-SW.\n008170     MOVE ZEROS TO SUB-PAG-CTR.\n008180     GO TO READ-CARD.\n008190\n008200 PROC-HEAD.\n008210     MOVE SPACES TO COLM-HEAD-STORE.\n008220     IF TITLE-MODE MOVE SPACES TO STORE-HEAD GO TO READ-CARD.\n008230     IF NOHED-SW EQUAL TO 1 GO TO PROC-EJECT.\n008240     MOVE DATA-H TO STORE-HEAD.\n008250     ALTER HEAD-EXIT TO PROCEED TO PROC-HEAD-CONTD.\n008260     GO TO PAGE-HEADINGS.\n008270 PROC-HEAD-CONTD.\n008280     MOVE SPACES TO TABLE-RECORD.\n008290     MOVE STORE-HEAD TO TAB-HEAD.\n008300     ALTER TABLE-ENTRY-EXIT TO PROCEED TO PROC-HEAD-BLANKS.\n008310     GO TO TABLE-ENTRY.\n008320 PROC-HEAD-BLANKS.\n008330     IF  BLANKS-H NOT EQUAL TO SPACES\n008340         ALTER TOO-LONG-EXIT TO PROCEED TO READ-CARD,\n008350     GO TO DATA-TOO-LONG.\n008360 PROC-HEAD-EXIT.\n008370     GO TO READ-CARD.\n008380\n008390 PROC-IND-A.\n008400     IF BLANKS-A NOT = SPACES, ALTER TOO-LONG-EXIT TO PROCEED TO\n008410     IND-A-CONTD, GO TO DATA-TOO-LONG.\n008420 IND-A-CONTD.\n008430     MOVE DATA-A TO A-MARGIN.\n008440     GO TO PROC-NORM-CONTD.\n008450\n008460 PROC-IND-B.\n008470     IF BLANKS-B NOT = SPACES, ALTER TOO-LONG-EXIT TO PROCEED TO\n008480     IND-B-CONTD, GO TO DATA-TOO-LONG.\n008490 IND-B-CONTD.\n008500     MOVE DATA-B TO B-MARGIN.\n008510     GO TO PROC-NORM-CONTD.\n008520\n008530 PROC-IND-C.\n008540     IF BLANKS-C NOT = SPACES, ALTER TOO-LONG-EXIT TO PROCEED TO\n008550     IND-C-CONTD, GO TO DATA-TOO-LONG.\n008560 IND-C-CONTD.\n008570     MOVE DATA-C TO C-MARGIN.\n008580     GO TO PROC-NORM-CONTD.\n008590\n008600 PROC-IND-D.\n008610     IF BLANKS-D NOT = SPACES, ALTER TOO-LONG-EXIT TO PROCEED TO\n008620     IND-D-CONTD, GO TO DATA-TOO-LONG.\n008630 IND-D-CONTD.\n008640     MOVE DATA-D TO D-MARGIN.\n008650     GO TO PROC-NORM-CONTD.\n008660\n008670 PROC-INDEX.\n008680     MOVE DATA-B TO NORM-MARGIN.\n008690     MOVE '    *' TO PRINT-PAGLIN.\n008700     MOVE SPACE-THREE TO SPAC-CTL.\n008710     IF LINES-CTR IS GREATER THAN XLINES-LIMIT,\n008720         MOVE 67 TO LINES-CTR.\n008730     ALTER NORM-EXIT TO PROCEED TO TABLE-INDEX.\n008740     GO TO NORM-PRINT.\n008750 TABLE-INDEX.\n008760     IF BLANKS-B NOT EQUAL TO SPACES,\n008770     ALTER TOO-LONG-EXIT TO PROCEED TO INDEX-CONTD,\n008780     GO TO DATA-TOO-LONG.\n008790 INDEX-CONTD.\n008800     MOVE SPACES TO TABLE-RECORD.\n008810     MOVE DATA-B TO TAB-INDEX.\n008820     ALTER TABLE-ENTRY-EXIT TO PROCEED TO INDEX-EXIT.\n008830     GO TO TABLE-ENTRY.\n008840 INDEX-EXIT.\n008850     IF REPORT-MODE GO TO READ-CARD.\n008860     ALTER NORM-EXIT TO PROCEED TO READ-CARD.\n008870     GO TO PRINT-BLANK.\n008880\n008890 PROC-LINES.\n008900     IF NUM-LINES  NOT NUMERIC,\n008910     MOVE 04 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n008920     IF NUM-LINES GREATER THAN 66,\n008930     MOVE 05 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n008940     MOVE NUM-LINES TO LINES-LIMIT.\n008950     IF LINES-CTR LESS THAN LINES-LIMIT GO TO READ-CARD.\n008960     ALTER HEAD-EXIT TO PROCEED TO READ-CARD.\n008970     GO TO PAGE-HEADINGS.\n008980\n008990 PROC-MODE-CHG.\n009000     MOVE CTL-WORD TO MODE-INDICATOR.\n009010     IF REPORT-MODE MOVE SPACE TO PAGLIN-SW.\n009020     IF CARD-DATA EQUAL TO SPACES GO TO PROC-MODE-CONTD.\n009030     DISPLAY 'NOW CHANGING TO ', CTL-WORD, 'MODE ', CARD-CTR,\n009040     UPON CONSOLE.\n009050     DISPLAY CARD-DATA UPON CONSOLE.\n009060     STOP 'EOB TO CONTINUE.'.\n009070 PROC-MODE-CONTD.\n009080     IF NARR-MODE GO TO PROC-SINGL.\n009090     IF LIST-MODE GO TO PROC-SINGL.\n009100     IF PAGE-CTR EQUAL TO ZEROS ADD 1 TO PAGE-CTR.\n009110     GO TO PROC-SINGL.\n009120\n009130 PROC-NOHED.\n009140     IF TOO-LATE-SW EQUAL TO 1 GO TO TOO-LATE.\n009150     MOVE 1 TO NOHED-SW, NO-TABLE-SW.\n009160     GO TO READ-CARD.\n009170\n009180 PROC-NORM.\n009190     MOVE CARD-DATA TO NORM-MARGIN.\n009200 PROC-NORM-CONTD.\n009210     MOVE NORM-SPAC TO SPAC-CTL.\n009220     ALTER NORM-EXIT TO PROCEED TO READ-CARD.\n009230     GO TO NORM-PRINT.\n009240\n009250 PROC-NOTAB.\n009260     IF TOO-LATE-SW = 1 GO TO TOO-LATE.\n009270     MOVE 1 TO NO-TABLE-SW.\n009280     GO TO READ-CARD.\n009290\n009300 PROC-PAGE.\n009310     IF BEG-PAG-NUM NOT NUMERIC,\n009320     MOVE 06 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n009330     MOVE BEG-PAG-NUM TO PAGE-CTR.\n009340     SUBTRACT 1 FROM PAGE-CTR.\n009350     MOVE SPACE TO SUB-PAG-SW.\n009360     MOVE ZEROS TO SUB-PAG-CTR.\n009370     GO TO READ-CARD.\n009380\n009390 PROC-PARA.\n009400     MOVE CARD-DATA TO NORM-MARGIN.\n009410 PROC-PARA-CONTD.\n009420     IF  NORM-SPAC = SPACE-TWO,  MOVE SPACE-THREE TO SPAC-CTL.\n009430     IF  NORM-SPAC = SPACE-ONE,  MOVE SPACE-TWO   TO SPAC-CTL.\n009440     ALTER NORM-EXIT TO PROCEED TO READ-CARD.\n009450     GO TO NORM-PRINT.\n009460\n009470 PROC-PARIN.\n009480     MOVE DATA-A TO A-MARGIN.\n009490     IF BLANKS-A NOT = SPACES, ALTER TOO-LONG-EXIT TO PROCEED TO\n009500     PROC-PARA-CONTD,\n009510     GO TO DATA-TOO-LONG.\n009520     GO TO PROC-PARA-CONTD.\n009530\n009540 PROC-PLAB.\n009550     MOVE 1 TO PLAB-SW.\n009560     MOVE CARD-DATA TO PLAB-CARD-STORE.\n009570     IF PLAB1-CARD,\n009580         MOVE PLAB-ONE   TO CARD-DATA,\n009590         GO TO PROC-PLAB-NORM.\n009600     IF PLAB2-CARD,\n009610         MOVE PLAB-TWO   TO CARD-DATA,\n009620         GO TO PROC-PLAB-NORM.\n009630     IF PLAB3-CARD,\n009640         MOVE PLAB-THREE TO CARD-DATA,\n009650         GO TO PROC-PLAB-NORM.\n009660     IF PLAB4-CARD,\n009670         MOVE PLAB-FOUR  TO CARD-DATA,\n009680         GO TO PROC-PLAB-NORM.\n009690     IF PLAB5-CARD,\n009700         MOVE PLAB-FIVE  TO CARD-DATA,\n009710         GO TO PROC-PLAB-NORM.\n009720     IF PLAB6-CARD,\n009730         MOVE PLAB-SIX   TO CARD-DATA,\n009740         GO TO PROC-PLAB-NORM.\n009750     IF PLAB7-CARD,\n009760         MOVE PLAB-SEVEN TO CARD-DATA,\n009770         GO TO PROC-PLAB-NORM.\n009780     IF PLAB8-CARD,\n009790         MOVE PLAB-EIGHT TO CARD-DATA,\n009800         GO TO PROC-PLAB-NORM.\n009810     IF PLAB9-CARD,\n009820         MOVE PLAB-NINE  TO CARD-DATA,\n009830         GO TO PROC-PLAB-NORM.\n009840     IF PLABA-CARD,\n009850         MOVE PLAB-ONE   TO CARD-DATA,\n009860         GO TO PROC-PLAB-PARA.\n009870     IF PLABB-CARD,\n009880         MOVE PLAB-TWO   TO CARD-DATA,\n009890         GO TO PROC-PLAB-PARA.\n009900     IF PLABC-CARD,\n009910         MOVE PLAB-THREE TO CARD-DATA,\n009920         GO TO PROC-PLAB-PARA.\n009930     IF PLABD-CARD,\n009940         MOVE PLAB-FOUR  TO CARD-DATA,\n009950         GO TO PROC-PLAB-PARA.\n009960     IF PLABE-CARD,\n009970         MOVE PLAB-FIVE  TO CARD-DATA,\n009980         GO TO PROC-PLAB-PARA.\n009990     IF PLABF-CARD,\n010000         MOVE PLAB-SIX   TO CARD-DATA,\n010010         GO TO PROC-PLAB-PARA.\n010020     IF PLABG-CARD,\n010030         MOVE PLAB-SEVEN TO CARD-DATA,\n010040         GO TO PROC-PLAB-PARA.\n010050     IF PLABH-CARD,\n010060         MOVE PLAB-EIGHT TO CARD-DATA,\n010070         GO TO PROC-PLAB-PARA.\n010080     IF PLABI-CARD,\n010090         MOVE PLAB-NINE  TO CARD-DATA,\n010100         GO TO PROC-PLAB-PARA.\n010110 PROC-PLAB-NORM.\n010120     MOVE SPACES TO CTL-WORD.\n010130     GO TO PROC-NORM.\n010140 PROC-PLAB-PARA.\n010150     MOVE 'PARA ' TO CTL-WORD.\n010160     GO TO PROC-PARA.\n010170\n010180 PROC-PRTPG.\n010190     MOVE 1 TO PAGLIN-SW.\n010200     GO TO READ-CARD.\n010210\n010220 PROC-SAVE1.\n010230     MOVE CARD-DATA TO PLAB-ONE.\n010240     GO TO READ-CARD.\n010250\n010260 PROC-SAVE2.\n010270     MOVE CARD-DATA TO PLAB-TWO.\n010280     GO TO READ-CARD.\n010290\n010300 PROC-SAVE3.\n010310     MOVE CARD-DATA TO PLAB-THREE.\n010320     GO TO READ-CARD.\n010330\n010340 PROC-SAVE4.\n010350     MOVE CARD-DATA TO PLAB-FOUR.\n010360     GO TO READ-CARD.\n010370\n010380 PROC-SAVE5.\n010390     MOVE CARD-DATA TO PLAB-FIVE.\n010400     GO TO READ-CARD.\n010410\n010420 PROC-SAVE6.\n010430     MOVE CARD-DATA TO PLAB-SIX.\n010440     GO TO READ-CARD.\n010450\n010460 PROC-SAVE7.\n010470     MOVE CARD-DATA TO PLAB-SEVEN.\n010480     GO TO READ-CARD.\n010490\n010500 PROC-SAVE8.\n010510     MOVE CARD-DATA TO PLAB-EIGHT.\n010520     GO TO READ-CARD.\n010530\n010540 PROC-SAVE9.\n010550     MOVE CARD-DATA TO PLAB-NINE.\n010560     GO TO READ-CARD.\n010570\n010580 PROC-SECT.\n010590     MOVE SPACES TO COLM-HEAD-STORE.\n010600     IF TITLE-MODE MOVE SPACES TO CARD-DATA.\n010610     IF NOHED-SW EQUAL TO 1 GO TO PROC-EJECT.\n010620     IF SEHED-SW EQUAL TO 1 MOVE SPACES TO CARD-DATA.\n010630     IF SENUM-SW EQUAL TO 1 MOVE SPACES TO CD-SECT-NUM.\n010640     MOVE CD-SECT-NAME TO SECT-NAME.\n010650     MOVE CD-SECT-NUM TO SECT-NUMBER.\n010660     IF SECT-NUMBER EQUAL TO SPACES\n010670     MOVE SPACES TO SECT-SEC\n010680     ELSE MOVE ' SEC ' TO SECT-SEC.\n010690     MOVE SPACES TO STORE-HEAD.\n010700     IF CARD-DATA EQUAL TO SPACES GO TO READ-CARD.\n010710     IF SECTN-CARD GO TO PROC-SECT-CONTD.\n010720     ALTER HEAD-EXIT TO PROCEED TO PROC-SECT-CONTD.\n010730     GO TO PAGE-HEADINGS.\n010740 PROC-SECT-CONTD.\n010750     MOVE SPACES TO TABLE-RECORD.\n010760     MOVE SECT-STORE TO TAB-SECT-NAM.\n010770     ALTER TABLE-ENTRY-EXIT TO PROCEED TO PROC-SECT-BLANKS.\n010780     GO TO TABLE-ENTRY.\n010790 PROC-SECT-BLANKS.\n010800     IF CD-SECT-BLNK NOT EQUAL TO SPACES ALTER TOO-LONG-EXIT\n010810     TO PROCEED TO READ-CARD,\n010820     GO TO DATA-TOO-LONG.\n010830     GO TO READ-CARD.\n010840\n010850 PROC-SEHED.\n010860     MOVE 1 TO SEHED-SW.\n010870     MOVE SPACES TO SECT-STORE.\n010880     GO TO READ-CARD.\n010890\n010900 PROC-SENUM.\n010910     MOVE 1 TO SENUM-SW.\n010920     MOVE SPACES TO SECT-NUMBER, SECT-SEC.\n010930     GO TO READ-CARD.\n010940\n010950 PROC-SEQ.\n010960     IF TOO-LATE-SW = 1, GO TO TOO-LATE.\n010970     IF RESEQ-SW EQUAL TO 1 GO TO TOO-LATE.\n010980     IF BEG-SEQ-SPAC EQUAL TO SPACES,\n010990     MOVE  ZEROS TO BEG-SEQ-NUM.\n011000     IF BEG-SEQ-NUM NOT NUMERIC,\n011010     MOVE 07 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n011020     MOVE 1 TO RESEQ-SW.\n011030     OPEN OUTPUT PUNCH-FILE.\n011040     MOVE BEG-SEQ-NUM TO PAGLIN-CTR.\n011050     GO TO READ-CARD.\n011060\n011070 PROC-SINGL.\n011080     MOVE SPACE-ONE   TO NORM-SPAC.\n011090     GO TO READ-CARD.\n011100\n011110 PROC-SKIP.\n011120     MOVE STORE-HEAD TO STORE-OLD-HEAD.\n011130     ALTER PROC-HEAD-EXIT TO PROCEED TO PROC-SKIP-CONTD.\n011140     GO TO PROC-HEAD.\n011150 PROC-SKIP-CONTD.\n011160     ALTER PROC-HEAD-EXIT TO PROCEED TO READ-CARD.\n011170     MOVE STORE-OLD-HEAD TO STORE-HEAD.\n011180     MOVE 67 TO LINES-CTR.\n011190     GO TO READ-CARD.\n011200\n011210 PROC-SPAC9.\n011220     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC8.\n011230     GO TO PRINT-BLANK.\n011240\n011250 PROC-SPAC8.\n011260     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC7.\n011270     GO TO PRINT-BLANK.\n011280\n011290 PROC-SPAC7.\n011300     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC6.\n011310     GO TO PRINT-BLANK.\n011320\n011330 PROC-SPAC6.\n011340     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC5.\n011350     GO TO PRINT-BLANK.\n011360\n011370 PROC-SPAC5.\n011380     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC4.\n011390     GO TO PRINT-BLANK.\n011400\n011410 PROC-SPAC4.\n011420     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC3.\n011430     GO TO PRINT-BLANK.\n011440\n011450 PROC-SPAC3.\n011460     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC2.\n011470     GO TO PRINT-BLANK.\n011480\n011490 PROC-SPAC2.\n011500     ALTER  NORM-EXIT TO PROCEED TO PROC-SPAC1.\n011510     GO TO PRINT-BLANK.\n011520\n011530 PROC-SPAC1.\n011540     IF CARD-DATA IS NOT EQUAL TO SPACES GO TO PROC-PARA.\n011550     ALTER  NORM-EXIT TO PROCEED TO READ-CARD.\n011560     MOVE CARD-DATA TO NORM-MARGIN.\n011570     MOVE SPACE-ONE TO SPAC-CTL.\n011580     GO TO NORM-PRINT.\n011590\n011600 PRINT-BLANK.\n011610     MOVE SPACES TO PRINT-LINE.\n011620     MOVE NORM-SPAC TO SPAC-CTL.\n011630     GO TO TEST-LINES.\n011640\n011650 PROC-SUBPG.\n011660     IF BEG-PAG-SPAC EQUAL TO SPACES GO TO PROC-SUBPG-BLNKS.\n011670     IF BEG-PAG-NUM NOT NUMERIC,\n011680     MOVE 08 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n011690     IF BEG-SUB-NUM NOT NUMERIC,\n011700     MOVE 09 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n011710     MOVE 1 TO SUB-PAG-SW.\n011720     MOVE BEG-SUB-NUM TO SUB-PAG-CTR.\n011730     SUBTRACT 1 FROM SUB-PAG-CTR.\n011740     MOVE BEG-PAG-NUM TO PAGE-CTR.\n011750     GO TO READ-CARD.\n011760 PROC-SUBPG-BLNKS.\n011770     MOVE 1 TO SUB-PAG-SW.\n011780     MOVE ZEROS TO SUB-PAG-CTR.\n011790     GO TO READ-CARD.\n011800\n011810 PROC-XLINE.\n011820     IF NUM-LINES NOT NUMERIC,\n011830         MOVE 04 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n011840     IF NUM-LINES GREATER THAN 66,\n011850         MOVE 05 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n011860     MOVE NUM-LINES TO XLINES-LIMIT.\n011870     SUBTRACT 03 FROM  XLINES-LIMIT.\n011880     IF XLINES-LIMIT IS NEGATIVE, MOVE ZEROS TO XLINES-LIMIT.\n011890     GO TO READ-CARD.\n011900     EJECT\n011910 NORM-PRINT.\n011920     IF PAGLIN-SW NOT EQUAL TO 1 GO TO TEST-LINES.\n011930     IF RESEQ-SW EQUAL TO 1 MOVE PAGLIN-CTR TO PR-PAGLIN, ELSE\n011940     MOVE CARD-SEQ TO PRINT-PAGLIN.\n011950 TEST-LINES.\n011960     IF  SPAC-CTL EQUAL TO   SPACE-ONE   ADD 1 TO LINES-CTR.\n011970     IF  SPAC-CTL EQUAL TO   SPACE-TWO   ADD 2 TO LINES-CTR.\n011980     IF  SPAC-CTL EQUAL TO   SPACE-THREE ADD 3 TO LINES-CTR.\n011990     IF LINES-CTR IS NOT GREATER THAN LINES-LIMIT\n012000     GO TO NORM-PRINT-CONTD.\n012010     MOVE PRINT-LINE TO STORE-PRINT-REC.\n012020     MOVE SPAC-CTL TO STORE-SPAC-CTL.\n012030     MOVE SPACES TO PRINT-REC.\n012040     ALTER HEAD-EXIT TO PROCEED TO NORM-PRINT-RESTORE.\n012050     GO TO PAGE-HEADINGS.\n012060 NORM-PRINT-RESTORE.\n012070     MOVE STORE-PRINT-REC TO PRINT-LINE.\n012080     MOVE STORE-SPAC-CTL TO SPAC-CTL.\n012090     GO TO NORM-PRINT.\n012100 NORM-PRINT-CONTD.\n012110     ALTER WRITE-IMAGE-EXIT TO PROCEED TO NORM-EXIT.\n012120     GO TO WRITE-IMAGE.\n012130 NORM-EXIT. GO TO READ-CARD.\n012140     EJECT\n012150 WRITE-IMAGE.\n012160     IF  EJECT-SW EQUAL TO 1 MOVE SKIP-TO-ONE TO SPAC-CTL,\n012170     MOVE SPACE TO EJECT-SW.\n012180     IF COPY-CTR NOT GREATER THAN 01, GO TO PRINT-A-LINE.\n012190     MOVE PRINT-REC TO DISK-REC.\n012200\n012210     WRITE DISK-REC, INVALID KEY GO TO PRINT-A-LINE.\n012220 PRINT-A-LINE.\n012230     IF  TAPE-TWO-UP, GO TO WRITE-TWO-UP.\n012240     IF  TAPE-ONE-UP, GO TO WRITE-ONE-UP.\n012250     WRITE PRINT-REC AFTER POSITIONING SPAC-CTL.\n012260     MOVE SPACES TO PRINT-REC.\n012270 WRITE-IMAGE-EXIT. GO TO NORM-EXIT.\n012280\n012290 WRITE-TWO-UP.\n012300     MOVE SPAC-CTL   TO  T-LINE-CNTRL.\n012310     MOVE P-72       TO  LEFT-PAGE.\n012320     MOVE SPACES     TO  CENTER.\n012330     MOVE P-72       TO  RIGHT-PAGE.\n012340     MOVE SPACES     TO  EXTRAS.\n012350     WRITE TWO-UP-LINE.\n012360     MOVE SPACES     TO  PRINT-REC.\n012370     ADD 1 TO TAPE-RECDS.\n012380     GO TO WRITE-IMAGE-EXIT.\n012390\n012400 WRITE-ONE-UP.\n012410     MOVE SPAC-CTL   TO  O-LINE-CNTRL.\n012420     MOVE PRINT-LINE TO  O-DATA-LINE.\n012430     WRITE ONE-UP-LINE.\n012440     MOVE SPACES     TO  PRINT-REC.\n012450     ADD 1 TO TAPE-RECDS.\n012460     GO TO WRITE-IMAGE-EXIT.\n012470\n012480 PRINTER.\n012490     WRITE PRINT-REC AFTER POSITIONING SPAC-CTL.\n012500     MOVE SPACES TO PRINT-REC.\n012510 PRINT-EXIT. GO TO.\n012520     EJECT\n012530 TABLE-ENTRY.\n012540     IF NO-TABLE-SW EQUAL TO 1 GO TO TABLE-ENTRY-EXIT.\n012550     MOVE 1 TO TABLE-SW.\n012560     MOVE SPACE-TWO TO TAB-REC-SPAC.\n012570     IF SECTN-CARD, GO TO WRITE-TRIK.\n012580     PERFORM LEADER-FILL THRU LEADER-EXIT.\n012590     MOVE PAGE-CTR TO TAB-PAGE-NO.\n012600     IF SUB-PAG-SW IS EQUAL TO 1, MOVE '.' TO TAB-DECIMAL,\n012610         MOVE SUB-PAG-CTR TO TAB-SUB-PAGE.\n012620 WRITE-TRIK.\n012630     WRITE TABLE-RECORD, INVALID KEY GO TO TABLE-ENTRY-EXIT.\n012640 TABLE-ENTRY-EXIT. GO TO.\n012650\n012660 LEADER-FILL.\n012670     MOVE 30 TO SUB.\n012680 LEADER-LOOP.\n012690     IF  LEADERS (SUB) EQUAL TO SPACE AND\n012700         SUB GREATER THAN ZERO\n012710     MOVE ' .' TO LEADERS (SUB),\n012720         SUBTRACT 01 FROM SUB,\n012730         GO TO LEADER-LOOP.\n012740 LEADER-EXIT. EXIT.\n012750     EJECT\n012760 REPORT-PRINTING.\n012770     IF BKHED-CARD GO TO PROC-BKHED.\n012780     IF BKNUM-CARD GO TO PROC-BKNUM.\n012790     IF BOOK-CARD GO TO LAST-CARD.\n012800     IF COPY-CARD  GO TO PROC-COPY.\n012810     IF DOUBL-CARD GO TO TEST-LEFT.\n012820     IF EJECT-CARD GO TO TEST-LEFT.\n012830     IF LINES-CARD GO TO PROC-LINES.\n012840     IF LIST-CARD GO TO TEST-LEFT.\n012850     IF NARR-CARD GO TO TEST-LEFT.\n012860     IF NOHED-CARD GO TO PROC-NOHED.\n012870     IF NOTAB-CARD GO TO PROC-NOTAB.\n012880     IF PAGE-CARD GO TO PROC-PAGE.\n012890     IF PRTPG-CARD GO TO PROC-PRTPG.\n012900     IF REPRT-CARD GO TO TEST-LEFT.\n012910     IF SEHED-CARD GO TO PROC-SEHED.\n012920     IF SENUM-CARD GO TO PROC-SENUM.\n012930     IF SEQ-CARD   GO TO PROC-SEQ.\n012940     IF SINGL-CARD GO TO TEST-LEFT.\n012950     IF TITLE-CARD GO TO TEST-LEFT.\n012960     IF XLINE-CARD GO TO PROC-XLINE.\n012970     MOVE 1 TO TOO-LATE-SW.\n012980     IF ENSUB-CARD GO TO PROC-ENSUB.\n012990     IF INDEX-CARD GO TO TABLE-INDEX.\n013000     IF NORM-CARD GO TO REPORT-NORMAL.\n013010     IF SPAC1-CARD GO TO TEST-LEFT.\n013020     IF SPAC2-CARD GO TO TEST-LEFT.\n013030     IF SPAC3-CARD GO TO TEST-LEFT.\n013040     IF SPAC4-CARD GO TO TEST-LEFT.\n013050     IF SPAC5-CARD GO TO TEST-LEFT.\n013060     IF SPAC6-CARD GO TO TEST-LEFT.\n013070     IF SPAC7-CARD GO TO TEST-LEFT.\n013080     IF SPAC8-CARD GO TO TEST-LEFT.\n013090     IF SPAC9-CARD GO TO TEST-LEFT.\n013100     IF SUBPG-CARD GO TO PROC-SUBPG.\n013110     MOVE 02 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n013120\n013130 REPORT-NORMAL.\n013140     IF R-CRD-BLANKS NOT EQUAL TO SPACES ALTER TOO-LONG-EXIT TO\n013150     PROCEED TO REPORT-CONTD, GO TO DATA-TOO-LONG.\n013160 REPORT-CONTD.\n013170     IF LEFT-SW = 1 GO TO PRINT-RIGHT.\n013180     MOVE 1 TO LEFT-SW.\n013190     MOVE REPORT-CARD TO LEFT-HALF.\n013200     GO TO READ-CARD.\n013210\n013220 PRINT-RIGHT.\n013230     MOVE SPACE TO LEFT-SW.\n013240     MOVE REPORT-CARD TO RIGHT-HALF.\n013250     GO TO PROC-NORM-CONTD.\n013260\n013270 TEST-LEFT.\n013280     IF LEFT-SW = 1 MOVE SPACE TO LEFT-SW,\n013290     ALTER NORM-EXIT TO PROCEED TO TEST-REPORT-CARDS,\n013300     MOVE NORM-SPAC TO SPAC-CTL,\n013310     GO TO NORM-PRINT.\n013320\n013330 TEST-REPORT-CARDS.\n013340     IF DOUBL-CARD GO TO PROC-DOUBL.\n013350     IF EJECT-CARD GO TO PROC-EJECT.\n013360     IF LIST-CARD GO TO PROC-MODE-CHG.\n013370     IF NARR-CARD GO TO PROC-MODE-CHG.\n013380     IF REPRT-CARD GO TO PROC-MODE-CHG.\n013390     IF SINGL-CARD GO TO PROC-SINGL.\n013400     IF SPAC1-CARD GO TO PROC-SPAC1.\n013410     IF SPAC2-CARD GO TO PROC-SPAC2.\n013420     IF SPAC3-CARD GO TO PROC-SPAC3.\n013430     IF SPAC4-CARD GO TO PROC-SPAC4.\n013440     IF SPAC5-CARD GO TO PROC-SPAC5.\n013450     IF SPAC6-CARD GO TO PROC-SPAC6.\n013460     IF SPAC7-CARD GO TO PROC-SPAC7.\n013470     IF SPAC8-CARD GO TO PROC-SPAC8.\n013480     IF SPAC9-CARD GO TO PROC-SPAC9.\n013490     IF TITLE-CARD GO TO PROC-MODE-CHG.\n013500     GO TO READ-CARD.\n013510     EJECT\n013520 LIST-PRINTING.\n013530     IF BOOK-CARD GO TO LAST-CARD.\n013540     IF DOUBL-CARD GO TO PROC-DOUBL.\n013550     IF EJECT-CARD GO TO PROC-EJECT.\n013560     IF  LIST-CARD GO TO PROC-MODE-CHG.\n013570     IF  NARR-CARD GO TO PROC-MODE-CHG.\n013580     IF REPRT-CARD GO TO PROC-MODE-CHG.\n013590     IF SINGL-CARD GO TO PROC-SINGL.\n013600     IF TITLE-CARD GO TO PROC-MODE-CHG.\n013610     IF RESEQ-SW EQUAL TO 1 MOVE PAGLIN-CTR TO LIST-SEQ, ELSE\n013620     MOVE CARD-SEQ TO LIST-SEQ.\n013630     MOVE CTL-WORD TO LIST-CTL.\n013640     MOVE CARD-DATA TO LIST-DATA.\n013650     MOVE NORM-SPAC TO SPAC-CTL.\n013660     ALTER NORM-EXIT TO PROCEED TO LIST-PRINT-CONTD.\n013670     GO TO NORM-PRINT.\n013680 LIST-PRINT-CONTD.\n013690     IF BKHED-CARD GO TO PROC-BKHED.\n013700     IF BKNUM-CARD GO TO PROC-BKNUM.\n013710     IF COPY-CARD GO TO PROC-COPY.\n013720     IF LINES-CARD GO TO PROC-LINES.\n013730     IF NOHED-CARD GO TO PROC-NOHED.\n013740     IF NOTAB-CARD GO TO PROC-NOTAB.\n013750     IF PAGE-CARD GO TO PROC-PAGE.\n013760     IF PRTPG-CARD GO TO PROC-PRTPG.\n013770     IF SEHED-CARD GO TO PROC-SEHED.\n013780     IF SENUM-CARD GO TO PROC-SENUM.\n013790     IF SEQ-CARD GO TO PROC-SEQ.\n013800     IF XLINE-CARD GO TO PROC-XLINE.\n013810     MOVE 1 TO TOO-LATE-SW.\n013820     IF ENSUB-CARD GO TO PROC-ENSUB.\n013830     IF SUBPG-CARD GO TO PROC-SUBPG.\n013840     GO TO READ-CARD.\n013850     EJECT\n013860 PAGE-HEADINGS.\n013870     MOVE ZEROS TO LINES-CTR.\n013880     IF SUB-PAG-SW EQUAL TO 1 ADD 1 TO SUB-PAG-CTR, ELSE\n013890     ADD 1 TO PAGE-CTR.\n013900     IF TITLE-MODE GO TO SKIP-ONE.\n013910     IF REPORT-MODE GO TO SKIP-ONE.\n013920     IF NOHED-SW EQUAL TO 1 GO TO SKIP-ONE.\n013930     IF LIST-MODE GO TO SKIP-ONE.\n013940     MOVE SKIP-TO-ONE TO SPAC-CTL.\n013950     IF BKHED-SW EQUAL TO 1 GO TO SECT-HEAD.\n013960     IF BOOK-NAME EQUAL TO SPACES GO TO SECT-HEAD.\n013970     IF BKNUM-SW EQUAL TO 1 MOVE SPACES TO BOOK-NUMBER.\n013980     MOVE BOOK-STORE TO PRINT-LINE.\n013990     ALTER WRITE-IMAGE-EXIT TO PROCEED TO FINISH-BOOK-HEAD.\n014000     GO TO WRITE-IMAGE.\n014010 FINISH-BOOK-HEAD.\n014020     MOVE SPACE-ONE   TO SPAC-CTL.\n014030     ADD 1 TO LINES-CTR.\n014040 SECT-HEAD.\n014050     IF SECT-NAME EQUAL TO SPACES GO TO HEADING-LINE.\n014060     MOVE SECT-STORE TO SECT-LINE.\n014070     ALTER WRITE-IMAGE-EXIT TO PROCEED TO FINISH-SECT-HEAD.\n014080     GO TO WRITE-IMAGE.\n014090 FINISH-SECT-HEAD.\n014100     MOVE SPACE-ONE TO SPAC-CTL.\n014110     ADD 1 TO LINES-CTR.\n014120 HEADING-LINE.\n014130     MOVE PAGE-CTR TO PR-PAGE.\n014140     MOVE CURR-DATE TO PR-DATE.\n014150     MOVE '   PAGE ' TO PAGE-LABEL.\n014160     IF SUB-PAG-SW EQUAL TO 1 MOVE '.' TO PR-DEC,\n014170     MOVE SUB-PAG-CTR TO PR-SUBPG.\n014180     MOVE STORE-HEAD TO HEAD-LINE.\n014190     ALTER WRITE-IMAGE-EXIT TO PROCEED TO FINISH-HEAD.\n014200     GO TO WRITE-IMAGE.\n014210 FINISH-HEAD.\n014220     ADD 2 TO LINES-CTR.\n014230     ALTER WRITE-IMAGE-EXIT TO PROCEED TO COLUMN-HEADING-ONE.\n014240     GO TO WRITE-IMAGE.\n014250 COLUMN-HEADING-ONE.\n014260     MOVE SPACE-ONE TO SPAC-CTL.\n014270     IF COLM-ONE-STORE IS EQUAL TO SPACES\n014280         GO TO COLUMN-HEADING-TWO.\n014290     ADD 1 TO LINES-CTR.\n014300     MOVE COLM-ONE-STORE TO NORM-MARGIN.\n014310     ALTER WRITE-IMAGE-EXIT TO PROCEED TO COLUMN-HEADING-TWO.\n014320     GO TO WRITE-IMAGE.\n014330 COLUMN-HEADING-TWO.\n014340     MOVE SPACE-ONE TO SPAC-CTL.\n014350     IF COLM-TWO-STORE IS EQUAL TO SPACES\n014360         GO TO COLUMN-HEADING-THREE.\n014370     ADD 1 TO LINES-CTR.\n014380     MOVE COLM-TWO-STORE TO NORM-MARGIN.\n014390     ALTER WRITE-IMAGE-EXIT TO PROCEED TO COLUMN-HEADING-THREE.\n014400     GO TO WRITE-IMAGE.\n014410 COLUMN-HEADING-THREE.\n014420     MOVE SPACE-ONE TO SPAC-CTL.\n014430     IF COLM-THREE-STORE IS EQUAL TO SPACES GO TO HEAD-EXIT.\n014440     ADD 1 TO LINES-CTR.\n014450     MOVE COLM-THREE-STORE TO NORM-MARGIN.\n014460     ALTER WRITE-IMAGE-EXIT TO PROCEED TO HEAD-EXIT.\n014470     GO TO WRITE-IMAGE.\n014480 HEAD-EXIT. GO TO NORM-PRINT-RESTORE.\n014490\n014500 SKIP-ONE.\n014510     MOVE 1 TO EJECT-SW.\n014520     GO TO HEAD-EXIT.\n014530\n014540 TOO-LATE.\n014550     MOVE 10 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n014560\n014570 DATA-TOO-LONG.\n014580     MOVE 11 TO DIAG-INDICATOR, GO TO DIAGNOSTICS-ROUT.\n014590 TOO-LONG-EXIT. GO TO NORM-PRINT.\n014600     EJECT\n014610 ALIGN-PRINTER.\n014620     IF  FIRST-BOOK-IND NOT = SPACE  GO TO READ-CARD.\n014630     MOVE '1' TO FIRST-BOOK-IND.\n014640     MOVE SKIP-TO-ONE TO SPAC-CTL.\n014650 ALIGNMENT-MESSAGE.\n014660     MOVE '         1         2         3         4         5\n014670-    '    6      ' TO LEFT-HALF.\n014680     MOVE '   7         8         9         0         1         2\n014690-    '        3  ' TO RIGHT-HALF.\n014700     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-1, GO TO PRINTER.\n014710 ALIGN-RETN-1.\n014720     MOVE SPACE-ONE   TO SPAC-CTL.\n014730     MOVE '1234567890123456789012345678901234567890123456789012345\n014740-    '67890123456' TO LEFT-HALF.\n014750     MOVE '7890123456789012345678901234567890123456789012345678901\n014760-    '23456789012' TO RIGHT-HALF.\n014770     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-2, GO TO PRINTER.\n014780 ALIGN-RETN-2.\n014790     ADD  03 TO X-LINES-CTR.\n014800 ALIGN-EXIT-ONE. GO TO ALIGNMENT-X.\n014810\n014820 ALIGNMENT-X.\n014830     MOVE 'X' TO PRT-POS-ONE.\n014840     MOVE 'X' TO PRT-POS-85.\n014850     MOVE 'X' TO PRT-POS-132.\n014860     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-3, GO TO PRINTER.\n014870 ALIGN-RETN-3.\n014880     SUBTRACT 01 FROM X-LINES-CTR.\n014890     IF X-LINES-CTR IS POSITIVE GO TO ALIGNMENT-X.\n014900 ALIGN-EXIT-TWO. GO TO ALIGN-MESS.\n014910\n014920 ALIGN-MESS.\n014930     MOVE 'X        FOR PROPER FORMS ALIGNMENT ON DOCUMENTATION PA\n014940-    'PER, PRINT ' TO LEFT-HALF.\n014950     MOVE 'POSITIONS         X\n014960-    '          X' TO RIGHT-HALF.\n014970     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-4, GO TO PRINTER.\n014980 ALIGN-RETN-4.\n014990     MOVE 'X        1 THROUGH 85 SHOULD APPEAR EXACTLY BETWEEN PER\n015000-    'FORATIONS. ' TO LEFT-HALF.\n015010     MOVE 'X' TO PRT-POS-85.\n015020     MOVE 'X' TO PRT-POS-132.\n015030     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-5, GO TO PRINTER.\n015040 ALIGN-RETN-5.\n015050     MOVE 'X' TO PRT-POS-85.\n015060     MOVE 'X' TO PRT-POS-132.\n015070     MOVE 'X        ALIGNMENT PAGE WILL AUTOMATICALLY PRINT ONE MO\n015080-    'RE TIME,   ' TO LEFT-HALF.\n015090     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-6, GO TO PRINTER.\n015100 ALIGN-RETN-6.\n015110     MOVE 'X' TO PRT-POS-85.\n015120     MOVE 'X' TO PRT-POS-132.\n015130     MOVE 'X        THEN NORMAL PROCESSING WILL BEGIN.  DEPRESS EO\n015140-    'B.         ' TO LEFT-HALF.\n015150     ALTER PRINT-EXIT TO PROCEED TO ALIGN-RETN-7, GO TO PRINTER.\n015160 ALIGN-RETN-7.\n015170     MOVE 45 TO X-LINES-CTR.\n015180     ALTER ALIGN-EXIT-TWO TO PROCEED TO ALIGNMENT-MESSAGE.\n015190     ALTER ALIGN-EXIT-ONE TO PROCEED TO CONSOLE-MESSAGE.\n015200 ALIGN-EXIT-THREE. GO TO ALIGNMENT-X.\n015210\n015220 CONSOLE-MESSAGE.\n015230     MOVE SKIP-TO-ONE TO SPAC-CTL.\n015240     ALTER PRINT-EXIT TO PROCEED TO CONSOLE-RETN, GO TO PRINTER.\n015250 CONSOLE-RETN.\n015260     ALTER ALIGN-EXIT-ONE TO PROCEED TO ALIGNMENT-X.\n015270     ALTER ALIGN-EXIT-TWO TO PROCEED TO CONSOLE-RETN-1.\n015280     MOVE 49 TO X-LINES-CTR.\n015290     MOVE SPACE-ONE   TO SPAC-CTL.\n015300     GO TO ALIGNMENT-MESSAGE.\n015310 CONSOLE-RETN-1.\n015320     ALTER ALIGN-EXIT-ONE TO PROCEED TO READ-CARD.\n015330     GO TO ALIGNMENT-MESSAGE.\n015340 ALIGN-TAPE.\n015350     ADD 1 TO TAPE-FILES.\n015360     MOVE SKIP-TO-ONE TO T-LINE-CNTRL.\n015370     MOVE SPACES      TO TAPE-REC1.\n015380     MOVE TAPE-ALIGN-1 TO LEFT-PAGE.\n015390     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015400     MOVE TAPE-ALIGN-2 TO LEFT-PAGE.\n015410     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015420     MOVE 03 TO X-LINES-CTR.\n015430     PERFORM ALIGN-TAPE-1 THRU A-T-1-EXIT.\n015440     MOVE TAPE-ALIGN-3 TO LEFT-PAGE.\n015450     MOVE 'X' TO TAPE-POS-76.\n015460     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015470     MOVE TAPE-ALIGN-4 TO LEFT-PAGE.\n015480     MOVE 'X' TO TAPE-POS-76.\n015490     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015500     MOVE TAPE-ALIGN-5 TO LEFT-PAGE.\n015510     MOVE 'X' TO TAPE-POS-76.\n015520     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015530     MOVE TAPE-ALIGN-6 TO LEFT-PAGE.\n015540     MOVE 'X' TO TAPE-POS-76.\n015550     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015560     MOVE TAPE-ALIGN-7 TO LEFT-PAGE.\n015570     MOVE 'X' TO TAPE-POS-76.\n015580     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015590     MOVE 47 TO X-LINES-CTR.\n015600     PERFORM ALIGN-TAPE-1 THRU A-T-1-EXIT.\n015610     MOVE 1 TO EJECT-SW.\n015620     MOVE 57 TO TAPE-RECDS.\n015630     GO TO READ-CARD.\n015640 ALIGN-TAPE-1.\n015650     MOVE 'X' TO TAPE-POS-ONE.\n015660     MOVE 'X' TO TAPE-POS-76.\n015670     PERFORM WRIT-ALIGN-TAPE THRU W-A-T-EXIT.\n015680     SUBTRACT 01 FROM X-LINES-CTR.\n015690     IF  X-LINES-CTR IS POSITIVE GO TO ALIGN-TAPE-1.\n015700 A-T-1-EXIT.\n015710\n015720 WRIT-ALIGN-TAPE.\n015730     IF  TAPE-ONE-UP GO TO W-A-T-1.\n015740     MOVE LEFT-PAGE TO RIGHT-PAGE.\n015750     WRITE TWO-UP-LINE.\n015760     MOVE SPACES TO TWO-UP-LINE.\n015770     GO TO W-A-T-EXIT.\n015780 W-A-T-1.\n015790     MOVE T-LINE-CNTRL TO O-LINE-CNTRL.\n015800     MOVE TAPE-LEFT    TO O-DATA-LINE.\n015810     WRITE ONE-UP-LINE.\n015820     MOVE SPACES TO TWO-UP-LINE.\n015830 W-A-T-EXIT. EXIT.\n015840     EJECT\n015850 DIAGNOSTICS-ROUT.\n015860     MOVE SPACES TO DIAGNOSTICS.\n015870     MOVE SPACE-TWO   TO SPAC-CTL.\n015880     MOVE 1 TO DIAGNOSTICS-SW.\n015890     MOVE CARD-SEQ TO DIAG-SEQ.\n015900     MOVE 'CARD #' TO DIAG-CARD.\n015910     MOVE CARD-CTR TO DIAG-CARD-NO.\n015920     MOVE 'PAGE #' TO DIAG-PAGE.\n015930     MOVE PAGE-CTR TO DIAG-PAG-NO.\n015940     IF SUB-PAG-SW EQUAL TO 1 MOVE '.' TO DIAG-DEC,\n015950     MOVE SUB-PAG-CTR TO DIAG-SUBPG.\n015960     GO TO DIAG-ERR-1, DIAG-ERR-2, DIAG-ERR-3, DIAG-ERR-4,\n015970     DIAG-ERR-5, DIAG-ERR-6, DIAG-ERR-7, DIAG-ERR-8, DIAG-ERR-9,\n015980     DIAG-ERR-10, DIAG-ERR-11 DEPENDING ON DIAG-INDICATOR.\n015990\n016000 DIAG-ERR-1.\n016010     MOVE 'INVALID CTL WORD-PROCESSED AS BLANK' TO DIAG-MESSAGE.\n016020     MOVE ' CTL WORD.' TO DIAG-BYP.\n016030     MOVE '*' TO PRT-POS-85.\n016040     GO TO DIAG-WRITE.\n016050\n016060 DIAG-ERR-2.\n016070     MOVE 'CONTROL WORD INVALID IN REPORT MODE' TO DIAG-MESSAGE.\n016080     GO TO DIAG-MOVE-BYP.\n016090\n016100 DIAG-ERR-3.\n016110     MOVE 'COLS 11-12 OF COPY CARD NOT NUMERIC' TO DIAG-MESSAGE.\n016120     GO TO DIAG-MOVE-BYP.\n016130\n016140 DIAG-ERR-4.\n016150     MOVE 'COLS 11-12 OF LINES CRD NOT NUMERIC' TO DIAG-MESSAGE.\n016160     GO TO DIAG-MOVE-BYP.\n016170\n016180 DIAG-ERR-5.\n016190     MOVE 'LINES CARD REQUESTS OVER 66 LINES  ' TO DIAG-MESSAGE.\n016200     GO TO DIAG-MOVE-BYP.\n016210\n016220 DIAG-ERR-6.\n016230     MOVE 'COLS 11-14 OF PAGE CARD NOT NUMERIC' TO DIAG-MESSAGE.\n016240     GO TO DIAG-MOVE-BYP.\n016250\n016260 DIAG-ERR-7.\n016270     MOVE 'COLS 11-16 OF SEQ CARD NOT NUMERIC ' TO DIAG-MESSAGE.\n016280     GO TO DIAG-MOVE-BYP.\n016290\n016300 DIAG-ERR-8.\n016310     MOVE 'COLS 11-14 OF SUBPG CRD NOT NUMERIC' TO DIAG-MESSAGE.\n016320     GO TO DIAG-MOVE-BYP.\n016330\n016340 DIAG-ERR-9.\n016350     MOVE 'COLS 16-18 OF SUBPG CRD NOT NUMERIC' TO DIAG-MESSAGE.\n016360     GO TO DIAG-MOVE-BYP.\n016370\n016380 DIAG-ERR-10.\n016390     MOVE 'MUST PRECEDE FIRST LINE OF PRINTING' TO DIAG-MESSAGE.\n016400     GO TO DIAG-MOVE-BYP.\n016410\n016420 DIAG-ERR-11.\n016430     MOVE 'DATA TOO LONG, EXCESS TRUNCATED.   ' TO DIAG-MESSAGE.\n016440     IF REPORT-MODE GO TO DIAG-WRITE.\n016450     IF BOOK-CARD GO TO DIAG-WRITE.\n016460     IF SECT-CARD GO TO DIAG-WRITE.\n016470     IF HEAD-CARD GO TO DIAG-WRITE.\n016480     MOVE '*' TO PRT-POS-85.\n016490     GO TO DIAG-WRITE.\n016500\n016510 DIAG-MOVE-BYP.\n016520     MOVE '-BYPASSED.' TO DIAG-BYP.\n016530 DIAG-WRITE.\n016540     ALTER DIAG-WRITE-EXIT TO PROCEED TO DIAG-SECOND-LINE.\n016550 DIAGNOSTICS-WRITE.\n016560     WRITE DIAGNOSTICS, INVALID KEY GO TO DIAG-WRITE-1.\n016570 DIAG-WRITE-1.\n016580     MOVE SPACES TO DIAGNOSTICS.\n016590 DIAG-WRITE-EXIT. GO TO.\n016600\n016610 DIAG-SECOND-LINE.\n016620     MOVE CTL-WORD TO DIAG-CTL-WD.\n016630     MOVE CARD-DATA TO DIAG-CARD-DATA.\n016640     ALTER DIAG-WRITE-EXIT TO PROCEED TO DIAG-END.\n016650     GO TO DIAGNOSTICS-WRITE.\n016660\n016670 DIAG-END.\n016680     IF DIAG-INDICATOR EQUAL TO 01 GO TO PROC-NORM.\n016690     IF DIAG-INDICATOR EQUAL TO 11 GO TO TOO-LONG-EXIT.\n016700     GO TO READ-CARD.\n016710     EJECT\n016720 LAST-CARD.\n016730     IF NOT REPORT-MODE GO TO END-OF-CARDS.\n016740     IF LEFT-SW = 1 MOVE SPACE TO LEFT-SW,\n016750     ALTER NORM-EXIT TO PROCEED TO END-OF-CARDS,\n016760     GO TO NORM-PRINT.\n016770\n016780 END-OF-CARDS.\n016790     IF RESEQ-SW = 1,\n016800     MOVE SPACES TO PUNCH-REC,\n016810     WRITE PUNCH-REC, CLOSE PUNCH-FILE.\n016820     CLOSE LINE-IMAGE, TABLE-FILE, DIAGNOSTICS-FILE.\n016830\n016840 DIAGNOSTICS-PRINTING.\n016850     IF DIAGNOSTICS-SW NOT EQUAL TO 1 GO TO DIAG-PRINT-HEAD.\n016860     OPEN INPUT DIAGNOSTICS-FILE.\n016870 DIAG-PRINT-HEAD.\n016880     MOVE ZERO TO LINES-CTR.\n016890     MOVE BOOK-STORE TO PRINT-LINE.\n016900     MOVE SKIP-TO-ONE TO SPAC-CTL.\n016910     ALTER PRINT-EXIT TO PROCEED TO DIAG-RETN-1, GO TO PRINTER.\n016920 DIAG-RETN-1.\n016930     MOVE SPACE-TWO   TO SPAC-CTL.\n016940     MOVE CURR-DATE TO PR-DATE.\n016950     MOVE 'DIAGNOSTICS' TO HEAD-LINE.\n016960     ALTER PRINT-EXIT TO PROCEED TO DIAG-RETN-2, GO TO PRINTER.\n016970 DIAG-RETN-2.\n016980     MOVE SPACE-ONE   TO SPAC-CTL.\n016990     ALTER PRINT-EXIT TO PROCEED TO DIAG-DETAIL, GO TO PRINTER.\n017000 DIAG-DETAIL.\n017010     IF DIAGNOSTICS-SW NOT EQUAL TO 1 GO TO DIAG-NONE.\n017020     ADD 1 TO LINES-CTR.\n017030     IF LINES-CTR GREATER THAN 34 GO TO DIAG-PRINT-HEAD.\n017040     READ DIAGNOSTICS-FILE AT END GO TO DIAG-CLOSE.\n017050     MOVE DIAGNOSTICS TO PRINT-REC.\n017060     MOVE DIAG-SPAC TO SPAC-CTL.\n017070     ALTER PRINT-EXIT TO PROCEED TO DIAG-DETAIL, GO TO PRINTER.\n017080\n017090 DIAG-NONE.\n017100     MOVE SPACE-TWO   TO SPAC-CTL.\n017110     MOVE 'NONE' TO NORM-MARGIN.\n017120     ALTER PRINT-EXIT TO PROCEED TO TABLE-OF-CONTENTS.\n017130     GO TO PRINTER.\n017140\n017150 DIAG-CLOSE.\n017160     CLOSE DIAGNOSTICS-FILE.\n017170     EJECT\n017180 TABLE-OF-CONTENTS.\n017190     IF TABLE-SW NOT EQUAL TO 1 GO TO TABLE-EXIT.\n017200     OPEN INPUT TABLE-FILE.\n017210     MOVE ZERO TO PAGE-CTR.\n017220\n017230 TABLE-HEADING.\n017240     MOVE ZERO TO LINES-CTR.\n017250     MOVE BOOK-STORE TO PRINT-LINE.\n017260     MOVE SKIP-TO-ONE TO SPAC-CTL.\n017270     ALTER WRITE-IMAGE-EXIT TO PROCEED TO    TABLE-RETN-1,\n017280         GO TO PRINT-A-LINE.\n017290 TABLE-RETN-1.\n017300     MOVE SPACE-TWO   TO SPAC-CTL.\n017310     MOVE CURR-DATE TO HEADER-DATE.\n017320     ADD 1 TO PAGE-CTR.\n017330     MOVE ROMAN-NBRS (PAGE-CTR) TO TOC-PAGE.\n017340     MOVE TABLE-HEADER TO PRINT-LINE.\n017350     ALTER WRITE-IMAGE-EXIT TO PROCEED TO    TABLE-RETN-2,\n017360         GO TO PRINT-A-LINE.\n017370 TABLE-RETN-2.\n017380     MOVE SPACE-TWO TO SPAC-CTL.\n017390     MOVE TABLE-HEADER-1 TO PRINT-LINE.\n017400     ALTER WRITE-IMAGE-EXIT TO PROCEED TO TABLE-RETN-3.\n017410     GO TO PRINT-A-LINE.\n017420 TABLE-RETN-3.\n017430     MOVE SPACE-ONE   TO SPAC-CTL.\n017440     ALTER WRITE-IMAGE-EXIT TO PROCEED TO    TABLE-DETAIL,\n017450         GO TO PRINT-A-LINE.\n017460\n017470\n017480\n017490 TABLE-DETAIL.\n017500     ADD 1 TO LINES-CTR.\n017510     IF LINES-CTR GREATER THAN 25 GO TO TABLE-HEADING.\n017520     READ TABLE-FILE AT END GO TO END-OF-TABLE.\n017530     MOVE TABLE-RECORD TO PRINT-REC.\n017540     MOVE SPACE-TWO   TO SPAC-CTL.\n017550     ALTER WRITE-IMAGE-EXIT TO PROCEED TO    TABLE-DETAIL,\n017560         GO TO PRINT-A-LINE.\n017570\n017580 END-OF-TABLE.\n017590     CLOSE TABLE-FILE.\n017600     MOVE ZEROS TO LINES-CTR.\n017610 TABLE-EXIT. GO TO BEGIN-COPIES.\n017620     EJECT\n017630 BEGIN-COPIES.\n017640     ADD 1 TO COPIES-PTD.\n017650     IF COPIES-PTD EQUAL TO COPY-CTR GO TO END-OF-COPIES.\n017660     ALTER TABLE-EXIT TO PROCEED TO PRINT-COPIES.\n017670     GO TO TABLE-OF-CONTENTS.\n017680\n017690 PRINT-COPIES.\n017700     OPEN INPUT LINE-IMAGE.\n017710 READ-LINE-IMAGE.\n017720     READ LINE-IMAGE AT END GO TO END-LINE-IMAGE.\n017730     MOVE DISK-LINE TO PRINT-LINE.\n017740     MOVE DISK-SPAC TO SPAC-CTL.\n017750     ALTER WRITE-IMAGE-EXIT TO PROCEED TO    READ-LINE-IMAGE,\n017760         GO TO PRINT-A-LINE.\n017770\n017780 END-LINE-IMAGE.\n017790     CLOSE LINE-IMAGE.\n017800     GO TO BEGIN-COPIES.\n017810\n017820 END-OF-COPIES.\n017830     IF NOT BOOK-CARD GO TO END-OF-JOB.\n017840     MOVE CD-BOOK-NAME TO BOOK-NAME.\n017850     MOVE CD-BOOK-NUM TO BOOK-NUMBER.\n017860     IF  TAPE-TWO-UP     CLOSE   TWO-UP-TAPE WITH    NO REWIND,\n017870         DISPLAY TAPE-RECDS, ' RECORDS WRITTEN TO TAPE'.\n017880     IF  TAPE-ONE-UP     CLOSE   ONE-UP-TAPE WITH    NO REWIND,\n017890         DISPLAY TAPE-RECDS, ' RECORDS WRITTEN TO TAPE'.\n017900     GO TO INITIALIZE.\n017910\n017920 END-OF-JOB.\n017930     MOVE SKIP-TO-ONE TO SPAC-CTL.\n017940     WRITE PRINT-REC AFTER POSITIONING SPAC-CTL.\n017950     CLOSE CARD-FILE, PRINT-FILE.\n017960     IF  TAPE-TWO-UP     CLOSE   TWO-UP-TAPE WITH    LOCK,\n017970         DISPLAY TAPE-RECDS, ' RECORDS WRITTEN TO TAPE'.\n017980     IF  TAPE-ONE-UP     CLOSE   ONE-UP-TAPE WITH    LOCK,\n017990         DISPLAY TAPE-RECDS, ' RECORDS WRITTEN TO TAPE'.\n018000         DISPLAY TAPE-FILES, ' FILES WRITTEN TO TAPE'.\n018010     STOP RUN.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDOC72UM": {"ttr": 3589, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BOOK HOW TO USE RDOC72\nDATE 011884\nCOVR1              S Y S T E M S   &   P R O G R A M M I N G\nCOVR2                  H O W   T O   U S E   R D O C 7 2\nCOVR3                               REL 3.0\nXLINE48\nSECTNINTRODUCTION\nHEAD WHAT RDOC72 DOES\nPARA      RDOC IS A UCC PACKAGE THAT PRINTS DOCUMENTATION USING COLUMNS\n     1 THROUGH 5 FOR SEQUENCE NUMBERS.   PEOPLES NATIONAL BANK OF WASH-\n     TON HAS MODIFIED UCC RDOC SO THAT COLUMNS 1 THROUGH 5 ARE FOR\n     COMMAND WORDS, COLUMNS 6 THROUGH 72 ARE FOR TEXT DATA AND COLUMNS\n     73 THROUGH 80 ARE FOR SEQUENCE NUMBERS. THE RESULT IS CALLED      .\n     RDOC72.  RDOC72 PRINTED WHAT YOU ARE NOW READING.  THE REASON WE\n     USE RDOC72 IS TO SAVE EFFORT IN WRITING AND REVISING DOCUMENTATION.\n     IT SHOULD BE USED TO DOCUMENT:\nPARIN* FILES\nIND-A* PROGRAM SPECIFICATIONS\nIND-A* STANDARDS\nIND-A* RUN BOOKS\nIND-A* OTHER THINGS\nPARA IN ORDER TO SIMPLIFY YOUR INTRODUCTION TO RDOC72, ONLY A PORTION\n     OF THE SYSTEM WILL BE EXPLAINED HERE, AND THE EMPHASIS WILL BE ON\n     HOW TO USE IT.  A MORE COMPLETE DISCUSSION OF RDOC72 MAY BE FOUND\n     IN THE 50+ PAGE MANUAL THAT CAME WITH THE RDOC SYSTEM.\n\n     RDOC72 FEATURES INCLUDE:\nPARIN* CARD OR TAPE (INFOREX) OR DISK (LIBRARIAN) INPUT\nIND-A* AUTOMATIC TABLE OF CONTENTS\nIND-A* MULTIPLE COPIES\nIND-A* HEADINGS, PAGE NUMBERING, COVER PAGE AND OTHER 'NIFTY' THINGS\n\n     THE FOLLOWING PAGE SHOWS AN EXAMPLE OF HOW YOU MAY USE RDOC72 TO\n     DOCUMENT A FILE.\nHEAD EXAMPLE OF USE\n\n                M A S T E R   F I L E   D E S C R I P T I O N\nINDEXM-RECORD-CD.\nIND-AA CODE INDICATING THE RECORD TYPE.\nIND-B0 = SYSTEM HEADER RECORD\nIND-B1 = DDA RECORD\nIND-B2 = PRR RECORD\nIND-B3 = TRAILER RECORD\nIND-ABYTE 1, COBOL PICTURE X.\nINDEXM-BK-NO.\nIND-ATHIS IS A UNIQUE BANK NUMBER ASSIGNED BY PEOPLES TO EACH BANK.\nIND-ABYTES 2 THROUGH 3, COBOL PICTURE 999 COMPUTATION-3.\nINDEXM-BR-NO.\nIND-ATHIS IS A BRANCH NUMBER UNIQUE WITHIN EACH BANK AND GENERALLY\nIND-AUNIQUE OUTSIDE  ITS BANK ALSO.  M-BK-NO IS ASSIGNED BY PEOPLES.\nIND-ABYTES 4 THROUGH 5, COBOL PICTURE 999 COMPUTATIONAL-3.\nINDEXM-TYPE-CD.\nIND-AA CODE INDICATING THE TYPE OF ACCOUNT.\nIND-B1 = REGULAR ACCOUNT\nIND-B2 = CHECKMASTER ACCOUNT\nIND-B4 = COUNTRY BANK ACCOUNT\nIND-B5 = MAIN OFFICE BUSINESS ACCOUNT\nIND-B6 = BANK CONTROL ACCOUNT\nIND-B7 = BRANCH BUSINESS ACCOUNT\nIND-B8 = DRAFT ACCOUNT\nIND-ABYTE 6, COBOL PICTURE 9 COMPUTATIONAL-3.\n\n\n\n                          FIGURE 1\n                  AN EXAMPLE OF RDOC72 USE\nSECTNWHAT YOU ALWAYS WANTED TO KNOW ABOUT RDOC72\nHEAD BUT WERE AFRAID TO ASK\nINDEXCONTROL CARD SEQUENCE\n     AS A GENERAL GUIDELINE YOU WILL START A BOOK BY CODING THE\n     FOLLOWING CONTROL CARDS IN THE ORDER GIVEN BELOW.  SEE APPENDIX A\n     FOR DETAILS ON THE CODING OF EACH CONTROL CARD.\n\n          BOOK\n          DATE\n          COVR1\n          COVR2\n          COVR3\n          SECTN\n          HEAD\n\n     NEXT, WRITE YOUR NARRATIVE USING COLUMNS 6-72. CONTROL CARDS MAY\n     BE MIXED WITH THE NARRATIVE AS APROPRIATE.\n\n\nINDEXJCL\n     YOUR INPUT MAY BE TAKEN DIRECTLY FROM CARDS OR THRU LIBRARIAN OR\n     INFOREX TAPE.  ALSO, RDOC72 MAY BE RUN ON OS OR DOS.  DECIDE UPON\n     YOUR MODE OF OPERATION AND THEN USE THE JCL FROM APPENDIX B (OS)\n     OR APPENDIX C (DOS).\n\n     IF YOU USE LIBRARIAN, NAME YOUR MODULE THE SAME AS ITS BOOK NAME.\n     STANDARDS FOR BOOK NAMES ARE GIVEN IN APPENDIX D.\nINDEXLIBRARIAN INPUT\n     RDOC72 ALLOWS SEQUENCING IN COLUMNS 73 THROUGH 80 OR ANY SUBSET\n     OF THIS RANGE.\n\n     A LIBRARIAN MODULE MAY BE INCORPORATED IN SEVERAL BOOKS.  AN\n     EXAMPLE MIGHT BE A GLOSSARY.  USE AN -INC LIBRARIAN CARD (IN\n     EITHER A PERMINENT OR TEMPORARY UPDATE).\nSECT GENERAL INFORMATION\n     THE SYSTEM PRINTS NARRATIVE DESCRIPTION ON EIGHT AND ONE-HALF\n     BY ELEVEN INCH PAPER.  FORMAT, SPACING AND SKIPPING ARE CON-\n     TROLLED BY SPECIAL CONTROL WORDS AND A TABLE OF CONTENTS IS\n     AUTOMATICALLY CREATED.\nPARA EACH PRINTING OF THE DOCUMENTATION CONTAINS THE CURRENT DATE IN\n     THE HEADING LINE ON EACH PAGE SO THAT OUTDATED DOCUMENTATION MAY\n     BE DESTROYED.  THE SPEED OF PREPARATION REDUCES THE USUAL DELAYS\n     THAT INHIBIT THE PROGRESS OF MOST SYSTEM DESIGN EFFORTS.\nHEAD INPUT TO THE SYSTEM\nPARINONE OF THE PRINCIPLE REASONS FOR DEVELOPING SUCH A SYSTEM IS TO\n     SAVE  TIME SPENT MAINTAINING AND EXPANDING DOCUMENTATION.\n     ONCE THE TEXT HAS BEEN WRITTEN, IT IS ENTERED INTO THE SYSTEM.\n     THE INPUT CARD IS DIVIDED INTO THREE BASIC SECTIONS AS FOLLOWS:\nSPAC1\nIND-ACOLUMNS  1 - 5  CONTROL WORD\nSPAC1\nIND-DTHIS IS A WORD CONTAINING A MAXIMUM OF FIVE CHAR-\nIND-DACTERS WHICH CONTROLS THE FORMAT OF THE DOCUMEN-\nIND-DTATION TO BE PRINTED.  IT MAY BE INSERTED BY THE\nIND-DAUTHOR WHEN AND WHERE DESIRED TO CONTROL THE\nIND-DFORMAT.  A LIST OF CONTROL WORDS AND THEIR FUNC-\nIND-DTIONS FOLLOWS IN A LATER SECTION.\nSPAC1\nIND-ACOLUMNS 6 - 72  NARRATIVE\nSPAC1\nIND-DTHIS FIELD CONTAINS THE ACTUAL DATA TO BE PRINTED\nIND-DON THE FINISHED REPORT.  GENERALLY, A LINE OF\nIND-DPRINTING CAN CONTAIN 67 CHARACTERS, BUT CERTAIN\nIND-DTYPES OF CARDS HAVE LENGTH AND/OR CONTENT RESTRIC-\nIND-DTIONS.  NARRATIVE FIELD RESTRICTIONS, WHERE APPLI-\nIND-DCABLE, ARE DISCUSSED UNDER THE DESCRIPTIONS OF THE\nIND-DVARIOUS CONTROL WORDS.  (SEE ALSO - CONTROL WORD\nIND-DFORMATS.)\nSPAC1\nIND-ACOLUMNS  73 - 80  SEQUENCE NUMBER\nSPAC1\nIND-DTHIS NUMBER IS PUNCHED INTO THE CARDS FOR THE PUR-\nIND-DPOSE OF KEEPING THEM IN SEQUENCE.  THE NUMBERS CAN\nIND-DBE PUT IN AS THE CARDS ARE PUNCHED INITIALLY, OR\nIND-DTHEY CAN BE PUT IN BY THE PROGRAM AT A LATER TIME.\nIND-D(SEE CONTROL WORD 'SEQ')\nHEAD OUTPUTS FROM THE SYSTEM\nINDEX* NARRATIVE DESCRIPTIONS\nIND-AONE OF THE FUNDAMENTAL PURPOSES OF THE DOCUMENTATION SYSTEM\n     IS THE PREPARATION OF NARRATIVE DESCRIPTIONS OF SYSTEMS.\n     THE MATERIAL YOU ARE NOW READING IS ONE BOOK FROM AN ENTIRE\n     LIBRARY OF DOCUMENTATION.  EACH BOOK IN THE LIBRARY CAN BE\n     DIVIDED INTO SECTIONS.  THESE SECTIONS CAN BE DIVIDED INTO\n     TOPICS WHICH CAN BE FURTHER DIVIDED INTO SUB-TOPICS IF\n     DESIRED.  THIS BOOK DESCRIBING THE DOCUMENTATION SYSTEM\n     IS ORGANIZED IN THAT MANNER.\nPARINTHE SYSTEM IS ALSO SUITED TO PREPARATION OF FILE DESCRIPTIONS,\n     PROCESSING STEP DEFINITIONS, ETC., BECAUSE OF THE FORMATTING\n     CAPABILITIES WHICH ARE BUILT IN.\nINDEX* TABLES OF CONTENTS\nIND-AUNLESS SUPPRESSED, THE SYSTEM AUTOMATICALLY PRODUCES A NEW TABLE\n     OF CONTENTS EACH TIME A NARRATIVE IS PRINTED.  IF NEW DATA HAS\n     BEEN ADDED OR IF DATA HAS BEEN DELETED, THE SYSTEM AUTOMATI-\n     CALLY RENUMBERS THE PAGES AND PRODUCES A NEW TABLE OF CONTENTS\n     SHOWING THE PAGE NUMBERS OF SECTIONS, TOPICS, AND SUB-TOPICS AS\n     DESCRIBED ABOVE.  THIS AVOIDS THE NECESSITY OF DEVELOPING COMPLI-\n     CATED PAGE NUMBERING SCHEMES TO ALLOW FOR EXPANSION.\nINDEX* PRINTING PORTIONS OF A BOOK\nIND-AAT TIMES, THE AUTHOR MAY WISH TO PRINT ONLY ONE SECTION, A FEW\n     PAGES, OR EVEN A SINGLE PAGE FROM A LARGE BOOK.  THIS MIGHT BE\n     DESIRED, FOR EXAMPLE, IF ONLY A FEW PAGES OF A BOOK REQUIRE\n     REVISION.  SINCE THE AUTHOR MAY EXERCISE COMPLETE CONTROL OVER\n     PAGE NUMBERING, THIS IS NO LONGER A PROBLEM.  THE AUTHOR MAY EVEN\n     CAUSE THE SYSTEM TO UTILIZE SUB-PAGE NUMBERS TO INSERT NEW PAGES\n     BETWEEN EXISTING PAGES WITHOUT REPRINTING THE REST OF\n     THE BOOK.  IN GENERAL, THE AUTHOR MAY EXERCISE AS MUCH OR AS\n     LITTLE CONTROL OVER SUCH ITEMS AS DESIRED.\nINDEX* REPORT SAMPLES\nIND-ASAMPLE REPORTS OF ANY SIZE OR SHAPE CAN BE PRINTED ON ANY KIND OF\n     CONTINUOUS FORMS SUITABLE FOR USE IN A COMPUTER.  THE AUTHOR MAY\n     CHANGE BACK AND FORTH BETWEEN NARRATIVES AND REPORTS AS NECES-\n     SARY, AND MAY ALSO DIRECT THE COMPUTER TO STOP AND PROVIDE THE A\n     MESSAGE INSTRUCTING THE OPERATOR TO CHANGE FROM ONE TYPE OF PAPER\n     TO ANOTHER.\nINDEX* MULTIPLE COPIES\nIND-AUP TO 99 COPIES (ALL ORIGINALS) CAN BE PRODUCED IN A SINGLE PASS\n     OF THE INPUT CARDS.  A TABLE OF CONTENTS IS AUTOMATICALLY\n     PRODUCED FOR EACH COPY.  NORMALLY, HOWEVER, WE PRODUCE NO MORE\n     THAN A TOTAL OF 100 PAGES ON THE COMPUTER.  IF MORE COPIES ARE\n     REQUIRED, WE CREATE A DOCUMENT TAPE AND PRINT THE DOCUMENTS ON AN\n     OFF-LINE PRINTER USING THE TWO-UP OPTION.\nINDEX* DIAGNOSTICS\nIND-AAS THE INPUT DATA IS PROCESSED AND PRINTED BY THE SYSTEM, IT IS\n     ALSO EDITED FOR VALIDITY.  ANY ERRORS DISCOVERED DURING PRO-\n     CESSING ARE PRINTED ON A DIAGNOSTICS REPORT AT THE END OF THE\n     FIRST COPY.  THE SPECIFIC REQUIREMENTS FOR EACH CONTROL WORD ARE\n     GIVEN IN THE SECTION ON CONTROL WORDS.\nPARINTHE DIAGNOSTICS REPORT CONTAINS TWO LINES FOR EACH ERROR DIS-\n     COVERED.  THE FIRST LINE GIVES THE SEQUENTIAL NUMBER OF THE CARD\n     IN ERROR, THE PAGE NUMBER (AND SUB-PAGE NUMBER IF APPROPRIATE),\n     AND AN ERROR MESSAGE EXPLAINING WHAT ERROR WAS DISCOVERED AND THE\n     ACTION TAKEN BY THE SYSTEM.  THE SECOND LINE GIVES THE INFORMATION\n     CONTAINED IN THE ERRONEOUS INPUT RECORD.  ALL THREE FIELDS IN THE\n     INPUT RECORD ARE DISPLAYED - THE CONTROL WORD (1-5), THE NARRATIVE\n     (6-72) AND THE SEQUENCE NUMBER (73-80).NOTE THAT THE SEQUENTIAL\n     NUMBER ON THE FIRST LINE IS DERIVED INTERNALLY BY THE PROGRAM\n     COUNTING RECORDS AND THE INPUT RECORD NUMBER ON THE SECOND LINE IS\n     TAKEN DIRECTLY FROM COLUMNS 73-80 OF THE INPUT.\nPARA      IF NO ERRORS ARE DISCOVERED DURING PRINTING, THE MESSAGE,\n     'NONE' IS PRINTED ON THE DIAGNOSTICS REPORT.\nINDEX* RESEQUENCED INPUT DECKS\nIND-ATHE SYSTEM WILL PUNCH A RESEQUENCED INPUT DECK IF A CONTROL WORD\n     'SEQ' IS ENCOUNTERED PRIOR TO PRINTING THE FIRST LINE OF A GIVEN\n     BOOK.\nHEAD CHARACTERS WHICH MAY BE USED\nDOUBL\n     BECAUSE OF THE CONFIGURATION OF THE PRINT CHAIN OF THE IBM 1403\n     PRINTER, ONLY CERTAIN CHARACTERS MAY BE USED IN THE PRINTING OF\n     DOCUMENTATION.  A LIST OF PERMISSIBLE CHARACTERS FOLLOWS--\nSPAC1\nIND-A&  AMPERSAND\nIND-A*  ASTERISK\nIND-A@  AT SIGN\nIND-A,  COMMA\nIND-A$  DOLLAR SIGN\nIND-A=  EQUAL SIGN\nIND-A(  LEFT PARENTHESIS\nIND-A-  MINUS SIGN, HYPHEN, OR DASH\nIND-A'  QUOTE MARK\nIND-A%  PER CENT SIGN\nIND-A.  PERIOD OR DECIMAL\nIND-A+  PLUS SIGN\nIND-A#  POUND SIGN\nIND-A)  RIGHT PARENTHESIS\nIND-A/  SLASH\nIND-AA-Z  TWENTY SIX ALPHABETIC CHARACTERS (ALL CAPITALS)\nIND-A0-9  TEN NUMERIC CHARACTERS\nSINGL\nHEAD GENERAL SYSTEM FLOW\nPARA THE DOCUMENTATION SYSTEM CONSISTS OF ONE COBOL PROGRAM HAVING\n     THREE SEPARATE PHASES.  IN THE FIRST PHASE, NARRATIVES, REPORT\n     SAMPLES, TABLES, ETC., ARE READ FROM INPUT CARDS.  THE FIRST COPY\n     OF THE DE- SIRED DOCUMENTATION IS FORMATTED ACCORDING TO THE\n     CONTROL WORDS GIVEN BY THE AUTHOR.  AS THE FIRST COPY IS\n     GENERATED, ENTRIES WILL BE MADE IN THE 'TABLE OF CONTENTS' WORK\n     FILE EACH TIME A HEAD, SECT, INDEX, OR SKIP CONTROL WORD IS\n     ENCOUNTERED.  ENTRIES IN THE TABLE OF CONTENTS INCLUDE THE PAGE\n     NUMBER (ASSIGNED BY THE PROGRAM) AND THE HEADING GIVEN BY THE\n     AUTHOR IN THE HEAD, SECT, INDEX, OR SKIP CARDS.\nPARA AT PEOPLES NATIONAL BANK WE OBTAIN MULTIPLE COPIES USING JCL\nIND-ARATHER THAN BY USING THE RDOC72 \"COPY\" CONTROL WORD AS DESCRIBED\nIND-ABELOW.\nPARA IF MULTIPLE COPIES HAVE BEEN SPECIFIED BY USING THE 'COPY'\n     CONTROL WORD, EACH LINE GENERATED DURING THE FIRST PHASE IS\n     STORED, IN PRINT FORMAT, IN A SECOND WORK FILE ON DISK.  RECORDS\n     IN THE COPY FILE CON- SIST OF A ONE-CHARACTER CARRIAGE CONTROL\n     CODE AND THE 132 CHARACTER LINE EXACTLY AS PRINTED DURING PHASE\n     1.\nPARA THE FIRST PHASE OF THE DOCUMENTATION PROGRAM ALSO PERFORMS AN\n     EDIT ON ALL INPUT TO DETERMINE VALIDITY.  ERRORS IN INPUT FORMAT\n     OR SEQUENCE ARE WRITTEN ONTO THE DIAGNOSTICS WORK FILE AND LATER\n     A REPORT IS PREPARED.\nPARA AFTER THE LAST INPUT CARD FOR A GIVEN BOOK HAS BEEN READ AND PRO-\n     CESSED THE THREE WORK FILES ARE CLOSED AND THE SECOND PHASE\n     BEGINS.  IN THE SECOND PHASE, THE DIAGNOSTICS FILE IS READ AND\n     USED TO PRE- PARE A REPORT HEADED 'DIAGNOSTICS' (DESCRIBED IN A\n     PREVIOUS SEC- TION).  FOLLOWING THE PRINTING OF THE DIAGNOSTICS\n     REPORT, THE SEC- OND PHASE CONCLUDES BY GENERATING A TABLE OF\n     CONTENTS (IF APPROPRIATE) FOR THE FIRST COPY OF DOCUMENTATION.\nPARA THE THIRD PHASE OF THE DOCUMENTATION PROGRAM WILL BE USED ONLY IF\n     MULTIPLE COPIES ARE REQUIRED FOR THE BOOK BEING PROCESSED.  PHASE\n     THREE WILL PRODUCE A TABLE OF CONTENTS FOLLOWED BY A COPY OF THE\n     NARRATIVE FOR EACH COPY REQUESTED IN EXCESS OF ONE.  WHEN THIS IS\n     COMPLETED, CONTROL IS TURNED BACK TO PHASE ONE TO BEGIN THE NEXT\n     BOOK.  IF THERE ARE NO MORE BOOKS TO BE PRINTED, THE JOB IS\n     TERMI- NATED.\nEJECT\nPARA THE COMPLETED PRINT-OUT FOR MULTIPLE BOOKS WITH MULTIPLE COPIES\n     WOULD BE SEQUENCED AS FOLLOWS--\nSPAC3\nIND-ABOOK 1\nIND-BFIRST COPY OF NARRATIVE\nIND-BDIAGNOSTICS\nIND-BFIRST COPY OF TABLE OF CONTENTS\nIND-BSECOND COPY OF TABLE OF CONTENTS\nIND-BSECOND COPY OF NARRATIVE\nIND-BTHIRD COPY OF TABLE OF CONTENTS\nIND-BTHIRD COPY OF NARRATIVE\nIND-BETC.\nIND-ABOOK 2\nIND-BFIRST COPY OF NARRATIVE\nIND-BDIAGNOSTICS\nIND-BFIRST COPY OF TABLE OF CONTENTS\nIND-BSECOND COPY OF TABLE OF CONTENTS\nIND-BSECOND COPY OF NARRATIVE\nIND-BTHIRD COPY OF TABLE OF CONTENTS\nIND-BTHIRD COPY OF NARRATIVE\nIND-BETC.\nIND-ABOOK 3\nIND-AETC.\nSPAC3\n     SEE FLOW DIAGRAM ON FOLLOWING PAGES.\nEJECT\n                            /----------------I\n                           /     INPUT       I\n                           I     CARDS       I\n                           I                 I\n                           I-----------------I\n                                    I\n                                    V\n                         I---------------------I         (-------------(\n                         I                     I        (  MULTIPLE   (\n                         I    DOCUMENTATION    I-------(    COPIES   (\n                         I       PROGRAM       I        (  WORK FILE  (\n                         I                     I         (-------------(\n                         I      PHASE ONE      I                I\n                   I-----I                     I----I           I\n                   I     I---------------------I    I           V\n                   I                I               I         -----\n                   I                I               I         PHASE\n                   I                V               I         THREE\n                   I         I--------------I       I\n                   I         I              I       I\n                   V         I    FIRST     I       V\n           (-------------(   I    COPY      I     (-------------(\n          (  TABLE OF   (    I              I    ( DIAGNOSTICS (\n         (   CONTENTS  (     I   *********  I   (  WORK FILE  (\n          (  WORK FILE  (    I **         **I    (             (\n           (-------------(   I*                   (-------------(\n             I     I                                 I\n             I     I                                 I\n             I     I     I---------------------I     I\n             I     I-----I                     I-----I\n             V           I    DOCUMENTATION    I\n           -----         I       PROGRAM       I\n           PHASE         I                     I\n           THREE         I      PHASE TWO      I\n                         I                     I\n                         I---------------------I\n                                    I\n                                    V\n                               I--------------I\n                               I   TABLE OF   I\n                               I  CONTENTS 1  I\n                          I--------------I    I\n                          I              I    I\n                          I DIAGNOSTICS  I**  I\n                          I    LIST      I  **I\n                          I              I\n                          I   *********  I\n                          I **         **I\n                          I*\nPARA      PHASE THREE IS SHOWN ON THE NEXT PAGE.\nEJECT\nSPAC3\n           (-------------(                        (-------------(\n          (  TABLE OF   (                        ( DIAGNOSTICS (\n         (   CONTENTS  (                        (  WORK FILE  (\n          (  WORK FILE  (                        (             (\n           (-------------(                        (-------------(\n                   I                                 I\n                   I                                 I\n                   I     I---------------------I     I\n                   I-----I                     I-----I\n                         I    DOCUMENTATION    I\n                         I       PROGRAM       I\n                         I                     I\n                         I     PHASE THREE     I\n                         I                     I\n                         I---------------------I\n                                   I\n                                   I\n                                   I  I--------------I\n                                   I  I     ETC.     I\n                                   V  I              I\n                                 I--------------I    I\n                                 I  COPY THREE  I    I\n                                 I              I**  I\n                            I--------------I    I  **I\n                            I   TABLE OF   I    I\n                            I  CONTENTS 3  I**  I\n                       I--------------I    I  **I\n                       I   COPY TWO   I    I\n                       I              I**  I\n                  I--------------I    I  **I\n                  I              I    I\n                  I   TABLE OF   I**  I\n                  I  CONTENTS 2  I  **I\n                  I              I\n                  I   *********  I\n                  I **         **I\n                  I*\nSECT DOCUMENTATION PRINTING 'MODES'\nDOUBL\n          THE DOCUMENTATION SYSTEM HAS FOUR OPERATIONAL MODES -\n     NARRATIVE, LIST, REPORT, AND TITLE.  THE FUNCTIONS PERFORMED BY\n     THE SYSTEM VARY CONSIDERABLY FROM ONE MODE TO ANOTHER IN ORDER TO\n     PROVIDE THE AUTHOR WITH MAXIMUM FLEXIBILITY.  BY SELECTING THE\n     MOST SUITABLE MODE AND UTILIZING VARIOUS CONTROL WORDS, THE\n     AUTHOR CAN CONTROL TO SUIT THE PARTICULAR REQUIREMENTS OF A GIVEN\n     SITUATION SUCH PROCEDURES AS THE FORMATTING, SPACING, SKIPPING,\n     PAGE HEADING, AND PAGE NUMBERING.\nPARA      THE MODES OF OPERATION ARE DESCRIBED ON THE NEXT FEW PAGES.\n     A MORE DETAILED DISCUSSION OF THE CONTROL WORDS IS PRESENTED IN A\n     LATER SECTION.\nSINGL\nHEAD NARRATIVE MODE\nPARINTHE NARRATIVE MODE, WHICH IS MOST COMMONLY USED, IS DESIGNED FOR\n     GENERAL DOCUMENTATION PURPOSES AND CONTAINS THE FULL RANGE OF\n     CAPABILITIES AS DESCRIBED IN THE SECTION ON CONTROL WORDS.  IT IS\n     USED FOR CREATING NARRATIVES IN PARAGRAPH FORM, OUTLINES, AND DE-\n     TAILED LISTINGS (SUCH AS FILE DESCRIPTIONS, ETC.)  THIS BOOK WAS\n     PRODUCED IN NARRATIVE MODE.\nPARINREGARDLESS OF MODE, THE AUTHOR CAN EXERCISE AS MUCH OR AS LITTLE\n     CONTROL OVER THE PRINTED DOCUMENTATION AS THE PARTICULAR\n     SITUATION WARRANTS.  STANDARD OPTIONS (DESCRIBED IN THE SECTION\n     TITLED 'DEFAULT OPTIONS') ARE DEFINED IN SUCH A WAY AS TO PROVIDE\n     THE MOST OFTEN USED TECHNIQUES.  THE AUTHOR CAN OVERRIDE THESE\n     STANDARD OPTIONS BY INSERTING THE APPROPRIATE CONTROL WORDS.\n     SINCE ALL CONTROL WORDS ARE VALID IN NARRATIVE MODE AND CERTAIN\n     RESTRICTIONS APPLY TO THEIR USE IN OTHER MODES, THERE IS A HIGHER\n     DEGREE OF FLEXIBILITY AVAILABLE IN NARRATIVE MODE.\nPARINDOCUMENTATION PRODUCED IN NARRATIVE MODE IS FORMATTED FOR\n     PRINTING ON EIGHT AND ONE-HALF BY ELEVEN INCH PAPER.  THE MAXIMUM\n     LENGTH OF A LINE OF DATA IS 70 CHARACTERS.  IF IT IS NECESSARY TO\n     PRODUCE A LONGER LINE OF DATA, THE REPORT MODE MUST BE USED.\nPARINSTANDARD OPTIONS IN THE NARRATIVE MODE INCLUDE AUTOMATIC PAGE\n     HEADINGS, PAGE NUMBERING, AND TABLE OF CONTENTS.  GENERALLY,\n     THESE ITEMS ARE NOT AVAILABLE (OR ARE SOMEWHAT RESTRICTED) IN THE\n     REPORT AND TITLE MODES.\nPARINTHE FORMAT FOR PUNCHED CARDS USED AS INPUT UNDER THE NARRATIVE\n     MODE IS AS FOLLOWS--\nSPAC1\nIND-B 1-5 CONTROL WORD\nIND-B 6-72 DATA TO BE PRINTED\nIND-B 73-80 CARD SEQUENCE NUMBER\nHEAD REPORT MODE\n     THE DOCUMENTATION SYSTEM PROVIDES THE CAPABILITY OF PRINTING\n     SAMPLE REPORTS BY OPERATING IN 'REPORT MODE'.  UPON RECOGNIZING\n     THE CONTROL CARD REPRT, THE FUNCTIONS OF THE PROGRAM ARE\n     SIGNIFICANTLY CHANGED.  INSTEAD OF PRINTING ONE LINE OF 67\n     CHARACTERS FROM EACH CARD AS IN THE NARRATIVE MODE, THE PROGRAM\n     WILL PRINT ONE LINE OF UP TO 132 CHAR- ACTERS COMING FROM TWO\n     CARDS.  UPON ENTERING THE REPORT MODE, COLUMNS 6 TO 71 OF THE\n     FIRST CARD ARE PLACED IN THE FIRST 66 CHARACTERS OF THE PRINT\n     LINE.  COLUMNS 6 TO 71 OF THE SECOND CARD ARE PRINTED IN THE 66\n     PRINT POSITIONS ON THE RIGHT SIDE OF THE SAME LINE.  THERE-\n     AFTER, CARDS ARE ALTERNATELY PRINTED ON THE LEFT AND RIGHT HALVES\n     OF THE FORM.  IF EITHER SIDE IS TO BE LEFT ENTIRELY BLANK, IT IS\n     NECES- SARY TO INSERT A BLANK CARD AT THE APPROPRIATE POINT IN\n     THE CARD DECK.\nPARA THE FORMAT FOR PUNCHED CARDS USED AS INPUT UNDER THE REPORT MODE\n     IS AS FOLLOWS--\nSPAC1\nIND-A 1- 5 CONTROL WORD\nIND-A 6-71 DATA TO BE PRINTED\nIND-A72    MUST CONTAIN A BLANK\nIND-A73-80 CARD SEQUENCE NUMBER\nPARA THE AUTHOR MAY INITIATE A CHANGE OF MODE AT ANY TIME (SEE CONTROL\n     WORDS NARR,  LIST, AND TITLE).  IF DESIRED, A MESSAGE TO THE COM-\n     PUTER OPERATOR CAN BE SPECIFIED, CAUSING THE SYSTEM TO STOP IN\n     ORDER THAT THE OPERATOR MAY COMPLY WITH THE MESSAGE (SUCH AS A\n     FORMS CHANGE WHEN ENTERING REPORT MODE.)  NOTE, HOWEVER, THAT IF\n     MULTIPLE COPIES ARE BEING PRINTED THE MESSAGE STOP WILL OCCUR\n     ONLY ON THE FIRST COPY.  FOR THIS REASON MULTIPLE COPIES OF\n     REPORT SAM- PLES ON A DIFFERENT KIND OF PAPER MUST BE PRODUCED AS\n     A SEPARATE RUN.\nPARA WHEN OPERATING IN THE REPORT MODE, PAGE HEADINGS ARE NOT PRINTED\n     AND ENTRIES TO THE TABLE OF CONTENTS ARE MADE ONLY THROUGH THE\n     CONTROL WORD 'INDEX'.  PAGE NUMBERS, NORMALLY PART OF THE HEAD-\n     INGS, ARE INCREMENTED AS USUAL BUT ARE NOT PRINTED.  PAGE NUM-\n     BERS ARE INCREMENTED IN REPORT MODE SO THAT 'INDEX' ENTRIES IN\n     THE TABLE OF CONTENTS WILL CONTAIN THE CORRECT PAGE NUMBER.\nPARA SOME OF THE STANDARD CONTROL WORDS ARE NOT AVAILABLE IN THE RE-\n     PORT MODE.  SINCE ALL OF THE CONTROL WORDS ARE DESCRIBED IN\n     DETAIL IN A LATER SECTION, THE CONTROL WORDS AVAILABLE IN REPORT\n     MODE ARE LISTED BELOW WITHOUT EXPLANATION.\nPARA THE REPORT MODE IS NOT VALID WHEN CREATING A MAGNETIC TAPE WITH\n     THE TWO-UP OPTION.\nEJECT\nIND-BAVAILABLE IN REPORT MODE\nIND-B------------------------\nSPAC1\nIND-CBKHED-SUPPRESS PRINTING OF BOOK HEADINGS\nIND-CBKNUM-SUPPRESS PRINTING OF BOOK NUMBERS\nIND-CBOOK -FIRST CARD OF A BOOK\nIND-CCOPY -MULTIPLE COPIES\nIND-CDOUBL-DOUBLE SPACING\nIND-CEJECT-SHEET EJECT\nIND-CENSUB-END SUB-PAGE NUMBERING\nIND-CINDEX-ENTRY TO TABLE OF CONTENTS\nIND-CLINES-LINES TO BE PRINTED PER PAGE\nIND-CLIST -ENTER LIST MODE\nIND-CNARR -ENTER NARRATIVE MODE\nIND-CNOHED-NO HEADINGS DESIRED\nIND-CNOTAB-NO TABLE OF CONTENTS DESIRED\nIND-CPAGE -SET PAGE NUMBER\nIND-CPRTPG-PRINT CARD NUMBERS (EFFECTIVE IN NARRATIVE ONLY)\nIND-CREPRT-ENTER REPORT MODE\nIND-CSEHED-SUPPRESS PRINTING OF SECTION HEADINGS\nIND-CSENUM-SUPPRESS PRINTING OF SECTION NUMBERS\nIND-CSEQ  -PUNCH RESEQUENCED DECK\nIND-CSINGL-SINGLE SPACING\nIND-CSPAC1-INSERT 1 BLANK LINE\nIND-CSPAC2-INSERT 2 BLANK LINES\nIND-CSPAC3-INSERT 3 BLANK LINES\nIND-CSPAC4-INSERT 4 BLANK LINES\nIND-CSPAC5-INSERT 5 BLANK LINES\nIND-CSPAC6-INSERT 6 BLANK LINES\nIND-CSPAC7-INSERT 7 BLANK LINES\nIND-CSPAC8-INSERT 8 BLANK LINES\nIND-CSPAC9-INSERT 9 BLANK LINES\nIND-CSUBPG-BEGIN SUB-PAGE NUMBERING\nIND-CTITLE-ENTER TITLE MODE\nIND-CXLINE-EJECT FOR INDEX CARDS AFTER LINE SPECIFIED\nPARA IF ANY OTHER CONTROL WORDS ARE ENCOUNTERED WHILE IN REPORT MODE,\n     THE CARD WILL BE BYPASSED AND AN ERROR MESSAGE 'CONTROL WORD\n     INVALID IN REPORT MODE-BYPASSED.' WILL BE PRINTED ON THE\n     DIAGNOSTICS LIST FOLLOWED BY AN IMAGE OF THE CARD.\nHEAD TITLE MODE\nPARINTHE TITLE MODE IS A COMBINATION OF SOME OF THE FEATURES OF THE\n     NARRATIVE MODE AND THE REPORT MODE.  IT IS LIKE THE NARRATIVE\n     MODE IN THAT ALL OF THE CONTROL WORDS (EXCEPT HEAD AND SECT) ARE\n     VALID.  IT IS LIKE THE REPORT MODE IN THAT PAGE HEADINGS ARE NOT\n     PRINTED AND THE NORMAL TABLE OF CONTENTS WILL NOT BE PREPARED\n     UNLESS AN INDEX CONTROL WORD IS ENCOUNTERED.\nPARINTITLE MODE CAN BE USED TO PRODUCE AN INTRODUCTORY MEMORANDUM EX-\n     PLAINING THE PURPOSE OF THE NARRATIVE WHICH FOLLOWS.  REPORT\n     SAMPLES WHICH ARE 67 CHARACTERS OR LESS COULD BE PRODUCED MORE\n     EASILY IN TITLE MODE THAN REPORT MODE BECAUSE TITLE MODE PRINTS\n     ONLY ONE CARD PER LINE.  IF, FOR EXAMPLE, THE AUTHOR WISHES TO\n     PRODUCE A REPORT WHICH HAS PRINT LINES OF FIFTY CHARACTERS EACH,\n     EVERY OTHER CARD WOULD HAVE TO BE LEFT BLANK TO USE THE REPORT\n     MODE.\nPARINWHATEVER PURPOSE THE AUTHOR INTENDS, HE MAY ENTER AND LEAVE THE\n     TITLE MODE AT ANY TIME.  LIKE OTHER MODE CHANGES (REPRT, LIST,\n     AND NARR) THE SYSTEM CAN BE STOPPED BY THE AUTHOR IF A MESSAGE TO\n     THE COMPUTER OPERATOR IS DESIRED.\nPARINAS IN THE REPORT MODE, PAGE NUMBERS ARE INCREMENTED IN TITLE MODE\n     EVEN THOUGH THEY ARE NOT PRINTED.  IF THE AUTHOR WISHES,\n     THEREFORE, TO HAVE A BOOK PRECEDED BY A THREE-PAGE COVER MEMO\n     WHICH IS NOT TO BE INCLUDED IN THE PAGE NUMBERS, IT WOULD BE NEC-\n     ESSARY TO SET THE PAGE NUMBER TO ONE AFTER PRINTING THE MEMORAN-\n     DUM IN TITLE MODE BUT BEFORE PRINTING THE BOOK IN NARRATIVE MODE.\n     THIS IS EASILY DONE BY ENTERING A 'PAGE' CONTROL WORD.\nPARINTHE FORMAT FOR PUNCHED CARDS USED AS INPUT UNDER THE TITLE MODE\n     IS AS FOLLOWS--\nSPAC1\nIND-B 1- 5 CONTROL WORD\nIND-B 6-72 DATA TO BE PRINTED\nIND-B73-80 CARD SEQUENCE NUMBER\nHEAD LIST MODE\nPARINTHE LIST MODE IS DESIGNED TO PRODUCE A LISTING OF THE EXACT IMAGE\n     OF THE INPUT CARDS.  SINCE THE LISTING SHOWS ALL 80 CHARACTERS OF\n     THE INPUT CARD, THE CARD SEQUENCE NUMBER AND THE CONTROL WORD\n     WOULD BOTH BE PRINTED.  CARD SEQUENCE NUMBERS CAN ALSO BE PRINTED\n     BY USING THE 'PRTPG' CONTROL WORD, BUT LIST MODE PROVIDES THE\n     ONLY METHOD FOR THE PRINTING OF CONTROL WORDS.  BECAUSE OF ITS 80\n     CHARACTER FORMAT, LIST MODE IS ALSO USEFUL IN PREPARING SAMPLE\n     SCREEN DISPLAYS FOR DOCUMENT- ING SYSTEMS WHICH USE VIDEO\n     TERMINALS.\nPARINWHEN OPERATING IN THE LIST MODE, THE FOLLOWING CONTROL WORDS WILL\n     CONTINUE TO FUNCTION EXACTLY AS DESCRIBED IN THE SECTION TITLED\n     'CONTROL WORD SPECIFICATIONS'.  THEY ARE NOT PRINTED WHEN\n     ENCOUNTERED.\n               BOOK\n               DOUBL\n               EJECT\n               LIST\n               NARR\n               REPRT\n               SINGL\n               TITLE\nPARINTHE CONTROL WORDS LISTED BELOW ARE VALID IN THE LIST MODE.  THEY\n     FUNCTION AS DESCRIBED UNDER 'CONTROL WORD SPECIFICATIONS' EXCEPT\n     THAT THEY ARE PRINTED BEFORE THEIR NORMAL FUNCTION OCCURS.\n               BKHED\n               BKNUM\n               COPY\n               ENSUB\n               LINES\n               NOHED\n               NOTAB\n               PAGE\n               PRTPG\n               SEHED\n               SENUM\n               SEQ\n               SUBPG\n               XLINE\nPARINALL OTHER CONTROL WORDS ARE INOPERATIVE WHEN ENCOUNTERED IN LIST\n     MODE.  THEY ARE PRINTED IN AN 80 CHARACTER IMAGE OF THE INPUT\n     CARD.\nPARINALTHOUGH THE FULL 80 CHARACTERS OF THE CARD MAY CONTAIN DATA IN\n     THE LIST MODE, IT IS IMPORTANT TO NOTE THAT THE SYSTEM WILL\n     CONTINUE TO LOOK FOR THE ABOVE LISTED CONTROL WORDS IN THE\n     CONTROL WORD FIELD.  IF COLUMNS 1 - 5 OF ANY RECORD CONTAIN A\n     VALID CONTROL WORD FROM EITHER OF THE TWO LISTS, THE RECORD WILL\n     BE TREATED ACCORDINGLY.\nPARINDURING LIST MODE OPERATION, PRINTING OF PAGE HEADINGS IS SUSPEND-\n     ED.  PAGE NUMBERS ARE NOT PRINTED, BUT THE PAGE COUNTER IS\n     INCREMENTED AS USUAL WHEN SHEET EJECTION OCCURS.  NO ENTRIES ARE\n     MADE IN THE TABLE OF CONTENTS.\nSECT CONTROL WORDS\nPARININ THIS SECTION THE VARIOUS CONTROL WORDS AVAILABLE TO THE AUTHOR\n     ARE DISCUSSED IN DETAIL.  THE CONTROL WORDS MAY BE USED AT THE\n     AUTHOR'S DISCRETION TO CONTROL SPACING, SKIPPING, HEADINGS, PAGE\n     NUMBERING, ETC., OF THE PRINTED DOCUMENTATION.  ALTHOUGH THE LIST\n     IS LENGTHY AND THE DESCRIPTIONS ARE, AT TIMES, RATHER COMPLEX,\n     THE SYSTEM IS NOT DIFFICULT TO USE BECAUSE OF THE BUILT-IN\n     OPTIONS DESCRIBED IN A LATER SECTION.  IN FACT, THE VAST MAJORITY\n     OF DATA CARDS IN AN AVERAGE BOOK HAVE NO CONTROL WORD AT ALL.\n     GENERALLY, CONTROL WORDS ARE USED TO OVERRIDE NORMAL PROCEDURES.\n     THE ONLY CONTROL WORD ABSOLUTELY REQUIRED IS 'BOOK' TO INDICATE\n     THE FIRST CARD OF EACH BOOK.\nPARINTHE CONTROL WORD, WHERE APPLICABLE, IS PUNCHED IN COLUMNS SIX TO\n     TEN OF THE INPUT CARD.  SOME OF THE CONTROL WORDS DO NOT REQUIRE\n     THE FULL FIVE POSITIONS.  IN THIS CASE, THE REMAINDER OF THE CON-\n     TROL WORD FIELD MUST BE LEFT BLANK WITH THE DATA BEGINNING IN\n     COL- UMN ELEVEN.\nPARINSOME OF THE CONTROL WORDS HAVE RESTRICTIONS AS TO THE CONTENT OF\n     THE DATA FIELD IN THE CARDS.  ADDITIONALLY, SOME OF THE CONTROL\n     WORDS ARE VALID ONLY IN CERTAIN MODES.  OTHERS MUST PRECEDE THE\n     FIRST CARD WHICH WOULD CAUSE A LINE TO BE PRINTED.  WHERE SUCH\n     RESTRICTIONS APPLY, THEY ARE DESCRIBED UNDER THE APPROPRIATE CON-\n     TROL WORD.\nPARINFOR EASE OF FUTURE REFERENCE, THE CONTROL WORDS ARE LISTED\n     ALPHABETICALLY.  REFERENCE IS NOT MADE TO LIST MODE WHEN EACH\n     CONTROL WORD IS DISCUSSED BECAUSE ALL CONTROL WORDS ARE VALID -\n     THEY ARE JUST NOT NECESSARILY OPERATIONAL.  (SEE DOCUMENTATION\n     PRINTING MODES- LIST MODE.)\nHEAD CONTROL WORD SPECIFICATIONS\nINDEX* BKHED - SUPPRESS BOOK HEADINGS\nIND-ATHE BKHED CONTROL WORD SUPPRESSES THE NORMAL PRINTING OF BOOK\nIND-ANAMES AND NUMBERS AS THE FIRST LINE OF HEADINGS ON EACH PAGE.\nIND-ANORMALLY, BOOK HEADINGS WILL APPEAR AS THE FIRST LINE OF EACH\nIND-APAGE UNLESS THE BOOK CARD IS BLANK IN COLUMNS 6-72.  BKHED\nIND-AOVERRIDES THIS CONDITION AND SUPPRESSES BOOK HEADINGS FOR THE\nIND-AREMAINDER OF THE BOOK.\nPARINMAY BE USED AT THE DISCRETION OF THE AUTHOR AT ANY POINT IN\nIND-ATHE DATA, CAUSING SUPPRESSION OF BOOK HEADING FROM THAT POINT\nIND-ATO THE END OF THE BOOK.  MAY NOT CONTAIN DATA IN THE NARRATIVE\nIND-AFIELD - MUST BE BLANK IN COLUMNS 6-72.\nINDEX* BKNUM - SUPPRESS PRINTING OF BOOK NUMBER\nIND-ATHE BKNUM CONTROL WORD SUPPRESSES THE NORMAL PRINTING OF BOOK\nIND-ANUMBERS IN THE BOOK HEADING LINE ON EACH PAGE.  DOES NOT AFFECT\nIND-APRINTING OF BOOK NAMES.  NORMALLY, BOOK HEADINGS SHOWING BOTH\nIND-ABOOK NAME AND BOOK NUMBER ARE PRINTED AT THE TOP OF EACH PAGE.\nIND-ABKNUM ALLOWS THE PRINTING OF BOOK NAME BUT SUPPRESSES THE BOOK\nIND-ANUMBER.\nPARINMAY BE USED AT THE DISCRETION OF THE AUTHOR AT ANY POINT IN\nIND-ATHE DATA, CAUSING SUPPRESSION OF BOOK NUMBER FROM THAT POINT\nIND-ATO THE END OF THE BOOK.  MAY NOT CONTAIN DATA IN THE NARRATIVE\nIND-AFIELD - MUST BE BLANK IN COLUMNS 6-72.\nPARINBKNUM DIFFERS FROM BKHED IN THAT BKHED SUPPRESSES BOTH BOOK\nIND-ANAME AND BOOK NUMBER WHEREAS BKNUM SUPPRESSES BOOK NUMBER ONLY.\nINDEX* BOOK  - FIRST CARD OF EACH BOOK IN THE LIBRARY\nIND-ATHE BOOK CARD IS USED TO INDICATE THE BEGINNING OF A BOOK WHEN\nIND-AMULTIPLE BOOKS ARE BEING PRINTED.  IT WILL CAUSE THE SYSTEM TO\nIND-ASUSPEND READING OF INPUT TEMPORARILY.  A TABLE OF CONTENTS FOR\nIND-ATHE PRECEEDING BOOK WILL BE PRINTED UNLESS SUPPRESSED BY A NOTAB\nIND-ACARD (SEE CONTROL WORD NOTAB), OR UNLESS THE DATA IN THE PREVIOUS\nIND-ABOOK WAS SUCH THAT NO ENTRIES IN THE TABLE OF CONTENTS WERE MADE.\nIND-AIF MULTIPLE COPIES WERE SPECIFIED, THE REMAINING COPIES OF THE\nIND-APREVIOUS BOOK WILL THEN BE PRINTED (ALONG WITH ADDITIONAL TABLES\nIND-AOF CONTENTS IF APPROPRIATE).  THE SYSTEM IS THEN RE-INITIALIZED\nIND-ABY TURNING OFF INTERNAL PROGRAM INDICATORS AND RESETTING PAGE\nIND-ANUMBER COUNTERS, ETC.\nPARINTHE BOOK NAME AND BOOK NUMBER FROM THE BOOK CONTROL CARD ARE THEN\nIND-ASTORED FOR PAGE HEADING PURPOSES AND NORMAL PROCESSING OF INPUT\nIND-ADATA IS RESUMED.  ALTHOUGH A 'BOOK' CARD MUST BE THE FIRST CARD\nIND-AOF EVERY BOOK, IT DOES NOT HAVE TO CONTAIN A BOOK NAME.  IF A\nIND-ABOOK NAME IS PRESENT IN CARD COLUMNS 6-60, THE BOOK NAME AND THE\nIND-ABOOK NUMBER WILL BE PRINTED AS THE FIRST HEADING LINE ON EACH\nIND-APAGE OF THE FINISHED DOCUMENTATION (UNLESS SUPPRESSED BY A BKHED\nIND-AOR BKNUM CONTROL WORD).  IF COLUMNS 6 TO 60 OF THE HEAD CARD ARE\nIND-ALEFT BLANK, THE HEADING LINE FOR BOOK NAME AND NUMBER ON EACH\nIND-APAGE WILL BE OMITTED.\nPARINIF THE MODE OF OUTPUT IS TAPE, EACH BOOK WILL CREATE ONE FILE ON\nIND-ATHE TAPE.\nPARINTHE FORMAT FOR THE 'BOOK' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'BOOK '\nIND-BCC. 06-60 BOOK NAME (OPTIONAL)\nIND-BCC. 61-64 BLANK\nIND-BCC. 65-72 BOOK NUMBER (ALPHA-NUMERIC)\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* COLM  - COLUMN HEADINGS\n               COLM1 - COLUMN HEADING LINE ONE\n               COLM2 - COLUMN HEADING LINE TWO\n               COLM3 - COLUMN HEADING LINE THREE\nPARA      COLUMN HEADING CARDS ARE USED TO SUPPLY UP TO THREE LINES OF\n          HEADINGS SUBORDINATE TO BOOK, SECTION, AND HEAD CARD\n          HEADINGS.  THE COLM1 CARD SETS UP THE FIRST LINE, COLM2 SETS\n          UP THE SECOND, AND COLM3 SETS UP THE THIRD.  WHEN A COLUMN\n          HEADING CARD IS EN- COUNTERED, THE NARRATIVE PORTION IS\n          PRINTED AND STORED FOR USE IN THE APPROPRIATE HEADING LINE\n          WHEN PAGE OVERFLOW OCCURS.  IF THE NARRATIVE PORTION OF THE\n          COLUMN HEADING CARD IS BLANK, IT IS USED TO BLANK OUT THE\n          APPROPRIATE HEADING LINE.\nPARA      WHEN PAGE OVERFLOW OCCURS, THE BOOK, SECTION, AND/OR HEAD\n          CARD HEADINGS ARE PRINTED ACCORDING TO SPECIFICATIONS\n          PROVIDED BY OTHER CONTROL WORDS.  A BLANK LINE AUTOMATICALLY\n          FOLLOWS THE HEAD CARD HEADING LINE.  IF ONE OR MORE LINES OF\n          COLUMN HEADINGS HAVE BEEN SPECIFIED, THEY WILL THEN BE\n          PRINTED.\nPARA      COLUMN HEADINGS MAY BE BLANKED OUT BY USING THE APPROPRIATE\n          'COLM ' CONTROL WORD WITH A BLANK NARRATIVE FIELD.  THEY ARE\n          BLANKED OUT AUTOMATICALLY WHEN A BOOK, SECTION, OR HEAD CARD\n          IS ENCOUNTERED.  COLUMN HEADING CARDS ARE VALID IN NARRATIVE\n          MODE ONLY.  BYPASSED IF ENCOUNTERED IN OTHER MODES.\nPARA      THE FORMAT OF 'COLM ' CARDS IS--\nPARA           CC. 01-05 CONTROL WORD 'COLM1, COLM2, OR COLM3'\n               CC. 06-72 DESIRED HEADING\n               CC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* COPY  - NUMBER OF COPIES TO BE PRINTED\nIND-AAT PEOPLES NATIONAL BANK USE OS JCL OR GRASP FOR THIS FUNCTION.\nIND-AOMIT THIS CARD ENTIRELY.\nIND-ASPECIFIES, IN COLUMNS 06 AND 07, THE NUMBER OF COPIES TO BE\nIND-APRINTED.  THE MAXIMUM NUMBER PERMISSIBLE IS 99 BUT ANYTHING IN\nIND-AEXCESS OF 10 TO 15 COPIES SHOULD BE PRINTED ONCE ON THE COMPUTER\nIND-AAND REPRODUCED BY OTHER MEANS WHENEVER POSSIBLE.  CAUSES THE DOC-\nIND-AUMENTATION TO BE STORED ON DISK AND GENERATED THE NUMBER OF TIMES\nIND-ASPECIFIED.  THE COPY CARD MUST BE NUMERIC IN COLUMNS 06 AND 07.\nIND-AIT MUST BE BLANK IN THE REMAINDER OF THE NARRATIVE FIELD.  THE\nIND-A'COPY' CARD MUST PRECEDE THE FIRST CARD WHICH WOULD CAUSE A LINE\nIND-ATO BE GENERATED.  IF IT DOES NOT, OR IF MORE THAN ONE 'COPY' CARD\nIND-AIS ENTERED FOR A SINGLE BOOK, IT WILL BE BYPASSED WITH AN ERROR\nIND-AMESSAGE ON THE DIAGNOSTICS LIST.\nPARINIF THE 'COPY' CARD IS OMITTED, ONE COPY IS ASSUMED.\nPARINTHE FORMAT OF THE 'COPY' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'COPY '\nIND-BCC. 06-07 NUMBER OF COPIES REQUIRED (NUMERIC)\nIND-BCC. 08-72 BLANK\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* COVR1 - DOCUMENT COVER PAGE\nIND-ACAUSES UP TO THREE LINES TO BE GENERATED IN THE MIDDLE OF THE\nIND-APAGE AND THE NAME, ADDRESS, AND TELEPHONE NUMBER OF RESULTS INC.\nIND-AIN THE LOWER RIGHT-HAND CORNER OF THE PAGE.  THE DATA IN THE\nIND-ATHREE LINES IS ENTERED BY THE BY THE USER IN COLUMNS 11-80 OF THE\nIND-ACARDS.  TWO OTHER CONTROL WORDS ARE USED IN CONJUNCTION WITH\nIND-A'COVR1', BOTH OF WHICH ARE OPTIONAL.  THE DATA IN COLUMNS 11-80\nIND-AOF THE 'COVR1' CARD WILL BE PRINTED AS THE FIRST LINE, DATA IN\nIND-ACOLUMNS 06-72 OF THE 'COVR2' CARD WILL BE PRINTED AS THE SECOND\nIND-ALINE, AND DATA IN COLUMNS 06-72 OF THE 'COVR3' CARD WILL BE\nIND-APRINTED AS THE THIRD LINE.  IF EITHER 'COVR2' AND/OR 'COVR3' ARE\nIND-AOMITTED A BLANK LINE WILL BE PRODUCED.  THESE CARDS MUST PRECEDE\nIND-ATHE FIRST CARD WHICH WOULD CAUSE A LINE TO BE GENERATED.  IF THEY\nIND-ADO NOT, THEY WILL BE BYPASSED WITH AN ERROR MESSAGE ON THE\nIND-ADIAGNOSTIC LIST.\nPARINTHE FORMAT OF THE 'COVR' CARDS IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'COVR1', 'COVR2', 'COVR3'\nIND-BCC. 06-72 DESIRED DATA\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* DATE  - DATE OF BOOK\nIND-ASPECIFIES THE DATE OF THE DOCUMENT TO BE GENERATED.  THIS CONTROL\nIND-ACARD MUST FOLLOW THE 'BOOK' CARD AND MUST PRECEDE THE FIRST CARD\nIND-AWHICH WOULD CAUSE A LINE TO BE GENERATED.  IF IT DOES NOT, IT\nIND-AWILL BE BYPASSED WITH AN ERROR MESSAGE ON THE DIAGNOSTIC LIST.\nIND-AIF THE 'DATE' CARD IS OMITTED, THE DATE WILL BE SET TO ZEROES.\nPARINAT PEOPLES NATIONAL BANK DISREGARD THE MODE OF OUTPUT CODE\nIND-ADESCRIBED IN THE FOLLOWING PARAGRAPH AND LEAVE COLUMN 15 BLANK.\nIND-AOUT PRINTER IS NOT WIDE ENOUGH TO PRINT TWO UP.\nPARINTHIS CARD ALSO INDICATES TO THE PROGRAM THE MODE OF OUTPUT DE-\nIND-ASIRED BY USING A ONE-DIGIT CODE IN COLUMN 15.  A CODE OF '1' WILL\nIND-AUSE THE ON-LINE PRINTER AS THE DOCUMENT OUTPUT DEVICE AND SUP-\nIND-APRESS THE TWO ALIGNMENT PAGES.  A CODE OF '2' WILL USE A MAGNETIC\nIND-ATAPE DRIVE AS THE DOCUMENT OUTPUT DEVICE AND WILL GENERATE PAGES\nIND-AIN TWO-UP FORMAT, EACH PAGE BEING EIGHT AND ONE HALF BY ELEVEN\nIND-AINCHES.  A CODE OF '3' WILL USE THE ON-LINE PRINTER AS THE DOCU-\nIND-AMENT OUTPUT DEVICE AND WILL PRINT TWO ALIGNMENT PAGES AT THE\nIND-ABEGINNING OF THE FIRST COPY.  A CODE OF '4' WILL USE A MAGNETIC\nIND-ATAPE DRIVE AS THE DOCUMENT OUTPUT DEVICE AND WILL GENERATE PAGES\nIND-AIN ONE-UP FORMAT, SO THAT THE TAPE MAY BE TAKEN ELSEWHERE AND\nIND-APRINTED USING DITTO OR A UTILITY TAPE TO PRINT PROGRAM.\nIND-AIF OMITTED, OPTION '1' IS ASSUMED.\nPARINTHE FORMAT OF THE 'DATE' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'DATE'\nIND-BCC. 06-11 DATE (MMDDYY)\nIND-BCC. 12-14 BLANK\nIND-BCC. 15    MODE OF OUTPUT CODE ('1', '2', '3', OR '4')\nIND-BCC. 16-72 BLANK\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* DOUBL - NORMAL SPACING TO BE DOUBLE-SPACE\nIND-ACAUSES THE NARRATIVE TO BE DOUBLE SPACED BETWEEN LINES.  MAY BE\nIND-AINSERTED AT ANY POINT IN THE CARDS.  DOUBLE SPACING WILL BEGIN\nIND-AWITH THE NEXT CARD AND CONTINUE UNTIL A SINGL CARD IS READ.  THE\nIND-ADOUBL CARD MAY NOT CONTAIN NARRATIVE AND MUST BE BLANK IN COLUMNS\nIND-A06 TO 72.  IF THIS CARD IS OMITTED, SINGLE SPACING IS ASSUMED.\nIND-ANORMAL SPACING IS AUTOMATICALLY CHANGED TO SINGLE SPACE WHEN A\nIND-AMODE CHANGE IS PROCESSED (CONTROL WORD 'NARR, REPRT, OR TITLE'.)\nINDEX* EJECT - SHEET EJECTION\nIND-AWILL CAUSE THE COMPUTER TO EJECT THE SHEET BEING PRINTED AND RE-\nIND-ASUME PRINTING AT THE TOP OF THE NEXT PAGE.  THE NEXT PAGE WILL\nIND-ACONTAIN STANDARD PAGE HEADINGS ACCORDING TO THE OPTIONS SPECIFIED\nIND-AIN OTHER CONTROL WORDS.  THE 'EJECT' CARD MAY BE USED AT ANY\nIND-APOINT IN THE DATA REGARDLESS OF MODE.\nPARINIF 'EJECT' CARDS ARE NOT USED, SHEET EJECTION WILL OCCUR AUTOMAT-\nIND-AICALLY WHEN THE SPECIFIED NUMBER OF LINES HAVE BEEN PRINTED OR\nIND-AWHEN A 'SECT' OR 'HEAD' CARD IS ENTERED.  THE 'EJECT' CARD MAY\nIND-ANOT CONTAIN NARRATIVE AND MUST BE BLANK IN COLUMNS 06 TO 72.\nINDEX* ENSUB - END OF SUB-PAGE NUMBERING\nIND-AUSED TO INDICATE THAT SUB-PAGE NUMBERING STARTED BY A 'SUBPG'\nIND-ACARD SHOULD BE ENDED AND NORMAL PAGE NUMBERING SHOULD RESUME.\nIND-AMAY BE USED AT ANY TIME REGARDLESS OF MODE.  ALTHOUGH PAGE NUM-\nIND-ABERS ARE NOT PRINTED IN THE REPORT OR TITLE MODES, THE PAGE NUM-\nIND-ABER COUNTER IS INCREMENTED FOR EACH PAGE PRINTED.  THIS MEANS\nIND-ATHAT IF A BOOK IS BEING PRINTED IN NARRATIVE MODE AND CHANGED TO\nIND-APRINT TWO PAGES IN REPORT OR TITLE MODE, THE PAGE NUMBER ON THE\nIND-ANEXT PAGE OF NARRATIVE WOULD REFLECT THE TWO PAGE GAP.  IF THE\nIND-AAUTHOR DOES NOT WISH TO HAVE SUCH A GAP, HE COULD ENTER A 'SUBPG'\nIND-ACARD JUST BEFORE ENTERING REPORT OR TITLE MODE AND AN ENSUB CARD\nIND-AJUST BEFORE RE-ENTRY INTO NARRATIVE MODE.  THIS WOULD CAUSE THE\nIND-ASUB-PAGE NUMBER TO BE INCREMENTED INSTEAD OF THE PAGE NUMBER SO\nIND-ATHAT THE NARRATIVE PAGES PRECEEDING AND FOLLOWING THE TWO REPORT\nIND-AOR TITLE MODE PAGES WOULD BE NUMBERED CONSECUTIVELY WITH NO GAP.\nPARINTHE 'ENSUB' CARD DOES NOT CAUSE SHEET EJECTION.  IT MAY NOT CON-\nIND-ATAIN NARRATIVE AND MUST BE BLANK IN COLUMNS 06 TO 72.\nINDEX* HEAD  - PAGE HEADINGS\nIND-ASUPPLIES HEADING LINES UNDER THE BOOK AND SECTION HEADING LINES\nIND-A(IF ANY).  CAUSES SHEET EJECTION TO OCCUR.  FOLLOWING THE SHEET\nIND-AEJECTION, THE NEW PAGE WILL BE HEADED WITH BOOK NAME (UNLESS LEFT\nIND-ABLANK IN THE 'BOOK' CARD), THE SECTION NAME (UNLESS 'SECT' CARDS\nIND-AARE OMITTED OR CONTAIN BLANKS IN THE SECTION NAME FIELD, AND THE\nIND-AHEADING PROVIDED IN THE 'HEAD' CARD.  'HEAD' CARDS ARE STORED AND\nIND-APRINTED ON THE TOP OF EACH PAGE UNTIL ANOTHER 'HEAD' CARD, A\nIND-A'SECT' CARD, OR A 'BOOK' CARD IS ENCOUNTERED.  VALID ONLY IN THE\nIND-ANARRATIVE MODE.  BYPASSED IN TITLE MODE OR REPORT MODE.  IF THE\nIND-A'NOHED' OPTION HAS BEEN SPECIFIED, 'HEAD' CARDS WILL CAUSE SHEET\nIND-AEJECTION ONLY - NO HEADINGS WILL BE PRINTED.\nPARINUNLESS THE 'NOHED' OR 'NOTAB' OPTIONS HAVE BEEN SPECIFIED, THE\nIND-AHEADING WILL ALSO BE ENTERED INTO THE TABLE OF CONTENTS ALONG\nIND-AWITH THE PAGE NUMBER UPON WHICH IT FIRST APPEARS.\nPARINWHEN A 'SECT' CARD IS ENTERED, THE STORED HEADING WILL BE BLANKED\nIND-AOUT.  THE HEADING LINE FOR 'HEAD' CARDS WILL CONTAIN ONLY THE\nIND-APAGE NUMBER AND THE DATE UNTIL ANOTHER 'HEAD' CARD IS ENTERED.\nPARINIF 'HEAD' CARDS ARE OMITTED, THE HEADING LINE WILL CONTAIN ONLY\nIND-ATHE PAGE NUMBER AND THE DATE, AND SHEET EJECTION WILL OCCUR ONLY\nIND-AUPON RECOGNITION OF 'SECT' OR 'EJECT' WORDS OR WHEN THE SPECIFIED\nIND-ANUMBER OF LINES HAVE BEEN PRINTED ON A GIVEN PAGE.  HEADING LINES\nIND-AFOR BOOK AND/OR SECTION WOULD STILL FUNCTION AS DESCRIBED EVEN IF\nIND-A'HEAD' CARDS ARE OMITTED.\nPARINTHE FORMAT OF 'HEAD' CARDS IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'HEAD '\nIND-BCC. 06-50 DESIRED HEADING\nIND-BCC. 51-72 BLANK\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* IND-A - INDENT TO MARGIN A\nIND-ACAUSES DATA IN NARRATIVE PORTION OF CARD TO BE INDENTED FIVE\nIND-ASPACES.  OTHERWISE TREATED AS NORMAL NARRATIVE CARD.  MAXIMUM\nIND-ANUMBER OF CHARACTERS IN NARRATIVE PORTION OF CARD IS 65.  NARRA-\nIND-ATIVE MUST APPEAR IN CARD COLUMNS 06 TO 70.  CONTROL WORD IND-A IS\nIND-AINVALID IN REPORT MODE BUT MAY BE USED AS NEEDED IN NARRATIVE\nIND-AMODE OR TITLE MODE.\nINDEX* IND-B - INDENT TO MARGIN B\nIND-ACAUSES DATA IN NARRATIVE PORTION OF CARD TO BE INDENTED 10\nIND-ASPACES.  OTHERWISE TREATED AS NORMAL NARRATIVE CARD.  MAXIMUM\nIND-ANUMBER OF CHARACTERS IN NARRATIVE PORTION IS 60.  NARRATIVE MUST\nIND-AAPPEAR IN CARD COLUMNS 6 TO 65.  CONTROL CARD IND-B IS INVALID\nIND-AIN REPORT MODE BUT MAY BE USED AS NEEDED IN NARRATIVE MODE.\nIND-AMAY ALSO BE USED AS NEEDED IN TITLE MODE.\nINDEX* IND-C - INDENT TO MARGIN C\nIND-ACAUSES DATA IN NARRATIVE PORTION OF CARD TO BE INDENTED 15\nIND-ASPACES.  OTHERWISE TREATED AS NORMAL NARRATIVE CARD.  MAXIMUM\nIND-ANUMBER OF CHARACTERS IN NARRATIVE PORTION IS 55.  NARRATIVE MUST\nIND-AAPPEAR IN CARD COLUMNS 6 TO 60.  CONTROL WORD IND-C IS INVALID\nIND-AIN REPORT MODE BUT MAY BE USED AS NEEDED IN NARRATIVE MODE.\nIND-AMAY ALSO BE USED AS NEEDED IN TITLE MODE.\nINDEX* IND-D - INDENT TO MARGIN D\nIND-ACAUSES DATA IN NARRATIVE PORTION OF CARD TO BE INDENTED 20\nIND-ASPACES.  OTHERWISE TREATED AS NORMAL NARRATIVE CARD.  MAXIMUM\nIND-ANUMBER OF CHARACTERS IN NARRATIVE PORTION IS 50.  NARRATIVE MUST\nIND-AAPPEAR IN CARD COLUMNS 6 TO 55.  CONTROL WORD IND-D IS INVALID\nIND-AIN REPORT MODE BUT MAY BE USED AS NEEDED IN NARRATIVE MODE.\nIND-AMAY ALSO BE USED AS NEEDED IN TITLE MODE.\nINDEX* INDEX - SPECIAL ENTRY TO TABLE OF CONTENTS\nIND-ACAUSES THE DATA APPEARING IN COLUMNS 6 TO 65 TO BE PRINTED IN\nIND-ATHE NARRATIVE WITH AN AUTOMATIC * IN THE SECOND POSITION TO THE\nIND-ALEFT OF THE CARD DATA.  ALSO CAUSES TWO BLANK LINES TO BE LEFT\nIND-ABEFORE PRINTING THE CONTENTS OF COLUMNS 6 TO 65 WITH ONE BLANK\nIND-ALINE AFTER PRINTING.  ALSO CAUSES AN ENTRY TO BE MADE IN THE\nIND-ATABLE OF CONTENTS UNLESS 'NOTAB' OR 'NOHED' OPTIONS HAVE BEEN\nIND-ASPECIFIED.\nPARINTHE PURPOSE OF THE 'INDEX' CARD IS TO PROVIDE SUB-TITLES IN THE\nIND-ANARRATIVE AND TABLE OF CONTENTS ENTRIES WITHOUT THE SHEET EJEC-\nIND-ATION CAUSED BY USING THE CONTROL WORD 'HEAD'.  THE 'INDEX' CARD\nIND-ADOES NOT REPLACE THE STORED HEADING WHICH WILL BE PRINTED IF\nIND-ANORMAL OVERFLOW OCCURS.  AN EXAMPLE OF THE USE OF THE 'INDEX'\nIND-ACONTROL WORD FOLLOWS.  ASSUME THAT A GIVEN WRITE-UP CONTAINS A\nIND-ADESCRIPTION OF TRANSACTIONS UNDER THE HEADING 'TRANSACTIONS' AND\nIND-ATHAT THERE ARE TEN TRANSACTIONS WITH ONE PARAGRAPH DESCRIBING\nIND-AEACH TRANSACTION.  IF 'HEAD' CARDS WERE USED FOR THE NAME OF EACH\nIND-ATRANSACTION, THERE WOULD BE AN ENTRY IN THE TABLE OF CONTENTS\nIND-ASHOWING THE LOCATION OF EACH TRANSACTION BUT THE NARRATIVE WOULD\nIND-ACONTAIN A SEPARATE PAGE FOR EACH TRANSACTION.  THE BETTER ALTER-\nIND-ANATIVE WOULD BE TO USE THE 'HEAD' CONTROL WORD FOR THE GENERAL\nIND-ATITLE 'TRANSACTIONS' AND THE 'INDEX' CONTROL WORD FOR THE INDI-\nIND-AVIDUAL TRANSACTION NAMES.  THE TABLE OF CONTENTS WOULD THEN SHOW\nIND-ATHE GENERAL TITLE 'TRANSACTIONS' AND, UNDER THAT, AN ENTRY FOR\nIND-ATHE NAME OF EACH TRANSACTION.  IN THE NARRATIVE, TRANSACTION\nIND-ANAMES AND DESCRIPTIONS WOULD APPEAR ONE AFTER ANOTHER WITHOUT\nIND-ASHEET EJECTION AND ALL UNDER THE GENERAL HEADING 'TRANSACTIONS'.\nPARA      IN DOCUMENTS HAVING MANY SUB-TITLES, THE AUTHOR MAY WISH TO\n          AVOID THE POSSIBILITY OF HAVING A SUB-TITLE (INDEX CONTROL\n          WORD) APPEAR AS THE LAST LINE ON A PAGE WITH THE DESCRIPTIVE\n          NARRATIVE ON THE FOLLOWING PAGE.  IF SO, THE AUTHOR MAY\n          SPECIFY IN AN 'XLINE' CARD THAT PAGE OVERFLOW IS TO BE\n          FORCED WHEN AN INDEX CARD IS ENCOUNT- ERED AFTER A CERTAIN\n          NUMBER OF LINES HAVE BEEN PRINTED ON A PAGE.  SEE ALSO\n          'XLINE - INDEX LINES LIMIT.'\nPARINTHE 'INDEX' CONTROL WORD WILL BE TREATED AS DESCRIBED ABOVE IF\nIND-AENCOUNTERED IN THE NARRATIVE OR TITLE MODES.  IN THE REPORT MODE,\nIND-AAN ENTRY WILL BE MADE TO THE TABLE OF CONTENTS (UNLESS 'NOHED'\nIND-AOR 'NOTAB' HAVE BEEN SPECIFIED) BUT THE 'INDEX' CARD WILL NOT BE\nIND-APRINTED.  THIS CONTROL WORD PROVIDES THE ONLY METHOD FOR MAKING\nIND-AA TABLE OF CONTENTS ENTRY IN THE TITLE AND REPORT MODES.  CONTROL\nIND-AWORDS 'HEAD' AND 'SECT' ARE BYPASSED EXCEPT IN NARRATIVE MODE.\nINDEX* LINES - NUMBER OF LINES PER PAGE\nIND-AUSED TO INDICATE THE NUMBER OF LINES, INCLUDING HEADINGS AND\nIND-ASPACES, TO BE PRINTED ON EACH PAGE.  MAXIMUM NUMBER OF LINES\nIND-AWHICH MAY BE SPECIFIED IS 66.  THE 'LINES' CARD MAY BE ENTERED\nIND-AAT ANY POINT IN THE DATA REGARDLESS OF MODE.  WHEN A 'LINES'\nIND-ACARD IS ENCOUNTERED, THE SYSTEM DETERMINES WHETHER THE NUMBER\nIND-AOF LINES SPECIFIED HAVE BEEN PRINTED ON THE PRESENT PAGE.  IF\nIND-ASO, THE PRESENT PAGE IS EJECTED IMMEDIATELY.  ALL PAGES FOLLOWING\nIND-AWILL CONTAIN THE SPECIFIED NUMBER OF LINES UNTIL A NEW 'LINES'\nIND-ACARD IS ENCOUNTERED.  CONTROL WORDS 'EJECT, HEAD, AND SECT' WILL\nIND-ACAUSE SHEET EJECTION WHEN ENCOUNTERED WITHOUT AFFECTING OR BEING\n          AFFECTED BY THE 'LINES' CONTROL WORD.  AN 'INDEX' CARD WILL\n          CAUSE SHEET EJECTION TO OCCUR WHEN ENCOUNTERED IF THE NUMBER\n          OF LINES PRINTED EXCEEDS THE LIMIT SPECIFIED IN THE 'XLINE'\n          CARD.\nPARINIF THE 'LINES' CARD IS OMITTED, 56 LINES PER PAGE ARE ASSUMED.\nPARINTHE FORMAT OF THE 'LINES' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'LINES'\nIND-BCC. 06-07 NUMBER OF LINES DESIRED (NUMERIC, MAXIMUM 66)\nIND-BCC. 08-72 BLANK\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* LIST  - CHANGE TO LIST MODE\n          THE PROGRAM CHANGES TO LIST MODE.  THE CONTROL WORD MAY BE\n          ENTERED AT ANY POINT DURING A DOCUMENTATION RUN.  IF A PAPER\n          CHANGE IS REQUIRED OR IF THE AUTHOR WISHES TO CONVEY SOME\n          MESSAGE TO THE COMPUTER OPERATOR, THE DESIRED MESSAGE MAY BE\n          PLACED IN COLUMNS 06 TO 72 OF THE LIST CARD.  THIS CAUSES A\n          THREE LINE MESSAGE TO APPEAR ON THE CONSOLE.  THE FIRST LINE\n          READS 'NOW CHANGING TO LIST MODE', THE SECOND LINE CONTAINS\n          THE MESSAGE FROM COLUMNS 06 TO 72 OF THE LIST CARD, AND THE\n          THIRD LINE READS 'EOB TO CONTINUE'.\nPARINIF THE 'LIST' CARD IS BLANK IN COLUMNS 06 TO 72, THE MODE CHANGE\nIND-AAND SPACING CHANGE WILL OCCUR BUT NO MESSAGE WILL BE PRINTED AND\nIND-ATHE SYSTEM WILL NOT STOP.\nPARINIF MULTIPLE COPIES HAVE BEEN SPECIFIED, A MESSAGE STOP FOR ANY\nIND-AOF THE MODE CHANGES WILL OCCUR ONLY ON THE FIRST COPY.\nPARINTHE FORMAT OF THE 'LIST' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'LIST '\nIND-BCC. 06-72 MESSAGE TO CONSOLE OPERATOR (OPTIONAL)\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* NARR  - CHANGE TO NARRATIVE MODE\nIND-ACAUSES PROGRAM TO CHANGE TO NARRATIVE MODE.  MAY BE ENTERED AT\nIND-AANY POINT IN THE DATA REGARDLESS OF MODE.  CAUSES AN AUTOMATIC\nIND-ACHANGE TO SINGLE SPACING.  IF A PAPER CHANGE IS REQUIRED OR IF\nIND-ATHE AUTHOR WISHES TO CONVEY SOME MESSAGE TO THE COMPUTER OPER-\nIND-AATOR, THE DESIRED MESSAGE MAY BE PLACED IN COLUMNS 06 TO 72 OF\nIND-ATHE 'NARR' CARD.  THIS WILL CAUSE A THREE LINE MESSAGE TO APPEAR\nIND-AON THE CONSOLE.  THE FIRST LINE READS 'NOW CHANGING TO NARRATIVE\nIND-AMODE.'  THE SECOND LINE WILL CONTAIN THE MESSAGE FROM COLUMNS 06\nIND-ATO 72 OF THE 'NARR' CARD.  THE THIRD LINE READS 'EOB TO CONTINUE.\nPARINIF THE 'NARR' CARD IS BLANK IN COLUMNS 06 TO 72, THE MODE CHANGE\nIND-AAND SPACING CHANGE WILL OCCUR BUT NO MESSAGE WILL BE PRINTED AND\nIND-ATHE SYSTEM WILL NOT STOP.\nPARINIF MULTIPLE COPIES HAVE BEEN SPECIFIED, A MESSAGE STOP FOR ANY\nIND-AOF THE MODE CHANGES WILL OCCUR ONLY ON THE FIRST COPY.\nPARINTHE 'NARR' CARD WILL NOT CAUSE IMMEDIATE SHEET EJECTION.  WHEN\nIND-ATHE NEXT SHEET EJECTION OCCURS, FOR WHATEVER REASON, PAGE NUM-\nIND-ABERING AND PRINTING OF HEADINGS WILL RESUME ACCORDING TO THE OP-\nIND-ATIONS SPECIFIED IN THE OTHER CONTROL WORDS.  NOTE THAT THE PAGE\nIND-AOR SUB-PAGE NUMBERS ARE INCREMENTED WHILE PRINTING IN REPORT OR\nIND-ATITLE MODE EVEN THOUGH THEY ARE NOT PRINTED.  UNDER CERTAIN CIR-\nIND-ACUMSTANCES, THE AUTHOR MAY WISH TO SPECIFY THE PAGE NUMBER TO BE\nIND-AUSED UPON ENTERING THE NARRATIVE MODE.  FOR FURTHER INFORMATION\nIND-AON PAGE NUMBERING, SEE CONTROL WORDS 'PAGE, SUBPG, AND ENSUB.'\nPARINTHE FORMAT OF THE 'NARR' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'NARR '\nIND-BCC. 06-72 MESSAGE TO CONSOLE OPERATOR (OPTIONAL)\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nPARINIF A MODE CARD ('NARR', 'REPRT', OR 'TITLE') IS NOT PROVIDED,\nIND-ATHE MODE IS ASSUMED TO BE NARRATIVE.\nINDEX* NOHED - NO HEADINGS DESIRED\nIND-ACAUSES THE ELIMINATION OF ALL LEVELS OF HEADINGS AND OF TABLE OF\nIND-ACONTENTS.  THE 'NOHED' CARD MAY NOT CONTAIN NARRATIVE AND MUST BE\nIND-ABLANK IN COLUMNS 06 TO 72.  VALID IN ANY MODE BUT PROBABLY NOT\nIND-ANECESSARY IN REPORT OR TITLE MODE.  BOTH OF THESE MODES AUTOMAT-\nIND-AICALLY SUPPRESS PRINTING OF HEADINGS AND WILL NOT MAKE ENTRIES\nIND-ATO THE TABLE OF CONTENTS EXCEPT FOR 'INDEX' CARDS.\nPARINTHE 'NOHED' CARD MUST PRECEDE THE FIRST CARD WHICH WOULD CAUSE A\nIND-ALINE TO BE PRINTED IN EACH BOOK.  IF NOT, THE 'NOHED' CARD WILL\nIND-ABE BYPASSED AND AN ERROR MESSAGE WILL BE PRINTED ON THE DIAGNOS-\nIND-ATICS REPORT.\nPARINIF THE 'NOHED' CARD IS OMITTED (OR BYPASSED) NORMAL PAGE HEADING\nIND-AAND TABLE OF CONTENTS PROCEDURES WILL BE FOLLOWED IN ACCORDANCE\nIND-AWITH THE OTHER CONTROL WORDS GIVEN.\nPARINTHE 'NOHED' CONTROL WORD DIFFERS FROM THE 'NOTAB' CONTROL WORD\nIND-AIN THAT 'NOHED' SUPPRESSES BOTH HEADINGS AND TABLE OF CONTENTS\nIND-AWHILE THE 'NOTAB' CONTROL WORD SUPPRESSES ONLY THE TABLE OF CON-\nIND-ATENTS.\nINDEX* NOTAB - NO TABLE OF CONTENTS DESIRED\nIND-AUSED TO ELIMINATE THE TABLE OF CONTENTS.  DOES NOT INTERFERE WITH\nIND-ANORMAL PAGE HEADINGS SPECIFIED IN OTHER CONTROL WORDS.  VALID IN\nIND-AANY MODE BUT PROBABLY NOT NECESSARY IF ENTIRE BOOK IS TO BE PRO-\nIND-ADUCED IN REPORT OR TITLE MODE.  BOTH OF THESE MODES RESTRICT THE\nIND-ATABLE OF CONTENTS TO 'INDEX' CONTROL WORDS.  IF NO 'INDEX' CARDS\nIND-AARE PRESENT, NO TABLE ENTRIES WILL BE MADE AND, THEREFORE, THE\nIND-ATABLE OF CONTENTS WILL NOT BE PRINTED.  CAN BE USED IN NARRATIVE\nIND-AMODE OR MIXED MODES TO SUPPRESS THE TABLE OF CONTENTS EVEN THOUGH\nIND-ATHE DATA WOULD NORMALLY CAUSE ONE TO BE PRODUCED.\nPARINTHE 'NOTAB' CARD MUST PRECEDE THE FIRST CARD WHICH WOULD CAUSE A\nIND-ALINE TO BE PRINTED FOR EACH BOOK.  IF NOT, IT WILL BE BYPASSED\nIND-AAND AN ERROR MESSAGE WILL BE PRINTED ON THE DIAGNOSTICS REPORT.\nPARINIF THE 'NOTAB' CARD IS OMITTED (OR BYPASSED) A TABLE OF CONTENTS\nIND-AWILL BE PRINTED ONLY IF THE DATA CONTAINS 'INDEX' CARDS OR IF THE\nIND-ADATA CONTAINS 'HEAD' OR 'SECT' CARDS IN THE NARRATIVE MODE.\nPARINONCE A 'NOTAB' CARD HAS BEEN ACCEPTED FOR A PARTICULAR BOOK, IT\nIND-ACANNOT BE NEGATED UNTIL ANOTHER 'BOOK' CARD IS ENTERED.\nINDEX* PAGE  - SET PAGE NUMBER\nIND-ANORMALLY, PAGE NUMBERING AUTOMATICALLY BEGINS AT ONE FOR EACH\nIND-ABOOK AND CONTINUES CONSECUTIVELY.  IF THE AUTHOR WISHES, HOWEVER,\nIND-AHE MAY SET THE PAGE NUMBER TO A SPECIFIC VALUE AT THE BEGINNING\nIND-AOF A BOOK OR AT ANY POINT DURING THE RUN BY USING A 'PAGE' CARD.\nIND-ATHIS FEATURE MIGHT BE USED, FOR EXAMPLE, WHEN ONLY A FEW SELECTED\nIND-APAGES OF A LARGE BOOK HAVE BEEN CHANGED AND REQUIRE REPRINTING.\nIND-ABY ENTERING A 'PAGE' CARD BEFORE SHEET EJECTION OCCURS, THE NUM-\nIND-ABER SPECIFIED WILL BE USED FOR THE NEXT PAGE PRINTED.\nPARINALTHOUGH PAGE NUMBERS ARE NOT PRINTED DURING THE REPORT OR TITLE\nIND-AMODES, THE PAGE NUMBER COUNTER IS INCREMENTED IN ORDER THAT EN-\nIND-ATRIES CAN BE MADE IN THE TABLE OF CONTENTS BY USING AN 'INDEX'\nIND-ACONTROL WORD IF DESIRED.  'PAGE' IS VALID IN ALL MODES.\nPARINIF SUB-PAGE NUMBERING HAS BEEN SPECIFIED AND HAS NOT BEEN ENDED\nIND-AWHEN A 'PAGE' CARD IS ENCOUNTERED, SUB-PAGE NUMBERING WILL BE\nIND-ADISCONTINUED AND THE SPECIFIED NUMBER ENTERED INTO THE PAGE NUM-\nIND-ABER COUNTER.  IF THE AUTHOR WISHES TO CHANGE NUMBERING FROM ONE\nIND-ASUB-PAGE TO ANOTHER SUB-PAGE, THIS MUST BE DONE BY USING THE CON-\nIND-ATROL WORD 'SUBPG' RATHER THAN 'PAGE'.  IF HE WISHES TO SUSPEND\nIND-ASUB-PAGE NUMBERING WITHOUT RELOADING THE PAGE NUMBER THIS MUST\nIND-ABE DONE BY USING THE 'ENSUB' CARD.\nPARINTHE 'PAGE' CARD MUST CONTAIN THE DESIRED PAGE NUMBER IN COLUMNS\nIND-A11 TO 14 (NUMERIC ONLY - ZERO FILLED TO LEFT IF NECESSARY).  CARD\nIND-ACOLUMNS 15 TO 80 SHOULD BE BLANK.  IF THESE CONDITIONS ARE NOT\nIND-AMET, THE 'PAGE' CARD WILL BE BYPASSED AND AN APPROPRIATE ERROR\nIND-AMESSAGE WILL BE PRINTED ON THE DIAGNOSTICS REPORT.\nPARINIF THE 'PAGE' CARD IS OMITTED (OR BYPASSED) NORMAL PAGE NUMBERING\nIND-AWILL BEGIN AT ONE AND CONTINUE CONSECUTIVELY.\nPARINTHE FORMAT OF THE 'PAGE' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'PAGE '\nIND-BCC. 06-08 DESIRED PAGE NUMBER (NUMERIC-ZERO FILLED)\nIND-BCC. 09-72 BLANKS\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* PARA  - PARAGRAPH\nIND-ATHE PARA CONTROL WORD CAUSES AN EXTRA SPACE TO BE TAKEN PRIOR TO\nIND-APRINTING THE DATA IN THE NARRATIVE FIELD OF THE PARA CARD.  IF\nIND-ATHE NARRATIVE PORTION OF THE CARD IS LEFT BLANK, TWO BLANK LINES\nIND-AWILL APPEAR BETWEEN PARAGRAPHS.  BYPASSED IF ENCOUNTERED IN RE-\nIND-APORT MODE BUT MAY BE USED AS REQUIRED IN NARRATIVE OR TITLE MODE.\nINDEX* PARIN - PARAGRAPH WITH INDENTATION\nIND-ATHE PARIN CONTROL WORD FUNCTIONS AS A COMBINATION OF TWO OTHER\nIND-ACONTROL WORDS - PARA AND IND-A.  IT HAS THE FUNCTIONS OF BOTH IN\nIND-ATHAT IT CAUSES AN EXTRA SPACE PRIOR TO PRINTING AND IT AUTOMATIC-\nIND-AALLY INDENTS THE NARRATIVE PORTION (COLUMNS 06 TO 70) FIVE\nIND-ASPACES.  MUST CONTAIN BLANKS IN COLUMNS 71 TO 72.  BYPASSED IF\nIND-AENCOUNTERED IN REPORT MODE BUT MAY BE USED AS REQUIRED IN TITLE\nIND-AOR NARRATIVE MODES.\nINDEX* PLAB  - PARAGRAPH LABELS\nPARA           PLAB1 - PARAGRAPH LABEL ONE\n               PLABA - PARAGRAPH LABEL ONE WITH SPACE\n               PLAB2 - PARAGRAPH LABEL TWO\n               PLABB - PARAGRAPH LABEL TWO WITH SPACE\n               PLAB3 - PARAGRAPH LABEL THREE\n               PLABC - PARAGRAPH LABEL THREE WITH SPACE\n               PLAB4 - PARAGRAPH LABEL FOUR\n               PLABD - PARAGRAPH LABEL FOUR WITH SPACE\n               PLAB5 - PARAGRAPH LABEL FIVE\n               PLABE - PARAGRAPH LABEL FIVE WITH SPACE\n               PLAB6 - PARAGRAPH LABEL SIX\n               PLABF - PARAGRAPH LABEL SIX WITH SPACE\n               PLAB7 - PARAGRAPH LABEL SEVEN\n               PLABG - PARAGRAPH LABEL SEVEN WITH SPACE\n               PLAB8 - PARAGRAPH LABEL EIGHT\n               PLABH - PARAGRAPH LABEL EIGHT WITH SPACE\n               PLAB9 - PARAGRAPH LABEL NINE\n               PLABI - PARAGRAPH LABEL NINE WITH SPACE\nPARA      THE DOCUMENTATION SYSTEM HAS THE CAPABILITY OF STORING UP TO\n          NINE 67 CHARACTER PARAGRAPH LABELS.  THE DESIRED LABELS ARE\n          CREATED AND DELETED THROUGH THE USE OF CONTROL WORDS 'SAVE1'\n          THROUGH 'SAVE9'.  ONCE ESTABLISHED BY THE 'SAVE ' CONTROL\n          WORDS, THEY MAY BE CALLED FOR AS NEEDED BY USING THE 'PLAB '\n          CONTROL WORDS.\nPARA      WHEN A 'PLAB ' CARD WITH A NUMERIC DIGIT IN THE LAST\n          POSITION OF THE CONTROL WORD IS ENCOUNTERED, THE SYSTEM WILL\n          PRINT THE PARAGRAPH LABEL STORED BY A 'SAVE ' CARD WITH THE\n          CORRESPONDING NUMBER.  THE LINE FOLLOWING THE PRINTED\n          PARAGRAPH LABEL WOULD BE PRINTED WITH THE DATA CONTAINED IN\n          COLUMNS 06 TO 72 OF THE 'PLAB ' CARD.\nPARA      PARAGRAPH LABEL CARDS WITH AN ALPHABETIC CHARACTER (A\n          THROUGH I) IN THE LAST POSITION OF THE CONTROL WORD REFER TO\n          THE SAME NINE PARAGRAPH LABELS AS THE DIGITS 1 THROUGH 9\n          RESPECTIVELY.  THE USE OF AN ALPHABETIC CHARACTER WILL CAUSE\n          THE SAME RESULT AS A NUMER- IC DIGIT EXCEPT THAT THE\n          PRINTING OF THE PARAGRAPH LABEL IS PRE- CEDED BY A BLANK\n          LINE.\nPARA      IF THE NARRATIVE PORTION OF A PARAGRAPH LABEL IS BLANK, THE\n          SYS- TEM WILL PRINT THE STORED PARAGRAPH LABEL AS DESCRIBED\n          ABOVE BUT WILL NOT GENERATE A NARRATIVE LINE FOLLOWING THE\n          PRINTED LABEL.  THIS ALLOWS THE USE OF PARAGRAPH LABELS FOR\n          VIRTUALLY ANY KIND OF CONSTANT DATA WHICH MAY BE REPEATED AT\n          WILL THROUGHOUT THE BOOK.\nPARA      THE FORMAT OF THE 'PLAB ' CARD IS--\nPARA           CC. 01-05 CONTROL WORD INDICATING DESIRED LABEL\n               CC. 06-72 NARRATIVE TO FOLLOW PARAGRAPH LABEL\n               CC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* PRTPG - PRINT PAGE/LINE NUMBERS (INPUT SEQUENCE NO.)\nIND-APRTPG WILL CAUSE CARD SEQUENCE NUMBERS TO BE PRINTED IN THE RIGHT\nIND-AMARGIN.  IF THE 'SEQ' OPTION HAS BEEN SPECIFIED, THE PROGRAM WILL\nIND-APRINT THE NEW CARD SEQUENCE NUMBERS.  IF NOT, COLUMNS 73 TO 80 OF\nIND-ATHE INPUT DATA WILL BE PRINTED.\nPARINTHE PRTPG CONTROL WORD MAY BE USED AT ANY TIME REGARDLESS OF THE\nIND-AMODE OF OPERATION.  SINCE REPORT MODE USES ALL 132 PRINTING POSI-\nIND-ATIONS, HOWEVER, THE PRTPG CONTROL WORD WILL NOT BECOME EFFECTIVE\nIND-AUNTIL NARRATIVE OR TITLE MODE IS ENTERED.  SEQUENCE NUMBERS WILL\nIND-ATHEN BE PRINTED FROM THAT POINT TO THE END OF THE BOOK.  PRINTING\nIND-AOF PAGE AND LINE (SEQUENCE) NUMBERS WILL ALSO BE SUSPENDED IF THE\nIND-APROGRAM SUBSEQUENTLY ENTERS THE REPORT MODE.\nPARINTHE PRTPG CARD MAY NOT CONTAIN NARRATIVE AND MUST BE BLANK IN\nIND-ACOLUMNS 06 TO 72.  IF PRTPG IS OMITTED, SEQUENCE NUMBERS WILL\nIND-ANOT BE PRINTED.\nINDEX* REPRT - CHANGE TO REPORT MODE\nIND-ACAUSES THE SYSTEM TO ENTER THE REPORT MODE (SEE SECTION ON MODES\nIND-AOF OPERATION).  IF CARD COLUMNS 06 TO 72 ARE BLANK, THE SYSTEM IS\nIND-ACHANGED TO REPORT MODE WITHOUT STOPPING.  IF A PAPER CHANGE IS\nIND-AREQUIRED, OR THE AUTHOR WISHES TO CONVEY SOME MESSAGE TO THE COM-\nIND-APUTER OPERATOR, THE DESIRED MESSAGE MAY BE PUNCHED IN COLUMNS 06\nIND-ATO 72 OF THE REPRT CARD.  IF 06 TO 72 ARE NOT BLANK, A THREE LINE\nIND-AMESSAGE WILL BE PRINTED ON THE OPERATOR'S CONSOLE.  THE FIRST\nIND-ALINE READS 'NOW CHANGING TO REPORT SAMPLE FORMAT.'.  THE SECOND\nIND-ALINE WILL CONTAIN THE DESIRED MESSAGE FROM COLUMNS 06 TO 72 OF\nIND-ATHE REPRT CARD AND THE THIRD LINE WILL READ 'EOB TO CONTINUE.'\nIND-ATHE SYSTEM WILL THEN STOP SO THAT THE OPERATOR MAY TAKE WHATEVER\nIND-AACTION IS INDICATED IN THE CONSOLE MESSAGE.\nPARINSINCE THE CONTROL WORD REPRT CAN BE USED IN ANY MODE, THE AUTHOR\nIND-ACOULD REQUEST THAT THE OPERATOR REMOVE ONE PRE-PRINTED FORM AND\nIND-AINSERT ANOTHER BY USING MULTIPLE REPRT CARDS AT THE APPROPRIATE\nIND-APLACES.\nPARINREPRT, LIKE OTHER MODE CHANGES (NARR AND TITLE), CAUSES AN AUTO-\nIND-AMATIC CHANGE TO SINGLE SPACING BUT DOES NOT CAUSE SHEET EJECTION.\nIND-AIF DOUBLE SPACING IS DESIRED, THE AUTHOR MUST INSERT A 'DOUBL'\nIND-ACARD AFTER A MODE CHANGE.  IF 'PRTPG' HAS BEEN SPECIFIED PRIOR TO\nIND-AENTERING REPORT MODE, THAT OPTION IS AUTOMATICALLY CANCELLED AS\nIND-ATHE REPORT MODE USES ALL 132 PRINTING POSITIONS.  REPORT MODE IS\nIND-ANOT VALID WHEN THE TWO-UP MODE OF OUTPUT OPTION IS IN FORCE.\nPARINIF A MODE CARD (REPRT, NARR, OR TITLE) IS NOT PRESENT, EACH BOOK\nIND-AWILL BEGIN IN NARRATIVE MODE.\nSPAC1\nIND-A*****NOTE-WHEN PRINTING MULTIPLE COPIES USING THE COPY OPTION,\nIND-ATHE COMPUTER DOES NOT STOP FOR PAPER CHANGES ON COPIES AFTER THE\nIND-AFIRST ONE.  IF MULTIPLE COPIES OF REPORT SAMPLES ON SPECIAL PAPER\nIND-AARE NEEDED, THEY MUST BE RUN SEPARATELY FROM THE REST OF THE DOC-\nIND-AUMENTATION.  IF REPORT SAMPLES CAN BE PRINTED ON THE SAME PAPER\nIND-AAS THE DOCUMENTATION, THERE IS NO NEED TO MAKE SEPARATE RUNS.\nPARINTHE AUTHOR IS FREE TO CHANGE FROM ONE MODE TO ANOTHER AT ANY\nIND-ATIME.\nINDEX* SAVE  - SAVE PARAGRAPH LABELS\n               SAVE1 - SAVE PARAGRAPH LABEL ONE\n               SAVE2 - SAVE PARAGRAPH LABEL TWO\n               SAVE3 - SAVE PARAGRAPH LABEL THREE\n               SAVE4 - SAVE PARAGRAPH LABEL FOUR\n               SAVE5 - SAVE PARAGRAPH LABEL FIVE\n               SAVE6 - SAVE PARAGRAPH LABEL SIX\n               SAVE7 - SAVE PARAGRAPH LABEL SEVEN\n               SAVE8 - SAVE PARAGRAPH LABEL EIGHT\n               SAVE9 - SAVE PARAGRAPH LABEL NINE\nPARA      THE DOCUMENTATION SYSTEM HAS THE CAPABILITY OF STORING UP TO\n          NINE 67 CHARACTER PARAGRAPH LABELS.  THE DESIRED LABELS ARE\n          CREATED AND DELETED THROUGH THE USE OF CONTROL WORDS 'SAVE1'\n          THROUGH 'SAVE9'.  ONCE ESTABLISHED BY THE 'SAVE ' CONTROL\n          WORDS, THEY MAY BE CALLED FOR AS NEEDED BY USING THE 'PLAB '\n          CONTROL WORDS.\nPARA      WHEN A 'SAVE ' CONTROL WORD IS ENCOUNTERED, THE DATA\n          CONTAINED IN THE NARRATIVE FIELD IS STORED AS A PARAGRAPH\n          LABEL REFERENCED BY THE NUMBER IN THE LAST POSITION OF THE\n          CONTROL WORD.  'SAVE ' CARDS ARE NOT PRINTED UNLESS\n          ENCOUNTERED IN LIST MODE WHICH PROCESSES 'SAVE ' CARDS LIKE\n          NORMAL NARRATIVE CARDS AND DOES NOT STORE THEM.\nPARA      'SAVE ' CARDS ARE EFFECTIVE IN NARRATIVE AND TITLE MODES\n          ONLY.  IF ENCOUNTERED IN REPORT MODE, THEY ARE BYPASSED AND\n          A DIAGNOSTIC MESSAGE IS PRODUCED.\nPARA      THE FORMAT OF 'SAVE ' CARDS IS--\nPARA           CC. 01-05 CONTROL WORD SPECIFYING SAVE AREA NUMBER\n               CC. 06-72 DESIRED PARAGRAPH LABEL\nPARA           CC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* SECT  - BEGINNING OF SECTION\nIND-ASECTION CARDS ARE AVAILABLE AT THE AUTHOR'S OPTION TO BREAK A\nIND-ABOOK INTO SECTIONS.  IF USED, THE SECT CARD WILL CAUSE AN ENTRY\nIND-ATO BE MADE IN THE TABLE OF CONTENTS.  IT WILL ALSO CAUSE AN\nIND-AADDITIONAL LINE OF HEADINGS, SUBORDINATE TO THE BOOK HEADINGS\nIND-ABUT SUPERIOR TO THE 'HEAD' CARD HEADINGS, TO BE PRINTED ON EACH\nIND-APAGE.  THE TABLE OF CONTENTS ENTRY AND THE SECTION HEADING WILL\nIND-ABE TAKEN FROM COLUMNS 06 TO 60 OF THE INPUT DATA AND THE SECTION\nIND-ANUMBER IS TAKEN FROM COLUMNS 67 TO 72.  IF SECT CARDS ARE OMITTED\nIND-AOR IF THE SECTION NAME CONTAINS BLANKS, THE HEADING LINE FOR SEC-\nIND-ATION ON EACH PAGE WILL BE OMITTED.  ADDITIONALLY, THE AUTHOR MAY\nIND-ASUPPRESS THE PRINTING OF SECTION NAMES AND/OR NUMBERS BY USING\nIND-ATHE CONTROL WORDS 'SENUM' OR 'SEHED'.\nPARINIF HEAD CARDS ARE IN USE, THE STORED HEADING FROM THE LAST HEAD\nIND-ACARD WILL BE BLANKED OUT BY A SECT CARD.  THE THIRD LINE OF HEAD-\nIND-AING WILL, THEREFORE, CONTAIN ONLY THE DATE AND PAGE NUMBER UNTIL\n          ANOTHER HEAD CARD IS ENCOUNTERED.  COLUMN HEADINGS\n          ESTABLISHED BY 'COLM1,' 'COLM2,' AND 'COLM3' CONTROL WORDS\n          ARE ALSO BLANKED BY A SECT CARD.\nPARA      AUTOMATIC SHEET EJECTION OCCURS WHEN THE 'SECT' CONTROL WORD\n          IS ENCOUNTERED.  THE FOLLOWING PAGE IS PRINTED WITH A BOOK\n          HEADING, IF APPLICABLE, AND THE NEW SECTION HEADING.  OTHER\n          HEADING LINES WHICH ARE SUBORDINATE TO SECTION HEADINGS HAVE\n          BEEN BLANKED OUT.  A PAGE HEADED IN THIS MANNER CAN BE USED\n          VERY EFFECTIVELY AS AN INTRODUCTION TO THE NEW SECTION.\n          SOME GENERAL INFORMATION ON THE CONTENT OF THE NEW SECTION\n          PROVIDES A SMOOTH TRANSITION FROM ONE MAJOR TOPIC TO ANOTHER\n          AND MAKES THE BOOK MORE READABLE.  SINCE THE OBJECTIVE OF\n          ALL WRITING IS TO COMMUNICATE INFORMATION TO THE READER,\n          INTRODUCTORY MATERIAL FOR EACH SECTION IS USUALLY DESIRABLE.\nPARA      IF A 'SECT' CARD IS IMMEDIATELY FOLLOWED BY A 'HEAD' CARD,\n          THE SECTION INTRODUCTION PAGE DESCRIBED IN THE PREVIOUS\n          PARAGRAPH WILL BE LEFT BLANK BECAUSE BOTH 'SECT' AND 'HEAD'\n          CAUSE AUTOMATIC SHEET EJECTION.  IF THE AUTHOR DOES NOT\n          INTEND TO PROVIDE TRANSI- TIONAL INTRODUCTORY MATERIAL AT\n          THE BEGINNING OF A SECTION, THE CONTROL WORD 'SECTN' SHOULD\n          BE USED INSTEAD OF 'SECT'.\nPARINSECT CARDS ARE VALID ONLY IN NARRATIVE MODE AND WILL BE BYPASSED\nIND-AIF ENCOUNTERED IN REPORT MODE OR TITLE MODE.  IF THE NOHED OPTION\nIND-AHAS BEEN SPECIFIED, SECT CARDS WILL CAUSE SHEET EJECTION ONLY.\nPARINTHE FORMAT FOR 'SECT' CARDS IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'SECT '\nIND-BCC. 06-60 SECTION NAME (OPTIONAL)\nIND-BCC. 61-66 BLANKS\nIND-BCC. 67-72 SECTION NUMBER (ALPHA-NUMERIC)\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* SECTN - BEGINNING OF SECTION WITH NO SHEET EJECTION\n          THE CONTROL WORD 'SECTN' INDICATES THE BEGINNING OF A NEW\n          SECTION OF THE BOOK.  ITS FUNCTION IS EXACTLY THE SAME AS\n          THE 'SECT' CON- TROL WORD EXCEPT THAT IT DOES NOT CAUSE AN\n          AUTOMATIC SHEET EJECT TO OCCUR AND, THUS, DOES NOT PROVIDE\n          FOR AN INTRODUCTION TO THE NEW SECTION.  'SECTN' CARDS ARE\n          NOT PRINTED WHEN ENCOUNTERED.  THE NEW SECTION HEADING\n          PROVIDED BY THE 'SECTN' CONTROL WORD WILL APPEAR ON THE NEXT\n          PAGE PRINTED.  MOST OFTEN, THIS WILL OCCUR WHEN A 'HEAD'\n          CARD IMMEDIATELY FOLLOWS THE 'SECTN' CARD.\nPARA      REFER TO CONTROL WORD 'SECT' FOR FURTHER INFORMATION ON THE\n          USE OF HEADINGS, SECTIONS, AND INTRODUCTIONS.\nINDEX* SEHED - SUPPRESS SECTION HEADINGS\nIND-ATHE SEHED CONTROL WORD SUPPRESSES THE NORMAL PRINTING OF SECTION\nIND-ANAMES AND NUMBERS AS THE SECOND LINE OF HEADINGS ON EACH PAGE.\nIND-ANORMALLY, SECTION NAMES AND NUMBERS ARE PRINTED IF THEY APPEAR\nIND-AIN THE SECTION CARDS ENTERED IN THE DATA.  SEHED SUPPRESSES ANY\nIND-ASECTION NAMES AND NUMBERS WHICH MAY BE IN THE DATA.\nPARINMAY BE USED AT THE DISCRETION OF THE AUTHOR AT ANY POINT IN THE\nIND-ADATA, CAUSING SUPPRESSION OF THE SECTION HEADING LINE FROM THAT\nIND-APOINT TO THE END OF THE BOOK.  MAY NOT CONTAIN DATA IN THE NAR-\nIND-ARATIVE FIELD - MUST BE BLANK IN COLUMNS 11-80.\nINDEX* SENUM - SUPPRESS PRINTING OF SECTION NUMBERS\nIND-ATHE SENUM CONTROL WORD SUPPRESSES THE NORMAL PRINTING OF SECTION\nIND-ANUMBERS IN THE SECTION HEADING LINE ON EACH PAGE.  DOES NOT AF-\nIND-AFECT PRINTING OF SECTION NAMES.  NORMALLY, SECTION HEADINGS WITH\nIND-ABOTH SECTION NAME AND SECTION NUMBER ARE PRINTED AS THE SECOND\nIND-ALINE OF HEADINGS ON EACH PAGE IF SECTION CARDS ARE PRESENT IN THE\nIND-AINPUT DATA.  SENUM WILL ALLOW THE PRINTING OF SECTION NAMES BUT\nIND-ASUPPRESS SECTION NUMBERS.\nPARINMAY BE USED AT THE DISCRETION OF THE AUTHOR AT ANY POINT IN THE\nIND-ADATA, CAUSING SUPPRESSION OF SECTION NUMBERS FROM THAT POINT TO\nIND-ATHE END OF THE BOOK.  MAY NOT CONTAIN DATA IN THE NARRATIVE\nIND-AFIELD - MUST BE BLANK IN COLUMNS 06-72.\nPARINSENUM DIFFERS FROM SEHED IN THAT SEHED SUPPRESSES BOTH SECTION\nIND-ANUMBER AND SECTION NAME WHEREAS SENUM SUPPRESSES SECTION NUMBER\nIND-AONLY.\nINDEX* SEQ   - PUNCH RESEQUENCED DOCUMENTATION DECK\nIND-ACAUSES THE PROGRAM TO PUNCH OUT A NEW DOCUMENTATION DECK WITH\nIND-AREGENERATED SEQUENCE NUMBERS.  IF THE AUTHOR WISHES TO BEGIN NUM-\nIND-ABERING AT SOME POINT OTHER THAN 00010 HE MAY SPECIFY THE BEGIN-\nIND-ANING NUMBER IN COLUMNS 06 TO 10.  IF COLUMNS 06 TO 10 ARE BLANK,\nIND-ANUMBERING WILL AUTOMATICALLY BEGIN AT 00010.  NUMBERS WILL BE\nIND-AINCREMENTED BY 10 WHEREVER NUMBERING BEGINS.  SEQ CARD MAY NOT\nIND-ACONTAIN NARRATIVE-MUST BE BLANK IN COLUMNS 11 TO 72.  MUST PRE-\nIND-ACEDE THE FIRST CARD WHICH WOULD CAUSE A LINE TO BE PRINTED FOR\nIND-AEACH BOOK.  IF OMITTED, A NEW DECK WILL NOT BE PUNCHED.\nINDEX* SINGL - NORMAL SPACING TO BE SINGLE-SPACE\nIND-ACAUSES THE NARRATIVE TO BE SINGLE SPACED UNLESS OVERRIDDEN BY\nIND-AOTHER CONTROL WORDS SUCH AS PARA, PARIN, SPAC1 . . . SPAC9.  MAY\nIND-ABE USED AT ANY POINT IN THE DATA REGARDLESS OF MODE.  SINGLE\nIND-ASPACING WILL BEGIN WITH THE NEXT LINE AND CONTINUE UNTIL A DOUBL\nIND-ACARD IS RECOGNIZED.  THE SINGL CARD MAY NOT CONTAIN NARRATIVE AND\nIND-AMUST BE BLANK IN COLUMNS 06 TO 72.\nPARINIF THE SINGL AND DOUBL CARDS ARE BOTH OMITTED SPACING WILL AUTO-\nIND-AMATICALLY BEGIN WITH SINGLE SPACING FOR EACH BOOK.  NOTE ALSO\nIND-ATHAT ANY MODE CHANGE CONTROL WORD (NARR, REPRT, OR TITLE) WILL\nIND-AAUTOMATICALLY CHANGE NORMAL SPACING TO SINGLE.\nINDEX* SKIP  - SKIP A PAGE\nIND-ACAUSES THE PROGRAM TO EJECT TO THE NEXT PAGE, GENERATE THE BOOK\nIND-AAND SECTION NAME LINES, IF ANY, AND REPLACE THE HEADING LINE (ON\nIND-ATHIS PAGE ONLY) WITH THE DATA CONTAINED IN COLUMNS 06-50 OF THIS\nIND-ACARD.  THE PAGE IS THEN EJECTED AND ALL HEADING LINES ARE PRINTED\nIND-AON THE NEXT PAGE.  THE DATA IN COLUMNS 06-50 WILL ALSO BE ENTERED\nIND-AIN THE TABLE OF CONTENTS.\nPARINTHIS CONTROL WORD FACILITATES ENTERING HAND-DRAWN CHARTS INTO THE\n          MANUAL WITHOUT DISTURBING THE PAGE NUMBERING SEQUENCE.\n          MATERIALS ENTERED IN THIS MANNER WILL ALSO BE REFERENCED IN\n          THE TABLE OF CONTENTS.\nPARINTHE FORMAT OF THE 'SKIP' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'SKIP'\nIND-BCC. 06-50 DESIRED DATA\nIND-BCC. 51-72 BLANK\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* SPAC  - EXTRA SPACES\nIND-ASPAC1 = ONE EXTRA SPACE\nIND-ASPAC2 = TWO EXTRA SPACES\nIND-ASPAC3 = THREE EXTRA SPACES\nIND-ASPAC4 = FOUR EXTRA SPACES\nIND-ASPAC5 = FIVE EXTRA SPACES\nIND-ASPAC6 = SIX EXTRA SPACES\nIND-ASPAC7 = SEVEN EXTRA SPACES\nIND-ASPAC8 = EIGHT EXTRA SPACES\nIND-ASPAC9 = NINE EXTRA SPACES\nPARINTHE CONTROL WORDS LISTED ABOVE WILL CAUSE THE COMPUTER TO SPACE\nIND-ATHE NUMBER OF LINES INDICATED. THE NUMBER OF BLANK LINES INSERTED\nIND-ABY USE OF SPACE CONTROL CARDS DEPENDS UPON WHETHER NORMAL SPACING\nIND-AIS SINGLE OR DOUBLE.  THE FOLLOWING TABLE INDICATES THE NUMBER OF\nIND-ABLANK LINES LEFT WHEN USING SPACE CONTROL CARDS WITH NORMAL\nIND-ASPACING SPECIFIED AS SINGLE OR DOUBLE --\nIND-C  SPACE CARDS                        SINGLE    DOUBLE\nIND-C  ----- -----                        ------    ------\nSPAC1\nIND-DSPAC1                              1         2\nIND-DSPAC2                              2         4\nIND-DSPAC3                              3         6\nIND-DSPAC4                              4         8\nIND-DSPAC5                              5        10\nIND-DSPAC6                              6        12\nIND-DSPAC7                              7        14\nIND-DSPAC8                              8        16\nIND-DSPAC9                              9        18\nSPAC2\nPARINIF PAGE OVERFLOW OCCURS DURING SPACING, NORMAL HEADINGS WILL\nIND-ABE PRINTED ACCORDING TO THE SPECIFICATIONS INDICATED BY OTHER\nIND-ACONTROL WORDS.  FOLLOWING SHEET EJECTION AND NORMAL PAGE HEAD-\nIND-AINGS, ANY REMAINING SPACES WILL BE LEFT BEFORE READING THE\nIND-ANEXT CARD.\nPARA      SPACE CARDS MAY CONTAIN NARRATIVE DATA IN THE NARRATIVE\n          FIELD.  IF SO, THE SPACING INDICATED WILL BE PERFORMED AND\n          THE NARRATIVE DATA WILL BE PRINTED ON THE NEXT LINE.\nPARINSPACE CARDS MAY BE USED AT ANY TIME REGARDLESS OF MODE.\nINDEX* SUBPG - BEGIN SUB-PAGE NUMBERING\nIND-ATHE SUBPG CONTROL WORD IS USED WHEN INSERTIONS ARE ADDED TO A\nIND-ABOOK AND THE AUTHOR DOES NOT WISH TO REPRINT THE ENTIRE BOOK,\nIND-ABUT ONLY THE PORTION(S) CHANGED.  IF, FOR EXAMPLE, THE AUTHOR\nIND-AWISHES TO ADD THREE PAGES OF NEW DOCUMENTATION BETWEEN PAGES 45\nIND-AAND 46, WITHOUT PRINTING ANY OF THE EXISTING PAGES, HE WOULD\nIND-APRECEDE THE DATA BEING ADDED BY A SUBPG CARD CONTAINING THE FOL-\nIND-ALOWING DATA '045.01' IN COLUMNS 06 TO 11.  THE SUBPG CARD WOULD\nIND-ABE FOLLOWED BY THE DATA TO BE INSERTED AND BY AN ENSUB CARD.\nIND-ATHIS WOULD CAUSE THE THREE PAGES TO BE NUMBERED 45.01, 45.02,\nIND-AAND 45.03.  THE NEXT PAGE AFTER THE ENSUB CARD WOULD BE NUMBERED\nIND-APAGE 46.  IF AT SOME LATER TIME, THE AUTHOR NEEDED TO ADD MORE\nIND-APAGES FOLLOWING PAGE 45.03, HE COULD FOLLOW THE SAME PROCEDURE\nIND-AUSING '045.04' IN THE SUBPG CARD.  IF THE AUTHOR WISHES TO ADD\nIND-ADATA IN THE MIDDLE OF PAGE 45 WHICH WILL CAUSE AN OVERFLOW ONTO\nIND-AONE OR MORE ADDITIONAL PAGES, HE MUST REPRINT ALL OF THE DATA\nIND-AFOR PAGE 45 PRECEDED BY THE SUBPG CARD.\nPARINTHE SUBPG CARD MAY ALSO BE USED WITHOUT SPECIFYING THE PAGE NUM-\nIND-ABER UNDER CERTAIN CIRCUMSTANCES.  IF, FOR EXAMPLE, MANY CHANGES\nIND-AWERE BEING MADE TO A SINGLE SECTION OF A BOOK AND THE AUTHOR\nIND-AWANTED TO REPRINT THE ENTIRE SECTION WITHOUT DISTURBING PAGE NUM-\nIND-ABERS OF PRECEDING AND FOLLOWING SECTIONS, THE SUBPG CONTROL WORD\nIND-ACOULD BE USED.  ONE PROCEDURE FOR THIS TYPE OF SITUATION WOULD BE\nIND-ATO SELECT ALL OF THE DATA CARDS FOR THE DESIRED SECTION, PRECED-\nIND-AING THEM WITH A 'PAGE' CONTROL CARD TO INDICATE THE FIRST PAGE OF\nIND-ATHE SECTION.  AT THE POINT(S) WHERE ADDITIONAL DATA IS BEING IN-\nIND-ASERTED, THE AUTHOR WOULD PRECEDE EACH GROUP OF INSERTIONS WITH A\nIND-ASUBPG CARD CONTAINING NO STARTING NUMBER AND FOLLOWING EACH GROUP\nIND-AWITH AN ENSUB CARD.  THIS WOULD CAUSE THE SYSTEM TO START SUB-\nIND-APAGE NUMBERING ON THE NEXT PAGE PRINTED USING WHATEVER PAGE NUM-\nIND-ABER HAD ACCUMULATED AND CONTINUING THE SUB-PAGING UNTIL THE ENSUB\nIND-ACARD WAS ENCOUNTERED.  BY SO DOING, THE FIRST PAGE OF THE NEXT\nIND-ASECTION (WHICH WAS NOT PRINTED) WILL STILL HAVE THE SAME PAGE\nIND-ANUMBER SINCE ALL INSERTIONS WERE ENTERED UNDER SUB-PAGING.\nPARINONCE SUB-PAGING HAS BEEN STARTED BY USING THE SUBPG CONTROL WORD\nIND-AIT WILL CONTINUE TO END OF BOOK OR UNTIL AN ENSUB, PAGE, OR SUBPG\nIND-ACONTROL WORD IS ENCOUNTERED.  CONTROL WORDS BOOK, ENSUB, AND PAGE\nIND-AWILL ALL CAUSE SUB-PAGE NUMBERING TO END BEFORE THE NEXT PAGE IS\nIND-APRINTED, BUT WITH SOMEWHAT DIFFERENT RESULTS.  ANOTHER SUBPG CARD\nIND-AENDS SUB-PAGING WITH THE PAGE NUMBERS BEING USED AND CAUSES SUB-\nIND-APAGING TO RESUME WITH THE NUMBERS SPECIFIED IN THE NEW SUBPG\nIND-ACARD.\nPARINIF SUB-PAGING IS ENDED BY A BOOK CARD, THE NEXT BOOK WILL BEGIN,\nIND-AAS USUAL, AT PAGE ONE UNLESS THE BOOK CARD IS FOLLOWED BY A PAGE\nIND-AOR SUBPG CARD.\nPARINIF SUB-PAGING IS ENDED BY AN ENSUB CARD, THE NEXT PAGE PRINTED\nIND-AWILL CONTAIN THE NEXT SEQUENTIAL PAGE NUMBER.  IF, FOR EXAMPLE,\nIND-AENSUB WAS ENCOUNTERED DURING THE PRINTING OF PAGE 213.07 THE\nIND-ANEXT PAGE WOULD BE NUMBERED 214.\nPARINIF SUB-PAGING IS ENDED BY A PAGE CARD, THE NEXT PAGE PRINTED\nIND-AWOULD CONTAIN THE PAGE NUMBER SPECIFIED IN THE PAGE CARD.\nPARINTHE SUBPG CARD MAY BE USED AS DESIRED REGARDLESS OF MODE.  IF\nIND-AOMITTED, NORMAL PAGE NUMBERING WILL OCCUR.\nPARINTHE FORMAT OF THE SUBPG CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'SUBPG'\nIND-BCC. 06-08 DESIRED PAGE NUMBER (NUMERIC)     * OPTIONAL, BUT\nIND-BCC. 09    DECIMAL POINT '.'                 * MUST USE ALL\nIND-BCC. 10-11 DESIRED SUB-PAGE NUMBER (NUMERIC) * OR NONE\nIND-BCC. 12-72 BLANK\nIND-BCC. 73-80 SEQUENCE NUMBER (OPTIONAL)\nINDEX* TITLE - CHANGE TO TITLE MODE\nIND-ACAUSES PROGRAM TO CHANGE TO TITLE MODE.  MAY BE ENTERED AT ANY\nIND-APOINT IN THE DATA REGARDLESS OF PRESENT MODE.  CAUSES AN AUTO-\nIND-AMATIC CHANGE TO SINGLE SPACING.  IF A PAPER CHANGE IS REQUIRED\nIND-AOR IF THE AUTHOR WISHES TO CONVEY SOME MESSAGE TO THE COMPUTER\nIND-AOPERATOR, THE DESIRED MESSAGE MAY BE PLACED IN COLUMNS 06 TO 72\nIND-AOF THE 'TITLE' CARD.  THIS WILL CAUSE A THREE LINE MESSAGE TO\nIND-AAPPEAR ON THE CONSOLE.  THE FIRST LINE READS 'NOW CHANGING TO\nIND-ATITLE MODE.'  THE SECOND LINE WILL CONTAIN THE MESSAGE FROM COL-\nIND-AUMNS 06 TO 72 OF THE 'TITLE' CARD.  THE THIRD LINE READS 'EOB TO\nIND-ACONTINUE.'\nPARINIF THE 'TITLE' CARD IS BLANK IN COLUMNS 06 TO 72, THE MODE CHANGE\nIND-AAND SPACING CHANGE WILL OCCUR BUT NO MESSAGE WILL BE PRINTED AND\nIND-ATHE MACHINE WILL NOT STOP.\nPARINIF MULTIPLE COPIES HAVE BEEN SPECIFIED, A MESSAGE STOP FOR ANY\nIND-AOF THE MODE CHANGES WILL OCCUR ONLY ON THE FIRST COPY.\nPARINTHE TITLE CARD WILL NOT CAUSE IMMEDIATE SHEET EJECTION.  WHEN\nIND-ATHE NEXT PAGE IS PRINTED, HOWEVER, PAGE HEADINGS WILL NOT BE\nIND-APRINTED.  NOTE THAT PAGE NUMBERS (OR SUB-PAGE NUMBERS) WILL CON-\nIND-ATINUE TO BE INCREMENTED FOR EACH PAGE PRINTED EVEN THOUGH THE\nIND-AHEADINGS ARE NOT BEING PRINTED.  FOR MORE INFORMATION REGARDING\nIND-ATHE EFFECTS OF TITLE MODE, SEE TABLE OF CONTENTS 'DOCUMENTATION\nIND-APRINTING MODES'.\nPARINIF A MODE CARD ('NARR', 'REPRT', OR 'TITLE') IS NOT PROVIDED,\nIND-ATHE MODE IS ASSUMED TO BE NARRATIVE.\nPARINTHE FORMAT OF THE 'TITLE' CARD IS--\nSPAC1\nIND-BCC. 01-05 CONTROL WORD 'TITLE'\nIND-BCC. 06-72 MESSAGE TO CONSOLE OPERATOR (OPTIONAL)\nIND-BCC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nINDEX* XLINE - INDEX CARD LINES LIMIT\nPARA      IN DOCUMENTS HAVING MANY SUB-TITLES, CREATED BY 'INDEX'\n          CONTROL WORDS, THE AUTHOR MAY WISH TO AVOID THE POSSIBILITY\n          OF HAVING A SUB-TITLE APPEAR AS THE LAST LINE ON A PAGE WITH\n          THE DESCRIPTIVE NARRATIVE ON THE FOLLOWING PAGE.  IF SO, THE\n          AUTHOR MAY SPECIFY IN AN 'XLINE' CARD THAT PAGE OVERFLOW IS\n          TO BE FORCED WHEN AN INDEX CARD IS ENCOUNTERED AFTER A\n          CERTAIN NUMBER OF LINES HAVE BEEN PRINTED ON A PAGE.  SINCE\n          PAGE OVERFLOW IS NORMALLY CONTROL- LED BY THE 'LINES'\n          CONTROL WORD, THE 'XLINE' CONTROL MUST CONTAIN A LESSER\n          NUMBER OF LINES IN ORDER TO BE EFFECTIVE.\nPARA      CONTROL WORDS EJECT, HEAD, AND SECT WILL CAUSE SHEET\n          EJECTION WHEN ENCOUNTERED WITHOUT AFFECTING OR BEING\n          AFFECTED BY AN XLINE CONTROL WORD.  ASIDE FROM THE\n          POSSIBILITY OF CAUSING SHEET EJECT, THE USE OF 'XLINE' DOES\n          NOT AFFECT THE NORMAL PROCESSING OF INDEX CONTROL WORDS.\n          THE 'XLINE' CONTROL WORD IS VALID IN ANY MODE AND MAY BE\n          INSERTED AT ANY POINT IN THE BOOK.\nPARA      THE FORMAT OF THE 'XLINE' CARD IS--\nPARA           CC. 01-05 CONTROL WORD 'XLINE'\n               CC. 06-07 NUMBER OF LINES BEFORE EJECT (NUMERIC, MAXIMUM\n               CC. 08-72 BLANK\n               CC. 73-80 CARD SEQUENCE NUMBER (OPTIONAL)\nHEAD CONTROL WORD FORMATS\n          THE FOLLOWING LIST GIVES THE CONTROL WORDS, THEIR MEANINGS,\n     FORMATS, AND THE OPERATING MODES IN WHICH THEY MAY BE USED (N\n     MEANS NARRATIVE MODE, T MEANS TITLE MODE, L MEANS LIST MODE, AND\n     R MEANS REPORT MODE).\nPARA IN ALL CASES, THE INPUT CARD SEQUENCE NUMBER (OPTIONAL) IS\n     PUNCHED IN COLUMNS 73-80 OF THE CARD AND THE CONTROL WORD IS\n     PUNCHED IN COL- UMNS 1-5.  IF THE CONTROL WORD IS LESS THAN FIVE\n     CHARACTERS LONG, THE REMAINDER OF THE CONTROL WORD FIELD MUST BE\n     BLANK.\nSPAC2\nCOLM1WORD  MODES MEANING & CONTENT                          FORMAT\nCOLM2----- ----- ------------------------------------------ ------------\nPARA BKHED NTRL  SUPPRESS PRINTING OF BOOK HEADINGS\n                 06-72 BLANK                                SPACES\nPARA BKNUM NTRL  SUPPRESS PRINTING OF BOOK NUMBERS\n                 06-72 BLANK                                SPACES\nPARA BOOK  NTRL  FIRST CARD OF EACH BOOK IN THE LIBRARY\n                 06-60 BOOK NAME (OPTIONAL)                 ALPHANUMERIC\n                 61-64 BLANK                                SPACES\n                 65-72 BOOK NUMBER (OPTIONAL)               ALPHANUMERIC\nPARA COLM1 NT    FIRST LINE OF COLUMN HEADINGS\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA COLM2 NT    SECOND LINE OF COLUMN HEADINGS\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA COLM3 NT    THIRD LINE OF COLUMN HEADINGS\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA COPY  NTRL  MULTIPLE COPIES REQUIRED\n                 06-07 NUMBER OF COPIES TO BE PRINTED       NUMERIC\n                 08-72 BLANK                                SPACES\nPARA COVR1 NTR   DOCUMENT COVER PAGE LINE ONE\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA COVR2 NTR   DOCUMENT COVER PAGE LINE TWO\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA COVR3 NTR   DOCUMENT COVER PAGE LINE THREE\n                 06-72 DESIRED LINE                         ALPHANUMERIC\nPARA DATE  NTRL  DATE OF DOCUMENT\n                 06-11 DATE                                 NUMERIC\n                 12-14 BLANK                                SPACES\n                 15    MODE OF OUTPUT                       NUMERIC\n                 16-72 BLANK                                SPACES\nPARA DOUBL NTRL  NORMAL SPACING TO BE DOUBLE SPACE\n                 06-72 BLANK                                SPACES\nPARA EJECT NTRL  SHEET EJECTION\n                 06-72 BLANK                                SPACES\nPARA ENSUB NTRL  END OF SUB-PAGE NUMBERING\n                 06-72 BLANK                                SPACES\nPARA HEAD  N     PAGE HEADINGS\n                 06-50 DESIRED HEADING                      ALPHANUMERIC\n                 51-72 BLANK                                SPACES\nPARA IND-A NT    INDENT TO MARGIN A (FIVE SPACES)\n                 06-70 DATA TO BE PRINTED                   ALPHANUMERIC\n                 71-72 BLANK                                SPACES\nPARA IND-B NT    INDENT TO MARGIN B (TEN SPACES)\n                 06-65 DATA TO BE PRINTED                   ALPHANUMERIC\n                 66-72 BLANK                                SPACES\nPARA IND-C NT    INDENT TO MARGIN C (FIFTEEN SPACES)\n                 06-60 DATA TO BE PRINTED                   ALPHANUMERIC\n                 61-72 BLANK                                SPACES\nPARA IND-D NT    INDENT TO MARGIN D (TWENTY SPACES)\n                 06-55 DATA TO BE PRINTED                   ALPHANUMERIC\n                 56-72 BLANK                                SPACES\nPARA INDEX NTR   SPECIAL ENTRY TO TABLE OF CONTENTS\n                 06-65 DATA TO BE PRINTED                   ALPHANUMERIC\n                 66-72 BLANK                                SPACES\nPARA LINES NTRL  LINES OF PRINTING PER PAGE\n                 06-07 DESIRED NUMBER OF LINES (MAX. 66)    NUMERIC\n                 08-72 BLANK                                SPACES\nPARA LIST  NTRL  ENTER LIST MODE\n                 06-72 OPERATOR CONSOLE MESSAGE (OPTIONAL)  ALPHANUMERIC\nPARA NARR  NTRL  ENTER NARRATIVE MODE\n                 06-72 OPERATOR CONSOLE MESSAGE (OPTIONAL)  ALPHANUMERIC\nPARA NOHED NTRL  NO PAGE HEADINGS DESIRED\n                 06-72 BLANK                                SPACES\nPARA NOTAB NTRL  NO TABLE OF CONTENTS DESIRED\n                 06-72 BLANK                                SPACES\nPARA PAGE  NTRL  SET PAGE NUMBER\n                 06-08 DESIRED PAGE NUMBER (ZERO FILLED)    NUMERIC\n                 09-72 BLANK                                SPACES\nPARA PARA  NT    PARAGRAPH\n                 06-72 DATA TO BE PRINTED                   ALPHANUMERIC\nPARA PARIN NT    PARAGRAPH WITH INDENTATION (FIVE SPACES)\n                 06-70 DATA TO BE PRINTED                   ALPHANUMERIC\n                 71-72 BLANK                                SPACES\nPARA PLAB1 NT    PRINT PARAGRAPH LABEL ONE\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB2 NT    PRINT PARAGRAPH LABEL TWO\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB3 NT    PRINT PARAGRAPH LABEL THREE\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB4 NT    PRINT PARAGRAPH LABEL FOUR\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB5 NT    PRINT PARAGRAPH LABEL FIVE\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB6 NT    PRINT PARAGRAPH LABEL SIX\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB7 NT    PRINT PARAGRAPH LABEL SEVEN\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB8 NT    PRINT PARAGRAPH LABEL EIGHT\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLAB9 NT    PRINT PARAGRAPH LABEL NINE\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABA NT    PRINT PARAGRAPH LABEL ONE AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABB NT    PRINT PARAGRAPH LABEL TWO AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABC NT    PRINT PARAGRAPH LABEL THREE AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABD NT    PRINT PARAGRAPH LABEL FOUR AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABE NT    PRINT PARAGRAPH LABEL FIVE AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABF NT    PRINT PARAGRAPH LABEL SIX AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABG NT    PRINT PARAGRAPH LABEL SEVEN AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABH NT    PRINT PARAGRAPH LABEL EIGHT AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PLABI NT    PRINT PARAGRAPH LABEL NINE AFTER SPACING\n                 06-72 DATA TO PRINT AFTER LABEL (OPTIONAL) ALPHANUMERIC\nPARA PRTPG NTRL  PRINT PAGE/LINE NUMBERS FROM INPUT DATA\n                 06-72 BLANK                                SPACES\nPARA REPRT NTRL  ENTER REPORT MODE\n                 06-72 OPERATOR CONSOLE MESSAGE (OPTIONAL)  ALPHANUMERIC\nPARA SAVE1 NT    SAVE PARAGRAPH LABEL ONE\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE2 NT    SAVE PARAGRAPH LABEL TWO\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE3 NT    SAVE PARAGRAPH LABEL THREE\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE4 NT    SAVE PARAGRAPH LABEL FOUR\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE5 NT    SAVE PARAGRAPH LABEL FIVE\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE6 NT    SAVE PARAGRAPH LABEL SIX\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE7 NT    SAVE PARAGRAPH LABEL SEVEN\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE8 NT    SAVE PARAGRAPH LABEL EIGHT\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SAVE9 NT    SAVE PARAGRAPH LABEL NINE\n                 06-72 PARAGRAPH LABEL TO BE STORED         ALPHANUMERIC\nPARA SECT  NT    BEGINNING OF SECTION\n                 06-60 SECTION NAME (OPTIONAL)              ALPHANUMERIC\n                 61-66 BLANK                                SPACES\n                 67-72 SECTION NUMBER (OPTIONAL)            ALPHANUMERIC\nPARA SECTN NT    BEGINNING OF SECTION WITH NO SHEET EJECT\n                 06-60 SECTION NAME (OPTIONAL)              ALPHANUMERIC\n                 61-64 BLANK                                SPACES\n                 67-72 SECTION NUMBER (OPTIONAL)            ALPHANUMERIC\nPARA SEHED NTRL  SUPPRESS SECTION HEADINGS\n                 06-72 BLANK                                SPACES\nPARA SENUM NTRL  SUPPRESS SECTION NUMBERS\n                 06-72 BLANK                                SPACES\nPARA SEQ   NTRL  PUNCH RESEQUENCED INPUT DECK\n                 11-15 BEGINNING NUMBER (OPTIONAL)          NUMERIC\n                 16-72 BLANK                                SPACES\nPARA SINGL NTRL  NORMAL SPACING TO BE SINGLE SPACE\n                 06-72 BLANK                                SPACES\nPARA SKIP  NTRL  SKIP A PAGE\n                 06-72 DESIRED DATA FOR TABLE OF CONTENTS   ALPHANUMERIC\nPARA SPAC1 NTRL  SPACE 1 UNIT BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC2 NTRL  SPACE 2 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC3 NTRL  SPACE 3 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC4 NTRL  SPACE 4 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC5 NTRL  SPACE 5 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC6 NTRL  SPACE 6 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC7 NTRL  SPACE 7 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC8 NTRL  SPACE 8 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SPAC9 NTRL  SPACE 9 UNITS BEFORE PRINTING\n                 06-72 DATA TO BE PRINTED (OPTIONAL)        ALPHANUMERIC\nPARA SUBPG NTRL  BEGIN SUB-PAGE NUMBERING\n                 06-08 DESIRED PAGE NUMBER  (OPTIONAL, BUT) NUMERIC\n                 09    DECIMAL POINT '.'    (MUST USE ALL ) '.'\n                 10-11 DESIRED SUB-PAGE NUMBER (OR NONE.  ) NUMERIC\n                 12-72 BLANK                                SPACES\nPARA TITLE NTRL  ENTER TITLE MODE\n                 06-72 OPERATOR CONSOLE MESSAGE (OPTIONAL)  ALPHANUMERIC\nPARA XLINE NTRL  INDEX CARD LINES LIMIT\n                 06-07 DESIRED NUMBER OF LINES (MAX. 66)    NUMERIC\n                 08-72 BLANK                                SPACES\nHEAD CONTROL WORD SEQUENCE\nPARININ ORDER TO ACHIEVE THE DESIRED RESULTS IN THE PRINTING OF DOCU-\n     MENTATION, THE SEQUENCE OF CONTROL WORDS MUST BE RESTRICTED\n     SOMEWHAT.  THE FIRST CARD OF EACH BOOK MUST BE A BOOK CARD.\n     SINCE EACH BOOK IS TREATED AS A SEPARATE ENTITY, THE BOOK CARD IS\n     NECESSARY TO SIGNAL THE THE BEGINNING OF A NEW ENTITY, CONCLUDE\n     THE PROCESSING OF THE PREVIOUS BOOK, AND INITIALIZE THE SYSTEM IN\n     PREPARATION FOR THE NEW BOOK.\nPARINTHE FOLLOWING CONTROL WORDS ESTABLISH PROCESSING REQUIREMENTS FOR\n     THE ENTIRE BOOK IN WHICH THEY APPEAR.  FOR THIS REASON, THEY MUST\n     BE USED AFTER THE BOOK CARD BUT BEFORE THE FIRST CARD WHICH WOULD\n     CAUSE A LINE TO BE PRINTED.\nPARINCOPY  (MAY BE OMITTED IF ONE COPY IS DESIRED)\nIND-ADATE\nIND-ANOHED (MAY BE OMITTED IF NORMAL HEADINGS ARE DESIRED)\nIND-ANOTAB (MAY BE OMITTED IF TABLE OF CONTENTS IS DESIRED\nIND-ASEQ   (MAY BE OMITTED IF RESEQUENCED DECK IS NOT DESIRED\nPARINIF ANY OF THE ABOVE LISTED CONTROL WORDS ARE ENCOUNTERED AFTER\n     THE FIRST LINE OF THE BOOK HAS BEEN PRINTED, THE SYSTEM IS UNABLE\n     TO PROCESS THEM CORRECTLY.  THEY ARE, THEREFORE, BYPASSED AND AN\n     APPROP- RIATE ERROR MESSAGE IS RECORDED ON THE DIAGNOSTICS LIST.\nPARINALL OTHER CONTROL WORDS HAVE AN EFFECT ON A LIMITED PORTION OF\n     THE BOOK BEING PRINTED.  SO LONG AS THE DESIRED CONTROL WORD IS\n     VALID FOR THE MODE IN WHICH ENCOUNTERED, IT MAY BE USED AT ANY\n     TIME.  FOR DETAILS REGARDING THE USE OF CONTROL WORDS IN THE\n     VARIOUS MODES, REFER TO 'DOCUMENTATION PRINTING MODES'.\nSECT DEFAULT OR STANDARD OPTIONS\n          IN ORDER TO MINIMIZE THE NUMBER OF CONTROL WORDS REQUIRED TO\n     PRODUCE DOCUMENTATION, THE SYSTEM HAS A SERIES OF BUILT-IN OPTIONS\n     WHICH ARE ASSUMED UNLESS THE AUTHOR SPECIFIES OTHERWISE.  IF, AS\n     IS OFTEN THE CASE, THE AUTHOR WISHES TO USE ONE OF THE STANDARD\n     OPTIONS, NO CONTROL WORD IS NECESSARY.  IT IS ONLY IN CASES WHERE\n     THE AUTHOR WISHES TO CHANGE THE STANDARD OPTIONS THAT CONTROL WORDS\n     ARE REQUIRED.\nPARINFOR MAXIMUM FLEXIBILITY EACH BOOK IS TREATED AS A SEPARATE\n     ENTITY.  SINCE THE OPTIONS SPECIFIED FOR A GIVEN BOOK DO NOT\n     NECES- SARILY APPLY TO SUBSEQUENT BOOKS, ALL OPTIONS ARE RESET\n     AUTOMATICALLY TO THE STANDARD OPTIONS AT THE BEGINNING OF EACH\n     BOOK.  THE DEFAULT OR STANDARD OPTIONS ASSUMED FOR EACH BOOK ARE\n     DESCRIBED BELOW.\nPARINMODE OF OPERATION = NARR\n               THE SYSTEM BEGINS EACH BOOK IN NARRATIVE MODE UNLESS A\n               'REPRT' OR 'TITLE' OR 'LIST' CONTROL WORD IS ENTERED.\nPARINNUMBER OF COPIES = COPY 01\n               IN THE ABSENCE OF A 'COPY' CARD, ONE COPY IS PRINTED.\nPARINNORMAL SPACING = SINGL\n               AT THE BEGINNING OF EACH BOOK AND AT EACH CHANGE IN\n               MODE, THE NORMAL SPACING IS SET TO 'SINGL'.  SINGLE\n               SPACING IS USED UNTIL A 'DOUBL' CONTROL WORD IS\n               ENCOUNTERED.  OTHER SPACE CONTROL WORDS SUCH AS 'PARA',\n               'PARIN', AND 'SPAC1' CAUSE EXTRA SPACES BUT THESE DO\n               NOT CHANGE THE NORMAL SPACING WHICH IS ESTABLISHED BY\n               THE 'SINGL' OR 'DOUBL' CONTROL WORDS.\nPARINPAGE NUMBERING = PAGE 001\n               NORMALLY, PAGE NUMBERING BEGINS ON PAGE ONE FOR EACH\n               BOOK AND CONTINUES CONSECUTIVELY REGARDLESS OF THE\n               OPERATING MODE.  IF THE AUTHOR WISHES TO DEVIATE FROM\n               THIS PROCEDURE, HE MAY ENTER PAGE NUMBERING CONTROL\n               WORDS AT ANY POINT IN THE INPUT.  CONTROL WORDS\n               AFFECTING PAGE NUMBERS (PAGE, SUBPG, AND ENSUB) ARE\n               DISCUSSED IN THE SECTION ON CONTROL WORDS.\nPARINLINES PER PAGE = LINES 56\n               FIFTY-SIX LINES (INCLUDING HEADINGS AND SPACES) ARE\n               PRINTED AUTOMATICALLY ON EACH PAGE UNLESS THE AUTHOR\n               SPECIFIES OTHERWISE BY ENTERING A 'LINES' CONTROL WORD.\nPARINRESEQUENCED INPUT DECK\nIND-BIF THE AUTHOR NEEDS TO HAVE THE INPUT DATA RESEQUENCED\n               AND REPUNCHED, HE SPECIFIES THE CONTROL WORD 'SEQ'.  IF\n               NO NEW DECK IS DESIRED, THE 'SEQ' CARD IS OMITTED.\nEJECT\nPARINPRINTING OF PAGE/LINE NUMBERS (INPUT CARD SEQUENCE)\n               WHEN IT IS NECESSARY TO PRINT THE SEQUENCE NUMBERS FROM\n               THE INPUT RECORDS, THE 'PRTPG' CONTROL WORD IS ENTERED.\n               IF 'PRTPG' IS OMITTED, INPUT SEQUENCE NUMBERS ARE NOT\n               PRINTED.\nSECTNAPPENDICIES\nHEAD APPENDIX A - CONTROL WORDS\n     CONTROL WORDS.\n\nIND-ACONTROL WORDS ARE USED BY RDOC72 TO DISTINGUISH TEXT, PAGE\nIND-AHEADINGS, BOOK TITLES, TABLE OF CONTENTS ENTRIES AND THE LIKE\nIND-AFROM ONE ANOTHER.  IT IS THEREFOR IMPORTANT TO LEARN AND MASTER\nIND-AA FEW OF THE BASIC CONTROL WORDS THAT ARE GENERALLY USED.\n\nIND-ACONTROL WORDS ARE CODED IN POSITIONS 6 THROUGH 10 OF THE INPUT\nIND-ARECORD.  WHERE APPLICABLE, TEXT FOLLOWS BEGINNING IN POSITION 11.\nIND-ATHIS DOCUMENT CONTAINS A SHORTENED LIST OF CONTROL WORDS.\nINDEX* BOOK  - FIRST CARD OF EACH BOOK\nIND-ATHE BOOK NAME AND BOOK NUMBER FROM THE BOOK CONTROL CARD ARE\nIND-ASTORED FOR PAGE HEADING PURPOSES.\n\nIND-ATHE FORMAT FOR THE 'BOOK' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'BOOK '\nIND-BCC. 06-60 BOOK NAME\nIND-BCC. 65-72 BOOK NUMBER (OPTIONAL)\nINDEX* COVR  - DOCUMENT COVER PAGE\nIND-ACAUSES THREE LINES TO BE GENERATED IN THE MIDDLE OF THE PAGE, AND\nIND-ATHE NAME AND ADDRESS OF THE OPERATIONS CENTER TO BE GENERATED IN\nIND-ATHE LOWER RIGHT-HAND CORNER OF THE PAGE.  THE DATA IN THE THREE\nIND-ALINES IS ENTERED BY THE USER IN COLUMNS 11 - 80 OF THE CARDS.\nIND-ATHESE CARDS MUST PRECEDE THE FIRST CARD WHICH WOULD CAUSE A LINE\nIND-ATO BE GENERATED.\n\nIND-ATHE FORMAT OF THE 'COVR' CARDS IS:\n\nIND-BCC. 01-05 THE CONTROL WORD 'COVR1' 'COVR2' OR 'COVR3'\nIND-BCC. 06-72 DESIRED DATA\nINDEX* DATE  - DATE OF BOOK\nIND-ASPECIFIES THE DATE OF THE DOCUMENT TO BE GENERATED.  THIS CARD\nIND-AMUST FOLLOW THE 'BOOK' CARD AND MUST PRECEDE THE FIRST CARD WHICH\nIND-AWOULD CAUSE A LINE TO BE GENERATED.\n\nIND-ATHE FORMAT OF THE 'DATE' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'DATE '\nIND-BCC. 06-11 DATE (MMDDYY)\nINDEX* COPY  - NUMBER OF COPIES TO BE PRINTED\nIND-ASPECIFIES, IN COLUMNS 11 AND 12 THE NUMBER OF COPIES TO BE\nIND-APRINTED.  THE COPY CARD MUST PRECEDE THE FIRST CARD WHICH WOULD\nIND-ACAUSE A LINE TO BE PRINTED.  IF THE COPY CARD IS OMITTED, ONE\nIND-ACOPY IS ASSUMED.\n\nIND-ATHE FORMAT OF THE 'COPY' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'COPY '\nIND-BCC. 06-07 NUMBER OF COPIES REQUIRED (NUMERIC)\nINDEX* EJECT - SHEET EJECTION\nIND-AWILL CAUSE THE COMPUTER TO EJECT THE SHEET BEING PRINTED AND\nIND-ARESUME PRINTING AT THE TOP OF THE NEXT PAGE.  THE NEXT PAGE WILL\nIND-ACONTAIN STANDARD PAGE HEADINGS ACCORDING TO THE OPTIONS SPECIFIED\nIND-AIN OTHER CONTROL WORDS.  IF EJECT CARDS ARE NOT USED, SHEET\nIND-AEJECTION WILL OCCUR AUTOMATICALLY.\n\nIND-ATHE FORMAT OF THE 'EJECT' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'EJECT'\nINDEX* HEAD  - PAGE HEADINGS\nIND-ASUPPLIES HEADING LINES UNDER THE BOOK AND SECTION HEADING LINES.\nIND-ACAUSES SHEET EJECTION TO OCCUR.  THE NEW PAGE WILL BE HEADED WITH\nIND-ABOOK NAME, THE SECTION NAME, AND THE HEADING PROVIDED IN THE HEAD\nIND-ACARD.  THE HEADING WILL ALSO BE ENTERED INTO THE TABLE OF\nIND-ACONTENTS ALONG WITH THE PAGE NUMBER UPON WHICH IT FIRST APPEARS.\nIND-AWHEN A SECTN CARD IS USED THE HEAD CARD IS BLANKED OUT.  TO\nIND-APREVENT THIS FOLLOW A SECTN CARD BY ANOTHER HEAD CARD.\n\nIND-ATHE FORMAT OF THE 'HEAD' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'HEAD '\nIND-BCC. 06-50 DESIRED HEADING\nINDEX* IND   - INDENT TO MARGIN\nIND-ACAUSES DATA IN NARRATIVE PORTION OF CARD TO BE INDENTED 5, 10,\nIND-A15, OR 20 SPACES (MARGINS A, B, C, AND D RESPECTIVELY).  THIS\nIND-ALIMITS THE LENGTH OF THE NARRATIVE PORTION OF THE CARD WHICH\nIND-AMAY NOT EXTEND BEYOND COLUMN 75, 70, 65, AND 60 RESPECTIVELY.\n\nIND-ATHE FORMAT OF THE 'IND' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'IND-A' 'IND-B' 'IND-C' OR 'IND-D'\nIND-BCC. 06-70, 65, 60, OR 55 NARRATIVE TEXT\nINDEX* INDEX - SPECIAL ENTRY TO TABLE OF CONTENTS\nIND-ACAUSES THE DATA APPEARING IN COLUMNS 11 TO 70 TO BE PRINTED IN\nIND-ATHE NARRATIVE WITH AN AUTOMATIC * IN THE SECOND POSITION TO THE\nIND-ALEFT OF THE DATA CARD.  ALSO CAUSES TWO BLANK LINES TO BE LEFT\nIND-ABEFORE PRINTING THE CONTENTS OF COLUMNS 11 TO 70 WITH ONE BLANK\nIND-ALINE AFTER PRINTING.  ALSO CAUSES AN ENTRY TO BE MADE IN THE\nIND-ATABLE OF CONTENTS.  INDEX DOES NOT FORCE SHEET EJECTION.\n\nIND-ATHE FORMAT OF THE 'INDEX' CARD IS:\n\nIND-BCC. 01-05 CONTROL WORD 'INDEX'\nIND-BCC. 06-65 DESIRED INDEX ENTRY\nINDEX* SECTN - BEGINNING OF A SECTION\nIND-ASECTION CARDS BREAK A BOOK INTO SECTIONS.  IT WILL CAUSE AN ENTRY\nIND-ATO BE MADE IN THE TABLE OF CONTENTS.  IT WILL ALSO CAUSE AN\nIND-AADDITIONAL LINE OF HEADINGS, SUBORDINATE TO THE BOOK HEADINGS BUT\nIND-ASUPERIOR TO THE HEAD CARD HEADINGS, TO BE PRINTED ON EACH PAGE.\nIND-ATHE STORED HEADING FROM THE LAST HEAD CARD WILL BE BLANKED OUT BY\nIND-AA SECTN CARD.\n\nIND-ATHE FORMAT OF THE 'SECTN' CARD IS:\n\nIND-BCC. 01-05 CONTROL CARD 'SECTN'\nIND-BCC. 06-60 SECTION NAME\nHEAD APPENDIX B - OS JCL FOR USING RDOC72\nINDEXRDOC72 USING CARD INPUT\n     //S1       EXEC RDOC72\n     //SYSIN      DD *\n     -------- (RDOC72 CARDS GO HERE) --------\n     /*\nINDEXRDOC72 USING TSO INPUT\n     //S1      EXEC RDOC72\n     //SYSIN      DD DSN=TSOID00.RDOC72.DATA,DISP=OLD\nINDEXRDOC72 USING LIBRARIAN INPUT\n     //S1       EXEC LIBAAA\n     //SYSIN      DD *\n     ------ (LIBRARIAN CARDS GO HERE) ------\n     /*\n     //S2      EXEC RDOC72\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGS": {"ttr": 4357, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPGEN": {"ttr": 4359, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "00000010         PROC 1 DSNAME VOL(0) DISP(SHR) PRINT(0)\n00000012         FREE F(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n00000030CONTROL  MAIN\n00000035         SET &SYSP = &STR(DA(*))   /* PRINT DEFAULT TO TUBE */\n00000050         SET &NULL =            /* SET TO NULL */\n00000060         SET &XVOL = &NULL    /* SET TO NULL */\n00000080         SET &ATTN = N  /* NO ATTENTION ALLOWED */\n00000090         /*                                          */\n00000100ATTN     +\n00000110          DO\n00000120REWRT:     IF &ATTN = Y THEN +\n00000130            DO\n00000140             WRITE *****************************************************\n00000150             WRITE *\n00000160             WRITE *  YOU KEYED IN AN ATTENTION\n00000170             WRITE *  RE-EXECUTE PDSPDS FOR &DSNAME ????\n00000180             WRITE *  REPLY Y OR N\n00000190             WRITE *\n00000200             WRITE *****************************************************\n00000210             READ &ANS\n00000220            END\n00000230            ELSE +\n00000240             DO\n00000250              WRITE ****************************\n00000260              WRITE *                          *\n00000270              WRITE *  IGNORING YOUR ATTENTION *\n00000280              WRITE *                          *\n00000290              WRITE ****************************\n00000300              &NULL\n00000310              RETURN\n00000320             END\n00000330             IF &ANS = Y THEN +\n00000340            DO\n00000350              WRITE ******************\n00000360              WRITE * I'M RESTARTING *\n00000370              WRITE ******************\n00000380              GOTO REX\n00000390            END\n00000400            IF &ANS = N THEN GOTO XFA\n00000410            GOTO REWRT  /* BAD REPLY */\n00000420         END\n00000430         /*                                                   */\n00000440         IF &PRINT = SYSOUT THEN SET &SYSP = &PRINT\n00000450         IF &VOL NE 0 THEN SET &XVOL = &STR(VOLUME(&VOL))\n00000510         ALLOC F(SYSIN) DA(*)\n00000520         ALLOC F(SYSPRINT) &SYSP\n00000530         ALLOC F(SYSUT1) DA(&DSNAME.) &DISP &XVOL\n00000535         ALLOC F(SYSUT2) DA(&DSNAME.) &DISP &XVOL\n00000540         SET &ATTN = Y\n00000550REX:     /*      */+\n00000560         CALL 'SYS1.USERLIB(PDSPDS)'\n00000570XFA:     /*      */+\n00000580         FREE F(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUPERGEN": {"ttr": 4361, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SUPERGEN CSECT\n         PRINT NOGEN\n         USING SUPERGEN,R15\n         USING SEARCH,R5\n         STM   R14,R12,12(R13)             SAVE REGS\n         ST    R13,SAVEAREA+4\n         LR    R12,R13\n         CNOP  0,4\n         BAL   R13,SPGENENT                PERFORM\nSAVEAREA DC    18A(0)\nBASES    DC    A(SAVEAREA+2*4096,SAVEAREA+4096)\n         DROP  R15\n         USING SAVEAREA,R13,R12,R11\n         USING IHADCB,R4\n         USING INBUF,R10\nSPGENENT EQU   *\n         ST    R13,8(R12)\n*                                                                     *\n         LM    R11,R12,BASES               RESTORE REGS\n         ST    R1,PARMADR                  SAVE PARM ADDR\n         L     R1,PARMADR\n         L     R1,0(R1)                    PARM ADDR\n         LH    R2,0(R1)                    LENGTH\n         L     R4,=V(HEXDCB)\n         MVC   DCBDDNAM,=CL8'SYSPRINT'\n         LTR   R2,R2\n         BZ    CONTROL\n         BCTR  R2,0\n         STC   R2,PARMMVC+1\n         LA    R2,2(R2)\n         STH   R2,PRMCOUNT\nPARMMVC  MVC   CTLCARD,2(1)\n         MVC   PRMHIT(4),=A(CTLCARD)\n         B     CONTROL2\n*                                                                     *\n***********************************************************************\n*                                                                     *\nCONTROL  EQU   *\n         BAL   R14,GETSYSIN                PERFORM\n         B     CTLEOF                      EOF\nCONTROL2 EQU   *\n         MVC   PRINTREC(80),CTLCARD\n         BAL   R14,LISTDATA                PERFORM\n*                                                                     *\nOPTION   EQU   *\n         BAL   R14,SETTRT                  PERFORM\n         MVC   PRMSTART(4),PRMHIT\n         BAL   R14,PRMSCAN                 PERFORM\n         B     CONTROL                     DONE\n         B     OPTION                      ZERO\n         MVC   CHKADR(4),PRMSTART\n         MVC   CHKLNGTH(2),PRMLNGTH\n         MVC   CHKTBL(4),=A(KEYWORD1)\n*                                                                     *\n         BAL   R14,CHKTYPE                 PERFORM\n         B     INVALID\n         B     EXIT3                       END\n         B     CONTROL                     * COMMENT *\n         B     OPTION2                     DUMP\n         B     SOR                         OR\n         B     SAND                        AND\n         B     OPTION2                     KEEP\n         B     OPTION2                     PUNCH\n         B     OPTION2                     MOVE\n         B     OPTION2                     SKIP\n         B     OPTION2                     COUNT\n         B     OPTION2                     VTOC\n         B     OPTION2                     EXCP\n         B     OPTION2                     SEARCH\n         B     SCLEAR                      CLEAR\n         B     OPTION2                     INDD\n         B     OPTION2                     OUTDD\n         B     SGO                         GO\n         B     OPTION2                     BLKSIZE\n         B     OPTION2                     CYL\n         B     OPTION2                     HEAD\n         B     OPTION2                     REC\n         B     OPTION2                     CCHHR\n         B     OPTION2                     TTR\n         B     OPTION2                     DSN\n         B     OPTION2                     EOF\n         B     OPTION2                     DEB\n         B     SINTRACT                    INTERACT\n         B     OPTION2                     EROPT\nOPTION2  EQU   *\n         MVC   PRMSTART(4),PRMHIT\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     OPTION2\n         MVC   VALUE(80),VALUECLR\n         LH    R4,PRMLNGTH\n         BCTR  R4,0\n         STC   R4,VALMVC+1\n         L     R3,PRMSTART\nVALMVC   MVC   VALUE,0(3)\n*                                                                     *\n         BAL   R14,CHKTYPE                 PERFORM\n         B     INVALID\n         B     EXIT3                       END\n         B     CONTROL                     * COMMENT *\n         B     SLIST                       DUMP\n         B     SOR                         OR\n         B     SAND                        AND\n         B     SKEEP                       KEEP\n         B     SPUNCH                      PUNCH\n         B     SMOVE                       MOVE\n         B     SSKIP                       SKIP\n         B     SCOUNT                      COUNT\n         B     SVTOC                       VTOC\n         B     SEXCP                       EXCP\n         B     SSEARCH                     SEARCH\n         B     SCLEAR                      CLEAR\n         B     SINDD                       INDD\n         B     SOUTDD                      OUTDD\n         B     SGO                         GO\n         B     SBLKSIZE                    BLKSIZE\n         B     SCYCL                       CYL\n         B     SHEAD                       HEAD\n         B     SREC                        REC\n         B     SCCHHR                      CCHHR\n         B     STTR                        TTR\n         B     SDSN                        DSN\n         B     SEOF                        EOF\n         B     SDEB                        DEB\n         B     SINTRACT                    INTERACT\n         B     SEROPT                      EROPT\n***********************************************************************\n         EJECT\n***********************************************************************\nSINTRACT LA    R4,SYSIN\n         TM    48(R4),X'10'\n         BO    OPTION\n         MVI   NTRACTON,X'FF'\n         B     OPTION\n***********************************************************************\nSEROPT   MVI   EROPT,X'04'\n         CLC   VALUE(4),=C'SKIP'\n         BE    OPTION\n         MVI   EROPT,X'08'\n         CLC   VALUE(6),=C'ACCEPT'\n         BE    OPTION\n         MVI   EROPT,X'00'\n         CLC   VALUE(4),=C'STOP'\n         BE    OPTION\n         B     INVALID\n***********************************************************************\nSLIST    EQU   *\n         MVI   DUMPALL,0\n         MVI   LISTON,0\n         CLI   VALUE,C'N'\n         BE    OPTION\n         MVI   LISTON,X'FF'\n         MVC   HEXCHAR,=C'    '\n         CLC   VALUE(2),=C'HC'\n         BNE   SLIST1\n         MVC   HEXCHAR,=C'HEXC'\nSLIST1   CLC   VALUE(3),=CL3'ALL'\n         BNE   OPTION\n         OI    DUMPALL,X'FF'\n         B     OPTION\n***********************************************************************\nSOR      EQU   *\n         MVI   ANDOR,0\n         B     OPTION\n***********************************************************************\nSAND     EQU   *\n         MVI   ANDOR,X'FF'\n         B     OPTION\n***********************************************************************\nSKEEP    EQU   *\n         MVI   KEEPON,0\n         CLI   VALUE,C'N'\n         BE    OPTION\n         MVI   KEEPON,X'FF'\n         B     OPTION\n***********************************************************************\nSPUNCH   MVI   DUMPON,X'FF'\n         MVI   SRCHSET+1,X'0C'\n         B     DOSEARCH\n***********************************************************************\nSMOVE    MVI   SRCHSET+1,X'10'\n         MVI   MOVEON,X'FF'\n         B     DOSEARCH\n***********************************************************************\nSSKIP    EQU   *\n         BAL   R14,PACK                    PERFORM\n         B     NOTNUM\n         ZAP   SKIPNUM,DOUBLE(8)\n         B     OPTNSET\n***********************************************************************\nSCOUNT   EQU   *\n         BAL   R14,PACK                    PERFORM\n         B     NOTNUM\n         ZAP   COUNTNUM,DOUBLE(8)\n         B     OPTNSET\n***********************************************************************\nSVTOC    EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         MVI   VTOC,0\n         CLI   VALUE,C'N'\n         BE    SEXCP3\n         MVI   VTOC,X'FF'\n         LA    R4,INDCB\n         MVC   DCBBLKSI,=AL2(96)\n         MVI   DCBKEYLE,44\n*\n         B     SEXCP3\n***********************************************************************\nSEXCP    EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         MVI   VTOC,0\nSEXCP3   EQU   *\n         XC    NEXTCCHH(5),NEXTCCHH\n         XC    EXCPTTR(4),EXCPTTR          RESET TO SCRATCH\n         LA    R4,INDCB\n         IC    R2,DCBKEYLE                 THE KEY\n         LH    R3,DCBBLKSI                 SAVE ANY PREVIOUS BLKSIZE\n         MVC   INDCB(LMODEL),MODELDCB\n         MVI   EXCP,0\n         CLI   VALUE,C'N'\n         BE    SEXCP6\n         MVC   INDCB(LEXCPDCB),EXCPDCB\n         MVI   EXCP,X'FF'\n         MVI   DCBRECFM,X'C0'              PRETENT U\nSEXCP6   EQU   *\n         STC   R2,DCBKEYLE\n         STH   R3,DCBBLKSI                 AND SAVE AGAIN\n         STH   R3,DCBLRECL\n         B     OPTION\n***********************************************************************\nSSEARCH  MVI   SRCHSET+1,X'00'\nDOSEARCH BAL   R14,SRCHGETM                GET STORAGE\n         L     R5,SRCHADR\n         XC    SRCHOFF,SRCHOFF\n         MVC   SRCHRNGE,=XL2'7FFF'\n         MVI   SRCHFUNC,EQ\nSRCHSET  MVI   SRCHOPTN,0\n         MVI   WORKFUNC,EQ\n         BAL   R14,PACK                    PERFORM\n         B     SRCHOP1B\n         BCTR  R1,0\n         L     R5,SRCHADR\n         STH   R1,SRCHOFF\n         MVC   SRCHRNGE,=AL2(1)            DEFAULT 1 TIME\n*                                                                     *\nSRCHOP1  EQU   *\n         MVC   PRMSTART(4),PRMHIT\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     SRCHOP1\n         L     R3,PRMSTART\n         MVC   VALUE(80),0(R3)\n         BAL   R14,PACK                    PERFORM\n         B     SRCHOP1B\n         L     R5,SRCHADR\n         SH    R1,SRCHOFF\n         BNP   NOTSIZ\n         STH   R1,SRCHRNGE\nSRCHOP2  EQU   *\n         MVC   PRMSTART(4),PRMHIT\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     SRCHOP2\nSRCHOP1B EQU   *\n         MVC   CHKADR(4),PRMSTART\n         MVC   CHKLNGTH(2),PRMLNGTH\n         MVC   CHKTBL(4),=A(KEYWORD2)\n         BAL   R14,CHKTYPE                 PERFORM\n         B     SNOHIT\n         B     SEQ                         EQ\n         B     SNE                         NE\n         B     SLT                         LT\n         B     SGT                         GT\n         B     SLE                         LE\n         B     SGE                         GE\n         B     SRCHOP4A                    'X'\n         B     SRCHOP4A                    'C'\n         B     SSTOP                       STOP\n         B     SSKIPF                      SKIP\n***********************************************************************\nSNOHIT   CLI   SRCHSET+1,X'10'\n         BNE   INVALID\n         L     R3,PRMSTART\n         MVC   VALUE(80),0(R3)\n         BAL   R14,PACK                    PERFORM\n         B     SRCHOP4A\n         BCTR  R1,0\n         L     R5,SRCHADR\n         STH   R1,SRCHDATA\n         MVC   SRCHLNG,=X'0002'\n         LA    R5,10(R5)\n         B     SRCHEXIT\nSEQ      EQU   *\n         MVI   WORKFUNC,EQ\n         B     SRCHOP3A\nSNE      EQU   *\n         MVI   WORKFUNC,NE\n         B     SRCHOP3A\nSLT      EQU   *\n         MVI   WORKFUNC,LT\n         B     SRCHOP3A\nSGT      EQU   *\n         MVI   WORKFUNC,GT\n         B     SRCHOP3A\nSLE      EQU   *\n         MVI   WORKFUNC,LE\n         B     SRCHOP3A\nSGE      EQU   *\n         MVI   WORKFUNC,GE\n         B     SRCHOP3A\nSRCHOP3A EQU   *\n         L     R5,SRCHADR\n         MVC   SRCHFUNC,WORKFUNC\n         MVC   PRMSTART(4),PRMHIT\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     SRCHOP3A\n         MVC   CHKADR(4),PRMSTART\n         MVC   CHKLNGTH(2),PRMLNGTH\n         MVC   CHKTBL(4),=A(KEYWORD3)\n         BAL   R14,CHKTYPE                 PERFORM\n         B     INVALID\n         B     SRCHOP4A                    HEX\n         B     SRCHOP4A                    CHAR\n         B     SSTOP\n         B     SSKIPF                      SKIP\nSSTOP    EQU   *\n         L     R5,SRCHADR\n         MVI   SRCHOPTN,X'04'\n         MVI   STOPON,X'FF'\n         B     SRCHOP4\n***********************************************************************\nSSKIPF   EQU   *\n         L     R5,SRCHADR\n         MVI   SRCHOPTN,X'08'\n         MVI   SKIPON,X'FF'\n         B     SRCHOP4\n***********************************************************************\nSRCHOP4  EQU   *\n         MVC   PRMSTART(4),PRMHIT          LOOK FOR C,X\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     SRCHOP4\n*                                                                     *\nSRCHOP4A EQU   *\n         L     R5,SRCHADR\n         CLI   SRCHOPTN,X'00'\n         BNE   SRCHOP4B\n         MVI   SEARCHON,X'FF'\nSRCHOP4B XC    TRTTBL(256),TRTTBL\n         SR    R2,R2\n         IC    R2,PRMCHAR+3                THE DELIMITER\n         LA    R3,TRTTBL(2)\n         STC   R2,0(R3)                    THIS WILL NOW DELIMIT\n*                                                                     *\n         CLI   SRCHSET+1,X'10'\n         BNE   SRCHOP4C\n         MVI   SRCHOPTN,X'14'\nSRCHOP4C L     R3,PRMSTART\n         CLI   0(R3),C'C'                  CHAR\n         BE    SRCHOP4D                      YES\n         CLI   0(R3),C'X'                  HEX\n         BNE   INVALID                        NO\n         MVC   PRMSTART(4),PRMHIT          GET SEARCH ARG HEX\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     INVALID\n         L     R3,PRMSTART\n         LH    R4,PRMLNGTH\n         LR    R5,R4\n         BCTR  R5,0\n         STC   R5,SRCHTR+1\nSRCHTR   TR    0(0,3),HEXTBL\n         SRL   R4,1\n         LTR   R4,R4\n         BZ    INVALID\n         L     R5,SRCHADR\n         STH   R4,SRCHLNG\nSRCHHEX  PACK  SRCHDATA(2),0(3,R3)\n         LA    R3,2(R3)\n         LA    R5,1(R5)\n         BCT   R4,SRCHHEX\n         LA    R5,SRCHCTL(R5)\n         B     SRCHEXIT\n*                                                                     *\nSRCHOP4D EQU   *\n         MVC   PRMSTART(4),PRMHIT          GET SEARCH ARG CHAR\n         BAL   R14,PRMSCAN                 PERFORM\n         B     INVALID\n         B     INVALID\n         L     R3,PRMSTART\n         LH    R4,PRMLNGTH\n         L     R5,SRCHADR\n         STH   R4,SRCHLNG\n         BCTR  R4,0\n         STC   R4,SRCHMVC+1\nSRCHMVC  MVC   SRCHDATA,0(3)\n         LA    R5,SRCHCTL+1(R4,R5)\nSRCHEXIT EQU   *\n         ST    R5,SRCHADR\n         XC    SRCHOFF(SRCHCTL),SRCHOFF\n         NI    SELCTNOP+1,X'0F'\n         B     OPTNSET\n***********************************************************************\nSCLEAR   EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         MVC   INDCB(LMODEL),MODELDCB\n         MVI   VTOC,0\n         MVI   EXCP,0\n         MVI   DUMPALL,0\n         MVI   SKIPCTL,0\n         MVI   OPN1MVI2+1,X'20'\n         XC    NEXTCCHH(5),NEXTCCHH        ONLY IF RESET WILL IT CLEAR\n         XC    EXCPTTR(4),EXCPTTR\n         MVI   KEEPON,0\nSRESET2  EQU   *\n         ZAP   OUTCOUNT,=P'0'\n         ZAP   SKIPNUM,=P'0'\n         CLI   KEEPON,X'FF'                DO WE KEEP THE FIRST\n         BE    OPTION\n         MVI   SKIPON,0\n         MVI   STOPON,0\n         MVI   DUMPON,0\n         MVI   MOVEON,0\n         MVI   SEARCHON,0\n         MVI   ANDOR,0\n         ZAP   COUNTNUM,=P'99999999'\n         BAL   R14,SRCHFREM                PERFORM\n         OI    SELCTNOP+1,X'F0'\n         B     OPTION\n***********************************************************************\nSINDD    EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         MVC   UT1NAME(8),VALUE\n         LA    R1,UT1NAME\n         BAL   R14,DDFIND                  PERFORM\n         B     SINDDER\n         B     OPTION\nSINDDER  EQU   *\n         LA    R1,DDERR\n         BAL   R14,WTORTN                  PERFORM\n         B     OPTION\n***********************************************************************\nSOUTDD   EQU   *\n         BAL   R14,CLOSEUT2                PERFORM\n         CLI   VALUE,C'N'\n         BNE   SOUTDD2\n         MVI   OUTON,0\n         B     OPTION\nSOUTDD2  EQU   *\n         MVC   UT2NAME(8),VALUE\n         LA    R1,UT2NAME\n         BAL   R14,DDFIND                  PERFORM\n         B     SOUTDDER\n         MVI   OUTON,X'FF'\n         B     OPTION\nSOUTDDER EQU   *\n         LA    R1,DDERR\n         BAL   R14,WTORTN                  PERFORM\n         B     OPTION\n*                                                                     *\n***********************************************************************\nSBLKSIZE EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         BAL   R14,PACK                    PERFORM\n         B     INVALID\n         LA    R4,INDCB\n         STH   R1,DCBLRECL\n         STH   R1,DCBBLKSI\n         MVI   DCBRECFM,X'C0'              SET TO 'U'\n         B     OPTION\n***********************************************************************\nSCYCL    EQU   *\n         TR    VALUE(80),HEXTBL\n         LH    R3,PRMLNGTH\n         EX    R3,SEEKPAK\n         MVC   NEXTCCHH(2),WORKCCHH+6\n         B     OPTION\n***********************************************************************\nSHEAD    EQU   *\n         TR    VALUE(80),HEXTBL\n         LH    R3,PRMLNGTH\n         EX    R3,SEEKPAK\n         MVC   NEXTCCHH+2(2),WORKCCHH+6\n         B     OPTION\n***********************************************************************\nSREC     EQU   *\n         TR    VALUE(80),HEXTBL\n         LH    R3,PRMLNGTH\n         EX    R3,SEEKPAK\n         MVC   NEXTCCHH+4(1),WORKCCHH+7\n         B     OPTION\n***********************************************************************\nSCCHHR   EQU   *\n         TR    VALUE(80),HEXTBL\n         PACK  WORKCCHH(6),VALUE(11)\n         MVC   NEXTCCHH(5),WORKCCHH\n         LA    R4,INDCB\n         TM    DCBOFLGS,X'10'              OPEN YET\n         BZ    OPTION                         NO\n         BAL   R14,EXTENTS                 CHK IT OUT\n         B     OPTION                      ITS A BADDY\n         B     SCCHHTTR\n***********************************************************************\nSTTR     EQU   *\n         XC    NEXTCCHH(5),NEXTCCHH        CANT DO CCHHR NOW\n         TR    VALUE(80),HEXTBL\n         LH    R3,PRMLNGTH\n         EX    R3,SEEKPAK\n         MVC   EXCPTTR(3),WORKCCHH+5\n         MVI   EXCPTTR+3,0\n         LA    R4,INDCB\n         TM    DCBOFLGS,X'10'              OPEN YET\n         BZ    OPTION                         NO\n         BAL   R14,CNVTTTR                 PERFORM\n         B     OPTION                      ITS A BADDY\n         B     SCCHHTTR\nSCCHHTTR EQU   *\n         SR    R2,R2\n         IC    R2,NEXTCCHH+4               THE RECORD\n         LTR   R2,R2                       IS IT ZERO\n         BZ    OPTION                         YES\n         BCTR  R2,0                        REVISE\n         STC   R2,NEXTCCHH+4\n         B     OPTION\n***********************************************************************\nSDSN     EQU   *\n         BAL   R14,CLOSEUT1                PERFORM\n         XC    NEXTCCHH(5),NEXTCCHH\n         XC    EXCPTTR(4),EXCPTTR\n         MVC   WORKDSN,VALUE               THE DSN\n         B     OPTION\n***********************************************************************\nSEOF     EQU   *\n         MVI   OPN1MVI2+1,X'20'\n         CLI   VALUE,C'N'\n         BE    OPTION\n         MVI   OPN1MVI2+1,X'60'\n         B     OPTION\n***********************************************************************\nSDEB     EQU   *\n         MVI   DEBON,0\n         CLI   VALUE,C'N'\n         BE    OPTION\n         MVI   DEBON,X'FF'\n         B     OPTION\nOPTNSET  EQU   *\n         B     OPTION\n***********************************************************************\nSEEKPAK  PACK  WORKCCHH(9),VALUE(0)\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\nCTLEOF   EQU   *\n         CLI   GO,0                        DID WE GO YET\n         BNE   EXIT3                          YES WE DID\n         MVI   EOF,X'FF'\n         B     DOIT\n***********************************************************************\nSGO      EQU   *\n         CLI   NTRACTON,X'00'\n         BE    DOIT\n         BAL   R14,FRSTPRMP                PERFORM\nDOIT     MVC   SKIPCTL,SKIPON\n         MVC   STOPCTL,STOPON\n         MVC   DUMPCTL,DUMPON\n         MVC   MOVECTL,MOVEON\n         MVI   GO,X'FF'\n         BAL   R14,OPENUT1                 PERFORM\n         B     EXIT2\n         AP    SKIPNUM,RECOUNT             CATCH UP IF NEEDED\n         CLI   OUTON,0                     ANY OUTPUT\n         BE    READDSN                         NO\n*                                                                     *\n         BAL   R14,OPENUT2                 PERFORM\n         B     OUTOFF\n         BAL   R14,PUNCHER                 PERFORM\n         B     READDSN\n         BAL   R14,DSNPUT                  PERFORM\n         B     EOFDATA\n         B     READDSN\nOUTOFF   MVI   OUTON,0                     DISABLE OUTPUT\n         MVI   MOVEON,0\n***********************************************************************\n*        BEGIN HERE                                                   *\n***********************************************************************\nREADDSN  EQU   *\n         CP    OUTCOUNT,COUNTNUM           ENOUGH OUTPUT\n         BNL   EOFDATA                         YES\n*                                                                     *\n         BAL   R14,TESTPRMP                PERFORM\n         B     EOFDATA\n*                                                                     *\n         BAL   R14,DSNGET                  PERFORM\n         B     EOFDATA                     EOF OR IOERR\n         CP    RECOUNT,SKIPNUM          ENOUGH SKIPPED\n         BNH   READDSN                        NO\n*                                                                     *\n         BAL   R14,SKIPFIND                PERFORM\n         B     READDSN                     NOT THERE YET\n*                                                                     *\n         BAL   R14,CHKSERCH                CHK CRITERIA\n         B     READDSN                       NO MATCH\n         BAL   R14,LISTHEX2                PERFORM\n         BAL   R14,MOVER                   PERFORM\n         BAL   R14,DSNPUT                  PERFORM\n         B     EOFDATA\n*                                                                     *\n         AP    OUTCOUNT,=P'1'              +1 TO OUTPUT REC COUNT\n         BAL   R14,LISTRTN                 LISTING ONLY\n         B     EOFDATA\n         B     READDSN\n***********************************************************************\n         EJECT\n***********************************************************************\nREALEOF  EQU   *\n         MVI   INEOF,X'FF'             THIS IS THE END REALLY\n***********************************************************************\n*                                                                     *\n*        EOF        EOF      EOF     EOF                              *\n*        GOES TO HERE.                                                *\n*                                                                     *\n***********************************************************************\nEOFDATA  DS    0H\n         OI    RECOUNT+L'RECOUNT-1,X'0F'\n         UNPK  CTAPEREC(10),RECOUNT\n         LA    R1,CTAPECNT\n         BAL   R14,WTORTN                  PERFORM\n         OI    OUTCOUNT+L'OUTCOUNT-1,X'0F'\n         UNPK  COUTREC(6),OUTCOUNT\n         LA    R1,COUTCNT\n         BAL   R14,WTORTN                  PERFORM\nEXIT     EQU   *\nEXIT2    EQU   *\n         CLI   INEOF,0                     REAL EOF\n         BE    EXIT2B                         NO\n         BAL   R14,CLOSEUT1                PERFORM\nEXIT2B   EQU   *\n         CLI   EOF,0                       IS IT REALLY EOF\n         BE    SRESET2                        NOT YET\n***********************************************************************\nEXIT3    EQU   *\n         BAL   R14,CLOSEUT2                PERFORM\n         MVC   FUNCTION,=CL4'CLOSE'\n         BAL   R14,HEXDUMP                 PERFORM\n         LA    R4,SYSIN\n         TM    DCBOFLGS,X'10'              OPEN OK\n         BZ    EXIT6                          NO\n         CLOSE (SYSIN)\n         FREEPOOL SYSIN\nEXIT6    EQU   *\n         BAL   R14,SRCHFREM            FREE THE SRCH BLK\n         L     R13,SAVEAREA+4          BACK CHAIN TO CALLERS SAVE AREA\n         LM    R14,R12,12(R13)         RESTORE CALLERS REGS\nRETURNRC LA    R15,0                   SET RETURN CODE\n         BR    R14                     RETURN TO CALLER\n***********************************************************************\n         EJECT\n***********************************************************************\nNOTSIZ   LA    R1,SIZERR\n         BAL   R14,WTORTN                  PERFORM\n         B     MOREBAD\n*                                                                     *\nNOTNUM   EQU   *\n         LA    R1,NUMERR\n         BAL   R14,WTORTN                  PERFORM\n         B     MOREBAD\n*                                                                     *\nINVALID  EQU   *\n         LA    R1,OPTNERR\n         BAL   R14,WTORTN                  PERFORM\n*                                                                     *\nMOREBAD  MVI   BADKEY,C' '\n         MVC   BADKEY+1(L'BADKEY-1),BADKEY\n         L     R3,PRMSTART\n         LH    R4,PRMLNGTH\n         BCTR  R4,0\n         LTR   R4,R4\n         BM    INBAD\n         STC   R4,INMVC+1\nINMVC    MVC   BADKEY,0(3)\n         LA    R1,BADKEY\n         BAL   R14,WTORTN                  PERFORM\nINBAD    CLI   TRACE,X'00'\n         BE    OPTION\n         MVC   FUNCTION,=CL4'RELO'\n         MVC   DUMPSTRT(4),=A(SUPERGEN)\n         MVC   DUMPEND(4),=A(PATCHERA)\n         BAL   R14,HEXDUMP                 PERFORM\n         B     OPTION\n         B     OPTION\n***********************************************************************\nWTOR14   DC    A(0)\n*                                                                     *\nWTORTN   ST    R14,WTOR14\n         SR    R2,R2\n         SH    R1,=H'2'\n         IC    R2,1(R1)                    LENGTH OF MSG\n         STH   R2,WTOBLKL\n         BCTR  R2,0\n         STC   R2,WTOMVC+1\nWTOMVC   MVC   PRINTREC,2(1)               THE MESSAGE\n         CLI   PRINTREC+5,C'E'             IS IT ERROR\n         BNE   PRINTNOP                       NO\n         MVI   RETURNRC+3,8                SET RETURN CODE\nPRINTNOP CLI   NTRACTON,X'00'\n         BE    PRINTRTN\n         LA    R1,WTOPARM\n         CALL  DBAWTO\n*                                                                     *\nPRINTRTN BAL   R14,LISTDATA                PERFORM\n         L     R14,WTOR14\n         BR    R14                         EXIT\n*                                                                     *\nWTOPARM  DC    A(WTOBLKL)\nWTOBLKL  DC    AL2(L'WTOBLK)\nWTOBLK   DC    CL40' '\n*                                                                     *\n         ORG   WTOBLK\nPRINTREC DC    CL133' '\n         ORG\n***********************************************************************\n         EJECT\n***********************************************************************\nLISTXR14 DC    A(0)\nLISTHEX  EQU   *\n         CLI   LISTON,0                    LISTING\n         BER   R14                            NO\n         MVC   FUNCTION,=CL4'ASIS'\n         MVC   DUMPSTRT(4),=A(EOFMSG)\n         ST    R14,LISTXR14\n         B     LISTHEX3\n*                                                                     *\n***********************************************************************\n*                                                                     *\nLISTHEX2 EQU   *\n         CLI   LISTON,0                    LISTING\n         BER   R14                            NO\n         ST    R14,LISTXR14\n         LA    R4,INDCB\n         ST    R10,DUMPSTRT\n         LR    R5,R10\n         AH    R5,DCBLRECL                 +RECSIZE\n         BCTR  R5,0\n         ST    R5,DUMPEND                  WHERE IT STOPS\n         MVC   FUNCTION,=CL4'RELO'\nLISTHEX3 MVC   DTLCOUNT(10),=XL10'40202020202020202120'\n         ED    DTLCOUNT(10),RECOUNT\n         MVC   DTLHDR,DTLHDR-1             CLEAR HEADR\n         CLI   EXCP,0                      EXCPPING\n         BE    LISTHEX4                       NO\n         TM    UT1DVCLS,X'20'\n         BZ    LISTHEX4\n         UNPK  HEXWORK2(11),NEXTCCHH(6)\n         TR    HEXWORK2(19),TRTBL-C'0'\n         MVC   DTLCCHH,HEXWORK2\n         BAL   R14,CNVTCCHH                PERFORM\n         UNPK  HEXWORK2(7),EXCPTTR(4)\n         TR    HEXWORK2(19),TRTBL-C'0'\n         MVC   DTLTTR,HEXWORK2\n         SR    R1,R1\n         IC    R1,NEXTCCHH+5               THE KEYLEN\n         BAL   R14,CVD                     PERFORM\n         UNPK  DTLKEY,DOUBLE(8)\n         ICM   R1,B'1100',NEXTCCHH+6       THE LRECL\n         SRA   R1,16\n         BAL   R14,CVD                     PERFORM\n         UNPK  DTLDATA,DOUBLE(8)\n         MVC   DTLHDR,DTLWORK\nLISTHEX4 EQU   *\n         BAL   R14,HEXDUMP                 PERFORM\n         L     R14,LISTXR14\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nLISTDATA EQU   *\n         ST    R14,LISTXR14\n         MVC   FUNCTION,=CL4'ASIS'\n         MVC   DUMPSTRT(4),=A(PRINTREC)\n         OI    DUMPHDNG,X'80'\n         BAL   R14,HEXDUMP                 PERFORM\n         NI    DUMPHDNG,X'7F'\n         MVI   PRINTREC,C' '\n         MVC   PRINTREC+1(L'PRINTREC-1),PRINTREC\n         L     R14,LISTXR14\n         BR    R14                         EXIT\n***********************************************************************\nHEXDMP14 DC    A(0)\nHEXDUMP  EQU   *\n         ST    R14,HEXDMP14\n         LA    R1,DUMPPARM\n         CALL  HEXDUMP\n         L     R14,HEXDMP14\n         BR    R14                         EXIT\n***********************************************************************\nSKIPR14  DC    A(0)\nSKIPFIND EQU   *\n         CLI   SKIPCTL,0                   ARE WE SKIPPING TO A FIND\n         BE    4(R14)                          NO\n         ST    R14,SKIPR14\n         MVI   SELCHECK+1,X'08'\n         BAL   R14,SELECT                  TRY TO FIND\n         B     SKIPFEXT                    NO HIT\n         MVI   SKIPCTL,0\n         L     R14,SKIPR14\n         B     4(R14)\nSKIPFEXT L     R14,SKIPR14\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nLSTRTN14 DC    A(0)\nLISTRTN  CLI   STOPCTL,X'00'\n         BE    4(R14)\n         ST    R14,LSTRTN14\n         MVI   SELCHECK+1,X'04'\n         BAL   R14,SELECT                  PERFORM\n         B     LISTRTNA\n         MVI   STOPCTL,X'00'\n         L     R14,LSTRTN14\n         BR    R14                         EXIT\nLISTRTNA L     R14,LSTRTN14\n         B     4(R14)\n***********************************************************************\nPUNCHER  CLI   DUMPCTL,X'00'\n         BER   R14\n         MVI   PNCHDONE,X'00'\n         MVI   DUMPCTL,X'00'\n         L     R5,SRCHBUF\n         LA    R4,INDCB\n         LH    R6,DCBLRECL\nPNCHLOOP LH    R4,SRCHLNG\n         LTR   R4,R4\n         BZ    PNCHEXIT\n         BCTR  R4,0\n         CLI   SRCHOPTN,X'0C'\n         BNE   PNCHNEXT\n         STC   R4,PNCHMVC+1\n         LH    R3,SRCHOFF\n         LR    R2,R6\n         SR    R2,R4\n         SR    R2,R3\n         BNP   PNCHNEXT\n         MVI   PNCHDONE,X'FF'\n         LA    R3,0(R3,R10)\n         CH    R2,SRCHRNGE\n         BL    PNCHMVC\n         LH    R2,SRCHRNGE\nPNCHMVC  MVC   0(R3),8(R5)\n         LA    R3,1(R3)\n         BCT   R2,PNCHMVC\nPNCHNEXT LA    R5,9(R4,R5)\n         B     PNCHLOOP\nPNCHEXIT CLI   PNCHDONE,X'00'\n         BE    14                          PSA REFERENCE\n         B     4(R14)\n***********************************************************************\nMOVER    CLI   MOVECTL,X'00'\n         BER   R14\n         L     R5,SRCHBUF\n         LH    R6,UT2BLKSI\nMOVELOOP LH    R4,SRCHLNG\n         LTR   R4,R4\n         BZ    MOVEEXIT\n         CLI   SRCHOPTN,X'14'\n         BE    MOVER2\n         CLI   SRCHOPTN,X'10'\n         BNE   MOVENEXT\n         LH    R4,SRCHRNGE\n         BCTR  R4,0\n         STC   R4,MOVE1MVC+1\n         LH    R3,SRCHOFF\n         LR    R2,R6\n         SR    R2,R4\n         LA    R4,1\n         SR    R2,R3\n         BNP   MOVENEXT\n         L     R9,UT2BUF\n         LA    R9,0(R3,R9)\n         LH    R3,8(,R5)\n         LA    R3,0(R3,R10)\nMOVE1MVC MVC   0(0,9),0(3)\n         LA    R4,1\n         B     MOVENEXT\nMOVER2   BCTR  R4,0\n         STC   R4,MOVE2MVC+1\n         LH    R3,SRCHOFF\n         LR    R2,R6\n         SR    R2,R4\n         SR    R2,R3\n         BNP   MOVENEXT\n         L     R9,UT2BUF\n         LA    R9,0(R3,R9)\n         CH    R2,SRCHRNGE\n         BL    MOVE2MVC\n         LH    R2,SRCHRNGE\nMOVE2MVC MVC   0(0,9),8(5)\n         LA    R9,1(R9)\n         BCT   R2,MOVE2MVC\nMOVENEXT LA    R5,9(R4,R5)\n         B     MOVELOOP\nMOVEEXIT L     R10,UT2BUF\n         BR    R14                         EXIT\n***********************************************************************\nCHKSERCH CLI   SEARCHON,X'00'\n         BE    4(R14)\n         MVI   SELCHECK+1,X'00'\n***********************************************************************\n         EJECT\n***********************************************************************\nSELECT   EQU   *\n*                                                                     *\nSELCTNOP B     4(14)                       SET TO NOP IF ENTRIES\n         MVI   SLECTHIT,X'00'\n         L     R5,SRCHBUF\n         LA    R4,INDCB\n         LH    R6,DCBLRECL                 THE REC LNGTH\nSELLOOP  LH    R4,SRCHLNG\n         LTR   R4,R4\n         BZ    SELEXIT                     ---END ---EXIT\n         BCTR  R4,0\nSELCHECK CLI   SRCHOPTN,0\n         BNE   SELINC2\n         STC   4,SELCLC+1\n         LH    R3,SRCHOFF                  OFFSET\n         LR    R2,R6                       THE LRECL\n         SR    R2,R4                       MINUS CLC LENGTH\n         SR    R2,R3                       MINUS OFFSET\n         BNP   SELINC                      TOO BAD\n         LA    R3,0(R3,R10)\n         MVC   SELBRAN+1(1),SRCHFUNC\n         CH    R2,SRCHRNGE\n         BL    SELLOOP2\n         LH    R2,SRCHRNGE\nSELLOOP2 EQU   *\nSELCLC   CLC   0(0,3),SRCHDATA\nSELBRAN  B     SELHIT                      ---HIT---EXIT\n         LA    3,1(3)\n         BCT   R2,SELLOOP2\n*                                                                     *\nSELINC   EQU   *\n         CLI   ANDOR,X'FF'                 ANDING\n         BER   R14                         YES\nSELINC2  LA    R5,SRCHCTL+1(R4,R5)\n         B     SELLOOP\n***********************************************************************\nSELHIT   EQU   *\n         CLI   ANDOR,0                     ANDING\n         BE    4(R14)                         NO\n         MVI   SLECTHIT,X'FF'\n         B     SELINC2\n***********************************************************************\nSELEXIT  EQU   *\n         CLI   ANDOR,0                     ANDING\n         BER   R14                            NO\n         CLI   SLECTHIT,X'00'              STOPPING\n         BER   R14                            NO\n         B     4(R14)\n***********************************************************************\n         EJECT\n***********************************************************************\nDSNGR14  DC    A(0)\nDSNGET   EQU   *\n         ST    R14,DSNGR14\n         L     R10,EXCPBUF\n         CLI   EXCP,X'FF'\n         BE    EXCPGET\nDSNLOOP  MVI   SYNADERR,0\n         GET   INDCB,INBUF\n         CLI   SYNADERR,X'FF'\n         BNE   DSNEXIT\n         CLI   EROPT,X'04'\n         BL    EXCPERRX\n         BC    2,DSNEXIT\n         RELSE INDCB\n         B     DSNLOOP\nDSNEXIT  AP    RECOUNT,=P'1'\n         LA    R4,INDCB\n         LH    R3,DCBLRECL\n         LA    R3,INBUF(R3)\n         ST    R3,RECEND\n         L     R14,DSNGR14\n         B     4(R14)\n***********************************************************************\nEXCPGET  EQU   *\n         MVI   IOBECB,0\n*                                                                     *\n         LA    R4,INDCB\n         NI    DCBIFLGS,X'3F'\n*                                                                     *\n         TM    UT1DVCLS,X'20'\n         BZ    EXCPEXCP\n         BAL   R14,EXTENTS                 FIND THE EXTENT\n         B     EXCPERRX                    ITS NOT RIGHT\n*                                                                     *\n         MVC   IOBCCHHR,NEXTCCHH\nEXCPEXCP EXCP  IOBIOB\n         WAIT  ECB=IOBECB\n*                                                                     *\n         LH    R2,EXCPREAD+6               NUMBER SUPPOSED TO READ\n         SH    R2,IOBBYTES\n         LA    R4,INDCB\n         STH   R2,DCBLRECL                 NUMBER OF BYTES READ\n*                                                                     *\n         CLI   IOBECB,X'7F'                ALL OK\n         BE    DSNEXIT                        YES\n*                                                                     *\n         CLI   IOBECB,X'42'                EXTENT VIOLATION\n         BNE   EXCPYNAD                       NO\n         CLI   SAVEDEB,0                   ANY DEBS LEFT\n         BE    EXCPERRX                      NOPE\n         L     R2,SAVEDEB\n         LA    R2,X'10'(R2)                THE NEXT ONE\n         MVI   NEXTCCHH+4,0\n         MVC   NEXTCCHH(4),6(R2)           START EXTENT\n         B     EXCPGET\nEXCPYNAD EQU   *\n         MVC   HEXWORK1(1),IOBECB\n         MVC   HEXWORK1+1(1),IOBSTAT\n         MVC   HEXWORK1+2(2),IOBSENS0\n         MVC   HEXWORK1+4(5),IOBCCHHR\n*                                                                     *\n         UNPK  HEXWORK2(15),HEXWORK1(8)\n         UNPK  HEXWORK2+14(5),HEXWORK1+7(3)\n         TR    HEXWORK2(19),TRTBL-C'0'\n         MVC   MSGECB(2),HEXWORK2          ECB\n         MVC   MSGCSW(2),HEXWORK2+2        CSW\n         MVC   MSGSENS(4),HEXWORK2+4       SENSE\n         MVC   MSGCHR(10),HEXWORK2+8       CHR\n         CLI   IOBECB,X'41'\n         BNE   EXCPIOER\n         TM    IOBSTAT,X'01'               EOF\n         BZ    EXCPIOER                       NOPE\n         MVI   INEOF,X'FF'                 TELLUM EOF IS HERE\n         AP    RECOUNT,=P'1'               COUNT THIS ONE TOO\n         BAL   R14,LISTHEX                 PERFORM\n         B     EXCPALL\nEXCPIOER EQU   *\n         LA    R1,IOERR\n         TM    UT1DVCLS,X'20'\n         BO    EXCPWTOR\n         MVC   IOERR2(43),IOERR\n         LA    R1,IOERR2\nEXCPWTOR BAL   R14,WTORTN                  PERFORM\nEXCPALL  EQU   *\n         CLI   DUMPALL,0                   KEEP ON GOING\n         BE    EXCPERRX                        NO\n         TM    UT1DVCLS,X'20'\n         BZ    EXCPERRX\n         CLC   NEXTCCHH(5),IOBCCHHR        STUCK ON THE SAME\n         BNE   EXCPGET                       NO\nEXCPERRX EQU   *\n         L     R14,DSNGR14\n         BR    R14                         EXIT ADDR\n***********************************************************************\n         EJECT\n***********************************************************************\n         USING UTSYNAD,R15\nUTSYNAD  SYNADAF ACSMETH=QSAM\n         STM   R13,R15,SYNADREG            SAVE REGS\n         L     R13,SAVEADDR\n         USING SAVEAREA,R13\n         DROP  R15\n         MVC   SYNADSAV(72),SAVEAREA\n         MVC   IOERR3A(78),50(R1)\n         LA    R1,IOERR3\n         BAL   R14,WTORTN                  PERFORM\n         MVC   SAVEAREA(72),SYNADSAV\n         MVI   SYNADERR,X'FF'\n         OI    SYNADREG+8,X'FF'\n         LM    R13,R15,SYNADREG            RESTORE REGS\n         SVC   68                          SYNADRLS\n         BR    R14                         EXIT\n         B     *\n         B     *\nSYNADREG DC    3A(0)\nSYNADSAV DC    18A(0)\nSAVEADDR DC    A(SAVEAREA)\n***********************************************************************\nDSNPR14  DC    A(0)\nDSNPUT   CLI   OUTON,X'00'\n         BE    4(R14)\n         ST    R14,DSNPR14\n         LA    R4,OUTDCB\n         CLI   DCBRECFM,X'C0'\n         BNE   DSNPUT1\n         MVC   DCBLRECL(2),INDCB+(DCBLRECL-IHADCB)\nDSNPUT1  MVI   SYNADERR,X'00'\n         GET   OUTDCB,INBUF\n         L     R14,DSNPR14\n         CLI   SYNADERR,X'00'\n         BE    4(R14)\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nCNVTBR14 DC    A(0)\n*                                                                     *\nCNVTTTR  EQU   *\n         ST    R14,CNVTBR14\n*                                                                     *\n         USING MAPCVT,R15\n         LA    R1,DBAPARM2\n         LM    R4,R6,0(R1)                 DCB,TTR,CCHHR\n         L     R1,DCBDEBA-1                ADDRESS DEB\n         L     R0,0(R5)                    TTR TO  CONVERT\n         LR    R2,R6                       WHERE TO STORE NUMBER\n         L     R15,CVT\n         L     R15,CVTPCNVT                TTR->CCHHR CONVERT ROUTINE\n         STM   R0,R12,20(R13)              SAVE REGS\n         BALR  R14,R15                     STD LINKAGE\n         DROP  R13\n         USING RESTOR13,R14\nRESTOR13 L     R13,ASAVE                   RELOAD BASE\n         DROP  R14\n         USING SAVEAREA,R13\n         LM    R0,R12,20(R13)              RESTORE REGS\n         B     *+4(15)\n         B     CNVTRTN                     OK\n         B     CNVTERR                     BAD\nCNVTRTN  L     R14,CNVTBR14\n         B     4(R14)\n***********************************************************************\nCNVTERR  EQU   *\n         LA    R1,EXTENTMG\n         BAL   R14,WTORTN                  PERFORM\n         L     R14,CNVTBR14\n         BR    R14                         EXIT\n***********************************************************************\nCVT      EQU   16\nCNVTCCHH EQU   *\n         ST    R14,CNVTBR14\n         LA    R1,DBAPARM1\n         LM    R4,R6,0(R1)                 DCB,TTR,CCHHR\n         L     R1,DCBDEBA-1\n         LR    R2,R6                       CCHHR ADDRESS\n         L     R15,CVT                     CVT ADDRESS\n         L     R15,CVTPRLTV\n         STM   R0,R12,20(R13)              SAVE REGS\n         BALR  R14,R15                     CCHHR->TTR CONVERT ROUTINE\n         DROP  R13\n         USING *,R14\nA00106E  EQU   *\n         L     R13,ASAVE\n         DROP  R14\n         USING SAVEAREA,R13\n         LM    R1,R12,24(R13)              RESTORE REGS\n         ST    R0,0(R5)                    THE TTR\n         L     R14,CNVTBR14\n         BR    R14                         EXIT\nASAVE    DC    A(SAVEAREA)\n***********************************************************************\nEXTENT14 DC    A(0)\nSAVEDEB  DC    A(0)\nEXTENTS  EQU   *\n         ST    R14,EXTENT14\n         LA    R4,INDCB\n         L     R2,DCBDEBAD                 THE DEB ADDR\n         SR    R3,R3\n         SR    R5,R5\n         IC    R3,X'10'(R2)                # OF EXTENTS\n         LA    R2,X'20'(R2)                POINT TO FIRST EXTENT\nEXTENTLP EQU   *\n         CLC   NEXTCCHH(4),6(R2)           BEGIN OF EXTENT\n         BL    EXTENTUP                       NOT THIS ONE\n         CLC   NEXTCCHH(4),10(R2)          END OF EXTENT\n         BH    EXTENTUP                    NOT THIS ONE\n         B     EXTENTHT                    THIS IS IT\nEXTENTUP LA    R5,1(R5)\n         LA    R2,X'10'(R2)                TO THE NEXT ONE\n         BCT   R3,EXTENTLP\n*                                                                     *\n         LA    R1,EXTENTMG\n         BAL   R14,WTORTN                  PERFORM\n         L     R14,EXTENT14\n         BR    R14                         EXIT\nEXTENTHT EQU   *\n         STC   R5,IOBMBB\n         STC   R5,NEXTMBB\n         ST    R2,SAVEDEB\n         BCTR  R3,0\n         STC   R3,SAVEDEB\n         L     R14,EXTENT14\n         B     4(R14)\n***********************************************************************\n         EJECT\n***********************************************************************\nGETINR14 DC    A(0)\n*                                                                     *\nGETSYSIN ST    R14,GETINR14\n         CLI   NTRACTON,X'FF'\n         BE    GETPRMPT\n         NOP   GETMORE\n         OI    *-3,X'F0'\n         LA    R4,SYSIN\n         LA    R1,DCBDDNAM\n         BAL   R14,DDFIND                  PERFORM\n         B     SYSINEND\n         OPEN  (SYSIN)\nGETMORE  EQU   *\n         LA    R4,SYSIN\n         TM    DCBOFLGS,X'10'              OPEN OK\n         BZ    SYSINEND                       NO\n         GET   SYSIN,CTLCARD\nGETJOIN  MVC   PRMCOUNT(2),=AL2(72)\n         MVC   PRMSTART(4),=A(CTLCARD)\n         MVC   PRMHIT(4),PRMSTART\n         BAL   R14,SETTRT                  PERFORM\n         L     R14,GETINR14\n         B     4(R14)\nSYSINEND EQU   *\n         L     R14,GETINR14\n         BR    R14                         EXIT\nGETPRMPT CLI   PROMPTED,X'FF'\n         BE    WAITPRMP\n         MVI   PRMPTECB,X'00'\n         WTOR  MF=(E,PROMPT)\nWAITPRMP WAIT  ECB=PRMPTECB\n         MVI   PROMPTED,X'00'\n         MVI   PRMPTECB,X'00'\n         MVC   CTLCARD,CTLIN\n         MVC   CTLIN,CTLINCLR\n         B     GETJOIN\n***********************************************************************\nFRSTPRMP ST    R14,GETINR14\n         MVI   PROMPTED,X'FF'\n         WTOR  MF=(E,PROMPT)\n         L     R14,GETINR14\n         BR    R14                         EXIT\n***********************************************************************\nTESTPRMP TM    PRMPTECB,X'40'\n         BCR   1,R14\n         B     4(R14)\n***********************************************************************\nSETTRT   EQU   *\n         XC    TRTTBL(256),TRTTBL\n         MVI   TRTTBL+C' ',C' '            BLANK\n         MVI   TRTTBL+C',',C','            COMMA\n         MVI   TRTTBL+C'=',C'='            EQUAL\n         MVI   TRTTBL+C'(',C'('            LEFT PAREN\n         MVI   TRTTBL+C')',C')'            RIGHT PAREN\n         MVI   TRTTBL+C'''',C''''\n         MVI   TRTTBL+C'/',C'/'            SLASH\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\n* SCAN FIELD FOR DELIMITER                 *                          *\n***********************************************************************\nPRMSTART DC    A(CTLCARD)                  WHERE TO START SCAN\nPRMHIT   DC    A(0)                        DELIMITER ADDRESS+1\nPRMCHAR  DC    A(0)                        THE DELIM CHARACTER\nPRMLNGTH DC    AL2(0)                      LENGTH OF HIT\nPRMCOUNT DC    AL2(71)                     # COLS TO CHK-DECREMENTED\n*                                                                     *\nPRMSCAN  EQU   *\n         XC    PRMLNGTH(2),PRMLNGTH        INIT TO 0 LNGTH\n         L     R3,PRMSTART\n         LH    R5,PRMCOUNT                 BYTES LEFT\n         LTR   R5,R5\n         BNP   0(R14)                      ---NONE LEFT---EXIT\n         BCTR  R5,0\n         STC   R5,PRMTRT+1\n         LA    R1,1(R5,R3)                 PREDICT END\nPRMTRT   TRT   0(0,3),TRTTBL\n         MVC   PRMCHAR+3(1),0(R1)          DELIMITER\n         LA    R3,1(R1)                    +1 AFTER DELIM\n         ST    R3,PRMHIT                   SAVE\n         S     R1,PRMSTART                 END-BEGIN=LENGTH\n         SR    R5,R1                       DECR # LEFT\n         STH   R5,PRMCOUNT\n         STH   R1,PRMLNGTH                 LENGTH FROM START TO END\n         BM    0(R14)                      ---PAST END---EXIT\n         LTR   R1,R1\n         BZ    4(R14)                      ---ZERO LENGTH---EXIT\n         B     8(R14)                      ---OK---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nCHKADR   DC    A(0)                        ARG TO COMPARE\nCHKTBL   DC    A(0)                        TABLE TO SEARCH AGAINST\nCHKLNGTH DC    AL2(0)                      LENGTH ARG\n*                                                                     *\nCHKTYPE  EQU   *\n         SR    R5,R5\n         L     R3,CHKADR                   ARG TO COMPARE\n         L     R4,CHKTBL                   TABLE\nCHK80    EQU   *\n         LH    R2,CHKLNGTH                 LENGTH\n         BCTR  R2,0\n         STC   R2,CHKCLC+1                 LENGTH TO CHK\n         TM    0(R4),X'80'                 MUST IT EQUAL ITT\n         BZ    CHKCLC\n         IC    R2,0(R4)\n         N     R2,=A(X'0000007F')          TURN '80' OFF\n         BCTR  R2,0\n         STC   R2,CHKCLC+1\nCHKCLC   CLC   0(0,3),2(4)\n         BE    CHKHIT                      ---HIT----EXIT\n         LA    R5,4(R5)                    BUMP EXIT OFFSET\n         IC    R2,1(R4)                    +LENGTH\n         AR    R4,R2\n         LA    R4,2(R4)                    +2 CTL\n         IC    R2,1(R4)\n         LTR   R2,R2                       IS THIS THE END\n         BZ    0(R14)                      ----END--NOHIT---EXIT\n         B     CHK80\n*                                                                     *\nCHKHIT   EQU   *\n         SR    R1,R1\n         IC    R1,0(R4)                    MIN LENGTH\n         N     R1,=A(X'0000007F')\n         BCTR  R1,0\n         SR    R2,R2\n         IC    R2,CHKCLC+1\n         CR    R2,R1                       GT MININUM\n         BLR   R14                         ---NOPE---NOT LONG ENOUGH\n         B     4(R5,R14)                   ---HIT---EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nEXLSTPRT DC    0F'0',X'85',AL3(DCBEXIT)\n*                                                                     *\nDCBEXIT  EQU   *\n         USING *,R15\n         DROP  R4\n         USING IHADCB,R1\n         CLI   DCBRECFM,0                  ANY RECFM\n         BNE   DCBEXIT2                      YES\n         MVI   DCBRECFM,X'C0'              SET TO U MAYBE CAN USE\nDCBEXIT2 OC    DCBBLKSI(2),DCBBLKSI        IS BLKSIZE ZERO\n         BNZR  R14                            NO\n         MVC   DCBBLKSI(2),DCBLRECL        MAKE BLK=LRECL\n         BR    R14                         EXIT\n*                                                                     *\nUT1EXLST DC    0F'0',X'87',AL3(UT1JFCB)\nUT2EXLST DC    0F'0',X'05',AL3(UT2EXIT),X'87',AL3(UT2JFCB)\n*                                                                     *\nUT2EXIT  EQU   *\n         USING *,R15\n         CLI   DCBRECFM,0                  ANY RECFM\n         BNE   UT2EX1                         YES\n         MVC   DCBRECFM(1),INDCB+(DCBRECFM-IHADCB) USE UT1\nUT2EX1   EQU   *\n         OC    DCBLRECL(2),DCBLRECL        ANY LRECL\n         BNZ   UT2EX2                         YES\n         MVC   DCBLRECL(2),INDCB+(DCBLRECL-IHADCB) USE UT1\nUT2EX2   EQU   *\n         OC    DCBBLKSI(2),DCBBLKSI        ANY BLKSIZE\n         BNZR  R14                            YES\n         MVC   DCBBLKSI(2),INDCB+(DCBBLKSI-IHADCB) USE UT1\n         BR    R14                         EXIT\n         DROP  R1,R15\n         USING IHADCB,R4\n         DS    0D\nUT1JFCB  EQU   *\nUT2JFCB  EQU   *\n         IEFJFCBN\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\nOPEN1R14 DC    A(0)\nOPENUT1  EQU   *\n         ST    R14,OPEN1R14\n         MVC   ERRDDNAM(8),UT1NAME\n         LA    R4,INDCB\n         TM    DCBOFLGS,X'10'              ALREADY OPEN\n         BO    4(R14)                         YES\n         ZAP   RECOUNT,=P'0'\n         MVC   FUNCTION,=CL4'PAGE'\n         BAL   R14,HEXDUMP                 PERFORM\n         LA    R1,UT1NAME\n         BAL   R14,DDFIND                  PERFORM\n         B     OPN1NODD\n         LA    R4,INDCB\n         MVC   DCBDDNAM,UT1NAME\n         RDJFCB (INDCB)\n         CLI   WORKDSN,C' '                ANY DSN\n         BE    OPENUT1G                       NO\n         MVC   JFCBDSNM(44),WORKDSN\nOPENUT1G EQU   *\n         MVC   UT1DSN,JFCBDSNM\n         MVC   UT1DD,UT1NAME\n         MVC   UT1VOL,JFCBVOLS\n         OI    JFCBTSDM,X'08'              DONT BOTHER TO WRITE BACK\n         L     R1,WORKUCB\n         MVC   UT1DVADR,13(R1)\n         MVC   UT1DVCLS,18(R1)\n         TM    JFCBTSDM,X'20'\n         BO    OPENUT1H\n         CLI   JFCBVOLS,C' '\n         BE    OPENUT1H\n         TM    18(R1),X'20'\n         BZ    OPENUT1H\n         CLI   VTOC,X'FF'                  DOING A VTOC\n         BE    OPENUT1N                    YEP\n         OBTAIN                            CAMLST\n         LTR   R15,R15\n         BZ    OPENUT1H\n         LA    R1,DSNERR\n         BAL   R14,WTORTN                  PERFORM\n         B     OPENUT1X\nOPENUT1N MVI   JFCBDSNM,X'04'\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM\n         MVC   UT1DSN(44),=CL44' ******** VTOC ********'\nOPENUT1H EQU   *\n         OPEN  (INDCB),TYPE=J\n         LA    R4,INDCB\n         TM    DCBOFLGS,X'10'              OPEN OK\n         BZ    OPENUT1X                       NO\n         LH    R3,DCBLRECL\n         CVD   R3,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  UT1RECL,DOUBLE(8)\n         LH    R3,DCBBLKSI\n         LTR   R3,R3\n         BNZ   OPENUT1O\n         LH    R3,DS1BLKL\n         STH   R3,DCBBLKSI\nOPENUT1O EQU   *\n         SR    R2,R2\n         IC    R2,DCBKEYLE\n         LA    R2,0(R2,R3)\n         STH   R2,EXCPREAD+6\n         CVD   R3,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  UT1BLOCK,DOUBLE(8)\n         CLI   DCBRECFM,X'C0'\n         BE    OPENUT1I                       YES ITS 'U'\n         LH    R2,DCBLRECL                 GET ONLY ENOUGH FOR A LRECL\nOPENUT1I EQU   *\n         LR    R0,R2\n         STH   R0,UT1BLKSI\n         LTR   R0,R0\n         BNZ   OPENUT1L\n         LA    R1,BLKERR\n         BAL   R14,WTORTN                  PERFORM\n         B     OPENUT1X\nOPENUT1L EQU   *\n         GETMAIN R,LV=(0)\n         LR    R10,R1                      WHERE THE BUFFER IS\n         ST    R10,EXCPREAD\n         ST    R10,EXCPBUF\n         CLI   EXCP,X'00'                  IS IT EXCP\n         BE    OPEN1EXX                       NO\n         TM    UT1DVCLS,X'20'\n         BO    OPN1MVI1\n         MVI   EXCPREAD,X'02'\n         MVI   EXCPREAD+4,X'20'\n         MVI   IOBIOB,X'02'\n         MVC   IOBSTRTB,=A(EXCPREAD)\n         B     OPEN1EXX\nOPN1MVI1 MVI   EXCPREAD,X'0E'\nOPN1MVI2 MVI   EXCPREAD+4,X'20'\n         MVI   IOBIOB,X'42'\n         MVC   IOBSTRTB,=A(EXCPCCW)\n         CLI   DEBON,0                     ANY DEB\n         BE    OPENUT1P                       NO\n         BAL   R14,DEBMOD                  PERFORM\nOPENUT1P EQU   *\n         CLC   NEXTCCHH(5),=XL5'00'        ANY CCHHR\n         BNE   OPEN1EXT                       YES THERE IS\n         CLC   EXCPTTR(4),=A(0)\n         BNE   OPENUT1K                       THERE IS A TTR\n         MVC   EXCPTTR(4),=A(X'00000100')\nOPENUT1K EQU   *\n         BAL   R14,CNVTTTR                 MAKE IT A CCHHR\n         B     OPENUT1X                    SOMETHING IS WRONG\nOPEN1EXT EQU   *\n         SR    R2,R2\n         IC    R2,NEXTCCHH+4               THE RECORD\n         LTR   R2,R2                       IS IT ZERO\n         BZ    OPEN1EXX                       YES\n         BCTR  R2,0                        REVISE\n         STC   R2,NEXTCCHH+4\nOPEN1EXX EQU   *\n         L     R14,OPEN1R14\n         B     4(R14)\nOPN1NODD LA    R1,DDERR\n         BAL   R14,WTORTN                  PERFORM\nOPENUT1X EQU   *\n         LA    R1,OPNERR\n         BAL   R14,WTORTN                  PERFORM\n         L     R14,OPEN1R14\n         BR    R14                         EXIT\n***********************************************************************\nDEBR14   DC    A(0)\nDEBMOD   EQU   *\n         ST    R14,DEBR14\n*                                                                     *\n         SR    R1,R1                       AUTH ON\n         SVC   247\n*                                                                     *\n         MODESET KEY=ZERO\n*                                                                     *\n         LA    R4,INDCB\n         L     R2,DCBDEBAD\n         LA    R2,X'20'(R2)                FIRST EXTENT\n         MVC   4((MYDEBE-MYDEBS),R2),MYDEBS\n*                                                                     *\n         MODESET KEY=NZERO\n*                                                                     *\n         LA    R1,1                        AUTH OFF\n         SVC   247\n         L     R14,DEBR14\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nOPEN2R14 DC    A(0)\nOPENUT2  EQU   *\n         ST    R14,OPEN2R14\n         MVC   ERRDDNAM(8),UT2NAME\n         LA    R4,OUTDCB\n         TM    DCBOFLGS,X'10'              OPEN YET\n         BO    OPENUT2A                       YES\n         MVC   DCBDDNAM(8),UT2NAME\n         RDJFCB OUTDCB\n         MVC   UT2DSN,JFCBDSNM\n         OPEN  (OUTDCB,(OUTPUT))\n         LA    R4,OUTDCB\n         TM    DCBOFLGS,X'10'              OPEN OK\n         BZ    OPENUT2X\n         MVC   UT2BLKSI(2),82(R4)\n         CLI   36(R4),X'C0'\n         BNE   OPENUT2A\n         MVC   UT2BLKSI(2),62(R4)\nOPENUT2A CLI   MOVEON,X'00'\n         BE    OPENUT2B\n         BAL   R14,UT2GETM                 PERFORM\nOPENUT2B L     R14,OPEN2R14\n         B     4(R14)\nOPENUT2X EQU   *\n         LA    R1,OPNERR\n         BAL   R14,WTORTN                  PERFORM\n         L     R14,OPEN2R14\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nCLOSE114 DC    A(0)                       A(0)\nCLOSEUT1 EQU   *\n         ST    R14,CLOSE114\n         MVI   INEOF,0                     RESET TO NO EOF\n         LA    R4,INDCB\n         TM    DCBOFLGS,X'10'              WAS IT OPEN\n         BZR   R14                            NO\n         LH    R0,UT1BLKSI\n         LTR   R0,R0\n         BZ    CLOSET1F                    NOTHING THERE\n         FREEMAIN R,LV=(0),A=EXCPBUF\nCLOSET1F EQU   *\n         CLOSE (INDCB)\n         CLI   EXCP,X'FF'                  WAS IT EXCP\n         BE    CLOS1EXT                       YES\n         FREEPOOL INDCB\nCLOS1EXT EQU   *\n         L     R14,CLOSE114\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nCLOSE214 DC    A(0)\nCLOSEUT2 EQU   *\n         ST    R14,CLOSE214\n         LA    R4,OUTDCB\n         TM    DCBOFLGS,X'10'              OPEN EVER\n         BZR   R14                            NO\n         BAL   R14,UT2FREM                 PERFORM\n         CLOSE (OUTDCB)\n         FREEPOOL OUTDCB\n         L     R14,CLOSE214\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\n***********************************************************************\nDDFIND14 DC    A(0)\nDDFIND   EQU   *\n         ST    R14,DDFIND14\n         ST    R1,DDPARM\n         MVC   DDERRNAM(8),0(R1)\n         LA    R1,DDPARM\n         CALL  VDBS$DDF\n         B     *+4(R15)\n         B     DDFINDOK\n         B     DDFINDER\nDDFINDOK EQU   *\n         L     R15,WORKTIOT\n         SR    R14,R14\n         ICM   R14,7,41-24(R15)\n         ST    R14,WORKUCB\n         L     R14,DDFIND14\n         B     4(R14)\nDDFINDER EQU   *\n         SR    R14,R14\n         ST    R14,WORKUCB\n         L     R14,DDFIND14\n         BR    R14                         EXIT\n***********************************************************************\nDDPARM   DC    A(*)\n         DC    X'80',AL3(WORKTIOT)\nWORKTIOT DC    A(0)\nWORKUCB  DC    A(0)\n***********************************************************************\nPACKR14  DC    A(0)\nPACK     EQU   *\n         ST    R14,PACKR14\n         LH    R4,PRMLNGTH\n         BCTR  R4,0\n         EX    R4,NUMCHK\n         BNZ   PACKERR\n         EX    R4,PACKITT\n         CVB   R1,DOUBLE\n         B     4(R14)\nCVD      EQU   *\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         BR    R14                         EXIT\nPACKERR  EQU   *\n         L     R14,PACKR14\n         BR    R14                         EXIT\n***********************************************************************\nPACKITT  PACK  DOUBLE(8),VALUE(0)\nNUMCHK   TRT   VALUE(0),TRTNUM\n***********************************************************************\n         EJECT\n***********************************************************************\nSRCHGM14 DC    A(0)\nSRCHGETM EQU   *\n         ST    R14,SRCHGM14\n         CLC   SRCHBUF(4),=A(0)\n         BNER  R14\n         L     R0,SRCHSIZE                AMT STORAGE WE WANT FOR SRCHS\n         GETMAIN R,LV=(0)\n         ST    R1,SRCHADR\n         ST    R1,SRCHBUF\n         LR    R5,R1\n         XC    SRCHOFF(SRCHCTL),SRCHOFF\n         L     R14,SRCHGM14\n         BR    R14                         EXIT\n***********************************************************************\nSRCHFREM EQU   *\n         ST    R14,SRCHGM14\n         CLC   SRCHBUF(4),=A(0)\n         BER   R14\n         L     R1,SRCHBUF\n         L     R0,SRCHSIZE\n         FREEMAIN R,LV=(0),A=(1)\n         XC    SRCHADR(4),SRCHADR\n         XC    SRCHBUF(4),SRCHBUF\n         L     R14,SRCHGM14\n         BR    R14                         EXIT\n***********************************************************************\nUT2GM14  DC    A(0)\nUT2GETM  ST    R14,UT2GM14\n         CLC   UT2BUF(4),=A(0)\n         BNER  R14\n         LH    R0,UT2BLKSI\n         GETMAIN R,LV=(0)\n         ST    R1,UT2BUF\n         L     R14,UT2GM14\n         BR    R14                         EXIT\n***********************************************************************\nUT2FREM  ST    R14,UT2GM14\n         CLC   UT2BUF(4),=A(0)\n         BER   R14\n         LH    R0,UT2BLKSI\n         L     R1,UT2BUF\n         FREEMAIN R,LV=(0),A=(1)\n         XC    UT2BUF(4),UT2BUF\n         L     R14,UT2GM14\n         BR    R14                         EXIT\n***********************************************************************\n         EJECT\nTRTTBL   DC    256X'00'\nHEXTBL   EQU   *-C'A'\nHEX0     DC    (1+C'9'-C'A')X'00'\n         ORG   HEX0\nHEX1     DC    6AL1((*-HEX1)+10)\n         ORG   HEX0+(C'0'-C'A')\nHEX2     DC    10AL1(*-HEX2)\n         ORG\nHEXWORK1 DC    XL10'0'\nHEXWORK2 DC    XL19'0'\n*                                                                     *\nTRTBL    DC    C'0123456789ABCDEF'\n*                                                                     *\nTRTNUM   DC    256AL1(*-TRTNUM)\n         ORG   TRTNUM+C'0'\n         DC    10X'00'\n         ORG\n*                                                                     *\n         DC    CL2' '\nCTLCARD  DC    CL80' '\nCTLINCLR DC    CL80' '\nCTLIN    EQU   CTLINCLR+1\n         DC    CL(256-2*80)' '\n*                                                                     *\nVALUECLR DC    CL80' '\nVALUE    EQU   VALUECLR+1\n         DC    CL2' '\nHEADING  DC    CL132' '\n         ORG   HEADING\n         DC    C'SUPERGEN DSN DUMP  '\nUT1VOL   DC    CL6' '\n         DC    C'-'\nUT1DVADR DC    CL3' '\n         DC    C'-'\nUT1DD    DC    CL8' '\n         DC    C' '\nUT1RECL  DC    CL5' '\n         DC    C'/'\nUT1BLOCK DC    CL5' '\n         DC    C' '\nUT1DSN   DC    CL44' '\n         ORG\nEOFMSG   DC    CL132'******** EOF RECORD *********'\n*                                                                     *\nDTLWORKS EQU   *\nDTLWORK  DC    C' CCHHR='\nDTLCCHH  DC    CL10' '\n         DC    C' KEYLEN='\nDTLKEY   DC    CL3' '\n         DC    C' BLKSIZE='\nDTLDATA  DC    CL5' '\n         DC    C' TTR='\nDTLTTR   DC    CL6' '\nDTLWORKE EQU   *\n*                                                                     *\nDETAIL   DC    CL132' '\n         ORG   DETAIL\n         DC    C'RECORD SEQUENCE NUMBER1234567890'\nDTLCOUNT EQU   *-10\n         DC    C' '\nDTLHDR   DC    CL(DTLWORKE-DTLWORKS)' '\n         ORG\n*                                                                     *\nUT2DSN   DC    CL44' '\nWORKDSN  DC    CL44' '\n*                                                                     *\n         DC    AL2(L'CTAPECNT)\nCTAPECNT DC    C'SPGENMSG10- # OF RECORDS READ=1234567890'\nCTAPEREC EQU   *-10\n*                                                                     *\n         DC    AL2(L'COUTCNT)\nCOUTCNT  DC    C'SPGENMSG11- # OF RECORDS SELECTED=123456'\nCOUTREC  EQU   *-6\n*                                                                     *\n         DC    AL2(L'DDERR)\nDDERR    DC    C'SPGENERR03--- DDNAME MISSING ----12345678'\nDDERRNAM EQU   *-8\n*                                                                     *\n         DC    AL2(L'DSNERR)\nDSNERR   DC    C'SPGENERR06---DATASET NOT ON VOLUME ---SEE HDNG'\n*                                                                     *\n         DC    AL2(L'NUMERR)\nNUMERR   DC    C'SPGENERR05---THATS NOT A NUMBER---'\n*                                                                     *\n         DC    AL2(L'SIZERR)\nSIZERR   DC    C'SPGENERR04--THIS NUMBER SHOULD BE G.E. TO 1ST NUMBER'\n*                                                                     *\n         DC    AL2(L'OPTNERR)\nOPTNERR  DC    C'SPGENERR02--INVALID COMMAND : '\n*                                                                     *\n         DC    AL2(L'BADKEY)\nBADKEY   DC    CL80' '\n*                                                                     *\n         DC    AL2(L'OPNERR)\nOPNERR   DC    C'SPGENERR01---OPEN HAS FAILED----12345678'\nERRDDNAM EQU   *-8\n*                                                                     *\n         DC    AL2(L'BLKERR)\nBLKERR   DC    C'SPGENERR77----THE BLKSIZE IS ZERO---PLEASE CORRECT'\n*                                                                     *\n         DC    AL2(L'IOERR)\nIOERR DC C'SPGENERR88-IOERROR-ECB=12,CSW=12,SENSE=1234,CHR=123456789A'\nMSGECB   EQU   IOERR+23\nMSGCSW   EQU   IOERR+30\nMSGSENS  EQU   IOERR+39\nMSGCHR   EQU   IOERR+48\n*                                                                     *\n         DC    AL2(L'IOERR2)\nIOERR2   DC    C'SPGENERR88-IOERROR-ECB=12,CSW=12,SENSE=1234'\n*                                                                     *\n         DC    AL2(L'IOERR3)\nIOERR3   DC    CL97' '\n         ORG   IOERR3\n         DC    C'SPGENERR88-IOERROR-'\nIOERR3A  EQU   *\n         ORG\n*                                                                     *\n         DC    AL2(L'EXTENTMG)\nEXTENTMG DC    C'SPGENERR04---ADDRESS OUTSIDE EXTENTS---'\n*                                                                     *\nTAPER14  DC    A(0)\n*                                                                     *\nEXCPBUF  DC    A(0)\nUT2BUF   DC    A(0)\nRECEND   DC    A(0)\nSRCHADR  DC    A(0)\nSRCHBUF  DC    A(0)\nSRCHSIZE DC    A(4000)                 SIZE FOR FINDS\n*                                                                     *\nPARMADR  DC    A(0)\nBLOCKADR DC    A(0)\nBLOCKEND DC    A(0)\n*                                                                     *\nDBAPARM1 DC    A(INDCB)\n         DC    A(EXCPTTR)\n         DC    A(NEXTMBB)\n*                                                                     *\nDBAPARM2 DC    A(INDCB)\n         DC    A(EXCPTTR)              THE TTR IN\n         DC    A(NEXTMBB)              THE CCHHR OUT\n*                                                                     *\nCAMLST   CAMLST                        SEARCH,UT1DSN,UT1VOL,DSCB\nDSCB     DC    CL148' '\nDS1BLKL  EQU   DSCB+86-44\n*                                                                     *\nDUMPPARM DS    0F\nDUMPTYP  DC    A(FUNCTION)\nDUMPSTRT DC    A(0)\nDUMPEND  DC    A(4)\nDUMPHDNG DC    A(HEADING)\nDUMPDTL  DC    AL1(X'80'),AL3(DETAIL)\n***********************************************************************\n*                                                                     *\nFUNCTION DC    CL4'RELO'\nHEXCHAR  DC    C'    '\nVTOC     DC    X'00'\nEXCP     DC    X'00'\nANDOR    DC    X'00'\nDUMPALL  DC    X'00'\nSKIPCTL  DC    X'00'\nSKIPON   DC    X'00'\nDUMPCTL  DC    X'00'\nDUMPON   DC    X'00'\nPNCHDONE DC    X'00'\nMOVECTL  DC    X'00'\nMOVEON   DC    X'00'\nWORKFUNC DC    X'00'\nLISTON   DC    X'00'\nSEARCHON DC    X'00'\nOUTON    DC    X'FF'\nSTOPCTL  DC    X'00'\nSTOPON   DC    X'00'\nDEBON    DC    X'00'\nKEEPON   DC    X'00'\nSLECTHIT DC    X'00'\nTRACE    DC    X'00'\nNTRACTON DC    X'00'\nPROMPTED DC    X'00'\nSYNADERR DC    X'00'\nEROPT    DC    X'00'\n         EJECT\n*                                                                     *\nKEYWORD1 DS    0F\n         DC    AL1(1,L'KEY19)\nKEY19    DC    C'END'\n         DC    AL1(1,L'KEY20)\nKEY20    DC    C'*'\n         DC    AL1(1,L'KEY1A)\nKEY1A    DC    C'DUMP'\n         DC    AL1(X'82',L'KEY1B)\nKEY1B    DC    C'OR'\n         DC    AL1(X'83',L'KEY1C)\nKEY1C    DC    C'AND'\n         DC    AL1(1,L'KEY1D)\nKEY1D    DC    C'KEEP'\n         DC    AL1(1,L'KEY1E)\nKEY1E    DC    C'PUNCH'\n         DC    AL1(1,L'KEY1F)\nKEY1F    DC    C'MOVE'\n         DC    AL1(1,L'KEY1I)\nKEY1I    DC    C'SKIP'\n         DC    AL1(1,L'KEY1J)\nKEY1J    DC    C'COUNT'\n         DC    AL1(X'84',L'KEY1K)\nKEY1K    DC    C'VTOC'\n         DC    AL1(X'84',L'KEY1L)\nKEY1L    DC    C'EXCP'\n         DC    AL1(1,L'KEY1M)\nKEY1M    DC    C'FIND'\n         DC    AL1(1,L'KEY1N)\nKEY1N    DC    C'RESET'\n         DC    AL1(1,L'KEY1O)\nKEY1O    DC    C'INDD'\n         DC    AL1(1,L'KEY1P)\nKEY1P    DC    C'OUTDD'\n         DC    AL1(1,L'KEY1Q)\nKEY1Q    DC    C'GO'\n         DC    AL1(1,L'KEY1R)\nKEY1R    DC    C'BLKSIZE'\n         DC    AL1(X'83',L'KEY1S)\nKEY1S    DC    C'CYL'\n         DC    AL1(X'84',L'KEY1T)\nKEY1T    DC    C'HEAD'\n         DC    AL1(X'83',L'KEY1U)\nKEY1U    DC    C'REC'\n         DC    AL1(X'85',L'KEY1V)\nKEY1V    DC    C'CCHHR'\n         DC    AL1(X'83',L'KEY1W)\nKEY1W    DC    C'TTR'\n         DC    AL1(X'83',L'KEY1X)\nKEY1X    DC    C'DSN'\n         DC    AL1(X'83',L'KEY1Y)\nKEY1Y    DC    C'EOF'\n         DC    AL1(X'83',L'KEY1Z)\nKEY1Z    DC    C'DEB'\n         DC    AL1(3,L'KEY1G)\nKEY1G    DC    C'INTERACT'\n         DC    AL1(2,L'KEY1H)\nKEY1H    DC    C'EROPT'\n         DC    AL2(0)\n*                                                                     *\n         DS    0F\n         EJECT\nKEYWORD2 DS    0F\n         DC    AL1(X'82',L'KEY2A)\nKEY2A    DC    C'EQ'\n         DC    AL1(X'82',L'KEY2B)\nKEY2B    DC    C'NE'\n         DC    AL1(X'82',L'KEY2C)\nKEY2C    DC    C'LT'\n         DC    AL1(X'82',L'KEY2D)\nKEY2D    DC    C'GT'\n         DC    AL1(X'82',L'KEY2E)\nKEY2E    DC    C'LE'\n         DC    AL1(X'82',L'KEY2F)\nKEY2F    DC    C'GE'\nKEYWORD3 EQU   *\n         DC    AL1(X'81',L'KEY3A)\nKEY3A    DC    C'X'\n         DC    AL1(X'81',L'KEY3B)\nKEY3B    DC    C'C'\n         DC    AL1(X'84',L'KEY3C)\nKEY3C    DC    C'STOP'\n         DC    AL1(X'84',L'KEY3D)\nKEY3D    DC    C'SKIP'\n         DC    AL2(0)\n         DC    AL2(0)\n         LTORG\nRECOUNT  DC    PL5'0'\nSKIPNUM  DC    PL6'0'\nCOUNTNUM DC    PL6'9999999'\nOUTCOUNT DC    PL6'0'\n*                                                                     *\nUT1DVCLS DC    XL1'0'\nUT1BLKSI DC    H'0'\nUT1NAME  DC    CL8'SYSUT1'\nUT2BLKSI DC    H'0'\nUT2NAME  DC    CL8'SYSUT2'\n*                                                                     *\n*                                                                     *\nEOF      DC    X'00'\nINEOF    DC    X'00'\nERROR    DC    X'00'\nGO       DC    X'00'\n*                                                                     *\n*                                                                     *\nDOUBLE   DC    D'0'\n         SPACE\n***********************************************************************\n*                                                                     *\n*        DCBS FOR THE PROGRAM                                         *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,                         X\n               RECFM=FB,LRECL=80,EODAD=SYSINEND,EXLST=EXLSTPRT\n*                                                                     *\n*                                                                     *\nPROMPT   WTOR  'SPGENMSG00--ENTER FUNCTION--',CTLIN,80,PRMPTECB,MF=L\nPRMPTECB DC    F'0'\n*                                                                     *\nOUTDCB   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,EXLST=UT2EXLST,         X\n               SYNAD=UTSYNAD,EROPT=SKP\n*                                                                     *\nINDCB    DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=REALEOF,          X\n               EXLST=UT1EXLST,SYNAD=UTSYNAD,EROPT=ACC\n*                                                                     *\nMODELDCB DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=REALEOF,          X\n               EXLST=UT1EXLST,SYNAD=UTSYNAD,EROPT=ACC\nLMODEL   EQU   *-MODELDCB\n*                                                                     *\n         PRINT GEN\n         DBAIOB CCW=EXCPCCW,PREFIX=IOB,DCB=INDCB\n*                                                                     *\nEXCPTTR  DC    A(X'00000100')\nNEXTMBB  DC    XL3'00'\nNEXTCCHH DC    XL5'00'\n         DC    XL3'00'\nWORKCCHH DC    XL8'00'\n         DC    X'00'\n*                                                                     *\nEXCPCCW  CCW   X'31',IOBCCHHR,X'40',5\n         CCW   X'08',EXCPCCW,X'00',1\nEXCPLOOP CCW   X'92',NEXTCCHH,X'60',8  MT COUNT\nEXCPREAD CCW   X'0E',*,X'20',0        READ KEY,DATA\n         CCW   X'08',EXCPLOOP,0,1      TRY TO LOOP IT\n         DS    0D\nMYDEBS   DC    AL2(0)                  BIN\n         DC    AL4(0)                  CCHH START\n         DC    H'-1',H'-1'             CCHH END\n         DC    X'7FFF'                 # TRKS\nMYDEBE   EQU   *\n***********************************************************************\nEXCPDCB  DCB   DDNAME=EEEE,MACRF=E,DSORG=PS,EXLST=UT1EXLST\nLEXCPDCB EQU   *-EXCPDCB\n*                                                                     *\nPATCHERA DC    400X'00'\n*                                                                     *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DSECTS USED BY THE PROGRAM                                   *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nSEARCH   DSECT\nSRCHOFF  DC    H'0'\nSRCHRNGE DC    H'0'\nSRCHLNG  DC    H'0'\nSRCHOPTN DC    X'00'\nSRCHFUNC DC    X'00'\nSRCHCTL  EQU   *-SRCHOFF\nSRCHDATA EQU   *\n*\nINBUF    DSECT\n         PRINT NOGEN\nIHADCB   DCBD  DSORG=PS,DEVD=DA\nMAPCVT   DSECT\n         CVT   SYS=AOS1\n         PRINT GEN\n         REGS\nEQ       EQU   X'80'\nNE       EQU   X'70'\nLT       EQU   X'40'\nGT       EQU   X'20'\nLE       EQU   EQ+LT\nGE       EQU   EQ+GT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDBS$DDF": {"ttr": 5129, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VDBS$DDF CSECT\n         ENTRY DDFIND\nDDFIND   EQU   *\n         USING VDBS$DDF,15\n         STM   14,12,12(13)\n         ST    13,SAVEAREA+4\n         LR    12,13\n         CNOP  0,4\n         BAL   13,DDFINDS\nSAVEAREA DC    18A(0)\n         USING SAVEAREA,13\n         DROP  15\nDDFINDS  EQU   *\n         ST    13,8(12)\n         ST    14,DDRETURN\n         MVC   PARMS,0(1)              DDNAME,TIOTADDR\n         EXTRACT  TIOT,FIELDS=TIOT\n         SR    4,4\n         L     3,TIOT\n         LA    3,24(3)\n         L     5,PARMDD                DDNAME GIVEN\nDDLOOP   CLC   4(8,3),0(5)             IS THIS DDNAME\n         BE    DDFOUND                    YES\n         IC    4,0(3)\n         LTR   4,4\n         BZ    DDERROR                 NOT FOUND--EXIT\n         LA    3,0(3,4)\n         B     DDLOOP\nDDFOUND  EQU   *\n         L     5,PARMTIOT\n         ST    3,0(5)\n         SR    15,15\nDDEXIT   EQU   *\n         L     13,SAVEAREA+4\n         RETURN (14,12),T,RC=(15)\n*************************************************************\nDDERROR  EQU   *\n         LA    15,4\n         B     DDEXIT\n*************************************************************\n*\nTIOT     DC    A(0)\n*\nDDRETURN DC    A(0)\n*\nPARMS    DS    0CL8\nPARMDD   DC    A(0)\nPARMTIOT DC    A(0)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDBS$HEX": {"ttr": 5131, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VDBS$HEX CSECT\n         ENTRY HEXDUMP\n         ENTRY HEXDUMP2\n         ENTRY HEXDCB\n***********************************************************************\nHEXDUMP  EQU   *\n         USING HEXDUMP,15\n         B     DUMP1EP\n         DC    AL1(L'DUMP1LIT)\nDUMP1LIT DC    C'HEXDUMP  - DUMP STORAGE IN HEX &SYSDATE &SYSTIME'\nDUMP1EP  EQU   *\n         MVI   BRVECTOR,4\n         LA    15,HEXME\n         BR    15\n*                                                                     *\nHEXDUMP2 EQU   *\n         USING HEXDUMP2,15\n         B     DUMP2EP\n         DC    AL1(L'DUMP2LIT)\nDUMP2LIT DC    C'HEXDUMP2 - DUMP STORAGE IN HEX &SYSDATE &SYSTIME'\nDUMP2EP  EQU   *\n         MVI   BRVECTOR,8\n         LA    15,HEXME\n         BR    15\n***********************************************************************\n***********************************************************************\n*\n*        DUMP FORMATTING ROUTINE\n***********************************************************************\n*        R1-> A(TYPE,START,END,HDNG,DETAIL)---HEXDUMP                 *\n*  OR    R1-> A(TYPE,START,LNGTH,HDNG,DETAIL)---HEXDUMP2              *\n*        A(TYPE)->=C'RELO' PRINTS DATA RELATIVE TO 0                  *\n*        A(TYPE)->=C'DATA' WILL PRINT 132 BYTES AS IS FROM START      *\n*        A(TYPE)->=C'PAGE' WILL PAGE EJECT ON NEXT CALL               *\n*        A(TYPE)->=C'CLOS' WILL CLOSE HEXDUMP DCB                     *\n*        TYPE=ANYTHING ELSE WILL PRINT ACTUAL ADDRESS                 *\n*    HDNG AND DETAIL ARE OPTIONAL AND IF SUPPLIED WILL BE USED        *\n*        TO PRINT A HEADING AND/OR DETAIL LINE EACH 132 BYTES         *\n*    ENTRY HEXDUMP2 IS USED FOR SECOND PARM LIST WHERE LNGTH IS       *\n*        ADDRESS OF A FULLWORD CONTAINING BINARY LNGTH OF BYTES TO DUM*\n***********************************************************************\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n         EJECT\n***********************************************************************\n         USING HEXME,15\nHEXME    EQU   *\n         SAVE  (14,12)\n         ST    13,SAVEAREA+4\n         LR    12,13\n         CNOP  0,4\n         BAL   13,HEXXER\nSAVEAREA DC    18A(0)\n         DROP  15\n         USING SAVEAREA,13\nHEXXER   EQU   *\n         ST    13,8(12)\nHEXDDNOP NOP   HEXEXIT                 B IF BAD OPEN\n         XC    PARMS,PARMS             CLEAR\n         ICM   R3,7,1(R1)              A(TYPE)\n         STCM  R3,7,PARMTYP+1          POST\n         TM    0(R1),X'80'             LAST PARM\n         BNZ   HEXEOPRM                YES\n         ICM   R3,7,5(R1)              A(START)\n         STCM  R3,7,PARMSTRT+1         POST\n         TM    4(R1),X'80'             LAST PARM\n         BNZ   HEXEOPRM                YES\n         ICM   R3,7,9(R1)              A(END)\n         STCM  R3,7,PARMEND+1          POST\n         TM    8(R1),X'80'             LAST PARM\n         BNZ   HEXEOPRM                YES\n         ICM   R3,7,13(R1)             A(HEADING)\n         STCM  R3,7,PARMHDNG+1         POST\n         TM    12(R1),X'80'            LAST PARM\n         BNZ   HEXEOPRM                YES\n         ICM   R3,7,17(R1)             A(DETAIL)\n         STCM  R3,7,PARMDTL+1          POST\nHEXEOPRM EQU   *\n         L     3,PARMTYP               TYPE\n         CLC   0(4,3),=CL4'CLOS'       CLOSE IT\n         BE    HEXCLOSE                   YES\n         CLC   0(4,3),=CL4'PAGE'       PAGE EJECT\n         BE    HEXPAGE                    YES\n*\n*        BRVECTOR = 4 FOR HEXDUMP\n*        BRVECTOR = 8 FOR HEXDUMP2\n*\n         LA    1,0\nBRVECTOR EQU   *-1\n         B     *(1)\n         B     HEXCHK1\n         L     5,PARMEND               A(LENGTH)\n         L     5,0(R5)                 LENGTH\n         A     5,PARMSTRT              + START = END+1\n         BCTR  5,0                     NOW END\n         ST    5,PARMEND               POST\nHEXCHK1  EQU   *\n         L     R4,PARMSTRT\n         L     R5,PARMEND\n         CR    4,5\n         BNH   HEXOK                   NO MISTAKE IN START/END\n         LA    5,31(4)                 SET FOR 1 LINE\nHEXOK    EQU   *\n         CLC   0(4,3),=CL4'ASIS'       ASIS ONLY\n         BE    HEXFIRST                   YES\n         OI    HEXRELO+1,X'F0'\n         CLC   0(4,3),=CL4'RELO'\n         BNE   HEXFIRST\n         NI    HEXRELO+1,X'0F'\n***********************************************************************\n         EJECT\n***********************************************************************\nHEXFIRST EQU   *\n         NOP   HEXMORE\n         OI    *-3,X'F0'\n         LA    1,DDPARM\n         L     15,=V(VDBS$DDF)\n         BALR  14,15\n         B     *+4(15)                 CHECK RETURN CODE\n         B     *+8                     0 -- OK\n         B     NODD                    4 -- NOT FOUND\n         OPEN  (LISTDCB,(OUTPUT))      OPEN LISTING FILE\n         TIME  DEC\n         ST    1,FULL\n         UNPK  YYDDD,FULL\n         OI    YYDDD+4,X'F0'\n         MVC   PRNTYY,YEAR\n         MVC   PRNTDDD,DAY\n         ST    0,FULL\n         UNPK  HHMMSS,FULL\n         MVC   PRNTHH,HOURS\n         MVC   PRNTMM,MINUTES\n         MVC   PRNTSS,SECONDS\n         TM    LISTDCB+(DCBOFLGS-IHADCB),X'10'  IS IT OPEN\n         BO    HEXMORE\nNODD     EQU   *\n         OI    HEXDDNOP+1,X'F0'\n         B     HEXEXIT\nHEXCLOSE EQU   *\n         TM    LISTDCB+(DCBOFLGS-IHADCB),X'10'  WAS IT OPEN\n         BZ    HEXEXIT                    NO\n         MVC   LINE+1(L'ENDMSG),ENDMSG\n         BAL   14,PRINT\n         CLOSE (LISTDCB)\n         NI    HEXFIRST+1,X'0F'\n         B     HEXEXIT\nHEXMORE  EQU   *\n         MVI   LINE,C'0'\n         L     2,PARMDTL\n         LTR   R2,R2\n         BZ    HEXDO\n         MVC   LINE+1(132),0(2)        THE DETAIL LINE\n         BAL   14,PRINT\nHEXDO    EQU   *\n         L     2,PARMTYP\n         CLC   0(4,2),=CL4'ASIS'       IS IT ASIS\n         BNE   HEXTYPE\n         L     2,PARMSTRT\n         MVC   LINE+1(132),0(2)\n         BAL   14,PRINT\n         B     HEXEXIT\nHEXTYPE  EQU   *\n         BAL   14,HEXXIT\nHEXEXIT  EQU   *\n         L     R13,SAVEAREA+4\n         RETURN                (14,12),,RC=0\nHEXPAGE  EQU   *\n         ZAP   LINECTR,=P'999'\n         B     HEXEXIT\n********************************************************************\n         EJECT\n**************************************************************\nHEXXIT   EQU   *\n         ST    14,HEXR14\n         SR    3,3\n         LA    R6,3                MAX SIZE INDEX INTO LENGTHS TABLE. L\n         LA    R10,15              MASK FOR SELECTING BLANK POSITION. L\nHEXNEXT  EQU   *\n         ST    R4,DUMPADDR         WHERE DUMP IS AT NOW\nHEXRELO  B     HEXACT\n         ST    3,DUMPADDR\nHEXACT   EQU   *\n         UNPK  LINE+1(7),DUMPADDR+1(4)   DUMP ADDRESS\n         TR    LINE+1(6),CHAR-240      INTO PRINTABLE\n         MVI   LINE+7,C' '\n         LA    9,LINE+88\n         LA    8,LINE+10\nHEXLOOP  EQU   *\n         LR    R7,R5              BOTTOM OF DUMP AREA LESS TOP        L\n         SR    R7,R4                GIVES SIZE LEFT TO DUMP.          L\n         CR    R7,R6              LESS THAN OR EQUAL TO THREE?        L\n         BNH   HEXNREND           YES, DUMP ONLY THAT MANY BYTES + 1  L\n         LR    R7,R6                ELSE DUMP NEXT 4 (3 + 1) BYTES.   L\nHEXNREND EQU   *                  R7 * 4 INDEXES INTO PROPER LENGTHS  L\n         SLA   R7,2                 FOR THE # OF BYTES WE'LL DUMP.    L\n         L     R7,LENGTHS(R7)     LOAD THOSE LENGTHS.                 L\n         EX    R7,GETTER1         MOVE THE BYTES INLINE.              L\n         SRL   R7,8                 (NEXT LENGTH).                    L\n         EX    R7,UNPKER          UNPACK THEM.                        L\n         SRL   R7,8                 (NEXT LENGTH).                    L\n         LR    R11,R7             UNPACK HAS CREATED A GARBAGE BYTE   L\n         NR    R11,R10              JUST AFTER FIELD.  EXTRACT ITS    L\n         AR    R11,R8               POSITION AND REPLACE IT WITH A    L\n         MVI   1(R11),C' '          BLANK.                            L\n         EX    R7,TRNSLER1        CONVERT THE BYTES TO HEXADECIMAL.   L\n         SRL   R7,8                 (NEXT LENGTH).                    L\n         EX    R7,GETTER2         NOW COPY THE BYTES TO THE RIGHT     L\n         EX    R7,TRNSLER2          AND CONVERT THEM TO CHARACTER.    L\n         LA    R4,4(4)            ASSUME 4 BYTES JUST PROCESSED;      L\n         CR    4,5                  WHETHER 4 OR LESS, WE'LL END UP   L\n         BNH   HEXINCR              HERE IF WE REACH THE BOTTOM OF    L\n         BAL   14,PRINTHEX          THE DUMP AREA.                    L\n         L     14,HEXR14          SO PRINT THE LAST LINE              L\n         BR    14                   AND TRUNDLE ON BACK.              L\n*                                                                     *\nHEXINCR  EQU   *         MORE TO PRINT (SO WE MUST HAVE PROCESSED 4). L\n         LA    3,4(3)             SO BOOST THE RELO POINTER, THE HEX\n         LA    8,9(8)               POINTER AND THE CHARACTER POINTER L\n         LA    9,4(9)               BY '4 BYTES PROCESSED'.\n*                                                                     *\n         C     8,=A(LINE+46)      MIDDLE OF THE LINE?\n         BNE   HEXEND\n         LA    8,3(8)             YEP -- SET UP BLANK COLUMNS.\n         B     HEXLOOP                                                L\nHEXEND   C     8,=A(LINE+84)      HOW ABOUT THE END OF THE LINE?\n         BL    HEXLOOP            NAH -- JUST KEEP ON DUMPING.        L\n*                                                                     *\n         BAL   14,PRINTHEX        BUT IF SO, PRINT THE LINE\n         B     HEXNEXT              AND SET UP A NEW ONE.             L\n***********************************************************************\n         EJECT\n***********************************************************************\nPRINTR14 DC    A(0)\n*                                                                     *\nPRINTHEX EQU   *\n         MVI   LINE+87,SIDES\n         MVI   LINE+120,SIDES\nPRINT    EQU   *\n         ST    14,PRINTR14\n         CLI   LINE,C'0'\n         BNE   PRINT2\n         AP    LINECTR,=P'1'\nPRINT2   EQU   *\n         CP    LINECTR,=P'60'\n         BL    PRINTIT\n         MVI   LINE,C'0'\n         ZAP   LINECTR,=P'2'\n         AP    PAGE,=P'1'\n         MVC   PRNTPAGE,=XL6'402020202120'\n         ED    PRNTPAGE,PAGE\n         PUT   LISTDCB,PRNTHDNG\n         L     2,PARMHDNG\n         LTR   2,2\n         BZ    PRINTIT\n         MVC   HEADING+1(132),0(2)\n         PUT   LISTDCB,HEADING\n         AP    LINECTR,=P'1'\n         MVI   LINE,C'0'\nPRINTIT  EQU   *\n         PUT   LISTDCB,LINE\n         AP    LINECTR,=P'1'\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         L     14,PRINTR14\n         BR    14\n***********************************************************************\n         EJECT\n***********************************************************************\nLINE     DC    CL133' '\n*\nHEADING  DC    CL133' '\n*                                                                     *\nENDMSG DC C'     ****************  END OF HEXDUMP  *****************'\n*\nPRNTHDNG DC    CL133'1'\n         ORG   PRNTHDNG+94\n         DC    C'DATE '\nPRNTYY   DC    CL2' '\n         DC    C'.'\nPRNTDDD  DC    CL3' '\n         DC    C' TIME '\nPRNTHH   DC    CL2' '\n         DC    C'.'\nPRNTMM   DC    CL2' '\n         DC    C'.'\nPRNTSS   DC    CL2' '\n         DC    CL3' '\n         DC    C' PAGE'\nPRNTPAGE DC    CL6' '\n         ORG\n*                                                                     *\n*\nCHAR     DC   C'0123456789ABCDEF'\nGRAPHIC  DC    256C'.'\n         ORG   GRAPHIC+C' '\n         DC    C' '\n         ORG   GRAPHIC+C'<'\n         DC    C'<(+'\n         ORG   GRAPHIC+C'$'\n         DC    C'$*);'\n         ORG   GRAPHIC+C'-'\n         DC    C'-/'\n         ORG   GRAPHIC+C','\n         DC    C','\n         ORG   GRAPHIC+C'>'\n         DC    C'>'\n         ORG   GRAPHIC+C''''\n         DC    C'''=\"'\n         ORG   GRAPHIC+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   GRAPHIC+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   GRAPHIC+C'S'\n         DC    C'STUVWXYZ'\n         ORG   GRAPHIC+C'0'\n         DC    C'0123456789'\n         ORG\nDUMPADDR DC    F'0'\n         DS    0F\nPARMS    DS    0CL20\nPARMTYP  DC    A(0)\nPARMSTRT DC    A(0)\nPARMEND  DC    A(0)\nPARMHDNG DC    A(0)\nPARMDTL  DC    A(0)\n*************************************************************\n         PRINT NOGEN\nSIDES    EQU   C'*'\nHEXR14   DC    A(0)\nFULL     DC    A(0)\nPAGE     DC    PL3'0'\n*                                                                     *\nYYDDD    DS    0CL5\nYEAR     DC    CL2' '\nDAY      DC    CL3' '\n*                                                                     *\nHHMMSS   DS    0CL7\nHOURS    DC    CL2' '\nMINUTES  DC    CL2' '\nSECONDS  DC    CL2' '\n         DC    C' '\nLINECTR  DC    PL3'90'\n*                                                                     *\n         DS    0F                                                     L\nLENGTHS  DC    X'00012100'        LENGTH TABLE FOR SNARFING BYTES TO  L\n         DC    X'01034201'          ROCESS AND DUMP. LENGTHS CONCAT-  L\n         DC    X'02056302'          END TO END AND SHIFTED FOR USE IN L\n         DC    X'03078403'          EX'ED INSTRUCTIONS.               L\n         DS    0H                                                     L\nGETTER1  MVC   0(0,8),0(4)        MOVES BYTES INTO DUMP LINE (HEX).   L\nUNPKER   UNPK  0(0,8),0(0,8)      UNPACKS THOSE BYTES INPLACE.        L\nTRNSLER1 TR    0(0,8),CHAR-C'0'   TRANSLATES THEM TO HEX.             L\nGETTER2  MVC   0(0,9),0(4)        MOVES BYTES INTO DUMP LINE (CHAR).  L\nTRNSLER2 TR    0(0,9),GRAPHIC     TRANSLATES THEM TO CHARACTERS.      L\n         DS    0D\nHEXDCB   EQU   *\nLISTDCB  DCB   DDNAME=HEXDUMP,DSORG=PS,MACRF=PM,                       X\n               RECFM=FBA,LRECL=133,EXLST=EXLSTPRT\nDDPARM   DC    A(LISTDCB+40)\n         DC    A(WORKTIOT)\n         DC    A(NODD)\nWORKTIOT DC    A(0)\n*\n         LTORG\n*\nEXLSTPRT DC    0F'0',X'85',AL3(EXITPRT)\nEXITPRT  EQU   *\n         USING *,15\n         USING IHADCB,1\n         OC    DCBBLKSI,DCBBLKSI\n         BNZR  14\n         MVC   DCBBLKSI,DCBLRECL\n         BR    14\n         DROP  1,15\n*\n         PRINT NOGEN\nIHADCB   DCBD  DSORG=PS,DEVD=DA\n         END\n*\n         LTORG\n*\nEXLSTPRT DC    0F'0',X'85',AL3(EXITPRT)\nEXITPRT  EQU   *\n         USING *,15\n         OC    DCBBLKSI,DCBBLKSI\n         BNZR  14\n         MVC   DCBBLKSI,DCBLRECL\n         BR    14\n         DROP  1,15\n*\n         PRINT NOGEN\nIHADCB   DCBD  DSORG=PS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XPDS": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "00000010         PROC 1 DSNAME VOL(0) DISP(SHR) PRINT(0)\n00000012         FREE F(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n00000030CONTROL  MAIN\n00000035         SET &SYSP = &STR(DA(*))   /* PRINT DEFAULT TO TUBE */\n00000050         SET &NULL =            /* SET TO NULL */\n00000060         SET &XVOL = &NULL    /* SET TO NULL */\n00000080         SET &ATTN = N  /* NO ATTENTION ALLOWED */\n00000090         /*                                          */\n00000100ATTN     +\n00000110          DO\n00000120REWRT:     IF &ATTN = Y THEN +\n00000130            DO\n00000140             WRITE *****************************************************\n00000150             WRITE *\n00000160             WRITE *  YOU KEYED IN AN ATTENTION\n00000170             WRITE *  RE-EXECUTE PDSPDS FOR &DSNAME ????\n00000180             WRITE *  REPLY Y OR N\n00000190             WRITE *\n00000200             WRITE *****************************************************\n00000210             READ &ANS\n00000220            END\n00000230            ELSE +\n00000240             DO\n00000250              WRITE ****************************\n00000260              WRITE *                          *\n00000270              WRITE *  IGNORING YOUR ATTENTION *\n00000280              WRITE *                          *\n00000290              WRITE ****************************\n00000300              &NULL\n00000310              RETURN\n00000320             END\n00000330             IF &ANS = Y THEN +\n00000340            DO\n00000350              WRITE ******************\n00000360              WRITE * I'M RESTARTING *\n00000370              WRITE ******************\n00000380              GOTO REX\n00000390            END\n00000400            IF &ANS = N THEN GOTO XFA\n00000410            GOTO REWRT  /* BAD REPLY */\n00000420         END\n00000430         /*                                                   */\n00000440         IF &PRINT = SYSOUT THEN SET &SYSP = &PRINT\n00000450         IF &VOL NE 0 THEN SET &XVOL = &STR(VOLUME(&VOL))\n00000510         ALLOC F(SYSIN) DA(*)\n00000520         ALLOC F(SYSPRINT) &SYSP\n00000530         ALLOC F(SYSUT1) DA(&DSNAME.) &DISP &XVOL\n00000535         ALLOC F(SYSUT2) DA(&DSNAME.) &DISP &XVOL\n00000540         SET &ATTN = Y\n00000550REX:     /*      */+\n00000560         CALL 'SYS1.USERLIB(PDSPDS)'\n00000570XFA:     /*      */+\n00000580         FREE F(SYSIN,SYSPRINT,SYSUT1,SYSUT2)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT040/FILE040.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT040", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}