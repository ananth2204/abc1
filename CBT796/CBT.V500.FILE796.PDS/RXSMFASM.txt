//RXSMFASM JOB (ACCT#),'LINDY M.',
//         MSGLEVEL=(1,1),MSGCLASS=X,
//         NOTIFY=&SYSUID
//*
//*********************************************************************
//* ASSEMBLE AND LINK REXXSMF
//*********************************************************************
//*
//ASMLK EXEC HLASMCL,PARM.C='OBJECT,NODECK,XREF(SHORT),TEST,LIBMAC',
//      PARM.L='LIST,LET,RENT,XREF,NCAL,AMODE(31)'
//C.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//           DD DSN=SYS1.MODGEN,DISP=SHR
//C.SYSIN    DD *
*
*
* A REXX function to write SMF records
*
*
*  Basic Syntax of call:
*
*      rc = REXXSMF(type,text)
* or:
*      CALL 'REXXSMF' type,text
*
* Example 1 -
*
*  /* Rexx */
*  smftyp = '189'
*  smftxt = userid()' accessing application A at 'date(e) time()
*  rc = REXXSMF(smftyp,smftxt)
*  .
*  .
*  .
*  exit
*
*
* Example 2 -
*
*  /* Rexx */
*  .
*  .
*  call 'REXXSMF '172','User 'userid()' exiting application A at' ,
*     date(e) time()
*  .
*  .
*  Say 'Return code is' RESULT
*  .
*  exit
*                                                                  @LM
*                                                                  @LM
* Example 3 -                                                      @LM
*   An example showing possible return codes:                      @LM
*                                                                  @LM
* smfrc = rexxsmf('200','This is some SMF data')                   @LM
* select                                                           @LM
*   when smfrc=0                                                   @LM
*     then say 'Successful call'                                   @LM
*   when smfrc=157                                                 @LM
*     then say 'EMVSERR: SMF not recording'                        @LM
*   when smfrc=121                                                 @LM
*     then say 'EINVAL: Invalid call to BPX1SMF'                   @LM
*   when smfrc=132                                                 @LM
*     then say 'ENOMEM: Not enought storage available'             @LM
*   when smfrc=139                                                 @LM
*     then say 'EPERM: No access to BPX.SMF Facility class'        @LM
*   otherwise nop                                                  @LM
* end                                                              @LM
*
*
*
*
REXXSMF TITLE 'REXX FUNCTION TO WRITE SMF RECORDS'
***********************************************************************
***      Thit is a program that will execute as a rexx              ***
***      function under TSO/E Rexx and will cut SMF rexords.        ***
***      The function accepts 2 arguments:-                         ***
***       1. The SMF record type number.                            ***
***       2. The SMF record text.                                   ***
***   eg                                                            ***
***       CALL 'REXXSMF' '185','Test record data'                   ***
***   or                                                            ***
***       XXX = REXXSMF('185','Test record data')                   ***
***                                                                 ***
***   The parameters can be literal strings or valid Rexx symbols   ***
***   that have been previously set.                                ***
***   SMF types of 128 or below will cause a function error.        ***
***   The function does not return any data other than the return   ***
***   code from the SMF routine. This will be set into 'XXX' if     ***
***   called as a function, or the Rexx special variable 'RESULT'   ***
***   if 'CALL'ed as a subroutine.                                  ***
***   Iif one or both parameters are omitted the function will      ***
***   return Rexx error 40 - INVALID CALL TO ROUTINE, and will      ***
***   set a result of 'ERROR'.                                      ***
***   Possible RC values from BPX1SMF are:                         @LM
***      X'9D' EMVSERR - SMF record not bing recorded              @LM
***      X'79' EINVAL  - Bad call to BPX1SMF                       @LM
***      X'84' ENOMEM  - Not enough storage available              @LM
***      X'8B' EPERM   - No access to BPX.SMF FACILITY class       @LM
***                                                                 ***
***                                                                 ***
***   The original version of this program used a "MAGIC" SVC to   @LM*
***   get into an authorized state.                                @LM*
***                                                                @LM*
***   This Rexx function uses the USS assembler callable service   @LM*
***   BPX1SMF to write the record.  It does not need to be run     @LM*
***   authorized.  However to run the user has to be given access  @LM*
***   by being permitted ot the BPX.SMF resource in the RACF       @LM*
***   FACILITY class.                                              @LM*
***                                                                @LM*
***   Change Log:                                                  @LM*
***   Apr 21, 2008 Converted "magic" SVC to BPX1SMF.               @LM*
***   Lindy Mayfield                                               @LM*
***   SAS Institute                                                @LM*
***   lindy.mayfield@ssf.sas.com                                   @LM*
***                                                                @LM*
***   Note: Full credit is given to the original author of this    @LM*
***         utility. Unfortunately the original author is unknown. @LM*
***         As mentioned above, I simply changed this program to   @LM*
***         use BPX1SMF to write the SMF records.                  @LM*
***                                                                 ***
***********************************************************************
REXXSMF CSECT
REXXSMF AMODE 31
REXXSMF RMODE ANY
         STM   R14,R12,12(R13)         * SAVE REGS
         LR    R12,R15                 *R12 --> BASE REGISTER
         USING REXXSMF,R12
         LR    R10,R0                  *R10 --> A(ENVIRONMENT BLOCK)
         USING ENVBLOCK,R10
         LR    R11,R1                  *R11 --> A(PARAM LIST (EFPL))
         USING EFPL,R11
         GETMAIN RU,LV=DYNLEN,LOC=ANY  *** OBTAIN DYNAMIC STORAGE
         LR    R2,R1                   * POINT AT WORKAREA
         L     R3,=A(DYNLEN)           * SET ITS LENGTH
         LA    R4,0                    * SET DUMMY FROM ADDRESS
         LA    R5,0                    * SET DUMMY LENGTH
         MVCL  R2,R4                   * BLANK OUT THE AREA
         ST    R13,4(R1)               * SAVE R13
         ST    R1,8(R13)               * BACK-CHAIN SAVE AREAS
         LR    R13,R1                  *R13 --> A(REG SAVE/DYNAM AREA)
         USING DYNAM,R13
         L     R9,ENVBLOCK_IRXEXTE     *R9 --> A(EXTERNAL EP TABLE)
         USING IRXEXTE,R9
         LA    R8,SMFAREA              *R8 --> AREA TO BUILD SMF REC
         USING SMFSMF,R8
         ST    R8,BUFA                 Store address for BPX      @LM
***      CHECK THE PARAMETER LIST FOR VALID ARGUMENTS               ***
***      AND STORE VALUES IN WORKING STORAGE                        ***
***      FIRST CHECK FOR SMF TYPE VALUE AND STORE                   ***
         L     R6,EFPLARG              *R6 --> A(ARGUMENT TABLE)
         USING ARGTABLE_ENTRY,R6
         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?
         BE    ERROR                   * --> YES - EXIT RC 40
*                                      (INVALID CALL TO ROUTINE)
         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)
         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)
         LA    R4,SMFTYP                    *R4 --> A(ARGUMENT)
         BCTR  R1,0                    * DECREASE FOR MOVE
         EX    R1,MOVEARG              * SAVE ARGUMENT
***      NOW CHECK FOR SMF DATA, ENSURE NOT > 256 CHARS AND STORE   ***
         LA    R6,ARGTABLE_NEXT        *R6 --> A(NEXT ARGUMENT)
         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OR ARGS?
         BE    ERROR                   * --> YES - EXIT RC 40
*                                      (INVALID CALL TO ROUTINE)
         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)
         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)
         CH    R1,=H'256'              * LENGTH <= 256 ?
         BH    ERROR                   * --> NO - EXIT
         STH   R1,SMFSLEN              * SAVE DATA LENGTH IN SMF AREA
         LA    R4,SMFDATA              *R4 --> A(ARGUMENT)
         BCTR  R1,0                    * DECREASE LENGTH FOR MOVE
         EX    R1,MOVEARG              * --> SAVE ARGUMENT
         LA    R6,8(R6)                *R6 --> A(NEXT ARGUMENT)
         B     ARGOK                   * SKIP EXECUTE STATEMENT
MOVEARG  MVC   0(0,R4),0(R2)           * EXECUTABLE MOVE
***      ARGUMENTS STORED - BUILD SMF RECORD                        ***
ARGOK    DS    0H
         PACK  PTEMP(8),SMFTYP         * PACK PASSED SMF RECORD TYPE
         CVB   R5,PTEMP                *R5 - RECORD TYPE (HEX)
         ST    R5,SMF_TYPE             * SAVE TYPE FOR BPX         @LM
         STCM  R5,B'0001',SMFSTYPE     * SAVE SINGLE BYTE TYPE
         CLI   SMFSTYPE,X'80'          * TYPE 128 OR BELOW?
         BH    SMFBLD                  * --> NO ? - OK
         B     ERROR                   * --> YES? - EXIT
* BUILD SMF RECORD FIXED ENTRIES (EXCEPT RECORD LENGTH)
SMFBLD   EQU   *
         MVI   SMFSFLAG,X'00'           * SET SMF FLAG
         MVC   SMFSFIL,=H'0'            * SECOND HALF WORD TO 0
* EXTRACT CURRENT DATE FROM CVT
         USING CVT,R0                   * ADDRESS CVT BASE
         L     R3,CVTPTR                * GET THE CVT
         DROP  R0                                                  @LM
         USING CVT,R3                   * AND MAP
         L     R3,CVTDATE               *R3 --> DATE(PACKED)
         DROP  R3
         ST    R3,SMFSDATE              * SAVE IN SMF AREA
* EXTRACT SMFID                                                    @LM
         USING CVT,R0                   * ADDRESS CVT BASE         @LM
         L     R3,CVTPTR                * GET THE CVT              @LM
         DROP  R0                                                  @LM
         USING CVT,R3                   * AND MAP                  @LM
         L     R3,CVTSMCA               * ADDR OF SMCA             @LM
         USING SMCABASE,R3                                         @LM
         MVC   SMFSYSID,SMCASID         * MOVE SMFID               @LM
         DROP  R3                                                  @LM
* EXTRACT CURRENT TIME IN BINARY
         LA    R3,TIMEADDR              *R3 --> A(TIME SAVE AREA)
         TIME  MIC,(3)                  * GET TIME
         LM    R2,R3,TIMEADDR           *R2 - TIME, R3 - DATE
         SRDL  R2,12                    *SHIFT FOR DIVIDE
         L     R1,=AL4(10000)           *SET DIVISOR
         DR    R2,R1                    *CONVERT TO HUNDREDTHS
         ST    R3,SMFSTIME              * SAVE IN SMF
         LH    R14,SMFSLEN              *R14 - DATA LENGTH
         AH    R14,=AL2(SMFLEN)         *ADD IN LENGTH OF HEADER
         STH   R14,SMFSLEN              *STORE TOTAL LENGTH
         ST    R1,BUFLENA               * STORE LENGTH FOR BPX     @LM
*
* CHECK IF SMF RECORDING TURNED ON FOR THIS RECORD                @LM
         LOAD  EP=BPX1SMF           USS Callable service          @LM
         ST    R0,BPX_MOD           Save address                  @LM
         L     R15,BPX_MOD                                        @LM
         CALL  (15),                smf_record                    @LM  +
               (SMF_TYPE,           SMF record type               @LM  +
               =F'0',               SMF record subtype            @LM  +
               =F'0',               SMF record length             @LM  +
               =F'0',               SMF record address set to zero@LM  +
               BPXRETVAL,           Return value: 0 or -1         @LM  +
               BPXRETCD,            Return code                   @LM  +
               BPXRSNCD),           Reason code                   @LM  +
               VL,MF=(E,PLIST)      ------------------------------@LM
         DELETE EP=BPX1SMF                                        @LM
         ICM   R15,B'1111',BPXRETVAL   Test return value          @LM
         BNZ   ALLOK                Not recording or error, quit  @LM
*
* WRITE RECORD TO SMF                                             @LM
*                                                                 @LM
         LOAD  EP=BPX1SMF           USS Callable service          @LM
         L     R15,BPX_MOD                                        @LM
         MVC   SMF_SUBTYPE,=F'0'    Set SMF record subtype        @LM
         CALL  (15),                smf_record                    @LM  +
               (SMF_TYPE,           SMF record type               @LM  +
               SMF_SUBTYPE,         SMF record subtype            @LM  +
               BUFLENA,             SMF record length             @LM  +
               BUFA,                SMF record address            @LM  +
               BPXRETVAL,           Return value: 0 or -1         @LM  +
               BPXRETCD,            Return code                   @LM  +
               BPXRSNCD),           Reason code                   @LM  +
               VL,MF=(E,PLIST)      ----------------------------- @LM
         DELETE EP=BPX1SMF                                        @LM
         ICM   R15,B'1111',BPXRETVAL   Test return value          @LM
         BNZ   ALLOK                Not recording or error, quit  @LM
*
*        ALL OK - SO SET SMF RETURN CODE AS 'RC' VARIABLE &
*        FUNCTION RESULT.
ALLOK    DS    0H
         L     R15,BPXRETCD         * RETRIEVE BPX RETURN CODE      @LM
*        L     R15,SMFRC            * RETRIEVE SMF RETURN CODE      @LM
         CVD   R15,PTEMP            * CONVERT TO PACKED
         MVC   RETCODE,=X'40212020' * SET EDIT MASK
         ED    RETCODE,PTEMP+6      * CONVERT TO CHARACTER
*        INITIALISE IRXEXCOM PARAMETER AREA
         LA    R0,COMID             *R0 --> A(IRXEXCOM ID)
         ST    R0,COMAREA           * SAVE ADDRESS
         LA    R0,COMDUMMY          *R0 --> NOT USED PARM
         ST    R0,COMAREA+4         * SAVE ADDRESS
         ST    R0,COMAREA+8         * AND AGAIN (PARM2&3 MUST BE SAME)
         LA    R0,COMSHVB           *R0 --> A(SHVBLOCK AREA)
         ST    R0,COMAREA+12        * SAVE ADDRESS
         LA    R0,COMRET            *R0 --> A(RETURN CODE AREA)
         ST    R0,COMAREA+16        * SAVE ADDRESS
         OI    COMAREA+16,X'80'     * SET HIGH BIT ON FOR LIST END
         MVC   COMID,=CL8'IRXEXCOM'
*        BUILD IRXEXCOM PARAMETERS
         ST    R10,COMRET           *STORE ENVBLOCK ADDRESS (R10)
         LA    R6,COMSHVB           *R6 --> A(SHVBLOCK AREA)
         USING SHVBLOCK,R6
         XC    COMSHVB(SHVBLEN),COMSHVB * INITIALIZE SHVBLOCK
         XC    SHVNEXT,SHVNEXT          * RESET POINTER
         MVI   SHVCODE,C'S'          * SET FUNCTION CODE - 'SET'
         LA    R0,=C'RC'             *R0 --> A(VARIABLE NAME)
         ST    R0,SHVNAMA            * STORE IN SHVBLOCK
         MVC   SHVNAML,=A(2)         * STORE NAME LENGTH
         LA    R0,RETCODE            *R0 --> A(VARIABLE VALUE)
         ST    R0,SHVVALA            * STORE IN SHVBLOCK
         MVC   SHVVALL,=A(L'RETCODE) * STORE VALUE LENGTH
*        INVOKE IRXEXCOM TO SET VARIABLE
         LR    R0,R10                *R0 --> A(ENVBLOCK)
         LA    R1,COMAREA            *R1 --> A(PARM ADDR LIST)
         L     R15,IRXEXCOM          *R15 --> AIRXEXCOM) FROM IRXEXTE
         BALR  R14,R15               * CALL ROUTINE
         LTR   R15,R15               * SET OK ?
         BZ    SETOK                 * --> YES? - SKIP ABEND
         LA    R1,=CL4'IRXC'         * SET ERROR INDICATOR
         SLR   R0,R0                 * CLEAR R0
*        UNCOMMENT THE NEXT LINE TO ABEND WHEN THERE IS AN ERROR   @LM
*        EX    R0,*                  * FORCE DIAGNOSTIC ABEND      @LM
*        SET RETURN CODE VALUE AS FUNCTION RESULT
SETOK    EQU   *
         DROP  R6
         L     R6,EFPLEVAL
         L     R6,0(R6)              *R6 --> A(EVALUATION BLOCK)
         USING EVALBLOCK,R6
         MVC   EVALBLOCK_EVLEN,=A(L'RETCODE) * SET LENGTH
         MVC   EVALBLOCK_EVDATA(L'RETCODE),RETCODE * SET VALUE
         XR    R15,R15               * ZERO REXX RETURN CODE
         B     RETURN                * AND RETURN TO CALLER
*        IF FUNCTION ERROR - SET 'ERROR' AS FUNCTION RESULT,
*        AND REXX ERROR CODE 40 AS RETURN CODE
ERROR    DS    0H
         L     R6,EFPLEVAL
         L     R6,0(R6)              *R6 --> A(EVALUATION BLOCK)
         MVC   EVALBLOCK_EVLEN,=A(5) * SET LENGTH
         MVC   EVALBLOCK_EVDATA(5),=CL5'ERROR' * SET VALUE
         LA    R15,40  * SET RC=40 TO INDICATE INVALID FUNCTION CALL
         B     RETURN  * AND RETURN TO CALLER
***      RETURN TO CALLER                                           ***
RETURN   LR    R1,R13                  *R1 --> A(DYNAMIC AREA)
         L     R13,4(R13)              * RESTORED BACK POINTER
         LR    R2,R15                  * SAVE R15 AROUND FREEMAIN
         FREEMAIN RU,A=(R1),LV=DYNLEN  * RELEASE DYNAMIC STORAGE
         LR    R15,R2                  * RESTORE R15 FOR RETURN
         RETURN (14,12),RC=(15)        * RETURN TO CALLER
***      WORKING STORAGE ETC.                                       ***
         TITLE  'WORKING STORAGE / DSECTS'
         LTORG
*
DYNAM    DSECT                  * DYNAMIC WORK AREA STORAGE
SAVEAREA DS    9D               * REG SAVE AREA
SMFAREA  DS    CL330            * AREA FOR BUILD OF SMF REC
PTEMP    DS    PL8              * PACKED DECIMAL WORK AREA
SMFTYP   DS    CL3              * SMF TYPE (CHARACTER FROM ARG)
SMFRC    DS    F                * SAVE AREA FOR SMFEWTM RETURN CODE
RETCODE  DS    CL4              * OUTPUT RETURN CODE (CHARACTER)
STORSTAT DS    C                * APF STATUS INDICATOR
TIMEADDR DS    2F               * RETURN AREA FOR TIME MACRO
***      IRXEXCOM PARAMETER AREA                                    ***
COMAREA  DS    5A               * PARAMETER ADDRESS LIST
COMID    DS    CL8              * IRXEXCOM ID - C'IRXEXCOM'
COMDUMMY DS    A                * NOT USED
COMSHVB  DS    (SHVBLEN)X       * IRXEXCOM SHVBLOCK (LENGTH FROM DSECT)
COMRET   DS    A                * IRXECOM RC
         DS    0D
***      BPX1SMF PARMS                                             @LM
SMF_TYPE     DS    F               SMF record type                 @LM
SMF_SUBTYPE  DS    F               SMF record subtype              @LM
BUFLENA      DS    F               SMF record length               @LM
BUFA         DS    A               SMF record address              @LM
BPXRETVAL    DS    F               Return value: 0 or -1           @LM
BPXRETCD     DS    F               Return code                     @LM
BPXRSNCD     DS    F               Reason code                     @LM
*                                                                  @LM
PLIST        DS   13A              Maximum number of parms         @LM
BPX_MOD      DS   A                Address of BPX1SMF
DYNLEN   EQU   *-DYNAM
***      SMF RECORD MAPPING                                         ***
SMFSMF   DSECT
SMFSLEN  DS    XL2              * LEN OF SMF RECORD
SMFSFIL  DS    XL2              * NOT USED
SMFSFLAG DS    XL1              * SMF RECORD FLAG
SMFSTYPE DS    XL1              * SMF RECORD TYPE
SMFSTIME DS    XL4              * CURRENT TIME (BINARY)
SMFSDATE DS    PL4              * CURRENT DATE (PACKED)
SMFSYSID DS    CL4              * SYSTEM NAME (IP01)
SMFLEN   EQU   *-SMFSMF    LENGTH OF RECORD HEADER
SMFDATA  DS    0C          RECORD
***      REQUIRED DSECTS FOR REXX AND SMF                           ***
         CVT   DSECT=YES,LIST=YES
         IRXEFPL
         IRXARGTB
         IRXEVALB
         IRXENVB
         IRXEXTE
         IRXSHVB
         IEESMCA
*********************************************************************
*                REGISTER EQUATES                                   *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
/*
//L.SYSLMOD  DD DISP=SHR,DSN=IBMUSER.LINDY.LOAD(REXXSMF)
//L.SYSIN    DD  *
 ENTRY REXXSMF
 NAME  REXXSMF(R)
/*
//*
