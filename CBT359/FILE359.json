{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011834000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1410864, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE359.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE359.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x16\\x0c'", "DS1TRBAL": "b'\\x02B'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xa4\\x00\\r\\x02\\xa6\\x00\\x05\\x00\\x17'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//***FILE XXX IS FROM SYNTEC IN CALIFORNIA AND CONTAINS A PDS       *\n//*           WITH THE FOLLOWING MEMBERS . THIS FILE IS IN          *\n//*           IEBUPDTE SYSIN FORMAT  :                              *\n//*                                                                 *\n//*           AMD@PRIM....GDDM/PGF MENU                             *\n//*           ADMALLOC....GDDM/ISPF FILE ALLOCATIONS                *\n//*           ADMALL0C....GDDM/ISPF DIALOG (SHOULD BE CALLED        *\n//*                       ADMALLOC NOT '0')                         *\n//*           ADMICU......GDDM/ISPF DIALOG TO INVOKE INTERACTIVE    *\n//*                       CHART UTILITY                             *\n//*           ADMISE......GDDM/ISPF DIALOG TO INVOKE IMAGE SYMBOL   *\n//*                       EDITOR                                    *\n//*           ADMT0000....GDDM/ISPF TUTORIAL INDEX                  *\n//*           ADMT0010....GDDM/ISPF GRAPHICS FILE ALLOCATIONS       *\n//*           ADMT0020....GDDM/ISPF CHART UTILITY                   *\n//*           ADMT0030....GDDM/ISPF IMAGE SYMBOL EDITOR             *\n//*           ADMT0040....GDDM/ISPF SYMBOL EDITOR                   *\n//*           ADMVSE......GDD/ISPF DIALOG TO INVOKE THE VECTOR      *\n//*                       SYMBOL EDITOR                             *\n//*           ASMH........TSO ASSEMBLER TSO PROMPTER                *\n//*           ASMH#.......HELP FOR TSO ASSEMBLER TSO PROMPTER       *\n//*           BURN........PROGRAM TO ABEND A JOB OR ADDRESS SPACE   *\n//*           COMPRESS....COMPRESS PROGRAM-CREATES A SAVE DATASET   *\n//*           COMPRES#....HELP FOR COMPRESS PROGRAM                 *\n//*           CPY.........INVOKE SPFCOPY TO COPY MEMBERS OF A PDS   *\n//*           CPY#........HELP FOR CPY PROGRAM                      *\n//*           DATASCAN....DATASCAN ROUTINE                          *\n//*           ENQSP.......DISPLAY MVS ENQUE STRUCTURE               *\n//*           ENQSP#......HELP FOR ENQSP COMMAND                    *\n//*           EPILOG......MACRO                                     *\n//*           HELPLIST....HELPLIST PROGRAM                          *\n//*           IKJEFF10....TSO SUBMIT EXIT                           *\n//*           IDATMSTP....USER EXIT TO TIMESTAMP VSAM DATASETS IN   *\n//*                       SU60 FORMAT                               *\n//*           ISR@PRIM....SYNTEX ISPF/PDS PRIMARY OPTION MENU       *\n//*           LMVS010.....TSO MOD FOR DEFAULT ALLOCATION OF SHR     *\n//*           LMVS015.....TSO MOD TO DISABLE FULL SCREEN LOGON      *\n//*           LMVS018.....TSO MOD TO ADD CENT SIGN AS LOGICAL TAB   *\n//*                       CHARACTER FOR 327X TERMINALS              *\n//*           ONL.........PGM TO DISPLAY AN OPERATOR'S CONSOLE      *\n//*           PERFORM.....RESET PERFORMANCE GROUP FROM TSO          *\n//*           PROLOG......MACRO                                     *\n//*           SM.... .....TSO COMMAND TO TURN-OFF AND ON THE TSO    *\n//*                       SESSION MANAGER                           *\n//*           VPS@PRIM....VSP/ISPF SELECTION MENU                   *\n//*           VPSOPT01....VSP/ISPF - TO REFRESH SCREEN AFTER VPS    *\n//*                       INVOCATION                                *\n//*           VPSOPT02....VSP/ISPF DIALOG MANAGER FRONT END FOR     *\n//*                       VSPRINT                                   *\n//*           VPSPRINT....VSP/ISPF VSPRINT HARDCOPY OUTPUT PANEL    *\n//*           VPST0000....VSP/ISPF TUTORIAL INDEX                   *\n//*           VPST0010....VSP/ISPF VPS CONTROL                      *\n//*           VPST0020....VSP/ISPF VSPRINT                          *\n//*           VPS01.......VSP/ISPF MESSAGES                         *\n//*           VPS02.......VSP/ISPF MESSAGES                         *\n//*           VPS03.......VSP/ISPF MESSAGES                         *\n//*           WIZARD......DCMS SRM DATA DISPLAY ROUTINE             *\n//*                                                                 *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM@PRIM": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%-----------------------  GDDM/PGF 3.0 SELECTION MENU  -------------------------\n%SELECT OPTION ===>_ZCMD                                                       +\n%                                                             +USERID   - &ZUSER\n%   1 +ALLOCATE   - Allocate new data sets for graphics       +TIME     - &ZTIME\n%   2 +ICU        - Invoke the Interactive Chart Utility      +TERMINAL - &ZTERM\n%   3 +ISE        - Invoke the Image Symbol Editor\n%   4 +VSE        - Invoke the Vector Symbol Editor\n%\n%-----------------------  GDDM/PGF 4.0 SELECTION MENU  -------------------------\n%\n%   5 +ALLOCATE   - Allocate new data sets for graphics\n%     (REQUIRED !!  Release 4 graphs WILL NOT RUN on release 3)\n%   6 +ICU        - Invoke the Interactive Chart Utility\n%   7 +ISE        - Invoke the Image Symbol Editor\n%   8 +VSE        - Invoke the Vector Symbol Editor\n%\n%\n%NOTE: +The allocation procedure (option 1/5) for graphics files should only be\n%      +done once - before your%INITIAL+invocation of the Interactive Chart\n%      +Utility.  The format and data files allocated by the above procedure\n%      +will remain intact for your use during subsequent TSO sessions.\n%\n+PRESS%END KEY+TO TERMINATE GDDM/ISPF+\n%\n)INIT\n  .HELP = ADMT0000\n  &ZHTOP = ISR00003                    /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ISR91000                  /* TUTORIAL INDEX - 1ST PAGE  */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                 1,'CMD(%ADMALLOC)'\n                 2,'CMD(%ADMICU)'\n                 3,'CMD(%ADMISE)'\n                 4,'CMD(%ADMVSE)'\n                 5,'CMD(%ADMALLO4)'\n                 6,'CMD(%ADMICU4)'\n                 7,'CMD(%ADMISE4)'\n                 8,'CMD(%ADMVSE4)'\n               ' ',' '\n                 *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADMALLOC": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%------------------------  GRAPHICS FILE ALLOCATIONS  --------------------------\n%\n%\n%   TSO VOLUME     %===> _VOL    +   (dasd volume on which to place GDDM files)\n%\n%   ADMCFORM SPACE %===> _SPFORM +   (number of tracks for \"FORMAT\" data set)\n%\n%   ADMCDATA SPACE %===> _SPDATA +   (number of tracks for \"DATA\" data set)\n%\n%   ADMCDECK SPACE %===> _SPDECK +   (number of tracks for \"DECK\" data set)\n%\n%   ADMSYMBL SPACE %===> _SPSYMB +   (number of tracks for \"SYMBOLS\" data set)\n%\n%   DIRECTORY BLKS %===> _DIRBLKS+   (number of PDS directory blocks)\n%\n%\n%\n%NOTE: +The current volumes on which GDDM saved files may be placed are as\n%      +follows:% TSO001, TSO002, and TSO003.+ The above space allocations\n%      +should be adequate for the new GDDM user.\n%\n%WARNING: +EXECUTION OF THIS PROCEDURE WILL%DELETE+ANY EXISTING GRAPHICS\n%         +FILES.  PRESS%END+KEY IF YOU DO NOT WISH TO DELETE THESE FILES.\n%\n)INIT\n  .HELP    = ADMT0010       /* DEFAULT TSO VOLUME IF NONE SPECIFIED   */\n  &VOL     = TSO003         /* DEFAULT TSO VOLUME IF NONE SPECIFIED   */\n  &SPFORM  = 10             /* DEFAULT SPACE FOR THE FORMAT DATA SET  */\n  &SPDATA  = 10             /* DEFAULT SPACE FOR THE DATA DATA SET    */\n  &SPDECK  = 5              /* DEFAULT SPACE FOR THE DECK DATA SET    */\n  &SPSYMB  = 5              /* DEFAULT SPACE FOR THE SYMBOLS DATA SET */\n  &DIRBLKS = 10             /* DEFAULT SPACE FOR PDS DIRECTORY BLOCKS */\n)PROC\n  VER (&SPFORM,NUM)\n  VER (&SPDATA,NUM)\n  VER (&SPDECK,NUM)\n  VER (&SPSYMB,NUM)\n  VER (&DIRBLKS,NUM)\n  VER (&VOL,LIST,TSO001,TSO002,TSO003)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMALL0C": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - GRAPHICS FILE ALLOCATION CLIST                              */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INITIALLY ALLOCATE THE GDDM     */\n/* LIBRARIES PRIOR TO AN INITIAL INVOCATION OF THE INTERACTIVE CHART */\n/* FACILITY, IMAGE SYMBOL EDITOR, AND/OR VECTOR SYMBOL EDITOR.       */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nISPEXEC DISPLAY PANEL(ADMALLOC)\nSET RCODE = &LASTCC\nIF &RCODE \u00ac= 0 THEN EXIT\nDELETE (ADMCDATA, ADMDECK, ADMCFORM, ADMSYMBL)\nFREE ATTR(ADMDCB, ADMDCB2)\nCONTROL MSG\nATTRIB ADMDCB  RECFM(F)   LRECL(400) BLKSIZE(400)\nATTRIB ADMDCB2 RECFM(F B) LRECL(80)  BLKSIZE(400)\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMCDATA\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nALLOC FI(ADMCDATA) DA(ADMCDATA) NEW VOL(&VOL.)                       +\n      SP(&SPDATA.,&SPDATA.)                                          +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMDECK\" DATA SET                           */\n/* ----------------------------------------------------------------- */\nALLOC FI(ADMDECK) DA(ADMDECK) NEW VOL(&VOL.)                         +\n      SP(&SPDECK.,&SPDECK.)                                          +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB2) CATALOG\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMCFORM\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nALLOC FI(ADMCFORM) DA(ADMCFORM) NEW VOL(&VOL.)                       +\n      SP(&SPFORM.,&SPFORM.)                                          +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMSYMBL\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) NEW VOL(&VOL.)                       +\n      SP(&SPSYMB.,&SPSYMB.)                                          +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nFREE FI(ADMCDATA, ADMDECK, ADMCFORM, ADMSYMBL)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMICU": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE INTERACTIVE CHART UTILITY                        */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE INTERACTIVE CHART    */\n/* UTILITY AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.     */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMCDATA) DA(ADMCDATA) REUSE SHR\nALLOC FI(ADMCFORM) DA(ADMCFORM) REUSE SHR\nALLOC FI(ADMPRNTQ) DA('SYS2.GDDM.QUEUE')       REUSE SHR\nALLOC FI(ADMSYMBL) DA('SYS2.GDDM.V30.GDDMSYM') REUSE SHR\nCALL 'SYS2.GDDM.V30.GDDMLOAD(ADMCHART)'\nFREE  FI(ADMCDATA, ADMCFORM, ADMSYMBL)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADMISE": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE IMAGE SYMBOL EDITOR                              */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE IMAGE SYMBOL EDITOR  */\n/* AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMCDATA) DA(ADMCDATA) REUSE SHR\nALLOC FI(ADMDECK)  DA(ADMDECK)  REUSE SHR\nALLOC FI(ADMCFORM) DA(ADMCFORM) REUSE SHR\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) REUSE SHR\nALLOC FI(ADMPRNTQ) DA('SYS2.GDDM.QUEUE') REUSE SHR\nCALL 'SYS2.GDDM.V30.GDDMLOAD(ADMISSE)'\nFREE  FI(ADMCDATA, ADMDECK, ADMCFORM, ADMSYMBL)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADMT0000": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL -------------------  GDDM/ISPF INTERFACE  ------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                              %\n+\n%                     -----------------------------------\n%                     |      GDDM/PDF Tutorial Index    |\n                      -----------------------------------\n+  The%GDDM/PDF+option allows you to select one of 4 functions as listed\n   below.  To select a function, enter a one-character digit as listed on the\n   GDDM/ISPF Selection Menu, which is displayed when option%G+is entered\n   on the Primary Option Menu.\n+\n   The following topics are presented in sequence, or may be selected by number:\n    %1+- ALLOCATE ...... Allocate GDDM format, data, etc. \"save\" files on the\n                         appropriate on-line TSO volumes\n    %2+- ICU      ...... Invoke the Interactive Chart Facility\n    %3+- ISE      ...... Invoke the Image Symbol Editor\n    %4+- VSE      ...... Invoke the Vector Symbol Editor\n\n     \"Graphical Data Display Manager - General Information\" - SC33-0111\n\n     \"Graphical Data Display Manager - Messages\"            - SC33-0150\n\n\n\n)PROC\n   &ZSEL = TRANS( &ZCMD\n                1,ADMT0010\n                2,ADMT0020\n                3,ADMT0030\n                4,ADMT0040\n                )\n   &ZUP  = ISR00003\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMT0010": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |    Graphics File Allocations    |\n                      -----------------------------------\n+\n+  The%Graphics File Allocations+menu provides the first time GDDM user\n   with the facility for allocating the appropriate libraries required for\n   creation and saving of charts, image symbols, and vector symbol sets.\n\n\n\n\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Interactive Chart Utility User's Guide\" - SC33-0111+\n\n\n\n\n\n\n\n)PROC\n   &ZUP = ADMT0000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMT0020": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |    Interactive Chart Utility    |\n                      -----------------------------------\n+\n+  The%Interactive Chart Utility+(ICU) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Interactive Chart Utility is a program\n   which allows a user to quickly and easily produce business charts in a\n   readily understood fashion.  The ICU can also be used to generate surface\n   charts, histograms, bar charts, pie charts, and Venn diagrams.  A detailed\n   discussion of the ICU can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Interactive Chart Utility User's Guide\" - SC33-0111+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ICU.  You will find that the best way to learn about the ICU\n   is to use it.  In addition tutorial panels are incorporated within the ICU\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADMT0000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMT0030": {"ttr": 534, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Image Symbol Editor       |\n                      -----------------------------------\n+\n+  The%Image Symbol Editor+(ISE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Image Symbol Editor is a program that\n   you can use at a display station to create new symbols, and change existing\n   ones.  Image symbols are used by GDDM as typefaces, special symbols (such\n   as company logos), shading patterns, or chart marker symbols.  A detailed\n   discussion of the ISE can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Image Symbol Editor User's Guide\" - SC33-0153+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ISE.  You will find that the best way to learn about the ISE\n   is to use it.  In addition tutorial panels are incorporated within the ISE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADMT0000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMT0040": {"ttr": 536, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL -------------------  GDDM/ISPF INTERFACE  ------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Vector Symbol Editor      |\n                      -----------------------------------\n+\n+  The%Vector Symbol Editor+(VSE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Vector Symbol Editor is a program\n   which allows a user at a display station to create new vector symbols and\n   change existing ones.  Vector symbols are used as typefaces and special\n   symbols (e.g. arrows). A vector symbol is a character or shape made up of\n   lines and curves between specified points.\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Vector Symbol Editor User's Guide\" - SC33-0145+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the VSE.  You will find that the best way to learn about the VSE\n   is to use it.  In addition tutorial panels are incorporated within the VSE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADMT0000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADMVSE": {"ttr": 538, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE VECTOR SYMBOL EDITOR                             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE VECTOR SYMBOL EDITOR */\n/* AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMCDATA) DA(ADMCDATA) REUSE SHR\nALLOC FI(ADMDECK)  DA(ADMDECK)  REUSE SHR\nALLOC FI(ADMCFORM) DA(ADMCFORM) REUSE SHR\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) REUSE SHR\nALLOC FI(ADMPRNTQ) DA('SYS2.GDDM.QUEUE') REUSE SHR\nCALL 'SYS2.GDDM.V30.GDDMLOAD(ADMVSSE)'\nFREE  FI(ADMCDATA, ADMDECK, ADMCFORM, ADMSYMBL)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH": {"ttr": 540, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE '   A S S E M B L E R   T S O   P R O M P T E R  '\n***********************************************************************\n*                                                                     *\n*        ASSEMBLER TSO PROMPTER.                                      *\n*                                                                     *\n***********************************************************************\n*\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. AIR FORCE DATA SERVICES CENTER, PENTAGON.\n*        DATE WRITTEN. MARCH 12 1981.\n*        DATE UPDATED. JANUARY 5 1982.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*         THIS TSO COMMAND INVOKES THE ASSEMBLER.\n*\n*         BY SPECIFYING CERTAIN SYSPARM VALUES WHEN ASSEMBLING\n*         THE COMMAND, IT CAN BE MADE TO INVOKE ASSEMBLER XF (IFOX00)\n*         OR ASSEMBLER G OR ASSEMBLER H.  IF YOU WANT MORE THAN ONE,\n*         YOU MUST ASSEMBLE A SEPARATE PROMPTER FOR EACH, AND GIVE\n*         EACH PROMPTER A DIFFERENT NAME.\n*\n*        LOG OF CHANGES.\n*         06APR81 - 'MOD' KEYWORD ADDED.\n*         20APR81 - FIX BUG IN OBJ MEMBERNAME.\n*         20APR81 - FIX BUG IN HANDLING MEMBER NAMES WITHOUT DSNAMES.\n*         13MAY81 - MREF KEYWORD TO INVOKE AFOX00 (MACRO REFERENCE).\n*         17NOV81 - SHOW SYSOUT CLASS IF SYSOUT AND MSG SPECIFIED.\n*         17NOV81 - IF SYS1.MACLIB IS SPECIFIED AS ANY OF THE MACRO\n*                   LIBRARIES, SET THE DEFAULT TO NOMACLIB SO IT\n*                   WILL BE ALLOCATED ONLY WHERE SPECIFIED.\n*                   OTHERWISE ALLOCATE IT FIRST, AS BEFORE.\n*         17DEC81 - ATTACH ASSEMBLER INSTEAD OF LINK, IF TASKLIB.\n*         21DEC81 - ASSEMBLER G PROMPTER MAY NOW BE GENERATED.\n*                   BUT FEW KEYWORDS UNIQUE TO ASMG ARE SUPPORTED.\n*         05JAN82 - SYSPARM USAGE CHANGED. SEE 'HOW TO INSTALL'.\n*                   TASKLIB DDNAME CHANGED FROM ASMLIB TO ASMFLIB\n*                   OR ASMGLIB OR ASMHLIB.\n*\n***********************************************************************\n         SPACE\n         MACRO\n&N       APPEND &X\n         LCLA  &L\n         LCLC  &C\n&L       SETA  L'&X\n&C       SETC  '&L'\n&N       MVC   0(&C,R15),&X\n         LA    R15,&C.(,R15)\n         MEND\n         SPACE\n         GBLB  &MVS,&BETA,&F,&G,&H,&P1,&P2,&P3,&P4,&P5,&P6\n         GBLC  &NAME2,&NAMEL\n*              SYSPARM(F1) VS ASSEMBLER FIRST LOAD\n*              SYSPARM(F2) VS ASSEMBLER SECOND LOAD\n*              SYSPARM(G1) ASSEMBLER G FIRST LOAD\n*              SYSPARM(G2) ASSEMBLER G SECOND LOAD\n*              SYSPARM(H1) ASSEMBLER H FIRST LOAD\n*              SYSPARM(H2) ASSEMBLER H SECOND LOAD\n*              IF NONE OF THE ABOVE, SYSPARM(F1) ASSUMED\n         SPACE\n         MNOTE *,'             SYSPARM IS (&SYSPARM)       '\n         SPACE\n&MVS     SETB  1   TRUE            1 = MVS    0 = OS/MVT (BUT ESTAE..)\n&P1      SETB  ('&SYSPARM' EQ 'H1')\n&P2      SETB  ('&SYSPARM' EQ 'H2')\n&P3      SETB  ('&SYSPARM' EQ 'F1')\n&P4      SETB  ('&SYSPARM' EQ 'F2')\n&P5      SETB  ('&SYSPARM' EQ 'G1')\n&P6      SETB  ('&SYSPARM' EQ 'G2')\n         AIF   (&P1 OR &P2 OR &P3 OR &P4 OR &P5 OR &P6).SPOK\n&P1      SETB  1   TRUE\n.SPOK    ANOP\n&H       SETB  (&P1 OR &P2)\n&F       SETB  (&P3 OR &P4)\n&G       SETB  (&P5 OR &P6)\n&BETA    SETB  (&P2 OR &P4 OR &P6)  SECOND LOAD\n&NAME2   SETC  'ASMH02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMHLIB'           TASKLIB DDNAME\n         AIF   (&H).HH00\n&NAME2   SETC  'ASMG02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMGLIB'           TASKLIB DDNAME\n         AIF   (&G).HH00\n&NAME2   SETC  'ASMF02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMFLIB'           TASKLIB DDNAME\n.HH00    AIF   (&BETA).BETA01\n         EJECT\n***********************************************************************\n*\n*          SYNTAX -\n*                  ASM  'DSNAME'  PRINT(DSNAME) / NOPR / SYSOUT /\n*                                 / PFILE(DDNAME)    LIST / NOLIST\n*                                 OBJECT(DSNAME) / NOOBJECT    MOD\n*                                 LIB(DSNAMES) / NOLIB  MACLIB/NOMAC\n*                                 XREF(FULL/SHORT) / NOXREF\n*                                 BATCH/NOBATCH  ALIGN/NOALIGN\n*                                 TERM/NOTERM  TEST/NOTEST\n*                                 ESD/NOESD  RLD/NORLD  RENT/NORENT\n*                                 FLAG(NNN)  LINECOUNT(NN)\n*                                 SYSPARM()  TIME/NOTIME  MSG/NOMSG\n*\n***********************************************************************\n         SPACE\n***********************************************************************\n*\n*          SOME DIFFERENCES BETWEEN ASSEMBLERS\n*\n*          THESE PARM OPTIONS ARE IN THE VS ASSEMBLER\n*          BUT NOT THE H ASSEMBLER -\n*\n*          ALOGIC/NOALOGIC  YFLAG/NOYFLAG  MCALL/NOMCALL\n*          MLOGIC/NOMLOGIC  LIBMAC/NOLIBMAC   NUMBER   STMT\n*          WORKSIZE(2048K) (32K-10240K)  BUFSIZE(MIN/MAX/STD)\n*\n*          THE VS ASSEMBLER DOES NOT HAVE THE BATCH OPTION.\n*\n*          VS ASSEMBLER USES SYSUT2 AND SYSUT3, H DOES NOT.\n*\n*          THE VS ASSEMBLER IS IFOX00 INSTEAD OF IEV90\n*\n*          THE VS ASSEMBLER SYSPRINT FILE USES ASA\n*          CARRIAGE CONTROLS, WHILE ASSEMBLER H USES\n*          MACHINE CARRIAGE CONTROLS.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         HOW TO INSTALL IT\n*\n*         1) ASSEMBLE IT WITH SYSPARM(F1) OR (G1) OR (H1) DEPENDING\n*            ON WHETHER THE PROMPTER IS TO INVOKE ASSEMBLER XF\n*            (IFOX00) OR ASSEMBLER G (ASMGASM) OR ASSEMBLER H (IEV90).\n*            LINK-EDIT THAT AND NAME IT 'ASMF' OR 'ASMG' OR 'ASMH'\n*            (OR 'ASM' IF YOU DONT HAVE AN ASSEMBLER PROMPTER BY THAT\n*            NAME ALREADY).\n*\n*         2) ASSEMBLE THIS SAME PROGRAM AGAIN, THIS TIME SPECIFYING\n*            SYSPARM(F2) OR (G2) OR (H2).  THIS WILL CAUSE DIFFERENT\n*            CODE TO BE GENERATED. LINK-EDIT THAT AND NAME IT 'ASMF02'\n*            OR 'ASMG02' OR 'ASMH02'.\n*\n*         THE SECOND LOAD MODULE IS XCTL'D TO BY THE FIRST MODULE.\n*         THE ONLY REASON THIS IS DONE IS TO GIVE THE ASSEMBLER\n*         MORE ROOM TO RUN IN.  IF YOUR TSO REGION SIZES ARE\n*         PLENTY BIG, YOU DONT HAVE TO DO THAT SECOND ASSEMBLY,\n*         BUT YOU DO HAVE TO MAKE A CHANGE TO THE CODE BEFORE\n*         DOING THE FIRST ASSEMBLY. YOU HAVE CHANGE 'DEFAULT='$X'\n*         TO DEFAULT='$NOX' AT THE INSTRUCTION LABELLED 'XCTLKW'.\n*\n*         IF PLACED IN THE LPA, IT WOULD PROBABLY BE BETTER\n*         TO MAKE THE DEFAULT='$NOX'.\n*\n*         WHAT NAME YOU WANT TO THE FIRST LOAD MODULE (THE COMMAND)\n*         IS UP TO YOU. IT WONT AFFECT THE WAY IT RUNS.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         MOST OF THE KEYWORDS CORRESPOND TO OPTIONS PASSED TO THE\n*         ASSEMBLER IN ITS PARM FIELD.  PRINT, SYSOUT, PFILE, MOD,\n*         LIB, MACLIB, TIME, AND MSG ARE NOT PARM FIELD OPTIONS,\n*         BUT CONTROL FUNCTIONS WITHIN THE COMMAND.  NOPRINT\n*         CAUSES A NOLIST PARM OPTION.\n*\n*         LIB DATA SETS WILL BE CONCATENATED AFTER 'SYS1.MACLIB',\n*         UNLESS 'SYS1.MACLIB' IS ONE OF THE LIB DATA SETS.\n*         NOMACLIB MAY BE SPECIFIED TO SUPPRESS 'SYS1.MACLIB'.\n*         IF BOTH NOMACLIB AND NOLIB ARE SPECIFIED THEN THE\n*         ASSEMBLER WILL USE WHATEVER YOU HAVE PRE-ALLOCATED\n*         TO DDNAME SYSLIB.\n*\n*         PFILE IS USED WHEN WE PRE-ALLOCATE A SYSOUT FILE WITH\n*         ALL KINDS OF OPTIONS LIKE HOLD OR DEST OR FORMS, AND\n*         WE WANT THE PROMPTER TO USE THAT FILENAME FOR ITS PRINT.\n*\n*         THE 'LIST/NOLIST' KEYWORD IS A FAIRLY USELESS KEYWORD,\n*         BUT IS INCLUDED SO THAT USING IT WONT RESULT IN AN ERROR.\n*         IF 'NOLIST' IS SPECIFIED, IT FORCES 'NOPRINT'.\n*         IF 'NOPRINT' IS SPECIFIED, IT FORCES 'NOLIST.\n*         IF 'LIST' IS SPECIFIED, THE 'LIST' OPTION IS PASSED\n*         TO THE ASSEMBLER, BUT THAT IS NEVER NECESSARY.\n*         JUST USE THE PRINT/NOPRINT/SYSOUT/PFILE KEYWORD\n*         TO CONTROL THE LIST OPTION, AND THINGS WILL WORK FINE.\n*\n*         TO MAKE THE COMMAND DEFAULT TO NOPRINT,\n*         DO NOT PUT DEFAULT='NOLIST' AT LISTKW.  THIS WOULD\n*         FORCE THE USER TO TYPE IN BOTH LIST AND PRINT.\n*         JUST PUT DEFAULT='NOPRINT' AT PRINTKW.\n*\n*         THE 'MSG' KEYWORD CAUSES THE NAMES OF THE PRINT AND\n*         OBJECT DATA SETS TO BE DISPLAYED.  THIS IS USEFUL\n*         BECAUSE THE WAY THE COMMAND BUILDS THESE NAMES TAKES\n*         A WHILE TO GET USED TO.  THE DEFAULT (MSGD) CAUSES\n*         THE NAMES TO BE DISPLAYED WHENEVER THEY ARE NOT OBVIOUS.\n*\n*         THE 'TIME' KEYWORD CAUSES THE CPU TIME USED BY THE\n*         ASSEMBLER TO BE DISPLAYED.  THIS TIME DOES NOT INCLUDE\n*         THE TIME USED BY THE TSO COMMAND BEFORE IT INVOKES\n*         THE ASSEMBLER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         DATA SET NAME CONVENTIONS\n*\n*          SOURCE INPUT DATA SET\n*             IF AN UNQUALIFIED NAME IS ENTERED, IKJEHDEF\n*             PUTS A PREFIX ON THE FRONT AND '.ASM' ON THE END.\n*             IF THE RESULTING NAME IS NOT IN THE CATALOG,\n*             IKJEHDEF STILL RETURNS IT BUT ALSO SETS THE\n*             RETURN CODE TO 20.  IF THE RETURN CODE IS 20,\n*             WE REMOVE THE '.ASM', UNLESS THAT LEAVES NOTHING\n*             BUT THE PREFIX (ONLY A MEMBER NAME WAS SPECIFIED)\n*             IN WHICH CASE WE SAY PREFIX.ASM NOT IN CATALOG.\n*\n*             IF AN UNQUALIFIED NAME IS ENTERED, AND OBJ OR\n*             PRINT IS SPECIFIED WITHOUT A DSNAME, THE COMMAND\n*             ATTEMPTS TO USE THE UNQUALIFIED NAME AS A PATTERN\n*             FOR THE NAMES OF THE OBJECT AND PRINT DATA SETS.\n*\n*             FOR EXAMPLE, IF ALPHA IS SPECIFIED, AND YOUR DATA\n*             IS IN 'PREFIX.ALPHA.ASM', IT WILL USE\n*             'PREFIX.ALPHA.OBJ' AND 'PREFIX.ALPHA.LIST'.\n*\n*             HOWEVER, IF ALPHA IS SPECIFIED, AND YOUR DATA IS\n*             IN 'PREFIX.ALPHA', THE COMMAND CANNOT CREATE\n*             'PREFIX.ALPHA.OBJ' AND 'PREFIX.ALPHA.LIST' (AT LEAST\n*             IT CANT UNDER AN OS CVOL CATALOG), SO IT USES\n*             DEFAULT OBJECT AND PRINT DSNAMES UNLESS OVERRIDDEN.\n*\n*             IF A QUALIFIED DATA SET NAME IS ENTERED,\n*             THE DEFAULT OBJECT AND PRINT DSNAMES WILL BE\n*             USED UNLESS OVERRIDDEN.\n*\n*             THE DEFAULT OBJECT AND PRINT DSNAMES ARE TEMP.OBJ\n*             AND TEMP.LIST, THAT IS, OBJECT(TEMP) AND PRINT(TEMP).\n*             THESE ARE USED ONLY IF THE OBJECT AND PRINT\n*             DSNAMES ARE NOT SPECIFIED AND THE SOURCE DSNAME IS\n*               A) QUALIFIED (IN QUOTES), OR\n*               B) UNQUALIFIED, AND THE NAME YOU ENTERED\n*                  WAS NONSTANDARD (DOESNT EXIST WITH .ASM\n*                  APPENDED TO WHAT YOU ENTERED).\n*\n*             WHENEVER DEFAULT OBJECT OR PRINT DSNAMES ARE USED,\n*             A MESSAGE IS ISSUED INFORMING YOU OF THAT FACT,\n*             UNLESS NOMSG IS SPECIFIED.\n*\n***********************************************************************\n         EJECT\nASMP01   START\n         USING *,R10,R11,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ASMP01  1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND SIZE\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             INITIALIZE BASE REG\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LA    R12,4095(R15,R11)\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         LR    R15,R1              POINT TO AREA TO CLEAR\n         L     R1,@SIZE            GET LENGTH TO CLEAR\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    CLEARR              YES, GO DO REMAINDER\nCLEARQ   XC    0(256,R15),0(R15)   ZERO 256 BYTES\n         LA    R15,256(,R15)       INCREMENT ADDRESS\n         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH\nCLEARR   LTR   R1,R1               IS REMAINDER ZERO?\n         BZ    CLEARX              YES, BRANCH TO EXIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                GO AROUND EXECUTED INST\n         XC    0(0,R15),0(R15)     EXECUTED\n         EX    R1,*-6              DO THE ABOVE XC\nCLEARX   EQU   *\n         SPACE\n         ST    R13,4(,R9)          PUT OLD ADDRESS IN NEW AREA\n         ST    R9,8(,R13)          PUT NEW ADDRESS IN OLD AREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE\n         STM   R10,R12,BASES\n         SPACE 1\n         MVC   SIZE,@SIZE\n         ST    R2,CPPLPTR\n         SPACE\n         AGO   .BETA02\n.BETA01  ANOP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         THIS IS THE SECOND LOAD OF THE ASSEMBLER PROMPTER           *\n*                                                                     *\n***********************************************************************\n         EJECT\nASMP02   START\n         USING *,R10,R11,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ASMP02 1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             INITIALIZE BASE REG\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LA    R12,4095(R15,R11)\n         LR    R9,R1\n         USING @DATA,R9\n         L     R2,CPPLPTR          PARM POINTER\n         USING CPPL,R2\n         ST    R13,4(,R9)          PUT OLD ADDRESS IN NEW AREA\n         ST    R9,8(,R13)          PUT NEW ADDRESS IN OLD AREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE 1\n         STM   R10,R12,BASES\n         SPACE 1\n         AGO   .BETA03\n.BETA02  ANOP\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP DAPL FOR IKJDAIR                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYDAPL\n         USING DAPL,R15\n         MVC   DAPLUPT(12),MYIOPL  UPT,ECT,ECB\n         MVC   DAPLPSCB,CPPLPSCB\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB\n         DROP  R15                 DAPL\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(ASMHPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA           FOR VALIDITY CHECK ROUTINE\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             PARSE SUCCESSFUL?\n         BZ    PARSEOK             YES, BRANCH\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\n         EJECT\n************************************************************\n*                                                          *\n*        CALL THE DEFAULT SERVICE ROUTINE                  *\n*        TO PREFIX THE DSN AND ADD DESC. QUALIFIER         *\n*                                                          *\n************************************************************\n         SPACE\nQUALIFY  ST    R14,DOUBLE\n         MVC   DSNAMEU(46),DSNAMEQ SAVE A 'BEFORE' COPY\n         LA    R1,MYIOPL\n         USING IOPL,R1\n         LA    R14,MYDFPB          POINT TO DEFAULT PARMS\n         ST    R14,IOPLIOPB        STORE ADDRESS IN IOPL\n         DROP  R1                  IOPL\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)    CLEAR DFPB\n         LA    R0,DSNAMEQ          POINT TO DSNAME HALFWORD\n         ST    R0,DFPBDSN          STORE ADDRESS IN DFPB\n*        MVI   DFPBCODE,X'00'      USE QUALIFIER PROVIDED\n         MVC   DFPBPSCB,CPPLPSCB   STORE PSCB ADDRESS IN DFPB\n         OI    DFPBCNTL,DFPBUID+DFPBADD PREFIX DSN AND ADD QUAL\n         LA    R15,MYQUAL          POINT TO QUALIFIER\n         ST    R15,DFPBQUAL        STORE QUAL ADDRESS IN DFPB\n         DROP  R14                 DFPB\n         SPACE\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    736(R15),X'80'      IF HI ORDER BIT ON\n         BNO   DEFLINK1               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     DEFEXIT1            SKIP AROUND LINK\nDEFLINK1 EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nDEFEXIT1 EQU   *\n         SPACE\n         STC   R15,QUALRC\n         LTR   R15,R15             SUCCESSFUL?\n         BZ    DEFRET              YES, BRANCH\n         CH    R15,=H'20'          SUCCESSFUL BUT NOT IN CATALOG\n         BNE   ERRDEF              NO, SOMETHING ELSE\n         CLI   DSNAMEU+1,0         WAS UNQUALIFIED NAME NULL\n         BE    DEFRET              YES, JUST PREFIX.QUAL, LET DAIR FAIL\n         CLI   MYQUAL,C'A'         IS THIS INPUT DATA SET (OR SYSLIB)\n         BNE   DEFRET              NO, LEAVE QUALIFIER ON (OBJ LIST)\n         LH    R1,DSNAMEQ          REMOVE ASM, TRY TO ALLOCATE\n         SH    R1,=H'4'            LENGTH OF .ASM\n         STH   R1,DSNAMEQ\n         LA    R1,DSNAMEQ+2(R1)\n         MVC   0(4,R1),BLANKS      REMOVE .ASM\n         B     DEFRET\n         SPACE\nDEFRET   L     R14,DOUBLE\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS SYSIN DATA SET NAME                      *\n*                                                          *\n************************************************************\n         SPACE\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n         MVC   TIMEKV,TIMEKW       SAVE KEYWORDS THAT MAY BE\n         MVC   DEBUGKV,DEBUGKW      REFERENCED\n         MVC   XCTLKV,XCTLKW         AFTER IKJRLSA\n         SPACE\n         LA    R1,CONIDAPB+12\n         ST    R1,CONIPTR\n         LA    R4,DSNI\n         B     *+8\nINNLOOP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         L     R1,CONIPTR          POINT TO LIST OF DDNAMES\n         LA    R0,CONIDAPX         POINT TO END OF LIST\n         CR    R1,R0               IS THERE ROOM FOR ANOTHER\n         BNL   ERRCONI             NO, BRANCH\n         MVC   DSNAMEI(46),DSNNULL\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    DSNIN               NO, JUST A MEMBER NAME\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNIN               YES, BRANCH\n         STH   R1,DSNAMEI          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEI+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNIN    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEI\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         SPACE\n         MVC   MEMI(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNIMX              NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNIMX              YES, BRANCH\n         STH   R1,MEMI             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08MNM(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\n         MVC   MEMI+2(8),DA08MNM\nDSNIMX   EQU   *\n         MVC   MEMBER(10),MEMI\n         SPACE\n         MVC   DSNIQ,6(R4)\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    DSNINQ              YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'ASM'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         MVC   DSNAMEI(46),DSNAMEQ\n         CLI   QUALRC,0            IS IT IN CATALOG\n         BE    DSNIXQ              YES, .ASM APPENDED\n         OI    DSNIQ,X'40'         NO, NONSTANDARD NAME\n*               IF USER'S PROGRAM IS IN PREFIX.ALPHA.ASM\n*               USER NEED ONLY SPECIFY ALPHA, BUT IN CASE\n*               USER SPECIFIES ALPHA.ASM, DEFAULT SERVICE\n*               ROUTINE LOOKS FOR PREFIX.ALPHA.ASM.ASM.\n*               IF IT DOESNT FIND THAT IN THE CATALOG, IT SETS\n*               RETURN CODE 20, IN WHICH CASE WE REMOVE\n*               THE .ASM AND MARK IT AS A NONSTANDARD NAME.\n*               THIS NEXT ROUTINE CHECKS TO SEE IF THE NAME\n*               STILL ENDS WITH .ASM, AND IF IT DOES WE RESET\n*               THE NAME AS BEING STANDARD (MEANING OBJECT\n*               AND PRINT DSNAMES CAN BE MODELED AFTER IT).\n*               IN SUMMARY, IF USER ENTERS ALPHA.ASM AND DATA\n*               SET ALPHA.ASM.ASM DOES NOT EXIST, WE PROCEED\n*               AS THOUGH USER HAD ENTERED JUST ALPHA.\n         LH    R1,DSNAMEQ\n         LA    R1,DSNAMEQ+2(R1)    POINT PAST DSNAME\n         SH    R1,=H'4'\n         CLC   0(4,R1),=C'.ASM'    IS LAST QUALIFIER .ASM\n         BNE   *+8                 NO, BRANCH\n         NI    DSNIQ,255-X'40'     YES, USER ENTERED .ASM UNNECESSARILY\nDSNIXQ   EQU   *\n         SPACE\nDSNINQ   TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNIPX              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNIPX              YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNIPX   EQU   *\n         OI    DA08DSP1,DA08SHR    DISP=SHR\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSIN DATA SET                       *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         XC    DA08PSWD,DA08PSWD\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n*        MVC   DDIN(8),DA08DDN     SAVE DDNAME\n         L     R1,CONIPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONIPTR          SAVE UPDATED POINTER\n         LA    R1,1\n         AH    R1,CONINUM\n         STH   R1,CONINUM\n         CH    R1,=H'1'            IS THIS THE FIRST SYSIN DATA SET\n         BNE   DSNINOT1            NO, BRANCH\n         MVC   DSNAMEH(46),DSNAMEI\n         MVC   DSNHQ,DSNIQ\n         MVC   MEMH(10),MEMI\nDSNINOT1 TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNIPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BE    ERRPDS              NO, ERROR\n         SPACE\n************************************************************\n*                                                          *\n*         VERIFY THAT THE MEMBER EXISTS                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,PDSDCBW\n         MVC   0(PDSDCBL,R6),PDSDCB\n         MVC   DDNAM(8,R6),DA08DDN\n         LA    R1,PDSEXLST         EXLST=PDSEXLST\n         IC    R0,EXLST(,R6)\n         ST    R1,EXLST(,R6)\n         STC   R0,EXLST(,R6)\n         LA    R0,PDSABEND         DCB ABEND EXIT\n         ST    R0,0(,R1)           STORE ADDRESS IN EXLST\n         MVI   0(R1),128+X'11'     DCB ABEND EXIT TYPE IN EXLST\n         MVI   RC,0\n         MVI   OPEN,X'80'\n         OPEN  ((R6),INPUT),MF=(E,OPEN)\n         CLOSE ((R6)),MF=(E,OPEN)\n         CLI   RC,0                WAS MEMBER FOUND\n         BE    DSNIOK              YES, BRANCH\n         B     ERRMEM              NO, GO WRITE ERROR MESSAGE\nPDSABEND L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    PDSAB013            YES, BRANCH\n         MVI   3(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nPDSAB013 OI    RC,X'80'            INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\nDSNIPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNIOK   EQU   *\nDSNINEXT CLI   24(R4),X'FF'        IS THERE ANOTHER DSNAME\n         BNE   INNLOOP             YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         CONCATENATE IF THERE WAS MORE THAN ONE           *\n*                                                          *\n************************************************************\n         SPACE\nINNCON   LA    R6,CONIDAPB\n         USING DAPB0C,R6\n         XC    0(12,R6),0(R6)\n         MVI   DA0CCD+1,X'0C'\n         LH    R1,CONINUM          NUMBER OF DDNAMES\n         CH    R1,=H'1'            IS THERE ONLY ONE DDNAME\n         BE    INNCONX             YES, BYPASS CONCAT\n         STH   R1,DA0CNUMB\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         ST    R6,DAPLDAPB\n         DROP  R6                  DAPB0C\n         BAL   R14,CALLDAIR        CONCATENATE SYSIN'S\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVI   CONISW,1            INDICATE CONCATENATED\n*        CLI   MSGKW+1,2           MSGD\n*        BNE   *+8                 NO\n*        MVI   MSGKW+1,1           DISPLAY PRINT AND OBJECT NAMES\nINNCONX  MVC   DDIN,CONIDAPB+12\n         LA    R1,MYDAPL\n         ST    R5,DAPLDAPB         RESTORE MYDAPL ADDRESS\n         DROP  R1                  DAPL\nINNX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IF SYS1.MACLIB IS SPECIFIED, SET NOMACLIB        *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   MACKW+1,2           'NOMACLIB' SPECIFIED\n         BE    MACOVX              YES, NO NEED TO DO THIS\n         CLI   LIBKW+1,1           LIB SPECIFIED OR DEFAULTED\n         BNE   MACOVX              NO, BRANCH\n         LA    R4,DSNL             POINT TO PDE OF FIRST LIB DSN\n         B     *+8\nMACOVLP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         LA    R1,11               GET LENGTH OF SYS1.MACLIB\n         CH    R1,4(,R4)           IS LENGTH RIGHT\n         BNE   MACOVNX             NO, BRANCH\n         L     R15,0(,R4)          POINT TO DSN\n         CLC   0(11,R15),=C'SYS1.MACLIB'  IS IT MACLIB\n         BNE   MACOVNX             NO, BRANCH\n         TM    6(R4),X'40'         IS IT QUOTED\n         BO    MACOVSET            YES, BRANCH\n         L     R1,CPPLUPT\n         CLI   UPTPREFL-UPT(R1),0  IS PROFILE NOPREFIX\n         BNE   MACOVSET            NO, BRANCH\nMACOVSET MVI   MACKW+1,2           YES, SET NOMACLIB\n         B     MACOVX              AND STOP LOOKING\nMACOVNX  CLI   24(R4),X'FF'        ANY MORE DSNAMES\n         BNE   MACOVLP             YES, BRANCH\nMACOVX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE SYS1.MACLIB (UNLESS NOMAC)              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,CONLDAPB+12\n         ST    R1,CONLPTR\n         CLI   MACKW+1,2           'NOMACLIB' SPECIFIED\n         BE    MACX                YES, BYPASS SYS1.MACLIB\n         SPACE\n         MVC   DSNAMEQ(46),MACLIB\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         OI    DA08DSP1,X'08'      DISP=SHR\n         SPACE\n         BAL   R14,CALLDAIR        ALLOCATE SYS1.MACLIB\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONLPTR          SAVE UPDATED POINTER\n         MVC   CONLNUM,=H'1'\nMACX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE OTHER MACRO LIBRARIES (UNLESS NOLIB)    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LIBKW+1,1           LIB SPECIFIED\n         BNE   LIBCON              NO, BRANCH\n         LA    R4,DSNL\n         B     *+8\nLIBLOOP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         TM    14(R4),X'80'        MEMBER NAME PRESENT\n         BO    ERRMEML             YES, ERROR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         LA    R0,CONLDAPX         POINT TO END OF LIST\n         CR    R1,R0               IS THERE ROOM FOR ANOTHER\n         BNL   ERRCONL             NO, BRANCH\n         MVC   DSNAMEL(46),DSNNULL\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    LIBCON              YES, BRANCH\n         STH   R1,DSNAMEL          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEL+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         MVC   DSNAMEQ(46),DSNAMEL\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         SPACE\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'ASM'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPASSL             NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    NOPASSL             YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPASSL  EQU   *\n         SPACE\n         OI    DA08DSP1,X'08'      DISP=SHR\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE LIBRARY                              *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR        ALLOCATE SPECIFIED MACLIB\n         XC    DA08PSWD,DA08PSWD\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONLPTR          SAVE UPDATED POINTER\n         LA    R1,1\n         AH    R1,CONLNUM\n         STH   R1,CONLNUM\n         SPACE\n************************************************************\n*                                                          *\n*        VERIFY THAT DATA SET IS PARTITIONED               *\n*                                                          *\n************************************************************\n         SPACE\n         TM    DA08DSO,X'02'       IS IT PARTITIONED\n         BZ    ERRPDSN             NO, BRANCH\n         DROP  R5                  DAPB08\n         CLI   24(R4),X'FF'        IS THERE ANOTHER DSNAME\n         BNE   LIBLOOP             YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         CONCATENATE IF THERE WAS MORE THAN ONE           *\n*                                                          *\n************************************************************\n         SPACE\nLIBCON   LA    R6,CONLDAPB\n         USING DAPB0C,R6\n         XC    0(12,R6),0(R6)\n         MVI   DA0CCD+1,X'0C'\n         LH    R1,CONLNUM          NUMBER OF DDNAMES\n         CH    R1,=H'1'            IS THERE ONLY ONE DDNAME\n         BE    LIBCONX             YES, BYPASS CONCAT\n         BL    LIBX                BRANCH IF NOMAC NOLIB (USE SYSLIB)\n         STH   R1,DA0CNUMB\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         ST    R6,DAPLDAPB\n         DROP  R6                  DAPB0C\n         BAL   R14,CALLDAIR        CONCATENATE MACLIBS\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVI   CONLSW,1            INDICATE CONCATENATED\nLIBCONX  MVC   DDLIB,CONLDAPB+12\n         LA    R1,MYDAPL\n         ST    R5,DAPLDAPB         RESTORE MYDAPL ADDRESS\n         DROP  R1                  DAPL\nLIBX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSTERM FILE TO THE TERMINAL         *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   TERMKW+1,2          NOTERM\n         BE    TERMX               BRANCH IF NOTERM\n         USING DAPB1C,R5\n         MVC   DA1CCD(MODEL1CL),MODEL1C\n         BAL   R14,CALLDAIR        ALLOCATE SYSTERM\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDTERM,DA1CDDN\n         DROP  R5                  DAPB1C\nTERMX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE WHERE SYSPRINT GOES                    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LISTKW+1,2          IS NOLIST SPECIFIED\n         BNE   *+8                 NO, SKIP NEXT INSTRUCTION\n         MVI   PRINTKW+1,3         YES, FORCE NOPRINT\n         CLI   PRINTKW+1,3         IS NOPRINT SPECIFIED\n         BE    PRINTDUM            YES, BRANCH\n         CLI   PRINTKW+1,4         IS SYSOUT SPECIFIED\n         BE    PRINTSOU            YES, BRANCH\n         CLI   PRINTKW+1,5         IS PFILE SPECIFIED\n         BE    PRINTFIL            YES, BRANCH\n         MVC   DSNAMEP(46),DSNNULL\n         LA    R4,DSNP\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BO    PRINTNME            YES                          22APR81\n         TM    14(R4),X'80'        MEMBER NAME PRESENT          22APR81\n         BZ    PRINTGEN            NO, GENERATE A DSNAME\n         B     PRINTDS             YES, USE LIST(MEMBER)        22APR81\nPRINTNME L     R15,0(,R4)          POINT TO DSNAME\n         CLI   0(R15),C'*'         TERMINAL\n         BE    PRINTERM            YES, BRANCH\n         B     PRINTDS             NO, ITS A DSNAME\n         SPACE\n************************************************************\n*                                                          *\n*         GENERATE A NAME FOR THE PRINT DATA SET           *\n*                                                          *\n************************************************************\n         SPACE\nPRINTGEN EQU   *\n         TM    DSNHQ,X'40'         WAS SYSIN NAME NONSTANDARD\n         BO    PRINTGDF            YES, USE DEFAULT\n         MVC   DSNAMEP(46),DSNAMEH\n         MVC   MEMP(10),MEMH\n         LH    R1,DSNAMEP          GET LENGTH OF INPUT DSNAME\n         SH    R1,=H'4'            MINUS LENGTH OF .ASM\n         LA    R15,DSNAMEP+2(R1)   POINT TO .ASM\n         MVC   0(5,R15),=C'.LIST'  REPLACE IT WITH .LIST\n         AH    R1,=H'5'            NEW LENGTH\n         STH   R1,DSNAMEP          STORE NEW LENGTH\n         CH    R1,=H'44'           TOO LONG\n         BH    PRINTGDF            YES, BRANCH\n         MVC   DSNAMEQ(46),DSNAMEP\n         MVC   MEMBER(10),MEMP\n         MVC   PSWD,BLANKS\n         B     DSNPA\nPRINTGDF LA    R4,DSNPPDE          POINT TO DEFAULT PDE\n         XC    0(20,R4),0(R4)      CLEAR IT\n         LA    R1,DSNPOPB          POINT TO DEFAULT OPERAND BUFFER\n         ST    R1,0(,R4)\n         MVC   0(4,R1),=C'TEMP'    DEFAULT PRINT(TEMP)\n         MVI   5(R4),4             LENGTH 4\n         CLI   MSGKW+1,3           IS NOMSG SPECIFIED\n         BE    *+8                 YES,\n         MVI   MSGKW+1,1           NO, FORCE MSG FOR DEFAULT NAMES\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DATA SET)             *\n*                                                          *\n************************************************************\n         SPACE\nPRINTDS  LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNP1               YES, BRANCH\n         STH   R1,DSNAMEP          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEP+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNP1    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEP\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'LIST'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         MVC   MEMP(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNP2               NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNP2               YES, BRANCH\n         STH   R1,MEMP             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   MEMP+2(0),0(R15)    (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\nDSNP2    EQU   *\n         MVC   MEMBER(10),MEMP\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNP3               NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNP3               YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   PSWD(0),0(R15)      (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNP3    EQU   *\n         SPACE\nDSNPA    LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08MNM,MEMBER+2\n         MVC   DA08PSWD,PSWD\n         XC    PSWD,PSWD\n         OI    DA08DSP1,DA08OLD    DISP=OLD\n         CLI   MODKW+1,1           MOD REQUESTED\n         BNE   *+8                 NO\n         MVI   DA08DSP1,DA08MOD    YES\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET\n         XC    DA08PSWD,DA08PSWD\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   DSNPNEW             NO, GO CREATE A DATA SET\n         MVC   DDPRINT,DA08DDN\n         SPACE\n         TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNPPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BNE   DSNPOK              YES, BRANCH\n         B     ERRPDS              ERROR, MEMBER NAME OMITTED\nDSNPPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNPOK   EQU   *\n         SPACE\n         CLI   MSGKW+1,1\n         BNE   PRINTX\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(24,R15),=C' WILL BE USED FOR PRINT '\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\nDSNPNEW  CH    R15,=H'8'           IS DAIR RETURN CODE 8\n         BE    DSNPNEW1            YES, BRANCH\n         B     ERRDAIR             NO, UNRECOVERABLE PROBLEM\nDSNPNEW1 CLC   DA08DARC(4),=X'17080008' WAS IT BECAUSE NOT IN CATALOG\n         BNE   ERRDAIR             NO, UNRECOVERABLE PROBLEM\n         MVI   DA08DSP1,DA08NEW\n         MVI   DA08DPS2,DA08CAT\n         MVI   DA08DPS3,DA08CATL\n         MVC   DA08PQTY,=F'03'\n         MVC   DA08SQTY,=F'07'\n         OI    DA08CTL,DA08TRKS\n         MVC   DA08BLK,=F'2420'\n         CLI   DA08MNM,C' '        IS MEMBER SPECIFIED\n         BE    *+10                NO\n         MVC   DA08DQTY,=F'1'      YES, DIRECTORY SPACE\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET NEW\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   ERRDAIR             NO, UNRECOVERABLE ERROR\n         MVC   DDPRINT,DA08DDN\n         SPACE\n         CLI   MSGKW+1,1           MSG\n         BNE   PRINTX              NO, BRANCH\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(27,R15),=C' HAS BEEN CREATED FOR PRINT'\n         LA    R15,27(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DUMMY)                *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB08,R5\nPRINTDUM MVI   LISTKW+1,2          FORCE NOLIST\n         MVC   DA08CD(84),MODEL08\n         OI    DA08CTL,DA08DMMY\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DUMMY\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA08DDN\n         B     PRINTX\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO THE TERMINAL        *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB1C,R5\nPRINTERM MVC   DA1CCD(MODEL1CL),MODEL1C\n         BAL   R14,CALLDAIR        ALLOCATE PRINT TERMINAL\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA1CDDN\n         DROP  R5                  DAPB1C\n         B     PRINTX\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO SYSOUT              *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB30,R5\nPRINTSOU LA    R4,CLASS\n         MVI   SOUT,C' '\n         L     R1,0(,R4)\n         TM    6(R4),X'80'\n         BZ    *+10\n         MVC   SOUT,0(R1)          SAVE SYSOUT CLASS FOR UNALLOCATE\n         OI    SOUT,X'40'\n         MVC   DA30CD(MODEL30L),MODEL30\n         BAL   R14,CALLDAIR        ALLOCATE PRINT SYSOUT\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA30DDN\n         MVI   FREEOPT,1           FREE DDPRINT WITH CLASS\n         DROP  R5                  DAPB30\n         CLI   MSGKW+1,1           'MSG' SPECIFIED\n         BNE   PRINTX              NO, BRANCH\n         LA    R15,MSGWK\n         MVC   0(09,R15),=C'SYSOUT(*)'\n         CLI   SOUT,C' '\n         BE    *+10\n         MVC   7(1,R15),SOUT\n         LA    R15,09(,R15)\n         MVC   0(24,R15),=C' WILL BE USED FOR PRINT '\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\n************************************************************\n*                                                          *\n*         USE SPECIFIED DDNAME FOR SYSPRINT                *\n*                                                          *\n************************************************************\n         SPACE\nPRINTFIL LA    R4,PFILE\n         TM    6(R4),X'80'         PFILE PRESENT?\n         BZ    PRINTX              NO, USE SYSPRINT\n         LH    R1,4(,R4)           GET LENGTH\n         L     R15,0(,R4)\n         MVC   DDPRINT,BLANKS\n         BCTR  R1,0\n         B     *+10\n         MVC   DDPRINT(0),0(R15)\n         EX    R1,*-6\n         MVI   FREEOPT,2           DO NOT FREE DDPRINT\n         B     PRINTX\n         SPACE\nPRINTX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         GENERATE A NAME FOR THE OBJECT DATA SET          *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   OBJKW+1,3           LOAD SPECIFIED\n         BNE   *+8                 NO, BRANCH\n         MVI   OBJKW+1,1           YES, MAKE IT OBJ\n         CLI   OBJKW+1,4           NOLOAD SPECIFIED\n         BNE   *+8                 NO, BRANCH\n         MVI   OBJKW+1,2           YES, MAKE IT NOOBJ\n         CLI   OBJKW+1,1           OBJ SPECIFIED\n         BNE   OBJX                NO, BRANCH\n         MVC   DSNAMEO(46),DSNNULL\n         LA    R4,DSNO\n         TM    6(R4),X'80'         IS A NAME SPECIFIED\n         BO    OBJDS               YES, BRANCH\n         TM    14(R4),X'80'        IS A MEMBER SPECIFIED        22APR81\n         BO    OBJDS               YES, BRANCH                  22APR81\n         SPACE\n         TM    DSNHQ,X'40'         WAS SYSIN NAME NONSTANDARD\n         BO    OBJGENDF            YES, BRANCH\n         MVC   DSNAMEO(46),DSNAMEH\n         MVC   MEMO(10),MEMH\n         LH    R1,DSNAMEO          GET LENGTH OF INPUT DSNAME\n         SH    R1,=H'4'            MINUS LENGTH OF .ASM\n         LA    R15,DSNAMEO+2(R1)   POINT TO .ASM\n         MVC   0(4,R15),=C'.OBJ'   REPLACE IT WITH .OBJ\n*        AH    R1,=H'4'            NEW LENGTH  (SAME LENGTH)\n*        STH   R1,DSNAMEO          STORE NEW LENGTH\n*        CH    R1,=H'44'           TOO LONG\n*        BH    OBJGENDF            YES, BRANCH\n         MVC   DSNAMEQ(46),DSNAMEO\n         MVC   MEMBER(10),MEMO\n         MVC   PSWD,BLANKS\n         B     DSNOA\nOBJGENDF LA    R4,DSNOPDE          POINT TO DEFAULT PDE\n         XC    0(20,R4),0(R4)      CLEAR IT\n         LA    R1,DSNOOPB          POINT TO DEFAULT OPERAND BUFFER\n         ST    R1,0(,R4)\n         MVC   0(4,R1),=C'TEMP'    DEFAULT OBJECT(TEMP)\n         MVI   5(R4),4             LENGTH 4\n         CLI   MSGKW+1,3           IS NOMSG SPECIFIED\n         BE    *+8                 YES,\n         MVI   MSGKW+1,1           NO, FORCE MSG\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE OBJECT DATA SET                      *\n*                                                          *\n************************************************************\n         SPACE\nOBJDS    LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNO1               YES, BRANCH\n         STH   R1,DSNAMEO          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEO+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNO1    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEO\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'OBJ'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         MVC   MEMO(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNO2               NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNO2               YES, BRANCH\n         STH   R1,MEMO             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   MEMO+2(0),0(R15)    (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\nDSNO2    EQU   *\n         MVC   MEMBER(10),MEMO\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNO3               NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNO3               YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   PSWD(0),0(R15)      (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNO3    EQU   *\n         SPACE\nDSNOA    LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08MNM,MEMBER+2\n         MVC   DA08PSWD,PSWD\n         XC    PSWD,PSWD\n         OI    DA08DSP1,DA08OLD    DISP=OLD\n         CLI   MODKW+1,1           MOD REQUESTED\n         BNE   *+8                 NO\n         MVI   DA08DSP1,DA08MOD    YES\n         BAL   R14,CALLDAIR        ALLOCATE OBJECT DATA SET\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   DSNONEW             NO, BRANCH\n         MVC   DDLIN,DA08DDN\n         SPACE\n         TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNOPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BNE   DSNOOK              YES, BRANCH\n         B     ERRPDS              ERROR, MEMBER NAME OMITTED\nDSNOPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNOOK   EQU   *\n         SPACE\n         CLI   MSGKW+1,1\n         BNE   OBJX\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(24,R15),=C' WILL BE USED FOR OBJECT'\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     OBJX\n         SPACE\nDSNONEW  CH    R15,=H'8'           IS DAIR RETURN CODE 8\n         BE    DSNONEW1            YES, BRANCH\n         B     ERRDAIR             NO, UNRECOVERABLE PROBLEM\nDSNONEW1 CLC   DA08DARC(4),=X'17080008' WAS IT BECAUSE NOT IN CATALOG\n         BNE   ERRDAIR             NO, UNRECOVERABLE PROBLEM\n         MVI   DA08DSP1,DA08NEW\n         MVI   DA08DPS2,DA08CAT\n         MVI   DA08DPS3,DA08CATL\n         MVC   DA08PQTY,=F'01'\n         MVC   DA08SQTY,=F'07'\n         OI    DA08CTL,DA08TRKS\n         MVC   DA08BLK,=F'800'\n         CLI   DA08MNM,C' '        IS MEMBER SPECIFIED\n         BE    *+10                NO\n         MVC   DA08DQTY,=F'1'      YES, DIRECTORY SPACE\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET NEW\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   ERRDAIR             NO, BRANCH\n         MVC   DDLIN,DA08DDN\n         SPACE\n         CLI   MSGKW+1,1           MSG\n         BNE   OBJX                NO, BRANCH\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(28,R15),=C' HAS BEEN CREATED FOR OBJECT'\n         LA    R15,28(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         SPACE\nOBJX     EQU   *\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT1 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVC   DSNAMEQ(46),UT1DSN\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         MVI   DA08PQTY+3,10       10 TRACKS\n         MVI   DA08SQTY+3,10       10 TRACKS\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR        ALLOCATE SYSUT1 WORK FILE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT1,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n         AIF   (&H).HH01           BYPASS SYSUT2 SYSUT3\n         AIF   (&G).GG01           BYPASS MREF\n         SPACE\n************************************************************\n*                                                          *\n*         IF MREF, ALLOCATE DDNAME MACREF                  *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   MREFKV,MREFKW\n         CLI   MREFKW+1,1\n         BNE   MREFX\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08\n         MVC   DA08DDN,=CL8'MACREF'\n         OI    DA08CTL,DA08DMMY    DUMMY\n         BAL   R14,CALLDAIR        ALLOCATE MACREF DUMMY\n*        LTR   R15,R15             IF IT FAILS, ITS EITHER DUE TO\n*        BNZ   ERRDAIR             DYNAMNBR TOO SMALL OR ALREADY ALLOC\n         DROP  R5                  DAPB08\nMREFX    EQU   *\n.GG01    ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT2 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVI   DSNAMEQ+2+3,C'2'    CHANGE &UT1 TO &UT2\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         MVI   DA08PQTY+3,10       10 TRACKS\n         MVI   DA08SQTY+3,10       10 TRACKS\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT2,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT3 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVI   DSNAMEQ+2+3,C'3'    CHANGE &UT2 TO &UT3\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         MVI   DA08PQTY+3,10       10 TRACKS\n         MVI   DA08SQTY+3,10       10 TRACKS\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT3,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n.HH01    ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        BUILD ASSEMBLER PARMS                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,PARMLEN+1\n         SPACE\n         APPEND NODECK                  ALWAYS\n         SPACE\n         CLI   OBJKW+1,1                OBJECT\n         BNE   *+14\n         APPEND OBJECT\n         SPACE\n         CLI   OBJKW+1,2                NOOBJECT\n         BNE   *+14\n         APPEND NOOBJECT\n         SPACE\n         CLI   LISTKW+1,1               LIST\n         BNE   *+14\n         APPEND LIST\n         SPACE\n         CLI   LISTKW+1,2               NOLIST\n         BNE   *+14\n         APPEND NOLIST\n         SPACE\n         CLI   TERMKW+1,1               TERM\n         BNE   *+14\n         APPEND TERM\n         SPACE\n         CLI   TERMKW+1,2               NOTERM\n         BNE   *+14\n         APPEND NOTERM\n         SPACE\n         CLI   ESDKW+1,1                ESD\n         BNE   *+14\n         APPEND ESD\n         SPACE\n         CLI   ESDKW+1,2                NOESD\n         BNE   *+14\n         APPEND NOESD\n         SPACE\n         CLI   RLDKW+1,1                RLD\n         BNE   *+14\n         APPEND RLD\n         SPACE\n         CLI   RLDKW+1,2                NORLD\n         BNE   *+14\n         APPEND NORLD\n         SPACE\n         CLI   RENTKW+1,1               RENT\n         BNE   *+14\n         APPEND RENT\n         SPACE\n         CLI   RENTKW+1,2               NORENT\n         BNE   *+14\n         APPEND NORENT\n         SPACE\n         CLI   TESTKW+1,1               TEST\n         BNE   *+14\n         APPEND TEST\n         SPACE\n         CLI   TESTKW+1,2               NOTEST\n         BNE   *+14\n         APPEND NOTEST\n         SPACE\n         CLI   XRESKW+1,1               XREF(FULL)\n         BNE   *+14\n         APPEND XREFF\n         SPACE\n         CLI   XRESKW+1,2               XREF(SHORT)\n         BNE   *+14\n         APPEND XREFS\n         SPACE\n         CLI   XREFKW+1,2               NOXREF\n         BNE   *+14\n         APPEND NOXREF\n         SPACE\n         CLI   ALIGNKW+1,1              ALIGN\n         BNE   *+14\n         APPEND ALIGN\n         SPACE\n         CLI   ALIGNKW+1,2              NOALIGN\n         BNE   *+14\n         APPEND NOALIGN\n         SPACE\n         CLI   LINEKW+1,1               LINECOUNT(55)\n         BNE   LINEX\n         APPEND LINCOUNT\n         L     R14,LINE\n         LH    R1,LINE+4\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\nLINEX    EQU   *\n         SPACE\n         CLI   FLAGKW+1,1               FLAG(0)\n         BNE   FLAGX\n         APPEND FLAG\n         L     R14,FLAGLV\n         LH    R1,FLAGLV+4\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\nFLAGX    EQU   *\n         SPACE\n         CLI   SYSPKW+1,1               SYSPARM()\n         BNE   SYSPX\n         APPEND SYSPARM\n         L     R14,SYSP\n         LH    R1,SYSP+4\n         LTR   R1,R1                    IS IT NULL STRING\n         BZ    SYSPN                    YES, BRANCH\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\nSYSPN    MVI   0(R15),C')'\n         LA    R15,1(,R15)\nSYSPX    EQU   *\n         SPACE\n         AIF   (&H).HH02                SKIP PARMS NOT IN H\n         AIF   (&G).GG02                SKIP PARMS NOT IN G\n         SPACE\n         CLI   STMTKW+1,1               STMT\n         BNE   *+14\n         APPEND STMT\n         SPACE\n         CLI   STMTKW+1,2               NOSTMT\n         BNE   *+14\n         APPEND NOSTMT\n         SPACE\n         CLI   NUMKW+1,1                NUMBER\n         BNE   *+14\n         APPEND NUM\n         SPACE\n         CLI   NUMKW+1,2                NONUM\n         BNE   *+14\n         APPEND NONUM\n         SPACE\n         AGO   .HH02X\n.GG02    ANOP                           G PARMS NOT IN F\n         SPACE\n         CLI   BATCHKW+1,1              BATCH\n         BNE   *+14\n         APPEND BATCH\n         SPACE\n         CLI   BATCHKW+1,2              NOBATCH\n         BNE   *+14\n         APPEND NOBATCH\n         SPACE\n         AGO   .HH02X\n.HH02    ANOP                           H PARMS NOT IN F\n         SPACE\n         CLI   BATCHKW+1,1              BATCH\n         BNE   *+14\n         APPEND BATCH\n         SPACE\n         CLI   BATCHKW+1,2              NOBATCH\n         BNE   *+14\n         APPEND NOBATCH\n         SPACE\n.HH02X   ANOP\n         SPACE\n         B     ENDPARMS\n         SPACE\nESD      DC    C',ESD'\nNOESD    DC    C',NOESD'\nRLD      DC    C',RLD'\nNORLD    DC    C',NORLD'\nDECK     DC    C',DECK'\nNODECK   DC    C',NODECK'\nFLAG     DC    C',FLAG('\nLIST     DC    C',LIST'\nNOLIST   DC    C',NOLIST'\nRENT     DC    C',RENT'\nNORENT   DC    C',NORENT'\nTERM     DC    C',TERM'\nNOTERM   DC    C',NOTERM'\nTEST     DC    C',TEST'\nNOTEST   DC    C',NOTEST'\nXREFF    DC    C',XREF(FULL)'\nXREFS    DC    C',XREF(SHORT)'\nNOXREF   DC    C',NOXREF'\nALIGN    DC    C',ALIGN'\nNOALIGN  DC    C',NOALIGN'\nOBJECT   DC    C',OBJECT'\nNOOBJECT DC    C',NOOBJECT'\nSYSPARM  DC    C',SYSPARM('\nLINCOUNT DC    C',LINECOUNT('\n         AIF   (&H).HH03                SKIP PARMS NOT IN H\n         AIF   (&G).GG03                SKIP PARMS NOT IN G\nNUM      DC    C',NUM'\nNONUM    DC    C',NONUM'\nSTMT     DC    C',STMT'\nNOSTMT   DC    C',NOSTMT'\n         AGO   .HH03X\n.GG03    ANOP                           G PARMS NOT IN F\nBATCH    DC    C',BATCH'\nNOBATCH  DC    C',NOBATCH'\n         AGO   .HH03X\n.HH03    ANOP                           H PARMS NOT IN F\nBATCH    DC    C',BATCH'\nNOBATCH  DC    C',NOBATCH'\n.HH03X   ANOP\n         SPACE\nENDPARMS LA    R14,PARMLEN+2       ADDRESS FIRST BYTE OF PARM DATA\n         SR    R15,R14             COMPUTE LENGTH OF PARM DATA\n         BNP   *+8                 SHOULD ALWAYS BE POSITIVE\n         STH   R15,PARMLEN         SET LENGTH PREFIX IN PARM FIELD\n         SPACE\n         LA    R1,PARMPTR          GET ADDRESS OF PARAMETER LIST\n         LA    R15,PARMLEN         GET ADDRESS OF PARM FIELD\n         ST    R15,0(,R1)          STORE IT AS FIRST PARAMETER\n         LA    R15,DDNAMES         GET ADDRESS OF DDNAMES\n         ST    R15,4(,R1)          STORE IT AS SECOND PARAMETER\n         OI    4(R1),X'80'         FLAG SECOND PARAMETER AS LAST\n         LA    R14,DDLEN           GET LENGTH OF DDNAME LIST\n         STH   R14,0(,R15)         STORE IT IN FIRST HALFWORD\n         SPACE\n         CLI   SHOWKW+1,1\n         BNE   SHOWX\n         LA    R1,PARMLEN+2\n         LH    R0,PARMLEN\n         BAL   R14,PUTLINE\nSHOWX    EQU   *\n         SPACE\n*                                  FREE THE SPACE GETMAINED BY PARSE\n         IKJRLSA MYANS\n         XC    MYANS,MYANS         INDICATE PARSE SPACE IS FREED\n         SPACE\n         MVC   PDSDCBW(PDSDCBL),PDSDCB  SO SECOND LOAD WONT NEED MODEL\n         SPACE\n         CLI   XCTLKV+1,1          ARE WE GOING TO XCTL\n         BNE   STAYHERE            NO, BRANCH\n         SPACE\n         L     R13,4(,R13)         POINT BACK TO OLD SAVEAREA\n         LR    R1,R9               PASS THE GETMAINED AREA\n         MVC   LINKNAME,=CL8'&NAME2'\n         XCTL  EPLOC=LINKNAME,SF=(E,LINKAREA)\n         SPACE\nSTAYHERE EQU   *\n.BETA03  ANOP\n         EJECT\n************************************************************\n*                                                          *\n*         SET UP AN ESTAE EXIT WHILE ASSEMBLING            *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,STAEEXIT         POINT TO ESTAE EXIT\n         LA    R1,STAEMFLW         POINT TO LIST FORM OF ESTAE\n         MVC   0(STAEMFLL,R1),STAEMFL  INITIALIZE IT\n         SPACE\n         ESTAE (R6),PARAM=(R9),MF=(E,(1))\n         SPACE\n************************************************************\n*                                                          *\n*         IF DDNAME ASMFLIB IS AROUND, USE IT              *\n*                                                          *\n************************************************************\n         SPACE\n         SLR   R6,R6               INDICATE NO DCB\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,12(,R1)          TIOT\n         LA    R1,24(,R1)          TIOT+24\nDDLOOP   CLI   0(R1),0             END OF TIOT\n         BE    DDNOTF              YES, BRANCH\n         CLC   4(8,R1),=CL8'&NAMEL'\n         BE    DDFOUND\n         SLR   R15,R15\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\nDDFOUND  L     R15,16(,R1)         TIOEFSRT-1\n         CLI   18(R15),X'20'       DASD\n         BNE   DDNOTF\n         LA    R6,PDSDCBW\n         MVC   DDNAM(8,R6),4(R1)   PUT DDNAME IN DCB\n         MVI   OPEN,X'80'\n         OPEN  ((R6),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R6),X'10'     WAS OPEN SUCCESSFUL\n         BO    *+6                 YES\n         SR    R6,R6               NO\nDDNOTF   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         INVOKE THE ASSEMBLER                             *\n*                                                          *\n************************************************************\n         SPACE\n         AIF   (&H).HH04\n         AIF   (&G).GG04\n         MVC   LINKNAME,=CL8'IFOX00'\n         CLI   MREFKV+1,1          MREF\n         BNE   *+8                 NO\n         MVI   LINKNAME,C'A'       YES, INVOKE AFOX00 INSTEAD\n         LA    R1,=C'ASSEMBLER (XF) PROCEEDING'\n         LA    R0,25\n         AGO   .HH04X\n.GG04    ANOP\n         MVC   LINKNAME,=CL8'ASMGASM'\n         LA    R1,=C'ASSEMBLER G PROCEEDING'\n         LA    R0,22\n         AGO   .HH04X\n.HH04    ANOP\n         MVC   LINKNAME,=CL8'IEV90'\n         LA    R1,=C'ASSEMBLER H PROCEEDING'\n         LA    R0,22\n.HH04X   ANOP\n         BAL   R14,PUTLINE\n         SPACE\n         BAL   R14,STIMER          START TIMING THE ASSEMBLY\n         SPACE\n         CLI   DEBUGKV+1,1         DEBUGGING?\n         BE    *+8                 YES, LET ABENDS ABEND\n         MVI   STAEOPT,1           NO, TRY TO RECOVER\n         LA    R1,PARMPTR\n         LTR   R6,R6               IS THERE A TASKLIB\n         BNZ   ATTACH              YES, BRANCH\n         SPACE\n         LINK  EPLOC=LINKNAME,SF=(E,LINKAREA),DCB=(R6)\n         SPACE\n         STH   R15,RC\n         B     DETACHED\n         SPACE\nATTACH   MVC   ATCHAREA(ATCHAREL),ATCHAREM\n         XC    ATCHECB,ATCHECB\n         ATTACH EPLOC=LINKNAME,SF=(E,ATCHAREA),DCB=(R6),               X\n               TASKLIB=(R6),ECB=ATCHECB\n         ST    R1,ATCHTCBP        SAVE TCB POINTER\n         WAIT  ECB=ATCHECB\n         LA    R1,ATCHTCBP\n         DETACH (1)\n         L     R15,ATCHECB\n         STH   R15,RC\n         SPACE\nDETACHED MVI   STAEOPT,0           TURN RECOVERY OFF\n         BAL   R14,TTIMER          STOP TIMING THE ASSEMBLY\n         SPACE\n         ESTAE 0                   CANCEL THE ESTAE\n         SPACE\n         LTR   R6,R6               WAS THERE A DCB\n         BZ    LINKRC              NO\n         MVI   OPEN,X'80'          YES, CLOSE IT\n         CLOSE ((R6)),MF=(E,OPEN)\n         XC    LINKAREA(8),LINKAREA\nLINKRC   LH    R15,RC\n         LTR   R15,R15\n         BNZ   ERRLINK\n         B     EXIT0\n         SPACE\n************************************************************\n*                                                          *\n*         COMPUTE CPU TIME USED BY ASSEMBLER               *\n*                                                          *\n************************************************************\n         SPACE\nSTIMER   CLI   TIMEKV+1,2          NOTIME\n         BER   R14\n         ST    R14,TTIMERS\n         LA    R1,INTERVAL\n         STIMER TASK,TUINTVL=(1)\n         L     R14,TTIMERS\n         BR    R14\n         SPACE\nTTIMER   CLI   TIMEKV+1,2          NOTIME\n         BER   R14\n         STM   R14,R15,TTIMERS\n         TTIMER CANCEL\n         LTR   R0,R0               ANYTHING IN R0?\n         BZ    CPUX                NO, BRANCH\n         L     R1,INTERVAL\n         SR    R1,R0               GET ELAPSED CPU TIME (IN TU'S)\n         M     R0,=F'2604166'      NUMBER OF .00001 MICROSECONDS\n         D     R0,=F'1000000000'   HUNDREDTHS OF A SECOND\n         C     R0,=F'0500000000'   ROUND UP IF REMAINDER GT HALF\n         BNH   *+8\n         A     R1,=F'1'\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK(9),=C'CPU TIME:'\n         LA    R15,MSGWK+10\n         CVD   R1,DOUBLE\n         MVC   0(9,R15),=X'4020202021204B2020'\n         ED    0(9,R15),DOUBLE+4\nCPUSUP1  CLI   0(R15),C' '\n         BNE   CPUSUP1A\n         MVC   0(8,R15),1(R15)     LEFT ADJUST\n         MVI   8(R15),C' '\n         B     CPUSUP1\nCPUSUP1A CLI   0(R15),C' '\n         BE    CPUSUP1B\n         LA    R15,1(,R15)\n         B     CPUSUP1A\nCPUSUP1B MVC   1(7,R15),=C'SECONDS'\n         LA    R15,8(,R15)\n         LR    R0,R15              POINT PAST LAST BYTE OF MESSAGE\n         LA    R1,MSGWK            POINT TO MESSAGE\n         SR    R0,R1               GET LENGTH OF MESSAGE IN R0\n         BAL   R14,PUTLINE\nCPUX     LM    R14,R15,TTIMERS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         CALL DYNAMIC ALLOCATION                          *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR LR    R8,R14\n         LA    R1,MYDAPL\n         AIF   (NOT &MVS).SKIP4\n         L     R15,16              CVTPTR\n         TM    732(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   DAIRLINK               THEN DO LINK, NOT CALL\n         L     R15,732(,R15)       CVTDAIR\n         BALR  R14,R15             CALL IKJDAIR\n         B     DAIREXIT            SKIP AROUND LINK\nDAIRLINK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIREXIT EQU   *\n         LR    R14,R8\n         BR    R14\n         SPACE\n         AIF   (&BETA).BETA04\n         SPACE\n************************************************************\n*                                                          *\n*         INSERT A DATA SET NAME IN A MESSAGE              *\n*                                                          *\n************************************************************\n         SPACE\nDSNOUT   MVC   0(9,R15),=C'DATA SET '\n         LA    R15,9(,R15)\n         LH    R1,DSNAMEQ\n         LTR   R1,R1\n         BZ    DSNOUTM\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAMEQ+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         SPACE\nDSNOUTM  LH    R1,MEMBER\n         LTR   R1,R1\n         BZR   R14\n         MVI   0(R15),C'('\n         BCTR  R1,0\n         B     *+10\n         MVC   1(0,R15),MEMBER+2\n         EX    R1,*-6\n         LA    R15,2(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\n         BR    R14\n         SPACE\n.BETA04  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,MYREGS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,MYREGS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         TERMINATION                                      *\n*                                                          *\n************************************************************\n         SPACE\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\nEXIT     STH   R15,RC\n         NC    MYANS,MYANS         IS PARSE SPACE FREED\n         BZ    EXITRLSA            YES, BRANCH\n         IKJRLSA MYANS\n         XC    MYANS,MYANS         INDICATE PARSE SPACE IS FREED\nEXITRLSA EQU   *\n         SPACE\n         USING DAPB18,R5\n         CLI   DDLIN,0\n         BE    FFLIN\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDLIN\n         BAL   R14,CALLDAIR\nFFLIN    EQU   *\n         CLI   DDPRINT,0\n         BE    FFPRINT\n         CLI   FREEOPT,2           PFILE\n         BE    FFPRINT             YES, LEAVE ALLOCATED\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDPRINT\n         CLI   FREEOPT,1           SYSOUT?\n         BNE   *+10                NO\n         MVC   DA18SCLS(1),SOUT    YES, INSERT CLASS\n         BAL   R14,CALLDAIR\nFFPRINT  EQU   *\n         CLI   DDUT1,0\n         BE    FFUT1\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT1\n         BAL   R14,CALLDAIR\nFFUT1    EQU   *\n         AIF   (&H).HH06\n         CLI   DDUT2,0\n         BE    FFUT2\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT2\n         BAL   R14,CALLDAIR\nFFUT2    EQU   *\n         CLI   DDUT3,0\n         BE    FFUT3\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT3\n         BAL   R14,CALLDAIR\nFFUT3    EQU   *\n.HH06    ANOP\n         CLI   CONLNUM+1,1         ANY LIBRARIES ALLOCATED\n         BL    FFLIBX              NO, BRANCH\n         CLI   CONLSW,1            HAVE THEY BEEN CONCATENATED\n         BNE   FFLIBD              NO, BRANCH\n         LR    R6,R5\n         USING DAPB10,R6\n         MVC   DA10CD(MODEL10L),MODEL10\n         MVC   DA10DDN,DDLIB\n         BAL   R14,CALLDAIR        DECONCATENATE\n         LTR   R15,R15             WAS IT SUCCESSFUL\n         BNZ   FFLIBX              NO, BRANCH\n         DROP  R6\nFFLIBD   L     R6,CONLPTR\n         LH    R4,CONLNUM          GET NUMBER OF DDNAMES\nFFLIBC   SH    R6,=H'8'\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,0(R6)\n         BAL   R14,CALLDAIR        FREE THE DECONCATENATED DDNAME\n         BCT   R4,FFLIBC           LOOP FOR NEXT DDNAME\nFFLIBX   EQU   *\n         CLI   CONINUM+1,1         ANY SYSIN'S ALLOCATED\n         BL    FFINPX              NO, BRANCH\n         CLI   CONISW,1            HAVE THEY BEEN CONCATENATED\n         BNE   FFINPD              NO, BRANCH\n         LR    R6,R5\n         USING DAPB10,R6\n         MVC   DA10CD(MODEL10L),MODEL10\n         MVC   DA10DDN,DDIN\n         BAL   R14,CALLDAIR        DECONCATENATE\n         LTR   R15,R15             WAS IT SUCCESSFUL\n         BNZ   FFINPX              NO, BRANCH\n         DROP  R6\nFFINPD   L     R6,CONIPTR\n         LH    R4,CONINUM          GET NUMBER OF DDNAMES\nFFINPC   SH    R6,=H'8'\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,0(R6)\n         BAL   R14,CALLDAIR        FREE THE DECONCATENATED DDNAME\n         BCT   R4,FFINPC           LOOP FOR NEXT DDNAME\nFFINPX   EQU   *\n         DROP  R5                  DAPB18\n         CLI   RC+1,0              IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\nEXITX    LH    R15,RC\n         LR    1,R13               SET UP FREE ADDRESS\n         L     R0,SIZE\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nEXLST    EQU   36                  DCB OFFSET\nDDNAM    EQU   40                  DCB OFFSET\nOFLGS    EQU   48                  DCB OFFSET\nINTERVAL DC    F'1658880000'      TIMER UNITS IN 12 HRS APPROX\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nATCHAREM ATTACH EPLOC=99,ECB=88,DCB=77,TASKLIB=66,SF=L\nATCHAREL EQU   *-ATCHAREM\n         SPACE\nMODEL10  DC    X'0010',XL6'00',CL8' '\nMODEL10L EQU   *-MODEL10\nMODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '\nMODEL18L EQU   *-MODEL18\n         AIF   (&BETA).BETA05\nMODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '\nMODEL08L EQU   *-MODEL08\nMODEL1C  DC    X'001C',XL6'0',CL16' '\nMODEL1CL EQU   *-MODEL1C\nMODEL30  DC    X'0030',XL10'0',CL24' ',XL12'0',CL14' ',XL2'0',CL8' '\nMODEL30L EQU   *-MODEL30\n         SPACE\nMACLIB   DC    H'11',CL44'SYS1.MACLIB'\nUT1DSN   DC    H'4',CL44'&&UT1'\n*              BEWARE IF YOU DONT HAVE PRE-ALLOCATED &SYSUT1,\n*              THE 'LINK' COMMAND ALLOCATES A SMALL &SYSUT1\n*              AND DOESNT FREE IT, SO A SUBSEQUENT USE OF\n*              THIS COMMAND WILL PICK UP THE DATA SET ALLOCATED\n*              BY 'LINK' AND THE SPACE WILL NOT BE ENOUGH.\n*              THAT IS WHY WE USE &UT1 AND NOT &SYSUT1.\nDSNNULL  DC    H'0',CL44' '\nMEMNULL  DC    H'0',CL8' '\n         PRINT NOGEN\nPDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R\nPDSDCBL  EQU   *-PDSDCB\n         PRINT GEN\n.BETA05  ANOP\nSTAEMFL  ESTAE R0,MF=L\nSTAEMFLL EQU   *-STAEMFL\n         LTORG\nBLANKS   DC    CL8' '\n         DC    0D'0'\n         SPACE\n         AIF   (&BETA).BETA06\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         LA    R1,MYDFPARM\n*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,4(,R1)          DFRCP\n         LA    R15,MYDAPL\n         ST    R15,0(,R1)          DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,8(,R1)          DFJEFF02\n         LA    R15,1               DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,12(,R1)         DFIDP\n         ST    R2,16(,R1)          DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n*        DROP  R1                  DFDSECTD\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n.BETA06  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        ERROR HANDLERS                                    *\n*                                                          *\n************************************************************\n         SPACE\n         AIF   (&BETA).BETA07\nERRCONI  LA    R1,MSGCONI\n         LA    R0,L'MSGCONI\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRCONL  LA    R1,MSGCONL\n         LA    R0,L'MSGCONL\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMEML  LA    R1,MSGMEML\n         LA    R0,L'MSGMEML\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nMSGCONI  DC    C'MAXIMUM OF 10 INPUT DATA SETS EXCEEDED'\nMSGCONL  DC    C'MAXIMUM OF 10 MACRO LIBRARIES EXCEEDED'\nMSGMEML  DC    C'MEMBER NAME NOT ALLOWED IN LIB DSNAMES'\n         SPACE\nERRDEF   CVD   R15,DOUBLE\n         MVC   MSGWK(17),=C'ERROR QUALIFYING '\n         LA    R15,MSGWK+17\n         BAL   R14,DSNOUT\n         MVC   0(8,R15),=C'  CODE= '\n         LA    R15,7(,R15)\n         MVI   RC+1,0\n         B     ERRNUM\n         SPACE\nERRCAT   LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(17,R15),=CL17' IS NOT CATALOGED'\n         LA    R15,17(,R15)\n         B     ERRPDSM\nERRPDS   LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(39,R15),=CL39' IS PARTITIONED BUT NO MEMBER SPECIFIED'\n         LA    R15,39(,R15)\n         B     ERRPDSM\nERRPDSN  LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(19,R15),=CL19' IS NOT PARTITIONED'\n         LA    R15,19(,R15)\nERRPDSM  LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMEM   MVC   MSGWK(7),=C'MEMBER '\n         LA    R15,MSGWK+7\n         LH    R1,MEMBER\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),MEMBER+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(14,R15),=C' NOT FOUND IN '\n         LA    R15,14(,R15)\n         XC    MEMBER(2),MEMBER\n         BAL   R14,DSNOUT\n         B     ERRPDSM\n         SPACE\nERRDAIR  CLI   DEBUGKV+1,1\n         BNE   *+8\n         EX    R0,*                PROGRAM CHECK\n         BAL   R14,DAIRFAIL\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB         RESTORE DAPB POINTER IN CASE CONCAT\n         DROP  R1                  DAPL\n         B     EXIT12\n         SPACE\nMSG01    DC    C'PARSE ERROR'\n.BETA07  ANOP\n         SPACE\nERRLINK  CVD   R15,DOUBLE\n         STH   R15,RC\n         LA    R15,MSGWK\n         MVC   0(14,R15),=CL14'RETURN CODE IS'\n         LA    R15,14(,R15)\n         MVI   0(R15),C' '\nERRNUM   UNPK  1(3,R15),DOUBLE+6(2)\n         OI    3(R15),X'F0'\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         LA    R15,4(,R15)\n         CLI   RC+1,20             IS RETURN CODE 20\n         BNE   ERRLINK2\n         MVC   0(L'MSGSIZE,R15),MSGSIZE\n         LA    R15,L'MSGSIZE(,R15)\nERRLINK2 LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTLINE\n         LH    R15,RC\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CONSTANTS FOR ERROR HANDLERS                     *\n*                                                          *\n************************************************************\n         SPACE\nMSGSIZE  DC    C'(MIGHT BE DUE TO REGION SIZE TOO SMALL)'\nHEXTR    DC    C'0123456789ABCDEF'\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        ESTAE EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\n         CNOP  0,8\n         USING *,R15\nSTAEEXIT EQU   *\n         CH    R0,STAE12  SDWA (SYSTEM DIAGNOSTIC WORK AREA)\n         BNE   STAEXWA             YES - BRANCH\n         LR    R0,R9               SAVE R9\n         LR    R9,R2               RESTORE WORK AREA BASE\n         STM   R0,R15,STAESAVE     SAVE ALL REGS\n         ST    R0,STAESAVE+36      STORE ORIGINAL VALUE OF R9\n         LA    R0,12               RESTORE R0\n         ST    R0,STAESAVE         AND SAVE ITS ORIGINAL VALUE\n         LM    R10,R12,BASES       RESTORE PROGRAM BASES\n         DROP  R15                 DROP TEMPORARY BASE REG\n         ST    R1,ABEND            SAVE ABEND COMPLETION CODE\n         CLI   STAEOPT,0           DO WE WANT TO RECOVER\n         BE    STAERC0             NO, BRANCH\n         LA    R0,STAERETR         POINT TO RETRY ROUTINE\n         LA    R15,4               INDICATE RETRY\n         LM    R1,R14,STAESAVE     RESTORE OTHER REGS\n         BR    R14                 RETURN TO SYSTEM\n         SPACE\nSTAERC0  LM    R0,R14,STAESAVE\n         SR    R15,R15             CONTINUE TERMINATION\n         BR    R14\n         SPACE\nSTAE12   DC    H'12'\n         SPACE\n         CNOP  0,8\n         USING SDWA,R1\nSTAEXWA  STM   14,12,12(13)        SAVE REGISTERS\n         L     R9,SDWAPARM         RESTORE WORK AREA BASE\n         LM    R10,R12,BASES       RESTORE PROGRAM BASES\n         MVC   ABEND(4),SDWACMPC-1 MOVE ABEND CODE\n         L     R15,SDWAGR15        GET ABEND RC\n         ST    R15,ABENDRC         SAVE IT\n         CLI   STAEOPT,0           DO WE WANT TO RECOVER\n         BE    STAERW0             NO, BRANCH\n         ST    R9,SDWAGR09         SET UP FOR SETRP RETREGS\n         STM   R10,R12,SDWAGR10    SET UP FOR SETRP RETREGS\n         SETRP RC=4,DUMP=NO,RETADDR=STAERETY,                          +\n               RETREGS=YES,REGS=(14,12)\n         SPACE\nSTAERW0  SETRP RC=0,REGS=(14,12)\n         SPACE\n************************************************************\n*                                                          *\n*        STAE RETRY ROUTINE                                *\n*                                                          *\n************************************************************\n         SPACE\n         CNOP  0,8\nSTAERETR EQU   *\n         L     R9,0(,R1)\n         LM    R10,R12,BASES\nSTAERETY EQU   *\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(70),MSGWK\n         MVC   MSGWK(8),=C'ABEND (S'\n         L     R1,ABEND\n         N     R1,=A(X'00FFF000')\n         BZ    STAERETU\n         UNPK  MSGWK+8(5),ABEND+1(3)    ABCXYZ TO FAFBFCFXZY\n         TR    MSGWK+8(3),HEXTR-240     FAFBFC TO C1C2C3\n         MVC   MSGWK+11(2),=C') '\n         CLC   MSGWK+8(3),=C'106'\n         BE    STAERETS                 REGION SIZE TOO SMALL\n         CLC   MSGWK+8(3),=C'804'\n         BNE   STAERETM\nSTAERETS MVC   MSGWK+13(L'MSGSIZE),MSGSIZE\n         B     STAERETM\nSTAERETU MVI   MSGWK+7,C'U'\n         L     R1,ABEND\n         N     R1,=A(X'00000FFF')\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+8(4),DOUBLE+5(3)\n         MVI   MSGWK+12,C')'\nSTAERETM LA    R1,MSGWK\n         LA    R0,52\n         BAL   R14,PUTLINE\n         LA    R6,PDSDCBW\n         TM    OFLGS(R6),X'10'     IS A DCB OPEN\n         BNO   EXIT12              NO, BRANCH\n         MVI   OPEN,X'80'          YES, CLOSE IT\n         CLOSE ((R6)),MF=(E,OPEN)\n         XC    LINKAREA(8),LINKAREA\n         B     EXIT12\n         SPACE\n*               ABENDS MOST LIKELY TO HAPPEN\n*               806-4 MODULE NOT FOUND (ASSEMBLER H NOT INSTALLED)\n*               106-C GETMAIN IN FETCH FAILED (REGION TOO SMALL)\n*               804-1 GETMAIN IN ASSEMBLER H FAILED (REGION TOO SMALL)\n         SPACE\n         LTORG\n         DC    0D'0'\n         SPACE\n         AIF   (&BETA).BETA08\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nASMHPCL  IKJPARM\nDSNI     IKJPOSIT DSNAME,LIST,PROMPT='INPUT DATA SET NAME'\nMACKW    IKJKEYWD\n         IKJNAME 'MACLIB'\n         IKJNAME 'NOMACLIB'\nLIBKW    IKJKEYWD DEFAULT='LIB(''SYS1.MACLIB'')'\n         IKJNAME 'LIB',SUBFLD=LIBSF\n         IKJNAME 'NOLIB'\nPRINTKW  IKJKEYWD DEFAULT='PRINT'\n         IKJNAME 'PRINT',SUBFLD=PRINTSF\n         IKJNAME 'P',SUBFLD=PRINTSF\n         IKJNAME 'NOPRINT'\n         IKJNAME 'SYSOUT',SUBFLD=CLASSSF\n         IKJNAME 'PFILE',SUBFLD=PFILESF\nLISTKW   IKJKEYWD\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\nOBJKW    IKJKEYWD DEFAULT='OBJECT'\n         IKJNAME 'OBJECT',SUBFLD=OBJSF\n         IKJNAME 'NOOBJECT'\n         IKJNAME 'LOAD',SUBFLD=OBJSF\n         IKJNAME 'NOLOAD'\nMODKW    IKJKEYWD\n         IKJNAME 'MOD'\n         IKJNAME 'NOMOD'\nESDKW    IKJKEYWD\n         IKJNAME 'ESD'\n         IKJNAME 'NOESD'\nRLDKW    IKJKEYWD\n         IKJNAME 'RLD'\n         IKJNAME 'NORLD'\nRENTKW   IKJKEYWD\n         IKJNAME 'RENT'\n         IKJNAME 'NORENT'\nTERMKW   IKJKEYWD DEFAULT='TERM'\n         IKJNAME 'TERM'\n         IKJNAME 'NOTERM'\nTESTKW   IKJKEYWD\n         IKJNAME 'TEST'\n         IKJNAME 'NOTEST'\nALIGNKW  IKJKEYWD\n         IKJNAME 'ALIGN'\n         IKJNAME 'NOALIGN'\nXREFKW   IKJKEYWD DEFAULT='XREF'\n         IKJNAME 'XREF',SUBFLD=XREFSF\n         IKJNAME 'NOXREF'\nLINEKW   IKJKEYWD\n         IKJNAME 'LINECOUNT',SUBFLD=LINESF\nFLAGKW   IKJKEYWD\n         IKJNAME 'FLAG',SUBFLD=FLAGSF\nSYSPKW   IKJKEYWD\n         IKJNAME 'SYSPARM',SUBFLD=SYSPSF\n         AIF   (&H).HH07\n         AIF   (&G).GG07\nNUMKW    IKJKEYWD\n         IKJNAME 'NUMBER'\n         IKJNAME 'NONUMBER'\nSTMTKW   IKJKEYWD\n         IKJNAME 'STMT'\n         IKJNAME 'NOSTMT'\nMREFKW   IKJKEYWD\n         IKJNAME 'MREF'\n         IKJNAME 'NOMREF'\n         AGO   .HH07X\n.GG07    ANOP\nBATCHKW  IKJKEYWD\n         IKJNAME 'BATCH'\n         IKJNAME 'NOBATCH'\n         AGO   .HH07X\n.HH07    ANOP\nBATCHKW  IKJKEYWD\n         IKJNAME 'BATCH'\n         IKJNAME 'NOBATCH'\n.HH07X   ANOP\nMSGKW    IKJKEYWD DEFAULT='MSGD'\n         IKJNAME 'MSG'             MESSAGES FOR OBJECT AND PRINT NAMES\n         IKJNAME 'MSGD'            MESSAGES ONLY IF NONSTANDARD DEFAULT\n         IKJNAME 'NOMSG'           MESSAGES NEVER\nTIMEKW   IKJKEYWD DEFAULT='NOTIME'\n         IKJNAME 'TIME'\n         IKJNAME 'NOTIME'\nSHOWKW   IKJKEYWD\n         IKJNAME 'SHOWPARM'\nXCTLKW   IKJKEYWD DEFAULT='$X'\n         IKJNAME '$X'\n         IKJNAME '$NOX'\nDEBUGKW  IKJKEYWD\n         IKJNAME '$DEBUG'\n*\n*         SUBFIELDS\n*\nLIBSF    IKJSUBF\nDSNL     IKJPOSIT DSNAME,LIST,PROMPT='MACRO LIBRARY'\nPRINTSF  IKJSUBF\nDSNP     IKJPOSIT DSTHING\nPFILESF  IKJSUBF\nPFILE    IKJIDENT 'PRINT FILENAME',                                    +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='PRINT FILENAME'\nCLASSSF  IKJSUBF\nCLASS    IKJIDENT 'SYSOUT CLASS',                                      +\n               FIRST=ALPHANUM,MAXLNTH=1,                               +\n               DEFAULT='A'\nOBJSF    IKJSUBF\nDSNO     IKJPOSIT DSTHING\nLINESF   IKJSUBF\nLINE     IKJIDENT 'LINECOUNT',                                         +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +\n               PROMPT='LINECOUNT',VALIDCK=LINEVC\nFLAGSF   IKJSUBF\nFLAGLV   IKJIDENT 'FLAG LEVEL',                                        +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +\n               PROMPT='FLAG LEVEL',VALIDCK=FLAGVC\nXREFSF   IKJSUBF\nXRESKW   IKJKEYWD DEFAULT='SHORT'\n         IKJNAME 'FULL'\n         IKJNAME 'SHORT'\nSYSPSF   IKJSUBF\nSYSP     IKJPOSIT QSTRING,                                             +\n               PROMPT='SYSPARM VALUE'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE VALIDITY CHECK ROUTINES                    *\n*                                                          *\n************************************************************\n         SPACE\n         DC    0D'0'\nLINEVC   STM   14,12,12(13)\n         L     R9,4(,R1)           RESTORE R9\n         LM    R10,R12,BASES       RESTORE BASE REGS\n         L     R2,0(,R1)           POINT R2 TO PDE\n         SR    15,15\n         L     R14,0(,R2)          POINT TO OPERAND\n         LH    R1,4(,R2)           GET LENGTH OF OPERAND\n         BCTR  R1,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R1,R1\n         BZ    LINEVCR4\n         CH    R1,=H'99'\n         BH    LINEVCR4\n         B     LINEVCR\nLINEVCR4 LA    R15,4\nLINEVCR  L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE\n         DC    0D'0'\nFLAGVC   STM   14,12,12(13)\n         L     R9,4(,R1)           RESTORE R9\n         LM    R10,R12,BASES       RESTORE BASE REGS\n         L     R2,0(,R1)           POINT R2 TO PDE\n         SR    15,15\n         L     R14,0(,R2)          POINT TO OPERAND\n         LH    R1,4(,R2)           GET LENGTH OF OPERAND\n         BCTR  R1,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R1,R1\n         BZ    FLAGVCR4\n         CH    R1,=H'255'\n         BH    FLAGVCR4\n         B     FLAGVCR\nFLAGVCR4 LA    R15,4\nFLAGVCR  L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE\n         LTORG\n         DC    0D'0'\n.BETA08  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nSIZE     DS    F\nCPPLPTR  DS    F\nLINKAREA DS    D\nDOUBLE   DS    D\nLINKNAME DS    CL8\nBASES    DS    3F\nRC       DS    H\nQUALRC   DS    C\nSOUT     DS    C\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F\nMYIOPL   DS    4F\nMYDFPB   DS    5F\nMYQUAL   DS    CL8\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE\nMYREGS   DS    4F                 USED BY PUTLINE ROUTINE\nMYDFREGS DS    F\nMYSTPB   DS    0F                 STACK DELETE USES 5 WORDS\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nCONIDAPB DS    3F,10CL8\nCONIDAPX EQU   *\nCONLDAPB DS    3F,10CL8\nCONLDAPX EQU   *\nCONINUM  DS    H\nCONLNUM  DS    H\nCONISW   DS    C\nCONLSW   DS    C\nCONIPTR  DS    F\nCONLPTR  DS    F\nMEMBER   DS    H,CL8               MEMBER NAME FOR MESSAGES\nDSNAMEH  DS    H,CL44              FIRST INPUT DSNAME\nDSNAMEI  DS    H,CL44              INPUT DSNAME\nDSNAMEL  DS    H,CL44              LIB DSNAME\nDSNAMEP  DS    H,CL44              PRINT DSNAME\nDSNAMEO  DS    H,CL44              OBJECT DSNAME\nDSNAMEU  DS    H,CL44              UNQUALIFIED DSNAME\nDSNAMEQ  DS    H,CL44              QUALIFIED DSNAME FOR MESSAGES\nMEMH     DS    H,CL8\nMEMI     DS    H,CL8\nMEMP     DS    H,CL8\nMEMO     DS    H,CL8\nPSWD     DS    CL8\nDSNHQ    DS    C\nDSNIQ    DS    C\nDSNPPDE  DS    0F                  FAKE PDE\nDSNOPDE  DS    6F                  FAKE PDE\nDSNPOPB  DS    0CL8                FAKE CBUF\nDSNOOPB  DS    CL8                 FAKE CBUF\nOPEN     DS    0F\nTTIMERS  DS    2F\nPDSDCBW  DS    0F,88X\nPDSEXLST DS    F\nTIMEKV   DS    H\nDEBUGKV  DS    H\nXCTLKV   DS    H\nMREFKV   DS    H\nABEND    DS    F\nABENDRC  DS    F\nSTAEOPT  DS    C\nSTAEMFLW DS    0F,(STAEMFLL)X\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nATCHAREA DS    0F,(ATCHAREL)X\nATCHECB  DS    F\nATCHTCBP DS    F\n*\nFREEOPT  DS    H\n*\nPARMPTR  DS    2F,H\nPARMLEN  DS    H\nPARM     DS    CL100\n         AIF   (&H).HH09\n         DS    0F,H                VS ASSEMBLER OR G\nDDNAMES  DS    H                   LENGTH\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\nDDLIB    DS    CL8                 IF LIB\nDDIN     DS    CL8\nDDPRINT  DS    CL8                 IF LIST/PRINT\nDDPUNCH  DS    CL8                 IF DECK\nDDUT1    DS    CL8\nDDUT2    DS    CL8\nDDUT3    DS    CL8\nDDLIN    DS    CL8    (SYSGO)      IF OBJECT\nDDTERM   DS    CL8                 IF TERM\nDDLEN    EQU   *-DDNAMES-2\n*\n         AGO   .HH09A\n.HH09    ANOP\n         DS    0F,H                ASSEMBLER H\nDDNAMES  DS    H                   LENGTH\nDDLIN    DS    CL8                 IF OBJECT\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\nDDLIB    DS    CL8                 IF LIB\nDDIN     DS    CL8\nDDPRINT  DS    CL8                 IF LIST/PRINT\nDDPUNCH  DS    CL8                 IF DECK\nDDUT1    DS    CL8\nDDTERM   DS    CL8                 IF TERM\nDDLEN    EQU   *-DDNAMES-2\n*\n.HH09A   ANOP\n         DS    0D\nMSGWK    DS    CL256\n         DS    0D\nSTAESAVE DS    16F\n@DATAL   EQU   *-@DATA\n         SPACE\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP0C\n         SPACE\n         IKJDAP10\n         SPACE\n         IKJDAP18\n         SPACE\n         IKJDAP1C\n         SPACE\n         IKJDAP30\n         SPACE\n*        IKJEFFDF DFDSECT=YES\n         SPACE\n         IHASDWA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH#": {"ttr": 1796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F     THE TSO ASSEMBLER H PROMPTER CALLS ASSEMBLER H USING THE\n   INTERACTIVE FACILITIES OF TSO.\n\n)X ASM  'DSN'   OBJECT/NOOBJECT  PRINT/NOPRINT/SYSOUT  TERM/NOTERM\n             MACLIB/NOMACLIB  LIB('LIBLIST')/NOLIB  TEST/NOTEST\n             RENT/NORENT  BATCH/NOBATCH  ALIGN/NOALIGN  MSG/NOMSG\n             XREF/XREF(FULL)/XREF(SHORT)/NOXREF  ESD/NOESD  RLD/NORLD\n             FLAG('INTEGER')  LINECOUNT('INTEGER')  SYSPARM('STRING')\n\n   NOTE- OBJECT MAY BE FOLLOWED BY- ('DSNAME')\n         PRINT MAY BE FOLLOWED BY- ('DSNAME'/*)\n         SYSOUT MAY BE FOLLOWED BY- ('CLASS')\n\n   REQUIRED- 'DSN'\n   DEFAULTS- OBJECT, PRINT, TERMINAL, MACLIB, NOTEST, NORENT,\n             NOBATCH, ALIGN, XREF(SHORT), ESD, RLD, FLAG(0),\n             LINECOUNT(55), SYSPARM(), LIB('SYS2.MACLIB')\n                                                                       .\n))MSG - INDICATES THAT YOU WANT THE PROMPTER TO SHOW YOU THE\n   DATA SET NAMES WHERE THE PRINT AND OBJECT FILES WILL BE WRITTEN.\n   THIS IS USEFUL UNTIL YOU GET USED TO THE WAY THE PROMPTER BUILDS\n   THE NAMES WHEN YOU DONT SPECIFY THEM.\n                                                                       .\n))OBJECT('DSNAME')  INDICATES THAT THE ASSEMBLER IS TO  PRODUCE\n   AN OBJECT MODULE. IF ('DSNAME') IS PRESENT, IT SPECIFIES THE\n   DATA SET TO CONTAIN THE OBJECT MODULE; OTHERWISE, A DSNAME\n   WILL BE CREATED BASED ON THE SOURCE PROGRAM DSNAME.\n))NOOBJECT  SPECIFIES THAT THE ASSEMBLER IS NOT TO PRODUCE AN\n   OBJECT MODULE.\n                                                                       .\n))PRINT('DSNAME'/*)  SPECIFIES THAT THE ASSEMBLY  LISTING\n   IS TO BE PLACED IN THE DATA SET SPECIFIED BY 'DSNAME' OR\n   *.  THE * MEANS THE LISTING IS TO APPEAR AT THE TERMINAL.  IF\n   ('DSNAME'/*) IS OMITTED, A DSNAME BASED ON THE INPUT DSNAME\n   WILL BE USED.  PRINT IS IGNORED IF NOLIST IS SPECIFIED.\n))SYSOUT('CLASS')  - SPECIFIES THAT THE ASSEMBLY  LISTING\n   IS TO BE PRINTED TO A SYSOUT DATA SET.\n))NOPRINT  INDICATES THE ASSEMBLER IS TO PRODUCE NO LISTING. IF EITHER\n   NOPRINT OR NOLIST IS REQUESTED, NO SYSPRINT LISTING WILL BE CREATED.\n))LIST  SPECIFIES A NORMAL ASSEMBLY LISTING IS TO BE PRODUCED AND\n   PLACED IN THE DATA SET DERIVED FROM THE PRINT OPTION.  LIST IS\n   IGNORED IF NOPRINT IS SPECIFIED.\n))NOLIST  SPECIFIES NO ASSEMBLER LISTING IS TO BE PRODUCED.  IF EITHER\n   NOPRINT OR NOLIST IS REQUESTED, NO SYSPRINT LISTING WILL BE CREATED.\n                                                                       .\n))TERM  SPECIFIES THAT ANY ERROR DIAGNOSTICS GENERATED BY THE\n   ASSEMBLER ARE TO BE PRINTED AT THE TERMINAL.\n))NOTERM  SPECIFIES THAT NO DIAGNOSTIC MESSAGES ARE TO BE PRINTED\n   AT THE TERMINAL (UNLESS THE PRINT DATA SET SPECIFIES THE TERMINAL).\n                                                                       .\n))MACLIB  INDICATES THE STANDARD SYSTEM LIBRARY DATA SET SYS1.MACLIB\n   IS TO BE USED BY THE ASSEMBLER FOR MACRO DEFINITIONS.  SYS1.MACLIB\n   IS CONCATENATED IN FRONT OF ANY DATA SETS IN THE LIB OPTION UNLESS\n   IT IS EXPLICITLY SPECIFIED WITHIN THE LIB OPTION.\n))NOMACLIB  SPECIFIES THAT THE DATA SET  SYS1.MACLIB  IS TO\n   BE USED FOR MACRO DEFINITIONS ONLY IF EXPLICITLY SPECIFIED.\n                                                                       .\n))LIB('LIBLIST')  SPECIFIES A LIST OF LIBRARY DATA SETS\n   TO BE USED BY THE ASSEMBLER.  THE STANDARD LIBRARY DATA SET,\n   SYS1.MACLIB, IS CONCATENATED IN FRONT OF THE DATA SETS SPECIFIED,\n   UNLESS IT IS EXPLICITLY SPECIFIED SOMEWHERE IN 'LIBLIST' OR\n   UNLESS NOMACLIB IS SPECIFIED.                                       .\n                                                                       .\n))TEST  SPECIFIES A SYMBOL TABLE IS TO BE GENERATED WITH THE OBJECT\n   MODULE FOR USE WITH THE TEST COMMAND.\n))NOTEST  SPECIFIES NO SYMBOL TABLE IS TO BE GENERATED WITH THE\n   OBJECT MODULE.\n                                                                       .\n))RENT  SPECIFIES THAT THE ASSEMBLER IS TO CHECK FOR POSSIBLE\n   CODING VIOLATIONS OF RE-ENTRABILITY.\n))NORENT  SPECIFIES THAT NO CHECK IS TO BE MADE BY THE ASSEMBLER\n   FOR POSSIBLE CODING VIOLATIONS OF RE-ENTRABILITY\n                                                                       .\n))BATCH    SPECIFIES THAT MULTIPLE PROGRAMS ARE TO BE ASSEMBLED WITH\n   THIS INVOCATION OF THE ASSEMBLER.\n))NOBATCH  SPECIFIES THAT ONLY THE FIRST PROGRAM (UP TO THE FIRST \"END\"\n   STATEMENT) IS TO BE ASSEMBLED WITH THIS INVOCATION OF THE ASSEMBLER.\n                                                                       .\n))ALIGN  SPECIFIES THAT ALIGNMENT OF DATA IS TO BE DONE ABOVE\n   MINIMUM HARDWARE REQUIREMENTS.\n))NOALIGN  SPECIFIES THAT OPERANDS AND DATA ARE ONLY TO BE CHECKED\n   FOR BOUNDARY CONSTRAINTS MADE MANDATORY BY HARDWARE.\n                                                                       .\n))XREF  OR  XREF(FULL)  SPECIFIES THAT YOU WANT A CROSS REFERENCE\n   TABLE OF SYMBOLS INCLUDED IN THE OUTPUT ASSEMBLY LISTING.\n   SPECIFY  XREF(SHORT)  IF ONLY THOSE IDENTIFIERS WHICH ACTUALLY ARE\n   REFERENCED ARE TO BE INCLUDED IN THE XREF TABLE.\n   XREF IS IGNORED IF NOPRINT AND/OR NOLIST IS IN EFFECT.\n))NOXREF  SPECIFIES THAT NO SYMBOL CROSS REFERENCE TABLE IS TO BE\n   GENERATED AS PART OF THE ASSEMBLY.\n                                                                       .\n))ESD  TELLS THE ASSEMBLER TO PRODUCE AN EXTERNAL SYMBOL DICTIONARY\n   AS PART OF THE ASSEMBLER LISTING.  ESD IS IGNORED IF NOPRINT\n   AND/OR NOLIST IS IN EFFECT.\n))NOESD  TELLS THE ASSEMBLER NOT TO LIST THE EXTERNAL SYMBOL\n   DICTIONARY.\n                                                                       .\n))RLD  TELLS THE ASSEMBLER TO PRODUCE THE RELOCATION DICTIONARY\n   AS PART OF THE ASSEMBLER LISTING. RLD IS IGNORED IF NOPRINT\n   AND/OR NOLIST IS IN EFFECT.\n))NORLD  TELLS THE ASSEMBLER NOT TO LIST THE RELOCATION DICTIONARY.\n                                                                       .\n))FLAG('INTEGER')  SPECIFIES THAT ERROR DIAGNOSTIC MESSAGES\n   AND MNOTES BELOW SEVERITY CODE 'INTEGER' SHOULD NOT APPEAR\n   IN THE LISTING. 'INTEGER' RANGE IS 0-255 INCLUSIVE .\n                                                                       .\n))LINECOUNT('INTEGER')  SPECIFIES THE NUMBER OF LINES PER PAGE\n   IN THE LISTING DATA SET.  THIS OPTION DOES NOT APPLY\n   IF THE LISTING GOES DIRECTLY TO THE  TERMINAL.\n                                                                       .\n))SYSPARM('STRING')  SPECIFIES THE VALUE OF THE SYSTEM\n   VARIABLE SYMBOL &SYSPARM. THE STRING MAY CONSIST OF UP TO\n   255 CHARACTERS SPECIFIED WITHIN QUOTES.\n                                                                       .\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BURN": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BURN     TITLE 'BURN - ABEND A JOB OR ADDRESS SPACE'\nBURN     CSECT\n         REGS\nRSAVE    EQU    13\nRBASE    EQU    12\nRCVT     EQU    11\nRASCB    EQU    10\nRASVT    EQU    9\nRCNT     EQU    8\nRCPPL    EQU    7\nRPSCB    EQU    6\n         SPACE  5\n         SAVE   (14,12),,BURN_&SYSDATE_&SYSTIME\n         BALR   RBASE,0\n         USING  *,RBASE\n         USING  CVT,RCVT\n         USING  ASCB,RASCB\n         USING  CPPL,RCPPL\n         USING  PSCB,RPSCB\n         LA     R2,SAVEAREA\n         ST     RSAVE,SAVEAREA+4\n         ST     R2,8(RSAVE)\n         LR     RSAVE,R2\n*\n*        VALIDATE USER\n*\nVALIDATE LR    RCPPL,R1        SAVE CPPL POINTER\n         L     RPSCB,CPPLPSCB\n         TM    PSCBATR1,PSCBCTRL DOES USER HAVE OPERATOR PRIV?\n         BNO   RETURN            NO SO RETURN QUIT\n*\n*        EXAMINE PARAMETER PASSED\n*\n         L     R2,0(R1)        PARAMETER POINTER\n         LH    R1,0(R2)        PARAMETER LENGTH\n         SH    R1,=H'4'        PARAMETER FIELD LENGTH\n         LH    R3,2(R2)        CMD LENGTH\n         SR    R1,R3           SUBTRACT FROM TOTAL\n         LA    R2,4(R2)        POINT TO COMMAND\n         BCTR  R3,0            REDUCE FOR COMPARE\n         EX    R3,CLCCMD\n         BNE   ERROR\n         AR    R2,R3          SET R2 TO POINT TO ASID PARAMETER\n         LA    R2,1(R2)\n         LTR   R4,R1           INPUT LENGTH ZERO?\n         BZ    ERROR\n         CH    R1,K8           LESS THAN 8 BYTES?\n         BH    ERROR\n         MVC   INNAME,BLANKS   BLANKS JOBNAME/ASID MSG ENTRY\n         BCTR  R1,0            DECREMENT FOR MVC\n         EX    R1,MOVE         MOVE JOBNAME/ASID TO MESSAGE\n*\n*       ASID REQUEST TEST\n*\n         LR     R2,R4\n         LA     R3,INNAME       INITIALIZE JOBNAME/ASID POINTER\nASIDTEST DS     0H\n         TM     0(R3),X'F0'      NUMERIC CHARACTER\n         BNO    JOBNAME         ASSUME JOBNAME\n         LA     R3,1(R3)        INCREMENT TO NEXT CHARACTER\n         BCT    R2,ASIDTEST\n*\n*       ASID REQUEST TEST\n*\n         O     R1,K70      PREPARE PACK EX REG\n         EX    R1,PACK\n         CVB   R3,PAREA    CONVERT TO BINARY\n         STH   R3,ASIDSAVE\n         SLL   R3,2        MULTIPLY BY 4\n         L     RCVT,16     CVT POINTER\n         L     RASVT,CVTASVT    ASVT POINTER\nASCBLOAD L     RASCB,524(R3,RASVT)  ASCB ENTRY\n         B     GODOIT\n*        ASCB ADDRESS SEARCH\n*\nJOBNAME  DS    0H\n         OC    INNAME,BLANKS     REMOVE ZEROS AND LOWER CASE\n         L     RCVT,16\n         L     RASVT,CVTASVT\n         L     RCNT,516(RASVT)\n         LA    RASVT,528(RASVT)\n         B     ERROR\nGODOIT   DS    0H\n         LH    R2,ASCBASID\n         CH    R2,=H'2'\n         BL    ERROR           DON'T BOMB THE SYSTEM\n         CH    R2,ASIDSAVE     BE SURE OF THE RIGHT GUY\n         BNE   ERROR\n         L     R4,ASCBTSB      CHECK TO SEE IF TSO USER\n         LTR   R4,R4\n         BZ    ASKIFOK         NO\n         L     R4,ASCBJBNS     CHECK TO SEE IF TSO USER IS A STARTING\n         LTR   R4,R4\n         BZ    BURNOK          YES\nASKIFOK  TPUT  ASKMSG,40\n         TGET  REPLY,3\n         OI    REPLY,C' '      MAKE IT A CAPITAL Y\n         CLI   REPLY,C'Y'\n         BNE   ERROR0\nBURNOK   DS    0H\n         AUTH  ON\n         MODESET MODE=SUP,KEY=ZERO\n         L     R1,ASCBASXB\n         L     R1,4(R1)\n         L     R0,136(R1)\n         L     R1,=X'88222000'\n         SLR   R3,R3\n         L     R15,CVTBTERM\n         L     R15,44(R15)\n         BALR  R14,R15\n         MODESET KEY=NZERO,MODE=PROB\n         AUTH  OFF\nRETURN   DS    0H\n         L     RSAVE,SAVEAREA+4\n         RETURN (14,12)\nERROR0   DS    0H\n         MVC   ERRMSG+24(8),=CL8'BURNED'\nERROR    DS    0H\n         MVC   ERRMSG+11(8),INNAME\n         TPUT  ERRMSG,50\n         B     RETURN\nMOVE     MVC   INNAME(8),0(R2)      IF A TSO COMMAND PARAMETER\nCLCCMD   CLC   0(0,R2),BURNCMD      IS IT BURN COMMAND?\nPACK     PACK  PAREA(0),INNAME(0)\nK8       DC    H'8'\nPAREA    DC    D'0'\nK70      DC    X'00000070'\nSAVEAREA DC    18F'0'\nBLANKS   DC    CL8' '\nINNAME   DC    CL8' '\nASIDSAVE DC    H'0'\nBURNCMD  DC    CL5'BURN '\nASKMSG   DC    CL40'NOT A TSO USER STARTING. OK?'\nREPLY    DS    CL10\nERRMSG   DS    0CL50\n         ORG   ERRMSG\n         DC    CL50' '\n         ORG   ERRMSG\nEMSG     DC    C'BURN000I:           NOT FOUND'\n         ORG\n         CVT   DSECT=YES,LIST=YES\n EJECT\n         IHAASCB\n EJECT\n         IKJCPPL\n EJECT\n         IKJPSCB\n         END   BURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPRES#": {"ttr": 1803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")S  SUBCOMMANDS:\n         THE COMPRESS COMMAND IS USED TO COMPRESS A PARTITIONED DATA\n         SET ON AN ONLINE DIRECT ACCESS DEVICE AND HAS NO SUBCOMMANDS.\n\n)F  FUNCTION:\n         THE COMPRESS COMMAND IS USED TO COMPRESS A PDS IN TWO STEPS.\n         FIRST THE PDS IS COPIED FOR BACK-UP. THEN THE PDS IS\n         COMPRESSED IN PLACE.\n\n         THE GENERATED NAME OF THE SAFETY DATASET IS DISPLAYED\n         PRIOR TO THE SAFETY COPY. THE BACK-UP DATASET WILL BE\n         SAVED IN CASE OF AND ERROR IN COMPRESS.\n\n         THE COMPRESS COMMAND CAN BE RUN IN BATCH MODE UNDER THE\n         TSO TERMINAL MONITOR PROGRAM. IN THAT CASE ALL MESSAGE\n         OUTPUT DIRECTED TO THE TERMINAL (PRINT(*)) WILL BE SENT\n         TO THE SYSOUT CLASS SPECIFIED IN THE MSGCLASS PARAMETER\n         OF YOUR JOB CARD.\n\n)X  SYNTAX:\n         COMPRESS 'PDSNAME' PRINT('DSNAME'/*)/NOPRINT SAFETY/NOSAFETY\n                            OLD/SHR RESERVE/NORESERVE\n                            UNIT('UNITNAME') VOL('VOLSER')\n         REQUIRED - 'PDSNAME'\n         DEFAULTS -  PRINT(*)  (COMPRESS LISTING AT TERMINAL)\n                (THIS IS CHANGED TO NOPRINT IF RESERVE IS SPECIFIED)\n                (IF RUN IN BACKGROUND, COMPRESS WILL DIRECT THIS OUTPUT\n                 TO YOUR JOB CARD MSGCLASS)\n                  -  SAFETY    (CREATE BACK-UP COPY)\n                  -  SHR       (ALLOCATE DATA SET IN SHARE MODE)\n                  -  NORESERVE (DO NOT ISSUE HARDWARE RESERVE)\n                  -  UNIT(DISK) ALL-INCLUSIVE DEFAULT UNIT TYPE\n\n         NOTES    - IF RESERVE IS SPECIFIED, EITHER THE DEFAULT\n                    PRINT OPTION OR AN EXPLICIT REQUEST TO ROUTE\n                    THE PRINT TO THE TERMINAL, IS OVERRIDDEN AND\n                    THE NOPRINT OPTION IS USED. THIS IS TO PREVENT\n                    A RESERVE LOCKOUT SHOULD THE USER WALK AWAY\n                    FROM THE TERMINAL WITHOUT COMPLETELY LISTING THE\n                    COPY MESSAGES.\n\n                    IF RUN IN BACKGROUND, PRINT(*) WILL DIRECT IEBCOPY\n                    MESSAGES TO YOUR MESSAGE CLASS REGARDLESS OF\n                    WHETHER RESERVE IS SPECIFIED OR NOT.\n\n                  - THE SAFETY DATA SET CREATED BY THE COMPRESS\n                    COMMAND HAS THE FOLLOWING FORMAT:\n\n                       PREFIX.SYSXXXXX.TYYYYYYY.SAFETY\n\n                    WHERE:\n                      USERID   = YOUR TSO PROFILE PREFIX VALUE\n                      XXXXX    = THE CURRENT JULIAN DATE\n                      YYYYYYY  = THE CURRENT TIME OF DAY\n\n         NOTE: IF RUN IN BACKGROUND MODE, A PREFIX SET BY YOUR\n               INSTALLATION WILL BE FORCED REGARDLESS OF WHETHER\n               OR NOT A \"PROFILE PREFIX\" COMMAND IS ENTERED INTO\n               THE INPUT STREAM.\n\n         ****** WARNING - WARNING *****************************\n         *                                                    *\n         * THE COMPRESS COMMAND CANNOT BE INTERUPPTED BY AN   *\n         * ATTENTION INTERRUPT (PA1 ON 3270).                 *\n         *                                                    *\n         * THE COMPRESS COMMAND DOES NOT ISSUE A HARDWARE     *\n         * RESERVE AGAINST THE VOLUME CONTAINING THE DATA SET *\n         * TO BE COMPRESSED UNLESS THE \"RESERVE\" KEYWORD IS   *\n         * USED. USE OF THIS FEATURE SHOULD BE KEPT AT A      *\n         * MINIMUM BECAUSE LOCKOUTS CAN OCCUR.                *\n         *                                                    *\n         * IN NON-SHARED DASD ENVIRONMENTS THE \"RESERVE\"      *\n         * KEYWORD IS MEANINGLESS.                            *\n         ******************************************************\n\n)O  OPERANDS:\n))PDSNAME           - THE NAME OF THE PDS TO BE COMPRESSED.\n))PRINT\n         ('DSNAME') - SUPPLY THE NAME OF A DATA SET USED TO STORE\n                      THE SYSPRINT LISTING FROM THE COMPRESS.\n\n         (*)        - THE SYSPRINT LISTING FROM IEBCOPY WILL BE\n                      SENT TO THE TERMINAL. IN BACKGROUND MODE,\n                      THE SYSPRINT LISTING WILL BE DIRECTED TO\n                      THE SYSOUT CLASS SPECIFIED IN THE \"MSGCLASS\"\n                      PARAMETER OF YOUR JOB CARD.\n\n         NOPRINT    - SUPPRESS THE SYSPRINT COMPRESS LISTING\n                      COMPELETELY.\n\n))SAFETY            - REQUESTS THAT A \"SAFETY\" COPY BE MADE OF THE\n                      PDS TO BE COMPRESSED BEFORE COMPRESS IS\n                      ATTEMPED.\n\n))NOSAFETY          - REQUESTS THAT NO \"SAFETY\" DATA SET BE MADE.\n\n))OLD               - THE DATA SET TO BE COMPRESSED SHOULD BE\n                      ALLOCATED WITH A DISPOSITION OF \"OLD\". THIS\n                      OPERAND SHOULD BE SPECIFIED IF DATA INTEGRITY\n                      IS A PROBLEM WITH THIS DATA SET. THE USER WILL\n                      GAIN EXCLUSIVE CONTROL OF THE DATA SET IF\n                      IT IS NOT ALREADY IN USE.\n\n))SHR               - THE DATA SET TO BE COMPRESSED WILL BE\n                      ALLOCATED WITH A DISPOSITION OF \"SHR\".\n                      OTHER USERS WILL BE ABLE TO USE THIS DATA SET\n                      DURING THE COMPRESS. THIS PARAMETER IS THE\n                      DEFAULT, AND SHOULD BE USED IF DATA INTEGRITY\n                      IS NOT A PROBLEM WITH THE DATA SET BEING\n                      COMPRESSED (I.E. IT IS YOUR OWN TSO DATA SET).\n\n))RESERVE            - A HARDWARE RESERVE WILL BE ISSUED AGAINST THE\n                       VOLUME CONTAINING THE DATA SET TO BE COMPRESSED.\n                       THIS PARAMETER SHOULD ONLY BE USED IN CASES\n                       WHERE DATA INTEGRITY IS EXTREMELY IMPORTANT\n                       DUE TO THE POSSIBILITY OF AN ENQUEUE LOCKOUT\n                       OCCURING. THE ENTIRE VOLUME IS LOCKED OUT\n                       FROM ACCESS BY OTHER USERS DURING THE COMPRESS\n                       CYCLE WHEN THIS PARAMETER IS SPECIFIED.\n\n                     - NOTE THAT WHEN THIS PARAMETER IS SPECIFIED,\n                       THE PRINT OPTION IS CHANGED TO NOPRINT IF\n                       IT WAS DIRECTED TO THE TERMINAL. THIS IS TO\n                       PREVENT LOCKOUTS SHOULD A USER WALK AWAY FROM\n                       THE TERMINAL AND LEAVE THE OUTPUT INCOMPLETE.\n\n                     - THIS PARAMETER IS MEANINGLESS IN A NON-SHARED\n                       DASD ENVIRONMENT. THE \"OLD\" PARAMETER SHOULD\n                       BE USED TO PREVENT OTHER USERS FROM UPDATING\n                       YOUR DATASET IN SUCH AN ENVIRONMENT.\n\n))NORESERVE          - NO HARDWARE RESERVE WILL BE ISSUED AGAINST\n                       THE VOLUME CONTAINING THE DATA SET TO BE\n                       COMPRESSED. THIS IS THE DEFAULT AND SHOULD\n                       BE USED IN MOST ALL CASES OF PDS COMPRESSION\n                       DUE TO THE PROBLEMS OF ENQUEUE LOCKOUT.\n\n))UNIT('UNITNAME')   - THE GENERIC DEVICE TYPE OF THE VOLUME ON\n                       WHICH THE PDS TO BE COMPRESSED RESIDES. AN\n                       ESOTERIC NAME OR GENERIC NAME CAN BE SPECIFIED\n                       AS WELL AS A UNIT ADDRESS. THE DEFAULT IS\n                       THE ALL-INCLUSIVE NAME \"SYSALLDA\".\n\n))VOLUME('VOLSER')   - THE NAME OF THE VOLUME ON WHICH THE PDS TO BE\n                       COMPRESSED RESIDES. THIS KEYWORD IS USEFUL IF\n                       THE DATA SET RESIDES ON A VOLUME DIFFERENT FROM\n                       THAT INDICATED IN THE CATALOG. THERE IS NO\n                       DEFAULT, AND IF YOU WISH TO USE THE CATALOG\n                       ENTRY OMIT THIS KEYWORD WHEN YOU INVOKE THE\n                       COMPRESS COMMAND.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPRESS": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CMPR     TITLE 'GSFTSOCM -- COMPRESS'\n***********************************************************************\n** GSFTSOCM, VERSION 1.0   J. SCHINDLER  DEC. 1974\n** GSFTSOCM, VERSION 2.0   H. DEAN       JUL. 1977\n** GSFTSOCM, VERSION 3.0   H. DEAN       AUG. 1977\n** GSFTSOCM, VERSION 4.0   S. HAGGERTY   MAY  1978\n** GSFTSOCM, VERSION 5.0   S. HAGGERTY   DEC  1978\n** GSFTSOCM, VERSION 5.1   H. DEAN       APR  1979\n** GSFTSOCM, VERSION 5.2   H. DEAN       JUL  1979\n** GSFTSOCM, VERSION 5.3   H. DEAN       OCT  1979\n** GSFTSOCM, VERSION 6.0   H. DEAN       FEB  1982          *HMD 02/82*\n** GSFTSOCM, VERSION 6.1   H. DEAN       MAY  1982          *HMD 02/82*\n**\n**   CHANGED 3/18/75 BY J. SCHINDLER TO ATTACH IEBCOPY INSTEAD OF\n**   VSCOPY BECAUSE OF ERRORS FOUND IN THE CURRENT VERSION OF VSCOPY.\n**\n**   CHANGED 07/30/77 BY H. DEAN. MODULE MADE REENTERABLE\n**   AND REUSABLE FOR STORAGE IN SVS LINK PACK AREA\n**\n**   CHANGED 07/31/77 BY H. DEAN TO ELIMINATE THE\n**   SYSOUT PARAMTER (NOT SUPPORTED AT L.A.C.C.D)\n**\n**   CHANGED 08/15/77 BY H. DEAN TO ALLOCATE A \"SAFETY\"\n**   DATASET. UNLESS \"NOSAFETY\" IS SPECIFIED, THE\n**   DATASET TO BE COMPRESSED WILL BE COPIED TO A DYNAMICALLY\n**   ALLOCATED \"SAFETY\" DATASET BEFORE THE COMPRESS.\n**   IF THE COMPRESS RETURN CODE IS NOT ZERO,\n**   THE \"SAFETY\" DATASET WILL BE KEPT.\n**\n**   CHANGED 05/31/78 BY STEVE HAGGERTY TO USE \"IBMCOPY\"\n**   WHICH IS THE ORIGINAL, ACCEPT NO SUBSTUTES, VERSION OF\n**   IEBCOPY HERE AT GTEDS.\n**\n**   CHANGED 12/29/78 BY STEVE HAGGERTY TO OPTIONALLY ALLOW\n**   THE USE OF \"DISP=OLD\" ALLOCATION OF THE PDS TO BE\n**   COMPRESSED TO INSURE DATA SET INTEGRITY.\n**\n**   CHANGED 12/29/78 BY STEVE HAGGERTY TO OPTIONALLY ALLOW\n**   A HARDWARE RESERVE TO BE ISSUED AGAINST THE PACK ON WHICH\n**   THE PDS TO BE COMPRESSED RESIDES.\n**   NOTE: QNAME = VOL. ID. , RNAME = DSN\n**\n**   CHANGED 04/30/79 BY HOWARD DEAN TO IMPLIMENT THE ABOVE\n**   CHANGES ATTEMPTED BY STEVE HAGGERTY. FLAT-RATE UNINCORPORATED\n**   IS NOW THE LEGAL OWNER OF THIS PROGRAM.\n**\n**   CHANGED 04/30/79 BY HOWARD DEAN TO MAKE &COPY A SYMBOLIC\n**   PARAMETER. CHANGE TO INDICATE THE NAME OF THE IEBCOPY PROGRAM\n**   USED BY YOUR INSTALLATION. LIMIT AUTHORIZATION (NEEDED FOR MVS)\n**   TO JUST BEFORE ATTACH AND REMOVE AFTER DETACH OF COPY PROGRAM.\n**   PROVIDE A ROUTINE FOR DSN NOT AVAILABLE (OLD OR SHR ALLOCATION).\n**\n**   CHANGED 04/30/79 BY HOWARD DEAN TO USE THE PREFIX RATHER\n**   THAN THE USERID IN BUILDING THE RESERVE RNAME.\n**\n**   CHANGED 05/05/79 BY HOWARD DEAN TO:\n**\n**     1. RE-ARRANGE CODE FOR EASIER MAINTAINABILITY.\n**     2. FORCE NOPRINT IF RESERVE ISSUED.\n**     3. ADD ESTAE ROUTINE TO RELEASE DEVICE IF ABEND.\n**\n**   CHANGED 07/25/79 BY HOWARD DEAN TO:\n**\n**     1. USE \"PUTLINE\" SERVICE ROUTINE SO COMPRESS CAN BE RUN\n**        IN BATCH MODE. (NOTE HMD'S SPELLING IN NEXT LINE. HA HA)\n**     2. CORRECT ADDRESSIBILTIY ERROR IN ESTAE ROUTINE\n**     3. REMOVE  AUTOMATIC AUTHORIZATION FROM COMPRESS.\n**        MUST NOW BE AUTHORIZED THROUGH A TABLE IN THE\n**        TSO TMP (MODULE IKJEFT01 - CSECT IKJEFTE2). SEE\n**        THE TSO SYSTEM PROGRAMMING MANUAL FOR FURTHER\n**        INFO. LINKEDIT WITH AC(1).\n**     4. IF RUNNING TMP IN BATCH MODE, IEBCOPY TERMINAL OUTPUT IS\n**        DIRECTED TO MESSAGE CLASS INSTEAD OF TERMINAL.\n**\n**   NOTE THAT SAFETY DATASET IN BATCH MODE WILL BE CATALOGED\n**   UNDER THE PREFIX DEFINED IN THE &PREFIX SYMBOLIC PARM. THIS\n**   PREFIX IS MOVED INTO THE UPT SET UP BY THE BATCH TMP, SO ANY\n**   NON-QUOTED DSNAMES WILL BE CATALOGED UNDER THIS PREFIX. 'TEMP'\n**   IS USED AT GTEDS. YOUR INSTALLATION WILL HAVE TO DEFINE A\n**   PREFIX TO USE FOR DSNAMES.\n**\n**   CHANGED 10/16/79 BY HOWARD DEAN TO:\n**\n**     1. PROVIDE A 'UNIT' AND 'VOLUME' KEYWORD TO COMPRESS\n**        DATASETS ON VOLUMES OTHER THAN THOSE IN THE CATALOG.\n**\n**     2. DEFAULT UNIT TYPE IS 'DISK'. IF THIS GROUP NAME IS NOT\n**        ALL-INCLUSIVE AT YOUR INSTALLATION CHANGE THE SETC SYMBOL\n**        BELOW TO THE CORRECT UNIT NAME.\n**\n**  COMMAND NAME ---  COMPRESS (COMPRESS A PDS)\n**  ATTR - REENTERABLE, REUSEABLE, REFRESHABLE\n**\n**  THIS COMMAND PROCESSOR WILL ATTACH IEBCOPY TO COMPRESS A DATA SET\n**  WHOSE NAME IS SUPPLIED. THE OPTIONS ARE AS FOLLOWS:\n**           SAFETY - BEFORE COMPRESSING THE PDS, CREATE A \"SAFETY\"\n**                    COPY.  (SAFETY IS DEFAULT)\n**         NOSAFETY - DO NOT CREATE A SAFETY COPY\n**\n**   PRINT('DSN'/*) - PUT THE SYSPRINT DATA SET TO 'DSN' OR TERMINAL\n**          NOPRINT - \"DUMMY\" OUT THE SYSPRINT FILE\n**                           (PRINT(*) IS DEFAULT)\n**\n**       NORESERVE  - DO NOT ISSUE A HARDWARE RESERVE (DEFAULT)\n**         RESERVE  - ISSUE A HARDWARE RESERVE TO PREVENT ACCESS\n**                    FROM OTHER CPUS.\n**\n**             SHR  - ALLOCATE THE PDS AS \"SHR\". (DEFAULT)\n**             OLD  - ALLOCATE THE PDS AS 'DISP=OLD'.\n**\n**\n**            UNIT  - GENERIC NAME OF INPUT PDS DEVICE.\n**\n**          VOLUME  - VOLSER OF DASD DEVICE ON WHICH PDS RESIDES.\n**\n**\n**  EXAMPLE OF COMMAND:\n**    COMPRESS 'DATA SET NAME' PRINT('DSN'/*) S/NOS SHR/OLD NOR/RES\n**    COMPRESS 'DATA SET NAME'\n**    COMPRESS 'DATA SET NAME' NOPRINT\n**    COMPRESS 'DATA SET NAME' NOSAFETY\n**    COMPRESS 'DATA SET NAME' RESERVE\n**    COMPRESS 'DATA SET NAME' OLD\n**    COMPRESS 'DATA SET NAME' OLD UNIT(3350) VOL(SYSLIB)\n**    COMPRESS 'DATA SET NAME' VOL(PACK07)\n**\n**\n**\n**  RE-WRITTEN ON AUG 15, 1977 BY:\n**\n**     HOWARD M. DEAN\n**     LOS ANGELES COMMUNITY COLLEGE DISTRICT\n**     SYSTEMS SOFTWARE GROUP\n**     2140 W. OLYMPIC BLVD.  L.A. 90006 (213)-380-6000 EXT. 225\n**\n** MODIFIED FOR USE UNDER MVS - MAY 1978\n**\n**     STEVE HAGGERTY\n**     GTE DATA SERVICES\n**     SYSTEM SUPPORT UNIT\n**     4750 LINCOLN BLVD\n**     MARINA DEL REY, CA 90291\n**     (213) 821-0511\n** MODIFIED FOR USE UNDER MVS - APR 1979\n**\n**     HOWARD M. DEAN\n**     GTE DATA SERVICES (MEMBER OF THE DEAN AND HAGGERTY TEAM)\n**     SYSTEMS SUPPORT UNIT\n**     4750 LINCOLN BLVD.\n**     MARINA DEL REY, CA 90291\n**     (213) 821-0511\n**                                                          *HMD 02/82*\n** CHANGED 02/13/82 BY HOWARD M. DEAN TO:                   *HMD 02/82*\n**                                                          *HMD 02/82*\n**  1. ATTACH 'SPFCOPY' INSTEAD OF IEBCOPY SO THAT          *HMD 02/82*\n**     CODE TO DYNAMICALLY AUTHORIZE CAN BE REMOVED.        *HMD 02/82*\n**                                                          *HMD 02/82*\n**  2. DYNAMIC AUTHORIZATION CODE IS IN SPFCOPY AND         *HMD 02/82*\n**     FOR SECURITY REASONS IT WILL REMAIN IN ONLY          *HMD 02/82*\n**     THAT MODULE. SEE MEMBER 'SPFCOPY' OF SSU.ASM         *HMD 02/82*\n**     FOR FURTHER DETAILS.                                 *HMD 02/82*\n**                                                          *HMD 02/82*\n**  3. REMOVE SYMBOLIC VARIABLE '&PREFLEN'. LENGTH          *HMD 02/82*\n**     OF &PREFIX IS NOW DETERMINED BY THE 'K' ATTRIBUTE    *HMD 02/82*\n**     (CHARACTER COUNT).                                   *HMD 02/82*\n**                                                          *HMD 02/82*\n**  CHANGED ON 05/11/82 - HOWARD M. DEAN                    *HMD 05/82*\n**                                                          *HMD 05/82*\n**  1. ADD APPROPRIATE MESSAGE FOR ABEND(S) IN SAFETY       *HMD 05/82*\n**     OR COMPRESS STEP.                                    *HMD 05/82*\n**                                                          *HMD 05/82*\n**  2. INCREASE RETURN CODE FIELD TO 4 BYTES AND            *HMD 05/82*\n**     PRINT RETURN CODE AT END OF PROGRAM. RETURN          *HMD 05/82*\n**     CODE OF 20 MEANS THAT EITHER PARSE OR DAIR           *HMD 05/82*\n**     DID NOT WORK CORRECTLY.                              *HMD 05/82*\n**                                                          *HMD 05/82*\n**  3. PRINT SAFETY DATA SET NAME AFTER ALLOCATION          *HMD 05/82*\n**     FOR FUTURE REFERENCE.                                *HMD 05/82*\n**                                                          *HMD 05/82*\n**----------------------------------------------------------*HMD 01/85*\n**  CHANGED ON 01/16/85 - HOWARD M. DEAN                    *HMD 01/85*\n**                                                          *HMD 01/85*\n**  1. CHANGE DEFAULT UNIT AND DEFAULT PREFIX               *HMD 01/85*\n**                                                          *HMD 01/85*\n**  2. CHANGE HEADER TO REFLECT NEW COMPANY - SYNTEX        *HMD 01/85*\n**                                                          *HMD 01/85*\n**  3. ADD SET SYMBOL TO INSERT CURRENT DATE AT EVERY       *HMD 01/85*\n**     ASSEMBLY.                                            *HMD 01/85*\n**                                                          *HMD 01/85*\n**  HOWARD M. DEAN                                          *HMD 01/85*\n**  TECHNICAL SUPPORT M/S A5-5                              *HMD 01/85*\n**  SYNTEX U.S.A                                            *HMD 01/85*\n**  3401 HILLVIEW AVENUE                                    *HMD 01/85*\n**  P.O. BOX 10850                                          *HMD 01/85*\n**  PALO ALTO, CA 94303                                     *HMD 01/85*\n**  (415) 852-1792                                          *HMD 01/85*\n***********************************************************************\n       EJECT\n**\n**  COMPRESS INSTREAM MACROS\n**\n         MACRO\n&NAME    TSOTEST &NOTTSO\n.* TEST IF PROGRAM IS RUNNING UNDER TERMINAL OR BATCH\n         LCLC    &A,&B\n&A       SETC    'SVS'.'&SYSNDX'.'A'\n&B       SETC    'SVS'.'&SYSNDX'.'O'\n         AIF   ('&NOTTSO' NE '').GOTOP\n         MNOTE 12,'*** BRANCH POINT MISSING FOR TSOTEST ***'\n         MEXIT\n.GOTOP   ANOP\n         MNOTE *,'BRANCH TO &NOTTSO IF NOT TERMINAL USER'  *HMD*\n&NAME    L     15,X'10'   .       --> CVT                  *HMD*\n         TM    116(15),1          Q. IS THIS MVS           *HMD*\n         L     15,0(15)   .       --> QUAD/DOUBLE WORD     *HMD*\n         BNO   &A         .       A. NO, TRY SVS/MVT CODE  *HMD*\n         L     15,12(R15) .       ASCB ADDRESS             *HMD*\n         L     15,56(15)  .       CSCB ADDRESS             *HMD*\n         TM    7(15),X'40' .      TERMINAL JOB TEST        *HMD*\n         BNO   &NOTTSO .          BRANCH IF NOT FROM TSO   *HMD*\n         B     &B         .       BRANCH AROUND SVS/MVT CODE\n&A       DS    0H    .            SVS/MVT CODE             *HMD*\n         L     15,4(15)  .        LOAD TCB ADDRESS         *HMD*\n         TM    X'94'(15),128  .   TERMINAL JOB TEST        *HMD*\n         BZ    &NOTTSO .          BRANCH IF NOT FROM TSO   *HMD*\n&B       DS    0H                 END OF MACRO EXPANSION   *HMD*\n         MEND\n         EJECT\n         MACRO\n&NAME    TPUT &WHAT,&HOWLONG,&OUT=PUTLINE\n         AIF   ('&OUT' NE '').BEGIN\n         MNOTE 12,'** TPUT - OUTPUT ROUTINE ADDRESS MISSING **'\n         MEXIT\n.BEGIN   AIF   ('&NAME' EQ '').NOLBL\n&NAME    DS    0H\n.NOLBL   AIF  ('&WHAT'(1,1) EQ '(').REG\n         LA    1,&WHAT              LOAD MESSAGE ADDRESS\n         AGO   .SEQ1\n.REG     ANOP\n         LA    1,0(0,&WHAT(1))      LOAD 1 AND CLR HI BYTE\n.SEQ1    AIF  ('&HOWLONG'(1,1) EQ '(').REGR\n         LA    0,&HOWLONG           LOAD MESSAGE LENGTH\n         AGO  .SVC\n.REGR    ANOP\n         LA    0,0(0,&HOWLONG(1))   CLR HI BYTE AND LOAD LENGTH\n.SVC     L     R15,=A(&OUT)\n         BALR  R14,R15              LINK TO OUTPUT ROUTINE  *HMD 07/79*\n         MEND\n         EJECT\n         MACRO\n&NAME    CLEAR &FIELD,&LEN,&TYPE=B\n         LCLC  &L\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H                          CLEAR A FIELD\n.NONAME  AIF   ('&FIELD' NE '').OK\n         MNOTE 8,'*** CLEAR: FIELD NAME MISSING ***'\n         MEXIT\n.OK      AIF   ('&LEN' NE '').IMPLEN\n&L       SETC  'L''&FIELD'\n         AGO   .CLR\n.IMPLEN  ANOP\n&L       SETC  '&LEN'\n.CLR     ANOP\n         AIF   ('&TYPE' EQ 'B').EQB\n         MVI   &FIELD,X'00'                MOVE IN ZERO\n         AGO   .MVC\n.EQB     MVI   &FIELD,C' '                 MOVE IN SPACE\n.MVC     MVC   &FIELD+1(&L-1),&FIELD       CLEAR ALL THE WAY\n         MEND\n         EJECT\n******************************************************************\n** AT GTEDS, WE HAVE DECIDED TO USE 'SPFCOPY' TO COMPRESS   *HMD 02/82*\n** A PDS.  THIS MODULE RESIDES IN LPALIB AND DYNAMICALLY    *HMD 02/82*\n** AUTHORIZES ITSELF VIA A USER SVC.  FOR ALL PRACTICAL     *HMD 02/82*\n** PURPOSES SPFCOPY WORKS LIKE AN IEBCOPY THAT DOES NOT     *HMD 02/82*\n** REQUIRE AUTHORIZATION.  WHY, IN HEAVENS NAME, THAT IBM   *HMD 02/82*\n** DECIDED TO REQUIRE THAT IEBCOPY BE APF AUTHORIZED IS     *HMD 02/82*\n** BEYOND ME.  WHEN IBM FINALLY WAKES UP TO THE FACT THAT   *HMD 02/82*\n** 'DATA SET UTILITIES' SHOULD NOT PROVIDE  AUTHORIZED      *HMD 01/85*\n** SERVICES OR REQUIRE AUTHORIZATION THE LOCAL VARIABLE     *HMD 02/82*\n** BELOW CAN BE CHANGED BACK TO IEBCOPY. UNTIL THAT TIME,   *HMD 02/82*\n** WE WILL CIRCUMVENT THE SILLY RESTRICTION USING           *HMD 02/82*\n** 'SPFCOPY'.  CHANGE THE VARIABLE BELOW IF YOU WISH TO     *HMD 02/82*\n** USE THE VANILLA IEBCOPY.  HOWEVER, BEWARE THAT YOU MUST  *HMD 02/82*\n** AUTHORIZED THIS COMMAND VIA IKJEFTE2 CSECT AND YOU       *HMD 02/82*\n** CANNOT THEN USE IT UNDER SPF OPTION 6.                   *HMD 02/82*\n******************************************************************\n         LCLC  &COPY\n******************************************************************\n** EACH INSTALLATION SHOULD DEFINE A DEFAULT 'UNIT TYPE' NAME   **\n** THAT IS INCLUSIVE OF ALL DASD DEVICES IN THE SHOP. AT GTEDS  **\n** THAT NAME IS 'DISK' AND IT INCLUDES EVERY DASD DEVICE WE     **\n** OWN. THE SET SYMBOL BELOW IS USED TO SET THE DEFAULT VALUE   **\n** FOR THE PARSE 'UNIT NAME' KEYWORD. SET IT TO AN UNIT DEVICE  **\n** NAME THAT IS ALL-INCLUSIVE AT YOUR INSTALLATION.             **\n**                                                              **\n**    HOWARD M. DEAN  10/16/79                                  **\n******************************************************************\n         LCLC  &UDEF            DEFAULT UNIT TYPE NAME      *HMD 10/79*\n******************************************************************\n**  THE FOLLOWING CONSTANTS WILL BE USED TO ESTABLISH A PREFIX  **\n**  TO BE USED WHEN RUNNING COMPRESS UNDER THE TMP IN BATCH     **\n**  MODE. EACH INSTALLATION, WHEN INSTALLING COMPRESS MUST      **\n**  CHOOSE AN APPROPRIATE HIGH-LEVEL INDEX TO SERVE AS A        **\n**  PREFIX FOR THE TMP RUN IN BATCH MODE.                       **\n******************************************************************\n         LCLC  &PREFIX          PREFIX FOR BATCH MODE       *HMD 07/79*\n         LCLC  &DXT             DATE EXTRACT FOR HEADER     *HMD 01/85*\n         LCLA  &PREFLEN         LOCAL LENGTH VARIABLE       *HMD 02/82*\n&PREFIX  SETC  'SX10'        *** CHANGE IF DIFFERENT PREFIX USED ***\n*                               \"\"\"\"\"\" SYNTEX \"\"\"\"\"\"\"       *HMD 01/85*\n&PREFLEN SETA  K'&PREFIX     LENGTH OF PREFIX VARIABLE      *HMD 02/82*\n&COPY    SETC  'SPFCOPY'     *** CHANGE IF DIFFERENT NAME   *HMD 02/82*\n&UDEF    SETC  'SYSALLDA'    *** CHANGE IF DIFFERENT UNIT TYPE USED ***\n*                               \"\"\"\"\"\" SYNTEX \"\"\"\"\"\"\"       *HMD 01/85*\n&DXT     SETC  '&SYSDATE'(1,2).'&SYSDATE'(6,3)              *HMD 01/85*\n         EJECT\nGSFTSOCM TSOENTER BASE=11,PL=(PARSE,DAIR,IO),WORK=48        *HMD 07/79*\n**\n**  ESTABLISH SECOND BASE\n**\nNEXTBASE LR    R12,R11\n         LA    R12,4095(R12)\n         LA    R12,1(R12) SECOND BASE REG\n         LUSE  GSFTSOCM+4096,R12\n**\n**  GET STORAGE FOR VARIABLES\n**\nGETSPAC  GETMAIN R,LV=STORLEN,SP=3         GET STORAGE FOR CONSTANTS\n         LR    R10,R1                      ADDRESS DSECT\n         LUSE  SAVDSC,R10                  TELL ASSEMBLER\n         ST    R1,TSOUSER                  SAVE ADDRESS FOR LATER\n         STM   R10,R12,ESSAVE              SAVE FOR ESTAE EXIT\n         INUSE ,                           SEE WHO IS ON FIRST\n         EJECT\n**\n**  MOVE MESSAGES TO DYNAMIC AREA AND INITIALIZE VARIABLES\n**\nINIT1    MVC   DAIRERRP(DAIRLTH),DAIRERRA\n         MVC   DAIRERRS(DAIRLTG),DAIRERRB\n         MVC   DAIRERRV(DAIRLTF),DAIRERRC\n         MVC   DAIRERRX(DAIRLTE),DAIRERRD\n         MVC   SYSUTX(SYSUTXL+2),SYSUTA\n         MVC   MSG01(MSG01Z),MSG0A\n         MVC   MSG02(MSG02Y),MSG0B\n         MVC   MSG10(MSG10X),MSG10A\n         MVC   MSG16(MSG16AL),MSG16A\n         MVC   MSG26(MSG26X),MSG26A                         *HMD 05/82*\n         MVC   MSG27(MSG27X),MSG27A                         *HMD 05/82*\n         MVC   MSG28(MSG28X),MSG28A                         *HMD 05/82*\n         MVC   PODCB(ADCBL),ADCB           MOVE DCB TO DYNAMIC AREA\n         MVC   EXDCB(BDCBL),BDCB           MOVE DCB TO DYNAMIC AREA\n         CLEAR DSNAME                      CLEAR DSNAME FIELD\n         MVC   VSPARM(2),=H'0'\n         MVC   DDNAMES(2),=H'88'\n         CLEAR STAXLIST,LSTFRML,TYPE=Z     CLEAR LIST FORM MACROS\n         CLEAR DDNAMLST,(22*L'DDNAMLST),TYPE=Z CLEAR ALT. DDNAME LIST\n         XC    TSOECB,TSOECB               CLEAR EVENT CNTLBLK\n         XC    TCB,TCB                     CLEAR TASK CNTL BLK\n         XC    COMPCD,COMPCD               CLEAR COMPLETION CODE\n         XC    PPLUWA,PPLUWA               CLEAR WORK AREA\n         XC    PPLRANS,PPLRANS             CLEAR ANSWER AREA\n         NI    ERRFLG,0                    CLEAR ERROR FLAG\n         NI    RESSW,0                     CLEAR RES SWITCH *HMD 05/79*\n         EJECT\n**\n**  CHECK IF USER IS RUNNING THE TMP UNDER BATCH OR TERM    *HMD 07/79*\n**\nBATCHT   TSOTEST BATCH               CHECK FOR TERMINAL     *HMD 07/79*\n         OI    RESSW,REST            SET TERMINAL SWITCH    *HMD 07/79*\nBATCH    DS    0H                    BATCH USER             *HMD 07/79*\n         TM    RESSW,REST            TERMINAL USER?         *HMD 07/79*\n         BO    NOPREF                YES, FORGET PREFIX     *HMD 07/79*\nPREFIX   L     R3,CPPLUPT            GET UPT ADDRESS        *HMD 07/79*\n         MVC   SAVEPREF(8),UPTPREFX-UPT(R3)  SAVE PREFIX    *HMD 07/79*\n         CLI   UPTPREFL-UPT(R3),0    IS THERE ONE?          *HMD 07/79*\n         BNE   NOPREF                YES, FORGET MOVE       *HMD 07/79*\n         LA    R4,&PREFLEN           GET PREFIX LENGTH      *HMD 07/79*\n         MVC   UPTPREFX-UPT(&PREFLEN,R3),=C'&PREFIX'        *HMD 07/79*\n         STC   R4,UPTPREFL-UPT(R3)   SAVE PREFIX LENGTH     *HMD 07/79*\nNOPREF   DS    0H                    BRACH AROUND PREF CODE *HMD 07/79*\n         EJECT\n**\n**  SET UP FOR PARSE, DAIR\n**\nPARSE    MVC   PPLPCL,APPLPARM       SAVE PARSE LIST ADDR\n         LA    R3,DAIRPB             POINT TO DAIR PARM BLK\n         ST    R3,DAPLDAPB           STORE IN DAPB\n         XC    TSOECB,TSOECB         CLEAR EVENT CNTL BLK\n         LA    R1,PPL                LOAD LIST ADDRESS\n         CALLTSSR EP=IKJPARS         LINK TO PARSE              *SRH*\n         LTR   R15,R15               TEST FOR SUCCESSFUL COMPLETION\n         BZ    PARSEOK               YES, CONTINUE\nPARSERR  CVD   R15,DTEMP             RETURN CODE TO BE OUTPUT W/MSG\n         UNPK  DTEMP(3),DTEMP+6(2)   UNPACK, PREPARE FOR PRINT\n         OI    DTEMP+2,X'F0'         FIX SIGN\n         MVC   MSG01C,DTEMP+1        MOVE TO DYNAMIC MESSAGE AREA\n         TPUT  MSG01,MSG01L          PUT OUT MESSAGE\n         B     RETURN0               RETURN TO TMP\n         EJECT\n**\n**  GET NAME OF DATA SET TO BE COMPRESSED\n**\nPARSEOK  L     R8,PPLRANS            LOAD PARSE ANS. ADDRESS\n         LUSE  PDL,R8                ESTABLISH ADDRESSIBILITY\n         L     R2,PPLDSNAM           LOAD DSNAME ADDRESS\n         LH    R3,PPLDSNAM+4         LOAD LENGTH OF DSNAME\n         STH   R3,DSNLEN             SAVE FOR DAIR\n         BCTR  R3,R0                 DOWN 1 FOR MACH. LEN\n         LA    R4,DSNAME             FOR EXECUTED INSTRUCTION\n         EX    R3,MOVE               EXECUTE THE MOVE\n         INUSE ,\n         EJECT\n**\n**  ALLOCATE DATA SET TO BE COMPRESSED\n**\nALLODS   LA    R9,DAIRPB\n         LUSE  DAPB08,R9\n         MVC   DA08CD,=X'0008'\n         XC    DA08FLG(6),DA08FLG\n         LA    R2,DSNLEN\n         ST    R2,DA08PDSN\n         CLEAR DA08DDN,24\n         XC    DA08BLK(16),DA08BLK\n         CLEAR DA08MNM,16\n         TM    PPLDSNAM+22,X'80'      IS PASSWORD PRESENT?\n         BZ    NOPW                   NO, CONTINUE\n         LH    R3,PPLDSNAM+20         LOAD PASSWORD LENGTH\n         BCTR  R3,0                   DECREMENT FOR MACH LEN\n         LA    R4,DA08PSWD            ADDR OF PASSWORD AREA\n         L     R2,PPLDSNAM+16         PTR TO PASSWORD\n         EX    R3,MOVE                MOVE PASSWORD TO AREA\n*****************************************************************SRH*\n*    SEE IF THE PDS TO BE COMPRESSED SHOULD BE ALLOCATED        *SRH*\n*    \"DISP=SHR\" OR \"DISP=OLD\".                                  *SRH*\n*****************************************************************SRH*\nNOPW     DS    0H                                               *SRH*\n         CLI   DISPKW+1,1             WAS 'DISP=OLD' SPECIFIED? *SRH*\n         BE    ALLOCOLD               YEP, DO IT                *SRH*\n         MVC   DA08DSP1(3),SHRCODE    NOPE, MAKE IT SHR         *SRH*\n         B     ALLOCDSP               GO ON                     *SRH*\nALLOCOLD MVC   DA08DSP1(3),OLDCODE    MAKE IT OLD               *SRH*\nALLOCDSP DS    0H                                               *SRH*\n*****************************************************************HMD*\n*    SEE IF WE SHOULD EVENTUALLY ISSUE A HARDWARE RESERVE       *HMD*\n*    TO THE PACK WHICH HOLD THE COMPRESSEE DATA SET             *HMD*\n*****************************************************************HMD*\n         CLI   RESERVE+1,1            DOES HE WANT RESERVE?     *HMD*\n         BE    RSVD                   OK, WE'LL DO IT           *HMD*\n         B     NRSVD                  GO ALLOCATE DATA SET      *HMD*\nRSVD     OI    RESSW,RESI             TURN ON RESERVE SWITCH    *HMD*\nNRSVD    DS    0H                     POINT TO BRANCH TO        *HMD*\n         SPACE 2\n         XC    DA08CTL(5),DA08CTL\n         TM    PPLDSNAM+6,X'40'       TEST FOR DSNAME WITHIN QUOTES\n         BO    CKUNIT                 QUOTES - CHECK UNIT   *HMD 10/79*\n         MVI   DA08CTL,DA08UID     INDICATE TO PREFIX USER ID\nCKUNIT   CLEAR DA08UNIT               CLEAR UNIT FIELD      *HMD 10/79*\n         CLEAR DA08SER                CLEAR VOLSER FIELD    *HMD 10/79*\n         CLI   UNIT+1,0               NO UNIT SPECIFIED?    *HMD 10/79*\n         BE    CKVOLS                 USE PSCB GROUP NAME   *HMD 10/79*\n         TM    UNITTYP+6,X'80'        UNIT SUPPLIED?        *HMD 10/79*\n         BZ    CKVOLS                 NOPE - SEE IF VOL OK  *HMD 10/79*\n         SR    15,15                  CLEAR FOR ICM         *HMD 10/79*\n         ICM   15,3,UNITTYP+4         LENGTH OF CHAR STRING *HMD 10/79*\n         BZ    CKVOLS                 NO PARM SUPPLIED      *HMD 10/79*\n         L     14,UNITTYP             POINTER TO CHAR STRING*HMD 10/79*\n         BCTR  15,0                   BUMP DOWN FORM MVC    *HMD 10/79*\n         EX    15,MOVE001             MOVE TO DAIR P.B.     *HMD 10/79*\nCKVOLS   CLI   VOLUME+1,0             NO VOLUME SPECIFIED?  *HMD 10/79*\n         BE    GOLINK                 USE CATALOG/LINK DAIR *HMD 10/79*\n         TM    VOLSERY+6,X'80'        WAS VOL SPECIFIED     *HMD 10/79*\n         BZ    GOLINK                 NOPE, FORGET IT       *HMD 10/79*\n         SR    15,15                  CLEAR FOR ICM         *HMD 10/79*\n         ICM   15,3,VOLSERY+4         LENGTH OF PARAMETER   *HMD 10/79*\n         BZ    GOLINK                 ZERO LEN PARM - BAD   *HMD 10/79*\n         L     14,VOLSERY             POINTER TO CHAR STRING*HMD 10/79*\n         BCTR  15,0                   BUMP DOWN FOR MVC     *HMD 10/79*\n         EX    15,MOVE002             MOVE IN VOLSER        *HMD 10/79*\n         B     GOLINK                 BRANCH AROUND EXEC.   *HMD 10/79*\nMOVE001  MVC   DA08UNIT(0),0(14)      ** EXECUTED **        *HMD 10/79*\nMOVE002  MVC   DA08SER(0),0(14)       ** EXECUTED **        *HMD 10/79*\n         SPACE\nGOLINK   LA    R1,DAPL\n         XC    TSOECB,TSOECB\n         CALLTSSR EP=IKJDAIR          DO DAIR                  *SRH*\n         LTR   R15,R15\n         BZ    CMPRSOK\nIN#USE   CLC   DA08DARC,DAIR020C      DATA SET SHARED?     *HMD 04/79*\n         BE    EXCLMSG                YES, PUT OUT MSG     *HMD 04/79*\n         CLC   DA08DARC,DAIR0210      IS DATA SET IN USE?  *HMD 05/79*\n         BE    SHRALLOC               YUP, PUT OUT MSG     *HMD 05/79*\n         B     CKONVOL                GO SEE IF ON VOLUME  *HMD 04/79*\nEXCLMSG  LA    R1,MSG04               ERROR HEADER         *HMD 04/79*\n         BAL   R14,OUTMSG             TO OUTPUT            *HMD 05/79*\n         TPUT  MSG21,MSG21L           PUT OUT SECOND MSG   *HMD 04/79*\n         B     RETURN0                CLEAR OUT OF HERE    *HMD 04/79*\nSHRALLOC LA    R1,MSG04               ERROR HEADER         *HMD 04/79*\n         BAL   R14,OUTMSG             PUT IT OUT           *HMD 05/79*\n         TPUT  MSG22,MSG22L           PUT OUT SECOND MSG   *HMD 04/79*\n         B     RETURN0                CLEAR OUT OF HERE    *HMD 04/79*\nCKONVOL  CLC   DA08DARC,DAIR6708      NOT ON VOLUME?       *HMD 10/79*\n         BNE   CKCTLG                 NO, CHECK IF CTLGD   *HMD 10/79*\n         LA    R1,MSG05C              LOAD VOL MSG ADDR    *HMD 10/79*\n         BAL   R14,OUTMSG             TO OUTPUT            *HMD 10/79*\n         B     RETURN0                CLEAR OUT OF HERE    *HMD 10/79*\nCKCTLG   CLI   DA08DARC,X'17'         TEST FOR CATALOG ERROR\n         BE    CATERR\nCMPRSERR DC    0H'0'\n         ST    R15,SAVER15\n         LA    R1,MSG04\n         BAL   R14,OUTMSG\n         L     R15,SAVER15\n         L     R1,DA08DARC\n         BAL   R14,DAIRERR\n         B     RETURN0\nCATERR   CLI   DA08DARC+1,X'08'        DATA SET NOT CATLGD?\n         BE    NOTCATLG                YES, INDICATE ERROR\n         CLI   DA08DARC+1,X'0C'        BAD INDEX?\n         BE    LOWLEV                  YES, INDICATE ERROR\n         CLI   DA08DARC+1,X'10'        SAME?\n         BNE   CMPRSERR                NO, MUST BE OTHER ERROR\nLOWLEV   LA    R1,MSG05A               LOAD MESSAGE ADDRESS\n         BAL   R14,OUTMSG              PUT IT OUT TO USER\n         B     RETURN0                 INDICATE ERROR\nNOTCATLG LA    R1,MSG03\n         BAL   R14,OUTMSG\n         B     RETURN0\nCMPRSOK  MVC   INDD(8),DA08DDN         INDD\n         MVC   OUTDD(8),DA08DDN        OUTDD\n         TM    DA08DSO,X'02'           IS DATASET PARTITIONED?@HMD78185\n         BNO   BADTYP                  NO                     @HMD78185\nMOVUID   TM    RESSW,RESI              ISSUE RESERVE?       *HMD 05/79*\n         BNO   ALLODUM                 NO, FORGET THIS CODE *HMD 05/79*\n         TM    PPLDSNAM+6,X'40'        DSNAME IN QUOTES?      @HMD78185\n         CLEAR DSNHOLD                 CLEAR DSNAME HOLD AREA @HMD78185\n         BO    WHOLQUAL                FULLY QUALIFIED        @HMD78185\n         L     R1,CPPLUPT              GET UPT ADDRESS      *HMD 04/79*\n         LA    R1,UPTPREFX-UPT(R1)     POINT TO PREFIX      *HMD 04/79*\n         SLR   R2,R2                   CLEAR FOR IC           @HMD78185\n         IC    R2,7(R1)                GET USERID LENGTH      @HMD78185\nMOVIT    MVC   DSNHOLD(0),0(R1)        << EXECUTED >>         @HMD78185\n         BCTR  R2,0                    DOWN FOR MVC           @HMD78185\n         EX    R2,MOVIT                MOVE USERID TO AREA    @HMD78185\n         LA    R1,DSNHOLD(R2)          POINT TO LAST CHAR     @HMD78185\n         MVI   1(R1),C'.'              MOVE IN DOT            @HMD78185\n         LH    R3,DSNLEN               GET DSN LENGTH         @HMD78185\n         LA    R1,2(R1)                POINT PAST USERID      @HMD78185\nMOVREST  MVC   0(0,R1),DSNAME          << EXECUTED >>         @HMD78185\n         BCTR  R3,0                    BUMP DOWN FOR MVC      @HMD78185\n         EX    R3,MOVREST              OK, WHOLE NAME MOVED   @HMD78185\n         LA    R3,3(R2,R3)             GET FULL DSN LENGTH    @HMD78186\n         STH   R3,ENQLEN               SAVE FOR RNAME LENGTH  @HMD78186\n         B     ALLODUM                 CONTINUE               @HMD78185\nWHOLQUAL MVC   DSNHOLD(0),DSNAME       << EXECUTED >>         @HMD78185\n         LH    R2,DSNLEN               GET DSNAME LENGTH      @HMD78185\n         STH   R2,ENQLEN               SAVE FOR RNAME LENGTH  @HMD78186\n         BCTR  R2,0                    BUMP DOWN FOR MVC      @HMD78185\n         EX    R2,WHOLQUAL             MOVE DSNAME            @HMD78185\n         B     ALLODUM                 CONTINUE               @HMD78185\n         SPACE 2\nBADTYP   LA    R1,MSG05                LOAD ADDR OF ERROR MSG\n         BAL   R14,OUTMSG              PUT OUT MESSAGE\n         B     RETURN1                 RETURN TO TMP\n         SPACE 2\nRETURN0  MVC   COMPCD,=F'20'           MOVE ERROR CODE\n         B     RETURN3                 RETURN HOME\n         INUSE ,                       SEE WHO'S ON FIRST\n         EJECT\n**\n**  ALLOC DUMMY FOR SYSIN\n**\n**  R9 STILL POINTS TO DAPB AND 0008 IS IN DA08CD\n**\nALLODUM  XC    DA08FLG(10),DA08FLG    CLEAR DAIRPB FLAGS\n         CLEAR DA08DDN,24             CLEAR DDNAME AREA\n         XC    DA08BLK(16),DA08BLK    CLEAR BLOCKSIZE\n         CLEAR DA08MNM,16             NO MEMBER NAME\n         MVI   DA08DSP1,DA08NEW       INDICATE NEW DATASET\n         XC    DA08DPS2(2),DA08DPS2   CLEAR SECONDARY DISP\n         MVI   DA08CTL,DA08DMMY       INDICATE DUMMY\n         XC    DA08CTL+1(4),DA08CTL+1 CLEAR RESERVED BYTES\n         XC    TSOECB,TSOECB          RESET ECB\n         LA    R1,DAPL                LOAD DAPPLE ADDRESS\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR                *SRH*\n         LTR   R15,R15                WAS ALLOCATION OK?\n         BZ    SAVDUMDD               YES, CONTINUE\n         ST    R15,SAVER15            SAVE RETURN CODE\n         TPUT  MSG09,MSG09L           PUT OUT ERROR MSG\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R1,DA08DARC            GET DYNAMIC ALLOC. RET CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MSG\n         B     RETURN1                RETURN TO TMP\nSAVDUMDD MVC   SYSIN(8),DA08DDN       SAVE SYSIN DD NAME\n         EJECT\n**\n**  ALLOCATE SYSPRINT\n**\nPRNTCHK  CLI   PRNTKYWD+1,0         NO PRINT KEYWORD?\n         BE    CKRESS               SEE IF RESERVE REQUESTED*HMD 05/79*\n         CLI   PRNTKYWD+1,1         NOPRINT SPECIFIED?\n         BE    ALPRTDUM             YUP, ALLOCATE DUMMY     *HMD 05/79*\n         B     ALPRTDSN             ALLOCATE PRINT TO DSNAME*HMD 05/79*\n***********************************************************************\n** WE COME HERE IF PRINT(*) WAS SPECIFIED, OR IF NO PRINT OPTION WAS **\n** GIVEN. BRANCHED TO FROM ALPRTDSN ROUTINE IF '*' IS SPECIFIED.     **\n** AT THIS POINT CHECK TO SEE IF RESERVE WAS ISSUED. IF SO, FORCE    **\n** PRINT TO DUMMY SO THAT OUTPUT WAIT WILL NOT TIE UP DEVICE DURING  **\n** COMPRESS. SET SWITCH TO SEND MESSAGE TO USER LATER TO INFORM HIM  **\n** OPTION HAS BEEN CHANGED.      ** H. DEAN 05/79 **                 **\n***********************************************************************\nCKRESS   DS    0H                   CHECK FOR RESERVE       *HMD 05/79*\n         TM    RESSW,RESI           WAS RESERVE ISSUED?     *HMD 05/79*\n         BNO   ALTERM               NO, GO AHEAD WITH TERM  *HMD 05/79*\n* IN BATCH TERMINAL WILL REALLY BE MESSAGE CLASS            *HMD 07/79*\n         TM    RESSW,REST           BATCH RUN OF COMPRESS?  *HMD 07/79*\n         BZ    ALTERM               THIS GUY IS UNDER BATCH *HMD 07/79*\n         OI    RESSW,RESB           INDICATE PRINT IS DUMMY *HMD 05/79*\n         B     ALPRTDUM             NOW ALLOCATE PRINT DUMMY*HMD 05/79*\n         INUSE ,\n         EJECT\n**\n**  R9 STILL POINTS TO DAPB AND 0008 IS IN DA08CD\n**\nALPRTDUM XC    DA08FLG(10),DA08FLG    CLEAR DAIR FLAGS\n         CLEAR DA08DDN,24             CLEAR DDNAME FIELD\n         XC    DA08BLK(16),DA08BLK    CLEAR BLOCKSIZE\n         CLEAR DA08MNM,16             NO MEMBER NAME\n         MVI   DA08DSP1,DA08NEW       INDICATE NEW DATASET\n         XC    DA08DPS2(2),DA08DPS2   CLEAR SEC. DISP\n         MVI   DA08CTL,DA08DMMY       INDICATE DUMMY DATASET\n         XC    DA08CTL+1(4),DA08CTL+1 CLEAR RESERVED BYTES\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         LA    R1,DAPL                A DAPPLE A DAY....\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR               *SRH*\n         LTR   R15,R15                ALLOCATION OK?\n         BZ    SAVEDDN                YES, SAVE DDNAME\n         ST    R15,SAVER15            NO, SAVE RETURN CODE\n         TPUT  MSG13,MSG13L           OUTPUT MESSAGE\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R1,DA08DARC            GET DYNAM. ALLOC. RET. CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MESSAGE\nRETURN1  MVC   COMPCD,=F'20'          INDICATE ERROR        *HMD 05/82*\n         B     RETURN2                RETURN TO TMP\n         EJECT\n**\n**  ALLOCATE SYSPRINT TO A DATA SET\n**\nALPRTDSN L     R2,PRNTDSNA          LOAD DSNAME PTR\n         CLI   0(R2),C'*'           IS IT THE TERMINAL?\n         BE    CKRESS               YES, CHECK FOR RESERVE *HMD 05/79*\n         LA    R4,DSNAME            NO, GET DSNAME AREA ADDR\n         LH    R3,PRNTDSNA+4        LOAD LENGTH OF DSNAME\n         STH   R3,DSNLEN            SAVE IN LENGTH FIELD (FOR DAIRPB)\n         BCTR  R3,R0                DOWN 1 FOR MACH. LEN\n         EX    R3,MOVE              MOVE IN DSNAME\n         BAL   R14,ALLOCPRT         GO FINISH ALLOCATION\n         EJECT\n**\n**  ALLOCATE NEW\n**\nALLOCNEW MVC   DA08BLK,PRNTBLK        PRINT BLKSIZE=3509\n         MVI   DA08PQTY+3,10          10 TRACKS PRIMARY\n         MVI   DA08SQTY+3,5           5  TRACKS SECONDARY\n         TM    PRNTDSNA+14,X'80'      TEST FOR MEMBER NAME\n         BZ    ALNOMEM                NO, NOT A PDS\n         MVI   DA08DQTY+3,1           YES, ALLOCATE 1 DIR. BLOCK\nALNOMEM  MVC   DA08DSP1(3),NEWCODE    NEW,CATLG,KEEP\n         OI    DA08CTL,DA08TRKS+DA08RLSE   TRACKS AND RELEASE\n         LA    R1,DAPL                DAPPLE PIE\n         XC    TSOECB,TSOECB          CLEAR  EVENT CNTL BLOCK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR             *SRH*\n         LTR   R15,R15                ALLOCATION OK?\n         BZ    SAVEDDN                YES, SAVE DDNAME\n         INUSE ,\n         EJECT\n**\n**  TRY ALLOC AS SHR\n**\nALLOCSHR BAL   R14,ALLOCPRT           GO DO BASIC ALLOC ROUTINE\n         MVC   DA08DSP1(3),SHRCODE    SHR,KEEP,KEEP\n         LA    R1,DAPL                LOAD DAPPLE ADDRESS\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR             *SRH*\n         LTR   R15,R15                ZERO RETURN CODE?\n         BZ    TESTPO                 YES, TEST FOR PO DSORG\n         ST    R15,SAVER15            NO, SAVE RETURN CODE\n         LA    R1,MSG04               LOAD MESSAGE ADDRESS\n         BAL   R14,OUTMSG             PUT OUT MESSAGE\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R1,DA08DARC            LOAD DYNAM. ALLOC. RET. CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MSG\n         B     RETURN1                RETURN TO TMP\nTESTPO   TM    DA08DSO,X'02'          TEST FOR PO DSORG\n         BZ    SAVEDDN                NOT PARTITIONED, SAVE DDNAME\n         CLI   DA08MNM,C' '           IS MEMBER NAME BLANK?\n         BNE   SAVEDDN                NO, SAVE DDNAME\n         LA    R1,MSG07               YES, PUT OUT ERROR MESSAGE\n         BAL   R14,OUTMSG             INDICATE ERROR\n         B     RETURN1                RETURN TO TMP\nSAVEDDN  MVC   SYSPRINT(8),DA08DDN    MOVE DDNAME TO SYSPRINT AREA\n         B     ALUT34                 GO ALLOC SYSUT3 AND SYSUT4\n         EJECT\n**\n**  ALLOC SYSPRINT TO TERMINAL\n**\n         LDROP R9\n         LUSE  DAPB1C,R9\nALTERM   LA    R9,DAIRPB              RESTORE DAIR PB ADDR\n**                                                                **\n** CHECK FOR TERMINAL OR BATCH -                                  **\n** IF BATCH - ALLOCATE A SYSOUT DATA SET TO THE MESSAGE CLASS     **\n**                                                                **\n         TM    RESSW,REST             BATCH JOB?           *HMD 07/79*\n         BZ    SYSOUTDS               YUP, ALLOC SYSOUT DS *HMD 07/79*\nTERMINAL MVC   DA1CCD,=X'001C'        MOVE IN TERMINAL CODE\n         XC    DA1CFLG(6),DA1CFLG     CLEAR DAIR FLAGS\n         MVC   DA1CDDN,BLANK          CLEAR DDNAME\n         LA    R1,DAPL                LOAD DAPPLE ADDRESS\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR            *SRH*\n         LTR   R15,R15                ZERO RTN CODE?\n         BZ    SAVETDSN               YES, SAVE TERMINAL DDNAME\n         ST    R15,SAVER15            NO, SAVE RETURN CODE\n         TPUT  MSG06,MSG06L           PUT OUT ERROR MSG\n         L     R15,SAVER15            RESTORE RETURN CODE\n         XC    DA1CDARC+2(2),DA1CDARC CLEAR FIRST 2 DARC BYTES\n         L     R1,DA1CDARC            LOAD DYNAM. ALLOC. RTN. CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MSG\n         B     RETURN1                RETURN TO TMP\nSAVETDSN MVC   SYSPRINT(8),DA1CDDN    MOVE DDNAME SYSPRINT AREA\n         B     ALUT34                 GO ALLOC SYSUT3 AND SYSUT4\n         INUSE ,\n         EJECT\n*********************************************************************\n**  THIS SUBROUTINE WILL ALLOCATE A SYSOUT DATA SET FOR PRINTING   **\n**  IEBCOPY MESSAGES IF TERMINAL IS SPECIFIED ON THE PRINT KEYWORD **\n**  (OR TAKEN BY DEFAULT) AND THE USER IS RUNNING THE TMP UNDER    **\n**  BATCH MODE.                                                    **\n*********************************************************************\n         LDROP R9                     GET RID OF BASE       *HMD 07/79*\n         LUSE  DAPB30,R9              ADDRESS DAIR PB       *HMD 07/79*\nSYSOUTDS LA    R9,DAIRPB              ALLOCATE A SYSOUT DS  *HMD 07/79*\n         MVC   DA30CD,=X'0030'        MOVE IN PROPER CODE   *HMD 07/79*\n         XC    DA30FLG(6),DA30FLG     CLEAR FLAGS           *HMD 07/79*\n         XC    DA30PDSN,DA30PDSN      CLEAR DSNAME POINTER  *HMD 07/79*\n         CLEAR DA30DDN,24             CLEAR DDNAME, ETC     *HMD 07/79*\n         XC    DA30BLK(12),DA30BLK    CLEAR ATTRIBUTES      *HMD 07/79*\n         CLEAR DA30PGNM,12            CLEAR PROGRAM NAME    *HMD 07/79*\n         MVI   DA30CTL,DA30PERM       PERM. ALLOCATION      *HMD 07/79*\n         LA    R1,DAPL                A DAPPLE A DAY...     *HMD 07/79*\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLOCK*HMD 07/79*\n         CALLTSSR EP=IKJDAIR          CALL SERVICE ROUTINE  *HMD 07/79*\n         LTR   R15,R15                CHECK REG. 15         *HMD 07/79*\n         BZ    SAVESDDN               SAVE SYSOUT DDNAME    *HMD 07/79*\n         ST    R15,SAVER15            SAVE RETURN CODE      *HMD 07/79*\n         TPUT  MSG06A,MSG06AL         PUT OUT MESSAGE       *HMD 07/79*\n         L     R15,SAVER15            RESTORE RETURN CODE   *HMD 07/79*\n         XC    DA30DARC+2(2),DA30DARC CLEAR FIRST TWO BYTES *HMD 07/79*\n         L     R1,DA30DARC            LOAD RETURN CODE      *HMD 07/79*\n         BAL   R14,DAIRERR            PUT OUT ERROR MSG     *HMD 07/79*\n         B     RETURN1                RETURN TO TMP         *HMD 07/79*\nSAVESDDN MVC   SYSPRINT(8),DA30DDN    MOVE DDNAME TO LIST   *HMD 07/79*\n         B     ALUT34                 ALLOCATE OTHER DS     *HMD 07/79*\n         INUSE ,\n         EJECT\n**\n** BASIC ALLOCATION OF SYSPRINT DATA SET\n**\n         LDROP R9\n         LUSE  DAPB08,R9\nALLOCPRT ST    R14,SAVER14            STORE RETURN ADDRESS\n         MVC   DA08CD,=X'0008'        MOVE IN DAIR CODE\n         XC    DA08FLG(6),DA08FLG     CLEAR DAIR FLAGS\n         LA    R2,DSNLEN              LOAD DSNAME ADDR\n         ST    R2,DA08PDSN            STORE IN DAPB\n         CLEAR DA08DDN,24             CLEAR DDNAME AREA\n         XC    DA08BLK(16),DA08BLK    CLEAR BLKSIZE\n         CLEAR DA08MNM,16             CLEAR MEMBER NAME AREA\n         TM    PRNTDSNA+14,X'80'      TEST FOR MEMBER NAME\n         BZ    NOMEM                  NO MEMBER NAME PRESENT\n         LH    R3,PRNTDSNA+12         LOAD MEMBER NAME LENGTH\n         BCTR  R3,R0                  DOWN 1 FOR MACH. LEN\n         LA    R4,DA08MNM             MOVE MEMBER NAME TO DAIR PB\n         L     R2,PRNTDSNA+8                 \"\n         EX    R3,MOVE                       \"\nNOMEM    XC    DA08DSP1(7),DA08DSP1   CLEAR DISP FIELDS\n         TM    PRNTDSNA+22,X'80'      TEST FOR PASSWORD\n         BZ    NOPSWRD                NOT PRESENT\n         L     R2,PRNTDSNA+16         POINTER TO PASSWORD\n         LA    R4,DA08PSWD            LOAD PASSWORD AREA ADDRESS\n         LH    R3,PRNTDSNA+20         LENGTH OF PASSWORD\n         BCTR  R3,0                   DOWN 1 FOR MACH. LEN\n         EX    R3,MOVE                MOVE PASSWORD TO AREA\nNOPSWRD  TM    PRNTDSNA+6,X'40'       TEST FOR QUOTES\n         BO    ALLOCRTN               NO, LEAVE DSNAME ALONE\n         OI    DA08CTL,DA08UID        PREFIX USERID\nALLOCRTN L     R14,SAVER14            RESTORE RET REG\n         BR    R14                    RETURN\n         INUSE ,\n         EJECT\n**\n**  ALLOCATE SYSUT3 AND SYSUT4\n**\n         LDROP R9\n         LUSE  DAPB08,R9\nALUT34   LA    R9,DAIRPB              RESTORE DAIR PB ADDRESS\n         LA    R7,2                   TWO SYSUTS\n         MVC   DA08CD,=X'0008'        MOVE IN DAIR CODE\nSYSUTLP  XC    DA08FLG(6),DA08FLG     CLEAR FLAGS\n         LA    R2,SYSUTX              LOAD \"SYSUT\" DSNAME ADDR\n         ST    R2,DA08PDSN            SAVE IN DAIR PB\n         CLEAR DA08DDN,24             CLEAR DDNAME AREA\n         XC    DA08BLK(16),DA08BLK    CLEAR BLK SIZE\n         MVI   DA08PQTY+3,5           5 CYL PRIMARY ALLOCATION\n         MVI   DA08SQTY+3,2           2 CYL SECONDARY ALLOCATION\n         CLEAR DA08MNM,16             CLEAR MEMBER NAME AREA\n         MVC   DA08DSP1(3),TEMPCODE   NEW,DELETE,DELETE\n         MVI   DA08CTL,DA08CYLS       CYLINDER ALLOCATION\n         XC    DA08CTL+1(4),DA08CTL+1 CLEAR RESERVED BYTES\n         LA    R1,DAPL                A DAPPLE A DAY....\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR            *SRH*\n         LTR   R15,R15                ZERO RETURN CODE?\n         BZ    SYSUTST                YES, GET NEXT SYSUT\n         ST    R15,SAVER15            SAVE BAD RETURN CODE\n         TPUT  MSG08,MSG08L           PUT OUT MESSAGE\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R1,DA08DARC            LOAD DYNAM. ALLOC. RET. CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MESSAGE\n         B     RETURN1                RETURN TO TMP\nSYSUTST  LR    R4,R7                  EITHER 2 OR 1 (2 FIRST TIME)\n         SLL   R4,3                   EITHER 16 OR 8 (16 FIRST TIME)\n         LA    R4,OUTDD(R4)           OFFSET FROM OUTDD\n         LA    R2,DA08DDN             LOAD DDNAME ADDRESS\n         LA    R3,7                   MOVE 8 BYTES\n         EX    R3,MOVE                OF THE DDNAME\n         BCT   R7,MOVEUTNO            GET SYSUT3 ALLOCATED\n         B     SETSTAX                GO SPECIFY ATTN EXIT\nMOVEUTNO MVI   SYSUTXNO,C'3'          CHANGE DSNAME TO \"SYSUT3\"\n         B     SYSUTLP                LOOP ONE MORE TIME\n         INUSE ,\n         EJECT\n**\n** ALL THE DATA SETS ARE ALLOCATED. INITAITE STAX.\n**\nSETSTAX  DC    0H'0'\n         STAX  STAXEXIT,OBUF=(ATTNMSG,ATTNMSGL),                       X\n               MF=(E,STAXLIST)\n         EJECT\n**\n** ESTABLISH ESTAE EXIT                                    *HMD 05/79*\n**\n         ESTAE ESEXIT,                 ESTAE EXIT ADDR     *HMD 05/79* X\n               CT,                     CREATE OPTION       *HMD 05/79* X\n               PURGE=NONE,             CLEAR I/O OPS       *HMD 05/79* X\n               PARAM=ESSAVE,           SAVE BASE REGISTERS *HMD 05/79* X\n               ASYNCH=YES,             FOR DEQ MACRO       *HMD 05/79* X\n               TERM=YES,               EVEN OPR CANCEL     *HMD 05/79* X\n               MF=(E,ESLIST)           POINT TO LIST FORM  *HMD 05/79*\n         EJECT\n**\n**  TEST IF SAFETY WANTED  (HMD 08/77)\n**\nSAFECK   TPUT  MSG19,MSG19L          TELL USER SOMETHING IS HAPPENING\n         TM    RESSW,REST            BATCH USER?            *HMD 07/79*\n         BO    T0001                 NOPE, TERMINAL USER    *HMD 07/79*\n         TPUT  BLANK,BLANKL          PUT OUT BLANK LINE     *HMD 07/79*\n         TPUT  MSG25,MSG25L          TELL USER OF CHANGE    *HMD 07/79*\n         B     SAVECK1               BRANCH AROUND TERM CODE*HMD 07/79*\nT0001    DS    0H                    TERMINAL USER ONLY     *HMD 07/79*\n         TM    RESSW,RESB            PRINT(*) WITH RESERVE? *HMD 05/79*\n         BNO   SAVECK1               NO, FORGET MSGS\n         TPUT  BLANK,BLANKL          PUT OUT BLANK LINE     *HMD 05/79*\n         TPUT  MSG23,MSG23L          FIRST PART OF MSG      *HMD 05/79*\n         TPUT  MSG24,MSG24L          SECOND PART OF MSG     *HMD 05/79*\nSAVECK1  DS    0H                                           *HMD 05/79*\n         CLI   SAFEKW+1,1            WAS NOSAFETY SPECIFIED\n         BE    BLNKLNE               YES, PUT OUT BLANK LINK\n         NI    ERRFLG,255-ERRIND     TURN OFF SAFETY ERROR  *HMD 05/82*\n         OI    ERRFLG,ERRSAF         INDICATE SAFETY COPY   *HMD 05/82*\n         BAL   R14,SAFETY            LINK TO SAFETY ROUTINE\n         ST    R15,COMPCD            SAVE COMPLETION CODE   *HMD 05/82*\n         OC    COMPCD,COMPCD         IS COMPLETION CODE ZERO*HMD 05/82*\n         BZ    TELLIT                YES, TELL USER COPY OK *HMD 05/82*\n         OI    ERRFLG,ERRIND         SET SAFETY COPY MSG    *HMD 05/82*\n         B     RETURN2               GO FREE DS AND SEND MSG*HMD 05/82*\nTELLIT   TPUT  MSG17,MSG17L          COPY OK, TELL USER\n         NI    ERRFLG,ERRSAFO        TURN OFF SAFETY IND.   *HMD 05/82*\n         B     RELEASE               GO RELEASE PDE\nBLNKLNE  TPUT  BLANK,BLANKL          PUT OUT BLANK LINE\n         EJECT\n**\n**  RELEASE PDL\n**\nRELEASE  IKJRLSA PPLRANS\n         EJECT\n**                                                            @HMD78184\n**  RESERVE DATASET BETWEEN CPUS                              @HMD78184\n**                                                            @HMD78184\nRESRVE   DS    0H                                             @HMD78184\n         TM    RESSW,RESI         ISSUE RESERVE?           *HMD 05/79*\n         BNO   ATTACHA            NOPE, GET LOST           *HMD 05/79*\n         EXTRACT UCBADD,FIELDS=TIOT,MF=(E,EXTRA)              @HMD78185\n         L     R1,UCBADD          GET TIOT ADDRESS            @HMD78184\n         LA    R1,24(,R1)         POINT TO DDNAME LIST        @HMD78184\n         LA    R3,INDD            POINT TO INPUT DDNAME       @HMD78184\nTIOTLOOP CLC   =F'0',0(R1)        END OF TIOT?                @HMD78184\n         BE    TIOTERR            YES, INDICATE ERROR AND END @HMD78184\n         SLR   R2,R2              CLEAR FOR IC                @HMD78185\n         IC    R2,0(R1)           GET LENGTH OF THIS DD ENTRY @HMD78184\n         CLC   0(8,R3),4(R1)      DOES DDNAME ENTRY MATCH     @HMD78184\n         BE    GOTUCB             YES, GOT UCB ADDRESS        @HMD78184\n         LA    R1,0(R2,R1)        GET NEXT DD ADDRESS         @HMD78184\n         B     TIOTLOOP                                       @HMD78184\nGOTUCB   MVC   UCBADD+1(3),17(R1) MOVE IN UCB ADDRESS         @HMD78184\n         L     R2,UCBADD          GET UCB ADDRESS           *HMD 04/79*\n         CLEAR QNAME              BLANK QNAME               *HMD 04/79*\n         MVC   QNAME(6),28(R2)    MOVE IN VOLSER            *HMD 04/79*\n         OI    ENQLST,192         INDICATE LISTEND            @HMD78186\n         LH    R3,ENQLEN          LOAD LENGTH OF DSNAME       @HMD78186\nRSVP     RESERVE (QNAME,DSNHOLD,E,(3),SYSTEMS),UCB=UCBADD,MF=(E,ENQLST)\n         OI    RESSW,RESO         INDICATE RESERVE ISSUED   *HMD 05/79*\n         B     ATTACHA                                        @HMD78184\nTIOTERR  TPUT  MSGTIOT,MSGTIOTL   PUT OUT ERROR MSG           @HMD78184\n         XC    TCB,TCB                CLEAR TCB ADDRESS\n         MVC   COMPCD,=F'20'          FIX COMPETION CODE      @HMD78184\n         OI    ERRFLG,ERRIND          DELETE SAFETY DATASET   @HMD78184\n         B     RETURN2            RETURN TO TMP               @HMD78184\n         EJECT\n**\n**  ATTACH IEBCOPY\n**\nATTACHA  XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         LA    R5,TSOECB              LOAD ECB ADDRESS FOR ATTACH\n         LA    R1,VSPARM              EXEC PARM ADDR\n         ST    R1,TSOUSER+4           SAVE IN DYNAMIC AREA\n         LA    R1,DDNAMES             ALTERNATE DDNAME ADDR\n         ST    R1,TSOUSER+8           SAVE IN DYNAMIC AREA\n         MVI   TSOUSER+8,X'80'        SET VL BIT\n         LA    R1,TSOUSER+4           LOAD PARM LIST ADDRESS\n         ATTACH EP=&COPY,ECB=(5),MF=(E,(1)),SF=(E,ATACHSF), *HMD 07/79*X\n               ESTAI=(ESEXIT,ESSAVE)\n         ST    R1,TCB                 SAVE TCB OF ATTACHED TASK\n         WAIT  1,ECB=TSOECB           WAIT FOR COMPRESS TO COMPLETE\n         L     R1,TCB                 GET TCB ADDRESS       *HMD 05/82*\n         MVC   COMPCD,16(R1)          SAVE RETURN CODE      *HMD 05/82*\nDETACH   DETACH TCB,STAE=YES          DETACH IEBCOPY        *HMD 07/79*\n         TM    RESSW,RESI              WAS RESERVE ISSUED   *HMD 05/79*\n         BNO   RETURN2                 NOPE, FORGET DEQ     *HMD 05/79*\n         LH    R3,ENQLEN              RESTORE LENGTH        @HMD78176\nDEQRTN   DEQ   (QNAME,DSNHOLD,(3),SYSTEMS),RET=HAVE,        *HMD 05/79*X\n               UCB=UCBADD,MF=(E,ENQLST)                     @HMD78186\n         NI    RESSW,255-RESO         INDICATE NO MORE RES  *HMD 05/79*\n         B     RETURN2                                      *HMD 04/79*\nIRVING   LTORG\n         EJECT\n**\n** THIS ROUTINE WILL DYNAMICALLY ALLOCATE A \"SAFETY\"\n** DATASET INTO WHICH THE DATASET TO BE COMPRESSED\n** WILL BE COPIED. IF THE COMPRESS IS SUCCESSFUL,\n** THIS DATASET WILL BE SCRATCHED AND UNCATALOGED. IF\n** THE COMPRESS IS UNSUCCESSFUL (NON-ZERO RETURN CODE\n** FROM IEBCOPY) THE DATASET WILL BE RETAINED.\n**\n** THE NAME OF THE \"SAFETY\" DATASET IS STRUCTURED AS\n** FOLLOWS:\n**\n**   PREFIX.SYSXXXXX.TYYYYYYY.SAFETY\n**\n** WHERE:\n**   PREFIX   =  THE UPT PREFIX OF THE ISSUER OF THE COMPRESS CMD\n**               (NAME SPECIFIED IN SYMBOLIC '&PREFIX' IS USED FOR\n**                BATCH INVOCATION OF THE TMP)\n**   XXXXX    =  THE CURRENT JULIAN DATE\n**   YYYYYYY  =  THE CURRENT TIME OF DAY\n**\n** VALUES FOR DASD SPACE AND DIRECTORY ALLOCATION ARE OBTAINED\n** AS FOLLOWS:\n**\n**  1. PRIMARY AND SECONDARY SPACE ALLOCATIONS ARE OBTAINED\n**     FROM THE DATA EXTENT BLOCK OF THE DATA SET TO BE COMPRESSED\n**\n**  2. DIRECTORY ALLOCATION IS OBTAINED BY ISSUING A SERIES OF\n**     \"GETS\" AGAINST THE DIRECTORY OF THE DATASET TO BE COMPRESSED\n**     AND INCREMENTING A COUNTER UNTIL EOF IS REACHED.\n**\n** TWO DCBS FOR THE DATASET TO BE COMPRESSED ARE PROVIDED,EVEN\n** THOUGH ONLY ONE IS NEEDED. THIS IS TO ALLOW FOR FUTURE EXPANSION\n** OF THIS PROGRAM (ADDITIONAL FEATURES TO BE PROVIDED)\n**\n         EJECT\nSAFETY   DS   0H                      SAFETY ROUTINE\n         ST   R14,SAVES14             SAVE REGISTER 14      *HMD 07/79*\n         TPUT BLANK,BLANKL            PUT OUT LINE OF BLANKS\n         MVC  DDOLD,BLANK             CLEAR OLD DDNAME\n         MVC  DDNEW,BLANK             CLEAR NEW DDNAME\n         STM  R0,R12,SAVESAF          SAVE REGS IN WORK AREA\n         STM  R13,R14,SAVE1314        SAVE REGS 13,14 IN AREA\n         TPUT MSG18,MSG18L            TELL USER ALLOC IN PROGRESS\n         XR   R15,R15                 CLEAR RET CODE REG\n         MVC  DDNAMS,OUTDD            SAVE ORIGINAL DDNAME\n         CLEAR NEWDSN                 CLEAR NEW DSNAME\n         MVC  DSNSAVE(DSNC),DSNCN     MOVE MODEL TO SAVE AREA\n         TIME DEC                     GET TIME AND DATE\n         STM  R0,R1,TIMEDATE          SAVE THE TIME AND DATE\n         OI   TIMEDATE+3,X'0F'        FIX TIME SIGN\n         OI   TIMEDATE+7,X'0F'        FIX DATE SIGN\n         UNPK DSNSAVE+3(5),TIMEDATE+5(3)     MOVE IN DATE\n         UNPK DSNTIME(7),TIMEDATE(4)         MOVE IN TIME\n         LA   R3,DSNC                 LOAD LENGTH OF DSNAME\n         STH  R3,NEWDSNL              NEW  DSNLEN\n         MVC  NEWDSN(DSNC),DSNSAVE    MOVE IN DSNAME\n         EJECT\n**\n**  ALLOCATE SAFETY DATASET\n**\nALLSAF   DS   0H                      SAFETY DS ALLOCATION\n         LA   R9,DAIRPB               RESTORE DAPB ADDRESS\n         LDROP R9\n         LUSE DAPB08,R9\n         MVC  DA08CD,=X'0008'         INDICATE NEW ALLOCATION\n         XC   DA08FLG(6),DA08FLG      CLEAR FLAGS\n         LA   R2,NEWDSNL              LOAD DSN BUFFER ADDRESS\n         ST   R2,DA08PDSN             STORE IN DAPB\n         CLEAR DA08DDN,24             CLEAR DDNAME AREA\n         CLEAR DA08BLK,16,TYPE=Z      CLEAR SPACE  AREA\n         CLEAR DA08MNM,16             CLEAR MEMBER NAME AREA\n         MVC   DA08DSP1(3),NEWCODE    NEW,CATLG,KEEP\n         CLEAR DA08ALN,8              CLEAR ATTRIBUTE LIST NAME AREA\n         XC    DA08CTL+1(3),DA08CTL+1 CLEAR RESERVED BYTES\n         EJECT\n**\n**  CALCULATE SPACE REQUIRED FOR SAFETY DS\n**\nCALCSPAC DS    0H                     CALCULATE NEEDED SPACE\n         XC    OPENLIST,OPENLIST      CLEAR OPEN LIST\n         OI    OPENLIST+4,X'80'       SET VL BIT\n         MVC   PODCB+DCBDDNAM-IHADCB(8),DDNAMS MOVE DDNAME\n         MVC   EXDCB+DCBDDNAM-IHADCB(8),DDNAMS MOVE DDNAME\n         OPEN  (PODCB,INPUT,EXDCB,INPUT),MF=(E,OPENLIST)\n         L     R7,EXDCB+DCBDEBAD-IHADCB       LOAD DEB ADDRESS\n         LUSE  DEBBASIC,R7            ESTABLISH ADDRESSIBILITY\n         XR    R5,R5                  CLEAR COUNTER\n         XR    R6,R6                  CLEAR COUNTER\n         IC    R6,DEBNMEXT            INSERT NUMBER OF EXTENTS\n         LA    R7,32(,R7)             POINT TO DASD SECTION OF DEB\n         LDROP R7                     DROP OLD DSECT\n         LUSE  DEBDASD,R7             ADDRESSABILITY TO DEBDASD\nUSAGE    AH    R5,DEBNMTRK            GET NUMBER OF TRKS\n         LA    R7,16(,R7)             SIZE OF DEB EXTENT ENTRY\n         BCT   R6,USAGE               GET TOTAL # TRKS\n*\n*  CALCULATE THE SPACE IN BLOCKS BECAUSE THE DEVICE TYPE FOR THE SAFETY\n*  DATASET MAY NOT BE THE SAME AS THE PDS TO BE COMPRESSED.\n*\n         DEVTYPE DDNAMS,DEVAREA       GET DEVICE INFO ABOUT PDS\n         SR    R6,R6                  CLEAR R6\n         SR    R1,R1                  CLEAR R1\n         ICM   R1,3,EXDCB+DCBBLKSI-IHADCB GET PDS BLKSIZE\n         L     R7,MAXTRKSZ            GET MAX USABLE TRKSIZE\n         DR    R6,R1                  GET #BLKS/TRK\n* NOW SHOULD HAVE # OF BLKS PER TRK IN R7.\n         SR    R6,R6                  CLEAR REMAINDER FROM R6,\n*                                     LEAVE QUOTIENT IN R7.\n         MR    R6,R5                  GET # OF BLKS\n*\n* WE NOW SHOULD HAVE THE # OF BLKS ALLOCATED TO THE PDS IN R7\n*\n         LR    R5,R7                  MOVE IT TO R5\n         ST    R5,DA08PQTY            SAVE IN DAIR PB\n         SRL   R5,2                   DIVIDE BY 4\n         ST    R5,DA08SQTY            SAVE IN DAIR PB SEC\n         XR    R5,R5                  CLEAR COUNTER\n         MVC   DA08BLK+2(2),EXDCB+DCBBLKSI-IHADCB SET AVE BLKSZ\nGETDIR   GET   PODCB                  GET DIR BLOCK\n         LA    R5,1(,R5)              BUMP COUNTER\n         B     GETDIR                 GET ANOTHER BLOCK\nENDOFIL  LA    R5,1(,R5)              BUMP COUNTER\n         ST    R5,DA08DQTY            STORE IN DAIR PB\n         CLOSE (PODCB,,EXDCB),MF=(E,OPENLIST)  CLOSE DCBS\n         LDROP R7\n         INUSE ,                      BASE REGISTER DISPLAY\n         EJECT\n**\n**  LINK TO DAIR\n**\nLINKDAIR MVI   DA08CTL,DA08ABKL+DA08UID+DA08RLSE BLKS AND PREFIX USERID\n         LA    R1,DAPL                LOAD DAPL ADDRESS\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR            *SRH*\n         LTR   R15,R15                TEST RETURN CODE\n         BZ    MOVEDDN                OK, MOVE DDNAME\n         ST    R15,SAVER15            SAVE RETURN CODE\n         TPUT  MSG15,MSG15L           PUT OUT ERROR MSG\n         L     R15,SAVER15            LOAD RETURN CODE\n         L     R1,DA08DARC            LOAD DYNAMIC ALLOC RET CODE\n         BAL   R14,DAIRERR            INDICATE DAIR ERROR\n         LA    R15,20                 LOAD SUBROUTINE COMP CODE\n*                                                           *HMD 05/82*\n         B     RETURNS                GO RETURN TO CALLER\nMOVEDDN  MVC   OUTDD(8),DA08DDN       MOVE DDNAME TO ALT DD LIST\n         MVC   DDNAMR,DA08DDN         SAVE DDNAME FOR LATER\n         EJECT\n**\n**  ALLOCATE DUMMY FOR SYSPRINT\n**\nALOSPD   DS    0H                     ALLOCATE DUMMY SYSPRINT\n         MVC   DDOLD(8),SYSPRINT      SAVE ORIGINAL SYSPRINT DD\n         XC    DA08FLG(10),DA08FLG    CLEAR DAIR FLAGS\n         CLEAR DA08DDN,24             CLEAR DDNAME AREA\n         CLEAR DA08MNM,16             CLEAR MEMBER NAME AREA\n         MVI   DA08CTL,DA08DMMY       DUMMY DATASET\n         XC    DA08CTL+1(4),DA08CTL+1 CLEAR RESERVED BYTES\n         XC    DA08BLK(4),DA08BLK     CLEAR BLKSIZE FROM LAST *SRH*\n*                                     CALL TO DAIR.           *SRH*\n         MVI   DA08DSP1,DA08NEW       NEW DATASET\n         XC    DA08DPS2(2),DA08DPS2   CLEAR SECONDARY DISP\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         CALLTSSR EP=IKJDAIR          LINK TO DAIR           *SRH*\n         LTR   R15,R15                ZERO RETURN CODE?\n         BZ    SAVDDPT                SAVE PRINT DDNAME\n         ST    R15,SAVER15            SAVE RETURN CODE\n         TPUT  MSG20,MSG20L           PUT OUT MSG\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R1,DA08DARC            LOAD DYNAMIC ALLOC. RET. CODE\n         BAL   R14,DAIRERR            PUT OUT SECONDARY MSG\n         LA    R15,20                 LOAD SUBROUTINE RTN CODE\n*                                                           *HMD 05/82*\n         B     RETURNS                RETURN TO CALLER\nSAVDDPT  MVC   SYSPRINT(8),DA08DDN    MOVE IN NEW DDNAME\n         MVC   DDNEW,DA08DDN          SAVE DDNAME FOR FREE LATER\n         CLEAR MSG28D                                       *HMD 05/82*\n         LA    R2,MSG28D              POINT TO MSG28D       *HMD 05/82*\n         L     R3,CPPLUPT             GET UPT ADDRESS       *HMD 05/82*\n         SLR   R1,R1                  CLEAR R1              *HMD 05/82*\n         ICM   R1,B'0001',UPTPREFL-UPT(R3)                  *HMD 05/82*\n         BNP   SAVDDPT1               AVOID ZERO LENGTH     *HMD 05/82*\n         BCTR  R1,0                   DECREMENT FOR EX      *HMD 05/82*\n         EX    R1,MVEPREF             MOVE THE PREFIX       *HMD 05/82*\n         LA    R2,MSG28D(R1)          POINT TO END OF PREF  *HMD 05/82*\n         MVI   1(R2),C'.'             MOVE IN DOT           *HMD 05/82*\n         LA    R2,2(,R2)              BUMP POINTER          *HMD 05/82*\nSAVDDPT1 MVC   0(DSNC,R2),DSNSAVE     MOVE IN REST OF NAME  *HMD 05/82*\n         TPUT  MSG28,MSG28L           PUT OUT THE MESSAGE   *HMD 05/82*\n         EJECT\n**\n**  PREPARE AND ATTACH IEBCOPY FOR SAFETY\n**\nATTACHI  DS    0H                     IEBCOPY ATTACH ROUTINE\n         XC    TSOECB,TSOECB          CLEAR EVENT CNTL BLK\n         LA    R5,TSOECB              LOAD ECB ADDRESS\n         LA    R1,VSPARM              LOAD PARM ADDRESS\n         ST    R1,TSOUSER+4           STORE IN WORK AREA\n         LA    R1,DDNAMES             LOAD DDNAMES ADDRESS\n         ST    R1,TSOUSER+8           STORE IN WORK AREA\n         MVI   TSOUSER+8,X'80'        SET VL BIT\n         LA    R1,TSOUSER+4           LOAD PARM ADDRESS\n         ATTACH EP=&COPY,ECB=(5),MF=(E,(1)),SF=(E,ATACHSF)  *HMD 05/82*\n         ST    R1,TCB                 SAVE TCB ADDRESS\n         WAIT  1,ECB=TSOECB           WAIT ON EVENT\n         L     R1,TCB                 GET TCB ADDRESS       *HMD 05/82*\n         MVC   COMPCD,16(R1)          MOVE COMPLETION CODE  *HMD 05/82*\n         DETACH TCB                   DETACH IEBCOPY        *HMD 05/82*\n         L     R15,COMPCD             INSERT RETURN CODE\n         EJECT\n**\n**   RETURN TO CALLER\n**\nRETURNS  DS    0H                     RETURN TO CALLER\n         MVC   OUTDD(8),DDNAMS        RESTORE DDNAME LIST\n         MVC   SYSPRINT(8),DDOLD      RESTORE OLD SYSPRINT\n         LA    R1,DDNEW               LOAD DUMMY SYSPRINT DDNAME ADDR\n         ST    R15,SAVER15            SAFE IEBCOPY RTN. CODE\n         BAL   R14,FREEDDN            FREE THIS DDNAME\n         LM    R13,R14,SAVE1314       RESTORE REG\n         LM    R0,R12,SAVESAF         RELOAD REGS\n         L     R15,SAVER15            RESTORE RETURN CODE\n         L     R14,SAVES14            RESTORE RETURN REG   *HMD 07/79*\n         BR    R14                    RETURN TO CALLER\n         EJECT\n**\n**   RETURN ROUTINES\n**\nRETURN2  LA    R2,11\nRTNLOOP  LR    R3,R2\n         BCTR  R3,R0\n         SLL   R3,3\n         LA    R1,DDNAMLST(R3)\n         BAL   R14,FREEDDN\n         BCT   R2,RTNLOOP\n         LA    R1,DDNAMR                   SAVED DDNAME\n         TM    ERRFLG,ERRIND               ERROR IN SAFETY COPY?\n         BO    DELETE                      YES, DELETE DS\n         CLI   COMPCD,0                    COMPLETION CODE =0?\n         BE    DELETE                      YES, DELETE SAFETY\n         BAL   R14,FREEDDN                 GO FREE DDNAME BUT KEEP DS\n         B     RETURN3                     RETURN TO CALLER\nDELETE   OI    ERRFLG,DELIND               SET DELETE INDICATOR\n         BAL   R14,FREEDDN                 GO DELETE DATASET\nRETURN3  DS    0H                                           *HMD 05/82*\n         SLR   R2,R2                       CLEAR REG 2      *HMD 05/82*\n         MVC   MSG10C(4),=C'0000'          ASSUME ZERO RC   *HMD 05/82*\n         MVC   MSG16C(4),=C'0000'          CLEAR SAFETY CD  *HMD 05/82*\n         ICM   R2,B'0111',COMPCD+1         INSERT CODE      *HMD 05/82*\n         BZ    COMPC                       NO ERROR, LEAVE  *HMD 05/82*\n         CLI   COMPCD,X'00'                ABEND CODE(S)?   *HMD 05/82*\n         BNE   RETURN3A                    YES, PROCESS     *HMD 05/82*\n         CVD   R2,DTEMP                    CONVERT CODE     *HMD 05/82*\n         UNPK  DTEMP(5),DTEMP+5(3)         UNPACK CODE      *HMD 05/82*\n         OI    DTEMP+4,C'0'                FIX SIGN         *HMD 05/82*\n         MVC   MSG10C(4),DTEMP+1                            *HMD 05/82*\n         MVC   MSG16C(4),DTEMP+1                            *HMD 05/82*\n         TM    ERRFLG,ERRSAF               IN SAFETY COPY?  *HMD 05/82*\n         BZ    COMPC                       NO..COMPRESSING  *HMD 05/82*\n         TPUT  MSG16,MSG16L                PUT OUT ERROR MSG*HMD 05/82*\n         B     RETURN4                                      *HMD 05/82*\nCOMPC    DS    0H                                           *HMD 05/82*\n         TPUT  MSG10,MSG10L\n         B     RETURN4                                      *HMD 05/82*\nRETURN3A DS    0H                   PROCESS ABEND CODE      *HMD 05/82*\n         LR    R1,R2                LOAD ERROR CODE         *HMD 05/82*\n         SRL   R1,12                GET SYSTEM CODE         *HMD 05/82*\n         ST    R1,DTEMP+4           SAVE CODE               *HMD 05/82*\n         UNPK  DTEMP(6),DTEMP+6(3)  UPACK RET CODE          *HMD 05/82*\n         TR    DTEMP(5),HEXTAB-240  CONVERT TO HEX          *HMD 05/82*\n         MVC   MSG26S(3),DTEMP+2    MOVE IN CODE            *HMD 05/82*\n         MVC   MSG27S(3),DTEMP+2    MOVE IN AGAIN           *HMD 05/82*\n         N     R2,=F'4095'          CLEAR HI ORDER          *HMD 05/82*\n         XC    DTEMP,DTEMP          CLEAR WORK AREA         *HMD 05/82*\n         CVD   R2,DTEMP             CONVERT IT              *HMD 05/82*\n         UNPK  DTEMP(5),DTEMP+5(3)  UNPACK IT               *HMD 05/82*\n         OI    DTEMP+4,C'0'         FIX SIGN                *HMD 05/82*\n         MVC   MSG26U(4),DTEMP+1    MOVE INTO MESSAGE       *HMD 05/82*\n         MVC   MSG27U(4),DTEMP+1    MOVE INTO MESSAGE       *HMD 05/82*\n         LA    R2,20                PROVIDE RETURN CODE     *HMD 05/82*\n         TM    ERRIND,ERRSAF        IN SAFETY MESSAGE?      *HMD 05/82*\n         BZ    COMPU                NO..COMPRESS            *HMD 05/82*\n         TPUT  MSG26,MSG27L         PUT OUT MESSAGE         *HMD 05/82*\n         B     RETURN4              CONTINUE WITH RETURN    *HMD 05/82*\nCOMPU    DS    0H                                           *HMD 05/82*\n         TPUT  MSG27,MSG27L         PUT OUT MESSAGE         *HMD 05/82*\n         B     RETURN4              CONTINUE WITHE RETURN   *HMD 05/82*\n         SPACE 2                                            *HMD 05/82*\nRETURN4  STAX  ,\n         ESTAE 0                    REMOVE ESTAE EXIT      *HMD 05/79*\n         TM    RESSW,REST           TERMINAL USER?         *HMD 07/79*\n         BO    T0006                FORGET PREFIX MOVE     *HMD 07/79*\n         L     R3,CPPLUPT           GET UPT ADDRESS        *HMD 07/79*\n         MVC   UPTPREFX-UPT(8,R3),SAVEPREF RESTORE PREFIX  *HMD 07/79*\nT0006    L     R10,TSOUSER          LOAD STORAGE ADDRESS\n         FREEMAIN R,LV=STORLEN,A=(10),SP=3\n         TSOLEAVE ISN=LTORG,RETCODE=(2)\n         SPACE 2\n**   EXECUTED INSTRUCTIONS\nMOVE     MVC   0(*-*,R4),0(R2)\nCOMPARE  CLC   0(*-*,R2),0(R4)\nMVEPREF  MVC   0(0,R2),UPTPREFX-UPT(R3)\n         SPACE 2\n**  ATTN EXIT\nSTAXEXIT DC    0H'0' ATTN HANDLER\n         BR    R14 RETURN TO STAX\n         EJECT\n**********************************************************************\n**           E S T A E   E X I T    R O U T I N E                   **\n** THIS ROUTINE WILL RELEASE ANY HELD RESORCE CAUSED BY A RESERVE   **\n** BEING REQUESTED, IN CASE OF ABEND OF 'COMPRESS'. ** HMD 05/79**  **\n**********************************************************************\nESEXIT   LR    R5,R1         SAVE SDWA ADDR                *HMD 05/79*\n         LR    R6,R0         SAVE ENTRY CODE               *HMD 05/79*\n         USING ESEXIT,R15    ADDRESS EXIT                  *HMD 05/79*\n         C     R6,=F'12'     IF R0 = 12, NO STORAGE FOR SDWA *HMD*\n         BE    NOSDWA        NO SDWA, R2 = PARAM ADDR      *HMD 05/79*\n         STM   R14,R12,12(R13)  SAVE REGISTERS             *HMD 05/79*\n         USING SDWA,R1       ADDRESS SDWA                  *HMD 05/79*\n         L     R10,SDWAPARM  GET PARM ADDRESS              *HMD 05/79*\n         LM    R10,R12,0(R10)    LOAD BASE REGS            *HMD 05/79*\n         B     EXITMAIN      PERFORM EXIT PROCESSING       *HMD 05/79*\n         DROP  R1            NO NEED FOR BASE NOW          *HMD 05/79*\nNOSDWA   LM    R10,R12,0(R2) R2 = ADDR OF PARM LIST        *HMD 05/79*\n         DROP  R15\nEXITMAIN TM    RESSW,RESI    WAS RESERVE ISSUED?           *HMD 05/79*\n         BNO   SETRPX        NO, NORMAL TERMINATION        *HMD 05/79*\n         LH    R3,ENQLEN     LOAD ENQ LENGTH FOR DEQ       *HMD 05/79*\n         DEQ   (QNAME,DSNHOLD,(3),SYSTEMS),RET=HAVE,       *HMD 05/79* X\n               UCB=UCBADD,MF=(E,ENQLST)   FREE RESOURCE    *HMD 05/79*\n         NI    RESSW,255-RESO INDICATE RESERVE RELEASED    *HMD 05/79*\nSETRPX   C     R6,=F'12'      WAS SDWA PASSED?             *HMD 05/79*\n         BE    ESTAER         RETURN WITH NO SETRP         *HMD 05/79*\n         SETRP WKAREA=(5),REGS=(14,12),                    *HMD 05/79* X\n               DUMP=NO,RC=0                                *HMD 05/79*\nESTAER   XR    R15,R15          RETURN CODE=0              *HMD 05/79*\n         BR    R14              RETURN TO CONTROL PROG     *HMD 05/79*\n         LTORG ,                PLACE LITERALS HERE        *HMD 07/79*\n         EJECT\n**\n** OUTPUT DATA SET 'DSNAME' --- MESSAGE\n** R1 = ADDR OF LAST PART, R14 = RETURN ADDR, R9 = ADDR OF DAPB\n**\nOUTMSG   ST    R14,SAVER14 SAVE RETURN ADDR\n         LA    R4,MSG02C\n         TM    DA08CTL,DA08UID     TEST FOR QUOTES\n         BO    NOQOUTE1\n         MVI   0(R4),C'''' MOVE QUOTE\n         LA    R4,1(R4)\nNOQOUTE1 L     R3,DA08PDSN LOAD ADDR OF DATA SET NAME\n         LA    R2,2(R3)\n         LH    R3,0(R3) LOAD LENGTH OF DSNAME\n         BCTR  R3,R0 FOR MVC\n         EX    R3,MOVE DSNAME\n         LA    R4,1(R3,R4)\n         TM    DA08CTL,DA08UID     TEST FOR QUOTE\n         BO    NOQUOTE2\n         MVI   0(R4),C'''' MOVE QUOTE\n         LA    R4,1(R4)\nNOQUOTE2 MVI   0(R4),C' '\n         LA    R4,1(R4)\n         LH    R3,0(R1)\n         BCTR  R3,R0\n         LA    R2,2(R1)\n         EX    R3,MOVE\n         LA    R4,1(R3,R4)\n         LA    R2,MSG02\n         SR    R4,R2\n         TPUT  MSG02,(R4) OUTPUT MSG\n         L     R14,SAVER14\n         BR    R14\n         EJECT\n**\n** FREE DDNAME SECTION\n**\n** R1=ADDR OF DDNAME, R14=RETURN ADDR\n** OUTSWT=00 -- NO SYSOUT, OUTSWT=FF SYSOUT=A DATA SET\n**\n         LDROP R9\n         LUSE  DAPB18,R9\nFREEDDN  STM   R2,R9,FREESV29\n         ST    R14,FREESV14\n         LA    R9,DAIRPB\n         MVC   DA18CD,=X'0018'\n         XC    DA18FLG(10),DA18FLG\n         MVC   DA18DDN,0(R1) MOVE DDNAME\n         MVC   DA18MNM,BLANK MEMBER NAME\n         MVC   DA18SCLS,BLANK SYSOUT CLASS\nFREEX2   TM    ERRFLG,DELIND       IS DELETTION REQUESTED\n         BZ    NODEL               NO, DON'T DELETE DS\n         MVI   DA18DPS2,DA18DEL    YES, DELETE DATASET\n         B     AROUND              BRANCH AROUND CODE\nNODEL    MVI   DA18DPS2,DA18KEEP   MOVE IN KEEP CODE\nAROUND   MVI   DA18CTL,DA18PERM    FREE PERMANENT ALLOCATIONS\n         MVC   DA18JBNM,BLANK\n         XC    TSOECB,TSOECB\n         LA    R1,DAPL\n         CALLTSSR EP=IKJDAIR        LINK TO DAIR             *SRH*\n         LM    R2,R9,FREESV29\n         L     R14,FREESV14\n         BR    R14 RETURN\n**\n** END OF FREEDDN SECTION\n**\n         INUSE ,\n         EJECT\n**\n** THIS SECTION CHECKS THE CODE RETURNED FROM DAIR AND OUTPUT THE\n** MESSAGE CORRESPONDING TO THE TYPE. REG 1=DARC& CTRC, REG 14=RETURN\n** ADDR, AND REG 15=RC FROM DAIR\n**\nDAIRERR  ST    R14,DAIRERRN SAVE RETURN ADDR\n         STM   R2,R5,DAIRERRO\n         B     DAIRERR1(R15)\nDAIRERR1 B     DAIRERRG RC=0 DAIR IS O.K. -- RETURN\n         B     DAIRERR5 RC=4 PARM LIST WAS INVALID\n         B     DAIRERR2 RC=8 ERROR IN CATALOG MANAGEMENT\n         B     DAIRERR3 RC=12 ERROR IN DYNAMIC ALLOCATION\n         B     DAIRERR4 RC=16 NO TIOT ENTRIES\n         B     DAIRERR5 RC=20 DDNAME IS UNAVAILABLE\n         B     DAIRERR5 RC=24 DSNAME IS MEMBER OF CONCATENATED GROUP\n         B     DAIRERR5 RC=28 DDNAME OR DSNAME NOT CURRENTLY ALLOCATED\n         B     DAIRERR5 RC=32 DISP=NEW CANNOT BE SPECIFIED\n         B     DAIRERR5 RC=36 ERROR IN CATALOG INFORMATION ROUTINE\n         B     DAIRERR5 RC=40 RETURN AREA FOR QUALIFIERS TOO SMALL\n         B     DAIRERR5 RC=44 DISP=OLD, MOD, OR SHR WITH NO VOL-SER NO.\nDAIRERR2 LR    R2,R1  (RC=8)\nDAIRER21 SRDL  R2,16\n         SRL   R3,16\n         CVD   R3,DAIRERRM\n         UNPK  DAIRERRM(3),DAIRERRM+6(2)\n         OI    DAIRERRM+2,X'F0'\n         MVC   DAIRERRQ,DAIRERRM+1\n         TPUT  DAIRERRP,DAIRERRR\n         B     DAIRERRG\nDAIRERR3 SRL   R1,16 (RC=12)  SHIFT OUT CTRC\n         LR    R2,R1\n         LA    R5,4\nDAIRER31 SRDL  R2,4\n         SRL   R3,28\n         IC    R1,DAIRTAB(R3)\n         STC   R1,DAIRERRT-1(R5)\n         BCT   R5,DAIRER31\n         TPUT  DAIRERRS,DAIRERRU\n         B     DAIRERRG\nDAIRERR4 TPUT  DAIRERRV,DAIRERRW (RC=16)\n         B     DAIRERRG\nDAIRERR5 CVD   R15,DAIRERRM (RC=4,20,24,28,32,36,40,44)\n         UNPK  DAIRERRM(3),DAIRERRM+6(2)\n         OI    DAIRERRM+2,X'F0'\n         MVC   DAIRERRY,DAIRERRM+1\n         TPUT  DAIRERRX,DAIRERRZ\nDAIRERRG LM    R2,R5,DAIRERRO\n         L     R14,DAIRERRN\n         BR    R14\n**\n** END OF DAIR ERROR PROCESSING\n**\n         EJECT\n**********************************************************************\n**  THE FOLLOWING SUBROUTINE WILL ISSUE A PUTLINE FOR TERMINAL      **\n**  MESSAGES, SO THAT 'COMPRESS' CAN BE RUN UNDER THE TMP IN BATCH  **\n**  MODE. PRINT(*) PRINT IS DIRECTED TO MESSAGE CLASS IN THAT CASE. **\n**                                                                  **\n**  INPUT  -  R1 = ADDRESS OF MESSAGE TO BE SENT                    **\n**            R0 = LENGTH  OF MESSAGE TO BE SENT                    **\n** H. DEAN 07/79                                                    **\n**********************************************************************\nPUTLINE  DS    0H                 PUTLINE SUBROUTINE        *HMD 07/79*\n         STM   R0,R15,SAVEPUT     SAVE REGISTERS            *HMD 07/79*\n         LR    R2,R0              SAVE LENGTH IN R2         *HMD 07/79*\n         LA    R0,4(R2)           BUMP LENGTH BY 4 FOR OLD  *HMD 07/79*\n         SLL   R0,16              MOVE TO HIGH ORDER        *HMD 07/79*\n         ST    R0,OUTLINEL        SAVE LENGTH IN AREA       *HMD 07/79*\n         BCTR  R2,0               BUMP DOWN FOR EXECUTE     *HMD 07/79*\n         XC    TSOECB,TSOECB      GET READY FOR PUTLINE     *HMD 07/79*\n         EX    R2,MOVEMSG         MOVE MESSAGE TO AREA      *HMD 07/79*\n         PUTLINE PARM=PTPB,MF=(E,IOPL),                     *HMD 07/79*X\n               OUTPUT=(OUTLINEL,SINGLE,DATA),               *HMD 07/79*X\n               TERMPUT=(EDIT,WAIT,HOLD)                     *HMD 07/79*\n         LM    R0,R15,SAVEPUT     RESTORE REGISTERS         *HMD 07/79*\n         BR    R14                RETURN  TO CALLER         *HMD 07/79*\nMOVEMSG  MVC   OUTLINE(0),0(R1)   MOVE MESSAGE TO AREA      *HMD 07/79*\n         EJECT\n**\n**   MESSAGE CONSTANT AREA\n**\nDAIRERRA DC    C'CATALOG MANAGEMENT ERROR CODE '\nDAIRLTH  EQU   *-DAIRERRA\nDAIRERRB DC    C'DYNAMIC ALLOCATION ERROR CODE '\nDAIRLTG  EQU   *-DAIRERRB\nDAIRERRC DC    C'UNABLE TO ALLOCATE, MAXIMUM NUMBER OF ALLOCATIONS EXCEX\n               EDED'\nDAIRLTF  EQU   *-DAIRERRC\nDAIRERRD DC    C'ERROR RETURNED FROM DYNAMIC ALLOCATION CODE '\nDAIRLTE  EQU   *-DAIRERRD\nDAIRTAB  DC    C'0123456789ABCDEF'\n**\n** ERROR MESSAGES FOR TPUT\n**\nMSG0A    DC    C'ERROR INDICATED FROM PARSE -- CODE='\nMSG01Z   EQU   *-MSG0A\nMSG0B    DC    C'DATA SET '\nMSG02Y   EQU   *-MSG0B\nMSG03    DC    Y(MSG03L),C'NOT IN CATALOG'\nMSG03L   EQU   *-MSG03-2\nMSG04    DC    Y(MSG04L),C'NOT ALLOCATED'\nMSG04L   EQU   *-MSG04-2\nMSG05    DC    Y(MSG05L),C'NOT PARTITIONED - COMPRESS ENDED'\nMSG05L   EQU   *-MSG05-2\nMSG05A   DC    Y(MSG05AL),C'EXISTS AT A LOWER LEVEL'\nMSG05AL  EQU   *-MSG05A-2\nMSG05C   DC    Y(MSG05CL),C'NOT ON VOLUME AS SPECIFIED OR INDICATED IN X\n               THE CATALOG'                                 *HMD 10/79*\nMSG05CL  EQU   *-MSG05C-2\nMSG06    DC    C'SYSPRINT DATA SET NOT ALLOCATED TO TERMINAL'\nMSG06L   EQU   *-MSG06\nMSG06A   DC    C'TERMINAL OUTPUT ALLOCATION TO MESSAGE CLASS FAILED'\nMSG06AL  EQU   *-MSG06A                                     *HMD 07/79*\nMSG07    DC    Y(MSG07L),C'PARTITIONED -- NO MEMBER NAME SPECIFIED'\nMSG07L   EQU   *-MSG07-2\nMSG08    DC    C'UTILITY DATA SET NOT ALLOCATED'\nMSG08L   EQU   *-MSG08\nMSG09    DC    C'SYSIN (DUMMY) DATA SET NOT ALLOCATED'\nMSG09L   EQU   *-MSG09\nMSG10A   DC    C'COMPRESS IS COMPLETE -- HIGHEST SEVERITY CODE IS '\nMSG10X   EQU   *-MSG10A\nMSG13    DC    C'SYSPRINT (DUMMY) NOT ALLOCATED'\nMSG13L   EQU   *-MSG13\nMSG15    DC    C'SAFETY DATASET ALLOCATION FAILED -'\nMSG15L   EQU   *-MSG15\nMSG16A   DC    C'SAFETY COPY ERROR - RETURN CODE IS '\nMSG16AL  EQU   *-MSG16A\nMSG17    DC    C'SAFETY COPY COMPLETE - RETURN CODE IS 0000'\nMSG17L   EQU   *-MSG17                                      *HMD 05/82*\nMSG18    DC    C'SAFETY DATASET COPY IN PROGRESS'\nMSG18L   EQU   *-MSG18\nMSG19    DC    C'COMPRESS VER 6.1-(SYNTEX HMD-&DXT)-\"PDS COMPRESSOR\"'\n*                                                           *HMD 01/85*\nMSG19L   EQU   *-MSG19\nMSG20    DC    C'SAFETY PRINT FILE (DUMMY) NOT ALLOCATED'\nMSG20L   EQU   *-MSG20\nMSG21    DC    C'DATA SET IN USE - CANNOT BE ALLOCATED OLD'      *HMD*\nMSG21L   EQU   *-MSG21\nMSG22    DC    C'ANOTHER USER HAS EXCLUSIVE CONTROL OF DATA SET' *HMD*\nMSG22L   EQU   *-MSG22\nMSG23    DC    C'PRINT(*) AND RESERVE ARE MUTUALLY EXCLUSIVE'    *HMD*\nMSG23L   EQU   *-MSG23\nMSG24    DC    C'NOPRINT HAS BEEN USED INSTEAD '                 *HMD*\nMSG24L   EQU   *-MSG24\nMSG25    DC    C'TERMINAL OUTPUT WILL BE DIRECTED TO MESSAGE CLASS'\nMSG25L   EQU   *-MSG25                                      *HMD 07/79*\nMSG26A   DC    C'SAFETY COPY ABEND - SYSTEM=XXX USER=XXXX'  *HMD 05/82*\nMSG26X   EQU   *-MSG26A                                     *HMD 05/82*\nMSG27A   DC    C'COMPRESS ABEND - SYSTEM=XXX USER=XXXX'     *HMD 05/82*\nMSG27X   EQU   *-MSG27A                                     *HMD 05/82*\nMSG28A   DC    C'GENERATED DATASET NAME - '                 *HMD 05/82*\nMSG28X   EQU   *-MSG28A                                     *HMD 05/82*\nATTNMSG  DC    C'YOU CANNOT INTERRUPT ''COMPRESS'''\nATTNMSGL EQU   *-ATTNMSG\nMSGTIOT  DC    C'ERROR IN LOCATING DD ENTRY IN TIOT - COMPRESS ENDED'\nMSGTIOTL EQU   *-MSGTIOT\n         EJECT\n**\n**   MISC CONSTANTS\n**\nHEXTAB   DC    C'0123456789ABCDEF' HEX CONVERT TABLE        *HMD 05/82*\nPRNTBLK  DC    F'3509'             PRINT BLOCKSIZE\nBLANK    DC    CL8' '              SPACES FOR MVC\nBLANKL   EQU   L'BLANK             LENGTH OF BLANK AREA\nDAIR020C DC    X'020C'             DAIR ERROR CODE = 020C  *HMD 05/79*\nDAIR0210 DC    X'0210'             DAIR ERROR CODE = 0210  *HMD 05/79*\nDAIR6708 DC    X'6708'             DAIR ERROR CODE = 6708  *HMD 10/79*\nAPPLPARM DC    A(PPLPARM)          PARSE LIST ADDRESS\nSYSUTA   DC    Y(SYSUTXL)\n         DC    X'50' AMPERSAND\n         DC    C'SYSUT'\nSYSUTXB  DC    C'4'\n         EJECT\n**\n**  CONSTANTS FOR SAFETY\n**\nDSNCN    DC    C'SYSXXXXX.TXXXXXXX.SAFETY'\nDSNC     EQU   *-DSNCN\nTEMPCODE DC    X'040404'              NEW,DELETE,DELETE\nNEWCODE  DC    X'040208'              NEW,CATLG,KEEP\nNEWKEEP  DC    X'040808'              NEW,KEEP,KEEP         *HMD 07/79*\nSHRCODE  DC    X'080808'              SHR,KEEP,KEEP\nOLDCODE  DC    X'010808'              OLD,KEEP,KEEP\n         EJECT\nADCB     DCB   DSORG=PS,BLKSIZE=256,LRECL=256,RECFM=F,EODAD=ENDOFIL,   &\n               DDNAME=X,MACRF=(GL)\nADCBL    EQU   *-ADCB\n         EJECT\nBDCB     DCB   DSORG=PO,DDNAME=X,MACRF=(R),EODAD=ENDOFIL\nBDCBL    EQU   *-BDCB\n         EJECT\n**\n** PARSE PARM LIST\n**\nPPLPARM  IKJPARM DSECT=PDL\nPPLDSNAM IKJPOSIT DSNAME,PROMPT='DATA SET NAME+',HELP=('NAME OF PARTITI*\n               ONED DATA SET TO BE COMPRESSED+','NAME OF PARTITIONED DA*\n               TA SET TO REMOVE UNUSED SPACE')\nPRNTKYWD IKJKEYWD\n         IKJNAME 'NOPRINT'\n         IKJNAME 'PRINT',SUBFLD=PRNTSUBF\nSAFEKW   IKJKEYWD DEFAULT='SAFETY'         DEFINE SAFETY KEYWORD\n         IKJNAME  'NOSAFETY'               SAFETY BYPASS\n         IKJNAME  'SAFETY'                 TURN ON SAFETY\nDISPKW   IKJKEYWD DEFAULT='SHR'            DEFAULT TO \"SHR\"\n         IKJNAME  'OLD'                    OLD KEYWORD     *HMD 04/79*\n         IKJNAME  'SHR'                    SHR KEYWORD     *HMD 04/79*\nRESERVE  IKJKEYWD DEFAULT='NORESERVE'      DEFAULT NORES   *HMD 04/79*\n         IKJNAME  'RESERVE'                RESERVE PACK    *HMD 04/79*\n         IKJNAME  'NORESERVE'              DO NOT RESERVE  *HMD 04/79*\nVOLUME   IKJKEYWD  ,                       VOLUME OF D/S   *HMD 10/79*\n         IKJNAME  'VOLUME',SUBFLD=VOLSUBF  VOLUME OF D/S   *HMD 10/79*\nUNIT     IKJKEYWD  DEFAULT='UNIT(&UDEF)'   UNIT TYPE       *HMD 10/79*\n         IKJNAME  'UNIT',SUBFLD=UNITSUBF   UNIT TYPE       *HMD 10/79*\nPRNTSUBF IKJSUBF\nPRNTDSNA IKJPOSIT DSTHING,PROMPT='DATA SET NAME OR * FOR PRINT+',      *\n               HELP=('NAME OF DATA SET TO CONTAIN IEBCOPY MESSAGES+',  *\n               '* TO DIRECT IEBCOPY MESSAGES TO TERMINAL OR DATA SET NA*\n               ME+','NAME OF SEQUENTIAL DATA SET OR * TO DIRECT OUTPUT *\n               TO TERMINAL')\nUNITSUBF IKJSUBF\nUNITTYP  IKJIDENT 'UNIT TYPE',FIRST=ALPHANUM,DEFAULT='&UDEF',          X\n               OTHER=ALPHANUM,MAXLNTH=8\nVOLSUBF  IKJSUBF\nVOLSERY  IKJIDENT 'VOLUME SERIAL',FIRST=ALPHANUM,OTHER=ALPHANUM,       X\n               MAXLNTH=6,                                              X\n               PROMPT='THE NAME OF THE VOLUME ON WHICH THE DATA SET TO X\n               BE COMPRESSED RESIDES+',HELP=('A ONE TO SIX CHARACTER VOX\n               LUME NAME+','ATTENTION AND OMIT THE ''VOLUME'' KEYWORD TX\n               E NEXT TIME THIS COMMAND IS INVOKED')\n         IKJENDP\n         LTORG\n         EJECT\n**\n** SAVE AREA, CONSTANTS, ETC.\n**\nSAVDSC   DSECT                     STORAGE DSECT            *HMD 07/77*\nAREA     EQU   *                   BEGINNING OF STORAGE AREA\nDTEMP    DS    D\nESSAVE   DS    3F                  SAVE AREA FOR ESTAE      *HMD 05/79*\nTCB      DS    F\nDAIRPB   DS    20F\nSAVER14  DS    F\nSAVES14  DS    F\nCOMPCD   DS    F\nFREESV14 DS    F\n         DS    0F\nVSPARM   DS    H\nDDNAMES  DS    H\nDDNAMLST DS    22F\nDDNAML   EQU   (L'DDNAMLST)*2\nSYSIN    EQU   DDNAMLST+(4*DDNAML)\nSYSPRINT EQU   DDNAMLST+(5*DDNAML)\nINDD     EQU   DDNAMLST+(7*DDNAML)\nOUTDD    EQU   DDNAMLST+(8*DDNAML)\nSYSUT3   EQU   DDNAMLST+(9*DDNAML)\nSYSUT4   EQU   DDNAMLST+(10*DDNAML)\nFREESV29 DS    8F\nSAVER15  DS    F\nUCBADD   DS    F              UCB ADDRESS FOR RESERVE        @HMD78184\nQNAME    DS    CL8            QUEUE NAME FOR RESERVE         @HMD78184\nDSNLEN   DS    H\nDSNAME   DS    CL44\nENQLEN   DS    H          LENGTH OF RNAME                    @HMD78186\nDSNHOLD  DS    CL44       HOLD AREA FOR FULLY QUALIFIED NAME @HMD78185\nRESSW    DS    X          SWITCH FOR RESERVE OR NORESERVE   *HMD 04/79*\nRESI     EQU   X'80'      RESERVE HAS BEEN REQUESTED        *HMD 05/79*\nRESO     EQU   X'40'      RESERVE HAS BEEN ISSUED           *HMD 05/79*\nRESB     EQU   X'20'      PRINT OPTION CHANGED DUE TO RESERVE *HMD*\nREST     EQU   X'10'      USER IS RUNNING TMP UNDER TERMINAL*HMD 07/79*\nTIMEDATE DS    D                      TIME AND DATE\nSAVEPREF DS    CL8                    SAVE AREA FOR PREFIX  *HMD 07/79*\nNEWDSNL  DS    H\nNEWDSN   DS    CL44                   DATASET NAME\nDSNSAVE  DS    CL(DSNC)               SAVE AREA TO BUILD DSNAME\nDSNTIME  EQU   DSNSAVE+10             TO INSERT TIME\nDDNAMS   DS    CL8                    DDNAME SAVE AREA\nDDOLD    DS    CL8                     OLD SYSPRINT DDNAME\nDDNEW    DS    CL8                     NEW SYSPRINT DDNAME\nDDNAMR   DS    CL8                    DDNAME SAVE AREA\nSAVESAF  DS    13F                    REGISTER SAVE AREA\nSAVE1314 DS    2F                     REG 13,14 SAVE AREA\nSAVEPUT  DS    16F                    PUTLINE SAVE AREA     *HMD 07/79*\nERRFLG   DS    X                      ERROR INDICATOR\nERRIND   EQU   X'80'                  ERROR HAS OCCURED IN \"SAFETY\"\nDELIND   EQU   X'40'                  DELETE SAFETY DATASET\nERRSAF   EQU   X'20'                  SAFETY IN PROGRESS    *HMD 05/82*\nERRSAFO  EQU   X'FF'-ERRSAF           TURN OFF SAFETY BIT   *HMD 05/82*\nPODCB    DS    0F                     ALIGN TO FULLWORD\n         DS    CL(ADCBL)              DIRECTORY DCB\nEXDCB    DS    0F                     ALIGN TO FULLWORD\n         DS    CL(ADCBL)              DATASET DCB\nOPENLIST DS    2A                     OPEN PARAMETER LIST\nDEVAREA  DS    0F                     *DEVTYPE MACRO AREA*\nUCBTYP   DS    F                      TYPE FIELD FROM UCB\nMAXTRKSZ DS    F                      MAXIMUM USABLE TRKSIZE\n         EJECT\n**\n**   LIST FORM MACRO INSTRUCTIONS\n**\nSTAXLIST STAX  STAXEXIT,MF=L\nENQLST   RESERVE (QNAME,DSNHOLD,E,44,SYSTEMS),UCB=UCBADD,MF=L HMD78185\nEXTRA    EXTRACT MF=L                                        @HMD78185\nATACHSF  ATTACH EP=&COPY,SF=L                               *SRH*\nESLIST   ESTAE  ,PARAM=0,MF=L                               *HMD 05/79*\nPTPB     PUTLINE OUTPUT=0,MF=L        PUTLINE LIST FORM     *HMD 07/79*\nLSTFRML  EQU    *-STAXLIST\n         EJECT\n**\n** DYNAMIC MESSAGE AREA\n**\nDAIRERRM DS    D\nDAIRERRN DS    F             SAVE R14\nDAIRERRO DS    4F            SAVE R2 THRU R5\nDAIRERRP DS    CL(DAIRLTH)   CATALOG ERROR MESSAGE\nDAIRERRQ DS    CL2           AND RETURN CODE\nDAIRERRR EQU   *-DAIRERRP    LENGTH OF MESSAGE FIELD\nDAIRERRS DS    CL(DAIRLTG)   DYNAMIC ALLOCATION ERROR MSG\nDAIRERRT DS    CL4           AND RETURN CODE\nDAIRERRU EQU   *-DAIRERRS    LENGTH OF MESSAGE FIELD\nDAIRERRV DS    CL(DAIRLTF)   ALLOCATION EXHAUSTED MSG\nDAIRERRW EQU   *-DAIRERRV    LENGTH OF MESSAGE FIELD\nDAIRERRX DS    CL(DAIRLTE)   DYNAMIC ALLOCATION ERROR MSG\nDAIRERRY DS    CL2           AND RETURN CODE\nDAIRERRZ EQU   *-DAIRERRX    LENGTH OF MESSAGE FIELD\nSYSUTX   DS    H             LENGTH OF \"SYSUT\" DD NAME\n         DS    X,CL5         ENTRY STORAGE AREA\nSYSUTXNO DS    X             SYSUT NUMBER\nSYSUTXL  EQU   *-SYSUTX-2    LENGTH OF DDNAME\nMSG01    DS    CL(MSG01Z)    PARSE ERROR MSG\nMSG01C   DS    CL2           AND RETURN CODE\nMSG01L   EQU   *-MSG01       LENGTH OF MESSAGE\nMSG02    DS    CL(MSG02Y)    DATA SET MESSAGE\nMSG02C   DS    CL120         OUTPUT AREA\nMSG10    DS    CL(MSG10X)    END OF JOB MESSAGE\nMSG10C   DS    CL4           RETURN CODE\nMSG10L   EQU   *-MSG10       LENGTH OF MESSAGE\nMSG16    DS    CL(MSG16AL)   SAFETY COPY MESSAGE\nMSG16C   DS    CL4\nMSG16L   EQU   *-MSG16\nMSG26    DS    CL(MSG26X)    SAFETY COPY ABEND MESSAGE      *HMD 05/82*\nMSG26L   EQU   *-MSG26       LENGTH OF MESSAGE              *HMD 05/82*\nMSG26S   EQU   MSG26+27      SYSTEM ABEND CODE AREA         *HMD 05/82*\nMSG26U   EQU   MSG26+36      USER   ABEND CODE AREA         *HMD 05/82*\nMSG27    DS    CL(MSG27X)    COMPRESS ABEND MESSAGE         *HMD 05/82*\nMSG27L   EQU   *-MSG27       LENGTH OF MESSAGE              *HMD 05/82*\nMSG27S   EQU   MSG27+24      SYSTEM ABEND CODE AREA         *HMD 05/82*\nMSG27U   EQU   MSG27+33      USER ABEND CODE AREA           *HMD 05/82*\nMSG28    DS    CL(MSG28X)    SAFETY DSNAME MESSAGE          *HMD 05/82*\nMSG28D   DS    CL44          SAFETY DATASET NAME AREA       *HMD 05/82*\nMSG28L   EQU   *-MSG28       LENGTH OF MESSAGE              *HMD 05/82*\nOUTLINEL DS    F             OUTPUT LINE LENGTH             *HMD 07/79*\nOUTLINE  DS    CL80          OUTPUT BUFFER                  *HMD 07/79*\nSTORLEN  EQU   (((*-AREA)+7)/8)*8     LENGTH OF STORAGE AREA\n         EJECT\n**\n** MAPPING DSECTS\n**\n         IKJDAP08\n         EJECT\n         IKJDAP18\n         EJECT\n         IKJDAP1C\n         EJECT\n         IKJDAP30\n         EJECT\n         IKJUPT\n         EJECT\n         DCBD   DSORG=PO,DEVD=DA\n         EJECT\n         IEZDEB LIST=YES\n         EJECT\n         IHASDWA\n         EJECT\n         CVT    LIST=YES,DSECT=YES\n         END   GSFTSOCM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPY": {"ttr": 2569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CPY      TITLE 'INVOKE SPFCOPY TO COPY MEMBERS OF A PDS'\n*  LAST MODIFIED 08/01/84 - HOWARD M. DEAN\nCPY      CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nBASEREG  EQU   R12\nPPLBAR   EQU   R11\nPDLBAR   EQU   R9\nUPTBAR   EQU   R8\n         TSOENTER REGS=NO,PL=(PARSE,IO)\n         USING UPT,UPTBAR\n         USING IKJPARMD,PDLBAR\n         MVC   PPLPCL,APARMTAB     PARAMETER TABLE POINTER\n         MVC   PPLANS,APDLPT       POINTER TO THE POINTER TO THE PDL\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)\n         CLI   PDLPT,X'FF'         PARSE UNNCESSFUL\n         BE    ABEND\n         L     PDLBAR,PDLPT        POINTER TO THE PDL\n         L     UPTBAR,CPPLUPT      POINTER TO THE UPD\n         MVI   S99RBLN-S99RB+RB99,RBLEN LENGTH OF RB\n         MVI   S99VERB-S99RB+RB99,S99VRBAL  INDICAT ALLOCATE FUNCTION\nCKFROM   DS    0H\n         L     R2,DSNIN1           ADDRESS OF DSNAME\n         LH    R1,DSNIN1+4         LENGTH\n         LA    R3,5(R1)\n         STH   R3,PRFXM2S2         STORE FOR PUTLINE\n         STH   R1,DSNLNTH          SAVE LENGTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CDSN             MOVE DSN TO COMMON AREA\n         EX    R1,CDSNF            MOVE DSN TO PUTLINE AREA\n         TM    DSNIN1+22,X'80'     PASSOWRD PRESENT\n         BZ    CKFROM1\n         L     R2,DSNIN1+16        POINTER TO PASSWORD\n         LH    R1,DSNIN1+20        LENGTH\n         STH   R1,PSWLNTH          *\n         BCTR  R1,0                DECREMENT\n         EX    R1,CPSWD            MOVE PASSWORD\n         LA    R1,TUNTPSWD         ADD VOL SER TO LIST\n         ST    R1,SPSWD            PUT IN PARM LIST\nCKFROM1  DS    0H\n         L     R2,CPYFRM1          ADDRESS OF DDNAME\n         LH    R1,CPYFRM1+4        LENGTH\n         STH   R1,DDNLNTH          SAVE LENGTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CDDN             MOVE DDNAME TO COMMON AREA\n         TM    VOLIN1+6,X'80'      PARM ENTERED\n         BZ    CKFROM2\n         L     R2,VOLIN1           ADDRESS OF VOLUME PARM\n         LH    R1,VOLIN1+4         LENGTH\n         STH   R1,VOLLNTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CVOL             MOVE VOLUME\n         LA    R1,TUNTVLSR         ADD VOL SER TO LIST\n         ST    R1,SVOL             PUT IN PARM LIST\nCKFROM2  DS    0H\n         LA    R1,TUPLSHR          TEXT PARM LIST\n         ST    R1,S99TXTPP-S99RB+RB99 STORE PARM LIST ADDRESS\n         BAL   R14,ALLOCATE\n         XC    SMBR(12),SMBR       CLEAR\nCKTO     DS    0H\n         L     R2,DSNOT1           ADDRESS OF DSNAME\n         LH    R1,DSNOT1+4         LENGTH\n         LA    R3,4(R1)            LENGTH FOR PUTLINE\n         STH   R3,PRFXM2S3\n         STH   R1,DSNLNTH          SAVE LENGTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CDSN             MOVE DSN TO COMMON AREA\n         EX    R1,CDSNT            MOVE DSN TO PUTLINE AREA\n         TM    DSNOT1+22,X'80'     PASSOWRD PRESENT\n         BZ    CKTO1\n         L     R2,DSNOT1+16        POINTER TO PASSWORD\n         LH    R1,DSNOT1+20        LENGTH\n         STH   R1,PSWLNTH          *\n         BCTR  R1,0                DECREMENT\n         EX    R1,CPSWD            MOVE PASSWORD\n         LA    R1,TUNTPSWD         ADD VOL SER TO LIST\n         ST    R1,SPSWD            PUT IN PARM LIST\nCKTO1    DS    0H\n         L     R2,CPYTO1           ADDRESS OF DDNAME\n         LH    R1,CPYTO1+4         LENGTH\n         STH   R1,DDNLNTH          SAVE LENGTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CDDN             MOVE DDNAME TO COMMON AREA\n         TM    VOLOT1+6,X'80'      PARM ENTERED\n         BZ    CKIN2\n         L     R2,VOLOT1           ADDRESS OF VOLUME PARM\n         LH    R1,VOLOT1+4         LENGTH\n         STH   R1,VOLLNTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CVOL             MOVE VOLUME\n         LA    R1,TUNTVLSR         ADD VOL SER TO LIST\n         ST    R1,SVOL             PUT IN PARM LIST\nCKIN2    DS    0H\n         BAL   R14,ALLOCATE\n         XC    SMBR(12),SMBR       CLEAR\nCKCPYIN  DS    0H\n         LA    R1,TUPLNEW          ALLOCATE NEW WORK FILE\n         ST    R1,S99TXTPP-S99RB+RB99\n         LA    R1,TUNTRTDD         RETURN DD\n         ST    R1,SDDN             STORE IN SHR DDNAME\n         TM    CPYIN1+6,X'80'      PARM PRESENT\n         BZ    CKCPYIN2\n         LA    R1,TUPLSHR          ALLOCATE NEW WORK FILE\n         ST    R1,S99TXTPP-S99RB+RB99\n         L     R2,CPYIN1           INPUT DATASET\n         LH    R1,CPYIN1+4         LENGTH\n         STH   R1,DSNLNTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CDSN\n         TM    CPYIN1+14,X'80'     MEMBER NAME PRESENT\n         BZ    CKCPYIN1\n         L     R2,CPYIN1+8\n         LH    R1,CPYIN1+12        LENGTH\n         STH   R1,MBRLNTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CMBR             MOVE MENBER\n         LA    R1,TUNTMBR          ADD MEMBER TO LIST\n         ST    R1,SMBR\nCKCPYIN1 DS    0H\n         TM    CPYIN+22,X'80'      PARM PRESENT\n         BZ    CKCPYIN2\n         L     R2,CPYIN1+16        PASSWORD POINTER\n         LH    R1,CPYIN1+20        LENGTH\n         STH   R1,PSWLNTH\n         BCTR  R1,0                DECREMENT\n         EX    R1,CPSWD            MOVE PASSWORD\n         LA    R1,TUNTPSWD         ADD PASSWORD TO TUPL\n         ST    R1,SPSWD\nCKCPYIN2 DS    0H\n         BAL   R14,ALLOCATE\n         MVC   SYSIN,DDNRTN        SAVE DDNAME\n         XC    SMBR(12),SMBR       CLEAR\nASYSUT3  DS    0H\n         LA    R1,TUPLNEW          ALLOCATE TEMP DATASET\n         ST    R1,S99TXTPP-S99RB+RB99\n         BAL   R14,ALLOCATE        ALLOCATE SYSUT3\n         MVC   SYSUT3,DDNRTN       SAVE DDNAME\n         BAL   R14,ALLOCATE        ALLOCATE SYSUT4\n         MVC   SYSUT4,DDNRTN       SAVE DDNAME\n         TM    CPYIN1+6,X'80'      WAS IT ENTERD\n         BO    XCTL\n         MVC   CPYINDCB+X'28'(L'SYSIN),SYSIN MOVE IN SYSIN NAME\n         OPEN  (CPYINDCB,OUTPUT)\n         LA    R2,OUTAREA          FIRST BYTE OF DATA\n         LA    R3,L'COPY           C O=\n         LA    R4,COPY             POINT TO COPY\n         LR    R5,R3               LENGTH EQUAL\n         MVCL  R2,R4               MOVE TO OUTPUT\n         L     R4,CPYTO1           POINT TO TO DDNAME\n         LH    R5,CPYTO1+4         LENGTH\n         LR    R3,R5               SET LENGTH EQUAL\n         MVCL  R2,R4\n         LA    R4,COPYTO           ,I=\n         LA    R5,L'COPYTO         LENGTH\n         LR    R3,R5               LENGTH EQUAL\n         MVCL  R2,R4\n         CLI   REPLACE+1,X'02'     REPLACE OPERAND\n         BE    NOREP1\n         LA    R4,LPARN            RIGHT PARENTHES\n         LA    R5,L'LPARN          LENGTH OF RPARN\n         LR    R3,R5               SET LENGTH EQUAL\n         MVCL  R2,R4\nNOREP1   DS    0H\n         L     R4,CPYFRM1         FROM DDNAME\n         LH    R5,CPYFRM1+4       LENGTH\n         LR    R3,R5              SET LENGTH EQUAL\n         MVCL  R2,R4\n         CLI   REPLACE+1,X'02'    NO REPLACE OPERAND\n         BE    NOREP2\n         LA    R4,RPARN           ADDRESS OF LEFT PAREN\n         LA    R5,L'RPARN         LENGTH\n         LR    R3,R5              SET LENGTH EQUAL\n         MVCL  R2,R4\nNOREP2   DS    0H\n         BAL   R2,PUTIT\n         CLI   ALL+1,X'02'         PARM ENTERD\n         BZ    CLOSE\n         LA    R6,MEMBER           BASE FOR LOOP\n         MVC   OUTAREA(L'SELECT),SELECT\nMBRLOOP  DS    0H\n         L     R4,0(R6)            MEMBER POINTER\n         LH    R5,4(R6)            LENGTH\n         LA    R2,OUTAREA+L'SELECT START OF MEMBER\n         LA    R3,L'OUTAREA-L'SELECT\n         ICM   R5,8,OUTAREAB       PAD CHARACTER\n         MVCL  R2,R4               MOVE MEMBER NAME\n         BAL   R2,PUTIT\n         CLI   08(R6),X'FF'        END OF CHAIN\n         L     R6,08(R6)           NEXT MEMBER\n         BNE   MBRLOOP\nCLOSE    DS    0H\n         CLOSE (CPYINDCB)\nXCTL     DS    0H\n         MVC   OLD(4*4),MSG        MOVE MSG TO OUTPUT DIS LIST\n         XC    TSOECB,TSOECB       CLEAR ECB\n         PUTLINE OUTPUT=OLD,MF=(E,IOPL),PARM=PUTBLOCK\n         GETMAIN R,LV=11*8+8+2+2   STORAGE FORM DDPARM LIST\n         LR    R5,R1               SAVE ADDRESS OF AREA     *HMD 08/81*\n         LA    R2,11*8+8+2(R1)     ADDRESS OF PARM\n         ST    R2,0(R1)            POINTER TO PARM\n         LA    R2,8(R1)            POINT TO DDNAME LIST\n         ST    R2,4(R1)            PUT IN PARM LIST\n         OI    4(R1),X'80'         INDICATE END OF LIST\n         LA    R3,11*8             LENGTH OF DDNAME LIST\n         USING IEBDDNS,R2\n         STH   R3,IEBLNTH          STORE LENGTH\n         MVC   IEBIN,SYSIN         SYSIN DDNAME\n         MVC   IEBUT3,SYSUT3       SYSUT3 DDNAME\n         MVC   IEBUT4,SYSUT4       SYSUT4 DDNAME\n         LINK  EP=SPFCOPY          LINK TO SPFCOPY          *HMD 08/81*\n         LR    R6,R15              SAVE RETURN CODE         *HMD 08/81*\n         FREEMAIN R,LV=11*8+8+2+2,A=(R5)    FREE STORAGE    *HMD 08/81*\n         B     RETURN\nPUTIT    DS    0H\n         PUT   CPYINDCB,OUTAREAB\n         BR    R2\n         SPACE 2\nRETURN   TSOLEAVE RETCODE=(6)      RETURN TO CALLER         *HMD 08/84*\n         SPACE 2\nABEND    DS    0H\n         ABEND 1,DUMP\nALLOCATE DS    0H\n         LA    R1,RB99PTR          POINT TO PARM LIST\n         DYNALLOC\n         LR    R6,R15              SAVE RETURN CODE         *HMD 08/81*\n         LTR   R15,R15             REQUEST SUCCESSFUL\n         BZR   R14                 ..YES\n         ST    R15,S99RC           STORE RETURN CODE\n         LA    R1,CPPLCBUF         GET CPPL ADDRESS\n         ST    R1,S99CPPL          POINTER TO THE CPPL\n         LA    R1,RB99PTR          POINT TO DAIR FAIL BLOCK\n         LINK  EP=IKJEFF18         DAIR FAIL ROUTINE\n         B     RETURN              TERMINATE PROGRAM\n         EJECT\n         DS    0F                  ALLIGNMENT\nCDDN     MVC   DDNAME(0),0(R2)     MOVE DDNAME\nCDSN     MVC   DSNAME(0),0(R2)     MOVE DSNAME\nCDSNT    MVC   TODSN(0),0(R2)      MOVE DSNAME\nCDSNF    MVC   FROMDSN(0),0(R2)    MOVE DSNAME\nCVOL     MVC   VOLSER(0),0(R2)     VOLUME SERIAL NO\nCPSWD    MVC   PASSWORD(0),0(R2)   PASSWORD\nCMBR     MVC   MEMBR(0),0(R2)      MEMBER NAME\n         DS    0F\nRB99PTR  DC    XL1'80',AL3(RB99)   POINT TO THE REQUEST BLOCK\n         DC    A(S99RC)            RETURN CODE POINTER\n         DC    A(S99EFF02)         POINTER TO IKJEFF02\n         DC    A(S99FAIL)          ID NUMBER       PTR\nS99CPPL  DC    A(0)                POINTER TO THE CPPL\n         DC    A(0)\nS99RC    DC    A(0)                RETURN CODE\nS99EFF02 DC    A(0)                POINTER TO IKJEFF02\nS99FAIL  DC    Y(50)               SVC 99 RETURN CODE\nRB99     DC    5A(0)               SVC 99 REQUEST BLOCK\nTUPLNEW  DS    0F\nNTRDD    DC    A(TUNTRTDD)         DDNAME\nNDEL     DC    A(TUNTDEL)          DELETE WHEN FREEDED\nNNEW     DC    A(TUNTNEW)          ALLOCATE NEW\nNCYL     DC    A(TUNTCYL)          CYL ALLOCATION\nNPRIM    DC    A(TUNTPRIM)         PRIMARY ALLOCATION\nNSECND   DC    XL1'80',AL3(TUNTSEC) SECONDARY ALLOCATION\nTUPLSHR  DS    0F\nSDDN     DC    A(TUNTDDN)          DDNAME\nSNDSP    DC    A(TUNTNDSP)         KEEP WHEN FREEDED\nSSHR     DC    A(TUNTSHR)          ALLOCATE SHARED\nSMBR     DC    A(0)                MEMBER NAME\nSPSWD    DC    A(0)                PASSWORD\nSVOL     DC    A(0)                VOLUME SERIAL\nSDSN     DC    XL1'80',AL3(TUNTDSN) SECONDARY ALLOCATION\nTUNTDDN  DC    Y(DALDDNAM),H'1'\nDDNLNTH  DC    H'8'\nDDNAME   DC    CL8' '\nTUNTDSN  DC    Y(DALDSNAM),H'1'\nDSNLNTH  DC    H'44'\nDSNAME   DC    CL44' '\nTUNTVLSR DC    Y(DALVLSER),H'1'\nVOLLNTH  DC    H'6'\nVOLSER   DC    CL6' '\nTUNTMBR  DC    Y(DALMEMBR),H'1'\nMBRLNTH  DC    H'8'\nMEMBR    DC    CL8' '\nTUNTNDSP DC    Y(DALNDISP),H'1',H'1',XL1'08'     KEEP\nTUNTDEL  DC    Y(DALNDISP),H'1',H'1',XL1'04'     DELETE\nTUNTSHR  DC    Y(DALSTATS),H'1',H'1',XL1'08'     SHR\nTUNTNEW  DC    Y(DALSTATS),H'1',H'1',XL1'04'     NEW\nTUNTCYL  DC    Y(DALCYL),H'0'\nTUNTPRIM DC    Y(DALPRIME),H'1',H'3',XL3'00000A' TEN  CYL PRIMARY\nTUNTSEC  DC    Y(DALSECND),H'1',H'3',XL3'000005' FIVE CYL SECONDARY\nTUNTPSWD DC    Y(DALPASSW),H'1'\nPSWLNTH  DC    H'8'\nPASSWORD DC    CL8' '\nTUNTRTDD DC    Y(DALRTDDN),H'1'\nDDNRLTH  DC    H'8'\nDDNRTN   DC    CL8' '\nSYSIN    DC    CL8' '\nSYSUT3   DC    CL8' '\nSYSUT4   DC    CL8' '\nPUTBLOCK PUTLINE MF=L\nMSG      DC    A(3),A(PRFXMSG2),A(PRFXM2S2),A(PRFXM2S3)\nOLD      DS    F                   NUMBER OF ENTRIES\n         DS    F\n         DS    F\n         DS    F\n         DS    F\nCOPY     DC    C'C O='             START COPY AND OUTPUT DDNAME\nCOPYTO   DC    C',I='              INPUT DDNAME\nLPARN    DC    CL2'(('             REPLACE\nRPARN    DC    CL4',R))'           *\nSELECT   DC    CL4'S M='           SELECT MEMBER\nOUTAREAB DC    CL1' '              START OF OUTPUT AREA\nOUTAREA  DC    CL79' '             START OF OUTPUT AREA\nPRFXMSG2 DC    H'40'               LENGTH OF SEGMENT\n         DC    H'0'                SEGMENT POSITION\n         DC    CL36' INPUT DATASET IS OUTPUT DATASET IS '\nPRFXM2S2 DC    H'49'               LENGTH OF SEGMENT\n         DC    H'18'               SEGMENT POSITION\nFROMDSN  DC    CL45' '\nPRFXM2S3 DC    H'49'               LENGTH OF SEGMENT\n         DC    H'36'               SEGMENT POSITION\nTODSN    DC    CL45' '\nAPDLPT   DC    A(PDLPT)            POINTER TO THE PDS\nAPARMTAB DC    V(PARMTAB)          POINTER TO THE PARM TABLE\nPDLPT    DS    F\nOPREFX   DS    CL7                 OLD PROFILE CPY\nOPREFXL  DS    XL1                 LENGTH OF OLD CPY\nCPYINDCB DCB   DDNAME=X,LRECL=80,BLKSIZE=2480,RECFM=FB,MACRF=(PM),     *\n               DSORG=PS\n         EJECT\nPARMTAB  IKJPARM\n         SPACE 3\nMEMBER   IKJIDENT 'MEMBER',LIST,MAXLNTH=8,                             *\n               FIRST=ALPHA,OTHER=ALPHANUM,CHAR\n         SPACE 3\nFROM     IKJKEYWD DEFAULT='FROM(CNTL)'\n         SPACE 3\n         IKJNAME 'FROM',SUBFLD=DSNIN\n         SPACE 3\nFVOL     IKJKEYWD\n         SPACE 3\n         IKJNAME 'FVOL',SUBFLD=VOLIN\n         SPACE 3\nTO       IKJKEYWD DEFAULT='TO(''TODSN      '')'\n         SPACE 3\n         IKJNAME 'TO',SUBFLD=DSNOT\n         SPACE 3\nTOVOL    IKJKEYWD\n         SPACE 3\n         IKJNAME 'TVOL',SUBFLD=VOLOT\n         SPACE 3\nALL      IKJKEYWD DEFAULT='MBR'\n         SPACE 3\n         IKJNAME 'MBR',ALIAS='MEMBER'\n         SPACE 3\n         IKJNAME 'ALL',ALIAS='COPYALL'\n         SPACE 3\nREPLACE  IKJKEYWD DEFAULT='REPLACE'\n         SPACE 3\n         IKJNAME 'REPLACE',ALIAS='REP'\n         SPACE 3\n         IKJNAME 'NOREPLACE',ALIAS='NOREP'\n         SPACE 3\nCPYIN    IKJKEYWD\n         SPACE 3\n         IKJNAME 'CPYIN',SUBFLD=CPYINS\n         SPACE 3\nCPYFRM   IKJKEYWD DEFAULT='CPYFRM(CPYFRM)'\n         SPACE 3\n         IKJNAME  CPYFRM,SUBFLD=CPYFRMS\n         SPACE 3\nCPYTO    IKJKEYWD DEFAULT='CPYTO(CPYTO)'\n         SPACE 3\n         IKJNAME  CPYTO,SUBFLD=CPYTOS\n         SPACE 3\nDSNIN    IKJSUBF\n         SPACE 3\nDSNIN1   IKJPOSIT DSNAME,USID\n         SPACE 3\nVOLIN    IKJSUBF\n         SPACE 3\nVOLIN1   IKJIDENT 'FVOL',FIRST=ALPHANUM,OTHER=ALPHANUM\n         SPACE 3\nDSNOT    IKJSUBF\n         SPACE 3\nDSNOT1   IKJPOSIT DSNAME,USID\n         SPACE 3\nVOLOT    IKJSUBF\n         SPACE 3\nVOLOT1   IKJIDENT 'TVOL',FIRST=ALPHANUM,OTHER=ALPHANUM\n         SPACE 3\nCPYINS   IKJSUBF\n         SPACE 3\nCPYIN1   IKJPOSIT DSNAME,USID\n         SPACE 3\nCPYFRMS  IKJSUBF\n         SPACE 3\nCPYFRM1  IKJPOSIT DSNAME,DDNAM\n         SPACE 3\nCPYTOS   IKJSUBF\n         SPACE 3\nCPYTO1   IKJPOSIT DSNAME,DDNAM\n         EJECT\n         IKJENDP\n         IKJUPT\n         CVT   DSECT=YES\n         IEFZB4D0\n         IEFZB4D2\nRBLEN    EQU   (S99RBEND-S99RB)    LENGTH OF SVC 99 REQ BLOCK\nIEBDDNS  DSECT\nIEBLNTH  DS    H                   LENGHT OF PARM\n         DS    CL8                 FILLER\n         DS    CL8                 FILLER\n         DS    CL8                 FILLER\n         DS    CL8                 FILLER\nIEBIN    DS    CL8                 SYSIN\nIEBSYSPT DS    CL8                 SYSIN\n         DS    CL8                 FILLER\nIEBUT1   DS    CL8                 SYSUT1\nIEBUT2   DS    CL8                 SYSUT2\nIEBUT3   DS    CL8                 SYSUT3\nIEBUT4   DS    CL8                 SYSUT4\n          END  CPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPY#": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION   -\n  THE CPY COMMAND INVOKES IEBCOPY ALLOCATING THE PROPER DATASETS\n)X SYNTAX   -\n          CPY     'MEMBER' FROM('INPUT') TO('OUTPUT')\n                  CPYIN('SYSIN') CPYFRM('DDNAME') CPYTO('DDNAME')\n                  REP NOREP ALL\n\n  REQUIRED    -   'MEMBER' TO('OUTPUT')\n  DEFAULTS    -   FROM('PREFIX.CNTL') CPYFRM(CPYFRM) CPYTO(CPYTO) REP\n  ALIAS       -   NONE\n)O OPERANDS\n))MEMBER      -   A SINGLE MEMBER OR A LIST OF MEMBERS TO BE COPIED\n))FROM        -   THE INPUT PDS.  DEFAULT 'USERID.CNTL'\n))TO          -   THE OUTPUT PDS.  NO DEFAULT  REQUIRED\n))CPYIN       -   THE NAME OF A FILE THAT IS TO BE USED AS A SYSIN\n                  DATASET THIS IS OPTIONAL AN OPTIONAL PARAMETER.  IF\n                  USED ALL CONTROL CARDS WILL BE TAKEN FROM THIS FILE.\n))CPYFRM      -   THIS IS THE DDNAME TO BE USED FOR THE INPUT PDS.\n                  DEFAULT IS 'CPYFRM'\n))CPYTO       -   THIS IS THE DDNAME TO BE USED FOR THE OUTPUT PDS.\n                  DEFAULT IS 'CPYTO'\n))REP         -   SPECIFIES IF THE REPLACE OPTION IS TO BE USE.\n                  THIS IS THE DEFAULT\n))NOREP       -   SPECIFIES THAT NO REPLACE IS TO BE USED.\n))ALL         -   SPECIFIES THAT THE ENTIRE PDS IS TO BE COPIED\n\nMESSAGES      -\n\n    INPUT DATASET IS 'DSN' OUTPUT DATASET IS 'DSN'\n                  INPUT AND OUTPUT DATASET NAMES\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATASCAN": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DATASCAN CSECT     VERSION 1.2\n         REGS\n         SPACE 2\nSTART    SAVE  (14,12),,DATASCAN_&SYSDATE_&SYSTIME\n         LR    R10,R15\n         USING START,10,11,12\n         LA    R11,4095(R10)\n         LA    R11,1(R11)\n         LA    R12,4095(R11)\n         LA    R12,1(R12)\n         ST    R13,SAVEAREA+4\n         LR    R4,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R4)\n         SPACE 2\n         LA    R9,LCVTADDR\n         SPACE 1\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         SPACE 1\n         CH    R3,=H'2'\n         BNE   READJFCB\n         SPACE 1\n         CLC   2(2,R2),=CL2'VS'\n         BNE   READJFCB\n         SPACE 1\n         AP    VSON,=PL1'1'\n         MVI   EBR1+1,X'80'\n         MVI   EBR2+1,X'80'\n         MVI   EBR3+1,X'80'\n         B     PHASE1\n         EJECT\n*   ROUTINE TO GENERATE HEAD LINE 2 AND CENTER THE VOLSER AND DSNAME\n*   OF THE PACK AND DATA SET BEING PROCESSED.\n         SPACE 2\nREADJFCB RDJFCB (DRECTORY)\n         SPACE 2\nBLDHEAD  LA    R2,0\n         LA    R3,JFCBDSNM\n         LA    R4,44\nLOOPJFCB CLI   0(R3),X'40'\n         BE    CJFCBNM\n         LA    R2,1(R2)\n         LA    R3,1(R3)\n         BCT   R4,LOOPJFCB\n         SPACE 1\nCJFCBNM  LA    R2,0(R2)\n         A     R2,=F'27'\n         CVD   R2,WORK1\n         MVC   GM1ADDR1,WORK1+4\n         ZAP   WORK1,=P'132'\n         SP    WORK1,GM1ADDR1\n         ZAP   GM1ADDR2,=P'2'\n         DP    WORK1,GM1ADDR2\n         MVC   GM1ADDR2(4),WORK1\n         ZAP   WORK1,GM1ADDR2\n         CVB   R2,WORK1\n         SPACE 1\n         LA    R3,HEADLN1A\n         LA    R3,1(R3)\n         AR    R3,R2\n         MVC   0(9,R3),=CL9'VOLUME = '\n         LA    R3,9(R3)\n         MVC   0(6,R3),JFCBVOLS\n         LA    R3,8(R3)\n         MVC   0(9,R3),=CL9'DSNAME = '\n         LA    R3,9(R3)\n         MVC   0(44,R3),JFCBDSNM\n         MVC   SCTHVOL(6),JFCBVOLS\n         MVC   SCTHDSN(44),JFCBDSNM\n         SPACE 1\n         BR    R9\n         EJECT\n*   ROUTINE TO DETERMINE DEVICE TYPE OF THE VOLUME BEING PROCESSED.\n*   DEVICE TYPE IS THEN MOVED TO THE SCRATCH MEMBER CONTROL CARD\n*   SKELETON IN CASE THE DELETE MEMBER OPTION IS TAKEN DURING THE RUN.\n         SPACE 1\nLCVTADDR L     R2,16          CVT\n         L     R3,0(R2)       TCB WORDS\n         L     R4,4(R3)       CURRENT TCB\n         L     R5,12(R4)      TIOT\n         LA    R6,24(R5)      1ST DD ENTRY\n         SPACE 2\n         SR    R2,R2\n         LR    R3,R6\nTEST1    IC    R2,0(R3)\n         LTR   R2,R2\n         BZ    UT1GONE\nTEST2    CLC   4(6,R3),=C'SYSUT1'\n         BE    FOUNDIT\n         AR    R3,R2\n         SR    R2,R2\n         B     TEST1\n         SPACE 2\nUT1GONE  B     KILLJOB1\n         SPACE 2\nFOUNDIT  L     R3,16(R3)\n         SR    R5,R5\n         IC    R5,19(R3)\n         BCTR  R5,0\n         CVD   R5,WORK1\n         MP    WORK1,=PL4'4'\n         CVB   R5,WORK1\n         LA    R4,UTABLE\n         AR    R4,R5\n         MVC   SCTHUNIT(4),0(R4)\n         EJECT\nPHASE1   EQU   *\n         SPACE 1\n*        PHASE1 WILL EDIT THE CONTROL CARDS AND DO A GETMAIN TO BUILD\n*        AN IN CORE TABLE TO HOLD ALL SCAN PARAMETERS.\n         SPACE 2\n         MVC   SCBFILL,=CL4'0000'\n         SPACE 1\n         OPEN  (SYSIN,(INPUT))\n         OPEN  (SYSPRINT,(OUTPUT))\n         SPACE 2\n*        INIT. HEADINGS WITH DATE.\n         SPACE 1\n         TIME  DEC\n         SPACE 2\n         ST    R1,GM1ADDR1\n         UNPK  PREFIX,GM1ADDR1\n         OI    PREFIX+7,X'F0'\n         MVC   H1DATE(5),PREFIX+3\n         SPACE 1\n         BAL   R9,HEADING1\n         SPACE 2\nGETPCARD GET   SYSIN,PARMCARD\n         SPACE 2\n         B     EDITPCRD\n         SPACE 2\nEOFSYSIN CLOSE (SYSIN)\n         SPACE 2\n         CLI   KILLSW1,C'1'\n         BE    KILLJOB1\n         SPACE 1\n         CP    VSON,=PL1'0'\n         BE    PHASE2\n         SPACE 1\n         CP    VSON,=PL1'4'\n         BNE   KILLJOB2\n         SPACE 1\n         MVC   FINDNAME(4),GM1ADDR1\n         MVC   FINDNAME+4(4),GM1ADDR2\n         SPACE 1\n         BAL   R9,BLDHEAD\n         SPACE 1\n         MVC   GM1ADDR1(4),FINDNAME\n         MVC   GM1ADDR2(4),FINDNAME+4\n         SPACE 1\n         B     PHASE2\n         EJECT\nEDITPCRD EQU   *\n         SPACE 1\n         CLC   CARDID,=C'PREFIX'\n         BE    IDPREFIX\n         SPACE 1\n         CLC   CARDID,=C'SCANS '\n         BE    IDSCANS\n         SPACE 1\n         CLC   CARDID(4),=C'SCAN'\n         BE    IDSCAN\n         SPACE 1\n         CLC   CARDID(4),=C'FROM'\n         BE    IDFROM\n         SPACE 1\n         CLC   CARDID(2),=C'TO'\n         BE    IDTO\n         SPACE 1\n         CLC   CARDID,=C'PUNCH '\n         BE    IDPUNCH\n         SPACE 1\n         CLC   CARDID,=C'DSNAME'\nEBR1     NOP   IDDSNAME\n         SPACE 1\n         CLC   CARDID,=C'UNIT  '\nEBR2     NOP   IDUNIT\n         SPACE 1\n         CLC   CARDID,=C'VOLUME'\nEBR3     NOP   IDVOLUME\n         SPACE 1\n         CLC   CARDID,=C'UPDATE'\n         BE    IDUPDATE\n         SPACE 3\nUNKNOWN  MVC   ELDATA2,ERROR3\n         EJECT\nRETURN1  EQU   *\n         SPACE 1\n         MVC   ELDATA1,PARMCARD\n         SPACE 2\nRETURN1A PUT   SYSPRINT,EDITLINE\n         SPACE 2\n         MVI   EDITLINE,C' '\n         MVC   EDITLINE+1(132),EDITLINE\n         AP    LINES,=P'1'\n         CLI   SWBRANCH,C'1'\n         BE    IDSCANR\n         CP    LINES,LINESMAX\n         BNH   GETPCARD\n         BAL   R9,HEADING1\n         B     GETPCARD\n         EJECT\nIDPREFIX EQU   *\n         SPACE 1\n         LA    R2,VALUE\n         LA    R3,8\n         SR    R4,R4\nLOOP1    CLI   0(R2),X'40'\n         BE    STORE1\n         LA    R4,1(R4)\n         LA    R2,1(R2)\n         BCT   R3,LOOP1\n         SPACE 1\nSTORE1   BCTR  R4,0\n         STC   R4,CHKPRFIX+1\n         MVC   PREFIX,VALUE\n         CLI   SWITCH1,C'1'\n         BNE   MOVE1\n         MVC   ELDATA2,WARNING1\nMOVE1    MVI   SWITCH1,C'1'\n         B     RETURN1\n         EJECT\nIDSCANS  EQU   *\n         SPACE 1\n         CLC   EF1,=XL2'0000'     CHECK FOR PRIOR SCANS CARD\n         BNE   EDITER2\n         SPACE 1\n         MVZ   EF1(2),VALUE\n         CLC   EF1,=XL2'F0F0'     NUMERIC CHECK OF FIELD.\n         BE    OK1\n         B     EDITER1\n         SPACE 1\nOK1      MVC   SCANS(2),VALUE\n         ZAP   WORK1,=P'0'\n         PACK  WORK1,SCANS\n         ZAP   SCANS,WORK1\n         MP    WORK1,=P'120'      # OF SCANS X SCB LENGTH.\n         CVB   R2,WORK1\n         ST    R2,GM1LEN\n         SPACE 2\n         GETMAIN R,LV=(2)\n         SPACE 2\n         ST    R1,GM1ADDR1        ACTUAL GOTTEN CORE ADDRESS\n         S     R1,=F'120'\n         ST    R1,GM1ADDR2        CORE ADDRESS - 120 BYTES.\n         LR    R8,R1\n         B     RETURN1\n         EJECT\nIDSCAN   EQU   *\n         SPACE 1\n         CLC   SCBFILL,=CL4'0000'\n         BE    IDSCANB\n         SPACE 1\n         BAL   R9,CSCBFILL\n         CLI   OKFILLSW,C'1'\n         BE    OK2\n         SPACE 1\n         CLC   SCBID,=XL2'9587'\n         BE    IDSCANB\n         MVC   ERROR6+15(2),SCBID\n         MVC   ELDATA2,ERROR6\nIDSCANER MVI   SWBRANCH,C'1'\n         B     RETURN1A\nIDSCANR  MVI   SWBRANCH,C'0'\n         B     IDSCANB\n         SPACE 1\nOK2      AP    REALTOT,=P'1'\n         CP    REALTOT,SCANS\n         BH    IDSCANE7\n         SPACE 1\n         LA    R8,120(R8)\n         LA    R1,120(R8)\n         ST    R1,SCBNSCB\n         MVC   0(120,R8),SCB      SAVE SCAN CONTROL BLOCK\n         MVI   MVD1SCB,C'1'\n         B     IDSCANB\n         SPACE 1\nIDSCANE7 MVC   ERROR7+15(2),SCBID\n         MVC   ELDATA2,ERROR7\n         B     IDSCANER\n         SPACE 2\nCSCBFILL EQU   *\n         MVI   OKFILLSW,C'0'\n         CLC   SCBFILL,=C'1110'\n         BE    SETOKSW\n         CLC   SCBFILL,=C'1111'\n         BE    SETOKSW\n         CLC   SCBFILL,=C'2111'\n         BE    SETOKSW\n         BR    R9\nSETOKSW  MVI   OKFILLSW,C'1'\n         BR    R9\n         EJECT\nIDSCANB  EQU   *\n         MVI   ELDATA2,X'40'\n         MVC   ELDATA2+1(46),ELDATA2\n         SPACE 1\n         MVI   SCB,X'00'     INIT SCB WORK AREA\n         MVC   SCB+1(119),SCB\n         SPACE 1\n         MVC   SCBID,CARDID+4     MOVE IN SCB ID.\n         MVC   EF2,=XL4'00000000'\n         MVZ   EF2(4),VALUE\n         CLC   EF2,=XL4'F0F0F0F0'\n         BNE   EDITER4\n         SPACE 1\n         ZAP   WORK2,=P'0'\n         ZAP   WORK3,=P'0'\n         PACK  WORK2,VALUE(2)\n         PACK  WORK3,VALUE+2(2)\n         AP    WORK2,WORK3\n         CP    WORK2,=P'72'\n         BH    EDITER5\n         SPACE 1\n         ZAP   WORK1,=P'0'\n         PACK  WORK1,VALUE(2)\n         CVB   R2,WORK1\n         S     R2,=F'1'\n         ST    R2,SCBSCOL\n         SPACE 1\n         ZAP   WORK1,=P'0'\n         PACK  WORK1,VALUE+2(2)\n         CVB   R2,WORK1\n         ST    R2,SCBSLEN\n         SPACE 1\n         MVC   SCBACD(1),VALUE+4\n         MVI   SCBEXTRA,C' '\n         SPACE 1\n         MVC   SCBFILL,=CL4'1100'\n         CLI   SCBACD,C'C'\n         BE    SETACD\nSCANBRET B     RETURN1\nSETACD   MVC   SCBFILL,=CL4'2100'\n         B     RETURN1\n         EJECT\nIDFROM   EQU   *\n         SPACE 1\n         CLC   CARDID+4(2),SCBID\n         BE    OK3\nEDITER8  MVC   ELDATA2,ERROR8\n         B     RETURN1\n         SPACE 1\nOK3      CLI   SCBFILL+2,C'1'\n         BNE   OK4\nEDITER10 MVC   ELDATA2,ERROR10\n         B     RETURN1\n         SPACE 1\nOK4      CLI   VALUE,C' '\n         BE    EDITER9\n         CLI   VALUE,X'7D'\n         BNE   OK5\n         BAL   R9,LITERAL\n         B     STORE2\nOK5      BAL   R9,NONLITRL\n         B     STORE2\nEDITER9  MVC   ELDATA2,ERROR9\n         B     RETURN1\n         SPACE 1\nSTORE2   EQU   *\n         BCTR  R4,0\n         ST    R4,SCBFLEN\n         MVC   SCBFROM(40),VALUE\n         MVI   SCBFILL+2,C'1'\n         B     RETURN1\n         EJECT\nIDTO     EQU   *\n         SPACE 1\n         CLC   CARDID+2(2),SCBID\n         BNE   EDITER8\n         SPACE 1\n         CLI   SCBFILL+3,C'1'\n         BE    EDITER10\n         SPACE 1\n         CLI   VALUE,C' '\n         BE    EDITER9\n         CLI   VALUE,X'7D'\n         BNE   OK6\n         BAL   R9,LITERAL\n         B     STORE3\nOK6      BAL   R9,NONLITRL\n         SPACE 1\nSTORE3   EQU   *\n         BCTR  R4,0\n         ST    R4,SCBTLEN\n         MVC   SCBTO(40),VALUE\n         MVI   SCBFILL+3,C'1'\n         B     RETURN1\n         SPACE 5\nIDPUNCH  EQU   *\n         SPACE 1\nALLOPT   MVI   SWITCH2,C'1'\n         B     RETURN1\n         SPACE 5\nIDVOLUME EQU   *\n         SPACE 1\n         MVC   JFCBVOLS(6),VALUE\n         AP    VSON,=PL1'1'\n         MVI   EBR3+1,X'00'\n         MVC   ELDATA2,WARNING2\n         B     RETURN1\n         EJECT\nIDDSNAME EQU   *\n         SPACE 1\n         CLI   VALUE,C' '\n         BE    DSNERROR\n         SPACE 1\n         CLI   VALUE+44,C' '\n         BNE   DSNERROR\n         SPACE 1\n         MVC   JFCBDSNM(44),VALUE\n         AP    VSON,=PL1'1'\n         MVI   EBR1+1,X'00'\n         MVC   ELDATA2,WARNING2\n         B     RETURN1\n         SPACE 1\nDSNERROR MVC   ELDATA2,ERROR11\n         B     RETURN1\n         SPACE 5\nIDUNIT   EQU   *\n         SPACE 1\n         LA    R2,UTABLE\n         LA    R3,15\n         SPACE 1\nUNITCHK  CLC   VALUE(4),0(R2)\n         BE    UNITOK\n         CLC   0(4,R2),=CL4'XXXX'\n         BE    UNITBAD\n         LA    R2,4(R2)\n         BCT   R3,UNITCHK\n         SPACE 1\nUNITBAD  MVC   ELDATA2,ERROR12\n         B     RETURN1\n         SPACE 1\nUNITOK   MVC   SCTHUNIT(4),0(R2)\n         AP    VSON,=PL1'1'\n         MVI   EBR2+1,X'00'\n         MVC   ELDATA2,WARNING2\n         B     RETURN1\n         SPACE 5\nIDUPDATE CLI   VALUE,C' '\n         BE    UNKNOWN\n         CLI   VALUE,C'Z'\n         BH    UNKNOWN\n         MVC   IEBPRINT(8),VALUE\n         MVI   UPDATSW+1,X'00'\n         B     RETURN1\n         EJECT\n* ROUTINE TO COMPUTE THE LENGTH OF AN EDIT STRING.\n         SPACE 1\nNONLITRL EQU   *\n         LA    R2,40\n         LA    R3,VALUE\n         LA    R4,0\nLOOP2    CLI   0(R3),C' '\n         BE    EXIT2\n         LA    R3,1(R3)\n         LA    R4,1(R4)\n         BCT   R2,LOOP2\n         SPACE 1\nEXIT2    BR    R9\n         SPACE 5\n* ROUTINE TO COMPUTE THE LENGTH OF AN LITERAL EDIT STRING.\n         SPACE 1\nLITERAL  EQU   *\n         LA    R2,39\n         LA    R3,VALUE+39\n         LA    R4,0\nLOOP3    CLI   0(R3),X'7D'\n         BE    EXIT3\n         BCTR  R3,0\n         BCT   R2,LOOP3\n         SPACE 1\n         B     EDITER9\n         SPACE 1\nEXIT3    LR    R4,R3\n         LA    R3,VALUE+1\n         SR    R4,R3\n         MVC   CARD(40),VALUE\n         MVC   VALUE(39),CARD+1\n         BR    R9\n         EJECT\n*        HEADING ROUTINES.\n         SPACE 1\nHEADING1 EQU   *\n         AP    PAGE#,=P'1'\n         UNPK  PAGENO,PAGE#\n         OI    PAGENO+2,X'F0'\n         SPACE 1\n         PUT   SYSPRINT,HEADLN1\n         SPACE 1\n         PUT   SYSPRINT,HEADLN1A\n         SPACE 1\n         PUT   SYSPRINT,HEADLN2\n         SPACE 1\n         ZAP   LINES,=P'5'\n         MVI   EDITLINE,C'0'\n         BR    R9\n         SPACE 2\n         EJECT\nEDITER1  MVC   ELDATA2,ERROR1\n         B     EDITERBR\n         SPACE 1\nEDITER2  MVC   ELDATA2,ERROR2\n         B     RETURN1\n         SPACE 1\nEDITER4  MVC   ELDATA2,ERROR4\n         MVC   SCBID,=XL2'9587'\n         B     RETURN1\n         SPACE 1\nEDITER5  MVC   ELDATA2,ERROR5\n         MVC   SCBID,=XL2'9587'\n         B     RETURN1\n         SPACE 1\nEDITERBR MVI   KILLSW1,C'1'\n         B     RETURN1\n         EJECT\nKILLJOB1 EQU   *\n         SPACE 1\n         LA    R15,8          ERROR RETURN CODE.\n         B     EXITPGM2\n         SPACE 1\nEXITPGM  LA    R15,0          NORMAL RETURN CODE.\nEXITPGM2 L     R13,4(R13)\n         L     R14,12(13,0)\n         LM    0,12,20(13)\n         BR    R14            EXIT THE PROGRAM.\n         EJECT\n*\n* PHASE 2 - PHASE 2 WILL INIT THE LAST SCB WITH A TRAILER FLAG,\n*           READ THE DIRECTORY OF THE PDS AND SELECT MEMBERS TO\n*           PROCESS BASED ON THE PREFIX OPTION TAKEN OR NOT,\n*           AND WILL BUILD AN INCORE TABLE OF MEMBERS TO PROCESS.\n*\nPHASE2   EQU   *\n         SPACE 1\n         CLI   MVD1SCB,C'1'\n         BE    CONTINU1\n         CLC   SCBFILL,=CL4'0000'\n         BE    KILLJOB2\n         BAL   R9,CSCBFILL\n         CLI   OKFILLSW,C'1'\n         BE    CONTINU1\n         SPACE 1\nKILLJOB2 EQU   *\n         PUT   SYSPRINT,TERMMSG\n         CLOSE (SYSPRINT)\n         B     KILLJOB1\n         SPACE 1\nCONTINU1 EQU   *\n         BAL   R9,CSCBFILL\n         CLI   OKFILLSW,C'1'\n         BNE   CONTINU2\n         SPACE 1\n         AP    REALTOT,=P'1'\n         CP    REALTOT,SCANS\n         BNH   MOVEITIN\n         SPACE 1\n         MVC   ERROR7+15(2),SCBID\n         MVC   ELDATA2,ERROR7\n         PUT   SYSPRINT,EDITLINE\n         B     CONTINU2\n         SPACE 1\nMOVEITIN EQU   *\n         MVC   SCBFILL,=C'SEND'\n         LA    R8,120(R8)\n         MVC   0(120,R8),SCB\n         B     CONTINU3\n         SPACE 1\nCONTINU2 EQU   *\n         MVC   116(4,R8),=C'SEND'\n         SPACE 1\n         EJECT\nCONTINU3 EQU   *\n         SPACE 1\n         OPEN  (DRECTORY,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         SPACE 2\nGETBLOCK GET   DRECTORY,BLOCK\n         SPACE 2\n         CLC   BLOCK(2),=XL2'0000' CHECK FOR END OF ENTRIES.\n         BE    ENDPDSD             SAFETY VALVE CHECK, SEE GENLIST CODE\n         LA    R7,BLOCK+2\n         SR    R6,R6\n         LH    R6,BLOCK\n         SH    R6,=H'2'\n         AR    R6,R7               R6 SHOULD HAVE END OF BLOCK.\n         LA    R6,0(R6)            CLEAR HIGH ORDER BYTE.\n         EJECT\nGENLIST  EQU   *\n         SPACE 1\n         LA    R7,0(R7)\n         CR    R7,R6               CHECK FOR END OF BLOCK.\n         BE    GETBLOCK\n         BH    GETBLOCK\n         CLC   0(2,R7),=XL2'FFFF'  CHECK FOR END OF DIRECTORY.\n         BE    ENDPDSD\n         AP    MEMCNT,=P'1'\n         SPACE 1\n         TM    11(R7),X'80'        ALIAS CHECK\n         BZ    CHECKSW1\n         AP    ALIASCNT,=P'1'\n         B     COMPUTE1\n         SPACE 1\nCHECKSW1 CLI   SWITCH1,C'1'        CHECK FOR PREFIX OPTION.\n         BNE   MVMEMBER\n         SPACE 1\nCHKPRFIX CLC   PREFIX(0),0(R7)\n         BNE   COMPUTE1\n         SPACE 1\nMVMEMBER MVC   ENTRY(8),0(R7)\n         PUT   SYSUT2,ENTRYREC\n         AP    MEMKEPT,=P'1'\n         SPACE 1\nCOMPUTE1 SR    R8,R8\n         IC    R8,11(R7)\n         N     R8,=XL4'0000001F'\n         LA    R8,12(R8,R8)\n         AR    R7,R8\n         B     GENLIST\n         EJECT\nENDPDSD  EQU   *\n         SPACE 1\n         CLOSE (DRECTORY)\n         CLOSE (SYSUT2)\n         SPACE 2\n         UNPK  MSG1CNT,MEMCNT\n         OI    MSG1CNT+4,X'F0'\n         UNPK  MSG2CNT,MEMKEPT\n         OI    MSG2CNT+4,X'F0'\n         UNPK  MSG3CNT,ALIASCNT\n         OI    MSG3CNT+4,X'F0'\n         SP    MEMCNT,ALIASCNT\n         UNPK  MSG4CNT,MEMCNT\n         OI    MSG4CNT+4,X'F0'\n         SPACE 1\n         MVI   HEADLN2,X'40'\n         MVC   HEADLN2+1(132),HEADLN2\n         BAL   R9,HEADING1\n         SPACE 1\n         PUT   SYSPRINT,MESSAGE    TOTAL MEMBERS COUNT\n         MVC   MESSAGE(33),MESSAGE3\n         SPACE 1\n         PUT   SYSPRINT,MESSAGE\n         MVC   MESSAGE(33),MESSAGE4\n         SPACE 1\n         PUT   SYSPRINT,MESSAGE\n         MVC   MESSAGE(33),MESSAGE2\n         SPACE 1\n         PUT   SYSPRINT,MESSAGE    SELECTED MEMBERS COUNT\n         EJECT\n         CP    MEMKEPT,=P'0'\n         BE    KILLJOB2\n         SPACE 1\n         ZAP   WORK1,MEMKEPT\n         CVB   R2,WORK1\n         ST    R2,GM2CNT\n         SPACE 1\n         SR    R2,R2\n         MP    WORK1,=P'8'\n         CVB   R2,WORK1\n         ST    R2,GM2LEN           LENGTH FOR SELECTED MEMBER TABLE.\n         SPACE 1\n         GETMAIN R,LV=(2)\n         SPACE 1\n         ST    R1,GM2ADDR          ADDRESS OF GET MAIN AREA 2.\n         EJECT\n*   ROUTINE TO BUILD THE MEMBER TABLE.\n         SPACE 2\n         OPEN  (SYSUT2,(INPUT))\n         SPACE 2\n         L     R2,GM2CNT\n         L     R3,GM2ADDR\nLOOP4    GET   SYSUT2,ENTRYREC\n         MVC   0(8,R3),ENTRY\n         LA    R3,8(R3)\n         BCT   R2,LOOP4\n         SPACE 2\nNMENTRYS CLOSE (SYSUT2)\n         EJECT\n*   PHASE3 - PHASE3 WILL READ PDS AND PROCESS CARDS FOR CHANGES TO BE\n*            MADE.  IF PUNCH OPTION WAS TAKEN, CARDS WILL BE PUNCHED.\nPHASE3   EQU   *\n         SPACE 1\n         OPEN  (SYSUT1,(INPUT))\n         SPACE 1\n         SR    R2,R2\n         LH    R2,UT1BLKSZ\n         ST    R2,GM3LEN\n         SPACE 1\n         GETMAIN R,LV=(2)\n         SPACE 1\n         ST    R1,GM3ADDR\n         SPACE 1\n         L     R2,GM3LEN\n         CVD   R2,WORK1\n         DP    WORK1,=PL4'80'\n         MVC   EF2(4),WORK1\n         ZAP   WORK1,EF2\n         SR    R2,R2\n         CVB   R2,WORK1\n         ST    R2,CLOOPCNT\n         SPACE 1\n         OPEN  (SYSUT2,(OUTPUT))\n         OPEN  (SYSPUNCH,(OUTPUT))\n         SPACE 1\n         MVC   POINTER1,GM2ADDR\n         MVC   HEADLN2,HEADLN3\n         BAL   R9,HEADING1\n         LA    R7,PHASE3S\n         EJECT\n* MAINLINE FOR PHASE3, ALL IO, AND WORK DONE THRU BAL TO ROUTINES.\n         SPACE 1\nPHASE3A  BAL   R9,FINDMBR          LOCATE A MEMBER TO PROCESS.\n         C     R15,=F'04'\n         BE    EOJPHASE\n         SPACE 1\nPHASE3B  BAL   R9,CLINAREA\n         SPACE 1\nPHASE3C  BAL   R9,RDABLOCK         READ A BLOCK INTO CORE.\n         SPACE 1\nPHASE3D  BAL   R9,GETACARD         GET A CARD TO PROCESS.\n         C     R15,=F'04'          AREA EMPTY.\n         BE    PHASE3D1\n         C     R15,=F'08'          END OF PROCEDURE.\n         BE    PHASE3E\n         B     PHASE3BR\n         SPACE 1\nPHASE3D1 CLI   EOPSWTCH,C'1'       END OF PROCEDURE.\n         BE    PHASE3E\n         B     PHASE3B\n         SPACE 1\nPHASE3E  MVI   EOPSWTCH,C'0'\n         LA    R7,0(R7)\n         LA    R6,PHASE3S\n         LA    R6,0(R6)\n         CR    R6,R7\n         BE    PHASE3E1\n         SPACE 1\n         LA    R7,PHASE3S\n         MVI   CHANGEON,C'0'\n         MVI   LASTSCB,C'0'\n         MVI   PUNCHCC,C'0'\n         MVI   PUNCHSC,C'0'\n         MVI   ACTIONON,C'0'\n         B     PHASE3A\n         SPACE 1\nPHASE3E1 B     PHASE3E2\n         SPACE 1\nPHASE3BR BR    R7\n         EJECT\n* ROUTINE TO SCAN PROC AND SEE IF ANY CHANGES WILL BE MADE.\n         SPACE 1\nPHASE3S  EQU   *\n         SPACE 1\n         L     R2,GM1ADDR1\n         B     SCANONE1\nPHASE3S1 L     R2,SCBNSCB\nSCANONE1 MVC   SCB(120),0(R2)\n         CLC   SCBFILL,=CL4'SEND'\n         BNE   PHASE3S2\n         MVI   LASTSCB,C'1'\n         SPACE 1\nPHASE3S2 CLI   SCBACD,C'C'\n         BE    PHASE3S3\n         CLI   SCBACD,C'D'\n         BE    PHASE3S3\n         CLI   LASTSCB,C'1'\n         BE    PHASE3S8\n         B     PHASE3S1\n         SPACE 1\nPHASE3S3 BAL   R9,REGSETUP\n         L     R2,SCBFLEN\n         STC   R2,COMPARE1+1\n         MVI   ACTIONON,C'1'\n         SPACE 1\nCOMPARE1 CLC   SCBFROM(0),0(R5)\n         BNE   BUMP\n         CLI   SCBACD,C'D'\n         BNE   PHASE3S9\n         BAL   R9,DELTOPT\n         MVI   PUNCHCC,C'0'\n         MVI   LASTSCB,C'0'\n         MVI   CHANGEON,C'2'\n         B     PHASE3E2\nBUMP     LA    R5,1(R5)\n         BCT   R6,COMPARE1\n         SPACE 1\nPHASE3S7 EQU   *\n         CLI   LASTSCB,C'1'\n         BNE   PHASE3S1\nPHASE3S8 MVI   LASTSCB,C'0'\n         CLI   ACTIONON,C'1'\n         BE    PHASE3D\n         B     PHASE3E\n         SPACE 1\nPHASE3S9 MVI   PUNCHCC,C'0'\n         MVI   LASTSCB,C'0'\n         MVI   CHANGEON,C'1'\nPHASE3E2 LA    R7,PHASE3SC\n         SPACE 1\nFINDAGIN FIND  SYSUT1,FINDNAME,D\n         SPACE 1\n         C     R15,=F'00'\n         BNE   FINDAGIN\n         SPACE 1\n         B     PHASE3B\n         EJECT\n* ROUTINE TO SCAN PROCEDURE AND MAKE REQUESTED CHANGES.\n         SPACE 1\nPHASE3SC EQU *\n         AP    SCANCNT,=P'1'\n         SPACE 1\nPHASE3SA CLI   CHANGEON,C'0'\n         BE    PHASE3SB\n         SPACE 1\n         CLI   PUNCHCC,C'1'\n         BE    PUNCHDC\n         MVC   IEBCCNAM,FINDNAME\n         SPACE 1\n         CLI   PUNCHOFF,C'1'\n         BE    PNCHSUT2\n         SPACE 1\n         PUT   SYSPUNCH,IEBCC\nPNCHSUT2 EQU   *\n         CLI   CHANGEON,C'2'\n         BE    MVPCC1\n         PUT   SYSUT2,IEBCC\n         SPACE 1\nMVPCC1   MVI   PUNCHCC,C'1'\n         SPACE 1\nPUNCHDC  CLI   PUNCHOFF,C'1'\n         BE    PHASE3SB\n         SPACE 1\n         PUT   SYSPUNCH,CARD\n         SPACE 1\n         MVI   PUNCHOFF,C'1'\n         SPACE 1\nPHASE3SB L     R2,GM1ADDR1\n         B     SCANONE2\n         SPACE 1\nNEXTSCAN L     R2,SCBNSCB\nSCANONE2 MVC   SCB(120),0(R2)\n         CLC   SCBFILL(4),=CL4'SEND'\n         BNE   PHASE3SD\n         MVI   LASTSCB,C'1'\n         EJECT\nPHASE3SD BAL   R9,REGSETUP\n         L     R2,SCBFLEN\n         STC   R2,COMPARE2+1\n         LA    R5,0(R5)\n         LA    R6,0(R6)\n         SPACE 1\nCOMPARE2 CLC   SCBFROM(0),0(R5)\n         BE    PHASE3GM\n         LA    R5,1(R5)\nCOMP2BMP BCT   R6,COMPARE2\n         SPACE 1\nPHASE3SE CLI   LASTSCB,C'1'\n         BNE   NEXTSCAN\n         MVI   LASTSCB,C'0'\n         CLI   CHANGEON,C'0'\n         BE    PHASE3D\n         CLI   CHANGEON,C'2'\n         BE    PHASE3D\n         PUT   SYSUT2,CARD\n         B     PHASE3D\n         EJECT\nPHASE3GM ST    R5,SAVE5\n         ST    R6,SAVE6\n         CLI   PRINTDC,C'1'\n         BE    PHASE3M1\n         SPACE 1\n         CLI   SCBACD,C'C'\n         BNE   PHASE3M1\n         SPACE 1\n         MVI   SCANLNCC,C'0'\n         MVC   SCANLNPN,FINDNAME\n         MVC   SCANLND1,CARD\n         MVC   SCANLND2,=CL2'  '\n         MVC   SCANLND3,=CL9'NO CHANGE'\n         MVC   SCANLND4,=CL22'ORIGINAL CARD ********'\n         SPACE 1\n         PUT   SYSPRINT,SCANLINE\n         SPACE 1\n         MVI   PRINTDC,C'1'\n         MVI   SCANLINE,X'40'\n         MVC   SCANLINE+1(132),SCANLINE\n         SPACE 1\n         PUT   SYSPRINT,SCANLINE\n         SPACE 1\n         AP    LINES,=P'3'\n         CP    LINES,LINESMAX\n         BNH   PHASE3M1\n         BAL   R9,HEADING1\n         SPACE 1\nPHASE3M1 CLI   SCBACD,C'C'\n         BNE   PHASE3M2\n         SPACE 1\n         CLI   CHANGEON,C'2'\n         BE    PHASE3MD\n         SPACE 1\n         L     R2,SCBFLEN\n         L     R3,SCBTLEN\n         LA    R2,0(R2)\n         LA    R3,0(R3)\n         CR    R2,R3\n         BE    R2EQR3\n         BH    R2GTR3\n         BL    R2LTR3\n         EJECT\nR2EQR3   STC   R3,MOVE2+1          FROM  =  TO.\nMOVE2    MVC   0(0,R5),SCBTO\n         B     PHASE3M3\n         SPACE 1\nR2GTR3   EQU   *                   FROM GREATER THAN TO.\n         SPACE 1\n*        R2 = SCBFLEN-1\n*        R3 = SCBTLEN-1\n*        R5    POINTS TO 1ST CHAR OF FIELD TO CHANGE.\n         SPACE 1\n         MVC   SAVECARD,CARD\n         MVC   SAVESEQ(9),CARD+71\n         MVC   SAVECARD+71(9),BLANKS\n         SPACE 1\n         STC   R3,MOVE3+1\nMOVE3    MVC   0(0,R5),SCBTO\n         AR    R5,R3\n         LA    R5,1(R5)\n         SR    R2,R3\n         SPACE 1\n         LA    R4,CARD+79\n         SR    R4,R5\n         BCTR  R4,0\n         STC   R4,MOVE4+1\n         STC   R4,MOVE5+1\nMOVE4    MVC   0(0,R5),BLANKS\n         SPACE 1\n         LA    R3,SAVECARD+79\n         LA    R4,1(R4)\n         SR    R3,R4\n         AR    R3,R2\nMOVE5    MVC   0(0,R5),0(R3)\n         MVC   CARD+71(9),SAVESEQ\n         SPACE 1\n         B     PHASE3M3\n         SPACE 1\n         EJECT\nR2LTR3   EQU   *                   FROM LESS THAN TO.\n         SPACE 1\n*        R2 = SCBFLEN-1\n*        R3 = SCBTLEN-1\n*        R5 POINTS TO 1ST CHAR IN FIELD TO CHANGE.\n         SPACE 1\n         MVC   SAVECARD,CARD\n         MVC   SAVECARD+71(9),BLANKS\n         MVC   SAVESEQ(9),CARD+71\n         SPACE 1\n         LA    R3,0(R3)\n         LA    R4,CARD+71\n         SR    R4,R5\n         LA    R4,0(R4)\n         CR    R3,R4\n         BH    OVERFLOW\n         SPACE 1\n         STC   R3,MOVE6+1\nMOVE6    MVC   0(0,R5),SCBTO\n         AR    R5,R3\n         LA    R5,1(R5)\n         SR    R3,R2\n         SPACE 1\n         LA    R4,CARD+79\n         SR    R4,R5\n         BCTR  R4,0\n         STC   R4,MOVE7+1\n         STC   R4,MOVE8+1\nMOVE7    MVC   0(0,R5),BLANKS\n         SPACE 1\n         LA    R2,SAVECARD+79\n         LA    R4,1(R4)\n         SR    R2,R4\n         SR    R2,R3\nMOVE8    MVC   0(0,R5),0(R2)\n         SPACE 1\n         CLI   CARD+71,C' '\n         BNE   OVERFLOW\n         MVC   CARD+71,SAVESEQ\n         B     PHASE3M3\nOVERFLOW MVC   SCANLND4(22),=CL22'OVERFLOW CONDITION    '\n         MVC   CARD,SAVECARD\n         MVC   CARD+71(9),SAVESEQ\n         B     PHASE3M2\n         EJECT\nPHASE3M2 MVC   SCANLND3,=CL9'NO CHANGE'\n         B     PHASE3M4\nPHASE3M3 MVC   SCANLND3,=CL9'*CHANGED*'\n         AP    CHANGTOT,=P'1'\n         SPACE 1\nPHASE3M4 MVC   SCANLND1,CARD\n         MVC   SCANLND2,SCBID\n         MVC   SCANLNPN,FINDNAME\nPHASE3M6 EQU   *\n         SPACE 1\n         PUT   SYSPRINT,SCANLINE\n         SPACE 1\n         MVI   SCANLINE,X'40'\n         MVC   SCANLINE+1(132),SCANLINE\n         AP    LINES,=P'1'\n         CP    LINES,LINESMAX\n         BNH   PHASE3MR\n         BAL   R9,HEADING1\n         B     PHASE3MR\n         SPACE 2\nPHASE3MD MVC   SCANLND4(22),=CL22'DELETE HAS BEEN DONE'\n         B     PHASE3M2\n         SPACE 2\nPHASE3MR L     R5,SAVE5\n         L     R6,SAVE6\n         CLC   SAVECARD,CARD\n         BNE   CHGMADE\n         L     R1,SCBFLEN\n         B     P3MRX\nCHGMADE  L     R1,SCBTLEN\nP3MRX    LA    R1,1(R1)\n         LA    R1,0(R1)\n         AR    R5,R1\n         CR    R1,R6\n         BH    PHASE3SE\n         SR    R6,R1\n         B     COMPARE2\n         EJECT\n* ROUTINE TO GENERATE IEHPROGM SCRATCH CONTROL CARDS FOR DELETE OPTION.\n         SPACE 1\nDELTOPT  EQU   *\n         CLI   PUNCHSC,C'1'\n         BE    DELTEXIT\n         SPACE 1\n         MVC   SCTHMEM,=CL9' '\n         MVC   SCTHMEM(8),FINDNAME\n         SPACE 1\n         LA    R1,9\n         LA    R2,SCTHMEM\nDELTLOOP CLI   0(R2),C' '\n         BE    DELTBLNK\n         LA    R2,1(R2)\n         BCT   R1,DELTLOOP\n         SPACE 1\nDELTBLNK MVI   0(R2),C','\n         SPACE 1\n         PUT   SYSUT2,SCTHCRD1\n         SPACE 1\n         PUT   SYSUT2,SCTHCRD2\n         SPACE 1\n         MVI   PUNCHSC,C'1'\n         SPACE 1\nDELTEXIT EQU   *\n         BR    R9\n         EJECT\n* ROUTINE TO SET UP AND ISSUE THE FIND MACRO FOR A BPAM READ.\n         SPACE 1\nFINDMBR  EQU   *\n         SPACE 1\n         CP    LINES,LINESMAX\n         BNH   FINDMEM1\n         LR    R8,R9\n         BAL   R9,HEADING1\n         LR    R9,R8\n         SPACE 1\nFINDMEM1 L     R2,GM2CNT\n         C     R2,=F'00'\n         BE    FINDMEM3\n         SPACE 1\n         L     R3,POINTER1         LOAD TABLE POINTER.\n         MVC   FINDNAME(8),0(R3)\n         LA    R3,8(R3)\n         BCTR  R2,0\n         ST    R2,GM2CNT\n         ST    R3,POINTER1\n         SPACE 1\n         FIND  SYSUT1,FINDNAME,D   LOCATE FOR READ MACRO.\n         SPACE 2\n         C     R15,=F'00'\n         BE    FINDMEM2\n         SPACE 1\n         C     R15,=F'04'\n         BE    FERROR1\n         SPACE 1\n         C     R15,=F'08'\n         BE    FERROR2\n         SPACE 2\nFERROR1  MVC   FERROR1M+14(8),FINDNAME\n         PUT   SYSPRINT,FERROR1M\n         AP    LINES,=P'2'\n         B     FINDMBR\n         SPACE 1\nFERROR2  MVC   FERROR2M+44(8),FINDNAME\n         PUT   SYSPRINT,FERROR2M\n         AP    LINES,=P'2'\n         B     FINDMBR\n         SPACE 1\nFINDMEM2 EQU   *\n         LA    R15,0\n         BR    R9\n         SPACE 1\nFINDMEM3 LA    R15,4\n         BR    R9\n         EJECT\n* ROUTINE TO CLEAR INPUT AREA FOR READ MACRO.\n         SPACE 1\nCLINAREA EQU   *\n         SPACE 1\n         L     R2,CLOOPCNT\n         L     R3,GM3ADDR\n         SPACE 1\nINITAREA MVC   0(80,R3),INITFFS\n         LA    R3,80(R3)\n         BCT   R2,INITAREA\n         SPACE 1\n         MVC   DEBLKCNT,CLOOPCNT\n         MVC   DEBLKPTR,GM3ADDR\n         SPACE 1\n         BR    R9\n         EJECT\n* ROUTINE TO READ THE PROCLIB, AND ON FIRST READ FOR A PROC, NOTE.\n         SPACE 1\nRDABLOCK EQU   *\n         SPACE 1\n         L     R2,GM3ADDR\n         SPACE 1\n         READ  READECB,SF,SYSUT1,(2),'S'\n         SPACE 1\nCHECKRD  CHECK READECB\n         SPACE 1\n         B     RDABLKBR\nENDOPROC MVI   EOPSWTCH,C'1'\n         SPACE 1\nRDABLKBR BR    R9\n         EJECT\n* SYNAD ROUTINE FOR A BAD BRANCH.\n         SPACE 1\nREOPEN   EQU   *\n         WTO   'SYNAD ROUTINE ENTERED'\n         CLOSE (SYSUT1)\n         OPEN  (SYSUT1,(INPUT))\nREFIND   FIND  SYSUT1,FINDNAME,D\n         C     R15,=F'00'\n         BNE   REFIND\n         WTO   'SYNAD ROUTINE COMPLETE'\n         B     RDABLOCK\n         EJECT\n* ROUTINE FOR DEBLOCKING INPUT AREA FROM READ MACRO.\n         SPACE 1\nGETACARD EQU   *\n         SPACE 1\n         L     R2,DEBLKCNT\n         L     R3,DEBLKPTR\n         SPACE 1\n         C     R2,=F'00'\n         BE    GETCARD1\n         CLC   0(2,R3),=XL2'FFFF'\n         BE    GETCARD2\n         SPACE 1\n         MVC   CARD(80),0(R3)\n         LA    R3,80(R3)\n         BCTR  R2,0\n         ST    R3,DEBLKPTR\n         ST    R2,DEBLKCNT\n         SPACE 1\n         LA    R15,0               MOVED A CARD.\n         MVI   PRINTDC,C'0'\n         MVI   PUNCHOFF,C'1'\n         CLI   SWITCH2,C'0'\n         BE    GETCARD3\n         MVI   PUNCHOFF,C'0'\nGETCARD3 BR    R9\n         SPACE 1\nGETCARD1 LA    R15,4               INPUT AREA EMPTY.\n         BR    R9\n         SPACE 1\nGETCARD2 LA    R15,8               END OF PROCEDURE.\n         BR    R9\n         EJECT\n* ROUTINE TO SETUP REGISTERS FOR A SCAN LOOP.\n         SPACE 1\nREGSETUP EQU *\n         SPACE 1\n         LA    R2,0\n         L     R4,SCBSCOL\n         AR    R2,R4\n         L     R4,SCBSLEN\n         AR    R2,R4\n         L     R4,SCBFLEN\n         AR    R2,R4\n         LA    R3,0\n         C     R2,=F'80'\n         BNH   SETUP1\n         SPACE 1\n         LA    R4,80\n         SR    R2,R4\n         LR    R3,R2\n         SPACE 1\nSETUP1   LA    R5,CARD\n         L     R2,SCBSCOL\n         AR    R5,R2\n         L     R6,SCBSLEN\n         SR    R6,R3\n         SPACE 1\n         BR    R9\n         EJECT\nEOJPHASE EQU   *\n         SPACE 1\n         MVI   HEADLN2,X'40'\n         MVC   HEADLN2+1(132),HEADLN2\n         BAL   R9,HEADING1\n         SPACE 1\n         MVC   MSG1CNT(5),=CL5'     '\n         MVC   MESSAGE+1(27),=CL27'TOTAL SCANS PROCESSED.'\n         UNPK  MSG1CNT+5(8),REALTOT\n         OI    MSG1CNT+12,X'F0'\n         PUT   SYSPRINT,MESSAGE\n         SPACE 1\n         MVC   MESSAGE+1(27),=CL27'TOTAL CARDS PROCESSED.'\n         UNPK  MSG1CNT+5(8),SCANCNT\n         OI    MSG1CNT+12,X'F0'\n         PUT   SYSPRINT,MESSAGE\n         SPACE 1\n         MVC   MESSAGE+1(27),=CL27'TOTAL CHANGES MADE.'\n         UNPK  MSG1CNT+5(8),CHANGTOT\n         OI    MSG1CNT+12,X'F0'\n         PUT   SYSPRINT,MESSAGE\n         EJECT\n*  CODE TO LINK IEBUPDTE AND CHANGE PDS.\n         SPACE 2\nUPDATSW  B     EXITPGM\n         SPACE 2\n         CLOSE (SYSUT1)\n         CLOSE (SYSUT2)\n         CLOSE (SYSPRINT)\n         CLOSE (SYSPUNCH)\n         SPACE 2\n         LINK  EP=IEBUPDTE,PARAM=(PARMFLD,DDNAMLST),VL=1\n         SPACE 2\n         CH    R15,=H'0'\n         BNE   KILLJOB1\n         B     EXITPGM\n         EJECT\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=EOFSYSIN,          C\n               RECFM=FB,LRECL=80\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      C\n               RECFM=FBA,LRECL=133,BLKSIZE=133\n         EJECT\nDRECTORY DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=ENDPDSD,          C\n               RECFM=F,LRECL=256,BLKSIZE=256,EXLST=EXIT\n         EJECT\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=ENDOPROC,          C\n               SYNAD=REOPEN\n         EJECT\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(GM,PM),EODAD=NMENTRYS,    C\n               RECFM=FB,LRECL=80,BLKSIZE=800\n         EJECT\nSYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=(PM),                    C\n               RECFM=FB,LRECL=80,BLKSIZE=80\n         EJECT\n* SAVEAREA, MISC VARIABLES AND WORK FIELDS.\n         SPACE 1\nSAVEAREA DC    18F'0'\n         SPACE 1\nEF1      DC    XL2'0000'\nEF2      DC    XL4'00000000'\nWORK1    DS    D\nSCANS    DC    PL2'0'\nPREFIX   DS    CL8\nPAGE#    DC    PL3'0'\nLINES    DC    PL2'0'\nLINESMAX DC    PL2'56'\nWORK2    DS    PL2\nWORK3    DS    PL2\nSCANCNT  DC    PL4'0'\nCHANGTOT DC    PL4'0'\nREALTOT  DC    PL3'0'\nMEMCNT   DC    PL3'0'\nMEMKEPT  DC    PL3'0'\nALIASCNT DC    PL3'0'\nINITFFS  DC    80XL1'FF'\nCARD     DC    CL80' '\nSAVECARD DC    CL80' '\nBLANKS   DC    80CL1' '\nSAVESEQ  DS    CL9\n         SPACE 3\n*        ADCONS\n         DS    0F\nGM1LEN   DS    F\nGM1ADDR1 DS    F\nGM1ADDR2 DS    F\nGM2CNT   DS    F\nGM2LEN   DS    F\nGM2ADDR  DS    F\nGM3LEN   DS    F\nGM3ADDR  DS    F\nDEBLKPTR DS    F\nDEBLKCNT DS    F\nCLOOPCNT DS    F\nPOINTER1 DS    F                   MEMBER NAME TABLE POINTER.\nSAVE5    DS    F\nSAVE6    DS    F\nFINDNAME DS    D\nUT1BLKSZ EQU   SYSUT1+62\n         EJECT\n*        SWITCHES\n         SPACE 1\nKILLSW1  DC    CL1'0'    FAIL JOB BECAUSE OF BAD CONTROL CARDS.\nSWBRANCH DC    CL1'0'\nSWITCH1  DC    CL1'0'    PEFIX OPTION SWITCH.\nSWITCH2  DC    CL1'0'    PUNCH OPTION SWITCH.\nOKFILLSW DC    CL1'0'\nMVD1SCB  DC    CL1'0'\nEOPSWTCH DC    CL1'0'\nACTIONON DC    CL1'0'\nLASTSCB  DC    CL1'0'\nCHANGEON DC    CL1'0'\nPUNCHCC  DC    CL1'0'\nPRINTDC  DC    CL1'0'\nPUNCHOFF DC    CL1'0'\nPUNCHSC  DC    CL1'0'\nVSON     DC    PL1'0'\n         SPACE 3\n         DS    0F\nEXIT     DC    X'87',AL3(JFCB)\nJFCB     DC    44F'0'\n         SPACE 1\nJFCBDSNM EQU   JFCB\nJFCBVOLS EQU   JFCB+118\n         EJECT\n*        MESSAGES USED BY PROGRAM\n         SPACE 1\nERROR1   DC    CL47'INVALID SCANS CARD, NON NUMERIC VALUE.  *ABORT*'\nERROR2   DC    CL47'MORE THAN ONE SCANS CONTROL CARD.'\nERROR3   DC    CL47'INVALID CONTROL CARD, BYPASSED.'\nERROR4   DC    CL47'INVALID SCANXX CARD, NON NUMERIC VALUE(S).'\nERROR5   DC    CL47'INVALID SCANXX CARD, SC + SL > 72.'\nERROR6   DC    CL47'****NOTE  SCAN XX DELETED,  INCOMPLETE SCB.'\nERROR7   DC    CL47'****NOTE  SCAN XX DELETED, SCANS TOTAL EXCEEDED'\nERROR8   DC    CL47'INVALID SCAN ID, DELETED.'\nERROR9   DC    CL47'INVALID EDIT STRING, DELETED.'\nERROR10  DC    CL47'EXCESS FROM/TO CONTROL CARDS, DELETE THIS ONE.'\nERROR11  DC    CL47'INVALID DSNAME, DELETED.'\nERROR12  DC    CL47'INVALID UNIT TYPE, DELETED.'\nWARNING1 DC    CL47'MORE THAN ONE PREFIX CARD, LAST ONE USED'\nWARNING2 DC    CL47'CONTROL CARD ACCEPTED, NO MORE WILL BE ACCEPTED'\n         SPACE 1\nFERROR1M DS    0CL133\n         DC    CL1'0'\n         DC    CL45'***** MEMBER XXXXXXXX NOT FOUND IN DIRECTORY.'\n         DC    CL40'  CONTINUE PROCESSING WITH NEXT MEMBER. '\n         DC    CL47' '\n         SPACE 1\nFERROR2M DS    0CL133\n         DC    CL1'0'\n         DC    CL43'***** I/O ERROR WHILE SEARCHING FOR MEMBER '\n         DC    CL48'XXXXXXXX.  CONTINUE PROCESSING WITH NEXT MEMBER.'\n         DC    CL41' '\n         SPACE 5\n         DS    0F\nSCB      DS    0CL120    SCAN CONTROL BLOCK\nSCBID    DS    CL2       SCB ID\nSCBACD   DS    CL1       SCB ACTION CODE  'D' = DELETE 'C' = CHANGE\nSCBEXTRA DS    CL1' '    EXTRA BYTE FOR FUTURE USE IF NEEDED.\nSCBSCOL  DS    F         SCB START SCAN COL.\nSCBSLEN  DS    F         SCB SCAN LENGTH.\nSCBFLEN  DS    F         SCB COMPARE TO LENGTH\nSCBTLEN  DS    F         SCB CHANGE TO LENGTH\nSCBFROM  DS    CL40      SCB COMPARE TO FIELD\nSCBTO    DS    CL40      SCB CHANGE TO FIELD.\nSCBNSCB  DS    F         CHAIN POINTER TO NEXT SCB.\nSCBFUTUR DS    CL12\nSCBFILL  DC    CL4' '    SCB TRAILER FLAG,  SET TO 'SEND' ON LAST SCB.\n         EJECT\n*        INPUT  AREAS\n         SPACE 1\nPARMCARD DS    0CL80\nCARDID   DS    CL6\n         DS    CL1\nVALUE    DS    CL73\n         SPACE 1\nBLOCK    DS    CL256\n         SPACE 1\nENTRYREC DS    0CL80\nENTRY    DS    CL8' '\n         DC    CL72' '\n         SPACE 2\n*        PRINT LINES, HEADINGS.\n         SPACE 2\nEDITLINE DS    0CL133\nELCC     DC    CL1'0'\nELDATA1  DS    CL47\n         DC    CL5' '\nELDATA2  DC    CL47' '\n         DC    CL33' '\n     SPACE 2\nSCANLINE DS    0CL133\nSCANLNCC DC    CL1' '\n         DC    CL1' '\nSCANLNPN DS    CL8\n         DC    CL1' '\nSCANLND1 DS    CL80\n         DC    CL5' '\nSCANLND2 DS    CL2\n         DC    CL2' '\nSCANLND3 DS    CL9\n         DC    CL2' '\nSCANLND4 DC    CL22' '\n         EJECT\nHEADLN1  DS    0CL133\n         DC    CL1'1'\n         DC    CL7'DATE = '\nH1DATE   DC    CL5' '\n         DC    CL28' '\n         DC    CL49'         D A T A   S C A N   E D I T O R         '\n         DC    CL33' '\n         DC    CL7'PAGE = '\nPAGENO   DC    CL3' '\n         SPACE 2\nHEADLN1A DS    0CL133\n         DC    CL1'0'\n         DC    CL132' '\n         SPACE 2\nHEADLN2  DS    0CL133\n         DC    CL1'0'\n         DC    CL47'------ -------- C A R D  I M A G E ------------'\n         DC    CL5' '\n         DC    CL47'---------- E R R O R S ------------------------'\n         DC    CL33' '\n         SPACE 2\nHEADLN3  DS    0CL133\n         DC    CL1'0'\n         DC    CL10' --PROC-- '\n         DC    CL45'------------------------------ C A R D  I M A'\n         DC    CL35' G E ------------------------------'\n         DC    CL4' '\n         DC    CL5'S.ID '\n         DC    CL9' ACTION  '\n         DC    CL2' '\n         DC    CL22'--- C O M M E N T ---'\n         SPACE 1\nTERMMSG  DS    0CL133\n         DC    CL1'0'\n         DC    CL132'***** DATA SCAN EDITOR TERMINATED, TERMINAL ERRORSC\n                IN THE PARAMETER CARDS, OR THERE WERE NO MEMBERS SELECTC\n               ED TO PROCESS. *****'\n         SPACE 2\nIEBCC    DS    0CL80\n         DC    CL5'./   '\n         DC    CL20'ADD   LIST=ALL,NAME='\nIEBCCNAM DS    CL8\n         DC    CL47' '\n         EJECT\nMESSAGE  DS    0CL133\n         DC    CL1' '\n         DC    CL27'TOTAL MEMBERS IN PROCLIB = '\nMSG1CNT  DS    CL5\n         DC    CL100' '\n         SPACE 1\nMESSAGE2 DS    0CL33\n         DC    CL1' '\n         DC    CL27'TOTAL MEMBERS SELECTED   = '\nMSG2CNT  DS    CL5\n         SPACE 1\nMESSAGE3 DS    0CL33\n         DC    CL1' '\n         DC    CL27'TOTAL ALIAS NAMES FOUND  = '\nMSG3CNT  DS    CL5\n         SPACE 1\nMESSAGE4 DS    0CL33\n         DC    CL1' '\n         DC    CL27'TOTAL REAL MEMBERS       = '\nMSG4CNT  DS    CL5\n         EJECT\nSCTHCRD1 DS    0CL80\n         DC    CL19'      SCRATCH  VOL='\nSCTHUNIT DS    CL4\n         DC    CL1'='\nSCTHVOL  DS    CL6\n         DC    CL8',MEMBER='\nSCTHMEM  DS    CL9\n         DC    CL24' '\n         DC    CL1'C'\n         DC    CL8'SCTHCRD1'\n         SPACE 1\nSCTHCRD2 DS    0CL80\n         DC    CL15' '\n         DC    CL7'DSNAME='\nSCTHDSN  DC    CL44' '\n         DC    CL6' '\n         DC    CL8'SCTHCRD2'\n         SPACE 2\nUTABLE   DC    CL4'2311' 1\n         DC    CL4'2301' 2\n         DC    CL4'2303' 3\n         DC    CL4'2302' 4\n         DC    CL4'2321' 5\n         DC    CL4'2305' 6\n         DC    CL4'2305' 7\n         DC    CL4'2314' 8\n         DC    CL4'3330' 9\n         DC    CL4'3340' A   FUTURE ENTRY.\n         DC    CL4'3350' B\n         DC    CL4'XXXX' C   FUTURE ENTRY.\n         DC    CL4'3330' D   FUTURE ENTRY.\n         DC    CL4'XXXX' E   FUTURE ENTRY.\n         DC    CL4'XXXX' F   FUTURE ENTRY.\n         SPACE 2\n         CNOP  2,4\nPARMFLD  DC    H'3'\n         DC    CL3'NEW'\n         CNOP  2,4\nDDNAMLST DC    H'72'\n         DC    32X'0'\n         DC    CL8'SYSUT2  '       SYSIN    FILE\nIEBPRINT DC    CL8'SYSPRINT'\n         DC    XL16'0'\n         DC    CL8'SYSUT1  '       SYSUT2   FILE\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENQSP": {"ttr": 3585, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                              *HMD 08/82*\n&NAME    TABLE &T,&G                                        *HMD 08/82*\n         LCLA  &L                                           *HMD 08/82*\n&L       SETA  K'&T-1                                       *HMD 08/82*\n&NAME    DC    AL1(&L),AL3(&G),C'&T'                        *HMD 08/82*\n         MEND                                               *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nENQ      TITLE 'ENQ - DISPLAY MVS ENQUEUE STRUCTURE - MVS/SP 1.3'\n***********************************************************************\n*        THIS COMMAND HAS BEEN UPDATED FOR USE UNDER MVS              *\n*        SYSTEM PRODUCT RELEASE 1.3 BY:                               *\n*                                                                     *\n*        HOWARD M. DEAN                                               *\n*        SR. SYSTEMS PROGRAMMER                                       *\n*        GTE DATA SERVICES                                            *\n*        4750 LINCOLN BLVD.                                           *\n*        MARINA DEL REY, CA 90291                                     *\n*                                                                     *\n***********************************************************************\nENQ      TSBEGIN WORK=TSDUSIZE                              *HMD 08/82*\n         LA    R2,DWORK                 1ST BYTE OF AREA    *HMD 08/82*\n         LA    R3,TSDUSIZE              USER AREA SIZE      *HMD 08/82*\n         SLR   R4,R4                    CONTENTS NOT IMPT   *HMD 08/82*\n         SLR   R5,R5                    PAD WITH ZEROS      *HMD 08/82*\n         MVCL  R2,R4                    CLEAR MEMORY        *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\n         LA    R0,1                     GET A CONSTANT      *HMD 08/82*\n         ST    R0,OLD                   SET # OF SEGMENTS   *HMD 08/82*\n         LA    R0,LINELEN               GET LENGTH OF LINE  *HMD 08/82*\n         SLL   R0,16                    SHIFT TO HI ORDER   *HMD 08/82*\n         ST    R0,LINE                  SAVE IN DESCRIPTOR  *HMD 08/82*\n         MVC   TSDGMAIN(LGMAIN),GMAIN   INIT THE GETMAIN LIST\n         MVC   TSDESTAE(ESTAELEN),ESTAEL     AND ESTAE LIST *HMD 08/82*\n         BAL   RLINK,GQSCORE            GET GQSCAN AREA     *HMD 08/82*\n         OI    FLAG1,$CNFL              1ST TIME TRY CONFLICTS\n         L     R3,CVTPTR                CHECK FOR SP 1.2/3  *HMD 08/82*\n         ICM   R3,B'1111',CVTLQCB-CVT(R3)                   *HMD 08/82*\n         BNZ   NONSUPT                  ENQ NOT SUPPORTED   *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n***********************************************************************\n*                                                                     *\n*        EXTABLISH ESTAE EXIT TO CLEAN UP IN CASE OF ABEND            *\n*                                                                     *\n***********************************************************************\n         ESTAE CLEANUP,CT,PURGE=NONE,ASYNCH=YES,TERM=NO,    *HMD 08/82*X\n               MF=(E,TSDESTAE)                              *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT THE PROGRAM USES THE \"GQSCAN\" MACRO            *\n*        TO EXTRACT INFORMATION FROM THE GRS ADDRESS SPACE            *\n*                                                                     *\n***********************************************************************\n         SPACE 3                                            *HMD 08/82*\nSCAN     DS    0H                                           *HMD 08/82*\n         L     R4,GQAREA                                    *HMD 08/82*\n         L     R3,GQLEN                                     *HMD 08/82*\nGQCODE   GQSCAN AREA=((R4),(R3)),SCOPE=ALL,REQLIM=MAX,      *HMD 08/82*X\n               MF=(E,GQLIST)                                *HMD 08/82*\n         ST    R0,GQRIBI                SAVE RIB INFO       *HMD 08/82*\n         ST    R1,GQRIBN                SAVE NUMBER OF RIBS *HMD 08/82*\n         CH    R15,=H'16'               CHECK RETURN CODE   *HMD 08/82*\n         BH    BADQUEUE                 ERROR IN GQSCAN     *HMD 08/82*\nBRTAB    B     *+4(R15)                                     *HMD 08/82*\n         B     FORMAT                   RC=0 RESOURCE FOUND *HMD 08/82*\n         B     PGMERR                   RC=4 ERROR          *HMD 08/82*\n         B     QFULL                    RC=8 TRY AGAIN      *HMD 08/82*\n         B     BADQUEUE                 RC=12 ABNORMAL END  *HMD 08/82*\n         B     BADQUEUE                 RC=16 INVALID RC    *HMD 08/82*\n         SPACE 2\nQFULL    BAL   RLINK,NEWGQCOR           GET MORE CORE       *HMD 08/82*\n         B     SCAN                     RETURN AGAIN        *HMD 08/82*\n*                                                           *HMD 08/82*\n* PROGRAM ERRORS                                            *HMD 08/82*\n*                                                           *HMD 08/82*\nPGMERR   DS    0H                                           *HMD 08/82*\n*        SETPSW ENABLE                                      *HMD 08/82*\n         EX    0,*                      A NICE PRECISE 0C3  *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n***********************************************************************\n*\n*        FORMAT THE TABELED ENQUEUE STRUCTURE\n*              THIS ROUTINE CONSTRUCTS THE LINE TO BE SENT TO THE\n*              TERMINAL, AND PERFORMS THE REQUIRED SELECTION (AS\n*              DETERMINED BY THE COMMAND SCAN SECTION) OF OUTSTANDING\n*              ENQUEUE REQUESTS\n*\n***********************************************************************\n         SPACE 3                                            *HMD 08/82*\nFORMAT   DS    0H                                           *HMD 08/82*\n         LUSE  RIBE,R2                  -> RIB EXTENSION    *HMD 08/82*\n         LUSE  RIB,R3                   -> RIB              *HMD 08/82*\n         LUSE  RIBVAR,R4                -> RIB VAR SECTION  *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\n         L     R3,GQAREA                -> 1ST RIB          *HMD 08/82*\n         L     R9,GQRIBN                R9 = NUMBER OF RIBS *HMD 08/82*\nFRIB     DS    0H                        PROCESS RIB SECTION*HMD 08/82*\n         MVI   LSCOPE,C' '               CLEAR THE LINE     *HMD 08/82*\n         MVC   LTYPE(LMNAME-LTYPE),LSCOPE                   *HMD 08/82*\n         MVI   LMNAME,C' '               CLEAR MINOR NAME   *HMD 08/82*\n         MVC   LMNAME+1(L'LMNAME-1),LMNAME                  *HMD 08/82*\n         CLC   RIBQCB,=F'0'              END OF CHAIN?      *HMD 08/82*\n         BE    COMGET                    YES. GET NEXT CMD  *HMD 08/82*\n         LR    R4,R3                     -> RIB             *HMD 08/82*\n         AH    R4,GQRIBI                 -> RIB VAR SECTION *HMD 08/82*\n         MVC   LJNAME,RIBQNAME           MOVE MAJOR NAME TO LINE\n         SPACE 1                                            *HMD 08/82*\nFRIBVAR  DS    0H                       PROCESS RIBVAR SEC  *HMD 08/82*\n         SR    R1,R1                    CLEAR FOR INSERT    *HMD 08/82*\n         IC    R1,RIBRNMLN              GET MINOR NAME LEN  *HMD 08/82*\n         CH    R1,LMNMAX                OVER MY MAX LEN ?   *HMD 08/82*\n         BNH   FMINMOVE                 NO, DON'T FORCE IT  *HMD 08/82*\n         LH    R1,LMNMAX                SET TO MY MAX       *HMD 08/82*\nFMINMOVE DS    0H                                           *HMD 08/82*\n         BCTR  R1,0                     -1 FOR EXECUTED MVC *HMD 08/82*\n         EX    R1,FMINMVC               MOVE MINOR NAME     *HMD 08/82*\n         LR    R11,R1                   SAVE ORIGINAL LENGTH*HMD 08/82*\n         TRT   RIBRNAME,TRTMN            CHECK FOR UNPRINT  *HMD 08/82*\n         EX    R11,*-6                                      *HMD 08/82*\n         BZ    FMINDONE                 NONE, PRINT AS CHAR *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFHEXMIN  LA    R5,RIBRNAME              -> RIB MINOR NAME   *HMD 08/82*\n         LA    R6,1                     BXLE INCREMENT      *HMD 08/82*\n         LR    R8,R1                    STARTING ADDRESS    *HMD 08/82*\n         SR    R8,R5                    GET GOOD CHAR LEN   *HMD 08/82*\n         LA    R8,LMNAME(R8)            OUTPUT AREA ADDRESS *HMD 08/82*\n         LA    R7,1(R11,R5)             END OF STRING BXLE  *HMD 08/82*\n         MVC   0(3,R8),=C' X'''                             *HMD 08/82*\n         LA    R8,3(,R8)                                    *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nHEXLOOP  UNPK  DWORK(3),0(2,R1)                             *HMD 08/82*\n         MVC   0(2,R8),DWORK                                *HMD 08/82*\n         TR    0(2,R8),HEXTAB                               *HMD 08/82*\n         LA    R8,2(,R8)                                    *HMD 08/82*\n         AR    R1,R6                INCREMENT COUNT         *HMD 08/82*\n         BXLE  R5,R6,HEXLOOP                                *HMD 08/82*\n         MVI   0(R8),C''''                                  *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFMINDONE DS    0H                   POINT TO RIBE'S         *HMD 08/82*\n         LR    R2,R4                -> MINOR NAME           *HMD 08/82*\n         AH    R2,RIBVLEN           ADD LEN OF MINOR        *HMD 08/82*\n         L     R7,RIBNRIBE          LOAD NUMBER OF RIBES    *HMD 08/82*\n* R2 NOW POINTS TO RIB EXTENSION                            *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFQELLOOP DS    0H                   FORMAT RIB EXTENSIONS   *HMD 08/82*\n         TM    FLAG1,$GLOBAL        AM I TO DO EVERYTHING ? *HMD 08/82*\n         BO    DOLINE               YES, THEN GET AT IT     *HMD 08/82*\n         TM    FLAG1,$CNFL          CONFLICT CHECKING ?     *HMD 08/82*\n         BNO   FQELCKF              NO, THEN GO CHECK FINDS *HMD 08/82*\n         CLC   RIBNTWE,=F'0'        WAITING FOR EXCLUSIVE?  *HMD 08/82*\n         BNE   DOLINE               GO DISPLAY CONFLICTS    *HMD 08/82*\n         CLC   RIBNTWS,=F'0'        WAITING FOR SHARED?     *HMD 08/82*\n         BE    FQELEND              NO, GET NEXT RIB        *HMD 08/82*\n         B     DOLINE               GO DISPLAY CONFLICTS    *HMD 08/82*\n         SPACE 1\nFQELCKF  DS    0H                    TEST FOR FINDS         *HMD 08/82*\n         TM    FLAG1,$FIND           IS IT A FIND REQUEST ? *HMD 08/82*\n         BO    FQELFIND              YES, KEEP GOING        *HMD 08/82*\n         EX    0,*                   PGM ERROR, CAN'T BE HERE\n         SPACE 1                                            *HMD 08/82*\nFQELFIND DS    0H                                           *HMD 08/82*\n         TM    FLAG2,$FMAJ              FIND ON MAJOR NAME ?*HMD 08/82*\n         BNO   FQELFMIN                 NO, GO TEST FOR MINOR\n         LH    R1,FMAJLEN               GET THE COMPARE LEN *HMD 08/82*\n         EX    R1,FMAJCLC               SEE IF THIS MAJOR NAME\n         BNE   FQELEND                  NO, THE SKIP TO NEXT RIB\nFQELFMIN DS    0H                                           *HMD 08/82*\n         TM    FLAG2,$FMIN              CHECK FOR MINOR NAME*HMD 08/82*\n         BNO   FQELFJOB                 NO, GO CHECK FOR JOB NAME\n         LH    R1,FMINLEN               GET THE COMPARE LEN *HMD 08/82*\n         EX    R1,FMINCLC               SEE IF THIS MINOR NAME\n         BNE   FQELEND                  NO, GO GET NEXT RIB *HMD 08/82*\nFQELFJOB DS    0H                                           *HMD 08/82*\n         TM    FLAG2,$FJOB              FIND ON JOB NAME ?  *HMD 08/82*\n         BNO   DOLINE                   NO, THEN GO DISPLAY LINE\n         LH    R14,FJOBLEN              GET LEN TO COMPARE  *HMD 08/82*\n         EX    R14,FJOBCLC              IS THIS THE ONE ?   *HMD 08/82*\n         BNE   FQELNEXT                 NO, THEN GET NEXT RIBE        *\n         EJECT                                              *HMD 08/82*\nDOLINE   DS    0H                                           *HMD 08/82*\n         MVC   LJOB,RIBEJBNM        MOVE JOB NAME TO LINE   *HMD 08/82*\n         MVI   LSCOPE,#SYSS         ASSUME SYSTEMS WIDE ENQ *HMD 08/82*\n         TM    RIBSCOPE,RIBSYSS     'SYSTEMS' SCOPE?        *HMD 08/82*\n         BO    FQELSYS              CHECK SHARED/EXCLUSIVE  *HMD 08/82*\n         MVI   LSCOPE,#SYS          ASSUME 'SYSTEM' SCOPE   *HMD 08/82*\n         TM    RIBSCOPE,RIBSYS      IS MINOR QCB SYSTEM WIDE*HMD 08/82*\n         BO    FQELSYS              YES, SKIP NEXT MOVE     *HMD 08/82*\n         MVI   LSCOPE,#STEP         MARK AS STEP WIDE ONLY  *HMD 08/82*\nFQELSYS  DS    0H                                           *HMD 08/82*\n         MVI   LTYPE,#SHR           ASSUME A SHARED ENQ     *HMD 08/82*\n         TM    RIBERFLG,RIBETYPE    IS THIS QEL SHARED ?    *HMD 08/82*\n         BO    FQELSHR              YES, THEN SKIP THE MOVE *HMD 08/82*\n         MVI   LTYPE,#EXC           MARK NON-SHARED         *HMD 08/82*\nFQELSHR  DS    0H                                           *HMD 08/82*\n         MVI   LHAS,#GOT            ASSUME HE HAS RESOURCE  *HMD 08/82*\n         TM    RIBESFLG,RIBESTAT    IS HE WAITING ?         *HMD 08/82*\n         BO    FQELGOT              NO, SKIP TO NEXT TEST   *HMD 08/82*\n         MVI   LHAS,#WAIT           MARK AS WAITING         *HMD 08/82*\nFQELGOT  DS    0H                                           *HMD 08/82*\n         MVI   LSYS,C' '            ASSUME NOT RESERVE      *HMD 08/82*\n         TM    RIBERFLG,RIBERESV    IS THIS A RESERVE ?     *HMD 08/82*\n         BZ    FQELCONV             NO, SKIP TO THE NEXT    *HMD 08/82*\n         MVI   LSYS,#RES            MARK AS A RESERVE       *HMD 08/82*\n         B     FQELSETU             CONTINUE WITH CODE      *HMD 08/82*\nFQELCONV TM    RIBERFLG,RIBERESC    CONVERTED RESERVE?      *HMD 08/82*\n         BZ    FQELRES              CHECK FOR MUST COMPLETE *HMD 08/82*\n         MVI   LSYS,#RESC           MOVE IN RESERVE COMPLETE*HMD 08/82*\n         B     FQELRES                                      *HMD 08/82*\nFQELSETU L     R11,RIBEUCB          MOVE IN UCB VOL SER     *HMD 08/82*\n         LUSE  UCBOB,R11            ADDRESS THE UCB         *HMD 08/82*\n         MVC   LUCB(6),UCBVOLI      MOVE IN UCB VOL SER     *HMD 08/82*\n         MVC   LUCB+7(3),UCBNAME    MOVE IN DEVICE ADDR     *HMD 08/82*\n         MVI   LUCB+6,C'-'                                  *HMD 08/82*\n         LDROP R11                                          *HMD 08/82*\nFQELRES  DS    0H                                           *HMD 08/82*\n         MVI   LMC,C' '             CLEAR MC FLAG           *HMD 08/82*\n         TM    RIBERFLG,RIBEMC      MUST COMPLETE?          *HMD 08/82*\n         BZ    FQELPUT              NO, PUT OUT LINE        *HMD 08/82*\n         MVI   LMC,#MUST            INDICATE MUST COMPLETE  *HMD 08/82*\nFQELPUT  DS    0H                   PUT OUT A LINE          *HMD 08/82*\n         LA    R1,IOPL              POINT TO PARMS          *HMD 08/82*\n         L     R15,TSDAPUTL         LOAD ENTRY POINT        *HMD 08/82*\n         PUTLINE PARM=PTPB,OUTPUT=(LINE,TERM,SINGLE,DATA),  *HMD 08/82*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nFQELNEXT DS    0H                                           *HMD 08/82*\n         AH    R2,GQRIBI+2          ADD LENGTH OF RIB       *HMD 08/82*\n         LTR   R7,R7                CHECK FOR ZERO          *HMD 08/82*\n         BNP   FQELEND              END OF RIBE BLOCKS      *HMD 08/82*\n         BCT   R7,FQELLOOP          PROCESS ALL QELS        *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nFQELEND  DS    0H                                           *HMD 08/82*\n* POINT R3 TO NEXT RIB AND RETURN TO LOOP                   *HMD 08/82*\n         L     R7,RIBNRIBE          LOAD NUMBER OF RIBS     *HMD 08/82*\n         MH    R7,GQRIBI+2          X LENGTH OF ONE RIBE    *HMD 08/82*\n         AH    R7,GQRIBI            + LENGTH OF A RIB       *HMD 08/82*\n         AH    R7,RIBVLEN           + VARIABLE SECTION LEN  *HMD 08/82*\n         AR    R3,R7                POINT TO NEXT RIB       *HMD 08/82*\n         LTR   R9,R9                CHECK FOR ANOTHER       *HMD 08/82*\n         BNP   COMGET               GET ANOTHER COMMAND     *HMD 08/82*\n         BCT   R9,FRIB              PROCESS NEXT RIB        *HMD 08/82*\n         B     COMGET               END OF RIBS (YUM!!)     *HMD 08/82*\n         SPACE 5                                            *HMD 08/82*\nFMAJCLC  CLC   FMAJ(0),LJNAME           << EXECUTED >>      *HMD 08/82*\nFMINCLC  CLC   FMIN(0),LMNAME           << EXECUTED >>      *HMD 08/82*\nFJOBCLC  CLC   FJOB(0),RIBEJBNM         << EXECUTED >>      *HMD 08/82*\nFMINMVC  MVC   LMNAME(0),RIBRNAME       << EXECUTED >>      *HMD 08/82*\n         LDROP R2,R3,R4                                     *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n***********************************************************************\n*\n*        ASK THE USER FOR A COMMAND.  WHEN YOU GET ONE SEARCH THE\n*        COMMAND TABLE FOR A MATCH, IF NO MATCH ASK HIM AGAIN,\n*        IF YOU GET A HIT GO PROCESS THE COMMAND\n*\n***********************************************************************\n         SPACE 3                                            *HMD 08/82*\nCOMGET   DS    0H                                           *HMD 08/82*\n         LA    R1,MSGMODE               GET MY MODE MSG     *HMD 08/82*\n         ST    R1,OLD+4                 AND PUT IT IN THE OLD\n         L     R15,TSDAPTGT             GET EPA OF IKJPTGT  *HMD 08/82*\n         LA    R1,IOPL                  GET THE IO PARM LIST*HMD 08/82*\n*        TELL USER WE WANT INPUT AND WAIT FOR HIM TO TALK   *HMD 08/82*\n         PUTGET PARM=PGPB,OUTPUT=(OLD,,MODE),ENTRY=(15),    *HMD 08/82*+\n               TERMGET=(EDIT),MF=(E,(1))                    *HMD 08/82*\n         CH    R15,=H'4'                A BAD ERROR ?       *HMD 08/82*\n         BH    EXIT                     YES, THE GIVE UP    *HMD 08/82*\n         L     R1,PGPBIBUF              GET COMMAND BUFFER  *HMD 08/82*\n         ST    R1,CSPLCBUF              INTO THE LIST       *HMD 08/82*\n         LA    R1,CSPL                  -> LIST             *HMD 08/82*\n         L     R15,TSDASCAN             GET EPA OF IKJSCAN  *HMD 08/82*\n         BALR  R14,R15                  GO SCAN THE COMMAND *HMD 08/82*\n*        INVOKE IKJSCAN TO FORMAT THE COMMAND BUFFER        *HMD 08/82*\n         LTR   R15,R15                  CHECK RETURN FROM IKJSCAN\n         BNZ   SCANERR                  AND ERROR IS A BAD ONE\n         CLI   CSOAFLG,X'10'            IS BUFFER EMPTY ?   *HMD 08/82*\n         BE    AGAIN                    YES, THE GO FREE UP & CONTINUE\n         TM    CSOAFLG,X'28'            IS THERE A VALID COM THERE\n         BNZ   COMINVL                  NO, THEN TELL USER  *HMD 08/82*\n         L     R1,CSOACNM               GET THE COMMAND ADDR*HMD 08/82*\n         LH    R0,CSOALNM               GET THE LEN OF THE NAME\n         BCTR  R0,0                     REDUCE IT FOR TEST  *HMD 08/82*\n         LA    R15,COMTAB               -> TABLE OF VALID COMMANDS\n         SR    R14,R14                  CLEAR A WORK REG    *HMD 08/82*\nCOMLOOP  DS    0H                                           *HMD 08/82*\n         IC    R14,0(,R15)              GET EX LEN OF COMMAND\n         CR    R14,R0                   ARE THEY THE SAME   *HMD 08/82*\n         BNE   COMNEXT                  NO, GO TRY THE NEXT ONE\n         EX    R14,COMCLC               CHECK THE TEXT      *HMD 08/82*\n         BE    COMHAVE                  = IS A HIT ON THE COMMAND\nCOMNEXT  DS    0H                                           *HMD 08/82*\n         LA    R15,5(R14,R15)           POINT TO NEXT COMMAND\n         CLI   0(R15),XFF               END OF TABLE ?      *HMD 08/82*\n         BE    COMINVL                  YES, THEN INVALID COMMAND\n         B     COMLOOP                  GO TRY NEXT ONE     *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nCOMHAVE  DS    0H                                           *HMD 08/82*\n         MVC   DWORK(4),0(R15)          GET ADDR OF COMMAND *HMD 08/82*\n         L     R15,DWORK                SO I CAN USE IT     *HMD 08/82*\n         BR    R15                      GO PROCESS THE COMMAND\n         SPACE 3                                            *HMD 08/82*\nCOMCLC   CLC   4(0,R15),0(R1) << EXECUTED >>                *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nCOMINVL  DS    0H                        INVALID COMMAND ENTERED\n         LA    R1,MSGCOM                GET INVVALID MSG    *HMD 08/82*\n         ST    R1,OLD+4                 PUT IT IN THE OLD   *HMD 08/82*\n         LA    R1,IOPL                  GET THE LIST ADDR   *HMD 08/82*\n         L     R15,TSDAPUTL             GET PUTLINE ADDRESS *HMD 08/82*\n         PUTLINE PARM=PTPB,OUTPUT=OLD,MF=(E,(1)),ENTRY=(15) *HMD 08/82*\n         LTR   R15,R15                  DID IT WORK ?       *HMD 08/82*\n         BNZ   EXIT                     NO, THEN QUIT       *HMD 08/82*\n         B     COMGET                   GO TRY AGAIN        *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nSCANERR  DS    0H                                           *HMD 08/82*\n         EX    0,*                      DIE A LOT           *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nCONFL    DS    0H                        CONFLICT COMMAND   *HMD 08/82*\n         XC    FLAGS,FLAGS              CLEAN UP            *HMD 08/82*\n         OI    FLAG1,$CNFL              SET CONFLICT SCAN   *HMD 08/82*\n         B     AGAIN                    AND CONTINUE        *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nGLOBAL   DS    0H                        GLOBAL COMMAND     *HMD 08/82*\n         XC    FLAGS,FLAGS              CLEAN UP            *HMD 08/82*\n         OI    FLAG1,$GLOBAL            SET FOR GLOBAL SCAN *HMD 08/82*\n         B     AGAIN                    AND GO DO IT        *HMD 08/82*\n         EJECT\nFIND     DS    0H                        FIND COMMAND       *HMD 08/82*\n         XC    FLAGS,FLAGS              CLEAN UP            *HMD 08/82*\n         OI    FLAG1,$FIND              INDICATE FIND OPERATION\n         TSPARSE CBUF=PGPBIBUF,PCL==V(PCL),ENTRY=TSDAPARS   *HMD 08/82*\n         LTR   R15,R15                  DID THE PARSE GO ?  *HMD 08/82*\n         BNZ   EXIT                     NO, THEN QUIT       *HMD 08/82*\n         L     R1,TSDPANS               GET THE ANSWER PLACE*HMD 08/82*\n         USING IKJPARMD,R1              MAKE IT ADDRESSABLE *HMD 08/82*\n         LH    R14,PARMAJ+4             GET LEN OF MAJOR GIVEN\n         LTR   R14,R14                  ANY NAME ?          *HMD 08/82*\n         BZ    FINDMIN                  NO, GO GET MINOR    *HMD 08/82*\n         L     R15,PARMAJ               GET ADDR OF TEXT    *HMD 08/82*\n         BCTR  R14,0                    CHECK FOR LEN OF 1  *HMD 08/82*\n         LTR   R14,R14                  IS THE LEN ONE      *HMD 08/82*\n         BZ    FINDJ@                   YES, GO CHECK FOR '*'\nFINDJ#   DS    0H                                           *HMD 08/82*\n         LA    R2,FMAJ                  GET RECEIVING FIELD *HMD 08/82*\n         EX    R14,FINDMVC              MOVE THE NAME       *HMD 08/82*\n         STH   R14,FMAJLEN              SAVE THE LEN        *HMD 08/82*\n         OI    FLAG2,$FMAJ              INDICATE FIND ON MAJOR NAME\n         B     FINDMIN                  GO CHECK MINOR      *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFINDJ@   DS    0H                                           *HMD 08/82*\n         CLI   0(R15),C'*'              ACCEPT ANY MAJOR NAME ?\n         BNE   FINDJ#                   NO, MUST BE REAL NAME\n         SPACE 2                                            *HMD 08/82*\nFINDMIN  DS    0H                                           *HMD 08/82*\n         LH    R14,PARMIN+4             GET THE LEN OF MINOR NAME\n         LTR   R14,R14                  IS IT OMITTED ?     *HMD 08/82*\n         BZ    FINDJOB                  YES, GO CHECK JOB NAME\n         L     R15,PARMIN               GET TEXT ADDR       *HMD 08/82*\n         BCTR  R14,0                    DOWN BY ONE         *HMD 08/82*\n         LTR   R14,R14                  IS LEN ONE          *HMD 08/82*\n         BZ    FINDM@                   YES, GO CHECK SPECIAL CASE\nFINDM#   DS    0H                                           *HMD 08/82*\n         LA    R2,FMIN                  GET RECEIVVING FIELD*HMD 08/82*\n         EX    R14,FINDMVC              MOVE THE TEXT       *HMD 08/82*\n         STH   R14,FMINLEN              SAVE THE LEN        *HMD 08/82*\n         OI    FLAG2,$FMIN              SET FIND ON MINOR NAME\n         B     FINDJOB                  GO CHECK JOB NAME   *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFINDM@   DS    0H                                           *HMD 08/82*\n         CLI   0(R15),C'*'              ALLOW ANY MINOR NAME*HMD 08/82?\n         BNE   FINDM#                   NO, GO MOVE NAME    *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nFINDJOB  DS    0H                                           *HMD 08/82*\n         LH    R14,PARJOB+4             GET LEN OF JOB NAME *HMD 08/82*\n         LTR   R14,R14                  WAS ONE GIVEN       *HMD 08/82*\n         BZ    FINDEND                  NO, GO TO END OF PARSE\n         L     R15,PARJOB               GET TEXT ADDR       *HMD 08/82*\n         BCTR  R14,0                    DOWN BY ONE         *HMD 08/82*\n         LTR   R14,R14                  IS THE LEN ONE      *HMD 08/82*\n         BZ    FINDN@                   YES, GO CHECK SPECIAL CASE\nFINDN#   DS    0H                                           *HMD 08/82*\n         LA    R2,FJOB                  GET TARGET FIELD    *HMD 08/82*\n         EX    R14,FINDMVC              MOVE THE JOB NAME   *HMD 08/82*\n         STH   R14,FJOBLEN              SAVE FOR LATTER     *HMD 08/82*\n         OI    FLAG2,$FJOB              MARK AS FIND JOB NAME\n         B     FINDEND                  AND GO FINISH PARSE *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFINDN@   DS    0H                                           *HMD 08/82*\n         CLI   0(R15),C'*'              ACCEPT ANY JOB NAME ?\n         BNE   FINDN#                   NO, GO MOVE NAME    *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nFINDEND  DS    0H                                           *HMD 08/82*\n         IKJRLSA (1)                    FREE THE PDL        *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nAGAIN    DS    0H                                           *HMD 08/82*\n         L     R1,PGPBIBUF              GET COMMAND BUFFER  *HMD 08/82*\n         LH    R0,0(,R1)                GET LEN OF BUFFER   *HMD 08/82*\n         O     R0,=AL1(1,0,0,0)         MAKE IF SUB POOL 1  *HMD 08/82*\n         FREEMAIN R,LV=(0),A=(1)        GIVE BACK BUFFER    *HMD 08/82*\n         B     SCAN                     AND GO TRY IT AGAIN *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nFINDMVC  MVC   0(0,R2),0(R15)           << EXECUTED >>      *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nNEWGQCOR DS    0H                                           *HMD 08/82*\n         L     R1,GQAREA                GET AREA ADDRESS    *HMD 08/82*\n         L     R0,GQLEN                 GET LENGTH          *HMD 08/82*\n         O     R0,=AL1(3,0,0,0)         MAKE SUBPOOL 3      *HMD 08/82*\n         FREEMAIN R,LV=(0),A=(1)        GIVE IT BACK        *HMD 08/82*\nGQSCORE  DS    0H                                           *HMD 08/82*\n         L     R3,GQLEN                 GET CURRENT LENGTH  *HMD 08/82*\n         A     R3,GQINCR                ADD INCREMENT       *HMD 08/82*\n         BC    5,QUITCORE               NOT OVERFLOW/MINUS  *HMD 08/82*\n         ST    R3,GQLEN                 SAVE LENGTH         *HMD 08/82*\n         LA    R4,GQAREA                GET AREA ADDRESS    *HMD 08/82*\n         XC    GQAREA,GQAREA            IN CASE FAILURE     *HMD 08/82*\n         LA    R1,TSDGMAIN              GET THE LIST ADDR   *HMD 08/82*\n         GETMAIN EC,LV=(R3),SP=3,A=(R4),MF=(E,(1))          *HMD 08/82*\n         LTR   R15,R15                  DID WE GET IT?      *HMD 08/82*\n         BNZ   QUITCORE                 NOPE..NO STORAGE    *HMD 08/82*\n         BR    RLINK                                        *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nBADQUEUE DS    0H                                           *HMD 08/82*\n         LA    R1,MSGQUE                GET BAD QUEUE MSG   *HMD 08/82*\n         ST    R1,OLD+4                 & PUT IT IN THE OLD *HMD 08/82*\nPUTLINE  DS    0H                                           *HMD 08/82*\n         LA    R1,IOPL                  GET THE LIST ADDR   *HMD 08/82*\n         L     R15,TSDAPUTL             GET ROUTINE ADDRESS *HMD 08/82*\n         PUTLINE PARM=PTPB,OUTPUT=OLD,MF=(E,(1)),ENTRY=(15) *HMD 08/82*\n         B     COMGET                   THEN TRY AGAIN      *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nQUITCORE DS    0H                                           *HMD 08/82*\n         LA    R1,MSGCORE               GET OUT OF CORE MSG *HMD 08/82*\n         ST    R1,OLD+4                 PUT IT IN THE OLD   *HMD 08/82*\n         B     PUTLINE                  THEN GO DO IT       *HMD 08/82*\n         SPACE 3                                            *HMD 08/82*\nNONSUPT  DS    0H                                           *HMD 08/82*\n         LA    R1,MSGNSUPT              NON SUPPORTED REL   *HMD 08/82*\n         ST    R1,OLD+4                 SAVE IN OLD         *HMD 08/82*\n         LA    R1,IOPL                  GET PARM ADDRESS    *HMD 08/82*\n         L     R15,TSDAPUTL             GET PUTLINE ADDRESS *HMD 08/82*\n         PUTLINE PARM=PTPB,OUTPUT=OLD,MF=(E,(1)),ENTRY=(15) *HMD 08/82*\n         B     EXIT                                         *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n*                                                           *HMD 08/82*\n* ESTAE EXIT ROUTINE                                        *HMD 08/82*\n*                                                           *HMD 08/82*\nCLEANUP  DS    0H                                           *HMD 08/82*\n         LUSE  CLEANUP,R15             ADDRESS THE ROUTINE  *HMD 08/82*\n         C     R0,NOSDWA               DID I GET SDWA?      *HMD 08/82*\n         BNE   CLEANOK                 YES..PROCESS         *HMD 08/82*\n         CLM   R1,6,A0C3               IS THIS AN 0C3       *HMD 08/82*\n         BNE   CLEANRET                NO, RETRY            *HMD 08/82*\n         LA    R15,0                   CONTINUE WITH ABEND  *HMD 08/82*\n         BR    R14                     RETURN TO CALLER     *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nCLEANRET L     R0,AEXIT                GET EXIT ADDRESS     *HMD 08/82*\n         LA    R15,4                   SCHEDULE A RETRY     *HMD 08/82*\n         BR    R14                     RETURN TO RTM        *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nCLEANOK  SAVE  (14,12)                                      *HMD 08/82*\n* RETURN TO FREE STORAGE                                    *HMD 08/82*\n         LUSE  SDWA,R1                                      *HMD 08/82*\n         CLC   SDWACMPC,A0C3           AN 0C3 ABEND?        *HMD 08/82*\n         BE    CLEANDMP                CONTINUE WITH ABEND  *HMD 08/82*\n         LDROP R1                      DROP SDWA BASE       *HMD 08/82*\n         L     R2,AEXIT                                     *HMD 08/82*\n         SETRP WKAREA=(1),REGS=(14,12),RETADDR=(2),DUMP=NO, *HMD 08/82*X\n               RETREGS=YES,FRESDWA=YES,RC=4                 *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nCLEANDMP SETRP WKAREA=(1),REGS=(14,12),RC=0                 *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nNOSDWA   DC    F'12'                   NO SDWA OBTAINED CODE*HMD 08/82*\nAEXIT    DC    A(EXIT)                 RETRY ROUTINE ADDR   *HMD 08/82*\nA0C3     DC    X'0C3000'               ABEND 0C3 COMP CODE  *HMD 08/82*\n         LDROP R15                     NO NEED FOR BASE     *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nEXIT     DS    0H                                           *HMD 08/82*\n         L     R1,GQAREA      GET GQSCAN AREA ADDRESS       *HMD 08/82*\n         LTR   R1,R1          IS THERE ONE ?                *HMD 08/82*\n         BZ    NONFREE        NO, THEN SKIP FREE            *HMD 08/82*\n         L     R0,GQLEN       GET CURRENT LENGTH            *HMD 08/82*\n         O     R0,=AL1(3,0,0,0)         MAKE SUBPOOL 3      *HMD 04/82*\n         FREEMAIN R,LV=(0),A=(1)        GIVE BACK THE CORE  *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nNONFREE  DS    0H                                           *HMD 08/82*\n         TSFINISH RC=0                  GO HOME             *HMD 08/82*\n         TSDSECT NODAPL,NOADAIR,NOSAV2,PGPB,PTPB,ASCAN,NODAPB,NODAECB\n         TSDSECT AIOPG,AIOPT,APARS,CSPL,GEN=YES             *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nGMAIN    GETMAIN EC,A=0,LV=0,MF=L                           *HMD 08/82*\nLGMAIN   EQU   *-GMAIN                                      *HMD 08/82*\nESTAEL   ESTAE 0,MF=L             LIST FORM ESTAE MACRO     *HMD 08/82*\nESTAELEN EQU   *-ESTAEL                                     *HMD 08/82*\nLMNMAX   DC    Y(L'LMNAME)                                  *HMD 08/82*\nGQINCR   DC    A(8*4096)          GET SOME CORE             *HMD 10/82*\n         SPACE 3                                            *HMD 08/82*\nMSGCORE  DC    AL2(LMSGCORE,0)\n         DC    C'HMD0555I INSUFFICIENT MEMORY TO PROCESS'   *HMD 08/82*\nLMSGCORE EQU   *-MSGCORE                                    *HMD 08/82*\nMSGQUE   DC    AL2(LMSGQUE,0)\n         DC    C'HMD0554E ERROR IN QUEUE STRUCTURE - '      *HMD 08/82*\n         DC    C'ISGQSCAN ERROR - CONTACT SYSTEMS SUPPORT'  *HMD 08/82*\nLMSGQUE  EQU   *-MSGQUE                                     *HMD 08/82*\nMSGCOM   DC    AL2(LMSGCOM,0)\n         DC    C'HMD0553I INVALID COMMAND'                  *HMD 08/82*\nLMSGCOM  EQU   *-MSGCOM                                     *HMD 08/82*\nMSGNSUPT DC    AL2(MSGNONL,0)                               *HMD 08/82*\n         DC    C'HMD0550I ENQ'                              *HMD 08/82*\n         DC    C' REQUIRES AN MVS RELEASE OF'              '*HMD 08/82*\n         DC    C' SYSTEM PRODUCT 1.2 OR HIGHER'             *HMD 08/82*\nMSGNONL  EQU   *-MSGNSUPT                                   *HMD 08/82*\nMSGMODE  DC    AL2(LMSGMODE,0),C' ENQ'                      *HMD 08/82*\nLMSGMODE EQU   *-MSGMODE                                    *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nCOMTAB   TABLE FIND,FIND                                    *HMD 08/82*\n         TABLE F,FIND                                       *HMD 08/82*\n         TABLE CONFLICT,CONFL                               *HMD 08/82*\n         TABLE C,CONFL                                      *HMD 08/82*\n         TABLE GLOBAL,GLOBAL                                *HMD 08/82*\n         TABLE G,GLOBAL                                     *HMD 08/82*\n         TABLE END,EXIT                                     *HMD 08/82*\n         TABLE E,EXIT                                       *HMD 08/82*\n         DC    X'FF'                                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\n$WAIT    EQU   X'01'                                        *HMD 08/82*\n$TSO     EQU   X'01'                                        *HMD 08/82*\n$MQCBCNF EQU   X'80'                                        *HMD 08/82*\nXFF      EQU   X'FF'                                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\n         LTORG  ,                                           *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nHEXTAB   EQU   *-C'0'                                       *HMD 08/82*\n         DC    C'0123456789ABCDEF'                          *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nTRTMN    DC    256X'FF'                 TABLE FOR XLATE AND TEST\n         ORG   TRTMN+C' '                                   *HMD 08/82*\n         DC    X'00'                                        *HMD 08/82*\n         ORG   TRTMN+C'.'                                   *HMD 08/82*\n         DC    6X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C'$'                                   *HMD 08/82*\n         DC    7X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C','                                   *HMD 08/82*\n         DC    5X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C':'                                   *HMD 08/82*\n         DC    5X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C'A'                                   *HMD 08/82*\n         DC    9X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C'J'                                   *HMD 08/82*\n         DC    9X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C'S'                                   *HMD 08/82*\n         DC    8X'00'                                       *HMD 08/82*\n         ORG   TRTMN+C'0'                                   *HMD 08/82*\n         DC    10X'00'                                      *HMD 08/82*\n         ORG   ,                                            *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nPCL      IKJPARM\n         SPACE 1                                            *HMD 08/82*\nPARMAJ   IKJIDENT 'MAJOR NAME',ASTERISK,MAXLNTH=8,FIRST=ANY,           X\n               OTHER=ANY,DEFAULT='*'                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nPARMIN   IKJIDENT 'MINOR NAME',ASTERISK,MAXLNTH=256,FIRST=ANY,         X\n               OTHER=ANY,DEFAULT='*'                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nPARJOB   IKJIDENT 'JOB NAME',ASTERISK,MAXLNTH=8,FIRST=ANY,             X\n               OTHER=ANY,DEFAULT='*'                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\n         IKJENDP\n         EJECT                                              *HMD 08/82*\n         ISGRIB ,                                           *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n         CVT   LIST=YES,DSECT=YES                           *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n         IEFUCBOB LIST=YES                                  *HMD 08/82*\n         EJECT                                              *HMD 08/82*\n         IHASDWA  ,                                         *HMD 08/82*\n         EJECT                                              *HMD 08/82*\nTSDSECT  DSECT ,              PICK UP IN THE DSECT          *HMD 08/82*\nDWORK    DS    D                                            *HMD 08/82*\nGQAREA   DS    A              A(GRS QUEUE RETURN AREA)      *HMD 08/82*\nGQLEN    DS    F              GRS QUEUE RETURN LENGTH       *HMD 08/82*\nGQRIBI   DS    F              R0 SAVE AREA FROM GQSCAN      *HMD 08/82*\nGQRIBN   DS    F              NUMBER OF RIBS RETURNED       *HMD 08/82*\nOLD      DC    A(0,0)                                       *HMD 08/82*\nFLAGS    DS    0F                                           *HMD 08/82*\nFLAG1    DS    X                                            *HMD 08/82*\n$CNFL    EQU   X'80'                                        *HMD 08/82*\n$GLOBAL  EQU   X'40'                                        *HMD 08/82*\n$FIND    EQU   X'20'                                        *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFLAG2    DS    X                                            *HMD 08/82*\n$FMAJ    EQU   X'80'                                        *HMD 08/82*\n$FMIN    EQU   X'40'                                        *HMD 08/82*\n$FJOB    EQU   X'20'                                        *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFLAG3    DS    X                                            *HMD 08/82*\nFLAG4    DS    X                                            *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nFMAJLEN  DS    H                                            *HMD 08/82*\nFMINLEN  DS    H                                            *HMD 08/82*\nFJOBLEN  DS    H                                            *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\nTSDGMAIN GETMAIN EC,A=0,LV=0,MF=L                           *HMD 08/82*\nTSDESTAE ESTAE   0,MF=L                  ESTAE PARM LIST    *HMD 08/82*\nGQLIST   GQSCAN MF=L                     GQSCAN PARM LIST   *HMD 08/82*\nFMAJ     DS    CL8                                          *HMD 08/82*\nFJOB     DS    CL8                                          *HMD 08/82*\nFMIN     DS    CL256                                        *HMD 08/82*\n         SPACE 2                                            *HMD 08/82*\nLINE     DS    F                        MAP THE LINE SENT TO TERMINAL\nLSCOPE   DS    C                        SCOPE OF ENQ - 'Y' OR 'J'\nLTYPE    DS    C                        TYPE OF ENQ - 'E' OR 'S'\nLHAS     DS    C                        ENQ STATUS - 'G' OR 'W'\nLSYS     DS    C                        RESERVE     'R'     *HMD 08/82*\n         DS    C                                            *HMD 08/82*\nLMC      DS    C                        MUST COMPLETE =*    *HMD 08/82*\nLJOB     DS    CL8                      JOB NAME            *HMD 08/82*\n         DS    C                                            *HMD 08/82*\nLUCB     DS    CL10                     UCB  NAME           *HMD 08/82*\n         DS    C                                            *HMD 08/82*\nLJNAME   DS    CL8                      MAJOR QUEUE NAME    *HMD 08/82*\n         DS    C                                            *HMD 08/82*\nLMNAME   DS    CL256                    MINOR QUEUE NAME    *HMD 08/82*\nLINELEN  EQU   *-LINE                   LENGTH FOR PUTLINE  *HMD 08/82*\n         SPACE 1                                            *HMD 08/82*\n#SYS     EQU   C'Y'                                         *HMD 08/82*\n#SYSS    EQU   C'X'               SYSTEMS WIDE ENQUEUE      *HMD 08/82*\n#STEP    EQU   C'J'                                         *HMD 08/82*\n#SHR     EQU   C'S'                                         *HMD 08/82*\n#EXC     EQU   C'E'                                         *HMD 08/82*\n#GOT     EQU   C'G'                                         *HMD 08/82*\n#WAIT    EQU   C'W'                                         *HMD 08/82*\n#RES     EQU   C'R'                                         *HMD 08/82*\n#RESC    EQU   C'C'               CONVERTED RESERVE         *HMD 08/82*\n#MUST    EQU   C'*'                                         *HMD 08/82*\nRLINK    EQU   R11                                          *HMD 08/82*\nTSDUEND  DS    0H                                           *HMD 08/82*\nTSDUSIZE EQU   TSDUEND-TSDUSER                              *HMD 08/82*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENQSP#": {"ttr": 3843, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")S SUBCOMMANDS -\n     CONFLICT,GLOBAL,FIND,END\n)F FUNCTION -\n     THE ENQ COMMAND DISPLAYS THE MVS ENQUEUE STRUCTURE\n     NOTE: THIS COMMAND WILL ONLY OPERATE ON AN MVS RELEASE\n           OF SYSTEM PRODUCT 1.2 OR HIGHER\n)X SYNTAX -\n     ENQ\n)O OPERANDS -\n     THERE ARE NO OPTIONS WHICH MAY BE GIVEN FOR THE ENQ COMMAND\n     THE DEFAULT REQUEST FOR THE INITIAL ENTRY IS CONFLICT.\n\n SUBCOMMANDS\n   CONFLICT -\n     THE CONFLICT SUBCOMMAND IS INVOKED BY ENTERING CONFLICT OR C,\n     AND DISPLAYS ONLY THOSE RIB ENTRIES WHOSE WAIT COUNT FOR SHARED\n     OR EXCLUSIVE CONTROL OF A RESOURCE IS GREATER THAN ONE.\n\n   GLOBOL -\n     THE GLOBAL SUBCOMMAND IS INVOKED BY ENTERING GLOBAL OR G,\n     AND DISPLAYS ALL OUTSTANDING MVS ENQUEUES.\n\n   FIND MAJOR MINOR JOB -\n     THE FIND COMMAND IS INVOKED BY ENTERING FIND OR F,\n     AND DISPLAYS ANY OUTSTANDING MVS ENQUEUES WHICH MATCH\n     THE SCAN CRITERIA ENTERED WITH THE FIND COMMAND.\n\n       MAJOR - IS THE MAJOR RESOURCE NAME TO BE FOUND.\n         THE COMPARISON IS PERFORMED ON AS MANY BYTES OF\n         MAJOR NAME AS ARE GIVEN IN THE FIND COMMAND.\n         A ''*'' MAY BE GIVEN WHICH MEANS TO FIND ALL\n         MAJOR NAMES.\n\n       MINOR - IS THE MINOR RESOURCE NAME TO BE FOUND.\n         THE COMPARISON IS PERFORMED ON AS MANY BYTES OF\n         MINOR NAME AS ARE GIVEN IN THE FIND COMMAND.\n         A ''*'' MAY BE GIVEN WHICH MEANS TO FIND ALL\n         MINOR NAMES.\n\n       JOB - IS THE JOB NAME TO BE FOUND.\n         THE COMPARISON IS PERFORMED ON AS MANY BYTES OF\n         JOB NAME AS ARE GIVEN IN THE FIND COMMAND.\n         A ''*'' MAY BE GIVEN WHICH MEANS TO FIND ALL\n         JOB NAMES.\n         NOTE THAT SOME RESOURCES, SUCH AS SYSIKJUA, ARE\n         NOT ASSOCIATED WITH A JOB AND THEREFORE CANNOT\n         BE FOUND VIA THE JOB SUBCOMMAND.\n\n     END -\n     THE END COMMAND TERMINATES THE ENQ PROGRAM.  MAY BE GIVEN AS\n     END OR E.\n\n     THE FORMAT OF THE ENQ DISPLAY IS AS FOLLOWS:\n\n1234 CJJJJJJJJ VVVVVV-UUU MMMMMMMM NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n\n     1 - THE SCOPE OF THE ENQ; X = SYSTEMS, Y = SYSTEM, J = STEP\n     2 - THE TYPE OF ENQ; E = EXCLUSIVE, S = SHARED\n     3 - THE STATUS OF THE ENQ; G = HAS RESOURCE, W = WAITING\n     4 - THE SYSTEM SCOPE OF ENQ; R = RESERVE\n\n     C - AN ASTERISK (*) INDICATES MUST COMPLETE STATUS\n\n     J - THE JOB NAME OF THE ENQING ADDRESS SPACE\n     V - THE VOLUME SERIAL ON THE RESERVED SPINDLE\n     U - THE UNIT ADDRESS OF THE RESERVED SPINDLE\n     M - THE MAJOR RESOURCE NAME\n     N - THE MINOR RESOURCE NAME (UP TO 256 BYTES)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPILOG": {"ttr": 3845, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    EPILOG &REG,&RC=,&RENT=,&SP=0,&SREG=13,&GPR=R,&LIST=\n.*\n.*       GLOBAL VARIABLES DESCRIPTION\n.*\n.*       &REGSNM   CHARACTER STRING THAT CONTAINS THE EQUATE NAME\n.*                    PREFIX FOR THE GENERAL REGISTERS (SEE &RN\n.*                    VALUE DESCRIPTION BELOW)\n.*\n         GBLC  &REGSNM\n         LCLA  &A\n         LCLC  &R,&RN,&T,&X\n*  EPILOG  MACRO -- ASSEMBLY EPILOG  01/14/78 MARK GOTO\n         AIF   ('&LIST' EQ 'YES').COMNT\n*           (CODE LIST=YES FOR FURTHER DESCRIPTION)\n*\n         AGO   .NOCOMNT\n.COMNT   ANOP\n*    &REG      REGISTER SPECIFICATION INDICATING WHICH REGISTERS\n*              ARE TO BE RESTORED\n*\n*        *NOTE* = THE REGS. NOS. MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n*    ,&RC=     RETURN CODE VALUE\n*                OR\n*    ,&RC=     RETURN CODE LOCATION\n*                OR\n*    ,&RC=     (REGISTER CONTAINING RETURN CODE)\n*\n*        OPERATION = LOAD RETURN CODE INTO REGISTER 15 AND PASS IT\n*                    TO CALLER UPON EXIT\n*\n*           LA 15,\"RETURN CODE VALUE\"\n*                OR\n*           L  15,\"RETURN CODE LOC.\"\n*                OR\n*           LR 15,\"REGISTER\"\n*\n*        *NOTE* = THE REGISTER MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n*    ,&RENT=   (DSECT ADDR LOC.  ,  DSECT SIZE)\n*                OR\n*    ,&RENT=   (DSECT ADDR REG.  ,  DSECT SIZE)\n*\n*        OPERATION = ISSUE FREEMAIN MACRO AS FOLLOWS:\n*\n*           L  1,\"DSECT ADDR LOC.\"\n*           FREEMAIN R,LV=\"DSECT SIZE\",A=(1)\n*                OR\n*           LR 1,\"DSECT ADDR REG.\"\n*           FREEMAIN R,LV=\"DSECT SIZE\",A=(1)\n*\n*        *NOTE* = THE DSECT REG. MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n*    ,&SP=     SUB-POOL NUMBER FOR RE-ENTRANT FREEMAIN\n*\n*        OPERATION = SPECIFY THE FREEMAIN SUB-POOL OPERAND:\n*\n*          FREEMAIN R,LV=...,SP=...\n*\n*        *NOTE* = THIS PARAMETER DEFAULTS TO \"SP=0\" (IE. SUB-POOL\n*                 NUMBER ZERO)\n*\n*\n*    ,&SREG=   SAVE REGISTER\n*\n*        OPERATION = GENERATE INSTRUCTIONS TO GET OLD SAVE ADDR:\n*\n*           L  13,4(&SREG)\n*\n*        *NOTE* = THE DSECT REG. MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n*    ,&GPR=    PREFIX FOR EQU NAMES OF THE GENERAL REGISTERS\n*\n*        OPERATION = SPECIFY PREFIX WHEN NO GLOBAL PREFIX EXISTS\n*\n*\n.NOCOMNT ANOP\n&RN      SETC  '&REGSNM'\n         AIF   ('&RN' NE '').RTYPE\n&RN      SETC  '&GPR'\n         AIF   ('&RN' NE '').RTYPE\n&RN      SETC  'R'\n.RTYPE   ANOP\n&T       SETC  'O'\n         AIF   ('&RC' EQ '').LABEL\n&T       SETC  'Z'\n         AIF   ('&RC' EQ '0').LABEL\n&T       SETC  'R'\n         AIF   ('&RC'(1,1) EQ '(').RCREG\n&T       SETC  'N'\n         AIF   (T'&RC EQ 'N').LABEL\n&T       SETC  'A'\n         AGO   .LABEL\n.RCREG   ANOP\n&R       SETC  '&RC'(2,K'&RC-2)\n         AIF   ('&R'(1,K'&RN) NE '&RN').LABEL\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)\n         AIF   ('&R' GE '0' AND '&R' LE '15').LABEL\n         AGO   .E3\n.LABEL   AIF   ('&NAME' EQ '').NOLABEL\n&NAME    DS    0H                           DEFINE LABEL FOR RETURN\n.NOLABEL AIF   ('&REG' EQ '').E1\n         AIF   ('&T' NE 'A').RENT\n         L     15,&RC                       LOAD RETURN CODE\n&T       SETC  'R'\n&R       SETC  '15'\n.RENT    AIF   (N'&RENT NE 2).REGS\n&X       SETC  '&RENT(1)'\n         AIF   ('&X'(1,1) NE '(').RENTA\n&X       SETC  '&X'(2,K'&X-2)\n         AGO   .RENTB\n.RENTA   AIF   ('&X'(1,K'&RN) NE '&RN').RENTB\n&X       SETC  '&X'(K'&RN+1,K'&X-K'&RN)\n         AIF   ('&X' GE '0' AND '&X' LE '15').RENTC\n.RENTB   ANOP\n&X       SETC  '13'\n.RENTC   AIF   ('&X' EQ '1').RENTD\n         LR    1,&X                         RESTORE DSECT ADDR\n.RENTD   AIF   (T'&SREG EQ 'O').RENTE\n         L     13,4(,&SREG)                 RESTORE OLD SAVE AREA ADDR\n.RENTE   AIF   ('&T' NE 'R').RENTF\n         ST    &R,16(,13)                   SAVE RETURN CODE\n.RENTF   ANOP\n         FREEMAIN R,LV=&RENT(2),A=(1),SP=&SP\n         AGO   .REGSB\n.REGS    AIF   (T'&SREG EQ 'O').REGSA\n         L     13,4(,&SREG)                 RESTORE OLD SAVE AREA ADDR\n.REGSA   AIF   ('&T' NE 'R').REGSB\n         ST    &R,16(,13)                   SAVE RETURN CODE\n.REGSB   ANOP\n&X       SETC  '&REG(1)'\n         AIF   (T'&REG(1) EQ 'N').REGSD\n         AIF   ('&X'(1,K'&RN) NE '&RN').REGSC\n&X       SETC  '&X'(K'&RN+1,K'&X-K'&RN)\n         AIF   ('&X' GE '0' AND '&X' LE '15').REGSD\n.REGSC   ANOP\n&X       SETC  '14'\n.REGSD   ANOP\n&A       SETA  &X*4+20\n         AIF   (&A LE 75).REGSE\n&A       SETA  &A-64\n.REGSE   AIF   (N'&REG NE 2).REGSF\n         LM    &RN.&X,&REG(2),&A.(&RN.13)   RESTORE REGISTERS\n         AGO   .RETC\n.REGSF   AIF   (N'&REG NE 1).E2\n         L     &RN.&X,&A.(,&RN.13)          RESTORE REGISTER\n.RETC    AIF   ('&T' NE 'R' OR '&R' EQ '15').RETCA\n         L     15,16(,13)                   PICK UP SAVED RETURN CODE\n         AGO   .MEND\n.RETCA   AIF   ('&T' NE 'N').RETCB\n         LA    15,&RC                       SET RETURN CODE\n         AGO   .MEND\n.RETCB   AIF   ('&T' NE 'Z').MEND\n         SLR   15,15                        SET RETURN CODE\n.MEND    BR    14                           RETURN\n         MEXIT\n.E1      IHBERMAC 18,360                   .REG PARAMETER MISSING\n         MEXIT\n.E2      IHBERMAC 36,360,&REG              .INVALID REGS. SPECIFIED\n         MEXIT\n.E3      IHBERMAC 61,360,&RC               .INVALID RC SPECIFIED\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELPLIST": {"ttr": 3849, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE '    H E L P L I S T   -   V E R S I O N   1 . 2   '\n************************************************************\n*                                                          *\n*              'HELPLIST' PROGRAM AT FPC                   *\n*                                                          *\n************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n*        PROGRAM. HELPLIST.\n*        AUTHOR. UNKNOWN - FROM TOM GEE.\n*        MODIFIOR. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. FEDERAL POWER COMMISSION.\n*        DATE-UPDATED IN SOURCE LIBRARY. JANUARY 8 1974.\n*        REMARKS.\n*            DATE ADDED TO HEADING.\n*            SUBCOMMAND NAMES PREFIXED WITH 'SUBCOMMAND - '.\n*            INDENTATION CHANGED. CHECK FOR )X SYNTAX ADDED.\n*            USER MACROS - EASYCOME,GEHEN,REGISTER\n*\n*        MODIFIOR. JERRY PITTENGER, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. OFFICE OF MANAGEMENT AND BUDGET (OMB).\n*        DATE-UPDATED IN SOURCE LIBRARY. AUGUST 17 1977.\n*        REMARKS:\n*            DATE REMOVED FROM HEADING. MULTIPLE HEADING LINES.\n*            CHANGE FROM )O OR )X OR )F HIGHLIGHTED BETTER.\n*            ALLOW NO ALIAS TO PRINT BY USING BLDL AGAINST\n*            THE SYSUT1 LIBRARY/LIBRARIES DIRECTORY. INSERTED\n*            SUBCOMMANDS ON SEPARATE PAGES WITH THE SUBCOMMAND\n*            NAME IN THE HEADER BLOCK.\n         EJECT\n*            CURRENT REGISTER USAGE:\n*\n*            R0 = SYSTEM PARM REG\n*            R1 = SYSTEM PARM REG\n*            R2 = PROGRAM PARM REG + WORK REG\n*            R3 = WORK REG\n*            R4 = RECORD LENGTH\n*            R5 = BLOCKSIZE\n*            R6 = SPARE\n*            R7 = SPARE\n*            R8 = OFFSET INTO MEMBER DSECT\n*            R9 = WORK REG\n*           R10 = ADDRESS OF 'LINE'\n*           R11 = I/O AREA BASE\n*           R12 = PROGRAM BASE\n*           R13 = SAVE AREA POINTER\n*           R14 = SYSTEM RETURN ADDR\n*           R15 = PROGRAM RETURN ADDR\n*\n*        NON-STANDARD MACROS USED: KOMMEN AND GEHEN\n*\n*        UPDATED, 04DEC84, WILLIAM SMITH, SYNTEX (USA), INC.\n*                 PALO ALTO, CALIFORNIA  94304\n*        REMARKS:\n*            ELIMINATED USE OF ALL NON-STANDARD MACRO CALLS - ALL CODE\n*            IS NOW IN-LINE\n*\n         EJECT\nHELPLIST CSECT\n         STM   14,12,12(13)\n         LR    12,15\n         USING HELPLIST,12\n         LA    11,SAVEEM\n         ST    13,4(11)\n         ST    11,8(13)\n         LR    13,11\n         L     2,0(,1)             REG 2 --> PARM\n         MVI   LINE-1,C' '\n         MVC   LINE,LINE-1\n         LA    R10,LINE                POINT R10 TO 'LINE'\n         MVI   HEAD-1,C' '\n         OPEN  (IN,,HELP,,OUT,OUTPUT)\n         TM    IN+48,X'10'             OPEN OK?\n         BO    PARMCHK                 YES....SYSIN SPECIFIED\n         BZ    OPENERR                 NO....CAN'T OPEN\nPARMCHK  CLI   1(2),0              PARM?\n         BE    NOPARM\n         LH    3,0(,2)             R3  =  LENGTH OF PARM\n         CLI   1(2),9              PARM LENGTH GREATER THAN 9?\n         BNH   *+8                 NO - BRANCH\n         LA    3,9                 YES - REDUCE TO 9\n         BCTR  3,0                 LENGTH MINUS 1 FOR EX\nNOPARM   EQU   *\n         LH    R0,HELP+62               BLOCKSIZE\n         GETMAIN R,LV=(0)\n         LR    R11,R1                   SAVE POINTER TO I/O AREA\nCNTRL    EQU   *\n         GET   IN,REC                   READ A CONTROL CARD\n         MVC   MEM1(8),REC              MOVE TO BLDL AREA\n         MVC   MEMNAME,REC              SAVE DESIRED MEMBER NAME\n         LA    R1,HELP                  POINT TO DCB FOR BLDL\n         LA    R0,LSTSTRT               POINT TO BLDL LIST\n         BLDL  (R1),(R0)                GO GET IT\n         B     *+4(R15)                 TEST RETURN CODE\n         B     MOVE                     GOOD MEMBER\n         B     BADONE                   ALIAS OR INVALID MEMBER\n         B     BLDLERR                  GO ISSUE ABEND..PERM I/O ERROR\nBADONE   EQU   *\n         MVC   MEM1+8(6),=X'000000000000' ZERO OUT BLDL TTR FIELD\n         B     CNTRL                    GO GET THE NEXT MEMBER\nMOVE     TM    MEM1+13,X'80'            IS IT AN ALIAS???\n         BO    INDICATE                 ALIAS GO INDICATE SO\n         OR    R7,R7                    ZERO OUT R7\n         OR    R6,R6                    ZERO OUT R6\n         LA    R6,8                     LOAD A CONSTANT\n         LA    R14,REC                  LOAD ADDRESS TO CHECK\n         LA    R6,0(R6,R14)             COMBINE THE TWO\nCOMPR    CLI   0(R6),X'40'              CHECK FOR A BLANK\n         BNE   COMPDONE                 IF NOT...FINISHED\n         CR    R6,R14                   FINISHED YET???\n         BE    COMPDONE                 YES\n         BCT   R6,COMPR                 DOWN 1 AND CHECK AGAIN\nCOMPDONE EQU   *                        R6 ALREADY -1 FOR EXECUTE\n         SR    R6,R14                   LEAVE THE NUMBER OF CHARS\n         STC   R6,MEMLEN                SAVE MEMBER LENGTH FOR EXEC\n         LA    R7,8                     LOAD A CONSTANT\n         LA    R6,1(R6)                 PUT R6 BACK UP\n         SR    R7,R6                    GET NUMBER OF BLANKS\n         STC   R7,OFFSET                OFFSET FOR CENTERING ON HDR\n         SRL   R7,1                     DIVIDE BY 2\n         STC   R7,MEMOFFST              SAVE FOR OFFSETTING\n         NI    OP,255-STILLSC           TELL EM NOT SUBCOMMAND ANYMORE\n         NI    OP,255-SCSAVED           SUBCOMMAND NOT SAVED ANY MORE\n         FIND  HELP,MEMNAME,D           FIND MEMBER\n         B     *+4(R15)                 TEST RETURN CODE\n         B     *+12                     GOOD RETURN\n         B     BADNAME                  INVALID NAME\n         B     IOERROR                  I/O ERROR\nRDSETUP  NI    OP,255-OPINDENT-OPCMDS   TURN OFF INDENTION & CMDS\n         CLC   MEMNAME,=CL8'COMMANDS'   COMMANDS?\n         BNE   *+8                      NO, ....\n         OI    OP,OPCMDS                YES, INDICATE SUCH\n         TM    OP,ALIAS                 ALIAS ALREADY CAUSED TOF???\n         BO    READEM                   YES, NO HEADER\n         ZAP   CTRLIN,=P'0'        FORCE HEADING\nREADEM   EQU   *\n          NI    OP,255-ALIAS             TURN OFF ALIAS FLAG\n         READ  DECB,SF,HELP,(R11),'S'\n         CHECK DECB\n         LH    R5,HELP+62               BLOCK SIZE\n         L     R1,DECB+16               A(IOB)\n         SH    R5,14(R1)                MINUS RESIDUAL CCW COUNT\n         BCTR  R5,0                     DOWN ONE\n         LR    R3,R11                   REC START\n         LA    R4,80                    REC LENGTH\n         LA    R5,0(R3,R5)              REC END\nPROCESS  TM    OP,OPCMDS                CMDS?\n         BZ    PROCESSA                 NO, CONTINUE\n         MVC   LINEPL(72),0(R3)         YES, COPY IN RECORD\n         B     LISTER                   GO LIST IT\nPROCESSA CLC   0(2,R3),=C')F'           FUNCTION\n         BE    MAJOR\n         CLC   0(2,R3),=C')S'           SUBCOMMANDS\n         BE    MAJOR\n         CLC   0(2,R3),=C')X'           SYNTAX\n         BE    MAJOR\n         CLC   0(2,R3),=C')O'           OPERANDS\n         BE    INDENT\n         CLI   0(R3),C'='               SUB COMMAND\n         BNE   CHEKOP                   NO\n         OI    OP,SUBCOMD               TELL EM SUBCOMD\n         NI    OP,255-SCSAVED           TELL EM NEW SUBCOMMAND\n         NI    OP,255-STILLSC           NOT CONTINUED SUBCMD\n         B     SUBCMD                   GO SEPARATE\nCHEKOP   CLC   0(2,R3),=C'))'           YES - OPERAND?\n         BE    NOTDUMB                  YES - BRANCH\n         CLC   0(2,R3),=C'  '           NO, CHECK FOR LACK OF NEATNESS\n         BE    NOTDUMB                  VERY GOOD - BRANCH\n         MVC   LINEIND(72),0(R3)  SOME DUMMY DIDN'T LEAVE 1ST 2 BLANK\n         B     LISTER\nNOTDUMB  MVC   LINEIND(70),2(R3)        YES, SET LINE WITH INDENTION\n         B     LISTER\nNORMAL   TM    OP,MAJ                   MAJOR SEPARATION???\n         BNO   LISTER1                  NO....LIST IT\n         MVC   LINEMAJ(70),2(R3)        MOVE IN DATA\n         MVC   3(3,R10),=C'***'          INSERT HIGHLIGHTER\n         MVC   18(3,R10),=C'***'         INSERT HIGHLIGHTER\n         NI    OP,255-MAJ               TURN OFF SWITCH\n         B     LISTER\nLISTER1  MVC   LINEPL(70),2(R3)\nLISTER   CP    CTRLIN,CTRMAX\n         BNH   *+10\n         ZAP   CTRLIN,=P'0'\n         TM    OP,CMDSEP                NEED COMMAND NAME???\n         BO    HEADALI                  YES...GO DO IT\n         CP    CTRLIN,=P'0'\n         BE    HEADING1                 GO SEE IF STILL SUBCOMMAND\nREPORTD  AP    CTRLIN,=P'1'\n         CLI   LINE,C'0'           DOUBLE SPACING?\n         BNE   *+10                NO - BRANCH AROUND AP\n         AP    CTRLIN,=P'1'\n         TM    OP,SUBCOMD                IS IT SUBCOMMANDS???\n         BNO   PUTIT                     NO....LIST ASIS\n         NI    OP,255-SUBCOMD            TURN OFF SWITCH\n         MVC   3(3,R10),=C'***'          INSERT HIGHLIGHTER\nPUTIT    PUT   OUT,LINE\n         MVC   LINE,LINE-1         CLEAR LINE\nBXLE     BXLE  R3,R4,PROCESS       SCAN ENTIRE BLOCK\n         B     READEM                   READ ANOTHER BLOCK\nHEADING1 TM    OP,STILLSC               IS IT STILL SUBCOMMAND????\n         BO    SUBCMD                   YES.....GO DO IT THAT WAY\nHEADING  MVC   HEAD,HEAD-1              CLEAR IT\n         NI    OP,255-STILLSC           NOT SUBCOMMAND ANYMORE\n         MVI   HEAD,C'1'                SET TO EJECT\n         MVC   HEAD+2(60),MRXID          TOP OF PAGE ID\n         PUT   OUT,HEAD                 WRITE IT\nHEADALI  AP    CTRLIN,=P'5'             1 EA. FOR HDR + HIGHLIGHTERS\n         NI    OP,255-CMDSEP            TURN OFF COMMAND PRINT SW\n* THE OTHERS ARE ALREADY TAKEN INTO ACCOUNT\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         MVC   HEAD+35(10),=C'----------' COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVI   HEAD,C' '                SET TO SINGLE SPACE\n         MVC   HEAD+35(10),=C'          ' BLANK OUT HEADER\n         OR    R6,R6                    ZERO OUT R6\n         IC    R6,MEMOFFST              GET THE OFFSET FOR MOVE\n         LA    R7,HEAD+36               PICK UP MOVE LOCATION\n         LA    R7,0(R7,R6)              LOAD R7 W/LOCATION + OFFSET\n         IC    R6,MEMLEN                PICK UP LENGTH TO MOVE\nMOVEMEM  MVC   0(0,R7),MEMNAME          EXECUTED BELOW\n         EX    R6,*-6                   MOVE IN THE MEMBER NAME\n         PUT   OUT,HEAD                 PUT OUT CENTERED NAME\n         MVC   HEAD+35(10),=C'----------' COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVC   HEAD,HEAD-1              BLANK OUT HEAD\n         MVI   HEAD,C'-'                SET TO TRIPLE SPACE\n         PUT   OUT,HEAD                 WRITE BLANK HEADS\n         B     REPORTD\nMAJOR    NI    OP,255-OPINDENT          TURN OFF INDENTION\n         MVI   CC,C'0'                  DOUBLE SPACE\n         OI    OP,MAJ                   TURN ON SWITCH\n         B     NORMAL\nSUBCMD   TM    OP,STILLSC               IS IT STILL SUBCOMMAND???\n         BO    SUBCMD1                  YES, LONG MEMBER\n         CP    CTRLIN,=P'05'            ENOUGH ROOM FOR NEW ONE??\n         BL    ADD5                     YES, GO GETEM\nSUBCMD1  MVC   HEAD,HEAD-1              CLEAR IT\nNEWPG    ZAP   CTRLIN,=P'0'             REINITIALIZE LINE COUNT\n         MVI   HEAD,C'1'                SET TO EJECT\n         MVC   HEAD+2(59),MRXID          TOP OF PAGE ID\n         PUT   OUT,HEAD                 WRITE IT\nADD5     AP    CTRLIN,=P'5'             1 EA. FOR HDR + HIGHLIGHTERS\n* THE OTHERS ARE ALREADY TAKEN INTO ACCOUNT\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         MVC   HEAD+27(27),DASHES       COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVC   HEAD,HEAD-1              CLEAR THE DASHES\n         MVI   HEAD,C' '                SET TO SINGLE SPACE\n         OR    R6,R6                    CLEAR IT\n         MVI   HEAD+41,C'-'             PUT IN THE SEPARATOR\n         LA    R7,HEAD+28               PICK UP LOCATION\n         IC    R6,OFFSET                PICK UP THE OFFSET\n         LA    R7,0(R6,R7)              POINT R7 TO LOCATION + OFFSET\n         IC    R6,MEMLEN                PICK UP LENGTH TO MOVE\nMEMMVC   MVC   0(0,R7),MEMNAME          EXECUTED BELOW\n         EX    R6,*-6                   MOVE IN MEMNAME\n* PRESUPPOSES THAT SUBCOMMAND HAS AN '=' SIGN IN FRONT OF IT\n         TM    OP,SCSAVED               HAS SUBCOMMAND BEEN SAVED???\n         BNO   R3MOVE                   IF NOT GET OFF OF R3\n         MVC   HEAD+44(8),SCSAVE        HAS BEEN SAVED....GET IT\n         B     DONEMOVE                 GO AROUND R3 MOVE\nR3MOVE   MVC   HEAD+44(8),1(R3)         MOVE IN SUBCOMMAND NAME\n         MVC   SCSAVE(8),1(R3)          SAVE THE SUBCOMMAND NAME\n         OI    OP,SCSAVED               AND TURN ON THE FLAG\nDONEMOVE LA    R14,HEAD+44              SET UP FOR '=' CHECK\n         LA    R15,8                    LENGTH TO CHECK\nSUBCX    CLI   0(R14),C'='              IS IT AN '=' SIGN\n         BE    SUBCX1                   YES....GO BLANK IT\n         LA    R14,1(R14)               BUMP TO NEXT CHAR\n         BCT   R15,SUBCX                GO CHECK FURTHER\nSUBCX1   MVC   0(9,R14),=C'         '   MOVE IN BLANKS\n         PUT   OUT,HEAD                 WRITE IT\n         MVC   HEAD+27(27),DASHES       HIGHLIGHT IT\n         PUT   OUT,HEAD                 WRITE EM\n         MVC   HEAD,HEAD-1              BLANK IT\n         MVI   LINE,C'-'                SET FOR TRIPLE SPACE\n         OI    OP,STILLSC               SET SUBCOMMAND HEADER SWITCH\n         TM    OP,SUBCOMD               LONG MEMBER OR NEW SUBCOMMAND?\n         BNO   REPORTD                  LONG MEMBER...LINE PRESENT\n         NI    OP,255-SUBCOMD           TURN OFF THE SWITCH\n         B     BXLE                     GO GET SOME MORE\nINDENT   OI    OP,OPINDENT              TURN ON INDENTION\n         MVI   CC,C'0'                  DOUBLE SPACE\n         OI    OP,MAJ                   TURN ON SWITCH\n         B     NORMAL\nFINI     DS    0H\n         CLOSE (OUT,,HELP,,IN)\n         L     13,4(13)\n         LM    14,12,12(13)\n         SR    R15,R15\n         BR    R14\n         SPACE 2\nBADNAME  DS    0H\n         MVC   LINE+10(L'ENAME),ENAME   INVALID MEMBER NAME\n         B     MSGOUT\nIOERROR  DS    0H\n         MVC   LINE+10(L'EIO),EIO       I/O ERROR\nMSGOUT   MVC   LINE+1(8),MEMNAME        PUT IN MEMBER NAME\n         MVI   CC,C'1'                  EJECT A PAGE\n         PUT   OUT,LINE                 PRINT ERROR MSG\n         MVC   LINE,LINE-1              CLEAR OUT LINE\n         B     CNTRL\nINDICATE EQU   *                        ALIAS PROCESSING\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         TM    OP,ALIAS                 BEEN HERE BEFORE???\n         BNO   INDIC1                   NO, FORCE HEADING\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         B     INDIC2                   NO HEADING\nINDIC1   MVI   HEAD,C'1'                FORCE HEADING\n         NI    OP,255-STILLSC           NOT SUBCMD ANYMORE\n         MVC   HEAD+2(59),MRXID         INSTALLATION CODE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         ZAP   CTRLIN,=P'0'             RESET LINE COUNT\n         AP    CTRLIN,=P'1'\nINDIC2   MVC   HEAD+27(27),DASHES       HIGHLITE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C' '                SINGLE SPACE\n         MVC   HEAD+30(8),MEMNAME       MOVE IN MEMBER NAME\n         MVC   HEAD+38(12),=C' IS AN ALIAS'\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVC   HEAD+27(27),DASHES       HIGHLITE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C' '                SPACE\n         PUT   OUT,HEAD\n         AP    CTRLIN,=P'5'             MAKE LINECT CORRECT\n         OI    OP,ALIAS                 SAY WE HAVE BEEN HERE\n         OI    OP,CMDSEP                PRINT COMMAND NAME ALSO\n         B     CNTRL                    GO GET NEXT MEMBER\n         EJECT\n         DS    0D\nMEMNAME  DC    CL8'0'\nREC      DC    CL80'0'\n         DC    C'0'\nLINE     DS    0CL133\nCC       DC    CL1'0'\n         DC    CL132'0'\nLINEMAJ  EQU   LINE+6\nLINEPL   EQU   LINE+8\nLINEIND  EQU   LINEPL\n         DC    CL1'0'\nHEAD     DC    CL133'0'\nENAME    DC    C'- INVALID AS SPECIFIED'\nEIO      DC    C'- I/O ERROR OCCURRED WHILE LOCATING NAME'\nH9       DC    H'9'\nDASHES   DC    27C'-'       SUBCOMMAND HIGHLIGHTER\nMEMLEN   DC    B'0'\nOFFSET   DC    B'0'\nMEMOFFST DC    B'0'\nOP       DC    B'0'\nOPINDENT EQU   B'10000000'\nOPCMDS   EQU   B'01000000'\nSTILLSC  EQU   B'00100000'  SUBCOMMAND HEADER FLAG\nSCSAVED  EQU   B'00010000'  SUBCOMMAND HAS BEEN SAVED FLAG\nALIAS    EQU   B'00001000'  SPARE FLAG\nMAJ      EQU   B'00000100'  MAJOR SEPARATION\nSUBCOMD  EQU   B'00000010'  SUBCOMMAND SEPARATION\nCMDSEP   EQU   B'00000001'  PRINT COMMAND NAME FLAG\nSCSAVE   DC    D'0'         SUBCOMMAND SAVE AREA\nBLKADDR  DC    F'0'\nCTRMAX   DC    P'055'\nCTRLIN   DC    P'000'\n         SPACE\n         SPACE\n         PRINT NOGEN\n         LTORG\n         SPACE\n         DS    0D\nLSTSTRT  DC    X'0001000E'   TELL BLDL MAX NUMBER AND LENGTH\nMEM1     DC    2F'0'\nDUMMYFW  DC    F'0'\nDUMMYHW  DC    H'0'\nBLDLERR  ABEND 2222,DUMP     BLDL ERROR\nOPENERR  ABEND 1111,DUMP     CAN'T OPEN\nMRXID   DC C'                 SYNTEX  - TSO COMMAND LANGUAGE REFERENCE'\nSAVEEM   DC    18F'0'        SAVE AREA\nIN       DCB   DSORG=PS,MACRF=GM,EODAD=FINI,DDNAME=SYSIN\n         SPACE\nOUT      DCB DSORG=PS,MACRF=PM,RECFM=FA,BLKSIZE=133,DDNAME=SYSPRINT\n         SPACE\nHELP     DCB   DSORG=PO,MACRF=R,EODAD=CNTRL,DDNAME=SYSUT1\n         END\n*PCA  *  OBJ,LIST,NODECK,NOESD,NORLD\n*PLINK*  DCBS,LIST,XREF\n*1ALIA*\n*2ALIA*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDATMSTP": {"ttr": 4099, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MSTP       TITLE 'IDATMSTP - USER EXIT TO CONTROL DS DATESTAMPING'\n***********************************************************************\n*  /* START OF SPECIFICATIONS */                                      *\n*                                                                     *\n* MODULE NAME = IDATMSTP                                              *\n*                                                                     *\n* STATUS = DATA FACILITY/EXTENDED FUNCTIONS 5740-XYQ                  *\n*                                                                     *\n* AUTHOR = HOWARD M. DEAN                                             *\n*          SYNTEX USA                                                 *\n*          3401 HILLVIEW AVENUE                                       *\n*          PALO ALTO, CA 94303                                        *\n*                                                                     *\n* FUNCTION = PROVIDES A RETURN CODE TO IDA0192B TO CAUSE THAT MODULE  *\n*            TO UPDATE THE DS1REFDT FIELD OF THE FORMAT 1 DSCB FOR    *\n*            VSAM DATASETS.                                           *\n*                                                                     *\n* ENTRY POINTS = IDATMSTP                                             *\n*                                                                     *\n* EXIT NORMAL =  EXIT TO IDA0192B WITH A RETURN CODE IN               *\n*                REGISTER 15 AS FOLLOWS:                              *\n*                                                                     *\n*                R15 = 0       DO NOT DATE-STAMP THE DSCB             *\n*                R15 = 4       PROCEED WITH DATE-STAMP PROCESSING     *\n*                                                                     *\n* EXIT ERROR = SAME AS EXIT NORMAL                                    *\n*                                                                     *\n* RESTRICTIONS =                                                      *\n*   THIS ISTALLATION EXIT ROUTINE MUST CONFORM WITH THE               *\n*   FOLLOWING REQUIREMENTS:                                           *\n*                                                                     *\n*    (1) IT MUST NOT CHANGE THE DATASET NAME IN THE PARAMETER LIST    *\n*    (2) IT MUST BE REENTERABLE                                       *\n*    (3) IT MUST RETURN TO IDA0192B USING THE RETURN ADDRESS          *\n*        PROVIDED IN REGISTER 14 UPON ENTRY                           *\n*    (4) IT MUST RESTORE REGISTERS 2-12 WITH THEIR CONTENTS THE       *\n*        SAME AS UPON ENTRY                                           *\n*    (5) IT MUST RETURN WITH A CODE OF 0 OR 4 IN REGISTER 15          *\n*        (ANY OTHER VALUE IS NOT VALID AND WILL CAUSE                 *\n*         NO DATE-STAMPING TO BE PERFORMED)                           *\n*                                                                     *\n*        OPEN PROCESSING DEPENDS ON THE RETURN CODE PASSED FROM       *\n*        THIS EXIT MODULE. ANY EXTRANEOUS VALUE COULD CAUSE           *\n*        ERRORS IN VSAM OPEN PROCESSING.                              *\n*                                                                     *\n* REGISTER-CONVENTIONS =                                              *\n*                                                                     *\n*  REGISTER 0: UNPREDICTABLE                                          *\n*  REGISTER 1:                                                        *\n*   AT ENTRY TO THIS MODULE REGISTER 1 POINTS TO A PARAMETER          *\n*   LIST. THE PARAMETER LIST CONSISTS OF THREE FULLWORD               *\n*   ADDRESSES:                                                        *\n*                                                                     *\n*   WORD 1 - ADDRESS OF THE 44 BYTE DATASET NAME IN THE OPEN          *\n*            WORK AREA. NAME IS LEFT JUSTIFIED AND PADDED WITH        *\n*            BLANKS.                                                  *\n*   WORD 2 - ADDRESS OF THE VOLUME SERIAL NUMBER OF THE 1ST           *\n*            VOLUME, IN THE JFCB VOLUME LIST OF THE DATASET           *\n*            IN THE FIRST PARAMETER.                                  *\n*   WORD 3 - ADDRESS OF AN EBCDIC 'D' FOR DATA COMPONENT.             *\n*                                                                     *\n*  REGISTERS 2-12: UNPREDICTABLE                                      *\n*  REGISTER  13 ADDRESS OF AN 18 WORD SAVE AREA                       *\n*  REGISTER  14 RETURN ADDRESS                                        *\n*  REGISTER  15 ENTRY POINT OF IDATMSTP                               *\n*                                                                     *\n* ATTRIBUTES -  IDATMSTP IS REENTERABLE AND REFRESHABLE               *\n*                                                                     *\n* MACROS = SAVE, RETURN, GETMAIN, FREEMAIN                            *\n*                                                                     *\n* /* END OF SPECIFICATIONS */                                         *\n*                                                                     *\n* CHANGE ACTIVITY =                                                   *\n*                                                                     *\n*   INSTALLED = 05 FEB 1985     HOWARD M. DEAN                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nIDATMSTP CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nRET0     EQU   0                  RETURN CODE OF 0\nRET4     EQU   4                  RETURN CODE OF 4\n         SPACE 2\n         SAVE  (14,12),T,IDATMSTP_VERSION_&SYSDATE_&SYSTIME\n         BALR  R12,0              ESTABLISH BASE\n@PSTART  DS    0H\n         USING @PSTART,R12        ADDRESS THE CSECT\n         USING DSA,R13            ADDRESS THE DYNAMIC SAVE AREA\n         USING PARMLIST,R2\n         LR    R2,R1              SAVE PARAMETER REGISTER\n         GETMAIN R,LV=DSASIZE     GET DYNAMIC SAVE AREA\n         XC    0(72,R1),0(R1)     CLEAR SAVE AREA\n         ST    R13,4(,R1)         SAVE CALLERS REG 13\n         ST    R1,8(,R13)         SAVE  OUR SAVE AREA ADDRESS\n         LR    R13,R1             POINT TO OUR SAVE AREA\n         SPACE 2\n*--------------------------------------------------------------------*\n*  RETURN TO CALLER WITH RETURN CODE OF FOUR (4)                     *\n*--------------------------------------------------------------------*\n         SPACE 2\n         LA    R0,DSASIZE\n         LR    R1,R13\n         L     R13,DSASAVE+4\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R15,RET4\n         RETURN (14,12),T,RC=(15)\n         SPACE 2\nPARMLIST DSECT                    INPUT PARAMETER LIST\nDSNAME   DS    A                  ADDRESS OF 44 BYTE DSNAME\nVOLLIST  DS    A                  ADDRESS OF VOLUME LIST (JFCBVOLS)\nEBCDICD  DS    A                  ADDRESS OF EBCDIC 'D'\n         SPACE 2\nDSA      DSECT                    DYNAMIC SAVE AREA\nDSASAVE  DS    18F                REGISTER SAVE AREA\nDSASIZE  EQU   *-DSA              SIZE OF DYNAMIC AREA\n         SPACE 2\n         END   IDATMSTP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFF10": {"ttr": 4102, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n***********************************************************************\n***                                                                 ***\n***  JOB STATEMENT VERIFICATION - TSO SUBMIT EXIT IKJEFF10          ***\n***                                                                 ***\n***  DOCUMENTATION ON THE FOLLOWING SUBMIT EXIT CAN BE FOUND IN     ***\n***  IBM PUBLICATION \"RACF RELEASE 1.7 USAGE GUIDE\", INTERNATIONAL  ***\n***  TECHNICAL SUPPORT CENTERS, GG24-3069-0, P.63-70, AND APPENDIX  ***\n***  C, \"SAMPLE CODING\", PAGES 110-138.                             ***\n***                                                                 ***\n***  ==> THIS CODE HAS NOT BEEN SUBMITTED TO ANY FORMAL IBM TEST    ***\n***      AND IS DISTRIBUTED ON AN \"AS IS\" BASIS WITHOUT ANY         ***\n***      WARRANTY EITHER EXPRESS OR IMPLIED. THE IMPLEMENTATION     ***\n***      OF ANY OF THE TECHNIQUES DESCRIBED OR USED HEREIN IS A     ***\n***      CUSTOMER RESPONSIBILITY AND DEPENDS ON THE CUSTOMER'S      ***\n***      OPERATIONAL ENVIRONMENT. WHILE EACH ITEM MAY HAVE BEEN     ***\n***      REVIEWED FOR ACCURACY IN A SPECIFIC SITUATION AND MAY      ***\n***      RUN IN A SPECIFIC ENVIRONMENT, THERE IS NO GUARANTEE       ***\n***      THAT THE SAME OR SIMILAR RESULTS WILL BE OBTAINED ELSE-    ***\n***      WHERE. CUSTOMERS ATTEMPTING TO ADAPT THESE TECHNIQUES TO   ***\n***      THEIR OWN ENVIRONMENTS DO SO AT THEIR OWN RISK.            ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\n         MACRO\n&NAME    REGI  &BIT=YES,&FLOAT=NO\n         GBLA  &IEZBITS\n*\n***********************************************************************\n*                                                                     *\n*         REGISTER AND BIT EQUATES                                    *\n*                                                                     *\n*         REGI  BIT=NO     REGISTER EQUATES ONLY                      *\n*         REGI  FLOAT=YES  FLOATING POINT REGISTERS TOO               *\n*                                                                     *\n***********************************************************************\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         AIF   ('&FLOAT' NE 'YES').BITS\n*\nF0       EQU   0                   FLOATING POINT REGISTER 0\nF2       EQU   2                   FLOATING POINT REGISTER 2\nF4       EQU   4                   FLOATING POINT REGISTER 4\nF6       EQU   6                   FLOATING POINT REGISTER 6\n.BITS    ANOP\n         AIF   ('&BIT' NE 'YES').END\n         AIF   (&IEZBITS EQ 0).SETSW\n         MEXIT\n.SETSW   ANOP\n&IEZBITS SETA  1\n*\nBIT0     EQU   X'80'\nBIT1     EQU   X'40'\nBIT2     EQU   X'20'\nBIT3     EQU   X'10'\nBIT4     EQU   X'08'\nBIT5     EQU   X'04'\nBIT6     EQU   X'02'\nBIT7     EQU   X'01'\n.END     ANOP\n         MEND\nIKJEFF10 TITLE 'TSO SUBMIT COMMAND INSTALLATION EXIT'\n         PRINT OFF\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      CONDITIONAL ASSEMBLY CODE TO RESOLVE THE PARAMETERS IN     ***\n***      THE 'SYSPARM' STRING SPECIFIED IN THE // EXEC JCL STATE-   ***\n***      MENT. POSSIBLE PARAMETERS ARE:                             ***\n***                                                                 ***\n***      USRI=YES|NO,PSWP=YES|NO,NOTF=YES|NO                        ***\n***                                                                 ***\n***      DEFAULT:  USRI=NO,PSWP=NO,NOTF=YES                         ***\n***                                                                 ***\n***      MEANING:                                                   ***\n***                                                                 ***\n***      USRI=YES: INSERT SUBMITTER'S USERID AND PASSWORD (FROM     ***\n***                THE TSB) IF THE 'USER=' PARAMETER IS OMITTED     ***\n***                FROM THE JOBCARD. SHOULD BE SPECIFIED ONLY       ***\n***                IF JES SUPPORT FOR USERID AND PASSWORD           ***\n***                PROPAGATION IS NOT INSTALLED.                    ***\n***      USRI=NO : SUBMIT JOB WITHOUT USERID IF 'USER=' PARAMETER   ***\n***                OMITTED FROM JOBCARD. SHOULD BE SPECIFIED ON     ***\n***                SYSTEMS WITH JES2/3 VERSION 1.3.4 AND ABOVE      ***\n***                WITH USERID AND PASSWORD PROPAGATION             ***\n***                SUPPORT INSTALLED.                               ***\n***                DEFAULT: USRI=NO                                 ***\n***                                                                 ***\n***      PSWP=YES: ALWAYS PROMPT FOR A PASSWORD IF SUBMITTER'S      ***\n***                USERID AND THE 'USER=' PARAMETER ARE UNEQUAL,    ***\n***                EVEN IF A 'PASSWORD=' PARAMETER HAS BEEN SPE-    ***\n***                CIFIED IN THE JOBCARD. THIS IS FOR INSTALLATIONS ***\n***                WHO WANT TO DISCOURAGE THE USE OF PASSWORDS      ***\n***                IN THEIR USERS' JCL LIBRARIES.                   ***\n***      PSWP=NO : PROMPT FOR A PASSWORD ONLY IF A 'PASSWORD='      ***\n***                PARAMETER IS NOT IN THE JOBCARD.                 ***\n***                DEFAULT: PSWP=NO                                 ***\n***                                                                 ***\n***      NOTF=YES: INSERT 'NOTIFY=' PARAMETER IN JOBCARD IF OMITTED ***\n***      NOTF=NO : DON'T INSERT 'NOTIFY=' PARAMETER.                ***\n***                DEFAULT: NOTF=YES                                ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         LCLA  &L,&I,&J,&N,&COUNT,&LAST\n         LCLC  &USRIP,&PSWPP,&NOTFP,&MIST\n         LCLB  &HUSRI,&HPSWP,&HNOTF\n         LCLB  &USRI,&PSWP,&NOTF\n&HUSRI   SETB  0\n&HPSWP   SETB  0\n&HNOTF   SETB  0\n&USRI    SETB  0\n&PSWP    SETB  0\n&NOTF    SETB  1\n&COUNT   SETA  1\n&L       SETA  K'&SYSPARM          LENGTH OF SYSPARM STRING\n&LAST    SETA  &L                  POS. OF LAST CHAR. IN SYSPARM\n&I       SETA  1                   START OF PARAMETER TO BE CHECKED\n         AIF   (&L EQ 0).NOPARM    SYSPARM NOT SPECIFIED IN EXEC STMT.\n.CHKPSWP ANOP\n         AIF   (&HPSWP).CHKUSRI    'PSWP=' ALREADY FOUND, BYPASS\n         AIF   (&L LT 7).CHKUSRI   MUST BE AT LEAST 'PSWI=NO'\n         AIF   ('&SYSPARM'(&I,5) NE 'PSWP=').CHKUSRI\n&I       SETA  &I+5                INDEX TO PSWP PARAMETER VALUE\n&L       SETA  &L-5                REMAINING PARAMETER LENGTH\n&J       SETA  &I                  CHARACTER INDEX\n.LP1     AIF   (&L EQ 0).COM1      END OF SYSPARM STRING\n         AIF   ('&SYSPARM'(&J,1) EQ ',').COM1  DELIM. FOUND\n&J       SETA  &J+1                BUMP CHARACTER INDEX\n         AIF   (&J GT &LAST).COM1  AT END OF STRING, BRANCH\n         AIF   (&J-&I LE 3).LP1    LOOP IF WITHIN LENGTH LIMIT\n.PSWPERR MNOTE 8,'INVALID SPECIFICATION FOR ''PSWP'' PARAMETER'\n         AGO   .END\n.COM1    ANOP\n&N       SETA  &J-&I               LENGTH OF PARAMETER\n&PSWPP   SETC  '&SYSPARM'(&I,&N)   VALUE OF 'PSWP='\n         AIF   ('&PSWPP' EQ 'NO').PSWPOK 'NO' IS DEFAULT\n         AIF   ('&PSWPP' NE 'YES').PSWPERR ANYTHING BUT 'YES'\n&PSWP    SETB  1                   SET PSWP TO YES\n.PSWPOK  ANOP\n&HPSWP   SETB  1                   INDICATE PARAMETER PRESENT\n         AIF   (&J GT &LAST).NOPARM END OF STRING, BRANCH\n&N       SETA  &N+1                ADD ONE FOR THE COMMA\n&L       SETA  &L-&N               REMAINING PARAMETER LENGTH\n&I       SETA  &I+&N               BUMP OVER PARAM. AND COMMA\n         AIF   (&L EQ 0).NOPARM    SYSPARM NOT SPECIFIED IN EXEC STMT.\n.CHKUSRI ANOP\n         AIF   (&HUSRI).CHKNOTF    'USRI=' ALREADY FOUND, BYPASS\n         AIF   (&L LT 7).CHKNOTF   MUST BE AT LEAST 'USRI=NO'\n         AIF   ('&SYSPARM'(&I,5) NE 'USRI=').CHKNOTF\n&I       SETA  &I+5                INDEX TO USRI PARAMETER VALUE\n&L       SETA  &L-5                REMAINING PARAMETER LENGTH\n&J       SETA  &I                  CHARACTER INDEX\n.LP2     AIF   (&L EQ 0).COM2      END OF SYSPARM STRING\n         AIF   ('&SYSPARM'(&J,1) EQ ',').COM2  DELIM. FOUND\n&J       SETA  &J+1                BUMP CHARACTER INDEX\n         AIF   (&J GT &LAST).COM2  AT END OF STRING, BRANCH\n         AIF   (&J-&I LE 3).LP2    LOOP IF WITHIN LENGTH LIMIT\n.USRIERR MNOTE 8,'INVALID SPECIFICATION FOR ''USRI'' PARAMETER'\n         AGO   .END\n.COM2    ANOP\n&N       SETA  &J-&I               LENGTH OF PARAMETER\n&USRIP   SETC  '&SYSPARM'(&I,&N)   VALUE OF 'USRI='\n         AIF   ('&USRIP' EQ 'NO').USRIOK 'NO' IS DEFAULT\n         AIF   ('&USRIP' NE 'YES').USRIERR ANYTHING BUT 'YES'\n&USRI    SETB  1                   SET USRI TO YES\n.USRIOK  ANOP\n&HUSRI   SETB  1                   INDICATE PARAMETER PRESENT\n         AIF   (&J GT &LAST).NOPARM END OF STRING, BRANCH\n&N       SETA  &N+1                ADD ONE FOR THE COMMA\n&L       SETA  &L-&N               REMAINING PARAMETER LENGTH\n&I       SETA  &I+&N               BUMP OVER PARAM. AND COMMA\n         AIF   (&L EQ 0).NOPARM    SYSPARM NOT SPECIFIED\n.CHKNOTF ANOP\n         AIF   (&HNOTF).CHKNXT     'NOTF=' ALREADY FOUND, BYPASS\n         AIF   (&L LT 7).CHKNXT    MUST BE AT LEAST 'NOTF=NO'\n         AIF   ('&SYSPARM'(&I,5) NE 'NOTF=').CHKNXT\n&I       SETA  &I+5                INDEX TO NOTF PARAMETER VALUE\n&L       SETA  &L-5                REMAINING PARAMETER LENGTH\n&J       SETA  &I                  CHARACTER INDEX\n.LP3     AIF   (&L EQ 0).COM3      END OF SYSPARM STRING\n         AIF   ('&SYSPARM'(&J,1) EQ ',').COM3  DELIMITER FOUND, BRANCH\n&J       SETA  &J+1                BUMP CHARACTER INDEX\n         AIF   (&J GT &LAST).COM3  AT END OF STRING, BRANCH\n         AIF   (&J-&I LE 3).LP3    LOOP IF WITHIN LENGTH LIMIT\n.NOTFERR MNOTE 8,'INVALID SPECIFICATION FOR ''NOTF'' PARAMETER'\n         AGO   .END\n.COM3    ANOP\n&N       SETA  &J-&I               LENGTH OF PARAMETER\n&NOTFP   SETC  '&SYSPARM'(&I,&N)   VALUE OF 'NOTF='\n         AIF   ('&NOTFP' EQ 'YES').NOTFOK 'YES' IS DEFAULT\n         AIF   ('&NOTFP' NE 'NO').NOTFERR ANYTHING BUT 'NO'\n&NOTF    SETB  0                   SET NOTF TO NO\n.NOTFOK  ANOP\n&HNOTF   SETB  1                   INDICATE PARAMETER PRESENT\n         AIF   (&J GT &LAST).NOPARM END OF STRING, BRANCH\n&N       SETA  &N+1                ADD ONE FOR THE COMMA\n&L       SETA  &L-&N               REMAINING PARAMETER LENGTH\n&I       SETA  &I+&N               BUMP OVER PARAM. AND COMMA\n.CHKNXT  ANOP\n         AIF   (&COUNT GT 3).ERR   MORE THAN 3 TIMES THROUGH ?\n&COUNT   SETA  &COUNT+1            ADD 1 TO LOOP COUNT\n         AGO   .CHKPSWP            ONCE MORE THROUGH THE LOOP\n.ERR     ANOP\n&N       SETA  &LAST-&I+1          REMAINDER OF SYSPARM STRING\n&MIST    SETC  '&SYSPARM'(&I,&N)\n         MNOTE 12,'INVALID ''SYSPARM'' SPECIFICATION ''&MIST'''\n         AGO   .END\n.NOPARM  ANOP\n         EJECT\n         PRINT ON\nIKJEFF10 CSECT ,\nIKJEFF10 AMODE 24\nIKJEFF10 RMODE 24\n         SPACE 5\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      INSTALLATION EXIT FOR THE 'SUBMIT' COMMAND PROCESSOR.      ***\n***                                                                 ***\n***      THIS INSTALLATION-WRITTEN EXIT ROUTINE CHECKS THE JOB      ***\n***      CARDS OF JOBS BEING SUBMITTED VIA THE 'SUBMIT' COMMAND     ***\n***      PROCESSOR OR THE EDIT SUBCOMMAND PROCESSOR.                ***\n***                                                                 ***\n***      THE ROUTINE CHECKS THE PARAMETERS 'USER=' AND              ***\n***      'PASSWORD=' IN THE JOBCARD.                                ***\n***      FOLLOWING ACTIONS ARE TAKEN:                               ***\n***                                                                 ***\n***      1. IF THE PARAMETER 'USER=' IS PRESENT, THE PARAMETER      ***\n***         'PASSWORD=' IS OMITTED, HOWEVER, THE TERMINAL USER      ***\n***         IS PROMPTED FOR THE PASSWORD, UNLESS THE USERID IS      ***\n***         THAT OF THE USER'S SESSION.                             ***\n***                                                                 ***\n***         THE PARAMETER 'PASSWORD=' IS GENERATED AND INSERTED     ***\n***         IN THE JOBCARD.                                         ***\n***                                                                 ***\n***         IF A 'NEW PASSWORD' IS ALSO GIVEN, IT IS INSERTED       ***\n***         IN THE 'PASSWORD='-PARAMETER. IN THAT CASE, THE         ***\n***         PASSWORD IS NOT REMEMBERED FOR FOLLOWING JOBS.          ***\n***                                                                 ***\n***      2. IF THE PARAMETER 'USER=' IS OMITTED, TWO ALTERNATIVE    ***\n***         ACTIONS CAN BE TAKEN DEPENDING ON THE SETTING OF        ***\n***         'SYSPARM' WHEN THE MODULE WAS ASSEMBLED:                ***\n***         A) THE TSO USER'S USERID IS INSERTED (USRI=YES)         ***\n***            THE PASSWORD FROM THE TSB IS ALSO INSERTED IN        ***\n***            THE 'PASSWORD=' PARAMETER.                           ***\n***         B) NO 'USER=' AND 'PASSWORD=' PARAMETERS ARE            ***\n***            CREATED (USRI=NO)                                    ***\n***                                                                 ***\n***      3. DEPENDING ON THE SETTING OF THE PARAMETER 'NOTF='       ***\n***         IN THE 'SYSPARM' STRING AT ASSEMBLY TIME, THE           ***\n***         'NOTIFY=' PARAMETER IS HANDLED:                         ***\n***                                                                 ***\n***         A) A 'NOTIFY=' PARAMETER FOR THE SUBMITTING USER'S      ***\n***            USERID IS INSERTED IN THE JOBCARD (NOTF=YES)         ***\n***         B) NO 'NOTIFY=' PARAMETER IS CREATED, BUT AN EXISTING   ***\n***            ONE IS LEFT UNTOUCHED (NOTF=NO)                      ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\n         SPACE 5\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      4. THE WAY THE PARAMETER 'PASSWORD=' IN JOBCARDS IS        ***\n***         TREATED IS ALSO DEPENDENT ON THE  SETTING OF 'SYSPARM': ***\n***                                                                 ***\n***         A) IF 'PSWP=YES', THE PASSWORD IN 'PASSWORD=' IS        ***\n***            CLEARED AND THE USER IS PROMPTED FOR THE PASSWORD.   ***\n***         B) IF 'PSWP=NO', A 'PASSWORD=' PARAMETER IN A JOBCARD   ***\n***            IS ACCEPTED AND THE USER IS PROMPTED ONLY IF THIS    ***\n***            PARAMETER IS OMITTED AND THE USERID SPECIFIED IN     ***\n***            THE PARAMETER 'USER=' IS NOT EQUAL TO THE            ***\n***            SUBMITTER'S USERID.                                  ***\n***         C) IF 'PSWI=YES', A 'PASSWORD=' PARAMETER WITH THE      ***\n***            MITTER'S PASSWORD IS INSERTED, IF NOT SPECIFIED      ***\n***            BY THE USER.                                         ***\n***                                                                 ***\n***      OTHER PARAMETERS OF THE JOBCARD AND/OR OTHER JCL           ***\n***      STATEMENTS CAN BE HANDLED BY INSERTING APPROPRIATE CODE    ***\n***      AT LOCATIONS IN THE CODE THAT ARE IDENTIFIED BY COMMENTS.  ***\n***                                                                 ***\n***      IF CODE IS ADDED TO THIS EXIT ROUTINE, THE FOLLOWING       ***\n***      SHOULD BE OBSERVED:                                        ***\n***                                                                 ***\n***      WHEN THE EXIT IS REENTERED FROM THE SUBMIT COMMAND,        ***\n***      THE CODE AT THE BEGINNING OF THE EXIT ROUTINE WILL         ***\n***      RESTORE THE CONTENTS OF REGISTERS 9 (EXIT PARAMETER        ***\n***      LIST) AND 10 (WORK AREA) AND WILL INITIALIZE REG. 7 TO     ***\n***      THE START OF THE PARAMETER BUFFER. THE CONTENTS OF ALL     ***\n***      OTHER REGISTERS, IF NEEDED, HAS TO BE SAVED IN THE         ***\n***      EXIT'S WORK AREA (SUBWORK).                                ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\n         SPACE 5\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      REGISTERS ON ENTRY:                                        ***\n***      R1    ADDR. OF POINTER TO PARAMETER LIST                   ***\n***            (MAPPED BY MACRO INSTR. 'IKJEFFIE')                  ***\n***      R7    ADDR. OF SUBMIT'S INTERNAL CONTROL TABLE IKJEFFCT    ***\n***                                                                 ***\n***      EXIT:                                                      ***\n***      R15   0 - PROCESS CURRENT STATEMENT AND READ THE NEXT      ***\n***            4 - REINVOKE EXIT ROUTINE FOR INSERTION OF A         ***\n***                NEW STATEMENT.                                   ***\n***            8 - DISPLAY MESSAGE GENERATED BY EXIT ROUTINE        ***\n***                (MSG. ID IKJ56283I) AND REINVOKE EXIT            ***\n***           12 - DISPLAY PROMPTING MESSAGE GENERATED BY EXIT      ***\n***                ROUTINE (MSG. ID IKJ56280A), OBTAIN RESPONSE,    ***\n***                AND REINVOKE EXIT ROUTINE.                       ***\n***           16 - TERMINATE THE SUBMIT COMMAND                     ***\n***                                                                 ***\n***      REGISTER USAGE:                                            ***\n***      R13   SAVE AREA                                            ***\n***      R12   PROGRAM BASE                                         ***\n***      R10   ADDR. OF WORK AREA  (SUBWORK)                        ***\n***      R9    ADDR. OF EXIT PARAMETER LIST (IEEXITL)               ***\n***      R8    ADDR. OF CONTROL SWITCHES (IESUBCTP)                 ***\n***      R7    ADDR. OF PARAMETER BUFFER (PARMENT)                  ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\n         CVT   DSECT=YES\n         EJECT\n         IHAASCB\n         EJECT\n         IKJEFFIE IETYPE=SUBMIT\n         EJECT\n         IEZJSCB\n         EJECT\n         IKJPPL\n         EJECT\n         IKJTCB\n         EJECT\n         IKJTSB\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PARAMETER LIST ENTRY                                         *\n*                                                                     *\n***********************************************************************\n*\nPARMENT  DSECT\nPARMLNG  DS    H                   LENGTH OF PARAMETER\nPARMTYP  DS    H                   TYPE OF PARAMETER\nPARMTPAR EQU   X'80'               PARAMETER HAS PARENTHESES\nPARMTSUB EQU   X'40'               PARAMETER HAS SUBPARAMETERS\nPARMTXT  DS    CL144               PARAMETER\nPARMNXT  DS    0H\nPARMELNG EQU   *-PARMLNG           LENGTH OF PARAMETER ENTRY\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        WORK AREA FOR THE SUBMIT INSTALLATION EXIT IKJEFF10          *\n*                                                                     *\n***********************************************************************\n*\nSUBWORK  DSECT\nSUBACR   DC    CL8'SUBWORK'        ACRONYM\nSUBSAV   DS    18F                 SAVE AREA\nSUBCLSAV DS    4F                  SAVE AREA FOR CLRPARM SUBROUTINE\nSUBJOBN  DS    CL8                 JOB NAME\nSUBUSID  DS    CL8                 USERID\nSUBPSWD  DS    CL8                 PASSWORD\nSUBNPSWD DS    CL8                 NEW PASSWORD\nSUBPBUF  DS    A                   ADDR. OF PARAMETER BUFFER\nSUBPARM  DS    A                   ADDR. OF NEXT FREE PARAM. ENTRY\nSUBCURP  DS    A                   ADDR. OF CURRENT PARAM. ENTRY\nSUBPROC  DS    A                   ADDR. OF PROCESSING ROUT. (RC=8/12)\nSUBPPL   DS    A                   ADDR. OF SUBMIT'S PARSE PARAM. LIST\nSUBANS   DS    A                   ADDR. OF ANSWER PLACE FROM PARSE\nSUBINSRT DS    A                   INSERTION POINT IN PARAMETER TEXT\nSUBPARCT DS    F                   COUNT OF OPEN LEFT PARENTHESES\n*\nSUBCLNG  DS    H                   LENGTH OF JCL (FOR MESSAGE)\nSUBCARD  DS    CL80                JCL STATEMENT\nSUBOPST  DS    H                   START OF OPERAND IN FIRST CARD\nSUBMSGL  DS    H                   LENGTH OF MESSAGE\nSUBMSG   DS    CL80                MESSAGE AREA FOR CHANGEABLE MSGS.\n*\nSUBUSLN  DS    H                   LENGTH OF USERID - 1\nSUBPWLN  DS    H                   LENGTH OF PASSWORD - 1\nSUBNPWLN DS    H                   LENGTH OF NEW PASSWORD - 1\nSUBWKLN  DS    H                   LENGTH OF SAVED PARAMETER TEXT\nSUBWKSP  DS    CL144               SAVED PARAMETER TEXT\n*\nSUBFLG1  DS    X                   FLAG BYTE\nSUBJBCMP EQU   X'80'               JOB CARD PROCESSED\nSUBCHNG  EQU   X'40'               STATEMENT IS CHANGED\nSUB1SHOT EQU   X'20'               CONTROL STMT. IS ONLY 1 CARD\nSUBLAST  EQU   X'10'               LAST CARD OF STATEMENT\n*\nSUBCDFLG DS    X                   CARD PROCESSING FLAG BYTE\nSUBOPCNT EQU   X'80'               OPERAND CONTINUED ON NEXT CARD\nSUBCONT  EQU   X'20'               STATEMENT IS TO BE CONTINUED\n         DS    0D\nSUBLNG   EQU   *-SUBWORK           LENGTH OF WORK AREA\n         EJECT\n         REGI  BIT=YES\n         EJECT\nIKJEFF10 CSECT\n         SAVE  (14,12),,IKJEFF10.V03L00.&SYSDATE\n         LR    R12,R15\n         USING IKJEFF10,R12        PROGRAM BASE\n         USING SUBWORK,R10         BASE FOR WORK AREA\n         L     R9,0(R1)            GET ADDR. OF PARAMETER LIST\n         USING IEEXITL,R9          BASE FOR EXIT PARAMETER LIST\n*\n***********************************************************************\n*                                                                     *\n*        GET STORAGE FOR WORK AREA AND PARAMETER BUFFER               *\n*        IF FIRST ENTRY TO SUBMIT EXIT ROUTINE                        *\n*                                                                     *\n***********************************************************************\n*\n         ICM   R10,15,IEEXITWD     GET PTR. TO EXIT'S WORKAREA\n         BNZ   GOTWORK             -NOT ZERO, AREA IS PRESENT\n         GETMAIN RU,                                                   *\n               LV=SUBLNG,SP=229    GET STORAGE FOR WORKAREA\n         LR    R10,R1              ADDR. OF WORK AREA\n         ST    R10,IEEXITWD        SAVE ADDR. IN PARAMETER LIST\n         LR    R0,R1               ADDR. OF AREA\n         LA    R1,SUBLNG           LENGTH OF AREA\n         LM    R14,R15,ZEROES\n         MVCL  R0,R14              CLEAR WORKAREA\n         MVC   SUBACR,=CL8'SUBWORK'  ACRONYM TO WORKAREA\n*\n***********************************************************************\n*                                                                     *\n*        SAVE ADDR. OF SUBMIT'S PARSE PARAMETER LIST IN THE           *\n*        WORKAREA. THE PTR. TO THE PPL IS IN IKJEFFCT,                *\n*        SUBMIT'S INTERNAL CONTROL TABLE. IKJEFF10'S CALLER           *\n*        (IKJEFF09) USES REG. 7 AS BASE FOR IKJEFFCT.                 *\n*                                                                     *\n*        NOTE: THIS CODE HAS A DEPENDENCY ON THE FORMAT OF THE        *\n*              INTERNAL CONTROL TABLE IKJEFFCT. IN CASE OF PROBLEMS,  *\n*              CHECK MICROFICHE OF MODULE IKJEFF09.                   *\n*                                                                     *\n***********************************************************************\n*\n         L     R1,40(,R7)          GET ADDR. OF PPL\n         ST    R1,SUBPPL           STORE IN WORKAREA\n*\nGETBUFR  DS    0H\n         GETMAIN RU,                                                   *\n               LV=4096,SP=229      GET A PAGE\n         LR    R7,R1               ADDR. OF PARAMETER BUFFER\n         USING PARMENT,R7          BASE FOR PARAMETER ENTRY\n         MVC   0(8,R7),=CL8'PARMBUF' MOVE ACRONYM TO BUFFER\n         LA    R7,8(,R7)           BUMP OVER ACRONYM\n         ST    R7,SUBPBUF          STORE ADDR. IN WORK AREA\n         ST    R7,SUBPARM          ADDR. OF FREE PARAM. ENTRY\nGOTWORK  DS    0H\n         ST    R13,SUBSAV+4        BACKWARD PTR.\n         LR    R15,R13             SAVE OLD SAVE AREA ADDR.\n         LA    R13,SUBSAV\n         ST    R13,8(R15)          FORWARD PTR.\n         L     R7,SUBPBUF          ADDR. OF PARAMETER BUFFER\n*\n***********************************************************************\n*                                                                     *\n*        DETERMINE CONDITION UNDER WHICH EXIT IS CALLED               *\n*                                                                     *\n***********************************************************************\n*\n         CLC   IEMSGP,ZEROES       MESSAGE ISSUED OR PROMPT ?\n         BNZ   RET8OR12            -YES, BRANCH\n         L     R8,IESUBCTP         ADDR. OF CONTROL SWITCHES\n         USING IESUBCTD,R8         BASE FOR JCL CONTROL INFORMATION\n         TM    IESTMTYP,IESJOB     JOB STATEMENT ?\n         BO    JOBSTMT             -YES, BRANCH\n*\n* IF THE EXIT SHOULD BE CALLED FOR OTHER JCL THAN JOB STATEMENTS,\n* THE APPROPRIATE FLAGS MUST BE TESTED AND ROUTINES BRANCHED TO.\n* BUT DON'T FORGET TO SET THE FLAGS IN 'IETAKEEX' ON FIRST ENTRY\n*\n         SR    R15,R15             RETURN CODE IS ZERO\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER, RETURN CODE IN REGISTER 15                 *\n*                                                                     *\n***********************************************************************\n*\nGOBACK   DS    0H\n         L     R13,4(R13)          RELOAD SAVE AREA ADDR.\n         RETURN (14,12),RC=(15)    BACK TO CALLER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PROCESSING ROUTINE FOR JOB STATEMENTS                        *\n*                                                                     *\n***********************************************************************\n*\nJOBSTMT  DS    0H\n         ICM   R1,15,IECARDP       GET ADDR. OF JCL STMT.\n         BZ    CONTINUE            -ZERO, GENERATE CONTINUATION\n         TM    IESTMTYP,IESCONTN   IS THIS FIRST STATEMENT ?\n         BO    JOBNFST             -NO, BRANCH\n         MVI   SUBCDFLG,0          CLEAR CARD PROCESSING FLAGS\n         MVI   SUBFLG1,0           CLEAR FLAGS\n         ST    R7,SUBPARM          CLEAR PTR. TO FREE PARM. ENTRY\n         BAL   R14,CLRPARM         CLEAR PARAMETER BUFFER\n         SR    R0,R0\n         IC    R0,IEOPRAND         GET START OF OPERAND FIELD\n         BCTR  R0,0                MINUS 1 IS OFFSET\n         STH   R0,SUBOPST          SAVE START OF OPERAND FIELD\nJOBNFST  DS    0H\n         CLI   2(R1),C'*'          IS THIS A COMMENT STATEMENT ?\n         BE    JOBCONT             -YES, SKIP IT\n         SR    R0,R0\n         IC    R0,IEOPRAND         GET START OF OPERAND FIELD\n         BCTR  R0,0                MINUS 1 IS OFFSET\n         AR    R0,R1               PTR. TO START OF OPERAND\n         BAL   R14,PARMSEP         SEPARATE JOB CARD PARAMETERS\n         LTR   R15,R15             NORMAL RETURN ?\n         BNZ   JCLERR              -NO, JOB CONTROL ERROR\n         TM    IESTMTYP,IESCONTN   IS THIS FIRST STATEMENT ?\n         BO    JOBCONT             -NO, BRANCH\n         L     R1,IECARDP          ADDR. OF JOB STATEMENT\n         MVC   SUBCARD,0(R1)       SAVE FIRST JOB STATEMENT\n*\n* MOVE JOBNAME TO WORK AREA\n*\n         MVC   SUBJOBN,BLANKS      BLANK OUT JOBNAME FIELD\n         LA    R1,SUBCARD+2        FIRST JOBNAME CHARACTER\n         LA    R2,1                VALUE OF INCREMENT\n         LA    R3,8(,R1)           LAST JOBNAME CHARACTER\nJOBBLNK  DS    0H\n         CLI   1(R1),C' '          END OF JOBNAME ?\n         BE    JOBNAM              -YES, BRANCH\n         BXLE  R1,R2,JOBBLNK       TEST NEXT CHARACTER\n         B     JCLERR              JOBNAME TOO LONG\nJOBNAM   DS    0H\n         LA    R2,SUBCARD+2        START OF JOBNAME\n         SR    R1,R2               LENGTH OF JOBNAME - 1\n         EX    R1,JOBNMOVE         MOVE JOBNAME TO WORK AREA\n         OC    SUBJOBN,BLANKS      MAKE JOBNAME UPPER CASE\n         EX    R1,JOBNCOMP         CHECK IF ANY CHANGE TO JOBNAME\n         BNE   JCLERR              -YES, ERROR IN JOBNAME\n*\n         TM    IESTMTYP,IESSCON    HAS STATEMENT CONTINUATION ?\n         BO    JOBCONT             -YES, BRANCH\n         OI    SUBFLG1,SUB1SHOT    JOB STATEMENT IS 1 CARD\n         B     JOBPROC             PROCESS JOB STATEMENT\n*\nJOBCONT  DS    0H\n         TM    IESTMTYP,IESSCON    IS THIS LAST PART OF STATEMENT ?\n         BZ    JOBPROC             -YES, PROCESS NOW\n         XC    IECARDP,IECARDP     DELETE CURRENT JCL STATEMENT\n         SR    R15,R15             RETURN CODE ZERO - CONTINUE\n         B     GOBACK              GO BACK TO GET NEXT PART OF STMT.\n*\nJOBNMOVE MVC   SUBJOBN(0),0(R2)    MOVE JOBNAME TO WORK AREA\nJOBNCOMP CLC   SUBJOBN(0),0(R2)    COMPARE JOBNAME WITH JCL\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        JOB STATEMENT COMPLETE - PROCESS NOW                         *\n*                                                                     *\n*        THE PARAMETERS 'USER=' AND 'PASSWORD=' ARE CHECKED.          *\n*        USERID AND/OR PASSWORD ARE PROMPTED AND INSERTED, IF         *\n*        NECESSARY.                                                   *\n*                                                                     *\n***********************************************************************\n*\nJOBPROC  DS    0H\n         L     R7,SUBPBUF          ADDR. OF PARAMETER BUFFER\nUSERNXT  DS    0H\n         LH    R0,PARMLNG          LENGTH OF PARAMETER\n         SH    R0,=AL2(L'PARMUSR)  SUBTRACT LENGTH OF 'USER='\n         BM    BMPUSER             -SHORTER, TRY NEXT\n         CLC   PARMUSR,PARMTXT     IS IT 'USER=' ?\n         BNE   BMPUSER             -NO, BRANCH\n         LA    R2,PARMTXT+L'PARMUSR POINT TO START OF USERID\n         LTR   R0,R0               USERID SPECIFIED ?\n         BZ    JCLERR              -NO, THIS IS AN ERROR\n         BAL   R14,SAVUSID         SAVE USERID\n         B     SRCHPSWD            LOOK FOR PASSWORD NOW\nBMPUSER  DS    0H\n         LA    R7,PARMNXT          NEXT PARAMETER BUFFER ENTRY\n         C     R7,SUBPARM          AT END OF BUFFER ?\n         BL    USERNXT             -NO, TEST NEXT ENTRY\n         AIF   (NOT &USRI).USRI01  SKIP CODE IF 'USRI=NO'\n*\n***********************************************************************\n*                                                                     *\n*        PARAMETER 'USER=' NOT SPECIFIED. INSERT SESSION USERID       *\n*                                                                     *\n***********************************************************************\n*\n         L     R7,SUBPARM          ADDR. OF FIRST FREE PARAMETER ENTRY\n         LA    R2,PARMNXT          ADDR. OF NEXT FREE ENTRY\n         ST    R2,SUBPARM          ADJUST POINTER\n         MVC   PARMTXT(L'PARMUSR),PARMUSR INSERT 'USER='\n         L     R2,IEUSRIDP         GET ADDR. OF SESSION USERID\n         MVC   SUBUSID,0(R2)       MOVE SESSION USERID\n         MVC   PARMTXT+L'PARMUSR(8),SUBUSID MOVE USERID TO PARAMETER\n         LA    R1,7                MAX. USERID OFFSET\nCHKUSIDB DS    0H\n         LA    R2,SUBUSID(R1)      POINT TO CHAR. IN USERID\n         CLI   0(R2),C' '          IS IT A BLANK?\n         BNE   USIDENDF            -NO, FOUND END OF USERID\n         BCT   R1,CHKUSIDB         -YES, CHECK NEXT CHARACTER\nUSIDENDF DS    0H\n         LA    R1,L'PARMUSR+1(R1)  LENGTH OF PARAMETER 'USER=USERID'\n         STH   R1,PARMLNG          STORE IN PARAMETER HEADER\n         OI    SUBFLG1,SUBCHNG     SHOW JOB CARD CHANGED\n.USRI01  ANOP\n*\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR 'PASSWORD=' PARAMETER.                            *\n*                                                                     *\n***********************************************************************\n*\nSRCHPSWD DS    0H\n         L     R7,SUBPBUF          ADDR. OF PARAMETER BUFFER\nPSWDNXT  DS    0H\n         LH    R0,PARMLNG          LENGTH OF PARAMETER\n         SH    R0,=AL2(L'PARMPSW)  SUBTRACT LENGTH OF 'PASSWORD='\n         BM    BMPPSWD             -SHORTER, TRY NEXT\n         CLC   PARMPSW,PARMTXT     IS IT 'PASSWORD=' ?\n         BNE   BMPPSWD             -NO, BRANCH\n         AIF   (NOT &PSWP).PSWP01\n         B     PRMPPSW             PROMPT FOR PASSWORD\n         AGO   .PSWP02\n.PSWP01  ANOP\n         LTR   R0,R0               IS LENGTH OF PASSWORD ZERO ?\n         BNP   PRMPPSW             -YES, PROMPT FOR PASSWORD\n         LA    R2,PARMTXT+L'PARMPSW ADDR. OF PASSWORD\n         TM    PARMTYP,PARMTSUB    NEW PASSWORD ALSO GIVEN ?\n         BO    NEWPSWD             -YES, BRANCH\n         LR    R1,R0               LENGTH OF PASSWORD\n         TM    PARMTYP,PARMTPAR    PASSWORD IN PARENTHESES ?\n         BNO   PSWDNPAR            -NO, BRANCH\n         LA    R2,1(,R2)           BUMP OVER LEFT PARENTHESIS\n         SH    R2,=H'2'            LENGTH MINUS 2 PARENTHESES\n         LTR   R1,R1               IS LENGTH NOW ZERO ?\n         BNP   PRMPPSW             -YES, PROMPT FOR PASSWORD\nPSWDNPAR DS    0H\n         CH    R1,=H'8'            LONGER THAN 8 CHARS. ?\n         BH    PRMPPSW             -YES, PROMPT FOR PASSWORD\n         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE\n         MVC   SUBPSWD,BLANKS      CLEAR PASSWORD AREA\n         EX    R1,MOVEPSW          SAVE PASSWORD IN WORKAREA\n         STH   R1,SUBPWLN          SAVE LENGTH OF PASSWORD - 1\n         B     RACFOK              USERID AND PASSWORD O.K.\nNEWPSWD  DS    0H\n         XC    SUBPSWD,SUBPSWD     CLEAR PASSWORD FIELD\n         B     RACFOK\n*\n.PSWP02  ANOP\nBMPPSWD  DS    0H\n         LA    R7,PARMNXT          NEXT PARAMETER BUFFER ENTRY\n         C     R7,SUBPARM          AT END OF BUFFER ?\n         BL    PSWDNXT             -NO, TEST NEXT ENTRY\n*\n* PARAMETER 'PASSWORD=' NOT SPECIFIED.\n*\n         CLI   SUBUSID,C' '        'USER=' SPECIFIED?\n         BNH   RACFOK              -NO, BYPASS USERID CHECK\n         AIF   (&USRI).USRI04      SKIP CODE IF 'USRI=YES'\n         L     R2,IEUSRIDP         ADDR. OF TSO SESSION USERID\n         CLC   SUBUSID,0(R2)       SAME USERID ON JOBCARD ?\n         BE    RACFOK              -YES, NO NEED TO INSERT PASSWORD\n.USRI04  ANOP\n*\n         L     R7,SUBPARM          ADDR. OF FREE PARAMETER ENTRY\n         LA    R2,PARMNXT          ADDR. OF NEXT FREE ENTRY\n         ST    R2,SUBPARM          ADJUST POINTER\n         MVC   PARMTXT(L'PARMPSW),PARMPSW INSERT 'PASSWORD='\n         B     PRMPPSW             PROMPT FOR PASSWORD\n*\nMOVEPSW  MVC   SUBPSWD(0),0(R2)    SAVE PASSWORD IN WORK AREA\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        CHECK FOR 'NOTIFY=' PARAMETER ON JOBCARD. INSERT USERID      *\n*        OF TSO SESSION IF 'NOTIFY=,' HAS BEEN SPECIFIED.             *\n*                                                                     *\n***********************************************************************\n*\nRACFOK   DS    0H\n         L     R7,SUBPBUF          ADDR. OF PARAMETER BUFFER\nNOTFNXT  DS    0H\n         LH    R0,PARMLNG          LENGTH OF PARAMETER\n         SH    R0,=AL2(L'PARMNTF)  SUBTRACT LENGTH OF 'NOTIFY='\n         BM    BMPNOTF             -SHORTER, TRY NEXT\n         CLC   PARMNTF,PARMTXT     IS IT 'NOTIFY='\n         BNE   BMPNOTF             -NO, BRANCH\n         LA    R2,PARMTXT+L'PARMNTF POINT TO START OF USERID\n         LTR   R0,R0               USERID SPECIFIED ?\n         BNZ   JOBDONE             -YES, NO ACTION\n*\n         L     R3,IEUSRIDP         GET ADDR. OF SESSION USERID\n         MVC   0(8,R2),0(R3)       MOVE USERID TO PARAMETER\n         LA    R1,7                MAX. USERID OFFSET\nCHKUSIDL DS    0H\n         LA    R2,0(R1,R3)         POINT TO CHAR. IN USERID\n         CLI   0(R2),C' '          IS IT A BLANK?\n         BNE   USIDENDL            -NO, FOUND END OF USERID\n         BCT   R1,CHKUSIDL         -YES, CHECK NEXT CHARACTER\nUSIDENDL DS    0H\n         LA    R1,L'PARMNTF+1(R1)  LENGTH OF PARAMETER 'NOTIFY=USERID'\n         STH   R1,PARMLNG          STORE IN PARAMETER HEADER\n         OI    SUBFLG1,SUBCHNG     SHOW JOB CARD CHANGED\n         B     JOBDONE             JOB CARD IS PROCESSED\nBMPNOTF  DS    0H\n         LA    R7,PARMNXT          NEXT PARAMETER BUFFER ENTRY\n         C     R7,SUBPARM          AT END OF BUFFER ?\n         BL    NOTFNXT             -NO, TEST NEXT ENTRY\n         AIF   (NOT &NOTF).NOTF01  SKIP CODE IF 'NOTF=NO'\n*\n***********************************************************************\n*                                                                     *\n*        PARAMETER 'NOTIFY=' NOT SPECIFIED. INSERT SESSION USERID     *\n*                                                                     *\n***********************************************************************\n*\n         L     R7,SUBPARM          ADDR. OF FIRST FREE PARAMETER ENTRY\n         LA    R2,PARMNXT          ADDR. OF NEXT FREE ENTRY\n         ST    R2,SUBPARM          ADJUST POINTER\n         MVC   PARMTXT(L'PARMNTF),PARMNTF INSERT 'NOTIFY='\n         L     R3,IEUSRIDP         GET ADDR. OF SESSION USERID\n         MVC   PARMTXT+L'PARMNTF(8),0(R3) MOVE USERID TO PARAMETER\n         LA    R1,7                MAX. USERID OFFSET\nCHKUSIDX DS    0H\n         LA    R2,0(R1,R3)         POINT TO CHAR. IN USERID\n         CLI   0(R2),C' '          IS IT A BLANK?\n         BNE   USIDENDX            -NO, FOUND END OF USERID\n         BCT   R1,CHKUSIDX         -YES, CHECK NEXT CHARACTER\nUSIDENDX DS    0H\n         LA    R1,L'PARMNTF+1(R1)  LENGTH OF PARAMETER 'NOTIFY=USERID'\n         STH   R1,PARMLNG          STORE IN PARAMETER HEADER\n         OI    SUBFLG1,SUBCHNG     SHOW JOB CARD CHANGED\n.NOTF01  ANOP\n         SPACE 2\n*\n***********************************************************************\n*                                                                     *\n*        IF ANY OTHER JOB CARD PARAMETERS ARE TO BE PROCESSED,        *\n*        IT SHOULD BE DONE HERE.                                      *\n*                                                                     *\n*        REG. 7  ==> ADDR. OF PARAMETER BUFFER (PARMENT)              *\n*                                                                     *\n***********************************************************************\n*\nJOBDONE  DS    0H\n         L     R7,SUBPBUF          ADDR. OF PARAMETER BUFFER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        JOB STATEMENT PROCESSED. PUT TOGETHER IF CHANGED             *\n*        OR IF UNCHANGED BUT CONTINUATION CARD(S).                    *\n*                                                                     *\n***********************************************************************\n*\nJOBOK    DS    0H\n         TM    SUBFLG1,SUBCHNG     ANYTHING CHANGED ?\n         BO    JOBGEN              -YES, BRANCH\n         TM    SUBFLG1,SUB1SHOT    ONLY 1 CARD ?\n         BO    JOBLAST             -YES, NO ACTION REQUIRED\nJOBGEN   DS    0H\n         LH    R2,SUBOPST          OFFSET TO START OF OPERAND FIELD\n         LA    R1,78               LENGTH OF CARD MINUS 2\n         SR    R1,R2               LENGTH OF OPERAND FIELD - 2\n         LA    R2,SUBCARD(R2)      PTR. TO START OF OPERAND FIELD\n         MVI   0(R2),C' '          BLANK OUT -\n         EX    R1,CARDCLR                      OPERAND FIELD\n         MVC   SUBCURP,SUBPBUF     ADDR. OF 1'ST PARAMETER TO PROCESS\nNEXTCARD DS    0H\n         LA    R1,SUBCARD          ADDR. OF CARD BUFFER\n         BAL   R14,PARMGLUE        PUT STATEMENT TOGETHER\n         LTR   R15,R15             NORMAL RETURN ?\n         BNZ   TOOLONG             -NO, PARAMETER TOO LONG\n         ICM   R1,15,IECARDP       GET ADDR. OF JCL STATEMENT\n         BZ    NEXTNFST            -NO, BRANCH\n         MVC   0(L'SUBCARD,R1),SUBCARD MOVE GENERATED STATEMENT\n         B     NEXTMORE\nNEXTNFST DS    0H\n         LA    R1,SUBCARD          ADDR. OF CARD BUFFER\n         ST    R1,IECARDP          STORE ADDR. OF CARD BUFFER\nNEXTMORE DS    0H\n         TM    SUBFLG1,SUBLAST     MORE TO GENERATE ?\n         BO    JOBLAST             -NO, BRANCH\n         LA    R15,4               RETURN CODE 4 : COME BACK FOR NEXT\n         B     GOBACK\nJOBLAST  DS    0H\n         MVI   SUBCDFLG,0          CLEAR CARD PROCESSING FLAGS\n         OI    SUBFLG1,SUBJBCMP    SHOW JOB CARD PROCESSED\n         SR    R15,R15             RETURN CODE 0 IF LAST CARD\n         B     GOBACK              BACK TO CALLER\n*\nCARDCLR  MVC   1(0,R2),0(R2)       BLANK OUT ALL OF OPERAND FIELD\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PROMPT FOR PASSWORD FOR PARAMETER 'PASSWORD='                *\n*                                                                     *\n***********************************************************************\n*\nPRMPPSW  DS    0H\n         OI    SUBFLG1,SUBCHNG     SHOW JOB CARD CHANGED\n         LA    R2,PARMTXT+L'PARMPSW POINT BEHIND 'PASSWORD='\n         ST    R2,SUBINSRT         SAVE INSERTION POINT FOR PASSWORD\n         CLI   SUBPSWD,C' '        GOT A PASSWORD ?\n         BH    HAVPSWD             -YES, INSERT\n         L     R2,IEUSRIDP         ADDR. OF TSO SESSION USERID\n         CLC   SUBUSID,0(R2)       SAME USERID ON JOBCARD ?\n         BNE   MUSTPRMP            -NO, MUST PROMPT FOR PASSWORD\n         AIF   (NOT &USRI).USRI02  SKIP CODE IF 'USRI=NO'\n         L     R3,16               ADDR. OF CVT\n         USING CVT,R3              BASE FOR CVT\n         L     R1,CVTTCBP          ADDR. OF TCB/ASCB WORDS\n         DROP  R3                  RELEASE CVT BASE\n         L     R3,12(R1)           ADDR. OF CURRENT ASCB\n         USING ASCB,R3             BASE FOR ASCB\n         ICM   R4,15,ASCBTSB       ADDR. OF TERMINAL STATUS BLOCK\n         BZ    MUSTPRMP            -NOT PRESENT, PROMPT FOR PASSWORD\n         USING TSB,R4              BASE FOR TERMINAL STATUS BLOCK\n         DROP  R3                  RELEASE ASCB BASE\nKEY0B    MODESET EXTKEY=SUPR,SAVEKEY=(2),                    **BOH002  *\n               RELATED=KEYXB       GET INTO SUPERVISOR KEY   **BOH002\n         MVC   SUBPSWD,TSBPSWD     GET TSO SESSION PASSWORD\nKEYXB    MODESET KEYADDR=(2),RELATED=KEY0B BACK TO OUR KEY   **BOH002\n         DROP  R4                  RELEASE TSB BASE\n         LA    R3,7                MAX. OFFSET INTO PASSWORD\nFNDPSWND DS    0H\n         LA    R1,SUBPSWD(R3)      POINT TO CHAR. IN PASSWORD\n         CLI   0(R1),C' '          IS IT A BLANK?\n         BE    PSWDNEXT            -YES, BRANCH\n         CLI   0(R1),0             IS IT BINARY ZEROES?\n         BNE   PSWDEND             -NO, THIS IS LAST CHAR.\nPSWDNEXT DS    0H\n         BCTR  R3,0                SUBTRACT ONE FROM OFFSET\n         CH    R3,=H'0'            DID WE CHECK OFFSET ZERO?\n         BNM   FNDPSWND            -NO, TEST NEXT CHARACTER\n         B     NOPSWD1             -YES, PASSWORD IS BLANKS OR ZEROES\nPSWDEND  DS    0H                  R3 = LENGTH OF PASSWORD - 1\n         STH   R3,SUBPWLN          STORE IN LENGTH FIELD\n         B     HAVPSWD\n         AGO   .USRI03\n*\n.USRI02  ANOP\n         B     RACFOK              PROCESS NEXT JOBCARD PARAMETER\n.USRI03  ANOP\n*\n* PROMPT TERMINAL USER FOR PASSWORD.\n*\nMUSTPRMP DS    0H\n         MVI   SUBMSG,C' '         BLANK OUT MSG. AREA\n         MVC   SUBMSG+1(L'SUBMSG-1),SUBMSG\n         MVC   SUBMSG+2(L'DUMYCMD),DUMYCMD MOVE DUMMY COMMAND\n         LA    R1,SUBMSG+3+L'DUMYCMD INSERTION POINT FOR USERID\n         MVC   0(8,R1),SUBUSID     INSERT USERID IN COMMAND BUFFER\n         LH    R2,SUBUSLN          LENGTH OF USERID - 1\n         LA    R2,1(,R2)           ADD 1\n         AR    R1,R2               POINT BEHIND USERID\n         MVI   0(R1),C'/'          FORCE PASSWORD PROMPT\n         LA    R1,L'DUMYCMD+1      OFFSET TO PARAMETERS\n         STH   R1,SUBMSG           STORE IN COMMAND BUFFER PREFIX\n         LA    R1,5(R1,R2)         LENGTH OF COMMAND BUFFER\n         STH   R1,SUBMSGL          STORE IN LENGTH FIELD\n         LA    R1,REPLPSWD         ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         B     PARSE               PROMPT FOR PASSWORD\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PASSWORD ENTERED BY TERMINAL USER. INSERT IN 'PASSWORD='     *\n*                                                                     *\n***********************************************************************\n*\nREPLPSWD DS    0H\n         USING IKJPARMD,R4         BASE FOR PDE'S\n         ICM   R4,15,SUBANS        ADDR. OF ANSWER AREA\n         BNP   PARSFAIL            -NOT PLUS, PARSE FAILED\n         TM    USERID+14,BIT0      PASSWORD PRESENT ?\n         BZ    NOPSWD              -NO, BRANCH\n         LH    R1,USERID+12        GET LENGTH OF PASSWORD\n         LTR   R1,R1               IS LENGTH ZERO ?\n         BZ    NOPSWD              -YES, NO PASSWORD ENTERED\n         L     R2,USERID+8         ADDR. OF PASSWORD\n         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE\n         EX    R1,MOVEPSW          MOVE PASSWORD TO WORK AREA\n         STH   R1,SUBPWLN          SAVE LENGTH OF PASSWORD - 1\n         TM    USERID+22,BIT0      NEW PASSWORD ALSO PRESENT ?\n         BZ    RLSEPDL             -NO, BRANCH\n         LH    R1,USERID+20        GET LENGTH OF NEW PASSWORD\n         LTR   R1,R1               IS LENGTH ZERO ?\n         BZ    RLSEPDL             -YES, NO NEW PASSWORD ENTERED\n         L     R2,USERID+16        ADDR. OF NEW PASSWORD\n         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE\n         EX    R1,MOVENPSW         MOVE NEW PASSWORD TO WORK AREA\n         STH   R1,SUBNPWLN         LENGTH OF NEW PASSWORD - 1\nRLSEPDL  DS    0H\n         BAL   R14,RLSPDL          RELEASE STORAGE FROM PARSE\nHAVPSWD  DS    0H\n         LH    R2,SUBPWLN          LENGTH OF PASSWORD - 1\n         L     R1,SUBINSRT         GET INSERTION POINT\n         CLI   SUBNPSWD,0          NEW PASSWORD GIVEN ?\n         BE    NOPSWDNW            -NO, BRANCH\n         MVI   0(R1),C'('          INSERT LEFT PARENTHESIS\n         LA    R1,1(,R1)           ADJUST INSERTION POINT\nNOPSWDNW DS    0H\n         LA    R5,SUBPSWD          ADDR. OF PASSWORD IN WORK AREA\n         EX    R2,PARMOV           MOVE PASSWORD\n         LA    R3,L'PARMPSW+1(R2)  LENGTH OF PARAMETER\n         CLI   SUBNPSWD,0          NEW PASSWORD GIVEN ?\n         BE    SETLNG              -NO, BRANCH\n         LA    R1,1(R1,R2)         POINT BEHIND PASSWORD\n         MVI   0(R1),C','          INSERT COMMA\n         LA    R1,1(,R1)           BUMP OVER COMMA\n         LH    R2,SUBNPWLN         LENGTH OF NEW PASSWORD\n         LA    R5,SUBNPSWD         ADDR. OF NEW PASSWORD\n         EX    R2,PARMOV           MOVE NEW PASSWORD\n         XC    SUBPSWD,SUBPSWD     CLEAR PASSWORD\n         XC    SUBNPSWD,SUBNPSWD   CLEAR NEW PASSWORD\n         LA    R1,1(R1,R2)         POINT BEHIND NEW PASSWORD\n         MVI   0(R1),C')'          SET RIGHT PARENTHESIS\n         LA    R3,4(R2,R3)         LENGTH OF PARAMETER\nSETLNG   DS    0H\n         STH   R3,PARMLNG          STORE IN LENGTH FIELD\n         B     RACFOK              PROCESS NEXT JOB CARD PARAMETER\n         DROP  R4                  RELEASE PDE BASE\n*\n* NO PASSWORD ENTERED. FORGET 'PASSWORD=' (ZERO LENGTH FIELD)\n*\nNOPSWD   DS    0H\n         BAL   R14,RLSPDL          RELEASE STORAGE FROM PARSE\nNOPSWD1  DS    0H\n         XC    PARMLNG,PARMLNG     CLEAR PARAMETER LENGTH FIELD\n         B     RACFOK\n*\nMOVENPSW MVC   SUBNPSWD(0),0(R2)   MOVE NEW PASSWORD TO WORK AREA\nPARMOV   MVC   0(0,R1),0(R5)       MOVE PARAMETER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        ENTRY IS FOR GENERATION OF CONTINUATION OF STATEMENT         *\n*                                                                     *\n***********************************************************************\n*\nCONTINUE DS    0H\n         MVC   SUBCARD,ZAKZAK      '// '\n         MVC   SUBCARD+3(L'SUBCARD-3),SUBCARD+2 BLANK OUT THE REST\n         LH    R2,SUBOPST          OFFSET TO START OF OPERAND\n         CH    R2,=H'15'           BEHIND COL. 16 ?\n         BNH   CONTOK              -NO, BRANCH\n         LA    R2,15               SET COL. 16\nCONTOK   DS    0H\n         LA    R2,SUBCARD(R2)      START OF OPERAND\n         B     NEXTCARD            GENERATE NEXT CARD OF STATEMENT\n*\n***********************************************************************\n*                                                                     *\n*        MESSAGE WAS ISSUED. SELECT ROUTINE FOR FURTHER PROCESSING    *\n*                                                                     *\n***********************************************************************\n*\nRET8OR12 DS    0H\n         XC    IEMSGP,IEMSGP       CLEAR PTR. TO MESSAGE\n         L     R15,SUBPROC         ADDR. OF PROCESSING ROUTINE\n         BR    R15                 AND ENTER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        ERROR EXIT ROUTINES                                          *\n*                                                                     *\n***********************************************************************\n*\nBADREPLY DS    0H                  TERMINAL USER ENTERED GARBAGE\n         LA    R1,RENLNG           ADDR. OF 'REENTER' - MESSAGE\n         ST    R1,IEMSGP           STORE IN PARAMETER LIST\n         LA    R15,12              ISSUE PROMPTING MESSAGE\n         B     GOBACK\n*\nTOOLONG  DS    0H                  PARAMETER EXCEEDS MAXIMUM LENGTH\n         LA    R1,PARMOUT          ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         LA    R1,LONGLNG          ADDR. OF ERROR MESSAGE\n         B     ISSUEMSG\n*\nJCLERR   DS    0H                  JCL ERROR\n         LA    R1,CARDOUT          ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         LA    R1,JCLLNG           ADDR. OF ERROR MESSAGE\n         B     ISSUEMSG\n*\nPARSFAIL DS    0H                  PARSE ERROR\n         LA    R1,ERRORRET         ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         LA    R1,PARSLNG          ADDR. OF ERROR MESSAGE\n         B     ISSUEMSG\n*\nISSUEMSG DS    0H\n         ST    R1,IEMSGP           STORE PTR. TO MSG IN PARAM. LIST\n         LA    R15,8               ISSUE MESSAGE TO TERMINAL USER\n         B     GOBACK\n*\nCARDOUT  DS    0H                  DISPLAY JCL CARD IN ERROR\n         LA    R1,L'SUBMSG+2       LNG OF CARD + LENGTH FLD  **BOH001\n         STH   R1,SUBMSGL          STORE IN LENGTH FIELD     **BOH001\n         LA    R1,ERRORRET         ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         L     R1,IECARDP          ADDR. OF JCL STMT.        **BOH001\n         MVC   SUBMSG,0(R1)        MOVE TO MESSAGE AREA      **BOH001\n         LA    R1,SUBMSGL          ADDR. OF MESSAGE          **BOH001\n         B     ISSUEMSG\n*\nPARMOUT  DS    0H                  DISPLAY PARAMETER IN ERROR\n         LH    R1,PARMLNG          LENGTH OF PARAMETER\n         LA    R1,2(,R1)           ADD LENGTH OF LENGTH FIELD\n         STH   R1,PARMLNG          STORE IN LENGTH FIELD\n         LA    R1,ERRORRET         ADDR. OF PROCESSING ROUTINE\n         ST    R1,SUBPROC          STORE IN WORK AREA\n         LA    R1,PARMLNG          ADDR. OF MESSAGE\n         B     ISSUEMSG\n*\nERRORRET DS    0H\n         LA    R15,16              TERMINATE SUBMIT COMMAND PROCESSING\n         B     GOBACK\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PROMPT TERMINAL USER USING PARSE                             *\n*                                                                     *\n***********************************************************************\n*\nPARSE    DS    0H\n         USING PPL,R4              BASE FOR PARSE PARM. LIST **BOH002\n         L     R4,SUBPPL           GET ADDR. OF SUBMIT'S PPL **BOH002\n         L     R1,PCLADR           ADDR. OF PCL\n         ST    R1,PPLPCL           STORE IN PPL\n         LA    R1,SUBANS           ADDR. OF ANSWER AREA PTR.\n         ST    R1,PPLANS           STORE IN PPL\n         LA    R1,SUBMSGL          ADDR. OF COMMAND BUFFER\n         ST    R1,PPLCBUF          STORE IN PPL\nKEY0     MODESET EXTKEY=SUPR,SAVEKEY=(2),                    **BOH002  *\n               RELATED=KEYX        GET INTO SUPERVISOR KEY   **BOH002\n         LR    R1,R4               ADDR. OF PPL              **BOH002\n         CALLTSSR EP=IKJPARS,MF=(E,(1)) INVOKE PARSE\n         LR    R4,R15              SAVE RETURN CODE          **BOH002\nKEYX     MODESET KEYADDR=(2),RELATED=KEY0 BACK TO OUR KEY    **BOH002\n         LTR   R4,R4               PARSE SUCCESSFUL ?        **BOH002\n         BNZ   PARSFAIL            -NO, ERROR\n         L     R14,SUBPROC         ADDR. OF PROCESSING ROUTINE\n         BR    R14                 ENTER ROUTINE\n         DROP  R4                  RELEASE BASE FOR PPL      **BOH002\n         SPACE 3\n*\n* RELEASE STORAGE FOR PDL AND PDE'S\n*\nRLSPDL   DS    0H\n         ST    R14,12(R13)         SAVE REG. 14\n         LA    R1,SUBANS           ADDR. OF ANSWER AREA PTR. **BOH002\nKEY0A    MODESET EXTKEY=SUPR,SAVEKEY=(2),                    **BOH002  *\n               RELATED=KEYXA       GET INTO SUPERVISOR KEY   **BOH002\n         IKJRLSA (1)                                         **BOH002\nKEYXA    MODESET KEYADDR=(2),RELATED=KEY0A BACK TO OUR KEY   **BOH002\n         L     R14,12(R13)         RESTORE REG. 14\n         BR    R14\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        CLEAR PARAMETER BUFFER                                       *\n*                                                                     *\n*        INPUT :                                                      *\n*              R7                  ADDR. OF PARAMETER BUFFER          *\n*                                                                     *\n*        EXIT:                                                        *\n*              R14                 RETURN ADDRESS                     *\n*                                                                     *\n***********************************************************************\n*\nCLRPARM  DS    0H\n         STM   R0,R3,SUBCLSAV      SAVE REGISTERS 0 TO 3\n         LR    R0,R7               ADDR. OF PARAMETER BUFFER\n         LA    R1,4088             LENGTH OF PARAM. BUFFER - PREFIX\n         LM    R2,R3,ZEROES\n         MVCL  R0,R2               CLEAR THE BUFFER\n         LM    R0,R3,SUBCLSAV      RESTORE REGISTERS 0 TO 3\n         BR    R14                 BACK TO CALLER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        SAVE USERID IN WORK AREA                                     *\n*                                                                     *\n*        INPUT :                                                      *\n*              R0                  LENGTH OF USERID                   *\n*              R2                  ADDR. OF USERID                    *\n*              R10                 PTR. TO EXIT WORK AREA (SUBWORK)   *\n*                                                                     *\n*        EXIT:                                                        *\n*              USERID IN WORK AREA (SUBUSID)                          *\n*              R14                 RETURN ADDRESS                     *\n*                                                                     *\n***********************************************************************\n*\nSAVUSID  DS    0H\n         LR    R15,R0              LENGTH OF USERID\n         BCTR  R15,0               SUBTRACT 1 FOR EXECUTE\n         CH    R15,SUBUSLN         DO WE HAVE USERID OF SAME LENGTH ?\n         BNE   SAVUS01             -NO, BRANCH\n         EX    R15,COMPUSID        IS USERID ALREADY IN WORK AREA ?\n         BER   R14                 -YES, RETURN\nSAVUS01  DS    0H\n         MVC   SUBUSID,BLANKS      CLEAR USERID\n         MVC   SUBPSWD,BLANKS      CLEAR PASSWORD\n         EX    R15,MOVEUSID        MOVE USERID TO WORK AREA\n         STH   R15,SUBUSLN         SAVE LENGTH OF USERID - 1\n         BR    R14                 RETURN\n*\nCOMPUSID CLC   SUBUSID(0),0(R2)    COMPARE USERIDS\nMOVEUSID MVC   SUBUSID(0),0(R2)    MOVE USERID TO WORK AREA\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        SAVE REST OF PARAMETER BEFORE INSERTION                      *\n*                                                                     *\n*        INPUT :                                                      *\n*              R1                  PTR. TO PARAMETER TO BE SAVED      *\n*              R10                 PTR. TO EXIT WORK AREA (SUBWORK)   *\n*                                                                     *\n*        EXIT:                                                        *\n*              REST OF PARAMETER IN WORK AREA (SUBWKSP)               *\n*              R14                 RETURN ADDRESS                     *\n*              R15 : 0             NORMAL RETURN                      *\n*                  : 8             ERROR: LONGER THAN 144 BYTES       *\n*                                                                     *\n***********************************************************************\n*\nSAVPARM  DS    0H\n         MVI   SUBWKSP,C' '        CLEAR PARAMETER SAVE AREA\n         MVC   SUBWKSP+1(L'SUBWKSP-1),SUBWKSP\n         LA    R5,PARMTXT          START OF PARAMETER\n         LR    R0,R1               START OF REST OF PARAMETER\n         SR    R0,R5               LENGTH OF PREFIX\n         LH    R15,PARMLNG         LENGTH OF PARAMETER\n         SR    R15,R0              LENGTH OF REST TO BE SAVED\n         STH   R15,SUBWKLN         STORE IN WORK AREA\n         LTR   R15,R15             ANYTHING TO BE SAVED ?\n         BNP   SAVPRET0            -NO, RETURN\n         CH    R15,=H'144'         MORE THAN 144 CHARS. ?\n         BH    SAVPTLG             -YES, ERROR\n         BCTR  R15,0               SUBTRACT 1 FOR EXECUTE\n         EX    R15,PARMMOVE        MOVE REST OF PARAMETER\nSAVPRET0 DS    0H\n         SR    R15,R15             INDICATE NORMAL RETURN\n         BR    R14                 RETURN\nSAVPTLG  DS    0H\n         LA    R15,8               ERROR RETURN: PARAMETER TOO LONG\n         BR    R14\n*\nPARMMOVE MVC   SUBWKSP(0),0(R1)    SAVE REST OF PARAMETER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        RESTORE REST OF PARAMETER                                    *\n*                                                                     *\n*        INPUT :                                                      *\n*              R1                  PTR. TO INSERTION POINT            *\n*              R10                 PTR. TO EXIT WORK AREA (SUBWORK)   *\n*                                                                     *\n*        EXIT:                                                        *\n*              PARAMETER RESTORED IN PARAMETER BUFFER (PARMENT)       *\n*              R14                 RETURN ADDRESS                     *\n*              R15 : 0             NORMAL RETURN                      *\n*                  : 8             ERROR: LONGER THAN 144 BYTES       *\n*                                                                     *\n***********************************************************************\n*\nRESTPARM DS    0H\n         L     R7,SUBCURP          ADDR. OF CURRENT PARAMETER ENTRY\n         LA    R2,PARMTXT          PTR. TO START OF PARAMETER\n         LR    R0,R1               END OF FIRST PART OF PARAMETER\n         SR    R0,R2               LENGTH OF FIRST PART OF PARAMETER\n         MVI   0(R1),C' '          PUT A BLANK BEHIND FIRST PART\n         LA    R2,142              LENGTH OF PARAMETER TEXT - 2\n         SR    R2,R0               LENGTH OF FIELD TO BE BLANKED\n         BM    NOBLANKS            -MINUS, BRANCH\n         EX    R2,BLANKOUT         BLANK OUT REST OF FIELD\nNOBLANKS DS    0H\n         LH    R15,SUBWKLN         LENGTH OF SAVED PART OF PARAMETER\n         AR    R0,R15              NEW LENGTH OF PARAMETER\n         STH   R0,PARMLNG          STORE NEW LENGTH OF PARAMETER\n         CH    R0,=H'144'          IS MAX. SIZE EXCEEDED ?\n         BH    RESTTLG             -YES, ERROR\n         LTR   R15,R15             ANYTHING TO RESTORE ?\n         BNP   RESTRET0            -NO, RETURN\n         BCTR  R15,0               SUBTRACT 1 FOR EXECUTE\n         EX    R15,PARMREST        RESTORE REST OF PARAMETER\nRESTRET0 DS    0H\n         SR    R15,R15             INDICATE NORMAL RETURN\n         BR    R14                 RETURN\nRESTTLG  DS    0H\n         LA    R15,8               ERROR: PARAMETER TOO LONG\n         BR    R14                 BACK TO CALLER\n*\nPARMREST MVC   0(0,R1),SUBWKSP     RESTORE REST OF PARAMETER\nBLANKOUT MVC   1(0,R1),0(R1)       BLANK OUT REST OF FIELD\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        GENERATE JCL CARD FROM PARAMETER BUFFER                      *\n*                                                                     *\n*        INPUT :                                                      *\n*              R1                  PTR. TO CARD BUFFER                *\n*              R2                  PTR. TO START OF OPERAND FIELD     *\n*              R7                  PTR. TO FIRST PARAM. (SUBCURP)     *\n*              R10                 PTR. TO EXIT WORK AREA (SUBWORK)   *\n*                                                                     *\n*        EXIT:                                                        *\n*              JCL CARD IN CARD BUFFER                                *\n*              R14                 RETURN ADDRESS                     *\n*              R15 : 0             NORMAL RETURN                      *\n*                  : 8             ERROR: LONGER THAN 65 BYTES        *\n*                                                                     *\n***********************************************************************\n*\nPARMGLUE DS    0H\n         L     R7,SUBCURP          PTR. TO 1ST PARAM. TO PROCESS\n         LA    R0,70(,R1)          LAST USABLE CHAR. OF CARD\n         LH    R3,PARMLNG          LENGTH OF PARAMETER\n         LTR   R3,R3               ZERO ?\n         BNP   PARMBMP             -YES, SKIP\nPARMNEXT DS    0H\n         LA    R4,0(R2,R3)         END OF PARAMETER IN CARD\n         CR    R4,R0               PAST COL. 71 ?\n         BH    NOFIT               -YES, DOES NOT FIT IN CARD\n         BCTR  R3,0                SUBTRACT 1 FOR EXECUTE\n         EX    R3,GLUEMOVE         MOVE PARAMETER TO CARD\n         LR    R2,R4               POINT PAST PARAMETER\nPARMBMP  DS    0H\n         LA    R7,PARMNXT          ADDR. OF NEXT PARAMETER ENTRY\n         C     R7,SUBPARM          THIS ENTRY FREE ?\n         BE    PARMLAST            -YES, THIS IS END-OF-STATEMENT\n         LH    R3,PARMLNG          GET LENGTH OF NEXT PARAMETER\n         LTR   R3,R3               DUMMY PARAMETER ?\n         BNP   PARMBMP             -YES, SKIP\n         MVI   0(R2),C','          PUT A COMMA BEHIND LAST PARAMETER\n         LA    R2,1(,R2)           ADJUST PTR. TO FREE SPACE IN CARD\n         B     PARMNEXT            PROCESS NEXT PARAMETER\n*\nNOFIT    DS    0H\n         LA    R0,71(,R1)          SEE IF PARAMETER FITS IN COL. 71\n         CR    R4,R0               DOES IT FIT NOW ?\n         BH    NOFIT71             -NO, BRANCH\n         LA    R15,PARMNXT         ADDR. OF NEST PARAMETER ENTRY\n         C     R15,SUBPARM         THIS ENTRY FREE ?\n         BNE   NOFIT71             -NO, NOT LAST PARAMETER\n         BCTR  R3,0                SUBTRACT 1 FROM PARAMETER LENGTH\n         EX    R3,GLUEMOVE         MOVE PARAMETER\n         B     PARMLAST\nNOFIT71  DS    0H\n         CH    R3,=H'65'           PARAMETER > 65 BYTES ?\n         BH    PARMGTLG            -YES, NOT SUPPORTED\n         ST    R7,SUBCURP          THIS PARAM. TO BE PROCESSED AGAIN\n         NI    SUBFLG1,255-SUBLAST THIS IS NOT LAST CARD OF STMT.\n         SR    R15,R15             INDICATE NORMAL RETURN\n         BR    R14                 RETURN TO CALLER\n*\nPARMLAST DS    0H\n         OI    SUBFLG1,SUBLAST     THIS IS LAST CARD OF STATEMENT\n         SR    R15,R15             INDICATE NORMAL RETURN\n         BR    R14                 RETURN TO CALLER\n*\nPARMGTLG DS    0H\n         LA    R15,8               ERROR: PARAMETER > 65 BYTES\n         BR    R14                 BACK TO CALLER\n*\nGLUEMOVE MVC   0(0,R2),PARMTXT     MOVE PARAMETER TO CARD\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        SEPARATE PARAMETERS OF JCL STATEMENT                         *\n*                                                                     *\n*        INPUT :                                                      *\n*              R0                  PTR. TO OPERAND FIELD              *\n*              R1                  PTR. TO JCL STATEMENT              *\n*              R8                  PTR. TO CONTROL SWITCHES           *\n*              R10                 PTR. TO EXIT WORK AREA (SUBWORK)   *\n*                                                                     *\n*        EXIT:                                                        *\n*              PARAMETERS IN PARAMETER BUFFER (PARMBUF)               *\n*              R14                 RETURN ADDRESS                     *\n*              R15 : 0             NORMAL RETURN                      *\n*                  : 8             ERROR: LONGER THAN 144 BYTES       *\n*                                                                     *\n***********************************************************************\n*\nPARMSEP  DS    0H\n         LA    R2,1                VALUE OF INCREMENT\n         LA    R3,70(R1)           LAST CHAR. OF CARD\n         LTR   R1,R0               OPERAND WITHIN STATEMENT LIMITS?\n         BNP   PARMSJCL            -NO, BRANCH\n         LR    R5,R1               SAVE START OF OPERAND\n         TM    SUBCDFLG,SUBOPCNT   OPERAND TO BE CONTINUED ?\n         BZ    NOOPCNT             -NO, BRANCH\n         L     R7,SUBCURP          ADDR. OF CURRENT PARAMETER\n         L     R6,SUBPARCT         GET COUNT OF OPEN PARENTHESES\n         B     CHKPAR              RESUME PROCESSING OF OPERAND\nNOOPCNT  DS    0H\n         L     R7,SUBPARM          GET ADDR. OF FREE PARM. ENTRY\n         SR    R6,R6               COUNT OF PARENTHESES\nSRCOPER  DS    0H\n         CLI   0(R1),C'('          LEFT PARENTHESIS ?\n         BE    LEFTPAR             -YES, BRANCH\n         CLI   0(R1),C''''         APOSTROPHE ?\n         BE    QUOTE               -YES, BRANCH\n         CLI   0(R1),C','          COMMA ?\n         BE    ENDPARM             -YES, END OF PARAMETER\n         CLI   0(R1),C' '          BLANK ?\n         BE    ENDCARD             -YES, END OF CARD\nOPERBXL  DS    0H\n         BXLE  R1,R2,SRCOPER       TEST NEXT CHAR.\nENDCARD  DS    0H\n         CR    R1,R5               LAST PARAM. DUMMY (', ') ?\n         BE    MUSTCONT            -YES, DO NOT MOVE\n         BAL   R11,PARMOVE         MOVE THE PARAMETER\n         NI    SUBCDFLG,255-SUBCONT NO CONTINUATION OF THIS STATEMENT\n         SR    R15,R15             NORMAL RETURN\n         BR    R14                 BACK TO CALLER\nMUSTCONT DS    0H\n         OI    SUBCDFLG,SUBCONT    THIS STATEMENT IS TO BE CONTINUED\n         SR    R15,R15             NORMAL RETURN\n         BR    R14                 BACK TO CALLER\n         EJECT\n*\n* LEFT PARENTHESIS FOUND. CHECK FOR RIGHT PARENTHESIS\n*\nLEFTPAR  DS    0H\n         LA    R6,1(,R6)           ONE MORE LEFT PARENTHESIS\n         OI    PARMTYP,PARMTPAR    SHOW PARENTHESES PRESENT\nPARBXL   DS    0H\n         BXLE  R1,R2,CHKPAR        TEST NEXT CHAR.\n         B     OPERCNT\nPARCOM   DS    0H\n         OI    PARMTYP,PARMTSUB    SHOW SUBPARAMETERS PRESENT\n         B     PARBXL\nCHKPAR   DS    0H\n         CLI   0(R1),C''''         QUOTE WITHIN PARENTHESES  **BOH001\n         BE    PQUOTE              -YES, FIND CLOSING QUOTE  **BOH001\n         CLI   0(R1),C','          COMMA WITHIN PARENTHESES ?\n         BE    PARCOM              -YES, SHOW SUBPARAMETERS PRESENT\n         CLI   0(R1),C'('          ANOTHER LEFT PARENTHESIS ?\n         BE    LEFTPAR             -YES, ADD TO COUNT\n         CLI   0(R1),C' '          END OF CARD ?\n         BE    OPERCNT             -YES, OPERAND CONTIN. ON NEXT CARD\n         CLI   0(R1),C')'          RIGHT PARENTHESIS ?\n         BNE   PARBXL              -NO, CHECK NEXT CHARACTER\n         SH    R6,=H'1'            REDUCE PARENTHESIS COUNT\n         BNZ   PARBXL              -NOT ZERO, TEST AGAIN\n         B     OPERBXL             SEARCH FOR DELIMITER\nOPERCNT  DS    0H\n         LR    R2,R1               ADDR. OF LAST CHAR.\n         BCTR  R2,0                SUBTRACT ONE\n         CLI   0(R2),C','          IS IT A COMMA ?\n         BNE   PARMSJCL            -NO, RIGHT PARENTHESIS MISSING\n         ST    R6,SUBPARCT         SAVE COUNT OF PARENTHESES\n         OI    SUBCDFLG,SUBOPCNT   SHOW OPERAND TO BE CONTINUED\n         B     ENDCARD\n*\n* QUOTE FOUND. SEARCH FOR ANOTHER QUOTE.\n*\nQUOTE    DS    0H\n         BXLE  R1,R2,CHKQUOTE      TEST NEXT CHAR.\n         B     PARMSJCL            NO OTHER QUOTE, JCL ERROR\nCHKQUOTE DS    0H\n         CLI   0(R1),C''''         QUOTE ?\n         BNE   QUOTE               -NO, CHECK NEXT CHARACTER\n         B     OPERBXL             SEARCH FOR DELIMITER\n*                                                            **BOH001\nPQUOTE   DS    0H                                            **BOH001\n         BXLE  R1,R2,CHKPQUOT      TEST NEXT CHAR.           **BOH001\n         B     PARMSJCL            NO OTHER QUOTE, JCL ERROR **BOH001\nCHKPQUOT DS    0H                                            **BOH001\n         CLI   0(R1),C''''         QUOTE ?                   **BOH001\n         BNE   PQUOTE              -NO, CHECK NEXT CHARACTER **BOH001\n         B     PARBXL              SEARCH FOR CLOSING PAREN. **BOH001\n*\n* COMMA FOUND. MOVE PRECEDING PARAMETER.\n*\nENDPARM  DS    0H\n         BAL   R11,PARMOVE         MOVE PARAMETER\n         B     OPERBXL             TEST NEXT CHARACTER\n*\nPARMSJCL DS    0H\n         LA    R15,8               INDICATE JOB CONTROL ERROR\n         BR    R14                 BACK TO CALLER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO MOVE A PARAMETER INTO A PARAMETER BUFFER ENTRY    *\n*                                                                     *\n***********************************************************************\n*\nPARMOVE  DS    0H\n         LR    R4,R1               END OF PARAMETER\n         SR    R4,R5               LENGTH OF PARAMETER\n         BNP   NULLPARM            -ZERO, DUMMY PARAMETER\n         LH    R6,PARMLNG          LENGTH OF TEXT ALREADY STORED\n         LR    R0,R6\n         LA    R6,PARMTXT(R6)      FIRST CHAR. BEHIND TEXT ALREADY ST.\n         AR    R0,R4               TOTAL LENGTH OF PARAMETER\n         STH   R0,PARMLNG          STORE IN LENGTH FIELD\n         BCTR  R4,0                SUBTRACT 1 FOR EXECUTE\n         EX    R4,PARMMVC          MOVE PARAMETER\nNULLPARM DS    0H\n         ST    R7,SUBCURP          SAVE PTR. TO CURRENT PARAM. ENTRY\n         LA    R7,PARMNXT          NEXT PARAMETER ENTRY\n         ST    R7,SUBPARM          SAVE PTR. TO NEXT PARAM. ENTRY\n         LA    R5,1(,R1)           START OF NEXT PARAMETER\n         SR    R6,R6               CLEAR COUNT OF PARENTHESES\n         BR    R11                 BACK TO CALLER\n*\nPARMMVC  MVC   0(0,R6),0(R5)       MOVE PARAMETER\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND MESSAGE PROTOTYPES                             *\n*                                                                     *\n***********************************************************************\n*\nZEROES   DC    D'0'                BINARY ZEROES\n         SPACE 1\nBLANKS   DC    CL8' '\nZAKZAK   DC    C'// '\nDUMYCMD  DC    C'XX'\nPARMUSR  DC    C'USER='\nPARMPSW  DC    C'PASSWORD='\nPARMNTF  DC    C'NOTIFY='\n*\nRENLNG   DC    AL2(L'RENMSG+2)\nRENMSG   DC    C'INVALID - REENTER'\nJCLLNG   DC    AL2(L'JCLMSG+2)\nJCLMSG   DC    C'JCL ERROR IN:'\nLONGLNG  DC    AL2(L'LONGMSG+2)\nLONGMSG  DC    C'PARAMETER TOO LONG'\nPARSLNG  DC    AL2(L'PARSMSG+2)\nPARSMSG  DC    C'CANNOT PROMPT, SUBMIT CANCELED'\n         SPACE 3\n         LTORG\n         EJECT\n*\n***********************************************************************\n*                                                                     *\n*        PARAMETER LIST FOR PARSE                                     *\n*                                                                     *\n***********************************************************************\n*\nPROMPT   IKJPARM\n*\nUSERID   IKJPOSIT UID2PSWD,PROMPT='USERID',                            *\n               HELP='USERID AND PASSWORD FOR ACCOUNT FIELD'\n         IKJENDP\nPCLADR   DC    A(PROMPT)           ADDR. OF PCL FOR USERID/PASSWORD\n         SPACE 3\n.END     ANOP\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISR@PRIM": {"ttr": 4617, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%-------------------  SYNTEX ISPF/PDF PRIMARY OPTION MENU  ---------------------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   - &ZUSER\n%   0 +ISPF PARMS  - Specify terminal and user parameters   +JULIAN   - &ZJDATE\n%   1 +BROWSE      - Display source data or output listings +TIME     - &ZTIME\n%   2 +EDIT        - Create or change source data           +TERMINAL - &ZTERM\n%   3 +UTILITIES   - Perform utility functions              +PF KEYS  - &ZKEYS\n%   4 +FOREGROUND  - Invoke language processors in foreground\n%   5 +BATCH       - Submit job for language processing\n%   6 +COMMAND     - Enter TSO command or CLIST\n%   7 +DIALOG TEST - Perform dialog testing\n%   8 +LM UTILITIES- Perform library management utility functions\n%   9 +SDSF        - SPOOL Display and Search Facility\n%   A +SAS         - Statistical Analysis System 82.4\n%   C +CHANGES     - Display summary of changes for this release\n%   G +GDDM        - Graphical Data Display Manager\n%   L +LIBRARIAN   - Perform Librarian related functions\n%   S +SYNTEX      - Syntex-supported ISPF dialogs & utilities (future)\n%   T +TUTORIAL    - Display information about ISPF/PDF\n%   V +VPS         - VPS Network Control and VPSPRINT\n%   X +EXIT        - Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.     --- User Services%HOTLINE+- X5405 ---\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  VPUT (ZHTOP,ZHINDEX) PROFILE\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO) PARM(ISRBRO01)'\n                2,'PGM(ISREDIT) PARM(P,ISREDM01)'\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(ISRPTC)'\n                7,'PGM(ISRYXDR) NOCHECK'\n                8,'PANEL(ISRLPRIM)'\n                9,'PANEL(ZSDSFOPT) NEWAPPL(ISF)'\n                A,'CMD(%SAS@PRIM)'\n                C,'PGM(ISPTUTOR) PARM(ISR00005)'\n                G,'PANEL(ADM@PRIM)'\n                L,'PANEL(LIBRPDF) NEWAPPL(LIB@)'\n                T,'PGM(ISPTUTOR) PARM(ISR00000)'\n                V,'PANEL(VPS@PRIM)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  IF (&ZCMD = '9')\n     &ZSEL = 'PGM(ISFISP) NOCHECK NEWAPPL(ISF)'\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LMVS010": {"ttr": 4619, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//$LMVS010 JOB (U4754,U4754,000000),'SP/1.3.3 LOCAL MOD',CLASS=C,\n//     MSGCLASS=A,NOTIFY=$UWJS\n/*JOBPARM ROOM=0056\n/*ROUTE PRINT FETCH\n//LMVS010  EXEC SMPAPP\n//SMPCNTL   DD  *\n REJECT  S (LMVS010) .\n RESETRC .\n RECEIVE S (LMVS010) .\n APPLY   S (LMVS010)\n                                    /* CHANGE TSO ALLOCATE DEFAULT\n                                       DISPOSITION FROM OLD TO SHR */ .\n/*\n//SMPPTFIN  DD  *\n++ USERMOD (LMVS010)\n /* PROBLEM :  IF A TSO ALLOCATE COMMAND IS ISSUED WITH THE DATA SET\n               KEYWORD AND THE STATUS (I.E. DISPOSITION) IS NOT ENTERED\n               IBM DEFAULTS THE STATUS TO \"OLD\".\n    SOLUTION:  CHANGE ALLOCATE TO DEFAULT TO \"SHR\" TO ELIMINATE\n               CONTENTION BETWEEN TSO USERS AND/OR BATCH JOBS.\n    SOURCE  :  ORIGINALLY, SSD #277 SHARE INC., JULY 15, 1977\n\n    UPDATED 21DEC79, F. HAMBRICK\n    TSO COMMAND PACKAGE/5740-XT6 - FORMERLY SU11\n\n    UPDATED 25JAN85, WILLIAM SMITH, SYNTEX TECHNICAL SERVICES\n    TSO/E RELEASE 2.0/5665-285 FMIDS: JBB1213/JBB1214\n    - BASE MICROFICHE FRAME F32, CARD 0031 (RESTRICTED MATERIAL)\n    - YOU WILL FIND @CH00099 AT DISPLACEMENT X'0018CE' (DISP=SHR)\n\n */.\n++ VER (Z038) FMID(JBB1213) PRE(UZ75279) .\n++ ZAP (IKJEFD30) .\n NAME IKJEFD30\n VER 082E D201200E,98A7           MVC  STATSPDE(2,@02),@CH00040 (OLD)\n REP 082E D201200E,98A9           MVC  STATSPDE(2,@02),@CH00099 (SHR)\n IDRDATA LMVS010\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LMVS015": {"ttr": 4621, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//$LMVS015 JOB (U4754,U4754,000000),'SP/1.3.3 LOCAL MOD',CLASS=C,\n//     MSGCLASS=A,NOTIFY=$UWJS\n/*JOBPARM ROOM=0056\n/*ROUTE PRINT FETCH\n//LMVS015  EXEC SMPAPP,CDSVOL=MVS999,SVOL=MVS999,DVOL=MVS999\n//SMPCNTL   DD  *\n REJECT  S (LMVS015) .\n RESETRC .\n RECEIVE S (LMVS015) .\n APPLY   S (LMVS015)\n                             /* TSO/EXTENSIONS FOR MVS/370 5665-285\n                                LJB2-9527-01 REL: JBB1213 CARD: 0042\n                                DATA:  18JUN84\n\n                                THIS INFORMATION WAS TAKEN FROM IBM\n                                EQUAL SYSTEM WSCLSYS DATED 12/84.\n\n                                THIS SUPERZAP DISABLES THE FULL SCREEN\n                                LOGON FEATURE OF TSO/E BY CAUSING TSO/E\n                                TO TREAT ALL TERMINALS AS LINE MODE.\n                                THIS IS DONE BY CHANGING THE CALL TO\n                                SETSIZE AT LOGON TO MAKE LOGON PROCESS-\n                                ING THINK THAT ALL TERMINALS ARE LINE\n                                MODE.\n\n                                THE TSO LOGON PREPROMPT EXIT CAN TURN\n                                ON BYTE 2 BIT 2 OR SEE APAR OZ65807.\n\n                                TSO COMMAND PROCESSOR LOGIC VOLUME IV\n                                WITH THE LATEST TNL'S (LD23-0247) HAS\n                                INFORMATION ABOUT THE FULL SCREEN LOGON\n                                AND THE PRE-PROMPT EXIT.  NOTE THAT THE\n                                PREPROMPT EXIT OCCURS BEFORE THE FULL\n                                SCREEN LOGON.                      */ .\n\n/*\n//SMPPTFIN  DD  *\n++ USERMOD (LMVS015) .\n++ VER (Z038) FMID(JBB1213) .\n++ ZAP (IKJEFLC) .\n NAME IKJEFLC\n VER 0148 4100,000A        LA  0,10   LOAD ENTRY CODE\n VER 014C 8900,0018        SLL 0,24   PUT CODE IN HIGH ORDER BYTE\n VER 0150 4110,0018        LA  1,24   PUT LINE NO. IN REG\n VER 0154 1601             OR  0,1    PUT LINE NO. IN PARM REG\n VER 0156 4110,0050        LA  1,80\n VER 015A 0A5E             SVC 94\n REP 0156 41F0,0004        SET RETURN CODE = 4\n REP 015A 0700             NOOP SVC CALL\n IDRDATA LMVS015\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMVS018": {"ttr": 4865, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//$LMVS018 JOB (U4754,U4754,000000),'SP/1.3.3 LOCAL MOD',CLASS=C,\n//     MSGCLASS=A,NOTIFY=$UWJS\n/*JOBPARM ROOM=0056\n/*ROUTE PRINT FETCH\n//LMVS018  EXEC SMPAPP,CDSVOL=MVS999,SVOL=MVS999,DVOL=MVS999\n//SMPCNTL   DD  *\n RECEIVE S (LMVS018) .\n APPLY   S (LMVS018)     /* ADD SUPPORT FOR CENT SIGN AS THE LOGICAL\n                              TAB CHARACTER ON ALL 3270 TERMINALS.\n                                                                   */ .\n/*\n//SMPPTFIN  DD  *\n++ USERMOD (LMVS018)\n /* PROBLEM :  THE TSO EDIT COMMAND DOES NOT NATIVELY PROVIDE A LOGICAL\n               TAB CHARACTER FOR 3270 TERMINALS.\n    SOLUTION:  UPDATE THE TSO EDIT TRANSLATE TO ADD AN ADDITIONAL\n               CHARACTER FOR USE AS A TAB CHARACTER.\n    SOURCE  :  ORIGINALLY, SSD #299 SHARE INC., MVS TUNING REPORT\n\n    UPDATED 06MAY80, WILLIAM SMITH, SYNTEX TECHNICAL SERVICES\n    TSO COMMAND PACKAGE/5740-XT6 - FORMERLY SU11\n\n    UPDATED 25JAN85, WILLIAM SMITH, SYNTEX TECHNICAL SERVICES\n    TSO/E RELEASE 2.0/5665-285 (SUPERCEDES UZ31940)\n\n */.\n++ VER (Z038) FMID(EBB1102) PRE(UZ35891) .\n++ ZAP (IKJEBELE) .\n NAME IKJEBELE\n VER  0228 92406003     MVI  3(6),X'40'\n VER  0830 4A4B4C4D     TRANSLATE TABLE -  CENT SIGN, TABLE CONT.\n REP  0228 924A6003     MVI  3(6),C'\u00a2'     TAB OFF SUBCOMMAND\n REP  0830 05           TRANSLATE TABLE -  LOGICAL TAB FOR 3270\n IDRDATA LMVS018\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ONL": {"ttr": 4867, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ONL      TITLE 'ONLINE DISPLAY AND OPERATOR INTERFACE, VERSION 5.2'\n         @      ONL    MODULE NAME IN BLOCK LETTERS         *HMD 01/85*\n*******************************************************************\n**  ONL IS A SYSTEMS OPERATOR INTERFACE PROGRAM THAT ALLOWS      **\n**  SYSTEM PROGRAMMERS TO ENTER OPERATOR COMMANDS FROM A TSO     **\n**  TERMINAL. THIS PROGRAM ISSUES SVC 34 TO INTERFACE WITH THE   **\n**  MASTER SCHEDULER AND MUST BE AUTHORIZED THROUGH THE LINKAGE  **\n**  EDITOR AND THE IKJEFTE2 TSO COMMAND TABLE.                   **\n**                                                               **\n**  VERSION 5.0 - HOWARD M. DEAN - GTE DATA SERVICES             **\n**  VERSION 5.1 - HOWARD M. DEAN - GTE DATA SERVICES             **\n**  VERSION 5.2 - HOWARD M. DEAN - SYNTEX U.S.A.                 **\n*******************************************************************\n         EJECT\nON       TSOENTER REGS=YES,PL=(CPPL,IO,CSCAN),WORK=WORKSIZE,SP=1\n         TM    0(R2),X'80'    CHECK IF CALLED AS CMD OR WITH CALL OR $\n         BO    SSSS           NO CPPL, SO ABEND             *HMD 08/81*\n         MVI   FLAGS,0        CLEAR COMMAND FLAGS           *HMD 02/82*\n         L     R1,CPPLPSCB    GET PSCB ADDRESS              *HMD 08/81*\n         ST    R1,PSCBADDR    SAVE PSCB ADDRESS             *HMD 04/82*\n         LUSE  PSCB,R1        ADDRESS THE DSECT             *HMD 08/81*\n         TM    PSCBATR1,PSCBCTRL      OPERATOR AUTHORITY?   *HMD 08/81*\n         BZ    NOTAUTH        NO, NOT AUTHORIZED            *HMD 08/81*\n         LDROP R1                                           *HMD 08/81*\n         TESTAUTH FCTN=1      ARE WE APF AUTHORIZED?        *HMD 04/82*\n         LTR   R15,R15        WELL, ARE WE?                 *HMD 04/82*\n         BNZ   NOTAPF         NO, DO NOT SET FLAG           *HMD 04/82*\n         OI    FLAGS,FAUTH    SET APF AUTHORIZED            *HMD 04/82*\nNOTAPF   DS    0H                                           *HMD 04/82*\n         EJECT\n** GET ASID FOR SVC 34\n         XC    TJIDLIST,TJIDLIST        CLEAR LIST FORM OF MACRO\n         EXTRACT TJIDTEST,FIELDS=(TJID),MF=(E,TJIDLIST)\n         OC    TJIDTEST+2(2),TJIDTEST+2 IS IT THERE?\n         BZ    CHKBUF                   NO                  *HMD 07/82*\n         OI    TJIDTEST+2,X'80'         SET FOR CMD SCHEDULER\n** CHECK IF INITIAL COMMAND ISSUED                          *HMD 03/82*\nCHKBUF   DS    0H                                           *HMD 03/82*\n         LUSE  ECT,R1                   ADDRESS THE DSECT   *HMD 03/82*\n         LUSE  IKJEBECA,R9              FOR EDIT ONLY       *HMD 03/82*\n         MVC   INPUT,SPACES             CLEAR INPUT BUFFER  *HMD 03/82*\n         L     R1,CPPLECT               GET ENVIRON CNTL TBL*HMD 03/82*\n         L     R15,CPPLCBUF             POINT TO CMD BUFFER *HMD 03/82*\n         CLC   ECTPCMD,=CL8'E'          ARE WE IN EDIT?     *HMD 03/82*\n         BE    CHKEDIT                  CHECK FOR EDIT      *HMD 03/82*\n         CLC   ECTPCMD,=CL8'EDIT'       ARE WE IN EDIT?     *HMD 03/82*\n         BE    CHKEDIT                  NO, NORMAL CHECK    *HMD 03/82*\n         CLC   ECTPCMD,=CL8'IKJEBEIN'   WEIRD EDIT MODE?    *HMD 03/82*\n         BNE   CHKNEDIT                 NOT IN EDIT         *HMD 03/82*\nCHKEDIT  L     R15,CAPTIBFR             GET INPUT BUF ADDR  *HMD 03/82*\n         TM    CAPTIBFR,CAOPERND        OPERAND IN BUFFER?  *HMD 03/82*\n         BZ    START                    NO, PROMPT USER     *HMD 03/82*\n         B     GOTCMD                   YES, PROCESS IT     *HMD 03/82*\nCHKNEDIT TM    ECTSWS,ECTNOPD           OPERAND IN BUFFER   *HMD 03/82*\n         BO    START                    NO, PROMPT USER     *HMD 03/82*\nGOTCMD   OI    FLAGS,FCMD               INDICATE COMMAND    *HMD 03/82*\n         LH    R14,2(R15)               GET OFFSET TO CMD   *HMD 03/82*\n         LA    R2,4(R14,R15)            POINT TO COMMAND    *HMD 03/82*\n         LH    R3,0(R15)                GET LINE LENGTH     *HMD 03/82*\n         SR    R3,R14                   GET COMMAND LENGTH  *HMD 03/82*\n         SH    R3,=H'5'                 ACCOUNT FOR PREFIX  *HMD 03/82*\n         BM    START                    PROMPT IF INVALID   *HMD 03/82*\n         CH    R3,=H'126'               LINE TOO LONG?      *HMD 03/82*\n         BNH   *+8                      NO, PROCESS         *HMD 03/82*\n         LA    R3,126                   YES, ADJUST LENGTH  *HMD 03/82*\n         EX    R3,MOVECBUF              MOVE COMMAND        *HMD 03/82*\n         B     DOINPUT                  PROCESS COMMAND     *HMD 03/82*\n         LDROP R1                                           *HMD 03/82*\n         LDROP R9                                           *HMD 03/82*\n         EJECT\nSTART    NI    FLAGS,255-FSTART         CLEAR START FLAGS   *HMD 07/82*\n         LA    R0,TSOECB\n         ST    R0,IOPLECB\n         XC    IOPLPTG(16),IOPLPTG\n         XC    TSOECB,TSOECB            CLEAR EVENT CNTL BLOCK\n         PUTGET  PARM=IOPLPTG,MF=(E,IOPL),                             X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),                                    X\n               OUTPUT=(OLD,SINGLE,MODE)\n         C     R15,=F'4'\n         BH    SSSS           ABEND,ERROR\n         EJECT\nCHKINP   LA    R11,IOPLPTG\n         USING PGPB,R11\n         L     R1,PGPBIBUF    INPUT BUFFER\n         LH    R3,0(R1)       LENGTH INCLUDING 4 BYTE HDR\n         CH    R3,=H'4'       IS IT NULL INPUT\n         BE    START          YES, START OVER\n         SH    R3,=H'5'\n         BM    SSSS           ERROR\n         C     R3,=F'126'     TOO LONG?                     *HMD 08/81*\n         BNH   *+8            NO, OK                        *HMD 08/81*\n         LA    R3,126         MOVE ONLY 127 CHARS           *HMD 08/81*\n         EX    R3,MOVEIT      MOVE TO MY BUFFER\n         LH    R0,0(R1)       LENGTH OF LINE INCLUDING HEADER\n         LA    R15,1          SUBPOOL 1\n         SLL   R15,24\n         OR    R0,R15\n         L     R1,PGPBIBUF\n         FREEMAIN R,LV=(0),A=(1)      FREE INPUT BUFFR\n         DROP  R11\n         EJECT\n**                                                          *HMD 03/82*\n**       ANALYZE INPUT\n**                                                          *HMD 03/82*\n         SPACE 1\nDOINPUT  DS    0H                     SETUP FOR CMD PROCESS *HMD 03/82*\n         OC    INPUT,SPACES        TRANSLATE TO CAPS\n         MVC   COMMAND,SPACES      CLEAR COMMAND BUFFER\n         LA    R2,1(R3)            CMD LENGTH TO R2\n         LTR   R2,R2                    TEST LENGTH\n         BNP   CKFF                                         *HMD 03/82*\n         LA    R15,INPUT                START\nCK01     CLI   0(R15),C' '              SUPPRESS BLANKS\n         BNE   CK02                     NO\n         SH    R2,=H'1'                 SUBTRACT ONE\n         BNP   CKFF                     ALL BLANKS          *HMD 03/82*\n         LA    R15,1(,R15)              GET NEXT POSITION\n         B     CK01                     TRY AGAIN\nCK02     LR    R3,R2                    GET CMD LENGTH IN R3\n         SH    R3,=H'1'                 DOWN 1 FOR MACH LEN\n         BM    CKFF                     COMMAND NOT REALLY THERE\n         EX    R3,MOVECMD               MOVE IN COMMAND\n         CLC   =C'END',COMMAND          IS THIS THE END?    *HMD 01/78*\n         BE    END                      YES, BYE            *HMD 01/78*\n         CLC   =C':OFF',COMMAND         TURN PASSWORDS OFF  *HMD 06/79*\n         BE    PASSOFF                  YES                 *HMD 01/85*\n         CLC   =C':ON',COMMAND          RESTORE PASSWORDS   *HMD 06/79*\n         BE    PASSON                   YES                 *HMD 01/85*\n         CLC   =C':NOC',COMMAND         SET CANCEL FLAG OFF?*HMD 02/82*\n         BE    NONCAN                   YES                 *HMD 02/82*\n         CLC   =C':CAN',COMMAND         SET CANCEL FLAG ON? *HMD 02/82*\n         BE    CANDO                    YES                 *HMD 02/82*\n         CLC   =C':NOT',COMMAND         TURN OF JS TIMING?  *HMD 04/82*\n         BE    NOTIME                   YES                 *HMD 04/82*\n         CLC   =C':TON',COMMAND         TURN ON JS TIMING?  *HMD 04/82*\n         BE    YESTIME                  YES                 *HMD 04/82*\n         CLC   =C':AC',COMMAND          TURN ON ACCOUNT     *HMD 07/82*\n         BE    ACCOUNT                  YES                 *HMD 07/82*\n         CLC   =C':NA',COMMAND          TURN OFF ACCOUNT    *HMD 07/82*\n         BE    NACCOUNT                 YES                 *HMD 07/82*\n         CLC   =C':MO',COMMAND          TURN ON MOUNT?      *HMD 01/85*\n         BE    MOUNT                    YES                 *HMD 01/85*\n         CLC   =C':NM',COMMAND          TURN OFF MOUNT?     *HMD 01/85*\n         BE    NOMOUNT                  YES                 *HMD 01/85*\n         CLC   =C':NOS',COMMAND         MAKE NON-SWAPPABLE? *HMD 01/85*\n         BE    NOSWAP                   YES                 *HMD 01/85*\n         CLC   =C':SWA',COMMAND         MAKE SWAPPABLE?     *HMD 01/85*\n         BE    YESSWAP                  YES                 *HMD 01/85*\n         XC    CMDLEN(4),CMDLEN         CLEAR COMMAND LEN   *HMD 01/78*\n         LA    R2,4(,R2)                ADD LENGTH\n         STH   R2,CMDLEN                SAVE LENGTH OF COMM *HMD 06/79*\n         CLC   =H'5',CMDLEN             ONE CHAR. COMMAND?  *HMD 06/79*\n         BNE   AROUND                   NO, CONTINUE        *HMD 06/79*\n         CLI   COMMAND,C'E'             IS THE COMMAND 'E'? *HMD 06/79*\n         BE    END                      MUST BE EXIT REQUEST*HMD 06/79*\nAROUND   DS    0H\n         XC    CSOUT(12),CSOUT          CLEAR CSOA\n*                                                           *HMD 01/85*\n* MVS 1.3.3  ALLOW \"K\" COMMANDS                             *HMD 01/85*\n*                                                           *HMD 01/85*\n         CLC   =C'LOGON ',COMMAND       LOGON COMMAND?      *HMD 07/82*\n         BE    CKFF                     DON'T BE SILLY      *HMD 07/82*\n         EJECT                                              *HMD 07/82*\n*************************************************************HMD 07/82*\n** THE FOLLOWING CODE IS NECESSARY THE ENABLE THIS COMMAND  *HMD 07/82*\n** TO WORK UNDER MVS/SP RELEASE 3. THIS IS DUE TO A CHANGE  *HMD 07/82*\n** IN THE COMMAND SCHEDULER CSCB CREATION MODULE IEE0803D.  *HMD 07/82*\n**                                                          *HMD 07/82*\n** IN MVS/SP 3, IF AN ASID IS PRESENT IN THE XSA, THEN THE  *HMD 07/82*\n** COMMAND SCHEDULER MOVES YOUR TSO USERID INTO THE NEWLY   *HMD 07/82*\n** CREATED CSCB. WHY THIS IS DONE, WHO KNOWS. IT CAUSES,    *HMD 07/82*\n** HOWEVER, THE STC INITIALIZATION ROUTINE IEEPRWI2 TO      *HMD 07/82*\n** THINK THAT A 'SYSTEM' ADDRESS SPACE IS BEING CREATED     *HMD 07/82*\n** DUE TO THE CHKEY FIELD OF THE CSCB CONTAINING YOUR       *HMD 07/82*\n** USERID INSTEAD OF ZERO. BECAUSE THIS ADDRESS SPACE       *HMD 07/82*\n** INITIALIZATION ROUTINE NAME FOR SYSTEM ADDRESS SPACES    *HMD 07/82*\n** IS CONTAINED IN THE CHKEY FIELD, IEEPRWI2 ATTEMPT TO     *HMD 07/82*\n** LINK TO YOUR TSO USERID TO INITIALIZE THE STARTED        *HMD 07/82*\n** ADDRESS SPACE. THUS AN ABEND806-4 AND A RESULTING SVC    *HMD 07/82*\n** DUMP.                                                    *HMD 07/82*\n**                                                          *HMD 07/82*\n** SINCE RESPONSE AT THE TERMINAL IS NOT REQUIRED FOR       *HMD 07/82*\n** START AND MOUNT COMMANDS (AND THAT IS THE ONLY PLACE     *HMD 07/82*\n** THIS CRAZY THING HAPPENS) WE WILL ISSUE THOSE COMMANDS   *HMD 07/82*\n** WITH REGISTER ZERO EQUAL TO ZERO.                        *HMD 07/82*\n*************************************************************HMD 07/82*\n         CLC   =C'S ',COMMAND           START COMMAND?      *HMD 07/82*\n         BE    SETSTART                 YES..SET FLAG       *HMD 07/82*\n         CLC   =C'START ',COMMAND       START COMMAND?      *HMD 07/82*\n         BE    SETSTART                                     *HMD 07/82*\n         CLC   =C'M ',COMMAND           MOUNT COMMAND       *HMD 07/82*\n         BE    SETSTART                                     *HMD 07/82*\n         CLC   =C'MOUNT ',COMMAND       MOUNT COMMAND?      *HMD 07/82*\n         BNE   CHECKX                                       *HMD 07/82*\nSETSTART OI    FLAGS,FSTART             INDICATE START/MOUNT*HMD 07/82*\nCHECKX   CLC   =C'X ',COMMAND           EXIT REQUEST?\n         BNE   PROCESS                  NO, PROCESS COMMAND\n         EJECT\n* PROCESS PCF EXIT REQUEST\nEXITREQ  XC    CSOUT(12),CSOUT          CLEAR CSOA\n         LA    1,CSOUT\n         ST    1,CSPLFLG\n         LA    1,CSOUT+4                GET CSOA FLAG\n         ST    1,CSPLOA                 SAVE OUTPUT AREA\n         OI    CSOUT,X'80'              NO SYNTAX CHECK\n         LA    1,CMDLEN                 PSUEDO COMMAND BUFFER\n         ST    1,CSPLCBUF               SAVE IN COMMAND BUFFER PLACE\n         LA    1,TSOECB                 GET ECB ADDR\n         ST    1,CSPLECB                STORE ECB ADDR\n         XC    TSOECB,TSOECB            CLEAR ECB\n         TM    FLAGS,FAUTH              APF AUTHORIZED?     *HMD 04/82*\n         BO    MODE01                   YES, DO NOT TURN ON *HMD 04/82*\n         RWHOLE  AUTHON                 TURN ON AUTHORITY   *HMD 04/82*\nMODE01   MODESET KEY=ZERO               GET INTO KEY ZERO   *HMD 04/82*\n         L     R1,PSATOLD-PSA           GET CURRENT TCB     *HMD 04/82*\n         L     R1,TCBJSCB-TCB(,R1)      GET CVT POINTER     *HMD 04/82*\n         L     R2,JSCBACT-IEZJSCB(,R1)  GET ACTIVE JSCB PTR *HMD 04/82*\n         CLC   JSCBPSCB-IEZJSCB(4,R2),PSCBADDR              *HMD 04/82*\n         BNE   ABENDXX                  VALIDITY CHECK FAIL *HMD 04/82*\n         NI    JSCBOPTS-IEZJSCB(R2),255-JSCBAUTH\n*                                 TURN OFF APF BIT TO FOOL PCFSCAN\n         L     R1,CVTPTR                GET CVT ADDRESS     *HMD 04/82*\n         L     R15,CVTSCAN-CVT(,R1)     GET IKJSCAN ADDRESS *HMD 04/82*\n         TM    CVTSCAN-CVT(R1),X'80'    IS SCAN LOADED?     *HMD 04/82*\n         BO    GOTSCAN                  NO, THEN LOAD       *HMD 04/82*\n         LOAD  EP=IKJSCAN               LOAD IKJSCAN        *HMD 04/82*\n         LR    R15,R0                   SAVE SCAN ADDRESS   *HMD 04/82*\nGOTSCAN  LA    R1,CSPL                  GET PARM LIST ADDR  *HMD 04/82*\n         XC    SYNCHPRM(SYNCHL),SYNCHPRM    CLEAR PARMS     *HMD 07/82*\n         SYNCH (15),RESTORE=YES,MF=(E,SYNCHPRM)             *HMD 04/82*\n         DELETE  EP=IKJSCAN             SCAN NOT NEEDED NOW *HMD 04/82*\n         L     R1,PSATOLD-PSA           GET CURRENT TCB     *HMD 04/82*\n         L     R1,TCBJSCB-TCB(,R1)      GET CVT POINTER     *HMD 04/82*\n         L     R2,JSCBACT-IEZJSCB(,R1)  GET ACTIVE JSCB PTR *HMD 04/82*\n         CLC   JSCBPSCB-IEZJSCB(4,R2),PSCBADDR              *HMD 04/82*\n         BNE   ABENDXX                  VALIDITY CHECK FAIL *HMD 04/82*\n         OI    JSCBOPTS-IEZJSCB(R2),JSCBAUTH                *HMD 04/82*\n*                                       TURN ON AUTH AGAIN  *HMD 04/82*\n         MODESET KEY=NZERO              GET BACK TO KEY 8   *HMD 04/82*\n         TM    FLAGS,FAUTH              AUTHORIZED ON ENTRY?*HMD 09/82*\n         BO    CKFF                     YES, DO NOT USE SVC *HMD 09/82*\n         RWHOLE AUTHOFF                 SYSTEM INTERFACE    *HMD 09/82*\n         B     CKFF                     OK, ALL DONE        *HMD 09/82*\nABENDXX  MODESET KEY=NZERO,MODE=PROB    TURN OF AUTHORITY   *HMD 04/82*\n         TM    FLAGS,FAUTH              AUTHORIZED?         *HMD 04/82*\n         BO    ABENDYY                  YES, DO NOT USE SVC *HMD 04/82*\n         RWHOLE AUTHOFF                                     *HMD 04/82*\nABENDYY  ABEND 4095,DUMP                                    *HMD 04/82*\n         EJECT\n* PROCESS COMMAND REQUEST\nPROCESS  TM    FLAGS,FAUTH              ALREADY AUTHORIZED? *HMD 04/82*\n         BO    SYS01                    YES, DO NOT TURN ON *HMD 04/82*\n         RWHOLE  AUTHON                 ALLOW MODESETS      *HMD 01/82*\nSYS01    SYSEVENT DONTSWAP              DISALLOW SWAPS      *HMD 10/81*\n         MODESET KEY=ZERO,MODE=SUP      GET SUPERVISOR MODE *HMD 07/82*\n         SLR   R0,R0                    TEST FOR START      *HMD 07/82*\n         TM    FLAGS,FSTART             START/MOUNT?        *HMD 07/82*\n         BO    SVC34                    YES, NO RESPONSE    *HMD 07/82*\n         L     R0,TJIDTEST              INDICATE TSO        *HMD 10/81*\nSVC34    DS    0H                                           *HMD 07/82*\n         MGCR  CMDLEN                   ISSUE OPR COMMAND   *HMD 10/81*\n         MODESET KEY=NZERO,MODE=PROB\n         SYSEVENT OKSWAP                ALLOW SWAPS         *HMD 10/81*\n         TM    FLAGS,FAUTH              AUTHORIZED?         *HMD 04/82*\n         BO    SYS02                    YES, BYPASS RWHOLE  *HMD 04/82*\n         RWHOLE  AUTHOFF                DISALLOW MODESETS\nSYS02    STIMER  WAIT,BINTVL=HOLD       HOLD ON A SEC.      *HMD 10/81*\n         B     CKFF                                         *HMD 03/82*\n         EJECT\n**                                                          *HMD 03/82*\n**  CHECK FOR INITIAL COMMAND                               *HMD 03/82*\n**                                                          *HMD 03/82*\nCKFF     DS    0H                                           *HMD 03/82*\n         TM    FLAGS,FCMD              INITIAL COMMAND?     *HMD 03/82*\n         BZ    START                   NO, REPROMPT USER    *HMD 03/82*\n**\n**  END OF PROGRAM\n**\nEND      TSOLEAVE ISN=LTORG\n         SPACE 2                                            *HMD 03/82*\nNOSWAP   RWHOLE   AUTHON                TURN ON AUTH        *HMD 01/85*\n         SYSEVENT DONTSWAP              TURN OFF THE SRM    *HMD 01/85*\n         RWHOLE   AUTHOFF               AND FURTHER AUTH    *HMD 01/85*\n         B        CKFF                  GET ANOTHER CMD     *HMD 01/85*\n         SPACE 1                                            *HMD 01/85*\nYESSWAP  RWHOLE   AUTHON                                    *HMD 01/85*\n         SYSEVENT OKSWAP                GET THE SRM BACK    *HMD 01/85*\n         RWHOLE   AUTHON                AND TURN OFF AUTH   *HMD 01/85*\n         B        CKFF                  GET ANOTHER CMD     *HMD 01/85*\n         SPACE 1                                            *HMD 01/85*\nPASSOFF  RWHOLE   PASSOFF               TURN OFF PASSWORDS  *HMD 06/79*\n         B        CKFF                  GET NEXT COMMAND    *HMD 03/82*\n         SPACE  1                                           *HMD 03/82*\nPASSON   RWHOLE   PASSON                TURN ON PASSWORDS   *HMD 06/79*\n         B        CKFF                  GET NEXT COMMAND    *HMD 03/82*\n         SPACE  1                                           *HMD 03/82*\nNONCAN   RWHOLE   NOCAN                 TURN OFF CANCEL FLAG*HMD 02/82*\n         B        CKFF                  CHECK FOR END       *HMD 02/82*\n         SPACE  1                                           *HMD 03/82*\nCANDO    RWHOLE   YESCAN                TURN ON CANCEL FLAG *HMD 02/82*\n         B        CKFF                  CHECK FOR END       *HMD 02/82*\n         SPACE  1                                           *HMD 03/82*\nNOTIME   RWHOLE   NOTIME                SET NO JS TIMING    *HMD 04/82*\n         B        CKFF                  CHECK FOR END       *HMD 02/82*\n         SPACE  1                                           *HMD 03/82*\nYESTIME  RWHOLE   TIME                  SET FOR JS TIMING   *HMD 04/82*\n         B        CKFF                  CHECK FOR END       *HMD 04/82*\n         SPACE  1                                           *HMD 03/82*\nACCOUNT  DS    0H                     TURN ON ACCOUNT CMD   *HMD 07/82*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED?    *HMD 07/82*\n         BO    ACCT01                 YES, DO NOT USE MACRO *HMD 07/82*\n         RWHOLE AUTHON                                      *HMD 07/82*\nACCT01   MODESET KEY=ZERO                                   *HMD 07/82*\n         L     R1,PSCBADDR            GET PSCB ADDRESS      *HMD 07/82*\n         LUSE  PSCB,R1                ADDRESS THE PSCB      *HMD 07/82*\n         OI    PSCBATR1,PSCBACCT      TURN ON ACCOUNT BIT   *HMD 07/82*\n         LDROP R1                     DROP PSCB BASE        *HMD 07/82*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED     *HMD 07/82*\n         BO    CKFF                   YES..DO NOT TURN OFF  *HMD 07/82*\n         RWHOLE AUTHOFF               TURN OF AUTHORITY     *HMD 07/82*\n         B     CKFF                   GET NEXT COMMAND      *HMD 07/82*\n         SPACE 1                                            *HMD 07/82*\nNACCOUNT DS    0H                     TURN OFF ACCOUNT CMD  *HMD 07/82*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED?    *HMD 07/82*\n         BO    ACCT02                 YES, DO NOT USE MACRO *HMD 07/82*\n         RWHOLE AUTHON                TURN ON AUTHORITY     *HMD 07/82*\nACCT02   MODESET KEY=ZERO                                   *HMD 07/82*\n         L     R1,PSCBADDR            GET PSCB ADDRESS      *HMD 07/82*\n         LUSE  PSCB,R1                ADDRESS THE PSCB      *HMD 07/82*\n         NI    PSCBATR1,255-PSCBACCT  TURN OFF ACCOUNT BIT  *HMD 07/82*\n         LDROP R1                     DROP PSCB BASE        *HMD 07/82*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED     *HMD 07/82*\n         BO    CKFF                   YES..DO NOT TURN OFF  *HMD 07/82*\n         RWHOLE AUTHOFF               TURN OFF AUTHORITY    *HMD 07/82*\n         B     CKFF                   GET NEXT COMMAND      *HMD 07/82*\n         EJECT\nMOUNT    DS    0H                     TURN ON MOUNT CMD     *HMD 01/85*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED?    *HMD 01/85*\n         BO    MOUNT01                YES, DO NOT USE MACRO *HMD 01/85*\n         RWHOLE AUTHON                                      *HMD 01/85*\nMOUNT01  MODESET KEY=ZERO                                   *HMD 01/85*\n         L     R1,PSCBADDR            GET PSCB ADDRESS      *HMD 01/85*\n         LUSE  PSCB,R1                ADDRESS THE PSCB      *HMD 01/85*\n         OI    PSCBATR1,PSCBVMNT      TURN ON MOUNT BIT     *HMD 01/85*\n         LDROP R1                     DROP PSCB BASE        *HMD 01/85*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED     *HMD 01/85*\n         BO    CKFF                   YES..DO NOT TURN OFF  *HMD 01/85*\n         RWHOLE AUTHOFF               TURN OF AUTHORITY     *HMD 01/85*\n         B     CKFF                   GET NEXT COMMAND      *HMD 01/85*\n         SPACE 1                                            *HMD 01/85*\nNOMOUNT  DS    0H                     TURN OFF MOUNT CMD    *HMD 01/85*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED?    *HMD 01/85*\n         BO    MOUNT02                YES, DO NOT USE MACRO *HMD 01/85*\n         RWHOLE AUTHON                TURN ON AUTHORITY     *HMD 01/85*\nMOUNT02  MODESET KEY=ZERO                                   *HMD 01/85*\n         L     R1,PSCBADDR            GET PSCB ADDRESS      *HMD 01/85*\n         LUSE  PSCB,R1                ADDRESS THE PSCB      *HMD 01/85*\n         NI    PSCBATR1,255-PSCBVMNT  TURN OFF MOUNT BIT    *HMD 01/85*\n         LDROP R1                     DROP PSCB BASE        *HMD 01/85*\n         TM    FLAGS,FAUTH            ARE WE AUTHORIZED     *HMD 01/85*\n         BO    CKFF                   YES..DO NOT TURN OFF  *HMD 01/85*\n         RWHOLE AUTHOFF               TURN OFF AUTHORITY    *HMD 01/85*\n         B     CKFF                   GET NEXT COMMAND\n         EJECT\nNOTAUTH  DS    0H                                           *HMD 08/81*\n         LA    R1,TSOECB              GET ECB ADDRESS       *HMD 08/81*\n         ST    R1,IOPLECB             SAVE IN IOPL          *HMD 08/81*\n         XC    TSOECB,TSOECB          CLEAR ECB             *HMD 08/81*\n         PUTLINE PARM=PTPB,OUTPUT=(OLDAUTH,TERM,SINGLE,INFOR),         X\n               MF=(E,IOPL)                                  *HMD 08/81*\n         B     END\n         SPACE 2                                            *HMD 08/81*\nSSSS     ABEND 800,DUMP                                     *HMD 08/81*\n         EJECT                                              *HMD 08/81*\n***                                                         *HMD 03/82*\n***      SPECIAL ENTRY FOR 'EDIT' COMMAND                   *HMD 03/82*\n***                                                         *HMD 03/82*\n         ENTRY EONL                                         *HMD 03/82*\nEONL     DS    0H                                           *HMD 03/82*\n         USING *,15                                         *HMD 03/82*\n         L     15,=A(ON)         ENTRY POINT OF ROUTINE     *HMD 03/82*\n         LR    9,1               SAVE COMM AREA POINTER     *HMD 03/82*\n         L     1,0(,1)           GET CPPL ADDRESS           *HMD 03/82*\n         BR    15                GO TO IT                   *HMD 03/82*\n         EJECT                                              *HMD 08/81*\n***\n***   CONSTANTS\n***\n*\n* SPACES TO TRANSLATE FROM LOWER CASE TO UPPER CASE\n*\nSPACES   DC    CL127' '                                     *HMD 08/81*\nMOVEIT   MVC   INPUT(0),4(R1)\nMOVECBUF MVC   INPUT(0),0(R2)        MOVE CMDBUF COMMAND    *HMD 03/82*\nMOVECMD  MVC   COMMAND(0),0(R15)\nHOLD     DC    F'150'                 HOLD FOR 1 1/2 SECS   *HMD 10/81*\nOLDAUTH  DC    A(1),A(MSGAUTH),A(0)   AUTHORIZATION O.L.D.  *HMD 08/81*\nOLD      DC    A(1),A(MSG)\n*                                                           *HMD 01/85*\nMSG      DC    H'41',H'0',C'SYN04542I ENTER REQUEST (VERSION 5.2)'\nMSGAUTH  DC    H'36',H'0',C'SYN09943I COMMAND NOT AUTHORIZED'\n*                                                           *HMD 01/85*\n         EJECT\n***\n***  DYNAMIC STORAGE AREA\n***\nTSODSECT DSECT          RESUME USER DSECT\n         ORG  TSOUSER\nPSCBADDR DS   F             SAVE AREA FOR PSCB              *HMD 04/82*\nIOPLPTG  DS   4F\nCSOUT    DS   3F\nFLAGS    DS   X                                             *HMD 02/82*\nFCMD     EQU  X'80'                                         *HMD 02/82*\nFAUTH    EQU  X'40'         WE ARE ALREADY AUTHORIZED       *HMD 04/82*\nFSTART   EQU  X'20'         START OR MOUNT COMMAND ISSUED   *HMD 07/82*\nPTPB     PUTLINE MF=L                                       *HMD 08/81*\nCMDLEN   DS   F\nCOMMAND  DS   CL127                                         *HMD 08/81*\nLIDRECP  DS   F                                             *HMD 03/82*\nSYNCHPRM SYNCH MF=L                   SYNCH LIST FORM       *HMD 04/82*\nSYNCHL   EQU  *-SYNCHPRM                                    *HMD 07/82*\nTJIDLIST DS   0CL12\n         DS   3A\nTJIDTEST DS   F\nINPUT    DS   CL127                                         *HMD 08/81*\nWORKSIZE EQU  *-TSOUSER\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJCSOA\n         EJECT\n         IKJECT                                             *HMD 03/82*\n         EJECT                                              *HMD 03/82*\n         IKJPSCB\n         EJECT\n         IKJEBECA  ,                                        *HMD 03/82*\n         EJECT                                              *HMD 03/82*\n         CVT   LIST=YES,DSECT=YES                           *HMD 08/81*\n         EJECT                                              *HMD 03/82*\n         IHAPSA                                             *HMD 03/82*\n         EJECT                                              *HMD 03/82*\n         IHAASCB                                            *HMD 03/82*\n         EJECT                                              *HMD 03/82*\n         IEZJSCB                                            *HMD 04/82*\n         EJECT                                              *HMD 04/82*\n         IKJTCB  LIST=YES,DSECT=YES                         *HMD 04/82*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PERFORM": {"ttr": 4875, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PERF     TITLE 'RESET PREFORMANCE GROUP FROM TSO'\n*\n*        WRITTEN BY BOB JUCH\n*        POSTAL DATA CENTER\n*        800 CHERRY AVE.\n*        SAN BRUNO, CA.\n*\n*        ENHANCED BY BOB WENZEL\n*        MEMOREX CORPORATION\n*        SAN TOMAS AT CENTRAL EXPRESSWAY\n*        SANTA CLARA, CA. 95052\n*\nPERFORM  CSECT\n         SAVE (14,12),,PERFORM_&SYSDATE_&SYSTIME\n         REGS\n         LR    12,15\n         USING PERFORM,12\n         LR    2,13\n         LA    13,SAVEAREA\n         ST    13,8(2)\n         ST    2,4(13)\n         LR    2,1\n         USING CPPL,2\n         L     3,CPPLPSCB\n         CLC   0(2,3),=C'$U'\n         BNE   ABEND\n         LA    4,PARSELST\n         USING PPL,4\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         MVC   PPLCBUF,CPPLCBUF\n         CALLTSSR EP=IKJPARS,MF=(E,(4))\n         L     5,PARSEANS\n         USING PDL,5\n         L     R6,16          CVT ->\n         L     R6,556(R6)     ASVT ->\n         LA    R6,516(R6)     ADDR OF ASVTMAXU\n         L     R7,0(R6)       ASVTMAXU\n         ST    R7,ASCBMAX     SAVE MAX ASCB'S\nPRSEASID L     R7,ASIDNO      ADDR OF ASIDNO\n         CLI   0(R7),C'*'     WANT ONLY CURRENT USER?\n         BNE   PRSEASLN       NO\n         L     R7,16          CVT ->\n         L     R7,0(R7)       TCB CURRENT - OLD POINTER\n         L     R7,8(R7)       ASCB CURRENT - OLD POINTER\n         LH    R7,36(R7)      ASCBASID\n         STH   R7,ASIDNMBR    SAVE ASID NUMBER\n         B     RESET          GO RESET\nPRSEASLN LH    R7,ASIDNO+4    LENGTH OF ASIDNO\n         BCTR  R7,0           DECREMENT BY 1\n         LA    R8,X'70'       LENGTH OF WORK - 1\n         OR    R7,R8          LENGTHS FOR PACK INSTR.\n         L     R8,ASIDNO      ADDR OF ASIDNO\n         EX    R7,PACK        PACK ASIDNO\n         CVB   R7,WORK        CONVERT ASID TO BINARY\n         C     R7,ASCBMAX     DOES ASIDNO EXISTS?\n         BH    PRSEMXER       NO SAY SO AND QUIT\n         STH   R7,ASIDNMBR    SAVE ASID NUMBER\n         B     RESET          RESET PERFORMANCE GROUP\nPRSEMXER L     R7,ASCBMAX     MAX ASCB\n         MVC   LINE,PRSEMXTP\n         CVD   R7,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINE+27(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         LA    R7,LINE        SET UP FOR TPUT\n         TPUT  (R7),80\n         B     RETURN\nPACK     PACK  WORK,0(0,R8)\nPRSEMXTP DC    CL80'MAXIMUM NUMBER OF ASCBS IS'\nRESET    AUTH  ON\n         LH    0,ASIDNMBR\n         L     7,PGN\n         L     1,0(7)\n         SYSEVENT RESETPG,ASID=(0)    DO NOT USE PGN=(1)\n         SRL   1,8\n         B     TABLE(1)\nTABLE    B     HONORED\n         B     INVALID\n         B     NOTASGND\nHONORED  LA    1,MSG1\n         LA    0,L'MSG1\n         B     TPUT\nINVALID  LA    1,MSG2\n         LA    0,L'MSG2\n         B     TPUT\nNOTASGND LA    1,MSG3\n         LA    0,L'MSG3\nTPUT     TPUT  (1),(0)\n         AUTH  OFF\nRETURN   IKJRLSA (5)\n         L     13,SAVEAREA+4\n         LM    14,12,12(13)\n         SLR   15,15\n         BR    14\n         SPACE 3\nABEND    ABEND 2989,,STEP,SYSTEM\n         SPACE 3\nSAVEAREA DC    18F'0'\nPARSELST DC    A(0),A(0),A(ECB),A(PCL),A(PARSEANS),A(0),A(0)\nPARSEANS DC    A(0)\nECB      DC    F'0'\nMSG1     DC    C'RESET REQUEST HONORED'\nMSG2     DC    C'PERFORMANCE GROUP NUMBER INVALID'\nMSG3     DC    C'ASID NOT CURRENTLY ASSIGNED'\nEDMSK1   DC    XL8'4020202020202120'\nLINE     DC    CL80' '\nWORK     DC    D'0'\nCHAR     DC    D'0'\nASCBMAX  DC    F'0'\nASIDNMBR DC    H'0'\n         LTORG\n         SPACE 3\nPCL      IKJPARM DSECT=PDL\nASIDNO   IKJIDENT 'ASID NUMBER',ASTERISK,                              C\n               MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,                  C\n               DEFAULT='0'\nPGN      IKJIDENT 'PGN',INTEG,PROMPT='PERF. GROUP'\n         IKJENDP\n         IKJCPPL\n         IKJPPL\n         CVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROLOG": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    PROLOG &REG,&CODE,&ID,&CLEAR=YES,&REGS=YES,&FPR=F,            X\n               &GPR=R,&PARM=,&RENT=,&RREGS=(14,12),&SAVE=,&SP=0,       X\n               &TYPE=,&USE=NO,&USING=12,&LIST=\n.*\n.*       GLOBAL VARIABLES DESCRIPTION\n.*\n.*       &REGSSW   BOOLEAN FLAG TO SIGNAL WHETHER REGISTER EQUATES\n.*                    HAVE BEEN GENERATED IN A PREVIOUS EXPANSION\n.*\n.*       &REGSNM   CHARACTER STRING THAT CONTAINS THE EQUATE NAME\n.*                    PREFIX FOR THE GENERAL REGISTERS (SEE &RN\n.*                    VALUE DESCRIPTION BELOW)\n.*\n.*       &USNGSW   BOOLEAN FLAG TO SIGNAL WHETHER THE  XXUSE  MACRO\n.*                    IS TO BE USED IN-PLACE OF THE USING STATEMENT\n.*\n         GBLB  &REGSSW,&USNGSW\n         GBLC  &REGSNM\n         LCLA  &A,&B,&C\n         LCLC  &I,&N,&R,&RN,&X,&CSECT\n*  PROLOG  MACRO -- ASSEMBLY PROLOG  01/14/78 MARK GOTO\n         AIF   ('&LIST' EQ 'YES').COMNT\n*          (CODE LIST=YES FOR FURTHER DESCRIPTION)\n*\n         AGO   .NOCOMNT\n.COMNT   ANOP\n*    &REG,&CODE,&ID  CONSULT OPERANDS DESCRIPTION OF OS/VS2 SAVE MACRO\n*                    (SUPERVISOR SERVICES AND MACRO INSTR. GC28-0683)\n*\n*        *NOTE* = SPECIFYING &CODE=T INSURES THAT THE CONTENTS OF\n*                 R14 AND R15 ARE SAVED\n*        *NOTE* = IF THE LENGTH OF &ID IS > 8, THEN CURRENT DATE\n*                 AND TIME WILL BE APPENDED TO THE ID STRING\n*        *NOTE* = IF &RENT= PARAMETER IS SPECIFIED, THEN THE &REG\n*                 AND &CODE PARAMETERS ARE IGNORED\n*\n*\n*    ,&CLEAR=  YES/NO OPTION TO GENERATE CODE TO ZERO GETMAINED AREA\n*\n*        OPERATION = GENERATE CODE TO ZERO GETMAINED WORK AREA:\n*\n*          ORG *-2                          RE-ORIGIN OVER SVC\n*          LR  3,0                          SAVE DSECT LENGTH\n*          SVC 10                           ISSUE GETMAIN SVC\n*          LR  2,1                          COPY DSECT AREA ADDR\n*          SLR 14,14                        ZERO SOURCE ADDR\n*          LR  15,14                        ZERO SOURCE LENGTH\n*          MVCL 2,14                        ZERO DSECT AREA\n*\n*\n*    ,&REGS=   YES/NO OPTION TO GENERATE REGISTER REGISTER EQUATES\n*\n*        OPERATION = GENERATE/SUPPRESS REGISTER EQUATES\n*\n*\n*    ,&FPR=    PREFIX FOR GENERATING FLOATING POINT REGISTER EQUATES\n*\n*        OPERATION = GENERATE REGISTER EQUATES FOR 0,2,4,6\n*\n*\n*    ,&GPR=    PREFIX FOR GENERATING GENERAL REGISTER EQUATES\n*\n*        OPERATION = GENERATE REGISTER EQUATES FOR 0 THRU 15\n*\n*\n*    ,&PARM=   PARM ADDR REG.\n*                 OR\n*              (PARM ADDR REG. , LABEL)\n*\n*        OPERATION = LOAD DESIGNATED PARM REG. AND PROVIDE USING\n*                    STMT. AS FOLLOWS:\n*\n*          LR  \"PARM REG.\",1\n*                 OR\n*          LR  \"PARM REG.\",1\n*          USING \"LABEL\",\"PARM REG.\"\n*\n*        *NOTE* = \"PARM REG.\" MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n*    ,&RENT=   DSECT ADDR REG.\n*                 OR\n*              (DSECT ADDR REG. , DSECT NAME , DSECT SIZE)\n*\n*        OPERATION = ISSUE GETMAIN, CONNECT GETMAIN AREA AS NEW SAVE\n*                    AREA, LOAD DESIGNATED DSECT ADDR REG. AND PROVIDE\n*                    USING STMT. AS FOLLOWS:\n*\n*          GETMAIN R,LV=72,...\n*              .\n*          LR  \"DSECT REG.\",1\n*                          OR\n*          GETMAIN R,LV=\"DSECT SIZE\",...\n*              .\n*          LR  \"DSECT REG.\",1\n*          USING \"DSECT NAME\",\"DSECT REG.\"\n*\n*        *NOTE* = \"DSECT REG.\" MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*        *NOTE* = WHEN THIS PARAMETER IS SPECIFIED, &REG, &CODE AND\n*                 &SAVE= PARAMETERS ARE IGNORED\n*\n*\n*    ,&RREGS=  (FIRST REG. , LAST REG.)\n*\n*        OPERATION = SPECIFY REGS. TO BE SAVED AS FOLLOWS:\n*\n*          STM \"FIRST REG.\",\"LAST REG.\",12(13)\n*\n*        *NOTE* = THIS PARAMETER IS IGNORED EXCEPT WHEN &RENT= IS\n*                 SPECIFIED\n*\n*\n*    ,&SAVE=   (TEMP REG. , SAVE AREA)\n*                OR\n*    ,&SAVE=   SAVE AREA\n*\n*        OPERATION = GENERATE CODE TO CONNECT SAVE AREAS AS FOLLOWS:\n*\n*          LA  \"TEMP REG.\",\"SAVE AREA\"\n*          ST  13,4(,\"TEMP REG.\")\n*          ST  \"TEMP REG.\",8(,13)\n*          LR  13,\"TEMP REG.\"\n*                OR\n*          LR  15,13\n*          LA  14,\"SAVE AREA\"\n*          ST  13,4(,14)\n*          ST  14,8(,13)\n*          LR  13,14\n*          LM  14,15,12(15)\n*\n*        *NOTE* = SPECIFYING THIS PARAMETER CAUSES THAT THE\n*                 CONTENTS OF R14 AND R15 ARE SAVED\n*        *NOTE* = \"TEMP REG.\" MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*        *NOTE* = IF &RENT= IS SPECIFIED, THEN THIS PARAMETER IS\n*                 IGNORED\n*\n*\n*    ,&SP=     SUB-POOL NUMBER FOR RE-ENTRANT GETMAIN\n*\n*        OPERATION = SPECIFY THE GETMAIN SUB-POOL OPERAND:\n*\n*          GETMAIN R,LV=...,SP=...\n*\n*        *NOTE* = THIS PARAMETER DEFAULTS TO \"SP=0\" (IE. SUB-POOL\n*                 NUMBER ZERO)\n*\n*\n*    ,&TYPE=   'CSECT'   OR   ALIGNMENT SPECIFICATION\n*\n*        OPERATION = GENERATE 'CSECT', OR 'DS' ALIGNMENT STATEMENT\n*                    WITH &NAME (IF &NAME IS OMITTED, THEN &SYSECT)\n*                    PARAMETER IN THE NAME FIELD.  EXAMPLE:\n*\n*                    \"&NAME\" CSECT\n*                                      OR\n*                    \"&NAME\" DS  \"ANY VALID OPERAND\"\n*\n*\n*    ,&USE=    YES/NO OPTION TO GENERATE  XXUSE  MACROS IN PLACE OF\n*              USING STATEMENTS\n*\n*        OPERATION = GENERATE  XXUSE  MACROS -- USING STATEMENTS WITH\n*                    MEMORY (THE COMPLEMENTARY MACRO IS  XXDRP ;\n*                    WHICH MAY BE USED WITH NO OPERAND TO DROP ALL\n*                    ACTIVE BASE REGISTERS)\n*\n*\n*    ,&USING=  BASE REG.   OR   ,&USING=  (BASE REG. , LABEL)\n*\n*        OPERATION = GENERATE THE FOLLOWING CODE:\n*\n*          LR  \"BASE REG.\",15\n*          USING \"&NAME / &SYSECT\",\"BASE REG.\"\n*                          OR\n*          LR  \"BASE REG.\",15\n*          USING \"LABEL\",\"BASE REG.\"\n*\n*        *NOTE* = \"BASE REG.\" MUST A DECIMAL CONSTANT OR AN\n*                 EQUATE OF THE FORM  R\"X\"  WHERE \"X\" IS A\n*                 DECIMAL REGISTER NUMBER\n*\n*\n.NOCOMNT AIF   ('&REGS' EQ 'NO').REGSSW\n         AIF   (&REGSSW OR '&REGS' NE 'YES').NOREGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n&GPR.0   EQU   0\n&GPR.1   EQU   1\n&GPR.2   EQU   2\n&GPR.3   EQU   3\n&GPR.4   EQU   4\n&GPR.5   EQU   5\n&GPR.6   EQU   6\n&GPR.7   EQU   7\n&GPR.8   EQU   8\n&GPR.9   EQU   9\n&GPR.10  EQU   10\n&GPR.11  EQU   11\n&GPR.12  EQU   12\n&GPR.13  EQU   13\n&GPR.14  EQU   14\n&GPR.15  EQU   15\n&FPR.0   EQU   0\n&FPR.2   EQU   2\n&FPR.4   EQU   4\n&FPR.6   EQU   6\n         SPACE 1\n.REGSSW  ANOP\n&REGSNM  SETC  '&GPR'                      .SAVE GPR PREFIX\n&REGSSW  SETB  1                           .SET FLAG TO AVOID\n         AGO   .START                      . DUPLICATES IF RE-INVOKED\n.NOREGS  MNOTE *,'REGS SUPRESSED'\n.START   ANOP\n&RN      SETC  '&REGSNM'\n&USNGSW  SETB  (&USNGSW OR '&USE' EQ 'YES')\n&N       SETC  '&NAME'                     .SAVE LABEL NAME ON MACRO\n&CSECT   SETC  '&SYSECT'                   .SAVE CSECT NAME\n         AIF   ('&TYPE' EQ '').NOTYPE      .SKIP IF TYPE OMITTED\n&N       SETC  ''                          .SET NAME FIELD TO NULL\n         AIF   ('&TYPE' NE 'CSECT').DSTYPE .MUST BE DS ALIGNMENT OPRND\n&CSECT   SETC  '&NAME'                     .SET CSECT NAME\n&NAME    CSECT\n         AGO   .NOTYPE\n.DSTYPE  ANOP\n&NAME    DS    &TYPE\n.NOTYPE  AIF   ('&ID' EQ '').NULLID        .SKIP IF ID OMITTED\n&I       SETC  '&ID'\n         AIF   ('&ID' EQ '*').NAMEID       .IF ID REQUESTED, GO BUILD\n         AIF   (K'&I LE 8).SPLITID         .IF SIMPLE PGM NAME, GO USE\n         AGO   .EXPANID                    .OTHERWISE, GO EXPAND\n.NAMEID  AIF   ('&NAME' EQ '').CSECTID     .IF NO NAME, TRY CSECT ID\n&I       SETC  '&NAME'\n         AGO   .EXPANID                    .GO EXPAND NAME ID\n.CSECTID AIF   ('&CSECT' EQ '').E4         .IF NO CSECT NAME, ERROR\n&I       SETC  '&CSECT'\n.EXPANID ANOP                              .APPEND ID INFORMATION\n&I       SETC  '&I_&SYSDATE_'.'&SYSTIME'(1,2).':'.'&SYSTIME'(4,2)\n.SPLITID ANOP\n&A       SETA  ((K'&I+2)/2)*2+4            .COMPUTE BRANCH LENGTH\n&N       B     &A.(0,15)                    BRANCH AROUND ID\n&A       SETA  K'&I                        .SET IDENTIFIER LENGTH\n         DC    AL1(&A)                      LENGTH OF IDENTIFIER\n.SPLITLP AIF   (&A GT 24).SPLITUP\n&X       SETC  '&I'(&B+1,&A)               .ISOLATE REMAINDER OF ID\n         DC    CL&A'&X'                          IDENTIFIER\n         AGO   .REGS\n.SPLITUP ANOP\n&X       SETC  '&I'(&B+1,24)               .SUBSTRING IDENTIFIER\n         DC    CL24'&X'                          IDENTIFIER\n&B       SETA  &B+24                       .INCREMENT POSITION\n&A       SETA  &A-24                       .DECREMENT LENGTH\n         AGO   .SPLITLP                    .GO SPLIT ID FURTHER\n.NULLID  ANOP\n&N       DS    0H\n.REGS    AIF   ('&RENT' EQ '').REGSB       .SKIP IF NOT RE-ENTRANT\n&A       SETA  &RREGS(1)                   .SET FIRST RENT REG. NO.\n         AIF   (&A EQ 14).REGSA            .SKIP IF VALID\n         MNOTE *,'RENT. REG(1) SET TO 14'\n&A       SETA  14                          .CORRECT ERROR\n.REGSA   ANOP\n&B       SETA  &RREGS(2)                   .SET LAST RENT REG. NO.\n         AIF   (&B GE 3 AND &B LE 12).REGSI     .SKIP IF VALID\n         MNOTE *,'RENT. REG(2) SET TO 3'\n&B       SETA  3                           .CORRECT ERROR\n         AGO   .REGSI\n.REGSB   AIF   ('&REG' EQ '').E1           .ERROR IF REGS OMITTED\n         AIF   ('&CODE' NE '' AND '&CODE' NE 'T').E2 .INVALID CODE\n&R       SETC  '&REG(1)'                   .GET REG. EXPRESSION\n         AIF   (T'&REG(1) EQ 'N').REGSC    .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,K'&RN) NE '&RN').E3 .SKIP IF NOT REG. EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' LT '0' OR '&R' GT '15').E3 .ERROR IF INVALID\n.REGSC   ANOP\n&A       SETA  &R                          .SET FIRST SAVE REG. NO.\n         AIF   (&A LT 0 OR &A GT 15).E3    .ERROR IF BAD REG. NO.\n&B       SETA  &A                          .ASSUME LAST = FIRST\n         AIF   (N'&REG EQ 1).REGSF         .SKIP IF ONLY ONE REG.\n&R       SETC  '&REG(2)'                   .GET REG. EXPRESSION\n         AIF   (T'&REG(2) EQ 'N').REGSE    .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,K'&RN) NE '&RN').E3 .ERROR IF NOT REG. EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' LT '0' OR '&R' GT '15').E3 .ERROR IF INVALID\n.REGSE   ANOP\n&B       SETA  &R                          .SET LAST SAVE REG. NO.\n         AIF   (&B LT 0 OR &B GT 15).E3    .ERROR IF BAD REG. NO.\n.REGSF   AIF   ('&SAVE' NE '').REGSG       .TREAT AS CODE 'T' IF SAVE\n         AIF   ('&CODE' NE 'T').REGSI      .SKIP IF NOT CODE 'T'\n.REGSG   AIF   (&A GE 14 OR &A LE 2).REGSH .SKIP IF R14 THRU R2\n         STM   14,15,12(13)                 SAVE LINKAGE REGS\n         AGO   .REGSI\n.REGSH   ANOP\n&A       SETA  14                          .SET FIRST SAVE REG. NO.\n         AIF   (&B NE 14).REGSI            .INSURE THAT R15 IS SAVED\n&B       SETA  15                          .SET LAST SAVE REG. NO.\n.REGSI   ANOP\n&C       SETA  &A*4+20                     .COMPUTE DISPLACEMENT\n         AIF   (&C LE 75).REGSJ            .SKIP IF NOT TOO LARGE\n&C       SETA  &C-64                       .READJUST\n.REGSJ   AIF   (&A EQ &B).REGSK            .SKIP IF SAME REG. NO.\n         STM   &A,&B,&C.(13)                SAVE REGISTERS\n         AGO   .USING\n.REGSK   ST    &A,&C.(,13)                  SAVE A REGISTER\n.USING   AIF   ('&USING' EQ '').RENT       .ERROR IF OMITTED\n&R       SETC  '&USING(1)'                 .GET REG. EXPRESSION\n         AIF   ('&R' EQ '').USINGA         .SKIP IF NULL REG. NO.\n         AIF   (T'&USING(1) EQ 'N').USINGB .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,K'&RN) NE '&RN').USINGA       .ERROR IF NOT EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' GE '0' AND '&R' LE '15').USINGB .SKIP IF VALID\n.USINGA  ANOP\n&R       SETC  '15'                        .SET DEFAULT REG.\n.USINGB  AIF   (N'&USING EQ 1).USINGC      .SKIP IF NO SECOND OPERAND\n&N       SETC  '&USING(2)'                 .GET ADDRESSIBILITY NAME\n         AIF   ('&N' EQ '*').USINGH        .SKIP IF USING *,R\n         AIF   ('&N' NE '').USINGE         .SKIP IF NON-BLANK LABEL\n.USINGC  AIF   ('&NAME' EQ '').USINGD      .SKIP IF NO LABEL ON MACRO\n&N       SETC  '&NAME'                     .SET ADDRESSIBILITY NAME\n         AGO   .USINGE                     .GO GENERATE USING\n.USINGD  AIF   ('&CSECT' EQ '').USINGH     .SKIP IF NO CSECT NAME\n&N       SETC  '&CSECT'                    .SET ADDRESSIBILITY NAME\n.USINGE  AIF   ('&R' EQ '15').USINGF       .SKIP IF DEFAULT REG.\n         LR    &R,15                        LOAD BASE REGISTER\n.USINGF  AIF   (&USNGSW).USINGG            .GENERATE SPECIAL USING\n         USING &N,&RN.&R                    DEFINE ADDRESSIBILITY\n         AGO   .RENT\n.USINGG  ANOP\n         XXUSE &N,&RN.&R                    DEFINE ADDRESSIBILITY\n         AGO   .RENT\n.USINGH  ANOP\n         BALR  &R,0                         GET BASE ADDRESS\n         AIF   (&USNGSW).USINGI            .GENERATE SPECIAL USING\n         USING *,&RN.&R                     DEFINE ADDRESSIBILITY\n         AGO   .RENT\n.USINGI  ANOP\n         XXUSE *,&RN.&R                     DEFINE ADDRESSIBILITY\n.RENT    AIF   ('&RENT' EQ '').SAVE        .SKIP IF NOT RE-ENTRANT\n&R       SETC  '&RENT(1)'                  .GET REG. EXPRESSION\n&N       SETC  ''                          .SET NULL DSECT NAME\n&X       SETC  '72'                        .SET DEFAULT DSECT SIZE\n&A       SETA  0                           .INDICATE NO LENGTH FOUND\n         AIF   ('&R' EQ '').RENTB          .SKIP IF NULL REG. NO.\n.*REPLCD AIF   (T'&RENT(1) EQ 'N').RENTC   .SKIP IF VALID REG. NO.\n         AIF   (T'&R EQ 'N').RENTC         .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,1) NE '(').RENTA    .SKIP IF NOT PARENTHESIS\n         AIF   (N'&RENT NE 2).RENTB        .SKIP IF WRONG NO. OF OPRNDS\n&R       SETC  '&R'(2,K'&R-2)              .GET REG. NO.\n&X       SETC  '&RENT(2)'\n&A       SETA  2                           .SET POS. WHERE LEN. FOUND\n         AGO   .GETMAIN\n.RENTA   AIF   ('&R'(1,K'&RN) NE '&RN').RENTB   .SKIP IF NOT REG. EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' GE '0' AND '&R' LE '15').RENTC  .SKIP IF VALID\n.RENTB   ANOP\n&R       SETC  '13'                        .SET DEFAULT DSECT REG.\n.RENTC   AIF   (N'&RENT LT 2).GETMAIN      .SKIP IF NO DESCT NAME\n&N       SETC  '&RENT(2)'                  .SAVE DSECT NAME\n.RENTD   AIF   (N'&RENT LT 3).GETMAIN      .SKIP IF NO DSECT SIZE\n&X       SETC  '&RENT(3)'                  .SET DSECT LENGTH\n&A       SETA  3                           .SET POS. WHERE LEN. FOUND\n.GETMAIN GETMAIN R,LV=&X,SP=&SP\n         AIF   ('&CLEAR' NE 'YES').CONNECT .SKIP IF NO CLEAR\n         AIF   ('&X' EQ '72' OR &A EQ 0).XC     .GO USE XC\n         AIF   (T'&RENT(&A) NE 'N').MVCL   .GO USE MVCL\n         AIF   (&RENT(&A) LE 256).MVCL     .GO USE MVCL\n.XC      XC    0(&X,1),0(1)                 ZERO SAVE AREA\n         AGO   .CONNECT                    .GO CONNECT SAVE AREAS\n.MVCL    ORG   *-2                          RE-ORIGIN OVER SVC\n         LR    3,0                          SAVE DSECT LENGTH\n         SVC   10                           ISSUE GETMAIN SVC\n         LR    2,1                          COPY DSECT AREA ADDR\n         SLR   14,14                        ZERO SOURCE ADDR\n         LR    15,14                        ZERO COUNT\n         MVCL  2,14                         ZERO DSECT AREA\n.CONNECT ST    13,4(,1)                     SET OLD SAVE AREA ADDR\n         ST    1,8(,13)                     SET NEW SAVE AREA ADDR\n         LR    2,13                         COPY OLD SAVE AREA ADDR\n         LR    13,1                         RESET SAVE AREA PTR\n         LM    14,3,12(2)                   RESTORE DESTROYED REGS.\n         AIF   ('&R' EQ '13').RENTE        .SKIP IF DEFAULT REG.\n         LR    &R,13                        SET UP DSECT BASE\n.RENTE   AIF   ('&N' EQ '').PARM           .SKIP IF NO DSECT NAME\n         AIF   (&USNGSW).RENTF             .GENERATE SPECIAL USING\n         USING &N,&RN.&R                    DEFINE ADDRESSIBILITY\n         AGO   .PARM\n.RENTF   ANOP\n         XXUSE &N,&RN.&R                    DEFINE ADDRESSIBILITY\n         AGO   .PARM\n.SAVE    AIF   ('&SAVE' EQ '').PARM        .SKIP IF SAVE AREA OMITTED\n&X       SETC  ''                          .SET FLAG FOR SAVE RESTORE\n&A       SETA  1                           .SET POS. OF SAVE LABEL\n         AIF   (N'&SAVE LT 2).SAVEA        .SKIP IF REG. OMITTED\n&R       SETC  '&SAVE(1)'                  .GET REG. EXPRESSION\n&A       SETA  2                           .SET POS. OF SAVE LABEL\n         AIF   ('&R' EQ '').SAVEA          .SKIP IF NULL REG. NO.\n         AIF   (T'&SAVE(1) EQ 'N').SAVEB   .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,K'&RN) NE '&RN').SAVEA   .SKIP IF NOT EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' GE '0' AND '&R' LE '15').SAVEB  .SKIP IF VALID\n.SAVEA   ANOP\n&R       SETC  '14'\n         LR    15,13                        SAVE OLD SAVE AREA ADDR\n&X       SETC  '15'                        .INDICATE REGS. RESTORE\n.SAVEB   ANOP\n&N       SETC  '&SAVE(&A)'                 .GET SAVE AREA LABEL\n         LA    &R,&N                        GET NEW SAVE AREA ADDR\n         ST    13,4(,&R)                    SET OLD SAVE AREA ADDR\n         ST    &R,8(,13)                    SET NEW SAVE AREA ADDR\n         LR    13,&R                        RESET SAVE AREA PTR\n         AIF   ('&X' EQ '').PARM           .SKIP REGS. RESTORE\n         LM    &R,&X,12(&X)                 RESTORE DESTROYED REGISTERS\n.PARM    AIF   ('&PARM' EQ '').MEND        .SKIP IF PARM OMITTED\n&R       SETC  '&PARM(1)'                  .GET REG. EXPRESSION\n&N       SETC  ''                          .SET DEFAULT PARM NAME\n         AIF   ('&R' EQ '').PARMA          .SKIP IF NULL REG. NO.\n         AIF   (T'&PARM(1) EQ 'N').PARMB   .SKIP IF VALID REG. NO.\n         AIF   ('&R'(1,K'&RN) NE '&RN').PARMA   .SKIP IF NOT EQU\n&R       SETC  '&R'(K'&RN+1,K'&R-K'&RN)    .GET REG. NO.\n         AIF   ('&R' GE '0' AND '&R' LE '15').PARMB  .SKIP IF VALID\n.PARMA   ANOP\n&R       SETC  '1'                         .SET DEFAULT REG.\n.PARMB   AIF   (N'&PARM EQ 1).PARMC        .SKIP IF NO SECOND OPERAND\n&N       SETC  '&PARM(2)'                  .GET PARM DSECT NAME\n.PARMC   AIF   ('&R' EQ '1').PARMD         .SKIP IF DEFAULT REG.\n         LR    &R,1                         LOAD PARM REGISTER\n.PARMD   AIF   ('&N' EQ '').MEND           .SKIP IF NO PARM DSECT NAME\n         AIF   (&USNGSW).PARME             .GENERATE SPECIAL USING\n         USING &N,&RN.&R                    DEFINE ADDRESSIBILITY\n         AGO   .MEND\n.PARME   ANOP\n         XXUSE &N,&RN.&R                    DEFINE ADDRESSIBILITY\n.MEND    MEXIT\n.E1      IHBERMAC 18,360                   .REG PARAMETER MISSING\n         MEXIT\n.E2      IHBERMAC 37,360,&CODE             .INVALID CODE SPECIFIED\n         MEXIT\n.E3      IHBERMAC 36,360,&REG              .INVALID REGS. SPECIFIED\n         MEXIT\n.E4      IHBERMAC 78,360                   .CSECT NAME NULL\n         AGO   .REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SM": {"ttr": 5129, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SM       TITLE 'SESSION MANAGER SWITCH ROUTINE'\n***********************************************************************\n*                                                                     *\n*   MODULE NAME  =  SM                                                *\n*                                                                     *\n*   DESCRIPTIVE  =  THE SM COMMAND IS A TSO COMMAND TO TURN-OFF AND   *\n*                      SUBSEQUENTLY TURN-ON THE TSO SESSION MANAGER   *\n*                                                                     *\n*   COMMAND SYNTAX  =  SM  OFF/ON                                     *\n*                                                                     *\n*   CSECT NAME  =  SM                                                 *\n*                                                                     *\n*   COPYRIGHT  =  NONE                                                *\n*                                                                     *\n*   STATUS  =  MVS / SP 1.3                                           *\n*                                                                     *\n*   FUNCTION  =                                                       *\n*      TO PROVIDE A TSO COMMAND THAT WILL TEMPORARILY DISABLE (AND    *\n*      SUBSEQUENTLY RE-ENABLE) THE TSO SESSION MANAGER (NOTE -        *\n*      THIS COMMAND HAS NO EFFECT IF USED IN A TSO SESSION WHERE      *\n*      THE TSO SESSION MANAGER WAS NOT INITIALLY ACTIVE)              *\n*                                                                     *\n*      OPERATION  =                                                   *\n*         1.  ESTABLISH LOCAL ADDRESSIBILITY                          *\n*         2.  LOCATE THE ONLINE TSO PROTECTED-STEP-CONTROL-BLOCK      *\n*             (PSCB) AND EXIT (WITH A MESSAGE) IF NOT FOUND           *\n*         3.  TEST APF-AUTHORIZATION:                                 *\n*             3.1  IF AUTHORIZED, THEN PROCEED TO GET KEY 0           *\n*             3.2  IF NOT AUTHORIZED BUT EXECUTING FROM LPA, THEN     *\n*                  ISSUE SVC 235 TO GET APF-AUTHORIZATION AND         *\n*                  PROCEED TO GET KEY 0                               *\n*             3.3  IF NOT AUTHORIZED AND NOT EXECUTING FROM LPA,      *\n*                  THEN DISPLAY ERROR MESSAGE AND EXIT                *\n*         4.  GET KEY 0 USING MODESET MACRO                           *\n*         5.  LOCATE THE TSO TERMINAL-STATUS-BLOCK (TSB), THE TSO     *\n*             LOGON-WORK-AREA (LWA), THE TSO SESSION MANAGER MAIN     *\n*             WORK AREA (RDFBLOCK), AND THE SAVED RDFBLOCK PTR        *\n*             (LAST FOUR BYTES OF PSCB USER FIELD - PCSBU)            *\n*         6.  TEST THE ACTIVE ENVIRONMENT AND GO PERFORM ERROR EXIT   *\n*             PROCESSING IF THE TSO SESSION MANAGER IS NOT ACTIVE     *\n*             OR CAN NOT BE RESTORED                                  *\n*         7.  IF THE TSO SESSION MANAGER IS ACTIVE, THEN:             *\n*             7.1  RESET PSW KEY AND EXIT IF \"SM ON\" SPECIFIED        *\n*             7.2  PROCEED THROUGH THE STEPS NEEDED TO DISABLE THE    *\n*                  TSO SESSION MANAGER:                               *\n*                  7.2.1  STATUS-STOP THE SESSION MANAGER TCB         *\n*                  7.2.2  SET FLAGS SO THAT SESSION MANAGER THINKS    *\n*                         THAT A FULL-SCREEN COMMAND IS ACTIVE        *\n*                  7.2.3  SAVE RDFBLOCK PTR IN THE PSCBU+4 FIELD      *\n*                  7.2.4  ISSUE TPUT TO CLEAR THE TERMINAL SCREEN     *\n*                  7.2.5  RESET TERMINAL DISPLAY MANAGER OPTIONS      *\n*                         FLAGS IN THE TSB                            *\n*                  7.2.6  IF VTAM, DISABLE FULL-SCREEN MODE           *\n*                  7.2.7  RESET PSW KEY AND EXIT                      *\n*         8.  IF THE TSO SESSION MANAGER IS NOT ACTIVE, THEN:         *\n*             8.1  RESET PSW KEY AND EXIT IF \"SM OFF\" SPECIFIED       *\n*             8.2  PROCEED THROUGH THE STEPS NEEDED TO ENABLE THE     *\n*                  TSO SESSION MANAGER:                               *\n*                  8.2.1  ENABLE TERMINAL DISPLAY MANAGER OPTIONS     *\n*                         FLAGS IN THE TSB                            *\n*                  8.2.2  RESTORE RDFBLOCK PTR FROM THE PSCBU+4 FIELD *\n*                  8.2.3  STATUS-START THE SESSION MANAGER TCB        *\n*                  8.2.4  MODIFY TSB FLAGS SO THAT SESSION MANAGER    *\n*                         MAY RESUME TERMINAL DISPLAY CONTROL         *\n*                  8.2.5  IF VTAM, ENABLE FULL-SCREEN MODE            *\n*                  8.2.6  ISSUE TPUT TO CLEAR THE TERMINAL SCREEN     *\n*                  8.2.7  RESET PSW KEY AND EXIT                      *\n*                                                                     *\n*   MACROS USED  =                                                    *\n*        CVT                       SYSTEM CVT MAPPING DSECT           *\n*        EPILOG                    OXY RE-ENTRANT RESTORE SEQUENCE    *\n*        EXTRACT                   SYSTEM CONTROL-BLOCK LOCATOR       *\n*        FREEMAIN                  SYSTEM FREE MEMORY OPERATION       *\n*        GETMAIN                   SYSTEM GET MEMORY OPERATION        *\n*        IHAASCB                   SYSTEM ASCB MAPPING DSECT          *\n*        IHAASXB                   SYSTEM ASXB MAPPING DSECT          *\n*        IHAPSA                    SYSTEM PSA MAPPING DSECT           *\n*        IKJCPPL                   TSO CPPL MAPPING DSECT             *\n*        IKJPSCB                   TSO PSCB MAPPING DSECT             *\n*        IKJTSB                    TSO TSB MAPPING DSECT              *\n*        LWA                       EQUS FOR TSO LOGON-WORK-AREA       *\n*        MODESET                   SYSTEM PSW-KEY/PSW-MODE CONTROL    *\n*        PROLOG                    OXY RE-ENTRANT SAVE SEQUENCE       *\n*        RDFBLOCK                  EQUS FOR SESSION MGR RDFBLOCK AREA *\n*        STATUS                    SYSTEM TCB DISPATCH CONTROL        *\n*        STAX                      SYSTEM ATTENTION-EXIT CONTROL      *\n*        STFSMODE                  TSO SET-TERM OPTIONS OPERATION     *\n*        STTMPPMD                  TSO SET-TERM OPTIONS OPERATION     *\n*        TESTAUTH                  SYSTEM APF-AUTHORIZATION CHECKER   *\n*        TPUT                      TSO TERMINAL OUTPUT OPERATION      *\n*        XKJCBUF                   OXY TSO CMD BUFFER MAPPING DSECT   *\n*                                                                     *\n*   NOTES  =                                                          *\n*      REGISTER CONVENTIONS  =  STANDARD CONVENTIONS                  *\n*         REGISTERS 0 - 1    =  WORK REGISTERS                        *\n*         REGISTER  2        =  TEMPORARY PSCB/ASCB/CVT BASE REGISTER *\n*         REGISTER  3        =  TEMPORARY ASXB BASE REGISTER          *\n*         REGISTER  4        =  TSO LWA BASE REGISTER                 *\n*         REGISTER  5        =  TSO TSB BASE REGISTER                 *\n*         REGISTER  6        =  SESSION MANAGER RDFBLOCK BASE         *\n*         REGISTERS 7 - 9    =  UNUSED                                *\n*         REGISTER 10        =  ADDRESS OF PSCBU+4 LOCATION           *\n*         REGISTER 11        =  WORK/SAVE AREA BASE ADDRESS           *\n*         REGISTER 12        =  CSECT BASE ADDRESS                    *\n*         REGISTER 13        =  SAVE AREA BASE ADDRESS                *\n*         REGISTER 14        =  RETURN ADDRESS                        *\n*         REGISTER 15        =  ENTRY POINT ADDRESS REGISTER          *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* UPDATED 21FEB85, WILLIAM SMITH, SYNTEX (USA), INC., PALO ALTO, CA.  *\n*                                                                     *\n* . SOURCE:  OCCIDENTAL PETROLEUM, HOUSTON, TX.; COURTESY OF SAM BASS *\n* . THIS CODE HAS BEEN TESTED AT THE 8409 PUT LEVEL OF MVS/SP 1.3.3   *\n*   JES2 WITH TSO/E RELEASE 2.0                                       *\n* . MODIFICATION HISTORY AND NOTES                                    *\n*   - AN IN-LINE DSECT FOR THE \"LWA\" (LOGON WORK AREA) HAS BEEN       *\n*     REPLACED WITH COMMENTS AND THE IBM MAPPING MACRO, \"IKJEFLWA\",   *\n*     HAS BEEN CODED IN ITS PLACE                                     *\n*   - WARNING:  IKJEFLWA IS *RESTRICTED* MATERIAL AND CANNOT BE       *\n*     DISTRIBUTED WITH THIS MODULE.  IKJEFLWA IS DISTRIBUTED ON THE   *\n*     OPTIONAL MATERIALS TAPE, FEATURE 7029 (1600 BPI) OR 7031 (6250  *\n*     BPI), VOL=SER=SYM-01, FILE 1 IN THE \"AAPVT\" (PRIVATE MACROS),   *\n*     FILE FOR FMID JBB1213.  IF YOU ARE NOT LICENSED FOR THE OPTION- *\n*     AL MATERIALS, SIMPLY REMOVE THE COMMENTS FROM THE IN-LINE LWA   *\n*     DSECT TO CREATE THE MAPPING DSECT FOR USE DURING ASSEMBLY.      *\n* . TO ELIMINATE NEED FOR THE AUTHORIZATION SVC, LINK SM AS AN APF    *\n*   AUTHORIZED COMMAND AND ADD THE COMMAND NAME TO THE IKJEFTE2 TSO   *\n*   AUTHORIZED COMMAND TABLE; THE SVC CALL SHOULD BE NO-OP'ED.        *\n* . IF SM IS EXECUTED FROM ISPF OPTION 4 OR 6 AND THE SM MODULE IS    *\n*   LOCATED IN THE PLPA, BE SURE TO UPDATE THE ISPF TABLE \"ISPTCM\" TO *\n*   ALLOW ISPF TO LOCATE THE MODULE; CONSULT THE ISPF INSTALLATION    *\n*   GUIDE FOR FURTHER DETAILS ON UPDATING THIS TABLE                  *\n*                                                                     *\n***********************************************************************\nSM       PROLOG (R14,R12),,SM_MVS/SP1.3,RENT=(R11,SMWORKA,SMWORKL), ....\n               TYPE=CSECT\n         L     R1,0(,R1)           GET CBUF ADDR\n         LH    R2,2(,R1)           GET OFFSET\n         LA    R2,4(R1,R2)         COMPUTE OPERAND ADDR\n         MVC   SMWOPRND,0(R2)      COPY OPERAND\n         OI    SMWONOFF,C' '       UPCASE OPERAND\n         MVC   SMWXTRCT(XTRACTL),XTRACT      INITIALIZE REMOTE PLIST\n         EXTRACT SMWPSCBA,,MF=(E,SMWXTRCT)   EXTRACT PSCB ADDRESS\n         L     R2,SMWPSCBA         GET PSCB ADDRESS\n         LA    R2,0(R2)            CLEAR HIGH-ORDER BYTE\n         LTR   R2,R2               IS PSCB ADDRESS VALID?\n         BZ    SMNOTSO               NO, GO PRINT NON-TSO MESSAGE\n         USING PSCB,R2               YES, USE IKJPSCB MAPPING\n         LA    R10,PSCBU+4         COMPUTE ADDRESS OF PSCB USER WORD\n         DROP  R2                  DROP PSCB\n         TESTAUTH FCTN=1,STATE=YES,RBLEVEL=1\n         LTR   R15,R15             CAN MODESET BE ISSUED?\n         BZ    SMKEY0                YES, GO ISSUE MODESET NOW\n         L     R2,CVTPTR             NO, GET CVT ADDRESS\n         USING CVT,R2              USE CVT MACRO MAPPING DSECT\n         SLR   R3,R3               ZERO REGISTER\n         ICM   R3,B'0111',CVTLPDIR GET LPA DIRECTORY ADDRESS\n         CR    R3,R12              IS \"SM\" MODULE IN LPA?\n         BNL   SMNOAPF               NO, GO PRINT NOT AUTH. MESSAGE\n         MVI   SMWFLAGS,SMWS235      YES, SET \"SVC 235 USED\" FLAG\n         STAX  DEFER=YES           DEFER ATTENTION INTERRUPTS\n         LA    R0,1                REQUEST AUTHORIZATION ON\n*        SVC   223                 SET AUTHORIZATION ON\n         DROP  R2                  DROP CVT\nSMKEY0   DS    0H\n         MODESET KEY=ZERO,MODE=SUP\n         USING PSA,R0              USE IHAPSA MAPPING\n         L     R2,PSAAOLD          GET ASCB ADDRESS\n         DROP  R0                  DROP PSA\n         USING ASCB,R2             USE IHAASCB MAPPING\n         L     R3,ASCBASXB         GET ASXB ADDRESS\n         USING ASXB,R3             USE IHAASXB MAPPING\n         L     R4,ASXBLWA          GET LOGON WORK AREA ADDRESS\n         DROP  R3                  DROP ASXB\n         L     R5,ASCBTSB          GET TSB ADDRESS\n         DROP  R2                  DROP ASCB\n         USING LWA,R4              USE LWA DSECT MAPPING\n         CLC   =C'   LWA  ',LWALWA DOES LWA CONTAIN A VALID ID?\n         BNE   SMERROR               NO, MUST BE ENVIRONMENTAL ERROR\n         USING TSB,R5              USE IKJTSB MAPPING\n         L     R6,LWAXXXX          GET SESSION MANAGER RDFBLOCK ADDR.\n         LA    R6,0(R6)            CLEAR HIGH-ORDER BYTE\n         LTR   R6,R6               IS RDFBLOCK ADDRESS VALID?\n         BZ    SMSWON                NO, GO SEE IF CAN BE RESTORED\n         CLC   =C'RDF ',RDFRDF(R6) DOES RDF CONTAIN A VALID ID?\n         BNE   SMSWON                NO, GO SEE IF RDF CAN BE RESTORED\n         TM    TSBFLG5,TSBATMP     IS SESSION MANAGER IN CONTROL?\n         BZ    SMSTART               NO, RE-START SESSION MANAGER\n         CLI   SMWONOFF,C'N'       WAS C'ON' SPECIFIED?\n         BE    SMRESET               YES, SKIP BECAUSE ALREADY ON\n         L     R7,RDFTCB(R6)       GET RDF TCB ADDRESS\n         STATUS STOP,TCB=(R7)      STOP SESSION MANAGER TASK\n         OI    RDFFLGS(R6),RDFFSCR INDICATE FULLSCREEN APPLICATION\n         ST    R6,0(R10)           SAVE RDFBLOCK ADDRESS INTO PSCB\n         MVC   LWAXXXX,=F'0'       ZERO RDFBLOCK ADDRESS\n         TPUT  CLEAR,CLEARL,FULLSCR     ERASE SCREEN\n         STTMPMD OFF,KEYS=NO       DISABLE SESSION MANAGER\n         TM    TSBFLG5,TSBVTAM     IS THIS A VTAM SESSION?\n         BZ    SMRESET               NO, GO RESET KEY AND EXIT\n         STFSMODE OFF                YES, FULLSCREEN PROTECT MODE OFF\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\nSMSWON   DS    0H\n         L     R6,0(R10)           GET SAVED RDFBLOCK ADDRESS\n         LA    R6,0(R6)            CLEAR HIGH-ORDER BYTE\n         LTR   R6,R6               WAS RDFBLOCK ADDRESS SAVED?\n         BZ    SMERROR               NO, CANNOT RESTORE SESSION MGR.\n         CLC   =C'RDF ',RDFRDF(R6) DOES RDF CONTAIN A VALID ID?\n         BNE   SMERROR               NO, CANNOT RESTORE SESSION MGR.\n         CLI   SMWONOFF,C'F'       WAS C'OFF' SPECIFIED?\n         BE    SMRESET               YES, SKIP BECAUSE ALREADY OFF\n         STTMPMD ON,KEYS=ALL         NO, ENABLE SESSION MANAGER\n         ST    R6,LWAXXXX          RESTORE RDFBLOCK ADDRESS\n         MVC   0(4,R10),=F'0'      ZERO PSCB USER WORD\n         L     R7,RDFTCB(R6)       GET RDF TCB ADDRESS\n         STATUS START,TCB=(R7)     START SESSION MANAGER TASK\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\nSMSTART  DS    0H\n         OI    TSBFLG5,TSBATMP+TSBKEYS  ENABLE SESSION MANAGER\n         NI    RDFFLG1(R6),X'FF'-(RDFFSCRA+RDFFSCRK)\n         TM    TSBFLG5,TSBVTAM          IS THIS A VTAM SESSION?\n         BZ    SMCLEAR                    NO, SKIP STFSMODE MACRO\n         STFSMODE ON,INITIAL=YES        ENABLE FULL SCREEN MODE\nSMCLEAR  TPUT  CLEAR,CLEARL,FULLSCR     ERASE SCREEN\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\n         DROP  R4,R5\nSMERROR  DS    0H\n         TPUT  ERROR,ERRORL        PRINT SM UNAVAILABLE MESSAGE\nSMRESET  DS    0H\n         MODESET KEY=NZERO,MODE=PROB\n         TM    SMWFLAGS,SMWS235    WAS SVC 235 WAS USED?\n         BZ    SMEPILOG              NO, GO EXIT\n         SLR   R0,R0                 YES, REQUEST AUTHORIZATION OFF\n*        SVC   223                 SET AUTHORIZATION OFF\n         STAX  DEFER=NO            ALLOW ATTENTION INTERRUPTS\n         B     SMEPILOG            GO EXIT\nSMNOTSO  DS    0H\n         TPUT  NOPSCB,NOPSCBL      PRINT NON-TSO SESSION MESSAGE\n         B     SMEPILOG            GO EXIT IF NOT A TSO SESSION\nSMNOAPF  DS    0H\n         TPUT  NOAUTH,NOAUTHL      PRINT NOT AUTHORIZED MESSAGE\n         B     SMEPILOG            GO EXIT IF NOT AUTHORIZED\nSMEPILOG EPILOG (14,12),RC=0,RENT=(R11,SMWORKL)\n         SPACE 2\n         LTORG\n         SPACE 2\nRDFRDF   EQU   X'00'               OFFSET WITHIN RDF OF RDF BLOCK ID\nRDFFLGS  EQU   X'90'               OFFSET WITHIN RDF OF RDFFLAG BYTE\nRDFSLEEP EQU   X'80'                 ADFMDF01 IS IN A WAIT\nRDFFSCR  EQU   X'40'                 TPUT FULLSCR BEING USED\nRDFWAITF EQU   X'20'                 ADFMDF01 TCB IS WAITING\nRDFLOCKF EQU   X'10'                 THE LOCAL LOCK IS HELD\nRDFTWAIT EQU   X'08'                 DO NOT ISSUE SYSEVENT TERMWAIT\nRDFTGET  EQU   X'04'                 OUTSTANDING TGET FLAG\nRDFEXIT  EQU   X'02'                 SESSION MANAGER IS TO QUIT\nRDFFSREF EQU   X'01'                 RETURNING TO FULL SCREEN MODE\nRDFFLG1  EQU   X'91'               OFFSET WITHIN RDF OF RDFFLG1 BYTE\nRDFTPUT  EQU   X'80'                 WINBLOCK(S) UPDATED BUT SCREEN\n*                                    * NOT YET UPDATED\nRDFTSOIN EQU   X'40'                 LINE TO THE TMP\nRDFMODAL EQU   X'20'                 MODE INDICATOR\nRDFFSCRA EQU   X'10'                 DO NOT INTERCEPT I/O\nRDFFSCRK EQU   X'08'                 LEAVE TSBKEYS=1 WHEN GOING TO\n*                                    * FULL SCREEN MODE FLAG\nRDFATTN  EQU   X'04'                 ATTN HAS BEEN ENTERED\nRDFTCB   EQU   X'94'               OFFSET WITHIN RDF OF SM. TCB ADDR.\nXTRACT   EXTRACT 0,'S',FIELDS=(PSB),MF=L\nXTRACTL  EQU   *-XTRACT\nCLEAR    DC    X'40115D7E1140401D4013' KEY STRING\n         DC    X'3CC76000'\n         DC    X'3C4F4000'\n         DC    X'3CD66000'\n         DC    X'3C404000'\n         DC    X'13'\nCLEARL   EQU   *-CLEAR\nERROR    DC    C'SESSION MANAGER CAN NOT BE RESTORED OR IS UNAVAILABLE'\nERRORL   EQU   *-ERROR\nNOPSCB   DC    C'UNABLE TO LOCATE TSO CONTROL BLOCKS'\nNOPSCBL  EQU   *-NOPSCB\nNOAUTH   DC    C'UNABLE TO OBTAIN MVS AUTHORIZATION'\nNOAUTHL  EQU   *-NOAUTH\n         EJECT\nSMWORKA  DSECT\nSMWSAVE  DS    18F                 REGISTER SAVE AREA\nSMWXTRCT DS    XL(XTRACTL)         REMOTE EXTRACT PARAMETER LIST\nSMWPSCBA DS    A                   PSCB ADDRESS\nSMWOPRND DS    0CL2                COMMAND OPERAND\nSMWFLAGS DS    XL1                 LOCAL ROUTINE FLAGS\nSMWS235  EQU   X'80'               SVC 235 USED FOR AUTHORIZATION\nSMWONOFF DS    CL1                 OPERAND BYTE\nSMWORKL  EQU   *-SMWORKA\n         EJECT\n*LWA     DSECT\n*********************************************************************\n*      THE LOGON WORK AREA WILL CONTAIN INFORMATION WHICH IS        *\n*      NECESSARY FOR THE LOGON/LOGOFF PROCESSING ROUTINES.  IT      *\n*      WILL CONTAIN CONTROL BLOCK POINTERS, ENTRANCE LISTS AND      *\n*      PARAMETER LISTS.                                             *\n*********************************************************************\n*LWAPPTR  DS    A\n*LWALWA   DC    CL8'   LWA  '         /*LWA CONTROL BLOCK ID      */\n*\n*         LWA AREA DELETED\n*\n*         ORG   LWA+X'94'\n*LWAXXXX  DS    A                     /*POINTER TO SESSION MANAGER*/\n*                                    /*RDFBLOCK AREA             */\n*\n*         ORG   LWA+X'9C'\n*LWATCB02 DS    A                     /*POINTER TO TCB FOR        */\n*                                    /*IKJEFT02                  */\n*\n*         ORG   LWA+X'A0'\n*LWAPIOWA DS    A                     /*POINTER TO I/O DCB        */\n*                                    /*WORK TABLES               */\n*         DS    F                     /*RESERVED                  */\n*         DS    F                     /*RESERVED                  */\n*\n*         DS    0D\n*LWALEN   EQU   *-LWA\n*         EJECT\n         PRINT NOGEN\n         CVT   DSECT=YES\n         SPACE 2\n         IHAPSA\n         SPACE 2\n         IHAASCB\n         SPACE 2\n         IHAASXB\n         SPACE 2\n         PRINT GEN\n         EJECT\n         IKJEFLWA\n         EJECT\n         IKJPSCB\n         EJECT\n         IKJTSB LIST=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPS@PRIM": {"ttr": 5381, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n)BODY\n%------------------------  VPS/ISPF SELECTION MENU  ----------------------- &LVL\n%SELECT OPTION ===>_ZCMD                                       + USERID - &ZUSER\n%\n%   1 +VPS CONTROL - Display the VPS/TSO full-screen printer\n+                    control interface\n%\n%   2 +VPSPRINT    - Direct a data set to local/remote JES2 or VPS\n+                    printers for hardcopy reproduction\n%\n%\n+Enter Session Manager Mode%===>_SMG+  (YES or NO)\n%\n%\n%\n%\n%NOTE: +VPSPRINT may be used to print a data set on both IBM remote or local\n%      +JES2 controlled printers as well as printers within the VPS network.\n%      +VPSPRINT may also be used interchangeably with any application that\n%      +has been designed to use IBM's \"DSPRINT\" program offering (5798-CPF).\n%\n%\n+Press%END KEY+to terminate VPS/ISPF+\n%\n%\n)INIT\n  .HELP    = VPST0000\n  .CURSOR  = ZCMD\n  &ZHTOP   = ISR00003                   /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ISR91000                   /* TUTORIAL INDEX - 1ST PAGE  */\n  &LVL     = '4.1'                      /* CURRENT LEVEL OF VPS - 4.1 */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                 1,'CMD(%VPSOPT01)'\n                 2,'CMD(%VPSOPT02)'\n               ' ',' '\n                 *,'?' )\n  &SMMODE = TRANS (&SMG YES,Y YE,Y Y,Y YO,Y *,N)\n  VPUT (SMMODE) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPSOPT01": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* ------------------------------------------------------------------ */\n/*  VTAM PRINTER SUPPORT - RELEASE 4.1                                */\n/*    - UPDATED 10NOV84, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT      */\n/*      . REFRESH THE SCREEN AFTER INVOCATION OF VPS TSO COMMAND      */\n/*        PROCESSOR, \"VPS CONTROL\"                                    */\n/* ------------------------------------------------------------------ */\nISPEXEC CONTROL DISPLAY REFRESH\nISPEXEC SELECT CMD(VPS)\nISPEXEC LOG MSG(VPS033)\nISPEXEC SETMSG MSG(VPS030)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPSOPT02": {"ttr": 5385, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG SMMODE DSN PORT CNT HEADER PAGEJECT FORMNAME FORMS -\n       NUMBRING CARGCNTL FCBID OCLASS PL TM BM -\n       PAGELEN TMARGIN BMARGIN OPTIONS\n/* ------------------------------------------------------------------ */\n/* VTAM PRINTER SUPPORT - RELEASE 4.1                                 */\n/*   - UPDATED 13NOV84, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT       */\n/*   . INITIAL RELEASE OF DIALOG MANAGER FRONT-END FOR VPSPRINT       */\n/* ------------------------------------------------------------------ */\nSET &NOMSG = NOEJMESS\nIF &DEBUG = DEBUG THEN -\n   DO\n      CONTROL MSG NOFLUSH CONLIST SYMLIST\n      SET &NOMSG =\n   END\nELSE -\n   CONTROL NOMSG NOFLUSH NOLIST\nISPEXEC VGET (PORT,SMMODE)\nISPEXEC DISPLAY PANEL(VPSPRINT)\nIF &LASTCC = 8 THEN -\n   DO\n      ISPEXEC SETMSG MSG(VPS032)\n      EXIT CODE(8)\n   END\n/* ------------------------------------------------------------------ */\nBEGIN: -\n   SET &COPIES = &STR(COPIES(&CNT))\n/* ------------------------------------------------------------------ */\nIF &HEADER \u00ac=  THEN -\n   SET &HEADER = &STR(NOHEADER )\nELSE -\n   SET &HEADER =\n/* ------------------------------------------------------------------ */\nIF &FORMNAME =  THEN -\n   SET &FORMS =\nELSE -\n   SET &FORMS = &STR(FORMS(&FORMNAME) )\n/* ------------------------------------------------------------------ */\n   SET &NUMBRING = &STR(&NUMBRING)\n/* ------------------------------------------------------------------ */\n   SET &PAGEJECT = &STR(&PAGEJECT)\n/* ------------------------------------------------------------------ */\nIF &FCBID = THEN -\n   SET &FCBID =\nELSE -\n   SET &FCBID = &STR(FCB(&FCBID) )\n/* ------------------------------------------------------------------ */\n   SET &CLASS = &STR(CLASS(&OCLASS))\n/* ------------------------------------------------------------------ */\nIF &PL =  THEN -\n   SET &PAGELEN =\nELSE -\n   SET &PAGELEN = &STR(PAGELEN(&PL) )\n/* ------------------------------------------------------------------ */\nIF &TM =  THEN -\n   SET &TMARGIN =\nELSE -\n   SET &TMARGIN = &STR(TMARGIN(&TM) )\n/* ------------------------------------------------------------------ */\nIF &BM =  THEN -\n   SET &BMARGIN =\nELSE -\n   SET &BMARGIN = &STR(BMARGIN(&BM) )\n/* ------------------------------------------------------------------ */\nIF &OPTIONS =  THEN -\n   SET &OPTIONS =\n/* ------------------------------------------------------------------ */\nIF &SMMODE =  Y THEN -\n   DO\n     SET &NOMSG =\n     ISPEXEC CONTROL DISPLAY SM\n   END\nELSE -\n   ISPEXEC CONTROL DISPLAY LINE\nVPSPRINT &DSN +\n         &PORT +\n         &NOMSG +\n         &COPIES +\n         &HEADER+\n         &PAGEJECT +\n         &FORMS+\n         &NUMBRING +\n         &CARGCNTL +\n         &FCBID+\n         &CLASS +\n         &PAGELEN+\n         &TMARGIN+\n         &BMARGIN+\n         &OPTIONS\nIF &LASTCC = 0 THEN -\n   DO\n     ISPEXEC LOG     MSG(VPS034)\n     ISPEXEC DISPLAY MSG(VPS031) CURSOR(DSN)\n     IF &LASTCC = 8 THEN -\n        EXIT\n     ELSE -\n     GOTO BEGIN\n   END\nELSE -\n   EXIT CODE(&LASTCC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VPSPRINT": {"ttr": 5388, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")ATTR\n)BODY\n%----------------------  VPSPRINT Hardcopy Output Panel  -----------------------\n%COMMAND ===>_ZCMD                                           + Userid   - &ZUSER\n%                                                             +Terminal - &ZTERM\n+Enter data set name%===>_DSN                                         +\n+\n+Output print destination%===>_PORT    +   (Rnnn, RMnnn, RMTnnn, Unnn)\n+Number of copies to print%===>_CNT+       (1-999 copies)\n+\n+VPSPRINT header desired%===>_Z+\n+Eject prior to header print%===>_Z+       (Y=YES N=NO)\n+\n+Forms I.D. name%===>_FORMNAME+            (Default=STD.)\n+Numbered data set%===>_Z+                 (Y=NUM N=NONUM)\n+Carriage control present%===>_Z+          (S=SINGLE D=DOUBLE C=CCHAR)\n+\n+FCB image name%    ===>_Z   +             (6=6LPI/8=8LPI)\n+Output print class%===>_Z+                (A-Z and 1-9)\n+\n+Page length%          ===>_PL+\n+Top margin spacing%   ===>_TM+\n+Bottom margin spacing%===>_BM+            (1-99 lines)\n+Miscellaneous options%===>_OPTIONS                                            +\n+\n+\n)INIT\n .HELP     = VPST0020\n .CURSOR   = DSN\n .ZVARS    = '(HEADER,PAGEJECT,NUMBRING,CARGCNTL,FCBID,OCLASS)'\n  &CNT     = 1              /* DEFAULT NUMBER OF PRINTED COPIES = 1   */\n  &OCLASS  = A              /* DEFAULT OUTPUT (SYSOUT) CLASS = A      */\n  &FCBID   = 6              /* DEFAULT FORMS CONTROL BUFFER  = 6      */\n\n)PROC\n  VER (&DSN,NONBLANK,MSG=VPS010)\n  VER (&PORT,NONBLANK,MSG=VPS011)\n  VER (&CNT,RANGE,1,999,MSG=VPS012)\n  VER (&HEADER,LIST,Y,N,MSG=VPS013)\n  VER (&PAGEJECT,LIST,Y,N,MSG=VPS014)\n  VER (&NUMBRING,LIST,Y,N,MSG=VPS015)\n  VER (&CARGCNTL,LIST,S,D,C,MSG=VPS016)\n  VER (&OCLASS,NONBLANK,MSG=VPS017)\n  VER (&PL,RANGE,1,99,MSG=VPS018)\n  VER (&TM,RANGE,1,99,MSG=VPS019)\n  VER (&BM,RANGE,1,99,MSG=VPS020)\n\n  &HEADER    = TRANS (&HEADER  N,NOHEADER *,' ')\n  &PAGEJECT  = TRANS (&PAGEJECT  Y,EJECT N,NOEJECT *,NOEJECT)\n  &NUMBRING  = TRANS (&NUMBRING Y,NUM N,NONUM *,NONUM)\n  &CARGCNTL  = TRANS (&CARGCNTL S,SINGLE D,DOUBLE C,CCHAR *,SINGLE)\n\n  VPUT (PORT) PROFILE\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPST0000": {"ttr": 5390, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL --------------------  VPS/ISPF INTERFACE  ------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%                     -----------------------------------\n%                     |      VPS/ISPF Tutorial Index    |\n                      -----------------------------------\n+  The%VPS/ISPF+option allows you to select one of 2 functions as listed\n   below.  To select a function, enter a one-character digit as listed on the\n   VPS/ISPF Selection Menu, which is displayed when option%V+is entered on the\n   Primary Option Menu.\n+\n   The following topics are presented in sequence, or may be selected by number:\n    %1+- VPS CONTROL ... Invoke the VPS CONTROL full-screen, printer management\n                         and control TSO interface\n    %2+- VPSPRINT ...... Direct a data set to a local or remotely attached\n                         printer, plotter, or terminal printer for hardcopy\n                         processing\n\n     \"VTAM Printer Support System:  Installation and Operations Manual\"\n\n     \"VTAM Printer Support System:  TSO Command Processor User's Guide\"\n\n     \"MVS/TSO/VTAM Data Set Print\"  PDOM - SB21-2070\n\n)PROC\n   &ZSEL = TRANS( &ZCMD\n                1,VPST0010\n                2,VPST0020\n                )\n   &ZUP  = ISR00003\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPST0010": {"ttr": 5392, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL -------------------  VPS/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%                     -----------------------------------\n%                     |           VPS CONTROL           |\n                      -----------------------------------\n+  The%VPS CONTROL+option allows you to invoke the VTAM Printer Support\n   System TSO command processor.  This command processor, known as%VPS\n   CONTROL,+is a full-screen command processor used for controlling any\n   printer within the VPS network.  This interface allows a user not\n   familiar with MVS or VPS commands to control one or more VPS printers.\n\n   Security is built into VPS Control to assure uninterrupted and continuous\n   operation of VPS and the network of printers it controls.  Criteria is\n   established, based upon a security table, by the technical support personnel\n   responsible for the VPS system.  Once the VPS primary option panel has been\n   selected and displayed, requests may be initiated by supplying a printer\n   name and an appropriate control option.  After VPS has processed the user's\n   requested option, the primary menu is re-displayed and VPS Control is now\n   ready for the next request.\n\n   The%User's Guide+provides all information necessary for using VPS CONTROL.\n   This publication may be ordered from the vendor, Levi, Ray & Shoup, Inc.,\n   2387 West Monroe St., Springfield, Illinois 62704, (217) 793-3800.\n)PROC\n   &ZUP   = VPST0000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VPST0020": {"ttr": 5394, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "%TUTORIAL -------------------  VPS/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                                      +\n+\n%                     -----------------------------------\n%                     |             VPSPRINT            |\n                      -----------------------------------\n+  The%VPSPRINT+option allows a TSO user to invoke the VTAM Printer Support\n   System TSO command processor known as%VPSPRINT.+ VPSPRINT was originally\n   written to provide a keyword-for-keyword replacement for the unsupported\n   IBM product known as DSPRINT.  Moreover, VPSPRINT not only emulates DSPRINT\n   but optionally provides numerous functional enhancements as well as elimi-\n   nates all of the operational deficiencies inherent within DSPRINT.\n\n   A non-VSAM data set name and a printer destination are all that is required\n   to cause a SYSOUT data set to be generated for hardcopy reproduction.  The\n   data is placed on the spool for printing by either%JES2/3 or VPS.+ All other\n   displayed fields may be optionally specified; miscellaneous options such as\n   \"HEXSP\" may entered, separated by blanks, in the \"miscellaneous\" options\n   field.  For ease of use the copy count, output class, and FCB have been\n   arbitrarily set to 1, A, and 6, respectively.  VPSPRINT forces a default of\n   HEADER, NOEJECT, NUM, SINGLE; PAGELEN, BMARGIN, and TMARGIN have no defaults.\n   Consult%\"VPS Control Command Processor User's Guide\",+available from the\n   vendor, for detailed operational guidelines.\n\n)PROC\n   &ZUP  = VPST0000\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPS01": {"ttr": 5396, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VPS010   'DATA SET NAME REQUIRED'        .HELP=*     .ALARM=YES\n'AN EXISTING OS DATA SET NAME IS REQUIRED FOR PRINTING.'\n\nVPS011   'PRINTER ADDRESS REQUIRED'      .HELP=*     .ALARM=YES\n'A VALID PRINTER PORT ADDRESS (VTAM LUNAME) IS REQUIRED FOR PRINTING.'\n\nVPS012   'ENTER VALID COPY COUNT'        .HELP=*     .ALARM=YES\n'SPECIFY A COPY-COUNT IN THE RANGE OF 1 TO 999 COPIES.'\n\nVPS013   'ENTER A HEADER OPTION'         .HELP=*     .ALARM=YES\n'SPECIFY \"Y\" FOR THE HEADER TO PRINT (DEFAULT) OR \"N\" TO SUPPRESS IT.'\n\nVPS014   'ENTER PAGE EJECT OPTION'       .HELP=*     .ALARM=YES\n'SPECIFY \"Y\" FOR A HEADER PAGE EJECT OR \"N\" (DEFAULT) TO SUPPRESS IT.'\n\nVPS015   'IS DATA SET NUMBERED ?'        .HELP=*     .ALARM=YES\n'SPECIFY \"Y\" FOR A NUMBERED DATA SET OR \"N\" (DEFAULT) FOR NO NUMBERS.'\n\nVPS016   'ENTER SPACING DESIRED'         .HELP=*     .ALARM=YES\n'SPECIFY \"S\" FOR SINGLE SPACING, \"D\" FOR DOUBLE, \"C\" FOR CNTL. CHARS.'\n\nVPS017   'ENTER OUTPUT CLASS'            .HELP=*     .ALARM=YES\n'ENTER A VALID JES2 OUTPUT CLASS (DEFAULT=A).  IT MAY BE A-Z OR 1-9.'\n\nVPS018   'ENTER THE PAGE LENGTH'         .HELP=*     .ALARM=YES\n'ENTER A PAGE LENGTH IN THE RANGE OF 1 TO 99 LINES PER PAGE.'\n\nVPS019   'ENTER TOP MARGIN'              .HELP=*     .ALARM=YES\n'ENTER THE NUMBER OF LINES TO BE LEFT BLANK AT THE TOP OF THE PAGE.'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VPS02": {"ttr": 5398, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VPS021   'ENTER BOTTOM MARGIN'           .HELP=*     .ALARM=YES\n'ENTER THE NUMBER OF LINES TO BE LEFT BLANK AT THE BOTTOM OF THE PAGE.'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VPS03": {"ttr": 5633, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VPS030   'VPS CONTROL COMPLETED'         .HELP=*     .ALARM=NO\n'VPS CONTROL WAS TERMINATED VIA THE EXIT (X) PRIMARY OPTION.'\n\nVPS031   'DATA SET PRINTED'              .HELP=*     .ALARM=NO\n'&DSN. HAS BEEN QUEUED FOR OUTPUT PROCESSING.'\n\nVPS032   'VPSPRINT TERMINATED'           .HELP=*     .ALARM=NO\n'VPSPRINT WAS TERMINATED VIA THE END OR RETURN COMMAND.'\n\nVPS033   'VPS     - CONTROL'\n'VPS CONTROL PROCESSING WAS TERMINATED BY SELECTION OF THE EXIT (\"X\") OPTION.\n\nVPS034   'VPS     - DSPRINT'\n'&DSN. QUEUED FOR OUTPUT PROCESSING, DEST=&PORT..'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WIZARD": {"ttr": 5635, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "WIZARD   TITLE 'DCMS SRM DATA DISPLAY ROUTINE'\n************************************************\n*                                              *\n*  MODIFIED 9/10/80 BY J. LEMA AT MEMOREX CORP *\n*  TO CORRECT 0C9 PROBLEM DUE TO REGISTER NOT  *\n*  CLEARED PRIOR TO INSERT CHARACTER.          *\n*  FIX ID IS JFL80254                          *\n*                                              *\n************************************************\n*                                              *\n*  MODIFIED 5/21/81 BY THE MYSTERY PROGRAMMER  *\n*  TO CORRECT SCALING OF LSCT VARIABLES        *\n*  FIX ID IS RDS81142                          *\n*                                              *\n*  MODIFIED 13OCT81 --- FLAGGED FJP/13OCT81    *\n*     . SCALE DOWN THE RUA TO APPEAR RIGHT     *\n*     . CHANGE EXIT PFK FROM R12 TO R3         *\n*                                              *\n* ----------------------------------------------------------------------\n*\n*  MODIFIED 02FEB84 --- WJS/SYNTEX TECHNICAL SUPPORT\n*     . RE-ASSEMBLED/LINKED ON A SP/1.3.3 SYSTEM USING JBB1326 PRIVATE\n*       MACROS USING ASSEMBLER-H (5668-962)\n*     . ADDED THE FOLLOWING MACROS TO ELIMINATE MESSAGE \"IEV044 -\n*       UNDEFINED SYMBOL\" IN MACRO IRARMCT:  IRAICSP, IRARSPL, IEFENFPM;\n*       THIS CHANGE WAS INSTITUTED AFTER OPENING AN INCIDENT WITH SRM\n*       DEVELOPMENT\n*\n* ----------------------------------------------------------------------\nWIZARD   DCMSTART R,LV=4096,STAE=YES,IOCB=YES\n         L     R3,CVTPTR\n         USING CVT,R3\n         L     R11,CVTOPCTP\n         DROP  R3\n         USING RMCNS,R11\n*                                     DO STATIC DISPLAY ITEMS  LINE 1\n         LA    R5,STATLINE\n         MVC   0(79,R5),BLANKS\n         L     R2,RMCTWMST\n         LA    R2,WMSTID-WMST(R2)      SET\n         MVC   0(L'IPSMSG,R5),IPSMSG      CURRENT\n         MVC   L'IPSMSG(2,R5),0(R2)              IPS\n*                                     DO STATIC DISPLAY ITEMS  LINE 2\n         LA    R5,79(R5)\n         MVC   0(79,R5),BLANKS\n         MVC   0(79,R5),ERVTITL\n         L     R2,RMPTCPU\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   5(3,R5),DECWORK4+1\n         L     R2,RMPTIOC\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   13(3,R5),DECWORK4+1\n         L     R2,RMPTERV\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   21(4,R5),DECWORK4\n*                                     DO STATIC DISPLAY ITEMS  LINE 3\n         LA    R5,79(R5)\n         MVC   0(79,R5),BLANKS\n         MVC   0(79,R5),RFCTITL\n         L     R10,RMCTWMST\n         USING WMST,R10\n*        L     R2,WMSTIPC\n*        ST    R2,DECWORK1\n*        BAL   R14,@DECIMAL\n*        MVC   06(02,R5),DECWORK4+1\n*        MVC   09(01,R5),DECWORK4+3\n         MVC   07(4,R5),WMSTIPC\n         MVC   18(4,R5),WMSTIPI\n         MVC   29(4,R5),WMSTIPM\n*                                                          LINE 4\n         LA    R5,79(R5)\n         MVC   0(79,R5),BLANKS\n*\n         LA    R5,79(R5)\n         MVC   0(79,R5),BLANKS\n*                                                          LINE 5\n         TM    @MODE,X'0F'\n         BO    RUNSRMS\nDOFLASH  MVI   @MODE,X'7F'\n         B     RUNSRMS\nSTARTMD  MVI   @MODE,X'0F'\n         B     RUNSRMS\nRUNSRMS  EQU   *\n         XC    IOCBWAIT(4),IOCBWAIT\n         LA    R0,SCREEN\n         LA    R1,DOMAINZ\n         BAL   R14,@CLEAR\n         LA    R5,LINE17           COPY\n         LA    R2,5                    STATIC\n         LA    R6,STATLINE                   LINES\nSTATLOOP EQU   *\n         MVC   0(79,R5),0(R6)      ONTO\n         LA    R5,79(R5)               CURRENT\n         LA    R6,79(R6)                      SCREEN\n         BCT   R2,STATLOOP\n*\n**\n*\n         LH    R7,RMCTDMNC\n         L     R6,RMCTDMDT\n         LA    R5,DOMAINZ\n         MVC   0(79,R5),PAGETITL\n         ST    R7,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   26(3,R5),DECWORK4+1\n         LA    R4,13               ***LIMIT OF DOMAINS DISPLAYED\n         CR    R4,R7\n         BNL   DODOMAIN\n         LR    R7,R4\nDODOMAIN EQU   *\n         LA    R5,79(R5)\n         MVC   0(79,R5),DMNTITL\nDMNLOOP  EQU   *\n         LA    R5,79(R5)\n         BAL   R15,DMNLINE\n         LA    R6,DMDTLEN(R6)\n         BCT   R7,DMNLOOP\n         LA    R5,79(R5)\n         MVI   0(R5),C' '\n         MVC   1(79,R5),0(R5)\n         LA    R4,1(R4)\n         ST    R4,DMLINE\n         LA    R5,DOMAINZ    +158\n         LA    R6,RCTNAMES\n*        LA    R3,11\n*        LA    R4,RMCASRC\n*WAPLOOP EQU   *\n*        L     R2,0(R4)\n*        ST    R2,DECWORK1\n*        BAL   R14,@DECIMAL\n*        MVC   48(22,R5),0(R6)\n*        MVC   72(4,R5),DECWORK4\n*        LA    R6,22(R6)\n*        LA    R4,4(R4)\n*        LA    R5,79(R5)\n*        BCT   R3,SWAPLOOP\n**       SH    R5,=H'79'        BACKUP OVER LAMONT CRANSTON\n**       MVC   48(22,R5),0(R6)\n*        LH    R2,RMCAINUS\n*        ST    R2,DECWORK1\n*        BAL   R14,@DECIMAL\n*        MVC   72(4,R5),DECWORK4\n*        LA    R5,79(R5)\n*        LA    R6,22(R6)\n*        MVC   48(22,R5),0(R6)\n*        LH    R2,RMCACIUS\n*        ST    R2,DECWORK1\n*        BAL   R14,@DECIMAL\n*        MVC   72(4,R5),DECWORK4\n*        LA    R5,079(R5)\n         MVC   48(28,R5),RCTTITL\n         LA    R5,79(R5)\n         MVC   48(28,R5),RCDTITL\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         SR    R2,R2\nRCTLOOP  EQU   *\n         LH    R2,RCCUICTL        U I C\n         ST    R2,@LOW\n         LH    R2,RCCUICTH\n         ST    R2,@HI\n         LH    R2,RCVUICA\n         ST    R2,@AV\n         L     R2,RCVUICC\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,RCCCPUTL      C P U\n         SRL   R2,4\n         ST    R2,@LOW\n         LH    R2,RCCCPUTH\n         SRL   R2,4\n         ST    R2,@HI\n         LH    R2,RCVCPUA\n         SRL   R2,4\n         ST    R2,@AV\n         L     R2,RCVCPUC\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,RCCPTRTL       P A G E\n         ST    R2,@LOW\n         LH    R2,RCCPTRTH\n         ST    R2,@HI\n         LH    R2,RCVPTR\n         ST    R2,@AV\n         L     R2,RCVBPTCT\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,RCCASMTL       A S M Q\n         ST    R2,@LOW\n         LH    R2,RCCASMTH\n         ST    R2,@HI\n         LH    R2,RCVASMQA\n         ST    R2,@AV\n         L     R2,RCVASMQ\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW      DEMAND PAGE\n         LH    R2,RCCDPRTL\n         ST    R2,@LOW\n         LH    R2,RCCDPRTH\n         ST    R2,@HI\n         LH    R2,RCVDPR\n         ST    R2,@AV\n         L     R2,RCVBDPCT\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW      CPU + DEMAND PAGE\n*        LH    R2,RCCCPUPL\n*        ST    R2,@LOW\n*        LH    R2,RCCCPUPL\n*        ST    R2,@HI\n*        LH    R2,RCVCPUA\n*        ST    R2,@AV\n*        L     R2,RCVCPUC\n*        ST    R2,@CT\n         LH    R2,RCCCPUPL      C P U\n         SRL   R2,4\n         ST    R2,@LOW\n         LH    R2,RCCCPUPH\n         SRL   R2,4\n         ST    R2,@HI\n         LH    R2,RCVCPUA\n         SRL   R2,4\n         ST    R2,@AV\n         L     R2,RCVCPUC\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW      PAGE DELAY WITH DEMAND PAGING\n         LH    R2,RCCMSPTL\n         ST    R2,@LOW\n         LH    R2,RCCMSPTH\n         ST    R2,@HI\n         LH    R2,RCVMSPP\n         ST    R2,@AV\n*        L     R2,RCVCPUC\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW      PAGE DELAY\n         LH    R2,RCCPDLTL\n         ST    R2,@LOW\n         LH    R2,RCCPDLTH\n         ST    R2,@HI\n         LH    R2,RCVMSPP\n         ST    R2,@AV\n*        L     R2,RCVCPUC\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         LH    R2,RCCTOTUT\n         ST    R2,@LOW\n         LH    R2,RCCLCHUT\n         ST    R2,@HI\n         LH    R2,RCCLCHRR\n         ST    R2,@AV\n         LH    R2,RCVTOTDF\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW      A V Q\n*        LH    R2,RCCPDLTL\n*        ST    R2,@LOW\n*        LH    R2,RCCPDLTH\n*        ST    R2,@HI\n         LH    R2,RCVAFQC\n         ST    R2,@AV\n         LH    R2,RCVAVQC\n         ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,LSCTNAME\n         LA    R5,79(R5)\n         LA    R5,79(R5)\n         LA    R5,79(R5)\nLSCTLOOP EQU   *\n         MVC   48(28,R5),LSTTITL\n         LA    R5,79(R5)\n         MVC   48(28,R5),LSCTITL\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,LSCTUCTL        U I C\n         ST    R2,@LOW\n         LH    R2,LSCTUCTH\n         ST    R2,@HI\n         LH    R2,RCVUICA                                  RDS81142\n         ST    R2,@AV                                      RDS81142\n*        L     R2,RCVUICC\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,LSCTASTL        A S M\n         BCT   R2,*+4              DCR BY 1 FOR PRINT      RDS81142\n         ST    R2,@LOW\n         LH    R2,LSCTASTH\n         BCT   R2,*+4              DCR BY 1 FOR PRINT      RDS81142\n         ST    R2,@HI\n         LH    R2,RCVASMQA                                 RDS81142\n         ST    R2,@AV                                      RDS81142\n*        L     R2,RCVUICC\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         LH    R2,LSCTAFQL        A F Q\n         ST    R2,@LOW\n         LH    R2,LSCTAFQH\n         ST    R2,@HI\n         LH    R2,RCVAFQA                                  RDS81142\n         ST    R2,@AV                                      RDS81142\n*        L     R2,RCVUICC\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         L     R2,LSCTMTEL        T H I N K\n         BAL   R15,LSSCALE   SCALE TO 1/10 SEC.            RDS81142\n         ST    R2,@LOW\n         L     R2,LSCTMTEH\n         BAL   R15,LSSCALE   SCALE TO 1/10 SEC.            RDS81142\n         ST    R2,@HI\n         L     R2,LSCTMTE\n         BAL   R15,LSSCALE   SCALE TO 1/10 SEC.            RDS81142\n         ST    R2,@AV\n*        L     R2,LSCTMTED\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n         XC    @LOW(16),@LOW\n         L     R2,LSCTCNT         N U M B E R\n         ST    R2,@LOW\n*        L     R2,LSCTMTEH\n         ST    R2,@HI\n*        L     R2,LSCTMTE\n         ST    R2,@AV\n*        L     R2,LSCTMTED\n*        ST    R2,@CT\n         BAL   R15,XLINE\n         MVC   48(8,R5),0(R6)\n         LA    R6,8(R6)\n         LA    R5,79(R5)\n*-------       END OF LSCT DISPLAY\n         B     NEXTPAGE                                    RDS81142\n         SPACE 5                                           RDS81142\nLSSCALE  EQU   *           SCALE THINK TIME TO TENTH SECS. RDS81142\n         LTR   R2,R2       SKIP IF ZERO                    RDS81142\n         BZR   R15                                         RDS81142\n         L     R3,=F'100'  MILLISECONDS TO 1/10 SEC.       RDS81142\n         SR    R8,R8                                       RDS81142\n         LR    R9,R2                                       RDS81142\n         A     R9,=F'50'   ROUND OFF                       RDS81142\n         DR    R8,R3                                       RDS81142\n         LR    R2,R9                                       RDS81142\n         BR    R15                                         RDS81142\nNEXTPAGE CLI   @MODE,X'7F' .       IS IT FLASH MODE?       RDS81142\n         BNE   SRMPUT1 .           IF NOT, GO TO R/W\nSRMPUT0  EQU   *\n         MVI   @MODE,X'7F'\n         OI    IOCBFLGD,IOCBDYON\n         OI    IOCBFLGC,IOCBCCLR+IOCBCRAO+IOCBCFRA\n         TRMIO IOCB,WRITE,FORMAT=SCREEN,IMAGE=DOMAINZ\n         PFKEY DEF=NO,ATTN=SRMEXIT,ENTER=RUNSRMS,        FJP/13OCT81   X\n               K9=RUNSRMS,K3=SRMEXIT,K12=STARTMD         FJP/13OCT81\n         B     RUNSRMS\nSRMPUT1  EQU   *\n         MVI   @MODE,X'0F'\n         NI    IOCBFLGD,255-IOCBDYON\n         OI    IOCBFLGC,IOCBCCLR+IOCBCRAO+IOCBCFRA\n         TRMIO IOCB,FORMAT=SCREEN,IMAGE=DOMAINZ\n         PFKEY DEF=DCMSOVER,ATTN=SRMEXIT,ENTER=RUNSRMS,  FJP/13OCT81   X\n               K9=DCMSOVER,K3=SRMEXIT,K12=DOFLASH        FJP/13OCT81\n         EJECT\nDMNLINE  EQU   *\n         USING DMDT,R6\n         SR    R2,R2\n         IC    R2,DMDTNO\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   0(3,R5),DECWORK4+1\n         IC    R2,DMDTLO\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   4(3,R5),DECWORK4+1\n         IC    R2,DMDTHI\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   08(3,R5),DECWORK4+1\n         IC    R2,DMDTWT\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   12(3,R5),DECWORK4+1\n         LH    R2,DMDTMPLT\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   16(3,R5),DECWORK4+1\n         LH    R2,DMDTRUA\n         LA    R2,8(,R2)           ADD FOR ROUNDING  FJP/13OCT81\n         SRL   R2,4                DIVIDE BY 16      FJP/13OCT81\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   20(3,R5),DECWORK4+1\n         LH    R2,DMDTGOOU\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   24(3,R5),DECWORK4+1\n         LH    R2,DMDTCMPL\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   28(3,R5),DECWORK4+1\n         LH    R2,DMDTOUTU\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   32(3,R5),DECWORK4+1\n         LH    R2,DMDTINCU\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   36(3,R5),DECWORK4+1\n         MVC   DECWORK4(4),=CL4'   0'\n         SR    R1,R1             CLEAR R1 FOR IC  -- JFL80254\n         IC    R1,DMDTWT        CURRENT WEIGHT\n         MH    R1,DMDTRUA        TIMES\n         SR    R0,R0             READY USER AVG\n         LH    R2,DMDTMPLT       DIVIDED BY\n         LTR   R2,R2\n         BZ    CCINODR\n         DR    R0,R2             MPL TARGET\n         ST    R1,DECWORK1       EQUALS\n         BAL   R14,@DECIMAL      CONTENTION INDEX\nCCINODR  MVC   40(3,R5),DECWORK4+1\n         MVI   45(R5),C'|'\n         BR    R15\n         EJECT\nXLINE    EQU   *\n         L     R2,@LOW\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   56(4,R5),DECWORK4\n         L     R2,@HI\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   61(4,R5),DECWORK4\n         L     R2,@AV\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   66(4,R5),DECWORK4\n         L     R2,@CT\n         ST    R2,DECWORK1\n         BAL   R14,@DECIMAL\n         MVC   72(4,R5),DECWORK4\n         BR    R15\n         EJECT\nIPSMSG   DC    C' CURRENT IPS =  '\nINITINT  DC  F'500'      .      FIVE SECOND INTERVAL\nSCREEN   SFMT\nDOMAINZ  FIELD 79\nLINE2    FIELD 79\nLINE3    FIELD 79\nLINE4    FIELD 79\nLINE5    FIELD 79\nLINE6    FIELD 79\nLINE7    FIELD 79\nLINE8    FIELD 79\nLINE9    FIELD 79\nLINE10   FIELD 79\nLINE11   FIELD 79\nLINE12   FIELD 79\nLINE13   FIELD 79\nLINE14   FIELD 79\nLINE15   FIELD 79\nLINE16   FIELD 79\nLINE17   FIELD 79\nLINE18   FIELD 79\nLINE19   FIELD 79\nLINE20   FIELD 79\nLINE21   FIELD 79\nLINE22   FIELD 79\nLINE23   FIELD 79,INTEN=LO,CURSOR=AFTER\n         SFEND\nPAGETITL DS    0CL79\n         DC    CL40'DOMAIN TABLE (DMDT)       NNN DOMAINS   '\n         DC    CL40'     |  SWAP ANALYSIS DATA    (RMCA)    '\nDMNTITL  DS    0CL79\n         DC    CL40'DMN MIN MAX WT MPLT RUA GOU CMP OUT INC '\n         DC    CL40'CCI  |  SWAP REASONS          COUNTS  '\nERVTITL  DS    0CL79\n         DC    CL79' CPU=NNN I/O=NNN ENQ=NNN   '\nRFCTITL  DS    0CL79\n         DC    CL79' CPU = NN.N I/O = NN.N MSO = NN.N '\nRCDTITL  DS    0CL30\n         DC    CL30'VARIABLE LOW HIGH AVG  COUNT  '\nRCTTITL  DS    0CL30\n         DC    CL30'RESOURCE CONTROL TABLE (RCT) '\nLSCTITL  DS    0CL30\n         DC    CL30'VARIABLE LOW HIGH AVG         '\nLSTTITL  DS    0CL30\n         DC    CL30'LOGICAL SWAP CONTROL  (LSCT) '\nRCTNAMES DS    0C\n         DC    CL8'U I C   '\n         DC    CL8'C P U   '\n         DC    CL8'P A G E '\n         DC    CL8'A S M Q '\n         DC    CL8'DEMAND  '\n         DC    CL8'DMD+CPU '\n         DC    CL8'PGDLY+DM'\n         DC    CL8'PGDELAY '\n         DC    CL8'L C H   '\n         DC    CL8'A V Q   '\n         DC    CL8'        '\nLSCTNAME DS    0C\n         DC    CL8'UIC     '\n         DC    CL8'ASMQ    '\n         DC    CL8'AFQ     '\n         DC    CL8'THINK   '\n         DC    CL8'# LS    '\n         DC    CL8'        '\nREASONS  DS    0C\n         DC    CL22'TERMINAL INPUT    (01)'\n         DC    CL22'TERMINAL OUTPUT   (02)'\n         DC    CL22'LONG WAIT         (03)'\n         DC    CL22'AUX STG SHORTAGE  (04)'\n         DC    CL22'REAL STG SHORTAGE (05)'\n         DC    CL22'DETECTED WAIT     (06)'\n         DC    CL22'REQUESTED         (07)'\n         DC    CL22'CAP: ENQ EXCHANGE (08)'\n         DC    CL22'CAP: WLM EXCHANGE (09)'\n         DC    CL22'CAP: UNILATERAL   (0A)'\n         DC    CL22'ONLY THE SHADOW KNOWS '\n         DC    CL22'IN CORE USERS         '\n         DC    CL22'OUTREADY USERS        '\nSRMEXIT  LINK  EP=CLR3270                                   FJP/13OCT81\n         B     SRMEXIT1   B FOR DCMSTOP ALIGNMENT           FJP/13OCT81\nSRMEXIT1 DCMSTOP RC=(15)                                    FJP/13OCT81\n         DSGEN  SCREEN\nDMLINE   DS    F .\n@LOW      DC   F'0'\n@HI       DC   F'0'\n@AV       DC   F'0'\n@CT       DC   F'0'\n@MODE    DS   X .\nSTATLINE DS    5CL79\n         EJECT\n         CVT   DSECT=YES\n         EJECT\nRMCNS    RMCNS\n         EJECT\nDMDT     IRADMDT\n         EJECT\nWAMT     IRAWAMT\n         EJECT\nWMST     IRAWMST\n         EJECT\nICSP     IRAICSP\n         EJECT\nRSPL     IRARSPL\n         EJECT\nENFPM    IEFENFPM\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT359/FILE359.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT359", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}