{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012128000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE471.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE471.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x04'", "DS1TRBAL": "b'\\xca\\xac'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03r\\x00\\x00\\x03r\\x00\\t\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ATEND": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ATEND  &USRNAME\n         COPY  STRCGBLS\n         LCLB  &ATGEND            ATEND_GENNED                23009.\n         LCLB  &TDLGEND           TDL_GENNED                  23011.\n         LCLB  &FINREQD           FIN_LABEL_REQD              23014.\n         LCLC  &INFO              INFO                        23017.\n         STRCTRAC  ATEND                                      23019.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     23021.\n         STRCVERF  DO,&USRNAME                                23025.\n         AIF   (&STRCERR).FIN                                 23030.\n&INFO    SETC '&STRCINF(&STRCNST)'                            23034.\n&ATGEND  SETB  ('&INFO'(6,1) EQ '1')                          23035.\n         AIF   (NOT &ATGEND).M041                             23037.\n         MNOTE 8,' STRC2301 MORE THAN ONE \"ATEND\" IN BLOCK'   23039.\n         MEXIT\n.M041    ANOP\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          23042.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          23043.\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          23045.\n         AIF   (&TDLGEND).M051                                23047.\n         STRCTDL\n         AGO   .M055                                          23051.\n.M051    B     &STRCPFX.FIN\n&FINREQD SETB  1                                              23053.\n.M055    AIF   (NOT &STRCEND(&STRCNST)).M062                  23056.\n&STRCPFX.END  DS    0H\n&STRCEND(&STRCNST)  SETB  0                                   23059.\n.M062    ANOP\n&STRCINF(&STRCNST)  SETC  '&INFO'(1,4)'11'.'&INFO'(7,1)'&FINREQD'\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ATEXIT": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ATEXIT  &USRNAME\n         ONEXIT  &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLEND": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         BLEND  &USRNAME,&RETURN=,&LINK=14,&RESTORE=,&RC=     43001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           43007.\n         LCLC  &X\n         STRCTRAC  BLEND\n         AIF   (&STRCNST LE &STRCNSL).M014                    43011.\n         STRCPOP\n         AGO   .M058                                          43014.\n.M014    AIF   (&STRCNST NE 0).M018                           43015.\n         MNOTE 8,' STRC4301 NO BLOCKS ACTIVE--\"BLEND\" IGNORED'\n         AGO   .M058                                          43018.\n.M018    ANOP\n&I       SETA  &STRCNST                                       43019.\n         AIF   ('&USRNAME' EQ '').M033                        43020.\n.M022    AIF   (&I LE 0 OR '&STRCNAM(&I)' EQ '&USRNAME').M027\n&I       SETA  &I-1                                           43024.\n         AGO   .M022                                          43025.\n.M027    AIF   (&I NE 0).M033                                 43027.\n         MNOTE 8,' STRC4302 NO BLOCK ACTIVE NAMED &USRNAME--\"BLEND\"'\n         MNOTE 0,'                IGNORED'                    43029.\n         MEXIT\n.M033    ANOP\n&X       SETC  '&STRCTYP(&STRCNST)'                           43034.\n         AIF   ('&X' NE 'IF').M039                            43036.\n         FI    &USRNAME                                       43037.\n         AGO   .M058                                          43038.\n.M039    AIF   ('&X' NE 'DO').M042                            43039.\n         OD    &USRNAME                                       43040.\n         AGO   .M058                                          43041.\n.M042    AIF   ('&X' NE 'CASE').M045                          43042.\n         ESAC  &USRNAME                                       43043.\n         AGO   .M058                                          43044.\n.M045    AIF   ('&X' NE 'DOCASE').M048                        43045.\n         ESACOD  &USRNAME                                     43046.\n         AGO   .M058                                          43047.\n.M048    AIF   ('&X' NE 'PROC').M052                          43048.\n         CORP  &USRNAME,RETURN=&RETURN,LINK=&LINK,                     *\n               RESTORE=&RESTORE,RC=&RC                        43049.\n         AGO   .M058                                          43051.\n.M052    STRCPOP\n.M058    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLOCK": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME BLOCK\n         COPY  STRCGBLS\n         LCLC  &LABEL             LABEL                       41004.\n         STRCTRAC  BLOCK                                      41007.\n&USRNAME STRCPUSH  TYPEVAL=BLOCK                              41009.\n         AIF   (&STRCERR).FIN                                 41013.\n&LABEL   SETC  '&USRNAME'                                     41017.\n.*       CALL  BLOCK_TRACE_COUNTERS                           41018.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M056              41033.\n         AIF   (NOT &STRCDBC).M042                            41035.\n&LABEL   LH    1,&STRCPFX.BLC\n&LABEL   SETC  ''                                             41039.\n         LA    1,1(1)\n         STH   1,&STRCPFX.BLC\n.M042    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  41045.\n         AIF   (NOT &STRCDBN).M051                            41047.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M051    AIF   (NOT &STRCDBC).M055                            41052.\n&STRCPFX.BLC  DC  H'0' BLOCK COUNT\n.M055    ANOP\n.M056    ANOP\n.*       CORP  BLOCK_TRACE_COUNTERS                           41057.\n         AIF   ('&LABEL' EQ '').FIN                           41022.\n&LABEL   DS    0H\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CASE": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME CASE  &REL=,&MASK=                                   33001.\n         COPY  STRCGBLS\n         LCLA  &CASECTR           CASE_COUNTER                33011.\n         LCLA  &COMPLB#           COMP_LABEL_NO               33013.\n         LCLA  &I                 I                           33015.\n         LCLB  &CLABREQ           CASE_LABEL_REQD             33017.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         33019.\n         LCLB  &EQUAL             EQUAL_TEST_OUTSTANDING      33022.\n         LCLB  &RANGE             RANGE_TEST_OUTSTANDING      33026.\n         LCLB  &MISCFND           MISC_FOUND                  33031.\n         LCLB  &MULTOF4           MULTIPLESOF4                33032.\n         LCLB  &UNEXP             UNEXPECTED_OPERANDS_FOUND   33034.\n         LCLC  &CFORMAT           CASE_FORMAT                 33038.\n         LCLC  &MAMAPFX           MAMA_BLOCK_PREFIX           33040.\n         LCLC  &XADDR             INDEX_ADDR                  33041.\n         LCLC  &LABEL             LABEL                       33042.\n         LCLC  &COMPLAB           COMP_LABEL                  33043.\n         LCLC  &NXTCASE           NEXT_CASE                   33044.\n         LCLC  &XLENG             INDEX_LENGTH                33046.\n         LCLC  &X                 X                           33161.\n         LCLA  &MOM               MOM                         33162.\n         LCLC  &INSERT            INSERT                      33276.\n         LCLA  &BASE              BASE                        33363.\n         LCLA  &OP                OP                          33364.\n         LCLA  &LIMIT             LIMIT                       33365.\n         LCLA  &GUESS             GUESS                       33440.\n         LCLA  &OPCOUNT           OP_COUNT                    33496.\n         STRCTRAC  CASE\n.*       CALL  CASE_POSITION_CHECK                            33050.\n&STRCERR SETB  0                                              33134.\n         AIF   ('&STRCTYP(&STRCNST)' EQ 'DOCASE').M155        33135.\n         MNOTE 8,' STRC3301 \"CASE\" NOT IMMEDIATE DAUGHTER OF \"DOCASE\"'\n&STRCERR SETB  1                                              33138.\n         AIF   (&STRCNST LE 1).M155                           33139.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE 'DOCASE').M145      33140.\n         MNOTE 8,' STRC3302 ASSUMING \"BLEND\" OMITTED--INSERTED'\n         BLEND\n&STRCERR SETB  0                                              33144.\n         AGO   .M155                                          33143.\n.M145    AIF   (&STRCNST LE 2).M155                           33146.\n         AIF   ('&STRCTYP(&STRCNST-2)' NE 'DOCASE').M155      33147.\n         MNOTE 8,' STRC3303 ASSUMING TWO \"BLENDS\" OMITTED--INSERTED'\n         BLEND\n         BLEND\n&STRCERR SETB  0                                              33152.\n.M155    ANOP\n.*       CORP  CASE_POSITION_CHECK                            33156.\n         AIF   (NOT &STRCERR).M058                            33053.\n         MNOTE 8,' STRC3304 \"CASE\" TREATED AS \"BLOCK\" MACRO'  33055.\n&USRNAME BLOCK\n         MEXIT\n.M058    ANOP\n&USRNAME STRCPUSH  TYPEVAL=CASE                               33059.\n         AIF   (&STRCERR).FIN                                 33063.\n         AIF   ('&REL&MASK' EQ '').M070                       33067.\n         MNOTE 8,' STRC3310 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M070    ANOP\n.*       CALL  CASE_GET_DOCASE_INFO                           33071.\n&MOM     SETA  &STRCNST-1                                     33164.\n&CASECTR SETA  &STRCOP1(&MOM)                                 33165.\n         AIF   ('&SYSLIST(1)' EQ 'MISC').M169                 33166.\n&CASECTR SETA  &CASECTR+1                                     33168.\n.M169    ANOP\n&XADDR   SETC  '&STRCOP2(&MOM)'                               33170.\n&CFORMAT SETC  '&STRCOP3(&MOM)'                               33171.\n&XLENG   SETC  '&STRCOP4(&MOM)'                               33172.\n&X       SETC  '&STRCINF(&MOM)'                               33173.\n&CLABREQ SETB  ('&X'(1,1) EQ '1')                             33174.\n&MISCFND SETB  ('&X'(2,1) EQ '1')                             33175.\n&MULTOF4 SETB  ('&X'(3,1) EQ '1')                             33176.\n&UNEXP   SETB  ('&X'(4,1) EQ '1')                             33177.\n&XRANGA  SETB  ('&X'(5,1) EQ '1')                             33178.\n&MAMAPFX SETC  '$&STRCBL#(&MOM)'                              33179.\n.*       CORP  CASE_GET_DOCASE_INFO                           33180.\n         AIF   ('&USRNAME' EQ '').M081                        33075.\n&USRNAME DS    0H\n.M081    AIF   ('&SYSLIST(1)' NE 'MISC').M086                 33082.\n.*       CALL  CASE_MISC_PROCESS                              33084.\n         AIF   (&CLABREQ).M546                                33541.\n         B     &MAMAPFX.C&CASECTR\n.M546    AIF   (NOT &MISCFND).M551                            33547.\n         MNOTE 8,' STRC3311 MULTIPLE MISC CASES IN DOCASE--THIS BLOCK'\n         MNOTE 0,'          IS DEAD CODE'                     33550.\n         AGO   .M557                                          33551.\n.M551    ANOP\n&LABEL   SETC  '&MAMAPFX.MSC'                                 33552.\n&MISCFND SETB  1                                              33556.\n.M557    AIF   (NOT &XRANGA).M562                             33558.\n         MNOTE 8,' STRC3308 \"DOCASE ...,ONLY\" INVALID WITH MISC'\n&XRANGA  SETB  0                                              33561.\n.M562    ANOP\n.*       CORP  CASE_MISC_PROCESS                              33563.\n         AGO   .M117                                          33086.\n.M086    AIF   ('&CFORMAT' EQ 'SIMPLE').M103                  33087.\n         AIF   ('&CFORMAT' EQ 'CONDTEST').M103                33087.\n.* THESE BRANCHES HAVE BEEN REVERSED FROM SOURCE;  SEE COMMENT\n.* ON LINE 33103. OF SOURCE.\n         AIF   (&STRCGNL GT &STRCGNX).M117                    33089.\n.*       CALL  CASE_PROCESS_COMPARE_OPERANDS                  33091.\n&I       SETA  1                                              33191.\n&COMPLB# SETA  &STRCCL#(&STRCGNL)                             33192.\n&EQUAL   SETB  0                                              33194.\n&RANGE   SETB  0                                              33194.\n.M195    AIF   (&I GT N'&SYSLIST).M241                        33195.\n         AIF   ('&CFORMAT' EQ 'SPARSE').M204                  33197.\n         AIF   ('&CFORMAT' EQ 'CHARCOMP').M204                33197.\n         AIF   (N'&SYSLIST(&I) GT 1).M200                     33197.\n         AIF   (T'&SYSLIST(&I) NE 'N').M204                   33197.\n         AIF   (&SYSLIST(&I) GE 0 AND &SYSLIST(&I) LE 255).M239\n         AGO   .M204                                          33197.\n.M200    AIF   (T'&SYSLIST(&I,1) NE 'N').M204                 33200.\n         AIF   (&SYSLIST(&I,1) LT 0 OR &SYSLIST(&I,1) GT 255).M204\n         AIF   (T'&SYSLIST(&I,2) NE 'N').M204                 33202.\n         AIF   (&SYSLIST(&I,2) GE 0 AND &SYSLIST(&I,2) LE 255).M239\n.M204    AIF   (NOT &EQUAL).M212                              33205.\n&LABEL   SETC  '&STRCPFX.BEG'                                 33207.\n         BE    &LABEL\n&EQUAL   SETB  0                                              33211.\n         AGO   .M228                                          33212.\n.M212    AIF   (NOT &RANGE).M220                              33213.\n&LABEL   SETC  '&STRCPFX.BEG'                                 33215.\n         BNH   &LABEL\n&RANGE   SETB  0                                              33219.\n         AGO   .M228                                          33220.\n.M220    AIF   (NOT &CLABREQ).M225                            33221.\n&COMPLAB SETC  '&MAMAPFX.C&COMPLB#'                           33223.\n.M225    ANOP\n&UNEXP   SETB  1                                              33226.\n.M228    ANOP\n.*       CALL  CASE_GEN_COMPARE                               33229.\n         AIF   ('&XADDR' NE '').M282                          33278.\n&COMPLAB LA    0,&SYSLIST(&I,1)\n         CR    1,0\n         AGO   .M304                                          33282.\n.M282    AIF   ('&CFORMAT' NE 'CHARCOMP').M300                33283.\n&INSERT  SETC  ''                                             33285.\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '=').M297            33286.\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '''').M291           33288.\n&INSERT  SETC  '=C'                                           33290.\n         AGO   .M297                                          33291.\n.M291    AIF    ('&SYSLIST(&I,1)'(K'&SYSLIST(&I,1),1) NE '''').M297\n&INSERT  SETC  '='                                            33294.\n.M297    ANOP\n&COMPLAB CLC   &XADDR.(&XLENG),&INSERT&SYSLIST(&I,1)\n         AGO   .M304                                          33300.\n.M300    ANOP\n&COMPLAB CLI   &XADDR,&SYSLIST(&I,1)\n.M304    AIF   ('&COMPLAB' EQ '').M310                        33305.\n&COMPLAB SETC  ''                                             33307.\n&COMPLB# SETA  &COMPLB#+1                                     33308.\n.M310    AIF   (N'&SYSLIST(&I) GT 1).M313                     33310.\n&EQUAL   SETB  1                                              33312.\n         AGO   .M353                                          33313.\n.M313    AIF   (N'&SYSLIST(&I) LE 2).M318                     33314.\n         MNOTE 8,' STRC3312 &SYSLIST(&I) INVALID--'           33316.\n         MNOTE 0,'                ONLY FIRST TWO SUBOPERANDS PROCESSED'\n.M318    ANOP\n&RANGE   SETB  1                                              33319.\n&COMPLAB SETC  '&MAMAPFX.C&COMPLB#'                           33321.\n         BL    &COMPLAB\n         AIF   ('&XADDR' NE '').M329                          33325.\n         LA    0,&SYSLIST(&I,2)\n         CR    1,0\n         AGO   .M353                                          33329.\n.M329    AIF   ('&CFORMAT' NE 'CHARCOMP').M349                33330.\n&INSERT  SETC  ''                                             33332.\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '=').M346            33335.\n         AIF   ('&SYSLIST(&I,2)'(1,1) NE '''').M340           33337.\n&INSERT  SETC  '=C'                                           33339.\n         AGO   .M346                                          33322\n.M340    AIF   ('&SYSLIST(&I,2)'(K'&SYSLIST(&I,2),1) NE '''').M346\n&INSERT  SETC  '='                                            33343.\n.M346    CLC   &XADDR.(&XLENG),&INSERT&SYSLIST(&I,2)\n         AGO   .M353                                          33349.\n.M349    CLI   &XADDR,&SYSLIST(&I,2)\n.M353    ANOP\n.*       CORP  CASE_GEN_COMPARE                               33354.\n.M239    ANOP\n&I       SETA  &I+1                                           33240.\n         AGO   .M195                                          33241.\n.M241    AIF   (NOT &EQUAL).M250                              33245.\n         BNE   &MAMAPFX.C&COMPLB#\n         AGO   .M257                                          33250.\n.M250    AIF   (NOT &RANGE).M257                              33251.\n         BH    &COMPLAB\n.M257    ANOP\n&STRCCL#(&STRCGNL)  SETA  &COMPLB#                            33258.\n.*       CORP  CASE_PROCESS_COMPARE_OPERANDS                  33260.\n         AIF   ('&CFORMAT' NE 'GENERAL').M117                 33096.\n.*       CALL  CASE_PROCESS_VECTOR_OPERANDS                   33098.\n&BASE    SETA  ((&STRCGNL-1)*256)+1                           33367.\n         AIF   (N'&SYSLIST LE 0).M426                         33369.\n&I       SETA  1                                              33371.\n.M372    AIF   (&I GT N'&SYSLIST).M424                        33372.\n         AIF   (T'&SYSLIST(&I,1) NE 'N').M422                 33374.\n&OP      SETA  &SYSLIST(&I,1)                                 33376.\n         AIF   (&OP GT 255 OR &OP LT 0).M422                  33377.\n  AIF  (T'&SYSLIST(&I,2) NE 'O' AND T'&SYSLIST(&I,2) NE 'N').M422\n         AIF   (N'&SYSLIST(&I) LE 2).M385                     33381.\n         MNOTE 8,' STRC3312 &SYSLIST(&I) INVALID--'           33383.\n         MNOTE 0,'                ONLY FIRST TWO SUBOPERANDS PROCESSED'\n.M385    AIF   (T'&SYSLIST(&I,2) NE 'N').M397                 33386.\n&LIMIT   SETA  &SYSLIST(&I,2)                                 33388.\n         AIF   (&LIMIT GT 255 OR &LIMIT LT 0).M422            33389.\n         AIF   (&LIMIT GE &OP).M399                           33391.\n         MNOTE 8,' STRC3305 &SYSLIST(&I) INVALID--&OP ASSUMED'\n&LIMIT   SETA  &OP                                            33395.\n         AGO   .M399                                          33397.\n.M397    ANOP\n&LIMIT   SETA  &OP                                            33398.\n.M399    ANOP\n         AIF   (&LIMIT LE &STRCMCV(&STRCGNL)).M403            33400.\n&STRCMCV(&STRCGNL)  SETA  &LIMIT                              33402.\n.M403    ANOP\n.M404    AIF   (&OP GT &LIMIT).M417                           33404.\n&STRCOCC(&BASE+&OP) SETB  1                                   33406.\n&MAMAPFX.G&OP  DS  0H\n         AIF   (&OP EQ &CASECTR).M411                         33408.\n&UNEXP   SETB  1                                              33410.\n.M411    AIF   (&OP/4*4 EQ &OP).M415                          33412.\n&MULTOF4 SETB  0                                              33414.\n.M415    ANOP\n&OP      SETA  &OP+1                                          33416.\n         AGO   .M404                                          33417.\n.M417    ANOP\n.M422    ANOP\n&I       SETA  &I+1                                           33423.\n         AGO   .M372                                          33424.\n.M424    AGO   .M431                                          33426.\n.M426    ANOP\n.*       CALL  CASE_ASSUMED_VECTOR_CASE                       33427.\n&GUESS   SETA  &STRCMCV(&STRCGNL)+1                           33442.\n         AIF   (&GUESS GT 0).M448                             33444.\n&GUESS   SETA  1                                              33446.\n.M448    ANOP\n&STRCMCV(&STRCGNL)  SETA  &GUESS                              33448.\n&STRCOCC(&BASE+&GUESS)  SETB  1                               33449.\n&MAMAPFX.G&GUESS  DS  0H\n         AIF   (NOT &UNEXP).M456                              33451.\n         MNOTE 4,' STRC3306 EARLIER UNEXPECTED OPERAND IMPLIES THIS'\n         MNOTE 0,'          TO BE CASE &GUESS'                33454.\n.M456    ANOP\n.*       CORP  CASE_ASSUMED_VECTOR_CASE                       33457.\n.M431    ANOP\n.*       CORP  CASE_PROCESS_VECTOR_OPERANDS                   33432.\n         AGO   .M117                                          33103.\n.M103    ANOP\n.*       CALL  CASE_SET_NAMES                                 33104.\n         AIF   (NOT &CLABREQ).M468                            33465.\n&LABEL   SETC  '&MAMAPFX.C&CASECTR'                           33467.\n.M468    ANOP\n&I       SETA  &CASECTR+1                                     33469.\n&NXTCASE SETC  '&MAMAPFX.C&I'                                 33470.\n.*       CORP  CASE_SET_NAMES                                 33471.\n         AIF   ('&CFORMAT' NE 'SIMPLE').M112                  33108.\n.*       CALL  CASE_BCT_GEN                                   33110.\n&LABEL   BCT   1,&NXTCASE\n&LABEL   SETC  ''                                             33477.\n         AIF   (T'&SYSLIST(1) EQ 'O').M491                    33478.\n         AIF   (T'&SYSLIST(1) NE 'N').M487                    33480.\n         AIF   (&SYSLIST(1) EQ &CASECTR).M491                 33482.\n         MNOTE 8,' STRC3307 OPERAND INVALID VALUE ON SIMPLE CASE &CASEC*\n               TR'                                            33485.\n         AGO   .M491                                          33487.\n.M487    MNOTE 8,' STRC3309 OPERAND MUST BE SELF-DEFINING TERM OR'\n         MNOTE 0,'          OMITTED ON SIMPLE CASE &CASECTR'  33488.\n.M491    ANOP\n.*       CORP  CASE_BCT_GEN                                   33492.\n         AGO   .M117                                          33112.\n.M112    ANOP\n.*       CALL  CASE_CONDTEST_GEN                              33113.\n&STRCUBL SETC  '&NXTCASE'                                     33499.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 33500.\n&STRCUFC SETB  1                                              33501.\n&STRCFLU SETB  0                                              33502.\n&STRCFRX SETA  1                                              33503.\n&STRCLSX SETA  N'&SYSLIST                                     33504.\n&STRCUID SETC  'T'                                            33506.\n&LABEL   STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      33507.\n         AIF   (&STRCFLU).M529                                33527.\n&LABEL   SETC  ''                                             33531.\n         AGO   .M532                                          33532.\n.M529    ANOP\n&LABEL   SETC  '&STRCPFX.BEG'                                 33529.\n.M532    ANOP\n.*       CORP  CASE_CONDTEST_GEN                              33533.\n.M117    ANOP\n.*       CALL  CASE_TRACE_COUNTERS                            33118.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M601              33568.\n         AIF   (NOT &STRCDBC).M587                            33570.\n&LABEL   LH    1,&STRCPFX.CTR\n&LABEL   SETC  ''                                             33574.\n         LA    1,1(1)\n         STH   1,&STRCPFX.CTR\n         AIF   ('&SYSLIST(1)' EQ 'MISC' OR &CASECTR GT 255).M579\n&STRCHXI SETA  &CASECTR                                       33581.\n         STRCXHEX\n         MNOTE *,' STRC3313 CASE DEBUG ID=X''&STRCHXO'''      33583.\n         MVI   &MAMAPFX.LSC,X'&STRCHXO' CASE NUMBER FOR TRACING\n         AGO   .M586                                          33586.\n.M579    MVI   &MAMAPFX.LSC,X'FF'\n.M586    ANOP\n.M587    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  33589.\n         AIF   (NOT &STRCDBN).M596                            33592.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M596    AIF   (NOT &STRCDBC).M601                            33597.\n&STRCPFX.CTR  DC  H'0' CASE COUNT\n.M601    ANOP\n.*       CORP  CASE_TRACE_COU NTER                            33602.\n.*       CALL  CASE_UPDATE_INFO                               33121.\n&MOM     SETA  &STRCNST-1                                     33609.\n&STRCINF(&MOM) SETC  '1&MISCFND&MULTOF4&UNEXP&XRANGA'         33611.\n&STRCOP1(&MOM)  SETC  '&CASECTR'                              33613.\n.*       CORP  CASE_UPDATE_INFO                               33616.\n         AIF   ('&LABEL' EQ '').M126                          33123.\n&LABEL   DS    0H\n.M126    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CASEND": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         CASEND  &USRNAME\n         ESAC   &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CORP": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME CORP  &PROCNAM,&RETURN=,&LINK=14,&RESTORE=,&RC=      83001.\n         COPY  STRCGBLS\n         LCLA  &FRSAREG           FIRST_SAVEAREA_REG          83013.\n         LCLA  &OFFSET0           OFFSET_TO_GPR0              83016.\n         LCLB  &ANYSAVD           ANY_REGS_SAVED              83019.\n         LCLB  &DYNAMSA           DYNAMIC_SAVEAREA            83021.\n         LCLB  &BCKREQD           BCK_AREA_REQD               83023.\n         LCLB  &FRKNOWN           FIRST_VALUE_KNOWN           83024.\n         LCLB  &FRRESTK           FIRST_RESTORE_VALUE_KNOWN   83026.\n         LCLB  &OSLINK            OS_LINKAGE                  83028.\n         LCLC  &LABEL             LABEL                       83031.\n         LCLC  &OFF0STR           GPR0_OFFSET_STRING          83032.\n         LCLC  &FIRSTSV           FIRST_REG_SAVED             83033.\n         LCLC  &LASTSV            LAST_REG_SAVED              83033.\n         LCLC  &MULT              MULT                        83035.\n         LCLC  &COMMA2            COMMA2                      83035.\n         LCLC  &LOCPTR            LOCAL_POINTER               83037.\n         LCLC  &OSPTR             OS_POINTER                  83037.\n         LCLC  &RSTAREA           RESTORE_AREA                83037.\n         LCLC  &RCREG             RC_REG                      83040.\n         LCLC  &SVLENG            SAVE_LENGTH                 83042.\n         LCLC  &REST1,&REST2      REST1,REST2                 83043.\n         LCLC  &IDBYTE            PROC_ID_BYTE                83044.\n         LCLC  &PVDEBUG           PREVIOUS_DEBUG_VECTOR       83046.\n         LCLC  &X                 X                           83150.\n         LCLC  &CBOFF             CRP_BCK_OFFSET              83225.\n         LCLC  &SVOFF             SV_OFFSET                   83227.\n         LCLA  &OFFSET            OFFSET               83321. 83391.\n         LCLA  &I                 I                    83321. 83391.\n         LCLC  &LSTAREA           LAST_AREA                   83439.\n         LCLC  &FWDPTR            FWD_PTR                     83441.\n         LCLC  &TARGET            TARGET                      83442.\n         STRCTRAC  CORP                                       83050.\n         AIF   (&STRCNST LE &STRCNSL).M056                    83052.\n         STRCPOP\n         MEXIT\n.M056    STRCVERF  PROC,&PROCNAM                              83057.\n         AIF   (&STRCERR).FIN                                 83069.\n&LABEL   SETC  '&USRNAME'                                     83071.\n.*       CALL  CORP_GET_PROC_INFO                             83074.\n&FIRSTSV SETC  '&STRCOP1(&STRCNST)'                           83152.\n&LASTSV  SETC  '&STRCOP2(&STRCNST)'                           83153.\n&X       SETC  '&STRCINF(&STRCNST)'(1,2)                      83154.\n&OFFSET0 SETA  &X-50                                          83155.\n         AIF   (&OFFSET0 GE 0).M160                           83156.\n&OFF0STR SETC  '-&OFFSET0'                                    83158.\n         AGO   .M162                                          83160.\n.M160    ANOP\n&OFF0STR SETC  '+&OFFSET0'                                    83161.\n.M162    ANOP\n&X       SETC  '&STRCINF(&STRCNST)'                           83154.\n&OSLINK  SETB  ('&X'(3,1) EQ '1')                             83163.\n&DYNAMSA SETB  ('&X'(4,1) EQ '1')                             83164.\n&FRKNOWN SETB  ('&X'(5,1) EQ '1')                             83165.\n&SVLENG  SETC  '&STRCOP3(&STRCNST)'                           83166.\n&PVDEBUG SETC  '&STRCOP4(&STRCNST)'                           83167.\n&ANYSAVD SETB  ('&FIRSTSV' NE '')                             83168.\n&IDBYTE  SETC  '&X'(6,2)                                      83169.\n         AIF   ('&X'(8,1) EQ '0').M173                        83170.\n&STRCPFX SETC  '$P&IDBYTE'                                    83172.\n         AGO   .M175                                          83173.\n.M173    ANOP\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          83174.\n.M175    AIF   (&FRKNOWN).M177                                83176.\n&FRSAREG SETA  14                                             83180.\n         AGO   .M181                                          83181.\n.M177    ANOP\n&FRSAREG SETA  &FIRSTSV                                       83178.\n.M181    ANOP\n.*       CORP  CORP_GET_PROC_INFO                             83182.\n.*       CALL  CORP_SET_RESTORE_RANGE                         83079.\n&REST1   SETC  '&FIRSTSV'                                     83191.\n&REST2   SETC  '&LASTSV'                                      83192.\n&MULT    SETC  'M'                                            83193.\n&COMMA2  SETC  ','                                            83194.\n&FRRESTK SETB  (&FRKNOWN)                                     83195.\n         AIF   (&ANYSAVD).M203                                83198.\n         AIF   ('&RESTORE' EQ '').M211                        83200.\n         MNOTE 8,' STRC8301 NO REGISTERS SAVED--RESTORE IGNORED'\n         AGO   .M211                                          83203.\n.M203    AIF   ('&RESTORE' EQ '').M211                        83204.\n&REST1   SETC  '&RESTORE(1)'                                  83206.\n&REST2   SETC  '&RESTORE(2)'                                  83207.\n&FRRESTK SETB  (T'&RESTORE(1) EQ 'N')                         83208.\n.M211    AIF   ('&REST2' NE '').M215                          83212.\n&MULT    SETC  ''                                             83214.\n&COMMA2  SETC  ''                                             83214.\n.M215    ANOP\n&RSTAREA SETC  'SV'                                           83216.\n.*       CORP  CORP_SET_RESTORE_RANGE                         83217.\n.*       CALL  CORP_GEN_EXIT_LABEL                            83082.\n         AIF   (NOT &STRCXIT(&STRCNST)).M507                  83492.\n         AIF   ('&LABEL' EQ '').M497                          83494.\n&LABEL   DS    0H\n.M497    ANOP\n&LABEL   SETC  '&STRCPFX.XIT'                                 83498.\n         AIF   ('&STRCXSV' NE '').M502                        83499.\n&STRCXSV SETC  '0'                                            83501.\n.M502    MNOTE &STRCXSV,' STRC8303 ONE OR MORE EXIT''S REFERENCE THIS P*\n               OINT'                                          83503.\n         MNOTE &STRCXSV,'          VIA &LABEL'                83505.\n&STRCXIT(&STRCNST)  SETB  0                                   83505.\n.M507    ANOP\n.*       CORP  CORP_GEN_EXIT_LABEL                            83508.\n         AIF   (NOT &OSLINK).M095                             83085.\n.*       CALL  CORP_RESTORE_REG13                             83087.\n         AIF   (NOT &DYNAMSA).M268                            83264.\n&LABEL   LR    1,13\n&LABEL   SETC  ''                                             83267.\n.M268    AIF   (&STRCSFP AND '&IDBYTE' EQ '01').M271          83269.\n&LABEL   L     13,4(13)\n         AGO   .M274                                          83274.\n.M271    ANOP\n&LABEL   L     13,$FIRSTSV+4\n.M274    ANOP\n&LABEL   SETC  ''                                             83275.\n.*       CORP  CORP_RESTORE_REG13                             83276.\n         AIF   (NOT &DYNAMSA).M100                            83090.\n.*       CALL  CORP_FREE_DYNAM_SAVEAREA                       83092.\n&LABEL   LA    0,(&SVLENG)*4\n&LABEL   SETC  ''                                             83384.\n*        FREEMAIN  R,LV=(0),A=(1)\n         FREEMAIN  R,LV=(0),A=(1)                             83385.\n.*       CORP  CORP_FREE_DYNAM_SAVEAREA                       83386.\n         AGO   .M100                                          83095.\n.M095    ANOP\n.*       CALL  CORP_DEBUGGING_STORES                          83096.\n         AIF   (NOT &STRCDCV).M256                            83230.\n         AIF   (NOT &STRCDST).M236                            83232.\n&SVOFF   SETC  '+12'                                          83234.\n&CBOFF   SETC  '+12'                                          83235.\n         AGO   .M244                                          83236.\n.M236    ANOP\n&CBOFF   SETC  ''                                             83237.\n         AIF   (&STRCDPC).M239                                83238.\n&SVOFF   SETC  ''                                             83242.\n         AGO   .M243                                          83243.\n.M239    ANOP\n&SVOFF   SETC  '+4'                                           83240.\n.M243    ANOP\n.M244    ANOP\n&LABEL   STM   14,12,&STRCPFX.CRP&CBOFF\n&LABEL   SETC  ''                                             83247.\n    AIF  ('&RETURN' EQ '' AND ('&RC' EQ '' OR '&RC' EQ 'NONE')).M255\n&BCKREQD SETB  1                                              83250.\n         MVC   &STRCPFX.BCK&CBOFF.(&SVLENG*4),&STRCPFX.SV&SVOFF\n&RSTAREA SETC  'BCK'                                          83254.\n.M255    ANOP\n.M256    ANOP\n.*       CORP  CORP_DEBUGGING_STORES                          83257.\n.M100    ANOP\n.*       CALL  CORP_SET_RETURN_CODE                           83101.\n&RCREG   SETC  ''                                             83283.\n         AIF   ('&RC' NE '').M293                             83284.\n         AIF   (NOT &OSLINK).M311                             83286.\n&LABEL   SR    15,15\n&LABEL   SETC  ''                                             83290.\n&RCREG   SETC  '15'                                           83291.\n         AGO   .M311                                          83293.\n.M293    AIF   ('&RC'(1,1) NE '(').M298                       83294.\n&RCREG   SETC  '&RC(1)'                                       83296.\n         AGO   .M311                                          83298.\n.M298    AIF   ('&RC' EQ 'NONE').M311                         83299.\n         AIF   ('&RC' NE '0').M304                            83301.\n&LABEL   SR    15,15\n         AGO   .M306                                          83304.\n.M304    ANOP\n&LABEL   LA    15,&RC\n.M306    ANOP\n&LABEL   SETC  ''                                             83307.\n&RCREG   SETC  '15'                                           83308.\n.M311    ANOP\n.*       CORP  CORP_SET_RETURN_CODE                           83312.\n.*       CALL  CORP_SAVE_RETURNING_REGS                       83105.\n         AIF   (NOT &ANYSAVD).M378                            83323.\n         AIF   (&OSLINK).M326                                 83325.\n&OSPTR   SETC  ''                                             83330.\n&LOCPTR  SETC  '&STRCPFX&RSTAREA+'                            83331.\n         AGO   .M332                                          83332.\n.M326    ANOP\n&OSPTR   SETC  '(13)'                                         83327.\n&LOCPTR  SETC  ''                                             83328.\n.M332    AIF   ('&RCREG' EQ '').M348                          83333.\n         AIF   (&FRSAREG GE 14).M342                          83335.\n         AIF   ('&RCREG' EQ '15').M348                        83337.\n&LABEL   LR    15,&RCREG\n&LABEL   SETC  ''                                             83340.\n         AGO   .M348                                          83342.\n.M342    ANOP\n&OFFSET  SETA  (&OFFSET0-1)*4                                 83343.\n&LABEL   ST    &RCREG,&LOCPTR&OFFSET&OSPTR\n&LABEL   SETC  ''                                             83346.\n.M348    AIF   ('&FRSAREG' EQ '14' OR N'&RETURN EQ 0).M353    83349.\n         MNOTE 4,' STRC8302 WARNING--NO CHECK MADE TO INSURE RETURNING'\n         MNOTE 0,'          REGISTERS ARE AMONG THOSE SAVED IN'\n         MNOTE 0,'          TRUNCATED SAVE AREA'              83352.\n.M353    ANOP\n&I       SETA  1                                              83354.\n.M355    AIF   (&I GT N'&RETURN).M378                         83355.\n         AIF   (T'&RETURN(&I) NE 'N').M362                    83357.\n&OFFSET  SETA  (&OFFSET0+&RETURN(&I)-((&RETURN(&I)+2)/16*16))*4\n&LABEL   ST    &RETURN(&I),&LOCPTR&OFFSET&OSPTR\n         AGO   .M373                                          83362.\n.M362    AIF   (&FRSAREG GE 14).M368                          83363.\n&LABEL   ST    &RETURN(&I),&LOCPTR.(&RETURN(&I)&OFF0STR)*4&OSPTR\n         AGO   .M373                                          83368.\n.M368    ANOP\n&LABEL   ST    &RETURN(&I),&LOCPTR.(&RETURN(&I)&OFF0STR-((&RETURN(&I)+2:\n               )/16*16))*4&OSPTR\n.M373    ANOP\n&I       SETA  &I+1                                           83374.\n&LABEL   SETC  ''                                             83375.\n         AGO   .M355                                          83376.\n.M378    ANOP\n.*       CORP  CORP_SAVE_RETURNING_REGS                       83379.\n         AIF   (&OSLINK OR NOT &STRCDST).M116                 83112.\n&LABEL   MVI   &STRCPFX.SV,X'FF'\n&LABEL   SETC  ''                                             83115.\n.M116    ANOP\n.*       CALL  CORP_RESTORE_REGISTERS                         83117.\n         AIF   (NOT &ANYSAVD).M415                            83393.\n         AIF   (NOT &FRRESTK).M401                            83395.\n&I       SETA  &REST1                                         83397.\n&OFFSET  SETA  (&OFFSET0+&I-((&I+2)/16*16))*4                 83398.\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR&OFFSET&OSPTR\n         AGO   .M413                                          83401.\n.M401    AIF   (&FRSAREG GE 14).M407                          83402.\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR.(&REST1&OFF0STR)*4&OSPTR\n         AGO   .M413                                          83407.\n.M407    ANOP\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR.(&REST1&OFF0STR-((&REST1+2:\n               )/16*16))*4&OSPTR\n.M413    ANOP\n&LABEL   SETC  ''                                             83414.\n.M415    ANOP\n.*       CORP  CORP_RESTORE_REGISTERS                         83416.\n         AIF   (NOT &OSLINK).M123                             83119.\n&LABEL   MVI   12(13),X'FF'\n&LABEL   SETC  ''                                             83122.\n.M123    AIF   ('&LINK' EQ 'NONE').M129                       83125.\n&LABEL   BR    &LINK\n&LABEL   SETC  ''                                             83128.\n.M129    ANOP\n.*       CALL  CORP_GEN_CRP_BCK_AREAS                         83130.\n         AIF   (&OSLINK OR NOT &STRCDCV).M485                 83444.\n         AIF   ('&LINK' NE 'NONE').M451                       83446.\n&TARGET  SETC  '&STRCPFX.FIN'                                 83448.\n&LABEL   B     &TARGET\n&LABEL   SETC  '&TARGET'                                      83450.\n.M451    ANOP\n&LSTAREA SETC  '&STRCPFX.CRP'                                 83452.\n&LSTAREA DS    0F\n         AIF   (NOT &STRCDST).M467                            83454.\n         DC    X'FC&IDBYTE.0000'\n         AIF   (&BCKREQD).M458                                83457.\n&FWDPTR  SETC  '&STRCPFX.FWD'                                 83461.\n         AGO   .M462                                          83462.\n.M458    ANOP\n&FWDPTR  SETC  '&STRCPFX.BCK'                                 83459.\n.M462    ANOP\n&STRCPSP EQU   &STRCPFX.CRP\n         DC    A(&STRCPSA,&FWDPTR)\n.M467    DC    15F'0'\n         AIF   (NOT &BCKREQD).M482                            83469.\n&LSTAREA SETC  '&STRCPFX.BCK'                                 83471.\n&LSTAREA DS    0F\n         AIF   (NOT &STRCDST).M480                            83474.\n         DC    X'FB&IDBYTE.0000'\n&FWDPTR  SETC  '&STRCPFX.FWD'                                 83478.\n         DC    A(&STRCPFX.CRP,&FWDPTR)\n.M480    DC    (&SVLENG)F'0'\n.M482    ANOP\n&STRCPSP SETC  '&FWDPTR'                                      83483.\n&STRCPSA SETC  '&LSTAREA'                                     83484.\n.M485    ANOP\n.*       CORP  CORP_GEN_CRP_BCK_AREAS                         83486.\n         AIF   ('&LABEL' EQ '').M136                          83132.\n&LABEL   DS    0H\n&LABEL   SETC  ''                                             83135.\n.M136    STRCPOP\n.*       CALL  CORP_RESTORE_DEBUG_ENVIRONMENT                 83140.\n         AIF   ('&PVDEBUG' EQ '').M433                        83423.\n&STRCDBN SETB  ('&PVDEBUG'(1,1) EQ '1')                       83425.\n&STRCDPN SETB  ('&PVDEBUG'(2,1) EQ '1')                       83426.\n&STRCDLB SETB  ('&PVDEBUG'(3,1) EQ '1')                       83427.\n&STRCDBC SETB  ('&PVDEBUG'(4,1) EQ '1')                       83428.\n&STRCDPC SETB  ('&PVDEBUG'(5,1) EQ '1')                       83429.\n&STRCDPT SETB  ('&PVDEBUG'(6,1) EQ '1')                       83430.\n&STRCDCV SETB  ('&PVDEBUG'(7,1) EQ '1')                       83431.\n&STRCDST SETB  ('&PVDEBUG'(8,1) EQ '1')                       83432.\n.M433    ANOP\n.*       CORP  CORP_RESTORE_DEBUG_ENVIRONMENT                 83434.\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVTOD": {"ttr": 774, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   CVTOD &OPTION\n         AIF   ('&OPTION' EQ  '').GENALL\n         AIF   ('&OPTION' EQ  'DATA').DATONLY\n.GENALL  ANOP\n************************************************************\n************************************************************\n** CVTOD - CONVERT TOD TO INTERNAL/EXTERNAL FORMAT        **\n**   ENTRY:  1  - ADDR OF TOD TO CONVERT                 **\n**                                                        **\n**                                                        **\n**   EXIT:   1  - ADDRESS OF OUTPUT DATA                 **\n**           0  - LEN OF OUTPUT                          **\n**                                                        **\n**   LABEL:    OUTDAY = DAY OF WEEK    LEN=3              **\n**             OUTJ   = JULIAN DATE    LEN=6              **\n**             OUTDM  = GREGORIAN DATE LEN=8              **\n**             OUTTH  = TIME OF DAY    LEN=5              **\n**                                                        **\n**    OUTPUT FORMAT: 'DAY YY.DDD MM/DD/YY HH:MM -'        **\n**                                                        **\n**     ASSUMES ZERO VALUE FOR TOD CLOCK IS ----           **\n**                   '01/01/00 (000) 00:00:00.000000'     **\n**                                                        **\n**  THIS  CODE  IS FROM UCLA PROGRAM DUMPINFO ACQUIRED    **\n**  VIA  THE CBT TAPE FILE 149 01/24/84....               **\n**  AND  MODIFIED BY L. DYCK AS A MACRO                   **\n**                                                        **\n************************************************************\n************************************************************\n         SPACE 3\n&LABEL   STM   0,15,CVSAVE              SAVE CALLERS REGS\n         MVI   OUT,C' '                 INIT OUTPUT AREA TO BLANK\n         MVC   OUT+1(OUTLEN-1),OUT\n         LM    2,3,0(1)                 GET ORIG TOD VALUE\n         SRDL  2,12                     ALIGN MICROSECONDS\n         D     2,=A(60*1000000)         MIN TO R3, USEC TO R2\n         CVD   2,DWD                    USEC TO DECIMAL\n         SR    2,2                      CLEAR FOR DIVIDE\n         D     2,=A(60)                 HOUR TO R3, MIN TO R2\n         CVD   2,DWD                    MINUTES TO DEC\n         UNPK  OUTTM(2),DWD+6(2)        MIN TO OUTPUT AREA\n         OI    OUTTM+1,C'0'             FIX ZONE\n         SR    2,2                      CLEAR FOR DIVIDE\n         D     2,=A(24)                 DAYS TO R3, HOURS TO R2\n*************************\n*   CALC DAY OF WEEK    *\n*************************\n         SR    9,9\n         LR    9,3                      TOTAL # DAYS IN R9\n         SR    8,8                      CLEAR R8 FOR DIVIDE\n         D     8,=F'7'                  DIVIDE BY 7 TO GET REMAINDER\n         LA    6,DAYTBL                 ADDR OF DAY TABLE IN R6\n         LR    9,8                      MOVE REMAINDER FOR MULTIPLY\n         M     8,=F'3'                  MULTIPLY REMAINDER BY 3\n         AR    6,9                      ADD TO TABLE ADDR\n         MVC   OUTDAY(3),0(6)           MOVE DAY INTO OUTPUT\n**********************************\n*   CALC YEAR, HOURS & MINUTES   *\n**********************************\n         CVD   2,DWD                    HOURS TO DEC\n         UNPK  OUTTH(2),DWD+6(2)         HOURS TO OUTPUT AREA\n         OI    OUTTH+1,C'0'              FIX ZONE\n         MVI   OUTTH+2,C':'             COLON BETWEEN HOUR:MIN\n         C     3,=A(365)                AFTER 1900?\n         BNH   *+8                      BIF NOT AFTER 1900\n         A     3,=A(1)                  ELSE PRETEND 1900 LEAP YEAR\n         SLL   3,2                      DAYS * 4\n         SR    2,2                      CLEAR FOR DIVIDE\n         D     2,=A((365*4)+1)          YEAR TO R3, DAY TO R2\n         CVD   3,DWD                    YEAR TO DEC\n         UNPK  OUTJ(2),DWD+6(2)         YEAR TO JULIAN DATE OUTPUT\n         UNPK  OUTDY(2),DWD+6(2)        YEAR TO OUTPUT AREA\n         OI    OUTJ+1,C'0'              FIX ZONE\n         OI    OUTDY+1,X'F0'            FIX ZONE\n         SRL   2,2                      DAYS * 4 TO DAYS\n         A     2,=A(1)                  + 1 TO GET DAYS ORIG 1\n         CVD   2,DWD                    JULIAN DAY TO DEC\n         UNPK  OUTJ+3(3),DWD+6(2)       JULIAN DAY TO OUTPUT AREA\n         OI    OUTJ+5,X'F0'             FIX ZONE\n         MVI   OUTJ+2,C'.'              . IN JULIAN DATE\n*****************************************************\n*****************************************************\n**                                                 **\n**       CONVERT JULIAN TO GREGORIAN DATE          **\n**                                                 **\n**       R2 - JULIAN DAY IN BIN                    **\n**       R3 - YEAR IN BIN                          **\n**                                                 **\n*****************************************************\n*****************************************************\nGRDATE   DS    0H\n         LA    5,CVTOD#T1-2             ASSUME NON-LEAP YEAR\n         N     3,=F'3'                  TEST FOR LEAP YEAR\n         BNZ   CVTOD$NL                 BIF NOT LEAP YEAR\n         LA    5,CVTOD#T2-2             ELSE FEB HAS 29 DAYS\nCVTOD$NL LR    4,5                      COPY TABLE ADDR\nCVTOD$L1 LA    4,2(,4)                  POINT TO NEXT ENTRY\n         SH    2,0(,4)                  DAYS LEFT AFTER MONTH\n         BP    CVTOD$L1                 BIF AFTER THIS MONTH\n         AH    2,0(,4)                  GET DAY IN MONTH\n         CVD   2,DWD                    DAY IN MONTH TO DEC\n         UNPK  OUTDD(2),DWD+6(2)        DAY TO OUTPUT AREA\n         OI    OUTDD+1,C'0'             FIX ZONE\n         MVI   OUTDD+2,C'/'             SLASH AFTER DAY\n         SR    4,5                      GET 2*MONTH ORIG 0\n         SRL   4,1                      GET MONTH\n         CVD   4,DWD                    MONTH TO DEC\n         UNPK  OUTDM(2),DWD+6(2)        MONTH TO OUTPUT AREA\n         OI    OUTDM+1,C'0'             FIX ZONE\n         MVI   OUTDM+2,C'/'             SLASH AFTER MONTH\n         LA    1,OUT                    -> OUTPUT AREA\n         LA    0,OUTLEN\n         STM   0,1,CVSAVE\n         LM    0,15,CVSAVE\n         B     CVTODX                  BRANCH AROUND DATA\n         SPACE 1\n*---            DAY TABLE\nDAYTBL   DC    CL3'MON'\n         DC    CL3'TUE'\n         DC    CL3'WED'\n         DC    CL3'THR'\n         DC    CL3'FRI'\n         DC    CL3'SAT'\n         DC    CL3'SUN'\n         SPACE\n*---            NON - LEAP YEAR TABLE OF DAYS / MONTH\nCVTOD#T1 DC    H'31'       1 -          JAN\n         DC    H'28'       2 -          FEB\n         DC    H'31'       3 -          MARCH\n         DC    H'30'       4 -          APRIL\n         DC    H'31'       5 -          MAY\n         DC    H'30'       6 -          JUNE\n         DC    H'31'       7 -          JULY\n         DC    H'31'       8 -          AUG\n         DC    H'30'       9 -          SEPT\n         DC    H'31'      10 -          OCT\n         DC    H'30'      11 -          NOV\n         DC    H'31'      12 -          DEC\n         SPACE 1\n*---              LEAP YEAR TABLE OF DAYS / MONTH\nCVTOD#T2 DC    H'31'       1 -          JAN\n         DC    H'29'       2 -          FEB\n         DC    H'31'       3 -          MARCH\n         DC    H'30'       4 -          APRIL\n         DC    H'31'       5 -          MAY\n         DC    H'30'       6 -          JUNE\n         DC    H'31'       7 -          JULY\n         DC    H'31'       8 -          AUG\n         DC    H'30'       9 -          SEPT\n         DC    H'31'      10 -          OCT\n         DC    H'30'      11 -          NOV\n         DC    H'31'      12 -          DEC\n         DC    H'32767'   13 -          13TH MONTH (LARGE AND LAST)\n         AIF   ('&OPTION' EQ  'NOGEN').NOGEN\n.DATONLY ANOP\nCVSAVE   DS    16F                     REGISTER SAVE AREA\nDWD      DS    D\nOUT      DS    0F\nOUTDAY   DC    C'DAY '                          DAY OF WEEK\nOUTJ     DC    C'YY.DDD '                       JULIAN DATE\nOUTDM    DC    C'MM/'                           MONTH\nOUTDD    DC    C'DD/'                           DAY\nOUTDY    DC    C'YY '                           YEAR\nOUTTH    DC    C'HH:'                           HOURS\nOUTTM    DC    C'MM'                            MINUTES\nOUTLEN   EQU   *-OUT                            AREA LENGTH\n.NOGEN   ANOP\n         AIF   ('&OPTION' EQ  'DATA').EXIT\nCVTODX   DS    0H\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DO": {"ttr": 778, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME DO    &REL=,&MASK=                                   21001.\n         COPY  STRCGBLS\n         LCLA  &WHX               WHILE_INDEX                 21031.\n         LCLA  &WHXEND            WHILE_END_INDEX             21034.\n         LCLA  &UNX               UNTIL_INDEX                 21035.\n         LCLA  &UNXEND            UNTIL_END_INDEX             21035.\n         LCLA  &OPF               OPERAND_FORMAT              21036.\n         LCLA  &I                 I                           21038.\n         LCLA  &LB                LB                          21039.\n         LCLA  &LASTOP            LASTOP                      21041.\n         LCLB  &WHPRES            WHILE_PRESENT               21045.\n         LCLB  &UNPRES            UNTIL_PRESENT               21045.\n         LCLB  &LBLABRQ           LB_LABEL_REQ                21048.\n         LCLB  &WHCTEST           WHILE_COND_TEST             21050.\n         LCLB  &UNCTEST           UNTIL_COND_TEST             21050.\n         LCLB  &CONDREQ           THIS_CONDITIONAL_REQD       21052.\n         LCLC  &LBOPID            LB_OPCODE_ID                21057.\n         LCLC  &LBOP1             LB_OPERAND1                 21059.\n         LCLC  &LBOP2             LB_OPERAND2                 21059.\n         LCLC  &LBLOGIC           LB_LOGIC_OP                 21061.\n         LCLC  &LBTYPE            LOOPING_BRANCH_TYPE         21064.\n         LCLC  &LABEL             LABEL                       21067.\n         LCLC  &FIRSTID           FIRST_ID                    21069.\n         LCLC  &MAINOP            MAIN_OP                     21071.\n         LCLA  &OPCOUNT           OPERAND_COUNT               21385.\n         LCLA  &PASS              PASS                        21587.\n         LCLC  &B8,&B10,&B11      B8, B10, B11                21776.\n         LCLC  &X                 MACRO TEMPORARY\n         STRCTRAC  DO                                         21075.\n&USRNAME STRCPUSH  TYPEVAL=DO                                 21077.\n         AIF   (&STRCERR).FIN                                 21081.\n         AIF   ('&REL&MASK' EQ '').M088                       21085.\n         MNOTE 8,' STRC2113 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M088    ANOP\n&LABEL   SETC  '&USRNAME'                                     21089.\n.* CALL DO_SCAN_OPERANDS                                      21090.\n.* CALL DO_FIND_KEYWORDS_AND_PRESENCE                         21137.\n&WHX     SETA  0                                              21166.\n&UNX     SETA  0                                              21166.\n         AIF   ('&SYSLIST(1)' EQ 'WHILE' OR '&SYSLIST(1)' EQ 'UNTIL'   *\n               OR '&SYSLIST(1)' EQ 'FOREVER'                           *\n               OR '&SYSLIST(1)' EQ '').M171                   21167.\n         MNOTE 8,' STRC2108 FIRST OPERAND MUST BE \"WHILE\", \"UNTIL\",'\n         MNOTE 0,'          \"FOREVER\", OR OMITTED'            21169.\n.M171    ANOP\n&I       SETA  1                                              21173.\n&LASTOP  SETA  N'&SYSLIST                                     21174.\n.M175    AIF   (&I GT &LASTOP).M202                           21175.\n         AIF   ('&SYSLIST(&I)' NE 'WHILE').M186               21177.\n         AIF   (&WHX NE 0).M182                               21179.\n&WHX     SETA  &I                                             21181.\n         AGO   .M185                                          21182.\n.M182    MNOTE 8,' STRC2101 OPERANDS AFTER SECOND \"WHILE\" IGNORED'\n&LASTOP  SETA  &I-1                                           21184.\n.M185    AGO   .M197                                          21185.\n.M186    AIF   ('&SYSLIST(&I)' NE 'UNTIL').M196               21187.\n         AIF   (&UNX NE 0).M192                               21189.\n&UNX     SETA  &I                                             21191.\n         AGO   .M195                                          21192.\n.M192    MNOTE 8,' STRC2102 OPERANDS AFTER SECOND \"UNTIL\" IGNORED'\n&LASTOP  SETA  &I-1                                           21194.\n.M195    ANOP\n.M196    ANOP\n.M197    ANOP\n&I       SETA  &I+1                                           21198.\n         AGO   .M175                                          21199.\n.M202    AIF   (&WHX LE 1 OR &UNX LE 1).M205                  21202.\n         MNOTE 8,' STRC2114 SUPERFLUOUS LOOPING GROUP IGNORED'\n.M205    ANOP\n&UNPRES  SETB  (&UNX GT 0)                                    21214.\n&WHPRES SETB (&WHX GT 0 OR &UNX GT 1 OR (NOT &UNPRES AND &LASTOP GT 0))\n.* CORP DO_FIND_KEYWORDS_AND_PRESENCE                         21220.\n.* CALL DO_FIND_END_INDEXES_AND_MAIN_OP                       21142.\n&MAINOP  SETC  ''                                             21230.\n&WHXEND  SETA  &LASTOP                                        21231.\n&UNXEND  SETA  &LASTOP                                        21231.\n         AIF   (&LASTOP NE 1).M235                            21232.\n         AIF   ('&SYSLIST(1)' NE 'FOREVER').M235              21232.\n&WHPRES  SETB  0                                              21234.\n&UNPRES  SETB  0                                              21234.\n         AGO   .M299                                          21235.\n.M235    AIF   (NOT &WHPRES).M279                             21236.\n         AIF   (NOT &UNPRES).M273                             21238.\n&I       SETA  &WHX-1                                         21240.\n         AIF   (&UNX GE &WHX).M248                            21241.\n&UNXEND  SETA  &I-1                                           21243.\n         AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M247\n&UNXEND  SETA  &I                                             21246.\n.M247    AGO   .M255                                          21247.\n.M248    ANOP\n&I       SETA  &UNX-1                                         21249.\n&WHXEND  SETA  &I-1                                           21250.\n         AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M254\n&WHXEND  SETA  &I                                             21253.\n.M254    ANOP\n.M255    AIF   (&WHX NE &WHXEND).M264                         21256.\n         MNOTE 8,' STRC2109 WHILE TEST IS VOID--IGNORED'      21262.\n&WHPRES  SETB  0                                              21263.\n         AGO   .M272                                          21264.\n.M264    AIF   (&UNX NE &UNXEND).M272                         21265.\n         MNOTE 8,' STRC2111 UNTIL TEST IS VOID--IGNORED'      21269.\n&UNPRES  SETB  0                                              21270.\n.M272    AGO   .M278                                          21272.\n.M273    AIF   (&WHX NE &WHXEND).M278                         21274.\n&WHPRES  SETB  0                                              21276.\n.M278    AGO   .M284                                          21278.\n.M279    AIF   (NOT (&UNPRES AND &UNX EQ &UNXEND)).M284       21280.\n&UNPRES  SETB  0                                              21282.\n.M284    AIF   (NOT (&WHPRES AND &UNPRES)).M298               21285.\n&MAINOP  SETC  'AND'                                          21287.\n         AIF   ('&SYSLIST(&I)' NE 'OR').M291                  21288.\n&MAINOP  SETC  'OR'                                           21290.\n         AGO   .M298                                          21291.\n.M291    AIF   ('&SYSLIST(&I)' EQ 'AND').M298                 21292.\n         MNOTE 8,' STRC2110 LOGIC OPERATOR BETWEEN \"WHILE\" AND \"UNTIL\"'\n         MNOTE 0,'          OMITTED--\"AND\" ASSUMED'           21294.\n.M298    ANOP\n.M299    ANOP\n.* CORP DO_FIND_END_INDEXES_AND_MAIN_OP                       21300.\n.* CALL DO_LOOPING_BRANCH_AND_FIRST_OPERAND                   21147.\n&LB      SETA  0                                              21309.\n&LBTYPE  SETC  'NONE'                                         21310.\n         AIF   (NOT &UNPRES).M326                             21311.\n&I       SETA  &UNX+1                                         21313.\n&UNX     SETA  &I                                             21313.\n&X       SETC  '&SYSLIST(&I,1)'                               21316.\n       AIF ('&X' NE 'BCT' AND '&X' NE 'BXLE' AND '&X' NE 'BXH').M323\n&LBTYPE  SETC  'UNTIL'                                        21318.\n&UNCTEST SETB  (&UNXEND GT &I)                                21319.\n&LB      SETA  &I                                             21320.\n         AGO   .M325                                          21323.\n.M323    ANOP\n&UNCTEST SETB  1                                              21324.\n.M325    AGO   .M330                                          21326.\n.M326    ANOP\n&UNX     SETA  0                                              21327.\n&UNXEND  SETA  0                                              21327.\n&UNCTEST SETB  0                                              21328.\n.M330    AIF   (NOT &WHPRES).M365                             21331.\n&I       SETA  &WHX+1                                         21333.\n&WHX     SETA  &I                                             21333.\n&X       SETC  '&SYSLIST(&I,1)'                               21336.\n       AIF ('&X' NE 'BCT' AND '&X' NE 'BXLE' AND '&X' NE 'BXH').M362\n         AIF   ('&LBTYPE' NE 'NONE').M355                     21338.\n&LBTYPE  SETC  'WHILE'                                        21340.\n&WHCTEST SETB  (&WHXEND GT &I)                                21341.\n&LB      SETA  &I                                             21342.\n         AIF   ('&X' NE 'BCT').M349                           21345.\n         MNOTE 4,' STRC2103 WARNING--\"WHILE,(BCT,...\" WILL LOOP ONE'\n         MNOTE 0,'          LESS TIME THAN VALUE IN REGISTER' 21347.\n.M349    AIF   ('&MAINOP' NE 'OR').M354                       21350.\n         MNOTE 4,' STRC2104 WARNING--LOOPING BRANCH MAY NOT BE'\n         MNOTE 0,'          EXECUTED ON EVERY ITERATION'      21352.\n.M354    AGO   .M361                                          21354.\n.M355    MNOTE 8,' STRC2105 TWO LOOPING BRANCHES INVALID IN \"DO\"--'\n         MNOTE 0,'          \"WHILE\" IGNORED'                  21357.\n&WHPRES  SETB  0                                              21358.\n&WHCTEST SETB  0                                              21358.\n&MAINOP  SETC  ''                                             21359.\n&WHX     SETA  0                                              21360.\n&WHXEND  SETA  0                                              21360.\n.M361    AGO   .M364                                          21361.\n.M362    ANOP\n&WHCTEST SETB  1                                              21363.\n.M364    AGO   .M368                                          21365.\n.M365    ANOP\n&WHX     SETA  0                                              21366.\n&WHXEND  SETA  0                                              21366.\n&WHCTEST SETB  0                                              21367.\n.M368    ANOP\n.* CALL DO_LOOPING_BRANCH_PROCESS                             21369.\n&LBOPID  SETC  ''                                             21387.\n&LBOP1   SETC  ''                                             21387.\n&LBOP2   SETC  ''                                             21387.\n&LBLOGIC SETC  ''                                             21387.\n         AIF   (&LB EQ 0).M432                                21389.\n&LBOPID  SETC  '&SYSLIST(&LB,1)'                              21391.\n         AIF   ('&LBOPID' NE 'BCT').M395                      21392.\n&OPCOUNT SETA  2                                              21394.\n         AGO   .M397                                          21395.\n.M395    ANOP\n&OPCOUNT SETA  3                                              21396.\n.M397    AIF   (N'&SYSLIST(&LB) NE 1).M401                    21398.\n         MNOTE 8,' STRC2112 PARENTHESES OMITTED AROUND &SYSLIST(&LB)'\n         AGO   .M432                                          21401.\n.M401    ANOP\n&LBOP1   SETC  '&SYSLIST(&LB,2)'                              21402.\n&LBOP2   SETC  '&SYSLIST(&LB,3)'                              21403.\n         AIF   (N'&SYSLIST(&LB) EQ &OPCOUNT).M407             21404.\n         MNOTE 8,' STRC2106 INVALID NUMBER OF OPERANDS FOR &LBOPID'\n.M407    ANOP\n&LB      SETA  &LB+1                                          21408.\n         AIF   ('&LBTYPE' EQ 'WHILE' AND &WHCTEST).M413       21411.\n         AIF   (NOT ('&LBTYPE' EQ 'UNTIL' AND &UNCTEST)).M432\n.M413    ANOP\n&LBLOGIC SETC  '&SYSLIST(&LB)'                                21414.\n         AIF   ('&LBLOGIC' NE 'AND' AND '&LBLOGIC' NE 'OR').M418\n&LB      SETA  &LB+1                                          21417.\n         AGO   .M422                                          21418.\n.M418    MNOTE 8,' STRC2107 &LBLOGIC INVALID AFTER LOOPING BRANCH--'\n         MNOTE 0,'          \"AND\" INSERTED'                   21419.\n&LBLOGIC SETC  'AND'                                          21421.\n.M422    AIF   ('&LBTYPE' NE 'WHILE').M426                    21423.\n&WHX     SETA  &LB                                            21425.\n         AGO   .M432                                          21426.\n.M426    ANOP\n&UNX     SETA  &LB                                            21427.\n.M432    ANOP\n&LBLABRQ SETB  ('&LBTYPE' EQ 'WHILE')                         21433.\n.* CORP DO_LOOPING_BRANCH_PROCESS                             21434.\n.* CORP DO_LOOPING_BRANCH_AND_FIRST_OPERAND                   21372.\n.* CALL DO_SET_FORMAT                                         21153.\n.*   SOME CODE FROM DO_INFO_SAVE HAS BEEN MOVED HERE TO SIMPLIFY\n.*   SETTING &B8, &B10, AND &B11.\n&B8      SETC  'W'                                            21780.\n&B10     SETC  '0'                                            21781.\n&B11     SETC  '0'                                            21781.\n         AIF   (NOT &WHPRES).M535                             21440.\n         AIF   ('&LBTYPE' NE 'WHILE').M489                    21442.\n&B8      SETC  'U'                                            21789.\n         AIF   (NOT &WHCTEST).M472                            21444.\n         AIF   ('&LBLOGIC' NE 'AND').M459                     21446.\n&B10     SETC  'W'                                            21805.\n&B11     SETC  'N'                                            21818.\n         AIF   (NOT &UNPRES).M456                             21448.\n         AIF   ('&MAINOP' NE 'AND').M453                      21450.\n&OPF     SETA  15                                             21452.\n         AGO   .ENDSET\n.M453    ANOP\n&OPF     SETA  16                                             21454.\n         AGO   .ENDSET\n.M456    ANOP\n&OPF     SETA  13                                             21457.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M459    ANOP\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'W'                                            21821.\n         AIF   (NOT &UNPRES).M468                             21460.\n         AIF   ('&MAINOP' NE 'AND').M465                      21462.\n&OPF     SETA  17                                             21464.\n         AGO   .ENDSET\n.M465    ANOP\n&OPF     SETA  18                                             21466.\n         AGO   .ENDSET\n.M468    ANOP\n&OPF     SETA  14                                             21469.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M472    ANOP\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'N'                                            21818.\n         AIF   (NOT &UNPRES).M481                             21473.\n         AIF   ('&MAINOP' NE 'AND').M478                      21475.\n&OPF     SETA  11                                             21477.\n         AGO   .ENDSET\n.M478    ANOP\n&OPF     SETA  12                                             21479.\n         AGO   .ENDSET\n.M481    ANOP\n&OPF     SETA  10                                             21482.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M489    AIF   ('&LBTYPE' NE 'UNTIL').M518                    21490.\n&B8      SETC  'L'                                            21793.\n         AIF   (NOT &UNCTEST).M510                            21492.\n         AIF   ('&LBLOGIC' NE 'AND').M502                     21494.\n&B11     SETC  'U'                                            21811.\n         AIF   ('&MAINOP' NE 'AND').M499                      21496.\n&OPF     SETA  7                                              21498.\n&B10     SETC  'W'                                            21818.\n         AGO   .ENDSET\n.M499    ANOP\n&OPF     SETA  9                                              21500.\n&B10     SETC  'B'                                            21821.\n         AGO   .ENDSET\n.M502    ANOP\n&B10     SETC  'U'                                            21824.\n         AIF   ('&MAINOP' NE 'AND').M506                      21503.\n&OPF     SETA  6                                              21505.\n&B11     SETC  'N'                                            21805.\n         AGO   .ENDSET\n.M506    ANOP\n&OPF     SETA  8                                              21507.\n&B11     SETC  'W'                                            21808.\n         AGO   .ENDSET\n.M510    AIF   ('&MAINOP' NE 'AND').M514                      21511.\n&OPF     SETA  4                                              21513.\n&B10     SETC  'W'                                            21805.\n&B11     SETC  'N'                                            21818.\n         AGO   .ENDSET\n.M514    ANOP\n&OPF     SETA  5                                              21515.\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'W'                                            21821.\n         AGO   .ENDSET\n.M518    AIF   (NOT &UNPRES).M527                             21519.\n&B8      SETC  'U'                                            21789.\n         AIF   ('&MAINOP' NE 'AND').M524                      21521.\n&OPF     SETA  2                                              21523.\n         AGO   .ENDSET\n.M524    ANOP\n&OPF     SETA  3                                              21525.\n         AGO   .ENDSET\n.M527    ANOP\n&OPF     SETA  1                                              21528.\n         AGO   .ENDSET\n.M535    AIF   (NOT &UNPRES).M554                             21536.\n         AIF   ('&LBTYPE' NE 'UNTIL').M551                    21538.\n&B8      SETC  'L'                                            21793.\n         AIF   (NOT &UNCTEST).M548                            21540.\n         AIF   ('&LBLOGIC' NE 'AND').M545                     21542.\n&OPF     SETA  22                                             21544.\n&B10     SETC  'B'                                            21811.\n&B11     SETC  'U'                                            21818.\n         AGO   .ENDSET\n.M545    ANOP\n&OPF     SETA  21                                             21546.\n&B10     SETC  'U'                                            21808.\n&B11     SETC  'N'                                            21824.\n         AGO   .ENDSET\n.M548    ANOP\n&OPF     SETA  19                                             21549.\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'N'                                            21818.\n         AGO   .ENDSET\n.M551    ANOP\n&OPF     SETA  20                                             21552.\n&B8      SETC  'U'                                            21789.\n         AGO   .ENDSET\n.M554    ANOP\n&OPF     SETA  0                                              21555.\n&B8      SETC  'B'                                            21796.\n.ENDSET  ANOP\n.* CORP DO_SET_FORMAT                                         21558.\n.* CORP DO_SCAN_OPERANDS                                      21158.\n   AIF   (&OPF EQ 0 OR &OPF EQ 10 OR &OPF EQ 12 OR &OPF EQ 19).M098\n&STRCEND(&STRCNST)  SETB  1                                   21097.\n.M098    AIF   (NOT &STRCDBC).M104                            21099.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             21102.\n         STH   1,&STRCPFX.DOL\n.M104    AIF   (&OPF EQ 0).M113                               21105.\n.* CALL DO_BRANCH_FOR_LOOP_ENTRY                              21107.\n         AIF   (&OPF GT 9).M571                               21566.\n         AIF   (&OPF LT 2).M581                               21566.\n         AIF   (&OPF GT 3 AND &OPF LT 6).M581                 21566.\n&LABEL   B     &STRCPFX.W1\n         AGO   .CLEARLB\n.M571    AIF   (&OPF GT 18).M576                              21571.\n&LABEL   B     &STRCPFX.LPB\n         AGO   .CLEARLB\n.M576    AIF   (&OPF EQ 19).M581                              21576.\n&LABEL   B     &STRCPFX.BEG\n.CLEARLB ANOP\n&LABEL   SETC  ''\n.M581    ANOP\n.* CORP DO_BRANCH_FOR_LOOP_ENTRY                              21582.\n.* CALL DO_GENERATE_ALL_CONDITIONAL_TESTS                     21110.\n&PASS    SETA  1                                              21589.\n.M590    AIF   (&PASS GT 2).M634                              21590.\n         AIF   (&PASS NE 1).M595                              21592.\n.* CALL DO_UNTIL_PREPROCESS                                   21594.\n&CONDREQ SETB  (&UNCTEST)                                     21643.\n         AIF   (NOT &UNCTEST).M672                            21644.\n&STRCFRX SETA  &UNX                                           21646.\n&STRCLSX SETA  &UNXEND                                        21647.\n&STRCUBL SETC  '&STRCPFX.END'                                 21649.\n&STRCUFL SETC  '&STRCPFX.W1'                                  21650.\n&STRCUFC SETB  0                                              21652.\n&STRCUID SETC  'U'                                            21653.\n&FIRSTID SETC  '&STRCPFX.U1'                                  21654.\n         AIF   (&OPF NE 3 AND &OPF NE 8 AND &OPF NE 9).M661   21657.\n&STRCUFC SETB  1                                              21658.\n&STRCUBL SETC  '&STRCPFX.BEG'                                 21659.\n         AGO   .M671                                          21660.\n.M661    AIF   (&OPF NE 11 AND &OPF NE 15 AND &OPF NE 17).M664\n&STRCUFL SETC  '&STRCPFX.LPB'                                 21662.\n         AGO   .M671                                          21663.\n.M664    AIF   (&OPF NE 12 AND &OPF NE 16 AND &OPF NE 18).M668\n&STRCUBL SETC  '&STRCPFX.LPB'                                 21665.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21666.\n         AGO   .M671                                          21667.\n.M668    AIF   (&OPF LT 20).M671                              21664 .\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21669.\n.M671    ANOP\n.M672    ANOP\n.* CORP DO_UNTIL_PREPROCESS                                   21673.\n         AGO   .M597                                          21595.\n.M595    ANOP\n.* CALL DO_WHILE_PREPROCESS                                   21596.\n&CONDREQ SETB  (&WHCTEST)                                     21680.\n         AIF   (NOT &WHCTEST).M692                            21681.\n&STRCFRX SETA  &WHX                                           21683.\n&STRCLSX SETA  &WHXEND                                        21684.\n&STRCUBL SETC  '&STRCPFX.END'                                 21685.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21687.\n&STRCUFC SETB  1                                              21689.\n&STRCUID SETC  'W'                                            21690.\n&FIRSTID SETC  '&STRCPFX.W1'                                  21691.\n.M692    ANOP\n.* CORP DO_WHILE_PREPROCESS                                   21693.\n.M597    ANOP\n         AIF   (NOT &STRCDDM).M608                            DEBUGMACS\n         MNOTE *,' STRC2199 CONDREQ=&CONDREQ,FRX=&STRCFRX,LSX=&STRCLSX,*\n               UBL=&STRCUBL,UFL=&STRCUFL'                     DEBUGMACS\n.M608    AIF   (NOT &CONDREQ).M632                            21608.\n.* CALL DO_GENERATE_CONDITIONAL_SET                           21610.\n&STRCFLU SETB  0                                              21704.\n         AIF   ('&LABEL' EQ '').M718                          21705.\n         AIF   ('&FIRSTID' NE '').M712                        21707.\n&FIRSTID SETC  '&LABEL'                                       21711.\n         AGO   .M716                                          21712.\n.M712    ANOP\n&LABEL   DS    0H\n.M716    ANOP\n&LABEL   SETC  ''                                             21717.\n.M718    ANOP\n&FIRSTID STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      21719.\n.* CORP DO_GENERATE_CONDITIONAL_SET                           21736.\n         AIF   (&PASS NE 1).M626                              21619.\n.* CALL DO_UNTIL_POSTPROCESS                                  21622.\n         AIF   (&OPF EQ 11).M748                              21747.\n         AIF   (&OPF LT 15 OR &OPF GT 18).M751                21747.\n.M748    B     &STRCUFL\n.M751    ANOP\n.* CORP DO_UNTIL_POSTPROCESS                                  21752.\n.M626    AIF   (NOT &STRCFLU).M631                            21627.\n&LABEL   SETC  '&STRCUFL'                                     21629.\n.M631    ANOP\n.M632    ANOP\n&PASS    SETA  &PASS+1                                        21633.\n         AGO   .M590                                          21634.\n.M634    ANOP\n.* CORP DO_GENERATE_ALL_CONDITIONAL_TESTS                     21636.\n.M113    ANOP\n.* CALL DO_LABEL_BLOCK                                        21114.\n         AIF   (&OPF EQ 0 OR &OPF EQ 3 OR &OPF EQ 5).M760     21759.\n         AIF   (&OPF LT 8 OR &OPF EQ 13 OR &OPF EQ 15).M770   21759.\n.M760    AIF   ('&LABEL' EQ '&STRCPFX.BEG').M770              21760.\n         AIF   ('&LABEL' EQ '').M767                          21763.\n&LABEL   DS    0H\n.M767    ANOP\n&LABEL   SETC  '&STRCPFX.BEG'                                 21767.\n.M770    ANOP\n.* CORP DO_LABEL_BLOCK                                        21771.\n.* CALL DO_INFO_SAVE                                          21116.\n.*   LINES 21780. THROUGH 21827. SETTING &B8, &B10, AND &B11 DEPENDING\n.*   ON &OPF MOVED TO DO_SET_FORMAT.\n&STRCINF(&STRCNST)  SETC  '&B8&B10&B11&LBLABRQ.0000'          21828.\n&STRCOP1(&STRCNST)  SETC  '&LBOP1'                            21835.\n&STRCOP2(&STRCNST)  SETC  '&LBOP2'                            21836.\n&STRCOP3(&STRCNST)  SETC  '&LBOPID'                           21837.\n.* CORP DO_INFO_SAVE                                          21838.\n.* CALL DO_TRACE_COUNTERS                                     21119.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M869              21844.\n         AIF   (NOT &STRCDBC).M855                            21846.\n&LABEL   LH    1,&STRCPFX.DOL\n&LABEL   SETC  ''                                             21849.\n         LA    1,1(1)\n         STH   1,&STRCPFX.DOL\n         LH    1,&STRCPFX.DTR\n         LA    1,1(1)\n         STH   1,&STRCPFX.DTR\n.M855    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  21858.\n         AIF   (NOT &STRCDBN).M864                            21859.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M864    AIF   (NOT &STRCDBC).M868                            21864.\n&STRCPFX.DOL  DC  H'0' CURRENT LOOP COUNT\n&STRCPFX.DTR  DC  H'0' OVERALL LOOP COUNT\n.M868    ANOP\n.M869    ANOP\n.* CORP DO_TRACE_COUNTERS                                     21870.\n         AIF   ('&LABEL' EQ '').M124                          21121.\n&LABEL   DS    0H\n.M124    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCASE": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME DOCASE  &INDEX,&OPTION,&RANGE                        31001.\n         COPY  STRCGBLS\n         LCLB  &BRCASE1           BRANCH_TO_CASE1             31009.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         31012.\n         LCLC  &XREG              INDEX_REG                   31016.\n         LCLC  &XLENG             INDEX_LENGTH                31018.\n         LCLC  &XTYPE             INDEX_TYPE                  31020.\n         LCLC  &CFORMAT           CASE_FORMAT                 31023.\n         LCLC  &LABEL             LABEL                       31029.\n         LCLC  &XADDR             INDEX_ADDR                  31031.\n         LCLA  &I,&J              I,J                         31192.\n         LCLC  &X                 X                           31228.\n         STRCTRAC  DOCASE                                     31040.\n&USRNAME STRCPUSH  TYPEVAL=DOCASE,ENDVAL=1                    31042.\n         AIF   (&STRCERR).FIN                                 31048.\n&LABEL   SETC  '&USRNAME'                                     31052.\n.*       CALL  DOCASE_EXTRACT_OPERANDS                        31054.\n         AIF   ('&OPTION' NE 'SIMPLE' AND '&OPTION' NE 'SPARSE').M089\n&CFORMAT SETC  '&OPTION'                                      31088.\n         AGO   .M112                                          31089.\n.M089    AIF   ('&OPTION' NE 'ONLY').M094                     31090.\n&XRANGA  SETB  1                                              31092.\n         AGO   .M098                                          31093.\n.M094    AIF   ('&OPTION' EQ '' OR '&OPTION' EQ 'IFANY').M098\n         MNOTE 8,' STRC3102 &OPTION INVALID SECOND OPERAND--IGNORED'\n.M098    AIF   ('&INDEX' NE '').M103                          31100.\n&CFORMAT SETC  'CONDTEST'                                     31102.\n         AGO   .M112                                          31103.\n.M103    ANOP\n&CFORMAT SETC  'GENERAL'                                      31104.\n         AIF  ('&INDEX(1)' NE 'IFANY' AND '&INDEX(1)' NE 'ONLY').M112\n         MNOTE 4,' STRC3101 WARNING--\"&INDEX(1)\" ASSUMED AS INDEX'\n         MNOTE 0,'          USE \"DOCASE ,&INDEX(1)\" FOR RANGE SPEC'\n.M112    AIF   ('&RANGE' NE 'ONLY').M116                      31113.\n&XRANGA  SETB  1                                              31115.\n         AGO   .M122                                          31116.\n.M116    AIF   ('&RANGE' EQ '' OR '&RANGE' EQ 'IFANY').M122\n         MNOTE 8,' STRC3103 \"&RANGE\" INVALID THIRD OPERAND--IGNORED'\n.M122    ANOP\n&XLENG   SETC  '0'                                            31123.\n         AIF   (N'&INDEX NE 1).M130                           31124.\n         AIF   ('&INDEX'(1,1) NE '(').M130                    31124.\n&XREG    SETC  '&INDEX(1)'                                    31128.\n&XTYPE   SETC  'R'                                            31129.\n         AGO   .M146                                          31130.\n.M130    ANOP\n&XREG    SETC  ''                                             31131.\n         AIF   (N'&INDEX LE 1).M143                           31132.\n&XTYPE   SETC  '&INDEX(2)'                                    31134.\n  AIF  ('&XTYPE' EQ 'W' OR '&XTYPE' EQ 'H' OR '&XTYPE' EQ 'B').M146\n&XLENG   SETC  '&XTYPE'                                       31139.\n&XTYPE   SETC  'B'                                            31140.\n&CFORMAT SETC  'CHARCOMP'                                     31141.\n         AGO   .M146                                          31143.\n.M143    ANOP\n&XTYPE   SETC  'W'                                            31144.\n.M146    ANOP\n.*       CORP  DOCASE_EXTRACT_OPERANDS                        31147.\n         AIF   ('&CFORMAT' EQ 'CONDTEST').M070                31057.\n.*       CALL  DOCASE_INDEX_TO_REG1                           31059.\n&XADDR   SETC  ''                                             31155.\n         AIF   ('&XTYPE' NE 'R').M165                         31158.\n         AIF   ('&XREG' EQ '1').M184                          31159.\n&LABEL   LR    1,&XREG\n&LABEL   SETC  ''                                             31162.\n         AGO   .M184                                          31164.\n.M165    AIF   ('&XTYPE' NE 'W').M169                         31165.\n&LABEL   L     1,&INDEX(1)\n&LABEL   SETC  ''                                             31167.\n         AGO   .M184                                          31168.\n.M169    AIF   ('&XTYPE' NE 'H').M173                         31169.\n&LABEL   LH    1,&INDEX(1)\n&LABEL   SETC  ''                                             31171.\n         AGO   .M184                                          31172.\n.M173    AIF   ('&XTYPE' NE 'B').M184                         31173.\n         AIF   ('&CFORMAT' NE 'SIMPLE').M179                  31174.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             31177.\n         IC    1,&INDEX(1)\n         AGO   .M184                                          31179.\n.M179    ANOP\n&XADDR   SETC  '&INDEX(1)'                                    31180.\n.M184    ANOP\n.*       CORP  DOCASE_INDEX_TO_REG1                           31185.\n         AIF   ('&CFORMAT' EQ 'SIMPLE').M070                  31063.\n.*       CALL  DOCASE_GENERAL_SETUP                           31065.\n         AIF   ('&CFORMAT' NE 'GENERAL').M200                 31194.\n&LABEL   B     &STRCPFX.BEG\n&LABEL   SETC  ''                                             31198.\n&BRCASE1 SETB  1                                              31199.\n.M200    ANOP\n&STRCGNL SETA  &STRCGNL+1                                     31201.\n         AIF   (&STRCGNL GT &STRCGNX).M219                    31202.\n&STRCMCV(&STRCGNL)  SETA  0-1                                 31204.\n&STRCCL#(&STRCGNL)  SETA  1                                   31206.\n&J       SETA  &STRCGNL*256                                   31208.\n&I       SETA  &J-255                                         31209.\n         AIF   ('&CFORMAT' NE 'GENERAL').M218                 31210.\n.M212    AIF   (&I GT &J).M218                                31212.\n&STRCOCC(&I)  SETB  0                                         31214.\n&I       SETA  &I+1                                           31215.\n         AGO   .M212                                          31216.\n.M218    AGO   .M223                                          31219.\n.M219    MNOTE 12,' STRC3104 GENERAL/SPARSE/CHARCOMP DOCASE NESTING'\n         MNOTE 0,'           LEVEL &STRCGNL EXCEEDS MAXIMUM OF &STRCGNX*\n               --'\n         MNOTE 0,'           MACROS MUST BE MODIFIED'         31220.\n.M223    ANOP\n.*       CORP  DOCASE_GENERAL_SETUP                           31224.\n.M070    ANOP\n.*       CALL  DOCASE_DEBUG_STUFF                             31071.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M258              31230.\n         AIF   (&BRCASE1).M248                                31232.\n         AIF   ('&CFORMAT' NE 'GENERAL').M242                 31236.\n&X       SETC  'BEG'                                          31241.\n         AGO   .M244                                          31242.\n.M242    ANOP\n&X       SETC  'C1'                                           31243.\n.M244    ANOP\n&LABEL   B     &STRCPFX&X\n&BRCASE1 SETB  1                                              31246.\n&LABEL   SETC  ''                                             31247.\n.M248    AIF   (NOT &STRCDBN).M252                            31249.\n         DC    C'&STRCNAM(&STRCNST)'\n.M252    AIF   (NOT &STRCDBC).M256                            31253.\n&STRCPFX.LSC  DC  X'00' LAST CASE NUMBER\n.M256    ANOP\n         DS    0H\n.M258    ANOP\n.*       CORP  DOCASE_DEBUG_STUFF                             31259.\n.*       CALL  DOCASE_INFO_SAVE                               31073.\n&STRCOP1(&STRCNST)  SETC  '0'                                 31266.\n&STRCOP2(&STRCNST)  SETC  '&XADDR'                            31267.\n&STRCOP3(&STRCNST)  SETC  '&CFORMAT'                          31268.\n&STRCOP4(&STRCNST)  SETC  '&XLENG'                            31269.\n&STRCINF(&STRCNST)  SETC  '&BRCASE1.010&XRANGA'               31270.\n.*       CORP  DOCASE_INFOR_SAVE                              31282.\n         AIF   ('&LABEL' EQ '').M079                          31076.\n&LABEL   DS    0H\n.M079    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCASEND": {"ttr": 1035, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DOCASEND  &USRNAME\n         ESACOD  &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOEND": {"ttr": 1037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DOEND  &USRNAME\n         OD     &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ELSE": {"ttr": 1039, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME ELSE  &BLEND=                                        13001.\n         COPY  STRCGBLS\n         LCLA  &ELSEBL#           ELSE_BLOCK_NUMBER           13008.\n         LCLC  &IFXLAB            IF_EXIT_LABEL               13011.\n         STRCTRAC  ELSE                                       13014.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     13016.\n         STRCVERF  IF,&BLEND                                  13020.\n         AIF   (&STRCERR).FIN                                 13025.\n         AIF   ('&STRCOP2(&STRCNST)' NE 'ELSE').M033          13029.\n         MNOTE 8,' STRC1302 ELSE HAS ALREADY BEEN GENERATED FOR THIS IF*\n               '                                              13031.\n         MEXIT\n.M033    AIF   ('&STRCOP1(&STRCNST)' EQ  '').M041             13034.\n         AIF   ('&STRCOP1(&STRCNST)' EQ '&USRNAME').M041      13034.\n         MNOTE 8,' STRC1301 ELSE=&STRCOP1(&STRCNST) SPECIFIED ON IF BLO*\n               CK &STRCNAM(&STRCNST)'                         13038.\n         MEXIT\n.M041    ANOP\n&ELSEBL# SETA  &STRCLB#+1                                     13042.\n         B     $&ELSEBL#.END\n         AIF   (NOT &STRCXIT(&STRCNST)).M051                  13046.\n&IFXLAB  SETC  '$&STRCBL#(&STRCNST)XIT'                       13048.\n&STRCXIT(&STRCNST)  SETB  0                                   13049.\n.M051    STRCPOP\n&USRNAME STRCPUSH  TYPEVAL=IF,ENDVAL=1,OP2VAL=ELSE,OP3VAL=&IFXLAB\n         AIF   ('&USRNAME' EQ '').M069                        13065.\n&USRNAME DS    0H\n.M069    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 1041, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   ENTER &MSG,            EYE-CATCHER                            @\n               &BASE=12,        BASE REGISTER                          @\n               &LV=72,          LENGTH OF GETMAIN IF RE-ENTRANT        @\n               &RENT=NO,        RE-ENTRANT?                            @\n               &ORG=C,          LOCATION COUNTER                       @\n               &GPR=YES,        EQUATE GENERAL PURPOSE REGISTERS       @\n               &FLOAT=NO,       EQUATE FLOATING POINT REGISTERS        @\n               &RMODE=24,       RESIDENCY MODE FOR CSECT               @\n               &AMODE=24,       ADDRESSING MODE FOR CSECT              @\n               &LOC=RES,        GETMAIN LOCATION IN VIRTUAL STORAGE    @\n               &PL=             GLOBAL FLAG\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  MACNAME:  ENTER                                                  *\n.*  MACAUTH:  SKIP ABADIE                                            *\n.*  MACDATE:  12/01/80       LAST UPDATE:  8/12/85                   *\n.*                                                                   *\n.*  MAY BE USED IN CONJUNTION WITH LEAVE MACRO.                      *\n.*  REGISTERS R0 AND R1 ARE RESTORED TO ENTRY VALUES PRIOR TO EXIT.  *\n.*                                                                   *\n.*  THIS MACRO AUTOMATICALLY INVOKES THE REQUATE (REGISTER EQUATE)   *\n.*  MACRO UNLESS GLOBAL FLAG &REGS IS SET TO ONE.                    *\n.*                                                                   *\n.*  THIS MACRO CONDITIONALLY INVOKES THE PROLOGUE MACRO IN ORDER TO  *\n.*  BUILD A STANDARD OS FORMAT MODULE IDENTIFIER.  IF GLOBAL FLAG    *\n.*  &PROLOG IS SET TO ONE, OR IF &PL=NO IS SPECIFIED, THE PROLOGUE   *\n.*  MACRO IS NOT INVOKED.                                            *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  MSG  'TEXT STRING'                                               *\n.*       THIS OPTIONAL PARAMETER WILL OVERRIDE THE DEFAULT STANDARD  *\n.*       OS FORMAT MODULE IDENTIFIER GENERATED BY THE PROLOGUE MACRO.*\n.*       ENTER USES PROLOGUE TO GENERATE THE MODULE IDENTIFIER.  SEE *\n.*       THE DESCRIPTION OF THE MSG PARAMETER IN THE PROLOGUE MACRO  *\n.*       FOR CODING DETAILS.                                         *\n.*  BASE={REG|(REG0,REG1,...,REGN)|NO}                               *\n.*       BASE REGISTER:  REGISTER SPECIFIED WILL BE USED AS A BASE   *\n.*       REGISTER.  DEFAULT IS REGISTER 12.  RANGE 2 - 12.  IF THE   *\n.*       LIST FORM OF THE OPERAND IS USED, A USING STATEMENT HAVING  *\n.*       ALL THE INDICATED REGISTERS WILL BE GENERATED.  IN THE LIST *\n.*       FORM, THE FIRST REGISTER IS CONSIDERED TO BE THE FIRST BASE *\n.*       REGISTER.  ALL BASE REGISTERS ARE INITIALIZED.  NO BASE     *\n.*       REGISTER IS ESTABLISHED IF BASE=NO IS CODED; ALL OTHER      *\n.*       ACTIONS OCCUR AS DESCRIBED.                                 *\n.*  LV={LITERAL|EXPRESSION}                                          *\n.*       THIS PARAMETER IS APPLICABLE ONLY IF RENT=YES IS CODED.     *\n.*       THE VALUE OF THE LITERAL OR EXPRESSION IS USED IN AN R-FORM *\n.*       GETMAIN.  THE FIRST 72 BYTES OF THE AREA ARE USED FOR A     *\n.*       REGISTER SAVE AREA.  REGISTER 13 WILL BE LOADED WITH THE    *\n.*       ADDRESS OF THE AREA.                                        *\n.*       LITERAL:  A VALUE FROM 72 TO 4096 INCLUSIVE.                *\n.*       EXPRESSION:  ANY VALID ASSEMBLER EXPRESSION OF ANY VALUE.   *\n.*  RENT={YES|NO}                                                    *\n.*       YES:  GENERATE GETMAIN TO ACQUIRE SAVE AREA.  RENT=YES WILL *\n.*       FACILITATE THE USE OF REENTRANT CODING TECHNIQUES.          *\n.*       NO:   GENERATE STANDARD IN-LINE 18 WORD SAVE AREA.          *\n.*  ORG={L|C}                                                        *\n.*       L:  USE CURRENT LOCATION COUNTER VALUE IN USING STATEMENT   *\n.*       (E.G.,   USING *,R12   ).                                   *\n.*       C:  USE CSECT LABEL (&SYSECT) AS ORIGIN FOR USING STATEMENT *\n.*       (E.G.,   USING &SYSECT,R12   ).                             *\n.*  PL={ |NO}                                                        *\n.*       NO:   THE PROLOG GLOBAL FLAG IS NOT CHECKED, AND THE        *\n.*       PROLOGUE MACRO IS NOT INVOKED.  THIS PARAMETER SHOULD ONLY  *\n.*       BE SPECIFIED WHEN NO MESSAGE AND CSECT GENERATION IS        *\n.*       REQUIRED, AND/OR NO PROLOGUE MACRO HAS BEEN INVOKED,        *\n.*       DIRECTLY OR INDIRECTLY, SINCE THE LAST OCCURRENCE OF ENTER. *\n.*                                                                   *\n.*** AMODE, RMODE,  ADDED FOR MVS/XA SUPPORT 85.122 -DGA-          ***\n.*                                                                   *\n.*  AMODE={ |24|31|ANY}                                              *\n.*       24:  THE PROGRAM IS DESIGNED TO RECEIVE CONTROL IN 24-BIT   *\n.*            MODE.                                                  *\n.*       31:  THE PROGRAM IS DESIGNED TO RECEIVE CONTROL IN 31-BIT   *\n.*            MODE.                                                  *\n.*       ANY: THE PROGRAM IS DESIGNED TO RECEIVE CONTROL IN EITHER   *\n.*            24-BIT OR 31-BIT MODE.                                 *\n.*  RMODE={ |24|31|ANY}                                              *\n.*       24:  THE PROGRAM IS DESIGNED TO RESIDE BELOW THE 16-MEG     *\n.*            LINE.                                                  *\n.*       ANY: THE PROGRAM IS DESIGNED TO RESIDE IN ANY VIRTUAL       *\n.*            STORAGE LOCATION, EITHER ABOVE OR BELOW THE 16-MEG     *\n.*            LINE.                                                  *\n.*** LOC  ADDED FOR MVS/XA SUPPORT 85.210 -DGA-                    ***\n.*                                                                   *\n.*  LOC ={BELOW | (BELOW,ANY) | ANY | (ANY,ANY) | RES | (RES,ANY)}   *\n.*  LOCATION IN VIRTUAL AND REAL STORAGE TO ALLOCATE.                *\n.*  (SEE GC28-1154 MVS/XA SUPERVISOR SERVICES AND MACRO INSTRUCTIONS *\n.*   GETMAIN ... OPERAND LOC)\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  EXAMPLES:                                                        *\n.*                                                                   *\n.* TEST1 ENTER BASE=8,LV=300,RENT=YES                                *\n.*     . R8 IS BASE, GETMAIN 300 BYTES, CSECT NAME IS TEST1,         *\n.*     . MODULE ID IS 'TEST1 &SYSDATE ANDERSON, CLAYTON & CO.'       *\n.*                                                                   *\n.* TEST2 ENTER                                                       *\n.*     . R12 IS BASE, IN-LINE SAVEAREA, CSECT NAME IS TEST2,         *\n.*     . MODULE ID IS 'TEST2 &SYSDATE ANDERSON, CLAYTON & CO.'       *\n.*                                                                   *\n.*       ENTER 'VERSION 1',BASE=(10,11),RENT=YES,LV=WORKEND-WORK     *\n.*     . R10,R11 ARE BASES, GETMAIN AL4(WORKEND-WORK) BYTES,         *\n.*     . CSECT NAME DEFAULTS TO MAIN, MODULE IDENTIFIER IS           *\n.*     . C'MAIN &SYSDATE VERSION 1'                                  *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*\n.*  DEFINE GLOBAL AND LOCAL SET SYMBOLS\n.*\n         GBLC  &VIRT\n         GBLB  &RE,&REGS,&PROLOG,&ENTER31\n.*\n         LCLA  &B1,&BCT,&BICT\n         LCLB  &ALV,&CLV,&BT(16),&OT\n         LCLC  &BO,&LAB\n.*\n.*       SET GLOBAL FOR LEAVE MACRO IF WE ARE IN 31-BIT MODE\n.*\n         AIF   ('&AMODE' NE '31').NO31MDE\n&ENTER31 SETB  1                 SET GLOBAL ENTER 31-BIT FLAG\n.NO31MDE ANOP  ,\n.*\n.*       GENERATE MODULE IDENTIFICATION PROLOGUE.\n.*\n&LAB     SETC  '&SYSECT'         SET CSECT NAME\n         AIF   ((&PROLOG) OR ('&PL' EQ 'NO')).E000A SKIP PROLOGUE\n&LAB     SETC  '&LABEL'          SET CSECT TO LABEL NAME\n         AIF   ('&LABEL' NE '').E000  GEN PROLOGUE IF &LABEL EXISTS\n         MNOTE 0,'CSECT NAME OMITTED - CSECT NAME DEFAULTS TO MAIN'\n&LAB     SETC  'MAIN'            SET CSECT TO MAIN\n.E000    ANOP  ,\n         PROLOGUE &LAB,&MSG,RMODE=&RMODE,AMODE=&AMODE\n.*\n.*       GENERATE STANDARD REGISTER EQUATES IF GLOBAL FLAG &REGS = 0\n.*\n.E000A   ANOP\n&PROLOG  SETB  0                 RESET GLOBAL PROLOGUE FLAG\n         REQUATE GPR=&GPR,FLOAT=&FLOAT\n.*\n.*       SET CONSTANTS AND LOGICAL SWITCHES\n.*\n.E001    ANOP  ,\n&OT      SETB  ('&ORG' EQ 'L')               SET ORIGIN TYPE FLAG\n&RE      SETB  ('&RENT' EQ 'YES')            SET REENTRANT FLAG\n&BCT     SETA  N'&BASE                       SET NUMBER OF BASE REGS\n&BICT    SETA  1                             SET BASE REG COUNTER\n&ALV     SETB  (('&LV' GE '72') AND ('&LV' LE '4096')) SET LV FLAG\n&CLV     SETB  ('&LV'(1,1) LE '0')           SET LV FLAG\n.*\n.*  SAVE CALLERS REGS, VERIFY BASE REG, AND ESTABLISH ADDRESSABILITY\n.*\n         STM   R14,R12,12(R13)          SAVE CALLER'S REGS\n.*\n.E002    ANOP\n         AIF   ('&BASE' EQ 'NO').E003        SKIP, IF NO BASE REG\n         AIF   (&BCT NE 1).E002B             DECIDE WHICH BASE REG RTN\n.*\n.*  SINGLE BASE REGISTER SPECIFIED\n.*\n.E002A   ANOP\n&B1      SETA  &BASE\n&BO      SETC  '&B1'                    SET STRING FOR USING\n         AIF   ((&B1 GE 2) AND (&B1 LE 12)).E002A1\n         MNOTE 4,'BASE REGISTER SPECIFIED IS INVALID - USING R12'\n&B1      SETA  12\n.E002A1  ANOP\n         AIF   (&OT).E002A2\n         LR    R&B1,R15                 LOAD BASE REG\n         USING &LAB,R&B1                .\n         AGO   .E003\n.E002A2  ANOP\n         BALR  R&B1,0                   LOAD BASE REG\n         USING *,R&B1                   .\n         AGO   .E003\n.*\n.*  MULTIPLE BASE REGISTERS SPECIFIED\n.*\n.E002B   ANOP\n&B1      SETA  &BASE(&BICT)\n         AIF   (NOT &BT(&B1+1)).E002C        CHECK REDUNDANCY\n         MNOTE 8,'REG &B1 REDUNDANTLY SPECIFIED - GEN SUPPRESSED'\n         MEXIT\n.E002C   ANOP\n&BT(&B1+1) SETB  1                           SET REG USE BIT\n         AIF   ((&B1 GE 2) AND (&B1 LE 12)).E002D\n         MNOTE 8,'INVALID SECONDARY BASE REGISTER - GEN SUPPRESSED'\n         MEXIT\n.E002D   ANOP\n&BICT    SETA  &BICT+1\n         AIF   (&BICT LE &BCT).E002B         CHECK NEXT BASE REG\n&BO      SETC  '&BASE'(2,K'&BASE-2)          DONE, SET STRING FOR USING\n&BICT    SETA  1                             SET LOOP CONTROL\n         AIF   (&OT).E002E1\n         LR    R&BASE(1),R15            LOAD BASE REG\n         USING &LAB,&BO                 .\n         AGO   .E002E\n.E002E1  ANOP\n         BALR  R&BASE(1),0              LOAD BASE REG\n         USING *,&BO                    .\n.E002E   ANOP\n&BICT    SETA  &BICT+1                  INCREMENT LOOP CONTROL\n&B1      SETA  &BASE(&BICT)\n         AIF   (NOT &BT(&B1+1)).E002E\n         LA    R&B1.,4095                    SECONDARY\n         LA    R&B1.,1(R&B1.,R&BASE(&BICT-1))     BASE REG\n         AIF   (&BICT LT &BCT).E002E         SET UP NEXT BASE REG\n.*\n.*  SET UP SAVE AREA\n.*\n.E003    ANOP\n         AIF   (NOT &RE).E003B\n.*\n.*  RENT=YES:  ISSUE GETMAIN FOR REENTRANT PROG\n.*\n&VIRT    SETC  '&LV'\n         AIF   (&ALV OR &CLV).E003A\n         MNOTE 4,'LV SPECIFIED IS INVALID - USING 72 BYTES'\n&VIRT    SETC  '72'\n.E003A   ANOP\n         MNOTE  *,'       GETMAIN R,LV=&VIRT,LOC=&LOC'\n         GETMAIN R,LV=&VIRT,LOC=&LOC\n         AGO   .E004                    SKIP RENT=NO PROCESSING\n.*\n.*  RENT=NO:  ESTABLISH DS TYPE SAVE AREA\n.*\n.E003B   ANOP\n         CNOP  0,4                      ALIGN FULL WORD\n         BAL   R1,*+76                  BRANCH AROUND PROGRAM RSA\n         DS    18F                      RSA\n.*\n.*  SET UP FORWARD AND BACKWARD SAVE AREA CHAIN POINTERS\n.*\n.E004    ANOP\n         ST    R1,8(,R13)               SET FORWARD RSA PTR\n         ST    R13,4(,R1)               SET BACKWARD RSA PTR\n         LR    R13,R1                   GET PROGRAM RSA ADDR\n         L     R1,4(,R1)                GET CALLER'S RSA ADDR\n         AIF   (NOT &RE).E004A          DON'T RECOVER R0 IF NOT REENT\n         LM    R0,R1,20(R1)             RESTORE REGS 0, 1\n         MEXIT\n.E004A   ANOP\n         L     R1,24(,R1)               RESTORE REG 1\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESAC": {"ttr": 1285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ESAC  &USRNAME                                       35001.\n         COPY  STRCGBLS\n         STRCTRAC  ESAC                                       35005.\n         AIF   (&STRCNST GT &STRCNSL).M023                    35007.\n         STRCVERF  CASE,&USRNAME                              35009.\n         AIF   (&STRCERR).FIN                                 35019.\n.M023    STRCPOP\n         AIF   (&STRCNST GT &STRCNSL).FIN                     35028.\n         B     $&STRCBL#(&STRCNST)END\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESACOD": {"ttr": 1287, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ESACOD  &USRNAME                                     37001.\n         COPY  STRCGBLS\n         LCLA  &CASECTR           CASE_COUNTER                37009.\n         LCLA  &T                 T                           37010.\n         LCLA  &COMPLB#           COMP_LABEL_NO               37011.\n         LCLA  &MAXSD             MAX_SD_VALUE                37012.\n         LCLA  &BASE              BASE                        37013.\n         LCLB  &MISCFND           MISC_FOUND                  37015.\n         LCLB  &MULTOF4           MULTIPLESOF4                37016.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         37018.\n         LCLB  &ANYCOMP           ANY_COMP_CASES              37021.\n         LCLB  &ANYSELF           ANY_SELFDEF_CASES           37023.\n         LCLB  &RANGREQ           RANGE_TEST_REQD             37025.\n         LCLC  &CFORMAT           CASE_FORMAT                 37028.\n         LCLC  &XADDR             INDEX_ADDR                  37030.\n         LCLC  &NOCASE            NOCASE                      37031.\n         LCLC  &LABEL             LABEL                       37033.\n         LCLA  &I                 I                    37185. 37238.\n         LCLA  &INCR              INCR                        37238.\n         STRCTRAC  ESACOD                                     37038.\n         AIF   (&STRCNST GT &STRCNSL).M083                    37040.\n         STRCVERF  DOCASE,&USRNAME                            37042.\n         AIF   (&STRCERR).FIN                                 37052.\n.*       CALL  ESACOD_INFO_UNPACK                             37056.\n&CASECTR SETA  &STRCOP1(&STRCNST)                             37096.\n&XADDR   SETC  '&STRCOP2(&STRCNST)'                           37097.\n&CFORMAT SETC  '&STRCOP3(&STRCNST)'                           37098.\n&MISCFND SETB  ('&STRCINF(&STRCNST)'(2,1) EQ '1')             37099.\n&MULTOF4 SETB  ('&STRCINF(&STRCNST)'(3,1) EQ '1')             37100.\n&XRANGA  SETB  ('&STRCINF(&STRCNST)'(5,1) EQ '1')             37101.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          37102.\n.*       CORP  ESACOD_INFO_UNPACK                             37103.\n         AIF   ('&CFORMAT' NE 'GENERAL').M064                 37060.\n.*       CALL  ESACOD_GENERAL_CASE_CHOICE                     37062.\n.*       CALL  ESACOD_GENERAL_CASE_INFO                       37109.\n&I       SETA  &STRCGNL                                       37187.\n&STRCGNL SETA  &I-1                                           37188.\n         AIF   (&I LE &STRCGNX).M192                          37189.\n&STRCERR SETB  1                                              37191.\n         AGO   .M199                                          37192.\n.M192    ANOP\n&MAXSD   SETA  &STRCMCV(&I)                                   37193.\n&ANYSELF SETB  (&MAXSD GE 0)                                  37194.\n&COMPLB# SETA  &STRCCL#(&I)                                   37195.\n&ANYCOMP SETB  (&COMPLB# GT 1)                                37196.\n&BASE    SETA  ((&I-1)*256)+1                                 37197.\n&STRCERR SETB  0                                              37198.\n.M199    ANOP\n.*       CORP  ESACOD_GENERAL_CASE_INFO                       37200.\n         AIF   (&STRCERR).M131                                37112.\n         AIF   (NOT &ANYSELF).M121                            37114.\n.*       CALL  ESACOD_SELFDEF_GEN                             37116.\n&LABEL   SETC  '&STRCPFX.BEG'                                 37156.\n         AIF   (NOT &ANYCOMP).M163                            37160.\n&NOCASE  SETC  '&STRCPFX.C1'                                  37161.\n         AGO   .M170                                          37162.\n.M163    AIF   (NOT &MISCFND).M166                            37163.\n&NOCASE  SETC  '&STRCPFX.MSC'                                 37164.\n         AGO   .M170                                          37165.\n.M166    ANOP\n&NOCASE  SETC  '&STRCPFX.END'                                 37167.\n.M170    ANOP\n&RANGREQ SETB  ((NOT &XRANGA) OR &ANYCOMP)                    37170.\n         AIF   (NOT &RANGREQ).M176                            37171.\n.*       CALL  ESACOD_OUT_OF_RANGE_CHECK                      37173.\n         AIF   ('&XADDR' NE '').M224                          37207.\n&LABEL   LTR   1,1\n         AIF   (&STRCOCC(&BASE)).M211                         37210.\n         BNP   &NOCASE\n         AGO   .M215                                          37215.\n.M211    BM    &NOCASE\n.M215    C     1,&STRCPFX.SIZ\n         BH    &NOCASE\n         AIF   (NOT &MULTOF4).M232                            37218.\n         LA    0,B'00000011'\n         NR    0,1\n         BNZ   &NOCASE\n         AGO   .M232                                          37224.\n.M224    ANOP\n&LABEL   CLI   &XADDR,&MAXSD\n         BH    &NOCASE\n         AIF   (NOT &MULTOF4).M232                            37227.\n         TM    &XADDR,B'00000011'\n         BNZ   &NOCASE\n.M232    ANOP\n&LABEL   SETC  ''                                             37233.\n.*       CORP  ESACOD_OUT_OF_RANGE_CHECK                      37234.\n.M176    ANOP\n.*       CALL  ESACOD_BRVCT_GEN                               37177.\n         AIF   ('&XADDR' EQ '').M245                          37240.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             37243.\n         IC    1,&XADDR\n.M245    AIF   (NOT &MULTOF4).M249                            37246.\n&INCR    SETA  4                                              37248.\n         AGO   .M253                                          37249.\n.M249    ANOP\n&INCR    SETA  1                                              37250.\n&LABEL   SLA   1,2\n&LABEL   SETC  ''                                             37252.\n.M253    AIF   (&STRCOCC(&BASE) OR '&XADDR' NE '').M256       37254.\n&LABEL   B     *(1)\n&I       SETA  &INCR                                          37260.\n         AGO   .M262                                          37262.\n.M256    ANOP\n&LABEL   B     *+4(1)\n&I       SETA  0                                              37257.\n.M262    ANOP\n&LABEL   SETC  ''                                             37263.\n.M264    AIF   (&I GT &MAXSD).M273                            37264.\n         AIF   (&STRCOCC(&BASE+&I)).M267                      37266.\n         B     &NOCASE\n         AGO   .M271                                          37271.\n.M267    B     &STRCPFX.G&I\n.M271    ANOP\n&I       SETA  &I+&INCR                                       37272.\n         AGO   .M264                                          37273.\n.M273    AIF   (NOT &RANGREQ OR '&XADDR' NE '').M280          37276.\n&STRCPFX.SIZ  DC  F'&MAXSD'\n.M280    AIF   (NOT &ANYCOMP).M290                            37281.\n         AIF   (&MISCFND).M284                                37283.\n&STRCPFX.C&COMPLB#  DS  0H\n         AGO   .M290                                          37290.\n.M284    ANOP\n&STRCPFX.C&COMPLB#  EQU  &STRCPFX.MSC\n.M290    ANOP\n.*       CORP  ESACOD_BRVCT_GEN                               37291.\n.*       CORP  ESACOD_SELFDEF_GEN                             37180.\n         AGO   .M131                                          37121.\n.M121    AIF   (NOT &ANYCOMP).M128                            37123.\n.*       CALL  ESACOD_GENERAL_SYMB_ONLY                       37125.\n&STRCPFX.BEG  EQU  &STRCPFX.C1\n         AIF   (&MISCFND).M143                                37142.\n&STRCPFX.C&COMPLB#  DS  0H\n         AGO   .M148                                          37148.\n.M143    ANOP\n&STRCPFX.C&COMPLB#  EQU  &STRCPFX.MSC\n.M148    ANOP\n.*       CORP  ESACOD_GENERAL_SYMB_ONLY                       37149.\n         AGO   .M131                                          37128.\n.M128    MNOTE 8,' STRC3701 DOCASE CONTAINS NO VALID CASES'   37130.\n.M131    ANOP\n.*       CORP  ESACOD_GENERAL_CASE_CHOICE                     37133.\n         AGO   .M083                                          37064.\n.M064    ANOP\n  AIF  ('&CFORMAT' NE 'SPARSE' AND '&CFORMAT' NE 'CHARCOMP').M071\n&T       SETA  &STRCCL#(&STRCGNL)                             37067.\n&STRCGNL SETA  &STRCGNL-1                                     37069.\n         AGO   .M074                                          37071.\n.M071    ANOP\n&T       SETA  &CASECTR+1                                     37072.\n.M074    AIF   (&MISCFND).M076                                37075.\n&STRCPFX.C&T  DS  0H\n         AGO   .M081                                          37081.\n.M076    ANOP\n&STRCPFX.C&T  EQU  &STRCPFX.MSC\n.M081    ANOP\n.M083    STRCPOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT": {"ttr": 1291, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME EXIT  &XTARGET                                       55001.\n         COPY  STRCGBLS\n         STRCTRAC  EXIT                                       55004.\n         AIF   (&STRCNST GT &STRCNSL).M018                    55006.\n         STRCXFND  &XTARGET                                   55010.\n         AIF   (&STRCERR).M018                                55014.\n&USRNAME B     &STRCUBL\n.M018    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FI": {"ttr": 1293, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         FI    &USRNAME                                       15001.\n         COPY  STRCGBLS\n         STRCTRAC  FI                                         15005.\n         AIF   (&STRCNST LE &STRCNSL).M012                    15007.\n         STRCPOP\n         MEXIT\n.M012    STRCVERF  IF,&USRNAME                                15012.\n         AIF   (&STRCERR).FIN                                 15022.\n         AIF   ('&STRCOP1(&STRCNST)' EQ '').M031              15026.\n         MNOTE 8,' STRC1501 ELSE BLOCK \"&STRCOP1(&STRCNST)\" NOT FOUND'\n.M031    STRCPOP  &STRCOP3(&STRCNST)                          15031.\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINAL": {"ttr": 1295, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         FINAL\n         COPY  STRCGBLS\n         STRCTRAC  FINAL\n.M008    AIF   (&STRCNST LE 0).M021                           53008.\n         AIF   (&STRCNST LE &STRCNSL).M013                    53010.\n         MNOTE 8,' STRC5301 BLEND OF OUTSTANDING BLOCK ASSUMED'\n         AGO   .M016                                          53013.\n.M013    MNOTE 8,' STRC5301 BLEND OF &STRCNAM(&STRCNST) ASSUMED'\n.M016    BLEND\n         AGO   .M008                                          53021.\n.M021    AIF   (NOT &STRCSFP).M033                            53023.\n         AIF   ('&STRCPSP' NE '$FIRSTSV').M029                53025.\n$FIRSTSV DC    0F'0',X'FFFFFFFF',A(0,0) DUMMY SAVEAREA\n$LASTSAV EQU   $FIRSTSV\n         AGO   .M033                                          53029.\n.M029    ANOP\n$LASTSAV EQU   &STRCPSA\n&STRCPSP EQU   0\n.M033    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IF": {"ttr": 1297, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME IF    &REL=,&MASK=,&EXIT=,&ELSE=                     11001.\n         COPY  STRCGBLS\n         LCLB  &VALIDX            VALID_EXIT                  11012.\n         LCLC  &XLABEL            EXIT_LABEL                  11016.\n         LCLC  &LABEL             LABEL                       11018.\n         LCLC  &HOLD              HOLD                        11121.\n         LCLC  &TARGET            TARGET                      11209.\n         STRCTRAC   IF                                        11020.\n&USRNAME STRCPUSH   TYPEVAL=IF,OP1VAL=&ELSE,ENDVAL=1          11022.\n         AIF   (&STRCERR).FIN                                 11030.\n         AIF   ('&REL&MASK' EQ '').M037                       11034.\n         MNOTE 8,' STRC1102 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M037    ANOP\n&LABEL   SETC  '&USRNAME'                                     11038.\n&VALIDX  SETB  ('&EXIT' NE '')                                11040.\n         AIF   ('&SYSLIST(1,1)' NE 'ASYNCH').M045             11042.\n.*       CALL  IF_ASYNCH_BRANCH                               11044.\n         AIF   (NOT &VALIDX).M084                             11080.\n         MNOTE 8,' STRC1101 EXIT= IGNORED WITH \"ASYNCH\"'      11082.\n&VALIDX  SETB  0                                              11083.\n.M084    ANOP\n&LABEL   B     &STRCPFX.END\n&LABEL   SETC  ''                                             11087.\n.*       CORP  IF_ASYNCH_BRANCH                               11088.\n         AGO   .M060                                          11045.\n.M045    ANOP\n.*       CALL  IF_SET_CONDITIONAL_TEST_SPECS                  11046.\n&STRCUBL SETC  '&STRCPFX.END'                                 11106.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 11109.\n&STRCUFC SETB  1                                              11111.\n&STRCFLU SETB  0                                              11113.\n.*       CORP  IF_SET_CONDITIONAL_TEST_SPECS                  11114.\n         AIF   (NOT &VALIDX).M056                             11050.\n.*       CALL  IF_EXIT_SPECS                                  11052.\n         AIF   ('&ELSE' EQ '').M127                           11123.\n         MNOTE 8,' STRC1103 EXIT= IGNORED WITH ELSE='         11125.\n&VALIDX  SETB  0                                              11126.\n         AGO   .M160                                          11127.\n.M127    ANOP\n&HOLD    SETC  '&STRCUBL'                                     11128.\n         STRCXFND  &EXIT                                      11130.\n         AIF   (NOT &STRCDBC).M145                            11136.\n&XLABEL  SETC  '&STRCUBL'                                     11138.\n&STRCUBL SETC  '&HOLD'                                        11139.\n         AGO   .M159                                          11145.\n.M145    ANOP\n&STRCUFL SETC  '&STRCPFX'                                     11146.\n&STRCUFC SETB  0                                              11147.\n&STRCEND(&STRCNST)  SETB  0                                   11148.\n         AIF   (NOT &STRCERR).M159                            11149.\n&STRCUBL SETC  '&STRCPFX'                                     11154.\n&STRCFLU SETB  1                                              11155.\n&STRCERR SETB  0                                              11157.\n.M159    ANOP\n.M160    ANOP\n.*       CORP  IF_EXIT_SPECS                                  11161.\n.M056    ANOP\n.*       CALL  IF_CONDITIONAL_GENERATOR                       11057.\n&STRCFRX SETA  1                                              11173.\n&STRCLSX SETA  N'&SYSLIST                                     11174.\n&STRCUID SETC  'I'                                            11177.\n         AIF   (NOT &STRCDDM).M180                            DEBUGMACS\n         MNOTE *,' STRC1199 CALL CEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(*\n               3),&SYSLIST(4),&SYSLIST(5),...'                DEBUGMACS\n.M180    ANOP\n&LABEL   STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      11180.\n         AIF   (&STRCFLU).M200                                11198.\n&LABEL   SETC  ''                                             11202.\n         AGO   .M203                                          11203.\n.M200    ANOP\n&LABEL   SETC  '&STRCUFL'                                     11200.\n.M203    ANOP\n.*       CORP  IF_CONDITIONAL_GENERATOR                       11204.\n.M060    ANOP\n.*       CALL  IF_BLOCK_COUNT                                 11061.\n         AIF   ('&SYSLIST(1,1)' NE 'ASYNCH').M219             11211.\n         AIF   (NOT &STRCDBN).M218                            11213.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M218    AGO   .M258                                          11218.\n.M219    AIF   (NOT (&STRCDBC OR &STRCDBN)).M257              11220.\n         AIF   (NOT (&STRCDBC)).M229                          11222.\n&LABEL   LH    1,&STRCPFX.IFC\n&LABEL   SETC  ''                                             11226.\n         LA    1,1(1)\n         STH   1,&STRCPFX.IFC\n.M229    AIF   ('&XLABEL' NE '').M235                         11231.\n&TARGET  SETC  '&STRCPFX.GO'                                  11233.\n         AGO   .M239                                          11235.\n.M235    ANOP\n&TARGET  SETC  '&XLABEL'                                      11236.\n.M239    ANOP\n&LABEL   B     &TARGET\n         AIF   ('&XLABEL' NE '').M245                         11241.\n&LABEL   SETC  '&TARGET'                                      11243.\n         AGO   .M247                                          11245.\n.M245    ANOP\n&LABEL   SETC  ''                                             11246.\n.M247    ANOP\n         AIF   (NOT &STRCDBN).M252                            11248.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M252    AIF   (NOT &STRCDBC).M256                            11253.\n&STRCPFX.IFC  DC  H'0' IF COUNT\n.M256    ANOP\n.M257    ANOP\n.M258    ANOP\n.*       CORP  IF_BLOCK_COUNT                                 11259.\n         AIF   ('&LABEL' EQ '').M067                          11064.\n&LABEL   DS    0H\n.M067    AIF   (NOT &VALIDX).M073                             11068.\n         FI\n.M073    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IFEND": {"ttr": 1300, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IFEND  &USRNAME\n         FI     &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LEAVE": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LEAVE &RC=0,&LV=,&RR=,&RENT=NO\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  MACNAME:  LEAVE                                                  *\n.*  MACAUTH:  SKIP ABADIE                                            *\n.*  MACDATE:  12/01/80        LASTUPD:  8/12/85                      *\n.*                                                                   *\n.*  MAY BE USED IN CONJUNTION WITH ENTER MACRO.                      *\n.*                                                                   *\n.*  ENTER AND LEAVE MACROS MAY BE NESTED IN AN ASSEMBLY, HOWEVER,    *\n.*  THE LV AND RENT PARMS MUST BE EXPLICITLY GIVEN IN THIS CASE.     *\n.*                                                                   *\n.*  THIS MACRO AUTOMATICALLY INVOKES THE REQUATE (REGISTER EQUATE)   *\n.*  MACRO UNLESS GLOBAL FLAG &REGS IS SET TO ONE.                    *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  RC={LITERAL|(REG)}                                               *\n.*       RETURN CODE:  SPECIFY LITERAL 0 - 4095 OR SINGLE REGISTER   *\n.*       (2) - (12) OR (15), TO BE RETURNED TO CALLER IN R15.        *\n.*       DEFAULT RETURN CODE IS ZERO.                                *\n.*  RR={(REG,...,REGN)}                                              *\n.*       RETURN REGISTER:  CONTENTS OF REGISTERS IN LIST WILL BE     *\n.*       RETURNED TO CALLER (I.E.,  CALLERS REGISTERS CORRESPONDING  *\n.*       TO REGISTERS SPECIFIED IN LIST WILL NOT BE RESTORED).       *\n.*       SPECIFY REGISTERS 2 - 12 OR 0.  CAPABILITY TO RETURN R0 IS  *\n.*       PROVIDED FOR FORTRAN FUNCTION COMPATIBILITY.  IT SHOULD BE  *\n.*       NOTED THAT IF RR=(0) AND RENT=YES ARE BOTH SELECTED, THEN   *\n.*       THE CONTENTS OF R0 MUST BE STORED IN, AND SUBSEQUENTLY      *\n.*       RESTORED FROM, THE CALLERS SAVE AREA, SINCE THE FREEMAIN    *\n.*       SVC ALTERS THE CONTENTS OF R0.                              *\n.*  LV={LITERAL}                                                     *\n.*       LITERAL VALUE:  IF RENT=YES IS CODED, THE LITERAL VALUE IS  *\n.*       THE SIZE OF THE AREA TO BE FREED BY THE FREEMAIN SVC.       *\n.*       PARAMETER LV IS NOT REQUIRED IF ENTER MACRO HAS PREVIOUSLY  *\n.*       BEEN USED.  IT IS OBTAINED THROUGH GLOBAL VARIABLE &VIRT.   *\n.*       IF RENT=NO IS CODED OR ALLOWED TO DEFAULT, THE LV PARAMETER *\n.*       IS IGNORED.                                                 *\n.*  RENT={YES|NO}                                                    *\n.*       YES:  GENERATE FREEMAIN TO FREE STORAGE ACQUIRED BY ENTER   *\n.*       MACRO.  IF THE LEAVE MACRO IS BEING USED TO FREE AN AREA    *\n.*       THAT WAS NOT ACQUIRED BY THE ENTER MACRO, THEN THE LV       *\n.*       PARAMETER MUST ALSO BE SPECIFIED.                           *\n.*       NO:   NO FREEMAIN SVC REQUIRED.                             *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  ADDED MVS/XA (31-BIT RETURN) SUPPORT -DGA-85.224                 *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  EXAMPLES:                                                        *\n.*       LEAVE RC=32,RR=(9,4),LV=300,RENT=YES                        *\n.*       LEAVE RR=(0),RENT=YES                                       *\n.*       LEAVE RC=(5),RR=(6)                                         *\n.*       LEAVE                                                       *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*\n.*  DEFINE GLOBAL AND LOCAL SET SYMBOLS\n.*\n         GBLC  &VIRT\n         GBLB  &RE,&REGS,&ENTER31\n.*\n         LCLA  &R1,&R2,&RRT,&RICT\n         LCLB  &ALV,&CLV,&RT(16),&RCR,&CC15\n         LCLC  &DISP,&CC,&CCT,&NDX,&LAB\n.*\n         AIF   (&REGS).L000\n         REQUATE\n*\n.L000    ANOP\n.*\n.*  SET CONSTANTS AND LOGICAL SWITCHES\n.*\n&RCR     SETB  ('&RC'(1,1) EQ '(')           SET RETURN CODE TYPE FLAG\n&RRT     SETA  N'&RR                         SET NUMBER OF RETRN REGS\n&RICT    SETA  1                             SET RETURN REG COUNTER\n&ALV     SETB  (('&LV' GE '72') AND ('&LV' LE '4096'))   SET LV FLAG\n&CLV     SETB  ('&LV' LE '0')                SET LV FLAG\n&DISP    SETC  '20242832364044485256606468081216' STANDARD S.A. DISPLS\n.*\n.*  SET RT FLAGS FOR REGISTERS INCLUDED IN RR PARAMETER\n.*\n         AIF   (&RRT EQ 0).L002\n.L001    ANOP\n&R1      SETA  &RR(&RICT)\n         AIF   (NOT &RT(&R1+1)).L001A        CHECK REDUNDANCY\n         MNOTE 8,'REG &R1 REDUNDANTLY SPECIFIED - GEN SUPPRESSED'\n         MEXIT\n.L001A   ANOP\n&RT(&R1+1) SETB  1                           SET REG USE BIT\n         AIF   (((&R1 GE 2) AND (&R1 LE 12)) OR (&R1 EQ 0)).L001B\n         MNOTE 8,'RETURN REG &R1 NOT PERMITTED - GEN SUPPRESSED'\n         MEXIT\n.L001B   ANOP\n&RICT    SETA  &RICT+1\n         AIF   (&RICT LE &RRT).L001\n.*\n.*  CHAIN BACK TO CALLERS SAVE AREA\n.*\n.L002    ANOP\n&LAB     SETC  '&LABEL'\n         AIF   ((NOT &RE) AND ('&RENT' EQ 'NO')).L002C\n&LAB     LR    R1,R13                   OUR RSA ADDR\n&LAB     SETC  ''\n.L002C   ANOP\n&LAB     L     R13,4(,R13)              CALLER'S RSA ADDR\n.*\n.*  INITIALIZE RETURN CODE REGISTER (R15)\n.*\n         AIF   (&RCR).L002B\n&CCT     SETC  'A'                         SET RETURN CODE TYPE\n         AIF   ((&RC GE 0) AND (&RC LE 4095)).L002A\n         MNOTE 4,'INVALID RETURN CODE - USING 4095'\n&CC      SETC  '4095'                      SET RETURN CODE LITERAL\n         AGO   .L003\n.L002A   ANOP\n&CC      SETC  '&RC'                       SET RETURN CODE LITERAL\n         AGO   .L003\n.L002B   ANOP\n&CCT     SETC  'R'                         SET RETURN CODE TYPE\n&CC      SETC  'R'.'&RC'(2,K'&RC-2)        SET RETURN CODE REGISTER\n&CC15    SETB  ('&CC' EQ 'R15')            SET CC15 FLAG\n         AIF   ((('&CC' GE 'R2') AND ('&CC' LE 'R12')) OR (&CC15)).L003\n         MNOTE 4,'INVALID RETURN CODE REGISTER - USING LITERAL 4095'\n&CCT     SETC  'A'                         SET RETURN CODE TYPE\n&CC      SETC  '4095'                      SET RETURN CODE LITERAL\n.*\n.*  ISSUE FREEMAIN TO FREE OWN SAVE AREA (IF RENT=YES OR &RE ON)\n.*\n.L003    ANOP\n         AIF   ((NOT &RE) AND ('&RENT' EQ 'NO')).L004\n         AIF   (NOT &RT(1)).L003A          IF R0 NOT AN RR PARM, CONT.\n*    ** WARNING **\n*    RR=(0) WITH RENT=YES NECESSITATES MODIFYING THE CALLERS SAVE\n*    AREA (R0 SLOT) BECAUSE THE FREEMAIN SVC ALTERS R0.\n         ST    R0,20(,R13)        ** SAVE R0 IN CALLER'S RSA **\n.L003A   ANOP\n         AIF   (NOT &CC15).L003A1           IF NOT RC=(15), CONTINUE\n*    ** WARNING **\n*    RC=(15) WITH RENT=YES NECESSITATES MODIFYING THE CALLERS SAVE\n*    AREA (R15 SLOT) BECAUSE THE FREEMAIN SVC ALTERS R15.\n         ST    R15,16(,R13)       ** SAVE R15 IN CALLER'S RSA **\n&CCT     SETC  ''                    * SET UP\n&CC      SETC  '16(,R13)'            *   TO FORCE\n&CC15    SETB  0                     *      LOAD ON R15\n.L003A1  ANOP\n         AIF   ('&VIRT' NE '0').L003C      USE VIRT IF NOT ZERO\n         AIF   (&ALV OR &CLV).L003B        ELSE USE LV IF VALID\n         MNOTE 8,'LV SPECIFIED IS INVALID - GEN SUPPRESSED'\n         MEXIT\n.L003B   ANOP\n&VIRT    SETC  '&LV'\n.L003C   ANOP\n         MNOTE *,'       FREEMAIN R,LV=&VIRT,A=(1)'\n         FREEMAIN R,LV=&VIRT,A=(1)\n         AIF   (NOT &RT(1)).L004        IF R0 NOT AN RR PARM, CONT.\n&RT(1)   SETB  0                        TURN OFF RETURN REG FLAG FOR R0\n.*\n.*  RESTORE 14, LOAD 15\n.*\n.L004    ANOP\n         AIF   (&CC15).L004A            NO NEED TO LOAD R15 IF CC15 SET\n         L&CCT R15,&CC                  RETURN CODE\n.L004A   ANOP\n         L     R14,12(,R13)             RETURN ADDRESS\n         AIF   (&RRT GT 0).L005\n         LM    R0,R12,20(R13)           RESTORE REGS\n         AGO   .L006\n.*\n.*  RESTORE REGS NOT INCLUDED IN RR PARAMETER\n.*\n.L005    ANOP\n&RICT    SETA  0                        SET LOOP CONTROL\n.L005A   ANOP\n&R1      SETA  &RICT\n&RICT    SETA  &RICT+1                  INCREMENT LOOP CONTROL\n         AIF   ((&RT(&R1+1)) AND (&R1 LE 12)).L005A\n         AIF   ((NOT &RT(&R1+2)) AND (&R1 LE 12)).L005B\n         AIF   (NOT (&R1 LE 12)).L006\n&CC      SETC  '&DISP'((&R1*2+1),2)\n         L     R&R1.,&CC.(,R13)\n         AGO   .L005A\n.L005B   ANOP\n&R2      SETA  &RICT\n&RICT    SETA  &RICT+1                  INCREMENT LOOP CONTROL\n         AIF   ((NOT &RT(&R2+1)) AND (&R2 LE 12)).L005B\n&R2      SETA  &R2-1\n&CC      SETC  '&DISP'((&R1*2+1),2)\n         AIF   (&R1 EQ &R2).L005C\n         LM    R&R1.,R&R2.,&CC.(R13)    RESTORE REGS\n         AGO   .L005D\n.L005C   ANOP\n         L     R&R1.,&CC.(,R13)\n.L005D   ANOP\n         AIF   (&RICT LE 12).L005A\n.*\n.*  COMMON END FOR LEAVE MACRO - GENERATE RETURN INSTRUCTION\n.*\n.L006    ANOP\n         AIF   (&ENTER31).L007\n.*       BR    R14                      RETURN\n         BSM   0,R14                    RETURN\n         MEXIT ,\n.L007    ANOP  ,\n         BSM   0,R14                    RETURN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OD": {"ttr": 1541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         OD    &USRNAME                                       27001.\n         COPY  STRCGBLS\n         LCLB  &TDLGEND           TDL_GENNED                  27005.\n         LCLB  &FINREQD           FIN_LABEL_REQD              27007.\n         LCLC  &INFO              INFO                        27010.\n         STRCTRAC  OD                                         27012.\n         AIF   (&STRCNST GT &STRCNSL).M044                    27014.\n         STRCVERF  DO,&USRNAME                                27016.\n         AIF   (&STRCERR).FIN                                 27026.\n&INFO    SETC  '&STRCINF(&STRCNST)'                           27030.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          27031.\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          27032.\n         AIF   (&TDLGEND).M038                                27033.\n         STRCTDL\n         AGO   .M044                                          27038.\n.M038    AIF   (NOT &FINREQD).M044                            27039.\n$&STRCBL#(&STRCNST)FIN  DS    0H\n.M044    STRCPOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ONEND": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ONEND  &USRNAME\n         ATEND  &USRNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ONEXIT": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ONEXIT  &USRNAME\n         COPY  STRCGBLS\n         LCLB  &ONGEND            ONEXIT_GENNED               25009.\n         LCLB  &TDLGEND           TDL_GENNED                  25011.\n         LCLB  &FINREQD           FIN_LABEL_REQD              25014.\n         LCLC  &INFO              INFO                        25017.\n         STRCTRAC  ONEXIT                                     25019.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     25021.\n         STRCVERF  DO,&USRNAME                                25025.\n         AIF   (&STRCERR).FIN                                 25030.\n&INFO    SETC  '&STRCINF(&STRCNST)'                           25034.\n&ONGEND  SETB  ('&INFO'(7,1) EQ '1')                          25035.\n         AIF   (NOT &ONGEND).M041                             25037.\n         MNOTE 8,' STRC2501 MORE THAN ONE \"ONEXIT\" IN BLOCK'  25039.\n         MEXIT\n.M041    AIF   (&STRCXIT(&STRCNST)).M046                      25042.\n         MNOTE 8,' STRC2502 NO EXIT FOR THIS \"DO\"'            25044.\n         MEXIT\n.M046    ANOP\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          25047.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          25049.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          25050.\n         AIF   (&TDLGEND).M059                                25052.\n         STRCTDL\n         AIF   (NOT &STRCTFT).M063                            25055.\n         B     &STRCPFX.END\n&STRCEND(&STRCNST)  SETB  1                                   25057.1\n         AGO   .M063                                          25059.\n.M059    B     &STRCPFX.FIN\n&FINREQD SETB  1                                              25061.\n.M063    ANOP\n&STRCPFX.XIT  DS    0H\n&STRCXIT(&STRCNST)  SETB  0                                   25065.\n&STRCINF(&STRCNST)  SETC  '&INFO'(1,4)'1'.'&INFO'(6,1)'1&FINREQD'\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PROC": {"ttr": 1547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME PROC  &LINKAGE=,&ID=,&BASE=,&WORK=,&SAVE=,&DEBUG=,   81001.   *\n               &EXIT=,&DSECT=\n         COPY  STRCGBLS\n         LCLB  &PROC1             FIRST_PROC                  81010.\n         LCLB  &FRKNOWN           FIRST_VALUE_KNOWN           81012.\n         LCLB  &OSLINK            OS_LINKAGE                  81014.\n         LCLB  &SPECPFX           SPECIAL_PREFIX              81016.\n         LCLB  &USING13           USING13                     81018.\n         LCLB  &MULTIBS           MULTIBASE                   81019.\n         LCLB  &WORKUSD           WORKREG_USED                81021.\n         LCLC  &COMMA2            COMMA2                      81024.\n         LCLC  &MULT              MULT                        81024.\n         LCLC  &FIRST,&LAST       FIRST, LAST                 81027.\n         LCLC  &LABEL             LABEL                       81028.\n         LCLC  &LOCPTR            LOCAL_POINTER               81029.\n         LCLC  &OSPTR             OS_POINTER                  81029.\n         LCLC  &PVDEBUG           PREVIOUS_DEBUG_VECTOR       81031.\n         LCLC  &IDBYTE            PROC_ID_BYTE                81033.\n         LCLC  &SVLENG            SAVE_LENGTH                 81035.\n         LCLC  &SVTYPE            SAVE_TYPE                   81037.\n         LCLC  &SAVEREG           SAVEREG                     81039.\n         LCLC  &WORKREG           WORKREG                     81041.\n         LCLA  &OFFSET            OFFSET                      81043.\n         LCLA  &OFFSET0           OFFSET_TO_GPR0              81045.\n         LCLA  &SAF,&SAL          SAF, SAL                    81046.\n         LCLB  &GLOBAL            GLOBAL                      81173.\n         LCLB  &STVALUE           SAVETRACE_VALUE             81176.\n         LCLB  &STCHECK           SAVETRACE_CHECK             81178.\n         LCLA  &I                 I      81165. 81401. 81518. 81948.\n.*                                       81890. 81595.1       81966.\n         LCLC  &SECT              SECT                        81350.\n         LCLC  &QUOTE             QUOTE                       81351.\n         LCLC  &TARGET            TARGET                      81352.\n         LCLA  &LENGTH            LENGTH                      81354.\n         LCLB  &INLINE            INLINE_SAVEAREA             81614.\n         LCLC  &BASEREG           BASEREG                     81617.\n         LCLC  &X                 X                           81763.\n         LCLC  &FWDPTR            FWD_PTR                     81836.\n         LCLB  &PCTWVEC           PCT_GENNED_WITH_VECTOR      81867.\n         LCLC  &SPOT              COUNT_SPOT                  81869.\n         LCLA  &J                 J            81595.1 81890. 81966.\n         LCLB  &BIT               MACRO TEMPORARY\n         STRCTRAC  PROC                                       81051.\n&USRNAME STRCPUSH  TYPEVAL=PROC                               81053.\n         AIF   (&STRCERR).FIN                                 81057.\n&LABEL   SETC  '&USRNAME'                                     81061.\n.*       CALL  PROC_SCAN_OPTIONS                              81063.\n&OSLINK  SETB  ('&LINKAGE(1)' NE '')                          81114.\n         AIF   ('&LINKAGE(1)' EQ 'OS' OR '&LINKAGE(1)' EQ '').M119\n         MNOTE 8,' STRC8101 LINKAGE=&LINKAGE(1) INVALID--\"OS\" ASSUMED'\n.M119    AIF   ('&LINKAGE(2)' EQ 'CSECT' OR '&LINKAGE(2)' EQ '').M123\n         MNOTE 8,' STRC8102 SECOND LINKAGE OPERAND IGNORED'   81122.\n.M123    ANOP\n&WORKREG SETC  '&WORK'                                        81124.\n         AIF   ('&WORK' NE 'NONE' AND '&WORK' NE '').M135     81125.\n         AIF   (&OSLINK).M131                                 81129.\n&WORKREG SETC  '1'                                            81133.\n         AGO   .M135                                          81134.\n.M131    ANOP\n&WORKREG SETC  '2'                                            81131.\n.M135    AIF   ('&EXIT' EQ '').M1363                          81136.\n&STRCXSV SETC  '&EXIT'                                        81136.2\n.M1363   ANOP\n&PROC1   SETB  (NOT &STRCNFP)                                 81138.\n&STRCNFP SETB  1                                              81139.\n.*       CALL  PROC_DEBUG_SET                                 81144.\n&GLOBAL  SETB  0                                              81182.\n&PVDEBUG SETC '&STRCDBN&STRCDPN&STRCDLB&STRCDBC&STRCDPC&STRCDPT&STRCDCV*\n               &STRCDST'                                      81183.\n&I       SETA  1                                              81193.\n.M194    AIF   (&I GT N'&DEBUG).M307                          81194.\n&X       SETC  '&DEBUG(&I)'                                   81196.\n         AIF   ('&X' NE 'GLOBAL' AND '&X' NE 'GBL').M201      81198.\n&GLOBAL  SETB  1                                              81199.\n         AGO   .M305                                          81200.\n.M201    AIF   ('&X'(1,1) EQ 'N').SETOFF                      81201.\n         AIF   ('&X' NE 'BLOCKNAM' AND '&X' NE 'BN').M210     81201.\n&STRCDBN SETB  1                                              81202.\n         AGO   .M305                                          81206.\n.M210    AIF   ('&X' NE 'PROCNAME' AND '&X' NE 'PN').M219     81210.\n&STRCDPN SETB  1                                              81211.\n         AGO   .M305                                          81215.\n.M219    AIF   ('&X' NE 'LISTBLOC' AND '&X' NE 'LB').M227     81219.\n&STRCDLB SETB  1                                              81220.\n         AGO   .M305                                          81223.\n.M227    AIF   ('&X' NE 'BLOCKCOU' AND '&X' NE 'BC').M235     81227.\n&STRCDBC SETB  1                                              81228.\n         AGO   .M305                                          81231.\n.M235    AIF   ('&X' NE 'PROCCOUN' AND '&X' NE 'PC').M244     81235.\n&STRCDPC SETB  1                                              81236.\n         AGO   .M305                                          81243.\n.M244    AIF   ('&X' NE 'PROCTRAC' AND '&X' NE 'PT').M253     81244.\n&STRCDPT SETB  1                                              81245.\n         AGO   .M305                                          81249.\n.M253    AIF   ('&X' NE 'CORPVALU' AND '&X' NE 'CV').M262     81253.\n&STRCDCV SETB  1                                              81254.\n         AGO   .M305                                          81258.\n.M262    AIF   ('&X' NE 'SAVETRAC' AND '&X' NE 'ST').M274     81262.\n&STVALUE SETB  1                                              81266.\n&STCHECK SETB  1                                              81267.\n         AGO   .M305                                          81269.\n.M274    AIF   ('&X' NE 'ALL').M286                           81274.\n&STRCDBN SETB  1                                       \"ALL\"  81275.\n&STRCDPN SETB  1                                              81275.\n&STRCDLB SETB  1                                              81275.\n&STRCDBC SETB  1                                              81275.\n&STRCDPC SETB  1                                              81275.\n&STRCDPT SETB  1                                              81275.\n&STRCDCV SETB  1                                              81275.\n&STVALUE SETB  1                                              81275.\n&STCHECK SETB  1                                              81280.\n         AGO   .M305                                          81281.\n.M286    AIF   ('&X' NE 'MACRONAM' AND '&X' NE 'MN').M294     81286.\n&STRCDMN SETB  1                                              81287.\n         AGO   .M305                                          81290.\n.M294    AIF   ('&X' NE 'DEBUGMAC' AND '&X' NE 'DM').M302     81294.\n&STRCDDM SETB  1                                              81295.\n         AGO   .M305                                          81298.\n.SETOFF  AIF   ('&X' NE 'NOBLOCKN' AND '&X' NE 'NBN').M216    81207.\n&STRCDBN SETB  0                                              81208.\n         AGO   .M305                                          81209.\n.M216    AIF   ('&X' NE 'NOPROCNA' AND '&X' NE 'NPN').M224    81216.\n&STRCDPN SETB  0                                              81217.\n         AGO   .M305                                          81218.\n.M224    AIF   ('&X' NE 'NOLISTBL' AND '&X' NE 'NLB').M232    81224.\n&STRCDLB SETB  0                                              81225.\n         AGO   .M305                                          81226.\n.M232    AIF   ('&X' NE 'NOBLOCKC' AND '&X' NE 'NBC').M240    81232.\n&STRCDBC SETB  0                                              81233.\n         AGO   .M305                                          81234.\n.M240    AIF   ('&X' NE 'NOPROCCO' AND '&X' NE 'NPC').M250    81240.\n&STRCDPC SETB  0                                              81241.\n         AGO   .M305                                          81242.\n.M250    AIF   ('&X' NE 'NOPROCTR' AND '&X' NE 'NPT').M259    81250.\n&STRCDPT SETB  0                                              81251.\n         AGO   .M305                                          81252.\n.M259    AIF   ('&X' NE 'NOCORPVA' AND '&X' NE 'NCV').M270    81259.\n&STRCDCV SETB  0                                              81260.\n         AGO   .M305                                          81261.\n.M270    AIF   ('&X' NE 'NOSAVETR' AND '&X' NE 'NST').M274N N 81270.\n&STVALUE SETB  0                                              81271.\n&STCHECK SETB  1                                              81272.\n         AGO   .M305                                          81273.\n.M274N   AIF   ('&X' NE 'NONE').M291                  \"NONE\"  81274.\n&STRCDBN SETB  0                                      \"NONE\"  81275.\n&STRCDPN SETB  0                                              81275.\n&STRCDLB SETB  0                                              81275.\n&STRCDBC SETB  0                                              81275.\n&STRCDPC SETB  0                                              81275.\n&STRCDPT SETB  0                                              81275.\n&STRCDCV SETB  0                                              81275.\n&STVALUE SETB  0                                              81275.\n&STCHECK SETB  1                                              81280.\n         AGO   .M305                                          81281.\n.M291    AIF   ('&X' NE 'NOMACRON' AND '&X' NE 'NMN').M299    81291.\n&STRCDMN SETB  0                                              81292.\n         AGO   .M305                                          81293.\n.M299    AIF   ('&X' NE 'NODEBUGM' AND '&X' NE 'NDM').M302    81299.\n&STRCDDM SETB  0                                              81300.\n         AGO   .M305                                          81301.\n.M302    MNOTE 8,' STRC8104 DEBUG=&DEBUG(&I) INVALID--IGNORED'\n.M305    ANOP\n&I       SETA  &I+1                                           81306.\n         AGO   .M194                                          81307.\n.M307    AIF   (NOT &STCHECK).M335                            81310.\n         AIF   (&STVALUE).M313                                81312.\n&STRCDST SETB  0                                              81333.\n         AGO   .M335                                          81334.\n.M313    AIF   (NOT &PROC1).M324                              81314.\n         AIF   (NOT &OSLINK).M321                             81316.\n&STRCSFP SETB  1                                              81318.\n&STRCDST SETB  1                                              81319.\n         MNOTE 4,' STRC8103 WARNING--SAVETRACE REQUIRES \"FINAL\" MACRO'\n         AGO   .M335                                          81321.\n.M321    MNOTE 8,' STRC8106 SAVETRACE REQUIRES FIRST PROC TO BE'\n         MNOTE 0,'          LINKAGE=OS'                       81322.\n         AGO   .M335                                          81324.\n.M324    AIF   (&STRCSFP).M326                                81325.\n         MNOTE 8,' STRC8105 SAVETRACE MUST BE SPECIFIED ON FIRST PROC'\n         AGO   .M335                                          81330.\n.M326    ANOP\n&STRCDST SETB  1                                              81327.\n.M335    AIF   (NOT &GLOBAL).M340                             81336.\n&PVDEBUG SETC  ''                                             81338.\n.M340    ANOP\n.*       CORP  PROC_DEBUG_SET                                 81341.\n&SPECPFX SETB  ((&STRCDST OR &STRCDPT OR &STRCDPC) AND &STRCPCT LT 254)\n         AIF   (NOT &SPECPFX).M162                            81151.\n&STRCPCT SETA  &STRCPCT+1                                     81153.\n&STRCHXI SETA  &STRCPCT                                       81155.\n         STRCXHEX\n&IDBYTE  SETC  '&STRCHXO'                                     81157.\n&STRCPFX SETC  '$P&IDBYTE'                                    81158.\n         MNOTE *,' STRC8108 PROC &STRCNAM(&STRCNST), DEBUG ID=X''&IDBYT*\n               E'''                                           81160.\n         AGO   .M164                                          81162.\n.M162    ANOP\n&IDBYTE  SETC  '00'                                           81163.\n.M164    ANOP\n.*       CORP  PROC_SCAN_OPTIONS                              81165.\n.*       CALL  PROC_HEADER                                    81068.\n         AIF   ('&LINKAGE(2)' NE 'CSECT').M361                81356.\n&LABEL   CSECT\n&LABEL   SETC  ''                                             81359.\n         USING *,15\n.M361    ANOP\n         AIF   (NOT (((&OSLINK OR '&ID' NE '') AND                     *\n               '&ID' NE 'NONE') OR &STRCDPN)).M413            81362.\n&TARGET  SETC  '&STRCPFX.AA'                                  81365.\n&LABEL   B     &TARGET\n&LABEL   SETC  '&TARGET'                                      81368.\n         AIF ('&ID' NE '' AND '&ID' NE '*' AND '&ID' NE 'NONE').M393\n         AIF   ('&USRNAME' NE '').M380                        81371.\n         AIF   (&OSLINK).M375                                 81373.\n&SECT    SETC  '&STRCNAM(&STRCNST)'                           81377.\n         AGO   .M378                                          81377.\n.M375    ANOP\n&SECT    SETC  '$PRIVATE'                                     81375.\n.M378    ANOP\n&LENGTH  SETA  8                                              81379.\n         AGO   .M383                                          81380.\n.M380    ANOP\n&SECT    SETC  '&USRNAME'                                     81381.\n&LENGTH  SETA  K'&USRNAME                                     81382.\n.M383    AIF   (&OSLINK).M385                                 81384.\n&LENGTH  SETA  ((&LENGTH+1)/2)*2                              81390.\n         DC    CL&LENGTH'&SECT'\n         AGO   .M392                                          81392.\n.M385    ANOP\n&LENGTH  SETA  ((&LENGTH/2)*2)+1                              81386.\n         DC    AL1(&LENGTH),CL&LENGTH'&SECT'\n.M392    AGO   .M412                                          81393.\n.M393    ANOP\n&QUOTE   SETC  ''''                                           81394.\n&LENGTH  SETA  0                                              81395.\n         AIF   ('&ID'(1,1) NE '''').M400                      81396.\n&QUOTE   SETC  ''                                             81398.\n&LENGTH  SETA  0-2                                            81399.\n.M400    AIF   (&OSLINK).M403                                 81402.\n&LENGTH  SETA  ((K'&ID+1)/2)*2+&LENGTH                        81408.\n         DC    CL&LENGTH&QUOTE&ID&QUOTE\n         AGO   .M411                                          81411.\n.M403    ANOP\n&LENGTH  SETA  ((K'&ID/2)*2)+1+&LENGTH                        81403.\n         DC    AL1(&LENGTH),CL&LENGTH&QUOTE&ID&QUOTE\n.M411    ANOP\n.M412    ANOP\n.M413    ANOP\n.*       CORP  PROC_HEADER                                    81414.\n.*       CALL  PROC_REG_SAVE                                  81071.\n&FIRST   SETC  ''                                             81424.\n&LAST    SETC  ''                                             81424.\n&OFFSET  SETA  0                                              81425.\n&OFFSET0 SETA  0                                              81425.\n&SAF     SETA  0                                              81425.\n&SAL     SETA  0                                              81425.\n         AIF   ('&SAVE' NE 'NONE').M436                       81427.\n         AIF   (NOT &STRCDST).M474                            81429.\n&SVTYPE  SETC  'FULL'                                         81431.\n&SVLENG  SETC  '15'                                           81432.\n&LABEL   STM   14,12,&STRCPFX.SV+12\n&LABEL   SETC  ''                                             81434.\n         AGO   .M474                                          81436.\n.M436    ANOP\n.*       CALL  PROC_SET_SAVE_INFO                             81437.\n&FRKNOWN SETB  1                                              81487.\n&MULT    SETC  'M'                                            81488.\n&COMMA2  SETC  ','                                            81489.\n         AIF   (T'&SAVE(1) NE 'O').M496                       81491.\n&FIRST   SETC  '14'                                           81493.\n&SAF     SETA  14                                             81493.\n&LAST    SETC  '12'                                           81494.\n&SAL     SETA  12                                             81494.\n         AGO   .M527                                          81496.\n.M496    AIF   (T'&SAVE(1) NE 'N').M503                       81497.\n&SAF     SETA  &SAVE(1)                                       81499.\n&FIRST   SETC  '&SAF'                                         81500.\n         AGO   .M507                                          81503.\n.M503    ANOP\n&FIRST   SETC  '&SAVE(1)'                                     81504.\n&SAF     SETA  14                                             81505.\n&FRKNOWN SETB  0                                              81506.\n.M507    AIF   (T'&SAVE(2) NE 'O').M517                       81508.\n&LAST    SETC  ''                                             81510.\n&MULT    SETC  ''                                             81510.\n&COMMA2  SETC  ''                                             81510.\n         AIF   (&FRKNOWN).M512                                81511.\n&SAL     SETA  12                                             81515.\n         AGO   .M516                                          81516.\n.M512    ANOP\n&SAL     SETA  &SAF                                           81513.\n.M516    AGO   .M526                                          81517.\n.M517    AIF   (T'&SAVE(2) NE 'N').M522                       81518.\n&SAL     SETA  &SAVE(2)                                       81520.\n&LAST    SETC  '&SAL'                                         81521.\n         AGO   .M526                                          81522.\n.M522    ANOP\n&LAST    SETC  '&SAVE(2)'                                     81523.\n&SAL     SETA  12                                             81524.\n.M526    ANOP\n.M527    ANOP\n.*       CORP  PROC_SET_SAVE_INFO                             81528.\n.*       CALL  PROC_DECIDE_SAVE_TYPE                          81446.\n         AIF   (NOT &OSLINK).M559                             81542.\n&OSPTR   SETC  '(13)'                                         81544.\n&LOCPTR  SETC  ''                                             81545.\n         AIF   ('&SAVE(3)' NE 'NONE').M549                    81546.\n&SVTYPE  SETC  'NONE'                                         81548.\n         AGO   .M598                                          81549.\n.M549    ANOP\n&SVTYPE  SETC  'OSSAVE'                                       81550.\n&OFFSET0 SETA  5                                              81551.\n&OFFSET  SETA  5                                              81551.\n         AIF   ('&SAVE(4)' NE '').M555                        81552.\n&SVLENG  SETC  '18'                                           81554.\n         AGO   .M598                                          81555.\n.M555    ANOP\n&SVLENG  SETC  '&SAVE(4)'                                     81556.\n         AGO   .M598                                          81559.\n.M559    ANOP\n&OSPTR   SETC  ''                                             81560.\n&LOCPTR  SETC  '&STRCPFX.SV+'                                 81561.\n         AIF   (NOT &STRCDST).M568                            81562.\n&SVTYPE  SETC  'FULL'                                         81564.\n&SVLENG  SETC  '15'                                           81565.\n&OFFSET  SETA  5                                              81567.\n&OFFSET0 SETA  5                                              81567.\n         AGO   .M598                                          81568.\n.M568    ANOP\n&I       SETA  &SAL-((&SAL+2)/16*16)-&SAF+((&SAF+2)/16*16)+1  81569.\n&SVLENG  SETC  '&I'                                           81570.\n         AIF   (&SAF NE 14).M582                              81572.\n         AIF   (&STRCDPC).M576                                81574.\n&SVTYPE  SETC  'NORML'                                        81579.\n&OFFSET  SETA  2                                              81580.\n&OFFSET0 SETA  2                                              81580.\n         AGO   .M598                                          81581.\n.M576    ANOP\n&SVTYPE  SETC  'NORMLHDR'                                     81576.\n&OFFSET  SETA  3                                              81577.\n&OFFSET0 SETA  3                                              81577.\n         AGO   .M598                                          81578.\n.M582    AIF   (&STRCDPC).M584                                81583.\n&SVTYPE  SETC  'TRUNC'                                        81588.\n&OFFSET  SETA  0                                              81589.\n         AGO   .M590                                          81590.\n.M584    ANOP\n&SVTYPE  SETC  'TRUNCHDR'                                     81585.\n&OFFSET  SETA  1                                              81586.\n.M590    ANOP\n&OFFSET0 SETA  &OFFSET-&SAF                                   81591.\n         AIF   (&SAF LE 13).M598                              81592.\n&OFFSET0 SETA  &OFFSET0+16                                    81594.\n.M598    AIF   (NOT &FRKNOWN OR '&SVTYPE'(1,5) EQ 'TRUNC').M608\n&OFFSET  SETA  &OFFSET0+&SAF                                  81603.\n         AIF   (&SAF LE 13).M608                              81604.\n&OFFSET  SETA  &OFFSET-16                                     81606.\n.M608    ANOP\n.*       CORP  PROC_DECIDE_SAVE_TYPE                          81609.\n         AIF   ('&SVTYPE' NE 'FULL').M461                     81457.\n&LABEL   STM   14,12,&STRCPFX.SV+12\n         AGO   .M472                                          81461.\n.M461    AIF   (&FRKNOWN).M463                                81462.\n&LABEL   ST&MULT  &FIRST,&LAST&COMMA2&LOCPTR.(&FIRST+&OFFSET-((&FIRST+2:\n               )/16*16))*4&OSPTR\n         AGO   .M471                                          81471.\n.M463    ANOP\n&I       SETA  &OFFSET*4                                      81464.\n&LABEL   ST&MULT  &FIRST,&LAST&COMMA2&LOCPTR&I&OSPTR\n.M471    ANOP\n.M472    ANOP\n&LABEL   SETC  ''                                             81473.\n.M474    ANOP\n.*       CORP  PROC_REG_SAVE                                  81475.\n.*       CALL  PROC_ESTABLISH_BASE                            81074.\n     AIF  ('&BASE' EQ 'NONE' OR NOT (&OSLINK OR '&BASE' NE '')).M696\n&BASEREG SETC  '&BASE(1)'                                     81623.\n&INLINE  SETB  ('&SAVE' NE 'NONE' AND '&SAVE(3)' EQ '')       81624.\n         AIF   ('&BASEREG' NE '13' OR &INLINE OR &OSLINK).M630\n         MNOTE 8,' STRC8109 REGISTER 13 INVALID--IGNORED'     81627.\n&BASEREG SETC  ''                                             81628.\n.M630    AIF   ('&BASEREG' NE '').M647                        81630.\n         AIF   (NOT (&INLINE AND &OSLINK)).M644               81632.\n&BASEREG SETC  '&WORKREG'                                     81634.\n&USING13 SETB  1                                              81637.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M642           81638.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81641.\n.M642    ANOP\n&WORKUSD SETB  1                                              81643.\n         AGO   .M647                                          81644.\n.M644    ANOP\n&BASEREG SETC  '12'                                           81645.\n.M647    ANOP\n&J       SETA  0                                              81648.\n&I       SETA  2                                              81649.\n.M650    AIF   (&I GT N'&BASE).M662                           81650.\n         AIF   ('&BASE(&I)' NE '13').M655                     81652.\n         MNOTE 8,' STRC8109 REGISTER 13 INVALID--IGNORED'     81654.\n         AGO   .M659                                          81655.\n.M655    ANOP\n&LABEL   L     &BASE(&I),&STRCPFX.MBR+&J\n&LABEL   SETC  ''                                             81658.\n.M659    ANOP\n&I       SETA  &I+1                                           81660.\n&J       SETA  &J+4                                           81661.\n         AGO   .M650                                          81662.\n.M662    AIF   (NOT &INLINE).M675                             81664.\n         AIF   (NOT &OSLINK).M671                             81666.\n         CNOP  0,4\n.M671    ANOP\n&TARGET  SETC  '&STRCPFX.BB'                                  81672.\n&LABEL   BAL   &BASEREG,&TARGET\n&LABEL   SETC  '&TARGET'                                      81674.\n         AGO   .M678                                          81675.\n.M675    ANOP\n&LABEL   BALR  &BASEREG,0\n&LABEL   SETC  ''                                             81677.\n.M678    AIF   (&USING13).M682                                81679.\n         USING *,&BASEREG\n.M682    AIF   (N'&BASE LE 1).M696                            81683.\n&STRCPFX.MBP  EQU  *\n&MULTIBS SETB  1                                              81686.\n&J       SETA  4096                                           81687.\n&I       SETA  2                                              81688.\n.M689    AIF   (&I GT N'&BASE).M696                           81689.\n         USING *+&J,&BASE(&I)\n&I       SETA  &I+1                                           81692.\n&J       SETA  &J+4096                                        81693.\n         AGO   .M689                                          81694.\n.M696    ANOP\n.*       CORP  PROC_ESTABLISH_BASE                            81697.\n.*       CALL  PROC_GEN_SAVE_AREA                             81078.\n         AIF   ('&SVTYPE' NE 'OSSAVE').M709                   81703.\n.*       CALL  PROC_GEN_OSSAVE_AREA                           81705.\n.*       CALL  PROC_DEFINE_NEW_OSSAVE                         81725.\n&X       SETC  ''                                             81765.\n&SAVEREG SETC  '&WORKREG'                                     81766.\n         AIF   ('&SAVE(3)' NE 'DYNAM').M789                   81767.\n&LABEL   LA    0,(&SVLENG)*4\n&LABEL   SETC  ''                                             81770.\n         AIF   ('&WORK' EQ 'NONE').M774                       81771.\n         LR    &WORKREG,1\n.M774    ANOP\n*        GETMAIN  R,LV=(0)\n         GETMAIN  R,LV=(0)                                    81775.\n         LR    0,&WORKREG\n         LR    &WORKREG,1\n         AIF   ('&WORK' NE 'NONE').M785                       81778.\n         L     1,24(13)\n         AIF   ('&FIRST' EQ '14' AND '&LAST' EQ '12').M787    81781.\n         MNOTE 4,' STRC8107 REG 1 MUST BE AMONG THOSE SAVED'  81783.\n         AGO   .M787                                          81785.\n.M785    LR    1,0\n.M787    ANOP\n&WORKUSD SETB  1                                              81788.\n         AGO   .M829                                          81789.\n.M789    AIF   ('&SAVE(3)' NE '').M819                        81790.\n         AIF   ('&LABEL' NE '').M802                          81792.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M797           81794.\n         LR    0,&WORKREG\n.M797    ANOP\n&WORKUSD SETB  1                                              81798.\n         CNOP  0,4\n&LABEL   SETC  '&STRCPFX.CC'                                  81800.\n         BAL   &WORKREG,&LABEL\n         AGO   .M808                                          81802.\n.M802    ANOP\n&X       SETC  '&STRCPFX.ISV'                                 81803.\n         AIF   (&USING13).M808                                81804.\n&SAVEREG SETC  '&BASEREG'                                     81806.\n.M808    AIF   (&STRCDPT AND &PROC1).M810                     81809.\n&X       DC    (&SVLENG)F'0'\n         AGO   .M816                                          81816.\n.M810    ANOP\n&X       DC    A($TRACE),(&SVLENG-1)F'0'\n.M816    ANOP                                                 81816.\n.*       CALL  PROC_MULTIBASE_GEN (COPY A)                    81817.\n         AIF   (NOT &MULTIBS).M989A                           81969.\n         AIF   ('&LABEL' NE '').M975AA                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975AA  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979A   AIF   (&I GT N'&BASE).M986A                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979A                                         81986.\n.M986A   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989A   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY A)                    81990.\n         AGO   .M829                                          81819.\n.M819    AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M824           81820.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81823.\n.M824    ANOP\n&WORKUSD SETB  1                                              81825.\n&LABEL   LA    &WORKREG,&SAVE(3)\n&LABEL   SETC  ''                                             81827.\n.M829    ANOP\n.*       CORP  PROC_DEFINE_NEW_OSSAVE                         81831.\n         AIF   (NOT (&STRCDST AND &PROC1)).M737               81728.\n&LABEL   ST    13,$FIRSTSV+4\n&LABEL   SETC  ''                                             81732.\n         MVC   8(4,13),=A($FIRSTSV)\n         L     13,=A($LASTSAV)\n&STRCPSP SETC  '$FIRSTSV'                                     81735.\n&STRCPSA SETC  '0'                                            81736.\n.M737    ANOP\n&LABEL   ST    &SAVEREG,8(13)\n&LABEL   SETC  ''                                             81739.\n         ST    13,4(&SAVEREG)\n         LR    13,&SAVEREG\n         AIF   (NOT &USING13).M745                            81742.\n         USING &STRCPFX.ISV,13\n.M745    AIF   (NOT (&STRCDPT AND &PROC1 AND '&SAVE(3)' NE '')).M756\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M752           81749.\n         LR    0,&WORKREG\n.M752    LA    &WORKREG,$TRACE\n         ST    &WORKREG,0(13)\n&WORKUSD SETB  1                                              81755.\n.M756    ANOP\n.*       CORP  PROC_GEN_OSSAVE_AREA                           81757.\n         AGO   .M717                                          81709.\n.M709    AIF   (('&SAVE' EQ 'NONE' OR '&SVTYPE' EQ 'NONE') AND         *\n               NOT &STRCDST).M717                             81710.\n.*       CALL  PROC_GEN_LOCAL_SAVEAREA                        81713.\n         AIF   ('&LABEL' NE '').M842                          81838.\n&LABEL   SETC  '&STRCPFX.DD'                                  81840.\n         B     &LABEL\n.M842    ANOP\n&STRCPFX.SV  DS  0F\n         AIF   ('&SVTYPE' NE 'FULL' AND '&SVTYPE' NE 'NORMLHDR' AND    *\n               '&SVTYPE' NE 'TRUNCHDR').M848                  81844.\n         DC    X'FF&IDBYTE.0000' FLAG (FF=FINISHED,FE=ENTERED), ID, COU*\n               NT\n.M848    AIF   ('&SVTYPE' NE 'FULL').M860                     81849.\n&FWDPTR  SETC  '&STRCPFX.NXT'                                 81851.\n&STRCPSP EQU   &STRCPFX.SV\n         DC    A(&STRCPSA,&FWDPTR)\n&STRCPSP SETC  '&FWDPTR'                                      81856.\n&STRCPSA SETC  '&STRCPFX.SV'                                  81858.\n.M860    DC    (&SVLENG)F'0'\n.*       CALL  PROC_MULTIBASE_GEN (COPY B)                    81862.\n         AIF   (NOT &MULTIBS).M989B                           81969.\n         AIF   ('&LABEL' NE '').M975BB                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975BB  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979B   AIF   (&I GT N'&BASE).M986B                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979B                                         81986.\n.M986B   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989B   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY B)                    81990.\n.*       CORP  PROC_GEN_LOCAL_SAVEAREA                        81863.\n.M717    ANOP\n.*       CORP  PROC_GEN_SAVEAREA                              81718.\n.*       CALL  PROC_MULTIBASE_GEN (COPY C)                    81082.\n         AIF   (NOT &MULTIBS).M989C                           81969.\n         AIF   ('&LABEL' NE '').M975CC                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975CC  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979C   AIF   (&I GT N'&BASE).M986C                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979C                                         81986.\n.M986C   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989C   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY C)                    81990.\n.*       CALL  PROC_DEBUG_STUFF                               81084.\n         AIF   (NOT &STRCDPT).M907                            81871.\n         AIF   (NOT &STRCTVG).M886                            81873.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M879           81875.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81878.\n.M879    ANOP\n&LABEL   L     &WORKREG,=A($TRACE)\n         MVC   0(256,&WORKREG),1(&WORKREG)\n         MVI   256(&WORKREG),X'&IDBYTE'\n&WORKUSD SETB  1                                              81885.\n         AGO   .M905                                          81886.\n.M886    AIF   ('&LABEL' NE '').M891                          81887.\n&LABEL   SETC  '&STRCPFX.EE'                                  81889.\n         B     &LABEL\n.M891    DC    C'$TRACE'\n$TRACE   DC    258X'FF'\n&STRCTVG SETB  1                                              81894.\n         AIF   (NOT ((&STRCDPC OR &STRCDBC) AND &PROC1)).M902\n&STRCPFX.PCT  DC  H'0' PROC COUNT\n&PCTWVEC SETB  1                                              81901.\n.M902    ANOP\n&LABEL   MVC   $TRACE(256),$TRACE+1\n         MVI   $TRACE+256,X'&IDBYTE'\n.M905    ANOP\n&LABEL   SETC  ''                                             81906.\n.M907    AIF   (NOT (&STRCDPC OR &STRCDBC)).M938              81908.\n         AIF   (NOT &OSLINK AND                                        *\n               ('&SAVE' NE 'NONE' OR &STRCDST)).M923          81910.\n         AIF   (&PCTWVEC).M921                                81912.\n         AIF   ('&LABEL' NE '').M918                          81914.\n         NOP   0\n&STRCPFX.PCT  EQU  *-2 PROC COUNT\n         AGO   .M921                                          81918.\n.M918    ANOP\n&STRCPFX.PCT  DC  H'0' PROC COUNT\n.M921    ANOP\n&SPOT    SETC  'PCT'                                          81922.\n         AGO   .M925                                          81923.\n.M923    ANOP\n&SPOT    SETC  'SV+2'                                         81924.\n.M925    AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M930\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81929.\n.M930    ANOP\n&LABEL   LH    &WORKREG,&STRCPFX&SPOT\n&LABEL   SETC  ''                                             81933.\n         LA    &WORKREG,1(&WORKREG)\n         STH   &WORKREG,&STRCPFX&SPOT\n&WORKUSD SETB  1                                              81937.\n.M938    AIF   (&OSLINK OR NOT &STRCDST).M943                 81939.\n&LABEL   MVI   &STRCPFX.SV,X'FE'\n&LABEL   SETC  ''                                             81942.\n.M943    ANOP\n.*       CORP  PROC_DEBUG_STUFF                               81944.\n         AIF   (NOT ('&WORK' EQ 'NONE' AND &WORKUSD)).M091    81086.\n&LABEL   LR    &WORKREG,0\n&LABEL   SETC  ''                                             81090.\n.M091    AIF   ('&LABEL' EQ '').M095                          81092.\n&LABEL   DS    0H\n.M095    AIF   ('&LINKAGE(2)' NE 'CSECT').M100                81096.\n         DROP  15\n.M100    ANOP\n.*       CALL  PROC_INFO_SAVE                                 81101.\n&STRCOP1(&STRCNST)  SETC  '&FIRST'                            81951.\n&STRCOP2(&STRCNST)  SETC  '&LAST'                             81952.\n&STRCOP3(&STRCNST)  SETC  '&SVLENG'                           81953.\n&STRCOP4(&STRCNST)  SETC  '&PVDEBUG'                          81954.\n&I       SETA  &OFFSET0+50                                    81955.\n&BIT     SETB  ('&SAVE(3)' EQ 'DYNAM')                        81957.\n&STRCINF(&STRCNST)  SETC  '&I&OSLINK&BIT&FRKNOWN&IDBYTE&SPECPFX'\n         AIF   (NOT &STRCDDM).M960                            DEBUGMACS\n         MNOTE *,' STRC8199 PROC SAVES OP1=&FIRST,OP2=&LAST,OP3=&SVLENG*\n               ,OP4=&PVDEBUG,INF=&STRCINF(&STRCNST)'          DEBUGMACS\n.M960    ANOP\n.*       CORP  PROC_INFO_SAVE                                 81960.\n.FIN     ANOP\n         AIF   ('&DSECT' EQ '').EXITPRO\n         USING &DSECT,13\n.EXITPRO MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PROCEND": {"ttr": 1800, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&USRNAME PROCEND  &PROCNAM,&RETURN=,&LINK=14,&RESTORE=,&RC=\n&USRNAME CORP     &PROCNAM,RETURN=&RETURN,LINK=&LINK,                  *\n               RESTORE=&RESTORE,RC=&RC\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROLOGUE": {"ttr": 1802, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         PROLOGUE &CSECT,       CSECT NAME                             @\n               &MSG,            EYE-CATCHER MESSAGE                    @\n               &AMODE=24,       ADDRESSING MODE                        @\n               &RMODE=24        RESIDENCY MODE\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  MACNAME:  PROLOGUE                                               *\n.*  MACAUTH:  SKIP ABADIE                                            *\n.*  MACDATE:  4/2/81      LAST UPDATE:  5/27/85                      *\n.*                                                                   *\n.*  MAY BE USED TO GENERATE CSECT CARDS AND STANDARD FORMAT MODULE   *\n.*  EYE-CATCHERS.  BOTH THE CSECT AND MODULE EYE-CATCHERS ARE        *\n.*  OPTIONAL.  SEE OPERAND DESCRIPTIONS AND EXAMPLES BELOW.          *\n.*                                                                   *\n.*  THIS MACRO IS CONDITIONALLY INVOKED BY MACRO ENTER.  IF FLAG     *\n.*  &PROLOG IS NOT SET TO ONE, ENTER INVOKES PROLOGUE.  NOTE THAT    *\n.*  THE ENTER MACRO ALWAYS SETS THE GLOBAL FLAG &PROLOG TO ZERO SO   *\n.*  THAT SUBSEQUENT PROLOGUE OR ENTER MACROS WILL EXPAND PROPERLY.   *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  CSECT                                                            *\n.*       IF SPECIFIED, THIS POSITIONAL PARAMETER WILL GENERATE A     *\n.*       CSECT CARD USING THE SPECIFIED NAME.  IF IT IS OMITTED BY   *\n.*       CODING A COMMA, THEN NO CSECT CARD IS GENERATED.  IN EITHER *\n.*       CASE, THE FOLLOWING CARDS WILL BE GENERATED:                *\n.*                USING *,15                                         *\n.*                CNOP  0,4                                          *\n.*                BC    15,*+LX                                      *\n.*                DC    AL1(LY)                                      *\n.*       WHERE 'LX' IS THE DISPLACEMENT TO THE FIRST EXECUTABLE      *\n.*       INSTRUCTION FOLLOWING THE PROLOGUE MACRO, AND 'LY' IS THE   *\n.*       LENGTH + 1 OF THE FOLLOWING EYE-CATCHER.                    *\n.*  MSG                                                              *\n.*       IF SPECIFIED, AN MVS STANDARD MODULE IDENTIFIER (EYE-       *\n.*       CATCHER) IS BUILT CONSISTING OF THE CSECT NAME, THE DATE    *\n.*       OF THE ASSEMBLY, AND THE CONTENTS OF THE MSG PARAMETER.     *\n.*       IF OMITTED, AN MVS STANDARD MODULE IDENTIFIER IS BUILT      *\n.*       CONSISTING OF THE CSECT NAME, THE DATE OF THE ASSEMBLY,     *\n.*       AND THE CHARACTER STRING \"ANDERSON, CLAYTON & CO.\"          *\n.*       THE EYE-CATCHER MAY BE PADDED ON THE END WITH ONE BLANK,    *\n.*       AS REQUIRED, TO CAUSE HALFWORD BOUNDARY ALIGNMENT FOR THE   *\n.*       INSTRUCTION IMMEDIATELY FOLLOWING THE PROGLOGUE MACRO.      *\n.*       AN ADDITIONAL BLANK WILL BE ASSEMBLED AT THE END FOR EVERY  *\n.*       OCCURRENCE OF A DOUBLE SPECIAL CHARACTER, SUCH AS &&.       *\n.*       THE MAXIMUM LENGTH OF THE MSG PARAMETER IS VARIABLE, AND    *\n.*       MAY BE COMPUTED AS FOLLOWS:                                 *\n.*          LENGTH = (256 - (CSECT NAME LENGTH + 13))                *\n.*       THE MSG PARAMETER MUST BE SURROUNDED BY SINQLE QUOTES,      *\n.*       WHICH DO NOT CONTRIBUTE TO THE TOTAL LENGTH OF THE STRING.  *\n.*                                                                   *\n.**** AMODE AND RMODE ADDED FOR MVS/XA SUPPORT @85.127 BY -DGA-   ****\n.**** SEE GC28-1158 \"MVS/XA SPL: 31-BIT ADDRESSING\" FOR DETAILS   ****\n.*                                                                   *\n.*  AMODE={ |24|31|ANY}                                              *\n.*       IF SPECIFIED, THIS  PARAMETER WILL GENERATE THE AMODE       *\n.*       CARD FOR THE ASSEMBLER H.  AMODE IS A PROGRAM ATTRIBUTE     *\n.*       WHICH CAN BE SET TO GIVE ADDRESSING MODE.\n.*  RMODE={ |31|ANY}                                                 *\n.*       IF SPECIFIED, THIS PARAMETER WILL GENERATE THE RMODE        *\n.*       CARD FOR THE ASSEMBLER H.  RMODE IS A PROGRAM ATTRIBUTE     *\n.*       WHICH CAN BE SET TO GIVE RESIDENCY MODE.                    *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  THE FOLLOWING EXAMPLES SHOW ONLY THE TEXT OF THE EYE-CATCHER     *\n.*  GENERATED.                                                       *\n.*                                                                   *\n.*    PROLOGUE ,'EYE-CATCHER'                                        *\n.*      GENERATES:  C'&SYSECT &SYSDATE EYE-CATCHER'                  *\n.*                                                                   *\n.*    PROLOGUE ,                                                     *\n.*      GENERATES:  C'&SYSECT &SYSDATE ANDERSON, CLAYTON & CO.'      *\n.*                                                                   *\n.*    PROLOGUE MYPROG                                                *\n.*      GENERATES:  C'MYPROG &SYSDATE ANDERSON, CLAYTON & CO.'       *\n.*                                                                   *\n.*    PROLOGUE TEST,'DOO-DAH DOO-DAH'                                *\n.*      GENERATES:  C'TEST &SYSDATE DOO-DAH DOO-DAH'                 *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*\n.*  DEFINE GLOBAL AND LOCAL SET SYMBOLS\n.*\n         GBLB  &PROLOG\n         LCLC  &CS,&TEXT,&ASTUF,&RSTUF\n         LCLA  &L1,&L2,&L3\n&PROLOG  SETB  1\n.*\n.*  CHECK AMODE AND SET TRIVIA LINE TO ASTUF\n.*\n         AIF   ('&AMODE' EQ '').CRMODE\n         AIF   ('&AMODE' EQ '24').TAM24\n         AIF   ('&AMODE' EQ '31').TAM31\n         AIF   ('&AMODE' EQ 'ANY').TAM31\n         MNOTE 4,'INVALID AMODE FOUND...'\n         AGO   .CRMODE\n.TAM24   ANOP  ,\n&ASTUF   SETC  '&AMODE         MODULE USES 24-BIT ADDRESSING'\n         AGO   .CRMODE\n.TAM31   ANOP  ,\n&ASTUF   SETC  '&AMODE         MODULE SUPPORTS 31-BIT ADDRESSING'\n.*\n.*  CHECK RMODE AND SET TRIVIA LINE TO RSTUF\n.*\n.CRMODE  ANOP  ,\n         AIF   ('&RMODE' EQ '').MODEX\n         AIF   ('&RMODE' EQ '24').TRM24\n         AIF   ('&RMODE' EQ 'ANY').TRM31\n         MNOTE 4,'INVALID RMODE FOUND...'\n         AGO   .MODEX\n.TRM24   ANOP  ,\n&RSTUF   SETC  '&RMODE         MODULE MUST RESIDE BELOW THE LINE'\n         AGO   .MODEX\n.TRM31   ANOP  ,\n&RSTUF   SETC  '&RMODE         MODULE CAN RESIDE ANYWHERE IN VS'\n.MODEX   ANOP   ,\n.*\n         AIF   (T'&CSECT NE 'O').P001\n&CS      SETC  '&SYSECT'\n.*\n.*       PUT OUT RMODE AND AMODE CARDS IF SPECIFIED\n.*\n         AIF   ('&AMODE' EQ '').RMODE1\n&CS      AMODE &ASTUF\n.RMODE1  AIF   ('&RMODE' EQ '').MODE1X\n&CS      RMODE &RSTUF\n.MODE1X  ANOP  ,\n.*\n         USING *,15\n         AGO   .P002\n.P001    ANOP\n&CS      SETC  '&CSECT'\n&CS      CSECT ,\n.*\n.*       PUT OUT RMODE AND AMODE CARDS IF SPECIFIED\n.*\n         AIF   ('&AMODE' EQ '').RMODE2\n&CS      AMODE &ASTUF\n.RMODE2  AIF   ('&RMODE' EQ '').MODE2X\n&CS      RMODE &RSTUF\n.MODE2X  ANOP  ,\n.*\n         USING *,15\n.P002    ANOP\n         AIF   (T'&MSG NE 'O').P003\n&TEXT    SETC  'ANDERSON, CLAYTON && CO.'\n         AGO   .P004\n.P003    ANOP\n&L2      SETA  (((K'&SYSLIST(2,1)+2)/2)*2)-2\n.P004    ANOP\n&TEXT    SETC  '&CS'.' &SYSDATE'.' '.'&TEXT'\n&L1      SETA  &L1+((K'&TEXT+2)/2)*2\n&L3      SETA  &L1+&L2+4\n         CNOP  0,4                      GET ALIGNED\n         BC    15,*+&L3                 BRANCH AROUND CONSTANTS\n&L1      SETA  &L1-1\n         DC    AL1(&L1+&L2)             LENGTH OF CONSTANTS\n         DC    CL&L1'&TEXT'             TEXT: CSECT AND ASSEMBLE DATE\n         AIF   (N'&SYSLIST(2) EQ 0).P005\n         DC    CL&L2&SYSLIST(2,1)\n.P005    ANOP\n         DROP  15\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REQUATE": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         REQUATE &GPR=YES,      EQUATE GENERAL PURPOSE REGISTERS?      @\n               &FLOAT=NO        EQUATE FLOATING POINT REGISTERS?\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  MACNAME:  REQUATE                                                *\n.*  MACAUTH:  SKIP ABADIE                                            *\n.*  MACDATE:  12/01/80                                               *\n.*                                                                   *\n.*  MACRO REQUATE MAY BE USED TO EQUATE SYMBOLIC NAMES TO THE        *\n.*  GENERAL PURPOSE REGISTERS.                                       *\n.*                                                                   *\n.*  THIS MACRO IS AUTOMATICALLY INVOKED BY MACROS ENTER AND LEAVE.   *\n.*  WHEN INVOKED FOR THE FIRST TIME, REQUATE SETS THE GLOBAL FLAG    *\n.*  &REGS TO ONE.  IF THIS FLAG IS SET, REQUATE WILL EXIT WITHOUT    *\n.*  ANY EXPANSION.                                                   *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  CHANGED REQUATE TO USE STATIC NUMBER OF REGISTERS AND ADDED      *\n.*  FLOATING POINT REGISTERS ... DAVID ALCOCK @85.171                *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         GBLB  &REGS,&FPREGS\n.*\n         AIF   ('&GPR' EQ 'NO').CHKFLT    SEE IF WE WANT GPR(S)\n         AIF   (&REGS).CHKFLT             HAVE WE BEEN HERE BEFORE?\n&REGS    SETB  1                          SET REQUATE GLOBAL FLAG\n         SPACE 1\nR0       EQU   0                               *\nR1       EQU   1                              ***\nR2       EQU   2                             *****\nR3       EQU   3                            **   **\nR4       EQU   4                           **     **\nR5       EQU   5                          **       **\nR6       EQU   6                         ** GENERAL **\nR7       EQU   7                        *** PURPOSE ***\nR8       EQU   8                         **  REGS   **\nR9       EQU   9                          **       **\nR10      EQU   10                          **     **\nR11      EQU   11                           **   **\nR12      EQU   12                            *****\nR13      EQU   13                             ***\nR14      EQU   14                              *\nR15      EQU   15\n         SPACE 1\n.*\n.CHKFLT  ANOP  ,\n         AIF   ('&FLOAT' EQ 'NO').MACEND  SEE IF WE WANT FLOATING PT\n         AIF   (&FPREGS).MACEND         HAVE WE BEEN HERE BEFORE?\n         AIF   (&REGS).NOSPC            DID WE SPACED AFTER GPR?\n         SPACE 1\n.NOSPC   ANOP  ,\n&FPREGS  SETB  1                        SET GLOBAL FLAG\nF0       EQU   0                        FLOATING\nF2       EQU   2                        ..POINT\nF4       EQU   4                        ....REGISTER\nF6       EQU   6                        ......EQUATES\n         SPACE 1\n.MACEND  MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCCEP": {"ttr": 2051, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&FIRSTID STRCCEP\n         COPY  STRCGBLS\n         LCLA  &CCOUNT            COND_COUNT                  97013.\n         LCLA  &DEPTH             DEPTH                       97015.\n         LCLA  &INDEX             INDEX                       97017.\n         LCLA  &OPCOUNT           OP_COUNT                    97019.\n         LCLA  &NXINDEX           NEXT_INDEX                  97021.\n         LCLA  &NXDEPTH           NEXT_DEPTH                  97023.\n         LCLA  &LADEPTH           LA_DEPTH                    97024.\n         LCLA  &I                 I                           97025.\n         LCLB  &ANDOR             AND_OR_OUTSTANDING          97028.\n         LCLB  &LOCFC             LOCAL_FALLTHRU_CONDITION    97030.\n         LCLB  &LOCLAB(20)        LOCAL_LABEL_REQD            97033.\n         LCLC  &LABEL             LABEL                       97036.\n         LCLC  &LOCBR             LOCAL_BRANCH_LABEL          97037.\n         LCLC  &LOOKFOR           LOOKFOR                     97181.\n         LCLA  &MXDEPTH           MAX_DEPTH                   97183.\n         LCLA  &TARGET            TARGET                      97185.\n         STRCTRAC  STRCCEP                                    97041.\n         AIF   (NOT &STRCDDM).M043                            DEBUGMACS\n         MNOTE *,' STRCCEP SYSLIST=&SYSLIST(1),&SYSLIST(2),&SYSLIST(3),*\n               &SYSLIST(4),&SYSLIST(5),...'                   DEBUGMACS\n.M043    ANOP\n&LABEL   SETC  '&FIRSTID'                                     97043.\n&CCOUNT  SETA  0                                              97045.\n&DEPTH   SETA  0                                              97046.\n&INDEX   SETA  &STRCFRX                                       97047.\n.M048    AIF   (&INDEX GT &STRCLSX).M087                      97048.\n.*       CALL  CEP_FIND_NEXT_CONDITION                        97050.\n&STRCERR SETB  0                                              97106.\n.M107    AIF   (&INDEX GT &STRCLSX).M111                      97107.\n  AIF  ('&SYSLIST(&INDEX)' NE '<' AND '&SYSLIST(&INDEX)' NE '+').M111\n&DEPTH   SETA  &DEPTH+1                                       97109.\n&INDEX   SETA  &INDEX+1                                       97110.\n         AGO   .M107                                          97111.\n.M111    AIF   ('&SYSLIST(&INDEX)'(1,1) EQ '(').M119          97114.\n         MNOTE 8,' STRC9706 SYNTAX ERROR--LOOKING FOR SIMPLE' 97116.\n         MNOTE 0,'          CONDITIONAL, FOUND \"&SYSLIST(&INDEX)\"'\n&STRCERR SETB  1                                              97118.\n.M119    ANOP\n&CCOUNT  SETA  &CCOUNT+1                                      97120.\n.*       CORP  CEP_FIND_NEXT_CONDITION                        97121.\n         AIF   (&STRCERR).FIN                                 97054.\n&ANDOR   SETB  0                                              97058.\n.*       CALL  CEP_LOOKAHEAD                                  97059.\n&STRCERR SETB  0                                              97133.\n&LADEPTH SETA  &DEPTH                                         97134.\n&I       SETA  &INDEX+1                                       97135.\n.M136    AIF   (&I GT &STRCLSX).M145                          97136.\n         AIF   ('&SYSLIST(&I)' NE '>' AND '&SYSLIST(&I)' NE '/').M145\n&I       SETA  &I+1                                           97138.\n         AIF   (&LADEPTH LE 0).M142                           97139.\n&LADEPTH SETA  &LADEPTH-1                                     97141.\n         AGO   .M144                                          97142.\n.M142    MNOTE 8,' STRC9705 SUPERFLUOUS BRACKET IGNORED'      97143.\n.M144    AGO   .M136                                          97145.\n.M145    ANOP\n&NXINDEX SETA  &I+1                                           97148.\n&NXDEPTH SETA  &LADEPTH                                       97150.\n         AIF   (&I LE &STRCLSX).M155                          97151.\n&LOCBR   SETC  '&STRCUBL'                                     97153.\n&LOCFC   SETB  (&STRCUFC)                                     97154.\n         AGO   .M166                                          97155.\n.M155    AIF   ('&SYSLIST(&I)' NE 'AND' AND                            *\n               '&SYSLIST(&I)' NE 'OR').M161                   97156.\n.*       CALL  CEP_SCAN_FOR_BRANCH                            97158.\n&ANDOR   SETB  1                                              97188.\n         AIF   ('&SYSLIST(&I)' NE 'AND').M194                 97189.\n&LOCFC   SETB  1                                              97191.\n&LOOKFOR SETC  'OR'                                           97192.\n&MXDEPTH SETA  &LADEPTH                                       97193.\n         AGO   .M203                                          97194.\n.M194    ANOP\n&LOCFC   SETB  0                                              97195.\n         AIF   (&LADEPTH NE 0).M200                           97196.\n&I       SETA  &STRCLSX+1                                     97198.\n.M200    ANOP\n&LOOKFOR SETC  'AND'                                          97201.\n&MXDEPTH SETA  &LADEPTH-1                                     97202.\n.M203    ANOP\n&I       SETA  &I+1                                           97204.\n&TARGET  SETA  &CCOUNT+1                                      97205.\n.M206    AIF   (&I GT &STRCLSX).M236                          97206.\n  AIF  ('&SYSLIST(&I)' EQ '&LOOKFOR' AND &LADEPTH LE &MXDEPTH).M236\n         AIF   ('&SYSLIST(&I)' NE '<' AND '&SYSLIST(&I)' NE '+').M212\n&LADEPTH SETA  &LADEPTH+1                                     97211.\n         AGO   .M234                                          97212.\n.M212    AIF   ('&SYSLIST(&I)' NE '>' AND '&SYSLIST(&I)' NE '/').M219\n         AIF   (&LADEPTH LE 0).M234                           97215.\n&LADEPTH SETA  &LADEPTH-1                                     97217.\n         AGO   .M234                                          97219.\n.M219    AIF   ('&SYSLIST(&I)'(1,1) NE '(').M224              97219.\n&TARGET  SETA  &TARGET+1                                      97222.\n         AGO   .M234                                          97223.\n.M224    AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M234\n         MNOTE 8,' STRC9704 SYNTAX ERROR--\"&SYSLIST(&I)\" INVALID'\n&STRCERR SETB  1                                              97228.\n&I       SETA  &STRCLSX+1                                     97229.\n.M234    ANOP\n&I       SETA  &I+1                                           97235.\n         AGO   .M206                                          97236.\n.M236    AIF   (&I LE &STRCLSX).M251                          97239.\n         AIF   (NOT(('&LOOKFOR' EQ 'OR' AND NOT &STRCUFC) OR           *\n               ('&LOOKFOR' EQ 'AND' AND &STRCUFC))).M248      97241.\n&LOCBR   SETC  '&STRCUFL'                                     97246.\n&STRCFLU SETB  1                                              97247.\n         AGO   .M257                                          97248.\n.M248    ANOP\n&LOCBR   SETC  '&STRCUBL'                                     97249.\n         AGO   .M257                                          97251.\n.M251    ANOP\n&LOCBR   SETC  '&STRCPFX&STRCUID&TARGET'                      97252.\n&LOCLAB(&TARGET)  SETB  1                                     97253.\n.M257    ANOP\n.*       CORP  CEP_SCAN_FOR_BRANCH                            97258.\n         AGO   .M166                                          97161.\n.M161    MNOTE 8,' STRC9703 SYNTAX ERROR--LOOKING FOR \"AND\" OR \"OR\",'\n         MNOTE 0,'          FOUND \"&SYSLIST(&I)\"'             97162.\n&STRCERR SETB  1                                              97164.\n.M166    ANOP\n.*       CORP  CEP_LOOKAHEAD                                  97167.\n         AIF   (&STRCERR).FIN                                 97066.\n         AIF   (NOT &LOCLAB(&CCOUNT)).M073                    97070.\n&LABEL   SETC  '&STRCPFX&STRCUID&CCOUNT'                      97022.\n.M073    ANOP\n&OPCOUNT SETA  N'&SYSLIST(&INDEX)                             97074.\n&LABEL   STRCSCND &SYSLIST(&INDEX,1),&SYSLIST(&INDEX,2),               *\n               &SYSLIST(&INDEX,3),&SYSLIST(&INDEX,4),                  *\n               &SYSLIST(&INDEX,5),&LOCBR,&LOCFC,&OPCOUNT      97075.\n&LABEL   SETC  ''                                             97084.\n&INDEX   SETA  &NXINDEX                                       97085.\n&DEPTH   SETA  &NXDEPTH                                       97086.\n         AGO   .M048                                          97087.\n.M087    AIF   (NOT &ANDOR).M093                              97090.\n         MNOTE 8,' STRC9701 INSUFFICIENT OPERANDS'            97092.\n.M093    AIF   (&DEPTH EQ 0).M097                             97094.\n         MNOTE 8,' STRC9702 INSUFFICIENT BRACKETS'            97096.\n.M097    ANOP\n.FIN     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRCGBLS": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".*\n.*             GLOBAL VARIABLE SYMBOLS\n.*\n.* GENERAL\n         GBLA  &STRCPCT           PROC_COUNTER                  137.\n         GBLA  &STRCLB#           LAST_BLOCK_NO                 139.\n         GBLA  &STRCHXI           HEX_IN                        141.\n         GBLB  &STRCERR           ERROR_OCCURRED                144.\n         GBLB  &STRCTFT           TDL_FALLTHRU_OCCURS           146.\n         GBLB  &STRCNFP           NOT_FIRST_PROC                149.\n         GBLB  &STRCSFP           SAVETRACE_ON_FIRST_PROC       151.\n         GBLB  &STRCTVG           TRACE_VECTOR_GENNED           153.\n         GBLC  &STRCPFX           BLOCK_LABEL_PREFIX            158.\n         GBLC  &STRCXSV           EXIT_SEVERITY                 160.\n         GBLC  &STRCHEX(16)       HEX                           162.\n         GBLC  &STRCHXO           HEX_OUT                       163.\n         GBLC  &STRCPSA           PREV_SAVETRACE_AREA           164.\n         GBLC  &STRCPSP           PREV_SAVETRACE_PTR            166.\n.* DEBUG FLAGS\n         GBLB  &STRCDBC           DEBUG_BLOCKCOUNTS_REQD        173.\n         GBLB  &STRCDBN           DEBUG_BLOCKNAMES_REQD         175.\n         GBLB  &STRCDCV           DEBUG_CORPVALUES_REQD         177.\n         GBLB  &STRCDDM           DEBUG_DEBUGMACROS_REQD        179.\n         GBLB  &STRCDLB           DEBUG_LISTBLOCKS_REQD         181.\n         GBLB  &STRCDMN           DEBUG_MACRONAMES_REQD         184.\n         GBLB  &STRCDPC           DEBUG_PROCCOUNTS_REQD         187.\n         GBLB  &STRCDPN           DEBUG_PROCNAMES_REQD          189.\n         GBLB  &STRCDPT           DEBUG_PROCTRACE_REQD          191.\n         GBLB  &STRCDST           DEBUG_SAVETRACE_REQD          193.\n.* MAIN STACK\n         GBLA  &STRCNST           CURRENT_NEST_LEVEL            200.\n         GBLA  &STRCNSL           NESTING_LIMIT                 202.\n         GBLA  &STRCBL#(100)      BLOCK_NUMBER                  203.\n         GBLB  &STRCEND(100)      END_LABEL_REQD                206.\n         GBLB  &STRCXIT(100)      EXIT_LABEL_REQD               208.\n         GBLC  &STRCNAM(100)      BLOCK_NAME                    212.\n         GBLC  &STRCTYP(100)      BLOCK_TYPE                    215.\n         GBLC  &STRCOP1(100)      OPERAND1                      217.\n         GBLC  &STRCOP2(100)      OPERAND2                      217.\n         GBLC  &STRCOP3(100)      OPERAND3                      217.\n         GBLC  &STRCOP4(100)      OPERAND4                      217.\n         GBLC  &STRCINF(100)      INFORMATION                   217.\n.* GCASE STACK\n         GBLA  &STRCMCV(9)        MAX_CASE_VALUE                230.\n         GBLA  &STRCCL#(9)        NEXT_COMP_LABEL_NO            231.\n         GBLA  &STRCGNL           GCASE_NEST_LEVEL              233.\n         GBLA  &STRCGNX           GCASE_NEST_LIMIT              236.\n         GBLB  &STRCOCC(2304)     CASE_OCCURS                   240.\n.* CEP PSEUDOS\n         GBLA  &STRCFRX           FIRST_INDEX                   247.\n         GBLA  &STRCLSX           LAST_INDEX                    248.\n         GBLB  &STRCUFC           ULTIMATE_FALLTHRU_CONDITION   253.\n         GBLB  &STRCFLU           FALLTHRU_LABEL_USED           256.\n         GBLC  &STRCUBL           ULTIMATE_BRANCH_LABEL         260.\n         GBLC  &STRCUFL           ULTIMATE_FALLTHRU_LABEL       263.\n         GBLC  &STRCUID           UNIQUE_LABEL_ID               269.\n.*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCPOP": {"ttr": 2056, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCPOP  &OLDEXIT                                    92002.\n         COPY  STRCGBLS\n         STRCTRAC  STRCPOP                                    92005.\n         AIF   (&STRCNST GT &STRCNSL).M037                    92007.\n         AIF   (NOT &STRCEND(&STRCNST)).M012                  92011.\n$&STRCBL#(&STRCNST)END  DS  0H\n.M012    AIF   (NOT &STRCXIT(&STRCNST) AND '&OLDEXIT' EQ '').M028\n         AIF   ('&STRCXSV' NE '').M018                        92015.\n&STRCXSV SETC  '0'                                            92017.\n.M018    MNOTE &STRCXSV,' STRC9201 ONE OR MORE EXIT''S REFERENCE THIS P*\n               OINT'                                          92020.\n         AIF   (NOT &STRCXIT(&STRCNST)).M024                  92021.\n         MNOTE &STRCXSV,'          VIA $&STRCBL#(&STRCNST)XIT'\n$&STRCBL#(&STRCNST)XIT  DS  0H\n.M024    AIF   ('&OLDEXIT' EQ '').M028                        92025.\n         MNOTE &STRCXSV,'          VIA &OLDEXIT'\n&OLDEXIT DS    0H\n.M028    AIF   (NOT &STRCDLB).M037                            92030.\n         MNOTE *,' STRC9202 END OF BLOCK &STRCBL#(&STRCNST)(&STRCNAM(&S*\n               TRCNST)) AT DEPTH &STRCNST'                    92033.\n         MNOTE *,'****************************************************'\n.M037    ANOP\n&STRCNST SETA  &STRCNST-1                                     92038.\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCPUSH": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAMEVAL STRCPUSH  &TYPEVAL=,&OP1VAL=,&OP2VAL=,&OP3VAL=,      93001.   *\n               &OP4VAL=,&INFVAL=,&ENDVAL=0                    93001.\n         COPY  STRCGBLS\n         STRCTRAC  STRCPUSH                                   93013.\n&STRCNSL SETA  100                                            93015.\n&STRCGNX SETA  9                                              39016.1\n&STRCERR SETB  0                                              93021.\n&STRCNST SETA  &STRCNST+1                                     93022.\n         AIF   (&STRCNST LE &STRCNSL).M028                    93023.\n         MNOTE 12,' STRC9301 BLOCK NESTING LIMIT OF &STRCNSL EXCEEDED'\n         MNOTE 0,'           MACROS MUST BE MODIFIED'         93025.\n&STRCERR SETB  1                                              93027.\n         AGO   .M059                                          93028.\n.M028    ANOP\n&STRCLB# SETA  &STRCLB#+1                                     93029.\n&STRCBL#(&STRCNST)  SETA  &STRCLB#                            93031.\n&STRCXIT(&STRCNST)  SETB  0                                   93032.\n&STRCTYP(&STRCNST)  SETC  '&TYPEVAL'                          93033.\n&STRCOP1(&STRCNST)  SETC  '&OP1VAL'                           93034.\n&STRCOP2(&STRCNST)  SETC  '&OP2VAL'                           93035.\n&STRCOP3(&STRCNST)  SETC  '&OP3VAL'                           93036.\n&STRCOP4(&STRCNST)  SETC  '&OP4VAL'                           93037.\n&STRCINF(&STRCNST)  SETC  '&INFVAL'                           93038.\n&STRCEND(&STRCNST)  SETB  ('&ENDVAL' EQ '1')                  93039.\n&STRCNAM(&STRCNST)  SETC  '&NAMEVAL'                          93040.\n         AIF   ('&NAMEVAL' NE '').M044                        93041.\n&STRCNAM(&STRCNST)  SETC  'BLK&STRCLB#'                       93043.\n.M044    ANOP\n&STRCPFX SETC  '$&STRCLB#'                                    93045.\n         AIF   (&STRCNST LE 1).M52                            93046.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE 'DOCASE' OR                  *\n               '&TYPEVAL' EQ 'CASE').M52                      93046.\n         MNOTE 8,' STRC9302 NON-CASE BLOCK IMMEDIATELY SURROUNDED'\n         MNOTE 0,'                BY DOCASE INVALID'\n.M52     AIF   (NOT &STRCDLB).M058                            93053.\n         MNOTE *,'****************************************************'\n         MNOTE *,' STRC9302 START OF BLOCK &STRCLB#.(&STRCNAM(&STRCNST)*\n               ) AT DEPTH &STRCNST'                           93056.\n.M058    ANOP\n.M059    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCSCND": {"ttr": 2060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   STRCSCND  &OPCODE,&OPER1,&OPER2,&OPER3,&OPER4,&BRANCH,        *\n               &FALTHRU,&OPCOUNT                              94001.\n         COPY  STRCGBLS\n         LCLC  &LOCMASK           LOCAL_MASK                  94013.\n         LCLC  &LOCREL            LOCAL_REL                   94013.\n         LCLC  &BCTAG             BC_TAG                      94014.\n         STRCTRAC  STRCSCND                                   94016.\n.*       CALL  SIMPCOND_GET_MASK_OR_REL                       94018.\n         AIF   (&OPCOUNT NE 0).M079                           94075.\n         MNOTE 8,' STRC9403 NO CONDITION SPECIFIED--\"MASK=0\" ASSUMED'\n&LOCMASK SETC  '0'                                            94078.\n         AGO   .M109                                          94079.\n.M079    AIF   ('&SYSLIST(&OPCOUNT)'(1,5) NE 'MASK=').M083    94080.\n&LOCMASK SETC  '&SYSLIST(&OPCOUNT)'(6,8)                      94082.\n         AGO   .M109                                          94083.\n.M083    AIF   ('&SYSLIST(&OPCOUNT)'(1,4) NE 'REL=').M087     94084.\n&LOCREL  SETC  '&SYSLIST(&OPCOUNT)'(5,8)                      94086.\n         AGO   .M089                                          94087.\n.M087    ANOP\n&LOCREL  SETC  '&SYSLIST(&OPCOUNT)'                           94088.\n.M089    AIF   ('&LOCREL' NE 'GT').M095                       94092.\n&LOCREL  SETC  'H'                                            94093.\n         AGO   .M109                                          94094.\n.M095    AIF   ('&LOCREL' NE 'GE').M098                       94095.\n&LOCREL  SETC  'NL'                                           94096.\n         AGO   .M109                                          94097.\n.M098    AIF   ('&LOCREL' NE 'EQ').M101                       94098.\n&LOCREL  SETC  'E'                                            94099.\n         AGO   .M109                                          94100.\n.M101    AIF   ('&LOCREL' NE 'LT').M104                       94101.\n&LOCREL  SETC  'L'                                            94102.\n         AGO   .M109                                          94103.\n.M104    AIF   ('&LOCREL' NE 'LE').M109                       94104.\n&LOCREL  SETC  'NH'                                           94105.\n.M109    ANOP\n.*       CORP  SIMPCOND_GET_MASK_OR_REL                       94110.\n         AIF   (&OPCOUNT NE 1).M027                           94024.\n&BCTAG   SETC  '&LABEL'                                       94025.\n         AGO   .M046                                          94026.\n.M027    AIF   (&OPCOUNT NE 2).M031                           94027.\n         MNOTE 8,' STRC9401 INSUFFICIENT OPERANDS FOR TEST \"&OPCODE\"'\n         AGO   .M046                                          94030.\n.M031    AIF   (&OPCOUNT NE 3).M034                           94031.\n&LABEL   &OPCODE  &OPER1\n         AGO   .M046                                          94033.\n.M034    AIF   (&OPCOUNT NE 4).M038                           94034.\n&LABEL   &OPCODE  &OPER1,&OPER2\n         AGO   .M046                                          94037.\n.M038    AIF   (&OPCOUNT NE 5).M042                           94038.\n&LABEL   &OPCODE  &OPER1,&OPER2,&OPER3\n         AGO   .M046                                          94041.\n.M042    MNOTE 8,' STRC9402 SUPERFLUOUS OPERANDS FOR TEST \"&OPCODE\"'\n&LABEL   &OPCODE  &OPER1,&OPER2,&OPER3\n.M046    AIF   ('&LOCMASK' NE '').M059                        94047.\n         AIF   ('&FALTHRU' EQ '0').M057                       94049.\n         AIF   ('&LOCREL'(1,1) NE 'N').M054                   94051.\n&LOCREL  SETC  '&LOCREL'(2,7)                                 94053.\n         AGO   .M057                                          94054.\n.M054    ANOP\n&LOCREL  SETC  'N&LOCREL'                                     94055.\n.M057    ANOP\n&BCTAG   B&LOCREL    &BRANCH\n         AGO   .M067                                          94059.\n.M059    AIF   ('&FALTHRU' EQ '0').M064                       94060.\n&BCTAG   BC    X'F'-(&LOCMASK),&BRANCH\n         AGO   .M067                                          94064.\n.M064    ANOP\n&BCTAG   BC    &LOCMASK,&BRANCH\n.M067    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRCTDL": {"ttr": 2062, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCTDL\n         COPY  STRCGBLS\n         LCLB  &LBLABRQ           LB_LABEL_REQ                98007.\n         LCLC  &X                 X                           98010.\n         LCLC  &LABEL             LABEL                       98011.\n         LCLC  &BR8,&BR10,&BR11   BRANCH8,BRANCH10,BRANCH11   98012.\n         LCLC  &LBOPCOD           LB_OPCODE                   98014.\n         LCLC  &OPER1,&OPER2      OPER1,OPER2                 98014.\n         STRCTRAC  STRCTDL                                    98017.\n&X       SETC  '&STRCINF(&STRCNST)'                           98019.\n&BR8     SETC  '&X'(1,1)                                      98020.\n&BR10    SETC  '&X'(2,1)                                      98021.\n&BR11    SETC  '&X'(3,1)                                      98022.\n&LBLABRQ SETB  ('&X'(4,1) EQ '1')                             98023.\n&OPER1   SETC  '&STRCOP1(&STRCNST)'                           98024.\n&OPER2   SETC  '&STRCOP2(&STRCNST)'                           98025.\n&LBOPCOD SETC  '&STRCOP3(&STRCNST)'                           98026.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          98027.\n         AIF   (NOT &LBLABRQ).M033                            98028.\n&LABEL   SETC  '&STRCPFX.LPB'                                 98030.\n.M033    AIF   ('&BR8' NE 'W' AND '&BR8' NE 'U').M038         98035.\n         B     &STRCPFX&BR8.1\n         AGO   .M044                                          98037.\n.M038    AIF   ('&BR8' NE 'B').M044                           98038.\n         B     &STRCPFX.BEG\n.M044    ANOP\n&STRCTFT SETB  0                                              98045.\n         AIF   ('&LBOPCOD' EQ '').M072                        98046.\n&STRCTFT SETB  1                                              98048.\n         AIF   ('&BR10' NE 'B').M053                          98050.\n&X       SETC  'BEG'                                          98052.\n         AGO   .M055                                          98053.\n.M053    ANOP\n&X       SETC  '&BR10.1'                                      98054.\n.M055    AIF   ('&LBOPCOD' NE 'BCT').M060                     98056.\n&LABEL   BCT   &OPER1,&STRCPFX&X\n         AGO   .M063                                          98060.\n.M060    ANOP\n&LABEL   &LBOPCOD   &OPER1,&OPER2,&STRCPFX&X\n.M063    AIF   ('&BR11' EQ 'N').M071                          98064.\n         B     &STRCPFX&BR11.1\n&STRCTFT SETB  0                                              98069.\n.M071    ANOP\n.M072    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCTRAC": {"ttr": 2064, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCTRAC  &MACNAME                                   95001.\n         COPY  STRCGBLS\n         AIF   (NOT &STRCDMN).M007                            95004.\n         MNOTE  *,' STRC9500 &MACNAME'                        95006.\n.M007    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRCVERF": {"ttr": 2066, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCVERF  &REQTYPE,&REQNAME                          96001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           96006.\n         STRCTRAC  STRCVERF                                   96008.\n&STRCERR SETB  0                                              96010.\n         AIF   ('&REQNAME' NE '').M043                        96011.\n         AIF   (&STRCNST GT 0).M017                           96013.\n         MNOTE 8,' STRC9607 NO BLOCKS ACTIVE--MACRO IGNORED'  96015.\n&STRCERR SETB  1                                              96016.\n         AGO   .M076                                          96017.\n.M017    AIF   (&STRCNST LT 1).M076                           96018.\n         AIF   ('&STRCTYP(&STRCNST)' EQ '&REQTYPE').M076      96018.\n         AIF   (&STRCNST LT 2).M027                           96021.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE '&REQTYPE').M027    96021.\n         MNOTE 8,' STRC9601 ONE BLEND ASSUMED TO GET TO \"&REQTYPE\" BLOC*\n               K'                                             96024.\n         BLEND\n         AGO   .M076                                          96027.\n.M027    AIF   (&STRCNST LT 3).M035                           96028.\n         AIF   ('&STRCTYP(&STRCNST-2)' NE '&REQTYPE').M035    96028.\n         MNOTE 8,' STRC9602 TWO BLENDS ASSUMED TO GET TO \"&REQTYPE\" BLO*\n               CK'                                            96031.\n         BLEND\n         BLEND\n         AGO   .M076                                          96035.\n.M035    MNOTE 8,' STRC9603 CURRENT BLOCK IS NOT \"&REQTYPE\" BLOCK'\n         MNOTE 0,'          MACRO IGNORED'                    96037.\n&STRCERR SETB  1                                              96038.\n         AGO   .M076                                          96043.\n.M043    ANOP\n&I       SETA  &STRCNST                                       96044.\n.M045    AIF   (&I LE 0).M048                                 96045.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M048            96045.\n&I       SETA  &I-1                                           96046.\n         AGO   .M045                                          96048.\n.M048    AIF   (&I GT 0).M054                                 96050.\n         MNOTE 8,' STRC9604 NO ACTIVE BLOCK NAMED \"&REQNAME\"' 96052.\n&STRCERR SETB  1                                              96053.\n         AGO   .M076                                          96054.\n.M054    AIF   ('&REQTYPE' EQ '&STRCTYP(&I)').M060            96055.\n         MNOTE 8,' STRC9605 BLOCK \"&REQNAME\" IS NOT A \"&REQTYPE\" BLOCK'\n         MNOTE 0,'          MACRO IGNORED'                    96057.\n&STRCERR SETB  1                                              96059.\n         AGO   .M076                                          96060.\n.M060    ANOP\n.M061    AIF   (&STRCNST LE &I).M070                          96061.\n         MNOTE 8,' STRC9606 END OF BLOCK \"&REQNAME\" IMPLIES END OF'\n         MNOTE 0,'          BLOCK \"&STRCNAM(&STRCNST)\"'       96063.\n         BLEND\n         AGO   .M061                                          96070.\n.M070    ANOP\n.M076    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRCXFND": {"ttr": 2068, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCXFND  &REQNAME                                   91001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           91006.\n         STRCTRAC  STRCXFND                                   91008.\n&STRCERR SETB  0                                              91010.\n&I       SETA  &STRCNST-1                                     91012.\n         AIF   ('&REQNAME' EQ '' OR '&REQNAME' EQ '*').M021   91013.\n.M015    AIF   (&I LE 0).M019                                 91015.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M019            91015.\n         AIF   ('&STRCTYP(&I)' EQ 'PROC').M019                91015.\n&I       SETA  &I-1                                           91018.\n         AGO   .M015                                          91019.\n.M019    ANOP\n.M021    AIF   (&I LE 0).M024                                 91022.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M041            91023.\n         AIF   ('&REQNAME' EQ '' OR '&REQNAME' EQ '*').M041   91023.\n.M024    ANOP\n&STRCERR SETB  1                                              91025.\n         AIF   ('&REQNAME' NE '' AND '&REQNAME' NE '*').M029\n         MNOTE 8,' STRC9101 EXIT MACRO NOT SUFFICIENTLY NESTED'\n         AGO   .M057                                          91029.\n.M029    AIF   ('&REQNAME' NE '&STRCNAM(&STRCNST)').M033      91030.\n         MNOTE 8,' STRC9103 EXIT TO IMMEDIATELY SURROUNDING BLOCK'\n         MNOTE 0,'          INVALID'                          91032.\n         AGO   .M057                                          91033.\n.M033    MNOTE 8,' STRC9102 NO BLOCK ACTIVE NAMED \"&REQNAME\"' 91034.\n         AIF   (&I LE 0).M038                                 91035.\n         MNOTE 0,'          WITHIN PROC \"&STRCNAM(&I)\"'       91037.\n.M038    AGO   .M057                                          91038.\n.M041    AIF   ('&STRCTYP(&I)' NE 'DO').M049                  91042.\n         AIF   ('&STRCINF(&I)'(6,2) EQ '00').M049             91044.\n         MNOTE 8,' STRC9104 EXIT TO DO BLOCK INVALID WITHIN ATEND OR'\n         MNOTE 0,'                ONEXIT'                     91046.\n&STRCERR SETB  1                                              91047.\n         AGO   .M057                                          91048.\n.M049    AIF   ('&STRCTYP(&I)' NE 'PROC').M053                91049.\n         AIF   ('&STRCINF(&I)'(8,1) NE '1').M053              91049.\n&STRCUBL SETC  '&STRCINF(&I)'(6,2)                            91051.\n&STRCUBL SETC  '$P&STRCUBL.XIT'                               91051.\n         AGO   .M054                                          91052.\n.M053    ANOP\n&STRCUBL SETC  '$&STRCBL#(&I)XIT'                             91053.\n.M054    ANOP\n&STRCXIT(&I)  SETB  1                                         91055.\n.M057    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRCXHEX": {"ttr": 2305, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         STRCXHEX\n         COPY  STRCGBLS\n         LCLA  &I,&J              I, J                        99004.\n         STRCTRAC  STRCXHEX                                   99006.\n         AIF   ('&STRCHEX(1)' EQ '0').M014                    99008.\n&STRCHEX(1)  SETC  '0'                                        99010.\n&STRCHEX(2)  SETC  '1'                                        99010.\n&STRCHEX(3)  SETC  '2'                                        99010.\n&STRCHEX(4)  SETC  '3'                                        99010.\n&STRCHEX(5)  SETC  '4'                                        99011.\n&STRCHEX(6)  SETC  '5'                                        99011.\n&STRCHEX(7)  SETC  '6'                                        99011.\n&STRCHEX(8)  SETC  '7'                                        99011.\n&STRCHEX(9)  SETC  '8'                                        99012.\n&STRCHEX(10) SETC  '9'                                        99012.\n&STRCHEX(11) SETC  'A'                                        99012.\n&STRCHEX(12) SETC  'B'                                        99012.\n&STRCHEX(13) SETC  'C'                                        99013.\n&STRCHEX(14) SETC  'D'                                        99013.\n&STRCHEX(15) SETC  'E'                                        99013.\n&STRCHEX(16) SETC  'F'                                        99013.\n.M014    ANOP\n&I       SETA  &STRCHXI/16                                    99015.\n&J       SETA  &STRCHXI-&I*16+1                               99016.\n&STRCHXO SETC  '&STRCHEX(&I+1)&STRCHEX(&J)'                   99017.\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WS": {"ttr": 2307, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    WS    &TYPE,                   DSECT NAME AND BEGIN/END       *\n               &LENGTH=WSLEN            WHAT TO CALL LENGTH OF DSECT\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n         GBLC  &WS$NAME\n         GBLC  &WS$CAME\n         AIF   ('&TYPE' EQ 'BEGIN').BEG\n         AIF   ('&TYPE' EQ 'END').END\n         MNOTE 16,'INVALID TYPE FOUND - EXPECTED BEGIN OR END'\n         MEXIT\n.BEG     ANOP\n&WS$NAME SETC  '&NAME'\n&WS$CAME SETC  '&SYSECT'\n&WS$NAME DSECT ,\nSAVEAREA DS    18F\n         MEXIT\n.END     ANOP\n         DS    0D\nWS$LEN   EQU   *-&WS$NAME\n&LENGTH  EQU   (WS$LEN+2)/4\n&WS$CAME CSECT ,\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT471/FILE471.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT471", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}