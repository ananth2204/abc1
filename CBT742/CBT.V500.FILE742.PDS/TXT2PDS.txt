/* Rexx program to reconstitute or update a PDS from a flat text
*  dataset by PDS2Txt.
*  Usage: Txt2PDS dataset Ýpds¨ ÝMOD¨
*  where  dataset is the name of the input dataset, and
*         pds is the name of the output PDS to copy members to.
*  If pds is not specified, it will be taken from the input dataset.
*
*. 2006/03/03 Renamed and worked on.
*. 2006/02/24 Copied from PDS2Seq and modified.
*/
if arg(1) = '?' then signal ShowHelp

/* parse the arguments */
parse ARG DSN PDS Opt
if DSN = '' then signal ShowHelp
if Opt = '' & PDS = 'MOD' then parse VALUE 'MOD' WITH Opt,PDS
if Opt <> 'MOD' & Opt <> '' then signal ShowHelp

/* Check the input dataset. */
GotIn = 0                 /* Set dataset states for Fail */
RC = ListDSI(DSN)
if RC > 4 then
   call Fail RC,'Unable to access' DSN,SysMsgLvl2
if Left(SysDSOrg,2) <> 'PS' then
   call Fail 12,DSN 'is not sequential'

/* Allocate the input dataset. */
"Alloc f(in) dsn("DSN") SHR REUSE"
if RC <> 0 then
   call Fail 12,'Unable to allocate' DSN 'for input.'
GotIn = 1                 /* Got the input dataset (for Fail) */

parse VAR PDS InPDS,Members,Attr,OutPDS
do forever
   "ExecIO 1 DiskR in (STEM Cntl"
   if RC <> 0 then leave
   parse UPPER VAR Cntl1 c 2 Type Parms
   Select
   When c = '(' then do
      do while Right(Strip(Line1),1) <> ')'
         "ExecIO 1 DiskR in (STEM Line"
      end
      iterate
      end
   When Type = 'PDS' then do
      parse VAR Parms InPDS . 'MEMBERS('Members')',Attr
      say 'Reading PDS' InPDS '('Members 'members)'
      if PDS <> '' then InPDS = PDS
      end
   When Type = 'ATTR' then Attr = Strip(Parms)
   When Type = 'MEMBER' then do
      if Members = '' then Members = 0
      parse VAR Parms mName . 'LINES('Lines')'
      if Lines = '' then call Fail 8,Cntl1,'Invalid )MEMBER card'
      /* Set up the output dataset. */
      if OutPDS <> InPDS then do
         RC = ListDSI(InPDS)
         if RC > 4 then do
            "Alloc f(pds) dsn("InPDS") LIKE("DSN")" Attr,
               "DSORG(PO) NEW CATALOG"
            if RC <> 0 then call Fail 12,'Unable to allocate' InPDS
            "Free f(pds)"
            SysDSOrg = 'PO'
         end
         if Left(SysDSOrg,2) <> 'PO' then
            call Fail 12,InPDS 'is not a PDS'
         OutPDS = InPDS
         say 'Reading Member' mName '('Lines 'lines)'
      end; else if Members//10 = 0 then
         say 'Reading Member' mName '('Lines 'lines)'
      if Members > 0 then Members = Members-1
      drop Line.
      "ExecIO" Lines "DiskR in (STEM Line."
      sPDS = Strip(OutPDS,,"'")
      if OutPDS = sPDS then q = ''
      else q = "'"
      Mem = q||sPDS'('mName')'||q
      "Alloc f(out) dsn("Mem") SHR REUSE"
      if RC <> 0 then call Fail 12,'Unable to allocate' Mem
      "ExecIO" Lines "DiskW out (STEM Line. FINIS"
      trc = RC
      "Free f(out)"
      if trc <> 0 then call Fail 8,'Error writing' Mem 'RC='trc
      end
   Otherwise call Fail 8,'garbage in' DSN
   End
end
exit

/* Fail with an error message. */
Fail:
   arg Code,Msg1,Msg2
   if GotIn then do
      address TSO
      "ExecIO 0 DiskR in (FINIS"
      "Free f(in)"
   end
   if Msg1 <> '' then say Msg1
   if Msg2 <> '' then say Msg2
   exit Code

/* Show the Help text for the rexx exec (from the comments) */
ShowHelp:  /* Not a procedure.  Doesn't return. */
   do i=1 for SourceLine() until s = '*/'
      s = Strip(SourceLine(i))
      if Left(s,2) = '* ' | Left(s,3) = '/* ' then queue SubStr(s,3)
   end
   call ViewQ
   exit

/* Display the data stack with ISPF View.
*  Note: not a procedure.  This is so the passed-in stem can be EXPOSEd
*  to the calling routine.
*/
ViewQ: arg $Stem$; call $ViewQ$; return
$ViewQ$: procedure EXPOSE ($Stem$)
   /* Queue any stem variable output */
   if $Stem$ ¬= '' then do l=1 to Value($Stem$||0)
      queue Value($Stem$||l)
   end

   address TSO
   'ISPQRY'
   if (RC /= 0) then "EXECIO" Queued() "DISKW SYSPRINT"
   else do
      CmdName = sysvar('SYSICMD')
      dd = 'VWQ' || Right(SysVar('SYSSRV'),5,0)
      /* Allocate space for the output */
      "Alloc f("dd") UNIT(VIO) LRECL(256) RECFM(V) DSORG(PS) NEW DELETE",
         "dsn(TEMP."dd"."CmdName")"
      "EXECIO" Queued() "DISKW" dd "(FINIS"
      /* Use ISPF View to display the output */
      address ISPExec
      "LMINIT DataID(temp) DDName("dd")"
      "VIEW   DataID("temp") CONFIRM(NO) CHGWARN(NO) MACRO(NORECOV)"
      "LMFREE DataID("temp")"
      /* Free the space */
      address TSO "FREE f("dd")"
   end
