/* Rexx function to open the archive(member) for a given
*  Dataset(Member).  This will be slightly different for READ and WRITE.
*  Usage: a#Open(DD,ArcKey,Purpose)
*  Returns archiveÝ(member)¨ ÝVOLUME(volser)¨ or '' on failure.
*  ArcKey is in the format Volume:DSN(Member),
*  Purpose is either READ or WRITE.
*.
*. 2005/08/04 Created by bsquare
*. 2005/08/17 Add ISPTTDef for strange terminal types.
*.            LMMFind screws up with terminal types other than 3278(a).
*/
arg DD,ArcKey,Purpose
if DD = '' then return ''
parse VAR ArcKey Vol ':' DSN
if DSN = '' then parse VAR ArcKey DSN,Vol
parse VAR DSN DSN '('Mem')'
if DSN = '' then return ''
if Purpose = '' then Purpose = 'READ'
if Purpose <> 'READ' & Purpose <> 'WRITE' then return ''

address TSO
if Right(DSN,4) = '.ARC' then return ''
if Right(Mem,1) = '{' then return ''

/* Use volume information for uncataloged datasets */
IsCat = ListDSI("'"DSN"'") = 0
if IsCat & Vol <> '' then IsCat = (SysVolume = Vol)
if IsCat then Vol = ''
else Vol = ' VOLUME('Vol')'

/* Check the control dataset (the archive). */
SysDSOrg = 'BAD'
ArcDSN = DSN'.ARC'
if Length(ArcDSN) <= 44 then call ListDSI "'"ArcDSN"'"||Vol

/* Check sequential datasets first, they're simpler */
if Mem = '' then do
   if Left(SysDSOrg,2) <> 'PS' then return ''
   if Purpose = 'READ' then
        "Alloc f("DD") dsn('"ArcDSN"') SHR REUSE"
   else "Alloc f("DD") dsn('"ArcDSN"') OLD REUSE"
   if RC <> 0 then return ''
   return ArcDSN
end

/* The remainder of this is only for PDS archives */
if Left(SysDSOrg,2) <> 'PO' then ArcDSN = DSN
ArcMem = Strip(Left(Mem,7))'{'

address ISPExec
"VGet (ZTerm)"
if ZTerm <> '3278' & ZTerm <> '3278A' then
   "Select Pgm(ISPTTDEF) Parm(3278)"
"LMInit DataID(DID) DataSet('"ArcDSN"')"Vol "ENQ(SHRW)"
"LMOpen DataID(&DID)"
"LMMFind DataID(&DID) Member(&ArcMem)"
if RC = 0 then
   "LMGet DataID(&DID) Mode(INVAR) MaxLen(80) DataLoc(Data) DataLen(Len)"
if RC <> 0 then signal NoMem

parse UPPER VAR Data 2 Type Info
if Type = 'RESOLVE' then do
   parse VAR Info 'ID('ConID')'
   ArcMem = 'Z{'Right(ConID,4,0)||SubStr(Mem,8)||'{'
   "LMMFind DataID(&DID) Member(&ArcMem)"
   if RC <> 0 then signal NoMem
   call RetMem ArcDSN'('ArcMem')'
end
/* Type = 'CURRENT' */
parse VAR Info 'MEMBER('aMem')'
if aMem = Mem then call RetMem ArcDSN'('ArcMem')'
if Purpose = 'READ' then call RetMem

/* Resolve contention for WRITE */
Parms. = 0
ConID = ''
"LMMFind DataID(&DID) Member(Z{PARMS{)"
if RC = 0 then do
   address TSO
   "Alloc f(in) dsn('"ArcDSN"(Z{PARMS{)')"Vol "SHR REUSE"
   "ExecIO * DiskR in (STEM Parms. FINIS"
   "Free f(in)"
   do i=1 to Parms.0
      parse UPPER VAR Parms.i 2 Type Info
      if Type <> 'RESOLVE' then iterate
      pl = i
      parse UPPER VAR Parms.i . 'ID('ConID')'
      leave
   end
end
if ConID <> '' then ConID = Right(ConID+1,4,0)
else do
   ConID = '0000'
   pl = Parms.0+1; Parms.0 = pl
end
Parms.pl = ')Resolve ID('ConID')'
address TSO
"Alloc f(out) dsn('"ArcDSN"(Z{PARMS{)')"Vol "SHR REUSE"
"ExecIO" Parms.0 "DiskW out (STEM Parms. FINIS"
"Free f(out)"
OldArc = 'Z{'ConID||SubStr(aMem,8)||'{'
address ISPExec
"LMClose DataID(&DID)"
"LMOpen DataID(&DID) Option(OUTPUT)"
"LMMRen DataID(&DID) Member(&ArcMem) NewName(&OldArc)"
Data = Parms.pl
"LMPut DataID(&DID) Mode(INVAR) DataLoc(Data) DataLen(80)"
"LMMAdd DataID(&DID) Member(&ArcMem) Stats(NO)"
ArcMem = 'Z{'ConID||SubStr(Mem,8)||'{'
call RetMem ArcDSN'('ArcMem')'

NoMem:
   if Purpose = 'READ' then call RetMem
   else call RetMem ArcDSN'('ArcMem')'

RetMem:
   arg DSN
   address ISPExec
   "LMClose DataID(&DID)"
   "LMFree DataID(&DID)"
   if ZTerm <> '3278' & ZTerm <> '3278A' then
      "Select Pgm(ISPTTDEF) Parm("ZTerm")"
   if DSN <> '' then do
      address TSO,
         "Alloc f("DD") dsn('"DSN"')"Vol "SHR REUSE"
      if RC <> 0 then exit ''
   end
   exit DSN||Vol
