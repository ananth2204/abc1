/* Rexx program to update the Last Known Working Member's ACCEPT time.
*  Usage: a#Touch Archive Ý(member)¨
*  Archive is the PDS whose members should be updated.  TSO syntax is
*  accepted for the Archive DSN.
*  Archive can be specified as a DD statement, which should specify
*  the DS name, not a specific member.
*  If member is not supplied, a#Touch updates the time for ALL members
*  of the selected PDS.  The () are required.
*  This can be run in batch or interactively.
*.
*. 2005/08/31 Created by bsquare
*/
if arg(1) = '?' then signal ShowHelp
LKWMTbl = 'Z{LKWM{'
cTime = Translate('1234/56/78',Date('S'),'12345678') Time()

/* Get ArcDSN and ArcVol */
arg DSN . '('Member')'
if Member = '' then Member = '*'
if DSN <> '' then Vol = ''
else do
   if ListDSI('ARCHIVE FILE') > 4 then exit 20
   Vol = SysVolume
   DSN = "'"SysDSName"'"
   if ListDSI(DSN) <= 4 & SysVolume = Vol then Vol = ''
   else Vol = 'VOLUME('Vol')'
end
if Right(Strip(DSN,,"'"),4) <> '.ARC' then do
   if Left(DSN,1) = "'" then
      aDSN = "'"Strip(DSN,,"'")".ARC'"
   else aDSN = DSN'.ARC'
   om = Msg('OFF')
   if ListDSI(aDSN Vol) <= 4 then DSN = aDSN
   call Msg om
end

/* Get ArcDSN ArcVol */
address TSO "Alloc f(arc) dsn("DSN")" Vol "SHR REUSE"
LKWM = ''
address ISPExec
"TbOpen" LKWMTbl "Library(ARC)"
if RC <> 0 then say 'Could not open archive table'
else do until RC > 0
   /* Use TbScan to scan the table for matches (allows * wildcard) */
   Mem = Member
   "TbScan" LKWMTbl "ArgList(Mem)"
   if RC = 0 then do
      Mod = cTime
      "TbPut" LKWMTbl
      say 'Set' Mem 'to' Mod
   end
end
"TbClose" LKWMTbl "Library(ARC)"
"TbStats BADTABLE Library(BADLIB)" /* workaround for ISPF bug */
address TSO "Free f(arc)"
exit

/* Show the Help text for the rexx exec (from the comments) */
ShowHelp:  /* Not a procedure.  Doesn't return. */
   do i=1 for SourceLine() until s = '*/'
      s = Strip(SourceLine(i))
      if Left(s,2) = '* ' | Left(s,3) = '/* ' then queue SubStr(s,3)
   end
   call ViewQ
   exit

/* Display the data stack with ISPF View.
*  Note: not a procedure.  This is so the passed-in stem can be EXPOSEd
*  to the calling routine.
*/
ViewQ: arg $Stem$; call $ViewQ$; return
$ViewQ$: procedure EXPOSE ($Stem$)
   /* Queue any stem variable output */
   if $Stem$ ¬= '' then do l=1 to Value($Stem$||0)
      queue Value($Stem$||l)
   end

   address TSO
   'ISPQRY'
   if (RC /= 0) then "EXECIO" Queued() "DISKW SYSPRINT"
   else do
      dd = 'VWQ' || Right(SysVar('SYSSRV'),5,0)
      /* Allocate space for the output */
      "Alloc f("dd") UNIT(VIO) LRECL(256) RECFM(V) DSORG(PS) NEW DELETE"
      "EXECIO" Queued() "DISKW" dd "(FINIS"
      /* Use ISPF View to display the output */
      address ISPExec
      "LMINIT DataID(temp) DDName("dd")"
      "VIEW   DataID("temp") CONFIRM(NO) CHGWARN(NO) MACRO(NORECOV)"
      "LMFREE DataID("temp")"
      /* Free the space */
      address TSO "FREE f("dd")"
   end
   return
