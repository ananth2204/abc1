/* Rexx program.  Initialize the archive macros that replace ISPF edit
*  commands - END, CANCEL, SAVE, VIEW, COMPARE (add HISTORY).
*  Usage: Install using #CONFIG.
*  Archiving is done in one of 3 ways:
*  1.  Seq dataset, seq archive named dataset.ARC
*  2.  PDS dataset, PDS archive named dataset.ARC
*  3.  PDS dataset with a PDS member named Z{PARMS{
*
*  In any case, the archive must have a LRecL >= 80 (84 if V).
*  The archive LRecL must also be >= the LRecL of the dataset (if the
*  dataset is RecFM F or FB and the archive is V or VB, the LRecL of
*  the archive must be at least 4 more than the dataset.
*  NOTE: In order to use the LKWM feature, the archive MUST have
*        RecFM FB, LRecL 80.
*.
*. 2005/07/08 Created by BSquare
*. 2005/07/12 Allow sequential archives, add CANCEL.
*.            Moved the macros to a seperate library.
*. 2005/07/15 Use INFOLINE for description in member.
*. 2005/07/21 Change format of archives.
*. 2005/07/28 Change format of archives (again).
*. 2005/08/03 Change INFOLINE to NOTELINE, use INFOLINE for WARNINGS.
*. 2005/08/05 Use external a#Open instead of internal Resolve.
*. 2005/08/12 Added Default, Global and Local options.
*. 2005/08/30 Add Last Known Working Member copy.
*. 2005/09/06 Fix LKWM for sequential datasets (i.e. remove).
*. 2005/09/07 Only allow FB80 for LKWM.
*. 2009/05/20 Add HISTORY alias HIST.
*.            Fix recursive VIEW of the same PDS member.
*.            Add DSOrg to the archive table to allow fixing broken
*.            archive members.
*.            Fix v01.00 for no disk stats (is now v00.00).
*/
address ISREdit
"Macro"

"(Sess) = SESSION"
/* Archive can not be used in EDIF or VIIF */
if WordPos(Sess,'EDIT VIEW') = 0 then exit

/* Check the dataset being edited (the target). */
"(DID) = DATAID"
"(Vol) = VOLUME"
"(Mem) = MEMBER"
"(DSN) = DATASET"
if Left(DSN,1) = '/' then exit        /* Can't archive a unix file */
if Right(DSN,4) = '.ARC' then exit    /* Can't archive an archive */
if Left(DSN,1)  = '/' then exit       /* Can't archive a unix file */
ArcKey = Vol':'DSN'('Mem')'           /* Key for archive table */
"(LRecL)   = LRECL"
"(RecFm)   = RECFM"
if RecFm = 'V' then LRecL = LRecL+4

/* Check the control dataset (the archive). */
zParms = 0
if ListDSI("'"DSN"'") = 0 & Vol = SysVolume then ArcVol = ''
else ArcVol = 'VOLUME('Vol')'         /* accessed by volume */
DSOrg = Left(SysDSOrg,2)
ArcDSN = DSN'.ARC'
ArcLen = Length(ArcDSN)
LKWMTbl = ''                          /* ISPF table for LKWM */
if Mem = '' then do                       /* sequential dataset */
   if ArcLen > 44 then exit     /* can't archive, name too long */
   /* Archive doesn't exist */
   if ListDSI("'"ArcDSN"'" ArcVol) <> 0 then exit
   if Left(SysDSOrg,2) <> 'PS' then exit  /* archive must be seq */
end; else do                              /* PDS dataset */
   if Right(Mem,1) = '{' then exit        /* Can't archive these. */
   if ArcLen > 44 | ListDSI("'"ArcDSN"'" ArcVol) <> 0 then do
      address ISPExec
      "Control ERRORS RETURN"
      "VGet (ZTerm)"                /* deal with strange term types */
      if ZTerm <> '3278' & ZTerm <> '3278A' then
         "Select Pgm(ISPTTDef) Parm(3278)"
      "LMOpen DataID(&DID)"
      oRC = RC
      "LMMFind DataID(&DID) Member(Z{PARMS{)"
      zParms = (RC = 0)
      "LMQuery DataID(&DID) LRecL(SysLRecL) RecFm(SysRecFm)",
         "DSOrg(SysDSOrg)"
      if oRC < 12 then "LMClose DataID(&DID)"
      if ZTerm <> '3278' & ZTerm <> '3278A' then
         "Select Pgm(ISPTTDef) Parm("ZTerm")"
      if zParms = 0 then exit
      if Left(SysRecFm,1) = 'V' then SysLRecL = SysLRecL+4
      ArcDSN = DSN                        /* self-archived */
      address
   end
   if Left(SysDSOrg,2) <> 'PO' then exit  /* archive must be PDS */
   if Left(SysRecFM,2) = 'FB' & SysLRecL = 80 then LKWMTbl = 'Z{LKWM{'
end

/* Make sure LRecL is long enough */
if SysLRecL < 80 | SysLRecL < LRecL then exit

/* O.K. - set up for archiving */
Opts = 'Hist(5) NoArc NoSync Desc'        /* Defaults */
parse VALUE 5 1 1 1 0 WITH Hist NoArc NoSync Desc Quiet

/*
Src = "H224.ARCHIVE.SOURCE"
address TSO,
   "AltLib ACTIVATE APPLICATION (EXEC) DATASET('"Src"') UNCOND"
if RC <> 0 then exit */               /* No archive source library! */

address ISPExec
"Control ERRORS RETURN"        /* No ugly dialog boxes */
/* "LIBDEF ISPPLIB DATASET ID('"Src"') STACK" */
ArcTbl = ''
"TbCreate archive NOWRITE SHARE KEYS(ArcKey)",
   "Names(DSOrg ArcDSN ArcTbl ArcVol LKWMTbl Opts",
         "DL Desc1 Desc2 Desc3 Desc4 Desc5 Desc6)"
if RC = 8 then do
   "TbOpen archive NOWRITE SHARE"
   "TbGet archive"
end

if ArcTbl <> '' then "TbOpen &ArcTbl NOWRITE SHARE"
else do
   do i=1 to 99 until RC = 0
      ArcTbl = 'ARC'i
      "TbCreate &ArcTbl NOWRITE SHARE KEYS(Mod)",
         "Names(User Vers HL Hist1 Hist2 Hist3 Hist4 Hist5 Hist6)"
   end
   if RC = 0 then "TbAdd archive"  /* Save the archive data */
end
if RC <> 0 then exit 12            /* major failure */

/* These definitions add archive processing to ISPF commands. */
address ISREdit
if Sess = 'VIEW' then
   "Define END     ALIAS A#CAN"
else do
   "Define END     ALIAS A#END"
   "Define SAVE    ALIAS A#SAVE"
end
"Define CANCEL  ALIAS A#CAN"
"Define COMPARE ALIAS A#CMP"
"Define HIST    ALIAS A#VHIST"
"Define HISTORY ALIAS A#VHIST"
"Define OPTS    ALIAS A#OPT"
"Define OPTIONS ALIAS A#OPT"
"Define RESTORE ALIAS A#REST"
"Define VIEW    ALIAS A#VIEW"

/* Copy the member to the Last Known Working Member if required. */
address ISPExec
if LKWMTbl <> '' then do
   address TSO "Alloc f(arc) dsn('"ArcDSN"')" ArcVol "SHR REUSE"
   "TbOpen" LKWMTbl "NOWRITE Library(ARC)"
   if RC = 0 then do
      "TbGet" LKWMTbl
      GotLKWM = (RC = 0 & LKWM <> '')
      "TbClose" LKWMTbl
      if GotLKWM then do
         DoCopy = 0
         "LMOpen DataID(&DID)"
         "LMMFind DataID(&DID) Member(&Mem) Stats(YES)"
         cMod = ZLM4Date ZLMTime':'ZLMSec
         if Mod > cMod then do
            "LMMFind DataID(&DID) Member(&LKWM) Stats(YES)"
            if RC = 8 then lMod = ''
            else lMod = ZLM4Date ZLMTime':'ZLMSec
            if cMod > lMod then DoCopy = 1
         end
         "LMClose DataID(&DID)"
         if DoCopy then do
            "LMInit DataID(ToID) DataSet('"DSN"')" ArcVol
            "LMCopy FromID(&DID) FromMem(&Mem)",
               "ToDataID(&ToID) ToMem(&LKWM) REPLACE"
            "LMFree DataID(&ToID)"
         end
      end
   end
   "TbStats BADTABLE Library(BADLIB)" /* workaround for ISPF bug */
   address TSO "Free f(arc)"
end

/* Set CAPS OFF for messages. */
address ISREdit
"(CM) = CAPS"
"CAPS = OFF"
Global = ''                           /* Set up for Global opts */
if zParms = 0 & Mem <> '' then do
   address ISPExec
   "LMInit DataID(ArcID) DataSet('"ArcDSN"')" ArcVol
   "LMOpen DataID(&ArcID)"
   "LMMFind DataID(&ArcID) Member(Z{PARMS{)"
   zParms = (RC = 0)
   "LMClose DataID(&ArcID)"
   "LMFree DataID(&ArcID)"
end
address TSO
if zParms then do
   "Alloc f(in) dsn('"ArcDSN"(Z{PARMS{)')" ArcVol "SHR REUSE"
   "ExecIO * DiskR in (STEM Parms. FINIS"
   "Free f(in)"
   do i=1 to Parms.0
      parse VAR Parms.i 2 Type Info
      if Translate(Type) = 'OPTS' then Global = Global Info
   end
   Global = Space(Global)
   interpret a#Opts(Global)
end
Opts = Opts'00'x||Global
address ISPExec "TbMod archive"
parse VALUE A#Open('ARC',ArcKey,'READ') WITH Archive .
if Archive = '' then do               /* No archive member */
   address ISREdit
   if NoArc then
      "LINE_AFTER 0 = MSGLINE 'No archive exists for this member'"
   "CAPS = &CM"
   exit                               /* OK - continue editing. */
end

line = 1
parse VALUE '0' WITH dl,Desc1,Desc2,Desc3,Desc4,Desc5,Desc6
parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
parse VALUE '0' WITH Data,Mbr
do forever
   "ExecIO 1 DiskR arc" line
   if RC <> 0 then leave
   line = line+1
   pull 2 Type . 'HEADER('Header')' 1 'DATA('Data')' 1 'MEMBER('Mbr')'
   if Header = '' then Header = 0
   if Data = '' then Data = 0
   if Header = 0 then Head.0 = 0
   else "ExecIO" Header "DiskR arc" line "(STEM Head."
   line = line + Header
   if WordPos(Type,'CURRENT ARCHIVE') = 0 then leave  /* error */
   parse VALUE '00.00' WITH pVers pUser pMod
   if Head.0 = 0 then do
      if Type = 'CURRENT' then ArcVers = pVers
      else do
         address ISPExec "TbAdd" ArcTbl
         parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
      end
   end; else do
      Local = ''                      /* Set up for Local opts */
      do i=1 to Head.0
         parse UPPER VAR Head.i 2 Op .
         Select
         When Op = 'OPTS' then Local = Local||'00'x SubWord(Head.i,2)
         When Op = 'STATS' then do
            parse UPPER VAR Head.i,
               'VERSION('pVers')' 1 'USER('pUser')' 1 'MODIFIED('pMod')'
            end
         When Op = 'HIST' then do
            hl = hl+1
            parse VALUE Strip(Head.i) WITH . '(' Info
            call Value 'HIST'hl, Left(Info,Length(Info)-1)
            end
         When Op = 'DESC' then do
            dl = dl+1
            parse VALUE Strip(Head.i) WITH . '(' Info
            call Value 'DESC'dl, Left(Info,Length(Info)-1)
            end
         Otherwise nop
         End
      end
      if Type <> 'CURRENT' then do
         address ISPExec "TbAdd" ArcTbl
         parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
      end; else do
         interpret a#Opts(Local)
         Opts = Opts||Local
         address ISPExec "TbMod archive"
         ArcVers = pVers
      end
   end
   Vers = pVers; User = pUser; Mod = pMod
   line = line + Data
end
"ExecIO 0 DiskR arc (FINIS"
"Free f(arc)"
address ISPExec "TbQuery" ArcTbl "RowNum(Rows)"
address ISREdit
if Rows = 0 & Data = 0 & Mbr = '' then do  /* No archive data */
   if Mem = '' then type = 'dataset'
   else type = 'member'
   if NoArc then
      "LINE_AFTER 0 = MSGLINE 'There is no history for this &type'"
   "CAPS = &CM"
   exit
end
address ISPExec "TbAdd" ArcTbl

/* Put the recent change history in message lines on the display */
address ISPExec
/* archive description */
if Desc then do i=1 to dl
   push Value('DESC'i)
end
if Queued() > 0 then push ' '

/* recent change history */
"TbTop" ArcTbl
do v=1 to Hist
   "TbSkip" ArcTbl
   if RC > 0 then leave
   if Mod <> '' then Mod = 'Modified at' Mod
   if User <> '' then User = 'by' User
   push 'v'Vers Mod User
   do i=1 to hl
      push '       'Value('HIST'i)
   end
end
address ISREdit
do Queued()
   parse PULL Data
   "LINE_AFTER 0 = NOTELINE (Data)"
end
if Mem <> '' then do
   VV = ''; LL = ''
   "(VV) = VERSION"
   "(LL) = LEVEL"
   DiskVers = Right(VV,2,0)'.'Right(LL,2,0)
   /* No disk stats and disk stats of 01.00 get VV.LL of 01.00 */
   if DiskVers = '01.00' then do
      parse VALUE '' WITH ZLVers,ZLMod
      address ISPExec
      "LMOpen DataID(&DID)"
      "LMMFind DataID(&DID) Member(&Mem) Stats(YES)"
      "LMClose DataID(&DID)"
      DiskVers = Right(ZLVers,2,0)'.'Right(ZLMod,2,0)
      address
   end
   if DiskVers <> ArcVers & NoSync then
      "LINE_AFTER 0 = MSGLINE",
         "'WARNING: Current v&DiskVers differs from archive v&ArcVers'"
end
"CAPS = &CM"
exit
