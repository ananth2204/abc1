/* Rexx edit macro to set options for an archive (global or local).
*  Usage: Install using #CONFIG.
*.
*. 2005/08/26 Created by bsquare
*. 2005/09/06 Fix for sequential datasets (remove LKWM).
*. 2005/09/07 Check for LKWM allowable (set in a#Init).
*/
address ISREdit "Macro"
isMacro = (RC = 0)
if isMacro then do     /* called as edit macro */
   address ISREdit
   "(Vol) = VOLUME"
   "(DSN) = DATASET"
   "(Mem) = MEMBER"
   ArcKey = Vol':'DSN'('Mem')'
   address ISPExec
   "TbGet archive"
end; else do           /* called from dataset or member list */
   address ISPExec
   Info = a#Info(arg(1))
   if Info = '' then do
      ZEdLMsg = 'Unable to obtain option information for' arg(1)
      ZEdSMsg = 'No Archive Opts'
      address ISPExec "SetMsg Msg(ISRZ000)"
      exit 8
   end
   "VGet" Info "SHARED"
   parse VAR ArcKey ':'DSN'('Mem')'
   if ArcTbl <> '' then "TbEnd &ArcTbl"
end
Copy = DSN             /* used for LKWM */
if Mem <> '' then DSN = DSN'('Mem')'
LKWM = ''
if LKWMTbl <> '' then do
   address TSO "Alloc f(arc) dsn('"ArcDSN"')" ArcVol "SHR REUSE"
   "TbOpen" LKWMTbl "NOWRITE Library(ARC)"
   if RC = 0 then do
      "TbGet" LKWMTbl
      "TbClose" LKWMTbl
   end
end
Panel.MEMBER  = 'a#OptMP'
Panel.DATASET = 'a#OptDP'

if DSOrg = 'PS' then
   parse VAR Opts Def '00'x . '00'x DataSet,Member
else
   parse VAR Opts Def '00'x DataSet '00'x Member
DataSet = Space(Translate(DataSet,,'00'x))
Member  = Space(Translate(Member ,,'00'x))
oDS = DataSet; oMem = Member
if LKWM <> '' | Member <> '' then OptType = 'MEMBER'
else OptType = 'DATASET'
parse VALUE 0 LKWM WITH Accept OldLKWM .,CopyLKWM
do until RV <> 0
   parse VALUE WITH Hist,Desc,NoArc,NoSync,Quiet
   interpret a#Opts(Value(OptType))
   if Hist Desc NoArc NoSync = '0 0 0 0' then
      parse VALUE 1 WITH Quiet,Hist,Desc,NoArc,NoSync
   if Mem = '' & OptType = 'MEMBER' then do
      OptType = 'DATASET'
      say 'Hey!!'
   end
   oType = OptType
   "Display Panel("Panel.OptType")"
   RV = RC
   Vars = 'Hist Desc NoArc NoSync Quiet'
   call Value oType,''
   do while Vars <> ''
      parse VAR Vars v Vars
      Val = Strip(Value(v))
      if Val = 'YES' then call Value oType,Value(oType) v
      else if Val <> '' then
         call Value oType,Value(oType) v||'('Val')'
   end
end
if LKWMTbl <> '' then do
   if Accept then do
      if LKWM = '' then CopyLKWM = ''
      if CopyLKWM <> '' then do
         if isMacro then
            address ISREdit "(DID) = DATAID"
         else
            "LMInit DataID(DID) DataSet('"Copy"')" ArcVol
         address ISPExec
         "LMInit DataID(ToID) DataSet('"Copy"')" ArcVol
         "LMCopy FromID(&DID) FromMem(&Mem)",
            "ToDataID(&ToID) ToMem(&LKWM) REPLACE"
         "LMFree DataID(&ToID)"
         if \isMacro then "LMFree DataID(&DID)"
      end
      if OldLKWM <> LKWM | CopyLKWM <> '' then do
         Mod = Translate('1234/56/78',Date('S'),'12345678') Time()
         "TbOpen" LKWMTbl "Library(ARC)"
         if RC <> 0 then
            "TbCreate" LKWMTbl "Keys(Mem) Names(LKWM Mod) Library(ARC)"
         if LKWM <> '' then "TbMod" LKWMTbl
         else "TbDelete" LKWMTbl
         "TbClose" LKWMTbl "Library(ARC)"
      end
   end
   "TbStats BADTABLE Library(BADLIB)" /* workaround for ISPF bug */
   address TSO "Free f(arc)"
end
/* normalize options for test */
DataSet = Space(DataSet)
Member  = Space(Member)
/* quit if there is nothing to do */
if Accept = 0 | (oDS = DataSet & oMem = Member) then exit

/* Set Global and Local from DataSet and Member */
if DSORg = 'PS' then do; Loc = DataSet; Global = ''; end
else do; Global = DataSet; Loc = Member; end
Local = ''                          /* split options into lines */
do while Loc <> ''
   p = LastPos(' ',Loc' ',70)
   parse VAR Loc cur =(p) Loc
   Local = Local||'00'x||cur
end
Local = SubStr(Local,2)

Opts = Def'00'x||Global'00'x||Local
if isMacro then "TbMod archive"     /* update options in table */

/* cLocal  = Local options changed */
/* cGlobal = Global options changed */
cLocal  = (DSOrg = 'PS' & oDS <> DataSet) | (Mem <> '' & oMem <> Member)
cGlobal = (DSOrg = 'PO' & oDS <> DataSet)
if cLocal then do                   /* local options changed */
   parse VALUE '0 0' WITH Arc.0 Head.0,Data,Mbr
   if a#Open('IN',ArcKey,'READ') <> '' then do
      address TSO
      "ExecIO 1 DiskR in"
      if RC = 0 then do
         pull 'HEADER(' Hdr ')' 1 'DATA(' Data ')' 1 'MEMBER(' Mbr ')'
         if Hdr <> '' then "ExecIO" Hdr "DiskR in (STEM Head."
         do i=1 to Head.0
            if Translate(Word(Head.i,1)) = '-OPTS' then Head.i = ''
         end
      end
      "ExecIO * DiskR in (STEM Arc. FINIS"
      "Free f(in)"
   end
   if a#Open('OUT',ArcKey,'WRITE') <> '' then do
      do i=1 to Head.0
         if Head.i <> '' then queue Head.i
      end
      do while Local <> ''
         parse VAR Local cur '00'x Local
         queue '-Opts' cur
      end
      Extra = ''
      if Data <> '' then Extra = Extra 'Data('Data')'
      if Mbr  <> '' then Extra = Extra 'Member('Mbr')'
      if Queued() = 0 & Extra = '' & Arc.0 = 0 then
         "ExecIO 0 DiskW out (OPEN FINIS"      /* truncate */
      else do
         push ')Current Header('Queued()')'||Extra
         "ExecIO" Queued() "DiskW out"
         "ExecIO" Arc.0 "DiskW out (STEM Arc. FINIS"
      end
      "Free f(out)"
   end
end
if cGlobal then do                  /* global options changed */
   address ISPExec
   "VGet (ZTerm)"                   /* deal with strange term types */
   if ZTerm <> '3278' & ZTerm <> '3278A' then
      "Select Pgm(ISPTTDef) Parm(3278)"
   "LMInit DataID(DataID) DataSet('"ArcDSN"')" ArcVol
   "LMOpen DataID(&DataID)"
   "LMMFind DataID(&DataID) Member(Z{PARMS{)"
   Exists = (RC = 0)                /* this member already exists. */
   "LMClose DataID(&DataID)"
   "LMFree DataID(&DataID)"
   if ZTerm <> '3278' & ZTerm <> '3278A' then
      "Select Pgm(ISPTTDef) Parm("ZTerm")"
   address TSO
   if Exists then do
      "Alloc f(arc) dsn('"ArcDSN"(Z{PARMS{)')" ArcVol "SHR REUSE"
      "ExecIO * DiskR arc (STEM Arc. FINIS"
      "Free f(arc)"
   end; else Arc.0 = 0
   if DataSet = '' then Opts = ''
   else Opts = ')Opts' Strip(DataSet)
   "Alloc f(arc) dsn('"ArcDSN"(Z{PARMS{)')" ArcVol "SHR REUSE"
   "ExecIO 0 DiskW arc (OPEN"       /* force truncation */
   do while Length(Opts) > 80
      p = LastPos(' ',Opts' ',79)
      parse VAR Opts cur =(p) Opts
      queue cur
      "ExecIO 1 DiskW arc"
      if Opts <> '' then Opts = ')Opts' Strip(Opts)
   end
   if Opts <> '' then do
      queue Opts
      "ExecIO 1 DiskW arc"
   end
   do i=1 to Arc.0
      parse VAR Arc.i Type Info
      if Translate(Type) <> ')OPTS' then do
         queue Strip(Arc.i)
         "ExecIO 1 DiskW arc"
      end
   end
   "ExecIO 0 DiskW arc (FINIS"
   "Free f(arc)"
end
