/* Rexx program to copy members of a PDS to a flat text dataset
*  suitable for download with the name of each PDS member preceding it.
*  Usage: PDS2Txt pds Ýdataset¨ ÝMOD¨
*  where  pds is the name of the PDS to copy members from, and
*         dataset is the name of the output dataset.
*
*. 1994/07/12 Created by bsquare
*. 1995/05/01 Added options (MOD/NEW/etc.) to file allocate.
*. 2006/02/24 Modernized slightly.  Only allow MOD as allocate option.
*. 2006/02/24 Renamed exec and modified ATTR segment.
*/
if arg(1) = '?' then signal ShowHelp

parse arg PDS DataSet Opt
if PDS = '' then signal ShowHelp
tPDS = Strip(PDS,,"'")
if tPDS = PDS then Quote = ''
else do
   dsPref = SysVar('SYSPREF')'.'
   if \Abbrev(tPDS,dsPref) then Quote = "'"
   else do
      PDS = SubStr(tPDS,Length(dsPref)+1)
      tPDS = PDS
      Quote = ''
   end
end
if Opt = '' & DataSet = 'MOD' then parse VALUE 'MOD' WITH Opt,DataSet
if DataSet = '' then DataSet = Quote || tPDS'.TXT' || Quote
if Opt <> 'MOD' & Opt <> '' then signal ShowHelp

/* Check the input dataset. */
RC = ListDSI(PDS 'DIRECTORY')
if RC > 4 then do
   say 'Unable to access' PDS
   say SysMsgLvl2
   exit RC
end
if Left(SysDSOrg,2) <> 'PO' then do
   say PDS 'is not partitioned'
   exit 12
end

/* Allocate the output dataset. */
if Opt = '' then do
   om = Msg('OFF')
   "Alloc f(out) dsn("DataSet") OLD REUSE"
   if RC <> 0 then
      "Alloc f(out) dsn("DataSet") LIKE("PDS") DSORG(PS) NEW CATALOG"
   call Msg om
end; else do
   "Alloc f(out) dsn("DataSet") LIKE("PDS") DSORG(PS)",
      Opt "CATALOG REUSE"
end
if RC <> 0 then do
   say 'Unable to allocate' DataSet
   exit 12
end

/* Get a list of the PDS members */
call OutTrap Member.
"LISTDS" PDS "MEMBERS"
call OutTrap 'OFF'
if SysMembers = '' then do
   do i=1 to Member.0 while Member.i <> '--MEMBERS--'; nop; end
   SysMembers = Member.0 - i
end

/* Save the input dataset attributes in the output dataset */
if \DataType(SysUsed,'W') then do
   SysUsed = SysUsedPages
   Used = 'BLOCK(4096) DSNTYPE(LIBRARY)'
end; else do
   if SysUnits = 'BLOCK' then SysUnits = 'BLOCK('SysBlkSize')'
   if SysUDirBlk = '' then SysUDirBlk = SysMembers/6
   Used = 'DIR('SysUDirBlk')' SysUnits
end
/* Put commas in the Record Format for ALLOCATE */
out = Left('1,2,3,4',Length(SysRecFM)*2-1)
RecFm = Translate(out,SysRecFm,'1234')
Attr = 'RECFM('RecFm') LRECL('SysLRecL')'
Sec = Max(SysUsed%2,1)
queue ')PDS' PDS 'MEMBERS('SysMembers')'
queue ')ATTR' Attr 'SPACE('SysUsed','Sec')' Used
"ExecIO 2 DiskW out"

do in=Member.0-SysMembers+1 to Member.0
   mem = Strip(Member.in)
   cm = Quote || tPDS'('mem')' || Quote
   "Alloc f(in) dsn("cm") SHR REUSE"
   "ExecIO * DiskR in (STEM Cur. FINIS"
   "Free f(in)"
   if (in//10) == 0 then say ')MEMBER' mem 'LINES('Cur.0')'
   queue ')MEMBER' mem 'LINES('Cur.0')'
   "ExecIO 1 DiskW out"
   "ExecIO" Cur.0 "DiskW out (STEM Cur."
end
"ExecIO 0 DiskW out (FINIS"
"Free f(out)"
exit

/* Show the Help text for the rexx exec (from the comments) */
ShowHelp:  /* Not a procedure.  Doesn't return. */
   do i=1 for SourceLine() until s = '*/'
      s = Strip(SourceLine(i))
      if Left(s,2) = '* ' | Left(s,3) = '/* ' then queue SubStr(s,3)
   end
   call ViewQ
   exit

/* Display the data stack with ISPF View.
*  Note: not a procedure.  This is so the passed-in stem can be EXPOSEd
*  to the calling routine.
*/
ViewQ: arg $Stem$; call $ViewQ$; return
$ViewQ$: procedure EXPOSE ($Stem$)
   /* Queue any stem variable output */
   if $Stem$ ¬= '' then do l=1 to Value($Stem$||0)
      queue Value($Stem$||l)
   end

   address TSO
   'ISPQRY'
   if (RC /= 0) then "EXECIO" Queued() "DISKW SYSPRINT"
   else do
      CmdName = sysvar('SYSICMD')
      dd = 'VWQ' || Right(SysVar('SYSSRV'),5,0)
      /* Allocate space for the output */
      "Alloc f("dd") UNIT(VIO) LRECL(256) RECFM(V) DSORG(PS) NEW DELETE",
         "dsn(TEMP."dd"."CmdName")"
      "EXECIO" Queued() "DISKW" dd "(FINIS"
      /* Use ISPF View to display the output */
      address ISPExec
      "LMINIT DataID(temp) DDName("dd")"
      "VIEW   DataID("temp") CONFIRM(NO) CHGWARN(NO) MACRO(NORECOV)"
      "LMFREE DataID("temp")"
      /* Free the space */
      address TSO "FREE f("dd")"
   end
