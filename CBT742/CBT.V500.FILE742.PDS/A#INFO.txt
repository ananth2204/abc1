/* Rexx program.  Get archive info for a rexx exec that executes outside
*  of ISPF edit.
*  Usage: a#Info 'DSN(Member)' Volume
*  This is what is passed to the a#CmdCk exit, which calls this.
*  Archiving is done in one of 3 ways:
*  1.  Seq dataset, seq archive named dataset.ARC
*  2.  PDS dataset, PDS archive named dataset.ARC
*  3.  PDS dataset with a PDS member named Z{PARMS{
*
*  In any case, the archive must have a LRecL >= 80 (84 if V).
*  The archive LRecL must also be >= the LRecL of the dataset (if the
*  dataset is RecFM F or FB and the archive is V or VB, the LRecL of
*  the archive must be at least 4 more than the dataset.
*  NOTE: In order to use the LKWM feature, the archive MUST have
*        RecFM FB, LRecL 80.
*.
*. 2009/05/05 Copied from a#Init
*/
address ISPExec
arg DSN Vol .
DSN = Strip(DSN,'B',"'")
parse VAR DSN DSN '(' Mem ')'

/* Check the dataset (the target). */
if Right(DSN,4) = '.ARC' then exit ''       /* No archive info */

/* Check the control dataset (the archive). */
zParms = 0
if ListDSI("'"DSN"'") = 0,
&  (Vol = '' | Vol = SysVolume) then ArcVol = ''
else ArcVol = 'VOLUME('Vol')'         /* accessed by volume */
if ArcVol <> '' then
   if ListDSI("'"DSN"'" ArcVol) <> 0 then exit ''     /* No dataset? */
ArcKey = SysVolume':'DSN'('Mem')'           /* Key for archive table */
LRecL = SysLRecL
RecFm = SysRecFm
ArcDSN = DSN'.ARC'
ArcLen = Length(ArcDSN)
LKWMTbl = ''                             /* ISPF table for LKWM */
DSOrg = Left(SysDSOrg,2)
if DSOrg <> 'PO' & DSOrg <> 'PS' then exit ''        /* Bad Org */
if DSOrg = 'PS' then do                   /* sequential dataset */
   if ArcLen > 44 then exit ''  /* can't archive, name too long */
   /* Archive doesn't exist */
   if ListDSI("'"ArcDSN"'" ArcVol) <> 0 then exit ''
   if Left(SysDSOrg,2) <> 'PS' then exit ''/* archive must be seq */
end; else do                               /* PDS dataset */
   if Right(Mem,1) = '{' then exit ''      /* Can't archive these. */
   if ArcLen > 44 then lRC = 16
   else lRC = ListDSI("'"ArcDSN"'" ArcVol)
   if lRC = 0 then zParms = FindM(ArcDSN,"Z{PARMS{",ArcVol)
   else do
      ArcDSN = DSN                        /* self-archived */
      zParms = FindM(ArcDSN,"Z{PARMS{",ArcVol)
      if zParms = 0 then exit ''
      call ListDSI "'"DSN"'" ArcVol
   end
   if Left(SysDSOrg,2) <> 'PO' then exit '' /* archive must be PDS */
   if Left(SysRecFM,2) = 'FB' & SysLRecL = 80 then LKWMTbl = 'Z{LKWM{'
end

/* Make sure LRecL is long enough */
if SysLRecL < 80 | SysLRecL < LRecL then exit ''

/* O.K. - looks like an archive - get archive data */
ArcTbl = ''
address ISPExec
"TbOpen archive NOWRITE SHARE"
if RC = 0 then do
   "TbGet archive"
   "TbEnd archive"
end
Vars = "(ArcKey DSOrg ArcDSN ArcTbl ArcVol LKWMTbl Opts",
        "DL Desc1 Desc2 Desc3 Desc4 Desc5 Desc6)"
if ArcTbl <> '' then do
   "VPut" Vars "SHARED"
   return Vars
end

/* Not currently in an Edit/View session.  Get Info. */
Opts = 'Hist(5) NoArc NoSync Desc'        /* Defaults */
parse VALUE 5 1 1 1 0 WITH Hist NoArc NoSync Desc Quiet

/* Set up for Global opts */
Global = ''
if zParms then do
   address TSO
   "Alloc f(in) dsn('"ArcDSN"(Z{PARMS{)')" ArcVol "SHR REUSE"
   "ExecIO * DiskR in (STEM Parms. FINIS"
   "Free f(in)"
   do i=1 to Parms.0
      parse VAR Parms.i 2 Type Info
      if Translate(Type) = 'OPTS' then Global = Global Info
   end
   Global = Space(Global)
   interpret a#Opts(Global)
end
Opts = Opts'00'x||Global

address ISPExec
if DSOrg = 'PO' & Mem = '' then Archive = ''
else parse VALUE A#Open('ARC',ArcKey,'READ') WITH Archive .
if Archive = '' then do        /* No archive member - no history */
   "VPut" Vars "SHARED"
   return Vars
end

/* Create a table to store history information in. */
do i=1 to 99 until RC = 0
   ArcTbl = 'ARC'i
   "TbCreate &ArcTbl NOWRITE SHARE KEYS(Mod)",
      "Names(User Vers HL Hist1 Hist2 Hist3 Hist4 Hist5 Hist6)"
end

address TSO
line = 1
parse VALUE '0' WITH dl,Desc1,Desc2,Desc3,Desc4,Desc5,Desc6
parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
parse VALUE '0' WITH Data,Mbr
do forever
   "ExecIO 1 DiskR arc" line
   if RC <> 0 then leave
   line = line+1
   pull 2 Type . 'HEADER('Header')' 1 'DATA('Data')' 1 'MEMBER('Mbr')'
   if Header = '' then Header = 0
   if Data = '' then Data = 0
   if Header = 0 then Head.0 = 0
   else "ExecIO" Header "DiskR arc" line "(STEM Head."
   line = line + Header
   if WordPos(Type,'CURRENT ARCHIVE') = 0 then leave  /* error */
   parse VALUE '00.00' WITH pVers pUser pMod
   if Head.0 = 0 then do
      if Type = 'CURRENT' then ArcVers = pVers
      else do
         address ISPExec "TbAdd" ArcTbl
         parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
      end
   end; else do
      Local = ''                      /* Set up for Local opts */
      do i=1 to Head.0
         parse UPPER VAR Head.i 2 Op .
         Select
         When Op = 'OPTS' then Local = Local||'00'x SubWord(Head.i,2)
         When Op = 'STATS' then do
            parse UPPER VAR Head.i,
               'VERSION('pVers')' 1 'USER('pUser')' 1 'MODIFIED('pMod')'
            end
         When Op = 'HIST' then do
            hl = hl+1
            parse VALUE Strip(Head.i) WITH . '(' Info
            call Value 'HIST'hl, Left(Info,Length(Info)-1)
            end
         When Op = 'DESC' then do
            dl = dl+1
            parse VALUE Strip(Head.i) WITH . '(' Info
            call Value 'DESC'dl, Left(Info,Length(Info)-1)
            end
         Otherwise nop
         End
      end
      if Type <> 'CURRENT' then do
         address ISPExec "TbAdd" ArcTbl
         parse VALUE '0' WITH hl,Hist1,Hist2,Hist3,Hist4,Hist5,Hist6
      end; else do
         interpret a#Opts(Local)
         Opts = Opts||Local
         ArcVers = pVers
      end
   end
   Vers = pVers; User = pUser; Mod = pMod
   line = line + Data
end
"ExecIO 0 DiskR arc (FINIS"
"Free f(arc)"
address ISPExec
"TbQuery &ArcTbl RowNum(Rows)"
if Rows = 0 & Data = 0 & Mbr = '' then do       /* No archive data */
   "TbEnd" ArcTbl
   ArcTbl = ''
end; else "TbAdd" ArcTbl
"VPut" Vars "SHARED"
return Vars

/* Find a member in a dataset */
FindM: procedure
   arg DataSet,Mem,Vol
   address ISPExec
   "Control ERRORS RETURN"
   "VGet (ZTerm)"                /* deal with strange term types */
   if ZTerm <> '3278' & ZTerm <> '3278A' then
      "Select Pgm(ISPTTDef) Parm(3278)"
   "LMInit DataID(ID) DataSet('"DataSet"')" Vol
   "LMOpen DataID(&ID)"
   oRC = RC
   "LMMFind DataID(&ID) Member(&Mem)"
   Found = (RC = 0)
   if oRC < 12 then "LMClose DataID(&ID)"
   if ZTerm <> '3278' & ZTerm <> '3278A' then
      "Select Pgm(ISPTTDef) Parm("ZTerm")"
   "LMFree DataID(&ID)"
   return Found
