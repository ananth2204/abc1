{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011237000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1469650, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE104.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE104.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x19\\x02'", "DS1TRBAL": "b'\\xd1\\x94'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xb1\\x00\\x00\\x00\\xb2\\x00\\n\\x00\\x1a'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04;\\x00\\x00\\x01\\x03\\x08\\x0f\\x01\\x03\\x08\\x0f\\x10I\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf9@@@'", "ispf": {"version": "04.59", "flags": 0, "createdate": "2003-03-21T00:00:00", "modifydate": "2003-03-21T10:49:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-459"}, "text": "REGULAR CBT TAPE - VERSION 459    FILE:  104\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT459.FILE104\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 48 MEMBERS COUNTED; CUMULATIVE SIZE IS 13,625 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/21/03    10:49:48    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00)\\x00)\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "JRP"}, "text": "//*                                                                 *\n//***FILE 158 IS FROM CONNECTICUT MUTUAL LIFE INSURANCE COMPANY     *\n//*           AND CONTAINS A COPY OF THEIR DSPRINT REPLACEMENT      *\n//*                                                                 *\n//*                J R P         (JES2 REMOTE PRINTERS)             *\n//*                                                                 *\n//*               THIS PRODUCT WAS DESIGNED AND WRITTEN WITH THE    *\n//*           INTENT OF INCREASING USER AS WELL AS PROGRAMMER       *\n//*           PRODUCTIVITY. IT(\"JRP\") MAKES USE OF 3270 PRINTER     *\n//*           DEVICES TO PRINT SPOOLED JES2 OUTPUT.  OUTPUT         *\n//*           DEVICES ARE DEFINED TO \"JRP\" VIA A SEQUENTIAL DATA    *\n//*           SET.  EACH CONTROL CARD IN THIS DATA SET DESCRIBES    *\n//*           THE ATTRIBUTES OF ONE PRINTER.                        *\n//*                                                                 *\n//*              AFTER \"JRP\" INITIALIZATION,A SUBSYSTEM REQUEST     *\n//*           IS ISSUED TO JES2 BASED ON EACH PRINTERS              *\n//*           DESCRIPTION. IF JES2 CONFIRMS THAT OUTPUT IS          *\n//*           AVAILABLE FOR THE PRINTER DESCRIBED,A SUBTASK IS      *\n//*           CREATED, USING THE ATTRIBUTES DEFINED FOR THAT        *\n//*           PARTICULAR DEVICE.  THE SPOOL DATASET IS READ,        *\n//*           BUFFERED, THEN WRITTEN TO THE PRINTER VIA \"VTAM\".     *\n//*                                                                 *\n//*               \"JRP\" SUPPORTS VTAM SNA AND NONSNA TERMINALS AS   *\n//*           \"JRP\" CONTROL TERMINALS. A MAXIMUM OF 25(TWENTY       *\n//*           FIVE) TERMINALS ARE SUPPORT SIMULTANIOUSLY. ALL       *\n//*           FUNCTIONS REQUIRED TO SUPPORT \"JRPS\" PRINTER          *\n//*           DEVICES ARE AVAILIBLE FROM A \"JRP\" CONTROL            *\n//*           TERMINAL.                                             *\n//*                                                                 *\n//*           MODIFIED TO HANDLE SUPPRESS PRINT CONTROL CHARACTER.  *\n//*           CAN NOW BE USED TO PRINT SAS GRAPHS.                  *\n//*           WORKS ON MVS/XA DFP RELEASE 2.1.0 AND JES2 2.1.7      *\n//*                                                                 *\n//*           MODIFIED BY:  LEWIS D. WHALEY                         *\n//*                         SENIOR SYSTEMS ENGINEER                 *\n//*                         NUCLEAR FUEL SERVICES, INC.             *\n//*                         205 BANNER HILL ROAD                    *\n//*                         ERWIN, TN  37650                        *\n//*                         (615) 743-9141  EXT: 363                *\n//*                                                                 *\n//*                                                                 *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x89\\x00_\\x01\\x01\\x01\\x0f\\x15@\\x02\\xdf\\x02\\xa3\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "2001-01-10T15:40:00", "lines": 735, "newlines": 675, "modlines": 0, "user": "AGCO"}, "text": "1\n\n\n\n\n\n\n\n\n\n\n\n           JJJJJJJJJJJJJ      RRRRRRRRRRRRR            PPPPPPPPPPPP\n          JJJJJJJJJJJJJ      RRRRRRRRRRRRRRR          PPPPPRPPPPPPPP\n              JJJJJ         RRRRRR    RRRRRR         PPPPP    PPPPPP\n             JJJJJ         RRRRRR     RRRRRR        PPPPP     PPPPPP\n            JJJJJ         RRRRRRRRRRRRRRRR         PPPPPPPPPPPPPPP\n           JJJJJES2      RRRRRRRRRRRRRRRR         PPPPPPPPPPPPPP\n  JJJJJ   JJJJJ         RRRRR        REMOTE      PPPPP\n  JJJJJ  JJJJJ         RRRRR         RRRR       PPPPPRINT\n   JJJJJJJJJJ         RRRRR          RRRR      PPPPP\n    JJJJJJJ          RRRRR           RRRRR    PPPPP\n1 TABLE OF CONTENTS\n    CONTENT                                 Page\n\n    INTRODUCTION............................1\n    \"JRP\" INSTALLATION......................2\n    \"JRP\" STARTUP...........................3\n    \"JRP\" SHUTDOWN..........................3\n    \"JRP\" CONTROL TERMINALS.................4\n    \"JRP\" COMMANDS..........................5\n    \"JRP\" ATTRIBUTE SPECIFICATION...........7\n    \"JRP\" PRINTER STATUS....................8\n    \"JRP\" USE OF............................9\n    \"JRP\" SNA FEATURES......................10\n    \"JRP\" MESSAGES..........................11\n    \"JRP\" USER ABEND CODES..................14\n    \"JRP\" MODULE FLOW ......................15\n    \"JRP\" MODULE DESCRIPTIONS...............16\n    \"JRP\" IMPROVEMENTS......................18\n    \"JRP\" NEW ATTRIBUTES....................19\n1 Introducing JRP(JES2 remote printers)                       Page 1\n0       This product was designed and written with the intent of\n    increasing user as well as programmer productivity. It(\"JRP\")\n    makes use of 3270 printer devices to print spooled JES2 output.\n    Output devices are defined to \"JRP\" via a sequential data set.\n    Each control card in this data set describes the attributes\n    of one printer.\n       After \"JRP\" initialization,a subsystem request is issued to\n    JES2 based on each printers description. If JES2 confirms that\n    output is available for the printer described,a subtask is created,\n    using the attributes defined for that particular device.\n    The spool dataset is read, buffered, then written to the printer\n    via \"VTAM\".\n\n    ******* IMPORTANT NOTE *******\n    JRP will print a maximum of 256 characters per record\n    ******* IMPORTANT NOTE *******\n1 Installation Page 2\n\n    1.  Unload file 1 (one) to 80/3120 data pds:\n\n        //STEP1   EXEC PGM=IEBCOPY\n        //SYSUT1    DD DSN=JRPTP,UNIT=6250,LABEL=(1,NL),\n        //             DISP=(OLD,KEEP),VOL=SER=JRP\n        //SYSUT2    DD DSN=\"JRP.DATA\",DISP=(,CATLG),VOL=SER=\"VOLSER\",\n        //          UNIT=\"DEVTYP\",SPACE=(TRK,(20,2,5))\n        //SYSPRINT  DD SYSOUT=A\n        //SYSIN     DD *\n          COPY INDD=SYSUT1,OUTDD=SYSUT2\n        /*\n\n    2. Tailor proc JRP from JRP.data lib for your apf authorized\n         steplib or remove steplib and let linklist do it.\n\n    3. Edit JRPINST member to specify your library names for\n        syslib, syslmod... For JRPRINT be sure to specify a\n        linklist library for accessibility from TSO.\n\n    4. Submit JRPINST to batch for assembly and link.\n        NOTE** reassemble JRP 200,210,220 for JES2 upgrade.\n\n    5. Copy member JRPRINTH to SYS1.HELP changing name to JRPRINT\n\n    6. Edit and format the \"JRP\" initialization data-set to\n        define the remote printers in your environment:\n\n         col 1-8    :    Printer name(1-8 characters)\n         col 10-72  :    Printer attributes as described in section,\n                         'attribute specification'. The operands\n                         are specified with keywords, and may be\n                         entered in any order.\n                   *NOTE Control information for each printer\n                    may be contained in continuation cards\n                    including ,(comma) after last parameter\n                    on card \"x\" in column 72 and continuation\n                    must begin in column 10.\n\n          ex.:\n  col:    1        10                                                72\n          RMT001   R=RMT001,SCS=N,LGMD=NSNAPRT,LU=LU0A0,S=N,         X\n                   MLIN=0,F=A100,C=A,LPP=068,\n          R002     R=RMT002,LGMD=SCSPRT,C=A,LU=SNA05B\n\n      7. Add the VTAM node's for JRP and \"JRP\" control terminals\n           as follows;\n\n          JRPV     APPL   AUTH=ACQ\n          CJRP     APPL   AUTH=PASS\n\n         In January 2001 it was found that ACBNAME should not be used\n         for cross domain printing.\n\n1 JRP startup                                                 Page 3\n\n    After all updates have been made to JRPDATA, JRP may be\n    initiated from the operators console:\n\n      ENTER:  S JRP\n      RESP:   JRPI101 INITIALIZATION COMPLETE\n\n  JRP shutdown\n\n    To halt and requeue all current printing activity and\n    terminate JRP from MVS operator console enter:\n\n       ENTER:  P JRP\n       RESP:   JRPI102 ICLOSE IN PROGRESS\n               JRPI104 SHUTDOWN COMPLETE, ENDING\n\n\n\n1 JRP control terminals                                     Page 4\n\n        \"JRP\" supports VTAM SNA and nonSNA terminals as \"JRP\"\n    control terminals. A maximum of 25(twenty five) terminals are\n    support simultaneously. All functions required to support \"JRPs\"\n    printer devices are available from a \"JRP\" control terminal.\n    Use of these control terminals is described below although\n    printer control commands are described in section \"JRP commands\"\n\n     1. Logon to JRP control terminal(uss table logon is preferable).\n        or  'logon applid(CJRPA)'\n     2. Enter userid and password.(This is only meaningfull to \"JRP\"\n        if JRP123 security exit is coded although at least on charecter\n        in userid and password field is required.)\n     3. After userid and password acceptance the command screen is\n        displayed. LUid in upper left command line on lower left.\n        \"JRP\" control terminal or printer commands may be entered now.\n1 JRP commands                                                Page 5\n\n   the following commands are are issued from a \"JRP\" control terminal\n\n\n   PRISCN            Set terminal to 3278 mod2 screen size (default).\n\n   ALTSCN            Set terminal to alternate screen size as defined\n                     in bind.\n                     ** Care must be taken to ensure terminal\n                     will support the alternate screen size as defined.\n                     INACT/ACT of LU will be required if incompatible\n                     size requested.\n\n   WRAP               Set terminal in auto wrap mode.    (default)\n\n   NOWRAP            \"JRP\" will send one screen of requested informtion,\n                     'MORE DATA....' will appear in lower left of\n                     terminal then wait for further intervention from\n                     \"JRP\" operator(enter). No \"JRP\" commands will be\n                     accepted before the 'MORE DATA....' condition is\n                     cleared.\n\n   NOUNSOL           No \"JRP\" unsolicited information will be sent to\n                     this terminal.           (default)\n\n   UNSOL             \"JRP\" will send any unsolicited printer status\n                     information to this terminal.\n                  **NOTE: UNSOL and NOWRAP are mutually exclusive.\n                     One must be reversed before the other is accepted.\n\n   LOGON aaaaaaaa     This command will allow direct logon from \"JRP\"\n                     control terminal to aaaaaaaa(any valid VTAM applid\n                     as specified in label of VTAM appl defination).\n\n   LOGOFF             Terminate this \"JRP\" control terminal session.\n\n   CLOSE              Requests that \"JRP\" close after completing all\n                     current print activity.(This may take a while and\n                     all control terminal support is terminated at this\n                     point). CLOSE and ICLOSE commands are irreversible\n                 *NOTE: If JRP is canceled by MVS operator output\n                        currently printing or retrying on a \"JRP\"\n                        printer will be lost!!!!!!!\n\n   ICLOSE             Requests that \"JRP\" reque current print activity\n                     to JES2,  terminate all printer sessions and\n                     complete normal close-down. This is the recommended\n                     close procedure because it takes a relatively short\n                     period of time to complete(normally up to 5 minutes\n                     with 50 printers defined). All \"JRP\" control\n                     terminal sessions are terminated after close or\n                     ICLOSE commands are issued.\n                     CLOSE and ICLOSE commands are irreversible.\n                 *NOTE: If JRP is canceled by MVS operator, output\n                        currently printing or retrying on a \"JRP\"\n                        printer will be lost!!!!!!!\n\n   CANCEL llllllll    This command will terminate a \"JRP\" control\n                     terminal for specified VTAM LUid.\n                     llllllll = VTAM LUid of \"JRP\" control terminal.\n\n   RESET              This command will terminate all \"JRP\"\n                     control terminal sessions, reset control terminal\n                     acb and reallow logons to \"JRP\" control terminals.\n\n1                                                            Page 6\n\n  $Dxxxxxxxx         Display the status of printer xxxxxxxx\n\n  $DU                Display the status of all printers\n\n  $Sxxxxxxxx         Resume printer xxxxxxxx's eligibility to\n                     receive output after a JRP $P command or error\n                     condition has made it ineligible\n\n  $SU                Resume all printers eligibility to receive\n                     output after a JRP $PU command or error condition\n                     have made them ineligible\n\n  $Pxxxxxxxx         Remove eligibility of printer xxxxxxxx to receive\n                     output after the current print activity has\n                     completed on that device\n\n  $PU                Remove eligiblity of all printers to receive\n                     output after current activity on each device\n                     has completed\n\n  $Exxxxxxxx         Restart activity on printer xxxxxxxx\n\n  $Cxxxxxxxx         Cancel the output on printer xxxx\n                     The same * result may be obtained on an 'SCS'\n                     equipped printer by pushing:\n                        1. Hold print\n                        2. Cancel print\n                        3. Enable print\n                            * The printer status code, 59, must be\n                              displayed on the printer before cancel\n                              will be accepted by JRP\n\n  $Txxxxxxxx         Change the initial attributes for printer xxxxxxxx.\n                     See 'attribute specification' for the list of\n                     attributes that may be modified with the JRP\n                     '$T' command.\n\n\n1 Attribute Specification                                     Page 7\n\n   Control Card Rules.\n   1. Printer name(1-8 characters) must begin in column 1 and\n     in column 1 card 1 of a continuation series(if continuation is\n      used).\n\n   2. Keyword parameters(to include continuation card if used) must\n     begin in column 10.\n\n   3. Continuation character must be in column 72 and a blank must\n     precede continuation character if continuation is used.\n\n   The following keywords are valid to define printer attributes\n   in the JRPdata file for start-up or as modifies after\n   initialization using the \"JRP\" $T command . *See \"JRP commands\"\n\n      LPP=          Specify the number of Lines Per Page for\n                    'SCS=N' printers only. The default is 68\n                    lines per Page for 12 inch paper at 8 LPI\n           default: LPP=68\n\n      LU=           The VTAM logical unit name for the printer\n                    having a maximum of 8 characters. The LU\n                    name must be specified at initialization;\n           default: None. *Required at initialization\n\n       R=           Specifies the RJE destination id. If RJE\n                    names are to be used, they must be specified at\n                    initialization time.\n           default: LOCAL.\n\n       LGMD=        The logmode entry name applicable for this printer,\n                    a maximum of eight characters may be used.\n           default: VTAM default on VTAM LBUILD, or first in mode\n                    table if not defined on printer LBUILD definition.\n                  *NOTE; If LGMD is specified RELRQ exits will not\n                         be invoked.\n\n       MLIN=        The maximum number of lines to be printed on this\n                    device for any one job or TSO spinnoff output.\n                    When this limit is reached output will be\n                    terminated and output will be purged from queue.\n           default: 9999 lines\n\n       SCS=         Set to 'Y' or 'N' to specify if a printer is\n                    SCS or DSC equipped.\n           default: SCS=Y\n\n                    Note: If SCS equipped, printer must be a SNA device\n                    and can not be a local device. If 'SCS=Y' is\n                    specified, the logmode must also be for a SNA\n                    printer. If 'SCS=N' is specified, the logmode\n                    must be for a non-SNA device. SCS=N will work for\n                    either SNA or non-SNA, but SNA features will\n                    not be available (JRP cancel key and bracket\n                    protocol). See JRP SNA features for more details.\n\n       F=           Specify a four character form number. This\n                    option is not required, and is not recommended.\n           default: None.\n\n       C=           Specify the output class destination. A maximum\n                    of 8 one character output class search arguments\n                    may be defined with no deliminating comma's.\n           default: None.\n\n\n1 Printer Status                                              Page 8\n\n\n      The JRP '$Dxxxx' or the '$DU' command will display the printer\n      status to the operator console. The meaning of each of these\n      is as follows:\n\n   ACTIVE       The printer is currently active; the jobname and\n                jobnumber will also be displayed.\n\n   INACTIVE     The printer is currently idle and is available to\n                other VTAM applications.\n\n   DRAINED      The printer is not eligible to receive work due to\n                a previous JRP '$P' command.  The JRP '$S' command\n                would restore eligiblity.\n\n   DRAINING     The printer will be ineligible to receive work after\n                the current activity has completed on the specified\n                device.The JRP '$S' command would restore eligibility.\n\n   RETRYING     This printer is in retry status. Attempts at contacting\n                this device have been unsuccessful thus far, though\n                it\"s retry limit has not been reached.\n\n   RETRYLM      The 'retry limit' has been met due to I/O errors on\n                that device, and the device is now in an ineligible\n                status.Issue the JRP '$S' command after correcting the\n                hardware problem (power off, hold, cable connection,\n                etc.) to restore the eligible status.\n\n   ABENDtccc    This printer subtask at some point encountered\n                a problem leading to an abend. This status is\n                posted as such. JRP '$S' command must be issued for\n                this printer to restore output eligibility.\n       t   ==>  Abend type S(System) U(User)\n       ccc ==>  Abend code(i.e. 0C4)\n\n\n1 JRP Use of                                                  Page 9\n   there are a number of ways to utilize JRP\"s ability to interface\n   with JES2. One is to specify output class and special form number,\n   and use those as the specification on output DD statement.\n          Below is the specification for JRPDATA and output DD.\n\n       EX JRP;PRT1      LU=VTS05A,SCS=N,LGMD=DSILGMOD,F=PRT1,C=A\n       EX DD  ;//SYSPRINT DD SYSOUT=(A,,PRT1)\n\n   Another use, also the recommended use is via JES nonSNA RJE id\"s.\n   this technique leaves room for the greatest flexibility and\n   effective utilization. Below is an example of JRP initialization\n   control card and uses of RJE destination.\n\n       EX JRP;  R001      LU=VTS05A,SCS=N,LGMD=DSILGMD,R=RMT001\n       EX JCL; */ ROUTE RMT001  (ROUTES ALL JOB OUTPUT TO RMT001)\n       EX DD ; //SYSPRINT DD SYSOUT=*,DEST=RMT001\n       ex TSO;  alloc sysout(a) dest(rmt001) dd(sysprint)\n\n   It is recommended, only to avoid confusion, that the printer name\n   be chosen based on it\"s Remote id(or form number if that is the\n   method of use). For example if the form number is PRT1 then the\n   printer name might be PRT1. If the destid is RMT001 then the\n   printer name might be RMT001 or R001.\n\n    ******* IMPORTANT NOTE *******\n    JRP will print a maximum of 256 characters per record\n    ******* IMPORTANT NOTE *******\n\n\n1 JRP SNA features                                            Page 10\n\n\n   1.  Bracket Protocol\n\n       Bracket protocol will prevent the interleaving of\n       unsolicited output, requested with the local print key,\n       and JRP output.\n\n   2. Cancel key\n\n       a. Push hold print\n               cancel print\n               enable print\n\n          If the printer code, 59, is not displayed when the\n          cancel print key is pushed, complete sequence and retry.\n\n   3.   Lines Per Page\n\n        The number of print lines per Page may be controlled with\n        the line count indicator on the printer.\n1 JRP messages                                                Page 11\n\n\n\n             \"messages issued by JRP100\"\n\n   JRPI101 INITIALIZATION COMPLETE\n             All initialization of subtask dynamic area's by data\n             in initialization data-set has successfully completed\n             and JRP200 subtask has been created.\n\n   JRPI102 ICLOSE IN PROGRESS\n             All subtasks are notified that \"f JRP,ICLOSE\" has\n             been issued. Close will complete after all active print\n             has been requeued and subtasks terminated.\n\n   JRPI103 close in progress\n             All subtasks are notified that \"f JRP,close\" has\n             been issued. Close will complete after all active print\n             has completed and subtasks terminated.\n\n   JRPI104 SHUTDOWN COMPLETE, ENDING.\n             \"CLOSE\" , \"ICLOSE\" or abend processing has completed and\n             all subtasks have terminated. JRP is terminating.\n\n   JRPE100 ACB NOT AVAILABLE.\n             JRP\"s ACB is in use, not active, or not defined\n             abend u001 will follow.\n\n   JRPE101 JRP200 ERROR ENCOUNTERED\n             JRP200 and or JRP210 encountered some problem\n             accessing JES2 based on subsystem control block defination.\n1            \"messages issued by JRP110-JRP121\"              Page 12\n\n   JRPI110 OK / INVALID\n             This message is issued in response to any display\n             command OK ==> command accepted as entered,\n             INVALID ==> command in error(syntactically , misspelled ,\n             or invalid printer name) Consult user guide and or\n             JRP administrator for assistance.\n\n   JRPI111 xxxx ssssssssss jjjjjjjj(nnnnnnnn) F=ffff,C=cccccccc,\n   CONT'D      R=rrrrrrrr,S=Y/N,LPP=lll,MLIN=mmmm,LU=LUident ,SCS=Y/N,\n   CONT'D      LGMD=modentT,RTCD=aa,FDB2=bb,SENSE=qqqqqqqq\n\n             This status message is issued in response to any JRP\n             command to display or change a printer status.\n             xxxx     ==>  Printer name\n             ssssssss ==>  Printer status\n             jjjjjjjj ==>  Name of job active on this printer\n             nnnnnnnn ==>  Number of job active on this printer\n             ffff     ==>  Form number(SSOB search argument)\n             cccccccc ==>  Output class number(SSOB search argument)\n             rrrrrrrr ==>  Remote destination(SSOB search argument)\n        s=   y/n      ==>  Seperator Pages requested(yes(Y) or no(N))\n             lll      ==>  Lines per Page(valid only for SCS=Y)\n             mmmm     ==>  Maximum lines to be printed per job\n             LUident  ==>  VTAM symbolic name for this device\n      SCS=   Y/N      ==>  SCS equiped SNA printer(yes(Y) or no(N))\n             modeent  ==>  Modeent from logmode table if not default\n             aa       ==>  Last indicator from RPLRTNCD field\n             bb       ==>  Last indicator from RPLFDBK2 field\n             qqqqqqqq ==>  Last indicator from RPL sense field\n\n1             \"Messages Issued by JRP300\"                     Page 13\n\n   JRPI300 jjjjjjjj nnnnnnnn BEGINNING ON xxxx(LUident)\n             this message is issued when when the printer subtask\n             has been created is about to acquire the device for\n             output. where:\n             jjjjjjjj ==>  Name of job active on this printer\n             nnnnnnnn ==>  Number of job active on this printer\n             xxxx     ==>  Printer name\n             LUident  ==>  VTAM symbolic device identification\n\n   JRPI301 xxxx(LUident) output terminated by wwwwwww\n             this message is issued when when the output currently\n             active on printer is terminated(deleted from spool)\n             where:\n             xxxx     ==>  printer name\n             LUident  ==>  VTAM symbolic device identification\n             wwwwwww  ==>  he who takes responsibility for termination\n\n   JRPI302 xxxx(LUident) output restarted by wwwwwww\n             this message is issued when when the output currently\n             active on printer is restarted(stopped and requeued)\n             where:\n             xxxx     ==>  printer name\n             LUident  ==>  VTAM symbolic device identification\n             wwwwwww  ==>  he who takes responsibility for restart\n\n   JRPI305 xxxx output requeued , rtncd=rr ,fdbk2=ff sense=ssss\n             twenty consecutive VTAM error have been encountered\n             attempting to open or write to this printer.\n             the output is requeued. Check codes in VTAM programmers gd.\n             correct problem if required.JRP $S must be issued to mark\n             printer with \"retrylm\" status eligible for processing.\n             where:\n             xxxx     ==>  printer name\n             rr       ==>  value from VTAM rpl rtncd field\n             ff       ==>  value from VTAM rpl fdbk2 field\n             ssss     ==>  sense information from VTAM rpl\n             xx       ==> gencb return code\n             *  JRP $Sxxxxxxxx must be issued to mark printer in\n                         \"retrylm\" status eligible for processing.\n\n   JRPe300   nib gencb failed r15=xx\n             nib control block generation failed register 15 contains\n             return code which is documented in acf VTAM programmers gd.\n             where:\n             xx       ==> gencb return code\n                      * user abend code 4 acompanies this message\n\n   JRPE301   RPL GENCB FAILED R15=XX\n             rpl control block generation failed register 15 contains\n             return code which is documented in acf VTAM programmers gd.\n             where:\n             xx       ==> gencb return code\n                      * user abend code 4 acompanies this message\n\n1             \"JRP User ABEND Codes\"                          Page 14\n\n  U200        JRP200 has recognized a failure by JRP210\n             consult JRP messages for reason.\n  U220        JRP220 has failed in dynamic allocation\n             consult JRP system programmer.\n  U300        JRP300 has failed for a device. This device will\n             not be useable by JRP until JRP restart.\n1             \"JRP Module Flow\"                               Page 15\n\n                            --------\n                           | JRP100 |\n                            --------\n                   _____________|______________\n                 |                              |\n              --------                       --------\n             | JRP120 |                     | JRP200 |\n              --------                       --------\n         ________|_______               _________|___________\n        |                |             |         |           |\n     --------        --------      --------   --------   --------\n    | JRP122 |      | JRP121 |    | JRP210 | | JRP220 | | JRP300 |\n     --------        --------      --------   --------   --------\n        |                                                   |\n    ---------                                            --------\n   | JRP123  |                                          | JRP310 |\n    ---------                                            --------\n1  JRP Module Descriptions                               Page 16\n\n   JRP100           Main driver module\n\n                    This module first reads the JRP initialization\n                    control cards, getmains a dynamic region for the\n                    printer task defined by the control card, sets\n                    all printer defaults, calls JRP110 to verify\n                    control card parameters and resets printer defaults\n                    as defined by the control cards. It then builds\n                    and opens VTAM printer ACB. Next subtasks JRP200\n                    (JES2 processed output interface) and JRP120(JRP\n                    control terminal supervisor). At this point JRP100\n                    issues the 'JRP initialization complete' message.\n                    Now the only function of JRP100 is to\n                    wait and supervise orderly shutdown\n                    on request from MVS console operator(P JRP)\n                    an operator of JRP's control terminal,\n                    or in case of any problems with the JES2 processed\n                    output interface.\n\n   JRP110           Control card parse module\n\n                    This module simply verifies each control card\n                    parameter and resets printer defaults as defined\n                    by the control card.\n\n   JRP200           JES2 processed sysout interface\n\n                    This module every 10 seconds sets printer output\n                    requirements in JES2 SSOB(sub system option block),\n                    calls JRP210 which presents the request for output\n                    to JES2. If JES2 passes confirmation that the\n                    output criteria specified in the JRP printer contol\n                    block has been met then JRP220(dynamic allocate/\n                    deallocate) is called. Upon successful return from\n                    JRP220 a subtask is created as JRP300(printer i/o).\n\n   JRP210           JES2 processed sysout secondary interface\n\n                    This module presents the SSOB created by JRP200\n                    to JES2 and passes a return code based on the\n                    results of that presentation back to JRP200.\n\n   JRP220           Dynamic allocate/deallocate module\n\n                    This module dynamically allocates or deallocates\n                    based on a request from JRP200 a spool data-set\n                    and sets the data-set disposition as directed\n                    by the JRP printer control block.\n\n1  JRP300           Printer I/O module                    Page 17\n\n                    This module builds and initializes the printers\n                    VTAM control blocks. Opens the spool data-set\n                    previously confirmed by JRP200 and allocated by\n                    JRP220. Begins a session with the designated\n                    printer, calls JRP310 to notify JRP control terminal\n                    operator(who has requested unsolicited output) that\n                    output is about to begin on this printer, QSAM reads\n                    the spool data-set until the printer buffer is full,\n                    the sends the data to the printer via 3270 VTAM\n                    protocol. Upon negative response from VTAM the\n                    printer status control block fields are set as\n                    follows. Status='retrying',  rtncd, fdbk2 and\n                    sense= last RPL field settings, retry counter is\n                    incremented. The operation is retried until the\n                    retry limit of 100(in most cases) has been exausted.\n                    The read and write procedure is repeated until\n                    1. End of file  2. $C or $E from JRP operator\n                    3. Notification of closedown.\n                    Printer is freed and control is returned to JRP200\n\n   JRP310           JRP unsolicited message processor.\n\n                    This module upon request from JRP300 send printer\n                    status  messages to JRP terminal operators who have\n                    requested unsolicited output.\n\n   JRP120           JRP control terminal driver\n\n                    This module accepts logons from 3270 type terminals\n                    calls JRP122(logon verification processor) and\n                    routes JRP commands from each control terminal to\n                    JRP121 for processing.\n                    Commands \"ICLOSE\", \"CLOSE\", \"LOGON\", \"LOGOFF\" are\n                    processed directly by JRP120 and are not routed to\n                    JRP121.\n\n   JRP121           JRP control terminal command processor\n\n                    This module parses all commands routed to it by\n                    JRP120 and modifies the printer control block as\n                    requested, formats major printer control block\n                    fields and displays to JRP terminal operator.\n\n\n   JRP122           JRP logon verification processor\n\n                    This module requests logon userid and password\n                    verifying that the fields have been filled in,\n                    calls JRP123(JRP security exit) then accepts the\n                    session, requests additional information or rejects\n                    the session based on return code from JRP123.\n\n   JRP123           JRP user security exit.\n\n                    This module is a dummy module to be coded by user.\n                    according to standards outlined in source code.\n1 Improvements to JES2 remote printers (JRP)                  Page 18\n0   This product was enhanced in 1993 by Ronald Tansky of Webcraft Inc..\n    In 1999 it was further improved by David Cartwright of AGCO Ltd.  at\n    Desford in Leicestershire, England.\n    In each case the original source member was given a suffix of \"OL\".\n0   The main thrust of the AGCO improvements was to allow printer\n    formatting statements to be sent at the start and end of each\n    print file.  This allows IDATA protocol converters to be\n    programmed to print listings in Landscape mode on A4 paper.\n    Although some changes were made in the original source members\n    (flagged *DHC* at the end of the statement) the bulk of the\n    additional code is included via COPY statements.  The members to\n    be included are prefixed \"DHC\".  Macros from file 172 of the CBT\n    tape are required to assemble \"JRP\" with these mods.\n    AGCO were running OS/390 2.6 in 1999.\n- STOP/MODIFY processing\n0  AGCO eliminated the WTOR which was used to terminate JRP. Instead\n   the Operator may issue a normal MVS stoP command;   P  JRP\n   This will trigger ICLOSE processing.  ICLOSE may still be issued\n   from a JRP Control Terminal.\n- JRPHEAD DD Statement\n0  The AGCO modifications require an additional DDcard in the JRP proc.\n   The JRPHEAD DDcard defines a pds which holds the header and trailer\n   members as specified in JRPDATA initialisation statements. The\n   records must be variable length and the first character must be a\n   Machine print control character (VBM format).\n   If the first character is an asterisk (\"*\") instead of a valid\n   Machine control character then the record is ignored. This allows\n   comments to document the contents of each member.\n0  AGCO further enhanced the program in January 2001 to use Cross Domain\n   printers. The updates turned out to be unnecessary, the problem was\n   solved by simply using the resource name, not ACBNAME.\n1 New Attributes                                              Page 19\n0  The following keywords are valid to define printer attributes\n   in the JRPDATA file for start-up or as modifies after\n   initialization using the \"JRP\" $T command . *See \"JRP commands\"\n0     *             Statements in JRPDATA beginning with an\n                    asterisk (\"*\") are ignored.  This allows comments\n                    to be used to document the contents of JRPDATA.\n           default: None\n0     NETID=        Specifies the Network Name for a cross-domain printer\n      N=            Normal VTAM searching should find the cevice, but\n                    this keyword is provided for special cases.\n           default: None\n0     HEAD=         Specifies the name of a member of the pds allocated\n      H=            to the DDname JRPHEAD which is to be output at the\n                    start of a print dataset. JRPHEAD must be VBM format\n                    If this parameter is blank or \"NONE\", no extra data\n                    is sent to the printer.\n           default: None\n0     TAIL=         Specifies the name of a member of the pds allocated\n      T=            to the DDname JRPHEAD which is to be output at the\n                    end of a print dataset. JRPHEAD must be VBM format\n                    If this parameter is blank or \"NONE\", no extra data\n                    is sent to the printer.\n           default: None\n0     TRAN=         If this is specified as \"N\" then no translation of\n                    output is performed.  This allows non-printable\n                    control characters to be output, but it is the\n                    responsibility of the User to ensure that no control\n                    data is sent that will corrupt VTAM or the printer.\n                    In future it is hoped to use the code added to\n                    JRP300 to allow members of a pds to be loaded as\n                    translation tables if desired.\n           default: None\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOCOL": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x89\\x00_\\x00\\x99\\x17o\\x08\\x17\\x02\\xa3\\x02\\xa3\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1999-06-25T08:17:00", "lines": 675, "newlines": 675, "modlines": 0, "user": "JRP"}, "text": "1\n\n\n\n\n\n\n\n\n\n\n\n 7         JJJJJJJJJJJJJ      RRRRRRRRRRRRR            PPPPPPPPPPPP\n 7        JJJJJJJJJJJJJ      RRRRRRRRRRRRRRR          PPPPPRPPPPPPPP\n 7            JJJJJ         RRRRRR    RRRRRR         PPPPP    PPPPPP\n 7           JJJJJ         RRRRRR     RRRRRR        PPPPP     PPPPPP\n 7          JJJJJ         RRRRRRRRRRRRRRRR         PPPPPPPPPPPPPPP\n 7         JJJJJES2      RRRRRRRRRRRRRRRR         PPPPPPPPPPPPPP\n 7JJJJJ   JJJJJ         RRRRR        REMOTE      PPPPP\n 7JJJJJ  JJJJJ         RRRRR         RRRR       PPPPPRINT\n 7 JJJJJJJJJJ         RRRRR          RRRR      PPPPP\n 7  JJJJJJJ          RRRRR           RRRRR    PPPPP\n17TABLE OF CONTENTS\n    CONTENT                                 PAGE\n\n    INTRODUCTION............................1\n    \"JRP\" INSTALLATION......................2\n    \"JRP\" STARTUP...........................3\n    \"JRP\" SHUTDOWN..........................3\n    \"JRP\" CONTROL TERMINALS.................4\n    \"JRP\" COMMANDS..........................5\n    \"JRP\" ATTRIBUTE SPECIFICATION...........7\n    \"JRP\" PRINTER STATUS....................8\n    \"JRP\" USE OF............................9\n    \"JRP\" SNA FEATURES......................10\n    \"JRP\" MESSAGES..........................11\n    \"JRP\" USER ABEND CODES..................14\n    \"JRP\" MODULE FLOW ......................15\n    \"JRP\" MODULE DESCRIPTIONS...............16\n17INTRODUCING JRP(JES2 REMOTE PRINTERS)                       PAGE 1\n\n        THIS PRODUCT WAS DESIGNED AND WRITTEN WITH THE INTENT OF\n    INCREASING USER AS WELL AS PROGRAMMER PRODUCTIVITY. IT(\"JRP\")\n    MAKES USE OF 3270 PRINTER DEVICES TO PRINT SPOOLED JES2 OUTPUT.\n    OUTPUT DEVICES ARE DEFINED TO \"JRP\" VIA A SEQUENTIAL DATA SET.\n    EACH CONTROL CARD IN THIS DATA SET DESCRIBES THE ATTRIBUTES\n    OF ONE PRINTER.\n       AFTER \"JRP\" INITIALIZATION,A SUBSYSTEM REQUEST IS ISSUED TO\n    JES2 BASED ON EACH PRINTERS DESCRIPTION. IF JES2 CONFIRMS THAT\n    OUTPUT IS AVAILABLE FOR THE PRINTER DESCRIBED,A SUBTASK IS CREATED,\n    USING THE ATTRIBUTES DEFINED FOR THAT PARTICULAR DEVICE.\n    THE SPOOL DATASET IS READ, BUFFERED, THEN WRITTEN TO THE PRINTER\n    VIA \"VTAM\".\n\n    ******* IMPORTANT NOTE *******\n    JRP WILL PRINT A MAXIMUM OF 256 CHARACTERS PER RECORD\n    ******* IMPORTANT NOTE *******\n17INSTALLATION PAGE 2\n\n    1.  UNLOAD FILE 1 (ONE) TO 80/3120 DATA PDS:\n\n        //STEP1   EXEC PGM=IEBCOPY\n        //SYSUT1    DD DSN=JRPTP,UNIT=6250,LABEL=(1,NL),\n        //             DISP=(OLD,KEEP),VOL=SER=JRP\n        //SYSUT2    DD DSN=\"JRP.DATA\",DISP=(,CATLG),VOL=SER=\"VOLSER\",\n        //          UNIT=\"DEVTYP\",SPACE=(TRK,(20,2,5))\n        //SYSPRINT  DD SYSOUT=A\n        //SYSIN     DD *\n          COPY INDD=SYSUT1,OUTDD=SYSUT2\n        /*\n\n    2.  TAYLOR PROC JRP FROM JRP.DATA LIB FOR YOUR APF AUTHORIZED\n         STEPLIB OR REMOVE STEPLIB AND LET LINKLIST DO IT.\n\n    3.  EDIT JRPINST MEMBER TO SPECIFY YOUR LIBRARY NAMES FOR\n        SYSLIB, SYSLMOD... FOR JRPRINT BE SURE TO SPECIFY A\n        LINKLIST LIBRARY FOR ACCESSIBILITY FROM TSO.\n\n    4.  SUBMIT JRPINST TO BATCH FOR ASSEMBLY AND LINK.\n        NOTE** REASSEMBLE JRP 200,210,220 FOR JES2 UPGRADE.\n\n    5.  COPY MEMBER JRPRINTH TO SYS1.HELP CHANGING NAME TO JRPRINT\n\n    6.  EDIT AND FORMAT THE \"JRP\" INITIALIZATION DATA-SET TO\n        DEFINE THE REMOTE PRINTERS IN YOUR ENVIRONMENT:\n\n         COL 1-8    :    PRINTER NAME(1-8 CHARACTERS)\n         COL 10-72  :    PRINTER ATTRIBUTES AS DESCRIBED IN SECTION,\n                         'ATTRIBUTE SPECIFICATION'.  THE OPERANDS\n                         ARE SPECIFIED WITH KEYWORDS, AND MAY BE\n                         ENTERED IN ANY ORDER.\n                   *NOTE CONTROL INFORMATION FOR EACH PRINTER\n                    MAY BE CONTAINED IN CONTINUATION CARDS\n                    INCLUDING ,(COMMA) AFTER LAST PARAMETER\n                    ON CARD \"X\" IN COLUMN 72 AND CONTINUATION\n                    MUST BEGIN IN COLUMN 10.\n\n          EX.:\n  COL:    1        10                                                72\n          RMT001   R=RMT001,SCS=N,LGMD=NSNAPRT,LU=LU0A0,S=N,         X\n                   MLIN=0,F=A100,C=A,LPP=068,\n          R002     R=RMT002,LGMD=SCSPRT,C=A,LU=SNA05B\n\n      7.  ADD THE VTAM NODE'S FOR JRP AND \"JRP\" CONTROL TERMINALS\n           AS FOLLOWS;\n\n          JRPA     APPL   ACBNAME=JRP,AUTH=ACQ\n          CJRPA    APPL   ACBNAME=CJRP,AUTH=PASS\n\n\n\n17JRP STARTUP                                                 PAGE 3\n\n    AFTER ALL UPDATES HAVE BEEN MADE TO JRPDATA, JRP MAY BE\n    INITIATED FROM THE OPERATORS CONSOLE:\n\n      ENTER:  S JRP\n      RESP:   JRPI101 INITIALIZATION COMPLETE\n      WTOR:   XX JRP100I ENTER \"ICLOSE\" TO SHUT DOWN\n\n 7JRP SHUTDOWN\n\n    TO HALT AND REQUEUE ALL CURRENT PRINTING ACTIVITY AND\n    TERMINATE JRP FROM MVS OPERATOR CONSOLE ENTER:\n\n       ENTER:  R XX,ICLOSE\n       RESP:   JRPI102 ICLOSE IN PROGRESS\n               JRPI104 SHUTDOWN COMPLETE, ENDING\n\n\n\n17JRP CONTROL TERMINALS                                     PAGE 4\n\n        \"JRP\" SUPPORTS VTAM SNA AND NONSNA TERMINALS AS \"JRP\"\n    CONTROL TERMINALS. A MAXIMUM OF 25(TWENTY FIVE) TERMINALS ARE\n    SUPPORT SIMULTANIOUSLY. ALL FUNCTIONS REQUIRED TO SUPPORT \"JRPS\"\n    PRINTER DEVICES ARE AVAILIBLE FROM A \"JRP\" CONTROL TERMINAL.\n    USE OF THESE CONTROL TERMINALS IS DESCRIBED BELOW ALTHOUGH\n    PRINTER CONTROL COMMANDS ARE DESCRIBED IN SECTION \"JRP COMMANDS\"\n\n     1. LOGON TO JRP CONTROL TERMINAL(USS TABLE LOGON IS PREFERABLE).\n        OR  'LOGON APPLID(CJRPA)'\n     2. ENTER USERID AND PASSWORD.(THIS IS ONLY MEANINGFULL TO \"JRP\"\n        IF JRP123 SECURITY EXIT IS CODED ALTHOUGH AT LEAST ON CHARECTER\n        IN USERID AND PASSWORD FIELD IS REQUIRED.)\n     3. AFTER USERID AND PASSWORD ACCEPTANCE THE COMMAND SCREEN IS\n        DISPLAYED. LUID IN UPPER LEFT COMMAND LINE ON LOWER LEFT.\n        \"JRP\" CONTROL TERMINAL OR PRINTER COMMANDS MAY BE ENTERED NOW.\n17JRP COMMANDS                                                PAGE 5\n\n   THE FOLLOWING COMMANDS ARE ARE ISSUED FROM A \"JRP\" CONTROL TERMINAL\n\n\n   PRISCN            SET TERMINAL TO 3278 MOD2 SCREEN SIZE (DEFAULT).\n\n   ALTSCN            SET TERMINAL TO ALTERNATE SCREEN SIZE AS DEFINED\n                     IN BIND.\n                     ** CARE MUST BE TAKEN TO ENSURE TERMINAL\n                     WILL SUPPORT THE ALTERNATE SCREEN SIZE AS DEFINED.\n                     INACT/ACT OF LU WILL BE REQUIRED IF INCOMPATIBLE\n                     SIZE REQUESTED.\n\n   WRAP               SET TERMINAL IN AUTO WRAP MODE.    (DEFAULT)\n\n   NOWRAP            \"JRP\" WILL SEND ONE SCREEN OF REQUESTED INFORMTION,\n                     'MORE DATA....' WILL APPEAR IN LOWER LEFT OF\n                     TERMINAL THEN WAIT FOR FURTHER INTERVENTION FROM\n                     \"JRP\" OPERATOR(ENTER). NO \"JRP\" COMMANDS WILL BE\n                     ACCEPTED BEFORE THE 'MORE DATA....' CONDITION IS\n                     CLEARED.\n\n   NOUNSOL           NO \"JRP\" UNSOLICITED INFORMATION WILL BE SENT TO\n                     THIS TERMINAL.           (DEFAULT)\n\n   UNSOL             \"JRP\" WILL SEND ANY UNSOLICITED PRINTER STATUS\n                     INFORMATION TO THIS TERMINAL.\n                  **NOTE: UNSOL AND NOWRAP ARE MUTUALLY EXCLUSIVE.\n                     ONE MUST BE REVERSED BEFORE THE OTHER IS ACCEPTED.\n\n   LOGON AAAAAAAA     THIS COMMAND WILL ALLOW DIRECT LOGON FROM \"JRP\"\n                     CONTROL TERMINAL TO AAAAAAAA(ANY VALID VTAM APPLID\n                     AS SPECIFIED IN LABEL OF VTAM APPL DEFINATION).\n\n   LOGOFF             TERMINATE THIS \"JRP\" CONTROL TERMINAL SESSION.\n\n   CLOSE              REQUESTS THAT \"JRP\" CLOSE AFTER COMPLETING ALL\n                     CURRENT PRINT ACTIVITY.(THIS MAY TAKE A WHILE AND\n                     ALL CONTROL TERMINAL SUPPORT IS TERMINATED AT THIS\n                     POINT). CLOSE AND ICLOSE COMMANDS ARE IRREVERSIBLE\n                 *NOTE: IF JRP IS CANCELED BY MVS OPERATOR OUTPUT\n                        CURRENTLY PRINTING OR RETRYING ON A \"JRP\"\n                        PRINTER WILL BE LOST!!!!!!!\n\n   ICLOSE             REQUESTS THAT \"JRP\" REQUE CURRENT PRINT ACTIVITY\n                     TO JES2,  TERMINATE ALL PRINTER SESSIONS AND\n                     COMPLETE NORMAL CLOSE-DOWN. THIS IS THE RECOMMENDED\n                     CLOSE PROCEDURE BECAUSE IT TAKES A RELATIVELY SHORT\n                     PERIOD OF TIME TO COMPLETE(NORMALLY UP TO 5 MINUTES\n                     WITH 50 PRINTERS DEFINED). ALL \"JRP\" CONTROL\n                     TERMINAL SESSIONS ARE TERMINATED AFTER CLOSE OR\n                     ICLOSE COMMANDS ARE ISSUED.\n                     CLOSE AND ICLOSE COMMANDS ARE IRREVERSIBLE.\n                 *NOTE: IF JRP IS CANCELED BY MVS OPERATOR OUTPUT\n                        CURRENTLY PRINTING OR RETRYING ON A \"JRP\"\n                        PRINTER WILL BE LOST!!!!!!!\n\n   CANCEL LLLLLLLL    THIS COMMAND WILL TERMINATE A \"JRP\" CONTROL\n                     TERMINAL FOR SPECIFIED VTAM LUID.\n                     LLLLLLLL = VTAM LUID OF \"JRP\" CONTROL TERMINAL.\n\n   RESET              THIS COMMAND WILL TERMINATE ALL \"JRP\"\n                     CONTROL TERMINAL SESSIONS, RESET CONTROL TERMINAL\n                     ACB AND REALLOW LOGONS TO \"JRP\" CONTROL TERMINALS.\n\n17                                                           PAGE 6\n\n  $DXXXXXXXX         DISPLAY THE STATUS OF PRINTER XXXXXXXX\n\n  $DU                DISPLAY THE STATUS OF ALL PRINTERS\n\n  $SXXXXXXXX         RESUME PRINTER XXXXXXXX'S ELIGIBILITY TO\n                     RECEIVE OUTPUT AFTER A JRP $P COMMAND OR ERROR\n                     CONDITION HAS MADE IT INELIGIBLE\n\n  $SU                RESUME ALL PRINTERS ELIGIBILITY TO RECEIVE\n                     OUTPUT AFTER A JRP $PU COMMAND OR ERROR CONDITION\n                     HAVE MADE THEM INELIGIBLE\n\n  $PXXXXXXXX         REMOVE ELIGIBILITY OF PRINTER XXXXXXXX TO RECEIVE\n                     OUTPUT AFTER THE CURRENT PRINT ACTIVITY HAS\n                     COMPLETED ON THAT DEVICE\n\n  $PU                REMOVE ELIGIBLITY OF ALL PRINTERS TO RECEIVE\n                     OUTPUT AFTER CURRENT ACTIVITY ON EACH DEVICE\n                     HAS COMPLETED\n\n  $EXXXXXXXX         RESTART ACTIVITY ON PRINTER XXXXXXXX\n\n  $CXXXXXXXX         CANCEL THE OUTPUT ON PRINTER XXXX\n                     THE SAME * RESULT MAY BE OBTAINED ON AN 'SCS'\n                     EQUIPPED PRINTER BY PUSHING:\n                        1.  HOLD PRINT\n                        2.  CANCEL PRINT\n                        3.  ENABLE PRINT\n                            * THE PRINTER STATUS CODE, 59, MUST BE\n                              DISPLAYED ON THE PRINTER BEFORE CANCEL\n                              WILL BE ACCEPTED BY JRP\n\n  $TXXXXXXXX         CHANGE THE INITIAL ATTRIBUTES FOR PRINTER XXXXXXXX.\n                     SEE 'ATTRIBUTE SPECIFICATION' FOR THE LIST OF\n                     ATTRIBUTES THAT MAY BE MODIFIED WITH THE JRP\n                     '$T' COMMAND.\n\n\n17ATTRIBUTE SPECIFICATION                                     PAGE 7\n\n   CONTROL CARD RULES.\n   1. PRINTER NAME(1-8 CHARACTERS) MUST BEGIN IN COLUMN 1 AND\n     IN COLUMN 1 CARD 1 OF A CONTINUATION SERIES(IF CONTINUATION IS\n      USED).\n\n   2. KEYWORD PARAMETERS(TO INCLUDE CONTINUATION CARD IF USED) MUST\n     BEGIN IN COLUMN 10.\n\n   3. CONTINUATION CHARACTER MUST BE IN COLUMN 72 AND A BLANK MUST\n     PRECEDE CONTINUATION CHARACTER IF CONTINUATION IS USED.\n\n   THE FOLLOWING KEYWORDS ARE VALID TO DEFINE PRINTER ATTRIBUTES\n   IN THE JRPDATA FILE FOR START-UP OR AS MODIFIES AFTER\n   INITIALIZATION USING THE \"JRP\" $T COMMAND . *SEE \"JRP COMMANDS\"\n\n      LPP=          SPECIIFY THE NUMBER OF LINES PER PAGE FOR\n                    'SCS=N' PRINTERS ONLY.  THE DEFAULT IS 68\n                    LINES PER PAGE FOR 12 INCH PAPER AT 8 LINES\n                    PER INCH\n           DEFAULT: LPP=68\n\n      LU=           THE VTAM LOGICAL UNIT NAME FOR THE PRINTER\n                    HAVING A MAXIMUM OF 8 CHARACTERS.  THE LU\n                    NAME MUST BE SPECIFIED AT INITIALIZATION;\n           DEFAULT: NONE. *REQUIRED AT INITIALIZATION\n\n       R=           SPECIFIES THE RJE DESTINATION ID. IF RJE\n                    NAMES ARE TO BE USED, THEY MUST BE SPECIFIED AT\n                    INITIALIZATION TIME.\n           DEFAULT: LOCAL.\n\n       LGMD=        THE LOGMODE ENTRY NAME APPLICABLE FOR THIS PRINTER,\n                    A MAXIMUM OF EIGHT CHARACTERS MAY BE USED.\n           DEFAULT: VTAM DEFAULT ON VTAM LBUILD, OR FIRST IN MODE\n                    TABLE IF NOT DEFINED ON PRINTER LBUILD DEFINITION.\n                  *NOTE; IF LGMD IS SPECIFIED RELRQ EXITS WILL NOT\n                         BE INVOKED.\n\n       MLIN=        THE MAXIMUM NUMBER OF LINES TO BE PRINTED ON THIS\n                    DEVICE FOR ANY ONE JOB OR TSO SPINNOFF OUTPUT.\n                    WHEN THIS LIMIT IS REACHED OUTPUT WILL BE\n                    TERMINATED AND OUTPUT WILL BE PURGED FROM QUEUE.\n           DEFAULT: 9999 LINES\n\n       SCS=         SET TO 'Y' OR 'N' TO SPECIFY IF A PRINTER IS\n                    SCS OR DSC EQUIPPED.\n           DEFAULT: SCS=Y\n\n                    NOTE: IF SCS EQUIPPED, PRINTER MUST BE A SNA DEVICE\n                    AND CAN NOT BE A LOCAL DEVICE.  IF 'SCS=Y' IS\n                    SPECIFIED, THE LOGMODE MUST ALSO BE FOR A SNA\n                    PRINTER.  IF 'SCS=N' IS SPECIFIED, THE LOGMODE\n                    MUST BE FOR A NON-SNA DEVICE.  SCS=N WILL WORK FOR\n                    EITHER SNA OR NON-SNA, BUT SNA FEATURES WILL\n                    NOT BE AVAILABLE (JRP CANCEL KEY AND BRACKET\n                    PROTOCOL). SEE JRP SNA FEATURES FOR MORE DETAILS.\n\n       F=           SPECIFY A FOUR CHARACTER FORM NUMBER.  THIS\n                    OPTION IS NOT REQUIRED, AND IS NOT RECOMMENDED.\n           DEFAULT: NONE.\n\n       C=           SPECIFY THE OUTPUT CLASS DESTINATION.  A MAXIMUM\n                    OF 8 ONE CHARACTER OUTPUT CLASS SEARCH ARGUMENTS\n                    MAY BE DEFINED WITH NO DELIMINATING COMMA'S.\n           DEFAULT: NONE.\n\n\n17PRINTER STATUS                                              PAGE 8\n\n\n      THE JRP '$DXXXX' OR THE '$DU' COMMAND WILL DISPLAY THE PRINTER\n      STATUS TO THE OPERATOR CONSOLE.  THE MEANING OF EACH OF THESE\n      IS AS FOLLOWS:\n\n   ACTIVE       THE PRINTER IS CURRENTLY ACTIVE; THE JOBNAME AND\n                JOBNUMBER WILL ALSO BE DISPLAYED.\n\n   INACTIVE     THE PRINTER IS CURRENTLY IDLE AND IS AVAILABLE TO\n                OTHER VTAM APPLICATIONS.\n\n   DRAINED      THE PRINTER IS NOT ELIGIBLE TO RECEIVE WORK DUE TO\n                A PREVIOUS JRP '$P' COMMAND.   THE JRP '$S' COMMAND\n                WOULD RESTORE ELIGIBLITY.\n\n   DRAINING     THE PRINTER WILL BE INELIGIBLE TO RECEIVE WORK AFTER\n                THE CURRENT ACTIVITY HAS COMPLETED ON THE SPECIFIED\n                DEVICE.THE JRP '$S' COMMAND WOULD RESTORE ELIGIBILITY.\n\n   RETRYING     THIS PRINTER IS IN RETRY STATUS. ATTEMPTS AT CONTACTING\n                THIS DEVICE HAVE BEEN UNSUCCESSFUL THUS FAR, THOUGH\n                IT\"S RETRY LIMIT HAS NOT BEEN REACHED.\n\n   RETRYLM      THE 'RETRY LIMIT' HAS BEEN MET DUE TO I/O ERRORS ON\n                THAT DEVICE, AND THE DEVICE IS NOW IN AN INELIGIBLE\n                STATUS.ISSUE THE JRP '$S' COMMAND AFTER CORRECTING THE\n                HARDWARE PROBLEM (POWER OFF, HOLD, CABLE CONNECTION,\n                ETC.) TO RESTORE THE ELIGIBLE STATUS.\n\n   ABENDTCCC    THIS PRINTER SUBTASK AT SOME POINT ENCOUNTERED\n                A PROBLEM LEADING TO AN ABEND. THIS STATUS IS\n                POSTED AS SUCH. JRP '$S' COMMAND MUST BE ISSUED FOR\n                THIS PRINTER TO RESTORE OUTPUT ELIGIBILITY.\n       T   ==>  ABEND TYPE S(SYSTEM) U(USER)\n       CCC ==>  ABEND CODE(I.E. 0C4)\n\n\n17JRP USE OF                                                  PAGE 9\n   THERE ARE A NUMBER OF WAYS TO UTILIZE JRP\"S ABILITY TO INTERFACE\n   WITH JES2. ONE IS TO SPECIFY OUTPUT CLASS AND SPECIAL FORM NUMBER,\n   AND USE THOSE AS THE SPECIFICATION ON OUTPUT DD STATEMENT.\n          BELOW IS THE SPECIFICATION FOR JRPDATA AND OUTPUT DD.\n\n       EX JRP;PRT1      LU=VTS05A,SCS=N,LGMD=DSILGMOD,F=PRT1,C=A\n       EX DD  ;//SYSPRINT DD SYSOUT=(A,,PRT1)\n\n   ANOTHER USE, ALSO THE RECOMMENDED USE IS VIA JES NONSNA RJE ID\"S.\n   THIS TECHNIQUE LEAVES ROOM FOR THE GREATEST FLEXIBILITY AND\n   EFFECTIVE UTILIZATION. BELOW IS AN EXAMPLE OF JRP INITIALIZATION\n   CONTROL CARD AND USES OF RJE DESTINATION.\n\n       EX JRP;  R001      LU=VTS05A,SCS=N,LGMD=DSILGMD,R=RMT001\n       EX JCL; */ ROUTE RMT001  (ROUTES ALL JOB OUTPUT TO RMT001)\n       EX DD ; //SYSPRINT DD SYSOUT=*,DEST=RMT001\n       EX TSO;  ALLOC SYSOUT(A) DEST(RMT001) DD(SYSPRINT)\n\n   THE RJE ID\"S YOU WISH TO USE MUST BE DEFINED TO JES2. IF YOU HAVE\n   NO RJE ID\"S DEFINED OR WISH TO DEFINE MORE A JES2 COLD START IS\n   REQUIRED.\n\n   IT IS RECOMMENDED, ONLY TO AVOID CONFUSION, THAT THE PRINTER NAME\n   BE CHOSEN BASED ON IT\"S REMOTE ID(OR FORM NUMBER IF THAT IS THE\n   METHOD OF USE). FOR EXAMPLE IF THE FORM NUMBER IS PRT1 THEN THE\n   PRINTER NAME MIGHT BE PRT1. IF THE DESTID IS RMT001 THEN THE\n   PRINTER NAME MIGHT BE RMT001 OR R001.\n\n    ******* IMPORTANT NOTE *******\n    JRP WILL PRINT A MAXIMUM OF 256 CHARACTERS PER RECORD\n    ******* IMPORTANT NOTE *******\n\n\n17JRP SNA FEATURES                                            PAGE 10\n\n\n   1.  BRACKET PROTOCOL\n\n       BRACKET PROTOCOL WILL PREVENT THE INTERLEAVING OF\n       UNSOLICITED OUTPUT, REQUESTED WITH THE LOCAL PRINT KEY,\n       AND JRP OUTPUT.\n\n   2.  CANCEL KEY\n\n       A. PUSH HOLD PRINT\n               CANCEL PRINT\n               ENABLE PRINT\n\n          IF THE PRINTER CODE, 59, IS NOT DISPLAYED WHEN THE\n          CANCEL PRINT KEY IS PUSHED, COMPLETE SEQUENCE AND RETRY.\n\n   3.   LINES PER PAGE\n\n        THE NUMBER OF PRINT LINES PER PAGE MAY BE CONTROLLED WITH\n        THE LINE COUNT INDICATOR ON THE PRINTER.\n17JRP MESSAGES                                                PAGE 11\n\n\n\n             \"MESSAGES ISSUED BY JRP100\"\n\n   JRPI101 INITIALIZATION COMPLETE\n             ALL INITIALIZATION OF SUBTASK DYNAMIC AREA'S BY DATA\n             IN INITIALIZATION DATA-SET HAS SUCCESSFULLY COMPLETED\n             AND JRP200 SUBTASK HAS BEEN CREATED.\n\n   JRPI102 ICLOSE IN PROGRESS\n             ALL SUBTASKS ARE NOTIFIED THAT \"F JRP,ICLOSE\" HAS\n             BEEN ISSUED. CLOSE WILL COMPLETE AFTER ALL ACTIVE PRINT\n             HAS BEEN REQUEUED AND SUBTASKS TERMINATED.\n\n   JRPI103 CLOSE IN PROGRESS\n             ALL SUBTASKS ARE NOTIFIED THAT \"F JRP,CLOSE\" HAS\n             BEEN ISSUED. CLOSE WILL COMPLETE AFTER ALL ACTIVE PRINT\n             HAS COMPLETED AND SUBTASKS TERMINATED.\n\n   JRPI104 SHUTDOWN COMPLETE, ENDING.\n             \"CLOSE\" , \"ICLOSE\" OR ABEND PROCESSING HAS COMPLETED AND\n             ALL SUBTASKS HAVE TERMINATED. JRP IS TERMINATING.\n\n   JRPE100 ACB NOT AVAILABLE.\n             JRP\"S ACB IS IN USE, NOT ACTIVE, OR NOT DEFINED\n             ABEND U001 WILL FOLLOW.\n\n   JRPE101 JRP200 ERROR ENCOUNTERED\n             JRP200 AND OR JRP210 ENCOUNTERED SOME PROBLEM\n             ACCESSING JES2 BASED ON SUBSYSTEM CONTROL BLOCK DEFINATION.\n17           \"MESSAGES ISSUED BY JRP110-JRP121\"              PAGE 12\n\n   JRPI110 OK / INVALID\n             THIS MESSAGE IS ISSUED IN RESPONSE TO ANY DISPLAY\n             COMMAND OK ==> COMMAND ACCEPTED AS ENTERED,\n             INVALID ==> COMMAND IN ERROR(SYNTACTICALLY , MISSPELLED ,\n             OR INVALID PRINTER NAME) CONSULT USER GUIDE AND OR\n             JRP ADMINISTRATOR FOR ASSISTANCE.\n\n   JRPI111 XXXX SSSSSSSSSS JJJJJJJJ(NNNNNNNN) F=FFFF,C=CCCCCCCC,\n   CONT'D      R=RRRRRRRR,S=Y/N,LPP=LLL,MLIN=MMMM,LU=LUIDENT ,SCS=Y/N,\n   CONT'D      LGMD=MODEENT,RTCD=AA,FDB2=BB,SENSE=QQQQQQQQ\n\n             THIS STATUS MESSAGE IS ISSUED IN RESPONSE TO ANY JRP\n             COMMAND TO DISPLAY OR CHANGE A PRINTER STATUS.\n             XXXX     ==>  PRINTER NAME\n             SSSSSSSS ==>  PRINTER STATUS\n             JJJJJJJJ ==>  NAME OF JOB ACTIVE ON THIS PRINTER\n             NNNNNNNN ==>  NUMBER OF JOB ACTIVE ON THIS PRINTER\n             FFFF     ==>  FORM NUMBER(SSOB SEARCH ARGUMENT)\n             CCCCCCCC ==>  OUTPUT CLASS NUMBER(SSOB SEARCH ARGUMENT)\n             RRRRRRRR ==>  REMOTE DESTINATION(SSOB SEARCH ARGUMENT)\n        S=   Y/N      ==>  SEPERATOR PAGES REQUESTED(YES(Y) OR NO(N))\n             LLL      ==>  LINES PER PAGE(VALID ONLY FOR SCS=N)\n             MMMM     ==>  MAXIMUM LINES TO BE PRINTED PER JOB\n             LUIDENT  ==>  VTAM SYMBOLIC NAME FOR THIS DEVICE\n      SCS=   Y/N      ==>  SCS EQUIPTED SNA PRINTER(YES(Y) RO NO(N))\n             MODEENT  ==>  MODEENT FROM LOGMODE TABLE IF NOT DEFAULT\n             AA       ==>  LAST INDICATOR FROM RPLRTNCD FIELD\n             BB       ==>  LAST INDICATOR FROM RPLFDBK2 FIELD\n             QQQQQQQQ ==>  LAST INDICATOR FROM RPL SENSE FIELD\n\n17            \"MESSAGES ISSUED BY JRP300\"                     PAGE 13\n\n   JRPI300 JJJJJJJJ NNNNNNNN BEGINNING ON XXXX(LUIDENT)\n             THIS MESSAGE IS ISSUED WHEN WHEN THE PRINTER SUBTASK\n             HAS BEEN CREATED IS ABOUT TO ACQUIRE THE DEVICE FOR\n             OUTPUT. WHERE:\n             JJJJJJJJ ==>  NAME OF JOB ACTIVE ON THIS PRINTER\n             NNNNNNNN ==>  NUMBER OF JOB ACTIVE ON THIS PRINTER\n             XXXX     ==>  PRINTER NAME\n             LUIDENT  ==>  VTAM SYMBOLIC DEVICE IDENTIFICATION\n\n   JRPI301 XXXX(LUIDENT) OUTPUT TERMINATED BY WWWWWWW\n             THIS MESSAGE IS ISSUED WHEN WHEN THE OUTPUT CURRENTLY\n             ACTIVE ON PRINTER IS TERMINATED(DELETED FROM SPOOL)\n             WHERE:\n             XXXX     ==>  PRINTER NAME\n             LUIDENT  ==>  VTAM SYMBOLIC DEVICE IDENTIFICATION\n             WWWWWWW  ==>  HE WHO TAKES RESPONSIBILITY FOR TERMINATION\n\n   JRPI302 XXXX(LUIDENT) OUTPUT RESTARTED BY WWWWWWW\n             THIS MESSAGE IS ISSUED WHEN WHEN THE OUTPUT CURRENTLY\n             ACTIVE ON PRINTER IS RESTARTED(STOPPED AND REQUEUED)\n             WHERE:\n             XXXX     ==>  PRINTER NAME\n             LUIDENT  ==>  VTAM SYMBOLIC DEVICE IDENTIFICATION\n             WWWWWWW  ==>  HE WHO TAKES RESPONSIBILITY FOR RESTART\n\n   JRPI305 XXXX OUTPUT REQUEUED , RTNCD=RR ,FDBK2=FF SENSE=SSSS\n             TWENTY CONSECUTIVE VTAM ERROR HAVE BEEN ENCOUNTERED\n             ATTEMPTING TO OPEN OR WRITE TO THIS PRINTER.\n             THE OUTPUT IS REQUEUED. CHECK CODES IN VTAM PROGRAMMERS GD.\n             CORRECT PROBLEM IF REQUIRED.JRP $S MUST BE ISSUED TO MARK\n             PRINTER WITH \"RETRYLM\" STATUS ELIGIBLE FOR PROCESSING.\n             WHERE:\n             XXXX     ==>  PRINTER NAME\n             RR       ==>  VALUE FROM VTAM RPL RTNCD FIELD\n             FF       ==>  VALUE FROM VTAM RPL FDBK2 FIELD\n             SSSS     ==>  SENSE INFORMATION FROM VTAM RPL\n             XX       ==> GENCB RETURN CODE\n             *  JRP $SXXXXXXXX MUST BE ISSUED TO MARK PRINTER IN\n                         \"RETRYLM\" STATUS ELIGIBLE FOR PROCESSING.\n\n   JRPE300   NIB GENCB FAILED R15=XX\n             NIB CONTROL BLOCK GENERATION FAILED REGISTER 15 CONTAINS\n             RETURN CODE WHICH IS DOCUMENTED IN ACF VTAM PROGRAMMERS GD.\n             WHERE:\n             XX       ==> GENCB RETURN CODE\n                      * USER ABEND CODE 4 ACOMPANIES THIS MESSAGE\n\n   JRPE301   RPL GENCB FAILED R15=XX\n             RPL CONTROL BLOCK GENERATION FAILED REGISTER 15 CONTAINS\n             RETURN CODE WHICH IS DOCUMENTED IN ACF VTAM PROGRAMMERS GD.\n             WHERE:\n             XX       ==> GENCB RETURN CODE\n                      * USER ABEND CODE 4 ACOMPANIES THIS MESSAGE\n\n17            \"JRP USER ABEND CODES\"                          PAGE 14\n\n  U200        JRP200 HAS RECOGNIZED A FAILURE BY JRP210\n             CONSULT JRP MESSAGES FOR REASON.\n  U220        JRP220 HAS FAILED IN DYNAMIC ALLOCATION\n             CONSULT JRP SYSTEM PROGRAMMER.\n  U300        JRP300 HAS FAILED FOR A DEVICE. THIS DEVICE WILL\n             NOT BE USEABLE BY JRP UNTIL JRP RESTART.\n17            \"JRP MODULE FLOW\"                               PAGE 15\n\n 7                          --------\n 7                         | JRP100 |\n 7                          --------\n 7                 _____________|______________\n 7               |                              |\n 7            --------                       --------\n 7           | JRP120 |                     | JRP200 |\n 7            --------                       --------\n 7       ________|_______               _________|___________\n 7      |                |             |         |           |\n 7   --------        --------      --------   --------   --------\n 7  | JRP122 |      | JRP121 |    | JRP210 | | JRP220 | | JRP300 |\n 7   --------        --------      --------   --------   --------\n 7      |                                                   |\n 7  ---------                                            --------\n 7 | JRP123  |                                          | JRP310 |\n 7  ---------                                            --------\n17 JRP MODULE DESCRIPTIONS                               PAGE 16\n\n 7 JRP100           MAIN DRIVER MODULE\n\n                    THIS MODULE FIRST READS THE JRP INITIALIZATION\n                    CONTROL CARDS, GETMAINS A DYNAMIC REGION FOR THE\n                    PRINTER TASK DEFINED BY THE CONTROL CARD, SETS\n                    ALL PRINTER DEFAULTS, CALLS JRP110 TO VERIFY\n                    CONTROL CARD PARAMETERS AND RESETS PRINTER DEFAULTS\n                    AS DEFINED BY THE CONTROL CARDS. IT THEN BUILDS\n                    AND OPENS VTAM PRINTER ACB. NEXT SUBTASKS JRP200\n                    (JES2 PROCESSED OUTPUT INTERFACE) AND JRP120(JRP\n                    CONTROL TERMINAL SUPERVISOR). AT THIS POINT JRP100\n                    ISSUES THE 'JRP INITIALIZATION COMPLETE' MESSAGE AND\n                    END THE SHUTDOWN WTOR. NOW THE ONLY FUNCTION OF\n                    JRP100 IS TO WAIT AND SUPERVISE ORDERLY SHUTDOWN\n                    ON REQUEST FROM MVS CONSOLE OPERATOR(REPLY TO\n                    SHUTDOWN), AN OPERATOR OF JRP'S CONTROL TERMINAL,\n                    OR IN CASE OF ANY PROBLEMS WITH THE JES2 PROCESSED\n                    OUTPUT INTERFACE.\n\n 7 JRP110           CONTROL CARD PARSE MODULE\n\n                    THIS MODULE SIMPLY VERIFIES EACH CONTROL CARD\n                    PARAMETER AND RESETS PRINTER DEFAULTS AS DEFINED\n                    BY THE CONTROL CARD.\n\n 7 JRP200           JES2 PROCESSED SYSOUT INTERFACE\n\n                    THIS MODULE EVERY 10 SECONDS SETS PRINTER OUTPUT\n                    REQUIREMENTS IN JES2 SSOB(SUB SYSTEM OPTION BLOCK),\n                    CALLS JRP210 WHICH PRESENTS THE REQUEST FOR OUTPUT\n                    TO JES2. IF JES2 PASSES CONFIRMATION THAT THE\n                    OUTPUT CRITERIA SPECIFIED IN THE JRP PRINTER CONTOL\n                    BLOCK HAS BEEN MET THEN JRP220(DYNAMIC ALLOCATE/\n                    DEALLOCATE) IS CALLED. UPON SUCCESSFUL RETURN FROM\n                    JRP220 A SUBTASK IS CREATED AS JRP300(PRINTER I/O).\n\n 7 JRP210           JES2 PROCESSED SYSOUT SECONDARY INTERFACE\n\n                    THIS MODULE PRESENTS THE SSOB CREATED BY JRP200\n                    TO JES2 AND PASSES A RETURN CODE BASED ON THE\n                    RESULTS OF THAT PRESENTATION BACK TO JRP200.\n\n 7 JRP220           DYNAMIC ALLOCATE/DEALLOCATE MODULE\n\n                    THIS MODULE DYNAMICALLY ALLOCATES OR DEALLOCATES\n                    BASED ON A REQUEST FROM JRP200 A SPOOL DATA-SET\n                    AND SETS THE DATA-SET DISPOSITION AS DIRECTED\n                    BY THE JRP PRINTER CONTROL BLOCK.\n\n17 JRP300           PRINTER I/O MODULE                    PAGE 17\n\n                    THIS MODULE BUILDS AND INITIALIZES THE PRINTERS\n                    VTAM CONTROL BLOCKS. OPENS THE SPOOL DATA-SET\n                    PREVIOUSLY CONFIRMED BY JRP200 AND ALLOCATED BY\n                    JRP220. BEGINS A SESSION WITH THE DESIGNATED\n                    PRINTER, CALLS JRP310 TO NOTIFY JRP CONTROL TERMINAL\n                    OPERATOR(WHO HAS REQUESTED UNSOLICITED OUTPUT) THAT\n                    OUTPUT IS ABOUT TO BEGIN ON THIS PRINTER, QSAM READS\n                    THE SPOOL DATA-SET UNTIL THE PRINTER BUFFER IS FULL,\n                    THE SENDS THE DATA TO THE PRINTER VIA 3270 VTAM\n                    PROTOCOL. UPON NEGATIVE RESPONSE FROM VTAM THE\n                    PRINTER STATUS CONTROL BLOCK FIELDS ARE SET AS\n                    FOLLOWS. STATUS='RETRYING',  RTNCD, FDBK2 AND\n                    SENSE= LAST RPL FIELD SETTINGS, RETRY COUNTER IS\n                    INCREMENTED. THE OPERATION IS RETRIED UNTIL THE\n                    RETRY LIMIT OF 100(IN MOST CASES) HAS BEEN EXAUSTED.\n                    THE READ AND WRITE PROCEDURE IS REPEATED UNTIL\n                    1. END OF FILE  2. $C OR $E FROM JRP OPERATOR\n                    3. NOTIFICATION OF CLOSEDOWN.\n                    PRINTER IS FREED AND CONTROL IS RETURNED TO JRP200\n\n 7 JRP310           JRP UNSOLICITED MESSAGE PROCESSOR.\n\n                    THIS MODULE UPON REQUEST FROM JRP300 SEND PRINTER\n                    STATUS  MESSAGES TO JRP TERMINAL OPERATORS WHO HAVE\n                    REQUESTED UNSOLICITED OUTPUT.\n\n 7 JRP120           JRP CONTROL TERMINAL DRIVER\n\n                    THIS MODULE ACCEPTS LOGONS FROM 3270 TYPE TERMINALS\n                    CALLS JRP122(LOGON VERIFICATION PROCESSOR) AND\n                    ROUTES JRP COMMANDS FROM EACH CONTROL TERMINAL TO\n                    JRP121 FOR PROCESSING.\n                    COMMANDS \"ICLOSE\", \"CLOSE\", \"LOGON\", \"LOGOFF\" ARE\n                    PROCESSED DIRECTLY BY JRP120 AND ARE NOT ROUTED TO\n                    JRP121.\n\n 7 JRP121           JRP CONTROL TERMINAL COMMAND PROCESSOR\n\n                    THIS MODULE PARSES ALL COMMANDS ROUTED TO IT BY\n                    JRP120 AND MODIFIES THE PRINTER CONTROL BLOCK AS\n                    REQUESTED, FORMATS MAJOR PRINTER CONTROL BLOCK\n                    FIELDS AND DISPLAYS TO JRP TERMINAL OPERATOR.\n\n\n 7 JRP122           JRP LOGON VERIFICATION PROCESSOR\n\n                    THIS MODULE REQUESTS LOGON USERID AND PASSWORD\n                    VERIFYING THAT THE FIELDS HAVE BEEN FILLED IN,\n                    CALLS JRP123(JRP SECURITY EXIT) THEN ACCEPTS THE\n                    SESSION, REQUESTS ADDITIONAL INFORMATION OR REJECTS\n                    THE SESSION BASED ON RETURN CODE FROM JRP123.\n\n 7 JRP123           JRP USER SECURITY EXIT.\n\n                    THIS MODULE IS A DUMMY MODULE TO BE CODED BY USER.\n                    ACCORDING TO STANDARDS OUTLINED IN SOURCE CODE.\n1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$SBGINST": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1f\\x005\\x00\\x99\\x17/\\x01\\x03\\x08\\x0f\\x10I\\x006\\x005\\x00'\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.31", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "2003-03-21T10:49:35", "lines": 54, "newlines": 53, "modlines": 39, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//TMRSASM  PROC RENT=,REFR=,AC=',AC=0',\n//         MEMBER=,\n//         TEST=,\n//         LIB='SBGOLOB.LOAD',                ====> YOUR APF AUTH LIB\n//         SRCLIB='SBGOLOB.CBT459.FILE104',   ====> YOUR SOURCE LIB\n//         HSPSRCE='SYS1.V2R10M0.SHASMAC',    ====> HASP SOURCE LIB\n//         MACLIB='SYS1.MACLIB',              ====> YOUR SYSTEM MACLIB\n//         AMODGEN='SYS1.MODGEN'              ====> YOUR AMODGEN\n//ASM      EXEC  PGM=ASMA90,PARM='LIST&TEST',  ====> ASSEMBLER \"H\"\n//             REGION=6M,TIME=60\n//SYSIN    DD  DISP=SHR,DSN=&SRCLIB(&MEMBER)\n//SYSLIB   DD  DISP=SHR,DSN=&HSPSRCE\n//         DD  DISP=SHR,DSN=&SRCLIB\n//         DD  DISP=SHR,DSN=&MACLIB\n//         DD  DISP=SHR,DSN=&AMODGEN\n//*        DD  DISP=SHR,DSN=CBT.CBT458.FILE172.PDS  =====> DHC MACROS\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DISP=(NEW,PASS),DSN=&&LOADSET,UNIT=SYSALLDA,\n//*            DCB=BLKSIZE=800,\n//             SPACE=(800,(200,20),,,ROUND)\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(460,(1200,400),,,ROUND)\n//LKED    EXEC PGM=IEWL,REGION=6M,\n//  PARM='LIST&TEST,SIZE=(250K,50K)&AC&RENT&REFR',\n//  COND=(4,LT)\n//SYSLIB    DD DSN=&LIB,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE),UNIT=SYSALLDA,\n//             SPACE=(TRK,0)\n//SYSLMOD   DD DISP=SHR,DSN=&LIB(&MEMBER)\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=SYSALLDA,SPACE=(460,(800,400),,,ROUND)\n// PEND\n//T100  EXEC TMRSASM,MEMBER=JRP100,AC=',AC=1',    ====> JRP MANAGER\n//      RENT=,REFR=\n//T110 EXEC TMRSASM,MEMBER=JRP110,RENT=,REFR=     ====> INIT PARSE\n//T120   EXEC TMRSASM,MEMBER=JRP120,RENT=,REFR=   ====> CONS DRIVER\n//T121   EXEC TMRSASM,MEMBER=JRP121,RENT=,REFR=   ====> CONS PARSE\n//T122   EXEC TMRSASM,MEMBER=JRP122,RENT=,REFR=   ====> CONS LOGON\n//T123   EXEC TMRSASM,MEMBER=JRP123,RENT=,REFR=   ====> CONS SEC. EXIT\n//T200  EXEC TMRSASM,MEMBER=JRP200,AC=',AC=1',    ====> SSOB SUP.\n//      RENT=,REFR=\n//T210  EXEC TMRSASM,MEMBER=JRP210,AC=',AC=1',    ====> SSI PRES.\n//     RENT=,REFR=\n//T220  EXEC TMRSASM,MEMBER=JRP220,RENT=,REFR=    ====> ALLO/DEALLO\n//T300   EXEC TMRSASM,MEMBER=JRP300,RENT=',RENT', ====> PRINTER TASK\n//    REFR=',REFR',AC=',AC=1'\n//T310   EXEC TMRSASM,MEMBER=JRP310,RENT=,REFR=   ====> UNSOL PROC.\n//JRPRINT EXEC TMRSASM,MEMBER=JRPRINT,RENT=,REFR=, ===> TSO PRINT UTIL\n//        LIB='SBGOLOB.TEST.LINKLIB'             ====> LINKLST LIB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE104": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04;\\x00\\x00\\x01\\x03\\x08\\x0f\\x01\\x03\\x08\\x0f\\x10F\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf9@@@'", "ispf": {"version": "04.59", "flags": 0, "createdate": "2003-03-21T00:00:00", "modifydate": "2003-03-21T10:46:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT-459"}, "text": "//***FILE 104 is JRP from David Cartwright of Sutton Coldfield,     *   FILE 104\n//*           England.  This file was modified from previous files  *   FILE 104\n//*           File 104 and File 158 from this tape.                 *   FILE 104\n//*                                                                 *   FILE 104\n//*             DAVID CARTWRIGHT                                    *   FILE 104\n//*             103, DARNICK ROAD,                                  *   FILE 104\n//*             SUTTON COLDFIELD                                    *   FILE 104\n//*             UK - B73  6PF                                       *   FILE 104\n//*             TEL.  ++44 (0)121 355 3190                          *   FILE 104\n//*                                                                 *   FILE 104\n//*             email address:   dcuk@dcuk.demon.co.uk              *   FILE 104\n//*                                                                 *   FILE 104\n//*           JRP IS A DSPRINT REPLACEMENT                          *   FILE 104\n//*                                                                 *   FILE 104\n//*                J R P         (JES2 REMOTE PRINTERS)             *   FILE 104\n//*                                                                 *   FILE 104\n//*           THIS PRODUCT WAS DESIGNED AND WRITTEN WITH THE        *   FILE 104\n//*           INTENT OF INCREASING USER AS WELL AS PROGRAMMER       *   FILE 104\n//*           PRODUCTIVITY.  IT(\"JRP\") MAKES USE OF 3270 PRINTER    *   FILE 104\n//*           DEVICES TO PRINT SPOOLED JES2 OUTPUT.  OUTPUT         *   FILE 104\n//*           DEVICES ARE DEFINED TO \"JRP\" VIA A SEQUENTIAL DATA    *   FILE 104\n//*           SET.  EACH CONTROL CARD IN THIS DATA SET DESCRIBES    *   FILE 104\n//*           THE ATTRIBUTES OF ONE PRINTER.                        *   FILE 104\n//*                                                                 *   FILE 104\n//*               AFTER \"JRP\" INITIALIZATION,A SUBSYSTEM REQUEST    *   FILE 104\n//*           IS ISSUED TO JES2 BASED ON EACH PRINTER'S             *   FILE 104\n//*           DESCRIPTION.  IF JES2 CONFIRMS THAT OUTPUT IS         *   FILE 104\n//*           AVAILABLE FOR THE PRINTER DESCRIBED, A SUBTASK IS     *   FILE 104\n//*           CREATED, USING THE ATTRIBUTES DEFINED FOR THAT        *   FILE 104\n//*           PARTICULAR DEVICE.  THE SPOOL DATASET IS READ,        *   FILE 104\n//*           BUFFERED, THEN WRITTEN TO THE PRINTER VIA \"VTAM\".     *   FILE 104\n//*                                                                 *   FILE 104\n//*               \"JRP\" SUPPORTS VTAM SNA AND NONSNA TERMINALS AS   *   FILE 104\n//*           \"JRP\" CONTROL TERMINALS.  A MAXIMUM OF 25(TWENTY      *   FILE 104\n//*           FIVE) TERMINALS ARE SUPPORT SIMULTANEOUSLY.  ALL      *   FILE 104\n//*           FUNCTIONS REQUIRED TO SUPPORT \"JRPS\" PRINTER          *   FILE 104\n//*           DEVICES ARE AVAILIBLE FROM A \"JRP\" CONTROL            *   FILE 104\n//*           TERMINAL.                                             *   FILE 104\n//*                                                                 *   FILE 104\n//*           MODIFIED TO HANDLE SUPPRESS PRINT CONTROL CHARACTER.  *   FILE 104\n//*           CAN NOW BE USED TO PRINT SAS GRAPHS.                  *   FILE 104\n//*                                                                 *   FILE 104\n//*           Tested on OS/390 Version 2.6.                         *   FILE 104\n//*                                                                 *   FILE 104\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DHCINST": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x00\\x00\\x99\\x17/\\x00\\x99\\x18\\x0f\\x08\"\\x003\\x005\\x00#\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "1999-06-29T08:22:00", "lines": 51, "newlines": 53, "modlines": 35, "user": "AGCO"}, "text": "//*\n//TMRSASM  PROC RENT=,REFR=,AC=',AC=0',\n//         MEMBER=,\n//         TEST=,\n//         LIB='CSOFT.JRP.LOAD',              ====> YOUR APF AUTH LIB\n//         SRCLIB='CSOFT.JRP.ASM',            ====> YOUR SOURCE LIB\n//         HSPSRCE='SYS1.V2R5M0.SHASMAC',     ====> HASP SOURCE LIB\n//         MACLIB='SYS1.MACLIB',              ====> YOUR SYSTEM MACLIB\n//         AMODGEN='SYS1.AMODGEN'             ====> YOUR AMODGEN\n//ASM      EXEC  PGM=ASMA90,PARM='LIST&TEST',  ====> ASSEMBLER \"H\"\n//             REGION=6M,TIME=60\n//SYSIN    DD  DISP=SHR,DSN=&SRCLIB(&MEMBER)\n//SYSLIB   DD  DISP=SHR,DSN=&HSPSRCE\n//         DD  DISP=SHR,DSN=&SRCLIB\n//         DD  DISP=SHR,DSN=&MACLIB\n//         DD  DISP=SHR,DSN=&AMODGEN\n//         DD  DISP=SHR,DSN=CBT.FILE172.PDS   =====> DHC MACROS\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DISP=(NEW,PASS),DSN=&&LOADSET,UNIT=3380,\n//*            DCB=BLKSIZE=800,\n//             SPACE=(800,(200,20),,,ROUND)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//LKED    EXEC PGM=IEWL,REGION=6M,\n//  PARM='LIST&TEST,SIZE=(250K,50K)&AC&RENT&REFR',\n//  COND=(4,LT)\n//SYSLIB    DD DSN=&LIB,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE),UNIT=SYSDA,\n//             SPACE=(TRK,0)\n//SYSLMOD   DD DISP=SHR,DSN=&LIB(&MEMBER)\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=SYSDA,SPACE=(460,(800,400),,,ROUND)\n// PEND\n//T100  EXEC TMRSASM,MEMBER=JRP100,AC=',AC=1',    ====> JRP MANAGER\n//      RENT=,REFR=\n//T110 EXEC TMRSASM,MEMBER=JRP110,RENT=,REFR=     ====> INIT PARSE\n//T120   EXEC TMRSASM,MEMBER=JRP120,RENT=,REFR=   ====> CONS DRIVER\n//T121   EXEC TMRSASM,MEMBER=JRP121,RENT=,REFR=   ====> CONS PARSE\n//T122   EXEC TMRSASM,MEMBER=JRP122,RENT=,REFR=   ====> CONS LOGON\n//T123   EXEC TMRSASM,MEMBER=JRP123,RENT=,REFR=   ====> CONS SEC. EXIT\n//T200  EXEC TMRSASM,MEMBER=JRP200,AC=',AC=1',    ====> SSOB SUP.\n//      RENT=,REFR=\n//T210  EXEC TMRSASM,MEMBER=JRP210,AC=',AC=1',    ====> SSI PRES.\n//     RENT=,REFR=\n//T220  EXEC TMRSASM,MEMBER=JRP220,RENT=,REFR=    ====> ALLO/DEALLO\n//T300   EXEC TMRSASM,MEMBER=JRP300,RENT=',RENT', ====> PRINTER TASK\n//    REFR=',REFR',AC=',AC=1'\n//T310   EXEC TMRSASM,MEMBER=JRP310,RENT=,REFR=   ====> UNSOL PROC.\n//JRPRINT EXEC TMRSASM,MEMBER=JRPRINT,RENT=,REFR=  ===> TSO PRINT UTIL\n//        LIB='TLDW.LINKLIB'                     ====> LINKLST LIB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DHC100A": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x17o\\x00\\x99\\x17o\\x13\\t\\x00\\x18\\x00\\x19\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-06-25T00:00:00", "modifydate": "1999-06-25T13:09:00", "lines": 24, "newlines": 25, "modlines": 0, "user": "AGCO"}, "text": "***********************************************************************\n*        SET UP OPERATOR INTERFACE                                    *\n***********************************************************************\n         SPACE 1\n         LA    R3,COMMLPTR         POINT TO DATA AREA\n         EXTRACT (R3),FIELDS=COMM  GET ADDR OF ECB AND CIB PTRS\n         SPACE 1\n         L     R5,COMMLPTR         GET COMMAND LIST ADDRESS\n         USING COMDSECT,R5         ESTABLISH COMM AREA ADDRESSABILITY\n         LM    R7,R8,COMLIST       GET COMMAND ECB AND CIB POINTERS\n         USING CIBDSECT,R8         ESTABLISH CIB ADDRESSABILITY\n         ST    R7,P1DCOMM          STORE ECB POINTER IN ECBLIST\n         LTR   R8,R8               START PARAMETER SUPPLIED?\n         BZ    CIBSET              NO,DONT TRY TO ANALYSE THEM\n         MVC   UCMID,CIBCONID      SAVE CONSOLE ID.\n*        LA    R3,CIBDATLN         POINT TO PARAMETERS, ACTION MISSING\n         SPACE 1\nCIBSET   DS    0H                  SET UP CIB CHAIN\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R8) FREE START CIB\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=1   INDICATE 1 CIB TO BE CHAINED\n         SPACE 2\n         DROP  R5                  END COMM AREA ADDRESSABILITY\n         DROP  R8                  END CIB ADDRESSABILITY\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DHC121A": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x17?\\x01\\x01\\x00\\x9f\\x14C\\x00\\x10\\x00\\n\\x00\\x0f\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "2001-01-09T14:43:00", "lines": 16, "newlines": 10, "modlines": 15, "user": "AGCO"}, "text": "         SPACE 1                                                  *DHC*\n         CLC   0(5,R3),=C'NETID='  NETNAME (LONG)                 *DHC*\n         BE    P1CMNET             HANDLE                         *DHC*\n         CLC   0(2,R3),=C'N='      NETNAME (SHORT)                *DHC*\n         BE    P1CMNET             HANDLE                         *DHC*\n         CLC   0(5,R3),=C'HEAD='   HEADER (LONG)                  *DHC*\n         BE    P1CMHEAD            HANDLE                         *DHC*\n         CLC   0(2,R3),=C'H='      HEADER (SHORT)                 *DHC*\n         BE    P1CMHEAD            HANDLE                         *DHC*\n         CLC   0(5,R3),=C'TAIL='   TRAILER (LONG)                 *DHC*\n         BE    P1CMTAIL            HANDLE                         *DHC*\n         CLC   0(2,R3),=C'T='      TRAILER (SHORT)                *DHC*\n         BE    P1CMTAIL            HANDLE                         *DHC*\n         CLC   0(2,R3),=C'TRAN='   TRANSLATE OPTION               *DHC*\n         BE    P1CMTRAN            HANDLE                         *DHC*\n         SPACE 1                                                  *DHC*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DHC121B": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x17?\\x01\\x01\\x00\\x9f\\x12\\x01\\x002\\x00\\x1a\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "2001-01-09T12:01:00", "lines": 50, "newlines": 26, "modlines": 0, "user": "AGCO"}, "text": "         SPACE 2                                                  *DHC*\n*                                                                 *DHC*\n**       PROCESS NETWORK NAME                                     *DHC*\n*                                                                 *DHC*\nP1CMNET  DS    0H                  NQN                            *DHC*\n         LA    R0,8                8 CHAR MAX                     *DHC*\n         LA    R3,2(,R3)           BYPASS N=                      *DHC*\n         CLC   0(4,R3),=C'TID='    LONG FORM?                     *DHC*\n         BNE   *+4+4               YES                            *DHC*\n         LA    R3,4(,R3)           BUMP PAST IT                   *DHC*\n         LA    R15,J1DNET          GET HOLD AREA                  *DHC*\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA                    *DHC*\n         BAL   R14,P1CMSCN         EDIT DATA                      *DHC*\n         B     P1CMCKMR            ASSUME DATA GOOD               *DHC*\n*                                                                 *DHC*\n**       PROCESS HEADER NAME                                      *DHC*\n*                                                                 *DHC*\nP1CMHEAD DS    0H                  HEADER CHANGE                  *DHC*\n         LA    R0,8                8 CHAR MAX                     *DHC*\n         LA    R3,2(,R3)           BYPASS H=                      *DHC*\n         CLC   0(3,R3),=C'AD='     LONG FORM?                     *DHC*\n         BNE   *+4+4               YES                            *DHC*\n         LA    R3,3(,R3)           BUMP PAST IT                   *DHC*\n         LA    R15,J1DHMEM         GET HOLD AREA                  *DHC*\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA                    *DHC*\n         BAL   R14,P1CMSCN         EDIT DATA                      *DHC*\n         B     P1CMCKMR            ASSUME DATA GOOD               *DHC*\n*                                                                 *DHC*\n**       PROCESS TRAILER NAME                                     *DHC*\n*                                                                 *DHC*\nP1CMTAIL DS    0H                  TRAILER CHANGE                 *DHC*\n         LA    R0,8                8 CHAR MAX                     *DHC*\n         LA    R3,2(,R3)           BYPASS T=                      *DHC*\n         CLC   0(3,R3),=C'IL='     LONG FORM?                     *DHC*\n         BNE   *+4+4               YES                            *DHC*\n         LA    R3,3(,R3)           BUMP PAST IT                   *DHC*\n         LA    R15,J1DTMEM         GET HOLD AREA                  *DHC*\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA                    *DHC*\n         BAL   R14,P1CMSCN         EDIT DATA                      *DHC*\n         B     P1CMCKMR            ASSUME DATA GOOD               *DHC*\n*                                                                 *DHC*\n**       PROCESS TRANSLATE OPTION                                 *DHC*\n*                                                                 *DHC*\nP1CMTRAN DS    0H                  TRANSLATION OPTION             *DHC*\n         LA    R0,8                8 CHAR MAX                     *DHC*\n         LA    R3,5(,R3)           BYPASS TRAN=                   *DHC*\n         LA    R15,J1DTRAN         GET HOLD AREA                  *DHC*\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA                    *DHC*\n         BAL   R14,P1CMSCN         EDIT DATA                      *DHC*\n         B     P1CMCKMR            ASSUME DATA GOOD               *DHC*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DHC300A": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x17?\\x00\\x99\\x17_\\x11 \\x00\\x1e\\x00\\x1e\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "1999-06-24T11:20:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "AGCO"}, "text": "***********************************************************************\n* THIS CODE PERFORMS INITIALISATION FOR THE HEADER AND/OR TRAILER     *\n* MEMBERS OF THE JRPHEAD LIBRARY.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         NI    J1DFLAG3,255-J1DF3H-J1DF3T RESET FLAGS\n         CLC   J1DHMEM,=CL8'NONE'  TEST FOR NO HEADER ENTRY\n         BE    DHC3NOH             NONE WANTED\n         CLI   J1DHMEM,C' '        TEST FOR NULL ENTRY\n         BE    DHC3NOH             NONE WANTED\n         OI    J1DFLAG3,J1DF3H     SET FLAG TO REMEMBER THIS\nDHC3NOH  DS    0H                  PROCESSED HEADER,LOOK FOR TRAILER\n         CLC   J1DTMEM,=CL8'NONE'  TEST FOR NO ENTRY\n         BE    DHC3NOT             NONE WANTED\n         CLI   J1DTMEM,C' '        TEST FOR NULL ENTRY\n         BE    DHC3NOT             NONE WANTED\n         OI    J1DFLAG3,J1DF3T     SET FLAG TO REMEMBER THIS\nDHC3NOT  DS    0H                  PROCESSED TRAILER\n         SPACE 1\n         TM    J1DFLAG3,J1DF3H+J1DF3T TEST IF EITHER FLAG SET\n         BZ    DHC3INIT            DON'T BOTHER IF NOT REQUIRED\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         USING MDCB,R2             ESTABLISH ADDRESSABILITY\n         LA    R1,P3DHEAD          POINT TO ITS DCB\n         ST    R1,MDCBDCB          SAVE THAT ADDRESS\n         DROP  R2                  END MDCB ADDRESSABILITY\n         SPACE 2\nDHC3INIT DS    0H                  HEADER PROCESSING INITIALISED\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DHC300B": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x99\\x17_\\x00\\x99\\x18\\x0f\\x134\\x00*\\x00'\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-06-24T00:00:00", "modifydate": "1999-06-29T13:34:00", "lines": 42, "newlines": 39, "modlines": 0, "user": "AGCO"}, "text": "***********************************************************************\n* THIS CODE READS THE MEMBER OF JPRHEAD SPECIFIED IN THE HEADER       *\n* DATA AND OUTPUTS IT TO THE PRINTER.                                 *\n***********************************************************************\n         SPACE 1\n         TM    J1DFLAG3,J1DF3H     IS A HEADER REQUIRED?\n         BNO   DHC3HDEX            NO, BYPASS THIS CODE\n         MVC   P3DMEMB,J1DHMEM     YES, COPY MEMBER NAME\n         SPACE 2\n         LA    R15,P3DHEAD         POINT TO DCB\n         OPEN  ((R15),INPUT),MF=(E,J1DOPENX) OPEN PDS\n         EJECT ,\nDHC300BA DS    0H                  PROCESS HEADER DATA\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         BAL   R4,PDSFIND          GET THE MEMBER                       D THE ME\n         LTR   R1,R1               DID WE?\n         BZ    DHC300BB            YES, CONTINUE\n*        PLACE ANY ERROR MESSAGING HERE\n         B     DHC3HDEX            BYPASS THE REST OF THIS CODE\n         SPACE 1\nDHC300BB DS    0H                  PROCESS HEADER DATA MEMBER\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         BAL   R4,PDSGET           READ DATA FROM PDS\n         LTR   R1,R1               TEST FOR DATA\n         BZ    DHC300BX            NONE, FINISHED\n         CLI   4(R1),C'*'          IS IT A COMMENT?\n         BE    DHC300BB            YES, IGNORE IT\n         LH    R0,0(,R1)           GET LENGTH OF DATA\n         SH    R0,=H'5'            CORRECT LENGTH FOR RDW + CC\n         MVC   J1DCONCH,4(R1)      COPY CARRIAGE CONTROL\n         LA    R1,5(,R1)           SKIP RDW + CC\n         BAS   R14,P3WLOCS         PRINT HEADER\n         B     DHC300BB            GO ROUND FOR MORE\n         SPACE 2\nDHC300BX DS    0H                  HEADER PROCESSING COMPLETED\n         NI    P3DSW1,0            RESET FLAG                           LEM00457\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         USING MDCB,R2             ESTABLISH ADDRESSABILITY\n         BAL   R4,CLOSE            GO OPEN THE PDS\n         DROP  R2                  END DD LIST ADDRESSABILITY\nDHC3HDEX DS    0H                  HEADER PROCESSING COMPLETED\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DHC300C": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\\x00\\x00\\x99\\x17?\\x00\\x99\\x17\\x9f\\x11\\x07\\x00}\\x00\\x11\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1999-06-22T00:00:00", "modifydate": "1999-06-28T11:07:00", "lines": 125, "newlines": 17, "modlines": 0, "user": "AGCO"}, "text": "***********************************************************************\n* THIS CODE READS THE MEMBER OF JPRHEAD SPECIFIED IN THE TRAILER      *\n* DATA AND OUTPUTS IT TO THE PRINTER.                                 *\n***********************************************************************\n         SPACE 1\n         TM    J1DFLAG3,J1DF3T     IS A TRAILER REQUIRED?\n         BNO   DHC3TREX            NO, BYPASS THIS CODE\n         MVC   P3DMEMB,J1DTMEM     YES, COPY MEMBER NAME\n         SPACE 2\n         LA    R15,P3DHEAD         POINT TO DCB\n         OPEN  ((R15),INPUT),MF=(E,J1DOPENX) OPEN PDS\n         EJECT ,\nDHC300CA DS    0H                  PROCESS TRAILER DATA\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         BAL   R4,PDSFIND          GET THE MEMBER\n         LTR   R1,R1               DID WE?\n         BZ    DHC300CB            YES, CONTINUE\n*        PLACE ANY ERROR MESSAGING HERE\n         B     DHC3TREX            BYPASS THE REST OF THIS CODE\n         SPACE 1\nDHC300CB DS    0H                  PROCESS TRAILER DATA MEMBER\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         BAL   R4,PDSGET           READ DATA FROM PDS\n         LTR   R1,R1               TEST FOR DATA\n         BZ    DHC300CX            NONE, FINISHED\n         CLI   4(R1),C'*'          IS IT A COMMENT?\n         BE    DHC300CB            YES, IGNORE IT\n         LH    R0,0(,R1)           GET LENGTH OF DATA\n         SH    R0,=H'5'            CORRECT LENGTH FOR RDW + CC\n         MVC   J1DCONCH,4(R1)      COPY CARRIAGE CONTROL\n         LA    R1,5(,R1)           SKIP RDW + CC\n         BAS   R14,P3WLOCS         PRINT HEADER\n         B     DHC300CB            GO ROUND FOR MORE\n         EJECT ,\n***********************************************************************\n* HERE ARE THE STANDARD I/O COMPONENTS USED BY DHC CODE               *\n***********************************************************************\n         SPACE 2\n*********************************************************************** LEM00427\n*        PARTITIONED DATA SET PROCESSING SUBROUTINES                  * LEM00428\n*********************************************************************** LEM00429\n         SPACE 1                                                        LEM00430\nPDSFIND  EQU   *                                                        LEM00432\n         LA    R15,8               SET CONDITION FOR D/S NOT OPEN       LEM00433\n         USING MDCB,R2             ESTABLISH ADDRESSABILITY\n         L     R1,MDCBDCB          GET DCB ADDRESS                      LEM00437\n         FIND  (1),P3DMEMB,D       LOCATE MEMBER                        LEM00438\nPDSFINDX EQU   *                                                        LEM00439\n         LR    R1,R15              PUT RETURN CODE IN R1                LEM00440\n         BR    R4                  RETURN TO CALLER                     LEM00441\n         SPACE 3                                                        LEM00442\nPDSGET   RIN   (R2,R3,R4,R6)       SUB-ROUTINE ENTRY                    LEM00443\n         L     R6,MDCBDCB          GET ADDRESS OF DCB\n         USING IHADCB,R6           ESTABLISH DCB ADDRESSABILITY\n         TM    P3DSW1,FIRSTGET     FIRST RECORD FOR NEW MEMBER?         LEM00450\n         BO    PDSGET1             NO,BRANCH                            LEM00451\n         GETBUF (R6),(R4)         GET ADDRESS FOR FIRST BUFFER          LEM00452\n         ST    R4,P3DABUF1         SAVE IT                              LEM00453\n         GETBUF (R6),(R4)         GET ADDRESS FOR SECOND BUFFER         LEM00454\n         ST    R4,P3DABUF2         SAVE IT                              LEM00455\n         READ  P3DECB1,SF,(R6),MF=E READ FIRST DATA BLOCK               LEM00456\n         OI    P3DSW1,FIRSTGET+READREQ INDICATE FIRST READ              LEM00457\n         SPACE 2                                                        LEM00458\nPDSGET1  DS    0H                  SUBSEQUENT READS                     LEM00459\n         TM    P3DSW1,READREQ       IS A READ REQUIRED?                 LEM00460\n         BNO   PDSGET2             NO. BRANCH                           LEM00461\n         CHECK P3DECB1             WAIT FOR I/O TO COMPLETE             LEM00462\n         L     R2,P3DABUF1         GET DATA ADDRESS\n         LA    R2,4(,R2)           SKIP OVER BDW\n         ST    R2,P3DSEGAD         STORE DATA ADDRESS\n         L     R2,P3DIOBA          GET ADDRESS OF IOB.                  LEM00464\n         LH    R3,DCBBLKSI         GET MAXIMUM BLOCKSIZE,               LEM00465\n         SH    R3,14(0,R2)         SUBTRACT IOB RESIDUAL COUNT          LEM00466\n         SH    R3,=H'4'            CORRECT FOR BDW\n         STH   R3,P3DBYTES         TO GIVE BYTES IN NEW BLOCK.          LEM00467\n         NI    P3DSW1,255-READREQ  RESET READ SWITCH                    LEM00468\n         L     R1,P3DABUF2         *                                    LEM00469\n         MVC   P3DABUF2,P3DABUF1   ** SWAP OVER BUFFERS                 LEM00470\n         ST    R1,P3DABUF1         *                                    LEM00471\n         READ  P3DECB1,SF,(R6),MF=E INITIATE READ TO FILL OTHER BUFFER  LEM00472\nPDSGET2  EQU   *                                                        LEM00473\n         L     R1,P3DSEGAD         GET CURRENT BUFFER SEGMENT ADDRESS   LEM00474\n         LH    R3,P3DBYTES         GET BYTES LEFT IN CURRENT BUFFER     LEM00475\n         LH    R2,0(,R1)           GET RECORD LENGTH                    LEM00476\n         SR    R3,R2               SUBTRACT FROM BYTES LEFT IN BUFFER   LEM00477\n         BP    *+8                 BRANCH IF STILL SOME LEFT            LEM00478\n         OI    P3DSW1,READREQ      SET FLAG TO INVOKE PHYSICAL READ.    LEM00479\n         STH   R3,P3DBYTES         SAVE BYTES LEFT IN BUFFER            LEM00480\n         LA    R2,0(R1,R2)         POINT TO NEXT RECORD IN BUFFER       LEM00481\n         ST    R2,P3DSEGAD         SAVE NEW ADDRESS                     LEM00482\nPDSGEXIT EQU   *                                                        LEM00483\n         ROUT  ,                    RETURN TO CALLER                    LEM00484\n         SPACE 4                                                        LEM00485\nPDSEODAD EQU   *                                                        LEM00486\n         NI    P3DSW1,255-FIRSTGET SET FIRSTTIME SWITCH FOR NEXT MEMBER LEM00487\n         L     R2,P3DABUF1         GET 1ST BUFFER ADDRESS               LEM00488\n         FREEBUF (R6),(R2)         FREE IT                              LEM00489\n         L     R2,P3DABUF2         GET 2ND BUFFER ADDRESS               LEM00490\n         FREEBUF (R6),(R2)         FREE IT                              LEM00491\nPDSEOF   EQU   *                                                        LEM00492\n         SR    R1,R1               INDICATE END OF MEMBER               LEM00493\n         B     PDSGEXIT            RETURN TO CALLER                     LEM00494\n         DROP  R6                  END DCB ADDRESSABILITY               LEM00495\n         EJECT                                                          LEM00496\n***********************************************************************\n*        CLOSE ROUTINE                                                *\n***********************************************************************\n         SPACE 1\nCLOSE    RIN   ,                   CLOSE DATA SET\n         L     R15,MDCBDCB         GET DCB ADDRESS\n         CLOSE ((R15),DISP),MF=(E,J1DOPENX) CLOSE PDS\n         SPACE 1\nCLOSEX   DS    0H                  RETURN TO CALLER\n         ROUT  ,                   SUBROUTINE EXIT\n         SPACE 1\n         DROP  R2                  END DD LIST ADDRESSABILITY\n         SPACE 3\nDHC300CX DS    0H                  TRAILER PROCESSING COMPLETED\n         NI    P3DSW1,0            RESET FLAG                           LEM00457\n         LA    R2,P3DHEDSW         POINT AT MDSCB\n         USING MDCB,R2             ESTABLISH ADDRESSABILITY\n         BAL   R4,CLOSE            GO OPEN THE PDS\n         DROP  R2                  END DD LIST ADDRESSABILITY\nDHC3TREX DS    0H                  TRAILER PROCESSING COMPLETED\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRP": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x89\\x00_\\x00\\x99\\x17\\x9f\\x12\\x01\\x00\\x16\\x00\\x15\\x00\\x01\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1999-06-28T12:01:00", "lines": 22, "newlines": 21, "modlines": 1, "user": "AGCO"}, "text": "//JRP PROC\n//******************************************************************\n//*\n//*    THE FOLLOWING PROGRAMS MUST RESIDE IN LINKLIST LIBRARY\n//*\n//*    JRP100    MAIN DRIVER MODULE FOR JES REMOTE PRINT\n//*    JRP110    JRP INITIALIZATION MODULE\n//*    JRP120    JRP CONTROL TERMINAL DRIVER\n//*    JRP121    JRP CONTROL TERMINAL PARSE MODULE\n//*    JRP122    JRP CONTROL TERMINAL LOGON PROCESSOR\n//*    JRP123    JRP CONTROL TERMINAL LOGON PROCESSOR USER SECURITY EXIT\n//*    JRP200    JRP JES2 PRINTER OUT-PUT CONTROL MODULE\n//*    JRP210    JRP JES2 PRINTER OUT-PUT SECONDARY CONTROL MODULE\n//*    JRP220    JRP JES2 PRINTER OUT-PUT DYNAMIC ALLOCATE/DEALLOCATE\n//*    JRP300    JRP JES2 PRINT SUBTASK\n//*    JRP310    JRP JES2 PRINT SUBTASK UNSOLICITED CONTROL TERMINAL\n//*              INTERFACE\n//******************************************************************\n//JRP    EXEC PGM=JRP100,REGION=256K\n//JRPDATA DD DISP=SHR,DSN=JRP.DATA.PDS(JRPINIT)\n//JRPHEAD DD DISP=SHR,DSN=JRP.VBM.PDS\n//SYSABEND DD SYSOUT=A\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPDMAC": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x89\\x00_\\x01\\x01\\x00\\x9f\\x14X\\x00\\xc7\\x00\\xbb\\x00\\x0e\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "2001-01-09T14:58:00", "lines": 199, "newlines": 187, "modlines": 14, "user": "AGCO"}, "text": "         MACRO\n&NAME    JRPDMAC\n         TITLE 'DYNAMIC - PRINTER SUBTASK AREA'\n***********************************************************************\n*                                                                     *\n*             MACRO NAME = JRPDMAC                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DYNAMIC AREA MAPPING MACRO          *\n*                FOR JRP     328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = MUST STAY IN SYNC WITH JRPSMAC       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                                                                     *\n*                PROCESSOR = MACRO                                    *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   EXPANDED IN EACH JRP MODULE.                      *\n*                                                                     *\n*             INPUT = NONE.                                           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = MEND.                                   *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nJ1DWA    DSECT\n         DS    0D\nJ1DBFR   DC    C'XXXXXXXX XXXXXXXX BEGINNING ON RXXXXXXX(XXXXXXXX)'\nJ1DBFNME EQU   J1DBFR,8\nJ1DBFNUM EQU   J1DBFR+9,8\nJ1DBFCL  EQU   J1DBFR+L'J1DBFR-18,8\nJ1DCMWT1 WTO   'JRPI100 XXXXXXX',MCSFLAG=(REG0),MF=L\nJ1DCMW0  EQU   J1DCMWT1+4,16\nJ1DCMW1  EQU   J1DCMWT1+4+9,7\nJ1DOPER  WTO   'JRPX000 ....X....X....X....X....X....X....X....X....X..X\n               ....X',MF=L,ROUTCDE=(8)\nJ1DOPERM EQU   J1DOPER+4+3,4\nJ1DOPER1 EQU   J1DOPER+4+8,50\nJ1DWERR  WTO   'JRPE100 RXXXXXXX-.....X....X....X....X....,R15=999',   X\n               MF=L\nJ1DWERRM EQU   J1DWERR+4+3,4\nJ1DWERRP EQU   J1DWERR+4+8,8\nJ1DWERR1 EQU   J1DWERR+4+8+5,25      DYNAMIC MESSAGE PORTION\nJ1DWERR2 EQU   J1DWERR+4+8+9+30,3      DECIMAL R15 RETURN CODE\nJ1DFLSMS DC    C'RXXXXXXX(XXXXXXXX) OUTPUT TERMINATED BY XXXXXXXX   '\nJ1DBYWHO EQU   J1DFLSMS+L'J1DFLSMS-3-8,8\nJ1DWHY   EQU   J1DFLSMS+L'J1DFLSMS-3-8-4-10,10\nJ1DBEG   DC    0CL91' ',CL91'*'\nJ1DBEGJT EQU   J1DBEG+5,32\nJ1DBEGJN EQU   J1DBEG+38,8\nJ1DBEGJ  EQU   J1DBEG+47,8\nJ1DCMT2  DS    0F                  CURRENT OPTIONS MESSAGE\n         DC    AL2(J1DCMT2E-*)     L'TXT+L'ROUT+L'DESC\n         DC    X'4000'             MCSFLAG=(REG0)\nJ1DTPUT  EQU   *\n         DC    C'JRPI101 '\nJ1DHPRT  DC    CL8'RXXXXXXX'\n         DC    C' NETID='\nJ1DNET   DC    CL8' '                DEFAULT NETWORK NAME\n         DC    CL1' '\n         DC    C'LU='\nJ1DLUID  DC    CL8' '              DEFAULT LUID\n         DC    CL1' '\nJ1DHSTAT DC    CL10'INACTIVE  '    PRINTER STATUS\nJ1DHNME  DC    CL18'                  ' NAME AND NUMBER\nJ1DPRN1  EQU   J1DHNME+8,1\nJ1DHJNM  EQU   J1DHNME+9,8\nJ1DPRN2  EQU   J1DHNME+17,1\nJ1DQTPUT EQU   *\n         DC    C',F='\nJ1DHFORM DC    C'    '             CURRENT FORM\n         DC    C',R='\nJ1DHDEST DC    CL8'LOCAL   '       CURRENT DESTINATION\n         DC    C',S='\nJ1DSEP   DC    CL1'Y'              DEFAULT PAGE SEPERATORS\n         DC    C',LPP='\nJ1DLEN2  DC    C'068'              DEFAULT PAGE SIZE\n         DC    C',MLIN='\nJ1DMLNE2 DC    C'9999'             DEFAULT PAGE WIDTH\n         DC    C',C='\nJ1DHCLAS DC    CL8'        '       CURRENT CLASS(ES)\n         DC    C',SCS='\nJ1DHSCS  DC    CL1'Y'              SCS OPTION Y/N\n         DC    C',LGMD='\nJ1DLGMD  DC    CL8'        '       CURRENT LOGMODE\n         DC    C',RCD='\nJ1DBROK1 DC    CL3'00'\n         DC    C',FB2='\nJ1DBROK2 DC    CL3'00'\n         DC    C',SENSE='\nJ1DBROK3 DC    CL9'00000000'\n         DC    C'HEAD='                                          *DHC*\nJ1DHMEM  DC    CL8' '              HEADER MEMBER NAME            *DHC*\n         DC    C' TAIL='                                         *DHC*\nJ1DTMEM  DC    CL8' '              TRAILER MEMBER NAME           *DHC*\n         DC    C' TRAN='                                         *DHC*\nJ1DTRAN  DC    CL8' '              TRANSLATION OPTION/TABLE NAME *DHC*\nJ1DCMT2E EQU   *                   NO ROUT/DESC W/ REG0\nJ1DTPUTL EQU   *-J1DTPUT\nJ1DLEN   DC    F'68'               PAGE SIZE\nJ1DMLNE  DC    F'9999'             PAGE WIDTH\n         DS    0F\nJ1DTWT   DC    F'0'\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nJ1DST3   DS    F\nJ1DST8   DS    F\nJ1DPSOS  DS    F\nJ1DJECB  DS    A                   HASP COMM ECB\nJ1DCURPO DS    F                   CURRENT LINE NUMBER\nJ1DILOC  DS    F                   OUTPUT RECORD TEXT LOC.\nJ1DISIZ  DS    F                   OUTPUT RECORD LENGTH  .\nJ1DDCB   DS    F                   DCB ADDRESS STORE ADDRESS\nJ1DACB   DS    F                   ACB ADDRESS STORE ADDRESS\nJ1DTCB   DS    F                   TCB ADDRESS STORE ADDRESS\nJ1DRPL   DS    F                   RPL ADDRESS STORE\nJ1DNIB   DS    F                   NIB ADDRESS STORE\nJ1DWRET  DS    F                   RETURN SAVE AREA\nJ1DFMRET DS    F                   RETURN SAVE AREA\nJ1DOPENX DS    F                   LIST FORM OF OPEN\nJ1DBFPTR DS    F                   CURR. AVAL. 328X BUFFER POS.\nJ1DRETRY DS    F                   RETRY LIMITER\nJ1DTIMER DS    F                   JESSCAN TIMER(IN SECONDS)\nJ1DSAV01 DS    2F                  SAVE LINE/LEN DURING ASCII CONV.\nJ1DWORK  DS    D                   WORK AREA\nJ1DJOBN  DS    CL8                 CURR. JOBNAME\nJ1DJOBI  DS    CL8                 CURR. JOB ID.\nJ1DDNM   DS    CL8                 CURR. JOB ID.\nJ1DDSN   DS    CL44                CURR. JOB ID.\nJ1DMSGLN DS    F\nJ1DMSGTX DS    F\nJ1DCONID DS    X                   MCS ID OF MODIFY ISSUER\nJ1DRETLM DS    H                   RETRY COUNTER(IO ERR ON PRINTER)\nJ1DFLAG1 DS    X                   FLAG BITE 1\nJ1DFLAG2 DS    X                   FLAG BITE 2\nJ1DFLAG3 DS    X                   FLAG BITE 3                   *DHC*\nJ1DF3H   EQU   X'10'               HEADING MEMBER REQUIRED       *DHC*\nJ1DF3T   EQU   X'20'               TRAILER MEMBER REQUIRED       *DHC*\nJ1DCONCH DS    C                   CARRIAGE CONTROL\n         DS    0F                  SVC 99 BUILD AREA\nJ1DS99   DS    XL200               MUST BE LARGER THAN 'DYN' EQUATE\n         DS    0F                  ALIGN\nJ1DSSOB  DS    (160)X\nJ1DCLRE  EQU   *                   END OF DYNAMIC AREA\nJ1DSASIZ EQU   *-J1DWA             SIZE OF DYNAMIC AREA\nJ1DNCLSF EQU   X'01'               NORMAL CLOSE FLAG\nJ1DICLSF EQU   X'02'               IMMEDIATE CLOSE FLAG\nJ1PGLBF  EQU   X'04'               PARSE GLOBAL REQUEST FLAG\nJ1PCNTF  EQU   X'10'               CONTINUATION CARD FLAG\nJ1PINVF  EQU   X'40'               INVALID ON INITIALIZATION FLAG\nJ1PINITF EQU   X'80'               INITIALIZATION FLAG\nJ1DIOERR EQU   X'01'               I/O ERROR FLAG\nJ1DSTOP  EQU   X'02'               STOP IMMED FLAG\nJ1DRTLM  EQU   X'04'               RETRY LINIT FLAG\nJ1DNEWDS EQU   X'08'               TOP OF PAGE FLAG\nJ1DALC   EQU   X'10'               ALLOCATE DEALLOCATE\nJ1DEOF   EQU   X'20'               ENF OF FILE FLAG\nJ1DBEGIN EQU   X'40'               DEVICE OPEN FLAG\nJ1DKEEP  EQU   X'80'               KEEP CURRENT DATA-SET\nJ1DTRUNC EQU   X'01'               PRINTER BUFFER AS IS\nJ1DHDR   EQU   X'02'               HEADER ON/OFF FLAG\nJ1DFLUSH EQU   X'04'               CANCEL\nJ1DPURGE EQU   X'08'               DRAINED\nJ1DSTOPA EQU   X'10'               STOP AFTER CURRENT ACTIVITY\nJ1DSPALL EQU   X'20'               TAKE STATISTICS DISPLAY\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRPDMACX": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\xbb\\x00\\xbb\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&NAME    JRPDMAC\n         TITLE 'DYNAMIC - PRINTER SUBTASK AREA'\n***********************************************************************\n*                                                                     *\n*             MACRO NAME = JRPDMAC                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DYNAMIC AREA MAPPING MACRO          *\n*                FOR JRP     328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = MUST STAY IN SYNC WITH JRPSMAC       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                                                                     *\n*                PROCESSOR = MACRO                                    *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   EXPANDED IN EACH JRP MODULE.                      *\n*                                                                     *\n*             INPUT = NONE.                                           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = MEND.                                   *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nJ1DWA    DSECT\n         DS    0D\nJ1DBFR   DC    C'XXXXXXXX XXXXXXXX BEGINNING ON RXXXXXXX(XXXXXXXX)'\nJ1DBFNME EQU   J1DBFR,8\nJ1DBFNUM EQU   J1DBFR+9,8\nJ1DBFCL  EQU   J1DBFR+L'J1DBFR-18,8\nJ1DCMWT1 WTO   'JRPI100 XXXXXXX',MCSFLAG=(REG0),MF=L\nJ1DCMW0  EQU   J1DCMWT1+4,16\nJ1DCMW1  EQU   J1DCMWT1+4+9,7\nJ1DOPER  WTO   'JRPX000 ....X....X....X....X....X....X....X....X....X..X\n               ....X',MF=L,ROUTCDE=(8)\nJ1DOPERM EQU   J1DOPER+4+3,4\nJ1DOPER1 EQU   J1DOPER+4+8,50\nJ1DWERR  WTO   'JRPE100 RXXXXXXX-.....X....X....X....X....,R15=999',   X\n               MF=L\nJ1DWERRM EQU   J1DWERR+4+3,4\nJ1DWERRP EQU   J1DWERR+4+8,8\nJ1DWERR1 EQU   J1DWERR+4+8+5,25      DYNAMIC MESSAGE PORTION\nJ1DWERR2 EQU   J1DWERR+4+8+9+30,3      DECIMAL R15 RETURN CODE\nJ1DFLSMS DC    C'RXXXXXXX(XXXXXXXX) OUTPUT TERMINATED BY XXXXXXXX   '\nJ1DBYWHO EQU   J1DFLSMS+L'J1DFLSMS-3-8,8\nJ1DWHY   EQU   J1DFLSMS+L'J1DFLSMS-3-8-4-10,10\nJ1DBEG   DC    0CL91' ',CL91'*'\nJ1DBEGJT EQU   J1DBEG+5,32\nJ1DBEGJN EQU   J1DBEG+38,8\nJ1DBEGJ  EQU   J1DBEG+47,8\nJ1DCMT2  DS    0F                  CURRENT OPTIONS MESSAGE\n         DC    AL2(J1DCMT2E-*)     L'TXT+L'ROUT+L'DESC\n         DC    X'4000'             MCSFLAG=(REG0)\nJ1DTPUT  EQU   *\n         DC    C'JRPI101 '\nJ1DHPRT  DC    CL8'RXXXXXXX'\n         DC    C' LU='\nJ1DLUID  DC    C'        '         DEFAULT LUID\n         DC    CL1' '\nJ1DHSTAT DC    CL10'INACTIVE  '    PRINTER STATUS\nJ1DHNME  DC    CL18'                  ' NAME AND NUMBER\nJ1DPRN1  EQU   J1DHNME+8,1\nJ1DHJNM  EQU   J1DHNME+9,8\nJ1DPRN2  EQU   J1DHNME+17,1\nJ1DQTPUT EQU   *\n         DC    C',F='\nJ1DHFORM DC    C'    '             CURRENT FORM\n         DC    C',R='\nJ1DHDEST DC    CL8'LOCAL   '       CURRENT DESTINATION\n         DC    C',S='\nJ1DSEP   DC    CL1'Y'              DEFAULT PAGE SEPERATORS\n         DC    C',LPP='\nJ1DLEN2  DC    C'068'              DEFAULT PAGE SIZE\n         DC    C',MLIN='\nJ1DMLNE2 DC    C'9999'             DEFAULT PAGE WIDTH\n         DC    C',C='\nJ1DHCLAS DC    CL8'        '       CURRENT CLASS(ES)\n         DC    C',SCS='\nJ1DHSCS  DC    CL1'Y'              SCS OPTION Y/N\n         DC    C',LGMD='\nJ1DLGMD  DC    CL8'        '       CURRENT LOGMODE\n         DC    C',RCD='\nJ1DBROK1 DC    CL3'00'\n         DC    C',FB2='\nJ1DBROK2 DC    CL3'00'\n         DC    C',SENSE='\nJ1DBROK3 DC    CL9'00000000'\nJ1DCMT2E EQU   *                   NO ROUT/DESC W/ REG0\nJ1DTPUTL EQU   *-J1DTPUT\nJ1DLEN   DC    F'68'               PAGE SIZE\nJ1DMLNE  DC    F'9999'             PAGE WIDTH\n         DS    0F\nJ1DTWT   DC    F'0'\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nJ1DST3   DS    F\nJ1DST8   DS    F\nJ1DPSOS  DS    F\nJ1DJECB  DS    A                   HASP COMM ECB\nJ1DCURPO DS    F                   CURRENT LINE NUMBER\nJ1DILOC  DS    F                   OUTPUT RECORD TEXT LOC.\nJ1DISIZ  DS    F                   OUTPUT RECORD LENGTH  .\nJ1DDCB   DS    F                   DCB ADDRESS STORE ADDRESS\nJ1DACB   DS    F                   ACB ADDRESS STORE ADDRESS\nJ1DTCB   DS    F                   TCB ADDRESS STORE ADDRESS\nJ1DRPL   DS    F                   RPL ADDRESS STORE\nJ1DNIB   DS    F                   NIB ADDRESS STORE\nJ1DWRET  DS    F                   RETURN SAVE AREA\nJ1DFMRET DS    F                   RETURN SAVE AREA\nJ1DOPENX DS    F                   LIST FORM OF OPEN\nJ1DBFPTR DS    F                   CURR. AVAL. 328X BUFFER POS.\nJ1DRETRY DS    F                   RETRY LIMITER\nJ1DTIMER DS    F                   JESSCAN TIMER(IN SECONDS)\nJ1DSAV01 DS    2F                  SAVE LINE/LEN DURING ASCII CONV.\nJ1DWORK  DS    D                   WORK AREA\nJ1DJOBN  DS    CL8                 CURR. JOBNAME\nJ1DJOBI  DS    CL8                 CURR. JOB ID.\nJ1DDNM   DS    CL8                 CURR. JOB ID.\nJ1DDSN   DS    CL44                CURR. JOB ID.\nJ1DMSGLN DS    F\nJ1DMSGTX DS    F\nJ1DCONID DS    X                   MCS ID OF MODIFY ISSUER\nJ1DRETLM DS    H                   RETRY COUNTER(IO ERR ON PRINTER)\nJ1DFLAG1 DS    X                   FLAG BITE 1\nJ1DFLAG2 DS    X                   FLAG BITE 2\nJ1DCONCH DS    C                   CARRIAGE CONTROL\n         DS    0F                  SVC 99 BUILD AREA\nJ1DS99   DS    XL200               MUST BE LARGER THAN 'DYN' EQUATE\n         DS    0F                  ALIGN\nJ1DSSOB  DS    (160)X\nJ1DCLRE  EQU   *                   END OF DYNAMIC AREA\nJ1DSASIZ EQU   *-J1DWA             SIZE OF DYNAMIC AREA\nJ1DNCLSF EQU   X'01'               NORMAL CLOSE FLAG\nJ1DICLSF EQU   X'02'               IMMEDIATE CLOSE FLAG\nJ1PGLBF  EQU   X'04'               PARSE GLOBAL REQUEST FLAG\nJ1PCNTF  EQU   X'10'               CONTINUATION CARD FLAG\nJ1PINVF  EQU   X'40'               INVALID ON INITIALIZATION FLAG\nJ1PINITF EQU   X'80'               INITIALIZATION FLAG\nJ1DIOERR EQU   X'01'               I/O ERROR FLAG\nJ1DSTOP  EQU   X'02'               STOP IMMED FLAG\nJ1DRTLM  EQU   X'04'               RETRY LINIT FLAG\nJ1DNEWDS EQU   X'08'               TOP OF PAGE FLAG\nJ1DALC   EQU   X'10'               ALLOCATE DEALLOCATE\nJ1DEOF   EQU   X'20'               ENF OF FILE FLAG\nJ1DBEGIN EQU   X'40'               DEVICE OPEN FLAG\nJ1DKEEP  EQU   X'80'               KEEP CURRENT DATA-SET\nJ1DTRUNC EQU   X'01'               PRINTER BUFFER AS IS\nJ1DHDR   EQU   X'02'               HEADER ON/OFF FLAG\nJ1DFLUSH EQU   X'04'               CANCEL\nJ1DPURGE EQU   X'08'               DRAINED\nJ1DSTOPA EQU   X'10'               STOP AFTER CURRENT ACTIVITY\nJ1DSPALL EQU   X'20'               TAKE STATISTICS DISPLAY\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRPDOCP": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x1c\\x00\\x1c\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "JRP"}, "text": "//S562TSOB JOB (0910,T),'SCHORTMAN-3312-006',CLASS=T,MSGCLASS=F,\n//  NOTIFY=S562TSO,PERFORM=5,PRTY=15\n/*JOBPARM LINECT=96\n//STEP01 EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN DD DUMMY\n//SYSUT1 DD *\n\n\n***DJDE  DATA=(1,120),FONTINDEX=0,OVERPRINT=MERGE,;\n***DJDE  FORMAT=DRHP02,ASSIGN=(1,1),TOF=1,BOF=100,DUPLEX=YES,;\n***DJDE  SHIFT=NO,SIDE=NUFRONT,FORMS=NONE,END;\n//SYSUT2 DD SYSOUT=H\n//*\n//*\n//*\n//STEP01 EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN DD DUMMY\n//SYSUT1 DD DSN=S562TSO.JRP.DATA(JRPDOC),DISP=SHR,DCB=RECFM=FBA\n//SYSUT2  DD SYSOUT=H,COPIES=5\n\n//STEP01 EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN DD DUMMY\n//SYSUT1 DD *\n***DJDE  JDL=DFAULT,JDE=DFLT,END;\n//SYSUT2 DD SYSOUT=H\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPEX": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x14\\x00\\x14\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&TAG     JRPEX   &REG,&INSTR\n         LCLB  &ERROR\n.CKREG   AIF   (T'&REG NE 'O').CKINSTR\n         MNOTE 8,'REGISTER OPERAND OMITTED; REQUIRED'\n&ERROR   SETB  1\n.CKINSTR AIF   (T'&INSTR NE 'O').EXPAND\n         MNOTE 8,'INSTRUCTION OPERAND OMITTED; REQUIRED'\n&ERROR   SETB  1\n.EXPAND  AIF   (&ERROR).MEND\n         SPACE 1\n*        WARNING:  REGISTER 2 WILL BE DESTROYED\n*                  &REG OPERAND WILL BE SHIFTED LEFT 24 BITS\n         SPACE 1\n&TAG     LA    2,&INSTR                     LOAD INST ADDR\n         SLL   &REG,24                      SHIFT MASK TO HIGH ORDER\n         OR    2,&REG                       COMBINE WITH ADDR\n         SVC   238                          ISSUE SUPEREX SVC\n         SPACE 1\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPINIT": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x06\\x00\\x06\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "JRP"}, "text": "RMT10    R=R10,LPP=68,S=N,MLIN=0,                                      X\n         LU=VTS08E,                                                    X\n         SCS=N\nRMT11    R=R11,LPP=68,S=N,                                             X\n         LU=VTSC9F,                                                    X\n         SCS=N\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPINST": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00:\\x00:\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "JRP"}, "text": "//TLDWJRP  JOB (4114),'WHALEY',\n//             NOTIFY=TLDW,REGION=1024K,\n//             CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)\n//*\n//*        REFER - TLDW.FILE158.PDS(JRPINST)\n//*\n//TMRSASM  PROC RENT=,REFR=,AC=',AC=0',\n//         MEMBER=,\n//         LIB='TLDW.LINKLIB',                ====> YOUR APF AUTH LIB\n//         SRCLIB='TLDW.FILE158.PDS',         ====> YOUR SOURCE LIB\n//         HSPSRCE='SYS1.HASPSRC',            ====> HASP SOURCE LIB\n//         MACLIB='SYS1.MACLIB',              ====> YOUR SYSTEM MACLIB\n//         AMODGEN='SYS1.AMODGEN',            ====> YOUR AMODGEN\n//         VOL='MVSRES',                      ====> SYSREZ VOL SER\n//         U='3380'                           ====> SYSREZ DEV TYPE\n//*******  SRCLIB='TLDW.FILE158.PDS',         ====> YOUR SOURCE LIB\n//ASM      EXEC  PGM=IEV90,PARM='LIST,TEST',  ====> ASSEMBLER \"H\"\n//             REGION=4096K,TIME=60\n//SYSIN    DD  DISP=SHR,DSN=&SRCLIB(&MEMBER)\n//SYSLIB   DD  DISP=SHR,DSN=&HSPSRCE,UNIT=&U,VOL=SER=&VOL,\n//             DCB=BLKSIZE=5600\n//         DD  DISP=SHR,DSN=&SRCLIB\n//         DD  DISP=SHR,DSN=&MACLIB,UNIT=&U,VOL=SER=&VOL\n//         DD  DISP=SHR,DSN=&AMODGEN,UNIT=&U,VOL=SER=&VOL\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DISP=(NEW,PASS),DSN=&&LOADSET,UNIT=3380,\n//*            DCB=BLKSIZE=800,\n//             SPACE=(800,(200,20),,,ROUND),VOL=SER=MVS003\n//SYSUT1   DD  DSN=&&UT1,UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT2   DD  DSN=&&UT2,UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//SYSUT3   DD  DSN=&&UT3,UNIT=SYSDA,SPACE=(460,(1200,400),,,ROUND)\n//LKED    EXEC PGM=IEWL,REGION=512K,\n//  PARM='TEST,LIST,SIZE=(250K,50K)&AC&RENT&REFR',\n//  COND=(4,LT)\n//SYSLIB    DD DSN=&LIB,DISP=SHR\n//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE),UNIT=SYSDA,\n//             SPACE=(TRK,0)\n//SYSLMOD   DD DISP=SHR,DSN=&LIB(&MEMBER)\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD DSN=&&UT1,UNIT=SYSDA,SPACE=(460,(800,400),,,ROUND)\n// PEND\n//T100  EXEC TMRSASM,MEMBER=JRP100,AC=',AC=1',    ====> JRP MANAGER\n//      RENT=,REFR=\n//T110 EXEC TMRSASM,MEMBER=JRP110,RENT=,REFR=     ====> INIT PARSE\n//T120   EXEC TMRSASM,MEMBER=JRP120,RENT=,REFR=   ====> CONS DRIVER\n//T121   EXEC TMRSASM,MEMBER=JRP121,RENT=,REFR=   ====> CONS PARSE\n//T122   EXEC TMRSASM,MEMBER=JRP122,RENT=,REFR=   ====> CONS LOGON\n//T123   EXEC TMRSASM,MEMBER=JRP123,RENT=,REFR=   ====> CONS SEC. EXIT\n//T200  EXEC TMRSASM,MEMBER=JRP200,AC=',AC=1',    ====> SSOB SUP.\n//      RENT=,REFR=\n//T210  EXEC TMRSASM,MEMBER=JRP210,AC=',AC=1',    ====> SSI PRES.\n//     RENT=,REFR=\n//T220  EXEC TMRSASM,MEMBER=JRP220,RENT=,REFR=    ====> ALLO/DEALLO\n//T300   EXEC TMRSASM,MEMBER=JRP300,RENT=',RENT', ====> PRINTER TASK\n//    REFR=',REFR',AC=',AC=1'\n//T310   EXEC TMRSASM,MEMBER=JRP310,RENT=,REFR=   ====> UNSOL PROC.\n//JRPRINT EXEC TMRSASM,MEMBER=JRPRINT,RENT=,REFR=, ===> TSO PRINT UTIL\n//         LIB='TLDW.LINKLIB'                     ====> LINKLST LIB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRPREGS": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x13\\x00\\x13\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&NAME    JRPREGS\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S.\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPRINT": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x89\\x00_\\x00\\x99\\x17/\\x15\\x10\\x07\\xf3\\x08\\x0b\\x00\\x01\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1999-06-21T15:10:00", "lines": 2035, "newlines": 2059, "modlines": 1, "user": "JRP"}, "text": "JRPRINT  TITLE 'IPO-SUPPLIED PRINT COMMAND                             C\n                        '\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRPRINT                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PRINT COMMAND FOR                   *\n*                TSO FOREGROUND EXECUTION                             *\n*                                                                     *\n*             AUTHOR = I.B.M                                          *\n*                                                                     *\n*             COPYRIGHT = NONE                                        *\n*                                                                     *\n*              MODIFIED = M.SCHORTMAN: CONN MUTUAL LIFE               *\n*                                      CHRYSLER MOTORS CORP.          *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PRINTS A DATASET(S) WHICH IS SEQUENTIAL OR PARTIONED *\n*                ALLOWING THE USER TO SPECIFY OUTPUT CLASS, COPIES,   *\n*                DESTINATION AND HOLD/NOHOLD.  ALSO ALLOWS THE USER   *\n*                TO SPECIFY LIST/NOLIST OR PRINT/NOPRINT.  LIST IF    *\n*                PDS MEMBER NAMES ARE ONLY TO BE LISTED.  PRINT IF    *\n*                PDS MEMBER NAMES ARE ONLY TO BE PRINTED.             *\n*                                                                     *\n*                OPERATION =                                          *\n*                   BUILD PARS AND DAIR PARAMETER LISTS.              *\n*                   CALL PARS TO PARSE COMMAND BUFFER.                *\n*                   ALLOCATE DATASET AND DETERMINE IF PDS OR          *\n*                      SEQUENTIAL.                                    *\n*                   DETERMINE WHAT FUNCTIONS WERE TO BE PERFORMED     *\n*                      FOR THIS DATASET IF PDS.                       *\n*                   ALLOCATE SYSOUT DATASETS WHEN SOMETHING IS        *\n*                      FOUND TO BE PRINTED.                           *\n*                   PROCESS NEXT DATASET IN LIST.                     *\n*                   AT END OF LIST CLOSE DATASETS AND FREE ANY        *\n*                      SYSOUT DATASETS.                               *\n*                   DATSETS WILL BE PRINTED AS EITHER VBA OR VBM.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = DATASETS MUST HAVE LRECL LESS THAN   *\n*                    255 AND MUST BE EITHER FIXED OR VARIABLE FORMAT. *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 10 = WORK REGISTERS               *\n*                    REGISTER  11      = UNUSED                       *\n*                    REGISTER  12      = ADDRESSABILITY TO PRINTOFF   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   'ZAP*'S)                                          *\n*                                                                     *\n*                TSO COMMAND SYNTAX = PRINTOFF (DATASET LIST)         *\n*                   CLASS(SYSOUT CLASS) DEST(USERID) COPIES(NUMBER)   *\n*                   HOLD/NOHOLD LIST/NOLIST PRINT/NOPRINT             *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, REENTRANT,             *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = PRINTOFF (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM TERMINAL MONITOR PROGRAM AS A COMMAND        *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO COMMAND PROCESSOR          *\n*                PARAMETER LIST MAPPED BY IKJCPPL MACRO               *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE - PROGRAM WILL DISPLAY DECIMAL      *\n*                RETURN CODE AND RETURN VIA BRANCH REGISTER 14        *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = CPPL, PPL, DAPL, DCB, DAPB, CVT,    *\n*                   S99RBP, S99RB, S99TUPL, S99TUNIT, S99TUFLD,       *\n*                   GFPARMS, DFPARMS                                  *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL RDATD.                            *\n*                                                                     *\n*             MACROS = SAVE, GETMAIN, CALLTSSR, LINK, TPUT, FREEMAIN, *\n*                   OPEN, PUT, GET, CLOSE, RDJFCB, IKJRLSA, DYNALLOC, *\n*                   DCB, IKJPARM, IKJPOSIT, IKJKEYWD, IKJNAME,        *\n*                   IKJSUBF, IKJIDENT, IKJENDP, IKJDAP08, IKJDAP18,   *\n*                   IKJDAPL, IKJCPPL, IKJPPL, CVT, IEFZB4D0,          *\n*                   IEFZB4D2, DCBD, IKJEFFGF, IKJEFFDF                *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                BOTH THE DARIFAIL AND GNRLFAIL SERVICE ROUTINES ARE  *\n*                USED TO ISSUE MESSAGES.                              *\n*                THOSE ISSUED BY THE COMMAND ARE FOUND FOLLOWING THE  *\n*                LABEL GNRLERR.                                       *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n*\n*      SUMMARY OF MODIFACATIONS:\n*        ADDED P3800,ANY OPTION TO SPECIFY 'TSO2' FORMS QUEUE.\n*        ADD ECOLOGY OPTION TO NOT EJECT BETWEEN MEMBERS OF PDS\n*        ADD PAGESIZ OPTION TO FILL OUT MEMBER LIST PAGE\n*        EXPAND SIZE OF HEADER LINE 1 TO 132\n*        'B100' IS DEFAULT FORM NUMBER.\n*        ADD LINES(X:Y) KEYWORD FOR PRINTING LINE RANGES.\n*        ADD EJECT KEYWORD FOR TOP OF FORM AFTER HEADER LINE.\n*        ADD SNUM KEYWORD FOR SUPPRESION OF LINE NUMBERS.\n*        ADD CCHAR TO USE FIRST CHAR FOR CARRAIGE CONTROL.\n*        ADD SUPPORT TO PRINT OUTPUT ON 328X TYPE PRINTER.\n*        REQUEST FOR NAME AND MAIL STATION FOR HEADER PAGE\n*        ADD P0 THRU P9 KEYWORDS FOR CLASS/PRINTER SELECTION (JRPRINT).\n*\n***********************************************************************\nPRINTOFF CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15                 LOAD REGISTER 12 WITH ENTRY\n*                                      ADDRESS\n         USING PRINTOFF,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REGISTER 11 WITH ENTRY\n*                                      ADDRESS 4095\n         USING PRINTOFF+4095,R11       ESTABLISH ADDRESSABILITY TO THE\n*                                      REST OF THE PROGRAM CSECT\n         LR    R8,R1                   LOAD REGISTER 8 TO PRESERVE\n*                                      POINTER TO COMMAND PROCESSOR\n*                                      PARAMETER LIST\n         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  LOAD REGISTER 10 TO PRESERVE\n*                                      POINTER TO WORKAREA\n         ST    R13,4(R10)              STORE ADDRESS OF PREVIOUS\n*                                      SAVEAREA\n         ST    R10,8(,R13)             STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R10                 LOAD REGISTER 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVI   ONETIME,0           CLEAR SWITCHES\n         MVI   HDRFLG,X'00'\n*\n***********************************************************************\n*                                                                     *\n*        BUILD PARSE AND DAIR PARAMETER LISTS USING COMMAND           *\n*           PROCESSOR PARAMETER LIST                                  *\n*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *\n*                                                                     *\n***********************************************************************\n*\n         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARAMETER\n*                                      LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R6,DAPLSECT             LOAD ADDRESS OF DAIR PARAMETER\n*                                      LIST\n         USING DAPL,R6                 ESTABLISH ADDRESSABILITY TO DAPL\n         L     R1,CPPLUPT              LOAD POINTER TO USER PROFILE\n*                                      TABLE FROM CPPL\n         L     R2,CPPLECT              LOAD POINTER TO ENVIRONMENT\n*                                      CONTROL TABLE FROM CPPL\n         MVI   DSPRTSW,C' '            INIT DSPRINT SW\nSKPDSPRT EQU   *\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  STORE REGISTER AS ECB FOR PPL\n         LA    R3,ECB                  LOAD ADDRESS OF ECB\n         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT, ECT, AND\n*                                      ECB IN PPL\n         STM   R1,R3,DAPLSECT          STORE ADDRESS OF UPT, ECT, AND\n*                                      ECB IN DAPL\n         MVC   PPLPCL,PCLADDR          MOVE POINTER TO PARAMETER\n*                                      CONTROL LIST INTO PPL\n         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE RETURNED\n*                                      BY PARS\n         ST    R2,PPLANS               STORE POINTER TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE POINTER TO COMMAND BUFFER\n*                                      INTO PPL\n         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORK AREA\n         ST    R2,PPLUWA               STORE ADDRESS IN PPL\n         MVC   DAPLPSCB,CPPLPSCB       MOVE POINTER TO PSCB INTO DAPL\n         DROP  R4,R6,R8                DROP ADDRESSABILITY TO CPPL,\n*                                      DAPL AND PPL\n         MVC   OUTPUTA(OUTPUTAL),OUTPUTAC  MOVE ASA DCB CONSTANT INTO\n*                                      ASA DCB IN WORKAREA\n         MVC   OUTPUTM(OUTPUTML),OUTPUTMC  MOVE MACHINE DCB CONSTANT\n*                                      INTO MACHINE DCB IN WORKAREA\n*\n***********************************************************************\n*                                                                     *\n*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *\n*        ON RETURN PARSBACK -> PDL                                    *\n*        HANDLE ALL ERROR CODES RETURNED BY PARS                      *\n*        IF NECESSARY CALL GENERAL FAIL SERVICE ROUTINE               *\n*                                                                     *\n***********************************************************************\n*\n         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)\n*                                      CALL PARS TO PARSE COMMAND\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    GOODPARS                YES....GO TO GOOD PARS ROUTINE\n         C     R15,FULL4               SEE IF RETURN CODE IS FOUR\n         BE    RETURN                  YES....PARS ISSUED ERROR\n*                                      MESSAGE.  GO CLEANUP AND RETURN\n         C     R15,FULL20              SEE IF RETURN CODE IS TWENTY\n         BE    RETURN                  YES....VALIDITY CHECKING\n*                                      ROUTINE ISSUED ERROR MESSAGE.\n*                                      GO CLEANUP AND RETURN\n         XC    GFPARMS(GFLENGF),GFPARMS  INITIALIZE PARMLIST FOR\n*                                      GENERAL FAIL TO ZEROS\n         LA    R1,GFPARMS              LOAD ADDRESS OF PARMLIST\n         ST    R1,GFPARMP              STORE ADDRESS AS POINTER TO\n*                                      PARMLIST\n         ST    R15,GFRCODE             STORE RETURN CODE IN PARMLIST\n         LA    R1,GFPARSE              LOAD CALLER ID FOR PARS\n         STH   R1,GFCALLID             STORE CALLER ID IN PARMLIST\n         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS\n*                                      SAVEAREA\n         L     R1,24(R1)               LOAD POINTER TO CPPL\n         ST    R1,GFCPPLP              STORE POINTER TO CPPL IN\n*                                      PARMLIST\n         LA    R1,ECB                  LOAD ADDRESS OF OPTIONAL ECB\n         ST    R1,GFECBP               STORE POINTER TO ECB IN\n*                                      PARMLIST\n         SLR   R1,R1                   ZERO REGISTER 1\n         ST    R1,ECB                  SET OPTIONAL ECB TO ZERO\n         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  LINK TO GENERAL FAIL SERVICE\n*                                      ROUTINE TO HANDLE RETURN CODE\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    RETURN                  YES....GO CLEANUP AND RETURN\n         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN\n*                                      CODE\n         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL\n         TPUT  GNRLERR,L'GNRLERR       PUT OUT GENERAL FAIL ERROR\n*                                      MESSAGE\n         TPUT  (R8),8                  PUT OUT DECIMAL RETURN CODE\n         B     RETURN                  GO CLEANUP AND RETURN\n*\n***********************************************************************\n*                                                                     *\n*        SET UP ADDRESSABILITY TO PDL                                 *\n*           AND LOAD REGISTER 6 WITH ADDRESS OF DSNAME PDE            *\n*                                                                     *\n***********************************************************************\n*\nGOODPARS DS    0H\n         L     R9,PARSBACK             LOAD POINTER TO PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         MVI   NUMSW,C' '    MRS     INIT NONUMSW\n         CLI   PNONUM+1,1       MRS\n         BNE   NUMBERED        MRS\n         MVI   NUMSW,C'X'    MRS      SET NONUM SW\n         ZAP   LINENO,=P'0'  MRS      CLEAR LINE COUNTER\nNUMBERED MVI   LINESW,C' '             INIT LINES SW\n         CLI   PLINES+1,1              CHECK IF LINES WAS ENTERED\n         BNE   SKPLINES                SKIP CONVERT OF LINES\n         MVI   LINESW,C'X'             SET LINES SW\n         L     R7,LINES                ADDR OF RANGE1\n         LH    R1,LINES+4              LENGTH OF RANGE\n         BCTR  R1,R0                   ZERO RELATIVE\n         EX    R1,PACKCOPY             PACK RANGE1\n         MVC   LOWER(5),DEC+3          SAVE UPPER RANGE\n         L     R7,LINES+8              ADDR OF RANGE2\n         LTR   R7,R7                   CHECK IF RANGE2 ENTERED\n         BZ    ERRORR2                 MISSING RANGE2\n         LH    R1,LINES+12             LENGTH OF RANGE2\n         BCTR  R1,R0                   ZERO RELATIVE\n         EX    R1,PACKCOPY             PACK RANGE2\n         MVC   UPPER(5),DEC+3          SAVE LOWER RANGE\n         CP    UPPER(5),LOWER(5)       CHECK FOR VALID RANGE\n         BL    ERRORR                  INVALID RANGE\nSKPLINES EQU   *\n         MVI   CCHARSW,C' '            INIT CCHAR SW\n         CLI   PCCHAR+1,1              CHECK FOR CCHAR KEYWORD\n         BNE   SKPCCHAR                NO KEYWORD - DONT SET SW\n         MVI   CCHARSW,C'X'            SET CCHAR SW\nSKPCCHAR EQU   *\n         MVI   EJECTSW,C' '            INIT EJECT SW\n         CLI   PEJECT+1,1              CHECK FOR EJECT SW\n         BNE   SKPEJECT                NO KEYWORD - DONT SET SW\n         MVI   EJECTSW,C'X'            SET EJECT SW\nSKPEJECT EQU   *\n         MVI   SNUMSW,C' '             INIT SNUM SW\n         CLI   PSNUM+1,1               CHECK FOR SNUM KEYWORD\n         BNE   SKPTRUNC                NO KEYWORD - DONT SET SW\n         MVI   SNUMSW,C'X'             SET SNUM SW\nSKPTRUNC EQU   *\n*        SET PAGE WIDTH\n*        MVC   MSLENGTH,=H'131'  MRS\n         CLC   PTRUNC,HALF1      MRS PAGESIZE SPEC\n         BNE   SKPSNUM           MRS\n         L     R7,STRUNC         MRS  GET DATA FILED\n         LH    R1,STRUNC+4       MRS  L'\n         BCTR  R1,0              MRS  DECREMENT\n         EX    R1,PACKCOPY       MRS  MOVE LINE WIDTH\n         CVB   R1,DEC            MRS  BINARY\n         A     R1,FULL4          MRS  ADD VARIABLE LENGTH\n         CH    R1,=H'5'          MRS  MINIMUM\n         BH    *+8               MRS  OK\n         LH    R1,MSLENGTH       MRS  GO BACK TO DEFAULT\n         STH   R1,MSLENGTH       MRS  STORE NEW PAGE WIDTH\n         OI    HDRFLG,X'10'      MRS  TRUNC FLAG SET\nSKPSNUM  EQU   *\n         LA    R6,DSNAMES              LOAD POINTER TO DSNAME LIST\n*        SET PAGE SIZE\n         MVC   PAGESIZE,=H'72'     DEFAULT\n         CLC   PPAGESIZ,HALF1      PAGESIZE SPEC\n         BNE   NOPAGE\n         L     R7,SPAGESIZ         GET DATA FILED\n         LH    R1,SPAGESIZ+4       L'\n         BCTR  R1,0\n         EX    R1,PACKCOPY         PACK IT\n         CVB   R1,DEC              BINARY\n         CH    R1,=H'15'           MINIMUM\n         BH    *+8                 OK\n         LH    R1,PAGESIZE         GO BACK TO DEFAULT\n         STH   R1,PAGESIZE         STORE NEW PAGESIZE\nNOPAGE   DS    0H\n         LH    R1,PAGESIZE         CALC PDS MEMBER TABLE SIZE\n         MH    R1,=AL2(3*12)       3-UP LISTING 3*PAGESIZE*12BYTES\n         LA    R1,8(R1)             PLUS 8-BYTE HEADER\n         ST    R1,MEMDATL          SUBPOOL=0,L' OF PDS MEMBER TABLE\n         CLI   PECOLOGY+1,2        IS CALLER A TREE HATER\n         BE    *+8                 YES-ALLOW PAGE EJECTS\n         OI    ONETIME,2           BYPASS PAGE EJECTS BETWEEN MEMBERS\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\n*\n***********************************************************************\n*                                                                     *\n*        LOOP THROUGH DSNAME LIST RETURNED BY PARS                    *\n*                                                                     *\n***********************************************************************\n*\nNEXT     DS    0H\n         LA    R1,PRINTI               LOAD POINTER TO DDNAME TO BE\n*                                      FREED\n         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE\n         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS\n*                                      ZERO\n         BNZ   CLOSDCBS                NO.....GO CLOSE DCBS AND RETURN\n         L     R5,0(R6)                LOAD POINTER TO DSNAME\n         LH    R4,4(R6)                LOAD LENGTH OF DSNAME\n         STCM  R4,3,DSNLEN             STORE LENGTH OF DSNAME\n         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF\n*                                      MOVE\n         LA    R8,DAP08                LOAD ADDRESS OF DAPB FOR 08\n         USING DAPB08,R8               ESTABLISH ADDRESSABILITY TO DAPB\n         MVC   DAPB08(DAPB08L),DAPB08C MOVE CONSTANTS INTO DAPB\n         LA    R1,DSNLEN               LOAD POINTER TO DSN BUFFER\n         ST    R1,DA08PDSN             STORE POINTER TO DSN BUFFER IN\n*                                      DAPB\n         MVI   DSNBUF,BLANK            BLANK OUT THE DSNAME BUFFER\n         MVC   DSNBUF+1(43),DSNBUF     FINISH BLANKING OUT THE BUFFER\n         EX    R4,MOVEDSN              MOVE IN THE DSNAME\n         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT\n         BNO   CHKPASS                 NO.....GO CHECK IF THERE IS A\n*                                      PASSWORD\n         L     R5,8(R6)                LOAD POINTER TO THE MEMBER NAME\n         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME\n         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF\n*                                      MOVE\n         EX    R4,MOVEMEM              MOVE IN THE MEMBER NAME\nCHKPASS  DS    0H\n         MVC   MEMNAME,DA08MNM         MOVE MEMBER NAME INTO HEADER 2\n         TM    22(R6),HIGH             SEE IF PASSWORD IS PRESENT\n         BNO   ALLOCDD                 NO.....GO ALLOCATE THE DATASET\n         L     R5,16(R6)               LOAD POINTER TO THE PASSWORD\n         LH    R4,20(R6)               LOAD LENGTH OF PASSWORD\n         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF\n*                                      MOVE\n         EX    R4,MOVEPASS             MOVE IN THE PASSWORD\nALLOCDD  DS    0H\n         MVI   TYPESW,C'S'             INIT TYPE TO STANDARD\n         LA    R3,44                   LENGTH OF DSNAME\n         LA    R4,DSNBUF+43            POINT TO END OF DSN\nTYPELOOP EQU   *\n         CLI   0(R4),C'.'              CHECK FOR PERIOD\n         BNE   LOOKNEXT                NOT PERIOD - KEEP CHECKING\n         CLC   1(5,R4),=C'COBOL'       CHECK FOR COBOL DATASET\n         BNE   EXITTYPE                NOT COBOL - MUST BE STANDARD\n         MVI   TYPESW,C'C'             INDICATE COBOL DATASET\n         B     EXITTYPE                EXIT TYPE ROUTINE\nLOOKNEXT EQU   *\n         BCTR  R4,R0                   DECREMENT POSITION\n         BCT   R3,TYPELOOP             LOOK AT NEXT CHARACTER\nEXITTYPE EQU   *\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,ECB                  STORE REGISTER 4 AS ECB\n         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL\n         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL\n         ST    R8,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL\n         DROP  R1                      DROP ADDRESSABILITY TO DAPL\n         CALLTSSR EP=IKJDAIR           CALL DAIR TO ALLOCATE DATASET\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    OUTPUT                  YES....GO PRINT DATASET\n         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR\n         BAL   R2,DAIRFAIL             GO TO DAIRFAIL ROUTINE TO HAVE\n*                                      ERROR MESSAGE PUT OUT\nNOTPMESS DS    0H\n         TPUT  DSNNOTP,L'DSNNOTP       PUT OUT DATASET NOT PRINTED\n*                                      MESSAGE\n         B     EXITMSG                 GO PUT OUT DATASET AND MEMBER\n*                                      NAMES\n*\n***********************************************************************\n*                                                                     *\n*        DETERMINE DATASET TYPE AND CALL PRINT ROUTINE                *\n*                                                                     *\n***********************************************************************\n*\nOUTPUT   DS    0H\n         TM    DA08DSO,DSOPS           X'40' PHYSICAL SEQUENTIAL\n         BO    PRINTIT                 YES....GO PRINT DATASET\n         CLC   DA08MNM,BLANKS          SEE IF MEMBER NAME IS BLANK\n         BNE   PRINTIT                 NO.....GO TREAT AS SEQUENTIAL\n         TM    DA08DSO,DSOPO           X'02' PARTITIONED\n         BO    SCROLLIT                YES....GO SCROLL DIRECTORY\n         DROP  R8                      DROP ADDRESSABILITY TO DAPB\n         TPUT  NOTPSPO,L'NOTPSPO       PUT OUT NOT PARTITIONED OR\n*                                      SEQUENTIAL MESSAGE\n         B     NOTPMESS                GO PUT NOT PRINTED MESSAGE\n*\n***********************************************************************\n*                                                                     *\n*        READS RECORDS USING GET LOCATE                               *\n*           AND ATTRIBUTES OF GIVEN DATASET                           *\n*        WRITES THESE SAME RECORDS USING PUT MOVE                     *\n*           AND THE INPUT DATASET ATTRIBUTES                          *\n*                                                                     *\n***********************************************************************\n*\nPRINTIT  DS    0H\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO\n*                                      INPUT DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN INPUT DCB\nPRINTS   DS    0H                      BRANCH ADDRESS FOR PRINTING\n*                                      MEMBERS\n         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY\n         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED\n*                                      MESSAGE\n         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED\n         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE\n         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO\n*                                      GO PUT OUT ERROR MESSAGE\n         CLC   DCBLRECL,HALF256        SEE IF LRECL IS GREATER THAN 256\n         BH    ERRORL                  YES....GO PUT OUT RECORD LENGTH\n*                                      MESSAGE\n         LA    R9,LINE                 LOAD ADDRESS FOR INPUT\n         SLR   R4,R4                   ZERO OUT REGISTER 4\n         ST    R4,LENGTH               STORE ZERO IN LENGTH (PLUS 2\n*                                      RESERVED BYTES) FIELD\n         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE\n         BO    CHKCNTRL                YES....GO PUT OUT DSNAME\n*                                      NO.....RECFM MUST BE FIXED\n*                                      SO CONTINUE\n         A     R9,FULL4                SET TO HAVE FIXED LENGTH\n         LH    R4,DCBLRECL             LOAD LOGICAL RECORD LENGTH\n         A     R4,FULL4                ADD 4 FOR LENGTH FIELD PREFIX\n         STH   R4,LENGTH               STORE IN LENGTH FIELD\nCHKCNTRL DS    0H\n         MVC   HEADER,HEADERC          MOVE HEADER INTO DATA AREA\n         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE\n         BNO   USEA                    NO.....GO TO USE ASA CONTROL\n         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      MACHINE CODE\n         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA\n         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE\n*                                      FOR SPACE\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    PUTDSN                  YES....GO PUT OUT HEADERS\n         LA    R3,PRINTM               LOAD POINTER TO PRINTM\n         LA    R14,PUTDSN              LOAD ADDRESS FROM RETURN FROM\n*                                      SYSOUT ALLOCATION\n         B     ALLOCOUT                GO TO ALLOCATE SYSOUT\nUSEA     DS    0H\n         TM    DCBRECFM,DCBRECCA       SEE IF CONTROL IS ASA\n         BO    GOODLENA                YES....GO SEE IF DCB IS OPEN\n         CLI   CCHARSW,C'X'            SEE IF USER WANTS ASA\n         BE    GOODLENA                YES....GO SEE IF DCB IS OPEN\n         A     R9,FULL1                SET GET AREA TO ALLOW FOR NO\n*                                      CONTROL\n         A     R4,FULL1                ADD ONE FOR A CONTROL BYTE\n         STH   R4,LENGTH               STORE LENGTH IN PUT AREA\nGOODLENA DS    0H\n         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      ASA CODE\n         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    PUTDSN                  YES....GO PUT OUT HEADERS\n         LA    R3,PRINTA               LOAD POINTER TO PRINTA\n         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO\n*                                      DO SYSOUT ALLOCATION\nPUTDSN   DS    0H\n         TM    HDRFLG,X'01'       MRS  IS NAME ALREADY PRINTED\n         BO    PUTNORM            MRS  YES BRANCH AROUND MODIFIED CODE\n         ST    R6,ST6             MRS\n         SR    R6,R6             MRS\n         BAL   R6,MRSMSG         MRS\n         L     R6,ST6            MRS\n         B     EJECT\nPUTNORM  TM    ONETIME,2           IS CALLER A TREE LOVER\n         BO    EJECTSKP            YES-BYPASS EJECTS\nEJECT    DS    0H\n         OI    ONETIME,1           TURN ON ONETIME SW\n         PUT   (R5),(R4)               PUT OUT PAGE EJECT\nEJECTSKP DS    0H\n         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER\n         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO\n*                                      INTO SECOND HEADER\n         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE\n         CLI   MEMNAME,BLANK           SEE IF MEMBER NAME IS BLANK\n         BE    NOMEM                   YES....NO NEED TO PUT IN PARENS\n         MVI   OPENPRN,C'('            MOVE OPEN PAREN INTO DSNAME\n         MVI   CLOSEPRN,C')'           MOVE CLOSE PAREN INTO DSNAME\n         B     PUTHDR2                 GO PUT OUT HEADER 2\nMRSMSG   OI    HDRFLG,X'01'       MRS  SET NAME FLAG TO COMPLETED\n         PUT   (R5),(R4)          MRS  EJECT PAGE\n         ST    R4,ST4             MRS  SAVE R4\n         SR    R4,R4              MRS  CLEAR R4\n         LA    R4,34              MRS  SET UP 34 LINE NAME PAGE\nPUTNAME  PUT   (R5),MRSLINE       MRS  WRITE OUT TO HEADER\n         BCT   R4,PUTNAME         MRS   55 TIMES\n         SR    R4,R4              MRS  CLEAR REGISTER 4\n         L     R4,ST4             MRS  RESTORE R4\n         BR    R6                 MRS  BRANCH TO CALLER\nNOMEM    DS    0H\n         MVI   OPENPRN,BLANK           MOVE BLANK INSTEAD OF OPEN AND\n         MVI   CLOSEPRN,BLANK          CLOSE PARENS\nPUTHDR2  DS    0H\n         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2\n         CLI   EJECTSW,C'X'            CHECK FOR EJECTS\n         BNE   NOEJECT                 NO EJECTS REQUIRED\n         MVC   HEADER2(5),SPACE        CHANGE HEADER2 TO EJECT\n         B     PUTEJCT                 WRITE HEADER 2\nNOEJECT  EQU   *\n         MVC   HEADER2(4),SPACE        CHANGE HEADER 2 FOR PUT OF BLANK\nPUTEJCT  EQU   *\n*                                      LINE\n         PUT   (R5),HEADER2            PUT OUT BLANK LINE\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN SPACE AS CONTROL\n*                                      CHARACTER\n         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE\n         BNO   COPYF                   NO.....GO HANDLE FIXED INPUT\n         TM    DCBRECFM,DCBRECCC       SEE IF THERE IS A CONTROL BYTE\n         BZ    COPYVNO                 NO.....GO TO ADD CONTROL FOR\n*                                      VARIABLE\nCOPYV    DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         ST    R14,ST14                PUT OUT OUTPUT LINE\n         LA    R14,*+12\n         ST    R14,STADDR\n         B     PUTLINE\n         L     R14,ST14\n         B     COPYV                   GO GET NEXT RECORD\n*\nCOPYVNO  DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         SLR   R15,R15                 ZERO REGISTER 15 FOR INSERT\n         ICM   R15,7,LENGTH+1          INSERT LENGTH AND RESERVED BYTE\n         A     R15,FULL256             ADD 1 TO LENGTH\n         STCM  R15,7,LENGTH            STORE LENGTH AND RESERVED BYTE\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN CONTROL SAVED IN HEADER\n         ST    R14,ST14                PUT OUT OUTPUT LINE\n         LA    R14,*+12\n         ST    R14,STADDR\n         B     PUTLINE\n         L     R14,ST14\n         B     COPYVNO                 GO GET NEXT INPUT RECORD\n*\nCOPYF    DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         ST    R14,ST14                PUT OUT OUTPUT LINE\n         LA    R14,*+12\n         ST    R14,STADDR\n         B     PUTLINE\n         L     R14,ST14\n         B     COPYF                   GO GET NEXT RECORD\n*\nEXIT     DS    0H\n         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS OPEN\n         BNO   EXITMSG                 NO....GO PUT OUT DATASET AND\n*                                      MEMBER NAMES\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nEXITMSG  DS    0H\n         TPUT  DSNMSG,L'DSNMSG         PUT OUT DATASET NAME MESSAGE\n         L     R5,0(R6)                LOAD POINTER TO DDNAME\n         LH    R4,4(R6)                LOAD LENGTH OF DSNAME\n         TPUT  (R5),(R4)               PUT OUT DSNAME\n         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT\n         BNO   CONTINUE                NO.....GO CHECK FOR ANOTHER\n*                                      DATASET NAME\n         L     R5,8(R6)                LOAD POINTER TO THE MEMBER NAME\n         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME\n         TPUT  MEMMSG,L'MEMMSG         PUT OUT MEMBER NAME MESSAGE\n         TPUT  (R5),(R4)               PUT OUT MEMBER NAME\n         B     CONTINUE                GO CONTINUE WITH NEXT DATASET\n         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB\nPUTLINE  DS    0H\n         TM    HDRFLG,X'10'       MRS\n         BZ    LINESWCK           MRS\n         MVC   LENGTH(2),MSLENGTH MRS\nLINESWCK CLI   LINESW,C'X'        MRS  IS THERE A LINE RANGE\n         BNE   SKPRANGE           MRS  NO - SKIP ANGE CHECK\n         CLI   TYPESW,C'C'        MRS  CHECK FOR COBOL DATASET\n         BE    COBNUM             MRS  MUST BE COBOL\n         CLI   NUMSW,C'X'         MRS CHECK FOR NONUM DATASET\n         BNE   STANDARD           MRS  MUST BE STANDARD\nNONUM    AP    LINENO(5),=P'1'    MRS  ADD 1 TO LINENO\n         CP    LINENO(5),LOWER(5) MRS  CHECK WITHIN RANGE\n         BL    SKIPREC            MRS  NOT IN RANGE - SKIP\n         CP    LINENO(5),UPPER(5) MRS  CHECK WITHIN RANGE\n         BH    SKIPREC            MRS  NOT IN RANGE - SKIP\n         B     SKPRANGE           MRS  GO PRINT RECORD\nCOBNUM   TRT   LINE+5(6),NUMERIC       VALID LINE NUMBER?\n         BNZ   ERRORN                  ABORT PRINTOFF\n         PACK  LINENO(5),LINE+5(6)     PACK LINE NUMBER\n         CP    LINENO(5),LOWER(5)      CHECK WITHIN RANGE\n         BL    SKIPREC                 NOT IN RANGE - SKIP\n         CP    LINENO(5),UPPER(5)      CHECK WITHIN RANGE\n         BH    SKIPREC                 NOT IN RANGE - SKIP\n         B     SKPRANGE                GO PRINT RECORD\nSTANDARD EQU   *\n         TRT   LINE+77(8),NUMERIC      VALID LINE NUMBER\n         BNZ   ERRORN                  ABORT PRINTOFF\n         PACK  LINENO(5),LINE+77(8)    PACK LINE NUMBER\n         CP    LINENO(5),LOWER(5)      CHECK WITHIN RANGE\n         BL    SKIPREC                 NOT IN RANGE - SKIP\n         CP    LINENO(5),UPPER(5)      CHECK WITHIN RANGE\n         BH    SKIPREC                 NOT IN RANGE - SKIP\nSKPRANGE EQU   *\n         CLI   SNUMSW,C'X'             CHECK FOR SNUM KEYWORD\n         BNE   SKPSUPRS                NO - DONT SUPPRESS NUMBERS\n         CLI   TYPESW,C'S'             CHECK IF STANDARD NUMBERS\n         BNE   SUPCOBOL                MUST BE COBOL\n         MVC   LINE+77(8),=CL8' '      BLANK OUT NUMBER\n         B     SKPSUPRS                GO PRINT LINE\nSUPCOBOL EQU   *\n         MVC   LINE+5(6),=CL8' '       BLANK OUT NUMBER\nSKPSUPRS EQU   *\n         PUT   (R5),LINE               PRINT RECORD\nSKIPREC  EQU   *\n         L     R14,STADDR\n         BR    R14\nERRORL   DS    0H\n         TPUT  DSNISL,L'DSNISL         PUT OUT DATASET NOT PRINTED DUE\n*                                      TO RECORD LENGTH TOO LONG\n*                                      MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRORU   DS    0H\n         TPUT  DSNISU,L'DSNISU         PUT OUT DATASET NOT PRINTED DUE\n*                                      TO UNDEFINED RECORD FORMAT\n*                                      MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRI     DS    0H\n         TPUT  SYNADI,L'SYNADI         PUT OUT DATASET NOT PRINTED DUE\n*                                      TO SYNAD ERROR ON INPUT DATASET\n*                                      MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRO     DS    0H\n         TPUT  SYNADO,L'SYNADO         PUT OUT DATASET NOT PRINTED DUE\n*                                      UNDEFINED RECORD FORMAT\n*                                      MESSAGE\n         B     CLOSDCBS                GO CLOSE OPEN DCBS AND RETURN\n*                                                                     *\nERRORR   DS    0H\n         TPUT  INVRNG,L'INVRNG         INVALID RANGE OF LINES\n         B     RETURN                  RETURN TO TMP\nERRORR2  DS    0H\n         TPUT  INVRNG2,L'INVRNG2       MISSING UPPER RANGE\n         B     RETURN                  RETURN TO TMP\nERRORN   DS    0H\n         TPUT  INVNUM,L'INVNUM         INVALID LINE NUMBER FOUND\n         B     CLOSDCBS                CLOSE OPEN DCBS AND RETURN\nERRORP   DS    0H\n         TPUT  INVPRTR,L'INVPRTR       INVALID PRINTER SPECIFICATION\n         B     RETURN                  RETURN TO TMP\n***********************************************************************\n*                                                                     *\n*        READ THE DIRECTORY OF A PDS                                  *\n*           THEN EITHER LIST MEMBER NAMES,                            *\n*           PRINT MEMBERS,                                            *\n*           OR LIST MEMBER NAMES AND PRINT MEMBERS                    *\n*                                                                     *\n***********************************************************************\n*\nSCROLLIT DS    0H\n         ST    R6,SAVER6               SAVE REGISTER 6\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED\n         BL    CONTSCR                 LOW....CONTINUE WITH SCROLL\n         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED\n         BE    CONTINUE                YES....SKIP SCROLL\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nCONTSCR  DS    0H\n         LA    R8,DIRECT               LOAD POINTER TO DIRECTORY DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   DIRECT(DIRECTL),DIRECTC MOVE DIRECTORY DCB CONSTANT INTO\n*                                      DIRECTORY DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN DIRECTORY DCB\n         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY\n         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED\n*                                      MESSAGE\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        GETMAIN MEMBER TABLE FOR STORAGE OF DIRECTORY NAMES, ETC.    *\n*           INITIALIZE TABLE                                          *\n*                                                                     *\n***********************************************************************\n*\n         L     R0,MEMDATL              LOAD LENGTH OF GETMAIN FOR\n*                                      MEMBER TABLE\n         LR    R2,R0                   SAVE IN REGISTER 2\n         GETMAIN R,LV=(0)              GETMAIN MEMBER TABLE STORAGE\n         ST    R1,MEMTABLE             SAVE ADDRESS OF MEMBER TABLE\n         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE\n*                                      IN USE\n         LA    R3,0(R2,R1)             LOAD ADDRESS OF END OF TABLE\n         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER\n*                                      TABLE\n         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO\n*                                      THE FIRST ENTRY\n         USING MEMDSECT,R4             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER TABLE DSECT\n         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND BUILD MEMBER TABLE                        *\n*                                                                     *\n***********************************************************************\n*\nGETDIR   EQU   *\n         GET   (R8),DATA               GET A DIRECTORY BLOCK\n         CLC   DATA,HALF12             SEE IF BLOCK IS UNUSED\n         BL    FREEBLK                 YES....GO HANDLE DIRECTORY END\n         LA    R9,DATA+2               LOAD POINTER TO FIRST DIRECTORY\n*                                      ENTRY\n         SLR   R7,R7                   ZERO REGISTER 7 FOR INSERT\n         ICM   R7,3,DATA               INSERT LENGTH USED OF THIS BLOCK\n         LA    R7,DATA-1(R7)           LOAD LAST USED BYTE OF BLOCK\nUNBLOCK  DS    0H\n         MVC   MEMNTTR,0(R9)           PUT NAME AND TTR IN TABLE\n         MVC   CFIELD,11(R9)           PUT C FIELD IN TABLE\n         CLI   MEMBER,HEXFF            SEE IF LAST MEMBER\n         BE    FREEBLK                 YES....GO HANDLE DIRECTORY END\n         IC    R6,CFIELD               INSERT CFIELD INTO REGISTER 6\n         SLL   R6,27                   SHIFT OUT HIGH ORDER BITS\n         SRL   R6,26                   SHIFT RIGHT TO GET LENGTH OF\n*                                      USER DATA\n         LA    R6,12(R6)               ADD STANDARD ENTRY LENGTH\n         LA    R4,MEMSECTN             LOAD PINTER TO NEXT TABLE ENTRY\n         LA    R5,1(R5)                INCREMENT NUMBER OF MEMBERS IN\n*                                      TABLE\n         C     R4,ENDTABLE             SEE IF END OF TABLE\n         BL    NEXTNTRY                LOW.....GO PROCESS NEXT ENTRY\n         LR    R0,R2                   LOAD LENGTH OF TABLE FOR GETMAIN\n         GETMAIN R,LV=(0)              GET NEXT TABLE\n         L     R14,PRESENT             LOAD REGISTER 14 WITH ADDRESS OF\n*                                      LAST TABLE\n         ST    R1,0(R14)               CHAIN MEMBER TABLES TOGETHER\n         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE\n*                                      IN USE\n         LA    R3,0(R2,R1)             LOAD ADDRESS OF TABLE END\n         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER\n*                                      TABLE\n         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO\n*                                      THE FIRST ENTRY\n         STH   R5,4(R14)               STORE MEMBER COUNT IN OLD TABLE\n         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO\nNEXTNTRY DS    0H\n         BXLE  R9,R6,UNBLOCK           INCREMENT REGISTER 9 WITH\n*                                      REGISTER 6 AND BRANCH\n*                                      LESS THAN OR EQUAL TO\n*                                      REGISTER 7 TO UNBLOCK\n         B     GETDIR                  NO.....GO GET NEXT DIRECTORY\n*                                      BLOCK\n         DROP  R4                      DROP ADDRESSABILITY TO TABLE\n*\n***********************************************************************\n*                                                                     *\n*        LIST MEMBERS IF:                                             *\n*           LIST SPECIFIED OR                                         *\n*           BOTH PRINT AND NOLIST WERE NOT SPECIFIED                  *\n*                                                                     *\n***********************************************************************\n*\nFREEBLK  DS    0H\n         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO CLOSE LIST\n         CLOSE ((R8),),MF=(E,OPENLST)  CLOSE DIRECTORY DCB\n         L     R2,PRESENT              LOAD POINTER TO LAST TABLE\n         STH   R5,4(R2)                STORE COUNT OF MEMBERS\n         LA    R1,PRINTI               LOAD POINTER TO PRINT DDNAME\n         BAL   R2,FREEDD               GO FREE DDNAME\n         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS\n*                                      ZERO\n         BNZ   CLOSDCBS                NO.....GO CLOSE DCBS AND RETURN\n         LA    R8,DAP08                LOAD POINTER TO DAPB 08\n         USING DAPB08,R8               ESTABLISH ADDRESSABILITY TO\n*                                      DAPB\n         L     R4,MEMTABLE             LOAD POINTER TO FIRST TABLE\n         CLC   4(2,R4),HALF0           SEE IF THERE WERE ANY MEMBERS\n         BE    ENDMEMB                 ZERO...GO FREE MEMBER TABLE\n         MVC   DA08MNM,8(R4)           MOVE IN FIRST MEMBER NAME\n         SLR   R5,R5                   ZERO REGISTER 5\n         ST    R5,ECB                  STORE REGISTER 5 AS ECB\n         L     R1,SAVER6               LOAD POINTER TO DSNAME PDE\n         MVC   DSNLEN,4(R1)            MOVE IN LENGTH OF DATASET NAME\n         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL\n         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL\n         ST    R8,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL\n         DROP  R1,R8                   DROP ADDRESSABILITY TO DAPL AND\n*                                      DAPB\n         CALLTSSR EP=IKJDAIR           CALL DAIR TO ALLOCATE DATASET\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    READJFCB                YES....GO READ JFCB\n         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR\n         BAL   R2,DAIRFAIL             GO TO DAIRFAIL ROUTINE TO HAVE\n*                                      ERROR MESSAGE PUT OUT\n         TPUT  DSNNOTP,L'DSNNOTP       PUT OUT DATASET NOT PRINTED\n*                                      MESSAGE\n         L     R6,SAVER6               RESTORE REGISTER 6\n         L     R5,0(R6)                LOAD POINTER TO DDNAME\n         LH    R4,4(R6)                LOAD LENGTH OF DSNAME\n         TPUT  (R5),(R4)               PUT OUT DSNAME\n         B     CLOSDCBS                GO CLOSE DCBS AND RETURN\nREADJFCB DS    0H\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO\n*                                      INPUT DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         LA    R1,XLIST                LOAD ADDRESS OF EXIT LIST\n         ST    R1,DCBEXLST             STORE ADDRESS OF EXIT LIST IN\n*                                      DCB\n         LA    R1,SEXIT                LOAD ADDRESS OF EODAD EXIT\n         ST    R1,DCBEODAD             STORE ADDRESS EODAD IN DCB\n         LA    R2,JFCBAREA             LOAD ADDRESS OF JFCBAREA\n         ST    R2,XLIST                STORE ADDRESS IN EXIT LIST\n         MVI   XLIST,X'87'             SET END OF LIST AND JFCB BYTE\n         MVC   RDJL,OPENCLOS           MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO READJFCB LIST IN\n*                                      WORKAREA\n         RDJFCB (INPUT,),MF=(E,RDJL)   READ JFCB INTO JFCBAREA\n         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN INPUT DCB\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED\n         BE    NOLIST                  YES....SKIP LISTING\n         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED\n         BE    LISTIT                  YES....GO LISTIT\n         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED\n         BE    NOLIST                  YES....SKIP LISTING\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nLISTIT   DS    0H\n         MVC   HEADER,HEADERM          MOVE HEADER INTO DATA AREA\n         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n         BNO   SUSEA                   NO.....GO TO USE ASA CONTROL\n         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      MACHINE CODE\n         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA\n         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE\n*                                      FOR SPACE\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    SPUTDSN                 YES....GO PUT OUT HEADERS\n         LA    R3,PRINTM               LOAD POINTER TO PRINTM\n         LA    R14,SPUTDSN             LOAD ADDRESS FOR RETURN FROM\n*                                      SYSOUT ALLOCATION\n         B     ALLOCOUT                GO TO ALLOCATE SYSOUT\nSUSEA    DS    0H\n         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      ASA CODE\n         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    SPUTDSN                 YES....GO PUT OUT HEADERS\n         LA    R3,PRINTA               LOAD POINTER TO PRINTA\n         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO\n*                                      DO SYSOUT ALLOCATION\nSPUTDSN  DS    0H\n         TM    HDRFLG,X'01'     MRS\n         BO    NLSTNRM          MRS\n         ST    R6,ST6           MRS\n         SR    R6,R6            MRS\n         BAL   R6,MRSMSG        MRS\n         L     R6,ST6           MRS\nNLSTNRM  PUT   (R5),(R4)               PUT OUT PAGE EJECT\n         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER\n         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO\n*                                      INTO SECOND HEADER\n         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE\n         MVI   OPENPRN,BLANK           BLANK OUT MEMBER NAME\n         MVC   MEMNAME(9),OPENPRN      FINISH BLANKING OUT MEMBER NAME\n         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2\n         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST TABLE\n         MVC   LENGTH,HALF85           SET LENGTH TO 85 BYTES\n         MVC   LENGTH+2,HALF0          ZERO RESERVED BYTES\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN HEADER CONTROL BYTE\n*\n***********************************************************************\n*                                                                     *\n*        LIST MEMBER NAMES                                            *\n*                                                                     *\n***********************************************************************\n*\nSCROLLER DS    0H\n         LH    R10,PAGESIZE            LOAD LINE COUNT\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LH    R7,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE\n         LTR   R7,R7                   SEE IF THERE ARE ENTRIES\n         BZ    NOLIST                  NO.....GO PRINT MEMBERS\n         LA    R2,8(R2)                LOAD ADDRESS OF FIRST MEMBER\n         USING MEMDSECT,R2             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER TABLE ENTRY\nLOOP1    DS    0H\n         LA    R6,DATA                 LOAD ADDRESS OF OUTPUT BUFFER\n         MVI   DATA,BLANK              BLANK OUT OUTPUT BUFFER\n         MVC   DATA+1(79),DATA         FINISH BLANKING BUFFER\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS\n         BZ    NOTALIAS                NO.....CONTINUE WITH MAIN NAME\n         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME\nNOTALIAS DS    0H\n         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER\n         ST    R2,SAVER2               SAVE REGISTER 2\n         LA    R3,2                    LOAD NUMBER OF COLUMNS LEFT\n         LA    R8,1                    LOAD ENTRY NUMBER\nLOOP2    AH    R8,PAGESIZE             LOAD POINTER TO NEXT COLUMN\n*                                      ENTRY\n         CR    R8,R7                   SEE IF VALID ENTRY\n         BH    END2                    NO.....GO PRINT LINE\n         LH    R0,PAGESIZE\n         MH    R0,=H'12'           TIMES MEMBER L'\n         AR    R2,R0                   LOAD POINTER TO MEMBER NAME\n         LA    R6,30(R6)               LOAD POINTER TO NEXT OUTPUT\n*                                      BUFFER LOCATION\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS\n         BZ    NOTAL2                  NO.....CONTINUE WITH MAIN NAME\n         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME\nNOTAL2   DS    0H\n         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER\n         BCT   R3,LOOP2                DECREMENT COLUMN COUNT\nEND2     DS    0H\n         PUT   (R5),LINE               PUT OUT OUTPUT LINE\n         L     R2,SAVER2               RELOAD REGISTER 2\n         LA    R2,MEMSECTN             LOAD POINTER TO NEXT MEMBER NAME\n         BCT   R10,MOREROW             DECREMENT ROW COUNT\n         PUT   (R5),(R4)               PUT OUT PAGE EJECT WHEN ZERO\n         B     LOOP3                   RESET COUNTERS\nMOREROW  DS    0H\n         BCT   R7,LOOP1                DECREMENT MEMBER COUNT FOR\n*                                      CURRENT TABLE\nLOOP3    L     R2,PRESENT              LOAD POINTER TO CURRENT TABLE\n         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE\n         LTR   R2,R2                   SEE IF IT WAS THE LAST TABLE\n         BNZ   SCROLLER                NO.....GO LIST OUT NEXT TABLE\n*\n***********************************************************************\n*                                                                     *\n*        PRINT MEMBERS IF:                                            *\n*           PRINT SPECIFIED OR                                        *\n*           BOTH LIST AND NOPRINT WERE NOT SPECIFIED                  *\n*                                                                     *\n***********************************************************************\n*\nNOLIST   DS    0H\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED\n         BE    ENDMEMB                 YES....GO SKIP PRINT\n         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED\n         BE    CONTPRT                 YES....GO PRINT MEMBERS\n         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED\n         BE    ENDMEMB                 YES....GO SKIP PRINT\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nCONTPRT  DS    0H\n         L     R6,SAVER6               RESTORE REGISTER 6\n         LA    R8,INPUT                LOAD ADDRESS OF INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED\n         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE\n         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO\n*                                      GO PUT OUT ERROR MESSAGE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\n         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB\n         TPUT  PRTMSG,L'PRTMSG         PUT OUT DATASET PRINT MESSAGE\n         L     R2,0(R6)                LOAD POINTER TO DDNAME\n         LH    R3,4(R6)                LOAD LENGTH OF DSNAME\n         TPUT  (R2),(R3)               PUT OUT DSNAME\n         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST MEMBER\n*                                      TABLE\n         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE\n         LTR   R3,R3                   SEE IF THERE ARE ANY MEMBERS\n         BZ    ENDMEMB                 NO.....GO TO END OF SCROLLER\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME\nNEXTMEMB DS    0H\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS ENTRY\n         BO    AGAIN                   YES....DO NOT PRINT IT\nPRINTMEM DS    0H\n         MVC   MEMNAME,MEMBER          MOVE MEMBER NAME INTO HEADER\n         MVC   JFCBELNM,MEMBER         MOVE MEMBER NAME INTO JFCBAREA\n         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO OPEN LIST\n         OPEN  ((R8),INPUT),TYPE=J,MF=(E,OPENLST)\n*                                      OPEN INPUT DCB\n         STM   R2,R3,SAVER2            SAVE REGISTERS 2 AND 3\n         B     PRINTS                  GO PRINT MEMBER\nSEXIT    DS    0H\n         LM    R2,R3,SAVER2            RESTORE REGISTERS 2 AND 3\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nAGAIN    DS    0H\n         LA    R2,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER\n         BCT   R3,NEXTMEMB             BRANCH TO HANDLE NEXT MEMBER\n         L     R14,PRESENT             ZERO...LOAD CURRENT TABLE\n*                                      ADDRESS\n         L     R2,0(R14)               LOAD ADDRESS OF NEXT TABLE\n         LTR   R2,R2                   SEE IF ZERO, LAST TABLE\n         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN NEXT\n*                                      TABLE\n         LTR   R3,R3                   SEE IF ANY MEMBERS IN TABLE\n         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS\n         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME\n         B     NEXTMEMB                GO GET NEXT MEMBER\nENDMEMB  DS    0H\n         L     R2,MEMTABLE             LOAD POINTER TO FIRST TABLE\nFREETABS DS    0H\n         LR    R1,R2                   LOAD AREA TO BE FREED\n         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE\n         L     R0,MEMDATL              LOAD SIZE OF AREA TO BE FREED\n         FREEMAIN R,LV=(0),A=(1)       FREE STORAGE GETMAINED FOR TABLE\n         LTR   R2,R2                   SEE IF THERE WAS ANOTHER TABLE\n         BNZ   FREETABS                YES....GO FREE NEXT TABLE\n         L     R6,SAVER6               RESTORE REGISTER 6\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN\n         BNO   EXITMSG                 NO.....GO HANDLE NEXT DATASET\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n         B     EXITMSG                 GO HANDLE NEXT DATASET\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        PUT OUT SYNAD ERROR MESSAGE,                                 *\n*           GO FREE MEMBER TABLES, AND                                *\n*           CONTINUE WITH NEXT DATASET                                *\n*                                                                     *\n***********************************************************************\n*\nSERRI    DS    0H\n         TPUT  SYNADI,L'SYNADI         PUT OUT DATASET NOT PRINTED DUE\n*                                      TO SYNAD ERROR ON INPUT\n*                                      DATASET MESSAGE\n         B     ENDMEMB                 GO FREE MEMBER TABLES\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR MAIN NAME,                                        *\n*           SAME TTR AND NOT AN ALIAS                                 *\n*                                                                     *\n***********************************************************************\n*\nLOOKLOOP DS    0H\n         STM   R3,R4,SAVER3            SAVE REGISTERS 3 AND 4\n         L     R3,MEMTABLE             LOAD ADDRESS OF FIRST TABLE\n         USING MEMDSECT,R3             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER ENTRY\nLOOP4    DS    0H\n         ST    R3,CURRENT              SAVE ADDRESS OF PRESENT TABLE\n         LH    R4,4(R3)                LOAD NUMBER OF ELEMENTS IN TABLE\n         LTR   R4,R4                   SEE IF THERE ARE ZERO ELEMENTS\n         BZ    NOMAIN                  YES....GO HANDLE MAIN NOT FOUND\n         LA    R3,8(R3)                LOAD ADDRESS OF FIRST MEMBER\nLOOP5    DS    0H\n         CLC   MEMTTR,8(R2)            SEE IF TTRS ARE THE SAME\n         BE    SAMETTR                 YES....GO SEE IF IT IS AN ALIAS\nENDLP5   DS    0H\n         LA    R3,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER\n         BCT   R4,LOOP5                DECREMENT MEMBER COUNT\n         L     R3,CURRENT              LOAD ADDRESS OF THIS TABLE\n         L     R3,0(R3)                LOAD ADDRESS OF NEXT TABLE\n         LTR   R3,R3                   SEE IF IT WAS THE LAST TABLE\n         BNZ   LOOP4                   NO.....GO CHECK NEXT TABLE\n         B     NOMAIN                  GO HANDLE MAIN NOT FOUND\nSAMETTR  DS    0H\n         TM    CFIELD,HIGH             SEE IF THIS IS ALSO AN ALIAS\n         BO    ENDLP5                  YES....GO LOOK FOR ANOTHER TTR\n         MVC   11(8,R6),MEMBER         MOVE MEMBER NAME INTO OUTPUT\n         B     ENDLOOK                 GO TO RETURN TO CALLER\nNOMAIN   DS    0H\n         MVC   11(8,R6),ALIAS          INDICATE THIS IS AN ALIAS\nENDLOOK  DS    0H\n         LM    R3,R4,SAVER3            RESTORE REGISTERS 3 AND 4\n         BR    R14                     RETURN TO CALLER\n         DROP  R3                      DROP ADDRESSABILITY TO TABLE\n*\nCONTINUE DS    0H\n         L     R6,24(R6)               LOAD POINTER TO NEXT DSNAME ON\n*                                      CHAIN\n         NI    ONETIME,255-1       RESET ONE TIME SW\n         C     R6,ENDCHAIN             SEE IF END OF CHAIN IS REACHED\n         BNE   NEXT                    NO.....GO DO NEXT DATASET NAME\nCLOSDCBS DS    0H\n         TM    INPUT+48,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN\n         BNO   CHKOUTA                 NO.....GO CHECK DCB FOR ASA CODE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,INPUT                LOAD POINTER TO INPUT DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nCHKOUTA  DS    0H\n         TM    OUTPUTA+48,DCBOFOPN     SEE IF OUTPUT DCB FOR ASA WAS\n*                                      OPENED\n         BNO   CHKOUTM                 NO.....GO CHECK DCB FOR MACHINE\n*                                      CODE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,OUTPUTA              LOAD POINTER TO ASA CODE DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE ASA CODE OUTPUT DCB\n         LA    R1,PRINTA               LOAD ADDRESS OF PRINT DDNAME\n         BAL   R2,FREEDD               GO FREE ASA CODE OUTPUT DDNAME\nCHKOUTM  DS    0H\n         TM    OUTPUTM+48,DCBOFOPN     SEE IF OUTPUT DCB FOR MACHINE\n*                                      CODE WAS OPENED\n         BNO   RETURN                  NO.....GO FREE GETMAINED AREAS\n*                                      AND RETURN\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,OUTPUTM              LOAD POINTER TO MACHINE CODE DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE MACHINE CODE OUTPUT DCB\n         LA    R1,PRINTM               LOAD ADDRESS OF PRINT DDNAME\n         BAL   R2,FREEDD               GO FREE MACHINE CODE OUTPUT\n*                                      DDNAME\n*\n***********************************************************************\n*                                                                     *\n*        CLEANUP AREAS GETMAINED BY PARS,                             *\n*           SET RETURN CODE, RESTORE REGISTERS AND                    *\n*           RETURN TO CALLER                                          *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n         IKJRLSA PARSBACK              RELEASE AREAS GETMAINED BY PARS\n         LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD ADDRESS OF PREVIOUS SAVE\n*                                      AREA\n         LA    R0,LDYNAMIC             LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMINED AREA\n         SLR   R15,R15                 ZERO REGISTER 15.  RETURN CODE\n*                                      CODE WILL ALWAYS BE ZERO\n         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN\n*                                      ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n*\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO CONVERT NONZERO RETURN CODES TO DECIMAL           *\n*           FOR DISPLAY                                               *\n*                                                                     *\n***********************************************************************\n*\nSETCODE  DS    0H\n         CVD   R8,DEC                  CONVERT RETURN CODE TO DECIMAL\n         LA    R7,DEC\n         LA    R8,CONV\n         UNPK  0(8,R8),0(8,R7)         UNPACK RETURN CODE\n         MVZ   1(7,R8),0(R8)           MOVE ZONES IN CONVERTED RETURN\n*                                      CODE\n         BR    R14                     RETURN\n*\n***********************************************************************\n*                                                                     *\n*        FREE AND REALOCATE PRINTX FILE AS SYSOUT                     *\n*                                                                     *\n***********************************************************************\n*\nALLOCOUT DS    0H\n         STM   14,9,ALCSAVE            SAVE WORK REGISTERS\n         LR    R1,R3                   LOAD POINTER TO DDNAME\n         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE\n         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS\n*                                      ZERO\n         BNZ   OPENFAIL                NO.....GO PUT OUT OPEN FAILED\n         LA    R8,REQBLK               LOAD POINTER TO REQUEST BLOCK\n         ST    R8,RBPTR                INITIALIZE REQUEST BLOCK POINTER\n         MVI   RBPTR,S99RBPND          INDICATE END OF PARAMETER LIST\n         USING S99RB,R8                ESTABLISH ADDRESSABILITY TO\n*                                      REQUEST BLOCK\n         MVC   S99RBLN(RBLEN),REQBLKC  INITALIZE RB\n         LA    R1,TEXTPTRS             LOAD POINTER TO TEXT POINTERS\n         ST    R1,S99TXTPP             STORE POINTER IN RB\n         DROP  R8                      DROP ADDRESSABILITY TO RB\n         USING S99TUPL,R1              ESTABLISH ADDRESSABILITY TO\n*                                      HEXT UNIT POINTER LIST\n         LA    R2,TEXTA                LOAD POINTER TO FIRST TEXT UNIT\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         USING S99TUNIT,R2             ESTABLISH ADDRESSABILITY TO\n*                                      TEXT UNIT\n         MVC   S99TUKEY(TEXTALEN),TEXTAC  INITIALIZE TEXT UNIT A\n         MVC   S99TUPAR(8),0(R3)       MOVE IN PARAMETER (DDNAME)\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTB                LOAD POINTER TO TEXT UNIT B\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTBLEN),TEXTBC  INITIALIZE TEXT UNIT B\n***********************************************************************\n*                                                                     *\n*        SET UP ADDRESSABILITY TO PDL                                 *\n*           AND SEE IF SYSOUT CLASS/DEST ARE PRESENT                  *\n*                                                                     *\n***********************************************************************\n*\n         L     R9,PARSBACK  MRS        LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9  MRS        ESTABLISH ADDRESSABILITY TO PDL\n         CLI   PRINTER+1,0  MRS        CHECK IF PRINTER ENTERED\n         BE    SETHDRS      MRS        NO PRINTER - TERMINATE\n         LH    R7,PRINTER   MRS        GET PRINTER NUMBER\n         BCTR  R7,R0        MRS        DECREMENT PRINTER NUMBER\n         MH    R7,=H'3'\n         A     R7,=A(PRTTAB)  MRS      FIND TABLE ENTRY\n         OI    HDRFLG,X'01'   MRS     TURN OFF HEADERS\n         MVC   S99TUPAR(1),=C'9' MRS   INITIALIZE CLASS TO 0\n         MVC   DSPRTNUM+3(3),0(R7) MRS MOVE IN PRTR NO.\n         LA    R1,4(R1)      MRS       LOAD POINTER TO NEXT TEXT UNIT\n         LA    R2,TEXTC      MRS       LOAD POINTER TO TEXT UNIT C\n         ST    R2,S99TUPTR   MRS       STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTCLEN),TEXTCC  INITIALIZE TEXT UNIT C\n         MVC   S99TUPAR(6),DSPRTNUM    DEST = RMTXXX\n         B     NOHOLD     MRS          GO FREE SYSOUT (PARMS)\nSETHDRS  EQU   *                MRS\n         CLI   PHDRS+1,1        MRS    CHECK FOR HEAD KEYWORD\n         BE    SKPHDRS          MRS    NO KEYWORD - DONT SET SW\n         OI    HDRFLG,X'01'     MRS    SET HEADERS OFF\n         B     SKPPRTR           MRS\nSKPHDRS  LR    R7,R1             MRS\n         CLC   PNAME(2),HALF1    MRS\n         BNE   GETSNAME         MRS\n         L     R14,SNAME        MRS\n         LH    R15,SNAME+4      MRS\n         LA    R0,UNAME         MRS\n         LR    R1,R15           MRS\n         MVCL  R0,R14           MRS\n         B     CKMAIL           MRS\nGETSNAME TPUT  NMEMSG,11          MRS  SEND NAME,MAIL STA. REQUEST\n         TGET  UNAME,30           MRS  GET NAME AND MAIL STA. DATA\nCKMAIL   OC    UNAME(30),=30CL1' ' MRS  CHANGE TO CAPITAL LETTERS\n         CLC   PMAIL(2),HALF1     MRS MAIL SPECIFIED\n         BNE   GETSMAIL           MRS NO  GET MAILSTA\n         L     R14,SMAIL          MRS\n         LH    R15,SMAIL+4        MRS\n         LA    R0,MAILSTA         MRS\n         LR    R1,R15             MRS\n         MVCL  R0,R14             MRS\n         B     MOVEHDR            MRS\nGETSMAIL TPUT  MSTAMSG,19         MRS  SEND NAME,MAIL STA. REQUEST\n         TGET  MAILSTA,5          MRS  GET NAME AND MAIL STA. DATA\nMOVEHDR  OC    MAILSTA,=5CL1' '   MRS  CHANGE TO CAPITAL LETTERS\n         MVC   MRSLINE+4(1),HDRCNTL  MRS\n         MVC   MRSDATA2(50),MRSDATA  MRS\n         LR    R1,R7                 MRS   RESTORE R1 AFTER TPUT\nSKPPRTR  EQU   *\n         CLC   PCLASS(2),HALF1         SEE IF CLASS SPECIFIED\n         BNE   NOCLASS                 NO.....GO CHECK FOR DESTINATION\n         L     R7,SCLASS               LOAD POINTER TO SYSOUT CLASS\n         MVC   S99TUPAR,0(R7)          MOVE CLASS INTO TEXT UNIT B\nNOCLASS  DS    0H\n         CLC   PHOLD(2),HALF1          SEE IF HOLD SPECIFIED\n         BNE   NOHOLD                  NO.....GO CHECK FOR COPIES\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTDC               LOAD POINTER TO TEXT UNIT C\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\nNOHOLD   DS    0H\n         CLC   PCOPIES(2),HALF1        SEE IF COPY SPECIFIED\n         BE    MRSCK        MRS\n         CLI   PRINTER+1,0  MRS\n         BE    NOCOPY       MRS        NO.....GO ZERO ECB\n         B     NOFCB        MRS\nMRSCK    LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTE                LOAD POINTER TO TEXT UNIT E\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTELEN),TEXTEC  INITIALIZE TEXT UNIT E\n         L     R7,SCOPIES              LOAD POINTER TO COPY FIELD\n         LH    R6,SCOPIES+4            LOAD LENGTH OF COPY FIELD\n         BCTR  R6,0                    DECREMENT REGISTER 6 FOR EXECUTE\n*                                      OF PACK INSTRUCTION\n         EX    R6,PACKCOPY             EXECUTE PACK TO CONVERT COPIES\n*                                      TO ZONED DECIMAL\n         CVB   R6,DEC                  CONVERT ZONED TO BINARY\n         STCM  R6,1,S99TUPAR           STORE NUMBER OF COPIES IN TU\n         CLI   PRINTER+1,0      MRS\n         BNE   NOFCB            MRS\nNOCOPY   DS    0H\n         LA    R1,4(R1)\n         LA    R2,TEXTC\n         ST    R2,S99TUPTR\n         MVC   S99TUKEY(TEXTCLEN),TEXTCC\n         L     R14,SDEST\n         LTR   R14,R14\n         BZ    TSO1\n         LA    R0,S99TUPAR         TO FIELD\n         LR    R2,R1               SAVE R1\n         LH    R1,SDEST+4          L'DEST\n         LR    R15,R1              COPY L'\n         MVCL  R0,R14              MOVE DEST IN\n         LR    R1,R2               RESTORE R1\nTSO1     DS    0H\n         CLC   PFCB(2),HALF1       FCB SPEC.\n         BNE   NOFCB\n         LA    R1,4(R1)            NXT TU PTR\n         LA    R2,TEXTH            FCB TEXT\n         ST    R2,S99TUPTR\n         MVC   S99TUKEY(TEXTHLEN),TEXTHC INIT TEXT UNIT\n         L     R14,SFCB            FCB CHARS\n         LH    R15,SFCB+4          L'\n         LA    R0,S99TUPAR         TU AREA\n         LR    R2,R1               SAVE R1\n         LR    R1,R15              COPY L'\n         MVCL  R0,R14              MOVE FCB NAME IN\n         LR    R1,R2               RESTORE R1\nNOFCB    DS    0H\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTFC               LOAD POINTER TO TEXT UNIT F\n*                                      PERMANENTLY ALLOCATED\n*                                      ATTRIBUTE\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVI   S99TUPTR,S99TUPLN       INDICATE END OF TEXT UNIT\n*                                      POINTER LIST\n         DROP  R1,R2,R9                DROP ADDRESSABILITY TO DSECTS\n         LA    R1,RBPTR                LOAD ADDRESS OF REQUEST BLOCK\n*                                      POINTER\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BNZ   ALCFAIL                 NO.....GO AND CALL DAIR FAIL\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO WORKAREA\n         OPEN  ((R5),(OUTPUT)),MF=(E,OPENLST)\n*                                      OPEN OUTPUT DCB\n         TM    48(R5),DCBOFOPN         SEE IF DCB OPENED SUCCESSFULLY\n         BNO   OPENFAIL                NO.....GO PUT OUT OUTPUT DCB\n*                                      NOT OPENED MESSAGE\n         LM    14,9,ALCSAVE            RESTORE REGISTERS\n         BR    R14                     RETURN TO CALLER\nALCFAIL  DS    0H\n         LA    R1,REQBLK               LOAD ADDRESS OF REQUEST\n*                                      BLOCK\n         MVI   DFID+1,DFSVC99          SET DAIR FAIL FOR SVC 99 ERROR\n         BAL   R2,DAIRFAIL             LOAD ADDRESS OF OPEN FAIL AND\n*                                      BRANCH TO DAIRFAIL ROUTINE\nOPENFAIL DS    0H\n         TPUT  OPENMSG,L'OPENMSG       PUT OUT OUTPUT DCB NOT OPEND\n*                                      MESSAGE\n         TPUT  (R3),8                  PUT OUT DDNAME\n         B     CLOSDCBS                GO CLOSE DCBS AND RETURN\n*\n***********************************************************************\n*                                                                     *\n*        INVOKE DAIR TO FREE FILENAME VIA CALLTSSR                    *\n*           AND CHECK FOR ZERO RETURN CODE                            *\n*                                                                     *\n***********************************************************************\n*\nFREEDD   DS    0H\n         SLR   R8,R8                   INITIALIZE REGISTER 8 TO ZERO\n*                                      RETURN CODE\n         MVC   DAP18(DAPB18L),DAPB18C  INITIALIZE DAIR PARAMETER BLOCK\n*                                      18 (FREE BY DATASET)\n         LA    R4,DAP18                LOAD ADDRESS OF DAPB\n         USING DAPB18,R4               ESTABLISH ADDRESSABILITY TO\n*                                      DAPB\n         MVC   DA18DDN,0(R1)           MOVE DDNAME INTO DAPB\n         SLR   R7,R7                   ZERO REGISTER 7\n         ST    R7,ECB                  STORE REGISTER 7 AS DUMMY ECB\n         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL\n         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL\n         ST    R4,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL\n         DROP  R1,R4                   DROP ADDRESSABILITY TO DAPL AND\n*                                      DAPB\n         CALLTSSR EP=IKJDAIR           CALL DAIR TO FREE DDNAME\n         C     R15,FULL28              SEE IF RETURN CODE IS 28\n*                                      (DDNAME NOT ALLOCATED)\n         BER   R2                      YES....GO CONTINUE PROCESSING\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZR   R2                      YES....GO CONTINUE PROCESSING\n         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR\n*\n***********************************************************************\n*                                                                     *\n*        INVOKE DAIRFAIL TO DISPLAY AN ERROR MESSAGE                  *\n*                                                                     *\n***********************************************************************\n*\nDAIRFAIL XC    DFPARMS(DFLEN),DFPARMS  INITIALIZE PARMLIST FOR DAIR\n*                                      FAIL TO ZEROS\n         ST    R1,DFDAPLP              STORE POINTER TO DAPL/RB IN\n*                                      PARAMETER LIST\n         ST    R15,RETCODE             STORE RETURN CODE\n         LA    R1,RETCODE              LOAD ADDRESS OF RETURN CODE\n         ST    R1,DFRCP                STORE POINTER TO RETURN CODE IN\n*                                      PARAMETER LIST\n         LA    R1,FULL0                LOAD ADDRESS OF FULLWORD OF\n*                                      ZEROS\n         ST    R1,DFJEFF02             STORE DUMMY POINTER TO IKJEFF02\n*                                      IN PARMLIST\n         LA    R1,DFID                 LOAD ADDRESS OF DAIR FAIL ID\n*                                      FIELD\n         ST    R1,DFIDP                STORE POINTER TO DFID IN\n*                                      PARMLIST\n         MVI   DFID,NOWTP              SET FOR NO WRITE TO PROGRAMMER\n         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS\n*                                      SAVEAREA\n         L     R1,24(R1)               LOAD POINTER TO CPPL\n         ST    R1,DFCPPLP              STORE POINTER TO CPPL IN\n*                                      PARMLIST\n         LINK  EP=IKJEFF18,MF=(E,DFPARMS)  LINK TO DAIR FAIL SERVICE\n*                                      ROUTINE TO HANDLE RETURN\n*                                      CODE\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZR   R2                      YES....GO RETURN TO CALLER\n         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN CODE\n         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL\n         TPUT  DRFLERR,L'DRFLERR       PUT OUT DAIR FAIL ERROR MESSAGE\n         TPUT  (R8),8                  PUT OUT DECIMAL RETURN CODE\n         BR    R2                      GO RETURN TO CALLER\n*\n******************** INSTRUCTIONS TO BE EXECUTED **********************\n*\nMOVEDSN  MVC   DSNBUF(0),0(R5)\nPACKCOPY PACK  DEC(8),0(0,R7)\n         USING DAPB08,R8\nMOVEMEM  MVC   DA08MNM(0),0(R5)\nMOVEPASS MVC   DA08PSWD(0),0(R5)\n         DROP  R8\n*\n***************************** CONSTANTS *******************************\n*\n******************** DAIR CONTROL BLOCK CONSTANTS *********************\nDAPB08C  DS    0F\n         DC    X'0008'                 DA08CD\n         DC    H'0'                    DA08FLG\n         DC    H'0'                    DA08DARC\n         DC    H'0'                    DA08CTRC\n         DC    A(0)                    DA08PDSN\n         DC    CL8'PRINTI  '           DA08DDN\n         DC    CL8' '                  DA08UNIT\n         DC    CL8' '                  DA08SER\n         DC    F'0'                    DA08BLK\n         DC    F'0'                    DA08PQTY\n         DC    F'0'                    DA08SQTY\n         DC    F'0'                    DA08DQTY\n         DC    CL8' '                  DA08MNM\n         DC    CL8' '                  DA08PSWD\n         DC    X'08'                   DA08DSP1      SHR\n         DC    X'08'                   DA08DSP2      KEEP\n         DC    X'08'                   DA08DSP3      KEEP\n         DC    X'08'                   DA08CTL       PERM\n         DC    F'0'                    DA08DSO\n         DC    CL8' '                  DA08ALN\nDAPB08L  EQU   *-DAPB08C               LENGTH\n         SPACE 2\nDAPB18C  DS    0F\n         DC    X'0018'                 DA18CD\n         DC    X'0000'                 DA18FLG\n         DC    H'0'                    DA18DARC\n         DC    H'0'                    DA18CTRC\n         DC    F'0'                    DA18PDSN\n         DC    CL8'PRINTI'             DA18DDN\n         DC    CL8' '                  DA18MNM\n         DC    CL2' '                  DA18SCLS\n         DC    X'08'                   DA18DPS2\n         DC    X'10'                   DA18CTL\n         DC    CL8' '                  DA18JBNM\nDAPB18L  EQU   *-DAPB18C               LENGTH\n         SPACE 2\nINPUTC   DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI\nINPUTL   EQU   *-INPUTC\n*\nOUTPUTAC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X\n               LRECL=256,BLKSIZE=3120\nOUTPUTAL EQU   *-OUTPUTAC\n*\nOUTPUTMC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X\n               LRECL=256,BLKSIZE=3120\nOUTPUTML EQU   *-OUTPUTMC\n*\nDIRECTC  DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X\n               SYNAD=SERRI,EODAD=FREEBLK\nDIRECTL  EQU   *-DIRECTC\n*\nOPENCLOS OPEN  (,),MF=L\n         SPACE 2\nHEADERC  DS    0F\n         DC    H'137'\n         DC    H'0'\nHDRCNTLC DC    C' '\n         DC    1CL44'**** TSO FOREGROUND HARDCOPY ****',2CL44' '\nHEADERM  DS    0F\n         DC    H'137'\n         DC    H'0'\n         DC    C' '\n         DC    1CL44'*** TSO FOREGROUND MEMBER LIST **',2CL44' '\n         DS    0H\nLDSNAME  DS    0CL12\n         ORG   LDSNAME\n         DC    H'66'\n         DC    H'0'\n         DC    CL8' DSNAME='\nEJECTM   DS    0F\n         DC    H'5'\n         DC    H'0'\n         DC    X'8B'\nEJECTA   DS    0F\n         DC    H'5'\n         DC    H'0'\n         DC    C'1'\nSPACE    EQU   EJECTA\n         SPACE 2\nHDRFLG   DC    XL1'00'                           MRS\nNMEMSG   DC    CL11'ENTER: NAME'                 MRS\nMSTAMSG  DC    CL19'ENTER: MAIL STATION'         MRS\nMRSLINE  DS    0H                                MRS\n         DC    H'105'                            MRS\n         DC    H'00'                             MRS\n         DC    C' '                              MRS\nMRSDATA  DC    CL5' *** '                        MRS\n         DC    CL6'NAME: '                       MRS\nUNAME    DC    30CL1' '                          MRS\n         DC    CL5' MS: '                        MRS\nMAILSTA  DC    5CL1' '                           MRS\nMRSDATA2 DS    CL51                              MRS\nST0      DS    F                                 MRS\nST1      DS    F                                 MRS\nST4      DS    F                                 MRS\nST6      DS    F                                 MRS\nST9      DS    F                                 MRS\nST14     DS    F                                 MRS\nST15     DS    F                                 MRS\nMSLENGTH DS    H                                 MRS\nFULL0    DC    F'0'\nFULL1    DC    F'1'\nFULL4    DC    F'4'\nFULL20   DC    F'20'\nFULL28   DC    F'28'\nFULL256  DC    F'256'\nDSPRTNUM DC    CL6'RMTXXX'                       MRS\nPRINTI   DC    CL8'PRINTI'\nPRINTA   DC    CL8'PRINTA'\nPRINTM   DC    CL8'PRINTM'\nBLANKS   DC    CL8'        '\nALIAS    DC    CL8' *ALIAS*'\nENDCHAIN DS    0F\n         DC    X'FF000000'\nSTADDR   DC    F'0'\nHALF0    DC    H'0'\nHALF1    DC    H'1'\nHALF2    DC    H'2'\nHALF12   DC    H'12'\nHALF85   DC    H'85'\nHALF256  DC    H'256'\nPATCH    DC    8CL4'ZAP*'\nHEXFF    EQU   X'FF'\nHIGH     EQU   X'80'\nBLANK    EQU   X'40'\nSCLSA    EQU   C'A'\nSKIPM    EQU   X'09'\nDSOPS    EQU   X'40'\nDSOPO    EQU   X'02'\nNOWTP    EQU   X'00'\nNUMERIC  DC    256X'FF'\n         ORG   NUMERIC+C'0'\n         DC    X'00000000000000000000'\n         ORG   NUMERIC+256\nPRTTAB   DC    C'001002003004005006007008009010011012013014015016017018X\n               01902002102202302402502602702802903003103203303403503603X\n               7038039040041042043044045046047048049050051'\n         SPACE 2\n****************** POINTER TO PARS PARAMETER CSECT ********************\nPCLADDR  DC    A(PARMTAB)\n         SPACE 2\n************************ PARS PARAMETER LIST **************************\nPARMTAB  IKJPARM  DSECT=IKJPARMD\nDSNAMES  IKJPOSIT  DSNAME,LIST,USID,                                   X\n               PROMPT='DSNAME',                                        X\n               HELP='DSNAME TO BE PRINTED'\n**** MRS MRS MRS MRS  MRS MRS MRS *****\nPRINTER  IKJKEYWD\n         IKJNAME  'RMT001',ALIAS=('R1','RMT1')\n         IKJNAME  'RMT002',ALIAS=('R2','RMT2')\n         IKJNAME  'RMT003',ALIAS=('R3','RMT3')\n         IKJNAME  'RMT004',ALIAS=('R4','RMT4')\n         IKJNAME  'RMT005',ALIAS=('R5','RMT5')\n         IKJNAME  'RMT006',ALIAS=('R6','RMT6')\n         IKJNAME  'RMT007',ALIAS=('R7','RMT7')\n         IKJNAME  'RMT008',ALIAS=('R8','RMT8')\n         IKJNAME  'RMT009',ALIAS=('R9','RMT9')\n         IKJNAME  'RMT010',ALIAS=('R10','RMT10')\n         IKJNAME  'RMT011',ALIAS=('R11','RMT11')\n         IKJNAME  'RMT012',ALIAS=('R12','RMT12')\n         IKJNAME  'RMT013',ALIAS=('R13','RMT13')\n         IKJNAME  'RMT014',ALIAS=('R14','RMT14')\n         IKJNAME  'RMT015',ALIAS=('R15','RMT15')\n         IKJNAME  'RMT016',ALIAS=('R16','RMT16')\n         IKJNAME  'RMT017',ALIAS=('R17','RMT17')\n         IKJNAME  'RMT018',ALIAS=('R18','RMT18')\n         IKJNAME  'RMT019',ALIAS=('R19','RMT19')\n         IKJNAME  'RMT020',ALIAS=('R20','RMT20')\n         IKJNAME  'RMT021',ALIAS=('R21','RMT21')\n         IKJNAME  'RMT022',ALIAS=('R22','RMT22')\n         IKJNAME  'RMT023',ALIAS=('R23','RMT23')\n         IKJNAME  'RMT024',ALIAS=('R24','RMT24')\n         IKJNAME  'RMT025',ALIAS=('R25','RMT25')\n         IKJNAME  'RMT026',ALIAS=('R26','RMT26')\n         IKJNAME  'RMT027',ALIAS=('R27','RMT27')\n         IKJNAME  'RMT028',ALIAS=('R28','RMT28')\n         IKJNAME  'RMT029',ALIAS=('R29','RMT29')\n         IKJNAME  'RMT030',ALIAS=('R30','RMT30')\n         IKJNAME  'RMT031',ALIAS=('R31','RMT31')\n         IKJNAME  'RMT032',ALIAS=('R32','RMT32')\n         IKJNAME  'RMT033',ALIAS=('R33','RMT33')\n         IKJNAME  'RMT034',ALIAS=('R34','RMT34')\n         IKJNAME  'RMT035',ALIAS=('R35','RMT35')\n         IKJNAME  'RMT036',ALIAS=('R36','RMT36')\n         IKJNAME  'RMT037',ALIAS=('R37','RMT37')\n         IKJNAME  'RMT038',ALIAS=('R38','RMT38')\n         IKJNAME  'RMT039',ALIAS=('R39','RMT39')\n         IKJNAME  'RMT040',ALIAS=('R40','RMT40')\n         IKJNAME  'RMT041',ALIAS=('R41','RMT41')\n         IKJNAME  'RMT042',ALIAS=('R42','RMT42')\n         IKJNAME  'RMT043',ALIAS=('R43','RMT43')\n         IKJNAME  'RMT044',ALIAS=('R44','RMT44')\n         IKJNAME  'RMT045',ALIAS=('R45','RMT45')\n         IKJNAME  'RMT046',ALIAS=('R46','RMT46')\n         IKJNAME  'RMT047',ALIAS=('R47','RMT47')\n         IKJNAME  'RMT048',ALIAS=('R48','RMT48')\n         IKJNAME  'RMT049',ALIAS=('R49','RMT49')\n         IKJNAME  'RMT050',ALIAS=('R50','RMT50')\n         IKJNAME  'RMT051',ALIAS=('R51','RMT51')\n         IKJNAME  'RMT052',ALIAS=('R52','RMT52')\n         IKJNAME  'RMT053',ALIAS=('R53','RMT53')\n         IKJNAME  'RMT054',ALIAS=('R54','RMT54')\n         IKJNAME  'RMT055',ALIAS=('R55','RMT55')\n         IKJNAME  'RMT056',ALIAS=('R56','RMT56')\n         IKJNAME  'RMT057',ALIAS=('R57','RMT57')\n         IKJNAME  'RMT058',ALIAS=('R58','RMT58')\n         IKJNAME  'RMT059',ALIAS=('R59','RMT59')\n         IKJNAME  'RMT060',ALIAS=('R60','RMT60')\n         IKJNAME  'RMT061',ALIAS=('R61','RMT61')\n         IKJNAME  'RMT062',ALIAS=('R62','RMT62')\n         IKJNAME  'RMT063',ALIAS=('R63','RMT63')\n         IKJNAME  'RMT064',ALIAS=('R64','RMT64')\n         IKJNAME  'RMT065',ALIAS=('R65','RMT65')\n         IKJNAME  'RMT066',ALIAS=('R66','RMT66')\n         IKJNAME  'RMT067',ALIAS=('R67','RMT67')\n         IKJNAME  'RMT068',ALIAS=('R68','RMT68')\n         IKJNAME  'RMT069',ALIAS=('R69','RMT69')\n         IKJNAME  'RMT070',ALIAS=('R70','RMT70')\n         IKJNAME  'RMT071',ALIAS=('R71','RMT71')\n         IKJNAME  'RMT072',ALIAS=('R72','RMT72')\n         IKJNAME  'RMT073',ALIAS=('R73','RMT73')\n         IKJNAME  'RMT074',ALIAS=('R74','RMT74')\n         IKJNAME  'RMT075',ALIAS=('R75','RMT75')\n         IKJNAME  'RMT076',ALIAS=('R76','RMT76')\n         IKJNAME  'RMT077',ALIAS=('R77','RMT77')\n         IKJNAME  'RMT078',ALIAS=('R78','RMT78')\n         IKJNAME  'RMT079',ALIAS=('R79','RMT79')\n         IKJNAME  'RMT080',ALIAS=('R80','RMT80')\n         IKJNAME  'RMT081',ALIAS=('R81','RMT81')\n         IKJNAME  'RMT082',ALIAS=('R82','RMT82')\n         IKJNAME  'RMT083',ALIAS=('R83','RMT83')\n         IKJNAME  'RMT084',ALIAS=('R84','RMT84')\n         IKJNAME  'RMT085',ALIAS=('R85','RMT85')\n         IKJNAME  'RMT086',ALIAS=('R86','RMT86')\n         IKJNAME  'RMT087',ALIAS=('R87','RMT87')\n         IKJNAME  'RMT088',ALIAS=('R88','RMT88')\n         IKJNAME  'RMT089',ALIAS=('R89','RMT89')\n         IKJNAME  'RMT090',ALIAS=('R90','RMT90')\n         IKJNAME  'RMT091',ALIAS=('R91','RMT91')\n         IKJNAME  'RMT092',ALIAS=('R92','RMT92')\n         IKJNAME  'RMT093',ALIAS=('R93','RMT93')\n         IKJNAME  'RMT094',ALIAS=('R94','RMT94')\n         IKJNAME  'RMT095',ALIAS=('R95','RMT95')\n         IKJNAME  'RMT096',ALIAS=('R96','RMT96')\n         IKJNAME  'RMT097',ALIAS=('R97','RMT97')\n         IKJNAME  'RMT098',ALIAS=('R98','RMT98')\n         IKJNAME  'RMT099',ALIAS=('R99','RMT99')\n         IKJNAME  'RMT100',ALIAS=('R100')\nPCLASS   IKJKEYWD\n         IKJNAME 'CLASS',SUBFLD=CLASSUB\nPLINES   IKJKEYWD\n         IKJNAME 'LINES',ALIAS=('L'),SUBFLD=LINESUB\nPMAIL    IKJKEYWD\n         IKJNAME 'MAIL',ALIAS=('M'),SUBFLD=MAILSUB\nPNAME    IKJKEYWD\n         IKJNAME 'NAME',ALIAS=('N'),SUBFLD=NAMESUB\nPTRUNC   IKJKEYWD\n         IKJNAME 'TRUNC',SUBFLD=TRUNCSUB\nPFCB     IKJKEYWD\n         IKJNAME 'FCB',SUBFLD=FCBSUB\nPDEST    IKJKEYWD\n         IKJNAME 'DEST',SUBFLD=DESTSUB\nPFORM    IKJKEYWD\n         IKJNAME 'FORM',SUBFLD=FORMSUB\nPPAGESIZ IKJKEYWD\n         IKJNAME 'PAGESIZE',ALIAS=('PAGE'),SUBFLD=PAGESUB\nPECOLOGY IKJKEYWD DEFAULT='ECOLOGY'\n         IKJNAME 'ECOLOGY',ALIAS=('ECOL')\n         IKJNAME 'NOECOLOGY',ALIAS=('NOECOL')\nPEJECT   IKJKEYWD\n         IKJNAME 'EJECT'\n         IKJNAME 'NOEJECT'\nPSNUM    IKJKEYWD\n         IKJNAME 'SNUM'\n         IKJNAME 'NUM'\nPHDRS    IKJKEYWD\n         IKJNAME 'HEADER'\n         IKJNAME 'NOHEADER'\nPCCHAR   IKJKEYWD\n         IKJNAME 'CCHAR'\n         IKJNAME 'NOCCHAR'\nPHOLD    IKJKEYWD\n         IKJNAME 'HOLD'\n         IKJNAME 'NOHOLD'\nPCOPIES  IKJKEYWD\n         IKJNAME 'COPIES',SUBFLD=COPYSUB\nPPRINT   IKJKEYWD\n         IKJNAME 'PRINT'\n         IKJNAME 'NOPRINT'\nPLIST    IKJKEYWD\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\nPNONUM   IKJKEYWD\n         IKJNAME 'NONUM'\n*        B E G I N   S U B F I E L D S\nCLASSUB  IKJSUBF\nSCLASS   IKJIDENT 'CLASSNAME',FIRST=ALPHANUM,MAXLNTH=1,                X\n               PROMPT='CLASS NAME'\nFCBSUB   IKJSUBF\nSFCB     IKJIDENT 'FCB',MAXLNTH=4,PROMPT='PRINTER FCB NAME',           X\n               FIRST=ALPHANUM,OTHER=ALPHANUM\nNAMESUB  IKJSUBF\nSNAME    IKJIDENT 'MNAME',MAXLNTH=30,PROMPT='USER NAME',               X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,CHAR\nMAILSUB  IKJSUBF\nSMAIL    IKJIDENT 'MMAIL',MAXLNTH=5,PROMPT='MAIL STATION',             X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,CHAR\nDESTSUB  IKJSUBF\nSDEST    IKJIDENT 'DEST',MAXLNTH=8,                                    X\n               PROMPT='REMOTE DESTINATION',                            X\n               FIRST=ALPHANUM,OTHER=ALPHANUM\nFORMSUB  IKJSUBF\nSFORM    IKJIDENT 'FORM',MAXLNTH=4,                                    X\n               PROMPT='FORM NUMBER',                                   X\n               FIRST=ALPHANUM,OTHER=ALPHANUM\nPAGESUB  IKJSUBF\nSPAGESIZ IKJIDENT 'PAGESIZ',MAXLNTH=3,                                 X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               PROMPT='1-3 DIGITS - PAGE SIZE OF OUTPUT',              X\n               HELP=('LINES ON OUTPUT PAGE FOR PDS MEMBER LIST')\nTRUNCSUB IKJSUBF\nSTRUNC   IKJIDENT 'TRUNCAT',MAXLNTH=3,                                 X\n               FIRST=NUMERIC,OTHER=NUMERIC,DEFAULT='131'               X\n               PROMPT='1-3 DIGITS - PAGE WIDTH OF OUTPUT'\nLINESUB  IKJSUBF\nLINES    IKJIDENT 'LINES',RANGE,MAXLNTH=8,                             X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               PROMPT='RANGE OF LINES TO BE PRINTED',                  X\n               HELP=('RANGE OF INTERNAL LINE NUMBERS TO PRINT')\nCOPYSUB  IKJSUBF\nSCOPIES  IKJIDENT 'COPIES',MAXLNTH=3,                                  X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               PROMPT='1-3 DIGITS - NUMBER OF COPIES OF OUTPUT',       X\n               HELP=('NUMBER OF COPIES OF PRINTOUT DESIRED')\n         IKJENDP\n         SPACE 2\n****************************** MESSAGES *******************************\nGNRLERR  DC    C'AN ERROR WAS ENCOUNTERED IN THE GENERAL FAIL SERVICE RX\n               OUTINE.  THE RETURN CODE FROM GNRLFAIL IS: '\n*\nDRFLERR  DC    C'AN ERROR WAS ENCOUNTERED IN THE DAIR FAIL SERVICE ROUTX\n               INE.  THE RETURN CODE FROM DAIR FAIL IS: '\n*\nOPENMSG  DC    C'OUPUT PROCESSING IS BEING TERMINATED.  AN ERROR WAS ENX\n               COUNTERED ATTEMPTING TO OPEN THE OUTPUT DATASET ASSOCIATX\n               ED WITH DDNAME: '\n*\nDSNNOTP  DC    C'AN ERROR OCCURRED AND YOUR DATASET WAS NOT PRINTED'\n*\nDSNMSG   DC    C'PROCESSING HAS BEEN COMPLETED FOR DATASET: '\n*\nMEMMSG   DC    C' MEMBER: '\n*\nPRTMSG   DC    C'MEMBERS WILL NOW BE PRINTED FOR DATASET: '\n*\nNOTPSPO  DC    C'DATASET IS NOT SEQUENTIAL OR PARTITIONED AND WAS NOT PX\n               RINTED.'\n*\nSYNADI   DC    C'A SYNAD ERROR OCURRED READING YOU INPUT DATASET AND ONX\n               LY PART OF YOUR DATASET MAY HAVE BEEN PRINTED.'\n*\nSYNADO   DC    C'A SYNAD ERROR OCURRED WRITING THE OUTPUT DATASET AND NX\n               O MORE DATASETS WILL BE PRINTED.'\n*\nDSNISU   DC    C'DATASET HAS UNDEFINED RECORD LENGTH AND WILL NOT BE PRX\n               INTED.'\n*\nDSNISL   DC    C'DATASET HAS RECORD LENGTH GREATER THAN 256.'\n*\nINVNUM   DC    C'AN INVALID LINE NUMBER HAS CAUSED PROCESSING TO ABORT,X\n                NONUM NOT SPECIFIED'\nINVRNG   DC    C'INVALID LINE RANGE SPECIFIED - PROCESSING TERMINATING'\nINVRNG2  DC    C'UPPER RANGE FOR LINES MISSING - PROCESSING TERMINATED'\nINVPRTR  DC    C'INVALID OR MISSING PRINTER SPECIFICATION'\n         SPACE 2\n************************ DSECTS (MAPPING MACROS) **********************\nMEMDSECT DSECT\nMEMNTTR  DS    CL11\n         ORG   MEMNTTR\nMEMBER   DS    CL8\nMEMTTR   DS    CL3\nCFIELD   DS    CL1\nMEMSECTN EQU   *\n         IKJDAP08\nDAP08LEN EQU   *-DAPB08\n         IKJDAP18\nDAP18LEN EQU   *-DAPB18\n         IKJDAPL\nDAPLLEN  EQU   *-DAPL\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         IHADSAB\nTIOEDDNM EQU   4           X'1C'(OFFSET) - X'18'(JOB STEP)\n         CVT   DSECT=YES                               /*LDW*/\n         IEFZB4D0\n         IEFZB4D2\nRBLEN    EQU   S99RBEND-S99RB\n         PRINT NOGEN\n         DCBD  DSORG=(PS,PO)\n         PRINT GEN\n         EJECT\n******************** CONSTANTS FOR DYNAMIC ALLOCATION *****************\nPRINTOFF CSECT\nREQBLKC  DC    AL1(S99RBEND-S99RB),AL1(S99VRBAL),18AL1(0)\nTEXTAC   DC    AL2(DALDDNAM),AL2(1),AL2(8),CL8'PRINT'  DDNAME\nTEXTALEN EQU   *-TEXTAC\nTEXTBC   DC    AL2(DALSYSOU),AL2(1),AL2(1),C'A'        SYSOUT CLASS\nTEXTBLEN EQU   *-TEXTBC\nTEXTCC   DC    AL2(DALSUSER),AL2(1),AL2(8),CL8'LOCAL'  DESTINATION\nTEXTCLEN EQU   *-TEXTCC\nTEXTDC   DC    AL2(DALSHOLD),AL2(0)              SYSOUT HOLD\nTEXTDLEN EQU   *-TEXTDC\nTEXTEC   DC    AL2(DALCOPYS),AL2(1),AL2(1),AL2(1)      SYSOUT COPIES\nTEXTELEN EQU   *-TEXTEC\nTEXTFC   DC    AL2(DALPERMA),AL2(0)              PERM ALLOCATION\nTEXTFLEN EQU   *-TEXTFC\nTEXTGC   DC    AL2(DALSFMNO),AL2(1),AL2(4),C'STD '\nTEXTGLEN EQU   *-TEXTGC\nTEXTHC   DC    AL2(DALFCBIM),AL2(1),AL2(4),C'    '\nTEXTHLEN EQU   *-TEXTHC\n*********************** DSECT FOR DYNAMIC WORKAREA ********************\nWORKAREA DSECT\nSAVEAREA DS    18F\nALCSAVE  DS    12F\n         DS    0D\nDEC      DS    2F\nCONV     DS    2F\nDAP08    DS    0F\n         ORG   DAP08+DAP08LEN\nDAP18    DS    0F\n         ORG   DAP18+DAP18LEN\nDAPLSECT DS    0F\n         ORG   DAPLSECT+DAPLLEN\nPPLSECT  DS    0F\n         ORG   PPLSECT+PPLLEN\nECB      DS    F\nPARSBACK DS    F\nLINE     DS    0H\nLENGTH   DS    H\n         DS    H\nCNTLBYTE DS    CL1\nDATA     DS    CL256\nHEADER2  DS    CL12\nDSNAME   DS    CL44\nOPENPRN  DS    CL1\nMEMNAME  DS    CL8\nCLOSEPRN DS    CL1\n         ORG   DSNAME-2\nDSNLEN   DS    CL2\nDSNBUF   DS    CL44\n         ORG\nHEADER   DS    CL137\n         ORG   HEADER+4\nHDRCNTL  DS    CL1\nDFID     DS    CL2\n         ORG\nONETIME  DS    X                   SWITCHES\nPAGESIZE DS    H                   PAGE SIZE\nMEMDATL  DC    X'00'                   SUBPOOL NUMBER\n         DC    AL3(*-*)            3*PAGESIZE*12 +8 MEMBER TABLE\nMEMTABLE DS    F\nENDTABLE DS    F\nCURRENT  DS    F\nPRESENT  DS    F\nCOLUMN   DS    F\nXLIST    DS    F\nUPPER    DS    PL5\nLOWER    DS    PL5\nLINENO   DS    PL5\nTYPESW   DS    CL1\nLINESW   DS    CL1\nNUMSW    DS    CL1\nCCHARSW  DS    CL1\nEJECTSW  DS    CL1\nSNUMSW   DS    CL1\nDSPRTSW  DS    CL1\nRDJL     RDJFCB (,),MF=L\nJFCBAREA DS    44F\n         ORG   JFCBAREA+44\nJFCBELNM DS    CL8\n         ORG\nSAVER6   DS    F\nSAVER2   DS    2F\nSAVER3   DS    2F\n*\n         PRINT NOGEN\n*\nINPUT    DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI\n*\nOUTPUTA  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X\n               LRECL=256,BLKSIZE=3120\n*\nOUTPUTM  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X\n               LRECL=256,BLKSIZE=3120\n*\nDIRECT   DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X\n               SYNAD=SERRI,EODAD=FREEBLK\n*\nOPENLST  OPEN  (,),MF=L\n*\nCLOSLST  CLOSE (,),MF=L\n*\n         PRINT GEN\n*\nRETCODE  DS    F\nGFPARMP  DS    F\n         IKJEFFGF\n         IKJEFFDF\nRBPTR    DS    F\nREQBLK   DS    5F\nTEXTPTRS DS    7F\nTEXTA    DS    0F                                   DDNAME\n         ORG   TEXTA+TEXTALEN\nTEXTB    DS    0F                                   SYSOUT CLASS\n         ORG   TEXTB+TEXTBLEN\nTEXTC    DS    0F                                   DESTINATION\n         ORG   TEXTC+TEXTCLEN\nTEXTE    DS    0F                                   SYSOUT COPIES\n         ORG   TEXTE+TEXTELEN\nTEXTG    DS    0F                                   FORMS\n         ORG   TEXTG+TEXTGLEN\nTEXTH    DS    0F                  FCB\n         ORG   TEXTH+TEXTHLEN\nLDYNAMIC EQU   *-WORKAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPRINTH": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00W\\x00W\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "JRP"}, "text": " /* REFER  IPO1.HELP(JRPRINT)\n /* COMPID TSO\n /* DOC    THIS MEMBER PROVIDES HELP FOR THE TSO COMMAND\n /*                   \" JRPRINT  \" .\n /*        THIS HELP EXPLAINS THE FUNCTION, SYNTAX\n /*  **************************************************************\n /*  *  USER WILL BE PROMPTED FOR THEIR NAME AND MAIL STATION     *\n /*  * FOR OUTPUT ROUTING PURPOSES IF HEADER SPECIFIED            *\n /*  * CONTACT MIKE SCHORTMAN EXT: 7368 IF YOU ENCOUNTER PROBLEMS *\n /*  **************************************************************\n)F FUNCTION -\n   THE JRPRINT COMMAND CAN BE USED TO OBTAIN HARDCOPY\n   OF DATA SETS THROUGH FOREGROUND COPYING TO SYSOUT.\n   THE COMMAND PRINTS A DATASET(S) WHICH IS SEQUENTIAL\n   OR PARTITIONED, BLOCKED OR UNBLOCKED, WITH FIXED OR\n   VARIABLE RECORD LENGTH LESS THAN OR EQUAL TO 256\n   (255 IF WITHOUT CARRIAGE CONTROL).\n\n)X SYNTAX -\n     JRPRINT ('DSLIST') CLASS('CLASS') DEST('STATIONID') PRINTER(FORMNO)\n              COPIES('NNN') PR(FORMNO)\n              LINES(L1:L2) FCB('FCBNAME') CCHAR/NOCCHAR\n              LIST/NOLIST PRINT/NOPRINT HEADER/NOHEADER\n              HOLD/NOHOLD\n              TRUNC/NOTRUNC\n\n     REQUIRED -- 'DSLIST'\n     DEFAULTS -- CLASS(A), COPIES(1), NOHOLD, LIST, PRINT,\n                         NUM, NOCCHAR\n **NOTE** THE FOLLOWING IS THE DSPRINT TYPE SYNTAX;\n          JRPRINT ('DSLIST') DE(RXXX) (XXX ==> RJE NAME)\n)O OPERANDS -\n))'DSLIST'  - 'DATA SET LIST' CONTAINS THE NAMES OF DATA SETS\n            TO BE PRINTED OR PUNCHED.  THE NAMES SHOULD FOLLOW\n            TSO CONVENTION,  IN QUOTES IF THE PRIMARY INDEX\n            DIFFERS FROM YOUR USERID, OR WITHOUT QUOTES AND\n            WITH THE PRIMARY INDEX OMITTED IF IT IS THE SAME\n            AS YOUR USERID.\n))CLASS('CLASS') - SYSOUT CLASS IN WHICH OUTPUT IS TO BE\n            PRINTED.  DEFAULT IS F.\n))COPIES('NNN') - NUMBER OF COPIES TO BE PRINTED.\n            DEFAULT IS 1.\n))RMT'X'  328X PRINTER REMOTE DESIGNATION\n             OUTPUT, EXAMPLE: RMT2\n             PRINTER ASSIGNED NAMES DESCRIBED IN HELP FOR PC\n            DEFAULTS NONE\n            ALIAS RMTX   =====> RMT2\n))FCB('FCBNAME') - FCB IMAGE TO BE UTILIZED FOR PRINTING\n            DEFAULT IS NORMAL SYSTEM DEFAULT\n))LINES('L1':'L2') - 'L1' LINE RANGE START 'L2' LINE RANGE END\n            DEFAULT ALL LINES\n))DEST('STATIONID') - REMOTE STATION TO WHICH SYSOUT DATA\n            SETS ARE TO BE ROUTED.\n))CCHAR      - RECOGNIZE FIRST CHARACTER OF EACH LINE\n            AS LINE CONTROL CHARACTER\n))NOCCHAR    - DO NOT RECOGNIZE LINE CONTROL CHARACTERS\n              DEFAULT\n))HEADER    - HEADER IS TO BE PRINTED FIRST FOR ROUTING\n))NOHEADER  - HEADER IS NOT TO BE PRINTED FOR OUTPUT\n             (SUPPORT FOR 328X SYSOUT PRINT)\n))NAME      - NAME OF INDIVIDUAL TO WHOM OUTPUT SHOULD BE\n             ROUTED\n))MAIL      - MAIL STATION OF INDIVIDUAL TO WHOM OUTPUT\n            SHOULD BE ROUTED\n))EJECT     - EJECT PAGE AFTER PRINTING HEADER PAGE\n))NOEJECT   - DO NOT EJECT PAGE AFTER HEADER PAGE\n             DEFAULT\n))NUM       - DATA SET LINE NUMBERING IS TO BE PRINTED\n             DEFAULT\n))SNUM      - DATA SET LINE NUMBERS ARE TO BE\n              SUPPRESSED\n))HOLD      - OUTPUT IS TO BE PLACED ON A HOLD QUEUE UPON\n            DEALLOCATION.\n))NOHOLD    - OUTPUT IS NOT TO BE PLACED ON A HOLD QUEUE\n            UPON DEALLOCATION.\n))LIST      - MEMBER NAMES ARE ONLY TO BE LISTED UNLESS\n            PRINT IS EXPLICITLY STATED.\n))NOLIST    - MEMBER NAMES ARE NOT TO BE LISTED (ONLY\n            PRINTED UNLESS NOPRINT IS EXPLICITLY STATED).\n))PRINT     - MEMBERS ARE ONLY TO BE PRINTED (NOT LISTED\n            UNLESS LIST IS EXPLICITLY STATED).\n))NOPRINT   - MEMBERS ARE NOT TO BE PRINTED (ONLY LISTED\n            UNLESS NOLIST IS EXPLICITLY STATED).\n))TRUNC\n           - INDICATES THAT RECORDS TOO LONG TO BE PRINTED WITHIN THE\n             GIVEN 'WIDTH' WILL BE TRUNCATED TO FIT ON ONE PRINT LINE.\n             THE 'WIDTH' IS INSTALLATION-DEFINED(132)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRPRTRN": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x009\\x009\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&NAME    JRPRTRN &OP=,&SAVE=,&LV=0,&MASK=NO\n.* TERME WILL RESTORE REGISTERS, UNCHAIN SAVE AREAS, RELEASE DYNAMIC\n.* STORAGE OBTAINED BY THE PRIME MACRO, RESET THE PGM MASK AND IN\n.* GENERAL PERFORM THE NECESSARY EXIT LINKAGE.\n.* TERME WILL FREE THE USERS SAVE AREA PLUS THE NUMBER OF BYTES\n.* SPECIFIED BY THE LV OPERAND UNLESS THE USER IMPLIES THAT THE SAVE\n.* AREA WAS NOT OBTAINED VIA A GETMAIN.  THE USER IMPLIES THIS BY\n.* SPECIFYING SAVE= SOME VALUE OR SYMBOL.\n.* IF THE USER SPECIFIED SAVE=NONE IN THE PRIME MACRO, HE SHOULD DO\n.*  THE SAME FOR TERME.\n.* THE USER MAY CHOOSE TO FOLLOW THE TERME MACRO WITH THE XCTL MACRO\n.* RATHER THAN BRANCH ON 14.  THE USER ACCOMPLISHES THIS BY CODING\n.* OP=XCTL\n         AIF   ('&NAME' EQ '').F\n&NAME    DS    0H\n.F       ANOP\n         AIF ('&SAVE' EQ 'NONE').C\n         L     13,4(0,13)              GET PTR TO USERS AREA\n         STM   0,1,20(13)               TEMPORARY SAVE OF R0 AND R1\n         AIF   ('&SAVE' NE '').C\n         AIF   ('&LV'(1,1) EQ '(').E\n         AIF   ('&LV' EQ '0').CONT\n         AIF   ('&LV' GT '4023').ERR\n         LA    0,&LV.+72(0,0)           PARAMETER FOR FREEMAIN\n         AGO   .CONT\n.E       ANOP\n         AIF   ('&LV' EQ '(0)').CONT\n         LA    0,72(&LV(1).,0)          PARAMETER FOR FREEMAIN\n.CONT    ANOP\n         L     1,8(0,13)                GET SAVE AREA ADDRESS\n         LA    1,0(0,1)                 INDICATE FREEMAIN\n         AIF   ('&LV' NE '0').CONTC\n         L     0,0(0,1)                 LENGTH IS IN 1ST WORD OF AREA\n.CONTC   ANOP\n         STCM  15,7,17(13)              SAVE RETURN CODE 11-25-78\n         SVC   10                       ISSUE SVC 10\n         ICM   15,7,17(13)              RESTORE RETURN CODE 11-25-78\n.C       ANOP\n         AIF   ('&MASK' EQ 'NO').NOMASK\n         L     14,16(0,13)              RESET\n         SPM   14                       PGM MASK\n.NOMASK  ANOP\n         L     14,12(0,13)              RESTORE\n         LM    0,12,20(13)              REGISTERS\n         XC    8(4,13),8(13)            DEQUEUE SAVE AREA\n         AIF   ('&OP' EQ 'XCTL').D\n         BR    14                       RETURN TO CALLER\n         MEXIT\n.D       ANOP\n         BALR  15,0                     ESTABLISH ADDRESSABILITY\n         USING *,15\n         MEXIT\n.ERR     MNOTE 'LV GT 4023, LV REQUEST NOT HONORED'\n         LA    0,72(0,0)                PARAMETER FOR FREEMAIN\n         AGO   .CONT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPSAVE": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x8c\\x00\\x8c\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 140, "newlines": 140, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&NAME    JRPSAVE &REG=12,&SAVE=,&ID=,&LV=0,&MASK=NO\n.* JRPSAVE WILL SAVE REGISTERS, CREATE A NEW SAVE AREA, CHAIN THE NEW\n.* SAVE AREA TO THE CALLERS SAVE AREA, ESTABLISH ADDRESSABILITY,\n.* OPTIONALLY OBTAIN ADDITIONAL STORAGE AND IN GENERAL PERFORM THE\n.* NECESSARY ENTRY LINKAGE.\n.* IF THE USER DOES NOT SPECIFY WHAT REGISTER HE REQUIRES FOR A BASE,\n.* TWELVE IS USED.  NOTE..IF REG= IS SPECIFIED TO BE 0, 1, 13, 14, OR\n.* 15  A WARNING MESSAGE IS ISSUED.\n.* IF THE USER SPECIFIES A SAVE AREA VIA THE SAVE= OPERAND THEN PRIME\n.* WILL CHAIN THE USERS SAVE AREA TO THE CALLERS SAVE AREA. IF THE\n.* USER DOES NOT SPECIFY SAVE,THEN PRIME WILL OBTAIN A NEW SAVE AREA\n.* VIA THE GETMAIN SVC.  AN ADDITIONAL AMOUNT OF STORAGE MAY BE\n.* OBTAINED AT THIS TIME BY SPECIFIEING THE LV=, OPERAND.  IF LV IS NOT\n.* SPECIFIED IN REGISTER NOTATION, 4023 IS THE MAXIMUM VALUE.\n.* IF THE USER SPECIFIES SAVE=NONE, PRIME WILL NOT OBTAIN A NEW AREA.\n.* REG 13 WILL POINT TO THE NEW 18 WORD SAVE AREA FOLLOWED BY THE EXTRA\n.* STORAGE AREA.\n         LCLA  &A,&B\n         LCLC  &E,&F,&G,&H\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n         AIF   ('&ID' EQ '').CONT4\n         AIF   ('&ID' EQ '*').SPEC\n&A       SETA  ((K'&ID+2)/2)*2+4\n         AIF   (N'&REG EQ 1).REGONEA\n         AIF   (N'&REG EQ 2).REGTWOA\n         USING *,&REG(1),&REG(2),&REG(3)\n         AGO   .REGADDA\n.REGTWOA USING *,&REG(1),&REG(2)\n         AGO   .REGADDA\n.REGONEA USING *,&REG(1)\n.REGADDA ANOP\nQ&SYSNDX B     &A.(0,15)                BRANCH AROUND\n&A       SETA  K'&ID\n         DC    AL1(&A)\n.CONTB   AIF   (&A GT 32).SPLIT\n.CONTAA  AIF   (&A GT 8).BRAK\n&E       SETC  '&ID'(&B+1,&A)\n         DC    CL&A'&E'\n         AGO   .CONT1\n.BRAK    ANOP\n&E       SETC  '&ID'(&B+1,8)\n         DC    CL8'&E'\n&B       SETA  &B+8\n&A       SETA  &A-8\n         AGO   .CONTAA\n.SPLIT   ANOP\n&E       SETC  '&ID'(&B+1,8)\n&F       SETC  '&ID'(&B+9,8)\n&G       SETC  '&ID'(&B+17,8)\n&H       SETC  '&ID'(&B+25,8)\n         DC    CL32'&E.&F.&G.&H'\n&B       SETA  &B+32\n&A       SETA  &A-32\n         AGO   .CONTB\n.SPEC    AIF   ('&NAME' EQ '').CSECTN\n&E       SETC  '&NAME'\n&A       SETA  1\n.CONTQ   AIF   ('&E'(1,&A) EQ '&E').LVE\n&A       SETA  &A+1\n         AGO   .CONTQ\n.LVE     ANOP\n&B       SETA  ((&A+2)/2)*2+4\n         AIF   (N'&REG EQ 1).REGONEB\n         AIF   (N'&REG EQ 2).REGTWOB\n         USING *,&REG(1),&REG(2),&REG(3)\n         AGO   .REGADDB\n.REGTWOB USING *,&REG(1),&REG(2)\n         AGO   .REGADDB\n.REGONEB USING *,&REG\n.REGADDB ANOP\nQ&SYSNDX B     &B.(0,15)                BRANCH AROUND\n         DC    AL1(&A)\n         DC    CL&A'&E'\n         AGO   .CONT1\n.CSECTN  AIF   ('&SYSECT' EQ '').E4\n&E       SETC  '&SYSECT'\n&A       SETA  1\n         AGO   .CONTQ\n.E4      IHBERMAC 78,360\n.CONT4   ANOP\n         AIF   (N'&REG EQ 1).REGONEC\n         AIF   (N'&REG EQ 2).REGTWOC\n         USING *,&REG(1),&REG(2),&REG(3)\n         AGO   .CONT1\n.REGTWOC USING *,&REG(1),&REG(2)\n         AGO   .CONT1\n.REGONEC USING *,&REG(1)\n.CONT1   ANOP\n         AIF   ('&REG' EQ '0' OR '&REG' EQ '1' OR '&REG' EQ '13').ERR1\n         AIF   ('&REG' EQ '14' OR '&REG' EQ '15').ERR1\n.CONT3   ANOP\n         DS    0H\n         STM   14,12,12(13)             SAVE REGS IN CALLERS AREA\n         AIF   ('&MASK' EQ 'NO').NOMASK  DONT PRESERVE SYSTEM MASK\nQ&SYSNDX BALR  15,0                     GET MASK 1-26-79\n         STCM  15,8,16(13)             SAVE MASK BYTE\n         L     15,16(,13)              RESTORE 15 LIKE ENTRY\n.NOMASK  ANOP\n         LR    &REG(1),15                 SET TRUE BASE EQUAL EP\n         AIF   (N'&REG EQ 1).ONEREG\n         L     &REG(2),=A(Q&SYSNDX+4096)\n.ONEREG  AIF ('&SAVE' EQ 'NONE').A\n         AIF   ('&SAVE' EQ '').C\n         AIF   ('&SAVE'(1,1) EQ '(').F\n         LA    1,&SAVE                  SET R1 EQ USERS SAVE ADDRESS\n         AGO   .D\n.F       ANOP\n         AIF   ('&SAVE' EQ '(1)').D\n         LR    1,&SAVE(1)               PICK UP USERS SAVE AREA\n         AGO   .D\n.C       ANOP\n         AIF   ('&LV'(1,1) EQ '(').E\n.*         AIF   ('&LV' GT '4023').ERR2\n         LA    0,(&LV.+72+15)/16        PARAMETER FOR GETMAIN\n         SLL   0,4                      PARAMETER FOR GETMAIN /*8039*/\n         AGO   .CONT2\n.E       ANOP\n         AIF   ('&LV' EQ '(0)').CONT2\n         LA    0,72(&LV(1).,0)          PARAMETER FOR GETMAIN\n.CONT2   ANOP\n         BAL   1,*+4                    INDICATE GETMAIN\n         SVC   10                       ISSUE SVC 10\n         ST    0,0(0,1)                 SAVE LENGTH IN 1ST WORD\n.D       ANOP\n         XC    4(68,1),4(1)             CLEAR AREA\n         ST    1,8(0,13)                CHAIN FORWARD\n         ST    13,4(0,1)                CHAIN BACKWARD\n         LM    0,1,20(13)               RESET R0 AND R1\n         L     13,8(0,13)               SET SAVE AREA REGISTER\n.A       ANOP\n         MEXIT\n.ERR1    MNOTE 'ILLEGAL BASE REGISTER SPECIFIED'\n         AGO   .CONT3\n.ERR2    MNOTE 'LV GT 4023, LV REQUEST NOT HONORED'\n         LA    0,72(0,0)                PARAMETER FOR GETMAIN\n         AGO   .CONT2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPSMAC": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x89\\x00_\\x01\\x01\\x00\\x9f\\x14X\\x00s\\x00j\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "2001-01-09T14:58:00", "lines": 115, "newlines": 106, "modlines": 0, "user": "AGCO"}, "text": "         MACRO\n&NAME    JRPSMAC\n         TITLE 'STATIC STORAGE'\n***********************************************************************\n*                                                                     *\n*             MACRO NAME = JRPSMAC                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  STATIC AREA FOR JRP.COPIED TO       *\n*                    DYNAMIC AREA BY JRP100.                          *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = MUST STAY IN SYNC WITH JRPDMAC.      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                                                                     *\n*                PROCESSOR = MACRO                                    *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   EXPANDED IN JRP100 MODULE.                        *\n*                                                                     *\n*             INPUT = NONE.                                           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = MEND.                                   *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nJ2SWA    DS    0D\n         PUSH  PRINT\nJ2SBFR   DC    C'                  BEGINNING ON                   '\nJ2SCMWT1 WTO   'JRPI100        ',MCSFLAG=(REG0),MF=L\nJ2SOPER  WTO   'JRPX000                                                X\n                   ',MF=L,ROUTCDE=(8)\nJ2SWERR  WTO   'JRPE100         -                         ,R15=999',   X\n               MF=L\nJ2SFLSMS DC    C'                   OUTPUT TERMINATED BY            '\nJ2SBEG   DC    0CL91' ',CL91'*'\nJ2SCMT2  DS    0F                  CURRENT OPTIONS MESSAGE\n         DC    AL2(J2SCMT2E-*)     L'TXT+L'ROUT+L'DESC\n         DC    X'4000'             MCSFLAG=(REG0)\n         DC    C'JRPI101 '\nJ2SPRT   DC    CL8'RXXXXXXX'\n         DC    C' NETID='\nJ2SNET   DC    CL8' '             DEFAULT NETWORK NAME\n         DC    CL1' '\n         DC    C'LU='\nJ2SLUID  DC    CL8' '              DEFAULT LUID\n         DC    CL1' '\nJ2SSTAT  DC    CL10'INACTIVE  '    PRINTER STATUS\nJ2SNME   DC    CL18'                  ' NAME AND NUMBER\n         DC    C',F='\nJ2SFORM  DC    C'    '             CURRENT FORM\n         DC    C',R='\nJ2SDEST  DC    CL8'LOCAL   '       CURRENT DESTINATION\n         DC    C',S='\nJ2SSEP   DC    CL1'Y'              DEFAULT PAGE SEPERATORS\n         DC    C',LPP='\nJ2SLEN2  DC    C'068'              DEFAULT PAGE SIZE\n         DC    C',MLIN='\nJ2SMLNE2 DC    C'9999'             DEFAULT PAGE WIDTH\n         DC    C',C='\nJ2SCLAS  DC    CL8'        '       CURRENT CLASS(ES)\n         DC    C',SCS='\nJ2SSCS   DC    CL1'Y'              SCS OPTION Y/N\n         DC    C',LGMD='\nJ2SLGMD  DC    CL8'        '       CURRENT LOGMODE\n         DC    C',RCD='\nJ2SBROK1 DC    CL3'00'             CURRENT LOGMODE\n         DC    C',FB2='\nJ2SBROK2 DC    CL3'00'             CURRENT LOGMODE\n         DC    C',SENSE='\nJ2SBROK3 DC    CL9'00000000'       CURRENT LOGMODE\n         DC    C'HEAD='                                          *DHC*\nJ2SHMEM  DC    CL8' '              HEADER MEMBER NAME            *DHC*\n         DC    C' TAIL='                                         *DHC*\nJ2STMEM  DC    CL8' '              TRAILER MEMBER NAME           *DHC*\n         DC    C' TRAN='                                         *DHC*\nJ2STRAN  DC    CL8' '              TRANSLATION OPTION/TABLE NAME *DHC*\nJ2SCMT2E EQU   *                   NO ROUT/DESC W/ REG0\nJ2SLEN   DC    F'68'               PAGE SIZE\nJ2SMLNE  DC    F'9999'             PAGE WIDTH\n         DS    0F\nJ2STWT   DC    F'0'\nJ2SMDL   EQU   *-J2SWA\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPSMACX": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00j\\x00j\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "JRP"}, "text": "         MACRO\n&NAME    JRPSMAC\n         TITLE 'STATIC STORAGE'\n***********************************************************************\n*                                                                     *\n*             MACRO NAME = JRPSMAC                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  STATIC AREA FOR JRP.COPIED TO       *\n*                    DYNAMIC AREA BY JRP100.                          *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = MUST STAY IN SYNC WITH JRPDMAC.      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                                                                     *\n*                PROCESSOR = MACRO                                    *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   EXPANDED IN JRP100 MODULE.                        *\n*                                                                     *\n*             INPUT = NONE.                                           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = MEND.                                   *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nJ2SWA    DS    0D\n         PUSH  PRINT\nJ2SBFR   DC    C'                  BEGINNING ON                   '\nJ2SCMWT1 WTO   'JRPI100        ',MCSFLAG=(REG0),MF=L\nJ2SOPER  WTO   'JRPX000                                                X\n                   ',MF=L,ROUTCDE=(8)\nJ2SWERR  WTO   'JRPE100         -                         ,R15=999',   X\n               MF=L\nJ2SFLSMS DC    C'                   OUTPUT TERMINATED BY            '\nJ2SBEG   DC    0CL91' ',CL91'*'\nJ2SCMT2  DS    0F                  CURRENT OPTIONS MESSAGE\n         DC    AL2(J2SCMT2E-*)     L'TXT+L'ROUT+L'DESC\n         DC    X'4000'             MCSFLAG=(REG0)\n         DC    C'JRPI101 '\nJ2SPRT   DC    CL8'RXXXXXXX'\n         DC    C' LU='\nJ2SLUID  DC    C'        '         DEFAULT LUID\n         DC    CL1' '\nJ2SSTAT  DC    CL10'INACTIVE  '    PRINTER STATUS\nJ2SNME   DC    CL18'                  ' NAME AND NUMBER\n         DC    C',F='\nJ2SFORM  DC    C'    '             CURRENT FORM\n         DC    C',R='\nJ2SDEST  DC    CL8'LOCAL   '       CURRENT DESTINATION\n         DC    C',S='\nJ2SSEP   DC    CL1'Y'              DEFAULT PAGE SEPERATORS\n         DC    C',LPP='\nJ2SLEN2  DC    C'068'              DEFAULT PAGE SIZE\n         DC    C',MLIN='\nJ2SMLNE2 DC    C'9999'             DEFAULT PAGE WIDTH\n         DC    C',C='\nJ2SCLAS  DC    CL8'        '       CURRENT CLASS(ES)\n         DC    C',SCS='\nJ2SSCS   DC    CL1'Y'              SCS OPTION Y/N\n         DC    C',LGMD='\nJ2SLGMD  DC    CL8'        '       CURRENT LOGMODE\n         DC    C',RCD='\nJ2SBROK1 DC    CL3'00'             CURRENT LOGMODE\n         DC    C',FB2='\nJ2SBROK2 DC    CL3'00'             CURRENT LOGMODE\n         DC    C',SENSE='\nJ2SBROK3 DC    CL9'00000000'       CURRENT LOGMODE\nJ2SCMT2E EQU   *                   NO ROUT/DESC W/ REG0\nJ2SLEN   DC    F'68'               PAGE SIZE\nJ2SMLNE  DC    F'9999'             PAGE WIDTH\n         DS    0F\nJ2STWT   DC    F'0'\nJ2SMDL   EQU   *-J2SWA\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRPTMAC": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x89\\x00_\\x01\\x01\\x00\\x9f\\x13$\\x00n\\x00n\\x00\\x01\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "2001-01-09T13:24:00", "lines": 110, "newlines": 110, "modlines": 1, "user": "AGCO"}, "text": "         MACRO\n&NAME    JRPTMAC\nJ1TWA    DSECT\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nJ1TPWA   DS    0D\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\nJ1TRQBF  DS    0F\n         DC    X'F5C31140581DE8',C'CONTROL TERMINAL FACILITY '\n         DC    X'11423A1DE8',C'\"JRP\" VER. II REL. I'\n         DC    X'114CF31DF8'\n         DC    CL16'PASSWORD ===>   '\n         DC    X'114DC31DC1'\nJ1TPWD   DC    CL5' ',X'114DC91DF8'\n         DC    X'114F401DF8'                ROW 1 COL 1\nJ1TERRLN DC    80C' '\n         DC    X'11C7F31DF8'                ROW 1 COL 1\n         DC    CL16'USER-ID  ===>   '\n         DC    X'11C8C31DC1'\n         DC    X'13'\nJ1TUID   DC    CL7' ',X'11C84B1DF8'\nJ1TRQBFL EQU   *-J1TRQBF\nJ1DOUTBF DS    0F\n         DC    X'F5C3115D7F1DE8'\n         DC    C' '\nJ1DLUNM  DC    12C' '\nJ1DTIME  DC    CL12'05:05:05 '\nJ1DCMDSV DC    CL8'         ',X'11'\nJ1DADD1  DC    X'C14F'\n         DC    X'1DE8'\nJ1DAREA1 DC    80C' ',X'11'\nJ1DADD2  DC    X'C14F'\n         DC    X'1DE8'\nJ1DAREA2 DC    80C' '\nJ1DENDSC DC    X'115D6B1D4013'\nJ1DCMDLN DC    50C' '\nJ1DOUTLN EQU   *-J1DOUTBF\nMOREDATA DC    XL7'F1C3115B601DE8'\n         DC    CL12'MORE........'\nMOREND   DC    XL6'115CF81D4013'\nCLERDATA DC    XL7'F1C3115B601DE8'\n         DC    CL12'            '\nCLEREND  DC    XL6'115CF81D4013'\nJ1DPRI   DS    0F\n         DC    X'C150C260C3F0C540C650'\n         DC    X'C760C8F04A404B504C60'\n         DC    X'4DF04F405050D160D2F0'\n         DC    X'D440D550D660D7F0D940'\n         DC    X'5A505B60',C'TEND'\nJ1DALT   DS    0F\n         DC    X'C150C260C3F0C540C650'\n         DC    X'C760C8F04A404B504C60'\n         DC    X'4DF04F405050D160D2F0'\n         DC    X'D440D550D660D7F0D940'\n         DC    X'5A505B605CF05E405F50'\n         DC    X'606061F0E340E450F560'\n         DC    X'E6F0E840E9506A606BF0'\n         DC    X'6D406E506F60F0F0F240'\n         DC    X'F350F460'\n         DC    C'TEND'\n         DS    0F\nJ1DRPLG  RPL   AM=VTAM\n         DS    0F\nJ1DNIBG  NIB   MODE=RECORD\n         DS    0F\nJ1DENTST DS    F\nJ1TNXTLN DS    F\nJ1TPWT   DS    F\nJ1TRPL   DS    F\nJ1TACB   DS    F\nJ1TARG   DS    F\nJ1TNIB   DS    F\nJ1DADTBL DS    F\nJ1DCOLS  DS    F\nJ1DCOLM1 DS    F\nJ1TADDSV DS    F\nJ1TNEWAD DS    F\nJ1TNEWLN DS    F\nST3      DS    F\nST4      DS    F\nST5      DS    F\nST6      DS    F\nST7      DS    F\nST8      DS    F\nST9      DS    F\nST10     DS    F\nJ1TLUID  DS    CL8\nJ1DUSER  DS    CL7\nJ1DPSWD  DS    CL8\nCLEAR    DS    X\nJ1TFLG   DS    X\nJ1TFLG1  DS    X\nJ1DTXT1  DS    CL86\nJ1DTXT   EQU   J1DTXT1+6,80\nJ1DHLD   DS    CL80\nJ1DEND   EQU   *\nJ1TCLRE  EQU   *                   END OF DYNAMIC AREA\nJ1TSASIZ EQU   *-J1TPWA            SIZE OF DYNAMIC AREA\nJ1TMRMSG EQU   X'01'\nJ1TAUTO  EQU   X'02'\nJ1TGLBF  EQU   X'04'\nJ1TLOGN  EQU   X'08'\nJ1TTOP   EQU   X'10'\nJ1TUNSOL EQU   X'20'\nJ1TBUSY  EQU   X'40'\nJ1TRECD  EQU   X'80'\nJ1TSNA   EQU   X'01'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRPUNLD": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\r\\x00\\r\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "JRP"}, "text": "//S562TSOU JOB (0910,T),'NET-3312-006',CLASS=T,MSGCLASS=T,\n//         NOTIFY=S562TSO TYPRUN=HOLD\n//S1      EXEC PGM=IEBCOPY,REGION=768K,COND=(4,LT)\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=S562TSO.JRP.DATA,DISP=SHR\n//SYSUT2   DD DSN=JRP.NLTAPE,DISP=(NEW,KEEP),LABEL=(1,NL,,EXPDT=98000),\n//         UNIT=TAPE9,\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSIN    DD  *\n  COPY OUTDD=SYSUT2,INDD=SYSUT1\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRP100": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x00\\x00\\x89\\x00_\\x01\\x01\\x01\\x0f\\x152\\x01{\\x01a\\x00(\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "2001-01-10T15:32:00", "lines": 379, "newlines": 353, "modlines": 40, "user": "AGCO"}, "text": "JRP100 TITLE 'JRP MANAGER'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP100                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  INITIALIZATION, MVS COMMAND MONITOR,*\n*                               SUBTASK MONITOR AND 100.              *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                READ INITIALIZATION DATA SET FROM DD JRPDATA,        *\n*                PASS INFO TO P110 VIA LINK,ATTACH JRP200 SUBTASK, *\n*                MONITOR MVS COMM-TASK FOR MODIFY COMMANDS,AND MAKE   *\n*                CLOSE DOWN JUDGEMENTS.                               *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = ACF/VTAM??                           *\n*                                JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE =                                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, SUPERVISOR STATE(AC=1) *\n*                                                                     *\n*             ENTRY POINTS = JRP100 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM MVS AS ADDRESS SPACE.                        *\n*                                                                     *\n*             INPUT = JRPDATA DD FOR INITIALIZATION,FROM MVS          *\n*                OPERATOR MODIFY COMMANDS AS COMMAND INPUT.           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = JRP110.                                   *\n*                                                                     *\n*                SUBTASKS = JRP200==>JRP300                           *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,EXTRACT,QEDIT,WAIT,GETMAIN,    *\n*                      LINK,ATTACH,STATUS,DETACH,OPEN,CLOSE,ACB,      *\n*                      GET,FREEPOOL,WTO,MODESET                       *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n* 25JUN99 DHC CHANGE WTOR TO STOP/MODIFY PROCESSING               *DHC*\n* 22JUN99 DHC ALLOW FOR COMMENTS                                  *DHC*\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP100 CSECT\n         JRPSAVE REG=(12),ID=*,LV=P1DSASIZ     ENTRY CHAIN\n         USING DSA,R13\n         L     R11,0(R1)                       GET PARM IF ANY\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA                        START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA)              LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA                       START OF STATIC DATA\n         LA    R15,P1SMDL                      LENGTH OF MODEL DATA\n         MVCL  R0,R14                          MOVE TO BE RENT,REUS\n***                                                                 ***\n*   INITIALIZE INPUT DCB                                              *\n***                                                                 ***\n         LA    R10,TWT\n         ST    R10,J2STWT\n         MVI   P1DOPENX,X'80'                  ONLY ONE IN LIST\n         LA    R2,P1DDCBI                     GET INPUT DCB ADDR\n         OPEN  ((R2),INPUT),MF=(E,P1DOPENX)\n         MVI   P1DPFLG,J1PINITF                P110 INITIALIZATION FLG\n         LA    R10,PWT                          ADDRESS OF P.A.T.\n*                                              (PRINTER ADDRESS TABLE)\n         TITLE  'LOOP GETTING/WRITING DATA SET UNTIL END'\nP1GLOOP  DS    0H\n         GET   P1DDCBI\n         CLI   0(R1),C'*'          IS IT A COMMENT?               *DHC*\n         BE    P1GLOOP             YES, IGNORE                    *DHC*\n         LA    R11,9(R1)                       SAVE DATA AREA\n         LR    R3,R1                           SAVE REG1\n         TM    P1DPFLG,J1PCNTF                 CONTINUATION FLAG ON\n         BO    P1DSETLK                        YES BYPASS PRTR INIT.\n         MVC   0(8,R10),0(R1)                  SAVE PRINTER NAME\n         LA    R2,(J1DSASIZ)                   GETMAIN -\n         GETMAIN RC,LV=(R2)                    FOR -\n         ST    R1,8(R10)                       STORE ADDRESS IN P.W.T.\n         L     R8,8(R10)                          SAVE GETMAIN AREA\n         USING J1DWA,R8                        SET UP ADDRESSABILITY\n         LA    R0,J1DWA                        START OF DYNAMIC AREA\n         LA    R1,(J1DCLRE-J1DWA)              LENGTH OF DYNAMIC AREA\n         LA    R14,J2SWA                       START OF STATIC DATA\n         LA    R15,J2SMDL                      LENGTH OF MODEL DATA\n         MVCL  R0,R14                          MOVE TO BE RENT,REUS\n         MVC   J1DBFCL(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DHPRT(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DFLSMS(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DWERRP(8),0(R3)                MOVE PRT NAME TO P1G.\n         DROP  R8\n*\nP1DSETLK DS    0H\n         NI    P1DPFLG,255-J1PCNTF              TURN OFF CONT. BIT\n         CLI   71(R3),C' '                      IS THIS CARD CONTINUED\n         BE    P1DNOCNT                         NO.\n         OI    P1DPFLG,J1PCNTF                  YEH. TURN ON CONT FLAG\nP1DNOCNT LA    R9,P1DPFLG\n         LINK  EP=JRP110,PARAM=((R9),(R10),(R11))     LINK TO -\n*                                              P110 MODIFY ROUTINE\n         TM    P1DPFLG,J1PINVF                  INVALID ON INIT\n         BO    JRPRTRN                          YES END\n         TM    P1DPFLG,J1PCNTF                  CONTINUATION CARD??\n         BO    P1GLOOP                          YEH. GET NEXT CARD\n         LA    R10,12(R10)                      BUMP TO NEXT PWT ENTRY\n         B     P1GLOOP\n*\n**       CLOSE INPUT DCB AND FREE BUFFER POOL\n*\nINTCLOSE LA    R2,P1DDCBI                      GET DCB ADDRESS\n         CLOSE ((R2),DISP),MF=(E,P1DOPENX)\n         FREEPOOL P1DDCBI                       FREE BUFFER POOL\n         MVC   0(4,R10),=C'PEND'                END OF PWT\n         MVI   P1DPFLG,X'00'                    END OF INITIALIZATION\n**       SET UP ACB AND OPEN\n*\nOPNACB   DS    0H\n         OPEN  P1DACB\n         LTR   15,15\n*        BZ    AT120\n         BZ    P1CMJES\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'ACB NOT AVAILIBLE        '\n         LA    R15,8\n         B     P1FATALF\n         DS    0F\nP1SAPPLN DC    XL1'04'\nP1SAPPNM DC    CL4'JRPV '\n         DS    0F\nP1DACB   ACB   AM=VTAM,APPLID=P1SAPPLN,MACRF=LOGON\n*\n**       ATTACH JES SCAN MODULE\n*\nP1CMJES  DS    0H\n         LA    R9,P1DJFLG\n         LA    R10,PWT\n         LA    R11,P1DACB\n         LA    R5,P1DJECB\n         ATTACH  EP=JRP200,PARAM=((R9),(R10),(R11)),ECB=(R5),          X\n               SF=(E,P1DATACH)\n         ST    R1,P1DJTCB\n*\n**       ATTACH CONTROL TERMINAL MODULE\n*\nAT120    LA    R5,P1DTECB\n         LA    R6,TWT\n         LA    R7,P1DPFLG\n         LA    R8,PWT\n*        LINK    EP=JRP120,PARAM=((R7),(R8)) ECB=(R5),                X\n         ATTACH  EP=JRP120,PARAM=((R7),(R8),(R6)),ECB=(R5),           XX\n               SF=(E,P1DATACH)\n         ST     R1,P1DTTCB\n         COPY  DHC100A             ESTABLISH STOP/MODIFY INTERFACE*DHC*\n*\n**     SEND OPERATOR INITIALIZATION COMPLETED MESSAGE\n*\n         MVC   P1DWTO1,=CL4'I101'        MESSAGE IDENTIFIER\n         MVC   P1DWTO2,=CL30'INITIALIZATION COMPLETE'\n         LA    R1,P1DWTO                 WTO LIST\n         SVC   35\n*       WTOR  'JRP100I - ENTER ICLOSE TO SHUT DOWN',ANSWER,20,WTORECB,X\n*              ROUTCDE=(1,11),DESC=5\n*\n**     WAIT FOR WTOR, JRPJES OR JRP CTRTERM ECB\"S TO BE POSTED\n*\nWAIT     DS    0H\n         LA    R1,P1DJECB\n         ST    R1,P1DWECB\n         LA    R1,P1DTECB\n         ST    R1,P1DWECB+4\n         LA    R1,WTORECB\n*        ST    R1,P1DCOMM                                         *DHC*\n         MVI   P1DTFLG,C' '\n         MVI   P1DCOMM,X'80'     ** TEST  LAST IN WAIT LIST\n         LA    R1,P1DWECB                 LOAD ECB LIST\n         WAIT  1,ECBLIST=(1)              WAIT FOR WORK OR COMMAND ECB\nP1CMCK   DS    0H\n         LA    R1,P1DTECB\n         TM    0(R1),X'40'\n         BNO   P1CKCOMM\n         MVI   P1DTFLG,C'T'\n         B     P1CMCONE\nP1CKCOMM L     R1,P1DCOMM                 GET COMM PTRS\n         TM    0(R1),X'40'                POSTED?\n         BNO   JESABEND                   NO - GO TO CLOSE CODE\n         XC    WTORECB,WTORECB\n         OC    ANSWER(6),BLANKS\n         CLC   ANSWER(6),=C'ICLOSE'\n         BNE   WTOR\nWTOR     DS    0H                  CLOSE DOWN WHEN OP DOES A P    *DHC*\n         OI    P1DPFLG,J1DICLSF\nP1CMCONE EQU   *\n         TM    P1DPFLG,J1DICLSF ICLOSE ???\n         BNO   P1MBCLS          NO GO BACK AND WAIT\nWTOREND  EQU   *\n         MVC   P1DWTO1,=CL4'I102 '\n         MVC   P1DWTO2,=CL30'ICLOSE IN PROGRESS'\n         OI    P1DJFLG,J1DICLSF\n         LA    R1,P1DWTO\n         SVC   35\n         B      JESWAIT\nP1MBCLS  EQU    *\n*1MBCLS  TM     P1DPFLG,J1DNCLSF CLOSE ???\n*        BO     P1SNDCL          NO GO BACK AND WAIT\n*        CLI    P1DTFLG,C'T'     FROM JRP120\n*        BNE    P1CMDEL\nP1SNDCL  MVC    P1DWTO1,=CL4'I103 '\n         MVC    P1DWTO1,=CL4'I103 '\n         MVC    P1DWTO2,=CL30'CLOSE IN PROGRESS'\n         OI     P1DJFLG,J1DNCLSF\n         LA    R1,P1DWTO\n         SVC   35\nJESWAIT  LA     R1,P1DJECB\n         WAIT   ECB=(R1)\n         B      JESSTOP\nJESABEND MVC   P1DWTO1,=CL4'E101'\n         MVC   P1DWTO2,=CL30'JRP200 ERROR ENCOUNTERED'\n         LA    R1,P1DWTO\n         SVC   35\nJESSTOP  STATUS STOP,TCB=P1DJTCB\n         DETACH P1DJTCB\nCONSCLOS STATUS STOP,TCB=P1DTTCB\n         DETACH P1DTTCB\n         MVC   P1DWTO1,=CL4'I104'\n         MVC   P1DWTO2,=CL30'SHUTDOWN COMPLETE, ENDING'\n         LA    R1,P1DWTO\n         SVC   35\n*        RETURN TO CALLER\nJRPRTRN DS    0H\n         CLOSE   P1DACB\n         JRPRTRN\n*\n         TITLE 'F A T A L  E R R O R  M E S S A G E S'\nP1FATALF DS    0H\n         CVD   R15,P1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         LA    R1,P1DWTO           GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         CLOSE P1DACB\n         ABEND  5,DUMP\n         TITLE 'LITERAL POOL'\n         LTORG ,\n         TITLE 'STATIC STORAGE'\nP1GEOD   EQU   *\nJ2SYN    EQU   *\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nP1SDCBIS EQU   *\nP1SDCBI  DCB   DSORG=PS,MACRF=GL,DDNAME=JRPDATA,EODAD=INTCLOSE\nP1SDCBIE EQU   *\nP1SATACH ATTACH EP=JRP200,SF=L\nP1SWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1SMDL   EQU   *-P1SWA\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         DS    0F\nWTORECB  DS    A                   PTR TO COMM PTRS\nBLANKS   DC    CL16' '\nANSWER   DS    CL20\n         JRPSMAC         MAPPING FOR STATIC AREA\n         TITLE 'DYNAMIC - GOTTEN AREA'\nDSA      DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nP1DDCBIS EQU   *\nP1DDCBI  DCB   DSORG=PS,MACRF=GL,DDNAME=JRPDATA,EODAD=INTCLOSE\nP1DATACH ATTACH EP=JRP200,SF=L\nP1DWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1DWTO1  EQU   P1DWTO+4+3,4      ERROR MESSAGE NUMBER PORTION\nP1DWTO2  EQU   P1DWTO+4+3+5,30    MESSAGE PORTION\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DJTCB  DS    F     JRP JES TCB\nP1DTTCB  DS    F     JRP CTRCONS TCB\nP1DJECB  DS    F     JRP JES ATTACH ECB\nP1DTECB  DS    F     JRP CTRCONS ATTACH ECB\nP1DWECB  DS    A     JES ATTACH ECB ADDCON\n         DS    A     CTRTERM ATTACH ECB ADDCON\nP1DCOMM  DS    A     WTOR ECB ADDCON\nP1DOPENX DS    F\nP1DPFLG  DS    C\nP1DJFLG  DS    C\nP1DTFLG  DS    C\nP1DWORK  DS    D                   WORK AREA\n         SPACE 2                                                  *DHC*\n***********************************************************************\n*        STOP/MODIFY CONTROL BLOCKS                               *DHC*\n***********************************************************************\n         SPACE 2                                                  *DHC*\nCOMMLPTR DC    A(0)                PTR FROM EXTRACT (TO ECB & CIB PTRS)\nCMNDECBP DC    A(0)                PTR TO ECB POSTED WHEN CMND ISSUEDC*\nCMDECBP2 DC    A(0)                POINTER TO COMMAND ECB         *DHC*\nUCMID    DC    X'00'               ID OF CONSOLE TALKING TO ME    *DHC*\n         SPACE 2                                                  *DHC*\nTWT      DS    25CL4    MAX OF 25  CONTROL TERMINALS\nPWT      DS    101CL12  MAX OF 100 PRINTERS\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         PRINT ON,GEN\n         JRPDMAC         MAPPING FOR DYNAMIC AREA\n         JRPREGS\n         PUSH  PRINT\n         DCBD  DSORG=PS\n         IEZDEB\n         IFGACB                     ACB\n         CVT     DSECT=YES          CVT\n         IHAPSA  DSECT=YES          PSA\n         IKJTCB  DSECT=YES          TCB\n         IEZJSCB                   JSCB\n*                                                                 *DHC*\n         PUSH  PRINT               SAVE PRINT STATUS              *DHC*\n         PRINT ON,GEN              EXPAND SYSTEM DSECTS           *DHC*\n         SPACE 3                                                  *DHC*\nCOMDSECT DSECT ,                   COMMUNICATIONS AREA            *DHC*\n         IEZCOM ,                  MAP COMMUNICATIONS AREA        *DHC*\n         EJECT ,                                                  *DHC*\nCIBDSECT DSECT ,                   COMMAND INPUT BUFFER           *DHC*\n         IEZCIB ,                  MAP COMMAND BUFFER             *DHC*\n         SPACE 3                                                  *DHC*\n         POP   PRINT               RESTORE PRINT STATUS           *DHC*\n         END   ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP100OL": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x01a\\x01a\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 353, "newlines": 353, "modlines": 0, "user": "JRP"}, "text": "JRP100 TITLE 'JRP MANAGER'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP100                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  INITIALIZATION, MVS COMMAND MONITOR,*\n*                               SUBTASK MONITOR AND 100.              *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                READ INITIALIZATION DATA SET FROM DD JRPDATA,        *\n*                PASS INFO TO P110 VIA LINK,ATTACH JRP200 SUBTASK, *\n*                MONITOR MVS COMM-TASK FOR MODIFY COMMANDS,AND MAKE   *\n*                CLOSE DOWN JUDGEMENTS.                               *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = ACF/VTAM??                           *\n*                                JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE =                                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, SUPERVISOR STATE(AC=1) *\n*                                                                     *\n*             ENTRY POINTS = JRP100 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM MVS AS ADDRESS SPACE.                        *\n*                                                                     *\n*             INPUT = JRPDATA DD FOR INITIALIZATION,FROM MVS          *\n*                OPERATOR MODIFY COMMANDS AS COMMAND INPUT.           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = JRP110.                                   *\n*                                                                     *\n*                SUBTASKS = JRP200==>JRP300                           *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,EXTRACT,QEDIT,WAIT,GETMAIN,    *\n*                      LINK,ATTACH,STATUS,DETACH,OPEN,CLOSE,ACB,      *\n*                      GET,FREEPOOL,WTO,MODESET                       *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP100 CSECT\n         JRPSAVE REG=(12),ID=*,LV=P1DSASIZ     ENTRY CHAIN\n         USING DSA,R13\n         L     R11,0(R1)                       GET PARM IF ANY\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA                        START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA)              LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA                       START OF STATIC DATA\n         LA    R15,P1SMDL                      LENGTH OF MODEL DATA\n         MVCL  R0,R14                          MOVE TO BE RENT,REUS\n***                                                                 ***\n*   INITIALIZE INPUT DCB                                              *\n***                                                                 ***\n         LA    R10,TWT\n         ST    R10,J2STWT\n         MVI   P1DOPENX,X'80'                  ONLY ONE IN LIST\n         LA    R2,P1DDCBI                     GET INPUT DCB ADDR\n         OPEN  ((R2),INPUT),MF=(E,P1DOPENX)\n         MVI   P1DPFLG,J1PINITF                P110 INITIALIZATION FLG\n         LA    R10,PWT                          ADDRESS OF P.A.T.\n*                                              (PRINTER ADDRESS TABLE)\n         TITLE  'LOOP GETTING/WRITING DATA SET UNTIL END'\nP1GLOOP  DS    0H\n         GET   P1DDCBI\n         LA    R11,9(R1)                       SAVE DATA AREA\n         LR    R3,R1                           SAVE REG1\n         TM    P1DPFLG,J1PCNTF                 CONTINUATION FLAG ON\n         BO    P1DSETLK                        YES BYPASS PRTR INIT.\n         MVC   0(8,R10),0(R1)                  SAVE PRINTER NAME\n         LA    R2,(J1DSASIZ)                   GETMAIN -\n         GETMAIN RC,LV=(R2)                    FOR -\n         ST    R1,8(R10)                       STORE ADDRESS IN P.W.T.\n         L     R8,8(R10)                          SAVE GETMAIN AREA\n         USING J1DWA,R8                        SET UP ADDRESSABILITY\n         LA    R0,J1DWA                        START OF DYNAMIC AREA\n         LA    R1,(J1DCLRE-J1DWA)              LENGTH OF DYNAMIC AREA\n         LA    R14,J2SWA                       START OF STATIC DATA\n         LA    R15,J2SMDL                      LENGTH OF MODEL DATA\n         MVCL  R0,R14                          MOVE TO BE RENT,REUS\n         MVC   J1DBFCL(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DHPRT(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DFLSMS(8),0(R3)                MOVE PRT NAME TO P1G.\n         MVC   J1DWERRP(8),0(R3)                MOVE PRT NAME TO P1G.\n         DROP  R8\n*\nP1DSETLK DS    0H\n         NI    P1DPFLG,255-J1PCNTF              TURN OFF CONT. BIT\n         CLI   71(R3),C' '                      IS THIS CARD CONTINUED\n         BE    P1DNOCNT                         NO.\n         OI    P1DPFLG,J1PCNTF                  YEH. TURN ON CONT FLAG\nP1DNOCNT LA    R9,P1DPFLG\n         LINK  EP=JRP110,PARAM=((R9),(R10),(R11))     LINK TO -\n*                                              P110 MODIFY ROUTINE\n         TM    P1DPFLG,J1PINVF                  INVALID ON INIT\n         BO    JRPRTRN                          YES END\n         TM    P1DPFLG,J1PCNTF                  CONTINUATION CARD??\n         BO    P1GLOOP                          YEH. GET NEXT CARD\n         LA    R10,12(R10)                      BUMP TO NEXT PWT ENTRY\n         B     P1GLOOP\n*\n**       CLOSE INPUT DCB AND FREE BUFFER POOL\n*\nINTCLOSE LA    R2,P1DDCBI                      GET DCB ADDRESS\n         CLOSE ((R2),DISP),MF=(E,P1DOPENX)\n         FREEPOOL P1DDCBI                       FREE BUFFER POOL\n         MVC   0(4,R10),=C'PEND'                END OF PWT\n         MVI   P1DPFLG,X'00'                    END OF INITIALIZATION\n**       SET UP ACB AND OPEN\n*\nOPNACB   DS    0H\n         OPEN  P1DACB\n         LTR   15,15\n*        BZ    AT120\n         BZ    P1CMJES\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'ACB NOT AVAILIBLE        '\n         LA    R15,8\n         B     P1FATALF\n         DS    0F\nP1SAPPLN DC    XL1'03'\nP1SAPPNM DC    CL4'JRP'\n         DS    0F\nP1DACB   ACB   AM=VTAM,APPLID=P1SAPPLN,MACRF=LOGON\n*\n**       ATTACH JES SCAN MODULE\n*\nP1CMJES  DS    0H\n         LA    R9,P1DJFLG\n         LA    R10,PWT\n         LA    R11,P1DACB\n         LA    R5,P1DJECB\n         ATTACH  EP=JRP200,PARAM=((R9),(R10),(R11)),ECB=(R5),          X\n                SF=(E,P1DATACH)\n         ST    R1,P1DJTCB\n*\n**       ATTACH CONTROL TERMINAL MODULE\n*\nAT120    LA    R5,P1DTECB\n         LA    R6,TWT\n         LA    R7,P1DPFLG\n         LA    R8,PWT\n*        LINK    EP=JRP120,PARAM=((R7),(R8)) ECB=(R5),                X\n         ATTACH  EP=JRP120,PARAM=((R7),(R8),(R6)),ECB=(R5),           XX\n                SF=(E,P1DATACH)\n         ST     R1,P1DTTCB\n*\n**     SEND OPERATOR INITIALIZATION COMPLETED MESSAGE\n*\n         MVC   P1DWTO1,=CL4'I101'        MESSAGE IDENTIFIER\n         MVC   P1DWTO2,=CL30'INITIALIZATION COMPLETE'\n         LA    R1,P1DWTO                 WTO LIST\n         SVC   35\nWTOR     WTOR  'JRP100I - ENTER ICLOSE TO SHUT DOWN',ANSWER,20,WTORECB,X\n               ROUTCDE=(1,11),DESC=5\n*\n**     WAIT FOR WTOR, JRPJES OR JRP CTRTERM ECB\"S TO BE POSTED\n*\nWAIT     DS    0H\n         LA    R1,P1DJECB\n         ST    R1,P1DWECB\n         LA    R1,P1DTECB\n         ST    R1,P1DWECB+4\n         LA    R1,WTORECB\n         ST    R1,P1DCOMM\n         MVI   P1DTFLG,C' '\n         MVI   P1DCOMM,X'80'     ** TEST  LAST IN WAIT LIST\n         LA    R1,P1DWECB                 LOAD ECB LIST\n         WAIT  1,ECBLIST=(1)              WAIT FOR WORK OR COMMAND ECB\nP1CMCK   DS    0H\n         LA    R1,P1DTECB\n         TM    0(R1),X'40'\n         BNO   P1CKCOMM\n         MVI   P1DTFLG,C'T'\n         B     P1CMCONE\nP1CKCOMM L     R1,P1DCOMM                 GET COMM PTRS\n         TM    0(R1),X'40'                POSTED?\n         BNO   JESABEND                   NO - GO TO CLOSE CODE\n         XC    WTORECB,WTORECB\n         OC    ANSWER(6),BLANKS\n         CLC   ANSWER(6),=C'ICLOSE'\n         BNE   WTOR\n         OI    P1DPFLG,J1DICLSF\nP1CMCONE EQU   *\n         TM    P1DPFLG,J1DICLSF ICLOSE ???\n         BNO   P1MBCLS          NO GO BACK AND WAIT\nWTOREND  EQU   *\n         MVC   P1DWTO1,=CL4'I102 '\n         MVC   P1DWTO2,=CL30'ICLOSE IN PROGRESS'\n         OI    P1DJFLG,J1DICLSF\n         LA    R1,P1DWTO\n         SVC   35\n         B      JESWAIT\nP1MBCLS  EQU    *\n*1MBCLS  TM     P1DPFLG,J1DNCLSF CLOSE ???\n*        BO     P1SNDCL          NO GO BACK AND WAIT\n*        CLI    P1DTFLG,C'T'     FROM JRP120\n*        BNE    P1CMDEL\nP1SNDCL  MVC    P1DWTO1,=CL4'I103 '\n         MVC    P1DWTO1,=CL4'I103 '\n         MVC    P1DWTO2,=CL30'CLOSE IN PROGRESS'\n         OI     P1DJFLG,J1DNCLSF\n         LA    R1,P1DWTO\n         SVC   35\nJESWAIT  LA     R1,P1DJECB\n         WAIT   ECB=(R1)\n         B      JESSTOP\nJESABEND MVC   P1DWTO1,=CL4'E101'\n         MVC   P1DWTO2,=CL30'JRP200 ERROR ENCOUNTERED'\n         LA    R1,P1DWTO\n         SVC   35\nJESSTOP  STATUS STOP,TCB=P1DJTCB\n         DETACH P1DJTCB\nCONSCLOS STATUS STOP,TCB=P1DTTCB\n         DETACH P1DTTCB\n         MVC   P1DWTO1,=CL4'I104'\n         MVC   P1DWTO2,=CL30'SHUTDOWN COMPLETE, ENDING'\n         LA    R1,P1DWTO\n         SVC   35\n*        RETURN TO CALLER\nJRPRTRN DS    0H\n         CLOSE   P1DACB\n         JRPRTRN\n*\n         TITLE 'F A T A L  E R R O R  M E S S A G E S'\nP1FATALF DS    0H\n         CVD   R15,P1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         LA    R1,P1DWTO           GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         CLOSE P1DACB\n         ABEND  5,DUMP\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1GEOD   EQU   *\nJ2SYN    EQU   *\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nP1SDCBIS EQU   *\nP1SDCBI  DCB   DSORG=PS,MACRF=GL,DDNAME=JRPDATA,EODAD=INTCLOSE\nP1SDCBIE EQU   *\nP1SATACH ATTACH EP=JRP200,SF=L\nP1SWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1SMDL   EQU   *-P1SWA\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         DS    0F\nWTORECB  DS    A                   PTR TO COMM PTRS\nBLANKS   DC    CL16' '\nANSWER   DS    CL20\n         JRPSMAC         MAPPING FOR STATIC AREA\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nDSA      DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nP1DDCBIS EQU   *\nP1DDCBI  DCB   DSORG=PS,MACRF=GL,DDNAME=JRPDATA,EODAD=INTCLOSE\nP1DATACH ATTACH EP=JRP200,SF=L\nP1DWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1DWTO1  EQU   P1DWTO+4+3,4      ERROR MESSAGE NUMBER PORTION\nP1DWTO2  EQU   P1DWTO+4+3+5,30    MESSAGE PORTION\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DJTCB  DS    F     JRP JES TCB\nP1DTTCB  DS    F     JRP CTRCONS TCB\nP1DJECB  DS    F     JRP JES ATTACH ECB\nP1DTECB  DS    F     JRP CTRCONS ATTACH ECB\nP1DWECB  DS    A     JES ATTACH ECB ADDCON\n         DS    A     CTRTERM ATTACH ECB ADDCON\nP1DCOMM  DS    A     WTOR ECB ADDCON\nP1DOPENX DS    F\nP1DPFLG  DS    C\nP1DJFLG  DS    C\nP1DTFLG  DS    C\nP1DWORK  DS    D                   WORK AREA\nPWT      DS    101CL12  MAX OF 100 PRINTERS\nTWT      DS    25CL4    MAX OF 25  CONTROL TERMINALS\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         PRINT ON,GEN\n         JRPDMAC         MAPPING FOR DYNAMIC AREA\n         JRPREGS\n         PUSH  PRINT\n         DCBD  DSORG=PS\n         IEZDEB\n         IFGACB                     ACB\n         CVT     DSECT=YES          CVT\n         IHAPSA  DSECT=YES          PSA\n         IKJTCB  DSECT=YES          TCB\n         IEZJSCB                   JSCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP110": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x89\\x00_\\x00\\x99\\x17?\\x128\\x02\\x1b\\x02\\x18\\x00\\x08\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1999-06-22T12:38:00", "lines": 539, "newlines": 536, "modlines": 8, "user": "AGCO"}, "text": "JRP110 TITLE 'JRP COMMAND AND INITIALIZATION PARES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP110                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PARSE ROUTINE FOR JRP               *\n*                328X PRINTER\"S                                       *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS = ONE INVALID MESSAGE ISSUED ON FIRST COMMAND    *\n*                      PASS,NOT CRITICAL,WILL BE FIXED.               *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES MVS OPERATOR COMMANDS AND INPUT FROM          *\n*                JRP INITIALIZATION DATA SET.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN COMMANDS OR INPUT PASSED BY JRP100           *\n*                   FOR JRP KEYWORDS AND MAKES APPROPRIATE            *\n*                   MODIFICATIONS TO DYNAMIC PRINTER ENTRY AREAS.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP110 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP300 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY                                         *\n* 22JUN99 DHC ADDED CODE TO PARSE HEAD AND TAIL REQUESTS         *DHC**\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP110 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         LM    R9,R11,0(R1)\n         USING J1DWA,R8                   SAVE PARM\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA          START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA) LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA           START OF STATIC DATA\n         LA    R15,P1SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\n         TM    0(R9),J1PINITF      IS THIS INITIALIZATION\n         BZ    P1CMMOD\n         L     R8,8(R10)           LOAD UP DYNAMIC AREA ADDRESS\n         LR    R3,R11              BUMP UP TO DATA\n         MVC   P1DTXT+2(71),0(R3)\n         B     P1CMKEYW\n*\n****PROCESS MODIFY\n*\nP1CMMOD  DS    0H\n         MVI   J1DPRN,C'('         CHANGE LU SEARCH ARGUMENT\n         OI    0(R9),J1PGLBF     DEFAULT TO MODIFY/DISPLAY ALL\n         LR    R2,R11              COPY DATA ARDDRESS TO R2\n         LA    R0,P1DTXT           HOLD AREA\n         LA    R1,L'P1DTXT         L'\n         LH    R15,14(R2)          L' OF MODIFY\n         LA    R15,2(R15)          +2BYTE LEN\n         ICM   R15,8,=C' '         PAD W/ BLANKS\n         LA    R14,14(R2)          GET FROM ADDR\n         MVCL  R0,R14              MOVE MODIFY TEXT\n         MVC   P1DCONID,12(R2)     SAVE MCS ID. FOR RESPONSE\nP1CMNULL CLI   P1DTXT+2,C' '       NULL INPUT\n         BNE   P1CMCLSI            NO.\n         B     JRPRTRN             YES. JUST GO DELETE IT\nP1CMCLSI CLC   P1DTXT+2(6),=C'ICLOSE'\n         BNE   P1CMCLS\n         OI    0(R9),J1DICLSF      TELL 100 CLOSE IMMED\n         B     JRPRTRN\nP1CMCLS  CLC   P1DTXT+2(5),=C'CLOSE'\n         BNE   P1PLPRT\n         OI    0(R9),J1DNCLSF      TELL 100 CLOSE\n         B     JRPRTRN\n*\n**             FIND PRINTERS DYNAMIC AREA\n*\nP1PLPRT  DS    0H\n         LA    R4,P1DTXT+4        BUMP PASSED LENGTH AND COMMAND\nP1PLOOP  CLI   0(R4),C','         IS IT COMMA(END OF STRING) ???\n         BE    P1FPLOOP           YES. FIND PRINTER NAME.\n         CLI   0(R4),C' '         IS IT BLANK(END OF STRING) ???\n         BE    P1FPLOOP           YES. FIND PRINTER NAME.\n         LA    R4,1(R4)           BUMP UP 1\n         B     P1PLOOP\nP1FPLOOP DS    0H\n         LR    R5,R4\n         LA    R1,P1DTXT+4\n         SR    R5,R1              GET LENGTH OF PRINTER NAME\n         SH    R5,=H'1'\n         CLC   0(4,R10),=C'PEND'  IS THIS END OF TABLE\n         BE    P1CMINV            YES. WE DONT OWN THIS PRINTER\n         CLC   P1DTXT+4(2),=C'U '     IS THIS GLOBAL REQUEST\n         BE    P1FPSET            YES.\n         CLC   P1DTXT+4(2),=C'U,'     IS THIS GLOBAL REQUEST\n         BE    P1FPSET            YES.\n         NI    0(R9),255-J1PGLBF SINGLE THREAD\n         EX    R5,J2SPCHK         CHECK PRINTER NAME\n         BE    P1FPSET            SAME. THIS IS OUR BOY\nP1PALOOP DS    0H\n         LA    R10,12(R10)           LOAD UP NEXT ENTRY\n         B     P1FPLOOP           LOOP TO FIND PRINTER\nP1FPSET  DS    0H\n         L     R8,8(R10)          LOAD UP DYNAMIC AREA ADDRESS\n*\n**             DISP (DISPLAY PRINTER ATTRIBUTES)\n*\nP1CM$D   DS    0H\n         CLC   =C'$D',P1DTXT+2     DISPLAY ??\n         BNE   P1CM$C              NO-LOOK FOR KEYWORDS\nP1WDST   LR    R3,R4\nNOSTAT   CLI   0(R3),C','\n         BNE   P1CMDOP\n         MVC   J1DBYWHO(7),1(R3)\n         MVC   J1DBYWHO+7(1),=C' '\n         TM    0(R9),J1PGLBF\n         BNO   P1WTPUT\n         LA    R0,J1DQTPUT-J1DTPUT\n         B     *+8\nP1WTPUT  LA    R0,J1DTPUTL\n         LA    R1,J1DTPUT\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,       XXXXXXXXXX\n               USERIDL=J1DBYWHO\n         B     P1CMOK\nP1CMDOP  XR    R0,R0\n         IC    R0,P1DCONID         GET CALLERS ID\n         TM    0(R9),J1PGLBF\n         BO    P1WQWTO\n         LA    R1,J1DCMT2          WTO\n         B     P1WSVC35\nP1WQWTO  MVC   P1DWTOT(J1DQTPUT-J1DTPUT),J1DTPUT\n         LA    R1,P1DWTO\nP1WSVC35 SVC   35                  WTO\n         B     P1CMOK\n*\n**             $C    (CANCEL PRINT )\n*\nP1CM$C   CLC   =CL2'$C',P1DTXT+2  FLUSH CURRENT D.S.\n         BNE   P1CM$E              NO - TRY HALT\nFLUSHOK  OI    J1DFLAG2,J1DFLUSH       SET FLAG\n         NI    J1DFLAG1,255-J1DKEEP    SET FLAG\n         LR    R3,R4               POINT TO USERID (IF ANY)\n         B     P1CMOK\n*\n**             $E    (RESTART PRINT )\n*\nP1CM$E   CLC   =CL2'$E',P1DTXT+2  FLUSH CURRENT D.S.\n         BNE   P1CM$P              NO - TRY HALT\n         OI    J1DFLAG2,J1DFLUSH            SET FLAG\n         OI    J1DFLAG1,J1DKEEP            SET FLAG\n         LR    R3,R4               POINT TO USERID (IF ANY)\n         B     P1CMOK\n*\n**             PURGE STOP FOR A WHILE\n*\nP1CM$P   DS    0H\n         CLC   =CL2'$P',P1DTXT+2  STOP\n         BNE   P1CM$S              NO-TRY START\n         LR    R3,R4\n         OI    J1DFLAG2,J1DPURGE   PURGE WAIT FOR A START CMD\n         CLC   J1DHSTAT,=C'ACTIV'\n         BE    P1CMACT\n         CLC   J1DHSTAT,=C'RETRYING'\n         BNE   P1CKINA\nP1CMACT  MVC   J1DHSTAT,=CL10'DRAINING'\n         B     P1CMOK\nP1CKINA  MVC   J1DHSTAT,=CL10'DRAINED'\n         B     P1CMOK\n*\n**             START UP AFTER PAUSE\n*\nP1CM$S   DS    0H\n         CLC   =CL2'$S',P1DTXT+2  START\n         BNE   P1CM$T              NO-LOOK FOR KEYWORDS\n         LR    R3,R4\n         NI    J1DFLAG2,255-J1DPURGE      TURN OFF PURGE FLAG\n         NI    J1DFLAG1,255-J1DRTLM       TURN OFF RETRY LIMIT FLAG\n         CLC   J1DHSTAT(5),=C'ACTIV'\n         BE    P1CMOK\n         CLC   J1DHSTAT(8),=C'DRAINING'\n         BNE   *+14\n         MVC   J1DHSTAT,=CL10'ACTIVE'\n         B     P1CMOK\n         MVC   J1DHSTAT,=CL10'INACTIVE'\n         B     P1CMOK\n*\n**             SET PRINTER ATTRIBUTES\n*\nP1CM$T   DS    0H\n         CLC   =CL2'$T',P1DTXT+2  SET\n         BNE   P1CMINV\n         LR    R3,R4               GET 1ST BYTE OF PARM DATA AFTER PRTR\n*\n**             SCAN FOR KEYWORDS\n*\nP1CMKEYW DS    0H\n         LA    R14,P1CMFMXT        SET UP RETURN\n**********************************************************************\n*                                                                    *\n**             PARSE DOWN STARTUP PARMS OR MODIFY KEYWORDS           *\n*                                                                    *\n**********************************************************************\nP1CMFMSU DS    0H\n         ST    R14,P1DFMRET        SAVE RETURN ADDR\nP1CMTYP  DS    0H\n         CLI   0(R3),C','          LOOK FOR KEYWORDS\n         BNE   *+8                 \"\n         LA    R3,1(R3)            BUMP PAST COMMA\n         CLC   0(2,R3),=C'C='      CLASS\n         BE    P1CMCLAS            HANDLE\n         CLC   0(3,R3),=C'LU='     LUNAME\n         BE    P1CMLUID            HANDLE\n         CLC   0(5,R3),=C'MLIN='  MAXIMUM LINES\n         BE    P1CMLNE             HANDLE\n         CLC   0(4,R3),=C'SCS='    SCS OPTION\n         BE    P1CMSCSO            HANDLE\n         CLC   0(5,R3),=C'LGMD='   LUNAME\n         BE    P1CMLGMD            HANDLE\n         CLC   0(2,R3),=C'R='      DESTINATION\n         BE    P1CMDEST            HANDLE\n         CLC   0(2,R3),=C'F='      FORM\n         BE    P1CMFRM             HANDLE\n         COPY  DHC121A             INCLUDE ADDITIONAL TESTS       *DHC*\n         CLC   0(2,R3),=C'S='      SEPERATOR\n         BE    P1CMSEP             HANDLE\n         CLC   0(4,R3),=C'LPP='    PAGE LENGTH\n         BE    P1CMLEN             HANDLE\n         TM    0(R9),J1PCNTF       THIS CARD CONTINUED\n         BO    JRPRTRN             YES. GO GET THE REST\n         B     P1CMFMER            NOT FORM - ERROR\n*\n**       PROCESS FORMS CHANGE\n*\nP1CMFRM  DS    0H                  FORM\n         LA    R0,4                MAX LENGTH FOR FORM\n         LA    R3,2(R3)            BUMP PAST F=\n         LA    R15,J1DHFORM        GET HOLD AREA\n         MVC   0(4,R15),=4CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            YES-GOOD\n*\n**       PROCESS SCS OPTION CHANGE\n*\nP1CMSCSO DS    0H                  SCS OPTION\n         LA    R0,1                MAX 1 CHAR\n         LA    R3,4(R3)            BUMP PAST SCS=\n         LA    R15,J1DHSCS         GET HOLD AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME GOOD\n*\n**       PROCESS LUID CHANGE\n*\nP1CMLUID DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,3(R3)            BUMP PAST LU=\n         LA    R15,J1DLUID         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         LA    R2,J1DBFCL\n         BAL   R5,PUTLU\n         LA    R2,J1DFLSMS\n         BAL   R5,PUTLU\n         B     P1CMCKMR            ASSUME DATA GOOD\nPUTLU    DS    0H\n         CLC   0(1,R2),J1DPRN        END OF PRINT\n         BE    *+12\n         LA    R2,1(R2)\n         B     PUTLU\n         MVI   0(R2),C'('\n         MVC   1(8,R2),J1DLUID\n         MVI   9(R2),C')'\n         BR    R5\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMLGMD DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,5(R3)            BUMP PAST LGMD=\n         LA    R15,J1DLGMD         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMCLAS DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST C=\n         LA    R15,J1DHCLAS        GET HOLD AREA\n         MVC   J1DHCLAS,=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS DESTINATION\n*\nP1CMDEST DS    0H                  DEST CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST R=\n         LA    R15,J1DHDEST        GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n         COPY  DHC121B             INCLUDE ADDITIONAL PROCESSES   *DHC*\n*\n**       PROCESS PAGE SEPERATOR OPTION\n*\nP1CMSEP  DS    0H                  SEP  CHANGE\n         LA    R0,1                1 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST S=\n         LA    R15,J1DSEP          GET SEP SWITCH\n         MVI   J1DSEP,C'Y'         SET IT ON AS A DEFAULT\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE LENGTH CHANGE\n*\nP1CMLEN  DS    0H                  LEN  CHANGE\n         LA    R0,3\n         LA    R3,4(R3)            RESTORE PASSED \"LPP=\"\n         LA    R1,J1DLEN           GET ANSWER LOC.\n*\n**       COMMON CODE FOR L=NNN,W=NNN\n*\nP1CMLENT DS    0H                  SCAN FOR NUMERIC KEYWORD\n         LR    R6,R0               DUP MAX LEN\n         LA    R15,P1DWORK         GET WORK AREA\n         XC    P1DWORK,P1DWORK     CLEAR IT\n         BAL   R14,P1CMSCN         EDIT DATA\n         SR    R0,R6               (RESIDUAL-MAX)=NEG. DIGITS\n         BZ    P1CMCKMR            NONE-USE CURRENT\n         LPR   R0,R0               DIGITS OF DATA\n         XR    R15,R15             CLEAR WORK\nP1CMLNXT DS    0H                  CONVERT VALUE TO BINARY\n         IC    R14,P1DWORK         PICK A DIGIT\n         N     R14,=F'15'          GET NUMERIC PART\n         MH    R15,=H'10'          SHIFT CURRENT VALUE A DIGIT\n         AR    R15,R14             ADD NEW DIGIT\n         MVC   P1DWORK(7),P1DWORK+1 SHIFT DIGITS DOWN\n         BCT   R0,P1CMLNXT         LOOP\n         ST    R15,0(R1)           SAVE NEW VALUE IN ANSWER AREA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE WIDTH CHANGE\n*\nP1CMLNE  DS    0H                  WID  CHANGE\n         LA    R0,4\n         LA    R3,5(R3)            RESTORE PASSED \"MLIN=\"\n         LA    R1,J1DMLNE          GET ANSWER LOC.\n         B     P1CMLENT            GO TO COMMON CODE\n*\n**       LOOK FOR ANOTHER KEYWORD\n*\nP1CMCKMR DS    0H                  SEE IF ANOTHER KEYWORD\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMFMOK            YES-GIVE OK P1G\n         B     P1CMTYP             NO-CLASSIFY\n*\n**       MOVE KEYWORD DATA\n*\nP1CMSCN  DS    0H                  EDIT\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         CLI   0(R3),C','          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         MVC   0(1,R15),0(R3)      MOVE DATA INTO WORK\n         LA    R3,1(R3)            BUMP\n         LA    R15,1(R15)          \"\n         BCT   R0,P1CMSCN          LOOP\nP1CMSCND DS    0H                  RETURN\n         BR    R14                 \"\n**********************************************************************\n*\n**             PARSE RETURN\n*\nP1CMFMOK DS    0H                  PARSE OK\n         L     R14,P1DFMRET        GET RETURN ADDR\n         B     0(R14)              +0 = OK\nP1CMFMER DS    0H                  BAD PARSE\n         L     R14,P1DFMRET        GET RETURN\n         B     4(R14)              +4 = BAD\n**********************************************************************\n*\n**              RETURN FROM PARSE  OF MODIFY TEXT\n*\nP1CMFMXT DS    0H                  BRANCH TABLE\n         B     P1CMOK              +0=OK\n         B     P1CMINV             +4=ERR\n**********************************************************************\n*\n**             GIVE OPER STATUS TO MODIFY COMMAND\n*\nP1CMOK   DS    0H                  GIVE OPER OK P1G\n         MVC   J1DCMW1,=CL7'OK'\n         TM    0(R9),J1PINITF\n         BO    JRPRTRN             SUPRESS WTO ON INIT\n         B     P1CMWTO             ISSUE WTO\nP1CMINV  DS    0H                  GIVE INVALID P1G\n         TM    0(R9),J1PGLBF\n         BO    P1CMEND\n         MVC   J1DCMW1,=CL7'INVALID'\n         TM    0(R9),J1PINITF\n         BNO   P1CMWTO\n         OI    0(R9),J1PINVF       TELL 100 INVALID ON INITIALIZATION.\nP1CMWTO  DS    0H\n         L     R0,J1DLEN\n         CVD   R0,P1DWORK\n         UNPK  J1DLEN2,P1DWORK+6(2)\n         OI    J1DLEN2+L'J1DLEN2-1,C'0'\n         L     R0,J1DMLNE\n         CVD   R0,P1DWORK\n         UNPK  J1DMLNE2(4),P1DWORK+5(3)\n         OI    J1DMLNE2+L'J1DMLNE2-1,C'0'\n*        MVC   J1DBYWHO,P1DBYWHO\n         CLI   0(R3),C','          USER PROVIDES JOBNAME\n         BNE   P1CMOPER            NO-PROBABLY OPER\n         MVC   J1DBYWHO(7),1(R3)   TELL WHO CANCELLED OUTPUT\n         MVI   J1DBYWHO+7,C' '\n         B     P1CMPOK\nP1CMOPER MVC   J1DBYWHO(8),=CL8'OPER'\n         XR    R0,R0\n         IC    R0,P1DCONID         GET CALLERS ID\n         LA    R1,J1DCMWT1         WTO\n         SVC   35                  WTO\n         B     P1CMEND\nP1CMPOK  DS    0H\n         LA    R0,L'J1DCMW0\n         LA    R1,J1DCMW0\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,       XXXXXXXXXX\n               USERIDL=J1DBYWHO\nP1CMEND  DS    0H\n         CLC   0(4,R10),=C'PEND'\n         BE    JRPRTRN\n         TM    0(R9),J1PGLBF\n         BO    P1PALOOP\nJRPRTRN  DS    0H\n         JRPRTRN\nJ2SYN    EQU   *    DUMMY LABEL\nP1GEOD   EQU   *    DUMMY LABEL\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nP1SWTO   WTO   '                                                ',MF=L\nJ2SPRN   DC    C' '\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\nJ2SPCHK  CLC   0(0,R10),P1DTXT+4 RDW+$T\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0F\nP1DWTO   WTO   '                                                ',MF=L\nP1DWTOT  EQU   P1DWTO+4\nJ1DPRN   DC    C' '\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\nP1DWRET  DS    F                   RETURN SAVE AREA\nP1DFMRET DS    F                   RETURN SAVE AREA\nP1DWORK  DS    F                   WORK FIELD\nP1DSPALL DS    C\nP1DCONID DS    X                   MCS ID OF MODIFY ISSUER\nP1DTXT   DS    XL110               OPER MODIFY SAVEAREA\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPDMAC\n         JRPREGS\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP110OL": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x02\\x18\\x02\\x18\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 536, "newlines": 536, "modlines": 0, "user": "JRP"}, "text": "JRP110 TITLE 'JRP COMMAND AND INITIALIZATION PARES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP110                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PARSE ROUTINE FOR JRP               *\n*                328X PRINTER\"S                                       *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS = ONE INVALID MESSAGE ISSUED ON FIRST COMMAND    *\n*                      PASS,NOT CRITICAL,WILL BE FIXED.               *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES MVS OPERATOR COMMANDS AND INPUT FROM          *\n*                JRP INITIALIZATION DATA SET.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN COMMANDS OR INPUT PASSED BY JRP100           *\n*                   FOR JRP KEYWORDS AND MAKES APPROPRIATE            *\n*                   MODIFICATIONS TO DYNAMIC PRINTER ENTRY AREAS.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP110 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP300 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP110 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         LM    R9,R11,0(R1)\n         USING J1DWA,R8                   SAVE PARM\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA          START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA) LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA           START OF STATIC DATA\n         LA    R15,P1SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\n         TM    0(R9),J1PINITF      IS THIS INITIALIZATION\n         BZ    P1CMMOD\n         L     R8,8(R10)           LOAD UP DYNAMIC AREA ADDRESS\n         LR    R3,R11              BUMP UP TO DATA\n         MVC   P1DTXT+2(71),0(R3)\n         B     P1CMKEYW\n*\n****PROCESS MODIFY\n*\nP1CMMOD  DS    0H\n         MVI   J1DPRN,C'('         CHANGE LU SEARCH ARGUMENT\n         OI    0(R9),J1PGLBF     DEFAULT TO MODIFY/DISPLAY ALL\n         LR    R2,R11              COPY DATA ARDDRESS TO R2\n         LA    R0,P1DTXT           HOLD AREA\n         LA    R1,L'P1DTXT         L'\n         LH    R15,14(R2)          L' OF MODIFY\n         LA    R15,2(R15)          +2BYTE LEN\n         ICM   R15,8,=C' '         PAD W/ BLANKS\n         LA    R14,14(R2)          GET FROM ADDR\n         MVCL  R0,R14              MOVE MODIFY TEXT\n         MVC   P1DCONID,12(R2)     SAVE MCS ID. FOR RESPONSE\nP1CMNULL CLI   P1DTXT+2,C' '       NULL INPUT\n         BNE   P1CMCLSI            NO.\n         B     JRPRTRN             YES. JUST GO DELETE IT\nP1CMCLSI CLC   P1DTXT+2(6),=C'ICLOSE'\n         BNE   P1CMCLS\n         OI    0(R9),J1DICLSF      TELL 100 CLOSE IMMED\n         B     JRPRTRN\nP1CMCLS  CLC   P1DTXT+2(5),=C'CLOSE'\n         BNE   P1PLPRT\n         OI    0(R9),J1DNCLSF      TELL 100 CLOSE\n         B     JRPRTRN\n*\n**             FIND PRINTERS DYNAMIC AREA\n*\nP1PLPRT  DS    0H\n         LA    R4,P1DTXT+4        BUMP PASSED LENGTH AND COMMAND\nP1PLOOP  CLI   0(R4),C','         IS IT COMMA(END OF STRING) ???\n         BE    P1FPLOOP           YES. FIND PRINTER NAME.\n         CLI   0(R4),C' '         IS IT BLANK(END OF STRING) ???\n         BE    P1FPLOOP           YES. FIND PRINTER NAME.\n         LA    R4,1(R4)           BUMP UP 1\n         B     P1PLOOP\nP1FPLOOP DS    0H\n         LR    R5,R4\n         LA    R1,P1DTXT+4\n         SR    R5,R1              GET LENGTH OF PRINTER NAME\n         SH    R5,=H'1'\n         CLC   0(4,R10),=C'PEND'  IS THIS END OF TABLE\n         BE    P1CMINV            YES. WE DONT OWN THIS PRINTER\n         CLC   P1DTXT+4(2),=C'U '     IS THIS GLOBAL REQUEST\n         BE    P1FPSET            YES.\n         CLC   P1DTXT+4(2),=C'U,'     IS THIS GLOBAL REQUEST\n         BE    P1FPSET            YES.\n         NI    0(R9),255-J1PGLBF SINGLE THREAD\n         EX    R5,J2SPCHK         CHECK PRINTER NAME\n         BE    P1FPSET            SAME. THIS IS OUR BOY\nP1PALOOP DS    0H\n         LA    R10,12(R10)           LOAD UP NEXT ENTRY\n         B     P1FPLOOP           LOOP TO FIND PRINTER\nP1FPSET  DS    0H\n         L     R8,8(R10)          LOAD UP DYNAMIC AREA ADDRESS\n*\n**             DISP (DISPLAY PRINTER ATTRIBUTES)\n*\nP1CM$D   DS    0H\n         CLC   =C'$D',P1DTXT+2     DISPLAY ??\n         BNE   P1CM$C              NO-LOOK FOR KEYWORDS\nP1WDST   LR    R3,R4\nNOSTAT   CLI   0(R3),C','\n         BNE   P1CMDOP\n         MVC   J1DBYWHO(7),1(R3)\n         MVC   J1DBYWHO+7(1),=C' '\n         TM    0(R9),J1PGLBF\n         BNO   P1WTPUT\n         LA    R0,J1DQTPUT-J1DTPUT\n         B     *+8\nP1WTPUT  LA    R0,J1DTPUTL\n         LA    R1,J1DTPUT\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,       XXXXXXXXXX\n               USERIDL=J1DBYWHO\n         B     P1CMOK\nP1CMDOP  XR    R0,R0\n         IC    R0,P1DCONID         GET CALLERS ID\n         TM    0(R9),J1PGLBF\n         BO    P1WQWTO\n         LA    R1,J1DCMT2          WTO\n         B     P1WSVC35\nP1WQWTO  MVC   P1DWTOT(J1DQTPUT-J1DTPUT),J1DTPUT\n         LA    R1,P1DWTO\nP1WSVC35 SVC   35                  WTO\n         B     P1CMOK\n*\n**             $C    (CANCEL PRINT )\n*\nP1CM$C   CLC   =CL2'$C',P1DTXT+2  FLUSH CURRENT D.S.\n         BNE   P1CM$E              NO - TRY HALT\nFLUSHOK  OI    J1DFLAG2,J1DFLUSH       SET FLAG\n         NI    J1DFLAG1,255-J1DKEEP    SET FLAG\n         LR    R3,R4               POINT TO USERID (IF ANY)\n         B     P1CMOK\n*\n**             $E    (RESTART PRINT )\n*\nP1CM$E   CLC   =CL2'$E',P1DTXT+2  FLUSH CURRENT D.S.\n         BNE   P1CM$P              NO - TRY HALT\n         OI    J1DFLAG2,J1DFLUSH            SET FLAG\n         OI    J1DFLAG1,J1DKEEP            SET FLAG\n         LR    R3,R4               POINT TO USERID (IF ANY)\n         B     P1CMOK\n*\n**             PURGE STOP FOR A WHILE\n*\nP1CM$P   DS    0H\n         CLC   =CL2'$P',P1DTXT+2  STOP\n         BNE   P1CM$S              NO-TRY START\n         LR    R3,R4\n         OI    J1DFLAG2,J1DPURGE   PURGE WAIT FOR A START CMD\n         CLC   J1DHSTAT,=C'ACTIV'\n         BE    P1CMACT\n         CLC   J1DHSTAT,=C'RETRYING'\n         BNE   P1CKINA\nP1CMACT  MVC   J1DHSTAT,=CL10'DRAINING'\n         B     P1CMOK\nP1CKINA  MVC   J1DHSTAT,=CL10'DRAINED'\n         B     P1CMOK\n*\n**             START UP AFTER PAUSE\n*\nP1CM$S   DS    0H\n         CLC   =CL2'$S',P1DTXT+2  START\n         BNE   P1CM$T              NO-LOOK FOR KEYWORDS\n         LR    R3,R4\n         NI    J1DFLAG2,255-J1DPURGE      TURN OFF PURGE FLAG\n         NI    J1DFLAG1,255-J1DRTLM       TURN OFF RETRY LIMIT FLAG\n         CLC   J1DHSTAT(5),=C'ACTIV'\n         BE    P1CMOK\n         CLC   J1DHSTAT(8),=C'DRAINING'\n         BNE   *+14\n         MVC   J1DHSTAT,=CL10'ACTIVE'\n         B     P1CMOK\n         MVC   J1DHSTAT,=CL10'INACTIVE'\n         B     P1CMOK\n*\n**             SET PRINTER ATTRIBUTES\n*\nP1CM$T   DS    0H\n         CLC   =CL2'$T',P1DTXT+2  SET\n         BNE   P1CMINV\n         LR    R3,R4               GET 1ST BYTE OF PARM DATA AFTER PRTR\n*\n**             SCAN FOR KEYWORDS\n*\nP1CMKEYW DS    0H\n         LA    R14,P1CMFMXT        SET UP RETURN\n**********************************************************************\n*                                                                    *\n**             PARSE DOWN STARTUP PARMS OR MODIFY KEYWORDS           *\n*                                                                    *\n**********************************************************************\nP1CMFMSU DS    0H\n         ST    R14,P1DFMRET        SAVE RETURN ADDR\nP1CMTYP  DS    0H\n         CLI   0(R3),C','          LOOK FOR KEYWORDS\n         BNE   *+8                 \"\n         LA    R3,1(R3)            BUMP PAST COMMA\n         CLC   0(2,R3),=C'C='      CLASS\n         BE    P1CMCLAS            HANDLE\n         CLC   0(3,R3),=C'LU='     LUNAME\n         BE    P1CMLUID            HANDLE\n         CLC   0(5,R3),=C'MLIN='  MAXIMUM LINES\n         BE    P1CMLNE             HANDLE\n         CLC   0(4,R3),=C'SCS='    SCS OPTION\n         BE    P1CMSCSO            HANDLE\n         CLC   0(5,R3),=C'LGMD='   LUNAME\n         BE    P1CMLGMD            HANDLE\n         CLC   0(2,R3),=C'R='      DESTINATION\n         BE    P1CMDEST            HANDLE\n         CLC   0(2,R3),=C'F='      FORM\n         BE    P1CMFRM             HANDLE\n         CLC   0(2,R3),=C'S='      SEPERATOR\n         BE    P1CMSEP             HANDLE\n         CLC   0(4,R3),=C'LPP='    PAGE LENGTH\n         BE    P1CMLEN             HANDLE\n         TM    0(R9),J1PCNTF       THIS CARD CONTINUED\n         BO    JRPRTRN             YES. GO GET THE REST\n         B     P1CMFMER            NOT FORM - ERROR\n*\n**       PROCESS FORMS CHANGE\n*\nP1CMFRM  DS    0H                  FORM\n         LA    R0,4                MAX LENGTH FOR FORM\n         LA    R3,2(R3)            BUMP PAST F=\n         LA    R15,J1DHFORM        GET HOLD AREA\n         MVC   0(4,R15),=4CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            YES-GOOD\n*\n**       PROCESS SCS OPTION CHANGE\n*\nP1CMSCSO DS    0H                  SCS OPTION\n         LA    R0,1                MAX 1 CHAR\n         LA    R3,4(R3)            BUMP PAST SCS=\n         LA    R15,J1DHSCS         GET HOLD AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME GOOD\n*\n**       PROCESS LUID CHANGE\n*\nP1CMLUID DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,3(R3)            BUMP PAST LU=\n         LA    R15,J1DLUID         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         LA    R2,J1DBFCL\n         BAL   R5,PUTLU\n         LA    R2,J1DFLSMS\n         BAL   R5,PUTLU\n         B     P1CMCKMR            ASSUME DATA GOOD\nPUTLU    DS    0H\n         CLC   0(1,R2),J1DPRN        END OF PRINT\n         BE    *+12\n         LA    R2,1(R2)\n         B     PUTLU\n         MVI   0(R2),C'('\n         MVC   1(8,R2),J1DLUID\n         MVI   9(R2),C')'\n         BR    R5\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMLGMD DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,5(R3)            BUMP PAST LGMD=\n         LA    R15,J1DLGMD         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMCLAS DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST C=\n         LA    R15,J1DHCLAS        GET HOLD AREA\n         MVC   J1DHCLAS,=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS DESTINATION\n*\nP1CMDEST DS    0H                  DEST CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST R=\n         LA    R15,J1DHDEST        GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE SEPERATOR OPTION\n*\nP1CMSEP  DS    0H                  SEP  CHANGE\n         LA    R0,1                1 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST S=\n         LA    R15,J1DSEP          GET SEP SWITCH\n         MVI   J1DSEP,C'Y'         SET IT ON AS A DEFAULT\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE LENGTH CHANGE\n*\nP1CMLEN  DS    0H                  LEN  CHANGE\n         LA    R0,3\n         LA    R3,4(R3)            RESTORE PASSED \"LPP=\"\n         LA    R1,J1DLEN           GET ANSWER LOC.\n*\n**       COMMON CODE FOR L=NNN,W=NNN\n*\nP1CMLENT DS    0H                  SCAN FOR NUMERIC KEYWORD\n         LR    R6,R0               DUP MAX LEN\n         LA    R15,P1DWORK         GET WORK AREA\n         XC    P1DWORK,P1DWORK     CLEAR IT\n         BAL   R14,P1CMSCN         EDIT DATA\n         SR    R0,R6               (RESIDUAL-MAX)=NEG. DIGITS\n         BZ    P1CMCKMR            NONE-USE CURRENT\n         LPR   R0,R0               DIGITS OF DATA\n         XR    R15,R15             CLEAR WORK\nP1CMLNXT DS    0H                  CONVERT VALUE TO BINARY\n         IC    R14,P1DWORK         PICK A DIGIT\n         N     R14,=F'15'          GET NUMERIC PART\n         MH    R15,=H'10'          SHIFT CURRENT VALUE A DIGIT\n         AR    R15,R14             ADD NEW DIGIT\n         MVC   P1DWORK(7),P1DWORK+1 SHIFT DIGITS DOWN\n         BCT   R0,P1CMLNXT         LOOP\n         ST    R15,0(R1)           SAVE NEW VALUE IN ANSWER AREA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE WIDTH CHANGE\n*\nP1CMLNE  DS    0H                  WID  CHANGE\n         LA    R0,4\n         LA    R3,5(R3)            RESTORE PASSED \"MLIN=\"\n         LA    R1,J1DMLNE          GET ANSWER LOC.\n         B     P1CMLENT            GO TO COMMON CODE\n*\n**       LOOK FOR ANOTHER KEYWORD\n*\nP1CMCKMR DS    0H                  SEE IF ANOTHER KEYWORD\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMFMOK            YES-GIVE OK P1G\n         B     P1CMTYP             NO-CLASSIFY\n*\n**       MOVE KEYWORD DATA\n*\nP1CMSCN  DS    0H                  EDIT\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         CLI   0(R3),C','          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         MVC   0(1,R15),0(R3)      MOVE DATA INTO WORK\n         LA    R3,1(R3)            BUMP\n         LA    R15,1(R15)          \"\n         BCT   R0,P1CMSCN          LOOP\nP1CMSCND DS    0H                  RETURN\n         BR    R14                 \"\n**********************************************************************\n*\n**             PARSE RETURN\n*\nP1CMFMOK DS    0H                  PARSE OK\n         L     R14,P1DFMRET        GET RETURN ADDR\n         B     0(R14)              +0 = OK\nP1CMFMER DS    0H                  BAD PARSE\n         L     R14,P1DFMRET        GET RETURN\n         B     4(R14)              +4 = BAD\n**********************************************************************\n*\n**              RETURN FROM PARSE  OF MODIFY TEXT\n*\nP1CMFMXT DS    0H                  BRANCH TABLE\n         B     P1CMOK              +0=OK\n         B     P1CMINV             +4=ERR\n**********************************************************************\n*\n**             GIVE OPER STATUS TO MODIFY COMMAND\n*\nP1CMOK   DS    0H                  GIVE OPER OK P1G\n         MVC   J1DCMW1,=CL7'OK'\n         TM    0(R9),J1PINITF\n         BO    JRPRTRN             SUPRESS WTO ON INIT\n         B     P1CMWTO             ISSUE WTO\nP1CMINV  DS    0H                  GIVE INVALID P1G\n         TM    0(R9),J1PGLBF\n         BO    P1CMEND\n         MVC   J1DCMW1,=CL7'INVALID'\n         TM    0(R9),J1PINITF\n         BNO   P1CMWTO\n         OI    0(R9),J1PINVF       TELL 100 INVALID ON INITIALIZATION.\nP1CMWTO  DS    0H\n         L     R0,J1DLEN\n         CVD   R0,P1DWORK\n         UNPK  J1DLEN2,P1DWORK+6(2)\n         OI    J1DLEN2+L'J1DLEN2-1,C'0'\n         L     R0,J1DMLNE\n         CVD   R0,P1DWORK\n         UNPK  J1DMLNE2(4),P1DWORK+5(3)\n         OI    J1DMLNE2+L'J1DMLNE2-1,C'0'\n*        MVC   J1DBYWHO,P1DBYWHO\n         CLI   0(R3),C','          USER PROVIDES JOBNAME\n         BNE   P1CMOPER            NO-PROBABLY OPER\n         MVC   J1DBYWHO(7),1(R3)   TELL WHO CANCELLED OUTPUT\n         MVI   J1DBYWHO+7,C' '\n         B     P1CMPOK\nP1CMOPER MVC   J1DBYWHO(8),=CL8'OPER'\n         XR    R0,R0\n         IC    R0,P1DCONID         GET CALLERS ID\n         LA    R1,J1DCMWT1         WTO\n         SVC   35                  WTO\n         B     P1CMEND\nP1CMPOK  DS    0H\n         LA    R0,L'J1DCMW0\n         LA    R1,J1DCMW0\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,       XXXXXXXXXX\n               USERIDL=J1DBYWHO\nP1CMEND  DS    0H\n         CLC   0(4,R10),=C'PEND'\n         BE    JRPRTRN\n         TM    0(R9),J1PGLBF\n         BO    P1PALOOP\nJRPRTRN  DS    0H\n         JRPRTRN\nJ2SYN    EQU   *    DUMMY LABEL\nP1GEOD   EQU   *    DUMMY LABEL\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nP1SWTO   WTO   '                                                ',MF=L\nJ2SPRN   DC    C' '\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\nJ2SPCHK  CLC   0(0,R10),P1DTXT+4 RDW+$T\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0F\nP1DWTO   WTO   '                                                ',MF=L\nP1DWTOT  EQU   P1DWTO+4\nJ1DPRN   DC    C' '\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\nP1DWRET  DS    F                   RETURN SAVE AREA\nP1DFMRET DS    F                   RETURN SAVE AREA\nP1DWORK  DS    F                   WORK FIELD\nP1DSPALL DS    C\nP1DCONID DS    X                   MCS ID OF MODIFY ISSUER\nP1DTXT   DS    XL110               OPER MODIFY SAVEAREA\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPDMAC\n         JRPREGS\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP120": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x03=\\x03=\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 829, "newlines": 829, "modlines": 0, "user": "JRP"}, "text": "JRP120 TITLE 'JRP CONSOLE SUPPORT TASK'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP100                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  INITIALIZATION, MVS COMMAND MONITOR,*\n*                               SUBTASK MONITOR AND 100.              *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                READ INITIALIZATION DATA SET FROM DD JRPDATA,        *\n*                PASS INFO TO P110 VIA LINK,ATTACH JRP200 SUBTASK, *\n*                MONITOR MVS COMM-TASK FOR MODIFY COMMANDS,AND MAKE   *\n*                CLOSE DOWN JUDGEMENTS.                               *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = ACF/VTAM??                           *\n*                                JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE =                                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, SUPERVISOR STATE(AC=1) *\n*                                                                     *\n*             ENTRY POINTS = JRP100 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM MVS AS ADDRESS SPACE.                        *\n*                                                                     *\n*             INPUT = JRPDATA DD FOR INITIALIZATION,FROM MVS          *\n*                OPERATOR MODIFY COMMANDS AS COMMAND INPUT.           *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = JRP110.                                   *\n*                                                                     *\n*                SUBTASKS = JRP200==>JRP300                           *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,EXTRACT,QEDIT,WAIT,GETMAIN,    *\n*                      LINK,ATTACH,STATUS,DETACH,OPEN,CLOSE,ACB,      *\n*                      GET,FREEPOOL,WTO,MODESET                       *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP120 CSECT\n         JRPSAVE REG=(12),ID=*,LV=P1DSASIZ     ENTRY CHAIN\n         USING DSA,R13\n         USING J1TWA,R7\n         LM    R9,R11,0(R1)      P1DPFLG,PWT,TWT\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA                        START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA)              LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA                       START OF STATIC DATA\n         LA    R15,P1SMDL                      LENGTH OF MODEL DATA\n         MVCL  R0,R14                          MOVE TO BE RENT,REUS\n         STM   R9,R11,P1DFLG\n         B     P1BEGIN\n*\n**       SET UP VTAM CONTROL BLOCKS\n*\nRESET    DS    0H\n         L     R6,P1DTWT\n         L     R5,P1DRPLT\nP1RLULP  CLC   0(4,R6),=C'PEND'\n         BE    P1RESET\n         L     R7,0(R6)\n         LTR   R7,R7\n         BNZ   RESETARG\n         LA    R6,4(R6)\n         B     P1RLULP\nRESETARG L     R5,J1TRPL-J1TWA(R7)\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=SYN\n         LA     R10,J1TSASIZ\n         FREEMAIN RC,LV=(R10),A=(R7)\n         MVC   0(4,R6),=F'0'\n         LA    R6,4(R6)\n         B     P1RLULP\nP1RESET  DS    0H\n         L     R2,P1DACBT\n         CLOSE ((R2))\nP1BEGIN  DS    0H\n         GENCB AM=VTAM,BLK=EXLST,LOGON=JRPLGNX,TPEND=JRPTPND,          X\n               LOSTERM=JRPLSTX,MF=(G,P1DEXLGN)\n         ST    R1,P1DEXLST\n         LR    R5,R1\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'EXTLST GEN NOT SUCCESSFUL'\n         LTR   R15,R15\n         BNZ   P1FATALF\n         GENCB AM=VTAM,BLK=ACB,MACRF=LOGON,APPLID=P1SAPPLN,            X\n               EXLST=(R5),MF=(G,P1DACBGT)\n         ST    R1,P1DACBT\n         LR    R2,R1\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'TRM ACB GEN NOT SUCCESSFUL'\n         LTR   R15,R15\n         BNZ   P1FATALF\n         LA    R6,P1DTECB\n         GENCB AM=VTAM,BLK=RPL,ACB=(R2),MF=(G,P1DRPLGN),ECB=(R6)\n         ST    R1,P1DRPLT\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'TRM RPL GEN NOT SUCCESSFUL'\n         LTR   R15,R15\n         BNZ   P1FATALF\n*\n**       OPEN ACB'S\n*\nOPNACB   DS    0H\n         OPEN  ((R2))\n         MVC   P1DWTO1,=CL4'E100'\n         MVC   P1DWTO2,=CL30'CJRP ACB NOT AVAILIBLE   '\n         LTR   15,15\n         BNZ   P1FATALF\n         ST    R13,P1SGTMN\n         L     R1,P1DTWT\n         MVC   96(4,R1),=C'PEND'\n*\n**       SET UP FOR TERMINAL LOGON\n*\n         DS    0H\n         L     R5,P1DRPLT\n         SETLOGON RPL=(R5),OPTCD=START\n         LTR   R15,R15\n         BNZ   P1FATALF\n         B     P1CMRCV            AROUND RESETSR\nP1CMRST  DS    0H\n         L     R5,P1DRPLT\n         RESETSR RPL=(R5),OPTCD=(CA,SYN)\n         LTR   R15,R15\n         BNZ   P1FATALF\n*\n**       READY TO RECEIVE DATA FROM ANY TERMINAL\n*\nP1CMRCV  DS    0H\n         MVI   P1DINPUT,X'40'\n         MVC   P1DINPUT+1(85),P1DINPUT\n         XC    P1DTECB,P1DTECB\n         LA    R6,P1DTECB\n         L     R5,P1DRPLT\nRECEIVE  RECEIVE RPL=(R5),OPTCD=(ASY,CS,ANY),AREA=P1DINPUT,            X\n               AREALEN=50,ECB=(R6),RTYPE=(DFSYN,DFASY)\n         LTR   R15,R15\n         BNZ   P1FATALF\n*\n**     WAIT FOR COMM OR JRPJES TPEND COMM TASKTED\n*\nWAIT     DS    0H\n         LA    R1,P1DTECB\n         ST    R1,P1DECBLS\n         LA    R1,TPENDECB\n         ST    R1,P1DECBLS+4\n         MVI   P1DECBLS+4,X'80'      LAST IN ECB LIST\n         LA    R1,P1DECBLS\n         WAIT  ECBLIST=(R1)\n         TM    TPENDECB,X'40'\n         BZ    P1CMCK\n         OI    0(R9),J1DICLSF\n         B     CLOSOFF\nP1CMCK   DS    0H\n         L     R5,P1DRPLT\n         CHECK RPL=(R5)\n         LTR   R15,R15\n         BNZ   P1CMRST\n*\n**     COMMAND INPUT FOUND CONTINUE TO PROCESS\n*\nP1PROCSS DS    0H\n         TR    P1DINPUT(56),TRANSTBL\nP1CMDCLL DS    0H\nINQUIRE  INQUIRE RPL=(R5),AREA=P1DSVLU,AREALEN=8,                      X\n               OPTCD=(ASY,CIDXLATE)\n         CHECK RPL=(R5)\n         LTR   R15,R15\n         BNZ   P1FATALF\n         L     R6,P1DTWT\nP1DLULP  CLC   0(4,R6),=C'PEND'\n         BE    P1CMRCV\n         L     R7,0(R6)\n         LTR   R7,R7\n         BZ    P1CMTBMP\n         CLC   J1TLUID-J1TWA(8,R7),P1DSVLU\n         BE    P1WLINK\nP1CMTBMP LA    R6,4(R6)\n         B     P1DLULP\nP1WLINK  DS    0H\n         MVC   J1TARG-J1TWA(4,R7),RPLARG-IFGRPL(R5)\n         NI    J1TFLG,255-J1TRECD          READY TO SEND DIRECTION\n         CLI   P1DINPUT,C' '\n         BE    P1CMRCV\n         CLC   P1DINPUT+6(5),=C'RESET'\n         BE    RESET\n         CLC   P1DINPUT+6(6),=C'CANCEL'\n         BNE   P1CKLGN\n         LR    R8,R7                           ;SAVE REG 8\n         BAL   R10,P1CMCNCL\n         LR    R7,R8\n         B     P1CKLCLS\nP1CKLGN  CLC   P1DINPUT+6(6),=C'LOGON '\n         BE    P1CMLGN\n         CLC   P1DINPUT+6(6),=C'LOGOFF'\n         BE    P1CMLGF\n         CLC   P1DINPUT+6(6),=C'PRISCN'\n         BE    P1PRISC\n         CLC   P1DINPUT+6(6),=C'ALTSCN'\n         BE    P1ALTSC\n         CLC   P1DINPUT+6(6),=C'ICLOSE'\n         BNE   P1CKLCLS\nICLOSE   L     R9,P1DFLG\n         OI    0(R9),J1DICLSF\n         B     CLOSOFF\n*\n** SET COMMAND LINE AND LAST DATA LINE\n*\nP1PRISC  DS      0H\n         MVI     CLEAR,X'F5'               ;WRITE ERASE\n         LA      R10,J1DPRI                ;MOD2 SCREEN\n         B       P1CMNSCN\nP1ALTSC  DS      0H\n         MVI     CLEAR,X'7E'               ;WRITE ERASE\n         LA      R10,J1DALT                ;ALT  SCREEN\nP1CMNSCN DS      0H\n         MVI     P1DINPUT,X'6D'            ;CLEAR AID BYTE\n         ST      R10,J1DADTBL              ;SAVE ADDRESS\nSCNLOOP  CLC     2(4,R10),=C'TEND'         ;END OF SCREEN TABLE ??\n         BE      J1CSETS                   ;YEH, GO SET IT UP\n         LA      R10,2(R10)                ;NO BUMP AGAIN\n         B       SCNLOOP\nJ1CSETS  DS      0H\n         MVC     J1DENDSC+1(2),0(R10)      ;SET COMMAND LINE\n         MVC     MOREND+1(2),0(R10)        ;SET COMMAND LINE\n         MVC     CLEREND+1(2),0(R10)       ;SET COMMAND LINE\n         S       R10,=F'2'                 ;FIND MORE DATA LINE\n         MVC     CLERDATA+3(2),0(R10)      ;SET CLER DATA LINE\n         MVC     MOREDATA+3(2),0(R10)      ;SET MOREDATA LINE\n         B       P1CKLCLS\nP1CMLGN  DS    0H\n         LA    R6,P1DINPUT+12\n         LA    R8,5\nAPPLOOP  CLI   0(R6),C' '\n         BNE   FNDAPPL\n         LA    R6,1(R6)\n         BCT   R8,APPLOOP\n         B     P1CKLCLS\nFNDAPPL  LA    R5,AAREA\n         MVC   AAREA(8),=8C' '\n         LA    R8,8\nMVCAPPL  CLI   0(R6),C' '\n         BE    INQAPPL\n         CLI   0(R6),C','\n         BE    INQAPPL\n         CLI   0(R6),C'/'\n         BE    INQAPPL\n         MVC   0(1,R5),0(R6)\n         LA    R5,1(R5)\n         LA    R6,1(R6)\n         BCT   R8,MVCAPPL\n         B     P1CKLCLS\nINQAPPL  LA    R5,INQNIB\n         MVC   NIBSYM-ISTDNIB(8,R5),AAREA APPLID\n         L     R5,P1DACBT\n         INQUIRE RPL=INQRPL,NIB=INQNIB,OPTCD=(APPSTAT,SYN),ACB=(R5)\n         LTR   R15,R15\n         BNZ   P1CKLCLS\n         LA    R5,INQRPL\n         CLI   RPLFDB3-IFGRPL(R5),X'00'\n         BNE   P1CKLCLS\n         MVC   AREA(7),J1DUSER-J1TWA(R7)\n         MVI   AREA+7,C'/'\n         MVC   AREA+8(5),J1DPSWD\n         L     R5,J1TRPL-J1TWA(R7)\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=(SYN,PASS),AAREA=AAREA,AREA=AREA,       X\n               RECLEN=13\n         LA    R10,J1TSASIZ\n         FREEMAIN RC,LV=(R10),A=(R7) SP=3\n         MVC   0(4,R6),=F'0'\n         XC    AAREA,AAREA\n         B     P1CMRCV\nP1CMLGF  DS    0H\n         L     R5,J1TRPL-J1TWA(R7)\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=(SYN)\n         LA    R10,J1TSASIZ\n         FREEMAIN RC,LV=(R10),A=(R7) SP=3\n         MVC   0(4,R6),=F'0'\n         B     P1CMRCV\nP1CKLCLS CLC   P1DINPUT+6(5),=C'CLOSE'\n         BE     P1CLS2\n         MVC    J1TPWT(4),P1DPWT\n         MVC    J1DTXT1(86),P1DINPUT\n         TM     J1TFLG-J1TWA(R7),J1TLOGN\n         BNO    P1CMSECU\n         ATTACH EP=JRP121,PARAM=((R7))\n         LTR    R15,R15\n         BNZ    P1FATALF\n         B      P1CMRCV\nP1CMSECU DS     0H\n         ATTACH EP=JRP122,PARAM=((R7))\n         LTR    R15,R15\n         BNZ    P1FATALF\n         B      P1CMRCV\nP1CLS2   DS     0H\n         L      R9,P1DFLG\n         OI     (R9),J1DNCLSF\nCLOSOFF  DS    0H\n         L     R6,P1DTWT\n         L     R5,P1DRPLT\nP1CLULP  CLC   0(4,R6),=C'PEND'\n         BE    JRPRTRN\n         L     R7,0(R6)\n         LTR   R7,R7\n         BNZ   CLOSARG\n         LA    R6,4(R6)\n         B     P1CLULP\nCLOSARG  L     R5,J1TRPL-J1TWA(R7)\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=SYN\n         LA     R10,J1TSASIZ\n         FREEMAIN RC,LV=(R10),A=(R7)\n         MVC   0(4,R6),=F'0'\n         LA    R6,4(R6)\n         B     P1CLULP\nP1CMCNCL DS    0H\n         LA    R7,8\n         LA    R5,P1DINPUT+13              ;LUID\n         LA    R6,P1DCNLU                  ;LU SAVE AREA\n         MVC   0(8,R6),=8CL1' '            ;CLEAR LUID SAVE\nP1CNLOOP CLI   0(R5),C' '                  ;END OF STRING ??\n         BE    P1CNLPND                    ;YEA START LU SEARCH\n         MVC   0(1,R6),0(R5)               ;MOVE IN ONE BYTE\n         LA    R5,1(R5)                    ;BUMP R5\n         LA    R6,1(R6)                    ;BUMP R6\n         BCT   R7,P1CNLOOP\nP1CNLPND L     R6,P1DTWT\nP1CNLUP  CLC   0(4,R6),=C'PEND'\n         BER   R10\n         L     R7,0(R6)\n         LTR   R7,R7\n         BZ    P1CNBMP\n         CLC   J1TLUID(8),P1DCNLU\n         BE    P1CNCLS\nP1CNBMP  LA    R6,4(R6)\n         B     P1CNLUP\nP1CNCLS  L     R5,J1TRPL-J1TWA(R7)\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=SYN\n         LA    R9,J1TSASIZ\n         FREEMAIN RC,LV=(R9),A=(R7)\n         MVC   0(4,R6),=F'0'\n         BR    R10\nCONSPOST DS     0H\n*        RETURN TO CALLER\nJRPRTRN  DS    0H\n         DROP  R7\n         L     R2,P1DACBT\n         CLOSE ((R2))\n         JRPRTRN\n*\n         TITLE 'F A T A L  E R R O R  M E S S A G E S'\nP1FATALF DS    0H\n         LA    R1,P1DWTO           GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         ABEND  120,DUMP\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1GEOD   EQU   *\nJ2SYN    EQU   *\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nP1SWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1SMDL   EQU   *-P1SWA\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         DS    0F\nAAREA    DC    8CL1' '\nAREA     DC    13CL1' '\n         DS    0F\nINQNIB   NIB   MODE=RECORD\n         DS    0F\nINQRPL   RPL   AM=VTAM\n         DS    0F\nP1SAPPLN DC    XL1'04'\nP1SAPPNM DC    CL4'CJRP'\n         DS    0F\nBLANKS   DC    CL16' '\nP1SGTMN  DC    F'0'\nTPENDECB DC    F'0'\nP1DINPUT DC    86C' '\n         DS    0F\nTRANSTBL DS    0CL256\nTRANS    DC    XL24'000102030405060708090A0B0C0D0E0F1011121314151617'\n         DC    XL24'18191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL24'404142434445464748494A4B4C4D4E4F5051525354555657'\n         DC    XL24'58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F'\n         DC    XL24'707172737475767778797A7B7C7D7E7F80C1C2C3C4C5C6C7'\n         DC    XL24'C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL24'E0E1E2E3E4E5E6E7E8E9AAABACADAEAFB0B1B2B3B4B5B6B7'\n         DC    XL24'B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL24'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7'\n         DC    XL24'E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9000000000000'\n         JRPSMAC         MAPPING FOR STATIC AREA\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nDSA      DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nP1DWTO   WTO   'JRPE999 ....X....X....X....X....X....X',MF=L\nP1DWTO1  EQU   P1DWTO+4+3,4      ERROR MESSAGE NUMBER PORTION\nP1DWTO2  EQU   P1DWTO+4+3+5,30    MESSAGE PORTION\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DACBGT ACB   AM=VTAM\n         DS    0F\nP1DRPLGN RPL   AM=VTAM\n         DS    0F\nP1DEXLGN EXLST AM=VTAM,LOGON=JRPLGNX,TPEND=JRPTPND,LOSTERM=JRPLSTX\n         DS    0F\nP1DACBT  DS    F\nP1DRPLT  DS    F\nP1DEXLST DS    F\nP1DTECB  DS    F\nP1DECBLS DS    2AL4\nP1DFLG   DS    F\nP1DPWT   DS    F\nP1DTWT   DS    F\nP1DSVLU  DS    CL8\nP1DCNLU  DS    CL8\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         PRINT ON,GEN\n         JRPDMAC         MAPPING FOR DYNAMIC AREA\n         JRPTMAC\n         JRPREGS\n         IFGRPL AM=VTAM\n         ISTDNIB\n         ISTDBIND\n         ISTUSFBC\n         IFGACB   AM=VTAM\n         IFGEXLST AM=VTAM\n         PUSH  PRINT\nJRP120   CSECT\n**************************************\n*                                    *\n*       LOGON EXIT ROUTINE           *\n*                                    *\n*                                    *\n**************************************\nJRPLGNX  DS      0H\n         BALR    R12,R0\n         USING   *,R12                   ;ADDRESSABILITY\n         LM      R3,R4,0(R1)             ;ACB AND ARG ADDRESS\n         L       R5,20(R1)               ;VTAM LU-ID\n         LA      R13,R13SAVE             ;SAVE AREA\n         ST      R14,R14SAVE             ;SAVE RETURN TO VTAM ADDRESS\n         L       R2,=A(P1SGTMN)          ;GET 120'S DYN AREA\n         L       R2,0(R2)                ;ADDRESSABILITY TO IT\n         LA      R10,J1TSASIZ            ;SIZE OF TERM DYNAM\nGETMAIN  GETMAIN RC,LV=(R10)             ;PICK UP SOME STORAGE\n         LR      R8,R1                   ;SAVE STORAGE ADDRESS\n         USING   J1TWA,R8                ;ADDRESSABILITY TO TERM DYN\n         LTR     R15,R15                 ;GETMAIN O.K. ??\n         BNZ     LXFATALF                ;NO, THIS GUY DON,T LOGON\nSTGTMAIN L       R9,P1DTWT-DSA(R2)       ;ADDRESS OF TWT\nCHECK0   CLC     0(4,R9),=C'PEND'        ;END OF TABLE ????\n         BNE     CHECK1                  ;NO, KEEP UP GOOD WORK\nFREEMAIN DS      0H\n         L       R5,P1DRPLT-DSA(R2)\n         CLSDST  RPL=(R5),ARG=(R4),ACB=(R3),OPTCD=(SYN,RELEASE)\n         LA      R10,J1TSASIZ            ;YEH, GET STORAGE SIZE\n         FREEMAIN RC,LV=(R10),A=(R8)     ;STORAGE HAS TO GO\n         CLC     0(4,R9),=C'PEND'        ;END OF TABLE ????\n         BE      RETURN                  ;HE DIDN'T MAKE IT\n         MVC     0(4,R9),=X'00000000'    ;CLEAR HIS TWT ENTRY\n         B       RETURN                  ;BYE-BYE\nCHECK1   CLC     0(4,R9),=X'00000000'    ;IS TWT ENTRY OWNED\n         BE      LXTMVBF                 ;NO, HE CAN USE IT\n         LA      R9,4(R9)                ;YEH, TRY NEXT ENTRY\n         B       CHECK0                  ;TRY AGAIN\nLXTMVBF  DS      0H\n         ST      R1,0(R9)                ;LOOKS OK PUT ADDR IN TWT\n*\n** NEXT WE SET UP HIS DYNAMIC AREA(MAKE HIM REENTRANT)\n*\n         LA      R0,J1TRQBF\n         LA      R1,(J1DEND-J1TRQBF)\n         LA      R14,J1SRQBF\n         LA      R15,(J1SEND-J1SRQBF)\n         MVCL    R0,R14\n*\n         ST      R9,J1DENTST             ;THIS IS WHERE WE LIVE\n*\n** NEXT WE GEN A NIB AND RPL CHECK FOR RC=0 AND STORE ADDRESS OF EACH\n*\n         GENCB   AM=VTAM,BLK=NIB,MODE=RECORD,MF=(G,J1DNIBG),           X\n               PROC=(TRUNC)\n         LTR     R15,R15\n         BNZ     FREEMAIN\n         ST      R1,J1TNIB\n         LR      R5,R1\n         GENCB   AM=VTAM,BLK=RPL,NIB=(R5),ACB=(R3),MF=(G,J1DRPLG)\n         LTR     R15,R15\n         BNZ     FREEMAIN\n         ST      R1,J1TRPL\n*\n         L       R6,J1TRPL               ;LOAD RPL TO BE SURE GOOD\n*\n** PUT LUID INTO NIB AND A COUPLE OTHER PLACES FOR DISPLAYS\n*\n         MVC     NIBSYM-ISTDNIB(8,R5),0(R4)\n         MVC     J1TLUID(8),0(R4) LUID\n         MVC     J1DLUNM(8),0(R4) LUID\n*\n** WE NEED SESSION PARAMETERS\n*\n         INQUIRE RPL=(R6),OPTCD=SESSPARM,AREA=J1DTXT,AREALEN=50,       X\n                 ACB=(R3),NIB=(R5)\n         LTR     R15,R15\n         BNZ     FREEMAIN\n         LA      R4,J1DTXT\n         LA      R10,J1DPRI                    ;NO, GET ADDRESS TABLE\n         ST      R10,J1DADTBL                  ;NO, GET ADDRESS TABLE\n         LA      R10,J1DALT                    ;NO, GET ADDRESS TABLE\n         MVI     CLEAR,X'F5'                   ;WRITE ERASE\n         MVI     J1DCOLS+3,X'50'               ;SET DFLT LINE LENGTH\n         MVI     J1DCOLM1+3,X'4F'              ;SET SEND LENGTH\n         CLC     21(2,R4),=X'1B84'\n         BNE     J1CROW                        ;NO SEE IF 80 CHAR\n         MVC     0(J1SM5E-J1SM5,R10),J1SM5     ;MOVE IN MOD 5 DISPLAY\nJ1CROW   MVC     ST10+3(1),21(R4)              ;GET NO. ROWS ON SCREEN\n         L       R7,ST10\n         LTR     R7,R7                         ;NOT ZERO IS IT ???\n         BNZ     *+8                           ;NO GO AROUND DEFAULT\nJ1DFLT   LA      R7,24                         ;DEFAULT TO 24 ROWS\n         S       R7,=F'2'\nJ1CLPSCN DS      0H\n         CLC     2(4,R10),=C'TEND'             ;END OF MY TABLE\n         BE      J1CKSNA                       ;YEH, BIG AS WE GO\n         LA      R10,2(R10)                    ;NO GO FOR BIGGER SCREEN\n         BCT     R7,J1CLPSCN                   ;TRY AGAIN\nJ1CKSNA  DS      0H\n         MVC     2(4,R10),=C'TEND'             ;SET END OF TABLE\n         CLI     BINLUP-ISTDBIND(R4),X'00'     ;IS THIS NON-SNA\n         BE      J1CGETM\n         OI      J1TFLG1,J1TSNA\n*\n** NOW WE GET USERID/PASSWORD IF THERE IS ONE\n*\nJ1CGETM  DS      0H\n         MVC     J1DTXT(20),=20CL1' '    ;CLEAR MESSAGE AREA\n         INQUIRE RPL=(R6),OPTCD=LOGONMSG,AREA=J1DTXT,AREALEN=20,       X\n                 ACB=(R3),NIB=(R5)\n*\n         LTR     R15,R15                 ;CHECK FOR RC=0\n         BNZ     FREEMAIN                ;NO, SORRY WE'RE OUTA HERE\n         CLI     J1DTXT,C' '             ;NO LOGON DATA\n         BE      OPNDST                  ;TRUE WE'LL GET IT LATER\n         LA      R4,7                    ;ID CAN ONLY BE 7 BYTES\n*\n** MOVE LOGON-DATA ONE BYTE AT A TIME STOP AT BLANK OR / FOR PASSWORD\n*\n         LA      R1,J1TUID               ;ADDRESS OF DATA DESTINATION\n         LA      R2,J1DTXT               ;ADDRESS OF DATA SOURCE\nLOOP     MVC     0(1,R1),0(R2)           ;MOVE ONE BYTE AT A TIME\n         CLI     J1DTXT,C' '             ;END OF DATA ???\n         BE      OPNDST                  ;YEH, ALL SET TO OPEN\n         CLI     J1DTXT,C'/'             ;IS THERE A PASSWORD\n         BNE     CONTLOOP                ;NO, GO BUMP REGS\n         LA      R1,J1TPWD-1             ;YEH, BACK UP PASSWORD AREA\n*                                         SO WE DON'T NEED NEW LOGIC\n         LA      R7,6                    ;ONLY 6 BYTE PASSWORD\nCONTLOOP LA      R1,1(R1)                ;JUST INCREMENT REGS\n         LA      R2,1(R2)\n         BCT     R4,LOOP                 ;IF NOT TO BIG GET MORE DATA\n*\n** OPEN HIM UP AND CHECK FOR RC=0\n*\nOPNDST   OPNDST  RPL=(R6),OPTCD=(SYN,ACCEPT,CS),ACB=(R3),NIB=(R5)\n         LTR     R15,R15\n         BNZ     RETURN\nSEND     DS      0H\n         LA      R7,J1TRQBF              ;USER-ID PROMT MESSAGE\n         LA      R10,J1TRQBFL            ;MESSAGE LENGTH\n*\n** SEND THIS GUY A COPY OF SIGN ON SCREEN AND CHECK FOR RC=0\n*\n         SEND    RPL=(R6),AREA=(R7),RECLEN=(R10),                      X\n               OPTCD=CA,RESPOND=(EX,FME),BRACKET=(BB,EB)\n         LTR   R15,R15\n         BNZ   FREEMAIN\n*\n         MVC   J1DAREA2(79),=79C'-'      ;JUST SET UP BREAK LINE\nRETURN   DS    0H\n         DROP  R8                        ;DON'T NEED ADDRESSABILITY\n         L     R14,R14SAVE               ;RETURN TO VTAM ADDRESS\n         BR    R14                       ;ALL SET, WE'RE OUTA HERE\nLXFATALF DS    0H\n         ABEND  121,DUMP                 ;OOPS..SOMTHIN DIDN'T WORK\n*\n* BELOW IS CONSTANST, MOST WILL GO TO DYN AREA FOR REENTRANCY\n*\nJ1SRQBF  DS    0F\n         DC    X'F5C31140581DE8',C'CONTROL TERMINAL FACILITY '\n         DC    X'11423A1DE8',C'\"JRP\" VER. II REL. I'\n         DC    X'114CF31DF8'\n         DC    CL13'PASSWORD ==> '          ALLOW 8 CHAR PASSWORD - LDW\n******** DC    CL16'PASSWORD ===>   '\n         DC    X'114D401DCD'                ALLOW 8 CHAR PASSWORD - LDW\n******** DC    X'114DC31DCD'\n******** DC    CL5' ',X'114DC91DF8'\n         DC    CL8' ',X'114DC91DF8'         ALLOW 8 CHAR PASSWORD - LDW\n         DC    X'114F401DF8'                ROW 1 COL 1\nJ1SERRLN DC    80C' '\n         DC    X'11C7F31DF8'                ROW 1 COL 1\n         DC    CL16'USER-ID  ==>    '\n         DC    X'11C8C31DC1'\nJ1SCUR1  DC    X'13'\n         DC    CL7' ',X'11C84B1DF8'\nJ1SRQBFL EQU   *-J1SRQBF\nJ1SOUTBF DS    0F\n         DC    X'F5C31140401DE8'\n         DC    C' '\nJ1SLUNM  DC    12C' '\nJ1STIME  DC    CL12'         '\nJ1SCMDSV DC    CL8'         ',X'11'\nJ1SADD1  DC    X'C150'\n         DC    X'1DE8'\nJ1SAREA1 DC    80C' ',X'11'\nJ1SADD2  DC    X'C260'\n         DC    X'1DE8'\nJ1SAREA2 DC    80C' '\nJ1SENDSC DC    X'115CF01D4013'\n         DC    50C' '\nJ1SOUTLN EQU   *-J1SOUTBF\nMOREDAT1 DC    XL7'F1C3115B601DE8'\n         DC    CL12'MORE........'\nMOREND1  DC    XL6'115CF81D4013'\nCLERDAT1 DC    XL7'F1C3115B601DE8'\n         DC    CL12'            '\nCLEREND1 DC    XL6'115CF81D4013'\nJ1SPRI   DS    0F\n         DC    X'C150C260C3F0C540C650'\n         DC    X'C760C8F04A404B504C60'\n         DC    X'4DF04F405050D160D2F0'\n         DC    X'D440D550D660D7F0D940'\n         DC    X'5A505B60',C'TEND'\nJ1SALT   DS    0F\n         DC    X'C150C260C3F0C540C650'\n         DC    X'C760C8F04A404B504C60'\n         DC    X'4DF04F405050D160D2F0'\n         DC    X'D440D550D660D7F0D940'\n         DC    X'5A505B605CF05E405F50'\n         DC    X'606061F0E340E450F560'\n         DC    X'E6F0E840E9506A606BF0'\n         DC    X'6D406E506F60F0F0F240'\n         DC    X'F350F460'\n         DC    C'TEND'\nJ1SEND   EQU   *\nJ1SM5    DS    0F\n         DC    X'C4C8C64CC8504AD44CD8'\n         DC    X'4E5C5060D2E4D4E8D66C'\n         DC    X'D8F05AF45CF85E7C6140'\n         DC    X'E3C4E5C8E74CE9506BD4'\n         DC    X'6DD86F5CF160F3E4F5E8'\n         DC    C'TEND'\nJ1SM5E   EQU   *\nJ1SMS1AD DC    X'423A'\nJ1SMS1   DC    C'                          '\nJ1SMS2AD DC    X'C55A'\nJ1SMS2   DC    C'   CONSOLE FACILITY'\nR14SAVE  DC    F'0'\nR13SAVE  DC    9D'0'\n**************************************\n*                                    *\n*       TPEND    EXIT ROUTINE        *\n*                                    *\n*                                    *\n**************************************\nJRPTPND  DS      0H\n         BALR    R12,R0\n         USING   *,R12                   ;ADDRESSABILITY\n         L       R13,=A(R13SAVE)         ;GET A SAVE FROM LOGON\n         ST      R14,TPNDS14             ;STORE RETURN TO VTAM\n         L       R6,=A(TPENDECB)         ;NEED 120'S ECB\n         POST    (R6)                    ;POST HIM SO HE GETS US OUT\n         L       R14,TPNDS14             ;RETURN TO VTAM ADDRESS\n         BR      R14                     ;OH-NO, THIS IS THE BIG ONE\nTPNDS14  DC      F'0'\n         LTORG\n**************************************\n*                                    *\n*       LOST TERM EXIT ROUTINE       *\n*                                    *\n*                                    *\n**************************************\nJRPLSTX  DS      0H\n         BALR    R12,R0\n         USING   *,R12                   ;ADDRESSABILITY\n         L       R13,=A(R13SAVE)         ;SAVE AREA\n         ST      R14,SAVELOST            ;SAVE RETURN TO VTAM ADDRESS\n         L       R4,4(R1)                ;PICK UP ARG FROM VTAM\n*        CLOSE UP\n         L       R2,=A(P1SGTMN)          ;GET DYNAMIC ADDRESS FROM 120\n         L       R2,0(R2)                ;GET ADDRESSABILITY TO IT\n         L       R6,P1DTWT-DSA(R2)       ;GET ADDRESS  TWT\nL1DLULP  CLC     0(4,R6),=C'PEND'        ;END OF TWT ????\n         BE      LOSTRTN                 ;YES,ALTHOUGH IT SHOULDN'T BE\n*                                         MAYBE INACT FORCE\n         L       R7,0(R6)                ;GET FIRST TERM DYN AREA\n         LTR     R7,R7                   ;ANYONE OWN IT ?????\n         BZ      L1CMTBMP                ;NO, LETS TRY THE NEXT ONE\n         L       R5,J1TARG-J1TWA(R7)     ;YEH, LETS SEE WHO\n         CR      R5,R4                   ;THIS THE GUY ??\n         BE    L1LOGF                    ;SURE IS, KICK HIM OUT\nL1CMTBMP LA    R6,4(R6)                  ;NO, TRY THE NEXT ONE\n         B     L1DLULP\nL1LOGF   DS    0H\n         L     R5,J1TRPL-J1TWA(R7)       ;GET HIS RPL ADDRESS\n*\n** NEXT WE MOVE IN HIS ARG TURN OFF THE NIB FLAG AND KICK HIM OUT\n*\n         MVC   RPLARG-IFGRPL(4,R5),J1TARG-J1TWA(R7)\n         NI    RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         CLSDST RPL=(R5),OPTCD=(SYN,RELEASE)\n*\n         LTR   R15,R15                    ;CLOSE O.K. ???\n         BNZ   LSTFATAL                   ;NO, ABEND\n         LA    R10,J1TSASIZ               ;SIZE OF TERM DYN AREA\n         FREEMAIN RC,LV=(R10),A=(R7)      ;DUMP HIS STORAGE\n         MVC   0(4,R6),=F'0'              ;CLEAR TWT ENTRY\nLOSTRTN  L       R14,SAVELOST             ;LOAD UP VTAM RETURN\n         BR      R14                      ;GO BACK TO VTAM\nLOSTABND ABEND   40,DUMP\nLSTFATAL ABEND   41,DUMP\nSAVELOST DC      F'0'\n         LTORG\n**************************************\n*                                    *\n*       RESPONSE EXIT ROUTINE        *\n*                                    *\n*                                    *\n**************************************\nJRPRSPX  DS      0H\n         BALR    R12,R0\n         USING   *,R12\n         L       R13,=A(R13SAVE)\n         ST      R14,RSPSV14\n         LR      R6,R1\n         L       R3,0(R6)\n         L       R4,16(R6)\n         LA      R5,RSPRPL\n         MVC     RPLARG-IFGRPL(R5),4(R6)\n         NI      RPLEXTDS-IFGRPL(R5),255-RPLNIB\n         TM      RPLVTFL2-IFGRPL(R4),RPLEX\n         RESETSR RPL=(R5),RTYPE=DFSYN,                                 X\n               ACB=(R3),OPTCD=CA\n         LTR     R15,R15\n         BNZ     RSPFATAL\n         L       R14,RSPSV14\n         BR      R14\nRSPFATAL ABEND   2,DUMP\nRSPRPL   RPL     AM=VTAM\nRSPSV14  DS      F\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP121": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x01\\x18O\\x01\\x01\\x18O\\x11\\x06\\x02\\xb5\\x02\\xb5\\x00\\x00\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-07-03T00:00:00", "modifydate": "2001-07-03T11:06:00", "lines": 693, "newlines": 693, "modlines": 0, "user": "AGCO"}, "text": "JRP121 TITLE 'JRP COMMAND AND INITIALIZATION PARES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP121                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PARSE ROUTINE FOR JRP               *\n*                328X PRINTER\"S                                       *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED = *                                           *\n*                                                                     *\n*             STATUS = ONE INVALID MESSAGE ISSUED ON FIRST COMMAND    *\n*                      PASS,NOT CRITICAL,WILL BE FIXED.               *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES MVS OPERATOR COMMANDS AND INPUT FROM          *\n*                JRP INITIALIZATION DATA SET.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN COMMANDS OR INPUT PASSED BY JRP100           *\n*                   FOR JRP KEYWORDS AND MAKES APPROPRIATE            *\n*                   MODIFICATIONS TO DYNAMIC PRINTER ENTRY AREAS.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP121     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP121 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP300 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R8 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY                                         *\n* 22JUN99 DHC ADDED CODE TO PARSE HEAD AND TAIL REQUESTS         *DHC**\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n* CHANGE LOG\n*\n* 06/25/01  ABEND 0C1 AT F6 IN JRP121                           .RJS01\n*           JRP121 IS ATTACHED W/O ECB AND IS DELETED BY SYSTEM .RJS01\n*           AFTER EACH EXECUTION.  R10 CONTAINS A ADDRESS WITHIN.RJS01\n*           THE MODULE (BAL) AND IS SAVED/RESTORED ACROSS       .RJS01\n*           EXECUTIONS OF THE MODULE.  SINCE THE MODULE MAY BE  .RJS01\n*           LOADED AT A DIFFERENT ADDRESS WHEN NEXT EXECUTED,   .RJS01\n*           R10 SHOULD BE SAVED/RESTORED AS A DISPLACEMENT      .RJS01\n*           WITHIN THE MODULE RATHER THAN A HARD ADDRESS        .RJS01\n***********************************************************************\nJRP121 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         L     R11,0(R1)\n         USING J1TWA,R11                 ;TERMINAL DSECT\n         USING J1DWA,R7                  ;PRINTER DSECT\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA                  ;START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA)        ;LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA                 ;START OF STATIC DATA\n         LA    R15,P1SMDL                ;LENGTH OF MODEL DATA\n         MVCL  R0,R14                    ;MOVE W/ZERO TO BE RENT,REUS\nP1WCKBSY TM    J1TFLG,J1TBUSY            ;THIS GUY BUSY ???\n         BNO   P1WBEGIN                  ;NO HE'S NOT BUSY\n         STIMER WAIT,BINTVL==F'100'      ;YEH, WAIT A SECOND WILL YA\n         B     P1WCKBSY                  ;GO BACK AND CHECK BUSY.\nP1WBEGIN L     R2,J1TRPL                 ;O.K. NOW GET OUR RPL\n         OI    J1TFLG,J1TBUSY            ;TURN ON THE BUSY FLAG\n         MVI   J1DPRN,C'('               ;CHANGE LU SEARCH ARGUMENT\n         MVC   J2DMSS(30),=CL30'OK'      ;SET O.K. MESSAGE\n         MODCB AM=VTAM,RPL=(R2),CHNGDIR=(NCMD),OPTCD=(CS,SYN,SPEC)\n         CLI  J1DTXT1,X'6D'              ;CLEAR KEY FLAG ON ??\n         BNE  CHKPF1                     ;NO, SEE IF PF1\n         MVC  J1DOUTBF(1),CLEAR          ;YEH,SET WRITE ERASE\n         L    R14,J1DADTBL               ;TOP OF SCREEN ADDRESS\n         ST   R14,J1TADDSV               ;STORE IN SAVE AREA\n         B    PROCESS\nCHKPF1   DS   0H\n         CLI  J1DTXT1,X'F1'              ;IS THIS A PF1\n         BNE  CHKPF2                     ;NO MAYBE PF2\n         MVC  J1DTXT(80),J1DHLD          ;MOVE IN PREVIOUS COMMAND\n         B    PROCESS\nCHKPF2   EQU *                           ;THESE\nCHKPF3   EQU *                           ;PFKEYS\nCHKPF4   EQU *                           ;ARE\nCHKPF5   EQU *                           ;FOR\nCHKPF6   EQU *                           ;FUTURE\nCHKPF7   EQU *                           ;EXPANSION\nCHKPF8   EQU *\nCHKPF9   EQU *\nCHKPF10  EQU *\nCHKPF11  EQU *\nCHKPF12  EQU *\nCHKPA1   EQU *\nCHKPA2   EQU *\n*\n**  PROCESS MODIFY\n*\nPROCESS  TM    J1TFLG,J1TTOP             ;TOP LINE ON FOR NOWRAP\n         BNO   NEWCMD                    ;NO RESTORE TO CONTINUE\n*\n**  THESE INSTRUCTIONS RESTORE REGISTERS FOR MORE DATA ON NOWRAP\n*\n         L     R3,ST3\n         L     R4,ST4\n         L     R5,ST5\n         L     R6,ST6\n         L     R7,ST7\n         L     R9,ST9\n         L     R10,ST10\n         AR    R10,R12                                          .RJS01\n*\n         B     SENDBACK                  ;GO CLEAR MORE DATA LINE AND\nNEWCMD   DS    0H\n         L     R9,J1TPWT                 ;GET ADDRESS OF PWT\n         OI    J1TFLG,J1TGLBF            ;SET DEFAULT GLOBAL DISPLAY\n         MVC   J1DHLD(80),J1DTXT         ;SAVE DATA ENTERED\n         MVC   J2DMSS(30),=CL30'NO COMMAND RECEIVED'\n         CLI   J1DHLD,C' '               ;IS IT EMPTY\n         BE    P1CMPOK                   ;YEA, SEND INVALID MESSAGE\nP1CMFLN  LA    R10,J1DHLD                ;LOAD UP ENTERED DATA ADDR\n         LR    R5,R10                    ;DUP IT TO REG 5\n         LR    R6,R5                     ;DUP IT TO REG 6\nP1CMBMPL LA    R5,1(R5)                  ;BUMP DATA ADDRESS ONE BYTE\n         CLC   0(2,R5),=2C' '            ;IS IT BLANK ???\n         BNE   P1CMBMPL                  ;NO, LOOP TILL WE FIND ONE\n         SR    R5,R10                    ;BOUT TIME, LETS FIND LENGTH\n         S     R5,=F'1'                  ;MINUS 1 FOR LENGTH\n         BAL   R10,P1TSEND               ;GO TO DISPLAY ROUTINE\n         MVC   J2DMSS(30),=CL30'OK'      ;SET O.K. MESSAGE\n         CLC   J1DHLD(6),=C'CANCEL'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'PRISCN'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'ALTSCN'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'LOGON '      ;WAS THIS A LOGON ATTEMPT\n         BNE   CKNOWRP                   ;NO, MAYBE HE'S SETTING NOWRAP\n         MVC   J2DMSS(30),=CL30'APPL INVALID OR INACCESSIBLE'\n         B     P1CMPOK                   ;LETS TELL HIM NO GOOD\nCKNOWRP  CLC   J1DHLD(6),=C'NOWRAP'      ;DOES THIS GUY WANT NOWRAP\n         BNE   CKAUTO                    ;NO, MAYBE HE'S RESETTING WRAP\n         TM    J1TFLG,J1TUNSOL\n         BZ    NOWRPOK\n         MVC   J2DMSS(30),=CL30'NOWRAP INVALID WITH UNSOL'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nNOWRPOK  OI    J1TFLG,J1TAUTO            ;IF HE DOES SET NOWRAP FLAG\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nCKAUTO   DS    0H\n         CLC   J1DHLD(4),=C'WRAP'        ;IS WRAP HE WANTS ??\n         BNE   CKUNSOL                   ;NO, MAYBE UNSOLICITTED\n         MVC   J2DMSS(30),=CL30'OK'\n         NI    J1TFLG,255-J1TAUTO        ;IF SO TURN ON AUTO WRAP\n         B     P1CMPOK                   ;TELL HIM O.K.\nCKUNSOL  CLC   J1DHLD(4),=C'UNSO'        ;DOES THIS GUY WANT UNSOLICIT\n         BNE   CKNOUN                    ;NO, MAYBE HE'S RESETTING UNSO\n         TM    J1TFLG,J1TAUTO\n         BZ    UNSOLOK\n         MVC   J2DMSS(30),=CL30'UNSOL INVALID WITH NOWRAP'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nUNSOLOK  OI    J1TFLG,J1TUNSOL           ;IF HE DOES SET UNSOL FLAG\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nCKNOUN   DS    0H\n         CLC   J1DHLD(5),=C'NOUNS'       ;IS IT NOUNSOL HE WANTS ??\n         BNE   P1PLPRT                   ;NO, MUST BE $ COMMAND\n         NI    J1TFLG,255-J1TUNSOL       ;IF SO TURN OFF UNSOL\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;TELL HIM O.K.\n**             FIND PRINTERS DYNAMIC AREA\n*\nP1PLPRT  DS    0H\n         MVC   J2DMSS(30),=CL30'NOT A VALID PRINTER ID'\n         LA    R4,J1DHLD+2               ;BUMP PASSED  COMMAND\nP1PLOOP  CLI   0(R4),C','                ;IS IT COMMA(END OF STRING) ?\n         BE    P1FPLOOP                  ;YEH, FIND PRINTER NAME.\n         CLI   0(R4),C' '                ;IS IT BLANK(END OF STRING) ?\n         BE    P1FPLOOP                  ;YEH, FIND PRINTER NAME.\n         LA    R4,1(R4)                  ;BUMP IT UP 1\n         B     P1PLOOP                   ;GO BACK AND FIND END\nP1FPLOOP DS    0H\n         LR    R5,R4                     ;DUP R5 TO R4\n         LA    R1,J1DHLD+2               ;BUMP PASSED $X CMD\n         SR    R5,R1                     ;GET LENGTH OF PRINTER NAME\n         SH    R5,=H'1'                  ;MINUS 1 FOR LENGTH\n         CLC   0(4,R9),=C'PEND'          ;IS THIS END OF TABLE\n         BE    P1CMEND                   ;YES. WE DONT OWN THIS PRINTER\n         CLC   J1DHLD+2(2),=C'U '        ;IS THIS GLOBAL REQUEST\n         BE    P1FPSET                   ;YEH, DONT WORRY WHO IT IT\n         CLC   J1DHLD+2(2),=C'U,'        ;IS THIS GLOBAL REQUEST\n         BE    P1FPSET                   ;YEH, DON'T WORRY WHO IT IS\n         NI    J1TFLG,255-J1TGLBF        ;SET GLOBAL OFF FOR ONE PRTR\n         EX    R5,J2SPCHK                ;CHECK PRINTER NAME\n         BE    P1FPSET                   ;THIS IS OUR BOY,GO FOR IT\nP1PALOOP DS    0H\n         LA    R9,12(R9)                 ;NOT HIM GET NEXT ENTRY\n         B     P1FPLOOP                  ;GO CHECK AGAIN\nP1FPSET  DS    0H\n         L     R7,8(R9)                  ;LOAD UP DYNAMIC AREA ADDRESS\n*\n**             DISP (DISPLAY PRINTER ATTRIBUTES)\n*\nP1CM$D   DS    0H\n         CLC   =C'$D',J1DHLD             ;DISPLAY ??\n         BNE   P1CM$C                    ;NO-LOOK FOR KEYWORDS\nP1WDST   LR    R3,R4                     ;DUP R4 TO R3\n         B     P1CMOK                    ;SAY O.K. FRIEND\n*\n**             $C    (CANCEL PRINT )\n*\nP1CM$C   CLC   =CL2'$C',J1DHLD           ;FLUSH CURRENT D.S. ??\n         BNE   P1CM$E                    ;NO - TRY RESTART\nFLUSHOK  OI    J1DFLAG2,J1DFLUSH         ;YES, SET RESTART FLAG\n         NI    J1DFLAG1,255-J1DKEEP      ;TURN OFF KEEP FLAG\n         LR    R3,R4                     ;POINT TO USERID (IF ANY)\n         B     P1CMOK ;TELL HIM O.K.\n*\n**             $E    (RESTART PRINT )\n*\nP1CM$E   CLC   =CL2'$E',J1DHLD           ;RESTART CURRENT D.S.\n         BNE   P1CM$P                    ;NO - TRY PRINTER PURGE\n         OI    J1DFLAG2,J1DFLUSH         ;SET RESTART FLAG\n         OI    J1DFLAG1,J1DKEEP          ;SET D.S. KEEP FLAG\n         LR    R3,R4                     ;POINT TO USERID (IF ANY)\n         B     P1CMOK                    ;TELL OPER O.K.\n*\n**             PURGE AFTER CURRENT DATA-SET\n*\nP1CM$P   DS    0H\n         CLC   =CL2'$P',J1DHLD           ;PURGE PRINTER ??\n         BNE   P1CM$S                    ;NO TRY START\n         LR    R3,R4                     ;DUP REG 4 TO REG 3\n         OI    J1DFLAG2,J1DPURGE         ;TURN ON PURGE FLAG\n         CLC   J1DHSTAT,=C'ACTIV'        ;CHECK CURRENT PRINTER STATUS\n         BE    P1CMACT\n         CLC   J1DHSTAT,=C'RETRYING'     ;AND MAKE ADJUSTMENTS\n         BNE   P1CKINA\nP1CMACT  MVC   J1DHSTAT,=CL10'DRAINING'  ;AS REQUIRED\n         B     P1CMOK\nP1CKINA  MVC   J1DHSTAT,=CL10'DRAINED'\n         B     P1CMOK                    ;THEN TELL OPER O.K.\n*\n**             START UP AFTER PAUSE\n*\nP1CM$S   DS    0H\n         CLC   =CL2'$S',J1DHLD           ;PRINTER START\n         BNE   P1CM$T                    ;NO SEE IF MORE KEYWORDS\n         LR    R3,R4                     ;DUP REG 4 TO REG 3 AGAIN\n         NI    J1DFLAG2,255-J1DPURGE     ;TURN OFF PURGE FLAG\n         NI    J1DFLAG1,255-J1DRTLM      ;TURN OFF RETRY LIMIT FLAG\n         CLC   J1DHSTAT(5),=C'ACTIV'     ;SEE IF ALREADY ACTIVE\n         BE    P1CMOK                    ;YES, JUST SAY O.K.\n         CLC   J1DHSTAT(8),=C'DRAINING'  ;IF ITS DRAINING\n         BNE   *+14\n         MVC   J1DHSTAT,=CL10'ACTIVE'    ;MAKE IT ACTIVE\n         B     P1CMOK                    ;O.K.\n         MVC   J1DHSTAT,=CL10'INACTIVE'  ;IF ITS INACTIVE LEAVE IT\n         B     P1CMOK                    ;THEN SAY O.K.\n*\n**             SET PRINTER ATTRIBUTES\n*\nP1CM$T   DS    0H\n         CLC   =CL2'$T',J1DHLD           ;SET PRINTER ATTRIBUTES CMD ??\n         BNE   P1CMINVC                  ;NO-SORRY WE HAVE NO MORE CMDS\n         LR    R3,R4                     ;DUP THAT 4 TO 3 AGAIN\n*\n**             SCAN FOR KEYWORDS\n*\nP1CMKEYW DS    0H\n         LA    R14,P1CMFMXT              ;SET RETURN ADDRESS\n**********************************************************************\n*                                                                    *\n**             PARSE DOWN STARTUP PARMS OR MODIFY KEYWORDS           *\n*                                                                    *\n**********************************************************************\nP1CMFMSU DS    0H\n         ST    R14,P1DFMRET              ;SAVE RETURN ADDR\nP1CMTYP  DS    0H\n         CLI   0(R3),C','                ;LOOK FOR KEYWORDS\n         BNE   *+8                       ;\"\n         LA    R3,1(R3)                  ;BUMP PAST COMMA\n         CLC   0(2,R3),=C'C='            ;CLASS CHANGE ??\n         BE    P1CMCLAS                  ;YEH TAKE CARE OF IT\n         CLC   0(3,R3),=C'LU='           ;LUNAME CHANGE ??\n         BE    P1CMLUID                  ;YEH, TAKE CARE OF THAT\n         CLC   0(5,R3),=C'MLIN='         ;MAX LINES CHANGE ??\n         BE    P1CMLNE                   ;TAKE CARE OF THAT ONE\n         CLC   0(4,R3),=C'SCS='          ;SCS Y/N ??\n         BE    P1CMSCSO                  ;WAT'ER YA WAITIN FOR, DO IT\n         CLC   0(5,R3),=C'LGMD='         ;SET LOGMODE\n         BE    P1CMLGMD                  ;DO THAT TOO.\n         CLC   0(2,R3),=C'R='            ;JES2 DESTID CHANGE ??\n         BE    P1CMDEST                  ;O.K. I'LL DO IT\n         CLC   0(2,R3),=C'F='            ;FORM NUMBER CHANGE ??\n         BE    P1CMFRM                   ;GOD I'M GETTING SICK OF THIS\n         CLC   0(2,R3),=C'S='            ;YOU WANT SEPERATOR PAGE ??\n         BE    P1CMSEP                   ;I'LL GET THAT RIGHT AWAY\n         CLC   0(4,R3),=C'LPP='          ;NOW HE WANTS LINES PER PAGE\n         BE    P1CMLEN                   ;THATS A JOB BUT I'LL GET IT\n         COPY  DHC121A             INCLUDE OTHER TESTS            *DHC*\n         B     P1CMFMER                  ;AH-HA, SEE THERE ARE NO MORE\n*\n**       PROCESS FORMS CHANGE\n*\nP1CMFRM  DS    0H\n         LA    R0,4                      ;MAX LENGTH FOR FORM\n         LA    R3,2(R3)                  ;BUMP PAST F=\n         LA    R15,J1DHFORM              ;GET HOLD AREA\n         MVC   0(4,R15),=4CL1' ' ;CLEAR IT\n         BAL   R14,P1CMSCN               ;GO EDIT DATA\n         B     P1CMCKMR                  ;MUST BE O.K.\n*\n**       PROCESS SCS OPTION CHANGE\n*\nP1CMSCSO DS    0H                        ;SCS OPTION\n         LA    R0,1                      ;MAX 1 CHAR\n         LA    R3,4(R3)                  ;BUMP PAST SCS=\n         LA    R15,J1DHSCS               ;GET HOLD AREA\n         BAL   R14,P1CMSCN               ;EDIT DATA\n         B     P1CMCKMR                  ;ASSUME GOOD\n*\n**       PROCESS LUID CHANGE\n*\nP1CMLUID DS    0H\n         LA    R0,8                      ;8 CHAR MAX\n         LA    R3,3(R3)                  ;BUMP PAST LU=\n         LA    R15,J1DLUID               ;GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '         ;CLEAR IT\n         BAL   R14,P1CMSCN               ;EDIT DATA\n         LA    R2,J1DBFCL                ;GET NORMAL MESSAGE\n         BAL   R5,PUTLU                  ;PUT IT IN MESSAGE\n         LA    R2,J1DFLSMS               ;GET FLUSH MESSAGE\n         BAL   R5,PUTLU                  ;PUT IT IN MESSAGE\n         B     P1CMCKMR                  ;ASSUME DATA GOOD\nPUTLU    DS    0H\n         CLC   0(1,R2),J1DPRN            ;END OF PRINT ??\n         BE    *+12\n         LA    R2,1(R2)\n         B     PUTLU\n         MVI   0(R2),C'('\n         MVC   1(8,R2),J1DLUID\n         MVI   9(R2),C')'\n         BR    R5\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMLGMD DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,5(R3)            BUMP PAST LGMD=\n         LA    R15,J1DLGMD         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMCLAS DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST C=\n         LA    R15,J1DHCLAS        GET HOLD AREA\n         MVC   J1DHCLAS,=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS DESTINATION\n*\nP1CMDEST DS    0H                  DEST CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST R=\n         LA    R15,J1DHDEST        GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE SEPERATOR OPTION\n*\nP1CMSEP  DS    0H                  SEP  CHANGE\n         LA    R0,1                1 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST S=\n         LA    R15,J1DSEP          GET SEP SWITCH\n         MVI   J1DSEP,C'Y'         SET IT ON AS A DEFAULT\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE LENGTH CHANGE\n*\nP1CMLEN  DS    0H                  LEN  CHANGE\n         LA    R0,3\n         LA    R3,4(R3)            RESTORE PASSED \"LPP=\"\n         LA    R1,J1DLEN           GET ANSWER LOC.\n*\n**       COMMON CODE FOR L=NNN,W=NNN\n*\nP1CMLENT DS    0H                  SCAN FOR NUMERIC KEYWORD\n         LR    R6,R0               DUP MAX LEN\n         LA    R15,P1DWORK         GET WORK AREA\n         XC    P1DWORK,P1DWORK     CLEAR IT\n         BAL   R14,P1CMSCN         EDIT DATA\n         SR    R0,R6               (RESIDUAL-MAX)=NEG. DIGITS\n         BZ    P1CMCKMR            NONE-USE CURRENT\n         LPR   R0,R0               DIGITS OF DATA\n         XR    R15,R15             CLEAR WORK\nP1CMLNXT DS    0H                  CONVERT VALUE TO BINARY\n         IC    R14,P1DWORK         PICK A DIGIT\n         N     R14,=F'15'          GET NUMERIC PART\n         MH    R15,=H'10'          SHIFT CURRENT VALUE A DIGIT\n         AR    R15,R14             ADD NEW DIGIT\n         MVC   P1DWORK(7),P1DWORK+1 SHIFT DIGITS DOWN\n         BCT   R0,P1CMLNXT         LOOP\n         ST    R15,0(R1)           SAVE NEW VALUE IN ANSWER AREA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE WIDTH CHANGE\n*\nP1CMLNE  DS    0H                  WID  CHANGE\n         LA    R0,4\n         LA    R3,5(R3)            RESTORE PASSED \"MLIN=\"\n         LA    R1,J1DMLNE          GET ANSWER LOC.\n         B     P1CMLENT            GO TO COMMON CODE\n         COPY  DHC121B             INCLUDE OTHER PROCESSES        *DHC*\n*\n**       LOOK FOR ANOTHER KEYWORD\n*\nP1CMCKMR DS    0H                  SEE IF ANOTHER KEYWORD\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMFMOK            YES-GIVE OK P1G\n         B     P1CMTYP             NO-CLASSIFY\n*\n**       MOVE KEYWORD DATA\n*\nP1CMSCN  DS    0H                  EDIT\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         CLI   0(R3),C','          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         MVC   0(1,R15),0(R3)      MOVE DATA INTO WORK\n         LA    R3,1(R3)            BUMP\n         LA    R15,1(R15)          \"\n         BCT   R0,P1CMSCN          LOOP\nP1CMSCND DS    0H                  RETURN\n         BR    R14                 \"\n**********************************************************************\n*\n**             PARSE RETURN\n*\nP1CMFMOK DS    0H                  PARSE OK\n         L     R14,P1DFMRET        GET RETURN ADDR\n         B     0(R14)              +0 = OK\nP1CMFMER DS    0H                  BAD PARSE\n         L     R14,P1DFMRET        GET RETURN\n         B     4(R14)              +4 = BAD\n**********************************************************************\n*\n**              RETURN FROM PARSE  OF MODIFY TEXT\n*\nP1CMFMXT DS    0H                  BRANCH TABLE\n         B     P1CMOK              +0=OK\n         B     P1CMINVT            +4=ERR\nP1TSEND  DS    0H\n         C     R5,J1DCOLS\n         BNL   P1CSETMR\n         NI    J1TFLG,255-J1TMRMSG\n         B     P1CSETNM\nP1CSETMR DS    0H\n         OI    J1TFLG,J1TMRMSG      MORE MESSAGE\n         LR    R15,R6                NEW ADDRESS\n         A     R15,J1DCOLS           NEW ADDRESS\n         LR    R14,R5\n         S     R14,J1DCOLM1\n         ST    R15,J1TNEWAD\n         ST    R14,J1TNEWLN\n         L     R5,J1DCOLM1\nP1CSETNM L     R14,J1TADDSV\n         LTR   R14,R14\n         BZ    TOP\n         CLC   6(4,R14),=C'TEND'\n         BE    TOP\n         CLC   8(4,R14),=C'TEND'\n         BNE   NOBUMP\n         MVI   J1DAREA2,C' '\n         MVC   J1DAREA2+(78),J1DAREA2\n         B     NOBUMP\nTOP      DS    0H\n         MVI   J1DAREA2,C'-'\n         MVC   J1DAREA2+1(78),J1DAREA2\n         L     R14,J1DADTBL\n         ST    R14,J1TADDSV\n         TM    J1TFLG,J1TAUTO\n         BZ    NOBUMP\n         OI    J1TFLG,J1TTOP\n         L     R2,J1TRPL\n         XR    R15,R15\n         SEND  RPL=(R2),OPTCD=(SYN,SPEC,CA),AREA=MOREDATA,RECLEN=25,   X\n               CHAIN=ONLY,STYPE=REQ,CHNGDIR=CMD,BRACKET=(NBB,NEB)\n         LTR   R15,R15\n         BNZ   J1FATALF\n         ST    R3,ST3\n         ST    R4,ST4\n         ST    R5,ST5\n         ST    R6,ST6\n         ST    R7,ST7\n         ST    R9,ST9\n         SR    R10,R12                                          .RJS01\n         ST    R10,ST10\n         B     JRPRTRN\nSENDBACK SEND  RPL=(R2),OPTCD=(SYN,SPEC,CS),AREA=CLERDATA,RECLEN=25,   X\n               CHAIN=ONLY,STYPE=REQ,BRACKET=(NBB,NEB) CHNGDIR=CMD\n         LTR   R15,R15\n         BNZ   J1FATALF\n         NI    J1TFLG,255-J1TTOP\n         L     R14,J1TADDSV\nNOBUMP   MVC   J1DADD1(2),0(R14)\n         MVC   J1DADD2(2),2(R14)\n         MVI   J1DAREA1,C' '\n         MVC   J1DAREA1+1(79),J1DAREA1\n         EX    R5,PRTMVC\n         LA    R14,2(R14)\n         ST    R14,J1TADDSV\n         LA    R5,J1DOUTBF\n         LA    R6,J1DOUTLN\n         L     R2,J1TRPL\n         SEND  RPL=(R2),RECLEN=(R6),AREA=(R5),CHAIN=ONLY,              X\n               OPTCD=(SYN,SPEC),STYPE=REQ,BRACKET=(NBB,NEB)\n         LTR   R15,R15\n         BNZ   J1FATALF\n         MVC   J1DOUTBF(1),=X'F1'\n         TM    J1TFLG,J1TMRMSG     MORE DATA\n         BZR   R10\n         L     R6,J1TNEWAD\n         L     R5,J1TNEWLN\n         B     P1TSEND\n**********************************************************************\n*\n**             GIVE OPER STATUS TO MODIFY COMMAND\n*\nP1CMOK   DS    0H                  GIVE OPER OK P1G\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMWTO             ISSUE WTO\nP1CMINVC DS    0H                  GIVE INVALID P1G\n         MVC   J2DMSS(30),=CL30'INVALID COMMAND'\n         B     P1CMPOK\nP1CMINVT DS    0H                  GIVE INVALID P1G\n         MVC   J2DMSS(30),=CL30'INVALID COMMAND TEXT'\n         B     P1CMPOK\nP1CMWTO  DS    0H\n         L     R0,J1DLEN\n         CVD   R0,P1DWORK\n         UNPK  J1DLEN2,P1DWORK+6(2)\n         OI    J1DLEN2+L'J1DLEN2-1,C'0'\n         L     R0,J1DMLNE\n         CVD   R0,P1DWORK\n         UNPK  J1DMLNE2(4),P1DWORK+5(3)\n         OI    J1DMLNE2+L'J1DMLNE2-1,C'0'\n         MVC   J1DBYWHO(8),J1TLUID TELL WHO CANCELLED OUTPUT\n         MVI   J1DBYWHO+7,C' '\n         LA    R5,J1DTPUTL\n         LA    R6,J1DTPUT\n         BAL   R10,P1TSEND\nP1CMEND  DS    0H\n         CLC   0(4,R9),=C'PEND'\n         BE    P1CMPOK\n         TM    J1TFLG,J1TGLBF\n         BO    P1PALOOP\nP1CMPOK  DS    0H\n         LA    R5,L'J2SOK-1\n         LA    R6,J2SOK\n         L     R2,J1TRPL\n         MODCB AM=VTAM,RPL=(R2),OPTCD=(CA),CHNGDIR=CMD\n         BAL   R10,P1TSEND\n         B     JRPRTRN\nJ2SPCHK  CLC   0(0,R9),J1DHLD+2  RDW+$T\nPRTMVC   MVC   J1DAREA1,0(R6)\nP1CMDMV  MVC   J1DHLD(0),0(R10)\nJ1CMWRP  DS    0H\nJ1CMLGF  DS    0H\nJRPRTRN  DS    0H\n         NI    J1TFLG,255-J1TBUSY        ;TURN ON THE BUSY FLAG\n         OI    J1TFLG,J1TRECD            ;TURN ON RECEIVE DIR.\n         DROP  R7\n         DROP  R11\n         JRPRTRN\nJ1FATALF DS    0H\n         ABEND 121\nJ2SYN    EQU   *    DUMMY LABEL\nP1GEOD   EQU   *    DUMMY LABEL\nJ1TOWN   EQU   X'02'\nTRANSTBL DS    0CL256\nTRANS    DC    XL24'000102030405060708090A0B0C0D0E0F1011121314151617'\n         DC    XL24'18191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL24'404142434445464748494A4B4C4D4E4F5051525354555657'\n         DC    XL24'58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F'\n         DC    XL24'707172737475767778797A7B7C7D7E7F80C1C2C3C4C5C6C7'\n         DC    XL24'C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL24'E0E1E2E3E4E5E6E7E8E9AAABACADAEAFB0B1B2B3B4B5B6B7'\n         DC    XL24'B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL24'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7'\n         DC    XL24'E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9000000000000'\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nJ2SPRN   DC    C' '\nJ2SOK    DC    CL45'JRP100I '\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nJ1DPRN   DC    C' '\nJ2DOK    DC    CL45'JRP100I '\nJ2DMSS   EQU   J2SOK+8,30\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DTBL   DS    F                   RETURN SAVE AREA\nP1DWRET  DS    F                   RETURN SAVE AREA\nP1DFMRET DS    F                   RETURN SAVE AREA\nP1DWORK  DS    D                   WORK FIELD\nP1DSPALL DS    C\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPDMAC\n         JRPTMAC\n         JRPREGS\n         ISTDNIB\n         IFGRPL AM=VTAM\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP121OL": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x02\\xa5\\x02\\xa5\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 677, "newlines": 677, "modlines": 0, "user": "JRP"}, "text": "JRP121 TITLE 'JRP COMMAND AND INITIALIZATION PARES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP121                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PARSE ROUTINE FOR JRP               *\n*                328X PRINTER\"S                                       *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS = ONE INVALID MESSAGE ISSUED ON FIRST COMMAND    *\n*                      PASS,NOT CRITICAL,WILL BE FIXED.               *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES MVS OPERATOR COMMANDS AND INPUT FROM          *\n*                JRP INITIALIZATION DATA SET.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN COMMANDS OR INPUT PASSED BY JRP100           *\n*                   FOR JRP KEYWORDS AND MAKES APPROPRIATE            *\n*                   MODIFICATIONS TO DYNAMIC PRINTER ENTRY AREAS.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP121     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP121 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP300 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R8 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP121 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         L     R11,0(R1)\n         USING J1TWA,R11                 ;TERMINAL DSECT\n         USING J1DWA,R7                  ;PRINTER DSECT\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA                  ;START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA)        ;LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA                 ;START OF STATIC DATA\n         LA    R15,P1SMDL                ;LENGTH OF MODEL DATA\n         MVCL  R0,R14                    ;MOVE W/ZERO TO BE RENT,REUS\nP1WCKBSY TM    J1TFLG,J1TBUSY            ;THIS GUY BUSY ???\n         BNO   P1WBEGIN                  ;NO HE'S NOT BUSY\n         STIMER WAIT,BINTVL==F'100'      ;YEH, WAIT A SECOND WILL YA\n         B     P1WCKBSY                  ;GO BACK AND CHECK BUSY.\nP1WBEGIN L     R2,J1TRPL                 ;O.K. NOW GET OUR RPL\n         OI    J1TFLG,J1TBUSY            ;TURN ON THE BUSY FLAG\n         MVI   J1DPRN,C'('               ;CHANGE LU SEARCH ARGUMENT\n         MVC   J2DMSS(30),=CL30'OK'      ;SET O.K. MESSAGE\n         MODCB AM=VTAM,RPL=(R2),CHNGDIR=(NCMD),OPTCD=(CS,SYN,SPEC)\n         CLI  J1DTXT1,X'6D'              ;CLEAR KEY FLAG ON ??\n         BNE  CHKPF1                     ;NO, SEE IF PF1\n         MVC  J1DOUTBF(1),CLEAR          ;YEH,SET WRITE ERASE\n         L    R14,J1DADTBL               ;TOP OF SCREEN ADDRESS\n         ST   R14,J1TADDSV               ;STORE IN SAVE AREA\n         B    PROCESS\nCHKPF1   DS   0H\n         CLI  J1DTXT1,X'F1'              ;IS THIS A PF1\n         BNE  CHKPF2                     ;NO MAYBE PF2\n         MVC  J1DTXT(80),J1DHLD          ;MOVE IN PREVIOUS COMMAND\n         B    PROCESS\nCHKPF2   EQU *                           ;THESE\nCHKPF3   EQU *                           ;PFKEYS\nCHKPF4   EQU *                           ;ARE\nCHKPF5   EQU *                           ;FOR\nCHKPF6   EQU *                           ;FUTURE\nCHKPF7   EQU *                           ;EXPANSION\nCHKPF8   EQU *\nCHKPF9   EQU *\nCHKPF10  EQU *\nCHKPF11  EQU *\nCHKPF12  EQU *\nCHKPA1   EQU *\nCHKPA2   EQU *\n*\n**  PROCESS MODIFY\n*\nPROCESS  TM    J1TFLG,J1TTOP             ;TOP LINE ON FOR NOWRAP\n         BNO   NEWCMD                    ;NO RESTORE TO CONTINUE\n*\n**  THESE INSTRUCTIONS RESTORE REGISTERS FOR MORE DATA ON NOWRAP\n*\n         L     R3,ST3\n         L     R4,ST4\n         L     R5,ST5\n         L     R6,ST6\n         L     R7,ST7\n         L     R9,ST9\n         L     R10,ST10\n*\n         B     SENDBACK                  ;GO CLEAR MORE DATA LINE AND\nNEWCMD   DS    0H\n         L     R9,J1TPWT                 ;GET ADDRESS OF PWT\n         OI    J1TFLG,J1TGLBF            ;SET DEFAULT GLOBAL DISPLAY\n         MVC   J1DHLD(80),J1DTXT         ;SAVE DATA ENTERED\n         MVC   J2DMSS(30),=CL30'NO COMMAND RECEIVED'\n         CLI   J1DHLD,C' '               ;IS IT EMPTY\n         BE    P1CMPOK                   ;YEA, SEND INVALID MESSAGE\nP1CMFLN  LA    R10,J1DHLD                ;LOAD UP ENTERED DATA ADDR\n         LR    R5,R10                    ;DUP IT TO REG 5\n         LR    R6,R5                     ;DUP IT TO REG 6\nP1CMBMPL LA    R5,1(R5)                  ;BUMP DATA ADDRESS ONE BYTE\n         CLC   0(2,R5),=2C' '            ;IS IT BLANK ???\n         BNE   P1CMBMPL                  ;NO, LOOP TILL WE FIND ONE\n         SR    R5,R10                    ;BOUT TIME, LETS FIND LENGTH\n         S     R5,=F'1'                  ;MINUS 1 FOR LENGTH\n         BAL   R10,P1TSEND               ;GO TO DISPLAY ROUTINE\n         MVC   J2DMSS(30),=CL30'OK'      ;SET O.K. MESSAGE\n         CLC   J1DHLD(6),=C'CANCEL'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'PRISCN'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'ALTSCN'      ;WAS THIS A CANCEL COMMAND\n         BE    P1CMPOK                   ;YEH, GOTTA TELL HIM OK\n         CLC   J1DHLD(6),=C'LOGON '      ;WAS THIS A LOGON ATTEMPT\n         BNE   CKNOWRP                   ;NO, MAYBE HE'S SETTING NOWRAP\n         MVC   J2DMSS(30),=CL30'APPL INVALID OR INACCESSIBLE'\n         B     P1CMPOK                   ;LETS TELL HIM NO GOOD\nCKNOWRP  CLC   J1DHLD(6),=C'NOWRAP'      ;DOES THIS GUY WANT NOWRAP\n         BNE   CKAUTO                    ;NO, MAYBE HE'S RESETTING WRAP\n         TM    J1TFLG,J1TUNSOL\n         BZ    NOWRPOK\n         MVC   J2DMSS(30),=CL30'NOWRAP INVALID WITH UNSOL'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nNOWRPOK  OI    J1TFLG,J1TAUTO            ;IF HE DOES SET NOWRAP FLAG\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nCKAUTO   DS    0H\n         CLC   J1DHLD(4),=C'WRAP'        ;IS WRAP HE WANTS ??\n         BNE   CKUNSOL                   ;NO, MAYBE UNSOLICITTED\n         MVC   J2DMSS(30),=CL30'OK'\n         NI    J1TFLG,255-J1TAUTO        ;IF SO TURN ON AUTO WRAP\n         B     P1CMPOK                   ;TELL HIM O.K.\nCKUNSOL  CLC   J1DHLD(4),=C'UNSO'        ;DOES THIS GUY WANT UNSOLICIT\n         BNE   CKNOUN                    ;NO, MAYBE HE'S RESETTING UNSO\n         TM    J1TFLG,J1TAUTO\n         BZ    UNSOLOK\n         MVC   J2DMSS(30),=CL30'UNSOL INVALID WITH NOWRAP'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nUNSOLOK  OI    J1TFLG,J1TUNSOL           ;IF HE DOES SET UNSOL FLAG\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;LETS TELL HIM O.K.\nCKNOUN   DS    0H\n         CLC   J1DHLD(5),=C'NOUNS'       ;IS IT NOUNSOL HE WANTS ??\n         BNE   P1PLPRT                   ;NO, MUST BE $ COMMAND\n         NI    J1TFLG,255-J1TUNSOL       ;IF SO TURN OFF UNSOL\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMPOK                   ;TELL HIM O.K.\n**             FIND PRINTERS DYNAMIC AREA\n*\nP1PLPRT  DS    0H\n         MVC   J2DMSS(30),=CL30'NOT A VALID PRINTER ID'\n         LA    R4,J1DHLD+2               ;BUMP PASSED  COMMAND\nP1PLOOP  CLI   0(R4),C','                ;IS IT COMMA(END OF STRING) ?\n         BE    P1FPLOOP                  ;YEH, FIND PRINTER NAME.\n         CLI   0(R4),C' '                ;IS IT BLANK(END OF STRING) ?\n         BE    P1FPLOOP                  ;YEH, FIND PRINTER NAME.\n         LA    R4,1(R4)                  ;BUMP IT UP 1\n         B     P1PLOOP                   ;GO BACK AND FIND END\nP1FPLOOP DS    0H\n         LR    R5,R4                     ;DUP R5 TO R4\n         LA    R1,J1DHLD+2               ;BUMP PASSED $X CMD\n         SR    R5,R1                     ;GET LENGTH OF PRINTER NAME\n         SH    R5,=H'1'                  ;MINUS 1 FOR LENGTH\n         CLC   0(4,R9),=C'PEND'          ;IS THIS END OF TABLE\n         BE    P1CMEND                   ;YES. WE DONT OWN THIS PRINTER\n         CLC   J1DHLD+2(2),=C'U '        ;IS THIS GLOBAL REQUEST\n         BE    P1FPSET                   ;YEH, DONT WORRY WHO IT IT\n         CLC   J1DHLD+2(2),=C'U,'        ;IS THIS GLOBAL REQUEST\n         BE    P1FPSET                   ;YEH, DON'T WORRY WHO IT IS\n         NI    J1TFLG,255-J1TGLBF        ;SET GLOBAL OFF FOR ONE PRTR\n         EX    R5,J2SPCHK                ;CHECK PRINTER NAME\n         BE    P1FPSET                   ;THIS IS OUR BOY,GO FOR IT\nP1PALOOP DS    0H\n         LA    R9,12(R9)                 ;NOT HIM GET NEXT ENTRY\n         B     P1FPLOOP                  ;GO CHECK AGAIN\nP1FPSET  DS    0H\n         L     R7,8(R9)                  ;LOAD UP DYNAMIC AREA ADDRESS\n*\n**             DISP (DISPLAY PRINTER ATTRIBUTES)\n*\nP1CM$D   DS    0H\n         CLC   =C'$D',J1DHLD             ;DISPLAY ??\n         BNE   P1CM$C                    ;NO-LOOK FOR KEYWORDS\nP1WDST   LR    R3,R4                     ;DUP R4 TO R3\n         B     P1CMOK                    ;SAY O.K. FRIEND\n*\n**             $C    (CANCEL PRINT )\n*\nP1CM$C   CLC   =CL2'$C',J1DHLD           ;FLUSH CURRENT D.S. ??\n         BNE   P1CM$E                    ;NO - TRY RESTART\nFLUSHOK  OI    J1DFLAG2,J1DFLUSH         ;YES, SET RESTART FLAG\n         NI    J1DFLAG1,255-J1DKEEP      ;TURN OFF KEEP FLAG\n         LR    R3,R4                     ;POINT TO USERID (IF ANY)\n         B     P1CMOK ;TELL HIM O.K.\n*\n**             $E    (RESTART PRINT )\n*\nP1CM$E   CLC   =CL2'$E',J1DHLD           ;RESTART CURRENT D.S.\n         BNE   P1CM$P                    ;NO - TRY PRINTER PURGE\n         OI    J1DFLAG2,J1DFLUSH         ;SET RESTART FLAG\n         OI    J1DFLAG1,J1DKEEP          ;SET D.S. KEEP FLAG\n         LR    R3,R4                     ;POINT TO USERID (IF ANY)\n         B     P1CMOK                    ;TELL OPER O.K.\n*\n**             PURGE AFTER CURRENT DATA-SET\n*\nP1CM$P   DS    0H\n         CLC   =CL2'$P',J1DHLD           ;PURGE PRINTER ??\n         BNE   P1CM$S                    ;NO TRY START\n         LR    R3,R4                     ;DUP REG 4 TO REG 3\n         OI    J1DFLAG2,J1DPURGE         ;TURN ON PURGE FLAG\n         CLC   J1DHSTAT,=C'ACTIV'        ;CHECK CURRENT PRINTER STATUS\n         BE    P1CMACT\n         CLC   J1DHSTAT,=C'RETRYING'     ;AND MAKE ADJUSTMENTS\n         BNE   P1CKINA\nP1CMACT  MVC   J1DHSTAT,=CL10'DRAINING'  ;AS REQUIRED\n         B     P1CMOK\nP1CKINA  MVC   J1DHSTAT,=CL10'DRAINED'\n         B     P1CMOK                    ;THEN TELL OPER O.K.\n*\n**             START UP AFTER PAUSE\n*\nP1CM$S   DS    0H\n         CLC   =CL2'$S',J1DHLD           ;PRINTER START\n         BNE   P1CM$T                    ;NO SEE IF MORE KEYWORDS\n         LR    R3,R4                     ;DUP REG 4 TO REG 3 AGAIN\n         NI    J1DFLAG2,255-J1DPURGE     ;TURN OFF PURGE FLAG\n         NI    J1DFLAG1,255-J1DRTLM      ;TURN OFF RETRY LIMIT FLAG\n         CLC   J1DHSTAT(5),=C'ACTIV'     ;SEE IF ALREADY ACTIVE\n         BE    P1CMOK                    ;YES, JUST SAY O.K.\n         CLC   J1DHSTAT(8),=C'DRAINING'  ;IF ITS DRAINING\n         BNE   *+14\n         MVC   J1DHSTAT,=CL10'ACTIVE'    ;MAKE IT ACTIVE\n         B     P1CMOK                    ;O.K.\n         MVC   J1DHSTAT,=CL10'INACTIVE'  ;IF ITS INACTIVE LEAVE IT\n         B     P1CMOK                    ;THEN SAY O.K.\n*\n**             SET PRINTER ATTRIBUTES\n*\nP1CM$T   DS    0H\n         CLC   =CL2'$T',J1DHLD           ;SET PRINTER ATTRIBUTES CMD ??\n         BNE   P1CMINVC                  ;NO-SORRY WE HAVE NO MORE CMDS\n         LR    R3,R4                     ;DUP THAT 4 TO 3 AGAIN\n*\n**             SCAN FOR KEYWORDS\n*\nP1CMKEYW DS    0H\n         LA    R14,P1CMFMXT              ;SET RETURN ADDRESS\n**********************************************************************\n*                                                                    *\n**             PARSE DOWN STARTUP PARMS OR MODIFY KEYWORDS           *\n*                                                                    *\n**********************************************************************\nP1CMFMSU DS    0H\n         ST    R14,P1DFMRET              ;SAVE RETURN ADDR\nP1CMTYP  DS    0H\n         CLI   0(R3),C','                ;LOOK FOR KEYWORDS\n         BNE   *+8                       ;\"\n         LA    R3,1(R3)                  ;BUMP PAST COMMA\n         CLC   0(2,R3),=C'C='            ;CLASS CHANGE ??\n         BE    P1CMCLAS                  ;YEH TAKE CARE OF IT\n         CLC   0(3,R3),=C'LU='           ;LUNAME CHANGE ??\n         BE    P1CMLUID                  ;YEH, TAKE CARE OF THAT\n         CLC   0(5,R3),=C'MLIN='         ;MAX LINES CHANGE ??\n         BE    P1CMLNE                   ;TAKE CARE OF THAT ONE\n         CLC   0(4,R3),=C'SCS='          ;SCS Y/N ??\n         BE    P1CMSCSO                  ;WAT'ER YA WAITIN FOR, DO IT\n         CLC   0(5,R3),=C'LGMD='         ;SET LOGMODE\n         BE    P1CMLGMD                  ;DO THAT TOO.\n         CLC   0(2,R3),=C'R='            ;JES2 DESTID CHANGE ??\n         BE    P1CMDEST                  ;O.K. I'LL DO IT\n         CLC   0(2,R3),=C'F='            ;FORM NUMBER CHANGE ??\n         BE    P1CMFRM                   ;GOD I'M GETTING SICK OF THIS\n         CLC   0(2,R3),=C'S='            ;YOU WANT SEPERATOR PAGE ??\n         BE    P1CMSEP                   ;I'LL GET THAT RIGHT AWAY\n         CLC   0(4,R3),=C'LPP='          ;NOW HE WANTS LINES PER PAGE\n         BE    P1CMLEN                   ;THATS A JOB BUT I'LL GET IT\n         B     P1CMFMER                  ;AH-HA, SEE THERE ARE NO MORE\n*\n**       PROCESS FORMS CHANGE\n*\nP1CMFRM  DS    0H\n         LA    R0,4                      ;MAX LENGTH FOR FORM\n         LA    R3,2(R3)                  ;BUMP PAST F=\n         LA    R15,J1DHFORM              ;GET HOLD AREA\n         MVC   0(4,R15),=4CL1' ' ;CLEAR IT\n         BAL   R14,P1CMSCN               ;GO EDIT DATA\n         B     P1CMCKMR                  ;MUST BE O.K.\n*\n**       PROCESS SCS OPTION CHANGE\n*\nP1CMSCSO DS    0H                        ;SCS OPTION\n         LA    R0,1                      ;MAX 1 CHAR\n         LA    R3,4(R3)                  ;BUMP PAST SCS=\n         LA    R15,J1DHSCS               ;GET HOLD AREA\n         BAL   R14,P1CMSCN               ;EDIT DATA\n         B     P1CMCKMR                  ;ASSUME GOOD\n*\n**       PROCESS LUID CHANGE\n*\nP1CMLUID DS    0H\n         LA    R0,8                      ;8 CHAR MAX\n         LA    R3,3(R3)                  ;BUMP PAST LU=\n         LA    R15,J1DLUID               ;GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '         ;CLEAR IT\n         BAL   R14,P1CMSCN               ;EDIT DATA\n         LA    R2,J1DBFCL                ;GET NORMAL MESSAGE\n         BAL   R5,PUTLU                  ;PUT IT IN MESSAGE\n         LA    R2,J1DFLSMS               ;GET FLUSH MESSAGE\n         BAL   R5,PUTLU                  ;PUT IT IN MESSAGE\n         B     P1CMCKMR                  ;ASSUME DATA GOOD\nPUTLU    DS    0H\n         CLC   0(1,R2),J1DPRN            ;END OF PRINT ??\n         BE    *+12\n         LA    R2,1(R2)\n         B     PUTLU\n         MVI   0(R2),C'('\n         MVC   1(8,R2),J1DLUID\n         MVI   9(R2),C')'\n         BR    R5\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMLGMD DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,5(R3)            BUMP PAST LGMD=\n         LA    R15,J1DLGMD         GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS CLASS CHANGE\n*\nP1CMCLAS DS    0H                  CLASS CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST C=\n         LA    R15,J1DHCLAS        GET HOLD AREA\n         MVC   J1DHCLAS,=8CL1' '\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS DESTINATION\n*\nP1CMDEST DS    0H                  DEST CHANGE\n         LA    R0,8                8 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST R=\n         LA    R15,J1DHDEST        GET HOLD AREA\n         MVC   0(8,R15),=8CL1' '    CLEAR AREA\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE SEPERATOR OPTION\n*\nP1CMSEP  DS    0H                  SEP  CHANGE\n         LA    R0,1                1 CHAR MAX\n         LA    R3,2(R3)            BUMP PAST S=\n         LA    R15,J1DSEP          GET SEP SWITCH\n         MVI   J1DSEP,C'Y'         SET IT ON AS A DEFAULT\n         BAL   R14,P1CMSCN         EDIT DATA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE LENGTH CHANGE\n*\nP1CMLEN  DS    0H                  LEN  CHANGE\n         LA    R0,3\n         LA    R3,4(R3)            RESTORE PASSED \"LPP=\"\n         LA    R1,J1DLEN           GET ANSWER LOC.\n*\n**       COMMON CODE FOR L=NNN,W=NNN\n*\nP1CMLENT DS    0H                  SCAN FOR NUMERIC KEYWORD\n         LR    R6,R0               DUP MAX LEN\n         LA    R15,P1DWORK         GET WORK AREA\n         XC    P1DWORK,P1DWORK     CLEAR IT\n         BAL   R14,P1CMSCN         EDIT DATA\n         SR    R0,R6               (RESIDUAL-MAX)=NEG. DIGITS\n         BZ    P1CMCKMR            NONE-USE CURRENT\n         LPR   R0,R0               DIGITS OF DATA\n         XR    R15,R15             CLEAR WORK\nP1CMLNXT DS    0H                  CONVERT VALUE TO BINARY\n         IC    R14,P1DWORK         PICK A DIGIT\n         N     R14,=F'15'          GET NUMERIC PART\n         MH    R15,=H'10'          SHIFT CURRENT VALUE A DIGIT\n         AR    R15,R14             ADD NEW DIGIT\n         MVC   P1DWORK(7),P1DWORK+1 SHIFT DIGITS DOWN\n         BCT   R0,P1CMLNXT         LOOP\n         ST    R15,0(R1)           SAVE NEW VALUE IN ANSWER AREA\n         B     P1CMCKMR            ASSUME DATA GOOD\n*\n**       PROCESS PAGE WIDTH CHANGE\n*\nP1CMLNE  DS    0H                  WID  CHANGE\n         LA    R0,4\n         LA    R3,5(R3)            RESTORE PASSED \"MLIN=\"\n         LA    R1,J1DMLNE          GET ANSWER LOC.\n         B     P1CMLENT            GO TO COMMON CODE\n*\n**       LOOK FOR ANOTHER KEYWORD\n*\nP1CMCKMR DS    0H                  SEE IF ANOTHER KEYWORD\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMFMOK            YES-GIVE OK P1G\n         B     P1CMTYP             NO-CLASSIFY\n*\n**       MOVE KEYWORD DATA\n*\nP1CMSCN  DS    0H                  EDIT\n         CLI   0(R3),C' '          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         CLI   0(R3),C','          END OF STRING\n         BE    P1CMSCND            YES-RETURN\n         MVC   0(1,R15),0(R3)      MOVE DATA INTO WORK\n         LA    R3,1(R3)            BUMP\n         LA    R15,1(R15)          \"\n         BCT   R0,P1CMSCN          LOOP\nP1CMSCND DS    0H                  RETURN\n         BR    R14                 \"\n**********************************************************************\n*\n**             PARSE RETURN\n*\nP1CMFMOK DS    0H                  PARSE OK\n         L     R14,P1DFMRET        GET RETURN ADDR\n         B     0(R14)              +0 = OK\nP1CMFMER DS    0H                  BAD PARSE\n         L     R14,P1DFMRET        GET RETURN\n         B     4(R14)              +4 = BAD\n**********************************************************************\n*\n**              RETURN FROM PARSE  OF MODIFY TEXT\n*\nP1CMFMXT DS    0H                  BRANCH TABLE\n         B     P1CMOK              +0=OK\n         B     P1CMINVT            +4=ERR\nP1TSEND  DS    0H\n         C     R5,J1DCOLS\n         BNL   P1CSETMR\n         NI    J1TFLG,255-J1TMRMSG\n         B     P1CSETNM\nP1CSETMR DS    0H\n         OI    J1TFLG,J1TMRMSG      MORE MESSAGE\n         LR    R15,R6                NEW ADDRESS\n         A     R15,J1DCOLS           NEW ADDRESS\n         LR    R14,R5\n         S     R14,J1DCOLM1\n         ST    R15,J1TNEWAD\n         ST    R14,J1TNEWLN\n         L     R5,J1DCOLM1\nP1CSETNM L     R14,J1TADDSV\n         LTR   R14,R14\n         BZ    TOP\n         CLC   6(4,R14),=C'TEND'\n         BE    TOP\n         CLC   8(4,R14),=C'TEND'\n         BNE   NOBUMP\n         MVI   J1DAREA2,C' '\n         MVC   J1DAREA2+(78),J1DAREA2\n         B     NOBUMP\nTOP      DS    0H\n         MVI   J1DAREA2,C'-'\n         MVC   J1DAREA2+1(78),J1DAREA2\n         L     R14,J1DADTBL\n         ST    R14,J1TADDSV\n         TM    J1TFLG,J1TAUTO\n         BZ    NOBUMP\n         OI    J1TFLG,J1TTOP\n         L     R2,J1TRPL\n         XR    R15,R15\n         SEND  RPL=(R2),OPTCD=(SYN,SPEC,CA),AREA=MOREDATA,RECLEN=25,   X\n               CHAIN=ONLY,STYPE=REQ,CHNGDIR=CMD,BRACKET=(NBB,NEB)\n         LTR   R15,R15\n         BNZ   J1FATALF\n         ST    R3,ST3\n         ST    R4,ST4\n         ST    R5,ST5\n         ST    R6,ST6\n         ST    R7,ST7\n         ST    R9,ST9\n         ST    R10,ST10\n         B     JRPRTRN\nSENDBACK SEND  RPL=(R2),OPTCD=(SYN,SPEC,CS),AREA=CLERDATA,RECLEN=25,   X\n               CHAIN=ONLY,STYPE=REQ,BRACKET=(NBB,NEB) CHNGDIR=CMD\n         LTR   R15,R15\n         BNZ   J1FATALF\n         NI    J1TFLG,255-J1TTOP\n         L     R14,J1TADDSV\nNOBUMP   MVC   J1DADD1(2),0(R14)\n         MVC   J1DADD2(2),2(R14)\n         MVI   J1DAREA1,C' '\n         MVC   J1DAREA1+1(79),J1DAREA1\n         EX    R5,PRTMVC\n         LA    R14,2(R14)\n         ST    R14,J1TADDSV\n         LA    R5,J1DOUTBF\n         LA    R6,J1DOUTLN\n         L     R2,J1TRPL\n         SEND  RPL=(R2),RECLEN=(R6),AREA=(R5),CHAIN=ONLY,              X\n               OPTCD=(SYN,SPEC),STYPE=REQ,BRACKET=(NBB,NEB)\n         LTR   R15,R15\n         BNZ   J1FATALF\n         MVC   J1DOUTBF(1),=X'F1'\n         TM    J1TFLG,J1TMRMSG     MORE DATA\n         BZR   R10\n         L     R6,J1TNEWAD\n         L     R5,J1TNEWLN\n         B     P1TSEND\n**********************************************************************\n*\n**             GIVE OPER STATUS TO MODIFY COMMAND\n*\nP1CMOK   DS    0H                  GIVE OPER OK P1G\n         MVC   J2DMSS(30),=CL30'OK'\n         B     P1CMWTO             ISSUE WTO\nP1CMINVC DS    0H                  GIVE INVALID P1G\n         MVC   J2DMSS(30),=CL30'INVALID COMMAND'\n         B     P1CMPOK\nP1CMINVT DS    0H                  GIVE INVALID P1G\n         MVC   J2DMSS(30),=CL30'INVALID COMMAND TEXT'\n         B     P1CMPOK\nP1CMWTO  DS    0H\n         L     R0,J1DLEN\n         CVD   R0,P1DWORK\n         UNPK  J1DLEN2,P1DWORK+6(2)\n         OI    J1DLEN2+L'J1DLEN2-1,C'0'\n         L     R0,J1DMLNE\n         CVD   R0,P1DWORK\n         UNPK  J1DMLNE2(4),P1DWORK+5(3)\n         OI    J1DMLNE2+L'J1DMLNE2-1,C'0'\n         MVC   J1DBYWHO(8),J1TLUID TELL WHO CANCELLED OUTPUT\n         MVI   J1DBYWHO+7,C' '\n         LA    R5,J1DTPUTL\n         LA    R6,J1DTPUT\n         BAL   R10,P1TSEND\nP1CMEND  DS    0H\n         CLC   0(4,R9),=C'PEND'\n         BE    P1CMPOK\n         TM    J1TFLG,J1TGLBF\n         BO    P1PALOOP\nP1CMPOK  DS    0H\n         LA    R5,L'J2SOK-1\n         LA    R6,J2SOK\n         L     R2,J1TRPL\n         MODCB AM=VTAM,RPL=(R2),OPTCD=(CA),CHNGDIR=CMD\n         BAL   R10,P1TSEND\n         B     JRPRTRN\nJ2SPCHK  CLC   0(0,R9),J1DHLD+2  RDW+$T\nPRTMVC   MVC   J1DAREA1,0(R6)\nP1CMDMV  MVC   J1DHLD(0),0(R10)\nJ1CMWRP  DS    0H\nJ1CMLGF  DS    0H\nJRPRTRN  DS    0H\n         NI    J1TFLG,255-J1TBUSY        ;TURN ON THE BUSY FLAG\n         OI    J1TFLG,J1TRECD            ;TURN ON RECEIVE DIR.\n         DROP  R7\n         DROP  R11\n         JRPRTRN\nJ1FATALF DS    0H\n         ABEND 121\nJ2SYN    EQU   *    DUMMY LABEL\nP1GEOD   EQU   *    DUMMY LABEL\nJ1TOWN   EQU   X'02'\nTRANSTBL DS    0CL256\nTRANS    DC    XL24'000102030405060708090A0B0C0D0E0F1011121314151617'\n         DC    XL24'18191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL24'404142434445464748494A4B4C4D4E4F5051525354555657'\n         DC    XL24'58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F'\n         DC    XL24'707172737475767778797A7B7C7D7E7F80C1C2C3C4C5C6C7'\n         DC    XL24'C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL24'E0E1E2E3E4E5E6E7E8E9AAABACADAEAFB0B1B2B3B4B5B6B7'\n         DC    XL24'B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL24'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7'\n         DC    XL24'E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9000000000000'\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nJ2SPRN   DC    C' '\nJ2SOK    DC    CL45'JRP100I '\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nJ1DPRN   DC    C' '\nJ2DOK    DC    CL45'JRP100I '\nJ2DMSS   EQU   J2SOK+8,30\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DTBL   DS    F                   RETURN SAVE AREA\nP1DWRET  DS    F                   RETURN SAVE AREA\nP1DFMRET DS    F                   RETURN SAVE AREA\nP1DWORK  DS    D                   WORK FIELD\nP1DSPALL DS    C\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPDMAC\n         JRPTMAC\n         JRPREGS\n         ISTDNIB\n         IFGRPL AM=VTAM\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP122": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\xc8\\x00\\xc8\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "JRP"}, "text": "JRP122 TITLE 'JRP USERID PASSWORD PROCESSING'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP122                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  UID AND PASSWORD PROCESSING.        *\n*                328X PRINTER\"S                                       *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES UID AND PASSWORD FIELDS                       *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPTMAC, ACF/VTAM                    *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP122     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE =                                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP122 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP120 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R8 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES =                                           *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = TWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP122 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         L     R11,0(R1)\n         USING J1TWA,R11                  TERMINAL DSECT\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP1WINIT  DS    0H\n         LA    R0,P1DWA          START OF DYNAMIC AREA\n         LA    R1,(P1DCLRE-P1DWA) LENGTH OF DYNAMIC AREA\n         LA    R14,P1SWA           START OF STATIC DATA\n         LA    R15,P1SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\nP1PROCSS DS    0H\n         CLI   J1DTXT,C' '          USER ID\n         BE    P1INVUSR\n         MVC   J1DUSER(7),J1DTXT\n         CLI   J1DTXT+10,C' '\n         BE    P1INVPSS\n         MVC   J1DPSWD(5),J1DTXT+10\n*\n****PROCESS LOGON TEXT\n*\n         MVC   J1TPWD(5),J1DPSWD\n         MVC   J1TUID(7),J1DUSER\n         LINK  EP=JRP123,PARAM=((R11)),MF=(E,JTDLINK)\n         B     *+4(R15)\n         B     P1CMPOK               ALL O.K.            RC=0\n         B     P1NWPSS               PASSWORD EXPIRED    RC=4\n         B     P1INVPSS              INVALID PASSWORD    RC=8\n         B     P1INVUSR              INVALID USERID      RC=12\n         B     P1NOAUTH              USER NOT AUTHORIZED RC=16\n         B     P1UNNOWN              CONDITION UNKNOWN   RC=20\nP1UNNOWN EQU   *\nP1CMPOK  DS    0H\n         MVI   J1DTXT,C' '\n         MVC   J1DTXT+1(79),J1DTXT\n         OI    J1TFLG,J1TLOGN\n         LA    R5,J1DOUTBF\n         LA    R6,J1DOUTLN\n         B     P1TNOERR\nP1INVPSS DS    0H\n         LA    R5,J1TRQBF\n         LA    R6,J1TRQBFL\n         MVC   J1TERRLN(80),JTPWERR\n         B     P1TLGERR\nP1NWPSS  DS    0H\n         LA    R5,J1TRQBF\n         LA    R6,J1TRQBFL\n         MVC   J1TERRLN(80),JTPWERR1\n         B     P1TLGERR\nP1NOAUTH DS    0H\n         LA    R5,J1TRQBF\n         LA    R6,J1TRQBFL\n         MVC   J1TERRLN(80),JTUNERR\n         B     P1TLGERR\nP1INVUSR DS    0H\n         LA    R5,J1TRQBF\n         LA    R6,J1TRQBFL\n         MVC   J1TERRLN(80),JTIDERR\nP1TNOERR DS    0H\nP1TLGERR L     R2,J1TRPL\n         SEND  RPL=(R2),RECLEN=(R6),AREA=(R5),CHAIN=ONLY,              X\n               OPTCD=(SYN,SPEC,CA),STYPE=REQ,BRACKET=(NEB,NBB),        X\n               CHNGDIR=(CMD)\n         LTR   R15,R15\n         BNZ   J1FATALF\nJRPRTRN  DS    0H\n         DROP  R11\n         JRPRTRN\nJ1FATALF DS    0H\n         ABEND 121\nJ2SYN    EQU   *    DUMMY LABEL\nP1GEOD   EQU   *    DUMMY LABEL\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nJSIDERR  DC    CL80'JRP001T - INVALID OR BLANK USERID'\nJSPWERR  DC    CL80'JRP002T - INVALID OR BLANK PASSWORD'\nJSIDERR1 DC    CL80'JRP003T - USER ID DOES NOT EXIST '\nJSPWERR1 DC    CL80'JRP004T - PASSWORD HAS EXPIRED'\nJSUNERR  DC    CL80'JRP005T - CONDITION UKNOWN..TERMINATING'\nJTSLINK  LINK  EP=JRP123,SF=L\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nJTIDERR  DC    CL80'JRP001T - INVALID OR BLANK USERID'\nJTPWERR  DC    CL80'JRP002T - INVALID OR BLANK PASSWORD'\nJTIDERR1 DC    CL80'JRP003T - USER ID DOES NOT EXIST '\nJTPWERR1 DC    CL80'JRP004T - PASSWORD HAS EXPIRED'\nJTUNERR  DC    CL80'JRP005T - CONDITION UKNOWN..TERMINATING'\nJTDLINK  LINK  EP=JRP123,SF=L\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DWORK  DS    D                   WORK FIELD\nP1DCLRE  EQU   *\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPTMAC\n         JRPREGS\n         ISTDNIB\n         IFGRPL AM=VTAM\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP123": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00m\\x00m\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "JRP"}, "text": "JRP123 TITLE 'JRP SECURITY EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP123                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  SECURITY EXIT FOR \"JRP\"             *\n*                                                                     *\n*             AUTHOR =                                                *\n*                                                                     *\n*             COPYRIGHT =  1/8/84                                     *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS = ENTRY AND EXIT ONLY. TO BE USER CODED          *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PROVIDES EXIT FOR SECURITY PACKAGE(ACF2, RACF)       *\n*                INTERFACE BY USERID AND PASSWORD INFORMATION.        *\n*                                                                     *\n*                OPERATION =                                          *\n*                   INTERFACES WITH SECURITY PACKAGE FOR JRP          *\n*                   CONTROL TERMINAL OPERATOR.                        *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = MUST BE REENTRANT AND REUSABLE.      *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 11      = TERMINAL DYNAMIC AREA        *\n*                                        POINTER USED WITH TERMINAL   *\n*                                        DYNAMIC DSECT INCLUDES       *\n*                                                                     *\n*                    REGISTERS 12      = BASE REGISTER                *\n*                                                                     *\n*                    REGISTERS 13      = SAVE AREA AND GETMAINED DSECT*\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE =                                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                                                                     *\n*                                                                     *\n*             ENTRY POINTS = JRP123 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP122 AS A SUBROUTINE                       *\n*                                                                     *\n*                                                                     *\n*             OUTPUT = ON EXIT R15 SHOULD BE SET TO :                 *\n*                      0 = USERID AND PASSWORD O.K.                   *\n*                      4 = PASSWORD EXPIRED                           *\n*                      8 = INVALID PASSWORD                           *\n*                     12 = INVALID USERID                             *\n*                     16 = USER NOT AUTHORIZED                        *\n*                     20 = UNKNOWN CONDITION.                         *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES =                                           *\n*                                                                     *\n*                DATA AREAS =                                         *\n*                                                                     *\n*                CONTROL BLOCKS = CTCB(CONTROL TERMINAL CONTROL BLOCK)*\n*                                                                     *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             MACROS =                                                *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                                                                     *\n*             ABEND CODES =                                           *\n*                                                                     *\n***********************************************************************\nJRP123 CSECT\n         JRPSAVE REG=12,ID=*,LV=SAVESIZE ;GET SAVE AREA\n         USING TERMSAVE,R13              ;MAKE ADDRESSABLE\n         L     R11,0(R1)                 ;GET CTCB AREA\n         USING J1TWA,R11                 ;MAKE ADDRESSABLE\n***********************************************************************\n* SECURITY INTERFACE CODE GOES HERE....MUST BE REENTRANT REUSABLE\n* DATA AREAS OF CONCERN TO THIS EXIT ARE LISTED BELOW AND DEFINED IN\n* CTCB DSECT.\n*\n*            J1TLUID  8 BYTE LUID FIELD\n*            J1TUSER  7 BYTE USERID FIELD\n*            J1DPSWD  8 BYTE PASSWORD FIELD\n***********************************************************************\n         XR    R15,R15                   ;ZERO REG 15\n         XC    J1DPSWD(8),J1DPSWD        ;CLEAR PASSWORD\nJRPRTRN  DS    0H\n         JRPRTRN                         ;RETURN TO JRP122\n*\n** JRP123 SAVE AREA DSECT POINTED TO BY R13\n*\nTERMSAVE DSECT\n         DS    9D                       ;O/S SAVE\nSAVESIZE EQU   *-TERMSAVE               ;SIZE OF DYNAMIC AREA\n         JRPTMAC                        ;TERMINAL DYNAMIC DSECT\n         JRPREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP200": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x89\\x00_\\x00\\x99\\x17?\\x08\\x13\\x01\\xa3\\x01\\x9f\\x00\\x07\\xc1\\xc7\\xc3\\xd6@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1999-06-22T08:13:00", "lines": 419, "newlines": 415, "modlines": 7, "user": "AGCO"}, "text": "JRP200 TITLE 'JES2 SSOB SETUP SUPERVISOR'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP200                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  SSOB SETUP FOR SUBSYSTEM REQUEST.   *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                BASED ON INFORMATION IN EACH PRINTERS DYNAMIC        *\n*                AREA SETS UP SSOB FOR REQUEST TO SUBSYSTEM,          *\n*                IF OUTPUT FOR HIM EXISTS CALLS JRP220 TO,            *\n*                DYNAMICALLY ALLOCATE SPOOL DATA-SETAND ATTACHES A    *\n*                PRINTER SUBTASK. ON PRINT COMPLETION FROM EACH       *\n*                PRINTER SUBTASK, DEALLOCATES LINKS TO JRP220         *\n*                FOR DYNAMIC DEALLOCATION WITH (KEEP) OR (DELETE)     *\n*                DISPOSITION DEPENDING UPON WHICH FLAGS ARE SET.      *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JES2 MACROS IN SYS1.HASPSRC,         *\n*                            JRPDMAC/JRPSMAC MUST NOT CHANGE\n*                              WITHOUT REASSEMBLY.                    *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, SUPERVISOR STATE(AC=1) *\n*                                                                     *\n*             ENTRY POINTS = JRP200 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP100 AS A SUBTASK                          *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = JRP220,JRP210,JRP300(SUBTASK)             *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P2DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,WTO,ABEND,STIMER,ATTACH,  *\n*                      MODESET,LINK,CALL,JRPDMAC                      *\n*                                                                     *\n*             CHANGE ACTIVITY                                         *\n* 21JUN99 DHC USE 31-BIT ADDRESSING FOR SSIB ACCESS              *DHC**\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. GENERAL LIFE INS. CO.                          *\n*                                                                     *\n*             ABEND CODES = U200                                      *\n*                                                                     *\n***********************************************************************\nJRP200 CSECT\nJRP200 AMODE   31                                                *DHC*\nJRP200 RMODE   24                                                *DHC*\n         JRPSAVE REG=12,ID=*,LV=P2DSASIZ\n         USING P2DSA,R13\n         LM    R9,R11,0(R1)                 GET PARM  (FLAG,PWT,ACB)\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP2WINIT  DS    0H\n         LA    R0,P2DWA                     START OF DYNAMIC AREA\n         LA    R1,(P2DCLRE-P2DWA)           LENGTH OF DYNAMIC AREA\n         LA    R14,P2SWA                    START OF STATIC DATA\n         LA    R15,P2SMDL                   LENGTH OF MODEL DATA\n         MVCL  R0,R14                       MOVE W/ZERO, RENT,REUS\n         ST    R9,P2DJFLG                   SAVE ADDR OF JFLAG\n         ST    R10,P2TADDR                  SAVE ADDR OF PWT\n         ST    R11,P2DACB                   STORE ACB ADDRESS\n         L     R8,P2TADDR                   GET BACK ADDR OF PWT\n         USING J1DWA,R5                     ADDRESSABILITY TO DSECT\n         B     P2CP2CN1                     BYPASS WAIT CODE\n*\n**       SCAN PRINTER ENTRIES FOR OUTPUT ELIGIBILITY\n*\nP2JESWT  DS    0H\n         L     R8,P2TADDR                   GET BEGINNING TABLE ADDR.\n         STIMER WAIT,BINTVL==F'1000'        WAIT 10 SECS BETWEEN SCANS.\n         B     P2CP2CN1                     WE NEED FIRST ENTRY.\nP2CP2CAN DS    0H\n         LA    R8,12(R8)                    GET NEXT PRINTER ENTRY.\nP2CP2CN1 EQU   *\n         L     R1,P2DJFLG                   CHECK BOSSES COMM FLAG.\n         TM    0(R1),J1DNCLSF               CLOSE  ???\n         BO    P2CMJCLS                     YES. NORMAL SHUTDOWN.\n         TM    0(R1),J1DICLSF               ICLOSE  ???\n         BO    P2CMJCLI                     YES. QUICK SHUTDOWN\n         CLC   0(4,R8),=C'PEND'             END OF TABLE  ???\n         BE    P2JESWT                      YEH. TAKE A BREAK\n         L     R5,8(R8)                     USE R5 FOR DYNAMIC ADDR.\n         CLC   J1DJECB(4),ZEROS             IS HE BUSY ???\n         BE    P2CKHLT                      NO\n         TM    J1DJECB,X'40'                IS HE POSTED\n         BNO   P2CP2CAN                     NO. CHECK OTHER PRINTERS\n         BAL   R10,P2WDTCH                  GO DETATCH AND UNALLOCATE\n         B     P2WDRET(R15)                 SET UP RETURN FROM UNALLOC\nP2WDRET  B     P2CKHLT                      RC=0  OK. CHECK FOR HALT.\n         NI    J1DFLAG1,255-J1DALC          TURN OFF ALLOCATE FLAG\n         B     P2CP2CAN                     RC=4  BAD. DONT WORRY -\n*                                           JUST CHECK ANOTHER PRINTER.\nP2CKHLT  EQU   *\n         NI    J1DFLAG1,255-J1DALC          TURN OFF ALLOCATE FLAG.\n         TM    J1DFLAG1,J1DRTLM             REACH RETRYLM OR ABEND ??\n         BO    P2CP2CAN                     YES. CHECK ANOTHER PRINTER\nP2CKPURG EQU   *\n         TM    J1DFLAG2,J1DPURGE            IS HE DRAINED ???\n         BNO   SD82SSOB                     NO.\n         MVC   J1DHSTAT(10),=CL10'DRAINED'  YES. SET DISPLAY\n         B     P2CP2CAN                     GO CHECK ANOTHER PRINTER\n*\n**       SET UP SSOB TO ISSUE IEFSSREQ TO ACCESS A DATA SET\n*\nSD82SSOB EQU   *\n         OI    J1DFLAG2,J1DHDR              SET HEADER ON\n         MVC   J1DHSTAT(10),=CL10'INACTIVE' SET INACT DISPLAY\n         LA    R1,J1DSSOB                   SSOB AREA\n         LA    R7,4(R1)                     BUMP TO ADDRESS STORE\n         USING SSOB,R7                      AD|DRESSABILITY TO SSOB\n         ST    R7,0(R1)                     ADDR OF ADDR OF SSOB IN R1\n         OI    0(R1),X'80'                  LAST IN LIST\n         XC    SSOBEGIN(SSOBHSIZ),SSOBEGIN  CLEAR SSOB HEADER\n         LA    R2,SSOBGN                    INITIALIZE SSOB\n         XC    0(SSSOSIZE,R2),0(R2)         CLEAR SYSOUT EXTENSION\n         MVC   SSOB(WTRSOSIZ),WTRSSOB       INITIALIZE HEADER\n         MVC   SSOBFUNC(2),=AL2(SSOBSOUT)   SYSOUT FUNCTION\n         ST    R2,SSOBINDV                  ADDRESS OF SYSOUT EXTENSION\n         LA    R4,SSSOSIZE                  SYSOUT EXTENSION SIZE\n         STH   R4,0(R2)                     SIZE OF SYSOUT EXTENSION\n         MVI   SSSOUFLG,X'00'               CLEAR SYSOUT FLAG\n         MVC   SSSOPGMN,BLANKS              INITIALIZE WRITER TO BLANKS\n         MVI   SSSOFLG2,X'00'               ASK FOR DSNAME\n         MVI   SSSOFLG1,X'00'               CLEAR SELECTION BYTE\n         OI    SSSOFLG1,SSSODST             DEST IS SELECT CRITERION\n         XC    SSSODSN,SSSODSN              CLEAR SSOB DSN\n*        XC    J1DDSN(44),J1DDSN            CLEAR PRINTER DSN\n         CLI   J1DHCLAS,C' '                CLASS SELECT ??\n         BE    NOCLASS                      NO.\n         OI    SSSOFLG1,SSSOSCLS            YES. SET CLASS SELECT\nNOCLASS  CLI   J1DHFORM,C' '                FORM SELECT ??\n         BE    NOFORM                       NO.\n         OI    SSSOFLG1,SSSOSFRM            SET FORM SELECT FLAG\nNOFORM   MVC   SSSOCLSL(8),J1DHCLAS         MOVE CLASS LIST\n         MVC   SSSOFORM(4),J1DHFORM         MOVE FORM #\n         MVC   SSSODEST(8),J1DHDEST         MOVE DESTINATION\n         BAL   R10,P2WLKREQ                 GO JES REQUEST ROUTINE\n         B     REQEND(R15)                  SET UP RETURN BRANCH\nREQEND   B     P2DATPRT                     RC=0. WORK RETURNED\n         B     P2LKDEL                      RC=4. NO WORK\n         B     P2FATALF                     RC=8. SOMETHING WRONG ABEND\n*\n**       SET UP TO DELETE SSOB CONTROL BLOCK\n*\nP2LKDEL  DS    0H\n         MVI   SSSOFLG2,0                   CLEAR FLAG2\n         OI    SSSOFLG2,SSSOCTRL            SET DELETE BIT\n         BAL   R10,P2WLKREQ                 GO TO JES REQUEST ROUTINE\n         B     DELEND(R15)                  SET UP RETURN BRANCH\nDELEND   B     P2CP2CAN                     RC=0. CONTINUE SCAN\n         B     P2CP2CAN                     RC=4. CONTINUE SCAN\n         B     P2FATALF                     RC=8. SOMETHING WRONG ABEND\n*\n**       SET UP TO ATTACH PRINTER\n*\nP2DATPRT DS    0H\n         CLC   J1DDSN(44),SSSODSN          SAME DSN??(RETRY OR RESTART)\n         BE    P2DHPRTI                    YES. NEED HEADER\n         CLC   SSSOJOBI(3),=C'TSU'         TSO OUTPUT??\n         BE    P2DHPRTI                    YES. NEED HEADER\n         CLC   J1DJOBN(8),SSSOJOBN          SAME JOB NAME\n         BNE   P2DHPRTI                     NO. NEED HEADER\n         CLC   J1DJOBI(8),SSSOJOBI          SAME JOB NUMBER\n         BE    P2DNOHDR                     NO. NEED HEADER\n         CLC   SSSOJOBI(3),=C'JOB'          BLANKS\n         BE    P2DHPRTI                     NO. NEED HEADER\n         CLC   SSSOJOBI(3),=C'STC'          BLANKS\n         BNE   P2DNOHDR                     NO. NEED HEADER\nP2DHPRTI MVC   J1DJOBI(8),SSSOJOBI             SAVE JOB NUMBER\n         MVC   J1DJOBN(8),SSSOJOBN             SAVE JOBNAME\n         B     *+8\nP2DNOHDR NI    J1DFLAG2,255-J1DHDR          YES. NO HEADER\n         MVC   J1DBFNUM(8),J1DJOBI             \"             \"\n         MVC   J1DHJNM(8),J1DJOBI              \"             \"\n         MVC   J1DBEGJ(8),J1DJOBI\n         MVC   J1DBFNME(8),J1DJOBN             \"          \"\n         MVC   J1DHNME(8),J1DJOBN              \"          \"\n         MVC   J1DBEGJN(8),J1DJOBN\n         MVC   J1DDSN(44),SSSODSN               SAVE DSNAME\n         MVI   J1DPRN1,C'('                 CLEAN UP DISPLAY\n         MVI   J1DPRN2,C')'                 \"              \"\n         BAL   R10,P2WALCG                  GO TO ALLOC ROUTINE\n         B     DYNRET(R15)                  SET UP RETURN BRANCH\nDYNRET   B     DYNOK                        RC=0. ALLOC OK\n         B     P2CP2CAN                     RC=4. DONT WORRY KEEP GOING\nDYNOK    OI    J1DFLAG1,J1DALC              SET ALLOCATED FLAG\n         MVC   J1DHSTAT,=CL10'ACTIVE'       ACTIVE FOR DISPLAY\n         MVC   J1DACB,P2DACB                STORE ACB ADDRESS\n         ST    R5,P2DATACH                  DYNAMIC ADDR IN CALL LIST\n         LA    R6,J1DJECB                   GET ECB ADDRESS\n         MVC   1(3,R6),=C'XXX'              SET TO BUSY\n         ATTACH EP=JRP300,SZERO=YES,MF=(E,P2DATACH),ECB=(R6)\n         ST    R1,J1DTCB                    STORE TCB ADDRESS\n*\n**       SAVE PSO ADDRESS\n*\nP2DSVPSO EQU   *\n         L     R7,J1DSSOB                   GET SSOB ADDRESS\n         USING SSOB,R7                      SSOB ADDRESSABILITY\n         ICM   R7,15,SSOBSSIB               SSIB ADDRESS FROM SSOB\n         USING SSIB,R7                      SSIB ADDRESSABILITY\n         MODESET KEY=ZERO                   KEY ZERO FOR CONTROL BLOCKS\n         ICM   R7,15,SSIBSUSE               SJB ADDRESS FROM SSIB\n         USING SJB,R7                       SJB ADDRESSABILITY\n         ICM   R2,15,SJBPSOP                PSO ADDRESS FROM SJB\n         BZ    P2CP2CAN                     NO PSO ADDRESS\n         ST    R2,J1DPSOS                   PSO ADDRESS IN PWE\n         XC    SJBPSOP(4),SJBPSOP           ZERO PSO POINTER IN SJB\n         MODESET KEY=NZERO                  KEY 8\n         DROP  R7                           DROP ADDRESSABILITY\n         B     P2CP2CAN                     CHECK FOR MORE WORK\n*\n**       DETATCH PRINTER SUBTASK\n*\nP2WDTCH  DS    0H\n         STATUS STOP,TCB=J1DTCB             STOP SUBTASK\n         DETACH J1DTCB                      DETATCH SUBTASK\n         CLC   J1DHSTAT+5(4),=C'U300'       DID HE USER ABEND\n         BE    P2WALC                       YES\n         CLC   J1DJECB+1(3),=X'000000'      DID HE SYSTEM ABEND\n         BE    P2WALC                       NO\n         OI    J1DFLAG1,J1DRTLM             SET RETRY LIMIT FLAG\n         OI    J1DFLAG1,J1DKEEP             REQUE THIS DATA-SET\n         MVC   J1DHSTAT(6),=C'ABENDS'       TELL SYSTEM ABEND\n         MVI   J1DJECB+3,X'0C'              MAKE VALID PACKED FIELD\n         UNPK  P2DHOLD(5),J1DJECB+1(3) UNPACK ABEND CODE\n         LA    R14,P2DHOLD                  FROM TRANSLATE\n         LA    R15,4                        TRANSLATE LENGTH\n         LA    R6,P2STBL1 TRANSLATE TABLE\n         EX    R15,P2STR\n         MVC   J1DHSTAT+6(3),P2DHOLD\n         MVI   J1DHSTAT+9,C' '\n         MVC   J1DBEGJ(8),BLANKS             CLEAR JONNUM FOR HEADER\n*\n**       FIND SJB AND PUT PSO FROM PWE BACK IN THERE\n*\nP2WALC   DS    0H\n         MVC   J1DJECB(4),ZEROS\n         ICM   R7,15,J1DSSOB                SSOB ADDRESS FROM PWA\n         BZ    P2WALCG                      IF ZEROS THEN UNALOC\n         USING SSOB,R7                      ADDRESS IT\n         ICM   R7,15,SSOBSSIB               SSIB ADDRESS FROM SSOB\n         USING SSIB,R7                      ADDRESS IT\n         MODESET KEY=ZERO                   KEY 0,JES CONTROL BLOCKS\n         ICM   R7,15,SSIBSUSE               SJB ADDRESS FROM SSIB\n         USING SJB,R7                       ADDRESS IT\n         MVC   SJBPSOP(4),J1DPSOS           RESTORE PSO ADDRESS\n         MODESET KEY=NZERO                  KEY 8\n         DROP  R7                           DROP ADDRESSABILITY\n*\n**       LINK TO DYNAMIC ALLOCATE/UNALLOCATE MODULE\n*\nP2WALCG  LINK  EP=JRP220,PARAM=((R5)),MF=(E,P2DLINK)\n         BR    R10\n*\n**       LINK TO SUBSYSTEM REQUEST MODULE\n*\nP2WLKREQ LINK  EP=JRP210,PARAM=((R5)),MF=(E,P2DLINK)\n         BR    R10\n*\n**       CLOSE WAS ISSUED, CLOSE IN PROGRESS\n*\nP2CMJCLS DS    0H\n         L     R8,P2TADDR                   GET TOP OF PWT\n         LA    R6,*+4                       SET UP RETURN BRANCH\n         CLC   0(4,R8),=C'PEND'             END OF TABLE ??\n         BE    P2CLSET                      YES.\n         L     R5,8(R8)                     NO. GET HIS DYNAMIC AREA\n         OI    J1DFLAG2,J1DPURGE            SET PURGE FLAG\n         LA    R8,12(R8)                    BUMP TO NEXT PRINTER ENTRY\n         BR    R6                           LOOP BACK\n*\n**       ICLOSE WAS ISSUED, CLOSE IN PROGRESS\n*\nP2CMJCLI DS    0H\n         L     R8,P2TADDR                   GET TOP OF TABLE\n         LA    R6,*+4                       SET UP RETURN BRANCH\n         CLC   0(4,R8),=C'PEND'             END OF TABLE\n         BE    P2CLSET                      YES.\n         L     R5,8(R8)                     NO. GET HIS DYNAMIC AREA\n         OI    J1DFLAG1,J1DSTOP             SET HIS STOP FLAG\n         OI    J1DFLAG1,J1DKEEP             KEEP DS.\n         LA    R8,12(R8)                    BUMP TO NEXT ENTRY\n         BR    R6                           LOOP BACK\nP2CLSET  L     R8,P2TADDR                   GET TOP OF TABLE\nP2CLSLP  L     R5,8(R8)                     GET DYNAMIC AREA ADDRESS\n         CLC   J1DJECB(4),ZEROS             IS HE BUSY\n         BE    P2ONECLS                     YES.\n*        TM    J1DJECB,X'40'                IS HE POSTED\n*        BE    P2CONT                       YES.\n         LA    R1,J1DJECB                   GET ECB ADDRESS\n         WAIT  ECB=(R1)                     WAIT TILL DONE\nP2CONT   BAL   R10,P2WDTCH                  GO DETATCH AND DEALLOCATE\n         NI    J1DFLAG1,255-J1DALC          TURN OFF ALLOCATE FLAG\n         L    R7,J1DSSOB                    GET SSOB ADDR\n         USING SSOB,R7                      SET UP ADDRESSABILITY\n         MVI  SSSOFLG2,0                    CLEAR SSOB FLAG 2\n         OI   SSSOFLG2,SSSOCTRL             SET SSOB DELETE FLAG\n         DROP R7                            DROP ADDRESSABILITY\n         BAL  R10,P2WLKREQ                  GO ISSUE DELETE REQUEST\nP2ONECLS LA   R8,12(R8)                     BUMP TO NEXT ENTRY\n         CLC  0(4,R8),=C'PEND'              END OF TABLE\n         BNE  P2CLSLP                       NO.\nJRPRTRN DS    0H\n         XR    R15,R15                      ZERO REG 15\n         JRPRTRN                            RETURN\nP2FATALF DS    0H\n         WTO   'JRPE200   JRP210 FAILURE..ABENDING'\n         ABEND  200,DUMP\nJ2SYN    EQU    *\nTSGEOD   EQU    *\n         TITLE 'STATIC STORAGE'\nP2SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\nP2SATACH CALL  ,J2SYN,MF=L\nP2SLINK  LINK  EP=JRP220,SF=L\nP2SMDL   EQU   *-P2SWA\n         POP   PRINT\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         DS    0F\nBLANKS   DC    CL16' '\nZEROS    DC    4X'00'\nP2STR    TR    0(*-*,R14),0(R6)\nP2STBL1  DC    256X'F0'\n         ORG   P2STBL1+X'F0'\n         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         ORG\nWTRSSOB  DS    0F\nWJ2SOBID DC    CL4'SSOB'\nWJ2SOBSZ DC    AL2(SSOBHSIZ)\nWJ2SOBFN DC    AL2(SSOBSOUT)\nWTRSOSIZ EQU   *-WTRSSOB\n         SPACE 2\n         LTORG\n         IEZDEB  LIST=YES\nJRP200 CSECT\n         $HASPEQU                                             *DHC*\n         $SJB\n         $TQE\n         IEFJSSOB (SO)\n         IEFJSSIB ,                SSIB MAPPING MACRO\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP2DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP2DWA    DS    0D\nP2DATACH CALL   ,J2SYN,MF=L\nP2DLINK  LINK  EP=JRP220,SF=L\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F                  SVC 99 BUILD AREA\nP2DACB   DS    F\nP2TADDR  DS    F\nP2DJFLG  DS    F\nP2DHOLD  DS    CL6\nP2DCLRE  EQU   *                   END OF DYNAMIC AREA\nP2DSASIZ EQU   *-P2DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n*        JRPREGS                                                 *DHC*\n         PUSH  PRINT\n         JRPDMAC\n         PRINT NOGEN               SAVE A LITTLE PAPER\n         POP   PRINT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP210": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\x8c\\x00\\x8c\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 140, "newlines": 140, "modlines": 0, "user": "JRP"}, "text": "JRP210 TITLE 'SUBSYSTEM INTERFACE - SSOB PRESENTATION'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP210                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  ISSUE SUBSYSTEM REQUEST BASED       *\n*                ON SSOB SETUP FROM JRP200                            *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ISSUE IEFSSREQ SUBSYSTEM REQUEST MACRO. SELECT       *\n*                OUTPUT FROM JES2 SPOOL DATASET.                      *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JES2 MAINTENANCE LEVEL MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP110     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, SUPERVISOR STATE(AC=1) *\n*                                                                     *\n*             ENTRY POINTS = JRP210 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP200 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P2DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,IEFSSREQ,MODESET               *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN       *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP210 CSECT\n         JRPSAVE REG=12,ID=*\n         USING P2DSA,R13\n         L     R5,0(R1)        GET PARM  (PWT)\n*\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\n         USING   J1DWA,R5\n         L       R7,J1DSSOB\n         USING   SSOB,R7\n         MODESET MODE=SUP\n         LA    R1,J1DSSOB\n         IEFSSREQ                  ASK HASP FOR WORK\n         LR    R11,R15\n         MODESET MODE=PROB\n         LTR   R11,R11             TEST RETURN CODE\n         BZ    SD82RTRN            NORMAL RETURN\n         LA    R15,8               NO SUP GOES TO P2FATALF\n         B     P2DRETRN                               FOR TESTING\nSD82RTRN EQU   *\n         C     R11,SSOBRETN\n         BNE   P2DBRTN\n         XR      R15,R15\n         BE    P2DRETRN            NO CHECK OTHER PRINTERS\nP2DBRTN  LA    R15,4 SUP           GOES TO P2CMSCAN\nP2DRETRN DS   0H                   RC=0 CONTINUES THROUGH SUP CODE\n         JRPRTRN\n         TITLE 'STATIC STORAGE'\nJ2SYN    EQU   *\nP2GEOD   EQU   *\nP2SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\n         POP   PRINT\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         DS    0F\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP2DSA    DSECT\n         DS    9D                  O/S SAVE\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPREGS\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n*        DCBD  DSORG=PS\n         IEZDEB\n         POP   PRINT\n         CVT     DSECT=YES          CVT\n*        IHAPSA  DSECT=YES          PSA\n*        IKJTCB  DSECT=YES          TCB\n*        $SJB\n         IEFJSSOB (SO)\n         IEFJESCT\n         IEFJSSIB ,                SSIB MAPPING MACRO\n         JRPDMAC\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JRP220": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\xf6\\x00\\xf6\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 246, "newlines": 246, "modlines": 0, "user": "JRP"}, "text": "JRP220 TITLE 'JRP DYNAMIC ALLOCATE/UNALLOCATE ROUTINE'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP220                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  ALLOCATE/DEALLOCATE ROUTINE         *\n*                FOR JRP     328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 9/8/82                                      *\n*                                                                     *\n*              MODIFIED =                                             *\n*                                                                     *\n*             STATUS =                                                *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES =                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP220     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = -- BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP220 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP200 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = DYNAMIC AREA ADDRESS FOR ALLOCATE OR DEALLOCATE *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL MSDWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN       *\n*                CONN. MUTUAL LIFE INS. CO..                          *\n*                                                                     *\n*             ABEND CODES = U220                                      *\n*                                                                     *\n***********************************************************************\nJRP220 CSECT\n         JRPSAVE REG=12,ID=*\n         L     R11,0(R1)            GETMAINED AREA\n         USING J1DWA,R11\n         TM    J1DFLAG1,J1DALC\n         BO    J1DUNALC\n***                                                                 ***\n*        INITIALIZE DYNAMIC ALLOCATION PARAMETER AREA                 *\n**                                                                  ***\nJ1DINDYN DS    0H\n         LA    R8,J1DS99\n         LR    R1,R8                 ADDRESS OF PARALLOC\n         LA    R8,4(R8)            INCREMENT TO DAL REQUEST BLOCK\n         ST    R8,0(R1)            SET UP RB PTR ADDR.\n         OI    0(R1),S99RBPND\n         USING S99RB,R8\n         XC    S99RB(DYNRBSIZ),S99RB\n         MVI   S99RBLN,DYNRBSIZ    SIZE OF RB\n         LA    R3,DYNRBSIZ(R8)     INCREMENT TO FIRST TEXT POINTER\n         USING DYNTXTPT,R3\n         LA    R4,TXTPTSIZ(R3)     INCREMENT TO TEXT UNITS\n         USING S99TUNIT,R4\n*        DSNAME TEXT UNIT\n         ST    R4,DSNTXTPT         SET UP ADDR OF FIRST TEXT UNIT\n         XC    S99TUKEY(DYNEND-DYNTXTND),S99TUKEY ZERO TEXT UNITS\n         MVI   S99TUKEY+1,DALDSNAM DSNAME IS SUPPLIED TO SVC99\n         MVI   S99TUNUM+1,X'01'    NUMBER OF ENTRIES\n         MVI   S99TULNG+1,44       SIZE OF DSNAME\n         LA    R4,L'DSNTXTUT(R4)   INCREMENT TO SSREQ TEXT UNIT\n*        SSREQ TEXT UNIT\n         ST    R4,SSRTXTPT         ADDRESS OF SSREQ TEXT UNIT\n         MVI   S99TUKEY+1,DALSSREQ THIS IS A REQUEST FOR SUBSYSTEM\n         MVI   S99TULNG+1,4        LENGTH OF PARM FIELD\n         L     R2,PSATNEW-PSA      TCB NEW\n         L     R2,TCBJSCB-TCB(R2)  JSCB\n         L     R2,JSCBSSIB-IEZJSCB(R2) SSIB\n         USING SSIB,R2\n         MVC   S99TUPAR(4),SSIBSSNM PRIMARY SUBSYSTEM NAME\n         DROP  R2                  UNUSE SSIB\n         MVI   S99TUNUM+1,X'01'    NUMBER OF REQUESTS\n         LA    R4,L'SSRTXTUT(R4)   INCREMENT TO DDN TEXT UNIT\n*        DDNAME RETURN TEXT UNIT\n         ST    R4,DDNTXTPT         ADDR OF DDNAME RETURNED TEXT UNIT\n         MVI   DDNTXTPT,S99TUPLN   LAST TEXT UNIT PTR. IN LIST\n         MVI   S99TUKEY+1,DALRTDDN RETURN DDNAME TO ME\n         MVI   S99TUNUM+1,X'01'    NUMBER OF ENTRIES\n         MVI   S99TULNG+1,8        LENGTH OF PARM FIELD\n         MVC   S99TUPAR(8),=8CL1' ' INITIALIZE TO BLANKS\n         LA    R4,L'DDNTXTUT(R4)   INCREMENT TO DDNAME UNALLOC TEXT\n*        DDNAME UNALLOCATE TEXT UNIT\n         ST    R4,UDNTXTPT         SAVE UNALLOC TEXT ADDRESS\n         MVI   S99TUKEY+1,DUNDDNAM USE DDNAME TO UNALLOCATE\n         MVI   S99TUNUM+1,X'01'    NUMBER OF ENTRIES\n         MVI   S99TULNG+1,8        LENGTH OF PARM FIELD\n         LA    R4,L'UDNTXTUT(R4)   INCREMENT TO OVERRIDE TEXT\n*        DISPOSITION OVERRIDE TEXT UNIT\n         ST    R4,UORTXTPT         SAVE ADDRESS OF OVERRIDE TEXT\n         MVI   UORTXTPT,S99TUPLN   LAST TEXT UNIT PTR. IN LIST\n         MVI   S99TUKEY+1,DUNOVDSP OVERRIDE DISPOSITION KEY\n         MVI   S99TULNG+1,1        LENGTH OF PARM FIELD\n         MVI   S99TUNUM+1,X'01'    NUMBER OF ENTRIES\n         DROP  R4\n***                                                                 ***\n*    SET UP TO DYNAMICALLY ALLOCATE DATA SET                          *\n***                                                                 ***\n         MVI   S99VERB,S99VRBAL    ALLOCATION VERB\n         LA    R3,DISPDSN(R8)      ADDR. DSNAME TEXT UNIT\n         ST    R3,S99TXTPP         STORE ADDR OF TEXT UNIT PTRS\n         L     R4,0(,R3)           ADDR OF FIRST TEXT UNIT\n         MVC   6(44,R4),J1DDSN     GET DATA SET NAME FROM SSOB\n         BAL   R10,DYNAL           DYNAMICALLY ALLOCATE DATA SET\n         L     R3,S99TXTPP         ADDRESS OF TEXT UNITS\n         L     R4,DDNTXTPT-DYNTXTPT(R3) ADDRESS OF DDNAME TEXT UNIT\n         MVC   J1DDNM(8),6(R4) PUT DDNAME IN DCB\n         ST    R3,J1DST3\n         ST    R8,J1DST8\n         XR    R15,R15\n         B     JRPRTRN\n*****************\nJ1DUNALC DS    0H\n         L     R8,J1DST8\n         L     R3,J1DST3\n         USING S99RB,R8\n         MVI   S99VERB,S99VRBUN    UNALLOCATION VERB\n         LA    R3,DISPUAL(R8)      INCREMENT TO UNAL\n         ST    R3,S99TXTPP         STORE ADDR. OF TEXT UNIT PTRS.\n         L     R3,0(R3)            ADDRESS OF DDNAME FOR UNALLOCATE\n         L     R4,DISPDDN(R8)      ADDRESS OF DDNAME UNIT\n         MVC   6(8,R3),6(R4)       PUT DDNAME INTO TEXT FOR UNALLOC\n         L     R4,DISPOVR(R8)      ADDRESS OF OVERIDE UNIT\n         TM    J1DFLAG1,J1DKEEP    IS INPUT TO BE KEPT\n         BO    KEEPDS              YES\n         MVI   6(R4),X'04'         DELETE DATA SET\n         B     DYNUN               UNALLOCATE WITH DELETE DISP\nKEEPDS   MVI   6(R4),X'08'         KEEP DATA SET\nDYNUN    BAL   R10,DYNAL           DYNAMICALLY UNALLOCATE DATA SET\n         NI    J1DFLAG1,255-J1DKEEP RESET KEEP OPTION\n         MVC   J1DHNME(18),=18CL1' ' RESET STATUS FIELD\n         XR    R15,R15\nJRPRTRN JRPRTRN\nDYNAL    DS    0H\n         LA    R1,J1DS99\n         SVC   99\n         LTR   R15,R15\n         BZR   R10\n         L     R10,S99ERROR-S99RB(R8)\n         MVC   J1DWERR1(25),=C'BAD DYNALLOC RETURN CODE '\n         TITLE 'F A T A L  E R R O R  M E S S A G E S'\nP2FATALF DS    0H\n         CVD   R15,J1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         UNPK  J1DWERR2,J1DWORK+6(2) 999 MAX RC SUPPORTED\n         OI    J1DWERR2+L'J1DWERR2-1,C'0' MAKE PRINTABLE\n         LA    R1,J1DWERR          GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         LA     R15,4\n         ABEND  220,DUMP\n         B      JRPRTRN\nJ2SYN    EQU    *\nP2GEOD   EQU    *\n         TITLE 'DYNAMIC ALLOCATION PARAMETER LIST DSECT'\n         IEFZB4D0\n         TITLE 'DYNAMIC ALLOCATION TEXT UNIT KEYS'\n         IEFZB4D2\n         TITLE 'SUBSYSTEM OPTION BLOCK - ACCESS SYSOUT DATA SETS'\n         IEFJSSOB (SO)\n         TITLE 'JOB ENTRY SUBSYSTEM COMMUNICATIONS TABLE'\n         IEFJESCT\n         TITLE 'SUBSYSTEM IDENTIFICATION BLOCK'\n         IEFJSSIB ,                SSIB MAPPING MACRO\n         TITLE 'WRITER DYNAMIC ALLOCATION WORK AREA'\nDYNTXTPT DSECT\nDSNTXTPT DS    F                   POINTER TO DSNAME TEXT UNIT\nSSRTXTPT DS    F                   PTR. TO SUBSYSTEM REQUEST TEXT UNIT\nDDNTXTPT DS    F                   PTR TO DDNAME RETURNED TEXT UNIT\nUDNTXTPT DS    F                   DDNAME TEXT PTR. FOR UNALLOCATE\nUORTXTPT DS    F                   OVERRIDE TEXT PTR. FOR UNALLOCATE\nDYNTXTND EQU   *                   END OF TEXT POINTERS\nDSNTXTUT DS    CL50                DSNAME TEXT UNIT\nSSRTXTUT DS    CL10                SUBSYSTEM REQUEST TEXT UNIT\nDDNTXTUT DS    CL14                DDNAME RETURNED  TEXT UNIT\nUDNTXTUT DS    CL14                UNALLOCATE DDNAME TEXT UNIT\nUORTXTUT DS    CL7                 OVERRIDE DISPOSITION FOR UNALLOCATE\nDYNEND   EQU   *\nTXTPTSIZ EQU   DYNTXTND-DYNTXTPT   SIZE OF TEXT UNIT POINTERS\nDYNRBSIZ EQU   S99RBEND-S99RB      SIZE OF DYN ALLOC REQUEST BLOCK\nDYN      EQU   TXTPTSIZ+DYNRBSIZ+(DYNEND-DSNTXTUT)+L'S99RBPTR\nDISPDDN  EQU   DYNRBSIZ+DDNTXTPT-DYNTXTPT    ADDR. OF DDNAME IN DYN LST\nDISPOVR  EQU   DYNRBSIZ+UORTXTPT-DYNTXTPT    ADDR. OVRIDE IN DYN LST\nDISPUAL  EQU   DYNRBSIZ+UDNTXTPT-DYNTXTPT    ADDR. UNAL IN DYN LST\nDISPDSN  EQU   DYNRBSIZ+DSNTXTPT-DYNTXTPT    ADDR. DSNAME IN DYN LIST\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPREGS\n         PUSH  PRINT\n         POP   PRINT\n         CVT     DSECT=YES          CVT\n         IHAPSA  DSECT=YES          PSA\n         IKJTCB  DSECT=YES          TCB\n         IEZJSCB                   JSCB\n         JRPDMAC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP300": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01.\\x00#\\x00\\x93\\x19\\x7f\\x01\\x02%o\\x143\\x042\\x03\\xdd\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.46", "flags": 0, "createdate": "1993-07-16T00:00:00", "modifydate": "2002-09-13T14:33:23", "lines": 1074, "newlines": 989, "modlines": 0, "user": "MMSMAK"}, "text": "JRP300 TITLE '328X PRINTER SUBTASK'\n         TITLE 'START-UP'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP300                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PRINTER SUBTASK ROUTINE  FOR JRP    *\n*                            328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =  12/14/87  BY  LEWIS D. WHALEY              *\n*                                        SENIOR SYSTEMS ENGINEER      *\n*                                        NUCLEAR FUEL SERVICES, INC.  *\n*                                        205 BANNER HILL ROAD         *\n*                                        ERWIN, TN  37650             *\n*                                        (615) 743-9141  EXT: 363     *\n*                                                                     *\n*             STATUS =  MODIFIED TO HANDLE SUPPRESS PRINT CONTROL     *\n*                                                                     *\n*              MODIFIED =   7/06/93  BY  RONALD TANSKY                *\n*                                        SYSTEM PROGRAMMER            *\n*                                        WEBCRAFT, INC.               *\n*                                        4371 COUNTY LINE ROAD        *\n*                                        CHALFONT, PA 18914           *\n*                                        (215) 997-5371               *\n*                                                                     *\n*             STATUS =  REPEATED HEADER LINES                         *\n*                       FIXED ABEND0C4 THAT HIT ON SOME LINES THAT    *\n*                         WERE 132 COLUMNS WIDE                       *\n*                       CHANGED ALL 'BAL' TO 'BAS'.  IF YOU DON'T     *\n*                         HAVE MVS/XA OR BETTER, YOU MAY HAVE TO      *\n*                         CHANGE THEM BACK                            *\n*                       CHANGED DCB AND DCBD TO AVOID WARNINGS        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES =                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = SECOND BASE REGISTER         *\n*                    REGISTER  11      = BUFFER POINTER               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP300     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = -- BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP---- (ONLY ENTRY POINT)               *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP---- AS A SUBROUTINE                      *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                THESE ARE NOT NECESSARILY USED.                      *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P3DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY                                         *\n* 13SEP02  ED HOLT,P&ONEDLLOYD TSG  FIX TO BRACKET PROTOCOL     *HOLT*\n* 23JUN99 DHC INCLUDED HEADER/TRAILER PROCESSING                *DHC* *\n* 22JUN99 DHC ADDED 2ND BASE FOR CODE TO SEND HEADER/TRAILER    *DHC* *\n* 21JUN99 DHC MOVED TRANSLATE TABLES FOR ADDRESSABILITY         *DHC* *\n*                                                                     *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = U300                                      *\n*                                                                     *\n***********************************************************************\nJRP300 CSECT\n         JRPSAVE REG=12,ID=*,LV=P3DSASIZ\n*        PRINT NOGEN\n         LA    R10,2048(,R12)      SET UP ..                      *DHC*\n         LA    R10,2048(,R10)      .. SECOND BASE                 *DHC*\n         DROP  R12                 END PROGRAM ADDRESSABILITY     *DHC*\n         USING JRP300,R12,R10      RE-ESTABLISH ADDRESSABILITY    *DHC*\n         USING P3DSA,R13\n         L     R11,0(R1)            GETMAINED AREA\n         USING J1DWA,R11\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R0,41\n         SVC   95\n         MODESET KEY=NZERO,MODE=PROB\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP3WINIT  DS    0H\n         LA    R0,P3DWA          START OF DYNAMIC AREA\n         LA    R1,(P3DCLRE-P3DWA) LENGTH OF DYNAMIC AREA\n         L     R14,=A(P3SWA)       START OF STATIC DATA\n         LA    R15,P3SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\n         ZAP   P3DIOER,=P'0'\n         NI    J1DFLAG2,255-J1DFLUSH\n         NI    J1DFLAG1,255-J1DRTLM\n         NI    J1DFLAG1,255-J1DKEEP\n         NI    J1DFLAG1,255-J1DBEGIN\n         MVC   P3DNET(8),J1DNET                                  *DHC*\n         MVC   P3DLUID(8),J1DLUID\n         MVC   P3DLGMD(8),J1DLGMD\n         MVC   J1DBROK1(2),=C'00'\n         MVC   J1DBROK2(2),=C'00'\n         MVC   J1DBROK3(8),=C'00000000'\n*----------------------------------------------------------------------\n         MVC   FWONE(4),=X'00000001'\n*******  MVC   DUMYLINE(8),=C'########'\n         MVC   DUMYLINE(8),=C'        '\n         MVC   P132CHAR(4),=X'00000000'\n         MVC   DUMYL132+0(1),=C' '\n         MVC   DUMYL132+1(131),DUMYL132\n         MVI   DUMYL132+130,C'$'\n*----------------------------------------------------------------------\n         COPY  DHC300A             INCLUDE INITIALISATION         *DHC*\nP3GPRST  DS    0H\n         XR    R5,R5               CLEAR R5 FOR COUNTER\n         MVI   J1DOPENX,X'80'      ONLY ONE IN LIST\n         LA    R6,P3DBUFR\n         CLI   J1DHSCS,C'Y'\n         BE    P382NNEW\n         MVC   0(2,R6),=X'F5C8'\n         LA    R6,2(R6)\nP382NNEW DS    0H\n         ST    R6,J1DBFPTR\n***                                                                 ***\n*   INITIALIZE INPUT DCB                                              *\n***                                                                 ***\n         MVC   DCBDDNAM-IHADCB+P3DDCBIS(8),J1DDNM PUT DDNAME IN DCB\n         LA    R15,P3DDCBI        GET INPUT DCB ADDR\n         OPEN  ((R15),INPUT),MF=(E,J1DOPENX)\n         TM    J1DFLAG2,J1DHDR\n         BNO   P3GNTPUT\n         MVC   J1DOPERM(4),=C'I400'\nP3UNSOL  DS    0H\n         LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\nTPUT     LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DBFR),J1DBFR\n         LA    R1,J1DOPER\n         SVC   35\nP3GNTPUT NI    J1DFLAG1,255-J1DEOF RESET END-OF-FILE FLAG\n         COPY  DHC300B             OUTPUT ANY USER HEADER MEMBER  *DHC*\n         CLI   J1DSEP,C'N'         PAGE SEPERATORS DESIRED?\n         BE    P3GNSEP             NO-SKIP IT\n         TM    J1DFLAG2,J1DHDR     ARE THERE HEADERS REQUIRED??\n         BNO   P3GNSEP             NO-SKIP IT\nP3GNDATE DS    0H                  NO PRINT TODAY\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'8B'       SK1 IMMED\n         BAS   R14,P3WLOCS         PRINT HEADER\nP3GNSEP  DS    0H                  SKIP DATASET HEADER\n         OI    J1DFLAG1,J1DNEWDS   SET FLAG TO SUPPRESS 1ST SKIP\n         B     P3GET\n         TITLE  'LOOP GETTING/WRITING DATA SET UNTIL END'\nP3GLOOP  DS    0H\n         GET   P3DDCBI\n         CLC   J1DMLNE,=F'0'      THIS FIX ALLOWS MLIN TO      JRP0001\n         BE    P3KPRNT             BE NULLIFIED BY MLIN=0      JRP0001\n         LA    R5,1(R5)\n         C     R5,J1DMLNE\n         BNH   P3KPRNT\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'MAXLINE'\n         MVC   J1DOPERM(4),=C'W400'\n*\n**       GET CARRAGE, LINE LEN., AND LOCATION FOR WRITER.\n*\nP3KPRNT  LH    R0,DCBLRECL-IHADCB+P3DDCBI GET DEF. LRECL\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECU UNDEFINED\n         BO    P3GNOTV             YES\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECV VARIABLE\n         BNO   P3GNOTV             NO\n         LH    R0,0(R1)            GET REC LEN\n         LA    R1,4(R1)            SKIP RDW\n         SH    R0,=H'4'            SKIP RDW LEN.\nP3GNOTV  DS    0H\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'02' MACH. CARRIAGE\n         BNO   P3FRC1SP            NO-TRY ASCII\n         MVC   J1DCONCH,0(R1)\nP3ADJREG DS    0H\n         LA    R1,1(R1)            SKIP CC\n         BCTR  R0,0                SKIP CC LEN.\n         B     P3PUTIT             SETUP FOR WRITER\nP3FRC1SP DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'04' ASCII\n         BNO   P3PUTIT             NO CARRIAGE\n*\n**       BREAK ASCII COMMAND DOWN INTO IMM. AND PRINT\n*\n         STM   R0,R1,J1DSAV01      SAVE STRT, LEN\n         LA    R14,=X'F00B6013F18B'  ASCII XLATE TBL\n         LA    R15,3          L' OF TABLE(3 PAIRS)\n***********************************************************************\n*        IDEA IS TO PRINT ALL W/ 1SP AFTER.\n*        NOTE NO SUPPORT FOR '+' - OVERPRINT.\n*        SO '0' = (SP 1 IMM)+(PR W/ 1 SP AFTER)\n*           '-' = (SP 2 IMM)+(PR W/ 1 SP AFTER)\n*           '1' = (SK CH 1 IMM)+(PR W/ 1 SP AFTER)\n*           ' ' OR '+' = (PR W/ 1 SP AFTER)\n***********************************************************************\nP3FRLOC  DS    0H\n         CLC   0(1,R14),0(R1)\n         BE    P3FRFND             FOUND ASCII ARG. CHAR\n         LA    R14,2(R14)          NEXT PAIR\n         BCT   R15,P3FRLOC\n         B     P3ADJREG            UNKNOWN - FORCE 1 SP\nP3FRFND  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE4        SAVE REG 14    (ORIGINAL)\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP9             NO.   CONTINUE.\nP3SUPP8  DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP8A            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP10            CONTINUE\nP3SUPP8A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP10            CONTINUE\nP3SUPP9  DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP10            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\nP3SUPP10 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPZ  DS    0H\n*----------------------------------------------------------------------\n         MVC   J1DCONCH,1(R14)     MOVE IMMEDIATE PART OF ASCII\n         XR    R0,R0               ZERO LENGTH\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n*----------------------------------------------------------------------\n******** MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC COMMAND FLAG\n*----------------------------------------------------------------------\n         LM    R0,R1,J1DSAV01      RESTORE JRPREGS\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         B     P3ADJREG            ADJ JRPREGS AROUND CARRIAGE\n*\n**       NORMAL PUT INTERFACE\n*\nP3PUTIT  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE2        SAVE REG 14    (ORIGINAL)\n         LR    R14,R1              LOAD REG 14 WITH REG 1\n         S     R14,FWONE           POINT TO CC BYTE IN PRINT LINE -1\n         CLI   0(R14),X'01'        IS FBM CC FOR SUPPRESS PRINT ?\n         BE    P3SUPP11            YES.  GO HANDLE.\n         CLI   0(R14),C'+'         IS FBA CC FOR SUPPRESS PRINT ?\n         BNE   P3SUPPV             NO.   CONTINUE.\nP3SUPP11 DS    0H                  CURRENT CC IS SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP13            NO.   CONTINUE.\nP3SUPP12 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         B     P3SUPP14            CONTINUE\nP3SUPP13 DS    0H\n         LTR   R14,R14             CHECK FOR VALID ADDRESS OF LAST LF\n         BZ    P3SUPP14            NO ADDRESS  CONTINUE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BNE   P3SUPP14            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\nP3SUPP14 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\n         B     P3SUPPW             CONTINUE\nP3SUPPV  DS    0H                  CURRENT CC IS NOT SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP16            NO.   CONTINUE.\nP3SUPP15 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUP15A            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP17            CONTINUE\nP3SUP15A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP17            CONTINUE\nP3SUPP16 DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP17            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\nP3SUPP17 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPW  DS    0H\n*----------------------------------------------------------------------\n         BAS   R14,P3WLOCS\n         B     P3GET\nP3GCALLW DS    0H                  RE-CALL WTR - USE PREV. R0/R1\n         BAS   R14,P3WLOC          GO TO VTAM WRITER\nP3GET    DS    0H                  GET NEXT RECORD\n         TM    J1DFLAG2,J1DPURGE\n         BNO   P3CKSTOP\n         MVC   J1DHSTAT(10),=CL10'DRAINING'\nP3CKSTOP TM    J1DFLAG1,J1DSTOP    WAS STOP ISSUED DURING VTAM WRITE\n         BNO   P3CKFLSH\n         OI    J1DFLAG1,J1DKEEP\n         B     P3GEOD              YES-SIM. EODAD\nP3CKFLSH TM    J1DFLAG2,J1DFLUSH   FLUSH AND PURGE CURR. D.S.\n         BNO   P3CKIOER            NO FLUSH - CK FOR I/O ERR\n         TM    J1DFLAG1,J1DKEEP\n         BNO   P3SYNFL\n         MVC   J1DOPERM(4),=C'I402'\n         MVC   J1DWHY,=CL10'RESTARTED'\n         B     P3FLUSHR\nP3SYNFL DS     0H                                               9041\n         MVC   J1DOPERM(4),=C'I401'\n         MVC   J1DWHY,=CL10'TERMINATED'\nP3FLUSHR NI    J1DFLAG2,255-J1DFLUSH\n         CLI   J1DHSCS,C'Y'\n         BE    *+10\n         MVC   P3DBUFR(2),=X'F5C8' RESET WRITE CONTROL CHAR\n         LA    R0,L'J1DFLSMS\n         LA    R1,J1DFLSMS         FLUSH MESSAGE\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n* SEND FLUSH MESSAGE TO USER IF APPLICABLE\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DFLSMS),J1DFLSMS\n         LA    R1,J1DOPER          GET FLUSH P3G\n         SVC   35\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n         MVI   J1DCONCH,X'89'      CH1 AFTER\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE(TRUNC)\n         BAS   R14,P3WLOCS\n         B     P3GECLS             CLOSE OUT\n*\n**       SYNAD  ROUTINE ON JES INPUT D.S.\n*\nP3SYN    DS    0H                                               9041\n         AP    P3DIOER,=P'1'\n         CP    P3DIOER,=P'20'\n         BL    P3GLOOP\n         MVC   J1DWHY(10),=C'CANCELED'\n         MVC   J1DBYWHO,=CL8'IO ERROR'                          9041\n*        OI    J1DFLAG1,J1DKEEP                 LINE DELETED\n         B     P3SYNFL             FLUSH DATASET                9041\n*\n**       CHECK FOR I/O ERROR\n*\nP3CKIOER DS    0H\n         TM    J1DFLAG1,J1DIOERR         IO ERR\n         BNO   P3GRSET             NO - GET NEXT\n         MVC   J1DHSTAT(10),=CL10'RETRYING'\n         LH    R1,J1DRETLM         GET CURRENT RETRY LIMIT\n         LA    R1,1(R1)            BUMP\n         STH   R1,J1DRETLM\n         L     R9,J1DRPL\n         MVC   P3DWORK+6(1),RPLRTNCD-IFGRPL(R9) RTNCD=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK1(3),P3DWORK+6(2)\n         LA    R14,J1DBROK1\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK1+2,C' '\n         MVC   P3DWORK+6(1),RPLFDB2-IFGRPL(R9) FDBK2=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK2(3),P3DWORK+6(2)\n         LA    R14,J1DBROK2\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK2+2,C' '\n         MVC   P3DWORK+3(4),RPLSSEI-IFGRPL(R9) SENSE=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK3(9),P3DWORK+3(5)\n         LA    R14,J1DBROK3\n         LA    R15,8\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK3+8,C' '\n         TM    J1DRETLM+1,X'64'    IS IT AT 100 YET\n         BNO   P3WAIT              NO - NO NOTIFY OF OPER\n         MVC   J1DHSTAT(10),=CL10'RETRYLM'\n         OI    J1DFLAG1,J1DRTLM    RETRY LIMIT EXCEEDED\n         OI    J1DFLAG1,J1DKEEP    SAVE DATA-SET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOB NUMBER IN HEADER\n         XC    J1DRETLM,J1DRETLM   CLEAR COUNTER\n         LA    R0,J1DTPUTL         LENGTH\n         LA    R1,J1DTPUT          ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DCMT2          WTO LIST\n         SVC   35\n         B     P3GECLS\nP3WAIT   DS    0H\n         STIMER WAIT,BINTVL==F'2000' WAIT A WHILE (SEC * 100)\n         NI    J1DFLAG1,255-J1DIOERR\n         B     P3GCALLW            RE-TRY WRITE AGAIN\nP3GRSET  DS    0H\n         TM    J1DFLAG1,J1DEOF     AT EOF?\n         BO    P3GEOD1             YES-RETURN TO CLOSE CODE\n         B     P3GLOOP\n         TITLE  'END OF DATA SET'\nP3GEOD   DS    0H\n         COPY  DHC300C             INCLUDE TERMINATION CODE       *DHC*\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE\n         MVI   J1DCONCH,X'8B'      SKIP CH1 IMM.\n         LA    R1,J1DCONCH         DUMMY START ADDR\n         L     R9,J1DRPL\n         LTR   R9,R9\n         BZ    P3GEOD1\n         OI    RPLRH3-IFGRPL(R9),RPLEB   TELL VTAM END OF BRACKET\n         XR    R0,R0               LEN. = ZERO\n         BAS   R14,P3WLOCS         SKIP\nP3GEOD1  DS    0H                  SECONDARY ENTRY POINT\n         OI    J1DFLAG1,J1DEOF     SET END OF FILE\n         TM    J1DFLAG1,J1DSTOP    STOPPING?\n         BO    P3GECLS             YES-DONT CHECK FOR I/O ERROR\n         TM    J1DFLAG1,J1DIOERR   I/O ERROR ON FLUSH\n         BO    P3CKIOER            YES-GOTO ERROR RECOVERY CODE\nP3GECLS  EQU   *\n*\n**       CLOSE INPUT DCB AND FREE BUFFER POOL\n*\n         LA    R15,P3DDCBI\n         CLOSE ((R15),DISP),MF=(E,J1DOPENX)\n         FREEPOOL P3DDCBI          FREE BUFFER POOL\n         TITLE  'W A I T  F O R   W O R K  O R  S T O P  W R I T E R '\n         TM    J1DFLAG1,J1DBEGIN\n         BNO   JRPRTRN\n         L     R9,J1DRPL\n         CLSDST RPL=(R9),OPTCD=SYN\n***                                                                 ***\n*        STOP THE WRITER                                              *\n***                                                                 ***\nJRPRTRN  DS   0H\n         XR    R15,R15\n*        RETURN TO CALLER\n         JRPRTRN\n*----------------------------------------------------------------------\nP3ADJCNT DS    0H                  ADJUST LINE COUNT\n         L     R0,J1DCURPO         LOAD R0 WITH NUMBER OF LINES WRITTEN\n         L     R1,FWONE            LOAD R1 WITH FULL WORD OF 1\n         SR    R0,R1               SUBTRACT 1 FOR CARRIAGE RETURN\n         ST    R0,J1DCURPO         SAVE NEW NUMBER OF LINES\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJ132 DS    0H                  HANDLE POSITION 132 OF PREVIOUS LINE\n         ST    R14,R14SAVE5        SAVE REG 14 RETURN ADDRESS\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYL132         LOAD ADDRESS OF DUMMY 132 BYTE LINE\n         LA    R0,131              LENGTH OF 131\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R14,R14SAVE         LOAD REG 14 WITH ADR OF LINE FEED\n         MVC   0(1,R14),P132CHAR   CHANGE LINE FEED TO SPACE\n         S     R14,FWONE           SUBTRACT 1 TO POINT TO DUMMY CHAR $\n         MVI   0(R14),C' '         MAKE POSITION 131 A BLANK\n         MVI   P132CHAR,X'00'      CLEAR POSITION 132 CHARACTER\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         BAS   R14,P3ADJIMM        GO ADJUST IMMEDIATE CC IF ANY\n         L     R14,R14SAVE5        RESTORE REG 14 RETURN ADDRESS\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJIMM DS    0H                  ADJUST IMMEDIATE CC IF ANY\n         CLI   P132CHAR+3,X'00'    WAS THERE AN IMMEDIATE CC COMMAND ?\n         BE    P3ADJIMR            NO.   RETURN TO CALLER.\n         CLI   P132CHAR+3,X'8B'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n         BE    P3ADJIMR            YES.  RETURN TO CALLER.\n******** CLI   P132CHAR+3,X'89'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n******** BE    P3ADJIMR            YES.  RETURN TO CALLER.\n         MVI   P132CHAR+1,X'FF'    SET 132 LENGTH EXCEPTION FLAG ON\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         ST    R14,R14SAVE3        SAVE REG 14\n         MVC   J1DCONCH(1),P132CHAR+3  MOVE IMMEDIATE CC COMMAND\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         XR    R0,R0               ZERO LENGTH\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         MVI   P132CHAR+2,X'00'    CLEAR TEMP IMMEDIATE CC COMMAND\n         MVI   P132CHAR+3,X'00'    CLEAR HOLD IMMEDIATE CC COMMAND\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         L     R14,R14SAVE3        RESTORE REG 14\n         MVI   P132CHAR+1,X'00'    SET 132 LENGTH EXCEPTION FLAG OFF\nP3ADJIMR DS    0H\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\n         TITLE  'V T A M  W R I T E R'\nP3WLOCS  DS   0H\n         ST    R0,J1DISIZ          L'\n         ST    R1,J1DILOC          ADDR\nP3WLOC   DS    0H\n         ST    R14,J1DWRET         SAVE RETURN\n*\n**       SUPRESS SKIP IF FIRST FOR D.S.\n*\n         TM    J1DFLAG1,J1DNEWDS\n         BNO   P3WNNEW             NOT A NEW D.S.\n         NI    J1DFLAG1,255-J1DNEWDS\n         CLI   J1DCONCH,X'8B'      IS 1ST CMD A SKIP CH1?\n         BE    P3WRET              YES-SUPRESS IT-HEADER ALREADY AT CH1\n         CLI   J1DCONCH,X'89'      CH 1 AFTER\n         BNE   P3WNNEW             NO-NORMAL\n         MVI   J1DCONCH,X'09'      MAKE 1 SP AFTER\nP3WNNEW  DS    0H                  NO SUPRESSION\n**       XLATE 328X CTRL/NON-PRINTS OUT\n         LM    R0,R1,J1DILOC       GET ADDR,LENGTH OF LINE\n         CLC   J1DTRAN,=CL8'N'     NO TRANSLATION?                *DHC*\n         BE    P3WNOTR             THAT'S RIGHT, SKIP IT          *DHC*\n         LM    R14,R15,J1DILOC     \"\n         SH    R15,=H'1'           -1 FOR EXECUTE INSTR\n         BM    P3WNOTR             LEN = ZERO - NO XLATE\n         LA    R6,P3STBL\n         EX    R15,P3STR           XLATE 3270 CTRL CHARS OUT\nP3WNOTR  DS    0H\n*        MOVE PRINTLINE TO BUFFER\n         C     R1,=F'256'          MAX WIDTH (LENGTH OF LINE)\n         BL    *+8                 OK\n         L     R1,=F'256'          FORCE DOWN TO MAX LENGTH\n         L     R14,J1DBFPTR        GET OUTPUT BUFFER NXT AVAL.*\n         OC    J1DRETLM,J1DRETLM   IO ERR RETRY?\n         BNZ   P3WRETRY            YES-GO TO WRITE\n         TM    J1DCONCH,X'02'      IMMEDIATE COMMAND (SPACE ONLY)\n         BO    P3WIMMA             YES - DONT MOVE DATA - SET FLAG\n*******  BO    P3WIMM              YES - DONT MOVE DATA\n         LR    R15,R1              NOT IMM. MOVE DATA TO BUFFER\n         MVCL  R14,R0              R14 WILL POINT AFTER LAST BYTE\nP3BKSCAN DS    0H\n         BCTR  R14,0               BACK UP ONE BYTE\n         CLI   0(R14),C' '         IS IT BLANK\n         BE    P3BKSCAN            YES-BACK UP ANOTHER\n*              CANT BACK UP OUT OF  BUFFER SINCE WCC IS FIRST BYTE\n         LA    R14,1(R14)          R14 POINTS TO NEXT AVALIABLE BYTE\n*----------------------------------------------------------------------\n         L     R1,J1DISIZ          LOAD LINE LENGTH IN REG 1\n         C     R1,=F'132'          IS LINE LENGTH = 132 ?\n         BL    P3WIMM              NO.   CONTINUE.\n         L     R1,J1DILOC          LOAD LINE DATA ADDRESS\n         CLI   131(R1),C' '        IS LAST BYTE A SPACE ?\n         BE    P3WIMM              YES.  CONTINUE.\n         S     R14,FWONE           NO.   SUBTRACT 1 FROM BUFFER ADR.\n         MVC   P132CHAR(1),0(R14)  SAVE POSITION 132.\n         MVI   0(R14),X'0D'        MAKE POSITION 132 A CARRIAGE RETURN\n******** MVI   P132CHAR+1,X'FF'    INDICATE 132 LENGTH USED\n         MVC   P132CHAR+3(1),P132CHAR+2   SAVE IMMEDIATE CC IF ANY\n         MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC\n*----------------------------------------------------------------------\n         B     P3WIMM              CONTINUE\n*----------------------------------------------------------------------\nP3WIMMA  DS    0H\n         MVC   P132CHAR+2(1),J1DCONCH   SAVE IMMEDIATE CC COMMAND\n*----------------------------------------------------------------------\nP3WIMM   DS    0H                  IMMEDIATE DATA\n         TM    J1DCONCH,X'C0'      SKIP COMMAND\n         BNZ   P3SKIP              YES-CALC # LINE FEEDS TO HEAD\nP3WSPAC  DS    0H                  CHANGE SPACING TO NL(X'15')S\n         IC    R1,J1DCONCH         GET CARRIAGE\n         N     R1,=X'00000018'     MASK OFF JUNK\n         BNZ   P3ADDSRL            PUT OUT NLS\n         LA    R1,1*8              FORCE AT LEAST 1 SP\nP3ADDSRL DS    0H\n         SRL   R1,3                SHIFT TO GET SPACING\nP3ADDLN  DS    0H                  LOOP ADDING NLS TO BUFFER\n         L     R0,J1DCURPO         GET CURRENT LINE #\n         AR    R0,R1               ADD NEW SPACING\n         ST    R0,J1DCURPO         STORE IT\nP3ADDNL  DS    0H\n         MVI   0(R14),X'15'        NEW LINE CHAR\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          NEW OUTPUT ADDR\n         BCT   R1,P3ADDNL          LOOP\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3ADDEM             NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3ADDEM             YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3ADDEM  DS    0H\n*\n**       SEE IF BUFFER FULL YET\n*\n         ST    R14,J1DBFPTR        SAVE CURR POS.\n         TM    J1DFLAG2,J1DTRUNC   FORCE WRITE\n         BO    P3WFRC              YES\n         LA    R0,P3DBUFR+400       LOAD END OF BUFFER-LEADWAY\n         CR    R14,R0               SQUEZE ANOTHER RECORD?\n         BL    P3WRET               YES-GET NEXT\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3WFRC              NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WFRC              YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         S     R14,FWONE           SUBTRACT 1 TO POSITION AT 131\n         CLI   0(R14),C'$'         ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRA              YES.  GO HANDLE 132 LEN EXCEPTION.\n         CLI   P132CHAR+1,X'00'    ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRB              NO.   CONTINUE.\nP3WFRA   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n         B     P3WRET              YES.  MAKE SURE 132 LEN ROUTINE ENDS\nP3WFRB   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WFRC   DS    0H\nP3WRETRY DS    0H\n         L     R0,J1DISIZ          RESTORE REG 0            RT 7/6/93\n         L     R1,J1DILOC          RESTORE REG 1            RT 7/6/93\n         CLI   J1DHSCS,C'Y'\n         BE    P3WRYSCS\n         MVI   0(R14),X'19'        PUT EOM IN\n*----------------------------------------------------------------------\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WRETR3            YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         LTR   R14,R14             CHECK FOR VALID ADDRESS\n         BZ    P3WRETR2            NO ADDRESS  CONTINUE\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BE    P3WRETR2            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LAST LINFEED TO C/R\n         S     R14,FWONE           SUBTRACT 1 TO CHECK FOR EOM\n         CLI   0(R14),X'19'        WAS EOM INSERTED FOR 132 LEN LINE ?\n         BNE   P3WRETR1            NO.   CONTINUE.\n         MVC   0(2,R14),=X'0D19'   TRANSPOSE C/R EOM FOR 132 LEN LINE\nP3WRETR1 DS    0H\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         MVC   R14SAVE(4),=X'FFFFFFFF'  INDICATE LAST LINE FEED HANDLED\nP3WRETR2 DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WRETR3 DS    0H\n         LA    R14,1(R14)          NEXT BYTE\nP3WRYSCS LA    R4,P3DBUFR          GET START\n         SR    R14,R4              LENGTH\n         LR    R3,R14              LENGTH\n         TM    J1DFLAG1,J1DBEGIN\n         BO    VTMWRITE          NO  CONTINUE TO PROCESS WRITE\n         L     R9,J1DRPL\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    SIMLOG              YES  CONTROL BLOCKS O.K.\n*\n**       BUILD DYNAMIC VTAM CONTROL BLOCKS\n*\nVTAMDYN  DS    0H\n         GENCB AM=VTAM,BLK=NIB,LISTEND=YES,MF=(G,P3DNIBGN)\n         MVC   J1DWERRM(4),=C'E400'\n         MVC   J1DWERR1,=CL25'NIB GENCB FAILED'\n         LTR   R15,R15\n         BNZ   P3FATALF\n         LR    R4,R1\n         ST    R4,J1DNIB\n         CLI   P3DNET,C' '      IS IT NQN?                        *DHC*\n         BE    *+4+6            NO, USE DEFAULT                   *DHC*\n         MVC   NIBNET-ISTDNIB(8,R4),P3DNET                        *DHC*\n         SPACE\nP3WRPLGN DS    0H\n         L     R6,J1DACB\n         GENCB AM=VTAM,BLK=RPL,ACB=((R6)),POST=RESP,OPTCD=SYN,         X\n               NIB=((R4)),CONTROL=DATA,MF=(G,P3DRPLGN)\n         MVC   J1DWERRM(4),=C'E401'\n         MVC   J1DWERR1(25),=CL25'RPL GENCB FAILED'\n         LTR   R15,R15          CHECK RETURN CODE\n         BNZ   P3FATALF         IF NOT ZERO DIE\n         LR    R9,R1           LOAD ADDRESS OF RPL IN REG 9\n         ST    R9,J1DRPL        SAVE IN FULL WORD AREA\n         USING IFGRPL,R9\n         CLI   J1DHSCS,C'Y'\n         BE    P3RPLSCS\n         OI    RPLRH3,P3DBBFLG   BRACKET=(BB,EB) NON SNA\n* FOLLOWING INSTRUCTION DUMMIED OUT AS BUG-FIX BY\n*        ED HOLT,  P&ONEDLLOYD TSG\n*        OI    RPLRH3,P3DEBFLG   BRACKET=(BB,EB) NON SNA         *HOLT*\n         MVC   P3DMDFLG(1),RPLRH3 SET RPL FOR NON SNA BRACKETS\nP3RPLSCS MVC   NIBSYM-ISTDNIB(8,R4),P3DLUID\n         OI    RPLRH3-IFGRPL(R9),RPLBB\nSIMLOG   DS    0H\n         CLI   P3DLGMD,C' '\n         BNE   P3DACQ\n         SIMLOGON RPL=(R9),OPTCD=(SYN,RELRQ,Q)\n*        DC    A(0)                ABEND S0C1                  *DEBUG*\n         LTR    R15,R15\n         BNZ    P3RETRY\nOPENPRT  DS    0H\n         OPNDST RPL=(R9),OPTCD=(SYN,ACCEPT,NQ,SPEC)\n         LTR   R15,R15\n         BZ    VTMWRITE\n         B     P3RETRY\nP3DACQ   DS    0H\n         MVC   NIBLMODE-ISTDNIB(8,R4),P3DLGMD\n         OPNDST RPL=(R9),OPTCD=(SYN,ACQUIRE)\n         LTR   R15,R15\n         BNZ   P3RETRY\nVTMWRITE DS    0H\n         OI    J1DFLAG1,J1DBEGIN OPNDST HAS BEEN SUCCESSFULLY ISSUED\n         L     R9,J1DRPL\n         ST    R3,RPLRLEN-IFGRPL(R9)      STORE RECORD LENGTH\n         SEND  RPL=(R9),STYPE=REQ,CONTROL=DATA,POST=RESP,              X\n               OPTCD=(SYN,CA),AREA=P3DBUFR,                            X\n               RESPOND=(NEX,FME,NRRN),CHAIN=ONLY\nP3VTAMXX DS    0H\n         LTR   R15,R15             SUCCESSFUL\n         BNZ   P3RETRY             YES CONTINUE\nP3WCKCMP DS    0H\n         MVC   J1DHSTAT(10),=CL10'ACTIVE'\n         MVC   RPLRH3-IFGRPL(1,R9),P3DMDFLG   RESET BRACKET\n         LA    R14,P3DBUFR                    GET BUFFER\n         CLI   J1DHSCS,C'Y'                   IS THIS SCS\n         BE    P3WSCSY                        YES BRANCH AROUND\n         MVC   0(2,R14),=X'F5C8'              MOVE IN BISYNC 3270\n         LA    R14,2(R14)          LOCAL CONTROL CHAR BYPASS\nP3WSCSY  ST    R14,J1DBFPTR        RESET PTR\n         NI    J1DFLAG2,255-J1DTRUNC RESET FORCED WRITE\n         XC    J1DRETLM,J1DRETLM   YES - RESET RETRY COUNTER\nP3WRET   DS    0H                  RETURN\n         L     R14,J1DWRET         \"\n         BR    R14                 \"\nP3SKIP   DS    0H                  HANDLE SKIP COMMAND\n         CLI   J1DCONCH,X'89'      SKIP CH 1 AFTER\n         BE    P3SKIP1             YES\n         CLI   J1DCONCH,X'8B'      SKIP CH 1 IMM.\n         BE    P3SKIP1             YES\n         B     P3WSPAC             FORCE TO SPACING COMMAND\nP3SKIP1  DS    0H                  CALC # OF NLS TO TOP OF FORM\n******** CLI   J1DHSCS,C'Y'        GET CURRENT POS.\n******** BNE   P3SKIP2             CLEAR\n         MVI   0(R14),X'0C'        DIVIDE BY LINES/PAGE\n         LA    R14,1(R14)          LINES/PAGE\n*----------------------------------------------------------------------\n         MVI   0(R14),X'0D'        CHANGE WOULD-BE LINE FEED TO C/R\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          SAVE ADDRESS OF NEXT BUFFER POSITION\n*----------------------------------------------------------------------\n         B     P3ADDEM             MINUS REMAINDER = # OF NLS\nP3SKIP2  DS    0H                  CALC # OF NLS TO TOP OF FORM\n         L     R1,J1DCURPO         GET CURRENT POS.\n         XR    R0,R0               CLEAR\n         D     R0,J1DLEN           DIVIDE BY LINES/PAGE\n         L     R1,J1DLEN           LINES/PAGE\n         SR    R1,R0                MINUS REMAINDER = # OF NLS\n         B     P3ADDLN             INSERT NLS\nP3RETRY  DS    0H\nP30811   CLC   RPLSSEI-IFGRPL(2,R9),=X'0811'    PRINT CANCEL\n         BNE   P30821\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'CANCEL'\n         B     P3WCKCMP\nP30821   CLC   RPLSSEI-IFGRPL(2,R9),=X'0821'   BIND ERROR\n         BNE   RETRYCMP\n         MVI   J1DRETLM+1,X'64'    IS IT AT 100 YET\nRETRYCMP DS    0H\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    P3RETRYA            YES  NO CLSDST RPL NOT OPENED.\n         CLSDST RPL=(R9),OPTCD=(SYN,RELEASE)\n         NI    J1DFLAG1,255-J1DBEGIN  TURN OFF OPNDST FLAG\nP3RETRYA OI    J1DFLAG1,J1DIOERR   LET CALL DECIDE WHAT TO DO\n         B     P3WRET              RETURN(RE-CALL AT TWWLOC TO RETRY)\n         TITLE 'CHECK FOR STOP/MODIFY'\nP3FATALF DS    0H\n         CVD   R15,J1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         UNPK  J1DWERR2,J1DWORK+6(2) 999 MAX RC SUPPORTED\n         OI    J1DWERR2+L'J1DWERR2-1,C'0' MAKE PRINTABLE\n         LA    R0,L'J1DWERR-4      LENGTH\n         LA    R1,J1DWERR+4        ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DWERR          GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         MVC   J1DHSTAT(6),=C'ABENDU'\n         MVC   J1DHSTAT+6(3),=C'300'\n         OI    J1DFLAG1,J1DRTLM    MUST ISSUE $S\n         OI    J1DFLAG1,J1DKEEP    UNALLOCATE AND KEEP DATASET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOBNUM FOR HEADER\n         ABEND  300,DUMP           ABEND USER 300\nJ2SYN    EQU    *\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         TITLE 'LITERAL POOL'\n*        JRPSMAC\n         LTORG\nP3STR    TR    0(*-*,R14),0(R6)    EXECUTED\n         DS    0F\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nBLANKS   DC    CL16' '\n         SPACE 2\nP3STBL   DC    256C' '\nUPCTBL   EQU   P3STBL\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    X'81,82,83,84,85,86,87,88,89'\n         ORG   UPCTBL+X'91'\n         DC    X'91,92,93,94,95,96,97,98,99'\n         ORG   UPCTBL+X'A2'\n         DC    X'A2,A3,A4,A5,A6,A7,A8,A9'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\nP3STBL1  DC    256X'F0'\n         ORG   P3STBL1+X'F0'\n         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         ORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nP3SDCBIS EQU   *\nP3SDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN,     *\n               DDNAME=A           DUMMY DDNAME\nP3SDCBIE EQU   *\nP3SATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3SWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\n         EJECT                                                    *DHC*\n*******************************************************************DHC*\n*        DATA CONTROL BLOCKS                                      *DHC*\n*******************************************************************DHC*\n         SPACE 1                                                  *DHC*\nP3SHEAD  DCB   DDNAME=JRPHEAD,                                    *DHC*C\n               DSORG=PO,                                          *DHC*C\n               MACRF=(R),                                         *DHC*C\n               BUFNO=2,                                           *DHC*C\n               EODAD=PDSEODAD                                     *DHC*\n         SPACE 3                                                  *DHC*\n*******************************************************************DHC*\n*        DCB'S TABLE                                              *DHC*\n*******************************************************************DHC*\n         SPACE 1                                                  *DHC*\nP3SHEDSW  DC   X'00',AL3(0),CL8'JRPHEAD',CL8'INPUT',CL8' ',PL8'0' *DHC*\n         SPACE 2                                                  *DHC*\n         READ  P3SECB1,SF,P3SHEAD,0,'S',MF=L READ LIST            *DHC*\nP3SABUF2 DC    F'0'                                               *DHC*\nP3SSEGAD DC    F'0'                                               *DHC*\nP3SBYTES DC    H'0'                                               *DHC*\nP3SMEMB  DC    CL8' '              MEMBER NAME                    *DHC*\n*                                                                 *DHC*\nP3SSW1   DC    X'00'                                              *DHC*\n         EJECT                                                    *DHC*\nP3SMDL   EQU   *-P3SWA\n         SPACE 2\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP3DWA    DS    0F\nP3DDCBIS EQU   *\nP3DDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN,     *\n               DDNAME=A           DUMMY DDNAME\nP3DDCBIE EQU   *\nP3DATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3DWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\n         EJECT                                                    *DHC*\n*******************************************************************DHC*\n*        DATA CONTROL BLOCKS                                      *DHC*\n*******************************************************************DHC*\n         SPACE 1                                                  *DHC*\nP3DHEAD  DCB   DDNAME=JRPHEAD,                                    *DHC*C\n               DSORG=PO,                                          *DHC*C\n               MACRF=(R),                                         *DHC*C\n               BUFNO=2,                                           *DHC*C\n               EODAD=PDSEODAD                                     *DHC*\n         SPACE 3                                                  *DHC*\n*******************************************************************DHC*\n*        DCB'S TABLE                                              *DHC*\n*******************************************************************DHC*\n         SPACE 1                                                  *DHC*\nP3DHEDSW  DC   X'00',AL3(0),CL8'JRPHEAD',CL8'INPUT',CL8' ',PL8'0' *DHC*\n         SPACE 2                                                  *DHC*\n         READ  P3DECB1,SF,P3DHEAD,P3DABUF1,'S',MF=L READ LIST     *DHC*\nP3DABUF1 EQU   P3DECB1+12                                         *DHC*\nP3DIOBA  EQU   P3DECB1+16                                         *DHC*\n         SPACE 1                                                  *DHC*\nP3DABUF2 DC    F'0'                                               *DHC*\nP3DSEGAD DC    F'0'                                               *DHC*\nP3DBYTES DC    H'0'                                               *DHC*\n*                                                                 *DHC*\nP3DMEMB  DC    CL8' '              MEMBER NAME                    *DHC*\n*                                                                 *DHC*\n*                                                                 *DHC*\nP3DSW1   DC    X'00'                                              *DHC*\n*        NEXT 3 SWITCHES ARE FOR PDS PROCESSING                   *DHC*\nFIRSTGET EQU   X'20'               FIRST TIME ROUND FOR CURRENT MEMBER*\nREADREQ  EQU   X'40'               PHYSICAL READ REQUIRED         *DHC*\nEOJ      EQU   X'80'                                              *DHC*\n         EJECT                                                    *DHC*\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F                  ALIGN\nP3DNIBGN NIB   ,\nP3DRPLGN RPL   AM=VTAM\n         RIN   GENERATE            SAVE AREAS                     *DHC*\n         DS    0F\nST4      DS    F\nST5      DS    F\nST6      DS    F\n*----------------------------------------------------------------------\nFWONE    DS    F\nDUMYLINE DS    2F\nP132CHAR DS    F\nR0SAVE   DS    F\nR1SAVE   DS    F\nR14SAVE  DS    F\nR14SAVE2 DS    F\nR14SAVE3 DS    F\nR14SAVE4 DS    F\nR14SAVE5 DS    F\n*----------------------------------------------------------------------\n*********P3DBUFR  DS    CL768\nP3DBUFR  DS    CL920\nP3DWORK  DS    D\nP3DNET   DS    CL8\nP3DLUID  DS    CL8\nP3DLGMD  DS    CL8\nP3DIOER  DS    PL2\nP3DMDFLG DS    X\n*----------------------------------------------------------------------\nDUMYL132 DS    CL132\n*----------------------------------------------------------------------\n*\nP3DCLRE  EQU   *                   END OF DYNAMIC AREA\nP3DSASIZ EQU   *-P3DWA             SIZE OF DYNAMIC AREA\nP3DBBFLG EQU   X'80'\nP3DEBFLG EQU   X'40'\n         JRPREGS\n         COPY  MDCB                STANDARD CONTROL BLOCK MAP     *DHC*\n         DCBD   DSORG=PS,DEVD=DA\n         IFGRPL AM=VTAM             RPL\n         ISTDNIB                     NIB\n         PRINT GEN\n         JRPDMAC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP300OL": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x03\\xaf\\x03\\xaf\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 943, "newlines": 943, "modlines": 0, "user": "JRP"}, "text": "JRP300 TITLE '328X PRINTER SUBTASK'\n         TITLE 'START-UP'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP300                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PRINTER SUBTASK ROUTINE  FOR JRP    *\n*                            328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =  12/14/87  BY  LEWIS D. WHALEY              *\n*                                        SENIOR SYSTEMS ENGINEER      *\n*                                        NUCLEAR FUEL SERVICES, INC.  *\n*                                        205 BANNER HILL ROAD         *\n*                                        ERWIN, TN  37650             *\n*                                        (615) 743-9141  EXT: 363     *\n*                                                                     *\n*             STATUS =  MODIFIED TO HANDLE SUPPRESS PRINT CONTROL     *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES =                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP300     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = -- BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP---- (ONLY ENTRY POINT)               *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP---- AS A SUBROUTINE                      *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P3DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = U300                                      *\n*                                                                     *\n***********************************************************************\nJRP300 CSECT\n         JRPSAVE REG=12,ID=*,LV=P3DSASIZ\n         USING P3DSA,R13\n         L     R11,0(R1)            GETMAINED AREA\n         USING J1DWA,R11\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R0,41\n         SVC   95\n         MODESET KEY=NZERO,MODE=PROB\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP3WINIT  DS    0H\n         LA    R0,P3DWA          START OF DYNAMIC AREA\n         LA    R1,(P3DCLRE-P3DWA) LENGTH OF DYNAMIC AREA\n         LA    R14,P3SWA           START OF STATIC DATA\n         LA    R15,P3SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\n         ZAP   P3DIOER,=P'0'\n         NI    J1DFLAG2,255-J1DFLUSH\n         NI    J1DFLAG1,255-J1DRTLM\n         NI    J1DFLAG1,255-J1DKEEP\n         NI    J1DFLAG1,255-J1DBEGIN\n         MVC   P3DLUID(8),J1DLUID\n         MVC   P3DLGMD(8),J1DLGMD\n         MVC   J1DBROK1(2),=C'00'\n         MVC   J1DBROK2(2),=C'00'\n         MVC   J1DBROK3(8),=C'00000000'\n*----------------------------------------------------------------------\n         MVC   FWONE(4),=X'00000001'\n*******  MVC   DUMYLINE(8),=C'########'\n         MVC   DUMYLINE(8),=C'        '\n         MVC   P132CHAR(4),=X'00000000'\n         MVC   DUMYL132+0(1),=C' '\n         MVC   DUMYL132+1(131),DUMYL132\n         MVI   DUMYL132+130,C'$'\n*----------------------------------------------------------------------\nP3GPRST  DS    0H\n         XR    R2,R2               CLEAR R2 FOR COUNTER\n         MVI   J1DOPENX,X'80'      ONLY ONE IN LIST\n         LA    R6,P3DBUFR\n         CLI   J1DHSCS,C'Y'\n         BE    P382NNEW\n         MVC   0(2,R6),=X'F5C8'\n         LA    R6,2(R6)\nP382NNEW DS    0H\n         ST    R6,J1DBFPTR\n***                                                                 ***\n*   INITIALIZE INPUT DCB                                              *\n***                                                                 ***\n         MVC   DCBDDNAM-IHADCB+P3DDCBIS(8),J1DDNM PUT DDNAME IN DCB\n         LA    R15,P3DDCBI        GET INPUT DCB ADDR\n         OPEN  ((R15),INPUT),MF=(E,J1DOPENX)\n         TM    J1DFLAG2,J1DHDR\n         BNO   P3GNTPUT\n         MVC   J1DOPERM(4),=C'I400'\nP3UNSOL  DS    0H\n         LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\nTPUT     LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DBFR),J1DBFR\n         LA    R1,J1DOPER\n         SVC   35\nP3GNTPUT NI    J1DFLAG1,255-J1DEOF RESET END-OF-FILE FLAG\n         CLI   J1DSEP,C'N'         PAGE SEPERATORS DESIRED?\n         BE    P3GNSEP             NO-SKIP IT\n         TM    J1DFLAG2,J1DHDR     ARE THERE HEADERS REQUIRED??\n         BNO   P3GNSEP             NO-SKIP IT\nP3GNDATE DS    0H                  NO PRINT TODAY\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAL   R14,P3WLOCS         PRINT HEADER\nP3GNSEP  DS    0H                  SKIP DATASET HEADER\n         OI    J1DFLAG1,J1DNEWDS   SET FLAG TO SUPPRESS 1ST SKIP\n         B     P3GET\n         TITLE  'LOOP GETTING/WRITING DATA SET UNTIL END'\nP3GLOOP  DS    0H\n         GET   P3DDCBI\n         CLC   J1DMLNE,=F'0'      THIS FIX ALLOWS MLIN TO      JRP0001\n         BE    P3KPRNT             BE NULLIFIED BY MLIN=0      JRP0001\n         LA    R2,1(R2)\n         C     R2,J1DMLNE\n         BNH   P3KPRNT\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'MAXLINE'\n         MVC   J1DOPERM(4),=C'W400'\n*\n**       GET CARRAGE, LINE LEN., AND LOCATION FOR WRITER.\n*\nP3KPRNT  LH    R0,DCBLRECL-IHADCB+P3DDCBI GET DEF. LRECL\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECU UNDEFINED\n         BO    P3GNOTV             YES\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECV VARIABLE\n         BNO   P3GNOTV             NO\n         LH    R0,0(R1)            GET REC LEN\n         LA    R1,4(R1)            SKIP RDW\n         SH    R0,=H'4'            SKIP RDW LEN.\nP3GNOTV  DS    0H\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'02' MACH. CARRIAGE\n         BNO   P3FRC1SP            NO-TRY ASCII\n         MVC   J1DCONCH,0(R1)\nP3ADJREG DS    0H\n         LA    R1,1(R1)            SKIP CC\n         BCTR  R0,0                SKIP CC LEN.\n         B     P3PUTIT             SETUP FOR WRITER\nP3FRC1SP DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'04' ASCII\n         BNO   P3PUTIT             NO CARRIAGE\n*\n**       BREAK ASCII COMMAND DOWN INTO IMM. AND PRINT\n*\n         STM   R0,R1,J1DSAV01      SAVE STRT, LEN\n         LA    R14,=X'F00B6013F18B'  ASCII XLATE TBL\n         LA    R15,3          L' OF TABLE(3 PAIRS)\n***********************************************************************\n*        IDEA IS TO PRINT ALL W/ 1SP AFTER.\n*        NOTE NO SUPPORT FOR '+' - OVERPRINT.\n*        SO '0' = (SP 1 IMM)+(PR W/ 1 SP AFTER)\n*           '-' = (SP 2 IMM)+(PR W/ 1 SP AFTER)\n*           '1' = (SK CH 1 IMM)+(PR W/ 1 SP AFTER)\n*           ' ' OR '+' = (PR W/ 1 SP AFTER)\n***********************************************************************\nP3FRLOC  DS    0H\n         CLC   0(1,R14),0(R1)\n         BE    P3FRFND             FOUND ASCII ARG. CHAR\n         LA    R14,2(R14)          NEXT PAIR\n         BCT   R15,P3FRLOC\n         B     P3ADJREG            UNKNOWN - FORCE 1 SP\nP3FRFND  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE4        SAVE REG 14    (ORIGINAL)\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP9             NO.   CONTINUE.\nP3SUPP8  DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP8A            NO.   CONTINUE.\n         BAL   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP10            CONTINUE\nP3SUPP8A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAL   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP10            CONTINUE\nP3SUPP9  DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP10            NO.   CONTINUE.\n         BAL   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\nP3SUPP10 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPZ  DS    0H\n*----------------------------------------------------------------------\n         MVC   J1DCONCH,1(R14)     MOVE IMMEDIATE PART OF ASCII\n         XR    R0,R0               ZERO LENGTH\n         BAL   R14,P3WLOCS         PUT IMMEDIATE PART\n*----------------------------------------------------------------------\n******** MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC COMMAND FLAG\n*----------------------------------------------------------------------\n         LM    R0,R1,J1DSAV01      RESTORE JRPREGS\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         B     P3ADJREG            ADJ JRPREGS AROUND CARRIAGE\n*\n**       NORMAL PUT INTERFACE\n*\nP3PUTIT  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE2        SAVE REG 14    (ORIGINAL)\n         LR    R14,R1              LOAD REG 14 WITH REG 1\n         S     R14,FWONE           POINT TO CC BYTE IN PRINT LINE -1\n         CLI   0(R14),X'01'        IS FBM CC FOR SUPPRESS PRINT ?\n         BE    P3SUPP11            YES.  GO HANDLE.\n         CLI   0(R14),C'+'         IS FBA CC FOR SUPPRESS PRINT ?\n         BNE   P3SUPPV             NO.   CONTINUE.\nP3SUPP11 DS    0H                  CURRENT CC IS SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP13            NO.   CONTINUE.\nP3SUPP12 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         B     P3SUPP14            CONTINUE\nP3SUPP13 DS    0H\n         LTR   R14,R14             CHECK FOR VALID ADDRESS OF LAST LF\n         BZ    P3SUPP14            NO ADDRESS  CONTINUE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BNE   P3SUPP14            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAL   R14,P3ADJCNT        GO ADJUST LINE COUNT\nP3SUPP14 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\n         B     P3SUPPW             CONTINUE\nP3SUPPV  DS    0H                  CURRENT CC IS NOT SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP16            NO.   CONTINUE.\nP3SUPP15 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUP15A            NO.   CONTINUE.\n         BAL   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP17            CONTINUE\nP3SUP15A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAL   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP17            CONTINUE\nP3SUPP16 DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP17            NO.   CONTINUE.\n         BAL   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\nP3SUPP17 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPW  DS    0H\n*----------------------------------------------------------------------\n         BAL   R14,P3WLOCS\n         B     P3GET\nP3GCALLW DS    0H                  RE-CALL WTR - USE PREV. R0/R1\n         BAL   R14,P3WLOC          GO TO VTAM WRITER\nP3GET    DS    0H                  GET NEXT RECORD\n         TM    J1DFLAG2,J1DPURGE\n         BNO   P3CKSTOP\n         MVC   J1DHSTAT(10),=CL10'DRAINING'\nP3CKSTOP TM    J1DFLAG1,J1DSTOP    WAS STOP ISSUED DURING VTAM WRITE\n         BNO   P3CKFLSH\n         OI    J1DFLAG1,J1DKEEP\n         B     P3GEOD              YES-SIM. EODAD\nP3CKFLSH TM    J1DFLAG2,J1DFLUSH   FLUSH AND PURGE CURR. D.S.\n         BNO   P3CKIOER            NO FLUSH - CK FOR I/O ERR\n         TM    J1DFLAG1,J1DKEEP\n         BNO   P3SYNFL\n         MVC   J1DOPERM(4),=C'I402'\n         MVC   J1DWHY,=CL10'RESTARTED'\n         B     P3FLUSHR\nP3SYNFL DS     0H                                               9041\n         MVC   J1DOPERM(4),=C'I401'\n         MVC   J1DWHY,=CL10'TERMINATED'\nP3FLUSHR NI    J1DFLAG2,255-J1DFLUSH\n         CLI   J1DHSCS,C'Y'\n         BE    *+10\n         MVC   P3DBUFR(2),=X'F5C8' RESET WRITE CONTROL CHAR\n         LA    R0,L'J1DFLSMS\n         LA    R1,J1DFLSMS         FLUSH MESSAGE\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n* SEND FLUSH MESSAGE TO USER IF APPLICABLE\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DFLSMS),J1DFLSMS\n         LA    R1,J1DOPER          GET FLUSH P3G\n         SVC   35\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n         MVI   J1DCONCH,X'89'      CH1 AFTER\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE(TRUNC)\n         BAL   R14,P3WLOCS\n         B     P3GECLS             CLOSE OUT\n*\n**       SYNAD  ROUTINE ON JES INPUT D.S.\n*\nP3SYN    DS    0H                                               9041\n         AP    P3DIOER,=P'1'\n         CP    P3DIOER,=P'20'\n         BL    P3GLOOP\n         MVC   J1DWHY(10),=C'CANCELED'\n         MVC   J1DBYWHO,=CL8'IO ERROR'                          9041\n*        OI    J1DFLAG1,J1DKEEP                 LINE DELETED\n         B     P3SYNFL             FLUSH DATASET                9041\n*\n**       CHECK FOR I/O ERROR\n*\nP3CKIOER DS    0H\n         TM    J1DFLAG1,J1DIOERR         IO ERR\n         BNO   P3GRSET             NO - GET NEXT\n         MVC   J1DHSTAT(10),=CL10'RETRYING'\n         LH    R1,J1DRETLM         GET CURRENT RETRY LIMIT\n         LA    R1,1(R1)            BUMP\n         STH   R1,J1DRETLM\n         L     R9,J1DRPL\n         MVC   P3DWORK+6(1),RPLRTNCD-IFGRPL(R9) RTNCD=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK1(3),P3DWORK+6(2)\n         LA    R14,J1DBROK1\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK1+2,C' '\n         MVC   P3DWORK+6(1),RPLFDB2-IFGRPL(R9) FDBK2=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK2(3),P3DWORK+6(2)\n         LA    R14,J1DBROK2\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK2+2,C' '\n         MVC   P3DWORK+3(4),RPLSSEI-IFGRPL(R9) SENSE=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK3(9),P3DWORK+3(5)\n         LA    R14,J1DBROK3\n         LA    R15,8\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK3+8,C' '\n         TM    J1DRETLM+1,X'64'    IS IT AT 100 YET\n         BNO   P3WAIT              NO - NO NOTIFY OF OPER\n         MVC   J1DHSTAT(10),=CL10'RETRYLM'\n         OI    J1DFLAG1,J1DRTLM    RETRY LIMIT EXCEEDED\n         OI    J1DFLAG1,J1DKEEP    SAVE DATA-SET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOB NUMBER IN HEADER\n         XC    J1DRETLM,J1DRETLM   CLEAR COUNTER\n         LA    R0,J1DTPUTL         LENGTH\n         LA    R1,J1DTPUT          ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DCMT2          WTO LIST\n         SVC   35\n         B     P3GECLS\nP3WAIT   DS    0H\n         STIMER WAIT,BINTVL==F'2000' WAIT A WHILE (SEC * 100)\n         NI    J1DFLAG1,255-J1DIOERR\n         B     P3GCALLW            RE-TRY WRITE AGAIN\nP3GRSET  DS    0H\n         TM    J1DFLAG1,J1DEOF     AT EOF?\n         BO    P3GEOD1             YES-RETURN TO CLOSE CODE\n         B     P3GLOOP\n         TITLE  'END OF DATA SET'\nP3GEOD   DS    0H\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE\n         MVI   J1DCONCH,X'8B'      SKIP CH1 IMM.\n         LA    R1,J1DCONCH         DUMMY START ADDR\n         L     R9,J1DRPL\n         LTR   R9,R9\n         BZ    P3GEOD1\n         OI    RPLRH3-IFGRPL(R9),RPLEB   TELL VTAM END OF BRACKET\n         XR    R0,R0               LEN. = ZERO\n         BAL   R14,P3WLOCS         SKIP\nP3GEOD1  DS    0H                  SECONDARY ENTRY POINT\n         OI    J1DFLAG1,J1DEOF     SET END OF FILE\n         TM    J1DFLAG1,J1DSTOP    STOPPING?\n         BO    P3GECLS             YES-DONT CHECK FOR I/O ERROR\n         TM    J1DFLAG1,J1DIOERR   I/O ERROR ON FLUSH\n         BO    P3CKIOER            YES-GOTO ERROR RECOVERY CODE\nP3GECLS  EQU   *\n*\n**       CLOSE INPUT DCB AND FREE BUFFER POOL\n*\n         LA    R15,P3DDCBI\n         CLOSE ((R15),DISP),MF=(E,J1DOPENX)\n         FREEPOOL P3DDCBI          FREE BUFFER POOL\n         TITLE  'W A I T  F O R   W O R K  O R  S T O P  W R I T E R '\n         TM    J1DFLAG1,J1DBEGIN\n         BNO   JRPRTRN\n         L     R9,J1DRPL\n         CLSDST RPL=(R9),OPTCD=SYN\n***                                                                 ***\n*        STOP THE WRITER                                              *\n***                                                                 ***\nJRPRTRN  DS   0H\n         XR    R15,R15\n*        RETURN TO CALLER\n         JRPRTRN\n*----------------------------------------------------------------------\nP3ADJCNT DS    0H                  ADJUST LINE COUNT\n         L     R0,J1DCURPO         LOAD R0 WITH NUMBER OF LINES WRITTEN\n         L     R1,FWONE            LOAD R1 WITH FULL WORD OF 1\n         SR    R0,R1               SUBTRACT 1 FOR CARRIAGE RETURN\n         ST    R0,J1DCURPO         SAVE NEW NUMBER OF LINES\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJ132 DS    0H                  HANDLE POSITION 132 OF PREVIOUS LINE\n         ST    R14,R14SAVE5        SAVE REG 14 RETURN ADDRESS\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYL132         LOAD ADDRESS OF DUMMY 132 BYTE LINE\n         LA    R0,131              LENGTH OF 131\n         BAL   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R14,R14SAVE         LOAD REG 14 WITH ADR OF LINE FEED\n         MVC   0(1,R14),P132CHAR   CHANGE LINE FEED TO SPACE\n         S     R14,FWONE           SUBTRACT 1 TO POINT TO DUMMY CHAR $\n         MVI   0(R14),C' '         MAKE POSITION 131 A BLANK\n         MVI   P132CHAR,X'00'      CLEAR POSITION 132 CHARACTER\n         BAL   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         BAL   R14,P3ADJIMM        GO ADJUST IMMEDIATE CC IF ANY\n         L     R14,R14SAVE5        RESTORE REG 14 RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJIMM DS    0H                  ADJUST IMMEDIATE CC IF ANY\n         CLI   P132CHAR+3,X'00'    WAS THERE AN IMMEDIATE CC COMMAND ?\n         BE    P3ADJIMR            NO.   RETURN TO CALLER.\n         CLI   P132CHAR+3,X'8B'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n         BE    P3ADJIMR            YES.  RETURN TO CALLER.\n******** CLI   P132CHAR+3,X'89'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n******** BE    P3ADJIMR            YES.  RETURN TO CALLER.\n         MVI   P132CHAR+1,X'FF'    SET 132 LENGTH EXCEPTION FLAG ON\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         ST    R14,R14SAVE3        SAVE REG 14\n         MVC   J1DCONCH(1),P132CHAR+3  MOVE IMMEDIATE CC COMMAND\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         XR    R0,R0               ZERO LENGTH\n         BAL   R14,P3WLOCS         PUT IMMEDIATE PART\n         MVI   P132CHAR+2,X'00'    CLEAR TEMP IMMEDIATE CC COMMAND\n         MVI   P132CHAR+3,X'00'    CLEAR HOLD IMMEDIATE CC COMMAND\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         L     R14,R14SAVE3        RESTORE REG 14\n         MVI   P132CHAR+1,X'00'    SET 132 LENGTH EXCEPTION FLAG OFF\nP3ADJIMR DS    0H\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\n         TITLE  'V T A M  W R I T E R'\nP3WLOCS  DS   0H\n         ST    R0,J1DISIZ          L'\n         ST    R1,J1DILOC          ADDR\nP3WLOC   DS    0H\n         ST    R14,J1DWRET         SAVE RETURN\n*\n**       SUPRESS SKIP IF FIRST FOR D.S.\n*\n         TM    J1DFLAG1,J1DNEWDS\n         BNO   P3WNNEW             NOT A NEW D.S.\n         NI    J1DFLAG1,255-J1DNEWDS\n         CLI   J1DCONCH,X'8B'      IS 1ST CMD A SKIP CH1?\n         BE    P3WRET              YES-SUPRESS IT-HEADER ALREADY AT CH1\n         CLI   J1DCONCH,X'89'      CH 1 AFTER\n         BNE   P3WNNEW             NO-NORMAL\n         MVI   J1DCONCH,X'09'      MAKE 1 SP AFTER\nP3WNNEW  DS    0H                  NO SUPRESSION\n**       XLATE 328X CTRL/NON-PRINTS OUT\n         LM    R0,R1,J1DILOC       GET ADDR,LENGTH OF LINE\n         LM    R14,R15,J1DILOC     \"\n         SH    R15,=H'1'           -1 FOR EXECUTE INSTR\n         BM    P3WNOTR             LEN = ZERO - NO XLATE\n         LA    R6,P3STBL\n         EX    R15,P3STR           XLATE 3270 CTRL CHARS OUT\nP3WNOTR  DS    0H\n*        MOVE PRINTLINE TO BUFFER\n         C     R1,=F'256'          MAX WIDTH (LENGTH OF LINE)\n         BL    *+8                 OK\n         L     R1,=F'256'          FORCE DOWN TO MAX LENGTH\n         L     R14,J1DBFPTR        GET OUTPUT BUFFER NXT AVAL.*\n         OC    J1DRETLM,J1DRETLM   IO ERR RETRY?\n         BNZ   P3WRETRY            YES-GO TO WRITE\n         TM    J1DCONCH,X'02'      IMMEDIATE COMMAND (SPACE ONLY)\n         BO    P3WIMMA             YES - DONT MOVE DATA - SET FLAG\n*******  BO    P3WIMM              YES - DONT MOVE DATA\n         LR    R15,R1              NOT IMM. MOVE DATA TO BUFFER\n         MVCL  R14,R0              R14 WILL POINT AFTER LAST BYTE\nP3BKSCAN DS    0H\n         BCTR  R14,0               BACK UP ONE BYTE\n         CLI   0(R14),C' '         IS IT BLANK\n         BE    P3BKSCAN            YES-BACK UP ANOTHER\n*              CANT BACK UP OUT OF  BUFFER SINCE WCC IS FIRST BYTE\n         LA    R14,1(R14)          R14 POINTS TO NEXT AVALIABLE BYTE\n*----------------------------------------------------------------------\n         L     R1,J1DISIZ          LOAD LINE LENGTH IN REG 1\n         C     R1,=F'132'          IS LINE LENGTH = 132 ?\n         BNE   P3WIMM              NO.   CONTINUE.\n         L     R1,J1DILOC          LOAD LINE DATA ADDRESS\n         CLI   131(R1),C' '        IS LAST BYTE A SPACE ?\n         BE    P3WIMM              YES.  CONTINUE.\n         S     R14,FWONE           NO.   SUBTRACT 1 FROM BUFFER ADR.\n         MVC   P132CHAR(1),0(R14)  SAVE POSITION 132.\n         MVI   0(R14),X'0D'        MAKE POSITION 132 A CARRIAGE RETURN\n******** MVI   P132CHAR+1,X'FF'    INDICATE 132 LENGTH USED\n         MVC   P132CHAR+3(1),P132CHAR+2   SAVE IMMEDIATE CC IF ANY\n         MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC\n*----------------------------------------------------------------------\n         B     P3WIMM              CONTINUE\n*----------------------------------------------------------------------\nP3WIMMA  DS    0H\n         MVC   P132CHAR+2(1),J1DCONCH   SAVE IMMEDIATE CC COMMAND\n*----------------------------------------------------------------------\nP3WIMM   DS    0H                  IMMEDIATE DATA\n         TM    J1DCONCH,X'C0'      SKIP COMMAND\n         BNZ   P3SKIP              YES-CALC # LINE FEEDS TO HEAD\nP3WSPAC  DS    0H                  CHANGE SPACING TO NL(X'15')S\n         IC    R1,J1DCONCH         GET CARRIAGE\n         N     R1,=X'00000018'     MASK OFF JUNK\n         BNZ   P3ADDSRL            PUT OUT NLS\n         LA    R1,1*8              FORCE AT LEAST 1 SP\nP3ADDSRL DS    0H\n         SRL   R1,3                SHIFT TO GET SPACING\nP3ADDLN  DS    0H                  LOOP ADDING NLS TO BUFFER\n         L     R0,J1DCURPO         GET CURRENT LINE #\n         AR    R0,R1               ADD NEW SPACING\n         ST    R0,J1DCURPO         STORE IT\nP3ADDNL  DS    0H\n         MVI   0(R14),X'15'        NEW LINE CHAR\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          NEW OUTPUT ADDR\n         BCT   R1,P3ADDNL          LOOP\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3ADDEM             NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3ADDEM             YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3ADDEM  DS    0H\n*\n**       SEE IF BUFFER FULL YET\n*\n         ST    R14,J1DBFPTR        SAVE CURR POS.\n         TM    J1DFLAG2,J1DTRUNC   FORCE WRITE\n         BO    P3WFRC              YES\n         LA    R0,P3DBUFR+400       LOAD END OF BUFFER-LEADWAY\n         CR    R14,R0               SQUEZE ANOTHER RECORD?\n         BL    P3WRET               YES-GET NEXT\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3WFRC              NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WFRC              YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         S     R14,FWONE           SUBTRACT 1 TO POSITION AT 131\n         CLI   0(R14),C'$'         ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRA              YES.  GO HANDLE 132 LEN EXCEPTION.\n         CLI   P132CHAR+1,X'00'    ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRB              NO.   CONTINUE.\nP3WFRA   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n         B     P3WRET              YES.  MAKE SURE 132 LEN ROUTINE ENDS\nP3WFRB   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WFRC   DS    0H\nP3WRETRY DS    0H\n         CLI   J1DHSCS,C'Y'\n         BE    P3WRYSCS\n         MVI   0(R14),X'19'        PUT EOM IN\n*----------------------------------------------------------------------\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WRETR3            YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         LTR   R14,R14             CHECK FOR VALID ADDRESS\n         BZ    P3WRETR2            NO ADDRESS  CONTINUE\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BE    P3WRETR2            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LAST LINFEED TO C/R\n         S     R14,FWONE           SUBTRACT 1 TO CHECK FOR EOM\n         CLI   0(R14),X'19'        WAS EOM INSERTED FOR 132 LEN LINE ?\n         BNE   P3WRETR1            NO.   CONTINUE.\n         MVC   0(2,R14),=X'0D19'   TRANSPOSE C/R EOM FOR 132 LEN LINE\nP3WRETR1 DS    0H\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAL   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         MVC   R14SAVE(4),=X'FFFFFFFF'  INDICATE LAST LINE FEED HANDLED\nP3WRETR2 DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WRETR3 DS    0H\n         LA    R14,1(R14)          NEXT BYTE\nP3WRYSCS LA    R4,P3DBUFR          GET START\n         SR    R14,R4              LENGTH\n         LR    R10,R14             LENGTH\n         TM    J1DFLAG1,J1DBEGIN\n         BO    VTMWRITE          NO  CONTINUE TO PROCESS WRITE\n         L     R9,J1DRPL\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    SIMLOG              YES  CONTROL BLOCKS O.K.\n*\n**       BUILD DYNAMIC VTAM CONTROL BLOCKS\n*\nVTAMDYN  DS    0H\n         GENCB AM=VTAM,BLK=NIB,MODE=RECORD,LISTEND=YES,                X\n               MF=(G,P3DNIBGN)\n         MVC   J1DWERRM(4),=C'E400'\n         MVC   J1DWERR1,=CL25'NIB GENCB FAILED'\n         LTR   R15,R15\n         BNZ   P3FATALF\n         LR    R4,R1\n         ST    R4,J1DNIB\n         SPACE\nP3WRPLGN DS    0H\n         L     R6,J1DACB\n         GENCB AM=VTAM,BLK=RPL,ACB=((R6)),POST=RESP,OPTCD=SYN,         X\n               NIB=((R4)),CONTROL=DATA,MF=(G,P3DRPLGN)\n         MVC   J1DWERRM(4),=C'E401'\n         MVC   J1DWERR1(25),=CL25'RPL GENCB FAILED'\n         LTR   R15,R15          CHECK RETURN CODE\n         BNZ   P3FATALF         IF NOT ZERO DIE\n         LR    R9,R1           LOAD ADDRESS OF RPL IN REG 9\n         ST    R9,J1DRPL        SAVE IN FULL WORD AREA\n         USING IFGRPL,R9\n         CLI   J1DHSCS,C'Y'\n         BE    P3RPLSCS\n         OI    RPLRH3,P3DBBFLG   BRACKET=(BB,EB) NON SNA\n         OI    RPLRH3,P3DEBFLG\n         MVC   P3DMDFLG(1),RPLRH3 SET RPL FOR NON SNA BRACKETS\nP3RPLSCS MVC   NIBSYM-ISTDNIB(8,R4),P3DLUID\n         OI    RPLRH3-IFGRPL(R9),RPLBB\nSIMLOG   DS    0H\n         CLI   P3DLGMD,C' '\n         BNE   P3DACQ\n         SIMLOGON RPL=(R9),OPTCD=(SYN,RELRQ,Q)\n         LTR    R15,R15\n         BNZ    P3RETRY\nOPENPRT  DS    0H\n         OPNDST RPL=(R9),OPTCD=(SYN,ACCEPT,NQ,SPEC)\n         LTR   R15,R15\n         BZ    VTMWRITE\n         B     P3RETRY\nP3DACQ   DS    0H\n         MVC   NIBLMODE-ISTDNIB(8,R4),P3DLGMD\n         OPNDST RPL=(R9),OPTCD=(SYN,ACQUIRE)\n         LTR   R15,R15\n         BNZ   P3RETRY\nVTMWRITE DS    0H\n         OI    J1DFLAG1,J1DBEGIN OPNDST HAS BEEN SUCCESSFULLY ISSUED\n         L     R9,J1DRPL\n         ST    R10,RPLRLEN-IFGRPL(R9)     STORE RECORD LENGTH\n         SEND  RPL=(R9),STYPE=REQ,CONTROL=DATA,POST=RESP,              X\n               OPTCD=(SYN,CA),AREA=P3DBUFR,                            X\n               RESPOND=(NEX,FME,NRRN),CHAIN=ONLY\nP3VTAMXX DS    0H\n         LTR   R15,R15             SUCCESSFUL\n         BNZ   P3RETRY             YES CONTINUE\nP3WCKCMP DS    0H\n         MVC   J1DHSTAT(10),=CL10'ACTIVE'\n         MVC   RPLRH3-IFGRPL(1,R9),P3DMDFLG   RESET BRACKET\n         LA    R14,P3DBUFR                    GET BUFFER\n         CLI   J1DHSCS,C'Y'                   IS THIS SCS\n         BE    P3WSCSY                        YES BRANCH AROUND\n         MVC   0(2,R14),=X'F5C8'              MOVE IN BISYNC 3270\n         LA    R14,2(R14)          LOCAL CONTROL CHAR BYPASS\nP3WSCSY  ST    R14,J1DBFPTR        RESET PTR\n         NI    J1DFLAG2,255-J1DTRUNC RESET FORCED WRITE\n         XC    J1DRETLM,J1DRETLM   YES - RESET RETRY COUNTER\nP3WRET   DS    0H                  RETURN\n         L     R14,J1DWRET         \"\n         BR    R14                 \"\nP3SKIP   DS    0H                  HANDLE SKIP COMMAND\n         CLI   J1DCONCH,X'89'      SKIP CH 1 AFTER\n         BE    P3SKIP1             YES\n         CLI   J1DCONCH,X'8B'      SKIP CH 1 IMM.\n         BE    P3SKIP1             YES\n         B     P3WSPAC             FORCE TO SPACING COMMAND\nP3SKIP1  DS    0H                  CALC # OF NLS TO TOP OF FORM\n******** CLI   J1DHSCS,C'Y'        GET CURRENT POS.\n******** BNE   P3SKIP2             CLEAR\n         MVI   0(R14),X'0C'        DIVIDE BY LINES/PAGE\n         LA    R14,1(R14)          LINES/PAGE\n*----------------------------------------------------------------------\n         MVI   0(R14),X'0D'        CHANGE WOULD-BE LINE FEED TO C/R\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          SAVE ADDRESS OF NEXT BUFFER POSITION\n*----------------------------------------------------------------------\n         B     P3ADDEM             MINUS REMAINDER = # OF NLS\nP3SKIP2  DS    0H                  CALC # OF NLS TO TOP OF FORM\n         L     R1,J1DCURPO         GET CURRENT POS.\n         XR    R0,R0               CLEAR\n         D     R0,J1DLEN           DIVIDE BY LINES/PAGE\n         L     R1,J1DLEN           LINES/PAGE\n         SR    R1,R0                MINUS REMAINDER = # OF NLS\n         B     P3ADDLN             INSERT NLS\nP3RETRY  DS    0H\nP30811   CLC   RPLSSEI-IFGRPL(2,R9),=X'0811'    PRINT CANCEL\n         BNE   P30821\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'CANCEL'\n         B     P3WCKCMP\nP30821   CLC   RPLSSEI-IFGRPL(2,R9),=X'0821'   BIND ERROR\n         BNE   RETRYCMP\n         MVI   J1DRETLM+1,X'64'    IS IT AT 100 YET\nRETRYCMP DS    0H\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    P3RETRYA            YES  NO CLSDST RPL NOT OPENED.\n         CLSDST RPL=(R9),OPTCD=(SYN,RELEASE)\n         NI    J1DFLAG1,255-J1DBEGIN  TURN OFF OPNDST FLAG\nP3RETRYA OI    J1DFLAG1,J1DIOERR   LET CALL DECIDE WHAT TO DO\n         B     P3WRET              RETURN(RE-CALL AT TWWLOC TO RETRY)\n         TITLE 'CHECK FOR STOP/MODIFY'\nP3FATALF DS    0H\n         CVD   R15,J1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         UNPK  J1DWERR2,J1DWORK+6(2) 999 MAX RC SUPPORTED\n         OI    J1DWERR2+L'J1DWERR2-1,C'0' MAKE PRINTABLE\n         LA    R0,L'J1DWERR-4      LENGTH\n         LA    R1,J1DWERR+4        ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DWERR          GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         MVC   J1DHSTAT(6),=C'ABENDU'\n         MVC   J1DHSTAT+6(3),=C'300'\n         OI    J1DFLAG1,J1DRTLM    MUST ISSUE $S\n         OI    J1DFLAG1,J1DKEEP    UNALLOCATE AND KEEP DATASET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOBNUM FOR HEADER\n         ABEND  300,DUMP           ABEND USER 300\nJ2SYN    EQU    *\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         TITLE 'LITERAL POOL'\n*        JRPSMAC\nP3STR    TR    0(*-*,R14),0(R6)    EXECUTED\n         DS    0F\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nBLANKS   DC    CL16' '\n         SPACE 2\nP3STBL   DC    256C' '\nUPCTBL   EQU   P3STBL\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    X'81,82,83,84,85,86,87,88,89'\n         ORG   UPCTBL+X'91'\n         DC    X'91,92,93,94,95,96,97,98,99'\n         ORG   UPCTBL+X'A2'\n         DC    X'A2,A3,A4,A5,A6,A7,A8,A9'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\nP3STBL1  DC    256X'F0'\n         ORG   P3STBL1+X'F0'\n         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         ORG\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nP3SDCBIS EQU   *\nP3SDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN\nP3SDCBIE EQU   *\nP3SATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3SWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\nP3SMDL   EQU   *-P3SWA\n         SPACE 2\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP3DWA    DS    0F\nP3DDCBIS EQU   *\nP3DDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN\nP3DDCBIE EQU   *\nP3DATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3DWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F                  ALIGN\nP3DNIBGN NIB   MODE=RECORD\nP3DRPLGN RPL   AM=VTAM\n         DS    0F\nST4      DS    F\nST5      DS    F\nST6      DS    F\n*----------------------------------------------------------------------\nFWONE    DS    F\nDUMYLINE DS    2F\nP132CHAR DS    F\nR0SAVE   DS    F\nR1SAVE   DS    F\nR14SAVE  DS    F\nR14SAVE2 DS    F\nR14SAVE3 DS    F\nR14SAVE4 DS    F\nR14SAVE5 DS    F\n*----------------------------------------------------------------------\n*********P3DBUFR  DS    CL768\nP3DBUFR  DS    CL920\nP3DWORK  DS    D\nP3DLUID  DS    CL8\nP3DLGMD  DS    CL8\nP3DIOER  DS    PL2\nP3DMDFLG DS    X\n*----------------------------------------------------------------------\nDUMYL132 DS    CL132\n*----------------------------------------------------------------------\n*\nP3DCLRE  EQU   *                   END OF DYNAMIC AREA\nP3DSASIZ EQU   *-P3DWA             SIZE OF DYNAMIC AREA\nP3DBBFLG EQU   X'80'\nP3DEBFLG EQU   X'40'\n         JRPREGS\n         DCBD   DSORG=PS\n         IFGRPL AM=VTAM             RPL\n         ISTDNIB                     NIB\n         JRPDMAC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP300RT": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93\\x19\\x7f\\x00\\x99\\x17?\\x08U\\x03\\xdf\\x03\\xdd\\x009\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-16T00:00:00", "modifydate": "1999-06-22T08:55:00", "lines": 991, "newlines": 989, "modlines": 57, "user": "JRP"}, "text": "JRP300 TITLE '328X PRINTER SUBTASK'\n         TITLE 'START-UP'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP300                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  PRINTER SUBTASK ROUTINE  FOR JRP    *\n*                            328X PRINTER\"S                           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED =  12/14/87  BY  LEWIS D. WHALEY              *\n*                                        SENIOR SYSTEMS ENGINEER      *\n*                                        NUCLEAR FUEL SERVICES, INC.  *\n*                                        205 BANNER HILL ROAD         *\n*                                        ERWIN, TN  37650             *\n*                                        (615) 743-9141  EXT: 363     *\n*                                                                     *\n*             STATUS =  MODIFIED TO HANDLE SUPPRESS PRINT CONTROL     *\n*                                                                     *\n*              MODIFIED =   7/06/93  BY  RONALD TANSKY                *\n*                                        SYSTEM PROGRAMMER            *\n*                                        WEBCRAFT, INC.               *\n*                                        4371 COUNTY LINE ROAD        *\n*                                        CHALFONT, PA 18914           *\n*                                        (215) 997-5371               *\n*                                                                     *\n*             STATUS =  REPEATED HEADER LINES                         *\n*                       FIXED ABEND0C4 THAT HIT ON SOME LINES THAT    *\n*                         WERE 132 COLUMNS WIDE                       *\n*                       CHANGED ALL 'BAL' TO 'BAS'.  IF YOU DON'T     *\n*                         HAVE MVS/XA OR BETTER, YOU MAY HAVE TO      *\n*                         CHANGE THEM BACK                            *\n*                       CHANGED DCB AND DCBD TO AVOID WARNINGS        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES =                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP300     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = -- BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP---- (ONLY ENTRY POINT)               *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP---- AS A SUBROUTINE                      *\n*                                                                     *\n*             INPUT = R9 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P3DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY                                         *\n* 21JUN99 DHC MOVED TRANSLATE TABLES FOR ADDRESSABILITY          *DHC**\n*                                                                     *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                CONN. MUTUAL LIFE INS. CO.                           *\n*                                                                     *\n*             ABEND CODES = U300                                      *\n*                                                                     *\n***********************************************************************\nJRP300 CSECT\n         JRPSAVE REG=12,ID=*,LV=P3DSASIZ\n         PRINT NOGEN\n         USING P3DSA,R13\n         L     R11,0(R1)            GETMAINED AREA\n         USING J1DWA,R11\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R0,41\n         SVC   95\n         MODESET KEY=NZERO,MODE=PROB\n*\n**       MOVE MODEL DATA TO GOTTEN AREA, ZERO REST.\n*\nP3WINIT  DS    0H\n         LA    R0,P3DWA          START OF DYNAMIC AREA\n         LA    R1,(P3DCLRE-P3DWA) LENGTH OF DYNAMIC AREA\n         L     R14,=A(P3SWA)       START OF STATIC DATA\n         LA    R15,P3SMDL          LENGTH OF MODEL DATA\n         MVCL  R0,R14              MOVE W/ZERO TO BE RENT,REUS\n         ZAP   P3DIOER,=P'0'\n         NI    J1DFLAG2,255-J1DFLUSH\n         NI    J1DFLAG1,255-J1DRTLM\n         NI    J1DFLAG1,255-J1DKEEP\n         NI    J1DFLAG1,255-J1DBEGIN\n         MVC   P3DLUID(8),J1DLUID\n         MVC   P3DLGMD(8),J1DLGMD\n         MVC   J1DBROK1(2),=C'00'\n         MVC   J1DBROK2(2),=C'00'\n         MVC   J1DBROK3(8),=C'00000000'\n*----------------------------------------------------------------------\n         MVC   FWONE(4),=X'00000001'\n*******  MVC   DUMYLINE(8),=C'########'\n         MVC   DUMYLINE(8),=C'        '\n         MVC   P132CHAR(4),=X'00000000'\n         MVC   DUMYL132+0(1),=C' '\n         MVC   DUMYL132+1(131),DUMYL132\n         MVI   DUMYL132+130,C'$'\n*----------------------------------------------------------------------\nP3GPRST  DS    0H\n         XR    R2,R2               CLEAR R2 FOR COUNTER\n         MVI   J1DOPENX,X'80'      ONLY ONE IN LIST\n         LA    R6,P3DBUFR\n         CLI   J1DHSCS,C'Y'\n         BE    P382NNEW\n         MVC   0(2,R6),=X'F5C8'\n         LA    R6,2(R6)\nP382NNEW DS    0H\n         ST    R6,J1DBFPTR\n***                                                                 ***\n*   INITIALIZE INPUT DCB                                              *\n***                                                                 ***\n         MVC   DCBDDNAM-IHADCB+P3DDCBIS(8),J1DDNM PUT DDNAME IN DCB\n         LA    R15,P3DDCBI        GET INPUT DCB ADDR\n         OPEN  ((R15),INPUT),MF=(E,J1DOPENX)\n         TM    J1DFLAG2,J1DHDR\n         BNO   P3GNTPUT\n         MVC   J1DOPERM(4),=C'I400'\nP3UNSOL  DS    0H\n         LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\nTPUT     LA    R0,L'J1DBFR         LENGTH\n         LA    R1,J1DBFR           ADDR OF P3G\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DBFR),J1DBFR\n         LA    R1,J1DOPER\n         SVC   35\nP3GNTPUT NI    J1DFLAG1,255-J1DEOF RESET END-OF-FILE FLAG\n         CLI   J1DSEP,C'N'         PAGE SEPERATORS DESIRED?\n         BE    P3GNSEP             NO-SKIP IT\n         TM    J1DFLAG2,J1DHDR     ARE THERE HEADERS REQUIRED??\n         BNO   P3GNSEP             NO-SKIP IT\nP3GNDATE DS    0H                  NO PRINT TODAY\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'09'       SP1 AFTER\n         BAS   R14,P3WLOCS         PRINT HEADER\n         LA    R1,J1DBEG\n         LA    R0,L'J1DBEG\n         MVI   J1DCONCH,X'8B'       SK1 IMMED\n         BAS   R14,P3WLOCS         PRINT HEADER\nP3GNSEP  DS    0H                  SKIP DATASET HEADER\n         OI    J1DFLAG1,J1DNEWDS   SET FLAG TO SUPPRESS 1ST SKIP\n         B     P3GET\n         TITLE  'LOOP GETTING/WRITING DATA SET UNTIL END'\nP3GLOOP  DS    0H\n         GET   P3DDCBI\n         CLC   J1DMLNE,=F'0'      THIS FIX ALLOWS MLIN TO      JRP0001\n         BE    P3KPRNT             BE NULLIFIED BY MLIN=0      JRP0001\n         LA    R2,1(R2)\n         C     R2,J1DMLNE\n         BNH   P3KPRNT\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'MAXLINE'\n         MVC   J1DOPERM(4),=C'W400'\n*\n**       GET CARRAGE, LINE LEN., AND LOCATION FOR WRITER.\n*\nP3KPRNT  LH    R0,DCBLRECL-IHADCB+P3DDCBI GET DEF. LRECL\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECU UNDEFINED\n         BO    P3GNOTV             YES\n         TM    DCBRECFM-IHADCB+P3DDCBI,DCBRECV VARIABLE\n         BNO   P3GNOTV             NO\n         LH    R0,0(R1)            GET REC LEN\n         LA    R1,4(R1)            SKIP RDW\n         SH    R0,=H'4'            SKIP RDW LEN.\nP3GNOTV  DS    0H\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'02' MACH. CARRIAGE\n         BNO   P3FRC1SP            NO-TRY ASCII\n         MVC   J1DCONCH,0(R1)\nP3ADJREG DS    0H\n         LA    R1,1(R1)            SKIP CC\n         BCTR  R0,0                SKIP CC LEN.\n         B     P3PUTIT             SETUP FOR WRITER\nP3FRC1SP DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         TM    DCBRECFM-IHADCB+P3DDCBI,X'04' ASCII\n         BNO   P3PUTIT             NO CARRIAGE\n*\n**       BREAK ASCII COMMAND DOWN INTO IMM. AND PRINT\n*\n         STM   R0,R1,J1DSAV01      SAVE STRT, LEN\n         LA    R14,=X'F00B6013F18B'  ASCII XLATE TBL\n         LA    R15,3          L' OF TABLE(3 PAIRS)\n***********************************************************************\n*        IDEA IS TO PRINT ALL W/ 1SP AFTER.\n*        NOTE NO SUPPORT FOR '+' - OVERPRINT.\n*        SO '0' = (SP 1 IMM)+(PR W/ 1 SP AFTER)\n*           '-' = (SP 2 IMM)+(PR W/ 1 SP AFTER)\n*           '1' = (SK CH 1 IMM)+(PR W/ 1 SP AFTER)\n*           ' ' OR '+' = (PR W/ 1 SP AFTER)\n***********************************************************************\nP3FRLOC  DS    0H\n         CLC   0(1,R14),0(R1)\n         BE    P3FRFND             FOUND ASCII ARG. CHAR\n         LA    R14,2(R14)          NEXT PAIR\n         BCT   R15,P3FRLOC\n         B     P3ADJREG            UNKNOWN - FORCE 1 SP\nP3FRFND  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE4        SAVE REG 14    (ORIGINAL)\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP9             NO.   CONTINUE.\nP3SUPP8  DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP8A            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP10            CONTINUE\nP3SUPP8A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP10            CONTINUE\nP3SUPP9  DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP10            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\nP3SUPP10 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPZ  DS    0H\n*----------------------------------------------------------------------\n         MVC   J1DCONCH,1(R14)     MOVE IMMEDIATE PART OF ASCII\n         XR    R0,R0               ZERO LENGTH\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n*----------------------------------------------------------------------\n******** MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC COMMAND FLAG\n*----------------------------------------------------------------------\n         LM    R0,R1,J1DSAV01      RESTORE JRPREGS\n         MVI   J1DCONCH,X'09'      1SP AFTER\n         B     P3ADJREG            ADJ JRPREGS AROUND CARRIAGE\n*\n**       NORMAL PUT INTERFACE\n*\nP3PUTIT  DS    0H\n*----------------------------------------------------------------------\n         ST    R14,R14SAVE2        SAVE REG 14\n         ST    R14,R14SAVE2        SAVE REG 14    (ORIGINAL)\n         LR    R14,R1              LOAD REG 14 WITH REG 1\n         S     R14,FWONE           POINT TO CC BYTE IN PRINT LINE -1\n         CLI   0(R14),X'01'        IS FBM CC FOR SUPPRESS PRINT ?\n         BE    P3SUPP11            YES.  GO HANDLE.\n         CLI   0(R14),C'+'         IS FBA CC FOR SUPPRESS PRINT ?\n         BNE   P3SUPPV             NO.   CONTINUE.\nP3SUPP11 DS    0H                  CURRENT CC IS SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP13            NO.   CONTINUE.\nP3SUPP12 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         B     P3SUPP14            CONTINUE\nP3SUPP13 DS    0H\n         LTR   R14,R14             CHECK FOR VALID ADDRESS OF LAST LF\n         BZ    P3SUPP14            NO ADDRESS  CONTINUE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BNE   P3SUPP14            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\nP3SUPP14 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\n         B     P3SUPPW             CONTINUE\nP3SUPPV  DS    0H                  CURRENT CC IS NOT SUPPRESS SPACING\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BNE   P3SUPP16            NO.   CONTINUE.\nP3SUPP15 DS    0H\n         XR    R14,R14             CLEAR REG 14\n         ST    R14,R14SAVE         SAVE REG 14\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUP15A            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         B     P3SUPP17            CONTINUE\nP3SUP15A DS    0H\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         LA    R0,8                LENGTH OF 8\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         B     P3SUPP17            CONTINUE\nP3SUPP16 DS    0H\n******** NOTE  -  HANDLE POSITION 132 OF PREVIOUS LINE\n         CLI   P132CHAR,X'00'      WAS LAST LINE 132 LENGTH ?\n         BE    P3SUPP17            NO.   CONTINUE.\n         BAS   R14,P3ADJ132        HANDLE PREVIOUS 132 LENGTH LINE\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\nP3SUPP17 DS    0H\n         L     R14,R14SAVE4        RESTORE REG 14    (ORIGINAL)\nP3SUPPW  DS    0H\n*----------------------------------------------------------------------\n         BAS   R14,P3WLOCS\n         B     P3GET\nP3GCALLW DS    0H                  RE-CALL WTR - USE PREV. R0/R1\n         BAS   R14,P3WLOC          GO TO VTAM WRITER\nP3GET    DS    0H                  GET NEXT RECORD\n         TM    J1DFLAG2,J1DPURGE\n         BNO   P3CKSTOP\n         MVC   J1DHSTAT(10),=CL10'DRAINING'\nP3CKSTOP TM    J1DFLAG1,J1DSTOP    WAS STOP ISSUED DURING VTAM WRITE\n         BNO   P3CKFLSH\n         OI    J1DFLAG1,J1DKEEP\n         B     P3GEOD              YES-SIM. EODAD\nP3CKFLSH TM    J1DFLAG2,J1DFLUSH   FLUSH AND PURGE CURR. D.S.\n         BNO   P3CKIOER            NO FLUSH - CK FOR I/O ERR\n         TM    J1DFLAG1,J1DKEEP\n         BNO   P3SYNFL\n         MVC   J1DOPERM(4),=C'I402'\n         MVC   J1DWHY,=CL10'RESTARTED'\n         B     P3FLUSHR\nP3SYNFL DS     0H                                               9041\n         MVC   J1DOPERM(4),=C'I401'\n         MVC   J1DWHY,=CL10'TERMINATED'\nP3FLUSHR NI    J1DFLAG2,255-J1DFLUSH\n         CLI   J1DHSCS,C'Y'\n         BE    *+10\n         MVC   P3DBUFR(2),=X'F5C8' RESET WRITE CONTROL CHAR\n         LA    R0,L'J1DFLSMS\n         LA    R1,J1DFLSMS         FLUSH MESSAGE\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n* SEND FLUSH MESSAGE TO USER IF APPLICABLE\n         TPUT  (1),(0),EDIT,NOWAIT,NOHOLD,BREAKIN,LOWP,           XXXXXX\n               USERIDL=J1DJOBN\n         MVC   J1DOPER1(L'J1DFLSMS),J1DFLSMS\n         LA    R1,J1DOPER          GET FLUSH P3G\n         SVC   35\n         LA    R1,J1DFLSMS         GET FLUSH P3G\n         LA    R0,L'J1DFLSMS\n         MVI   J1DCONCH,X'89'      CH1 AFTER\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE(TRUNC)\n         BAS   R14,P3WLOCS\n         B     P3GECLS             CLOSE OUT\n*\n**       SYNAD  ROUTINE ON JES INPUT D.S.\n*\nP3SYN    DS    0H                                               9041\n         AP    P3DIOER,=P'1'\n         CP    P3DIOER,=P'20'\n         BL    P3GLOOP\n         MVC   J1DWHY(10),=C'CANCELED'\n         MVC   J1DBYWHO,=CL8'IO ERROR'                          9041\n*        OI    J1DFLAG1,J1DKEEP                 LINE DELETED\n         B     P3SYNFL             FLUSH DATASET                9041\n*\n**       CHECK FOR I/O ERROR\n*\nP3CKIOER DS    0H\n         TM    J1DFLAG1,J1DIOERR         IO ERR\n         BNO   P3GRSET             NO - GET NEXT\n         MVC   J1DHSTAT(10),=CL10'RETRYING'\n         LH    R1,J1DRETLM         GET CURRENT RETRY LIMIT\n         LA    R1,1(R1)            BUMP\n         STH   R1,J1DRETLM\n         L     R9,J1DRPL\n         MVC   P3DWORK+6(1),RPLRTNCD-IFGRPL(R9) RTNCD=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK1(3),P3DWORK+6(2)\n         LA    R14,J1DBROK1\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK1+2,C' '\n         MVC   P3DWORK+6(1),RPLFDB2-IFGRPL(R9) FDBK2=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK2(3),P3DWORK+6(2)\n         LA    R14,J1DBROK2\n         LA    R15,2\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK2+2,C' '\n         MVC   P3DWORK+3(4),RPLSSEI-IFGRPL(R9) SENSE=\n         MVI   P3DWORK+7,X'0C'\n         UNPK  J1DBROK3(9),P3DWORK+3(5)\n         LA    R14,J1DBROK3\n         LA    R15,8\n         LA    R6,P3STBL1\n         EX    R15,P3STR\n         MVI   J1DBROK3+8,C' '\n         TM    J1DRETLM+1,X'64'    IS IT AT 100 YET\n         BNO   P3WAIT              NO - NO NOTIFY OF OPER\n         MVC   J1DHSTAT(10),=CL10'RETRYLM'\n         OI    J1DFLAG1,J1DRTLM    RETRY LIMIT EXCEEDED\n         OI    J1DFLAG1,J1DKEEP    SAVE DATA-SET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOB NUMBER IN HEADER\n         XC    J1DRETLM,J1DRETLM   CLEAR COUNTER\n         LA    R0,J1DTPUTL         LENGTH\n         LA    R1,J1DTPUT          ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DCMT2          WTO LIST\n         SVC   35\n         B     P3GECLS\nP3WAIT   DS    0H\n         STIMER WAIT,BINTVL==F'2000' WAIT A WHILE (SEC * 100)\n         NI    J1DFLAG1,255-J1DIOERR\n         B     P3GCALLW            RE-TRY WRITE AGAIN\nP3GRSET  DS    0H\n         TM    J1DFLAG1,J1DEOF     AT EOF?\n         BO    P3GEOD1             YES-RETURN TO CLOSE CODE\n         B     P3GLOOP\n         TITLE  'END OF DATA SET'\nP3GEOD   DS    0H\n         OI    J1DFLAG2,J1DTRUNC   FORCE PHYSICAL WRITE\n         MVI   J1DCONCH,X'8B'      SKIP CH1 IMM.\n         LA    R1,J1DCONCH         DUMMY START ADDR\n         L     R9,J1DRPL\n         LTR   R9,R9\n         BZ    P3GEOD1\n         OI    RPLRH3-IFGRPL(R9),RPLEB   TELL VTAM END OF BRACKET\n         XR    R0,R0               LEN. = ZERO\n         BAS   R14,P3WLOCS         SKIP\nP3GEOD1  DS    0H                  SECONDARY ENTRY POINT\n         OI    J1DFLAG1,J1DEOF     SET END OF FILE\n         TM    J1DFLAG1,J1DSTOP    STOPPING?\n         BO    P3GECLS             YES-DONT CHECK FOR I/O ERROR\n         TM    J1DFLAG1,J1DIOERR   I/O ERROR ON FLUSH\n         BO    P3CKIOER            YES-GOTO ERROR RECOVERY CODE\nP3GECLS  EQU   *\n*\n**       CLOSE INPUT DCB AND FREE BUFFER POOL\n*\n         LA    R15,P3DDCBI\n         CLOSE ((R15),DISP),MF=(E,J1DOPENX)\n         FREEPOOL P3DDCBI          FREE BUFFER POOL\n         TITLE  'W A I T  F O R   W O R K  O R  S T O P  W R I T E R '\n         TM    J1DFLAG1,J1DBEGIN\n         BNO   JRPRTRN\n         L     R9,J1DRPL\n         CLSDST RPL=(R9),OPTCD=SYN\n***                                                                 ***\n*        STOP THE WRITER                                              *\n***                                                                 ***\nJRPRTRN  DS   0H\n         XR    R15,R15\n*        RETURN TO CALLER\n         JRPRTRN\n*----------------------------------------------------------------------\nP3ADJCNT DS    0H                  ADJUST LINE COUNT\n         L     R0,J1DCURPO         LOAD R0 WITH NUMBER OF LINES WRITTEN\n         L     R1,FWONE            LOAD R1 WITH FULL WORD OF 1\n         SR    R0,R1               SUBTRACT 1 FOR CARRIAGE RETURN\n         ST    R0,J1DCURPO         SAVE NEW NUMBER OF LINES\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJ132 DS    0H                  HANDLE POSITION 132 OF PREVIOUS LINE\n         ST    R14,R14SAVE5        SAVE REG 14 RETURN ADDRESS\n         MVI   J1DCONCH,X'09'      1SP AFTER IMMEDIATE\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         LA    R1,DUMYL132         LOAD ADDRESS OF DUMMY 132 BYTE LINE\n         LA    R0,131              LENGTH OF 131\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         L     R14,R14SAVE         LOAD REG 14 WITH ADR OF LINE FEED\n         MVC   0(1,R14),P132CHAR   CHANGE LINE FEED TO SPACE\n         S     R14,FWONE           SUBTRACT 1 TO POINT TO DUMMY CHAR $\n         MVI   0(R14),C' '         MAKE POSITION 131 A BLANK\n         MVI   P132CHAR,X'00'      CLEAR POSITION 132 CHARACTER\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         BAS   R14,P3ADJIMM        GO ADJUST IMMEDIATE CC IF ANY\n         L     R14,R14SAVE5        RESTORE REG 14 RETURN ADDRESS\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\nP3ADJIMM DS    0H                  ADJUST IMMEDIATE CC IF ANY\n         CLI   P132CHAR+3,X'00'    WAS THERE AN IMMEDIATE CC COMMAND ?\n         BE    P3ADJIMR            NO.   RETURN TO CALLER.\n         CLI   P132CHAR+3,X'8B'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n         BE    P3ADJIMR            YES.  RETURN TO CALLER.\n******** CLI   P132CHAR+3,X'89'    IS IMMEDIATE COMMAND FOR CHANNEL 1 ?\n******** BE    P3ADJIMR            YES.  RETURN TO CALLER.\n         MVI   P132CHAR+1,X'FF'    SET 132 LENGTH EXCEPTION FLAG ON\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         ST    R14,R14SAVE3        SAVE REG 14\n         MVC   J1DCONCH(1),P132CHAR+3  MOVE IMMEDIATE CC COMMAND\n         LA    R1,DUMYLINE         LOAD ADDRESS OF DUMMY LINE\n         XR    R0,R0               ZERO LENGTH\n         BAS   R14,P3WLOCS         PUT IMMEDIATE PART\n         MVI   P132CHAR+2,X'00'    CLEAR TEMP IMMEDIATE CC COMMAND\n         MVI   P132CHAR+3,X'00'    CLEAR HOLD IMMEDIATE CC COMMAND\n         L     R0,R0SAVE           RESTORE REG 0\n         L     R1,R1SAVE           RESTORE REG 1\n         L     R14,R14SAVE3        RESTORE REG 14\n         MVI   P132CHAR+1,X'00'    SET 132 LENGTH EXCEPTION FLAG OFF\nP3ADJIMR DS    0H\n         BR    R14                 RETURN TO CALLER\n*----------------------------------------------------------------------\n         TITLE  'V T A M  W R I T E R'\nP3WLOCS  DS   0H\n         ST    R0,J1DISIZ          L'\n         ST    R1,J1DILOC          ADDR\nP3WLOC   DS    0H\n         ST    R14,J1DWRET         SAVE RETURN\n*\n**       SUPRESS SKIP IF FIRST FOR D.S.\n*\n         TM    J1DFLAG1,J1DNEWDS\n         BNO   P3WNNEW             NOT A NEW D.S.\n         NI    J1DFLAG1,255-J1DNEWDS\n         CLI   J1DCONCH,X'8B'      IS 1ST CMD A SKIP CH1?\n         BE    P3WRET              YES-SUPRESS IT-HEADER ALREADY AT CH1\n         CLI   J1DCONCH,X'89'      CH 1 AFTER\n         BNE   P3WNNEW             NO-NORMAL\n         MVI   J1DCONCH,X'09'      MAKE 1 SP AFTER\nP3WNNEW  DS    0H                  NO SUPRESSION\n**       XLATE 328X CTRL/NON-PRINTS OUT\n         LM    R0,R1,J1DILOC       GET ADDR,LENGTH OF LINE\n         LM    R14,R15,J1DILOC     \"\n         SH    R15,=H'1'           -1 FOR EXECUTE INSTR\n         BM    P3WNOTR             LEN = ZERO - NO XLATE\n         LA    R6,P3STBL\n         EX    R15,P3STR           XLATE 3270 CTRL CHARS OUT\nP3WNOTR  DS    0H\n*        MOVE PRINTLINE TO BUFFER\n         C     R1,=F'256'          MAX WIDTH (LENGTH OF LINE)\n         BL    *+8                 OK\n         L     R1,=F'256'          FORCE DOWN TO MAX LENGTH\n         L     R14,J1DBFPTR        GET OUTPUT BUFFER NXT AVAL.*\n         OC    J1DRETLM,J1DRETLM   IO ERR RETRY?\n         BNZ   P3WRETRY            YES-GO TO WRITE\n         TM    J1DCONCH,X'02'      IMMEDIATE COMMAND (SPACE ONLY)\n         BO    P3WIMMA             YES - DONT MOVE DATA - SET FLAG\n*******  BO    P3WIMM              YES - DONT MOVE DATA\n         LR    R15,R1              NOT IMM. MOVE DATA TO BUFFER\n         MVCL  R14,R0              R14 WILL POINT AFTER LAST BYTE\nP3BKSCAN DS    0H\n         BCTR  R14,0               BACK UP ONE BYTE\n         CLI   0(R14),C' '         IS IT BLANK\n         BE    P3BKSCAN            YES-BACK UP ANOTHER\n*              CANT BACK UP OUT OF  BUFFER SINCE WCC IS FIRST BYTE\n         LA    R14,1(R14)          R14 POINTS TO NEXT AVALIABLE BYTE\n*----------------------------------------------------------------------\n         L     R1,J1DISIZ          LOAD LINE LENGTH IN REG 1\n         C     R1,=F'132'          IS LINE LENGTH = 132 ?\n         BNE   P3WIMM              NO.   CONTINUE.\n         L     R1,J1DILOC          LOAD LINE DATA ADDRESS\n         CLI   131(R1),C' '        IS LAST BYTE A SPACE ?\n         BE    P3WIMM              YES.  CONTINUE.\n         S     R14,FWONE           NO.   SUBTRACT 1 FROM BUFFER ADR.\n         MVC   P132CHAR(1),0(R14)  SAVE POSITION 132.\n         MVI   0(R14),X'0D'        MAKE POSITION 132 A CARRIAGE RETURN\n******** MVI   P132CHAR+1,X'FF'    INDICATE 132 LENGTH USED\n         MVC   P132CHAR+3(1),P132CHAR+2   SAVE IMMEDIATE CC IF ANY\n         MVI   P132CHAR+2,X'00'    CLEAR IMMEDIATE CC\n*----------------------------------------------------------------------\n         B     P3WIMM              CONTINUE\n*----------------------------------------------------------------------\nP3WIMMA  DS    0H\n         MVC   P132CHAR+2(1),J1DCONCH   SAVE IMMEDIATE CC COMMAND\n*----------------------------------------------------------------------\nP3WIMM   DS    0H                  IMMEDIATE DATA\n         TM    J1DCONCH,X'C0'      SKIP COMMAND\n         BNZ   P3SKIP              YES-CALC # LINE FEEDS TO HEAD\nP3WSPAC  DS    0H                  CHANGE SPACING TO NL(X'15')S\n         IC    R1,J1DCONCH         GET CARRIAGE\n         N     R1,=X'00000018'     MASK OFF JUNK\n         BNZ   P3ADDSRL            PUT OUT NLS\n         LA    R1,1*8              FORCE AT LEAST 1 SP\nP3ADDSRL DS    0H\n         SRL   R1,3                SHIFT TO GET SPACING\nP3ADDLN  DS    0H                  LOOP ADDING NLS TO BUFFER\n         L     R0,J1DCURPO         GET CURRENT LINE #\n         AR    R0,R1               ADD NEW SPACING\n         ST    R0,J1DCURPO         STORE IT\nP3ADDNL  DS    0H\n         MVI   0(R14),X'15'        NEW LINE CHAR\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          NEW OUTPUT ADDR\n         BCT   R1,P3ADDNL          LOOP\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3ADDEM             NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3ADDEM             YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         MVI   0(R14),X'0D'        CHANGE LINE FEED TO CARRIAGE RETURN\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3ADDEM  DS    0H\n*\n**       SEE IF BUFFER FULL YET\n*\n         ST    R14,J1DBFPTR        SAVE CURR POS.\n         TM    J1DFLAG2,J1DTRUNC   FORCE WRITE\n         BO    P3WFRC              YES\n         LA    R0,P3DBUFR+400       LOAD END OF BUFFER-LEADWAY\n         CR    R14,R0               SQUEZE ANOTHER RECORD?\n         BL    P3WRET               YES-GET NEXT\n*----------------------------------------------------------------------\n         CLI   P132CHAR+0,X'00'    DID LINE USE POSITION 132 ?\n         BE    P3WFRC              NO.   CONTINUE.\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WFRC              YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LINE FEED\n         S     R14,FWONE           SUBTRACT 1 TO POSITION AT 131\n         CLI   0(R14),C'$'         ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRA              YES.  GO HANDLE 132 LEN EXCEPTION.\n         CLI   P132CHAR+1,X'00'    ARE WE IN THE 132 LENGTH ROUTINE ?\n         BE    P3WFRB              NO.   CONTINUE.\nP3WFRA   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n         B     P3WRET              YES.  MAKE SURE 132 LEN ROUTINE ENDS\nP3WFRB   DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WFRC   DS    0H\nP3WRETRY DS    0H\n         L     R0,J1DISIZ          RESTORE REG 0            RT 7/6/93\n         L     R1,J1DILOC          RESTORE REG 1            RT 7/6/93\n         CLI   J1DHSCS,C'Y'\n         BE    P3WRYSCS\n         MVI   0(R14),X'19'        PUT EOM IN\n*----------------------------------------------------------------------\n******** CLI   P132CHAR+2,X'00'    IS THIS IMMEDIATE CC COMMAND\n******** BNE   P3WRETR3            YES.  CONTINUE.\n         ST    R14,R14SAVE2        SAVE REG 14\n         L     R14,R14SAVE         LOAD ADDRESS OF LAST LINE FEED\n         LTR   R14,R14             CHECK FOR VALID ADDRESS\n         BZ    P3WRETR2            NO ADDRESS  CONTINUE\n         CLC   R14SAVE(4),=X'FFFFFFFF' WAS LAST LF ALREADY HANDLED ?\n         BE    P3WRETR2            YES.  CONTINUE.\n         MVI   0(R14),X'0D'        CHANGE LAST LINFEED TO C/R\n         S     R14,FWONE           SUBTRACT 1 TO CHECK FOR EOM\n         CLI   0(R14),X'19'        WAS EOM INSERTED FOR 132 LEN LINE ?\n         BNE   P3WRETR1            NO.   CONTINUE.\n         MVC   0(2,R14),=X'0D19'   TRANSPOSE C/R EOM FOR 132 LEN LINE\nP3WRETR1 DS    0H\n         ST    R0,R0SAVE           SAVE REG 0\n         ST    R1,R1SAVE           SAVE REG 1\n         BAS   R14,P3ADJCNT        GO ADJUST LINE COUNT\n         MVC   R14SAVE(4),=X'FFFFFFFF'  INDICATE LAST LINE FEED HANDLED\nP3WRETR2 DS    0H\n         L     R14,R14SAVE2        RESTORE REG 14\n*----------------------------------------------------------------------\nP3WRETR3 DS    0H\n         LA    R14,1(R14)          NEXT BYTE\nP3WRYSCS LA    R4,P3DBUFR          GET START\n         SR    R14,R4              LENGTH\n         LR    R10,R14             LENGTH\n         TM    J1DFLAG1,J1DBEGIN\n         BO    VTMWRITE          NO  CONTINUE TO PROCESS WRITE\n         L     R9,J1DRPL\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    SIMLOG              YES  CONTROL BLOCKS O.K.\n*\n**       BUILD DYNAMIC VTAM CONTROL BLOCKS\n*\nVTAMDYN  DS    0H\n         GENCB AM=VTAM,BLK=NIB,MODE=RECORD,LISTEND=YES,                X\n               MF=(G,P3DNIBGN)\n         MVC   J1DWERRM(4),=C'E400'\n         MVC   J1DWERR1,=CL25'NIB GENCB FAILED'\n         LTR   R15,R15\n         BNZ   P3FATALF\n         LR    R4,R1\n         ST    R4,J1DNIB\n         SPACE\nP3WRPLGN DS    0H\n         L     R6,J1DACB\n         GENCB AM=VTAM,BLK=RPL,ACB=((R6)),POST=RESP,OPTCD=SYN,         X\n               NIB=((R4)),CONTROL=DATA,MF=(G,P3DRPLGN)\n         MVC   J1DWERRM(4),=C'E401'\n         MVC   J1DWERR1(25),=CL25'RPL GENCB FAILED'\n         LTR   R15,R15          CHECK RETURN CODE\n         BNZ   P3FATALF         IF NOT ZERO DIE\n         LR    R9,R1           LOAD ADDRESS OF RPL IN REG 9\n         ST    R9,J1DRPL        SAVE IN FULL WORD AREA\n         USING IFGRPL,R9\n         CLI   J1DHSCS,C'Y'\n         BE    P3RPLSCS\n         OI    RPLRH3,P3DBBFLG   BRACKET=(BB,EB) NON SNA\n         OI    RPLRH3,P3DEBFLG\n         MVC   P3DMDFLG(1),RPLRH3 SET RPL FOR NON SNA BRACKETS\nP3RPLSCS MVC   NIBSYM-ISTDNIB(8,R4),P3DLUID\n         OI    RPLRH3-IFGRPL(R9),RPLBB\nSIMLOG   DS    0H\n         CLI   P3DLGMD,C' '\n         BNE   P3DACQ\n         SIMLOGON RPL=(R9),OPTCD=(SYN,RELRQ,Q)\n         LTR    R15,R15\n         BNZ    P3RETRY\nOPENPRT  DS    0H\n         OPNDST RPL=(R9),OPTCD=(SYN,ACCEPT,NQ,SPEC)\n         LTR   R15,R15\n         BZ    VTMWRITE\n         B     P3RETRY\nP3DACQ   DS    0H\n         MVC   NIBLMODE-ISTDNIB(8,R4),P3DLGMD\n         OPNDST RPL=(R9),OPTCD=(SYN,ACQUIRE)\n         LTR   R15,R15\n         BNZ   P3RETRY\nVTMWRITE DS    0H\n         OI    J1DFLAG1,J1DBEGIN OPNDST HAS BEEN SUCCESSFULLY ISSUED\n         L     R9,J1DRPL\n         ST    R10,RPLRLEN-IFGRPL(R9)     STORE RECORD LENGTH\n         SEND  RPL=(R9),STYPE=REQ,CONTROL=DATA,POST=RESP,              X\n               OPTCD=(SYN,CA),AREA=P3DBUFR,                            X\n               RESPOND=(NEX,FME,NRRN),CHAIN=ONLY\nP3VTAMXX DS    0H\n         LTR   R15,R15             SUCCESSFUL\n         BNZ   P3RETRY             YES CONTINUE\nP3WCKCMP DS    0H\n         MVC   J1DHSTAT(10),=CL10'ACTIVE'\n         MVC   RPLRH3-IFGRPL(1,R9),P3DMDFLG   RESET BRACKET\n         LA    R14,P3DBUFR                    GET BUFFER\n         CLI   J1DHSCS,C'Y'                   IS THIS SCS\n         BE    P3WSCSY                        YES BRANCH AROUND\n         MVC   0(2,R14),=X'F5C8'              MOVE IN BISYNC 3270\n         LA    R14,2(R14)          LOCAL CONTROL CHAR BYPASS\nP3WSCSY  ST    R14,J1DBFPTR        RESET PTR\n         NI    J1DFLAG2,255-J1DTRUNC RESET FORCED WRITE\n         XC    J1DRETLM,J1DRETLM   YES - RESET RETRY COUNTER\nP3WRET   DS    0H                  RETURN\n         L     R14,J1DWRET         \"\n         BR    R14                 \"\nP3SKIP   DS    0H                  HANDLE SKIP COMMAND\n         CLI   J1DCONCH,X'89'      SKIP CH 1 AFTER\n         BE    P3SKIP1             YES\n         CLI   J1DCONCH,X'8B'      SKIP CH 1 IMM.\n         BE    P3SKIP1             YES\n         B     P3WSPAC             FORCE TO SPACING COMMAND\nP3SKIP1  DS    0H                  CALC # OF NLS TO TOP OF FORM\n******** CLI   J1DHSCS,C'Y'        GET CURRENT POS.\n******** BNE   P3SKIP2             CLEAR\n         MVI   0(R14),X'0C'        DIVIDE BY LINES/PAGE\n         LA    R14,1(R14)          LINES/PAGE\n*----------------------------------------------------------------------\n         MVI   0(R14),X'0D'        CHANGE WOULD-BE LINE FEED TO C/R\n         ST    R14,R14SAVE         SAVE ADDRESS OF LAST LINE FEED\n         LA    R14,1(R14)          SAVE ADDRESS OF NEXT BUFFER POSITION\n*----------------------------------------------------------------------\n         B     P3ADDEM             MINUS REMAINDER = # OF NLS\nP3SKIP2  DS    0H                  CALC # OF NLS TO TOP OF FORM\n         L     R1,J1DCURPO         GET CURRENT POS.\n         XR    R0,R0               CLEAR\n         D     R0,J1DLEN           DIVIDE BY LINES/PAGE\n         L     R1,J1DLEN           LINES/PAGE\n         SR    R1,R0                MINUS REMAINDER = # OF NLS\n         B     P3ADDLN             INSERT NLS\nP3RETRY  DS    0H\nP30811   CLC   RPLSSEI-IFGRPL(2,R9),=X'0811'    PRINT CANCEL\n         BNE   P30821\n         OI    J1DFLAG2,J1DFLUSH   NO RESET OPNDST FLAG\n         NI    J1DFLAG1,255-J1DKEEP\n         MVC   J1DWHY,=CL10'TERMINATED'\n         MVC   J1DBYWHO,=CL8'CANCEL'\n         B     P3WCKCMP\nP30821   CLC   RPLSSEI-IFGRPL(2,R9),=X'0821'   BIND ERROR\n         BNE   RETRYCMP\n         MVI   J1DRETLM+1,X'64'    IS IT AT 100 YET\nRETRYCMP DS    0H\n         CLI   RPLREQ-IFGRPL(R9),RPLOPNDS WAS OPNDST LAST REQ ??\n         BE    P3RETRYA            YES  NO CLSDST RPL NOT OPENED.\n         CLSDST RPL=(R9),OPTCD=(SYN,RELEASE)\n         NI    J1DFLAG1,255-J1DBEGIN  TURN OFF OPNDST FLAG\nP3RETRYA OI    J1DFLAG1,J1DIOERR   LET CALL DECIDE WHAT TO DO\n         B     P3WRET              RETURN(RE-CALL AT TWWLOC TO RETRY)\n         TITLE 'CHECK FOR STOP/MODIFY'\nP3FATALF DS    0H\n         CVD   R15,J1DWORK         CONVERT CALLERS RETURN CODE IN R15\n         STM   R14,R12,12(R13)     SAVE MY JRPREGS\n         UNPK  J1DWERR2,J1DWORK+6(2) 999 MAX RC SUPPORTED\n         OI    J1DWERR2+L'J1DWERR2-1,C'0' MAKE PRINTABLE\n         LA    R0,L'J1DWERR-4      LENGTH\n         LA    R1,J1DWERR+4        ADDR OF P3G\n         STM   R0,R1,J1DMSGLN\n         ST    R11,P3DATACH\n         LINK   EP=JRP310,MF=(E,P3DATACH)\n         LA    R1,J1DWERR          GET MF=L FORM OF WTO\n         SVC   35                  ISSUE WTO\n         MVC   J1DHSTAT(6),=C'ABENDU'\n         MVC   J1DHSTAT+6(3),=C'300'\n         OI    J1DFLAG1,J1DRTLM    MUST ISSUE $S\n         OI    J1DFLAG1,J1DKEEP    UNALLOCATE AND KEEP DATASET\n         MVC   J1DBEGJ(8),BLANKS   CLEAR JOBNUM FOR HEADER\n         ABEND  300,DUMP           ABEND USER 300\nJ2SYN    EQU    *\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS NOT COPIED TO DYNAMIC AREA              *\n***********************************************************************\n         TITLE 'LITERAL POOL'\n*        JRPSMAC\n         LTORG\nP3STR    TR    0(*-*,R14),0(R6)    EXECUTED\n         DS    0F\n*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN AND CLOSE)\nBLANKS   DC    CL16' '\n         SPACE 2\nP3STBL   DC    256C' '\nUPCTBL   EQU   P3STBL\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    X'81,82,83,84,85,86,87,88,89'\n         ORG   UPCTBL+X'91'\n         DC    X'91,92,93,94,95,96,97,98,99'\n         ORG   UPCTBL+X'A2'\n         DC    X'A2,A3,A4,A5,A6,A7,A8,A9'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\nP3STBL1  DC    256X'F0'\n         ORG   P3STBL1+X'F0'\n         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         ORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nP3SDCBIS EQU   *\nP3SDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN,     *\n               DDNAME=A           DUMMY DDNAME\nP3SDCBIE EQU   *\nP3SATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3SWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\nP3SMDL   EQU   *-P3SWA\n         SPACE 2\n         LTORG\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP3DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP3DWA    DS    0F\nP3DDCBIS EQU   *\nP3DDCBI  DCB   DSORG=PS,MACRF=GL,BUFNO=2,EODAD=P3GEOD,SYNAD=P3SYN,     *\n               DDNAME=A           DUMMY DDNAME\nP3DDCBIE EQU   *\nP3DATACH CALL  ,J2SYN,MF=L\n         DS    0F\nP3DWERR  WTO   'JRPI405 RXXXXXXX OUTPUT REQUED , RTNCD=XX ,FDBK2=XX  SEX\n               NSE=00000000 ',MF=L,ROUTCDE=(8)\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F                  ALIGN\nP3DNIBGN NIB   MODE=RECORD\nP3DRPLGN RPL   AM=VTAM\n         DS    0F\nST4      DS    F\nST5      DS    F\nST6      DS    F\n*----------------------------------------------------------------------\nFWONE    DS    F\nDUMYLINE DS    2F\nP132CHAR DS    F\nR0SAVE   DS    F\nR1SAVE   DS    F\nR14SAVE  DS    F\nR14SAVE2 DS    F\nR14SAVE3 DS    F\nR14SAVE4 DS    F\nR14SAVE5 DS    F\n*----------------------------------------------------------------------\n*********P3DBUFR  DS    CL768\nP3DBUFR  DS    CL920\nP3DWORK  DS    D\nP3DLUID  DS    CL8\nP3DLGMD  DS    CL8\nP3DIOER  DS    PL2\nP3DMDFLG DS    X\n*----------------------------------------------------------------------\nDUMYL132 DS    CL132\n*----------------------------------------------------------------------\n*\nP3DCLRE  EQU   *                   END OF DYNAMIC AREA\nP3DSASIZ EQU   *-P3DWA             SIZE OF DYNAMIC AREA\nP3DBBFLG EQU   X'80'\nP3DEBFLG EQU   X'40'\n         JRPREGS\n         DCBD   DSORG=PS,DEVD=DA\n         IFGRPL AM=VTAM             RPL\n         ISTDNIB                     NIB\n         PRINT GEN\n         JRPDMAC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JRP310": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x00_\\x00\\x89\\x00_\\t\\x19\\x00\\xf3\\x00\\xf3\\x00\\x00\\xd1\\xd9\\xd7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-01-05T00:00:00", "modifydate": "1989-01-05T09:19:00", "lines": 243, "newlines": 243, "modlines": 0, "user": "JRP"}, "text": "JRP310 TITLE 'JRP UNSOLICITED MESSAGE PROCESSOR'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = JRP310                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  UNSOLICITED MESSAGE PROCESSOR       *\n*                                 FOR JRP CONTROL TERMINALS           *\n*                                                                     *\n*             AUTHOR = MIKE SCHORTMAN -                               *\n*                                                                     *\n*             COPYRIGHT = 1/8/84                                      *\n*                                                                     *\n*              MODIFIED = *\n*                                                                     *\n*             STATUS = ONE INVALID MESSAGE ISSUED ON FIRST COMMAND    *\n*                      PASS,NOT CRITICAL,WILL BE FIXED.               *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARSES MVS OPERATOR COMMANDS AND INPUT FROM          *\n*                JRP INITIALIZATION DATA SET.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN COMMANDS OR INPUT PASSED BY JRP100           *\n*                   FOR JRP KEYWORDS AND MAKES APPROPRIATE            *\n*                   MODIFICATIONS TO DYNAMIC PRINTER ENTRY AREAS.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = JRPDMAC AND/OR JRPSMAC MUST NOT      *\n*                              BE CHANGED WITHOUT REASSEMBLY.         *\n*                                                                     *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 1 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO JRP310     *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 5K BYTES                               *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, PROBLEM STATE          *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = JRP310 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM JRP300 AS A SUBROUTINE                       *\n*                                                                     *\n*             INPUT = R8 POINTS TO JRPPFLG ,R10 POINTS TO JRP\"S       *\n*                DYNAMIC PRINTER AREAS,R11 POINTS TO COMMAND OR       *\n*                INITIALIZATION INPUT.                                *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL               *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PWT                                 *\n*                                                                     *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL P1DWA.                            *\n*                                                                     *\n*             MACROS = JRPSAVE,JRPRTRN,TPUT,                          *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THIS PROGRAM IS THE PROPERTY OF MIKE SCHORTMAN,      *\n*                                                                     *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nJRP310 CSECT\n         JRPSAVE REG=12,ID=*,LV=P1DSASIZ\n         USING P1DSA,R13\n         L     R4,0(R1)\n         USING J1TWA,R7                   TERMINAL DSECT\n         USING J1DWA,R4                   PRINTER  DSECT\n*\n**       MOVE MODEL DATA TO GOTTEN AREA ZERO REST FOR RENT REUS\n*\n         LA    R0,P1DWA\n         LA    R1,(P1DCLRE-P1DWA)\n         LA    R14,P1SWA\n         LA    R15,P1SMDL\n         MVCL  R0,R14\n         L     R11,J1DTWT\n*\n**       FIND TERMINALS THAT WANT UNSOLICITED MESSAGES AND SEND THEM\n*\nTABEND   DS    0H\n         CLC   0(4,11),=C'PEND'\n         BE    JRPRTRN\nRETBUSY  L     R7,0(11)\n         LTR   R7,R7\n         BZ    UNSTBMP\n         TM    J1TFLG,J1TUNSOL\n         BNO   UNSTBMP\n         TM    J1TFLG,J1TBUSY\n         BO    TIMER\n         OI    J1TFLG,J1TBUSY\n         L     R2,J1TRPL\n         TM    J1TFLG1,J1TSNA                   ;SNA DEVICE ???\n         BNO   MODCB\n         L     R5,=X'00010000'\n         SEND  RPL=(R2),STYPE=REQ,CONTROL=SIGNAL,SIGDATA=(R5),         X\n               OPTCD=(SPEC,SYN)\nTESTDIR  TM    J1TFLG,J1TRECD\n         BZ    MODCB\n         STIMER WAIT,BINTVL==F'100'         WAIT 1 SECOND\n         B     TESTDIR\nMODCB    MODCB AM=VTAM,RPL=(R2),CHNGDIR=NCMD,CONTROL=DATA\n         OI    RPLOPT5-IFGRPL(R2),RPLDLGIN      OPTCD=CS\n         NI    RPLOPT1-IFGRPL(R2),255-RPLASY    OPTCD=SYN\n         NI    RPLOPT5-IFGRPL(R2),255-RPLNODE   OPTCD=SPEC\n         NI    RPLRH3-IFGRPL(R2),255-RPLBB      BRACKET=NBB\n         NI    RPLRH3-IFGRPL(R2),255-RPLEB      BRACKET=NEB\n         MVI   RPLCHN-IFGRPL(R2),RPLONLY        CHAIN=ONLY\n         LM    R5,R6,J1DMSGLN\n         BAL   R10,P1TSEND\n         B     P1CMOK\nUNSTBMP  DS    0H\n         LA    R11,4(R11)\n         B     TABEND\nTIMER    STIMER WAIT,BINTVL==F'100'         WAIT 1 SECONDS\n         B     RETBUSY\nP1TSEND  DS    0H\n         C     R5,J1DCOLS\n         BNL   P1CSETMR\n         NI    J1TFLG,255-J1TMRMSG\n         B     P1CSETNM\nP1CSETMR DS    0H\n         OI    J1TFLG,J1TMRMSG      MORE MESSAGE\n         LR    R15,R6\n         A     R15,J1DCOLS           NEW ADDRESS\n         LR    R14,R5\n         S     R14,J1DCOLM1\n         ST    R15,J1TNEWAD\n         ST    R14,J1TNEWLN\n         LA    R5,J1DCOLM1\nP1CSETNM L     R14,J1TADDSV\n         LTR   R14,R14\n         BZ    TOP\n         CLC   6(4,R14),=C'TEND'\n         BE    TOP\n         CLC   8(4,R14),=C'TEND'\n         BNE   NOBUMP\n         MVI   J1DAREA2,C' '\n         MVC   J1DAREA2+1(78),J1DAREA2\n         B     NOBUMP\nTOP      DS    0H\n         MVI   J1DAREA2,C'-'\n         MVC   J1DAREA2+1(78),J1DAREA2\n         L     R14,J1DADTBL\nNOBUMP   MVC   J1DADD1(2),0(R14)\n         MVC   J1DADD2(2),2(R14)\n         MVC   J1DAREA1(80),=80C' '\n         EX    R5,PRTMVC\n         LA    R14,2(R14)\n         ST    R14,J1TADDSV\n         LA    R5,J1DOUTLN\n         LA    R6,J1DOUTBF\n         L     R2,J1TRPL\n         SEND  RPL=(R2),RECLEN=(R5),AREA=(R6),STYPE=REQ\n         LTR   R15,R15\n         BNZ   J1FATALF\n         TM    J1TFLG,J1TMRMSG     MORE DATA\n         BZR   R10\n         L     R6,J1TNEWAD\n         L     R5,J1TNEWLN\n         B     P1TSEND\n**********************************************************************\n*\n**             GIVE OPER STATUS TO MODIFY COMMAND\n*\nP1CMOK   DS    0H                  GIVE OPER OK P1G\n         MVC   J2DMSS(7),=CL7'OK'\nP1CMPOK  DS    0H\n         LA    R5,L'J2DOK-1\n         LA    R6,J2DOK\n         L     R2,J1TRPL\n         MODCB AM=VTAM,RPL=(R2),CHNGDIR=CMD,OPTCD=CA\n*        OI    RPLRH3-IFGRPL(R2),RPLCMD         CHNGDIR=CMD\n*        NI    RPLOPT5-IFGRPL(R2),255-RPLDLGIN  OPTCD=CA\n         BAL   R10,P1TSEND\n         NI    J1TFLG,255-J1TBUSY\n         OI    J1TFLG,J1TRECD\n         B     UNSTBMP\nPRTMVC   MVC   J1DAREA1,0(R6)\nJ1FATALF EQU   *\nJRPRTRN  DS    0H\n         DROP  R7\n         DROP  R4\n         JRPRTRN\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'STATIC STORAGE'\nP1SWA    DS    0D\n**********************************************************************\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\n**********************************************************************\nJ2SOK    DC    CL15'JRP100I INVALID'\nP1SMDL   EQU   *-P1SWA\n         SPACE 2\n         TITLE 'DYNAMIC - GOTTEN AREA'\nP1DSA    DSECT\n         DS    9D                  O/S SAVE\n****NOTE NOTE NOTE  MUST KEEP STATIC AND DYNAMIC AREAS IN SYNC***\n****DYNAMIC IS GETMAINED AND STATIC IS USED TO INITIALIZE IT.\nP1DWA    DS    0D\nJ2DOK    DC    CL15'JRP100I INVALID'\nJ2DMSS   EQU   J2DOK+8,7\n***********************************************************************\n*  EVERYTHING FROM HERE ON IS SET TO LOW VALUES AT INIT TIME          *\n***********************************************************************\n         DS    0F\nP1DCLRE  EQU   *                   END OF DYNAMIC AREA\nP1DSASIZ EQU   *-P1DWA             SIZE OF DYNAMIC AREA\n         TITLE 'MISC EQUATES AND DSECTS'\n         JRPTMAC\n         JRPDMAC\n         JRPREGS\n         IFGRPL AM=VTAM\n         PUSH  PRINT\n*        PRINT NOGEN               SAVE A LITTLE PAPER\n         PRINT ON,GEN\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MDCB": {"ttr": 6155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x91#/\\x00\\x91#O\\x08E\\x00\\x16\\x00\\r\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1991-08-20T00:00:00", "modifydate": "1991-08-22T08:45:00", "lines": 22, "newlines": 13, "modlines": 0, "user": "CART1"}, "text": "***********************************************************************\n*        PDSDOC * DD TABLE ENTRY FORMAT...............................* MDCB\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMDCB     DSECT ,                   FORMAT OF A DCB TABLE ENTRY\nMDCBDCB  DS    0F                  DCB POINTER\nMDCBFLAG DS    XL1                 FLAGS\n         SPACE 1\nDDBYPASS EQU   128                 DD NON-PROCESS\nDDINT    EQU   16                  DD INTEREST\nDDPRES   EQU   8                   DD PRESENT\nDDOPEN   EQU   1                   DATA SET IS OPEN\nFF       EQU   255                 ALL BITS ON\n         SPACE 1\n         DS    AL3                 ADDRESS OF DCB\nMDCBDDNM DS    CL8'DDNAME'         DDNAME\nMDCBOPEN DS    CL8'INPUT'          TYPE OF OPEN REQUIRED\nMDCBCLOS DS    CL8'REREAD'         TYPE OF CLOSE REQUIRED\nMDCBCNT  DS    PL8'0'              I/O COUNT\n         SPACE 1\nMDCBLEN  EQU   *-MDCB              LENGTH OF ONE TABLE ENTRY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RIN": {"ttr": 6157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\t/\\x00\\x980/\\x13\\x17\\x00U\\x00U\\x00\\x00\\xc4\\xc3\\xf1\\xf0\\xf2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1998-10-29T13:17:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "DC102"}, "text": "         MACRO\n&SEGNAME RIN   &REGS,&LINK=R4\n.*********************************************************************\n.*       PDSDOC *RE-ENTRANT SUBROUTINE ENTRY MACRO....................* RIN\n.*\n.*       THIS MACRO CAN BE USED TO CONTROL THE LINKAGE BETWEEN\n.*       SUBROUTINES AND EFFECT THE SAVING AND RESTORING OF\n.*       LINK REGISTERS AND PARAMETER REGISTERS. A TYPICAL SEQUENCE\n.*       MIGHT BE:\n.*\n.* DOWORK RIN   (R6,R7,R8) ENTER ROUTINE AND SAVE REGS 6,7,8\n.*        ----\n.*        ----\n.*        ----\n.*        ----\n.*        CODEOUT                RESTORE REGS 6,7,8 AND RETURN\n.*\n.*       THE LINK REGISTER IS ASSUMED TO BE REGISTER 4 BUT OPERAND\n.*       'LINK=' CAN BE USED TO VARY THIS AT WILL.\n.*\n.*       THE MACRO ASSUMES THAT AN AREA EXISTS IN THE PROGRAM CALLED\n.*       'SGBXSAVE' AND WILL SAVE REGISTERS IN SUCCESSIVE FULLWORD\n.*       LOCATIONS IN THAT AREA. IN ORDER TO GENERATE AN AREA OF THE\n.*       CORRECT SIZE, THE MACRO CAN BE CODED WITH THE SINGLE\n.*       OPERAND - 'GENERATE'.\n.*\n.*       THIS MACRO WAS DEVELOPED OUT OF 'SEGIN', SO SHARES MANY GLOBAL\n.*       VARIABLES WITH THAT MACRO. THESE TWO MACROS MAY THEREFORE BE\n.*       INTERMIXED WITHIN ONE PROGRAM.\n.*\n.*       01APR92 CART1 COPIED 'SEGIN', CHANGED TO MY REG. CONVENTIONS\n.*\n.*********************************************************************\n.*\n.*\n.*\n         GBLA  &SEGBCTR            COUNTER OF FULLWORDS USED\n         LCLC  &WORKC              USED TO TIDY UP NAME FIELDS\n         LCLA  &INDX               WORK INDEX\n         GBLC  &SGBARR1(200)       HOLD SAVE REG DETAILS ACROSS SEGMNT\n         GBLC  &SGBARR2(200)       HOLD SAVE REG DETAILS ACROSS SEGMNT\n         GBLA  &SGBINDX            INDEX FOR THE ARRAY\n.*********************************************************************\n.*       TEST FOR 'GENERATE' TYPE ENTRY\n.*********************************************************************\n         AIF   ('&REGS' EQ 'GENERATE').GENER GENERATE WORK AREA\n.*********************************************************************\n.*       INITIALISE INEX DATA ETC.\n.*********************************************************************\n&SGBINDX SETA  1                   INITIALISE THE ARRAY INDEX\n&SEGNAME DS    0H                  SEGMENT ENTRY POINT\n.*********************************************************************\n.*       SAVE THE LINK REGISTER\n.*********************************************************************\n&WORKC   SETC  'SGBXSAVE'.'+&SEGBCTR' GENERATE NEXT SAVE AREA NAME\n&SEGBCTR SETA  &SEGBCTR+4          INCREMENT THE SAVE AREA CTR\n&SGBARR1(&SGBINDX) SETC '&WORKC'   SAVE NAME OF AREA\n&SGBARR2(&SGBINDX) SETC '&LINK'    SAVE REGISTER ID\n&SGBINDX SETA  &SGBINDX+1          INCREMENT GLOBAL INDEX\n         ST    &LINK,&WORKC        SAVE LINK REGISTER\n.*********************************************************************\n.*       SAVE REGISTERS AS REQUIRED\n.*********************************************************************\n         AIF   (T'&REGS EQ 'O').MEND1 EXIT IF NO REGS 2B SAVED\n&INDX    SETA  1                   INITIALISE LOOP COUNTER\n.LOOP1   ANOP                      LOOP FOR REGISTERS TO BE SAVED\n&WORKC   SETC  'SGBXSAVE'.'+&SEGBCTR' GENERATE THE NEXT SLOT NAME\n&SEGBCTR SETA  &SEGBCTR+4            GENERATE OFFS NEXT SAVE AREA\n&SGBARR1(&SGBINDX) SETC '&WORKC'   SAVE NAME OF AREA\n&SGBARR2(&SGBINDX) SETC '&REGS(&INDX)' SAVE REGISTER ID\n&SGBINDX SETA  &SGBINDX+1          INCREMENT GLOBAL INDEX\n         ST    &REGS(&INDX),&WORKC SAVE REGISTER.\n&INDX    SETA  &INDX+1             INCREMENT LOOP COUNTER\n         AIF   (&INDX LE N'&REGS).LOOP1 PROCESS ALL SPECIFIED OPERANDS\n.*********************************************************************\n.*       EXIT FROM THIS MACRO\n.*********************************************************************\n.MEND1  MEXIT\n.*********************************************************************\n.*      GERNERATE WORK AREA ENTRIES FOR THE REQUIRED SAVE AREAS\n.*********************************************************************\n.GENER   ANOP\nSGBXSAVE DS    0F                  RIN SAVE AREAS\n         DS    &SEGBCTR.X          STORAGE FOR SAVE AREAS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ROUT": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\t/\\x00\\x95\\x04O\\x16\\x18\\x00.\\x00.\\x00\\x00\\xd1\\xe2\\xe8\\xe2\\xc3@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-04-01T00:00:00", "modifydate": "1995-02-13T16:18:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "JSYSC"}, "text": "         MACRO\n&NAME    ROUT\n.*********************************************************************\n.*       PDSDOC *RE-ENTRANT SUB-ROUTINE EXIT MACRO....................* ROUT\n.*\n.*       THIS IS THE PARTNER MACRO TO 'RIN' AND WILL RESTORE ALL\n.*       SAVED REGISTERS AND THEN RETURN CONTROL TO THE LINK REGISTER\n.*       DEFINED IN THE RIN MACRO. (SEE COMMENTS AN 'RIN' MACRO\n.*       FOR MORE DETAILS.\n.*\n.*********************************************************************\n.*\n.* 01APR92 CART1 COPIED 'SEGOUT'\n.*\n.*********************************************************************\n.*      VARIABLE DEINITION AREA\n.*********************************************************************\n         GBLA  &SEGBCTR            COUNTER OF FULLWORDS USED\n         LCLC  &WORKC              USED TO TIDY UP NAME FIELDS\n         LCLC  &WORKD              GENERAL WORK AREA\n         LCLA  &INDX               WORK INDEX\n         GBLC  &SGBARR1(200)       HOLD SAVE REG DETAILS ACROSS SEGMNT\n         GBLC  &SGBARR2(200)       HOLD SAVE REG DETAILS ACROSS SEGMNT\n         GBLA  &SGBINDX            INDEX FOR THE ARRAY\n.*********************************************************************\n.*       DEFINE A LABEL IF HE WANTS ONE\n.*********************************************************************\n         AIF   (T'&NAME EQ 'O').NONAME\n&NAME    EQU   *                   EXIT POINT THIS SEGMENT\n.NONAME  ANOP\n.*********************************************************************\n.*       RESTORE REGISTERS\n.*********************************************************************\n&INDX    SETA  1                   INITIALISE LOOP COUNTER\n.LOOP1   ANOP                      LOOP FOR REGISTERS TO BE SAVED\n&WORKC   SETC  '&SGBARR1(&INDX)'   GENERATE THE NEXT SLOT NAME\n&WORKD   SETC  '&SGBARR2(&INDX)'   GENERATE THE REGISTER NAME\n         L     &WORKD,&WORKC       RESTORE REGISTER\n&INDX    SETA  &INDX+1             INCREMENT LOOP COUNTER\n         AIF   (&INDX LT &SGBINDX).LOOP1 PROCESS ALL SPECIFIED OPERANDS\n.*********************************************************************\n.*       GENERATE THE RETURN LINKAGE\n.*********************************************************************\n&WORKD   SETC  '&SGBARR2(1)'       GET LINK REGISTER NAME\n         BR    &WORKD              RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT104/FILE104.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT104", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}