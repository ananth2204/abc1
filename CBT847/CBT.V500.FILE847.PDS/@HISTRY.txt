                       WHY THIS FILE WAS CREATED

INTRODUCTION

This is a small history of the development of the COPYMODS tape copying
program, which I have (so far) taken through 86 new versions.  There
have been so many detailed enhancements put into this program, that I
don't think I can go through every iteration here.  But I'll try to hit
the highlights and give you the general picture.  If you take the time
to read the step-by-step version history in the @PGMDOC member of this
file, you'll get the picture from another angle.  Now, here, I'm trying
to give something of a historical overview.  I'm trying now to tell you
the WHY?  Why did this chain of events and enhancements happen?

Being the proprietor of the CBT Tape, and being a systems programmer
who is always interested in taking backups, I am naturally inclined
to think about tapes.  The CBT Tape collection contains a bunch of
tape copying programs - approximately eight different ones, and also
some tape mapping programs, which are related to tape copying programs.

At one point, I discovered that many of the tape copying programs were
artificially limited to copying tapes with block sizes of 32K or less.
Especially when using EXCP as the "file copying engine", this is
completely unacceptable, since for practially the same effort, you can
use EXCP to copy 64K blocks.  You just have to make sure you use "full
halfword arithmetic".  In other words, you should not use LH (load
halfword) instructions, which take the high-order bit in the halfword
for an algebraic sign, and the largest numbers they can handle are 32K,
not 64K.  There is no such problem with STH (store halfword), which
stores the entire 16 bits in the 2-byte storage place.  Once the LH
barrier has been passed, the LH instructions eliminated, and the entire
halfword has been loaded into a register, you can put the size (number
of bytes to be moved) X'FFFF' into the CCW for READ and WRITE CCW
instructions.  And if you handle the "residual counts" (bytes NOT moved)
using "full halfword arithmetic", or you convert these numbers to
"fullword arithmetic", you're home free.  Now you can use the tape
copying programs to copy FDR tapes and DFDSS tapes, which have block
sizes greater than 32K.

So I made an effort to convert ALL the tape copying programs on the CBT
Tape to being able to handle 64K blocks.  The only one I wasn't able to
convert was Aron Eisenpress' TAPECOPY program, which has BSAM so
embedded in it, that I couldn't figure out how to convert it (yet).
I WAS successful with TAPESCAN, which cleverly mixes BSAM and EXCP.
I COULD figure that one out, and I got it to work with 64K blocks.
Dave Cole had already gotten TAPEMAP (File 299) to work with 64K blocks.

This project led to my looking at COPYMODS.  After converting it to
handling 64K blocks, and copying 16 output tapes instead of 10, I faced
the problem of teaching COPYMODS how to handle tape labels.

Problem with COPYMODS, which could be used to copy SL tapes too, beside
NL tapes, was that it stopped working indiscriminately after seeing 2
tape marks in succession on the input tape.  For NL tapes, 2 tape marks
in a row means the end of the tape.  For SL tapes, this is NOT
necessarily a condition that indicates the end of the tape.

It's like this.  Suppose you have an SL tape, with an empty data file
that has no data.  This can happen if you IEBCOPY a PDS with no members,
to a tape.  Then you'll normally encounter two tape marks in succession,
right in the middle of a legitimate data file.  You may need some
introduction to understand how this works, so I'll elaborate.

First, I have to tell you about tape marks, and the difference between
SL (standard labeled) and NL (non-labeled) tapes.  Then I can tell you
about the COPYMODS problems.

Tape marks tell you when a tape file ends.  The next tape record (after
the tape mark) belongs to the next file.  This is how NL (non-labeled)
tapes work.  But you have to know one other thing.  An SL tape file
really consists of 3 files.  The first "file" is the "HDR1 label and the
HDR2 label".  Then comes the data file.  The third file consists of the
"EOF1 and EOF2" labels.  When the system looks at an SL tape file, it
grabs the information from the tape labels, skips to the data file, and
acts as though the data file in the middle was the only file in the
group.  Therefore, if a SL tape has (say) 10 files in it, it really
actually has 30 files in it, but each data file is sandwiched between
two label files--the header labels and the trailer labels.  The first
label file on a SL tape has an additional record, called the VOL1 label,
which comes before the first HDR1 label for the first file.  This volume
label tells you the volume id of the tape.  (DASD disks have these volid
labels too.  Third record on the volume, in Track 0.)  NL tapes have no
internal volume identifiers.

Normal protocol for tape marks is, no leading tape marks for z/OS (MVS)
tapes.  Then:  one tape mark after the HDR labels and before the data,
one tape mark after the data and before the EOF labels, and one tape
mark after the EOF labels and before the next file.  What happens when
the file has no data in it?  Simple.  The two tape marks, the one after
the HDR labels, and one before the EOF labels, are now next to each
other.  So what does COPYMODS do (in the old version)?  It copies the
HDR labels and then stops right there, ignoring any data on the tape
that comes afterward.  This is clearly a limitation in COPYMODS, and if
I wanted COPYMODS to properly copy standard labeled (SL) tapes, I had to
get past this limitation.

I did it by teaching COPYMODS all about labels.  This was a considerable
effort, and you can watch how it happened, by looking at the succession
of COPYMODS versions which we have brought here.

COPYMODS assumes that you can look at a tape using BLP (Bypass Label
Processing).  Treating a tape as BLP means to completely ignore the
"specialness" of tape labels, and to treat them as ordinary tape data
files.  You have to permit the system to allow this, by a setting in
the JES2 JOBCLASS.  It is done using the operator command:
$TJOBCLASS(x),BLP=YES, or you allow it initially in the JOBCLASS(x)
parameter of the JES2 parms, by setting BLP=YES for that job class.

Again, unlike the way the MVS system treats labels when SL is set in the
JCL, or when NL is set in the JCL and you mount an SL tape, or when BLP
is not allowed by the JES jobclass, BLP treats label files (80-byte
unblocked records on a tape in a certain format; see the "DFP - Using
Magnetic Tapes" manual) as PLAIN ORDINARY FILES.

So I had to put a special subroutine into COPYMODS at label LABLCHEK
(BAL  R7,LABLCHEK) to examine all 80-byte unblocked records and see if
they are tape labels or not.  If a record is really a tape label, then
the LABLCHEK routine sets a flag called ISLBLFLG, to tell you what kind
of label the record is (HDR1, HDR2, EOF1, EOF2, VOL1, etc.). Later, when
I put in support for ASCII tapes as well as IBM (EBCDIC) tapes, I put
support into LABLCHEK to know about ASCII labels (both type 3 and type
4) too.

I taught COPYMODS that if you have read a HDR1 label and a HDR2 label,
and then you encounter two successive tape marks, then you don't stop
the processing.  After that was done, COPYMODS could properly and
accurately copy SL tapes completely, from end to end.


HOW CBT TAPE PROCESSING AFFECTED COPYMODS DEVELOPMENT

When Arnold Casinghino, the founder of the CBT Tape collection,
administered the tape, all files were on disk on his system at the
Connecticut Bank and Trust Company.  His job wrote each file to tape
directly, in a succession of steps that created an NL tape.  The reason
NL was used, is that each installation has its own dataset naming
conventions, and an NL tape will not interfere with each place's
security setup as much.  NL makes the files in the CBT collection much
easier to load and use.

When I took over the editorship of the tape, I was working for an
installation that didn't have much disk space to spare.  So I had to
develop a way to update the collection, by substituting in the new or
updated files, and just copying over the unchanged ones from a previous
tape.  It was an "old master", "transaction tape", and "new master"
scheme.  The scheme was carried out because of the existence of a free
program called COPYFILE (CBT Tape File 229 as well), which could splice
files by their number, from any number of input tapes to a single output
tape (in separate job steps).  The COPYFILE program worked only with SL
tapes, so I had to create the CBT Tape as an SL tape, and afterwards
strip off the labels, to make an NL tape out of the SL tape for public
distribution.

To strip off tape labels, I adapted the COPYFILE program to do the job.
I called the resulting program COPYSLNL.  COPYSLNL worked by counting.
It was BLP, so it skipped the first file (the header labels), copied the
second file (the data), skipped the third file (the trailer labels), an
so on with the succeeding files of the tape.  This is what later got me
interested in putting similar support into COPYMODS.

With the PARM=STRIP option of COPYMODS, any 80-byte unblocked file
consisting of labels, got eliminated from the output tapes.  COPYMODS
did it by detecting the presence of the labels, and not by counting the
tape file number.  Therefore, you could be extra sure that all the label
files were eliminated from the output tapes.  PARM=STRIP support was
first implemented (finally) in version 50 of COPYMODS.  This support had
an obscure bug that finally got fixed in version 82 of COPYMODS, and in
this file, I have retro-fitted the fix for all program levels back to
version 50.  (Versions 54 and 55 exceeded the last base register because
of the fix, and therefore they won't assemble.  In Level 56 I added a
new base register or did something similar to relieve the constraint.)


SAVING SETS OF TAPE LABELS IN AN FB-80 FILE

Having produced SL CBT Tapes and having kept my "originals" as SL tapes,
but giving NL tapes to the public, I naturally wanted to save the label
sets and be able to splice them back, just in case I had an NL CBT tape
and didn't possess the "original" SL version, but I did possess the set
of the tape labels themselves, offloaded from the original as a dataset.
Because of this need, the LABLDUMP and LABADDIN options of COPYMODS were
born.

If you are copying an SL tape with the LABLDUMP option, and you allocate
an LRECL=80 file to contain the set of tape labels to be offloaded, then
COPYMODS will save the images of all the tape labels, together with some
control cards I invented so you can put all these labels back,
sandwiching them around the files of a non-labeled tape (usually a
stripped version of the original tape).  To do the reverse process and
add a set of previously dumped labels to an NL tape, you code the
LABADDIN option of COPYMODS, and you supply the FB-80 set of dumped
labels to the LABADDIN DD name.  Of course, you can edit this set of
labels in between, and therefore bypass installation security
restrictions with the newly relabeled tape.  But you have to know what
you're doing, and adhere to all the MVS tape label standards.

You can do all this processing for ASCII tapes too.

COPYMODS is a very powerful tool.


PARM = READ

COPYMODS can make up to 16 copies of any tape.  It just depends on the
number of tape drives you have on your system.  However, there is a lot
in common between "tape copying" programs and "tape mapping" programs.

Tape mapping programs attempt to tell you what is on a tape.  They do so
by reading each tape record into a buffer on the computer.  When the
tape data, one record at a time, is in the computer, your program can
examine it, analyze it, report what was in it, manipulate it, and in
short, you can do anything you want with the data, while it is under
your control.

Tape copying programs do the same actions.  They read each tape record
into the computer, one record at a time.  Then the action they take, is
to write each record back to another tape.  Wait a second, you ask.  Why
can't a tape copying program analyze the tape data while it has control
of it?  In other words, a tape copying program can function as a tape
mapping program too!  All the data is read into the computer from the
tape.  Then, the program can analyze the data, alter it, copy it, or do
anything you want it to do.  There is a lot of flexibility and
possibility inherent in this setup.

It comes out that if you want to analyze what is on a tape, you might
want to do so without being forced to copy the tape at the same time.
COPYMODS got started as a tape copying program, not a tape mapping or
analysis program.  But as I put more reporting capability into COPYMODS,
I wanted to use it as a tape analysis and mapping tool too.

That is why I put PARM=READ support into COPYMODS, so I could analyze
the contents of a tape without being forced to make a copy at the same
time.  When PARM=READ is coded in an execution of COPYMODS, COPYMODS
does not ask for one of the output DD names OUT1, OUT2, and so forth.
It just needs the input DD name, IN, to be able to read the input tape
and analyze it, without also having to make a copy.


THE PARM TABLE

With all of these new functions and features going into the COPYMODS
program, I had to design a way to keep them all straight and organized,
and to be able easily to add new features.  For this purpose, I designed
a PARM scanning program, to convert program PARM or SYSIN control card
words into bit settings that could be tested by the program.  My PARM
scanning routine that is in COPYMODS, can currently process 10 bytes or
80 bits of PARM data, creating these bit settings out of coded words.

So in several passes through one PARM table, I can set up to 80 separate
control bits, which translate into completely separate program options.
First, I set all the program defaults, then I read all the PARM info on
the EXEC card, and finally I OPEN the SYSIN file if one exists, and
parse everything that is in there.  Later settings override earlier
settings, so EXEC parms override default settings, and SYSIN settings
override EXEC PARM settings.

COPYMODS currently (as of version 86) uses 49 of these bits.  So there
are at least 49 separate controls in COPYMODS to vary how it works.
You can see the PARM Table at label PARMTABL, which is interrogated by
the PARMCHEK subroutine.

It is also important that a user of the COPYMODS program can see which
options were coded.  Therefore COPYMODS has an OPTIONS table which
parallels the PARM Table in structure.  The Options Table will interpret
the settings that have been set in the PARM table, and report its
findings to the user.  OPTIONS is a default option in COPYMODS
execution.

One additional thing is necessary in reporting COPYMODS program options.
Sometimes the COPYMODS program will see two conflicting options, and it
has to make a decision to turn off one of them.  COPYMODS has some rules
to do this, so after all the program options have been set initially
from the defaults, PARMs, and SYSIN, and COPYMODS has "done its thing"
with them, you actually see the end result--the options which have
survived the adjustments made by the COPYMODS program, to eliminate
contradictions.  These are shown by the OPTIONS option.  But you also
might like to see the adjustments that have been made by the program.
For that purpose, I added another option called CODEDPRM, which shows
all the options a second time, but it shows them that time, as they were
first coded, before the COPYMODS program itself had started adjusting
them.  This second "options" display comes right after the first one,
and you can compare the differences to see what the program changed.


WHAT WE'VE ACCOMPLISHED HERE

With this CBT Tape file, you can actually follow the progress of all
of these things, as I had put them in.  That is really what this file
is for.  It's for you to learn from.  But COPYMODS at all levels, will
WORK too.  You'll find it fun, if your interests lie in this direction,
and you like to work with tapes.

At this point, I'd suggest that if you're still interested, you should
start looking at the @PGMDOC member, which comes from the heading on
top of the COPYMODS source code, and which contains a summary of all the
version changes, level by level.  It's not small--there are 1400 lines
there.  But if you go through the level changes, and then you SUPERC
the versions of actual code which represent each level, you'll gain a
ton of knowledge about how all this was accomplished and brought about.

Again, I'm presenting this as a CBT Tape file, because I'm in possession
of all of the COPYMODS step-by-step improvements.  It's a rare thing,
when a developer is in possession of all the intermediate stages in the
development of his product.  All the versions are here.  I didn't want
them to go to waste, if someone out there can learn something by
studying them.

Best of everything, and much success.

Sincerely,   Sam Golob     sbgolob@cbttape.org


