{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012851000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE816.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE816.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x0b'", "DS1TRBAL": "b'\\x1d|'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x99\\x00\\x0c\\x05\\x9a\\x00\\x00\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00T\\x01\\t5?\\x01\\t5?#6\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-12-19T00:00:00", "modifydate": "2009-12-19T23:36:54", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  816\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE816\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,069 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/19/09    23:36:54    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE816": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x008\\x01\\t5?\\x01\\t5?#6\\x00C\\x00C\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-12-19T00:00:00", "modifydate": "2009-12-19T23:36:38", "lines": 67, "newlines": 67, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 816 is from Sam Golob and contains an APF-authorized      *   FILE 816\n//*           TSO command to quickly and instantly change the       *   FILE 816\n//*           default number of Global Notices that an ACCOUNT      *   FILE 816\n//*           and SYNC combination will create, when it formats     *   FILE 816\n//*           a SYS1.BRODCAST dataset (or any active Broadcast      *   FILE 816\n//*           Dataset).                                             *   FILE 816\n//*                                                                 *   FILE 816\n//*           email:  sbgolob@cbttape.org     or                    *   FILE 816\n//*                   sbgolob@attglobal.net                         *   FILE 816\n//*                                                                 *   FILE 816\n//*           IBM officially makes this number very difficult       *   FILE 816\n//*           to change.  You have to zap the hex number into       *   FILE 816\n//*           csect IKJEBLMT of module IKJEFXSR and the change      *   FILE 816\n//*           will not take effect until the next IPL.  Very        *   FILE 816\n//*           silly and unlike IBM....  This must have had a        *   FILE 816\n//*           reason when it was designed, but it doesn't seem      *   FILE 816\n//*           to make much sense nowadays, with IPLs so few         *   FILE 816\n//*           and far between.                                      *   FILE 816\n//*                                                                 *   FILE 816\n//*           Fortunately, there is a solution.  The actual         *   FILE 816\n//*           number that SYNC looks at, is located squarely        *   FILE 816\n//*           in the CVT itself.  It isn't even chained off it!     *   FILE 816\n//*           The number is a fullword at location CVT + X'5A8'.    *   FILE 816\n//*           And loading this up initially, is the reason for      *   FILE 816\n//*           the necessity of the IPL.                             *   FILE 816\n//*                                                                 *   FILE 816\n//*           IBM could have done better (and it still might,       *   FILE 816\n//*           if you submit a requirement for a console command     *   FILE 816\n//*           to change the default, through SHARE).  However,      *   FILE 816\n//*           we are not waiting for IBM.  Here is a TSO command    *   FILE 816\n//*           (that of course has to be APF-authorized), which      *   FILE 816\n//*           will change the number instantly in the CVT, by       *   FILE 816\n//*           simply plugging in a new number.  It works.  Just     *   FILE 816\n//*           say BDMNNOTC 500, and an ACCOUNT + SYNC will produce  *   FILE 816\n//*           a Broadcast Dataset that has 500 Global Notices       *   FILE 816\n//*           messages.  Set a different number, and you get        *   FILE 816\n//*           that number of Global Notices produced by the         *   FILE 816\n//*           ACCOUNT + SYNC.  In my experience, you can even       *   FILE 816\n//*           go over 1000 (IBM's professed limit).  I created      *   FILE 816\n//*           a Broadcast Dataset with 4000 Notice slots, and       *   FILE 816\n//*           it appears to work just fine.                         *   FILE 816\n//*                                                                 *   FILE 816\n//*           Again, you have to APF-authorize this TSO command     *   FILE 816\n//*           by including its name in table IKJEFTE2 (authcmd)     *   FILE 816\n//*           in PARMLIB, or by using one of our tools (TSUB,       *   FILE 816\n//*           LWATMGR, or LLWA) that are in CBT Files 185 and       *   FILE 816\n//*           797.  Good luck.                                      *   FILE 816\n//*                                                                 *   FILE 816\n//*           Note:  I have not imposed an upper limit on the       *   FILE 816\n//*           number CVTBCLMT within the BDMNNOTC program.  But     *   FILE 816\n//*           my advice is that it shouldn't be over 1000 in        *   FILE 816\n//*           a production environment.  (SBG - 12/2009)            *   FILE 816\n//*           With large numbers, errors caused by ACCOUNT +        *   FILE 816\n//*           SYNC might occur.                                     *   FILE 816\n//*                                                                 *   FILE 816\n//*           I am supplying a load module library in member        *   FILE 816\n//*           LOADMODS, which contains my commercial BDMCLEAN       *   FILE 816\n//*           program as well as BDMNNOTC.  BDMCLEAN is a TSO       *   FILE 816\n//*           command that cleans up deleted junk in Broadcast      *   FILE 816\n//*           Datasets that makes them hard to browse or REVIEW.    *   FILE 816\n//*           (REVIEW is the preferred browser for Broadcast        *   FILE 816\n//*           Datasets - see File 135 for load modules, or CBT      *   FILE 816\n//*           File 134 for source code.)  ISPF Browse leaves        *   FILE 816\n//*           off the last byte of the Broadcast Dataset, which     *   FILE 816\n//*           you often have to look at, to trace message           *   FILE 816\n//*           chains.                                               *   FILE 816\n//*                                                                 *   FILE 816\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMASPZA2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00G\\x00\\x856_\\x01\\t4\\x7f\\x120\\x00\\x1d\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-31T00:00:00", "modifydate": "2009-12-13T12:30:47", "lines": 29, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBZ JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//****************************************************************//\n//*                                                              *//\n//*  Note.  I do not recommend the use of this JCL.  It was      *//\n//*         only included to provide an example of \"what used    *//\n//*         to be\".  My program (a TSO command) BDMNNOTC will    *//\n//*         instantly change the relevant number in the CVT,     *//\n//*         and it does NOT require anything like an IPL !!!     *//\n//*                                                              *//\n//*  JCL EXAMPLE:                                                *//\n//*                                                              *//\n//*  CHANGING THE DEFAULT NUMBER OF NOTICES RECORDS THAT ARE     *//\n//*  TO BE FORMATTED BY THE TSO COMMAND:   ACCOUNT  SYNC         *//\n//*                                                              *//\n//*  THIS REQUIRES AN IPL TO IMPLEMENT.  RATHER USE BDMNNOTC     *//\n//*  WHICH IS AN APF-AUTHORIZED TSO COMMAND THAT ACTS INSTANTLY. *//\n//*                                                              *//\n//****************************************************************//\n//*\n//ZAPNOTE EXEC PGM=AMASPZAP\n//SYSUDUMP DD  SYSOUT=*,HOLD=YES\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR <= LIBRARY CONTAINING IKJEFXSR\n//SYSIN    DD  *\n NAME  IKJEFXSR IKJEBLMT\n VER   0000   00000064         100 NOTICES RECORDS\n REP   0000   000000C8         200 NOTICES RECORDS\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMCLEAN": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x14\\x01\\x07\\x11\\x7f\\x01\\t4\\x7f\\x028\\x00x\\x00\\xaa\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2009-12-13T02:38:14", "lines": 120, "newlines": 170, "modlines": 0, "user": "SBGOLOB"}, "text": "---   BDMCLEAN PROGRAM  -  Broadcast Master  Version   1.4.0A   ---\n     Copyright (c) 1995-2009 Sam Golob Systems Programming LLC\n                     All Rights Reserved\n\n Note from Sam Golob:  I am allowing the load module for BDMCLEAN\n      that was included in the LOADMODS member of this pds, to be\n      used by anyone, without restriction.\n\n BDMCLEAN -  Improve the appearance of the BRODCAST dataset\n             by cleaning out irrelevant data from Global\n             Notify messages and User Message records that\n             were previously used.\n\nExecution Mode:   TSO Command - using the PUTLINE interface\n--------- ----\n\nDescription of Operation:\n----------- -- ---------\n\n  The BDMCLEAN program is meant to make it easier to \"physically\nlook\" at a BRODCAST dataset and determine if a Global Notify message\nor a User message record is used, or not.  LISTBC leaves a lot of\ndata around from previous messages when it \"deletes\" a User message.\nSo does OPER, SEND,DELETE when it deletes a previously used Global\nNotify message.  So it seemed the appropriate thing to do, when\ncreating a BRODCAST dataset management package, to clean the things\nup, and make the real use of each record slot, easier to physically\nsee.\n\n  There are two types of records that have to be cleaned up, and\neach of them must be done in its own way.\n\nGlobal Notify records:\n\n  A Global Notify record is \"in use\" if its directory pointer has a\ncertain bit set to \"off\".  So, to clean all Global Notify records\nthat are not in use, if the bit in the directory record shows that\nthe Notify record is not in use, then the entire record is zeroed out\nwith hex zeros.\n\n  If a Global Notify record is marked in use by its directory record,\nthen the actual length of the notice is shown by the first data byte.\nTo clean out the rest of the record from debris left by earlier and\nlonger Notices, a field of 129 zeros is laid out, the used part of\nthe record is laid over the zeros, and the whole thing is written\nback to the same slot.  This cleans out the appearance of the Notice.\n\n\nUser Message records:\n\n  A User Message record slot is marked \"free\" if its \"key byte\" is\nX'FF' and the first data byte is the \"R\" of the \"TTR\" or \"CCHHR\"\n(the position of the record on the track).  All the rest of the data\nin the record is irrelevant.  So if the BDMCLEAN program sees a free\nUser Message record, it replaces all the rest of the data in it, with\nhex zeros.\n\n\nJCL Requirements or TSO Allocations:\n--- ------------ -- --- -----------\n\n  The BDMCLEAN program is a TSO command, but it uses the PUTLINE\ninterface to write its output to the terminal.  Therefore you can\nrun the BDMCLEAN program under TSO-in-batch, and still see its\noutput.  You can (of course) also run BDMCLEAN as a TSO command.\n\nAllocation Requirement -\n\n  The particular copy of the BRODCAST dataset which you want to\nclean, must be pointed to by the BRODCAST DD name, as follows:\n\nALLOC FI(BRODCAST) DA(your.BRODCAST.dataset) SH REUSE\n\nor\n\n//BRODCAST  DD  DISP=SHR,DSN=your.BRODCAST.dataset\n\n\nSubcommands:\n-----------\n            INSTRUCTIONS FOR BDMCLEAN TSO COMMAND\n            ------------ --- -------- --- -------\n         BDMCLEAN N - CLEAN NOTICES ONLY\n         BDMCLEAN U - CLEAN USER MESSAGES ONLY\n         BDMCLEAN M - CLEAN USER MESSAGES ONLY\n         BDMCLEAN   - CLEAN BOTH NOTICES AND USERID MESSAGES\n\n\nReport:\n------\n         COUNT OF USED  NOTICES CLEANED:          14\n         COUNT OF EMPTY NOTICES CLEANED:         236\n         TOTAL COUNT OF NOTICES CLEANED:         250\n\n         COUNT OF USER MESSAGES CLEANED:        5923\n\nProgram Logic:\n------- -----\n\n  The basic principles of the program logic were mentioned above,\nin the \"Description of Operation\" section.\n\nError Handling:\n----- --------\n\n  BDMCLEAN just checks the first letter of any subcommand, if one is\nentered.  If it is a U, then only User Message records are cleaned.\nIf it is an N or an M, then only Global Notice records are cleaned.\nIf it is anything else, then both are cleaned.  If no subcommand\nis entered, then both are cleaned.\n\n* ----------------------------------------------------------------- *\n\n  If the BRODCAST DD allocation is missing, then BDMCLEAN issues\nthe following message:\n\n    IEC130I BRODCAST DD STATEMENT MISSING\n    BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMNNOT$": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x008\\x01\\x055O\\x01\\t4\\x7f\\x01W\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2009-12-13T01:57:38", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT478.FILE816(BDMNNOTC) < = SOURCE\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB   < = CHANGE\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB   < = CHANGE\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB478816\n SETCODE AC(1)\n ENTRY   BDMNNOTC\n NAME    BDMNNOTC(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDMNNOTC": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x11\\x01\\x055O\\x01\\t4\\x8f\\x12\\x12\\x02\\xcf\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2009-12-14T12:12:11", "lines": 719, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "BDMNNOTC TITLE 'BDMNNOTC - SET NUMBER OF NOTICES MADE BY ACCOUNT/SYNC'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE.   *\n*                                                                     *\n*         SYNTAX:   BDMNNOTC nnn  (nnn is required number of          *\n*                                  notices in decimal)                *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       FUNCTION:   TO CHANGE DEFAULT NUMBER OF SYS1.BRODCAST         *\n*                   NOTICES SLOTS WHICH \"ACCOUNT/SYNC\" WILL PRODUCE.  *\n*                   (THE SETTING LASTS UNTIL NEXT IPL).               *\n*                                                                     *\n*        PROBLEM:   IBM makes it very difficult to change the number  *\n*                   of Global Notices records produced in             *\n*                   SYS1.BRODCAST (or an equivalent active Broadcast  *\n*                   Dataset) when the dataset is initialized with     *\n*                   the ACCOUNT/SYNC IBM-supplied commands.  You      *\n*                   need a zap to module IKJEBLMT in load module      *\n*                   IKJEFXSR, followed by an IPL.  In today's world,  *\n*                   where IPL's are done as infrequently as           *\n*                   possible, this is an undesirable situation.       *\n*                                                                     *\n*                   The difficulty of the IBM change, is because the  *\n*                   actual value that the SYNC command uses, is a     *\n*                   fullword field in the CVT, which is initialized   *\n*                   at IPL time.  Address:  CVT+X'5A8'                *\n*                                                                     *\n*        SOLUTION:  But this difficulty makes it supremely easy to    *\n*                   change the value using an APF-authorized TSO      *\n*                   command, which just goes into the CVT and changes *\n*                   the value, plain and simple.  That is what our    *\n*                   program does, plain and simple.                   *\n*                                                                     *\n*     OBSERVATION:  IBM says that the limit to the number of Notices  *\n*                   records you can create in a Broadcast Dataset is  *\n*                   1000.  I have found that if you have a large      *\n*                   enough Broadcast Dataset, and you set the number  *\n*                   even to 4000, the ACCOUNT/SYNC programs will      *\n*                   create the larger number of notices.  And they    *\n*                   will function correctly, to my knowledge.         *\n*                                                                     *\n*         WARNING:  I have not artificially imposed a limit on the    *\n*                   size of the number in this command.  So use this  *\n*                   command carefully.                                *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  DEC 11, 09                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -                                *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBDMNNOTC CSECT\nBDMNNOTC AMODE 31\nBDMNNOTC RMODE 24\n         USING BDMNNOTC,R12\n         B     BEGINN-*(,R15)\n         DC    CL15'BDMNNOTC VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n* -- Get old default value for Notices. Do it early on in the program.\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTEXT2          Addressability to CVTBCLMT\n         USING CVTXTNT2,R3\n         L     R4,CVTBCLMT         Save old default number of Notices.\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --  Is it TSO?  And run optional authorization check.            -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --  Get Parameter - Make sure it is numeric.                     -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R11,R11             Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R11)          Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,10               Load Reg for BCT loop.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*-\n         CLI   0(R7),C'0'          Numeric Test this character - below\n         BL    FLAGON\n         CLI   0(R7),C'9'\n         BH    FLAGON\n         B     FLAGGO\nFLAGON   OI    NUMFLAG,X'01'\nFLAGGO   DS    0H                  Numeric Test this character - above\n*-\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- > Test if this command is being run APF Authorized  < --\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n* Replace the CVT number here,     Get CVTBCLMT field again, this time\n*   in Key 0.                       to replace it with the new number.\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTEXT2          Addressability to CVTBCLMT\n         USING CVTXTNT2,R3\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   CVTBCLMT,NEWNMBIN   Replace the CVTBDLMT in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Previous default number of notices: '\n         MVC   LINE+36(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(36),=C'Default number of Notices reset to: '\n         MVC   LINE+36(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         APUT  MESSAGEW,L'MESSAGEW\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEX,L'MESSAGEX\n         APUT  MESSAGEY,L'MESSAGEY\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAG01,L'MESSAG01\n         APUT  MESSAG02,L'MESSAG02\n         APUT  MESSAG03,L'MESSAG03\n         APUT  MESSAG04,L'MESSAG04\n         APUT  MESSAGED,L'MESSAGED\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'BDMNNOTC - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the Default Number of Notices in a  '\nMESSAGEV DC    C' SYS1.BRODCAST Dataset that is reformatted  '\nMESSAGEW DC    C' via IBM''s ACCOUNT/SYNC commands.          '\nMESSAGEX DC    C' This setting is a fullword at CVT+X''5A8''   '\nMESSAGEY DC    C' This setting lasts until the next IPL.     '\nMESSAG01 DC    C' IBM recommends that this number be less    '\nMESSAG02 DC    C' than 1000. We assume that you know what    '\nMESSAG03 DC    C' you are doing. Otherwise, keep it less     '\nMESSAG04 DC    C' than 1000 to be on the safe side.          '\nMESSAG10 DC    C'You need a numeric parameter after the command.'\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nDECOLDNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADMODS": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\t4\\x8f\\x01\\t4\\x8f\\x12\\x07\\x00^\\x00^\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-12-14T00:00:00", "modifydate": "2009-12-14T12:07:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT816/FILE816.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT816", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}