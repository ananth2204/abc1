{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011651000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE293.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE293.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x06'", "DS1TRBAL": "b'\\xb5\\x06'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xfc\\x00\\x05\\x01\\xfc\\x00\\r\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x00P\\x01\\x175/\\x01\\x175/\\x00W\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-12-18T00:00:00", "modifydate": "2017-12-18T00:57:50", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-495"}, "text": "REGULAR CBT TAPE - VERSION 495    FILE:  293\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT495.FILE293\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 24 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,506 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/18/17    00:57:50    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x12\\x1f\\x01\\x173\\x1f\\x13W\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-01T00:00:00", "modifydate": "2017-11-27T13:57:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "SBGOLOB"}, "text": "Golob, Sam\nFrom:   Warren.Whitford@ERIEinsurance.com\nSent:   Tuesday, May 01, 2001 10:07 AM\nTo:     sbgolob@cbttape.org\nSam,\n\nI have been reading your articles in \"Technical Support\" since\nthey first began.  They are always interesting.  In the February\nissue you wrote about \"Defining Dataset Characteristics\" and the\nCKIEBGEN program.  You had some suggestions on some improvements\nyou would like in CKIEBGEN and left it up to some of the readers\nto make the changes.  It sounded interesting to me so I did make\nsome changes to the program as you suggested.  Following is the\nsource code for the changed CKIEBGEN.  Following the source code\nis an example of what the new information looks like when the\nprogram runs.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE293": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x008\\x01\\x175/\\x01\\x175/\\x00W\\x00\\x85\\x00\\x85\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-12-18T00:00:00", "modifydate": "2017-12-18T00:57:38", "lines": 133, "newlines": 133, "modlines": 0, "user": "CBT-495"}, "text": "//***FILE 293 is from Warren Whitford and Sam Golob in partnership, *   FILE 293\n//*           and contains various iterations of a sequential copy  *   FILE 293\n//*           program for datasets, called CKIEBGEN.  The original  *   FILE 293\n//*           version of CKIEBGEN was by Baldomero Castilla, and it *   FILE 293\n//*           is on File 480.  The idea is to make a very simple    *   FILE 293\n//*           copy program, using QSAM (GET, PUT, GET, PUT, etc.    *   FILE 293\n//*           in a loop), that opens SYSUT1 for input, and SYSUT2   *   FILE 293\n//*           for output.  A copy loop GETs a record from SYSUT1,   *   FILE 293\n//*           PUTs it to SYSUT2, and loops until the SYSUT1 file    *   FILE 293\n//*           is exhausted.  Then it closes both files and exits.   *   FILE 293\n//*           No report is produced--it's just a simple QSAM copy.  *   FILE 293\n//*           The equivalent of Baldomero's version of the program, *   FILE 293\n//*           in this dataset, is member CKIEBG01.  (Baldomero      *   FILE 293\n//*           commented his program in Spanish, and used his own    *   FILE 293\n//*           entry and exit macros, which are really not           *   FILE 293\n//*           necessary for the program to work.)                   *   FILE 293\n//*                                                                 *   FILE 293\n//*           This program has several advantages over IEBGENER     *   FILE 293\n//*           and many of its substitutes, because of its           *   FILE 293\n//*           generality and simplicity.  It also will copy         *   FILE 293\n//*           files that IEBGENER might not copy, because it does   *   FILE 293\n//*           not look at the data.  It just does GET and PUT,      *   FILE 293\n//*           quite mindlessly.  But the DCB information has to     *   FILE 293\n//*           be coded in the execution JCL, otherwise QSAM won't   *   FILE 293\n//*           \"know\" how to construct the proper channel programs   *   FILE 293\n//*           to do the GET and PUT for the particular input and    *   FILE 293\n//*           output files.  This is a \"record by record\" copy,     *   FILE 293\n//*           and NOT \"block by block\".                             *   FILE 293\n//*                                                                 *   FILE 293\n//*           Program MANYRCDS has been added to this file, as      *   FILE 293\n//*           an aid in testing the SKIP and COPY functions of      *   FILE 293\n//*           CKIEBGEN.  See notes in the MANYRCDS program for      *   FILE 293\n//*           further details.                                      *   FILE 293\n//*                                                                 *   FILE 293\n//*           Many improvements have been made at Level 008.        *   FILE 293\n//*           (See below.)                                          *   FILE 293\n//*                                                                 *   FILE 293\n//*           Most improvements for CKIEBGEN have been in the way   *   FILE 293\n//*           of messaging.  You want to know, first of all, how    *   FILE 293\n//*           many records have been copied.  So the next iteration *   FILE 293\n//*           called CKIEBG02, adds a SYSPRINT ddname, and counts   *   FILE 293\n//*           how many GETs and PUTs were done.  That is a sizable  *   FILE 293\n//*           improvement.                                          *   FILE 293\n//*                                                                 *   FILE 293\n//*           The next iteration, CKIEBG03, adds DCB information    *   FILE 293\n//*           for the input and output datasets, so you know the    *   FILE 293\n//*           characteristics of these datasets, in addition to the *   FILE 293\n//*           number of records copied.  This is done, using an     *   FILE 293\n//*           execution of the RDJFCB macro for both input and      *   FILE 293\n//*           output datasets after the copy was done.  RDJFCB      *   FILE 293\n//*           can be done before or after OPEN, but after OPEN      *   FILE 293\n//*           it can access more DCB information than before,       *   FILE 293\n//*           because OPEN processing merges the extra information  *   FILE 293\n//*           it obtained, back into the JFCB, where RDJFCB picks   *   FILE 293\n//*           it up.                                                *   FILE 293\n//*                                                                 *   FILE 293\n//*           That approach works much of the time, but it's better *   FILE 293\n//*           to try the RDJFCB before the copy is done, so that    *   FILE 293\n//*           if there is an error (and not enough DCB information  *   FILE 293\n//*           is present in the JCL, or from the catalog, you don't *   FILE 293\n//*           attempt the copy.  The CKIEBG04 member incorporates   *   FILE 293\n//*           that \"improvement\", as well as making the JFCB print  *   FILE 293\n//*           routine into a subroutine, which is executed several  *   FILE 293\n//*           times.                                                *   FILE 293\n//*                                                                 *   FILE 293\n//*           The CKIEBGEN iteration adds a VOLSER display for      *   FILE 293\n//*           both the input and the output dataset.                *   FILE 293\n//*                                                                 *   FILE 293\n//*           This file was put on the CBT Tape, for the purpose    *   FILE 293\n//*           of showing new Assembler language programmers some    *   FILE 293\n//*           of the principles of coding, and also to illustrate   *   FILE 293\n//*           how QSAM gets DCB information from the JCL, and from  *   FILE 293\n//*           the catalogs.  It's also a good copy utility to have  *   FILE 293\n//*           in your pocket, sometimes.                            *   FILE 293\n//*                                                                 *   FILE 293\n//*           See the important note at the bottom about fixing     *   FILE 293\n//*           broken XMIT files, if you have the entire original    *   FILE 293\n//*           (XMIT file) somewhere.                                *   FILE 293\n//*                                                                 *   FILE 293\n//*           Questions, please write:                              *   FILE 293\n//*                                                                 *   FILE 293\n//*            Warren Whitford:  (retired) write to Sam Golob       *   FILE 293\n//*                                                                 *   FILE 293\n//*            Sam Golob      :  sbgolob@cbttape.org                *   FILE 293\n//*                                                                 *   FILE 293\n//*     Next versions:  (You may expect some from time to time):    *   FILE 293\n//*                                                                 *   FILE 293\n//*            Level 006 - Put date and time into the report.       *   FILE 293\n//*                                                                 *   FILE 293\n//*            Level 007 - Copy any segment of the input file.      *   FILE 293\n//*                        Optional SYSIN DD card with the          *   FILE 293\n//*                          following controls:                    *   FILE 293\n//*                                                                 *   FILE 293\n//*             SKIP=mmmmmmm   (Skip first mmmmmmm records)         *   FILE 293\n//*             COPY=nnnnnnn   (Copy the next nnnnnnn records)      *   FILE 293\n//*                                                                 *   FILE 293\n//*            For example, you can use this program to fix         *   FILE 293\n//*            partial XMIT files, if you have the original         *   FILE 293\n//*            somewhere.  Just copy the missing records at         *   FILE 293\n//*            the end, and concatenate them to the partial         *   FILE 293\n//*            beginning.  That puts the whole file together        *   FILE 293\n//*            on the other side (in the target system).            *   FILE 293\n//*                                                                 *   FILE 293\n//*            Level 008 - Fixed the lack of reporting for          *   FILE 293\n//*                          RECFM errors in the JFCB.              *   FILE 293\n//*                        Re-commented much of the code.           *   FILE 293\n//*                        Rewrote the Abnormal End processing      *   FILE 293\n//*                          to give a return code of 12, so        *   FILE 293\n//*                          you know that something went wrong,    *   FILE 293\n//*                          and the copy wasn't done.              *   FILE 293\n//*                        Fix errors in SKIP=, COPY= processing.   *   FILE 293\n//*                        Later SKIP=, COPY= overrides earlier.    *   FILE 293\n//*                        Allow 12 packed digits for SKIP=,        *   FILE 293\n//*                         COPY=, so the largest numbers allowed   *   FILE 293\n//*                         are 999999999999 (12 digits).  Ignore   *   FILE 293\n//*                         binary numbers greater than             *   FILE 293\n//*                         2,147,483,647, because the CVB          *   FILE 293\n//*                         instruction can't handle them, but      *   FILE 293\n//*                         the packed numbers are the ones used    *   FILE 293\n//*                         here for comparison, not the binary.    *   FILE 293\n//*                        If a SKIP= or COPY= card has a numeric   *   FILE 293\n//*                         error, then stop the processing with    *   FILE 293\n//*                         RC=12, and abort the copy.              *   FILE 293\n//*                        Increased report number size for         *   FILE 293\n//*                         skipped or copied records, in or        *   FILE 293\n//*                         out records.                            *   FILE 293\n//*                        Fixed possible catastrophic error when   *   FILE 293\n//*                         you try and code numbers much greater   *   FILE 293\n//*                         than 12 digits in SKIP and COPY SYSIN   *   FILE 293\n//*                         statements.  (Limit number scan to      *   FILE 293\n//*                         12 digits only--10 digits for Version   *   FILE 293\n//*                         007, which was just fixed similarly.)   *   FILE 293\n//*                                                                 *   FILE 293\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBGE$": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x03\\x01\\x00$?\\x01\\x173\\x1f\\x108\\x00\\x1c\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2017-11-27T10:38:03", "lines": 28, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE293(CKIEBGEN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495293\n SETCODE AC(0)\n NAME    CKIEBGEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGEN": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x009\\x01\\x081/\\x01\\x173\\x1f\\tR\\x033\\x01)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2008-11-07T00:00:00", "modifydate": "2017-11-27T09:52:39", "lines": 819, "newlines": 297, "modlines": 0, "user": "SBGOLOB"}, "text": "   TITLE 'CKIEBGEN -- GENERAL QSAM FILE COPY PROGRAM  '\n* ----------------------------------------------------------------- *\n*     CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA     *\n*                                                                   *\n*                    \"PRETTIFIED BY SAM GOLOB\"                      *\n*                    \"IMPROVED BY WARREN WHITFORD\"                  *\n*                                                                   *\n*     Function:      General QSAM file copying program that         *\n*                    copies records.                                *\n*                                                                   *\n*     Date Written:  August 25, 2000                                *\n*                                                                   *\n*     Change Levels:                                                *\n*                                                                   *\n*     Level 007 -    Introduce selection criteria to copy only      *\n*      (Nov 2011)    part of a file by counting records.            *\n*                    If SYSIN DD is present, the program looks      *\n*                    for SKIP=mmmmmmm or COPY=nnnnnnn or both,      *\n*                    starting in column 1, to first skip mmmmmmm    *\n*                    records in the file, and then copy the next    *\n*                    nnnnnnn records afterwards.  (S.Golob)         *\n*                                                                   *\n*     Level 008 -    Return code processing for missing DCB         *\n*      (Nov 2017)    attribues.  Fix reporting of RECFM errors.     *\n*                    Get rid of RETURN macro.                       *\n*                    Fix errors in SKIP= and COPY= processing.      *\n*                    Later SKIP=,COPY= overrides earlier coding.    *\n*                    Allow 12 packed digits for SKIP=,COPY=,        *\n*                     so the largest numbers allowed are            *\n*                     999999999999 (12 digits).  Ignore binary      *\n*                     numbers greater than 2,147,483,647, because   *\n*                     the CVB instruction can't handle them, but    *\n*                     the packed numbers are the ones used here     *\n*                     for comparison, not the binary numbers.       *\n*                    If a SKIP= or COPY= card has a numeric error,  *\n*                     then stop the processing with RC=12, and      *\n*                     abort the copy.                               *\n*                    Increased report number size for skipped       *\n*                     or copied records, in or out records.         *\n*                    Fixed possible catastrophic error when you     *\n*                     try and process numbers much greater than 12  *\n*                     digits in SKIP and COPY SYSIN statements.     *\n*                     (Limit number scan to 12 digits only.)        *\n*                                                                   *\n*     Note:  (To test what happens when JFCB fields have NOT YET    *\n*             been filled in, move the OPEN macros for SYSUT1       *\n*             and SYSUT2 to after the GO label, so the RDJFCB       *\n*             is done BEFORE the OPEN.  Then you'll have to fill    *\n*             in all the DCB values in your JCL, in order to get    *\n*             the program to run.  The catalog won't help you       *\n*             then.  This is for diagnosis purposes only.)          *\n* ----------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &LLEV\n&LLEV    SETC  '008'                SET PROGRAM LEVEL\n*\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '              MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL &LLEV '\n         DC    C'--- '              MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H                   ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1                SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                             SET UP THREE BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5                RESTORE PARM POINTER\n         PRINT GEN\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   HEADER+54(23),HEADDATE\n         MVI   HEADER+38,C'-'\n         MVC   HEADER+40(6),=C'LEVEL '\n         MVC   HEADER+46(3),=C'&LLEV'\n         LM    R14,R2,SAVE1402\n***********************************************************************\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                   Initialize constants.\n         MVI   FLAGSYSN,X'00'       Initialize SYSIN flag.\n         MVI   ABORTFLG,X'00'       Initialize ABORT flag.\n         MVI   BLNKLINE-1,X'40'     Initial blank for BLNKLINE.\n* ------------------------------------------------------------------- *\n*   Check to see if there are SYSIN cards, and process their values.  *\n* ------------------------------------------------------------------- *\n         OPEN  (SYSPRINT,OUTPUT)\n         BAL   R7,TIOTSCAN          Scan if SYSIN DD is there.\n         TM    FLAGSYSN,X'01'       Is SYSIN DD there?\n         BZ    NOSYSIN              No. Just copy the entire file.\n         BAL   R7,DOSYSIN           Yes. Process all the SYSIN cards.\n* ------------------------------------------------------------------- *\n*   SYSIN, if it exists, has been processed, and its values saved,    *\n*          and the SYSIN DDname has been already CLOSEd.              *\n* ------------------------------------------------------------------- *\nNOSYSIN  DS    0H                   All ABORTs are before the OPENs\n         TM    INVNFLG,X'01'        Invalid SKIP or COPY?\n         BO    ABORT                Yes. Error. ABORT NOW..!!\n         TM    INVNFLG,X'02'        More than 12 digits coded?\n         BO    EXCESS               Yes. Kill it before it multiplies.\n*\n         MVC   OUTLINE,OUTLINE-1    Print program header.\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1    Print underlines.\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n*-------------------------------------------------------------------- *\n*  Comment on the placement of OPEN before/after the RDJFCB.          *\n*                                                                     *\n*  In this program, we OPEN the SYSUT1 and SYSUT2 DCB's before        *\n*  doing the RDJFCB to find out the files' characteristics.  OPEN     *\n*  fills in the DCB information from the catalog and the VTOC of      *\n*  the pack, pointed to by the catalog, and adds it to the JFCB.      *\n*  This makes it easier to run the program.  If there is anything     *\n*  REAL that is missing from the JFCB information, then OPEN will     *\n*  usually itself flag the error (producing an invalid OPEN or an     *\n*  abend of the Sx13 type), so our error correction mechanism will    *\n*  not usually work when OPEN comes first.  But if OPEN comes after   *\n*  the RDJFCB, then only the JCL information will show up in the      *\n*  JFCB.  So any DCB information that was not supplied by the JCL,    *\n*  and is therefore missing from the JFCB, will be apparent.          *\n*                                                                     *\n*  Therefore I have an identical version of this program, called      *\n*  CKIEBTST, with no differences except to put the OPEN after the     *\n*  GO label, which is after the RDJFCB.  Then the RDJFCB happens      *\n*  BEFORE the OPEN in that program, and if there is any DCB info      *\n*  missing from the JCL itself, it will now show up.  So we can use   *\n*  the CKIEBTST program to test our error reporting, to see if it     *\n*  is accurate.  And CKIEBTST serves to debug our error-detecting     *\n*  mechanisms in CKIEBGEN.                                            *\n*-------------------------------------------------------------------- *\nPRLMJFCB DS    0H                   Preliminary RDJFCB to determine\n*                                   available DCB field information.\n*\n* -------                           OPEN input and output files.\n* -------                           OPEN is BEFORE the RDJFCB.\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            Show SYSUT1\n         BAL   R7,PRTJFCB           Print available information.\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            Show SYSUT2\n         BAL   R7,PRTJFCB           Print available information.\n         TM    FLAG1,X'0F'          No problems? Not missing JCL info?\n         BZ    GO                   Then go copy the file.\n         B     ABSTART              Otherwise report errors and exit.\n* ------------------------------------------------------------------- *\nGO       DS    0H                   Proceed to do the file copy.\n* ------------------------------------------------------------------- *\n*   To test for missing DCB attributes, move the SYSUTx OPENS here.   *\n* ------------------------------------------------------------------- *\n         ZAP   INRCDS,=P'0'               Initialize counters.\n         ZAP   OUTRCDS,=P'0'\n         ZAP   SKIPRCDS,=P'0'\n         ZAP   COPYRCDS,=P'0'\n* ------------------------------------------------------------------- *\nREADWRIT DS    0H                         Main processing loop.\n         GET   SYSUT1,AREA                Get a new record.\n         AP    INRCDS,=P'1'               Count it as incoming.\n         TM    SKIPFLG,X'01'              Was SKIP coded?\n         BO    CNTSKIP                    Yes. Handle the skipping.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BO    CNTCOPY                    Yes. Handle that.\n         B     PUTITOUT                   Neither. Copy all records.\n*\n*                                         PACKED NUMBERS USED FOR SKIP\nCNTSKIP  DS    0H                         Handle record skipping\n         CP    PKSKIP,INRCDS              Have we exceeded threshold?\n         BL    CNTCOPY                    Yes. See if copy was coded.\n         AP    SKIPRCDS,=P'1'             No. Count this skipped rcrd.\n         B     READWRIT                   And get another one.\n*\n*                                         PACKED NUMBERS USED FOR COPY\nCNTCOPY  DS    0H                         Handle subsequent copy.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BZ    CNTCOPYA                   No. Then there's no limit.\n         CP    PKCOPY,COPYRCDS            Limit exceeded?\n         BNH   FIN                        Yes. Get out altogether.\nCNTCOPYA DS    0H\n         AP    COPYRCDS,=P'1'             Count record copied.\nPUTITOUT DS    0H                         And actually copy it.\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'              Output record count.\n         B     READWRIT                   Loop back. Get another record\n* -------\nFIN      DS    0H                         Print Summary report and Exit\n         MVC   OUTLINE,OUTLINE-1\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),INRCDS+0    Number of records input\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),OUTRCDS+0   Number of records output\n         PUT   SYSPRINT,OUTLINE\n         TM    SKIPFLG,X'03'              Were SKIP= or COPY= coded?\n         BZ    GOCLOSE                    No. Extra print unnecessary.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG03\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),SKIPRCDS+0  Number of records skipped\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG04\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),COPYRCDS+0  Number of records copied\n         PUT   SYSPRINT,OUTLINE\nGOCLOSE  DS    0H                        Close input and output files\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H                        Normal Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'0'           Return code 0 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\nEXCESS   DS    0H                        Excess digits coded\n         MVC   OUTLINE,OUTLINE-1         Clear line\n         MVC   OUTLINE(133),EXCESMSG     Move excess message\n         PUT   SYSPRINT,OUTLINE\n         B     CLOSPRNT                  Close SYSPRINT\nABORT    DS    0H                        Normal Return\n         MVC   OUTLINE,OUTLINE-1         Clear line\n         MVC   OUTLINE(133),ABORTMSG     Move abort message\n         PUT   SYSPRINT,OUTLINE\nCLOSPRNT DS    0H                        Close SYSPRINT\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'12'          Return code 12 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\n         EJECT\n* ------------------------------------------------------------------- *\n*  Come here if not enough DCB attributes to feed QSAM to make a copy *\n* ------------------------------------------------------------------- *\nABSTART  DS    0H                        Missing DCB attributes....\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMS2\n         PUT   SYSPRINT,OUTLINE\nGOABS    DS    0H                        Abnormal Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'12'          Return code 12 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nPRTJFCB  DS    0H                         DSN MESSAGE MOVED BEFORE.\n         MVC   OUTLINE+19(44),JFCBDSNM    MOVE DSNAME.\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MOVE MEMBER NAME.\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           MOVE VOLSER MESSAGE.\n         MVC   OUTLINE+19(6),JFCBVOLS       MOVE UP TO 5 VOLUMES.\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG           MOVE DSORG MESSAGE.\n*                                         FIGURE OUT THE DSORG...\n         MVC   OUTLINE+19(3),=C'IS '      ASSUME ISAM.\n         CLI   JFCDSRG1,JFCORGIS          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'ISU'      ASSUME ISAM UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PS '      ASSUME PHYSICAL SEQUENTIAL.\n         CLI   JFCDSRG1,JFCORGPS          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PSU'      ASSUME PS UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'DA '      ASSUME DIRECT ACCESS.\n         CLI   JFCDSRG1,JFCORGDA          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'DAU'      ASSUME DA UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PO '      ASSUME PARTITIONED.\n         CLI   JFCDSRG1,JFCORGPO          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'POU'      ASSUME PO UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'   MOVE TO MSG.\nPUTDSRG  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\nRECFM    DS    0H                         TEST FOR RECFM.\n         OI    FLAG1,X'08'                ASSUME NO RECFM & DISPROVE.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           MOVE RECFM MESSAGE.\n         LA    R4,OUTLINE+19              POINT TO RECFM REPORT AREA.\n* ------------------------------------------------------------------- *\n*   TEST FOR UNDEFINED FIRST, BECAUSE LRECL=0 IS THEN A VALID VALUE.  *\n* ------------------------------------------------------------------- *\n         TM    JFCRECFM,JFCUND            IS IT UNDEFINED?\n         BNO   NOTUND                     NO. LRECL=0 NOT VALID.\n         MVI   0(R4),C'U'                 MARK AS UNDEFINED.\n         OI    FLAG2,X'01'                FLAG RECFM=U (SPECIAL CASE)\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX            FIXED RECORDS?\n         BNO   NOTFIX                     NO. TRY NEXT.\n         MVI   0(R4),C'F'                 YES. MARK FIXED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTFIX   TM    JFCRECFM,JFCVAR            VARIABLE RECORDS?\n         BNO   CHKB                       NO. TRY NEXT.\n         MVI   0(R4),C'V'                 YES. MARK VARIABLE.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nCHKB     TM    JFCRECFM,JFCRFB            BLOCKED RECORDS?\n         BNO   NOTBLK                     NO. TRY NEXT.\n         MVI   0(R4),C'B'                 YES. MARKED BLOCKED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTBLK   TM    JFCRECFM,JFCRFS            SPANNED RECORDS?\n         BNO   NOTSCN                     NO. TRY NEXT.\n         MVI   0(R4),C'S'                 YES. MARK SPANNED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTSCN   TM    JFCRECFM,JFCASA            ASA CONTROL CHARACTERS?\n         BNO   NOTASA                     NO. TRY NEXT.\n         MVI   0(R4),C'A'                 YES. MARK ASA.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTASA   TM    JFCRECFM,JFCMAC            MACHINE CONTROL CHARS?\n         BNO   PUTRECFM                   NO. CHECK IF NO RECFM.\n         MVI   0(R4),C'M'                 YES. MARK MACHINE.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n*\nPUTRECFM TM    FLAG1,X'08'                IS RECFM MISSING?\n         BNO   PUTRCFM                    NO. PRINT THE RECFM.\n         MVC   OUTLINE+19(14),=C'NO RECFM CODED'  YES. MARK MISSING.\nPUTRCFM  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\nLRECL    DS    0H                         TEST FOR LRECL.\n         MVC   OUTLINE,OUTLINE-1          CLEAR OUTPUT.\n         MVC   OUTLINE,MSGLRECL           MOVE LRECL MESSAGE.\n         SR    R4,R4                      CLEAR WORK REGISTER.\n         LH    R4,JFCLRECL                LOAD IT WITH JFCB LRECL.\n         C     R4,=F'0'                   IS THE VALUE ZERO?\n         BNE   LRECPRT                    NO. DON'T TEST FOR RECFM=U.\n         TM    FLAG2,X'01'                IS IT RECFM=U?\n         BO    LRECPRT                    YES. 0 IS LEGITIMATE.\n         OI    FLAG1,X'04'                NO. INDICATE LRECL MISSING.\n         MVC   OUTLINE+19(7),=C'MISSING'  SHOW IT IN MESSAGE.\n         B     LRECPUT                    WRITE LRECL MESSAGE\n*\nLRECPRT  DS    0H                         LRECL PRINT.\n         CVD   R4,DECVALUE                CONVERT BINARY TO PACKED.\n         MVC   OUTLINE+19(12),EDPAT       EDIT.\n         ED    OUTLINE+19(12),DECVALUE+3  DISPLAY LRECL VALUE IN MSG.\nLRECPUT  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\n*                                         PRINT BLOCKSIZE MESSAGE.\nBLKSIZE  MVC   OUTLINE,OUTLINE-1          CLEAR OUTPUT LINE.\n         MVC   OUTLINE,MSGBLKSZ           MOVE IN BLOCKSIZE MESSAGE.\n         SR    R4,R4                      CLEAR WORK REGISTER.\n         LH    R4,JFCBLKSI                LOAD BINARY BLKSZ FROM JFCB.\n         C     R4,=F'0'                   IS IT ZERO?\n         BNE   BLKSIZEG                   NO. BLOCK SIZE IS GOOD.\n         OI    FLAG1,X'02'                YES. FLAG BLKSIZE MISSING.\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'   AND PRINT ERRMSG.\n         B     BLKSZPUT                   GO PRINT BLOCKSIZE ERRMSG.\nBLKSIZEG CVD   R4,DECVALUE                GOOD VALUE, CONVERT TO PACKED\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE EDIT PATTERN\n         ED    OUTLINE+19(12),DECVALUE+3  DISPLAY VALUE IN MESSAGE.\nBLKSZPUT PUT   SYSPRINT,OUTLINE           PRINT BLOCKSIZE MSG OUT.\n*\n         BR    R7                         RETURN TO CALLER.\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nTIOTSCAN DS    0H                Determine the presence of Optional   *\n*                                DDNAME:   SYSIN                      *\n* ----->                         OPEN SYSIN if there is JCL for it.   *\n* ------------------------------------------------------------------- *\n         ST    R7,SAVER7TT               SAVE BAL REGISTER\n         ST    R3,SAVER3TT               SAVE WORK REGISTERS\n         ST    R5,SAVER5TT\n         L     R5,16                     R5=CVT\n         L     R5,0(,R5)                 R5=TCB WORDS\n         L     R5,4(,R5)                 R5=MY TCB\n         L     R5,12(,R5)                R5=TIOT\n         LA    R5,24(,R5)                R5=FIRST DD ENTRY\nTIOTLOOP CLC   0(4,R5),=XL4'00'          END OF TIOT?\n         BE    TIOTSEND                  YES\nTIOTSYSN CLC   4(8,R5),SYSIN+40          ENTRY MATCH?\n         BNE   TIOTNEXT                  NO. TRY NEXT ONE.\n         OI    FLAGSYSN,X'01'            YES-SHOW PRESENCE OF SYSIN DD\n         B     TIOTNEXT\nTIOTNEXT SR    R3,R3\n         IC    R3,0(,R5)                 R3=LENGTH OF DD ENTRY\n         AR    R5,R3                     R5=NEXT DD ENTRY\n         B     TIOTLOOP                  GO CHECK IT\nTIOTSEND DS    0H\n         L     R3,SAVER3TT               RESTORE WORK REGISTERS\n         L     R5,SAVER5TT\n         L     R7,SAVER7TT               RESTORE BAL REGISTER\n         BR    R7                        R7 IS THE BAL REGISTER\n* ------------------------------------------------------------------- *\nSAVER3TT DS    F\nSAVER5TT DS    F\nSAVER7TT DS    F\nFLAGSYSN DC    X'00'\n* ------------------------------------------------------------------- *\n*                    PROCESS THE SYSIN RECORDS                        *\n* ------------------------------------------------------------------- *\nDOSYSIN  DS    0H                        Process SYSIN records.\n         ST    R7,SAVER7SY\n         OPEN  (SYSIN,(INPUT))\n         STM   R3,R4,SAVE34              Save the work registers.\n         MVC   BLNKLINE,BLNKLINE-1       Clear blank line\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   Display SYSIN Cards and Conversions x\n                (Later overrides Earlier)'\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   ------- ----- ----- --- ----------- x\n                 ----- --------- ------- '\n         PUT   SYSPRINT,OUTLINE\nSYINLOOP DS    0H                        Read all the SYSIN cards.\n         GET   SYSIN,INSYSIN             GET a card.\n         NI    NUMCFLG,X'FF'-X'07'       Assume number on card is valid\n         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.\n         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.\n* ------------------------------------------------------------------ *\n*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *\n* ------------------------------------------------------------------ *\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.\n         MVC   OUTLINE+39(21),=C'<--- (Value as coded)'\n         PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------ *\n*           Test the uppercased card for keywords                    *\n*           And afterwards do the proper displacements               *\n* ------------------------------------------------------------------ *\n         LA    R3,WRKSYSIN               Point R3 to the uppercased.\n         LA    R4,INSYSIN                Point R4 to the original.\n         CLC   =C'COPY= ',0(R3)           COPY= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'SKIP= ',0(R3)           SKIP= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'COPY=',0(R3)            COPY= keyword?\n         BE    HCOPY                      Yes. Handle it.\n         CLC   =C'SKIP=',0(R3)            SKIP= keyword?\n         BE    HSKIP                      Yes. Handle it.\n         B     SYINLOOP\nHCOPY    DS    0H                         Handle COPY=\n         OI    SKIPFLG,X'02'              Indicate its presence.\n         LA    R4,5(,R4)                  Point to the number.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHCOPY(12),CHARNUM         Display value\n         MVC   BICOPY(4),BINVALUE         Binary  value\n         TM    NUMCFLG,X'01'              INVALID?\n         BO    HNZCOPY                    DON'T PACK IF INVALID !!\n         ZAP   PKCOPY,PACKNUM             Packed  value\nHNZCOPY  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'COPY=  '\n         MVC   OUTLINE+20(8),=C'Binary: '\n         HEX   OUTLINE+29,4,BICOPY\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(12),CHCOPY\n         TM    NUMCFLG,X'01'\n         BZ    HCOPYGD\n         MVC   OUTLINE+68(15),=C'Invalid Numeric'\nHCOPYGD  DS    0H\n         TM    NUMCFLG,X'02'\n         BZ    HCOPYGD1\n         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'\nHCOPYGD1 DS    0H\n         PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\n*\nHSKIP    DS    0H                         Handle SKIP=\n         OI    SKIPFLG,X'01'              Indicate its presence.\n         LA    R4,5(,R4)                  Bump the pointers.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHSKIP(12),CHARNUM         Display value\n         MVC   BISKIP(4),BINVALUE         Binary  value\n         TM    NUMCFLG,X'01'              INVALID?\n         BO    HNZSKIP                    DON'T PACK IF INVALID !!\n         ZAP   PKSKIP,PACKNUM             Packed  value\nHNZSKIP  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'SKIP=  '\n         MVC   OUTLINE+20(8),=C'Binary: '\n         HEX   OUTLINE+29,4,BISKIP\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(12),CHSKIP\n         TM    NUMCFLG,X'01'           Invalid numeric character coded\n         BZ    HSKIPGD\n         MVC   OUTLINE+68(15),=C'Invalid Numeric'\nHSKIPGD  DS    0H\n         TM    NUMCFLG,X'02'           Binary equivalent > X'7FFFFFFF'\n         BZ    HSKIPGD1                (Doesn't cause abend or RC>0.)\n         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'\nHSKIPGD1 DS    0H                      PUT error message out.\n         PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                Look for next card.\nSYSINEND DS    0H\n         MVC   OUTLINE,OUTLINE-1\n*        PUT   SYSPRINT,OUTLINE\n* ----- >\n         CLOSE (SYSIN)\n         LM    R3,R4,SAVE34\nSYSINENX DS    0H\n         MVC   OUTLINE,OUTLINE-1       Print a blank line.\n         PUT   SYSPRINT,OUTLINE\n         L     R7,SAVER7SY\n         BR    R7\n*------------------------  Constants needed for this routine -----*\nSAVE34   DS    2F                Save work registers for routine.\nSAVER7SY DS    F                 Save BAL register.\nINSYSIN  DC    CL80' '           Buffer for SYSIN card image.\nWRKSYSIN DC    CL80' '           Buffer to uppercase SYSIN image.\n         DC    X'40'\nBLNKLINE DC    CL80' '           Place to supply blanks for pgm.\nCHCOPY   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBICOPY   DS    F                 FULLWORD BINARY NUMBER\nPKCOPY   DS    PL8               Packed Decimal records to copy.\nCHSKIP   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBISKIP   DS    F                 FULLWORD BINARY NUMBER\nPKSKIP   DS    PL8               Packed Decimal records to skip.\n*-----------------------------------------------------------------*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Routine to get the numeric values from the SYSIN keywords.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\nNUMBRGET DS    0H                   Initialize for each SYSIN card.\n         ST    R7,SAVER7NG          Save BAL register.\n         ST    R4,SAVER4A           Save address of number in original\n         ST    R3,SAVER3A           Save address of number in copy\n         NI    NUMCFLG,X'FF'-X'07'  Turn off \"not numeric\" flag.\n         MVC   CHARNUM(12),BLNKLINE   Initialize character field\n         XC    BINVALUE,BINVALUE      Clear binary value\n         LA    R6,12                Limit the search to 12 numbers.\n* ----------------------------------------------------------------- *\n*    Upon entry, R4 points to \"number\" in original.\n*    Upon entry, R3 points to \"number\" in copy.\n* ----------------------------------------------------------------- *\n         CLI   0(R4),C' '        Is the first number value blank?\n         BE    NUMBRCLG          Yes. Ignore the entire card.\n* --\n* ----------------------------------------------------------------- *\n*    At this point, we are looking at the first character after     *\n*     the particular keyword, and we want to test it and extract    *\n*     its value.                                                    *\n* ----------------------------------------------------------------- *\n         CLI   0(R4),X'F0'       Smaller than character 0?\n         BL    NUMBRNVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than 9?\n         BH    NUMBRNVL          Yes. Mark as invalid.\n         B     NUMBRVLD          Didn't fail, consider the number valid\n*                   Remember that R4 is start address for \"number\".\nNUMBRNVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBRVLD DS    0H\n* ----------------------------------------------------------------- *\nNUMBRNUM DS    0H                Loop to extract the number.\n         LA    R4,1(,R4)         Bump R4 to point to next character.\n         C     R4,INSYSIN+71     End of card?\n         BH    NUMBRGNM          Yes, Get number.\n         CLI   0(R4),C' '        Blank here?\n         BE    NUMBRGNM          Yes, Get number.\n** ----- >>   Validity Check - below\n* --\n         CLI   0(R4),X'F0'       Smaller than C'0'?\n         BL    NUMBINVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than C'9'?\n         BH    NUMBINVL          Yes. Mark as invalid.\n         B     NUMBVALD          None of above, don't mark invalid.\nNUMBINVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBVALD DS    0H\n** ----- >>   Validity Check - above\n         BCT   R6,NUMBRNUM       Step up one place.\n         OI    INVNFLG,X'02'     Show we've coded more than 12 numbers\n* ----------------------------------------------------------------- *\n*  This is a serious error, and we abort the COPY with a message.   *\n* ----------------------------------------------------------------- *\nNUMBRGNM DS    0H\n         L     R2,SAVER4A        Load R2 with address of number start\n         SR    R4,R2             How big is the number?\n         BCTR  R4,0              Lower by one for EXECUTE.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         XC    PACKWORK,PACKWORK   Clear the work area.\n         EX    R4,PACKIT         Pack the number into work area.\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKWORK     Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\n         ZAP   PACKNUM,PACKWORK\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKNUM      Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\nNUMBRNPK DS    0H\n         MVC   CHARNUM(12),BLNKLINE   Clear the display area.\n         EX    R4,MVNUMBER       Move the display value to display.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.\n* ----------------------------------------------------------------- *\n*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *\n* ----------------------------------------------------------------- *\n         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number\n         BH    NUMBRCLY          CVB has upper limit of X'7FFFFFFF'\n         CVB   R0,PACKWORK       Convert the packed version to binary.\n         ST    R0,BINVALUE       Store the binary value for later use.\n         B     NUMBRCLG\nNUMBRCLY DS    0H\n         OI    NUMCFLG,X'02'     CVB limit exceeded. Flag it.\nNUMBRCLG DS    0H                End of routine to extract numbers.\n         L     R3,SAVER3A\n         L     R7,SAVER7NG       Restore BAL register.\n         BR    R7\n* ----------------------------------------------------------------- *\nPACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>\nMVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>\nSAVER7NG DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKWORK DC    2D'0'             PACK WORK AREA (expanded to 2D)\nCHARNUM  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBINVALUE DS    F                 FULLWORD BINARY NUMBER\nPACKNUM  DS    PL8               Packed number.\n*\nNUMCFLG  DS    X                 Error flag FOR EACH SYSIN card\n*              X'01'             Error present in THIS card\n*              X'02'             Number exceeds CVB limit\n*\nINVNFLG  DS    X                 Error present in ANY card-ABORT..\n*              X'01'             Non-numeric in any card.\n*              X'02'             A coded number exceeds 12 digits.\n*\nSKIPFLG  DC    X'00'\n*                                X'01' - SKIP coded\n*                                X'02' - COPY coded\n* ----------------------------------------------------------------- *\nHEX      DS    0H                    Hex Number Display Routine.\n         ST    R7,SAV7HEX\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R7,SAV7HEX\n         BR    R7                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n* ----------------------------------------------------------------- *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV7HEX  DC    F'0'\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'          For PRTJFCB routine.\n*              X'01'          DSORG is missing or in error\n*              X'02'          BLKSIZE is missing or in error\n*              X'04'          LRECL is missing or in error\n*              X'08'          RECFM is missing or in error\nFLAG2    DC    X'00'          X'01' shows RECFM=U, LRECL=0 is valid\nABORTFLG DC    X'00'\n* ----- CONSTANTS ------ *\nPKZERO   DC    PL8'0'\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\nEDPAT2   DC    X'402020206B2020206B2020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nOUTLINET EQU   OUTLINE+7\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\nMSGVOLSR DC    CL133'         VOLSER  ='\nMSGMBR   DC    CL133'         MEMBER  ='\nMSGDSORG DC    CL133'         DSORG   ='\nMSGBLKSZ DC    CL133'         BLKSIZE ='\nMSGLRECL DC    CL133'         LRECL   ='\nMSGRECFM DC    CL133'         RECFM   ='\nMSG01    DC    CL133'-    RECORDS  IN ='\nMSG02    DC    CL133'     RECORDS OUT ='\nMSG03    DC    CL133'     SKIPPED     ='\nMSG04    DC    CL133'     COPIED      ='\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\nABENDMS2 DC    CL133'-         ***  NO DATA WAS COPIED  *** '\nABORTMSG DC    CL133'-   SYSIN CARDS INVALID - COPY ABORTED '\nEXCESMSG DC    CL133'-   SYSIN CARDS INVALID - MORE THAN 12 DIGITS   '\nINRCDS   DC    PL8'0'\nOUTRCDS  DC    PL8'0'\nSKIPRCDS DC    PL8'0'\nCOPYRCDS DC    PL8'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\n* ----------------------------------------------------------------- *\n*          Work area for time and date display routine              *\n* ----------------------------------------------------------------- *\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDATE DC    CL23' '\n         DC    CL8' '\n* ----------------------------------------------------------------- *\n*                    R D J F C B  Work Area                         *\n* ----------------------------------------------------------------- *\n         DS    0F\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\n* ----------------------------------------------------------------- *\n*                         Copy Buffer                               *\n* ----------------------------------------------------------------- *\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG01": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x009\\x01\\x01\\x12\\x8f\\x01\\x17)\\x1f\\x14U\\x005\\x003\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-08T00:00:00", "modifydate": "2017-10-18T14:55:39", "lines": 53, "newlines": 51, "modlines": 0, "user": "SBGOLOB"}, "text": "*------------------------------------------------------------- *\n* Program to copy a sequential file to another sequential file *\n* using QSAM.  GET a record and write it to a buffer.  PUT the *\n* record from the buffer to an output file.  Loop until end of *\n* input.                                                       *\n*                                                              *\n* QSAM does the blocking.  This program is very general, and   *\n* you have to specify many of the dataset characteristics in   *\n* the JCL, unless the system has another way to find them out. *\n* (OPEN processing helps you out here, if the dataset is       *\n* cataloged.)                                                  *\n*                                                              *\n* Qriginal program was from Baldomero Castilla.                *\n* (Adapted to comment in English, and to use only IBM macros)  *\n*------------------------------------------------------------- *\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'CKIEBGEN'\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         LR    R1,R5          RESTORE PARM POINTER\n         DROP  R15\n* -----                       SET UP ONE BASE REGISTER\n         USING CKIEBGEN,R12\n         LR    R12,R15\n* -----                       OPEN INPUT AND OUTPUT FILES\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n* -----                       READ-WRITE AND LOOP UNTIL END\nLOOPIT   GET   SYSUT1,AREA\n         PUT   SYSUT2,AREA\n         B     LOOPIT\n* -----                       AT END OF INPUT, CLOSE FILES\nFIN      CLOSE SYSUT1\n         CLOSE SYSUT2\n* -----                       AND FINISH\nTHEEND   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n* -----                       INPUT AND OUTPUT QSAM DCB'S\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS\n* -----\nAREA     DS    CL32768        THIS IS THE DATA BUFFER\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CKIEBG02": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00#\\x8f\\x01\\x000o\\x13\\x17\\x00L\\x00\\x0e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-11-01T13:17:00", "lines": 76, "newlines": 14, "modlines": 0, "user": "WSBG"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n* ----------------------------------------------------------------- *\nCKIEBGEN CSECT                                                           00327\n         YREGS\n         USING *,R15                                                     00328\n         B     EYECATCH                                                  00329\n         DC    C'--- '            MAKE EYECATCHER VISIBLE                00330\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '                  00331\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '                    00332\n         DC    C'LEVEL 002 '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE                00330\nSAVEAREA DC    18F'0'                                                    00334\nEYECATCH DS    0H             ENSURE ALIGNMENT                           00335\n         SAVE  (14,12)                                                   00336\n         LR    R5,R1          SAVE PARM POINTER                          00337\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR                   00338\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR          00339\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR         00340\n         LR    R13,R1               NEW SAVE AREA ADDRESS                00341\n         DROP  R15                                                       00342\n* -----                       SET UP ONE BASE REGISTER                   00343\n         USING CKIEBGEN,R12                                              00344\n         LR    R12,R15                                                   00345\n         LR    R1,R5          RESTORE PARM POINTER                       00354\n         PRINT GEN\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         OPEN  (SYSPRINT,OUTPUT)\n         ZAP   INRCDS,=P'0'\n         ZAP   OUTRCDS,=P'0'\nLEER     GET   SYSUT1,AREA\n         AP    INRCDS,=P'1'\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'\n         B     LEER\nFIN      CLOSE SYSUT1\n         CLOSE SYSUT2\nPRINTIT  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n         MVC   MSG01+19(10),EDPAT\n         ED    MSG01+19,INRCDS+2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         PUT   SYSPRINT,OUTLINE\n         MVC   MSG02+19(10),EDPAT\n         ED    MSG02+19,OUTRCDS+2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         PUT   SYSPRINT,OUTLINE\n         CLOSE SYSPRINT\nTHEEND   DS    0H                                                        01719\n         L     R13,4(,R13)                                               01720\n         RETURN (14,12),RC=0                                             01721\n* ----- CONSTANTS ------ *\nEDPAT    DC    X'40202020202020202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM     '\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN =                        '\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT =                        '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG03": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x01\\x12\\x1f\\x01\\x01\\x12\\x8f\\x12\\x00\\x01\\x0b\\x01\\t\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-05-01T00:00:00", "modifydate": "2001-05-08T12:00:00", "lines": 267, "newlines": 265, "modlines": 0, "user": "WSBG"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n*                  LEVEL - 003                                      *\n* ----------------------------------------------------------------- *\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL 002 '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11\n         LR    R12,R15\n         LR    R11,R12\n         A     R11,=F'4096'\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         OPEN  (SYSPRINT,OUTPUT)\n         ZAP   INRCDS,=P'0'\n         ZAP   OUTRCDS,=P'0'\nLEER     GET   SYSUT1,AREA\n         AP    INRCDS,=P'1'\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'\n         B     LEER\nFIN      MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSORG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BNE   BLKSIZE1\nPUTDSORG PUT   SYSPRINT,OUTLINE\nBLKSIZE1 MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         CVD   R4,DECVALUE\n         ED    OUTLINE+19(12),DECVALUE+3\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         CVD   R4,DECVALUE\n         ED    OUTLINE+19(12),DECVALUE+3\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM1\n         MVI   0(R4),C'M'\nPUTRCFM1 PUT   SYSPRINT,OUTLINE\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG2\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BNE   BLKSIZE2\nPUTDSRG2 PUT   SYSPRINT,OUTLINE\nBLKSIZE2 MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         CVD   R4,DECVALUE\n         ED    OUTLINE+19(12),DECVALUE+3\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         CVD   R4,DECVALUE\n         ED    OUTLINE+19(12),DECVALUE+3\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND2\n         MVI   0(R4),C'U'\n         A     R4,ONE\n         B     CHKB2\nNOTUND2  TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX2\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX2  TM    JFCRECFM,JFCVAR\n         BNO   CHKB2\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB2    TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK2\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK2  TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN2\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN2  TM    JFCRECFM,JFCASA\n         BNO   NOTASA2\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA2  TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM2\n         MVI   0(R4),C'M'\nPUTRCFM2 PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         CLOSE SYSPRINT\nTHEEND   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n* ----- CONSTANTS ------ *\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG04": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x01\\x12\\x1f\\x01\\x01\\x12\\x8f\\x127\\x00\\xf6\\x01\\t\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-05-01T00:00:00", "modifydate": "2001-05-08T12:37:00", "lines": 246, "newlines": 265, "modlines": 0, "user": "WSBG"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n*                  LEVEL - 004                                      *\n* ----------------------------------------------------------------- *\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL 004 '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LR    R11,R12\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n         OPEN  (SYSPRINT,OUTPUT)\nPRLMJFCB DS    0H                   PRELIMINARY READ JFCB TO DETERMINE\n*                                   AVAILABLE DCB FIELD INFORMATION\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n* -------\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         BAL   R7,PRTJFCB\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         BAL   R7,PRTJFCB\n         TM    FLAG1,X'07'\n         BZ    REOPEN\n         B     ABSTART\nREOPEN   DS    0H\n         CLOSE SYSUT2\n         OPEN  (SYSUT2,(OUTPUT))\n* -------\n         ZAP   INRCDS,=P'0'\n         ZAP   OUTRCDS,=P'0'\nLEER     GET   SYSUT1,AREA                MAIN PROCESSING LOOP\n         AP    INRCDS,=P'1'\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'\n         B     LEER\n* -------\nFIN      DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2\n         PUT   SYSPRINT,OUTLINE\nABSTART  DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         B     THEEND\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n* -------\nTHEEND   DS    0H\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\nPRTJFCB  DS    0H\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BE    PUTDSRG\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'\nPUTDSRG  PUT   SYSPRINT,OUTLINE\nRECFM    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         OI    FLAG2,X'01'                FLAG RECFM=U\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM\n         MVI   0(R4),C'M'\nPUTRCFM  PUT   SYSPRINT,OUTLINE\nLRECL    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         C     R4,=F'0'\n         BNE   LRECPRT\n         TM    FLAG2,X'01'                IS RECFM=U?\n         BO    LRECPRT                    YES-0 IS LEGITIMATE\n         OI    FLAG1,X'04'\n         MVC   OUTLINE+19(7),=C'MISSING'\n         B     LRECPUT\nLRECPRT  DS    0H\n         CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         ED    OUTLINE+19(12),DECVALUE+3\nLRECPUT  PUT   SYSPRINT,OUTLINE\nBLKSIZE  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         C     R4,=F'0'\n         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD\n         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'\n         B     BLKSZPUT\nBLKSIZEG CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         ED    OUTLINE+19(12),DECVALUE+3\nBLKSZPUT PUT   SYSPRINT,OUTLINE\n         BR    R7\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'\n*              X'01'          DSORG IS MISSING\nFLAG2    DC    X'00'\n* ----- CONSTANTS ------ *\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG05": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x01\\x11_\\x01\\x01\\x13\\x0f\\tT\\x01\\x00\\x00L\\x00\\x00\\xe6\\xf1\\xf8\\xf8\\xf3@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-04-25T00:00:00", "modifydate": "2001-05-10T09:54:00", "lines": 256, "newlines": 76, "modlines": 0, "user": "W1883"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n*                  LEVEL - 005                                      *\n* ----------------------------------------------------------------- *\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL 005 '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LR    R11,R12\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n         OPEN  (SYSPRINT,OUTPUT)\nPRLMJFCB DS    0H                   PRELIMINARY READ JFCB TO DETERMINE\n*                                   AVAILABLE DCB FIELD INFORMATION\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n* -------\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         BAL   R7,PRTJFCB\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         BAL   R7,PRTJFCB\n         TM    FLAG1,X'07'\n         BZ    GO\n         B     ABSTART\n* -------\nGO       DS    0H\n         ZAP   INRCDS,=P'0'\n         ZAP   OUTRCDS,=P'0'\nLEER     GET   SYSUT1,AREA                MAIN PROCESSING LOOP\n         AP    INRCDS,=P'1'\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'\n         B     LEER\n* -------\nFIN      DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\nABSTART  DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         B     THEEND\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\nPRTJFCB  DS    0H\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           VOLSER\n         MVC   OUTLINE+19(6),JFCBVOLS\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BE    PUTDSRG\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'\nPUTDSRG  PUT   SYSPRINT,OUTLINE\nRECFM    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         OI    FLAG2,X'01'                FLAG RECFM=U\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM\n         MVI   0(R4),C'M'\nPUTRCFM  PUT   SYSPRINT,OUTLINE\nLRECL    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         C     R4,=F'0'\n         BNE   LRECPRT\n         TM    FLAG2,X'01'                IS RECFM=U?\n         BO    LRECPRT                    YES-0 IS LEGITIMATE\n         OI    FLAG1,X'04'\n         MVC   OUTLINE+19(7),=C'MISSING'\n         B     LRECPUT\nLRECPRT  DS    0H\n         CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         ED    OUTLINE+19(12),DECVALUE+3\nLRECPUT  PUT   SYSPRINT,OUTLINE\nBLKSIZE  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         C     R4,=F'0'\n         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD\n         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'\n         B     BLKSZPUT\nBLKSIZEG CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         ED    OUTLINE+19(12),DECVALUE+3\nBLKSZPUT PUT   SYSPRINT,OUTLINE\n         BR    R7\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'\n*              X'01'          DSORG IS MISSING\nFLAG2    DC    X'00'\n* ----- CONSTANTS ------ *\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGVOLSR DC    CL133'-        VOLSER  ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG06": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x01\\x11_\\x01\\x01 \\x1f\\x162\\x01)\\x00L\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-04-25T00:00:00", "modifydate": "2001-07-20T16:32:00", "lines": 297, "newlines": 76, "modlines": 0, "user": "WSBG"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n* ----------------------------------------------------------------- *\n         GBLC  &LLEV\n&LLEV    SETC  '006'\n*\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL &LLEV '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LR    R11,R12\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n***********************************************************************\n* GET SYSTEM DATE AND TIME                                            *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   HEADER+54(23),HEADDATE\n         MVI   HEADER+38,C'-'\n         MVC   HEADER+40(6),=C'LEVEL '\n         MVC   HEADER+46(3),=C'&LLEV'\n         LM    R14,R2,SAVE1402\n***********************************************************************\n         OPEN  (SYSPRINT,OUTPUT)\nPRLMJFCB DS    0H                   PRELIMINARY READ JFCB TO DETERMINE\n*                                   AVAILABLE DCB FIELD INFORMATION\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n* -------\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         BAL   R7,PRTJFCB\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         BAL   R7,PRTJFCB\n         TM    FLAG1,X'07'\n         BZ    GO\n         B     ABSTART\n* -------\nGO       DS    0H\n         ZAP   INRCDS,=P'0'\n         ZAP   OUTRCDS,=P'0'\nLEER     GET   SYSUT1,AREA                MAIN PROCESSING LOOP\n         AP    INRCDS,=P'1'\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'\n         B     LEER\n* -------\nFIN      DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2\n         PUT   SYSPRINT,OUTLINE\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\nABSTART  DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         B     THEEND\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\nPRTJFCB  DS    0H\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           VOLSER\n         MVC   OUTLINE+19(6),JFCBVOLS\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BE    PUTDSRG\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'\nPUTDSRG  PUT   SYSPRINT,OUTLINE\nRECFM    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         OI    FLAG2,X'01'                FLAG RECFM=U\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM\n         MVI   0(R4),C'M'\nPUTRCFM  PUT   SYSPRINT,OUTLINE\nLRECL    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         C     R4,=F'0'\n         BNE   LRECPRT\n         TM    FLAG2,X'01'                IS RECFM=U?\n         BO    LRECPRT                    YES-0 IS LEGITIMATE\n         OI    FLAG1,X'04'\n         MVC   OUTLINE+19(7),=C'MISSING'\n         B     LRECPUT\nLRECPRT  DS    0H\n         CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         ED    OUTLINE+19(12),DECVALUE+3\nLRECPUT  PUT   SYSPRINT,OUTLINE\nBLKSIZE  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         C     R4,=F'0'\n         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD\n         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'\n         B     BLKSZPUT\nBLKSIZEG CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         ED    OUTLINE+19(12),DECVALUE+3\nBLKSZPUT PUT   SYSPRINT,OUTLINE\n         BR    R7\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'\n*              X'01'          DSORG IS MISSING\nFLAG2    DC    X'00'\n* ----- CONSTANTS ------ *\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGVOLSR DC    CL133'-        VOLSER  ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDATE DC    CL23' '\n         DC    CL8' '\n         DS    0F\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBG07": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00H\\x01\\x081/\\x01\\x173\\x1f\\x13\\x06\\x02\\x97\\x01)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2008-11-07T00:00:00", "modifydate": "2017-11-27T13:06:48", "lines": 663, "newlines": 297, "modlines": 0, "user": "SBGOLOB"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n*                                                                   *\n*        Level 007 -   Introduce selection criteria to copy only    *\n*         (Nov 2011)   part of a file by counting records.          *\n*                      If SYSIN DD is present, the program looks    *\n*                      for SKIP=mmmmmmm or COPY=nnnnnnn or both,    *\n*                      starting in column 1, to first skip mmmmmmm  *\n*                      records in the file, and then copy the next  *\n*                      nnnnnnn records afterwards.  (S.Golob)       *\n*                                                                   *\n*         (Nov 2017)   When the number in SKIP=, or COPY=, was      *\n*                      greater than 2,147,483,647 then the CVB      *\n*                      instruction (which is really not necessary   *\n*                      for the comparisons, because the packed      *\n*                      values are used for comparisons) goes down   *\n*                      with a S0C9 abend.  This is bypassed in the  *\n*                      code.  That opens us up to a problem when    *\n*                      many more than 10 digits were coded.  And    *\n*                      we solve that by replacing B NUMBRGNM by a   *\n*                      BCT R6,NUMBRGNM, with R6 preset to 10.       *\n*                      This limits the number of numeric digits     *\n*                      searched for, to 10, and no more.            *\n* ----------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &LLEV\n&LLEV    SETC  '007'\n*\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL &LLEV '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LR    R11,R12\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n***********************************************************************\n* GET SYSTEM DATE AND TIME                                            *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   HEADER+54(23),HEADDATE\n         MVI   HEADER+38,C'-'\n         MVC   HEADER+40(6),=C'LEVEL '\n         MVC   HEADER+46(3),=C'&LLEV'\n         LM    R14,R2,SAVE1402\n***********************************************************************\n* ------------------------------------------------------------------- *\nINITCON  DS    0H\n         MVI   FLAGSYSN,X'00'       Initialize SYSIN flag.\n* ------------------------------------------------------------------- *\n         OPEN  (SYSPRINT,OUTPUT)\n         BAL   R7,TIOTSCAN          Scan if SYSIN DD is there.\n         TM    FLAGSYSN,X'01'       Is SYSIN DD there?\n         BZ    NOSYSIN              No. Just copy the entire file.\n         BAL   R7,DOSYSIN           Yes. Process the cards.\nNOSYSIN  DS    0H\nPRLMJFCB DS    0H                   Preliminary RDJFCB to determine\n*                                   available DCB field information.\n*--------\n         MVC   OUTLINE,OUTLINE-1    Print program header.\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n* -------                           OPEN input and output files.\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         BAL   R7,PRTJFCB           Print available information.\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         BAL   R7,PRTJFCB           Print available information.\n         TM    FLAG1,X'07'          No problems? Not missing info?\n         BZ    GO                   Then go copy the file.\n         B     ABSTART\n* ------------------------------------------------------------------- *\nGO       DS    0H\n         ZAP   INRCDS,=P'0'               Initialize counters.\n         ZAP   OUTRCDS,=P'0'\n         ZAP   SKIPRCDS,=P'0'\n         ZAP   COPYRCDS,=P'0'\n* ------------------------------------------------------------------- *\nREADWRIT DS    0H                         Main processing loop.\n         TM    INVNFLG,X'01'              Invalid SKIP or COPY?\n         BO    FIN                        Yes. Error. Do nothing.\n*\n         GET   SYSUT1,AREA                Get a new record.\n         AP    INRCDS,=P'1'               Count it as incoming.\n         TM    SKIPFLG,X'01'              Was SKIP coded?\n         BO    CNTSKIP                    Yes. Handle the skipping.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BO    CNTCOPY                    Yes. Handle that.\n         B     PUTITOUT                   Neither. Copy all records.\n*\nCNTSKIP  DS    0H                         Handle record skipping\n         CP    PKSKIP,INRCDS              Have we exceeded threshold?\n         BL    CNTCOPY                    Yes. See if copy was coded.\n         AP    SKIPRCDS,=P'1'             No. Count this skipped rcrd.\n         B     READWRIT                   And get another one.\n*\nCNTCOPY  DS    0H                         Handle subsequent copy.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BZ    CNTCOPYA                   No. Then there's no limit.\n         CP    PKCOPY,COPYRCDS            Limit exceeded?\n         BNH   FIN                        Yes. Get out altogether.\nCNTCOPYA DS    0H\n         AP    COPYRCDS,=P'1'             Count record copied.\nPUTITOUT DS    0H                         And actually copy it.\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'              Output record count.\n         B     READWRIT                   Loop back. Get another record\n* -------\nFIN      DS    0H                         Summary report and Exit.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2    Number of records input\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2   Number of records output\n         PUT   SYSPRINT,OUTLINE\n         TM    SKIPFLG,X'03'              Were SKIP= or COPY= coded?\n         BZ    GOCLOSE                    No. Extra print unnecessary.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG03\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),SKIPRCDS+2  Number of records skipped\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG04\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),COPYRCDS+2  Number of records copied\n         PUT   SYSPRINT,OUTLINE\nGOCLOSE  DS    0H                        Close input and output files\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H                        Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n* ------------------------------------------------------------------- *\n*  Come here if not enough DCB attributes to feed QSAM to make a copy.\n* ------------------------------------------------------------------- *\nABSTART  DS    0H                        Missing DCB attributes....\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         B     THEEND\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nPRTJFCB  DS    0H\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           VOLSER\n         MVC   OUTLINE+19(6),JFCBVOLS\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BE    PUTDSRG\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'\nPUTDSRG  PUT   SYSPRINT,OUTLINE\nRECFM    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         OI    FLAG2,X'01'                FLAG RECFM=U\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM\n         MVI   0(R4),C'M'\nPUTRCFM  PUT   SYSPRINT,OUTLINE\nLRECL    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         C     R4,=F'0'\n         BNE   LRECPRT\n         TM    FLAG2,X'01'                IS RECFM=U?\n         BO    LRECPRT                    YES-0 IS LEGITIMATE\n         OI    FLAG1,X'04'\n         MVC   OUTLINE+19(7),=C'MISSING'\n         B     LRECPUT\nLRECPRT  DS    0H\n         CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         ED    OUTLINE+19(12),DECVALUE+3\nLRECPUT  PUT   SYSPRINT,OUTLINE\nBLKSIZE  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         C     R4,=F'0'\n         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD\n         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'\n         B     BLKSZPUT\nBLKSIZEG CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         ED    OUTLINE+19(12),DECVALUE+3\nBLKSZPUT PUT   SYSPRINT,OUTLINE\n         BR    R7\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ----------------------------------------------------------------- *    06223\nTIOTSCAN DS    0H             Determine the presence of Optional         06224\n*                             DDNAME:   SYSIN                            06225\n* ----->                      OPEN SYSIN if there is JCL for it.         06226\n* ----------------------------------------------------------------- *    06227\n         ST    R7,SAVER7TT    SAVE BAL REGISTER\n         ST    R3,SAVER3TT    SAVE WORK REGISTERS\n         ST    R5,SAVER5TT\n         L     R5,16          R5=CVT                                     06228\n         L     R5,0(,R5)      R5=TCB WORDS                               06229\n         L     R5,4(,R5)      R5=MY TCB                                  06230\n         L     R5,12(,R5)     R5=TIOT                                    06231\n         LA    R5,24(,R5)     R5=FIRST DD ENTRY                          06232\nTIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?                             06233\n         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES        06234\nTIOTSYSN CLC   4(8,R5),SYSIN+40                                          06239\n         BNE   TIOTNEXT                                                  06240\n         OI    FLAGSYSN,X'01'       SHOW PRESENCE OF SYSIN    DD         06241\n         B     TIOTNEXT                                                  06242\nTIOTNEXT SR    R3,R3                                                     06243\n         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY                      06244\n         AR    R5,R3          R5=NEXT DD ENTRY                           06245\n         B     TIOTLOOP       GO CHECK IT                                06246\nTIOTSEND DS    0H                                                        06247\n         L     R3,SAVER3TT    RESTORE WORK REGISTERS\n         L     R5,SAVER5TT\n         L     R7,SAVER7TT    RESTORE BAL REGISTER\n         BR    R7             R7 IS THE BAL REGISTER\n* ----------------------------------------------------------------- *    06227\nSAVER3TT DS    F\nSAVER5TT DS    F\nSAVER7TT DS    F\nFLAGSYSN DC    X'00'\n* ------------------------------------------------------------------ *   06227\n*                  PROCESS THE SYSIN RECORDS                         *\n* ------------------------------------------------------------------ *\nDOSYSIN  DS    0H                        Process SYSIN records.\n         ST    R7,SAVER7SY\n         TM    FLAGSYSN,X'01'            Is SYSIN DD name in JCL?\n         BZ    SYSINENX                  No. Skip this entire section.\n         OPEN  (SYSIN,(INPUT))\n         STM   R3,R4,SAVE34              Save the work registers.\n         MVC   BLNKLINE,BLNKLINE-1       Clear blank line\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(26),=C'   Display SYSIN Cards     '\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(26),=C'   ------- ----- -----     '\n         PUT   SYSPRINT,OUTLINE\nSYINLOOP DS    0H                        Read all the SYSIN cards.\n         GET   SYSIN,INSYSIN             GET a card.\n         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.\n         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.\n         LA    R3,WRKSYSIN               Point R3 to the uppercased.\n         LA    R4,INSYSIN                Point R4 to the original.\n* ------------------------------------------------------------------ *\n*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *\n* ------------------------------------------------------------------ *\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.\n         PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------ *\n*           Test the uppercased card for keywords                    *\n*           And afterwards do the proper displacements               *\n* ------------------------------------------------------------------ *\n         CLC   =C'COPY= ',0(R3)           COPY= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'SKIP= ',0(R3)           SKIP= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'COPY=',0(R3)            COPY= keyword?\n         BE    HCOPY                      Yes. Handle it.\n         CLC   =C'SKIP=',0(R3)            SKIP= keyword?\n         BE    HSKIP                      Yes. Handle it.\n         B     SYINLOOP\nHCOPY    DS    0H                         Handle COPY=\n         OI    SKIPFLG,X'02'              Indicate its presence.\n         LA    R4,5(,R4)                  Point to the number.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHCOPY(10),CHARNUM         Display value\n         MVC   BICOPY(4),BINVALUE         Binary  value\n         TM    INVNFLG,X'01'              INVALID?\n         BO    HNZCOPY                    DON'T PACK IF INVALID !!\n         ZAP   PKCOPY,PACKNUM             Packed  value\nHNZCOPY  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'COPY=  '\n         HEX   OUTLINE+29,4,BICOPY\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(10),CHCOPY\n         TM    NUMCFLG,X'01'\n         BZ    HCOPYGD\n         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'\nHCOPYGD  DS    0H\n*        PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\n*\nHSKIP    DS    0H                         Handle SKIP=\n         OI    SKIPFLG,X'01'              Indicate its presence.\n         LA    R4,5(,R4)                  Bump the pointers.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHSKIP(10),CHARNUM         Display value\n         MVC   BISKIP(4),BINVALUE         Binary  value\n         TM    INVNFLG,X'01'              INVALID?\n         BO    HNZSKIP                    DON'T PACK IF INVALID !!\n         ZAP   PKSKIP,PACKNUM             Packed  value\nHNZSKIP  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'SKIP=  '\n         HEX   OUTLINE+29,4,BISKIP\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(10),CHSKIP\n         TM    NUMCFLG,X'01'\n         BZ    HSKIPGD\n         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'\nHSKIPGD  DS    0H\n*        PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\nSYSINEND DS    0H\n         MVC   OUTLINE,OUTLINE-1\n*        PUT   SYSPRINT,OUTLINE\n* ----- >\n         CLOSE (SYSIN)\n         LM    R3,R4,SAVE34\nSYSINENX DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         PUT   SYSPRINT,OUTLINE\n         L     R7,SAVER7SY\n         BR    R7\n*------------------------  Constants needed for this routine -----*\nSAVE34   DS    2F\nSAVER7SY DS    F\nINSYSIN  DC    CL80' '\nWRKSYSIN DC    CL80' '\n         DC    X'40'\nBLNKLINE DC    CL80' '\nCHCOPY   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBICOPY   DS    F                 FULLWORD BINARY NUMBER\nPKCOPY   DS    PL8\nCHSKIP   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBISKIP   DS    F                 FULLWORD BINARY NUMBER\nPKSKIP   DS    PL8\n*-----------------------------------------------------------------*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Routine to get the numeric values from the SYSIN keywords.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNUMBRGET DS    0H                                                        06454\n         ST    R7,SAVER7NG          Save BAL register.\n         ST    R4,SAVER4A           Save address of number in original\n         ST    R3,SAVER3A           Save address of number in copy\n         NI    NUMCFLG,X'FF'-X'01'  Turn off \"not numeric\" flag.\n         MVC   CHARNUM(10),BLNKLINE   Initialize character field\n         XC    BINVALUE,BINVALUE      Clear binary value\n         LA    R6,10                Limit search to 10 digits.\n* ----------------------------------------------------------------- *\n*    Upon entry, R4 points to \"number\" in original.\n*    Upon entry, R3 points to \"number\" in copy.\n* ----------------------------------------------------------------- *\n         CLI   0(R4),C' '        Is the first number value blank?        06455\n         BE    NUMBRCLG          Yes. Ignore the entire card.            06456\n* --\n* ----------------------------------------------------------------- *\n*    At this point, we are looking at the first character after     *\n*     the particular keyword, and we want to test it and extract    *\n*     its value.                                                    *\n* ----------------------------------------------------------------- *\n         CLI   0(R4),X'F0'       Smaller than character 0?               06457\n         BL    NUMBRNVL          Yes. Mark as invalid.                   06458\n         CLI   0(R4),X'F9'       Bigger than 9?                          06459\n         BH    NUMBRNVL          Yes. Mark as invalid.                   06460\n         B     NUMBRVLD          Didn't fail, consider the number valid\n*                   Remember that R4 is start address for \"number\".\nNUMBRNVL DS    0H                Mark the character as invalid number.   06464\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBRVLD DS    0H                                                        06464\n* ----------------------------------------------------------------- *\nNUMBRNUM DS    0H                Loop to extract the number.             06464\n         LA    R4,1(,R4)         Bump R4 to point to next character.     06465\n         C     R4,INSYSIN+71     End of card?                            06466\n         BH    NUMBRGNM          Yes, Get number.                        06467\n         CLI   0(R4),C' '        Blank here?                             06468\n         BE    NUMBRGNM          Yes, Get number.                        06469\n** ----- >>   Validity Check - below\n* --\n         CLI   0(R4),X'F0'       Smaller than C'0'?\n         BL    NUMBINVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than C'9'?\n         BH    NUMBINVL          Yes. Mark as invalid.\n         B     NUMBVALD          None of above, don't mark invalid.\nNUMBINVL DS    0H                Mark the character as invalid number.   06464\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBVALD DS    0H                                                        06464\n** ----- >>   Validity Check - above\n         BCT   R6,NUMBRNUM       Step up one place. (Limit 10 digits)    06470\n* ----------------------------------------------------------------- *\nNUMBRGNM DS    0H                                                        06471\n         L     R2,SAVER4A        Load R2 with address of number start\n         SR    R4,R2             How big is the number?                  06472\n         BCTR  R4,0              Lower by one for EXECUTE.               06473\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         TM    INVNFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         XC    PACKWORK,PACKWORK   Clear the doubleword work area.\n         EX    R4,PACKIT         Pack the number into work area.         06474\n*        MVC   OUTLINE,OUTLINE-1\n*        HEX   OUTLINE+20,8,PACKWORK     Test display\n*        PUT   SYSPRINT,OUTLINE\n         ZAP   PACKNUM,PACKWORK\n*        MVC   OUTLINE,OUTLINE-1\n*        HEX   OUTLINE+20,8,PACKNUM      Test display\n*        PUT   SYSPRINT,OUTLINE\nNUMBRNPK DS    0H                                                        06471\n         MVC   CHARNUM(10),BLNKLINE   Clear the display area.\n         EX    R4,MVNUMBER       Move the display value to display.      06476\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.\n* ----------------------------------------------------------------- *\n*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *\n* ----------------------------------------------------------------- *\n         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number\n         BH    NUMBRCLG          CVB has upper limit of X'7FFFFFFF'\n         CVB   R0,PACKWORK       Convert the packed version to binary.   06477\n         ST    R0,BINVALUE       Store the binary value for later use.   06478\nNUMBRCLG DS    0H                                                        06479\n         L     R3,SAVER3A\n         L     R7,SAVER7NG       Restore BAL register.\n         BR    R7                                                        06480\n* ----------------------------------------------------------------- *\nPACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>                    06759\nMVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>                    06767\nSAVER7NG DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKWORK DC    D'0'              PACK WORK AREA\nCHARNUM  DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBINVALUE DS    F                 FULLWORD BINARY NUMBER\nPACKNUM  DS    PL8\nNUMCFLG  DS    X\nINVNFLG  DS    X\nSKIPFLG  DC    X'00'\n*-----------------------------------------------------------------*\nHEX      DS    0H                                                        04224\n         ST    R7,SAV7HEX\n         MVC   1(1,R15),0(R1)        Move byte                           04225\n         UNPK  0(3,R15),1(2,R15)     Unpack                              04226\n         TR    0(2,R15),HEXTAB-240                                       04227\n         LA    R15,2(,R15)           Increment output pointer            04228\n         LA    R1,1(,R1)             Increment input pointer             04229\n         BCT   R0,HEX                Decrement length, then loop         04230\n         MVI   0(R15),C' '           Blank the trailing byte             04231\n         L     R7,SAV7HEX\n         BR    R7                    Return to caller                    04232\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table                     04233\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV7HEX  DC    F'0'\n         SPACE                                                           04234\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'\n*              X'01'          DSORG IS MISSING\nFLAG2    DC    X'00'\n* ----- CONSTANTS ------ *\nPKZERO   DC    PL8'0'\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nOUTLINET EQU   OUTLINE+7\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGVOLSR DC    CL133'         VOLSER  ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nMSG03    DC    CL133'     SKIPPED     ='\n         DC    CL133' '\nMSG04    DC    CL133'     COPIED      ='\n         DC    CL133' '\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\nSKIPRCDS DC    PL7'0'\nCOPYRCDS DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDATE DC    CL23' '\n         DC    CL8' '\n         DS    0F\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MANYRC#1": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x03\\x01\\x175\\x1f\\x01\\x175/\\x00V\\x00\\n\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2017-12-17T00:00:00", "modifydate": "2017-12-18T00:56:03", "lines": 10, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CKIEBGE1 EXEC PGM=MANYRCDS\n//STEPLIB   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT2    DD DISP=SHR,DSN=SBGOLOB.MANYRCDS\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSIN     DD *\nMAKE=100000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MANYRC#2": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00S\\x01\\x175\\x1f\\x01\\x175/\\x00B\\x00\\n\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2017-12-17T00:00:00", "modifydate": "2017-12-18T00:42:53", "lines": 10, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,                                    JOB04955\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CKIEBGE1 EXEC PGM=MANYRCDS\n//STEPLIB   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT2    DD DISP=SHR,DSN=SBGOLOB.FEWRCDS\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSIN     DD *\nMAKE=173497\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MANYRCD$": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x18\\x01\\x00$?\\x01\\x175/\\x00B\\x00\\x1c\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2017-12-18T00:42:18", "lines": 28, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE293(MANYRCDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495293\n SETCODE AC(0)\n NAME    MANYRCDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MANYRCDS": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00U\\x01\\x00#\\x8f\\x01\\x175/\\x00H\\x01v\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2017-12-18T00:48:55", "lines": 374, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "* ----------------------------------------------------------------- *\n*       MANYRCDS   -   PUT OUT MANY NUMBERED OUTPUT RECORDS         *\n*                      12 BYTE LRECL FOR NOW.                       *\n* ----------------------------------------------------------------- *\n*                                                                   *\n*   Function  : To produce many sequentially numbered records       *\n*               for testing the CKIEBGEN program and other copy     *\n*               programs.                                           *\n*                                                                   *\n*   Author    : This program is in the public domain.               *\n*                 (Written  by Sam Golob)                           *\n*                                                                   *\n*   JCL to run:                                                     *\n*                                                                   *\n*       //CKIEBGE1 EXEC PGM=MANYRCDS                                *\n*       //STEPLIB   DD DISP=SHR,DSN=your.loadlib                    *\n*       //SYSUT2    DD DISP=SHR,DSN=userid.manyrcds  (LRECL=12)     *\n*       //SYSPRINT  DD SYSOUT=*                                     *\n*       //SYSUDUMP  DD SYSOUT=*                                     *\n*       //SYSIN     DD *                                            *\n*       MAKE=100000                                                 *\n*                                                                   *\n*   Output format:                                                  *\n*                                                                   *\n*       1       10                                                  *\n*       +---+----+--                                                *\n*       000000000001                                                *\n*       000000000002                                                *\n*       000000000003                                                *\n*       000000000004                                                *\n*       000000000005                                                *\n*       000000000006                                                *\n*       000000000007                                                *\n*       000000000008                                                *\n*       000000000009                                                *\n*       000000000010                                                *\n*       000000000011                                                *\n*       000000000012                                                *\n*                                                                   *\n* ----------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMANYRCDS CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'MANYRCDS - MAKE MANY SEQUENTIAL RECORDS - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL 001 '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n*        SAVE  (14,12)\n         DS    0H\n         STM   14,12,12(13)              Save Registers\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP ONE BASE REGISTER\n         USING MANYRCDS,R12\n         LR    R12,R15\n         LR    R1,R5                  RESTORE PARM POINTER\n         OPEN  (SYSUT2,(OUTPUT))\n         OPEN  (SYSPRINT,OUTPUT)\n         BAL   R7,DOSYSIN             Handle SYSIN cards\n         ZAP   INRCDS,=P'0'           Initialize counters\n         ZAP   OUTRCDS,=P'0'\n         ZAP   PKCOPY,PACKSAVE        Save off the number of records\n         MVC   OUTLINE,OUTLINE-1      Clear output area\n         MVC   OUTLINE(133),MSG03     Bring skeleton of message\n         MVC   OUTLINE+19(20),EDPAT2  Show how many records to make\n         ED    OUTLINE+19(20),PKCOPY  And print the number out\n         PUT   SYSPRINT,OUTLINE\nLEER     DS    0H                     Create the output records\n         CP    PKCOPY,INRCDS          Have we reached the limit?\n         BNH   FIN                    Yes. Stop making records.\n         AP    INRCDS,=P'1'           Count.\n         MVC   OUTRECD(12),EDPAT1     Edit pattern with 'F0' fill\n         ED    OUTRECD(12),INRCDS+2   Create the output record\n         PUT   SYSUT2,OUTRECD         And PUT it out.\n         AP    OUTRCDS,=P'1'          Count records PUT out.\n         B     LEER                   And do the next record.\nFIN      DS    0H                     Come here at end of process.\n         CLOSE SYSUT2\nPRINTIT  MVC   OUTLINE,OUTLINE-1      Print the results.\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n         MVC   MSG01+19(20),EDPAT2\n         ED    MSG01+19(20),INRCDS\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         PUT   SYSPRINT,OUTLINE\n         MVC   MSG02+19(20),EDPAT2\n         ED    MSG02+19,OUTRCDS\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         PUT   SYSPRINT,OUTLINE\n         CLOSE SYSPRINT\nTHEEND   DS    0H                     Close the program.\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n* ------------------------------------------------------------------- *\nDOSYSIN  DS    0H                        Process SYSIN records.\n         ST    R7,SAVER7SY\n         OPEN  (SYSIN,(INPUT))\n         STM   R3,R4,SAVE34              Save the work registers.\n         MVC   BLNKLINE,BLNKLINE-1       Clear blank line\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   Display SYSIN Cards and Conversions x\n                (Later overrides Earlier)'\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   ------- ----- ----- --- ----------- x\n                 ----- --------- ------- '\n         PUT   SYSPRINT,OUTLINE\nSYINLOOP DS    0H                        Read all the SYSIN cards.\n         GET   SYSIN,INSYSIN             GET a card.\n         NI    NUMCFLG,X'FF'-X'07'       Assume number on card is valid\n         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.\n         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.\n* ------------------------------------------------------------------ *\n*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *\n* ------------------------------------------------------------------ *\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.\n         MVC   OUTLINE+39(21),=C'<--- (Value as coded)'\n         PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------ *\n*           Test the uppercased card for keywords                    *\n*           And afterwards do the proper displacements               *\n* ------------------------------------------------------------------ *\n         LA    R3,WRKSYSIN               Point R3 to the uppercased.\n         LA    R4,INSYSIN                Point R4 to the original.\n         CLC   =C'MAKE= ',0(R3)           MAKE= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'MAKE=',0(R3)            MAKE= keyword?\n         BE    HCOPY                      Yes. Handle it.\n         B     SYINLOOP\nHCOPY    DS    0H                         Handle MAKE=\n         OI    SKIPFLG,X'02'              Indicate its presence.\n         LA    R4,5(,R4)                  Point to the number.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHCOPY(12),CHARNUM         Display value\n         MVC   BICOPY(4),BINVALUE         Binary  value\n         TM    NUMCFLG,X'01'              INVALID?\n         BO    HNZCOPY                    DON'T PACK IF INVALID !!\n         ZAP   PKCOPY,PACKNUM             Packed  value\nHNZCOPY  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'MAKE=  '\n         MVC   OUTLINE+20(8),=C'Binary: '\n         HEX   OUTLINE+29,4,BICOPY\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(12),CHCOPY\n         TM    NUMCFLG,X'01'\n         BZ    HCOPYGD\n         MVC   OUTLINE+68(15),=C'Invalid Numeric'\nHCOPYGD  DS    0H\n         TM    NUMCFLG,X'02'\n         BZ    HCOPYGD1\n         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'\nHCOPYGD1 DS    0H\n         PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\nSYSINEND DS    0H                         Print a blank line.\n         MVC   OUTLINE,OUTLINE-1\n*        PUT   SYSPRINT,OUTLINE\n*\n* ----- >\n         CLOSE (SYSIN)\n         LM    R3,R4,SAVE34\nSYSINENX DS    0H\n         MVC   OUTLINE,OUTLINE-1       Print a blank line.\n         PUT   SYSPRINT,OUTLINE\n         L     R7,SAVER7SY\n         BR    R7\n*------------------------  Constants needed for this routine -----*\nSAVE34   DS    2F                Save work registers for routine.\nSAVER7SY DS    F                 Save BAL register.\nINSYSIN  DC    CL80' '           Buffer for SYSIN card image.\nWRKSYSIN DC    CL80' '           Buffer to uppercase SYSIN image.\n         DC    X'40'\nBLNKLINE DC    CL80' '           Place to supply blanks for pgm.\nCHCOPY   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBICOPY   DS    F                 FULLWORD BINARY NUMBER\nPKCOPY   DS    PL8               Packed Decimal records to copy.\nCHSKIP   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBISKIP   DS    F                 FULLWORD BINARY NUMBER\nPKSKIP   DS    PL8               Packed Decimal records to skip.\n*-----------------------------------------------------------------*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Routine to get the numeric values from the SYSIN keywords.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\nNUMBRGET DS    0H                   Initialize for each SYSIN card.\n         ST    R7,SAVER7NG          Save BAL register.\n         ST    R4,SAVER4A           Save address of number in original\n         ST    R3,SAVER3A           Save address of number in copy\n         NI    NUMCFLG,X'FF'-X'07'  Turn off \"not numeric\" flag.\n         MVC   CHARNUM(12),BLNKLINE   Initialize character field\n         XC    BINVALUE,BINVALUE      Clear binary value\n         LA    R6,12                Limit the search to 12 numbers.\n* ----------------------------------------------------------------- *\n*    Upon entry, R4 points to \"number\" in original.\n*    Upon entry, R3 points to \"number\" in copy.\n* ----------------------------------------------------------------- *\n         CLI   0(R4),C' '        Is the first number value blank?\n         BE    NUMBRCLG          Yes. Ignore the entire card.\n* --\n* ----------------------------------------------------------------- *\n*    At this point, we are looking at the first character after     *\n*     the particular keyword, and we want to test it and extract    *\n*     its value.                                                    *\n* ----------------------------------------------------------------- *\n         CLI   0(R4),X'F0'       Smaller than character 0?\n         BL    NUMBRNVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than 9?\n         BH    NUMBRNVL          Yes. Mark as invalid.\n         B     NUMBRVLD          Didn't fail, consider the number valid\n*                   Remember that R4 is start address for \"number\".\nNUMBRNVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBRVLD DS    0H\n* ----------------------------------------------------------------- *\nNUMBRNUM DS    0H                Loop to extract the number.\n         LA    R4,1(,R4)         Bump R4 to point to next character.\n         C     R4,INSYSIN+71     End of card?\n         BH    NUMBRGNM          Yes, Get number.\n         CLI   0(R4),C' '        Blank here?\n         BE    NUMBRGNM          Yes, Get number.\n** ----- >>   Validity Check - below\n* --\n         CLI   0(R4),X'F0'       Smaller than C'0'?\n         BL    NUMBINVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than C'9'?\n         BH    NUMBINVL          Yes. Mark as invalid.\n         B     NUMBVALD          None of above, don't mark invalid.\nNUMBINVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBVALD DS    0H\n** ----- >>   Validity Check - above\n         BCT   R6,NUMBRNUM       Step up one place.\n         OI    INVNFLG,X'02'     Show we've coded more than 12 numbers\n* ----------------------------------------------------------------- *\n*  This is a serious error, and we abort the COPY with a message.   *\n* ----------------------------------------------------------------- *\nNUMBRGNM DS    0H\n         L     R2,SAVER4A        Load R2 with address of number start\n         SR    R4,R2             How big is the number?\n         BCTR  R4,0              Lower by one for EXECUTE.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         XC    PACKWORK,PACKWORK   Clear the work area.\n         EX    R4,PACKIT         Pack the number into work area.\n         MVC   PACKSAVE,PACKWORK\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKWORK     Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\n         ZAP   PACKNUM,PACKWORK\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKNUM      Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\nNUMBRNPK DS    0H\n         MVC   CHARNUM(12),BLNKLINE   Clear the display area.\n         EX    R4,MVNUMBER       Move the display value to display.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.\n* ----------------------------------------------------------------- *\n*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *\n* ----------------------------------------------------------------- *\n         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number\n         BH    NUMBRCLY          CVB has upper limit of X'7FFFFFFF'\n         CVB   R0,PACKWORK       Convert the packed version to binary.\n         ST    R0,BINVALUE       Store the binary value for later use.\n         B     NUMBRCLG\nNUMBRCLY DS    0H\n         OI    NUMCFLG,X'02'     CVB limit exceeded. Flag it.\nNUMBRCLG DS    0H                End of routine to extract numbers.\n         L     R3,SAVER3A\n         L     R7,SAVER7NG       Restore BAL register.\n         BR    R7\n* ----------------------------------------------------------------- *\nHEX      DS    0H                    Hex Number Display Routine.\n         ST    R7,SAV7HEX\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R7,SAV7HEX\n         BR    R7                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n* ----------------------------------------------------------------- *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV7HEX  DC    F'0'\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>\nMVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>\nSAVER7NG DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKWORK DC    2D'0'             PACK WORK AREA (expanded to 2D)\nPACKSAVE DC    2D'0'             PACK SAVE AREA (expanded to 2D)\nCHARNUM  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nOUTRECD  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBINVALUE DS    F                 FULLWORD BINARY NUMBER\nPACKNUM  DS    PL8               Packed number.\n*\nNUMCFLG  DS    X                 Error flag FOR EACH SYSIN card\n*              X'01'             Error present in THIS card\n*              X'02'             Number exceeds CVB limit\n*\nINVNFLG  DS    X                 Error present in ANY card-ABORT..\n*              X'01'             Non-numeric in any card.\n*              X'02'             A coded number exceeds 12 digits.\n*\nSKIPFLG  DC    X'00'\n*                                X'01' - SKIP coded\n*                                X'02' - COPY coded\n         DC    CL8' '\nUNPKWORK DC    CL12' '\n         DC    CL8' '\n* ----------------------------------------------------------------- *\n* ----- CONSTANTS ------ *\nEDPAT    DC    X'40202020202020202120'\nEDPAT1   DC    X'F02020202020202020202120'\nEDPAT2   DC    X'402020206B2020206B2020206B2020206B202120'\nTWELVE0S DC    C'000000000000'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nOUTLINET EQU   OUTLINE+7\nHEADER   DC    CL133'1  MANYRCDS - CREATE SEQUENTIAL RECORDS   '\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN =                        '\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT =                        '\n         DC    CL133' '\nMSG03    DC    CL133'    RECORD LIMIT =                        '\n         DC    CL133' '\nINRCDS   DC    PL8'0'\nOUTRCDS  DC    PL8'0'\n         LTORG\n*YSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,LRECL=12\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\nAREA     DS    CL32768\n         END   MANYRCDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAMPJOB1": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x01\\x00$?\\x01\\x01\\x12\\x8f\\x125\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd1\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2001-05-08T12:35:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SAMPJOB"}, "text": "//WSBGCKIB JOB ,'SAM GOLOB',CLASS=S,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB   DD  DISP=SHR,DSN=WSBG.LOAD\n//SYSUT1    DD  DISP=SHR,DSN=WSBG.B.ASM(CKIEBGEN)\n//SYSUT2    DD  DISP=SHR,DSN=WSBG.B.CNTL(CKIEBGX4)\n//SYSPRINT  DD  SYSOUT=*,DCB=RECFM=FBA\n//SYSUDUMP  DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPJOB9": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x19\\x01\\x00$?\\x01\\x173\\x1f\\x13F\\x006\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2017-11-27T13:46:19", "lines": 54, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "     Sample Job Using SKIP= and COPY= Statements\n\n//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1    DD  DISP=SHR,DSN=SBGOLOB.B.CNTL(CKIEBTST)\n//SYSUT2    DD  DISP=SHR,DSN=SBGOLOB.B.DATA(CKIEBXXX)\n//SYSPRINT  DD  SYSOUT=*,DCB=RECFM=FBA\n//SYSUDUMP  DD  SYSOUT=*\n//SYSIN     DD  *\nCOPY=34\nSKIP=75\n/*\n\n     Its Output Using CKIEBGEN Version 008\n\n Display SYSIN Cards and Conversions  (Later overrides Earlier)\n ------- ----- ----- --- -----------   ----- --------- -------\n COPY=34                            <--- (Value as coded)\n    COPY=        Binary:  00000022        Decimal:  34\n SKIP=75                            <--- (Value as coded)\n    SKIP=        Binary:  0000004B        Decimal:  75\n\nCKIEBGEN - SEQUENTIAL COPY PROGRAM - LEVEL 008     11/27/2017  13:21:45\n JFCB REPORT OF DATASET CHARACTERISTICS\n   SYSUT1 DSN = SBGOLOB.B.CNTL\n      MEMBER  = CKIEBTST\n      VOLSER  = DATA02\n      DSORG   = PO\n      RECFM   = FB\n      LRECL   =           80\n      BLKSIZE =       27,920\n   SYSUT2 DSN = SBGOLOB.B.DATA\n      MEMBER  = CKIEBXXX\n      VOLSER  = DATA05\n      DSORG   = PO\n      RECFM   = FB\n      LRECL   =           80\n      BLKSIZE =       27,920\n\n  RECORDS  IN =                  100\n  RECORDS OUT =                   25\n  SKIPPED     =                   75\n  COPIED      =                   25\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAMPRPA3": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x07\\x01\\x01\\x12\\x1f\\x01\\x173\\x1f\\x13!\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-01T00:00:00", "modifydate": "2017-11-27T13:21:07", "lines": 25, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "\n\nSample report from a test run follows.   (After Warren's changes)\n\n\n  CKIEBGEN - SEQUENTIAL COPY PROGRAM\n     SYSUT1 DSN = W1883.TSO.PDS\n        MEMBER  = ALLOC\n        DSORG   = PO\n        BLKSIZE =       23,440\n        LRECL   =           80\n        RECFM   = FB\n     SYSUT2 DSN = W1883.TEST.DATA.SET\n        MEMBER  =\n        DSORG   = PS\n        BLKSIZE =       23,440\n        LRECL   =           80\n        RECFM   = FB\n    RECORDS  IN =           11\n    RECORDS OUT =           11\n\n\nHope the changes to CKIEBGEN are useful.\n\nWarren Whitford\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAMPRP02": {"ttr": 1810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x01\\x12\\x8f\\x01\\x173\\x1f\\x13 \\x00\\x05\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-08T00:00:00", "modifydate": "2017-11-27T13:20:20", "lines": 5, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "  CKIEBGEN - SEQUENTIAL COPY PROGRAM      (VERY OLD REPORT)\n\n\n    RECORDS  IN =        247\n    RECORDS OUT =        247\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPRP03": {"ttr": 1812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x12\\x8f\\x01\\x01\\x12\\x8f\\x12B\\x00\\x15\\x00\\x15\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-08T00:00:00", "modifydate": "2001-05-08T12:42:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "WSBG"}, "text": "  CKIEBGEN - SEQUENTIAL COPY PROGRAM\n\n\n     SYSUT1 DSN = WSBG.B.ASM\n        MEMBER  = CKIEBGEN\n        DSORG   = PO\n        BLKSIZE =       27,920\n        LRECL   =           80\n        RECFM   = FB\n\n\n     SYSUT2 DSN = WSBG.B.CNTL\n        MEMBER  = CKIEBGX3\n        DSORG   = PO\n        BLKSIZE =       27,920\n        LRECL   =           80\n        RECFM   = FB\n\n\n    RECORDS  IN =          247\n    RECORDS OUT =          247\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPRP04": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x01\\x01\\x12\\x8f\\x01\\x173\\x1f\\x13\\x19\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-08T00:00:00", "modifydate": "2017-11-27T13:19:48", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "  CKIEBGEN - SEQUENTIAL COPY PROGRAM        (OLDER REPORT)\n\n\n   JFCB REPORT OF DATASET CHARACTERISTICS\n\n\n     SYSUT1 DSN = WSBG.B.ASM\n        MEMBER  = CKIEBGEN\n        DSORG   = PO\n        RECFM   = FB\n        LRECL   =           80\n        BLKSIZE =       27,920\n\n\n     SYSUT2 DSN = WSBG.B.CNTL\n        MEMBER  = CKIEBGX4\n        DSORG   = PO\n        RECFM   = FB\n        LRECL   =           80\n        BLKSIZE =       27,920\n\n\n    RECORDS  IN =          247\n    RECORDS OUT =          247\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPRP05": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x01\\x01\\x13?\\x01\\x173\\x1f\\x13\\x19\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-13T00:00:00", "modifydate": "2017-11-27T13:19:22", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "  CKIEBGEN - SEQUENTIAL COPY PROGRAM       (OLDER REPORT)\n\n\n   JFCB REPORT OF DATASET CHARACTERISTICS\n\n\n     SYSUT1 DSN = WSBG.B.ASM\n        MEMBER  = CKIEBGEN\n        VOLSER  = W$Z002\n        DSORG   = PO\n        RECFM   = FB\n        LRECL   =           80\n        BLKSIZE =       27,920\n\n\n     SYSUT2 DSN = WSBG.TEST1\n        MEMBER  =\n        VOLSER  = WORK03\n        DSORG   = PS\n        RECFM   = FB\n        LRECL   =           80\n        BLKSIZE =        8,000\n\n\n    RECORDS  IN =          256\n    RECORDS OUT =          256\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPRP06": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x01\\x112/\\x01\\x173\\x1f\\x13\\x18\\x003\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-11-18T00:00:00", "modifydate": "2017-11-27T13:18:22", "lines": 51, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Sample Job and its Output, showing effects of SKIP and COPY.\n\n\n     **    JOB     **\n\n//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1    DD  DISP=SHR,DSN=SBGOLOB.CBT.EDIT(FILE001)\n//SYSUT2    DD  DISP=SHR,DSN=SBGOLOB.TEST.DATA(FILE00T)\n//SYSPRINT  DD  SYSOUT=*,DCB=RECFM=FBA\n//SYSUDUMP  DD  SYSOUT=*\n//SYSIN     DD  *\nCOPY=30000\nSKIP=500\n/*\n\n     **   OUTPUT   **\n\n Display SYSIN Cards and Conversions  (Later overrides Earlier)\n ------- ----- ----- --- -----------   ----- --------- -------\n COPY=30000                         <--- (Value as coded)\n    COPY=        Binary:  00007530        Decimal:  30000\n SKIP=500                           <--- (Value as coded)\n    SKIP=        Binary:  000001F4        Decimal:  500\n\nCKIEBGEN - SEQUENTIAL COPY PROGRAM - LEVEL 008     11/27/2017  13:13:20\n JFCB REPORT OF DATASET CHARACTERISTICS\n   SYSUT1 DSN = SBGOLOB.CBT.EDIT\n      MEMBER  = FILE001\n      VOLSER  = DATA02\n      DSORG   = PO\n      RECFM   = FB\n      LRECL   =           80\n      BLKSIZE =       27,920\n   SYSUT2 DSN = SBGOLOB.TEST.DATA\n      MEMBER  = FILE00T\n      VOLSER  = WORKS3\n      DSORG   = PO\n      RECFM   = FB\n      LRECL   =           80\n      BLKSIZE =       27,920\n\n  RECORDS  IN =               30,501\n  RECORDS OUT =               30,000\n  SKIPPED     =                  500\n  COPIED      =               30,000\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT293/FILE293.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT293", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}