./ ADD NAME=DISALIST 0103-09119-09198-0833-00322-00316-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISALIST                                              *
*                                                                     *
*  Function:                                                          *
*   Allow the user to enter assembler source.                         *
*                                                                     *
*   The disassembler allows the user to use actual assembler source   *
*   to define DSECTs and LABELs with the DSECT.  The disassembler     *
*   calls the assembler and then scans the SYSPRINT.  DSECTs can      *
*   be pre-processed by utility DISASMU1 or during a dis-assembly.    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISALIST CSECT
DISALIST AMODE 31
DISALIST RMODE ANY
         USING DISALIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISALIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDALIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING DCBE,SYSIN_DCBE
         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT
* ------------------------------------------------------------------- *
*        Copy existing source to SYSIN                                *
* ------------------------------------------------------------------- *
         ITRACE ID=COPY_SRC
         OPEN  (SYSIN_DCB,OUTPUT),                                     +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         ICM   R3,15,COMM_ASM_NEXT            FIRST ASSEMBLER SOURCE
         BZ    INIT0020
         USING ASM_DSECT,R3
INIT0010 DS    0H
         PUT   SYSIN_DCB,ASM_SOURCE           WRITE TO SYSIN
         LR    R1,R3
         ICM   R3,15,ASM_NEXT                 NEXT SOURCE
         FREEMAIN RU,                         FREE THE ASM BLOCK       +
               A=(1),                                                  +
               LV=ASM_DSECT_L
         LTR   R3,R3                          ANOTHER SOURCE STATEMENT?
         BNZ   INIT0010                       YES
INIT0020 DS    0H
         XC    COMM_ASM_NEXT,COMM_ASM_NEXT
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    DXD_FLAG,$SYSIN_DDID           OBTAINED SYSIN DATA ID?
         BO    MAIN0000                       YES
         MVC   DXD_DD,SYSIN
         BAL   R8,MAIN0100
         MVC   DXD_SYSIN_DDID,SPF_DDID        SAVE SYSIN DATASET ID
         OI    DXD_FLAG,$SYSIN_DDID
         ITRACE ID=IN_DDID,                                            +
               DATA1=DXD_SYSIN_DDID
* ------------------------------------------------------------------- *
*        Call EDIT                                                    *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         ITRACE ID=CALLEDIT,                                           +
               DATA1=DXD_SYSIN_DDID
         MVC   COMM_SPF_FUNCTION,EDIT         SPF FUNCTION
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_2                  .. DATASET NAME
         ST    R0,COMM_SPF_3                  .. VOLSER
         ST    R0,COMM_SPF_4                  .. PASSWORD
         ST    R0,COMM_SPF_5                  .. PANEL NAME
         ST    R0,COMM_SPF_6                  .. MACRO NAME
         ST    R0,COMM_SPF_7                  .. PROFILE NAME
         LA    R0,DXD_SYSIN_DDID              DDID
         ST    R0,COMM_SPF_8                  SET DATA ID ADDR
         OI    COMM_SPF_8,X'80'               FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS              PARMS FOR EDIT
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        LINK TO EDIT
* ------------------------------------------------------------------- *
*        Determine if there is any source to assemble                 *
* ------------------------------------------------------------------- *
         NI    DXD_FLAG,255-$HAVE_SOURCE      RESET FLAG
         LA    R1,MAIN0010                    EOD ADDRESS
         ST    R1,DCBEEODA                    SET EOD ADDRESS
         OPEN  (SYSIN_DCB,INPUT),                                      +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         GET   SYSIN_DCB,DXD_IO
         OI    DXD_FLAG,$HAVE_SOURCE
MAIN0010 DS    0H
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         TM    DXD_FLAG,$HAVE_SOURCE          ANY SOURCE TO ASSEMBLE?
         BNO   EXIT0000                       NO
* ------------------------------------------------------------------- *
*        Allocate SYSLIB                                              *
* ------------------------------------------------------------------- *
         ITRACE ID=FREESLIB
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION
         MVC   COMM_DAIR_DD,SYSLIB            SET DDNAME
         L     R15,V_DISDAIR
         BALR  R14,R15                        FREE SYSLIB
         ITRACE ID=ALOCSLIB
         MVI   COMM_DAIR_FUNC,$DAIR_CONCAT    SET DAIR FUNCTION
         L     R15,V_DISDAIR
         BALR  R14,R15                        CALL DISDAIR
         ITRACE ID=ALOC_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0100                        NO
* ------------------------------------------------------------------- *
*        Call DISASSEM                                                *
* ------------------------------------------------------------------- *
         ITRACE ID=CALLASSEM
         L     R15,V_DISASSEM                 DISASSEM ENTRY POINT
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Free SYSLIB                                                  *
* ------------------------------------------------------------------- *
         OC    COMM_SYSLIB_NEXT,COMM_SYSLIB_NEXT
         BZ    MAIN0020                       NOTHING TO FREE
         ITRACE ID=FREE_LIB
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,SYSLIB            DD TO FREE
         L     R15,V_DISDAIR                  DISDAIR EP
         BALR  R14,R15                        FREE DD
         ITRACE ID=FREE_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0100                        NO
* ------------------------------------------------------------------- *
*        Get data id for SYSPRINT                                     *
* ------------------------------------------------------------------- *
MAIN0020 DS    0H
         TM    DXD_FLAG,$SYSPRINT_DDID        HAVE SYSPRINT DATA ID?
         BO    MAIN0030                       YES
         MVC   DXD_DD,SYSPRINT                SET DD NAME
         BAL   R8,MAIN0100                    GET DATA ID
         MVC   DXD_SYSPRINT_DDID,SPF_DDID     SAVE SYSPRINT DATA ID
         OI    DXD_FLAG,$SYSPRINT_DDID
* ------------------------------------------------------------------- *
*        Call BROWSE for SYSPRINT                                     *
* ------------------------------------------------------------------- *
MAIN0030 DS    0H
         ITRACE ID=BROWSE,                                             +
               DATA1=DXD_SYSPRINT_DDID
         MVC   COMM_SPF_FUNCTION,BROWSE       SPF FUNCTION
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_2
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         LA    R0,DXD_SYSPRINT_DDID           DDID
         ST    R0,COMM_SPF_6                  SET DATA ID ADDR
         OI    COMM_SPF_6,X'80'               FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS              PARMS FOR BROWSE
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        LINK TO BROWSE
         CLC   COMM_ASSEMBLER_RC,H4           ASSEMBLER RC > 4?
         BH    MAIN0000                       YES
* ------------------------------------------------------------------- *
*        Save source                                                  *
* ------------------------------------------------------------------- *
         LA    R1,MAIN0050                    EOD ADDRESS
         ST    R1,DCBEEODA                    SET EOD ADDRESS
         ITRACE ID=OPEN
         OPEN  (SYSIN_DCB,INPUT),                                      +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         LA    R3,COMM_ASM_PREV
MAIN0040 DS    0H
         ITRACE ID=GET
         GET   SYSIN_DCB,DXD_IO               READ A RECORD
         ITRACE ID=SOURCE
         GETMAIN RU,                                                   +
               LV=ASM_DSECT_L,                                         +
               LOC=BELOW
NEW      USING ASM_DSECT,R1
         XC    NEW.ASM_DSECT(ASM_DSECT_L),NEW.ASM_DSECT
         ST    R1,ASM_NEXT                    SET NEXT BLOCK IN PREV
         ST    R3,NEW.ASM_PREV                SET PREV BLOCK IN NEW
         MVC   NEW.ASM_EYE,ASM_ID             IDENTIFY THE BLOCK
         MVC   NEW.ASM_SOURCE,DXD_IO          COPY DATA
         LR    R3,R1
         B     MAIN0040                       READ NEXT RECORD
         DROP  NEW
MAIN0050 DS    0H
         ITRACE ID=CLOSE
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         B     EXIT0000
* ------------------------------------------------------------------- *
*        Obtain data set ID                                           *
* ------------------------------------------------------------------- *
MAIN0100 DS   0H
         ITRACE ID=LMINIT
         MVC   COMM_SPF_FUNCTION,LMINIT       SPF FUNCTION
         LA    R0,DDID                        DDID (RETURNED BY LMINIT)
         ST    R0,COMM_SPF_2
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         ST    R0,COMM_SPF_6
         ST    R0,COMM_SPF_7
         ST    R0,COMM_SPF_8
         ST    R0,COMM_SPF_9
         LA    R0,DXD_DD                      DDNAME
         ST    R0,COMM_SPF_10                 SET DDNAME ADDR
         OI    COMM_SPF_10,X'80'              SET END-OF-LIST
         LA    R1,COMM_SPF_PARMS              SPF PARMS
         L     R15,COMM_ISPLINK               ISPLINK ENTRY POINT
         BALR  R14,R15                        OBTAIN DDID
         ITRACE ID=LMINITRC,                                           +
               RDATA1=R15,                                             +
               DATA2=SPF_DDID
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=LM_ERR,                                             +
               RDATA1=R15
         MVI   COMM_MSG_ID,1
         STH   R15,COMM_INFO_01
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15                        CREATE MESSAGE(S)
ERR0100  DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1           COPY MESSAGE(S)
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE VDATA
         MVC   COMM_SPF_PANEL,DIS0000         SET PANEL NAME
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR
         L     R15,V_DISDISP
         BALR  R14,R15                        DISPLAY PANEL
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START         DC   Q(DXDALIST)

H4                DC   H'4'

ASM_ID            DC   CL8'ASM'
BROWSE            DC   CL8'BROWSE'
DDID              DC   CL8'DDID'
DISEDIT           DC   CL8'DISEDIT'
DIS0000           DC   CL8'DIS0000'
EDIT              DC   CL8'EDIT'
LMINIT            DC   CL8'LMINIT'
SYSIN             DC   CL8'SYSIN'
SYSLIB            DC   CL8'SYSLIB'
SYSPRINT          DC   CL8'SYSPRINT'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDALIST          DSECT
                  DS   18F
DXD_CSECT         DS   CL8

DXD_SYSIN_DDID    DS   CL8
DXD_SYSPRINT_DDID DS   CL8

DXD_FLAG          DS   X
$HAVE_SOURCE      EQU  X'80'
$SYSIN_DDID       EQU  X'40'
$SYSPRINT_DDID    EQU  X'20'

DXD_DD            DS   CL8
DXD_IO            DS   CL80
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  DISCOMM  TYPE=DSECT
                  DISSPFD  TYPE=DSECT
                  COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  IHADCBE
                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY REGEQU
                 END  DISALIST
./ ADD NAME=DISASMU1 0108-09034-09119-0837-00577-00530-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISASMU1                                              *
*                                                                     *
*  Function:                                                          *
*                                                                     *
*   The disassembler can use actual assembler source for label        *
*   mapping.  The source can be supplied to the disassembler          *
*   during a disassembly run or pre-processed by this utility.        *
*                                                                     *
*   The assembler output is scanned to obtain DSECT names, label      *
*   names, and the displacements to the labels.  In order for the     *
*   utility to find names and displacements, the PRINT options        *
*   should be ON,GEN.                                                 *
*                                                                     *
*   SYSUT1   SYSPRINT file from the assembler                         *
*   SYSPRINT Messages generated by this utility                       *
*   SYSUT2   Output.  This information can be supplied to the         *
*            disassembler via DSECTxx DD statements.         .        *
*                                                                     *
*                                                                     *
*   The high-level assembler now allows symbolic names (labels)       *
*   up to 63 characters in length.  A PDS or PDS/E only allows        *
*   member names up to  8 characters in length, so I chose to         *
*   use VSAM KSDS(s) to record pre-processed DSECT info.              *
*                                                                     *
*                                                                     *
*   SYSUT2 is a VSAM KSDS with:                                       *
*       KEYS        (67, 0)                                           *
*       RECORDSIZE  (81 81)                                           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISASMU1 CSECT
DISASMU1 AMODE 24
DISASMU1 RMODE 24
         USING DISASMU1,R12
         USING DSECT_DSECT,R10
         USING LABEL_DSECT,R9
         USING EQU_DSECT,R8
         USING IFGRPL,WK_RPL
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R12,R15                        SET BASE REG
         B     UTIL0000                       SKIP EYECATCHER
         DC    CL8'DISASMU1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
UTIL0000 DS    0H
         LA    R15,WK_SAVEAREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         OPEN  (SYSPRINT,OUTPUT)              OPEN SYSPRINT
         OPEN  (SYSUT1,INPUT)                 OPEN SYSUT1
         USING IHADCB,SYSUT1
         OPEN  (SYSUT2,UPDAT)                 OPEN SYSTU2
         LTR   R15,R15
         BNZ   ERR0040
         CLC   DCBLRECL,H125                  LRECL CORRECT?
         BNE   ERR0200                        NO
         MODCB RPL=WK_RPL,                                             +
               ACB=SYSUT2,                                             +
               AREA=PPD,                                               +
               AREALEN=PPD_L,                                          +
               ARG=PPD_KEY,                                            +
               KEYLEN=67,                                              +
               OPTCD=(KEY,DIR,SYN,MVE,UPD)
         PUT   SYSPRINT,MSG00
         SR    R10,R10                        NO DSECT FOUND SO FAR
         SR    R9,R9                          NO LABEL FOUND SO FAR
* ------------------------------------------------------------------- *
*                                                                     *
*        Read a record from the assembler listing                     *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0010 DS    0H
         GET   SYSUT1,ASM_DATA                READ A SYSUT1 RECORD
         CLI   ASM_LABEL,C'*'                 COMMENT STATEMENT?
         BE    UTIL0010                       YES
         CLC   ASM_DATA+43,SRCSTMT            ASSEMBLER HEADING LINE?
         BE    UTIL0010                       YES, IGNORE IT
         CLC   XREF,ASM_DATA+45               CROSS REFERENCE?
         BNE   UTIL0020                       NO
         OI    WK_FLAGS,$XREF                 SET CROSS REFERENCE FLAG
UTIL0020 DS    0H
         TM    WK_FLAGS,$XREF                 CROSS REFERENCE FOUND?
         BO    UTIL0010                       YES
* ------------------------------------------------------------------- *
*        Determine if there is a LABEL                                *
* ------------------------------------------------------------------- *
         CLI   ASM_LABEL,C' '                 LABEL PRESENT?
         BE    UTIL0010                       NO
         LA    R6,ASM_LABEL                   FIRST BYTE OF LABEL
         LA    R2,WK_LABEL                    FIRST BYTE OF WORK LABEL
         MVC   WK_LABEL,BLANKS                CLEAR LABEL NAME
         LA    R1,L'WK_LABEL                  MAX LOOPS
UTIL0030 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BE    UTIL0040                       YES
* ------------------------------------------------------------------- *
*        Save label                                                   *
* ------------------------------------------------------------------- *
         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL
* ------------------------------------------------------------------- *
*        Find next non-blank                                          *
* ------------------------------------------------------------------- *
         LA    R2,1(R2)                       NEXT
         LA    R6,1(R6)                       NEXT
         BCT   R1,UTIL0030                    LOOP
         CLI   0(R6),C' '                     BLANK?
         BE    UTIL0040                       NO... TOO LONG
         B     UTIL0010                       READ NEXT SYSUT1 RECORD
UTIL0040 DS    0H
         LA    R1,L'WK_LABEL                  MAX LOOPS
UTIL0050 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   UTIL0060                       NO
         LA    R6,1(R6)                       NEXT
         BCT   R1,UTIL0050                    LOOP
         B     UTIL0130                       ASSUME IT IS A LABEL
* ------------------------------------------------------------------- *
*        Determine if this is a CSECT, DSECT, or EQU                  *
* ------------------------------------------------------------------- *
UTIL0060 DS    0H
         CLC   OP_DSECT(6),0(R6)              DSECT?
         BE    UTIL0090                       YES
         CLC   OP_CSECT,0(R6)                 CSECT?  (SAME AS DSECTS)
         BE    UTIL0090                       YES
         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?
         BNE   UTIL0130                       NO
* ------------------------------------------------------------------- *
*                                                                     *
*        Process EQUATEs                                              *
*                                                                     *
*   Some EQUATEs are just used for defining a label like              *
*   "NAME    EQU  *".                                                 *
*                                                                     *
*   Some bit flags or one-byte fields have EQUATEs to define their    *
*   meanings.  If an EQUATE following a statement with a label has    *
*   a displacment between x'00' and x'ff', assume it is defining      *
*   bits or values for the preceding field.                           *
*                                                                     *
*                                                                     *
*                                                                     *
*   First check for the "NAME   EQU  *".  If not, assume it is a      *
*   bit or one-byte value.                                            *
*                                                                     *
*   R6 has the address of the OPCODE ("EQU").                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         LTR   R9,R9                          LABEL FOUND YET?
         BZ    UTIL0010                       NO
         LA    R6,L'OP_EQU(,R6)               SKIP OPCODE
         LA    R1,20                          LOOP LIMITER
UTIL0070 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   UTIL0080                       NO
         LA    R6,1(,R6)                      NEXT
         BCT   R1,UTIL0070                    LOOP
         B     UTIL0130                       NO BLANK.. ASSUME LABEL
UTIL0080 DS    0H
         CLC   =C'* ',0(R6)                   ASTERISK AND A BLANK?
         BE    UTIL0140                       YES.. TREAT LIKE A LABEL
         CLC   =C'000',ASM_ADDR               FIRST 3 DIGITS ZEROS?
         BNE   UTIL0010                       NO
         GETMAIN RU,                          GETMAIN EQU BLOCK        +
               LV=EQU_DSECT_L,                                         +
               LOC=BELOW
         LR    R8,R1                          COPY EQU BLOCK ADDRESS
         XC    EQU_DSECT(EQU_DSECT_L),EQU_DSECT                         OCK
         MVC   EQU_EYE,EQUID                  IDENTIFY THIS BLOCK
         MVC   EQU_NEXT,LABEL_EQU_NEXT        SET CHAIN ADDRESS
         ST    R8,LABEL_EQU_NEXT              NEW BLOCK'S ADDR
         MVC   EQU_LABEL,WK_LABEL             SET LABEL
         NC    ASM_ADDR+3(2),X1F1F            PREPARE FOR PACKING
         TR    ASM_ADDR+3(2),CHXH             TRANSLATE FOR PACKING
         PACK  WK_DISP_OUT(2),ASM_ADDR+3(3)
         MVC   EQU_VALUE,WK_DISP_OUT          COPY EQUATE VALUE
         B     UTIL0010
* ------------------------------------------------------------------- *
*        Process DSECT or CSECT statements                            *
* ------------------------------------------------------------------- *
UTIL0090 DS    0H
         LA    R2,WK_DSECT_CHAIN_PREV         DSECT ANCHOR
         ICM   R10,15,WK_DSECT_CHAIN_NEXT     FIRST DSECT BLOCK
         BZ    UTIL0110                       NO DSECTS YET
UTIL0100 DS    0H
         CLC   DSECT_NAME,WK_LABEL            ALREADY ON DSECT CHAIN?
         BE    UTIL0010                       YES.. EXIT WITH BASE SET
         LR    R2,R10                         COPY ADDRESS
         ICM   R10,15,DSECT_NEXT              NEXT DSECT BLOCK
         BNZ   UTIL0100                       LOOP
UTIL0110 DS    0H
         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +
               LV=DSECT_DSECT_L,                                       +
               LOC=BELOW
         XC    0(DSECT_DSECT_L,R1),0(R1)
         ST    R1,DSECT_NEXT-DSECT_DSECT(R2)  CHAIN NEW TO PREVIOUS
         LR    R10,R1                         SET BASE
         MVC   DSECT_EYE,OP_DSECT             SET BLOCK ID
         MVC   DSECT_NAME,WK_LABEL            SET DSECT'S NAME
         SR    R9,R9                          CLEAR LABEL BLOCK ADDR
         B     UTIL0010
* ------------------------------------------------------------------- *
*                                                                     *
*        Determine if this statement has a valid DISP.                *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0130 DS    0H
         LTR   R10,R10                        DSECT DETERMINED YET?
         BZ    UTIL0010                       NO
         CLI   ASM_DISP,C'A'                  VALID DISPLACEMENT?
         BL    UTIL0010                       NO
         CLI   ASM_DISP,C'F'                  VALID DISPLACEMENT?
         BNH   UTIL0150                       YES
         CLI   ASM_DISP,C'0'                  VALID DISPLACEMENT?
         BL    UTIL0010                       NO
         CLI   ASM_DISP,C'9'                  VALID DISPLACEMENT?
         BH    UTIL0010                       NO
         B     UTIL0150
UTIL0140 DS    0H
         MVI   WK_DISP_IN,C'0'                FORCE DIGIT 1 TO ZERO
         MVC   WK_DISP_IN+1(5),ASM_ADDR       USE ADDR FOR DISP
         B     UTIL0160
UTIL0150 DS    0H
         MVC   WK_DISP_IN,ASM_DISP            COPY DISPLACEMENT
UTIL0160 DS    0H
         NC    WK_DISP_IN,X1F1F               PREPARE FOR TRANSLATE
         TR    WK_DISP_IN,CHXH                TRANSLATE FOR PACKING
         PACK  WK_DISP_OUT(4),WK_DISP_IN(7)   PACK DISPLACEMENT
         LA    R2,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR
         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL
         BZ    UTIL0180                       NO LABELS
UTIL0170 DS    0H
         CLC   WK_DISP_OUT(3),LABEL_DISP+1    INSERT HERE?
         BH    UTIL0180                       YES
         LR    R2,R9                          COPY ADDRESS
         ICM   R9,15,LABEL_NEXT               NEXT LABEL
         BNZ   UTIL0170                       LOOP
UTIL0180 DS    0H
         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +
               LV=LABEL_DSECT_L,                                       +
               LOC=BELOW
         XC    0(LABEL_DSECT_L,R1),0(R1)
         ST    R1,LABEL_NEXT-LABEL_DSECT(R2)  CHAIN PREVIOUS TO NEW
         ST    R9,LABEL_NEXT-LABEL_DSECT(R1)  CHAIN NEXT BLOCK TO NEW
         LR    R9,R1                          SET BASE
         MVC   LABEL_EYE,LABEL                SET BLOCK IDENTIFIER
         MVC   LABEL_NAME,WK_LABEL            SET LABEL NAME
         MVI   LABEL_DISP,X'00'               FORCE FIRST BYTE TO ZERO
         MVC   LABEL_DISP+1(3),WK_DISP_OUT    SET DISPLACEMENT
         MVI   LABEL_TYPE,$LABEL_DATA         DATA TYPE LABEL
         B     UTIL0010
* ------------------------------------------------------------------- *
*                                                                     *
*    EOF on the assembler output has been reached.                    *
*                                                                     *
*    Print the info we have gathered and write it to the              *
*    pre-processed DSECT info file (SYSUT2).                          *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0200 DS    0H
         ICM   R10,15,WK_DSECT_CHAIN_NEXT     ANY DSECTS?
         BZ    UTIL0270                       NO
         B     UTIL0220
UTIL0210 DS    0H
         BAL   R11,PRT0000                    PRINT A BLANK LINE
UTIL0220 DS    0H
         MVC   MSG01_NAME,DSECT_NAME          COPY DSECT NAME
         MVC   PR_DATA(MSG01L),MSG01
         BAL   R11,PRT0000
         MVC   PPD_NAME,DSECT_NAME            COPY NAME
         BAL   R11,ERASE000                   ERASE OLD DATA
         XC    PPD_SEQ,PPD_SEQ                SET SEQ TO ZERO
         MVC   PPD_DATA(DSECT_DSECT_L),DSECT_DSECT
         LA    R2,DSECT_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL BLOCK
         BZ    UTIL0260                       NO LABELS
UTIL0230 DS    0H
         MVC   MSG02_NAME,LABEL_NAME          COPY LABEL NAME
         UNPK  MSG02_DISP(9),LABEL_DISP(5)
         TR    MSG02_DISP,HEXCHAR
         MVI   MSG02_DISP+8,C' '
         MVC   MSG02_TYPE,LABEL_TYPE          COPY LABEL TYPE
         MVC   PR_DATA(MSG02L),MSG02
         BAL   R11,PRT0000                    PRINT
         MVC   PPD_DATA(LABEL_DSECT_L),LABEL_DSECT
         LA    R2,LABEL_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R8,15,LABEL_EQU_NEXT           FIRST EQU BLOCK
         BZ    UTIL0250
UTIL0240 DS    0H
         MVC   MSG03_NAME,EQU_LABEL           COPY LABEL
         MVC   WK_UNPACK(1),EQU_VALUE
         UNPK  MSG03_VALUE(3),WK_UNPACK(2)
         TR    MSG03_VALUE,HEXCHAR
         MVI   MSG03_VALUE+2,C' '
         MVC   PR_DATA(MSG03L),MSG03
         BAL   R11,PRT0000
         MVC   PPD_DATA(EQU_DSECT_L),EQU_DSECT
         LA    R2,EQU_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R8,15,EQU_NEXT
         BNZ   UTIL0240
UTIL0250 DS    0H
         ICM   R9,15,LABEL_NEXT
         BNZ   UTIL0230
UTIL0260 DS    0H
         ICM   R10,15,DSECT_NEXT
         BNZ   UTIL0210
         B     EXIT0000                       AND EXIT
UTIL0270 DS    0H
         MVC   PR_DATA(MSG04L),MSG04
         BAL   R11,PRT0000
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERASE000 DS    0H
         XC    PPD_SEQ,PPD_SEQ                ZERO SEQ#
ERASE010 DS    0H
         MODCB RPL=WK_RPL,                                             +
               OPTCD=(KEY,DIR,SYN,MVE,UPD)
         GET   RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERASE020
         ERASE RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERR0010
         ICM   R1,15,PPD_SEQ                  SEQUENCE NUMBER
         LA    R1,1(,R1)                      PLUS 1
         STCM  R1,15,PPD_SEQ                  UPDATE SEQUENCE NBR
         B     ERASE010
ERASE020 DS    0H
         ENDREQ RPL=WK_RPL
         CLOSE SYSUT2,                                                 +
               MODE=31,                                                +
               TYPE=T
         LTR   R15,R15                        SUCCESSFUL?
         BZR   R11
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
WRITE000 DS    0H
         MODCB RPL=WK_RPL,                                             +
               RECLEN=(R2),                                            +
               OPTCD=(KEY,DIR,SYN,MVE,NUP)
         LTR   R15,R15
         BNZ   ERR0020
         PUT   RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERR0030
         ICM   R1,15,PPD_SEQ
         LA    R1,1(,R1)
         STCM  R1,15,PPD_SEQ
         BR    R11
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         CP    WK_LINE,P_65                   TIME FOR HEADING?
         BL    PRT0010                        NO
         PUT   SYSPRINT,MSG00
         ZAP   WK_LINE,P_1
PRT0010  DS    0H
         PUT   SYSPRINT,PR_CC
         MVC   PR_DATA,PR_CC
         AP    WK_LINE,P_1
         BR    R11
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_GET
         B     ERR0100
ERR0020  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_MODCB
         B     ERR0100
ERR0030  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_PUT
         B     ERR0100
ERR0040  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_OPEN
ERR0100  DS    0H
         CVD   R15,WK_DWORD                   CONVERT RC TO DECIMAL
         ED    ERROR01_RC,WK_DWORD+6          EDIT RC
         UNPK  ERROR01_FDBK(7),RPLFDBK(4)     UNPACK FEED BACK
         TR    ERROR01_FDBK,HEXCHAR
         MVI   ERROR01_FDBK+6,C' '
         BAL   R11,PRT0000                    PRINT
         DC    H'0'
ERR0200  DS    0H
         MVC   PR_DATA(ERROR02_L),ERROR02
         LH    R1,DCBLRECL
         CVD   R1,WK_DWORD
         ED    PR_DATA+(ERROR02_LRECL-ERROR02),WK_DWORD+6
         BAL   R11,PRT0000
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE SYSUT1
         CLOSE SYSPRINT
         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
WK_DWORD           DS    D
WK_SAVEAREA        DC    18F'0'               REGISTER SAVE AREA
WK_RPL             RPL   AM=VSAM

WK_DSECT_CHAIN_PREV DC   A(0)
WK_DSECT_CHAIN_NEXT DC   A(0)

H125               DC    H'125'

WK_FLAGS           DC    X'00'
$XREF              EQU   X'80'                .. CROSS REFERENCE FOUND
$OPEN              EQU   X'80'                .. SYSUT2 DCB IS OPEN

WK_LABEL           DC    CL63' '

WK_UNPACK          DC    XL8'00'

XREF               DC    C' CROSS REFERENCE '

HEXCHAR            EQU   *-C'0'
                   DC    C'0123456789ABCDEF'

P_1                DC    P'1'
P_65               DC    P'65'
WK_LINE            DC    PL3'0'

X1F1F              DC    8X'1F'

CHXH               DC    X'000A0B0C0D0E0F000000000000000000'  00-0F
                   DC    X'00010203040506070809000000000000'  10-1F

ASMHEAD            DC    CL35'ASSEMBLER OUTPUT'
BLANKS             DC    CL64' '
OP_DSECT           DC    CL8'DSECT'
OP_CSECT           DC    CL8'CSECT'
OP_EQU             DC    C'EQU '
SRCSTMT            DC    C'SOURCE STATEMENT'
WK_DISP_IN         DC    CL7' '
WK_DISP_OUT        DC    XL4'000000'
LABEL              DC    CL8'LABEL'
EQUID              DC    CL8'EQU'

PR_CC              DC    C' '
PR_DATA            DC    CL132' '

FUNCTION_OPEN      DC    CL10'OPEN'
FUNCTION_MODCB     DC    CL10'MODCB'
FUNCTION_GET       DC    CL10'GET'
FUNCTION_PUT       DC    CL10'PUT'

MSG00              DC    CL132'1    DISASMUT1   Preprocessed DSECTs'
MSG00L             EQU   *-MSG00

MSG01              DS    0C
                   DC    C'DSECT '
MSG01_NAME         DC    CL63' '
MSG01L             EQU   *-MSG01

MSG02              DS    0C
                   DC    C'  DISP '
MSG02_DISP         DC    CL8' '
                   DC    C' '
MSG02_TYPE         DC    C' '
                   DC    C'  LABEL '
MSG02_NAME         DC    CL63' '
MSG02L             EQU   *-MSG02

MSG03              DS    0C
                   DC    C'    EQUATE '
                   DC    C'  VALUE '
MSG03_VALUE        DC    CL2' '
                   DC    CL2' '
MSG03_NAME         DC    CL63' '
MSG03L             EQU   *-MSG03

MSG04              DS    0C
                   DC    C'**  No DSECTS found'
MSG04L             EQU   *-MSG04

ERROR01            DS    0C
                   DC    C'Error during '
ERROR01_FUNCTION   DC    CL10' '
                   DC    C', R15='
ERROR01_RC         DC    X'40202120'
                   DC    C'  VSAM FDBK='
ERROR01_FDBK       DC    CL6' '
                   DC    C' '
ERROR01_L          EQU   *-ERROR01

ERROR02            DS    0C
                   DC    C'Assembler listing LRECL is '
ERROR02_LRECL      DC    X'40202120'
                   DC    C', not 121.. aborting'
ERROR02_L          EQU   *-ERROR02
*---------------------------------------------------------------------*
*                                                                     *
*              ASSEMBLER OUTPUT DCB                                   *
*                                                                     *
*---------------------------------------------------------------------*
SYSUT1    DCB  DDNAME=SYSUT1,                                          +
               DSORG=PS,                                               +
               EODAD=UTIL0200,                                         +
               MACRF=GM
SYSUT2    ACB  AM=VSAM,                                                +
               DDNAME=SYSUT2,                                          +
               MACRF=(KEY,DIR,SEQ,OUT)
SYSPRINT  DCB  DDNAME=SYSPRINT,                                        +
               DSORG=PS,                                               +
               RECFM=FBA,                                              +
               LRECL=133,                                              +
               MACRF=PM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               LTORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ASM_DATA       DC      CL125' '
ASM_DATAL      EQU     *-ASM_DATA
               ORG     ASM_DATA+005
ASM_DISP       DS      CL6
               ORG     ASM_DATA+027
ASM_ADDR       DS      CL5
               ORG     ASM_DATA+039
ASM_STMT_NBR   DS      CL5
ASM_STMT_TYPE  DS      C
ASM_LABEL      DS      C
               ORG     ASM_DATA+125

               COPY    PPDDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY    DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IFGRPL AM=VSAM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DCBD   DSORG=PS
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY   REGEQU
         END    DISASMU1
./ ADD NAME=DISASMU2 0111-09119-09119-1504-00207-00216-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISASMU2                                              *
*                                                                     *
*  Function:                                                          *
*                                                                     *
*   List contents of a "pre-processed" DSECT KSDS.                    *
*                                                                     *
*   SYSUT1 is a VSAM KSDS with:                                       *
*       KEYS        (67, 0)                                           *
*       RECORDSIZE  (81 81)                                           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISASMU2 CSECT
DISASMU2 AMODE 24
DISASMU2 RMODE 24
         USING DISASMU2,R12
         USING IFGRPL,WK_RPL1
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R12,R15                        SET BASE REG
         B     INIT0000                       SKIP EYECATCHER
         DC    CL8'DISASMU2'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         LA    R15,WK_SAVEAREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         OPEN  (SYSPRINT,OUTPUT)              OPEN SYSPRINT
         OPEN  (SYSUT1,INPUT)                 OPEN SYSUT1
         LTR   R15,R15                        OPEN SUCCESSFUL?
         BNZ   ERR0010                        NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         GET   RPL=WK_RPL1                    READ A RECORD
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   EOF0000                        NO
         OC    PPD_SEQ,PPD_SEQ                BEYOND LAST DSECT?
         BNZ   EOF0000                        YES
         SR    R2,R2                          INIT SEQ NBR
         B     MAIN0020
MAIN0010 DS    0H
         GET   RPL=WK_RPL2                    READ
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   MAIN0000                       NO
MAIN0020 DS    0H
         MVC   PR_DATA,PR_CC                  INITIALIZE
         CLC   TYPE_DSECT,PPD_DATA+8          DSECT?
         BE    MAIN0030                       YES
         CLC   TYPE_LABEL,PPD_DATA+8          LABEL?
         BE    MAIN0040                       YES
         CLC   TYPE_EQU,PPD_DATA+8            EQU?
         BE    MAIN0050                       YES
         DC    H'0'
MAIN0030 DS    0H
         USING DSECT_DSECT,PPD_DATA
         MVC   PR_TYPE,TYPE_DSECT
         MVC   PR_NAME+00(63),DSECT_NAME      COPY DSECT NAME
         ZAP   WK_LINE,P_65                   CAUSE NEW HEADING
         B     MAIN0060
MAIN0040 DS    0H
         USING LABEL_DSECT,PPD_DATA
         MVC   PR_TYPE,TYPE_LABEL
         UNPK  WK_UNPACK(9),LABEL_DISP(5)     UNPACK DISP
         MVC   PR_DISP,WK_UNPACK
         TR    PR_DISP,HEXCHAR                TRANSLATE
         MVC   PR_NAME+05(63),LABEL_NAME      COPY LABEL NAME
         B     MAIN0060
MAIN0050 DS    0H
         USING EQU_DSECT,PPD_DATA
         MVC   PR_TYPE,TYPE_EQU
         UNPK  WK_UNPACK(3),EQU_VALUE(2)      UNPACK EQU VALUE
         MVC   PR_DISP+6(2),WK_UNPACK
         TR    PR_DISP+6(2),HEXCHAR           TRANSLATE
         MVC   PR_NAME+10(63),EQU_LABEL       COPY EQU NAME
MAIN0060 DS    0H
         BAL   R11,PRT0000                    PRINT
         LA    R2,1(,R2)                      NEXT SEQ NBR
         STCM  R2,15,PPD_SEQ                  UPDATE KEY
         B     MAIN0010
EOF0000  DS    0H
         CLOSE SYSPRINT                       CLOSE PRINT
         CLOSE SYSUT1                         CLOSE SYSUT1
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         CP    WK_LINE,P_65                   TIME FOR HEADING?
         BL    PRT0010                        NO
         PUT   SYSPRINT,MSG00                 PRINT HEADING
         ZAP   WK_LINE,P_1                    RESET LINE NBR
PRT0010  DS    0H
         PUT   SYSPRINT,PR_CC                 PRINT
         MVC   PR_DATA,PR_CC                  RE-INITIALIZE
         AP    WK_LINE,P_1                    ADD 1 TO LINE NBR
         BR    R11
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE SYSUT1
         CLOSE SYSPRINT
         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
WK_SAVEAREA    DC    18F'0'                   REGISTER SAVE AREA
WK_DWORD       DC    D'0'

WK_RPL1  RPL   AM=VSAM,                                                +
               ACB=SYSUT1,                                             +
               AREA=PPD,                                               +
               AREALEN=PPD_L,                                          +
               OPTCD=(SEQ,SYN,MVE)

WK_RPL2  RPL   AM=VSAM,                                                +
               ACB=SYSUT1,                                             +
               AREA=PPD,                                               +
               AREALEN=PPD_L,                                          +
               ARG=PPD_KEY,                                            +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(DIR,KEY,KEQ,SYN,MVE)


WK_FLAGS           DC    X'00'

WK_UNPACK          DC    XL9'00'

HEXCHAR            EQU   *-C'0'
                   DC    C'0123456789ABCDEF'

P_1                DC    P'1'
P_65               DC    P'65'
WK_LINE            DC    PL3'0'

TYPE_DSECT         DC    CL8'DSECT'
TYPE_LABEL         DC    CL8'LABEL'
TYPE_EQU           DC    CL8'EQU'

PR_CC              DC    C' '
PR_DATA            DC    CL132' '
                   ORG   PR_DATA
PR_TYPE            DC    CL8' '
                   DC    CL2' '
PR_DISP            DC    CL8' '
                   DC    CL5' '
PR_NAME            DC    CL100' '
                   ORG
MSG00              DC    CL132'1    DISASMUT2   Preprocessed DSECTs'
MSG00L             EQU   *-MSG00

MSG04              DS    0C
                   DC    C'**  No DSECTS found'
MSG04L             EQU   *-MSG04

*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SYSUT1    ACB  AM=VSAM,                                                +
               DDNAME=SYSUT1,                                          +
               MACRF=(KEY,DIR,SEQ,OUT)
SYSPRINT  DCB  DDNAME=SYSPRINT,                                        +
               DSORG=PS,                                               +
               RECFM=FB,                                               +
               LRECL=100,                                              +
               MACRF=PM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               LTORG

               COPY    PPDDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY    DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IFGRPL AM=VSAM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY   REGEQU
         END    DISASMU2
./ ADD NAME=DISASSEM 0102-09119-09198-0834-00488-00488-00000-SOURCE
         GBLC &TROPT
&TROPT   SETC 'OFF'
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISASSEM                                             *
*                                                                    *
*  Function:                                                         *
*   Dynamically invoke the assembler to assemble DSECTs.             *
*                                                                    *
*   The idea here is to allow the disassembler to generate labels    *
*   rather than a "displacment from register".  Rather than having   *
*   to code control statements with labels and their displacements,  *
*   the disassembler will call the assembler, then read the          *
*   assembler listing to 'learn' DSECT and label names plus the      *
*   displacements of labels within DSECTs.                           *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*   Any method of defining DSECTs that are valid to the assembler    *
*   may be used.  They may be defined inline, by macros, or COPY     *
*   statements.  The disassembler links to the assembler to assemble *
*   the source, then scans the assembler output to learn the DSECT   *
*   names, label names, and displacements to the labels.  In order   *
*   for DISASM to find the names and displacements, the PRINT option *
*   of the assembler must be on.                                     *
*                                                                    *
*   Labels and DSECT names are limited to 63 characters in length.   *
*                                                                    *
*   Input to the assembler is delimited by ASM,START and ASM,END     *
*   statements.  Any statements between the ASM,START and ASM,END    *
*   are copied to SYSIN.  Assembler input statements are listed on   *
*   the DISPRINT output, but are otherwise ignored.  Any macros not  *
*   defined inline and any COPY elements must be available to the    *
*   assembler in a library in the SYSLIB concatenation.              *
*                                                                    *
*   If the return code from the assembler is greater than 4, the     *
*   disassembly is aborted.  The assembler output is copied to the   *
*   DISDEBUG data set if allocated.                                  *
*                                                                    *
*   The DSECTs are chained from field COMM_DSECT_NEXT in DISCOMM.    *
*   The labels within the DSECT are chained from field DSECT_LABEL.  *
*   DSECT_DSECT maps the DSECT blocks, LABEL_DSECT maps the label    *
*   control blocks.                                                  *
*                                                                    *
*--------------------------------------------------------------------*
DISASSEM CSECT
DISASSEM AMODE 31
DISASSEM RMODE ANY
         USING DISCOMM,R12
         USING DISASSEM,R11
         USING DSECT_DSECT,R3                 DEFINE BASE
         USING LABEL_DSECT,R4                 DEFINE BASE
         USING EQU_DSECT,R5                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     ASSM0000                       SKIP EYECATCHER
MODID    DC    CL8'DISASSEM'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
ASSM0000 DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA ADDR
         A     R15,DXD_START                  PLUS DISP TO OUR PART
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDASSEM,R13
         USING DCBE,SYSPRINT_DCBE
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         LA    R1,ASSM0200
         ST    R1,DCBEEODA
         LOAD  EP=ASMA90                      LOAD THE ASSEMBLER
         ST    R0,DXD_ASSEM_EP                SAVE ENTRY POINT
         LR    R15,R0                         COPY TO R15
         LA    R1,AASMPARM                    ASSEMBLER PARM LIST ADDR
         ITRACE ID=CALLASM,                   CALLING THE ASSEMBLER    +
               RDATA1=R15,                    .. ASSEMBLER'S EP        +
               RDATA2=R1                      .. ASSEMBLER'S PARMS
         BASR  R14,R15                        LINK TO ASSEMBLER
         STH   R15,COMM_ASSEMBLER_RC          SAVE ASSEMBLER RC
         ITRACE ID=ASSEMBLER_RC,              ASSEMBLER'S RETURN CODE  +
               RDATA1=R15                     .. RETURN CODE
         STC   R15,COMM_INFO_01               CONVERT TO DECIMAL
         MVI   COMM_MSG_ID,1
         BAL   R10,MSG0000
         ITRACE ID=OPEN
         OPEN  (SYSPRINT_DCB,INPUT),          OPEN SYSPRINT AS INPUT   +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         MVI   COMM_DEBUG_CMD,$DEBUG_HEAD     SET COMMAND
         BAL   R10,DEBUG000                   PRINT DEBUG HEADING
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
*--------------------------------------------------------------------*
*        Free existing DSECTs, LABELs, EQUs                          *
*--------------------------------------------------------------------*
         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT
         BZ    INIT0070                       NO DSECTS
INIT0010 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL
         BZ    INIT0050                       NO LABELS
INIT0020 DS    0H
         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQUATE
         BZ    INIT0040                       NO EQUATES
INIT0030 DS    0H
         LR    R1,R5                          COPY ADDRESS
         ICM   R5,15,EQU_NEXT                 NEXT EQU BLOCK
         FREEMAIN RU,                         FREE EQU BLOCK           +
               A=(1),                                                  +
               LV=EQU_DSECT_L
         LTR   R5,R5                          ANOTHER EQUATE
         BNZ   INIT0030                       LOOP
INIT0040 DS    0H
         LR    R1,R4                          COPY ADDRESS
         ICM   R4,15,LABEL_NEXT               NEXT LABEL BLOCK
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
         LTR   R4,R4                          ANOTHER LABEL?
         BNZ   INIT0020                       YES
INIT0050 DS    0H
         LR    R1,R3                          COPY ADDRESS
         ICM   R3,15,DSECT_NEXT               NEXT DSECT
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=DSECT_DSECT_L
         LTR   R3,R3                          ANOTHER DSECT?
         BNZ   INIT0010                       YES
INIT0060 DS    0H
         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
INIT0070 DS    0H
         SR    R3,R3                          NO DSECT IS ACTIVE
         SR    R4,R4                          NO LABEL IS ACTIVE
ASSM0010 DS    0H
         GET   SYSPRINT_DCB,COMM_ASSEMBLER_IO
         MVC   COMM_DEBUG_IO,COMM_ASSEMBLER_IO
         BAL   R10,DEBUG000                   PRINT DEBUG HEADING
         CLC   COMM_ASSEMBLER_RC,H4           ASSEMBLER ERROR?
         BH    ASSM0010                       YES
         ITRACE ID=TEMP1,                                              +
               DATA1=COMM_ASSEMBLER_LABEL,                             +
               DATA2=COMM_ASSEMBLER_DISP
         CLI   COMM_ASSEMBLER_LABEL,C'*'      COMMENT STATEMENT?
         BE    ASSM0010                       YES
         CLC   SRCSTMT,COMM_ASSEMBLER_IO+43   ASSEMBLER HEADING LINE?
         BE    ASSM0010                       YES, IGNORE IT
         CLC   XREF,COMM_ASSEMBLER_IO+45      START OF CROSS REFERENCE?
         BNE   ASSM0020                       NO
         OI    DXD_XREF_FLAG,$XREF            SET CROSS REFERENCE FLAG
         ITRACE ID=XREF                       CROSS REFERENCE STARTED
ASSM0020 DS    0H
         TM    DXD_XREF_FLAG,$XREF            CROSS REFERENCE FOUND?
         BO    ASSM0010                       YES
         CLI   COMM_ASSEMBLER_LABEL,C' '      LABEL PRESENT?
         BE    ASSM0010                       NO
         ITRACE ID=NEWLABEL,                                           +
               DATA1=COMM_ASSEMBLER_LABEL
         LA    R6,COMM_ASSEMBLER_LABEL        FIRST BYTE OF LABEL
         LA    R2,DXD_LABEL                   FIRST BYTE OF WORK LABEL
         MVC   DXD_LABEL,COMM_BLANKS          CLEAR LABEL NAME
         LA    R1,L'DXD_LABEL                 MAX LOOPS
ASSM0030 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BE    ASSM0040                       YES
         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL
         LA    R2,1(R2)                       NEXT
         LA    R6,1(R6)                       NEXT
         BCT   R1,ASSM0030                    LOOP
         CLI   0(R6),C' '                     BLANK?
         BE    ASSM0040                       NO.. TOO LONG FOR A LABEL
         ITRACE ID=LONGLABL
         B     ASSM0010                       READ NEXT SYSPRINT RECORD
ASSM0040 DS    0H
         LA    R1,L'DXD_LABEL                 MAX LOOPS
ASSM0050 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   ASSM0060                       NO
         LA    R6,1(R6)                       NEXT
         BCT   R1,ASSM0050                    LOOP
         B     ASSM0140                       ASSUME IT IS A LABEL
ASSM0060 DS    0H
         ITRACE ID=LABLTYPE,                                           +
               DATA1=0(R6)
         CLC   OP_DSECT(6),0(R6)              DSECT?
         BE    ASSM0090                       YES
         CLC   OP_CSECT,0(R6)                 CSECT?
         BE    ASSM0090                       YES
         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?
         BNE   ASSM0140                       NO
         CLC   =C'000',COMM_ASSEMBLER_ADDR1   FIRST 3 DIGITS ZEROS?
         BNE   ASSM0010                       NO
*--------------------------------------------------------------------*
*                                                                    *
*     Build a new EQU block.                                         *
*                                                                    *
*     EQU block's are chained from LABEL blocks.                     *
*     R4 is used to 'remember' the last LABEL block processed.       *
*     Whenever a new CSECT or DSECT is encountered, R4 is 'cleared'. *
*                                                                    *
*--------------------------------------------------------------------*
         LTR   R4,R4                          LABEL BASE SET?
         BZ    ASSM0010                       NO
         GETMAIN RU,                          GETMAIN EQU BLOCK        +
               LV=EQU_DSECT_L,                                         +
               LOC=ANY
NEW      USING EQU_DSECT,R1
         XC    NEW.EQU_DSECT(EQU_DSECT_L),NEW.EQU_DSECT                 OCK
         LA    R5,LABEL_EQU_PREV              EQU ANCHOR
ASSM0070 DS    0H
         LR    R2,R5                          COPY CURRENT TO PREV
PREV     USING EQU_DSECT,R2
         ICM   R5,15,EQU_NEXT                 NEXT BLOCK ON CHAIN
         BNZ   ASSM0070                       LOOP IF PRESENT
         ST    R1,PREV.EQU_NEXT               SET NEXT ON CHAIN
ASSM0080 DS    0H
         ST    R2,NEW.EQU_PREV                SET 'NEXT'
         MVC   NEW.EQU_EYE,EQU_ID             IDENTIFY THIS BLOCK
         MVC   NEW.EQU_LABEL,DXD_LABEL        SET LABEL
         NC    COMM_ASSEMBLER_ADDR1+3(2),HEX1F1F PREPARE FOR PACKING
         TR    COMM_ASSEMBLER_ADDR1+3(2),CHARHEX TRANSLATE FOR PACKING
         PACK  DXD_DISP_OUT(2),COMM_ASSEMBLER_ADDR1+3(3)
         MVC   NEW.EQU_VALUE,DXD_DISP_OUT     COPY EQUATE VALUE
         ITRACE ID=NEW_EQU,                   NEW EQUATE               +
               RDATA1=R1,                                              +
               DATA2=NEW.EQU_PREV
         B     ASSM0010
         DROP  NEW,PREV
*--------------------------------------------------------------------*
*                                                                    *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
ASSM0090 DS    0H
         ITRACE ID=SCANDSCT
         LA    R3,COMM_DSECT_PREV             FIRST DSECT BLOCK
         B     ASSM0110
ASSM0100 DS    0H
         CLC   DSECT_NAME,DXD_LABEL           ALREADY ON DSECT CHAIN?
         BE    ASSM0130                       YES.. EXIT WITH BASE SET
ASSM0110 DS    0H
         ICM   R2,15,DSECT_NEXT               ANOTHER ON CHAIN?
         BZ    ASSM0120                       NO
         LR    R3,R2                          COPY ADDRESS
         B     ASSM0100                       CHECK FOR DUPLICATE NAME
ASSM0120 DS    0H
         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +
               LV=DSECT_DSECT_L,                                       +
               LOC=ANY
NEW      USING DSECT_DSECT,R1                 SET BASE
         XC    NEW.DSECT_DSECT(DSECT_DSECT_L),NEW.DSECT_DSECT
         ST    R1,DSECT_NEXT
         ST    R2,NEW.DSECT_PREV
         ITRACE ID=NEWDSECT,                  NEW DSECT BLOCK          +
               RDATA1=R1,                     .. BLOCK'S ADDRESS       +
               DATA2=DXD_LABEL                .. DSECT'S NAME
         MVC   NEW.DSECT_EYE,OP_DSECT         SET BLOCK ID
         MVC   NEW.DSECT_NAME,DXD_LABEL       SET DSECT'S NAME
         LR    R3,R1                          "REMEMBER" LAST DSECT
         B     ASSM0010
         DROP  NEW
ASSM0130 DS    0H
         ITRACE ID=DUPDSECT
         B     ASSM0010
*--------------------------------------------------------------------*
*                                                                    *
*        Process statements with LABELs                              *
*                                                                    *
*  Subsequent EQU's will be 'tied' back to the previous LABEL block. *
*  R4 is used to 'remember' the address of the last label block..    *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
ASSM0140 DS    0H
         LTR   R3,R3                          DSECT DETERMINED YET?
         BZ    ASSM0010                       NO
         CLI   COMM_ASSEMBLER_DISP,C'A'       VALID DISPLACEMENT?
         BL    ASSM0010                       NO
         CLI   COMM_ASSEMBLER_DISP,C'F'       VALID DISPLACEMENT?
         BNH   ASSM0150                       YES
         CLI   COMM_ASSEMBLER_DISP,C'0'       VALID DISPLACEMENT?
         BL    ASSM0010                       NO
         CLI   COMM_ASSEMBLER_DISP,C'9'       VALID DISPLACEMENT?
         BH    ASSM0010                       NO
ASSM0150 DS    0H
         MVC   DXD_DISP_IN,COMM_ASSEMBLER_DISP COPY DISPLACEMENT
         NC    DXD_DISP_IN,HEX1F1F            PREPARE FOR TRANSLATE
         TR    DXD_DISP_IN,CHARHEX            TRANSLATE FOR PACKING
         PACK  DXD_DISP_OUT(4),DXD_DISP_IN(7) PACK DISPLACEMENT
         LA    R4,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR
         B     ASSM0170
ASSM0160 DS    0H
         CLC   DXD_DISP_OUT(3),LABEL_DISP+1   INSERT HERE?
         BH    ASSM0180                       YES
ASSM0170 DS    0H
         LR    R2,R4                          COPY ADDRESS
PREV     USING LABEL_DSECT,R2
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   ASSM0160                       LOOP
ASSM0180 DS    0H
         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         ITRACE ID=NEWLABL,                   NEW LABEL BLOCK          +
               RDATA1=R1,                     .. BLOCK'S ADDRESS       +
               DATA2=DXD_LABEL                .. LABEL'S NAME
NEW      USING LABEL_DSECT,R1
         ST    R1,PREV.LABEL_NEXT
         LTR   R4,R4
         BZ    ASSM0190
         ST    R1,LABEL_PREV
ASSM0190 DS    0H
         XC    NEW.LABEL_DSECT(LABEL_DSECT_L),NEW.LABEL_DSECT
         ST    R2,NEW.LABEL_PREV
         ST    R4,NEW.LABEL_NEXT
         MVC   NEW.LABEL_EYE,LABEL_ID           SET BLOCK IDENTIFIER
         MVC   NEW.LABEL_NAME,DXD_LABEL         SET LABEL NAME
         MVI   NEW.LABEL_DISP,X'00'             FORCE FIRST BYTE
         MVC   NEW.LABEL_DISP+1(3),DXD_DISP_OUT DISPLACEMENT TO LABEL
         MVI   NEW.LABEL_TYPE,$LABEL_DATA       DATA TYPE LABEL
         XC    NEw.LABEL_EQU_PREV,NEW.LABEL_EQU_PREV
         XC    NEW.LABEL_EQU_NEXT,NEW.LABEL_EQU_NEXT
         LR    R4,R1                            SAVE ADDRESS
         B     ASSM0010
         DROP  PREV,NEW
ASSM0200 DS    0H
         ITRACE ID=EOF
         CLOSE SYSPRINT_DCB,                                           +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000                   PRINT DEBUG HEADING
         CLC   COMM_ASSEMBLER_RC,H4           ERROR DURING ASSEMBLY?
         BNH   ASSM0210                       NO
         ITRACE ID=ASMERROR,                                           +
               DATA1=COMM_ASSEMBLER_RC
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         MVI   COMM_MSG_ID,2
         BAL   R10,MSG0000                    PRINT MESSAGE
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        MAKE SURE 1ST BLOCK'S DON'T HAVE 'PREV'                      *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
ASSM0210 DS    0H
         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT
         BZ    EXIT0000
         XC    DSECT_PREV,DSECT_PREV          MAKE SURE 1ST HAS NO PREV
ASSM0220 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL IN DSECT
         BZ    ASSM0250
         XC    LABEL_PREV,LABEL_PREV          MAKE SURE 1ST HAS NO PREV
ASSM0230 DS    0H
         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQU
         BZ    ASSM0240
         XC    EQU_PREV,EQU_PREV              MAKE SURE 1ST HAS NO PREV
ASSM0240 DS    0H
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   ASSM0230
ASSM0250 DS    0H
         ICM   R3,15,DSECT_NEXT               NEXT DSECT
         BNZ   ASSM0220
         B     EXIT0000                       AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DEBUG000 DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BER   R10                            YES
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BE    MSG0020                        YES
         MVI   PRINT_COMMAND,$PRINT_PRINT
         LA    R2,COMM_MSG_1                  FIRST MESSAGE
         LA    R3,5                           MAX MESSAGES
MSG0010  DS    0H
         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS
         BER   R10                            BLANK.. STOP HERE
         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2)
         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT
         BALR  R14,R15                        LINK TO PRINT MODULE
         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE
         BCT   R3,MSG0010
         BR    R10                            RETURN
MSG0020  DS    0H
         CLC   SPF_MSG_1,COMM_BLANKS          MESSAGE STILL BLANK?
         BNER  R10                            NO
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         BR    R10
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         OC    DXD_ASSEM_EP,DXD_ASSEM_EP      ASSEMBLER LOADED?
         BZ    EXIT0010                       NO
         ITRACE ID=DELASM                     DELETE ASSEMBLER
         DELETE EP=ASMA90
EXIT0010 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START  DC  Q(DXDASSEM)
AASMPARM DC    A(ASMPARM+X'80000000')         ASSEMBLER PARM'S
ASMPARM  DC    Y(ASMPARML-2)
         DC    C'NODECK,NOOBJECT'
ASMPARML EQU   *-ASMPARM
H4       DC    H'4'

XREF     DC    C' CROSS REFERENCE '
HEX1F1F  DC    8X'1F'
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
CHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'  00-0F
         DC    X'00010203040506070809000000000000'  10-1F

OP_DSECT DC    CL8'DSECT'
OP_CSECT DC    CL8'CSECT'
OP_EQU   DC    C'EQU '
SRCSTMT  DC    C'SOURCE STATEMENT'
LABEL_ID DC    CL8'LABEL'
EQU_ID   DC    CL8'EQU'

MSG01    DS    0C
         DC    C'DISASSEM01I  Assembler output:'
MSG01_L  EQU   *-MSG01

MSG02    DS    0C
         DC    C'DISASSEM02I  End of assembler output'
MSG02_L  EQU   *-MSG02

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDASSEM        DSECT
                DS   18F
DXD_CSECT       DS   CL8
DXD_ASSEM_EP    DS   A                ASSEMBLER'S ENTRY POINT
DXD_LABEL       DS   CL63
DXD_DISP_IN     DS   CL7
DXD_DISP_OUT    DS   XL4
DXD_XREF_FLAG   DS   X                CROSS REFERENCE FLAG
$XREF           EQU  X'80'            .. CROSS REFERENCE HAS BEEN FOUND
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DISCOMM  TYPE=DSECT
         DISSPFD  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY     DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHADCBE
         IFGACB   AM=VSAM
ACB_L    EQU      *-IFGACB
*---------------------------------------------------------------------*
*              EQUATES                                                *
*---------------------------------------------------------------------*
         COPY REGEQU
         END  DISASSEM
./ ADD NAME=DISBIND  0101-09119-09198-0834-00284-00284-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISBIND                                              *
*                                                                    *
*  Function:                                                         *
*   Obtain the requested module's RLD, ESD, text, etc using          *
*   a BINDER dialog.                                                 *
*                                                                    *
*  The function being requested is in COMM_BIND_FUNC.                *
*                                                                    *
*--------------------------------------------------------------------*
DISBIND  CSECT
DISBIND  AMODE 31
DISBIND  RMODE ANY
         USING DISBIND,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISBIND'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)                     CHAIN  SAVE AREA
         ST    R15,8(,R13)                     CHAIN SAVE AREA
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDBIND,R13
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_DEBUG_CMD
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R8,DEBUG000
         CLI   COMM_BIND_FUNC,$BIND_STARTD    START DIALOG?
         BE    BIND0010                       YES
         CLI   COMM_BIND_FUNC,$BIND_NAMES     BUILD NAME CHAIN?
         BE    BIND0020
         CLI   COMM_BIND_FUNC,$BIND_ESD_RLD   BUILD ESD/RLD CHAINS?
         BE    BIND0030
         CLI   COMM_BIND_FUNC,$BIND_TEXT      READ TEXT?
         BE    BIND0040
         CLI   COMM_BIND_FUNC,$BIND_ENDD      END DIALOG?
         BE    BIND0050
         DC    H'0'
*--------------------------------------------------------------------*
*        Start the dialog                                            *
*--------------------------------------------------------------------*
BIND0010 DS    0H
         ITRACE ID=STARTD
         IEWBIND FUNC=STARTD,                                          +
               VERSION=5,                                              +
               DIALOG=COMM_DIALOG_TOKEN,                               +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=STARTDRC,                                           +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_RETURN_CODE,DXD_RETURN_CODE
         BNZ   ERR0010
*--------------------------------------------------------------------*
*        Create a WORKMOD                                            *
*--------------------------------------------------------------------*
         ITRACE ID=CREATEW
         IEWBIND FUNC=CREATEW,                                         +
               VERSION=5,                                              +
               DIALOG=COMM_DIALOG_TOKEN,                               +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               INTENT=ACCESS,                                          +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=CREATWRC,                                           +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_RETURN_CODE,DXD_RETURN_CODE
         BNZ   ERR0020
*--------------------------------------------------------------------*
*        Set list options                                            *
*--------------------------------------------------------------------*
         ITRACE ID=SET_ALL
         IEWBIND FUNC=SETO,                                            +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               OPTION=LIST,                                            +
               OPTVAL=ALL,                                             +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=SET_RC,                                             +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_RETURN_CODE,DXD_RETURN_CODE
         BNZ   ERR0030
*--------------------------------------------------------------------*
*        INCLUDE the LMOD                                            *
*--------------------------------------------------------------------*
         ITRACE ID=INCLUDE,                                            +
               DATA1=COMM_DDNAME_LENGTH,                               +
               DATA2=COMM_LMOD_NAME_LENGTH
         IEWBIND FUNC=INCLUDE,                                         +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               INTYPE=NAME,                                            +
               DDNAME=COMM_DDNAME_LENGTH,                              +
               MEMBER=COMM_LMOD_NAME_LENGTH,                           +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=INCL_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_REASON_CODE,DXD_REASON_CODE
         BNZ   ERR0040
         B     EXIT0000
*--------------------------------------------------------------------*
*        Determine section names in module                           *
*--------------------------------------------------------------------*
BIND0020 DS    0H
         ITRACE ID=CALLNAME
         L     R15,V_DISNAME
         BALR  R14,R15
         B     EXIT0000
*--------------------------------------------------------------------*
*        Process ESD info                                            *
*--------------------------------------------------------------------*
BIND0030 DS    0H
         ITRACE ID=CALLESD
         L     R15,V_DISESD
         BALR  R14,R15
*--------------------------------------------------------------------*
*        Process RLD items                                           *
*--------------------------------------------------------------------*
         ITRACE ID=CALLRLD
         L     R15,V_DISRLD
         BALR  R14,R15
         B     EXIT0000
*--------------------------------------------------------------------*
*        Load the text                                               *
*--------------------------------------------------------------------*
BIND0040 DS    0H
         ITRACE ID=CALLTEXT
         L     R15,V_DISTEXT
         BALR  R14,R15
         B     EXIT0000
*---------------------------------------------------------------------*
*        Delete the WORKMOD                                           *
*---------------------------------------------------------------------*
BIND0050 DS    0H
         ITRACE ID=DELETEW,                                            +
               DATA1=COMM_DIALOG_WORKMOD
         IEWBIND FUNC=DELETEW,                                         +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               PROTECT=NO,                                             +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=DELETERC,                                           +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_REASON_CODE,DXD_REASON_CODE
         BNZ   ERR0050
*---------------------------------------------------------------------*
*        End the DIALOG                                               *
*---------------------------------------------------------------------*
         ITRACE ID=ENDD,                                               +
               DATA1=COMM_DIALOG_TOKEN
         IEWBIND FUNC=ENDD,                                            +
               VERSION=5,                                              +
               DIALOG=COMM_DIALOG_TOKEN,                               +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=ENDD_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_REASON_CODE,DXD_REASON_CODE
         BNZ   ERR0060
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1
         B     ERR0070
ERR0020  DS    0H
         MVI   COMM_MSG_ID,2
         B     ERR0070
ERR0030  DS    0H
         MVI   COMM_MSG_ID,3
         B     ERR0070
ERR0040  DS    0H
         MVI   COMM_MSG_ID,4
         B     ERR0070
ERR0050  DS    0H
         MVI   COMM_MSG_ID,5
         B     ERR0070
ERR0060  DS    0H
         MVI   COMM_MSG_ID,6
ERR0070  DS    0H
         ITRACE ID=ERROR,                                              +
               DATA1=COMM_MSG_ID
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         UNPK  COMM_INFO_01(9),DXD_RETURN_CODE(5)
         TR    COMM_INFO_01(8),COMM_HEXCHAR
         UNPK  COMM_INFO_02(9),DXD_REASON_CODE(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO
         BE    ERR0080
         LA    R1,COMM_MSG_1
         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1
         MVI   PRINT_COMMAND,$PRINT_PRINT
         L     R15,V_DISPRINT
         BALR  R14,R15
         B     EXIT0000
ERR0080  DS    0H
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R8,DEBUG000                    CALL DISDEBUG
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDBIND)
LIST          DC   H'4',C'LIST'
ALL           DC   H'3',C'ALL'

              IEWBIND MF=(L,IEWBIND_I)
IEWBIND_L     EQU  *-IEWBIND_I

MSG01         DC   C'DISBIND01I   Entering DISBIND'
MSG01_L       EQU  *-MSG01

MSG02         DC   C'DISBIND02I   Exiting DISBIND'
MSG02_L       EQU  *-MSG02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDBIND           DSECT
                  DS       18F
DXD_CSECT         DS       CL8
DXD_RETURN_CODE   DS   F
DXD_REASON_CODE   DS   F

DXD_IEWBIND       DS   0F,(IEWBIND_L)X
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM  TYPE=DSECT
                  DISSPFD  TYPE=DSECT
                  COPY     DISASMDA

                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                 COPY REGEQU
                 END  DISBIND
./ ADD NAME=DISBLIST 0108-09119-09198-0835-00691-00666-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISBLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of BASE register(s)                     *
*                                                                     *
*                                                                     *
*    BASE blocks are chained from COMM_BASE_NEXT.                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISBLIST CSECT
DISBLIST AMODE 31
DISBLIST RMODE ANY
         USING DISBLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISBLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDBLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING BASE_DSECT,R6
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing BASE chain.                        *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    DXD_FIRST_BASE,DXD_FIRST_BASE
         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         LA    R2,DXD_FIRST_BASE-4
PREV     USING BASE_DSECT,R2
         ICM   R6,15,COMM_BASE_NEXT           FIRST BASE
         BZ    INIT0020
INIT0010 DS    0H
         GETMAIN RU,                                                   +
               LV=BASE_DSECT_L,                                        +
               LOC=ANY
NEW      USING BASE_DSECT,R1
         MVC   NEW.BASE_DSECT(BASE_DSECT_L),BASE_DSECT
         ST    R1,PREV.BASE_NEXT
         LR    R2,R1
         ICM   R6,15,BASE_NEXT
         BNZ   INIT0010
         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_BASE
         DROP  NEW,PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         L     R0,SPF_VDEPTH                  NBR OF LINES
         SLL   R0,2                           MULTIPLY BY 4
         ST    R0,DXD_BASE_TABLE_SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_BASE_TABLE              SAVE ADDRESS
         ITRACE ID=A_TABLE,                                            +
               RDATA1=R1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=INIT_V
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE VDATA
         L     R0,DXD_BASE_TABLE
         L     R1,DXD_BASE_TABLE_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INIT BASE TABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=FORMAT
         L     R8,SPF_VWIDTH                  SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R8,1                           DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
MAIN0020 DS    0H
         MVC   0(MSG01_L,R8),MSG01            INITIALIZE
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0020                    LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                  SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R8,1                           DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR
         USING MSG01,R8
         L     R7,SPF_VDEPTH
MAIN0030 DS    0H
         L     R4,DXD_BASE_TABLE              FIRST 'SLOT'
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R6,15,DXD_FIRST_DISPLAYED      FIRST TO DISPLAY
         BZ    MAIN0060                       NOTHING DEFINED YET
MAIN0040 DS    0H
         ITRACE ID=BUILD,                                              +
               RDATA1=R6,                                              +
               DATA2=BASE_DISP
         ST    R6,DXD_LAST_DISPLAYED          SAVE ADDR
         ST    R6,0(R4)                       SAVE ADDR
         UNPK  DXD_WORK(9),BASE_BEGIN(5)      UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_BEGIN,DXD_WORK           COPY BEGIN
         UNPK  DXD_WORK(9),BASE_END(5)        UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_END,DXD_WORK             COPY BEGIN
         UNPK  DXD_WORK(9),BASE_DISP(5)       UNPACK REF DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_DISP,DXD_WORK            COPY DISP
         MVC   MSG01_REGISTER,BASE_CHAR_REGISTER
         LA    R1,1                           CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED           PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED           SAVE TOTAL
         LA    R4,4(,R4)                      NEXT IN ADDR TABLE
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R6,15,BASE_NEXT
         BNZ   MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,DISBDATA        SET PANEL NAME
         L     R15,V_DISDISP                  DISP ENTRY POINT
         BALR  R14,R15                        DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                         RC = 0?
         BNZ   MAIN0500                       NO
         CLC   ABEND,SPF_ZCMD                 ABEND?
         BE    ABEND000                       YES
         CLC   CANCEL,SPF_ZCMD                CANCEL?
         BE    MAIN0550                       YES
         CLC   CAN,SPF_ZCMD                   CAN(CEL)?
         BE    MAIN0550                       YES
* ------------------------------------------------------------------- *
*        Check for new or changes to existing BASE(s)                 *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                  SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R8,1                           DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
         NI    DXD_FLAGS,255-$DXD_ERROR       RESET FLAG
         XC    DXD_CONV_OUT,DXD_CONV_OUT
MAIN0070 DS    0H
         ITRACE ID=VERIFY,                                             +
               DATA1=MSG01_REGISTER
         MVC   MSG01_MSG,COMM_BLANKS
         OC    MSG01_BEGIN,COMM_BLANKS
         OC    MSG01_END,COMM_BLANKS
         OC    MSG01_DISP,COMM_BLANKS
         OC    MSG01_REGISTER,COMM_BLANKS
         CLC   MSG01_BEGIN,COMM_BLANKS        BEGIN BLANK?
         BE    MAIN0100                       YES
         CLC   MSG01_END,COMM_BLANKS          END BLANK?
         BE    MAIN0120                       YES
         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK
         BE    MAIN0130                       YES

         ITRACE ID=VER_BEGN,                                           +
               DATA1=MSG01_BEGIN
         LA    R1,MSG01_BEGIN                 BEGIN DISP IN EFFECT
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

         ITRACE ID=VER_END,                                            +
               DATA1=MSG01_END
         LA    R1,MSG01_END                   END DISP IN EFFECT
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

         ITRACE ID=VER_DISP,                                           +
               DATA1=MSG01_DISP
         LA    R1,MSG01_DISP                  DISP REFERENCED
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

MAIN0080 DS    0H
         BAL   R5,MAIN0450                    VERIFY REGISTER
         LTR   R1,R1                          REGISTER LOCATED?
         BZ    MAIN0140                       NO
         MVC   DXD_WORK(8),MSG01_BEGIN        COPY BEGIN DISP
         TR    DXD_WORK(8),CHARHEX            TRANSLATE
         PACK  DXD_BEGIN(5),DXD_WORK(9)       PACK BEGIN DISP
         MVC   DXD_WORK(8),MSG01_END          COPY END DISP
         TR    DXD_WORK(8),CHARHEX            TRANSLATE
         PACK  DXD_END(5),DXD_WORK(9)         PACK END DISP
         CLC   DXD_BEGIN,DXD_END              END > BEGIN?
         BNH   MAIN0160                       NO
         MVI   COMM_MSG_ID,1                  SET MESSAGE ID
         B     MAIN0150
MAIN0090 DS    0H
         ITRACE ID=BADDIGIT
         MVI   COMM_MSG_ID,2                  SET MESSAGE ID
         B     MAIN0150
MAIN0100 DS    0H
         CLC   MSG01_END,COMM_BLANKS          END BLANK?
         BE    MAIN0110                       YES
         MVI   COMM_MSG_ID,3                  END, NO BEGIN
         B     MAIN0150
MAIN0110 DS    0H
         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK?
         BE    MAIN0160                       YES
         MVI   COMM_MSG_ID,4                  REG, NO BEGIN
         B     MAIN0150
MAIN0120 DS    0H
         MVI   COMM_MSG_ID,5                  BEGIN, NO END
         B     MAIN0150
MAIN0130 DS    0H
         MVI   COMM_MSG_ID,6                  BEGIN, NO REGISTER
         B     MAIN0150
MAIN0140 DS    0H
         MVI   COMM_MSG_ID,7                  BAD REGISTER
MAIN0150 DS    0H
         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED
         BAL   R5,MSG0000                     BUILD MESSAGE
         MVC   MSG01_MSG,COMM_MSG_1           COPY MESSAGE
MAIN0160 DS    0H
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0070                    LOOP
         TM    DXD_FLAGS,$DXD_ERROR           ERROR(S)?
         BO    MAIN0060                       YES
* ------------------------------------------------------------------- *
*                                                                     *
*        No errors have been found                                    *
*                                                                     *
*        Determine if any BASE(s) were                                *
*          updated                                                    *
*          removed                                                    *
*          added                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                  SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R8,1                           DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
         L     R4,DXD_BASE_TABLE              FIRST BASE
MAIN0170 DS    0H
         ITRACE ID=MAIN0170
         L     R6,0(,R4)                      BASE BLOCK IF USED
         CLC   MSG01_BEGIN,COMM_BLANKS        BLANK?
         BE    MAIN0240                       YES

         LA    R1,MSG01_BEGIN
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_BEGIN
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT BEGIN DISP

         LA    R1,MSG01_END
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_END
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT END DISP

         LA    R1,MSG01_DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_DISP
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT REFERENCED DISP

         B     MAIN0190
MAIN0180 DS    0H
         XC    DXD_DISP,DXD_DISP              FORCE DISP=ZERO
MAIN0190 DS    0H
         BAL   R5,MAIN0450                    LOOKUP REGISTER
         LTR   R6,R6                          BASE EXIST?
         BZ    MAIN0210                       NO
         CLC   BASE_BEGIN,DXD_BEGIN           SAME BEGIN DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_END,DXD_END               SAME END DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_DISP,DXD_DISP             SAME REFERENCED DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_CHAR_REGISTER,DXD_REG_CHAR   SAME REGISTER?
         BE    MAIN0280                       YES
MAIN0200 DS    0H
         ITRACE ID=UPDTBASE
         OI    DXD_FLAGS,$DXD_UPDATE          BASE HAS BEEN UPDATED
         MVC   BASE_BEGIN,DXD_BEGIN           CHANGE BEGIN DISP
         MVC   BASE_END,DXD_END               CHANGE END DISP
         MVC   BASE_DISP,DXD_DISP             CHANGE REF DISP
         MVC   BASE_CHAR_REGISTER,DXD_REG_CHAR   CHANGE CHAR REGISTER
         MVC   BASE_REGISTER,DXD_REG_BIN      CHANGE BINARY REGISTER
         B     MAIN0280
MAIN0210 DS    0H
         ITRACE ID=NEW_BASE
         OI    DXD_FLAGS,$DXD_UPDATE
         GETMAIN RU,                                                   +
               LV=BASE_DSECT_L,                                        +
               LOC=ANY
NEW      USING BASE_DSECT,R1
         XC    NEW.BASE_DSECT(BASE_DSECT_L),NEW.BASE_DSECT
         MVC   NEW.BASE_EYE,BASE_ID           IDENTIFY BLOCK
         MVC   NEW.BASE_BEGIN,DXD_BEGIN       SET BEGIN DISP
         MVC   NEW.BASE_END,DXD_END           SET END DISP
         MVC   NEW.BASE_DISP,DXD_DISP         SET DISP REFERENCED
         MVC   NEW.BASE_CHAR_REGISTER,DXD_REG_CHAR
         MVC   NEW.BASE_REGISTER,DXD_REG_BIN  COPY BINARY REGISTER
         LA    R6,DXD_FIRST_BASE-4            FIRST BASE
MAIN0220 DS    0H
         ICM   R2,15,BASE_NEXT                ANOTHER ON CHAIN?
         BZ    MAIN0230                       YES
         LR    R6,R2                          COPY ADDRESS
         B     MAIN0220
MAIN0230 DS    0H
         ST    R1,BASE_NEXT                   SET 'NEXT' IN PREVIOUS
         ST    R6,NEW.BASE_PREV               SET PREV IN NEW
         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         BNZ   MAIN0280                       BLOCK PRESENT
         ST    R1,DXD_FIRST_DISPLAYED         SET FIRST ON CHAIN
         B     MAIN0280
         DROP  NEW
MAIN0240 DS    0H
         LTR   R6,R6                          BASE EXIST?
         BZ    MAIN0280                       NO
         OI    DXD_FLAGS,$DXD_UPDATE          A BASE WAS UPDATED
         ITRACE ID=DEL_BASE,                  DELETING A BASE          +
               RDATA1=R6,                                              +
               DATA2=BASE_BEGIN
         ICM   R1,15,BASE_NEXT                NEXT BASE ON CHAIN
         BZ    MAIN0250
NEXT     USING BASE_DSECT,R1
         MVC   NEXT.BASE_PREV,BASE_PREV       SET PREV IN NEXT
         DROP  NEXT
MAIN0250 DS    0H
         ICM   R1,15,BASE_PREV                PREVIOUS ON CHAIN
         BZ    MAIN0260                       NO PREVIOUS BLOCK
PREV     USING BASE_DSECT,R1
         MVC   PREV.BASE_NEXT,BASE_NEXT       SET NEXT IN PREVIOUS
MAIN0260 DS    0H
         C     R6,DXD_FIRST_DISPLAYED         FIRST BASE DISPLAYED?
         BNE   MAIN0270                       NO
         MVC   DXD_FIRST_DISPLAYED,BASE_NEXT  CHANGE TO NEXT BLOCK
MAIN0270 DS    0H
         FREEMAIN RU,                         FREEMAIN THE BASE        +
               A=(R6),                                                 +
               LV=BASE_DSECT_L
         XC    0(4,R4),0(R4)                  CLEAR ADDR IN TABLE
MAIN0280 DS    0H
         ITRACE ID=NEXT
         A     R8,SPF_VWIDTH                  NEXT LINE
         LA    R4,4(,R4)                      NEXT IN TABLE
         BCT   R7,MAIN0170                    LOOP
         TM    DXD_FLAGS,$DXD_UPDATE          ANY UPDATES?
         BO    MAIN0010                       YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                 BOTTOM?
         BE    MAIN0300
         CLI   SPF_ZVERB,C'D'                 DOWN?
         BE    MAIN0320
         CLI   SPF_ZVERB,C'T'                 TOP?
         BE    MAIN0330
         CLI   SPF_ZVERB,C'U'                 UP?
         BE    MAIN0340
         B     MAIN0050
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,DXD_FIRST_BASE           FIRST ON CHAIN
TEMP     USING BASE_DSECT,R1
         BZ    EXIT0000                       SHOULD NOT HAPPEN!
MAIN0310 DS    0H
         LR    R6,R1                          SAVE THIS ADDR
         ICM   R1,15,TEMP.BASE_NEXT           NEXT BASE
         BNZ   MAIN0310
         B     MAIN0010                       BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0320 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    MAIN0300                       YES
         L     R6,DXD_LAST_DISPLAYED          LAST ITEM DISPLAYED
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=TOP
         L     R6,DXD_FIRST_BASE              FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    MAIN0330                       YES
         ICM   R1,15,DXD_FIRST_DISPLAYED      FIRST ON DISPLAY
         BZ    EXIT0000                       SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                LINES ON DISPLAY
MAIN0350 DS    0H
         LR    R6,R1                          COPY ADDR
         ICM   R1,15,TEMP.BASE_PREV           PREVIOUS BASE
         BZ    MAIN0010
         BCT   R7,MAIN0350                    LOOP
         B     MAIN0010
         DROP  TEMP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0450 DS    0H
         ITRACE ID=VER_REG,                                            +
               DATA1=MSG01_REGISTER
         LA    R1,2                           MAX LOOPS
MAIN0460 DS    0H
         CLI   MSG01_REGISTER,C' '            BLANK?
         BNE   MAIN0470                       NO
         ITRACE ID=SHIFT
         MVC   MSG01_REGISTER(2),MSG01_REGISTER+1
         MVI   MSG01_REGISTER+2,C' '          INSERT BLANK
         BCT   R1,MAIN0460
MAIN0470 DS    0H
         LA    R1,$NBR_IN_TABLE               NBR IN REG TABLE
         LA    R2,REG_TABLE                   REG TABLE
         USING REG_DSECT,R2
MAIN0480 DS    0H
         ITRACE ID=CHECKREG,                                           +
               DATA1=REG_A,                                            +
               DATA2=MSG01_REGISTER
         CLC   REG_A,MSG01_REGISTER           LOCATED?
         BE    MAIN0490                       YES
         LA    R2,REG_DSECT_L(,R2)            NEXT
         BCT   R1,MAIN0480                    LOOP
         BR    R5
MAIN0490 DS    0H
         ITRACE ID=GOOD_REG,                                           +
               DATA1=REG_A
         MVC   DXD_REG_CHAR,REG_B             COPY CHAR FORM
         MVC   DXD_REG_BIN,REG_C              COPY BINARY FORM
         BR    R5
         DROP  R2
* ------------------------------------------------------------------- *
*                                                                     *
*      Replace the existing BASE chain with the updated chain         *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=SWITCH
         ICM   R6,15,COMM_BASE_NEXT           FIRST USER BASE
         BZ    MAIN0520
MAIN0510 DS    0H
         LR    R1,R6                          COPY ADDRESS
         ICM   R6,15,BASE_NEXT                NEXT BASE
         FREEMAIN RU,                         FREEMAIN THIS BASE       +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R6,R6                          ANOTHER BASE?
         BNZ   MAIN0510                       YES
MAIN0520 DS    0H
         MVC   COMM_BASE_NEXT,DXD_FIRST_BASE
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0550 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND
         ICM   R6,15,DXD_FIRST_BASE           FIRST ON NEW CHAIN
         BZ    EXIT0000                       NONE ON CHAIN
MAIN0560 DS    0H
         LR    R1,R6                          COPY ADDR
         ICM   R6,15,BASE_NEXT                NEXT BASE BLOCK
         FREEMAIN RU,                         FREE THIS BLOCK          +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R6,R6                          ANOTHER BLOCK?
         BNZ   MAIN0560                       YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         ITRACE ID=MSG,                                                +
               DATA1=COMM_MSG_ID
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R0,DXD_BASE_TABLE_SIZE         ADDR TABLE SIZE
         L     R1,DXD_BASE_TABLE              ADDR TABLE ADDR
         FREEMAIN RU,                         FREEMAIN ADDR TABLE      +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         L     R14,12(,R13)                   RESTORE REGISTERS         ASE01680
         LR    R15,R2                         SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDBLIST)

ABEND         DC   C'ABEND '
BASE_ID       DC   CL8'BASE'
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
DISBDATA      DC   CL8'DISBDATA'

              LTORG

CHARHEX       DC   256X'00'
              ORG  CHARHEX+C'A'
              DC   X'0A0B0C0D0E0F'
              ORG  CHARHEX+C'0'
              DC   X'00010203040506070809'
              ORG

REG_TABLE     DS   0C
              DC   C'0  ',C'R0 ',X'00'
              DC   C'1  ',C'R1 ',X'01'
              DC   C'2  ',C'R2 ',X'02'
              DC   C'3  ',C'R3 ',X'03'
              DC   C'4  ',C'R4 ',X'04'
              DC   C'5  ',C'R5 ',X'05'
              DC   C'6  ',C'R6 ',X'06'
              DC   C'7  ',C'R7 ',X'07'
              DC   C'8  ',C'R8 ',X'08'
              DC   C'9  ',C'R9 ',X'09'
              DC   C'10 ',C'R10',X'0A'
              DC   C'11 ',C'R11',X'0B'
              DC   C'12 ',C'R12',X'0C'
              DC   C'13 ',C'R13',X'0D'
              DC   C'14 ',C'R14',X'0E'
              DC   C'15 ',C'R15',X'0F'
              DC   C'A  ',C'R10',X'0A'
              DC   C'B  ',C'R11',X'0B'
              DC   C'C  ',C'R12',X'0C'
              DC   C'D  ',C'R13',X'0D'
              DC   C'E  ',C'R14',X'0E'
              DC   C'F  ',C'R15',X'0F'
              DC   C'R0 ',C'R0 ',X'00'
              DC   C'R1 ',C'R1 ',X'01'
              DC   C'R2 ',C'R2 ',X'02'
              DC   C'R3 ',C'R3 ',X'03'
              DC   C'R4 ',C'R4 ',X'04'
              DC   C'R5 ',C'R5 ',X'05'
              DC   C'R6 ',C'R6 ',X'06'
              DC   C'R7 ',C'R7 ',X'07'
              DC   C'R8 ',C'R8 ',X'08'
              DC   C'R9 ',C'R9 ',X'09'
              DC   C'R10',C'R10',X'0A'
              DC   C'R11',C'R11',X'0B'
              DC   C'R12',C'R12',X'0C'
              DC   C'R13',C'R13',X'0D'
              DC   C'R14',C'R14',X'0E'
              DC   C'R15',C'R15',X'0F'
              DC   X'000000',C'   ',X'00'    DUMMY ENTRY
REG_TABLE_L   EQU  *-REG_TABLE
$NBR_IN_TABLE EQU  REG_TABLE_L/REG_DSECT_L


MSG01         DS   0C
              DC   AL1($ATTR_INPUT)
MSG01_BEGIN   DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($ATTR_INPUT)
MSG01_END     DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($ATTR_INPUT)
MSG01_DISP    DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($ATTR_INPUT)
MSG01_REGISTER DC  CL3' '
              DC   AL1($ATTR_HIGH_YELLOW)
MSG01_MSG     DC   CL30' '
MSG01_L       EQU  *-MSG01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBLIST              DSECT
                      DS  18F

                      DS  A             DUMMY FOR 'PREV' ON CHAIN
DXD_FIRST_BASE        DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_BASE_TABLE        DS  A
DXD_BASE_TABLE_SIZE   DS  F

DXD_CONV_PARMS        DS  0A
DXD_CONV_SOURCE       DS  A
DXD_CONV_OUT          DS  A

DXD_BEGIN             DS  F
DXD_END               DS  F
DXD_DISP              DS  F
DXD_REG_CHAR          DS  CL3
DXD_REG_BIN           DS  X

DXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED

DXD_FLAGS             DS  X             FLAGS
$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR
$DXD_UPDATE           EQU X'40'         .. BASE(S) UPDATED

DXD_WORK              DS  CL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REG_DSECT     DSECT
REG_A         DS      CL3
REG_B         DS      CL3
REG_C         DS      X                 FORM IN INSTRUCTIONS
REG_DSECT_L   EQU     *-REG_DSECT

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISBLIST
./ ADD NAME=DISBMAIN 0101-09119-09198-0835-00933-00933-00000-SOURCE
* -------------------------------------------------------------------*
*                                                                    *
*        BATCH MAINLINE                                              *
*                                                                    *
* -------------------------------------------------------------------*
DISBMAIN CSECT
DISBMAIN AMODE 31
DISBMAIN RMODE ANY
         USING DISBMAIN,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISBMAIN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)                    CHAIN  SAVE AREA
         ST    R15,8(,R13)                    CHAIN SAVE AREA
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDBMAIN,R13
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*        Verify required DD's are present                             *
* ------------------------------------------------------------------- *
         TM    COMM_DDS,$DISPRINT_DD          DISPRINT DD PRESENT?
         BNO   ERR0010                        NO
         ITRACE ID=OPNPRINT
         OPEN  (DISPRINT_DCB,OUTPUT),         OPEN DISPRINT            +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         TM    COMM_DDS,$DISIN_DD             DISIN DD PRESENT?
         BNO   ERR0020                        NO
         TM    COMM_DDS,$DISMOD_DD            DISMOD DD PRESENT?
         BNO   ERR0030                        NO
* ------------------------------------------------------------------- *
*                                                                     *
*     OPEN "preprocessed" DSECT libraries.                            *
*                                                                     *
*     Actual DSECT source or MACROs can be used to 'map' data areas.  *
*                                                                     *
*     The DSECT or MACRO source may be 'preprocessed'.  Since labels  *
*     can be longer than eight characters (longer than a member name  *
*     in a PDS(/E), I chose to record the pre-processed info in a     *
*     VSAM KSDS.                                                      *
*                                                                     *
*     Also since VSAM KSDSes cannot be concatenated, the disassembler *
*     allows multiple DSECTxx DDs.  DISTIOT will have chained         *
*     control blocks from COMM_DSECT_KSDS for each DSECTxx DD.        *
*                                                                     *
*     When the disassembler searches for a DSECT name, it searches    *
*     the DSECT libraries in the order they are specified in the JCL. *
*                                                                     *
* ------------------------------------------------------------------- *
         ICM   R7,15,COMM_KSDS_NEXT           1ST KSDS
         BZ    INIT0030
         USING KSDS_DSECT,R7                  DEFINE BASE
INIT0020 DS    0H
         LA    R2,KSDS_ACB                    ACB ADDRESS
         ITRACE ID=OPENKSDS,                                           +
               DATA1=KSDS_DDNAME,                                      +
               RDATA2=R2
         OPEN  ((R2),INPUT),                                           +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0040
         OI    KSDS_FLAGS,$KSDS_OPEN
         ICM   R7,15,KSDS_NEXT
         BNZ   INIT0020
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0030 DS    0H
         TM    COMM_DDS,$DISDEBUG_DD          DISDEBUG PRESENT
         BNO   INIT0040                       NO
         OPEN  (DISDEBUG_DCB,OUTPUT),         OPEN PRINT               +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
INIT0040 DS    0H
         MVI   PRINT_COMMAND,$PRINT_HEADING   PRINT HEADING
         L     R15,V_DISPRINT
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Read parameters                                              *
* ------------------------------------------------------------------- *
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R9,DEBUG000                    PRINT
         L     R15,V_DISPARM                  DISPARM ENTRY POINT
         BALR  R14,R15                        CALL DISPARM
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS PROBLEM?
         BO    ERR0050                        YES
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R9,DEBUG000                    PRINT
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO DEBUG
         BAL   R9,DEBUG000                    CALL DISDEBUG
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'
* ------------------------------------------------------------------- *
*                                                                     *
*         Determine which OPCODE table to use                         *
*                                                                     *
*                                                                     *
*     DISOP1   no floating point, no new 'z' opcodes                  *
*     DISOP2   floating point, no new 'z' opcodes                     *
*     DISOP3   floating point, z opcodes                              *
*     DISOP4   No floating point, z opcodes                           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    COMM_FLAGS,$COMM_FLOAT+$COMM_Z FLOATING POINT AND Z?
         BO    INIT0070                       CORRECT
         TM    COMM_FLAGS,$COMM_Z             NO FLOATING POINT, W/Z?
         BO    INIT0060                       CORRECT
         TM    COMM_FLAGS,$COMM_FLOAT         FLOATING POINT, NO Z?
         BO    INIT0050                       CORRECT
         ITRACE ID=OP_1
         MVI   COMM_OPCODE_TABLE_NAME+5,C'1'  USE DISOP1
         B     INIT0080
INIT0050 DS    0H
         ITRACE ID=OP_2
         MVI   COMM_OPCODE_TABLE_NAME+5,C'2'  USE DISOP2
         B     INIT0080
INIT0060 DS    0H
         ITRACE ID=OP_3
         MVI   COMM_OPCODE_TABLE_NAME+5,C'3'  USE DISOP3
         B     INIT0080
INIT0070 DS    0H
         ITRACE ID=OP_4
         MVI   COMM_OPCODE_TABLE_NAME+5,C'4'  USE DISOP4
INIT0080 DS    0H
         ITRACE ID=LOAD_OP,                                            +
               DATA1=COMM_OPCODE_TABLE_NAME
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG03_L),MSG03
         MVC   COMM_DEBUG_IO+1+(MSG03_OPCODE-MSG03)(8),COMM_OPCODE_TABL+
               E_NAME
         BAL   R9,DEBUG000
         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME   LOAD OPCODE TABLE
         ST    R0,COMM_OPCODE_TABLE_ADDR      SAVE ADDRESS
         ITRACE ID=OP_TABLE,                                           +
               RDATA1=R0
* ------------------------------------------------------------------- *
*         Start BINDER dialog, include LMOD                           *
* ------------------------------------------------------------------- *
         ITRACE ID=STARTD
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG04_L),MSG04
         BAL   R9,DEBUG000
         MVI   COMM_BIND_FUNC,$BIND_STARTD    BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=STARTDRC,                                           +
               RDATA1=R15
         MVC   COMM_DEBUG_IO+1(MSG05_L),MSG05
         BAL   R9,DEBUG000
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0060                        YES
         OI    DXD_FLAGS,$DIALOG_ACTIVE       SET FLAG
* ------------------------------------------------------------------- *
*         Build SECTION names chain                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=NAMES
         MVC   COMM_DEBUG_IO+1(MSG06_L),MSG06
         BAL   R9,DEBUG000
         MVI   COMM_BIND_FUNC,$BIND_NAMES     BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=NAMES_RC,                                           +
               RDATA1=R15
         MVC   COMM_DEBUG_IO+1(MSG07_L),MSG07
         BAL   R9,DEBUG000
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0060                        YES
* ------------------------------------------------------------------- *
*        List the SECTION names                                       *
* ------------------------------------------------------------------- *
MAIN0090 DS    0H
         ITRACE ID=NLIST
         MVC   COMM_DEBUG_IO+1(MSG08_L),MSG08
         BAL   R9,DEBUG000
         L     R15,V_DISNLIST
         BALR  R14,R15                        LIST SECTION NAMES
         ITRACE ID=NLIST_RC,                                           +
               RDATA1=R15
         MVC   COMM_DEBUG_IO+1(MSG09_L),MSG09
         BAL   R9,DEBUG000
* ------------------------------------------------------------------- *
*         Get ESD and RLD info                                        *
* ------------------------------------------------------------------- *
MAIN0110 DS    0H
         ITRACE ID=ESD_RLD
         MVC   COMM_DEBUG_IO+1(MSG12_L),MSG12
         BAL   R9,DEBUG000
         MVI   COMM_BIND_FUNC,$BIND_ESD_RLD   BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=ESDRLDRC,                                           +
               RDATA1=R15
         MVC   COMM_DEBUG_IO+1(MSG13_L),MSG13
         BAL   R9,DEBUG000
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0060                        YES
* ------------------------------------------------------------------- *
*         Read TEXT                                                   *
* ------------------------------------------------------------------- *
         MVC   COMM_DEBUG_IO+1(MSG14_L),MSG14
         BAL   R9,DEBUG000
         ITRACE ID=READTEXT
         MVI   COMM_BIND_FUNC,$BIND_TEXT      BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=TEXT_RC,                                            +
               RDATA1=R15
         MVC   COMM_DEBUG_IO+1(MSG15_L),MSG15
         BAL   R9,DEBUG000
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0060                        YES
* ------------------------------------------------------------------- *
*        DETERMINE 'TARGET' OF RLD ADCONS                             *
* ------------------------------------------------------------------- *
         ICM   R2,15,COMM_RLD_AREA_NEXT       FIRST RLD AREA
         BZ    MAIN0150                       NO RLD ITEMS
         USING AREA_DSECT,R2
MAIN0120 DS    0H
         ITRACE ID=TARGET,                                             +
               RDATA1=R2,                                              +
               DATA2=0(R2)
         CLI   AREA_DATA_TYPE,$AREA_DATA      DATA AREA?
         BNE   MAIN0140                       NO
         CLI   AREA_DATA_TYPE,$DATA_ACON      ADCON?
         BE    MAIN0130                       YES
         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?
         BNE   MAIN0140                       NO
MAIN0130 DS    0H
         ICM   R1,15,AREA_BEGIN               RLD ITEM'S DISP
         LR    R0,R1                          COPY DISP
         A     R1,COMM_CSECT_TEXT             PLUS BASE
         LH    R14,AREA_LENGTH                RLD ITEM'S LENGTH
         BCTR  R14,0                          RELATIVE TO ZERO
         AR    R0,R14                         PLUS LENGTH
         STCM  R0,15,AREA_END
         LA    R15,AREA_REF_DISP1+3           END OF OUTPUT FIELD
         SR    R15,R14                        MINUS LENGTH
         EX    R14,REF_MVC                    COPY TEXT
MAIN0140 DS    0H
         ICM   R2,15,AREA_NEXT
         BNZ   MAIN0120
         B     MAIN0150
REF_MVC  MVC   0(0,R15),0(R1)                 COPY TARGET DISP
* ------------------------------------------------------------------- *
*        List ESD info                                                *
* ------------------------------------------------------------------- *
MAIN0150 DS    0H
         ITRACE ID=LIST_ESD
         MVC   COMM_DEBUG_IO+1(MSG16_L),MSG16
         BAL   R9,DEBUG000
         L     R15,V_DISELIST                 LIST ESD ITEMS
         BALR  R14,R15
         MVC   COMM_DEBUG_IO+1(MSG17_L),MSG17
         BAL   R9,DEBUG000
* ------------------------------------------------------------------- *
*        List RLD info                                                *
* ------------------------------------------------------------------- *
         ITRACE ID=LIST_RLD
         MVC   COMM_DEBUG_IO+1(MSG18_L),MSG18
         BAL   R9,DEBUG000
         L     R15,V_DISRLIST                 LIST RLD ITEMS
         BALR  R14,R15
         MVC   COMM_DEBUG_IO+1(MSG19_L),MSG19
         BAL   R9,DEBUG000
* ------------------------------------------------------------------- *
*        Print the TEXT                                               *
* ------------------------------------------------------------------- *
         MVC   COMM_DEBUG_IO+1(MSG20_L),MSG20
         BAL   R9,DEBUG000
         ITRACE ID=LISTTEXT
         L     R15,V_DISTLSTB
         BALR  R14,R15                        LIST TEXT
         MVC   COMM_DEBUG_IO+1(MSG21_L),MSG21
         BAL   R9,DEBUG000
* ------------------------------------------------------------------- *
*        Assemble/process ASM START/ASM END                           *
* ------------------------------------------------------------------- *
         TM    COMM_FLAGS,$COMM_ASSEM         ASM,START FOUND?
         BNO   MAIN0200                       NO
         MVC   COMM_DEBUG_IO+1(MSG24_L),MSG24
         BAL   R9,DEBUG000
         ITRACE ID=ASSEMBLE
         L     R15,V_DISASSEM
         BALR  R14,R15                        ASSEMBLE/PROCESS MACROS
         MVC   COMM_DEBUG_IO+1(MSG25_L),MSG25
         BAL   R9,DEBUG000
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'
         BAL   R9,DEBUG000
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?
         BO    ERR0070                        YES.. EXIT
* ------------------------------------------------------------------- *
*        Chain USINGs to DSECTs                                       *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=DSECT
         MVC   COMM_DEBUG_IO+1(MSG26_L),MSG26
         BAL   R9,DEBUG000
         L     R15,V_DISDSECT                 DISDSECT ENTRY POINT
         BALR  R14,R15                        CHAIN USING'S TO DSECT'S
         MVC   COMM_DEBUG_IO+1(MSG27_L),MSG27
         BAL   R9,DEBUG000
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     REQUEST DEBUG
         BAL   R9,DEBUG000
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    CHANGE COMMAND TO PRINT
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?
         BO    MAIN0230                       YES.. EXIT
* ------------------------------------------------------------------- *
*        Merge RLD areas with user specified areas                    *
* ------------------------------------------------------------------- *
         ITRACE ID=SCAN
         MVC   COMM_DEBUG_IO+1(MSG28_L),MSG28
         BAL   R9,DEBUG000
         L     R15,V_DISDMERG                 DISDMERG ENTRY POINT
         BALR  R14,R15                        CALL DISDMERG
         MVC   COMM_DEBUG_IO+1(MSG29_L),MSG29
         BAL   R9,DEBUG000
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'
         BAL   R9,DEBUG000
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?
         BO    EXIT0000                       YES.. EXIT
* ------------------------------------------------------------------- *
*        Scan text to determine where instructions and data occur     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCAN
         MVC   COMM_DEBUG_IO+1(MSG30_L),MSG30
         BAL   R9,DEBUG000
         L     R15,V_DISSCAN                  DISSCAN ENTRY POINT
         BALR  R14,R15                        CALL DISSCAN
         MVC   COMM_DEBUG_IO+1(MSG31_L),MSG31
         BAL   R9,DEBUG000
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'
         BAL   R9,DEBUG000
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?
         BO    EXIT0000                       YES.. EXIT
* ------------------------------------------------------------------- *
*         Verify BASE and USING info                                  *
* ------------------------------------------------------------------- *
         ITRACE ID=VBU
         MVC   COMM_DEBUG_IO+1(MSG32_L),MSG32
         BAL   R9,DEBUG000
         L     R15,V_DISVBU                   DISVBU ENTRY POINT
         BALR  R14,R15                        DISVBU
         MVC   COMM_DEBUG_IO+1(MSG33_L),MSG33
         BAL   R9,DEBUG000
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT
         BO    EXIT0000
* ------------------------------------------------------------------- *
*         Build REF table                                             *
* ------------------------------------------------------------------- *
         ITRACE ID=REF
         MVC   COMM_DEBUG_IO+1(MSG34_L),MSG34
         BAL   R9,DEBUG000
         L     R15,V_DISREF                   DISREF ENTRY POINT
         BALR  R14,R15                        DISREF
         MVC   COMM_DEBUG_IO+1(MSG35_L),MSG35
         BAL   R9,DEBUG000
         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80
         BAL   R9,DEBUG000                    PRINT
         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'
         BAL   R9,DEBUG000
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT
         BO    EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         MVI   COMM_MSG_ID,1                  SET MESSAE ID
         BAL   R9,MSG0000                     ISSUE MESSAGE
* ------------------------------------------------------------------- *
*         Generate source code                                        *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         ITRACE ID=GEN
         MVC   COMM_DEBUG_IO+1(MSG36_L),MSG36
         BAL   R9,DEBUG000
         L     R15,V_DISGEN                   DISGEN ENTRY POINT
         BALR  R14,R15                        DISGEN
         MVC   COMM_DEBUG_IO+1(MSG37_L),MSG37
         BAL   R9,DEBUG000
         MVI   COMM_MSG_ID,3                  SET MESSAGE ID
         BAL   R9,MSG0000                     PRINT MESSAGE
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0230 DS    0H
         MVI   COMM_RC,12                     SET RC
         MVI   COMM_MSG_ID,12                 SET MSG NBR
         BAL   R9,MSG0000                     ISSUE MSG
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        RESET                                                        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         TM    DXD_FLAGS,$DIALOG_ACTIVE       DIALOG ACTIVE?
         BNO   MAIN0310                       NO
         ITRACE ID=ENDD
         MVI   COMM_BIND_FUNC,$BIND_ENDD      BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         NI    DXD_FLAGS,255-$DIALOG_ACTIVE   RESET FLAG
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0060                        YES
MAIN0310 DS    0H
         L     R1,COMM_ESD_NEXT               FIRST ESD ENTRY
         ITRACE ID=FREE_ESD,                                           +
               RDATA1=R1
         USING ESD_DSECT,R1                   DEFINE BASE
         LTR   R1,R1                          ANY ESD ENTRIES?
         BZ    MAIN0330                       NO
MAIN0320 DS    0H
         L     R2,ESD_NEXT                    NEXT ENTRY
         ITRACE ID=ESD,                       FREEING ESD BLOCK        +
               RDATA1=R1                      .. BLOCK'S ADDRESS
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=ESD_DSECT_L
         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0320                       LOOP
MAIN0330 DS    0H
         XC    COMM_ESD_PREV,COMM_ESD_PREV
         XC    COMM_ESD_NEXT,COMM_ESD_NEXT
         XC    COMM_ESD_NBR,COMM_ESD_NBR
* ------------------------------------------------------------------- *
*        Free TEXT storage                                            *
* ------------------------------------------------------------------- *
         ICM   R1,15,COMM_CSECT_TEXT          TEXT'S STORAGE ADRESS
         BZ    MAIN0340                       NOT ACQUIRED
         L     R2,COMM_CSECT_LENGTH           STORAGE SIZE
         ITRACE ID=FREETEXT,                  FREEING TEXT'S STORAGE   +
               RDATA1=R1,                     .. TEXT'S ADDRESS        +
               RDATA2=R2                      .. TEXT'S LENGTH
         LTR   R1,R1                          TEXT ACQUIRED?
         BZ    MAIN0340                       NO
         FREEMAIN RU,                         FREE TEXT'S STORAGE      +
               A=(1),                                                  +
               LV=(R2)
         XC    COMM_CSECT_TEXT,COMM_CSECT_TEXT
* ------------------------------------------------------------------- *
*        Free USING chain                                             *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         L     R1,COMM_USING_NEXT             FIRST USING BLOCK
         ITRACE ID=FREEUSNG,                  FREEING USING BLOCK      +
               RDATA1=R1                      .. BLOCK'S ADDRESS
         LTR   R1,R1                          ANY USING BLOCKS?
         BZ    MAIN0360                       NO
         USING USING_DSECT,R1                 DEFINE BASE
MAIN0350 DS    0H
         L     R2,USING_NEXT                  NEXT BLOCK ON CHAIN
         ITRACE ID=USING,                     FREEING USING BLOCK      +
               RDATA1=R1                      .. BLOCK'S ADDRESS
         FREEMAIN RU,                         FREE THE BLOCK           +
               A=(1),                                                  +
               LV=USING_DSECT_L
         LTR   R1,R2                          COPY ADDRESS
         BNZ   MAIN0350                       FREE ALL BLOCKS
         XC    COMM_USING_PREV,COMM_USING_PREV
         XC    COMM_USING_NEXT,COMM_USING_NEXT
* ------------------------------------------------------------------- *
*        Free BASE chain                                              *
* ------------------------------------------------------------------- *
MAIN0360 DS    0H
         L     R1,COMM_BASE_NEXT              FIRST BASE BLOCK
         ITRACE ID=FREEBASE,                  FREEING BASE BLOCK       +
               RDATA1=R1                      .. BLOCK'S ADDRESS
         USING BASE_DSECT,R1                  DEFINE BASE
         LTR   R1,R1                          ANY BASE BLOCKS TO FREE?
         BZ    MAIN0400                       NO
MAIN0380 DS    0H
         L     R2,BASE_NEXT                   NEXT BLOCK'S ADDRESS
         ITRACE ID=BASE,                      FREEING BASE BLOCK       +
               RDATA1=R1                      .. BLOCK'S ADDRESS
         FREEMAIN RU,                         FREE BASE BLOCK STORAGE  +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0380                       LOOP
         XC    COMM_BASE_PREV,COMM_BASE_PREV
         XC    COMM_BASE_NEXT,COMM_BASE_NEXT
* ------------------------------------------------------------------- *
*        Free RLD ITEM CHAIN                                          *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ICM   R3,15,COMM_RLD_AREA_NEXT       FIRST AREA
         BZ    MAIN0410                       NO RLD ITEMS
         ITRACE ID=FREE_RLD,                                           +
               RDATA1=R3
         BAL   R9,MAIN0430
         XC    COMM_RLD_AREA_PREV,COMM_RLD_AREA_PREV
         XC    COMM_RLD_AREA_NEXT,COMM_RLD_AREA_NEXT
* ------------------------------------------------------------------- *
*        FREE USER AREA CHAIN                                         *
* ------------------------------------------------------------------- *
MAIN0410 DS    0H
         ICM   R3,15,COMM_USER_AREA_NEXT_1    FIRST USER AREA
         BZ    MAIN0420                       NO USER AREAS
         ITRACE ID=FREEUSER,                                           +
               RDATA1=R3
         BAL   R9,MAIN0430
         XC    COMM_USER_AREA_PREV_1,COMM_USER_AREA_PREV_1
         XC    COMM_USER_AREA_NEXT_1,COMM_USER_AREA_NEXT_1
* ------------------------------------------------------------------- *
*        FREE 'ALL' AREA CHAIN                                        *
* ------------------------------------------------------------------- *
MAIN0420 DS    0H
         ICM   R3,15,COMM_ALL_AREA_NEXT       FIRST 'ALL' AREA
         BZ    MAIN0450                       NO 'ALL' AREAS
         ITRACE ID=FREE_ALL,                                           +
               RDATA1=R3
         BAL   R9,MAIN0430
         XC    COMM_ALL_AREA_PREV,COMM_ALL_AREA_PREV
         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT
         B     MAIN0450
* ------------------------------------------------------------------- *
*        FREE an AREA chain                                           *
* ------------------------------------------------------------------- *
MAIN0430 DS    0H
         USING AREA_DSECT,R3                  DEFINE BASE
         ICM   R1,15,AREA_LABEL               LABEL PRESENT?
         BZ    MAIN0440                       NO
         ITRACE ID=FREELABL,                                           +
               RDATA1=R1
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
MAIN0440 DS    0H
         ITRACE ID=AREA,                      FREEING DATA BLOCK       +
               RDATA1=R1,                     .. BLOCK'S ADDRESS       +
               DATA2=AREA_LABEL               .. LABEL'S ADDRESS
         LR    R1,R3                          COPY AREA BLOCK ADDRESS
         L     R3,AREA_NEXT                   NEXT BLOCK'S ADDRESS
         FREEMAIN RU,                         FREE AREA BLOCK STORAGE  +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R3,R3                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0430                       LOOP
         BR    R9
* ------------------------------------------------------------------- *
*        Free DSECT (and their LABELs)                                *
* ------------------------------------------------------------------- *
MAIN0450 DS    0H
         L     R3,COMM_DSECT_NEXT             FIRST DSECT BLOCK
         ITRACE ID=FREEDSCT,                                           +
               RDATA1=R3
         LTR   R3,R3
         BZ    MAIN0510                       NO DSECT BLOCK'S TO FREE
         USING DSECT_DSECT,R3                 DEFINE BASE
MAIN0460 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL IN THIS DSECT
         USING LABEL_DSECT,R4                 DEFINE BASE
         BZ    MAIN0500                       NO LABEL BLOCKS TO FREE
MAIN0470 DS    0H
         ICM   R1,15,LABEL_EQU_NEXT           FIRST EQUATE BLOCK
         BZ    MAIN0490                       NO EQUATE BLOCKS
         USING EQU_DSECT,R1                   DEFINE BASE
MAIN0480 DS    0H
         L     R2,EQU_NEXT                    NEXT EQUATE BLOCK'S ADDR
         ITRACE ID=FREEEQU,                   FREEING AN EQU BLOCK     +
               DATA1=EQU_LABEL,               .. EQUATE NAME           +
               RDATA2=R1                      .. EQU BLOCK ADDRESS
         FREEMAIN RU,                         FREE EQUATE BLOCK        +
               A=(1),                                                  +
               LV=EQU_DSECT_L
         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0480                       LOOP
MAIN0490 DS    0H
         L     R2,LABEL_NEXT                  NEXT LABEL BLOCK'S ADDR
         ITRACE ID=FREELABL,                  FREEING A LABEL BLOCK    +
               DATA1=LABEL_NAME,              .. LABEL NAME            +
               RDATA2=R4                      .. BLOCK'S ADDRESS
         FREEMAIN RU,                         FREE LABEL BLOCK STORAGE +
               A=(R4),                                                 +
               LV=LABEL_DSECT_L
         LTR   R4,R2                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0470                       LOOP
MAIN0500 DS    0H
         L     R2,DSECT_NEXT                  NEXT BLOCK'S ADDRESS
         ITRACE ID=FREEDSCT,                  FREEING DSECT BLOCK      +
               DATA1=DSECT_NAME,              .. DSECT NAME            +
               RDATA2=R3                      .. BLOCK'S ADDRESS
         FREEMAIN RU,                         FREE DSECT BLOCK STORAGE +
               A=(R3),                                                 +
               LV=DSECT_DSECT_L
         LTR   R3,R2                          COPY NEXT BLOCK'S ADDRESS
         BNZ   MAIN0460                       LOOP
MAIN0510 DS    0H
         XC    COMM_DSECT_PREV,COMM_DSECT_PREV
         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BZR   R8                             NOT LOADED
         ITRACE ID=DEL_OP,                                             +
               DATA1=COMM_OPCODE_TABLE_NAME
         DELETE EPLOC=COMM_OPCODE_TABLE_NAME  DELETE OPCODE TABLE
         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME
         L     R15,V_DISMSG                   DISMSG ENTRY POINT
         BALR  R14,R15                        BUILD MESSAGE(S)
         LA    R2,COMM_MSG_1                  1ST MESSAGE
         LA    R3,5                           MAX MSGS
MSG0010  DS    0H
         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?
         BER   R9                             YES
         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE
         BAL   R8,PRT0000                     PRINT MESSAGE
         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE
         BCT   R3,MSG0010
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND
         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT
         BALR  R14,R15                        LINK TO PRINT MODULE
         BR    R8                             RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         GETMAIN RU,                                                   +
               LV=WTO01_L,                                             +
               LOC=BELOW
         LR    R2,R1
         MVC   0(WTO01_L,R2),WTO01            COPY WTO
         WTO   MF=(E,(R2))                    ISSUE WTO
         FREEMAIN RU,                                                  +
               A=(R2),                                                 +
               LV=WTO01_L
         MVI   COMM_RC,12
         B     EXIT0000
ERR0020  DS    0H
         MVI   COMM_MSG_ID,4                  DISIN DD NOT PRESENT
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
ERR0030  DS    0H
         MVI   COMM_MSG_ID,5                  DISMOD DD NOT PRESENT
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
ERR0040  DS    0H
         ITRACE ID=KSDS_ERR
         MVI   COMM_MSG_ID,13                 DISMOD DD NOT PRESENT
         STC   R15,COMM_INFO_01               SAVE RC
         MVC   COMM_INFO_02(L'KSDS_DDNAME),KSDS_DDNAME
         MVC   COMM_INFO_03(L'KSDS_DSNAME),KSDS_DSNAME
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
ERR0050  DS    0H
         ITRACE ID=PARM_ERR
         MVI   COMM_MSG_ID,6                  ERROR(S) IN PARMS
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
ERR0060  DS    0H
         ITRACE ID=BIND_ERR
         MVI   COMM_MSG_ID,7                  ERROR(S) FROM BINDER
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
ERR0070  DS    0H
         ITRACE ID=BIND_ERR
         MVI   COMM_MSG_ID,9                  ERROR(S) FROM BINDER
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVI   COMM_RC,8
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT0000
         BAL   R8,MAIN0300                    DO CLEAN-UP
         ICM   R7,15,COMM_KSDS_NEXT           ANY DSECT KSDS?
         BZ    EXIT0040                       NO
EXIT0010 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN
         BNO   EXIT0020                       NOT OPEN
         LA    R2,KSDS_ACB                    ACB'S ADDRESS
         ITRACE ID=CLSEKSDS,                                           +
               DATA1=KSDS_DDNAME,                                      +
               RDATA2=R2
         CLOSE ((R2)),                                                 +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         NI    KSDS_FLAGS,255-$KSDS_OPEN
EXIT0020 DS    0H
         ITRACE ID=NEXTKSDS,                                           +
               RDATA1=R7,                                              +
               DATA2=KSDS_NEXT
         ICM   R7,15,KSDS_NEXT
         BNZ   EXIT0010
EXIT0030 DS    0H
         TM    COMM_DDS,$DISPRINT_DD          DISPRINT DD PRESENT?
         BNO   EXIT0040                       NO
         ITRACE ID=CLSEPRNT
         CLOSE DISPRINT_DCB,                  CLOSE DISPRINT           +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
EXIT0040 DS    0H
         TM    COMM_DDS,$DISDEBUG_DD          DISDEBUG PRESENT?
         BNO   EXIT0050
         ITRACE ID=CLSEDBUG
         CLOSE DISDEBUG_DCB,                  CLOSE DISDEBUG           +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
EXIT0050 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        SET RC
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START      DC    Q(DXDBMAIN)
DISMOD         DC    CL8'DISMOD'
DISOP          DC    CL8'DISOP'
XFFFF          DC    X'FFFFFFFF'

WTO01          WTO   'DISPRINT DD is required',                        +
               MF=L
WTO01_L        EQU   *-WTO01

MSG01          DS    0C
               DC    C'DISBMAIN01I   Calling DISPARM'
MSG01_L        EQU   *-MSG01

MSG02          DS    0C
               DC    C'DISBMAIN02I   Returned from DISPARM'
MSG02_L        EQU   *-MSG02

MSG03          DS    0C
               DC    C'DISBMAIN03I   Opcode table in use is '
MSG03_OPCODE   DC    CL8' '
MSG03_L        EQU   *-MSG03

MSG04          DS    0C
               DC    C'DISBMAIN04I   Starting BINDER dialog '
MSG04_L        EQU   *-MSG04

MSG05          DS    0C
               DC    C'DISBMAIN03I   Returned from start dialog'
MSG05_L        EQU   *-MSG05

MSG06          DS    0C
               DC    C'DISBMAIN04I   Calling BINDER for section names'
MSG06_L        EQU   *-MSG06

MSG07          DS    0C
               DC    C'DISBMAIN05I   Returned from GETNAMES'
MSG07_L        EQU   *-MSG07

MSG08          DS    0C
               DC    C'DISBMAIN08I   Calling DISBIND to list sections'
MSG08_L        EQU   *-MSG08

MSG09          DS    0C
               DC    C'DISBMAIN09I   Returned from listing names'
MSG09_L        EQU   *-MSG09

MSG12          DS    0C
               DC    C'DISBMAIN12I   Calling DISBIND to obtain RLD info+
               '
MSG12_L        EQU   *-MSG12

MSG13          DS    0C
               DC    C'DISBMAIN13I   Returned from DISBIND with RLD inf+
               o'
MSG13_L        EQU   *-MSG13

MSG14          DS    0C
               DC    C'DISBMAIN14I   Calling DISBIND to read text'
MSG14_L        EQU   *-MSG14

MSG15          DS    0C
               DC    C'DISBMAIN15I   Returned from DISBIND with text'
MSG15_L        EQU   *-MSG15

MSG16          DS    0C
               DC    C'DISBMAIN16I   Calling DISELIST'
MSG16_L        EQU   *-MSG16

MSG17          DS    0C
               DC    C'DISBMAIN17I   Returned from DISELIST'
MSG17_L        EQU   *-MSG17

MSG18          DS    0C
               DC    C'DISBMAIN18I   Calling DISRLIST'
MSG18_L        EQU   *-MSG18

MSG19          DS    0C
               DC    C'DISBMAIN19I   Returned from DISRLIST'
MSG19_L        EQU   *-MSG19

MSG20          DS    0C
               DC    C'DISBMAIN20I   Calling DISTLSTB'
MSG20_L        EQU   *-MSG20

MSG21          DS    0C
               DC    C'DISBMAIN21I   Returned from DISTLSTB'
MSG21_L        EQU   *-MSG21

MSG24          DS    0C
               DC    C'DISBMAIN24I   Calling DISASSEM'
MSG24_L        EQU   *-MSG24

MSG25          DS    0C
               DC    C'DISBMAIN25I   Returned from DISASSEM'
MSG25_L        EQU   *-MSG25

MSG26          DS    0C
               DC    C'DISBMAIN26I   Calling DISDSECT'
MSG26_L        EQU   *-MSG26

MSG27          DS    0C
               DC    C'DISBMAIN27I   Returned from DISDSECT'
MSG27_L        EQU   *-MSG27

MSG28          DS    0C
               DC    C'DISBMAIN28I   Calling DISDMERG'
MSG28_L        EQU   *-MSG28

MSG29          DS    0C
               DC    C'DISBMAIN29I   Returned from DISDMERG'
MSG29_L        EQU   *-MSG29

MSG30          DS    0C
               DC    C'DISBMAIN30I   Calling DISSCAN'
MSG30_L        EQU   *-MSG30

MSG31          DS    0C
               DC    C'DISBMAIN31I   Returned from DISSCAN'
MSG31_L        EQU   *-MSG31

MSG32          DS    0C
               DC    C'DISBMAIN32I   Calling DISVBU'
MSG32_L        EQU   *-MSG32

MSG33          DS    0C
               DC    C'DISBMAIN33I   Returned from DISVBU'
MSG33_L        EQU   *-MSG33

MSG34          DS    0C
               DC    C'DISBMAIN34I   Calling DISREF'
MSG34_L        EQU   *-MSG34

MSG35          DS    0C
               DC    C'DISBMAIN35I   Returned from DISREF'
MSG35_L        EQU   *-MSG35

MSG36          DS    0C
               DC    C'DISBMAIN36I   Calling DISGEN'
MSG36_L        EQU   *-MSG36

MSG37          DS    0C
               DC    C'DISBMAIN37I   Returned from DISGEN'
MSG37_L        EQU   *-MSG37

MSG80          DS    0C
               DC    C'DISBMAIN80I   Calling DISDEBUG'
MSG80_L        EQU   *-MSG80
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBMAIN       DSECT
               DS    18F             REGISTER SAVE AREA
DXD_CSECT      DS    CL8

DXD_FLAGS      DS    X
$DIALOG_ACTIVE EQU   X'80'           .. BINDER DIALOG ACTIVE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU

               END      DISBMAIN
./ ADD NAME=DISCOMM  0104-07038-09107-1320-00029-00016-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  MODULE NAME: DISCOMM                                              *
*                                                                    *
*  Function:                                                         *
*              Common data module and trace table.                   *
*              At initialization time, the mainline module, DISASM01,*
*              sets R11 to the address of DISASM00.  All other       *
*              modules depend on this address remaining unchanged.   *
*                                                                    *
*--------------------------------------------------------------------*
DISCOMM  DISCOMM  TYPE=CSECT

*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
         COPY  DISASMDA

*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
         IFGACB  AM=VSAM
ACB_L    EQU     *-IFGACB

*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
         COPY  REGEQU
         END   DISCOMM
./ ADD NAME=DISCONF  0102-09119-09198-0836-01124-01073-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISCONF                                              *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   Save or restore saved config info                                *
*                                                                    *
*--------------------------------------------------------------------*
DISCONF  CSECT
DISCONF  AMODE 31
DISCONF  RMODE ANY
         USING DISCONF,R11,R10
         USING DISCOMM,R12
         USING DCBE,CONF_DCBE
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISCONF'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDCONF,R13
         USING DECB,COMM_DECB
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         MVI   SPF_FUNCTION,C' '              RESET FUNCTION
         GETMAIN RU,                                                   +
               LV=$BUFF_SIZE,                                          +
               LOC=BELOW
         ST    R1,DXD_IO_AREA                 SAVE I/O AREA ADDR
         ITRACE ID=IO_AREA,                                            +
               RDATA1=R1
         LA    R7,CONF_DCB                    DCB ADDR
         USING IHADCB,R7
         LA    R1,MAIN0390                    EOD POINT
         ST    R1,DCBEEODA                    SET EOD ADDRES
MAIN0010 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,=CL8'DISCONF'   SET PANEL NAME
         L     R15,V_DISDISP
         BALR  R14,R15                        DISPLAY CONFIG
         MVC   SPF_MSG_1,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_2,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_3,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_4,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_5,COMM_BLANKS          CLEAR MESSAGE
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        RC = 0?
         BNZ   EXIT0000                       NO
         OC    SPF_CONF_DSN,COMM_BLANKS       'TRANSLATE' NAME
         OC    SPF_CONF_MEMBER,COMM_BLANKS
         OC    SPF_CONF_VOLSER,COMM_BLANKS
         CLC   SPF_CONF_DSN,COMM_BLANKS       BLANK?
         BE    ERR0010                        YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   COMM_DSINFO_DSN,SPF_CONF_DSN   COPY NEW DSN
         L     R15,V_DISDINFO
         BALR  R14,R15                        DETERMINE DS INFO
         LTR   R15,R15                        SUCCESSFUL?
         BZ    MAIN0020                       YES
         MVC   SPF_MSG_1(L'COMM_DSINFO_MSG),COMM_DSINFO_MSG
         B     MAIN0010                       DISPLAY W/MSG
MAIN0020 DS    0H
         ITRACE ID=DS_TYPE,                                            +
               DATA1=COMM_DATASET_TYPE
         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS
         BNE   ERR0020                        NOT A PDS
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         OI    SPF_FUNCTION,C' '
         CLI   SPF_FUNCTION,C' '              BLANK?
         BE    ERR0030                        YES
         CLI   SPF_FUNCTION,C'R'              RESTORE SAVED INFO?
         BE    MAIN0030                       YES
         CLI   SPF_FUNCTION,C'S'              SAVE INFO?
         BE    MAIN1000                       YES
         B     ERR0040                        FIRST ON CHAIN
*---------------------------------------------------------------------*
*                                                                     *
*        Restore a config                                             *
*                                                                     *
*        DO NOT RESTORE                                               *
*         Load module library                                         *
*         LMOD                                                        *
*         CSECT                                                       *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0030 DS    0H
         ITRACE ID=RESTORE
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,=CL8'DISCONF'     SET DD NAME
         MVC   COMM_DAIR_DSN,SPF_CONF_DSN     SET DSN
         MVC   COMM_DAIR_VOLSER,SPF_CONF_VOLSER  SET VOLSER
         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         L     R15,V_DISDAIR
         BALR  R14,R15                        ALLOCATE CONFIG
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0050                        NO
         ITRACE ID=OPEN
         OPEN  ((R7),INPUT),                  OPEN CONFIG DATA SET     +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         ITRACE ID=FIND,                                               +
               DATA1=SPF_CONF_MEMBER
         FIND  (R7),                          FIND THE MEMBER          +
               SPF_CONF_MEMBER,                                        +
               D
         ITRACE ID=FIND_RC,                                            +
               RDATA1=R15
         LTR   R2,R15                         SUCCESSFUL?
         BZ    MAIN0035                       YES
         CLOSE ((R7)),                        CLOSE CONFIG DCB         +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         B     ERR0060                        GO BUILD MESSAGE
*---------------------------------------------------------------------*
*        Free user defined data area(s)                               *
*---------------------------------------------------------------------*
MAIN0035 DS    0H
         ICM   R2,15,COMM_USER_AREA_NEXT_1    FIRST AREA
         BZ    MAIN0070
         ITRACE ID=FREEDATA
         USING AREA_DSECT,R2
         XC    COMM_USER_AREA_NEXT_1,COMM_USER_AREA_NEXT_1
MAIN0040 DS    0H
         ICM   R1,15,AREA_REF_LABEL1          LABEL ASSIGNED?
         BZ    MAIN0050
         ITRACE ID=FREEREF1
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
MAIN0050 DS    0H
         ICM   R1,15,AREA_REF_LABEL2          LABEL ASSIGNED?
         BZ    MAIN0060
         ITRACE ID=FREEREF2
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
MAIN0060 DS    0H
         LR    R1,R2
         ICM   R2,15,AREA_NEXT
         FREEMAIN RU,                         FREE AREA BLOCK          +
               A=(R1),                                                 +
               LV=AREA_DSECT_L
         LTR   R2,R2                          ANOTHER AREA?
         BNZ   MAIN0040                       YES
         DROP  R2
*---------------------------------------------------------------------*
*        Free Base(s)                                                 *
*---------------------------------------------------------------------*
MAIN0070 DS    0H
         ICM   R2,15,COMM_BASE_NEXT           FIRST BASE
         BZ    MAIN0090
         ITRACE ID=FREEBASE
         USING BASE_DSECT,R2
         XC    COMM_BASE_NEXT,COMM_BASE_NEXT
MAIN0080 DS    0H
         LR    R1,R2
         ICM   R2,15,BASE_NEXT
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R2,R2
         BNZ   MAIN0080
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0090 DS    0H
         ICM   R2,15,COMM_USING_NEXT          FIRST USING
         BZ    MAIN0110
         ITRACE ID=FREEUSNG
         USING USING_DSECT,R2
         XC    COMM_USING_NEXT,COMM_USING_NEXT
MIAN0100 DS    0H
         LR    R1,R2
         ICM   R2,15,USING_NEXT
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=USING_DSECT_L
         LTR   R2,R2
         BNZ   MIAN0100
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0110 DS    0H
         ICM   R2,15,COMM_ASM_NEXT            FIRST ASSEMBLER SOURCE
         BZ    MAIN0130
         ITRACE ID=FREE_ASM
         USING ASM_DSECT,R2
         XC    COMM_ASM_NEXT,COMM_ASM_NEXT
MAIN0120 DS    0H
         LR    R1,R2
         ICM   R2,15,ASM_NEXT
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=ASM_DSECT_L
         LTR   R2,R2
         BNZ   MAIN0120
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0130 DS    0H
         ITRACE ID=RESET
         XC    DXD_FIRST_DATAAREA,DXD_FIRST_DATAAREA
         XC    DXD_LAST_DATAAREA,DXD_LAST_DATAAREA
         XC    DXD_FIRST_BASE,DXD_FIRST_BASE
         XC    DXD_LAST_BASE,DXD_LAST_BASE
         XC    DXD_FIRST_USING,DXD_FIRST_USING
         XC    DXD_LAST_USING,DXD_LAST_USING
         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS
         XC    DXD_LAST_KSDS,DXD_LAST_KSDS
         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB
         XC    DXD_LAST_SYSLIB,DXD_LAST_SYSLIB
         XC    DXD_FIRST_ASM,DXD_FIRST_ASM
         XC    DXD_LAST_ASM,DXD_LAST_ASM
*---------------------------------------------------------------------*
*                                                                     *
*        R7   DCB address                                             *
*        R6   I/O area address                                        *
*        R5   Data length                                             *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0140 DS    0H
         ITRACE ID=READ
         XC    COMM_DECB(COMM_DECB_L),COMM_DECB  INITIALIZE DECB
         L     R6,DXD_IO_AREA                    I/O AREA ADDRESS
         USING CONFIG_RECORD,R6
         READ  COMM_DECB,                        READ                  +
               SF,                                                     +
               (R7),                             .. DCB ADDR           +
               (R6),                             .. I/O AREA ADDR      +
               'S',                                                    +
               MF=E
         ITRACE ID=WAIT
         CHECK COMM_DECB
         ITRACE ID=RUNNING
         L     R1,DECIOBPT                       IOB ADDRESS
         USING IOBSTDRD,R1                       DEFINE IOB BASE
         LH    R5,DCBBLKSI                       BLOCK SIZE
         SR    R0,R0                             CLEAR R1
         ICM   R0,3,IOBSTDRD+14                  RESIDUAL LENGTH
         SR    R5,R0                             LENGTH READ
*---------------------------------------------------------------------*
*                                                                     *
*        Determine record type                                        *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0150 DS    0H
         ITRACE ID=RECORD,                                             +
               RDATA1=R6,                                              +
               DATA2=CONFIG_TYPE
         CLI   CONFIG_TYPE,$CONFIG_OP_TABLE      OPCODE TABLE?
         BE    MAIN0160                          YES
         CLI   CONFIG_TYPE,$CONFIG_DATAAREA      DATA AREA?
         BE    MAIN0180                          YES
         CLI   CONFIG_TYPE,$CONFIG_BASE          BASE?
         BE    MAIN0210                          YES
         CLI   CONFIG_TYPE,$CONFIG_USING         USING?
         BE    MAIN0240                          YES
         CLI   CONFIG_TYPE,$CONFIG_DSECT_KSDS    DSECT DATA KSDS?
         BE    MAIN0270                          YES
         CLI   CONFIG_TYPE,$CONFIG_SYSLIB        SYSLIB?
         BE    MAIN0300                          YES
         CLI   CONFIG_TYPE,$CONFIG_PREFIX_LENGTH LABEL PREFIX LENGTH?
         BE    MAIN0330                          YES
         CLI   CONFIG_TYPE,$CONFIG_PREFIX        LABEL PREFIX?
         BE    MAIN0340                          YES
         CLI   CONFIG_TYPE,$CONFIG_ASM_SOURCE    ASSEMBLER SOURCE?
         BE    MAIN0350                          YES
         CLI   CONFIG_TYPE,$CONFIG_OUTPUT_DSN    OUTPUT DSN?
         BE    MAIN0375                          YES
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0160 DS    0H
         ITRACE ID=OP
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BZ    MAIN0170                          NO TABLE TO DELETE
         DELETE EPLOC=COMM_OPCODE_TABLE_NAME     DELETE CURRENT TABLE
MAIN0170 DS    0H
         MVC   COMM_OPCODE_TABLE_NAME,CONFIG_DATA
         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME      LOAD NEW TABLE
         ST    R0,COMM_OPCODE_TABLE_ADDR
         B     MAIN0380
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0180 DS    0H
         ITRACE ID=DATAAREA
         CLC   COMM_CSECT_LENGTH,CONFIG_DATA+(AREA_BEGIN-AREA_EYE)
         BL    MAIN0205
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
NEW      USING AREA_DSECT,R1
         ICM   R4,15,DXD_LAST_DATAAREA           LAST DATA AREA
         BZ    MAIN0190
PREV     USING AREA_DSECT,R4
         ST    R1,PREV.AREA_NEXT                 SET NEXT
MAIN0190 DS    0H
         ST    R4,NEW.AREA_PREV                  SET PREV
         XC    NEW.AREA_NEXT,NEW.AREA_NEXT
         MVC   NEW.AREA_EYE(AREA_DSECT_L-(AREA_EYE-AREA_DSECT)),CONFIG_+
               DATA
         XC    NEW.AREA_OPCODE,NEW.AREA_OPCODE
         XC    NEW.AREA_REF_LABEL1,NEW.AREA_REF_LABEL1
         XC    NEW.AREA_REF_DISP1,NEW.AREA_REF_DISP1
         XC    NEW.AREA_REF_LABEL2,NEW.AREA_REF_LABEL2
         XC    NEW.AREA_REF_DISP2,NEW.AREA_REF_DISP2
         OC    DXD_FIRST_DATAAREA,DXD_FIRST_DATAAREA
         BNZ   MAIN0200
         ST    R1,DXD_FIRST_DATAAREA
MAIN0200 DS    0H
         ST    R1,DXD_LAST_DATAAREA              SAVE ADDRESS
         CLC   NEW.AREA_END,COMM_CSECT_LENGTH    BEYOND END OF CSECT?
         BNH   MAIN0380                          NO
         MVC   NEW.AREA_END,COMM_CSECT_LENGTH    LIMIT TO CSECT LENGTH
         MVC   COMM_MSG_1(MSG06_L),MSG06
         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_BEGIN-AREA_EYE)(5)
         TR    COMM_INFO_01(8),HEXCHAR
         MVC   COMM_MSG_1+(MSG06_B-MSG06)(8),COMM_INFO_01
         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_END-AREA_EYE)(5)
         TR    COMM_INFO_01(8),HEXCHAR
         MVC   COMM_MSG_1+(MSG06_E-MSG06)(8),COMM_INFO_01
         B     MAIN0380
MAIN0205 DS    0H
         MVC   COMM_MSG_1(MSG07_L),MSG07
         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_BEGIN-AREA_EYE)(5)
         TR    COMM_INFO_01(8),HEXCHAR
         MVC   COMM_MSG_1+(MSG07_B-MSG07)(8),COMM_INFO_01
         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_END-AREA_EYE)(5)
         TR    COMM_INFO_01(8),HEXCHAR
         MVC   COMM_MSG_1+(MSG07_E-MSG07)(8),COMM_INFO_01
         BAL   R8,TPUT0000
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0210 DS    0H
         ITRACE ID=BASE
         GETMAIN RU,                                                   +
               LV=BASE_DSECT_L,                                        +
               LOC=ANY
NEW      USING BASE_DSECT,R1
         ICM   R4,15,DXD_LAST_BASE               LAST BASE AREA
         BZ    MAIN0220
PREV     USING BASE_DSECT,R4
         ST    R1,PREV.BASE_NEXT                 SET NEXT
MAIN0220 DS    0H
         ST    R4,NEW.BASE_PREV                  SET PREV
         XC    NEW.BASE_NEXT,NEW.BASE_NEXT
         MVC   NEW.BASE_EYE(BASE_DSECT_L-(BASE_EYE-BASE_DSECT)),CONFIG_+
               DATA
         MVI   NEW.BASE_FLAGS,0                  RESET FLAGS
         OC    DXD_FIRST_BASE,DXD_FIRST_BASE     ANY ON CHAIN NOW?
         BNZ   MAIN0230                          YES
         ST    R1,DXD_FIRST_BASE                 SET FIRST ON CHAIN
MAIN0230 DS    0H
         ST    R1,DXD_LAST_BASE                  SAVE LAST ON NEW CHAIN
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0240 DS    0H
         ITRACE ID=USING
         GETMAIN RU,                                                   +
               LV=USING_DSECT_L,                                       +
               LOC=ANY
NEW      USING USING_DSECT,R1
         ICM   R4,15,DXD_LAST_USING              LAST USING AREA
         BZ    MAIN0250
PREV     USING USING_DSECT,R4
         ST    R1,PREV.USING_NEXT                SET NEXT
MAIN0250 DS    0H
         ST    R4,NEW.USING_PREV                 SET PREV
         XC    NEW.USING_NEXT,NEW.USING_NEXT
         MVC   NEW.USING_EYE(USING_DSECT_L-(USING_EYE-USING_DSECT)),CON+TA
               FIG_DATA
         MVI   NEW.USING_FLAG,0                  RESET FLAGS
         XC    NEW.USING_DSECT_ADDR,NEW.USING_DSECT_ADDR
         XC    NEW.USING_DSECT_LABEL,NEW.USING_DSECT_LABEL
         OC    DXD_FIRST_USING,DXD_FIRST_USING   SOMETHING ON CHAIN?
         BNZ   MAIN0260                          YES
         ST    R1,DXD_FIRST_USING                SET FIRST ON CHAIN
MAIN0260 DS    0H
         ST    R1,DXD_LAST_USING                 SAVE LAST ON CHAIN
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0270 DS    0H
         ITRACE ID=KSDS
         GETMAIN RU,                                                   +
               LV=KSDS_DSECT_L,                                        +
               LOC=ANY
NEW      USING KSDS_DSECT,R1
         ICM   R4,15,DXD_LAST_KSDS               LAST KSDS AREA
         BZ    MAIN0280
PREV     USING KSDS_DSECT,R4
         ST    R1,PREV.KSDS_NEXT                 SET NEXT
MAIN0280 DS    0H
         ST    R4,NEW.KSDS_PREV                  SET PREV
         XC    NEW.KSDS_NEXT,NEW.KSDS_NEXT
         MVC   NEW.KSDS_EYE(KSDS_DSECT_L-(KSDS_EYE-KSDS_DSECT)),CONFIG_+
               DATA
         MVC   NEW.KSDS_ACB(ACB_L),ACB_I         COPY ACB
         MVI   NEW.KSDS_FLAGS,0
         OC    DXD_FIRST_KSDS,DXD_FIRST_KSDS     ANY ON CHAIN NOW?
         BNZ   MAIN0290                          NO
         ST    R1,DXD_FIRST_KSDS                 SET 1ST ON NEW CHAIN
MAIN0290 DS    0H
         ST    R1,DXD_LAST_KSDS                  SAVE LAST ON NEW CHAIN
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0300 DS    0H
         ITRACE ID=SYSLIB
         GETMAIN RU,                                                   +
               LV=SYSLIB_DSECT_L,                                      +
               LOC=ANY
NEW      USING  SYSLIB_DSECT,R1
         ICM   R4,15,DXD_LAST_SYSLIB             LAST SYSLIB AREA
         BZ    MAIN0310
PREV     USING  SYSLIB_DSECT,R4
         ST    R1,PREV.SYSLIB_NEXT               SET NEXT
MAIN0310 DS    0H
         ST    R4,NEW.SYSLIB_PREV                SET PREV
         XC    NEW.SYSLIB_NEXT,NEW.SYSLIB_NEXT
         MVC   NEW.SYSLIB_EYE(SYSLIB_DSECT_L-(SYSLIB_EYE-SYSLIB_DSECT))+
               ,CONFIG_DATA
         MVC   NEW.SYSLIB_DDNAME,COMM_BLANKS
         OC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB ANY ON CHAIN NOW?
         BNZ   MAIN0320                          NO
         ST    R1,DXD_FIRST_SYSLIB               SET 1ST ON NEW CHAIN
MAIN0320 DS    0H
         ST    R1,DXD_LAST_SYSLIB                SAVE LAST ON NEW CHAIN
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0330 DS    0H
         ITRACE ID=PRE_LEN
         MVC   COMM_PREFIX_LENGTH,CONFIG_DATA
         B     MAIN0380
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0340 DS    0H
         ITRACE ID=PREFIX
         MVC   COMM_PREFIX,CONFIG_DATA
         B     MAIN0380
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0350 DS    0H
         ITRACE ID=ASM_SRC
         GETMAIN RU,                                                   +
               LV=ASM_DSECT_L,                                         +
               LOC=ANY
NEW      USING ASM_DSECT,R1
         ICM   R4,15,DXD_LAST_ASM                LAST ASM AREA
         BZ    MAIN0360
PREV     USING ASM_DSECT,R4
         ST    R1,PREV.ASM_NEXT                  SET NEXT
MAIN0360 DS    0H
         ST    R4,NEW.ASM_PREV                   SET PREV
         XC    NEW.ASM_NEXT,NEW.ASM_NEXT
         MVC   NEW.ASM_EYE(ASM_DSECT_L-(ASM_EYE-ASM_DSECT)),CONFIG_DATA
         OC    DXD_FIRST_ASM,DXD_FIRST_ASM
         BNZ   MAIN0370                          NO
         ST    R1,DXD_FIRST_ASM                  SET 1ST ON NEW CHAIN
MAIN0370 DS    0H
         ST    R1,DXD_LAST_ASM                   SAVE LAST ON NEW CHAIN
         B     MAIN0380
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0375 DS    0H
         ITRACE ID=OUT_DSN
         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH DD ALLOCATED?
         BO    MAIN0380                          YES.. CANNOT OVER-RIDE
         MVC   SPF_OUTPUT_DSN,CONFIG_DATA        COPY DSN
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0380 DS    0H
         AH    R6,H256                           PLUS ONE RECORD
         SH    R5,H256                           MINUS ONE RECORD
         BH    MAIN0150
         B     MAIN0140
*---------------------------------------------------------------------*
*                                                                     *
*        EOF on CONFIG file                                           *
*         . CLOSE CONFIG                                              *
*         . De-allocate CONFIG file                                   *
*         . display pre-processed DSECT KSDS libraries                *
*         . display Assembler SYSLIBs                                 *
*         . assemble assembler source                                 *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0390 DS    0H
         ITRACE ID=EOF
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CLOSE ((R7)),                           CLOSE CONFIG DCB      +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=FREECONF
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME
         L     R15,V_DISDAIR
         BALR  R14,R15                           FREE CONFIG
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0050                           NO
*---------------------------------------------------------------------*
*        Display pre-processed DSECT KSDSes                           *
*---------------------------------------------------------------------*
         ITRACE ID=DISPKSDS,                                           +
               RDATA1=R1
         MVC   SPF_MSG_3(MSG02_L),MSG02
         L     R1,DXD_FIRST_KSDS
         L     R15,V_DISKLIST                    DISPLAY KSDS(S)
         BALR  R14,R15
*---------------------------------------------------------------------*
*        Display Assembler SYSLIBs                                    *
*---------------------------------------------------------------------*
         ITRACE ID=SYSLIB,                                             +
               RDATA1=R1
         MVC   SPF_MSG_3(MSG03_L),MSG03
         L     R1,DXD_FIRST_SYSLIB
         L     R15,V_DISSLIST
         BALR  R14,R15                           DISPLAY SYSLIBS
*---------------------------------------------------------------------*
*                                                                     *
*        Assemble any assembler source                                *
*                                                                     *
*---------------------------------------------------------------------*
         ICM   R2,15,DXD_FIRST_ASM               ANY ASSEMBLER SOURCE?
         BZ    MAIN0500                          NO
         USING ASM_DSECT,R2
         ITRACE ID=RE_ASSEM
         MVC   COMM_INFO_01(MSG04_L),MSG04       COPY TO 24-BIT AREA
         TPUT  COMM_INFO_01,MSG04_L              INFORM USER
         STIMER REAL,                            WAIT FOR HALF SECOND  +
               BINTVL=HALF_SECOND
*---------------------------------------------------------------------*
*        OPEN SYSIN                                                   *
*---------------------------------------------------------------------*
         ITRACE ID=OPEN_IN
         OPEN  (SYSIN_DCB,OUTPUT),                                     +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
*---------------------------------------------------------------------*
*        Copy source to SYSIN                                         *
*---------------------------------------------------------------------*
MAIN0400 DS    0H
         ITRACE ID=PUT_SRC,                                            +
               DATA1=ASM_SOURCE+0,                                     +
               DATA2=ASM_SOURCE+8
         PUT   SYSIN_DCB,ASM_SOURCE
         ICM   R2,15,ASM_NEXT
         BNZ   MAIN0400
         DROP  R2
*---------------------------------------------------------------------*
*        CLOSE SYSIN                                                  *
*---------------------------------------------------------------------*
         ITRACE ID=CLOSE_IN
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
*---------------------------------------------------------------------*
*        Allocate SYSLIB                                              *
*---------------------------------------------------------------------*
         ITRACE ID=ALOC_LIB
         MVC   COMM_DAIR_DD,SYSLIB               SET DDNAME
         MVI   COMM_DAIR_FUNC,$DAIR_CONCAT       SET DAIR FUNCTION
         L     R15,V_DISDAIR
         BALR  R14,R15                           CALL DISDAIR
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0050                           NO
*---------------------------------------------------------------------*
*        Assemble/scan output                                         *
*---------------------------------------------------------------------*
         ITRACE ID=ASSM_SRC
         L     R15,V_DISASSEM
         BALR  R14,R15                           RE-ASSEMBLE DSECTS
         ITRACE ID=ASSEM_RC,                                           +
               DATA1=COMM_ASSEMBLER_RC
*        CLC   COMM_ASSEMBLER_RC,H4              RC > 4
*        BNH   MAIN0410                          NO
* ------------------------------------------------------------------- *
*        Obtain data set id for DISPRINT                              *
* ------------------------------------------------------------------- *
         ITRACE ID=LMINIT
         MVC   COMM_SPF_FUNCTION,LMINIT          SPF FUNCTION
         LA    R0,DDID                           DDID
         ST    R0,COMM_SPF_2
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         ST    R0,COMM_SPF_6
         ST    R0,COMM_SPF_7
         ST    R0,COMM_SPF_8
         ST    R0,COMM_SPF_9
         LA    R0,SYSPRINT                       DDNAME
         ST    R0,COMM_SPF_10                    SET DDNAME ADDR
         OI    COMM_SPF_10,X'80'                 SET END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 SPF PARMS
         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT
         BALR  R14,R15                           OBTAIN DDID
         ITRACE ID=LMINITRC,                                           +
               RDATA1=R15,                                             +
               DATA2=SPF_DDID
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0200                           NO
         MVC   DXD_DDID,SPF_DDID                 SAVE DISPRINT DATA ID
* ------------------------------------------------------------------- *
*        CALL BROWSE FOR SYSPRINT                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=BROWSE,                                             +
               DATA1=DXD_DDID
         MVC   COMM_SPF_FUNCTION,BROWSE          SPF FUNCTION
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_2
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         LA    R0,DXD_DDID                       DDID
         ST    R0,COMM_SPF_6                     SET DATA ID ADDR
         OI    COMM_SPF_6,X'80'                  FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 PARMS FOR BROWSE
         L     R15,COMM_ISPLINK
         BALR  R14,R15
*---------------------------------------------------------------------*
*        Deallocate SYSLIB                                            *
*---------------------------------------------------------------------*
MAIN0410 DS    0H
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,SYSLIB               SET DDNAME
         L     R15,V_DISDAIR
         BALR  R14,R15                           CALL DISDAIR
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0050                           NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0500 DS    0H
         MVC   COMM_USER_AREA_NEXT_1,DXD_FIRST_DATAAREA
         MVC   COMM_BASE_NEXT,DXD_FIRST_BASE
         MVC   COMM_USING_NEXT,DXD_FIRST_USING
         MVC   COMM_ASM_NEXT,DXD_FIRST_ASM
         MVC   SPF_MSG_3(MSG01_L),MSG01
         B     EXIT0000                          ALL DONE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1000 DS    0H
         ITRACE ID=SAVE
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME
         MVC   COMM_DAIR_DSN,SPF_CONF_DSN        SET DSN
         MVC   COMM_DAIR_VOLSER,SPF_CONF_VOLSER  SET VOLSER
         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         L     R15,V_DISDAIR
         BALR  R14,R15                           ALLOCATE CONFIG
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0050                           NO
         ITRACE ID=OPEN
         OPEN  ((R7),OUTPUT),                    OPEN CONFIG DATA SET  +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1020 DS    0H
         L     R0,DXD_IO_AREA
         LH    R1,=Y($BUFF_SIZE)
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14
         L     R6,DXD_IO_AREA                    I/O AREA
         SR    R5,R5                             INIT AMOUNT OF DATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BZ    MAIN1025                          NO OPCODE TABLE
         ITRACE ID=OP_TABLE
         MVI   CONFIG_TYPE,$CONFIG_OP_TABLE      DATA TYPE
         MVC   CONFIG_DATA(8),COMM_OPCODE_TABLE_NAME
         BAL   R8,WRITE000                       WRITE THE DATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1025 DS    0H
         ICM   R2,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA
         BZ    MAIN1040
         USING AREA_DSECT,R2
MAIN1030 DS    0H
         ITRACE ID=DATAAREA,                                           +
               RDATA1=R2
         MVI   CONFIG_TYPE,$CONFIG_DATAAREA      DATA TYPE
         MVC   CONFIG_DATA(AREA_DSECT_L-(AREA_EYE-AREA_DSECT)),AREA_EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,AREA_NEXT                   NEXT AREA BLOCK
         BNZ   MAIN1030
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1040 DS    0H
         ICM   R2,15,COMM_BASE_NEXT              FIRST BASE
         BZ    MAIN1060
         USING BASE_DSECT,R2
MAIN1050 DS    0H
         ITRACE ID=BASE,                                               +
               RDATA1=R2
         MVI   CONFIG_TYPE,$CONFIG_BASE          DATA TYPE
         MVC   CONFIG_DATA(BASE_DSECT_L-(BASE_EYE-BASE_DSECT)),BASE_EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,BASE_NEXT                   NEXT BASE BLOCK
         BNZ   MAIN1050
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1060 DS    0H
         ICM   R2,15,COMM_USING_NEXT             FIRST USING
         BZ    MAIN1080
         USING USING_DSECT,R2
MAIN1070 DS    0H
         ITRACE ID=USING,                                              +
               RDATA1=R2
         MVI   CONFIG_TYPE,$CONFIG_USING         DATA TYPE
         MVC   CONFIG_DATA(USING_DSECT_L-(USING_EYE-USING_DSECT)),USING+
               _EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,USING_NEXT                  NEXT USING BLOCK
         BNZ   MAIN1070
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1080 DS    0H
         ICM   R2,15,COMM_KSDS_NEXT              FIRST KSDS
         BZ    MAIN1100
         USING KSDS_DSECT,R2
MAIN1090 DS    0H
         ITRACE ID=KSDS,                                               +
               RDATA1=R2
         MVI   CONFIG_TYPE,$CONFIG_DSECT_KSDS    DATA TYPE
         MVC   CONFIG_DATA(KSDS_DSECT_L-(KSDS_EYE-KSDS_DSECT)),KSDS_EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,KSDS_NEXT                   NEXT KSDS BLOCK
         BNZ   MAIN1090
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1100 DS    0H
         ICM   R2,15,COMM_SYSLIB_NEXT            FIRST SYSLIB
         BZ    MAIN1120
         USING SYSLIB_DSECT,R2
MAIN1110 DS    0H
         ITRACE ID=SYSLIB,                                             +
               RDATA1=R2
         MVI   CONFIG_TYPE,$CONFIG_SYSLIB        DATA TYPE
         MVC   CONFIG_DATA(SYSLIB_DSECT_L-(SYSLIB_EYE-SYSLIB_DSECT)),SY+
               SLIB_EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,SYSLIB_NEXT                 NEXT SYSLIB BLOCK
         BNZ   MAIN1110
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1120 DS    0H
         ITRACE ID=PRFX_LEN
         MVI   CONFIG_TYPE,$CONFIG_PREFIX_LENGTH DATA TYPE
         MVC   CONFIG_DATA(2),COMM_PREFIX_LENGTH
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=PREFIX
         MVI   CONFIG_TYPE,$CONFIG_PREFIX        DATA TYPE
         MVC   CONFIG_DATA(4),COMM_PREFIX
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ICM   R2,15,COMM_ASM_NEXT               FIRST ASSEMBLER SOURCE
         BZ    MAIN1140
         USING ASM_DSECT,R2
MAIN1130 DS    0H
         ITRACE ID=ASM,                                                +
               RDATA2=R2
         MVI   CONFIG_TYPE,$CONFIG_ASM_SOURCE    DATA TYPE
         MVC   CONFIG_DATA(ASM_DSECT_L-(ASM_EYE-ASM_DSECT)),ASM_EYE
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
         ICM   R2,15,ASM_NEXT                    NEXT ASM BLOCK
         BNZ   MAIN1130
         DROP  R2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN1140 DS    0H
         MVI   CONFIG_TYPE,$CONFIG_OUTPUT_DSN    DATA TYPE
         MVC   CONFIG_DATA(44),SPF_OUTPUT_DSN    OUTPUT DATA SET NAME
         BAL   R8,WRITE000                       WRITE TO CONFIG FILE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=LAST,                                               +
               RDATA1=R5
         LTR   R5,R5                             DATA IN LAST BLOCK?
         BZ    MAIN1150                          NO
         BAL   R8,WRITE010                       WRITE LAST BUFFER
MAIN1150 DS    0H
         ITRACE ID=STOW,                                               +
               DATA1=SPF_CONF_MEMBER
         GETMAIN RU,                                                   +
               LV=STOW_DATA_L,                                         +
               LOC=BELOW
         LR    R3,R1
         USING STOW_DATA,R3
         MVC   STOW_NAME,SPF_CONF_MEMBER         MEMBER NAME
         XC    STOW_TT,STOW_TT                   TRACK
         MVI   STOW_R,0                          RECORD
         MVI   STOW_C,0                          NO USER FIELDS
         STOW  (R7),                                                   +
               (R3),                                                   +
               R
         ITRACE ID=STOW_RC,                                            +
               RDATA1=R15
         LR    R2,R15                            SAVE STOW RC
         FREEMAIN RU,                                                  +
               A=(R3),                                                 +
               LV=STOW_DATA_L
         CH    R2,H8                             RC = 8?
         BE    MAIN1160                          YES.. ACCEPTABLE
         LTR   R2,R2                             SUCCESSFUL?
         BNZ   ERR0070                           NO
MAIN1160 DS    0H
         CLOSE ((R7)),                           CLOSE CONFIG DCB      +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME
         L     R15,V_DISDAIR
         BALR  R14,R15                           FREE CONFIG
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0050                           NO
         MVC   SPF_MSG_3(MSG05_L),MSG05
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
WRITE000 DS    0H
         ITRACE ID=WRITE000,                                           +
               RDATA1=R6,                                              +
               RDATA2=R5
         AH    R6,H256                           UPDATE BUFFER ADDR
         AH    R5,H256                           UPDATE LENGTH
         CH    R5,=Y($BUFF_SIZE)                 BUFFER FULL?
         BNER  R8                                NO
WRITE010 DS    0H
         L     R6,DXD_IO_AREA                    RESET R6
         ITRACE ID=WRITE010,                                           +
               RDATA1=R6,                                              +
               RDATA2=R5
         XC    COMM_DECB(COMM_DECB_L),COMM_DECB  INIT DECB
         STH   R5,DCBBLKSI                       SET BLOCK SIZE
         WRITE COMM_DECB,                                              +
               SF,                                                     +
               (R7),                             .. DCB ADDR           +
               (R6),                             .. I/O AREA ADDR      +
               (R5),                             .. LENGTH             +
               MF=E
         ITRACE ID=WAIT
         CHECK COMM_DECB
         ITRACE ID=RUNNING
         SR    R5,R5                             RESET LENGTH
         L     R0,DXD_IO_AREA
         LH    R1,=Y($BUFF_SIZE)
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE I/O AREA
         BR    R8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
TPUT0000 DS    0H
         ITRACE ID=TPUT
         TPUT  COMM_MSG_1,L'COMM_MSG_1
         MVC   COMM_MSG_1,COMM_BLANKS
         BR    R8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1                     DSN IS BLANK
         B     ERR0100
ERR0020  DS    0H
         MVI   COMM_MSG_ID,2                     CONFIG DATASET NOT PDS
         B     ERR0100
ERR0030  DS    0H
         MVI   COMM_MSG_ID,3                     FUNCTION IS BLANK
         B     ERR0100
ERR0040  DS    0H
         MVI   COMM_MSG_ID,4                     BAD FUNCTION
         B     ERR0100
ERR0050  DS    0H
         MVI   COMM_MSG_ID,5                     DAIR FAILURE
         B     ERR0110
ERR0060  DS    0H
         MVI   COMM_MSG_ID,6                     FIND FAILED
         B     ERR0100
ERR0070  DS    0H
         MVI   COMM_MSG_ID,7                     STOW FAILED
         STC   R2,COMM_INFO_01                   STOW RC
ERR0100  DS    0H
         MVC   COMM_MSG_CSECT,MODID              SET CSECT ID
         L     R15,V_DISMSG
         BALR  R14,R15                           BUILD MESSAGE
ERR0110  DS    0H
         ITRACE ID=ERROR,                                              +
               DATA1=COMM_MSG_ID
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         B     MAIN0010
ERR0200  DS    0H
         ITRACE ID=LM_ERR,                                             +
               RDATA1=R15
         MVC   COMM_SPF_FUNCTION,DISPLAY
         MVC   COMM_SPF_PANEL,=CL8'DIS0000'      SET PANEL NAME
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
         LA    R1,COMM_SPF_PARMS
         L     R14,COMM_ISPLINK
         BALR  R14,R15                           DISPLAY CONFIG
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         MVC   COMM_CONF_DSN,SPF_CONF_DSN
         MVC   COMM_CONF_MEMBER,SPF_CONF_MEMBER
         MVC   COMM_CONF_VOLSER,SPF_CONF_VOLSER
         ITRACE ID=EXIT
         L     R1,DXD_IO_AREA                    I/O AREA ADDR
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=$BUFF_SIZE
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDCONF)

ACB_I    ACB   AM=VSAM,                                                +
               DDNAME=ANYDD,                                           +
               MACRF=(KEY,DIR,SEQ)

HALF_SECOND   DC   F'50'

H4       DC   H'4'
H8       DC   H'8'
H256     DC   H'256'

HEXCHAR  EQU  *-C'0'
         DC   C'0123456789ABCDEF'

BROWSE   DC   CL8'BROWSE'
DDID     DC   CL8'DDID'
DISPLAY  DC   CL8'DISPLAY'
LMINIT   DC   CL8'LMINIT'
SYSLIB   DC   CL8'SYSLIB'
SYSPRINT DC   CL8'SYSPRINT'

MSG01    DS   0C
         DC   C'Configuration data restored'
MSG01_L  EQU  *-MSG01

MSG02    DS   0C
         DC   C'Verify pre-processed DSECT KSDSes'
MSG02_L  EQU  *-MSG02

MSG03    DS   0C
         DC   C'Verify assembler SYSLIBs'
MSG03_L  EQU  *-MSG03

MSG04    DS   0C
         DC   C'Re-assembling DSECT(s)'
MSG04_L  EQU  *-MSG04

MSG05    DS   0C
         DC   C'Configuration data saved'
MSG05_L  EQU  *-MSG05

MSG06    DS   0C
         DC   C'Ending disp of data area at '
MSG06_B  DC   CL8' '
         DC   C' to '
MSG06_E  DC   CL8' '
         DC   C' limited to CSECT length'
MSG06_L  EQU  *-MSG06

MSG07    DS   0C
         DC   C'Data area beyond end of CSECT.  Area from '
MSG07_B  DC   CL8' '
         DC   C' to '
MSG07_E  DC   CL8' '
         DC   C' ignored'
MSG07_L  EQU  *-MSG07

         LTORG

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDCONF               DSECT
                      DS   18F
DXD_CSECT             DS   CL8

DXD_IO_AREA           DS   A

DXD_FIRST_DATAAREA    DS   A
DXD_LAST_DATAAREA     DS   A

DXD_FIRST_BASE        DS   A
DXD_LAST_BASE         DS   A

DXD_FIRST_USING       DS   A
DXD_LAST_USING        DS   A

DXD_FIRST_KSDS        DS   A
DXD_LAST_KSDS         DS   A

DXD_FIRST_SYSLIB      DS   A
DXD_LAST_SYSLIB       DS   A

DXD_FIRST_ASM         DS   A
DXD_LAST_ASM          DS   A

DXD_DDID              DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DIR_DATA      DSECT
STOW_DATA     DS      0C
STOW_NAME     DS      CL8               MEMBER NAME
STOW_TT       DS      XL2               TRACK NBR
STOW_R        DS      X                 RECORD NUMBER
STOW_C        DS      X                 FLAGS, NBR OF USER DATA BYTES
              DS      CL62              USER DATA
STOW_DATA_L   EQU     *-STOW_DATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DCBD    DSORG=PO

              IHADCBE

              IEZIOB  DSECT=YES

              IHADECB DSECT=YES

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    ATTRS
              COPY    REGEQU
$BUFF_SIZE    EQU     CONFIG_RECORD_L*16
              END     DISCONF
./ ADD NAME=DISDAIR  0106-09119-09198-0836-00551-00543-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISDAIR                                               *
*                                                                     *
*  Interface with the dynamic allocation (DAIR)                       *
*                                                                     *
*  If the return code is non zero, DISMSG will be called to           *
*  create messages that are in display format.                        *
*                                                                     *
* ------------------------------------------------------------------- *
DISDAIR  CSECT
DISDAIR  AMODE 31
DISDAIR  RMODE ANY
         USING DISDAIR,R15
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE ADDRESS
         B     INIT0000
MODID    DC    CL8'DISDAIR'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    A(DAIREND-DISDAIR)
INIT0000 DS    0H
         DROP  R15
         USING DISDAIR,R11
         L     R15,COMM_DXD_ADDRESS           DXD AREA BASE ADDRESS
         A     R15,DXD_START                  PLUS OFFSET
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        COPY DXD AREA ADDRESS
         USING DXDDAIR,R13                    DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_DAIR_FUNC
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
* ------------------------------------------------------------------- *
         USING S99RB,DXD_SVC99_RB
         TM    DXD_FLAGS,$FLAG_INIT           WORK AREA INITIALIZED?
         BO    DAIR0010                       YES
         ITRACE ID=INIT
         MVC   DXD_TEXT_UNITS(TEXT_UNITS_L),TEXT_UNITS_I
         XC    DXD_SVC99_RB(S99RBEND-S99RB),DXD_SVC99_RB
         LA    R1,DXD_SVC99_RB
         ST    R1,DXD_SVC99_RB_ADDRESS
         OI    DXD_SVC99_RB_ADDRESS,X'80'
         MVI   S99RBLN,S99RBEND-S99RB
         LA    R1,DXD_TEXT_POINTER_1
         ST    R1,S99TXTPP                    FIRST TEXT UNIT ADDRESS
         OI    DXD_FLAGS,$FLAG_INIT           SET INIT INDICATOR
DAIR0010 DS    0H
         CLI   COMM_DAIR_FUNC,$DAIR_ALLOC     ALLOCATE?
         BE    DAIR0020                       YES
         CLI   COMM_DAIR_FUNC,$DAIR_CONCAT    CONCATENATE SYSLIB?
         BE    DAIR0200                       YES
         CLI   COMM_DAIR_FUNC,$DAIR_DEALLOC   DEALLOCATE?
         BE    DAIR0300                       YES
         ABEND 1,DUMP,,USER                   BAD NEWS
* ------------------------------------------------------------------- *
*        Allocation                                                   *
* ------------------------------------------------------------------- *
DAIR0020 DS    0H
         ITRACE ID=ALLOC,                                              +
               DATA1=COMM_DAIR_DD
         MVI   S99VERB,S99VRBAL               SET VERB
         TM    COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         BO    DAIR0030                       YES
         AP    COMM_DD_NUMBER,P1              ADD 1 TO DD'S ALLOCATED
         MVC   DXD_DD,DD_EDIT_WORD            INITIALIZE WITH EDIT WORD
         ED    DXD_DD,COMM_DD_NUMBER          EDIT DD NUMBER
         MVI   DXD_DD,C'D'                    SET DD PREFIX
         MVC   COMM_DAIR_DD,DXD_DD            PASS IT BACK TO CALLER
         ITRACE ID=NEW_DD,                                             +
               DATA1=COMM_DAIR_DD
         B     DAIR0040
DAIR0030 DS    0H
         MVC   DXD_DD,COMM_DAIR_DD            COPY DDNAME
DAIR0040 DS    0H
         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1
         LA    R1,DXD_DSN_TEXT_UNITS          DSN TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_2          SET TEXT POINTER 2
         LA    R1,DXD_STATUS_TEXT_UNITS       STATUS TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_3          SET TEXT POINTER 3
         TM    COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_SYSIN
         BNZ   DAIR0060                       SYSIN OR SYSPRINT
         MVC   DXD_DSN,COMM_DAIR_DSN          COPY DATA SET NAME
         MVI   DXD_STATUS,$SHR                SET STATUS (SHR)
         CLC   DXD_VOLSER,COMM_BLANKS         VOLSER GIVEN?
         BE    DAIR0050                       NO
         LA    R1,DXD_VOLSER_TEXT_UNITS       VOLSER TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_4          SET TEXT POINTER 4
         LA    R1,DXD_UNIT_TEXT_UNITS         UNIT TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_5          SET TEXT POINTER 5
         MVC   DXD_VOLSER,COMM_DAIR_VOLSER    COPY VOLSER
         OI    DXD_TEXT_POINTER_5,X'80'       SET END-OF-LIST
         B     DAIR0080
DAIR0050 DS    0H
         OI    DXD_TEXT_POINTER_3,X'80'       SET END-OF-LIST
         B     DAIR0080
* ------------------------------------------------------------------- *
*        Allocate a temp dataset for SYSIN or SYSPRINT                *
* ------------------------------------------------------------------- *
DAIR0060 DS    0H
         ITRACE ID=ALOCTEMP
         MVC   DXD_DSN,COMM_BLANKS
         MVC   DXD_DSN+0(3),=C'&&&&D'         SET TEMP DSN PREFIX
         MVC   DXD_DSN+3(5),DXD_DD            COPY DD SUFFIX
         MVI   DXD_STATUS,4                   SET STATUS (NEW)
         LA    R1,DXD_UNIT_TEXT_UNITS         UNIT TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_4          SET TEXT POINTER 4
         MVC   DXD_UNIT,SYSDA                 SET UNIT NAME
         LA    R1,DXD_PRIMARY_TEXT_UNITS      PRIMARY SPACE UNITS
         ST    R1,DXD_TEXT_POINTER_5          SET TEXT POINTER 5
         LA    R1,DXD_SECONDARY_TEXT_UNITS    SECONDARY SPACE UNITS
         ST    R1,DXD_TEXT_POINTER_6          SET TEXT POINTER 6
         LA    R1,DXD_TRACKS_TEXT_UNITS       TRACKS TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_7          SET TEXT POINTER 7
         LA    R1,DXD_RECFM_TEXT_UNITS        RECFM TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_8          SET TEXT POINTER 8
         LA    R1,DXD_LRECL_TEXT_UNITS        LRECL TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_9          SET TEXT POINTER 9
         LA    R1,DXD_BLKSIZE_TEXT_UNITS      BLOCK SIZE UNITS
         ST    R1,DXD_TEXT_POINTER_10         SET TEXT POINTER 10
         OI    DXD_TEXT_POINTER_10,X'80'      SENT END-OF-LIST
         TM    COMM_DAIR_OPTIONS,$DAIR_SYSIN  SYSIN?
         BO    DAIR0070                       YES
         ITRACE ID=SYSPRINT
         MVC   DXD_LRECL,=Y(133)              SET LRECL=133
         MVC   DXD_BLKSIZE,=Y(133*30)         SET BLKSIZE=133*30
         B     DAIR0080
DAIR0070 DS    0H
         ITRACE ID=SYSIN
         MVC   DXD_LRECL,=Y(80)               SET LRECL=80
         MVC   DXD_BLKSIZE,=Y(80*50)          SET BLKSIZE=80*50
DAIR0080 DS    0H
         ITRACE ID=SVC_99,                                             +
               RDATA1=R1,                                              +
               DATA2=DXD_DD
         LA    R1,DXD_SVC99_RB_ADDRESS
         SVC   99                             ALLOCATE THE DATA SET
         ITRACE ID=RC,                                                 +
               RDATA1=R15,                                             +
               DATA2=S99ERROR
         STC   R15,DXD_RC                     SAVE RETURN CODE
         LTR   R15,R15
         BNZ   ERR0010
* ------------------------------------------------------------------- *
*        DETERMINE VOLSER FROM UCB                                    *
* ------------------------------------------------------------------- *
         USING PSA,R0                         DEFINE BASE
         L     R1,PSATNEW                     MY TCB'S ADDRESS
         USING TCB,R1                         DEFINE TCB BASE
         L     R2,TCBTIO                      TIOT ADDRESS
         USING TIOT1,R2                       DEFINE BASE
         LA    R3,TIOENTRY                    FIRST TIOT ENTRY
         USING TIOENTRY,R3                    DEFINE BASE
         SR    R4,R4                          CLEAR FOR LENGTHS
DAIR0090 DS    0H
         ICM   R4,1,TIOELNGH                  LENGTH OF THIS ENTRY
         BZ    EXIT0000                       END OF TABLE
         ITRACE ID=DD,                                                 +
               DATA1=TIOEDDNM
         CLC   TIOEDDNM,COMM_DAIR_DD          DD JUST ALLOCATED?
         BE    DAIR0100                       YES
         AR    R3,R4                          NEXT DD IN TIOT
         B     DAIR0090                       CHECK NEXT DD
DAIR0100 DS    0H
         SR    R5,R5
         ICM   R5,7,TIOEFSRT                  UCB ADDRESS
         USING UCBOB,R5
         MVC   COMM_DAIR_VOLSER,UCBVOLI       COPY VOLSER
         ITRACE ID=VOLSER,                                             +
               RDATA1=R5,                                              +
               DATA2=COMM_DAIR_VOLSER
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        Allocate SYSLIB for assembler                                *
*                                                                     *
* ------------------------------------------------------------------- *
DAIR0200 DS    0H
         ITRACE ID=CONCAT
* ------------------------------------------------------------------- *
*        Make sure SYSLIB DD is free                                  *
* ------------------------------------------------------------------- *
         ITRACE ID=FREESLIB
         NI    DXD_FLAGS,255-$SYSLIB_DD       RESET FLAG
         MVI   S99VERB,S99VRBUN               SET VERB
         MVC   DXD_DD,SYSLIB                  SET DD
         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1
         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST
         LA    R1,DXD_SVC99_RB_ADDRESS
         SVC   99                             ISSUE SVC
* ------------------------------------------------------------------- *
*        Free all LIBs in SYSLIB list                                 *
* ------------------------------------------------------------------- *
         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB
         BZ    DAIR0280                       NO LIBRARIES DEFINED
         USING SYSLIB_DSECT,R4                DEFINE BASE
DAIR0210 DS    0H
         ITRACE ID=FREE_LIB,                                           +
               DATA1=SYSLIB_DDNAME,                                    +
               DATA2=SYSLIB_DSNAME+00
         ITRACE ID=+,                                                  +
               DATA1=SYSLIB_DSNAME+08,                                 +
               DATA2=SYSLIB_DSNAME+16
         MVC   DXD_DD,SYSLIB_DDNAME           COPY DDNAME
         LA    R1,DXD_SVC99_RB_ADDRESS
         SVC   99
         ICM   R4,15,SYSLIB_NEXT              NEXT LIBRARY
         BNZ   DAIR0210                       FREE ALL LIBS
* ------------------------------------------------------------------- *
*        Allocate the libraries in SYSLIB list                        *
* ------------------------------------------------------------------- *
DAIR0220 DS    0H
         MVI   S99VERB,S99VRBAL               SET VERB
         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB
         BZ    DAIR0280
DAIR0230 DS    0H
         ITRACE ID=ALLOCLIB,                                           +
               DATA1=SYSLIB_DDNAME,                                    +
               DATA2=SYSLIB_DSNAME+00
         ITRACE ID=+,                                                  +
               DATA1=SYSLIB_DSNAME+08,                                 +
               DATA2=SYSLIB_DSNAME+16
         AP    COMM_DD_NUMBER,P1              ADD 1 TO DD'S ALLOCATED
         MVC   DXD_DD,DD_EDIT_WORD            INITIALIZE WITH EDIT WORD
         ED    DXD_DD,COMM_DD_NUMBER          EDIT DD NUMBER
         MVI   DXD_DD,C'D'                    SET DD PREFIX
         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1
         LA    R1,DXD_DSN_TEXT_UNITS          DSN TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_2          SET TEXT POINTER 2
         LA    R1,DXD_STATUS_TEXT_UNITS       STATUS TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_3          SET TEXT POINTER 3
         OI    DXD_TEXT_POINTER_3,X'80'       FLAG END-OF-LIST
         MVC   DXD_DSN,SYSLIB_DSNAME          COPY DATA SET NAME
         MVI   DXD_STATUS,$SHR                SET DISP=SHR
         TM    DXD_FLAGS,$SYSLIB_DD           SYSLIB DD ALLOCATED?
         BO    DAIR0240                       YES
         MVC   DXD_DD,SYSLIB                  OVER-RIDE DDNAME
         OI    DXD_FLAGS,$SYSLIB_DD           SYSLIB DD ALLOCATED
DAIR0240 DS    0H
         LA    R1,DXD_SVC99_RB_ADDRESS
         ITRACE ID=SVC_99,                                             +
               RDATA1=R1
         SVC   99                             ISSUE THE SVC
         STC   R15,DXD_RC                     SAVE RC
         ITRACE ID=RC,                                                 +
               RDATA1=R15,                                             +
               DATA2=S99ERROR
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
         ITRACE ID=SAVE_DDN,                                           +
               DATA1=DXD_DD
         MVC   SYSLIB_DDNAME,DXD_DD           SAVE DDNAME
         ICM   R4,15,SYSLIB_NEXT              NEXT SYSLIB
         BNZ   DAIR0230
* ------------------------------------------------------------------- *
*        Concatenate the libraries                                    *
* ------------------------------------------------------------------- *
         MVI   S99VERB,S99VRBCC               SET VERB
         LA    R1,DXD_CONCAT_TEXT_UNITS       CONCAT TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1
         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST
         MVC   DXD_CONCAT_DD_1,SYSLIB         LIBRARY 1 DDNAME
         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB
         BZ    DAIR0280
         B     DAIR0260                       SKIP 1ST DD
DAIR0250 DS    0H
         MVC   DXD_CONCAT_DD_2,SYSLIB_DDNAME  COPY DDNAME
         ITRACE ID=CONCAT,                                             +
               DATA1=DXD_CONCAT_DD_1,                                  +
               DATA2=DXD_CONCAT_DD_2
         LA    R1,DXD_SVC99_RB_ADDRESS
         ITRACE ID=SVC_99,                                             +
               RDATA1=R1
         SVC   99                             ISSUE THE SVC
         STC   R15,DXD_RC                     SAVE RC
         ITRACE ID=RC,                                                 +
               RDATA1=R15,                                             +
               DATA2=S99ERROR
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0030                        NO
DAIR0260 DS    0H
         ICM   R4,15,SYSLIB_NEXT              NEXT SYSLIB
         BNZ   DAIR0250
         B     EXIT0000
* ------------------------------------------------------------------- *
*        There are no libraries in SYSLIB list                        *
* ------------------------------------------------------------------- *
DAIR0270 DS    0H
         ITRACE ID=DD_DUMMY
         MVI   S99VERB,S99VRBAL               SET VERB
         LA    R1,DXD_DD_TEXT_UNITS
         ST    R1,DXD_TEXT_POINTER_1
         LA    R1,DXD_DUMMY_TEXT_UNITS
         ST    R1,DXD_TEXT_POINTER_2
         MVC   DXD_DD,SYSLIB
         OI    DXD_TEXT_POINTER_2,X'80'       SET END-OF-LIST
         LA    R1,DXD_SVC99_RB_ADDRESS
         ITRACE ID=SVC_99,                                             +
               RDATA1=R1,                                              +
               DATA2=DXD_DD
         SVC   99                             ISSUE THE SVC
         STC   R15,DXD_RC                     SAVE RC
         ITRACE ID=RC,                                                 +
               RDATA1=R15,                                             +
               DATA2=S99ERROR
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0020                        NO
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DAIR0280 DS    0H
         ITRACE ID=NO_LIBS
         MVI   DXD_RC,0
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        Free a DD                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DAIR0300 DS    0H
         ITRACE ID=FREE,                                               +
               DATA1=COMM_DAIR_DD
         MVI   S99VERB,S99VRBUN               SET VERB
         MVC   DXD_DD,COMM_DAIR_DD            SET DD
         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS
         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1
         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST
         LA    R1,DXD_SVC99_RB_ADDRESS
         ITRACE ID=SVC_99,                                             +
               RDATA1=R1,                                              +
               DATA2=DXD_DD
         SVC   99                             ISSUE THE SVC
         STC   R15,DXD_RC                     SAVE RC
         ITRACE ID=RC,                                                 +
               RDATA1=R15,                                             +
               DATA2=S99ERROR
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0020                        NO
* ------------------------------------------------------------------- *
*        If the DD was SYSLIB, free all libs in SYSLIB list           *
* ------------------------------------------------------------------- *
         CLC   COMM_DAIR_DD,SYSLIB            SYSLIB DD?
         BNE   EXIT0000                       NO
         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB
         BZ    EXIT0000
         USING SYSLIB_DSECT,R4                DEFINE BASE
DAIR0310 DS    0H
         ITRACE ID=FREE_LIB,                                           +
               DATA1=SYSLIB_DDNAME
         MVC   DXD_DD,SYSLIB_DDNAME           COPY DDNAME
         LA    R1,DXD_SVC99_RB_ADDRESS
         SVC   99
         ICM   R4,15,SYSLIB_NEXT              NEXT LIBRARY
         BNZ   DAIR0310                       FREE ALL LIBS
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1                  ALLOCATION
         MVC   COMM_INFO_01(L'COMM_DAIR_DD),DXD_DD
         MVC   COMM_INFO_02(L'COMM_DAIR_DSN),DXD_DSN
         B     ERR0040
ERR0020  DS    0H
         MVI   COMM_MSG_ID,2                  DE-ALLOCATION
         MVC   COMM_INFO_01(L'COMM_DAIR_DD),DXD_DD
         B     ERR0040
ERR0030  DS    0H
         MVI   COMM_MSG_ID,3                  CONCATENATION
         MVC   COMM_INFO_01(L'DXD_CONCAT_DD_1),DXD_CONCAT_DD_1
         MVC   COMM_INFO_02(L'DXD_CONCAT_DD_2),DXD_CONCAT_DD_2
ERR0040  DS    0H
         MVC   COMM_INFO_03(1),DXD_RC         R15
         MVC   COMM_INFO_04(4),S99ERROR       ERROR AND INFO CODE
         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME
         L     R15,V_DISMSG                   DISMSG ENTRY PONT
         BALR  R14,R15                        BUILD MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         SR    R15,R15
         IC    R15,DXD_RC                     SET RC
         L     R13,4(,R13)                    RESTORE SAVE AREA
         L     R14,12(,R13)                   RESTORE R14
         LM    R0,R12,20(R13)
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC    Q(DXDDAIR)
P1            DC    P'1'
DD_EDIT_WORD  DC    X'F020202020202020'
SYSALLDA      DC    CL8'SYSALLDA'
SYSDA         DC    CL8'SYSDA'
SYSLIB        DC    CL8'SYSLIB'

TEXT_UNITS_I  DS    0X
              DC    AL2(DALDDNAM)         DDNAME PARMS
              DC    AL2(1)
              DC    AL2(8)
              DC    CL8' '                DDNAME
              DC    AL2(DALDSNAM)         DATASET NAME PARMS
              DC    AL2(1)
              DC    AL2(44)
              DC    CL44' '               DATASET NAME
              DC    AL2(DALMEMBR)         MEMBER NAME PARMS
              DC    AL2(1)
              DC    AL2(8)
              DC    CL8' '                DATASET NAME
              DC    AL2(DALSTATS)         STATUS
              DC    AL2(1)
              DC    AL2(1)
              DC    X'08'                 SHR
              DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS
              DC    AL2(1)
              DC    AL2(1)
              DC    X'08'                 NORMAL DISP
              DC    AL2(DALUNIT)          UNIT PARAMETERS
              DC    AL2(1)
              DC    AL2(8)
              DC    CL8'SYSALLDA'         UNIT NAME
              DC    AL2(DALVLSER)         VOLSER PARAMETERS
              DC    AL2(1)
              DC    AL2(6)
              DC    CL6' '
              DC    AL2(DALPRIME)         PRIMARY QTY
              DC    AL2(1)
              DC    AL2(3)
              DC    AL3(15)
              DC    AL2(DALSECND)         SECONDARY QTY
              DC    AL2(1)
              DC    AL2(3)
              DC    AL3(15)
              DC    AL2(DALTRK)           TRACKS
              DC    AL2(0)
              DC    AL2(DALRECFM)         RECFM
              DC    AL2(1)
              DC    AL2(1)
              DC    AL2(DALLRECL)         LRECL
              DC    AL2(1)
              DC    AL2(2)
              DC    AL2(0)
              DC    AL2(DALBLKSZ)         BLOCK SIZE
              DC    AL2(1)
              DC    AL2(2)
              DC    AL2(0)
              DC    AL2(DCCDDNAM)         DD NAME'S TO CONCAT
              DC    AL2(2)
              DC    AL2(8)
              DC    CL8' '
              DC    AL2(8)
              DC    CL8' '
              DC    AL2(DALDUMMY)         DUMMY
              DC    AL2(0)
TEXT_UNITS_L  EQU   *-TEXT_UNITS_I
              LTORG

DAIREND       EQU  *
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDAIR                       DSECT
                              COPY DXDPREF

DXD_SVC99_RB_ADDRESS          DS   A
DXD_SVC99_RB                  DS   (S99RBEND-S99RB)X

DXD_TEXT_POINTER_1            DS   A
DXD_TEXT_POINTER_2            DS   A
DXD_TEXT_POINTER_3            DS   A
DXD_TEXT_POINTER_4            DS   A
DXD_TEXT_POINTER_5            DS   A
DXD_TEXT_POINTER_6            DS   A
DXD_TEXT_POINTER_7            DS   A
DXD_TEXT_POINTER_8            DS   A
DXD_TEXT_POINTER_9            DS   A
DXD_TEXT_POINTER_10           DS   A

DXD_TEXT_UNITS                DS   0C
DXD_DD_TEXT_UNITS             DS   AL2,AL2,AL2
DXD_DD                        DS   CL8
DXD_DSN_TEXT_UNITS            DS   AL2,AL2,AL2
DXD_DSN                       DS   CL44
DXD_MEMBER_TEXT_UNITS         DS   AL2,AL2,AL2
DXD_MEMBER                    DS   CL8
DXD_STATUS_TEXT_UNITS         DS   AL2,AL2,AL2
DXD_STATUS                    DS   X
DXD_NORMAL_DISP_TEXT_UNITS    DS   AL2,AL2,AL2
DXD_NORMAL_DISP               DS   X
DXD_UNIT_TEXT_UNITS           DS   AL2,AL2,AL2
DXD_UNIT                      DS   CL8
DXD_VOLSER_TEXT_UNITS         DS   AL2,AL2,AL2
DXD_VOLSER                    DS   CL6
DXD_PRIMARY_TEXT_UNITS        DS   AL2,AL2,AL2
DXD_PRIMARY                   DS   XL3
DXD_SECONDARY_TEXT_UNITS      DS   AL2,AL2,AL2
DXD_SECONDARY                 DS   XL3
DXD_TRACKS_TEXT_UNITS         DS   AL2,AL2
DXD_RECFM_TEXT_UNITS          DS   AL2,AL2,AL2
DXD_LRECL_TEXT_UNITS          DS   AL2,AL2,AL2
DXD_LRECL                     DS   AL2
DXD_BLKSIZE_TEXT_UNITS        DS   AL2,AL2,AL2
DXD_BLKSIZE                   DS   AL2

DXD_CONCAT_TEXT_UNITS         DS   AL2,AL2
                              DS   AL2
DXD_CONCAT_DD_1               DS   CL8
                              DS   AL2
DXD_CONCAT_DD_2               DS   CL8

DXD_DUMMY_TEXT_UNITS          DS   AL2,AL2

DXD_RC                        DS   X

DXD_FLAGS                     DS   X
$FLAG_INIT                    EQU  X'80'
$SYSLIB_DD                    EQU  X'40'

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISCOMM  TYPE=DSECT
         DISSPFD  TYPE=DSECT
         COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
         IKJTCB   LIST=NO
         IEFTIOT1
         IEFUCBOB
         IEFZB4D0
         IEFZB4D2

         IFGACB  AM=VSAM
ACB_L    EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
$SHR     EQU      8
         COPY     REGEQU
         END      DISDAIR
./ ADD NAME=DISDCONV 0108-09111-09198-0836-00125-00118-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISDCONV                                             *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   Convert displacements from character to binary                   *
*                                                                    *
*   There are two parms:                                             *
*     .   Address of source data (8 characters)                      *
*     .   Address of output (fullword)                               *
*                                                                    *
*--------------------------------------------------------------------*
DISDCONV CSECT
DISDCONV AMODE 31
DISDCONV RMODE ANY
         USING DISDCONV,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDCONV'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDCONV,R13
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=ENTRY,                                              +
               RDATA1=R1
         LM    R9,R10,0(R1)                      ADDR OF PARMS
         LR    R8,R9                             SAVE SOURCE ADDR
         MVC   DXD_IN,C_ZEROS                    INITIALIZE
         LA    R1,L'DXD_IN                       LOOP LIMITER
CONV0000 DS    0H                                LAST DIGIT
         CLI   0(R9),C' '                        BLANK?
         BE    CONV0020                          YES
         CLI   0(R9),C'A'                        VALID DIGIT?
         BL    ERR0010                           NO
         CLI   0(R9),C'F'                        VALID DIGIT?
         BNH   CONV0010                          YES
         CLI   0(R9),C'0'                        VALID DIGIT?
         BL    ERR0010                           NO
         CLI   0(R9),C'9'                        VALID DIGIT?
         BH    ERR0010                           NO
CONV0010 DS    0H
         MVC   DXD_IN(L'DXD_IN-1),DXD_IN+1       SHIFT LEFT 1 DIGIT
         MVC   DXD_IN+(L'DXD_IN-1)(1),0(R9)      COPY DIGIT
         LA    R9,1(,R9)                         NEXT DIGIT
         BCT   R1,CONV0000                       LOOP
CONV0020 DS    0H
         LTR   R10,R10                           JUST VERIFYING?
         BZ    CONV0030                          YES
*        MVC   0(8,R8),DXD_IN                    COPY BACK TO CALLER
         TR    DXD_IN,CHARHEX                    PREPARE FOR CONVERSION
         PACK  DXD_OUT(5),DXD_IN(9)              PACK
         MVC   0(4,R10),DXD_OUT                  COPY TO OUTPUT
CONV0030 DS    0H
         SR    R15,R15                           SET RC
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         ITRACE ID=BAD,                                                +
               RDATA1=R9
         MVI   COMM_MSG_ID,1
         MVC   COMM_INFO_01(1),0(R9)             COPY OFFENDING DIGIT
         MVC   COMM_MSG_CSECT,MODID              COPY MODULE NAME
         L     R15,V_DISMSG
         BALR  R14,R15                           BUILD MESSAGE
         LA    R15,4                             SET RC
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               DATA1=DXD_OUT
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE R14            ASE01680
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDDCONV)

C_ZEROS       DC   C'00000000'

CHARHEX       DC   256X'00'
              ORG  CHARHEX+C'A'
              DC   X'0A0B0C0D0E0F'
              ORG  CHARHEX+C'0'
              DC   X'00010203040506070809'
              ORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDDCONV      DSECT
              DS   18F
DXD_CSECT     DS   CL8

DXD_IN        DS   CL8
DXD_OUT       DS   CL5
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA
              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    REGEQU
              END     DISDCONV
./ ADD NAME=DISDDSCT 0111-09033-09198-0837-00288-00289-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISDDSCT                                              *
*                                                                     *
*  FUNCTION:                                                          *
*   Display DSECTs                                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*  One BIG difference about scrolling....                             *
*  UP, DOWN, TOP, BOTTOM are based on DSECTs, not LABELs or EQUs.     *
*                                                                     *
*  If anyone wants to take on scrolling that would allow              *
*  positioning based only any type of block, be my guest!             *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISDDSCT CSECT
DISDDSCT AMODE 31
DISDDSCT RMODE ANY
         USING DISDDSCT,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDDSCT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDDSCT,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING DSECT_DSECT,R4
         USING LABEL_DSECT,R5
         USING EQU_DSECT,R6
         ST    R1,DXD_FIRST_DSECT
         ST    R1,DXD_FIRST_ON_DISPLAY
         LR    R4,R1                             SET DSECT BASE
         MVI   DXD_LAST_TYPE,$TYPE_DSECT
         SR    R5,R5                             NO LABEL SO FAR
         SR    R6,R6                             NO EQU SO FAR
MAIN0010 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R8,COMM_VDATA_ADDR
         L     R7,SPF_VDEPTH
         CLI   DXD_LAST_TYPE,$TYPE_DSECT         DSECT?
         BE    MAIN0020                          YES
         CLI   DXD_LAST_TYPE,$TYPE_LABEL         LABEL?
         BE    MAIN0040
         CLI   DXD_LAST_TYPE,$TYPE_EQU           EQUATE?
         BE    MAIN0060
         DC    H'0'
MAIN0020 DS    0H
         ST    R4,DXD_LAST_DSECT
         MVI   DXD_LAST_TYPE,$TYPE_DSECT         LAST ITEM IS A DSECT
         MVC   0(MSG01_L,R8),MSG01
         MVC   MSG01_NAME-MSG01(L'MSG01_NAME,R8),DSECT_NAME
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0030
         B     MAIN0200
MAIN0030 DS    0H
         ICM   R5,15,DSECT_LABEL_NEXT            FIRST LABEL IN DSECT
         BNZ   MAIN0050
MAIN0040 DS    0H
         ST    R5,DXD_LAST_LABEL
         MVI   DXD_LAST_TYPE,$TYPE_LABEL         LAST ITEM IS A LABEL
         MVC   0(MSG02_L,R8),MSG02
         MVC   MSG02_NAME-MSG02(L'MSG02_NAME,R8),LABEL_NAME
         UNPK  WORK_DISP(9),LABEL_DISP(5)        UNPACK DISP
         MVC   MSG02_DISP-MSG02(L'MSG02_DISP,R8),WORK_DISP
         TR    MSG02_DISP-MSG02(L'MSG02_DISP,R8),COMM_HEXCHAR
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0200                          DISPLAY
MAIN0050 DS    0H
         ICM   R6,15,LABEL_EQU_NEXT              FIRST EQU
         BZ    MAIN0080
MAIN0060 DS    0H
         ST    R6,DXD_LAST_EQU
         MVI   DXD_LAST_TYPE,$TYPE_EQU           LAST ITEM IS AN EQU
         MVC   0(MSG03_L,R8),MSG03
         MVC   MSG03_NAME-MSG03(L'MSG03_NAME,R8),EQU_LABEL
         UNPK  WORK_DISP(3),EQU_VALUE(2)         UNPACK DISP
         MVC   MSG03_VALUE-MSG03(L'MSG03_VALUE,R8),WORK_DISP
         TR    MSG03_VALUE-MSG03(L'MSG03_VALUE,R8),COMM_HEXCHAR
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0070
         B     MAIN0200                          DISPLAY
MAIN0070 DS    0H
         ICM   R6,15,EQU_NEXT                    ANOTHER EQU?
         BNZ   MAIN0060                          YES
MAIN0080 DS    0H
         ICM   R5,15,LABEL_NEXT                  ANOTHER LABEL
         BNZ   MAIN0040                          YES
MAIN0090 DS    0H
         ICM   R4,15,DSECT_NEXT                  ANOTHER DSECT?
         BNZ   MAIN0020                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   EXIT0000                          NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0210
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0270
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0280
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0290
         B     MAIN0200
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         ITRACE ID=BOTTOM
         MVI   DXD_LAST_TYPE,$TYPE_DSECT         ASSUME DSECT
         ICM   R4,15,DXD_FIRST_DSECT             FIRST DSECT
MAIN0220 DS    0H
         ICM   R1,15,DSECT_NEXT                  ANOTHER DSECT?
         BZ    MAIN0230                          NO
         LR    R4,R1                             COPY DSECT ADDR
         B     MAIN0220
MAIN0230 DS    0H
         ICM   R5,15,DSECT_LABEL_NEXT            FIRST LABEL
         BZ    MAIN0010                          NO LABELS
         MVI   DXD_LAST_TYPE,$TYPE_LABEL         SET TYPE
MAIN0240 DS    0H
         ICM   R1,15,LABEL_NEXT                  ANOTHER LABEL?
         BZ    MAIN0250                          NO
         LR    R5,R1                             COPY LABEL ADDR
         B     MAIN0240
MAIN0250 DS    0H
         ICM   R6,15,LABEL_EQU_NEXT              FIRST EQU FOR LABEL
         BZ    MAIN0010                          NO EQU'S
         MVI   DXD_LAST_TYPE,$TYPE_EQU           SET TYPE
MAIN0260 DS    0H
         ICM   R1,15,EQU_NEXT                    ANOTHER EQU?
         BZ    MAIN0010                          NO
         LR    R6,R1                             COPY EQU ADDR
         B     MAIN0260
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0270 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0210                          YES
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0280 DS    0H
         ITRACE ID=TOP
         L     R4,DXD_FIRST_DSECT                FIRST DSECT
         MVI   DXD_LAST_TYPE,$TYPE_DSECT         SET TYPE
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0290 DS    0H
         ITRACE ID=UP
         B     MAIN0280
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ITRACE ID=NO_DSECT
         MVC   SPF_MSG_3(MSG04_L),MSG04
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDDDSCT)

PANEL_NAME        DC   CL8'DISDDSCT'

MSG01             DS   0C
MSG01_ATTR        DC   AL1($ATTR_NORMAL)
MSG01_SELECT      DC   C' '
                  DC   AL1($ATTR_HIGH)
                  DC   C'DSECT '
                  DC   AL1($ATTR_HIGH_YELLOW)
MSG01_NAME        DC   CL8' '
MSG01_L           EQU  *-MSG01

MSG02             DS   0C
MSG02_ATTR        DC   AL1($ATTR_NORMAL)
MSG02_SELECT      DC   C' '
                  DC   AL1($ATTR_HIGH)
                  DC   C' LABEL'
                  DC   Al1($ATTR_HIGH_TURQUOISE)
MSG02_DISP        DC   CL8' '
                  DC   C' '
MSG02_NAME        DC   CL60' '
MSG02_L           EQU  *-MSG02

MSG03             DS   0C
MSG03_ATTR        DC   AL1($ATTR_NORMAL)
MSG03_SELECT      DC   C' '
                  DC   AL1($ATTR_HIGH)
                  DC   C'  EQU '
                  DC   AL1($ATTR_HIGH_GREEN)
MSG03_VALUE       DC   CL2' '
                  DC   CL7' '
MSG03_NAME        DC   CL60' '
MSG03_L           EQU  *-MSG03

MSG04             DS   0C
                  DC   C'No DSECTs have been defined'
MSG04_L           EQU  *-MSG04
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDDSCT              DSECT
                      DS  18F
DXD_CSECT             DS  CL8

DXD_FIRST_DSECT       DS  A              FIRST DSECT ON CHAIN
DXD_FIRST_ON_DISPLAY  DS  A              FIRST BLOCK ON DISPLAY
DXD_LAST_DSECT        DS  A              LAST DSECT DISPLAYED
DXD_LAST_LABEL        DS  A              LAST LABEL DISPLAYED
DXD_LAST_EQU          DS  A              LAST EQU DISPLAYED

DXD_LAST_TYPE         DS  X              TYPE OF LAST BLOCK DISPLAYED
$TYPE_DSECT           EQU C'D'
$TYPE_LABEL           EQU C'L'
$TYPE_EQU             EQU C'E'

WORK_DISP             DS  CL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              COPY    ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISDDSCT
./ ADD NAME=DISDEBUG 0102-09119-09198-1545-00939-00937-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISDEBUG                                             *
*                                                                    *
*  Function:                                                         *
*   If DISDEBUG DD is allocated, many internal fields and data       *
*   chains will be printed for trouble shooting.                     *
*                                                                    *
*   There are two "functions".  Normal function is to print the      *
*   internal fields and run the internal data chains.  The secondary *
*   function is to print the assembler output for module DISASSEM.   *
*                                                                    *
*   The older assemblers only allowed labels (symbolic names) to     *
*   be 8 characters in length.  The high-level assembler allows      *
*   names up to 63 characters in length.  For readability, when a    *
*   control block contains a label, the label will be the last item  *
*   printed on the line.  If a control block contains two labels,    *
*   the data will be printed on two lines.                           *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*   NOTE:  Several fields are copied to a work field before          *
*          "unpacking" them for printing.  When "unpacking" the      *
*          field, 1 more byte than printed is unpacked.  When the    *
*          field is the last field in the data area, an S0C4 abend   *
*          can occur.  Copying the field before unpacking was to     *
*          prevent these S0C4 abends.  If any data area is modified  *
*          and some other field is added to the end of the area,     *
*          beware that if it is unpacked for printing it may need    *
*          to be copied before unpacking.                            *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*   Change due to high-level assembler:                              *
*                                                                    *
*   The older assemblers only allowed labels (symbolic names) to     *
*   be 8 characters in length.  The high-level assembler allows      *
*   names up to 63 characters in length.  For readability, when a    *
*   control block contains a label, the label will be the last item  *
*   printed on the line.  If a control block contains two labels,    *
*   the data will be printed on two lines.                           *
*                                                                    *
*--------------------------------------------------------------------*
DISDEBUG CSECT
DISDEBUG AMODE 31
DISDEBUG RMODE ANY
         USING DISCOMM,R12
         USING DISDEBUG,R11,R10
         STM   R14,R12,12(R13)             SAVE REGS
         LR    R11,R15                     SET BASE REG
         B     DBUG0000                    SKIP EYECATCHER
MODID    DC    CL8'DISDEBUG'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
DBUG0000 DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS        WORK AREA ADDRESS
         A     R15,DXD_START
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                     SET SAVE AREA ADDRESS
         USING DXDDEBUG,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R9,                                              +
               DATA2=COMM_DEBUG_CMD
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO TSO ENVIRONMENT?
         BE    EXIT0000                    YES
         TM    COMM_DDS,$DISDEBUG_DD       DISDEBUG PRESENT?
         BNO   DBUG0400                    NO
         OC    DXD_CALL,DXD_CALL           INITIALIZED?
         BNZ   INIT0010                    YES
         MVI   PRINT_CC,C' '
         ZAP   DXD_CALL,P0                 INITIALIZE CALL NBR
INIT0010 DS    0H
         CLI   COMM_DEBUG_CMD,$DEBUG_PRINT PRINT?
         BE    DBUG0370                    YES
         AP    DXD_CALL,P1                 ADD TO CALL NBR
         MVC   COMM_DEBUG_IO(DEBUG_HEADING_L),DEBUG_HEADING
         ED    COMM_DEBUG_IO+(HEADING_CALL-DEBUG_HEADING)(4),DXD_CALL
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         CLI   COMM_DEBUG_CMD,$DEBUG_HEAD  HEADING ONLY?
         BE    EXIT0000                    YES
* ------------------------------------------------------------------- *
*             PRINT TRACE TABLE CONTROL                               *
* ------------------------------------------------------------------- *
DBUG0020 DS    0H
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(PR_TRACE_L),PR_TRACE
P        USING PR_TRACE,COMM_DEBUG_IO
         UNPK  P.PR_TRACE_1ST(9),COMM_TRACE_1STX(5)
         TR    P.PR_TRACE_1ST,COMM_HEXCHAR
         MVI   P.PR_TRACE_1ST+8,C' '
         UNPK  P.PR_TRACE_LAST(9),COMM_TRACE_LAST(5)
         TR    P.PR_TRACE_LAST,COMM_HEXCHAR
         MVI   P.PR_TRACE_LAST+8,C' '
         UNPK  P.PR_TRACE_CURRENT(9),COMM_TRACE_CURRENT(5)
         TR    P.PR_TRACE_CURRENT,COMM_HEXCHAR
         MVI   P.PR_TRACE_CURRENT+8,C' '
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         DROP  P
* ------------------------------------------------------------------- *
*             CHASE ESD CHAIN                                         *
* ------------------------------------------------------------------- *
DBUG0030 DS    0H
         ITRACE ID=ESDCHAIN
         ICM   R3,15,COMM_ESD_NEXT
         USING ESD_DSECT,R3
         BZ    DBUG0050
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(ESD_HEADING_L),ESD_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0040 DS    0H
         ITRACE ID=ESDENTRY
         MVC   COMM_DEBUG_IO(PR_ESD_L),PR_ESD
P        USING PR_ESD,COMM_DEBUG_IO
         ST    R3,COMM_DWORD
         UNPK  P.PR_ESD_BLOCK_ADDR(9),COMM_DWORD(5)
         TR    P.PR_ESD_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_ESD_BLOCK_ADDR+8,C' '
         UNPK  P.PR_ESD_PREV(9),ESD_PREV(5)
         TR    P.PR_ESD_PREV,COMM_HEXCHAR
         MVI   P.PR_ESD_PREV+8,C' '
         UNPK  P.PR_ESD_NEXT(9),ESD_NEXT(5)
         TR    P.PR_ESD_NEXT,COMM_HEXCHAR
         MVI   P.PR_ESD_NEXT+8,C' '
         MVC   P.PR_ESD_NAME,ESD_NAME
         MVC   P.PR_ESD_RESIDENT,ESD_RESIDENT
         MVC   P.PR_ESD_TARGET,ESD_TARGET
         MVC   P.PR_ESD_TYPE,ESD_TYPE
         MVC   P.PR_ESD_TYPE_QUAL,ESD_TYPE_QUAL
         MVC   DXD_WORK(L'ESD_LENGTH),ESD_LENGTH
         UNPK  P.PR_ESD_LENGTH(7),DXD_WORK(4)
         TR    P.PR_ESD_LENGTH,COMM_HEXCHAR
         MVI   P.PR_ESD_LENGTH+6,C' '
         UNPK  P.PR_ESD_ELEM_OFFSET(9),ESD_ELEM_OFFSET(5)
         TR    P.PR_ESD_ELEM_OFFSET,COMM_HEXCHAR
         MVI   P.PR_ESD_ELEM_OFFSET+8,C' '
         UNPK  P.PR_ESD_CLASS_OFFSET(9),ESD_CLASS_OFFSET(5)
         TR    P.PR_ESD_CLASS_OFFSET,COMM_HEXCHAR
         MVI   P.PR_ESD_CLASS_OFFSET+8,C' '
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         ICM   R3,15,ESD_NEXT
         BNZ   DBUG0040
         DROP  P
* ------------------------------------------------------------------- *
*             CHASE USING CHAIN                                       *
* ------------------------------------------------------------------- *
DBUG0050 DS    0H
         ITRACE ID=USNGCHN
         ICM   R3,15,COMM_USING_NEXT          FIRST USING ENTRY
         USING USING_DSECT,R3                 DEFINE BASE
         BZ    DBUG0090                       NO USING ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(USING_HEADING_L),USING_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
DBUG0060 DS    0H
         MVC   COMM_DEBUG_IO(PR_USING_L),PR_USING
P        USING PR_USING,COMM_DEBUG_IO
         ITRACE ID=USNGNTRY
         ST    R3,COMM_DWORD
         UNPK  P.PR_USING_BLOCK_ADDR(9),COMM_DWORD(5)
         TR    P.PR_USING_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_USING_BLOCK_ADDR+8,C' '
         UNPK  P.PR_USING_PREV(9),USING_PREV(5)
         TR    P.PR_USING_PREV,COMM_HEXCHAR
         MVI   P.PR_USING_PREV+8,C' '
         UNPK  P.PR_USING_NEXT(9),USING_NEXT(5)
         TR    P.PR_USING_NEXT,COMM_HEXCHAR
         MVI   P.PR_USING_NEXT+8,C' '
         MVC   P.PR_USING_NAME,USING_DSECT_NAME
         MVC   P.PR_USING_REGISTER,USING_CHAR_REGISTER
         UNPK  P.PR_USING_FLAG(3),USING_FLAG(2)
         TR    P.PR_USING_FLAG,COMM_HEXCHAR
         MVI   P.PR_USING_FLAG+2,C' '
         UNPK  P.PR_USING_BEGIN(9),USING_BEGIN(5)
         TR    P.PR_USING_BEGIN,COMM_HEXCHAR
         MVI   P.PR_USING_BEGIN+8,C' '
         UNPK  P.PR_USING_DISP(9),USING_DISP(5)
         TR    P.PR_USING_DISP,COMM_HEXCHAR
         MVI   P.PR_USING_DISP+8,C' '
         MVC   DXD_WORK(L'USING_END),USING_END
         UNPK  P.PR_USING_END(9),DXD_WORK(5)
         TR    P.PR_USING_END,COMM_HEXCHAR
         MVI   P.PR_USING_END+8,C' '
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         CLC   USING_DSECT_LABEL,COMM_BLANKS
         BE    DBUG0070
         MVC   P.PR_USING_NAME,USING_DSECT_LABEL
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0070 DS    0H
         ICM   R3,15,USING_NEXT
         BNZ   DBUG0060
         DROP  P
* ------------------------------------------------------------------- *
*             CHASE DSECT CHAIN                                       *
* ------------------------------------------------------------------- *
DBUG0090 DS    0H
         ITRACE ID=DSCTCHN
         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT ENTRY
         USING DSECT_DSECT,R3                 DEFINE BASE
         BZ    DBUG0120                       NO DSECT ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(DSECT_HEADING_L),DSECT_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
DBUG0100 DS    0H
         ITRACE ID=DSCTNTRY
         MVC   COMM_DEBUG_IO(PR_DSECT_L),PR_DSECT
P        USING PR_DSECT,COMM_DEBUG_IO
         ST    R3,COMM_DWORD
         UNPK  P.PR_DSECT_BLOCK_ADDR(9),DSECT_NEXT(5)
         TR    P.PR_DSECT_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_DSECT_BLOCK_ADDR+8,C' '
         UNPK  P.PR_DSECT_PREV(9),DSECT_PREV(5)
         TR    P.PR_DSECT_PREV,COMM_HEXCHAR
         MVI   P.PR_DSECT_PREV+8,C' '
         UNPK  P.PR_DSECT_NEXT(9),DSECT_NEXT(5)
         TR    P.PR_DSECT_NEXT,COMM_HEXCHAR
         MVI   P.PR_DSECT_NEXT+8,C' '
         MVC   P.PR_DSECT_NAME,DSECT_NAME
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         ICM   R4,15,DSECT_LABEL_NEXT
         BZ    DBUG0110
         BAL   R8,DBUG0320
DBUG0110 DS    0H
         ICM   R3,15,DSECT_NEXT               NEXT DSECT
         BNZ   DBUG0100                       LOOP
         DROP  P
* ------------------------------------------------------------------- *
*             CHASE BASE CHAIN                                        *
* ------------------------------------------------------------------- *
DBUG0120 DS    0H
         ITRACE ID=BASECHN
         ICM   R3,15,COMM_BASE_NEXT           FIRST BASE ENTRY
         USING BASE_DSECT,R3                  DEFINE BASE
         BZ    DBUG0140                       NO DSECT ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(BASE_HEADING_L),BASE_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0130 DS    0H
         MVC   COMM_DEBUG_IO(PR_BASE_L),PR_BASE
P        USING PR_BASE,COMM_DEBUG_IO
         ITRACE ID=BASENTRY
         ST    R3,COMM_DWORD
         UNPK  P.PR_BASE_BLOCK_ADDR(9),COMM_DWORD(5)
         TR    P.PR_BASE_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_BASE_BLOCK_ADDR+8,C' '
         UNPK  P.PR_BASE_PREV(9),BASE_PREV(5)
         TR    P.PR_BASE_PREV,COMM_HEXCHAR
         MVI   P.PR_BASE_PREV+8,C' '
         UNPK  P.PR_BASE_NEXT(9),BASE_NEXT(5)
         TR    P.PR_BASE_NEXT,COMM_HEXCHAR
         MVI   P.PR_BASE_NEXT+8,C' '
         UNPK  P.PR_BASE_BEGIN(9),BASE_BEGIN(5)
         TR    P.PR_BASE_BEGIN,COMM_HEXCHAR
         MVI   P.PR_BASE_BEGIN+8,C'-'
         UNPK  P.PR_BASE_END(9),BASE_END(5)
         TR    P.PR_BASE_END,COMM_HEXCHAR
         MVI   P.PR_BASE_END+8,C' '
         UNPK  P.PR_BASE_DISP(9),BASE_DISP(5)
         TR    P.PR_BASE_DISP,COMM_HEXCHAR
         MVI   P.PR_BASE_DISP+8,C' '
         MVC   P.PR_BASE_REGISTER,BASE_CHAR_REGISTER
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         ICM   R3,15,BASE_NEXT                NEXT BASE BLOCK
         BNZ   DBUG0130                       LOOP
         DROP  P
* ------------------------------------------------------------------- *
*             Chase AREA block chain                                  *
* ------------------------------------------------------------------- *
DBUG0140 DS    0H
         ITRACE ID=RLD_AREA,                                           +
               DATA1=COMM_RLD_AREA_NEXT
         ICM   R3,15,COMM_RLD_AREA_NEXT       FIRST RLD ITEM
         USING AREA_DSECT,R3                  DEFINE BASE
         BZ    DBUG014A                       NO DSECT ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(3),=C'RLD'
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT RLD AREA HEADING
         MVC   COMM_DEBUG_IO(RLD_HEADING_L),RLD_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         BAL   R6,DBUG0150
DBUG014A DS    0H
         ITRACE ID=USER1,                                              +
               DATA1=COMM_USER_AREA_NEXT_1
         ICM   R3,15,COMM_USER_AREA_NEXT_1    FIRST USER AREA
         BZ    DBUG014B                       NO DSECT ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(4),=C'USER'
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING
         MVC   COMM_DEBUG_IO(AREA1_HEADING_L),AREA1_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         BAL   R6,DBUG0150
DBUG014B DS    0H
         ITRACE ID=USER2,                                              +
               DATA1=COMM_USER_AREA_NEXT_2
         ICM   R3,15,COMM_USER_AREA_NEXT_2    FIRST USER AREA
         BZ    DBUG014C                       NO DSECT ENTRIES
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(4),=C'USER'
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING
         MVC   COMM_DEBUG_IO(AREA2_HEADING_L),AREA2_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         BAL   R6,DBUG0150
DBUG014C DS    0H
         ITRACE ID=ALL_AREA,                                           +
               DATA1=COMM_ALL_AREA_NEXT
         ICM   R3,15,COMM_ALL_AREA_NEXT       FIRST DATA/INSTRUCTION
         BZ    EXIT0000                       NO AREA(S)
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(3),=C'ALL'
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING
         MVC   COMM_DEBUG_IO(AREAALL_HEADING_L),AREAALL_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         BAL   R6,DBUG0150
         B     EXIT0000
DBUG0150 DS    0H
         ITRACE ID=AREA,                                               +
               RDATA1=R3,                                              +
               DATA2=AREA_TYPE
         CLI   AREA_TYPE,X'FF'                DUMMY AREA?
         BER   R6                             YES.. EXIT
         MVC   COMM_DEBUG_IO(PR_AREA_L),PR_AREA
P        USING PR_AREA,COMM_DEBUG_IO
         ST    R3,COMM_DWORD
         UNPK  P.PR_AREA_BLOCK_ADDR(9),COMM_DWORD(5)
         TR    P.PR_AREA_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_AREA_BLOCK_ADDR+8,C' '
         UNPK  P.PR_AREA_PREV(9),AREA_NEXT(5)
         TR    P.PR_AREA_PREV,COMM_HEXCHAR
         MVI   P.PR_AREA_PREV+8,C' '
         UNPK  P.PR_AREA_NEXT(9),AREA_NEXT(5)
         TR    P.PR_AREA_NEXT,COMM_HEXCHAR
         MVI   P.PR_AREA_NEXT+8,C' '
         UNPK  P.PR_AREA_BEGIN(9),AREA_BEGIN(5)
         TR    P.PR_AREA_BEGIN,COMM_HEXCHAR
         MVI   P.PR_AREA_BEGIN+8,C' '
         UNPK  P.PR_AREA_END(9),AREA_END(5)
         TR    P.PR_AREA_END,COMM_HEXCHAR
         MVI   P.PR_AREA_END+8,C' '
         UNPK  P.PR_AREA_LENGTH(9),AREA_LENGTH(5)
         TR    P.PR_AREA_LENGTH,COMM_HEXCHAR
         MVI   P.PR_AREA_LENGTH+8,C' '
         CLI   AREA_TYPE,$AREA_DATA           DATA AREA?
         BNE   DBUG0220                       NO
         MVC   P.PR_AREA_OPCODE,C_DATA
         CLI   AREA_DATA_TYPE,$DATA_USER      USER DEFINED?
         BE    DBUG0160                       YES
         CLI   AREA_DATA_TYPE,$DATA_ACON      AD CON?
         BE    DBUG0170                       YES
         CLI   AREA_DATA_TYPE,$DATA_VCON      VCON?
         BE    DBUG0180                       YES
         CLI   AREA_DATA_TYPE,$DATA_INTERNAL  INTERNALLY DETECTED?
         BE    DBUG0190                       YES
         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?
         BE    DBUG0200                       YES
         CLI   AREA_DATA_TYPE,$DATA_Q         Q?
         BE    DBUG0210                       YES
         MVI   P.PR_AREA_DATA_TYPE,C'?'       UNKNOWN
         B     DBUG0220
DBUG0160 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_USER     USER DEFINED
         B     DBUG0220
DBUG0170 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_ADCON    AD CON
         B     DBUG0220
DBUG0180 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_VCON     AD CON
         B     DBUG0220
DBUG0190 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_INTERNAL INTERNALLY DETECTED
         B     DBUG0220
DBUG0200 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_CXD      CXD
         B     DBUG0220
DBUG0210 DS    0H
         MVC   P.PR_AREA_DATA_TYPE,C_Q        Q
DBUG0220 DS    0H
         MVC   PR_AREA_RLD_NAME,AREA_RLD_NAME
         ICM   R1,15,AREA_LABEL
         BZ    DBUG0230
L        USING LABEL_DSECT,R1
         MVC   P.PR_AREA_LABEL,L.LABEL_NAME
DBUG0230 DS    0H
         ICM   R1,15,AREA_REF_LABEL1
         BZ    DBUG0270
         MVC   P.PR_AREA_REF_LABEL1,L.LABEL_NAME
         OC    AREA_REF_DISP1,AREA_REF_DISP1
         BZ    DBUG0270
         LA    R2,P.PR_AREA_REF_LABEL1
DBUG0250 DS    0H
         CLI   0(R2),C' '
         BE    DBUG0260
         LA    R2,1(,R2)
         B     DBUG0250
DBUG0260 DS    0H
         MVI   0(R2),C'+'
         UNPK  1(5,R2),AREA_REF_DISP1+2(3)
         TR    1(4,R2),COMM_HEXCHAR
         MVI   5(R2),C' '
DBUG0270 DS    0H
         ICM   R1,15,AREA_REF_LABEL2
         BZ    DBUG0300
         MVC   P.PR_AREA_REF_LABEL2,L.LABEL_NAME
         OC    AREA_REF_DISP2,AREA_REF_DISP2
         BZ    DBUG0300
         LA    R2,P.PR_AREA_REF_LABEL2
DBUG0280 DS    0H
         CLI   0(R2),C' '
         BE    DBUG0290
         LA    R2,1(,R2)
         B     DBUG0280
DBUG0290 DS    0H
         MVI   0(R2),C'+'
         UNPK  1(5,R2),AREA_REF_DISP2+2(3)
         TR    1(4,R2),COMM_HEXCHAR
         MVI   5(R2),C' '
DBUG0300 DS    0H
         ICM   R1,15,AREA_OPCODE                OPCODE TABLE ENTRY
         USING OPCODE_DSECT,R1
         BZ    DBUG0310
         MVC   P.PR_AREA_OPCODE,OPCODE_MNEMONIC OPCODE MNEMONIC
DBUG0310 DS    0H
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         ICM   R3,15,AREA_NEXT
         BNZ   DBUG0150
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         BR    R6
         DROP  P,R3
* ------------------------------------------------------------------- *
*             Chase LABEL chain for DSECTS                            *
* ------------------------------------------------------------------- *
DBUG0320 DS    0H
         USING LABEL_DSECT,R4                 DEFINE BASE
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(LABEL_HEADING_L),LABEL_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0330 DS    0H
         ITRACE ID=LABLNTRY,                                           +
               RDATA1=R4
         MVC   COMM_DEBUG_IO(PR_LABEL_L),PR_LABEL
P        USING PR_LABEL,COMM_DEBUG_IO
         ST    R4,COMM_DWORD
         UNPK  P.PR_LABEL_BLOCK_ADDR(9),COMM_DWORD(5)
         TR    P.PR_LABEL_BLOCK_ADDR,COMM_HEXCHAR
         MVI   P.PR_LABEL_BLOCK_ADDR+8,C' '
         UNPK  P.PR_LABEL_PREV(9),LABEL_PREV(5)
         TR    P.PR_LABEL_PREV,COMM_HEXCHAR
         MVI   P.PR_LABEL_PREV+8,C' '
         UNPK  P.PR_LABEL_NEXT(9),LABEL_NEXT(5)
         TR    P.PR_LABEL_NEXT,COMM_HEXCHAR
         MVI   P.PR_LABEL_NEXT+8,C' '
         MVC   P.PR_LABEL_NAME,LABEL_NAME
         MVC   P.PR_LABEL_TYPE,LABEL_TYPE
         UNPK  P.PR_LABEL_DISP(9),LABEL_DISP(5)
         TR    P.PR_LABEL_DISP,COMM_HEXCHAR
         MVI   P.PR_LABEL_DISP+8,C' '
         UNPK  P.PR_LABEL_EQU_PREV(9),LABEL_EQU_NEXT(5)
         TR    P.PR_LABEL_EQU_PREV,COMM_HEXCHAR
         MVI   P.PR_LABEL_EQU_PREV+8,C' '
         UNPK  P.PR_LABEL_EQU_NEXT(9),LABEL_EQU_NEXT(5)
         TR    P.PR_LABEL_EQU_NEXT,COMM_HEXCHAR
         MVI   P.PR_LABEL_EQU_NEXT+8,C' '
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         ICM   R5,15,LABEL_EQU_NEXT        ANY EQU BLOCKS?
         BZ    DBUG0340                    NO
         BAL   R6,DBUG0350                 PROCESS EQU BLOCKS
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO(LABEL_HEADING_L),LABEL_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0340 DS    0H
         ICM   R4,15,LABEL_NEXT            NEXT LABL BLOCK
         BNZ   DBUG0330                    LOOP
         BR    R8                          RETURN
         DROP  P
* ------------------------------------------------------------------- *
*             PROCESS EQU BLOCKS                                      *
* ------------------------------------------------------------------- *
DBUG0350 DS    0H
         USING EQU_DSECT,R5
         PUT   DISDEBUG_DCB,COMM_BLANKS
         MVC   COMM_DEBUG_IO(EQU_HEADING_L),EQU_HEADING
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
DBUG0360 DS    0H
         ITRACE ID=EQU,                                                +
               RDATA1=R5
         MVC   COMM_DEBUG_IO(PR_EQU_L),PR_EQU
P        USING PR_EQU,COMM_DEBUG_IO
         ST    R5,COMM_DWORD
         UNPK  P.PR_EQU_ADDR(9),COMM_DWORD(5)
         TR    P.PR_EQU_ADDR,COMM_HEXCHAR
         MVI   P.PR_EQU_ADDR+8,C' '
         UNPK  P.PR_EQU_PREV(9),EQU_PREV(5)
         TR    P.PR_EQU_PREV,COMM_HEXCHAR
         MVI   P.PR_EQU_PREV+8,C' '
         UNPK  P.PR_EQU_NEXT(9),EQU_NEXT(5)
         TR    P.PR_EQU_NEXT,COMM_HEXCHAR
         MVI   P.PR_EQU_NEXT+8,C' '
         MVC   DXD_WORK(1),EQU_VALUE
         UNPK  P.PR_EQU_VALUE(3),DXD_WORK(2)
         TR    P.PR_EQU_VALUE,COMM_HEXCHAR
         MVI   P.PR_EQU_VALUE+2,C' '
         MVC   P.PR_EQU_LABEL,EQU_LABEL
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         ICM   R5,15,EQU_NEXT
         BNZ   DBUG0360
         BR    R6
         DROP  P
* ------------------------------------------------------------------- *
*             PRINT DATA                                              *
* ------------------------------------------------------------------- *
DBUG0370 DS    0H
         ITRACE ID=DBUG0370
         PUT   DISDEBUG_DCB,COMM_DEBUG_IO
         MVC   COMM_DEBUG_IO,COMM_BLANKS
         B     EXIT0000                    EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DBUG0400 DS    0H
         ITRACE ID=NO_DEBUG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                 RESTORE REGISTER 13          ASE01670
         LM    R14,R12,12(R13)             RESTORE ALL OTHER REGISTERS  ASE01680
         SR    R15,R15                     GIVE GOOD RETURN CODE        ASE01690
         BR    R14                         RETURN TO CALLER             ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START           DC    Q(DXDDEBUG)

C_DATA              DC    CL6'DATA'
C_USER              DC    CL8'USER'
C_ADCON             DC    CL8'ADCON'
C_VCON              DC    CL8'VCON'
C_INTERNAL          DC    CL8'INTERNAL'
C_PSEUDO            DC    CL8'PSUEDO'
C_CXD               DC    CL8'CXD'
C_Q                 DC    CL8'Q'
P0                  DC    P'0'
P1                  DC    P'1'
P65                 DC    P'65'

DEBUG_HEADING       DS    0C
                    DC    C'1'
                    DC    C'Debug call '
HEADING_CALL        DC    X'40202120'
                    DC    CL20' '
                    DC    C'Disassembler debug'
DEBUG_HEADING_L     EQU   *-DEBUG_HEADING

PR_TRACE            DS    0C
                    DC    C'TRACE TABLE FIRST '
PR_TRACE_1ST        DC    CL8' '
                    DC    C'   LAST '
PR_TRACE_LAST       DC    CL8' '
                    DC    C'   CURRENT '
PR_TRACE_CURRENT    DC    CL8' '
                    DC    C' '
PR_TRACE_L          EQU   *-PR_TRACE

ESD_HEADING         DS    0C
                    DC    CL8'ESD'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL8'NAME    '
                    DC    C' '
                    DC    CL8'RESIDENT'
                    DC    C' '
                    DC    CL8'TARGET  '
                    DC    C' '
                    DC    C'TYPE'
                    DC    C' '
                    DC    C'QUALIFIER'
                    DC    C' '
                    DC    C'LENGTH'
                    DC    C' '
                    DC    C'ELEMENT OFFSET'
                    DC    C' '
                    DC    C'CLASS OFFSET'
ESD_HEADING_L       EQU   *-ESD_HEADING

PR_ESD              DS    0C
PR_ESD_BLOCK_ADDR   DC    CL8' '
                    DC    C' '
PR_ESD_PREV         DC    CL8' '
                    DC    C' '
PR_ESD_NEXT         DC    CL8' '
                    DC    C' '
PR_ESD_NAME         DC    CL8' '
                    DC    c' '
PR_ESD_RESIDENT     DC    CL8' '
                    DC    C' '
PR_ESD_TARGET       DC    CL8' '
                    DC    C'   '
PR_ESD_TYPE         DC    CL2' '
                    DC    C'   '
PR_ESD_TYPE_QUAL    DC    CL2' '
                    DC    C'      '
PR_ESD_LENGTH       DC    CL7' '
                    DC    C'    '
PR_ESD_ELEM_OFFSET  DC    CL8' '
                    DC    C'     '
PR_ESD_CLASS_OFFSET DC    CL8' '
PR_ESD_L            EQU   *-PR_ESD


RLD_HEADING         DS    0C
                    DC    CL8'RLD'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL8' BEGIN  '
                    DC    C' '
                    DC    CL8'  END   '
                    DC    C' '
                    DC    CL8'  REF   '
                    DC    C' '
                    DC    C'TYPE'
                    DC    C' '
                    DC    C'LENGTH'
                    DC    C' '
                    DC    C'DIRECTION'
                    DC    C' '
                    DC    C'VCON/Q NAME'
RLD_HEADING_L       EQU   *-RLD_HEADING

USING_HEADING       DS    0C
                    DC    CL8'USING'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    C'  FLAGS'
                    DC    C' REG    '
                    DC    CL8'  DISP  '
                    DC    CL8'   BEGIN'
                    DC    C' '
                    DC    CL8'    END'
                    DC    CL3' '
                    DC    C'DSECT/LABEL'
USING_HEADING_L     EQU   *-USING_HEADING

PR_USING            DS    0C
PR_USING_BLOCK_ADDR DC    CL8' '
                    DC    C' '
PR_USING_PREV       DC    CL8' '
                    DC    C' '
PR_USING_NEXT       DC    CL8' '
                    DC    C'     '
PR_USING_FLAG       DC    CL2' '
                    DC    C'  '
PR_USING_REGISTER   DC    CL3' '
                    DC    C'     '
PR_USING_DISP       DC    CL8' '
                    DC    C' '
PR_USING_BEGIN      DC    CL8' '
                    DC    C' '
PR_USING_END        DC    CL8' '
                    DC    C' '
PR_USING_NAME       DC    CL63' '
                    DC    C' '
PR_USING_L          EQU   *-PR_USING

DSECT_HEADING       DS    0C
                    DC    CL8'DSECT'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL63'DSECT NAME'
DSECT_HEADING_L     EQU   *-DSECT_HEADING

PR_DSECT            DS    0C
PR_DSECT_BLOCK_ADDR DC    CL8' '
                    DC    C' '
PR_DSECT_PREV       DS    CL8' '
                    DC    C' '
PR_DSECT_NEXT       DS    CL8' '
                    DC    C'  '
PR_DSECT_NAME       DC    CL63' '
PR_DSECT_L          EQU   *-PR_DSECT

BASE_HEADING        DS    0C
                    DC    CL8'BASE'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' REGISTER '
                    DC    CL8' BEGIN '
                    DC    C' '
                    DC    CL8'  END   '
                    DC    C' DISP REFERRED TO'
BASE_HEADING_L      EQU   *-BASE_HEADING

PR_BASE             DS    0C
PR_BASE_BLOCK_ADDR  DS    CL8' '
                    DC    C' '
PR_BASE_PREV        DC    CL8' '
                    DC    C' '
PR_BASE_NEXT        DC    CL8' '
                    DC    C'   '
PR_BASE_REGISTER    DC    CL3' '
                    DC    C'       '
PR_BASE_BEGIN       DC    CL8' '
                    DC    C' '
PR_BASE_END         DC    CL8' '
                    DC    C' '
PR_BASE_DISP        DC    CL8' '
                    DC    C' '
PR_BASE_L           EQU   *-PR_BASE

AREA1_HEADING       DS    0C
                    DC    CL8'AREA1 '
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL8' BEGIN  '
                    DC    C' '
                    DC    CL8'  END   '
                    DC    C' '
                    DC    CL8' LENGTH '
                    DC    C' '
                    DC    CL6'OPCODE'
                    DC    C' '
                    DC    C'DATATYPE'
                    DC    C' '
                    DC    C'LABEL   '
                    DC    C' '
                    DC    C'RLD NAME'
                    DC    C' '
                    DC    CL13'LABEL 1'
                    DC    C' '
                    DC    CL13'LABEL 2'
AREA1_HEADING_L     EQU   *-AREA1_HEADING

AREA2_HEADING       DS    0C
                    DC    CL8'AREA2 '
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL8' BEGIN  '
                    DC    C' '
                    DC    CL8'  END   '
                    DC    C' '
                    DC    CL8' LENGTH '
                    DC    C' '
                    DC    CL6'OPCODE'
                    DC    C' '
                    DC    C'DATATYPE'
                    DC    C' '
                    DC    C'LABEL   '
                    DC    C' '
                    DC    C'RLD NAME'
                    DC    C' '
                    DC    CL13'LABEL 1'
                    DC    C' '
                    DC    CL13'LABEL 2'
AREA2_HEADING_L     EQU   *-AREA2_HEADING

AREAALL_HEADING     DS    0C
                    DC    CL8'AREA ALL'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' '
                    DC    CL8' BEGIN  '
                    DC    C' '
                    DC    CL8'  END   '
                    DC    C' '
                    DC    CL8' LENGTH '
                    DC    C' '
                    DC    CL6'OPCODE'
                    DC    C' '
                    DC    C'DATATYPE'
                    DC    C' '
                    DC    C'LABEL   '
                    DC    C' '
                    DC    C'RLD NAME'
                    DC    C' '
                    DC    CL13'LABEL 1'
                    DC    C' '
                    DC    CL13'LABEL 2'
AREAALL_HEADING_L   EQU   *-AREAALL_HEADING

PR_AREA             DS    0C
PR_AREA_BLOCK_ADDR  DC    CL8' '
                    DC    C' '
PR_AREA_PREV        DC    CL8' '
                    DC    C' '
PR_AREA_NEXT        DC    CL8' '
                    DC    C' '
PR_AREA_BEGIN       DC    CL8' '
                    DC    C' '
PR_AREA_END         DC    CL8' '
                    DC    C' '
PR_AREA_LENGTH      DC    CL8' '
                    DC    C' '
PR_AREA_OPCODE      DC    CL6' '
                    DC    C' '
PR_AREA_DATA_TYPE   DC    CL8' '
                    DC    C' '
PR_AREA_LABEL       DC    CL8' '
                    DC    C' '
PR_AREA_RLD_NAME    DC    CL8' '
                    DC    C' '
PR_AREA_REF_LABEL1  DC    CL20' '
PR_AREA_PLUS1       DC    C' '
PR_AREA_REF_DISP1   DC    CL4' '
                    DC    C' '
PR_AREA_REF_LABEL2  DC    CL20' '
PR_AREA_PLUS2       DC    C' '
PR_AREA_REF_DISP2   DC    CL4' '
                    DC    C' '
PR_AREA_L           EQU   *-PR_AREA

LABEL_HEADING       DS    0C
                    DC    CL2' '
                    DC    CL8'LABEL'
                    DC    C' '
                    DC    CL8'  PREV '
                    DC    C' '
                    DC    CL8'  NEXT '
                    DC    C'   DISP  '
                    DC    C' TYPE  '
                    DC    C' EQUATE'
                    DC    CL15' '
                    DC    CL63'NAME'
LABEL_HEADING_L     EQU   *-LABEL_HEADING

PR_LABEL            DS    0C
                    DC    CL2' '
PR_LABEL_BLOCK_ADDR DC    CL8' '
                    DC    C' '
PR_LABEL_PREV       DC    CL8' '
                    DC    C' '
PR_LABEL_NEXT       DC    CL8' '
                    DC    C' '
PR_LABEL_DISP       DC    CL8' '
                    DC    C'   '
PR_LABEL_TYPE       DC    C' '
                    DC    C'    '
PR_LABEL_EQU_PREV   DC    CL8' '
                    DC    C'    '
PR_LABEL_EQU_NEXT   DC    CL8' '
                    DC    C' '
PR_LABEL_NAME       DC    CL63' '
                    DC    C' '
PR_LABEL_L          EQU   *-PR_LABEL

EQU_HEADING         DS    0C
                    DC    CL4' '
                    DC    CL8'EQU'
                    DC    C' '
                    DC    CL8'  PREV  '
                    DC    C' '
                    DC    CL8'  NEXT  '
                    DC    C' VALUE '
                    DC    C'LABEL'
EQU_HEADING_L       EQU   *-EQU_HEADING

PR_EQU              DS    0C
                    DC    CL4' '
PR_EQU_ADDR         DC    CL8' '
                    DC    C' '
PR_EQU_PREV         DS    CL8' '
                    DC    C' '
PR_EQU_NEXT         DS    CL8' '
                    DC    C'  '
PR_EQU_VALUE        DC    CL2' '
                    DC    C'   '
PR_EQU_LABEL        DC    CL63' '
PR_EQU_L            EQU   *-PR_EQU

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDDEBUG       DSECT
               DS    18F
DXD_CSECT      DS    CL8
DXD_WORK       DS    XL8
               DS    X
DXD_CALL       DS    PL2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY     DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY     REGEQU
               END      DISDEBUG
./ ADD NAME=DISDINFO 0119-09008-09198-0838-00325-00298-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*   Determine data set type                                           *
*                                                                     *
*   If the VOLSER was not given, call catalog service using IGGCSI00. *
*      If the data set is non-VSAM issue OBTAIN to read the FORMAT-1  *
*      using the VOLSER returned by catalog services.                 *
*                                                                     *
*   If the VOLSER was given, issue OBTAIN to read the FORMAT-1 from   *
*      the specified volume.                                          *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISDINFO CSECT
DISDINFO AMODE  31
DISDINFO RMODE  ANY
         USING  DISDINFO,R15
         USING  DISCOMM,R12
         STM    R14,R12,12(R13)               SAVE REGISTERS
         LR     R11,R15                       COPY BASE ADDRESS
         B      INIT0000
MODID    DC     CL8'DISDINFO'
         DC     CL8'&SYSDATE'
         DC     CL8'&SYSTIME'
INIT0000 DS     0H
         DROP   R15
         USING  DISDINFO,R11
         L      R15,COMM_DXD_ADDRESS          DXD AREA BASE ADDRESS
         A      R15,DXD_START                 PLUS OFFSET
         ST     R13,4(,R15)
         ST     R15,8(,R13)
         LR     R13,R15                       COPY DXD AREA ADDRESS
         USING  DXDDINFO,R13                  DEFINE WORK AREA BASE
         MVC    DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_DSINFO_DSN+00,                               +
               DATA2=COMM_DSINFO_DSN+08
         ITRACE ID=+,                                                  +
               DATA1=COMM_DSINFO_DSN+16,                               +
               DATA2=COMM_DSINFO_DSN+24
         LA    R0,DXD_CSI_DATA_LENGTH
         LA    R1,DXD_CSI_L
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INIT
         LA    R1,COMM_DSINFO_ERROR_INFO
         ST    R1,DXD_CSI_REASON_ADDRESS      SET ADDRESS
         LA    R8,DXD_CSI_SELECTION           CATALOG SEARCH CRITERIA
         ST    R8,DXD_CSI_SELECTION_ADDRESS   SET ADDRESS
         USING CSIFIELD,R8
         LA    R1,DXD_CSI_DATA_LENGTH         CSI AREA
         ST    R1,DXD_CSI_DATA_ADDRESS        SET ADDRESS
         MVC   DXD_CSI_DATA_LENGTH,CSI_DATA_LENGTH
         MVC   CSIFILTK,COMM_DSINFO_DSN       COPY DATA SET NAME
         MVC   CSICATNM,COMM_BLANKS           START WITH MASTER CATALOG
         MVC   CSIRESNM,COMM_BLANKS           NOT RESUMING A SEARCH
         MVC   CSIDTYPD,COMM_BLANKS           RETURN ALL ENTRY TYPES
         MVI   CSICLDI,C'Y'                   RETURN DATA AND INDEX
         MVI   CSIOPTNS,C'F'                  USE 4-BYTE LENGTHS
         MVI   CSIS1CAT,C' '                  SEARCH ALL CATALOGS
         MVI   CSIRESUM,C' '                  THIS IS INITIAL CALL
         MVC   CSINUMEN,H1                    NUMBER OF FIELDS WANTED
         MVC   CSIFLDNM,C_VOLSER              NAME OF FIELD
         LOAD  EP=IGGCSI00                    LOAD THE CSI INTERFACE
         LR    R15,R0                         COPY ENTRY POINT
         LA    R1,DXD_CSI_PARMS               PARAMETER LIST
         ITRACE ID=CALL_CSI,                                           +
               RDATA1=R1,                                              +
               RDATA2=R15
         BALR  R14,R15                        CALL CATALOG SEARCH
         LR    R2,R15                         SAVE RETURN CODE
         DELETE EP=IGGCSI00                   DELETE IGGCSI00
         ITRACE ID=CSI_RC,                                             +
               RDATA1=R2,                                              +
               DATA2=DXD_CSI_CATALOG_FLAG
         LTR   R2,R2                          LOOKUP SUCCESSFUL?
         BNZ   ERR0030                        NO
         TM    DXD_CSI_CATALOG_FLAG,$NOT_CATALOGED
         BO    ERR0020                        DATA SET NOT CATALOGED
INFO0010 DS    0H
         ITRACE ID=TYPE,                                               +
               DATA1=DXD_CSI_ENTRY_TYPE,                               +
               DATA2=DXD_VOLSERS
         CLI   DXD_CSI_ENTRY_TYPE,C'A'        NONVSAM?
         BE    INFO0060                       YES
         CLI   DXD_CSI_ENTRY_TYPE,C'C'        VSAM?
         BE    INFO0020                       YES
         CLI   DXD_CSI_ENTRY_TYPE,C'D'        DATA COMPONENT?
         BE    INFO0030                       YES
         CLI   DXD_CSI_ENTRY_TYPE,C'H'        GDG MEMBER?
         BE    INFO0040                       YES
         CLI   DXD_CSI_ENTRY_TYPE,C'I'        INDEX COMPONENT?
         BE    INFO0050                       YES
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_OTHER
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        For VSAM do not try to OBTAIN the DSCB.  The DATA, INDEX,    *
*        or other components may not have the same name as the        *
*        CLUSTER.                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
INFO0020 DS    0H
         ITRACE ID=VSAM1
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_VSAM
         B     EXIT0000
INFO0030 DS    0H
         ITRACE ID=VSAMDATA
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_DATA
         B     INFO0070
INFO0040 DS    0H
         ITRACE ID=GDG
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_GDG
         B     INFO0070
INFO0050 DS    0H
         ITRACE ID=VSAMINDX
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_INDEX
         B     INFO0070
INFO0060 DS    0H
         ITRACE ID=NON_VSAM
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_NONVSAM
* ------------------------------------------------------------------- *
*                                                                     *
*      If the VOLSER is all asterisks (******), change it to          *
*      the SYSRES VOLSER.                                             *
*                                                                     *
* ------------------------------------------------------------------- *
INFO0070 DS    0H
         L     R14,CVTPTR                     ADDRESS OF THE CVT
         USING CVT,R14                        DEFINE BASE
         L     R15,CVTSYSAD                   SYSRES UCB'S ADDRESS
         USING UCBOB,R15                      DEFINE BASE
* ------------------------------------------------------------------- *
*                                                                     *
*     Sometime this probably should allow multiple VOLSERs.           *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   DXD_VOLSERS(6),=C'******'
         BNE   INFO0100
         MVC   DXD_VOLSERS,UCBVOLI
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     I would much rather use an IBM supplied macro to map the        *
*     CAMLST or even better, see IBM re-code the OBTAIN macro         *
*     with a MF=E/I/L type parameter to allow dynamic specification   *
*     of parameters.  So far I haven't found any such mapping         *
*     macro or member of SYS1.MACLIB or SYS1.MODGEN.                  *
*                                                                     *
*     So.. I'll copy a hard-coded CAMLST and over-store some of       *
*     the data.                                                       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
INFO0100 DS    0H
         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_NONVSAM
         BNE   EXIT0000                       NO
         ITRACE ID=GET_DSCB,                                           +
               DATA1=DXD_VOLSERS
         MVC   DXD_CAMLST(CAMLST_L),CAMLST_I
         LA    R1,COMM_DSINFO_DSN             DSN
         ST    R1,DXD_CAMLST+4                SET ADDRESS
         LA    R1,DXD_VOLSERS                 VOLSER
         ST    R1,DXD_CAMLST+8                SET ADDRESS
         LA    R1,DS1FMTID                    RETURNED INFO
         ST    R1,DXD_CAMLST+12               SET ADDRESS
         LA    R1,DXD_CAMLST                  CAMLST ADDRESS
         ITRACE ID=OBTAIN,                                             +
               RDATA1=R1
         OBTAIN (R1)                          READ DSCB
         ITRACE ID=OBTN_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=DSORG,                                              +
               DATA1=DS1DSORG
         TM    DS1DSORG+0,DS1DSGPS            SEQUENTIAL?
         BO    INFO0200                       YES
         TM    DS1DSORG+0,DS1DSGDA            DIRECT ACCESS?
         BO    INFO0200                       YES
         TM    DS1DSORG+0,DS1DSGPO            PDS?
         BO    INFO0210                       YES
         B     EXIT0000
INFO0200 DS    0H
         ITRACE ID=PS
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_PS
         B     EXIT0000
INFO0210 DS    0H
         ITRACE ID=PO
         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'0'
ERR0020  DS    0H
         ITRACE ID=NOTCATLG
         MVC   COMM_DSINFO_MSG(ERR01_L),ERR01
         LA    R2,8
         B     EXIT0000
ERR0030  DS    0H
         ITRACE ID=CAT_ERR,                                            +
               DATA1=COMM_DSINFO_ERROR_INFO
         MVC   COMM_DSINFO_MSG(ERR02_L),ERR02
         UNPK  COMM_DSINFO_MSG+(ERR02_INFO-ERR02)(9),COMM_DSINFO_ERROR_+
               INFO(5)
         TR    COMM_DSINFO_MSG+(ERR02_INFO-ERR02)(5),COMM_HEXCHAR
         MVI   COMM_DSINFO_MSG+(ERR02_INFO-ERR02)+8,C' '
         LA    R2,8
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R2,                                              +
               DATA2=COMM_DATASET_TYPE
         L     R13,4(,R13)
         L     R14,12(,R13)
         LR    R15,R2
         LM    R0,R12,20(R13)
         BR    R14
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START            DC    Q(DXDDINFO)
CSI_DATA_LENGTH      DC    A($CSI_DATA_LENGTH)

CAMLST_I             CAMLST SEARCH,*,*,*
CAMLST_L             EQU   *-CAMLST_I

H1                   DC    H'1'
C_VOLSER             DC    CL8'VOLSER'

ERR01                DC    C'Not cataloged'
ERR01_L              EQU   *-ERR01

ERR02                DC    C'Catalog info error '
ERR02_INFO           DC    CL8' '
                     DC    C' '
ERR02_L              EQU   *-ERR02

                     LTORG

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDINFO                  DSECT
                          COPY  DXDPREF

DXD_CAMLST                DS    0F,(CAMLST_L)X

DXD_CSI_PARMS             DS    0A
DXD_CSI_REASON_ADDRESS    DS    A
DXD_CSI_SELECTION_ADDRESS DS    A
DXD_CSI_DATA_ADDRESS      DS    A

DXD_CSI_SELECTION         DS    (CSIFIELD_L)X


DXD_CSI_DATA_LENGTH       DS    F           LENGTH OF WORK AREA
DXD_CSI_DATA_AREA         DS    0A,($CSI_DATA_LENGTH)X
                          ORG   DXD_CSI_DATA_AREA
DXD_CSI_REQUIRED_LENGTH   DS    F
DXD_CSI_USED_LENGTH       DS    F           LENGTH USED
DXD_CSI_FIELD_NAMES       DS    H           NUMBER OF FIELD NAMES + 1

DXD_CSI_CATALOG_FLAG      DS    X
$NOT_CATALOGED            EQU   X'40'       .. DATA SET NOT CATALOGED

DXD_CSI_CATALOG_TYPE      DS    C           ALWAYS C'0'
DXD_CSI_CATALOG_NAME      DS    CL44        CATALOG NAME
                          DS    CL2         MODULE ID
                          DS    X           REASON CODE
                          DS    X           RETURN CODE

DXD_CSI_ENTRY_FLAG        DS    X
DXD_CSI_ENTRY_TYPE        DS    C
*                               C'A'        .. NONVSAM
*                               C'C'        .. CLUSTER
*                               C'D'        .. DATA COMPONENT
*                               C'H'        .. MEMBER OF A GDG
*                               C'I'        .. INDEX COMPONENT
*                               C'F'        .. HFS
*                               C'T'        .. VTOC
DXD_CSI_ENTRY_NAME        DS    CL44        ENTRY NAME (S/B DSN)
                          DS    CL2         MODULE NAME
                          DS    X           REASON CODE
                          DS    X           RETURN CODE

                          DS    XL2         TOTAL LENTH OF INFO
                          DS    XL2         RESERVED
DXD_CSI_VOLSER_LENGTH     DS    XL4         LENGTH OF FIELD S/B 6
DXD_VOLSERS               DS    16CL6
                          ORG
DXD_CSI_L                 EQU   *-DXD_CSI_DATA_LENGTH

                          IECSDSL1 1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 CVT      DSECT=YES,LIST=NO

                 IEFUCBOB PREFIX=YES,LIST=NO

                 COPY     IGGCSINA
CSIFIELD_L       EQU      *-CSIFIELD

                 IFGACB   AM=VSAM
ACB_L            EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISCOMM  TYPE=DSECT
                 COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
$CSI_DATA_LENGTH EQU      1024
                 COPY     REGEQU
                 END      DISDINFO
./ ADD NAME=DISDIR   0101-09119-09198-0838-00445-00445-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISDIR                                               *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   Display the members of the LMOD library as a scrollable list     *
*                                                                    *
*--------------------------------------------------------------------*
DISDIR   CSECT
DISDIR   AMODE 31
DISDIR   RMODE ANY
         USING DISDIR,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDIR'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDIR,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         MVC   DXD_DESERV(DESERV_L),DESERV_I
         LA    R1,DXD_CHAIN_PREV
         ST    R1,DXD_CHAIN_LAST
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0000 DS    0H
         ITRACE ID=GET_ALL
         DESERV FUNC=GET_ALL,                 ALL DIRECTORY ENTRIES    +
               AREAPTR=DXD_ADDR,              .. BUFFER FOR DATA       +
               CONN_INTENT=NONE,              .. NO CONNECTION INTENT  +
               DCB=DISMOD_DCB,                .. DCB                   +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_DESERV,COMPLETE)
         ITRACE ID=DE_RC,                                              +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         OC    DXD_RETURN_CODE,DXD_RETURN_CODE
         BNZ   ERR0010
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         L     R7,DXD_ADDR                       RETURNED DATA
         USING DESB,R7
MAIN0010 DS    0H
         L     R6,DESB_COUNT                     NBR OF DESB'S
         LA    R5,DESB_DATA                      FIRST SMDE
         USING SMDE,R5
MAIN0020 DS    0H
         GETMAIN RU,                                                   +
               LV=CHAIN_L,                                             +
               LOC=ANY
         LR    R4,R1                             COPY ADDRESS
         USING CHAIN,R4
         XC    CHAIN(CHAIN_L),CHAIN              INITIALIZE
         L     R3,DXD_CHAIN_LAST                 LAST BLOCK GETMAINED
LAST     USING CHAIN,R3
         ST    R4,LAST.CHAIN_NEXT                CHAIN TO LAST BLOCK
         ST    R3,CHAIN_PREV                     CHAIN PREV BLOCK
         DROP  LAST
         ST    R4,DXD_CHAIN_LAST                 SAVE LAST ON CHAIN
         ITRACE ID=NEW,                                                +
               RDATA1=R4,                                              +
               DATA2=0(R3)
         SR    R2,R2                             CLAR R2
         ICM   R2,3,SMDE_NAME_OFF                NAME OFFSET
         AR    R2,R5                             PLUS BASE
         SR    R1,R1
         ICM   R1,3,0(R2)                        LENGTH OF NAME
         CH    R1,=Y(L'CHAIN_NAME)               TOO LONG?
         BNH   MAIN0030                          NO
         LH    R1,=Y(L'CHAIN_NAME)               LIMIT LENGTH
MAIN0030 DS    0H
         BCTR  R1,0
         MVC   CHAIN_NAME,COMM_BLANKS            INITIALIZE NAME
         EX    R1,NAME_MVC                       COPY NAME
         MVC   CHAIN_TTR,SMDE_MLT                COPY TTR
         SR    R14,R14
         ICM   R14,3,SMDE_PMAR_OFF               OFFSET TO PMAR
         AR    R14,R6                            PLUS BASE
         USING PMAR,R14                          DEFINE BASE
         MVC   CHAIN_ATR1,PMAR_ATR1
         MVC   CHAIN_ATR2,PMAR_ATR2
         MVC   CHAIN_ATR3,PMAR_ATR3
         MVC   CHAIN_ATR4,PMAR_ATR4
         MVC   CHAIN_ATR5,PMAR_ATR5
         MVC   CHAIN_AC,PMAR_AC
         MVC   CHAIN_STOR,PMAR_STOR
         MVC   CHAIN_EPM,PMAR_EPM
         MVC   CHAIN_EPA,PMAR_EPA
         MVC   CHAIN_SSI,PMAR_SSI
         ICM   R0,15,SMDE_LEN                    LENGTH OF THIS SMDE
         AR    R5,R0                             NEXT SMDE
         BCT   R6,MAIN0020                       LOOP
* ------------------------------------------------------------------- *
*        ALL ENTRIES IN THIS BLOCK PROCESSED.                         *
*        FREEMAIN THIS BLOCK AND CONTINUE WITH NEXT BLOCK.            *
* ------------------------------------------------------------------- *
         ICM   R0,15,DESB_LEN                 DESB LENGTH
         ICM   R0,8,DESB_SUBPOOL              INSERT SUBPOOL
         LR    R1,R7                          COPY DESB ADDRESS
         ICM   R7,15,DESB_NEXT                NEXT DESB
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=(0)
         LTR   R7,R7                          ADDITIONAL DESB'S?
         BNZ   MAIN0010                       YES
         DROP  R7,R5
* ------------------------------------------------------------------- *
*                                                                     *
*        All data processed.                                          *
*                                                                     *
*        Display the data as a scrollable list                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ICM   R4,15,DXD_CHAIN_NEXT              FIRST CHAIN BLOCK
         BZ    ERR0020                           NO DATA
         XC    CHAIN_PREV,CHAIN_PREV             CLEAR PREV BLOCK ADDR
MAIN0100 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS
         L     R1,COMM_VDATA_SIZE                VDATA SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R8,COMM_VDATA_ADDR
         USING DETAIL,R8
         L     R7,SPF_VDEPTH                     SCREEN DEPTH
         ST    R4,DXD_FIRST_DISPLAYED            SAVE FIRST DISPLAYED
         XC    DXD_LINES_BUILT,DXD_LINES_BUILT
MAIN0110 DS    0H
         ST    R4,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED
         MVI   DETAIL_ATTR_1,$ATTR_INPUT         SET ATTRIBUTE
         MVI   DETAIL_SELECT,C' '                INITIALIZE SELECT
         MVI   DETAIL_ATTR_2,$ATTR_HIGH_TURQUOISE
         MVC   DETAIL_NAME,CHAIN_NAME            SET NAME
         MVI   DETAIL_ATTR_3,$ATTR_NORMAL        SET ATTRIBUTE
         UNPK  DETAIL_TTR(7),CHAIN_TTR(4)        UNPACK TTR
         TR    DETAIL_TTR,COMM_HEXCHAR           TRANSLATE
         MVI   DETAIL_TTR+6,C' '
         TM    CHAIN_ATR1,PMAR_RENT              RE-ENTRANT?
         BNO   MAIN0120                          NO
         MVC   DETAIL_RENT,=C'RE'                INDICATE RE-ENTRANT
MAIN0120 DS    0H
         TM    CHAIN_ATR1,PMAR_REUS              RE-USABLE?
         BNO   MAIN0130                          NO
         MVC   DETAIL_REUS,=C'RU'                INDICATE REUSABLE
MAIN0130 DS    0H
         TM    CHAIN_ATR2,PMAR_REFR              REFRESHABLE?
         BNO   MAIN0140                          NO
         MVC   DETAIL_REFR,=C'RF'                INDICATE REFRESHABLE
MAIN0140 DS    0H
         MVC   DETAIL_RMODE,=C' 24'              ASSUME 24 BIT
         TM    CHAIN_ATR4,PMAR_RMOD              31-BIT?
         BNO   MAIN0150                          NO
         MVC   DETAIL_RMODE,=C' 31'              INDICATE 31-BIT
MAIN0150 DS    0H
         TM    CHAIN_ATR5,PMAR_RMOD64            64-BIT?
         BNO   MAIN0160                          NO
         MVC   DETAIL_RMODE,=C' 64'              INDICATE 64-BIT
MAIN0160 DS    0H
         MVC   DETAIL_AMODE,=C' 24'              ASSUME 24 BIT
         TM    CHAIN_ATR4,B'0011'                AMODE ANY?
         BNO   MAIN0170                          NO
         MVC   DETAIL_AMODE,=C'ANY'              INDICATE AMODE ANY
         B     MAIN0190
MAIN0170 DS    0H
         TM    CHAIN_ATR4,B'0010'                31 BIT?
         BNO   MAIN0180                          NO
         MVC   DETAIL_AMODE,=C' 31'
         B     MAIN0190
MAIN0180 DS    0H
         TM    CHAIN_ATR4,B'0001'                64 BIT?
         BNO   MAIN0190
         MVC   DETAIL_AMODE,=C' 64'              INDICATE 64 BIT
MAIN0190 DS    0H
         MVC   DETAIL_AC,CHAIN_AC                COPY AUTH CODE
         OI    DETAIL_AC,X'F0'                   TRANSLATE
         LA    R1,1
         AH    R1,DXD_LINES_BUILT                PLUS TOTAL SO FAR
         STH   R1,DXD_LINES_BUILT                UPDATE TOTAL
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0200
         B     MAIN0300
MAIN0200 DS    0H
         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN
         BNZ   MAIN0110                          LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        Display member list                                          *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=DISP
         MVC   COMM_SPF_PANEL,DIS0002
         L     R15,V_DISDISP                     COPY LIBRARY DSN
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                           RC = ZERO?
         BNZ   MAIN0500                          NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=ZVERB,                                              +
               DATA1=SPF_ZVERB
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0340                          YES
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0360                          YES
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0380                          YES
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0390                          YES
* ------------------------------------------------------------------- *
*        Check for line selection                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCAN
         L     R8,COMM_VDATA_ADDR                VDATA ADDRES
         LH    R7,DXD_LINES_BUILT                NBR OF LINES BUILT
MAIN0310 DS    0H
         CLI   DETAIL_SELECT,C' '                THIS MEMBER SELECTED?
         BNE   MAIN0320                          YES
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0310                       LOOP
         ITRACE ID=NO_SEL
         L     R4,DXD_FIRST_DISPLAYED            START AT SAME POINT
         B     MAIN0100
MAIN0320 DS    0H
         ITRACE ID=SELECTED,                                           +
               DATA1=DETAIL_NAME
         MVC   COMM_LMOD,DETAIL_NAME             SET LMOD NAME
         MVC   SPF_LMOD,DETAIL_NAME              SET LMOD NAME
         MVI   DXD_RC,0                          SET RC
         B     EXIT0000
* ------------------------------------------------------------------- *
*        Process scrolling                                            *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         ITRACE ID=BOTTOM
         L     R4,DXD_CHAIN_LAST                 LAST ON CHAIN
         L     R7,SPF_VDEPTH                     SCREEN DEPTH
         BCTR  R7,0
MAIN0350 DS    0H
         OC    CHAIN_PREV,CHAIN_PREV             PREVIOUS BLOCK EXIST?
         BZ    MAIN0100                          NO
         ICM   R4,15,CHAIN_PREV                  PREV BLOCK ON CHAIN
         BCT   R7,MAIN0350                       LOOP
         B     MAIN0100
MAIN0360 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX (BOTTOM)?
         BE    MAIN0340                          YES
         L     R4,DXD_FIRST_DISPLAYED            FIRST DISPLAYED
         L     R7,SPF_ZSCROLLN
MAIN0370 DS    0H
         OC    CHAIN_NEXT,CHAIN_NEXT             MORE ON CHAIN?
         BZ    MAIN0100                          NO
         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN
         BCT   R7,MAIN0370                       LOOP
         B     MAIN0100
MAIN0380 DS    0H
         ITRACE ID=TOP
         L     R4,DXD_CHAIN_NEXT                 FIRST CHAIN BLOCK
         B     MAIN0100                          BUILD DISPLAY
MAIN0390 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX (TOP)?
         BE    MAIN0380                          YES
         L     R4,DXD_FIRST_DISPLAYED            FIRST DISPLAYED
         L     R7,SPF_ZSCROLLN
MAIN0400 DS    0H
         OC    CHAIN_PREV,CHAIN_PREV             MORE ON CHAIN?
         BZ    MAIN0100                          NO
         ICM   R4,15,CHAIN_PREV                  PREVIOUS BLOCK
         BCT   R7,MAIN0400                       LOOP
         B     MAIN0100
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=CLEANUP
         MVI   DXD_RC,8                          SET RC
         ICM   R4,15,DXD_CHAIN_NEXT              FIRST CHAIN BLOCK
         BZ    EXIT0000                          EXIT
MAIN0510 DS    0H
         LR    R1,R4                             COPY ADDRESS
         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN
         ITRACE ID=FREE,                                               +
               RDATA1=R1
         FREEMAIN RU,                            FREEMAIN CHAIN BLOCK  +
               A=(1),                                                  +
               LV=CHAIN_L
         LTR   R1,R4                             ANOTHER BLOCK?
         BNZ   MAIN0510                          YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1
         STC   R15,COMM_INFO_01
         B     ERR0100
ERR0020  DS    0H
         MVI   COMM_MSG_ID,2
ERR0100  DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         MVC   COMM_SPF_PANEL,DIS0000
         L     R15,V_DISDISP
         BALR  R14,R15
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         SR    R15,R15                           CLEAR R15
         IC    R15,DXD_RC                        SET RC
         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670
         L     R14,12(,R13)                      RESTORE REGISTER 14    ASE01680
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
NAME_MVC MVC   CHAIN_NAME(0),2(R2)               COPY NAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START      DC   Q(DXDDIR)

DESERV_I       DESERV FUNC=GET_ALL,                                    +
               MF=L
DESERV_L       EQU   *-DESERV_I

DIS0000  DC    CL8'DIS0000'
DIS0002  DC    CL8'DIS0002'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDIR            DSECT
                  DS   18F
DXD_CSECT         DS   CL8

DXD_ADDR          DS  A                         RETURNED DATA ADDR
DXD_RETURN_CODE   DS  A                         DESERV RETURN CODE
DXD_REASON_CODE   DS  A                         DESERV REASON CODE

DXD_FIRST_DISPLAYED   DS A
DXD_LAST_DISPLAYED    DS A

DXD_CHAIN_LAST    DS  A                         LAST BLOCK GETMAINED

DXD_CHAIN_PREV    DS  A
DXD_CHAIN_NEXT    DS  A

DXD_DESERV        DS  0F,(DESERV_L)X

DXD_LINES_BUILT   DS  H
DXD_RC            DS  X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CHAIN             DSECT
CHAIN_PREV        DS   A
CHAIN_NEXT        DS   A
CHAIN_NAME        DS   CL8
CHAIN_TTR         DS   CL3
CHAIN_ATR1        DS   X             ATTRIBUTE BYTE 1
CHAIN_ATR2        DS   X             ATTRIBUTE BYTE 2
CHAIN_ATR3        DS   X             ATTRIBUTE BYTE 3
CHAIN_ATR4        DS   X             ATTRIBUTE BYTE 4
CHAIN_ATR5        DS   X             ATTRIBUTE BYTE 5
CHAIN_AC          DS   X             AUTH CODE
CHAIN_STOR        DS   XL4           VIRTUAL STORAGE REQUIRED
CHAIN_EPM         DS   XL4           MAIN ENTRY POINT OFFSET
CHAIN_EPA         DS   XL4           THIS ENTRY POINT OFFSET
CHAIN_SSI         DS   XL4           SSI INFORMATION
CHAIN_L           EQU  *-CHAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DETAIL            DSECT
DETAIL_ATTR_1     DS   X
DETAIL_SELECT     DS   X
DETAIL_ATTR_2     DS   X
DETAIL_NAME       DS   CL8
DETAIL_ATTR_3     DS   X
DETAIL_TTR        DS   CL6
                  DS   X
DETAIL_RENT       DS   CL2
                  DS   X
DETAIL_REUS       DS   CL2
                  DS   X
DETAIL_REFR       DS   CL2
                  DS   X
DETAIL_AC         DS   C
                  DS   X
DETAIL_AMODE      DS   CL3
                  DS   X
DETAIL_RMODE      DS   CL3
DETAIL_L          EQU  *-DETAIL
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DCBD    DSORG=PO
              IGWDES
              IEWPMAR
              IGWSMDE

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    ATTRS
              COPY    REGEQU
              END     DISDIR
./ ADD NAME=DISDISP  0103-08353-09198-0838-00126-00120-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISDISP                                              *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   DISPLAY and obtain scrolling variables                           *
*                                                                    *
*--------------------------------------------------------------------*
DISDISP CSECT
DISDISP AMODE 31
DISDISP RMODE ANY
         USING DISDISP,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDISP'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDISP,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD                   DISSPFD ADDR
         USING DISSPFD,R9                        DEFINE BASE
         ITRACE ID=DISP,                                               +
               DATA1=COMM_SPF_PANEL
         MVC   COMM_SPF_FUNCTION,DISPLAY         SET FUNCTION
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2                     SET PANEL ADDRESS
         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST
         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT
         BALR  R14,R15                           DISPLAY PANEL
         TM    COMM_FLAGS2,$DONT_CLEAR_MESSAGES
         BO    DISP0010
         NI    COMM_FLAGS2,255-$DONT_CLEAR_MESSAGES
         MVC   SPF_MSG_1,COMM_BLANKS             CLEAR MESSAGE
         MVC   SPF_MSG_2,COMM_BLANKS             CLEAR MESSAGE
         MVC   SPF_MSG_3,COMM_BLANKS             CLEAR MESSAGE
         MVC   SPF_MSG_4,COMM_BLANKS             CLEAR MESSAGE
         MVC   SPF_MSG_5,COMM_BLANKS             CLEAR MESSAGE
DISP0010 DS    0H
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R2,R15                            RC = ZERO?
         BNZ   EXIT0000                          NO
* ------------------------------------------------------------------- *
*                                                                     *
*        GET SCROLLING VARIABLES                                      *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0020 DS    0H
         MVC   COMM_SPF_FUNCTION,VGET            COMMAND
         LA    R1,NAME_LIST                      SYSTEM VARIABLES
         ST    R1,COMM_SPF_2                     SET ADDRESS
         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST
         ITRACE ID=VGET_2,                                             +
               RDATA1=R1
         L     R15,COMM_ISPLINK                  SPF INTERFACE
         BALR  R14,R15                           VGET SPF VARIABLE(S)
         ITRACE ID=VGET2_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   DISP0030                          NO
         TM    SPF_FLAGS,$SPF_VPUT               VPUT ALREADY ISSUED?
         BO    EXIT0000                          YES
DISP0030 DS    0H
         OI    SPF_FLAGS,$SPF_VPUT               SET FLAG
         MVC   COMM_SPF_FUNCTION,VPUT            COMMAND
         LA    R1,NAME_LIST
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'                  SET END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 PARM LIST ADDRESS
         L     R15,COMM_ISPLINK                  SPF INTERFACE
         BALR  R14,R15                           UPDATE SPF VARIABLE(S)
         ITRACE ID=VPUT2_RC,                                           +
               RDATA1=R15
         B     DISP0020                          DO VGET
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDDISP)

DISPLAY       DC   CL8'DISPLAY'
NAME_LIST     DC   C'(ZSCROLLA ZSCROLLN ZVERB)'
VGET          DC   CL8'VGET'
VPUT          DC   CL8'VPUT'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDDISP       DSECT
              DS   18F
DXD_CSECT     DS   CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA
              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    REGEQU
              END     DISDISP
./ ADD NAME=DISDLIST 0115-09111-09197-1422-00608-00575-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISDLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of data area(s)                         *
*                                                                     *
*                                                                     *
*  The disassembler tries to 'recognize' data on its own.  Still,     *
*  there are data areas of most programs that may be mis-intrpreted   *
*  as instructions.  To prevent this, the user can "tell" us where    *
*  data areas begin and end (by using the start and end displacments).*
*                                                                     *
*                                                                     *
*  User defined areas are chained from COMM_USER_AREA_NEXT_1.         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISDLIST CSECT
DISDLIST AMODE 31
DISDLIST RMODE ANY
         USING DISDLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING AREA_DSECT,R6
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing USER area chain.                   *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    DXD_FIRST_AREA,DXD_FIRST_AREA
         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         LA    R2,DXD_FIRST_AREA-4
PREV     USING AREA_DSECT,R2
         ICM   R6,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA
         BZ    INIT0020
INIT0010 DS    0H
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=COPY_1,                                             +
               RDATA1=R1
NEW      USING AREA_DSECT,R1
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),AREA_DSECT
         ST    R1,PREV.AREA_NEXT
         ST    R2,NEW.AREA_PREV
         LR    R2,R1
         ICM   R6,15,AREA_NEXT
         BNZ   INIT0010
         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_AREA
         DROP  NEW,PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         L     R0,SPF_VDEPTH                     NBR OF LINES
         SLL   R0,2                              MULTIPLY BY 4
         ST    R0,DXD_AREA_TABLE_SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_AREA_TABLE                 SAVE ADDRESS
         ITRACE ID=A_TABLE,                                            +
               RDATA1=R1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R0,DXD_AREA_TABLE
         L     R1,DXD_AREA_TABLE_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INIT AREA TABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
MAIN0020 DS    0H
         MVC   0(MSG01_L,R8),MSG01               INITIALIZE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0020                       LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         USING MSG01,R8
         L     R7,SPF_VDEPTH
MAIN0030 DS    0H
         L     R4,DXD_AREA_TABLE                 FIRST 'SLOT'
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY
         BZ    MAIN0060                          NOTHING DEFINED YET
MAIN0040 DS    0H
         ITRACE ID=AREA,                                               +
               RDATA1=R6,                                              +
               RDATA2=R8
         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR
         ST    R6,0(R4)                          SAVE ADDR
         UNPK  DXD_WORK(9),AREA_BEGIN(5)         UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE
         MVC   MSG01_BEGIN,DXD_WORK              COPY BEGIN
         UNPK  DXD_WORK(9),AREA_END(5)           UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE
         MVC   MSG01_END,DXD_WORK                COPY BEGIN
         UNPK  DXD_WORK(9),AREA_LENGTH(5)        UNPACK LENGTH
         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE
         MVC   MSG01_LENGTH,DXD_WORK             COPY LENGTH
         LA    R1,1                              CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL
         LA    R4,4(,R4)                         NEXT IN ADDR TABLE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R6,15,AREA_NEXT
         BNZ   MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                            RC = 0?
         BNZ   MAIN0500                          NO
         CLC   ABEND,SPF_ZCMD                    ABEND?
         BE    ABEND000                          YES
         CLC   CANCEL,SPF_ZCMD                   CANCEL?
         BE    MAIN0550                          YES
         CLC   CAN,SPF_ZCMD                      CAN(CEL)?
         BE    MAIN0550                          YES
* ------------------------------------------------------------------- *
*        Check new areas or changes to existing area(s)               *
* ------------------------------------------------------------------- *
         NI    DXD_FLAGS,255-$DXD_UPDATE         RESET FLAG
         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
MAIN0070 DS    0H
         MVC   MSG01_MSG,COMM_BLANKS
         OC    MSG01_BEGIN,COMM_BLANKS
         CLC   MSG01_BEGIN,COMM_BLANKS           BEGIN BLANK?
         BE    MAIN0090                          YES
         ITRACE ID=CNV_BEGN,                                           +
               DATA1=MSG01_BEGIN
         LA    R1,MSG01_BEGIN                    SOURCE DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_BEGIN                      OUTPUT OF CONVERSION
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15                           CHECK/CONV BEGIN
         LTR   R15,R15                           VALID?
         BNZ   MAIN0110                          NO
         OC    MSG01_END,COMM_BLANKS
         CLC   MSG01_END,COMM_BLANKS             END BLANK?
         BE    MAIN0120                          YES
         ITRACE ID=CNV_END,                                            +
               DATA1=MSG01_END
         LA    R1,MSG01_END                      SOURCE DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_END                        OUTPUT OF CONVERSION
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15                           CHECK/CONV BEGIN
         LTR   R15,R15                           VALID?
         BNZ   MAIN0110                          NO
         CLC   DXD_BEGIN,DXD_END                 BEGIN > END?
         BNH   MAIN0120                          NO
         MVI   COMM_MSG_ID,1                     SET MESSAGE ID
         B     MAIN0100
MAIN0090 DS    0H
         CLC   MSG01_END,COMM_BLANKS             END BLANK?
         BE    MAIN0120                          YES
         MVI   COMM_MSG_ID,3                     SET MESSAGE ID
MAIN0100 DS    0H
         ITRACE ID=ERROR,                                              +
               DATA1=COMM_MSG_ID
         BAL   R5,MSG0000                        BUILD MESSAGE
MAIN0110 DS    0H
         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE
         OI    DXD_FLAGS,$DXD_ERROR              ERROR HAS OCCURRED
MAIN0120 DS    0H
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0070                       LOOP
         TM    DXD_FLAGS,$DXD_ERROR              ERROR(S)?
         BO    MAIN0060                          YES
* ------------------------------------------------------------------- *
*                                                                     *
*        No errors have been found                                    *
*                                                                     *
*        Determine if any area(s) were                                *
*          updated                                                    *
*          removed                                                    *
*          added                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=NO_ERROR
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
         L     R4,DXD_AREA_TABLE                 FIRST AREA
MAIN0130 DS    0H
         L     R6,0(,R4)                         AREA BLOCK IF USED
         ITRACE ID=MAIN0130,                                           +
               RDATA1=R8,                                              +
               RDATA2=R6
         CLC   MSG01_BEGIN,COMM_BLANKS           BEGIN DISP BLANK?
         BE    MAIN0200                          YES
         LA    R1,MSG01_BEGIN                    SOURCE DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_BEGIN                      OUTPUT OF CONVERSION
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15                           CHECK/CONV BEGIN
         CLC   MSG01_END,COMM_BLANKS             END DISP BLANK?
         BE    MAIN0140                          YES
         LA    R1,MSG01_END                      SOURCE DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_END                        OUTPUT OF CONVERSION
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15                           CHECK/CONV BEGIN
         B     MAIN0150
MAIN0140 DS    0H
         MVC   DXD_END,COMM_CSECT_LENGTH         USE CSECT LENGTH
         MVI   COMM_MSG_ID,4                     SET MESSAGE ID
         BAL   R5,MSG0000                        BUILD MESSAGE
         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
*        Verify begin and/or end are less than CSECT length           *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0150 DS    0H
         CLC   DXD_BEGIN,COMM_CSECT_LENGTH       BEGIN > CSECT LENGTH?
         BH    MAIN0270                          YES
         CLC   DXD_END,COMM_CSECT_LENGTH         END > CSECT LENGTH?
         BNH   MAIN0155                          NO
         MVI   COMM_MSG_ID,5                     SET MESSAGE ID
         BAL   R5,MSG0000                        BUILD MESSAGE
         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE
         MVC   DXD_END,COMM_CSECT_LENGTH         LIMIT TO CSECT LENGTH
MAIN0155 DS    0H
         L     R1,DXD_END                        END DISP
         S     R1,DXD_BEGIN                      MINUS BEGIN
         LA    R1,1(,R1)                         TRUE LENGTH
         STCM  R1,15,DXD_LENGTH                  SET LENGTH
         LTR   R6,R6                             AREA EXIST?
         BZ    MAIN0170                          NO
         CLC   AREA_BEGIN,DXD_BEGIN              SAME BEGIN DISP?
         BNE   MAIN0160                          NO
         CLC   AREA_END,DXD_END                  SAME END DISP?
         BE    MAIN0250                          YES
MAIN0160 DS    0H
         ITRACE ID=UPDTAREA
         OI    DXD_FLAGS,$DXD_UPDATE             AREA HAS BEEN UPDATED
         MVC   AREA_BEGIN,DXD_BEGIN              CHANGE BEGIN DISP
         MVC   AREA_END,DXD_END                  CHANGE END DISP
         MVC   AREA_LENGTH,DXD_LENGTH            CHANGE LENGTH
         B     MAIN0250
MAIN0170 DS    0H
         OI    DXD_FLAGS,$DXD_UPDATE
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=NEW_AREA,                                           +
               RDATA1=R1
NEW      USING AREA_DSECT,R1
         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT
         MVC   NEW.AREA_EYE,AREA_ID              IDENTIFY BLOCK
         MVC   NEW.AREA_BEGIN,DXD_BEGIN          SET BEGIN DISP
         MVC   NEW.AREA_END,DXD_END              SET END DISP
         MVC   NEW.AREA_LENGTH,DXD_LENGTH        SET LENGTH
         MVI   NEW.AREA_TYPE,$AREA_DATA          SET AREA TYPE
         MVI   NEW.AREA_DATA_TYPE,$DATA_USER     USER DEFINED AREA
         LA    R6,DXD_FIRST_AREA-4               FIRST AREA
MAIN0180 DS    0H
         ICM   R2,15,AREA_NEXT                   ANOTHER ON CHAIN?
         BZ    MAIN0190                          YES
         LR    R6,R2                             COPY ADDRESS
         B     MAIN0180
MAIN0190 DS    0H
         ST    R1,AREA_NEXT                      SET 'NEXT' IN PREVIOUS
         ST    R6,NEW.AREA_PREV                  SET PREV IN NEW
         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         BNZ   MAIN0250                          BLOCK PRESENT
         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN
         B     MAIN0250
         DROP  NEW
MAIN0200 DS    0H
         LTR   R6,R6                             AREA EXIST?
         BZ    MAIN0250                          NO
         OI    DXD_FLAGS,$DXD_UPDATE             AN AREA WAS UPDATED
         ITRACE ID=DEL_AREA,                     DELETING AN AREA      +
               RDATA1=R6,                                              +
               DATA2=AREA_BEGIN
         ICM   R1,15,AREA_NEXT                   NEXT AREA ON CHAIN
         BZ    MAIN0210
NEXT     USING AREA_DSECT,R1
         MVC   NEXT.AREA_PREV,AREA_PREV          SET PREV IN NEXT
         DROP  NEXT
MAIN0210 DS    0H
         ICM   R1,15,AREA_PREV                   PREVIOUS ON CHAIN
         BZ    MAIN0220                          NO PREVIOUS BLOCK
PREV     USING AREA_DSECT,R1
         MVC   PREV.AREA_NEXT,AREA_NEXT          SET NEXT IN PREVIOUS
MAIN0220 DS    0H
         C     R6,DXD_FIRST_DISPLAYED            FIRST AREA DISPLAYED?
         BNE   MAIN0230                          NO
         MVC   DXD_FIRST_DISPLAYED,AREA_NEXT     CHANGE TO NEXT BLOCK
MAIN0230 DS    0H
         C     R6,DXD_FIRST_AREA                 FIRST AREA ON CHAIN?
         BNE   MAIN0240                          NO
         MVC   DXD_FIRST_AREA,AREA_NEXT          NEXT IS NOW FIRST
MAIN0240 DS    0H
         ITRACE ID=FREE_1,                                             +
               RDATA1=R6
         FREEMAIN RU,                            FREEMAIN THE AREA     +
               A=(R6),                                                 +
               LV=AREA_DSECT_L
         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE
MAIN0250 DS    0H
         ITRACE ID=NEXT
         A     R8,SPF_VWIDTH                     NEXT LINE
         LA    R4,4(,R4)                         NEXT IN TABLE
         BCT   R7,MAIN0130                       LOOP
         ICM   R6,15,DXD_FIRST_AREA              FIRST AREA
         BZ    MAIN0260                          NONE ON CHAIN
         XC    AREA_PREV,AREA_PREV               NO PREV BLOCK
MAIN0260 DS    0H
         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?
         BO    MAIN0010                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0270 DS    0H
         MVI   COMM_MSG_ID,6                     SET MESSAGE ID
         BAL   R5,MSG0000                        BUILD MESSAGE
         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE
         B     MAIN0060
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0400
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0420
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0440
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0450
         B     MAIN0050
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,DXD_FIRST_AREA              FIRST ON CHAIN
TEMP     USING AREA_DSECT,R1
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
MAIN0410 DS    0H
         LR    R6,R1                             SAVE THIS ADDR
         ICM   R1,15,TEMP.AREA_NEXT              NEXT AREA
         BNZ   MAIN0410
         B     MAIN0010                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0420 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0400                          YES
         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL
         L     R1,DXD_FIRST_DISPLAYED            1ST ON DISPLAY
MAIN0430 DS    0H
         ICM   R1,15,TEMP.AREA_NEXT              NEXT ON CHAIN
         BZ    MAIN0010                          AT END OF CHAIN
         ST    R1,DXD_FIRST_DISPLAYED
         BCT   R2,MAIN0430
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0440 DS    0H
         ITRACE ID=TOP
         L     R6,DXD_FIRST_AREA                 FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0450 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0440                          YES
         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0460 DS    0H
         ST    R1,DXD_FIRST_DISPLAYED            COPY ADDR
         ICM   R1,15,TEMP.AREA_PREV              PREVIOUS AREA
         BZ    MAIN0010
         BCT   R2,MAIN0460                       LOOP
         B     MAIN0010
         DROP  TEMP
* ------------------------------------------------------------------- *
*                                                                     *
*      Replace the existing USER area chain with the updated chain    *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=SWITCH,                                             +
               DATA1=COMM_USER_AREA_NEXT_1,                            +
               DATA2=DXD_FIRST_AREA
         ICM   R6,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA
         BZ    MAIN0520                          NOTHING ON CHAIN
MAIN0510 DS    0H
         LR    R1,R6                             COPY ADDRESS
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         ITRACE ID=FREE_2,                                             +
               RDATA1=R1
         FREEMAIN RU,                            FREEMAIN THIS AREA    +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R6,R6                             ANOTHER AREA?
         BNZ   MAIN0510                          YES
MAIN0520 DS    0H
         MVC   COMM_USER_AREA_NEXT_1,DXD_FIRST_AREA
         XC    DXD_FIRST_AREA,DXD_FIRST_AREA     RESET WORKING CHAIN
         ICM   R6,15,COMM_USER_AREA_NEXT_1       1ST USER AREA
         BZ    EXIT0000                          NO USER AREAS
         XC    AREA_PREV,AREA_PREV               ZERO 'PREV' ADDR
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0550 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS              RESET COMMAND
         ICM   R6,15,DXD_FIRST_AREA              FIRST NEW AREA
         BZ    EXIT0000                          NONE
MAIN0560 DS    0H
         LR    R1,R6                             COPY ADDRESS
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         ITRACE ID=FREE_3,                                             +
               RDATA1=R1
         FREEMAIN RU,                            FREEMAIN THIS AREA    +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R6,R6                             ANOTHER AREA?
         BNZ   MAIN0560                          YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         ITRACE ID=MSG,                                                +
               DATA1=COMM_MSG_ID
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R2
         L     R0,DXD_AREA_TABLE_SIZE            ADDR TABLE SIZE
         L     R1,DXD_AREA_TABLE                 ADDR TABLE ADDR
         ITRACE ID=FREE_TBL,                                           +
               RDATA1=R1,                                              +
               RDATA2=R0
         FREEMAIN RU,                            FREEMAIN ADDR TABLE   +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDDLIST)

AREA_ID       DC   CL8'AREA'
ABEND         DC   C'ABEND '
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
PANEL_NAME    DC   CL8'DISDDATA'

              LTORG

MSG01         DS   0C
              DC   AL1($ATTR_INPUT)
MSG01_BEGIN   DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($ATTR_INPUT)
MSG01_END     DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   CL3' '
MSG01_LENGTH  DC   CL8' '
              DC   AL1($ATTR_HIGH_YELLOW)
MSG01_MSG     DC   CL30' '
MSG01_L       EQU  *-MSG01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDLIST              DSECT
                      DS  18F

                      DS  A             DUMMY FOR 'PREV' ON CHAIN
DXD_FIRST_AREA        DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_AREA_TABLE        DS  A
DXD_AREA_TABLE_SIZE   DS  F

DXD_CONV_PARMS        DS  0A
DXD_CONV_SOURCE       DS  F
DXD_CONV_OUT          DS  F

DXD_BEGIN             DS  F
DXD_END               DS  F
DXD_LENGTH            DS  F
                      DS  X

DXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED

DXD_FLAGS             DS  X             FLAGS
$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR
$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED

DXD_WORK              DS  CL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISDLIST
./ ADD NAME=DISDMERG 0120-09121-09198-0800-00757-00711-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*   "Merge" the user identified data areas with RLD data items.       *
*                                                                     *
*   To this point, data areas may have been identified by one         *
*   of two ways.  One is the RLD data obtained from the binder.       *
*   The second is areas identified by the user. The data from         *
*   these two sources needs to be 'merged'  The end result is         *
*   a chain of AREA blocks that                                       *
*       1) is in ascending DISP sequence                              *
*       2) any duplicate or overlapping areas will have been          *
*          resolved.  That is a given displacement range              *
*          will only be referenced by one AREA block.                 *
*                                                                     *
*                                                                     *
*   The RLD items are identified by AREAs chained from                *
*   COMM_RLD_AREA_NEXT.  User identified areas are chained            *
*   COMM_USER_AREA_NEXT_1.  The merged data will be a chain           *
*   of AREA blocks chained from COMM_ALL_AREA_NEXT.                   *
*                                                                     *
* ------------------------------------------------------------------- *
DISDMERG CSECT
DISDMERG AMODE 31
DISDMERG RMODE ANY
         USING DISDMERG,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                     SAVE REGS
         LR    R11,R15                             SET BASE REG
         B     MOD0000                             SKIP EYECATCHER
MODID    DC    CL8'DISDMERG'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS                WORK AREA
         A     R15,DXD_START                       PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDMERG,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
I        USING AREA_DSECT,R7
U        USING AREA_DSECT,R6
PREV     USING AREA_DSECT,R5
         MVI   DUMMY_AREA,X'FF'
         MVC   DUMMY_AREA+1(AREA_DSECT_L-1),DUMMY_AREA
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   INIT0010
         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1
         L     R1,COMM_USER_AREA_NEXT_2
         CLI   AREA_BEGIN-AREA_DSECT(R1),X'FF'     DUMMY ENTRY?
         BE    INIT0010                            YES
         L     R15,V_DISXLIST
         BALR  R14,R15
         MVC   SPF_MSG_3(AREAMSG2_L),AREAMSG2
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Free 'area 2' chain                                          *
* ------------------------------------------------------------------- *
INIT0010 DS    0H
         ITRACE ID=FREE_2,                                             +
               DATA1=COMM_USER_AREA_NEXT_2
         ICM   R7,15,COMM_USER_AREA_NEXT_2         FIRST ON CHAIN
         BZ    INIT0030                            NONE ON CHAIN
         XC    COMM_USER_AREA_NEXT_2,COMM_USER_AREA_NEXT_2
INIT0020 DS    0H
         CLI   I.AREA_TYPE,X'FF'                   DUMMY AREA?
         BE    INIT0030                            YES
         LR    R1,R7
         L     R7,I.AREA_NEXT                      NEXT AREA ON CHAIN
         ITRACE ID=AREA,                                               +
               RDATA1=R1,                                              +
               RDATA2=R7
         FREEMAIN RU,                              FREE THIS AREA      +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R7,R7                               ANOTHER BLOCK?
         BNZ   INIT0020                            YES
* ------------------------------------------------------------------- *
*        Free 'ALL area' chain                                        *
* ------------------------------------------------------------------- *
INIT0030 DS    0H
         ITRACE ID=FREE_ALL,                                           +
               DATA1=COMM_ALL_AREA_NEXT
         ICM   R7,15,COMM_ALL_AREA_NEXT            FIRST ON INTERNAL
         BZ    MAIN0000                            NONE ON CHAIN
         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT
INIT0040 DS    0H
         LR    R1,R7
         L     R7,I.AREA_NEXT                      NEXT AREA ON CHAIN
         ITRACE ID=AREA,                                               +
               RDATA1=R1,                                              +
               RDATA2=R7
         FREEMAIN RU,                              FREE THIS AREA      +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R7,R7                               ANOTHER BLOCK?
         BNZ   INIT0040                            YES

* ------------------------------------------------------------------- *
*                                                                     *
*        Build internal area chain                                    *
*                                                                     *
*   The user may identify areas of the text as data via the "D"       *
*   option from the main menu.  Data areas are identified by          *
*   giving the starting and ending displacment.  The user may         *
*   identify multiple areas.  To make things easier for the user      *
*   the areas may be identified any order.  Also the user may         *
*   specify data areas that overlap.                                  *
*                                                                     *
*   .... this was hard to put into words (at least for me) ....       *
*                                                                     *
*   I wanted to preserve the data areas that were identified by       *
*   the user in the same form and order they identified them.         *
*   A dis-assembly is usually an iterative process.  The results      *
*   from one 'generate' process can often lead to a better            *
*   understanding of the code being examined.  Then data areas,       *
*   DSECTs, etc and be refined.  If the data areas identified         *
*   by the user were re-arranged, or otherwise updated for            *
*   internal use, it could confuse the user.                          *
*                                                                     *
*   ............................................................      *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *



* ------------------------------------------------------------------- *
*                                                                     *
*   Step 1                                                            *
*                                                                     *
*   Copy the user areas to the internal chain in ascending            *
*   order based on the starting displacement(s) only.                 *
*                                                                     *
*   The "U" quailifier is R6, chain 1                                 *
*   The "I" quallifier is R7, chain 2                                 *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         ITRACE ID=STEP1
         LA    R7,DUMMY_AREA                  DUMMY AREA
         ST    R7,COMM_USER_AREA_NEXT_2
         ICM   R6,15,COMM_USER_AREA_NEXT_1    FIRST ON USER
         BZ    MAIN0040                       NO USER DEFINED AREAS
         LA    R1,COMM_USER_AREA_PREV_2
         ST    R1,I.AREA_PREV                 SET 'PREV' IN DUMMY AREA
MAIN0010 DS    0H
         ICM   R7,15,COMM_USER_AREA_NEXT_2    1ST ON INTERNAL CHAIN
MAIN0020 DS    0H
         ITRACE ID=U,                                                  +
               RDATA1=R6,                                              +
               DATA2=U.AREA_BEGIN
         ITRACE ID=I,                                                  +
               RDATA1=R7,                                              +
               DATA2=I.AREA_BEGIN
         CLC   U.AREA_BEGIN,I.AREA_BEGIN      USER LOWER THAN INTERNAL?
         BH    MAIN0030                       NO
         GETMAIN RU,                          GETMAIN AN AREA BLOCK    +
               LOC=ANY,                                                +
               LV=AREA_DSECT_L
NEW      USING AREA_DSECT,R1
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),U.AREA_DSECT
         ITRACE ID=NEW,                                                +
               RDATA1=R1,                                              +
               DATA2=NEW.AREA_BEGIN
         L     R2,I.AREA_PREV
PREV     USING AREA_DSECT,R2
         ST    R1,PREV.AREA_NEXT
         ST    R2,NEW.AREA_PREV
         ST    R1,I.AREA_PREV
         ST    R7,NEW.AREA_NEXT
         ICM   R6,15,U.AREA_NEXT              NEXT ON USER AREA CHAIN
         BZ    MAIN0040                       END OF CHAIN REACHED
         B     MAIN0010                       INSERT THIS AREA
* ------------------------------------------------------------------- *
*                                                                     *
*        Remove "dummy" entry from chain                              *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0030 DS    0H
         ICM   R7,15,I.AREA_NEXT
         BNZ   MAIN0020
         DC    H'0'
         DROP  NEW,PREV
MAIN0040 DS    0H
         ICM   R7,15,COMM_USER_AREA_NEXT_2
         CLI   I.AREA_BEGIN,X'FF'
         BE    MAIN0080
MAIN0050 DS    0H
         ITRACE ID=USER2,                                              +
               RDATA1=R7,                                              +
               DATA2=I.AREA_BEGIN
         ICM   R1,15,I.AREA_NEXT
         BZ    MAIN0070
NEXT     USING AREA_DSECT,R1
         CLI   NEXT.AREA_BEGIN,X'FF'
         BE    MAIN0060
         LR    R7,R1
         B     MAIN0050
MAIN0060 DS    0H
         XC    I.AREA_NEXT,I.AREA_NEXT
MAIN0070 DS    0H
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   MAIN0080
         MVC   SPF_MSG_3(AREAMSG3_L),AREAMSG3
         L     R1,COMM_USER_AREA_NEXT_2
         L     R15,V_DISXLIST
         BALR  R14,R15
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
*   Step 2                                                            *
*                                                                     *
*   Combine areas that overlap or free areas "spanned" by another.    *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0080 DS    0H
A        USING AREA_DSECT,R7
B        USING AREA_DSECT,R6
         ICM   R7,15,COMM_USER_AREA_NEXT_2         1ST ON CHAIN
         ITRACE ID=STEP2,                                              +
               RDATA1=R7
         LTR   R7,R7                               ANYTHING ON CHAIN?
         BZ    MAIN0400                            NO.. SKIP STEP 3
         CLI   A.AREA_TYPE,X'FF'                   DUMMY AREA?
         BE    MAIN0400                            NO.. SKIP STEP 3
MAIN0090 DS    0H
         ICM   R6,15,A.AREA_NEXT                   1ST BLOCK AFTER "A"
         BZ    MAIN0180                            END OF CHAIN
         CLC   A.AREA_BEGIN,B.AREA_BEGIN           BEGIN AT SAME DISP?
         BNE   MAIN0130                            NO
* ------------------------------------------------------------------- *
*   Both begin at same disp                                           *
* ------------------------------------------------------------------- *
         CLC   A.AREA_END,B.AREA_END               END AT SAME DISP?
         BH    MAIN0110                            A > B
         BL    MAIN0120                            A < B
* ------------------------------------------------------------------- *
*   "A" and "B" are identical                                         *
*   FREEMAIN the "B" block                                            *
* ------------------------------------------------------------------- *
         ITRACE ID=DUP                             DUPLICATE AREAS
         B     MAIN0160
* ------------------------------------------------------------------- *
*   "A" and "B" start at the same disp                                *
*   "A" has a larger end disp.                                        *
*   FREEMAIN the "B" block                                            *
* ------------------------------------------------------------------- *
MAIN0110 DS    0H
         ITRACE ID=SPAN1
         B     MAIN0160
* ------------------------------------------------------------------- *
*   "A" and "B" start at the same disp                                *
*   "B" has a larger end disp                                         *
*   Change "A" end disp to "B"s end disp                              *
*   Calculate size of combined area                                   *
*   FREEMAIN the "B" block                                            *
* ------------------------------------------------------------------- *
MAIN0120 DS    0H
         ITRACE ID=SPAN2
         B     MAIN0150
* ------------------------------------------------------------------- *
*                                                                     *
*   "B" block begins at a higher disp than "A" block.                 *
*   If "A" block ends at a higher disp than "B" begins,               *
*   "A" block overlaps part or all of "B" block.                      *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0130 DS    0H
         ITRACE ID=MAIN0130,                                           +
               DATA1=A.AREA_BEGIN,                                     +
               DATA2=B.AREA_BEGIN
         CLC   A.AREA_END,B.AREA_BEGIN             A END < B BEGIN?
         BL    MAIN0180                            YES.. GOOD
* ------------------------------------------------------------------- *
*                                                                     *
*   "A" block ends at the same or higher disp than "B" block begins.  *
*                                                                     *
*   If "A" block ends at or higher than "B" ends                      *
*      "A" block spans all of "B" block                               *
*   otherwise                                                         *
*      "A" block spans first portion of "B" block                     *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=A,                                                  +
               DATA1=A.AREA_BEGIN,                                     +
               DATA2=B.AREA_BEGIN
         CLC   A.AREA_END,B.AREA_END               "A" END < "B" END
         BL    MAIN0140                            YES
* ------------------------------------------------------------------- *
*                                                                     *
*   'A' block spans all of 'B' block                                  *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SPAN3,                                              +
               DATA1=A.AREA_BEGIN,                                     +
               DATA2=B.AREA_BEGIN
         B     MAIN0160
* ------------------------------------------------------------------- *
*                                                                     *
*   'A' block overlaps first part of 'B' block.                       *
*   Change end disp in 'A' block to end disp in 'B' block.            *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0140 DS    0H
         ITRACE ID=SPAN4
MAIN0150 DS    0H
         ITRACE ID=MAIN0150,                                           +
               RDATA1=R6,                                              +
               RDATA2=R7
         MVC   A.AREA_END,B.AREA_END               COPY 'B' AREA END
         ICM   R0,15,A.AREA_BEGIN
         ICM   R1,15,A.AREA_END
         SR    R1,R0
         LA    R1,1(,R1)
         STCM  R1,15,A.AREA_LENGTH
* ------------------------------------------------------------------- *
*                                                                     *
*   Remove 'B' block from chain                                       *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0160 DS    0H
         ITRACE ID=MAIN0160,                                           +
               RDATA1=R7,                                              +
               DATA2=B.AREA_NEXT
         ICM   R4,15,B.AREA_NEXT                   2ND BLOCK FORWARD
         BZ    MAIN0170
NEXT     USING AREA_DSECT,R4
         ST    R7,NEXT.AREA_PREV                   SET PREV IN 2ND FWD
         DROP  NEXT
MAIN0170 DS    0H
         ST    R4,A.AREA_NEXT                      2ND FORWARD NOW NEXT
         ITRACE ID=FREE_B,                                             +
               RDATA1=R6
         FREEMAIN RU,                                                  +
               A=(R6),                                                 +
               LV=AREA_DSECT_L
         B     MAIN0090                            CHECK AGAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0180 DS    0H
         ITRACE ID=MAIN0180
         ICM   R7,15,A.AREA_NEXT                   NEXT "A" AREA
         BNZ   MAIN0090
         DROP  A,B


         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   MAIN0190
         MVC   SPF_MSG_3(AREAMSG4_L),AREAMSG4
         L     R1,COMM_USER_AREA_NEXT_2
         L     R15,V_DISXLIST
         BALR  R14,R15


* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*   Step 3                                                            *
*                                                                     *
*   Check for RLD items that overlap or duplicate user area(s)        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
USER     USING AREA_DSECT,R7
RLD      USING AREA_DSECT,R6
* ------------------------------------------------------------------- *
*                                                                     *
*   Check the RLD items against the user area(s)                      *
*                                                                     *
*   An RLD item can be                                                *
*                                                                     *
*     1)  "below" the data item                                       *
*                                                                     *
*     2)  "overlap" the first portion of the data area                *
*                                                                     *
*     3)  "overlap" the entire data area                              *
*                                                                     *
*     4)  "overlap" the last portion of the data area                 *
*                                                                     *
*     5)  "above" the data area                                       *
*                                                                     *
*     6)  "in the middle" of a data area                              *
*                                                                     *
*     7)  exactly the same as a data area                             *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0190 DS    0H
         ITRACE ID=STEP3
         ICM   R7,15,COMM_USER_AREA_NEXT_2
         BZ    MAIN0400
MAIN0200 DS    0H
         ICM   R6,15,COMM_RLD_AREA_NEXT
         BZ    MAIN0400
* ------------------------------------------------------------------- *
*                                                                     *
*     Case 1  RLD below user area                                     *
*                                                                     *
*     Action: No conflict                                             *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         ITRACE ID=CASE,                                               +
               DATA1=RLD.AREA_BEGIN,                                   +
               DATA2=USER.AREA_BEGIN
         CLC   RLD.AREA_END,USER.AREA_BEGIN        RLD < USER BEGIN?
         BNL   MAIN0230                            NO
         ITRACE ID=CASE1                           RLD IS BELOW USER
         B     MAIN0330
* ------------------------------------------------------------------- *
*                                                                     *
*     CASE 2  RLD overlaps 1st portion of user area                   *
*                                                                     *
*        RLD begins at or lower disp than user area begins            *
*        RLD ends at or higher an user area begins                    *
*        RLD ends at lower disp than user area ends                   *
*                                                                     *
*     Action: Change start disp in user area to "RLD end disp + 1"    *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0230 DS    0H
         ITRACE ID=MAIN0230                        RLD IS BELOW USER
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN < USER BEGIN?
         BH    MAIN0240                         NO
         CLC   RLD.AREA_END,USER.AREA_BEGIN     RLD END > USER BEGIN?
         BL    MAIN0240                         NO
         CLC   RLD.AREA_END,USER.AREA_END       RLD END < USER END?
         BNL   MAIN0240
         ITRACE ID=CASE2
         ICM   R2,15,RLD.AREA_END               RLD ITEM END DISP
         LA    R2,1(,R2)                        PLUS 1
         STCM  R2,15,USER.AREA_BEGIN            CHANGE USER AREA BEGIN
         ICM   R3,15,USER.AREA_END              USER END DISP
         SR    R3,R2                            COMPUTE LENGTH
         LA    R3,1(,R3)                        TRUE LENGTH
         STCM  R3,15,USER.AREA_LENGTH           SET NEW LENGTH
         B     MAIN0330
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Case 3  RLD overlaps entire user area                           *
*             or is the SAME as user area                             *
*                                                                     *
*        RLD begins at same disp as user area begins and              *
*        RLD ends at same disp that user area ends                    *
*                                                                     *
*      or                                                             *
*                                                                     *
*        RLD begins at lower disp than user area begins               *
*        RLD ends at higher disp than user area ends                  *
*                                                                     *
*     Action: "delete" the user area                                  *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0240 DS    0H
         ITRACE ID=MAIN0240
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   SAME START DISP?
         BNE   MAIN0250                         NO
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   SAME START DISP?
         BE    MAIN0260                         YES.. SAME AREA
MAIN0250 DS    0H
         ITRACE ID=MAIN0250
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN < USER BEGIN?
         BNL   MAIN0290                         NO
         CLC   RLD.AREA_END,USER.AREA_END       RLD END > USER END?
         BNH   MAIN0290                         NO
MAIN0260 DS    0H
         ITRACE ID=CASE3
         ICM   R15,15,USER.AREA_NEXT            NEXT AREA ON CHAIN
         BZ    MAIN0270                         NOT PRESENT
NEXT     USING AREA_DSECT,R15
         MVC   NEXT.AREA_PREV,USER.AREA_PREV    SET PREV IN NEXT
         DROP  NEXT
MAIN0270 DS    0H
         ITRACE ID=MAIN0270
         ICM   R15,15,USER.AREA_PREV            PREVIOUS BLOCK
         BZ    MAIN0280                         NOT PRESENT
PREV     USING AREA_DSECT,R15
         MVC   PREV.AREA_NEXT,USER.AREA_NEXT    SET NEXT IN PREV BLOCK
         DROP  PREV
MAIN0280 DS    0H
         ITRACE ID=MAIN0280
         FREEMAIN RU,                                                  +
               A=(7),                                                  +
               LV=AREA_DSECT_L
         B     MAIN0190                         RE-DRIVE PROCESS
* ------------------------------------------------------------------- *
*                                                                     *
*     Case 4  RLD overlaps last portion of user area                  *
*                                                                     *
*        RLD begins at higher than user begins                        *
*        RLD begins at or lower than user area ends                   *
*        RLD ends at or higher than user area ends                    *
*                                                                     *
*     Action: Change ending disp in user area to "RLD begin - 1)      *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0290 DS    0H
         ITRACE ID=MAIN0290
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN > USER BEGIN?
         BNH   MAIN0300                         NO
         CLC   RLD.AREA_BEGIN,USER.AREA_END     RLD BEGIN > USER END?
         BH    MAIN0300                         YES..NOT LOWER OR EQUAL
         CLC   RLD.AREA_END,USER.AREA_END       RLD END > USER END?
         BL    MAIN0300                         NO
         ITRACE ID=CASE4
         ICM   R3,15,RLD.AREA_BEGIN             RLD BEGIN DISP
         BCTR  R3,0                             MINUS 1
         STCM  R3,15,USER.AREA_END              CHANGE USER AREA END
         ICM   R2,15,USER.AREA_BEGIN            USER BEGIN DISP
         SR    R3,R2                            COMPUTE NEW LENGTH
         LA    R3,1(,R3)                        TRUE LENGTH
         STCM  R3,15,USER.AREA_LENGTH           CHANGE LENGTH
         B     MAIN0330
* ------------------------------------------------------------------- *
*                                                                     *
*     CASE 5  RLD is at higher disp than user area                    *
*                                                                     *
*        RLD begins at higher disp than user area ends                *
*                                                                     *
*     Action: no conflict                                             *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=MAIN0300
         CLC   RLD.AREA_BEGIN,USER.AREA_END     RLD BEGIN > USER END?
         BNH   MAIN0310                         NO
         ITRACE ID=CASE5
         B     MAIN0330                         GO TO NEXT RLD ITEM
* ------------------------------------------------------------------- *
*                                                                     *
*     CASE 6 (RLD is "in the middle of" a user area)                  *
*                                                                     *
*        RLD begins at higher disp than user area begins              *
*        RLD ends at lower disp than user area ends                   *
*                                                                     *
*     Action: "SPLIT" the user area into two parts                    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0310 DS    0H
         ITRACE ID=MAIN0310
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN > USER BEGIN?
         BNH   MAIN0330                         NO
         CLC   RLD.AREA_END,USER.AREA_END       RLD END < USER END?
         BNL   MAIN0330                         NO
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=MIDDLE,                                             +
               RDATA1=R1
NEW      USING AREA_DSECT,R1
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),USER.AREA_DSECT
         MVC   NEW.AREA_NEXT,USER.AREA_NEXT     CHAIN NEXT TO NEW
         ICM   R15,15,USER.AREA_NEXT            NEXT ON USER CHAIN
         BZ    MAIN0320
NEXT     USING AREA_DSECT,R15
         ST    R1,NEXT.AREA_PREV                CHAIN NEW TO NEXT
MAIN0320 DS    0H
         ITRACE ID=MAIN0320
         ST    R7,NEW.AREA_PREV                 SET PREV IN NEW
         ST    R1,USER.AREA_NEXT                SET NEXT IN CURRENT
         ICM   R3,15,RLD.AREA_BEGIN             RLD ITEM BEGIN
         BCTR  R3,0                             MINUS 1
         STCM  R3,15,USER.AREA_END              SET END DISP
         ICM   R2,15,USER.AREA_BEGIN            BEGIN DISP
         SR    R3,R2                            COMPUTE LENGTH
         LA    R3,1(,R3)                        TRUE LENGTH
         STCM  R3,15,USER.AREA_LENGTH           SET LENGTH
         ICM   R2,15,RLD.AREA_END               RLD ITEM END
         LA    R2,1(,R2)                        PLUS 1
         STCM  R2,15,NEW.AREA_BEGIN             SET BEGIN DISP
         ICM   R3,15,NEW.AREA_END               END DISP
         SR    R3,R2                            COMPUTE LENGTH
         LA    R3,1(,R3)                        TRUE LENGTH
         STCM  R3,15,NEW.AREA_LENGTH            SET LENGTH
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=MAIN0330
         ICM   R6,15,RLD.AREA_NEXT               NEXT RLD ITEM
         BNZ   MAIN0220
         ICM   R7,15,USER.AREA_NEXT              NEXT USER AREA
         BNZ   MAIN0200


         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   MAIN0400
         MVC   SPF_MSG_3(AREAMSG5_L),AREAMSG5
         L     R1,COMM_USER_AREA_NEXT_2
         L     R15,V_DISXLIST
         BALR  R14,R15


* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
*  Step 4                                                             *
*                                                                     *
*  Merge RLD and user data into "ALL" data                            *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ITRACE ID=STEP4
ALL      USING AREA_DSECT,R5
         LA    R5,COMM_ALL_AREA_PREV
         ICM   R6,15,COMM_RLD_AREA_NEXT
         BNZ   MAIN0410
         LA    R6,DUMMY_AREA
MAIN0410 DS    0H
         ICM   R7,15,COMM_USER_AREA_NEXT_2
         BNZ   MAIN0420
         LA    R7,DUMMY_AREA
MAIN0420 DS    0H
         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN       COMPARE DISPS
         BL    MAIN0430                             RLD LOW
         BH    MAIN0440
         CLI   RLD.AREA_BEGIN,X'FF'                 AT DUMMY RECORD?
         BE    EXIT0000                             YES
         DC    H'0'                                 INTERNAL ERROR
MAIN0430 DS    0H
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=COPY_RLD,                                           +
               RDATA1=R1,                                              +
               RDATA2=R6
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),RLD.AREA_DSECT
         ST    R1,ALL.AREA_NEXT
         XC    NEW.AREA_NEXT,NEW.AREA_NEXT
         ST    R5,NEW.AREA_PREV
         LR    R5,R1
         ICM   R6,15,RLD.AREA_NEXT
         BNZ   MAIN0420
         LA    R6,DUMMY_AREA
         B     MAIN0420
MAIN0440 DS    0H
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=COPYUSER,                                           +
               RDATA1=R1,                                              +
               RDATA2=R7
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),USER.AREA_DSECT
         ST    R1,ALL.AREA_NEXT
         ST    R5,NEW.AREA_PREV
         LR    R5,R1
         ICM   R7,15,USER.AREA_NEXT
         BNZ   MAIN0420
         LA    R7,DUMMY_AREA
         B     MAIN0420
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         ICM   R7,15,COMM_USER_AREA_NEXT_2         FIRST ON CHAIN
         BZ    EXIT0020                            NOTHING ON CHAIN
EXIT0010 DS    0H
         XC    USER.AREA_PREV,USER.AREA_PREV       NO PREV IN 1ST BLOCK
EXIT0020 DS    0H
         ICM   R7,15,COMM_ALL_AREA_NEXT            FIRST ON CHAIN
         BZ    EXIT0030                            NOTHING ON CHAIN
         XC    USER.AREA_PREV,USER.AREA_PREV       NO PREV IN 1ST BLOCK
EXIT0030 DS    0H
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   EXIT0040
         MVC   SPF_MSG_3(AREAMSG6_L),AREAMSG6
         L     R1,COMM_USER_AREA_NEXT_2
         L     R15,V_DISXLIST
         BALR  R14,R15
         MVC   SPF_MSG_3(AREAMSG7_L),AREAMSG7
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
EXIT0040 DS    0H
         L     R13,4(,R13)                         RESTORE REGISTER 13  ASE01670
         LM    R14,R12,12(R13)                     RESTORE REGISTERS    ASE01680
         SR    R15,R15                             RETURN CODE          ASE01690
         BR    R14                                 RETURN TO CALLER     ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC       Q(DXDDMERG)

AREAMSG1      DC       C'User area 2 chain at entry to DISDMERG'
AREAMSG1_L    EQU      *-AREAMSG1

AREAMSG2      DC       C'ALL area chain at entry to DISDMERG'
AREAMSG2_L    EQU      *-AREAMSG2

AREAMSG3      DC       C'User area 2 chain after step1 in DISDMERG'
AREAMSG3_L    EQU      *-AREAMSG3

AREAMSG4      DC       C'User area 2 chain after step2 in DISDMERG'
AREAMSG4_L    EQU      *-AREAMSG4

AREAMSG5      DC       C'User area 2 chain after step3 in DISDMERG'
AREAMSG5_L    EQU      *-AREAMSG5

AREAMSG6      DC       C'User area 2 chain after step4 in DISDMERG'
AREAMSG6_L    EQU      *-AREAMSG6

AREAMSG7      DC       C'ALL area chain after step4 in DISDMERG'
AREAMSG7_L    EQU      *-AREAMSG7
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDMERG      DSECT
              DS       18F

DUMMY_AREA    DS       (AREA_DSECT_L)X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM  TYPE=DSECT
              DISSPFD  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY     DISASMDA

              IFGACB   AM=VSAM
ACB_L         EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  DISDMERG
./ ADD NAME=DISDREAD 0118-09104-09198-0839-00199-00173-00046-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISDREAD                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Read DSECTS (only) in a KSDS                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISDREAD CSECT
DISDREAD AMODE 31
DISDREAD RMODE ANY
         USING DISDREAD,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISDREAD'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDREAD,R13
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_USING_KSDS
         L     R6,COMM_USING_KSDS
         USING KSDS_DSECT,R6
         USING DSECT_DSECT,R5
         MVC   DXD_RPL(RPL_L),RPL_I
         USING IFGRPL,DXD_RPL
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        READ the DSECTs in a KSDS                                    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN             KSDS OPEN?
         BO    MAIN0020                          YES
         ITRACE ID=OPEN,                                               +
               DATA1=KSDS_DDNAME
         OPEN  (KSDS_ACB,INPUT),                 OPEN THE KSDS         +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         OI    KSDS_FLAGS,$KSDS_OPEN             SET FLAG
MAIN0020 DS    0H
         ITRACE ID=MODCB1
         MVC   DXD_MODCB(MODCB1_L),MODCB1_I
         LA    R2,DXD_RPL
         LA    R3,KSDS_ACB
         LA    R7,PPD
         LA    R8,PPD_KEY
         MODCB RPL=(R2),                                               +
               ACB=(R3),                                               +
               AREA=(R7),                                              +
               AREALEN=PPD_L,                                          +
               ARG=(R8),                                               +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +
               MF=(E,DXD_MODCB)
         ITRACE ID=MODCB_RC,                                           +
               RDATA1=R15,                                             +
               RDATA2=R0
         LTR   R15,R15
         BNZ   ERR0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    PPD_SEQ,PPD_SEQ                   INITIALIZE KEY
         MVC   PPD_NAME,COMM_BLANKS
         ITRACE ID=POINT,                                              +
               DATA1=PPD_KEY+0,                                        +
               DATA2=PPD_KEY+8
         POINT RPL=DXD_RPL                       ISSUE POINT
         ITRACE ID=POINT_RC,                                           +
               RDATA1=R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=MODCB2
         LA    R2,DXD_RPL
         MODCB RPL=(R2),                         CHANGE TO SEQUENTIAL  +
               OPTCD=(SEQ),                                            +
               MF=(E,DXD_MODCB)
         ITRACE ID=MODCB_RC,                                           +
               RDATA1=R15,                                             +
               RDATA2=R0
         LTR   R15,R15
         BNZ   ERR0010
         LA    R5,KSDS_DSECT_PREV                "FIRST" ON CHAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE OFF
MAIN0030 DS    0H
         ITRACE ID=GET
         GET   RPL=DXD_RPL                       READ A RECORD
         ITRACE ID=GET_RC,                                             +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   MAIN0040                          NO
         ITRACE ID=PPD_DATA,                                           +
               DATA1=PPD_DATA+0,                                       +
               DATA2=PPD_DATA+8
         CLC   DSECT_ID,PPD_DATA+8               DSECT?
         BNE   MAIN0030                          NO
         GETMAIN RU,                                                   +
               LV=DSECT_DSECT_L,                                       +
               LOC=ANY
NEW      USING DSECT_DSECT,R1
PPX      USING DSECT_DSECT,PPD_DATA
         XC    NEW.DSECT_DSECT(DSECT_DSECT_L),NEW.DSECT_DSECT
         ST    R1,DSECT_NEXT                     CHAIN TO PREVIOUS
         ST    R5,NEW.DSECT_PREV                 CHAIN TO NEW
         MVC   NEW.DSECT_EYE,PPX.DSECT_EYE       COPY EYECATCHER
         MVC   NEW.DSECT_NAME,PPX.DSECT_NAME     COPY DSECT NAME
         ITRACE ON
         ITRACE ID=DSECT,                                              +
               RDATA1=R1,                                              +
               DATA2=NEW.DSECT_NAME
         LR    R5,R1
         B     MAIN0030                          READ NEXT RECORD
MAIN0040 DS    0H
         ICM   R5,15,KSDS_DSECT_NEXT             FIRST DSECT
         BZ    EXIT0000                          NO DSECTS
         XC    DSECT_PREV,DSECT_PREV             FORCE PREV TO ZERO
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=MOD_ERR,                                            +
               RDATA1=R15
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                       RESTORE REGISTER 13
         L     R14,12(,R13)                      RESTORE REGISTERS
         SR    R15,R15                           SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS
         BR    R14                               RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDDREAD)

RPL_I         RPL  AM=VSAM
RPL_L         EQU  *-RPL_I

MODCB1_I MODCB RPL=*,                                                  +
               ACB=*,                                                  +
               AREA=*,                                                 +
               AREALEN=PPD_L,                                          +
               ARG=*,                                                  +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +
               MF=L
MODCB1_L EQU  *-MODCB1_I

DSECT_ID DC   CL8'DSECT'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDREAD      DSECT
              DS      18F

DXD_MODCB     DS      0F,(MODCB1_L)X
DXD_RPL       DS      0F,(RPL_L)X

              COPY    PPDDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISDREAD
./ ADD NAME=DISDSECT 0102-09119-09198-0840-00391-00389-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  FUNCTION:                                                          *
*      Read in pre-processed DSECTs                                   *
*      Chain USING blocks to DSECT blocks                             *
*                                                                     *
*                                                                     *
*  The disassembler allows DSECTs to be 'pre-processed' by DISASMU1.  *
*  Since the name of a DSECT can be more than 8 characters in length, *
*  a PDS or PDS/E cannot be used.  I chose to use VSAM KSDSs.  The    *
*  record key is "DSECT_NAME+sequence nbr" where DSECT_NAME is the    *
*  DSECT's name and "sequence nbr" is a 4-byte binary sequence number *
*  to make the key for each record unique.  The DSECT itself with     *
*  always have sequence number zero (X'00000000').                    *
*                                                                     *
*  The program does a "read by key" with sequence number zero to      *
*  determine if the DSECT is 'known', and then if found, read         *
*  forward sequentially until the end of the file or the next         *
*  record that has sequence number zero is found.                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISDSECT CSECT
DISDSECT AMODE 31
DISDSECT RMODE ANY
         USING DISDSECT,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     DSCT0000                          SKIP EYECATCHER
MODID    DC    CL8'DISDSECT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
DSCT0000 DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDDSECT,R13
         USING IFGRPL,DXD_RPL
         ITRACE ID=ENTRY
         LA    R4,DXD_RPL
         LA    R3,PPD_KEY
         LA    R2,PPD
         MODCB RPL=(R4),                                               +
               AREA=(R2),                                              +
               AREALEN=PPD_L,                                          +
               ARG=(R3),                                               +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(KEY,DIR,SYN,MVE)
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
* ------------------------------------------------------------------- *
*        Determine if DSECT was in ASM,START/ASM,END                  *
* ------------------------------------------------------------------- *
DSCT0010 DS    0H
         ICM   R3,15,COMM_USING_NEXT             FIRST USING BLOCK
         USING USING_DSECT,R3                    DEFINE BASE
         BZ    EXIT0000                          NOTHING ON CHAIN
         XC    USING_DSECT_ADDR,USING_DSECT_ADDR
         XC    USING_LABEL_ADDR,USING_LABEL_ADDR
DSCT0020 DS    0H
         ITRACE ID=FINDDSCT,                     SEARCHING FOR A DSECT +
               RDATA1=R3,                                              +
               DATA2=USING_DSECT_NAME
         ICM   R2,15,COMM_DSECT_NEXT             FIRST DSECT ENTRY
         USING DSECT_DSECT,R2                    DEFINE BASE
DSCT0030 DS    0H
         BZ    DSCT0040                          NOT ON EXISTING CHAIN
         ITRACE ID=TESTDSCT,                     CHECKING A DSECT NAME +
               DATA1=DSECT_NAME                  .. DSECT'S NAME
         CLC   USING_DSECT_NAME,DSECT_NAME       DSECT FOUND?
         BE    DSCT0170                          YES
         ICM   R2,15,DSECT_NEXT                  NEXT DSECT BLOCK
         B     DSCT0030                          LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        The DSECT was not processed via ASM,START/ASM,END.           *
*                                                                     *
*        Search the DSECT DDs.                                        *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0040 DS    0H
         ITRACE ID=SRCHKSDS,                     CHECKING PRE-PROCESSED+
               DATA1=USING_DSECT_NAME
         XC    PPD_SEQ,PPD_SEQ                   SET SEQ NBR TO ZERO
         MVC   PPD_NAME,USING_DSECT_NAME         COPY DSECT NAME
         LTR   R15,R15
         BNZ   ERR0020
         ICM   R5,15,COMM_KSDS_NEXT              ANY DSECT KSDS?
         BZ    ERR0010                           NO
         USING KSDS_DSECT,R5                     DEFINE BASE
DSCT0050 DS    0H
         LA    R2,KSDS_ACB                       ACB'S ADDRESS
         MODCB RPL=(R4),                         UPDATE ACB ADDR IN RPL+
               ACB=(R2)
         GET   RPL=(R4)                          READ KSDS
         ITRACE ID=GET_RC,                                             +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         LTR   R15,R15                           SUCCESSFUL?
         BZ    DSCT0060                          YES..
         ICM   R5,15,KSDS_NEXT                   NEXT
         BNZ   DSCT0050
         B     ERR0010                           DSECT NOT FOUND
DSCT0060 DS    0H
         MVC   COMM_INFO_01(L'USING_DSECT_NAME),USING_DSECT_NAME
         MVC   COMM_INFO_02(L'KSDS_DDNAME),KSDS_DDNAME
         MVC   COMM_INFO_03(L'KSDS_DSNAME),KSDS_DSNAME
         MVI   COMM_MSG_ID,1
         BAL   R9,MSG0000                        ISSUE MESSAGE
         SR    R6,R6                             NO LABEL SO FAR
         SR    R7,R7                             NO EQUATE SO FAR
         USING LABEL_DSECT,R6
         USING EQU_DSECT,R7
         B     DSCT0080
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0070 DS    0H
         ICM   R1,15,PPD_SEQ                     SEQ NBR
         LA    R1,1(,R1)                         PLUS 1
         STCM  R1,15,PPD_SEQ                     UPDATE SEQ NBR
         ITRACE ID=GET,                                                +
               DATA1=PPD_KEY+0,                                        +
               DATA2=PPD_SEQ
         GET   RPL=(R4)                          READ NEXT RECORD
         ITRACE ID=GET_RC,                                             +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   DSCT0170                          NO
DSCT0080 DS    0H
         ITRACE ID=DATA,                                               +
               DATA1=PPD_DATA+8,                                       +
               DATA2=PPD_DATA+12
         CLC   DSECT_ID,PPD_DATA+8               DSECT?
         BE    DSCT0090                          YES
         CLC   LABEL_ID,PPD_DATA+8               LABEL?
         BE    DSCT0110                          YES
         CLC   EQU_ID,PPD_DATA+8                 EQUATE?
         BE    DSCT0130                          YES
         ABEND 1,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
*        New DSECT found                                              *
*                                                                     *
*     Add the DSECT, LABELs, EQUs to the Pre-processed DSECTs chain   *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0090 DS    0H
         ITRACE ID=DSECT,                                              +
               DATA1=PPD_DATA+12,                                      +
               DATA2=PPD_DATA+20
         GETMAIN RU,                             GETMAIN DSECT BLOCK   +
               LV=DSECT_DSECT_L,                                       +
               LOC=ANY
         LR    R2,R1                             COPY ADDRESS
         ITRACE ID=NEWDSECT,                                           +
               RDATA1=R2
NEW      USING DSECT_DSECT,R2
         MVC   NEW.DSECT_DSECT(DSECT_DSECT_L),PPD_DATA
         ICM   R1,15,KSDS_DSECT_NEXT
         BZ    DSCT0100
NEXT     USING DSECT_DSECT,R1
         ST    R2,NEXT.DSECT_PREV
DSCT0100 DS    0H
         MVC   NEW.DSECT_NEXT,KSDS_DSECT_NEXT    CHAIN EXISTING TO NEW
         XC    NEW.DSECT_PREV,NEW.DSECT_PREV
         ST    R2,KSDS_DSECT_NEXT
         XC    DSECT_LABEL_PREV,DSECT_LABEL_PREV INIT LABEL BLOCK ADDR  RESS
         XC    DSECT_LABEL_NEXT,DSECT_LABEL_NEXT INIT LABEL BLOCK ADDR  RESS
         LA    R6,DSECT_LABEL_PREV               NO LABEL SO FAR
         SR    R7,R7                             NO EQUATE SO FAR
         B     DSCT0070
* ------------------------------------------------------------------- *
*                                                                     *
*        New LABEL                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0110 DS    0H
         ITRACE ID=LABEL,                                              +
               DATA1=PPD_DATA+12,                                      +
               DATA2=PPD_DATA+20
         GETMAIN RU,                                                   +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         ITRACE ID=NEWLABEL,                                           +
               RDATA1=R1
NEW      USING LABEL_DSECT,R1
         ST    R1,LABEL_NEXT
         LR    R15,R6
         LR    R6,R1                             COPY STORAGE ADDRESS
         MVC   LABEL_DSECT(LABEL_DSECT_L),PPD_DATA
         ST    R15,LABEL_PREV
         XC    LABEL_EQU_PREV,LABEL_EQU_PREV     CLEAR EQUATE ADDRESS
         XC    LABEL_EQU_NEXT,LABEL_EQU_NEXT     CLEAR EQUATE ADDRESS
         LA    R7,LABEL_EQU_PREV
         B     DSCT0070
         DROP  NEW
* ------------------------------------------------------------------- *
*                                                                     *
*        New EQU                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0130 DS    0H
         ITRACE ID=EQU,                                                +
               DATA1=PPD_DATA+12,                                      +
               DATA2=PPD_DATA+20
         GETMAIN RU,                                                   +
               LV=EQU_DSECT_L,                                         +
               LOC=ANY
         ITRACE ID=NEWEQU,                                             +
               RDATA1=R1
NEW      USING EQU_DSECT,R1
         ST    R1,EQU_NEXT
         LR    R15,R7                            SAVE PREV ADDR
         LR    R7,R1                             COPY NEW BLOCK ADDR
         MVC   EQU_DSECT(EQU_DSECT_L),PPD_DATA
         ST    R15,EQU_PREV
         XC    EQU_NEXT,EQU_NEXT
         B     DSCT0070                          READ NEXT RECORD
         DROP  R6,R7,NEW
* ------------------------------------------------------------------- *
*                                                                     *
*        The referenced DSECT has been found                          *
*                                                                     *
* ------------------------------------------------------------------- *
DSCT0170 DS    0H
         ITRACE ID=DSCTFND,                      DSECT LOCATED         +
               DATA1=DSECT_NAME,                 .. DSECT NAME         +
               RDATA2=R2                         .. DSECT BLOCK ADDR
         ST    R2,USING_DSECT_ADDR               CHAIN TO USING BLOCK
         XC    USING_DISP,USING_DISP             SET DISP TO ZERO
         OC    USING_DSECT_LABEL,USING_DSECT_LABEL
         BZ    DSCT0210                          YES
         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL BLANK?
         BE    DSCT0210                          YES
         ITRACE ID=FINDLABL,                                           +
               DATA1=USING_DSECT_LABEL+0,                              +
               DATA2=USING_DSECT_LABEL+8
         ICM   R8,15,DSECT_LABEL_NEXT            FIRST LABEL
         USING LABEL_DSECT,R8                    DEFINE BASE
         BZ    DSCT0190                          NO LABELS
DSCT0180 DS    0H
         ITRACE ID=CHK_LABL,                                           +
               DATA1=LABEL_NAME+0,                                     +
               DATA2=LABEL_NAME+8
         CLC   LABEL_NAME,USING_DSECT_LABEL      LABEL LOCATED?
         BE    DSCT0200                          YES
         ICM   R8,15,LABEL_NEXT                  NEXT LABEL
         BNZ   DSCT0180                          LOOP
DSCT0190 DS    0H
         ITRACE ID=NOT_FND
         MVC   COMM_INFO_01(63),USING_DSECT_LABEL    COPY LABEL NAME
         MVC   COMM_INFO_02(63),USING_DSECT_NAME     COPY DSECT NAME
         MVI   COMM_MSG_ID,2
         BAL   R9,MSG0000                        GENERATE MESSAGE
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         B     DSCT0210
DSCT0200 DS    0H
         ITRACE ID=LABLFND,                                            +
               RDATA1=R8
         ST    R8,USING_LABEL_ADDR               SET LABEL BLOCK ADDR
         MVC   USING_DISP,LABEL_DISP             SET DISP TO LABEL
         B     DSCT0210                          PROCESS NEXT USING
DSCT0210 DS    0H
         ITRACE ID=NEXTUSNG,                                           +
               RDATA1=R3,                                              +
               DATA2=USING_NEXT
         ICM   R3,15,USING_NEXT                  NEXT USING BLOCK
         BNZ   DSCT0020                          LOOP
         B     EXIT0000                          ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   COMM_INFO_01(63),USING_DSECT_NAME SET DSECT'S NAME
         MVI   COMM_MSG_ID,3
         BAL   R9,MSG0000                        GENERATE ERROR MSG
         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         B     EXIT0000                          AND EXIT
ERR0020  DS    0H
         ITRACE ID=MODCB1E,                                            +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         DC    H'2'
ERR0030  DS    0H
         ITRACE ID=MODCB2E,                                            +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         DC    H'3'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME
         L     R15,V_DISMSG                   DISMSG ENTRY POINT
         BALR  R14,R15                        BUILD MESSAGE(S)
         LA    R2,COMM_MSG_1                  1ST MESSAGE
         LA    R1,5                           MAX MSGS
MSG0010  DS    0H
         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?
         BER   R9                             YES
         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE
         BAL   R10,PRT0000                    PRINT MESSAGE
         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE
         BCT   R1,MSG0010
         BR    R9
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_BATCH  BATCH MODE?
         BNER  R10                            NO.. DON'T PRINT
         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND
         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT
         BALR  R14,R15                        LINK TO PRINT MODULE
         BR    R10                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         LM    R14,R12,12(R13)                   RESTORE REGISTERS      ASE01680
         SR    R15,R15                           SET RETURN CODE        ASE01690
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MSG01    DS    0C
         DC    C'DISDSECT01I  Entering DISDSECT'
MSG01_L  EQU   *-MSG01

MSG02    DS    0C
         DC    C'DISDSECT02I  Exiting DISDSECT'
MSG02_L  EQU   *-MSG02
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC    Q(DXDDSECT)

DSECT_ID       DC    CL8'DSECT'
LABEL_ID       DC    CL8'LABEL'
EQU_ID         DC    CL8'EQU'
               LTORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDDSECT       DSECT
               DS    18F
DXD_CSECT      DS    CL8

DXD_RPL        DS    (RPL_L)X

               COPY  PPDDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY    DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
               IFGRPL  AM=VSAM
RPL_L          EQU     *-IFGRPL
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY    REGEQU
               END     DISDSECT
./ ADD NAME=DISELIST 0103-09119-09198-0840-00264-00263-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISELIST                                             *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   Print ESD items                                                  *
*                                                                    *
*--------------------------------------------------------------------*
DISELIST CSECT
DISELIST AMODE 31
DISELIST RMODE ANY
         USING DISELIST,R11
         USING DISCOMM,R12
         USING ESD_DSECT,R6
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISELIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDELIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         MVC   PRINT_DATA,COMM_BLANKS
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?
         BE    MAIN0020                          YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0000 DS    0H
         ITRACE ID=BATCH
         MVC   COMM_SUBHEAD,COMM_BLANKS
         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1
         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD     SET PRINT COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                           PRINT SUB HEADING
         ICM   R6,15,COMM_ESD_NEXT               1ST ESD
         BZ    MAIN0300                          NO ESD ITEMS
MAIN0010 DS    0H
         BAL   R5,MAIN0200                       BUILD DETAIL
         MVI   PRINT_COMMAND,$PRINT_PRINT        SET PRINT COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                           PRINT
         ICM   R6,15,ESD_NEXT                    NEXT ESD ITEM
         BNZ   MAIN0010                          LOOP
         B     EXIT0000                          ALL DONE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0020 DS    0H
         ITRACE ID=TSO,                                                +
               DATA1=COMM_ESD_NEXT
         ICM   R6,15,COMM_ESD_NEXT               1ST ESD
         BZ    MAIN0300                          NO ESD ITEMS
*---------------------------------------------------------------------*
*                                                                     *
*        Build data for ESD display                                   *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0030 DS    0H
         L     R0,COMM_VDATA_ADDR                VDATA ADDR
         L     R1,COMM_VDATA_SIZE                VDATA SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         ST    R6,DXD_FIRST_DISPLAYED            SAVE 1ST DISPLAYED
         L     R7,SPF_VDEPTH                     SCREEN DEPTH
         L     R8,COMM_VDATA_ADDR                VDATA ADDR
MAIN0040 DS    0H
         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST ON DISPLAY
         BAL   R5,MAIN0200                       BUILD DETAIL
         MVC   0(MSG01_L,R8),PRINT_DATA          COPY TO VDATA
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R6,15,ESD_NEXT                    NEXT ESD ITEM
         BNZ   MAIN0040                          PROCESS THIS ESD ITEM
*---------------------------------------------------------------------*
*                                                                     *
*        Display the ESD items                                        *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,DISESD             SET PANEL NAME
         L     R15,V_DISDISP
         BALR  R14,R15                           DISPLAY ESD INFO
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   EXIT0000                          NO
*---------------------------------------------------------------------*
*        Process scrolling                                            *
*---------------------------------------------------------------------*
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0100
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0120
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0130
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0140
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0100 DS    0H
         ITRACE ID=BOTTOM
         ICM   R6,15,COMM_ESD_NEXT               FIRST ON CHAIN
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
MAIN0110 DS    0H
         ICM   R1,15,ESD_NEXT                    NEXT ON CHAIN?
         BZ    MAIN0030                          NO..
         LR    R6,R1                             COPY ADDR
         B     MAIN0110
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0120 DS    0H
         ITRACE ID=DOWN
         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED
         B     MAIN0030
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0130 DS    0H
         ITRACE ID=TOP
         L     R6,COMM_ESD_NEXT                  FIRST ESD ITEM
         B     MAIN0030
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0140 DS    0H
         ITRACE ID=UP
         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0150 DS    0H
         ICM   R1,15,ESD_PREV                    PREV ON CHAIN?
         BZ    MAIN0030                          NO..
         LR    R6,R1                             COPY ADDR
         BCT   R7,MAIN0150                       LOOP
         B     MAIN0030
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0200 DS    0H
P        USING MSG01,PRINT_DATA
         MVI   P.MSG01_ATTR,$ATTR_NORMAL
         MVC   P.MSG01_NAME,ESD_NAME
         MVC   P.MSG01_TYPE,ESD_TYPE
         MVC   P.MSG01_TYPE_QUAL,ESD_TYPE_QUAL
         MVC   P.MSG01_RESIDENT,ESD_RESIDENT
         MVC   P.MSG01_TARGET,ESD_TARGET
         L     R0,ESD_LENGTH                     LENGTH
         MVC   P.MSG01_LENGTH,=X'40202020202020202120'
         CVD   R0,COMM_DWORD
         ED    P.MSG01_LENGTH,COMM_DWORD+3       EDIT LENGTH
         UNPK  P.MSG01_LENGTH_H(9),ESD_LENGTH(5)
         TR    P.MSG01_LENGTH_H,COMM_HEXCHAR
         MVI   P.MSG01_LENGTH_H-1,C'('
         MVI   P.MSG01_LENGTH_H+8,C')'
         UNPK  P.MSG01_ELEM_OFFSET(9),ESD_ELEM_OFFSET(5)
         TR    P.MSG01_ELEM_OFFSET(8),COMM_HEXCHAR
         MVI   P.MSG01_ELEM_OFFSET+8,C' '
         UNPK  P.MSG01_CLASS_OFFSET(9),ESD_CLASS_OFFSET(5)
         TR    P.MSG01_CLASS_OFFSET(8),COMM_HEXCHAR
         MVI   P.MSG01_CLASS_OFFSET+8,C' '
         CLC   P.MSG01_TYPE_QUAL,=C'PR'
         BE    MAIN0210
         CLC   P.MSG01_TYPE,=C'ED'
         BNER  R5
MAIN0210 DS    0H
         MVI   P.MSG01_ATTR,$ATTR_HIGH_YELLOW
         BR    R5
         DROP  P
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0300 DS    0H
         ITRACE ID=NO_ESD
         MVC   SPF_MSG_3(MSG_02_L),MSG_02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDELIST)

HEADING_1     DC    C'0ESD ITEMS'
HEADING_1_L   EQU   *-HEADING_1

DISESD              DC   CL8'DISESD'

MSG01               DS   0C
MSG01_ATTR          DC   AL1($ATTR_NORMAL)
MSG01_NAME          DC   CL8' '
                    DC   CL1' '
MSG01_TYPE          DC   CL2' '
                    DC   C' '
MSG01_TYPE_QUAL     DC   CL2' '
                    DC   C' '
MSG01_LENGTH        DC   X'40202020202020202120'
                    DC   C' (HEX '
MSG01_LENGTH_H      DC   CL8' '
                    DC   C') '
MSG01_ELEM_OFFSET   DC   CL8' '
                    DC   C'  '
MSG01_CLASS_OFFSET  DC   CL8' '
                    DC   C' '
MSG01_RESIDENT      DC   CL8' '
                    DC   CL2' '
MSG01_TARGET        DC   CL8' '
MSG01_L             EQU  *-MSG01

MSG_02              DC   C'No ESD items to display'
MSG_02_L            EQU  *-MSG_02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDELIST              DSECT
                      DS   18F
DXD_CSECT             DS   CL8

DXD_FIRST_DISPLAYED   DS   A
DXD_LAST_DISPLAYED    DS   A
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    ATTRS
              COPY    REGEQU
              END     DISELIST
./ ADD NAME=DISESD   0101-09119-09198-0840-00258-00258-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISESD                                               *
*                                                                    *
*  Function:                                                         *
*   Obtain the requested LMOD'S ESD info                             *
*                                                                    *
*   DISBIND has already established a dialog                         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISESD   CSECT
DISESD   AMODE 31
DISESD   RMODE ANY
         USING DISESD,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R11,R15               SET BASE REG
         B     MOD0000               SKIP EYECATCHER
         DC    CL8'DISESD'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS  WORK AREA
         A     R15,DXD_START         PLUS DISP TO OUR PORTION
         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15               SET SAVE AREA ADDRESS
         USING DXDESD,R13
         ITRACE ID=ENTRY
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
* ------------------------------------------------------------------- *
*        OBTAIN AND INITIALIZE ESD BUFFER                             *
* ------------------------------------------------------------------- *
         ITRACE ID=GET_SECT
         IEWBUFF FUNC=GETBUF,                                          +
               PREFIX=IBMESD,                                          +
               TYPE=ESD
         ST    R8,DXD_BUFFER
         ITRACE ID=INIT_ESD,                                           +
               RDATA1=R8,                                              +
               RDATA2=R7
         IEWBUFF FUNC=INITBUF,                                         +
               PREFIX=IBMESD,                                          +
               TYPE=ESD
         XC    DXD_CURSOR,DXD_CURSOR
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
ESD0000  DS    0H
         ITRACE ID=GETD_ESD,                                           +
               DATA1=COMM_CSECT_NAME_LENGTH,                           +
               DATA2=COMM_CSECT
         L     R8,DXD_BUFFER
         LA    R7,IBMESD_ESDH_END
         IEWBIND FUNC=GETD,                                            +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               CLASS=B_ESD,                                            +
               SECTION=COMM_CSECT_NAME_LENGTH,                         +
               AREA=IBMESD_IEWBESD,                                    +
               CURSOR=DXD_CURSOR,                                      +
               COUNT=DXD_ESD_RETURNED,                                 +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=GETD_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         CLC   DXD_RETURN_CODE,F8
         BH    ERR0010
         BE    ERR0020                   NO DATA
         CLC   DXD_RETURN_CODE,F4
         BL    ESD0020
         CLC   DXD_REASON_CODE,X_83000800
         BE    ESD0020
         CLC   DXD_REASON_CODE,X_83000801
         BE    EXIT0000
ESD0020  DS    0H
         ICM   R9,15,DXD_ESD_RETURNED
         LA    R7,IBMESD_ESDH_END
         USING IBMESD_ESD_ENTRY,R7
ESD0030  DS    0H
         ITRACE ID=ESD,                                                +
               RDATA1=R7,                                              +
               RDATA2=R9
         GETMAIN RU,                                                   +
               LV=ESD_DSECT_L,                                         +
               LOC=ANY
         LR    R6,R1
         USING ESD_DSECT,R6
         L     R1,COMM_ESD_NBR
         LA    R1,1(,R1)
         ST    R1,COMM_ESD_NBR
         MVC   ESD_EYE,ESD_ID
         MVC   ESD_NAME,COMM_BLANKS
         MVC   ESD_RESIDENT,COMM_BLANKS
         MVC   ESD_TARGET,COMM_BLANKS
         SR    R1,R1
         ICM   R1,3,IBMESD_ESD_NAME_CHARS
         BZ    ESD0050
         L     R2,IBMESD_ESD_NAME_PTR
         C     R1,F8
         BNH   ESD0040
         L     R1,F8
ESD0040  DS    0H
         BCTR  R1,0
         EX    R1,NAME_MVC
ESD0050  DS    0H
         MVC   ESD_TYPE,IBMESD_ESD_TYPE
         MVC   ESD_TYPE_QUAL,IBMESD_ESD_TYPE_QUAL
         SR    R1,R1
         ICM   R1,3,IBMESD_ESD_RESIDENT_CHARS
         BZ    ESD0070
         L     R2,IBMESD_ESD_RESIDENT_PTR
         C     R1,F8
         BNH   ESD0060
         L     R1,F8
ESD0060  DS    0H
         BCTR  R1,0
         EX    R1,RES_MVC
ESD0070  DS    0H
         ICM   R1,3,IBMESD_ESD_TARGET_CHARS
         BZ    ESD0090
         C     R1,F8
         BNH   ESD0080
         L     R1,F8
ESD0080  DS    0H
         BCTR  R1,0
         L     R2,IBMESD_ESD_TARGET_PTR
         EX    R1,TARG_MVC
ESD0090  DS    0H
         MVC   ESD_LENGTH,IBMESD_ESD_LENG
         MVC   ESD_ELEM_OFFSET,IBMESD_ESD_ELEM_OFFSET
         MVC   ESD_CLASS_OFFSET,IBMESD_ESD_CLASS_OFFSET
         CLC   ESD_NAME,B_TEXT
         BNE   ESD0100
         MVC   COMM_CSECT_LENGTH,IBMESD_ESD_LENG
ESD0100  DS    0H
         CLC   COMM_CSECT,ESD_NAME
         BNE   ESD0110
         MVC   COMM_CSECT_EP,ESD_ELEM_OFFSET
ESD0110  DS    0H
         ICM   R1,15,COMM_ESD_NEXT
         BZ    ESD0120
PREV     USING ESD_DSECT,R1
         ST    R6,PREV.ESD_PREV
         DROP  PREV
ESD0120  DS    0H
         MVC   ESD_NEXT,COMM_ESD_NEXT
         ST    R6,COMM_ESD_NEXT
         LA    R7,IBMESD_ESD_END
         BCT   R9,ESD0030
         CLC   DXD_REASON_CODE,X_83000800
         BNE   ESD0000
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
         L     R8,DXD_BUFFER
         IEWBUFF FUNC=FREEBUF,                                         +
               PREFIX=IBMESD,                                          +
               TYPE=ESD
         B     EXIT0000
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
NAME_MVC MVC   ESD_NAME(0),0(R2)
RES_MVC  MVC   ESD_RESIDENT(0),0(R2)
TARG_MVC MVC   ESD_TARGET(0),0(R2)
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         DC    H'2'
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680
         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690
         BR    R14                   RETURN TO CALLER                   ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDESD)
F4            DC   F'4'
F8            DC   F'8'
B_ESD         DC   XL2'5',C'B_ESD'
B_TEXT        DC   CL8'B_TEXT'
X_83000800    DC   X'83000800'
X_83000801    DC   X'83000801'
EDIT_WORD     DC   X'40202020202020202120'
ESD_ID        DC   CL8'ESD'

         IEWBUFF FUNC=MAPBUF,                                          +
               TYPE=ESD,                                               +
               PREFIX=IBMESD,                                          +
               HEADREG=R8,                                             +
               ENTRYREG=R7,                                            +
               SIZE=50,                                                +
               VERSION=5

              IEWBIND MF=(L,IEWBIND_I)
IEWBIND_L     EQU  *-IEWBIND_I

MSG01        DS    0C
             DC    C'DISESD01I    Entering DISESD'
MSG01_L      EQU   *-MSG01

MSG02        DS    0C
             DC    C'DISESD02I    Exiting DISESD'
MSG02_L      EQU   *-MSG02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDESD            DSECT
                  DS   18F
DXD_CSECT         DS   CL8
DXD_RETURN_CODE   DS   F
DXD_REASON_CODE   DS   F

DXD_BUFFER        DS   A

DXD_CURSOR        DS   F
DXD_ESD_RETURNED  DS   F

DXD_IEWBIND       DS   0F,(IEWBIND_L)X
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY     DISASMDA

                  IFGACB   AM=VSAM
ACB_L             EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY REGEQU
         END  DISESD
./ ADD NAME=DISGEN   0109-09119-09198-0841-00602-00580-00000-SOURCE
* -------------------------------------------------------------------*
*                                                                    *
*  Module name: DISGEN                                               *
*                                                                    *
*  Function:                                                         *
*   Generate source code                                             *
*                                                                    *
* -------------------------------------------------------------------*
DISGEN   CSECT
DISGEN   AMODE 31
DISGEN   RMODE ANY
         USING DISGEN,R11
         USING DISCOMM,R12
         USING LABEL_DSECT,R7
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISGEN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDGEN,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         MVC   COMM_SOURCE(COMM_SOURCE_L),COMM_BLANKS
         MVC   DXD_STATEMENT,COMM_BLANKS
         MVC   DXD_EDITWORD_FILL,COMM_BLANKS
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R9,DEBUG000
         MVC   COMM_SUBHEAD,COMM_BLANKS
         MVC   COMM_SUBHEAD(HEADING_L),HEADING
         MVI   PRINT_COMMAND,$PRINT_HEADING
         L     R15,V_DISPRINT
         BALR  R14,R15                        PRINT HEADING
         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH ALLOCATED?
         BNO   INIT0000                       NO
         ITRACE ID=OPEN_PUN
         OPEN  (DISPUNCH_DCB,OUTPUT),                                  +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
*  ------------------------------------------------------------------ *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0000 DS    0H
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   INIT0010
         L     R2,COMM_DISSPFD
         USING DISSPFD,R2
         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
         DROP  R2
* ------------------------------------------------------------------- *
*        Reset flags                                                  *
* ------------------------------------------------------------------- *
INIT0010 DS    0H
         ICM   R8,15,COMM_ALL_AREA_NEXT       1ST DATA/INSTR BLOCK
         BZ    INIT0030                       NO AREAS
         USING AREA_DSECT,R8
         OC    AREA_BEGIN,AREA_BEGIN          DISP ZERO?
         BZ    INIT0020                       YES
         DC    H'0'
INIT0020 DS    0H
         NI    AREA_FLAGS,255-$AREA_LABEL_GENNED
         ICM   R8,15,AREA_NEXT                NEXT AREA
         BNZ   INIT0020
         DROP  R8
INIT0030 DS    0H
         ICM   R6,15,COMM_BASE_NEXT           1ST BASE
         BZ    INIT0050
         USING BASE_DSECT,R6
INIT0040 DS    0H
         MVI   BASE_FLAGS,0                   RESET FLAGS
         ICM   R6,15,BASE_NEXT                NEXT BASE
         BNZ   INIT0040
* ------------------------------------------------------------------- *
*        Generate CSECT statement                                     *
* ------------------------------------------------------------------- *
INIT0050 DS    0H
         MVC   COMM_SOURCE_LABEL(L'COMM_CSECT),COMM_CSECT
         MVC   COMM_SOURCE_OPCODE,OP_CSECT
         BAL   R9,PUN0000
* ------------------------------------------------------------------- *
*        Generate ENTRY statements                                    *
* ------------------------------------------------------------------- *
GEN0010  DS    0H
         ICM   R8,15,COMM_ESD_NEXT            1ST ESD
         BZ    GEN0040
         USING ESD_DSECT,R8
GEN0020  DS    0H
         CLC   =C'LD',ESD_TYPE                'LD'?
         BNE   GEN0030                        NO
         MVC   COMM_SOURCE_OPCODE,OP_ENTRY
         MVC   COMM_SOURCE_OPERANDS(L'ESD_NAME),ESD_NAME
         BAL   R9,PUN0000                     OUTPUT THE ENTRY STMT
GEN0030  DS    0H
         ICM   R8,15,ESD_NEXT
         BNZ   GEN0020
         DROP  R8
* ------------------------------------------------------------------- *
*                                                                     *
*        Generate                                                     *
*                                                                     *
*   All object code will be described by AREA blocks.                 *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0040  DS    0H
         ICM   R8,15,COMM_ALL_AREA_NEXT       1ST DATA/INSTR BLOCK
         BNZ   GEN0050
         USING AREA_DSECT,R8
GEN0050  DS    0H
         ITRACE ID=GEN0050,                                            +
               DATA1=AREA_BEGIN,                                       +
               DATA2=AREA_END
         ICM   R7,15,AREA_LABEL               LABEL BLOCK ADDRESS?
         BZ    GEN0100                        NO
         TM    AREA_FLAGS,$AREA_LABEL_GENNED  LABEL GENNED?
         BO    GEN0100                        YES
         OI    AREA_FLAGS,$AREA_LABEL_GENNED  SET FLAG
         MVC   COMM_SOURCE_LABEL,LABEL_NAME   COPY LABEL
         MVC   COMM_SOURCE_OPCODE,OP_DS       SET OPCODE
         MVC   COMM_SOURCE_OPERANDS(2),=C'0C' USE "0C" ON DATA AREAS
         CLI   AREA_TYPE,$AREA_DATA           DATA LABEL?
         BE    GEN0060                        YES
         MVC   COMM_SOURCE_OPERANDS(2),=C'0H' USE "0H' ON INSTRUCTIONS
GEN0060  DS    0H
         UNPK  COMM_SOURCE_DISP(9),AREA_BEGIN(5)
         TR    COMM_SOURCE_DISP,COMM_HEXCHAR
         MVI   COMM_SOURCE_DISP+8,C' '
         BAL   R9,PUN0000
* ------------------------------------------------------------------- *
*        Generate USING or DROP statements                            *
* ------------------------------------------------------------------- *
GEN0100  DS    0H
         ICM   R6,15,COMM_USING_NEXT          1ST USING
         USING USING_DSECT,R6
         BZ    GEN0200                        NO USINGS
GEN0110  DS    0H
         ITRACE ID=USING,                                              +
               RDATA1=R6,                                              +
               DATA2=USING_BEGIN
         CLC   USING_BEGIN,AREA_BEGIN         AT OR BELOW THIS AREA?
         BNH   GEN0120                        YES.. GEN USING
         CLC   USING_END,AREA_END             ABOVE THIS AREA?
         BNL   GEN0130                        YES
         B     GEN0190
GEN0120  DS    0H
         TM    USING_FLAG,$USING_GENNED       USING ALREADY GENNED?
         BO    GEN0190                        YES
         ITRACE ID=GEN_USNG
         OI    USING_FLAG,$USING_GENNED       SET FLAG
         MVC   COMM_SOURCE_OPCODE,OP_USING    SET OPCODE
         B     GEN0140
GEN0130  DS    0H
         TM    USING_FLAG,$DROP_GENNED        DROP ALREADY GENNED?
         BO    GEN0190                        YES
         ITRACE ID=GEN_DROP
         OI    USING_FLAG,$DROP_GENNED        SET FLAG
         MVC   COMM_SOURCE_OPCODE,OP_DROP     SET OPCODE
         LA    R1,COMM_SOURCE_OPERANDS
         B     GEN0180
GEN0140  DS    0H
         MVC   COMM_SOURCE_OPERANDS(63),USING_DSECT_LABEL
         CLC   USING_DSECT_LABEL,COMM_BLANKS  LABEL NAME?
         BH    GEN0150                        YES
         MVC   COMM_SOURCE_OPERANDS(63),USING_DSECT_NAME
GEN0150  DS    0H
         LA    R1,COMM_SOURCE_OPERANDS
GEN0160  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BE    GEN0170                        YES
         LA    R1,1(,R1)                      NEXT
         B     GEN0160
GEN0170  DS    0H
         MVI   0(R1),C','                     INSERT COMMA
GEN0180  DS    0H
         MVC   1(3,R1),USING_CHAR_REGISTER    COPY REGISTER NUMBER
         BAL   R9,PUN0000
GEN0190  DS    0H
         ITRACE ID=NEXTUSNG
         ICM   R6,15,USING_NEXT               NEXT USING
         BNZ   GEN0110
         DROP  R6
* ------------------------------------------------------------------- *
*        Generate USING or DROP for BASE statements                   *
* ------------------------------------------------------------------- *
GEN0200  DS    0H
         ICM   R6,15,COMM_BASE_NEXT           1ST BASE
         BZ    GEN0300
         USING BASE_DSECT,R6
GEN0210  DS    0H
         ITRACE ID=BASE,                                               +
               DATA1=BASE_BEGIN,                                       +
               DATA2=AREA_BEGIN
         CLC   BASE_BEGIN,AREA_BEGIN          BASE BELOW THIS AREA
         BH    GEN0290                        YES
         TM    BASE_FLAGS,$BASE_GENNED        USING GENNED?
         BO    GEN0280                        YES
         ITRACE ID=BASEUSNG,                                           +
               DATA1=BASE_BEGIN,                                       +
               DATA2=AREA_BEGIN
         OI    BASE_FLAGS,$BASE_GENNED        SET FLAG
         MVC   COMM_SOURCE_OPCODE,OP_USING    SET OP CODE
         MVC   COMM_SOURCE_OPERANDS(L'COMM_CSECT),COMM_CSECT
         LA    R1,COMM_SOURCE_OPERANDS
GEN0220  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BE    GEN0230                        YES
         LA    R1,1(,R1)                      NEXT
         B     GEN0220
GEN0230  DS    0H
         ICM   R0,15,BASE_DISP                DISP BASE REFERS TO
         BZ    GEN0270
         MVI   0(R1),C'+'                     INSERT A PLUS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+4      EDIT DISP
         LA    R2,DXD_EDITWORD
GEN0240  DS    0H
         CLI   0(R2),C' '                     BLANK?
         BNE   GEN0250                        NO
         LA    R2,1(,R2)                      NEXT
         B     GEN0240
GEN0250  DS    0H
         MVC   1(8,R1),0(R2)                  COPY DISP
GEN0260  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BE    GEN0270                        YES
         LA    R1,1(,R1)
         B     GEN0260
GEN0270  DS    0H
         MVI   0(R1),C','
         MVI   1(R1),C'R'
         SR    R2,R2
         IC    R2,BASE_REGISTER               BASE
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REG_NAMES(R2)
         MVC   2(2,R1),0(R2)
         BAL   R9,PUN0000
         B     GEN0290
GEN0280  DS    0H
         CLC   BASE_END,AREA_END              ABOVE THIS AREA
         BE    GEN0290                        NO
         BH    GEN0290                        NO
         TM    BASE_FLAGS,$BASE_DROPPED       DROPPED?
         BO    GEN0290                        YES
         ITRACE ID=BASEDROP,                                           +
               DATA1=BASE_BEGIN,                                       +
               DATA2=AREA_BEGIN
         OI    BASE_FLAGS,$BASE_DROPPED       SET FLAG
         MVC   COMM_SOURCE_OPCODE,OP_DROP
         MVI   COMM_SOURCE_OPERANDS,C'R'
         SR    R2,R2
         IC    R2,BASE_REGISTER               BASE
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REG_NAMES(R2)
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)
         BAL   R9,PUN0000
GEN0290  DS    0H
         ICM   R6,15,BASE_NEXT
         BNZ   GEN0210
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0300  DS    0H
         ITRACE ID=GENAREA,                                            +
               DATA1=AREA_BEGIN,                                       +
               DATA2=0(R8)
         MVC   COMM_GEN_LENGTH,AREA_LENGTH    SET LENGTH
         ICM   R6,15,AREA_BEGIN               DISP TO OBJECT CODE
         A     R6,COMM_CSECT_TEXT             PLUS TEXT BASE
         CLI   AREA_TYPE,$AREA_DATA           AT A DATA AREA?
         BE    GEN0350                        YES
         CLI   AREA_TYPE,$AREA_INSTRUCTION    AT AN INSTRUCTION?
         BE    GEN0400
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0350  DS    0H
         ITRACE ID=GEN_DC
         L     R5,COMM_OPCODE_TABLE_ADDR      OPCODE TABLE
         L     R5,0(R5)                       DC ENTRY
         USING OPCODE_DSECT,R5
         L     R15,V_GENDC                    GENDC ENTRY POINT
         BALR  R14,R15                        GENERATE DC
         B     GEN0500
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0400  DS    0H
         ITRACE ID=GEN_INST
         MVC   COMM_GEN_DISP,AREA_BEGIN       SET DISP
         SR    R2,R2
         IC    R2,0(R6)                       OPCODE
         SLL   R2,2                           MULTIPLY BY 4
         A     R2,COMM_OPCODE_TABLE_ADDR      PLUS OPCODE TABLE BASE
         L     R5,0(R2)                       OPCODE ENTRY
         ITRACE ID=OPCODE,                                             +
               RDATA1=R5,                                              +
               DATA2=OPCODE_MACHINE
         LA    R4,FORMAT_TABLE
         USING FORMAT_DSECT,R4
GEN0410  DS    0H
         CLC   FORMAT_FORMAT,OPCODE_FORMAT    LOCATED FORMAT?
         BE    GEN0420
         LA    R4,FORMAT_L(R4)                NEXT FORMAT
         CLI   0(R4),X'FF'                    END OF TABLE?
         BNE   GEN0410                        NO
         DC    H'0'
GEN0420  DS    0H
         ITRACE ID=FORMAT,                                             +
               RDATA1=R4,                                              +
               DATA2=FORMAT_ADDR
         ICM   R15,15,FORMAT_ADDR
         BALR  R14,R15
GEN0430  DS    0H
         SR    R15,R15
* ------------------------------------------------------------------- *
*                                                                     *
*       Generate the displacement, and the object text for the        *
*       current instruction or DC.                                    *
*                                                                     *
*       Recompute the text address (R6)                               *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0500  DS    0H
         STC   R15,DXD_GEN_RC
         ITRACE ID=GEN_RC,                                             +
               RDATA1=R15
         L     R6,COMM_GEN_DISP
         A     R6,COMM_CSECT_TEXT
         ICM   R1,15,COMM_GEN_LENGTH          LENGTH
         BZ    GEN0520                        NO OBJECT AT THIS POINT
         BCTR  R1,0
         EX    R1,MVC_01
         CLI   AREA_TYPE,$AREA_INSTRUCTION    AN INSTRUCTION?
         BNE   GEN0510                        NO
         UNPK  DXD_UNPACK_OUT_1(5),DXD_UNPACK_IN+0(3)
         UNPK  DXD_UNPACK_OUT_2(5),DXD_UNPACK_IN+2(3)
         UNPK  DXD_UNPACK_OUT_3(5),DXD_UNPACK_IN+4(3)
         UNPK  DXD_UNPACK_OUT_4(5),DXD_UNPACK_IN+6(3)
         TR    DXD_UNPACK_OUT_1,COMM_HEXCHAR
         TR    DXD_UNPACK_OUT_2,COMM_HEXCHAR
         TR    DXD_UNPACK_OUT_3,COMM_HEXCHAR
         TR    DXD_UNPACK_OUT_4,COMM_HEXCHAR
         MVI   DXD_BLANK_1,C' '
         MVI   DXD_BLANK_2,C' '
         MVI   DXD_BLANK_3,C' '
         LA    R2,LENGTH_TABLE(R1)
         IC    R1,0(R2)
         EX    R1,MVC_02
         B     GEN0520
GEN0510  DS    0H
         UNPK  DXD_UNPACK_OUT+0(9),DXD_UNPACK_IN+0(5)
         UNPK  DXD_UNPACK_OUT+8(9),DXD_UNPACK_IN+4(5)
         TR    DXD_UNPACK_OUT(16),COMM_HEXCHAR
         ICM   R1,15,COMM_GEN_LENGTH
         SLL   R1,1
         BCTR  R1,0
         EX    R1,MVC_02
GEN0520  DS    0H
         TM    OPCODE_FLAGS,$OPCODE_CCA+$OPCODE_CCC+$OPCODE_CCL
         BZ    GEN0530
         ITRACE ID=SAVE_CC,                                            +
               DATA1=OPCODE_FLAGS
         MVC   COMM_CC,OPCODE_FLAGS           SAVE CONDITION CODE TYPE
GEN0530  DS    0H
         UNPK  COMM_SOURCE_DISP(9),COMM_GEN_DISP(5)
         TR    COMM_SOURCE_DISP,COMM_HEXCHAR
         MVI   COMM_SOURCE_DISP+8,C' '
         MVC   COMM_SOURCE_OPCODE,OPCODE_MNEMONIC
         BAL   R9,PUN0000
         CLI   DXD_GEN_RC,0                   AREA ALL PROCESSED?
         BNE   GEN0050                        NO
         ITRACE ID=NEXTAREA,                                           +
               DATA1=AREA_NEXT
         ICM   R8,15,AREA_NEXT                NEXT AREA
         BNZ   GEN0050                        PROCESS THIS AREA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    COMM_FLAGS,$COMM_ASSEM         ASSEMBLER SOURCE?
         BO    GEN0610                        YES
         LA    R2,REG_NAMES
GEN0600  DS    0H
         MVC   COMM_SOURCE_OPCODE(3),=C'EQU'
         MVI   COMM_SOURCE_LABEL,C'R'
         MVC   COMM_SOURCE_LABEL+1(2),0(R2)
         MVC   COMM_SOURCE_OPERANDS(2),0(R2)
         BAL   R9,PUN0000
         LA    R2,2(R2)
         CLI   0(R2),X'FF'
         BNE   GEN0600
         B     GEN0640
* ------------------------------------------------------------------- *
*        Copy assembler source                                        *
* ------------------------------------------------------------------- *
GEN0610  DS    0H
         ITRACE ID=COPYSRC
         USING DCBE,SYSIN_DCBE
         LA    R1,GEN0630
         ST    R1,DCBEEODA                    SET EOD ADDRESS
         ITRACE ID=OPEN
         OPEN  (SYSIN_DCB,INPUT),                                      +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
GEN0620  DS    0H
         ITRACE ID=READ_WRT
         GET   SYSIN_DCB,DXD_STATEMENT        READ FROM SYSIN
         PUT   DISPUNCH_DCB,DXD_STATEMENT     WRITE TO DISPUNCH
         B     GEN0620
GEN0630  DS    0H
         ITRACE ID=CLOSE
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0640  DS    0H
         ITRACE ID=GEN_END
         MVC   COMM_SOURCE_OPCODE,OP_END
         MVC   COMM_SOURCE_OPERANDS(L'COMM_CSECT),COMM_CSECT
         BAL   R9,PUN0000
         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH DD ALLOCATED?
         BNO   EXIT0000                       NO
         ITRACE ID=CLOS_PUN
         CLOSE DISPUNCH_DCB,                  CLOSE DISPUNCH           +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PUN0000  DS    0H
         MVC   PRINT_DATA,COMM_SOURCE         COPY TO PRINT
         MVI   PRINT_COMMAND,$PRINT_PRINT
         L     R15,V_DISPRINT
         BALR  R14,R15                        PRINT SOURCE
         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH DD PRESENT?
         BNO   PUN0010                        NO
         MVC   DXD_STATEMENT,COMM_SOURCE_LABEL
         PUT   DISPUNCH_DCB,DXD_STATEMENT     PUNCH
PUN0010  DS    0H
         MVC   COMM_SOURCE(COMM_SOURCE_L),COMM_BLANKS
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R9,DEBUG000
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MVC_01   MVC   DXD_UNPACK_IN(0),0(R6)
MVC_02   MVC   COMM_SOURCE_HEX_1(0),DXD_UNPACK_OUT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START           DC   Q(DXDGEN)
V_GENDC             DC   V(GENDC)
OP_CSECT            DC   CL6'CSECT'
OP_END              DC   CL6'END'
OP_ENTRY            DC   CL6'ENTRY'
OP_USING            DC   CL6'USING'
OP_DROP             DC   CL6'DROP'
OP_DS               DC   CL6'DS'
XFFFF               DC   X'FFFFFFFF'

EDITWORD            DC   X'4020202020202120'

FORMAT_TABLE        DC   AL1($OPCODE_RR1),VL4(GENRR1)
                    DC   AL1($OPCODE_RR2),VL4(GENRR2)
                    DC   AL1($OPCODE_RR3),VL4(GENRR3)
                    DC   AL1($OPCODE_RX),VL4(GENRX)
                    DC   AL1($OPCODE_S),VL4(GENSI)
                    DC   AL1($OPCODE_SI),vL4(GENSI)
                    DC   AL1($OPCODE_RS1),VL4(GENRS1)
                    DC   AL1($OPCODE_RS2),VL4(GENRS2)
                    DC   AL1($OPCODE_RS3),VL4(GENRS3)
                    DC   AL1($OPCODE_SS1),VL4(GENSS1)
                    DC   AL1($OPCODE_SS2),VL4(GENSS2)
                    DC   AL1($OPCODE_SS3),AL4(GEN0430)
                    DC   AL1($OPCODE_SS4),AL4(GEN0430)
                    DC   AL1($OPCODE_B2),AL4(GEN0430)
                    DC   AL1($OPCODE_B2S),AL4(GEN0430)
                    DC   AL1($OPCODE_B2R),AL4(GEN0430)
                    DC   AL1($OPCODE_B2RR),AL4(GEN0430)
                    DC   X'FF'

REG_NAMES           DC   CL2'0 '
                    DC   CL2'1 '
                    DC   CL2'2 '
                    DC   CL2'3 '
                    DC   CL2'4 '
                    DC   CL2'5 '
                    DC   CL2'6 '
                    DC   CL2'7 '
                    DC   CL2'8 '
                    DC   CL2'9 '
                    DC   CL2'10'
                    DC   CL2'11'
                    DC   CL2'12'
                    DC   CL2'13'
                    DC   CL2'14'
                    DC   CL2'15'
                    DC   X'FF'

LENGTH_TABLE        DC   AL1(01)    1
                    DC   AL1(03)    2
                    DC   AL1(06)    3
                    DC   AL1(08)    4
                    DC   AL1(11)    5
                    DC   AL1(13)    6
                    DC   AL1(16)    7
                    DC   AL1(18)    8

HEADING             DS   0C
                    DC   C'0DISASM - Generated Source'
HEADING_L           EQU  *-HEADING

MSG01               DS   0C
                    DC   C'DISGEN01I    Entering DISGEN'
MSG01_L             EQU  *-MSG01

MSG02               DS   0C
                    DC   C'DISGEN02I    Exiting DISGEN'
MSG02_L             EQU  *-MSG02

AREAMSG1            DS   0C
                    DC   C'ALL areas at entry to DISGEN'
AREAMSG1_L          EQU  *-AREAMSG1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDGEN              DSECT
                    DS   18F
DXD_CSECT           DS   CL8

DXD_DISP            DS   XL4

DXD_GEN_RC          DS   X

DXD_STATEMENT       DS   CL80

DXD_UNPACK_IN       DS   CL8

DXD_UNPACK_OUT      DS   0C
DXD_UNPACK_OUT_1    DS   XL4
DXD_BLANK_1         DS   X
DXD_UNPACK_OUT_2    DS   XL4
DXD_BLANK_2         DS   X
DXD_UNPACK_OUT_3    DS   XL4
DXD_BLANK_3         DS   X
DXD_UNPACK_OUT_4    DS   XL4
                    DS   X

DXD_EDITWORD        DS   CL8
DXD_EDITWORD_FILL   DS   CL8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FORMAT_DSECT        DSECT
FORMAT_FORMAT       DS   X
FORMAT_ADDR         DS   XL4
FORMAT_L            EQU  *-FORMAT_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               DISSPFD  TYPE=DSECT
               COPY     DISASMDA
               IHADCBE

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY REGEQU
               END  DISGEN
./ ADD NAME=DISKLIST 0101-09119-09198-0841-00768-00768-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISKLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of libraries of pre-processed DSECTs.   *
*                                                                     *
*                                                                     *
*  The disassembler allows actual assembler source to be used to      *
*  "map" data areas.  DSECTs can be either processed during           *
*  dis-assembly or pre-processed by DISASMU1.  The info obtained      *
*  from pre-processing DSECTs is recorded in VSAM KSDSes.             *
*  In TSO mode, the KSDSes are allocated/freed dynamically.           *
*                                                                     *
*  This module displays the KSDSes currently allocated and allows     *
*  the user to change/add/or remove a data set(s).                    *
*                                                                     *
* ------------------------------------------------------------------- *
DISKLIST CSECT
DISKLIST AMODE 31
DISKLIST RMODE ANY
         USING DISKLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISKLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDKLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING KSDS_DSECT,R6
         USING IFGACB,KSDS_ACB
* ------------------------------------------------------------------- *
*                                                                     *
*        If R1 is zero display existing KSDS list                     *
*        If R1 not zero, display list passed in R1                    *
*                                                                     *
* ------------------------------------------------------------------- *
         ST    R1,DXD_FIRST_KSDS
         ST    R1,DXD_FIRST_DISPLAYED
         LTR   R1,R1                             R1 ZERO?
         BNZ   INIT0030                          NO
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing KSDS chain.                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=COPYCHAN
         LA    R2,DXD_FIRST_KSDS-4
PREV     USING KSDS_DSECT,R2
         ICM   R6,15,COMM_KSDS_NEXT              FIRST KSDS
         BZ    INIT0030
INIT0010 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN             IS THE KSDS OPEN
         BNO   INIT0020                          NO
         ITRACE ID=CLOSE,                                              +
               DATA1=KSDS_DDNAME
         CLOSE KSDS_ACB,                         CLOSE THE ACB         +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR0010                           NO
         NI    KSDS_FLAGS,255-$KSDS_OPEN         RESET FLAG
INIT0020 DS    0H
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION
         MVC   COMM_DAIR_DD,KSDS_DDNAME          SET DDNAME
         L     R15,V_DISDAIR
         BALR  R14,R15                           DEALLOCATE KSDS
         LTR   R15,R15                           SUCCESSFUL?
         BNZ   ERR1000                           NO
         GETMAIN RU,                             GETMAIN NEW KSDS BLOCK+
               LV=KSDS_DSECT_L,                                        +
               LOC=ANY
NEW      USING KSDS_DSECT,R1
         ITRACE ID=COPYKSDS,                                           +
               RDATA1=R1,                                              +
               RDATA2=R6
         MVC   NEW.KSDS_DSECT(KSDS_DSECT_L),KSDS_DSECT
         ST    R1,PREV.KSDS_NEXT
         LR    R2,R1
         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?
         BNZ   INIT0010                          YES.. PROCESS IT
         DROP  NEW,PREV
         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_KSDS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0030 DS    0H
         L     R0,SPF_VDEPTH                     NBR OF LINES
         SLL   R0,2                              MULTIPLY BY 4
         ST    R0,DXD_KSDS_TABLE_SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_KSDS_TABLE                 SAVE ADDRESS
         ITRACE ID=A_TABLE,                                            +
               RDATA1=R1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R0,DXD_KSDS_TABLE
         L     R1,DXD_KSDS_TABLE_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INIT AREA TABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
MAIN0020 DS    0H
         MVC   0(MSG01_L,R8),MSG01               INITIALIZE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0020                       LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         USING MSG01,R8
         L     R7,SPF_VDEPTH
MAIN0030 DS    0H
         L     R4,DXD_KSDS_TABLE                 FIRST 'SLOT'
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY
         BZ    MAIN0060                          NOTHING DEFINED YET
MAIN0040 DS    0H
         ITRACE ID=KSDS,                                               +
               RDATA1=R6,                                              +
               DATA2=KSDS_DDNAME
         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR
         ST    R6,0(R4)                          SAVE ADDR
         MVC   MSG01_DSN,KSDS_DSNAME             COPY DATA SET NAME
         LA    R1,1                              CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL
         LA    R4,4(,R4)                         NEXT IN ADDR TABLE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R6,15,KSDS_NEXT
         BNZ   MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,DISKDATA           SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                            RC = 0?
         BNZ   MAIN0500                          NO
         CLC   ABEND,SPF_ZCMD                    ABEND
         BE    ABEND000                          YES
         CLC   CANCEL,SPF_ZCMD                   CANCEL?
         BE    MAIN1000                          YES
         CLC   CAN,SPF_ZCMD                      CAN(CEL)?
         BE    MAIN1000                          YES
* ------------------------------------------------------------------- *
*                                                                     *
*        Verify all DSNs                                              *
*          cataloged                                                  *
*          are KSDSes                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG
MAIN0070 DS    0H
         MVC   MSG01_MSG,COMM_BLANKS             RESET MSG
         OC    MSG01_DSN,COMM_BLANKS             TRANSLATE TO UPPER
         CLC   MSG01_DSN,COMM_BLANKS             BLANK?
         BE    MAIN0090                          YES
         MVC   COMM_DSINFO_DSN,MSG01_DSN         COPY DSN
         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT
         BALR  R14,R15
         ITRACE ID=DINFO_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                           ERROR?
         BZ    MAIN0080                          NO
         MVC   MSG01_MSG,COMM_DSINFO_MSG         COPY MESSAGE
         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG
         B     MAIN0090
MAIN0080 DS    0H
         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_VSAM
         BE    MAIN0090                          YES
         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG
         MVC   MSG01_MSG(ERR01_L),ERR01
MAIN0090 DS    0H
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0070
         TM    DXD_FLAGS,$DXD_ERROR              ANY ERRORS?
         BO    MAIN0060                          DISPLAY W/MSG(S)
* ------------------------------------------------------------------- *
*                                                                     *
*        Determine if any KSDSes were                                 *
*          updated                                                    *
*          removed                                                    *
*          added                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
         L     R4,DXD_KSDS_TABLE                 FIRST KSDS
MAIN0130 DS    0H
         ITRACE ID=MAIN0130
         L     R6,0(,R4)                         KSDS BLOCK IF USED
         OC    MSG01_DSN,COMM_BLANKS             'TRANSLATE'
         CLC   MSG01_DSN,COMM_BLANKS             BLANK?
         BE    MAIN0180                          YES
         LTR   R6,R6                             KSDS BLOCK EXIST?
         BZ    MAIN0150                          NO
         CLC   MSG01_DSN,KSDS_DSNAME             SAME DSN?
         BE    MAIN0220                          YES
MAIN0140 DS    0H
         ITRACE ID=UPDTKSDS
         OI    DXD_FLAGS,$DXD_UPDATE             KSDS HAS BEEN UPDATED
         MVC   KSDS_DSNAME,MSG01_DSN             CHANGE DSN
         B     MAIN0220
MAIN0150 DS    0H
         ITRACE ID=NEW_KSDS
         OI    DXD_FLAGS,$DXD_UPDATE
         GETMAIN RU,                                                   +
               LV=KSDS_DSECT_L,                                        +
               LOC=ANY
NEW      USING KSDS_DSECT,R1
         XC    NEW.KSDS_DSECT(KSDS_DSECT_L),NEW.KSDS_DSECT
         MVC   NEW.KSDS_EYE,KSDS_ID              IDENTIFY BLOCK
         MVC   NEW.KSDS_DSNAME,MSG01_DSN         SET DSN
         MVC   NEW.KSDS_ACB(ACB_L),ACB_I         INITIALIZE ACB
         LA    R6,DXD_FIRST_KSDS-4               FIRST KSDS
MAIN0160 DS    0H
         ICM   R2,15,KSDS_NEXT                   ANOTHER ON CHAIN?
         BZ    MAIN0170                          YES
         LR    R6,R2                             COPY ADDRESS
         B     MAIN0160
MAIN0170 DS    0H
         ST    R1,KSDS_NEXT                      SET 'NEXT' IN PREVIOUS
         ST    R6,NEW.KSDS_PREV                  SET PREV IN NEW
         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         BNZ   MAIN0220                          BLOCK PRESENT
         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN
         B     MAIN0220
         DROP  NEW
MAIN0180 DS    0H
         LTR   R6,R6                             KSDS EXIST?
         BZ    MAIN0220                          NO
         OI    DXD_FLAGS,$DXD_UPDATE             A KSDS WAS UPDATED
         ITRACE ID=DEL_KSDS,                     DELETING A KSDS BLOCK +
               RDATA1=R6
         ICM   R1,15,KSDS_NEXT                   NEXT KSDS ON CHAIN
         BZ    MAIN0190
NEXT     USING KSDS_DSECT,R1
         MVC   NEXT.KSDS_PREV,KSDS_PREV          SET PREV IN NEXT
         DROP  NEXT
MAIN0190 DS    0H
         ICM   R1,15,KSDS_PREV                   PREVIOUS ON CHAIN
         BZ    MAIN0200                          NO PREVIOUS BLOCK
PREV     USING KSDS_DSECT,R1
         MVC   PREV.KSDS_NEXT,KSDS_NEXT          SET NEXT IN PREVIOUS
MAIN0200 DS    0H
         C     R6,DXD_FIRST_DISPLAYED            FIRST KSDS DISPLAYED?
         BNE   MAIN0210                          NO
         MVC   DXD_FIRST_DISPLAYED,KSDS_NEXT     CHANGE TO NEXT BLOCK
MAIN0210 DS    0H
         FREEMAIN RU,                            FREEMAIN KSDS BLOCK   +
               A=(R6),                                                 +
               LV=KSDS_DSECT_L
         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE
MAIN0220 DS    0H
         ITRACE ID=NEXT
         A     R8,SPF_VWIDTH                     NEXT LINE
         LA    R4,4(,R4)                         NEXT IN TABLE
         BCT   R7,MAIN0130                       LOOP
         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?
         BO    MAIN0010                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0300
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0320
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0330
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0340
         B     MAIN0050
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,DXD_FIRST_KSDS              FIRST ON CHAIN
TEMP     USING KSDS_DSECT,R1
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
MAIN0310 DS    0H
         LR    R6,R1                             SAVE THIS ADDR
         ICM   R1,15,TEMP.KSDS_NEXT              NEXT KSDS
         BNZ   MAIN0310
         B     MAIN0010                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0320 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0300                          YES
         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=TOP
         L     R6,DXD_FIRST_KSDS                 FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0330                          YES
         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0350 DS    0H
         LR    R6,R1                             COPY ADDR
         ICM   R1,15,TEMP.KSDS_PREV              PREVIOUS KSDS
         BZ    MAIN0010
         BCT   R7,MAIN0350                       LOOP
         B     MAIN0010
         DROP  TEMP
* ------------------------------------------------------------------- *
*                                                                     *
*      Replace the existing KSDS chain with the updated chain         *
*                                                                     *
*        Run the new chain                                            *
*                                                                     *
*        Allocate the data sets                                       *
*        OPEN the ACBs                                                *
*                                                                     *
*      If there are any errors,                                       *
*        CLOSE and FREE all data sets on the chain                    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=TERM
         TM    DXD_FLAGS,$DXD_ERROR              ERROR FLAG ON?
         BO    MAIN0700                          YES
         ICM   R6,15,DXD_FIRST_KSDS              FIRST ON NEW CHAIN
         BZ    MAIN0600                          NONE ON CHAIN
         ZAP   DXD_DSECT_NBR,P0                  RESET DSECT NBR
MAIN0510 DS    0H
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET DAIR FUNCTION
         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         MVC   COMM_DAIR_DD,COMM_BLANKS          INIT DD NAME
         AP    DXD_DSECT_NBR,P1                  ADD 1 TO DSECT NBR
         MVC   COMM_DAIR_DD+3(4),=X'40212020'    COPY EDIT WORD
         ED    COMM_DAIR_DD+3(4),DXD_DSECT_NBR   EDIT DSECT NBR
         MVC   COMM_DAIR_DD(5),=CL5'DSECT'       SET DD PREFIX
         MVC   KSDS_DDNAME,COMM_DAIR_DD          COPY DD NAME
         MVC   COMM_DAIR_DSN,KSDS_DSNAME      SET DSN
         MVC   COMM_DAIR_MEMBER,COMM_BLANKS   NO MEMBER
         MVC   COMM_DAIR_VOLSER,COMM_BLANKS   NO VOLSER
         ITRACE ID=ALOC_NEW,                                           +
               DATA1=COMM_DAIR_DD
         L     R15,V_DISDAIR
         BALR  R14,R15                        ALLOCATE THE KSDS
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   MAIN0530                       NO
         MVC   ACBDDNM,COMM_DAIR_DD           SET DD NAME
         ITRACE ID=OPEN_ACB,                                           +
               DATA1=ACBDDNM
         OPEN  (KSDS_ACB,INPUT),              OPEN THE ACB             +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         ITRACE ID=OPEN_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   MAIN0540                       NO
         OI    KSDS_FLAGS,$KSDS_OPEN          INDICATE KSDS IS OPEN
MAIN0520 DS    0H
         ICM   R6,15,KSDS_NEXT                NEXT KSDS
         BNZ   MAIN0510
         B     MAIN0600
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0530 DS    0H
         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED
         CLC   SPF_MSG_1,COMM_BLANKS          ALREADY HAVE A MSG?
         BNE   MAIN0550                       YES
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         B     MAIN0550
MAIN0540 DS    0H
         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED
         MVC   COMM_INFO_01(8),KSDS_DDNAME    COPY DDNAME
         MVC   COMM_INFO_02(44),KSDS_DSNAME   COPY DSNAME
         STH   R15,COMM_INFO_03               SAVE OPEN RC
         MVI   COMM_MSG_ID,4
         BAL   R5,MSG0000                     BUILD MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
*      An error occurred allocating or OPENing one of the KSDSes      *
*      in the new list.                                               *
*                                                                     *
*      Run the new chain, CLOSE and de-allocate all KSDSes            *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0550 DS    0H
         ITRACE ID=RESETNEW
         ICM   R6,15,DXD_FIRST_KSDS           FIRST KSDS
         BZ    MAIN0550
MAIN0560 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN          DATA SET OPEN?
         BNO   MAIN0570                       NO
         ITRACE ID=CLOSE,                                              +
               DATA1=KSDS_DDNAME
         CLOSE KSDS_ACB,                                               +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0020                        NO
MAIN0570 DS    0H
         ITRACE ID=FREE,                                               +
               DATA1=KSDS_DDNAME
         MVC   COMM_DAIR_DD,KSDS_DDNAME       COPY DDNAME
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION
         L     R15,V_DISDAIR                  DISDAIR ENTRY POINT
         BALR  R14,R15                        FREE THE DD
         LR    R1,R6                          COPY ADDRESS
         ICM   R6,15,KSDS_NEXT                NEXT KSDS
         BNZ   MAIN0560                       YES
         B     MAIN0060
* ------------------------------------------------------------------- *
*                                                                     *
*        All libraries were found and are valid                       *
*                                                                     *
*        Replace old chain with new                                   *
*          Make sure the KSDSes in the old list are CLOSEd            *
*          Free the DSECTs, LABELs, EQUATEs associated                *
*          Free the KSDS block                                        *
*          Copy the address of first KDDS block on new chain          *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0600 DS    0H
         ITRACE ID=SWITCH,                                             +
               DATA1=COMM_KSDS_NEXT,                                   +
               DATA2=DXD_FIRST_KSDS
         ICM   R6,15,COMM_KSDS_NEXT           1ST KSDS
         BZ    MAIN0690
MAIN0610 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN          DATA SET OPEN?
         BNO   MAIN0620                       NO
         CLOSE KSDS_ACB,                                               +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
MAIN0620 DS    0H
         ICM   R5,15,KSDS_DSECT_NEXT          FIRST DSECT
         BZ    MAIN0680
         USING DSECT_DSECT,R5
MAIN0630 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL
         BZ    MAIN0670
         USING LABEL_DSECT,R4
MAIN0640 DS    0H
         ICM   R3,15,LABEL_EQU_NEXT           FIRST EQU
         BZ    MAIN0660
         USING EQU_DSECT,R3
MAIN0650 DS    0H
         LR    R1,R3                          COPY EQU BLOCK ADDR
         ICM   R3,15,EQU_NEXT                 NEXT EQU
         FREEMAIN RU,                         FREE THIS EQU            +
               A=(1),                                                  +
               LV=EQU_DSECT_L
         LTR   R3,R3                          ANOTHER EQU?
         BNZ   MAIN0650                       YES
MAIN0660 DS    0H
         LR    R1,R4
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         FREEMAIN RU,                         FREE THIS LABEL          +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
         LTR   R4,R4                          ANOTHER LABEL?
         BNZ   MAIN0640                       YES
MAIN0670 DS    0H
         LR    R1,R5
         ICM   R5,15,DSECT_NEXT               NEXT DSECT
         FREEMAIN RU,                         FREE THIS DSECT          +
               A=(1),                                                  +
               LV=DSECT_DSECT_L
         LTR   R5,R5                          ANOTHER DSECT?
         BNZ   MAIN0630                       YES
MAIN0680 DS    0H
         LR    R1,R6
         ICM   R6,15,KSDS_NEXT                NEXT KSDS
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=KSDS_DSECT_L
         LTR   R6,R6                          ANOTHER KSDS?
         BNZ   MAIN0610                       YES
MAIN0690 DS    0H
         MVC   COMM_KSDS_NEXT,DXD_FIRST_KSDS  CHANGE KSDS CHAIN
         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS  RESET DXD CHAIN
         DROP  R3,R4,R5
         B     EXIT0000
* ------------------------------------------------------------------- *
*        User has requested exit with error(s) pending                *
* ------------------------------------------------------------------- *
MAIN0700 DS    0H
         ITRACE ID=PURGE
         MVI   COMM_MSG_ID,5
         BAL   R5,MSG0000
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
* ------------------------------------------------------------------- *
*                                                                     *
*        User has requested all changes to be cancelled.              *
*                                                                     *
*        Free any blocks on new chain                                 *
*        Re-allocate and OPEN KSDSes on existing chain                *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN1000 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND
         ICM   R6,15,DXD_FIRST_KSDS           FIRST ON NEW CHAIN
         BZ    MAIN1020
         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS  CLEAR FOR NEXT TIME
MAIN1010 DS    0H
         LR    R1,R6                          COPY ADDRESS
         ICM   R6,15,KSDS_NEXT                NEXT KSDS
         ITRACE ID=FREEKSDS,                                           +
               RDATA1=R6,                                              +
               DATA2=KSDS_DDNAME
         FREEMAIN RU,                         FREEMAIN THE BLOCK       +
               A=(1),                                                  +
               LV=KSDS_DSECT_L
         LTR   R6,R6                          ANOTHER ON CHAIN?
         BNZ   MAIN1010                       YES
* ------------------------------------------------------------------- *
*        Run existing chain, allocate and OPEN the KSDSes             *
* ------------------------------------------------------------------- *
MAIN1020 DS    0H
         ITRACE ID=REDO_OLD,                                           +
               DATA1=COMM_KSDS_NEXT
         ICM   R6,15,COMM_KSDS_NEXT
         BZ    EXIT0000
MAIN1030 DS    0H
         ITRACE ID=RE-ALLOC
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION
         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         MVC   COMM_DAIR_DD,KSDS_DDNAME       SET DD NAME
         MVC   COMM_DAIR_DSN,KSDS_DSNAME      SET DATA SET NAME
         MVC   COMM_DAIR_MEMBER,COMM_BLANKS
         MVC   COMM_DAIR_VOLSER,COMM_BLANKS
         L     R15,V_DISDAIR
         BALR  R14,R15                        ALLOCATE KSDS
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR1000                        NO
         ITRACE ID=RE-OPEN,                                            +
               DATA1=KSDS_DDNAME
         OPEN  KSDS_ACB,                      OPEN THE ACB             +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         ITRACE ID=OPEN_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0030                        NO
         OI    KSDS_FLAGS,$KSDS_OPEN          INDICATE KSDS IS OPEN
         ICM   R6,15,KSDS_NEXT                ANOTHER KSDS?
         BNZ   MAIN1030                       YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1                  INIT CLOSE FAILED
         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME
         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME
         STH   R15,COMM_INFO_03               CLOSE RC
         B     ERR0100
ERR0020  DS    0H
         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME
         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME
         STH   R15,COMM_INFO_03               CLOSE RC
         MVI   COMM_MSG_ID,2                  CLOSING NEW ACB FAILED
         B     ERR0100
ERR0030  DS    0H
         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME
         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME
         STH   R15,COMM_INFO_03               CLOSE RC
         MVI   COMM_MSG_ID,3                  "CANCEL" CLOSE FAILED
ERR0100  DS    0H
         BAL   R5,MSG0000
         B     ERR1010
ERR1000  DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         MVC   COMM_MSG_CSECT,MODID
ERR1010  DS    0H
         MVC   COMM_SPF_FUNCTION,DISPLAY
         MVC   COMM_SPF_PANEL,DIS0000         SET PANEL NAME
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'               FLAG END OF LIST
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        DISPLAY PANEL
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         ITRACE ID=MSG,                                                +
               DATA1=COMM_MSG_ID
         CLC   SPF_MSG_1,COMM_BLANKS          ALREADY HAVE A MSG?
         BNER  R5                             YES
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         MVC   COMM_MSG_CSECT,MODID
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R2
         L     R0,DXD_KSDS_TABLE_SIZE         ADDR TABLE SIZE
         L     R1,DXD_KSDS_TABLE              ADDR TABLE ADDR
         FREEMAIN RU,                         FREEMAIN ADDR TABLE      +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         L     R14,12(,R13)                   RESTORE REGISTERS         ASE01680
         LR    R15,R2                         SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDKLIST)

ACB_I    ACB   AM=VSAM,                                                +
               DDNAME=ANYDD,                                           +
               MACRF=(KEY,DIR,SEQ)

P0            DC   P'0'
P1            DC   P'1'

KSDS_ID       DC   CL8'KSDS'
ABEND         DC   C'ABEND'
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
DISKDATA      DC   CL8'DISKDATA'
DISPLAY       DC   CL8'DISPLAY'
DIS0000       DC   CL8'DIS0000'

ERR01         DC   C'Not VSAM'
ERR01_L       EQU  *-ERR01

              LTORG


MSG01         DS   0C
              DC   AL1($ATTR_INPUT)
MSG01_DSN     DC   CL44' '
              DC   AL1($ATTR_HIGH_YELLOW)
MSG01_MSG     DC   CL30' '
MSG01_L       EQU  *-MSG01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDKLIST              DSECT
                      DS  18F

                      DS  A             DUMMY FOR 'PREV' ON CHAIN
DXD_FIRST_KSDS        DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_KSDS_TABLE        DS  A
DXD_KSDS_TABLE_SIZE   DS  F


DXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED

DXD_FLAGS             DS  X             FLAGS
$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR
$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED

DXD_DSECT_NBR         DS  PL2
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
              COPY    REGEQU
              END     DISKLIST
./ ADD NAME=DISLREAD 0111-09104-09198-0842-00207-00175-00092-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISLREAD                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Read LABELS and EQUATEs for a DSECT in a KSDS                    *
*                                                                     *
* ------------------------------------------------------------------- *
DISLREAD CSECT
DISLREAD AMODE 31
DISLREAD RMODE ANY
         USING DISLREAD,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISLREAD'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDLREAD,R13
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_USING_KSDS,                                  +
               DATA2=COMM_USING_DSECT
         L     R6,COMM_USING_KSDS             KSDS BLOCK ADDR
         L     R5,COMM_USING_DSECT            DSECT BLOCK ADDR
         USING KSDS_DSECT,R6
         USING DSECT_DSECT,R5
         MVC   DXD_RPL(RPL_L),RPL_I
         USING IFGRPL,DXD_RPL
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        READ the LABELs (and EQUATES) for a DSECT from a KSDS        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         TM    KSDS_FLAGS,$KSDS_OPEN          KSDS OPEN?
         BO    MAIN0020                       YES
         OPEN  (KSDS_ACB,INPUT),              OPEN THE KSDS            +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         OI    KSDS_FLAGS,$KSDS_OPEN          SET FLAG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0020 DS    0H
         ITRACE ID=MODCB1
         MVC   DXD_MODCB(MODCB1_L),MODCB1_I
         LA    R2,DXD_RPL
         LA    R3,KSDS_ACB
         LA    R7,PPD
         LA    R8,PPD_KEY
         MODCB RPL=(R2),                                               +
               ACB=(R3),                                               +
               AREA=(R7),                                              +
               AREALEN=PPD_L,                                          +
               ARG=(R8),                                               +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(KEY,KEQ,DIR,SYN,MVE),                            +
               MF=(E,DXD_MODCB)
         ITRACE ID=MODCB_RC,                                           +
               RDATA1=R15,                                             +
               RDATA2=R0
         LTR   R15,R15
         BNZ   ERR0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    PPD_SEQ,PPD_SEQ                FORCE SEQ TO ZERO
         MVC   PPD_NAME,DSECT_NAME            SET DSECT NAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R4,DSECT_LABEL_PREV            "FIRST" LABEL ON CHAIN
         USING LABEL_DSECT,R4
         SR    R3,R3
         USING EQU_DSECT,R3
MAIN0030 DS    0H
         ITRACE ID=GET
         GET   RPL=DXD_RPL                    READ A RECORD
         ITRACE ID=GET_RC,                                             +
               RDATA1=R15,                                             +
               DATA2=RPLFDBK
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   EXIT0000                       NO
         CLC   LABEL_ID,PPD_DATA+8            LABEL?
         BE    MAIN0040                       YES
         CLC   EQU_ID,PPD_DATA+8              EQUATE?
         BE    MAIN0050                       YES
         B     MAIN0060                       OTHERWISE
MAIN0040 DS    0H
         GETMAIN RU,                                                   +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
NEW      USING LABEL_DSECT,R1
         XC    NEW.LABEL_DSECT(LABEL_DSECT_L),NEW.LABEL_DSECT
KSDS     USING LABEL_DSECT,PPD_DATA
         ST    R1,LABEL_NEXT
         ST    R4,LABEL_PREV
         MVC   NEW.LABEL_EYE,KSDS.LABEL_EYE
         MVC   NEW.LABEL_NAME,KSDS.LABEL_NAME
         MVC   NEW.LABEL_DISP,KSDS.LABEL_DISP
         MVC   NEW.LABEL_TYPE,KSDS.LABEL_TYPE
         LA    R3,LABEL_EQU_PREV
         LR    R4,R1
         ITRACE ID=LABEL,                                              +
               RDATA1=R4,                                              +
               DATA2=LABEL_NAME
         DROP  NEW,KSDS
         B     MAIN0060
MAIN0050 DS    0H
         GETMAIN RU,                                                   +
               LV=EQU_DSECT_L,                                         +
               LOC=ANY
NEW      USING EQU_DSECT,R1
         XC    NEW.EQU_DSECT(EQU_DSECT_L),NEW.EQU_DSECT
KSDS     USING EQU_DSECT,PPD_DATA
         ST    R1,EQU_NEXT
         ST    R3,NEW.EQU_PREV
         MVC   NEW.EQU_EYE,KSDS.EQU_EYE
         MVC   NEW.EQU_LABEL,KSDS.EQU_LABEL
         MVC   NEW.EQU_VALUE,KSDS.EQU_VALUE
         LR    R3,R1
         ITRACE ID=EQU,                                                +
               RDATA1=R3,                                              +
               DATA2=EQU_LABEL
         DROP  NEW,KSDS
MAIN0060 DS    0H
         ICM   R1,15,PPD_SEQ                  CURRENT SEQ NBR
         LA    R1,1(,R1)                      PLUS 1
         STCM  R1,15,PPD_SEQ                  UPDATE SEQ NBR
         B     MAIN0030                       READ NEXT RECORD
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=MOD_ERR,                                            +
               RDATA1=R15
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13
         L     R14,12(,R13)                   RESTORE REGISTERS
         SR    R15,R15                        SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDLREAD)

RPL_I         RPL  AM=VSAM
RPL_L         EQU  *-RPL_I

MODCB1_I MODCB RPL=*,                                                  +
               ACB=*,                                                  +
               AREA=*,                                                 +
               AREALEN=PPD_L,                                          +
               ARG=*,                                                  +
               KEYLEN=L'PPD_KEY,                                       +
               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +
               MF=L
MODCB1_L EQU  *-MODCB1_I

LABEL_ID DC   CL8'LABEL'
EQU_ID   DC   CL8'EQU  '
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDLREAD      DSECT
              DS      18F

DXD_MODCB     DS      0F,(MODCB1_L)X
DXD_RPL       DS      0F,(RPL_L)X

              COPY    PPDDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISLREAD
./ ADD NAME=DISMAIN  0101-09119-09198-0842-00213-00213-00000-SOURCE
* -------------------------------------------------------------------*
*                                                                    *
*        MAINLINE                                                    *
*                                                                    *
* -------------------------------------------------------------------*
DISMAIN  CSECT
DISMAIN  AMODE 31
DISMAIN  RMODE ANY
         USING DISMAIN,R11,R10
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISMAIN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
* -------------------------------------------------------------------*
*                                                                    *
* -------------------------------------------------------------------*
INIT0000 DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R0,DXD_SIZE                    WORK AREA SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         LR    R0,R1
         LR    R2,R1
         LR    R3,R1
         L     R1,DXD_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE WORK AREA
         A     R2,DXD_START                   DISP TO OUR AREA
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         SET SAVE AREA ADDRESS
         USING DXDMAIN,R13
         LOAD  EP=DISCOMM                     LOAD COMMON
         LR    R12,R0                         COPY EP
         USING DISCOMM,R12                    DEFINE BASE
         MVC   DXD_CSECT,MODID
         ST    R3,COMM_DXD_ADDRESS            SAVE WORK AREA ADDRESS
         LA    R0,COMM_VCONS                  INITIALIZE VCONS
         LA    R1,VCONS_L
         LA    R14,VCONS_I
         LR    R15,R1
         MVCL  R0,R14
* ------------------------------------------------------------------- *
*         Initialize trace table                                      *
* ------------------------------------------------------------------- *
         L     R2,COMM_TRACE_SIZE             TRACE TABLE SIZE
         LA    R2,32(R2)                      FOR BOUNDARY ROUNDING
         GETMAIN RU,                          GETMAIN TRACE TABLE      +
               LV=(R2),                                                +
               LOC=ANY
         ST    R1,COMM_TRACE_TABLE            SAVE ADDRESS
         LA    R1,32(R1)                      PLUS 32
         SRL   R1,5                           ROUND THE ADDRESS TO...
         SLL   R1,5                           ...NEAREST MULTIPLE OF 32
         ST    R1,COMM_TRACE_1STX             SET FIRST ENTRY ADDRESS
         ST    R1,COMM_TRACE_CURRENT          SET CURRENT ENTRY ADDRESS
         XC    0(TRENTRYL,R1),0(R1)           INITIALIZE FIRST ENTRY
         A     R1,COMM_TRACE_SIZE             PLUS USED PORTION'S SIZE
         SH    R1,H32                         MINUS 1 ENTRY
         SH    R1,H32                         ANOTHER OR GOOD MEASURE
         ST    R1,COMM_TRACE_LAST             LAST ENTRY ADDRESS
         ITRACE ID=INIT,                      INITIAL TRACE ENTRY      +
               DATA1=R11,                                              +
               DATA2=R12
* ------------------------------------------------------------------- *
*         Load the messages                                           *
* ------------------------------------------------------------------- *
         LOAD  EP=DISMSGS
         ST    R0,COMM_MSGS
* ------------------------------------------------------------------- *
*         Determine mode (BATCH or TSO)                               *
* ------------------------------------------------------------------- *
         USING PSA,R0
         L     R1,PSAAOLD                     ASCB ADDRESS
         USING ASCB,R1                        DEFINE BASE
         L     R2,ASCBOUCB                    OUCB ADDRESS
         USING OUCB,R2
         TM    OUCBYFL,OUCBLOG                TSO USER?
         BO    INIT0010                       YES
         MVI   COMM_RUN_MODE,$COMM_RUN_BATCH  RUNNING IN BATCH MODE
         MVC   DXD_MAIN,V_DISBMAIN            BATCH MAINLINE EP
         ITRACE ID=BATCH
         B     INIT0020
INIT0010 DS    0H
         ITRACE ID=TSO
         LOAD  EP=ISPLINK                     LOAD ISPLINK
         ST    R0,COMM_ISPLINK                SAVE ADDRESS
         MVI   COMM_RUN_MODE,$COMM_RUN_TSO    RUNNING IN TSO MODE
         MVC   DXD_MAIN,V_DISTMAIN            TSO MAINLINE ENTRY POINT
         LOAD  EP=DISSPFD                     LOAD DISSPFD
         ST    R0,COMM_DISSPFD                SAVE ADDRESS
         NI    COMM_DISSPFD,X'7F'             TURN OFF 31-BIT MODE
         LR    R9,R0                          COPY ADDRESS
         USING DISSPFD,R9                     DEFINE BASE
         LOAD  EP=DISSPFV                     LOAD DISSPFV
         ST    R0,COMM_DISSPFV                SAVE ADDRESS
         NI    COMM_DISSPFV,X'7F'             TURN OFF 31-BIT MODE
* ------------------------------------------------------------------- *
*         Determine DD's present                                      *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         L     R15,V_DISTIOT                  DISTIOT ENTRY POINT
         BALR  R14,R15                        SEARCH THE TIOT
* ------------------------------------------------------------------- *
*         OPEN trace if DISTRACE DD present                           *
* ------------------------------------------------------------------- *
         TM    COMM_DDS,$DISTRACE_DD          DISTRACE DD PRESENT?
         BNO   INIT0040                       NO
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BE    INIT0030                       YES
         OPEN  (DISTRACE_DCB,OUTPUT),                                  +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
INIT0030 DS    0H
         OI    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN
* ------------------------------------------------------------------- *
*         Call BATCH or TSO main line                                 *
* ------------------------------------------------------------------- *
INIT0040 DS    0H
         L     R15,DXD_MAIN                   MAINLINE EP
         ITRACE ID=CALLMAIN,                                           +
               RDATA1=R15
         BALR  R14,R15                        CALL MAINLINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         TM    COMM_DDS,$DISTRACE_DD          DISTRACE DD PRESENT?
         BNO   EXIT0020                       NO
         TM    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN
         BNO   EXIT0020                       NOT OPEN
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BE    EXIT0010                       YES
         CLOSE DISTRACE_DCB,                                           +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
EXIT0010 DS    0H
         NI    COMM_TRACE_FLAGS,255-$COMM_TRACE_OPEN
EXIT0020 DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BNE   EXIT0030                       NO
         ITRACE ID=DEL_SPFD
         DELETE EP=DISSPFD
         ITRACE ID=DEL_SPFV
         DELETE EP=DISSPFV
EXIT0030 DS    0H
         ITRACE ID=EXIT0000
         L     R1,COMM_TRACE_TABLE            TRACE TABLE ADDRESS
         L     R0,COMM_TRACE_SIZE             TRACE TABLE SIZE
         FREEMAIN RU,                         FREE TRACE TABLE         +
               A=(1),                                                  +
               LV=(0)
         SR    R3,R3
         IC    R3,COMM_RC
         L     R2,COMM_DXD_ADDRESS            WORK AREA ADDRESS
         DELETE EP=DISMSGS                    DELETE MESSAGES
         DELETE EP=DISCOMM                    DELETE DISCOMM
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         L     R0,DXD_SIZE                    DXD AREA SIZE
         FREEMAIN RU,                         FREEMAIN DXD AREA        +
               A=(2),                                                  +
               LV=(0)
         L     R14,12(,R13)                   RESTORE R14
         LR    R15,R3                         SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_SIZE       CXD
DXD_START      DC    Q(DXDMAIN)
H32            DC    H'32'

VCONS_I        DS    0A
               VCONS CSECT
VCONS_L        EQU   *-VCONS_I

* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
DXDMAIN        DSECT
               DS       18F
DXD_CSECT      DS       CL8

DXD_MAIN       DS       A
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA
               DISSPFD  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IHAPSA   DSECT=YES,LIST=NO
               IHAASCB  DSECT=YES,LIST=NO
               IRAOUCB  DSECT=YES
               COPY     REGEQU
               END      DISMAIN
./ ADD NAME=DISMSG   0120-07064-09198-0843-00241-00225-00240-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Function:                                                          *
*   Build messages.                                                   *
*                                                                     *
*   The message ID and CSECT name are in DISCOMM                      *
*                                                                     *
*                                                                     *
*   Building messages using a message table allows for different      *
*   national languages.                                               *
*                                                                     *
*   I also hope to get an SPF dialog working one of these days        *
*   so the disassembler can be used in an interactive mode.           *
*   The messages are built here.  In batch, they can be printed.      *
*   In the interactive mode, they could be displayed.                 *
*                                                                     *
* ------------------------------------------------------------------- *
DISMSG   CSECT
DISMSG   AMODE 31
DISMSG   RMODE ANY
         USING DISCOMM,R12
         USING DISMSG,R11
         STM   R14,R12,12(R13)                  SAVE REGS
         LR    R11,R15                          SET BASE REG
         B     MSG0000                          SKIP EYECATCHER
MODID    DC    CL8'DISMSG'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MSG0000  DS    0H
         L     R15,COMM_DXD_ADDRESS             WORK AREA ADDRESS
         A     R15,DXD_START                    PLUS DISP TO OUR AREA
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                          SET SAVE AREA ADDRESS
         USING DXDMSG,R13
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_MSG_CSECT,                                   +
               DATA2=COMM_MSG_ID
* ------------------------------------------------------------------- *
*             Build message                                           *
* ------------------------------------------------------------------- *
         L     R10,COMM_MSGS                     MESSAGE TABLE
         USING MSG_CSECT,R10
MSG0020  DS    0H
         ITRACE ID=CSECT,                                              +
               RDATA1=R10,                                             +
               DATA2=MSG_CSECT_NAME
         CLC   COMM_MSG_CSECT,MSG_CSECT_NAME     CSECT LOCATED?
         BE    MSG0030                           YES
         A     R10,MSG_CSECT_LENGTH              NEXT CSECT
         CLI   0(R10),X'FF'                      END OF TABLE?
         BNE   MSG0020                           NO
         DC    H'0'                              CSECT NOT FOUND
MSG0030  DS    0H
         ITRACE ID=FNDCSECT
         LA    R9,MSG_CSECT_MSGS                 1ST MSG FOR CSECT
         USING MSG_MSG,R9
MSG0040  DS    0H
         ITRACE ID=MSG_ID,                                             +
               RDATA1=R9,                                              +
               DATA2=MSG_ID
         CLC   MSG_ID,COMM_MSG_ID                LOCATED MESSAGE?
         BE    MSG0050                           YES
         ICM   R0,15,MSG_LENGTH                  LENGTH OF THIS MSG
         AR    R9,R0                             NEXT MESSAGE
         CLI   0(R9),X'FF'                       END OF MSGS FOR CSECT?
         BNE   MSG0040                           NO
         DC    H'0'                              MSG NOT FOUND
MSG0050  DS    0H
         ITRACE ID=FND_MSG
         LA    R8,MSG_COMPONENTS                 1ST COMPONENT OF MSG
         USING MSG_COMPONENT,R8
         MVC   COMM_MSG_1,COMM_BLANKS
         MVC   COMM_MSG_2,COMM_BLANKS
         MVC   COMM_MSG_3,COMM_BLANKS
         MVC   COMM_MSG_4,COMM_BLANKS
         MVC   COMM_MSG_5,COMM_BLANKS
         XC    DXD_MSG1_DISP,DXD_MSG1_DISP
         XC    DXD_MSG2_DISP,DXD_MSG2_DISP
         XC    DXD_MSG3_DISP,DXD_MSG3_DISP
         XC    DXD_MSG4_DISP,DXD_MSG4_DISP
         XC    DXD_MSG5_DISP,DXD_MSG5_DISP
MSG0060  DS    0H
         ITRACE ID=MSGCMPNT,                                           +
               RDATA1=R8
         SR    R7,R7
         IC    R7,MSG_COMPONENT_LINE             LINE NUMBER
         SLL   R7,1                              MULTIPLY BY 2
         LA    R7,DXD_MSG1_DISP(R7)              ADDR OF DISP
         SR    R6,R6
         IC    R6,MSG_COMPONENT_LINE             LINE NUMBER
         BCTR  R6,0                              RELATIVE TO ZERO
         MH    R6,=Y(L'COMM_MSG_1)               MULTIPLY BY LENGTH
         LA    R6,COMM_MSG_1(R6)                 PLUS MSG BASE ADDR
         AH    R6,0(,R7)                         DISP SO FAR
         SR    R5,R5
         ICM   R5,3,MSG_COMPONENT_DISP
         AR    R5,R12                            PLUS COMM ADDR
         SR    R4,R4
         ICM   R4,3,MSG_COMPONENT_OUTPUT_LENGTH  OUTPUT LENGTH
         BCTR  R4,0                              MINUS 1
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_ADDRESS
         BE    MSG0100
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_CHAR
         BE    MSG0110
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_HALFWORD
         BE    MSG0120
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_FULLWORD
         BE    MSG0130
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_HEX
         BE    MSG0140
         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_TEXT
         BE    MSG0150
         ITRACE ID=BAD_TYPE
         DC    H'0'
MSG0070  DS    0H
         ITRACE ID=NEXT
         SR    R1,R1
         ICM   R1,3,MSG_COMPONENT_OUTPUT_LENGTH  LENGTH OF THIS COMP
         AH    R1,0(,R7)                         PLUS DISP SO FAR
         LA    R1,1(,R1)                         PLUS 1
         STH   R1,0(,R7)                         UPDATE DISP USED
         AH    R8,MSG_COMPONENT_LENGTH           NEXT COMPONENT
         CLI   0(R8),X'FF'                       END OF LIST?
         BNE   MSG0060                           NO
         B     EXIT0000                          ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0100  DS    0H
         ITRACE ID=ADDRESS
         UNPK  DXD_UNPACK(9),0(5,R5)             UNPACK DATA
         TR    DXD_UNPACK(8),COMM_HEXCHAR        TRANSLATE
         LA    R15,DXD_UNPACK+7                  END OF UNPACKED ADDR
         SR    R15,R4                            MINUS LENGTH
         EX    R4,MVC1                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0110  DS    0H
         ITRACE ID=CHAR
         EX    R4,MVC2                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0120  DS    0H
         ITRACE ID=HALFWORD
         LH    R0,0(,R5)                         DATA INTO R0
         CVD   R0,COMM_DWORD                     CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD
         ED    DXD_EDITWORD,COMM_DWORD+3         EDIT
         LA    R15,DXD_EDITWORD+11
         SR    R15,R4
         EX    R4,MVC1                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0130  DS    0H
         ITRACE ID=FULLWORD
         L     R0,0(,R5)                         DATA INTO R0
         CVD   R0,COMM_DWORD                     CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD
         ED    DXD_EDITWORD,COMM_DWORD+3         EDIT
         LA    R15,DXD_EDITWORD+11
         SR    R15,R4
         EX    R4,MVC1                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0140  DS    0H
         ITRACE ID=HEX
         UNPK  DXD_UNPACK(9),0(5,R5)             UNPACK DATA
         TR    DXD_UNPACK(8),COMM_HEXCHAR        TRANSLATE
         LA    R15,DXD_UNPACK                    END OF UNPACKED ADDR
         EX    R4,MVC1                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0150  DS    0H
         ITRACE ID=TEXT
         LA    R5,MSG_COMPONENT_TEXT             TEXT'S ADDRESS
         EX    R4,MVC2                           COPY DATA
         B     MSG0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT                          EXITING PRINT MODULE
         L     R13,4(,R13)                       RESTORE R13
         LM    R14,R12,12(R13)                   RESTORE OTHER REGS
         SR    R15,R15                           SET RETURN CODE
         BR    R14                               RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MVC1     MVC   0(0,R6),0(R15)                    COPY DATA
MVC2     MVC   0(0,R6),0(R5)                     COPY DATA
* ------------------------------------------------------------------- *
*              WORK AREAS                                             *
* ------------------------------------------------------------------- *
DXD_START      DC    Q(DXDMSG)

H4             DC    H'4'

EDITWORD       DC    X'402020206B2020206B202120'
               LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDMSG         DSECT
               DS    18F
DXD_CSECT      DS    CL8
DXD_MSG1_DISP  DS    H
DXD_MSG2_DISP  DS    H
DXD_MSG3_DISP  DS    H
DXD_MSG4_DISP  DS    H
DXD_MSG5_DISP  DS    H
DXD_UNPACK     DS    CL9
DXD_EDITWORD   DS    CL12
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     MSG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY REGEQU
               END  DISMSG
./ ADD NAME=DISMSGUS 0104-09119-09191-1545-00958-00942-00000-SOURCE
DISMSGS  CSECT
DISMSGS  AMODE 31
DISMSGS  RMODE ANY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISALISTA EQU   *
         DC    CL8'DISALIST'                  CSECT
         DC    AL4(DISALISTB-DISALISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISALIST01E '
         MESGCOMP 1,TEXT,,'LMINIT failed, R15='
         MESGCOMP 1,HEX,4,COMM_INFO_01
         MESG  END

         DC    X'FF'
DISALISTB EQU  *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISASSEMA EQU   *
          DC    CL8'DISASSEM'                 CSECT
          DC    AL4(DISASSEMB-DISASSEMA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISASSEM01I'
          MESGCOMP 1,TEXT,,'Assembler return code was'
          MESGCOMP 1,HEX,2,COMM_INFO_01
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'DISASSEM02E'
          MESGCOMP 1,TEXT,,'Error(s) assembling DSECTs, check'
          MESGCOMP 1,TEXT,,'assembler listing in DEBUG'
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'DISASSEM03I'
          MESGCOMP 1,TEXT,,'No assembler input'
          MESG  END

          DC    X'FF'
DISASSEMB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISBINDA  EQU   *
          DC    CL8'DISBIND'                  CSECT
          DC    AL4(DISBINDB-DISBINDA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISBIND01E '
          MESGCOMP 1,TEXT,,'Binder STARTD failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON '
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'DISBIND02E '
          MESGCOMP 1,TEXT,,'Binder CREATEW failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'DISBIND03E '
          MESGCOMP 1,TEXT,,'Binder SET_ALL failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  4
          MESGCOMP 1,TEXT,,'DISBIND04E '
          MESGCOMP 1,TEXT,,'Binder INCLUDE failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  5
          MESGCOMP 1,TEXT,,'DISBIND05E '
          MESGCOMP 1,TEXT,,'Binder INCLUDE failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  6
          MESGCOMP 1,TEXT,,'DISBIND06E '
          MESGCOMP 1,TEXT,,'Binder DELETEW failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          MESG  7
          MESGCOMP 1,TEXT,,'DISBIND07E '
          MESGCOMP 1,TEXT,,'Binder ENDD failed, ERROR='
          MESGCOMP 1,CHAR,8,COMM_INFO_01
          MESGCOMP 1,TEXT,,'REASON'
          MESGCOMP 1,CHAR,8,COMM_INFO_02
          MESG  END

          DC    X'FF'
DISBINDB  EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISBLISTA EQU   *
          DC    CL8'DISBLIST'                 CSECT
          DC    AL4(DISBLISTB-DISBLISTA)

          MESG  1
          MESGCOMP 1,TEXT,,'Begin disp > end disp'
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'Bad hex digit'
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'No begin disp'
          MESG  END

          MESG  4
          MESGCOMP 1,TEXT,,'No begin or end disp'
          MESG  END

          MESG  5
          MESGCOMP 1,TEXT,,'No end disp'
          MESG  END

          MESG  6
          MESGCOMP 1,TEXT,,'No register'
          MESG  END

          MESG  7
          MESGCOMP 1,TEXT,,'Bad register'
          MESG  END

          DC    X'FF'
DISBLISTB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISCONFA EQU   *
         DC    CL8'DISCONF '                  CSECT
         DC    AL4(DISCONFB-DISCONFA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISCONF01I '
         MESGCOMP 1,TEXT,,'Enter a data set name'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISCONF02E '
         MESGCOMP 1,TEXT,,'Data set is not a PDS'
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISCONF03I '
         MESGCOMP 1,TEXT,,'Enter a function'
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISCONF04E '
         MESGCOMP 1,TEXT,,'Enter -R- or -S- for function'
         MESG  END

         MESG  6
         MESGCOMP 1,TEXT,,'DISCONF06E '
         MESGCOMP 1,TEXT,,'Member not found'
         MESG  END

         MESG  7
         MESGCOMP 1,TEXT,,'DISCONF07E '
         MESGCOMP 1,TEXT,,'Stow failed, R15 '
         MESGCOMP 1,HEX,02,COMM_INFO_01
         MESG  END

         DC    X'FF'
DISCONFB EQU  *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISDAIRA  EQU   *
          DC    CL8'DISDAIR '                 CSECT
          DC    AL4(DISDAIRB-DISDAIRA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISDAIR01E '
          MESGCOMP 1,TEXT,,'Allocation error'
          MESGCOMP 2,TEXT,,'           '
          MESGCOMP 2,TEXT,,'DD name'
          MESGCOMP 2,CHAR,8,COMM_INFO_01
          MESGCOMP 3,TEXT,,'           '
          MESGCOMP 3,TEXT,,'DSN    '
          MESGCOMP 3,CHAR,44,COMM_INFO_02
          MESGCOMP 4,TEXT,,'           '
          MESGCOMP 4,TEXT,,'R15'
          MESGCOMP 4,HEX,02,COMM_INFO_03
          MESGCOMP 4,TEXT,,'    Error'
          MESGCOMP 4,HEX,04,COMM_INFO_04+0
          MESGCOMP 4,TEXT,,'    INFO'
          MESGCOMP 4,HEX,04,COMM_INFO_04+2
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'DISDAIR02E '
          MESGCOMP 1,TEXT,,'Deallocation error'
          MESGCOMP 2,TEXT,,'           '
          MESGCOMP 2,TEXT,,'DD name'
          MESGCOMP 2,CHAR,8,COMM_INFO_01
          MESGCOMP 3,TEXT,,'           '
          MESGCOMP 3,TEXT,,'R15'
          MESGCOMP 3,HEX,02,COMM_INFO_03
          MESGCOMP 3,TEXT,,'    Error'
          MESGCOMP 3,HEX,04,COMM_INFO_04+0
          MESGCOMP 3,TEXT,,'    INFO'
          MESGCOMP 3,HEX,04,COMM_INFO_04+2
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'DISDAIR03E '
          MESGCOMP 1,TEXT,,'Error concatenating SYSLIB DD'
          MESGCOMP 2,TEXT,,'           '
          MESGCOMP 2,TEXT,,'R15'
          MESGCOMP 2,HEX,02,COMM_INFO_03
          MESGCOMP 2,TEXT,,'    Error'
          MESGCOMP 2,HEX,04,COMM_INFO_04+0
          MESGCOMP 2,TEXT,,'    INFO'
          MESGCOMP 2,HEX,04,COMM_INFO_04+2
          MESGCOMP 3,TEXT,,'           '
          MESGCOMP 3,TEXT,,'DD1        '
          MESGCOMP 3,CHAR,08,COMM_INFO_01
          MESGCOMP 4,TEXT,,'           '
          MESGCOMP 4,TEXT,,'DD2        '
          MESGCOMP 4,CHAR,08,COMM_INFO_02
          MESG  END

          DC    X'FF'
DISDAIRB  EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISDCONVA EQU   *
          DC    CL8'DISDCONV '                CSECT
          DC    AL4(DISDCONVB-DISDCONVA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISDCONV01E '
          MESGCOMP 1,TEXT,,'Bad digit --> '
          MESGCOMP 1,CHAR,1,COMM_INFO_01
          MESG  END

          DC    X'FF'
DISDCONVB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISDIRA   EQU   *
          DC    CL8'DISDIR  '                 CSECT
          DC    AL4(DISDIRB-DISDIRA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISDIR01E  '
          MESGCOMP 1,TEXT,,'DESERV error.  R15 '
          MESGCOMP 4,HEX,04,COMM_INFO_01
          MESG  END

          DC    X'FF'
DISDIRB   EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISDLISTA EQU   *
          DC    CL8'DISDLIST'                 CSECT
          DC    AL4(DISDLISTB-DISDLISTA)

          MESG  1
          MESGCOMP 1,TEXT,,'Begin disp > end disp'
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'Bad hex digit'
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'Begin disp required'
          MESG  END

          MESG  4
          MESGCOMP 1,TEXT,,'CSECT length used for end'
          MESG  END

          MESG  5
          MESGCOMP 1,TEXT,,'End limited to CSECT length'
          MESG  END

          MESG  6
          MESGCOMP 1,TEXT,,'Begin disp > CSECT length'
          MESG  END

          DC    X'FF'
DISDLISTB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISDSECTA EQU   *
          DC    CL8'DISDSECT'                 CSECT
          DC    AL4(DISDSECTB-DISDSECTA)

          MESG  1
          MESGCOMP 1,TEXT,,'DISDSECT01I'
          MESGCOMP 1,TEXT,,'DSECT '
          MESGCOMP 1,CHAR,63,COMM_INFO_01
          MESGCOMP 2,TEXT,,'            '
          MESGCOMP 2,TEXT,,'Is being read from'
          MESGCOMP 3,TEXT,,'            '
          MESGCOMP 3,TEXT,,'DD '
          MESGCOMP 3,CHAR,8,COMM_INFO_02
          MESGCOMP 4,TEXT,,'            '
          MESGCOMP 4,TEXT,,'DSN'
          MESGCOMP 4,CHAR,44,COMM_INFO_03
          MESG  END

          MESG  2
          MESGCOMP 1,TEXT,,'DISDSECT02E'
          MESGCOMP 1,TEXT,,'Label'
          MESGCOMP 1,CHAR,63,COMM_INFO_01
          MESGCOMP 2,TEXT,,'            '
          MESGCOMP 2,TEXT,,'not in DSECT'
          MESGCOMP 2,CHAR,63,COMM_INFO_02
          MESGCOMP 3,TEXT,,'            '
          MESGCOMP 3,TEXT,,'as specified on a USING statement'
          MESG  END

          MESG  3
          MESGCOMP 1,TEXT,,'DISDSECT03E'
          MESGCOMP 1,TEXT,,'DSECT '
          MESGCOMP 1,CHAR,63,COMM_INFO_01
          MESGCOMP 2,TEXT,,'            '
          MESGCOMP 2,TEXT,,'is not in ASM START/ASM END or DISDSECT'
          MESGCOMP 2,TEXT,,'library(s)'
          MESG  END

          DC    X'FF'
DISDSECTB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISBMAINA EQU  *
         DC    CL8'DISBMAIN'                  CSECT
         DC    AL4(DISBMAINB-DISBMAINA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISBMAIN01I '
         MESGCOMP 1,TEXT,,'DISPUNCH DD not present, no source will be'
         MESGCOMP 1,TEXT,,'generated'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISBMAIN02I '
         MESGCOMP 1,TEXT,,'ABEND requested, abnormally terminating'     g'
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISBMAIN03I '
         MESGCOMP 1,TEXT,,'Disassembly complete'
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISBMAIN04E '
         MESGCOMP 1,TEXT,,'DISIN DD statement missing'
         MESG  END

         MESG  5
         MESGCOMP 1,TEXT,,'DISBMAIN05E '
         MESGCOMP 1,TEXT,,'DISMOD DD statement missing'
         MESG  END

         MESG  6
         MESGCOMP 1,TEXT,,'DISBMAIN06E '
         MESGCOMP 1,TEXT,,'Error(s) in control parameters'
         MESG  END

         MESG  7
         MESGCOMP 1,TEXT,,'DISBMAIN07E '
         MESGCOMP 1,TEXT,,'Error(s) from BINDER, aborting'
         MESG  END

         MESG  9
         MESGCOMP 1,TEXT,,'DISBMAIN09E '
         MESGCOMP 1,TEXT,,'Error(s) assembling DSECTs'
         MESG  END

         MESG  12
         MESGCOMP 1,TEXT,,'DISBMAIN12E '
         MESGCOMP 1,TEXT,,'Serious error(s) detected, aborting'
         MESG  END

         MESG  13
         MESGCOMP 1,TEXT,,'DISBMAIN13E '
         MESGCOMP 1,TEXT,,'Error opening pre-processed DSECT data set'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'R15='
         MESGCOMP 2,HEX,2,COMM_INFO_01
         MESGCOMP 2,TEXT,,'DDNAME='
         MESGCOMP 2,CHAR,8,COMM_INFO_02
         MESGCOMP 2,TEXT,,'DSN='
         MESGCOMP 2,CHAR,8,COMM_INFO_03
         MESG  END

         DC    X'FF'
DISBMAINB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISKLISTA EQU  *
         DC    CL8'DISKLIST'                  CSECT
         DC    AL4(DISKLISTB-DISKLISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISKLIST01E '
         MESGCOMP 1,TEXT,,'INIT CLOSE failed'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'DD NAME '
         MESGCOMP 2,CHAR,8,COMM_INFO_01
         MESGCOMP 3,TEXT,,'            '
         MESGCOMP 3,TEXT,,'DSN     '
         MESGCOMP 3,CHAR,44,COMM_INFO_02
         MESGCOMP 4,TEXT,,'            '
         MESGCOMP 4,TEXT,,'R15     '
         MESGCOMP 4,HEX,4,COMM_INFO_03
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISKLIST02E '
         MESGCOMP 1,TEXT,,'Error CLOSING ACB in new list'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'DD NAME '
         MESGCOMP 2,CHAR,8,COMM_INFO_01
         MESGCOMP 3,TEXT,,'            '
         MESGCOMP 3,TEXT,,'DSN     '
         MESGCOMP 3,CHAR,44,COMM_INFO_02
         MESGCOMP 4,TEXT,,'            '
         MESGCOMP 4,TEXT,,'R15     '
         MESGCOMP 4,HEX,4,COMM_INFO_03
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISKLIST03E '
         MESGCOMP 1,TEXT,,'Error OPENING new ACB'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'DD NAME '
         MESGCOMP 2,CHAR,8,COMM_INFO_01
         MESGCOMP 3,TEXT,,'            '
         MESGCOMP 3,TEXT,,'DSN     '
         MESGCOMP 3,CHAR,44,COMM_INFO_02
         MESGCOMP 4,TEXT,,'            '
         MESGCOMP 4,TEXT,,'R15     '
         MESGCOMP 4,HEX,4,COMM_INFO_03
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISKLIST04E '
         MESGCOMP 1,TEXT,,'Error OPENING old ACB'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'DD NAME '
         MESGCOMP 2,CHAR,8,COMM_INFO_01
         MESGCOMP 3,TEXT,,'            '
         MESGCOMP 3,TEXT,,'DSN     '
         MESGCOMP 3,CHAR,44,COMM_INFO_02
         MESGCOMP 4,TEXT,,'            '
         MESGCOMP 4,TEXT,,'R15     '
         MESGCOMP 4,HEX,4,COMM_INFO_03
         MESG  END

         MESG  5
         MESGCOMP 1,TEXT,,'DISKLIST05W '
         MESGCOMP 1,TEXT,,'Exit requested while error(s) exited'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'Pending changes cancelled'
         MESG  END

         DC    X'FF'
DISKLISTB EQU  *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISNAMEA EQU   *
         DC    CL8'DISNAME'                   CSECT
         DC    AL4(DISNAMEB-DISNAMEA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISNAME01E  '
         MESGCOMP 1,TEXT,,'Requested CSECT not found'
         MESG  END

         DC    X'FF'
DISNAMEB EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISOPTSA  EQU  *
         DC    CL8'DISOPTS'                   CSECT
         DC    AL4(DISOPTSB-DISOPTSA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISOPTS01E  '
         MESGCOMP 1,TEXT,,'Invalid label prefix'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISOPTS02E  '
         MESGCOMP 1,TEXT,,'Invalid OPCODE selection'
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISOPTS03W  '
         MESGCOMP 1,TEXT,,'Output DSN blank'
         MESGCOMP 2,TEXT,,'Generated source will be discarded'
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISOPTS04E  '
         MESGCOMP 1,TEXT,,'Exit with ERROR(s) pending'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'All changes discarded'
         MESG  END

         DC    X'FF'
DISOPTSB  EQU  *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISNLISTA EQU  *
         DC    CL8'DISNLIST'                  CSECT
         DC    AL4(DISNLISTB-DISNLISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISNLIST01I '
         MESGCOMP 1,TEXT,,'No section names'
         MESG  END

         DC    X'FF'
DISNLISTB EQU  *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISPARMA EQU   *
         DC    CL8'DISPARM'                   CSECT
         DC    AL4(DISPARMB-DISPARMA)

         MESG  01
         MESGCOMP 1,TEXT,,'DISPARM01E  '
         MESGCOMP 1,TEXT,,'Unrecognized keyword.'
         MESG  END

         MESG  02
         MESGCOMP 1,TEXT,,'DISPARM02E  '
         MESGCOMP 1,TEXT,,'Improper continuation.'
         MESG  END

         MESG  03
         MESGCOMP 1,TEXT,,'DISPARM03E  '
         MESGCOMP 1,TEXT,,'Too many parms.'
         MESG  END

         MESG  04
         MESGCOMP 1,TEXT,,'DISPARM04E  '
         MESGCOMP 1,TEXT,,'Parameter too long (63 characters max).'
         MESG  END

         MESG  05
         MESGCOMP 1,TEXT,,'DISPARM05E  '
         MESGCOMP 1,TEXT,,'SYSIN DD required for ASM START/ASM END.'
         MESG  END

         MESG  06
         MESGCOMP 1,TEXT,,'DISPARM06E  '
         MESGCOMP 1,TEXT,,'Starting displacement larger than ending'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'displacment on BASE statement.'
         MESG  END

         MESG  07
         MESGCOMP 1,TEXT,,'DISPARM07E  '
         MESGCOMP 1,TEXT,,'CSECT name cannot be blank.'
         MESG  END

         MESG  08
         MESGCOMP 1,TEXT,,'DISPARM08E  '
         MESGCOMP 1,TEXT,,'DATA area overlaps previously defined area.'
         MESG  END

         MESG  09
         MESGCOMP 1,TEXT,,'DISPARM09E  '
         MESGCOMP 1,TEXT,,'Duplicate label prefix.'
         MESG  END

         MESG  10
         MESGCOMP 1,TEXT,,'DISPARM10E  '
         MESGCOMP 1,TEXT,,'Label prefix cannot be blank.'
         MESG  END

         MESG  11
         MESGCOMP 1,TEXT,,'DISPARM11E  '
         MESGCOMP 1,TEXT,,'DATA is reserved.'                           '
         MESGCOMP 1,TEXT,,'Choose a different prefix'                   '
         MESG  END

         MESG  12
         MESGCOMP 1,TEXT,,'DISPARM12E  '
         MESGCOMP 1,TEXT,,'Label prefix must be 4 characters or less.'
         MESG  END

         MESG  13
         MESGCOMP 1,TEXT,,'DISPARM13E  '
         MESGCOMP 1,TEXT,,'End disp must be given if start is given.'
         MESG  END

         MESG  14
         MESGCOMP 1,TEXT,,'DISPARM14E  '
         MESGCOMP 1,TEXT,,'Begin disp larger than ending disp.'
         MESG  END

         MESG  15
         MESGCOMP 1,TEXT,,'DISPARM15E  '
         MESGCOMP 1,TEXT,,'Start disp must be given if end is given.'
         MESG  END

         MESG  16
         MESGCOMP 1,TEXT,,'DISPARM16E  '
         MESGCOMP 1,TEXT,,'Unrecognized register name.'
         MESG  END

         MESG  17
         MESGCOMP 1,TEXT,,'DISPARM17E  '
         MESGCOMP 1,TEXT,,'Register name is blank.'
         MESG  END

         MESG  18
         MESGCOMP 1,TEXT,,'DISPARM18E  '
         MESGCOMP 1,TEXT,,'Register name too long.'
         MESG  END

         MESG  19
         MESGCOMP 1,TEXT,,'DISPARM19E  '
         MESGCOMP 1,TEXT,,'Bad hex digit.'
         MESG  END

         MESG  20
         MESGCOMP 1,TEXT,,'DISPARM20E  '
         MESGCOMP 1,TEXT,,'Too many hex digits (8  max).'
         MESG  END

         MESG  21
         MESGCOMP 1,TEXT,,'DISPARM21E  '
         MESGCOMP 1,TEXT,,'Label prefix required if BASE given.'
         MESG  END

         MESG  22
         MESGCOMP 1,TEXT,,'DISPARM21W  '
         MESGCOMP 1,TEXT,,'No BASE defined.  Label prefix ignored.'
         MESG  END

          DC    X'FF'
DISPARMB  EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISRLD2A EQU   *
         DC    CL8'DISRLD2'                   CSECT
         DC    AL4(DISRLD2B-DISRLD2A)

         MESG  1
         MESGCOMP 1,TEXT,,'DISRLD201I  '
         MESGCOMP 1,TEXT,,'User defined data area at'
         MESGCOMP 1,ADDR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,'is an RLD'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISRLD202I  '
         MESGCOMP 1,TEXT,,'RLD item at'
         MESGCOMP 1,ADDR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'overlaps first part of user area at'
         MESGCOMP 1,ADDR,8,COMM_INFO_03
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_04
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISRLD203I  '
         MESGCOMP 1,TEXT,,'RLD item at'
         MESGCOMP 1,ADDR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'is ''in the middle'' of a user area at'
         MESGCOMP 1,ADDR,8,COMM_INFO_03
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_04
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISRLD204I  '
         MESGCOMP 1,TEXT,,'RLD item at'
         MESGCOMP 1,ADDR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'overlaps end of user area at'
         MESGCOMP 1,ADDR,8,COMM_INFO_03
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_04
         MESG  END

         MESG  5
         MESGCOMP 1,TEXT,,'DISRLD205I  '
         MESGCOMP 1,TEXT,,'RLD item at'
         MESGCOMP 1,ADDR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'spans user area at'
         MESGCOMP 1,ADDR,8,COMM_INFO_03
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_04
         MESG  END

         DC    X'FF'
DISRLD2B EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISSLISTA EQU  *
         DC    CL8'DISSLIST'                  CSECT
         DC    AL4(DISSLISTB-DISSLISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISSLIST01I '
         MESGCOMP 1,TEXT,,'Exit requested while error(s) existed'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'Pending changes to SYSLIBs cancelled'
         MESG  END

         DC    X'FF'
DISSLISTB EQU  *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISTLISTA EQU   *
         DC    CL8'DISTLIST'                  CSECT
         DC    AL4(DISTLISTB-DISTLISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISTLIST01E '
         MESGCOMP 1,TEXT,,'LMINIT failed, R15='
         MESGCOMP 1,HEX,4,COMM_INFO_01
         MESG  END

         DC    X'FF'
DISTLISTB EQU  *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISTMAINA EQU   *
         DC    CL8'DISTMAIN'                  CSECT
         DC    AL4(DISTMAINB-DISTMAINA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISTMAIN01E '
         MESGCOMP 1,TEXT,,'Library name is required'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISTMAIN02E '
         MESGCOMP 1,TEXT,,'Data set is not a PDS'
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISTMAIN03E '
         MESGCOMP 1,TEXT,,'Invalid function'
         MESG  END

         MESG  4
         MESGCOMP 1,TEXT,,'DISTMAIN04I '
         MESGCOMP 1,TEXT,,'Enter a function'
         MESG  END

         MESG  5
         MESGCOMP 1,TEXT,,'DISTMAIN05E '
         MESGCOMP 1,TEXT,,'No DSECT KSDSes have been defined'
         MESGCOMP 2,TEXT,,'            '
         MESGCOMP 2,TEXT,,'No DSECTs have been defined via assembler'
         MESGCOMP 2,TEXT,,'source'
         MESG  END

         DC    X'FF'
DISTMAINB EQU  *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISULISTA EQU   *
         DC    CL8'DISULIST'                  CSECT
         DC    AL4(DISULISTB-DISULISTA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISULIST01E '
         MESGCOMP 1,TEXT,,'A register is required'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISULIST02E '
         MESGCOMP 1,TEXT,,'Invalid register value'
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISULIST03E '
         MESGCOMP 1,TEXT,,'End disp is less than begin disp'
         MESG  END

         DC    X'FF'
DISULISTB EQU  *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISVARA  EQU   *
         DC    CL8'DISVAR'                    CSECT
         DC    AL4(DISVARB-DISVARA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISVAR01E   '
         MESGCOMP 1,TEXT,,'VDEFINE failed for'
         MESGCOMP 1,CHAR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,', R15='
         MESGCOMP 1,HEX,4,COMM_INFO_02
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISVAR02E   '
         MESGCOMP 1,TEXT,,'VDELETE failed for'
         MESGCOMP 1,CHAR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,', R15='
         MESGCOMP 1,HEX,4,COMM_INFO_02
         MESG  END

         DC    X'FF'
DISVARB  EQU   *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISVBUA  EQU   *
         DC    CL8'DISVBU'                    CSECT
         DC    AL4(DISVBUB-DISVBUA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISVBU01I   '
         MESGCOMP 1,TEXT,,'BASE'
         MESGCOMP 1,CHAR,3,COMM_INFO_01
         MESGCOMP 1,TEXT,,'end disp changed from'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'to'
         MESGCOMP 1,ADDR,8,COMM_INFO_03
         MESGCOMP 2,TEXT,,'           '
         MESGCOMP 2,TEXT,,'(limit to CSECT length)'
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISVBU02I   '
         MESGCOMP 1,TEXT,,'BASE'
         MESGCOMP 1,CHAR,3,COMM_INFO_01
         MESGCOMP 1,TEXT,,'starting disp'
         MESGCOMP 1,ADDR,8,COMM_INFO_02
         MESGCOMP 1,TEXT,,'is beyond end of CSECT'
         MESG  END

         DC    X'FF'
DISVBUB  EQU   *

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISVDATAA EQU   *
         DC    CL8'DISVDATA'                  CSECT
         DC    AL4(DISVDATAB-DISVDATAA)

         MESG  1
         MESGCOMP 1,TEXT,,'DISVDATA0EI '
         MESGCOMP 1,TEXT,,'PQUERY failed.  Panel'
         MESGCOMP 1,CHAR,8,COMM_INFO_01
         MESGCOMP 1,TEXT,,', R15'
         MESGCOMP 1,HEX,2,COMM_INFO_02
         MESG  END

         MESG  2
         MESGCOMP 1,TEXT,,'DISVDATA02E '
         MESGCOMP 1,TEXT,,'VDATA VDELETE failed.  R15'
         MESGCOMP 1,HEX,2,COMM_INFO_02
         MESG  END

         MESG  3
         MESGCOMP 1,TEXT,,'DISVDATA03E '
         MESGCOMP 1,TEXT,,'VDATA VDEFINE failed.  R15'
         MESGCOMP 1,HEX,2,COMM_INFO_02
         MESG  END

         DC    X'FF'
DISVDATAB  EQU   *


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DC    X'FFFFFFFF'                 END OF TABLE

         DISCOMM TYPE=DSECT
         COPY    DISASMDA
         COPY    MSG

         IFGACB  AM=VSAM
ACB_L    EQU     *-IFGACB

         COPY    REGEQU
         END     DISMSGS
./ ADD NAME=DISNAME  0101-09119-09198-0843-00176-00176-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISNAME                                              *
*                                                                    *
*  Function:                                                         *
*   Obtain the section names in the LMOD                             *
*                                                                    *
*   DISBIND has already established a dialog                         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISNAME  CSECT
DISNAME  AMODE 31
DISNAME  RMODE ANY
         USING DISNAME,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                  SAVE REGS
         LR    R11,R15                          SET BASE REG
         B     MOD0000                          SKIP EYECATCHER
MODID    DC    CL8'DISNAME'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS             WORK AREA
         A     R15,DXD_START                    PLUS DISP
         ST    R13,4(,R15)                      CHAIN SAVE AREA
         ST    R15,8(,R13)                      CHAIN SAVE AREA
         LR    R13,R15                          SET SAVE AREA ADDRESS
         USING DXDNAME,R13
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*        Obtain and initialize NAME buffer                            *
* ------------------------------------------------------------------- *
         ITRACE ID=GETBUF
         IEWBUFF FUNC=GETBUF,                                          +
               TYPE=NAME
         ST    R8,DXD_BUFFER
         ITRACE ID=INIT_BUF,                                           +
               RDATA1=R8,                                              +
               RDATA2=R7
         IEWBUFF FUNC=INITBUF,                                         +
               TYPE=NAME
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
NAME0000 DS    0H
         ITRACE ID=GET_NAME
         XC    DXD_CURSOR,DXD_CURSOR
         L     R8,DXD_BUFFER
         LA    R7,BNLH_END
         IEWBIND FUNC=GETN,                                            +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               AREA=IEWBBNL,                                           +
               CURSOR=DXD_CURSOR,                                      +
               COUNT=DXD_NAME_RETURNED,                                +
               TCOUNT=DXD_TOTAL_NAMES,                                 +
               NTYPE=S,                                                +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=NAME_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         CLC   DXD_RETURN_CODE,F4
         BH    ERR0010
         BL    NAME0010
         CLC   DXD_REASON_CODE,X_83000800
         BE    NAME0010
         CLC   DXD_REASON_CODE,X_83000801
         BE    ERR0020
NAME0010 DS    0H
         ICM   R9,15,DXD_NAME_RETURNED
         USING BNL_ENTRY,R7
NAME0020 DS    0H
         ITRACE ID=NAME_1,                                             +
               RDATA1=R7,                                              +
               RDATA2=R9
         L     R2,BNL_NAME_PTR                 ADDRESS OF NAME
         CLI   0(R2),C' '                      PRINTABLE NAME?
         BL    NAME0040                        NO
         L     R1,COMM_NAME_NBR                NBR OF 'NAMES'
         LA    R1,1(,R1)                       PLUS 1
         ST    R1,COMM_NAME_NBR                SAVE TOTAL
         GETMAIN RU,                                                   +
               LV=NAME_DSECT_L,                                        +
               LOC=ANY
         USING NAME_DSECT,R1
         MVC   NAME_EYE,NAME_ID                SET EYECATCHER
         MVC   NAME_NEXT,COMM_NAME_NEXT        CHAIN EXISTING TO NEW
         ST    R1,COMM_NAME_NEXT               ADD NEW NAME TO CHAIN
         MVC   NAME_NAME,COMM_BLANKS           INITIALIZE NAME
         LH    R3,BNL_NAME_CHARS               LENGTH OF NAME
         CH    R3,H8                           MORE THAN 8?
         BNH   NAME0030                        NO
         LH    R3,H8                           LIMIT TO 8
NAME0030 DS    0H
         BCTR  R3,0                            FOR EX
         EX    R3,NAME_MVC                     COPY NAME
         MVC   NAME_OFFSET,BNL_SEGM_OFF        COPY OFFSET
NAME0040 DS    0H
         ITRACE ID=NAME_2,                                             +
               RDATA1=R1,                                              +
               DATA2=NAME_NAME
         LA    R7,BNL_END
         BCT   R9,NAME0020
         CLC   DXD_REASON_CODE,X_83000800
         BNE   NAME0000
         B     EXIT0000
NAME_MVC MVC   NAME_NAME(0),0(R2)
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         DC    H'2'
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                     RESTORE REGISTER 13      ASE01670
         LM    R14,R12,12(R13)                 RESTORE OTHER REGISTERS  ASE01680
         SR    R15,R15                         SET RETURN CODE          ASE01690
         BR    R14                             RETURN TO CALLER         ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDNAME)
F4            DC   F'4'
H8            dc   H'8'
B_NAME        DC   XL2'5',C'B_NAME'
X_83000800    DC   X'83000800'
X_83000801    DC   X'83000801'
NAME_ID       DC   CL8'NAME'

         IEWBUFF FUNC=MAPBUF,                                          +
               TYPE=NAME,                                              +
               HEADREG=R8,                                             +
               ENTRYREG=R7,                                            +
               SIZE=50,                                                +
               VERSION=5

              IEWBIND MF=(L,IEWBIND_I)
IEWBIND_L     EQU  *-IEWBIND_I
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDNAME           DSECT
                  DS       18F
DXD_CSECT         DS       CL8

DXD_RETURN_CODE   DS   F
DXD_REASON_CODE   DS   F

DXD_BUFFER        DS   A

DXD_CURSOR        DS   F
DXD_NAME_RETURNED DS   F
DXD_TOTAL_NAMES   DS   F

DXD_IEWBIND       DS   0F,(IEWBIND_L)X
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY    DISASMDA

                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY    REGEQU
                  END     DISNAME
./ ADD NAME=DISNLIST 0101-09119-09198-0843-00271-00271-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISNLIST                                             *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   In batch print the section names                                 *
*                                                                    *
*   TSO display section names as a scrollable selection list         *
*                                                                    *
*--------------------------------------------------------------------*
DISNLIST CSECT
DISNLIST AMODE 31
DISNLIST RMODE ANY
         USING DISNLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISNLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDNLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD                   DISSPFD ADDR
         USING DISSPFD,R9                        DEFINE BASE
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       RUNNING IN TSO MODE?
         BE    MAIN0100                          YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0000 DS    0H
         MVC   COMM_SUBHEAD,COMM_BLANKS
         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1
         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD
         L     R15,V_DISPRINT
         BALR  R14,R15
         L     R6,COMM_NAME_NEXT                 1ST NAME
         USING NAME_DSECT,R6
MAIN0010 DS    0H
         MVC   PRINT_DATA,COMM_BLANKS
P        USING MSG_01,PRINT_DATA
         MVC   P.MSG_01_NAME,NAME_NAME
         MVC   COMM_INFO_01(4),NAME_OFFSET       COPY OFFSET
         UNPK  COMM_INFO_02(9),COMM_INFO_01(5)   UPACK OFFSET
         MVC   P.MSG_01_OFFSET,COMM_INFO_02
         TR    P.MSG_01_OFFSET,COMM_HEXCHAR      TRANSLATE
         MVI   PRINT_COMMAND,$PRINT_PRINT
         L     R15,V_DISPRINT
         BALR  R14,R15                           PRINT DETAIL
         ICM   R6,15,NAME_NEXT                   NEXT NAME
         BNZ   MAIN0010                          LOOP
         SR    R2,R2
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0100 DS    0H
         ITRACE ID=TSO
         ICM   R6,15,COMM_NAME_NEXT              FIRST SECTION NAME
         BZ    ERR0010
MAIN0110 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS
         L     R1,COMM_VDATA_SIZE                VDATA SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R8,COMM_VDATA_ADDR
         USING DETAIL,R8
         L     R7,SPF_VDEPTH                     SCREEN DEPTH
         ST    R6,DXD_FIRST_DISPLAYED            SAVE FIRST DISPLAYED
         XC    DXD_LINES_BUILT,DXD_LINES_BUILT
MAIN0120 DS    0H
         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED
         MVI   DETAIL_ATTR_1,$ATTR_INPUT         SET ATTRIBUTE
         MVI   DETAIL_SELECT,C' '                INITIALIZE SELECT
         MVI   DETAIL_ATTR_2,$ATTR_HIGH_TURQUOISE
         MVC   DETAIL_NAME,NAME_NAME             COPY NAME
         MVC   COMM_DWORD(4),NAME_OFFSET         COPY TO WORK AREA
         UNPK  DETAIL_OFFSET(9),COMM_DWORD(5)    .. PREVENTS S0C4'S
         TR    DETAIL_OFFSET,COMM_HEXCHAR
         MVI   DETAIL_OFFSET+8,C' '
         LA    R1,1                              CONSTANT 1
         AH    R1,DXD_LINES_BUILT                PLUS TOTAL SO FAR
         STH   R1,DXD_LINES_BUILT                UPDATE TOTAL
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0130
         B     MAIN0200
MAIN0130 DS    0H
         ICM   R6,15,NAME_NEXT                   NEXT SECTION
         BNZ   MAIN0120                          LOOP
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0200 DS    0H
         ITRACE ID=DISP
         MVC   COMM_SPF_PANEL,DISNDATA           SET PANEL NAME
         L     R15,v_DISDISP                     DISDISP ENTRY POINT
         BALR  R14,R15                           DISPLAY PANEL
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R2,R15                            RC = ZERO?
         BNZ   EXIT0000                          NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         L     R8,COMM_VDATA_ADDR                VDATA ADDR
         LH    R7,DXD_LINES_BUILT
MAIN0210 DS    0H
         CLI   DETAIL_SELECT,C' '                SELECTED?
         BNE   MAIN0300                          YES
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0210                       CHECK NEXT LINE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0220                          YES
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0240                          YES
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0100                          YES
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0250                          YES
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0220 DS    0H
         ITRACE ID=BOTTOM
         ICM   R6,15,COMM_NAME_NEXT
         BZ    EXIT0000
MAIN0230 DS    0H
         ICM   R1,15,NAME_NEXT                   NEXT NAME
         BZ    MAIN0110                          END OF LIST
         LR    R6,R1                             COPY NEXT
         B     MAIN0230                          LOOP
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0240 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0220                          YES
         L     R6,DXD_LAST_DISPLAYED             LAST ON DISPLAY
         B     MAIN0110                          BUILD DISPLAY
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0250 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0100                          YES
         L     R6,DXD_FIRST_DISPLAYED            FIRST ON DISPLAY
         L     R7,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL
MAIN0260 DS    0H
         ICM   R1,15,NAME_PREV                   PREVIOUS ON CHAIN
         BZ    MAIN0110
         LR    R6,R1
         BCT   R7,MAIN0260
         B     MAIN0110
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0300 DS    0H
         ITRACE ID=SELECTED,                                           +
               DATA1=DETAIL_NAME
         MVC   COMM_CSECT,DETAIL_NAME
         MVC   SPF_CSECT,DETAIL_NAME
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1                     SET MESSAGE ID
ERR0100  DS    0H
         ITRACE ID=ERROR,                                              +
               DATA1=COMM_MSG_ID
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO
         BE    ERR0110
         LA    R1,COMM_MSG_1
         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1
         MVI   PRINT_COMMAND,$PRINT_PRINT
         L     R15,V_DISPRINT
         BALR  R14,R15
         B     EXIT0000
ERR0110  DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDNLIST)

MSG_01        DS   0C
              DC   CL1' '
MSG_01_NAME   DC   CL8' '
              DC   CL6' '
MSG_01_OFFSET DC   CL8' '
MSG_01_L      EQU  *-MSG_01

HEADING_1     DC   C'0Section names'
HEADING_1_L   EQU  *-HEADING_1

DISNDATA      DC   CL8'DISNDATA'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDNLIST             DSECT
                     DS   18F
DXD_CSECT            DS   CL8

DXD_FIRST_DISPLAYED  DS  A
DXD_LAST_DISPLAYED   DS  A

DXD_LINES_BUILT      DS  H
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DETAIL        DSECT
              DS  CL10
DETAIL_ATTR_1 DS  X
DETAIL_SELECT DS  X
DETAIL_ATTR_2 DS  X
DETAIL_NAME   DS  CL8
DETAIL_ATTR_3 DS  X
DETAIL_OFFSET DS  CL8
              DS  X
DETAIL_L      EQU *-DETAIL
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    ATTRS
              COPY    REGEQU
              END     DISNLIST
./ ADD NAME=DISOPTS  0110-09016-09118-1122-00184-00202-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISOPTS                                              *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   Allow the user to choose                                         *
*     .  the opcode table                                            *
*     .  prefix for generated labels                                 *
*                                                                    *
*--------------------------------------------------------------------*
DISOPTS  CSECT
DISOPTS  AMODE 31
DISOPTS  RMODE ANY
         USING DISOPTS,R11
         USING DISCOMM,R12
         USING ESD_DSECT,R6
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISOPTS'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         USING DXDOPTS,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         MVC   SPF_PREFIX,COMM_PREFIX
         MVC   SPF_FUNCTION,COMM_OPCODE_TABLE_NAME+5
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BZ    MAIN0010
         DELETE EPLOC=COMM_OPCODE_TABLE_NAME
         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
MAIN0010 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME2        SET PANEL NAME
         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH ALLOCATED?
         BO    MAIN0015                          YES
         MVC   COMM_SPF_PANEL,PANEL_NAME1        SET PANEL NAME
MAIN0015 DS    0H
         L     R15,V_DISDISP
         BALR  R14,R15                           DISPLAY ESD INFO
         LR    R2,R15                            SAVE DISP RC
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R2
         NI    DXD_FLAGS,255-$ERROR              RESET ERROR FLAG
*---------------------------------------------------------------------*
*        VERIFY PREFIX                                                *
*---------------------------------------------------------------------*
         OC    SPF_PREFIX,COMM_BLANKS            TRANSLATE
         CLI   SPF_PREFIX,C'@'                   AT-SIGN?
         BE    MAIN0020                          YES
         CLI   SPF_PREFIX,C'#'                   POUND SIGN?
         BE    MAIN0020                          YES
         CLI   SPF_PREFIX,C'$'                   DOLLAR SIGN?
         BE    MAIN0020                          YES
         CLI   SPF_PREFIX,C'_'                   UNDERSCORE?
         BE    MAIN0020                          YES
         CLI   SPF_PREFIX,C'A'                   ALPHA?
         BL    ERR0010                           NO
         CLI   SPF_PREFIX,C'Z'                   ALPHA?
         BH    ERR0010                           NO
*---------------------------------------------------------------------*
*        VERIFY OPCODE TABLE                                          *
*---------------------------------------------------------------------*
MAIN0020 DS    0H
         CLI   SPF_FUNCTION,C'1'                 '1' OR MORE?
         BL    ERR0020                           NO
         CLI   SPF_FUNCTION,C'5'                 '5' OR LESS?
         BH    ERR0020                           NO
         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH ALLOCATED?
         BO    MAIN0025                          YES
         CLC   SPF_OUTPUT_DSN,COMM_BLANKS        OUTPUT DSN BLANK?
         BNE   MAIN0025                          NO
         MVI   COMM_MSG_ID,3
         MVC   COMM_MSG_CSECT,MODID              SET CSECT NAME
         L     R15,V_DISMSG
         BALR  R14,R15                           BUILD MESSAGE(S)
         MVC   SPF_MSG_1,COMM_MSG_1              COPY MESSAGE(S)
         MVC   SPF_MSG_2,COMM_MSG_2
MAIN0025 DS    0H
         LTR   R2,R2                             DISP RC = 0?
         BZ    MAIN0010                          YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0030 DS    0H
         TM    DXD_FLAGS,$ERROR                  ERRORS PENDING?
         BO    ERR0040                           YES
         MVC   COMM_PREFIX,SPF_PREFIX            SET PREFIX
         LA    R1,4                              MAX LENGTH
         LA    R2,COMM_PREFIX+3                  END OF PREFIX
MAIN0040 DS    0H
         CLI   0(R2),C' '                        END OF PREFIX?
         BNE   MAIN0050                          YES
         BCTR  R2,0
         BCT   R1,MAIN0040
MAIN0050 DS    0H
         STH   R1,COMM_PREFIX_LENGTH             SET PREFIX LENGTH
         ITRACE ID=PREFIX,                                             +
               DATA1=COMM_PREFIX,                                      +
               RDATA2=R1
         MVC   COMM_OPCODE_TABLE_NAME,=CL8'DISOP'
         MVC   COMM_OPCODE_TABLE_NAME+5(1),SPF_FUNCTION
         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME
         ST    R0,COMM_OPCODE_TABLE_ADDR         SET THE ADDRESS
         ITRACE ID=OP_TABLE,                                           +
               DATA1=COMM_OPCODE_TABLE_NAME,                           +
               RDATA2=R0
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         OI    DXD_FLAGS,$ERROR                  SET ERROR FLAG
         MVI   COMM_MSG_ID,1                     SET MESSAGE NBR
         B     ERR0100
ERR0020  DS    0H
         OI    DXD_FLAGS,$ERROR                  SET ERROR FLAG
         MVI   COMM_MSG_ID,2                     SET MESSAGE NBR
         B     ERR0100
ERR0040  DS    0H
         MVI   COMM_MSG_ID,4                     SET MESSAGE NBR
ERR0100  DS    0H
         MVC   COMM_MSG_CSECT,MODID              SET CSECT NAME
         L     R15,V_DISMSG
         BALR  R14,R15                           BUILD MESSAGE(S)
         MVC   SPF_MSG_1,COMM_MSG_1              COPY MESSAGE(S)
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         TM    DXD_FLAGS,$ERROR                  ERROR FLAG ON?
         BO    MAIN0010                          YES.. DISPLAY WITH MSG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)                        RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC      Q(DXDOPTS)

PANEL_NAME1   DC      CL8'DISOPTS1'
PANEL_NAME2   DC      CL8'DISOPTS2'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDOPTS       DSECT
              DS      18F

DXD_FLAGS     DS      X
$ERROR        EQU     X'80'

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    REGEQU
              END     DISOPTS
./ ADD NAME=DISOP1   0116-07093-09014-1121-00269-00252-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISOP1                                               *
*                                                                    *
*  Define valid opcodes                                              *
*         No B2                                                      *
*         No floating point                                          *
*         none of the new opcodes                                    *
*                                                                    *
*                                                                    *
*  By default, X'B2' is not a valid opcode                           *
*              floating point operations are not valid               *
*              a lot of new instructions have been added since       *
*                about when the z800 or z900 hardware came out.      *
*                By default these new opcodes are not valid.         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISOP1   CSECT
DISOP1   AMODE  31
DISOP1   RMODE  ANY
         ORG    DISOP1+(256*4)
* ------------------------------------------------------------------- *
*        OPCODE TABLE                                                 *
* ------------------------------------------------------------------- *
         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S
         OPCODE 04,SPM,$OPCODE_RR2,2
         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +
               FLAGS=$OPCODE_BRANCH
         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +
               FLAGS=$OPCODE_BRANCH
         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +
               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH
         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +
               FLAGS=$OPCODE_SVC+$OPCODE_BRANCH
         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 14,NR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC
         OPCODE 16,OR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 17,XR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 18,LR,$OPCODE_RR1,2
         OPCODE 19,CR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCC
         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 40,STH,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 41,LA,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 42,STC,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 43,IC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 44,EX,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 47,BC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 48,LH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 49,CH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 4A,AH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4B,SH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4C,MH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 50,ST,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 54,N,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 55,CL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 56,O,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 57,X,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 58,L,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 59,C,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 5A,A,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5B,S,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5C,M,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 5D,D,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 5E,AL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5F,SL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 80,SSM,$OPCODE_S,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 82,LPSW,$OPCODE_S,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 83,DIAG,$OPCODE_S,4
         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE 88,SRL,$OPCODE_RS1,4
         OPCODE 89,SLL,$OPCODE_RS1,4
         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 90,STM,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 91,TM,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 92,MVI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 93,TS,$OPCODE_S,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 94,NI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 95,CLI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 96,OI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 97,XI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 98,LM,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE AF,MC,$OPCODE_SI,4
         OPCODE B1,LRA,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
*        OPCODE B2,DUMMY,$OPB2,4
         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BA,CS,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_1EVEN
         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D4,NC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE D6,OC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D7,XC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE DA,MVCP,$OPCODE_SS3,6
         OPCODE DB,MVCS,$OPCODE_SS3,6
         OPCODE DC,TR,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DE,ED,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +
               FLAGS=$OPCODE_REF+$OPCODE_REF
         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F9,CP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE FA,AP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FB,SP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FC,MP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE FD,DP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
* ------------------------------------------------------------------- *
*                                                                     *
*        INDEX TO OPCODE TABLE                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ORG    DISOP1+0
OPINDEX  DS     0A
         OPCODE TYPE=INDEX
         COPY   DISASMDA

         IFGACB AM=VSAM
ACB_L    EQU    *-IFGACB

         END    DISOP1
./ ADD NAME=DISOP2   0107-08231-09014-1121-00407-00413-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISOP2                                               *
*                                                                    *
*  Define valid opcodes                                              *
*         No B2                                                      *
*         Does include floating point                                *
*                                                                    *
*                                                                    *
*  By default, X'B2' is not a valid opcode                           *
*              floating point operations are not valid               *
*              a lot of new instructions have been added since       *
*                about when the z800 or z900 hardware came out.      *
*                By default these new opcodes are not valid.         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISOP2   CSECT
DISOP2   AMODE  31
DISOP2   RMODE  ANY
         ORG    DISOP2+(256*4)
* ------------------------------------------------------------------- *
*        OPCODE TABLE                                                 *
* ------------------------------------------------------------------- *
         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S
         OPCODE 04,SPM,$OPCODE_RR2,2
         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM'
         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP'
         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +
               FLAGS=$OPCODE_EXT
         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +
               FLAGS=$OPCODE_SVC
         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 14,NR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC
         OPCODE 16,OR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 17,XR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 18,LR,$OPCODE_RR1,2
         OPCODE 19,CR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCC
         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 20,LPDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 21,LNDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 22,LTDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 23,LCDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 24,HDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 25,LRDR,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_204
         OPCODE 26,MXR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 27,MXDR,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 28,LDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 29,CDR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2A,ADR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2B,SDR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2C,MDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2D,DDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2E,AWR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2F,SWR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 30,LPER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 31,LNER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 32,LTER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 33,LCER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 34,HER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 35,LRER,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 36,AXR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 37,SXR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 38,LER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 39,CER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3A,AER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3B,SER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3C,MER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3D,DER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3E,AUR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3F,SUR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 40,STH,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 41,LA,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 42,STC,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 43,IC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 44,EX,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 47,BC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 48,LH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 49,CH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 4A,AH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4B,SH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4C,MH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 50,ST,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 54,N,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 55,CL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 56,O,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 57,X,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 58,L,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 59,C,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 5A,A,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5B,S,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5C,M,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 5D,D,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 5E,AL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5F,SL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 60,STD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 67,MXD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_104
         OPCODE 68,LD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 69,CD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_10246
         OPCODE 6A,AD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 6B,SD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 6C,MD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6D,DD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6E,AW,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6F,SW,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 70,STE,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 78,LE,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 79,CE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7A,AE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7B,SE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7C,ME,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 7D,DE,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 7E,AU,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7F,SU,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 80,SSM,$OPCODE_S,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 82,LPSW,$OPCODE_S,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 83,DIAG,$OPCODE_S,4
         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE 88,SRL,$OPCODE_RS1,4
         OPCODE 89,SLL,$OPCODE_RS1,4
         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 90,STM,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 91,TM,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 92,MVI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 93,TS,$OPCODE_S,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 94,NI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 95,CLI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 96,OI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 97,XI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 98,LM,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE AF,MC,$OPCODE_SI,4
         OPCODE B1,LRA,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
*        OPCODE B2,DUMMY,$OPB2,4
         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BA,CS,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_1EVEN
         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D4,NC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE D6,OC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D7,XC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE DA,MVCP,$OPCODE_SS3,6
         OPCODE DB,MVCS,$OPCODE_SS3,6
         OPCODE DC,TR,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DE,ED,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +
               FLAGS=$OPCODE_REF+$OPCODE_REF
         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F9,CP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE FA,AP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FB,SP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FC,MP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE FD,DP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
* ------------------------------------------------------------------- *
*                                                                     *
*        INDEX TO OPCODE TABLE                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ORG    DISOP2+0
OPINDEX  DS     0A
         OPCODE TYPE=INDEX
         COPY   DISASMDA

         IFGACB AM=VSAM
ACB_L    EQU    *-IFGACB

         END    DISOP2
./ ADD NAME=DISOP3   0105-08231-09014-1122-00270-00261-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISOP3                                               *
*                                                                    *
*  Define valid opcodes                                              *
*         No B2                                                      *
*         No floating point                                          *
*         does include some (I don't want to say all) of the new     *
*              opcodes.. new opcodes are added all the time.         *
*                                                                    *
*                                                                    *
*  By default, X'B2' is not a valid opcode                           *
*              floating point operations are not valid               *
*              a lot of new instructions have been added since       *
*                about when the z800 or z900 hardware came out.      *
*                By default these new opcodes are not valid.         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISOP3   CSECT
DISOP3   AMODE  31
DISOP3   RMODE  ANY
         ORG    DISOP3+(256*4)
* ------------------------------------------------------------------- *
*        OPCODE TABLE                                                 *
* ------------------------------------------------------------------- *
         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S
         OPCODE 04,SPM,$OPCODE_RR2,2
         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +
               FLAGS=$OPCODE_BRANCH
         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +
               FLAGS=$OPCODE_BRANCH
         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +
               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH
         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +
               FLAGS=$OPCODE_SVC
         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 14,NR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC
         OPCODE 16,OR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 17,XR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 18,LR,$OPCODE_RR1,2
         OPCODE 19,CR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCC
         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 40,STH,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 41,LA,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 42,STC,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 43,IC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 44,EX,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 47,BC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 48,LH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 49,CH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 4A,AH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4B,SH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4C,MH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 50,ST,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 54,N,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 55,CL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 56,O,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 57,X,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 58,L,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 59,C,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 5A,A,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5B,S,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5C,M,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 5D,D,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 5E,AL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5F,SL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 80,SSM,$OPCODE_S,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 82,LPSW,$OPCODE_S,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 83,DIAG,$OPCODE_S,4
         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE 88,SRL,$OPCODE_RS1,4
         OPCODE 89,SLL,$OPCODE_RS1,4
         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 90,STM,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 91,TM,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 92,MVI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 93,TS,$OPCODE_S,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 94,NI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 95,CLI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 96,OI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 97,XI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 98,LM,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE AF,MC,$OPCODE_SI,4
         OPCODE B1,LRA,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
*        OPCODE B2,DUMMY,$OPB2,4
         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BA,CS,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_1EVEN
         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D4,NC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE D6,OC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D7,XC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE DA,MVCP,$OPCODE_SS3,6
         OPCODE DB,MVCS,$OPCODE_SS3,6
         OPCODE DC,TR,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DE,ED,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +
               FLAGS=$OPCODE_REF+$OPCODE_REF
         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F9,CP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE FA,AP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FB,SP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FC,MP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE FD,DP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
* ------------------------------------------------------------------- *
*                                                                     *
*        INDEX TO OPCODE TABLE                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ORG    DISOP3+0
OPINDEX  DS     0A
         OPCODE TYPE=INDEX
         COPY   DISASMDA

         IFGACB AM=VSAM
ACB_L    EQU    *-IFGACB

         END    DISOP3
./ ADD NAME=DISOP4   0104-08231-09014-1122-00409-00412-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISOP2                                               *
*                                                                    *
*  Define valid opcodes                                              *
*         Does include floating point                                *
*         Does include new 'z' opcodes (at least some of them)       *
*                                                                    *
*                                                                    *
*  By default, X'B2' is not a valid opcode                           *
*              floating point operations are not valid               *
*              a lot of new instructions have been added since       *
*                about when the z800 or z900 hardware came out.      *
*                By default these new opcodes are not valid.         *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISOP2   CSECT
DISOP2   AMODE  31
DISOP2   RMODE  ANY
         ORG    DISOP2+(256*4)
* ------------------------------------------------------------------- *
*        OPCODE TABLE                                                 *
* ------------------------------------------------------------------- *
         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S
         OPCODE 04,SPM,$OPCODE_RR2,2
         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +
               FLAGS=$OPCODE_BRANCH
         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +
               FLAGS=$OPCODE_BRANCH
         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +
               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH
         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +
               FLAGS=$OPCODE_SVC+$OPCODE_BRANCH
         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_BRANCH
         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN
         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 14,NR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC
         OPCODE 16,OR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 17,XR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCL
         OPCODE 18,LR,$OPCODE_RR1,2
         OPCODE 19,CR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCC
         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +
               FLAGS=$OPCODE_CCA
         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +
               REGS=$OPCODE_1EVEN
         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 20,LPDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 21,LNDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 22,LTDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 23,LCDR,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 24,HDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 25,LRDR,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_204
         OPCODE 26,MXR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 27,MXDR,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 28,LDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 29,CDR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCC,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2A,ADR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2B,SDR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2C,MDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2D,DDR,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2E,AWR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 2F,SWR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 30,LPER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 31,LNER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 32,LTER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 33,LCER,$OPCODE_RR1,2,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 34,HER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 35,LRER,$OPCODE_RR1,2,                                 +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 36,AXR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 37,SXR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_104+$OPCODE_204
         OPCODE 38,LER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 39,CER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3A,AER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3B,SER,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3C,MER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3D,DER,$OPCODE_RR1,2,                                  +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3E,AUR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 3F,SUR,$OPCODE_RR1,2,                                  +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_10246+$OPCODE_20246
         OPCODE 40,STH,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 41,LA,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 42,STC,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 43,IC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 44,EX,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +
               FLAGS=$OPCODE_REF
         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 47,BC,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 48,LH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 49,CH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 4A,AH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4B,SH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 4C,MH,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_BRANCH
         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 50,ST,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 54,N,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 55,CL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 56,O,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 57,X,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 58,L,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 59,C,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 5A,A,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5B,S,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5C,M,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF
         OPCODE 5D,D,$OPCODE_RX,4,                                     +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 5E,AL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 5F,SL,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 60,STD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 67,MXD,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_104
         OPCODE 68,LD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 69,CD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_10246
         OPCODE 6A,AD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 6B,SD,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 6C,MD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6D,DD,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6E,AW,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 6F,SW,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 70,STE,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 78,LE,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 79,CE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7A,AE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7B,SE,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7C,ME,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 7D,DE,$OPCODE_RX,4,                                    +
               FLAGS=$OPCODE_REF,                                      +
               REGS=$OPCODE_10246
         OPCODE 7E,AU,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 7F,SU,$OPCODE_RX,4,                                    +T, +
               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +
               REGS=$OPCODE_10246
         OPCODE 80,SSM,$OPCODE_S,4,                                    +
               FLAGS=$OPCODE_REF
         OPCODE 82,LPSW,$OPCODE_S,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 83,DIAG,$OPCODE_S,4
         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE 88,SRL,$OPCODE_RS1,4
         OPCODE 89,SLL,$OPCODE_RS1,4
         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +
               FLAGS=$OPCODE_CCA
         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +
               REGS=$OPCODE_1EVEN
         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +
               FLAGS=$OPCODE_CCA,                                      +
               REGS=$OPCODE_1EVEN
         OPCODE 90,STM,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF
         OPCODE 91,TM,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 92,MVI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 93,TS,$OPCODE_S,4,                                     +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE 94,NI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 95,CLI,$OPCODE_SI,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE 96,OI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 97,XI,$OPCODE_SI,4,                                    +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE 98,LM,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF
         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE AF,MC,$OPCODE_SI,4
         OPCODE B1,LRA,$OPCODE_RX,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
*        OPCODE B2,DUMMY,$OPB2,4
         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +
               FLAGS=$OPCODE_REF
         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BA,CS,$OPCODE_RS2,4,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +
               REGS=$OPCODE_1EVEN
         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +
               FLAGS=$OPCODE_REF
         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE D4,NC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE D6,OC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D7,XC,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCL
         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +
               FLAGS=$OPCODE_CCA
         OPCODE DA,MVCP,$OPCODE_SS3,6
         OPCODE DB,MVCS,$OPCODE_SS3,6
         OPCODE DC,TR,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DE,ED,$OPCODE_SS1,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +
               FLAGS=$OPCODE_REF+$OPCODE_REF
         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF
         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +
               FLAGS=$OPCODE_REF
         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE F9,CP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCC
         OPCODE FA,AP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FB,SP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF+$OPCODE_CCA
         OPCODE FC,MP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
         OPCODE FD,DP,$OPCODE_SS2,6,                                   +
               FLAGS=$OPCODE_REF
* ------------------------------------------------------------------- *
*                                                                     *
*        INDEX TO OPCODE TABLE                                        *
*                                                                     *
* ------------------------------------------------------------------- *
         ORG    DISOP2+0
OPINDEX  DS     0A
         OPCODE TYPE=INDEX
         COPY   DISASMDA

         IFGACB AM=VSAM
ACB_L    EQU    *-IFGACB

         END    DISOP2
./ ADD NAME=DISPARM  0101-09119-09198-0844-00917-00917-00000-SOURCE
         MACRO
         REG    &REG,&VALUE
         DC     CL3'&REG'                      REGISTER NAME
         DC     AL1(&VALUE)                    VALUE IN INSTRUCTIONS
         MEND
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISPARM                                              *
*                                                                    *
*  Function:                                                         *
*   Read the parameter statements.  All parameter statements         *
*   including comment statements are copied to DISPRINT.  See the    *
*   DISASM documentation for a list of the parameter statements      *
*   and their syntax.                                                *
*                                                                    *
*--------------------------------------------------------------------*
DISPARM  CSECT
DISPARM  AMODE 31
DISPARM  RMODE ANY
         USING DISPARM,R11,R10
         USING DISCOMM,R12
         USING REGISTER_DSECT,R4              DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     PARM0000                       SKIP EYECATCHER
MODID    DC    CL8'DISPARM'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
PARM0000 DS    0H
         LA    R10,2048(,R11)                 SET BASE 2..
         LA    R10,2048(,R10)                 .. 4K FROM 1ST
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDPARM,R13
         ITRACE ID=ENTRY
         USING DCBE,DISIN_DCBE
         LA    R1,EXIT0000
         ST    R1,DCBEEODA                    SET EOD ADDRESS
         MVC   COMM_SUBHEAD,SUBHEAD
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R9,DEBUG000
         ITRACE ID=OPEN
         OPEN  (DISIN_DCB,INPUT),                                      +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         MVC   DXD_CTL_1,COMM_BLANKS
         MVC   DXD_CTL_2,COMM_BLANKS
         MVC   DXD_CTL_3,COMM_BLANKS
         MVC   DXD_CTL_4,COMM_BLANKS
         MVC   DXD_CTL_5,COMM_BLANKS
         MVC   DXD_CTL_6,COMM_BLANKS
PARM0010 DS    0H
         GET   DISIN_DCB,COMM_CONTROL_STMT    READ A CONTROL STATEMENT
         MVC   PRINT_DATA(L'COMM_CONTROL_STMT),COMM_CONTROL_STMT
         BAL   R9,PRT0000                     PRINT CONTROL STATEMENT
         CLI   COMM_CONTROL_STMT,C'*'         COMMENT?
         BE    PARM0010                       YES
         LA    R3,COMM_CONTROL_STMT           I/O AREA ADDRESS
         LA    R4,72                          MAX LOOPS
         TM    DXD_FLAGS,$CONTINUED           CONTINUED STATEMENT?
         BNO   PARM0030                       NO
         CLI   0(R3),C' '                     BLANK?
         BNE   PARM0130                       NO..
         ITRACE ID=CONT
         LA    R3,1(,R3)
         BCTR  R4,R0
PARM0020 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BNE   PARM0040                       NO
         LA    R3,1(,R3)                      NEXT
         BCT   R4,PARM0020                    LOOP
         B     PARM0010
PARM0030 DS    0H
         ITRACE ID=NOCONT
         CLC   NO_RLD_WARNING,COMM_CONTROL_STMT
         BE    RLD0000                        YES
         XC    DXD_PARM_NBR,DXD_PARM_NBR      RESET PARM NBR
         MVC   DXD_CTL_1,COMM_BLANKS
         MVC   DXD_CTL_2,COMM_BLANKS
         MVC   DXD_CTL_3,COMM_BLANKS
         MVC   DXD_CTL_4,COMM_BLANKS
         MVC   DXD_CTL_5,COMM_BLANKS
         MVC   DXD_CTL_6,COMM_BLANKS
PARM0040 DS    0H
         LH    R1,DXD_PARM_NBR                PARM NUMBER
         CH    R1,H6                          TOO MANY PARMS?
         BE    PARM0140                       YES
         LR    R2,R1                          COPY PARM NBR
         LA    R1,1(,R1)                      ADD 1
         STH   R1,DXD_PARM_NBR                UPDATE PARM NBR
         ITRACE ID=PARM_NBR,                                           +
               DATA1=DXD_PARM_NBR
         MH    R2,=Y(L'DXD_CTL_1)             MULTIPLY BY LENGTH EACH
         LA    R5,L'DXD_CTL_1                 MAX LENGTH OF A PARM
         LA    R2,DXD_CTL_1(R2)               ADDRESS OF PARM
PARM0050 DS    0H
         CLC   =C', ',0(R3)                   CONTINUED STATEMENT?
         BE    PARM0070                       YES
         CLI   0(R3),C','                     COMMA?
         BE    PARM0080                       YES
         CLI   0(R3),C' '                     BLANK?
         BE    PARM0090                       YES
         MVC   0(1,R2),0(R3)                  COPY TO PARM
         LA    R2,1(,R2)                      NEXT IN PARM
         LA    R3,1(,R3)                      NEXT IN CONTROL STATEMENT
         BCT   R5,PARM0060
         B     PARM0150                       TOO LONG
PARM0060 DS    0H
         BCT   R4,PARM0050                    LOOP
         B     PARM0010                       READ NEXT STATEMENT
PARM0070 DS    0H
         ITRACE ID=SET_CONT
         OI    DXD_FLAGS,$CONTINUED           STATEMENT IS CONTINUED
         B     PARM0010
PARM0080 DS    0H
         ITRACE ID=ENDPARM,                                            +
               DATA1=DXD_CTL_1+0,                                      +
               DATA2=DXD_CTL_1+8
         LA    R3,1(,R3)
         BCT   R4,PARM0040
         B     PARM0070
PARM0090 DS    0H
         NI    DXD_FLAGS,255-$CONTINUED       RESET FLAG
         ITRACE ID=RSETCONT
         LA    R1,KEYWORD_TABLE               KEYWORD TABLE
PARM0100 DS    0H
         CLI   0(R1),X'FF'                    END OF TABLE?
         BE    PARM0120                       YES
         CLC   DXD_CTL_1(10),0(R1)            DEFINED KEYWORD?
         BE    PARM0110                       YES
         LA    R1,14(R1)                      NEXT KEYWORD/ADDRESS
         B     PARM0100                       LOOP
PARM0110 DS    0H
         ICM   R15,15,10(R1)                  INSERT ADDRESS
         BR    R15                            BRANCH
PARM0120 DS    0H
         MVI   COMM_MSG_ID,1                  UNRECOGNIZED KEYWORD
         B     PARM0160
PARM0130 DS    0H
         MVI   COMM_MSG_ID,2                  IMPROPER CONTINUATION
         NI    DXD_FLAGS,255-$CONTINUED       RESET FLAG
         B     PARM0160
PARM0140 DS    0H
         MVI   COMM_MSG_ID,3                  TOO MANY PARMS
         B     PARM0160
PARM0150 DS    0H
         MVI   COMM_MSG_ID,4                  PARM TOO LONG
PARM0160 DS    0H
         BAL   R9,MSG0000                     PRINT MESSAGE
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*          Set ABEND flag                                             *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND                      ABEND AT EXIT
         OI    COMM_FLAGS,$COMM_FLAGS_ABEND
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process assembler input                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ASM0000  DS    0H
         ITRACE ID=ASM
         TM    COMM_ASSEM_DDS,$SYSIN_DD
         BNO   ASM0040
         CLC   =C'START ',DXD_CTL_2
         BE    ASM0010
         CLC   =C'END ',DXD_CTL_2
         BE    ASM0030
ASM0010  DS    0H
         GET   DISIN_DCB,COMM_CONTROL_STMT       READ A CONTROL STMT
         MVC   PRINT_DATA(l'COMM_CONTROL_STMT),COMM_CONTROL_STMT
         BAL   R9,PRT0000                        PRINT CONTROL STMT
         CLC   ASM_END_KEYWORD,COMM_CONTROL_STMT (END)?
         BE    ASM0030                           YES
         TM    COMM_ASSEM_DDS,$SYSIN_DD
         BNO   ASM0010                           NO SYSIN DD
         TM    DXD_FLAGS,$ASM_OPEN               ASSEMBLER DCB OPEN?
         BO    ASM0020                           YES
         OI    DXD_FLAGS,$ASM_OPEN               INDICATE DCB IS OPEN
         ITRACE ID=OPEN,                                               +
               DATA1==C'DISIN   '
         OPEN  (SYSIN_DCB,OUTPUT),               OPEN SYSIN DCB        +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         OI    COMM_FLAGS,$COMM_ASSEM            SET INDICATOR
ASM0020  DS    0H
         PUT   SYSIN_DCB,COMM_CONTROL_STMT       WRITE CONTROL STMT
         B     ASM0010                           LOOP
ASM0030  DS    0H
         ITRACE ID=ASMEND
         B     PARM0010                          READ NEXT CONTROL STMT
ASM0040  DS    0H
         MVI   COMM_MSG_ID,5                     SYSIN DD REQUIRED
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                        PRINT MESSAGE
         B     ASM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process BASE statements                                    *
*                                                                     *
*                                                                     *
*        BASE,register,start disp,end disp,disp register references   *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
BASE0000 DS    0H
         ITRACE ID=BASE
         LA    R1,DXD_CTL_2                  REGISTER NAME'S ADDRESS
         BAL   R9,REG0000                    FIND REGISTER TABLE ENTRY
         ITRACE ID=REG,                                                +
               RDATA1=R4,                                              +
               DATA2=0(R4)
* ------------------------------------------------------------------- *
*       R4 POINTS TO REGISTER TABLE ENTRY                             *
* ------------------------------------------------------------------- *
         CLC   DXD_CTL_3,COMM_BLANKS         START ALL BLANK?
         BNE   BASE0010                      NO
         CLC   DXD_CTL_4,COMM_BLANKS         END ALL BLANK?
         BE    BASE0030                      YES
BASE0010 DS    0H
         LA    R1,8                          MAX DIGITS
         LA    R2,DXD_CTL_3                  FIRST CHARACTER OF DISP
         BAL   R9,HEX0000                    CONVERT TO HEX
         MVC   DXD_START_DISP,DXD_DISP_OUT   SAVE STARTING DISPLACEMENT
         CLC   DXD_CTL_4,COMM_BLANKS         ENDING DISPLACEMENT BLANK?
         BE    BASE0020                      YES
         LA    R1,8                          MAX DIGITS
         LA    R2,DXD_CTL_4                  FIRST CHARACTER OF DISP
         BAL   R9,HEX0000                    CONVERT TO HEX
         MVC   DXD_END_DISP,DXD_DISP_OUT     ENDING DISPLACEMENT
         CLC   DXD_START_DISP,DXD_END_DISP   START LARGER THAN END?
         BH    BASE0080                      YES.. INVALID
         B     BASE0040
BASE0020 DS    0H
         ICM   R1,15,DXD_START_DISP          BEGINNING POINT
         AH    R1,H4096                      PLUS 4K
         STCM  R1,15,DXD_END_DISP            SAVE ENDING POINT
         B     BASE0040
BASE0030 DS    0H
         XC    DXD_START_DISP,DXD_START_DISP SET START TO ZERO
         MVC   DXD_END_DISP,XFFFF            SET END TO HEX FF'S
BASE0040 DS    0H
         LA    R1,8                          MAX DIGITS
         LA    R2,DXD_CTL_5                  FIRST CHARACTER OF DISP
         BAL   R9,HEX0000                    CONVERT TO HEX
         LA    R5,COMM_BASE_PREV             FORWARD POINTER
PREV     USING BASE_DSECT,R3
CURR     USING BASE_DSECT,R5
         B     BASE0060                      NO BLOCK'S ON CHAIN
BASE0050 DS    0H
         CLC   CURR.BASE_BEGIN,DXD_DISP_OUT  INSERT IT HERE?
         BL    BASE0070                      YES
BASE0060 DS    0H
         LR    R3,R5                         COPY CURR TO PREV
         ICM   R5,15,CURR.BASE_NEXT          NEXT BASE BLOCK
         BNZ   BASE0050                      LOOP
BASE0070 DS    0H
         GETMAIN RU,                         ACQUIRE STORAGE           +
               LV=BASE_DSECT_L,              .. SIZE                   +
               LOC=ANY                       .. ANY AREA
         ITRACE ID=NEWBASE,                  NEW BLOCK ACQUIRED        +
               RDATA1=R1                     .. CAPTURE STORAGE ADDRESS
NEW      USING BASE_DSECT,R1
         XC    NEW.BASE_DSECT(BASE_DSECT_L),NEW.BASE_DSECT
         ST    R1,PREV.BASE_NEXT             CHAIN NEW BLOCK
         LTR   R5,R5
         BZ    BASE0075
         ST    R1,CURR.BASE_PREV             CHAIN NEW BLOCK
BASE0075 DS    0H
         ST    R3,NEW.BASE_PREV
         ST    R5,NEW.BASE_NEXT
         MVC   NEW.BASE_EYE,BASE_KEYWORD     SET BLOCK IDENTIFIER
         MVC   NEW.BASE_BEGIN,DXD_START_DISP SET STARTING DISPLACEMENT
         MVC   NEW.BASE_END,DXD_END_DISP     SET ENDING DISPLACEMENT
         MVC   NEW.BASE_CHAR_REGISTER,REGISTER_NAME
         MVC   NEW.BASE_REGISTER,REGISTER_VALUE
         MVC   NEW.BASE_DISP,DXD_DISP_OUT    SET DISP BASE REFERS TO
         B     PARM0010                      READ NEXT CONTROL STMT
BASE0080 DS    0H
         MVI   COMM_MSG_ID,6
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010                      READ NEXT CONTROL STMT
         DROP  PREV,CURR,NEW
* ------------------------------------------------------------------- *
*                                                                     *
*          Process CSECT statements                                   *
*                                                                     *
*        CSECT,name                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
CSCT0000 DS    0H
         ITRACE ID=CSCTNAME,                 CSECT NAME                +
               DATA1=DXD_CTL_2
         CLC   COMM_CSECT,COMM_BLANKS        NAME ALREADY GIVEN?
         BNE   CSCT0010                      YES
         MVC   COMM_CSECT,DXD_CTL_2          SET CSECT NAME
         B     PARM0010
CSCT0010 DS    0H
         MVI   COMM_MSG_ID,7
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
*          Process DATA statements                                    *
*                                                                     *
*        DATA,begin disp,end disp                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DATA0000 DS    0H
         ITRACE ID=DATA
         LA    R1,8                          MAX DIGITS
         LA    R2,DXD_CTL_2                  FIRST CHARACTER OF DISP
         BAL   R9,HEX0000                    CONVERT TO HEX
         MVC   DXD_START_DISP,DXD_DISP_OUT   STARTING DISPLACEMENT
         LA    R1,8                          MAX DIGITS
         LA    R2,DXD_CTL_3                  END DISP
         BAL   R9,HEX0000                    CONVERT END DISP TO HEX
         LA    R3,COMM_USER_AREA_PREV_1      AREA BLOCK ANCHOR
PREV     USING AREA_DSECT,R2
CURR     USING AREA_DSECT,R3
         B     DATA0025
DATA0010 DS    0H
         CLC   CURR.AREA_END,DXD_START_DISP  BELOW THIS AREA?
         BL    DATA0020                      YES
         CLC   CURR.AREA_BEGIN,DXD_DISP_OUT  ABOVE THIS AREA?
         BH    DATA0030                      YES
         B     DATA0060                      OVERLAPS
DATA0020 DS    0H
         LR    R3,R2                         COPY CURR TO PREV
DATA0025 DS    0H
         ICM   R3,15,CURR.AREA_NEXT          NEXT DATA BLOCK
         BNZ   DATA0010                      LOOP
DATA0030 DS    0H
         GETMAIN RU,                         ACQUIRE STORAGE           +
               LV=AREA_DSECT_L,              .. SIZE                   +
               LOC=ANY                       .. IN ANY AREA
NEW      USING AREA_DSECT,R1
         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT
         ST    R1,PREV.AREA_NEXT
         LTR   R3,R3                         ADDING TO END OF CHAIN?
         BZ    DATA0035                      YES.. SKIP SETTING 'PREV'
         ST    R1,CURR.AREA_PREV             SET PREV IN CURRENT
DATA0035 DS    0H
         ST    R2,NEW.AREA_PREV
         ST    R3,NEW.AREA_NEXT
         MVC   NEW.AREA_EYE,AREA_ID          SET BLOCK IDENTIFIER
         MVC   NEW.AREA_BEGIN,DXD_START_DISP SET START DISPLACEMENT
         MVC   NEW.AREA_END,DXD_DISP_OUT     SET END DISPLACEMENT
         ICM   R14,15,NEW.AREA_BEGIN         BEGINNING DISPLACEMENT
         ICM   R15,15,NEW.AREA_END           ENDING DISPLACEMENT
         BZ    DATA0040                      NO ENDING DISP
         SR    R15,R14                       LENGTH - 1
         LA    R15,1(R15)                    TOTAL LENGTH
         STCM  R15,15,NEW.AREA_LENGTH        SET LENGTH
         B     DATA0050
DATA0040 DS    0H
         MVC   NEW.AREA_END,XFFFF
DATA0050 DS    0H
         MVI   NEW.AREA_TYPE,$AREA_DATA
         MVI   NEW.AREA_DATA_TYPE,$DATA_USER
         XC    NEW.AREA_LABEL,NEW.AREA_LABEL
         XC    NEW.AREA_REF_LABEL1,NEW.AREA_REF_LABEL1
         XC    NEW.AREA_REF_DISP1,NEW.AREA_REF_DISP1
         XC    NEW.AREA_REF_LABEL2,NEW.AREA_REF_LABEL2
         XC    NEW.AREA_REF_DISP2,NEW.AREA_REF_DISP2
         ITRACE ID=NEWDATA,                  NEW DATA BLOCK ADQUIRED   +
               RDATA1=R1,                    .. NEW BLOCK'S ADDRESS    +
               DATA2=NEW.AREA_BEGIN          .. BEGIN AND END DISP'S
         B     PARM0010                      READ NEXT STATEMENT
DATA0060 DS    0H
         ITRACE ID=DATAOVLP                  DATA AREA OVERLAP
         UNPK  COMM_INFO_01(9),CURR.AREA_BEGIN(5)
         TR    COMM_INFO_01,COMM_HEXCHAR
         UNPK  COMM_INFO_02(9),CURR.AREA_END(5)
         TR    COMM_INFO_02,COMM_HEXCHAR
         MVI   COMM_MSG_ID,8
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010                      READ NEXT STMT
         DROP  PREV,CURR,NEW
* ------------------------------------------------------------------- *
*                                                                     *
*          LABEL or PREFIX statements                                 *
*                                                                     *
*        LABEL,xxxx                                                   *
*            or                                                       *
*        PREFIX,xxxx                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
LABL0000 DS    0H
         ITRACE ID=LABEL
         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX STILL BLANK?
         BNE   LABL0030                      NO.. DUPLICATED
         CLI   DXD_CTL_2,C' '                PREFIX BLANK?
         BE    LABL0040                      YES.. INVALID
         CLC   DXD_CTL_2(4),DATA_KEYWORD     PREFIX 'DATA'?
         BE    LABL0050                      YES.. NOT VALID
         LA    R1,DXD_CTL_2                  FIRST CHARACTER OF PREFIX
         LA    R2,4                          MAXIMUM LENGTH
         SR    R3,R3                         INITIALIZE FOR LENGTH
LABL0010 DS    0H
         CLI   0(R1),C' '                    BLANK?
         BE    LABL0020                      YES
         LA    R1,1(R1)                      NEXT
         LA    R3,1(R3)                      ADD 1 TO LENGTH
         BCT   R2,LABL0010                   LOOP
LABL0020 DS    0H
         CLC   COMM_BLANKS(4),0(R1)          A FEW BLANKS?
         BNE   LABL0060                      NO
         MVC   COMM_PREFIX,DXD_CTL_2         SET PREFIX
         STH   R3,COMM_PREFIX_LENGTH         SET PREFIX LENGTH
         B     PARM0010                      READ NEXT STATEMENT
LABL0030 DS    0H
         MVI   COMM_MSG_ID,9
         B     LABL0070
LABL0040 DS    0H
         MVI   COMM_MSG_ID,10
         B     LABL0070
LABL0050 DS    0H
         MVI   COMM_MSG_ID,11
         B     LABL0070
LABL0060 DS    0H
         MVI   COMM_MSG_ID,12
LABL0070 DS    0H
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010                      READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*          Process MODULE Statements                                  *
*                                                                     *
*        MODULE,name                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
MOD0000  DS    0H
         ITRACE ID=MODNAME,                  MODULE NAME               +
               DATA1=DXD_CTL_2
         MVC   COMM_LMOD,DXD_CTL_2           SET MODULE NAME
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process NO RLD WArning statements                          *
*                                                                     *
*        NO RLD WA[arning]                                            *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0000  DS    0H
         ITRACE ID=NORLDWA
         OI    COMM_FLAGS,$COMM_NO_RLD_WARN  SET FLAG
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process B2 statement                                       *
*                                                                     *
* ------------------------------------------------------------------- *
B20000   DS    0H
         ITRACE ID=B2                        'B2' INSTRUCTIONS
         OI    COMM_FLAGS,$COMM_B2           SET FLAG
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process FLOAT statements                                   *
*                                                                     *
* ------------------------------------------------------------------- *
FLOAT000 DS    0H
         OI    COMM_FLAGS,$COMM_FLOAT        SET FLOATING POINT
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process USING statements                                   *
*                                                                     *
*        USING,dsect,label,register,start disp,end disp               *
*                                                                     *
* ------------------------------------------------------------------- *
USNG0000 DS    0H
         ITRACE ID=USING                     USING STATEMENT FOUND
         LA    R3,COMM_USING_PREV            CURRENT BLOCK IS ANCHOR
PREV     USING USING_DSECT,R5                DEFINE BASE
CURR     USING USING_DSECT,R3                DEFINE BASE
USNG0010 DS    0H
         LR    R5,R3                         COPY CURRENT TO PREV
         ICM   R3,15,CURR.USING_NEXT         NEXT BLOCK ON CHAIN
         BZ    USNG0020                      END OF CHAIN FOUND
USNG0020 DS    0H
         LA    R1,DXD_CTL_4                  REGISTER NAME'S ADDRESS
         BAL   R9,REG0000                    FIND REGISTER TABLE ENTRY
* ------------------------------------------------------------------- *
*       R5 addr of last USING block on chain or anchor in COMM        *
*       R4 addr of register table entry                               *
* ------------------------------------------------------------------- *
         CLC   DXD_CTL_5,COMM_BLANKS         STARTING DISP BLANK?
         BE    USNG0070                      YES
         CLC   DXD_CTL_6,COMM_BLANKS         ENDING DISP BLANK?
         BE    USNG0050                      YES.. NOT VALID
         LA    R1,8                          MAXIMUM NUMBER OF DIGITS
         LA    R2,DXD_CTL_5                  FIRST CHAR OF BEGIN DISP
         BAL   R9,HEX0000                    VERIFY/CONVERT BEGIN DISP
         MVC   DXD_START_DISP,DXD_DISP_OUT   STARTING DISPLACEMENT
         LA    R1,8                          MAXIMUM NUMBER OF DIGITS
         LA    R2,DXD_CTL_6                  FIRST CHAR OF END DISP
         BAL   R9,HEX0000                    VERIFY/CONVERT END DISP
         CLC   DXD_START_DISP,DXD_DISP_OUT   BEGIN LARGER THAN END?
         BH    USNG0060                      YES.. ERROR
USNG0030 DS    0H
         GETMAIN RU,                         ACQUIRE STORAGE           +
               LV=USING_DSECT_L,             .. SIZE                   +
               LOC=ANY                       .. IN ANY AREA
         ITRACE ID=NEWUSNG,                                            +
               RDATA1=R1                     .. TRACE BLOCK'S ADDRESS
         LR    R3,R1
         XC    CURR.USING_DSECT(USING_DSECT_L),CURR.USING_DSECT
         ST    R3,PREV.USING_NEXT
         ST    R5,CURR.USING_PREV
         MVC   CURR.USING_EYE,USING_KEYWORD       SET BLOCK IDENTIFIER
         XC    CURR.USING_NEXT,CURR.USING_NEXT    CLEAR FORWARD POINTER
         MVI   CURR.USING_FLAG,0                  SET ALL FLAGS OFF
         MVC   CURR.USING_DSECT_NAME,DXD_CTL_2    SET DSECT'S NAME
         MVC   CURR.USING_DSECT_LABEL,DXD_CTL_3   SET LABEL IN DSECT
         XC    CURR.USING_DSECT_ADDR,CURR.USING_DSECT_ADDR              RESS
         XC    CURR.USING_LABEL_ADDR,CURR.USING_LABEL_ADDR              RESS
         XC    CURR.USING_DISP,CURR.USING_DISP    CLEAR LABEL DISP
         MVC   CURR.USING_REGISTER,REGISTER_VALUE SET BASE VALUE
         MVC   CURR.USING_CHAR_REGISTER,REGISTER_NAME
         CLC   DXD_CTL_5,COMM_BLANKS              STARTING DISP OMITTED
         BE    USNG0040                           YES
         MVC   CURR.USING_BEGIN,DXD_START_DISP    BEGINNING DISP
         MVC   CURR.USING_END,DXD_DISP_OUT        ENDING DISPLACEMENT
         B     PARM0010                           READ NEXT
USNG0040 DS    0H
         OI    CURR.USING_FLAG,$USING_NO_DISP     NO DISPLACEMENTS
         XC    CURR.USING_BEGIN,CURR.USING_BEGIN  CLEAR STARTING DISP
         XC    CURR.USING_END,CURR.USING_END      CLEAR ENDING DISP
         B     PARM0010                           READ NEXT STMT
USNG0050 DS    0H
         MVI   COMM_MSG_ID,13                SET MESSAGE
         B     USNG0080
USNG0060 DS    0H
         MVI   COMM_MSG_ID,14                SET MESSAGE
         B     USNG0080
USNG0070 DS    0H
         CLC   DXD_CTL_6,COMM_BLANKS         ENDING DISPLACEMENT BLANK?
         BE    USNG0030                      YES
         MVI   COMM_MSG_ID,15
USNG0080 DS    0H
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010
         DROP  PREV,CURR
* ------------------------------------------------------------------- *
*                                                                     *
*        Locate register table entry                                  *
*                                                                     *
*          R1  is register name's address                             *
*          R9  is return address                                      *
*                                                                     *
*          At exit R4 will point to the register table entry.         *
*                                                                     *
*          If any error is found, control is passed to 'PARM0010'.    *
*                                                                     *
* ------------------------------------------------------------------- *
REG0000  DS    0H
         ITRACE ID=CONVREG
         CLI   0(R1),C' '                    BLANK?
         BE    REG0050                       YES.. INVALID
         CLC   3(7,R1),COMM_BLANKS           REFERENCE TOO LONG?
         BNE   REG0060                       YES.. INVALID
         CLI   2(R1),C' '                    3-CHARACTER NAME?
         BNE   REG0010                       YES
         CLI   1(R1),C' '                    2-CHARACTER NAME?
         BNE   REG0020                       YES
         ITRACE ID=REG1
         LA    R4,REGTBL1                    1-CHARACTER NAME TABLE
         SR    R2,R2                         SET LENGTH (1 BYTE)
         B     REG0030                       FIND TABLE ENTRY
REG0010  DS    0H
         ITRACE ID=REG3
         LA    R4,REGTBL3                    3-CHARACTER NAME TABLE
         LA    R2,2                          SET LENGTH (3 BYTES)
         B     REG0030                       FIND TABLE ENTRY
REG0020  DS    0H
         ITRACE ID=REG2
         LA    R4,REGTBL2                    2-CHARACTER NAME TABLE
         LA    R2,1                          SET LENGTH (2 BYTES)
REG0030  DS    0H
         CLI   0(R4),X'FF'                   END OF TABLE?
         BE    REG0040                       YES.. INVALID
         EX    R2,REGCLC                     REGISTER NAME MATCH?
         BER   R9                            YES
         LA    R4,REGISTER_L(R4)             NEXT REGISTER ENTRY
         B     REG0030                       LOOP
REG0040  DS    0H
         ITRACE ID=BADREG
         MVI   COMM_MSG_ID,16                SET MESSAGE
         B     REG0070
REG0050  DS    0H
         ITRACE ID=REGBLANK
         MVI   COMM_MSG_ID,17                SET MESSAGE
         B     REG0070
REG0060  DS    0H
         ITRACE ID=REGLONG
         MVI   COMM_MSG_ID,18                SET MESSAGE
REG0070  DS    0H
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010
REGCLC   CLC   REGISTER_NAME(0),0(R1)        TEST REGISTER NAME
* ------------------------------------------------------------------- *
*                                                                     *
*          PROCESS ZOP STATEMENT                                      *
*                                                                     *
* ------------------------------------------------------------------- *
ZOP0000  DS    0H
         ITRACE ID=ZOP                       'Z' INSTRUCTIONS
         OI    COMM_FLAGS,$COMM_Z            SET FLAG
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Convert character to hex                                   *
*                                                                     *
*          R1 should be the number of characters (up to 8)            *
*          R2 should be the address of the first character            *
*          R9 should be the return address                            *
*                                                                     *
*             At exit 'DXD_DISP_OUT' will be the value in hex         *
*                                                                     *
*          If any error is found, control is passed to 'PARM0010'.    *
*                                                                     *
* ------------------------------------------------------------------- *
HEX0000  DS    0H
         MVC   DXD_DISP_IN,=C'00000000'      INITIALIZE DISP TO ZERO
HEX0010  DS    0H
         CLI   0(R2),C' '                    END OF DISPLACEMENT?
         BE    HEX0030                       YES
         CLI   0(R2),C'A'                    TOO LOW FOR VALID HEX?
         BL    HEX0040                       YES
         CLI   0(R2),C'F'                    WITHIN A-F?
         BNH   HEX0020                       YES, VALID
         CLI   0(R2),C'0'                    TOO LOW FOR NUMERIC?
         BL    HEX0040                       YES
         CLI   0(R2),C'9'                    TOO HIGH?
         BH    HEX0040                       YES
HEX0020  DS    0H
         MVC   DXD_DISP_IN(L'DXD_DISP_IN-1),DXD_DISP_IN+1 SHIFT LEFT 1  IGIT
         MVC   DXD_DISP_IN+L'DXD_DISP_IN-1(1),0(R2)       NEW DIGIT
         LA    R2,1(R2)                      NEXT DISP CHARACTER
         BCT   R1,HEX0010                    LOOP
         CLI   0(R2),C' '                    BLANK?
         BNE   HEX0050                       NO.. TOO MANY DIGITS
HEX0030  DS    0H
         NC    DXD_DISP_IN,HEX1F1F           PREPARE FOR TRANSLATE
         TR    DXD_DISP_IN,CHARHEX           TRANSLATE FOR PACKING
         PACK  DXD_DISP_OUT(5),DXD_DISP_IN(9) PACK
         BR    R9                            GET OUTTA HERE
HEX0040  DS    0H
         MVI   COMM_MSG_ID,19
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010
HEX0050  DS    0H
         MVI   COMM_MSG_ID,20
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         TM    DXD_FLAGS,$SUBH               SUB-HEADING BEEN PRINTED?
         BO    PRT0010                       YES
         OI    DXD_FLAGS,$SUBH               SET FLAG
         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD
         L     R15,V_DISPRINT                PRINT MODULE ENTRY POINT
         BALR  R14,R15                       LINK TO PRINT MODULE
PRT0010  DS    0H
         MVI   PRINT_COMMAND,$PRINT_PRINT
         L     R15,V_DISPRINT                PRINT MODULE ENTRY POINT
         BALR  R14,R15                       LINK TO PRINT MODULE
         BR    R9                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVI   PRINT_COMMAND,$PRINT_PRINT
         LA    R2,COMM_MSG_1                FIRST MESSAGE
         LA    R3,5                         MAX MESSAGES
MSG0010  DS    0H
         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS
         BER   R9                           BLANK.. STOP HERE
         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2)
         L     R15,V_DISPRINT               PRINT MODULE ENTRY POINT
         BALR  R14,R15                      LINK TO PRINT MODULE
         LA    R2,L'COMM_MSG_1(,R2)         NEXT MESSAGE
         BCT   R3,MSG0010
         BR    R9                           RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=CLOSE,                                              +
               DATA1==C'DISIN   '
         CLOSE DISIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         MVC   COMM_SUBHEAD,COMM_BLANKS      CLEAR SUB HEADING
         MVI   PRINT_COMMAND,$PRINT_HEADING  SET COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                       FORCE HEADING
         TM    DXD_FLAGS,$ASM_OPEN           ASSEMBLER INPUT OPEN?
         BNO   EXIT0010                      NO
         ITRACE ID=CLOSEASM                  CLOSING DISIN DCB
         NI    DXD_FLAGS,255-$ASM_OPEN       INDICATE DCB IS CLOSED
         ITRACE ID=CLOSE,                                              +
               DATA1==C'DISIN   '
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
EXIT0010 DS    0H
         OC    COMM_BASE_NEXT,COMM_BASE_NEXT BASE REGISTER(S) DEFINED?
         BZ    EXIT0020                      NO
         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX DEFINED?
         BNE   EXIT0030                      YES
         MVI   COMM_MSG_ID,21
         BAL   R9,MSG0000                    PRINT MESSAGE
         B     EXIT0030                      EXIT
EXIT0020 DS    0H
         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX DEFINED?
         BE    EXIT0030                      NO
         MVI   COMM_MSG_ID,22
         BAL   R9,MSG0000                    PRINT MESSAGE
EXIT0030 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R9,DEBUG000
         L     R13,4(,R13)                   RESTORE REGISTER 13        ASE01670
         LM    R14,R12,12(R13)               RESTORE OTHER REGISTERS    ASE01680
         SR    R15,R15                       GIVE GOOD RETURN CODE      ASE01690
         BR    R14                           RETURN TO CALLER           ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START       DC    Q(DXDPARM)
XFFFF           DC    X'FFFFFFFF'
H6              DC    H'6'
H4096           DC    H'4096'            4K IN DECIMAL

SUBHEAD         DS    0C
                DC    C'0'
                DC    61C'-'
                DC    C' CONTROL STATEMENTS '
                DC    61C'-'

NO_RLD_WARNING  DC    C'NO RLD WA'

HEX1F1F         DC    8X'1F'
*                        0 1 2 3 4 5 6 7 8 9 A B C D E F
CHARHEX         DC    X'000A0B0C0D0E0F000000000000000000'  00-0F
                DC    X'00010203040506070809000000000000'  10-1F

AREA_ID         DC    CL8'AREA'

MSG01           DS    0C
                DC    C'DISPARM01I   Entering DISPARM'
MSG01_L         EQU   *-MSG01

MSG02           DS    0C
                DC    C'DISPARM02I   Exiting DISPARM'
MSG02_L         EQU   *-MSG02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
KEYWORD_TABLE   DS    0X
                DC    CL10'ABEND    ',AL4(ABEND000)
                DC    CL10'ASM      ',AL4(ASM0000)
BASE_KEYWORD    DC    CL10'BASE     ',AL4(BASE0000)
                DC    CL10'CSECT    ',AL4(CSCT0000)
DATA_KEYWORD    DC    CL10'DATA     ',AL4(DATA0000)
                DC    CL10'LABEL    ',AL4(LABL0000)
                DC    CL10'MODULE   ',AL4(MOD0000)
                DC    CL10'B2       ',AL4(B20000)
                DC    CL10'FLOAT    ',AL4(FLOAT000)
                DC    CL10'PREFIX   ',AL4(LABL0000)
USING_KEYWORD   DC    CL10'USING    ',AL4(USNG0000)
                DC    CL10'ZOP      ',AL4(ZOP0000)
                DC    X'FF'
ASM_END_KEYWORD DC    C'ASM,END'
*---------------------------------------------------------------------*
*                                                                     *
*              DCB'S                                                  *
*                                                                     *
*---------------------------------------------------------------------*
REGTBL1  DS    0C                    1-CHARACTER REGISTER NAMES
         REG   0,0
         REG   1,1
         REG   2,2
         REG   3,3
         REG   4,4
         REG   5,5
         REG   6,6
         REG   7,7
         REG   8,8
         REG   9,9
         REG   A,10
         REG   B,11
         REG   C,12
         REG   D,13
         REG   E,14
         REG   F,15
         DC    X'FF'
REGTBL2  DS    0C                    2-CHARACTER REGISTER NAMES
         REG   R0,0
         REG   R1,1
         REG   R2,2
         REG   R3,3
         REG   R4,4
         REG   R5,5
         REG   R6,6
         REG   R7,7
         REG   R8,8
         REG   R9,9
         REG   10,10
         REG   11,11
         REG   12,12
         REG   13,13
         REG   14,14
         REG   15,15
         REG   RA,10
         REG   RB,11
         REG   RC,12
         REG   RD,13
         REG   RE,14
         REG   RF,15
         DC    X'FF'
REGTBL3  DS    0C                    3-CHARACTER REGISTER NAMES
         REG   R10,10
         REG   R11,11
         REG   R12,12
         REG   R13,13
         REG   R14,14
         REG   R15,15
         DC    X'FF'
         LTORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDPARM           DSECT
                  DS    18F
DXD_CSECT         DS    CL8

DXD_PARM_NBR      DS    H                  NBR OF PARMS ON CONTROL STMT

DXD_DISP_IN       DS    CL8
                  DS    X                  PAD FOR PACKING

DXD_DISP_OUT      DS    XL4
                  DS    X                  PAD FOR PACKING

DXD_START_DISP    DS    XL4                BEGINNING DISPLACEMENT
DXD_END_DISP      DS    XL4                ENDING DISPLACEMENT

DXD_FLAGS         DC    X'00'
$SUBH             EQU   X'80'              SUBHEADING PRINTED
$ASM_OPEN         EQU   X'40'              ASSEMBLER INPUT DCB OPEN
$CONTINUED        EQU   X'20'              CONTINUED CONTROL STATEMENT

DXD_CTL_1         DS    CL64
DXD_CTL_2         DS    CL64
DXD_CTL_3         DS    CL64
DXD_CTL_4         DS    CL64
DXD_CTL_5         DS    CL64
DXD_CTL_6         DS    CL64
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
REGISTER_DSECT    DSECT
REGISTER_NAME     DS      CL3              REGISTER NAME
REGISTER_VALUE    DS      AL1              VALUE USED IN INSTRUCTIONS
REGISTER_L        EQU     *-REGISTER_DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY    DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM TYPE=DSECT

                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  IHADCBE
                  COPY    REGEQU
                  END     DISPARM
./ ADD NAME=DISPRINT 0101-09119-09198-0844-00179-00179-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: DISPRINT - Printing module                            *
*                                                                     *
*  Function:                                                          *
*   DISASM was written in multiple CSECTs to keep any one module from *
*   being excessively large and avoid some base register concerns due *
*   to size, and to functionally divide up the over-all logic.  Since *
*   printing was to be necessary from many modules, it seemed best to *
*   have a separate print module.  All printing except DISDEBUG is    *
*   done here.                                                        *
*                                                                     *
*   The interface data is in DISCOMM.                                 *
*                                                                     *
* ------------------------------------------------------------------- *
DISPRINT CSECT
DISPRINT AMODE 31
DISPRINT RMODE ANY
         USING DISCOMM,R12
         USING DISPRINT,R11
         STM   R14,R12,12(R13)                  SAVE REGS
         LR    R11,R15                          SET BASE REG
         B     PRT0000                          SKIP EYECATCHER
MODID    DC    CL8'DISPRINT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
PRT0000  DS    0H
         L     R15,COMM_DXD_ADDRESS             WORK AREA ADDRESS
         A     R15,DXD_START                    PLUS DISP TO OUR AREA
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                          SET SAVE AREA ADDRESS
         USING DXDPRT,R13
         ITRACE ID=ENTRY,                       TRACE ENTRY            +
               DATA1=PRINT_COMMAND,             .. TRACE COMMAND       +
               DATA2=DXD_LINE_NBR
         CLC   DXD_CSECT,MODID                  INITIALIZED?
         BE    PRT0010                          YES
         ITRACE ID=INIT
         MVC   DXD_CSECT,MODID
         ZAP   DXD_LINE_NBR,P0
         ZAP   DXD_PAGE_NBR,P0
PRT0010  DS    0H
         CLI   PRINT_COMMAND,$PRINT_HEADING     HEADING?
         BE    PRT0060                          YES
         CLI   PRINT_COMMAND,$PRINT_SUB_HEAD    SUB-HEADING?
         BE    PRT0070                          YES
         CLI   PRINT_COMMAND,$PRINT_PRINT       PRINT DATA?
         BE    PRT0020                          YES
         ITRACE ID=BAD_CMD,                                            +
               DATA1=PRINT_COMMAND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0020  DS    0H
         ZAP   DXD_LINE_WORK,P1           SET WORK TO 1
         CLI   PRINT_CC,C' '              SINGLE SPACE?
         BE    PRT0030                    YES
         AP    DXD_LINE_WORK,P1           ADD 1 TO WORK
         CLI   PRINT_CC,C'0'              DOUBLE SPACE
         BE    PRT0030                    YES
         AP    DXD_LINE_WORK,P1           ADD 1 TO WORK
PRT0030  DS    0H
         AP    DXD_LINE_WORK,DXD_LINE_NBR NEW LINE NBR
         CP    DXD_LINE_WORK,P65          WILL PAGE OVERFLOW?
         BNH   PRT0040                    NO
         ITRACE ID=PAGEFULL               PAGE IS FULL
         MVI   PRINT_COMMAND,$PRINT_HEADING
         BAL   R8,PRT0080                 PRINT HEADING
         CLC   COMM_SUBHEAD,COMM_BLANKS   SUB-HEADING BLANK?
         BE    PRT0040                    YES
         PUT   DISPRINT_DCB,COMM_SUBHEAD  PRINT SUB HEADING
         AP    DXD_LINE_NBR,P1
         AP    DXD_LINE_NBR,P1
PRT0040  DS    0H
         ITRACE ID=PRINT                  PRINTING DATA
         PUT   DISPRINT_DCB,PRINT_CC      PRINT
         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR
         CLI   PRINT_CC,C' '              SINGLE SPACE?
         BE    PRT0050                    YES
         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR
         CLI   PRINT_CC,C'0'              DOUBLE SPACE
         BE    PRT0050                    YES
         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR
PRT0050  DS    0H
         MVI   PRINT_CC,C' '
         MVI   PRINT_DATA,C' '            INTIALIZE PRINT
         MVC   PRINT_DATA+1(L'PRINT_DATA-1),PRINT_DATA
         B     EXIT0000                   EXIT
* ------------------------------------------------------------------- *
*             FORCED HEADINGS                                         *
* ------------------------------------------------------------------- *
PRT0060  DS    0H
         ITRACE ID=FORCEDHD               FORCED HEADING
         BAL   R8,PRT0080                 PRINT HEADING
         CLC   COMM_SUBHEAD,COMM_BLANKS   SUB-HEADING BLANK?
         BE    EXIT0000                   YES
* ------------------------------------------------------------------- *
*             FORCED SUB-HEADINGS                                     *
* ------------------------------------------------------------------- *
PRT0070  DS    0H
         ITRACE ID=FORCESHD               FORCED SUB-HEADING
         PUT   DISPRINT_DCB,COMM_SUBHEAD  PRINT SUBHEADING
         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR
         CLI   COMM_SUBHEAD,C'0'          DOUBLE SPACE?
         BNE   EXIT0000                   NO
         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR
         B     EXIT0000                   AND EXIT
* ------------------------------------------------------------------- *
*             PRINT HEADING                                           *
* ------------------------------------------------------------------- *
PRT0080  DS    0H
         ITRACE ID=PRTHEAD                PRINTING HEADING
         AP    DXD_PAGE_NBR,P1            ADD 1 TO PAGE NBR
         MVC   DXD_HEADING(HEADINGL),HEADING
DXDHEAD  USING HEADING,DXD_HEADING
         MVC   DXDHEAD.HEADING_PAGE,PAGE_EDITWORD
         ED    DXDHEAD.HEADING_PAGE,DXD_PAGE_NBR
         PUT   DISPRINT_DCB,DXD_HEADING   WRITE HEADING
         ZAP   DXD_LINE_NBR,P1            SET LINE NBR TO 1
         DROP  DXDHEAD
         BR    R8
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                  EXITING PRINT MODULE         +
               DATA1=DXD_LINE_NBR
         L     R13,4(,R13)                RESTORE REGISTER 13           ASE01670
         LM    R14,R12,12(R13)            RESTORE ALL OTHER REGISTERS   ASE01680
         SR    R15,R15                    GIVE GOOD RETURN CODE         ASE01690
         BR    R14                        RETURN TO CALLER              ASE01700
* ------------------------------------------------------------------- *
*              WORK AREAS                                             *
* ------------------------------------------------------------------- *
DXD_START      DC    Q(DXDPRT)

P0             DC    P'0'
P1             DC    P'1'
P65            DC    P'65'
PAGE_EDITWORD  DC    X'402020202120'
HEADING        DS    0C
               DC    C'1'
               DC    CL53' '
               DC    CL15'DISASSEMBLER'
               DC    CL53' '
               DC    CL04'PAGE'
HEADING_PAGE   DC    CL06' '
HEADINGL       EQU   *-HEADING

               LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDPRT         DSECT
               DS    18F
DXD_CSECT      DS    CL8

DXD_LINE_NBR   DS    PL3
DXD_PAGE_NBR   DS    PL3
DXD_LINE_WORK  DS    PL3

DXD_UNPK_WORK  DS    CL9

DXD_HEADING    DS    (HEADINGL)C
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY REGEQU
               END  DISPRINT
./ ADD NAME=DISREF   0112-09119-09198-0845-00647-00629-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*        Determine LABELs referenced                                  *
*                                                                     *
*                                                                     *
*  DISSCAN has examined the CSECT TEXT.                               *
*  The entire CSECT is now described by AREA blocks.                  *
*                                                                     *
*  For any ADCONs                                                     *
*    Cause a LABEL to be generated at the point referenced            *
*                                                                     *
*                                                                     *
*  For any instruction operands                                       *
*    Search the BASEs                                                 *
*    If a BASE is found                                               *
*      If the area referenced is DATA, cause a LABEL to be            *
*         generated at the point referenced.                          *
*      If the area referenced is an instruction, cause a label        *
*         to be generated at the instruction                          *
*                                                                     *
*    If NO BASE is found, search the USINGs                           *
*      If a USING is found, build a REF block to tie                  *
*      the instruction to the LABEL within the DSECT.                 *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISREF   CSECT
DISREF   AMODE 31
DISREF   RMODE ANY
         USING DISCOMM,R12
         USING DISREF,R11
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISREF'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         USING DXDREF,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         ZAP   DXD_LABEL_NBR,P0
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
CURRENT  USING AREA_DSECT,R7
LOCATE   USING AREA_DSECT,R6
NEW      USING AREA_DSECT,R5
         USING LABEL_DSECT,R4
         USING OPCODE_DSECT,R3
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   REF0000
         L     R2,COMM_DISSPFD
         USING DISSPFD,R2
         MVC   SPF_MSG_1(AREAMSG1_L),AREAMSG1
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
         DROP  R2
         USING BASE_DSECT,R2
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REF0000  DS    0H
         ITRACE ID=REF0000,                                            +
               DATA1=COMM_ALL_AREA_NEXT
         ICM   R7,15,COMM_ALL_AREA_NEXT       FIRST AREA BLOCK
         BZ    EXIT0000                       NO AREAS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REF0010  DS    0H
         ITRACE ID=AREA,                                               +
               DATA1=CURRENT.AREA_BEGIN,                               +
               DATA2=CURRENT.AREA_TYPE
         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?
         BE    REF0020                        YES
         CLI   CURRENT.AREA_TYPE,$AREA_INSTRUCTION
         BE    REF0100                        YES
         ITRACE ID=BAD_TYPE
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        ADCONs will cause a LABEL to be generated                    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0020  DS    0H
         ITRACE ID=DATAAREA,                                           +
               DATA1=CURRENT.AREA_DATA_TYPE
         CLI   CURRENT.AREA_DATA_TYPE,$DATA_ACON
         BNE   REF0160                        NO.. GO TO NEXT AREA
         ITRACE ID=ADCON
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         ICM   R1,15,CURRENT.AREA_BEGIN       DISPLACEMENT TO ADCON
         A     R1,COMM_CSECT_TEXT             PLUS BASE ADDRESS
         CLI   CURRENT.AREA_LENGTH+3,4        4-BYTE ADCON?
         BE    REF0030                        YES
         CLI   CURRENT.AREA_LENGTH+3,3        3-BYTE ADCON?
         BE    REF0040                        YES
         CLI   CURRENT.AREA_LENGTH+3,2        2-BYTE ADCON?
         BE    REF0050                        YES
         MVC   DXD_DISP+3(1),0(R1)            COPY DISPLACEMENT
         B     REF0060
REF0030  DS    0H
         MVC   DXD_DISP,0(R1)                 COPY DISPLACEMENT
         B     REF0060
REF0040  DS    0H
         MVC   DXD_DISP+1(3),0(R1)            COPY DISPLACEMENT
         B     REF0060
REF0050  DS    0H
         MVC   DXD_DISP+2(2),0(R1)            COPY DISPLACEMENT
REF0060  DS    0H
         TM    DXD_DISP,X'80'                 31-BIT MODE BIT ON?
         BNO   REF0070                        NO
         OI    CURRENT.AREA_DATA_TYPE,$DATA_31  SET 31-BIT INDICATOR
         NI    DXD_DISP,X'7F'                 TURN BIT OFF
REF0070  DS    0H
         BAL   R8,REF0200                     FIND LABEL WITHIN CSECT
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
         B     REF0160                        GO TO NEXT AREA
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        The current area is in instruction                           *
*                                                                     *
*        If operand 1 or operand 2 has a "BASE+DISP" type             *
*        operand, determine if the "BASE" is a base register          *
*        for the CSECT or for an area defined via a USING.            *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0100  DS    0H
         ICM   R3,15,CURRENT.AREA_OPCODE      OPCODE DEFINITION
         ITRACE ID=INSTRUCT,                                           +
               DATA1=OPCODE_MNEMONIC          .. MNEMONIC
         CLI   OPCODE_FORMAT,$OPCODE_RX       RX TYPE?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SI       SI TYPE?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_RS2      BXLE, BXH, ..?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_RS3      MASK TYPE?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS1      SS CHARACTER?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS2      SS PACKED DECIMAL
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS3      SS MVCK, MVCS, ..?
         BE    REF0110                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS4      SS SRP?
         BE    REF0110                        YES
         B     REF0160                        GO TO NEXT AREA
* ------------------------------------------------------------------- *
*        Split out the base and displacment for operand 1             *
* ------------------------------------------------------------------- *
REF0110  DS    0H
         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP
         A     R1,COMM_CSECT_TEXT             PLUS BASE
         SR    R14,R14
         ICM   R14,1,2(R1)                    BASE AND NIBBLE 1 OF DISP
         SRL   R14,4                          SHIFT OUT DISP
         STC   R14,DXD_BASE                   SAVE BASE
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         MVC   DXD_DISP+2(2),2(R1)            COPY DISP FROM OPERAND
         NI    DXD_DISP+2,X'0F'               REMOVE BASE
* ------------------------------------------------------------------- *
*        Search BASES for operand 1                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=OP1_REF,                                            +
               DATA1=DXD_BASE
         BAL   R10,REF0300                    CHECK BASES
         LTR   R2,R2                          BASE LOCATED?
         BZ    REF0120                        NO
* ------------------------------------------------------------------- *
*        Operand 1 references a defined base                          *
*        Locate the AREA block                                        *
* ------------------------------------------------------------------- *
         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO
         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND
         ST    R1,DXD_DISP                    DISP TO SEARCH FOR
         ITRACE ID=BASE1,                                              +
               DATA1=DXD_BASE,                .. BASE REG              +
               DATA2=DXD_DISP                 .. DISP REFERENCED
         BAL   R8,REF0200                     LOCATE REFERENCED AREA
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
         B     REF0130
* ------------------------------------------------------------------- *
*        Determine if operand 1 references a defined USING            *
* ------------------------------------------------------------------- *
REF0120  DS    0H
         ITRACE ID=REF0120
         BAL   R10,REF0400                    CHECK USINGS
         LTR   R2,R2                          USING FOUND?
         BZ    REF0130                        NO
         ITRACE ID=REF0120+
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
* ------------------------------------------------------------------- *
*        Determine if instruction has a BDDD type operand 2           *
* ------------------------------------------------------------------- *
REF0130  DS    0H
         ITRACE ID=REF0130
         CLI   OPCODE_FORMAT,$OPCODE_SS1      CHARACTER?
         BE    REF0140                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS2      PACKED DECIMAL?
         BE    REF0140                        YES
         CLI   OPCODE_FORMAT,$OPCODE_SS3      MVCK, MVCS, MVCP?
         BE    REF0140                        YES
         B     REF0160                        OTHERWIZE GO TO NEXT AREA
REF0140  DS    0H
         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP
         A     R1,COMM_CSECT_TEXT             PLUS BASE
         SR    R14,R14
         ICM   R14,1,4(R1)                    BASE AND NIBBLE 1 OF DISP
         SRL   R14,4                          SHIFT OUT DISP
         STC   R14,DXD_BASE                   SAVE BASE
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         MVC   DXD_DISP+2(2),4(R1)            COPY DISP FROM OPERAND
         NI    DXD_DISP+2,X'0F'               REMOVE BASE
* ------------------------------------------------------------------- *
*        Search BASES for operand 2                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=OP2_REF,                                            +
               DATA1=DXD_BASE
         BAL   R10,REF0300                    CHECK BASES
         LTR   R2,R2                          BASE LOCATED?
         BZ    REF0150                        NO
* ------------------------------------------------------------------- *
*        Operand 2 references a defined base                          *
* ------------------------------------------------------------------- *
         ITRACE ID=BASE2
         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO
         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND
         ST    R1,DXD_DISP                    DISP TO SEARCH FOR
         BAL   R8,REF0200                     LOCATE REFERENCED AREA
         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP
         B     REF0160
* ------------------------------------------------------------------- *
*        Determine if operand 2 references a defined USING            *
* ------------------------------------------------------------------- *
REF0150  DS    0H
         ITRACE ID=REF0150
         BAL   R10,REF0400                    CHECK USINGS
         LTR   R2,R2                          USING FOUND?
         BZ    REF0160                        NO
         ITRACE ID=REF0150+
         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP
* ------------------------------------------------------------------- *
*        Go to next AREA                                              *
* ------------------------------------------------------------------- *
REF0160  DS    0H
         ITRACE ID=NEXTAREA,                                           +
               RDATA1=R7,                                              +
               DATA2=CURRENT.AREA_NEXT
         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA
         BNZ   REF0010                        LOOP
         B     EXIT0000                       ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        Locate referenced disp within CSECT                          *
*                                                                     *
*        If the area referenced is an instruction                     *
*           GETMAIN a LABEL block and                                 *
*           set DXD_LABEL to the address of the LABEL block           *
*           set DXD_LABEL_DISP to disp from the label                 *
*                                                                     *
*                                                                     *
*        If the area referenced is a DATA area                        *
*           if the area is a ACON, QCON, VCON, or CXD                 *
*              GETMAIN a LABEL block and set AREA_LABEL               *
*              set DXD_LABEL to the address of the LABEL block        *
*              set DXD_LABEL_DISP to disp from the label              *
*           otherwise                                                 *
*              'split' the data into two parts                        *
*               . one 'up to' the disp referenced,                    *
*               . second starting at the disp referenced              *
*                 - GETMAIN a LABEL block for 'second' area           *
*                 - set DXD_LABEL to the new LABEL block              *
*                 - set DXD_LABEL_DISP to zero                        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0200  DS    0H
         ITRACE ID=REF0200,                                            +
               DATA1=DXD_DISP                 DISP FROM BASE
         XC    DXD_LABEL,DXD_LABEL
         XC    DXD_REF_DISP,DXD_REF_DISP
         ICM   R6,15,COMM_ALL_AREA_NEXT       FIRST AREA
         BZR   R8                             NO AREAS
REF0210  DS    0H
*        ITRACE ID=LOC_AREA,
*              DATA1=DXD_DISP,
*              DATA2=LOCATE.AREA_BEGIN
         CLC   DXD_DISP,LOCATE.AREA_END       DISP IN THIS AREA?
         BNH   REF0220                        YES
         ICM   R6,15,LOCATE.AREA_NEXT         NEXT AREA
         BNZ   REF0210                        CHECK NEXT AREA
         BR    R8
REF0220  DS    0H
         ITRACE ID=FND_AREA,                                           +
               DATA1=LOCATE.AREA_BEGIN,                                +
               DATA2=LOCATE.AREA_TYPE
         CLC   LOCATE.AREA_BEGIN,DXD_DISP     'DIRECT HIT'?
         BE    REF0240                        YES
         CLI   LOCATE.AREA_TYPE,$AREA_INSTRUCTION
         BE    REF0240                        YES
         TM    LOCATE.AREA_DATA_TYPE,$DATA_ACON
         BO    REF0240                        YES
         TM    LOCATE.AREA_DATA_TYPE,$DATA_VCON
         BO    REF0240                        YES
         TM    LOCATE.AREA_DATA_TYPE,$DATA_CXD
         BO    REF0240                        YES
         TM    LOCATE.AREA_DATA_TYPE,$DATA_Q
         BO    REF0240                        YES
         ITRACE ID=SPLIT,                                              +
               RDATA1=R6,                                              +
               DATA2=LOCATE.AREA_BEGIN
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         LR    R5,R1
         ITRACE ID=NEW,                                                +
               RDATA1=R5
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),LOCATE.AREA_DSECT
         ST    R5,LOCATE.AREA_NEXT
         ST    R6,NEW.AREA_PREV
         L     R14,DXD_DISP                   DISP SEARCHED FOR
         BCTR  R14,0                          MINUS 1
         STCM  R14,15,LOCATE.AREA_END         SET END DISP
         ICM   R15,15,LOCATE.AREA_BEGIN       BEGIN DISP
         SR    R14,R15                        COMPUTE LENGTH
         LA    R14,1(,R14)                    TRUE LENGTH
         STCM  R14,15,LOCATE.AREA_LENGTH      SET LENGTH
         ICM   R14,15,NEW.AREA_END            END DISP
         L     R15,DXD_DISP                   DISP SEARCHED FOR
         STCM  R15,15,NEW.AREA_BEGIN          SET BEGIN DISP
         SR    R14,R15                        COMPUTE LENGTH
         LA    R14,1(,R14)                    TRUE LENGTH
         STCM  R14,15,NEW.AREA_LENGTH         SET LENGTH
         XC    DXD_LABEL_DISP,DXD_LABEL_DISP  DISP FROM LABEL IS ZERO
         MVI   LABEL_TYPE,$LABEL_DATA         LABEL IS AT DATA AREA
         ICM   R1,15,NEW.AREA_NEXT            NEXT BLOCK ON CHAIN
         BZ    REF0230                        NO 'NEXT' BLOCK
NEXT     USING AREA_DSECT,R1
         ST    R5,NEXT.AREA_PREV              SET PREV IN NEXT
REF0230  DS    0H
*        ICM   R4,15,NEW.AREA_LABEL           LABEL GETMAINED?
*        BNZ   REF0250                        YES
         BAL   R9,REF0270                     GETMAIN LABEL BLOCK
         MVC   NEW.AREA_LABEL,DXD_LABEL       SET LABEL BLOCK ADDR
         XC    DXD_REF_DISP,DXD_REF_DISP      SET DISP FROM LABEL
         ITRACE ID=AREAS,                                              +
               DATA1=LOCATE.AREA_BEGIN,                                +
               DATA2=NEW.AREA_BEGIN
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        An instruction or ADCON is referencing this area.            *
*        Either the reference is to the first byte of this AREA       *
*        or this is an AREA that cannot be 'split'.                   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0240  DS    0H
         ITRACE ID=REF0240,                                            +
               DATA1=LOCATE.AREA_BEGIN,                                +
               RDATA2=R6
         L     R1,DXD_DISP                    DISP REFERENCED
         ICM   R0,15,LOCATE.AREA_BEGIN        AREA BEGIN DISP
         ST    R0,DXD_LABEL_DISP              DISP TO LABEL
         ICM   R4,15,LOCATE.AREA_LABEL        LABEL GETMAINED?
         BNZ   REF0250                        YES
         BAL   R9,REF0270                     GETMAIN LABEL BLOCK
         MVI   LABEL_TYPE,$LABEL_INSTR        LABEL AT AN INSTRUCTION
         ITRACE ID=AREA_LBL,                                           +
               RDATA1=R6,                                              +
               DATA2=DXD_LABEL
         ST    R4,LOCATE.AREA_LABEL           SET LABEL BLOCK ADDR
REF0250  DS    0H
         ITRACE ID=REF0250,                                            +
               RDATA1=R4
         ST    R4,DXD_LABEL                   RETURN LABEL ADDRESS
REF0260  DS    0H
         L     R1,DXD_DISP                    DISP IN INSTRUCTION
         ICM   R0,15,LABEL_DISP               DISP TO LABEL
         SR    R1,R0                          DISP FROM LABAL
         ST    R1,DXD_REF_DISP                SAVE DISP
         BR    R8
* ------------------------------------------------------------------- *
*        GETMAIN new LABEL block                                      *
* ------------------------------------------------------------------- *
REF0270  DS    0H
         GETMAIN RU,                                                   +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         LR    R4,R1
         XC    LABEL_DSECT(LABEL_DSECT_L),LABEL_DSECT
         MVC   LABEL_EYE,LABEL_ID             IDENTIFY BLOCK
         MVC   LABEL_NAME(4),COMM_PREFIX      SET PREFIX
         MVC   LABEL_DISP,LOCATE.AREA_BEGIN   DISP TO THIS LABEL
         ST    R4,DXD_LABEL                   SAVE ADDR
         ITRACE ID=NEWLABEL,                                           +
               RDATA1=R4,                                              +
               RDATA2=R9
         BR    R9
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Search defined BASEs                                            *
*     Base is in DXD_BASE                                             *
*     Displacement from the BASE is in DXD_DISP                       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0300  DS    0H
         ITRACE ID=REF0300,                                            +
               DATA1=COMM_BASE_NEXT,                                   +
               DATA2=DXD_BASE
         ICM   R2,15,COMM_BASE_NEXT           1ST BASE
         BZ    REF0340                        NO BASES DEFINED
REF0310  DS    0H
         ITRACE ID=REF0310,                                            +
               DATA1=BASE_BEGIN
         OC    BASE_BEGIN(8),BASE_BEGIN       BEGIN/END DISP(S)?
         BZ    REF0320                        NO
         CLC   BASE_END,CURRENT.AREA_BEGIN    IN EFFECT HERE?
         BL    REF0330                        NO
         CLC   BASE_BEGIN,CURRENT.AREA_END    IN EFFECT HERE?
         BH    REF0330                        NO
REF0320  DS    0H
         ITRACE ID=REF0320
         CLC   BASE_REGISTER,DXD_BASE         CORRECT REGISTER?
         BER   R10                            YES
REF0330  DS    0H
         ICM   R2,15,BASE_NEXT                NEXT BASE
         BNZ   REF0310
REF0340  DS    0H
         ITRACE ID=NO_BASE
         BR    R10                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Search defined USINGs                                           *
*     Base is in DXD_BASE                                             *
*     Displacement from the BASE is in DXD_DISP                       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0400  DS    0H
         ITRACE ID=REF0400,                                            +
               DATA1=COMM_USING_NEXT
         ICM   R2,15,COMM_USING_NEXT          1ST USING
         BZ    REF0480                        NO USINGS DEFINED
         USING USING_DSECT,R2
REF0410  DS    0H
         OC    USING_BEGIN(8),USING_BEGIN     BEGIN OR END DISP GIVEN?
         BZ    REF0420                        NO
         CLC   USING_END,CURRENT.AREA_BEGIN   IN EFFECT HERE?
         BL    REF0470                        NO
         CLC   USING_BEGIN,CURRENT.AREA_END   IN EFFECT HERE?
         BH    REF0470                        NO
REF0420  DS    0H
         CLC   USING_REGISTER,DXD_BASE        CORRECT REGISTER?
         BNE   REF0470                        NO
         ITRACE ID=FNDUSING,                                           +
               DATA1=USING_LABEL_ADDR
         MVC   DXD_EFFECTIVE_DISP,DXD_DISP    COPY DISP
         ICM   R4,15,USING_LABEL_ADDR         STARTING LABEL?
         BZ    REF0440                        NO
         ITRACE ID=USNGLABL,                                           +
               DATA1=USING_DSECT_LABEL,       .. LABEL WITHIN DSECT    +
               DATA2=USING_DISP               .. LABEL'S DISP
         ICM   R0,15,LABEL_DISP               DISP TO START LABEL
         A     R0,DXD_DISP                    PLUS DISP IN INSTRUCTION
         ST    R0,DXD_EFFECTIVE_DISP          EFFECTIVE DISP
REF0440  DS    0H
         ITRACE ID=EFF_DISP,                                           +
               DATA1=DXD_EFFECTIVE_DISP
         L     R1,USING_DSECT_ADDR            DSECT ADDRESS
         USING DSECT_DSECT,R1
         L     R4,DSECT_LABEL_NEXT            FIRST LABEL
REF0450  DS    0H
         CLC   LABEL_DISP,DXD_EFFECTIVE_DISP  LABEL DISP > EFFECTIVE?
         BNH   REF0460                        NO
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   REF0450                        KEEP SEARCHING
REF0460  DS    0H
         ST    R4,DXD_LABEL                   RETURN LABEL ADDRESS
         L     R1,DXD_EFFECTIVE_DISP          EFFECTIVE DISP
         ICM   R0,15,LABEL_DISP
         SR    R1,R0                          MINUS DISP TO LABEL
         ST    R1,DXD_REF_DISP                DISP FROM LABEL
         BR    R10
REF0470  DS    0H
         ICM   R2,15,USING_NEXT               NEXT BASE
         BNZ   REF0410
REF0480  DS    0H
         ITRACE ID=NOUSING
         BR    R10                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BER   R10                            YES
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=BAD_REF
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ICM   R7,15,COMM_ALL_AREA_NEXT       FIRST AREA BLOCK
         ITRACE ID=GENLABLS,                                           +
               RDATA1=R7
         LTR   R7,R7                          ANY LABEL BLOCKS?
         BZ    EXIT0040                       NO
         ZAP   DXD_LABEL_NBR,P0               INIT LABEL NBR
EXIT0010 DS    0H
         ITRACE ID=LABEL,                                              +
               RDATA1=R7,                                              +
               DATA2=CURRENT.AREA_LABEL
         ICM   R4,15,CURRENT.AREA_LABEL       LABEL PRESENT?
         BZ    EXIT0030                       NO
         AP    DXD_LABEL_NBR,P10              PLUS 10
         MVC   LABEL_NAME,COMM_BLANKS         INIT LABEL
         MVC   LABEL_NAME(8),=X'F020202020202120'
         ED    LABEL_NAME(8),DXD_LABEL_NBR    EDIT LABEL NUMBER
         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?
         BE    EXIT0020
         SR    R1,R1
         ICM   R1,3,COMM_PREFIX_LENGTH        PREFIX LENGTH
         BZ    EXIT0015                       SHOULD NOT HAPPEN
         BCTR  R1,0
         EX    R1,PREFIX_MVC                  COPY PREFIX
         B     EXIT0030
EXIT0015 DS    0H
         MVI   LABEL_NAME,C'L'                DEFAULT TO 'L'
         B     EXIT0030
EXIT0020 DS    0H
         MVC   LABEL_NAME(4),DATA             SET PREFIX TO 'DATA'
EXIT0030 DS    0H
         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA
         BNZ   EXIT0010
EXIT0040 DS    0H
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   EXIT0050
         L     R2,COMM_DISSPFD
         USING DISSPFD,R2
         MVC   SPF_MSG_1(AREAMSG2_L),AREAMSG2
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
         DROP  R2
EXIT0050 DS    0H
         ITRACE ON
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
PREFIX_MVC MVC LABEL_NAME(0),COMM_PREFIX
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START DC   Q(DXDREF)

P0       DC    P'0'
P10      DC    P'10'
DATA     DC    CL4'DATA'
LABEL_ID DC    CL8'LABEL'

MSG01    DS    0C
         DC    C'DISREF01I    Entering DISREF'
MSG01_L  EQU   *-MSG01

MSG02    DS    0C
         DC    C'DISREF02I    Exiting DISREF'
MSG02_L  EQU   *-MSG02

AREAMSG1 DS    0C
         DC    C'ALL areas at entry to DISREF'
AREAMSG1_L EQU *-AREAMSG1

AREAMSG2 DS    0C
         DC    C'ALL areas at exit from DISREF'
AREAMSG2_L EQU *-AREAMSG2
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDREF          DSECT
                DS   18F
DXD_CSECT       DS   CL8

DXD_REF_DISP    DS   A                  DISP REFERENCED
DXD_LABEL       DS   A                  LABEL BLOCK ADDRESS
DXD_LABEL_DISP  DS   A                  DISP FROM LABEL

DXD_EFFECTIVE_DISP   DS  A

DXD_BASE        DS   X                  BASE FOR CURRENT OPERAND
DXD_DISP        DS   A                  DISP FROM WORK BASE

DXD_LABEL_NBR   DS   PL4                LABEL NBR
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DISCOMM  TYPE=DSECT
         DISSPFD  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY     DISASMDA

         IFGACB   AM=VSAM
ACB_L    EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY REGEQU
         END  DISREF
./ ADD NAME=DISRLD   0101-09119-09198-0845-00263-00263-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISRLD                                                *
*                                                                     *
*  Function:                                                          *
*   Obtain the requested CSECT's RLD info                             *
*                                                                     *
*   DISBIND has already established a dialog                          *
*                                                                     *
* ------------------------------------------------------------------- *
DISRLD   CSECT
DISRLD   AMODE 31
DISRLD   RMODE ANY
         USING DISRLD,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R11,R15               SET BASE REG
         B     MOD0000               SKIP EYECATCHER
MODID    DC    CL8'DISRLD'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS  WORK AREA
         A     R15,DXD_START         PLUS DISP TO OUR PORTION
         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15               SET SAVE AREA ADDRESS
         USING DXDRLD,R13
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*        Obtain and initialize RLD buffer                             *
* ------------------------------------------------------------------- *
         ITRACE ID=GET_SECT,                                           +
               DATA1=COMM_CSECT
         IEWBUFF FUNC=GETBUF,                                          +
               PREFIX=IBMRLD,                                          +
               TYPE=RLD
         ST    R8,DXD_BUFFER
         ITRACE ID=INIT_RLD,                                           +
               RDATA1=R8,                                              +
               RDATA2=R7
         IEWBUFF FUNC=INITBUF,                                         +
               PREFIX=IBMRLD,                                          +
               TYPE=RLD
         XC    DXD_BINDER_CURSOR,DXD_BINDER_CURSOR
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0000  DS    0H
         ITRACE ID=GETD_RLD,                                           +
               DATA1=COMM_CSECT
         L     R8,DXD_BUFFER
         LA    R7,IBMRLD_RLDH_END
         IEWBIND FUNC=GETD,                                            +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               CLASS=B_RLD,                                            +
               SECTION=COMM_CSECT_NAME_LENGTH,                         +
               AREA=IBMRLD_IEWBRLD,                                    +
               CURSOR=DXD_BINDER_CURSOR,                               +
               COUNT=DXD_RLD_RETURNED,                                 +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=GETD_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         CLC   DXD_RETURN_CODE,F8
         BH    ERR0010
         BE    ERR0020                             NO DATA
         CLC   DXD_RETURN_CODE,F4
         BL    RLD0020
         CLC   DXD_REASON_CODE,X_83000800
         BE    RLD0020
         CLC   DXD_REASON_CODE,X_83000801
         BE    EXIT0000
RLD0020  DS    0H
         ICM   R9,15,DXD_RLD_RETURNED
         LA    R7,IBMRLD_RLDH_END
         USING IBMRLD_RLD_ENTRY,R7
RLD0030  DS    0H
         ITRACE ID=RLD,                                                +
               RDATA1=R7,                                              +
               RDATA2=R9
         MVC   DXD_CSECT_NAME,COMM_BLANKS          CLEAR CSECT NAME
         LH    R1,IBMRLD_RLD_RESIDENT_CHARS
         L     R2,IBMRLD_RLD_RESIDENT_PTR
         BCTR  R1,0
         EX    R1,MVC_01                           COPY SECTION NAME
         CLC   COMM_CSECT,DXD_CSECT_NAME           CORRECT CSECT?
         BNE   RLD0140                             NO
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         LR    R6,R1                               COPY ADDRESS
         ITRACE ID=NEW_RLD,                                            +
               RDATA1=R6
NEW      USING AREA_DSECT,R6
         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT
         MVC   NEW.AREA_EYE,AREA_ID
         MVI   NEW.AREA_TYPE,$AREA_DATA            INDICATE 'DATA' AREA
         CLI   IBMRLD_RLD_TYPE,X'10'               VCON?
         BE    RLD0040                             YES
         CLI   IBMRLD_RLD_TYPE,X'20'               ACON?
         BE    RLD0050                             YES
         CLI   IBMRLD_RLD_TYPE,X'30'               PSEUDO AREA DISP (Q)
         BE    RLD0060                             YES
         CLI   IBMRLD_RLD_TYPE,X'40'               PSEUDO SIZE (CXD)
         BE    RLD0070                             YES
         DC    H'0'
RLD0040  DS    0H
         MVI   NEW.AREA_DATA_TYPE,$DATA_VCON       ITEM IS A VCON
         B     RLD0080
RLD0050  DS    0H
         MVI   NEW.AREA_DATA_TYPE,$DATA_ACON       ITEM IS AN ADCON
         B     RLD0080
RLD0060  DS    0H
         MVI   NEW.AREA_DATA_TYPE,$DATA_Q          ITEM IS A "Q"
         B     RLD0080
RLD0070  DS    0H
         MVI   NEW.AREA_DATA_TYPE,$DATA_CXD        ITEM IS A "CXD"
RLD0080  DS    0H
         MVC   NEW.AREA_LENGTH+2(2),IBMRLD_RLD_ADCON_LENG
         MVC   NEW.AREA_BEGIN,IBMRLD_RLD_RES_OFFSET
         ICM   R0,15,NEW.AREA_BEGIN
         ICM   R1,15,NEW.AREA_LENGTH
         AR    R1,R0
         BCTR  R1,0
         STCM  R1,15,NEW.AREA_END
         TM    IBMRLD_RLD_BIND_ATTR,IBMRLD_RLD_DIRECTION
         BO    RLD0090
         OI    NEW.AREA_FLAGS,$AREA_RLD_PLUS
         B     RLD0100
RLD0090  DS    0H
         OI    NEW.AREA_FLAGS,$AREA_RLD_MINUS
RLD0100  DS    0H
         LH    R1,IBMRLD_RLD_TARGET_CHARS
         CH    R1,=Y(L'AREA_RLD_NAME)
         BNH   RLD0110
         LH    R1,=Y(L'AREA_RLD_NAME)
RLD0110  DS    0H
         L     R2,IBMRLD_RLD_TARGET_PTR
         BCTR  R1,0
         MVC   NEW.AREA_RLD_NAME,COMM_BLANKS
         EX    R1,MVC_02
* ------------------------------------------------------------------- *
*     Add the new block to RLD area chain                             *
* ------------------------------------------------------------------- *
         LA    R1,COMM_RLD_AREA_PREV               RLD ANCHOR
PREV     USING AREA_DSECT,R1
RLD0120  DS    0H
         ICM   R2,15,PREV.AREA_NEXT
         BZ    RLD0130
         LR    R1,R2                               COPY ADDRESS
         B     RLD0120                             COPY RLD BLOCK ADDR
RLD0130  DS    0H
         ST    R1,NEW.AREA_PREV                    CHAIN PREV TO NEW
         ST    R6,PREV.AREA_NEXT                   CHAIN NEW TO PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0140  DS    0H
         LA    R7,IBMRLD_RLD_END
         BCT   R9,RLD0030
         CLC   DXD_REASON_CODE,X_83000800
         BNE   RLD0000
* ------------------------------------------------------------------- *
*        Free the buffer                                              *
* ------------------------------------------------------------------- *
         L     R8,DXD_BUFFER
         IEWBUFF FUNC=FREEBUF,                                         +
               PREFIX=IBMRLD,                                          +
               TYPE=RLD
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MVC_01   MVC   DXD_CSECT_NAME(0),0(R2)
MVC_02   MVC   NEW.AREA_RLD_NAME(0),0(R2)
         DROP  NEW
* --------------------------------------------------------------------*
*                                                                     *
* --------------------------------------------------------------------*
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         DC    H'2'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         ICM   R1,15,COMM_RLD_AREA_NEXT
         BZ    EXIT0010
         XC    PREV.AREA_PREV,PREV.AREA_PREV
EXIT0010 DS    0H
         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680
         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690
         BR    R14                   RETURN TO CALLER                   ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDRLD)
F4            DC   F'4'
F8            DC   F'8'
B_RLD         DC   XL2'5',C'B_RLD'
X_83000800    DC   X'83000800'
X_83000801    DC   X'83000801'
AREA_ID       DC   CL8'AREA'
TYPE_ADCON    DC   CL5'ADCON'
TYPE_VCON     DC   CL5'VCON'
TYPE_Q        DC   CL5'Q'
TYPE_CXD      DC   CL5'CXD'

         IEWBUFF FUNC=MAPBUF,                                          +
               TYPE=RLD,                                               +
               PREFIX=IBMRLD,                                          +
               HEADREG=R8,                                             +
               ENTRYREG=R7,                                            +
               SIZE=50,                                                +
               VERSION=5

              IEWBIND MF=(L,IEWBIND_I)
IEWBIND_L     EQU  *-IEWBIND_I
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRLD            DSECT
                  DS   18F
DXD_CSECT         DS   CL8

DXD_RETURN_CODE   DS   F

DXD_REASON_CODE   DS   F

DXD_BUFFER        DS   A

DXD_BINDER_CURSOR DS   F
DXD_RLD_RETURNED  DS   F

DXD_CHAIN_POINT   DS   A

DXD_CSECT_NAME    DS   CL8

DXD_IEWBIND       DS   0F,(IEWBIND_L)X
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM  TYPE=DSECT

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY     DISASMDA

                  IFGACB   AM=VSAM
ACB_L             EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY REGEQU
         END  DISRLD
./ ADD NAME=DISRLD2  0100-09119-09119-0917-00357-00357-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISRLD2                                               *
*                                                                     *
*  Function:                                                          *
*   Add new RLD items to the AREA chain                               *
*                                                                     *
*                                                                     *
*                                                                     *
*   There are 6 possiblities                                          *
*                                                                     *
*      1) the RLD item is a new AREA                                  *
*      2) the RLD item is exactly the same as a DATA item.            *
*         In this case the 'type' is changed to reflect the RLD type  *
*         and the data type is set.                                   *
*      3) A DATA item spans an RLD item.                              *
*         This requires "breaking" the DATA item into two parts.      *
*         The end result is                                           *
*           a) a user data area that starts at the disp on the DATA   *
*              statement and ends immediately before the RLD item     *
*           b) the RLD item itself                                    *
*           c) a user data area that starts immediately after the     *
*              RLD item and ends on the disp on the DATA statement    *
*      4) An RLD item overlaps the first part of a user DATA area.    *
*         In this case the beginning displacement in the user area    *
*         is changed to reference the byte immediately following the  *
*         RLD item.                                                   *
*      5) an RLD item overlaps the end of a DATA item.                *
*         In this case the ending displacement in the user area is    *
*         changed to reference the byte immediately preceding the     *
*         RLD item.                                                   *
*      6) an RLD item overlaps the entire DATA item.                  *
*         In this case the AREA block is removed from the AREA        *
*         block chain.                                                *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISRLD2  CSECT
DISRLD2  AMODE 31
DISRLD2  RMODE ANY
         USING DISRLD2,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R11,R15               SET BASE REG
         B     MOD0000               SKIP EYECATCHER
MODID    DC    CL8'DISRLD2'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS  WORK AREA
         A     R15,DXD_START         PLUS DISP TO OUR PORTION
         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15               SET SAVE AREA ADDRESS
         USING DXDRLD2,R13
         ITRACE ID=ENTRY
         LR    R10,R1
RLD      USING AREA_DSECT,R10        DEFINE BASE
CURRENT  USING AREA_DSECT,R8         DEFINE BASE
NEW      USING AREA_DSECT,R7         DEFINE BASE
         ITRACE ID=NEW,                                                +
               RDATA1=R10,                                             +
               DATA2=RLD.AREA_BEGIN
RLD0000  DS    0H
         ITRACE ID=RLD0000
         LA    R9,COMM_AREA_NEXT     AREA BLOCK CHAIN POINT
* ------------------------------------------------------------------- *
*                                                                     *
*        Top of main loop                                             *
*                                                                     *
*                                                                     *
*   This is not the most scientific, sophisticated process.           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0010  DS    0H
         ICM   R8,15,0(R9)                         NEXT BLOCK ON CHAIN
         BZ    RLD0070                             END OF CHAIN
         ITRACE ID=RLD0010,                                            +
               DATA1=CURRENT.AREA_BEGIN,           .. BEGIN/END DISPS  +
               DATA2=RLD.AREA_BEGIN                .. BEGIN/END DISPS
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for identical disps                                    *
*                                                                     *
*      Criteria                                                       *
*        RLD begin disp = current begin disp                          *
*        RLD end disp   = current end disp                            *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   SAME BEGIN?
         BNE   RLD0020                             NO
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_END     SAME END?
         BNE   RLD0020                             NO
* ------------------------------------------------------------------- *
*        current area and RLD item describle the same area            *
*        Remove the user area                                         *
* ------------------------------------------------------------------- *
         ITRACE ID=DUP,                                                +
               RDATA1=R8
         MVI   COMM_MSG_ID,1
         MVC   COMM_INFO_01(4),CURRENT.AREA_BEGIN  AREA BEGIN DISP
         MVC   COMM_INFO_02(4),CURRENT.AREA_END    AREA END DISP
         BAL   R6,MSG0000                          PRINT MESSAGE
         MVC   0(4,R9),CURRENT.AREA_NEXT           UNCHAIN CURRENT
         FREEMAIN RU,                                                  +
               A=(R8),                                                 +
               LV=AREA_DSECT_L
         B     RLD0000                             CHECK AREAS AGAIN
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for overlapping first part of USER area                *
*                                                                     *
*     Criteria                                                        *
*        RLD begin disp must be at or lower than user area begin      *
*        RLD end disp must be at or higher than user area begin       *
*        RLD end disp must be lower than user area end disp           *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0020  DS    0H
         ITRACE ID=RLD0020
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   RLD BEGIN ABOVE?
         BH    RLD0030                             YES
         CLC   RLD.AREA_END,CURRENT.AREA_BEGIN     END BELOW BEGIN?
         BL    RLD0030                             YES
         CLC   RLD.AREA_END,CURRENT.AREA_END       END BELOW END?
         BNL   RLD0030                             NO
* ------------------------------------------------------------------- *
*        RLD item overlaps first part of user defined DATA area       *
*        change start disp in USER area                               *
*        re-compute length of user area                               *
* ------------------------------------------------------------------- *
         ITRACE ID=OLAP_1ST
         MVI   COMM_MSG_ID,2                       SET MESSAGE ID
         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP
         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP
         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP
         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP
         BAL   R6,MSG0000                          ISSUE MESSAGE
         ICM   R14,15,RLD.AREA_END                 RLD ITEM END DISP
         LA    R14,1(,R14)                         PLUS 1
         STCM  R14,15,CURRENT.AREA_BEGIN           CHANGE BEGIN DISP
         ICM   R15,15,CURRENT.AREA_END             AREA END DISP
         SR    R15,R14                             COMPUTE LENGTH
         LA    R15,1(,R15)                         TRUE LENGTH
         STCM  R15,15,CURRENT.AREA_LENGTH          SET LENGTH
         B     RLD0000                             RE-DRIVE
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for RLD item 'in the middle' of a USER area            *
*                                                                     *
*     Criteria                                                        *
*        RLD begin disp must be higher than user area begin           *
*        RLD begin end  must be lower than user area end disp         *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0030  DS    0H
         ITRACE ID=RLD0030
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   BEGIN HIGHER?
         BNH   RLD0040                             NO
         CLC   RLD.AREA_END,CURRENT.AREA_END       END LOWER?
         BNL   RLD0040                             NO
* ------------------------------------------------------------------- *
*                                                                     *
*        An RLD item is 'in the middle' of a USER defined area        *
*        split the user area into two parts                           *
*                                                                     *
*        "first part" starts at disp on DATA control statement        *
*        ends 1 byte before new RLD item                              *
*                                                                     *
*        "second part" starts one byte after the RLD item and         *
*        ends at the disp on the DATA control statement               *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SPLIT
         MVI   COMM_MSG_ID,3                       SET MESSAGE ID
         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP
         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP
         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP
         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP
         BAL   R6,MSG0000                          ISSUE MESSAGE
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         XC    0(AREA_DSECT_L,R1),0(R1)            INIT AREA
         LR    R7,R1
         ITRACE ID=NEW_RLD,                                            +
               RDATA1=R7
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),CURRENT.AREA_DSECT
         ST    R7,CURRENT.AREA_NEXT                SET NEW NEXT
         ICM   R14,15,RLD.AREA_BEGIN               RLD BEGIN DISP
         BCTR  R14,0                               MINUS 1
         STCM  R14,15,CURRENT.AREA_END             CHANGE ENDING DISP
         ICM   R15,15,CURRENT.AREA_BEGIN           BEGIN DISP
         SR    R14,R15                             COMPUTE LENGTH
         LA    R14,1(,R14)                         TRUE LENGTH
         STCM  R14,15,CURRENT.AREA_LENGTH          CHANGE LENGTH
         ICM   R14,15,RLD.AREA_END                 RLD END DISP
         LA    R14,1(,R14)                         PLUS 1
         STCM  R14,15,NEW.AREA_BEGIN               SET NEW AREA BEGIN
         ICM   R15,15,NEW.AREA_END                 END DISP
         SR    R15,R14                             COMPUTE LENGTH
         LA    R15,1(,R15)                         TRUE LENGTH
         STCM  R15,15,NEW.AREA_LENGTH              SET LENGTH
         B     RLD0000                             RE-DRIVE
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for RLD item overlapping 'last part' of USER area      *
*                                                                     *
*     Criteria                                                        *
*        RLD begin disp > user area begin disp                        *
*        RLD begin disp not > user area end disp                      *
*        RLD end disp not < user area end disp                        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0040  DS    0H
         ITRACE ID=RLD0040
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   HIGHER?
         BNH   RLD0050                             NO
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_END     AT OR LOWER THAN END
         BH    RLD0050                             NO
         CLC   RLD.AREA_END,CURRENT.AREA_END       END AT OR HIGHER?
         BL    RLD0050                             NO
         ITRACE ID=OLAP_2ND                        OVERLAPS LAST PART
         MVI   COMM_MSG_ID,4                       SET MESSAGE ID
         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP
         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP
         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP
         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP
         BAL   R6,MSG0000                          ISSUE MESSAGE
         ICM   R14,15,RLD.AREA_BEGIN               RLD ITEM BEGIN DISP
         BCTR  R14,0                               MINUS 1
         STCM  R14,15,CURRENT.AREA_END             SET ENDING DISP
         ICM   R15,15,CURRENT.AREA_BEGIN           BEGIN DISP
         SR    R14,R15                             COMPUTE LENGTH
         LA    R14,1(,R14)                         TRUE LENGTH
         STCM  R14,15,CURRENT.AREA_LENGTH          SET LENGTH
         B     RLD0000                             RE-DRIVE
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for RLD item 'spanning' a USER defined data area       *
*                                                                     *
*     Criteria                                                        *
*        RLD begin disp < user area begin disp                        *
*        RLD END   DISP > USER AREA END DISP                          *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0050  DS    0H
         ITRACE ID=RLD0050
         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   HIGHER?
         BH    RLD0060                             YES
         CLC   RLD.AREA_END,CURRENT.AREA_END       LOWER?
         BL    RLD0060                             YES
         MVI   COMM_MSG_ID,5                       SET MESSAGE ID
         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP
         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP
         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP
         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP
         BAL   R6,MSG0000                          ISSUE MESSAGE
         MVC   0(4,R9),CURRENT.AREA_NEXT           UNCHAIN THIS AREA
         FREEMAIN RU,                                                  +
               A=(R8),                                                 +
               LV=AREA_DSECT_L
         B     RLD0000                             RE-DRIVE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0060  DS    0H
         ITRACE ID=RLD0060,                                            +
               RDATA1=R8,                                              +
               DATA2=CURRENT.AREA_NEXT
         LA    R9,CURRENT.AREA_NEXT
         B     RLD0010                             LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*     All areas checked                                               *
*     The new RLD item does not conflict with any user area           *
*     Add the new RLD item to AREA chain                              *
*                                                                     *
* ------------------------------------------------------------------- *
RLD0070  DS    0H
         ITRACE ID=RLD0070
         LA    R9,COMM_AREA_NEXT
RLD0080  DS    0H
         ITRACE ID=RLD0080,                                            +
               RDATA1=R9,                                              +
               DATA2=0(R9)
         ICM   R8,15,0(R9)                         NEXT ON BLOCK
         BZ    RLD0100                             END OF CHAIN
*        ITRACE ID=X,
*              DATA1=CURRENT.AREA_BEGIN,
*              DATA2=RLD.AREA_BEGIN
         CLC   CURRENT.AREA_BEGIN,RLD.AREA_BEGIN   DOES IT GO HERE?
         BH    RLD0090                             YES
         LA    R9,CURRENT.AREA_NEXT                NEXT ON CHAIN
         B     RLD0080
RLD0090  DS    0H
         ITRACE ID=RLD0090
         ST    R8,RLD.AREA_NEXT                    CHAIN CURRENT TO NEW
RLD0100  DS    0H
         ITRACE ID=RLD0100,                                            +
               RDATA1=R9,                                              +
               RDATA2=R10
         ST    R10,0(,R9)                          ADD TO END OF CHAIN
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         TM    COMM_FLAGS,$COMM_NO_RLD_WARN        BYPASS WARNINGS?
         BOR   R6                                  YES.. SKIP MSGS
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVI   PRINT_COMMAND,$PRINT_PRINT
         MVC   PRINT_DATA,COMM_MSG_1
         L     R15,V_DISPRINT
         BALR  R14,R15
         MVC   PRINT_DATA,COMM_BLANKS
         BR    R6
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                         RESTORE REGISTER 13  ASE01670
         LM    R14,R12,12(R13)                     RESTORE REGISTERS    ASE01680
         SR    R15,R15                             RETURN CODE          ASE01690
         BR    R14                                 RETURN TO CALLER     ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDRLD2)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDRLD2       DSECT
              DS       18F
DXD_CSECT     DS       CL8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY     DISASMDA

              IFGACB   AM=VSAM
ACB_L         EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  DISRLD2
./ ADD NAME=DISRLIST 0102-09119-09198-0811-00311-00310-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISRLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*   PRINT RLD ITEMS                                                   *
*                                                                     *
* ------------------------------------------------------------------- *
DISRLIST CSECT
DISRLIST AMODE 31
DISRLIST RMODE ANY
         USING DISRLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISRLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDRLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?
         BE    MAIN0030                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=BATCH
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
         MVC   PRINT_DATA,COMM_BLANKS
         MVC   COMM_SUBHEAD,COMM_BLANKS
         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1
         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD
         L     R15,V_DISPRINT
         BALR  R14,R15                           PRINT SUBHEADING
         ICM   R6,15,COMM_RLD_AREA_NEXT          1ST RLD ITEM
         BZ    MAIN0400
         USING AREA_DSECT,R6
MAIN0010 DS    0H
         BAL   R5,MAIN0300                       BUILD DETAIL
         MVI   PRINT_COMMAND,$PRINT_PRINT        SET PRINT COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                           PRINT
MAIN0020 DS    0H
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         BNZ   MAIN0010                          PROCESS IT
         B     EXIT0000                          ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0030 DS    0H
         ITRACE ID=TSO
         ICM   R6,15,COMM_RLD_AREA_NEXT          FIRST AREA
         BZ    MAIN0400
         MVC   PRINT_DATA,COMM_BLANKS            INITIALIZE
MAIN0040 DS    0H
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG02_L)                    MINUS LENGTH OF DETAIL
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDRESS
         L     R7,SPF_VDEPTH                     NBR OF LINES
         ST    R6,DXD_FIRST_DISPLAYED            FIRST ITEM DISPLAYED
MAIN0050 DS    0H
         ST    R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED
         BAL   R5,MAIN0300                       BUILD DETAIL
         MVC   0(MSG02_L,R8),PRINT_DATA          COPY DATA
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0060
         B     MAIN0070
MAIN0060 DS    0H
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         BNZ   MAIN0050
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0070 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,DISRLD             SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   EXIT0000                          NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0100
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0120
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0130
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0140
         B     MAIN0070
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0100 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,COMM_RLD_AREA_NEXT          FIRST ON CHAIN
TEMP     USING AREA_DSECT,R1
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
MAIN0110 DS    0H
         LR    R6,R1                             SAVE THIS ADDR
         ICM   R1,15,TEMP.AREA_NEXT              NEXT AREA
         BNZ   MAIN0110
         B     MAIN0040                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0120 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0100                          YES
         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED
         B     MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0130 DS    0H
         ITRACE ID=TOP
         L     R6,COMM_RLD_AREA_NEXT             FIRST DATA ITEM
         B     MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0140 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0130                          YES
         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0150 DS    0H
         LR    R6,R1                             COPY ADDR
         ICM   R1,15,TEMP.AREA_PREV              PREVIOUS AREA
         BZ    MAIN0040
         BCT   R7,MAIN0150                       LOOP
         B     MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
P        USING MSG02,PRINT_DATA
         CLI   AREA_DATA_TYPE,$DATA_ACON         ADDRESS CONSTANT?
         BE    MAIN0310                          YES
         CLI   AREA_DATA_TYPE,$DATA_VCON         V-CONSTANT?
         BE    MAIN0320                          YES
         CLI   AREA_DATA_TYPE,$DATA_Q            Q-CONSTANT?
         BE    MAIN0330                          YES
         CLI   AREA_DATA_TYPE,$DATA_CXD          CXD?
         BE    MAIN0340                          YES
         CLI   AREA_DATA_TYPE,$DATA_USER         USER DEFINED AREA?
         BE    MAIN0350                          YES
         DC    H'0'                              SHOULD NOT HAPPEN
MAIN0310 DS    0H
         MVI   P.MSG02_ATTR,$ATTR_HIGH
         MVC   P.MSG02_TYPE,C_ADCON
         B     MAIN0360
MAIN0320 DS    0H
         MVI   P.MSG02_ATTR,$ATTR_HIGH_TURQUOISE
         MVC   P.MSG02_TYPE,C_VCON
         B     MAIN0360
MAIN0330 DS    0H
         MVI   P.MSG02_ATTR,$ATTR_HIGH_YELLOW
         MVC   P.MSG02_TYPE,C_Q
         B     MAIN0360
MAIN0340 DS    0H
         MVI   P.MSG02_ATTR,$ATTR_HIGH_RED
         MVC   P.MSG02_TYPE,C_CXD
         B     MAIN0360
MAIN0350 DS    0H
         MVC   P.MSG02_TYPE,C_USER
MAIN0360 DS    0H
         ICM   R1,15,AREA_LENGTH                 ITEM'S LENGTH
         CVD   R1,COMM_DWORD                     CONVERT TO DECIMAL
         MVC   P.MSG02_LENGTH,=X'40202120'       EDIT LENGTH
         ED    P.MSG02_LENGTH,COMM_DWORD+6
         UNPK  P.MSG02_BEGIN(9),AREA_BEGIN(5)    UNPACK BEGIN DISP
         TR    P.MSG02_BEGIN,COMM_HEXCHAR        TRANSLATE IT
         MVI   P.MSG02_BEGIN+8,C' '
         UNPK  P.MSG02_END(9),AREA_END(5)        UNPACK END DISP
         TR    P.MSG02_END,COMM_HEXCHAR          TRANSLATE IT
         MVI   P.MSG02_END+8,C' '
         TM    AREA_FLAGS,$AREA_RLD_PLUS         DIRECTION "+"?
         BO    MAIN0370                          YES
         MVI   P.MSG02_DIRECTION,C'-'            SHOW DIRECTION '-'
         B     MAIN0380
MAIN0370 DS    0H
         MVI   P.MSG02_DIRECTION,C'+'            SHOW DIRECTION '+'
MAIN0380 DS    0H
         MVC   P.MSG02_NAME,AREA_RLD_NAME        COPY NAME (Q, VCON)
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ITRACE ID=NO_RLD
         MVC   SPF_MSG_3(MSG03_L),MSG03
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?
         BE    EXIT0010                          YES
         MVC   COMM_DEBUG_IO+1(MSG04_L),MSG04
         BAL   R10,DEBUG000
EXIT0010 DS    0H
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START         DC   Q(DXDRLIST)
C_ADCON           DC   CL5'ADCON'
C_VCON            DC   CL5'VCON'
C_Q               DC   CL5'Q'
C_CXD             DC   CL5'CXD'
C_USER            DC   CL5'USER'
DISRLD            DC   CL8'DISRLD'

HEADING_1         DC   C'0RLD ITEMS'
HEADING_1_L       EQU  *-HEADING_1

MSG01             DS   0C
                  DC   C'DISRLIST01I  Entering DISRLIST'
MSG01_L           EQU  *-MSG01

MSG02             DS   0C
MSG02_ATTR        DC   AL1($ATTR_NORMAL)
MSG02_TYPE        DC   CL5' '
                  DC   CL1' '
                  DC   C' '
MSG02_BEGIN       DC   CL8' '
                  DC   C' '
MSG02_END         DC   CL8' '
                  DC   C' '
MSG02_LENGTH      DC   X'40202120'
                  DC   C' '
MSG02_DIRECTION   DC   C' '
                  DC   CL2' '
MSG02_NAME        DC   CL8' '
MSG02_L           EQU  *-MSG02

MSG03             DC   C'DISRLIST04I  No RLD items to display'
MSG03_L           EQU  *-MSG03

MSG04             DS   0C
                  DC   C'DISRLIST04I  Exiting DISRLIST'
MSG04_L           EQU  *-MSG04

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDRLIST              DSECT
                      DS      18F
DXD_CSECT             DS      CL8

DXD_FIRST_DISPLAYED   DS  A
DXD_LAST_DISPLAYED    DS  A
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              COPY    ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISRLIST
./ ADD NAME=DISRR    0102-07093-09014-1125-00076-00072-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: DISRR - VERIFY OPERANDS FOR RR FORMAT INSTRUCTIONS    *
*                                                                     *
*  Function:                                                          *
*   Some instructions require that the operand(s) be even-odd pairs   *
*   of registers.  This code verifies the operands for most 'RR'      *
*   format instructions.                                              *
*                                                                     *
*   At entry R8 will be address of the current OPCODE table entry.    *
*                                                                     *
* ------------------------------------------------------------------- *
DISRR    CSECT
DISRR    AMODE 31
DISRR    RMODE ANY
         USING DISCOMM,R12
         USING DISRR,R11
         USING OPCODE_DSECT,R8               DEFINE OPCODE DSECT BASE
         STM   R14,R12,12(R13)               SAVE REGS
         LR    R11,R15                       SET BASE REG
         B     VER0000                       SKIP EYECATCHER
         DC    CL8'DISRR'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
VER0000  DS    0H
         TM    OPCODE_REGS,X'F0'             RESTRICTIONS ON OPERAND 1?
         BZ    VER0100                       NO
         TM    1(R4),X'10'                   OPERAND 1 AN ODD NUMBER?
         BO    BAD0000                       YES.. BAD
         TM    OPCODE_REGS,$OPCODE_1EVEN     MUST BE EVEN?              ER?
         BO    VER0100                       OPERAND 1 IS OK
         TM    1(R4),X'80'                   REGISTER 8 OR GREATER?
         BO    BAD0000                       YES.. CANNOT BE VALID
         TM    OPCODE_REGS,$OPCODE_10246     NEED 0, 2, 4, OR 6?
         BO    VER0100                       OPERAND 1 IS OK
         TM    1(R4),X'20'                   REGISTER 2 OR 6?
         BO    BAD0000                       YES.. NOT VALID
VER0100  DS    0H
         TM    OPCODE_REGS,X'0F'             RESTRICTIONS ON OPERAND 2?
         BZ    GOOD0000                      NO.. OPERANDS ARE OK
         TM    1(R4),X'01'                   OPERAND 2 AN ODD NUMBER?
         BO    BAD0000                       YES.. BAD
         TM    OPCODE_REGS,$OPCODE_2EVEN     MUST BE EVEN NUMBER?
         BO    GOOD0000                      ALL OPERANDS ARE OK
         TM    1(R4),X'08'                   REGISTER 8 OR GREATER?
         BO    BAD0000                       YES.. CANNOT BE VALID
         TM    OPCODE_REGS,$OPCODE_20246     NEED 0, 2, 4, OR 6?
         BO    GOOD0000                      ALL OPERANDS ARE OK
         TM    1(R4),X'02'                   REGISTER 2 OR 6?
         BO    BAD0000                       YES.. NOT VALID
GOOD0000 DS    0H
         SR    R15,R15                       OPERAND(S) ARE OK
         B     EXIT0000                      EXIT
BAD0000  DS    0H
         LA    R15,8                         OPERAND(S) ARE NOT OK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         L     R14,12(R13)                   RESTORE R14                ASE01680
         LM    R0,R12,20(R13)                RESTORE OTHER REGISTERS    ASE01680
         BR    R14                           RETURN TO CALLER           ASE01700
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         DISCOMM TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY DISASMDA

         IFGACB  AM=VSAM
ACB_L    EQU     *-IFGACB

         COPY REGEQU
         END  DISRR
./ ADD NAME=DISSCAN  0152-09119-09198-1501-00662-00564-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISSCAN                                               *
*                                                                     *
*  FUNCTION:                                                          *
*      Examine the object text.                                       *
*      Identify all text as either data or instructions.              *
*                                                                     *
* ------------------------------------------------------------------- *
DISSCAN  CSECT
DISSCAN  AMODE 31
DISSCAN  RMODE ANY
         USING DISCOMM,R12
         USING DISSCAN,R11
         STM   R14,R12,12(R13)                 SAVE REGS
         LR    R11,R15                         SET BASE REG
         B     INIT0000                        SKIP EYECATCHER
MODID    DC    CL8'DISSCAN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         L     R15,COMM_DXD_ADDRESS            WORK AREA
         A     R15,DXD_START                   PLUS DISPLACEMENT
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         USING DXDSCAN,R13
         USING AREA_DSECT,R7
NEW      USING AREA_DSECT,R1
         MVC   DXD_CSECT,MODID
         L     R1,DXD_ENTRIES
         LA    R1,1(,R1)
         ST    R1,DXD_ENTRIES
         ITRACE ID=ENTRY,RDATA1=R1
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
         TM    COMM_FLAGS,$COMM_AREA_DEBUG    AREA DEBUGGING?
         BNO   INIT0010                       NO
         L     R2,COMM_DISSPFD
         USING DISSPFD,R2
         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
INIT0010 DS    0H
         XC    DXD_NEW_AREAS,DXD_NEW_AREAS    RESET CHAIN
* ------------------------------------------------------------------- *
*                                                                     *
*        Scan the object code and determine where instructions occur. *
*        This is necessary because some instructions reference other  *
*        instructions (like branching or modifying lengths).          *
*                                                                     *
*        If an instruction references another at other than the       *
*        opcode address, the generated label will be 'PRFXNNNN+DDD'.  *
*                                                                     *
*        'DATA' blocks will be generated to indicate areas that do    *
*        not have valid opcodes and are not already defined as being  *
*        data.                                                        *
*                                                                     *
*        Some of the hex values of character text are also opcodes.   *
*        To prevent the disassembler from interpreting a string of    *
*        character data as instructions, 8 consecutive characters     *
*        will be assumed to be data.                                  *
*                                                                     *
* ------------------------------------------------------------------- *
SCAN0000 DS    0H
         ITRACE ID=SCAN0000,                                           +
               DATA1=COMM_ALL_AREA_NEXT
         XC    DXD_CURRENT_DISP,DXD_CURRENT_DISP  INITIALIZE DISP
         XC    DXD_SCAN_DISP,DXD_SCAN_DISP        INITIALIZE DISP
         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH    RESET DATA SKIPPED
         XC    DXD_LAST_AREA,DXD_LAST_AREA        RESET LAST AREA
         ICM   R7,15,COMM_ALL_AREA_NEXT           1ST KNOWN DATA AREA
         BNZ   SCAN0010                           NO AREAS
         LA    R7,DUMMY_FF                        SET TO 'DUMMY'
*---------------------------------------------------------------------*
*                                                                     *
*        Top of scan loop                                             *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0010 DS    0H
         ITRACE ID=SCAN0010,                                           +
               DATA1=DXD_SCAN_DISP,                                    +
               DATA2=AREA_BEGIN
         CLC   DXD_SCAN_DISP,COMM_CSECT_LENGTH AT END OF CSECT?
         BH    SCAN0400                        YES
         CLC   DXD_SCAN_DISP,AREA_BEGIN        AT DATA AREA?
         BE    SCAN0030                        YES
         BL    SCAN0060                        LOW.. KEEP GOING
         ITRACE ID=BLEWPAST
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*        We are at a known data area                                  *
*                                                                     *
*        Add a new AREA block for any data we have 'skipped'          *
*                                                                     *
*        Update the current and scan disps                            *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0030 DS    0H
         ITRACE ID=AT_AREA,                                            +
               RDATA1=R7,                                              +
               DATA2=AREA_BEGIN
         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?
         BZ    SCAN0040                        NO
         BAL   R10,SCAN0300                    GETMAIN AN AREA BLOCK
         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP
         L     R3,DXD_SCAN_DISP                STOPPING DISP
         BCTR  R3,0                            MINUS 1
         ST    R3,NEW.AREA_END                 SET ENDING DISP
         S     R3,NEW.AREA_BEGIN               AREA LENGTH
         LA    R3,1(,R3)                       PLUS 1
         ST    R3,NEW.AREA_LENGTH              SET LENGTH
         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA
         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED
         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH
         ITRACE ID=NEWDATA1,                                           +
               RDATA1=R1,                                              +
               DATA2=NEW.AREA_BEGIN
SCAN0040 DS    0H
         ICM   R1,15,AREA_END                  AREA ENDING DISP
         LA    R1,1(,R1)                       PLUS 1
         ST    R1,DXD_CURRENT_DISP             SET CURRENT DISP
         ST    R1,DXD_SCAN_DISP                SET SCAN DISP
         ITRACE ID=NEW_DISP,                                           +
               DATA1=DXD_CURRENT_DISP
         ICM   R7,15,AREA_NEXT                 NEXT AREA
         BZ    SCAN0050                        CHECK FOR AREA AGAIN
         ITRACE ID=NEXTAREA,                                           +
               RDATA1=R7,                                              +
               DATA2=AREA_BEGIN
         B     SCAN0010
SCAN0050 DS    0H
         ITRACE ID=DUMMY_FF
         LA    R7,DUMMY_FF                     SET TO 'DUMMY
         B     SCAN0010
*---------------------------------------------------------------------*
*                                                                     *
*        Examine text                                                 *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0060 DS    0H
         ITRACE ID=EXAMINE,                                            +
               DATA1=DXD_CURRENT_DISP,                                 +
               DATA2=DXD_SCAN_DISP
         TM    DXD_SCAN_DISP+3,X'01'           ON ODD DISP?
         BO    SCAN0160                        YES
         BAL   R10,SCAN0200                    8 CHARACTERS OR MORE?
         BZ    SCAN0010                        YES..
         L     R1,DXD_SCAN_DISP                CURRENT DISP
         A     R1,COMM_CSECT_TEXT              PLUS TEXT BASE
         MVC   DXD_OPCODE1,0(R1)               COPY BYTE BEING EXAMINED
         SR    R9,R9                           CLEAR R9
         ICM   R9,1,0(R1)                      POSSIBLE OPCODE
         LTR   R9,R9
         BZ    SCAN0160                        NOT AN OPCODE
         SLL   R9,2                            MULTIPLY BY 4
         A     R9,COMM_OPCODE_TABLE_ADDR       PLUS OPCODE TABLE BASE
         ICM   R9,15,0(R9)                     VALID OPCODE?
         BZ    SCAN0160                        NOT AN OPCODE
         USING OPCODE_DSECT,R9
         ITRACE ID=OPCODE,                                             +
               DATA1=DXD_SCAN_DISP,            .. DISPLACMENT          +
               DATA2=OPCODE_MACHINE            .. OPCODE
         SR    R3,R3
         ICM   R3,3,OPCODE_LENGTH              INSTRUCTION LENGTH
         A     R3,DXD_SCAN_DISP                PLUS SCAN DISP
         ITRACE ID=NEXTDISP,                                           +
               RDATA1=R3
*---------------------------------------------------------------------*
*        Verify it would not exceed length of CSECT                   *
*---------------------------------------------------------------------*
         C     R3,COMM_CSECT_LENGTH            BEYOND END OF CSECT?
         BNL   SCAN0160                        YES
*---------------------------------------------------------------------*
*                                                                     *
*        Some opcodes use an "even-odd" register pair.                *
*        Copy the 2nd byte of the instruction to allow testing.       *
*                                                                     *
*---------------------------------------------------------------------*
         MVC   DXD_REGS,1(R1)                  COPY FOR RR TESTING
*---------------------------------------------------------------------*
*        Verify it does not overlap a data area                       *
*---------------------------------------------------------------------*
         LR    R1,R3                           COPY NEXT AREA DISP
         BCTR  R1,0                            END DISP OF INSTRUCTION
         ITRACE ID=OLAP_1,                                             +
               DATA1=DXD_SCAN_DISP,                                    +
               RDATA2=R1
         ICM   R2,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA
         BZ    SCAN0090                        NO DATA AREAS
OLAP     USING AREA_DSECT,R2
SCAN0070 DS    0H
         ITRACE ID=CHK_OLAP,                                           +
               DATA1=OLAP.AREA_BEGIN
         C     R1,OLAP.AREA_BEGIN              AT OR HIGHER THAN BEGIN?
         BL    SCAN0080                        NO
         CLC   DXD_SCAN_DISP,OLAP.AREA_END     HIGHER THAN END?
         BH    SCAN0080                        YES
*        C     R1,OLAP.AREA_END                AT OR LESS THAN END?
*        BH    SCAN0080                        NO
         ITRACE ID=OLAPDATA                    OVERLAPS A DATA AREA
         B     SCAN0160
SCAN0080 DS    0H
         ICM   R2,15,OLAP.AREA_NEXT            NEXT AREA
         BNZ   SCAN0070
*---------------------------------------------------------------------*
*                                                                     *
*        One of the headaches for dis-assemblers is that some         *
*        opcodes are also printable characters.  For example          *
*        the opcode for STH is hex 40 which is also a printable       *
*        blank.  To reduce the number of data areas mistaken to       *
*        be instructions, the disassembler verifies that an opcode    *
*        is followed by another valid opcode.  The exceptions are     *
*        SVC's and branches.                                          *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0090 DS    0H
         TM    OPCODE_FLAGS,$OPCODE_SVC        SVC?
         BO    SCAN0140                        YES
         TM    OPCODE_FLAGS,$OPCODE_BRANCH     BRANCH?
         BO    SCAN0140                        YES
*---------------------------------------------------------------------*
*        Verify next area is also an instruction                      *
*---------------------------------------------------------------------*
         LR    R1,R3                           COPY NEXT AREA DISP
         A     R1,COMM_CSECT_TEXT              PLUS TEXT BASE
         MVC   DXD_OPCODE2,0(R1)               COPY 'NEXT' OPCODE
         ITRACE ID=NEXT_OP,                                            +
               RDATA1=R3,                                              +
               DATA2=DXD_OPCODE2
         SR    R8,R8                           CLEAR R8
         ICM   R8,1,DXD_OPCODE2                POSSIBLE OPCODE
         BZ    SCAN0160                        NOT AN OPCODE
         SLL   R8,2                            MULTIPLY BY 4
         A     R8,COMM_OPCODE_TABLE_ADDR       PLUS OPCODE TABLE ADDR
         ICM   R8,15,0(R8)                     VALID OPCODE?
         BZ    SCAN0160                        NO
         SR    R1,R1
         ICM   R1,3,OPCODE_LENGTH              OPCODE LENGTH
         AR    R1,R3                           PLUS STARTING DISP
         C     R1,COMM_CSECT_LENGTH            BEYOND END OF CSECT?
         BH    SCAN0160                        YES
         BCTR  R1,R0                           ENDING DISP
         ITRACE ID=OLAP_2,                                             +
               RDATA1=R3,                                              +
               RDATA2=R1
         ICM   R2,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA
         BZ    SCAN0120                        NO DATA AREAS
SCAN0100 DS    0H
         ITRACE ID=CHK_OLAP,                                           +
               DATA1=OLAP.AREA_BEGIN
         C     R1,OLAP.AREA_BEGIN              AT OR HIGHER THAN BEGIN?
         BL    SCAN0110                        NO
         C     R3,OLAP.AREA_END                AT OR LESS THAN END?
         BH    SCAN0110                        NO
         ITRACE ID=OLAPDATA                    OVERLAPS A DATA AREA
         B     SCAN0160
SCAN0110 DS    0H
         ICM   R2,15,OLAP.AREA_NEXT            NEXT AREA
         BNZ   SCAN0100
         DROP  OLAP
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
SCAN0120 DS    0H
         ITRACE ID=TEST_R1
         TM    OPCODE_REGS,$OPCODE_1EVEN       SPECIAL REG REQUIREMENT?
         BNO   SCAN0130                        NO
         TM    DXD_REGS,X'10'                  ODD NUMBERED REGISTER?
         BO    SCAN0160                        YES.. NOT VALID
SCAN0130 DS    0H
         ITRACE ID=TEST_R2
         TM    OPCODE_REGS,$OPCODE_2EVEN       SPECIAL REG REQUIREMENT?
         BNO   SCAN0140                        NO
         TM    DXD_REGS,X'01'                  ODD NUMBERED REGISTER?
         BO    SCAN0160                        YES.. NOT VALID
*---------------------------------------------------------------------*
*                                                                     *
*        Valid instruction found                                      *
*                                                                     *
*        If scanned length is non zero                                *
*           Build an AREA block for the data area                     *
*                                                                     *
*                                                                     *
*        Build an AREA block                                          *
*        Set type to 'instruction'                                    *
*        Update "current disp"                                        *
*        resume scan                                                  *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0140 DS    0H
         ITRACE ID=INSTRUCT,                                           +
               DATA1=DXD_CURRENT_DISP,                                 +
               DATA2=DXD_SCAN_DISP
         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?
         BZ    SCAN0150                        NO
         BAL   R10,SCAN0300                    GETMAIN AN AREA BLOCK
         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP
         L     R3,DXD_SCAN_DISP                STOPPING DISP
         BCTR  R3,0                            MINUS 1
         ST    R3,NEW.AREA_END                 SET ENDING DISP
         S     R3,NEW.AREA_BEGIN               AREA LENGTH
         LA    R3,1(,R3)                       PLUS 1
         ST    R3,NEW.AREA_LENGTH              SET LENGTH
         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA
         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED
         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH
         ITRACE ID=NEWDATA2,                                           +
               RDATA1=R1,                                              +
               DATA2=NEW.AREA_BEGIN
SCAN0150 DS    0H
         BAL   R10,SCAN0300
         L     R2,DXD_SCAN_DISP                INSTRUCTION'S DISP
         ST    R2,NEW.AREA_BEGIN               SET STARTING DISP
         SR    R0,R0
         ICM   R0,3,OPCODE_LENGTH              INSTRUCTION LENGTH
         AR    R2,R0                           PLUS INSTRUCTION LENGTH
         BCTR  R2,0                            MINUS 1
         ST    R2,NEW.AREA_END                 SET END DISP
         MVC   NEW.AREA_LENGTH+2(2),OPCODE_LENGTH
         ST    R9,NEW.AREA_OPCODE              SET OPCODE ADDR
         MVI   NEW.AREA_TYPE,$AREA_INSTRUCTION SET AREA TYPE
         ITRACE ID=NEW_INST,                                           +
               RDATA1=R1,                                              +
               DATA2=NEW.AREA_BEGIN
         LA    R2,1(,R2)                       PLUS 1
         ST    R2,DXD_CURRENT_DISP             UPDATE CURRENT DISP
         ST    R2,DXD_SCAN_DISP                UPDATE SCAN DISP
         B     SCAN0010                        EXAMINE AGAIN
* --------------------------------------------------------------------*
*                                                                     *
* --------------------------------------------------------------------*
SCAN0160 DS    0H
         L     R1,DXD_SCAN_DISP                CURRENT SCAN DISP
         LA    R1,1(,R1)                       PLUS 1
         ST    R1,DXD_SCAN_DISP                UPDATE DISP
         L     R1,DXD_SCAN_LENGTH              LENGTH SCANNED
         LA    R1,1(,R1)                       PLUS 1
         ST    R1,DXD_SCAN_LENGTH              UPDATE LENGTH
         ITRACE ID=NEXTBYTE,                                           +
               DATA1=DXD_SCAN_DISP,                                    +
               DATA2=DXD_SCAN_LENGTH
         B     SCAN0010
* --------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        Check for 8 consecutive alpha characters                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* --------------------------------------------------------------------*
SCAN0200 DS    0H
         ST    R10,DXD_SAVE_LINK
         L     R3,DXD_CURRENT_DISP             STARTING DISP
         A     R3,COMM_CSECT_TEXT              PLUS TEXT BASE
         LTR   R7,R7                           AREA BLOCK EXIST?
         BNZ   SCAN0210                        NO
         ICM   R15,15,AREA_BEGIN               BEGIN DISP VALID?
         BH    SCAN0220                        YES
SCAN0210 DS    0H
         L     R15,COMM_CSECT_LENGTH           CSECT LENGTH
SCAN0220 DS    0H
         S     R15,DXD_CURRENT_DISP            MAX LENGTH
         ITRACE ID=CHARSCAN,                                           +
               RDATA1=R3,                                              +
               RDATA2=R15
         CH    R15,H8                          MORE THAN 8?
         BNH   SCAN0230                        NO
         LA    R15,8                           LIMIT TO 8
SCAN0230 DS    0H
         ITRACE ID=SCAN0230,                                           +
               RDATA1=R3,                                              +
               RDATA2=R15
         TRT   0(1,R3),ALPHA_TABLE             ALPHA CHARACTER?
         BNZ   SCAN0240                        NO
         LA    R3,1(,R3)                       NEXT
         BCT   R15,SCAN0230                    CHECK AGAIN
* --------------------------------------------------------------------*
*                                                                     *
*        There are 8 consecutive alpha characters.                    *
*                                                                     *
* --------------------------------------------------------------------*
         ITRACE ID=STRING,                                             +
               DATA1=DXD_CURRENT_DISP,                                 +
               RDATA2=R3
         BAL   R10,SCAN0300                    GETMAIN NEW AREA BLOCK
         L     R2,DXD_CURRENT_DISP             STARTING DISP
         ST    R2,NEW.AREA_BEGIN               SET AREA BEGIN
         LA    R2,7(,R2)                       PLUS 7
         ST    R2,NEW.AREA_END                 SET AREA END
         MVI   NEW.AREA_LENGTH+3,8             SET AREA LENGTH
         MVI   NEW.AREA_TYPE,$AREA_DATA        IDENTIFY TYPE
         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL
         S     R3,COMM_CSECT_TEXT              COMPUTE DISP
         ST    R3,DXD_CURRENT_DISP             SET DISP
         ST    R3,DXD_SCAN_DISP                SET DISP BOTH PLACES
         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH
         ITRACE ID=ALPHDATA,                                           +
               DATA1=NEW.AREA_BEGIN,                                   +
               DATA2=NEW.AREA_LENGTH
         SR    R10,R10                         SET CC
SCAN0240 DS    0H
         L     R10,DXD_SAVE_LINK               RESTORE LINK ADDR
         BR    R10                             ALL DONE
* --------------------------------------------------------------------*
*                                                                     *
*        GETMAIN/init new AREA blocks                                 *
*                                                                     *
* --------------------------------------------------------------------*
SCAN0300 DS    0H
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         ITRACE ID=SCAN0300,                                           +
               DATA1=DXD_SCAN_LENGTH,                                  +
               RDATA2=R1
         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT
         MVC   NEW.AREA_EYE,AREA_ID            IDENTIFY AREA
         OC    DXD_NEW_AREAS,DXD_NEW_AREAS     ANY AREAS YET?
         BNZ   SCAN0310                        YES
         ST    R1,DXD_NEW_AREAS                FIRST NEW AREA
SCAN0310 DS    0H
         ICM   R2,15,DXD_LAST_AREA             LAST AREA ADDED
         BZ    SCAN0320                        NONE YET
LAST     USING AREA_DSECT,R2
         ST    R1,LAST.AREA_NEXT               CHAIN TO LAST ON CHAIN
         DROP  LAST
SCAN0320 DS    0H
         ST    R1,DXD_LAST_AREA                CHANGE 'LAST' AREA
         ST    R2,NEW.AREA_PREV                CHAIN PREVIOUS BLOCK
         BR    R10
* --------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*         End of CSECT                                                *
*                                                                     *
*         Add final AREA block if necessary                           *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SCAN0400 DS    0H
         ITRACE ID=SCAN0400
         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?
         BZ    SCAN0410                        NO
         BAL   R10,SCAN0300                    GETMAIN NEW AREA BLOCK
         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP
         L     R3,DXD_SCAN_DISP                STOPPING DISP
         BCTR  R3,0                            MINUS 1
         ST    R3,NEW.AREA_END                 SET ENDING DISP
         S     R3,NEW.AREA_BEGIN               AREA LENGTH
         LA    R3,1(,R3)                       PLUS 1
         ST    R3,NEW.AREA_LENGTH              SET LENGTH
         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA
         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED
         ITRACE ID=NEWDATA3,                                           +
               RDATA1=R1,                                              +
               DATA2=NEW.AREA_BEGIN
         DROP  NEW
* --------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        There are now two chains that together 'describe' the        *
*        entire CSECT.                                                *
*                                                                     *
*        One is the 'ALL' AREA chain.  The other is the new areas     *
*        detected during the scan.                                    *
*                                                                     *
*        Now "merge" the two chains.  The result will be one chain    *
*        of AREA blocks that "describe" every byte of the CSECT.      *
*                                                                     *
*                                                                     *
* --------------------------------------------------------------------*
SCAN0410 DS    0H
         ITRACE ID=RECHAIN,                                            +
               DATA1=DXD_NEW_AREAS,                                    +
               DATA2=COMM_ALL_AREA_NEXT
         L     R2,COMM_ALL_AREA_NEXT           FIRST ON CHAIN
         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT
         LTR   R2,R2
         BNZ   SCAN0420                        ANYTHING ON CHAIN?
         LA    R2,DUMMY_FF                     SET TO DUMMY AREA
A        USING AREA_DSECT,R2
NEW      USING AREA_DSECT,R1
SCAN0420 DS    0H
         ICM   R3,15,DXD_NEW_AREAS             ANY NEW AREAS?
         BNZ   SCAN0430                        YES
B        USING AREA_DSECT,R3
         LA    R3,DUMMY_FF                     SET TO DUMMY AREA
SCAN0430 DS    0H
         LA    R4,COMM_ALL_AREA_PREV           RESULT CHAIN POINT
PREV     USING AREA_DSECT,R4
SCAN0440 DS    0H
         ITRACE ID=A_B,                                                +
               DATA1=A.AREA_BEGIN,                                     +
               DATA2=B.AREA_BEGIN
         CLC   A.AREA_BEGIN,B.AREA_BEGIN       COMPARE A WITH B
         BL    SCAN0450                        A < B
         BH    SCAN0460                        A > B
         C     R2,=A(DUMMY_FF)                 AT END OF CHAINS?
         BE    EXIT0000                        YES
         DC    H'0'
SCAN0450 DS    0H
         ITRACE ID=ADD_A,                                              +
               RDATA1=R2,                                              +
               DATA2=A.AREA_BEGIN
         LR    R1,R2                           COPY ADDRESS
         L     R2,A.AREA_NEXT                  NEXT ON CHAIN
         ST    R1,PREV.AREA_NEXT
         ST    R4,NEW.AREA_PREV
         XC    NEW.AREA_NEXT,NEW.AREA_NEXT
         LR    R4,R1
         LTR   R2,R2                           ANOTHER BLOCK?
         BNZ   SCAN0440                        YES
         LA    R2,DUMMY_FF                     SET TO DUMMY AREA
         B     SCAN0440
SCAN0460 DS    0H
         ITRACE ID=ADD__B,                                             +
               RDATA1=R3,                                              +
               DATA2=B.AREA_BEGIN
         LR    R1,R3
         L     R3,B.AREA_NEXT
         ST    R1,PREV.AREA_NEXT
         ST    R4,NEW.AREA_PREV
         XC    NEW.AREA_NEXT,NEW.AREA_NEXT
         LR    R4,R1
         LTR   R3,R3                           ANOTHER AREA?
         BNZ   SCAN0440                        YES
         LA    R3,DUMMY_FF                     SET TO DUMMY
         B     SCAN0440
* --------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DEBUG000 DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO     TSO MODE?
         BER   R10                             YES
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         LA    R1,DUMMY_FF                     DUMMY 'AREA'
         ICM   R7,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA
         BZ    EXIT0040                        NO DATA AREAS
EXIT0010 DS    0H
         C     R1,AREA_NEXT                    POINTING TO 'DUMMY'?
         BE    EXIT0020                        YES
         ICM   R7,15,AREA_NEXT                 NEXT AREA
         BNZ   EXIT0010                        LOOP
         B     EXIT0030
EXIT0020 DS    0H
         XC    AREA_NEXT,AREA_NEXT             CLEAR ADDRESS
EXIT0030 DS    0H
         ICM   R7,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA
         XC    AREA_PREV,AREA_PREV             NO PREV IN 1ST BLOCK
EXIT0040 DS    0H
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BNO   EXIT0050
         L     R2,COMM_DISSPFD
         USING DISSPFD,R2
         MVC   SPF_MSG_3(AREAMSG3_L),AREAMSG3
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
EXIT0050 DS    0H
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)                     RESTORE REGISTER 13      ASE01670
         LM    R14,R12,12(R13)                 RESTORE OTHER REGISTERS  ASE01680
         SR    R15,R15                         GIVE GOOD RETURN CODE    ASE01690
         BR    R14                             RETURN TO CALLER         ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START DC   Q(DXDSCAN)
H8       DC    H'8'
AREA_ID  DC    CL8'AREA'

DUMMY_FF DC    (AREA_DSECT_L)X'FF'

MSG01    DS    0C
         DC    C'DISSCAN01I   Entering DISSCAN'
MSG01_L  EQU   *-MSG01

MSG02    DS    0C
         DC    C'DISSCAN02I   Exiting DISSCAN'
MSG02_L  EQU   *-MSG02

AREAMSG1 DS    0C
         DC    C'ALL area chain at entry to DISSCAN'
AREAMSG1_L EQU  *-AREAMSG1

AREAMSG3 DS    0C
         DC    C'ALL chain at exit from DISSCAN'
AREAMSG3_L EQU  *-AREAMSG3

ALPHA_TABLE        DS  0C 0 1 2 3 4 5 6 7 8 9 A B C D E F'
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   00-0F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   10-1F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   20-2F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   30-3F
                   DC  X'00FFFFFFFFFFFFFFFFFFFF00FF0000FF'   40-4F
                   DC  X'00FFFFFFFFFFFFFFFFFFFF00000000FF'   50-5F
                   DC  X'0000FFFFFFFFFFFFFFFFFF00FF00FFFF'   60-6F
                   DC  X'FFFFFFFFFFFFFFFFFFFF000000000000'   70-7F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   80-8F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   90-9F
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   A0-AF
                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   B0-BF
                   DC  X'FF000000000000000000FFFFFFFFFFFF'   C0-CF
                   DC  X'FF000000000000000000FFFFFFFFFFFF'   D0-DF
                   DC  X'FFFF0000000000000000FFFFFFFFFFFF'   E0-EF
                   DC  X'00000000000000000000FFFFFFFFFFFF'   F0-FF

*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
DXDSCAN            DSECT
                   DS  18F
DXD_CSECT          DS  CL8
DXD_ENTRIES        DS  F
DXD_SAVE_LINK      DS  A
DXD_CURRENT_DISP   DS  A                DISP CURRENTLY BEING EXAMINED
DXD_SCAN_LENGTH    DS  A
DXD_SCAN_DISP      DS  A
DXD_NEW_AREAS      DS  A
DXD_LAST_AREA      DS  A
DXD_OPCODE1        DS  X
DXD_REGS           DS  X
DXD_OPCODE2        DS  X
                   DS  CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DISCOMM  TYPE=DSECT
         DISSPFD  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY    DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DCBD    DSORG=PO

         IFGACB  AM=VSAM
ACB_L    EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY    REGEQU
         END     DISSCAN
./ ADD NAME=DISSLIST 0106-09012-09198-0813-00507-00493-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISSLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of assembler SYSLIB data sets.          *
*                                                                     *
* ------------------------------------------------------------------- *
DISSLIST CSECT
DISSLIST AMODE 31
DISSLIST RMODE ANY
         USING DISSLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISSLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDSLIST,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING SYSLIB_DSECT,R6
         USING IHADCB,SYSLIB_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVI   DXD_FLAGS,0
* ------------------------------------------------------------------- *
*                                                                     *
*        If R1 is zero display existing KSDS list                     *
*        If R1 not zero, display list passed in R1                    *
*                                                                     *
* ------------------------------------------------------------------- *
         ST    R1,DXD_FIRST_SYSLIB
         ST    R1,DXD_FIRST_DISPLAYED
         LTR   R1,R1                             R1 ZERO?
         BNZ   INIT0020                          NO
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing SYSLIB chain.                      *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB
         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         ITRACE ID=COPY
         LA    R2,DXD_FIRST_SYSLIB-4
PREV     USING SYSLIB_DSECT,R2
         ICM   R6,15,COMM_SYSLIB_NEXT            FIRST LIB
         BZ    INIT0020
INIT0010 DS    0H
         GETMAIN RU,                             GETMAIN NEW LIB BLOCK +
               LV=SYSLIB_DSECT_L,                                      +
               LOC=ANY
NEW      USING SYSLIB_DSECT,R1
         MVC   NEW.SYSLIB_DSECT(SYSLIB_DSECT_L),SYSLIB_DSECT
         ST    R1,PREV.SYSLIB_NEXT
         LR    R2,R1
         ICM   R6,15,SYSLIB_NEXT                 ANOTHER LIB?
         BNZ   INIT0010                          YES.. PROCESS IT
         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_SYSLIB
         DROP  NEW,PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         L     R0,SPF_VDEPTH                     NBR OF LINES
         SLL   R0,2                              MULTIPLY BY 4
         ST    R0,DXD_SYSLIB_TABLE_SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_SYSLIB_TABLE               SAVE ADDRESS
         ITRACE ID=A_TABLE,                                            +
               RDATA1=R1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R0,DXD_SYSLIB_TABLE
         L     R1,DXD_SYSLIB_TABLE_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INIT AREA TABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
MAIN0020 DS    0H
         MVC   0(MSG01_L,R8),MSG01               INITIALIZE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0020                       LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         USING MSG01,R8
         L     R7,SPF_VDEPTH
MAIN0030 DS    0H
         L     R4,DXD_SYSLIB_TABLE               FIRST 'SLOT'
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY
         BZ    MAIN0060                          NOTHING DEFINED YET
MAIN0040 DS    0H
         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR
         ST    R6,0(R4)                          SAVE ADDR
         MVC   MSG01_DSN,SYSLIB_DSNAME           COPY DATA SET NAME
         LA    R1,1                              CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL
         LA    R4,4(,R4)                         NEXT IN ADDR TABLE
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R6,15,SYSLIB_NEXT
         BNZ   MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,DISSDATA           SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                            RC = 0?
         BNZ   MAIN0500                          NO
         CLC   CANCEL,SPF_ZCMD                   CANCEL?
         BE    MAIN1000                          YES
         CLC   CAN,SPF_ZCMD                      CAN(CEL)?
         BE    MAIN1000                          YES
* ------------------------------------------------------------------- *
*                                                                     *
*        Verify all DSNs                                              *
*          cataloged                                                  *
*          are PDSES                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG
MAIN0070 DS    0H
         MVC   MSG01_MSG,COMM_BLANKS             RESET MSG
         OC    MSG01_DSN,COMM_BLANKS             TRANSLATE TO UPPER
         CLC   MSG01_DSN,COMM_BLANKS             BLANK?
         BE    MAIN0090                          YES
         MVC   COMM_DSINFO_DSN,MSG01_DSN         COPY DSN
         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT
         BALR  R14,R15
         ITRACE ID=DINFO_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                           ERROR?
         BZ    MAIN0080                          NO
         MVC   MSG01_MSG,COMM_DSINFO_MSG         COPY MESSAGE
         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG
         B     MAIN0090
MAIN0080 DS    0H
         ITRACE ID=DS_TYPE,                                            +
               DATA1=COMM_DATASET_TYPE
         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS
         BE    MAIN0090                          YES
         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG
         MVC   MSG01_MSG(ERR01_L),ERR01
MAIN0090 DS    0H
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0070
         TM    DXD_FLAGS,$DXD_ERROR              ANY ERRORS?
         BO    MAIN0060                          DISPLAY W/MSG(S)
* ------------------------------------------------------------------- *
*                                                                     *
*        Determine if any libs were                                   *
*          updated                                                    *
*          removed                                                    *
*          added                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,SPF_VWIDTH                     SCREEN WIDTH
         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE
         SRL   R8,1                              DIVIDE BY 2
         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                     NBR OF LINES
         L     R4,DXD_SYSLIB_TABLE               FIRST LIB
MAIN0130 DS    0H
         ITRACE ID=MAIN0130
         L     R6,0(,R4)                         LIB BLOCK IF USED
         OC    MSG01_DSN,COMM_BLANKS             'TRANSLATE'
         CLC   MSG01_DSN,COMM_BLANKS             BLANK?
         BE    MAIN0180                          YES
         LTR   R6,R6                             LIB BLOCK EXIST?
         BZ    MAIN0150                          NO
         CLC   MSG01_DSN,SYSLIB_DSNAME           SAME DSN?
         BE    MAIN0220                          YES
MAIN0140 DS    0H
         ITRACE ID=UPDTLIB
         OI    DXD_FLAGS,$DXD_UPDATE             LIB HAS BEEN UPDATED
         MVC   SYSLIB_DSNAME,MSG01_DSN           CHANGE DSN
         B     MAIN0220
MAIN0150 DS    0H
         ITRACE ID=NEW_LIB
         OI    DXD_FLAGS,$DXD_UPDATE
         GETMAIN RU,                                                   +
               LV=SYSLIB_DSECT_L,                                      +
               LOC=ANY
NEW      USING SYSLIB_DSECT,R1
         XC    NEW.SYSLIB_DSECT(SYSLIB_DSECT_L),NEW.SYSLIB_DSECT
         MVC   NEW.SYSLIB_EYE,SYSLIB_ID          IDENTIFY BLOCK
         MVC   NEW.SYSLIB_DSNAME,MSG01_DSN       SET DSN
         LA    R6,DXD_FIRST_SYSLIB-4             FIRST LIB
MAIN0160 DS    0H
         ICM   R2,15,SYSLIB_NEXT                 ANOTHER ON CHAIN?
         BZ    MAIN0170                          YES
         LR    R6,R2                             COPY ADDRESS
         B     MAIN0160
MAIN0170 DS    0H
         ST    R1,SYSLIB_NEXT                    SET 'NEXT' IN PREVIOUS
         ST    R6,NEW.SYSLIB_PREV                SET PREV IN NEW
         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         BNZ   MAIN0220                          BLOCK PRESENT
         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN
         B     MAIN0220
         DROP  NEW
MAIN0180 DS    0H
         LTR   R6,R6                             LIB BLOCK EXIST?
         BZ    MAIN0220                          NO
         OI    DXD_FLAGS,$DXD_UPDATE             A LIB WAS UPDATED
         ITRACE ID=DEL_LIB,                      DELETING A LIB BLOCK  +
               RDATA1=R6
         ICM   R1,15,SYSLIB_NEXT                 NEXT LIB ON CHAIN
         BZ    MAIN0190
NEXT     USING SYSLIB_DSECT,R1
         MVC   NEXT.SYSLIB_PREV,SYSLIB_PREV      SET PREV IN NEXT
         DROP  NEXT
MAIN0190 DS    0H
         ICM   R1,15,SYSLIB_PREV                 PREVIOUS ON CHAIN
         BZ    MAIN0200                          NO PREVIOUS BLOCK
PREV     USING SYSLIB_DSECT,R1
         MVC   PREV.SYSLIB_NEXT,SYSLIB_NEXT      SET NEXT IN PREVIOUS
MAIN0200 DS    0H
         C     R6,DXD_FIRST_DISPLAYED            FIRST LIB DISPLAYED?
         BNE   MAIN0210                          NO
         MVC   DXD_FIRST_DISPLAYED,SYSLIB_NEXT   CHANGE TO NEXT BLOCK
MAIN0210 DS    0H
         FREEMAIN RU,                            FREEMAIN LIB BLOCK    +
               A=(R6),                                                 +
               LV=SYSLIB_DSECT_L
         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE
MAIN0220 DS    0H
         ITRACE ID=NEXT
         A     R8,SPF_VWIDTH                     NEXT LINE
         LA    R4,4(,R4)                         NEXT IN TABLE
         BCT   R7,MAIN0130                       LOOP
         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?
         BO    MAIN0010                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0300
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0320
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0330
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0340
         B     MAIN0050
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,DXD_FIRST_SYSLIB            FIRST ON CHAIN
TEMP     USING SYSLIB_DSECT,R1
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
MAIN0310 DS    0H
         LR    R6,R1                             SAVE THIS ADDR
         ICM   R1,15,TEMP.SYSLIB_NEXT            NEXT LIB
         BNZ   MAIN0310
         B     MAIN0010                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0320 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0300                          YES
         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=TOP
         L     R6,DXD_FIRST_SYSLIB               FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0330                          YES
         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0350 DS    0H
         LR    R6,R1                             COPY ADDR
         ICM   R1,15,TEMP.SYSLIB_PREV            PREVIOUS LIB
         BZ    MAIN0010
         BCT   R7,MAIN0350                       LOOP
         B     MAIN0010
         DROP  TEMP
* ------------------------------------------------------------------- *
*                                                                     *
*      Replace the existing LIB chain with the updated chain          *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=TERM
         TM    DXD_FLAGS,$DXD_ERROR              ERROR FLAG ON?
         BO    MAIN0700
* ------------------------------------------------------------------- *
*        Free current chain                                           *
* ------------------------------------------------------------------- *
MAIN0580 DS    0H
         ITRACE ID=FREECURR
         ICM   R6,15,COMM_SYSLIB_NEXT
         BZ    MAIN0600
MAIN0590 DS    0H
         LR    R1,R6
         ICM   R6,15,SYSLIB_NEXT
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=SYSLIB_DSECT_L
         LTR   R6,R6
         BNZ   MAIN0590
* ------------------------------------------------------------------- *
*        Replace old chain with new                                   *
* ------------------------------------------------------------------- *
MAIN0600 DS    0H
         ITRACE ID=SWITCH,                                             +
               DATA1=COMM_SYSLIB_NEXT,                                 +
               DATA2=DXD_FIRST_SYSLIB
         MVC   COMM_SYSLIB_NEXT,DXD_FIRST_SYSLIB
         ICM   R6,15,COMM_SYSLIB_NEXT            1ST SYSLIB
         BZ    EXIT0000                          NO SYSLIB'S
         XC    SYSLIB_PREV,SYSLIB_PREV           NO PREV BLOCK
         B     EXIT0000
* ------------------------------------------------------------------- *
*        User has requested exit with error(s) pending                *
* ------------------------------------------------------------------- *
MAIN0700 DS    0H
         ITRACE ID=PURGE
         MVI   COMM_MSG_ID,1
         BAL   R5,MSG0000
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
* ------------------------------------------------------------------- *
*                                                                     *
*        User has requested all changes to be cancelled.              *
*                                                                     *
*        Free any blocks on new chain                                 *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN1000 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS              RESET COMMAND
         ICM   R6,15,DXD_FIRST_SYSLIB            FIRST ON NEW CHAIN
         BZ    EXIT0000
         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB CLEAR FOR NEXT TIME
MAIN1010 DS    0H
         LR    R1,R6                             COPY ADDRESS
         ICM   R6,15,SYSLIB_NEXT                 NEXT LIB
         ITRACE ID=FREELIB,                                            +
               RDATA1=R6,                                              +
               DATA2=SYSLIB_DDNAME
         FREEMAIN RU,                            FREEMAIN THE BLOCK    +
               A=(1),                                                  +
               LV=SYSLIB_DSECT_L
         LTR   R6,R6                             ANOTHER ON CHAIN?
         BNZ   MAIN1010                          YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         ITRACE ID=MSG,                                                +
               DATA1=COMM_MSG_ID
         CLC   SPF_MSG_1,COMM_BLANKS             ALREADY HAVE A MSG?
         BNER  R5                                YES
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R0,DXD_SYSLIB_TABLE_SIZE          ADDR TABLE SIZE
         L     R1,DXD_SYSLIB_TABLE               ADDR TABLE ADDR
         FREEMAIN RU,                            FREEMAIN ADDR TABLE   +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDSLIST)

SYSLIB_ID     DC   CL8'SYSLIB'
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
DISSDATA      DC   CL8'DISSDATA'
DISPLAY       DC   CL8'DISPLAY'
DIS0000       DC   CL8'DIS0000'

ERR01         DC   C'Not a PDS'
ERR01_L       EQU  *-ERR01

              LTORG

MSG01         DS   0C
              DC   AL1($ATTR_INPUT)
MSG01_DSN     DC   CL44' '
              DC   AL1($ATTR_HIGH_YELLOW)
MSG01_MSG     DC   CL30' '
MSG01_L       EQU  *-MSG01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSLIST              DSECT
                      DS  18F

                      DS  A             DUMMY FOR 'PREV' ON CHAIN
DXD_FIRST_SYSLIB      DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_SYSLIB_TABLE      DS  A
DXD_SYSLIB_TABLE_SIZE DS  F

DXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED

DXD_FLAGS             DS  X             FLAGS
$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR
$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              DCBD    DSORG=PO
DCB_L         EQU     *-IHADCB

              COPY    REGEQU
              END     DISSLIST
./ ADD NAME=DISSPFD  0100-08351-08351-1354-00010-00010-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     This is separately LINKEDITed because the contents will         *
*     be modified as the disassembler runs.                           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
       DISSPFD TYPE=CSECT
       END     DISSPFD
./ ADD NAME=DISSPFV  0117-08351-09118-1552-00185-00382-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     This is separately LINKEDITed because the contents will         *
*     be modified as the disassembler runs.                           *
*     re-entrant, refreshable, and re-usable.                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISSPFV  CSECT
DISSPFV  AMODE 31
DISSPFV  RMODE ANY
* ------------------------------------------------------------------- *
*        Dynamic area/scrolling variables                             *
* ------------------------------------------------------------------- *
         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +
               DATA=SPF_LVLINE,      .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +
               DATA=SPF_VWIDTH,      .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +
               DATA=SPF_VCOL,        .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +
               DATA=SPF_VDEPTH,      .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VROW,            DEFINE VARIABLE                   +
               DATA=SPF_VROW,        .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +
               DATA=SPF_ZSCROLLN,    .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VPOS,            DEFINE VARIABLE                   +
               DATA=SPF_CURSOR_POSITION,      NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +
               DATA=SPF_VTYPE,       .. FIELD NAME IN DISSPFD          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +
               DATA=SPF_ZSCROLLA,    .. FIELD NAME IN DISSPFD          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +
               DATA=SPF_ZVERB,       .. FIELD NAME IN DISSPFD          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=VSCR,            DEFINE VARIABLE                   +
               DATA=SPF_VSCR,        .. FIELD NAME IN DISSPFD          +
               LENGTH=4,             .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_NEVER       .. NEVER VDEFINED
         VDEF  NAME=PAREA,           DEFINE VARIABLE                   +
               DATA=SPF_AREA,        .. FIELD NAME IN DISSPFD          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT

* ------------------------------------------------------------------- *
*        Main command                                                 *
* ------------------------------------------------------------------- *
         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +
               DATA=SPF_ZCMD,        .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT

* ------------------------------------------------------------------- *
*        Disassembler variables                                       *
* ------------------------------------------------------------------- *
         VDEF  NAME=CDSN,            DEFINE VARIABLE                   +
               DATA=SPF_CONF_DSN,    .. FIELD NAME IN DISSPFD          +
               LENGTH=44,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
         VDEF  NAME=CMEM,            DEFINE VARIABLE                   +
               DATA=SPF_CONF_MEMBER, .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
         VDEF  NAME=CVOL,            DEFINE VARIABLE                   +
               DATA=SPF_CONF_VOLSER, .. FIELD NAME IN DISSPFD          +
               LENGTH=06,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT
         VDEF  NAME=LDSN,            DEFINE VARIABLE                   +
               DATA=SPF_LMOD_DSN,    .. FIELD NAME IN DISSPFD          +
               LENGTH=44,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
         VDEF  NAME=LMOD,            DEFINE VARIABLE                   +
               DATA=SPF_LMOD,        .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
         VDEF  NAME=LVOL,            DEFINE VARIABLE                   +
               DATA=SPF_LMOD_VOLSER, .. FIELD NAME IN DISSPFD          +
               LENGTH=06,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT
         VDEF  NAME=LCSECT,          DEFINE VARIABLE                   +
               DATA=SPF_CSECT,       .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
         VDEF  NAME=LLEN,            DEFINE VARIABLE                   +
               DATA=SPF_CSECT_LENGTH,   FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PDD,             DEFINE VARIABLE                   +
               DATA=SPF_DD,          .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR
         VDEF  NAME=PYN,             DEFINE VARIABLE                   +
               DATA=SPF_YES_OR_NO,   .. FIELD NAME IN DISSPFD          +
               LENGTH=03,            .. LENGTH                         +
               FORM=CHAR
         VDEF  NAME=F,               DEFINE VARIABLE                   +
               DATA=SPF_FUNCTION,    .. FIELD NAME IN DISSPFD          +
               LENGTH=01,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=DDID,            DEFINE VARIABLE                   +
               DATA=SPF_DDID,        .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PRFX,            DEFINE VARIABLE                   +
               DATA=SPF_PREFIX,      .. FIELD NAME IN DISSPFD          +
               LENGTH=04,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PR,              DEFINE VARIABLE                   +
               DATA=SPF_REGISTER,    .. FIELD NAME IN DISSPFD          +
               LENGTH=03,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PBEGIN,          DEFINE VARIABLE                   +
               DATA=SPF_BEGIN,       .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PEND,            DEFINE VARIABLE                   +
               DATA=SPF_END,         .. FIELD NAME IN DISSPFD          +
               LENGTH=08,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=ODSN,            DEFINE VARIABLE                   +
               DATA=SPF_OUTPUT_DSN,  .. FIELD NAME IN DISSPFD          +
               LENGTH=44,            .. LENGTH                         +
               FORM=CHAR,            .. FORMAT                         +
               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         VDEF  NAME=PMSG1,           DEFINE VARIABLE                   +
               DATA=SPF_MSG_1,       .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSG2,           DEFINE VARIABLE                   +
               DATA=SPF_MSG_2,       .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSG3,           DEFINE VARIABLE                   +
               DATA=SPF_MSG_3,       .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSG4,           DEFINE VARIABLE                   +
               DATA=SPF_MSG_4,       .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSG5,           DEFINE VARIABLE                   +
               DATA=SPF_MSG_5,       .. FIELD NAME IN DISSPFD          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  VARDSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISSPFD TYPE=DSECT
         END   DISSPFV
./ ADD NAME=DISTDBUG 0102-09119-09198-0814-00375-00375-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISTDBUG                                             *
*                                                                    *
*  Function:                                                         *
*                                                                    *
*   TSO mode debug                                                   *
*                                                                    *
*--------------------------------------------------------------------*
DISTDBUG CSECT
DISTDBUG AMODE 31
DISTDBUG RMODE ANY
         USING DISTDBUG,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISTDBUG'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDTDBUG,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD                   DISSPFD ADDR
         USING DISSPFD,R9                        DEFINE BASE
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0000 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS
         L     R1,COMM_VDATA_SIZE                VDATA SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         L     R8,COMM_VDATA_ADDR                VDATA ADDR
         L     R7,SPF_VDEPTH
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG01_L,R8),MSG01
         USING MSG01,R8                          DEFINE BASE
         UNPK  DXD_WORK(9),COMM_TRACE_1STX(5)    UNPACK
         MVC   MSG01_1STX,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG01_1STX,HEXCHAR                TRANSLATE
         UNPK  DXD_WORK(9),COMM_TRACE_LAST(5)    UNPACK
         MVC   MSG01_LAST,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG01_LAST,HEXCHAR                TRANSLATE
         UNPK  DXD_WORK(9),COMM_TRACE_CURRENT(5) UNPACK
         MVC   MSG01_CURRENT,DXD_WORK            COPY UNPACKED ADDR
         TR    MSG01_CURRENT,HEXCHAR             TRANSLATE
         UNPK  DXD_WORK(3),COMM_TRACE_CURRENT(2) UNPACK
         MVC   MSG01_FLAGS,DXD_WORK              COPY UNPACKED FLAGS
         TR    MSG01_FLAGS,HEXCHAR               TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG02_L,R8),MSG02
         USING MSG02,R8                          DEFINE BASE
         MVC   MSG02_NAME,COMM_CSECT             CSECT NAME
         UNPK  DXD_WORK(9),COMM_CSECT_EP(5)      UNPACK ENTRY POINT
         MVC   MSG02_EP,DXD_WORK
         TR    MSG02_EP,HEXCHAR                  TRANSLATE
         UNPK  DXD_WORK(9),COMM_CSECT_TEXT(5)    UNPACK TEXT ADDR
         MVC   MSG02_TEXT,DXD_WORK
         TR    MSG02_TEXT,HEXCHAR                TRANSLATE
         UNPK  DXD_WORK(9),COMM_CSECT_LENGTH(5)  UNPACK LENGTH
         MVC   MSG02_LENGTH,DXD_WORK
         TR    MSG02_LENGTH,HEXCHAR              TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG03_L,R8),MSG03
         USING MSG03,R8                          DEFINE BASE
         MVC   MSG03_NAME,COMM_OPCODE_TABLE_NAME
         UNPK  DXD_WORK(9),COMM_OPCODE_TABLE_ADDR
         MVC   MSG03_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG03_ADDR,HEXCHAR                TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG04_L,R8),MSG04
         USING MSG04,R8                          DEFINE BASE
         UNPK  DXD_WORK(9),COMM_NAME_NEXT(5)     UNPACK ADDR
         MVC   MSG04_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG04_ADDR,HEXCHAR                TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG05_L,R8),MSG05
         USING MSG05,R8                          DEFINE BASE
         UNPK  DXD_WORK(9),COMM_ESD_NEXT(5)      UNPACK ADDR
         MVC   MSG05_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG05_ADDR,HEXCHAR                TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG06_L,R8),MSG06
         USING MSG06,R8                          DEFINE BASE
         UNPK  DXD_WORK(9),COMM_RLD_AREA_NEXT(5) UNPACK ADDR
         MVC   MSG06_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG06_ADDR,HEXCHAR                TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         MVC   0(MSG07_L,R8),MSG07
         USING MSG07,R8                          DEFINE BASE
         UNPK  DXD_WORK(9),COMM_DSECT_NEXT(5)    UNPACK ADDR
         MVC   MSG07_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG07_ADDR,HEXCHAR                TRANSLATE
         DROP  R8
         BAL   R6,MAIN0100
         B     MAIN0110
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MAIN0100 DS    0H
         ITRACE ID=NEXT,                                               +
               RDATA1=R8,                                              +
               RDATA2=R7
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCTR  R7,R6
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
MAIN0110 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         L     R15,V_DISDISP                     DISDISP ENTRY POINT
         BALR  R14,R15                           DISPLAY PANEL
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R2,R15                            RC = ZERO?
         BNZ   EXIT0000                          NO
*---------------------------------------------------------------------*
*        Anything for MSG01                                           *
*---------------------------------------------------------------------*
         L     R8,COMM_VDATA_ADDR                VDATA ADDRESS

*---------------------------------------------------------------------*
*        Anything for MSG02                                           *
*---------------------------------------------------------------------*
         A     R8,SPF_VWIDTH

*---------------------------------------------------------------------*
*        Anything for MSG03                                           *
*---------------------------------------------------------------------*
         A     R8,SPF_VWIDTH

*---------------------------------------------------------------------*
*        Anything for MSG04                                           *
*---------------------------------------------------------------------*
         A     R8,SPF_VWIDTH

*---------------------------------------------------------------------*
*        Anything for MSG05                                           *
*---------------------------------------------------------------------*
         A     R8,SPF_VWIDTH

*---------------------------------------------------------------------*
*        Anything for MSG06                                           *
*---------------------------------------------------------------------*
         A     R8,SPF_VWIDTH
         USING MSG06,R8
         CLI   MSG06_SELECT,C' '                 SELECTED?
         BE    MAIN0120                          NO
         ITRACE ID=DISP_RLD
         MVI   MSG06_SELECT,C' '                 RESET SELECT
         MVC   SPF_MSG_3(RLD_MSG_L),RLD_MSG
         L     R1,COMM_RLD_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
         B     MAIN0000                          REBUILD DISPLAY
         DROP  R8
*---------------------------------------------------------------------*
*        Anything for MSG07                                           *
*---------------------------------------------------------------------*
MAIN0120 DS    0H
         A     R8,SPF_VWIDTH
         USING MSG07,R8
         CLI   MSG07_SELECT,C' '                 SELECTED?
         BE    MAIN0110                          NO
         ITRACE ID=DISPDSCT
         MVI   MSG07_SELECT,C' '                 RESET SELECT
         MVC   SPF_MSG_3(DSECT1_MSG_L),DSECT1_MSG
         L     R1,COMM_DSECT_NEXT
         L     R15,V_DISDDSCT
         BALR  R14,R15
         B     MAIN0000                          REBUILD DISPLAY
         DROP  R8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDTDBUG)

PANEL_NAME    DC   CL8'DISTDBUG'

HEXCHAR       EQU  *-C'0'
              DC   C'0123456789ABCDEF'

              LTORG


MSG01         DS   0C
              DC   AL1($ATTR_NORMAL)
              DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'TRACE'
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  1STX '
              DC   AL1($ATTR_NORMAL)
MSG01_1STX    DC   CL08' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  LAST '
              DC   AL1($ATTR_NORMAL)
MSG01_LAST    DC   CL8' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  CURR '
              DC   AL1($ATTR_NORMAL)
MSG01_CURRENT DC   CL8' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  FLAGS '
              DC   AL1($ATTR_NORMAL)
MSG01_FLAGS   DC   CL2' '
MSG01_L       EQU  *-MSG01

MSG02         DS   0C
              DC   AL1($ATTR_NORMAL)
              DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'CSECT'
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  NAME '
              DC   AL1($ATTR_NORMAL)
MSG02_NAME    DC   CL08' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  EP   '
              DC   AL1($ATTR_NORMAL)
MSG02_EP      DC   CL8' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  TEXT '
              DC   AL1($ATTR_NORMAL)
MSG02_TEXT    DC   CL8' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  LENGTH'
              DC   AL1($ATTR_NORMAL)
MSG02_LENGTH  DC   CL8' '
MSG02_L       EQU  *-MSG02

MSG03         DS   0C
              DC   AL1($ATTR_NORMAL)
              DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'OPCODE'
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  NAME '
              DC   AL1($ATTR_NORMAL)
MSG03_NAME    DC   CL08' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  ADDR '
              DC   AL1($ATTR_NORMAL)
MSG03_ADDR    DC   CL8' '
MSG03_L       EQU  *-MSG03

MSG04         DS   0C
              DC   AL1($ATTR_INPUT)
              DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'NAMES '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  ADDR '
              DC   AL1($ATTR_NORMAL)
MSG04_ADDR    DC   CL8' '
MSG04_L       EQU  *-MSG04

MSG05         DS   0C
              DC   AL1($ATTR_INPUT)
              DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'ESD   '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  ADDR '
              DC   AL1($ATTR_NORMAL)
MSG05_ADDR    DC   CL8' '
MSG05_L       EQU  *-MSG05

MSG06         DS   0C
              DC   AL1($ATTR_INPUT)
MSG06_SELECT  DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'RLD   '
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  ADDR '
              DC   AL1($ATTR_NORMAL)
MSG06_ADDR    DC   CL8' '
MSG06_L       EQU  *-MSG06

MSG07         DS   0C
              DC   AL1($ATTR_INPUT)
MSG07_SELECT  DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   CL08'DSECT'
              DC   AL1($ATTR_HIGH_TURQUOISE)
              DC   C'  ADDR '
              DC   AL1($ATTR_NORMAL)
MSG07_ADDR    DC   CL8' '
MSG07_L       EQU  *-MSG07

RLD_MSG       DS   0C
              DC   C'RLD items'
RLD_MSG_L     EQU  *-RLD_MSG

DSECT1_MSG    DS   0C
              DC   C'DSECT1 chain'
DSECT1_MSG_L  EQU  *-DSECT1_MSG

DSECT2_MSG    DS   0C
              DC   C'DSECT2 chain'
DSECT2_MSG_L  EQU  *-DSECT2_MSG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDTDBUG             DSECT
                     DS   18F

DXD_WORK      DS     CL9
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    DISASMDA

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
              COPY    ATTRS
              COPY    REGEQU
              END     DISTDBUG
./ ADD NAME=DISTEXT  0101-09119-09198-0814-00182-00182-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISTEXT                                              *
*                                                                    *
*  Function:                                                         *
*   LOAD the requested CSECT's text                                  *
*                                                                    *
*   DISBIND has already established a dialog                         *
*   COMM_CSECT_LENGTH has been set by DISNAME                        *
*                                                                    *
*--------------------------------------------------------------------*
DISTEXT  CSECT
DISTEXT  AMODE 31
DISTEXT  RMODE ANY
         USING DISTEXT,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R11,R15               SET BASE REG
         B     MOD0000               SKIP EYECATCHER
         DC    CL8'DISTEXT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS  WORK AREA
         A     R15,DXD_START         PLUS DISP TO OUR PORTION
         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS
         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S
         LR    R13,R15               SET SAVE AREA ADDRESS
         USING DXDTEXT,R13
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*        Obtain and initialize buffer                                 *
* ------------------------------------------------------------------- *
         ITRACE ID=GET_BUFF
         IEWBUFF FUNC=GETBUF,                                          +
               TYPE=TEXT
         ST    R8,DXD_BUFFER
         ITRACE ID=INITBUFF
         IEWBUFF FUNC=INITBUF,                                         +
               TYPE=TEXT
         ITRACE ID=BUFF,                                               +
               RDATA1=R8,                                              +
               RDATA2=R7
         L     R0,COMM_CSECT_LENGTH      CSECT'S LENGTH
         GETMAIN RU,                     GETMAIN AREA FOR TEXT         +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,COMM_CSECT_TEXT        SAVE ADDRESS
         ST    R1,DXD_TEXT_ADDR          SAVE ADDRESS
         XC    DXD_TEXT_READ,DXD_TEXT_READ
         A     R1,COMM_CSECT_LENGTH      ADD LENGTH
         BCTR  R1,0                      RELATIVE TO ZERO
         ST    R1,COMM_CSECT_TEXT_END    TEXT ENDING ADDRESS
         ITRACE ID=TEXT,                                               +
               DATA1=COMM_CSECT_TEXT,                                  +
               DATA2=COMM_CSECT_LENGTH
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
TEXT0000 DS    0H
         ITRACE ID=GET_TEXT
         XC    DXD_CURSOR,DXD_CURSOR
         L     R8,DXD_BUFFER
         IEWBIND FUNC=GETD,                                            +
               VERSION=5,                                              +
               WORKMOD=COMM_DIALOG_WORKMOD,                            +
               CLASS=B_TEXT,                                           +
               SECTION=COMM_CSECT_NAME_LENGTH,                         +
               COUNT=COMM_CSECT_LENGTH,                                +
               AREA=IEWBTXT,                                           +
               CURSOR=DXD_CURSOR,                                      +
               RETCODE=DXD_RETURN_CODE,                                +
               RSNCODE=DXD_REASON_CODE,                                +
               MF=(E,DXD_IEWBIND,COMPLETE)
         ITRACE ID=TEXT_RC,                                            +
               DATA1=DXD_RETURN_CODE,                                  +
               DATA2=DXD_REASON_CODE
         CLC   DXD_RETURN_CODE,F8
         BH    ERR0010
         BE    ERR0020
         CLC   DXD_RETURN_CODE,F4
         BL    TEXT0010
         CLC   DXD_REASON_CODE,X_83000800
         BE    TEXT0010
         CLC   DXD_REASON_CODE,X_83000801
         BE    EXIT0000
TEXT0010 DS    0H
         L     R1,DXD_TEXT_READ
         A     R1,TXTH_ENTRY_COUNT
         C     R1,COMM_CSECT_LENGTH
         BNH   TEXT0020
         L     R1,COMM_CSECT_LENGTH
         S     R1,DXD_TEXT_READ
TEXT0020 DS    0H
         LR    R2,R1
         L     R0,DXD_TEXT_ADDR
         LA    R14,TXTH_END
         LR    R15,R0
         MVCL  R0,R14
         L     R0,DXD_TEXT_ADDR
         A     R0,TXTH_ENTRY_COUNT
         ST    R0,DXD_TEXT_ADDR
         L     R1,DXD_TEXT_READ
         AR    R1,R2
         ST    R1,DXD_TEXT_READ
         OC    DXD_REASON_CODE,DXD_REASON_CODE
         BZ    TEXT0000
         L     R8,DXD_BUFFER
         IEWBUFF FUNC=FREEBUF,                                         +
               TYPE=TEXT
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680
         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690
         BR    R14                   RETURN TO CALLER                   ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
         DC    H'0'
ERR0020  DS    0H
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDTEXT)
F4            DC   F'4'
F8            DC   F'8'

B_TEXT        DC   XL2'6',C'B_TEXT'
X_83000800    DC   X'83000800'
X_83000801    DC   X'83000801'

         IEWBUFF FUNC=MAPBUF,                                          +
               TYPE=TEXT,                                              +
               HEADREG=R8,                                             +
               ENTRYREG=R7,                                            +
               SIZE=32768,                                             +
               VERSION=5

              IEWBIND MF=(L,IEWBIND_I)
IEWBIND_L     EQU  *-IEWBIND_I

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDTEXT           DSECT
                  DS   18F
DXD_CSECT         DS   CL8
DXD_RETURN_CODE   DS   F
DXD_REASON_CODE   DS   F

DXD_BUFFER        DS   A
DXD_TEXT_ADDR     DS   A
DXD_TEXT_READ     DS   A

DXD_CURSOR        DS   F

DXD_DISP          DS   F


DXD_IEWBIND       DS   0F,(IEWBIND_L)X
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM  TYPE=DSECT

                  IFGACB   AM=VSAM
ACB_L             EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  COPY     DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY REGEQU
         END  DISTEXT
./ ADD NAME=DISTIOT  0103-09119-09198-1534-00208-00206-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*          Determine DD's present                                    *
*                                                                    *
*--------------------------------------------------------------------*
DISTIOT  CSECT
DISTIOT  AMODE 31
DISTIOT  RMODE ANY
         USING DISCOMM,R12
         USING DISTIOT,R11
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R11,R15               SET BASE REG
         B     INIT0000              SKIP EYECATCHER
MODID    DC    CL8'DISTIOT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
INIT0000 DS    0H
         L     R15,COMM_DXD_ADDRESS   WORK AREA
         A     R15,DXD_START
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         USING DXDTIOT,R13
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*         Scan TIOT                                                   *
* ------------------------------------------------------------------- *
         USING PSA,R0                      DEFINE BASE
         L     R1,PSATNEW                  MY TCB'S ADDRESS
         USING TCB,R1                      DEFINE TCB BASE
         L     R2,TCBTIO                   TIOT ADDRESS
         USING TIOT1,R2                    DEFINE BASE
         LA    R3,TIOENTRY                 FIRST TIOT ENTRY
         USING TIOENTRY,R3                 DEFINE BASE
         SR    R4,R4                       CLEAR FOR LENGTHS
TIOT0010 DS    0H
         ICM   R4,1,TIOELNGH               LENGTH OF THIS ENTRY
         BZ    EXIT0000                    END OF TABLE
         ITRACE ID=DD,                                                 +
               DATA1=TIOEDDNM
         CLC   TIOEDDNM,DISIN_DD           DISIN DD?
         BE    TIOT0030                    YES
         CLC   TIOEDDNM,DISPRINT_DD        DISPRINT DD?
         BE    TIOT0040                    YES
         CLC   TIOEDDNM,DISMOD_DD          DISMOD DD?
         BE    TIOT0050                    YES
         CLC   TIOEDDNM,DISPUNCH_DD        DISPUNCH DD?
         BE    TIOT0060                    YES
         CLC   TIOEDDNM,DISDEBUG_DD        DISDEBUG DD?
         BE    TIOT0070                    YES
         CLC   TIOEDDNM,SYSIN_DD           SYSIN DD?
         BE    TIOT0080                    YES
         CLC   TIOEDDNM,SYSPRINT_DD        SYSPRINT DD?
         BE    TIOT0090                    YES
         CLC   TIOEDDNM,DISTRACE_DD        DISTRACE DD?
         BE    TIOT0100                    YES
         CLC   DSECT_DD,TIOEDDNM           DSECT DD?
         BE    TIOT0110                    YES
TIOT0020 DS    0H
         AR    R3,R4                       NEXT TIOT ENTRY
         B     TIOT0010                    LOOP
TIOT0030 DS    0H
         ITRACE ID=DISIN                   DISIN DD FOUND
         OI    COMM_DDS,$DISIN_DD          INDICATE DISIN IS PRESENT
         B     TIOT0020
TIOT0040 DS    0H
         ITRACE ID=DISPRINT                DISPRINT DD FOUND
         OI    COMM_DDS,$DISPRINT_DD       INDICATE DISPRINT IS PRESENT
         B     TIOT0020
TIOT0050 DS    0H
         ITRACE ID=DISMOD                  DISMOD DD FOUND
         OI    COMM_DDS,$DISMOD_DD         INDICATE DISMOD IS PRESENT
         B     TIOT0020
TIOT0060 DS    0H
         ITRACE ID=DISPUNCH                DISPUNCH DD FOUND
         OI    COMM_DDS,$DISPUNCH_DD       INDICATE DISPUNCH IS PRESENT
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO TSO MODE?
         BNE   TIOT0020                    NO.. SKIP SPF STUFF
         SR    R1,R1
         ICM   R1,7,TIOEJFCB               JFCB TOKEN
         LA    R1,16(,R1)                  JFCB ADDRESS
         USING JFCB,R1
         MVC   SPF_OUTPUT_DSN,JFCBDSNM     COPY DSN
         B     TIOT0020
TIOT0070 DS    0H
         ITRACE ID=DISDEBUG                DISDEBUG DD FOUND
         OI    COMM_DDS,$DISDEBUG_DD       INDICATE DISDEBUG IS PRESENT
         B     TIOT0020
TIOT0080 DS    0H
         ITRACE ID=SYSIN                   SYSIN DD FOUND
         OI    COMM_ASSEM_DDS,$SYSIN_DD    INDICATE SYSIN IS PRESENT
         B     TIOT0020
TIOT0090 DS    0H
         ITRACE ID=SYSPRINT                SYSPRINT DD FOUND
         OI    COMM_ASSEM_DDS,$SYSPRINT_DD INDICATE SYSPRINT IS PRESENT
         B     TIOT0020
TIOT0100 DS    0H
         ITRACE ID=DISTRACE                DISTRACE DD FOUND
         OI    COMM_DDS,$DISTRACE_DD       INDICATE DISTRACE IS PRESENT
         B     TIOT0020
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
TIOT0110 DS    0H
         ITRACE ID=DSECT_DD,                                           +
               DATA1=TIOEDDNM
         GETMAIN RU,                                                   +
               LV=KSDS_DSECT_L,                                        +
               LOC=BELOW
         LR    R6,R1                       COPY ADDRESS
         USING KSDS_DSECT,R6
         LA    R1,COMM_KSDS_NEXT           1ST KSDS BLOCK POINTER
TIOT0120 DS    0H
         ICM   R2,15,0(R1)                 AT END OF CHAIN?
         BZ    TIOT0130                    YES
         LR    R1,R2                       COPY ADDRESS
         B     TIOT0120                    LOOP
TIOT0130 DS    0H
         ST    R6,0(,R1)                   ADD NEW BLOCK TO CHAIN
         XC    0(KSDS_DSECT_L,R6),0(R6)
         MVC   KSDS_EYE,KSDS_ID
         MVC   KSDS_DDNAME,TIOEDDNM
         MVC   KSDS_ACB(ACB_L),ACB_I
         USING IFGACB,KSDS_ACB
         MVC   ACBDDNM,TIOEDDNM            SET DD NAME
         SR    R1,R1
         ICM   R1,7,TIOEJFCB               JFCB TOKEN
         LA    R1,16(,R1)                  JFCB ADDRESS
         USING JFCB,R1
         MVC   KSDS_DSNAME,JFCBDSNM        COPY DSN
         B     TIOT0020
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT info is recorded in VSAM KSDSes.                       *
*        I want to allow for the use of multiple sets of              *
*        pre-processed DSECTS.                                        *
*        VSAM KSDSes cannot be concatenated.                          *
*        So.. you may provide DDs that begin with the string "DSECT". *
*                                                                     *
*        For example:                                                 *
*           //DSECTIBM    DD  DSN=.....IBM.DSECTS,DISP=SHR            *
*           //DSECTU1     DD  DSN=.....USER.DSECTS1,DISP=SHR          *
*           //DSECTU2     DD  DSN=.....USER.DSECTS2,DISP=SHR          *
*                                                                     *
*                                                                     *
*        The disassembler searches the ASM,START/ASM,END source       *
*        for a DSECT if provided, then the DSECT DDs in the order     *
*        they occur in the JCL.                                       *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         L     R13,4(,R13)                 RESTORE R13
         LM    R14,R12,12(R13)             RESTORE OTHER REGISTERS      ASE01680
         SR    R15,R15                     SET GOOD RETURN CODE         ASE01690
         BR    R14                         RETURN TO CALLER             ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC    Q(DXDTIOT)
ACB_I    ACB   AM=VSAM,                                                +
               DDNAME=ANYDD,                                           +
               MACRF=(KEY,DIR,SEQ)
DISIN_DD       DC    CL8'DISIN'
DISPRINT_DD    DC    CL8'DISPRINT'
DISMOD_DD      DC    CL8'DISMOD'
DISPUNCH_DD    DC    CL8'DISPUNCH'
DISDEBUG_DD    DC    CL8'DISDEBUG'
DSECT_DD       DC    C'DSECT'
SYSIN_DD       DC    CL8'SYSIN'
SYSPRINT_DD    DC    CL8'SYSPRINT'
DISTRACE_DD    DC    CL8'DISTRACE'
KSDS_ID        DC    CL8'KSDSBLOK'
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXDTIOT        DSECT
               DS    18F             REGISTER SAVE AREA
DXD_CSECT      DS    CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA
               DISSPFD  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY     REGEQU
               IHAPSA   LIST=NO
               IKJTCB   LIST=NO
               IEFTIOT1

JFCB           DSECT
               IEFJFCBN

               IFGACB   AM=VSAM
ACB_L    EQU   *-IFGACB
               END      DISTIOT
./ ADD NAME=DISTLSTB 0101-09118-09198-0816-00291-00291-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISTLSTB                                              *
*                                                                     *
*  Function:                                                          *
*   Display the module text for batch mode                            *
*                                                                     *
* ------------------------------------------------------------------- *
DISTLSTB CSECT
DISTLSTB AMODE 31
DISTLSTB RMODE ANY
         USING DISTLSTB,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISTLSTB'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDTLSTB,R13
         USING IHADCB,DISTEMP_DCB
         USING PR_LINE,PRINT_DATA
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         MVC   COMM_SUBHEAD,COMM_BLANKS
         MVC   COMM_SUBHEAD(HEADING_L),HEADING
         MVC   COMM_SUBHEAD+(HEADING_CSECT-HEADING)(L'HEADING_CSECT),CO+
               MM_CSECT
         UNPK  COMM_SUBHEAD+(HEADING_LENGTH-HEADING)(9),COMM_CSECT_LENG+
               TH(5)
         TR    COMM_SUBHEAD+(HEADING_LENGTH-HEADING)(8),COMM_HEXCHAR
         MVI   COMM_SUBHEAD+(HEADING_LENGTH-HEADING)+8,C' '
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=BATCH
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
         MVI   PRINT_COMMAND,$PRINT_HEADING
         L     R15,V_DISPRINT
         BALR  R14,R15
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
LIST0100 DS    0H
         XC    DXD_DISP,DXD_DISP
         L     R8,COMM_CSECT_TEXT             TEXT
LIST0110 DS    0H
         MVC   PRINT_DATA,COMM_BLANKS
         L     R7,COMM_CSECT_LENGTH           CSECT LENGTH
         S     R7,DXD_DISP                    LENGTH REMAINING
         CH    R7,H32                         MORE THAN 32?
         BNH   LIST0120                       NO
         LH    R7,H32                         LIMIT TO 32
LIST0120 DS    0H
         BCTR  R7,0                           CONVERT TO INSTR LENGTH
         MVI   PR_ASTERISK_1,C'*'
         MVI   PR_ASTERISK_2,C'*'
         MVC   DXD_HEX(DXD_HEX_L),COMM_BLANKS
         XC    COMM_INFO_01(32),COMM_INFO_01  INITIALIZE WORK AREA
         UNPK  PR_DISP(9),DXD_DISP(5)         UNPACK DISP
         TR    PR_DISP,COMM_HEXCHAR           TRANSLATE
         MVI   PR_DISP+8,C' '
         EX    R7,MVC_01                      COPY TEXT
         EX    R7,MVC_02                      COPY TEXT
         EX    R7,TR_01                       TRANSLATE UNPRINTABLES
         UNPK  COMM_INFO_02(9),COMM_INFO_01+00(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_01,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+04(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_02,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+08(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_03,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+12(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_04,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+16(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_05,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+20(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_06,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+24(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_07,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+28(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_08,COMM_INFO_02
         LA    R1,LENGTH_TABLE(R7)
         SR    R2,R2
         IC    R2,0(R1)
         EX    R2,MVC_03
         ITRACE ID=PUT,                                                +
               DATA1=PR_LINE,                                          +
               DATA2=PR_LINE+8
         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                        PRINT
         LA    R8,32(,R8)                     UPDATE TEXT ADDRESS
         L     R7,DXD_DISP
         LA    R7,32(,R7)
         ST    R7,DXD_DISP
         C     R7,COMM_CSECT_LENGTH
         BL    LIST0110
         MVC   COMM_SUBHEAD,COMM_BLANKS       CLEAR SUB HEADING
         MVI   PRINT_COMMAND,$PRINT_HEADING   SET COMMAND
         L     R15,V_DISPRINT
         BALR  R14,R15                        FORCE HEADING
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DEBUG000 DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?
         BER   R10                            YES
         L     R15,V_DISDEBUG
         BALR  R14,R15                        CALL DISDEBUG
         BR    R10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MVC_01   MVC   PR_CHAR(0),0(R8)               COPY TEXT
MVC_02   MVC   COMM_INFO_01(0),0(R8)          COPY TEXT
MVC_03   MVC   PR_HEX(0),DXD_HEX              COPY HEX
TR_01    TR    PR_CHAR(0),PRINTABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START         DC   Q(DXDTLSTB)

H32               DC   H'32'

BROWSE            DC   CL8'BROWSE'
DDID              DC   CL8'DDID'
DIS0000           DC   CL8'DIS0000'
DISBROWS          DC   CL8'DISBROWS'
LMINIT            DC   CL8'LMINIT'

HEADING           DC   0C
                  DC   C'0'
                  DC   C'TEXT of CSECT '
HEADING_CSECT     DC   CL8' '
                  DC   C'  length '
HEADING_LENGTH    DC   CL8' '
                  DC   C' '
HEADING_L         EQU  *-HEADING

MSG01             DS   0C
                  DC   C'DISTLSTB01I  Entering DISTLSTB'
MSG01_L           EQU  *-MSG01

MSG02             DS   0C
                  DC   C'DISTLSTB02I  Exiting DISTLSTB'
MSG02_L           EQU  *-MSG02

LENGTH_TABLE      DS   0C
                  DC   AL1(001)       1
                  DC   AL1(003)       2
                  DC   AL1(005)       3
                  DC   AL1(007)       4
                  DC   AL1(010)       5
                  DC   AL1(012)       6
                  DC   AL1(014)       7
                  DC   AL1(016)       8
                  DC   AL1(019)       9
                  DC   AL1(021)      10
                  DC   AL1(023)      11
                  DC   AL1(025)      12
                  DC   AL1(028)      13
                  DC   AL1(030)      14
                  DC   AL1(032)      15
                  DC   AL1(034)      16
                  DC   AL1(041)      17
                  DC   AL1(043)      18
                  DC   AL1(045)      19
                  DC   AL1(047)      20
                  DC   AL1(050)      21
                  DC   AL1(052)      22
                  DC   AL1(054)      23
                  DC   AL1(056)      24
                  DC   AL1(059)      25
                  DC   AL1(061)      26
                  DC   AL1(063)      27
                  DC   AL1(065)      28
                  DC   AL1(068)      29
                  DC   AL1(070)      30
                  DC   AL1(072)      31
                  DC   AL1(074)      32

PRINTABLE         DC   256C'.'
                  ORG  PRINTABLE+X'40'
                  DC   C' '
                  ORG  PRINTABLE+X'4A'
                  DC   C'¢.<(+¦'
                  DC   X'50'
                  ORG  PRINTABLE+X'5A'
                  DC   C'!$*);¬-/'
                  ORG  PRINTABLE+X'6B'
                  DC   C',%_>?'
                  ORG  PRINTABLE+X'7A'
                  DC   C':#@'
                  DC   X'7D'
                  DC   C'="'
                  ORG  PRINTABLE+X'C0'
                  DC   C'{ABCDEFGHI'
                  ORG  PRINTABLE+X'D0'
                  DC   C'}JKLMNOPQR'
                  ORG  PRINTABLE+X'E2'
                  DC   C'STUVWXYZ'
                  ORG  PRINTABLE+X'F0'
                  DC   C'0123456789'
                  ORG  PRINTABLE+256
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTLSTB          DSECT
                  DS   18F
DXD_CSECT         DS   CL8

DXD_DD            DS   CL8

DXD_DISP          DS   F

DXD_HEX           DS   0C
DXD_HEX_01        DS   CL8
                  DS   X
DXD_HEX_02        DS   CL8
                  DS   X
DXD_HEX_03        DS   CL8
                  DS   X
DXD_HEX_04        DS   CL8
                  DS   CL5
DXD_HEX_05        DS   CL8
                  DS   X
DXD_HEX_06        DS   CL8
                  DS   X
DXD_HEX_07        DS   CL8
                  DS   X
DXD_HEX_08        DS   CL8
DXD_HEX_L         EQU  *-DXD_HEX
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PR_LINE           DSECT
PR_DISP           DS   CL8
                  DS   C
PR_HEX            DS   CL75
                  DS   C
PR_ASTERISK_1     DS   C
PR_CHAR           DS   CL32
PR_ASTERISK_2     DS   C
                  DS   CL22
PR_LINE_L         EQU  *-PR_LINE

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  DISCOMM  TYPE=DSECT
                  COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  DCBD     DSORG=PS

                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY REGEQU
                 END  DISTLSTB
./ ADD NAME=DISTLSTT 0105-09118-09198-0817-00305-00346-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISTLSTT                                              *
*                                                                     *
*  Function:                                                          *
*   Display the module text for TSO mode                              *
*                                                                     *
* ------------------------------------------------------------------- *
DISTLSTT CSECT
DISTLSTT AMODE 31
DISTLSTT RMODE ANY
         USING DISTLSTT,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISTLSTT'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXTTLSTT,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING V_DETAIL,R8
         XC    DXD_START_DISP,DXD_START_DISP
* ------------------------------------------------------------------- *
*        Build text                                                   *
* ------------------------------------------------------------------- *
LIST0100 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR             VDATA ADDR
         L     R1,COMM_VDATA_SIZE             VDATA SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE VDATA
         L     R8,COMM_VDATA_ADDR             VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
         MVC   DXD_DISP,DXD_START_DISP        COPY STARTING DISP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
LIST0110 DS    0H
         MVI   V_ATTR1,$ATTR_HIGH             SET ATTRIBUTE
         MVI   V_ATTR2,$ATTR_NORMAL           SET ATTRIBUTE
         MVI   V_ATTR3,$ATTR_HIGH             SET ATTRIBUTE
         MVI   V_ATTR4,$ATTR_NORMAL           SET ATTRIBUTE
         MVI   V_ATTR5,$ATTR_HIGH             SET ATTRIBUTE
         MVI   V_ASTERISK_1,C'*'
         MVI   V_ASTERISK_2,C'*'
         L     R6,COMM_CSECT_TEXT             TEXT
         A     R6,DXD_DISP                    PLUS DISP
         L     R2,COMM_CSECT_LENGTH           CSECT LENGTH
         S     R2,DXD_DISP                    LENGTH REMAINING
         CH    R2,H16                         MORE THAN 16?
         BNH   LIST0120                       NO
         LH    R2,H16                         LIMIT TO 16
LIST0120 DS    0H
         BCTR  R2,0                           CONVERT TO INSTR LENGTH
         MVC   DXD_HEX(DXD_HEX_L),COMM_BLANKS
         XC    COMM_INFO_01(32),COMM_INFO_01  INITIALIZE WORK AREA
         UNPK  V_DISP(9),DXD_DISP(5)          UNPACK DISP
         TR    V_DISP,COMM_HEXCHAR            TRANSLATE
         MVI   V_DISP+8,C' '
         EX    R2,MVC_01                      COPY TEXT
         EX    R2,MVC_02                      COPY TEXT
         EX    R2,TR_01                       TRANSLATE UNPRINTABLES
         UNPK  COMM_INFO_02(9),COMM_INFO_01+00(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_01,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+04(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_02,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+08(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_03,COMM_INFO_02
         UNPK  COMM_INFO_02(9),COMM_INFO_01+12(5)
         TR    COMM_INFO_02(8),COMM_HEXCHAR
         MVC   DXD_HEX_04,COMM_INFO_02
         LA    R1,LENGTH_TABLE(R2)
         SR    R3,R3
         IC    R3,0(R1)
         EX    R3,MVC_03
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,LIST0130
         B     LIST0150                       SCREEN IS FULL
LIST0130 DS    0H
         L     R2,DXD_DISP
         LA    R2,16(,R2)
         ST    R2,DXD_DISP
         C     R2,COMM_CSECT_LENGTH
         BL    LIST0110
* ------------------------------------------------------------------- *
*        Display                                                      *
* ------------------------------------------------------------------- *
LIST0150 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME      SET PANEL NAME
         L     R15,V_DISDISP                  DISDISP ENTRY POINT
         BALR  R14,R15                        DISPLAY DATA
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        RC = 0?
         BNZ   EXIT0000                       NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=ZCMD,                                               +
               DATA1=SPF_ZCMD
         CLC   SPF_ZCMD,COMM_BLANKS           ZCMD BLANK?
         BNE   ERR0010                        NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=ZVERB,                                              +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLN
         CLI   SPF_ZVERB,C'B'                 BOTTOM?
         BE    LIST0200                       YES
         CLI   SPF_ZVERB,C'D'                 DOWN?
         BE    LIST0210                       YES
         CLI   SPF_ZVERB,C'T'                 TOP?
         BE    LIST0220                       YES
         CLI   SPF_ZVERB,C'U'                 UP?
         BE    LIST0230                       YES
         B     ERR0020
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
LIST0200 DS    0H
         ITRACE ID=BOTTOM
         L     R1,COMM_CSECT_LENGTH           CSECT'S LENGTH
         SRL   R1,4                           SHIFT
         SLL   R1,4                           SHIFT
         ST    R1,DXD_START_DISP              SET START DISP
         B     LIST0100                       REBUILD DISPLAY
LIST0210 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    LIST0200                       YES
         L     R1,SPF_ZSCROLLN                NBR OF LINES
         SLL   R1,4                           MULTIPLY BY 16
         A     R1,DXD_START_DISP              PLUS START DISP
         C     R1,COMM_CSECT_LENGTH           BEYOND END OF CSECT?
         BH    LIST0200                       YES.. LIMIT TO BOTTOM
         ST    R1,DXD_START_DISP              SET START DISP
         B     LIST0100                       REBUILD DISPLAY
LIST0220 DS    0H
         ITRACE ID=TOP
         XC    DXD_START_DISP,DXD_START_DISP  SET START DISP
         B     LIST0100                       REBUILD DISPLAY
LIST0230 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    LIST0220                       YES
         L     R0,DXD_START_DISP              STARTING DISP
         L     R1,SPF_ZSCROLLN                NBR OF LINES
         SLL   R1,4                           MULTIPLY BY 16
         SR    R0,R1                          SUBTRACT SCROLL AMOUNT
         BM    LIST0220                       NEGATIVE.. LIMIT TO TOP
         ST    R0,DXD_START_DISP              SET STARTING DISP
         B     LIST0100                       REBUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVI   COMM_MSG_ID,1
         B     ERR0100
ERR0020  DS    0H
         MVI   COMM_MSG_ID,2
ERR0100  DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         B     LIST0150
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MVC_01   MVC   V_CHAR(0),0(R6)                COPY TEXT
MVC_02   MVC   COMM_INFO_01(0),0(R6)          COPY TEXT
MVC_03   MVC   V_HEX(0),DXD_HEX               COPY HEX
TR_01    TR    V_CHAR(0),PRINTABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START         DC   Q(DXTTLSTT)

H16               DC   H'16'

PANEL_NAME        DC   CL8'DISTDATA'

LENGTH_TABLE      DS   0C
                  DC   AL1(001)       1
                  DC   AL1(003)       2
                  DC   AL1(005)       3
                  DC   AL1(007)       4
                  DC   AL1(010)       5
                  DC   AL1(012)       6
                  DC   AL1(014)       7
                  DC   AL1(016)       8
                  DC   AL1(019)       9
                  DC   AL1(021)      10
                  DC   AL1(023)      11
                  DC   AL1(025)      12
                  DC   AL1(028)      13
                  DC   AL1(030)      14
                  DC   AL1(032)      15
                  DC   AL1(034)      16

PRINTABLE         DC   256C'.'
                  ORG  PRINTABLE+X'40'
                  DC   C' '
                  ORG  PRINTABLE+X'4A'
                  DC   C'¢.<(+¦'
                  DC   X'50'
                  ORG  PRINTABLE+X'5A'
                  DC   C'!$*);¬-/'
                  ORG  PRINTABLE+X'6B'
                  DC   C',%_>?'
                  ORG  PRINTABLE+X'7A'
                  DC   C':#@'
                  DC   X'7D'
                  DC   C'="'
                  ORG  PRINTABLE+X'C0'
                  DC   C'{ABCDEFGHI'
                  ORG  PRINTABLE+X'D0'
                  DC   C'}JKLMNOPQR'
                  ORG  PRINTABLE+X'E2'
                  DC   C'STUVWXYZ'
                  ORG  PRINTABLE+X'F0'
                  DC   C'0123456789'
                  ORG  PRINTABLE+256
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXTTLSTT          DSECT
                  DS   18F
DXD_CSECT         DS   CL8

DXD_START_DISP    DS   F
DXD_DISP          DS   F

DXD_HEX           DS   0C
DXD_HEX_01        DS   CL8
                  DS   X
DXD_HEX_02        DS   CL8
                  DS   X
DXD_HEX_03        DS   CL8
                  DS   X
DXD_HEX_04        DS   CL8
DXD_HEX_L         EQU  *-DXD_HEX
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
V_DETAIL          DSECT
V_ATTR1           DS   X
V_DISP            DS   CL8
                  DS   CL3
V_ATTR2           DS   X
V_HEX             DS   CL35
                  DS   CL3
V_ATTR3           DS   X
V_ASTERISK_1      DS   C
V_ATTR4           DS   X
V_CHAR            DS   CL16
V_ATTR5           DS   X
V_ASTERISK_2      DS   C

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  DISCOMM  TYPE=DSECT
                  DISSPFD  TYPE=DSECT
                  COPY     DISASMDA
                  COPY     ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  IFGACB  AM=VSAM
ACB_L             EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY REGEQU
                 END  DISTLSTT
./ ADD NAME=DISTMAIN 0109-09119-09198-0917-00937-01083-00000-SOURCE
* -------------------------------------------------------------------*
*                                                                    *
*        TSO MAINLINE                                                *
*                                                                    *
* -------------------------------------------------------------------*
DISTMAIN CSECT
DISTMAIN AMODE 31
DISTMAIN RMODE ANY
         USING DISTMAIN,R11,R10
         USING DISCOMM,R12
         USING IHADCB,DISMOD_DCB
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     INIT0000                          SKIP EYECATCHER
MODID    DC    CL8'DISTMAIN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)                       CHAIN  SAVE AREA
         ST    R15,8(,R13)                       CHAIN SAVE AREA
         LR    R13,R15                           SET SAVE AREA ADDRESS
         USING DXDTMAIN,R13
         ITRACE ID=ENTRY
         LA    R1,COMM_SPF_FUNCTION
         ST    R1,COMM_SPF_1                     SET FUNCTION ADDRESS
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
* ------------------------------------------------------------------- *
*     Define SPF variables                                            *
* ------------------------------------------------------------------- *
         ITRACE ID=DEF_VARS
         MVI   COMM_VAR_FUNC,$VAR_DEFINE         SET FUNCTION
         L     R15,V_DISVAR                      SPF VAR MANAGER
         BALR  R14,R15                           DEFINE VARIABLES
* ------------------------------------------------------------------- *
*     GETMAIN VDATA (dynamic area storage)                            *
* ------------------------------------------------------------------- *
         ITRACE ID=GET_VDATA
         MVC   COMM_SPF_PANEL,DIS0002
         MVI   COMM_VDATA_FUNC,$VDATA_GETMAIN    SET FUNCTION
         L     R15,V_DISVDATA
         BALR  R14,R15                           OBTAIN VDATA
         ITRACE ID=VDEFVDATA
         MVI   COMM_VDATA_FUNC,$VDATA_VDEFINE    SET FUNCTION
         L     R15,V_DISVDATA
         BALR  R14,R15                           VDEFINE VDATA
* ------------------------------------------------------------------- *
*        Allocate temp data sets for SYSIN and SYSPRINT               *
* ------------------------------------------------------------------- *
         ITRACE ID=ALOC_IN
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC
         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSIN+$DAIR_USE_DDNAME
         MVC   COMM_DAIR_DD,SYSIN             DD NAME TO USE
         L     R15,V_DISDAIR                  DISDAIR EP
         BALR  R14,R15                        ALLOCATE SYSIN
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0040                        NO
         ITRACE ID=ALOC_PRT
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC
         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_USE_DDNAME
         MVC   COMM_DAIR_DD,SYSPRINT          DD NAME TO USE
         L     R15,V_DISDAIR                  DISDAIR EP
         BALR  R14,R15                        ALLOCATE SYSPRINT
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0040                        NO
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC
         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_USE_DDNAME
         MVC   COMM_DAIR_DD,DISPRINT          DD NAME TO USE
         L     R15,V_DISDAIR                  DISDAIR EP
         BALR  R14,R15                        ALLOCATE DISPRINT
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0040                        NO
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Prompt the user for the library and member                      *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         ITRACE ID=PROMPT_1
         MVC   COMM_SPF_PANEL,DIS0001            SET PANEL NAME
         L     R15,V_DISDISP                     DISDISP ENTRY POINT
         BALR  R14,R15                           DISPLAY PANEL
         LTR   R15,R15                           RC = ZERO?
         BNZ   EXIT0000                          NO
         MVC   COMM_LMOD_DSN,SPF_LMOD_DSN        COPY DSN
         MVC   COMM_LMOD_VOLSER,SPF_LMOD_VOLSER  COPY VOLSER
         MVC   COMM_LMOD,SPF_LMOD                COPY MEMBER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   SPF_LMOD_DSN,COMM_BLANKS          DSN BLANK?
         BNE   MAIN0010                          NO
         MVI   COMM_MSG_ID,1                     SET MESSAGE ID
         BAL   R8,MSG0000                        BUILD MESSAGE(S)
         B     MAIN0000                          DISPLAY WITH MSG(S)
* ------------------------------------------------------------------- *
*        Allocate the LMOD library                                    *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=CHK_LMOD
         MVC   COMM_DSINFO_DSN,COMM_LMOD_DSN     COPY DSN
         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT
         BALR  R14,R15                           CHECK THE DATA SET
         LTR   R15,R15                           ERROR(S)?
         BZ    MAIN0020                          NO
         MVC   SPF_MSG_1,COMM_DSINFO_MSG         COPY MESSAGE
         B     MAIN0000                          DISPLAY W/MSG
MAIN0020 DS    0H
         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS
         BE    MAIN0030                          YES
         MVI   COMM_MSG_ID,2
         BAL   R8,MSG0000                        BUILD MESSAGE
         B     MAIN0000                          DISPLAY W/MSG
MAIN0030 DS    0H
         ITRACE ID=ALOCLMOD
         MVC   COMM_DAIR_DSN,COMM_LMOD_DSN       SET DSN
         MVC   COMM_DAIR_VOLSER,COMM_LMOD_VOLSER SET VOLSER
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET FUNCTION
         MVI   COMM_DAIR_OPTIONS,0               RESET ALL OPTIONS
         L     R15,V_DISDAIR                     DISDAIR ENTRY POINT
         BALR  R14,R15                           ALLOCATE LIBRARY
         ITRACE ID=ALLOC_RC,                     DISDAIR RC            +
               RDATA1=R15
         LTR   R15,R15                           ALLOCATION SUCCESSFUL?
         BZ    MAIN0040                          YES
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         B     MAIN0000                          PROMPT AGAIN W/MSG(S)
MAIN0040 DS    0H
         MVC   COMM_DDNAME,COMM_DAIR_DD          SAVE DD NAME
         MVC   DCBDDNAM,COMM_DAIR_DD             COPY DD NAME
         MVC   COMM_LMOD_VOLSER,COMM_DAIR_VOLSER SAVE VOLSER
         MVC   SPF_LMOD_VOLSER,COMM_DAIR_VOLSER  SAVE VOLSER
         ITRACE ID=LMOD_DD,                                            +
               DATA1=COMM_DDNAME
* ------------------------------------------------------------------- *
*        Open the LMOD library                                        *
* ------------------------------------------------------------------- *
         ITRACE ID=OPENLMOD,                                           +
               DATA1=DCBDDNAM
         OPEN  (DISMOD_DCB,INPUT),                                     +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
* ------------------------------------------------------------------- *
*        If the load module was not specified, display members        *
* ------------------------------------------------------------------- *
         CLC   COMM_LMOD,COMM_BLANKS             LMOD GIVEN?
         BNE   MAIN0060                          YES
         ITRACE ID=DISDIR
         OI    DXD_FLAGS,$LMOD_PROMPT            PROMPTING FOR LMOD
MAIN0050 DS    0H
         L     R15,V_DISDIR                      DISDIR ENTRY POINT
         BALR  R14,R15                           DISPLAY DIRECTORY
         ITRACE ID=DIR_RC,                                             +
               RDATA1=R15
         LTR   R15,R15                           RC ZERO?
         BZ    MAIN0060                          YES
         TM    DXD_FLAGS,$LMOD_PROMPT            PROMPTED FOR LMOD?
         BO    MAIN0050                          YES.. PROMPT AGAIN
         B     MAIN0000                          PROMPT FOR LIBRARY
* ------------------------------------------------------------------- *
*        We now have the LMOD library and module name                 *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=LMOD,                                               +
               DATA1=COMM_LMOD
* ------------------------------------------------------------------- *
*         Start BINDER dialog, include LMOD                           *
* ------------------------------------------------------------------- *
         ITRACE ID=STARTD
         MVI   COMM_BIND_FUNC,$BIND_STARTD    BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=STARTDRC,                                           +
               RDATA1=R15
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    MAIN0010                       YES
         OI    DXD_FLAGS,$DIALOG_ACTIVE       SET FLAG
* ------------------------------------------------------------------- *
*         Build SECTION names chain                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=NAMES
         MVI   COMM_BIND_FUNC,$BIND_NAMES     BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=NAMES_RC,                                           +
               RDATA1=R15
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BNO   MAIN0070                       NO
         ITRACE ID=CLOSE1
         CLOSE DISMOD_DCB,                    CLOSE DISMOD DCB         +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         ITRACE ID=ENDD_1
         MVI   COMM_BIND_FUNC,$BIND_ENDD      SET FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        END THE DIALOG
         NI    DXD_FLAGS,255-$DIALOG_ACTIVE   DIALOG NOT ACTIVE
         ITRACE ID=DEALLOC,                                            +
               DATA1=COMM_DDNAME
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION
         L     R15,V_DISDAIR
         BALR  R14,R15                        DE-ALLOCATE
         NI    COMM_FLAGS,255-$COMM_FLAGS_ABORT
         B     MAIN0010                       PROMPT FOR LIBRARY
* ------------------------------------------------------------------- *
*         Display the list of sections                                *
* ------------------------------------------------------------------- *
MAIN0070 DS    0H
         CLC   COMM_NAME_NBR,F1               MORE THAN ONE NAME?
         BE    MAIN0072                       NO
         ITRACE ID=DISNAMES
         L     R15,V_DISNLIST                 DISNLIST ENTRY POINT
         BALR  R14,R15                        LINK TO DISNLIST
         ITRACE ID=NLIST_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                        RC = 0?
         BNZ   EXIT0000                       NO.. EXIT
         B     MAIN0074
* ------------------------------------------------------------------- *
*         ONLY ONE CSECT..                                            *
* ------------------------------------------------------------------- *
MAIN0072 DS    0H
         ITRACE ID=ONECSECT
         ICM   R7,15,COMM_NAME_NEXT           1ST (ONLY) SECTION
         USING NAME_DSECT,R7
         MVC   COMM_CSECT,NAME_NAME           COPY NAME
         MVC   SPF_CSECT,NAME_NAME            COPY NAME
* ------------------------------------------------------------------- *
*         Get ESD and RLD info                                        *
* ------------------------------------------------------------------- *
MAIN0074 DS    0H
         ITRACE ID=ESD_RLD
         MVI   COMM_BIND_FUNC,$BIND_ESD_RLD   BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=ESDRLDRC,                                           +
               RDATA1=R15
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0010                        YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         UNPK  COMM_INFO_01(9),COMM_CSECT_LENGTH(5)
         MVC   SPF_CSECT_LENGTH,COMM_INFO_01
         TR    SPF_CSECT_LENGTH,HEXCHAR
* ------------------------------------------------------------------- *
*         Read TEXT                                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=READTEXT
         MVI   COMM_BIND_FUNC,$BIND_TEXT      BINDER FUNCTION
         L     R15,V_DISBIND                  DISBIND ENTRY POINT
         BALR  R14,R15                        LINK TO MODULE READER
         ITRACE ID=TEXT_RC,                                            +
               RDATA1=R15
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?
         BO    ERR0020                        YES
* ------------------------------------------------------------------- *
*        DETERMINE 'TARGET' OF RLD ADCONS                             *
* ------------------------------------------------------------------- *
         ICM   R2,15,COMM_RLD_AREA_NEXT       FIRST RLD ITEM
         BZ    MAIN0110                       NO RLD ITEMS
         USING AREA_DSECT,R2
MAIN0080 DS    0H
         ITRACE ID=TARGET,                                             +
               RDATA1=R2,                                              +
               DATA2=0(R2)
         CLI   AREA_DATA_TYPE,$AREA_DATA      DATA AREA?
         BNE   MAIN0100                       NO
         CLI   AREA_DATA_TYPE,$DATA_ACON      ADCON?
         BE    MAIN0090                       YES
         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?
         BNE   MAIN0100                       NO
MAIN0090 DS    0H
         ICM   R1,15,AREA_BEGIN               RLD ITEM'S DISP
         LR    R0,R1                          COPY DISP
         A     R1,COMM_CSECT_TEXT             PLUS BASE
         LH    R14,AREA_LENGTH                RLD ITEM'S LENGTH
         BCTR  R14,0                          RELATIVE TO ZERO
         AR    R0,R14                         PLUS LENGTH
         STCM  R0,15,AREA_END
         LA    R15,AREA_REF_DISP1+3           END OF OUTPUT FIELD
         SR    R15,R14                        MINUS LENGTH
         EX    R14,REF_MVC                    COPY TEXT
MAIN0100 DS    0H
         ICM   R2,15,AREA_NEXT
         BNZ   MAIN0080
         B     MAIN0110
REF_MVC  MVC   0(0,R15),0(R1)                 COPY TARGET DISP
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Display the main menu                                        *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0110 DS    0H
         ITRACE ID=MAINMENU
         MVI   SPF_FUNCTION,C' '
         MVC   COMM_SPF_FUNCTION,DISPLAY
         MVC   COMM_SPF_PANEL,DISMENU
         LA    R0,COMM_SPF_PANEL
         ST    R0,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
MAIN0120 DS    0H
         LA    R1,COMM_SPF_PARMS              PARMS FOR DISPLAY
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        DISPLAY MAIN MEU
         ITRACE ID=MENU_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                        RC=0?
         BNZ   EXIT0000                       NO
         MVC   SPF_MSG_1,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_2,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_3,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_4,COMM_BLANKS          CLEAR MESSAGE
         MVC   SPF_MSG_5,COMM_BLANKS          CLEAR MESSAGE
         ITRACE ID=ZCMD,                                               +
               DATA1=SPF_ZCMD+0,                                       +
               DATA2=SPF_ZCMD+8
         OC    SPF_ZCMD,COMM_BLANKS           TRANSLATE TO UPPER CASE
         CLC   SPF_ZCMD,COMM_BLANKS           BLANK?
         BE    MAIN0130                       YES
         CLC   ABEND,SPF_ZCMD                 ABEND?
         BE    MAIN0700                       YES
         CLC   AREA,SPF_ZCMD                  AREA?
         BE    MAIN0740                       YES
         CLC   DEBUG,SPF_ZCMD                 DEBUG?
         BE    MAIN0710                       YES
         CLC   TRACE_ON,SPF_ZCMD              TURN TRACE ON?
         BE    MAIN0720                       YES
         CLC   TRACE_OFF,SPF_ZCMD             TURN TRACE OFF?
         BE    MAIN0730                       YES
MAIN0130 DS    0H
         ITRACE ID=FUNCTION,                                           +
               DATA1=SPF_FUNCTION
         CLI   SPF_FUNCTION,C' '              BLANK?
         BE    MAIN0150                       YES
         LA    R1,FUNCTION_TABLE
         USING FUNCTION_DSECT,R1
MAIN0140 DS    0H
         CLC   SPF_FUNCTION,FUNCTION_CODE     FUNCTION LOCATED?
         BE    MAIN0160                       YES
         LA    R1,FUNCTION_L(,R1)             NEXT FUNCTION
         CLI   FUNCTION_CODE,X'FF'            END OF TABLE?
         BNE   MAIN0140                       NO
         MVI   COMM_MSG_ID,3
         BAL   R8,MSG0000                     BUILD MESSAGE
         B     MAIN0120                       RE-DISPLAY WITH MESSAGES
MAIN0150 DS    0H
         MVI   COMM_MSG_ID,4                  SET MESSAGE ID
         BAL   R8,MSG0000                     BUILD MESSAGE
         B     MAIN0120                       RE-DISPLAY WITH MESSAGES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0160 DS    0H
         ICM   R15,15,FUNCTION_ADDR           FUNCTION'S ADDRESS
         SR    R1,R1                          NO PARM LIST
         ITRACE ID=CALLFUNC,                                           +
               RDATA1=R15
         BALR  R14,R15                        LINK TO FUNCTION
         B     MAIN0110
* ------------------------------------------------------------------- *
*        Display usings                                               *
* ------------------------------------------------------------------- *
MAIN0170 DS    0H
         ITRACE ID=USINGS
         MVI   SPF_FUNCTION,C' '              RESET FUNCTION
         OC    COMM_KSDS_NEXT,COMM_KSDS_NEXT  ANY KSDSES?
         BNZ   MAIN0180                       YES
         OC    COMM_DSECT_NEXT,COMM_DSECT_NEXT   ANY DSECTS FROM ASM?
         BNZ   MAIN0180                       YES
         MVI   COMM_MSG_ID,5                  SET MESSAGE ID
         BAL   R8,MSG0000                     BUILD MESSAGE
         B     MAIN0120                       RE-DISPLAY WITH MESSAGES
MAIN0180 DS    0H
         ITRACE ID=CALLULST
         L     R15,V_DISULIST                 DISULIST ENTRY POINT
         BALR  R14,R15                        CALL DISULIST
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Generate source                                              *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=GEN
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BNZ   MAIN0202                       NOT LOADED
         MVC   SPF_MSG_3(MSG07_L),MSG07
         B     MAIN0204
MAIN0202 DS    0H
         OC    COMM_PREFIX_LENGTH,COMM_PREFIX_LENGTH
         BNZ   MAIN0210
         MVC   SPF_MSG_3(MSG11_L),MSG11
MAIN0204 DS    0H
         L     R15,V_DISOPTS                  DISOPTS ENTRY POINT
         BALR  R14,R15                        CALL DISOPTS
         LTR   R15,R15                        RC=0?
         BNZ   MAIN0110                       NO
         B     MAIN0200
* ------------------------------------------------------------------- *
*        Verify base and usings                                       *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         NI    COMM_FLAGS,255-$COMM_FLAGS_ABORT
         OC    COMM_BASE_NEXT,COMM_BASE_NEXT  ANY BASE DEFINITIONS?
         BZ    MAIN0220                       NO
         OC    COMM_USING_NEXT,COMM_USING_NEXT  ANY USING DEFINITIONS?
         BZ    MAIN0220                       NO
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG01_L),MSG01
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         L     R15,V_DISVBU
         BALR  R14,R15                        VERIFY BASE AND USINGS
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?
         BO    MAIN0110                       YES
* ------------------------------------------------------------------- *
*        Connect USINGs to DSECTs                                     *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG02_L),MSG02
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         ITRACE ID=DISDSECT
         L     R15,V_DISDSECT
         BALR  R14,R15                        CONNECT USINGS TO DSECTS
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?
         BO    MAIN0110                       YES
* ------------------------------------------------------------------- *
*        Delete old "ALL areas"                                       *
* ------------------------------------------------------------------- *
         ICM   R3,15,COMM_ALL_AREA_NEXT       1ST AREA ON ALL CHAIN
         BZ    MAIN0240                       NOTHING ON CHAIN
         USING AREA_DSECT,R3
         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT
MAIN0230 DS    0H
         LR    R1,R3                          COPY ADDR
         L     R3,AREA_NEXT                   NEXT AREA BLOCK
         FREEMAIN RU,                         FREE THIS AREA BLOCK     +
               A=(1),                                                  +
               LV=AREA_DSECT_L
         LTR   R3,R3                          ANOTHER AREA?
         BNZ   MAIN0230                       YES
* ------------------------------------------------------------------- *
*        Merge RLD areas with user specified data areas               *
* ------------------------------------------------------------------- *
MAIN0240 DS    0H
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG03_L),MSG03
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         ITRACE ID=DISDMERG
         L     R15,V_DISDMERG
         BALR  R14,R15                        MERGE USER AND RLD DATA
         TM    DXD_FLAGS,$DEBUG               DEBUG ON?
         BNO   MAIN0250                       NO
         ITRACE ID=X_DEBUG
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Scan text to determine instructions                          *
* ------------------------------------------------------------------- *
MAIN0250 DS    0H
         ITRACE ID=DISSCAN
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG04_L),MSG04
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         L     R15,V_DISSCAN
         BALR  R14,R15                        SCAN TEXT
         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?
         BO    MAIN0110                       YES
         TM    DXD_FLAGS,$DEBUG               DEBUG ON?
         BNO   MAIN0260                       NO
         ITRACE ID=X_DEBUG
         L     R1,COMM_ALL_AREA_NEXT
         L     R15,V_DISXLIST
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Determine data references                                    *
* ------------------------------------------------------------------- *
MAIN0260 DS    0H
         ITRACE ID=DISREF
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG05_L),MSG05
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         L     R15,V_DISREF
         BALR  R14,R15
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH ALLOCATED?
         BO    MAIN0270                       YES
         CLC   SPF_OUTPUT_DSN,COMM_BLANKS     OUTPUT DSN GIVEN?
         BE    MAIN0270                       NO
         ITRACE ID=ALOC_PUN
         MVC   COMM_DAIR_DD,DISPUNCH          SET DDNAME
         MVC   COMM_DAIR_DSN,SPF_OUTPUT_DSN   SET DSN
         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION
         OI    COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME
         L     R15,V_DISDAIR                  DAIR ENTRY POINT
         BALR  R14,R15                        ALLOCATE DISPUNCH
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0040                        NO
         OI    DXD_FLAGS,$TEMP_PUNCH          SET FLAG
         OI    COMM_DDS,$DISPUNCH_DD          SET FLAG
* ------------------------------------------------------------------- *
*        Generate source                                              *
* ------------------------------------------------------------------- *
MAIN0270 DS    0H
         ITRACE ID=DISGEN
         L     R15,V_DISGEN
         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO
         MVC   COMM_INFO_01(MSG06_L),MSG06
         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS
         ITRACE ID=OPEN_PRT
         OPEN  (DISPRINT_DCB,OUTPUT),         OPEN DISPRINT            +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
         ITRACE ID=DISGEN
         L     R15,V_DISGEN
         BALR  R14,R15                        GENERATE SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    DXD_FLAGS,$TEMP_PUNCH          TEMPORARY ALLOCATION?
         BNO   MAIN0280                       NO
         ITRACE ID=FREE_PUN
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION
         MVC   COMM_DAIR_DD,DISPUNCH          SET DD TO FREE
         L     R15,V_DISDAIR
         BALR  R14,R15                        FREE DISPUNCH
         LTR   R15,R15                        SUCESSFUL?
         BNZ   ERR0040                        NO
         NI    COMM_DDS,255-$DISPUNCH_DD      RESET FLAG
         NI    DXD_FLAGS,255-$TEMP_PUNCH      RESET FLAG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0280 DS    0H
         ITRACE ID=CLOS_PRT
         CLOSE DISPRINT_DCB,                  CLOSE DISPRINT           +
               MODE=31,                                                +
               MF=(E,COMM_OPEN)
* ------------------------------------------------------------------- *
*        Obtain data set id for DISPRINT                              *
* ------------------------------------------------------------------- *
         TM    DXD_FLAGS,$DISPRINT_DDID       DDID OBTAINED?
         BO    MAIN0290                       YES
         OI    DXD_FLAGS,$DISPRINT_DDID       SET FLAG
         ITRACE ID=LMINIT
         MVC   COMM_SPF_FUNCTION,LMINIT       SPF FUNCTION
         LA    R0,DDID                        DDID (RETURNED BY LMINIT)
         ST    R0,COMM_SPF_2
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         ST    R0,COMM_SPF_6
         ST    R0,COMM_SPF_7
         ST    R0,COMM_SPF_8
         ST    R0,COMM_SPF_9
         LA    R0,DISPRINT                    DDNAME
         ST    R0,COMM_SPF_10                 SET DDNAME ADDR
         OI    COMM_SPF_10,X'80'              SET END-OF-LIST
         LA    R1,COMM_SPF_PARMS              SPF PARMS
         L     R15,COMM_ISPLINK               ISPLINK ENTRY POINT
         BALR  R14,R15                        OBTAIN DDID
         ITRACE ID=LMINITRC,                                           +
               RDATA1=R15,                                             +
               DATA2=SPF_DDID
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0050                        NO
         MVC   DXD_DDID,SPF_DDID              SAVE DISPRINT DATA ID
* ------------------------------------------------------------------- *
*        Browse DISPRINT                                              *
* ------------------------------------------------------------------- *
MAIN0290 DS    0H
         ITRACE ID=BROWSE,                                             +
               DATA1=DXD_DDID
         MVC   COMM_SPF_FUNCTION,BROWSE       SPF FUNCTION
         LA    R0,COMM_BLANKS
         ST    R0,COMM_SPF_2
         ST    R0,COMM_SPF_3
         ST    R0,COMM_SPF_4
         ST    R0,COMM_SPF_5
         LA    R0,DXD_DDID                    DDID
         ST    R0,COMM_SPF_6                  SET DATA ID ADDR
         OI    COMM_SPF_6,X'80'               FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS              PARMS FOR BROWSE
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        LINK TO BROWSE
         B     MAIN0110
* ------------------------------------------------------------------- *
*        Display user area 1 chain                                    *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=AREA_1
         ICM   R1,15,COMM_USER_AREA_NEXT_1
         BZ    MAIN0340
         L     R15,V_DISXLIST
         BALR  R14,R15                        DISPLAY CHAIN
         B     MAIN0110
* ------------------------------------------------------------------- *
*        Display RLD data                                             *
* ------------------------------------------------------------------- *
MAIN0310 DS    0H
         ITRACE ID=RLD_DATA
         ICM   R1,15,COMM_RLD_AREA_NEXT
         BZ    MAIN0340
         L     R15,V_DISXLIST
         BALR  R14,R15                        DISPLAY CHAIN
         B     MAIN0110
* ------------------------------------------------------------------- *
*        Display user data chain 2                                    *
* ------------------------------------------------------------------- *
MAIN0320 DS    0H
         ITRACE ID=AREA_2
         ICM   R1,15,COMM_USER_AREA_NEXT_2
         BZ    MAIN0340
         L     R15,V_DISXLIST
         BALR  R14,R15                        DISPLAY CHAIN
         B     MAIN0110
* ------------------------------------------------------------------- *
*        Display ALL data chain                                       *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=ALL_AREA
         ICM   R1,15,COMM_ALL_AREA_NEXT
         BZ    MAIN0340
         L     R15,V_DISXLIST
         BALR  R14,R15                        DISPLAY CHAIN
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         MVC   SPF_MSG_1(MSG08_L),MSG08
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0350 DS    0H
         TM    DXD_FLAGS,$DEBUG               DEBUG FLAG ON?
         BO    MAIN0360                       YES
         OI    DXD_FLAGS,$DEBUG               TURN ON DEBUG FLAG
         MVC   SPF_MSG_1(MSG09_L),MSG09
         B     MAIN0110
MAIN0360 DS    0H
         NI    DXD_FLAGS,255-$DEBUG           TURN OFF DEBUG FLAG
         MVC   SPF_MSG_1(MSG10_L),MSG10
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0700 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
MAIN0710 DS    0H
         ITRACE ID=DEBUG
         MVC   SPF_ZCMD,COMM_BLANKS
         L     R15,V_DISTDBUG
         BALR  R14,R15
         B     MAIN0110
MAIN0720 DS    0H
         ITRACE ID=TRACEON
         MVC   SPF_ZCMD,COMM_BLANKS
         OI    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN
         B     MAIN0110
MAIN0730 DS    0H
         ITRACE ID=TRACEOFF
         MVC   SPF_ZCMD,COMM_BLANKS
         NI    COMM_TRACE_FLAGS,255-$COMM_TRACE_OPEN
         B     MAIN0110
MAIN0740 DS    0H
         MVC   SPF_ZCMD,COMM_BLANKS
         TM    COMM_FLAGS,$COMM_AREA_DEBUG
         BO    MAIN0750
         ITRACE ID=AREA_ON
         OI    COMM_FLAGS,$COMM_AREA_DEBUG
         B     MAIN0110
MAIN0750 DS    0H
         ITRACE ID=AREA_OFF
         NI    COMM_FLAGS,255-$COMM_AREA_DEBUG
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         DC    H'2'
ERR0030  DS    0H
         DC    H'3'
ERR0040  DS    0H
         BAL   R8,MSG0010
         BAL   R8,ERR1000
         B     EXIT0000
ERR0050  DS    0H
         DC    H'5'
ERR1000  DS    0H
         MVC   COMM_SPF_FUNCTION,DISPLAY         SET FUNCTION
         MVC   COMM_SPF_PANEL,DIS0000            SET PANEL NAME
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2                     SET PANEL ADDRESS
         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST
         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT
         BALR  R14,R15                           DISPLAY PANEL
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
TPUT0000 DS    0H
         ITRACE ID=TPUT
         TPUT  COMM_INFO_01,L'COMM_INFO_01       ISSUE TPUT
         STIMER REAL,                                                  +
               BINTVL=WAIT_TIME
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME
         L     R15,V_DISMSG                   DISMSG ENTRY POINT
         BALR  R14,R15                        BUILD MESSAGE(S)
MSG0010  DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1           COPY MESSAGE
         MVC   SPF_MSG_2,COMM_MSG_2           COPY MESSAGE
         MVC   SPF_MSG_3,COMM_MSG_3           COPY MESSAGE
         MVC   SPF_MSG_4,COMM_MSG_4           COPY MESSAGE
         MVC   SPF_MSG_5,COMM_MSG_5           COPY MESSAGE
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT0000
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC
         MVC   COMM_DAIR_DD,SYSIN
         L     R15,V_DISDAIR
         BALR  R14,R15                           FREE SYSIN
         MVC   COMM_DAIR_DD,SYSPRINT
         L     R15,V_DISDAIR
         BALR  R14,R15                           FREE SYSPRINT
         MVC   COMM_DAIR_DD,DISPRINT
         L     R15,V_DISDAIR
         BALR  R14,R15                           FREE DISPRINT
         TM    DXD_FLAGS,$DIALOG_ACTIVE          BINDER DIALOG ACTIVE?
         BNO   EXIT0010                          NO
         ITRACE ID=ENDD
         MVI   COMM_BIND_FUNC,$BIND_ENDD         SET FUNCTION
         L     R15,V_DISBIND                     DISBIND ENTRY POINT
         BALR  R14,R15                           END DIALOG
         NI    DXD_FLAGS,255-$DIALOG_ACTIVE      DIALOG NOT ACTIVE
EXIT0010 DS    0H
         ITRACE ID=CLOSE,                                              +
               DATA1=COMM_DDNAME
         CLOSE DISMOD_DCB,                                             +
               MODE=31,                                                +
               MF=(E,COMM_CLOSE)
         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET FUNCTION
         MVC   COMM_DAIR_DD,COMM_DDNAME          COPY DDNAME
         ITRACE ID=DALOLMOD,                                           +
               DATA1=COMM_DAIR_DD
         L     R15,V_DISDAIR                     DISDAIR ENTRY POINT
         BALR  R14,R15                           FREE LMOD LIBRARY
         LTR   R15,R15                           SUCCESSFUL?
         BZ    EXIT0020                          YES
         BAL   R8,ERR1000                        DISPLAY MSG
EXIT0020 DS    0H
         MVI   COMM_VAR_FUNC,$VAR_DELETE         SET FUNCTION
         L     R15,V_DISVAR                      VARIABLE MANAGER
         BALR  R14,R15                           DELETE VARIABLES
         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
         BZ    EXIT0030                          NOT LOADED
         ITRACE ID=DEL_OP,                                             +
               DATA1=COMM_OPCODE_TABLE_NAME
         DELETE EPLOC=COMM_OPCODE_TABLE_NAME     DELETE OPCODE TABLE
         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR
EXIT0030 DS    0H
         ITRACE ID=FREEVDATA
         MVI   COMM_VDATA_FUNC,$VDATA_FREEMAIN   SET FUNCTION
         L     R15,V_DISVDATA
         BALR  R14,R15                           FREE VDATA STORAGE
         ITRACE ID=EXIT
         L     R13,4(,R13)                       RESTORE R13
         LM    R14,R12,12(R13)                   RESTORE REGISTERS      ASE01680
         SR    R15,R15                           SET RC
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START      DC    Q(DXDTMAIN)
WAIT_TIME      DC    F'100'
F1             DC    F'1'

HEXCHAR        EQU   *-C'0'
               DC    C'0123456789ABCDEF'

BROWSE         DC    CL8'BROWSE'
DDID           DC    CL8'DDID'
DISOP          DC    CL8'DISOP'
DISPLAY        DC    CL8'DISPLAY'
DISMENU        DC    CL8'DISMENU'
DIS0000        DC    CL8'DIS0000'
DIS0001        DC    CL8'DIS0001'
DIS0002        DC    CL8'DIS0002'
LMINIT         DC    CL8'LMINIT'
SYSIN          DC    CL8'SYSIN'
SYSPRINT       DC    CL8'SYSPRINT'
DISPRINT       DC    CL8'DISPRINT'
DISPUNCH       DC    CL8'DISPUNCH'

ABEND          DC    C'ABEND '
AREA           DC    C'AREA '
DEBUG          DC    C'DEBUG '
TRACE_ON       DC    C'TRACE ON'
TRACE_OFF      DC    C'TRACE OFF'

MSG01          DC    C'Verifying BASE and USING(s)'
MSG01_L        EQU   *-MSG01

MSG02          DC    C'Chaining USINGs to DSECTs'
MSG02_L        EQU   *-MSG02

MSG03          DC    C'Merging data area info'
MSG03_L        EQU   *-MSG03

MSG04          DC    C'Scanning text to determine where instructions oc+
               cur'
MSG04_L        EQU   *-MSG04

MSG05          DC    C'Determining referenced labels'
MSG05_L        EQU   *-MSG05

MSG06          DC    C'Generating source'
MSG06_L        EQU   *-MSG06

MSG07          DC    C'Select the opcode table to be used'
MSG07_L        EQU   *-MSG07

MSG08          DC    C'No AREA(S) to display'
MSG08_L        EQU   *-MSG08

MSG09          DC    C'Debug set'
MSG09_L        EQU   *-MSG09

MSG10          DC    C'Debug reset'
MSG10_L        EQU   *-MSG10

MSG11          DC    C'Enter a label prefix'
MSG11_L        EQU   *-MSG11

FUNCTION_TABLE DS    0C
               DC    C'A',VL4(DISALIST)
               DC    C'B',VL4(DISBLIST)
               DC    C'C',VL4(DISCONF)
               DC    C'D',VL4(DISDLIST)
               DC    C'E',VL4(DISELIST)
               DC    C'G',AL4(MAIN0200)
               DC    C'K',VL4(DISKLIST)
               DC    C'O',VL4(DISOPTS)
               DC    C'R',VL4(DISRLIST)
               DC    C'S',VL4(DISSLIST)
               DC    C'T',VL4(DISTLSTT)
               DC    C'U',AL4(MAIN0170)
*              DC    C'U',VL4(DISULIST)
               DC    C'X',AL4(EXIT0000)
               DC    C'Z',AL4(MAIN0350)
               DC    C'1',AL4(MAIN0300)
               DC    C'2',AL4(MAIN0310)
               DC    C'3',AL4(MAIN0320)
               DC    C'4',AL4(MAIN0330)
               DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTMAIN       DSECT
               DS    18F             REGISTER SAVE AREA
DXD_CSECT      DS    CL8

DXD_DDID       DS    CL8             DISPRINT DATA SET ID

DXD_FLAGS      DS    X
$LIB_ALLOCATED EQU   X'80'           .. LMOD LIBRARY IS ALLOCATED
$LMOD_PROMPT   EQU   X'40'           .. PROMPTED FOR LMOD
$DIALOG_ACTIVE EQU   X'20'           .. BINDER DIALOG IS ACTIVE
$DISPRINT_DDID EQU   X'10'           .. DISPRINT DDID OBTAINED
$DEBUG         EQU   X'08'           .. DEBUG
$TEMP_PUNCH    EQU   X'04'           .. DISPUNCH TEMPORARY ALLOCATED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FUNCTION_DSECT DSECT
FUNCTION_CODE  DS    C
FUNCTION_ADDR  DS    XL4
FUNCTION_L     EQU   *-FUNCTION_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               DISSPFD  TYPE=DSECT
               COPY     DISASMDA
               COPY     LIBBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DCBD     DSORG=PS
DCB_L          EQU      *-IHADCB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU

               END      DISTMAIN
./ ADD NAME=DISULIST 0103-09119-09198-0821-00772-00775-00004-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISULIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of USINGs                               *
*                                                                     *
*                                                                     *
*  There are two ways for DSECT information to be made available.     *
*  One is via the batch utility DISASMU1, the other is by supplying   *
*  assembler source (via the "A" main menu option).                   *
*                                                                     *
*  The batch utility stores the information from a processing         *
*  DSECTs in VSAM KSDSes.                                             *
*                                                                     *
*  Information from DSECTs processed via the "A" main menu option     *
*  is stored in in-storage control block chains.                      *
*                                                                     *
*                                                                     *
*                                                                     *
*  When the user wants to define a USING                              *
*   They will be shown a list of the pre-processed DSECT info         *
*   data sets (from the 'K' main menu option)                         *
*                                                                     *
*   They may select one of the pre-processed DSECT info KSDSes        *
*   or the DSECTs defined via the 'A' main menu option.               *
*                                                                     *
*                                                                     *
*   When the user selects the KSDS or to use DSECTs from the 'A'      *
*   option, they will be shown the names of the DSECTs available.     *
*                                                                     *
*   The user may choose to use the DSECT itself (the base register    *
*   for the DSECT references the first byte of the DSECT) or they     *
*   may select a label within the DSECT (in case the base register    *
*   does not refer to the first byte of the DSECT.                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISULIST CSECT
DISULIST AMODE 31
DISULIST RMODE ANY
         USING DISULIST,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISULIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDULIST,R13
         USING DISSPFD,R9
         USING USING_DSECT,R7
         USING KSDS_DSECT,R6
         USING DSECT_DSECT,R5
         USING LABEL_DSECT,R4
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         L     R1,SPF_VDEPTH                     NBR OF LINES
         LA    R1,1(,R1)                         PLUS 1
         SRL   R1,2                              DIVIDE BY 4
         STH   R1,DXD_USINGS_PER_SCREEN          NBR OF USINGS PER
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing USING chain.                       *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    DXD_FIRST_USING,DXD_FIRST_USING
         XC    DXD_FIRST_USING_DISPLAYED,DXD_FIRST_USING_DISPLAYED
         LA    R2,DXD_FIRST_USING-4
PREV     USING USING_DSECT,R2
         ICM   R7,15,COMM_USING_NEXT             FIRST USING
         BZ    MAIN0000                          NO USINGS
INIT0010 DS    0H
         GETMAIN RU,                                                   +
               LV=USING_DSECT_L,                                       +
               LOC=ANY
         ITRACE ID=COPY_1,                                             +
               RDATA1=R1
NEW      USING USING_DSECT,R1
         MVC   NEW.USING_DSECT(USING_DSECT_L),USING_DSECT
         ST    R1,PREV.USING_NEXT
         ST    R2,NEW.USING_PREV
         LR    R2,R1
         ICM   R7,15,USING_NEXT
         BNZ   INIT0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         ITRACE ID=MAIN0000
         MVC   DXD_FIRST_USING_DISPLAYED,DXD_FIRST_USING
         DROP  NEW,PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=INIT_V
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=BUILD
         L     R8,COMM_VDATA_ADDR                VDATA ADDR
         LH    R2,DXD_USINGS_PER_SCREEN          NBR PER SCREEN
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST TO DISPLAY
         BZ    MAIN0100                          NOTHING TO DISPLAY
MAIN0020 DS    0H
         ITRACE ID=USING,                                              +
               RDATA1=R7,                                              +
               DATA2=USING_PREV
         ST    R7,DXD_LAST_USING_DISPLAYED       SAVE ADDR
         LA    R1,1                              CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL
         MVC   0(LINE01_L,R8),LINE01
         USING LINE01,R8
         MVC   LINE01_BASE,USING_CHAR_REGISTER   REGISTER IN CHAR FORM
         UNPK  DXD_WORK(9),USING_BEGIN(5)
         MVC   LINE01_BEGIN,DXD_WORK
         TR    LINE01_BEGIN,COMM_HEXCHAR
         UNPK  DXD_WORK(9),USING_END(5)
         MVC   LINE01_END,DXD_WORK
         TR    LINE01_END,COMM_HEXCHAR
         A     R8,SPF_VWIDTH                     NEXT LINE
         DROP  R8

         MVC   0(LINE02_L,R8),LINE02
         USING LINE02,R8
         MVC   LINE02_DSECT(63),USING_DSECT_NAME DSECT NAME
         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL IN DSECT?
         BNE   MAIN0050                          YES
         OC    USING_DISP,USING_DISP             DISP ZERO?
         BZ    MAIN0050                          YES
         UNPK  DXD_WORK(9),USING_DISP(5)         UNPACK DISP
         LA    R1,LINE02_DSECT+L'LINE02_DSECT
MAIN0030 DS    0H
         CLI   0(R1),C' '                        BLANK?
         BNE   MAIN0040                          NO
         BCT   R1,MAIN0030
MAIN0040 DS    0H
         MVI   1(R1),C'+'
         MVC   2(8,R1),DXD_WORK                  COPY UNPACKED DISP
         TR    2(8,R1),COMM_HEXCHAR              TRANSLATE
         DROP  R8

MAIN0050 DS    0H
         A     R8,SPF_VWIDTH                     NEXT LINE
         MVC   0(LINE03_L,R8),LINE03
         USING LINE03,R8
         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL BLANK?
         BE    MAIN0080
         MVC   LINE03_LABEL(63),USING_DSECT_LABEL    LABEL NAME
         OC    USING_DISP,USING_DISP             DISP ZERO?
         BZ    MAIN0080
         UNPK  DXD_WORK(9),USING_DISP(5)         UNPACK DISP
         LA    R1,LINE03_LABEL+L'LINE03_LABEL
MAIN0060 DS    0H
         CLI   0(R1),C' '                        BLANK?
         BNE   MAIN0070                          NO
         BCT   R1,MAIN0060
MAIN0070 DS    0H
         MVI   1(R1),C'+'
         MVC   2(8,R1),DXD_WORK                  COPY UNPACKED DISP
         TR    2(8,R1),COMM_HEXCHAR              TRANSLATE
         DROP  R8

MAIN0080 DS    0H
         A     R8,SPF_VWIDTH

         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R2,MAIN0090
         B     MAIN0100
MAIN0090 DS    0H
         ICM   R7,15,USING_NEXT
         BNZ   MAIN0020
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Display the list of USING's                                  *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0100 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME1        SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   MAIN0600                          NO
         CLC   ABEND,SPF_ZCMD                    ABEND?
         BE    ABEND000                          YES
         CLC   CANCEL,SPF_ZCMD                   CANCEL?
         BE    MAIN9000                          YES
         CLC   CAN,SPF_ZCMD                      CAN(CEL)?
         BE    MAIN9000                          YES
         CLC   =C'NEW',SPF_ZCMD                  NEW?
         BE    MAIN0300                          YES
* ------------------------------------------------------------------- *
*        Check for delete request(s)                                  *
* ------------------------------------------------------------------- *
         L     R8,COMM_VDATA_ADDR                VDATA ADDR
         LH    R2,DXD_USINGS_PER_SCREEN          NBR PER SCREEN
         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST TO DISPLAY
         USING LINE01,R8                         DEFINE BASE
         NI    DXD_FLAGS,255-$DXD_DELETE         RESET FLAG
MAIN0110 DS    0H
         OI    LINE01_DELETE,C' '
         CLI   LINE01_DELETE,C' '                DELETE THIS USING?
         BE    MAIN0150                          NO
         OI    DXD_FLAGS,$DXD_DELETE             SET FLAG
         ICM   R1,15,USING_PREV                  PREVIOUS USING?
         BZ    MAIN0120                          NO
PREV     USING USING_DSECT,R1                    DEFINE BASE
         MVC   PREV.USING_NEXT,USING_NEXT        CHAIN PREV TO NEXT
         DROP  PREV
MAIN0120 DS    0H
         ICM   R1,15,USING_NEXT                  NEXT USING?
         BZ    MAIN0130                          NO
NEXT     USING USING_DSECT,R1                    DEFINE BASE
         MVC   NEXT.USING_PREV,USING_PREV        CHAIN NEXT TO PREV
         DROP  NEXT
MAIN0130 DS    0H
         C     R7,DXD_FIRST_USING                FIRST ON CHAIN?
         BNE   MAIN0140                          NO
         MVC   DXD_FIRST_USING,USING_PREV        CHANGE ADDRESS
         OC    DXD_FIRST_USING,DXD_FIRST_USING   PREVIOUS EXIST?
         BNZ   MAIN0140                          YES
         MVC   DXD_FIRST_USING,USING_NEXT        USE NEXT INSTEAD
MAIN0140 DS    0H
         ITRACE ID=FREEUSNG,                                           +
               RDATA1=R7,                                              +
               DATA2=USING_PREV
         LR    R1,R7                             COPY ADDRESS
         L     R7,USING_NEXT                     NEXT ON CHAIN
         FREEMAIN RU,                            FREE THIS USING BLOCK +
               A=(1),                                                  +
               LV=USING_DSECT_L
         B     MAIN0160
MAIN0150 DS    0H
         L     R7,USING_NEXT                     NEXT USING
MAIN0160 DS    0H
         A     R8,SPF_VWIDTH                     NEXT LINE (LINE02)
         A     R8,SPF_VWIDTH                     NEXT LINE (LINE03)
         A     R8,SPF_VWIDTH                     NEXT LINE (BLANK LINE)
         A     R8,SPF_VWIDTH                     NEXT LINE (LINE01)
         BCT   R2,MAIN0110
         TM    DXD_FLAGS,$DXD_DELETE             ANY DELETIONS?
         BO    MAIN0000                          YES
         ITRACE ID=NODELETE
         DROP  R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0200
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0220
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0240
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0250
         B     MAIN0100
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=BOTTOM
         ICM   R7,15,DXD_FIRST_USING             FIRST ON CHAIN
MAIN0210 DS    0H
         ST    R7,DXD_FIRST_USING_DISPLAYED      SAVE ADDRESS
         ICM   R7,15,USING_NEXT                  ANOTHER USING?
         BNZ   MAIN0210                          YES
         B     MAIN0010                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0200                          YES
         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL
         L     R7,DXD_FIRST_USING_DISPLAYED      1ST ON DISPLAY
MAIN0230 DS    0H
         ST    R7,DXD_FIRST_USING_DISPLAYED      SAVE USING BLOCK ADDR
         ICM   R7,15,USING_NEXT                  ANOTHER USING?
         BZ    MAIN0010                          NO
         BCT   R2,MAIN0230                       LOOP
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0240 DS    0H
         ITRACE ID=TOP
         L     R7,DXD_FIRST_USING                FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0250 DS    0H
         ITRACE ID=UP1
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0240                          YES
         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0260 DS    0H
         ST    R7,DXD_FIRST_USING_DISPLAYED      COPY ADDR
         ICM   R7,15,USING_PREV                  PREVIOUS USING?
         BZ    MAIN0010                          NO
         BCT   R2,MAIN0260                       LOOP
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*      Define new USING                                               *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=NEW
         MVC   SPF_ZCMD,COMM_BLANKS
* ------------------------------------------------------------------- *
*      Display list of KSDSes                                         *
* ------------------------------------------------------------------- *
         ITRACE ID=ULSTK
         L     R15,V_DISULSTK                    DISULSTK ENTRY POINT
         BALR  R14,R15                           DISPLAY LIST OF KSDSES
         ITRACE ID=ULSTK_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                           KSDS SELECTED?
         BZ    MAIN0310                          YES
         CH    R15,H4                            ASSEMBLED DSECTS?
         BE    MAIN0330                          YES
         B     MAIN9000                          ABORT
* ------------------------------------------------------------------- *
*        User has selected a KSDS                                     *
* ------------------------------------------------------------------- *
MAIN0310 DS    0H
         ITRACE ID=KSDS,                         KSDS WAS SELECTED     +
               RDATA1=R6
         L     R6,COMM_USING_KSDS                SELECTED KSDS
         USING KSDS_DSECT,R6                     DEFINE BASE
         TM    KSDS_FLAGS,$KSDS_DSECTS_READ      DSECTS READ?
         BO    MAIN0320                          YES
         L     R15,V_DISDREAD                    DSECT READER
         ITRACE ID=DREAD                         CALLING DSECT READER
         BALR  R14,R15                           READ DSECTS
         ITRACE ID=DREAD_RC,                                           +
               RDATA1=R15
MAIN0320 DS    0H
         MVC   COMM_USING_DSECT,KSDS_DSECT_NEXT  1ST DSECT
         B     MAIN0340
* ------------------------------------------------------------------- *
*        Use user supplied DSECTs (from option A)                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         SR    R6,R6                             NOT FROM KSDS
         MVC   COMM_USING_DSECT,COMM_DSECT_NEXT  1ST DSECT
* ------------------------------------------------------------------- *
*        Display list of DSECTs                                       *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         L     R15,V_DISULSTD                    DISPLAY DSECTS
         ITRACE ID=ULSTD
         BALR  R14,R15                           CALLING ULSTD
         ITRACE ID=ULSTD_RC,                                           +
               RDATA1=R15
         LTR   R15,R15                           DSECT SELECTED?
         BNZ   MAIN9000                          NO
         L     R5,COMM_USING_DSECT
         LTR   R6,R6                             DATA FROM A KSDS?
         BZ    MAIN0350                          NO
         TM    DSECT_FLAGS,$DSECT_LABELS_READ    LABELS READ?
         BO    MAIN0350                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R15,V_DISLREAD                    DISLREAD ENTRY POINT
         ITRACE ID=LREAD
         BALR  R14,R15                           CALL DISLREAD
         ITRACE ID=LREAD_RC,                                           +
               RDATA1=R15
         OI    DSECT_FLAGS,$DSECT_LABELS_READ    SET FLAG
* ------------------------------------------------------------------- *
*        Display list of labels in selected DSECT                     *
* ------------------------------------------------------------------- *
MAIN0350 DS    0H
         L     R15,V_DISULSTL                    DISPLAY LABELS
         ITRACE ID=ULSTL
         BALR  R14,R15                           CALLING ULSTL
         ITRACE ID=ULSTL_RC,                                           +
               RDATA1=R15
* ------------------------------------------------------------------- *
*        Display registers, start and end disp's                      *
* ------------------------------------------------------------------- *
MAIN0360 DS    0H
         MVC   SPF_REGISTER,COMM_BLANKS          INITIALIZE REGISTER
         MVC   SPF_BEGIN,C_ZERO                  INITIALIZE BEGIN DISP
         MVC   SPF_END,C_ZERO                    INITIALIZE END DISP
MAIN0370 DS    0H
         ITRACE ID=DISUREGD
         MVC   COMM_SPF_PANEL,PANEL_NAME2        SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15
         LTR   R15,R15                           RC = 0?
         BNZ   MAIN0010                          NO
         CLC   ABEND,SPF_ZCMD                    ABEND?
         BE    ABEND000                          YES
* ------------------------------------------------------------------- *
*        Verify base register                                         *
* ------------------------------------------------------------------- *
         OC    SPF_REGISTER,COMM_BLANKS          REGISTER BLANK?
         ITRACE ID=VER_REG,                                            +
               DATA1=SPF_REGISTER
         CLC   SPF_REGISTER,COMM_BLANKS          REGISTER BLANK?
         BE    MAIN0440                          YES
         LA    R1,L'SPF_REGISTER-1               LOOP LIMITER
MAIN0380 DS    0H
         CLI   SPF_REGISTER,C' '                 BLANK?
         BNE   MAIN0390                          NO
         MVC   SPF_REGISTER(L'SPF_REGISTER-1),SPF_REGISTER+1
         BCT   R1,MAIN0380                       LOOP
MAIN0390 DS    0H
         LA    R1,REGISTER_TABLE
         USING REGISTER_DSECT,R1
MAIN0400 DS    0H
         CLI   0(R1),X'FF'                       END OF TABLE?
         BE    MAIN0450                          YES
         CLC   SPF_REGISTER,REGISTER_NAME        REGISTER LOCATED?
         BE    MAIN0410                          YES
         LA    R1,REGISTER_DSECT_L(,R1)          NEXT
         B     MAIN0400
MAIN0410 DS    0H
         MVC   DXD_REGISTER,REGISTER_REGISTER    SAVE REGISTER
         MVC   DXD_REGISTER_NAME,REGISTER_NAME   SAVE REGISTER NAME
* ------------------------------------------------------------------- *
*        Verify begin and end disps                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=VER_BEG,                                            +
               DATA1=SPF_BEGIN
         LA    R1,SPF_BEGIN                      BEGIN DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_BEGIN                      CONVERSION OUTPUT
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15
         LTR   R15,R15                           ERRORS?
         BNZ   MAIN0460                          YES
         ITRACE ID=VER_END,                                            +
               DATA1=SPF_END
         LA    R1,SPF_END                        END DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_END                        CONVERSION OUTPUT
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS
         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT
         BALR  R14,R15
         LTR   R15,R15                           ERRORS?
         BNZ   MAIN0470                          YES
         CLC   DXD_END,DXD_BEGIN                 END LESS THAN BEGIN?
         BL    MAIN0480
* ------------------------------------------------------------------- *
*        We've put it off long enough, build a new USING block        *
* ------------------------------------------------------------------- *
         GETMAIN RU,                             GET MAIN STORAGE      +
               LV=USING_DSECT_L,                                       +
               LOC=ANY
         LR    R7,R1                             COPY ADDRESS
         ICM   R1,15,DXD_FIRST_USING             FIRST ON CHAIN NOW
         BZ    MAIN0420                          NONE ON CHAIN
FIRST    USING USING_DSECT,R1
         ST    R7,FIRST.USING_PREV               SET PREV IN OLD 1ST
         DROP  FIRST
MAIN0420 DS    0H
         XC    USING_DSECT(USING_DSECT_L),USING_DSECT
         MVC   USING_NEXT,DXD_FIRST_USING        COPY FIRST ON CHAIN
         ST    R7,DXD_FIRST_USING                ADD NEW TO CHAIN
         MVC   USING_EYE,USING_ID                IDENTIFY THE BLOCK
         L     R5,COMM_USING_DSECT               DSECT BLOCK
         ST    R5,USING_DSECT_ADDR               CHAIN USING TO DSECT
         MVC   USING_DSECT_NAME,DSECT_NAME       COPY DSECT NAME
         MVC   USING_DSECT_LABEL,COMM_BLANKS     INITIALIZE LABEL
         ICM   R4,15,COMM_USING_LABEL            LABEL?
         BZ    MAIN0430                          NO
         ST    R4,USING_LABEL_ADDR               CHAIN USING TO LABEL
         MVC   USING_DSECT_LABEL,LABEL_NAME      COPY LABEL NAME
MAIN0430 DS    0H
         MVC   USING_BEGIN,DXD_BEGIN             COPY BEGIN DISP
         MVC   USING_END,DXD_END                 COPY END DISP
         MVC   USING_REGISTER,DXD_REGISTER       COPY REGISTER
         MVC   USING_CHAR_REGISTER,DXD_REGISTER_NAME
         ITRACE ID=NEW_USNG,                                           +
               RDATA1=R7
         B     MAIN0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0440 DS    0H
         ITRACE ID=NO_REG
         MVI   COMM_MSG_ID,1
         B     MAIN0500
MAIN0450 DS    0H
         ITRACE ID=BAD_REG
         MVI   COMM_MSG_ID,2
         B     MAIN0500
MAIN0460 DS    0H
         ITRACE ID=BAD_BEG
         B     MAIN0510
MAIN0470 DS    0H
         ITRACE ID=BAD_END
         B     MAIN0510
MAIN0480 DS    0H
         ITRACE ID=END_LOW
         MVI   COMM_MSG_ID,2
MAIN0500 DS    0H
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
MAIN0510 DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1
         B     MAIN0370
* ------------------------------------------------------------------- *
*                                                                     *
*        Normal exit..                                                *
*        .  Free the old USING chain                                  *
*        .  Replace old chain with new                                *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0600 DS    0H
         ITRACE ID=SWITCH
         ICM   R7,15,COMM_USING_NEXT          FIRST ON 'OLD' CHAIN
         BZ    MAIN0620
MAIN0610 DS    0H
         LR    R1,R7                          COPY ADDRESS
         L     R7,USING_NEXT                  NEXT USING BLOCK
         FREEMAIN RU,                         FREE USING BLOCK         +
               A=(1),                                                  +
               LV=USING_DSECT_L
         LTR   R7,R7                          ANOTHER USING BLOCK?
         BNZ   MAIN0610                       YES
MAIN0620 DS    0H
         ITRACE ID=SWAP
         MVC   COMM_USING_NEXT,DXD_FIRST_USING
         XC    DXD_FIRST_USING,DXD_FIRST_USING
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN9000 DS    0H
         ITRACE ID=ABORT
         ICM   R7,15,DXD_FIRST_USING          FIRST USING
         BZ    EXIT0000
MAIN9010 DS    0H
         LR    R1,R7                          COPY USING BLOCK ADDR
         L     R7,USING_NEXT                  NEXT USING ON CHAIN
         ITRACE ID=FREEUSNG,                                           +
               RDATA1=R1
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=USING_DSECT_L
         LTR   R7,R7                          ANOTHER USING?
         BNZ   MAIN9010                       YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13
         L     R14,12(,R13)                   RESTORE REGISTERS
         SR    R15,R15                        SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDULIST)
V_DISDREAD    DC   V(DISDREAD)
V_DISLREAD    DC   V(DISLREAD)
V_DISULSTD    DC   V(DISULSTD)
V_DISULSTK    DC   V(DISULSTK)
V_DISULSTL    DC   V(DISULSTL)

H4            DC   H'4'

ABEND         DC   C'ABEND '
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
C_ZERO        DC   CL8'00000000'
PANEL_NAME1   DC   CL8'DISUDATA'
PANEL_NAME2   DC   CL8'DISUREGD'
USING_ID      DC   CL8'USING'

              LTORG

LINE01        DS   0C
              DC   AL1($ATTR_INPUT)
LINE01_DELETE DC   C' '
              DC   AL1($ATTR_HIGH)
              DC   C'Base '
              DC   AL1($ATTR_HIGH_YELLOW)
LINE01_BASE   DC   CL3' '
              DC   AL1($ATTR_NORMAL)
              DC   C' In effect from '
              DC   AL1($ATTR_HIGH_TURQUOISE)
LINE01_BEGIN  DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   C' to '
              DC   AL1($ATTR_HIGH_GREEN)
LINE01_END    DC   CL8' '
              DC   AL1($ATTR_NORMAL)
              DC   C'     '
LINE01_L      EQU  *-LINE01

LINE02        DS   0C
              DC   CL2' '
              DC   AL1($ATTR_HIGH)
              DC   C'DSECT'
              DC   AL1($ATTR_HIGH_YELLOW)
LINE02_DSECT  DC   CL71' '
LINE02_L      EQU  *-LINE02

LINE03        DS   0C
              DC   CL2' '
              DC   AL1($ATTR_HIGH)
              DC   C'LABEL'
              DC   AL1($ATTR_HIGH_YELLOW)
LINE03_LABEL  DC   CL71' '
LINE03_L      EQU  *-LINE03

REGISTER_TABLE  DS    0C
                DC    CL3'R0 ',X'00'
                DC    CL3'R1 ',X'01'
                DC    CL3'R2 ',X'02'
                DC    CL3'R3 ',X'03'
                DC    CL3'R4 ',X'04'
                DC    CL3'R5 ',X'05'
                DC    CL3'R6 ',X'06'
                DC    CL3'R7 ',X'07'
                DC    CL3'R8 ',X'08'
                DC    CL3'R9 ',X'09'
                DC    CL3'R10',X'0A'
                DC    CL3'R11',X'0B'
                DC    CL3'R12',X'0C'
                DC    CL3'R13',X'0D'
                DC    CL3'R14',X'0E'
                DC    CL3'R15',X'0F'
                DC    CL3'R00',X'00'
                DC    CL3'R01',X'01'
                DC    CL3'R02',X'02'
                DC    CL3'R03',X'03'
                DC    CL3'R04',X'04'
                DC    CL3'R05',X'05'
                DC    CL3'R06',X'06'
                DC    CL3'R07',X'07'
                DC    CL3'R08',X'08'
                DC    CL3'R09',X'09'
                DC    CL3'RA ',X'0A'
                DC    CL3'RB ',X'0B'
                DC    CL3'RC ',X'0C'
                DC    CL3'RD ',X'0D'
                DC    CL3'RE ',X'0E'
                DC    CL3'RF ',X'0F'
                DC    CL3'0  ',X'00'
                DC    CL3'1  ',X'01'
                DC    CL3'2  ',X'02'
                DC    CL3'3  ',X'03'
                DC    CL3'4  ',X'04'
                DC    CL3'5  ',X'05'
                DC    CL3'6  ',X'06'
                DC    CL3'7  ',X'07'
                DC    CL3'8  ',X'08'
                DC    CL3'9  ',X'09'
                DC    CL3'10 ',X'0A'
                DC    CL3'11 ',X'0B'
                DC    CL3'12 ',X'0C'
                DC    CL3'13 ',X'0D'
                DC    CL3'14 ',X'0E'
                DC    CL3'15 ',X'0F'
                DC    CL3'A  ',X'0A'
                DC    CL3'B  ',X'0B'
                DC    CL3'C  ',X'0C'
                DC    CL3'D  ',X'0D'
                DC    CL3'E  ',X'0E'
                DC    CL3'F  ',X'0F'
                DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDULIST                  DSECT
                          DS   18F

                          DS   A          DUMMY FOR 'PREV' ON CHAIN
DXD_FIRST_USING           DS   A          FIRST USING ON CHAIN

DXD_FIRST_USING_DISPLAYED DS   A          FIRST USING DISPLAYED
DXD_LAST_USING_DISPLAYED  DS   A          LAST USING DISPLAYED

DXD_CONV_PARMS            DS   0A
DXD_CONV_SOURCE           DS   A
DXD_CONV_OUT              DS   A

DXD_USINGS_PER_SCREEN     DS   H          USINGS PER SCREEN
DXD_NBR_DISPLAYED         DS   H          NBR OF USINGS DISPLAYED

DXD_WORK                  DS   CL9
DXD_REGISTER              DS   X
DXD_REGISTER_NAME         DS   CL3
DXD_BEGIN                 DS   XL4
DXD_END                   DS   XL4

DXD_FLAGS                 DS   X
$DXD_DELETE               EQU  X'80'      .. USING BLOCK DELETED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REGISTER_DSECT            DSECT
REGISTER_NAME             DS   CL3
REGISTER_REGISTER         DS   X
REGISTER_DSECT_L          EQU  *-REGISTER_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISULIST
./ ADD NAME=DISULSTD 0110-09104-09198-0821-00228-00217-00042-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISULSTD                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display DSECTs for USING definitions                             *
*                                                                     *
* ------------------------------------------------------------------- *
DISULSTD CSECT
DISULSTD AMODE 31
DISULSTD RMODE ANY
         USING DISULSTD,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISULSTD'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         L     R9,COMM_DISSPFD
         USING DXDULSTD,R13
         USING DISSPFD,R9
         USING DSECT_DSECT,R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_USING_KSDS,                                  +
               DATA2=COMM_USING_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   DXD_FIRST_DSECT,COMM_USING_DSECT
         MVC   DXD_FIRST_DSECT_DISPLAYED,COMM_USING_DSECT
MAIN0010 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14
         L     R8,COMM_VDATA_ADDR
         L     R7,SPF_VDEPTH
         ICM   R5,15,DXD_FIRST_DSECT_DISPLAYED
         BZ    MAIN0210
MAIN0020 DS    0H
         ST    R5,DXD_LAST_DSECT_DISPLAYED
         MVC   0(LINE01_L,R8),LINE01
         USING LINE01,R8
         MVC   LINE01_DSECT,DSECT_NAME           COPY NAME
         A     R8,SPF_VWIDTH
         BCT   R7,MAIN0030
         B     MAIN0040
MAIN0030 DS    0H
         ICM   R5,15,DSECT_NEXT                  NEXT DSECT
         BNZ   MAIN0020
* ------------------------------------------------------------------- *
*        Display list of DSECTS                                       *
* ------------------------------------------------------------------- *
MAIN0040 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                            RC = 0?
         BNZ   MAIN0210                          NO
         CLC   ABEND,SPF_ZCMD                    ABEND?
         BE    ABEND000                          YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,COMM_VDATA_ADDR
         L     R7,SPF_VDEPTH
         L     R5,DXD_FIRST_DSECT_DISPLAYED
MAIN0050 DS    0H
         CLI   LINE01_SELECT,C' '                SELECTED?
         BNE   MAIN0200                          YES
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0060
         B     MAIN0070
MAIN0060 DS    0H
         ICM   R5,15,DSECT_NEXT                  NEXT DSECT
         BNZ   MAIN0050
* ------------------------------------------------------------------- *
*        Nothing selected, check for scrolling                        *
* ------------------------------------------------------------------- *
MAIN0070 DS    0H
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0080
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0100
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0120
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0130
         B     MAIN0010
MAIN0080 DS    0H
         ITRACE ID=BOTTOM
         L     R5,DXD_FIRST_DSECT                FIRST DSECT
MAIN0090 DS    0H
         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR
         ICM   R5,15,DSECT_NEXT                  ANOTHER DSECT?
         BNZ   MAIN0090                          YES
         B     MAIN0010
MAIN0100 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 BOTTOM?
         BE    MAIN0080                          YES
         L     R5,DXD_FIRST_DSECT_DISPLAYED      FIRST DSECT DISPLAYED
         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL
MAIN0110 DS    0H
         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR
         ICM   R5,15,DSECT_NEXT                  ANOTHER DSECT?
         BZ    MAIN0010                          NO.. DISPLAY
         BCT   R2,MAIN0110                       LOOP
         B     MAIN0010
MAIN0120 DS    0H
         ITRACE ID=TOP
         MVC   DXD_FIRST_DSECT_DISPLAYED,DXD_FIRST_DSECT
         B     MAIN0010
MAIN0130 DS    0H
         CLI   SPF_ZSCROLLA,C'M'                 TOP?
         BE    MAIN0120                          YES
         L     R5,DXD_FIRST_DSECT_DISPLAYED      FIRST ON LAST DISPLAY
         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL
MAIN0140 DS    0H
         ITRACE ID=UP,                                                 +
               RDATA1=R5,                                              +
               RDATA2=R2
         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR
         ICM   R5,15,DSECT_PREV                  ANOTHER BLOCK?
         BZ    MAIN0010                          NO
         BCT   R2,MAIN0140                       LOOP
         B     MAIN0010
         DROP  R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=SELECTED,                                           +
               RDATA1=R5,                                              +
               DATA2=DSECT_NAME
         ST    R5,COMM_USING_DSECT               SAVE ADDR
         SR    R15,R15                           INDICATE 'SELECTED'
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         ITRACE ID=ABORT
         XC    COMM_USING_DSECT,COMM_USING_DSECT NO DSECT
         LA    R15,4                             SET RC
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R13,4(,R13)                       RESTORE REGISTER 13
         L     R14,12(,R13)                      RESTORE R14
         LM    R0,12,20(R13)                     RESTORE REGISTERS
         BR    R14                               RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDULSTD)

ABEND         DC   C'ABEND'
PANEL_NAME    DC   CL8'DISDMENU'

LINE01        DS   0C
              DC   CL2' '
              DC   AL1($ATTR_INPUT)
LINE01_SELECT DC   C' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
LINE01_DSECT  DC   CL63' '
LINE01_L      EQU  *-LINE01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDULSTD                  DSECT
                          DS  18F

DXD_FIRST_DSECT           DS  A          FIRST DSECT ON CHAIN
DXD_FIRST_DSECT_DISPLAYED DS  A          FIRST DSECT DISPLAYED
DXD_LAST_DSECT_DISPLAYED  DS  A          LAST  DSECT DISPLAYED

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISULSTD
./ ADD NAME=DISULSTK 0111-09104-09198-0822-00268-00796-00116-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISULSTK                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display the list of pre-processed DSECT KSDSes for USINGs.       *
*                                                                     *
* ------------------------------------------------------------------- *
DISULSTK CSECT
DISULSTK AMODE 31
DISULSTK RMODE ANY
         USING DISULSTK,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISULSTK'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDULSTK,R13
         ITRACE ID=ENTRY
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING USING_DSECT,R7
         USING KSDS_DSECT,R6
         USING DSECT_DSECT,R4
         USING LABEL_DSECT,R3
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*      Display list of DSECT KSDSes                                   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0100 DS    0H
         ITRACE ID=NEW
         MVC   SPF_ZCMD,COMM_BLANKS
         ICM   R1,15,COMM_KSDS_NEXT              ANY KSDSES?
         BZ    MAIN0140                          NO
         ST    R1,DXD_FIRST_KSDS_DISPLAYED       SAVE FIRST KSDS
MAIN0110 DS    0H
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED
         BZ    MAIN0140                          NONE TO DISPLAY
         L     R8,COMM_VDATA_ADDR
         L     R2,SPF_VDEPTH                     NBR OF LINES
MAIN0120 DS    0H
         ST    R6,DXD_LAST_KSDS_DISPLAYED        SAVE LAST DISPLAYED
         MVC   0(LINE01_L,R8),LINE01
         USING LINE01,R8
         MVC   LINE01_DSNAME,KSDS_DSNAME
         DROP  R8
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R2,MAIN0130
         B     MAIN0140
MAIN0130 DS    0H
         ICM   R6,15,KSDS_NEXT                   NEXT KSDS
         BNZ   MAIN0120
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Display the list of KSDS's                                   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0140 DS    0H
         MVI   SPF_FUNCTION,C' '                 INITIALIZE FUNCTION
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   MAIN0330                          NO
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_FUNCTION,C' '                 'A' OPTION DSECTS?
         BNE   MAIN0300                          YES
         L     R6,DXD_FIRST_KSDS_DISPLAYED       FIRST KSDS DISPLAYED
         L     R8,COMM_VDATA_ADDR
         L     R2,SPF_VDEPTH
         USING LINE01,R8
MAIN0150 DS    0H
         CLI   LINE01_SELECT,C' '                THIS DATASET SELECTED?
         BNE   MAIN0310                          YES
         ICM   R6,15,KSDS_NEXT                   NEXT KSDS
         BZ    MAIN0140                          END OF CHAIN
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R2,MAIN0150                       LOOP
         DROP  R8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0160
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0180
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0200
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0210
         B     MAIN0140                          NO SCROLL REQUESTED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0160 DS    0H
         ITRACE ID=BOTTOM
         ICM   R6,15,COMM_KSDS_NEXT              FIRST KSDS
         BZ    MAIN0110                          NO KSDS(ES) DEFINED
MAIN0170 DS    0H
         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR
         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?
         BNZ   MAIN0170                          YES
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0180 DS    0H
         ITRACE ID=DOWN
         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED    FIRST KSDS ON DISPLAY
         BZ    MAIN0110                          NO KSDS(ES)
         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL
MAIN0190 DS    0H
         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR
         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?
         BZ    MAIN0110                          NO
         BCT   R2,MAIN0190                       LOOP
         B     MAIN0110                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=TOP
         MVC   DXD_FIRST_KSDS_DISPLAYED,COMM_KSDS_NEXT
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         ITRACE ID=UP
         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED    FIRST KSDS ON DISPLAY
         BZ    MAIN0220
         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL
MAIN0220 DS    0H
         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR
         ICM   R6,15,KSDS_PREV                   ANOTHER KSDS?
         BZ    MAIN0110                          NO
         BCT   R2,MAIN0220                       LOOP
         B     MAIN0110                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*        Display DSECTs from option 'A'                               *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=A_DSECTS
         SR    R6,R6                             NOT A KSDS
         LA    R15,4                             SET RC
         B     MAIN0320
* ------------------------------------------------------------------- *
*        A KSDS was selected                                          *
* ------------------------------------------------------------------- *
MAIN0310 DS    0H
         ITRACE ID=SELECTED
         ST    R6,COMM_USING_KSDS
         SR    R15,R15                           SET RC
MAIN0320 DS    0H
         XC    COMM_USING_DSECT,COMM_USING_DSECT
         XC    COMM_USING_LABEL,COMM_USING_LABEL
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=ABORT
         XC    COMM_USING_KSDS,COMM_USING_KSDS
         LA    R15,8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R13,4(,R13)                       RESTORE REGISTER 13
         L     R14,12(,R13)                      RESTORE R14
         LM    R0,12,20(R13)                     RESTORE REGISTERS
         BR    R14                               RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDULSTK)

PANEL_NAME    DC   CL8'DISKMENU'

              LTORG


LINE01        DS   0C
              DC   CL2' '
              DC   AL1($ATTR_INPUT)
LINE01_SELECT DC   C' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
LINE01_DSNAME DC   CL44' '
LINE01_L      EQU  *-LINE01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDULSTK                  DSECT
                          DS  18F

                          DS  A          DUMMY FOR 'PREV' ON CHAIN

DXD_FIRST_KSDS_DISPLAYED  DS  A          FIRST KSDS DISPLAYED
DXD_LAST_KSDS_DISPLAYED   DS  A          LAST KSDS DISPLAYED

DXD_DSECT_ADDR            DS  A

                          COPY PPDDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISULSTK
./ ADD NAME=DISULSTL 0113-09104-09198-0823-00248-01006-00148-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISULSTL                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display LABELs in a DSECT for USING definitions                  *
*                                                                     *
* ------------------------------------------------------------------- *
DISULSTL CSECT
DISULSTL AMODE 31
DISULSTL RMODE ANY
         USING DISULSTL,R11,R10
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISULSTL'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDULSTL,R13
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_USING_KSDS,         .. RELATED KSDS          +
               DATA2=COMM_USING_DSECT         .. RELATED DSECT
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         L     R5,COMM_USING_DSECT
         USING DSECT_DSECT,R5
         USING LABEL_DSECT,R4
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Display labels for selected DSECT                            *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   DXD_FIRST_LABEL,DSECT_LABEL_NEXT
         MVC   DXD_FIRST_LABEL_DISPLAYED,DSECT_LABEL_NEXT
         XC    COMM_USING_LABEL,COMM_USING_LABEL
MAIN0010 DS    0H
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14
         L     R8,COMM_VDATA_ADDR
         L     R7,SPF_VDEPTH
         ICM   R4,15,DXD_FIRST_LABEL_DISPLAYED
         BZ    MAIN0210
MAIN0020 DS    0H
         ITRACE ID=LABEL,                                              +
               RDATA1=R4,                                              +
               DATA2=LABEL_NAME
         ST    R4,DXD_LAST_LABEL_DISPLAYED
         MVC   0(LINE06_L,R8),LINE06
         USING LINE06,R8
         UNPK  DXD_WORK(9),LABEL_DISP(5)      UNPACK DISP
         MVI   LINE06_SELECT,C' '
         MVC   LINE06_DISP,DXD_WORK
         TR    LINE06_DISP,COMM_HEXCHAR
         MVC   LINE06_LABEL,LABEL_NAME
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0030
         B     MAIN0040
MAIN0030 DS    0H
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   MAIN0020
* ------------------------------------------------------------------- *
*                                                                     *
*        Display labels                                               *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0040 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME      SET PANEL NAME
         L     R15,V_DISDISP                  DISP ENTRY POINT
         BALR  R14,R15                        DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                         RC = 0?
         BNZ   MAIN0220                       NO
         CLC   ABEND,SPF_ZCMD                 ABEND?
         BE    ABEND000                       YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,COMM_VDATA_ADDR             VDATA ADDR
         L     R7,SPF_VDEPTH
         L     R4,DXD_FIRST_LABEL_DISPLAYED
MAIN0050 DS    0H
         CLI   LINE06_SELECT,C' '             SELECTED?
         BNE   MAIN0200                       YES
         A     R8,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0060
         B     MAIN0070
MAIN0060 DS    0H
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   MAIN0050                       LOOP
* ------------------------------------------------------------------- *
*        Nothing selected, check for scrolling                        *
* ------------------------------------------------------------------- *
MAIN0070 DS    0H
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                 BOTTOM?
         BE    MAIN0080                       YES
         CLI   SPF_ZVERB,C'D'                 DOWN?
         BE    MAIN0100
         CLI   SPF_ZVERB,C'T'                 TOP?
         BE    MAIN0120
         CLI   SPF_ZVERB,C'U'                 UP?
         BE    MAIN0130
         B     MAIN0010
MAIN0080 DS    0H
         ITRACE ID=BOTTOM
         L     R4,DXD_FIRST_LABEL             FIRST LABEL
MAIN0090 DS    0H
         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR
         ICM   R4,15,LABEL_NEXT               ANOTHER LABEL?
         BNZ   MAIN0090                       YES
         B     MAIN0010
MAIN0100 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'              BOTTOM?
         BE    MAIN0080                       YES
         L     R4,DXD_FIRST_LABEL_DISPLAYED   FIRST LABEL DISPLAYED
         L     R2,SPF_ZSCROLLN                NBR TO SCROLL
MAIN0110 DS    0H
         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR
         ICM   R4,15,LABEL_NEXT               ANOTHER LABEL?
         BZ    MAIN0010                       NO.. DISPLAY
         BCT   R2,MAIN0110                    LOOP
         B     MAIN0010
MAIN0120 DS    0H
         ITRACE ID=TOP
         MVC   DXD_FIRST_LABEL_DISPLAYED,DXD_FIRST_LABEL
         B     MAIN0010
MAIN0130 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'              TOP?
         BE    MAIN0120                       YES
         L     R4,DXD_FIRST_LABEL_DISPLAYED   FIRST ON LAST DISPLAY
         L     R2,SPF_ZSCROLLN                NBR TO SCROLL
MAIN0140 DS    0H
         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR
         ICM   R4,15,LABEL_PREV               ANOTHER BLOCK?
         BZ    MAIN0010                       NO
         BCT   R2,MAIN0140                    LOOP
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=SELECTED
         ST    R4,COMM_USING_LABEL            SAVE LABEL BLOCK ADDR
         SR    R15,R15                        SET RC
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0210 DS    0H
         ITRACE ID=NONE
         XC    COMM_USING_LABEL,COMM_USING_LABEL
         LA    R15,4                          SET RC
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         ITRACE ID=ABORT
         XC    COMM_USING_LABEL,COMM_USING_LABEL
         LA    R15,8                          SET RC
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R13,4(,R13)                    RESTORE REGISTER 13
         L     R14,12(,R13)                   RESTORE R14
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDULSTL)

PANEL_NAME    DC   CL8'DISLMENU'
ABEND         DC   C'ABEND'

              LTORG

LINE06        DS   0C
              DC   CL2' '
              DC   AL1($ATTR_INPUT)
LINE06_SELECT DC   C' '
              DC   AL1($ATTR_HIGH_YELLOW)
LINE06_DISP   DC   CL8' '
              DC   AL1($ATTR_HIGH_TURQUOISE)
LINE06_LABEL  DC   CL63' '
LINE06_L      EQU  *-LINE06

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDULSTL                  DSECT
                          DS  18F

DXD_FIRST_LABEL           DS  A               FIRST LABEL ON CHAIN
DXD_FIRST_LABEL_DISPLAYED DS  A               FIRST LABEL DISPLAYED
DXD_LAST_LABEL_DISPLAYED  DS  A               LAST LABEL DISPLAYED

DXD_WORK                  DS  XL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB

              IFGRPL  AM=VSAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISULSTL
./ ADD NAME=DISVAR   0119-08351-09198-0824-00232-00193-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISVAR                                                *
*                                                                     *
*  Define or delete SPF variables.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DISVAR   CSECT
DISVAR   AMODE 31
DISVAR   RMODE ANY
         USING DISVAR,R15
         USING DISCOMM,R12
         B     INIT0000
MODID    DC    CL8'DISVAR'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    A(VARMGREND-DISVAR)
INIT0000 DS    0H
         STM   R14,R12,12(R13)           SAVE REGISTERS
         LR    R10,R15                   COPY BASE ADDRESS
         DROP  R15
         USING DISVAR,R10
         L     R15,COMM_DXD_ADDRESS      DXD AREA BASE ADDRESS
         A     R15,DXD_START             PLUS OFFSET TO OUR PORTION
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                   COPY DXD AREA ADDRESS
         USING DXDVMGR,R13               DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         MVC   DXD_VAR_NAMES(VAR_NAME_L),VAR_NAME_I
* ------------------------------------------------------------------- *
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_VAR_FUNC
         L     R8,COMM_DISSPFD           SPF DATA
         USING DISSPFD,R8                DEFINE BASE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
VAR0010  DS    0H
         CLI   COMM_VAR_FUNC,$VAR_DEFINE DEFINE VARIABLES?
         BE    VAR0100                   YES
         CLI   COMM_VAR_FUNC,$VAR_DELETE DELETE VARIABLE?
         BE    VAR0200                   YES
         ITRACE ID=BADCMD
         ABEND 1,DUMP,,USER              BAD COMMAND
* ------------------------------------------------------------------- *
*        PROCESS DEFINE COMMANDS                                      *
* ------------------------------------------------------------------- *
VAR0100  DS    0H
         ITRACE ID=DEFINE,               DEFINE VARIABLES              +
               DATA1=COMM_DISSPFV,       .. FIRST VARIABLE DEFINITION  +
               DATA2=COMM_DISSPFD        .. FIRST VARIABLE'S DATA ADDR
         L     R6,COMM_DISSPFV           FIRST VARIABLE
VAR0110  DS    0H
         USING VARDSECT,R6               DEFINE BASE
         TM    VAR_FLAGS,$VAR_DEFINED    VARIABLE ALREADY DEFINED?
         BO    VAR0120                   YES
         TM    VAR_FLAGS,$VAR_NEVER      NEVER DEFINE?
         BO    VAR0120                   YES
         MVC   COMM_SPF_FUNCTION,VDEFINE SET COMMAND
         LA    R1,VAR_NAME               VARIABLE'S NAME
         ST    R1,COMM_SPF_2             SET NAME'S ADDRESS
         SR    R1,R1                     CLEAR REGISTER
         ICM   R1,3,VAR_DISP             DISPLACEMENT TO DATA
         A     R1,COMM_DISSPFD           PLUS BASE ADDRESS
         ST    R1,COMM_SPF_3             SET ADDRESS
         LA    R1,VAR_FORM               DATA FORMAT
         ST    R1,COMM_SPF_4             SET ADDRESS
         LA    R1,VAR_LENGTH             VARIABLE LENGTH
         ST    R1,COMM_SPF_5             SET ADDRESS
         OI    COMM_SPF_5,X'80'          SET END-OF-LIST
         ITRACE ID=VDEF,                 DEFINING A VARIABLE           +
               DATA1=VAR_NAME,           .. VARIABLE'S NAME            +
               DATA2=COMM_SPF_3          .. ADDRESS OF DATA
         LA    R1,COMM_SPF_PARMS         SPF PARM LIST ADDRESS
         L     R15,COMM_ISPLINK          SPF LINK ENTRY POINT ADDRESS
         BALR  R14,R15                   LINK TO SPF
         LTR   R15,R15                   VDEFINE SUCCESSFUL?
         BNZ   ERR0010                   NO
         OI    VAR_FLAGS,$VAR_DEFINED    VARIABLE HAS BEEN DEFINED
         TM    VAR_FLAGS,$VAR_VGET       VGET FROM PROFILE?
         BNO   VAR0120                   NO
         ITRACE ID=VGET,                                               +
               DATA1=VAR_NAME
         MVC   DXD_VAR_NAME,VAR_NAME     COPY VARIABLE NAME
         MVC   COMM_SPF_FUNCTION,VGET    VGET COMMAND
         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME
         ST    R1,COMM_SPF_2             SET NAME
         LA    R1,PROFILE                VARIABLE POOL NAME
         ST    R1,COMM_SPF_3             SET ADDRESS
         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK          SPF ENTRY POINT
         BALR  R14,R15
         ITRACE ID=VGET_RC,                                            +
               RDATA1=R15
         ITRACE ID=VPUT,                                               +
               DATA1=VAR_NAME
         MVC   COMM_SPF_FUNCTION,VPUT    VPUT COMMAND
         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME
         ST    R1,COMM_SPF_2             SET NAME
         LA    R1,SHARED                 VARIABLE POOL NAME
         ST    R1,COMM_SPF_3             SET ADDRESS
         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK          SPF ENTRY POINT
         BALR  R14,R15
         ITRACE ID=VPUT_RC,                                            +
               RDATA1=R15
VAR0120  DS    0H
         LA    R6,VARDSECT_L(,R6)        NEXT VARIABLE
         CLI   0(R6),X'FF'               END OF TABLE?
         BNE   VAR0110                   NO
         B     EXIT0000                  ALL PROCESSED
* ------------------------------------------------------------------- *
*        PROCESS VARIABLE DELETION                                    *
* ------------------------------------------------------------------- *
VAR0200  DS    0H
         ITRACE ID=DELETE                DELETING ALL VARIABLES
         L     R6,COMM_DISSPFV           START WITH FIRST VARIABLE
VAR0210  DS    0H
         CLI   0(R6),X'FF'               END OF TABLE?
         BE    EXIT0000                  YES
         TM    VAR_FLAGS,$VAR_DEFINED    VARIABLE DEFINED?
         BNO   VAR0230                   NO
         TM    VAR_FLAGS,$VAR_VPUT       VPUT BEFORE DELETING?
         BNO   VAR0220                   NO

         ITRACE ID=VPUT,                                               +
               DATA1=VAR_NAME
         MVC   DXD_VAR_NAME,VAR_NAME     COPY VARIABLE NAME
         MVC   COMM_SPF_FUNCTION,VPUT    VPUT COMMAND
         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME
         ST    R1,COMM_SPF_2             SET NAME
         LA    R1,PROFILE                SAVE IN PROFILE
         ST    R1,COMM_SPF_3             SET ADDRESS
         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK          SPF ENTRY POINT
         BALR  R14,R15
         ITRACE ID=VPUT_RC,                                            +
               RDATA1=R15


VAR0220  DS    0H
         ST    R6,COMM_SPF_2             SET VARIABLE NAME ADDRESS
         OI    COMM_SPF_2,X'80'          FLAG END-OF-LIST
         MVC   COMM_SPF_FUNCTION,VDELETE COMMAND'S ADDRESS
         ITRACE ID=VDEL,                 DELETING A VARIABLE           +
               DATA1=VAR_NAME            .. VARIABLE NAME
         LA    R1,COMM_SPF_PARMS         PARM LIST'S ADDRESS
         L     R15,COMM_ISPLINK          SPF LINK ENTRY POINT ADDRESS
         BALR  R14,R15                   LINK TO SPF
         LTR   R15,R15                   VDELETE SUCCESSFUL?
         BNZ   ERR0020                   NO
VAR0230  DS    0H
         LA    R6,VARDSECT_L(R6)         NEXT VARIABLE
         B     VAR0210                   PROCESS ALL VARIABLES
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=VDEFFAIL,                                           +
               RDATA1=R15
         MVI   COMM_MSG_ID,1
         B     ERR0100
ERR0020  DS    0H
         ITRACE ID=VDELFAIL,                                           +
               RDATA1=R15
         MVI   COMM_MSG_ID,2
ERR0100  DS    0H
         MVC   COMM_INFO_01(L'VAR_NAME),VAR_NAME
         STH   R15,COMM_INFO_02
         L     R15,V_DISMSG
         BALR  R14,R15
         TPUT  COMM_MSG_1,L'COMM_MSG_1
         DC    H'0'
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)               RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)           RESTORE REMAINING REGISTERS
         BR    R14                       RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDVMGR)

VAR_NAME_I DC    F'1'
           DC    F'0'
           DC    CL8' '
VAR_NAME_L EQU   *-VAR_NAME_I

PROFILE    DC    CL8'PROFILE'
SHARED     DC    CL8'SHARED'
VDEFINE    DC    CL8'VDEFINE'
VDELETE    DC    CL8'VDELETE'
VGET       DC    CL8'VGET'
VPUT       DC    CL8'VPUT'
           LTORG
VARMGREND  EQU   *
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDVMGR       DSECT
              DS    18F
DXD_CSECT     DS    CL8

DXD_VAR_NAMES DS   0A
              DS    F
              DS    F
DXD_VAR_NAME  DS    CL8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISCOMM   TYPE=DSECT
         COPY      DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     VARDSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISSPFD  TYPE=DSECT

         IFGACB   AM=VSAM
ACB_L    EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         END      DISVAR
./ ADD NAME=DISVBU   0106-08336-09117-1039-00141-00131-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Verify BASE statements reference disp's within the CSECT     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISVBU   CSECT
DISVBU   AMODE 31
DISVBU   RMODE ANY
         USING DISCOMM,R12
         USING DISVBU,R11
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISVBU'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         L     R15,COMM_DXD_ADDRESS
         A     R15,DXD_START
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         USING DXDVBU,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT
         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01
         BAL   R10,DEBUG000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ICM   R8,15,COMM_BASE_NEXT           FIRST BASE ENTRY
         USING BASE_DSECT,R8
         BZ    EXIT0000                       NO BASES DEFINED
BASE0000 DS    0H
         CLC   BASE_BEGIN,COMM_CSECT_LENGTH   BEYOND END OF CSECT?
         BH    BASE0010                       YES
         CLC   BASE_END,COMM_CSECT_LENGTH     BEYOND END OF CSECT?
         BNH   BASE0020                       NO
         ITRACE ID=BIG_END                    END DISP IS TOO LARGE
         MVI   COMM_MSG_ID,1
         MVC   COMM_INFO_01(3),BASE_CHAR_REGISTER
         MVC   COMM_INFO_02(4),BASE_END
         MVC   COMM_INFO_03(4),COMM_CSECT_LENGTH
         BAL   R9,MSG0000                     ISSUE MESSAGE
         MVC   BASE_END,COMM_CSECT_LENGTH     LIMIT TO CSECT LENGTH
         B     BASE0020
BASE0010 DS    0H
         ITRACE ID=BIG_BEG                    BEGIN DISP IS TOO LARGE
         MVI   COMM_MSG_ID,2
         MVC   COMM_INFO_01(3),BASE_CHAR_REGISTER
         MVC   COMM_INFO_02(4),BASE_BEGIN
         BAL   R9,MSG0000                     ISSUE MESSAGE
         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SET ABORT FLAG
BASE0020 DS    0H
         ICM   R8,15,BASE_NEXT                NEXT BASE BLOCK
         BNZ   BASE0000                       LOOP
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME
         L     R15,V_DISMSG                   DISMSG ENTRY POINT
         BALR  R14,R15                        BUILD MESSAGE(S)
         LA    R2,COMM_MSG_1                  1ST MESSAGE
         LA    R3,5                           MAX MSGS
MSG0010  DS    0H
         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?
         BER   R9                             YES
         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE
         BAL   R10,PRT0000                    PRINT MESSAGE
         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE
         BCT   R3,MSG0010
         BR    R9
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
PRT0000  DS    0H
         CLI   COMM_RUN_MODE,$COMM_RUN_BATCH  BATCH MODE?
         BNER  R10                            NO.. DON'T PRINT
         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND
         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT
         BALR  R14,R15                        LINK TO PRINT MODULE
         BR    R10                            RETURN
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DEBUG000 DS    0H
         ITRACE ID=CALLDBUG,                                           +
               RDATA1=R10
         L     R15,V_DISDEBUG
         BALR  R14,R15
         BR    R10
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02
         BAL   R10,DEBUG000
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START DC   Q(DXDVBU)

MSG01    DS    0C
         DC    C'DISVBU01I    Entering DISVBU'
MSG01_L  EQU   *-MSG01

MSG02    DS    0C
         DC    C'DISVBU02I    Exiting DISVBU'
MSG02_L  EQU   *-MSG02
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDVBU       DSECT
             DS    18F
DXD_CSECT    DS    CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
             DISCOMM  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
             COPY  DISASMDA

             IFGACB  AM=VSAM
ACB_L        EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
             COPY  REGEQU
             END   DISVBU
./ ADD NAME=DISVDATA 0106-08352-09198-0825-00273-00242-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISVDATA                                              *
*                                                                     *
*     There are three functions:                                      *
*       GETMAIN                                                       *
*       FREEMAIN                                                      *
*       VDEFINE                                                       *
*                                                                     *
*                                                                     *
*   On GETMAINs, issue a PQUERY to determine the dimensions of        *
*   the dynamic area on the SPF panel.  The address of the panel      *
*   name is passed in R1.  At exit, R0 is the length of the area      *
*   and R1 is the address of the area GETMAINed.                      *
*                                                                     *
*   On FREEMAINs, the length of the area to be freed is passed        *
*   in R0, the address is passed in R1.                               *
*                                                                     *
*   On VDEFINEs, the length of the area to be VDEFINED is passed      *
*   in R0, the address is passed in R1.                               *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISVDATA CSECT
DISVDATA AMODE 31
DISVDATA RMODE ANY
         USING DISCOMM,R12
         USING DISVDATA,R15
         B     INIT0000
MODID    DC    CL8'DISVDATA'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R10,R15               COPY ENTRY POINT
         DROP  R15
         USING DISVDATA,R10          DEFINE BASE
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)                       CHAIN  SAVE AREA
         ST    R15,8(,R13)                       CHAIN SAVE AREA
         LR    R13,R15                           SET SAVE AREA ADDRESS
         USING DXDVDATA,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               DATA1=COMM_VDATA_FUNC
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R9,COMM_DISSPFD       SPF DATA
         USING DISSPFD,R9            DEFINE BASE
         CLI   COMM_VDATA_FUNC,$VDATA_GETMAIN
         BE    VDATA010
         CLI   COMM_VDATA_FUNC,$VDATA_FREEMAIN
         BE    VDATA030
         CLI   COMM_VDATA_FUNC,$VDATA_VDEFINE
         BE    VDATA020
         CLI   COMM_VDATA_FUNC,$VDATA_VDELETE
         BE    VDATA040
         ITRACE ID=BAD_FUNC,                                           +
               DATA1=COMM_VDATA_FUNC
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
*        GETMAIN                                                      *
*                                                                     *
*        Determine panel size                                         *
*        COMPUTE SIZE OF AREA                                         *
*        ISSUE SYSTEM GETMAIN                                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
VDATA010 DS    0H
         ITRACE ID=PQUERY,           ISSUING PQUERY                    +
               DATA1=0(R3)           .. PANEL NAME
         MVC   COMM_SPF_FUNCTION,PQUERY
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2         SET ADDR OF PANEL NAME
         LA    R1,CVDATA             AREA NAME WITHIN THE PANEL
         ST    R1,COMM_SPF_3         SET IN PARM LIST
         LA    R1,CVTYPE             AREA TYPE
         ST    R1,COMM_SPF_4         SET IN PARM LIST
         LA    R1,CVWIDTH            SCREEN DEPTH
         ST    R1,COMM_SPF_5         SET IN PARM LIST
         LA    R1,CVDEPTH            SCREEN WIDTH
         ST    R1,COMM_SPF_6         SET IN PARM LIST
         LA    R1,CVROW              SCREEN ROW
         ST    R1,COMM_SPF_7         SET IN PARM LIST
         LA    R1,CVCOL              SCREEN COLUMN
         ST    R1,COMM_SPF_8         SET IN PARM LIST
         OI    COMM_SPF_8,X'80'      FLAG 'END-OF-LIST'
         LA    R1,COMM_SPF_PARMS     PQUERY PARM LIST ADDRESS
         L     R15,COMM_ISPLINK      SPF INTERFACE'S ADDRESS
         BALR  R14,R15               ISSUE QUERY
         ITRACE ID=PQUERYRC,                                           +
               RDATA1=R15
         LTR   R15,R15               PQUERY SUCCESSFUL?
         BNZ   ERR0010               NO
* ------------------------------------------------------------------- *
*        Compute size of VDATA                                        *
* ------------------------------------------------------------------- *
         L     R0,SPF_VWIDTH         DYNAMIC AREA WIDTH
         MH    R0,SPF_VDEPTH+2       MULTIPLY BY DEPTH
* ------------------------------------------------------------------- *
*        Acquire storage for dynamic area                             *
* ------------------------------------------------------------------- *
         ITRACE ID=DYNA_W_D,         DYNAMIC AREA WIDTH AND DEPTH      +
               DATA1=SPF_VWIDTH,                                       +
               DATA2=SPF_VDEPTH
         ST    R0,COMM_VDATA_SIZE    SAVE SIZE
         GETMAIN RU,                                                   +
               LV=(R0),                                                +
               LOC=ANY
         ST    R1,COMM_VDATA_ADDR    SAVE ADDRESS
         ITRACE ID=GETMAIN,                                            +
               RDATA1=R1,                                              +
               RDATA2=R0
         B     EXIT0000
* ------------------------------------------------------------------- *
*        DEFINE 'VDATA' TO SPF                                        *
* ------------------------------------------------------------------- *
VDATA020 DS    0H
         MVC   COMM_SPF_FUNCTION,VDELETE
         LA    R1,CVDATA
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
         ITRACE ID=VDEL_1,                                             +
               RDATA1=R1
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK
         BALR  R14,R15                    VDELETE EXISTING VDATA
         ITRACE ID=VDEFINE,                                            +
               DATA1=COMM_VDATA_ADDR,                                  +
               DATA2=COMM_VDATA_SIZE
         MVC   COMM_SPF_FUNCTION,VDEFINE
         LA    R1,CVDATA                  VARIABLE NAME ADDRESS
         ST    R1,COMM_SPF_2              SET ADDRESS IN PARM LIST
         MVC   COMM_SPF_3,COMM_VDATA_ADDR DATA ADDRESS
         LA    R1,CHARFORM                DATA FORMAT ADDRESS
         ST    R1,COMM_SPF_4              SET ADDRESS IN PARM LIST
         LA    R1,COMM_VDATA_SIZE         SIZE (LENGTH) OF VDATA
         ST    R1,COMM_SPF_5              SET ADDRESS
         OI    COMM_SPF_5,X'80'           FLAG END-OF-LIST
         LA    R1,COMM_SPF_PARMS          SPF PARM LIST ADDRESS
         L     R15,COMM_ISPLINK           SPF ENTRY POINT
         BALR  R14,R15                    DEFINE 'VDATA'
         LTR   R15,R15                    DEFINE SUCCESSFUL?
         BNZ   ERR0030                    NO
         B     EXIT0000
* ------------------------------------------------------------------- *
*        FREEMAIN VDATA                                               *
* ------------------------------------------------------------------- *
VDATA030 DS    0H
         MVC   COMM_SPF_FUNCTION,VDELETE
         LA    R1,CVDATA
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
         ITRACE ID=VDEL_2,                                             +
               RDATA1=R1
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK
         BALR  R14,R15                    VDELETE VDATA
         ITRACE ID=FREEMAIN,                                           +
               DATA1=COMM_VDATA_ADDR,                                  +
               DATA2=COMM_VDATA_SIZE
         ICM   R1,15,COMM_VDATA_ADDR
         BZ    EXIT0000
         L     R0,COMM_VDATA_SIZE
         FREEMAIN RU,                     FREEMAIN VDATA               +
               A=(R1),                                                 +
               LV=(R0)
         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR
         XC    COMM_VDATA_SIZE,COMM_VDATA_SIZE
         B     EXIT0000
* ------------------------------------------------------------------- *
*        VDELETE  VDATA                                               *
* ------------------------------------------------------------------- *
VDATA040 DS    0H
         MVC   COMM_SPF_FUNCTION,VDELETE
         LA    R1,CVDATA
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
         ITRACE ID=VDEL_3,                                             +
               RDATA1=R1
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK
         BALR  R14,R15                    VDELETE VDATA
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=PQRYFAIL
         MVI   COMM_MSG_ID,1
         B     ERR0100
ERR0020  DS    0H
         ITRACE ID=VDELFAIL
         MVI   COMM_MSG_ID,2
         B     ERR0100
ERR0030  DS    0H
         ITRACE ID=VDEFFAIL
         MVI   COMM_MSG_ID,3
ERR0100  DS    0H
         MVC   COMM_INFO_01(8),COMM_SPF_PANEL
         STC   R15,COMM_INFO_02
         MVC   COMM_MSG_CSECT,MODID
         L     R15,V_DISMSG
         BALR  R14,R15
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         MVC   COMM_SPF_PANEL,DIS0000
         MVC   COMM_SPF_FUNCTION,DISPLAY
         LA    R1,COMM_SPF_PANEL
         ST    R1,COMM_SPF_2
         OI    COMM_SPF_2,X'80'
         LA    R1,COMM_SPF_PARMS
         L     R15,COMM_ISPLINK
         BALR  R14,R15
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)           RESTORE R13
         LM    R14,R12,12(R13)       RESTORE REGISTERS
         SR    R15,R15               SET RC
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DXD_START     DC    Q(DXDVDATA)
CHARFORM      DC    CL8'CHAR'
CVDATA        DC    CL8'VDATA'
CVDEPTH       DC    CL8'VDEPTH'
CVTYPE        DC    CL8'VTYPE'
CVWIDTH       DC    CL8'VWIDTH'
CVROW         DC    CL8'VROW'
CVCOL         DC    CL8'VCOL'
PQUERY        DC    CL8'PQUERY'
VDEFINE       DC    CL8'VDEFINE'
VDELETE       DC    CL8'VDELETE'
DISPLAY       DC    CL8'DISPLAY'
DIS0000       DC    CL8'DIS0000'
              LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDVDATA      DSECT
              DS    18F
DXD_CSECT     DS    CL8

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISCOMM  TYPE=DSECT
         COPY     DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         DISSPFD  TYPE=DSECT

         IFGACB   AM=VSAM
ACB_L    EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  DISVDATA
./ ADD NAME=DISXLIST 0115-09023-09198-1505-00303-00264-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISXLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display an AREA chain                                            *
*                                                                     *
* ------------------------------------------------------------------- *
DISXLIST CSECT
DISXLIST AMODE 31
DISXLIST RMODE ANY
         USING DISXLIST,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                   SAVE REGS
         LR    R11,R15                           SET BASE REG
         B     MOD0000                           SKIP EYECATCHER
MODID    DC    CL8'DISXLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS              WORK AREA
         A     R15,DXD_START                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDXLIST,R13
         ITRACE ID=ENTRY,                                              +
               RDATA1=R1
         L     R9,COMM_DISSPFD
         USING DISSPFD,R9
         USING AREA_DSECT,R6
         CLI   AREA_TYPE-AREA_DSECT(R1),X'FF'    DUMMY ENTRY?
         BE    MAIN0300                          YES
         ST    R1,DXD_FIRST_AREA
         ST    R1,DXD_FIRST_DISPLAYED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=BUILD
         L     R0,COMM_VDATA_ADDR
         L     R1,COMM_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                            INITIALIZE VDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R8,COMM_VDATA_ADDR                VDATA ADDRESS
         L     R7,SPF_VDEPTH                     NBR OF LINES
         ICM   R6,15,DXD_FIRST_DISPLAYED         1ST AREA DISPLAYED
         BZ    MAIN0300
MAIN0020 DS    0H
         MVC   0(MSG01_L,R8),MSG01               INITIALIZE
         USING MSG01,R8
         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED
         UNPK  DXD_WORK(9),DXD_LAST_DISPLAYED(5) UNPACK ADDR
         MVC   MSG01_ADDR,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG01_ADDR,HEXCHAR                TRANSLATE ADDR
         UNPK  DXD_WORK(9),AREA_PREV(5)          UNPACK ADDR
         MVC   MSG01_PREV,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG01_PREV,HEXCHAR                TRANSLATE ADDR
         UNPK  DXD_WORK(9),AREA_NEXT(5)          UNPACK ADDR
         MVC   MSG01_NEXT,DXD_WORK               COPY UNPACKED ADDR
         TR    MSG01_NEXT,HEXCHAR                TRANSLATE ADDR
         UNPK  DXD_WORK(9),AREA_BEGIN(5)         UNPACK BEGIN DISP
         MVC   MSG01_BEGIN,DXD_WORK              COPY UNPACKED DISP
         TR    MSG01_BEGIN,HEXCHAR               TRANSLATE DISP
         UNPK  DXD_WORK(9),AREA_END(5)           UNPACK END DISP
         MVC   MSG01_END,DXD_WORK                COPY UNPACKED ADDR
         TR    MSG01_END,HEXCHAR                 TRANSLATE DISP
         UNPK  DXD_WORK(9),AREA_LENGTH(5)        UNPACK END DISP
         MVC   MSG01_LENGTH,DXD_WORK             COPY UNPACKED ADDR
         TR    MSG01_LENGTH,HEXCHAR              TRANSLATE DISP
         CLI   AREA_TYPE,C'D'                    DATA AREA?
         BE    MAIN0030                          YES
         MVC   MSG01_TYPE,T_INSTR
         ICM   R1,15,AREA_OPCODE                 OPCODE ADDR
         BZ    MAIN0090                          NOT DETERMINED
         USING OPCODE_DSECT,R1
         MVI   MSG01_ATTR,$ATTR_HIGH_YELLOW
         MVC   MSG01_TYPE,OPCODE_MNEMONIC        COPY MNEMONIC
         B     MAIN0090
MAIN0030 DS    0H
         MVI   MSG01_ATTR,$ATTR_HIGH_TURQUOISE
         CLI   AREA_DATA_TYPE,$DATA_ACON         ADCON?
         BE    MAIN0040                          YES
         CLI   AREA_DATA_TYPE,$DATA_VCON         VCON?
         BE    MAIN0050                          YES
         CLI   AREA_DATA_TYPE,$DATA_CXD          CXD?
         BE    MAIN0060                          YES
         CLI   AREA_DATA_TYPE,$DATA_Q            Q?
         BE    MAIN0070                          YES
         CLI   AREA_DATA_TYPE,$DATA_USER         USER?
         BE    MAIN0080                          YES
         MVI   MSG01_ATTR,$ATTR_HIGH_RED
         MVC   MSG01_TYPE,T_DATA                 DATA
         B     MAIN0090
MAIN0040 DS    0H
         MVC   MSG01_TYPE,T_ADCON                ADCON
         B     MAIN0090
MAIN0050 DS    0H
         MVC   MSG01_TYPE,T_VCON                 VCON
         B     MAIN0090
MAIN0060 DS    0H
         MVC   MSG01_TYPE,T_CXD                  CXD
         B     MAIN0090
MAIN0070 DS    0H
         MVC   MSG01_TYPE,T_Q                    Q
         B     MAIN0090
MAIN0080 DS    0H
         MVC   MSG01_TYPE,T_USER                 USER
MAIN0090 DS    0H
         MVC   MSG01_RLD_NAME,AREA_RLD_NAME
         DROP  R8
         A     R8,SPF_VWIDTH                     NEXT LINE
         BCT   R7,MAIN0100
         B     MAIN0110                          SCREEN IS FULL
MAIN0100 DS    0H
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         BNZ   MAIN0020
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0110 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME
         OI    COMM_FLAGS2,$DONT_CLEAR_MESSAGES  DON'T CLEAR THE MSG(S)
         L     R15,V_DISDISP                     DISP ENTRY POINT
         BALR  R14,R15                           DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R15,R15                           RC = 0?
         BNZ   EXIT0000                          NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=SCROLL,                                             +
               DATA1=SPF_ZVERB,                                        +
               DATA2=SPF_ZSCROLLA
         CLI   SPF_ZVERB,C'B'                    BOTTOM?
         BE    MAIN0200
         CLI   SPF_ZVERB,C'D'                    DOWN?
         BE    MAIN0220
         CLI   SPF_ZVERB,C'T'                    TOP?
         BE    MAIN0250
         CLI   SPF_ZVERB,C'U'                    UP?
         BE    MAIN0260
         B     MAIN0110
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         ITRACE ID=BOTTOM
         ICM   R6,15,DXD_FIRST_AREA              FIRST ON CHAIN
MAIN0210 DS    0H
         LR    R1,R6
         ICM   R6,15,AREA_NEXT                   NEXT AREA
         BNZ   MAIN0210
         ST    R1,DXD_FIRST_DISPLAYED
         B     MAIN0010                          BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0220 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0200                          YES
         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL
         L     R6,DXD_FIRST_DISPLAYED            1ST ON DISPLAY
MAIN0230 DS    0H
         LR    R1,R6
         ICM   R6,15,AREA_NEXT                   NEXT ON CHAIN
         BZ    MAIN0240                          AT END OF CHAIN
         BCT   R2,MAIN0230
MAIN0240 DS    0H
         ST    R1,DXD_FIRST_DISPLAYED
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0250 DS    0H
         ITRACE ID=TOP
         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_AREA
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0260 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'                 MAX?
         BE    MAIN0250                          YES
         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY
         BZ    EXIT0000                          SHOULD NOT HAPPEN!
         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY
MAIN0270 DS    0H
         LR    R1,R6
         ICM   R6,15,AREA_PREV                   PREVIOUS AREA
         BZ    MAIN0280
         BCT   R2,MAIN0270                       LOOP
MAIN0280 DS    0H
         ST    R1,DXD_FIRST_DISPLAYED            COPY ADDR
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=NOTHING
         MVC   SPF_MSG_5(MSG02_L),MSG02
         MVC   COMM_SPF_PANEL,DIS0000
         L     R15,V_DISDISP
         BALR  R14,R15
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   SPF_MSG_1,COMM_BLANKS
         MVC   SPF_MSG_2,COMM_BLANKS
         MVC   SPF_MSG_3,COMM_BLANKS
         MVC   SPF_MSG_4,COMM_BLANKS
         MVC   SPF_MSG_5,COMM_BLANKS
         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670
         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680
         LR    R15,R2                            SET RC
         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680
         BR    R14                               RETURN TO CALLER       ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDXLIST)

DIS0000       DC   CL8'DIS0000'
PANEL_NAME    DC   CL8'DISXDATA'

T_INSTR       DC   CL5'INSTR'
T_ADCON       DC   CL5'ADCON'
T_VCON        DC   CL5'VCON'
T_CXD         DC   CL5'CXD'
T_Q           DC   CL5'Q'
T_USER        DC   CL5'DATA'
T_DATA        DC   CL5'DATA'

              LTORG

HEXCHAR       EQU  *-C'0'
              DC   C'0123456789ABCDEF'

MSG01         DS   0C
              DC   AL1($ATTR_HIGH_TURQUOISE)
MSG01_ADDR    DC   CL8' '
              DC   AL1($ATTR_NORMAL)
MSG01_PREV    DC   CL8' '
              DC   CL1' '
MSG01_NEXT    DC   CL8' '
              DC   CL1' '
MSG01_BEGIN   DC   CL8' '
              DC   CL1' '
MSG01_END     DC   CL8' '
              DC   CL1' '
MSG01_LENGTH  DC   CL8' '
MSG01_ATTR    DC   AL1(0)
MSG01_TYPE    DC   CL5' '
              DC   AL1($ATTR_HIGH_GREEN)
MSG01_RLD_NAME DC  CL8' '
MSG01_L       EQU  *-MSG01

MSG02         DS   0C
              DC   C'Nothing on chain'
MSG02_L       EQU  *-MSG02


* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDXLIST              DSECT
                      DS  18F

DXD_FIRST_AREA        DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_WORK              DS  CL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              DISCOMM TYPE=DSECT
              DISSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    DISASMDA
              COPY    ATTRS

              IFGACB  AM=VSAM
ACB_L         EQU     *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
              COPY    REGEQU
              END     DISXLIST
./ ADD NAME=GENDC    0102-09119-09198-0827-00331-00331-00000-SOURCE
* -------------------------------------------------------------------*
*                                                                    *
*  Module name: GENDC                                                *
*                                                                    *
*  Function:                                                         *
*   Generate DCs                                                     *
*                                                                    *
*  At entry R8 is address of current AREA block                      *
*                                                                    *
* -------------------------------------------------------------------*
GENDC    CSECT
GENDC    AMODE 31
GENDC    RMODE ANY
         USING GENDC,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENDC'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDDC,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8
         USING AREA_DSECT,R8
         USING LABEL_DSECT,R7
         USING OPCODE_DSECT,R5
         MVC   OPCODE_MNEMONIC,OP_DC          SET OPCODE TO 'DC'
         C     R8,DXD_AREA                    SAME AREA?
         BE    INIT0010
         ITRACE ID=NEWAREA,                                            +
               DATA1=AREA_BEGIN,                                       +
               DATA2=AREA_LENGTH
         ST    R8,DXD_AREA                    SAVE AREA ADDRESS
         MVC   DXD_BEGIN,AREA_BEGIN           COPY BEGIN DISP
         MVC   DXD_LENGTH,AREA_LENGTH
INIT0010 DS    0H
         L     R6,DXD_BEGIN                   BEGIN DISP
         ST    R6,COMM_GEN_DISP               SET 'GEN' DISP
         A     R6,COMM_CSECT_TEXT             PLUS TEXT ADDRESS
         L     R3,DXD_LENGTH                  AREA LENGTH
         ITRACE ID=DC,                                                 +
               RDATA1=R6,                                              +
               RDATA2=R3
         CLI   AREA_DATA_TYPE,$DATA_ACON      AD-CON?
         BE    GEN0080                        YES
         CLI   AREA_DATA_TYPE,$DATA_VCON      V-CON?
         BE    GEN0120                        YES
         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD (PSEUDO AREA SIZE)?
         BE    GEN0150                        YES
         CLI   AREA_DATA_TYPE,$DATA_Q         Q (PSEUDO AREA DISP)?
         BE    GEN0160                        YES
* -------------------------------------------------------------------*
*                                                                    *
* -------------------------------------------------------------------*
GEN0000  DS    0H
         XC    COMM_GEN_LENGTH,COMM_GEN_LENGTH
         CH    R3,H8                          MORE THAN 8?
         BNH   GEN0010                        NO
         LH    R3,H8                          LIMIT TO 8
GEN0010  DS    0H
         TRT   0(1,R6),PRINT                  PRINTABLE CHARACTER?
         BZ    GEN0040                        YES
* ------------------------------------------------------------------- *
*                                                                     *
*        HEX CONSTANTS                                                *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=X_QUOTE,                                            +
               RDATA1=R3
         MVC   COMM_SOURCE_OPERANDS(L'X_QUOTE),X_QUOTE
         LA    R4,COMM_SOURCE_OPERANDS+L'X_QUOTE
GEN0020  DS    0H
         TRT   0(1,R6),PRINT                  PRINTABLE?
         BZ    GEN0030                        YES
         UNPK  0(3,R4),0(2,R6)                UNPACK DATA
         TR    0(2,R4),COMM_HEXCHAR           TRANSLATE TO PRINTABLE
         LA    R6,1(R6)                       NEXT OBJECT MODULE BYTE
         LA    R4,2(R4)                       NEXT IN OUTPUT
         L     R15,DXD_BEGIN                  BEGIN DISP
         LA    R15,1(,R15)                    PLUS 1
         ST    R15,DXD_BEGIN                  CHANGE DISP
         L     R15,DXD_LENGTH
         BCTR  R15,0
         ST    R15,DXD_LENGTH
         L     R15,COMM_GEN_LENGTH            LENGTH GENNED
         LA    R15,1(,R15)                    PLUS 1
         ST    R15,COMM_GEN_LENGTH            UPDATE GENNED LENGTH
         BCT   R3,GEN0020                     LOOP
GEN0030  DS    0H
         MVI   0(R4),C''''                    INSERT ENDING QUOTE
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        CHARACTER CONSTANTS                                          *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0040  DS    0H
         ITRACE ID=C_QUOTE,                                            +
               RDATA1=R3
         MVC   COMM_SOURCE_OPERANDS(L'C_QUOTE),C_QUOTE
         LA    R4,COMM_SOURCE_OPERANDS+L'C_QUOTE
GEN0050  DS    0H
         TRT   0(1,R6),PRINT                  PRINTABLE?
         BNZ   GEN0070                        NO
         MVC   0(1,R4),0(R6)                  COPY DATA
         LA    R4,1(,R4)                      NEXT IN GENERATED CODE
         CLI   0(R6),X'7D'                    QUOTE?
         BNE   GEN0060                        NO
         MVI   0(R4),X'7D'                    INSERT SECOND QUOTE
         LA    R4,1(,R4)                      ACCOUNT FOR IT
GEN0060  DS    0H
         LA    R6,1(,R6)                      NEXT IN TEXT
         L     R15,DXD_BEGIN                  BEGIN DISP
         LA    R15,1(,R15)                    PLUS 1
         ST    R15,DXD_BEGIN                  CHANGE DISP
         L     R15,DXD_LENGTH
         BCTR  R15,0
         ST    R15,DXD_LENGTH
         L     R15,COMM_GEN_LENGTH            LENGTH GENNED
         LA    R15,1(,R15)                    PLUS 1
         ST    R15,COMM_GEN_LENGTH            UPDATE GENNED LENGTH
         BCT   R3,GEN0050                     MINUS 1
GEN0070  DS    0H
         MVI   0(R4),C''''                    INSERT ENDING QUOTE
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        GENERATE ADCONs                                              *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0080  DS    0H
         ITRACE ID=GENADCON                   GENERATING AN ADCON
         MVC   COMM_SOURCE_OPERANDS(4),=C'AL ('
         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3
         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE
         ICM   R7,15,AREA_REF_LABEL1          LABEL BLOCK'S ADDRESS
         MVC   COMM_SOURCE_OPERANDS+4(L'LABEL_NAME),LABEL_NAME
         LA    R1,COMM_SOURCE_OPERANDS
GEN0090  DS    0H                             BLANK
         CLI   0(R1),C' '                     YES
         BE    GEN0100
         LA    R1,1(,R1)                      NEXT
         B     GEN0090
GEN0100  DS    0H
         ICM   R0,15,AREA_REF_DISP1           DISPLACEMENT FROM LABEL
         BZ    GEN0110                        NO DISPLACEMENT
         MVI   0(R1),C'+'                     INSERT PLUS SIGN
         CVD   R0,COMM_DWORD                  SET DISPLACEMENT
         MVC   1(L'EDITWORD,R1),EDITWORD
         ED    1(L'EDITWORD,R1),COMM_DWORD+4
         LA    R1,L'EDITWORD+1(,R1)           UPDATE ADDRESS
         TM    AREA_DATA_TYPE,$DATA_31        31-BIT MODE BIT ON?
         BNO   GEN0110                        NO
         MVC   0(L'X80,R1),X80                GEN 31-BIT MODE
         LA    R1,L'X80(,R1)                  UPDATE ADDRESS
GEN0110  DS    0H
         MVI   0(R1),C')'                     CLOSING PARENTHESIS
         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'
         B     EXIT0000                       DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        GENERATE VCONs                                               *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0120  DS    0H
         ITRACE ID=GENVCON
         MVC   COMM_SOURCE_OPERANDS(4),=C'VL ('
         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3
         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE
         MVC   COMM_SOURCE_OPERANDS+4(L'AREA_RLD_NAME),AREA_RLD_NAME
         LA    R1,COMM_SOURCE_OPERANDS
GEN0130  DS    0H
         CLI   0(R1),C' '
         BE    GEN0140
         LA    R1,1(,R1)
         B     GEN0130
GEN0140  DS    0H
         MVI   0(R1),C')'                     CLOSING PARENTHESIS
         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        GENERATE CXD                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0150  DS    0H
         MVC   OPCODE_MNEMONIC,OP_CXD         CHANGE OPCODE TO CXD
         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Generate "Q" constants.                                      *
*                                                                     *
*                                                                     *
*  If the RLD name for the AREA matches the name of a DSECT,          *
*     generate a "DC  QLx(rld name)                                   *
*  otherwise                                                          *
*     generate a "DC  ALx(0)" with the QLx(rld name) as the comment   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
GEN0160  DS    0H
         ITRACE ID=GEN_Q
         ICM   R4,15,COMM_DSECT_NEXT
         BZ    GEN0180                         NO DEFINED DSECTS
         USING DSECT_DSECT,R4                  DEFINE BASSE
GEN0170  DS    0H
         CLC   DSECT_NAME,AREA_RLD_NAME        DSECT LOCATED?
         BE    GEN0210                         YES
         ICM   R4,15,DSECT_NEXT                NEXT DSECT
         BNZ   GEN0170                         LOOP
GEN0180  DS    0H
         MVC   COMM_SOURCE_OPERANDS+20(4),=C'QL ('
         MVC   COMM_SOURCE_OPERANDS+22(1),AREA_LENGTH+3
         OI    COMM_SOURCE_OPERANDS+22,X'F0'   MAKE IT PRINTABLE
         MVC   COMM_SOURCE_OPERANDS+24(L'AREA_RLD_NAME),AREA_RLD_NAME
         LA    R1,COMM_SOURCE_OPERANDS+24
GEN0190  DS    0H
         CLI   0(R1),C' '
         BE    GEN0200
         LA    R1,1(,R1)
         B     GEN0190
GEN0200  DS    0H
         MVI   0(R1),C')'                     CLOSING PARENTHESIS
         MVI   COMM_SOURCE_OPERANDS+0,C'A'
         MVC   COMM_SOURCE_OPERANDS+1(3),COMM_SOURCE_OPERANDS+21
         MVI   COMM_SOURCE_OPERANDS+4,C'0'
         MVI   COMM_SOURCE_OPERANDS+5,C')'
         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'
         B     EXIT0000
GEN0210  DS    0H
         MVC   COMM_SOURCE_OPERANDS+0(4),=C'QL ('
         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3
         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE
         MVC   COMM_SOURCE_OPERANDS+4(L'AREA_RLD_NAME),AREA_RLD_NAME
         LA    R1,COMM_SOURCE_OPERANDS+4
GEN0220  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BE    GEN0230                        YES
         LA    R1,1(,R1)                      NEXT
         B     GEN0220
GEN0230  DS    0H
         MVI   0(R1),C')'                     INSERT ENDING PAREN
         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=LEN_ZERO
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         L     R15,DXD_LENGTH                 LENGTH LEFT
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         L     R14,12(,R13)                   RESTORE R14
         LM    R0,R12,20(R13)                 RESTORE OTHER REGISTERS   ASE01680
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START      DC   Q(DXDDC)
H8             DC   H'8'
OP_CXD         DC   CL6'CXD'
OP_DC          DC   CL6'DC'
C_QUOTE        DC   C'C'''
X_QUOTE        DC   C'X'''
X80            DC   C'+X''80000000'
EDITWORD       DC   X'F020202020202120'

PRINT    DS   0C
         DC   256X'FF'
         ORG  PRINT+X'40'
         DC   X'00'
         ORG  PRINT+X'4A'
         DC   6X'00'
         ORG  PRINT+X'5A'
         DC   8X'00'
         ORG  PRINT+X'6B'
         DC   5X'00'
         ORG  PRINT+X'7A'
         DC   6X'00'
         ORG  PRINT+X'81'
         DC   9X'00'
         ORG  PRINT+X'91'
         DC   9X'00'
         ORG  PRINT+X'A2'
         DC   9X'00'
         ORG  PRINT+X'C0'
         DC   10X'00'
         ORG  PRINT+X'D0'
         DC   10X'00'
         ORG  PRINT+X'E2'
         DC   8X'00'
         ORG  PRINT+X'F0'
         DC   10X'00'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDC          DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_AREA       DS   A
DXD_BEGIN      DS   A
DXD_LENGTH     DS   F
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY REGEQU
               END  GENDC
./ ADD NAME=GENRR1   0109-07102-09198-0828-00103-00092-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRR1                                               *
*                                                                    *
*  Function:                                                         *
*   Generate RR type instructions                                    *
*                                                                    *
*  At entry R8 is address of AREA                                    *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRR1   CSECT
GENRR1   AMODE 31
GENRR1   RMODE ANY
         USING GENRR1,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRR1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRR1,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVI   COMM_SOURCE_OPERANDS,C'R'      INSERT 'R'
         SR    R1,R1                          CLEAR REGISTER
         IC    R1,1(,R6)                      OPERANDS
         SRL   R1,4                           SHIFT OUT OPERAND 2
         SLL   R1,1                           MULTIPLY BY 2
         LA    R1,REGISTER_TABLE(R1)
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R1) COPY REGISTER
         LA    R2,COMM_SOURCE_OPERANDS
GEN0010  DS    0H
         CLI   0(R2),C' '
         BE    GEN0020
         LA    R2,1(,R2)
         B     GEN0010
GEN0020  DS    0H
         MVI   0(R2),C','                     INSERT COMMA
         MVI   1(R2),C'R'                     INSERT 'R'
         SR    R1,R1                          CLEAR REGISTER
         IC    R1,1(,R6)
         SLL   R1,28                          SHIFT OUT ALL BUT OPERAND
         SRL   R1,27                          SHIFT BACK
         LA    R1,REGISTER_TABLE(R1)
         MVC   2(2,R2),0(R1)                  COPY REGISTER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRR1)

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRR1         DSECT
               DS   18F
DXD_CSECT      DS   CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRR1
./ ADD NAME=GENRR2   0111-07102-09198-0828-00235-00066-00000-SOURCE
         MACRO
         SVCDEF &SVCNBR,&DESC
         LCLA   &LEN
&LEN     SETA   K'&DESC-2
         DC     AL2(&LEN+5)          TOTAL ENTRY LENGTH
         DC     X'&SVCNBR'           SVC NUMBER
         DC     AL2(&LEN)            DESCRIPTION'S LENGTH
         DC     C&DESC               DESCRIPTION
         MEND
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRR2                                               *
*                                                                    *
*  Function:                                                         *
*   Generate RR type instructions                                    *
*                                                                    *
*  At entry R8 is address of OPCODE table entry                      *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRR2   CSECT
GENRR2   AMODE 31
GENRR2   RMODE ANY
         USING GENRR2,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRR2'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRR2,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_EDIT_PAD,COMM_BLANKS
         SR    R1,R1                          CLEAR REGISTER
         IC    R1,1(,R6)                      OPERAND
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORK,EDITWORD         INITIALIZE EDIT WORD
         ED    DXD_EDIT_WORK,COMM_DWORD+6     EDIT
         LA    R1,DXD_EDIT_WORK
GEN0010  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BNE   GEN0020                        NO
         LA    R1,1(,R1)                      NEXT
         B     GEN0010
GEN0020  DS    0H
         MVC   COMM_SOURCE_OPERANDS(3),0(R1)  COPY NBR
         CLI   0(R6),X'0A'                    SVC?
         BNE   EXIT0000                       NO
         LA    R2,SVC_DESC                    1ST DESCRIPTION
         USING SVC_DSECT,R2
GEN0030  DS    0H
         CLC   SVC_NUMBER,1(R6)               SVC LOCATED?
         BE    GEN0040                        YES
         AH    R2,SVC_LENGTH                  NEXT DESCRIPTION
         CLI   0(R2),X'FF'                    END OF TABLE?
         BNE   GEN0030                        NO
         B     EXIT0000
GEN0040  DS    0H
         SR    R1,R1
         ICM   R1,3,SVC_COMMENT_LENGTH        LENGTH OF COMMENT
         BCTR  R1,0
         EX    R1,MVC_01
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
MVC_01   MVC   COMM_SOURCE_OPERANDS+20(0),SVC_COMMENT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRR2)
EDITWORD       DC   X'40202120'

SVC_DESC       DS   0C
               SVCDEF 00,'EXCP/XDAP'
               SVCDEF 01,'WAIT/WAITR/PRTOV'
               SVCDEF 02,'POST'
               SVCDEF 03,'EXIT'
               SVCDEF 04,'GETMAIN'
               SVCDEF 05,'FREEMAIN'
               SVCDEF 06,'LINK/LINKX'
               SVCDEF 07,'XCTL/XCTLX'
               SVCDEF 08,'LOAD'
               SVCDEF 09,'DELETE'
               SVCDEF 0A,'GETMAIN/FREEMAIN'
               SVCDEF 0B,'TIME'
               SVCDEF 0C,'SYNCH/SYNCHX'
               SVCDEF 0D,'ABEND'
               SVCDEF 0E,'SPIE'
               SVCDEF 0F,'ERREXCP'
               SVCDEF 10,'PURGE'
               SVCDEF 11,'RESTORE'
               SVCDEF 12,'BLDL/FIND (TYPE D)'
               SVCDEF 13,'OPEN'
               SVCDEF 14,'CLOSE'
               SVCDEF 15,'STOW'
               SVCDEF 16,'OPEN (TYPE=J)'
               SVCDEF 17,'CLOSE (TYPE=T)'
               SVCDEF 18,'DEVTYPE'
               SVCDEF 19,'TRKBAL'
               SVCDEF 1A,'CATALOG/INDEX/LOCATE'
               SVCDEF 1B,'OBTAIN'
               SVCDEF 1D,'SCRATCH'
               SVCDEF 1E,'RENAME'
               SVCDEF 1F,'FEOV'
               SVCDEF 20,'ALLOC'
               SVCDEF 21,'IOHALT'
               SVCDEF 22,'MGCR/QEDIT'
               SVCDEF 23,'WTO/WTOR'
               SVCDEF 24,'WTL'
               SVCDEF 25,'SEGLD/SEGWT'
               SVCDEF 25,'SEGLD/SEGWT'
               SVCDEF 27,'LABEL'
               SVCDEF 28,'EXTRACT'
               SVCDEF 29,'IDENTIFY'
               SVCDEF 2A,'ATTACH/ATTACHX'
               SVCDEF 2B,'CIRB'
               SVCDEF 2C,'CHAP'
               SVCDEF 2D,'OVLYBRCH'
               SVCDEF 2E,'TIMER'
               SVCDEF 2F,'STIMER'
               SVCDEF 30,'DEQ'
               SVCDEF 33,'SNAP/SNAPX/SDUMP/SDUMPX'
               SVCDEF 34,'RESTART'
               SVCDEF 35,'RELEX'
               SVCDEF 36,'DISABLE'
               SVCDEF 37,'EOV'
               SVCDEF 38,'ENQ/RESERVE'
               SVCDEF 39,'FREEDBUF'
               SVCDEF 3A,'RELBUF/REQBUF'
               SVCDEF 3B,'OLTEP'
               SVCDEF 3C,'STAE/STAI-ESTAE/ESTAI'
               SVCDEF 3D,'IKJEGS6A'
               SVCDEF 3E,'DETACH'
               SVCDEF 3F,'CHKPT'
               SVCDEF 40,'RDJFCB'
               SVCDEF 42,'BTAMTEST'
               SVCDEF 44,'SYNADF/SYNADRLS'
               SVCDEF 45,'BSP'
               SVCDEF 46,'GSERV'
               SVCDEF 47,'ASGNBFR/BUFINQ/RLSEBFR'
               SVCDEF 49,'SPAR'
               SVCDEF 4A,'DAR'
               SVCDEF 4B,'DQUEUE'
               SVCDEF 4C,'IFBSTAT'
               SVCDEF 4E,'LSPACE'
               SVCDEF 4F,'STATUS'
               SVCDEF 51,'SETPRT'
               SVCDEF 53,'SMFWTM'
               SVCDEF 54,'GRAPHICS'
               SVCDEF 55,'DDRSWAP'
               SVCDEF 56,'ATLAS'
               SVCDEF 57,'DOM'
               SVCDEF 5B,'VOLSTAT'
               SVCDEF 5C,'TCPEXCP'
               SVCDEF 5D,'TGET/TPUT'
               SVCDEF 5E,'TGET/TPUT'
               SVCDEF 5F,'SYSEVENT'
               SVCDEF 60,'STAX'
               SVCDEF 61,'IKJEGS9G'
               SVCDEF 62,'PROTECT'
               SVCDEF 63,'DYNALLOC'
               SVCDEF 64,'IKJEFFIB'
               SVCDEF 65,'QTIP'
               SVCDEF 66,'AQCTL'
               SVCDEF 67,'XLATE'
               SVCDEF 68,'TOPCTL'
               SVCDEF 69,'IMGLIB'
               SVCDEF 6B,'MODESET'
               SVCDEF 70,'PGRLSE'
               SVCDEF 71,'PGFIX/PGFREE/PGLOAD/PGOUT'
               SVCDEF 72,'EXCPVR'
               SVCDEF 75,'DEBCHK'
               SVCDEF 77,'TESTAUTH'
               SVCDEF 78,'GETMAIN/FREEMAIN'
               SVCDEF 79,'VSAM'
               SVCDEF 7B,'PURGEDQ'
               SVCDEF 7C,'TPIO'
               SVCDEF 7D,'EVENTS'
               SVCDEF 7E,'MSS(ICB2SVC)'
               SVCDEF 82,'RACHECK'
               SVCDEF 83,'RACINIT'
               SVCDEF 84,'RACLIST'
               SVCDEF 85,'RACDEF'
               SVCDEF 89,'ESR'
               SVCDEF 8A,'PGSER'
               SVCDEF 8B,'CVAFDIR'
               DC     X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRR2              DSECT
                    DS   18F
DXD_CSECT           DS   CL8
DXD_EDIT_WORK       DS   CL4
DXD_EDIT_PAD        DS   CL4
*---------------------------------------------------------------------*
*                                                                     *
*              SVC DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
SVC_DSECT           DSECT
SVC_LENGTH          DS   XL2         LENGTH OF THIS SVC DEFINITION
SVC_NUMBER          DS   X           SVC NUMBER
SVC_COMMENT_LENGTH  DS   XL2         LENGTH OF DESCRIPTION
SVC_COMMENT         DS   0C          DESCRIPTION
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRR2
./ ADD NAME=GENRR3   0112-07103-09198-0829-00188-00138-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRR3                                               *
*                                                                    *
*  Function:                                                         *
*   Generate RR type instructions                                    *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRR3   CSECT
GENRR3   AMODE 31
GENRR3   RMODE ANY
         USING GENRR3,R11
         USING DISCOMM,R12
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRR3'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRR3,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_CC,1(R6)                   COPY CONDITION
         NI    DXD_CC,X'F0'                   LEAVE ONLY CONDTION
         MVC   OPCODE_MNEMONIC,OP_BCR         RESET OPCODE
         TM    COMM_CC,$OPCODE_CCA            ARITHMETIC?
         BO    GEN0020                        YES
         TM    COMM_CC,$OPCODE_CCC            COMPARE?
         BO    GEN0030                        YES
         TM    COMM_CC,$OPCODE_CCL            LOGICAL?
         BO    GEN0040                        YES
GEN0000  DS    0H
         ITRACE ID=BCR
         SR    R0,R0
         IC    R0,COMM_CC                     CONDITION
         SRL   R0,4
         CVD   R0,COMM_DWORD
         MVC   DXD_CONDITION,=X'40202120'
         ED    DXD_CONDITION,COMM_DWORD+6     EDIT CONDITION
         CLI   DXD_CONDITION+2,C' '           BLANK?
         BE    GEN0010                        YES
         MVC   COMM_SOURCE_OPERANDS(2),DXD_CONDITION+2
         MVI   COMM_SOURCE_OPERANDS+2,C','
         LA    R1,COMM_SOURCE_OPERANDS+3
         B     GEN0070
GEN0010  DS    0H
         MVC   COMM_SOURCE_OPERANDS(1),DXD_CONDITION+3
         MVI   COMM_SOURCE_OPERANDS+1,C','
         LA    R1,COMM_SOURCE_OPERANDS+2
         B     GEN0070
GEN0020  DS    0H
         ITRACE ID=ARITH
         LA    R1,ARITHMETIC
         B     GEN0050
GEN0030  DS    0H
         ITRACE ID=COMPARE
         LA    R1,COMPARE
         B     GEN0050
GEN0040  DS    0H
         ITRACE ID=LOGICAL
         LA    R1,LOGICAL
GEN0050  DS    0H
         USING CC_DSECT,R1
         CLC   CC_CODE,DXD_CC                 CONDITION FOUND?
         BE    GEN0060                        YES
         LA    R1,CC_L(,R1)                   NEXT
         CLI   0(R1),X'FF'                    END OF TABLE?
         BE    GEN0000                        YES
         B     GEN0050
GEN0060  DS    0H
         ITRACE ID=SET,                                                +
               DATA1=CC_MNEMONIC
         MVC   OPCODE_MNEMONIC,CC_MNEMONIC    SET MNEMONIC
         LA    R1,COMM_SOURCE_OPERANDS
GEN0070  DS    0H
         MVC   DXD_CC,1(R6)                   COPY BYTE 2 AGAIN
         NI    DXD_CC,X'0F'                   LEAVE ONLY REGISTER NBR
         SR    R2,R2
         IC    R2,DXD_CC                      REGISTER NBR
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R2)          REGISTER NBR ADDRESS
         MVI   0(R1),C'R'
         MVC   1(2,R1),0(R2)                  COPY REGISTER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRR3)
OP_BCR         DC   CL5'BCR'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'

ARITHMETIC     DS    0C                    ARITHMETIC MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'10',CL6'BOR   '     BRANCH OVERFLOW
               DC    X'20',CL6'BPR   '     BRANCH PLUS
               DC    X'40',CL6'BMR   '     BRANCH MINUS
               DC    X'70',CL6'BNZR  '     BRANCH NOT ZERO
               DC    X'80',CL6'BZR   '     BRANCH IF ZERO
               DC    X'B0',CL6'BNMR  '     BRANCH NOT MINUS
               DC    X'D0',CL6'BNPR  '     BRANCH NOT PLUS
               DC    X'E0',CL6'BNOR  '     BRANCH NOT OVERFLOW
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'

COMPARE        DS    0C                    COMPARE MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'20',CL6'BHR   '     BRANCH HIGH
               DC    X'40',CL6'BLR   '     BRANCH LOW
               DC    X'70',CL6'BNER  '     BRANCH NOT EQUAL
               DC    X'80',CL6'BER   '     BRANCH EQUAL
               DC    X'B0',CL6'BNLR  '     BRANCH NOT LOW
               DC    X'D0',CL6'BNHR  '     BRANCH NOT HIGH
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'

LOGICAL        DS    0C                    LOGICAL MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'10',CL6'BOR   '     BRANCH ONES
               DC    X'40',CL6'BMR   '     BRANCH MIXED
               DC    X'70',CL6'BNZR  '     BRANCH NOT ZEROS
               DC    X'80',CL6'BZR   '     BRANCH IF ZEROS
               DC    X'B0',CL6'BNMR  '     BRANCH NOT MIXED
               DC    X'E0',CL6'BNOR  '     BRANCH NOT ONES
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRR3         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_CC         DS   X
DXD_CONDITION  DS   XL4
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
CC_DSECT       DSECT
CC_CODE        DS   X
CC_MNEMONIC    DS   CL6
CC_L           EQU  *-CC_DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*

               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
               COPY REGEQU
               END  GENRR3
./ ADD NAME=GENRS1   0104-08345-09198-0829-00129-00127-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRS1                                               *
*                                                                    *
*  Function:                                                         *
*   GENERATE RS TYPE INSTRUCTIONS  (SLL, SRL, SRA, SLA, ...)         *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRS1   CSECT
GENRS1   AMODE 31
GENRS1   RMODE ANY
         USING GENRS1,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRS1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRS1,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
*--------------------------------------------------------------------*
*        GENERATE R                                                  *
*--------------------------------------------------------------------*
         SR    R3,R3                          CLEAR R3
         IC    R3,1(R6)                       INSERT R1 AND R2
         SRL   R3,4                           SHIFT OUT R2
         STC   R3,DXD_R                       SAVE R1
         LA    R1,COMM_SOURCE_OPERANDS
         MVI   0(R1),C'R'                     INSERT 'R' FOR R1
         IC    R3,DXD_R                       R1
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         MVI   0(R1),C','                     INSERT COMMA
*--------------------------------------------------------------------*
*        GENERATE "nnn"                                              *
*--------------------------------------------------------------------*
         MVC   DXD_DISP,2(R6)                 COPY
         NI    DXD_DISP,X'0F'                 FORCE ZERO
         LH    R0,DXD_DISP                    DISP
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         MVC   1(4,R1),DXD_EDIT_WORD+4        COPY BITS TO SHIFT
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRS1)
EDIT_WORD      DC   X'F020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRS1         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_DISP       DS   XL2
DXD_R          DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRS1
./ ADD NAME=GENRS2   0106-07124-09198-0830-00184-00182-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRS2                                               *
*                                                                    *
*  Function:                                                         *
*   GENERATE RS TYPE INSTRUCTIONS  (STM, LM,..)                      *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRS2   CSECT
GENRS2   AMODE 31
GENRS2   RMODE ANY
         USING GENRS2,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRS2'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRS2,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
*--------------------------------------------------------------------*
*        GENERATE R1 AND R2                                          *
*--------------------------------------------------------------------*
         SR    R3,R3                          CLEAR R3
         IC    R3,1(R6)                       INSERT R1 AND R2
         SRL   R3,4                           SHIFT OUT R2
         STC   R3,DXD_R1                      SAVE R1
         MVC   DXD_R2,1(R6)                   COPY R1 AND R1
         NI    DXD_R2,X'0F'                   REMOVE R1
         LA    R1,COMM_SOURCE_OPERANDS
         MVI   0(R1),C'R'                     INSERT 'R' FOR R1
         IC    R3,DXD_R1                      R1
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT 'R' FOR R2
         IC    R3,DXD_R2                      R2
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   2(2,R1),0(R2)                  COPY REGISTER NAME
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C','                     INSERT COMMA
         LA    R1,1(,R1)
         ICM   R7,15,AREA_REF_LABEL1          LABEL PRESENT?
         BZ    GEN0020                        NO
         USING LABEL_DSECT,R7
*--------------------------------------------------------------------*
*        GENERATE LABEL                                              *
*--------------------------------------------------------------------*
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R9,SCAN0000                    FIND END OF NAME
         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    EXIT0000                       ZERO.. EXIT
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND FIRST NON ZERO
         MVC   1(4,R1),0(R2)                  COPY DISP
         B     EXIT0000
*--------------------------------------------------------------------*
*        GENERATE "DDD(R)"                                           *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         SR    R3,R3
         IC    R3,2(R6)                       BASE AND PART OF DISP
         SRL   R3,4                           SHIFT OUT DISP
         STC   R3,DXD_BASE
         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP
         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP
         LH    R0,DXD_DISP                    DISP
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON ZERO
         MVC   0(4,R1),0(R2)                  COPY DISP
         ICM   R3,1,DXD_BASE                  BASE ZERO?
         BZ    EXIT0000                       YES
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C'('                     OPEN PAREN
         MVI   1(R1),C'R'
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   2(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C'0'
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRS2)
EDIT_WORD      DC   X'F020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRS2         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_DISP       DS   XL2
DXD_R1         DS   X
DXD_R2         DS   X
DXD_BASE       DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRS2
./ ADD NAME=GENRS3   0105-07124-09198-0830-00183-00180-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRS3                                               *
*                                                                    *
*  Function:                                                         *
*   GENERATE RS TYPE INSTRUCTIONS  (ICM, STCM, ...)                  *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRS3   CSECT
GENRS3   AMODE 31
GENRS3   RMODE ANY
         USING GENRS3,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRS3'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRS3,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
*--------------------------------------------------------------------*
*        GENERATE R1 AND MASK                                        *
*--------------------------------------------------------------------*
         SR    R3,R3                          CLEAR R3
         IC    R3,1(R6)                       INSERT R1 AND R2
         SRL   R3,4                           SHIFT OUT R2
         STC   R3,DXD_R1                      SAVE R1
         MVC   DXD_MASK,1(R6)                 COPY R1 AND R1
         NI    DXD_MASK,X'0F'                 REMOVE R1
         LA    R1,COMM_SOURCE_OPERANDS
         MVI   0(R1),C'R'                     INSERT 'R' FOR R1
         IC    R3,DXD_R1                      R1
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         MVI   0(R1),C','                     INSERT COMMA
         IC    R3,DXD_MASK                    MASK
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          USE REGISTER NAMES
         MVC   1(2,R1),0(R2)                  COPY REGISTER NAME
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C','                     INSERT COMMA
         LA    R1,1(,R1)
         ICM   R7,15,AREA_REF_LABEL1          LABEL PRESENT?
         BZ    GEN0020                        NO
         USING LABEL_DSECT,R7
*--------------------------------------------------------------------*
*        GENERATE LABEL                                              *
*--------------------------------------------------------------------*
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R9,SCAN0000                    FIND END OF NAME
         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    EXIT0000                       ZERO.. EXIT
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND FIRST NON ZERO
         MVC   1(4,R1),0(R2)                  COPY DISP
         B     EXIT0000
*--------------------------------------------------------------------*
*        GENERATE "DDD(R)"                                           *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         SR    R3,R3
         IC    R3,2(R6)                       BASE AND PART OF DISP
         SRL   R3,4                           SHIFT OUT DISP
         STC   R3,DXD_BASE
         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP
         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP
         LH    R0,DXD_DISP                    DISP
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON ZERO
         MVC   0(4,R1),0(R2)                  COPY DISP
         ICM   R3,1,DXD_BASE                  BASE ZERO?
         BZ    EXIT0000                       YES
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C'('                     OPEN PAREN
         MVI   1(R1),C'R'
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   2(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C'0'
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRS3)
EDIT_WORD      DC   X'F020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRS3         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_DISP       DS   XL2
DXD_R1         DS   X
DXD_MASK       DS   X
DXD_BASE       DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRS3
./ ADD NAME=GENRX    0101-09119-09198-0831-00310-00310-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRX                                                *
*                                                                    *
*  Function:                                                         *
*   GENERATE RX TYPE INSTRUCTIONS                                    *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRX    CSECT
GENRX    AMODE 31
GENRX    RMODE ANY
         USING GENRX,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRX'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRX,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
         TM    OPCODE_FLAGS,$OPCODE_EXT       EXTENDED FORMAT?
         BO    GEN0020                        YES
*--------------------------------------------------------------------*
*        GENERATE R OF RX                                            *
*--------------------------------------------------------------------*
         SR    R3,R3                          CLEAR R3
         IC    R3,1(R6)                       INSERT R AND X
         SRL   R3,4                           SHIFT OUT X
         SLL   R3,1                           MULTIPLY BY 2
         STC   R3,DXD_R
         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME
         MVI   COMM_SOURCE_OPERANDS,C'R'
         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)
         LA    R1,COMM_SOURCE_OPERANDS
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         MVI   0(R1),C','                     INSERT COMMA
         LA    R1,1(,R1)
         B     GEN0080
*--------------------------------------------------------------------*
*        Generate branch instructions                                *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         ITRACE ID=GENBR,                                              +
               DATA1=AREA_BEGIN,                                       +
               DATA2=0(R6)
         MVC   DXD_COND,1(R6)                 COPY INSTRUCTION BYTE 2
         NI    DXD_COND,X'F0'                 LEAVE ONLY CONDITION
         TM    COMM_CC,$OPCODE_CCA            ARITHMETIC?
         BO    GEN0030                        YES
         TM    COMM_CC,$OPCODE_CCC            COMPARE?
         BO    GEN0040                        YES
         ITRACE ID=LOGICAL
         LA    R2,COND_LOGICAL                DEFAULT TO LOGICAL
         B     GEN0050
GEN0030  DS    0H
         ITRACE ID=ARITH
         LA    R2,COND_ARITH                  ARITHMETIC CONDITIONS
         B     GEN0050
GEN0040  DS    0H
         ITRACE ID=COMPARE
         LA    R2,COND_COMPARE                COMPARE CONDITIONS
GEN0050  DS    0H
         USING COND_DSECT,R2
         CLC   COND_COND,DXD_COND             LOCATED THE CONDITION?
         BE    GEN0060                        YES
         LA    R2,COND_DSECT_L(,R2)           NEXT
         CLI   0(R2),X'FF'                    END OF TABLE?
         BE    GEN0070                        NOT LOCATED
         B     GEN0050
GEN0060  DS    0H
         MVC   OPCODE_MNEMONIC,COND_MNEMONIC  CHANGE MNEMONIC
         B     GEN0080
*--------------------------------------------------------------------*
*        Generate BC with condition nbr                              *
*--------------------------------------------------------------------*
GEN0070  DS    0H
         MVC   OPCODE_MNEMONIC,OP_BC
         SR    R0,R0
         IC    R0,DXD_COND
         SRL   R0,4                           SHIFT TO LOW BITS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         MVC   0(2,R1),DXD_EDIT_WORD+6        COPY CONDTION
         MVI   2(R1),C','
         LA    R1,3(,R1)                      SKIP CONDITION AND COMMA
*--------------------------------------------------------------------*
*        GENERATE LABEL(X)                                           *
*--------------------------------------------------------------------*
GEN0080  DS    0H
         ICM   R7,15,AREA_REF_LABEL1          LABEL REFERENCED?
         USING LABEL_DSECT,R7
         BZ    GEN0100                        NO
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R9,SCAN0000                    FIND END OF NAME
         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    GEN0090                        ZERO
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000
         MVC   1(4,R1),0(R2)                  COPY DISP
         BAL   R9,SCAN0000
GEN0090  DS    0H
         MVC   DXD_X,1(R6)                    COPY 'R AND X'
         NI    DXD_X,X'0F'                    LEAVE ONLY 'X'
         SR    R3,R3
         ICM   R3,1,DXD_X                     INDEX REGISTER
         BZ    EXIT0000                       NONE (ZERO)
         SLL   R3,1
         MVI   0(R1),C'('                     INSERT OPEN PAREN
         MVI   1(R1),C'R'                     INSERT OPEN PAREN
         LA    R2,REGISTER_TABLE(R3)
         MVC   2(2,R1),0(R2)                  COPY INDEX REGISTER
         BAL   R9,SCAN0000                    FIND END
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        GENERATE "DDD(X,R)                                          *
*--------------------------------------------------------------------*
GEN0100  DS    0H
         SR    R0,R0
         MVC   DXD_X,1(R6)                    COPY 'R AND X'
         NI    DXD_X,X'0F'                    REMOVE R
         MVC   DXD_BASE,2(R6)                 COPY BASE
         IC    R0,DXD_BASE
         SRL   R0,4                           SHIFT OUT DISP
         STC   R0,DXD_BASE
         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP
         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP
         SR    R15,R15
         ICM   R15,3,DXD_DISP                 DISP
         BZ    GEN0110                        ZERO
         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000
         MVC   0(4,R1),0(R2)
         B     GEN0120
GEN0110  DS    0H
         MVI   0(R1),C'0'                     GENERATE A ZERO
GEN0120  DS    0H
         OC    DXD_X(2),DXD_X                 INDEX AND BASE ZERO?
         BZ    EXIT0000                       YES
         LA    R1,COMM_SOURCE_OPERANDS
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C'('                     OPEN PAREN
         LA    R1,1(,R1)
         MVI   0(R1),C'R'
         SR    R3,R3
         ICM   R3,1,DXD_X                     INDEX REGISTER
         BZ    GEN0130                        ZERO.. SKIP
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   1(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R9,SCAN0000                    FIND BLANK
GEN0130  DS    0H
         ICM   R3,1,DXD_BASE                  BASE REGISTER
         BZ    GEN0140
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT COMMA
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   2(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R9,SCAN0000                    FIND BLANK
GEN0140  DS    0H
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C'0'
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRX)
EDIT_WORD      DC   X'F020202020202120'

OP_BC          DC   CL6'BC'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'

COND_ARITH     DS   0C
               DC   X'00',CL6'NOP'
               DC   X'10',CL6'BO'
               DC   X'20',CL6'BP'
               DC   X'40',CL6'BM'
               DC   X'70',CL6'BNZ'
               DC   X'80',CL6'BZ'
               DC   X'B0',CL6'BNM'
               DC   X'D0',CL6'BNP'
               DC   X'E0',CL6'BNO'
               DC   X'F0',CL6'B'
               DC   X'FF'

COND_COMPARE   DS   0C
               DC   X'00',CL6'NOP'
               DC   X'20',CL6'BH'
               DC   X'40',CL6'BL'
               DC   X'70',CL6'BNE'
               DC   X'80',CL6'BE'
               DC   X'B0',CL6'BNL'
               DC   X'D0',CL6'BNH'
               DC   X'F0',CL6'B'
               DC   X'FF'

COND_LOGICAL   DS   0C
               DC   X'00',CL6'NOP'
               DC   X'10',CL6'BO'
               DC   X'40',CL6'BM'
               DC   X'70',CL6'BNZ'
               DC   X'80',CL6'BZ'
               DC   X'B0',CL6'BNM'
               DC   X'E0',CL6'BNO'
               DC   X'F0',CL6'B'
               DC   X'FF'

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRX          DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_DISP       DS   XL2
DXD_R          DS   X
DXD_X          DS   X
DXD_BASE       DS   X
DXD_COND       DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
COND_DSECT     DSECT
COND_COND      DS   X
COND_MNEMONIC  DS   CL6
COND_DSECT_L   EQU  *-COND_DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENRX
./ ADD NAME=GENSI    0101-09119-09198-0832-00185-00185-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENSI                                                *
*                                                                    *
*  Function:                                                         *
*   Generate SI type instructions                                    *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENSI    CSECT
GENSI    AMODE 31
GENSI    RMODE ANY
         USING GENSI,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENSI'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDSI,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
         ICM   R7,15,AREA_REF_LABEL1          LABEL REFERENCED?
         USING LABEL_DSECT,R7
         BZ    GEN0020                        NO
*--------------------------------------------------------------------*
*        Generate label and displacement                             *
*--------------------------------------------------------------------*
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R9,SCAN0000                    FIND END OF NAME
         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    GEN0010
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000
         MVC   1(4,R1),0(R2)                  COPY DISP
         BAL   R9,SCAN0000
         B     GEN0030
GEN0010  DS    0H
         BAL   R9,SCAN0000
         B     GEN0030
*--------------------------------------------------------------------*
*        Generate disp from register                                 *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         MVC   DXD_WORK(2),2(R6)              COPY BASE AND DISP
         NI    DXD_WORK,X'0F'                 REMOVE BASE
         LH    R0,DXD_WORK                    DISP ONLY
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000
         MVC   COMM_SOURCE_OPERANDS(4),0(R2)
         LA    R1,COMM_SOURCE_OPERANDS
         BAL   R9,SCAN0000
         MVI   0(R1),C'('
         MVI   1(R1),C'R'
         SR    R2,R2
         IC    R2,2(R6)                       BASE +
         SRL   R2,4                           SHIFT OUT DISP
         SLL   R2,1
         LA    R2,REGISTER_TABLE(R2)
         MVC   2(2,R1),0(R2)
         BAL   R9,SCAN0000
         MVI   0(R1),C')'
         LA    R1,1(,R1)
*--------------------------------------------------------------------*
*        Generate immediate value                                    *
*--------------------------------------------------------------------*
GEN0030  DS    0H
         CLI   OPCODE_FORMAT,$OPCODE_S        'S' FORMAT?
         BE    EXIT0000                       YES..
         MVI   0(R1),C','                     COMMAN
         LA    R1,1(,R1)
         LTR   R7,R7                          USING A LABEL?
         BZ    GEN0050                        NO
         ICM   R4,15,LABEL_EQU_NEXT           ANY EQU'S?
         BZ    GEN0050                        NO
         USING EQU_DSECT,R4
GEN0040  DS    0H
         CLC   EQU_VALUE,1(R6)                MATCH?
         BE    GEN0060                        YES
         ICM   R4,15,EQU_NEXT                 NEXT EQU
         BNZ   GEN0040
GEN0050  DS    0H
         MVC   0(2,R1),=C'X'''
         UNPK  2(3,R1),1(2,R6)                UNPACK IMMEDIATE VALUE
         TR    2(2,R1),COMM_HEXCHAR
         MVI   4(R1),C''''
         B     EXIT0000
GEN0060  DS    0H
         MVC   0(63,R1),EQU_LABEL
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C'0'
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDSI)
EDIT_WORD      DC   X'F020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDSI          DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_WORK       DS   XL8

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENSI
./ ADD NAME=GENSS1   0109-07124-09198-0832-00228-00201-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENSS1                                               *
*                                                                    *
*  Function:                                                         *
*   GENERATE SS TYPE INSTRUCTIONS (MVC, CLC, ...                     *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENSS1   CSECT
GENSS1   AMODE 31
GENSS1   RMODE ANY
         USING GENSS1,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENSS1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDSS1,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         MVC   DXD_LENGTH,1(R6)               COPY LENGTH
         SR    R3,R3
         IC    R3,2(R6)                       BASE 1 AND PART OF DISP 1
         SRL   R3,4                           SHIFT OUT DISP
         STC   R3,DXD_BASE1
         MVC   DXD_DISP1,2(R6)                COPY BASE 1 AND DISP 1
         NI    DXD_DISP1,X'0F'                REMOVE BASE 1
         IC    R3,4(R6)                       BASE 2 AND PART OF DISP 2
         SRL   R3,4                           SHIFT OUT DISP
         STC   R3,DXD_BASE2                   SAVE BASE 2
         MVC   DXD_DISP2,4(R6)                COPY BASE 2 AND DISP 2
         NI    DXD_DISP2,X'0F'                REMOVE BASE 2
         LA    R1,COMM_SOURCE_OPERANDS
         ICM   R7,15,AREA_REF_LABEL1          LABEL FOR OPERAND 1?
         BZ    GEN0020                        NO
         USING LABEL_DSECT,R7
*--------------------------------------------------------------------*
*        GENERATE LABEL(LENGTH)                                      *
*--------------------------------------------------------------------*
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R9,SCAN0000                    FIND END OF NAME
         ICM   R4,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    GEN0010
         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000
         MVC   1(4,R1),0(R2)                  COPY DISP
         BAL   R9,SCAN0000
GEN0010  DS    0H
         MVI   0(R1),C'('                     OPEN PAREN
         SR    R4,R4
         IC    R4,DXD_LENGTH                  LENGTH
         LA    R4,1(,R4)                      FULL LENGTH
         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON ZERO
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R9,SCAN0000
         MVI   0(R1),C')'                     CLOSING PAREN
         B     GEN0030
*--------------------------------------------------------------------*
*        GENERATE "DDD(LL,BASE1)"                                    *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         LH    R4,DXD_DISP1                   DISP 1
         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   COMM_SOURCE_OPERANDS(3),0(R2)  COPY DISP
         LA    R1,COMM_SOURCE_OPERANDS
         BAL   R9,SCAN0000
         MVI   0(R1),C'('                     OPEN PAREN
         SR    R4,R4
         IC    R4,DXD_LENGTH
         LA    R4,1(,R4)                      FULL LENGTH
         CVD   R4,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R9,SCAN0000                    FIND 1ST NON BLANK
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT COMMA
         IC    R3,DXD_BASE1
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)
         MVC   2(2,R1),0(R2)                  COPY REGISTER
         BAL   R9,SCAN0000
         MVI   0(R1),C')'                     CLOSE PARM
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
GEN0030  DS    0H
         MVI   1(R1),C','
         ICM   R7,15,AREA_REF_LABEL2          LABEL FOR OPERAND2?
         BZ    GEN0040                        NO
         MVC   2(63,R1),LABEL_NAME            COPY NAME
         ICM   R4,15,AREA_REF_DISP2           DISP FROM LABEL?
         BZ    EXIT0000                       NO
         BAL   R9,SCAN0000
         MVI   0(R1),C'+'                     PLUS
         CVD   R4,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   1(4,R1),0(R2)                  COPY DISP
         B     EXIT0000
GEN0040  DS    0H
         SR    R4,R4
         ICM   R4,3,DXD_DISP2                 DISP 2
         CVD   R4,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   2(4,R1),0(R2)
         BAL   R9,SCAN0000                    FIND BLANK
         MVI   0(R1),C'('
         MVI   1(R1),C'R'
         IC    R3,DXD_BASE2                   BASE 2
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)
         MVC   2(2,R1),0(R2)                  COPY REGISTER
         BAL   R9,SCAN0000
         MVI   0(R1),C')'                     CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C' '
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDSS1)
EDIT_WORD      DC   X'4020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDSS1         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_DISP1      DS   H
DXD_DISP2      DS   H
DXD_BASE1      DS   X
DXD_BASE2      DS   X
DXD_LENGTH     DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENSS1
./ ADD NAME=GENSS2   0111-07127-09198-0833-00212-00201-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENSS2                                               *
*                                                                    *
*  Function:                                                         *
*   Generate packed decimal (PACK, AP, ZAP, ...                      *
*                                                                    *
*  At entry R8 is AREA address                                       *
*           R6 is address of instruction                             *
*           R5 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENSS2   CSECT
GENSS2   AMODE 31
GENSS2   RMODE ANY
         USING GENSS2,R11
         USING DISCOMM,R12
         USING AREA_DSECT,R8
         USING OPCODE_DSECT,R5
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENSS2'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDSS2,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R8,                                              +
               DATA2=0(R6)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,COMM_SOURCE_OPERANDS
         SR    R0,R0
         IC    R0,1(R6)                       LENGTHS 1 AND 2
         SRL   R0,4                           SHIFT OUT LENGTH 2
         STC   R0,DXD_LENGTH                  SET LENGTH
         IC    R0,2(R6)                       BASE 1 AND PART OF DISP 1
         SRL   R0,4
         STC   R0,DXD_BASE
         MVC   DXD_DISP,2(R6)                 COPY BASE AND DDD 1
         NI    DXD_DISP,X'0F'
         MVC   DXD_LABEL,AREA_REF_LABEL1      ADDR OF LABEL 1
         MVC   DXD_LABEL_DISP,AREA_REF_DISP1  DISP FROM LABEL 1
         BAL   R4,GEN0010                     COPY LENGTH
         MVI   0(R1),C','
         LA    R1,1(,R1)
         MVC   DXD_LENGTH,1(R6)               COPY LENGTHS 1 AND 2
         NI    DXD_LENGTH,X'0F'               REMOVE LENGTH 1
         SR    R0,R0
         IC    R0,4(R6)
         SRL   R0,4
         STC   R0,DXD_BASE
         MVC   DXD_DISP,4(R6)                 COPY BASE AND DDD 2
         NI    DXD_DISP,X'0F'                 COPY BASE AND DDD 2
         MVC   DXD_LABEL,AREA_REF_LABEL2      ADDR OF LABEL 2
         MVC   DXD_LABEL_DISP,AREA_REF_DISP2  DISP FROM LABEL 1
         BAL   R4,GEN0010
         B     EXIT0000
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
GEN0010  DS    0H
         ICM   R7,15,DXD_LABEL                LABEL BLOCK ADDR
         BNZ   GEN0020
*--------------------------------------------------------------------*
*        GENERATE "DDD(LL,BASE)"                                     *
*--------------------------------------------------------------------*
         LH    R15,DXD_DISP                   DISP
         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   0(8,R1),0(R2)                  COPY DISP
         BAL   R9,SCAN0000
         MVI   0(R1),C'('                     OPEN PAREN
         SR    R15,R15
         IC    R15,DXD_LENGTH
         LA    R15,1(,R15)                    FULL LENGTH
         CVD   R15,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST NON BLANK
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R9,SCAN0000                    FIND 1ST NON BLANK
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT COMMA
         SR    R15,R15
         IC    R15,DXD_BASE
         SLL   R15,1                          MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R15)
         MVC   2(2,R1),0(R2)                  COPY REGISTER
         BAL   R9,SCAN0000
         MVI   0(R1),C')'                     CLOSE PAREN
         LA    R1,1(,R1)                      UPDATE ADDRESS
         BR    R4
*--------------------------------------------------------------------*
*        GENERATE LABEL(LENGTH)                                      *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         USING LABEL_DSECT,R7
         MVC   0(63,R1),LABEL_NAME            COPY LABEL NAME
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         SR    R0,R0                          CLEAR R0
         ICM   R0,3,DXD_LABEL_DISP            DISP FROM LABEL
         BZ    GEN0030                        ZERO..
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R9,SCAN1000                    FIND 1ST DIGIT
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   1(8,R1),0(R2)                  COPY DISP
         BAL   R9,SCAN0000                    FIND 1ST BLANK
GEN0030  DS    0H
         MVI   0(R1),C'('                     INSERT OPEN PAREN
         SR    R15,R15                        CLEAR R15
         IC    R15,DXD_LENGTH                 LENGTH
         LA    R15,1(,R15)                    TRUE LENGTH
         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD               EDIT LENGTH
         BAL   R9,SCAN1000                    FIND 1ST DIGIT
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R9,SCAN0000                    FIND 1ST BLANK
         MVI   0(R1),C')'                     CLOSING PAREN
         LA    R1,1(,R1)
         BR    R4
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R9
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C' '
         BNER  R9
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDSS2)
EDIT_WORD      DC   X'4020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDSS2         DSECT
               DS   18F
DXD_CSECT      DS   CL8
DXD_LABEL      DS   A
DXD_LENGTH     DS   X
DXD_BASE       DS   X
DXD_DISP       DS   XL2
DXD_LABEL_DISP DS   XL2

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISCOMM  TYPE=DSECT
               COPY     DISASMDA

               IFGACB   AM=VSAM
ACB_L          EQU      *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               COPY REGEQU
               END  GENSS2
./ ADD NAME=SKEL     0103-07075-08352-0820-00060-00057-00000-SOURCE
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISGEN                                               *
*                                                                    *
*  Function:                                                         *
*   Display the module text.                                         *
*                                                                    *
*--------------------------------------------------------------------*
DISGEN   CSECT
DISGEN   AMODE 31
DISGEN   RMODE ANY
         USING DISGEN,R11
         USING DISCOMM,R12
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R11,R15                        SET BASE REG
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISGEN'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         L     R15,COMM_DXD_ADDRESS           WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDTLIST,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0010  DS    0H
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START     DC   Q(DXDTLIST)
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDTLIST          DSECT
                  DS   18F
DXD_CSECT         DS   CL8
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                  DISCOMM  TYPE=DSECT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
                 COPY REGEQU
                 END  DISGEN
