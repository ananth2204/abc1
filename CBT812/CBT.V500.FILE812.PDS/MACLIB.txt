./ ADD NAME=ATTRS    0101-08352-09023-1512-00012-00011-00000-MACLIB
* ------------------------------------------------------------------- *
*                                                                     *
*     Attributes used for ISPF panels                                 *
*                                                                     *
* ------------------------------------------------------------------- *
$ATTR_NORMAL          EQU   X'01'
$ATTR_INPUT           EQU   X'02'
$ATTR_HIGH            EQU   X'03'
$ATTR_HIGH_YELLOW     EQU   X'04'
$ATTR_HIGH_RED        EQU   X'05'
$ATTR_HIGH_TURQUOISE  EQU   X'06'
$ATTR_HIGH_GREEN      EQU   X'07'
./ ADD NAME=BINDREQ  0100-07061-07061-1401-00020-00020-00000-MACLIB
*---------------------------------------------------------------------*
*                                                                     *
*        Binder requests                                              *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         BINDREQ &DSECT=YES
         AIF   ('&DSECT' EQ 'YES').LBL0010
BINDREQ         DS    0A
         AGO   .LBL0020
.LBL0010 ANOP
BINDREQ         DSECT
.LBL0020 ANOP
BIND_FUNC       DS     X           FUNCTION
$BIND_STARTD    EQU    X'01'       .. START DIALOG
$BIND_NAMES     EQU    X'02'       .. BUILD NAME CHAIN
$BIND_ESD_RLD   EQU    X'03'       .. BUILD ESD AND RLD DATA CHAINS
$BIND_TEXT      EQU    X'04'       .. READ TEXT
$BIND_ENDD      EQU    X'05'       .. END DIALOG
         MEND
./ ADD NAME=DISASMDA 0169-07038-09121-1602-00287-00218-00000-MACLIB
* ------------------------------------------------------------------- *
*                                                                     *
*     DISASM's data areas                                             *
*                                                                     *
*     There were so many different blocks that making up macros or    *
*     copy members took more time than it was worth.  Most of the     *
*     data areas are small, so it doesn't cost much to assemble them  *
*     all in all the modules.                                         *
*                                                                     *
* ------------------------------------------------------------------- *
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        AREA DESCRIPTORS                                             *
*                                                                     *
*  All text areas will be described by a DATA or INSTRUCTION AREA.    *
*                                                                     *
* ------------------------------------------------------------------- *
AREA_DSECT          DSECT
AREA_PREV           DS    A          PREV DATA/INSTRUCTION BLOCK
AREA_NEXT           DS    A          NEXT DATA/INSTRUCTION BLOCK
AREA_EYE            DS    CL8        EYE CATCHER
AREA_BEGIN          DS    XL4        STARTING DISPLACEMENT
AREA_END            DS    XL4        ENDING DISPLACEMENT
AREA_LENGTH         DS    XL4        LENGTH
AREA_LABEL          DS    XL4        LABEL ADDRESS
AREA_OPCODE         DS    A          ADDRESS OF OPCODE TABLE ENTRY
AREA_REF_LABEL1     DS    A          OPERAND 1 LABEL
AREA_REF_DISP1      DS    XL4        DISPLACEMENT FROM OPERAND 1 LABEL
AREA_REF_LABEL2     DS    A          OPERAND 2 LABEL
AREA_REF_DISP2      DS    XL4        DISPLACEMENT FROM OPERAND 2 LABEL
AREA_TYPE           DS    C          AREA TYPE
$AREA_DATA          EQU   C'D'       .. DATA AREA
$AREA_INSTRUCTION   EQU   C'I'       .. INSTRUCTION
AREA_DATA_TYPE      DS    X          DATA TYPES (DATA AREAS)
$DATA_USER          EQU   X'01'      .. USER DEFINED
$DATA_ACON          EQU   X'02'      .. A-CON
$DATA_31            EQU   X'82'      .. AD-CON WITH 31-BIT MODE BIT ON
$DATA_VCON          EQU   X'03'      .. V-CON
$DATA_INTERNAL      EQU   X'04'      .. INTERNALLY DETECTED
$DATA_CXD           EQU   X'05'      .. PSEUDO AREA SIZE
$DATA_Q             EQU   X'06'      .. PSEUDO AREA DISPLACEMENT
AREA_FLAGS          DS    X
$AREA_LABEL_GENNED  EQU   X'80'      .. LABEL HAS BEEN GENNED
$AREA_RLD_PLUS      EQU   X'40'      .. DIRECTION + (FOR RLD ITEM)
$AREA_RLD_MINUS     EQU   X'20'      .. DIRECTION - (FOR RLD ITEM)
$AREA_OVERLAP       EQU   X'10'      .. OVERLAPS ANOTHER AREA
AREA_RLD_NAME       DS    CL63       VCON, Q, ETC NAME
AREA_DSECT_L        EQU   *-AREA_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        Assembler source                                             *
*                                                                     *
* ------------------------------------------------------------------- *
ASM_DSECT           DSECT
ASM_PREV            DS    A          PREV ASM BLOCK
ASM_NEXT            DS    A          NEXT ASM BLOCK
ASM_EYE             DS    CL8        EYE CATCHER
ASM_SOURCE          DS    CL80       ASSEMBLE SOURCE STATEMENT
ASM_DSECT_L         EQU   *-ASM_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        BASE REGISTER DEFINITIONS                                    *
*                                                                     *
* ------------------------------------------------------------------- *
BASE_DSECT          DSECT
BASE_PREV           DS    A          PREV BASE BLOCK
BASE_NEXT           DS    A          NEXT BASE BLOCK
BASE_EYE            DS    CL8        EYE CATCHER
BASE_BEGIN          DS    XL4        STARTING DISPLACEMENT
BASE_END            DS    XL4        ENDING DISPLACEMENT
BASE_DISP           DS    XL4        DISPLACEMENT BASE REFERS TO
BASE_REGISTER       DS    X          BASE REGISTER
BASE_CHAR_REGISTER  DS    CL3        BASE REGISTER IN CHARACTER FORM
BASE_FLAGS          DS    X          FLAGS
$BASE_GENNED        EQU   X'80'
$BASE_DROPPED       EQU   X'40'
BASE_DSECT_L        EQU   *-BASE_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        DSECT DEFINITIONS                                            *
*                                                                     *
* ------------------------------------------------------------------- *
DSECT_DSECT         DSECT
DSECT_PREV          DS    A          PREV DSECT BLOCK
DSECT_NEXT          DS    A          NEXT DSECT BLOCK
DSECT_EYE           DS    CL8        EYE CATCHER
DSECT_LABEL_PREV    DS    A          LABEL BLOCK'S ADDRESS
DSECT_LABEL_NEXT    DS    A          LABEL BLOCK'S ADDRESS
DSECT_NAME          DS    CL63       DSECT'S NAME
DSECT_FLAGS         DS    X          FLAGS
$DSECT_LABELS_READ  EQU   X'80'      .. LABELS HAVE BEEN READ
DSECT_DSECT_L       EQU   *-DSECT_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        ESD ITEMS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ESD_DSECT           DSECT
ESD_PREV            DS    A          PREV ESD BLOCK'S ADDRESS
ESD_NEXT            DS    A          NEXT ESD BLOCK'S ADDRESS
ESD_EYE             DS    CL8        EYE CATCHER
ESD_NAME            DS    CL8        SYMBOL NAME
ESD_RESIDENT        DS    CL8        SECTION CONTAINING SYMBOL
ESD_TARGET          DS    CL8        SECTION NAME REFERS TO
ESD_TYPE            DS    CL2        TYPE
ESD_TYPE_QUAL       DS    CL2        TYPE QUALIFIER
ESD_LENGTH          DS    AL4        ENTRY LENGTH
ESD_ELEM_OFFSET     DS    AL4        ELEMENT OFFSET
ESD_CLASS_OFFSET    DS    AL4        CLASS OFFSET
ESD_DSECT_L         EQU   *-ESD_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        LABEL BLOCK                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
LABEL_DSECT         DSECT
LABEL_PREV          DS    A          PREV LABEL BLOCK
LABEL_NEXT          DS    A          NEXT LABEL BLOCK
LABEL_EYE           DS    CL8        EYE CATCHER
LABEL_NAME          DS    CL63       LABEL NAME
LABEL_DISP          DS    XL4        DISPLACEMENT TO THIS LABEL
LABEL_EQU_PREV      DS    A          EQU BLOCK ADDRESS
LABEL_EQU_NEXT      DS    A          EQU BLOCK ADDRESS
LABEL_TYPE          DS    C          LABEL TYPE
$LABEL_DATA         EQU   C'D'       .. LABEL AT DATA
$LABEL_ESD          EQU   C'E'       .. LABEL FROM AN ESD ENTRY
$LABEL_INSTR        EQU   C'I'       .. LABEL AT AN INSTRUCTION
$LABEL_RLD          EQU   C'R'       .. LABEL FROM AN RLD ENTRY
LABEL_DSECT_L       EQU   *-LABEL_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        Section "name" blocks                                        *
*                                                                     *
* ------------------------------------------------------------------- *
NAME_DSECT          DSECT
NAME_PREV           DS    A          PREV NAME BLOCK
NAME_NEXT           DS    A          NEXT NAME BLOCK
NAME_EYE            DS    CL8        EYE CATCHER
NAME_NAME           DS    CL8        SECTION NAME
NAME_OFFSET         DS    F          DISPLACEMENT
NAME_DSECT_L        EQU   *-NAME_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        OPCODE DEFINITIONS                                           *
*                                                                     *
* ------------------------------------------------------------------- *
OPCODE_DSECT        DSECT
OPCODE_MACHINE      DS    CL2        OPCODE
OPCODE_MNEMONIC     DS    CL5        MNEMONIC
OPCODE_LENGTH       DS    AL2        INSTRUCTION LENGTH
OPCODE_FORMAT       DS    X          FORMAT
$OPCODE_RR1         EQU   X'00'      .. RR FORMAT 1 (R1,R2)
$OPCODE_RR2         EQU   X'01'      .. RR FORMAT 2 (SVC'S)
$OPCODE_RR3         EQU   X'02'      .. RR FORMAT 3 (BRANCHES)
$OPCODE_RX          EQU   X'03'      .. RX FORMAT
$OPCODE_S           EQU   X'04'      .. S FORMAT
$OPCODE_SI          EQU   X'05'      .. SI (IMMEDIATE) FORMAT
$OPCODE_RS1         EQU   X'06'      .. RS FORMAT 1 (SHIFTS)
$OPCODE_RS2         EQU   X'07'      .. RS FORMAT 2 (BXLE, BXH,  )
$OPCODE_RS3         EQU   X'08'      .. RS FORMAT 3 (MASK TYPE)
$OPCODE_SS1         EQU   X'09'      .. SS FORMAT 1 (CHARACTER)
$OPCODE_SS2         EQU   X'0A'      .. SS FORMAT 2 (PACKED DECIMAL)
$OPCODE_SS3         EQU   X'0B'      .. SS FORMAT 3 (MVCK, MVCS, MVCP)
$OPCODE_SS4         EQU   X'0C'      .. SS FORMAT 4 (SRP)
$OPCODE_B2          EQU   X'0D'      .. B2 (NO OPERANDS)
$OPCODE_B2S         EQU   X'0E'      .. B2 S-FORMAT
$OPCODE_B2R         EQU   X'0F'      .. B2 R FORMAT
$OPCODE_B2RR        EQU   X'10'      .. B2 RR FORMAT
OPCODE_FLAGS        DS    X          FLAGS
$OPCODE_EXT         EQU   X'80'      .. EXTENDED MNEMONICS
$OPCODE_SVC         EQU   X'40'      .. SVC
$OPCODE_NO_COMMENT  EQU   X'20'      .. NO COMMENT
$OPCODE_REF         EQU   X'10'      .. GENERATES A LABEL REFERENCE
$OPCODE_CCA         EQU   X'08'      .. SETS CONDITION CODE, ARITHMETIC
$OPCODE_CCC         EQU   X'04'      .. SETS CONDITION CODE, COMPARE
$OPCODE_CCL         EQU   X'02'      .. SETS CONDITION CODE, LOGICAL
$OPCODE_BRANCH      EQU   X'01'      .. BRANCHING INSTRUCTION
OPCODE_REGS         DS    X          REGISTER RESTRICTIONS
$OPCODE_1EVEN       EQU   X'80'      .. OPERAND 1 MUST BE EVEN
$OPCODE_10246       EQU   X'40'      .. OPERAND 1 MUST BE 0, 2, 4, OR 6
$OPCODE_104         EQU   X'20'      .. OPERAND 1 MUST BE 0 OR 4
$OPCODE_2EVEN       EQU   X'08'      .. OPERAND 2 MUST BE EVEN
$OPCODE_20246       EQU   X'04'      .. OPERAND 2 MUST BE 0, 2, 4, OR 6
$OPCODE_204         EQU   X'02'      .. OPERAND 2 MUST BE 0 OR 4
OPCODE_COMMENT      DS    CL25       COMMENT IF PRESENT
OPCODE_DSECT_L      EQU   *-OPCODE_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        EQU DEFINITIONS                                              *
*                                                                     *
* ------------------------------------------------------------------- *
EQU_DSECT           DSECT
EQU_PREV            DS    A          PREV EQU BLOCK'S ADDRESS
EQU_NEXT            DS    A          NEXT EQU BLOCK'S ADDRESS
EQU_EYE             DS    CL8        EYECATCHER
EQU_LABEL           DS    CL63       LABEL ON EQU STATEMENT
EQU_VALUE           DS    X          ASSOCIATED EQU VALUE
EQU_DSECT_L         EQU   *-EQU_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        USING DEFINITIONS                                            *
*                                                                     *
* ------------------------------------------------------------------- *
USING_DSECT         DSECT
USING_PREV          DS    A          PREV USING BLOCK
USING_NEXT          DS    A          NEXT USING BLOCK
USING_EYE           DS    CL8        EYE CATCHER
USING_DSECT_NAME    DS    CL63       DSECT'S NAME
USING_DSECT_LABEL   DS    CL63       LABEL WITHIN THE DSECT
USING_DSECT_ADDR    DS    A          RELATED DSECT BLOCK'S ADDRESS
USING_LABEL_ADDR    DS    A          LABEL BLOCK'S ADDRESS
USING_DISP          DS    XL4        DISP FROM DSECT OR LABEL
USING_REGISTER      DS    X          BASE REGISTER
USING_CHAR_REGISTER DS    CL3        BASE REGISTER (CHAR FORM)
USING_FLAG          DS    X          FLAGS
$USING_NO_DISP      EQU   X'80'      .. NO DISPLACEMENTS
$USING_GENNED       EQU   X'40'      .. USING GENNED
$DROP_GENNED        EQU   X'20'      .. DROP GENNED
USING_BEGIN         DS    XL4        STARTING DISPLACEMENT
USING_END           DS    XL4        ENDING DISPLACEMENT
USING_DSECT_L       EQU   *-USING_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*        Config file records                                          *
*                                                                     *
* ------------------------------------------------------------------- *
CONFIG_RECORD       DSECT
CONFIG_TYPE         DS    X          TYPE OF DATA
$CONFIG_OP_TABLE    EQU   X'01'      .. OPCODE TABLE
$CONFIG_DATAAREA    EQU   X'02'      .. USER DEFINED DATA AREA
$CONFIG_BASE        EQU   X'03'      .. BASE
$CONFIG_USING       EQU   X'04'      .. USING
$CONFIG_DSECT_KSDS  EQU   X'05'      .. PREPROCESSED DSECT KSDS
$CONFIG_SYSLIB      EQU   X'06'      .. SYSLIB(S) FOR ASSEMBLER
$CONFIG_PREFIX_LENGTH EQU X'07'      .. LABEL PREFIX LENGTH
$CONFIG_PREFIX      EQU   X'08'      .. LABEL PREFIX
$CONFIG_ASM_SOURCE  EQU   X'09'      .. ASSEMBLER SOURCE
$CONFIG_OUTPUT_DSN  EQU   X'0A'      .. OUTPUT DSN
CONFIG_DATA         DS    CL255      SAVED DATA
CONFIG_RECORD_L     EQU   *-CONFIG_RECORD
*---------------------------------------------------------------------*
*                                                                     *
*        Preprocessed DSECT KSDS                                      *
*                                                                     *
*                                                                     *
*   The disassembler allows DSECTs to be pre-processed by DISASMU1.   *
*                                                                     *
*   The high-level assembler allows label names to be up to 63        *
*   characters in length... ruling out using a PDS or PDS/E with      *
*   the DSECT name as the member name.  So, I used VSAM KSDS's.       *
*                                                                     *
*   A snag is that the system does not allow VSAM data sets to be     *
*   concatenated.  So, I allow for multiple KSDS'S.  When a DSECT     *
*   is referenced on a USING statement, the disassembler first        *
*   "looks" for the DSECT in the output from the assembled source     *
*   given by the ASM,START and ASM,END statements.  If the DSECT      *
*   is not found, the DSECTxx DDs will be searched in the same        *
*   order they appear in the JCL.                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
KSDS_DSECT          DSECT
KSDS_PREV           DS     A           PREV KSDS BLOCK
KSDS_NEXT           DS     A           NEXT KSDS BLOCK
KSDS_EYE            DS     CL8         EYE CATCHER
KSDS_DDNAME         DS     CL8         DD NAME
KSDS_DSNAME         DS     CL44        DSN
KSDS_ACB            DS     (ACB_L)X    ACB
KSDS_DSECT_PREV     DS     A
KSDS_DSECT_NEXT     DS     A
KSDS_FLAGS          DS     X           FLAGS
$KSDS_OPEN          EQU    X'80'       .. ACB IS OPEN
$KSDS_DSECTS_READ   EQU    X'40'       .. DSECTS HAVE BEEN READ
KSDS_DSECT_L        EQU    *-KSDS_DSECT
*---------------------------------------------------------------------*
*                                                                     *
*        Assembler SYSLIBs                                            *
*                                                                     *
*---------------------------------------------------------------------*
SYSLIB_DSECT  DSECT
SYSLIB_PREV   DS     A           PREV SYSLIB BLOCK
SYSLIB_NEXT   DS     A           NEXT SYSLIB BLOCK
SYSLIB_EYE    DS     CL8         EYE CATCHER
SYSLIB_DDNAME DS     CL8         DD NAME
SYSLIB_DSNAME DS     CL44        DSN
SYSLIB_DSECT_L EQU   *-SYSLIB_DSECT
./ ADD NAME=DISCOMM  0199-07038-09188-0936-00561-00315-00000-MACLIB
* ------------------------------------------------------------------- *
*                                                                     *
*          COMMON AREA MAPPING MACRO                                  *
*                                                                     *
*     This macro will generate either the 'common' module CSECT or    *
*     a DSECT to map the 'common' module.  'Common' is used for       *
*     constants and work areas that are required by several modules   *
*     allowing some elimination of duplicated data and to allow       *
*     inter-module communication.                                     *
*                                                                     *
*     The trace table code is also incorporated into DISCOMM.         *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
         DISCOMM  &TYPE=
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
DISCOMM  CSECT
         AGO   .NODSECT
.DSECT   ANOP
DISCOMM  DSECT
.NODSECT ANOP
* ------------------------------------------------------------------- *
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization, DISMAIN acquires storage for the    *
*  trace table and sets COMM_TRACE_1STX, COMM_TRACE_LAST, and         *
*  COMM_TRACE_CURR.  DISMAIN sets R11 to the address of DISCOMM       *
*  and all other modules depend on this remaining unchanged.          *
*                                                                     *
*  MACRO ITRACE may be used to call the trace.                        *
*                                                                     *
*  R14 is the only register altered by the trace code.                *
*                                                                     *
*  The trace table is a "wrap-around" table.  COMM_TRACE_1STX is      *
*  the first entry's address, COMM_TRACE_LAST is the last entry's     *
*  address, and comm_TRACE_CURR is the address of the last entry      *
*  added to the trace table.                                          *
*                                                                     *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*  If a DISTRACE DD is provided in the JCL, trace entries will        *
*  also be written as an 'external' trace.  The DISTRACE DCB          *
*  is OPENed and CLOSEd by DISMAIN.                                   *
*                                                                     *
*                                                                     *
*  The trace code does not allow for multiple subtasks.               *
*  If there is ever a need for the disassembler to use multiple       *
*  subtasks, this code will need to be updated.  At the very          *
*  least, it will need to use "CS" (compare and swap) logic to        *
*  update COMM_TRACE_CURR.  The external trace would probably         *
*  need to be eliminated.                                             *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R11  'DISCOMM' address                                    *
*           R12  current module's base address                        *
*                and the module's name must be at 10 bytes (0A hex)   *
*                into the module                                      *
*           R13  address of a standard 72-byte register save area     *
*                followed by two 8 character work areas used to       *
*                capture the 'DATA1/RDATA1' and 'DATA2/RDATA2' data.  *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
* ------------------------------------------------------------------- *
TRACE000 DS    0H
         USING DISCOMM,R12                         DEFINE BASE
         USING TRENTRY,R2                          DEFINE BASE
         STM   R0,R15,TRCESAVE                     SAVE ALL REGISTERS
         ICM   R2,15,COMM_TRACE_CURRENT            CURRENT TRACE ENTRY
         BZ    TRACE020                            NO TRACE TABLE
         OC    0(TRENTRYL,R2),0(R2)                EMPTY ENTRY?
         BZ    TRACE010                            YES.. USE THIS ENTRY
         LA    R2,TRENTRYL(R2)                     NEXT TRACE ENTRY
         C     R2,COMM_TRACE_LAST                  BEYOND END OF TABLE?
         BNH   TRACE010                            NO
         L     R2,COMM_TRACE_1STX                  'WRAP' TRACE TABLE
TRACE010 DS    0H
         ST    R2,COMM_TRACE_CURRENT               SAVE CURRENT ADDRESS
         MVC   TREMOD,10(R11)                      COPY MODULE NAME
         MVC   TREID,0(R14)                        COPY TRACE ID
         MVC   TREDATA1,COMM_TRACE_ITEM_1          COPY TRACE DATA 1
         MVC   TREDATA2,COMM_TRACE_ITEM_2          COPY TRACE DATA 2
         XC    COMM_TRACE_ITEM_1,COMM_TRACE_ITEM_1 CLEAR TRACE DATA
         XC    COMM_TRACE_ITEM_2,COMM_TRACE_ITEM_2 CLEAR TRACE DATA
         TM    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN   TRACE OPEN?
         BNO   TRACE030                            NO
         MVC   TRACE_RECORD(TRACE_RECORD_L),COMM_BLANKS
         MVC   TRACE_CSECT,TREMOD
         MVC   TRACE_ID,TREID
         MVC   TRACE_ITEM_1,TREDATA1
         UNPK  TRACE_ITEM_1_HEX+0(9),TREDATA1+0(5)
         UNPK  TRACE_ITEM_1_HEX+8(9),TREDATA1+4(5)
         TR    TRACE_ITEM_1_HEX,COMM_HEXCHAR
         MVI   TRACE_ITEM_1_HEX+16,C' '
         MVC   TRACE_ITEM_2,TREDATA2
         UNPK  TRACE_ITEM_2_HEX+0(9),TREDATA2+0(5)
         UNPK  TRACE_ITEM_2_HEX+8(9),TREDATA2+4(5)
         TR    TRACE_ITEM_2_HEX,COMM_HEXCHAR
         MVI   TRACE_ITEM_2_HEX+16,C' '
         CLI   COMM_RUN_MODE,$COMM_RUN_TSO         TSO MODE?
         BE    TRACE020                            YES
         PUT   DISTRACE_DCB,TRACE_RECORD           WRITE TO TRACE
         B     TRACE030
TRACE020 DS    0H
         TPUT  TRACE_RECORD,TRACE_RECORD_L         ISSUE TPUT
TRACE030 DS    0H
         LM    R0,R15,TRCESAVE                     RESTORE REGISTERS
         B     8(R14)                              RETURN

TRCESAVE DS    16F                                 REGISTER SAVE AREA

* ------------------------------------------------------------------- *
*                      Trace control                                  *
* ------------------------------------------------------------------- *
                       DS    0A
                       DC    CL4'1STX'             FIRST TRACE ENTRY
COMM_TRACE_1STX        DC    A(0)
                       DC    CL4'LAST'             LAST TRACE ENTRY
COMM_TRACE_LAST        DC    A(0)
                       DC    CL4'CURR'             CURRENT TRACE ENTRY
COMM_TRACE_CURRENT     DC    A(0)
COMM_TRACE_TABLE       DC    A(0)                  TRACE TABLE ADDRESS
COMM_TRACE_ITEM_1      DC    CL8' '                TRACE DATA ITEM 1
COMM_TRACE_ITEM_2      DC    CL8' '                TRACE DATA ITEM 2
COMM_TRACE_SIZE        DC    A(10000*TRENTRYL)     TRACE TABLE SIZE
COMM_TRACE_FLAGS       DC    X'00'
$COMM_TRACE_OPEN       EQU   X'40'
* ------------------------------------------------------------------- *
*                      Trace records                                  *
* ------------------------------------------------------------------- *
TRACE_RECORD           DS    0C
TRACE_CSECT            DC    CL8' '
                       DC    CL2' '
TRACE_ID               DC    CL8' '
                       DS    CL2' '
TRACE_ITEM_1_HEX       DC    CL16' '
                       DS    CL2' '
TRACE_ITEM_1           DC    CL8' '
                       DC    CL5' '
TRACE_ITEM_2_HEX       DC    CL16' '
                       DS    CL2' '
TRACE_ITEM_2           DC    CL8' '
TRACE_RECORD_L         EQU   *-TRACE_RECORD
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DWORD             DC    D'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISIN_DCB    DCB  DSORG=PS,          CONTROL STATEMENTS                +
               DDNAME=DISIN,                                           +
               DCBE=DISIN_DCBE,                                        +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               MACRF=GM
DISIN_DCBE     DCBE   EODAD=*

DISMOD_DCB   DCB  DSORG=PS,          PRINTER                           +
               DDNAME=DISMOD,        .. DD NAME                        +
               EODAD=*,              .. DCBE                           +
               MACRF=R               .. MACRO FORMAT

CONF_DCB     DCB  DSORG=PO,          ASSEMBLER SOURCE                  +
               DDNAME=DISCONF,                                         +
               DCBE=CONF_DCBE,                                         +
               RECFM=FB,                                               +
               LRECL=CONFIG_RECORD_L,                                  +
               BLKSIZE=CONFIG_RECORD_L*16,                             +
               MACRF=(R,W)
CONF_DCBE      DCBE   EODAD=*

SYSIN_DCB    DCB  DSORG=PS,                                            +
               DDNAME=SYSIN,                                           +
               DCBE=SYSIN_DCBE,                                        +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               BLKSIZE=4000,                                           +
               MACRF=(GM,PM)
SYSIN_DCBE     DCBE   EODAD=*

SYSPRINT_DCB DCB  DSORG=PS,                                            +
               DDNAME=SYSPRINT,                                        +
               DCBE=SYSPRINT_DCBE,                                     +
               MACRF=GM
SYSPRINT_DCBE  DCBE   EODAD=*

DISPRINT_DCB DCB  DSORG=PS,                                            +
               DDNAME=DISPRINT,                                        +
               RECFM=FB,                                               +
               LRECL=132,                                              +
               BLKSIZE=5280,                                           +
               MACRF=PM

DISDEBUG_DCB DCB  DSORG=PS,                                            +
               DDNAME=DISDEBUG,                                        +
               RECFM=FB,                                               +
               LRECL=132,                                              +
               BLKSIZE=5280,                                           +
               MACRF=PM

DISTRACE_DCB DCB  DSORG=PS,                                            +
               DDNAME=DISTRACE,                                        +
               RECFM=FB,                                               +
               LRECL=TRACE_RECORD_L,                                   +
               BLKSIZE=25*TRACE_RECORD_L,                              +
               MACRF=PM

DISPUNCH_DCB DCB  DSORG=PS,                                            +
               DDNAME=DISPUNCH,                                        +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               BLKSIZE=4000,                                           +
               MACRF=PM

DISTEMP_DCB  DCB  DSORG=PS,                                            +
               DDNAME=DISTEMP,                                         +
               RECFM=FB,                                               +
               LRECL=132,                                              +
               BLKSIZE=5280,                                           +
               MACRF=PM

COMM_OPEN  OPEN (*,INPUT),                                             +
               MODE=31,                                                +
               MF=L
COMM_CLOSE CLOSE *,                                                    +
               MODE=31,                                                +
               MF=L

           READ COMM_DECB,                                             +
               SF,                                                     +
               MF=L
COMM_DECB_L EQU   *-COMM_DECB

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_VCONS             DS    0F
                       VCONS DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_SPF_PARMS         DS    0A               SPF PARM LIST
COMM_SPF_1             DS    A                .. PARM  1 ADDRESS
COMM_SPF_2             DS    A                .. PARM  2 ADDRESS
COMM_SPF_3             DS    A                .. PARM  3 ADDRESS
COMM_SPF_4             DS    A                .. PARM  4 ADDRESS
COMM_SPF_5             DS    A                .. PARM  5 ADDRESS
COMM_SPF_6             DS    A                .. PARM  6 ADDRESS
COMM_SPF_7             DS    A                .. PARM  7 ADDRESS
COMM_SPF_8             DS    A                .. PARM  8 ADDRESS
COMM_SPF_9             DS    A                .. PARM  9 ADDRESS
COMM_SPF_10            DS    A                .. PARM 10 ADDRESS

COMM_SPF_FUNCTION      DC    CL8' '           FUNCTION
COMM_SPF_PANEL         DC    CL8' '           PANEL NAME

COMM_VDATA_ADDR        DC    A(0)             DYNAMIC AREA STORAGE
COMM_VDATA_SIZE        DC    F'0'             DYNAMIC AREA SIZE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_ISPLINK           DC    A(0)             ISPLINK ADDRESS
COMM_DISSPFD           DC    A(0)             DISSPFD ADDRESS
COMM_DISSPFV           DC    A(0)             DISSPFV ADDRESS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_OPCODE_TABLE_NAME DC    CL8'DISOP'       OPCODE TABLE NAME
COMM_OPCODE_TABLE_ADDR DC    A(0)             OPCODE TABLE ADDRESS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DXD_ADDRESS       DC    A(0)             WORK AREA
COMM_GEN_DISP          DC    A(0)             DISP DURING GEN PROCESS
COMM_GEN_LENGTH        DC    F'0'             LENGTH OF TEXT GENNED
COMM_MSGS              DC    A(0)             MESSAGE TABLE

COMM_NAME_PREV         DC    A(0)             SECTION NAME CHAIN
COMM_NAME_NEXT         DC    A(0)             SECTION NAME CHAIN
COMM_NAME_NBR          DC    A(0)             NBR OF SECTION NAMES

COMM_ESD_PREV          DC    A(0)             EXTERNAL SYMBOL CHAIN
COMM_ESD_NEXT          DC    A(0)             EXTERNAL SYMBOL CHAIN
COMM_ESD_NBR           DC    F'0'             NBR OF ESD ITEMS

COMM_RLD_AREA_PREV     DC    A(0)             RLD AREA CHAIN
COMM_RLD_AREA_NEXT     DC    A(0)             RLD AREA CHAIN

COMM_USER_AREA_PREV_1  DC    A(0)             USER AREA CHAIN
COMM_USER_AREA_NEXT_1  DC    A(0)             USER AREA CHAIN

COMM_USER_AREA_PREV_2  DC    A(0)             USER AREA CHAIN
COMM_USER_AREA_NEXT_2  DC    A(0)             USER AREA CHAIN

COMM_ALL_AREA_PREV     DC    A(0)             ALL AREA CHAIN
COMM_ALL_AREA_NEXT     DC    A(0)             ALL AREA CHAIN

COMM_BASE_PREV         DC    A(0)             BASE CHAIN
COMM_BASE_NEXT         DC    A(0)             BASE CHAIN

COMM_DSECT_PREV        DC    A(0)             ASM START/ASM END DSECTS
COMM_DSECT_NEXT        DC    A(0)             DSECT CHAIN

COMM_USING_PREV        DC    A(0)             USING CHAIN
COMM_USING_NEXT        DC    A(0)             USING CHAIN

COMM_KSDS_PREV         DC    A(0)             DSECT KSDS CHAIN
COMM_KSDS_NEXT         DC    A(0)             DSECT KSDS CHAIN

COMM_SYSLIB_PREV       DC    A(0)             DSECT SYSLIB CHAIN
COMM_SYSLIB_NEXT       DC    A(0)             DSECT SYSLIB CHAIN

COMM_CSECT_EP          DC    A(0)             ENTRY POINT
COMM_CSECT_LENGTH      DC    F'0'             CSECT LENGTH
COMM_CSECT_TEXT        DC    A(0)             TEXT'S STORAGE ADDRESS
COMM_CSECT_TEXT_END    DC    A(0)             TEXT'S ENDING ADDRESS

COMM_ASM_PREV          DC    A(0)             ASSEMBLER SOURCE
COMM_ASM_NEXT          DC    A(0)             ASSEMBLER SOURCE

COMM_USING_USING       DC    A(0)
COMM_USING_KSDS        DC    A(0)
COMM_USING_DSECT       DC    A(0)
COMM_USING_LABEL       DC    A(0)

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DIALOG_TOKEN      DC    XL8'00'          DIALOG TOKEN
COMM_DIALOG_WORKMOD    DC    XL8'00'          DIALOG WORKMOD

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_CONF_DSN          DC    CL44' '
COMM_CONF_MEMBER       DC    CL8' '
COMM_CONF_VOLSER       DC    CL6' '

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_LMOD_DSN          DC    CL44' '
COMM_LMOD_VOLSER       DC    CL6' '

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DDNAME_LENGTH     DC    H'8'
COMM_DDNAME            DC    CL8'DISMOD'      DDNAME

COMM_LMOD_NAME_LENGTH  DC    H'8'
COMM_LMOD              DC    CL8' '           LMOD NAME

COMM_CSECT_NAME_LENGTH DC    H'8'
COMM_CSECT             DC    CL8' '           CSECT NAME

COMM_ASSEMBLER_RC      DC    H'0'             ASSEMBLER'S RC
COMM_PREFIX_LENGTH     DC    H'0'             LABEL PREFIX LENGTH

* ------------------------------------------------------------------- *
*                                                                     *
*              Flag bytes/function code bytes                         *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_FLAGS             DC    X'00'            GLOBAL CONTROL FLAGS
$COMM_FLAGS_ABORT      EQU   X'80'            .. SERIOUS ERROR, ABORT
$COMM_FLAGS_ABEND      EQU   X'40'            .. ABEND AT EXIT
$COMM_FLOAT            EQU   X'02'            .. FLOATING POINT
$COMM_B2               EQU   X'01'            .. B2 INSTRUCTIONS
$COMM_Z                EQU   X'08'            .. Z INSTRUCTIONS
$COMM_ASSEM            EQU   X'04'            .. ASM,START FOUND
$COMM_NO_RLD_WARN      EQU   X'02'            .. NO RLD OVERLAP WARNING
$COMM_AREA_DEBUG       EQU   X'01'            .. AREA DEBUGGING

COMM_FLAGS2            DC    X'00'            MORE CONTROL FLAGS
$DONT_CLEAR_MESSAGES   EQU   X'80'            .. DON'T CLEAR MESSAGES

COMM_RUN_MODE          DC    C' '             RUN MODE
$COMM_RUN_BATCH        EQU   C'B'             .. BATCH
$COMM_RUN_TSO          EQU   C'T'             .. TSO

COMM_DDS               DC    X'00'
$DISIN_DD              EQU   X'80'            .. DISIN    DD PRESENT
$DISPRINT_DD           EQU   X'40'            .. DISPRINT DD PRESENT
$DISMOD_DD             EQU   X'20'            .. DISMOD   DD PRESENT
$DISPUNCH_DD           EQU   X'10'            .. DISPUNCH DD PRESENT
$DISDSECT_DD           EQU   X'08'            .. DISDSECT DD PRESENT
$DISTRACE_DD           EQU   X'04'            .. DISTRACE DD PRESENT
$DISDEBUG_DD           EQU   X'02'            .. DISDEBUG DD PRESENT

COMM_ASSEM_DDS         DC    X'00'            DDS FOR HL ASSEMBLER
$SYSIN_DD              EQU   X'02'            .. SYSIN    DD PRESENT
$SYSPRINT_DD           EQU   X'01'            .. SYSPRINT DD PRESENT

PRINT_COMMAND          DC    X'00'            PRINT FUNCTION
$PRINT_CLOSE           EQU   X'01'            .. CLOSE DISPRINT
$PRINT_HEADING         EQU   X'02'            .. PRINT HEADING
$PRINT_OPEN            EQU   X'03'            .. OPEN DISPRINT
$PRINT_PRINT           EQU   X'04'            .. PRINT
$PRINT_SUB_HEAD        EQU   X'05'            .. PRINT SUB HEADING

COMM_DEBUG_CMD         DC    C' '             DEBUG FUNCTION
$DEBUG_INFO            EQU   C'D'             .. PRINT DEBUG INFO
$DEBUG_HEAD            EQU   C'H'             .. PRINT DEBUG HEADING
$DEBUG_PRINT           EQU   C'P'             .. PRINT GIVEN DATA

COMM_BIND_FUNC         DS    X                BINDER FUNCTION
$BIND_STARTD           EQU   X'01'            .. START DIALOG
$BIND_NAMES            EQU   X'02'            .. OBTAIN SECTION NAMES
$BIND_ESD_RLD          EQU   X'03'            .. OBTAIN ESD AND RLD
$BIND_TEXT             EQU   X'04'            .. READ TEXT
$BIND_ENDD             EQU   X'05'            .. END DIALOG

COMM_VAR_FUNC          DC    X'00'            SPF VARAIBLE FUNCTION
$VAR_DEFINE            EQU   X'01'            .. VDEFINE VARIABLES
$VAR_DELETE            EQU   X'02'            .. VDELETE VARIABLES

COMM_VDATA_FUNC        DC    X'00'            VDATA FUNCTION
$VDATA_GETMAIN         EQU   X'01'            .. VDEFINE VARIABLES
$VDATA_FREEMAIN        EQU   X'02'            .. VDELETE VARIABLES
$VDATA_VDEFINE         EQU   X'03'            .. VDEFINE VDATA
$VDATA_VDELETE         EQU   X'04'            .. VDELETE VDATA

COMM_DSECT_FUNC        DC    X'00'            DSECT FUNCTION
$DSECT_DISPLAY_ALL     EQU   X'01'            .. DISPLAY ALL INFO
$DSECT_SELECT          EQU   X'02'            .. ALLOW SELECTION

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DAIR_FUNC         DS    X                DAIR FUNCTION
$DAIR_ALLOC            EQU   X'01'            .. ALLOCATE
$DAIR_CONCAT           EQU   X'02'            .. CONCAT (SYSLIB)
$DAIR_DEALLOC          EQU   X'03'            .. DEALLOCATE
COMM_DAIR_OPTIONS      DS    X                DAIR OPTIONS
$DAIR_USE_DDNAME       EQU   X'80'            .. USE SPECIFIED DDNAME
$DAIR_SYSPRINT         EQU   X'20'            .. DATA SET FOR SYSPRINT
$DAIR_SYSIN            EQU   X'10'            .. DATA SET FOR SYSIN
COMM_DAIR_DSN          DS    CL44             DSN FOR ALLOC/DE-ALLOC
COMM_DAIR_DD           DS    CL8              DD NAME
COMM_DAIR_MEMBER       DS    CL8              MEMBER NAME OR BLANK
COMM_DAIR_VOLSER       DS    CL6              VOLSER OR BLANK

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_DSINFO_DSN        DC    CL44' '          DSN FOR DSINFO
COMM_DATASET_TYPE      DC    X'00'
$DATASET_TYPE_VSAM     EQU   X'01'            .. VSAM CLUSTER
$DATASET_TYPE_DATA     EQU   X'02'            .. VSAM DATA COMPONENT
$DATASET_TYPE_GDG      EQU   X'03'            .. GDG
$DATASET_TYPE_INDEX    EQU   X'04'            .. VSAM INDEX COMPONENT
$DATASET_TYPE_NONVSAM  EQU   X'05'            .. NON-VSAM
$DATASET_TYPE_OTHER    EQU   X'06'            .. PARTITIONED
$DATASET_TYPE_PS       EQU   X'07'            .. SEQUENTIAL
$DATASET_TYPE_PDS      EQU   X'08'            .. PARTITIONED
COMM_DSINFO_ERROR_INFO DS    0XL4
                       DS    XL2              MODULE ID
                       DS    X                RETURN CODE
                       DS    X                REASON CODE
COMM_DSINFO_MSG        DC    CL30' '

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_RC                DC    X'00'            TERMINATION RETURN CODE

* ------------------------------------------------------------------- *
*              Condition code type for extended branch mnemonics      *
* ------------------------------------------------------------------- *
COMM_CC                DC    X'00'            CONDITION CODE TYPE

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_PREFIX            DC    CL4' '           LABEL PREFIX
COMM_DD_NUMBER         DC    PL4'0'           DD NUMBER FOR DYNALLOC

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                       DS    0H
COMM_INFO_01           DC    CL64' '
COMM_INFO_02           DC    CL64' '
COMM_INFO_03           DC    CL64' '
COMM_INFO_04           DC    CL64' '

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_MSG_ID            DC    X'00'            MESSAGE ID
COMM_MSG_CSECT         DC    CL8' '           MESSAGE CSECT
COMM_MSG_1             DC    CL75' '
COMM_MSG_2             DC    CL75' '
COMM_MSG_3             DC    CL75' '
COMM_MSG_4             DC    CL75' '
COMM_MSG_5             DC    CL75' '
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_CONTROL_STMT      DS    CL80             SYSIN CONTROL STATEMENTS
COMM_DEBUG_IO          DS    CL133            DEBUG I/O
COMM_SUBHEAD           DC    CL133' '         SUB HEADING

COMM_ASSEMBLER_IO      DC    CL133' '
                       ORG   COMM_ASSEMBLER_IO+1
COMM_ASSEMBLER_DISP    DS    CL6
                       ORG   COMM_ASSEMBLER_IO+23
COMM_ASSEMBLER_ADDR1   DS    CL5
                       ORG   COMM_ASSEMBLER_IO+41
COMM_ASSEMBLER_LABEL   DS    CL63
                       ORG

PRINT_CC               DC    C' '
PRINT_DATA             DC    CL132' '

COMM_SOURCE            DS    0C
COMM_SOURCE_DISP       DS    CL8
                       DS    CL2
COMM_SOURCE_HEX_1      DS    CL4
                       DS    C
COMM_SOURCE_HEX_2      DS    CL4
                       DS    C
COMM_SOURCE_HEX_3      DS    CL4
                       DS    C
COMM_SOURCE_HEX_4      DS    CL4
                       DS    CL5
COMM_SOURCE_LABEL      DS    CL8
                       DS    C
COMM_SOURCE_OPCODE     DS    CL5
                       DS    C
COMM_SOURCE_OPERANDS   DS    CL101
COMM_SOURCE_L          EQU   *-COMM_SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COMM_BLANKS            DC    256C' '

COMM_HEXCHAR           EQU   *-C'0'
                       DC    C'0123456789ABCDEF'
* ------------------------------------------------------------------- *
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
* ------------------------------------------------------------------- *
TRENTRY        DSECT
TREMOD         DS    CL8                 MODULE NAME
TREID          DS    CL8                 TRACE ID
TREDATA1       DS    CL8                 TRACE DATA 1
TREDATA2       DS    CL8                 TRACE DATA 2
TRENTRYL       EQU   *-TRENTRY           ENTRY LENGTH
         MEND
./ ADD NAME=DISSPFD  0117-08351-09118-1551-00060-00044-00000-MACLIB
         MACRO
         DISSPFD  &TYPE=
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
DISSPFD                CSECT
DISSPFD                AMODE 31
DISSPFD                RMODE ANY
         AGO   .COMM
.DSECT   ANOP
DISSPFD                DSECT
.COMM    ANOP
SPF_LVLINE             DC    F'0'       LAST VISIBLE LINE
SPF_VWIDTH             DC    F'0'       DYNAMIC AREA WIDTH
SPF_VCOL               DC    F'0'       DYNAMIC AREA COLUMN
SPF_VDEPTH             DC    F'0'       DYNAMIC AREA DEPTH
SPF_VROW               DC    F'0'       DYNAMIC AREA ROW
SPF_ZSCROLLN           DC    F'0'       NUMBER OF LINES TO SCROLL
SPF_CURSOR_POSITION    DC    F'0'       CURSOR POSITION

SPF_VTYPE              DC    CL08' '    DYNAMIC AREA TYPE
SPF_ZSCROLLA           DC    CL08' '    SCROLL AMOUNT
SPF_ZVERB              DC    CL08' '    SPF VERB
SPF_ZCMD               DC    CL80' '    SPF COMMAND AREA
SPF_VSCR               DC    CL04'CSR'  ONLY USED IF SPF NOT AVAILABLE
SPF_AREA               DC    CL08' '    DYNAMIC AREA NAME

SPF_CONF_DSN           DC    CL44' '    SAVED CONFIG DATA DSN
SPF_CONF_VOLSER        DC    CL06' '    SAVE CONFIG DATASET VOLSER
SPF_CONF_MEMBER        DC    CL08' '    SAVED CONFIG MEMBER DSN

SPF_LMOD_DSN           DC    CL44' '    LMOD DATA SET NAME
SPF_LMOD_VOLSER        DC    CL06' '    LMOD DATA SET VOLSER
SPF_LMOD               DC    CL08' '    LMOD
SPF_CSECT              DC    CL08' '    CSECT
SPF_CSECT_LENGTH       DC    CL08' '    CSECT LENGTH IN HEX

SPF_DD                 DC    CL08' '    DD NAME
SPF_YES_OR_NO          DC    CL03' '    CONFIRMATION YES OR NO
SPF_FUNCTION           DC    CL01' '    FUNCTION
SPF_PREFIX             DC    CL04' '    LABEL PREFIX
SPF_DDID               DC    CL08' '    DATA ID (RETURNED BY LMINIT)
SPF_REGISTER           DC    CL03' '    REGISTER NAME
SPF_BEGIN              DC    CL08' '    BEGIN DISP
SPF_END                DC    CL08' '    END DISP

SPF_OUTPUT_DSN         DC    CL44' '    OUTPUT (GENERATED SOURCE)

SPF_FLAGS              DC    X'00'      FLAGS/SWITCHES
$SPF_VPUT              EQU   X'80'      .. VPUT HAS BEEN ISSUED

SPF_MSG_1              DC    CL80' '
SPF_MSG_2              DC    CL80' '
SPF_MSG_3              DC    CL80' '
SPF_MSG_4              DC    CL80' '
SPF_MSG_5              DC    CL80' '

         MEND
./ ADD NAME=DXDPREF  0100-08351-08351-1447-00006-00006-00000-MACLIB
DXD_PREFIX    DS    0F
DXD_SAVE      DS    18F
DXD_TRACE_1   DS    CL8
DXD_TRACE_2   DS    CL8
DXD_CSECT     DS    CL8
DXD_PREFIX_L  EQU   *-DXD_PREFIX
./ ADD NAME=ITRACE   0102-07087-09197-1419-00083-00072-00000-MACLIB
.* ------------------------------------------------------------------*
.*                                                                   *
.*                        TRACE MACRO                                *
.*                                                                   *
.*       The trace function always captures the CSECT name (taken    *
.*       from the module prefix data) and a TRACE ID (specified on   *
.*       this macro).                                                *
.*                                                                   *
.*       One or two data elements (8 bytes each) may be captured at  *
.*       any trace point.  The data to be captured may be specified  *
.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *
.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *
.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *
.*       captured, RDATA1 and RDATA2 specify a register whose        *
.*       contents are to be captured.                                *
.*                                                                   *
.*       For example:                                                *
.*                                                                   *
.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *
.*                                                                   *
.*          In this case the trace entry would include the CSECT     *
.*          name, the ID data "POINTA", 8 bytes of data beginning    *
.*          at VALUE1's address and the contents of register 4.      *
.*                                                                   *
.* ------------------------------------------------------------------*
         MACRO
&NAME    ITRACE &OPT,&ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=
         GBLC  &TROPT
         AIF   (T'&OPT NE 'O').OPT0000
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   ('&TROPT' EQ 'OFF').MEXIT
         AIF   (T'&DATA1 EQ 'O').DATA020
         AIF   ('&DATA1'(1,1) EQ '(').DATA010
         LA    R14,&DATA1                DATA ADDRESS
         MVC   COMM_TRACE_ITEM_1,0(R14)  MOVE DATA
         AGO   .DATA030
.DATA010 ANOP
         MVC   COMM_TRACE_ITEM_1,0&DATA1 MOVE DATA
         AGO   .DATA030
.DATA020 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA030
         STCM  &RDATA1,15,COMM_TRACE_ITEM_1
.DATA030 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA050
         AIF   ('&DATA2'(1,1) EQ '(').DATA040
         LA    R14,&DATA2                DATA ADDRESS
         MVC   COMM_TRACE_ITEM_2,0(R14)  MOVE DATA
         AGO   .DATA060
.DATA040 ANOP
         MVC   COMM_TRACE_ITEM_2,0&DATA2 MOVE DATA
         AGO   .DATA060
.DATA050 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA060
         STCM  &RDATA2,15,COMM_TRACE_ITEM_2
.DATA060 ANOP
         BAL   R14,TRACE000              ENTER TRACE ROUTINE
         AIF      (T'&ID EQ 'O').NOID
&NAME    DC    CL8'&ID'                  TRACE ID
         AGO   .ID
.NOID    ANOP
         MNOTE 4,'NO ID GIVEN, ''**NO ID**'' GENERATED'
&NAME    DC    CL8'**NOID**'
.ID      ANOP
         MEXIT
.OPT0000 ANOP
         AIF   ('&OPT' EQ 'ON').OPT0010
         AIF   ('&OPT' EQ 'OFF').OPT0010
         AGO   .ERR0030
.OPT0010 ANOP
&TROPT   SETC  '&OPT'
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'TRACE OPTION MUST BE -ON- OR -OFF-'
.MEXIT   ANOP
         MEXIT
         MEND
./ ADD NAME=LIBBLOK  0100-08351-08351-1041-00024-00024-00000-MACLIB
*---------------------------------------------------------------------*
*                                                                     *
*     SYSLIB for assembling DSECTs                                    *
*                                                                     *
*                                                                     *
*   The disassembler allows DSECTs assembled during a dis-assembly.   *
*                                                                     *
*   To allow this, the disassembler, loads and then links to the      *
*   high-level assembler.  The assembler will use the "normal DDs".   *
*   This means that any COPY or MACROs whose source is not defined    *
*   in-line will need to be resolved via a library in the SYSLIB      *
*   concatenation.                                                    *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
DISASM_SYSLIB        DSECT
DISASM_SYSLIB_NEXT   DS     A           NEXT KSDS BLOCK
DISASM_SYSLIB_EYE    DS     CL8         EYE CATCHER
DISASM_SYSLIB_DDNAME DS     CL8         DD NAME
DISASM_SYSLIB_DSNAME DS     CL44        DSN
DISASM_SYSLIB_DCB    DS     (DCB_L)X    DCB
DISASM_SYSLIB_FLAGS  DS     X
$DISASM_SYSLIB_OPEN  EQU    X'80'       .. DCB IS OPEN
DISASM_SYSLIB_L      EQU    *-DISASM_SYSLIB
./ ADD NAME=MESG     0103-07038-08331-1125-00014-00013-00000-MACLIB
         MACRO
&NAME    MESG &NBR
         GBLA &GNBR
         AIF  ('&NBR' EQ 'END').GENEND
         AIF  (&NBR GT 255).TOOHIGH
&GNBR    SETA &SYSNDX
A&GNBR   DS   0C
         DC   AL1(&NBR)                       MESSAGE ID
         DC   AL4(Z&GNBR-A&GNBR)              LENGTH
         MEXIT
.GENEND  ANOP
         DC   X'FF'
Z&GNBR   DS   0C
         MEND
./ ADD NAME=MESGCOMP 0112-07038-08331-1118-00072-00017-00000-MACLIB
         MACRO
         MESGCOMP &LINE,&TYPE,&LENGTH,&LBL
         GBLA  &GMAXL
         AIF   ('&TYPE' EQ 'ADDR').ADDR000
         AIF   ('&TYPE' EQ 'CHAR').CHAR000
         AIF   ('&TYPE' EQ 'HALFWORD').HALF000
         AIF   ('&TYPE' EQ 'HEX').HEX000
         AIF   ('&TYPE' EQ 'FULLWORD').FULL000
         AIF   ('&TYPE' EQ 'TEXT').TEXT000
         MNOTE 12,'INVALID -TYPE-'
         MEXIT
.ADDR000 ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_ADDRESS)   COMPONENT TYPE
         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE
         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA
         DC     AL1(&LINE)                    MESSAGE LINE
B&SYSNDX EQU    *
         AGO    .MAXL00
.CHAR000 ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_CHAR)      COMPONENT TYPE
         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE
         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA
         DC     AL1(&LINE)                    MESSAGE LINE
B&SYSNDX EQU    *
         AGO    .MAXL00
.HALF000 ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_HALFWORD)  COMPONENT TYPE
         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE
         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA
         DC     AL1(&LINE)                    MESSAGE LINE
B&SYSNDX EQU    *
         AGO    .MAXL00
.HEX000  ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_HEX)       COMPONENT TYPE
         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE
         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA
         DC     AL1(&LINE)                    MESSAGE LINE
B&SYSNDX EQU    *
         AGO    .MAXL00
.FULL000 ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_FULLWORD)  COMPONENT TYPE
         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE
         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA
         DC     AL1(&LINE)                    MESSAGE LINE
B&SYSNDX EQU    *
         AGO    .MAXL00
.TEXT000 ANOP
A&SYSNDX EQU    *
         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR
         DC     AL1($MSG_COMPONENT_TEXT)      COMPONENT TYPE
         DC     AL2(Y&SYSNDX-X&SYSNDX)        LENGTH IN OUTPUT MESSAGE
         DC     AL2(0)
         DC     AL1(&LINE)                    MESSAGE LINE
X&SYSNDX EQU    *
         DC     C&LBL
Y&SYSNDX EQU    *
B&SYSNDX EQU    *
.MAXL00  ANOP
         AIF    (&GMAXL GE &LINE).MEXIT
&GMAXL   SETA   &LINE
.MEXIT   ANOP
         MEND
./ ADD NAME=MSG      0105-08331-08345-1605-00030-00030-00000-MACLIB
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*             MAP THE MESSAGE CSECT                                   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
MSG_CSECT                   DSECT
MSG_CSECT_NAME              DS   CL8        CSECT NAME
MSG_CSECT_LENGTH            DS   AL4        LENGTH ALL DATA FOR CSECT
MSG_CSECT_MSGS              DS   0C

MSG_MSG                     DSECT
MSG_ID                      DS   X          MESSAGE ID
MSG_LENGTH                  DS   AL4        LENGTH OF ALL COMPONENTS
MSG_COMPONENTS              DS   0C         FIRST COMPONENT

MSG_COMPONENT               DSECT
MSG_COMPONENT_LENGTH        DS   XL2        LENGTH OF THIS DESCRIPTOR
MSG_COMPONENT_TYPE          DS   X          TYPE
$MSG_COMPONENT_ADDRESS      EQU  C'A'       .. ADDRESS
$MSG_COMPONENT_CHAR         EQU  C'C'       .. CHARACTER
$MSG_COMPONENT_HALFWORD     EQU  C'H'       .. HALFWORD
$MSG_COMPONENT_HEX          EQU  C'X'       .. HEX
$MSG_COMPONENT_FULLWORD     EQU  C'F'       .. FULLWORD
$MSG_COMPONENT_TEXT         EQU  C'T'       .. CONSTANT TEXT
MSG_COMPONENT_OUTPUT_LENGTH DS   XL2        LENGTH IN OUTPUT MESSAGE
MSG_COMPONENT_DISP          DS   XL2        DATA DISP INTO DISCOMM
MSG_COMPONENT_LINE          DS   X          MESSAGE LINE NUMBER
MSG_COMPONENT_TEXT          DS   0C         PRESENT FOR CONSTANT TEXT
./ ADD NAME=OPCODE   0103-07038-08345-1616-00158-00127-00000-MACLIB
         MACRO
.* ------------------------------------------------------------------ *
.*                                                                    *
.*    DEFINE OPCODES                                                  *
.*      MACH    OPCODE IN MACHINE HEX                                 *
.*      MNEM    MNEMONIC FOR THE INSTRUCTION                          *
.*      LENGTH  LENGTH OF INSTRUCTION                                 *
.*      COMMENT ANY COMMENT (PRINTED IN COMMENT AREA OF GENNED SOURCE)*
.*      FLAGS                                                         *
.*                - OPCODE_EXT    USE EXTENDED NMEMONIC IF AVAILABLE  *
.*                - OPCODE_SVC    THIS INSTRUCTION IS AN SVC          *
.*                - OPCODE_REF    THIS INSTRUCTION CAUSES REFERENCE(S)*
.*                - OPCODE_CCA    SETS "ARITHMETIC" CONDITION CODE    *
.*                - OPCODE_CC     SETS "COMPARE" CONDITION CODE       *
.*                - OPCODE_CCL    SETS "LOGICAL" CONDITION CODE       *
.*                - OPCODE_BRANCH THIS IS A "BRANCHING" INSTRUCTION   *
.*      REGS    REGISTER CONSTRAINTS                                  *
.*                - OPCODE_1EVEN  R1 MUST BE EVEN NUMBER              *
.*                - OPCODE_104    R1 MUST BE 0 OR 4                   *
.*                - OPCODE_10246  R1 MUST BE 0, 2, 4, OR 6            *
.*                - OPCODE_2EVEN  R2 MUST BE EVEN NUMBER              *
.*                - OPCODE_204    R2 MUST BE 0 OR 4                   *
.*                - OPCODE_20246  R2 MUST BE 0, 2, 4, OR 6            *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.* ------------------------------------------------------------------ *
         OPCODE &MACH,                                                 +
               &MNEM,                                                  +
               &FORMAT,                                                +
               &LENGTH,                                                +
               &COMMENT,                                               +
               &FLAGS=,                                                +
               &REGS=,                                                 +
               &TYPE=DEFINE
         GBLB &OPSW
         GBLC &OPTBL(256),&HEXTBL(16)
         LCLA &SUB1,&SUB2,&SUB3
         LCLC &OP1,&OP2,&OPTS
         AIF  (&OPSW).LBL020
&OPSW    SETB 1
&SUB1    SETA 1
.LBL010  ANOP
&OPTBL(&SUB1) SETC '0'
&SUB1    SETA &SUB1+1
         AIF  (&SUB1 LE 256).LBL010
&HEXTBL(01) SETC '0'
&HEXTBL(02) SETC '1'
&HEXTBL(03) SETC '2'
&HEXTBL(04) SETC '3'
&HEXTBL(05) SETC '4'
&HEXTBL(06) SETC '5'
&HEXTBL(07) SETC '6'
&HEXTBL(08) SETC '7'
&HEXTBL(09) SETC '8'
&HEXTBL(10) SETC '9'
&HEXTBL(11) SETC 'A'
&HEXTBL(12) SETC 'B'
&HEXTBL(13) SETC 'C'
&HEXTBL(14) SETC 'D'
&HEXTBL(15) SETC 'E'
&HEXTBL(16) SETC 'F'
.LBL020  ANOP
         AIF  ('&TYPE' EQ 'INDEX').LBL130
         AIF  ('&TYPE' NE 'DEFINE').ERR70
         AIF  (T'&MACH EQ 'O').ERR010
         AIF  (K'&MACH NE 2).ERR020
         AIF  (T'&LENGTH EQ 'O').ERR080
         AIF  (&LENGTH EQ 2).LBL030
         AIF  (&LENGTH EQ 4).LBL030
         AIF  (&LENGTH NE 6).ERR090
.LBL030  ANOP
         AIF  (K'&MNEM GT 5).ERR100
&OP1     SETC '&MACH'(1,1)
&OP2     SETC '&MACH'(2,1)
&SUB1    SETA 1
.LBL040  ANOP
         AIF  ('&OP1' EQ '&HEXTBL(&SUB1)').LBL050
         AIF  (&SUB1 EQ 16).ERR030
&SUB1    SETA &SUB1+1
         AGO  .LBL040
.LBL050  ANOP
&SUB2    SETA &SUB1
&SUB1    SETA 1
.LBL060  ANOP
         AIF  ('&OP2' EQ '&HEXTBL(&SUB1)').LBL070
         AIF  (&SUB1 EQ 16).ERR030
&SUB1    SETA &SUB1+1
         AGO  .LBL060
.LBL070  ANOP
&SUB3    SETA &SUB1
&SUB1    SETA (16*(&SUB2-1))+&SUB3
         AIF  ('&OPTBL(&SUB1)' NE '0').ERR040
&OPTBL(&SUB1) SETC 'MACH&MACH'
         AIF  (T'&MNEM EQ 'O').ERR050
         AIF  (T'&FORMAT EQ 'O').ERR060
MACH&MACH DC   CL2'&MACH'           MACHINE CODE FOR THIS INSTRUCTION
          DC   CL05'&MNEM'          MNEMONIC
          DC   AL2(&LENGTH)         INSTRUCTION LENGTH
          DC   AL1(&FORMAT)         FORMAT CODE
&OPTS    SETC '0'
         AIF  (T'&FLAGS EQ 'O').LBL080
&OPTS    SETC '&FLAGS'
.LBL080  ANOP
         AIF  (T'&COMMENT EQ 'O').LBL090
          DC   AL1(&OPTS)           FLAGS
         AGO   .LBL100
.LBL090  ANOP
          DC   AL1(&OPTS+$OPCODE_NO_COMMENT)
.LBL100  ANOP
         AIF   (T'&REGS EQ 'O').LBL110
          DC    AL1(&REGS)
         AGO   .LBL120
.LBL110  ANOP
          DC    AL1(0)              NO REGISTER REQUIREMENTS
.LBL120  ANOP
         AIF   (T'&COMMENT EQ 'O').EXIT
          DC   CL25&COMMENT         COMMENT
         MEXIT
.LBL130  ANOP
&SUB1    SETA 1
.LBL140  ANOP
         DC    A(&OPTBL(&SUB1))
         AIF   (&SUB1 EQ 256).EXIT
&SUB1    SETA  &SUB1+1
         AGO   .LBL140
.ERR010  ANOP
         MNOTE 12,'MACHINE CODE IS REQUIRED'
         MEXIT
.ERR020  ANOP
         MNOTE 12,'MACHINE CODE MUST BE 2 CHARACTERS'
         MEXIT
.ERR030  ANOP
         MNOTE 12,'MACHINE CODE CONTAINS INVALID HEX CHARACTER'
         MEXIT
.ERR040  ANOP
         MNOTE 12,'MACHINE CODE &MACH IS DUPLICATELY DEFINED'
         MEXIT
.ERR050  ANOP
         MNOTE 12,'MNEMONIC IS REQUIRED'
         MEXIT
.ERR060  ANOP
         MNOTE 12,'INSTRUCTION FORMAT IS REQUIRED'
         MEXIT
.ERR070  ANOP
         MNOTE 12,'INVALID TYPE PARAMETER'
         MEXIT
.ERR080  ANOP
         MNOTE 12,'LENGTH IS REQUIRED'
         MEXIT
.ERR090  ANOP
         MNOTE 12,'LENGTH MUST BE 2, 4, OR 6'
         MEXIT
.ERR100  ANOP
         MNOTE 12,'MNEMONIC IS MORE THAN 5 CHARACTERS LONG'
.EXIT    ANOP
         MEND
./ ADD NAME=PPDDATA  0101-09040-09040-0911-00009-00009-00000-MACLIB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PPD                DS    0C
PPD_KEY            DC    0CL67
PPD_SEQ            DC    XL4'00'
PPD_NAME           DC    CL63' '
PPD_DATA           DC    100X'00'
PPD_L              EQU   *-PPD
./ ADD NAME=REGEQU   0100-09250-09250-1002-00016-00016-00000-MACLIB
R0       EQU    0
R1       EQU    1
R2       EQU    2
R3       EQU    3
R4       EQU    4
R5       EQU    5
R6       EQU    6
R7       EQU    7
R8       EQU    8
R9       EQU    9
R10      EQU    10
R11      EQU    11
R12      EQU    12
R13      EQU    13
R14      EQU    14
R15      EQU    15
./ ADD NAME=VARDSECT 0102-08351-09015-1342-00014-00013-00000-MACLIB
* ------------------------------------------------------------------- *
*              VARIABLE TABLE ENTRIES                                 *
* ------------------------------------------------------------------- *
VARDSECT     DSECT
VAR_NAME     DS    CL8                   NAME KNOWN TO SPF
VAR_FLAGS    DS    X                     FLAGS
$VAR_DEFINED EQU   X'80'                 .. VARIABLE IS VDEFINED
$VAR_NEVER   EQU   X'40'                 .. NEVER VDEFINE
$VAR_VGET    EQU   X'20'                 .. VGET WHEN VDEFINED
$VAR_VPUT    EQU   X'10'                 .. VPUT WHEN VDELETED
VAR_LENGTH   DS    AL4                   VARIABLE LENGTH
VAR_FORM     DS    CL8                   VARIABLE FORMAT
VAR_DISP     DS    AL2                   DISPLACEMENT TO DATA
VARDSECT_L   EQU   *-VARDSECT
./ ADD NAME=VCONS    0144-08218-09128-0836-00059-00018-00000-MACLIB
       MACRO
       VCONS  &TYPE
       GBLA   &NDX
       GBLC   &NAME(45)
&NAME(01)     SETC  'DISALIST'
&NAME(02)     SETC  'DISASSEM'
&NAME(03)     SETC  'DISBIND'
&NAME(04)     SETC  'DISBLIST'
&NAME(05)     SETC  'DISBMAIN'
&NAME(06)     SETC  'DISCONF'
&NAME(07)     SETC  'DISDAIR'
&NAME(08)     SETC  'DISDCONV'
&NAME(09)     SETC  'DISDDSCT'
&NAME(10)     SETC  'DISDEBUG'
&NAME(11)     SETC  'DISDIR'
&NAME(12)     SETC  'DISDINFO'
&NAME(13)     SETC  'DISDISP'
&NAME(14)     SETC  'DISDLIST'
&NAME(15)     SETC  'DISDMERG'
&NAME(16)     SETC  'DISDSECT'
&NAME(17)     SETC  'DISELIST'
&NAME(18)     SETC  'DISESD'
&NAME(19)     SETC  'DISGEN'
&NAME(20)     SETC  'DISKLIST'
&NAME(21)     SETC  'DISMSG'
&NAME(22)     SETC  'DISNAME'
&NAME(23)     SETC  'DISNLIST'
&NAME(24)     SETC  'DISOPTS'
&NAME(25)     SETC  'DISPARM'
&NAME(26)     SETC  'DISPRINT'
&NAME(27)     SETC  'DISREF'
&NAME(28)     SETC  'DISRLD'
&NAME(29)     SETC  'DISRLIST'
&NAME(30)     SETC  'DISRR'
&NAME(31)     SETC  'DISSCAN'
&NAME(32)     SETC  'DISSLIST'
&NAME(33)     SETC  'DISTDBUG'
&NAME(34)     SETC  'DISTEXT'
&NAME(35)     SETC  'DISTIOT'
&NAME(36)     SETC  'DISTLSTB'
&NAME(37)     SETC  'DISTLSTT'
&NAME(38)     SETC  'DISTMAIN'
&NAME(39)     SETC  'DISULIST'
&NAME(40)     SETC  'DISVAR'
&NAME(41)     SETC  'DISVBU'
&NAME(42)     SETC  'DISVDATA'
&NAME(43)     SETC  'DISXLIST'
&NDX          SETA  1
.LBL0010      AIF  ('&NAME(&NDX)' EQ '').END
              AIF    ('&TYPE' EQ 'CSECT').LBL0020
V_&NAME(&NDX) DS  V
              AGO .LBL0030
.LBL0020      ANOP
              DC  V(&NAME(&NDX))
.LBL0030      ANOP
&NDX          SETA  &NDX+1
              AGO .LBL0010
.END          ANOP
              MEND
./ ADD NAME=VDEF     0101-08351-08351-1456-00029-00029-00001-MACLIB
         MACRO
         VDEF  &NAME=,               VARIABLE NAME                     +
               &DATA=,               DATA ADDRESS                      +
               &LENGTH=,             DATA LENGTH                       +
               &FORM=,               DATA FORMAT                       +
               &FLAGS=00
.LBL0010 ANOP
         AIF   (T'&NAME EQ 'O').ERR0010
         AIF   (T'&LENGTH  EQ 'O').ERR0020
         AIF   (T'&FORM    EQ 'O').ERR0030
         DC    CL8'&NAME'             NAME KNOWN TO SPF
         DC    AL1(&FLAGS)            FLAGS/INDICATORS
         DC    AL4(&LENGTH)           LENGTH
         DC    CL8'&FORM'             VARIABLE FORMAT
         DC    AL2(&DATA-DISSPFD)     DISPLACEMENT TO DATA
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'NAME IS A REQUIRED PARAMETER'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'LENGTH IS A REQUIRED PARAMETER'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'FORM IS A REQUIRED PARAMETER'
         MEXIT
.ERR0040 ANOP
         MNOTE 12,'VARIABLE NAME IS DUPLICATED'
         MEXIT
         MEND
